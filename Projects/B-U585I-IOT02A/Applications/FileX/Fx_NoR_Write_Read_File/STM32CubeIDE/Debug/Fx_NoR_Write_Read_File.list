
Fx_NoR_Write_Read_File.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a6d0  08000238  08000238  00010238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000367  0801a908  0801a908  0002a908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801ac70  0801ac70  0002ac70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801ac78  0801ac78  0002ac78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801ac7c  0801ac7c  0002ac7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000113c  20000000  0801ac80  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00014860  20001140  0801bdbc  00031140  2**5
                  ALLOC
  8 ._user_heap_stack 00000600  200159a0  0801bdbc  000359a0  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  0003113c  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  00031172  2**0
                  CONTENTS, READONLY
 11 .debug_info   000632ee  00000000  00000000  000311b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000d4c9  00000000  00000000  000944a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000026b0  00000000  00000000  000a1970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001b97  00000000  00000000  000a4020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00042e3d  00000000  00000000  000a5bb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00055e8c  00000000  00000000  000e89f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00164282  00000000  00000000  0013e880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000887c  00000000  00000000  002a2b04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 000001fa  00000000  00000000  002ab380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	; (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	; (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	20001140 	.word	0x20001140
 8000254:	00000000 	.word	0x00000000
 8000258:	0801a8f0 	.word	0x0801a8f0

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	; (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	; (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	; (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20001144 	.word	0x20001144
 8000274:	0801a8f0 	.word	0x0801a8f0

08000278 <_tx_initialize_low_level>:
    .thumb_func
.type _tx_initialize_low_level, function
_tx_initialize_low_level:

    /* Disable interrupts during ThreadX initialization.  */
    CPSID   i
 8000278:	b672      	cpsid	i
    LDR     r1, =__RAM_segment_used_end__           // Build first free address
    ADD     r1, r1, #4                              //
    STR     r1, [r0]                                // Setup first unused memory pointer
#endif
    /* Setup Vector Table Offset Register.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 800027a:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 800027e:	4917      	ldr	r1, [pc, #92]	; (80002dc <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        // Set vector table address
 8000280:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08

    /* Enable the cycle count register.  */
    LDR     r0, =0xE0001000                         // Build address of DWT register
 8000284:	4816      	ldr	r0, [pc, #88]	; (80002e0 <__tx_DBGHandler+0x8>)
    LDR     r1, [r0]                                // Pickup the current value
 8000286:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              // Set the CYCCNTENA bit
 8000288:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                // Enable the cycle count register
 800028c:	6001      	str	r1, [r0, #0]

    /* Set system stack pointer from vector value.  */
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 800028e:	4815      	ldr	r0, [pc, #84]	; (80002e4 <__tx_DBGHandler+0xc>)
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 8000290:	4912      	ldr	r1, [pc, #72]	; (80002dc <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                // Pickup reset stack pointer
 8000292:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                // Save system stack pointer
 8000294:	6001      	str	r1, [r0, #0]

    /* Configure SysTick.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 8000296:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 800029a:	4913      	ldr	r1, [pc, #76]	; (80002e8 <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         // Setup SysTick Reload Value
 800029c:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                // Build SysTick Control Enable Value
 800029e:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         // Setup SysTick Control
 80002a2:	6101      	str	r1, [r0, #16]

    /* Configure handler priorities.  */
    LDR     r1, =0x00000000                         // Rsrv, UsgF, BusF, MemM
 80002a4:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        // Setup System Handlers 4-7 Priority Registers
 80002a8:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         // SVCl, Rsrv, Rsrv, Rsrv
 80002ac:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        // Setup System Handlers 8-11 Priority Registers
 80002b0:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    // Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 80002b4:	490d      	ldr	r1, [pc, #52]	; (80002ec <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        // Setup System Handlers 12-15 Priority Registers
 80002b6:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    // Note: PnSV must be lowest priority, which is 0xFF

    /* Return to caller.  */
    BX      lr
 80002ba:	4770      	bx	lr

080002bc <__tx_BadHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_BadHandler
    .thumb_func
.type __tx_BadHandler, function
__tx_BadHandler:
    B       __tx_BadHandler
 80002bc:	f7ff bffe 	b.w	80002bc <__tx_BadHandler>

080002c0 <__tx_IntHandler>:
    .thumb_func
.type __tx_IntHandler, function
__tx_IntHandler:
// VOID InterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002c0:	b501      	push	{r0, lr}
    /* Do interrupt handler work here */
    /* .... */
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002c2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002c6:	4770      	bx	lr

080002c8 <SysTick_Handler>:
    .thumb_func
.type SysTick_Handler, function
SysTick_Handler:
// VOID TimerInterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002c8:	b501      	push	{r0, lr}
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_enter             // Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 80002ca:	f000 f897 	bl	80003fc <_tx_timer_interrupt>
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002ce:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002d2:	4770      	bx	lr

080002d4 <__tx_NMIHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_NMIHandler
    .thumb_func
.type __tx_NMIHandler, function
__tx_NMIHandler:
    B       __tx_NMIHandler
 80002d4:	f7ff bffe 	b.w	80002d4 <__tx_NMIHandler>

080002d8 <__tx_DBGHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_DBGHandler
    .thumb_func
.type __tx_DBGHandler, function
__tx_DBGHandler:
    B       __tx_DBGHandler
 80002d8:	f7ff bffe 	b.w	80002d8 <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 80002dc:	08000000 	.word	0x08000000
    LDR     r0, =0xE0001000                         // Build address of DWT register
 80002e0:	e0001000 	.word	0xe0001000
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 80002e4:	20015248 	.word	0x20015248
    LDR     r1, =SYSTICK_CYCLES
 80002e8:	001869ff 	.word	0x001869ff
    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 80002ec:	40ff0000 	.word	0x40ff0000

080002f0 <_tx_thread_schedule>:
    /* This function should only ever be called on Cortex-M
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */
    MOV     r0, #0                                  // Build value for TX_FALSE
 80002f0:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80002f4:	4a2d      	ldr	r2, [pc, #180]	; (80003ac <_tx_vfp_access+0x4>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 80002f6:	6010      	str	r0, [r2, #0]

#ifdef __ARM_FP
    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 80002f8:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 80002fc:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 8000300:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 8000304:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */
    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 8000306:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 800030a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 800030e:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             // Complete all memory accesses
 8000312:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 8000316:	f3bf 8f6f 	isb	sy

0800031a <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 800031a:	e7fe      	b.n	800031a <__tx_wait_here>

0800031c <PendSV_Handler>:
#else
    CPSIE   i                                       // Enable interrupts
#endif  /* TX_PORT_USE_BASEPRI */
#endif  /* EXECUTION PROFILE */

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800031c:	4824      	ldr	r0, [pc, #144]	; (80003b0 <_tx_vfp_access+0x8>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 800031e:	4a25      	ldr	r2, [pc, #148]	; (80003b4 <_tx_vfp_access+0xc>)
    MOV     r3, #0                                  // Build NULL value
 8000320:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 8000324:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 8000326:	b191      	cbz	r1, 800034e <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 8000328:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 800032a:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 800032e:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 8000332:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 8000336:	d101      	bne.n	800033c <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 8000338:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

0800033c <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800033c:	4c1e      	ldr	r4, [pc, #120]	; (80003b8 <_tx_vfp_access+0x10>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 800033e:	f84c ed04 	str.w	lr, [ip, #-4]!
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 8000342:	f8c1 c008 	str.w	ip, [r1, #8]
_skip_secure_save:
#endif

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 8000346:	6825      	ldr	r5, [r4, #0]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 8000348:	b10d      	cbz	r5, 800034e <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 800034a:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 800034c:	6023      	str	r3, [r4, #0]

0800034e <__tx_ts_new>:

#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 800034e:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 8000350:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 8000352:	b1d1      	cbz	r1, 800038a <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 8000354:	6001      	str	r1, [r0, #0]
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 8000356:	b662      	cpsie	i

08000358 <__tx_ts_restore>:
#endif

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 8000358:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800035a:	4c17      	ldr	r4, [pc, #92]	; (80003b8 <_tx_vfp_access+0x10>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 800035c:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 800035e:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 8000362:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 8000364:	6025      	str	r5, [r4, #0]
    POP     {r0,r1}                                 // Restore r1 (and dummy r0)
_skip_secure_restore:
#endif

    /* Restore the thread context and PSP.  */
    LDR     r12, [r1, #12]                          // Get stack start
 8000366:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    MSR     PSPLIM, r12                             // Set stack limit
 800036a:	f38c 880b 	msr	PSPLIM, ip
    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 800036e:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 8000372:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 8000376:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 800037a:	d101      	bne.n	8000380 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 800037c:	ecbc 8a10 	vldmia	ip!, {s16-s31}

08000380 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 8000380:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 8000384:	f38c 8809 	msr	PSP, ip

    BX      lr                                      // Return to thread!
 8000388:	4770      	bx	lr

0800038a <__tx_ts_wait>:
__tx_ts_wait:
#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 800038a:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 800038c:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 800038e:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 8000390:	b909      	cbnz	r1, 8000396 <__tx_ts_ready>

#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 8000392:	b662      	cpsie	i
#endif
    B       __tx_ts_wait                            // Loop to continue waiting
 8000394:	e7f9      	b.n	800038a <__tx_ts_wait>

08000396 <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */
__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 8000396:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 800039a:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 800039e:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04
    /* Re-enable interrupts and restore new thread.  */
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003a2:	b662      	cpsie	i
#endif
    B       __tx_ts_restore                         // Restore the thread
 80003a4:	e7d8      	b.n	8000358 <__tx_ts_restore>
 80003a6:	bf00      	nop

080003a8 <_tx_vfp_access>:
.type _tx_vfp_access, function
_tx_vfp_access:
#if TX_ENABLE_FPU_SUPPORT
    VMOV.F32 s0, s0                                 // Simply access the VFP
#endif
    BX       lr                                     // Return to caller
 80003a8:	4770      	bx	lr
 80003aa:	0000      	.short	0x0000
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80003ac:	200152e4 	.word	0x200152e4
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80003b0:	2001524c 	.word	0x2001524c
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80003b4:	20015250 	.word	0x20015250
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003b8:	20015850 	.word	0x20015850

080003bc <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 80003bc:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 80003be:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 80003c2:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
#ifdef TX_SINGLE_MODE_SECURE
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value for secure mode
#else
    LDR     r3, =0xFFFFFFBC                         // Build initial LR value to return to non-secure PSP
 80003c6:	f06f 0343 	mvn.w	r3, #67	; 0x43
#endif
    STR     r3, [r2, #0]                            // Save on the stack
 80003ca:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 80003cc:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 80003d0:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 80003d2:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 80003d4:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 80003d6:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 80003d8:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 80003da:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 80003dc:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 80003de:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 80003e0:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 80003e2:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 80003e4:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 80003e6:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 80003e8:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 80003ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    STR     r3, [r2, #56]                           // Store initial lr
 80003ee:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 80003f0:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 80003f2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 80003f6:	6413      	str	r3, [r2, #64]	; 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 80003f8:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 80003fa:	4770      	bx	lr

080003fc <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 80003fc:	4922      	ldr	r1, [pc, #136]	; (8000488 <__tx_timer_nothing_expired+0x8>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 80003fe:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 8000400:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 8000404:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 8000406:	4b21      	ldr	r3, [pc, #132]	; (800048c <__tx_timer_nothing_expired+0xc>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 8000408:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 800040a:	b13a      	cbz	r2, 800041c <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 800040c:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 8000410:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 8000412:	b91a      	cbnz	r2, 800041c <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000414:	4b1e      	ldr	r3, [pc, #120]	; (8000490 <__tx_timer_nothing_expired+0x10>)
    MOV     r0, #1                                  // Build expired value
 8000416:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 800041a:	6018      	str	r0, [r3, #0]

0800041c <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 800041c:	491d      	ldr	r1, [pc, #116]	; (8000494 <__tx_timer_nothing_expired+0x14>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 800041e:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 8000420:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 8000422:	b122      	cbz	r2, 800042e <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 8000424:	4b1c      	ldr	r3, [pc, #112]	; (8000498 <__tx_timer_nothing_expired+0x18>)
    MOV     r2, #1                                  // Build expired value
 8000426:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 800042a:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 800042c:	e008      	b.n	8000440 <__tx_timer_done>

0800042e <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 800042e:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000432:	4b1a      	ldr	r3, [pc, #104]	; (800049c <__tx_timer_nothing_expired+0x1c>)
    LDR     r2, [r3, #0]                            // Pickup list end
 8000434:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 8000436:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 8000438:	d101      	bne.n	800043e <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 800043a:	4b19      	ldr	r3, [pc, #100]	; (80004a0 <__tx_timer_nothing_expired+0x20>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 800043c:	6818      	ldr	r0, [r3, #0]

0800043e <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 800043e:	6008      	str	r0, [r1, #0]

08000440 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 8000440:	4b13      	ldr	r3, [pc, #76]	; (8000490 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 8000442:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 8000444:	b912      	cbnz	r2, 800044c <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 8000446:	4914      	ldr	r1, [pc, #80]	; (8000498 <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 8000448:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 800044a:	b1c8      	cbz	r0, 8000480 <__tx_timer_nothing_expired>

0800044c <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    PUSH    {r0, lr}                                // Save the lr register on the stack
 800044c:	b501      	push	{r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 800044e:	4912      	ldr	r1, [pc, #72]	; (8000498 <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 8000450:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 8000452:	b108      	cbz	r0, 8000458 <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 8000454:	f018 fd30 	bl	8018eb8 <_tx_timer_expiration_process>

08000458 <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 8000458:	4b0d      	ldr	r3, [pc, #52]	; (8000490 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 800045a:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 800045c:	b172      	cbz	r2, 800047c <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 800045e:	f018 fc1b 	bl	8018c98 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000462:	4810      	ldr	r0, [pc, #64]	; (80004a4 <__tx_timer_nothing_expired+0x24>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 8000464:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 8000466:	b949      	cbnz	r1, 800047c <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000468:	480f      	ldr	r0, [pc, #60]	; (80004a8 <__tx_timer_nothing_expired+0x28>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 800046a:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 800046c:	4a0f      	ldr	r2, [pc, #60]	; (80004ac <__tx_timer_nothing_expired+0x2c>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 800046e:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000470:	480f      	ldr	r0, [pc, #60]	; (80004b0 <__tx_timer_nothing_expired+0x30>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 8000472:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  // Are they the same?
 8000476:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 8000478:	d000      	beq.n	800047c <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 800047a:	6002      	str	r2, [r0, #0]

0800047c <__tx_timer_not_ts_expiration>:
__tx_timer_skip_time_slice:
    // }

__tx_timer_not_ts_expiration:

    POP     {r0, lr}                                // Recover lr register (r0 is just there for
 800047c:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

08000480 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 8000480:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 8000484:	4770      	bx	lr
 8000486:	0000      	.short	0x0000
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000488:	200152f0 	.word	0x200152f0
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 800048c:	20015850 	.word	0x20015850
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000490:	200152f4 	.word	0x200152f4
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000494:	20015380 	.word	0x20015380
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 8000498:	20015384 	.word	0x20015384
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 800049c:	2001537c 	.word	0x2001537c
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 80004a0:	20015378 	.word	0x20015378
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80004a4:	200152e4 	.word	0x200152e4
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80004a8:	2001524c 	.word	0x2001524c
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80004ac:	20015250 	.word	0x20015250
    LDR     r0, =0xE000ED04                         // Build address of control register
 80004b0:	e000ed04 	.word	0xe000ed04

080004b4 <__aeabi_uldivmod>:
 80004b4:	b953      	cbnz	r3, 80004cc <__aeabi_uldivmod+0x18>
 80004b6:	b94a      	cbnz	r2, 80004cc <__aeabi_uldivmod+0x18>
 80004b8:	2900      	cmp	r1, #0
 80004ba:	bf08      	it	eq
 80004bc:	2800      	cmpeq	r0, #0
 80004be:	bf1c      	itt	ne
 80004c0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80004c4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80004c8:	f000 b982 	b.w	80007d0 <__aeabi_idiv0>
 80004cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80004d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80004d4:	f000 f806 	bl	80004e4 <__udivmoddi4>
 80004d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80004dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80004e0:	b004      	add	sp, #16
 80004e2:	4770      	bx	lr

080004e4 <__udivmoddi4>:
 80004e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80004e8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80004ea:	460d      	mov	r5, r1
 80004ec:	4604      	mov	r4, r0
 80004ee:	460f      	mov	r7, r1
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d146      	bne.n	8000582 <__udivmoddi4+0x9e>
 80004f4:	428a      	cmp	r2, r1
 80004f6:	4694      	mov	ip, r2
 80004f8:	d95e      	bls.n	80005b8 <__udivmoddi4+0xd4>
 80004fa:	fab2 f382 	clz	r3, r2
 80004fe:	b143      	cbz	r3, 8000512 <__udivmoddi4+0x2e>
 8000500:	fa02 fc03 	lsl.w	ip, r2, r3
 8000504:	f1c3 0220 	rsb	r2, r3, #32
 8000508:	409f      	lsls	r7, r3
 800050a:	409c      	lsls	r4, r3
 800050c:	fa20 f202 	lsr.w	r2, r0, r2
 8000510:	4317      	orrs	r7, r2
 8000512:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000516:	fa1f f58c 	uxth.w	r5, ip
 800051a:	0c22      	lsrs	r2, r4, #16
 800051c:	fbb7 f1fe 	udiv	r1, r7, lr
 8000520:	fb0e 7711 	mls	r7, lr, r1, r7
 8000524:	fb01 f005 	mul.w	r0, r1, r5
 8000528:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800052c:	4290      	cmp	r0, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x5e>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000538:	d202      	bcs.n	8000540 <__udivmoddi4+0x5c>
 800053a:	4290      	cmp	r0, r2
 800053c:	f200 8134 	bhi.w	80007a8 <__udivmoddi4+0x2c4>
 8000540:	4639      	mov	r1, r7
 8000542:	1a12      	subs	r2, r2, r0
 8000544:	b2a4      	uxth	r4, r4
 8000546:	fbb2 f0fe 	udiv	r0, r2, lr
 800054a:	fb0e 2210 	mls	r2, lr, r0, r2
 800054e:	fb00 f505 	mul.w	r5, r0, r5
 8000552:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000556:	42a5      	cmp	r5, r4
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x88>
 800055a:	eb1c 0404 	adds.w	r4, ip, r4
 800055e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000562:	d202      	bcs.n	800056a <__udivmoddi4+0x86>
 8000564:	42a5      	cmp	r5, r4
 8000566:	f200 8119 	bhi.w	800079c <__udivmoddi4+0x2b8>
 800056a:	4610      	mov	r0, r2
 800056c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000570:	1b64      	subs	r4, r4, r5
 8000572:	2100      	movs	r1, #0
 8000574:	b11e      	cbz	r6, 800057e <__udivmoddi4+0x9a>
 8000576:	40dc      	lsrs	r4, r3
 8000578:	2300      	movs	r3, #0
 800057a:	e9c6 4300 	strd	r4, r3, [r6]
 800057e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000582:	428b      	cmp	r3, r1
 8000584:	d908      	bls.n	8000598 <__udivmoddi4+0xb4>
 8000586:	2e00      	cmp	r6, #0
 8000588:	f000 80fc 	beq.w	8000784 <__udivmoddi4+0x2a0>
 800058c:	2100      	movs	r1, #0
 800058e:	e9c6 0500 	strd	r0, r5, [r6]
 8000592:	4608      	mov	r0, r1
 8000594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000598:	fab3 f183 	clz	r1, r3
 800059c:	2900      	cmp	r1, #0
 800059e:	d14c      	bne.n	800063a <__udivmoddi4+0x156>
 80005a0:	42ab      	cmp	r3, r5
 80005a2:	f0c0 80f2 	bcc.w	800078a <__udivmoddi4+0x2a6>
 80005a6:	4282      	cmp	r2, r0
 80005a8:	f240 80ef 	bls.w	800078a <__udivmoddi4+0x2a6>
 80005ac:	4608      	mov	r0, r1
 80005ae:	2e00      	cmp	r6, #0
 80005b0:	d0e5      	beq.n	800057e <__udivmoddi4+0x9a>
 80005b2:	e9c6 4700 	strd	r4, r7, [r6]
 80005b6:	e7e2      	b.n	800057e <__udivmoddi4+0x9a>
 80005b8:	b902      	cbnz	r2, 80005bc <__udivmoddi4+0xd8>
 80005ba:	deff      	udf	#255	; 0xff
 80005bc:	fab2 f382 	clz	r3, r2
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	f040 809f 	bne.w	8000704 <__udivmoddi4+0x220>
 80005c6:	1a8a      	subs	r2, r1, r2
 80005c8:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80005cc:	fa1f f78c 	uxth.w	r7, ip
 80005d0:	2101      	movs	r1, #1
 80005d2:	fbb2 f5fe 	udiv	r5, r2, lr
 80005d6:	fb0e 2015 	mls	r0, lr, r5, r2
 80005da:	0c22      	lsrs	r2, r4, #16
 80005dc:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80005e0:	fb07 f005 	mul.w	r0, r7, r5
 80005e4:	4290      	cmp	r0, r2
 80005e6:	d90f      	bls.n	8000608 <__udivmoddi4+0x124>
 80005e8:	eb1c 0202 	adds.w	r2, ip, r2
 80005ec:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80005f0:	bf2c      	ite	cs
 80005f2:	f04f 0901 	movcs.w	r9, #1
 80005f6:	f04f 0900 	movcc.w	r9, #0
 80005fa:	4290      	cmp	r0, r2
 80005fc:	d903      	bls.n	8000606 <__udivmoddi4+0x122>
 80005fe:	f1b9 0f00 	cmp.w	r9, #0
 8000602:	f000 80ce 	beq.w	80007a2 <__udivmoddi4+0x2be>
 8000606:	4645      	mov	r5, r8
 8000608:	1a12      	subs	r2, r2, r0
 800060a:	b2a4      	uxth	r4, r4
 800060c:	fbb2 f0fe 	udiv	r0, r2, lr
 8000610:	fb0e 2210 	mls	r2, lr, r0, r2
 8000614:	fb00 f707 	mul.w	r7, r0, r7
 8000618:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800061c:	42a7      	cmp	r7, r4
 800061e:	d908      	bls.n	8000632 <__udivmoddi4+0x14e>
 8000620:	eb1c 0404 	adds.w	r4, ip, r4
 8000624:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000628:	d202      	bcs.n	8000630 <__udivmoddi4+0x14c>
 800062a:	42a7      	cmp	r7, r4
 800062c:	f200 80b3 	bhi.w	8000796 <__udivmoddi4+0x2b2>
 8000630:	4610      	mov	r0, r2
 8000632:	1be4      	subs	r4, r4, r7
 8000634:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000638:	e79c      	b.n	8000574 <__udivmoddi4+0x90>
 800063a:	f1c1 0420 	rsb	r4, r1, #32
 800063e:	408b      	lsls	r3, r1
 8000640:	fa05 fc01 	lsl.w	ip, r5, r1
 8000644:	fa22 f704 	lsr.w	r7, r2, r4
 8000648:	40e5      	lsrs	r5, r4
 800064a:	408a      	lsls	r2, r1
 800064c:	431f      	orrs	r7, r3
 800064e:	fa20 f304 	lsr.w	r3, r0, r4
 8000652:	4088      	lsls	r0, r1
 8000654:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000658:	ea43 030c 	orr.w	r3, r3, ip
 800065c:	fa1f fc87 	uxth.w	ip, r7
 8000660:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000664:	fbb5 fef8 	udiv	lr, r5, r8
 8000668:	fb08 551e 	mls	r5, r8, lr, r5
 800066c:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000670:	fb0e f90c 	mul.w	r9, lr, ip
 8000674:	45a9      	cmp	r9, r5
 8000676:	d90e      	bls.n	8000696 <__udivmoddi4+0x1b2>
 8000678:	197d      	adds	r5, r7, r5
 800067a:	f10e 3aff 	add.w	sl, lr, #4294967295	; 0xffffffff
 800067e:	bf2c      	ite	cs
 8000680:	f04f 0b01 	movcs.w	fp, #1
 8000684:	f04f 0b00 	movcc.w	fp, #0
 8000688:	45a9      	cmp	r9, r5
 800068a:	d903      	bls.n	8000694 <__udivmoddi4+0x1b0>
 800068c:	f1bb 0f00 	cmp.w	fp, #0
 8000690:	f000 808d 	beq.w	80007ae <__udivmoddi4+0x2ca>
 8000694:	46d6      	mov	lr, sl
 8000696:	eba5 0509 	sub.w	r5, r5, r9
 800069a:	fa1f f983 	uxth.w	r9, r3
 800069e:	fbb5 f3f8 	udiv	r3, r5, r8
 80006a2:	fb08 5513 	mls	r5, r8, r3, r5
 80006a6:	fb03 fc0c 	mul.w	ip, r3, ip
 80006aa:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 80006ae:	45ac      	cmp	ip, r5
 80006b0:	d906      	bls.n	80006c0 <__udivmoddi4+0x1dc>
 80006b2:	197d      	adds	r5, r7, r5
 80006b4:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80006b8:	d201      	bcs.n	80006be <__udivmoddi4+0x1da>
 80006ba:	45ac      	cmp	ip, r5
 80006bc:	d87e      	bhi.n	80007bc <__udivmoddi4+0x2d8>
 80006be:	4643      	mov	r3, r8
 80006c0:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80006c4:	eba5 050c 	sub.w	r5, r5, ip
 80006c8:	fba3 9802 	umull	r9, r8, r3, r2
 80006cc:	4545      	cmp	r5, r8
 80006ce:	46ce      	mov	lr, r9
 80006d0:	46c4      	mov	ip, r8
 80006d2:	d302      	bcc.n	80006da <__udivmoddi4+0x1f6>
 80006d4:	d106      	bne.n	80006e4 <__udivmoddi4+0x200>
 80006d6:	4548      	cmp	r0, r9
 80006d8:	d204      	bcs.n	80006e4 <__udivmoddi4+0x200>
 80006da:	3b01      	subs	r3, #1
 80006dc:	ebb9 0e02 	subs.w	lr, r9, r2
 80006e0:	eb68 0c07 	sbc.w	ip, r8, r7
 80006e4:	2e00      	cmp	r6, #0
 80006e6:	d06f      	beq.n	80007c8 <__udivmoddi4+0x2e4>
 80006e8:	ebb0 020e 	subs.w	r2, r0, lr
 80006ec:	eb65 050c 	sbc.w	r5, r5, ip
 80006f0:	40ca      	lsrs	r2, r1
 80006f2:	fa05 f404 	lsl.w	r4, r5, r4
 80006f6:	40cd      	lsrs	r5, r1
 80006f8:	4618      	mov	r0, r3
 80006fa:	4314      	orrs	r4, r2
 80006fc:	2100      	movs	r1, #0
 80006fe:	e9c6 4500 	strd	r4, r5, [r6]
 8000702:	e73c      	b.n	800057e <__udivmoddi4+0x9a>
 8000704:	fa02 fc03 	lsl.w	ip, r2, r3
 8000708:	f1c3 0220 	rsb	r2, r3, #32
 800070c:	4099      	lsls	r1, r3
 800070e:	409c      	lsls	r4, r3
 8000710:	40d5      	lsrs	r5, r2
 8000712:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000716:	fa20 f202 	lsr.w	r2, r0, r2
 800071a:	fa1f f78c 	uxth.w	r7, ip
 800071e:	fbb5 f0fe 	udiv	r0, r5, lr
 8000722:	430a      	orrs	r2, r1
 8000724:	fb0e 5510 	mls	r5, lr, r0, r5
 8000728:	0c11      	lsrs	r1, r2, #16
 800072a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800072e:	fb00 f507 	mul.w	r5, r0, r7
 8000732:	428d      	cmp	r5, r1
 8000734:	d90e      	bls.n	8000754 <__udivmoddi4+0x270>
 8000736:	eb1c 0101 	adds.w	r1, ip, r1
 800073a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800073e:	bf2c      	ite	cs
 8000740:	f04f 0901 	movcs.w	r9, #1
 8000744:	f04f 0900 	movcc.w	r9, #0
 8000748:	428d      	cmp	r5, r1
 800074a:	d902      	bls.n	8000752 <__udivmoddi4+0x26e>
 800074c:	f1b9 0f00 	cmp.w	r9, #0
 8000750:	d031      	beq.n	80007b6 <__udivmoddi4+0x2d2>
 8000752:	4640      	mov	r0, r8
 8000754:	1b49      	subs	r1, r1, r5
 8000756:	b292      	uxth	r2, r2
 8000758:	fbb1 f5fe 	udiv	r5, r1, lr
 800075c:	fb0e 1115 	mls	r1, lr, r5, r1
 8000760:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000764:	fb05 f107 	mul.w	r1, r5, r7
 8000768:	4291      	cmp	r1, r2
 800076a:	d907      	bls.n	800077c <__udivmoddi4+0x298>
 800076c:	eb1c 0202 	adds.w	r2, ip, r2
 8000770:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000774:	d201      	bcs.n	800077a <__udivmoddi4+0x296>
 8000776:	4291      	cmp	r1, r2
 8000778:	d823      	bhi.n	80007c2 <__udivmoddi4+0x2de>
 800077a:	4645      	mov	r5, r8
 800077c:	1a52      	subs	r2, r2, r1
 800077e:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000782:	e726      	b.n	80005d2 <__udivmoddi4+0xee>
 8000784:	4631      	mov	r1, r6
 8000786:	4630      	mov	r0, r6
 8000788:	e6f9      	b.n	800057e <__udivmoddi4+0x9a>
 800078a:	1a84      	subs	r4, r0, r2
 800078c:	eb65 0203 	sbc.w	r2, r5, r3
 8000790:	2001      	movs	r0, #1
 8000792:	4617      	mov	r7, r2
 8000794:	e70b      	b.n	80005ae <__udivmoddi4+0xca>
 8000796:	4464      	add	r4, ip
 8000798:	3802      	subs	r0, #2
 800079a:	e74a      	b.n	8000632 <__udivmoddi4+0x14e>
 800079c:	4464      	add	r4, ip
 800079e:	3802      	subs	r0, #2
 80007a0:	e6e4      	b.n	800056c <__udivmoddi4+0x88>
 80007a2:	3d02      	subs	r5, #2
 80007a4:	4462      	add	r2, ip
 80007a6:	e72f      	b.n	8000608 <__udivmoddi4+0x124>
 80007a8:	3902      	subs	r1, #2
 80007aa:	4462      	add	r2, ip
 80007ac:	e6c9      	b.n	8000542 <__udivmoddi4+0x5e>
 80007ae:	f1ae 0e02 	sub.w	lr, lr, #2
 80007b2:	443d      	add	r5, r7
 80007b4:	e76f      	b.n	8000696 <__udivmoddi4+0x1b2>
 80007b6:	3802      	subs	r0, #2
 80007b8:	4461      	add	r1, ip
 80007ba:	e7cb      	b.n	8000754 <__udivmoddi4+0x270>
 80007bc:	3b02      	subs	r3, #2
 80007be:	443d      	add	r5, r7
 80007c0:	e77e      	b.n	80006c0 <__udivmoddi4+0x1dc>
 80007c2:	3d02      	subs	r5, #2
 80007c4:	4462      	add	r2, ip
 80007c6:	e7d9      	b.n	800077c <__udivmoddi4+0x298>
 80007c8:	4618      	mov	r0, r3
 80007ca:	4631      	mov	r1, r6
 80007cc:	e6d7      	b.n	800057e <__udivmoddi4+0x9a>
 80007ce:	bf00      	nop

080007d0 <__aeabi_idiv0>:
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop

080007d4 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b086      	sub	sp, #24
 80007d8:	af02      	add	r7, sp, #8
 80007da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  tx_application_define_1*/

  /* USER CODE END  tx_application_define_1 */
#if (USE_STATIC_ALLOCATION == 1)
  UINT status = TX_SUCCESS;
 80007dc:	2300      	movs	r3, #0
 80007de:	60fb      	str	r3, [r7, #12]
  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 80007e0:	2334      	movs	r3, #52	; 0x34
 80007e2:	9300      	str	r3, [sp, #0]
 80007e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007e8:	4a15      	ldr	r2, [pc, #84]	; (8000840 <tx_application_define+0x6c>)
 80007ea:	4916      	ldr	r1, [pc, #88]	; (8000844 <tx_application_define+0x70>)
 80007ec:	4816      	ldr	r0, [pc, #88]	; (8000848 <tx_application_define+0x74>)
 80007ee:	f018 fe0d 	bl	801940c <_txe_byte_pool_create>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d109      	bne.n	800080c <tx_application_define+0x38>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 80007f8:	4b13      	ldr	r3, [pc, #76]	; (8000848 <tx_application_define+0x74>)
 80007fa:	60bb      	str	r3, [r7, #8]
    status = App_ThreadX_Init(memory_ptr);
 80007fc:	68b8      	ldr	r0, [r7, #8]
 80007fe:	f000 f82b 	bl	8000858 <App_ThreadX_Init>
 8000802:	60f8      	str	r0, [r7, #12]
    if (status != TX_SUCCESS)
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d000      	beq.n	800080c <tx_application_define+0x38>
    {
      /* USER CODE BEGIN  App_ThreadX_Init_Error */
      while(1)
 800080a:	e7fe      	b.n	800080a <tx_application_define+0x36>
    /* USER CODE BEGIN  App_ThreadX_Init_Success */

    /* USER CODE END  App_ThreadX_Init_Success */

  }
  if (tx_byte_pool_create(&FILEX_MEM_POOL_VAR_NAME, "Fx App memory pool", fx_byte_pool_buffer, FX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 800080c:	2334      	movs	r3, #52	; 0x34
 800080e:	9300      	str	r3, [sp, #0]
 8000810:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000814:	4a0d      	ldr	r2, [pc, #52]	; (800084c <tx_application_define+0x78>)
 8000816:	490e      	ldr	r1, [pc, #56]	; (8000850 <tx_application_define+0x7c>)
 8000818:	480e      	ldr	r0, [pc, #56]	; (8000854 <tx_application_define+0x80>)
 800081a:	f018 fdf7 	bl	801940c <_txe_byte_pool_create>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d109      	bne.n	8000838 <tx_application_define+0x64>
  {
    /* USER CODE BEGIN FX_Byte_Pool_Success */

    /* USER CODE END FX_Byte_Pool_Success */

    memory_ptr = (VOID *)&FILEX_MEM_POOL_VAR_NAME;
 8000824:	4b0b      	ldr	r3, [pc, #44]	; (8000854 <tx_application_define+0x80>)
 8000826:	60bb      	str	r3, [r7, #8]
    status = MX_FileX_Init(memory_ptr);
 8000828:	68b8      	ldr	r0, [r7, #8]
 800082a:	f000 fd59 	bl	80012e0 <MX_FileX_Init>
 800082e:	60f8      	str	r0, [r7, #12]
    if (status != FX_SUCCESS)
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d000      	beq.n	8000838 <tx_application_define+0x64>
    {
      /* USER CODE BEGIN  MX_FileX_Init_Error */
      while(1)
 8000836:	e7fe      	b.n	8000836 <tx_application_define+0x62>
  /* USER CODE BEGIN DYNAMIC_MEM_ALLOC */
  (void)first_unused_memory;
  /* USER CODE END DYNAMIC_MEM_ALLOC */
#endif

}
 8000838:	bf00      	nop
 800083a:	3710      	adds	r7, #16
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	2000115c 	.word	0x2000115c
 8000844:	0801a908 	.word	0x0801a908
 8000848:	2000155c 	.word	0x2000155c
 800084c:	20001590 	.word	0x20001590
 8000850:	0801a91c 	.word	0x0801a91c
 8000854:	20002590 	.word	0x20002590

08000858 <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 8000858:	b480      	push	{r7}
 800085a:	b085      	sub	sp, #20
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 8000860:	2300      	movs	r3, #0
 8000862:	60fb      	str	r3, [r7, #12]
  /* USER CODE END App_ThreadX_MEM_POOL */
  /* USER CODE BEGIN App_ThreadX_Init */

  /* USER CODE END App_ThreadX_Init */

  return ret;
 8000864:	68fb      	ldr	r3, [r7, #12]
}
 8000866:	4618      	mov	r0, r3
 8000868:	3714      	adds	r7, #20
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr

08000872 <MX_ThreadX_Init>:
  * @brief  MX_ThreadX_Init
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 8000872:	b580      	push	{r7, lr}
 8000874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 8000876:	f016 fc59 	bl	801712c <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}

0800087e <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800087e:	b580      	push	{r7, lr}
 8000880:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000882:	f001 fb8f 	bl	8001fa4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000886:	f000 f80f 	bl	80008a8 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 800088a:	f000 f869 	bl	8000960 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800088e:	f000 f971 	bl	8000b74 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 8000892:	f000 f873 	bl	800097c <MX_GPDMA1_Init>
  MX_OCTOSPI2_Init();
 8000896:	f000 f8a5 	bl	80009e4 <MX_OCTOSPI2_Init>
  MX_USART1_UART_Init();
 800089a:	f000 f91f 	bl	8000adc <MX_USART1_UART_Init>
  MX_ICACHE_Init();
 800089e:	f000 f88d 	bl	80009bc <MX_ICACHE_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  MX_ThreadX_Init();
 80008a2:	f7ff ffe6 	bl	8000872 <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008a6:	e7fe      	b.n	80008a6 <main+0x28>

080008a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b09e      	sub	sp, #120	; 0x78
 80008ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ae:	f107 0318 	add.w	r3, r7, #24
 80008b2:	2260      	movs	r2, #96	; 0x60
 80008b4:	2100      	movs	r1, #0
 80008b6:	4618      	mov	r0, r3
 80008b8:	f019 f99e 	bl	8019bf8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008bc:	463b      	mov	r3, r7
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	605a      	str	r2, [r3, #4]
 80008c4:	609a      	str	r2, [r3, #8]
 80008c6:	60da      	str	r2, [r3, #12]
 80008c8:	611a      	str	r2, [r3, #16]
 80008ca:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80008cc:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 80008d0:	f005 f8c2 	bl	8005a58 <HAL_PWREx_ControlVoltageScaling>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <SystemClock_Config+0x36>
  {
    Error_Handler();
 80008da:	f000 f9d1 	bl	8000c80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80008de:	2310      	movs	r3, #16
 80008e0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80008e2:	2301      	movs	r3, #1
 80008e4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80008e6:	2310      	movs	r3, #16
 80008e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 80008ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80008ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008f0:	2302      	movs	r3, #2
 80008f2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80008f4:	2301      	movs	r3, #1
 80008f6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 80008f8:	2300      	movs	r3, #0
 80008fa:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008fc:	2301      	movs	r3, #1
 80008fe:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000900:	2350      	movs	r3, #80	; 0x50
 8000902:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000904:	2302      	movs	r3, #2
 8000906:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000908:	2302      	movs	r3, #2
 800090a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 800090c:	2302      	movs	r3, #2
 800090e:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_0;
 8000910:	2300      	movs	r3, #0
 8000912:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000914:	2300      	movs	r3, #0
 8000916:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000918:	f107 0318 	add.w	r3, r7, #24
 800091c:	4618      	mov	r0, r3
 800091e:	f005 f987 	bl	8005c30 <HAL_RCC_OscConfig>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000928:	f000 f9aa 	bl	8000c80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800092c:	231f      	movs	r3, #31
 800092e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000930:	2303      	movs	r3, #3
 8000932:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000934:	2300      	movs	r3, #0
 8000936:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000938:	2300      	movs	r3, #0
 800093a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800093c:	2300      	movs	r3, #0
 800093e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000940:	2300      	movs	r3, #0
 8000942:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000944:	463b      	mov	r3, r7
 8000946:	2104      	movs	r1, #4
 8000948:	4618      	mov	r0, r3
 800094a:	f006 f84d 	bl	80069e8 <HAL_RCC_ClockConfig>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000954:	f000 f994 	bl	8000c80 <Error_Handler>
  }
}
 8000958:	bf00      	nop
 800095a:	3778      	adds	r7, #120	; 0x78
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}

08000960 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000964:	f005 f954 	bl	8005c10 <HAL_PWREx_DisableUCPDDeadBattery>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8000968:	2002      	movs	r0, #2
 800096a:	f005 f901 	bl	8005b70 <HAL_PWREx_ConfigSupply>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <SystemPower_Config+0x18>
  {
    Error_Handler();
 8000974:	f000 f984 	bl	8000c80 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8000978:	bf00      	nop
 800097a:	bd80      	pop	{r7, pc}

0800097c <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 8000982:	4b0d      	ldr	r3, [pc, #52]	; (80009b8 <MX_GPDMA1_Init+0x3c>)
 8000984:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000988:	4a0b      	ldr	r2, [pc, #44]	; (80009b8 <MX_GPDMA1_Init+0x3c>)
 800098a:	f043 0301 	orr.w	r3, r3, #1
 800098e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8000992:	4b09      	ldr	r3, [pc, #36]	; (80009b8 <MX_GPDMA1_Init+0x3c>)
 8000994:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000998:	f003 0301 	and.w	r3, r3, #1
 800099c:	607b      	str	r3, [r7, #4]
 800099e:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 0, 0);
 80009a0:	2200      	movs	r2, #0
 80009a2:	2100      	movs	r1, #0
 80009a4:	201d      	movs	r0, #29
 80009a6:	f001 fc4b 	bl	8002240 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 80009aa:	201d      	movs	r0, #29
 80009ac:	f001 fc62 	bl	8002274 <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 80009b0:	bf00      	nop
 80009b2:	3708      	adds	r7, #8
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	46020c00 	.word	0x46020c00

080009bc <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 80009c0:	2000      	movs	r0, #0
 80009c2:	f002 ff8b 	bl	80038dc <HAL_ICACHE_ConfigAssociativityMode>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 80009cc:	f000 f958 	bl	8000c80 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 80009d0:	f002 ffa4 	bl	800391c <HAL_ICACHE_Enable>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 80009da:	f000 f951 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
	...

080009e4 <MX_OCTOSPI2_Init>:
  * @brief OCTOSPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI2_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b088      	sub	sp, #32
 80009e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI2_Init 0 */

  /* USER CODE END OCTOSPI2_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 80009ea:	f107 0308 	add.w	r3, r7, #8
 80009ee:	2200      	movs	r2, #0
 80009f0:	601a      	str	r2, [r3, #0]
 80009f2:	605a      	str	r2, [r3, #4]
 80009f4:	609a      	str	r2, [r3, #8]
 80009f6:	60da      	str	r2, [r3, #12]
 80009f8:	611a      	str	r2, [r3, #16]
 80009fa:	615a      	str	r2, [r3, #20]
  HAL_OSPI_DLYB_CfgTypeDef HAL_OSPI_DLYB_Cfg_Struct = {0};
 80009fc:	463b      	mov	r3, r7
 80009fe:	2200      	movs	r2, #0
 8000a00:	601a      	str	r2, [r3, #0]
 8000a02:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN OCTOSPI2_Init 1 */

  /* USER CODE END OCTOSPI2_Init 1 */
  /* OCTOSPI2 parameter configuration*/
  hospi2.Instance = OCTOSPI2;
 8000a04:	4b31      	ldr	r3, [pc, #196]	; (8000acc <MX_OCTOSPI2_Init+0xe8>)
 8000a06:	4a32      	ldr	r2, [pc, #200]	; (8000ad0 <MX_OCTOSPI2_Init+0xec>)
 8000a08:	601a      	str	r2, [r3, #0]
  hospi2.Init.FifoThreshold = 4;
 8000a0a:	4b30      	ldr	r3, [pc, #192]	; (8000acc <MX_OCTOSPI2_Init+0xe8>)
 8000a0c:	2204      	movs	r2, #4
 8000a0e:	605a      	str	r2, [r3, #4]
  hospi2.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8000a10:	4b2e      	ldr	r3, [pc, #184]	; (8000acc <MX_OCTOSPI2_Init+0xe8>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	609a      	str	r2, [r3, #8]
  hospi2.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 8000a16:	4b2d      	ldr	r3, [pc, #180]	; (8000acc <MX_OCTOSPI2_Init+0xe8>)
 8000a18:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000a1c:	60da      	str	r2, [r3, #12]
  hospi2.Init.DeviceSize = 26;
 8000a1e:	4b2b      	ldr	r3, [pc, #172]	; (8000acc <MX_OCTOSPI2_Init+0xe8>)
 8000a20:	221a      	movs	r2, #26
 8000a22:	611a      	str	r2, [r3, #16]
  hospi2.Init.ChipSelectHighTime = 2;
 8000a24:	4b29      	ldr	r3, [pc, #164]	; (8000acc <MX_OCTOSPI2_Init+0xe8>)
 8000a26:	2202      	movs	r2, #2
 8000a28:	615a      	str	r2, [r3, #20]
  hospi2.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000a2a:	4b28      	ldr	r3, [pc, #160]	; (8000acc <MX_OCTOSPI2_Init+0xe8>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	619a      	str	r2, [r3, #24]
  hospi2.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8000a30:	4b26      	ldr	r3, [pc, #152]	; (8000acc <MX_OCTOSPI2_Init+0xe8>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	61da      	str	r2, [r3, #28]
  hospi2.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8000a36:	4b25      	ldr	r3, [pc, #148]	; (8000acc <MX_OCTOSPI2_Init+0xe8>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	621a      	str	r2, [r3, #32]
  hospi2.Init.ClockPrescaler = 4;
 8000a3c:	4b23      	ldr	r3, [pc, #140]	; (8000acc <MX_OCTOSPI2_Init+0xe8>)
 8000a3e:	2204      	movs	r2, #4
 8000a40:	625a      	str	r2, [r3, #36]	; 0x24
  hospi2.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8000a42:	4b22      	ldr	r3, [pc, #136]	; (8000acc <MX_OCTOSPI2_Init+0xe8>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	629a      	str	r2, [r3, #40]	; 0x28
  hospi2.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 8000a48:	4b20      	ldr	r3, [pc, #128]	; (8000acc <MX_OCTOSPI2_Init+0xe8>)
 8000a4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi2.Init.ChipSelectBoundary = 0;
 8000a50:	4b1e      	ldr	r3, [pc, #120]	; (8000acc <MX_OCTOSPI2_Init+0xe8>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	631a      	str	r2, [r3, #48]	; 0x30
  hospi2.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_USED;
 8000a56:	4b1d      	ldr	r3, [pc, #116]	; (8000acc <MX_OCTOSPI2_Init+0xe8>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	635a      	str	r2, [r3, #52]	; 0x34
  hospi2.Init.MaxTran = 0;
 8000a5c:	4b1b      	ldr	r3, [pc, #108]	; (8000acc <MX_OCTOSPI2_Init+0xe8>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	639a      	str	r2, [r3, #56]	; 0x38
  hospi2.Init.Refresh = 0;
 8000a62:	4b1a      	ldr	r3, [pc, #104]	; (8000acc <MX_OCTOSPI2_Init+0xe8>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_OSPI_Init(&hospi2) != HAL_OK)
 8000a68:	4818      	ldr	r0, [pc, #96]	; (8000acc <MX_OCTOSPI2_Init+0xe8>)
 8000a6a:	f002 ff77 	bl	800395c <HAL_OSPI_Init>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_OCTOSPI2_Init+0x94>
  {
    Error_Handler();
 8000a74:	f000 f904 	bl	8000c80 <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 2;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.DQSPort = 2;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	60fb      	str	r3, [r7, #12]
  sOspiManagerCfg.NCSPort = 2;
 8000a80:	2302      	movs	r3, #2
 8000a82:	613b      	str	r3, [r7, #16]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_2_LOW;
 8000a84:	4b13      	ldr	r3, [pc, #76]	; (8000ad4 <MX_OCTOSPI2_Init+0xf0>)
 8000a86:	617b      	str	r3, [r7, #20]
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_2_HIGH;
 8000a88:	4b13      	ldr	r3, [pc, #76]	; (8000ad8 <MX_OCTOSPI2_Init+0xf4>)
 8000a8a:	61bb      	str	r3, [r7, #24]
  if (HAL_OSPIM_Config(&hospi2, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000a8c:	f107 0308 	add.w	r3, r7, #8
 8000a90:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a94:	4619      	mov	r1, r3
 8000a96:	480d      	ldr	r0, [pc, #52]	; (8000acc <MX_OCTOSPI2_Init+0xe8>)
 8000a98:	f003 ff84 	bl	80049a4 <HAL_OSPIM_Config>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_OCTOSPI2_Init+0xc2>
  {
    Error_Handler();
 8000aa2:	f000 f8ed 	bl	8000c80 <Error_Handler>
  }
  HAL_OSPI_DLYB_Cfg_Struct.Units = 56;
 8000aa6:	2338      	movs	r3, #56	; 0x38
 8000aa8:	603b      	str	r3, [r7, #0]
  HAL_OSPI_DLYB_Cfg_Struct.PhaseSel = 2;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	607b      	str	r3, [r7, #4]
  if (HAL_OSPI_DLYB_SetConfig(&hospi2, &HAL_OSPI_DLYB_Cfg_Struct) != HAL_OK)
 8000aae:	463b      	mov	r3, r7
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4806      	ldr	r0, [pc, #24]	; (8000acc <MX_OCTOSPI2_Init+0xe8>)
 8000ab4:	f004 ff88 	bl	80059c8 <HAL_OSPI_DLYB_SetConfig>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_OCTOSPI2_Init+0xde>
  {
    Error_Handler();
 8000abe:	f000 f8df 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI2_Init 2 */

  /* USER CODE END OCTOSPI2_Init 2 */

}
 8000ac2:	bf00      	nop
 8000ac4:	3720      	adds	r7, #32
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	200025c4 	.word	0x200025c4
 8000ad0:	420d2400 	.word	0x420d2400
 8000ad4:	00010002 	.word	0x00010002
 8000ad8:	01000002 	.word	0x01000002

08000adc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ae0:	4b22      	ldr	r3, [pc, #136]	; (8000b6c <MX_USART1_UART_Init+0x90>)
 8000ae2:	4a23      	ldr	r2, [pc, #140]	; (8000b70 <MX_USART1_UART_Init+0x94>)
 8000ae4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ae6:	4b21      	ldr	r3, [pc, #132]	; (8000b6c <MX_USART1_UART_Init+0x90>)
 8000ae8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000aec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000aee:	4b1f      	ldr	r3, [pc, #124]	; (8000b6c <MX_USART1_UART_Init+0x90>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000af4:	4b1d      	ldr	r3, [pc, #116]	; (8000b6c <MX_USART1_UART_Init+0x90>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000afa:	4b1c      	ldr	r3, [pc, #112]	; (8000b6c <MX_USART1_UART_Init+0x90>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b00:	4b1a      	ldr	r3, [pc, #104]	; (8000b6c <MX_USART1_UART_Init+0x90>)
 8000b02:	220c      	movs	r2, #12
 8000b04:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b06:	4b19      	ldr	r3, [pc, #100]	; (8000b6c <MX_USART1_UART_Init+0x90>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b0c:	4b17      	ldr	r3, [pc, #92]	; (8000b6c <MX_USART1_UART_Init+0x90>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b12:	4b16      	ldr	r3, [pc, #88]	; (8000b6c <MX_USART1_UART_Init+0x90>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b18:	4b14      	ldr	r3, [pc, #80]	; (8000b6c <MX_USART1_UART_Init+0x90>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b1e:	4b13      	ldr	r3, [pc, #76]	; (8000b6c <MX_USART1_UART_Init+0x90>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b24:	4811      	ldr	r0, [pc, #68]	; (8000b6c <MX_USART1_UART_Init+0x90>)
 8000b26:	f009 fce9 	bl	800a4fc <HAL_UART_Init>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000b30:	f000 f8a6 	bl	8000c80 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b34:	2100      	movs	r1, #0
 8000b36:	480d      	ldr	r0, [pc, #52]	; (8000b6c <MX_USART1_UART_Init+0x90>)
 8000b38:	f00a fa8e 	bl	800b058 <HAL_UARTEx_SetTxFifoThreshold>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000b42:	f000 f89d 	bl	8000c80 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b46:	2100      	movs	r1, #0
 8000b48:	4808      	ldr	r0, [pc, #32]	; (8000b6c <MX_USART1_UART_Init+0x90>)
 8000b4a:	f00a fac3 	bl	800b0d4 <HAL_UARTEx_SetRxFifoThreshold>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000b54:	f000 f894 	bl	8000c80 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000b58:	4804      	ldr	r0, [pc, #16]	; (8000b6c <MX_USART1_UART_Init+0x90>)
 8000b5a:	f00a fa44 	bl	800afe6 <HAL_UARTEx_DisableFifoMode>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000b64:	f000 f88c 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b68:	bf00      	nop
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	20002698 	.word	0x20002698
 8000b70:	40013800 	.word	0x40013800

08000b74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b08a      	sub	sp, #40	; 0x28
 8000b78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7a:	f107 0314 	add.w	r3, r7, #20
 8000b7e:	2200      	movs	r2, #0
 8000b80:	601a      	str	r2, [r3, #0]
 8000b82:	605a      	str	r2, [r3, #4]
 8000b84:	609a      	str	r2, [r3, #8]
 8000b86:	60da      	str	r2, [r3, #12]
 8000b88:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000b8a:	4b29      	ldr	r3, [pc, #164]	; (8000c30 <MX_GPIO_Init+0xbc>)
 8000b8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b90:	4a27      	ldr	r2, [pc, #156]	; (8000c30 <MX_GPIO_Init+0xbc>)
 8000b92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b96:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000b9a:	4b25      	ldr	r3, [pc, #148]	; (8000c30 <MX_GPIO_Init+0xbc>)
 8000b9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000ba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ba4:	613b      	str	r3, [r7, #16]
 8000ba6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ba8:	4b21      	ldr	r3, [pc, #132]	; (8000c30 <MX_GPIO_Init+0xbc>)
 8000baa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000bae:	4a20      	ldr	r2, [pc, #128]	; (8000c30 <MX_GPIO_Init+0xbc>)
 8000bb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bb4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000bb8:	4b1d      	ldr	r3, [pc, #116]	; (8000c30 <MX_GPIO_Init+0xbc>)
 8000bba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000bbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bc2:	60fb      	str	r3, [r7, #12]
 8000bc4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bc6:	4b1a      	ldr	r3, [pc, #104]	; (8000c30 <MX_GPIO_Init+0xbc>)
 8000bc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000bcc:	4a18      	ldr	r2, [pc, #96]	; (8000c30 <MX_GPIO_Init+0xbc>)
 8000bce:	f043 0320 	orr.w	r3, r3, #32
 8000bd2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000bd6:	4b16      	ldr	r3, [pc, #88]	; (8000c30 <MX_GPIO_Init+0xbc>)
 8000bd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000bdc:	f003 0320 	and.w	r3, r3, #32
 8000be0:	60bb      	str	r3, [r7, #8]
 8000be2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be4:	4b12      	ldr	r3, [pc, #72]	; (8000c30 <MX_GPIO_Init+0xbc>)
 8000be6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000bea:	4a11      	ldr	r2, [pc, #68]	; (8000c30 <MX_GPIO_Init+0xbc>)
 8000bec:	f043 0301 	orr.w	r3, r3, #1
 8000bf0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000bf4:	4b0e      	ldr	r3, [pc, #56]	; (8000c30 <MX_GPIO_Init+0xbc>)
 8000bf6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000bfa:	f003 0301 	and.w	r3, r3, #1
 8000bfe:	607b      	str	r3, [r7, #4]
 8000c00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED2_Pin|LED1_Pin, GPIO_PIN_SET);
 8000c02:	2201      	movs	r2, #1
 8000c04:	21c0      	movs	r1, #192	; 0xc0
 8000c06:	480b      	ldr	r0, [pc, #44]	; (8000c34 <MX_GPIO_Init+0xc0>)
 8000c08:	f002 fe36 	bl	8003878 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED2_Pin LED1_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin;
 8000c0c:	23c0      	movs	r3, #192	; 0xc0
 8000c0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c10:	2301      	movs	r3, #1
 8000c12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c14:	2300      	movs	r3, #0
 8000c16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c1c:	f107 0314 	add.w	r3, r7, #20
 8000c20:	4619      	mov	r1, r3
 8000c22:	4804      	ldr	r0, [pc, #16]	; (8000c34 <MX_GPIO_Init+0xc0>)
 8000c24:	f002 fb72 	bl	800330c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c28:	bf00      	nop
 8000c2a:	3728      	adds	r7, #40	; 0x28
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	46020c00 	.word	0x46020c00
 8000c34:	42021c00 	.word	0x42021c00

08000c38 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8000c40:	1d39      	adds	r1, r7, #4
 8000c42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c46:	2201      	movs	r2, #1
 8000c48:	4803      	ldr	r0, [pc, #12]	; (8000c58 <__io_putchar+0x20>)
 8000c4a:	f009 fcb7 	bl	800a5bc <HAL_UART_Transmit>

  return ch;
 8000c4e:	687b      	ldr	r3, [r7, #4]
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	3708      	adds	r7, #8
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	20002698 	.word	0x20002698

08000c5c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a04      	ldr	r2, [pc, #16]	; (8000c7c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d101      	bne.n	8000c72 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c6e:	f001 f9c7 	bl	8002000 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c72:	bf00      	nop
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40001000 	.word	0x40001000

08000c80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000c84:	2201      	movs	r2, #1
 8000c86:	2180      	movs	r1, #128	; 0x80
 8000c88:	4805      	ldr	r0, [pc, #20]	; (8000ca0 <Error_Handler+0x20>)
 8000c8a:	f002 fdf5 	bl	8003878 <HAL_GPIO_WritePin>
  while (1)
  {
    HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000c8e:	2140      	movs	r1, #64	; 0x40
 8000c90:	4803      	ldr	r0, [pc, #12]	; (8000ca0 <Error_Handler+0x20>)
 8000c92:	f002 fe09 	bl	80038a8 <HAL_GPIO_TogglePin>
    HAL_Delay(200);
 8000c96:	20c8      	movs	r0, #200	; 0xc8
 8000c98:	f001 f9d2 	bl	8002040 <HAL_Delay>
    HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000c9c:	e7f7      	b.n	8000c8e <Error_Handler+0xe>
 8000c9e:	bf00      	nop
 8000ca0:	42021c00 	.word	0x42021c00

08000ca4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000caa:	4b0a      	ldr	r3, [pc, #40]	; (8000cd4 <HAL_MspInit+0x30>)
 8000cac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000cb0:	4a08      	ldr	r2, [pc, #32]	; (8000cd4 <HAL_MspInit+0x30>)
 8000cb2:	f043 0304 	orr.w	r3, r3, #4
 8000cb6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8000cba:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <HAL_MspInit+0x30>)
 8000cbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000cc0:	f003 0304 	and.w	r3, r3, #4
 8000cc4:	607b      	str	r3, [r7, #4]
 8000cc6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cc8:	bf00      	nop
 8000cca:	370c      	adds	r7, #12
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr
 8000cd4:	46020c00 	.word	0x46020c00

08000cd8 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b0c0      	sub	sp, #256	; 0x100
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	605a      	str	r2, [r3, #4]
 8000cea:	609a      	str	r2, [r3, #8]
 8000cec:	60da      	str	r2, [r3, #12]
 8000cee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cf0:	f107 0320 	add.w	r3, r7, #32
 8000cf4:	22c8      	movs	r2, #200	; 0xc8
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f018 ff7d 	bl	8019bf8 <memset>
  if(hospi->Instance==OCTOSPI2)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4a79      	ldr	r2, [pc, #484]	; (8000ee8 <HAL_OSPI_MspInit+0x210>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	f040 80e9 	bne.w	8000edc <HAL_OSPI_MspInit+0x204>

  /* USER CODE END OCTOSPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8000d0a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000d0e:	f04f 0300 	mov.w	r3, #0
 8000d12:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 8000d16:	2300      	movs	r3, #0
 8000d18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d1c:	f107 0320 	add.w	r3, r7, #32
 8000d20:	4618      	mov	r0, r3
 8000d22:	f006 fa69 	bl	80071f8 <HAL_RCCEx_PeriphCLKConfig>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <HAL_OSPI_MspInit+0x58>
    {
      Error_Handler();
 8000d2c:	f7ff ffa8 	bl	8000c80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 8000d30:	4b6e      	ldr	r3, [pc, #440]	; (8000eec <HAL_OSPI_MspInit+0x214>)
 8000d32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d36:	4a6d      	ldr	r2, [pc, #436]	; (8000eec <HAL_OSPI_MspInit+0x214>)
 8000d38:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d3c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000d40:	4b6a      	ldr	r3, [pc, #424]	; (8000eec <HAL_OSPI_MspInit+0x214>)
 8000d42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d4a:	61fb      	str	r3, [r7, #28]
 8000d4c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_OSPI2_CLK_ENABLE();
 8000d4e:	4b67      	ldr	r3, [pc, #412]	; (8000eec <HAL_OSPI_MspInit+0x214>)
 8000d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000d54:	4a65      	ldr	r2, [pc, #404]	; (8000eec <HAL_OSPI_MspInit+0x214>)
 8000d56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000d5e:	4b63      	ldr	r3, [pc, #396]	; (8000eec <HAL_OSPI_MspInit+0x214>)
 8000d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000d64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d68:	61bb      	str	r3, [r7, #24]
 8000d6a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8000d6c:	4b5f      	ldr	r3, [pc, #380]	; (8000eec <HAL_OSPI_MspInit+0x214>)
 8000d6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d72:	4a5e      	ldr	r2, [pc, #376]	; (8000eec <HAL_OSPI_MspInit+0x214>)
 8000d74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d78:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000d7c:	4b5b      	ldr	r3, [pc, #364]	; (8000eec <HAL_OSPI_MspInit+0x214>)
 8000d7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d86:	617b      	str	r3, [r7, #20]
 8000d88:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d8a:	4b58      	ldr	r3, [pc, #352]	; (8000eec <HAL_OSPI_MspInit+0x214>)
 8000d8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d90:	4a56      	ldr	r2, [pc, #344]	; (8000eec <HAL_OSPI_MspInit+0x214>)
 8000d92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d96:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000d9a:	4b54      	ldr	r3, [pc, #336]	; (8000eec <HAL_OSPI_MspInit+0x214>)
 8000d9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000da0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000da4:	613b      	str	r3, [r7, #16]
 8000da6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000da8:	4b50      	ldr	r3, [pc, #320]	; (8000eec <HAL_OSPI_MspInit+0x214>)
 8000daa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000dae:	4a4f      	ldr	r2, [pc, #316]	; (8000eec <HAL_OSPI_MspInit+0x214>)
 8000db0:	f043 0320 	orr.w	r3, r3, #32
 8000db4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000db8:	4b4c      	ldr	r3, [pc, #304]	; (8000eec <HAL_OSPI_MspInit+0x214>)
 8000dba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000dbe:	f003 0320 	and.w	r3, r3, #32
 8000dc2:	60fb      	str	r3, [r7, #12]
 8000dc4:	68fb      	ldr	r3, [r7, #12]
    PF2     ------> OCTOSPIM_P2_IO2
    PF3     ------> OCTOSPIM_P2_IO3
    PF4     ------> OCTOSPIM_P2_CLK
    PF12     ------> OCTOSPIM_P2_DQS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000dc6:	2320      	movs	r3, #32
 8000dc8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd8:	2303      	movs	r3, #3
 8000dda:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPI2;
 8000dde:	2305      	movs	r3, #5
 8000de0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000de4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000de8:	4619      	mov	r1, r3
 8000dea:	4841      	ldr	r0, [pc, #260]	; (8000ef0 <HAL_OSPI_MspInit+0x218>)
 8000dec:	f002 fa8e 	bl	800330c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_9;
 8000df0:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8000df4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df8:	2302      	movs	r3, #2
 8000dfa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e04:	2303      	movs	r3, #3
 8000e06:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPI2;
 8000e0a:	2305      	movs	r3, #5
 8000e0c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000e10:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000e14:	4619      	mov	r1, r3
 8000e16:	4837      	ldr	r0, [pc, #220]	; (8000ef4 <HAL_OSPI_MspInit+0x21c>)
 8000e18:	f002 fa78 	bl	800330c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000e1c:	f241 031f 	movw	r3, #4127	; 0x101f
 8000e20:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
                          |GPIO_PIN_4|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e24:	2302      	movs	r3, #2
 8000e26:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e30:	2303      	movs	r3, #3
 8000e32:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPI2;
 8000e36:	2305      	movs	r3, #5
 8000e38:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e3c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000e40:	4619      	mov	r1, r3
 8000e42:	482d      	ldr	r0, [pc, #180]	; (8000ef8 <HAL_OSPI_MspInit+0x220>)
 8000e44:	f002 fa62 	bl	800330c <HAL_GPIO_Init>

    /* OCTOSPI2 DMA Init */
    /* GPDMA1_REQUEST_OCTOSPI2 Init */
    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 8000e48:	4b2c      	ldr	r3, [pc, #176]	; (8000efc <HAL_OSPI_MspInit+0x224>)
 8000e4a:	4a2d      	ldr	r2, [pc, #180]	; (8000f00 <HAL_OSPI_MspInit+0x228>)
 8000e4c:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel0.Init.Request = GPDMA1_REQUEST_OCTOSPI2;
 8000e4e:	4b2b      	ldr	r3, [pc, #172]	; (8000efc <HAL_OSPI_MspInit+0x224>)
 8000e50:	2229      	movs	r2, #41	; 0x29
 8000e52:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel0.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8000e54:	4b29      	ldr	r3, [pc, #164]	; (8000efc <HAL_OSPI_MspInit+0x224>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e5a:	4b28      	ldr	r3, [pc, #160]	; (8000efc <HAL_OSPI_MspInit+0x224>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel0.Init.SrcInc = DMA_SINC_FIXED;
 8000e60:	4b26      	ldr	r3, [pc, #152]	; (8000efc <HAL_OSPI_MspInit+0x224>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel0.Init.DestInc = DMA_DINC_INCREMENTED;
 8000e66:	4b25      	ldr	r3, [pc, #148]	; (8000efc <HAL_OSPI_MspInit+0x224>)
 8000e68:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000e6c:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel0.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 8000e6e:	4b23      	ldr	r3, [pc, #140]	; (8000efc <HAL_OSPI_MspInit+0x224>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel0.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 8000e74:	4b21      	ldr	r3, [pc, #132]	; (8000efc <HAL_OSPI_MspInit+0x224>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel0.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8000e7a:	4b20      	ldr	r3, [pc, #128]	; (8000efc <HAL_OSPI_MspInit+0x224>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel0.Init.SrcBurstLength = 1;
 8000e80:	4b1e      	ldr	r3, [pc, #120]	; (8000efc <HAL_OSPI_MspInit+0x224>)
 8000e82:	2201      	movs	r2, #1
 8000e84:	625a      	str	r2, [r3, #36]	; 0x24
    handle_GPDMA1_Channel0.Init.DestBurstLength = 1;
 8000e86:	4b1d      	ldr	r3, [pc, #116]	; (8000efc <HAL_OSPI_MspInit+0x224>)
 8000e88:	2201      	movs	r2, #1
 8000e8a:	629a      	str	r2, [r3, #40]	; 0x28
    handle_GPDMA1_Channel0.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8000e8c:	4b1b      	ldr	r3, [pc, #108]	; (8000efc <HAL_OSPI_MspInit+0x224>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	62da      	str	r2, [r3, #44]	; 0x2c
    handle_GPDMA1_Channel0.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8000e92:	4b1a      	ldr	r3, [pc, #104]	; (8000efc <HAL_OSPI_MspInit+0x224>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	631a      	str	r2, [r3, #48]	; 0x30
    handle_GPDMA1_Channel0.Init.Mode = DMA_NORMAL;
 8000e98:	4b18      	ldr	r3, [pc, #96]	; (8000efc <HAL_OSPI_MspInit+0x224>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	635a      	str	r2, [r3, #52]	; 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 8000e9e:	4817      	ldr	r0, [pc, #92]	; (8000efc <HAL_OSPI_MspInit+0x224>)
 8000ea0:	f001 fa04 	bl	80022ac <HAL_DMA_Init>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <HAL_OSPI_MspInit+0x1d6>
    {
      Error_Handler();
 8000eaa:	f7ff fee9 	bl	8000c80 <Error_Handler>
    }

    __HAL_LINKDMA(hospi, hdma, handle_GPDMA1_Channel0);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4a12      	ldr	r2, [pc, #72]	; (8000efc <HAL_OSPI_MspInit+0x224>)
 8000eb2:	64da      	str	r2, [r3, #76]	; 0x4c
 8000eb4:	4a11      	ldr	r2, [pc, #68]	; (8000efc <HAL_OSPI_MspInit+0x224>)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	65d3      	str	r3, [r2, #92]	; 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 8000eba:	2110      	movs	r1, #16
 8000ebc:	480f      	ldr	r0, [pc, #60]	; (8000efc <HAL_OSPI_MspInit+0x224>)
 8000ebe:	f001 fe80 	bl	8002bc2 <HAL_DMA_ConfigChannelAttributes>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <HAL_OSPI_MspInit+0x1f4>
    {
      Error_Handler();
 8000ec8:	f7ff feda 	bl	8000c80 <Error_Handler>
    }

    /* OCTOSPI2 interrupt Init */
    HAL_NVIC_SetPriority(OCTOSPI2_IRQn, 0, 0);
 8000ecc:	2200      	movs	r2, #0
 8000ece:	2100      	movs	r1, #0
 8000ed0:	2078      	movs	r0, #120	; 0x78
 8000ed2:	f001 f9b5 	bl	8002240 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OCTOSPI2_IRQn);
 8000ed6:	2078      	movs	r0, #120	; 0x78
 8000ed8:	f001 f9cc 	bl	8002274 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN OCTOSPI2_MspInit 1 */

  /* USER CODE END OCTOSPI2_MspInit 1 */
  }

}
 8000edc:	bf00      	nop
 8000ede:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	420d2400 	.word	0x420d2400
 8000eec:	46020c00 	.word	0x46020c00
 8000ef0:	42022000 	.word	0x42022000
 8000ef4:	42021c00 	.word	0x42021c00
 8000ef8:	42021400 	.word	0x42021400
 8000efc:	20002620 	.word	0x20002620
 8000f00:	40020050 	.word	0x40020050

08000f04 <HAL_OSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspDeInit(OSPI_HandleTypeDef* hospi)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  if(hospi->Instance==OCTOSPI2)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a16      	ldr	r2, [pc, #88]	; (8000f6c <HAL_OSPI_MspDeInit+0x68>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d125      	bne.n	8000f62 <HAL_OSPI_MspDeInit+0x5e>
  {
  /* USER CODE BEGIN OCTOSPI2_MspDeInit 0 */

  /* USER CODE END OCTOSPI2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_OSPIM_CLK_DISABLE();
 8000f16:	4b16      	ldr	r3, [pc, #88]	; (8000f70 <HAL_OSPI_MspDeInit+0x6c>)
 8000f18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f1c:	4a14      	ldr	r2, [pc, #80]	; (8000f70 <HAL_OSPI_MspDeInit+0x6c>)
 8000f1e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000f22:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_OSPI2_CLK_DISABLE();
 8000f26:	4b12      	ldr	r3, [pc, #72]	; (8000f70 <HAL_OSPI_MspDeInit+0x6c>)
 8000f28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f2c:	4a10      	ldr	r2, [pc, #64]	; (8000f70 <HAL_OSPI_MspDeInit+0x6c>)
 8000f2e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000f32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    PF2     ------> OCTOSPIM_P2_IO2
    PF3     ------> OCTOSPIM_P2_IO3
    PF4     ------> OCTOSPIM_P2_CLK
    PF12     ------> OCTOSPIM_P2_DQS
    */
    HAL_GPIO_DeInit(GPIOI, GPIO_PIN_5);
 8000f36:	2120      	movs	r1, #32
 8000f38:	480e      	ldr	r0, [pc, #56]	; (8000f74 <HAL_OSPI_MspDeInit+0x70>)
 8000f3a:	f002 fbbf 	bl	80036bc <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOH, GPIO_PIN_12|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_9);
 8000f3e:	f44f 51f0 	mov.w	r1, #7680	; 0x1e00
 8000f42:	480d      	ldr	r0, [pc, #52]	; (8000f78 <HAL_OSPI_MspDeInit+0x74>)
 8000f44:	f002 fbba 	bl	80036bc <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000f48:	f241 011f 	movw	r1, #4127	; 0x101f
 8000f4c:	480b      	ldr	r0, [pc, #44]	; (8000f7c <HAL_OSPI_MspDeInit+0x78>)
 8000f4e:	f002 fbb5 	bl	80036bc <HAL_GPIO_DeInit>
                          |GPIO_PIN_4|GPIO_PIN_12);

    /* OCTOSPI2 DMA DeInit */
    HAL_DMA_DeInit(hospi->hdma);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f56:	4618      	mov	r0, r3
 8000f58:	f001 fad8 	bl	800250c <HAL_DMA_DeInit>

    /* OCTOSPI2 interrupt DeInit */
    HAL_NVIC_DisableIRQ(OCTOSPI2_IRQn);
 8000f5c:	2078      	movs	r0, #120	; 0x78
 8000f5e:	f001 f997 	bl	8002290 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN OCTOSPI2_MspDeInit 1 */

  /* USER CODE END OCTOSPI2_MspDeInit 1 */
  }

}
 8000f62:	bf00      	nop
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	420d2400 	.word	0x420d2400
 8000f70:	46020c00 	.word	0x46020c00
 8000f74:	42022000 	.word	0x42022000
 8000f78:	42021c00 	.word	0x42021c00
 8000f7c:	42021400 	.word	0x42021400

08000f80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b0bc      	sub	sp, #240	; 0xf0
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f88:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]
 8000f94:	60da      	str	r2, [r3, #12]
 8000f96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f98:	f107 0310 	add.w	r3, r7, #16
 8000f9c:	22c8      	movs	r2, #200	; 0xc8
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f018 fe29 	bl	8019bf8 <memset>
  if(huart->Instance==USART1)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4a26      	ldr	r2, [pc, #152]	; (8001044 <HAL_UART_MspInit+0xc4>)
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d145      	bne.n	800103c <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000fb0:	f04f 0201 	mov.w	r2, #1
 8000fb4:	f04f 0300 	mov.w	r3, #0
 8000fb8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fc0:	f107 0310 	add.w	r3, r7, #16
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f006 f917 	bl	80071f8 <HAL_RCCEx_PeriphCLKConfig>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8000fd0:	f7ff fe56 	bl	8000c80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000fd4:	4b1c      	ldr	r3, [pc, #112]	; (8001048 <HAL_UART_MspInit+0xc8>)
 8000fd6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000fda:	4a1b      	ldr	r2, [pc, #108]	; (8001048 <HAL_UART_MspInit+0xc8>)
 8000fdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fe0:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8000fe4:	4b18      	ldr	r3, [pc, #96]	; (8001048 <HAL_UART_MspInit+0xc8>)
 8000fe6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000fea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fee:	60fb      	str	r3, [r7, #12]
 8000ff0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff2:	4b15      	ldr	r3, [pc, #84]	; (8001048 <HAL_UART_MspInit+0xc8>)
 8000ff4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000ff8:	4a13      	ldr	r2, [pc, #76]	; (8001048 <HAL_UART_MspInit+0xc8>)
 8000ffa:	f043 0301 	orr.w	r3, r3, #1
 8000ffe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001002:	4b11      	ldr	r3, [pc, #68]	; (8001048 <HAL_UART_MspInit+0xc8>)
 8001004:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001008:	f003 0301 	and.w	r3, r3, #1
 800100c:	60bb      	str	r3, [r7, #8]
 800100e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8001010:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001014:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001018:	2302      	movs	r3, #2
 800101a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101e:	2300      	movs	r3, #0
 8001020:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001024:	2300      	movs	r3, #0
 8001026:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800102a:	2307      	movs	r3, #7
 800102c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001030:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001034:	4619      	mov	r1, r3
 8001036:	4805      	ldr	r0, [pc, #20]	; (800104c <HAL_UART_MspInit+0xcc>)
 8001038:	f002 f968 	bl	800330c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800103c:	bf00      	nop
 800103e:	37f0      	adds	r7, #240	; 0xf0
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	40013800 	.word	0x40013800
 8001048:	46020c00 	.word	0x46020c00
 800104c:	42020000 	.word	0x42020000

08001050 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b08e      	sub	sp, #56	; 0x38
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001058:	2300      	movs	r3, #0
 800105a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              uwPrescalerValue = 0;
 800105c:	2300      	movs	r3, #0
 800105e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001060:	4b2e      	ldr	r3, [pc, #184]	; (800111c <HAL_InitTick+0xcc>)
 8001062:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001066:	4a2d      	ldr	r2, [pc, #180]	; (800111c <HAL_InitTick+0xcc>)
 8001068:	f043 0310 	orr.w	r3, r3, #16
 800106c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8001070:	4b2a      	ldr	r3, [pc, #168]	; (800111c <HAL_InitTick+0xcc>)
 8001072:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001076:	f003 0310 	and.w	r3, r3, #16
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800107e:	f107 0210 	add.w	r2, r7, #16
 8001082:	f107 0314 	add.w	r3, r7, #20
 8001086:	4611      	mov	r1, r2
 8001088:	4618      	mov	r0, r3
 800108a:	f005 fff7 	bl	800707c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800108e:	f005 ffb9 	bl	8007004 <HAL_RCC_GetPCLK1Freq>
 8001092:	6338      	str	r0, [r7, #48]	; 0x30

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001096:	4a22      	ldr	r2, [pc, #136]	; (8001120 <HAL_InitTick+0xd0>)
 8001098:	fba2 2303 	umull	r2, r3, r2, r3
 800109c:	0c9b      	lsrs	r3, r3, #18
 800109e:	3b01      	subs	r3, #1
 80010a0:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80010a2:	4b20      	ldr	r3, [pc, #128]	; (8001124 <HAL_InitTick+0xd4>)
 80010a4:	4a20      	ldr	r2, [pc, #128]	; (8001128 <HAL_InitTick+0xd8>)
 80010a6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80010a8:	4b1e      	ldr	r3, [pc, #120]	; (8001124 <HAL_InitTick+0xd4>)
 80010aa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010ae:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80010b0:	4a1c      	ldr	r2, [pc, #112]	; (8001124 <HAL_InitTick+0xd4>)
 80010b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010b4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80010b6:	4b1b      	ldr	r3, [pc, #108]	; (8001124 <HAL_InitTick+0xd4>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010bc:	4b19      	ldr	r3, [pc, #100]	; (8001124 <HAL_InitTick+0xd4>)
 80010be:	2200      	movs	r2, #0
 80010c0:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 80010c2:	4818      	ldr	r0, [pc, #96]	; (8001124 <HAL_InitTick+0xd4>)
 80010c4:	f008 fd78 	bl	8009bb8 <HAL_TIM_Base_Init>
 80010c8:	4603      	mov	r3, r0
 80010ca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (status == HAL_OK)
 80010ce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d118      	bne.n	8001108 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80010d6:	4813      	ldr	r0, [pc, #76]	; (8001124 <HAL_InitTick+0xd4>)
 80010d8:	f008 fddc 	bl	8009c94 <HAL_TIM_Base_Start_IT>
 80010dc:	4603      	mov	r3, r0
 80010de:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (status == HAL_OK)
 80010e2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d10e      	bne.n	8001108 <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2b0f      	cmp	r3, #15
 80010ee:	d808      	bhi.n	8001102 <HAL_InitTick+0xb2>
      {
        /* Enable the TIM6 global Interrupt */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 80010f0:	2200      	movs	r2, #0
 80010f2:	6879      	ldr	r1, [r7, #4]
 80010f4:	2031      	movs	r0, #49	; 0x31
 80010f6:	f001 f8a3 	bl	8002240 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010fa:	4a0c      	ldr	r2, [pc, #48]	; (800112c <HAL_InitTick+0xdc>)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6013      	str	r3, [r2, #0]
 8001100:	e002      	b.n	8001108 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      }
    }
  }

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8001108:	2031      	movs	r0, #49	; 0x31
 800110a:	f001 f8b3 	bl	8002274 <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 800110e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001112:	4618      	mov	r0, r3
 8001114:	3738      	adds	r7, #56	; 0x38
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	46020c00 	.word	0x46020c00
 8001120:	431bde83 	.word	0x431bde83
 8001124:	20002760 	.word	0x20002760
 8001128:	40001000 	.word	0x40001000
 800112c:	20000004 	.word	0x20000004

08001130 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001134:	e7fe      	b.n	8001134 <NMI_Handler+0x4>

08001136 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001136:	b480      	push	{r7}
 8001138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800113a:	e7fe      	b.n	800113a <HardFault_Handler+0x4>

0800113c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001140:	e7fe      	b.n	8001140 <MemManage_Handler+0x4>

08001142 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001142:	b480      	push	{r7}
 8001144:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001146:	e7fe      	b.n	8001146 <BusFault_Handler+0x4>

08001148 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800114c:	e7fe      	b.n	800114c <UsageFault_Handler+0x4>

0800114e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800114e:	b480      	push	{r7}
 8001150:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001152:	bf00      	nop
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr

0800115c <GPDMA1_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 0 global interrupt.
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */

  /* USER CODE END GPDMA1_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel0);
 8001160:	4802      	ldr	r0, [pc, #8]	; (800116c <GPDMA1_Channel0_IRQHandler+0x10>)
 8001162:	f001 fbb2 	bl	80028ca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 1 */

  /* USER CODE END GPDMA1_Channel0_IRQn 1 */
}
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20002620 	.word	0x20002620

08001170 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001174:	4802      	ldr	r0, [pc, #8]	; (8001180 <TIM6_IRQHandler+0x10>)
 8001176:	f008 fe2d 	bl	8009dd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	20002760 	.word	0x20002760

08001184 <OCTOSPI2_IRQHandler>:

/**
  * @brief This function handles OCTOSPI2 global interrupt.
  */
void OCTOSPI2_IRQHandler(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OCTOSPI2_IRQn 0 */

  /* USER CODE END OCTOSPI2_IRQn 0 */
  HAL_OSPI_IRQHandler(&hospi2);
 8001188:	4802      	ldr	r0, [pc, #8]	; (8001194 <OCTOSPI2_IRQHandler+0x10>)
 800118a:	f002 fccb 	bl	8003b24 <HAL_OSPI_IRQHandler>
  /* USER CODE BEGIN OCTOSPI2_IRQn 1 */

  /* USER CODE END OCTOSPI2_IRQn 1 */
}
 800118e:	bf00      	nop
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	200025c4 	.word	0x200025c4

08001198 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b086      	sub	sp, #24
 800119c:	af00      	add	r7, sp, #0
 800119e:	60f8      	str	r0, [r7, #12]
 80011a0:	60b9      	str	r1, [r7, #8]
 80011a2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011a4:	2300      	movs	r3, #0
 80011a6:	617b      	str	r3, [r7, #20]
 80011a8:	e00a      	b.n	80011c0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80011aa:	f3af 8000 	nop.w
 80011ae:	4601      	mov	r1, r0
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	1c5a      	adds	r2, r3, #1
 80011b4:	60ba      	str	r2, [r7, #8]
 80011b6:	b2ca      	uxtb	r2, r1
 80011b8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	3301      	adds	r3, #1
 80011be:	617b      	str	r3, [r7, #20]
 80011c0:	697a      	ldr	r2, [r7, #20]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	dbf0      	blt.n	80011aa <_read+0x12>
	}

return len;
 80011c8:	687b      	ldr	r3, [r7, #4]
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3718      	adds	r7, #24
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}

080011d2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b086      	sub	sp, #24
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	60f8      	str	r0, [r7, #12]
 80011da:	60b9      	str	r1, [r7, #8]
 80011dc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011de:	2300      	movs	r3, #0
 80011e0:	617b      	str	r3, [r7, #20]
 80011e2:	e009      	b.n	80011f8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	1c5a      	adds	r2, r3, #1
 80011e8:	60ba      	str	r2, [r7, #8]
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff fd23 	bl	8000c38 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	3301      	adds	r3, #1
 80011f6:	617b      	str	r3, [r7, #20]
 80011f8:	697a      	ldr	r2, [r7, #20]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	dbf1      	blt.n	80011e4 <_write+0x12>
	}
	return len;
 8001200:	687b      	ldr	r3, [r7, #4]
}
 8001202:	4618      	mov	r0, r3
 8001204:	3718      	adds	r7, #24
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}

0800120a <_close>:

int _close(int file)
{
 800120a:	b480      	push	{r7}
 800120c:	b083      	sub	sp, #12
 800120e:	af00      	add	r7, sp, #0
 8001210:	6078      	str	r0, [r7, #4]
	return -1;
 8001212:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001216:	4618      	mov	r0, r3
 8001218:	370c      	adds	r7, #12
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr

08001222 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001222:	b480      	push	{r7}
 8001224:	b083      	sub	sp, #12
 8001226:	af00      	add	r7, sp, #0
 8001228:	6078      	str	r0, [r7, #4]
 800122a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001232:	605a      	str	r2, [r3, #4]
	return 0;
 8001234:	2300      	movs	r3, #0
}
 8001236:	4618      	mov	r0, r3
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr

08001242 <_isatty>:

int _isatty(int file)
{
 8001242:	b480      	push	{r7}
 8001244:	b083      	sub	sp, #12
 8001246:	af00      	add	r7, sp, #0
 8001248:	6078      	str	r0, [r7, #4]
	return 1;
 800124a:	2301      	movs	r3, #1
}
 800124c:	4618      	mov	r0, r3
 800124e:	370c      	adds	r7, #12
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr

08001258 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001258:	b480      	push	{r7}
 800125a:	b085      	sub	sp, #20
 800125c:	af00      	add	r7, sp, #0
 800125e:	60f8      	str	r0, [r7, #12]
 8001260:	60b9      	str	r1, [r7, #8]
 8001262:	607a      	str	r2, [r7, #4]
	return 0;
 8001264:	2300      	movs	r3, #0
}
 8001266:	4618      	mov	r0, r3
 8001268:	3714      	adds	r7, #20
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
	...

08001274 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b086      	sub	sp, #24
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800127c:	4a14      	ldr	r2, [pc, #80]	; (80012d0 <_sbrk+0x5c>)
 800127e:	4b15      	ldr	r3, [pc, #84]	; (80012d4 <_sbrk+0x60>)
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001288:	4b13      	ldr	r3, [pc, #76]	; (80012d8 <_sbrk+0x64>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d102      	bne.n	8001296 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001290:	4b11      	ldr	r3, [pc, #68]	; (80012d8 <_sbrk+0x64>)
 8001292:	4a12      	ldr	r2, [pc, #72]	; (80012dc <_sbrk+0x68>)
 8001294:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001296:	4b10      	ldr	r3, [pc, #64]	; (80012d8 <_sbrk+0x64>)
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4413      	add	r3, r2
 800129e:	693a      	ldr	r2, [r7, #16]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d207      	bcs.n	80012b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012a4:	f018 fcb0 	bl	8019c08 <__errno>
 80012a8:	4603      	mov	r3, r0
 80012aa:	220c      	movs	r2, #12
 80012ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012b2:	e009      	b.n	80012c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012b4:	4b08      	ldr	r3, [pc, #32]	; (80012d8 <_sbrk+0x64>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012ba:	4b07      	ldr	r3, [pc, #28]	; (80012d8 <_sbrk+0x64>)
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4413      	add	r3, r2
 80012c2:	4a05      	ldr	r2, [pc, #20]	; (80012d8 <_sbrk+0x64>)
 80012c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012c6:	68fb      	ldr	r3, [r7, #12]
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3718      	adds	r7, #24
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	200c0000 	.word	0x200c0000
 80012d4:	00000400 	.word	0x00000400
 80012d8:	2000282c 	.word	0x2000282c
 80012dc:	200159a0 	.word	0x200159a0

080012e0 <MX_FileX_Init>:
  * @brief  Application FileX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
*/
UINT MX_FileX_Init(VOID *memory_ptr)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b08e      	sub	sp, #56	; 0x38
 80012e4:	af08      	add	r7, sp, #32
 80012e6:	6078      	str	r0, [r7, #4]
  UINT ret = FX_SUCCESS;
 80012e8:	2300      	movs	r3, #0
 80012ea:	617b      	str	r3, [r7, #20]
  TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	613b      	str	r3, [r7, #16]
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/*Allocate memory for the main thread's stack*/
  ret = tx_byte_allocate(byte_pool, &pointer, FX_APP_THREAD_STACK_SIZE, TX_NO_WAIT);
 80012f0:	f107 010c 	add.w	r1, r7, #12
 80012f4:	2300      	movs	r3, #0
 80012f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012fa:	6938      	ldr	r0, [r7, #16]
 80012fc:	f018 f812 	bl	8019324 <_txe_byte_allocate>
 8001300:	6178      	str	r0, [r7, #20]

/* Check FX_APP_THREAD_STACK_SIZE allocation*/
  if (ret != FX_SUCCESS)
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_FileX_Init+0x2c>
  {
    return TX_POOL_ERROR;
 8001308:	2302      	movs	r3, #2
 800130a:	e01d      	b.n	8001348 <MX_FileX_Init+0x68>
  }

/* Create the main thread.  */
  ret = tx_thread_create(&fx_app_thread, FX_APP_THREAD_NAME, fx_app_thread_entry, 0, pointer, FX_APP_THREAD_STACK_SIZE,
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	22b0      	movs	r2, #176	; 0xb0
 8001310:	9206      	str	r2, [sp, #24]
 8001312:	2201      	movs	r2, #1
 8001314:	9205      	str	r2, [sp, #20]
 8001316:	2200      	movs	r2, #0
 8001318:	9204      	str	r2, [sp, #16]
 800131a:	220a      	movs	r2, #10
 800131c:	9203      	str	r2, [sp, #12]
 800131e:	220a      	movs	r2, #10
 8001320:	9202      	str	r2, [sp, #8]
 8001322:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001326:	9201      	str	r2, [sp, #4]
 8001328:	9300      	str	r3, [sp, #0]
 800132a:	2300      	movs	r3, #0
 800132c:	4a08      	ldr	r2, [pc, #32]	; (8001350 <MX_FileX_Init+0x70>)
 800132e:	4909      	ldr	r1, [pc, #36]	; (8001354 <MX_FileX_Init+0x74>)
 8001330:	4809      	ldr	r0, [pc, #36]	; (8001358 <MX_FileX_Init+0x78>)
 8001332:	f018 fa3f 	bl	80197b4 <_txe_thread_create>
 8001336:	6178      	str	r0, [r7, #20]
                         FX_APP_THREAD_PRIO, FX_APP_PREEMPTION_THRESHOLD, FX_APP_THREAD_TIME_SLICE, FX_APP_THREAD_AUTO_START);

/* Check main thread creation */
  if (ret != FX_SUCCESS)
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_FileX_Init+0x62>
  {
    return TX_THREAD_ERROR;
 800133e:	230e      	movs	r3, #14
 8001340:	e002      	b.n	8001348 <MX_FileX_Init+0x68>
/* USER CODE BEGIN MX_FileX_Init */

/* USER CODE END MX_FileX_Init */

/* Initialize FileX.  */
  fx_system_initialize();
 8001342:	f010 fd25 	bl	8011d90 <_fx_system_initialize>

/* USER CODE BEGIN MX_FileX_Init 1*/

/* USER CODE END MX_FileX_Init 1*/

  return ret;
 8001346:	697b      	ldr	r3, [r7, #20]
}
 8001348:	4618      	mov	r0, r3
 800134a:	3718      	adds	r7, #24
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	0800135d 	.word	0x0800135d
 8001354:	0801a930 	.word	0x0801a930
 8001358:	20002830 	.word	0x20002830

0800135c <fx_app_thread_entry>:
 * @brief  Main thread entry.
 * @param thread_input: ULONG user argument used by the thread entry
 * @retval none
*/
 void fx_app_thread_entry(ULONG thread_input)
 {
 800135c:	b5b0      	push	{r4, r5, r7, lr}
 800135e:	b0a0      	sub	sp, #128	; 0x80
 8001360:	af0a      	add	r7, sp, #40	; 0x28
 8001362:	6078      	str	r0, [r7, #4]

  UINT nor_ospi_status = FX_SUCCESS;
 8001364:	2300      	movs	r3, #0
 8001366:	657b      	str	r3, [r7, #84]	; 0x54
/* USER CODE BEGIN fx_app_thread_entry 0*/
  ULONG bytes_read;
  ULONG available_space_pre;
  ULONG available_space_post;
  CHAR read_buffer[32];
  CHAR data[] = "This is FileX working on STM32";
 8001368:	4b8a      	ldr	r3, [pc, #552]	; (8001594 <fx_app_thread_entry+0x238>)
 800136a:	f107 0408 	add.w	r4, r7, #8
 800136e:	461d      	mov	r5, r3
 8001370:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001372:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001374:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001378:	c407      	stmia	r4!, {r0, r1, r2}
 800137a:	8023      	strh	r3, [r4, #0]
 800137c:	3402      	adds	r4, #2
 800137e:	0c1b      	lsrs	r3, r3, #16
 8001380:	7023      	strb	r3, [r4, #0]

  printf("FileX/LevelX NOR OCTO-SPI Application Start.\n");
 8001382:	4885      	ldr	r0, [pc, #532]	; (8001598 <fx_app_thread_entry+0x23c>)
 8001384:	f018 fc30 	bl	8019be8 <puts>

  /* Print the absolute size of the NOR chip*/
  printf("Total NOR Flash Chip size is: %lu bytes.\n",(ULONG)LX_STM32_OSPI_FLASH_SIZE);
 8001388:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 800138c:	4883      	ldr	r0, [pc, #524]	; (800159c <fx_app_thread_entry+0x240>)
 800138e:	f018 fbc5 	bl	8019b1c <iprintf>
/* USER CODE END fx_app_thread_entry 0*/

/* Format the OCTO-SPI NOR flash as FAT */
  nor_ospi_status =  fx_media_format(&nor_ospi_flash_disk,                               // nor_ospi_flash_disk pointer
 8001392:	2301      	movs	r3, #1
 8001394:	9309      	str	r3, [sp, #36]	; 0x24
 8001396:	2301      	movs	r3, #1
 8001398:	9308      	str	r3, [sp, #32]
 800139a:	2308      	movs	r3, #8
 800139c:	9307      	str	r3, [sp, #28]
 800139e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013a2:	9306      	str	r3, [sp, #24]
 80013a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013a8:	9305      	str	r3, [sp, #20]
 80013aa:	2300      	movs	r3, #0
 80013ac:	9304      	str	r3, [sp, #16]
 80013ae:	2320      	movs	r3, #32
 80013b0:	9303      	str	r3, [sp, #12]
 80013b2:	2301      	movs	r3, #1
 80013b4:	9302      	str	r3, [sp, #8]
 80013b6:	4b7a      	ldr	r3, [pc, #488]	; (80015a0 <fx_app_thread_entry+0x244>)
 80013b8:	9301      	str	r3, [sp, #4]
 80013ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013be:	9300      	str	r3, [sp, #0]
 80013c0:	4b78      	ldr	r3, [pc, #480]	; (80015a4 <fx_app_thread_entry+0x248>)
 80013c2:	2202      	movs	r2, #2
 80013c4:	4978      	ldr	r1, [pc, #480]	; (80015a8 <fx_app_thread_entry+0x24c>)
 80013c6:	4879      	ldr	r0, [pc, #484]	; (80015ac <fx_app_thread_entry+0x250>)
 80013c8:	f013 f910 	bl	80145ec <_fxe_media_format>
 80013cc:	6578      	str	r0, [r7, #84]	; 0x54
                                     8,                                                  // Sectors per cluster
                                     1,                                                  // Heads
                                     1);                                                 // Sectors per track

/* Check the format nor_ospi_status */
  if (nor_ospi_status != FX_SUCCESS)
 80013ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <fx_app_thread_entry+0x7c>
  {
    /* USER CODE BEGIN OCTO-SPI NOR format error */
      Error_Handler();
 80013d4:	f7ff fc54 	bl	8000c80 <Error_Handler>
    /* USER CODE END OCTO-SPI NOR format error */
  }

  /* Open the OCTO-SPI NOR driver */
 nor_ospi_status =  fx_media_open(&nor_ospi_flash_disk, FX_NOR_OSPI_VOLUME_NAME, fx_stm32_levelx_nor_driver, (VOID *)LX_NOR_OSPI_DRIVER_ID, (VOID *) fx_nor_ospi_media_memory, sizeof(fx_nor_ospi_media_memory));
 80013d8:	f242 43b8 	movw	r3, #9400	; 0x24b8
 80013dc:	9302      	str	r3, [sp, #8]
 80013de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013e2:	9301      	str	r3, [sp, #4]
 80013e4:	4b6f      	ldr	r3, [pc, #444]	; (80015a4 <fx_app_thread_entry+0x248>)
 80013e6:	9300      	str	r3, [sp, #0]
 80013e8:	2302      	movs	r3, #2
 80013ea:	4a6f      	ldr	r2, [pc, #444]	; (80015a8 <fx_app_thread_entry+0x24c>)
 80013ec:	496c      	ldr	r1, [pc, #432]	; (80015a0 <fx_app_thread_entry+0x244>)
 80013ee:	486f      	ldr	r0, [pc, #444]	; (80015ac <fx_app_thread_entry+0x250>)
 80013f0:	f013 f948 	bl	8014684 <_fxe_media_open>
 80013f4:	6578      	str	r0, [r7, #84]	; 0x54

/* Check the media open nor_ospi_status */
  if (nor_ospi_status != FX_SUCCESS)
 80013f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <fx_app_thread_entry+0xa4>
  {
    /* USER CODE BEGIN OCTO-SPI NOR open error */
      Error_Handler();
 80013fc:	f7ff fc40 	bl	8000c80 <Error_Handler>
    /* USER CODE END OCTO-SPI NOR open error */
  }

/* USER CODE BEGIN fx_app_thread_entry 1*/
  nor_ospi_status = fx_media_close_notify_set(&nor_ospi_flash_disk,fx_media_close_notify_set_callback);
 8001400:	496b      	ldr	r1, [pc, #428]	; (80015b0 <fx_app_thread_entry+0x254>)
 8001402:	486a      	ldr	r0, [pc, #424]	; (80015ac <fx_app_thread_entry+0x250>)
 8001404:	f013 f898 	bl	8014538 <_fxe_media_close_notify_set>
 8001408:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check the media close notification callback set.  */
  if (nor_ospi_status != FX_SUCCESS)
 800140a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <fx_app_thread_entry+0xb8>
  {
    Error_Handler();
 8001410:	f7ff fc36 	bl	8000c80 <Error_Handler>
  }

 /* Get the available usable space */
  nor_ospi_status =  fx_media_space_available(&nor_ospi_flash_disk, &available_space_pre);
 8001414:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001418:	4619      	mov	r1, r3
 800141a:	4864      	ldr	r0, [pc, #400]	; (80015ac <fx_app_thread_entry+0x250>)
 800141c:	f013 f9ce 	bl	80147bc <_fxe_media_space_available>
 8001420:	6578      	str	r0, [r7, #84]	; 0x54

  printf("User available NOR Flash disk space size before file is written: %lu bytes.\n", available_space_pre);
 8001422:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001424:	4619      	mov	r1, r3
 8001426:	4863      	ldr	r0, [pc, #396]	; (80015b4 <fx_app_thread_entry+0x258>)
 8001428:	f018 fb78 	bl	8019b1c <iprintf>

  /* Check the get available state request nor_ospi_status.  */
  if (nor_ospi_status != FX_SUCCESS)
 800142c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <fx_app_thread_entry+0xda>
  {
    Error_Handler();
 8001432:	f7ff fc25 	bl	8000c80 <Error_Handler>
  }

  /* Create a file called STM32.TXT in the root directory.  */
  nor_ospi_status =  fx_file_create(&nor_ospi_flash_disk, "STM32.TXT");
 8001436:	4960      	ldr	r1, [pc, #384]	; (80015b8 <fx_app_thread_entry+0x25c>)
 8001438:	485c      	ldr	r0, [pc, #368]	; (80015ac <fx_app_thread_entry+0x250>)
 800143a:	f012 ff07 	bl	801424c <_fxe_file_create>
 800143e:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check the create nor_ospi_status.  */
  if (nor_ospi_status != FX_SUCCESS)
 8001440:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001442:	2b00      	cmp	r3, #0
 8001444:	d004      	beq.n	8001450 <fx_app_thread_entry+0xf4>
  {
    /* Check for an already created nor_ospi_status. This is expected on the
    second pass of this loop!  */
    if (nor_ospi_status != FX_ALREADY_CREATED)
 8001446:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001448:	2b0b      	cmp	r3, #11
 800144a:	d001      	beq.n	8001450 <fx_app_thread_entry+0xf4>
    {
      /* Create error, call error handler.  */
      Error_Handler();
 800144c:	f7ff fc18 	bl	8000c80 <Error_Handler>
    }
  }

  /* Open the test file.  */
  nor_ospi_status =  fx_file_open(&nor_ospi_flash_disk, &fx_file, "STM32.TXT", FX_OPEN_FOR_WRITE);
 8001450:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001454:	9300      	str	r3, [sp, #0]
 8001456:	2301      	movs	r3, #1
 8001458:	4a57      	ldr	r2, [pc, #348]	; (80015b8 <fx_app_thread_entry+0x25c>)
 800145a:	4958      	ldr	r1, [pc, #352]	; (80015bc <fx_app_thread_entry+0x260>)
 800145c:	4853      	ldr	r0, [pc, #332]	; (80015ac <fx_app_thread_entry+0x250>)
 800145e:	f012 ff23 	bl	80142a8 <_fxe_file_open>
 8001462:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check the file open nor_ospi_status.  */
  if (nor_ospi_status != FX_SUCCESS)
 8001464:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <fx_app_thread_entry+0x112>
  {
    /* Error opening file, call error handler.  */
    Error_Handler();
 800146a:	f7ff fc09 	bl	8000c80 <Error_Handler>
  }

  /* Seek to the beginning of the test file.  */
  nor_ospi_status =  fx_file_seek(&fx_file, 0);
 800146e:	2100      	movs	r1, #0
 8001470:	4852      	ldr	r0, [pc, #328]	; (80015bc <fx_app_thread_entry+0x260>)
 8001472:	f012 ffd3 	bl	801441c <_fxe_file_seek>
 8001476:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check the file seek nor_ospi_status.  */
  if (nor_ospi_status != FX_SUCCESS)
 8001478:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <fx_app_thread_entry+0x126>
  {
    /* Error performing file seek, call error handler.  */
    Error_Handler();
 800147e:	f7ff fbff 	bl	8000c80 <Error_Handler>
  }

  /* Write a string to the test file.  */
  nor_ospi_status =  fx_file_write(&fx_file, data, sizeof(data));
 8001482:	f107 0308 	add.w	r3, r7, #8
 8001486:	221f      	movs	r2, #31
 8001488:	4619      	mov	r1, r3
 800148a:	484c      	ldr	r0, [pc, #304]	; (80015bc <fx_app_thread_entry+0x260>)
 800148c:	f012 fff4 	bl	8014478 <_fxe_file_write>
 8001490:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check the file write nor_ospi_status.  */
  if (nor_ospi_status != FX_SUCCESS)
 8001492:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <fx_app_thread_entry+0x140>
  {
    /* Error writing to a file, call error handler.  */
    Error_Handler();
 8001498:	f7ff fbf2 	bl	8000c80 <Error_Handler>
  }

  /* Close the test file.  */
  nor_ospi_status =  fx_file_close(&fx_file);
 800149c:	4847      	ldr	r0, [pc, #284]	; (80015bc <fx_app_thread_entry+0x260>)
 800149e:	f012 fea9 	bl	80141f4 <_fxe_file_close>
 80014a2:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check the file close nor_ospi_status.  */
  if (nor_ospi_status != FX_SUCCESS)
 80014a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <fx_app_thread_entry+0x152>
  {
    /* Error closing the file, call error handler.  */
    Error_Handler();
 80014aa:	f7ff fbe9 	bl	8000c80 <Error_Handler>
  }

  nor_ospi_status = fx_media_flush(&nor_ospi_flash_disk);
 80014ae:	483f      	ldr	r0, [pc, #252]	; (80015ac <fx_app_thread_entry+0x250>)
 80014b0:	f013 f870 	bl	8014594 <_fxe_media_flush>
 80014b4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check the media flush  nor_ospi_status.  */
  if (nor_ospi_status != FX_SUCCESS)
 80014b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <fx_app_thread_entry+0x164>
  {
    /* Error closing the file, call error handler.  */
    Error_Handler();
 80014bc:	f7ff fbe0 	bl	8000c80 <Error_Handler>
  }

   /* Open the test file.  */
  nor_ospi_status =  fx_file_open(&nor_ospi_flash_disk, &fx_file, "STM32.TXT", FX_OPEN_FOR_READ);
 80014c0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80014c4:	9300      	str	r3, [sp, #0]
 80014c6:	2300      	movs	r3, #0
 80014c8:	4a3b      	ldr	r2, [pc, #236]	; (80015b8 <fx_app_thread_entry+0x25c>)
 80014ca:	493c      	ldr	r1, [pc, #240]	; (80015bc <fx_app_thread_entry+0x260>)
 80014cc:	4837      	ldr	r0, [pc, #220]	; (80015ac <fx_app_thread_entry+0x250>)
 80014ce:	f012 feeb 	bl	80142a8 <_fxe_file_open>
 80014d2:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check the file open nor_ospi_status.  */
  if (nor_ospi_status != FX_SUCCESS)
 80014d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <fx_app_thread_entry+0x182>
  {
    /* Error opening file, call error handler.  */
    Error_Handler();
 80014da:	f7ff fbd1 	bl	8000c80 <Error_Handler>
  }

  /* Seek to the beginning of the test file.  */
  nor_ospi_status =  fx_file_seek(&fx_file, 0);
 80014de:	2100      	movs	r1, #0
 80014e0:	4836      	ldr	r0, [pc, #216]	; (80015bc <fx_app_thread_entry+0x260>)
 80014e2:	f012 ff9b 	bl	801441c <_fxe_file_seek>
 80014e6:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check the file seek nor_ospi_status.  */
  if (nor_ospi_status != FX_SUCCESS)
 80014e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <fx_app_thread_entry+0x196>
  {
    /* Error performing file seek, call error handler.  */
    Error_Handler();
 80014ee:	f7ff fbc7 	bl	8000c80 <Error_Handler>
  }

  /* Read the first 28 bytes of the test file.  */
  nor_ospi_status =  fx_file_read(&fx_file, read_buffer, sizeof(data), &bytes_read);
 80014f2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80014f6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80014fa:	221f      	movs	r2, #31
 80014fc:	482f      	ldr	r0, [pc, #188]	; (80015bc <fx_app_thread_entry+0x260>)
 80014fe:	f012 ff55 	bl	80143ac <_fxe_file_read>
 8001502:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check the file read nor_ospi_status.  */
  if ((nor_ospi_status != FX_SUCCESS) || (bytes_read != sizeof(data)))
 8001504:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001506:	2b00      	cmp	r3, #0
 8001508:	d102      	bne.n	8001510 <fx_app_thread_entry+0x1b4>
 800150a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800150c:	2b1f      	cmp	r3, #31
 800150e:	d001      	beq.n	8001514 <fx_app_thread_entry+0x1b8>
  {
    /* Error reading file, call error handler.  */
    Error_Handler();
 8001510:	f7ff fbb6 	bl	8000c80 <Error_Handler>
   }

  /* Close the test file.  */
  nor_ospi_status =  fx_file_close(&fx_file);
 8001514:	4829      	ldr	r0, [pc, #164]	; (80015bc <fx_app_thread_entry+0x260>)
 8001516:	f012 fe6d 	bl	80141f4 <_fxe_file_close>
 800151a:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check the file close nor_ospi_status.  */
  if (nor_ospi_status != FX_SUCCESS)
 800151c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <fx_app_thread_entry+0x1ca>
  {
    /* Error closing the file, call error handler.  */
    Error_Handler();
 8001522:	f7ff fbad 	bl	8000c80 <Error_Handler>
  }

  /* Get the available usable space, after the file has been created */
  nor_ospi_status =  fx_media_space_available(&nor_ospi_flash_disk, &available_space_post);
 8001526:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800152a:	4619      	mov	r1, r3
 800152c:	481f      	ldr	r0, [pc, #124]	; (80015ac <fx_app_thread_entry+0x250>)
 800152e:	f013 f945 	bl	80147bc <_fxe_media_space_available>
 8001532:	6578      	str	r0, [r7, #84]	; 0x54

  printf("User available NOR Flash disk space size after file is written: %lu bytes.\n", available_space_post);
 8001534:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001536:	4619      	mov	r1, r3
 8001538:	4821      	ldr	r0, [pc, #132]	; (80015c0 <fx_app_thread_entry+0x264>)
 800153a:	f018 faef 	bl	8019b1c <iprintf>
  printf("The test file occupied a total of %lu cluster(s) (%u per cluster).\n",
         (available_space_pre - available_space_post) / (nor_ospi_flash_disk.fx_media_bytes_per_sector * nor_ospi_flash_disk.fx_media_sectors_per_cluster),
 800153e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001540:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001542:	1ad2      	subs	r2, r2, r3
 8001544:	4b19      	ldr	r3, [pc, #100]	; (80015ac <fx_app_thread_entry+0x250>)
 8001546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001548:	4918      	ldr	r1, [pc, #96]	; (80015ac <fx_app_thread_entry+0x250>)
 800154a:	6d49      	ldr	r1, [r1, #84]	; 0x54
 800154c:	fb01 f303 	mul.w	r3, r1, r3
  printf("The test file occupied a total of %lu cluster(s) (%u per cluster).\n",
 8001550:	fbb2 f1f3 	udiv	r1, r2, r3
         nor_ospi_flash_disk.fx_media_bytes_per_sector * nor_ospi_flash_disk.fx_media_sectors_per_cluster);
 8001554:	4b15      	ldr	r3, [pc, #84]	; (80015ac <fx_app_thread_entry+0x250>)
 8001556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001558:	4a14      	ldr	r2, [pc, #80]	; (80015ac <fx_app_thread_entry+0x250>)
 800155a:	6d52      	ldr	r2, [r2, #84]	; 0x54
  printf("The test file occupied a total of %lu cluster(s) (%u per cluster).\n",
 800155c:	fb02 f303 	mul.w	r3, r2, r3
 8001560:	461a      	mov	r2, r3
 8001562:	4818      	ldr	r0, [pc, #96]	; (80015c4 <fx_app_thread_entry+0x268>)
 8001564:	f018 fada 	bl	8019b1c <iprintf>

  /* Check the get available state request nor_ospi_status.  */
  if (nor_ospi_status != FX_SUCCESS)
 8001568:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <fx_app_thread_entry+0x216>
  {
    Error_Handler();
 800156e:	f7ff fb87 	bl	8000c80 <Error_Handler>
  }

  /* Close the media.  */
  nor_ospi_status =  fx_media_close(&nor_ospi_flash_disk);
 8001572:	480e      	ldr	r0, [pc, #56]	; (80015ac <fx_app_thread_entry+0x250>)
 8001574:	f012 ffb4 	bl	80144e0 <_fxe_media_close>
 8001578:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check the media close nor_ospi_status.  */
  if (nor_ospi_status != FX_SUCCESS)
 800157a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <fx_app_thread_entry+0x228>
  {
    /* Error closing the media, call error handler.  */
    Error_Handler();
 8001580:	f7ff fb7e 	bl	8000c80 <Error_Handler>
  }

  while(1)
  {
      HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8001584:	2180      	movs	r1, #128	; 0x80
 8001586:	4810      	ldr	r0, [pc, #64]	; (80015c8 <fx_app_thread_entry+0x26c>)
 8001588:	f002 f98e 	bl	80038a8 <HAL_GPIO_TogglePin>
      tx_thread_sleep(TX_TIMER_TICKS_PER_SECOND / 2);
 800158c:	2032      	movs	r0, #50	; 0x32
 800158e:	f017 f8b1 	bl	80186f4 <_tx_thread_sleep>
      HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8001592:	e7f7      	b.n	8001584 <fx_app_thread_entry+0x228>
 8001594:	0801aaa8 	.word	0x0801aaa8
 8001598:	0801a944 	.word	0x0801a944
 800159c:	0801a974 	.word	0x0801a974
 80015a0:	0801a9a0 	.word	0x0801a9a0
 80015a4:	200028e0 	.word	0x200028e0
 80015a8:	08014879 	.word	0x08014879
 80015ac:	20002ae0 	.word	0x20002ae0
 80015b0:	080015cd 	.word	0x080015cd
 80015b4:	0801a9bc 	.word	0x0801a9bc
 80015b8:	0801aa0c 	.word	0x0801aa0c
 80015bc:	20004f98 	.word	0x20004f98
 80015c0:	0801aa18 	.word	0x0801aa18
 80015c4:	0801aa64 	.word	0x0801aa64
 80015c8:	42021c00 	.word	0x42021c00

080015cc <fx_media_close_notify_set_callback>:
* @brief  media close notification callback
* @param  fx_media : FX_MEDIA instance registered for this callback
* @retval None
*/
static VOID fx_media_close_notify_set_callback(FX_MEDIA* fx_media)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN MEDIA_CLOSE_NOTIF_CALLBACK */
  lx_stm32_ospi_lowlevel_deinit(LX_STM32_OSPI_INSTANCE);
 80015d4:	2001      	movs	r0, #1
 80015d6:	f000 f823 	bl	8001620 <lx_stm32_ospi_lowlevel_deinit>
  /* USER CODE END MEDIA_CLOSE_NOTIF_CALLBACK */
}
 80015da:	bf00      	nop
 80015dc:	3708      	adds	r7, #8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
	...

080015e4 <lx_stm32_ospi_lowlevel_init>:
* @brief system init for octospi levelx driver
* @param UINT instance OSPI instance to initialize
* @retval 0 on success error value otherwise
*/
INT lx_stm32_ospi_lowlevel_init(UINT instance)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  INT status = 0;
 80015ec:	2300      	movs	r3, #0
 80015ee:	60fb      	str	r3, [r7, #12]
  /* Init the OSPI */
  MX_OCTOSPI2_Init();
#endif

  /* OSPI memory reset */
  if (ospi_memory_reset(&hospi2) != 0)
 80015f0:	480a      	ldr	r0, [pc, #40]	; (800161c <lx_stm32_ospi_lowlevel_init+0x38>)
 80015f2:	f000 fa0d 	bl	8001a10 <ospi_memory_reset>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <lx_stm32_ospi_lowlevel_init+0x1c>
  {
    return 1;
 80015fc:	2301      	movs	r3, #1
 80015fe:	e008      	b.n	8001612 <lx_stm32_ospi_lowlevel_init+0x2e>
  }

  /* Enable octal mode */
  if (ospi_set_octal_mode(&hospi2) != 0)
 8001600:	4806      	ldr	r0, [pc, #24]	; (800161c <lx_stm32_ospi_lowlevel_init+0x38>)
 8001602:	f000 fb27 	bl	8001c54 <ospi_set_octal_mode>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <lx_stm32_ospi_lowlevel_init+0x2c>
  {
    return 1;
 800160c:	2301      	movs	r3, #1
 800160e:	e000      	b.n	8001612 <lx_stm32_ospi_lowlevel_init+0x2e>

  /* USER CODE BEGIN POST_OSPI_INIT */

  /* USER CODE END POST_OSPI_INIT */

  return status;
 8001610:	68fb      	ldr	r3, [r7, #12]
}
 8001612:	4618      	mov	r0, r3
 8001614:	3710      	adds	r7, #16
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	200025c4 	.word	0x200025c4

08001620 <lx_stm32_ospi_lowlevel_deinit>:
* @brief deinit octospi levelx driver, could be called by the fx_media_close()
* @param UINT instance OSPI instance to deinitialize
* @retval 0 on success error value otherwise
*/
INT lx_stm32_ospi_lowlevel_deinit(UINT instance)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  INT status = 0;
 8001628:	2300      	movs	r3, #0
 800162a:	60fb      	str	r3, [r7, #12]

  /* Delete semaphore objects */
  tx_semaphore_delete(&ospi_tx_semaphore);
 800162c:	4809      	ldr	r0, [pc, #36]	; (8001654 <lx_stm32_ospi_lowlevel_deinit+0x34>)
 800162e:	f018 f823 	bl	8019678 <_txe_semaphore_delete>
  tx_semaphore_delete(&ospi_rx_semaphore);
 8001632:	4809      	ldr	r0, [pc, #36]	; (8001658 <lx_stm32_ospi_lowlevel_deinit+0x38>)
 8001634:	f018 f820 	bl	8019678 <_txe_semaphore_delete>

  /* Call the DeInit function to reset the driver */
  if (HAL_OSPI_DeInit(&hospi2) != HAL_OK)
 8001638:	4808      	ldr	r0, [pc, #32]	; (800165c <lx_stm32_ospi_lowlevel_deinit+0x3c>)
 800163a:	f002 fa4b 	bl	8003ad4 <HAL_OSPI_DeInit>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <lx_stm32_ospi_lowlevel_deinit+0x28>
  {
    return 1;
 8001644:	2301      	movs	r3, #1
 8001646:	e000      	b.n	800164a <lx_stm32_ospi_lowlevel_deinit+0x2a>

  /* USER CODE BEGIN PRE_OSPI_DEINIT */

  /* USER CODE END PRE_OSPI_DEINIT */

  return status;
 8001648:	68fb      	ldr	r3, [r7, #12]
}
 800164a:	4618      	mov	r0, r3
 800164c:	3710      	adds	r7, #16
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	20015194 	.word	0x20015194
 8001658:	20015178 	.word	0x20015178
 800165c:	200025c4 	.word	0x200025c4

08001660 <lx_stm32_ospi_get_status>:
* @brief Get the status of the OSPI instance
* @param UINT instance OSPI instance
* @retval 0 if the OSPI is ready 1 otherwise
*/
INT lx_stm32_ospi_get_status(UINT instance)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b098      	sub	sp, #96	; 0x60
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  INT status = 0;
 8001668:	2300      	movs	r3, #0
 800166a:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* USER CODE END PRE_OSPI_GET_STATUS */

  /* Initialize the read status register command */

  s_command.OperationType         = HAL_OSPI_OPTYPE_COMMON_CFG;
 800166c:	2300      	movs	r3, #0
 800166e:	60fb      	str	r3, [r7, #12]
  s_command.FlashId               = HAL_OSPI_FLASH_ID_1;
 8001670:	2300      	movs	r3, #0
 8001672:	613b      	str	r3, [r7, #16]
  s_command.Instruction           = LX_STM32_OSPI_OCTAL_READ_STATUS_REG_CMD;
 8001674:	f240 53fa 	movw	r3, #1530	; 0x5fa
 8001678:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode       = HAL_OSPI_INSTRUCTION_8_LINES;
 800167a:	2304      	movs	r3, #4
 800167c:	61bb      	str	r3, [r7, #24]
  s_command.InstructionSize       = HAL_OSPI_INSTRUCTION_16_BITS;
 800167e:	2310      	movs	r3, #16
 8001680:	61fb      	str	r3, [r7, #28]
  s_command.Address               = 0;
 8001682:	2300      	movs	r3, #0
 8001684:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AddressMode           = HAL_OSPI_ADDRESS_8_LINES;
 8001686:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800168a:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressSize           = HAL_OSPI_ADDRESS_32_BITS;
 800168c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001690:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateBytesMode    = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8001692:	2300      	movs	r3, #0
 8001694:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DataMode              = HAL_OSPI_DATA_8_LINES;
 8001696:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800169a:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.NbData                = 2;
 800169c:	2302      	movs	r3, #2
 800169e:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DummyCycles           = LX_STM32_OSPI_DUMMY_CYCLES_READ_OCTAL;
 80016a0:	2314      	movs	r3, #20
 80016a2:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode              = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80016a4:	2300      	movs	r3, #0
 80016a6:	65bb      	str	r3, [r7, #88]	; 0x58

  /* DTR mode is enabled */
  s_command.InstructionDtrMode    = HAL_OSPI_INSTRUCTION_DTR_ENABLE;
 80016a8:	2308      	movs	r3, #8
 80016aa:	623b      	str	r3, [r7, #32]
  s_command.AddressDtrMode        = HAL_OSPI_ADDRESS_DTR_ENABLE;
 80016ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80016b0:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataDtrMode           = HAL_OSPI_DATA_DTR_ENABLE;
 80016b2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80016b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DQSMode               = HAL_OSPI_DQS_ENABLE;
 80016b8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80016bc:	657b      	str	r3, [r7, #84]	; 0x54
  /* USER CODE BEGIN GET_STATUS_CMD */

  /* USER CODE END GET_STATUS_CMD */

  /* Configure the command */
  if (HAL_OSPI_Command(&hospi2, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80016be:	f107 030c 	add.w	r3, r7, #12
 80016c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80016c6:	4619      	mov	r1, r3
 80016c8:	4810      	ldr	r0, [pc, #64]	; (800170c <lx_stm32_ospi_get_status+0xac>)
 80016ca:	f002 fb6d 	bl	8003da8 <HAL_OSPI_Command>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <lx_stm32_ospi_get_status+0x78>
  {
    return 1;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e014      	b.n	8001702 <lx_stm32_ospi_get_status+0xa2>
  }

  /* Reception of the data */
  if (HAL_OSPI_Receive(&hospi2, reg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80016d8:	f107 0308 	add.w	r3, r7, #8
 80016dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80016e0:	4619      	mov	r1, r3
 80016e2:	480a      	ldr	r0, [pc, #40]	; (800170c <lx_stm32_ospi_get_status+0xac>)
 80016e4:	f002 fc60 	bl	8003fa8 <HAL_OSPI_Receive>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <lx_stm32_ospi_get_status+0x92>
  {
    return 1;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e007      	b.n	8001702 <lx_stm32_ospi_get_status+0xa2>
  }

  /* Check the value of the register */
  if ((reg[0] & LX_STM32_OSPI_SR_WIP) != 0)
 80016f2:	7a3b      	ldrb	r3, [r7, #8]
 80016f4:	f003 0301 	and.w	r3, r3, #1
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <lx_stm32_ospi_get_status+0xa0>
  {
    return 1;
 80016fc:	2301      	movs	r3, #1
 80016fe:	e000      	b.n	8001702 <lx_stm32_ospi_get_status+0xa2>

  /* USER CODE BEGIN POST_OSPI_GET_STATUS */

  /* USER CODE END POST_OSPI_GET_STATUS */

  return status;
 8001700:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 8001702:	4618      	mov	r0, r3
 8001704:	3760      	adds	r7, #96	; 0x60
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	200025c4 	.word	0x200025c4

08001710 <lx_stm32_ospi_get_info>:
* @param ULONG * total_blocks pointer to be filled with Flash total number of blocks
* @retval 0 on Success and block_size and total_blocks are correctly filled
          1 on Failure, block_size = 0, total_blocks = 0
*/
INT lx_stm32_ospi_get_info(UINT instance, ULONG *block_size, ULONG *total_blocks)
{
 8001710:	b480      	push	{r7}
 8001712:	b087      	sub	sp, #28
 8001714:	af00      	add	r7, sp, #0
 8001716:	60f8      	str	r0, [r7, #12]
 8001718:	60b9      	str	r1, [r7, #8]
 800171a:	607a      	str	r2, [r7, #4]
  INT status = 0;
 800171c:	2300      	movs	r3, #0
 800171e:	617b      	str	r3, [r7, #20]

  /* USER CODE BEGIN PRE_OSPI_GET_INFO */

  /* USER CODE END PRE_OSPI_GET_INFO */

  *block_size = LX_STM32_OSPI_SECTOR_SIZE;
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001726:	601a      	str	r2, [r3, #0]

  *total_blocks = (LX_STM32_OSPI_FLASH_SIZE / LX_STM32_OSPI_SECTOR_SIZE);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800172e:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN POST_OSPI_GET_INFO */

  /* USER CODE END POST_OSPI_GET_INFO */
  return status;
 8001730:	697b      	ldr	r3, [r7, #20]
}
 8001732:	4618      	mov	r0, r3
 8001734:	371c      	adds	r7, #28
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
	...

08001740 <lx_stm32_ospi_read>:
* @param ULONG * buffer the destination buffer
* @param ULONG words the total number of words to be read
* @retval 0 on Success 1 on Failure
*/
INT lx_stm32_ospi_read(UINT instance, ULONG *address, ULONG *buffer, ULONG words)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b09a      	sub	sp, #104	; 0x68
 8001744:	af00      	add	r7, sp, #0
 8001746:	60f8      	str	r0, [r7, #12]
 8001748:	60b9      	str	r1, [r7, #8]
 800174a:	607a      	str	r2, [r7, #4]
 800174c:	603b      	str	r3, [r7, #0]
  INT status = 0;
 800174e:	2300      	movs	r3, #0
 8001750:	667b      	str	r3, [r7, #100]	; 0x64

  /* USER CODE END PRE_OSPI_READ */

  /* Initialize the read command */

  s_command.OperationType         = HAL_OSPI_OPTYPE_COMMON_CFG;
 8001752:	2300      	movs	r3, #0
 8001754:	617b      	str	r3, [r7, #20]
  s_command.FlashId               = HAL_OSPI_FLASH_ID_1;
 8001756:	2300      	movs	r3, #0
 8001758:	61bb      	str	r3, [r7, #24]
  s_command.InstructionMode       = HAL_OSPI_INSTRUCTION_8_LINES;
 800175a:	2304      	movs	r3, #4
 800175c:	623b      	str	r3, [r7, #32]
  s_command.InstructionSize       = HAL_OSPI_INSTRUCTION_16_BITS;
 800175e:	2310      	movs	r3, #16
 8001760:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.Address               = (uint32_t)address;
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressMode           = HAL_OSPI_ADDRESS_8_LINES;
 8001766:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800176a:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.AddressSize           = HAL_OSPI_ADDRESS_32_BITS;
 800176c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001770:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.AlternateBytesMode    = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8001772:	2300      	movs	r3, #0
 8001774:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode              = HAL_OSPI_DATA_8_LINES;
 8001776:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800177a:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.NbData                = words * sizeof(ULONG);
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DummyCycles           = LX_STM32_OSPI_DUMMY_CYCLES_READ_OCTAL;
 8001782:	2314      	movs	r3, #20
 8001784:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode              = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8001786:	2300      	movs	r3, #0
 8001788:	663b      	str	r3, [r7, #96]	; 0x60

  /* DTR mode is enabled */
  s_command.Instruction           = LX_STM32_OSPI_OCTAL_READ_DTR_CMD;
 800178a:	f64e 6311 	movw	r3, #60945	; 0xee11
 800178e:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDtrMode    = HAL_OSPI_INSTRUCTION_DTR_ENABLE;
 8001790:	2308      	movs	r3, #8
 8001792:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressDtrMode        = HAL_OSPI_ADDRESS_DTR_ENABLE;
 8001794:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001798:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DataDtrMode           = HAL_OSPI_DATA_DTR_ENABLE;
 800179a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800179e:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DQSMode               = HAL_OSPI_DQS_ENABLE;
 80017a0:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80017a4:	65fb      	str	r3, [r7, #92]	; 0x5c
  /* USER CODE BEGIN OSPI_READ_CMD */

  /* USER CODE END OSPI_READ_CMD */

  /* Configure the command */
  if (HAL_OSPI_Command(&hospi2, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80017a6:	f107 0314 	add.w	r3, r7, #20
 80017aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ae:	4619      	mov	r1, r3
 80017b0:	480a      	ldr	r0, [pc, #40]	; (80017dc <lx_stm32_ospi_read+0x9c>)
 80017b2:	f002 faf9 	bl	8003da8 <HAL_OSPI_Command>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <lx_stm32_ospi_read+0x80>
  {
    return 1;
 80017bc:	2301      	movs	r3, #1
 80017be:	e009      	b.n	80017d4 <lx_stm32_ospi_read+0x94>
  }

  /* Reception of the data */
  if (HAL_OSPI_Receive_DMA(&hospi2, (uint8_t*)buffer) != HAL_OK)
 80017c0:	6879      	ldr	r1, [r7, #4]
 80017c2:	4806      	ldr	r0, [pc, #24]	; (80017dc <lx_stm32_ospi_read+0x9c>)
 80017c4:	f002 fdc6 	bl	8004354 <HAL_OSPI_Receive_DMA>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <lx_stm32_ospi_read+0x92>
  {
    return 1;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e000      	b.n	80017d4 <lx_stm32_ospi_read+0x94>

  /* USER CODE BEGIN POST_OSPI_READ */

  /* USER CODE END POST_OSPI_READ */

  return status;
 80017d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3768      	adds	r7, #104	; 0x68
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	200025c4 	.word	0x200025c4

080017e0 <lx_stm32_ospi_write>:
* @param ULONG * buffer the data source buffer
* @param ULONG words the total number of words to be written
* @retval 0 on Success 1 on Failure
*/
INT lx_stm32_ospi_write(UINT instance, ULONG *address, ULONG *buffer, ULONG words)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b09e      	sub	sp, #120	; 0x78
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	60f8      	str	r0, [r7, #12]
 80017e8:	60b9      	str	r1, [r7, #8]
 80017ea:	607a      	str	r2, [r7, #4]
 80017ec:	603b      	str	r3, [r7, #0]
  INT status = 0;
 80017ee:	2300      	movs	r3, #0
 80017f0:	66bb      	str	r3, [r7, #104]	; 0x68
  /* USER CODE BEGIN PRE_OSPI_WRITE */

  /* USER CODE END PRE_OSPI_WRITE */

  /* Calculation of the size between the write address and the end of the page */
  current_size = LX_STM32_OSPI_PAGE_SIZE - ((uint32_t)address % LX_STM32_OSPI_PAGE_SIZE);
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80017fa:	673b      	str	r3, [r7, #112]	; 0x70

  /* Check if the size of the data is less than the remaining place in the page */
  if (current_size > (((uint32_t) words) * sizeof(ULONG)))
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001802:	429a      	cmp	r2, r3
 8001804:	d902      	bls.n	800180c <lx_stm32_ospi_write+0x2c>
  {
    current_size = ((uint32_t) words) * sizeof(ULONG);
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	673b      	str	r3, [r7, #112]	; 0x70
  }

  /* Initialize the address variables */
  current_addr = (uint32_t) address;
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	677b      	str	r3, [r7, #116]	; 0x74
  end_addr = ((uint32_t) address) + ((uint32_t) words) * sizeof(ULONG);
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	009a      	lsls	r2, r3, #2
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	4413      	add	r3, r2
 8001818:	667b      	str	r3, [r7, #100]	; 0x64
  data_buffer= (uint32_t)buffer;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* Initialize the program command */

  s_command.OperationType         = HAL_OSPI_OPTYPE_COMMON_CFG;
 800181e:	2300      	movs	r3, #0
 8001820:	617b      	str	r3, [r7, #20]
  s_command.FlashId               = HAL_OSPI_FLASH_ID_1;
 8001822:	2300      	movs	r3, #0
 8001824:	61bb      	str	r3, [r7, #24]
  s_command.Instruction           = LX_STM32_OSPI_OCTAL_PAGE_PROG_CMD;
 8001826:	f241 23ed 	movw	r3, #4845	; 0x12ed
 800182a:	61fb      	str	r3, [r7, #28]
  s_command.InstructionMode       = HAL_OSPI_INSTRUCTION_8_LINES;
 800182c:	2304      	movs	r3, #4
 800182e:	623b      	str	r3, [r7, #32]
  s_command.InstructionSize       = HAL_OSPI_INSTRUCTION_16_BITS;
 8001830:	2310      	movs	r3, #16
 8001832:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AddressMode           = HAL_OSPI_ADDRESS_8_LINES;
 8001834:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001838:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.AddressSize           = HAL_OSPI_ADDRESS_32_BITS;
 800183a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800183e:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.AlternateBytesMode    = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8001840:	2300      	movs	r3, #0
 8001842:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode              = HAL_OSPI_DATA_8_LINES;
 8001844:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001848:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DummyCycles           = 0;
 800184a:	2300      	movs	r3, #0
 800184c:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode              = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800184e:	2300      	movs	r3, #0
 8001850:	663b      	str	r3, [r7, #96]	; 0x60

  /* DTR mode is enabled */
  s_command.InstructionDtrMode    = HAL_OSPI_INSTRUCTION_DTR_ENABLE;
 8001852:	2308      	movs	r3, #8
 8001854:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressDtrMode        = HAL_OSPI_ADDRESS_DTR_ENABLE;
 8001856:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800185a:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DataDtrMode           = HAL_OSPI_DATA_DTR_ENABLE;
 800185c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001860:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DQSMode               = HAL_OSPI_DQS_DISABLE;
 8001862:	2300      	movs	r3, #0
 8001864:	65fb      	str	r3, [r7, #92]	; 0x5c
  /* USER CODE END OSPI_WRITE_CMD */

  /* Perform the write page by page */
  do
  {
    s_command.Address = current_addr;
 8001866:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001868:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.NbData  = current_size;
 800186a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800186c:	653b      	str	r3, [r7, #80]	; 0x50

    /* Enable write operations */
    if (ospi_set_write_enable(&hospi2) != 0)
 800186e:	482a      	ldr	r0, [pc, #168]	; (8001918 <lx_stm32_ospi_write+0x138>)
 8001870:	f000 f940 	bl	8001af4 <ospi_set_write_enable>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <lx_stm32_ospi_write+0x9e>
    {
      return 1;
 800187a:	2301      	movs	r3, #1
 800187c:	e047      	b.n	800190e <lx_stm32_ospi_write+0x12e>
    }

    /* Configure the command */
    if (HAL_OSPI_Command(&hospi2, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800187e:	f107 0314 	add.w	r3, r7, #20
 8001882:	f241 3288 	movw	r2, #5000	; 0x1388
 8001886:	4619      	mov	r1, r3
 8001888:	4823      	ldr	r0, [pc, #140]	; (8001918 <lx_stm32_ospi_write+0x138>)
 800188a:	f002 fa8d 	bl	8003da8 <HAL_OSPI_Command>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <lx_stm32_ospi_write+0xb8>
    {
      return 1;
 8001894:	2301      	movs	r3, #1
 8001896:	e03a      	b.n	800190e <lx_stm32_ospi_write+0x12e>
    }

    /* Transmission of the data */
    if (HAL_OSPI_Transmit_DMA(&hospi2, (uint8_t*)data_buffer) != HAL_OK)
 8001898:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800189a:	4619      	mov	r1, r3
 800189c:	481e      	ldr	r0, [pc, #120]	; (8001918 <lx_stm32_ospi_write+0x138>)
 800189e:	f002 fc27 	bl	80040f0 <HAL_OSPI_Transmit_DMA>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <lx_stm32_ospi_write+0xcc>
    {
      return 1;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e030      	b.n	800190e <lx_stm32_ospi_write+0x12e>
    }

    /* Check success of the transmission of the data */
    if(tx_semaphore_get(&ospi_tx_semaphore, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != TX_SUCCESS)
 80018ac:	f241 3188 	movw	r1, #5000	; 0x1388
 80018b0:	481a      	ldr	r0, [pc, #104]	; (800191c <lx_stm32_ospi_write+0x13c>)
 80018b2:	f017 ff1f 	bl	80196f4 <_txe_semaphore_get>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d001      	beq.n	80018c0 <lx_stm32_ospi_write+0xe0>
    {
     return 1;
 80018bc:	2301      	movs	r3, #1
 80018be:	e026      	b.n	800190e <lx_stm32_ospi_write+0x12e>
    }

    /* Configure automatic polling mode to wait for end of program */
    if (ospi_auto_polling_ready(&hospi2, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != 0)
 80018c0:	f241 3188 	movw	r1, #5000	; 0x1388
 80018c4:	4814      	ldr	r0, [pc, #80]	; (8001918 <lx_stm32_ospi_write+0x138>)
 80018c6:	f000 f955 	bl	8001b74 <ospi_auto_polling_ready>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <lx_stm32_ospi_write+0xf4>
    {
      return 1;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e01c      	b.n	800190e <lx_stm32_ospi_write+0x12e>
    }

    /* Update the address and data variables for next page programming */
    current_addr += current_size;
 80018d4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80018d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80018d8:	4413      	add	r3, r2
 80018da:	677b      	str	r3, [r7, #116]	; 0x74
    data_buffer += current_size;
 80018dc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80018de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80018e0:	4413      	add	r3, r2
 80018e2:	66fb      	str	r3, [r7, #108]	; 0x6c

    current_size = ((current_addr + LX_STM32_OSPI_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : LX_STM32_OSPI_PAGE_SIZE;
 80018e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80018e6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80018ea:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d203      	bcs.n	80018f8 <lx_stm32_ospi_write+0x118>
 80018f0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80018f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	e001      	b.n	80018fc <lx_stm32_ospi_write+0x11c>
 80018f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018fc:	673b      	str	r3, [r7, #112]	; 0x70
  } while (current_addr < end_addr);
 80018fe:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001900:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001902:	429a      	cmp	r2, r3
 8001904:	d3af      	bcc.n	8001866 <lx_stm32_ospi_write+0x86>

   /* Release ospi_transfer_semaphore in case of writing success */
    tx_semaphore_put(&ospi_tx_semaphore);
 8001906:	4805      	ldr	r0, [pc, #20]	; (800191c <lx_stm32_ospi_write+0x13c>)
 8001908:	f017 ff36 	bl	8019778 <_txe_semaphore_put>

  /* USER CODE BEGIN POST_OSPI_WRITE */

  /* USER CODE END POST_OSPI_WRITE */

  return status;
 800190c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
 800190e:	4618      	mov	r0, r3
 8001910:	3778      	adds	r7, #120	; 0x78
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	200025c4 	.word	0x200025c4
 800191c:	20015194 	.word	0x20015194

08001920 <lx_stm32_ospi_erase>:
* @param ULONG  erase_count the number of times the block was erased
* @param UINT full_chip_erase if set to 0 a single block is erased otherwise the whole flash is erased
* @retval 0 on Success 1 on Failure
*/
INT lx_stm32_ospi_erase(UINT instance, ULONG block, ULONG erase_count, UINT full_chip_erase)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b09a      	sub	sp, #104	; 0x68
 8001924:	af00      	add	r7, sp, #0
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	60b9      	str	r1, [r7, #8]
 800192a:	607a      	str	r2, [r7, #4]
 800192c:	603b      	str	r3, [r7, #0]
  INT status = 0;
 800192e:	2300      	movs	r3, #0
 8001930:	667b      	str	r3, [r7, #100]	; 0x64

  /* USER CODE END PRE_OSPI_ERASE */

  /* Initialize the erase command */

  s_command.OperationType         = HAL_OSPI_OPTYPE_COMMON_CFG;
 8001932:	2300      	movs	r3, #0
 8001934:	617b      	str	r3, [r7, #20]
  s_command.FlashId               = HAL_OSPI_FLASH_ID_1;
 8001936:	2300      	movs	r3, #0
 8001938:	61bb      	str	r3, [r7, #24]
  s_command.InstructionMode       = HAL_OSPI_INSTRUCTION_8_LINES;
 800193a:	2304      	movs	r3, #4
 800193c:	623b      	str	r3, [r7, #32]
  s_command.InstructionSize       = HAL_OSPI_INSTRUCTION_16_BITS;
 800193e:	2310      	movs	r3, #16
 8001940:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateBytesMode    = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8001942:	2300      	movs	r3, #0
 8001944:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode              = HAL_OSPI_DATA_NONE;
 8001946:	2300      	movs	r3, #0
 8001948:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DummyCycles           = 0;
 800194a:	2300      	movs	r3, #0
 800194c:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.DQSMode               = HAL_OSPI_DQS_DISABLE;
 800194e:	2300      	movs	r3, #0
 8001950:	65fb      	str	r3, [r7, #92]	; 0x5c
  s_command.SIOOMode              = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8001952:	2300      	movs	r3, #0
 8001954:	663b      	str	r3, [r7, #96]	; 0x60

  /* DTR mode is enabled */
  s_command.InstructionDtrMode    = HAL_OSPI_INSTRUCTION_DTR_ENABLE;
 8001956:	2308      	movs	r3, #8
 8001958:	62bb      	str	r3, [r7, #40]	; 0x28

  if(full_chip_erase)
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d005      	beq.n	800196c <lx_stm32_ospi_erase+0x4c>
  {
    s_command.Instruction         = LX_STM32_OSPI_OCTAL_BULK_ERASE_CMD;
 8001960:	f246 039f 	movw	r3, #24735	; 0x609f
 8001964:	61fb      	str	r3, [r7, #28]
    s_command.AddressMode         = HAL_OSPI_ADDRESS_NONE;
 8001966:	2300      	movs	r3, #0
 8001968:	633b      	str	r3, [r7, #48]	; 0x30
 800196a:	e00e      	b.n	800198a <lx_stm32_ospi_erase+0x6a>
  }
  else
  {
    s_command.Instruction         = LX_STM32_OSPI_OCTAL_SECTOR_ERASE_CMD;
 800196c:	f64d 4323 	movw	r3, #56355	; 0xdc23
 8001970:	61fb      	str	r3, [r7, #28]
    s_command.Address             = (block * LX_STM32_OSPI_SECTOR_SIZE);
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	041b      	lsls	r3, r3, #16
 8001976:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.AddressMode         = HAL_OSPI_ADDRESS_8_LINES;
 8001978:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800197c:	633b      	str	r3, [r7, #48]	; 0x30
    s_command.AddressSize         = HAL_OSPI_ADDRESS_32_BITS;
 800197e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001982:	637b      	str	r3, [r7, #52]	; 0x34
    s_command.AddressDtrMode      = HAL_OSPI_ADDRESS_DTR_ENABLE; /* DTR mode is enabled */
 8001984:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001988:	63bb      	str	r3, [r7, #56]	; 0x38
  /* USER CODE BEGIN OSPI_ERASE_CMD */

  /* USER CODE END OSPI_ERASE_CMD */

  /* Enable write operations */
  if (ospi_set_write_enable(&hospi2) != 0)
 800198a:	4811      	ldr	r0, [pc, #68]	; (80019d0 <lx_stm32_ospi_erase+0xb0>)
 800198c:	f000 f8b2 	bl	8001af4 <ospi_set_write_enable>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <lx_stm32_ospi_erase+0x7a>
  {
    return 1;
 8001996:	2301      	movs	r3, #1
 8001998:	e016      	b.n	80019c8 <lx_stm32_ospi_erase+0xa8>
  }

  /* Send the command */
  if (HAL_OSPI_Command(&hospi2, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800199a:	f107 0314 	add.w	r3, r7, #20
 800199e:	f241 3288 	movw	r2, #5000	; 0x1388
 80019a2:	4619      	mov	r1, r3
 80019a4:	480a      	ldr	r0, [pc, #40]	; (80019d0 <lx_stm32_ospi_erase+0xb0>)
 80019a6:	f002 f9ff 	bl	8003da8 <HAL_OSPI_Command>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <lx_stm32_ospi_erase+0x94>
  {
    return 1;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e009      	b.n	80019c8 <lx_stm32_ospi_erase+0xa8>
  }

  /* Configure automatic polling mode to wait for end of erase */
  if (ospi_auto_polling_ready(&hospi2, LX_STM32_OSPI_BULK_ERASE_MAX_TIME) != 0)
 80019b4:	4907      	ldr	r1, [pc, #28]	; (80019d4 <lx_stm32_ospi_erase+0xb4>)
 80019b6:	4806      	ldr	r0, [pc, #24]	; (80019d0 <lx_stm32_ospi_erase+0xb0>)
 80019b8:	f000 f8dc 	bl	8001b74 <ospi_auto_polling_ready>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <lx_stm32_ospi_erase+0xa6>
  {
    return 1;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e000      	b.n	80019c8 <lx_stm32_ospi_erase+0xa8>

  /* USER CODE BEGIN POST_OSPI_ERASE */

  /* USER CODE END POST_OSPI_ERASE */

  return status;
 80019c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3768      	adds	r7, #104	; 0x68
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	200025c4 	.word	0x200025c4
 80019d4:	000704e0 	.word	0x000704e0

080019d8 <lx_stm32_ospi_is_block_erased>:
* @param UINT instance OSPI instance
* @param ULONG  block the block to be checked
* @retval 0 on Success 1 on Failure
*/
INT lx_stm32_ospi_is_block_erased(UINT instance, ULONG block)
{
 80019d8:	b480      	push	{r7}
 80019da:	b085      	sub	sp, #20
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	6039      	str	r1, [r7, #0]
  INT status = 0;
 80019e2:	2300      	movs	r3, #0
 80019e4:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN OSPI_BLOCK_ERASED */

  /* USER CODE END OSPI_BLOCK_ERASED */

  return status;
 80019e6:	68fb      	ldr	r3, [r7, #12]
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3714      	adds	r7, #20
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <lx_ospi_driver_system_error>:
* @param UINT error_code Code of the concerned error.
* @retval UINT error code.
*/

UINT  lx_ospi_driver_system_error(UINT error_code)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b085      	sub	sp, #20
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  UINT status = LX_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN OSPI_SYSTEM_ERROR */

  /* USER CODE END OSPI_SYSTEM_ERROR */

  return status;
 8001a00:	68fb      	ldr	r3, [r7, #12]
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3714      	adds	r7, #20
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
	...

08001a10 <ospi_memory_reset>:
  * @brief  Reset the OSPI memory.
  * @param  hospi: OSPI handle pointer
  * @retval O on success 1 on Failure.
  */
static uint8_t ospi_memory_reset(OSPI_HandleTypeDef *hospi)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b09c      	sub	sp, #112	; 0x70
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  uint8_t status = 0;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

  OSPI_RegularCmdTypeDef s_command;
  OSPI_AutoPollingTypeDef s_config;

  /* Initialize the reset enable command */
  s_command.OperationType         = HAL_OSPI_OPTYPE_COMMON_CFG;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	61fb      	str	r3, [r7, #28]
  s_command.FlashId               = HAL_OSPI_FLASH_ID_1;
 8001a22:	2300      	movs	r3, #0
 8001a24:	623b      	str	r3, [r7, #32]
  s_command.Instruction           = LX_STM32_OSPI_RESET_ENABLE_CMD;
 8001a26:	2366      	movs	r3, #102	; 0x66
 8001a28:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionMode       = HAL_OSPI_INSTRUCTION_1_LINE;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.InstructionSize       = HAL_OSPI_INSTRUCTION_8_BITS;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.InstructionDtrMode    = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8001a32:	2300      	movs	r3, #0
 8001a34:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.AddressMode           = HAL_OSPI_ADDRESS_NONE;
 8001a36:	2300      	movs	r3, #0
 8001a38:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.AlternateBytesMode    = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataMode              = HAL_OSPI_DATA_NONE;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DummyCycles           = 0;
 8001a42:	2300      	movs	r3, #0
 8001a44:	663b      	str	r3, [r7, #96]	; 0x60
  s_command.DQSMode               = HAL_OSPI_DQS_DISABLE;
 8001a46:	2300      	movs	r3, #0
 8001a48:	667b      	str	r3, [r7, #100]	; 0x64
  s_command.SIOOMode              = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Send the command */
  if (HAL_OSPI_Command(&hospi2, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001a4e:	f107 031c 	add.w	r3, r7, #28
 8001a52:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a56:	4619      	mov	r1, r3
 8001a58:	4825      	ldr	r0, [pc, #148]	; (8001af0 <ospi_memory_reset+0xe0>)
 8001a5a:	f002 f9a5 	bl	8003da8 <HAL_OSPI_Command>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d001      	beq.n	8001a68 <ospi_memory_reset+0x58>
  {
    return 1;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e03f      	b.n	8001ae8 <ospi_memory_reset+0xd8>
  }

  /* Send the reset memory command */
  s_command.Instruction = LX_STM32_OSPI_RESET_MEMORY_CMD;
 8001a68:	2399      	movs	r3, #153	; 0x99
 8001a6a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_OSPI_Command(&hospi2, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001a6c:	f107 031c 	add.w	r3, r7, #28
 8001a70:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a74:	4619      	mov	r1, r3
 8001a76:	481e      	ldr	r0, [pc, #120]	; (8001af0 <ospi_memory_reset+0xe0>)
 8001a78:	f002 f996 	bl	8003da8 <HAL_OSPI_Command>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <ospi_memory_reset+0x76>
  {
    return 1;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e030      	b.n	8001ae8 <ospi_memory_reset+0xd8>
  }

  /* Configure automatic polling mode to wait the memory is ready */
  s_command.Instruction  = LX_STM32_OSPI_OCTAL_READ_STATUS_REG_CMD;
 8001a86:	f240 53fa 	movw	r3, #1530	; 0x5fa
 8001a8a:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.DataMode     = HAL_OSPI_DATA_1_LINE;
 8001a8c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a90:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.NbData       = 1;
 8001a92:	2301      	movs	r3, #1
 8001a94:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.DataDtrMode  = HAL_OSPI_DATA_DTR_DISABLE;
 8001a96:	2300      	movs	r3, #0
 8001a98:	65fb      	str	r3, [r7, #92]	; 0x5c

  s_config.Match         = 0;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	60bb      	str	r3, [r7, #8]
  s_config.Mask          = LX_STM32_OSPI_SR_WIP;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode     = HAL_OSPI_MATCH_MODE_AND;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	613b      	str	r3, [r7, #16]
  s_config.Interval      = 0x10;
 8001aa6:	2310      	movs	r3, #16
 8001aa8:	61bb      	str	r3, [r7, #24]
  s_config.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 8001aaa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001aae:	617b      	str	r3, [r7, #20]

  if (HAL_OSPI_Command(&hospi2, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001ab0:	f107 031c 	add.w	r3, r7, #28
 8001ab4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ab8:	4619      	mov	r1, r3
 8001aba:	480d      	ldr	r0, [pc, #52]	; (8001af0 <ospi_memory_reset+0xe0>)
 8001abc:	f002 f974 	bl	8003da8 <HAL_OSPI_Command>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <ospi_memory_reset+0xba>
  {
    return 1;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e00e      	b.n	8001ae8 <ospi_memory_reset+0xd8>
  }

  if (HAL_OSPI_AutoPolling(&hospi2, &s_config, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001aca:	f107 0308 	add.w	r3, r7, #8
 8001ace:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	4806      	ldr	r0, [pc, #24]	; (8001af0 <ospi_memory_reset+0xe0>)
 8001ad6:	f002 fd97 	bl	8004608 <HAL_OSPI_AutoPolling>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <ospi_memory_reset+0xd4>
  {
    return 1;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e001      	b.n	8001ae8 <ospi_memory_reset+0xd8>

  /* USER CODE BEGIN OSPI_MEMORY_RESET_CMD */

  /* USER CODE END OSPI_MEMORY_RESET_CMD */

  return status;
 8001ae4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3770      	adds	r7, #112	; 0x70
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	200025c4 	.word	0x200025c4

08001af4 <ospi_set_write_enable>:
  * @brief  Send a Write Enable command and wait its effective.
  * @param  hospi: OSPI handle pointer
  * @retval O on success 1 on Failure.
  */
static uint8_t ospi_set_write_enable(OSPI_HandleTypeDef *hospi)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b098      	sub	sp, #96	; 0x60
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  uint8_t status = 0;
 8001afc:	2300      	movs	r3, #0
 8001afe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

  OSPI_RegularCmdTypeDef  s_command;

  /* Enable write operations */
  s_command.OperationType         = HAL_OSPI_OPTYPE_COMMON_CFG;
 8001b02:	2300      	movs	r3, #0
 8001b04:	60fb      	str	r3, [r7, #12]
  s_command.FlashId               = HAL_OSPI_FLASH_ID_1;
 8001b06:	2300      	movs	r3, #0
 8001b08:	613b      	str	r3, [r7, #16]
  s_command.Instruction           = LX_STM32_OSPI_OCTAL_WRITE_ENABLE_CMD;
 8001b0a:	f240 63f9 	movw	r3, #1785	; 0x6f9
 8001b0e:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode       = HAL_OSPI_INSTRUCTION_8_LINES;
 8001b10:	2304      	movs	r3, #4
 8001b12:	61bb      	str	r3, [r7, #24]
  s_command.InstructionSize       = HAL_OSPI_INSTRUCTION_16_BITS;
 8001b14:	2310      	movs	r3, #16
 8001b16:	61fb      	str	r3, [r7, #28]
  s_command.AddressMode           = HAL_OSPI_ADDRESS_NONE;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AlternateBytesMode    = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DataMode              = HAL_OSPI_DATA_NONE;
 8001b20:	2300      	movs	r3, #0
 8001b22:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles           = 0;
 8001b24:	2300      	movs	r3, #0
 8001b26:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DQSMode               = HAL_OSPI_DQS_DISABLE;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.SIOOMode              = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	65bb      	str	r3, [r7, #88]	; 0x58

  /* DTR mode is enabled */
  s_command.InstructionDtrMode    = HAL_OSPI_INSTRUCTION_DTR_ENABLE;
 8001b30:	2308      	movs	r3, #8
 8001b32:	623b      	str	r3, [r7, #32]

  if (HAL_OSPI_Command(&hospi2, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001b34:	f107 030c 	add.w	r3, r7, #12
 8001b38:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	480c      	ldr	r0, [pc, #48]	; (8001b70 <ospi_set_write_enable+0x7c>)
 8001b40:	f002 f932 	bl	8003da8 <HAL_OSPI_Command>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <ospi_set_write_enable+0x5a>
  {
    return 1;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e00b      	b.n	8001b66 <ospi_set_write_enable+0x72>
  }

  if (ospi_auto_polling_ready(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != 0)
 8001b4e:	f241 3188 	movw	r1, #5000	; 0x1388
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f000 f80e 	bl	8001b74 <ospi_auto_polling_ready>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <ospi_set_write_enable+0x6e>
  {
    return 1;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e001      	b.n	8001b66 <ospi_set_write_enable+0x72>

 /* USER CODE BEGIN OSPI_WRITE_ENABLE_CMD */

 /* USER CODE END OSPI_WRITE_ENABLE_CMD */

  return status;
 8001b62:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3760      	adds	r7, #96	; 0x60
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	200025c4 	.word	0x200025c4

08001b74 <ospi_auto_polling_ready>:
  * @param  hospi: OSPI handle pointer
  * @param  timeout: timeout value before returning an error
  * @retval O on success 1 on Failure.
  */
static uint8_t ospi_auto_polling_ready(OSPI_HandleTypeDef *hospi, uint32_t timeout)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b09e      	sub	sp, #120	; 0x78
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
  uint8_t status = 0;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

  OSPI_RegularCmdTypeDef  s_command;
  OSPI_AutoPollingTypeDef s_config;
  uint8_t reg[2];
  uint32_t start = LX_STM32_OSPI_CURRENT_TIME();
 8001b84:	f017 f916 	bl	8018db4 <_tx_time_get>
 8001b88:	6738      	str	r0, [r7, #112]	; 0x70

  /* Configure automatic polling mode to wait for memory ready */
  s_command.OperationType         = HAL_OSPI_OPTYPE_COMMON_CFG;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	623b      	str	r3, [r7, #32]
  s_command.FlashId               = HAL_OSPI_FLASH_ID_1;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.Instruction           = LX_STM32_OSPI_OCTAL_READ_STATUS_REG_CMD;
 8001b92:	f240 53fa 	movw	r3, #1530	; 0x5fa
 8001b96:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.InstructionMode       = HAL_OSPI_INSTRUCTION_8_LINES;
 8001b98:	2304      	movs	r3, #4
 8001b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.InstructionSize       = HAL_OSPI_INSTRUCTION_16_BITS;
 8001b9c:	2310      	movs	r3, #16
 8001b9e:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.Address               = 0;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.AddressMode           = HAL_OSPI_ADDRESS_8_LINES;
 8001ba4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ba8:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AddressSize           = HAL_OSPI_ADDRESS_32_BITS;
 8001baa:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001bae:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.AlternateBytesMode    = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DataMode              = HAL_OSPI_DATA_8_LINES;
 8001bb4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001bb8:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.NbData                = 2;
 8001bba:	2302      	movs	r3, #2
 8001bbc:	65fb      	str	r3, [r7, #92]	; 0x5c
  s_command.DummyCycles           = LX_STM32_OSPI_DUMMY_CYCLES_READ_OCTAL;
 8001bbe:	2314      	movs	r3, #20
 8001bc0:	667b      	str	r3, [r7, #100]	; 0x64
  s_command.SIOOMode              = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DTR mode is enabled */
  s_command.InstructionDtrMode    = HAL_OSPI_INSTRUCTION_DTR_ENABLE;
 8001bc6:	2308      	movs	r3, #8
 8001bc8:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.AddressDtrMode        = HAL_OSPI_ADDRESS_DTR_ENABLE;
 8001bca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001bce:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DataDtrMode           = HAL_OSPI_DATA_DTR_ENABLE;
 8001bd0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001bd4:	663b      	str	r3, [r7, #96]	; 0x60
  s_command.DQSMode               = HAL_OSPI_DQS_ENABLE;
 8001bd6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001bda:	66bb      	str	r3, [r7, #104]	; 0x68

  s_config.Match           = 0;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	60fb      	str	r3, [r7, #12]
  s_config.Mask            = LX_STM32_OSPI_SR_WIP;
 8001be0:	2301      	movs	r3, #1
 8001be2:	613b      	str	r3, [r7, #16]

  while( LX_STM32_OSPI_CURRENT_TIME() - start < timeout)
 8001be4:	e024      	b.n	8001c30 <ospi_auto_polling_ready+0xbc>
  {
     if (HAL_OSPI_Command(&hospi2, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001be6:	f107 0320 	add.w	r3, r7, #32
 8001bea:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bee:	4619      	mov	r1, r3
 8001bf0:	4817      	ldr	r0, [pc, #92]	; (8001c50 <ospi_auto_polling_ready+0xdc>)
 8001bf2:	f002 f8d9 	bl	8003da8 <HAL_OSPI_Command>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d003      	beq.n	8001c04 <ospi_auto_polling_ready+0x90>
    {
      status = 1;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
      break;
 8001c02:	e01f      	b.n	8001c44 <ospi_auto_polling_ready+0xd0>
    }

    if (HAL_OSPI_Receive(&hospi2, reg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001c04:	f107 0308 	add.w	r3, r7, #8
 8001c08:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	4810      	ldr	r0, [pc, #64]	; (8001c50 <ospi_auto_polling_ready+0xdc>)
 8001c10:	f002 f9ca 	bl	8003fa8 <HAL_OSPI_Receive>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d003      	beq.n	8001c22 <ospi_auto_polling_ready+0xae>
    {
      status = 1;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
      break;
 8001c20:	e010      	b.n	8001c44 <ospi_auto_polling_ready+0xd0>
    }
    /* the Memory is ready, break from the loop */
    if ((reg[0] & s_config.Mask ) == s_config.Match)
 8001c22:	7a3b      	ldrb	r3, [r7, #8]
 8001c24:	461a      	mov	r2, r3
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	401a      	ands	r2, r3
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d008      	beq.n	8001c42 <ospi_auto_polling_ready+0xce>
  while( LX_STM32_OSPI_CURRENT_TIME() - start < timeout)
 8001c30:	f017 f8c0 	bl	8018db4 <_tx_time_get>
 8001c34:	4602      	mov	r2, r0
 8001c36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	683a      	ldr	r2, [r7, #0]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d8d2      	bhi.n	8001be6 <ospi_auto_polling_ready+0x72>
 8001c40:	e000      	b.n	8001c44 <ospi_auto_polling_ready+0xd0>
    {
      break;
 8001c42:	bf00      	nop
  }

  /* USER CODE BEGIN OSPI_AUTO_POLLING_READY */

  /* USER CODE END OSPI_AUTO_POLLING_READY */
  return status;
 8001c44:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3778      	adds	r7, #120	; 0x78
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	200025c4 	.word	0x200025c4

08001c54 <ospi_set_octal_mode>:
  * @brief  This function enables the octal mode of the memory.
  * @param  hospi: OSPI handle
  * @retval 0 on success 1 on Failure.
  */
static uint8_t ospi_set_octal_mode(OSPI_HandleTypeDef *hospi)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b09e      	sub	sp, #120	; 0x78
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  int status = 0;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	677b      	str	r3, [r7, #116]	; 0x74

  OSPI_RegularCmdTypeDef  s_command;
  OSPI_AutoPollingTypeDef s_config;
  uint8_t reg[2];

  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8001c60:	2300      	movs	r3, #0
 8001c62:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 8001c64:	2300      	movs	r3, #0
 8001c66:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8001c6c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001c70:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 8001c72:	2300      	movs	r3, #0
 8001c74:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8001c76:	2300      	movs	r3, #0
 8001c78:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	667b      	str	r3, [r7, #100]	; 0x64
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	66fb      	str	r3, [r7, #108]	; 0x6c
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8001c82:	2300      	movs	r3, #0
 8001c84:	673b      	str	r3, [r7, #112]	; 0x70

  s_config.MatchMode     = HAL_OSPI_MATCH_MODE_AND;
 8001c86:	2300      	movs	r3, #0
 8001c88:	61bb      	str	r3, [r7, #24]
  s_config.Interval      = 0x10;
 8001c8a:	2310      	movs	r3, #16
 8001c8c:	623b      	str	r3, [r7, #32]
  s_config.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 8001c8e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c92:	61fb      	str	r3, [r7, #28]

  /* Activate the Octal mode */

  s_command.Instruction     = LX_STM32_OSPI_WRITE_ENABLE_CMD;
 8001c94:	2306      	movs	r3, #6
 8001c96:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.InstructionMode = HAL_OSPI_INSTRUCTION_1_LINE;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.InstructionSize = HAL_OSPI_INSTRUCTION_8_BITS;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.AddressMode     = HAL_OSPI_ADDRESS_NONE;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode        = HAL_OSPI_DATA_NONE;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	65fb      	str	r3, [r7, #92]	; 0x5c
  s_command.DummyCycles     = 0;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	66bb      	str	r3, [r7, #104]	; 0x68
  /* Add a short delay to let the IP settle before starting the command */
  HAL_Delay(1);
 8001cac:	2001      	movs	r0, #1
 8001cae:	f000 f9c7 	bl	8002040 <HAL_Delay>

  if (HAL_OSPI_Command(&hospi2, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001cb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cba:	4619      	mov	r1, r3
 8001cbc:	4879      	ldr	r0, [pc, #484]	; (8001ea4 <ospi_set_octal_mode+0x250>)
 8001cbe:	f002 f873 	bl	8003da8 <HAL_OSPI_Command>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <ospi_set_octal_mode+0x78>
  {
    return 1;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e0e6      	b.n	8001e9a <ospi_set_octal_mode+0x246>
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match = LX_STM32_OSPI_SR_WEL;
 8001ccc:	2302      	movs	r3, #2
 8001cce:	613b      	str	r3, [r7, #16]
  s_config.Mask  = LX_STM32_OSPI_SR_WEL;
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	617b      	str	r3, [r7, #20]

  s_command.Instruction = LX_STM32_OSPI_READ_STATUS_REG_CMD;
 8001cd4:	2305      	movs	r3, #5
 8001cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DataMode    = HAL_OSPI_DATA_1_LINE;
 8001cd8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001cdc:	65fb      	str	r3, [r7, #92]	; 0x5c
  s_command.NbData      = 1;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	663b      	str	r3, [r7, #96]	; 0x60

  if (HAL_OSPI_Command(&hospi2, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001ce2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ce6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cea:	4619      	mov	r1, r3
 8001cec:	486d      	ldr	r0, [pc, #436]	; (8001ea4 <ospi_set_octal_mode+0x250>)
 8001cee:	f002 f85b 	bl	8003da8 <HAL_OSPI_Command>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d001      	beq.n	8001cfc <ospi_set_octal_mode+0xa8>
  {
    return 1;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e0ce      	b.n	8001e9a <ospi_set_octal_mode+0x246>
  }

  if (HAL_OSPI_AutoPolling(&hospi2, &s_config, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001cfc:	f107 0310 	add.w	r3, r7, #16
 8001d00:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d04:	4619      	mov	r1, r3
 8001d06:	4867      	ldr	r0, [pc, #412]	; (8001ea4 <ospi_set_octal_mode+0x250>)
 8001d08:	f002 fc7e 	bl	8004608 <HAL_OSPI_AutoPolling>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <ospi_set_octal_mode+0xc2>
  {
    return 1;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e0c1      	b.n	8001e9a <ospi_set_octal_mode+0x246>
  }

  /* Write Configuration register 2 (with new dummy cycles) */

  s_command.Instruction = LX_STM32_OSPI_WRITE_CFG_REG2_CMD;
 8001d16:	2372      	movs	r3, #114	; 0x72
 8001d18:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.Address     = LX_STM32_OSPI_CR2_REG3_ADDR;
 8001d1a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AddressMode = HAL_OSPI_ADDRESS_1_LINE;
 8001d20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d24:	643b      	str	r3, [r7, #64]	; 0x40

  reg[0] = LX_STM32_OSPI_DUMMY_CYCLES_CR_CFG;
 8001d26:	2307      	movs	r3, #7
 8001d28:	733b      	strb	r3, [r7, #12]

  if (HAL_OSPI_Command(&hospi2, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001d2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d32:	4619      	mov	r1, r3
 8001d34:	485b      	ldr	r0, [pc, #364]	; (8001ea4 <ospi_set_octal_mode+0x250>)
 8001d36:	f002 f837 	bl	8003da8 <HAL_OSPI_Command>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d001      	beq.n	8001d44 <ospi_set_octal_mode+0xf0>
  {
    return 1;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e0aa      	b.n	8001e9a <ospi_set_octal_mode+0x246>
  }

  if (HAL_OSPI_Transmit(&hospi2, reg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001d44:	f107 030c 	add.w	r3, r7, #12
 8001d48:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	4855      	ldr	r0, [pc, #340]	; (8001ea4 <ospi_set_octal_mode+0x250>)
 8001d50:	f002 f8b7 	bl	8003ec2 <HAL_OSPI_Transmit>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <ospi_set_octal_mode+0x10a>
  {
    return 1;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e09d      	b.n	8001e9a <ospi_set_octal_mode+0x246>
  }

  /* Enable write operations */

  s_command.Instruction = LX_STM32_OSPI_WRITE_ENABLE_CMD;
 8001d5e:	2306      	movs	r3, #6
 8001d60:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressMode = HAL_OSPI_ADDRESS_NONE;
 8001d62:	2300      	movs	r3, #0
 8001d64:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode    = HAL_OSPI_DATA_NONE;
 8001d66:	2300      	movs	r3, #0
 8001d68:	65fb      	str	r3, [r7, #92]	; 0x5c

  if (HAL_OSPI_Command(&hospi2, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001d6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d72:	4619      	mov	r1, r3
 8001d74:	484b      	ldr	r0, [pc, #300]	; (8001ea4 <ospi_set_octal_mode+0x250>)
 8001d76:	f002 f817 	bl	8003da8 <HAL_OSPI_Command>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <ospi_set_octal_mode+0x130>
  {
    return 1;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e08a      	b.n	8001e9a <ospi_set_octal_mode+0x246>
  }

  /* Configure automatic polling mode to wait for write enabling */

  s_command.Instruction = LX_STM32_OSPI_READ_STATUS_REG_CMD;
 8001d84:	2305      	movs	r3, #5
 8001d86:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DataMode    = HAL_OSPI_DATA_1_LINE;
 8001d88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d8c:	65fb      	str	r3, [r7, #92]	; 0x5c

  if (HAL_OSPI_Command(&hospi2, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001d8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d92:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d96:	4619      	mov	r1, r3
 8001d98:	4842      	ldr	r0, [pc, #264]	; (8001ea4 <ospi_set_octal_mode+0x250>)
 8001d9a:	f002 f805 	bl	8003da8 <HAL_OSPI_Command>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <ospi_set_octal_mode+0x154>
  {
    return 1;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e078      	b.n	8001e9a <ospi_set_octal_mode+0x246>
  }

  if (HAL_OSPI_AutoPolling(&hospi2, &s_config, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001da8:	f107 0310 	add.w	r3, r7, #16
 8001dac:	f241 3288 	movw	r2, #5000	; 0x1388
 8001db0:	4619      	mov	r1, r3
 8001db2:	483c      	ldr	r0, [pc, #240]	; (8001ea4 <ospi_set_octal_mode+0x250>)
 8001db4:	f002 fc28 	bl	8004608 <HAL_OSPI_AutoPolling>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <ospi_set_octal_mode+0x16e>
  {
    return 1;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e06b      	b.n	8001e9a <ospi_set_octal_mode+0x246>
  }

  /* Write Configuration register 2 (with Octal I/O SPI protocol) */

  s_command.Instruction = LX_STM32_OSPI_WRITE_CFG_REG2_CMD;
 8001dc2:	2372      	movs	r3, #114	; 0x72
 8001dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.Address     = LX_STM32_OSPI_CR2_REG1_ADDR;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AddressMode = HAL_OSPI_ADDRESS_1_LINE;
 8001dca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001dce:	643b      	str	r3, [r7, #64]	; 0x40

  /* DTR mode is enabled */

  reg[0] = LX_STM32_OSPI_CR2_DOPI;
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	733b      	strb	r3, [r7, #12]

  if (HAL_OSPI_Command(&hospi2, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001dd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ddc:	4619      	mov	r1, r3
 8001dde:	4831      	ldr	r0, [pc, #196]	; (8001ea4 <ospi_set_octal_mode+0x250>)
 8001de0:	f001 ffe2 	bl	8003da8 <HAL_OSPI_Command>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <ospi_set_octal_mode+0x19a>
  {
    return 1;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e055      	b.n	8001e9a <ospi_set_octal_mode+0x246>
  }

  if (HAL_OSPI_Transmit(&hospi2, reg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001dee:	f107 030c 	add.w	r3, r7, #12
 8001df2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001df6:	4619      	mov	r1, r3
 8001df8:	482a      	ldr	r0, [pc, #168]	; (8001ea4 <ospi_set_octal_mode+0x250>)
 8001dfa:	f002 f862 	bl	8003ec2 <HAL_OSPI_Transmit>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <ospi_set_octal_mode+0x1b4>
  {
    return 1;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e048      	b.n	8001e9a <ospi_set_octal_mode+0x246>
  }

  if (ospi_auto_polling_ready(&hospi2, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != 0)
 8001e08:	f241 3188 	movw	r1, #5000	; 0x1388
 8001e0c:	4825      	ldr	r0, [pc, #148]	; (8001ea4 <ospi_set_octal_mode+0x250>)
 8001e0e:	f7ff feb1 	bl	8001b74 <ospi_auto_polling_ready>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d001      	beq.n	8001e1c <ospi_set_octal_mode+0x1c8>
  {
    return 1;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e03e      	b.n	8001e9a <ospi_set_octal_mode+0x246>
  }

  /* Check the configuration has been correctly done */
  s_command.Instruction     = LX_STM32_OSPI_OCTAL_READ_CFG_REG2_CMD;
 8001e1c:	f247 138e 	movw	r3, #29070	; 0x718e
 8001e20:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.InstructionMode = HAL_OSPI_INSTRUCTION_8_LINES;
 8001e22:	2304      	movs	r3, #4
 8001e24:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.InstructionSize = HAL_OSPI_INSTRUCTION_16_BITS;
 8001e26:	2310      	movs	r3, #16
 8001e28:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.AddressMode     = HAL_OSPI_ADDRESS_8_LINES;
 8001e2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e2e:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode        = HAL_OSPI_DATA_8_LINES;
 8001e30:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001e34:	65fb      	str	r3, [r7, #92]	; 0x5c
  s_command.DummyCycles     = LX_STM32_OSPI_DUMMY_CYCLES_READ_OCTAL;
 8001e36:	2314      	movs	r3, #20
 8001e38:	66bb      	str	r3, [r7, #104]	; 0x68
  s_command.NbData          = 2;
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	663b      	str	r3, [r7, #96]	; 0x60
  reg[0] = 0;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	733b      	strb	r3, [r7, #12]

  s_command.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_ENABLE;
 8001e42:	2308      	movs	r3, #8
 8001e44:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_ENABLE;
 8001e46:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001e4a:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataDtrMode        = HAL_OSPI_DATA_DTR_ENABLE;
 8001e4c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001e50:	667b      	str	r3, [r7, #100]	; 0x64
  s_command.DQSMode            = HAL_OSPI_DQS_ENABLE;
 8001e52:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001e56:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_OSPI_Command(&hospi2, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001e58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e60:	4619      	mov	r1, r3
 8001e62:	4810      	ldr	r0, [pc, #64]	; (8001ea4 <ospi_set_octal_mode+0x250>)
 8001e64:	f001 ffa0 	bl	8003da8 <HAL_OSPI_Command>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <ospi_set_octal_mode+0x21e>
  {
    return 1;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e013      	b.n	8001e9a <ospi_set_octal_mode+0x246>
  }

  if (HAL_OSPI_Receive(&hospi2, reg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001e72:	f107 030c 	add.w	r3, r7, #12
 8001e76:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	4809      	ldr	r0, [pc, #36]	; (8001ea4 <ospi_set_octal_mode+0x250>)
 8001e7e:	f002 f893 	bl	8003fa8 <HAL_OSPI_Receive>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <ospi_set_octal_mode+0x238>
  {
    return 1;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e006      	b.n	8001e9a <ospi_set_octal_mode+0x246>
  }

  /* DTR mode is enabled */
  if (reg[0] != LX_STM32_OSPI_CR2_DOPI)
 8001e8c:	7b3b      	ldrb	r3, [r7, #12]
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d001      	beq.n	8001e96 <ospi_set_octal_mode+0x242>
  {
    return 1;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e001      	b.n	8001e9a <ospi_set_octal_mode+0x246>

  /* USER CODE BEGIN OSPI_OCTALMODE_CMD */

  /* USER CODE END  OSPI_OCTALMODE_CMD */

  return status;
 8001e96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e98:	b2db      	uxtb	r3, r3
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3778      	adds	r7, #120	; 0x78
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	200025c4 	.word	0x200025c4

08001ea8 <HAL_OSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callbacks.
  * @param  hospi OSPI handle
  * @retval None
  */
void HAL_OSPI_RxCpltCallback(OSPI_HandleTypeDef *hospi)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PRE_RX_CMPLT */

  /* USER CODE END PRE_RX_CMPLT */

  tx_semaphore_put(&ospi_rx_semaphore);
 8001eb0:	4803      	ldr	r0, [pc, #12]	; (8001ec0 <HAL_OSPI_RxCpltCallback+0x18>)
 8001eb2:	f017 fc61 	bl	8019778 <_txe_semaphore_put>

  /* USER CODE BEGIN POST_RX_CMPLT */

  /* USER CODE END POST_RX_CMPLT */
}
 8001eb6:	bf00      	nop
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	20015178 	.word	0x20015178

08001ec4 <HAL_OSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callbacks.
  * @param  hospi OSPI handle
  * @retval None
  */
void HAL_OSPI_TxCpltCallback(OSPI_HandleTypeDef *hospi)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PRE_TX_CMPLT */

  /* USER CODE END PRE_TX_CMPLT */

  tx_semaphore_put(&ospi_tx_semaphore);
 8001ecc:	4803      	ldr	r0, [pc, #12]	; (8001edc <HAL_OSPI_TxCpltCallback+0x18>)
 8001ece:	f017 fc53 	bl	8019778 <_txe_semaphore_put>

  /* USER CODE BEGIN POST_TX_CMPLT */

  /* USER CODE END POST_TX_CMPLT */
}
 8001ed2:	bf00      	nop
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	20015194 	.word	0x20015194

08001ee0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001ee0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f18 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001ee4:	f000 f826 	bl	8001f34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001ee8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001eea:	e003      	b.n	8001ef4 <LoopCopyDataInit>

08001eec <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001eec:	4b0b      	ldr	r3, [pc, #44]	; (8001f1c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001eee:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001ef0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001ef2:	3104      	adds	r1, #4

08001ef4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001ef4:	480a      	ldr	r0, [pc, #40]	; (8001f20 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001ef6:	4b0b      	ldr	r3, [pc, #44]	; (8001f24 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001ef8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001efa:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001efc:	d3f6      	bcc.n	8001eec <CopyDataInit>
	ldr	r2, =_sbss
 8001efe:	4a0a      	ldr	r2, [pc, #40]	; (8001f28 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001f00:	e002      	b.n	8001f08 <LoopFillZerobss>

08001f02 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001f02:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001f04:	f842 3b04 	str.w	r3, [r2], #4

08001f08 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001f08:	4b08      	ldr	r3, [pc, #32]	; (8001f2c <LoopForever+0x16>)
	cmp	r2, r3
 8001f0a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001f0c:	d3f9      	bcc.n	8001f02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f0e:	f017 fe81 	bl	8019c14 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f12:	f7fe fcb4 	bl	800087e <main>

08001f16 <LoopForever>:

LoopForever:
    b LoopForever
 8001f16:	e7fe      	b.n	8001f16 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001f18:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8001f1c:	0801ac80 	.word	0x0801ac80
	ldr	r0, =_sdata
 8001f20:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001f24:	2000113c 	.word	0x2000113c
	ldr	r2, =_sbss
 8001f28:	20001140 	.word	0x20001140
	ldr	r3, = _ebss
 8001f2c:	200159a0 	.word	0x200159a0

08001f30 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f30:	e7fe      	b.n	8001f30 <ADC1_IRQHandler>
	...

08001f34 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001f38:	4b18      	ldr	r3, [pc, #96]	; (8001f9c <SystemInit+0x68>)
 8001f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f3e:	4a17      	ldr	r2, [pc, #92]	; (8001f9c <SystemInit+0x68>)
 8001f40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8001f48:	4b15      	ldr	r3, [pc, #84]	; (8001fa0 <SystemInit+0x6c>)
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001f4e:	4b14      	ldr	r3, [pc, #80]	; (8001fa0 <SystemInit+0x6c>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001f54:	4b12      	ldr	r3, [pc, #72]	; (8001fa0 <SystemInit+0x6c>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8001f5a:	4b11      	ldr	r3, [pc, #68]	; (8001fa0 <SystemInit+0x6c>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8001f60:	4b0f      	ldr	r3, [pc, #60]	; (8001fa0 <SystemInit+0x6c>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a0e      	ldr	r2, [pc, #56]	; (8001fa0 <SystemInit+0x6c>)
 8001f66:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001f6a:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001f6e:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8001f70:	4b0b      	ldr	r3, [pc, #44]	; (8001fa0 <SystemInit+0x6c>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001f76:	4b0a      	ldr	r3, [pc, #40]	; (8001fa0 <SystemInit+0x6c>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a09      	ldr	r2, [pc, #36]	; (8001fa0 <SystemInit+0x6c>)
 8001f7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f80:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001f82:	4b07      	ldr	r3, [pc, #28]	; (8001fa0 <SystemInit+0x6c>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001f88:	4b04      	ldr	r3, [pc, #16]	; (8001f9c <SystemInit+0x68>)
 8001f8a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f8e:	609a      	str	r2, [r3, #8]
  #endif
}
 8001f90:	bf00      	nop
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	e000ed00 	.word	0xe000ed00
 8001fa0:	46020c00 	.word	0x46020c00

08001fa4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fa8:	4b11      	ldr	r3, [pc, #68]	; (8001ff0 <HAL_Init+0x4c>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a10      	ldr	r2, [pc, #64]	; (8001ff0 <HAL_Init+0x4c>)
 8001fae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fb4:	2003      	movs	r0, #3
 8001fb6:	f000 f938 	bl	800222a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001fba:	f004 ff07 	bl	8006dcc <HAL_RCC_GetSysClockFreq>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	4b0c      	ldr	r3, [pc, #48]	; (8001ff4 <HAL_Init+0x50>)
 8001fc2:	6a1b      	ldr	r3, [r3, #32]
 8001fc4:	f003 030f 	and.w	r3, r3, #15
 8001fc8:	490b      	ldr	r1, [pc, #44]	; (8001ff8 <HAL_Init+0x54>)
 8001fca:	5ccb      	ldrb	r3, [r1, r3]
 8001fcc:	fa22 f303 	lsr.w	r3, r2, r3
 8001fd0:	4a0a      	ldr	r2, [pc, #40]	; (8001ffc <HAL_Init+0x58>)
 8001fd2:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001fd4:	200f      	movs	r0, #15
 8001fd6:	f7ff f83b 	bl	8001050 <HAL_InitTick>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d001      	beq.n	8001fe4 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e002      	b.n	8001fea <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001fe4:	f7fe fe5e 	bl	8000ca4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fe8:	2300      	movs	r3, #0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	40022000 	.word	0x40022000
 8001ff4:	46020c00 	.word	0x46020c00
 8001ff8:	0801ab3c 	.word	0x0801ab3c
 8001ffc:	20000000 	.word	0x20000000

08002000 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002004:	4b06      	ldr	r3, [pc, #24]	; (8002020 <HAL_IncTick+0x20>)
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	461a      	mov	r2, r3
 800200a:	4b06      	ldr	r3, [pc, #24]	; (8002024 <HAL_IncTick+0x24>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4413      	add	r3, r2
 8002010:	4a04      	ldr	r2, [pc, #16]	; (8002024 <HAL_IncTick+0x24>)
 8002012:	6013      	str	r3, [r2, #0]
}
 8002014:	bf00      	nop
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	20000008 	.word	0x20000008
 8002024:	200151b0 	.word	0x200151b0

08002028 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  return uwTick;
 800202c:	4b03      	ldr	r3, [pc, #12]	; (800203c <HAL_GetTick+0x14>)
 800202e:	681b      	ldr	r3, [r3, #0]
}
 8002030:	4618      	mov	r0, r3
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	200151b0 	.word	0x200151b0

08002040 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002048:	f7ff ffee 	bl	8002028 <HAL_GetTick>
 800204c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002058:	d005      	beq.n	8002066 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800205a:	4b0a      	ldr	r3, [pc, #40]	; (8002084 <HAL_Delay+0x44>)
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	461a      	mov	r2, r3
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	4413      	add	r3, r2
 8002064:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002066:	bf00      	nop
 8002068:	f7ff ffde 	bl	8002028 <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	68fa      	ldr	r2, [r7, #12]
 8002074:	429a      	cmp	r2, r3
 8002076:	d8f7      	bhi.n	8002068 <HAL_Delay+0x28>
  {
  }
}
 8002078:	bf00      	nop
 800207a:	bf00      	nop
 800207c:	3710      	adds	r7, #16
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	20000008 	.word	0x20000008

08002088 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002088:	b480      	push	{r7}
 800208a:	b085      	sub	sp, #20
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	f003 0307 	and.w	r3, r3, #7
 8002096:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002098:	4b0c      	ldr	r3, [pc, #48]	; (80020cc <__NVIC_SetPriorityGrouping+0x44>)
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800209e:	68ba      	ldr	r2, [r7, #8]
 80020a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020a4:	4013      	ands	r3, r2
 80020a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020ba:	4a04      	ldr	r2, [pc, #16]	; (80020cc <__NVIC_SetPriorityGrouping+0x44>)
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	60d3      	str	r3, [r2, #12]
}
 80020c0:	bf00      	nop
 80020c2:	3714      	adds	r7, #20
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr
 80020cc:	e000ed00 	.word	0xe000ed00

080020d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020d4:	4b04      	ldr	r3, [pc, #16]	; (80020e8 <__NVIC_GetPriorityGrouping+0x18>)
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	0a1b      	lsrs	r3, r3, #8
 80020da:	f003 0307 	and.w	r3, r3, #7
}
 80020de:	4618      	mov	r0, r3
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr
 80020e8:	e000ed00 	.word	0xe000ed00

080020ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	4603      	mov	r3, r0
 80020f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	db0b      	blt.n	8002116 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020fe:	79fb      	ldrb	r3, [r7, #7]
 8002100:	f003 021f 	and.w	r2, r3, #31
 8002104:	4907      	ldr	r1, [pc, #28]	; (8002124 <__NVIC_EnableIRQ+0x38>)
 8002106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800210a:	095b      	lsrs	r3, r3, #5
 800210c:	2001      	movs	r0, #1
 800210e:	fa00 f202 	lsl.w	r2, r0, r2
 8002112:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002116:	bf00      	nop
 8002118:	370c      	adds	r7, #12
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	e000e100 	.word	0xe000e100

08002128 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	4603      	mov	r3, r0
 8002130:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002136:	2b00      	cmp	r3, #0
 8002138:	db12      	blt.n	8002160 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800213a:	79fb      	ldrb	r3, [r7, #7]
 800213c:	f003 021f 	and.w	r2, r3, #31
 8002140:	490a      	ldr	r1, [pc, #40]	; (800216c <__NVIC_DisableIRQ+0x44>)
 8002142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002146:	095b      	lsrs	r3, r3, #5
 8002148:	2001      	movs	r0, #1
 800214a:	fa00 f202 	lsl.w	r2, r0, r2
 800214e:	3320      	adds	r3, #32
 8002150:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002154:	f3bf 8f4f 	dsb	sy
}
 8002158:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800215a:	f3bf 8f6f 	isb	sy
}
 800215e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr
 800216c:	e000e100 	.word	0xe000e100

08002170 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	4603      	mov	r3, r0
 8002178:	6039      	str	r1, [r7, #0]
 800217a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800217c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002180:	2b00      	cmp	r3, #0
 8002182:	db0a      	blt.n	800219a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	b2da      	uxtb	r2, r3
 8002188:	490c      	ldr	r1, [pc, #48]	; (80021bc <__NVIC_SetPriority+0x4c>)
 800218a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800218e:	0112      	lsls	r2, r2, #4
 8002190:	b2d2      	uxtb	r2, r2
 8002192:	440b      	add	r3, r1
 8002194:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002198:	e00a      	b.n	80021b0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	b2da      	uxtb	r2, r3
 800219e:	4908      	ldr	r1, [pc, #32]	; (80021c0 <__NVIC_SetPriority+0x50>)
 80021a0:	79fb      	ldrb	r3, [r7, #7]
 80021a2:	f003 030f 	and.w	r3, r3, #15
 80021a6:	3b04      	subs	r3, #4
 80021a8:	0112      	lsls	r2, r2, #4
 80021aa:	b2d2      	uxtb	r2, r2
 80021ac:	440b      	add	r3, r1
 80021ae:	761a      	strb	r2, [r3, #24]
}
 80021b0:	bf00      	nop
 80021b2:	370c      	adds	r7, #12
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr
 80021bc:	e000e100 	.word	0xe000e100
 80021c0:	e000ed00 	.word	0xe000ed00

080021c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b089      	sub	sp, #36	; 0x24
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	f003 0307 	and.w	r3, r3, #7
 80021d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	f1c3 0307 	rsb	r3, r3, #7
 80021de:	2b04      	cmp	r3, #4
 80021e0:	bf28      	it	cs
 80021e2:	2304      	movcs	r3, #4
 80021e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	3304      	adds	r3, #4
 80021ea:	2b06      	cmp	r3, #6
 80021ec:	d902      	bls.n	80021f4 <NVIC_EncodePriority+0x30>
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	3b03      	subs	r3, #3
 80021f2:	e000      	b.n	80021f6 <NVIC_EncodePriority+0x32>
 80021f4:	2300      	movs	r3, #0
 80021f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002202:	43da      	mvns	r2, r3
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	401a      	ands	r2, r3
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800220c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	fa01 f303 	lsl.w	r3, r1, r3
 8002216:	43d9      	mvns	r1, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800221c:	4313      	orrs	r3, r2
         );
}
 800221e:	4618      	mov	r0, r3
 8002220:	3724      	adds	r7, #36	; 0x24
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr

0800222a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800222a:	b580      	push	{r7, lr}
 800222c:	b082      	sub	sp, #8
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f7ff ff28 	bl	8002088 <__NVIC_SetPriorityGrouping>
}
 8002238:	bf00      	nop
 800223a:	3708      	adds	r7, #8
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}

08002240 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b086      	sub	sp, #24
 8002244:	af00      	add	r7, sp, #0
 8002246:	4603      	mov	r3, r0
 8002248:	60b9      	str	r1, [r7, #8]
 800224a:	607a      	str	r2, [r7, #4]
 800224c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800224e:	f7ff ff3f 	bl	80020d0 <__NVIC_GetPriorityGrouping>
 8002252:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	68b9      	ldr	r1, [r7, #8]
 8002258:	6978      	ldr	r0, [r7, #20]
 800225a:	f7ff ffb3 	bl	80021c4 <NVIC_EncodePriority>
 800225e:	4602      	mov	r2, r0
 8002260:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002264:	4611      	mov	r1, r2
 8002266:	4618      	mov	r0, r3
 8002268:	f7ff ff82 	bl	8002170 <__NVIC_SetPriority>
}
 800226c:	bf00      	nop
 800226e:	3718      	adds	r7, #24
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}

08002274 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	4603      	mov	r3, r0
 800227c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800227e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002282:	4618      	mov	r0, r3
 8002284:	f7ff ff32 	bl	80020ec <__NVIC_EnableIRQ>
}
 8002288:	bf00      	nop
 800228a:	3708      	adds	r7, #8
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}

08002290 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	4603      	mov	r3, r0
 8002298:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800229a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800229e:	4618      	mov	r0, r3
 80022a0:	f7ff ff42 	bl	8002128 <__NVIC_DisableIRQ>
}
 80022a4:	bf00      	nop
 80022a6:	3708      	adds	r7, #8
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}

080022ac <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 80022b4:	f7ff feb8 	bl	8002028 <HAL_GetTick>
 80022b8:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d101      	bne.n	80022c4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e0df      	b.n	8002484 <HAL_DMA_Init+0x1d8>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
  if ((hdma->Init.Direction == DMA_MEMORY_TO_PERIPH) || (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY))
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
  assert_param(IS_DMA_DESTINATION_DATA_WIDTH(hdma->Init.DestDataWidth));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  assert_param(IS_DMA_TCEM_EVENT_MODE(hdma->Init.TransferEventMode));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a6e      	ldr	r2, [pc, #440]	; (800248c <HAL_DMA_Init+0x1e0>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	f000 809f 	beq.w	8002416 <HAL_DMA_Init+0x16a>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a6c      	ldr	r2, [pc, #432]	; (8002490 <HAL_DMA_Init+0x1e4>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	f000 8099 	beq.w	8002416 <HAL_DMA_Init+0x16a>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a6a      	ldr	r2, [pc, #424]	; (8002494 <HAL_DMA_Init+0x1e8>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	f000 8093 	beq.w	8002416 <HAL_DMA_Init+0x16a>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a68      	ldr	r2, [pc, #416]	; (8002498 <HAL_DMA_Init+0x1ec>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	f000 808d 	beq.w	8002416 <HAL_DMA_Init+0x16a>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a66      	ldr	r2, [pc, #408]	; (800249c <HAL_DMA_Init+0x1f0>)
 8002302:	4293      	cmp	r3, r2
 8002304:	f000 8087 	beq.w	8002416 <HAL_DMA_Init+0x16a>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a64      	ldr	r2, [pc, #400]	; (80024a0 <HAL_DMA_Init+0x1f4>)
 800230e:	4293      	cmp	r3, r2
 8002310:	f000 8081 	beq.w	8002416 <HAL_DMA_Init+0x16a>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a62      	ldr	r2, [pc, #392]	; (80024a4 <HAL_DMA_Init+0x1f8>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d07b      	beq.n	8002416 <HAL_DMA_Init+0x16a>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a61      	ldr	r2, [pc, #388]	; (80024a8 <HAL_DMA_Init+0x1fc>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d076      	beq.n	8002416 <HAL_DMA_Init+0x16a>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a5f      	ldr	r2, [pc, #380]	; (80024ac <HAL_DMA_Init+0x200>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d071      	beq.n	8002416 <HAL_DMA_Init+0x16a>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a5e      	ldr	r2, [pc, #376]	; (80024b0 <HAL_DMA_Init+0x204>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d06c      	beq.n	8002416 <HAL_DMA_Init+0x16a>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a5c      	ldr	r2, [pc, #368]	; (80024b4 <HAL_DMA_Init+0x208>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d067      	beq.n	8002416 <HAL_DMA_Init+0x16a>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a5b      	ldr	r2, [pc, #364]	; (80024b8 <HAL_DMA_Init+0x20c>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d062      	beq.n	8002416 <HAL_DMA_Init+0x16a>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a59      	ldr	r2, [pc, #356]	; (80024bc <HAL_DMA_Init+0x210>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d05d      	beq.n	8002416 <HAL_DMA_Init+0x16a>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a58      	ldr	r2, [pc, #352]	; (80024c0 <HAL_DMA_Init+0x214>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d058      	beq.n	8002416 <HAL_DMA_Init+0x16a>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a56      	ldr	r2, [pc, #344]	; (80024c4 <HAL_DMA_Init+0x218>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d053      	beq.n	8002416 <HAL_DMA_Init+0x16a>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a55      	ldr	r2, [pc, #340]	; (80024c8 <HAL_DMA_Init+0x21c>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d04e      	beq.n	8002416 <HAL_DMA_Init+0x16a>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a53      	ldr	r2, [pc, #332]	; (80024cc <HAL_DMA_Init+0x220>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d049      	beq.n	8002416 <HAL_DMA_Init+0x16a>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a52      	ldr	r2, [pc, #328]	; (80024d0 <HAL_DMA_Init+0x224>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d044      	beq.n	8002416 <HAL_DMA_Init+0x16a>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a50      	ldr	r2, [pc, #320]	; (80024d4 <HAL_DMA_Init+0x228>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d03f      	beq.n	8002416 <HAL_DMA_Init+0x16a>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a4f      	ldr	r2, [pc, #316]	; (80024d8 <HAL_DMA_Init+0x22c>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d03a      	beq.n	8002416 <HAL_DMA_Init+0x16a>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a4d      	ldr	r2, [pc, #308]	; (80024dc <HAL_DMA_Init+0x230>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d035      	beq.n	8002416 <HAL_DMA_Init+0x16a>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a4c      	ldr	r2, [pc, #304]	; (80024e0 <HAL_DMA_Init+0x234>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d030      	beq.n	8002416 <HAL_DMA_Init+0x16a>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a4a      	ldr	r2, [pc, #296]	; (80024e4 <HAL_DMA_Init+0x238>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d02b      	beq.n	8002416 <HAL_DMA_Init+0x16a>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a49      	ldr	r2, [pc, #292]	; (80024e8 <HAL_DMA_Init+0x23c>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d026      	beq.n	8002416 <HAL_DMA_Init+0x16a>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a47      	ldr	r2, [pc, #284]	; (80024ec <HAL_DMA_Init+0x240>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d021      	beq.n	8002416 <HAL_DMA_Init+0x16a>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a46      	ldr	r2, [pc, #280]	; (80024f0 <HAL_DMA_Init+0x244>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d01c      	beq.n	8002416 <HAL_DMA_Init+0x16a>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a44      	ldr	r2, [pc, #272]	; (80024f4 <HAL_DMA_Init+0x248>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d017      	beq.n	8002416 <HAL_DMA_Init+0x16a>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a43      	ldr	r2, [pc, #268]	; (80024f8 <HAL_DMA_Init+0x24c>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d012      	beq.n	8002416 <HAL_DMA_Init+0x16a>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a41      	ldr	r2, [pc, #260]	; (80024fc <HAL_DMA_Init+0x250>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d00d      	beq.n	8002416 <HAL_DMA_Init+0x16a>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a40      	ldr	r2, [pc, #256]	; (8002500 <HAL_DMA_Init+0x254>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d008      	beq.n	8002416 <HAL_DMA_Init+0x16a>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a3e      	ldr	r2, [pc, #248]	; (8002504 <HAL_DMA_Init+0x258>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d003      	beq.n	8002416 <HAL_DMA_Init+0x16a>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a3d      	ldr	r2, [pc, #244]	; (8002508 <HAL_DMA_Init+0x25c>)
 8002414:	4293      	cmp	r3, r2
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2202      	movs	r2, #2
 8002422:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	695a      	ldr	r2, [r3, #20]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f042 0206 	orr.w	r2, r2, #6
 8002434:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8002436:	e00f      	b.n	8002458 <HAL_DMA_Init+0x1ac>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8002438:	f7ff fdf6 	bl	8002028 <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	2b05      	cmp	r3, #5
 8002444:	d908      	bls.n	8002458 <HAL_DMA_Init+0x1ac>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2210      	movs	r2, #16
 800244a:	659a      	str	r2, [r3, #88]	; 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2203      	movs	r2, #3
 8002450:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

      return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e015      	b.n	8002484 <HAL_DMA_Init+0x1d8>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	695b      	ldr	r3, [r3, #20]
 800245e:	f003 0301 	and.w	r3, r3, #1
 8002462:	2b00      	cmp	r3, #0
 8002464:	d1e8      	bne.n	8002438 <HAL_DMA_Init+0x18c>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f000 fc0c 	bl	8002c84 <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	651a      	str	r2, [r3, #80]	; 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	659a      	str	r2, [r3, #88]	; 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2201      	movs	r2, #1
 800247e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8002482:	2300      	movs	r3, #0
}
 8002484:	4618      	mov	r0, r3
 8002486:	3710      	adds	r7, #16
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	40020050 	.word	0x40020050
 8002490:	50020050 	.word	0x50020050
 8002494:	400200d0 	.word	0x400200d0
 8002498:	500200d0 	.word	0x500200d0
 800249c:	40020150 	.word	0x40020150
 80024a0:	50020150 	.word	0x50020150
 80024a4:	400201d0 	.word	0x400201d0
 80024a8:	500201d0 	.word	0x500201d0
 80024ac:	40020250 	.word	0x40020250
 80024b0:	50020250 	.word	0x50020250
 80024b4:	400202d0 	.word	0x400202d0
 80024b8:	500202d0 	.word	0x500202d0
 80024bc:	40020350 	.word	0x40020350
 80024c0:	50020350 	.word	0x50020350
 80024c4:	400203d0 	.word	0x400203d0
 80024c8:	500203d0 	.word	0x500203d0
 80024cc:	40020450 	.word	0x40020450
 80024d0:	50020450 	.word	0x50020450
 80024d4:	400204d0 	.word	0x400204d0
 80024d8:	500204d0 	.word	0x500204d0
 80024dc:	40020550 	.word	0x40020550
 80024e0:	50020550 	.word	0x50020550
 80024e4:	400205d0 	.word	0x400205d0
 80024e8:	500205d0 	.word	0x500205d0
 80024ec:	40020650 	.word	0x40020650
 80024f0:	50020650 	.word	0x50020650
 80024f4:	400206d0 	.word	0x400206d0
 80024f8:	500206d0 	.word	0x500206d0
 80024fc:	40020750 	.word	0x40020750
 8002500:	50020750 	.word	0x50020750
 8002504:	400207d0 	.word	0x400207d0
 8002508:	500207d0 	.word	0x500207d0

0800250c <HAL_DMA_DeInit>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *const hdma)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]

  DMA_TypeDef *p_dma_instance;

  uint32_t tickstart = HAL_GetTick();
 8002514:	f7ff fd88 	bl	8002028 <HAL_GetTick>
 8002518:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d101      	bne.n	8002524 <HAL_DMA_DeInit+0x18>
  {
    return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e0b9      	b.n	8002698 <HAL_DMA_DeInit+0x18c>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800252c:	f023 030f 	bic.w	r3, r3, #15
 8002530:	60bb      	str	r3, [r7, #8]

  /* Disable the selected DMA Channel */
  __HAL_DMA_DISABLE(hdma);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	695a      	ldr	r2, [r3, #20]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f042 0206 	orr.w	r2, r2, #6
 8002540:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8002542:	e00f      	b.n	8002564 <HAL_DMA_DeInit+0x58>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8002544:	f7ff fd70 	bl	8002028 <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	2b05      	cmp	r3, #5
 8002550:	d908      	bls.n	8002564 <HAL_DMA_DeInit+0x58>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2210      	movs	r2, #16
 8002556:	659a      	str	r2, [r3, #88]	; 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2203      	movs	r2, #3
 800255c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

      return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e099      	b.n	8002698 <HAL_DMA_DeInit+0x18c>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	695b      	ldr	r3, [r3, #20]
 800256a:	f003 0301 	and.w	r3, r3, #1
 800256e:	2b00      	cmp	r3, #0
 8002570:	d1e8      	bne.n	8002544 <HAL_DMA_DeInit+0x38>
    }
  }

  /* Reset DMA Channel registers */
  hdma->Instance->CLBAR = 0U;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	2200      	movs	r2, #0
 8002578:	601a      	str	r2, [r3, #0]
  hdma->Instance->CCR   = 0U;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	2200      	movs	r2, #0
 8002580:	615a      	str	r2, [r3, #20]
  hdma->Instance->CTR1  = 0U;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	2200      	movs	r2, #0
 8002588:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->Instance->CTR2  = 0U;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	2200      	movs	r2, #0
 8002590:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->Instance->CBR1  = 0U;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	2200      	movs	r2, #0
 8002598:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->Instance->CSAR  = 0U;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	2200      	movs	r2, #0
 80025a0:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->Instance->CDAR  = 0U;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	2200      	movs	r2, #0
 80025a8:	651a      	str	r2, [r3, #80]	; 0x50
  hdma->Instance->CLLR  = 0U;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	2200      	movs	r2, #0
 80025b0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Reset 2D Addressing registers */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a3a      	ldr	r2, [pc, #232]	; (80026a0 <HAL_DMA_DeInit+0x194>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d022      	beq.n	8002602 <HAL_DMA_DeInit+0xf6>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a38      	ldr	r2, [pc, #224]	; (80026a4 <HAL_DMA_DeInit+0x198>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d01d      	beq.n	8002602 <HAL_DMA_DeInit+0xf6>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a37      	ldr	r2, [pc, #220]	; (80026a8 <HAL_DMA_DeInit+0x19c>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d018      	beq.n	8002602 <HAL_DMA_DeInit+0xf6>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a35      	ldr	r2, [pc, #212]	; (80026ac <HAL_DMA_DeInit+0x1a0>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d013      	beq.n	8002602 <HAL_DMA_DeInit+0xf6>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a34      	ldr	r2, [pc, #208]	; (80026b0 <HAL_DMA_DeInit+0x1a4>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d00e      	beq.n	8002602 <HAL_DMA_DeInit+0xf6>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a32      	ldr	r2, [pc, #200]	; (80026b4 <HAL_DMA_DeInit+0x1a8>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d009      	beq.n	8002602 <HAL_DMA_DeInit+0xf6>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a31      	ldr	r2, [pc, #196]	; (80026b8 <HAL_DMA_DeInit+0x1ac>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d004      	beq.n	8002602 <HAL_DMA_DeInit+0xf6>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a2f      	ldr	r2, [pc, #188]	; (80026bc <HAL_DMA_DeInit+0x1b0>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d101      	bne.n	8002606 <HAL_DMA_DeInit+0xfa>
 8002602:	2301      	movs	r3, #1
 8002604:	e000      	b.n	8002608 <HAL_DMA_DeInit+0xfc>
 8002606:	2300      	movs	r3, #0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d007      	beq.n	800261c <HAL_DMA_DeInit+0x110>
  {
    hdma->Instance->CTR3 = 0U;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	2200      	movs	r2, #0
 8002612:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->Instance->CBR2 = 0U;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2200      	movs	r2, #0
 800261a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Clear privilege attribute */
  CLEAR_BIT(p_dma_instance->PRIVCFGR, (1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU)));
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	685a      	ldr	r2, [r3, #4]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002628:	3b50      	subs	r3, #80	; 0x50
 800262a:	09db      	lsrs	r3, r3, #7
 800262c:	f003 031f 	and.w	r3, r3, #31
 8002630:	2101      	movs	r1, #1
 8002632:	fa01 f303 	lsl.w	r3, r1, r3
 8002636:	43db      	mvns	r3, r3
 8002638:	401a      	ands	r2, r3
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	605a      	str	r2, [r3, #4]
  /* Clear secure attribute */
  CLEAR_BIT(p_dma_instance->SECCFGR, (1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU)));
#endif /* defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8002646:	60da      	str	r2, [r3, #12]
                              DMA_FLAG_TO));

  /* Clean all callbacks */
  hdma->XferCpltCallback     = NULL;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	661a      	str	r2, [r3, #96]	; 0x60
  hdma->XferHalfCpltCallback = NULL;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	665a      	str	r2, [r3, #100]	; 0x64
  hdma->XferErrorCallback    = NULL;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	669a      	str	r2, [r3, #104]	; 0x68
  hdma->XferAbortCallback    = NULL;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	66da      	str	r2, [r3, #108]	; 0x6c
  hdma->XferSuspendCallback  = NULL;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2200      	movs	r2, #0
 8002664:	671a      	str	r2, [r3, #112]	; 0x70

  /* Clean DMA queue */
  hdma->LinkedListQueue = NULL;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2200      	movs	r2, #0
 800266a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Clean DMA parent */
  if (hdma->Parent != NULL)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002670:	2b00      	cmp	r3, #0
 8002672:	d002      	beq.n	800267a <HAL_DMA_DeInit+0x16e>
  {
    hdma->Parent = NULL;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2200      	movs	r2, #0
 8002678:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Update DMA channel operation mode */
  hdma->Mode = DMA_NORMAL;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2200      	movs	r2, #0
 800267e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2200      	movs	r2, #0
 8002684:	659a      	str	r2, [r3, #88]	; 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2200      	movs	r2, #0
 8002692:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 8002696:	2300      	movs	r3, #0
}
 8002698:	4618      	mov	r0, r3
 800269a:	3710      	adds	r7, #16
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	40020650 	.word	0x40020650
 80026a4:	50020650 	.word	0x50020650
 80026a8:	400206d0 	.word	0x400206d0
 80026ac:	500206d0 	.word	0x500206d0
 80026b0:	40020750 	.word	0x40020750
 80026b4:	50020750 	.word	0x50020750
 80026b8:	400207d0 	.word	0x400207d0
 80026bc:	500207d0 	.word	0x500207d0

080026c0 <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	60b9      	str	r1, [r7, #8]
 80026ca:	607a      	str	r2, [r7, #4]
 80026cc:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d101      	bne.n	80026d8 <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e04f      	b.n	8002778 <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d101      	bne.n	80026e6 <HAL_DMA_Start_IT+0x26>
 80026e2:	2302      	movs	r3, #2
 80026e4:	e048      	b.n	8002778 <HAL_DMA_Start_IT+0xb8>
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2201      	movs	r2, #1
 80026ea:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d136      	bne.n	8002768 <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2202      	movs	r2, #2
 80026fe:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2200      	movs	r2, #0
 8002706:	659a      	str	r2, [r3, #88]	; 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	68b9      	ldr	r1, [r7, #8]
 800270e:	68f8      	ldr	r0, [r7, #12]
 8002710:	f000 fa93 	bl	8002c3a <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	695a      	ldr	r2, [r3, #20]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f442 42ba 	orr.w	r2, r2, #23808	; 0x5d00
 8002722:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002728:	2b00      	cmp	r3, #0
 800272a:	d007      	beq.n	800273c <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	695a      	ldr	r2, [r3, #20]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800273a:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002740:	2b00      	cmp	r3, #0
 8002742:	d007      	beq.n	8002754 <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	695a      	ldr	r2, [r3, #20]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002752:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	695a      	ldr	r2, [r3, #20]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f042 0201 	orr.w	r2, r2, #1
 8002762:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8002764:	2300      	movs	r3, #0
 8002766:	e007      	b.n	8002778 <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2240      	movs	r2, #64	; 0x40
 800276c:	659a      	str	r2, [r3, #88]	; 0x58
    __HAL_UNLOCK(hdma);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2200      	movs	r2, #0
 8002772:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
}
 8002778:	4618      	mov	r0, r3
 800277a:	3710      	adds	r7, #16
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}

08002780 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8002788:	f7ff fc4e 	bl	8002028 <HAL_GetTick>
 800278c:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d101      	bne.n	8002798 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e06b      	b.n	8002870 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d008      	beq.n	80027b6 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2220      	movs	r2, #32
 80027a8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e05c      	b.n	8002870 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	695a      	ldr	r2, [r3, #20]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f042 0204 	orr.w	r2, r2, #4
 80027c4:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2205      	movs	r2, #5
 80027ca:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80027ce:	e020      	b.n	8002812 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80027d0:	f7ff fc2a 	bl	8002028 <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	2b05      	cmp	r3, #5
 80027dc:	d919      	bls.n	8002812 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027e2:	f043 0210 	orr.w	r2, r3, #16
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	659a      	str	r2, [r3, #88]	; 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2203      	movs	r2, #3
 80027ee:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d003      	beq.n	8002806 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002802:	2201      	movs	r2, #1
 8002804:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e02e      	b.n	8002870 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	691b      	ldr	r3, [r3, #16]
 8002818:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800281c:	2b00      	cmp	r3, #0
 800281e:	d0d7      	beq.n	80027d0 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	695a      	ldr	r2, [r3, #20]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f042 0202 	orr.w	r2, r2, #2
 800282e:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2204      	movs	r2, #4
 8002834:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8002840:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2201      	movs	r2, #1
 8002846:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800284e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002852:	2b00      	cmp	r3, #0
 8002854:	d007      	beq.n	8002866 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800285a:	2201      	movs	r2, #1
 800285c:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2200      	movs	r2, #0
 8002864:	649a      	str	r2, [r3, #72]	; 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800286e:	2300      	movs	r3, #0
}
 8002870:	4618      	mov	r0, r3
 8002872:	3710      	adds	r7, #16
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}

08002878 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d101      	bne.n	800288a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e019      	b.n	80028be <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002890:	b2db      	uxtb	r3, r3
 8002892:	2b02      	cmp	r3, #2
 8002894:	d004      	beq.n	80028a0 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2220      	movs	r2, #32
 800289a:	659a      	str	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e00e      	b.n	80028be <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2204      	movs	r2, #4
 80028a4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	695b      	ldr	r3, [r3, #20]
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	6812      	ldr	r2, [r2, #0]
 80028b2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80028b6:	f043 0304 	orr.w	r3, r3, #4
 80028ba:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	370c      	adds	r7, #12
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr

080028ca <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 80028ca:	b580      	push	{r7, lr}
 80028cc:	b086      	sub	sp, #24
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80028da:	f023 030f 	bic.w	r3, r3, #15
 80028de:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028e8:	3b50      	subs	r3, #80	; 0x50
 80028ea:	09db      	lsrs	r3, r3, #7
 80028ec:	f003 031f 	and.w	r3, r3, #31
 80028f0:	2201      	movs	r2, #1
 80028f2:	fa02 f303 	lsl.w	r3, r2, r3
 80028f6:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	693a      	ldr	r2, [r7, #16]
 80028fe:	4013      	ands	r3, r2
 8002900:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2b00      	cmp	r3, #0
 8002906:	f000 8156 	beq.w	8002bb6 <HAL_DMA_IRQHandler+0x2ec>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	691b      	ldr	r3, [r3, #16]
 8002910:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002914:	2b00      	cmp	r3, #0
 8002916:	d011      	beq.n	800293c <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	695b      	ldr	r3, [r3, #20]
 800291e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002922:	2b00      	cmp	r3, #0
 8002924:	d00a      	beq.n	800293c <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800292e:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002934:	f043 0201 	orr.w	r2, r3, #1
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	691b      	ldr	r3, [r3, #16]
 8002942:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002946:	2b00      	cmp	r3, #0
 8002948:	d011      	beq.n	800296e <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	695b      	ldr	r3, [r3, #20]
 8002950:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002954:	2b00      	cmp	r3, #0
 8002956:	d00a      	beq.n	800296e <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002960:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002966:	f043 0202 	orr.w	r2, r3, #2
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	691b      	ldr	r3, [r3, #16]
 8002974:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d011      	beq.n	80029a0 <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	695b      	ldr	r3, [r3, #20]
 8002982:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d00a      	beq.n	80029a0 <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002992:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002998:	f043 0204 	orr.w	r2, r3, #4
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d011      	beq.n	80029d2 <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	695b      	ldr	r3, [r3, #20]
 80029b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d00a      	beq.n	80029d2 <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80029c4:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ca:	f043 0208 	orr.w	r2, r3, #8
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	691b      	ldr	r3, [r3, #16]
 80029d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d013      	beq.n	8002a08 <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	695b      	ldr	r3, [r3, #20]
 80029e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d00c      	beq.n	8002a08 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029f6:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d003      	beq.n	8002a08 <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	691b      	ldr	r3, [r3, #16]
 8002a0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d05a      	beq.n	8002acc <HAL_DMA_IRQHandler+0x202>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	695b      	ldr	r3, [r3, #20]
 8002a1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d053      	beq.n	8002acc <HAL_DMA_IRQHandler+0x202>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a2c:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	2b04      	cmp	r3, #4
 8002a38:	d13c      	bne.n	8002ab4 <HAL_DMA_IRQHandler+0x1ea>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	695a      	ldr	r2, [r3, #20]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a48:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	695a      	ldr	r2, [r3, #20]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f042 0202 	orr.w	r2, r2, #2
 8002a58:	615a      	str	r2, [r3, #20]

        /* Wait one clock cycle to ensure that the reset of DMA channel is done before checking the enable bit */
        __NOP();
 8002a5a:	bf00      	nop

        if ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	695b      	ldr	r3, [r3, #20]
 8002a62:	f003 0301 	and.w	r3, r3, #1
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d004      	beq.n	8002a74 <HAL_DMA_IRQHandler+0x1aa>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_ERROR;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2203      	movs	r2, #3
 8002a6e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8002a72:	e003      	b.n	8002a7c <HAL_DMA_IRQHandler+0x1b2>
        }
        else
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        }

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d007      	beq.n	8002a98 <HAL_DMA_IRQHandler+0x1ce>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2200      	movs	r2, #0
 8002a96:	649a      	str	r2, [r3, #72]	; 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	f000 8088 	beq.w	8002bba <HAL_DMA_IRQHandler+0x2f0>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	4798      	blx	r3
        }

        return;
 8002ab2:	e082      	b.n	8002bba <HAL_DMA_IRQHandler+0x2f0>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2205      	movs	r2, #5
 8002ab8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d003      	beq.n	8002acc <HAL_DMA_IRQHandler+0x202>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	691b      	ldr	r3, [r3, #16]
 8002ad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d039      	beq.n	8002b4e <HAL_DMA_IRQHandler+0x284>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	695b      	ldr	r3, [r3, #20]
 8002ae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d032      	beq.n	8002b4e <HAL_DMA_IRQHandler+0x284>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002aec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d012      	beq.n	8002b1a <HAL_DMA_IRQHandler+0x250>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d116      	bne.n	8002b2c <HAL_DMA_IRQHandler+0x262>
        {
          if (hdma->Instance->CBR1 == 0U)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d111      	bne.n	8002b2c <HAL_DMA_IRQHandler+0x262>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b14:	2201      	movs	r2, #1
 8002b16:	731a      	strb	r2, [r3, #12]
 8002b18:	e008      	b.n	8002b2c <HAL_DMA_IRQHandler+0x262>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d103      	bne.n	8002b2c <HAL_DMA_IRQHandler+0x262>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002b34:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d003      	beq.n	8002b4e <HAL_DMA_IRQHandler+0x284>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d032      	beq.n	8002bbc <HAL_DMA_IRQHandler+0x2f2>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	695a      	ldr	r2, [r3, #20]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f042 0202 	orr.w	r2, r2, #2
 8002b64:	615a      	str	r2, [r3, #20]

    /* Wait one clock cycle to ensure that the reset of DMA channel is done before checking the enable bit */
    __NOP();
 8002b66:	bf00      	nop

    if ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	695b      	ldr	r3, [r3, #20]
 8002b6e:	f003 0301 	and.w	r3, r3, #1
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d004      	beq.n	8002b80 <HAL_DMA_IRQHandler+0x2b6>
    {
      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2203      	movs	r2, #3
 8002b7a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8002b7e:	e003      	b.n	8002b88 <HAL_DMA_IRQHandler+0x2be>
    }
    else
    {
      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    }

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d003      	beq.n	8002b9c <HAL_DMA_IRQHandler+0x2d2>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b98:	2201      	movs	r2, #1
 8002b9a:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d007      	beq.n	8002bbc <HAL_DMA_IRQHandler+0x2f2>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	4798      	blx	r3
 8002bb4:	e002      	b.n	8002bbc <HAL_DMA_IRQHandler+0x2f2>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8002bb6:	bf00      	nop
 8002bb8:	e000      	b.n	8002bbc <HAL_DMA_IRQHandler+0x2f2>
        return;
 8002bba:	bf00      	nop
    }
  }
}
 8002bbc:	3718      	adds	r7, #24
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8002bc2:	b480      	push	{r7}
 8002bc4:	b085      	sub	sp, #20
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
 8002bca:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d101      	bne.n	8002bd6 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e02b      	b.n	8002c2e <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002bde:	f023 030f 	bic.w	r3, r3, #15
 8002be2:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bec:	3b50      	subs	r3, #80	; 0x50
 8002bee:	09db      	lsrs	r3, r3, #7
 8002bf0:	f003 031f 	and.w	r3, r3, #31
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfa:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	f003 0310 	and.w	r3, r3, #16
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d012      	beq.n	8002c2c <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	f003 0311 	and.w	r3, r3, #17
 8002c0c:	2b11      	cmp	r3, #17
 8002c0e:	d106      	bne.n	8002c1e <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	685a      	ldr	r2, [r3, #4]
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	431a      	orrs	r2, r3
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	605a      	str	r2, [r3, #4]
 8002c1c:	e006      	b.n	8002c2c <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	685a      	ldr	r2, [r3, #4]
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	43db      	mvns	r3, r3
 8002c26:	401a      	ands	r2, r3
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 8002c2c:	2300      	movs	r3, #0
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3714      	adds	r7, #20
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr

08002c3a <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 8002c3a:	b480      	push	{r7}
 8002c3c:	b085      	sub	sp, #20
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	60f8      	str	r0, [r7, #12]
 8002c42:	60b9      	str	r1, [r7, #8]
 8002c44:	607a      	str	r2, [r7, #4]
 8002c46:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c4e:	0c1b      	lsrs	r3, r3, #16
 8002c50:	041b      	lsls	r3, r3, #16
 8002c52:	683a      	ldr	r2, [r7, #0]
 8002c54:	b291      	uxth	r1, r2
 8002c56:	68fa      	ldr	r2, [r7, #12]
 8002c58:	6812      	ldr	r2, [r2, #0]
 8002c5a:	430b      	orrs	r3, r1
 8002c5c:	6493      	str	r3, [r2, #72]	; 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8002c66:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	68ba      	ldr	r2, [r7, #8]
 8002c6e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002c78:	bf00      	nop
 8002c7a:	3714      	adds	r7, #20
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b085      	sub	sp, #20
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6a1b      	ldr	r3, [r3, #32]
 8002c90:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	695b      	ldr	r3, [r3, #20]
 8002c98:	f423 0143 	bic.w	r1, r3, #12779520	; 0xc30000
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	68fa      	ldr	r2, [r7, #12]
 8002ca2:	430a      	orrs	r2, r1
 8002ca4:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	695a      	ldr	r2, [r3, #20]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	69db      	ldr	r3, [r3, #28]
 8002cae:	431a      	orrs	r2, r3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	691b      	ldr	r3, [r3, #16]
 8002cb4:	431a      	orrs	r2, r3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	699b      	ldr	r3, [r3, #24]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a53      	ldr	r2, [pc, #332]	; (8002e10 <DMA_Init+0x18c>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	f000 80a0 	beq.w	8002e0a <DMA_Init+0x186>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a51      	ldr	r2, [pc, #324]	; (8002e14 <DMA_Init+0x190>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	f000 809a 	beq.w	8002e0a <DMA_Init+0x186>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a4f      	ldr	r2, [pc, #316]	; (8002e18 <DMA_Init+0x194>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	f000 8094 	beq.w	8002e0a <DMA_Init+0x186>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a4d      	ldr	r2, [pc, #308]	; (8002e1c <DMA_Init+0x198>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	f000 808e 	beq.w	8002e0a <DMA_Init+0x186>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a4b      	ldr	r2, [pc, #300]	; (8002e20 <DMA_Init+0x19c>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	f000 8088 	beq.w	8002e0a <DMA_Init+0x186>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a49      	ldr	r2, [pc, #292]	; (8002e24 <DMA_Init+0x1a0>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	f000 8082 	beq.w	8002e0a <DMA_Init+0x186>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a47      	ldr	r2, [pc, #284]	; (8002e28 <DMA_Init+0x1a4>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d07c      	beq.n	8002e0a <DMA_Init+0x186>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a45      	ldr	r2, [pc, #276]	; (8002e2c <DMA_Init+0x1a8>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d077      	beq.n	8002e0a <DMA_Init+0x186>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a44      	ldr	r2, [pc, #272]	; (8002e30 <DMA_Init+0x1ac>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d072      	beq.n	8002e0a <DMA_Init+0x186>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a42      	ldr	r2, [pc, #264]	; (8002e34 <DMA_Init+0x1b0>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d06d      	beq.n	8002e0a <DMA_Init+0x186>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a41      	ldr	r2, [pc, #260]	; (8002e38 <DMA_Init+0x1b4>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d068      	beq.n	8002e0a <DMA_Init+0x186>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a3f      	ldr	r2, [pc, #252]	; (8002e3c <DMA_Init+0x1b8>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d063      	beq.n	8002e0a <DMA_Init+0x186>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a3e      	ldr	r2, [pc, #248]	; (8002e40 <DMA_Init+0x1bc>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d05e      	beq.n	8002e0a <DMA_Init+0x186>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a3c      	ldr	r2, [pc, #240]	; (8002e44 <DMA_Init+0x1c0>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d059      	beq.n	8002e0a <DMA_Init+0x186>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a3b      	ldr	r2, [pc, #236]	; (8002e48 <DMA_Init+0x1c4>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d054      	beq.n	8002e0a <DMA_Init+0x186>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a39      	ldr	r2, [pc, #228]	; (8002e4c <DMA_Init+0x1c8>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d04f      	beq.n	8002e0a <DMA_Init+0x186>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a38      	ldr	r2, [pc, #224]	; (8002e50 <DMA_Init+0x1cc>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d04a      	beq.n	8002e0a <DMA_Init+0x186>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a36      	ldr	r2, [pc, #216]	; (8002e54 <DMA_Init+0x1d0>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d045      	beq.n	8002e0a <DMA_Init+0x186>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a35      	ldr	r2, [pc, #212]	; (8002e58 <DMA_Init+0x1d4>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d040      	beq.n	8002e0a <DMA_Init+0x186>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a33      	ldr	r2, [pc, #204]	; (8002e5c <DMA_Init+0x1d8>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d03b      	beq.n	8002e0a <DMA_Init+0x186>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a32      	ldr	r2, [pc, #200]	; (8002e60 <DMA_Init+0x1dc>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d036      	beq.n	8002e0a <DMA_Init+0x186>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a30      	ldr	r2, [pc, #192]	; (8002e64 <DMA_Init+0x1e0>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d031      	beq.n	8002e0a <DMA_Init+0x186>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a2f      	ldr	r2, [pc, #188]	; (8002e68 <DMA_Init+0x1e4>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d02c      	beq.n	8002e0a <DMA_Init+0x186>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a2d      	ldr	r2, [pc, #180]	; (8002e6c <DMA_Init+0x1e8>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d027      	beq.n	8002e0a <DMA_Init+0x186>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a2c      	ldr	r2, [pc, #176]	; (8002e70 <DMA_Init+0x1ec>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d022      	beq.n	8002e0a <DMA_Init+0x186>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a2a      	ldr	r2, [pc, #168]	; (8002e74 <DMA_Init+0x1f0>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d01d      	beq.n	8002e0a <DMA_Init+0x186>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a29      	ldr	r2, [pc, #164]	; (8002e78 <DMA_Init+0x1f4>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d018      	beq.n	8002e0a <DMA_Init+0x186>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a27      	ldr	r2, [pc, #156]	; (8002e7c <DMA_Init+0x1f8>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d013      	beq.n	8002e0a <DMA_Init+0x186>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a26      	ldr	r2, [pc, #152]	; (8002e80 <DMA_Init+0x1fc>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d00e      	beq.n	8002e0a <DMA_Init+0x186>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a24      	ldr	r2, [pc, #144]	; (8002e84 <DMA_Init+0x200>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d009      	beq.n	8002e0a <DMA_Init+0x186>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a23      	ldr	r2, [pc, #140]	; (8002e88 <DMA_Init+0x204>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d004      	beq.n	8002e0a <DMA_Init+0x186>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a21      	ldr	r2, [pc, #132]	; (8002e8c <DMA_Init+0x208>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d142      	bne.n	8002e90 <DMA_Init+0x20c>
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e041      	b.n	8002e92 <DMA_Init+0x20e>
 8002e0e:	bf00      	nop
 8002e10:	40020050 	.word	0x40020050
 8002e14:	50020050 	.word	0x50020050
 8002e18:	400200d0 	.word	0x400200d0
 8002e1c:	500200d0 	.word	0x500200d0
 8002e20:	40020150 	.word	0x40020150
 8002e24:	50020150 	.word	0x50020150
 8002e28:	400201d0 	.word	0x400201d0
 8002e2c:	500201d0 	.word	0x500201d0
 8002e30:	40020250 	.word	0x40020250
 8002e34:	50020250 	.word	0x50020250
 8002e38:	400202d0 	.word	0x400202d0
 8002e3c:	500202d0 	.word	0x500202d0
 8002e40:	40020350 	.word	0x40020350
 8002e44:	50020350 	.word	0x50020350
 8002e48:	400203d0 	.word	0x400203d0
 8002e4c:	500203d0 	.word	0x500203d0
 8002e50:	40020450 	.word	0x40020450
 8002e54:	50020450 	.word	0x50020450
 8002e58:	400204d0 	.word	0x400204d0
 8002e5c:	500204d0 	.word	0x500204d0
 8002e60:	40020550 	.word	0x40020550
 8002e64:	50020550 	.word	0x50020550
 8002e68:	400205d0 	.word	0x400205d0
 8002e6c:	500205d0 	.word	0x500205d0
 8002e70:	40020650 	.word	0x40020650
 8002e74:	50020650 	.word	0x50020650
 8002e78:	400206d0 	.word	0x400206d0
 8002e7c:	500206d0 	.word	0x500206d0
 8002e80:	40020750 	.word	0x40020750
 8002e84:	50020750 	.word	0x50020750
 8002e88:	400207d0 	.word	0x400207d0
 8002e8c:	500207d0 	.word	0x500207d0
 8002e90:	2300      	movs	r3, #0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d012      	beq.n	8002ebc <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e9e:	3b01      	subs	r3, #1
 8002ea0:	051b      	lsls	r3, r3, #20
 8002ea2:	f003 737c 	and.w	r3, r3, #66060288	; 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8002ea6:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eac:	3b01      	subs	r3, #1
 8002eae:	011b      	lsls	r3, r3, #4
 8002eb0:	f403 737c 	and.w	r3, r3, #1008	; 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8002eb4:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8002eb6:	68fa      	ldr	r2, [r7, #12]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec2:	f003 2180 	and.w	r1, r3, #2147516416	; 0x80008000
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	68fa      	ldr	r2, [r7, #12]
 8002ecc:	430a      	orrs	r2, r1
 8002ece:	641a      	str	r2, [r3, #64]	; 0x40

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	689a      	ldr	r2, [r3, #8]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002edc:	431a      	orrs	r2, r3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002eee:	f040 80b0 	bne.w	8003052 <DMA_Init+0x3ce>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a82      	ldr	r2, [pc, #520]	; (8003100 <DMA_Init+0x47c>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	f000 80a0 	beq.w	800303e <DMA_Init+0x3ba>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a80      	ldr	r2, [pc, #512]	; (8003104 <DMA_Init+0x480>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	f000 809a 	beq.w	800303e <DMA_Init+0x3ba>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a7e      	ldr	r2, [pc, #504]	; (8003108 <DMA_Init+0x484>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	f000 8094 	beq.w	800303e <DMA_Init+0x3ba>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a7c      	ldr	r2, [pc, #496]	; (800310c <DMA_Init+0x488>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	f000 808e 	beq.w	800303e <DMA_Init+0x3ba>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a7a      	ldr	r2, [pc, #488]	; (8003110 <DMA_Init+0x48c>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	f000 8088 	beq.w	800303e <DMA_Init+0x3ba>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a78      	ldr	r2, [pc, #480]	; (8003114 <DMA_Init+0x490>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	f000 8082 	beq.w	800303e <DMA_Init+0x3ba>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a76      	ldr	r2, [pc, #472]	; (8003118 <DMA_Init+0x494>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d07c      	beq.n	800303e <DMA_Init+0x3ba>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a74      	ldr	r2, [pc, #464]	; (800311c <DMA_Init+0x498>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d077      	beq.n	800303e <DMA_Init+0x3ba>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a73      	ldr	r2, [pc, #460]	; (8003120 <DMA_Init+0x49c>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d072      	beq.n	800303e <DMA_Init+0x3ba>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a71      	ldr	r2, [pc, #452]	; (8003124 <DMA_Init+0x4a0>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d06d      	beq.n	800303e <DMA_Init+0x3ba>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a70      	ldr	r2, [pc, #448]	; (8003128 <DMA_Init+0x4a4>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d068      	beq.n	800303e <DMA_Init+0x3ba>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a6e      	ldr	r2, [pc, #440]	; (800312c <DMA_Init+0x4a8>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d063      	beq.n	800303e <DMA_Init+0x3ba>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a6d      	ldr	r2, [pc, #436]	; (8003130 <DMA_Init+0x4ac>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d05e      	beq.n	800303e <DMA_Init+0x3ba>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a6b      	ldr	r2, [pc, #428]	; (8003134 <DMA_Init+0x4b0>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d059      	beq.n	800303e <DMA_Init+0x3ba>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a6a      	ldr	r2, [pc, #424]	; (8003138 <DMA_Init+0x4b4>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d054      	beq.n	800303e <DMA_Init+0x3ba>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a68      	ldr	r2, [pc, #416]	; (800313c <DMA_Init+0x4b8>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d04f      	beq.n	800303e <DMA_Init+0x3ba>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a67      	ldr	r2, [pc, #412]	; (8003140 <DMA_Init+0x4bc>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d04a      	beq.n	800303e <DMA_Init+0x3ba>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a65      	ldr	r2, [pc, #404]	; (8003144 <DMA_Init+0x4c0>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d045      	beq.n	800303e <DMA_Init+0x3ba>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a64      	ldr	r2, [pc, #400]	; (8003148 <DMA_Init+0x4c4>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d040      	beq.n	800303e <DMA_Init+0x3ba>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a62      	ldr	r2, [pc, #392]	; (800314c <DMA_Init+0x4c8>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d03b      	beq.n	800303e <DMA_Init+0x3ba>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a61      	ldr	r2, [pc, #388]	; (8003150 <DMA_Init+0x4cc>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d036      	beq.n	800303e <DMA_Init+0x3ba>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a5f      	ldr	r2, [pc, #380]	; (8003154 <DMA_Init+0x4d0>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d031      	beq.n	800303e <DMA_Init+0x3ba>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a5e      	ldr	r2, [pc, #376]	; (8003158 <DMA_Init+0x4d4>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d02c      	beq.n	800303e <DMA_Init+0x3ba>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a5c      	ldr	r2, [pc, #368]	; (800315c <DMA_Init+0x4d8>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d027      	beq.n	800303e <DMA_Init+0x3ba>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a5b      	ldr	r2, [pc, #364]	; (8003160 <DMA_Init+0x4dc>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d022      	beq.n	800303e <DMA_Init+0x3ba>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a59      	ldr	r2, [pc, #356]	; (8003164 <DMA_Init+0x4e0>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d01d      	beq.n	800303e <DMA_Init+0x3ba>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a58      	ldr	r2, [pc, #352]	; (8003168 <DMA_Init+0x4e4>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d018      	beq.n	800303e <DMA_Init+0x3ba>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a56      	ldr	r2, [pc, #344]	; (800316c <DMA_Init+0x4e8>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d013      	beq.n	800303e <DMA_Init+0x3ba>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a55      	ldr	r2, [pc, #340]	; (8003170 <DMA_Init+0x4ec>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d00e      	beq.n	800303e <DMA_Init+0x3ba>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a53      	ldr	r2, [pc, #332]	; (8003174 <DMA_Init+0x4f0>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d009      	beq.n	800303e <DMA_Init+0x3ba>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a52      	ldr	r2, [pc, #328]	; (8003178 <DMA_Init+0x4f4>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d004      	beq.n	800303e <DMA_Init+0x3ba>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a50      	ldr	r2, [pc, #320]	; (800317c <DMA_Init+0x4f8>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d101      	bne.n	8003042 <DMA_Init+0x3be>
 800303e:	2301      	movs	r3, #1
 8003040:	e000      	b.n	8003044 <DMA_Init+0x3c0>
 8003042:	2300      	movs	r3, #0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d00d      	beq.n	8003064 <DMA_Init+0x3e0>
    {
      tmpreg |= DMA_CTR2_DREQ;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800304e:	60fb      	str	r3, [r7, #12]
 8003050:	e008      	b.n	8003064 <DMA_Init+0x3e0>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	68db      	ldr	r3, [r3, #12]
 8003056:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800305a:	d103      	bne.n	8003064 <DMA_Init+0x3e0>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003062:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800306a:	4b45      	ldr	r3, [pc, #276]	; (8003180 <DMA_Init+0x4fc>)
 800306c:	4013      	ands	r3, r2
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	6812      	ldr	r2, [r2, #0]
 8003072:	68f9      	ldr	r1, [r7, #12]
 8003074:	430b      	orrs	r3, r1
 8003076:	6453      	str	r3, [r2, #68]	; 0x44
                                    DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   | DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2200      	movs	r2, #0
 800307e:	649a      	str	r2, [r3, #72]	; 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a36      	ldr	r2, [pc, #216]	; (8003160 <DMA_Init+0x4dc>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d022      	beq.n	80030d0 <DMA_Init+0x44c>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a35      	ldr	r2, [pc, #212]	; (8003164 <DMA_Init+0x4e0>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d01d      	beq.n	80030d0 <DMA_Init+0x44c>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a33      	ldr	r2, [pc, #204]	; (8003168 <DMA_Init+0x4e4>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d018      	beq.n	80030d0 <DMA_Init+0x44c>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a32      	ldr	r2, [pc, #200]	; (800316c <DMA_Init+0x4e8>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d013      	beq.n	80030d0 <DMA_Init+0x44c>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a30      	ldr	r2, [pc, #192]	; (8003170 <DMA_Init+0x4ec>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d00e      	beq.n	80030d0 <DMA_Init+0x44c>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a2f      	ldr	r2, [pc, #188]	; (8003174 <DMA_Init+0x4f0>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d009      	beq.n	80030d0 <DMA_Init+0x44c>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a2d      	ldr	r2, [pc, #180]	; (8003178 <DMA_Init+0x4f4>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d004      	beq.n	80030d0 <DMA_Init+0x44c>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a2c      	ldr	r2, [pc, #176]	; (800317c <DMA_Init+0x4f8>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d101      	bne.n	80030d4 <DMA_Init+0x450>
 80030d0:	2301      	movs	r3, #1
 80030d2:	e000      	b.n	80030d6 <DMA_Init+0x452>
 80030d4:	2300      	movs	r3, #0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d007      	beq.n	80030ea <DMA_Init+0x466>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	2200      	movs	r2, #0
 80030e0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	2200      	movs	r2, #0
 80030e8:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2200      	movs	r2, #0
 80030f0:	67da      	str	r2, [r3, #124]	; 0x7c
}
 80030f2:	bf00      	nop
 80030f4:	3714      	adds	r7, #20
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr
 80030fe:	bf00      	nop
 8003100:	40020050 	.word	0x40020050
 8003104:	50020050 	.word	0x50020050
 8003108:	400200d0 	.word	0x400200d0
 800310c:	500200d0 	.word	0x500200d0
 8003110:	40020150 	.word	0x40020150
 8003114:	50020150 	.word	0x50020150
 8003118:	400201d0 	.word	0x400201d0
 800311c:	500201d0 	.word	0x500201d0
 8003120:	40020250 	.word	0x40020250
 8003124:	50020250 	.word	0x50020250
 8003128:	400202d0 	.word	0x400202d0
 800312c:	500202d0 	.word	0x500202d0
 8003130:	40020350 	.word	0x40020350
 8003134:	50020350 	.word	0x50020350
 8003138:	400203d0 	.word	0x400203d0
 800313c:	500203d0 	.word	0x500203d0
 8003140:	40020450 	.word	0x40020450
 8003144:	50020450 	.word	0x50020450
 8003148:	400204d0 	.word	0x400204d0
 800314c:	500204d0 	.word	0x500204d0
 8003150:	40020550 	.word	0x40020550
 8003154:	50020550 	.word	0x50020550
 8003158:	400205d0 	.word	0x400205d0
 800315c:	500205d0 	.word	0x500205d0
 8003160:	40020650 	.word	0x40020650
 8003164:	50020650 	.word	0x50020650
 8003168:	400206d0 	.word	0x400206d0
 800316c:	500206d0 	.word	0x500206d0
 8003170:	40020750 	.word	0x40020750
 8003174:	50020750 	.word	0x50020750
 8003178:	400207d0 	.word	0x400207d0
 800317c:	500207d0 	.word	0x500207d0
 8003180:	3cc03180 	.word	0x3cc03180

08003184 <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b086      	sub	sp, #24
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d003      	beq.n	800319a <HAL_DMAEx_List_Start_IT+0x16>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003196:	2b00      	cmp	r3, #0
 8003198:	d101      	bne.n	800319e <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e082      	b.n	80032a4 <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80031a4:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	695b      	ldr	r3, [r3, #20]
 80031ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031b0:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 80031b2:	7dfb      	ldrb	r3, [r7, #23]
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d005      	beq.n	80031c4 <HAL_DMAEx_List_Start_IT+0x40>
 80031b8:	7dfb      	ldrb	r3, [r7, #23]
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d16a      	bne.n	8003294 <HAL_DMAEx_List_Start_IT+0x110>
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d067      	beq.n	8003294 <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d157      	bne.n	8003280 <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d101      	bne.n	80031de <HAL_DMAEx_List_Start_IT+0x5a>
 80031da:	2302      	movs	r3, #2
 80031dc:	e062      	b.n	80032a4 <HAL_DMAEx_List_Start_IT+0x120>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2201      	movs	r2, #1
 80031e2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2202      	movs	r2, #2
 80031ea:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031f2:	2202      	movs	r2, #2
 80031f4:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	659a      	str	r2, [r3, #88]	; 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003200:	2200      	movs	r2, #0
 8003202:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	695a      	ldr	r2, [r3, #20]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f442 42ba 	orr.w	r2, r2, #23808	; 0x5d00
 8003212:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003218:	2b00      	cmp	r3, #0
 800321a:	d007      	beq.n	800322c <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	695a      	ldr	r2, [r3, #20]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800322a:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003230:	2b00      	cmp	r3, #0
 8003232:	d007      	beq.n	8003244 <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	695a      	ldr	r2, [r3, #20]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003242:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f107 010c 	add.w	r1, r7, #12
 800324e:	2200      	movs	r2, #0
 8003250:	4618      	mov	r0, r3
 8003252:	f000 f82b 	bl	80032ac <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4619      	mov	r1, r3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	0c0b      	lsrs	r3, r1, #16
 8003264:	041b      	lsls	r3, r3, #16
 8003266:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	461a      	mov	r2, r3
 8003270:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8003274:	4013      	ands	r3, r2
 8003276:	68f9      	ldr	r1, [r7, #12]
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	6812      	ldr	r2, [r2, #0]
 800327c:	430b      	orrs	r3, r1
 800327e:	67d3      	str	r3, [r2, #124]	; 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	695a      	ldr	r2, [r3, #20]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f042 0201 	orr.w	r2, r2, #1
 800328e:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8003290:	2300      	movs	r3, #0
 8003292:	e007      	b.n	80032a4 <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2240      	movs	r2, #64	; 0x40
 8003298:	659a      	str	r2, [r3, #88]	; 0x58
    __HAL_UNLOCK(hdma);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3718      	adds	r7, #24
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b085      	sub	sp, #20
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	60f8      	str	r0, [r7, #12]
 80032b4:	60b9      	str	r1, [r7, #8]
 80032b6:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6a1b      	ldr	r3, [r3, #32]
 80032bc:	f003 0302 	and.w	r3, r3, #2
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d00c      	beq.n	80032de <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d002      	beq.n	80032d0 <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	4a0d      	ldr	r2, [pc, #52]	; (8003304 <DMA_List_GetCLLRNodeInfo+0x58>)
 80032ce:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d00f      	beq.n	80032f6 <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2207      	movs	r2, #7
 80032da:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 80032dc:	e00b      	b.n	80032f6 <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d002      	beq.n	80032ea <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	4a08      	ldr	r2, [pc, #32]	; (8003308 <DMA_List_GetCLLRNodeInfo+0x5c>)
 80032e8:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d002      	beq.n	80032f6 <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2205      	movs	r2, #5
 80032f4:	601a      	str	r2, [r3, #0]
}
 80032f6:	bf00      	nop
 80032f8:	3714      	adds	r7, #20
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr
 8003302:	bf00      	nop
 8003304:	fe010000 	.word	0xfe010000
 8003308:	f8010000 	.word	0xf8010000

0800330c <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 800330c:	b480      	push	{r7}
 800330e:	b089      	sub	sp, #36	; 0x24
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8003316:	2300      	movs	r3, #0
 8003318:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800331e:	e1ba      	b.n	8003696 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	2101      	movs	r1, #1
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	fa01 f303 	lsl.w	r3, r1, r3
 800332c:	4013      	ands	r3, r2
 800332e:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2b00      	cmp	r3, #0
 8003338:	f000 81aa 	beq.w	8003690 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	4a55      	ldr	r2, [pc, #340]	; (8003494 <HAL_GPIO_Init+0x188>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d15d      	bne.n	8003400 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 800334a:	2201      	movs	r2, #1
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	fa02 f303 	lsl.w	r3, r2, r3
 8003352:	43db      	mvns	r3, r3
 8003354:	69fa      	ldr	r2, [r7, #28]
 8003356:	4013      	ands	r3, r2
 8003358:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	f003 0201 	and.w	r2, r3, #1
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	fa02 f303 	lsl.w	r3, r2, r3
 8003368:	69fa      	ldr	r2, [r7, #28]
 800336a:	4313      	orrs	r3, r2
 800336c:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	69fa      	ldr	r2, [r7, #28]
 8003372:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8003374:	4a48      	ldr	r2, [pc, #288]	; (8003498 <HAL_GPIO_Init+0x18c>)
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800337c:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800337e:	4a46      	ldr	r2, [pc, #280]	; (8003498 <HAL_GPIO_Init+0x18c>)
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	00db      	lsls	r3, r3, #3
 8003384:	4413      	add	r3, r2
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 800338a:	69bb      	ldr	r3, [r7, #24]
 800338c:	08da      	lsrs	r2, r3, #3
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	3208      	adds	r2, #8
 8003392:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003396:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	f003 0307 	and.w	r3, r3, #7
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	220f      	movs	r2, #15
 80033a2:	fa02 f303 	lsl.w	r3, r2, r3
 80033a6:	43db      	mvns	r3, r3
 80033a8:	69fa      	ldr	r2, [r7, #28]
 80033aa:	4013      	ands	r3, r2
 80033ac:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 80033ae:	69bb      	ldr	r3, [r7, #24]
 80033b0:	f003 0307 	and.w	r3, r3, #7
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	220b      	movs	r2, #11
 80033b8:	fa02 f303 	lsl.w	r3, r2, r3
 80033bc:	69fa      	ldr	r2, [r7, #28]
 80033be:	4313      	orrs	r3, r2
 80033c0:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 80033c2:	69bb      	ldr	r3, [r7, #24]
 80033c4:	08da      	lsrs	r2, r3, #3
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	3208      	adds	r2, #8
 80033ca:	69f9      	ldr	r1, [r7, #28]
 80033cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	005b      	lsls	r3, r3, #1
 80033da:	2203      	movs	r2, #3
 80033dc:	fa02 f303 	lsl.w	r3, r2, r3
 80033e0:	43db      	mvns	r3, r3
 80033e2:	69fa      	ldr	r2, [r7, #28]
 80033e4:	4013      	ands	r3, r2
 80033e6:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 80033e8:	69bb      	ldr	r3, [r7, #24]
 80033ea:	005b      	lsls	r3, r3, #1
 80033ec:	2202      	movs	r2, #2
 80033ee:	fa02 f303 	lsl.w	r3, r2, r3
 80033f2:	69fa      	ldr	r2, [r7, #28]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	69fa      	ldr	r2, [r7, #28]
 80033fc:	601a      	str	r2, [r3, #0]
 80033fe:	e067      	b.n	80034d0 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	2b02      	cmp	r3, #2
 8003406:	d003      	beq.n	8003410 <HAL_GPIO_Init+0x104>
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	2b12      	cmp	r3, #18
 800340e:	d145      	bne.n	800349c <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	08da      	lsrs	r2, r3, #3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	3208      	adds	r2, #8
 8003418:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800341c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	f003 0307 	and.w	r3, r3, #7
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	220f      	movs	r2, #15
 8003428:	fa02 f303 	lsl.w	r3, r2, r3
 800342c:	43db      	mvns	r3, r3
 800342e:	69fa      	ldr	r2, [r7, #28]
 8003430:	4013      	ands	r3, r2
 8003432:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	691b      	ldr	r3, [r3, #16]
 8003438:	f003 020f 	and.w	r2, r3, #15
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	f003 0307 	and.w	r3, r3, #7
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	fa02 f303 	lsl.w	r3, r2, r3
 8003448:	69fa      	ldr	r2, [r7, #28]
 800344a:	4313      	orrs	r3, r2
 800344c:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	08da      	lsrs	r2, r3, #3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	3208      	adds	r2, #8
 8003456:	69f9      	ldr	r1, [r7, #28]
 8003458:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8003462:	69bb      	ldr	r3, [r7, #24]
 8003464:	005b      	lsls	r3, r3, #1
 8003466:	2203      	movs	r2, #3
 8003468:	fa02 f303 	lsl.w	r3, r2, r3
 800346c:	43db      	mvns	r3, r3
 800346e:	69fa      	ldr	r2, [r7, #28]
 8003470:	4013      	ands	r3, r2
 8003472:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f003 0203 	and.w	r2, r3, #3
 800347c:	69bb      	ldr	r3, [r7, #24]
 800347e:	005b      	lsls	r3, r3, #1
 8003480:	fa02 f303 	lsl.w	r3, r2, r3
 8003484:	69fa      	ldr	r2, [r7, #28]
 8003486:	4313      	orrs	r3, r2
 8003488:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	69fa      	ldr	r2, [r7, #28]
 800348e:	601a      	str	r2, [r3, #0]
 8003490:	e01e      	b.n	80034d0 <HAL_GPIO_Init+0x1c4>
 8003492:	bf00      	nop
 8003494:	46020000 	.word	0x46020000
 8003498:	0801ab94 	.word	0x0801ab94
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80034a2:	69bb      	ldr	r3, [r7, #24]
 80034a4:	005b      	lsls	r3, r3, #1
 80034a6:	2203      	movs	r2, #3
 80034a8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ac:	43db      	mvns	r3, r3
 80034ae:	69fa      	ldr	r2, [r7, #28]
 80034b0:	4013      	ands	r3, r2
 80034b2:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	f003 0203 	and.w	r2, r3, #3
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	005b      	lsls	r3, r3, #1
 80034c0:	fa02 f303 	lsl.w	r3, r2, r3
 80034c4:	69fa      	ldr	r2, [r7, #28]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	69fa      	ldr	r2, [r7, #28]
 80034ce:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d00b      	beq.n	80034f0 <HAL_GPIO_Init+0x1e4>
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	2b02      	cmp	r3, #2
 80034de:	d007      	beq.n	80034f0 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80034e4:	2b11      	cmp	r3, #17
 80034e6:	d003      	beq.n	80034f0 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	2b12      	cmp	r3, #18
 80034ee:	d130      	bne.n	8003552 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 80034f6:	69bb      	ldr	r3, [r7, #24]
 80034f8:	005b      	lsls	r3, r3, #1
 80034fa:	2203      	movs	r2, #3
 80034fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003500:	43db      	mvns	r3, r3
 8003502:	69fa      	ldr	r2, [r7, #28]
 8003504:	4013      	ands	r3, r2
 8003506:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	68da      	ldr	r2, [r3, #12]
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	005b      	lsls	r3, r3, #1
 8003510:	fa02 f303 	lsl.w	r3, r2, r3
 8003514:	69fa      	ldr	r2, [r7, #28]
 8003516:	4313      	orrs	r3, r2
 8003518:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	69fa      	ldr	r2, [r7, #28]
 800351e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8003526:	2201      	movs	r2, #1
 8003528:	69bb      	ldr	r3, [r7, #24]
 800352a:	fa02 f303 	lsl.w	r3, r2, r3
 800352e:	43db      	mvns	r3, r3
 8003530:	69fa      	ldr	r2, [r7, #28]
 8003532:	4013      	ands	r3, r2
 8003534:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	091b      	lsrs	r3, r3, #4
 800353c:	f003 0201 	and.w	r2, r3, #1
 8003540:	69bb      	ldr	r3, [r7, #24]
 8003542:	fa02 f303 	lsl.w	r3, r2, r3
 8003546:	69fa      	ldr	r2, [r7, #28]
 8003548:	4313      	orrs	r3, r2
 800354a:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	69fa      	ldr	r2, [r7, #28]
 8003550:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	2b03      	cmp	r3, #3
 8003558:	d017      	beq.n	800358a <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8003560:	69bb      	ldr	r3, [r7, #24]
 8003562:	005b      	lsls	r3, r3, #1
 8003564:	2203      	movs	r2, #3
 8003566:	fa02 f303 	lsl.w	r3, r2, r3
 800356a:	43db      	mvns	r3, r3
 800356c:	69fa      	ldr	r2, [r7, #28]
 800356e:	4013      	ands	r3, r2
 8003570:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	689a      	ldr	r2, [r3, #8]
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	005b      	lsls	r3, r3, #1
 800357a:	fa02 f303 	lsl.w	r3, r2, r3
 800357e:	69fa      	ldr	r2, [r7, #28]
 8003580:	4313      	orrs	r3, r2
 8003582:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	69fa      	ldr	r2, [r7, #28]
 8003588:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d07c      	beq.n	8003690 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8003596:	4a47      	ldr	r2, [pc, #284]	; (80036b4 <HAL_GPIO_Init+0x3a8>)
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	089b      	lsrs	r3, r3, #2
 800359c:	3318      	adds	r3, #24
 800359e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035a2:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	f003 0303 	and.w	r3, r3, #3
 80035aa:	00db      	lsls	r3, r3, #3
 80035ac:	220f      	movs	r2, #15
 80035ae:	fa02 f303 	lsl.w	r3, r2, r3
 80035b2:	43db      	mvns	r3, r3
 80035b4:	69fa      	ldr	r2, [r7, #28]
 80035b6:	4013      	ands	r3, r2
 80035b8:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	0a9a      	lsrs	r2, r3, #10
 80035be:	4b3e      	ldr	r3, [pc, #248]	; (80036b8 <HAL_GPIO_Init+0x3ac>)
 80035c0:	4013      	ands	r3, r2
 80035c2:	697a      	ldr	r2, [r7, #20]
 80035c4:	f002 0203 	and.w	r2, r2, #3
 80035c8:	00d2      	lsls	r2, r2, #3
 80035ca:	4093      	lsls	r3, r2
 80035cc:	69fa      	ldr	r2, [r7, #28]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 80035d2:	4938      	ldr	r1, [pc, #224]	; (80036b4 <HAL_GPIO_Init+0x3a8>)
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	089b      	lsrs	r3, r3, #2
 80035d8:	3318      	adds	r3, #24
 80035da:	69fa      	ldr	r2, [r7, #28]
 80035dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80035e0:	4b34      	ldr	r3, [pc, #208]	; (80036b4 <HAL_GPIO_Init+0x3a8>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	43db      	mvns	r3, r3
 80035ea:	69fa      	ldr	r2, [r7, #28]
 80035ec:	4013      	ands	r3, r2
 80035ee:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d003      	beq.n	8003604 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 80035fc:	69fa      	ldr	r2, [r7, #28]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	4313      	orrs	r3, r2
 8003602:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8003604:	4a2b      	ldr	r2, [pc, #172]	; (80036b4 <HAL_GPIO_Init+0x3a8>)
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800360a:	4b2a      	ldr	r3, [pc, #168]	; (80036b4 <HAL_GPIO_Init+0x3a8>)
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	43db      	mvns	r3, r3
 8003614:	69fa      	ldr	r2, [r7, #28]
 8003616:	4013      	ands	r3, r2
 8003618:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d003      	beq.n	800362e <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8003626:	69fa      	ldr	r2, [r7, #28]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	4313      	orrs	r3, r2
 800362c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 800362e:	4a21      	ldr	r2, [pc, #132]	; (80036b4 <HAL_GPIO_Init+0x3a8>)
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8003634:	4b1f      	ldr	r3, [pc, #124]	; (80036b4 <HAL_GPIO_Init+0x3a8>)
 8003636:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800363a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	43db      	mvns	r3, r3
 8003640:	69fa      	ldr	r2, [r7, #28]
 8003642:	4013      	ands	r3, r2
 8003644:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d003      	beq.n	800365a <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8003652:	69fa      	ldr	r2, [r7, #28]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	4313      	orrs	r3, r2
 8003658:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 800365a:	4a16      	ldr	r2, [pc, #88]	; (80036b4 <HAL_GPIO_Init+0x3a8>)
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8003662:	4b14      	ldr	r3, [pc, #80]	; (80036b4 <HAL_GPIO_Init+0x3a8>)
 8003664:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003668:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	43db      	mvns	r3, r3
 800366e:	69fa      	ldr	r2, [r7, #28]
 8003670:	4013      	ands	r3, r2
 8003672:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d003      	beq.n	8003688 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8003680:	69fa      	ldr	r2, [r7, #28]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	4313      	orrs	r3, r2
 8003686:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8003688:	4a0a      	ldr	r2, [pc, #40]	; (80036b4 <HAL_GPIO_Init+0x3a8>)
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	3301      	adds	r3, #1
 8003694:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	fa22 f303 	lsr.w	r3, r2, r3
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	f47f ae3d 	bne.w	8003320 <HAL_GPIO_Init+0x14>
  }
}
 80036a6:	bf00      	nop
 80036a8:	bf00      	nop
 80036aa:	3724      	adds	r7, #36	; 0x24
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr
 80036b4:	46022000 	.word	0x46022000
 80036b8:	002f7f7f 	.word	0x002f7f7f

080036bc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80036bc:	b480      	push	{r7}
 80036be:	b089      	sub	sp, #36	; 0x24
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 80036c6:	2300      	movs	r3, #0
 80036c8:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 80036ce:	e0bc      	b.n	800384a <HAL_GPIO_DeInit+0x18e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 80036d0:	2201      	movs	r2, #1
 80036d2:	69bb      	ldr	r3, [r7, #24]
 80036d4:	fa02 f303 	lsl.w	r3, r2, r3
 80036d8:	683a      	ldr	r2, [r7, #0]
 80036da:	4013      	ands	r3, r2
 80036dc:	613b      	str	r3, [r7, #16]

    /*Save Pin Position */
    pin_position = position;
 80036de:	69bb      	ldr	r3, [r7, #24]
 80036e0:	61fb      	str	r3, [r7, #28]

    if (iocurrent != 0U)
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	f000 80ad 	beq.w	8003844 <HAL_GPIO_DeInit+0x188>
    {
      /* In case of LPGPIO port selected */
      if (GPIOx == LPGPIO1)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4a5e      	ldr	r2, [pc, #376]	; (8003868 <HAL_GPIO_DeInit+0x1ac>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d115      	bne.n	800371e <HAL_GPIO_DeInit+0x62>
      {
        /* Configure LP/IO in Input Mode */
        p_gpio  = LPGPIO_Map[pin_position].GPIO_PORT;
 80036f2:	4a5e      	ldr	r2, [pc, #376]	; (800386c <HAL_GPIO_DeInit+0x1b0>)
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80036fa:	617b      	str	r3, [r7, #20]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 80036fc:	4a5b      	ldr	r2, [pc, #364]	; (800386c <HAL_GPIO_DeInit+0x1b0>)
 80036fe:	69bb      	ldr	r3, [r7, #24]
 8003700:	00db      	lsls	r3, r3, #3
 8003702:	4413      	add	r3, r2
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	61fb      	str	r3, [r7, #28]
        LPGPIO1->MODER &= ~(1U << pin_position);
 8003708:	4b57      	ldr	r3, [pc, #348]	; (8003868 <HAL_GPIO_DeInit+0x1ac>)
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	2101      	movs	r1, #1
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	fa01 f303 	lsl.w	r3, r1, r3
 8003714:	43db      	mvns	r3, r3
 8003716:	4954      	ldr	r1, [pc, #336]	; (8003868 <HAL_GPIO_DeInit+0x1ac>)
 8003718:	4013      	ands	r3, r2
 800371a:	600b      	str	r3, [r1, #0]
 800371c:	e053      	b.n	80037c6 <HAL_GPIO_DeInit+0x10a>
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /*------------------------- EXTI Mode Configuration --------------------*/
        /* Clear the External Interrupt or Event for the current IO */
        tmp = EXTI->EXTICR[position >> 2U];
 800371e:	4a54      	ldr	r2, [pc, #336]	; (8003870 <HAL_GPIO_DeInit+0x1b4>)
 8003720:	69bb      	ldr	r3, [r7, #24]
 8003722:	089b      	lsrs	r3, r3, #2
 8003724:	3318      	adds	r3, #24
 8003726:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800372a:	60fb      	str	r3, [r7, #12]
        tmp &= ((0x0FUL) << (8U * (position & 0x03U)));
 800372c:	69bb      	ldr	r3, [r7, #24]
 800372e:	f003 0303 	and.w	r3, r3, #3
 8003732:	00db      	lsls	r3, r3, #3
 8003734:	220f      	movs	r2, #15
 8003736:	fa02 f303 	lsl.w	r3, r2, r3
 800373a:	68fa      	ldr	r2, [r7, #12]
 800373c:	4013      	ands	r3, r2
 800373e:	60fb      	str	r3, [r7, #12]
        if (tmp == (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U))))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	0a9a      	lsrs	r2, r3, #10
 8003744:	4b4b      	ldr	r3, [pc, #300]	; (8003874 <HAL_GPIO_DeInit+0x1b8>)
 8003746:	4013      	ands	r3, r2
 8003748:	69ba      	ldr	r2, [r7, #24]
 800374a:	f002 0203 	and.w	r2, r2, #3
 800374e:	00d2      	lsls	r2, r2, #3
 8003750:	4093      	lsls	r3, r2
 8003752:	68fa      	ldr	r2, [r7, #12]
 8003754:	429a      	cmp	r2, r3
 8003756:	d136      	bne.n	80037c6 <HAL_GPIO_DeInit+0x10a>
        {
          /* Clear EXTI line configuration */
          EXTI->IMR1 &= ~(iocurrent);
 8003758:	4b45      	ldr	r3, [pc, #276]	; (8003870 <HAL_GPIO_DeInit+0x1b4>)
 800375a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	43db      	mvns	r3, r3
 8003762:	4943      	ldr	r1, [pc, #268]	; (8003870 <HAL_GPIO_DeInit+0x1b4>)
 8003764:	4013      	ands	r3, r2
 8003766:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
          EXTI->EMR1 &= ~(iocurrent);
 800376a:	4b41      	ldr	r3, [pc, #260]	; (8003870 <HAL_GPIO_DeInit+0x1b4>)
 800376c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	43db      	mvns	r3, r3
 8003774:	493e      	ldr	r1, [pc, #248]	; (8003870 <HAL_GPIO_DeInit+0x1b4>)
 8003776:	4013      	ands	r3, r2
 8003778:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

          /* Clear Rising Falling edge configuration */
          EXTI->RTSR1 &= ~(iocurrent);
 800377c:	4b3c      	ldr	r3, [pc, #240]	; (8003870 <HAL_GPIO_DeInit+0x1b4>)
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	43db      	mvns	r3, r3
 8003784:	493a      	ldr	r1, [pc, #232]	; (8003870 <HAL_GPIO_DeInit+0x1b4>)
 8003786:	4013      	ands	r3, r2
 8003788:	600b      	str	r3, [r1, #0]
          EXTI->FTSR1 &= ~(iocurrent);
 800378a:	4b39      	ldr	r3, [pc, #228]	; (8003870 <HAL_GPIO_DeInit+0x1b4>)
 800378c:	685a      	ldr	r2, [r3, #4]
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	43db      	mvns	r3, r3
 8003792:	4937      	ldr	r1, [pc, #220]	; (8003870 <HAL_GPIO_DeInit+0x1b4>)
 8003794:	4013      	ands	r3, r2
 8003796:	604b      	str	r3, [r1, #4]

          tmp = (0x0FUL) << (8U * (position & 0x03U));
 8003798:	69bb      	ldr	r3, [r7, #24]
 800379a:	f003 0303 	and.w	r3, r3, #3
 800379e:	00db      	lsls	r3, r3, #3
 80037a0:	220f      	movs	r2, #15
 80037a2:	fa02 f303 	lsl.w	r3, r2, r3
 80037a6:	60fb      	str	r3, [r7, #12]
          EXTI->EXTICR[position >> 2U] &= ~tmp;
 80037a8:	4a31      	ldr	r2, [pc, #196]	; (8003870 <HAL_GPIO_DeInit+0x1b4>)
 80037aa:	69bb      	ldr	r3, [r7, #24]
 80037ac:	089b      	lsrs	r3, r3, #2
 80037ae:	3318      	adds	r3, #24
 80037b0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	43da      	mvns	r2, r3
 80037b8:	482d      	ldr	r0, [pc, #180]	; (8003870 <HAL_GPIO_DeInit+0x1b4>)
 80037ba:	69bb      	ldr	r3, [r7, #24]
 80037bc:	089b      	lsrs	r3, r3, #2
 80037be:	400a      	ands	r2, r1
 80037c0:	3318      	adds	r3, #24
 80037c2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        }
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      p_gpio->MODER |= (GPIO_MODER_MODE0 << (pin_position * 2U));
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	005b      	lsls	r3, r3, #1
 80037ce:	2103      	movs	r1, #3
 80037d0:	fa01 f303 	lsl.w	r3, r1, r3
 80037d4:	431a      	orrs	r2, r3
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      p_gpio->AFR[pin_position >> 3U] &= ~(0x0FUL << ((pin_position & 0x07U) * 4U));
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	08da      	lsrs	r2, r3, #3
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	3208      	adds	r2, #8
 80037e2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	f003 0307 	and.w	r3, r3, #7
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	220f      	movs	r2, #15
 80037f0:	fa02 f303 	lsl.w	r3, r2, r3
 80037f4:	43db      	mvns	r3, r3
 80037f6:	69fa      	ldr	r2, [r7, #28]
 80037f8:	08d2      	lsrs	r2, r2, #3
 80037fa:	4019      	ands	r1, r3
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	3208      	adds	r2, #8
 8003800:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      p_gpio->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	689a      	ldr	r2, [r3, #8]
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	005b      	lsls	r3, r3, #1
 800380c:	2103      	movs	r1, #3
 800380e:	fa01 f303 	lsl.w	r3, r1, r3
 8003812:	43db      	mvns	r3, r3
 8003814:	401a      	ands	r2, r3
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      p_gpio->OTYPER  &= ~(GPIO_OTYPER_OT0 << pin_position);
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	685a      	ldr	r2, [r3, #4]
 800381e:	2101      	movs	r1, #1
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	fa01 f303 	lsl.w	r3, r1, r3
 8003826:	43db      	mvns	r3, r3
 8003828:	401a      	ands	r2, r3
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      p_gpio->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	68da      	ldr	r2, [r3, #12]
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	005b      	lsls	r3, r3, #1
 8003836:	2103      	movs	r1, #3
 8003838:	fa01 f303 	lsl.w	r3, r1, r3
 800383c:	43db      	mvns	r3, r3
 800383e:	401a      	ands	r2, r3
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	60da      	str	r2, [r3, #12]
    }

    position++;
 8003844:	69bb      	ldr	r3, [r7, #24]
 8003846:	3301      	adds	r3, #1
 8003848:	61bb      	str	r3, [r7, #24]
  while ((GPIO_Pin >> position) != 0U)
 800384a:	683a      	ldr	r2, [r7, #0]
 800384c:	69bb      	ldr	r3, [r7, #24]
 800384e:	fa22 f303 	lsr.w	r3, r2, r3
 8003852:	2b00      	cmp	r3, #0
 8003854:	f47f af3c 	bne.w	80036d0 <HAL_GPIO_DeInit+0x14>
  }
}
 8003858:	bf00      	nop
 800385a:	bf00      	nop
 800385c:	3724      	adds	r7, #36	; 0x24
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr
 8003866:	bf00      	nop
 8003868:	46020000 	.word	0x46020000
 800386c:	0801ab94 	.word	0x0801ab94
 8003870:	46022000 	.word	0x46022000
 8003874:	002f7f7f 	.word	0x002f7f7f

08003878 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003878:	b480      	push	{r7}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	460b      	mov	r3, r1
 8003882:	807b      	strh	r3, [r7, #2]
 8003884:	4613      	mov	r3, r2
 8003886:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003888:	787b      	ldrb	r3, [r7, #1]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d003      	beq.n	8003896 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800388e:	887a      	ldrh	r2, [r7, #2]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8003894:	e002      	b.n	800389c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8003896:	887a      	ldrh	r2, [r7, #2]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800389c:	bf00      	nop
 800389e:	370c      	adds	r7, #12
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr

080038a8 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b085      	sub	sp, #20
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	460b      	mov	r3, r1
 80038b2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	695b      	ldr	r3, [r3, #20]
 80038b8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80038ba:	887a      	ldrh	r2, [r7, #2]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	4013      	ands	r3, r2
 80038c0:	041a      	lsls	r2, r3, #16
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	43d9      	mvns	r1, r3
 80038c6:	887b      	ldrh	r3, [r7, #2]
 80038c8:	400b      	ands	r3, r1
 80038ca:	431a      	orrs	r2, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	619a      	str	r2, [r3, #24]
}
 80038d0:	bf00      	nop
 80038d2:	3714      	adds	r7, #20
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr

080038dc <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 80038dc:	b480      	push	{r7}
 80038de:	b085      	sub	sp, #20
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038e4:	2300      	movs	r3, #0
 80038e6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 80038e8:	4b0b      	ldr	r3, [pc, #44]	; (8003918 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0301 	and.w	r3, r3, #1
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d002      	beq.n	80038fa <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	73fb      	strb	r3, [r7, #15]
 80038f8:	e007      	b.n	800390a <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 80038fa:	4b07      	ldr	r3, [pc, #28]	; (8003918 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f023 0204 	bic.w	r2, r3, #4
 8003902:	4905      	ldr	r1, [pc, #20]	; (8003918 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	4313      	orrs	r3, r2
 8003908:	600b      	str	r3, [r1, #0]
  }

  return status;
 800390a:	7bfb      	ldrb	r3, [r7, #15]
}
 800390c:	4618      	mov	r0, r3
 800390e:	3714      	adds	r7, #20
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr
 8003918:	40030400 	.word	0x40030400

0800391c <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 800391c:	b480      	push	{r7}
 800391e:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8003920:	4b05      	ldr	r3, [pc, #20]	; (8003938 <HAL_ICACHE_Enable+0x1c>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a04      	ldr	r2, [pc, #16]	; (8003938 <HAL_ICACHE_Enable+0x1c>)
 8003926:	f043 0301 	orr.w	r3, r3, #1
 800392a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800392c:	2300      	movs	r3, #0
}
 800392e:	4618      	mov	r0, r3
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr
 8003938:	40030400 	.word	0x40030400

0800393c <LL_DLYB_Enable>:
  * @param  DLYBx DLYB Instance
  * @retval None
  */

__STATIC_INLINE void LL_DLYB_Enable(DLYB_TypeDef *DLYBx)
{
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  SET_BIT(DLYBx->CR, DLYB_CR_DEN);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f043 0201 	orr.w	r2, r3, #1
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	601a      	str	r2, [r3, #0]
}
 8003950:	bf00      	nop
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b086      	sub	sp, #24
 8003960:	af02      	add	r7, sp, #8
 8003962:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003964:	2300      	movs	r3, #0
 8003966:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8003968:	f7fe fb5e 	bl	8002028 <HAL_GetTick>
 800396c:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d102      	bne.n	800397a <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	73fb      	strb	r3, [r7, #15]
 8003978:	e0a5      	b.n	8003ac6 <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY(hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP(hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003984:	2b00      	cmp	r3, #0
 8003986:	f040 809e 	bne.w	8003ac6 <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f7fd f9a4 	bl	8000cd8 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8003990:	f241 3188 	movw	r1, #5000	; 0x1388
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	f000 fff5 	bl	8004984 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	689a      	ldr	r2, [r3, #8]
 80039a0:	4b4b      	ldr	r3, [pc, #300]	; (8003ad0 <HAL_OSPI_Init+0x174>)
 80039a2:	4013      	ands	r3, r2
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	68d1      	ldr	r1, [r2, #12]
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	6912      	ldr	r2, [r2, #16]
 80039ac:	3a01      	subs	r2, #1
 80039ae:	0412      	lsls	r2, r2, #16
 80039b0:	4311      	orrs	r1, r2
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	6952      	ldr	r2, [r2, #20]
 80039b6:	3a01      	subs	r2, #1
 80039b8:	0212      	lsls	r2, r2, #8
 80039ba:	4311      	orrs	r1, r2
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80039c0:	4311      	orrs	r1, r2
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	69d2      	ldr	r2, [r2, #28]
 80039c6:	4311      	orrs	r1, r2
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	6812      	ldr	r2, [r2, #0]
 80039cc:	430b      	orrs	r3, r1
 80039ce:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6a1a      	ldr	r2, [r3, #32]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	430a      	orrs	r2, r1
 80039e4:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ea:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	430a      	orrs	r2, r1
 80039f6:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	687a      	ldr	r2, [r7, #4]
 80039fe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003a00:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	3b01      	subs	r3, #1
 8003a12:	021a      	lsls	r2, r3, #8
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	430a      	orrs	r2, r1
 8003a1a:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a20:	9300      	str	r3, [sp, #0]
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	2200      	movs	r2, #0
 8003a26:	2120      	movs	r1, #32
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f001 fd59 	bl	80054e0 <OSPI_WaitFlagStateUntilTimeout>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8003a32:	7bfb      	ldrb	r3, [r7, #15]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d146      	bne.n	8003ac6 <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a46:	1e5a      	subs	r2, r3, #1
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	430a      	orrs	r2, r1
 8003a4e:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DMM, hospi->Init.DualQuad);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	689a      	ldr	r2, [r3, #8]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	430a      	orrs	r2, r1
 8003a64:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003a6e:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a7a:	431a      	orrs	r2, r3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	430a      	orrs	r2, r1
 8003a82:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f042 0201 	orr.w	r2, r2, #1
 8003a94:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	699b      	ldr	r3, [r3, #24]
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d107      	bne.n	8003aae <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	689a      	ldr	r2, [r3, #8]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f042 0202 	orr.w	r2, r2, #2
 8003aac:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ab6:	d103      	bne.n	8003ac0 <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2201      	movs	r2, #1
 8003abc:	651a      	str	r2, [r3, #80]	; 0x50
 8003abe:	e002      	b.n	8003ac6 <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2202      	movs	r2, #2
 8003ac4:	651a      	str	r2, [r3, #80]	; 0x50
      }
    }
  }

  /* Return function status */
  return status;
 8003ac6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3710      	adds	r7, #16
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	f8e0c0f4 	.word	0xf8e0c0f4

08003ad4 <HAL_OSPI_DeInit>:
  * @brief  De-Initialize the OSPI peripheral.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_DeInit(OSPI_HandleTypeDef *hospi)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003adc:	2300      	movs	r3, #0
 8003ade:	73fb      	strb	r3, [r7, #15]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d102      	bne.n	8003aec <HAL_OSPI_DeInit+0x18>
  {
    status = HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	73fb      	strb	r3, [r7, #15]
 8003aea:	e015      	b.n	8003b18 <HAL_OSPI_DeInit+0x44>
    /* No error code can be set set as the handler is null */
  }
  else
  {
    /* Disable OctoSPI */
    __HAL_OSPI_DISABLE(hospi);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f022 0201 	bic.w	r2, r2, #1
 8003afa:	601a      	str	r2, [r3, #0]

    /* Disable free running clock if needed : must be done after OSPI disable */
    CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	689a      	ldr	r2, [r3, #8]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f022 0202 	bic.w	r2, r2, #2
 8003b0a:	609a      	str	r2, [r3, #8]

    /* DeInit the low level hardware */
    hospi->MspDeInitCallback(hospi);
#else
    /* De-initialize the low-level hardware */
    HAL_OSPI_MspDeInit(hospi);
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f7fd f9f9 	bl	8000f04 <HAL_OSPI_MspDeInit>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

    /* Reset the driver state */
    hospi->State = HAL_OSPI_STATE_RESET;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	651a      	str	r2, [r3, #80]	; 0x50
  }

  return status;
 8003b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3710      	adds	r7, #16
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
	...

08003b24 <HAL_OSPI_IRQHandler>:
  * @brief  Handle OSPI interrupt request.
  * @param  hospi : OSPI handle
  * @retval None
  */
void HAL_OSPI_IRQHandler(OSPI_HandleTypeDef *hospi)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b086      	sub	sp, #24
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	3350      	adds	r3, #80	; 0x50
 8003b32:	617b      	str	r3, [r7, #20]
  uint32_t flag           = hospi->Instance->SR;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	6a1b      	ldr	r3, [r3, #32]
 8003b3a:	613b      	str	r3, [r7, #16]
  uint32_t itsource       = hospi->Instance->CR;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	60fb      	str	r3, [r7, #12]
  uint32_t currentstate   = hospi->State;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b48:	60bb      	str	r3, [r7, #8]

  /* OctoSPI fifo threshold interrupt occurred -------------------------------*/
  if (((flag & HAL_OSPI_FLAG_FT) != 0U) && ((itsource & HAL_OSPI_IT_FT) != 0U))
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	f003 0304 	and.w	r3, r3, #4
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d03a      	beq.n	8003bca <HAL_OSPI_IRQHandler+0xa6>
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d035      	beq.n	8003bca <HAL_OSPI_IRQHandler+0xa6>
  {
    if (currentstate == HAL_OSPI_STATE_BUSY_TX)
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	2b18      	cmp	r3, #24
 8003b62:	d10f      	bne.n	8003b84 <HAL_OSPI_IRQHandler+0x60>
    {
      /* Write a data in the fifo */
      *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b68:	781a      	ldrb	r2, [r3, #0]
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	701a      	strb	r2, [r3, #0]
      hospi->pBuffPtr++;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b72:	1c5a      	adds	r2, r3, #1
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	641a      	str	r2, [r3, #64]	; 0x40
      hospi->XferCount--;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b7c:	1e5a      	subs	r2, r3, #1
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	649a      	str	r2, [r3, #72]	; 0x48
 8003b82:	e012      	b.n	8003baa <HAL_OSPI_IRQHandler+0x86>
    }
    else if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	2b28      	cmp	r3, #40	; 0x28
 8003b88:	d10f      	bne.n	8003baa <HAL_OSPI_IRQHandler+0x86>
    {
      /* Read a data from the fifo */
      *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8e:	697a      	ldr	r2, [r7, #20]
 8003b90:	7812      	ldrb	r2, [r2, #0]
 8003b92:	b2d2      	uxtb	r2, r2
 8003b94:	701a      	strb	r2, [r3, #0]
      hospi->pBuffPtr++;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9a:	1c5a      	adds	r2, r3, #1
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	641a      	str	r2, [r3, #64]	; 0x40
      hospi->XferCount--;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ba4:	1e5a      	subs	r2, r3, #1
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	649a      	str	r2, [r3, #72]	; 0x48
    else
    {
      /* Nothing to do */
    }

    if (hospi->XferCount == 0U)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d107      	bne.n	8003bc2 <HAL_OSPI_IRQHandler+0x9e>
    {
      /* All data have been received or transmitted for the transfer */
      /* Disable fifo threshold interrupt */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_FT);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003bc0:	601a      	str	r2, [r3, #0]

    /* Fifo threshold callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->FifoThresholdCallback(hospi);
#else
    HAL_OSPI_FifoThresholdCallback(hospi);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f000 fdbb 	bl	800473e <HAL_OSPI_FifoThresholdCallback>
 8003bc8:	e0e7      	b.n	8003d9a <HAL_OSPI_IRQHandler+0x276>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)*/
  }
  /* OctoSPI transfer complete interrupt occurred ----------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TC) != 0U) && ((itsource & HAL_OSPI_IT_TC) != 0U))
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	f003 0302 	and.w	r3, r3, #2
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d067      	beq.n	8003ca4 <HAL_OSPI_IRQHandler+0x180>
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d062      	beq.n	8003ca4 <HAL_OSPI_IRQHandler+0x180>
  {
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	2b28      	cmp	r3, #40	; 0x28
 8003be2:	d131      	bne.n	8003c48 <HAL_OSPI_IRQHandler+0x124>
    {
      if ((hospi->XferCount > 0U) && ((flag & OCTOSPI_SR_FLEVEL) != 0U))
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d015      	beq.n	8003c18 <HAL_OSPI_IRQHandler+0xf4>
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d010      	beq.n	8003c18 <HAL_OSPI_IRQHandler+0xf4>
      {
        /* Read the last data received in the fifo */
        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfa:	697a      	ldr	r2, [r7, #20]
 8003bfc:	7812      	ldrb	r2, [r2, #0]
 8003bfe:	b2d2      	uxtb	r2, r2
 8003c00:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c06:	1c5a      	adds	r2, r3, #1
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	641a      	str	r2, [r3, #64]	; 0x40
        hospi->XferCount--;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c10:	1e5a      	subs	r2, r3, #1
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	649a      	str	r2, [r3, #72]	; 0x48
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8003c16:	e0bd      	b.n	8003d94 <HAL_OSPI_IRQHandler+0x270>
      }
      else if (hospi->XferCount == 0U)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	f040 80b9 	bne.w	8003d94 <HAL_OSPI_IRQHandler+0x270>
      {
        /* Clear flag */
        hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	2202      	movs	r2, #2
 8003c28:	625a      	str	r2, [r3, #36]	; 0x24

        /* Disable the interrupts */
        __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8003c38:	601a      	str	r2, [r3, #0]

        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2202      	movs	r2, #2
 8003c3e:	651a      	str	r2, [r3, #80]	; 0x50

        /* RX complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->RxCpltCallback(hospi);
#else
        HAL_OSPI_RxCpltCallback(hospi);
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f7fe f931 	bl	8001ea8 <HAL_OSPI_RxCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8003c46:	e0a5      	b.n	8003d94 <HAL_OSPI_IRQHandler+0x270>
      }
    }
    else
    {
      /* Clear flag */
      hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	2202      	movs	r2, #2
 8003c4e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Disable the interrupts */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8003c5e:	601a      	str	r2, [r3, #0]

      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2202      	movs	r2, #2
 8003c64:	651a      	str	r2, [r3, #80]	; 0x50

      if (currentstate == HAL_OSPI_STATE_BUSY_TX)
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	2b18      	cmp	r3, #24
 8003c6a:	d103      	bne.n	8003c74 <HAL_OSPI_IRQHandler+0x150>
      {
        /* TX complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->TxCpltCallback(hospi);
#else
        HAL_OSPI_TxCpltCallback(hospi);
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f7fe f929 	bl	8001ec4 <HAL_OSPI_TxCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8003c72:	e08f      	b.n	8003d94 <HAL_OSPI_IRQHandler+0x270>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
      }
      else if (currentstate == HAL_OSPI_STATE_BUSY_CMD)
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	2b08      	cmp	r3, #8
 8003c78:	d103      	bne.n	8003c82 <HAL_OSPI_IRQHandler+0x15e>
      {
        /* Command complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->CmdCpltCallback(hospi);
#else
        HAL_OSPI_CmdCpltCallback(hospi);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f000 fd69 	bl	8004752 <HAL_OSPI_CmdCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8003c80:	e088      	b.n	8003d94 <HAL_OSPI_IRQHandler+0x270>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
      }
      else if (currentstate == HAL_OSPI_STATE_ABORT)
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c88:	f040 8084 	bne.w	8003d94 <HAL_OSPI_IRQHandler+0x270>
      {
        if (hospi->ErrorCode == HAL_OSPI_ERROR_NONE)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d103      	bne.n	8003c9c <HAL_OSPI_IRQHandler+0x178>
          /* Abort called by the user */
          /* Abort complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
          hospi->AbortCpltCallback(hospi);
#else
          HAL_OSPI_AbortCpltCallback(hospi);
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f000 fd48 	bl	800472a <HAL_OSPI_AbortCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8003c9a:	e07b      	b.n	8003d94 <HAL_OSPI_IRQHandler+0x270>
          /* Abort due to an error (eg : DMA error) */
          /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
          hospi->ErrorCallback(hospi);
#else
          HAL_OSPI_ErrorCallback(hospi);
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f000 fd3a 	bl	8004716 <HAL_OSPI_ErrorCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8003ca2:	e077      	b.n	8003d94 <HAL_OSPI_IRQHandler+0x270>
        /* Nothing to do */
      }
    }
  }
  /* OctoSPI status match interrupt occurred ---------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_SM) != 0U) && ((itsource & HAL_OSPI_IT_SM) != 0U))
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	f003 0308 	and.w	r3, r3, #8
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d01e      	beq.n	8003cec <HAL_OSPI_IRQHandler+0x1c8>
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d019      	beq.n	8003cec <HAL_OSPI_IRQHandler+0x1c8>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_SM;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	2208      	movs	r2, #8
 8003cbe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Check if automatic poll mode stop is activated */
    if ((hospi->Instance->CR & OCTOSPI_CR_APMS) != 0U)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d00a      	beq.n	8003ce4 <HAL_OSPI_IRQHandler+0x1c0>
    {
      /* Disable the interrupts */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_SM | HAL_OSPI_IT_TE);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8003cdc:	601a      	str	r2, [r3, #0]

      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2202      	movs	r2, #2
 8003ce2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Status match callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->StatusMatchCallback(hospi);
#else
    HAL_OSPI_StatusMatchCallback(hospi);
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	f000 fd52 	bl	800478e <HAL_OSPI_StatusMatchCallback>
 8003cea:	e056      	b.n	8003d9a <HAL_OSPI_IRQHandler+0x276>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
  }
  /* OctoSPI transfer error interrupt occurred -------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TE) != 0U) && ((itsource & HAL_OSPI_IT_TE) != 0U))
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	f003 0301 	and.w	r3, r3, #1
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d03c      	beq.n	8003d70 <HAL_OSPI_IRQHandler+0x24c>
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d037      	beq.n	8003d70 <HAL_OSPI_IRQHandler+0x24c>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_TE;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	2201      	movs	r2, #1
 8003d06:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable all interrupts */
    __HAL_OSPI_DISABLE_IT(hospi, (HAL_OSPI_IT_TO | HAL_OSPI_IT_SM | HAL_OSPI_IT_FT | HAL_OSPI_IT_TC | HAL_OSPI_IT_TE));
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8003d16:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_TRANSFER;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2202      	movs	r2, #2
 8003d1c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 0304 	and.w	r3, r3, #4
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d01a      	beq.n	8003d62 <HAL_OSPI_IRQHandler+0x23e>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f022 0204 	bic.w	r2, r2, #4
 8003d3a:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      hospi->hdma->XferAbortCallback = OSPI_DMAAbortCplt;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d40:	4a18      	ldr	r2, [pc, #96]	; (8003da4 <HAL_OSPI_IRQHandler+0x280>)
 8003d42:	66da      	str	r2, [r3, #108]	; 0x6c
      if (HAL_DMA_Abort_IT(hospi->hdma) != HAL_OK)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f7fe fd95 	bl	8002878 <HAL_DMA_Abort_IT>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d021      	beq.n	8003d98 <HAL_OSPI_IRQHandler+0x274>
      {
        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2202      	movs	r2, #2
 8003d58:	651a      	str	r2, [r3, #80]	; 0x50

        /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->ErrorCallback(hospi);
#else
        HAL_OSPI_ErrorCallback(hospi);
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f000 fcdb 	bl	8004716 <HAL_OSPI_ErrorCallback>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8003d60:	e01a      	b.n	8003d98 <HAL_OSPI_IRQHandler+0x274>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2202      	movs	r2, #2
 8003d66:	651a      	str	r2, [r3, #80]	; 0x50

      /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
      hospi->ErrorCallback(hospi);
#else
      HAL_OSPI_ErrorCallback(hospi);
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f000 fcd4 	bl	8004716 <HAL_OSPI_ErrorCallback>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8003d6e:	e013      	b.n	8003d98 <HAL_OSPI_IRQHandler+0x274>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
    }
  }
  /* OctoSPI timeout interrupt occurred --------------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TO) != 0U) && ((itsource & HAL_OSPI_IT_TO) != 0U))
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	f003 0310 	and.w	r3, r3, #16
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d00f      	beq.n	8003d9a <HAL_OSPI_IRQHandler+0x276>
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d00a      	beq.n	8003d9a <HAL_OSPI_IRQHandler+0x276>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_TO;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2210      	movs	r2, #16
 8003d8a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Timeout callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->TimeOutCallback(hospi);
#else
    HAL_OSPI_TimeOutCallback(hospi);
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f000 fd08 	bl	80047a2 <HAL_OSPI_TimeOutCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003d92:	e002      	b.n	8003d9a <HAL_OSPI_IRQHandler+0x276>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8003d94:	bf00      	nop
 8003d96:	e000      	b.n	8003d9a <HAL_OSPI_IRQHandler+0x276>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8003d98:	bf00      	nop
}
 8003d9a:	bf00      	nop
 8003d9c:	3718      	adds	r7, #24
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	08005469 	.word	0x08005469

08003da8 <HAL_OSPI_Command>:
  * @param  cmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Command(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd, uint32_t Timeout)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b08a      	sub	sp, #40	; 0x28
 8003dac:	af02      	add	r7, sp, #8
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	60b9      	str	r1, [r7, #8]
 8003db2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8003db4:	f7fe f938 	bl	8002028 <HAL_GetTick>
 8003db8:	61b8      	str	r0, [r7, #24]
    assert_param(IS_OSPI_ALT_BYTES_SIZE(cmd->AlternateBytesSize));
    assert_param(IS_OSPI_ALT_BYTES_DTR_MODE(cmd->AlternateBytesDtrMode));
  }

  assert_param(IS_OSPI_DATA_MODE(cmd->DataMode));
  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dbe:	2b00      	cmp	r3, #0

  assert_param(IS_OSPI_DQS_MODE(cmd->DQSMode));
  assert_param(IS_OSPI_SIOO_MODE(cmd->SIOOMode));

  /* Check the state of the driver */
  state = hospi->State;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dc4:	617b      	str	r3, [r7, #20]
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d104      	bne.n	8003dd6 <HAL_OSPI_Command+0x2e>
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003dd4:	d115      	bne.n	8003e02 <HAL_OSPI_Command+0x5a>
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	2b14      	cmp	r3, #20
 8003dda:	d107      	bne.n	8003dec <HAL_OSPI_Command+0x44>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && ((cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	2b02      	cmp	r3, #2
 8003de2:	d00e      	beq.n	8003e02 <HAL_OSPI_Command+0x5a>
                                                   || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2b03      	cmp	r3, #3
 8003dea:	d00a      	beq.n	8003e02 <HAL_OSPI_Command+0x5a>
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	2b24      	cmp	r3, #36	; 0x24
 8003df0:	d15b      	bne.n	8003eaa <HAL_OSPI_Command+0x102>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d003      	beq.n	8003e02 <HAL_OSPI_Command+0x5a>
                                                   (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))))
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 8003dfe:	2b03      	cmp	r3, #3
 8003e00:	d153      	bne.n	8003eaa <HAL_OSPI_Command+0x102>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	9300      	str	r3, [sp, #0]
 8003e06:	69bb      	ldr	r3, [r7, #24]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	2120      	movs	r1, #32
 8003e0c:	68f8      	ldr	r0, [r7, #12]
 8003e0e:	f001 fb67 	bl	80054e0 <OSPI_WaitFlagStateUntilTimeout>
 8003e12:	4603      	mov	r3, r0
 8003e14:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 8003e16:	7ffb      	ldrb	r3, [r7, #31]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d14c      	bne.n	8003eb6 <HAL_OSPI_Command+0x10e>
    {
      /* Initialize error code */
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the registers */
      status = OSPI_ConfigCmd(hospi, cmd);
 8003e22:	68b9      	ldr	r1, [r7, #8]
 8003e24:	68f8      	ldr	r0, [r7, #12]
 8003e26:	f001 fb9b 	bl	8005560 <OSPI_ConfigCmd>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 8003e2e:	7ffb      	ldrb	r3, [r7, #31]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d140      	bne.n	8003eb6 <HAL_OSPI_Command+0x10e>
      {
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d10e      	bne.n	8003e5a <HAL_OSPI_Command+0xb2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	9300      	str	r3, [sp, #0]
 8003e40:	69bb      	ldr	r3, [r7, #24]
 8003e42:	2201      	movs	r2, #1
 8003e44:	2102      	movs	r1, #2
 8003e46:	68f8      	ldr	r0, [r7, #12]
 8003e48:	f001 fb4a 	bl	80054e0 <OSPI_WaitFlagStateUntilTimeout>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	77fb      	strb	r3, [r7, #31]

          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	2202      	movs	r2, #2
 8003e56:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8003e58:	e02d      	b.n	8003eb6 <HAL_OSPI_Command+0x10e>
        }
        else
        {
          /* Update the state */
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d103      	bne.n	8003e6a <HAL_OSPI_Command+0xc2>
          {
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2204      	movs	r2, #4
 8003e66:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 8003e68:	e025      	b.n	8003eb6 <HAL_OSPI_Command+0x10e>
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d10b      	bne.n	8003e8a <HAL_OSPI_Command+0xe2>
          {
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e76:	2b24      	cmp	r3, #36	; 0x24
 8003e78:	d103      	bne.n	8003e82 <HAL_OSPI_Command+0xda>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2204      	movs	r2, #4
 8003e7e:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 8003e80:	e019      	b.n	8003eb6 <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2214      	movs	r2, #20
 8003e86:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 8003e88:	e015      	b.n	8003eb6 <HAL_OSPI_Command+0x10e>
            }
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d111      	bne.n	8003eb6 <HAL_OSPI_Command+0x10e>
          {
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e96:	2b14      	cmp	r3, #20
 8003e98:	d103      	bne.n	8003ea2 <HAL_OSPI_Command+0xfa>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2204      	movs	r2, #4
 8003e9e:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 8003ea0:	e009      	b.n	8003eb6 <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2224      	movs	r2, #36	; 0x24
 8003ea6:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 8003ea8:	e005      	b.n	8003eb6 <HAL_OSPI_Command+0x10e>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2210      	movs	r2, #16
 8003eb2:	655a      	str	r2, [r3, #84]	; 0x54
 8003eb4:	e000      	b.n	8003eb8 <HAL_OSPI_Command+0x110>
    if (status == HAL_OK)
 8003eb6:	bf00      	nop
  }

  /* Return function status */
  return status;
 8003eb8:	7ffb      	ldrb	r3, [r7, #31]
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3720      	adds	r7, #32
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}

08003ec2 <HAL_OSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Transmit(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 8003ec2:	b580      	push	{r7, lr}
 8003ec4:	b08a      	sub	sp, #40	; 0x28
 8003ec6:	af02      	add	r7, sp, #8
 8003ec8:	60f8      	str	r0, [r7, #12]
 8003eca:	60b9      	str	r1, [r7, #8]
 8003ecc:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003ece:	f7fe f8ab 	bl	8002028 <HAL_GetTick>
 8003ed2:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	3350      	adds	r3, #80	; 0x50
 8003eda:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d105      	bne.n	8003eee <HAL_OSPI_Transmit+0x2c>
  {
    status = HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2208      	movs	r2, #8
 8003eea:	655a      	str	r2, [r3, #84]	; 0x54
 8003eec:	e057      	b.n	8003f9e <HAL_OSPI_Transmit+0xdc>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ef2:	2b04      	cmp	r3, #4
 8003ef4:	d14e      	bne.n	8003f94 <HAL_OSPI_Transmit+0xd2>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efc:	1c5a      	adds	r2, r3, #1
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	649a      	str	r2, [r3, #72]	; 0x48
      hospi->XferSize  = hospi->XferCount;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	645a      	str	r2, [r3, #68]	; 0x44
      hospi->pBuffPtr  = pData;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	68ba      	ldr	r2, [r7, #8]
 8003f0e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003f1e:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_FT, SET, tickstart, Timeout);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	9300      	str	r3, [sp, #0]
 8003f24:	69bb      	ldr	r3, [r7, #24]
 8003f26:	2201      	movs	r2, #1
 8003f28:	2104      	movs	r1, #4
 8003f2a:	68f8      	ldr	r0, [r7, #12]
 8003f2c:	f001 fad8 	bl	80054e0 <OSPI_WaitFlagStateUntilTimeout>
 8003f30:	4603      	mov	r3, r0
 8003f32:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8003f34:	7ffb      	ldrb	r3, [r7, #31]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d113      	bne.n	8003f62 <HAL_OSPI_Transmit+0xa0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3e:	781a      	ldrb	r2, [r3, #0]
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f48:	1c5a      	adds	r2, r3, #1
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	641a      	str	r2, [r3, #64]	; 0x40
        hospi->XferCount--;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f52:	1e5a      	subs	r2, r3, #1
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	649a      	str	r2, [r3, #72]	; 0x48
      } while (hospi->XferCount > 0U);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d1df      	bne.n	8003f20 <HAL_OSPI_Transmit+0x5e>
 8003f60:	e000      	b.n	8003f64 <HAL_OSPI_Transmit+0xa2>
          break;
 8003f62:	bf00      	nop

      if (status == HAL_OK)
 8003f64:	7ffb      	ldrb	r3, [r7, #31]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d119      	bne.n	8003f9e <HAL_OSPI_Transmit+0xdc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	9300      	str	r3, [sp, #0]
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	2201      	movs	r2, #1
 8003f72:	2102      	movs	r1, #2
 8003f74:	68f8      	ldr	r0, [r7, #12]
 8003f76:	f001 fab3 	bl	80054e0 <OSPI_WaitFlagStateUntilTimeout>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8003f7e:	7ffb      	ldrb	r3, [r7, #31]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d10c      	bne.n	8003f9e <HAL_OSPI_Transmit+0xdc>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	2202      	movs	r2, #2
 8003f8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2202      	movs	r2, #2
 8003f90:	651a      	str	r2, [r3, #80]	; 0x50
 8003f92:	e004      	b.n	8003f9e <HAL_OSPI_Transmit+0xdc>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2210      	movs	r2, #16
 8003f9c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }

  /* Return function status */
  return status;
 8003f9e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3720      	adds	r7, #32
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}

08003fa8 <HAL_OSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Receive(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b08c      	sub	sp, #48	; 0x30
 8003fac:	af02      	add	r7, sp, #8
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	60b9      	str	r1, [r7, #8]
 8003fb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003fb4:	f7fe f838 	bl	8002028 <HAL_GetTick>
 8003fb8:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	3350      	adds	r3, #80	; 0x50
 8003fc0:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hospi->Instance->AR;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fc8:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hospi->Instance->IR;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8003fd2:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d106      	bne.n	8003fe8 <HAL_OSPI_Receive+0x40>
  {
    status = HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2208      	movs	r2, #8
 8003fe4:	655a      	str	r2, [r3, #84]	; 0x54
 8003fe6:	e07c      	b.n	80040e2 <HAL_OSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fec:	2b04      	cmp	r3, #4
 8003fee:	d172      	bne.n	80040d6 <HAL_OSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff6:	1c5a      	adds	r2, r3, #1
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	649a      	str	r2, [r3, #72]	; 0x48
      hospi->XferSize  = hospi->XferCount;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	645a      	str	r2, [r3, #68]	; 0x44
      hospi->pBuffPtr  = pData;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	68ba      	ldr	r2, [r7, #8]
 8004008:	641a      	str	r2, [r3, #64]	; 0x40

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800401c:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004026:	d104      	bne.n	8004032 <HAL_OSPI_Receive+0x8a>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	69ba      	ldr	r2, [r7, #24]
 800402e:	649a      	str	r2, [r3, #72]	; 0x48
 8004030:	e011      	b.n	8004056 <HAL_OSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800403a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800403e:	2b00      	cmp	r3, #0
 8004040:	d004      	beq.n	800404c <HAL_OSPI_Receive+0xa4>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	69ba      	ldr	r2, [r7, #24]
 8004048:	649a      	str	r2, [r3, #72]	; 0x48
 800404a:	e004      	b.n	8004056 <HAL_OSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	697a      	ldr	r2, [r7, #20]
 8004052:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	9300      	str	r3, [sp, #0]
 800405a:	6a3b      	ldr	r3, [r7, #32]
 800405c:	2201      	movs	r2, #1
 800405e:	2106      	movs	r1, #6
 8004060:	68f8      	ldr	r0, [r7, #12]
 8004062:	f001 fa3d 	bl	80054e0 <OSPI_WaitFlagStateUntilTimeout>
 8004066:	4603      	mov	r3, r0
 8004068:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status != HAL_OK)
 800406c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004070:	2b00      	cmp	r3, #0
 8004072:	d114      	bne.n	800409e <HAL_OSPI_Receive+0xf6>
        {
          break;
        }

        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004078:	69fa      	ldr	r2, [r7, #28]
 800407a:	7812      	ldrb	r2, [r2, #0]
 800407c:	b2d2      	uxtb	r2, r2
 800407e:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004084:	1c5a      	adds	r2, r3, #1
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	641a      	str	r2, [r3, #64]	; 0x40
        hospi->XferCount--;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800408e:	1e5a      	subs	r2, r3, #1
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	649a      	str	r2, [r3, #72]	; 0x48
      } while (hospi->XferCount > 0U);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004098:	2b00      	cmp	r3, #0
 800409a:	d1dc      	bne.n	8004056 <HAL_OSPI_Receive+0xae>
 800409c:	e000      	b.n	80040a0 <HAL_OSPI_Receive+0xf8>
          break;
 800409e:	bf00      	nop

      if (status == HAL_OK)
 80040a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d11c      	bne.n	80040e2 <HAL_OSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	9300      	str	r3, [sp, #0]
 80040ac:	6a3b      	ldr	r3, [r7, #32]
 80040ae:	2201      	movs	r2, #1
 80040b0:	2102      	movs	r1, #2
 80040b2:	68f8      	ldr	r0, [r7, #12]
 80040b4:	f001 fa14 	bl	80054e0 <OSPI_WaitFlagStateUntilTimeout>
 80040b8:	4603      	mov	r3, r0
 80040ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status == HAL_OK)
 80040be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d10d      	bne.n	80040e2 <HAL_OSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	2202      	movs	r2, #2
 80040cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2202      	movs	r2, #2
 80040d2:	651a      	str	r2, [r3, #80]	; 0x50
 80040d4:	e005      	b.n	80040e2 <HAL_OSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2210      	movs	r2, #16
 80040e0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }

  /* Return function status */
  return status;
 80040e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3728      	adds	r7, #40	; 0x28
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
	...

080040f0 <HAL_OSPI_Transmit_DMA>:
  * @note   If DMA peripheral access is configured as word, the number
  *         of data and the fifo threshold should be aligned on word
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Transmit_DMA(OSPI_HandleTypeDef *hospi, uint8_t *pData)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b086      	sub	sp, #24
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040fa:	2300      	movs	r3, #0
 80040fc:	75fb      	strb	r3, [r7, #23]
  uint32_t data_size = hospi->Instance->DLR + 1U;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004104:	3301      	adds	r3, #1
 8004106:	60bb      	str	r3, [r7, #8]
  DMA_QListTypeDef *p_queue = {NULL};
 8004108:	2300      	movs	r3, #0
 800410a:	613b      	str	r3, [r7, #16]
  uint32_t data_width = DMA_DEST_DATAWIDTH_BYTE;
 800410c:	2300      	movs	r3, #0
 800410e:	60fb      	str	r3, [r7, #12]

  /* Check the data pointer allocation */
  if (pData == NULL)
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d105      	bne.n	8004122 <HAL_OSPI_Transmit_DMA+0x32>
  {
    status = HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	75fb      	strb	r3, [r7, #23]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2208      	movs	r2, #8
 800411e:	655a      	str	r2, [r3, #84]	; 0x54
 8004120:	e10d      	b.n	800433e <HAL_OSPI_Transmit_DMA+0x24e>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004126:	2b04      	cmp	r3, #4
 8004128:	f040 8104 	bne.w	8004334 <HAL_OSPI_Transmit_DMA+0x244>
    {
      if ((hospi->hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004130:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004136:	2b00      	cmp	r3, #0
 8004138:	d017      	beq.n	800416a <HAL_OSPI_Transmit_DMA+0x7a>
      {
        p_queue = hospi->hdma->LinkedListQueue;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800413e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004140:	613b      	str	r3, [r7, #16]
        if ((p_queue != NULL) && (p_queue->Head != NULL))
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d00a      	beq.n	800415e <HAL_OSPI_Transmit_DMA+0x6e>
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d006      	beq.n	800415e <HAL_OSPI_Transmit_DMA+0x6e>
        {
          data_width = p_queue->Head->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] & DMA_CTR1_DDW_LOG2;
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800415a:	60fb      	str	r3, [r7, #12]
 800415c:	e009      	b.n	8004172 <HAL_OSPI_Transmit_DMA+0x82>
        }
        else
        {
          /* Set Error Code */
          hospi->ErrorCode = HAL_OSPI_ERROR_DMA;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2204      	movs	r2, #4
 8004162:	655a      	str	r2, [r3, #84]	; 0x54

          /* Return function status */
          status = HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	75fb      	strb	r3, [r7, #23]
 8004168:	e003      	b.n	8004172 <HAL_OSPI_Transmit_DMA+0x82>
        }
      }
      else
      {
        data_width = hospi->hdma->Init.DestDataWidth;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800416e:	69db      	ldr	r3, [r3, #28]
 8004170:	60fb      	str	r3, [r7, #12]
      }
      /* Configure counters and size */
      if (data_width == DMA_DEST_DATAWIDTH_BYTE)
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d103      	bne.n	8004180 <HAL_OSPI_Transmit_DMA+0x90>
      {
        hospi->XferCount = data_size;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	68ba      	ldr	r2, [r7, #8]
 800417c:	649a      	str	r2, [r3, #72]	; 0x48
 800417e:	e030      	b.n	80041e2 <HAL_OSPI_Transmit_DMA+0xf2>
      }
      else if (data_width == DMA_DEST_DATAWIDTH_HALFWORD)
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004186:	d114      	bne.n	80041b2 <HAL_OSPI_Transmit_DMA+0xc2>
      {
        if (((data_size % 2U) != 0U) || ((hospi->Init.FifoThreshold % 2U) != 0U))
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	f003 0301 	and.w	r3, r3, #1
 800418e:	2b00      	cmp	r3, #0
 8004190:	d105      	bne.n	800419e <HAL_OSPI_Transmit_DMA+0xae>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	f003 0301 	and.w	r3, r3, #1
 800419a:	2b00      	cmp	r3, #0
 800419c:	d005      	beq.n	80041aa <HAL_OSPI_Transmit_DMA+0xba>
        {
          /* The number of data or the fifo threshold is not aligned on halfword
          => no transfer possible with DMA peripheral access configured as halfword */
          hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2208      	movs	r2, #8
 80041a2:	655a      	str	r2, [r3, #84]	; 0x54
          status = HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	75fb      	strb	r3, [r7, #23]
 80041a8:	e01b      	b.n	80041e2 <HAL_OSPI_Transmit_DMA+0xf2>
        }
        else
        {
          hospi->XferCount = data_size;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	68ba      	ldr	r2, [r7, #8]
 80041ae:	649a      	str	r2, [r3, #72]	; 0x48
 80041b0:	e017      	b.n	80041e2 <HAL_OSPI_Transmit_DMA+0xf2>
        }
      }
      else if (data_width == DMA_DEST_DATAWIDTH_WORD)
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041b8:	d113      	bne.n	80041e2 <HAL_OSPI_Transmit_DMA+0xf2>
      {
        if (((data_size % 4U) != 0U) || ((hospi->Init.FifoThreshold % 4U) != 0U))
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	f003 0303 	and.w	r3, r3, #3
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d105      	bne.n	80041d0 <HAL_OSPI_Transmit_DMA+0xe0>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	f003 0303 	and.w	r3, r3, #3
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d005      	beq.n	80041dc <HAL_OSPI_Transmit_DMA+0xec>
        {
          /* The number of data or the fifo threshold is not aligned on word
          => no transfer possible with DMA peripheral access configured as word */
          hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2208      	movs	r2, #8
 80041d4:	655a      	str	r2, [r3, #84]	; 0x54
          status = HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	75fb      	strb	r3, [r7, #23]
 80041da:	e002      	b.n	80041e2 <HAL_OSPI_Transmit_DMA+0xf2>
        }
        else
        {
          hospi->XferCount = data_size;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	68ba      	ldr	r2, [r7, #8]
 80041e0:	649a      	str	r2, [r3, #72]	; 0x48
      else
      {
        /* Nothing to do */
      }

      if (status == HAL_OK)
 80041e2:	7dfb      	ldrb	r3, [r7, #23]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	f040 80aa 	bne.w	800433e <HAL_OSPI_Transmit_DMA+0x24e>
      {
        hospi->XferSize = hospi->XferCount;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	645a      	str	r2, [r3, #68]	; 0x44
        hospi->pBuffPtr = pData;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	683a      	ldr	r2, [r7, #0]
 80041f6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Configure CR register with functional mode as indirect write */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004206:	601a      	str	r2, [r3, #0]

        /* Clear flags related to interrupt */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TE | HAL_OSPI_FLAG_TC);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	2203      	movs	r2, #3
 800420e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the state */
        hospi->State = HAL_OSPI_STATE_BUSY_TX;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2218      	movs	r2, #24
 8004214:	651a      	str	r2, [r3, #80]	; 0x50

        /* Set the DMA transfer complete callback */
        hospi->hdma->XferCpltCallback = OSPI_DMACplt;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800421a:	4a4b      	ldr	r2, [pc, #300]	; (8004348 <HAL_OSPI_Transmit_DMA+0x258>)
 800421c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Set the DMA Half transfer complete callback */
        hospi->hdma->XferHalfCpltCallback = OSPI_DMAHalfCplt;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004222:	4a4a      	ldr	r2, [pc, #296]	; (800434c <HAL_OSPI_Transmit_DMA+0x25c>)
 8004224:	665a      	str	r2, [r3, #100]	; 0x64

        /* Set the DMA error callback */
        hospi->hdma->XferErrorCallback = OSPI_DMAError;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800422a:	4a49      	ldr	r2, [pc, #292]	; (8004350 <HAL_OSPI_Transmit_DMA+0x260>)
 800422c:	669a      	str	r2, [r3, #104]	; 0x68

        /* Clear the DMA abort callback */
        hospi->hdma->XferAbortCallback = NULL;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004232:	2200      	movs	r2, #0
 8004234:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Enable the transmit DMA Channel */
        if ((hospi->hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800423a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800423c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004240:	2b00      	cmp	r3, #0
 8004242:	d037      	beq.n	80042b4 <HAL_OSPI_Transmit_DMA+0x1c4>
        {
          if (hospi->hdma->LinkedListQueue != NULL)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004248:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800424a:	2b00      	cmp	r3, #0
 800424c:	d029      	beq.n	80042a2 <HAL_OSPI_Transmit_DMA+0x1b2>
          {
            /* Enable the DMA channel */
            MODIFY_REG(p_queue->Head->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET], \
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f023 1208 	bic.w	r2, r3, #524296	; 0x80008
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f042 0208 	orr.w	r2, r2, #8
 8004260:	601a      	str	r2, [r3, #0]
                       (DMA_CTR1_SINC | DMA_CTR1_DINC), (DMA_SINC_INCREMENTED | DMA_DINC_FIXED));
            MODIFY_REG(p_queue->Head->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET], \
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	685a      	ldr	r2, [r3, #4]
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004270:	605a      	str	r2, [r3, #4]
                       DMA_CTR2_DREQ, DMA_MEMORY_TO_PERIPH);
            /* Set DMA data size*/
            p_queue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = hospi->XferSize;
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800427a:	609a      	str	r2, [r3, #8]
            /* Set DMA source address */
            p_queue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)pData;
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	683a      	ldr	r2, [r7, #0]
 8004282:	60da      	str	r2, [r3, #12]
            /* Set DMA destination address */
            p_queue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)&hospi->Instance->DR;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	611a      	str	r2, [r3, #16]
            status = HAL_DMAEx_List_Start_IT(hospi->hdma);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004296:	4618      	mov	r0, r3
 8004298:	f7fe ff74 	bl	8003184 <HAL_DMAEx_List_Start_IT>
 800429c:	4603      	mov	r3, r0
 800429e:	75fb      	strb	r3, [r7, #23]
 80042a0:	e02b      	b.n	80042fa <HAL_OSPI_Transmit_DMA+0x20a>
          }
          else
          {
            /* Set Error Code */
            hospi->ErrorCode = HAL_OSPI_ERROR_DMA;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2204      	movs	r2, #4
 80042a6:	655a      	str	r2, [r3, #84]	; 0x54

            /* Change OSPI state */
            hospi->State = HAL_OSPI_STATE_READY;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2202      	movs	r2, #2
 80042ac:	651a      	str	r2, [r3, #80]	; 0x50

            /* Return function status */
            status = HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	75fb      	strb	r3, [r7, #23]
 80042b2:	e022      	b.n	80042fa <HAL_OSPI_Transmit_DMA+0x20a>
          }
        }
        else
        {
          /* Configure the direction of the DMA */
          MODIFY_REG(hospi->hdma->Instance->CTR1, (DMA_CTR1_SINC | DMA_CTR1_DINC), \
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042bc:	f023 1208 	bic.w	r2, r3, #524296	; 0x80008
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f042 0208 	orr.w	r2, r2, #8
 80042ca:	641a      	str	r2, [r3, #64]	; 0x40
                     (DMA_SINC_INCREMENTED | DMA_DINC_FIXED));
          MODIFY_REG(hospi->hdma->Instance->CTR2, DMA_CTR2_DREQ, DMA_MEMORY_TO_PERIPH);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80042de:	645a      	str	r2, [r3, #68]	; 0x44

          status = HAL_DMA_Start_IT(hospi->hdma, (uint32_t)pData, (uint32_t)&hospi->Instance->DR, hospi->XferSize);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80042e4:	6839      	ldr	r1, [r7, #0]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	3350      	adds	r3, #80	; 0x50
 80042ec:	461a      	mov	r2, r3
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042f2:	f7fe f9e5 	bl	80026c0 <HAL_DMA_Start_IT>
 80042f6:	4603      	mov	r3, r0
 80042f8:	75fb      	strb	r3, [r7, #23]
        }

        if (status == HAL_OK)
 80042fa:	7dfb      	ldrb	r3, [r7, #23]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d110      	bne.n	8004322 <HAL_OSPI_Transmit_DMA+0x232>
        {
          /* Enable the transfer error interrupt */
          __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TE);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800430e:	601a      	str	r2, [r3, #0]

          /* Enable the DMA transfer by setting the DMAEN bit  */
          SET_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f042 0204 	orr.w	r2, r2, #4
 800431e:	601a      	str	r2, [r3, #0]
 8004320:	e00d      	b.n	800433e <HAL_OSPI_Transmit_DMA+0x24e>
        }
        else
        {
          status = HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	75fb      	strb	r3, [r7, #23]
          hospi->ErrorCode = HAL_OSPI_ERROR_DMA;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2204      	movs	r2, #4
 800432a:	655a      	str	r2, [r3, #84]	; 0x54
          hospi->State = HAL_OSPI_STATE_READY;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2202      	movs	r2, #2
 8004330:	651a      	str	r2, [r3, #80]	; 0x50
 8004332:	e004      	b.n	800433e <HAL_OSPI_Transmit_DMA+0x24e>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	75fb      	strb	r3, [r7, #23]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2210      	movs	r2, #16
 800433c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }

  /* Return function status */
  return status;
 800433e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004340:	4618      	mov	r0, r3
 8004342:	3718      	adds	r7, #24
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}
 8004348:	08005389 	.word	0x08005389
 800434c:	080053d9 	.word	0x080053d9
 8004350:	0800540f 	.word	0x0800540f

08004354 <HAL_OSPI_Receive_DMA>:
  * @note   If DMA peripheral access is configured as word, the number
  *         of data and the fifo threshold should be aligned on word
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Receive_DMA(OSPI_HandleTypeDef *hospi, uint8_t *pData)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b088      	sub	sp, #32
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800435e:	2300      	movs	r3, #0
 8004360:	77fb      	strb	r3, [r7, #31]
  uint32_t data_size = hospi->Instance->DLR + 1U;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004368:	3301      	adds	r3, #1
 800436a:	613b      	str	r3, [r7, #16]
  uint32_t addr_reg = hospi->Instance->AR;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004372:	60fb      	str	r3, [r7, #12]
  uint32_t ir_reg = hospi->Instance->IR;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800437c:	60bb      	str	r3, [r7, #8]
  DMA_QListTypeDef *p_queue = {NULL};
 800437e:	2300      	movs	r3, #0
 8004380:	61bb      	str	r3, [r7, #24]
  uint32_t data_width = DMA_DEST_DATAWIDTH_BYTE;
 8004382:	2300      	movs	r3, #0
 8004384:	617b      	str	r3, [r7, #20]
  /* Check the data pointer allocation */
  if (pData == NULL)
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d105      	bne.n	8004398 <HAL_OSPI_Receive_DMA+0x44>
  {
    status = HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2208      	movs	r2, #8
 8004394:	655a      	str	r2, [r3, #84]	; 0x54
 8004396:	e12b      	b.n	80045f0 <HAL_OSPI_Receive_DMA+0x29c>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800439c:	2b04      	cmp	r3, #4
 800439e:	f040 8122 	bne.w	80045e6 <HAL_OSPI_Receive_DMA+0x292>
    {
      if ((hospi->hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d017      	beq.n	80043e0 <HAL_OSPI_Receive_DMA+0x8c>
      {
        p_queue = hospi->hdma->LinkedListQueue;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043b6:	61bb      	str	r3, [r7, #24]
        if ((p_queue != NULL) && (p_queue->Head != NULL))
 80043b8:	69bb      	ldr	r3, [r7, #24]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d00a      	beq.n	80043d4 <HAL_OSPI_Receive_DMA+0x80>
 80043be:	69bb      	ldr	r3, [r7, #24]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d006      	beq.n	80043d4 <HAL_OSPI_Receive_DMA+0x80>
        {
          data_width = p_queue->Head->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] & DMA_CTR1_DDW_LOG2;
 80043c6:	69bb      	ldr	r3, [r7, #24]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80043d0:	617b      	str	r3, [r7, #20]
 80043d2:	e009      	b.n	80043e8 <HAL_OSPI_Receive_DMA+0x94>
        }
        else
        {
          /* Set Error Code */
          hospi->ErrorCode = HAL_OSPI_ERROR_DMA;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2204      	movs	r2, #4
 80043d8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Return function status */
          status = HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	77fb      	strb	r3, [r7, #31]
 80043de:	e003      	b.n	80043e8 <HAL_OSPI_Receive_DMA+0x94>
        }
      }
      else
      {
        data_width = hospi->hdma->Init.DestDataWidth;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043e4:	69db      	ldr	r3, [r3, #28]
 80043e6:	617b      	str	r3, [r7, #20]
      }

      /* Configure counters and size */
      if (data_width == DMA_DEST_DATAWIDTH_BYTE)
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d103      	bne.n	80043f6 <HAL_OSPI_Receive_DMA+0xa2>
      {
        hospi->XferCount = data_size;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	693a      	ldr	r2, [r7, #16]
 80043f2:	649a      	str	r2, [r3, #72]	; 0x48
 80043f4:	e030      	b.n	8004458 <HAL_OSPI_Receive_DMA+0x104>
      }
      else if (data_width == DMA_DEST_DATAWIDTH_HALFWORD)
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043fc:	d114      	bne.n	8004428 <HAL_OSPI_Receive_DMA+0xd4>
      {
        if (((data_size % 2U) != 0U) || ((hospi->Init.FifoThreshold % 2U) != 0U))
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	f003 0301 	and.w	r3, r3, #1
 8004404:	2b00      	cmp	r3, #0
 8004406:	d105      	bne.n	8004414 <HAL_OSPI_Receive_DMA+0xc0>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	f003 0301 	and.w	r3, r3, #1
 8004410:	2b00      	cmp	r3, #0
 8004412:	d005      	beq.n	8004420 <HAL_OSPI_Receive_DMA+0xcc>
        {
          /* The number of data or the fifo threshold is not aligned on halfword
          => no transfer possible with DMA peripheral access configured as halfword */
          hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2208      	movs	r2, #8
 8004418:	655a      	str	r2, [r3, #84]	; 0x54
          status = HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	77fb      	strb	r3, [r7, #31]
 800441e:	e01b      	b.n	8004458 <HAL_OSPI_Receive_DMA+0x104>
        }
        else
        {
          hospi->XferCount = data_size;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	693a      	ldr	r2, [r7, #16]
 8004424:	649a      	str	r2, [r3, #72]	; 0x48
 8004426:	e017      	b.n	8004458 <HAL_OSPI_Receive_DMA+0x104>
        }
      }
      else if (data_width == DMA_DEST_DATAWIDTH_WORD)
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800442e:	d113      	bne.n	8004458 <HAL_OSPI_Receive_DMA+0x104>
      {
        if (((data_size % 4U) != 0U) || ((hospi->Init.FifoThreshold % 4U) != 0U))
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	f003 0303 	and.w	r3, r3, #3
 8004436:	2b00      	cmp	r3, #0
 8004438:	d105      	bne.n	8004446 <HAL_OSPI_Receive_DMA+0xf2>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	f003 0303 	and.w	r3, r3, #3
 8004442:	2b00      	cmp	r3, #0
 8004444:	d005      	beq.n	8004452 <HAL_OSPI_Receive_DMA+0xfe>
        {
          /* The number of data or the fifo threshold is not aligned on word
          => no transfer possible with DMA peripheral access configured as word */
          hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2208      	movs	r2, #8
 800444a:	655a      	str	r2, [r3, #84]	; 0x54
          status = HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	77fb      	strb	r3, [r7, #31]
 8004450:	e002      	b.n	8004458 <HAL_OSPI_Receive_DMA+0x104>
        }
        else
        {
          hospi->XferCount = data_size;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	693a      	ldr	r2, [r7, #16]
 8004456:	649a      	str	r2, [r3, #72]	; 0x48
      else
      {
        /* Nothing to do */
      }

      if (status == HAL_OK)
 8004458:	7ffb      	ldrb	r3, [r7, #31]
 800445a:	2b00      	cmp	r3, #0
 800445c:	f040 80c8 	bne.w	80045f0 <HAL_OSPI_Receive_DMA+0x29c>
      {
        hospi->XferSize  = hospi->XferCount;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	645a      	str	r2, [r3, #68]	; 0x44
        hospi->pBuffPtr  = pData;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	683a      	ldr	r2, [r7, #0]
 800446c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Configure CR register with functional mode as indirect read */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004480:	601a      	str	r2, [r3, #0]

        /* Clear flags related to interrupt */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TE | HAL_OSPI_FLAG_TC);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	2203      	movs	r2, #3
 8004488:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the state */
        hospi->State = HAL_OSPI_STATE_BUSY_RX;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2228      	movs	r2, #40	; 0x28
 800448e:	651a      	str	r2, [r3, #80]	; 0x50

        /* Set the DMA transfer complete callback */
        hospi->hdma->XferCpltCallback = OSPI_DMACplt;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004494:	4a59      	ldr	r2, [pc, #356]	; (80045fc <HAL_OSPI_Receive_DMA+0x2a8>)
 8004496:	661a      	str	r2, [r3, #96]	; 0x60

        /* Set the DMA Half transfer complete callback */
        hospi->hdma->XferHalfCpltCallback = OSPI_DMAHalfCplt;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800449c:	4a58      	ldr	r2, [pc, #352]	; (8004600 <HAL_OSPI_Receive_DMA+0x2ac>)
 800449e:	665a      	str	r2, [r3, #100]	; 0x64

        /* Set the DMA error callback */
        hospi->hdma->XferErrorCallback = OSPI_DMAError;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044a4:	4a57      	ldr	r2, [pc, #348]	; (8004604 <HAL_OSPI_Receive_DMA+0x2b0>)
 80044a6:	669a      	str	r2, [r3, #104]	; 0x68

        /* Clear the DMA abort callback */
        hospi->hdma->XferAbortCallback = NULL;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044ac:	2200      	movs	r2, #0
 80044ae:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Enable the transmit DMA Channel */
        if ((hospi->hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d037      	beq.n	800452e <HAL_OSPI_Receive_DMA+0x1da>
        {
          if (hospi->hdma->LinkedListQueue != NULL)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d029      	beq.n	800451c <HAL_OSPI_Receive_DMA+0x1c8>
          {
            /* Enable the DMA channel */
            MODIFY_REG(p_queue->Head->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET], \
 80044c8:	69bb      	ldr	r3, [r7, #24]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f023 1208 	bic.w	r2, r3, #524296	; 0x80008
 80044d2:	69bb      	ldr	r3, [r7, #24]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80044da:	601a      	str	r2, [r3, #0]
                       (DMA_CTR1_SINC | DMA_CTR1_DINC), (DMA_SINC_FIXED | DMA_DINC_INCREMENTED));
            MODIFY_REG(p_queue->Head->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET], \
 80044dc:	69bb      	ldr	r3, [r7, #24]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	685a      	ldr	r2, [r3, #4]
 80044e2:	69bb      	ldr	r3, [r7, #24]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044ea:	605a      	str	r2, [r3, #4]
                       DMA_CTR2_DREQ, DMA_PERIPH_TO_MEMORY);
            /* Set DMA data size */
            p_queue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = hospi->XferSize;
 80044ec:	69bb      	ldr	r3, [r7, #24]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	687a      	ldr	r2, [r7, #4]
 80044f2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80044f4:	609a      	str	r2, [r3, #8]
            /* Set DMA source address */
            p_queue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)&hospi->Instance->DR;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f103 0250 	add.w	r2, r3, #80	; 0x50
 80044fe:	69bb      	ldr	r3, [r7, #24]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	60da      	str	r2, [r3, #12]
            /* Set DMA destination address */
            p_queue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)pData;
 8004504:	69bb      	ldr	r3, [r7, #24]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	683a      	ldr	r2, [r7, #0]
 800450a:	611a      	str	r2, [r3, #16]

            status = HAL_DMAEx_List_Start_IT(hospi->hdma);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004510:	4618      	mov	r0, r3
 8004512:	f7fe fe37 	bl	8003184 <HAL_DMAEx_List_Start_IT>
 8004516:	4603      	mov	r3, r0
 8004518:	77fb      	strb	r3, [r7, #31]
 800451a:	e02b      	b.n	8004574 <HAL_OSPI_Receive_DMA+0x220>
          }
          else
          {
            /* Set Error Code */
            hospi->ErrorCode = HAL_OSPI_ERROR_DMA;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2204      	movs	r2, #4
 8004520:	655a      	str	r2, [r3, #84]	; 0x54

            /* Change OSPI state */
            hospi->State = HAL_OSPI_STATE_READY;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2202      	movs	r2, #2
 8004526:	651a      	str	r2, [r3, #80]	; 0x50

            /* Return function status */
            status = HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	77fb      	strb	r3, [r7, #31]
 800452c:	e022      	b.n	8004574 <HAL_OSPI_Receive_DMA+0x220>


        else
        {
          /* Configure the direction of the DMA */
          MODIFY_REG(hospi->hdma->Instance->CTR1, (DMA_CTR1_SINC | DMA_CTR1_DINC), \
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004536:	f023 1208 	bic.w	r2, r3, #524296	; 0x80008
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8004544:	641a      	str	r2, [r3, #64]	; 0x40
                     (DMA_SINC_FIXED | DMA_DINC_INCREMENTED));
          MODIFY_REG(hospi->hdma->Instance->CTR2, DMA_CTR2_DREQ, DMA_PERIPH_TO_MEMORY);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004558:	645a      	str	r2, [r3, #68]	; 0x44

          status = HAL_DMA_Start_IT(hospi->hdma, (uint32_t)&hospi->Instance->DR, (uint32_t)pData, hospi->XferSize);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	3350      	adds	r3, #80	; 0x50
 8004564:	4619      	mov	r1, r3
 8004566:	683a      	ldr	r2, [r7, #0]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800456c:	f7fe f8a8 	bl	80026c0 <HAL_DMA_Start_IT>
 8004570:	4603      	mov	r3, r0
 8004572:	77fb      	strb	r3, [r7, #31]
        }
        if (status == HAL_OK)
 8004574:	7ffb      	ldrb	r3, [r7, #31]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d12c      	bne.n	80045d4 <HAL_OSPI_Receive_DMA+0x280>
        {
          /* Enable the transfer error interrupt */
          __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TE);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004588:	601a      	str	r2, [r3, #0]

          /* Trig the transfer by re-writing address or instruction register */
          if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004592:	d104      	bne.n	800459e <HAL_OSPI_Receive_DMA+0x24a>
          {
            WRITE_REG(hospi->Instance->AR, addr_reg);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	68fa      	ldr	r2, [r7, #12]
 800459a:	649a      	str	r2, [r3, #72]	; 0x48
 800459c:	e011      	b.n	80045c2 <HAL_OSPI_Receive_DMA+0x26e>
          }
          else
          {
            if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80045a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d004      	beq.n	80045b8 <HAL_OSPI_Receive_DMA+0x264>
            {
              WRITE_REG(hospi->Instance->AR, addr_reg);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	68fa      	ldr	r2, [r7, #12]
 80045b4:	649a      	str	r2, [r3, #72]	; 0x48
 80045b6:	e004      	b.n	80045c2 <HAL_OSPI_Receive_DMA+0x26e>
            }
            else
            {
              WRITE_REG(hospi->Instance->IR, ir_reg);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	68ba      	ldr	r2, [r7, #8]
 80045be:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            }
          }

          /* Enable the DMA transfer by setting the DMAEN bit  */
          SET_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f042 0204 	orr.w	r2, r2, #4
 80045d0:	601a      	str	r2, [r3, #0]
 80045d2:	e00d      	b.n	80045f0 <HAL_OSPI_Receive_DMA+0x29c>
        }
        else
        {
          status = HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	77fb      	strb	r3, [r7, #31]
          hospi->ErrorCode = HAL_OSPI_ERROR_DMA;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2204      	movs	r2, #4
 80045dc:	655a      	str	r2, [r3, #84]	; 0x54
          hospi->State = HAL_OSPI_STATE_READY;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2202      	movs	r2, #2
 80045e2:	651a      	str	r2, [r3, #80]	; 0x50
 80045e4:	e004      	b.n	80045f0 <HAL_OSPI_Receive_DMA+0x29c>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2210      	movs	r2, #16
 80045ee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }

  /* Return function status */
  return status;
 80045f0:	7ffb      	ldrb	r3, [r7, #31]
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3720      	adds	r7, #32
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	bf00      	nop
 80045fc:	08005389 	.word	0x08005389
 8004600:	080053d9 	.word	0x080053d9
 8004604:	0800540f 	.word	0x0800540f

08004608 <HAL_OSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_AutoPolling(OSPI_HandleTypeDef *hospi, OSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b08a      	sub	sp, #40	; 0x28
 800460c:	af02      	add	r7, sp, #8
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	60b9      	str	r1, [r7, #8]
 8004612:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004614:	f7fd fd08 	bl	8002028 <HAL_GetTick>
 8004618:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = hospi->Instance->AR;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004620:	617b      	str	r3, [r7, #20]
  uint32_t ir_reg = hospi->Instance->IR;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800462a:	613b      	str	r3, [r7, #16]
  assert_param(IS_OSPI_AUTOMATIC_STOP(cfg->AutomaticStop));
  assert_param(IS_OSPI_INTERVAL(cfg->Interval));
  assert_param(IS_OSPI_STATUS_BYTES_SIZE(dlr_reg + 1U));

  /* Check the state */
  if ((hospi->State == HAL_OSPI_STATE_CMD_CFG) && (cfg->AutomaticStop == HAL_OSPI_AUTOMATIC_STOP_ENABLE))
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004630:	2b04      	cmp	r3, #4
 8004632:	d164      	bne.n	80046fe <HAL_OSPI_AutoPolling+0xf6>
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	68db      	ldr	r3, [r3, #12]
 8004638:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800463c:	d15f      	bne.n	80046fe <HAL_OSPI_AutoPolling+0xf6>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	9300      	str	r3, [sp, #0]
 8004642:	69bb      	ldr	r3, [r7, #24]
 8004644:	2200      	movs	r2, #0
 8004646:	2120      	movs	r1, #32
 8004648:	68f8      	ldr	r0, [r7, #12]
 800464a:	f000 ff49 	bl	80054e0 <OSPI_WaitFlagStateUntilTimeout>
 800464e:	4603      	mov	r3, r0
 8004650:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 8004652:	7ffb      	ldrb	r3, [r7, #31]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d158      	bne.n	800470a <HAL_OSPI_AutoPolling+0x102>
    {
      /* Configure registers */
      WRITE_REG(hospi->Instance->PSMAR, cfg->Match);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	68ba      	ldr	r2, [r7, #8]
 800465e:	6812      	ldr	r2, [r2, #0]
 8004660:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      WRITE_REG(hospi->Instance->PSMKR, cfg->Mask);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	68ba      	ldr	r2, [r7, #8]
 800466a:	6852      	ldr	r2, [r2, #4]
 800466c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      WRITE_REG(hospi->Instance->PIR,   cfg->Interval);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	68ba      	ldr	r2, [r7, #8]
 8004676:	6912      	ldr	r2, [r2, #16]
 8004678:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      MODIFY_REG(hospi->Instance->CR, (OCTOSPI_CR_PMM | OCTOSPI_CR_APMS | OCTOSPI_CR_FMODE),
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f023 5243 	bic.w	r2, r3, #817889280	; 0x30c00000
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	6899      	ldr	r1, [r3, #8]
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	430b      	orrs	r3, r1
 8004690:	431a      	orrs	r2, r3
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800469a:	601a      	str	r2, [r3, #0]
                 (cfg->MatchMode | cfg->AutomaticStop | OSPI_FUNCTIONAL_MODE_AUTO_POLLING));

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80046a4:	d104      	bne.n	80046b0 <HAL_OSPI_AutoPolling+0xa8>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	697a      	ldr	r2, [r7, #20]
 80046ac:	649a      	str	r2, [r3, #72]	; 0x48
 80046ae:	e011      	b.n	80046d4 <HAL_OSPI_AutoPolling+0xcc>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80046b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d004      	beq.n	80046ca <HAL_OSPI_AutoPolling+0xc2>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	697a      	ldr	r2, [r7, #20]
 80046c6:	649a      	str	r2, [r3, #72]	; 0x48
 80046c8:	e004      	b.n	80046d4 <HAL_OSPI_AutoPolling+0xcc>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	693a      	ldr	r2, [r7, #16]
 80046d0:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        }
      }

      /* Wait till status match flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_SM, SET, tickstart, Timeout);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	9300      	str	r3, [sp, #0]
 80046d8:	69bb      	ldr	r3, [r7, #24]
 80046da:	2201      	movs	r2, #1
 80046dc:	2108      	movs	r1, #8
 80046de:	68f8      	ldr	r0, [r7, #12]
 80046e0:	f000 fefe 	bl	80054e0 <OSPI_WaitFlagStateUntilTimeout>
 80046e4:	4603      	mov	r3, r0
 80046e6:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 80046e8:	7ffb      	ldrb	r3, [r7, #31]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d10d      	bne.n	800470a <HAL_OSPI_AutoPolling+0x102>
      {
        /* Clear status match flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_SM);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	2208      	movs	r2, #8
 80046f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2202      	movs	r2, #2
 80046fa:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 80046fc:	e005      	b.n	800470a <HAL_OSPI_AutoPolling+0x102>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2210      	movs	r2, #16
 8004706:	655a      	str	r2, [r3, #84]	; 0x54
 8004708:	e000      	b.n	800470c <HAL_OSPI_AutoPolling+0x104>
    if (status == HAL_OK)
 800470a:	bf00      	nop
  }

  /* Return function status */
  return status;
 800470c:	7ffb      	ldrb	r3, [r7, #31]
}
 800470e:	4618      	mov	r0, r3
 8004710:	3720      	adds	r7, #32
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}

08004716 <HAL_OSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_ErrorCallback(OSPI_HandleTypeDef *hospi)
{
 8004716:	b480      	push	{r7}
 8004718:	b083      	sub	sp, #12
 800471a:	af00      	add	r7, sp, #0
 800471c:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_ErrorCallback could be implemented in the user file
   */
}
 800471e:	bf00      	nop
 8004720:	370c      	adds	r7, #12
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr

0800472a <HAL_OSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_AbortCpltCallback(OSPI_HandleTypeDef *hospi)
{
 800472a:	b480      	push	{r7}
 800472c:	b083      	sub	sp, #12
 800472e:	af00      	add	r7, sp, #0
 8004730:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_AbortCpltCallback could be implemented in the user file
   */
}
 8004732:	bf00      	nop
 8004734:	370c      	adds	r7, #12
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr

0800473e <HAL_OSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_FifoThresholdCallback(OSPI_HandleTypeDef *hospi)
{
 800473e:	b480      	push	{r7}
 8004740:	b083      	sub	sp, #12
 8004742:	af00      	add	r7, sp, #0
 8004744:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 8004746:	bf00      	nop
 8004748:	370c      	adds	r7, #12
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr

08004752 <HAL_OSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_CmdCpltCallback(OSPI_HandleTypeDef *hospi)
{
 8004752:	b480      	push	{r7}
 8004754:	b083      	sub	sp, #12
 8004756:	af00      	add	r7, sp, #0
 8004758:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_CmdCpltCallback could be implemented in the user file
   */
}
 800475a:	bf00      	nop
 800475c:	370c      	adds	r7, #12
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr

08004766 <HAL_OSPI_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_RxHalfCpltCallback(OSPI_HandleTypeDef *hospi)
{
 8004766:	b480      	push	{r7}
 8004768:	b083      	sub	sp, #12
 800476a:	af00      	add	r7, sp, #0
 800476c:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_RxHalfCpltCallback could be implemented in the user file
   */
}
 800476e:	bf00      	nop
 8004770:	370c      	adds	r7, #12
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr

0800477a <HAL_OSPI_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_TxHalfCpltCallback(OSPI_HandleTypeDef *hospi)
{
 800477a:	b480      	push	{r7}
 800477c:	b083      	sub	sp, #12
 800477e:	af00      	add	r7, sp, #0
 8004780:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004782:	bf00      	nop
 8004784:	370c      	adds	r7, #12
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr

0800478e <HAL_OSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_StatusMatchCallback(OSPI_HandleTypeDef *hospi)
{
 800478e:	b480      	push	{r7}
 8004790:	b083      	sub	sp, #12
 8004792:	af00      	add	r7, sp, #0
 8004794:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_StatusMatchCallback could be implemented in the user file
   */
}
 8004796:	bf00      	nop
 8004798:	370c      	adds	r7, #12
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr

080047a2 <HAL_OSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_TimeOutCallback(OSPI_HandleTypeDef *hospi)
{
 80047a2:	b480      	push	{r7}
 80047a4:	b083      	sub	sp, #12
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_TimeOutCallback could be implemented in the user file
   */
}
 80047aa:	bf00      	nop
 80047ac:	370c      	adds	r7, #12
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr

080047b6 <HAL_OSPI_Abort>:
  * @brief  Abort the current transmission.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Abort(OSPI_HandleTypeDef *hospi)
{
 80047b6:	b580      	push	{r7, lr}
 80047b8:	b088      	sub	sp, #32
 80047ba:	af02      	add	r7, sp, #8
 80047bc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047be:	2300      	movs	r3, #0
 80047c0:	75fb      	strb	r3, [r7, #23]
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 80047c2:	f7fd fc31 	bl	8002028 <HAL_GetTick>
 80047c6:	6138      	str	r0, [r7, #16]

  /* Check if the state is in one of the busy or configured states */
  state = hospi->State;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047cc:	60fb      	str	r3, [r7, #12]
  if (((state & OSPI_BUSY_STATE_MASK) != 0U) || ((state & OSPI_CFG_STATE_MASK) != 0U))
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	f003 0308 	and.w	r3, r3, #8
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d104      	bne.n	80047e2 <HAL_OSPI_Abort+0x2c>
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f003 0304 	and.w	r3, r3, #4
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d052      	beq.n	8004888 <HAL_OSPI_Abort+0xd2>
  {
    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 0304 	and.w	r3, r3, #4
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d014      	beq.n	800481a <HAL_OSPI_Abort+0x64>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f022 0204 	bic.w	r2, r2, #4
 80047fe:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      status = HAL_DMA_Abort(hospi->hdma);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004804:	4618      	mov	r0, r3
 8004806:	f7fd ffbb 	bl	8002780 <HAL_DMA_Abort>
 800480a:	4603      	mov	r3, r0
 800480c:	75fb      	strb	r3, [r7, #23]
      if (status != HAL_OK)
 800480e:	7dfb      	ldrb	r3, [r7, #23]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d002      	beq.n	800481a <HAL_OSPI_Abort+0x64>
      {
        hospi->ErrorCode = HAL_OSPI_ERROR_DMA;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2204      	movs	r2, #4
 8004818:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	6a1b      	ldr	r3, [r3, #32]
 8004820:	f003 0320 	and.w	r3, r3, #32
 8004824:	2b00      	cmp	r3, #0
 8004826:	d02b      	beq.n	8004880 <HAL_OSPI_Abort+0xca>
    {
      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f042 0202 	orr.w	r2, r2, #2
 8004836:	601a      	str	r2, [r3, #0]

      /* Wait until the transfer complete flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, hospi->Timeout);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800483c:	9300      	str	r3, [sp, #0]
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	2201      	movs	r2, #1
 8004842:	2102      	movs	r1, #2
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f000 fe4b 	bl	80054e0 <OSPI_WaitFlagStateUntilTimeout>
 800484a:	4603      	mov	r3, r0
 800484c:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 800484e:	7dfb      	ldrb	r3, [r7, #23]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d11f      	bne.n	8004894 <HAL_OSPI_Abort+0xde>
      {
        /* Clear transfer complete flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	2202      	movs	r2, #2
 800485a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Wait until the busy flag is reset to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004860:	9300      	str	r3, [sp, #0]
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	2200      	movs	r2, #0
 8004866:	2120      	movs	r1, #32
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f000 fe39 	bl	80054e0 <OSPI_WaitFlagStateUntilTimeout>
 800486e:	4603      	mov	r3, r0
 8004870:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8004872:	7dfb      	ldrb	r3, [r7, #23]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d10d      	bne.n	8004894 <HAL_OSPI_Abort+0xde>
        {
          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2202      	movs	r2, #2
 800487c:	651a      	str	r2, [r3, #80]	; 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 800487e:	e009      	b.n	8004894 <HAL_OSPI_Abort+0xde>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2202      	movs	r2, #2
 8004884:	651a      	str	r2, [r3, #80]	; 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8004886:	e005      	b.n	8004894 <HAL_OSPI_Abort+0xde>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	75fb      	strb	r3, [r7, #23]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2210      	movs	r2, #16
 8004890:	655a      	str	r2, [r3, #84]	; 0x54
 8004892:	e000      	b.n	8004896 <HAL_OSPI_Abort+0xe0>
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8004894:	bf00      	nop
  }

  /* Return function status */
  return status;
 8004896:	7dfb      	ldrb	r3, [r7, #23]
}
 8004898:	4618      	mov	r0, r3
 800489a:	3718      	adds	r7, #24
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}

080048a0 <HAL_OSPI_Abort_IT>:
  * @brief  Abort the current transmission (non-blocking function)
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Abort_IT(OSPI_HandleTypeDef *hospi)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b084      	sub	sp, #16
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048a8:	2300      	movs	r3, #0
 80048aa:	73fb      	strb	r3, [r7, #15]
  uint32_t state;

  /* Check if the state is in one of the busy or configured states */
  state = hospi->State;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048b0:	60bb      	str	r3, [r7, #8]
  if (((state & OSPI_BUSY_STATE_MASK) != 0U) || ((state & OSPI_CFG_STATE_MASK) != 0U))
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	f003 0308 	and.w	r3, r3, #8
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d104      	bne.n	80048c6 <HAL_OSPI_Abort_IT+0x26>
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	f003 0304 	and.w	r3, r3, #4
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d050      	beq.n	8004968 <HAL_OSPI_Abort_IT+0xc8>
  {
    /* Disable all interrupts */
    __HAL_OSPI_DISABLE_IT(hospi, (HAL_OSPI_IT_TO | HAL_OSPI_IT_SM | HAL_OSPI_IT_FT | HAL_OSPI_IT_TC | HAL_OSPI_IT_TE));
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 80048d4:	601a      	str	r2, [r3, #0]

    /* Update state */
    hospi->State = HAL_OSPI_STATE_ABORT;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80048dc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 0304 	and.w	r3, r3, #4
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d01a      	beq.n	8004922 <HAL_OSPI_Abort_IT+0x82>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f022 0204 	bic.w	r2, r2, #4
 80048fa:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      hospi->hdma->XferAbortCallback = OSPI_DMAAbortCplt;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004900:	4a1f      	ldr	r2, [pc, #124]	; (8004980 <HAL_OSPI_Abort_IT+0xe0>)
 8004902:	66da      	str	r2, [r3, #108]	; 0x6c
      if (HAL_DMA_Abort_IT(hospi->hdma) != HAL_OK)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004908:	4618      	mov	r0, r3
 800490a:	f7fd ffb5 	bl	8002878 <HAL_DMA_Abort_IT>
 800490e:	4603      	mov	r3, r0
 8004910:	2b00      	cmp	r3, #0
 8004912:	d02f      	beq.n	8004974 <HAL_OSPI_Abort_IT+0xd4>
      {
        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2202      	movs	r2, #2
 8004918:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->AbortCpltCallback(hospi);
#else
        HAL_OSPI_AbortCpltCallback(hospi);
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f7ff ff05 	bl	800472a <HAL_OSPI_AbortCpltCallback>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8004920:	e028      	b.n	8004974 <HAL_OSPI_Abort_IT+0xd4>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)*/
      }
    }
    else
    {
      if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	6a1b      	ldr	r3, [r3, #32]
 8004928:	f003 0320 	and.w	r3, r3, #32
 800492c:	2b00      	cmp	r3, #0
 800492e:	d014      	beq.n	800495a <HAL_OSPI_Abort_IT+0xba>
      {
        /* Clear transfer complete flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	2202      	movs	r2, #2
 8004936:	625a      	str	r2, [r3, #36]	; 0x24

        /* Enable the transfer complete interrupts */
        __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TC);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004946:	601a      	str	r2, [r3, #0]

        /* Perform an abort of the OctoSPI */
        SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f042 0202 	orr.w	r2, r2, #2
 8004956:	601a      	str	r2, [r3, #0]
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8004958:	e00c      	b.n	8004974 <HAL_OSPI_Abort_IT+0xd4>
      }
      else
      {
        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2202      	movs	r2, #2
 800495e:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->AbortCpltCallback(hospi);
#else
        HAL_OSPI_AbortCpltCallback(hospi);
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f7ff fee2 	bl	800472a <HAL_OSPI_AbortCpltCallback>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8004966:	e005      	b.n	8004974 <HAL_OSPI_Abort_IT+0xd4>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	73fb      	strb	r3, [r7, #15]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2210      	movs	r2, #16
 8004970:	655a      	str	r2, [r3, #84]	; 0x54
 8004972:	e000      	b.n	8004976 <HAL_OSPI_Abort_IT+0xd6>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8004974:	bf00      	nop
  }

  /* Return function status */
  return status;
 8004976:	7bfb      	ldrb	r3, [r7, #15]
}
 8004978:	4618      	mov	r0, r3
 800497a:	3710      	adds	r7, #16
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}
 8004980:	08005469 	.word	0x08005469

08004984 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8004984:	b480      	push	{r7}
 8004986:	b083      	sub	sp, #12
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	683a      	ldr	r2, [r7, #0]
 8004992:	659a      	str	r2, [r3, #88]	; 0x58
  return HAL_OK;
 8004994:	2300      	movs	r3, #0
}
 8004996:	4618      	mov	r0, r3
 8004998:	370c      	adds	r7, #12
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr
	...

080049a4 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b094      	sub	sp, #80	; 0x50
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	60f8      	str	r0, [r7, #12]
 80049ac:	60b9      	str	r1, [r7, #8]
 80049ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049b0:	2300      	movs	r3, #0
 80049b2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 80049b6:	2300      	movs	r3, #0
 80049b8:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  assert_param(IS_OSPIM_DQS_PORT(cfg->DQSPort));
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));

  if (hospi->Instance == (OCTOSPI_TypeDef *)OCTOSPI1)
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a9d      	ldr	r2, [pc, #628]	; (8004c38 <HAL_OSPIM_Config+0x294>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d105      	bne.n	80049d2 <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 80049c6:	2300      	movs	r3, #0
 80049c8:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 1U;
 80049ca:	2301      	movs	r3, #1
 80049cc:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 80049d0:	e004      	b.n	80049dc <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 80049d2:	2301      	movs	r3, #1
 80049d4:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 0U;
 80049d6:	2300      	movs	r3, #0
 80049d8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80049dc:	2300      	movs	r3, #0
 80049de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80049e2:	e01d      	b.n	8004a20 <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 80049e4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80049e8:	3301      	adds	r3, #1
 80049ea:	b2d8      	uxtb	r0, r3
 80049ec:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80049f0:	f107 0114 	add.w	r1, r7, #20
 80049f4:	4613      	mov	r3, r2
 80049f6:	005b      	lsls	r3, r3, #1
 80049f8:	4413      	add	r3, r2
 80049fa:	00db      	lsls	r3, r3, #3
 80049fc:	440b      	add	r3, r1
 80049fe:	4619      	mov	r1, r3
 8004a00:	f000 ff28 	bl	8005854 <OSPIM_GetConfig>
 8004a04:	4603      	mov	r3, r0
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d005      	beq.n	8004a16 <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2208      	movs	r2, #8
 8004a14:	655a      	str	r2, [r3, #84]	; 0x54
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8004a16:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004a1a:	3301      	adds	r3, #1
 8004a1c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8004a20:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d9dd      	bls.n	80049e4 <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 8004a28:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	f040 849e 	bne.w	800536e <HAL_OSPIM_Config+0x9ca>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8004a32:	4b81      	ldr	r3, [pc, #516]	; (8004c38 <HAL_OSPIM_Config+0x294>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 0301 	and.w	r3, r3, #1
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d00b      	beq.n	8004a56 <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8004a3e:	4b7e      	ldr	r3, [pc, #504]	; (8004c38 <HAL_OSPIM_Config+0x294>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a7d      	ldr	r2, [pc, #500]	; (8004c38 <HAL_OSPIM_Config+0x294>)
 8004a44:	f023 0301 	bic.w	r3, r3, #1
 8004a48:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8004a4a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004a4e:	f043 0301 	orr.w	r3, r3, #1
 8004a52:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8004a56:	4b79      	ldr	r3, [pc, #484]	; (8004c3c <HAL_OSPIM_Config+0x298>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 0301 	and.w	r3, r3, #1
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d00b      	beq.n	8004a7a <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8004a62:	4b76      	ldr	r3, [pc, #472]	; (8004c3c <HAL_OSPIM_Config+0x298>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a75      	ldr	r2, [pc, #468]	; (8004c3c <HAL_OSPIM_Config+0x298>)
 8004a68:	f023 0301 	bic.w	r3, r3, #1
 8004a6c:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8004a6e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004a72:	f043 0302 	orr.w	r3, r3, #2
 8004a76:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8004a7a:	4971      	ldr	r1, [pc, #452]	; (8004c40 <HAL_OSPIM_Config+0x29c>)
 8004a7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a7e:	4613      	mov	r3, r2
 8004a80:	005b      	lsls	r3, r3, #1
 8004a82:	4413      	add	r3, r2
 8004a84:	00db      	lsls	r3, r3, #3
 8004a86:	3350      	adds	r3, #80	; 0x50
 8004a88:	443b      	add	r3, r7
 8004a8a:	3b34      	subs	r3, #52	; 0x34
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	3b01      	subs	r3, #1
 8004a90:	009b      	lsls	r3, r3, #2
 8004a92:	440b      	add	r3, r1
 8004a94:	6859      	ldr	r1, [r3, #4]
 8004a96:	486a      	ldr	r0, [pc, #424]	; (8004c40 <HAL_OSPIM_Config+0x29c>)
 8004a98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a9a:	4613      	mov	r3, r2
 8004a9c:	005b      	lsls	r3, r3, #1
 8004a9e:	4413      	add	r3, r2
 8004aa0:	00db      	lsls	r3, r3, #3
 8004aa2:	3350      	adds	r3, #80	; 0x50
 8004aa4:	443b      	add	r3, r7
 8004aa6:	3b34      	subs	r3, #52	; 0x34
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	3b01      	subs	r3, #1
 8004aac:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	4403      	add	r3, r0
 8004ab4:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8004ab6:	4b62      	ldr	r3, [pc, #392]	; (8004c40 <HAL_OSPIM_Config+0x29c>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f003 0301 	and.w	r3, r3, #1
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	f000 80c0 	beq.w	8004c44 <HAL_OSPIM_Config+0x2a0>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8004ac4:	4b5e      	ldr	r3, [pc, #376]	; (8004c40 <HAL_OSPIM_Config+0x29c>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a5d      	ldr	r2, [pc, #372]	; (8004c40 <HAL_OSPIM_Config+0x29c>)
 8004aca:	f023 0301 	bic.w	r3, r3, #1
 8004ace:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 8004ad0:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	f040 8162 	bne.w	8004d9e <HAL_OSPIM_Config+0x3fa>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKSRC);
 8004ada:	4959      	ldr	r1, [pc, #356]	; (8004c40 <HAL_OSPIM_Config+0x29c>)
 8004adc:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004ae0:	4613      	mov	r3, r2
 8004ae2:	005b      	lsls	r3, r3, #1
 8004ae4:	4413      	add	r3, r2
 8004ae6:	00db      	lsls	r3, r3, #3
 8004ae8:	3350      	adds	r3, #80	; 0x50
 8004aea:	443b      	add	r3, r7
 8004aec:	3b3c      	subs	r3, #60	; 0x3c
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	3b01      	subs	r3, #1
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	440b      	add	r3, r1
 8004af6:	6859      	ldr	r1, [r3, #4]
 8004af8:	4851      	ldr	r0, [pc, #324]	; (8004c40 <HAL_OSPIM_Config+0x29c>)
 8004afa:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004afe:	4613      	mov	r3, r2
 8004b00:	005b      	lsls	r3, r3, #1
 8004b02:	4413      	add	r3, r2
 8004b04:	00db      	lsls	r3, r3, #3
 8004b06:	3350      	adds	r3, #80	; 0x50
 8004b08:	443b      	add	r3, r7
 8004b0a:	3b3c      	subs	r3, #60	; 0x3c
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	3b01      	subs	r3, #1
 8004b10:	f041 0202 	orr.w	r2, r1, #2
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	4403      	add	r3, r0
 8004b18:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8004b1a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004b1e:	4613      	mov	r3, r2
 8004b20:	005b      	lsls	r3, r3, #1
 8004b22:	4413      	add	r3, r2
 8004b24:	00db      	lsls	r3, r3, #3
 8004b26:	3350      	adds	r3, #80	; 0x50
 8004b28:	443b      	add	r3, r7
 8004b2a:	3b38      	subs	r3, #56	; 0x38
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d01f      	beq.n	8004b72 <HAL_OSPIM_Config+0x1ce>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSSRC);
 8004b32:	4943      	ldr	r1, [pc, #268]	; (8004c40 <HAL_OSPIM_Config+0x29c>)
 8004b34:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004b38:	4613      	mov	r3, r2
 8004b3a:	005b      	lsls	r3, r3, #1
 8004b3c:	4413      	add	r3, r2
 8004b3e:	00db      	lsls	r3, r3, #3
 8004b40:	3350      	adds	r3, #80	; 0x50
 8004b42:	443b      	add	r3, r7
 8004b44:	3b38      	subs	r3, #56	; 0x38
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	3b01      	subs	r3, #1
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	440b      	add	r3, r1
 8004b4e:	6859      	ldr	r1, [r3, #4]
 8004b50:	483b      	ldr	r0, [pc, #236]	; (8004c40 <HAL_OSPIM_Config+0x29c>)
 8004b52:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004b56:	4613      	mov	r3, r2
 8004b58:	005b      	lsls	r3, r3, #1
 8004b5a:	4413      	add	r3, r2
 8004b5c:	00db      	lsls	r3, r3, #3
 8004b5e:	3350      	adds	r3, #80	; 0x50
 8004b60:	443b      	add	r3, r7
 8004b62:	3b38      	subs	r3, #56	; 0x38
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	3b01      	subs	r3, #1
 8004b68:	f041 0220 	orr.w	r2, r1, #32
 8004b6c:	009b      	lsls	r3, r3, #2
 8004b6e:	4403      	add	r3, r0
 8004b70:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004b72:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004b76:	4613      	mov	r3, r2
 8004b78:	005b      	lsls	r3, r3, #1
 8004b7a:	4413      	add	r3, r2
 8004b7c:	00db      	lsls	r3, r3, #3
 8004b7e:	3350      	adds	r3, #80	; 0x50
 8004b80:	443b      	add	r3, r7
 8004b82:	3b30      	subs	r3, #48	; 0x30
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d023      	beq.n	8004bd2 <HAL_OSPIM_Config+0x22e>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], \
 8004b8a:	492d      	ldr	r1, [pc, #180]	; (8004c40 <HAL_OSPIM_Config+0x29c>)
 8004b8c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004b90:	4613      	mov	r3, r2
 8004b92:	005b      	lsls	r3, r3, #1
 8004b94:	4413      	add	r3, r2
 8004b96:	00db      	lsls	r3, r3, #3
 8004b98:	3350      	adds	r3, #80	; 0x50
 8004b9a:	443b      	add	r3, r7
 8004b9c:	3b30      	subs	r3, #48	; 0x30
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	3b01      	subs	r3, #1
 8004ba2:	f003 0301 	and.w	r3, r3, #1
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	440b      	add	r3, r1
 8004baa:	6859      	ldr	r1, [r3, #4]
 8004bac:	4824      	ldr	r0, [pc, #144]	; (8004c40 <HAL_OSPIM_Config+0x29c>)
 8004bae:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004bb2:	4613      	mov	r3, r2
 8004bb4:	005b      	lsls	r3, r3, #1
 8004bb6:	4413      	add	r3, r2
 8004bb8:	00db      	lsls	r3, r3, #3
 8004bba:	3350      	adds	r3, #80	; 0x50
 8004bbc:	443b      	add	r3, r7
 8004bbe:	3b30      	subs	r3, #48	; 0x30
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	3b01      	subs	r3, #1
 8004bc4:	f003 0301 	and.w	r3, r3, #1
 8004bc8:	f441 2280 	orr.w	r2, r1, #262144	; 0x40000
 8004bcc:	009b      	lsls	r3, r3, #2
 8004bce:	4403      	add	r3, r0
 8004bd0:	605a      	str	r2, [r3, #4]
                  OCTOSPIM_PCR_IOLSRC_1);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004bd2:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004bd6:	4613      	mov	r3, r2
 8004bd8:	005b      	lsls	r3, r3, #1
 8004bda:	4413      	add	r3, r2
 8004bdc:	00db      	lsls	r3, r3, #3
 8004bde:	3350      	adds	r3, #80	; 0x50
 8004be0:	443b      	add	r3, r7
 8004be2:	3b2c      	subs	r3, #44	; 0x2c
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	f000 80d9 	beq.w	8004d9e <HAL_OSPIM_Config+0x3fa>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], \
 8004bec:	4914      	ldr	r1, [pc, #80]	; (8004c40 <HAL_OSPIM_Config+0x29c>)
 8004bee:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004bf2:	4613      	mov	r3, r2
 8004bf4:	005b      	lsls	r3, r3, #1
 8004bf6:	4413      	add	r3, r2
 8004bf8:	00db      	lsls	r3, r3, #3
 8004bfa:	3350      	adds	r3, #80	; 0x50
 8004bfc:	443b      	add	r3, r7
 8004bfe:	3b2c      	subs	r3, #44	; 0x2c
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	3b01      	subs	r3, #1
 8004c04:	f003 0301 	and.w	r3, r3, #1
 8004c08:	009b      	lsls	r3, r3, #2
 8004c0a:	440b      	add	r3, r1
 8004c0c:	6859      	ldr	r1, [r3, #4]
 8004c0e:	480c      	ldr	r0, [pc, #48]	; (8004c40 <HAL_OSPIM_Config+0x29c>)
 8004c10:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004c14:	4613      	mov	r3, r2
 8004c16:	005b      	lsls	r3, r3, #1
 8004c18:	4413      	add	r3, r2
 8004c1a:	00db      	lsls	r3, r3, #3
 8004c1c:	3350      	adds	r3, #80	; 0x50
 8004c1e:	443b      	add	r3, r7
 8004c20:	3b2c      	subs	r3, #44	; 0x2c
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	3b01      	subs	r3, #1
 8004c26:	f003 0301 	and.w	r3, r3, #1
 8004c2a:	f041 6280 	orr.w	r2, r1, #67108864	; 0x4000000
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	4403      	add	r3, r0
 8004c32:	605a      	str	r2, [r3, #4]
 8004c34:	e0b3      	b.n	8004d9e <HAL_OSPIM_Config+0x3fa>
 8004c36:	bf00      	nop
 8004c38:	420d1400 	.word	0x420d1400
 8004c3c:	420d2400 	.word	0x420d2400
 8004c40:	420c4000 	.word	0x420c4000
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 8004c44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c46:	4613      	mov	r3, r2
 8004c48:	005b      	lsls	r3, r3, #1
 8004c4a:	4413      	add	r3, r2
 8004c4c:	00db      	lsls	r3, r3, #3
 8004c4e:	3350      	adds	r3, #80	; 0x50
 8004c50:	443b      	add	r3, r7
 8004c52:	3b3c      	subs	r3, #60	; 0x3c
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	f000 80a1 	beq.w	8004d9e <HAL_OSPIM_Config+0x3fa>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8004c5c:	4993      	ldr	r1, [pc, #588]	; (8004eac <HAL_OSPIM_Config+0x508>)
 8004c5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c60:	4613      	mov	r3, r2
 8004c62:	005b      	lsls	r3, r3, #1
 8004c64:	4413      	add	r3, r2
 8004c66:	00db      	lsls	r3, r3, #3
 8004c68:	3350      	adds	r3, #80	; 0x50
 8004c6a:	443b      	add	r3, r7
 8004c6c:	3b3c      	subs	r3, #60	; 0x3c
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	3b01      	subs	r3, #1
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	440b      	add	r3, r1
 8004c76:	6859      	ldr	r1, [r3, #4]
 8004c78:	488c      	ldr	r0, [pc, #560]	; (8004eac <HAL_OSPIM_Config+0x508>)
 8004c7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c7c:	4613      	mov	r3, r2
 8004c7e:	005b      	lsls	r3, r3, #1
 8004c80:	4413      	add	r3, r2
 8004c82:	00db      	lsls	r3, r3, #3
 8004c84:	3350      	adds	r3, #80	; 0x50
 8004c86:	443b      	add	r3, r7
 8004c88:	3b3c      	subs	r3, #60	; 0x3c
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	3b01      	subs	r3, #1
 8004c8e:	f021 0201 	bic.w	r2, r1, #1
 8004c92:	009b      	lsls	r3, r3, #2
 8004c94:	4403      	add	r3, r0
 8004c96:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8004c98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c9a:	4613      	mov	r3, r2
 8004c9c:	005b      	lsls	r3, r3, #1
 8004c9e:	4413      	add	r3, r2
 8004ca0:	00db      	lsls	r3, r3, #3
 8004ca2:	3350      	adds	r3, #80	; 0x50
 8004ca4:	443b      	add	r3, r7
 8004ca6:	3b38      	subs	r3, #56	; 0x38
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d01d      	beq.n	8004cea <HAL_OSPIM_Config+0x346>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8004cae:	497f      	ldr	r1, [pc, #508]	; (8004eac <HAL_OSPIM_Config+0x508>)
 8004cb0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004cb2:	4613      	mov	r3, r2
 8004cb4:	005b      	lsls	r3, r3, #1
 8004cb6:	4413      	add	r3, r2
 8004cb8:	00db      	lsls	r3, r3, #3
 8004cba:	3350      	adds	r3, #80	; 0x50
 8004cbc:	443b      	add	r3, r7
 8004cbe:	3b38      	subs	r3, #56	; 0x38
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	3b01      	subs	r3, #1
 8004cc4:	009b      	lsls	r3, r3, #2
 8004cc6:	440b      	add	r3, r1
 8004cc8:	6859      	ldr	r1, [r3, #4]
 8004cca:	4878      	ldr	r0, [pc, #480]	; (8004eac <HAL_OSPIM_Config+0x508>)
 8004ccc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004cce:	4613      	mov	r3, r2
 8004cd0:	005b      	lsls	r3, r3, #1
 8004cd2:	4413      	add	r3, r2
 8004cd4:	00db      	lsls	r3, r3, #3
 8004cd6:	3350      	adds	r3, #80	; 0x50
 8004cd8:	443b      	add	r3, r7
 8004cda:	3b38      	subs	r3, #56	; 0x38
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	3b01      	subs	r3, #1
 8004ce0:	f021 0210 	bic.w	r2, r1, #16
 8004ce4:	009b      	lsls	r3, r3, #2
 8004ce6:	4403      	add	r3, r0
 8004ce8:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004cea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004cec:	4613      	mov	r3, r2
 8004cee:	005b      	lsls	r3, r3, #1
 8004cf0:	4413      	add	r3, r2
 8004cf2:	00db      	lsls	r3, r3, #3
 8004cf4:	3350      	adds	r3, #80	; 0x50
 8004cf6:	443b      	add	r3, r7
 8004cf8:	3b30      	subs	r3, #48	; 0x30
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d021      	beq.n	8004d44 <HAL_OSPIM_Config+0x3a0>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8004d00:	496a      	ldr	r1, [pc, #424]	; (8004eac <HAL_OSPIM_Config+0x508>)
 8004d02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d04:	4613      	mov	r3, r2
 8004d06:	005b      	lsls	r3, r3, #1
 8004d08:	4413      	add	r3, r2
 8004d0a:	00db      	lsls	r3, r3, #3
 8004d0c:	3350      	adds	r3, #80	; 0x50
 8004d0e:	443b      	add	r3, r7
 8004d10:	3b30      	subs	r3, #48	; 0x30
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	3b01      	subs	r3, #1
 8004d16:	f003 0301 	and.w	r3, r3, #1
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	440b      	add	r3, r1
 8004d1e:	6859      	ldr	r1, [r3, #4]
 8004d20:	4862      	ldr	r0, [pc, #392]	; (8004eac <HAL_OSPIM_Config+0x508>)
 8004d22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d24:	4613      	mov	r3, r2
 8004d26:	005b      	lsls	r3, r3, #1
 8004d28:	4413      	add	r3, r2
 8004d2a:	00db      	lsls	r3, r3, #3
 8004d2c:	3350      	adds	r3, #80	; 0x50
 8004d2e:	443b      	add	r3, r7
 8004d30:	3b30      	subs	r3, #48	; 0x30
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	3b01      	subs	r3, #1
 8004d36:	f003 0301 	and.w	r3, r3, #1
 8004d3a:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	4403      	add	r3, r0
 8004d42:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004d44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d46:	4613      	mov	r3, r2
 8004d48:	005b      	lsls	r3, r3, #1
 8004d4a:	4413      	add	r3, r2
 8004d4c:	00db      	lsls	r3, r3, #3
 8004d4e:	3350      	adds	r3, #80	; 0x50
 8004d50:	443b      	add	r3, r7
 8004d52:	3b2c      	subs	r3, #44	; 0x2c
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d021      	beq.n	8004d9e <HAL_OSPIM_Config+0x3fa>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8004d5a:	4954      	ldr	r1, [pc, #336]	; (8004eac <HAL_OSPIM_Config+0x508>)
 8004d5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d5e:	4613      	mov	r3, r2
 8004d60:	005b      	lsls	r3, r3, #1
 8004d62:	4413      	add	r3, r2
 8004d64:	00db      	lsls	r3, r3, #3
 8004d66:	3350      	adds	r3, #80	; 0x50
 8004d68:	443b      	add	r3, r7
 8004d6a:	3b2c      	subs	r3, #44	; 0x2c
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	3b01      	subs	r3, #1
 8004d70:	f003 0301 	and.w	r3, r3, #1
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	440b      	add	r3, r1
 8004d78:	6859      	ldr	r1, [r3, #4]
 8004d7a:	484c      	ldr	r0, [pc, #304]	; (8004eac <HAL_OSPIM_Config+0x508>)
 8004d7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d7e:	4613      	mov	r3, r2
 8004d80:	005b      	lsls	r3, r3, #1
 8004d82:	4413      	add	r3, r2
 8004d84:	00db      	lsls	r3, r3, #3
 8004d86:	3350      	adds	r3, #80	; 0x50
 8004d88:	443b      	add	r3, r7
 8004d8a:	3b2c      	subs	r3, #44	; 0x2c
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	3b01      	subs	r3, #1
 8004d90:	f003 0301 	and.w	r3, r3, #1
 8004d94:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8004d98:	009b      	lsls	r3, r3, #2
 8004d9a:	4403      	add	r3, r0
 8004d9c:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	6819      	ldr	r1, [r3, #0]
 8004da2:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004da6:	4613      	mov	r3, r2
 8004da8:	005b      	lsls	r3, r3, #1
 8004daa:	4413      	add	r3, r2
 8004dac:	00db      	lsls	r3, r3, #3
 8004dae:	3350      	adds	r3, #80	; 0x50
 8004db0:	443b      	add	r3, r7
 8004db2:	3b3c      	subs	r3, #60	; 0x3c
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4299      	cmp	r1, r3
 8004db8:	d038      	beq.n	8004e2c <HAL_OSPIM_Config+0x488>
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	6859      	ldr	r1, [r3, #4]
 8004dbe:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004dc2:	4613      	mov	r3, r2
 8004dc4:	005b      	lsls	r3, r3, #1
 8004dc6:	4413      	add	r3, r2
 8004dc8:	00db      	lsls	r3, r3, #3
 8004dca:	3350      	adds	r3, #80	; 0x50
 8004dcc:	443b      	add	r3, r7
 8004dce:	3b38      	subs	r3, #56	; 0x38
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4299      	cmp	r1, r3
 8004dd4:	d02a      	beq.n	8004e2c <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	6899      	ldr	r1, [r3, #8]
 8004dda:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004dde:	4613      	mov	r3, r2
 8004de0:	005b      	lsls	r3, r3, #1
 8004de2:	4413      	add	r3, r2
 8004de4:	00db      	lsls	r3, r3, #3
 8004de6:	3350      	adds	r3, #80	; 0x50
 8004de8:	443b      	add	r3, r7
 8004dea:	3b34      	subs	r3, #52	; 0x34
 8004dec:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8004dee:	4299      	cmp	r1, r3
 8004df0:	d01c      	beq.n	8004e2c <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	68d9      	ldr	r1, [r3, #12]
 8004df6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004dfa:	4613      	mov	r3, r2
 8004dfc:	005b      	lsls	r3, r3, #1
 8004dfe:	4413      	add	r3, r2
 8004e00:	00db      	lsls	r3, r3, #3
 8004e02:	3350      	adds	r3, #80	; 0x50
 8004e04:	443b      	add	r3, r7
 8004e06:	3b30      	subs	r3, #48	; 0x30
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4299      	cmp	r1, r3
 8004e0c:	d00e      	beq.n	8004e2c <HAL_OSPIM_Config+0x488>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	6919      	ldr	r1, [r3, #16]
 8004e12:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004e16:	4613      	mov	r3, r2
 8004e18:	005b      	lsls	r3, r3, #1
 8004e1a:	4413      	add	r3, r2
 8004e1c:	00db      	lsls	r3, r3, #3
 8004e1e:	3350      	adds	r3, #80	; 0x50
 8004e20:	443b      	add	r3, r7
 8004e22:	3b2c      	subs	r3, #44	; 0x2c
 8004e24:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8004e26:	4299      	cmp	r1, r3
 8004e28:	f040 810e 	bne.w	8005048 <HAL_OSPIM_Config+0x6a4>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	6819      	ldr	r1, [r3, #0]
 8004e30:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004e34:	4613      	mov	r3, r2
 8004e36:	005b      	lsls	r3, r3, #1
 8004e38:	4413      	add	r3, r2
 8004e3a:	00db      	lsls	r3, r3, #3
 8004e3c:	3350      	adds	r3, #80	; 0x50
 8004e3e:	443b      	add	r3, r7
 8004e40:	3b3c      	subs	r3, #60	; 0x3c
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4299      	cmp	r1, r3
 8004e46:	d133      	bne.n	8004eb0 <HAL_OSPIM_Config+0x50c>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	6859      	ldr	r1, [r3, #4]
 8004e4c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004e50:	4613      	mov	r3, r2
 8004e52:	005b      	lsls	r3, r3, #1
 8004e54:	4413      	add	r3, r2
 8004e56:	00db      	lsls	r3, r3, #3
 8004e58:	3350      	adds	r3, #80	; 0x50
 8004e5a:	443b      	add	r3, r7
 8004e5c:	3b38      	subs	r3, #56	; 0x38
 8004e5e:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8004e60:	4299      	cmp	r1, r3
 8004e62:	d125      	bne.n	8004eb0 <HAL_OSPIM_Config+0x50c>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	68d9      	ldr	r1, [r3, #12]
 8004e68:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004e6c:	4613      	mov	r3, r2
 8004e6e:	005b      	lsls	r3, r3, #1
 8004e70:	4413      	add	r3, r2
 8004e72:	00db      	lsls	r3, r3, #3
 8004e74:	3350      	adds	r3, #80	; 0x50
 8004e76:	443b      	add	r3, r7
 8004e78:	3b30      	subs	r3, #48	; 0x30
 8004e7a:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8004e7c:	4299      	cmp	r1, r3
 8004e7e:	d117      	bne.n	8004eb0 <HAL_OSPIM_Config+0x50c>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	6919      	ldr	r1, [r3, #16]
 8004e84:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004e88:	4613      	mov	r3, r2
 8004e8a:	005b      	lsls	r3, r3, #1
 8004e8c:	4413      	add	r3, r2
 8004e8e:	00db      	lsls	r3, r3, #3
 8004e90:	3350      	adds	r3, #80	; 0x50
 8004e92:	443b      	add	r3, r7
 8004e94:	3b2c      	subs	r3, #44	; 0x2c
 8004e96:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8004e98:	4299      	cmp	r1, r3
 8004e9a:	d109      	bne.n	8004eb0 <HAL_OSPIM_Config+0x50c>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8004e9c:	4b03      	ldr	r3, [pc, #12]	; (8004eac <HAL_OSPIM_Config+0x508>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a02      	ldr	r2, [pc, #8]	; (8004eac <HAL_OSPIM_Config+0x508>)
 8004ea2:	f043 0301 	orr.w	r3, r3, #1
 8004ea6:	6013      	str	r3, [r2, #0]
 8004ea8:	e0ce      	b.n	8005048 <HAL_OSPIM_Config+0x6a4>
 8004eaa:	bf00      	nop
 8004eac:	420c4000 	.word	0x420c4000
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8004eb0:	49a4      	ldr	r1, [pc, #656]	; (8005144 <HAL_OSPIM_Config+0x7a0>)
 8004eb2:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004eb6:	4613      	mov	r3, r2
 8004eb8:	005b      	lsls	r3, r3, #1
 8004eba:	4413      	add	r3, r2
 8004ebc:	00db      	lsls	r3, r3, #3
 8004ebe:	3350      	adds	r3, #80	; 0x50
 8004ec0:	443b      	add	r3, r7
 8004ec2:	3b3c      	subs	r3, #60	; 0x3c
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	3b01      	subs	r3, #1
 8004ec8:	009b      	lsls	r3, r3, #2
 8004eca:	440b      	add	r3, r1
 8004ecc:	6859      	ldr	r1, [r3, #4]
 8004ece:	489d      	ldr	r0, [pc, #628]	; (8005144 <HAL_OSPIM_Config+0x7a0>)
 8004ed0:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004ed4:	4613      	mov	r3, r2
 8004ed6:	005b      	lsls	r3, r3, #1
 8004ed8:	4413      	add	r3, r2
 8004eda:	00db      	lsls	r3, r3, #3
 8004edc:	3350      	adds	r3, #80	; 0x50
 8004ede:	443b      	add	r3, r7
 8004ee0:	3b3c      	subs	r3, #60	; 0x3c
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	3b01      	subs	r3, #1
 8004ee6:	f021 0201 	bic.w	r2, r1, #1
 8004eea:	009b      	lsls	r3, r3, #2
 8004eec:	4403      	add	r3, r0
 8004eee:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8004ef0:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004ef4:	4613      	mov	r3, r2
 8004ef6:	005b      	lsls	r3, r3, #1
 8004ef8:	4413      	add	r3, r2
 8004efa:	00db      	lsls	r3, r3, #3
 8004efc:	3350      	adds	r3, #80	; 0x50
 8004efe:	443b      	add	r3, r7
 8004f00:	3b38      	subs	r3, #56	; 0x38
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d01f      	beq.n	8004f48 <HAL_OSPIM_Config+0x5a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8004f08:	498e      	ldr	r1, [pc, #568]	; (8005144 <HAL_OSPIM_Config+0x7a0>)
 8004f0a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004f0e:	4613      	mov	r3, r2
 8004f10:	005b      	lsls	r3, r3, #1
 8004f12:	4413      	add	r3, r2
 8004f14:	00db      	lsls	r3, r3, #3
 8004f16:	3350      	adds	r3, #80	; 0x50
 8004f18:	443b      	add	r3, r7
 8004f1a:	3b38      	subs	r3, #56	; 0x38
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	3b01      	subs	r3, #1
 8004f20:	009b      	lsls	r3, r3, #2
 8004f22:	440b      	add	r3, r1
 8004f24:	6859      	ldr	r1, [r3, #4]
 8004f26:	4887      	ldr	r0, [pc, #540]	; (8005144 <HAL_OSPIM_Config+0x7a0>)
 8004f28:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004f2c:	4613      	mov	r3, r2
 8004f2e:	005b      	lsls	r3, r3, #1
 8004f30:	4413      	add	r3, r2
 8004f32:	00db      	lsls	r3, r3, #3
 8004f34:	3350      	adds	r3, #80	; 0x50
 8004f36:	443b      	add	r3, r7
 8004f38:	3b38      	subs	r3, #56	; 0x38
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	3b01      	subs	r3, #1
 8004f3e:	f021 0210 	bic.w	r2, r1, #16
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	4403      	add	r3, r0
 8004f46:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8004f48:	497e      	ldr	r1, [pc, #504]	; (8005144 <HAL_OSPIM_Config+0x7a0>)
 8004f4a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004f4e:	4613      	mov	r3, r2
 8004f50:	005b      	lsls	r3, r3, #1
 8004f52:	4413      	add	r3, r2
 8004f54:	00db      	lsls	r3, r3, #3
 8004f56:	3350      	adds	r3, #80	; 0x50
 8004f58:	443b      	add	r3, r7
 8004f5a:	3b34      	subs	r3, #52	; 0x34
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	3b01      	subs	r3, #1
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	440b      	add	r3, r1
 8004f64:	6859      	ldr	r1, [r3, #4]
 8004f66:	4877      	ldr	r0, [pc, #476]	; (8005144 <HAL_OSPIM_Config+0x7a0>)
 8004f68:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004f6c:	4613      	mov	r3, r2
 8004f6e:	005b      	lsls	r3, r3, #1
 8004f70:	4413      	add	r3, r2
 8004f72:	00db      	lsls	r3, r3, #3
 8004f74:	3350      	adds	r3, #80	; 0x50
 8004f76:	443b      	add	r3, r7
 8004f78:	3b34      	subs	r3, #52	; 0x34
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	3b01      	subs	r3, #1
 8004f7e:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8004f82:	009b      	lsls	r3, r3, #2
 8004f84:	4403      	add	r3, r0
 8004f86:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004f88:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004f8c:	4613      	mov	r3, r2
 8004f8e:	005b      	lsls	r3, r3, #1
 8004f90:	4413      	add	r3, r2
 8004f92:	00db      	lsls	r3, r3, #3
 8004f94:	3350      	adds	r3, #80	; 0x50
 8004f96:	443b      	add	r3, r7
 8004f98:	3b30      	subs	r3, #48	; 0x30
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d023      	beq.n	8004fe8 <HAL_OSPIM_Config+0x644>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004fa0:	4968      	ldr	r1, [pc, #416]	; (8005144 <HAL_OSPIM_Config+0x7a0>)
 8004fa2:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004fa6:	4613      	mov	r3, r2
 8004fa8:	005b      	lsls	r3, r3, #1
 8004faa:	4413      	add	r3, r2
 8004fac:	00db      	lsls	r3, r3, #3
 8004fae:	3350      	adds	r3, #80	; 0x50
 8004fb0:	443b      	add	r3, r7
 8004fb2:	3b30      	subs	r3, #48	; 0x30
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	3b01      	subs	r3, #1
 8004fb8:	f003 0301 	and.w	r3, r3, #1
 8004fbc:	009b      	lsls	r3, r3, #2
 8004fbe:	440b      	add	r3, r1
 8004fc0:	6859      	ldr	r1, [r3, #4]
 8004fc2:	4860      	ldr	r0, [pc, #384]	; (8005144 <HAL_OSPIM_Config+0x7a0>)
 8004fc4:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004fc8:	4613      	mov	r3, r2
 8004fca:	005b      	lsls	r3, r3, #1
 8004fcc:	4413      	add	r3, r2
 8004fce:	00db      	lsls	r3, r3, #3
 8004fd0:	3350      	adds	r3, #80	; 0x50
 8004fd2:	443b      	add	r3, r7
 8004fd4:	3b30      	subs	r3, #48	; 0x30
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	3b01      	subs	r3, #1
 8004fda:	f003 0301 	and.w	r3, r3, #1
 8004fde:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	4403      	add	r3, r0
 8004fe6:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004fe8:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004fec:	4613      	mov	r3, r2
 8004fee:	005b      	lsls	r3, r3, #1
 8004ff0:	4413      	add	r3, r2
 8004ff2:	00db      	lsls	r3, r3, #3
 8004ff4:	3350      	adds	r3, #80	; 0x50
 8004ff6:	443b      	add	r3, r7
 8004ff8:	3b2c      	subs	r3, #44	; 0x2c
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d023      	beq.n	8005048 <HAL_OSPIM_Config+0x6a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8005000:	4950      	ldr	r1, [pc, #320]	; (8005144 <HAL_OSPIM_Config+0x7a0>)
 8005002:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8005006:	4613      	mov	r3, r2
 8005008:	005b      	lsls	r3, r3, #1
 800500a:	4413      	add	r3, r2
 800500c:	00db      	lsls	r3, r3, #3
 800500e:	3350      	adds	r3, #80	; 0x50
 8005010:	443b      	add	r3, r7
 8005012:	3b2c      	subs	r3, #44	; 0x2c
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	3b01      	subs	r3, #1
 8005018:	f003 0301 	and.w	r3, r3, #1
 800501c:	009b      	lsls	r3, r3, #2
 800501e:	440b      	add	r3, r1
 8005020:	6859      	ldr	r1, [r3, #4]
 8005022:	4848      	ldr	r0, [pc, #288]	; (8005144 <HAL_OSPIM_Config+0x7a0>)
 8005024:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8005028:	4613      	mov	r3, r2
 800502a:	005b      	lsls	r3, r3, #1
 800502c:	4413      	add	r3, r2
 800502e:	00db      	lsls	r3, r3, #3
 8005030:	3350      	adds	r3, #80	; 0x50
 8005032:	443b      	add	r3, r7
 8005034:	3b2c      	subs	r3, #44	; 0x2c
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	3b01      	subs	r3, #1
 800503a:	f003 0301 	and.w	r3, r3, #1
 800503e:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	4403      	add	r3, r0
 8005046:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8005048:	4a3e      	ldr	r2, [pc, #248]	; (8005144 <HAL_OSPIM_Config+0x7a0>)
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	3b01      	subs	r3, #1
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	4413      	add	r3, r2
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800505a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800505c:	025b      	lsls	r3, r3, #9
 800505e:	431a      	orrs	r2, r3
 8005060:	4938      	ldr	r1, [pc, #224]	; (8005144 <HAL_OSPIM_Config+0x7a0>)
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	3b01      	subs	r3, #1
 8005068:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800506c:	009b      	lsls	r3, r3, #2
 800506e:	440b      	add	r3, r1
 8005070:	605a      	str	r2, [r3, #4]
               (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if (((cfg->Req2AckTime) >= 1U) && ((cfg->Req2AckTime) <= 256U))
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	695b      	ldr	r3, [r3, #20]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d018      	beq.n	80050ac <HAL_OSPIM_Config+0x708>
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	695b      	ldr	r3, [r3, #20]
 800507e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005082:	d813      	bhi.n	80050ac <HAL_OSPIM_Config+0x708>
    {
      if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	695b      	ldr	r3, [r3, #20]
 8005088:	1e5a      	subs	r2, r3, #1
 800508a:	4b2e      	ldr	r3, [pc, #184]	; (8005144 <HAL_OSPIM_Config+0x7a0>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	0c1b      	lsrs	r3, r3, #16
 8005090:	b2db      	uxtb	r3, r3
 8005092:	429a      	cmp	r2, r3
 8005094:	d90a      	bls.n	80050ac <HAL_OSPIM_Config+0x708>
      {
        MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 8005096:	4b2b      	ldr	r3, [pc, #172]	; (8005144 <HAL_OSPIM_Config+0x7a0>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	695b      	ldr	r3, [r3, #20]
 80050a2:	3b01      	subs	r3, #1
 80050a4:	041b      	lsls	r3, r3, #16
 80050a6:	4927      	ldr	r1, [pc, #156]	; (8005144 <HAL_OSPIM_Config+0x7a0>)
 80050a8:	4313      	orrs	r3, r2
 80050aa:	600b      	str	r3, [r1, #0]
      {
        /* Nothing to do */
      }
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 80050ac:	4b25      	ldr	r3, [pc, #148]	; (8005144 <HAL_OSPIM_Config+0x7a0>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 0301 	and.w	r3, r3, #1
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	f000 809a 	beq.w	80051ee <HAL_OSPIM_Config+0x84a>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 80050ba:	4a22      	ldr	r2, [pc, #136]	; (8005144 <HAL_OSPIM_Config+0x7a0>)
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	3b01      	subs	r3, #1
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	4413      	add	r3, r2
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	f023 0203 	bic.w	r2, r3, #3
 80050cc:	491d      	ldr	r1, [pc, #116]	; (8005144 <HAL_OSPIM_Config+0x7a0>)
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	3b01      	subs	r3, #1
 80050d4:	f042 0201 	orr.w	r2, r2, #1
 80050d8:	009b      	lsls	r3, r3, #2
 80050da:	440b      	add	r3, r1
 80050dc:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d011      	beq.n	800510a <HAL_OSPIM_Config+0x766>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 80050e6:	4a17      	ldr	r2, [pc, #92]	; (8005144 <HAL_OSPIM_Config+0x7a0>)
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	3b01      	subs	r3, #1
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	4413      	add	r3, r2
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80050f8:	4912      	ldr	r1, [pc, #72]	; (8005144 <HAL_OSPIM_Config+0x7a0>)
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	3b01      	subs	r3, #1
 8005100:	f042 0210 	orr.w	r2, r2, #16
 8005104:	009b      	lsls	r3, r3, #2
 8005106:	440b      	add	r3, r1
 8005108:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	68db      	ldr	r3, [r3, #12]
 800510e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005112:	2b00      	cmp	r3, #0
 8005114:	d018      	beq.n	8005148 <HAL_OSPIM_Config+0x7a4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8005116:	4a0b      	ldr	r2, [pc, #44]	; (8005144 <HAL_OSPIM_Config+0x7a0>)
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	68db      	ldr	r3, [r3, #12]
 800511c:	3b01      	subs	r3, #1
 800511e:	f003 0301 	and.w	r3, r3, #1
 8005122:	009b      	lsls	r3, r3, #2
 8005124:	4413      	add	r3, r2
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800512c:	4905      	ldr	r1, [pc, #20]	; (8005144 <HAL_OSPIM_Config+0x7a0>)
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	68db      	ldr	r3, [r3, #12]
 8005132:	3b01      	subs	r3, #1
 8005134:	f003 0301 	and.w	r3, r3, #1
 8005138:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800513c:	009b      	lsls	r3, r3, #2
 800513e:	440b      	add	r3, r1
 8005140:	605a      	str	r2, [r3, #4]
 8005142:	e01b      	b.n	800517c <HAL_OSPIM_Config+0x7d8>
 8005144:	420c4000 	.word	0x420c4000
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d015      	beq.n	800517c <HAL_OSPIM_Config+0x7d8>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8005150:	4a8a      	ldr	r2, [pc, #552]	; (800537c <HAL_OSPIM_Config+0x9d8>)
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	68db      	ldr	r3, [r3, #12]
 8005156:	3b01      	subs	r3, #1
 8005158:	f003 0301 	and.w	r3, r3, #1
 800515c:	009b      	lsls	r3, r3, #2
 800515e:	4413      	add	r3, r2
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005166:	4985      	ldr	r1, [pc, #532]	; (800537c <HAL_OSPIM_Config+0x9d8>)
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	3b01      	subs	r3, #1
 800516e:	f003 0301 	and.w	r3, r3, #1
 8005172:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8005176:	009b      	lsls	r3, r3, #2
 8005178:	440b      	add	r3, r1
 800517a:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	691b      	ldr	r3, [r3, #16]
 8005180:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005184:	2b00      	cmp	r3, #0
 8005186:	d016      	beq.n	80051b6 <HAL_OSPIM_Config+0x812>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8005188:	4a7c      	ldr	r2, [pc, #496]	; (800537c <HAL_OSPIM_Config+0x9d8>)
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	691b      	ldr	r3, [r3, #16]
 800518e:	3b01      	subs	r3, #1
 8005190:	f003 0301 	and.w	r3, r3, #1
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	4413      	add	r3, r2
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800519e:	4977      	ldr	r1, [pc, #476]	; (800537c <HAL_OSPIM_Config+0x9d8>)
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	691b      	ldr	r3, [r3, #16]
 80051a4:	3b01      	subs	r3, #1
 80051a6:	f003 0301 	and.w	r3, r3, #1
 80051aa:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 80051ae:	009b      	lsls	r3, r3, #2
 80051b0:	440b      	add	r3, r1
 80051b2:	605a      	str	r2, [r3, #4]
 80051b4:	e0c3      	b.n	800533e <HAL_OSPIM_Config+0x99a>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	691b      	ldr	r3, [r3, #16]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	f000 80bf 	beq.w	800533e <HAL_OSPIM_Config+0x99a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80051c0:	4a6e      	ldr	r2, [pc, #440]	; (800537c <HAL_OSPIM_Config+0x9d8>)
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	691b      	ldr	r3, [r3, #16]
 80051c6:	3b01      	subs	r3, #1
 80051c8:	f003 0301 	and.w	r3, r3, #1
 80051cc:	009b      	lsls	r3, r3, #2
 80051ce:	4413      	add	r3, r2
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80051d6:	4969      	ldr	r1, [pc, #420]	; (800537c <HAL_OSPIM_Config+0x9d8>)
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	691b      	ldr	r3, [r3, #16]
 80051dc:	3b01      	subs	r3, #1
 80051de:	f003 0301 	and.w	r3, r3, #1
 80051e2:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	440b      	add	r3, r1
 80051ea:	605a      	str	r2, [r3, #4]
 80051ec:	e0a7      	b.n	800533e <HAL_OSPIM_Config+0x99a>
        /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 80051ee:	4a63      	ldr	r2, [pc, #396]	; (800537c <HAL_OSPIM_Config+0x9d8>)
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	3b01      	subs	r3, #1
 80051f6:	009b      	lsls	r3, r3, #2
 80051f8:	4413      	add	r3, r2
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	f023 0203 	bic.w	r2, r3, #3
 8005200:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005202:	005b      	lsls	r3, r3, #1
 8005204:	431a      	orrs	r2, r3
 8005206:	495d      	ldr	r1, [pc, #372]	; (800537c <HAL_OSPIM_Config+0x9d8>)
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	3b01      	subs	r3, #1
 800520e:	f042 0201 	orr.w	r2, r2, #1
 8005212:	009b      	lsls	r3, r3, #2
 8005214:	440b      	add	r3, r1
 8005216:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d014      	beq.n	800524a <HAL_OSPIM_Config+0x8a6>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8005220:	4a56      	ldr	r2, [pc, #344]	; (800537c <HAL_OSPIM_Config+0x9d8>)
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	3b01      	subs	r3, #1
 8005228:	009b      	lsls	r3, r3, #2
 800522a:	4413      	add	r3, r2
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005232:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005234:	015b      	lsls	r3, r3, #5
 8005236:	431a      	orrs	r2, r3
 8005238:	4950      	ldr	r1, [pc, #320]	; (800537c <HAL_OSPIM_Config+0x9d8>)
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	3b01      	subs	r3, #1
 8005240:	f042 0210 	orr.w	r2, r2, #16
 8005244:	009b      	lsls	r3, r3, #2
 8005246:	440b      	add	r3, r1
 8005248:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	68db      	ldr	r3, [r3, #12]
 800524e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005252:	2b00      	cmp	r3, #0
 8005254:	d019      	beq.n	800528a <HAL_OSPIM_Config+0x8e6>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8005256:	4a49      	ldr	r2, [pc, #292]	; (800537c <HAL_OSPIM_Config+0x9d8>)
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	68db      	ldr	r3, [r3, #12]
 800525c:	3b01      	subs	r3, #1
 800525e:	f003 0301 	and.w	r3, r3, #1
 8005262:	009b      	lsls	r3, r3, #2
 8005264:	4413      	add	r3, r2
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800526c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800526e:	049b      	lsls	r3, r3, #18
 8005270:	431a      	orrs	r2, r3
 8005272:	4942      	ldr	r1, [pc, #264]	; (800537c <HAL_OSPIM_Config+0x9d8>)
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	3b01      	subs	r3, #1
 800527a:	f003 0301 	and.w	r3, r3, #1
 800527e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	440b      	add	r3, r1
 8005286:	605a      	str	r2, [r3, #4]
 8005288:	e01c      	b.n	80052c4 <HAL_OSPIM_Config+0x920>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	68db      	ldr	r3, [r3, #12]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d018      	beq.n	80052c4 <HAL_OSPIM_Config+0x920>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8005292:	4a3a      	ldr	r2, [pc, #232]	; (800537c <HAL_OSPIM_Config+0x9d8>)
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	68db      	ldr	r3, [r3, #12]
 8005298:	3b01      	subs	r3, #1
 800529a:	f003 0301 	and.w	r3, r3, #1
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	4413      	add	r3, r2
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80052a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052aa:	069b      	lsls	r3, r3, #26
 80052ac:	431a      	orrs	r2, r3
 80052ae:	4933      	ldr	r1, [pc, #204]	; (800537c <HAL_OSPIM_Config+0x9d8>)
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	3b01      	subs	r3, #1
 80052b6:	f003 0301 	and.w	r3, r3, #1
 80052ba:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80052be:	009b      	lsls	r3, r3, #2
 80052c0:	440b      	add	r3, r1
 80052c2:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	691b      	ldr	r3, [r3, #16]
 80052c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d019      	beq.n	8005304 <HAL_OSPIM_Config+0x960>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80052d0:	4a2a      	ldr	r2, [pc, #168]	; (800537c <HAL_OSPIM_Config+0x9d8>)
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	691b      	ldr	r3, [r3, #16]
 80052d6:	3b01      	subs	r3, #1
 80052d8:	f003 0301 	and.w	r3, r3, #1
 80052dc:	009b      	lsls	r3, r3, #2
 80052de:	4413      	add	r3, r2
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80052e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052e8:	049b      	lsls	r3, r3, #18
 80052ea:	431a      	orrs	r2, r3
 80052ec:	4923      	ldr	r1, [pc, #140]	; (800537c <HAL_OSPIM_Config+0x9d8>)
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	691b      	ldr	r3, [r3, #16]
 80052f2:	3b01      	subs	r3, #1
 80052f4:	f003 0301 	and.w	r3, r3, #1
 80052f8:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 80052fc:	009b      	lsls	r3, r3, #2
 80052fe:	440b      	add	r3, r1
 8005300:	605a      	str	r2, [r3, #4]
 8005302:	e01c      	b.n	800533e <HAL_OSPIM_Config+0x99a>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	691b      	ldr	r3, [r3, #16]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d018      	beq.n	800533e <HAL_OSPIM_Config+0x99a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800530c:	4a1b      	ldr	r2, [pc, #108]	; (800537c <HAL_OSPIM_Config+0x9d8>)
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	691b      	ldr	r3, [r3, #16]
 8005312:	3b01      	subs	r3, #1
 8005314:	f003 0301 	and.w	r3, r3, #1
 8005318:	009b      	lsls	r3, r3, #2
 800531a:	4413      	add	r3, r2
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005322:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005324:	069b      	lsls	r3, r3, #26
 8005326:	431a      	orrs	r2, r3
 8005328:	4914      	ldr	r1, [pc, #80]	; (800537c <HAL_OSPIM_Config+0x9d8>)
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	691b      	ldr	r3, [r3, #16]
 800532e:	3b01      	subs	r3, #1
 8005330:	f003 0301 	and.w	r3, r3, #1
 8005334:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8005338:	009b      	lsls	r3, r3, #2
 800533a:	440b      	add	r3, r1
 800533c:	605a      	str	r2, [r3, #4]
        /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 800533e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005342:	f003 0301 	and.w	r3, r3, #1
 8005346:	2b00      	cmp	r3, #0
 8005348:	d005      	beq.n	8005356 <HAL_OSPIM_Config+0x9b2>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 800534a:	4b0d      	ldr	r3, [pc, #52]	; (8005380 <HAL_OSPIM_Config+0x9dc>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a0c      	ldr	r2, [pc, #48]	; (8005380 <HAL_OSPIM_Config+0x9dc>)
 8005350:	f043 0301 	orr.w	r3, r3, #1
 8005354:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8005356:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800535a:	f003 0302 	and.w	r3, r3, #2
 800535e:	2b00      	cmp	r3, #0
 8005360:	d005      	beq.n	800536e <HAL_OSPIM_Config+0x9ca>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8005362:	4b08      	ldr	r3, [pc, #32]	; (8005384 <HAL_OSPIM_Config+0x9e0>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a07      	ldr	r2, [pc, #28]	; (8005384 <HAL_OSPIM_Config+0x9e0>)
 8005368:	f043 0301 	orr.w	r3, r3, #1
 800536c:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 800536e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8005372:	4618      	mov	r0, r3
 8005374:	3750      	adds	r7, #80	; 0x50
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
 800537a:	bf00      	nop
 800537c:	420c4000 	.word	0x420c4000
 8005380:	420d1400 	.word	0x420d1400
 8005384:	420d2400 	.word	0x420d2400

08005388 <OSPI_DMACplt>:
  * @brief  DMA OSPI process complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void OSPI_DMACplt(DMA_HandleTypeDef *hdma)
{
 8005388:	b480      	push	{r7}
 800538a:	b085      	sub	sp, #20
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  OSPI_HandleTypeDef *hospi = (OSPI_HandleTypeDef *)(hdma->Parent);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005394:	60fb      	str	r3, [r7, #12]
  hospi->XferCount = 0;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2200      	movs	r2, #0
 800539a:	649a      	str	r2, [r3, #72]	; 0x48

  /* Disable the DMA transfer on the OctoSPI side */
  CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f022 0204 	bic.w	r2, r2, #4
 80053aa:	601a      	str	r2, [r3, #0]

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	695a      	ldr	r2, [r3, #20]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f042 0206 	orr.w	r2, r2, #6
 80053ba:	615a      	str	r2, [r3, #20]

  /* Enable the OSPI transfer complete Interrupt */
  __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TC);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80053ca:	601a      	str	r2, [r3, #0]
}
 80053cc:	bf00      	nop
 80053ce:	3714      	adds	r7, #20
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr

080053d8 <OSPI_DMAHalfCplt>:
  * @brief  DMA OSPI process half complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void OSPI_DMAHalfCplt(DMA_HandleTypeDef *hdma)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b084      	sub	sp, #16
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  OSPI_HandleTypeDef *hospi = (OSPI_HandleTypeDef *)(hdma->Parent);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053e4:	60fb      	str	r3, [r7, #12]
  hospi->XferCount = (hospi->XferCount >> 1);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053ea:	085a      	lsrs	r2, r3, #1
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	649a      	str	r2, [r3, #72]	; 0x48

  if (hospi->State == HAL_OSPI_STATE_BUSY_RX)
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053f4:	2b28      	cmp	r3, #40	; 0x28
 80053f6:	d103      	bne.n	8005400 <OSPI_DMAHalfCplt+0x28>
  {
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->RxHalfCpltCallback(hospi);
#else
    HAL_OSPI_RxHalfCpltCallback(hospi);
 80053f8:	68f8      	ldr	r0, [r7, #12]
 80053fa:	f7ff f9b4 	bl	8004766 <HAL_OSPI_RxHalfCpltCallback>
    hospi->TxHalfCpltCallback(hospi);
#else
    HAL_OSPI_TxHalfCpltCallback(hospi);
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)*/
  }
}
 80053fe:	e002      	b.n	8005406 <OSPI_DMAHalfCplt+0x2e>
    HAL_OSPI_TxHalfCpltCallback(hospi);
 8005400:	68f8      	ldr	r0, [r7, #12]
 8005402:	f7ff f9ba 	bl	800477a <HAL_OSPI_TxHalfCpltCallback>
}
 8005406:	bf00      	nop
 8005408:	3710      	adds	r7, #16
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}

0800540e <OSPI_DMAError>:
  * @brief  DMA OSPI communication error callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void OSPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800540e:	b580      	push	{r7, lr}
 8005410:	b084      	sub	sp, #16
 8005412:	af00      	add	r7, sp, #0
 8005414:	6078      	str	r0, [r7, #4]
  OSPI_HandleTypeDef *hospi = (OSPI_HandleTypeDef *)(hdma->Parent);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800541a:	60fb      	str	r3, [r7, #12]
  hospi->XferCount = 0;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2200      	movs	r2, #0
 8005420:	649a      	str	r2, [r3, #72]	; 0x48
  hospi->ErrorCode = HAL_OSPI_ERROR_DMA;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2204      	movs	r2, #4
 8005426:	655a      	str	r2, [r3, #84]	; 0x54

  /* Disable the DMA transfer on the OctoSPI side */
  CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f022 0204 	bic.w	r2, r2, #4
 8005436:	601a      	str	r2, [r3, #0]

  /* Abort the OctoSPI */
  if (HAL_OSPI_Abort_IT(hospi) != HAL_OK)
 8005438:	68f8      	ldr	r0, [r7, #12]
 800543a:	f7ff fa31 	bl	80048a0 <HAL_OSPI_Abort_IT>
 800543e:	4603      	mov	r3, r0
 8005440:	2b00      	cmp	r3, #0
 8005442:	d00d      	beq.n	8005460 <OSPI_DMAError+0x52>
  {
    /* Disable the interrupts */
    __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8005452:	601a      	str	r2, [r3, #0]

    /* Update state */
    hospi->State = HAL_OSPI_STATE_READY;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2202      	movs	r2, #2
 8005458:	651a      	str	r2, [r3, #80]	; 0x50

    /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->ErrorCallback(hospi);
#else
    HAL_OSPI_ErrorCallback(hospi);
 800545a:	68f8      	ldr	r0, [r7, #12]
 800545c:	f7ff f95b 	bl	8004716 <HAL_OSPI_ErrorCallback>
#endif /*(USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
  }
}
 8005460:	bf00      	nop
 8005462:	3710      	adds	r7, #16
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}

08005468 <OSPI_DMAAbortCplt>:
  * @brief  DMA OSPI abort complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void OSPI_DMAAbortCplt(DMA_HandleTypeDef *hdma)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b084      	sub	sp, #16
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  OSPI_HandleTypeDef *hospi = (OSPI_HandleTypeDef *)(hdma->Parent);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005474:	60fb      	str	r3, [r7, #12]
  hospi->XferCount = 0;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2200      	movs	r2, #0
 800547a:	649a      	str	r2, [r3, #72]	; 0x48

  /* Check the state */
  if (hospi->State == HAL_OSPI_STATE_ABORT)
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005480:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005484:	d122      	bne.n	80054cc <OSPI_DMAAbortCplt+0x64>
  {
    /* DMA abort called by OctoSPI abort */
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	6a1b      	ldr	r3, [r3, #32]
 800548c:	f003 0320 	and.w	r3, r3, #32
 8005490:	2b00      	cmp	r3, #0
 8005492:	d014      	beq.n	80054be <OSPI_DMAAbortCplt+0x56>
    {
      /* Clear transfer complete flag */
      __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	2202      	movs	r2, #2
 800549a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enable the transfer complete interrupts */
      __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TC);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80054aa:	601a      	str	r2, [r3, #0]

      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f042 0202 	orr.w	r2, r2, #2
 80054ba:	601a      	str	r2, [r3, #0]
    hospi->ErrorCallback(hospi);
#else
    HAL_OSPI_ErrorCallback(hospi);
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)*/
  }
}
 80054bc:	e00c      	b.n	80054d8 <OSPI_DMAAbortCplt+0x70>
      hospi->State = HAL_OSPI_STATE_READY;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2202      	movs	r2, #2
 80054c2:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_OSPI_AbortCpltCallback(hospi);
 80054c4:	68f8      	ldr	r0, [r7, #12]
 80054c6:	f7ff f930 	bl	800472a <HAL_OSPI_AbortCpltCallback>
}
 80054ca:	e005      	b.n	80054d8 <OSPI_DMAAbortCplt+0x70>
    hospi->State = HAL_OSPI_STATE_READY;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2202      	movs	r2, #2
 80054d0:	651a      	str	r2, [r3, #80]	; 0x50
    HAL_OSPI_ErrorCallback(hospi);
 80054d2:	68f8      	ldr	r0, [r7, #12]
 80054d4:	f7ff f91f 	bl	8004716 <HAL_OSPI_ErrorCallback>
}
 80054d8:	bf00      	nop
 80054da:	3710      	adds	r7, #16
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}

080054e0 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b084      	sub	sp, #16
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	60f8      	str	r0, [r7, #12]
 80054e8:	60b9      	str	r1, [r7, #8]
 80054ea:	603b      	str	r3, [r7, #0]
 80054ec:	4613      	mov	r3, r2
 80054ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 80054f0:	e022      	b.n	8005538 <OSPI_WaitFlagStateUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054f2:	69bb      	ldr	r3, [r7, #24]
 80054f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054f8:	d01e      	beq.n	8005538 <OSPI_WaitFlagStateUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054fa:	f7fc fd95 	bl	8002028 <HAL_GetTick>
 80054fe:	4602      	mov	r2, r0
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	1ad3      	subs	r3, r2, r3
 8005504:	69ba      	ldr	r2, [r7, #24]
 8005506:	429a      	cmp	r2, r3
 8005508:	d302      	bcc.n	8005510 <OSPI_WaitFlagStateUntilTimeout+0x30>
 800550a:	69bb      	ldr	r3, [r7, #24]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d113      	bne.n	8005538 <OSPI_WaitFlagStateUntilTimeout+0x58>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hospi->Instance->SR & Flag) != (uint32_t)State)
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	6a1a      	ldr	r2, [r3, #32]
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	401a      	ands	r2, r3
 800551a:	79fb      	ldrb	r3, [r7, #7]
 800551c:	429a      	cmp	r2, r3
 800551e:	d00b      	beq.n	8005538 <OSPI_WaitFlagStateUntilTimeout+0x58>
        {
          hospi->State     = HAL_OSPI_STATE_ERROR;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005526:	651a      	str	r2, [r3, #80]	; 0x50
          hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800552c:	f043 0201 	orr.w	r2, r3, #1
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	655a      	str	r2, [r3, #84]	; 0x54

          return HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	e00e      	b.n	8005556 <OSPI_WaitFlagStateUntilTimeout+0x76>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	6a1a      	ldr	r2, [r3, #32]
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	4013      	ands	r3, r2
 8005542:	2b00      	cmp	r3, #0
 8005544:	bf14      	ite	ne
 8005546:	2301      	movne	r3, #1
 8005548:	2300      	moveq	r3, #0
 800554a:	b2db      	uxtb	r3, r3
 800554c:	461a      	mov	r2, r3
 800554e:	79fb      	ldrb	r3, [r7, #7]
 8005550:	429a      	cmp	r2, r3
 8005552:	d1ce      	bne.n	80054f2 <OSPI_WaitFlagStateUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005554:	2300      	movs	r3, #0
}
 8005556:	4618      	mov	r0, r3
 8005558:	3710      	adds	r7, #16
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}
	...

08005560 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 8005560:	b480      	push	{r7}
 8005562:	b089      	sub	sp, #36	; 0x24
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
 8005568:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800556a:	2300      	movs	r3, #0
 800556c:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800557c:	601a      	str	r2, [r3, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	689b      	ldr	r3, [r3, #8]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d10a      	bne.n	800559c <OSPI_ConfigCmd+0x3c>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_MSEL, cmd->FlashId);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	685a      	ldr	r2, [r3, #4]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	430a      	orrs	r2, r1
 800559a:	601a      	str	r2, [r3, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	2b02      	cmp	r3, #2
 80055a2:	d114      	bne.n	80055ce <OSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hospi->Instance->WCCR);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80055ac:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WTCR);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80055b6:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WIR);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80055c0:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WABR);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 80055ca:	60fb      	str	r3, [r7, #12]
 80055cc:	e02c      	b.n	8005628 <OSPI_ConfigCmd+0xc8>
  }
  else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG)
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	2b03      	cmp	r3, #3
 80055d4:	d114      	bne.n	8005600 <OSPI_ConfigCmd+0xa0>
  {
    ccr_reg = &(hospi->Instance->WPCCR);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80055de:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WPTCR);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 80055e8:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WPIR);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80055f2:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WPABR);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80055fc:	60fb      	str	r3, [r7, #12]
 80055fe:	e013      	b.n	8005628 <OSPI_ConfigCmd+0xc8>
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005608:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->TCR);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8005612:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->IR);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800561c:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->ABR);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8005626:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005630:	431a      	orrs	r2, r3
 8005632:	69bb      	ldr	r3, [r7, #24]
 8005634:	601a      	str	r2, [r3, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800563a:	2b00      	cmp	r3, #0
 800563c:	d012      	beq.n	8005664 <OSPI_ConfigCmd+0x104>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 8005646:	69bb      	ldr	r3, [r7, #24]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005656:	4319      	orrs	r1, r3
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800565c:	430b      	orrs	r3, r1
 800565e:	431a      	orrs	r2, r3
 8005660:	69bb      	ldr	r3, [r7, #24]
 8005662:	601a      	str	r2, [r3, #0]
               (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f023 021f 	bic.w	r2, r3, #31
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005670:	431a      	orrs	r2, r3
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	601a      	str	r2, [r3, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800567a:	2b00      	cmp	r3, #0
 800567c:	d009      	beq.n	8005692 <OSPI_ConfigCmd+0x132>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d105      	bne.n	8005692 <OSPI_ConfigCmd+0x132>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	3a01      	subs	r2, #1
 8005690:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	68db      	ldr	r3, [r3, #12]
 8005696:	2b00      	cmp	r3, #0
 8005698:	f000 8099 	beq.w	80057ce <OSPI_ConfigCmd+0x26e>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	69db      	ldr	r3, [r3, #28]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d055      	beq.n	8005750 <OSPI_ConfigCmd+0x1f0>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d01e      	beq.n	80056ea <OSPI_ConfigCmd+0x18a>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 80056ac:	69bb      	ldr	r3, [r7, #24]
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	4b67      	ldr	r3, [pc, #412]	; (8005850 <OSPI_ConfigCmd+0x2f0>)
 80056b2:	4013      	ands	r3, r2
 80056b4:	683a      	ldr	r2, [r7, #0]
 80056b6:	68d1      	ldr	r1, [r2, #12]
 80056b8:	683a      	ldr	r2, [r7, #0]
 80056ba:	6952      	ldr	r2, [r2, #20]
 80056bc:	4311      	orrs	r1, r2
 80056be:	683a      	ldr	r2, [r7, #0]
 80056c0:	6912      	ldr	r2, [r2, #16]
 80056c2:	4311      	orrs	r1, r2
 80056c4:	683a      	ldr	r2, [r7, #0]
 80056c6:	69d2      	ldr	r2, [r2, #28]
 80056c8:	4311      	orrs	r1, r2
 80056ca:	683a      	ldr	r2, [r7, #0]
 80056cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80056ce:	4311      	orrs	r1, r2
 80056d0:	683a      	ldr	r2, [r7, #0]
 80056d2:	6a12      	ldr	r2, [r2, #32]
 80056d4:	4311      	orrs	r1, r2
 80056d6:	683a      	ldr	r2, [r7, #0]
 80056d8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80056da:	4311      	orrs	r1, r2
 80056dc:	683a      	ldr	r2, [r7, #0]
 80056de:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80056e0:	430a      	orrs	r2, r1
 80056e2:	431a      	orrs	r2, r3
 80056e4:	69bb      	ldr	r3, [r7, #24]
 80056e6:	601a      	str	r2, [r3, #0]
 80056e8:	e028      	b.n	800573c <OSPI_ConfigCmd+0x1dc>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 80056ea:	69bb      	ldr	r3, [r7, #24]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80056f2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80056f6:	683a      	ldr	r2, [r7, #0]
 80056f8:	68d1      	ldr	r1, [r2, #12]
 80056fa:	683a      	ldr	r2, [r7, #0]
 80056fc:	6952      	ldr	r2, [r2, #20]
 80056fe:	4311      	orrs	r1, r2
 8005700:	683a      	ldr	r2, [r7, #0]
 8005702:	6912      	ldr	r2, [r2, #16]
 8005704:	4311      	orrs	r1, r2
 8005706:	683a      	ldr	r2, [r7, #0]
 8005708:	69d2      	ldr	r2, [r2, #28]
 800570a:	4311      	orrs	r1, r2
 800570c:	683a      	ldr	r2, [r7, #0]
 800570e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005710:	4311      	orrs	r1, r2
 8005712:	683a      	ldr	r2, [r7, #0]
 8005714:	6a12      	ldr	r2, [r2, #32]
 8005716:	430a      	orrs	r2, r1
 8005718:	431a      	orrs	r2, r3
 800571a:	69bb      	ldr	r3, [r7, #24]
 800571c:	601a      	str	r2, [r3, #0]
                                OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                   (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize |
                    cmd->AddressMode     | cmd->AddressDtrMode     | cmd->AddressSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005722:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005726:	d109      	bne.n	800573c <OSPI_ConfigCmd+0x1dc>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800572c:	2b08      	cmp	r3, #8
 800572e:	d105      	bne.n	800573c <OSPI_ConfigCmd+0x1dc>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 8005730:	69bb      	ldr	r3, [r7, #24]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005738:	69bb      	ldr	r3, [r7, #24]
 800573a:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	689a      	ldr	r2, [r3, #8]
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	683a      	ldr	r2, [r7, #0]
 800574a:	6992      	ldr	r2, [r2, #24]
 800574c:	649a      	str	r2, [r3, #72]	; 0x48
 800574e:	e078      	b.n	8005842 <OSPI_ConfigCmd+0x2e2>
    }
    else
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005754:	2b00      	cmp	r3, #0
 8005756:	d017      	beq.n	8005788 <OSPI_ConfigCmd+0x228>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 8005758:	69bb      	ldr	r3, [r7, #24]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8005760:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005764:	683a      	ldr	r2, [r7, #0]
 8005766:	68d1      	ldr	r1, [r2, #12]
 8005768:	683a      	ldr	r2, [r7, #0]
 800576a:	6952      	ldr	r2, [r2, #20]
 800576c:	4311      	orrs	r1, r2
 800576e:	683a      	ldr	r2, [r7, #0]
 8005770:	6912      	ldr	r2, [r2, #16]
 8005772:	4311      	orrs	r1, r2
 8005774:	683a      	ldr	r2, [r7, #0]
 8005776:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005778:	4311      	orrs	r1, r2
 800577a:	683a      	ldr	r2, [r7, #0]
 800577c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800577e:	430a      	orrs	r2, r1
 8005780:	431a      	orrs	r2, r3
 8005782:	69bb      	ldr	r3, [r7, #24]
 8005784:	601a      	str	r2, [r3, #0]
 8005786:	e01d      	b.n	80057c4 <OSPI_ConfigCmd+0x264>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 8005788:	69bb      	ldr	r3, [r7, #24]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	68d9      	ldr	r1, [r3, #12]
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	695b      	ldr	r3, [r3, #20]
 8005798:	4319      	orrs	r1, r3
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	691b      	ldr	r3, [r3, #16]
 800579e:	430b      	orrs	r3, r1
 80057a0:	431a      	orrs	r2, r3
 80057a2:	69bb      	ldr	r3, [r7, #24]
 80057a4:	601a      	str	r2, [r3, #0]
                   (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80057ae:	d109      	bne.n	80057c4 <OSPI_ConfigCmd+0x264>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 80057b4:	2b08      	cmp	r3, #8
 80057b6:	d105      	bne.n	80057c4 <OSPI_ConfigCmd+0x264>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 80057b8:	69bb      	ldr	r3, [r7, #24]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80057c0:	69bb      	ldr	r3, [r7, #24]
 80057c2:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	689a      	ldr	r2, [r3, #8]
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	601a      	str	r2, [r3, #0]
 80057cc:	e039      	b.n	8005842 <OSPI_ConfigCmd+0x2e2>

    }
  }
  else
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	69db      	ldr	r3, [r3, #28]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d030      	beq.n	8005838 <OSPI_ConfigCmd+0x2d8>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d017      	beq.n	800580e <OSPI_ConfigCmd+0x2ae>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 80057de:	69bb      	ldr	r3, [r7, #24]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80057e6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80057ea:	683a      	ldr	r2, [r7, #0]
 80057ec:	69d1      	ldr	r1, [r2, #28]
 80057ee:	683a      	ldr	r2, [r7, #0]
 80057f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80057f2:	4311      	orrs	r1, r2
 80057f4:	683a      	ldr	r2, [r7, #0]
 80057f6:	6a12      	ldr	r2, [r2, #32]
 80057f8:	4311      	orrs	r1, r2
 80057fa:	683a      	ldr	r2, [r7, #0]
 80057fc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80057fe:	4311      	orrs	r1, r2
 8005800:	683a      	ldr	r2, [r7, #0]
 8005802:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005804:	430a      	orrs	r2, r1
 8005806:	431a      	orrs	r2, r3
 8005808:	69bb      	ldr	r3, [r7, #24]
 800580a:	601a      	str	r2, [r3, #0]
 800580c:	e00e      	b.n	800582c <OSPI_ConfigCmd+0x2cc>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 800580e:	69bb      	ldr	r3, [r7, #24]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	69d9      	ldr	r1, [r3, #28]
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800581e:	4319      	orrs	r1, r3
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	6a1b      	ldr	r3, [r3, #32]
 8005824:	430b      	orrs	r3, r1
 8005826:	431a      	orrs	r2, r3
 8005828:	69bb      	ldr	r3, [r7, #24]
 800582a:	601a      	str	r2, [r3, #0]
                   (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	683a      	ldr	r2, [r7, #0]
 8005832:	6992      	ldr	r2, [r2, #24]
 8005834:	649a      	str	r2, [r3, #72]	; 0x48
 8005836:	e004      	b.n	8005842 <OSPI_ConfigCmd+0x2e2>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2208      	movs	r2, #8
 8005840:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }

  /* Return function status */
  return status;
 8005842:	7ffb      	ldrb	r3, [r7, #31]
}
 8005844:	4618      	mov	r0, r3
 8005846:	3724      	adds	r7, #36	; 0x24
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr
 8005850:	f0ffc0c0 	.word	0xf0ffc0c0

08005854 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8005854:	b480      	push	{r7}
 8005856:	b087      	sub	sp, #28
 8005858:	af00      	add	r7, sp, #0
 800585a:	4603      	mov	r3, r0
 800585c:	6039      	str	r1, [r7, #0]
 800585e:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8005860:	2300      	movs	r3, #0
 8005862:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8005864:	2300      	movs	r3, #0
 8005866:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8005868:	79fb      	ldrb	r3, [r7, #7]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d005      	beq.n	800587a <OSPIM_GetConfig+0x26>
 800586e:	79fb      	ldrb	r3, [r7, #7]
 8005870:	2b02      	cmp	r3, #2
 8005872:	d802      	bhi.n	800587a <OSPIM_GetConfig+0x26>
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d102      	bne.n	8005880 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	75fb      	strb	r3, [r7, #23]
 800587e:	e098      	b.n	80059b2 <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	2200      	movs	r2, #0
 8005884:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	2200      	movs	r2, #0
 800588a:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	2200      	movs	r2, #0
 8005890:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	2200      	movs	r2, #0
 8005896:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	2200      	movs	r2, #0
 800589c:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 800589e:	79fb      	ldrb	r3, [r7, #7]
 80058a0:	2b02      	cmp	r3, #2
 80058a2:	d10b      	bne.n	80058bc <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 80058a4:	4b46      	ldr	r3, [pc, #280]	; (80059c0 <OSPIM_GetConfig+0x16c>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f003 0301 	and.w	r3, r3, #1
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d102      	bne.n	80058b6 <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 80058b0:	4b44      	ldr	r3, [pc, #272]	; (80059c4 <OSPIM_GetConfig+0x170>)
 80058b2:	613b      	str	r3, [r7, #16]
 80058b4:	e002      	b.n	80058bc <OSPIM_GetConfig+0x68>
                 | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 80058b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80058ba:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 80058bc:	2300      	movs	r3, #0
 80058be:	60fb      	str	r3, [r7, #12]
 80058c0:	e074      	b.n	80059ac <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 80058c2:	4a3f      	ldr	r2, [pc, #252]	; (80059c0 <OSPIM_GetConfig+0x16c>)
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	009b      	lsls	r3, r3, #2
 80058c8:	4413      	add	r3, r2
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	f003 0301 	and.w	r3, r3, #1
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d00a      	beq.n	80058ee <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 80058d8:	68ba      	ldr	r2, [r7, #8]
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	4053      	eors	r3, r2
 80058de:	f003 0302 	and.w	r3, r3, #2
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d103      	bne.n	80058ee <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	1c5a      	adds	r2, r3, #1
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	f003 0310 	and.w	r3, r3, #16
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d00a      	beq.n	800590e <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 80058f8:	68ba      	ldr	r2, [r7, #8]
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	4053      	eors	r3, r2
 80058fe:	f003 0320 	and.w	r3, r3, #32
 8005902:	2b00      	cmp	r3, #0
 8005904:	d103      	bne.n	800590e <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	1c5a      	adds	r2, r3, #1
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005914:	2b00      	cmp	r3, #0
 8005916:	d00a      	beq.n	800592e <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8005918:	68ba      	ldr	r2, [r7, #8]
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	4053      	eors	r3, r2
 800591e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005922:	2b00      	cmp	r3, #0
 8005924:	d103      	bne.n	800592e <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	1c5a      	adds	r2, r3, #1
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005934:	2b00      	cmp	r3, #0
 8005936:	d018      	beq.n	800596a <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8005938:	68ba      	ldr	r2, [r7, #8]
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	4053      	eors	r3, r2
 800593e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005942:	2b00      	cmp	r3, #0
 8005944:	d111      	bne.n	800596a <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800594c:	2b00      	cmp	r3, #0
 800594e:	d106      	bne.n	800595e <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	3301      	adds	r3, #1
 8005954:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	60da      	str	r2, [r3, #12]
 800595c:	e005      	b.n	800596a <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	3301      	adds	r3, #1
 8005962:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005970:	2b00      	cmp	r3, #0
 8005972:	d018      	beq.n	80059a6 <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8005974:	68ba      	ldr	r2, [r7, #8]
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	4053      	eors	r3, r2
 800597a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800597e:	2b00      	cmp	r3, #0
 8005980:	d111      	bne.n	80059a6 <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005988:	2b00      	cmp	r3, #0
 800598a:	d106      	bne.n	800599a <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	3301      	adds	r3, #1
 8005990:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	611a      	str	r2, [r3, #16]
 8005998:	e005      	b.n	80059a6 <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	3301      	adds	r3, #1
 800599e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	3301      	adds	r3, #1
 80059aa:	60fb      	str	r3, [r7, #12]
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2b01      	cmp	r3, #1
 80059b0:	d987      	bls.n	80058c2 <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 80059b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	371c      	adds	r7, #28
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr
 80059c0:	420c4000 	.word	0x420c4000
 80059c4:	04040222 	.word	0x04040222

080059c8 <HAL_OSPI_DLYB_SetConfig>:
  * @param  hospi   : OSPI handle.
  * @param  pdlyb_cfg: Pointer to DLYB configuration structure.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_OSPI_DLYB_SetConfig(OSPI_HandleTypeDef *hospi, HAL_OSPI_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b084      	sub	sp, #16
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
 80059d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	73fb      	strb	r3, [r7, #15]

  /* Enable OCTOSPI Free Running Clock (mandatory) */
  SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	689a      	ldr	r2, [r3, #8]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f042 0202 	orr.w	r2, r2, #2
 80059e4:	609a      	str	r2, [r3, #8]

  /* Update OCTOSPI state */
  hospi->State = HAL_OSPI_STATE_BUSY_CMD;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2208      	movs	r2, #8
 80059ea:	651a      	str	r2, [r3, #80]	; 0x50

  if (hospi->Instance == OCTOSPI1)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a15      	ldr	r2, [pc, #84]	; (8005a48 <HAL_OSPI_DLYB_SetConfig+0x80>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d109      	bne.n	8005a0a <HAL_OSPI_DLYB_SetConfig+0x42>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI1);
 80059f6:	4815      	ldr	r0, [pc, #84]	; (8005a4c <HAL_OSPI_DLYB_SetConfig+0x84>)
 80059f8:	f7fd ffa0 	bl	800393c <LL_DLYB_Enable>

    /* Set the Delay Block configuration */
    LL_DLYB_SetDelay(DLYB_OCTOSPI1, pdlyb_cfg);
 80059fc:	6839      	ldr	r1, [r7, #0]
 80059fe:	4813      	ldr	r0, [pc, #76]	; (8005a4c <HAL_OSPI_DLYB_SetConfig+0x84>)
 8005a00:	f005 fbf4 	bl	800b1ec <LL_DLYB_SetDelay>
    status = HAL_OK;
 8005a04:	2300      	movs	r3, #0
 8005a06:	73fb      	strb	r3, [r7, #15]
 8005a08:	e00d      	b.n	8005a26 <HAL_OSPI_DLYB_SetConfig+0x5e>
  }

#if defined (OCTOSPI2)
  else if (hospi->Instance == OCTOSPI2)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a10      	ldr	r2, [pc, #64]	; (8005a50 <HAL_OSPI_DLYB_SetConfig+0x88>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d108      	bne.n	8005a26 <HAL_OSPI_DLYB_SetConfig+0x5e>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI2);
 8005a14:	480f      	ldr	r0, [pc, #60]	; (8005a54 <HAL_OSPI_DLYB_SetConfig+0x8c>)
 8005a16:	f7fd ff91 	bl	800393c <LL_DLYB_Enable>

    /* Set the Delay Block configuration */
    LL_DLYB_SetDelay(DLYB_OCTOSPI2, pdlyb_cfg);
 8005a1a:	6839      	ldr	r1, [r7, #0]
 8005a1c:	480d      	ldr	r0, [pc, #52]	; (8005a54 <HAL_OSPI_DLYB_SetConfig+0x8c>)
 8005a1e:	f005 fbe5 	bl	800b1ec <LL_DLYB_SetDelay>
    status = HAL_OK;
 8005a22:	2300      	movs	r3, #0
 8005a24:	73fb      	strb	r3, [r7, #15]
  {
    /* Nothing to do */
  }

  /* Abort the current OCTOSPI operation if exist */
  (void)HAL_OSPI_Abort(hospi);
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f7fe fec5 	bl	80047b6 <HAL_OSPI_Abort>

  /* Disable Free Running Clock */
  CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	689a      	ldr	r2, [r3, #8]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f022 0202 	bic.w	r2, r2, #2
 8005a3a:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return status;
 8005a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3710      	adds	r7, #16
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}
 8005a46:	bf00      	nop
 8005a48:	420d1400 	.word	0x420d1400
 8005a4c:	420cf000 	.word	0x420cf000
 8005a50:	420d2400 	.word	0x420d2400
 8005a54:	420cf400 	.word	0x420cf400

08005a58 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b085      	sub	sp, #20
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8005a60:	4b39      	ldr	r3, [pc, #228]	; (8005b48 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005a62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a64:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005a68:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8005a6a:	68ba      	ldr	r2, [r7, #8]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	d10b      	bne.n	8005a8a <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a78:	d905      	bls.n	8005a86 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8005a7a:	4b33      	ldr	r3, [pc, #204]	; (8005b48 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005a7c:	68db      	ldr	r3, [r3, #12]
 8005a7e:	4a32      	ldr	r2, [pc, #200]	; (8005b48 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005a80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a84:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8005a86:	2300      	movs	r3, #0
 8005a88:	e057      	b.n	8005b3a <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a90:	d90a      	bls.n	8005aa8 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8005a92:	4b2d      	ldr	r3, [pc, #180]	; (8005b48 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005a94:	68db      	ldr	r3, [r3, #12]
 8005a96:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	4a2a      	ldr	r2, [pc, #168]	; (8005b48 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005aa0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005aa4:	60d3      	str	r3, [r2, #12]
 8005aa6:	e007      	b.n	8005ab8 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8005aa8:	4b27      	ldr	r3, [pc, #156]	; (8005b48 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005ab0:	4925      	ldr	r1, [pc, #148]	; (8005b48 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8005ab8:	4b24      	ldr	r3, [pc, #144]	; (8005b4c <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a24      	ldr	r2, [pc, #144]	; (8005b50 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8005abe:	fba2 2303 	umull	r2, r3, r2, r3
 8005ac2:	099b      	lsrs	r3, r3, #6
 8005ac4:	2232      	movs	r2, #50	; 0x32
 8005ac6:	fb02 f303 	mul.w	r3, r2, r3
 8005aca:	4a21      	ldr	r2, [pc, #132]	; (8005b50 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8005acc:	fba2 2303 	umull	r2, r3, r2, r3
 8005ad0:	099b      	lsrs	r3, r3, #6
 8005ad2:	3301      	adds	r3, #1
 8005ad4:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8005ad6:	e002      	b.n	8005ade <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	3b01      	subs	r3, #1
 8005adc:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8005ade:	4b1a      	ldr	r3, [pc, #104]	; (8005b48 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005ae0:	68db      	ldr	r3, [r3, #12]
 8005ae2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d102      	bne.n	8005af0 <HAL_PWREx_ControlVoltageScaling+0x98>
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d1f3      	bne.n	8005ad8 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d01b      	beq.n	8005b2e <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8005af6:	4b15      	ldr	r3, [pc, #84]	; (8005b4c <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a15      	ldr	r2, [pc, #84]	; (8005b50 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8005afc:	fba2 2303 	umull	r2, r3, r2, r3
 8005b00:	099b      	lsrs	r3, r3, #6
 8005b02:	2232      	movs	r2, #50	; 0x32
 8005b04:	fb02 f303 	mul.w	r3, r2, r3
 8005b08:	4a11      	ldr	r2, [pc, #68]	; (8005b50 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8005b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b0e:	099b      	lsrs	r3, r3, #6
 8005b10:	3301      	adds	r3, #1
 8005b12:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8005b14:	e002      	b.n	8005b1c <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	3b01      	subs	r3, #1
 8005b1a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8005b1c:	4b0a      	ldr	r3, [pc, #40]	; (8005b48 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005b1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d102      	bne.n	8005b2e <HAL_PWREx_ControlVoltageScaling+0xd6>
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d1f3      	bne.n	8005b16 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d101      	bne.n	8005b38 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8005b34:	2303      	movs	r3, #3
 8005b36:	e000      	b.n	8005b3a <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8005b38:	2300      	movs	r3, #0
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3714      	adds	r7, #20
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b44:	4770      	bx	lr
 8005b46:	bf00      	nop
 8005b48:	46020800 	.word	0x46020800
 8005b4c:	20000000 	.word	0x20000000
 8005b50:	10624dd3 	.word	0x10624dd3

08005b54 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005b54:	b480      	push	{r7}
 8005b56:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8005b58:	4b04      	ldr	r3, [pc, #16]	; (8005b6c <HAL_PWREx_GetVoltageRange+0x18>)
 8005b5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	46bd      	mov	sp, r7
 8005b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b68:	4770      	bx	lr
 8005b6a:	bf00      	nop
 8005b6c:	46020800 	.word	0x46020800

08005b70 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b085      	sub	sp, #20
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8005b78:	4b22      	ldr	r3, [pc, #136]	; (8005c04 <HAL_PWREx_ConfigSupply+0x94>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a22      	ldr	r2, [pc, #136]	; (8005c08 <HAL_PWREx_ConfigSupply+0x98>)
 8005b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b82:	099b      	lsrs	r3, r3, #6
 8005b84:	2232      	movs	r2, #50	; 0x32
 8005b86:	fb02 f303 	mul.w	r3, r2, r3
 8005b8a:	4a1f      	ldr	r2, [pc, #124]	; (8005c08 <HAL_PWREx_ConfigSupply+0x98>)
 8005b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b90:	099b      	lsrs	r3, r3, #6
 8005b92:	3301      	adds	r3, #1
 8005b94:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d113      	bne.n	8005bc4 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8005b9c:	4b1b      	ldr	r3, [pc, #108]	; (8005c0c <HAL_PWREx_ConfigSupply+0x9c>)
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	4a1a      	ldr	r2, [pc, #104]	; (8005c0c <HAL_PWREx_ConfigSupply+0x9c>)
 8005ba2:	f023 0302 	bic.w	r3, r3, #2
 8005ba6:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8005ba8:	e002      	b.n	8005bb0 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	3b01      	subs	r3, #1
 8005bae:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8005bb0:	4b16      	ldr	r3, [pc, #88]	; (8005c0c <HAL_PWREx_ConfigSupply+0x9c>)
 8005bb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bb4:	f003 0302 	and.w	r3, r3, #2
 8005bb8:	2b02      	cmp	r3, #2
 8005bba:	d116      	bne.n	8005bea <HAL_PWREx_ConfigSupply+0x7a>
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d1f3      	bne.n	8005baa <HAL_PWREx_ConfigSupply+0x3a>
 8005bc2:	e012      	b.n	8005bea <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8005bc4:	4b11      	ldr	r3, [pc, #68]	; (8005c0c <HAL_PWREx_ConfigSupply+0x9c>)
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	4a10      	ldr	r2, [pc, #64]	; (8005c0c <HAL_PWREx_ConfigSupply+0x9c>)
 8005bca:	f043 0302 	orr.w	r3, r3, #2
 8005bce:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8005bd0:	e002      	b.n	8005bd8 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	3b01      	subs	r3, #1
 8005bd6:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8005bd8:	4b0c      	ldr	r3, [pc, #48]	; (8005c0c <HAL_PWREx_ConfigSupply+0x9c>)
 8005bda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bdc:	f003 0302 	and.w	r3, r3, #2
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d102      	bne.n	8005bea <HAL_PWREx_ConfigSupply+0x7a>
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d1f3      	bne.n	8005bd2 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d101      	bne.n	8005bf4 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8005bf0:	2303      	movs	r3, #3
 8005bf2:	e000      	b.n	8005bf6 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8005bf4:	2300      	movs	r3, #0
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3714      	adds	r7, #20
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr
 8005c02:	bf00      	nop
 8005c04:	20000000 	.word	0x20000000
 8005c08:	10624dd3 	.word	0x10624dd3
 8005c0c:	46020800 	.word	0x46020800

08005c10 <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005c10:	b480      	push	{r7}
 8005c12:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 8005c14:	4b05      	ldr	r3, [pc, #20]	; (8005c2c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c18:	4a04      	ldr	r2, [pc, #16]	; (8005c2c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005c1a:	f043 0301 	orr.w	r3, r3, #1
 8005c1e:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8005c20:	bf00      	nop
 8005c22:	46bd      	mov	sp, r7
 8005c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c28:	4770      	bx	lr
 8005c2a:	bf00      	nop
 8005c2c:	46020800 	.word	0x46020800

08005c30 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b08e      	sub	sp, #56	; 0x38
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d102      	bne.n	8005c4a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	f000 bec8 	b.w	80069da <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c4a:	4b99      	ldr	r3, [pc, #612]	; (8005eb0 <HAL_RCC_OscConfig+0x280>)
 8005c4c:	69db      	ldr	r3, [r3, #28]
 8005c4e:	f003 030c 	and.w	r3, r3, #12
 8005c52:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005c54:	4b96      	ldr	r3, [pc, #600]	; (8005eb0 <HAL_RCC_OscConfig+0x280>)
 8005c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c58:	f003 0303 	and.w	r3, r3, #3
 8005c5c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f003 0310 	and.w	r3, r3, #16
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	f000 816c 	beq.w	8005f44 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d007      	beq.n	8005c82 <HAL_RCC_OscConfig+0x52>
 8005c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c74:	2b0c      	cmp	r3, #12
 8005c76:	f040 80de 	bne.w	8005e36 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	f040 80da 	bne.w	8005e36 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	69db      	ldr	r3, [r3, #28]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d102      	bne.n	8005c90 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	f000 bea5 	b.w	80069da <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c94:	4b86      	ldr	r3, [pc, #536]	; (8005eb0 <HAL_RCC_OscConfig+0x280>)
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d004      	beq.n	8005caa <HAL_RCC_OscConfig+0x7a>
 8005ca0:	4b83      	ldr	r3, [pc, #524]	; (8005eb0 <HAL_RCC_OscConfig+0x280>)
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005ca8:	e005      	b.n	8005cb6 <HAL_RCC_OscConfig+0x86>
 8005caa:	4b81      	ldr	r3, [pc, #516]	; (8005eb0 <HAL_RCC_OscConfig+0x280>)
 8005cac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005cb0:	041b      	lsls	r3, r3, #16
 8005cb2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d255      	bcs.n	8005d66 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d10a      	bne.n	8005cd6 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f001 fa11 	bl	80070ec <RCC_SetFlashLatencyFromMSIRange>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d002      	beq.n	8005cd6 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	f000 be82 	b.w	80069da <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8005cd6:	4b76      	ldr	r3, [pc, #472]	; (8005eb0 <HAL_RCC_OscConfig+0x280>)
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	4a75      	ldr	r2, [pc, #468]	; (8005eb0 <HAL_RCC_OscConfig+0x280>)
 8005cdc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005ce0:	6093      	str	r3, [r2, #8]
 8005ce2:	4b73      	ldr	r3, [pc, #460]	; (8005eb0 <HAL_RCC_OscConfig+0x280>)
 8005ce4:	689b      	ldr	r3, [r3, #8]
 8005ce6:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cee:	4970      	ldr	r1, [pc, #448]	; (8005eb0 <HAL_RCC_OscConfig+0x280>)
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf8:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8005cfc:	d309      	bcc.n	8005d12 <HAL_RCC_OscConfig+0xe2>
 8005cfe:	4b6c      	ldr	r3, [pc, #432]	; (8005eb0 <HAL_RCC_OscConfig+0x280>)
 8005d00:	68db      	ldr	r3, [r3, #12]
 8005d02:	f023 021f 	bic.w	r2, r3, #31
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6a1b      	ldr	r3, [r3, #32]
 8005d0a:	4969      	ldr	r1, [pc, #420]	; (8005eb0 <HAL_RCC_OscConfig+0x280>)
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	60cb      	str	r3, [r1, #12]
 8005d10:	e07e      	b.n	8005e10 <HAL_RCC_OscConfig+0x1e0>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	da0a      	bge.n	8005d30 <HAL_RCC_OscConfig+0x100>
 8005d1a:	4b65      	ldr	r3, [pc, #404]	; (8005eb0 <HAL_RCC_OscConfig+0x280>)
 8005d1c:	68db      	ldr	r3, [r3, #12]
 8005d1e:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6a1b      	ldr	r3, [r3, #32]
 8005d26:	015b      	lsls	r3, r3, #5
 8005d28:	4961      	ldr	r1, [pc, #388]	; (8005eb0 <HAL_RCC_OscConfig+0x280>)
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	60cb      	str	r3, [r1, #12]
 8005d2e:	e06f      	b.n	8005e10 <HAL_RCC_OscConfig+0x1e0>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d38:	d30a      	bcc.n	8005d50 <HAL_RCC_OscConfig+0x120>
 8005d3a:	4b5d      	ldr	r3, [pc, #372]	; (8005eb0 <HAL_RCC_OscConfig+0x280>)
 8005d3c:	68db      	ldr	r3, [r3, #12]
 8005d3e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6a1b      	ldr	r3, [r3, #32]
 8005d46:	029b      	lsls	r3, r3, #10
 8005d48:	4959      	ldr	r1, [pc, #356]	; (8005eb0 <HAL_RCC_OscConfig+0x280>)
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	60cb      	str	r3, [r1, #12]
 8005d4e:	e05f      	b.n	8005e10 <HAL_RCC_OscConfig+0x1e0>
 8005d50:	4b57      	ldr	r3, [pc, #348]	; (8005eb0 <HAL_RCC_OscConfig+0x280>)
 8005d52:	68db      	ldr	r3, [r3, #12]
 8005d54:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6a1b      	ldr	r3, [r3, #32]
 8005d5c:	03db      	lsls	r3, r3, #15
 8005d5e:	4954      	ldr	r1, [pc, #336]	; (8005eb0 <HAL_RCC_OscConfig+0x280>)
 8005d60:	4313      	orrs	r3, r2
 8005d62:	60cb      	str	r3, [r1, #12]
 8005d64:	e054      	b.n	8005e10 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8005d66:	4b52      	ldr	r3, [pc, #328]	; (8005eb0 <HAL_RCC_OscConfig+0x280>)
 8005d68:	689b      	ldr	r3, [r3, #8]
 8005d6a:	4a51      	ldr	r2, [pc, #324]	; (8005eb0 <HAL_RCC_OscConfig+0x280>)
 8005d6c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005d70:	6093      	str	r3, [r2, #8]
 8005d72:	4b4f      	ldr	r3, [pc, #316]	; (8005eb0 <HAL_RCC_OscConfig+0x280>)
 8005d74:	689b      	ldr	r3, [r3, #8]
 8005d76:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d7e:	494c      	ldr	r1, [pc, #304]	; (8005eb0 <HAL_RCC_OscConfig+0x280>)
 8005d80:	4313      	orrs	r3, r2
 8005d82:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d88:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8005d8c:	d309      	bcc.n	8005da2 <HAL_RCC_OscConfig+0x172>
 8005d8e:	4b48      	ldr	r3, [pc, #288]	; (8005eb0 <HAL_RCC_OscConfig+0x280>)
 8005d90:	68db      	ldr	r3, [r3, #12]
 8005d92:	f023 021f 	bic.w	r2, r3, #31
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6a1b      	ldr	r3, [r3, #32]
 8005d9a:	4945      	ldr	r1, [pc, #276]	; (8005eb0 <HAL_RCC_OscConfig+0x280>)
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	60cb      	str	r3, [r1, #12]
 8005da0:	e028      	b.n	8005df4 <HAL_RCC_OscConfig+0x1c4>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	da0a      	bge.n	8005dc0 <HAL_RCC_OscConfig+0x190>
 8005daa:	4b41      	ldr	r3, [pc, #260]	; (8005eb0 <HAL_RCC_OscConfig+0x280>)
 8005dac:	68db      	ldr	r3, [r3, #12]
 8005dae:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6a1b      	ldr	r3, [r3, #32]
 8005db6:	015b      	lsls	r3, r3, #5
 8005db8:	493d      	ldr	r1, [pc, #244]	; (8005eb0 <HAL_RCC_OscConfig+0x280>)
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	60cb      	str	r3, [r1, #12]
 8005dbe:	e019      	b.n	8005df4 <HAL_RCC_OscConfig+0x1c4>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dc8:	d30a      	bcc.n	8005de0 <HAL_RCC_OscConfig+0x1b0>
 8005dca:	4b39      	ldr	r3, [pc, #228]	; (8005eb0 <HAL_RCC_OscConfig+0x280>)
 8005dcc:	68db      	ldr	r3, [r3, #12]
 8005dce:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6a1b      	ldr	r3, [r3, #32]
 8005dd6:	029b      	lsls	r3, r3, #10
 8005dd8:	4935      	ldr	r1, [pc, #212]	; (8005eb0 <HAL_RCC_OscConfig+0x280>)
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	60cb      	str	r3, [r1, #12]
 8005dde:	e009      	b.n	8005df4 <HAL_RCC_OscConfig+0x1c4>
 8005de0:	4b33      	ldr	r3, [pc, #204]	; (8005eb0 <HAL_RCC_OscConfig+0x280>)
 8005de2:	68db      	ldr	r3, [r3, #12]
 8005de4:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6a1b      	ldr	r3, [r3, #32]
 8005dec:	03db      	lsls	r3, r3, #15
 8005dee:	4930      	ldr	r1, [pc, #192]	; (8005eb0 <HAL_RCC_OscConfig+0x280>)
 8005df0:	4313      	orrs	r3, r2
 8005df2:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d10a      	bne.n	8005e10 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f001 f974 	bl	80070ec <RCC_SetFlashLatencyFromMSIRange>
 8005e04:	4603      	mov	r3, r0
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d002      	beq.n	8005e10 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	f000 bde5 	b.w	80069da <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8005e10:	f001 f8de 	bl	8006fd0 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005e14:	4b27      	ldr	r3, [pc, #156]	; (8005eb4 <HAL_RCC_OscConfig+0x284>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f7fb f919 	bl	8001050 <HAL_InitTick>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 8005e24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	f000 808a 	beq.w	8005f42 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8005e2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005e32:	f000 bdd2 	b.w	80069da <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	69db      	ldr	r3, [r3, #28]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d066      	beq.n	8005f0c <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8005e3e:	4b1c      	ldr	r3, [pc, #112]	; (8005eb0 <HAL_RCC_OscConfig+0x280>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a1b      	ldr	r2, [pc, #108]	; (8005eb0 <HAL_RCC_OscConfig+0x280>)
 8005e44:	f043 0301 	orr.w	r3, r3, #1
 8005e48:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005e4a:	f7fc f8ed 	bl	8002028 <HAL_GetTick>
 8005e4e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8005e50:	e009      	b.n	8005e66 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005e52:	f7fc f8e9 	bl	8002028 <HAL_GetTick>
 8005e56:	4602      	mov	r2, r0
 8005e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e5a:	1ad3      	subs	r3, r2, r3
 8005e5c:	2b02      	cmp	r3, #2
 8005e5e:	d902      	bls.n	8005e66 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8005e60:	2303      	movs	r3, #3
 8005e62:	f000 bdba 	b.w	80069da <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8005e66:	4b12      	ldr	r3, [pc, #72]	; (8005eb0 <HAL_RCC_OscConfig+0x280>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f003 0304 	and.w	r3, r3, #4
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d0ef      	beq.n	8005e52 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8005e72:	4b0f      	ldr	r3, [pc, #60]	; (8005eb0 <HAL_RCC_OscConfig+0x280>)
 8005e74:	689b      	ldr	r3, [r3, #8]
 8005e76:	4a0e      	ldr	r2, [pc, #56]	; (8005eb0 <HAL_RCC_OscConfig+0x280>)
 8005e78:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005e7c:	6093      	str	r3, [r2, #8]
 8005e7e:	4b0c      	ldr	r3, [pc, #48]	; (8005eb0 <HAL_RCC_OscConfig+0x280>)
 8005e80:	689b      	ldr	r3, [r3, #8]
 8005e82:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e8a:	4909      	ldr	r1, [pc, #36]	; (8005eb0 <HAL_RCC_OscConfig+0x280>)
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e94:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8005e98:	d30e      	bcc.n	8005eb8 <HAL_RCC_OscConfig+0x288>
 8005e9a:	4b05      	ldr	r3, [pc, #20]	; (8005eb0 <HAL_RCC_OscConfig+0x280>)
 8005e9c:	68db      	ldr	r3, [r3, #12]
 8005e9e:	f023 021f 	bic.w	r2, r3, #31
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6a1b      	ldr	r3, [r3, #32]
 8005ea6:	4902      	ldr	r1, [pc, #8]	; (8005eb0 <HAL_RCC_OscConfig+0x280>)
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	60cb      	str	r3, [r1, #12]
 8005eac:	e04a      	b.n	8005f44 <HAL_RCC_OscConfig+0x314>
 8005eae:	bf00      	nop
 8005eb0:	46020c00 	.word	0x46020c00
 8005eb4:	20000004 	.word	0x20000004
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	da0a      	bge.n	8005ed6 <HAL_RCC_OscConfig+0x2a6>
 8005ec0:	4b98      	ldr	r3, [pc, #608]	; (8006124 <HAL_RCC_OscConfig+0x4f4>)
 8005ec2:	68db      	ldr	r3, [r3, #12]
 8005ec4:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6a1b      	ldr	r3, [r3, #32]
 8005ecc:	015b      	lsls	r3, r3, #5
 8005ece:	4995      	ldr	r1, [pc, #596]	; (8006124 <HAL_RCC_OscConfig+0x4f4>)
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	60cb      	str	r3, [r1, #12]
 8005ed4:	e036      	b.n	8005f44 <HAL_RCC_OscConfig+0x314>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ede:	d30a      	bcc.n	8005ef6 <HAL_RCC_OscConfig+0x2c6>
 8005ee0:	4b90      	ldr	r3, [pc, #576]	; (8006124 <HAL_RCC_OscConfig+0x4f4>)
 8005ee2:	68db      	ldr	r3, [r3, #12]
 8005ee4:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6a1b      	ldr	r3, [r3, #32]
 8005eec:	029b      	lsls	r3, r3, #10
 8005eee:	498d      	ldr	r1, [pc, #564]	; (8006124 <HAL_RCC_OscConfig+0x4f4>)
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	60cb      	str	r3, [r1, #12]
 8005ef4:	e026      	b.n	8005f44 <HAL_RCC_OscConfig+0x314>
 8005ef6:	4b8b      	ldr	r3, [pc, #556]	; (8006124 <HAL_RCC_OscConfig+0x4f4>)
 8005ef8:	68db      	ldr	r3, [r3, #12]
 8005efa:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6a1b      	ldr	r3, [r3, #32]
 8005f02:	03db      	lsls	r3, r3, #15
 8005f04:	4987      	ldr	r1, [pc, #540]	; (8006124 <HAL_RCC_OscConfig+0x4f4>)
 8005f06:	4313      	orrs	r3, r2
 8005f08:	60cb      	str	r3, [r1, #12]
 8005f0a:	e01b      	b.n	8005f44 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8005f0c:	4b85      	ldr	r3, [pc, #532]	; (8006124 <HAL_RCC_OscConfig+0x4f4>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a84      	ldr	r2, [pc, #528]	; (8006124 <HAL_RCC_OscConfig+0x4f4>)
 8005f12:	f023 0301 	bic.w	r3, r3, #1
 8005f16:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005f18:	f7fc f886 	bl	8002028 <HAL_GetTick>
 8005f1c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8005f1e:	e009      	b.n	8005f34 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005f20:	f7fc f882 	bl	8002028 <HAL_GetTick>
 8005f24:	4602      	mov	r2, r0
 8005f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f28:	1ad3      	subs	r3, r2, r3
 8005f2a:	2b02      	cmp	r3, #2
 8005f2c:	d902      	bls.n	8005f34 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8005f2e:	2303      	movs	r3, #3
 8005f30:	f000 bd53 	b.w	80069da <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8005f34:	4b7b      	ldr	r3, [pc, #492]	; (8006124 <HAL_RCC_OscConfig+0x4f4>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f003 0304 	and.w	r3, r3, #4
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d1ef      	bne.n	8005f20 <HAL_RCC_OscConfig+0x2f0>
 8005f40:	e000      	b.n	8005f44 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005f42:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f003 0301 	and.w	r3, r3, #1
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	f000 808b 	beq.w	8006068 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f54:	2b08      	cmp	r3, #8
 8005f56:	d005      	beq.n	8005f64 <HAL_RCC_OscConfig+0x334>
 8005f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f5a:	2b0c      	cmp	r3, #12
 8005f5c:	d109      	bne.n	8005f72 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f60:	2b03      	cmp	r3, #3
 8005f62:	d106      	bne.n	8005f72 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d17d      	bne.n	8006068 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	f000 bd34 	b.w	80069da <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f7a:	d106      	bne.n	8005f8a <HAL_RCC_OscConfig+0x35a>
 8005f7c:	4b69      	ldr	r3, [pc, #420]	; (8006124 <HAL_RCC_OscConfig+0x4f4>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a68      	ldr	r2, [pc, #416]	; (8006124 <HAL_RCC_OscConfig+0x4f4>)
 8005f82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f86:	6013      	str	r3, [r2, #0]
 8005f88:	e041      	b.n	800600e <HAL_RCC_OscConfig+0x3de>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005f92:	d112      	bne.n	8005fba <HAL_RCC_OscConfig+0x38a>
 8005f94:	4b63      	ldr	r3, [pc, #396]	; (8006124 <HAL_RCC_OscConfig+0x4f4>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a62      	ldr	r2, [pc, #392]	; (8006124 <HAL_RCC_OscConfig+0x4f4>)
 8005f9a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005f9e:	6013      	str	r3, [r2, #0]
 8005fa0:	4b60      	ldr	r3, [pc, #384]	; (8006124 <HAL_RCC_OscConfig+0x4f4>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a5f      	ldr	r2, [pc, #380]	; (8006124 <HAL_RCC_OscConfig+0x4f4>)
 8005fa6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005faa:	6013      	str	r3, [r2, #0]
 8005fac:	4b5d      	ldr	r3, [pc, #372]	; (8006124 <HAL_RCC_OscConfig+0x4f4>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a5c      	ldr	r2, [pc, #368]	; (8006124 <HAL_RCC_OscConfig+0x4f4>)
 8005fb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fb6:	6013      	str	r3, [r2, #0]
 8005fb8:	e029      	b.n	800600e <HAL_RCC_OscConfig+0x3de>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8005fc2:	d112      	bne.n	8005fea <HAL_RCC_OscConfig+0x3ba>
 8005fc4:	4b57      	ldr	r3, [pc, #348]	; (8006124 <HAL_RCC_OscConfig+0x4f4>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a56      	ldr	r2, [pc, #344]	; (8006124 <HAL_RCC_OscConfig+0x4f4>)
 8005fca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005fce:	6013      	str	r3, [r2, #0]
 8005fd0:	4b54      	ldr	r3, [pc, #336]	; (8006124 <HAL_RCC_OscConfig+0x4f4>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a53      	ldr	r2, [pc, #332]	; (8006124 <HAL_RCC_OscConfig+0x4f4>)
 8005fd6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005fda:	6013      	str	r3, [r2, #0]
 8005fdc:	4b51      	ldr	r3, [pc, #324]	; (8006124 <HAL_RCC_OscConfig+0x4f4>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a50      	ldr	r2, [pc, #320]	; (8006124 <HAL_RCC_OscConfig+0x4f4>)
 8005fe2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fe6:	6013      	str	r3, [r2, #0]
 8005fe8:	e011      	b.n	800600e <HAL_RCC_OscConfig+0x3de>
 8005fea:	4b4e      	ldr	r3, [pc, #312]	; (8006124 <HAL_RCC_OscConfig+0x4f4>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a4d      	ldr	r2, [pc, #308]	; (8006124 <HAL_RCC_OscConfig+0x4f4>)
 8005ff0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ff4:	6013      	str	r3, [r2, #0]
 8005ff6:	4b4b      	ldr	r3, [pc, #300]	; (8006124 <HAL_RCC_OscConfig+0x4f4>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a4a      	ldr	r2, [pc, #296]	; (8006124 <HAL_RCC_OscConfig+0x4f4>)
 8005ffc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006000:	6013      	str	r3, [r2, #0]
 8006002:	4b48      	ldr	r3, [pc, #288]	; (8006124 <HAL_RCC_OscConfig+0x4f4>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a47      	ldr	r2, [pc, #284]	; (8006124 <HAL_RCC_OscConfig+0x4f4>)
 8006008:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800600c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d014      	beq.n	8006040 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8006016:	f7fc f807 	bl	8002028 <HAL_GetTick>
 800601a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800601c:	e009      	b.n	8006032 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800601e:	f7fc f803 	bl	8002028 <HAL_GetTick>
 8006022:	4602      	mov	r2, r0
 8006024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006026:	1ad3      	subs	r3, r2, r3
 8006028:	2b64      	cmp	r3, #100	; 0x64
 800602a:	d902      	bls.n	8006032 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 800602c:	2303      	movs	r3, #3
 800602e:	f000 bcd4 	b.w	80069da <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006032:	4b3c      	ldr	r3, [pc, #240]	; (8006124 <HAL_RCC_OscConfig+0x4f4>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800603a:	2b00      	cmp	r3, #0
 800603c:	d0ef      	beq.n	800601e <HAL_RCC_OscConfig+0x3ee>
 800603e:	e013      	b.n	8006068 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8006040:	f7fb fff2 	bl	8002028 <HAL_GetTick>
 8006044:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006046:	e009      	b.n	800605c <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006048:	f7fb ffee 	bl	8002028 <HAL_GetTick>
 800604c:	4602      	mov	r2, r0
 800604e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006050:	1ad3      	subs	r3, r2, r3
 8006052:	2b64      	cmp	r3, #100	; 0x64
 8006054:	d902      	bls.n	800605c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8006056:	2303      	movs	r3, #3
 8006058:	f000 bcbf 	b.w	80069da <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800605c:	4b31      	ldr	r3, [pc, #196]	; (8006124 <HAL_RCC_OscConfig+0x4f4>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006064:	2b00      	cmp	r3, #0
 8006066:	d1ef      	bne.n	8006048 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f003 0302 	and.w	r3, r3, #2
 8006070:	2b00      	cmp	r3, #0
 8006072:	d05f      	beq.n	8006134 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8006074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006076:	2b04      	cmp	r3, #4
 8006078:	d005      	beq.n	8006086 <HAL_RCC_OscConfig+0x456>
 800607a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800607c:	2b0c      	cmp	r3, #12
 800607e:	d114      	bne.n	80060aa <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006082:	2b02      	cmp	r3, #2
 8006084:	d111      	bne.n	80060aa <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	68db      	ldr	r3, [r3, #12]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d102      	bne.n	8006094 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 800608e:	2301      	movs	r3, #1
 8006090:	f000 bca3 	b.w	80069da <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8006094:	4b23      	ldr	r3, [pc, #140]	; (8006124 <HAL_RCC_OscConfig+0x4f4>)
 8006096:	691b      	ldr	r3, [r3, #16]
 8006098:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	691b      	ldr	r3, [r3, #16]
 80060a0:	041b      	lsls	r3, r3, #16
 80060a2:	4920      	ldr	r1, [pc, #128]	; (8006124 <HAL_RCC_OscConfig+0x4f4>)
 80060a4:	4313      	orrs	r3, r2
 80060a6:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80060a8:	e044      	b.n	8006134 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	68db      	ldr	r3, [r3, #12]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d024      	beq.n	80060fc <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 80060b2:	4b1c      	ldr	r3, [pc, #112]	; (8006124 <HAL_RCC_OscConfig+0x4f4>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a1b      	ldr	r2, [pc, #108]	; (8006124 <HAL_RCC_OscConfig+0x4f4>)
 80060b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060bc:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80060be:	f7fb ffb3 	bl	8002028 <HAL_GetTick>
 80060c2:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80060c4:	e009      	b.n	80060da <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060c6:	f7fb ffaf 	bl	8002028 <HAL_GetTick>
 80060ca:	4602      	mov	r2, r0
 80060cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ce:	1ad3      	subs	r3, r2, r3
 80060d0:	2b02      	cmp	r3, #2
 80060d2:	d902      	bls.n	80060da <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80060d4:	2303      	movs	r3, #3
 80060d6:	f000 bc80 	b.w	80069da <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80060da:	4b12      	ldr	r3, [pc, #72]	; (8006124 <HAL_RCC_OscConfig+0x4f4>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d0ef      	beq.n	80060c6 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80060e6:	4b0f      	ldr	r3, [pc, #60]	; (8006124 <HAL_RCC_OscConfig+0x4f4>)
 80060e8:	691b      	ldr	r3, [r3, #16]
 80060ea:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	691b      	ldr	r3, [r3, #16]
 80060f2:	041b      	lsls	r3, r3, #16
 80060f4:	490b      	ldr	r1, [pc, #44]	; (8006124 <HAL_RCC_OscConfig+0x4f4>)
 80060f6:	4313      	orrs	r3, r2
 80060f8:	610b      	str	r3, [r1, #16]
 80060fa:	e01b      	b.n	8006134 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 80060fc:	4b09      	ldr	r3, [pc, #36]	; (8006124 <HAL_RCC_OscConfig+0x4f4>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a08      	ldr	r2, [pc, #32]	; (8006124 <HAL_RCC_OscConfig+0x4f4>)
 8006102:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006106:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006108:	f7fb ff8e 	bl	8002028 <HAL_GetTick>
 800610c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800610e:	e00b      	b.n	8006128 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006110:	f7fb ff8a 	bl	8002028 <HAL_GetTick>
 8006114:	4602      	mov	r2, r0
 8006116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006118:	1ad3      	subs	r3, r2, r3
 800611a:	2b02      	cmp	r3, #2
 800611c:	d904      	bls.n	8006128 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 800611e:	2303      	movs	r3, #3
 8006120:	f000 bc5b 	b.w	80069da <HAL_RCC_OscConfig+0xdaa>
 8006124:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006128:	4baf      	ldr	r3, [pc, #700]	; (80063e8 <HAL_RCC_OscConfig+0x7b8>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006130:	2b00      	cmp	r3, #0
 8006132:	d1ed      	bne.n	8006110 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f003 0308 	and.w	r3, r3, #8
 800613c:	2b00      	cmp	r3, #0
 800613e:	f000 80c8 	beq.w	80062d2 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8006142:	2300      	movs	r3, #0
 8006144:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006148:	4ba7      	ldr	r3, [pc, #668]	; (80063e8 <HAL_RCC_OscConfig+0x7b8>)
 800614a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800614e:	f003 0304 	and.w	r3, r3, #4
 8006152:	2b00      	cmp	r3, #0
 8006154:	d111      	bne.n	800617a <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006156:	4ba4      	ldr	r3, [pc, #656]	; (80063e8 <HAL_RCC_OscConfig+0x7b8>)
 8006158:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800615c:	4aa2      	ldr	r2, [pc, #648]	; (80063e8 <HAL_RCC_OscConfig+0x7b8>)
 800615e:	f043 0304 	orr.w	r3, r3, #4
 8006162:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8006166:	4ba0      	ldr	r3, [pc, #640]	; (80063e8 <HAL_RCC_OscConfig+0x7b8>)
 8006168:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800616c:	f003 0304 	and.w	r3, r3, #4
 8006170:	617b      	str	r3, [r7, #20]
 8006172:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8006174:	2301      	movs	r3, #1
 8006176:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800617a:	4b9c      	ldr	r3, [pc, #624]	; (80063ec <HAL_RCC_OscConfig+0x7bc>)
 800617c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800617e:	f003 0301 	and.w	r3, r3, #1
 8006182:	2b00      	cmp	r3, #0
 8006184:	d119      	bne.n	80061ba <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8006186:	4b99      	ldr	r3, [pc, #612]	; (80063ec <HAL_RCC_OscConfig+0x7bc>)
 8006188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800618a:	4a98      	ldr	r2, [pc, #608]	; (80063ec <HAL_RCC_OscConfig+0x7bc>)
 800618c:	f043 0301 	orr.w	r3, r3, #1
 8006190:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006192:	f7fb ff49 	bl	8002028 <HAL_GetTick>
 8006196:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006198:	e009      	b.n	80061ae <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800619a:	f7fb ff45 	bl	8002028 <HAL_GetTick>
 800619e:	4602      	mov	r2, r0
 80061a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a2:	1ad3      	subs	r3, r2, r3
 80061a4:	2b02      	cmp	r3, #2
 80061a6:	d902      	bls.n	80061ae <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 80061a8:	2303      	movs	r3, #3
 80061aa:	f000 bc16 	b.w	80069da <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80061ae:	4b8f      	ldr	r3, [pc, #572]	; (80063ec <HAL_RCC_OscConfig+0x7bc>)
 80061b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061b2:	f003 0301 	and.w	r3, r3, #1
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d0ef      	beq.n	800619a <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	695b      	ldr	r3, [r3, #20]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d05f      	beq.n	8006282 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 80061c2:	4b89      	ldr	r3, [pc, #548]	; (80063e8 <HAL_RCC_OscConfig+0x7b8>)
 80061c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80061c8:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	699a      	ldr	r2, [r3, #24]
 80061ce:	6a3b      	ldr	r3, [r7, #32]
 80061d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061d4:	429a      	cmp	r2, r3
 80061d6:	d037      	beq.n	8006248 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80061d8:	6a3b      	ldr	r3, [r7, #32]
 80061da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d006      	beq.n	80061f0 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 80061e2:	6a3b      	ldr	r3, [r7, #32]
 80061e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d101      	bne.n	80061f0 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 80061ec:	2301      	movs	r3, #1
 80061ee:	e3f4      	b.n	80069da <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 80061f0:	6a3b      	ldr	r3, [r7, #32]
 80061f2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d01b      	beq.n	8006232 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 80061fa:	4b7b      	ldr	r3, [pc, #492]	; (80063e8 <HAL_RCC_OscConfig+0x7b8>)
 80061fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006200:	4a79      	ldr	r2, [pc, #484]	; (80063e8 <HAL_RCC_OscConfig+0x7b8>)
 8006202:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8006206:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 800620a:	f7fb ff0d 	bl	8002028 <HAL_GetTick>
 800620e:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006210:	e008      	b.n	8006224 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006212:	f7fb ff09 	bl	8002028 <HAL_GetTick>
 8006216:	4602      	mov	r2, r0
 8006218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800621a:	1ad3      	subs	r3, r2, r3
 800621c:	2b05      	cmp	r3, #5
 800621e:	d901      	bls.n	8006224 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8006220:	2303      	movs	r3, #3
 8006222:	e3da      	b.n	80069da <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006224:	4b70      	ldr	r3, [pc, #448]	; (80063e8 <HAL_RCC_OscConfig+0x7b8>)
 8006226:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800622a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800622e:	2b00      	cmp	r3, #0
 8006230:	d1ef      	bne.n	8006212 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8006232:	4b6d      	ldr	r3, [pc, #436]	; (80063e8 <HAL_RCC_OscConfig+0x7b8>)
 8006234:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006238:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	699b      	ldr	r3, [r3, #24]
 8006240:	4969      	ldr	r1, [pc, #420]	; (80063e8 <HAL_RCC_OscConfig+0x7b8>)
 8006242:	4313      	orrs	r3, r2
 8006244:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8006248:	4b67      	ldr	r3, [pc, #412]	; (80063e8 <HAL_RCC_OscConfig+0x7b8>)
 800624a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800624e:	4a66      	ldr	r2, [pc, #408]	; (80063e8 <HAL_RCC_OscConfig+0x7b8>)
 8006250:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006254:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8006258:	f7fb fee6 	bl	8002028 <HAL_GetTick>
 800625c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800625e:	e008      	b.n	8006272 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006260:	f7fb fee2 	bl	8002028 <HAL_GetTick>
 8006264:	4602      	mov	r2, r0
 8006266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006268:	1ad3      	subs	r3, r2, r3
 800626a:	2b05      	cmp	r3, #5
 800626c:	d901      	bls.n	8006272 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 800626e:	2303      	movs	r3, #3
 8006270:	e3b3      	b.n	80069da <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8006272:	4b5d      	ldr	r3, [pc, #372]	; (80063e8 <HAL_RCC_OscConfig+0x7b8>)
 8006274:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006278:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800627c:	2b00      	cmp	r3, #0
 800627e:	d0ef      	beq.n	8006260 <HAL_RCC_OscConfig+0x630>
 8006280:	e01b      	b.n	80062ba <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8006282:	4b59      	ldr	r3, [pc, #356]	; (80063e8 <HAL_RCC_OscConfig+0x7b8>)
 8006284:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006288:	4a57      	ldr	r2, [pc, #348]	; (80063e8 <HAL_RCC_OscConfig+0x7b8>)
 800628a:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 800628e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8006292:	f7fb fec9 	bl	8002028 <HAL_GetTick>
 8006296:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006298:	e008      	b.n	80062ac <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800629a:	f7fb fec5 	bl	8002028 <HAL_GetTick>
 800629e:	4602      	mov	r2, r0
 80062a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062a2:	1ad3      	subs	r3, r2, r3
 80062a4:	2b05      	cmp	r3, #5
 80062a6:	d901      	bls.n	80062ac <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 80062a8:	2303      	movs	r3, #3
 80062aa:	e396      	b.n	80069da <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80062ac:	4b4e      	ldr	r3, [pc, #312]	; (80063e8 <HAL_RCC_OscConfig+0x7b8>)
 80062ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80062b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d1ef      	bne.n	800629a <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80062ba:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80062be:	2b01      	cmp	r3, #1
 80062c0:	d107      	bne.n	80062d2 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80062c2:	4b49      	ldr	r3, [pc, #292]	; (80063e8 <HAL_RCC_OscConfig+0x7b8>)
 80062c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80062c8:	4a47      	ldr	r2, [pc, #284]	; (80063e8 <HAL_RCC_OscConfig+0x7b8>)
 80062ca:	f023 0304 	bic.w	r3, r3, #4
 80062ce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f003 0304 	and.w	r3, r3, #4
 80062da:	2b00      	cmp	r3, #0
 80062dc:	f000 8111 	beq.w	8006502 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 80062e0:	2300      	movs	r3, #0
 80062e2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80062e6:	4b40      	ldr	r3, [pc, #256]	; (80063e8 <HAL_RCC_OscConfig+0x7b8>)
 80062e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80062ec:	f003 0304 	and.w	r3, r3, #4
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d111      	bne.n	8006318 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80062f4:	4b3c      	ldr	r3, [pc, #240]	; (80063e8 <HAL_RCC_OscConfig+0x7b8>)
 80062f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80062fa:	4a3b      	ldr	r2, [pc, #236]	; (80063e8 <HAL_RCC_OscConfig+0x7b8>)
 80062fc:	f043 0304 	orr.w	r3, r3, #4
 8006300:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8006304:	4b38      	ldr	r3, [pc, #224]	; (80063e8 <HAL_RCC_OscConfig+0x7b8>)
 8006306:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800630a:	f003 0304 	and.w	r3, r3, #4
 800630e:	613b      	str	r3, [r7, #16]
 8006310:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8006312:	2301      	movs	r3, #1
 8006314:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006318:	4b34      	ldr	r3, [pc, #208]	; (80063ec <HAL_RCC_OscConfig+0x7bc>)
 800631a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800631c:	f003 0301 	and.w	r3, r3, #1
 8006320:	2b00      	cmp	r3, #0
 8006322:	d118      	bne.n	8006356 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8006324:	4b31      	ldr	r3, [pc, #196]	; (80063ec <HAL_RCC_OscConfig+0x7bc>)
 8006326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006328:	4a30      	ldr	r2, [pc, #192]	; (80063ec <HAL_RCC_OscConfig+0x7bc>)
 800632a:	f043 0301 	orr.w	r3, r3, #1
 800632e:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006330:	f7fb fe7a 	bl	8002028 <HAL_GetTick>
 8006334:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006336:	e008      	b.n	800634a <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006338:	f7fb fe76 	bl	8002028 <HAL_GetTick>
 800633c:	4602      	mov	r2, r0
 800633e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006340:	1ad3      	subs	r3, r2, r3
 8006342:	2b02      	cmp	r3, #2
 8006344:	d901      	bls.n	800634a <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8006346:	2303      	movs	r3, #3
 8006348:	e347      	b.n	80069da <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800634a:	4b28      	ldr	r3, [pc, #160]	; (80063ec <HAL_RCC_OscConfig+0x7bc>)
 800634c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800634e:	f003 0301 	and.w	r3, r3, #1
 8006352:	2b00      	cmp	r3, #0
 8006354:	d0f0      	beq.n	8006338 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	689b      	ldr	r3, [r3, #8]
 800635a:	f003 0301 	and.w	r3, r3, #1
 800635e:	2b00      	cmp	r3, #0
 8006360:	d01f      	beq.n	80063a2 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	f003 0304 	and.w	r3, r3, #4
 800636a:	2b00      	cmp	r3, #0
 800636c:	d010      	beq.n	8006390 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800636e:	4b1e      	ldr	r3, [pc, #120]	; (80063e8 <HAL_RCC_OscConfig+0x7b8>)
 8006370:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006374:	4a1c      	ldr	r2, [pc, #112]	; (80063e8 <HAL_RCC_OscConfig+0x7b8>)
 8006376:	f043 0304 	orr.w	r3, r3, #4
 800637a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800637e:	4b1a      	ldr	r3, [pc, #104]	; (80063e8 <HAL_RCC_OscConfig+0x7b8>)
 8006380:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006384:	4a18      	ldr	r2, [pc, #96]	; (80063e8 <HAL_RCC_OscConfig+0x7b8>)
 8006386:	f043 0301 	orr.w	r3, r3, #1
 800638a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800638e:	e018      	b.n	80063c2 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006390:	4b15      	ldr	r3, [pc, #84]	; (80063e8 <HAL_RCC_OscConfig+0x7b8>)
 8006392:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006396:	4a14      	ldr	r2, [pc, #80]	; (80063e8 <HAL_RCC_OscConfig+0x7b8>)
 8006398:	f043 0301 	orr.w	r3, r3, #1
 800639c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80063a0:	e00f      	b.n	80063c2 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80063a2:	4b11      	ldr	r3, [pc, #68]	; (80063e8 <HAL_RCC_OscConfig+0x7b8>)
 80063a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80063a8:	4a0f      	ldr	r2, [pc, #60]	; (80063e8 <HAL_RCC_OscConfig+0x7b8>)
 80063aa:	f023 0301 	bic.w	r3, r3, #1
 80063ae:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80063b2:	4b0d      	ldr	r3, [pc, #52]	; (80063e8 <HAL_RCC_OscConfig+0x7b8>)
 80063b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80063b8:	4a0b      	ldr	r2, [pc, #44]	; (80063e8 <HAL_RCC_OscConfig+0x7b8>)
 80063ba:	f023 0304 	bic.w	r3, r3, #4
 80063be:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	689b      	ldr	r3, [r3, #8]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d057      	beq.n	800647a <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 80063ca:	f7fb fe2d 	bl	8002028 <HAL_GetTick>
 80063ce:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80063d0:	e00e      	b.n	80063f0 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063d2:	f7fb fe29 	bl	8002028 <HAL_GetTick>
 80063d6:	4602      	mov	r2, r0
 80063d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063da:	1ad3      	subs	r3, r2, r3
 80063dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d905      	bls.n	80063f0 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 80063e4:	2303      	movs	r3, #3
 80063e6:	e2f8      	b.n	80069da <HAL_RCC_OscConfig+0xdaa>
 80063e8:	46020c00 	.word	0x46020c00
 80063ec:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80063f0:	4b9c      	ldr	r3, [pc, #624]	; (8006664 <HAL_RCC_OscConfig+0xa34>)
 80063f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80063f6:	f003 0302 	and.w	r3, r3, #2
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d0e9      	beq.n	80063d2 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	689b      	ldr	r3, [r3, #8]
 8006402:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006406:	2b00      	cmp	r3, #0
 8006408:	d01b      	beq.n	8006442 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800640a:	4b96      	ldr	r3, [pc, #600]	; (8006664 <HAL_RCC_OscConfig+0xa34>)
 800640c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006410:	4a94      	ldr	r2, [pc, #592]	; (8006664 <HAL_RCC_OscConfig+0xa34>)
 8006412:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006416:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800641a:	e00a      	b.n	8006432 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800641c:	f7fb fe04 	bl	8002028 <HAL_GetTick>
 8006420:	4602      	mov	r2, r0
 8006422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006424:	1ad3      	subs	r3, r2, r3
 8006426:	f241 3288 	movw	r2, #5000	; 0x1388
 800642a:	4293      	cmp	r3, r2
 800642c:	d901      	bls.n	8006432 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 800642e:	2303      	movs	r3, #3
 8006430:	e2d3      	b.n	80069da <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8006432:	4b8c      	ldr	r3, [pc, #560]	; (8006664 <HAL_RCC_OscConfig+0xa34>)
 8006434:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006438:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800643c:	2b00      	cmp	r3, #0
 800643e:	d0ed      	beq.n	800641c <HAL_RCC_OscConfig+0x7ec>
 8006440:	e053      	b.n	80064ea <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006442:	4b88      	ldr	r3, [pc, #544]	; (8006664 <HAL_RCC_OscConfig+0xa34>)
 8006444:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006448:	4a86      	ldr	r2, [pc, #536]	; (8006664 <HAL_RCC_OscConfig+0xa34>)
 800644a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800644e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006452:	e00a      	b.n	800646a <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006454:	f7fb fde8 	bl	8002028 <HAL_GetTick>
 8006458:	4602      	mov	r2, r0
 800645a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800645c:	1ad3      	subs	r3, r2, r3
 800645e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006462:	4293      	cmp	r3, r2
 8006464:	d901      	bls.n	800646a <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8006466:	2303      	movs	r3, #3
 8006468:	e2b7      	b.n	80069da <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800646a:	4b7e      	ldr	r3, [pc, #504]	; (8006664 <HAL_RCC_OscConfig+0xa34>)
 800646c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006470:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006474:	2b00      	cmp	r3, #0
 8006476:	d1ed      	bne.n	8006454 <HAL_RCC_OscConfig+0x824>
 8006478:	e037      	b.n	80064ea <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 800647a:	f7fb fdd5 	bl	8002028 <HAL_GetTick>
 800647e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006480:	e00a      	b.n	8006498 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006482:	f7fb fdd1 	bl	8002028 <HAL_GetTick>
 8006486:	4602      	mov	r2, r0
 8006488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800648a:	1ad3      	subs	r3, r2, r3
 800648c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006490:	4293      	cmp	r3, r2
 8006492:	d901      	bls.n	8006498 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8006494:	2303      	movs	r3, #3
 8006496:	e2a0      	b.n	80069da <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006498:	4b72      	ldr	r3, [pc, #456]	; (8006664 <HAL_RCC_OscConfig+0xa34>)
 800649a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800649e:	f003 0302 	and.w	r3, r3, #2
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d1ed      	bne.n	8006482 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80064a6:	4b6f      	ldr	r3, [pc, #444]	; (8006664 <HAL_RCC_OscConfig+0xa34>)
 80064a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80064ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d01a      	beq.n	80064ea <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80064b4:	4b6b      	ldr	r3, [pc, #428]	; (8006664 <HAL_RCC_OscConfig+0xa34>)
 80064b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80064ba:	4a6a      	ldr	r2, [pc, #424]	; (8006664 <HAL_RCC_OscConfig+0xa34>)
 80064bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064c0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80064c4:	e00a      	b.n	80064dc <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064c6:	f7fb fdaf 	bl	8002028 <HAL_GetTick>
 80064ca:	4602      	mov	r2, r0
 80064cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ce:	1ad3      	subs	r3, r2, r3
 80064d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d901      	bls.n	80064dc <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 80064d8:	2303      	movs	r3, #3
 80064da:	e27e      	b.n	80069da <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80064dc:	4b61      	ldr	r3, [pc, #388]	; (8006664 <HAL_RCC_OscConfig+0xa34>)
 80064de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80064e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d1ed      	bne.n	80064c6 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80064ea:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80064ee:	2b01      	cmp	r3, #1
 80064f0:	d107      	bne.n	8006502 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80064f2:	4b5c      	ldr	r3, [pc, #368]	; (8006664 <HAL_RCC_OscConfig+0xa34>)
 80064f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80064f8:	4a5a      	ldr	r2, [pc, #360]	; (8006664 <HAL_RCC_OscConfig+0xa34>)
 80064fa:	f023 0304 	bic.w	r3, r3, #4
 80064fe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f003 0320 	and.w	r3, r3, #32
 800650a:	2b00      	cmp	r3, #0
 800650c:	d036      	beq.n	800657c <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006512:	2b00      	cmp	r3, #0
 8006514:	d019      	beq.n	800654a <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8006516:	4b53      	ldr	r3, [pc, #332]	; (8006664 <HAL_RCC_OscConfig+0xa34>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a52      	ldr	r2, [pc, #328]	; (8006664 <HAL_RCC_OscConfig+0xa34>)
 800651c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006520:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006522:	f7fb fd81 	bl	8002028 <HAL_GetTick>
 8006526:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8006528:	e008      	b.n	800653c <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800652a:	f7fb fd7d 	bl	8002028 <HAL_GetTick>
 800652e:	4602      	mov	r2, r0
 8006530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006532:	1ad3      	subs	r3, r2, r3
 8006534:	2b02      	cmp	r3, #2
 8006536:	d901      	bls.n	800653c <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8006538:	2303      	movs	r3, #3
 800653a:	e24e      	b.n	80069da <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800653c:	4b49      	ldr	r3, [pc, #292]	; (8006664 <HAL_RCC_OscConfig+0xa34>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006544:	2b00      	cmp	r3, #0
 8006546:	d0f0      	beq.n	800652a <HAL_RCC_OscConfig+0x8fa>
 8006548:	e018      	b.n	800657c <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 800654a:	4b46      	ldr	r3, [pc, #280]	; (8006664 <HAL_RCC_OscConfig+0xa34>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a45      	ldr	r2, [pc, #276]	; (8006664 <HAL_RCC_OscConfig+0xa34>)
 8006550:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006554:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006556:	f7fb fd67 	bl	8002028 <HAL_GetTick>
 800655a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800655c:	e008      	b.n	8006570 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800655e:	f7fb fd63 	bl	8002028 <HAL_GetTick>
 8006562:	4602      	mov	r2, r0
 8006564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006566:	1ad3      	subs	r3, r2, r3
 8006568:	2b02      	cmp	r3, #2
 800656a:	d901      	bls.n	8006570 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 800656c:	2303      	movs	r3, #3
 800656e:	e234      	b.n	80069da <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8006570:	4b3c      	ldr	r3, [pc, #240]	; (8006664 <HAL_RCC_OscConfig+0xa34>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006578:	2b00      	cmp	r3, #0
 800657a:	d1f0      	bne.n	800655e <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006584:	2b00      	cmp	r3, #0
 8006586:	d036      	beq.n	80065f6 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800658c:	2b00      	cmp	r3, #0
 800658e:	d019      	beq.n	80065c4 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8006590:	4b34      	ldr	r3, [pc, #208]	; (8006664 <HAL_RCC_OscConfig+0xa34>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a33      	ldr	r2, [pc, #204]	; (8006664 <HAL_RCC_OscConfig+0xa34>)
 8006596:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800659a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800659c:	f7fb fd44 	bl	8002028 <HAL_GetTick>
 80065a0:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80065a2:	e008      	b.n	80065b6 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80065a4:	f7fb fd40 	bl	8002028 <HAL_GetTick>
 80065a8:	4602      	mov	r2, r0
 80065aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ac:	1ad3      	subs	r3, r2, r3
 80065ae:	2b02      	cmp	r3, #2
 80065b0:	d901      	bls.n	80065b6 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 80065b2:	2303      	movs	r3, #3
 80065b4:	e211      	b.n	80069da <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80065b6:	4b2b      	ldr	r3, [pc, #172]	; (8006664 <HAL_RCC_OscConfig+0xa34>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d0f0      	beq.n	80065a4 <HAL_RCC_OscConfig+0x974>
 80065c2:	e018      	b.n	80065f6 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 80065c4:	4b27      	ldr	r3, [pc, #156]	; (8006664 <HAL_RCC_OscConfig+0xa34>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a26      	ldr	r2, [pc, #152]	; (8006664 <HAL_RCC_OscConfig+0xa34>)
 80065ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80065ce:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80065d0:	f7fb fd2a 	bl	8002028 <HAL_GetTick>
 80065d4:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80065d6:	e008      	b.n	80065ea <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80065d8:	f7fb fd26 	bl	8002028 <HAL_GetTick>
 80065dc:	4602      	mov	r2, r0
 80065de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e0:	1ad3      	subs	r3, r2, r3
 80065e2:	2b02      	cmp	r3, #2
 80065e4:	d901      	bls.n	80065ea <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 80065e6:	2303      	movs	r3, #3
 80065e8:	e1f7      	b.n	80069da <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80065ea:	4b1e      	ldr	r3, [pc, #120]	; (8006664 <HAL_RCC_OscConfig+0xa34>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d1f0      	bne.n	80065d8 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d07f      	beq.n	8006702 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006606:	2b00      	cmp	r3, #0
 8006608:	d062      	beq.n	80066d0 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 800660a:	4b16      	ldr	r3, [pc, #88]	; (8006664 <HAL_RCC_OscConfig+0xa34>)
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	4a15      	ldr	r2, [pc, #84]	; (8006664 <HAL_RCC_OscConfig+0xa34>)
 8006610:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006614:	6093      	str	r3, [r2, #8]
 8006616:	4b13      	ldr	r3, [pc, #76]	; (8006664 <HAL_RCC_OscConfig+0xa34>)
 8006618:	689b      	ldr	r3, [r3, #8]
 800661a:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006622:	4910      	ldr	r1, [pc, #64]	; (8006664 <HAL_RCC_OscConfig+0xa34>)
 8006624:	4313      	orrs	r3, r2
 8006626:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800662c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8006630:	d309      	bcc.n	8006646 <HAL_RCC_OscConfig+0xa16>
 8006632:	4b0c      	ldr	r3, [pc, #48]	; (8006664 <HAL_RCC_OscConfig+0xa34>)
 8006634:	68db      	ldr	r3, [r3, #12]
 8006636:	f023 021f 	bic.w	r2, r3, #31
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6a1b      	ldr	r3, [r3, #32]
 800663e:	4909      	ldr	r1, [pc, #36]	; (8006664 <HAL_RCC_OscConfig+0xa34>)
 8006640:	4313      	orrs	r3, r2
 8006642:	60cb      	str	r3, [r1, #12]
 8006644:	e02a      	b.n	800669c <HAL_RCC_OscConfig+0xa6c>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800664a:	2b00      	cmp	r3, #0
 800664c:	da0c      	bge.n	8006668 <HAL_RCC_OscConfig+0xa38>
 800664e:	4b05      	ldr	r3, [pc, #20]	; (8006664 <HAL_RCC_OscConfig+0xa34>)
 8006650:	68db      	ldr	r3, [r3, #12]
 8006652:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6a1b      	ldr	r3, [r3, #32]
 800665a:	015b      	lsls	r3, r3, #5
 800665c:	4901      	ldr	r1, [pc, #4]	; (8006664 <HAL_RCC_OscConfig+0xa34>)
 800665e:	4313      	orrs	r3, r2
 8006660:	60cb      	str	r3, [r1, #12]
 8006662:	e01b      	b.n	800669c <HAL_RCC_OscConfig+0xa6c>
 8006664:	46020c00 	.word	0x46020c00
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800666c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006670:	d30a      	bcc.n	8006688 <HAL_RCC_OscConfig+0xa58>
 8006672:	4ba1      	ldr	r3, [pc, #644]	; (80068f8 <HAL_RCC_OscConfig+0xcc8>)
 8006674:	68db      	ldr	r3, [r3, #12]
 8006676:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6a1b      	ldr	r3, [r3, #32]
 800667e:	029b      	lsls	r3, r3, #10
 8006680:	499d      	ldr	r1, [pc, #628]	; (80068f8 <HAL_RCC_OscConfig+0xcc8>)
 8006682:	4313      	orrs	r3, r2
 8006684:	60cb      	str	r3, [r1, #12]
 8006686:	e009      	b.n	800669c <HAL_RCC_OscConfig+0xa6c>
 8006688:	4b9b      	ldr	r3, [pc, #620]	; (80068f8 <HAL_RCC_OscConfig+0xcc8>)
 800668a:	68db      	ldr	r3, [r3, #12]
 800668c:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6a1b      	ldr	r3, [r3, #32]
 8006694:	03db      	lsls	r3, r3, #15
 8006696:	4998      	ldr	r1, [pc, #608]	; (80068f8 <HAL_RCC_OscConfig+0xcc8>)
 8006698:	4313      	orrs	r3, r2
 800669a:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 800669c:	4b96      	ldr	r3, [pc, #600]	; (80068f8 <HAL_RCC_OscConfig+0xcc8>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a95      	ldr	r2, [pc, #596]	; (80068f8 <HAL_RCC_OscConfig+0xcc8>)
 80066a2:	f043 0310 	orr.w	r3, r3, #16
 80066a6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80066a8:	f7fb fcbe 	bl	8002028 <HAL_GetTick>
 80066ac:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80066ae:	e008      	b.n	80066c2 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80066b0:	f7fb fcba 	bl	8002028 <HAL_GetTick>
 80066b4:	4602      	mov	r2, r0
 80066b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066b8:	1ad3      	subs	r3, r2, r3
 80066ba:	2b02      	cmp	r3, #2
 80066bc:	d901      	bls.n	80066c2 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 80066be:	2303      	movs	r3, #3
 80066c0:	e18b      	b.n	80069da <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80066c2:	4b8d      	ldr	r3, [pc, #564]	; (80068f8 <HAL_RCC_OscConfig+0xcc8>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f003 0320 	and.w	r3, r3, #32
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d0f0      	beq.n	80066b0 <HAL_RCC_OscConfig+0xa80>
 80066ce:	e018      	b.n	8006702 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 80066d0:	4b89      	ldr	r3, [pc, #548]	; (80068f8 <HAL_RCC_OscConfig+0xcc8>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a88      	ldr	r2, [pc, #544]	; (80068f8 <HAL_RCC_OscConfig+0xcc8>)
 80066d6:	f023 0310 	bic.w	r3, r3, #16
 80066da:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80066dc:	f7fb fca4 	bl	8002028 <HAL_GetTick>
 80066e0:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80066e2:	e008      	b.n	80066f6 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80066e4:	f7fb fca0 	bl	8002028 <HAL_GetTick>
 80066e8:	4602      	mov	r2, r0
 80066ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ec:	1ad3      	subs	r3, r2, r3
 80066ee:	2b02      	cmp	r3, #2
 80066f0:	d901      	bls.n	80066f6 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 80066f2:	2303      	movs	r3, #3
 80066f4:	e171      	b.n	80069da <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80066f6:	4b80      	ldr	r3, [pc, #512]	; (80068f8 <HAL_RCC_OscConfig+0xcc8>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f003 0320 	and.w	r3, r3, #32
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d1f0      	bne.n	80066e4 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006706:	2b00      	cmp	r3, #0
 8006708:	f000 8166 	beq.w	80069d8 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 800670c:	2300      	movs	r3, #0
 800670e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006712:	4b79      	ldr	r3, [pc, #484]	; (80068f8 <HAL_RCC_OscConfig+0xcc8>)
 8006714:	69db      	ldr	r3, [r3, #28]
 8006716:	f003 030c 	and.w	r3, r3, #12
 800671a:	2b0c      	cmp	r3, #12
 800671c:	f000 80f2 	beq.w	8006904 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006724:	2b02      	cmp	r3, #2
 8006726:	f040 80c5 	bne.w	80068b4 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800672a:	4b73      	ldr	r3, [pc, #460]	; (80068f8 <HAL_RCC_OscConfig+0xcc8>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4a72      	ldr	r2, [pc, #456]	; (80068f8 <HAL_RCC_OscConfig+0xcc8>)
 8006730:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006734:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006736:	f7fb fc77 	bl	8002028 <HAL_GetTick>
 800673a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800673c:	e008      	b.n	8006750 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800673e:	f7fb fc73 	bl	8002028 <HAL_GetTick>
 8006742:	4602      	mov	r2, r0
 8006744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006746:	1ad3      	subs	r3, r2, r3
 8006748:	2b02      	cmp	r3, #2
 800674a:	d901      	bls.n	8006750 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 800674c:	2303      	movs	r3, #3
 800674e:	e144      	b.n	80069da <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006750:	4b69      	ldr	r3, [pc, #420]	; (80068f8 <HAL_RCC_OscConfig+0xcc8>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006758:	2b00      	cmp	r3, #0
 800675a:	d1f0      	bne.n	800673e <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800675c:	4b66      	ldr	r3, [pc, #408]	; (80068f8 <HAL_RCC_OscConfig+0xcc8>)
 800675e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006762:	f003 0304 	and.w	r3, r3, #4
 8006766:	2b00      	cmp	r3, #0
 8006768:	d111      	bne.n	800678e <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 800676a:	4b63      	ldr	r3, [pc, #396]	; (80068f8 <HAL_RCC_OscConfig+0xcc8>)
 800676c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006770:	4a61      	ldr	r2, [pc, #388]	; (80068f8 <HAL_RCC_OscConfig+0xcc8>)
 8006772:	f043 0304 	orr.w	r3, r3, #4
 8006776:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800677a:	4b5f      	ldr	r3, [pc, #380]	; (80068f8 <HAL_RCC_OscConfig+0xcc8>)
 800677c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006780:	f003 0304 	and.w	r3, r3, #4
 8006784:	60fb      	str	r3, [r7, #12]
 8006786:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8006788:	2301      	movs	r3, #1
 800678a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 800678e:	4b5b      	ldr	r3, [pc, #364]	; (80068fc <HAL_RCC_OscConfig+0xccc>)
 8006790:	68db      	ldr	r3, [r3, #12]
 8006792:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006796:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800679a:	d102      	bne.n	80067a2 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 800679c:	2301      	movs	r3, #1
 800679e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80067a2:	4b56      	ldr	r3, [pc, #344]	; (80068fc <HAL_RCC_OscConfig+0xccc>)
 80067a4:	68db      	ldr	r3, [r3, #12]
 80067a6:	4a55      	ldr	r2, [pc, #340]	; (80068fc <HAL_RCC_OscConfig+0xccc>)
 80067a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80067ac:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 80067ae:	4b52      	ldr	r3, [pc, #328]	; (80068f8 <HAL_RCC_OscConfig+0xcc8>)
 80067b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80067b6:	f023 0303 	bic.w	r3, r3, #3
 80067ba:	687a      	ldr	r2, [r7, #4]
 80067bc:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80067be:	687a      	ldr	r2, [r7, #4]
 80067c0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80067c2:	3a01      	subs	r2, #1
 80067c4:	0212      	lsls	r2, r2, #8
 80067c6:	4311      	orrs	r1, r2
 80067c8:	687a      	ldr	r2, [r7, #4]
 80067ca:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80067cc:	430a      	orrs	r2, r1
 80067ce:	494a      	ldr	r1, [pc, #296]	; (80068f8 <HAL_RCC_OscConfig+0xcc8>)
 80067d0:	4313      	orrs	r3, r2
 80067d2:	628b      	str	r3, [r1, #40]	; 0x28
 80067d4:	4b48      	ldr	r3, [pc, #288]	; (80068f8 <HAL_RCC_OscConfig+0xcc8>)
 80067d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067d8:	4b49      	ldr	r3, [pc, #292]	; (8006900 <HAL_RCC_OscConfig+0xcd0>)
 80067da:	4013      	ands	r3, r2
 80067dc:	687a      	ldr	r2, [r7, #4]
 80067de:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80067e0:	3a01      	subs	r2, #1
 80067e2:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80067e6:	687a      	ldr	r2, [r7, #4]
 80067e8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80067ea:	3a01      	subs	r2, #1
 80067ec:	0252      	lsls	r2, r2, #9
 80067ee:	b292      	uxth	r2, r2
 80067f0:	4311      	orrs	r1, r2
 80067f2:	687a      	ldr	r2, [r7, #4]
 80067f4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80067f6:	3a01      	subs	r2, #1
 80067f8:	0412      	lsls	r2, r2, #16
 80067fa:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80067fe:	4311      	orrs	r1, r2
 8006800:	687a      	ldr	r2, [r7, #4]
 8006802:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006804:	3a01      	subs	r2, #1
 8006806:	0612      	lsls	r2, r2, #24
 8006808:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800680c:	430a      	orrs	r2, r1
 800680e:	493a      	ldr	r1, [pc, #232]	; (80068f8 <HAL_RCC_OscConfig+0xcc8>)
 8006810:	4313      	orrs	r3, r2
 8006812:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8006814:	4b38      	ldr	r3, [pc, #224]	; (80068f8 <HAL_RCC_OscConfig+0xcc8>)
 8006816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006818:	4a37      	ldr	r2, [pc, #220]	; (80068f8 <HAL_RCC_OscConfig+0xcc8>)
 800681a:	f023 0310 	bic.w	r3, r3, #16
 800681e:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006824:	4a34      	ldr	r2, [pc, #208]	; (80068f8 <HAL_RCC_OscConfig+0xcc8>)
 8006826:	00db      	lsls	r3, r3, #3
 8006828:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800682a:	4b33      	ldr	r3, [pc, #204]	; (80068f8 <HAL_RCC_OscConfig+0xcc8>)
 800682c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800682e:	4a32      	ldr	r2, [pc, #200]	; (80068f8 <HAL_RCC_OscConfig+0xcc8>)
 8006830:	f043 0310 	orr.w	r3, r3, #16
 8006834:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8006836:	4b30      	ldr	r3, [pc, #192]	; (80068f8 <HAL_RCC_OscConfig+0xcc8>)
 8006838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800683a:	f023 020c 	bic.w	r2, r3, #12
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006842:	492d      	ldr	r1, [pc, #180]	; (80068f8 <HAL_RCC_OscConfig+0xcc8>)
 8006844:	4313      	orrs	r3, r2
 8006846:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 8006848:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800684c:	2b01      	cmp	r3, #1
 800684e:	d105      	bne.n	800685c <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8006850:	4b2a      	ldr	r3, [pc, #168]	; (80068fc <HAL_RCC_OscConfig+0xccc>)
 8006852:	68db      	ldr	r3, [r3, #12]
 8006854:	4a29      	ldr	r2, [pc, #164]	; (80068fc <HAL_RCC_OscConfig+0xccc>)
 8006856:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800685a:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 800685c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8006860:	2b01      	cmp	r3, #1
 8006862:	d107      	bne.n	8006874 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8006864:	4b24      	ldr	r3, [pc, #144]	; (80068f8 <HAL_RCC_OscConfig+0xcc8>)
 8006866:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800686a:	4a23      	ldr	r2, [pc, #140]	; (80068f8 <HAL_RCC_OscConfig+0xcc8>)
 800686c:	f023 0304 	bic.w	r3, r3, #4
 8006870:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006874:	4b20      	ldr	r3, [pc, #128]	; (80068f8 <HAL_RCC_OscConfig+0xcc8>)
 8006876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006878:	4a1f      	ldr	r2, [pc, #124]	; (80068f8 <HAL_RCC_OscConfig+0xcc8>)
 800687a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800687e:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8006880:	4b1d      	ldr	r3, [pc, #116]	; (80068f8 <HAL_RCC_OscConfig+0xcc8>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a1c      	ldr	r2, [pc, #112]	; (80068f8 <HAL_RCC_OscConfig+0xcc8>)
 8006886:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800688a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800688c:	f7fb fbcc 	bl	8002028 <HAL_GetTick>
 8006890:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8006892:	e008      	b.n	80068a6 <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006894:	f7fb fbc8 	bl	8002028 <HAL_GetTick>
 8006898:	4602      	mov	r2, r0
 800689a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800689c:	1ad3      	subs	r3, r2, r3
 800689e:	2b02      	cmp	r3, #2
 80068a0:	d901      	bls.n	80068a6 <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 80068a2:	2303      	movs	r3, #3
 80068a4:	e099      	b.n	80069da <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80068a6:	4b14      	ldr	r3, [pc, #80]	; (80068f8 <HAL_RCC_OscConfig+0xcc8>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d0f0      	beq.n	8006894 <HAL_RCC_OscConfig+0xc64>
 80068b2:	e091      	b.n	80069d8 <HAL_RCC_OscConfig+0xda8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80068b4:	4b10      	ldr	r3, [pc, #64]	; (80068f8 <HAL_RCC_OscConfig+0xcc8>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a0f      	ldr	r2, [pc, #60]	; (80068f8 <HAL_RCC_OscConfig+0xcc8>)
 80068ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80068be:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80068c0:	f7fb fbb2 	bl	8002028 <HAL_GetTick>
 80068c4:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80068c6:	e008      	b.n	80068da <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068c8:	f7fb fbae 	bl	8002028 <HAL_GetTick>
 80068cc:	4602      	mov	r2, r0
 80068ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068d0:	1ad3      	subs	r3, r2, r3
 80068d2:	2b02      	cmp	r3, #2
 80068d4:	d901      	bls.n	80068da <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 80068d6:	2303      	movs	r3, #3
 80068d8:	e07f      	b.n	80069da <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80068da:	4b07      	ldr	r3, [pc, #28]	; (80068f8 <HAL_RCC_OscConfig+0xcc8>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d1f0      	bne.n	80068c8 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80068e6:	4b04      	ldr	r3, [pc, #16]	; (80068f8 <HAL_RCC_OscConfig+0xcc8>)
 80068e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ea:	4a03      	ldr	r2, [pc, #12]	; (80068f8 <HAL_RCC_OscConfig+0xcc8>)
 80068ec:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 80068f0:	f023 0303 	bic.w	r3, r3, #3
 80068f4:	6293      	str	r3, [r2, #40]	; 0x28
 80068f6:	e06f      	b.n	80069d8 <HAL_RCC_OscConfig+0xda8>
 80068f8:	46020c00 	.word	0x46020c00
 80068fc:	46020800 	.word	0x46020800
 8006900:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8006904:	4b37      	ldr	r3, [pc, #220]	; (80069e4 <HAL_RCC_OscConfig+0xdb4>)
 8006906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006908:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800690a:	4b36      	ldr	r3, [pc, #216]	; (80069e4 <HAL_RCC_OscConfig+0xdb4>)
 800690c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800690e:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006914:	2b01      	cmp	r3, #1
 8006916:	d039      	beq.n	800698c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8006918:	69fb      	ldr	r3, [r7, #28]
 800691a:	f003 0203 	and.w	r2, r3, #3
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006922:	429a      	cmp	r2, r3
 8006924:	d132      	bne.n	800698c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8006926:	69fb      	ldr	r3, [r7, #28]
 8006928:	0a1b      	lsrs	r3, r3, #8
 800692a:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006932:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8006934:	429a      	cmp	r2, r3
 8006936:	d129      	bne.n	800698c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8006938:	69fb      	ldr	r3, [r7, #28]
 800693a:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8006942:	429a      	cmp	r2, r3
 8006944:	d122      	bne.n	800698c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006946:	69bb      	ldr	r3, [r7, #24]
 8006948:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006950:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8006952:	429a      	cmp	r2, r3
 8006954:	d11a      	bne.n	800698c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8006956:	69bb      	ldr	r3, [r7, #24]
 8006958:	0a5b      	lsrs	r3, r3, #9
 800695a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006962:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006964:	429a      	cmp	r2, r3
 8006966:	d111      	bne.n	800698c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8006968:	69bb      	ldr	r3, [r7, #24]
 800696a:	0c1b      	lsrs	r3, r3, #16
 800696c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006974:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006976:	429a      	cmp	r2, r3
 8006978:	d108      	bne.n	800698c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800697a:	69bb      	ldr	r3, [r7, #24]
 800697c:	0e1b      	lsrs	r3, r3, #24
 800697e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006986:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006988:	429a      	cmp	r2, r3
 800698a:	d001      	beq.n	8006990 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 800698c:	2301      	movs	r3, #1
 800698e:	e024      	b.n	80069da <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8006990:	4b14      	ldr	r3, [pc, #80]	; (80069e4 <HAL_RCC_OscConfig+0xdb4>)
 8006992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006994:	08db      	lsrs	r3, r3, #3
 8006996:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800699e:	429a      	cmp	r2, r3
 80069a0:	d01a      	beq.n	80069d8 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80069a2:	4b10      	ldr	r3, [pc, #64]	; (80069e4 <HAL_RCC_OscConfig+0xdb4>)
 80069a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069a6:	4a0f      	ldr	r2, [pc, #60]	; (80069e4 <HAL_RCC_OscConfig+0xdb4>)
 80069a8:	f023 0310 	bic.w	r3, r3, #16
 80069ac:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069ae:	f7fb fb3b 	bl	8002028 <HAL_GetTick>
 80069b2:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 80069b4:	bf00      	nop
 80069b6:	f7fb fb37 	bl	8002028 <HAL_GetTick>
 80069ba:	4602      	mov	r2, r0
 80069bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069be:	4293      	cmp	r3, r2
 80069c0:	d0f9      	beq.n	80069b6 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069c6:	4a07      	ldr	r2, [pc, #28]	; (80069e4 <HAL_RCC_OscConfig+0xdb4>)
 80069c8:	00db      	lsls	r3, r3, #3
 80069ca:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80069cc:	4b05      	ldr	r3, [pc, #20]	; (80069e4 <HAL_RCC_OscConfig+0xdb4>)
 80069ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069d0:	4a04      	ldr	r2, [pc, #16]	; (80069e4 <HAL_RCC_OscConfig+0xdb4>)
 80069d2:	f043 0310 	orr.w	r3, r3, #16
 80069d6:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }
  }
  return HAL_OK;
 80069d8:	2300      	movs	r3, #0
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3738      	adds	r7, #56	; 0x38
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}
 80069e2:	bf00      	nop
 80069e4:	46020c00 	.word	0x46020c00

080069e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b086      	sub	sp, #24
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d101      	bne.n	80069fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80069f8:	2301      	movs	r3, #1
 80069fa:	e1d9      	b.n	8006db0 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80069fc:	4b9b      	ldr	r3, [pc, #620]	; (8006c6c <HAL_RCC_ClockConfig+0x284>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f003 030f 	and.w	r3, r3, #15
 8006a04:	683a      	ldr	r2, [r7, #0]
 8006a06:	429a      	cmp	r2, r3
 8006a08:	d910      	bls.n	8006a2c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a0a:	4b98      	ldr	r3, [pc, #608]	; (8006c6c <HAL_RCC_ClockConfig+0x284>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f023 020f 	bic.w	r2, r3, #15
 8006a12:	4996      	ldr	r1, [pc, #600]	; (8006c6c <HAL_RCC_ClockConfig+0x284>)
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	4313      	orrs	r3, r2
 8006a18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a1a:	4b94      	ldr	r3, [pc, #592]	; (8006c6c <HAL_RCC_ClockConfig+0x284>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f003 030f 	and.w	r3, r3, #15
 8006a22:	683a      	ldr	r2, [r7, #0]
 8006a24:	429a      	cmp	r2, r3
 8006a26:	d001      	beq.n	8006a2c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006a28:	2301      	movs	r3, #1
 8006a2a:	e1c1      	b.n	8006db0 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f003 0310 	and.w	r3, r3, #16
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d010      	beq.n	8006a5a <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	695a      	ldr	r2, [r3, #20]
 8006a3c:	4b8c      	ldr	r3, [pc, #560]	; (8006c70 <HAL_RCC_ClockConfig+0x288>)
 8006a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a40:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006a44:	429a      	cmp	r2, r3
 8006a46:	d908      	bls.n	8006a5a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8006a48:	4b89      	ldr	r3, [pc, #548]	; (8006c70 <HAL_RCC_ClockConfig+0x288>)
 8006a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a4c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	695b      	ldr	r3, [r3, #20]
 8006a54:	4986      	ldr	r1, [pc, #536]	; (8006c70 <HAL_RCC_ClockConfig+0x288>)
 8006a56:	4313      	orrs	r3, r2
 8006a58:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f003 0308 	and.w	r3, r3, #8
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d012      	beq.n	8006a8c <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	691a      	ldr	r2, [r3, #16]
 8006a6a:	4b81      	ldr	r3, [pc, #516]	; (8006c70 <HAL_RCC_ClockConfig+0x288>)
 8006a6c:	6a1b      	ldr	r3, [r3, #32]
 8006a6e:	091b      	lsrs	r3, r3, #4
 8006a70:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006a74:	429a      	cmp	r2, r3
 8006a76:	d909      	bls.n	8006a8c <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8006a78:	4b7d      	ldr	r3, [pc, #500]	; (8006c70 <HAL_RCC_ClockConfig+0x288>)
 8006a7a:	6a1b      	ldr	r3, [r3, #32]
 8006a7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	691b      	ldr	r3, [r3, #16]
 8006a84:	011b      	lsls	r3, r3, #4
 8006a86:	497a      	ldr	r1, [pc, #488]	; (8006c70 <HAL_RCC_ClockConfig+0x288>)
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f003 0304 	and.w	r3, r3, #4
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d010      	beq.n	8006aba <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	68da      	ldr	r2, [r3, #12]
 8006a9c:	4b74      	ldr	r3, [pc, #464]	; (8006c70 <HAL_RCC_ClockConfig+0x288>)
 8006a9e:	6a1b      	ldr	r3, [r3, #32]
 8006aa0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006aa4:	429a      	cmp	r2, r3
 8006aa6:	d908      	bls.n	8006aba <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8006aa8:	4b71      	ldr	r3, [pc, #452]	; (8006c70 <HAL_RCC_ClockConfig+0x288>)
 8006aaa:	6a1b      	ldr	r3, [r3, #32]
 8006aac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	68db      	ldr	r3, [r3, #12]
 8006ab4:	496e      	ldr	r1, [pc, #440]	; (8006c70 <HAL_RCC_ClockConfig+0x288>)
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f003 0302 	and.w	r3, r3, #2
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d010      	beq.n	8006ae8 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	689a      	ldr	r2, [r3, #8]
 8006aca:	4b69      	ldr	r3, [pc, #420]	; (8006c70 <HAL_RCC_ClockConfig+0x288>)
 8006acc:	6a1b      	ldr	r3, [r3, #32]
 8006ace:	f003 030f 	and.w	r3, r3, #15
 8006ad2:	429a      	cmp	r2, r3
 8006ad4:	d908      	bls.n	8006ae8 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8006ad6:	4b66      	ldr	r3, [pc, #408]	; (8006c70 <HAL_RCC_ClockConfig+0x288>)
 8006ad8:	6a1b      	ldr	r3, [r3, #32]
 8006ada:	f023 020f 	bic.w	r2, r3, #15
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	689b      	ldr	r3, [r3, #8]
 8006ae2:	4963      	ldr	r1, [pc, #396]	; (8006c70 <HAL_RCC_ClockConfig+0x288>)
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f003 0301 	and.w	r3, r3, #1
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	f000 80d2 	beq.w	8006c9a <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8006af6:	2300      	movs	r3, #0
 8006af8:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	2b03      	cmp	r3, #3
 8006b00:	d143      	bne.n	8006b8a <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006b02:	4b5b      	ldr	r3, [pc, #364]	; (8006c70 <HAL_RCC_ClockConfig+0x288>)
 8006b04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b08:	f003 0304 	and.w	r3, r3, #4
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d110      	bne.n	8006b32 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8006b10:	4b57      	ldr	r3, [pc, #348]	; (8006c70 <HAL_RCC_ClockConfig+0x288>)
 8006b12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b16:	4a56      	ldr	r2, [pc, #344]	; (8006c70 <HAL_RCC_ClockConfig+0x288>)
 8006b18:	f043 0304 	orr.w	r3, r3, #4
 8006b1c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8006b20:	4b53      	ldr	r3, [pc, #332]	; (8006c70 <HAL_RCC_ClockConfig+0x288>)
 8006b22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b26:	f003 0304 	and.w	r3, r3, #4
 8006b2a:	60bb      	str	r3, [r7, #8]
 8006b2c:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8006b2e:	2301      	movs	r3, #1
 8006b30:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8006b32:	f7fb fa79 	bl	8002028 <HAL_GetTick>
 8006b36:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8006b38:	4b4e      	ldr	r3, [pc, #312]	; (8006c74 <HAL_RCC_ClockConfig+0x28c>)
 8006b3a:	68db      	ldr	r3, [r3, #12]
 8006b3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d00f      	beq.n	8006b64 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8006b44:	e008      	b.n	8006b58 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8006b46:	f7fb fa6f 	bl	8002028 <HAL_GetTick>
 8006b4a:	4602      	mov	r2, r0
 8006b4c:	693b      	ldr	r3, [r7, #16]
 8006b4e:	1ad3      	subs	r3, r2, r3
 8006b50:	2b02      	cmp	r3, #2
 8006b52:	d901      	bls.n	8006b58 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8006b54:	2303      	movs	r3, #3
 8006b56:	e12b      	b.n	8006db0 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8006b58:	4b46      	ldr	r3, [pc, #280]	; (8006c74 <HAL_RCC_ClockConfig+0x28c>)
 8006b5a:	68db      	ldr	r3, [r3, #12]
 8006b5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d0f0      	beq.n	8006b46 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8006b64:	7dfb      	ldrb	r3, [r7, #23]
 8006b66:	2b01      	cmp	r3, #1
 8006b68:	d107      	bne.n	8006b7a <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8006b6a:	4b41      	ldr	r3, [pc, #260]	; (8006c70 <HAL_RCC_ClockConfig+0x288>)
 8006b6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b70:	4a3f      	ldr	r2, [pc, #252]	; (8006c70 <HAL_RCC_ClockConfig+0x288>)
 8006b72:	f023 0304 	bic.w	r3, r3, #4
 8006b76:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8006b7a:	4b3d      	ldr	r3, [pc, #244]	; (8006c70 <HAL_RCC_ClockConfig+0x288>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d121      	bne.n	8006bca <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8006b86:	2301      	movs	r3, #1
 8006b88:	e112      	b.n	8006db0 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	2b02      	cmp	r3, #2
 8006b90:	d107      	bne.n	8006ba2 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006b92:	4b37      	ldr	r3, [pc, #220]	; (8006c70 <HAL_RCC_ClockConfig+0x288>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d115      	bne.n	8006bca <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	e106      	b.n	8006db0 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	685b      	ldr	r3, [r3, #4]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d107      	bne.n	8006bba <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8006baa:	4b31      	ldr	r3, [pc, #196]	; (8006c70 <HAL_RCC_ClockConfig+0x288>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f003 0304 	and.w	r3, r3, #4
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d109      	bne.n	8006bca <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	e0fa      	b.n	8006db0 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006bba:	4b2d      	ldr	r3, [pc, #180]	; (8006c70 <HAL_RCC_ClockConfig+0x288>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d101      	bne.n	8006bca <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	e0f2      	b.n	8006db0 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8006bca:	4b29      	ldr	r3, [pc, #164]	; (8006c70 <HAL_RCC_ClockConfig+0x288>)
 8006bcc:	69db      	ldr	r3, [r3, #28]
 8006bce:	f023 0203 	bic.w	r2, r3, #3
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	685b      	ldr	r3, [r3, #4]
 8006bd6:	4926      	ldr	r1, [pc, #152]	; (8006c70 <HAL_RCC_ClockConfig+0x288>)
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8006bdc:	f7fb fa24 	bl	8002028 <HAL_GetTick>
 8006be0:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	685b      	ldr	r3, [r3, #4]
 8006be6:	2b03      	cmp	r3, #3
 8006be8:	d112      	bne.n	8006c10 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006bea:	e00a      	b.n	8006c02 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006bec:	f7fb fa1c 	bl	8002028 <HAL_GetTick>
 8006bf0:	4602      	mov	r2, r0
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	1ad3      	subs	r3, r2, r3
 8006bf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d901      	bls.n	8006c02 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8006bfe:	2303      	movs	r3, #3
 8006c00:	e0d6      	b.n	8006db0 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006c02:	4b1b      	ldr	r3, [pc, #108]	; (8006c70 <HAL_RCC_ClockConfig+0x288>)
 8006c04:	69db      	ldr	r3, [r3, #28]
 8006c06:	f003 030c 	and.w	r3, r3, #12
 8006c0a:	2b0c      	cmp	r3, #12
 8006c0c:	d1ee      	bne.n	8006bec <HAL_RCC_ClockConfig+0x204>
 8006c0e:	e044      	b.n	8006c9a <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	685b      	ldr	r3, [r3, #4]
 8006c14:	2b02      	cmp	r3, #2
 8006c16:	d112      	bne.n	8006c3e <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006c18:	e00a      	b.n	8006c30 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c1a:	f7fb fa05 	bl	8002028 <HAL_GetTick>
 8006c1e:	4602      	mov	r2, r0
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	1ad3      	subs	r3, r2, r3
 8006c24:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d901      	bls.n	8006c30 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8006c2c:	2303      	movs	r3, #3
 8006c2e:	e0bf      	b.n	8006db0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006c30:	4b0f      	ldr	r3, [pc, #60]	; (8006c70 <HAL_RCC_ClockConfig+0x288>)
 8006c32:	69db      	ldr	r3, [r3, #28]
 8006c34:	f003 030c 	and.w	r3, r3, #12
 8006c38:	2b08      	cmp	r3, #8
 8006c3a:	d1ee      	bne.n	8006c1a <HAL_RCC_ClockConfig+0x232>
 8006c3c:	e02d      	b.n	8006c9a <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d123      	bne.n	8006c8e <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8006c46:	e00a      	b.n	8006c5e <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c48:	f7fb f9ee 	bl	8002028 <HAL_GetTick>
 8006c4c:	4602      	mov	r2, r0
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	1ad3      	subs	r3, r2, r3
 8006c52:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d901      	bls.n	8006c5e <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8006c5a:	2303      	movs	r3, #3
 8006c5c:	e0a8      	b.n	8006db0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8006c5e:	4b04      	ldr	r3, [pc, #16]	; (8006c70 <HAL_RCC_ClockConfig+0x288>)
 8006c60:	69db      	ldr	r3, [r3, #28]
 8006c62:	f003 030c 	and.w	r3, r3, #12
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d1ee      	bne.n	8006c48 <HAL_RCC_ClockConfig+0x260>
 8006c6a:	e016      	b.n	8006c9a <HAL_RCC_ClockConfig+0x2b2>
 8006c6c:	40022000 	.word	0x40022000
 8006c70:	46020c00 	.word	0x46020c00
 8006c74:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c78:	f7fb f9d6 	bl	8002028 <HAL_GetTick>
 8006c7c:	4602      	mov	r2, r0
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	1ad3      	subs	r3, r2, r3
 8006c82:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d901      	bls.n	8006c8e <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8006c8a:	2303      	movs	r3, #3
 8006c8c:	e090      	b.n	8006db0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8006c8e:	4b4a      	ldr	r3, [pc, #296]	; (8006db8 <HAL_RCC_ClockConfig+0x3d0>)
 8006c90:	69db      	ldr	r3, [r3, #28]
 8006c92:	f003 030c 	and.w	r3, r3, #12
 8006c96:	2b04      	cmp	r3, #4
 8006c98:	d1ee      	bne.n	8006c78 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f003 0302 	and.w	r3, r3, #2
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d010      	beq.n	8006cc8 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	689a      	ldr	r2, [r3, #8]
 8006caa:	4b43      	ldr	r3, [pc, #268]	; (8006db8 <HAL_RCC_ClockConfig+0x3d0>)
 8006cac:	6a1b      	ldr	r3, [r3, #32]
 8006cae:	f003 030f 	and.w	r3, r3, #15
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	d208      	bcs.n	8006cc8 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8006cb6:	4b40      	ldr	r3, [pc, #256]	; (8006db8 <HAL_RCC_ClockConfig+0x3d0>)
 8006cb8:	6a1b      	ldr	r3, [r3, #32]
 8006cba:	f023 020f 	bic.w	r2, r3, #15
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	689b      	ldr	r3, [r3, #8]
 8006cc2:	493d      	ldr	r1, [pc, #244]	; (8006db8 <HAL_RCC_ClockConfig+0x3d0>)
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006cc8:	4b3c      	ldr	r3, [pc, #240]	; (8006dbc <HAL_RCC_ClockConfig+0x3d4>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f003 030f 	and.w	r3, r3, #15
 8006cd0:	683a      	ldr	r2, [r7, #0]
 8006cd2:	429a      	cmp	r2, r3
 8006cd4:	d210      	bcs.n	8006cf8 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006cd6:	4b39      	ldr	r3, [pc, #228]	; (8006dbc <HAL_RCC_ClockConfig+0x3d4>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f023 020f 	bic.w	r2, r3, #15
 8006cde:	4937      	ldr	r1, [pc, #220]	; (8006dbc <HAL_RCC_ClockConfig+0x3d4>)
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ce6:	4b35      	ldr	r3, [pc, #212]	; (8006dbc <HAL_RCC_ClockConfig+0x3d4>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f003 030f 	and.w	r3, r3, #15
 8006cee:	683a      	ldr	r2, [r7, #0]
 8006cf0:	429a      	cmp	r2, r3
 8006cf2:	d001      	beq.n	8006cf8 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	e05b      	b.n	8006db0 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f003 0304 	and.w	r3, r3, #4
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d010      	beq.n	8006d26 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	68da      	ldr	r2, [r3, #12]
 8006d08:	4b2b      	ldr	r3, [pc, #172]	; (8006db8 <HAL_RCC_ClockConfig+0x3d0>)
 8006d0a:	6a1b      	ldr	r3, [r3, #32]
 8006d0c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006d10:	429a      	cmp	r2, r3
 8006d12:	d208      	bcs.n	8006d26 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8006d14:	4b28      	ldr	r3, [pc, #160]	; (8006db8 <HAL_RCC_ClockConfig+0x3d0>)
 8006d16:	6a1b      	ldr	r3, [r3, #32]
 8006d18:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	68db      	ldr	r3, [r3, #12]
 8006d20:	4925      	ldr	r1, [pc, #148]	; (8006db8 <HAL_RCC_ClockConfig+0x3d0>)
 8006d22:	4313      	orrs	r3, r2
 8006d24:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f003 0308 	and.w	r3, r3, #8
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d012      	beq.n	8006d58 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	691a      	ldr	r2, [r3, #16]
 8006d36:	4b20      	ldr	r3, [pc, #128]	; (8006db8 <HAL_RCC_ClockConfig+0x3d0>)
 8006d38:	6a1b      	ldr	r3, [r3, #32]
 8006d3a:	091b      	lsrs	r3, r3, #4
 8006d3c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006d40:	429a      	cmp	r2, r3
 8006d42:	d209      	bcs.n	8006d58 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8006d44:	4b1c      	ldr	r3, [pc, #112]	; (8006db8 <HAL_RCC_ClockConfig+0x3d0>)
 8006d46:	6a1b      	ldr	r3, [r3, #32]
 8006d48:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	691b      	ldr	r3, [r3, #16]
 8006d50:	011b      	lsls	r3, r3, #4
 8006d52:	4919      	ldr	r1, [pc, #100]	; (8006db8 <HAL_RCC_ClockConfig+0x3d0>)
 8006d54:	4313      	orrs	r3, r2
 8006d56:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f003 0310 	and.w	r3, r3, #16
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d010      	beq.n	8006d86 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	695a      	ldr	r2, [r3, #20]
 8006d68:	4b13      	ldr	r3, [pc, #76]	; (8006db8 <HAL_RCC_ClockConfig+0x3d0>)
 8006d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d6c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006d70:	429a      	cmp	r2, r3
 8006d72:	d208      	bcs.n	8006d86 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8006d74:	4b10      	ldr	r3, [pc, #64]	; (8006db8 <HAL_RCC_ClockConfig+0x3d0>)
 8006d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d78:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	695b      	ldr	r3, [r3, #20]
 8006d80:	490d      	ldr	r1, [pc, #52]	; (8006db8 <HAL_RCC_ClockConfig+0x3d0>)
 8006d82:	4313      	orrs	r3, r2
 8006d84:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8006d86:	f000 f821 	bl	8006dcc <HAL_RCC_GetSysClockFreq>
 8006d8a:	4602      	mov	r2, r0
 8006d8c:	4b0a      	ldr	r3, [pc, #40]	; (8006db8 <HAL_RCC_ClockConfig+0x3d0>)
 8006d8e:	6a1b      	ldr	r3, [r3, #32]
 8006d90:	f003 030f 	and.w	r3, r3, #15
 8006d94:	490a      	ldr	r1, [pc, #40]	; (8006dc0 <HAL_RCC_ClockConfig+0x3d8>)
 8006d96:	5ccb      	ldrb	r3, [r1, r3]
 8006d98:	fa22 f303 	lsr.w	r3, r2, r3
 8006d9c:	4a09      	ldr	r2, [pc, #36]	; (8006dc4 <HAL_RCC_ClockConfig+0x3dc>)
 8006d9e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006da0:	4b09      	ldr	r3, [pc, #36]	; (8006dc8 <HAL_RCC_ClockConfig+0x3e0>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4618      	mov	r0, r3
 8006da6:	f7fa f953 	bl	8001050 <HAL_InitTick>
 8006daa:	4603      	mov	r3, r0
 8006dac:	73fb      	strb	r3, [r7, #15]

  return status;
 8006dae:	7bfb      	ldrb	r3, [r7, #15]
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	3718      	adds	r7, #24
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}
 8006db8:	46020c00 	.word	0x46020c00
 8006dbc:	40022000 	.word	0x40022000
 8006dc0:	0801ab3c 	.word	0x0801ab3c
 8006dc4:	20000000 	.word	0x20000000
 8006dc8:	20000004 	.word	0x20000004

08006dcc <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b08b      	sub	sp, #44	; 0x2c
 8006dd0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006dda:	4b78      	ldr	r3, [pc, #480]	; (8006fbc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006ddc:	69db      	ldr	r3, [r3, #28]
 8006dde:	f003 030c 	and.w	r3, r3, #12
 8006de2:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006de4:	4b75      	ldr	r3, [pc, #468]	; (8006fbc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006de8:	f003 0303 	and.w	r3, r3, #3
 8006dec:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006dee:	69bb      	ldr	r3, [r7, #24]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d005      	beq.n	8006e00 <HAL_RCC_GetSysClockFreq+0x34>
 8006df4:	69bb      	ldr	r3, [r7, #24]
 8006df6:	2b0c      	cmp	r3, #12
 8006df8:	d121      	bne.n	8006e3e <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	2b01      	cmp	r3, #1
 8006dfe:	d11e      	bne.n	8006e3e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8006e00:	4b6e      	ldr	r3, [pc, #440]	; (8006fbc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006e02:	689b      	ldr	r3, [r3, #8]
 8006e04:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d107      	bne.n	8006e1c <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8006e0c:	4b6b      	ldr	r3, [pc, #428]	; (8006fbc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006e0e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006e12:	0b1b      	lsrs	r3, r3, #12
 8006e14:	f003 030f 	and.w	r3, r3, #15
 8006e18:	627b      	str	r3, [r7, #36]	; 0x24
 8006e1a:	e005      	b.n	8006e28 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8006e1c:	4b67      	ldr	r3, [pc, #412]	; (8006fbc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006e1e:	689b      	ldr	r3, [r3, #8]
 8006e20:	0f1b      	lsrs	r3, r3, #28
 8006e22:	f003 030f 	and.w	r3, r3, #15
 8006e26:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006e28:	4a65      	ldr	r2, [pc, #404]	; (8006fc0 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8006e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e30:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006e32:	69bb      	ldr	r3, [r7, #24]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d110      	bne.n	8006e5a <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e3a:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006e3c:	e00d      	b.n	8006e5a <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006e3e:	4b5f      	ldr	r3, [pc, #380]	; (8006fbc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006e40:	69db      	ldr	r3, [r3, #28]
 8006e42:	f003 030c 	and.w	r3, r3, #12
 8006e46:	2b04      	cmp	r3, #4
 8006e48:	d102      	bne.n	8006e50 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006e4a:	4b5e      	ldr	r3, [pc, #376]	; (8006fc4 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8006e4c:	623b      	str	r3, [r7, #32]
 8006e4e:	e004      	b.n	8006e5a <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006e50:	69bb      	ldr	r3, [r7, #24]
 8006e52:	2b08      	cmp	r3, #8
 8006e54:	d101      	bne.n	8006e5a <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006e56:	4b5b      	ldr	r3, [pc, #364]	; (8006fc4 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8006e58:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006e5a:	69bb      	ldr	r3, [r7, #24]
 8006e5c:	2b0c      	cmp	r3, #12
 8006e5e:	f040 80a5 	bne.w	8006fac <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8006e62:	4b56      	ldr	r3, [pc, #344]	; (8006fbc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e66:	f003 0303 	and.w	r3, r3, #3
 8006e6a:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8006e6c:	4b53      	ldr	r3, [pc, #332]	; (8006fbc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e70:	0a1b      	lsrs	r3, r3, #8
 8006e72:	f003 030f 	and.w	r3, r3, #15
 8006e76:	3301      	adds	r3, #1
 8006e78:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8006e7a:	4b50      	ldr	r3, [pc, #320]	; (8006fbc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e7e:	091b      	lsrs	r3, r3, #4
 8006e80:	f003 0301 	and.w	r3, r3, #1
 8006e84:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8006e86:	4b4d      	ldr	r3, [pc, #308]	; (8006fbc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e8a:	08db      	lsrs	r3, r3, #3
 8006e8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006e90:	68ba      	ldr	r2, [r7, #8]
 8006e92:	fb02 f303 	mul.w	r3, r2, r3
 8006e96:	ee07 3a90 	vmov	s15, r3
 8006e9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e9e:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	2b02      	cmp	r3, #2
 8006ea6:	d003      	beq.n	8006eb0 <HAL_RCC_GetSysClockFreq+0xe4>
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	2b03      	cmp	r3, #3
 8006eac:	d022      	beq.n	8006ef4 <HAL_RCC_GetSysClockFreq+0x128>
 8006eae:	e043      	b.n	8006f38 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	ee07 3a90 	vmov	s15, r3
 8006eb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eba:	eddf 6a43 	vldr	s13, [pc, #268]	; 8006fc8 <HAL_RCC_GetSysClockFreq+0x1fc>
 8006ebe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ec2:	4b3e      	ldr	r3, [pc, #248]	; (8006fbc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006ec4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ec6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006eca:	ee07 3a90 	vmov	s15, r3
 8006ece:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8006ed2:	ed97 6a01 	vldr	s12, [r7, #4]
 8006ed6:	eddf 5a3d 	vldr	s11, [pc, #244]	; 8006fcc <HAL_RCC_GetSysClockFreq+0x200>
 8006eda:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006ede:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8006ee2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ee6:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006eea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006eee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ef2:	e046      	b.n	8006f82 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	ee07 3a90 	vmov	s15, r3
 8006efa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006efe:	eddf 6a32 	vldr	s13, [pc, #200]	; 8006fc8 <HAL_RCC_GetSysClockFreq+0x1fc>
 8006f02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f06:	4b2d      	ldr	r3, [pc, #180]	; (8006fbc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006f08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f0e:	ee07 3a90 	vmov	s15, r3
 8006f12:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8006f16:	ed97 6a01 	vldr	s12, [r7, #4]
 8006f1a:	eddf 5a2c 	vldr	s11, [pc, #176]	; 8006fcc <HAL_RCC_GetSysClockFreq+0x200>
 8006f1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006f22:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8006f26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006f2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f36:	e024      	b.n	8006f82 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f3a:	ee07 3a90 	vmov	s15, r3
 8006f3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	ee07 3a90 	vmov	s15, r3
 8006f48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f50:	4b1a      	ldr	r3, [pc, #104]	; (8006fbc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006f52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f58:	ee07 3a90 	vmov	s15, r3
 8006f5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8006f60:	ed97 6a01 	vldr	s12, [r7, #4]
 8006f64:	eddf 5a19 	vldr	s11, [pc, #100]	; 8006fcc <HAL_RCC_GetSysClockFreq+0x200>
 8006f68:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006f6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8006f70:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f74:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006f78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f7c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f80:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8006f82:	4b0e      	ldr	r3, [pc, #56]	; (8006fbc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006f84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f86:	0e1b      	lsrs	r3, r3, #24
 8006f88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f8c:	3301      	adds	r3, #1
 8006f8e:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	ee07 3a90 	vmov	s15, r3
 8006f96:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006f9a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006fa2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006fa6:	ee17 3a90 	vmov	r3, s15
 8006faa:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8006fac:	6a3b      	ldr	r3, [r7, #32]
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	372c      	adds	r7, #44	; 0x2c
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb8:	4770      	bx	lr
 8006fba:	bf00      	nop
 8006fbc:	46020c00 	.word	0x46020c00
 8006fc0:	0801ab54 	.word	0x0801ab54
 8006fc4:	00f42400 	.word	0x00f42400
 8006fc8:	4b742400 	.word	0x4b742400
 8006fcc:	46000000 	.word	0x46000000

08006fd0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8006fd4:	f7ff fefa 	bl	8006dcc <HAL_RCC_GetSysClockFreq>
 8006fd8:	4602      	mov	r2, r0
 8006fda:	4b07      	ldr	r3, [pc, #28]	; (8006ff8 <HAL_RCC_GetHCLKFreq+0x28>)
 8006fdc:	6a1b      	ldr	r3, [r3, #32]
 8006fde:	f003 030f 	and.w	r3, r3, #15
 8006fe2:	4906      	ldr	r1, [pc, #24]	; (8006ffc <HAL_RCC_GetHCLKFreq+0x2c>)
 8006fe4:	5ccb      	ldrb	r3, [r1, r3]
 8006fe6:	fa22 f303 	lsr.w	r3, r2, r3
 8006fea:	4a05      	ldr	r2, [pc, #20]	; (8007000 <HAL_RCC_GetHCLKFreq+0x30>)
 8006fec:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8006fee:	4b04      	ldr	r3, [pc, #16]	; (8007000 <HAL_RCC_GetHCLKFreq+0x30>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	bd80      	pop	{r7, pc}
 8006ff6:	bf00      	nop
 8006ff8:	46020c00 	.word	0x46020c00
 8006ffc:	0801ab3c 	.word	0x0801ab3c
 8007000:	20000000 	.word	0x20000000

08007004 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8007008:	f7ff ffe2 	bl	8006fd0 <HAL_RCC_GetHCLKFreq>
 800700c:	4602      	mov	r2, r0
 800700e:	4b05      	ldr	r3, [pc, #20]	; (8007024 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007010:	6a1b      	ldr	r3, [r3, #32]
 8007012:	091b      	lsrs	r3, r3, #4
 8007014:	f003 0307 	and.w	r3, r3, #7
 8007018:	4903      	ldr	r1, [pc, #12]	; (8007028 <HAL_RCC_GetPCLK1Freq+0x24>)
 800701a:	5ccb      	ldrb	r3, [r1, r3]
 800701c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007020:	4618      	mov	r0, r3
 8007022:	bd80      	pop	{r7, pc}
 8007024:	46020c00 	.word	0x46020c00
 8007028:	0801ab4c 	.word	0x0801ab4c

0800702c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8007030:	f7ff ffce 	bl	8006fd0 <HAL_RCC_GetHCLKFreq>
 8007034:	4602      	mov	r2, r0
 8007036:	4b05      	ldr	r3, [pc, #20]	; (800704c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007038:	6a1b      	ldr	r3, [r3, #32]
 800703a:	0a1b      	lsrs	r3, r3, #8
 800703c:	f003 0307 	and.w	r3, r3, #7
 8007040:	4903      	ldr	r1, [pc, #12]	; (8007050 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007042:	5ccb      	ldrb	r3, [r1, r3]
 8007044:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007048:	4618      	mov	r0, r3
 800704a:	bd80      	pop	{r7, pc}
 800704c:	46020c00 	.word	0x46020c00
 8007050:	0801ab4c 	.word	0x0801ab4c

08007054 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8007058:	f7ff ffba 	bl	8006fd0 <HAL_RCC_GetHCLKFreq>
 800705c:	4602      	mov	r2, r0
 800705e:	4b05      	ldr	r3, [pc, #20]	; (8007074 <HAL_RCC_GetPCLK3Freq+0x20>)
 8007060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007062:	091b      	lsrs	r3, r3, #4
 8007064:	f003 0307 	and.w	r3, r3, #7
 8007068:	4903      	ldr	r1, [pc, #12]	; (8007078 <HAL_RCC_GetPCLK3Freq+0x24>)
 800706a:	5ccb      	ldrb	r3, [r1, r3]
 800706c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007070:	4618      	mov	r0, r3
 8007072:	bd80      	pop	{r7, pc}
 8007074:	46020c00 	.word	0x46020c00
 8007078:	0801ab4c 	.word	0x0801ab4c

0800707c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 800707c:	b480      	push	{r7}
 800707e:	b083      	sub	sp, #12
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
 8007084:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	221f      	movs	r2, #31
 800708a:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 800708c:	4b15      	ldr	r3, [pc, #84]	; (80070e4 <HAL_RCC_GetClockConfig+0x68>)
 800708e:	69db      	ldr	r3, [r3, #28]
 8007090:	f003 0203 	and.w	r2, r3, #3
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 8007098:	4b12      	ldr	r3, [pc, #72]	; (80070e4 <HAL_RCC_GetClockConfig+0x68>)
 800709a:	6a1b      	ldr	r3, [r3, #32]
 800709c:	f003 020f 	and.w	r2, r3, #15
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 80070a4:	4b0f      	ldr	r3, [pc, #60]	; (80070e4 <HAL_RCC_GetClockConfig+0x68>)
 80070a6:	6a1b      	ldr	r3, [r3, #32]
 80070a8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 80070b0:	4b0c      	ldr	r3, [pc, #48]	; (80070e4 <HAL_RCC_GetClockConfig+0x68>)
 80070b2:	6a1b      	ldr	r3, [r3, #32]
 80070b4:	091b      	lsrs	r3, r3, #4
 80070b6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 80070be:	4b09      	ldr	r3, [pc, #36]	; (80070e4 <HAL_RCC_GetClockConfig+0x68>)
 80070c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80070ca:	4b07      	ldr	r3, [pc, #28]	; (80070e8 <HAL_RCC_GetClockConfig+0x6c>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f003 020f 	and.w	r2, r3, #15
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	601a      	str	r2, [r3, #0]
}
 80070d6:	bf00      	nop
 80070d8:	370c      	adds	r7, #12
 80070da:	46bd      	mov	sp, r7
 80070dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e0:	4770      	bx	lr
 80070e2:	bf00      	nop
 80070e4:	46020c00 	.word	0x46020c00
 80070e8:	40022000 	.word	0x40022000

080070ec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b086      	sub	sp, #24
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80070f4:	4b3e      	ldr	r3, [pc, #248]	; (80071f0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80070f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80070fa:	f003 0304 	and.w	r3, r3, #4
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d003      	beq.n	800710a <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007102:	f7fe fd27 	bl	8005b54 <HAL_PWREx_GetVoltageRange>
 8007106:	6178      	str	r0, [r7, #20]
 8007108:	e019      	b.n	800713e <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800710a:	4b39      	ldr	r3, [pc, #228]	; (80071f0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800710c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007110:	4a37      	ldr	r2, [pc, #220]	; (80071f0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007112:	f043 0304 	orr.w	r3, r3, #4
 8007116:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800711a:	4b35      	ldr	r3, [pc, #212]	; (80071f0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800711c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007120:	f003 0304 	and.w	r3, r3, #4
 8007124:	60fb      	str	r3, [r7, #12]
 8007126:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007128:	f7fe fd14 	bl	8005b54 <HAL_PWREx_GetVoltageRange>
 800712c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800712e:	4b30      	ldr	r3, [pc, #192]	; (80071f0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007130:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007134:	4a2e      	ldr	r2, [pc, #184]	; (80071f0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007136:	f023 0304 	bic.w	r3, r3, #4
 800713a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007144:	d003      	beq.n	800714e <RCC_SetFlashLatencyFromMSIRange+0x62>
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800714c:	d109      	bne.n	8007162 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007154:	d202      	bcs.n	800715c <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8007156:	2301      	movs	r3, #1
 8007158:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800715a:	e033      	b.n	80071c4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 800715c:	2300      	movs	r3, #0
 800715e:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8007160:	e030      	b.n	80071c4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007168:	d208      	bcs.n	800717c <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800716a:	697b      	ldr	r3, [r7, #20]
 800716c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007170:	d102      	bne.n	8007178 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8007172:	2303      	movs	r3, #3
 8007174:	613b      	str	r3, [r7, #16]
 8007176:	e025      	b.n	80071c4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8007178:	2301      	movs	r3, #1
 800717a:	e035      	b.n	80071e8 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007182:	d90f      	bls.n	80071a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d109      	bne.n	800719e <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007190:	d902      	bls.n	8007198 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8007192:	2300      	movs	r3, #0
 8007194:	613b      	str	r3, [r7, #16]
 8007196:	e015      	b.n	80071c4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8007198:	2301      	movs	r3, #1
 800719a:	613b      	str	r3, [r7, #16]
 800719c:	e012      	b.n	80071c4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800719e:	2300      	movs	r3, #0
 80071a0:	613b      	str	r3, [r7, #16]
 80071a2:	e00f      	b.n	80071c4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80071aa:	d109      	bne.n	80071c0 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071b2:	d102      	bne.n	80071ba <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 80071b4:	2301      	movs	r3, #1
 80071b6:	613b      	str	r3, [r7, #16]
 80071b8:	e004      	b.n	80071c4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 80071ba:	2302      	movs	r3, #2
 80071bc:	613b      	str	r3, [r7, #16]
 80071be:	e001      	b.n	80071c4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 80071c0:	2301      	movs	r3, #1
 80071c2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80071c4:	4b0b      	ldr	r3, [pc, #44]	; (80071f4 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f023 020f 	bic.w	r2, r3, #15
 80071cc:	4909      	ldr	r1, [pc, #36]	; (80071f4 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	4313      	orrs	r3, r2
 80071d2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80071d4:	4b07      	ldr	r3, [pc, #28]	; (80071f4 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f003 030f 	and.w	r3, r3, #15
 80071dc:	693a      	ldr	r2, [r7, #16]
 80071de:	429a      	cmp	r2, r3
 80071e0:	d001      	beq.n	80071e6 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 80071e2:	2301      	movs	r3, #1
 80071e4:	e000      	b.n	80071e8 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 80071e6:	2300      	movs	r3, #0
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	3718      	adds	r7, #24
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}
 80071f0:	46020c00 	.word	0x46020c00
 80071f4:	40022000 	.word	0x40022000

080071f8 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80071f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80071fc:	b0ba      	sub	sp, #232	; 0xe8
 80071fe:	af00      	add	r7, sp, #0
 8007200:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007204:	2300      	movs	r3, #0
 8007206:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800720a:	2300      	movs	r3, #0
 800720c:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007210:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007218:	f002 0401 	and.w	r4, r2, #1
 800721c:	2500      	movs	r5, #0
 800721e:	ea54 0305 	orrs.w	r3, r4, r5
 8007222:	d00b      	beq.n	800723c <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8007224:	4bcb      	ldr	r3, [pc, #812]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007226:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800722a:	f023 0103 	bic.w	r1, r3, #3
 800722e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007232:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007234:	4ac7      	ldr	r2, [pc, #796]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007236:	430b      	orrs	r3, r1
 8007238:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800723c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007244:	f002 0802 	and.w	r8, r2, #2
 8007248:	f04f 0900 	mov.w	r9, #0
 800724c:	ea58 0309 	orrs.w	r3, r8, r9
 8007250:	d00b      	beq.n	800726a <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8007252:	4bc0      	ldr	r3, [pc, #768]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007254:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007258:	f023 010c 	bic.w	r1, r3, #12
 800725c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007262:	4abc      	ldr	r2, [pc, #752]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007264:	430b      	orrs	r3, r1
 8007266:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800726a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800726e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007272:	f002 0a04 	and.w	sl, r2, #4
 8007276:	f04f 0b00 	mov.w	fp, #0
 800727a:	ea5a 030b 	orrs.w	r3, sl, fp
 800727e:	d00b      	beq.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8007280:	4bb4      	ldr	r3, [pc, #720]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007282:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007286:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800728a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800728e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007290:	4ab0      	ldr	r2, [pc, #704]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007292:	430b      	orrs	r3, r1
 8007294:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007298:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800729c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072a0:	f002 0308 	and.w	r3, r2, #8
 80072a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80072a8:	2300      	movs	r3, #0
 80072aa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80072ae:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80072b2:	460b      	mov	r3, r1
 80072b4:	4313      	orrs	r3, r2
 80072b6:	d00b      	beq.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80072b8:	4ba6      	ldr	r3, [pc, #664]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80072ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80072be:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80072c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80072c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072c8:	4aa2      	ldr	r2, [pc, #648]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80072ca:	430b      	orrs	r3, r1
 80072cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80072d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80072d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072d8:	f002 0310 	and.w	r3, r2, #16
 80072dc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80072e0:	2300      	movs	r3, #0
 80072e2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80072e6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80072ea:	460b      	mov	r3, r1
 80072ec:	4313      	orrs	r3, r2
 80072ee:	d00b      	beq.n	8007308 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80072f0:	4b98      	ldr	r3, [pc, #608]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80072f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80072f6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80072fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80072fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007300:	4a94      	ldr	r2, [pc, #592]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007302:	430b      	orrs	r3, r1
 8007304:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007308:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800730c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007310:	f002 0320 	and.w	r3, r2, #32
 8007314:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007318:	2300      	movs	r3, #0
 800731a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800731e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8007322:	460b      	mov	r3, r1
 8007324:	4313      	orrs	r3, r2
 8007326:	d00b      	beq.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8007328:	4b8a      	ldr	r3, [pc, #552]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800732a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800732e:	f023 0107 	bic.w	r1, r3, #7
 8007332:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007336:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007338:	4a86      	ldr	r2, [pc, #536]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800733a:	430b      	orrs	r3, r1
 800733c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007340:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007348:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800734c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007350:	2300      	movs	r3, #0
 8007352:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007356:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800735a:	460b      	mov	r3, r1
 800735c:	4313      	orrs	r3, r2
 800735e:	d00b      	beq.n	8007378 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8007360:	4b7c      	ldr	r3, [pc, #496]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007362:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007366:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 800736a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800736e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007370:	4a78      	ldr	r2, [pc, #480]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007372:	430b      	orrs	r3, r1
 8007374:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007378:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800737c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007380:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8007384:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007388:	2300      	movs	r3, #0
 800738a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800738e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007392:	460b      	mov	r3, r1
 8007394:	4313      	orrs	r3, r2
 8007396:	d00b      	beq.n	80073b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8007398:	4b6e      	ldr	r3, [pc, #440]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800739a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800739e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80073a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80073a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073a8:	4a6a      	ldr	r2, [pc, #424]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80073aa:	430b      	orrs	r3, r1
 80073ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80073b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80073b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073b8:	f402 7380 	and.w	r3, r2, #256	; 0x100
 80073bc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80073c0:	2300      	movs	r3, #0
 80073c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80073c6:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80073ca:	460b      	mov	r3, r1
 80073cc:	4313      	orrs	r3, r2
 80073ce:	d00b      	beq.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 80073d0:	4b60      	ldr	r3, [pc, #384]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80073d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80073d6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80073da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80073de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073e0:	4a5c      	ldr	r2, [pc, #368]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80073e2:	430b      	orrs	r3, r1
 80073e4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80073e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80073ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073f0:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80073f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80073f8:	2300      	movs	r3, #0
 80073fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80073fe:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8007402:	460b      	mov	r3, r1
 8007404:	4313      	orrs	r3, r2
 8007406:	d00b      	beq.n	8007420 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8007408:	4b52      	ldr	r3, [pc, #328]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800740a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800740e:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 8007412:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007416:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007418:	4a4e      	ldr	r2, [pc, #312]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800741a:	430b      	orrs	r3, r1
 800741c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007420:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007428:	f402 7300 	and.w	r3, r2, #512	; 0x200
 800742c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007430:	2300      	movs	r3, #0
 8007432:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007436:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800743a:	460b      	mov	r3, r1
 800743c:	4313      	orrs	r3, r2
 800743e:	d00b      	beq.n	8007458 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8007440:	4b44      	ldr	r3, [pc, #272]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007442:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007446:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 800744a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800744e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007450:	4a40      	ldr	r2, [pc, #256]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007452:	430b      	orrs	r3, r1
 8007454:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007458:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800745c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007460:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8007464:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007468:	2300      	movs	r3, #0
 800746a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800746e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8007472:	460b      	mov	r3, r1
 8007474:	4313      	orrs	r3, r2
 8007476:	d00b      	beq.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8007478:	4b36      	ldr	r3, [pc, #216]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800747a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800747e:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8007482:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007486:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007488:	4a32      	ldr	r2, [pc, #200]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800748a:	430b      	orrs	r3, r1
 800748c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8007490:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007498:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800749c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80074a0:	2300      	movs	r3, #0
 80074a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80074a6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80074aa:	460b      	mov	r3, r1
 80074ac:	4313      	orrs	r3, r2
 80074ae:	d00c      	beq.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 80074b0:	4b28      	ldr	r3, [pc, #160]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80074b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80074b6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80074ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80074be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80074c2:	4a24      	ldr	r2, [pc, #144]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80074c4:	430b      	orrs	r3, r1
 80074c6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80074ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80074ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074d2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80074d6:	67bb      	str	r3, [r7, #120]	; 0x78
 80074d8:	2300      	movs	r3, #0
 80074da:	67fb      	str	r3, [r7, #124]	; 0x7c
 80074dc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80074e0:	460b      	mov	r3, r1
 80074e2:	4313      	orrs	r3, r2
 80074e4:	d04f      	beq.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 80074e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80074ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074ee:	2b80      	cmp	r3, #128	; 0x80
 80074f0:	d02d      	beq.n	800754e <HAL_RCCEx_PeriphCLKConfig+0x356>
 80074f2:	2b80      	cmp	r3, #128	; 0x80
 80074f4:	d827      	bhi.n	8007546 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80074f6:	2b60      	cmp	r3, #96	; 0x60
 80074f8:	d02e      	beq.n	8007558 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80074fa:	2b60      	cmp	r3, #96	; 0x60
 80074fc:	d823      	bhi.n	8007546 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80074fe:	2b40      	cmp	r3, #64	; 0x40
 8007500:	d006      	beq.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8007502:	2b40      	cmp	r3, #64	; 0x40
 8007504:	d81f      	bhi.n	8007546 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8007506:	2b00      	cmp	r3, #0
 8007508:	d009      	beq.n	800751e <HAL_RCCEx_PeriphCLKConfig+0x326>
 800750a:	2b20      	cmp	r3, #32
 800750c:	d011      	beq.n	8007532 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 800750e:	e01a      	b.n	8007546 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007510:	4b10      	ldr	r3, [pc, #64]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007514:	4a0f      	ldr	r2, [pc, #60]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007516:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800751a:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800751c:	e01d      	b.n	800755a <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800751e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007522:	3308      	adds	r3, #8
 8007524:	4618      	mov	r0, r3
 8007526:	f002 fa17 	bl	8009958 <RCCEx_PLL2_Config>
 800752a:	4603      	mov	r3, r0
 800752c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007530:	e013      	b.n	800755a <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007532:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007536:	332c      	adds	r3, #44	; 0x2c
 8007538:	4618      	mov	r0, r3
 800753a:	f002 faa5 	bl	8009a88 <RCCEx_PLL3_Config>
 800753e:	4603      	mov	r3, r0
 8007540:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007544:	e009      	b.n	800755a <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007546:	2301      	movs	r3, #1
 8007548:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800754c:	e005      	b.n	800755a <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 800754e:	bf00      	nop
 8007550:	e003      	b.n	800755a <HAL_RCCEx_PeriphCLKConfig+0x362>
 8007552:	bf00      	nop
 8007554:	46020c00 	.word	0x46020c00
        break;
 8007558:	bf00      	nop
    }

    if (ret == HAL_OK)
 800755a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800755e:	2b00      	cmp	r3, #0
 8007560:	d10d      	bne.n	800757e <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8007562:	4bb6      	ldr	r3, [pc, #728]	; (800783c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007564:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007568:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 800756c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007570:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007574:	4ab1      	ldr	r2, [pc, #708]	; (800783c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007576:	430b      	orrs	r3, r1
 8007578:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800757c:	e003      	b.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800757e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8007582:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8007586:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800758a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800758e:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8007592:	673b      	str	r3, [r7, #112]	; 0x70
 8007594:	2300      	movs	r3, #0
 8007596:	677b      	str	r3, [r7, #116]	; 0x74
 8007598:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800759c:	460b      	mov	r3, r1
 800759e:	4313      	orrs	r3, r2
 80075a0:	d053      	beq.n	800764a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 80075a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80075a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80075aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075ae:	d033      	beq.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80075b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075b4:	d82c      	bhi.n	8007610 <HAL_RCCEx_PeriphCLKConfig+0x418>
 80075b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80075ba:	d02f      	beq.n	800761c <HAL_RCCEx_PeriphCLKConfig+0x424>
 80075bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80075c0:	d826      	bhi.n	8007610 <HAL_RCCEx_PeriphCLKConfig+0x418>
 80075c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075c6:	d008      	beq.n	80075da <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 80075c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075cc:	d820      	bhi.n	8007610 <HAL_RCCEx_PeriphCLKConfig+0x418>
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d00a      	beq.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 80075d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075d6:	d011      	beq.n	80075fc <HAL_RCCEx_PeriphCLKConfig+0x404>
 80075d8:	e01a      	b.n	8007610 <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80075da:	4b98      	ldr	r3, [pc, #608]	; (800783c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80075dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075de:	4a97      	ldr	r2, [pc, #604]	; (800783c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80075e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075e4:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 80075e6:	e01a      	b.n	800761e <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80075e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80075ec:	3308      	adds	r3, #8
 80075ee:	4618      	mov	r0, r3
 80075f0:	f002 f9b2 	bl	8009958 <RCCEx_PLL2_Config>
 80075f4:	4603      	mov	r3, r0
 80075f6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 80075fa:	e010      	b.n	800761e <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80075fc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007600:	332c      	adds	r3, #44	; 0x2c
 8007602:	4618      	mov	r0, r3
 8007604:	f002 fa40 	bl	8009a88 <RCCEx_PLL3_Config>
 8007608:	4603      	mov	r3, r0
 800760a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 800760e:	e006      	b.n	800761e <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007610:	2301      	movs	r3, #1
 8007612:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8007616:	e002      	b.n	800761e <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8007618:	bf00      	nop
 800761a:	e000      	b.n	800761e <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 800761c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800761e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8007622:	2b00      	cmp	r3, #0
 8007624:	d10d      	bne.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8007626:	4b85      	ldr	r3, [pc, #532]	; (800783c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007628:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800762c:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8007630:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007634:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007638:	4a80      	ldr	r2, [pc, #512]	; (800783c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800763a:	430b      	orrs	r3, r1
 800763c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8007640:	e003      	b.n	800764a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007642:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8007646:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800764a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800764e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007652:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8007656:	66bb      	str	r3, [r7, #104]	; 0x68
 8007658:	2300      	movs	r3, #0
 800765a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800765c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8007660:	460b      	mov	r3, r1
 8007662:	4313      	orrs	r3, r2
 8007664:	d046      	beq.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8007666:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800766a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800766e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8007672:	d028      	beq.n	80076c6 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8007674:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8007678:	d821      	bhi.n	80076be <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800767a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800767e:	d022      	beq.n	80076c6 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8007680:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007684:	d81b      	bhi.n	80076be <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8007686:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800768a:	d01c      	beq.n	80076c6 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800768c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007690:	d815      	bhi.n	80076be <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8007692:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007696:	d008      	beq.n	80076aa <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8007698:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800769c:	d80f      	bhi.n	80076be <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d011      	beq.n	80076c6 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80076a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076a6:	d00e      	beq.n	80076c6 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80076a8:	e009      	b.n	80076be <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80076aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80076ae:	3308      	adds	r3, #8
 80076b0:	4618      	mov	r0, r3
 80076b2:	f002 f951 	bl	8009958 <RCCEx_PLL2_Config>
 80076b6:	4603      	mov	r3, r0
 80076b8:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80076bc:	e004      	b.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80076be:	2301      	movs	r3, #1
 80076c0:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80076c4:	e000      	b.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 80076c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076c8:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d10d      	bne.n	80076ec <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80076d0:	4b5a      	ldr	r3, [pc, #360]	; (800783c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80076d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80076d6:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80076da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80076de:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80076e2:	4a56      	ldr	r2, [pc, #344]	; (800783c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80076e4:	430b      	orrs	r3, r1
 80076e6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80076ea:	e003      	b.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076ec:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80076f0:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 80076f4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80076f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076fc:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8007700:	663b      	str	r3, [r7, #96]	; 0x60
 8007702:	2300      	movs	r3, #0
 8007704:	667b      	str	r3, [r7, #100]	; 0x64
 8007706:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800770a:	460b      	mov	r3, r1
 800770c:	4313      	orrs	r3, r2
 800770e:	d03f      	beq.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8007710:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007714:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007718:	2b04      	cmp	r3, #4
 800771a:	d81e      	bhi.n	800775a <HAL_RCCEx_PeriphCLKConfig+0x562>
 800771c:	a201      	add	r2, pc, #4	; (adr r2, 8007724 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 800771e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007722:	bf00      	nop
 8007724:	08007763 	.word	0x08007763
 8007728:	08007739 	.word	0x08007739
 800772c:	08007747 	.word	0x08007747
 8007730:	08007763 	.word	0x08007763
 8007734:	08007763 	.word	0x08007763
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007738:	4b40      	ldr	r3, [pc, #256]	; (800783c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800773a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800773c:	4a3f      	ldr	r2, [pc, #252]	; (800783c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800773e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007742:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8007744:	e00e      	b.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007746:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800774a:	332c      	adds	r3, #44	; 0x2c
 800774c:	4618      	mov	r0, r3
 800774e:	f002 f99b 	bl	8009a88 <RCCEx_PLL3_Config>
 8007752:	4603      	mov	r3, r0
 8007754:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8007758:	e004      	b.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800775a:	2301      	movs	r3, #1
 800775c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8007760:	e000      	b.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 8007762:	bf00      	nop
    }
    if (ret == HAL_OK)
 8007764:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8007768:	2b00      	cmp	r3, #0
 800776a:	d10d      	bne.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 800776c:	4b33      	ldr	r3, [pc, #204]	; (800783c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800776e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007772:	f023 0107 	bic.w	r1, r3, #7
 8007776:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800777a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800777e:	4a2f      	ldr	r2, [pc, #188]	; (800783c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007780:	430b      	orrs	r3, r1
 8007782:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8007786:	e003      	b.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007788:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800778c:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8007790:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007798:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800779c:	65bb      	str	r3, [r7, #88]	; 0x58
 800779e:	2300      	movs	r3, #0
 80077a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80077a2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80077a6:	460b      	mov	r3, r1
 80077a8:	4313      	orrs	r3, r2
 80077aa:	d04d      	beq.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 80077ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80077b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80077b4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80077b8:	d028      	beq.n	800780c <HAL_RCCEx_PeriphCLKConfig+0x614>
 80077ba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80077be:	d821      	bhi.n	8007804 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 80077c0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80077c4:	d024      	beq.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0x618>
 80077c6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80077ca:	d81b      	bhi.n	8007804 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 80077cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80077d0:	d00e      	beq.n	80077f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 80077d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80077d6:	d815      	bhi.n	8007804 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d01b      	beq.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0x61c>
 80077dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077e0:	d110      	bne.n	8007804 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80077e2:	4b16      	ldr	r3, [pc, #88]	; (800783c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80077e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077e6:	4a15      	ldr	r2, [pc, #84]	; (800783c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80077e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077ec:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 80077ee:	e012      	b.n	8007816 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80077f0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80077f4:	332c      	adds	r3, #44	; 0x2c
 80077f6:	4618      	mov	r0, r3
 80077f8:	f002 f946 	bl	8009a88 <RCCEx_PLL3_Config>
 80077fc:	4603      	mov	r3, r0
 80077fe:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8007802:	e008      	b.n	8007816 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8007804:	2301      	movs	r3, #1
 8007806:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800780a:	e004      	b.n	8007816 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 800780c:	bf00      	nop
 800780e:	e002      	b.n	8007816 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8007810:	bf00      	nop
 8007812:	e000      	b.n	8007816 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8007814:	bf00      	nop
    }
    if (ret == HAL_OK)
 8007816:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800781a:	2b00      	cmp	r3, #0
 800781c:	d110      	bne.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800781e:	4b07      	ldr	r3, [pc, #28]	; (800783c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007820:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007824:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8007828:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800782c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007830:	4a02      	ldr	r2, [pc, #8]	; (800783c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007832:	430b      	orrs	r3, r1
 8007834:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8007838:	e006      	b.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0x650>
 800783a:	bf00      	nop
 800783c:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007840:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8007844:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007848:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800784c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007850:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8007854:	653b      	str	r3, [r7, #80]	; 0x50
 8007856:	2300      	movs	r3, #0
 8007858:	657b      	str	r3, [r7, #84]	; 0x54
 800785a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800785e:	460b      	mov	r3, r1
 8007860:	4313      	orrs	r3, r2
 8007862:	f000 80b5 	beq.w	80079d0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007866:	2300      	movs	r3, #0
 8007868:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800786c:	4b9d      	ldr	r3, [pc, #628]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800786e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007872:	f003 0304 	and.w	r3, r3, #4
 8007876:	2b00      	cmp	r3, #0
 8007878:	d113      	bne.n	80078a2 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800787a:	4b9a      	ldr	r3, [pc, #616]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800787c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007880:	4a98      	ldr	r2, [pc, #608]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007882:	f043 0304 	orr.w	r3, r3, #4
 8007886:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800788a:	4b96      	ldr	r3, [pc, #600]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800788c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007890:	f003 0304 	and.w	r3, r3, #4
 8007894:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007898:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
      pwrclkchanged = SET;
 800789c:	2301      	movs	r3, #1
 800789e:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80078a2:	4b91      	ldr	r3, [pc, #580]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 80078a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078a6:	4a90      	ldr	r2, [pc, #576]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 80078a8:	f043 0301 	orr.w	r3, r3, #1
 80078ac:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80078ae:	f7fa fbbb 	bl	8002028 <HAL_GetTick>
 80078b2:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80078b6:	e00b      	b.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80078b8:	f7fa fbb6 	bl	8002028 <HAL_GetTick>
 80078bc:	4602      	mov	r2, r0
 80078be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80078c2:	1ad3      	subs	r3, r2, r3
 80078c4:	2b02      	cmp	r3, #2
 80078c6:	d903      	bls.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 80078c8:	2303      	movs	r3, #3
 80078ca:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80078ce:	e005      	b.n	80078dc <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80078d0:	4b85      	ldr	r3, [pc, #532]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 80078d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078d4:	f003 0301 	and.w	r3, r3, #1
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d0ed      	beq.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 80078dc:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d165      	bne.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80078e4:	4b7f      	ldr	r3, [pc, #508]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80078e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80078ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80078f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d023      	beq.n	8007942 <HAL_RCCEx_PeriphCLKConfig+0x74a>
 80078fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80078fe:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8007902:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007906:	4293      	cmp	r3, r2
 8007908:	d01b      	beq.n	8007942 <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800790a:	4b76      	ldr	r3, [pc, #472]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800790c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007910:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007914:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007918:	4b72      	ldr	r3, [pc, #456]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800791a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800791e:	4a71      	ldr	r2, [pc, #452]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007920:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007924:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007928:	4b6e      	ldr	r3, [pc, #440]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800792a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800792e:	4a6d      	ldr	r2, [pc, #436]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007930:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007934:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007938:	4a6a      	ldr	r2, [pc, #424]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800793a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800793e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007942:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007946:	f003 0301 	and.w	r3, r3, #1
 800794a:	2b00      	cmp	r3, #0
 800794c:	d019      	beq.n	8007982 <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800794e:	f7fa fb6b 	bl	8002028 <HAL_GetTick>
 8007952:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007956:	e00d      	b.n	8007974 <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007958:	f7fa fb66 	bl	8002028 <HAL_GetTick>
 800795c:	4602      	mov	r2, r0
 800795e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007962:	1ad2      	subs	r2, r2, r3
 8007964:	f241 3388 	movw	r3, #5000	; 0x1388
 8007968:	429a      	cmp	r2, r3
 800796a:	d903      	bls.n	8007974 <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 800796c:	2303      	movs	r3, #3
 800796e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
            break;
 8007972:	e006      	b.n	8007982 <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007974:	4b5b      	ldr	r3, [pc, #364]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007976:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800797a:	f003 0302 	and.w	r3, r3, #2
 800797e:	2b00      	cmp	r3, #0
 8007980:	d0ea      	beq.n	8007958 <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 8007982:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8007986:	2b00      	cmp	r3, #0
 8007988:	d10d      	bne.n	80079a6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800798a:	4b56      	ldr	r3, [pc, #344]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800798c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007990:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007994:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007998:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800799c:	4a51      	ldr	r2, [pc, #324]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800799e:	430b      	orrs	r3, r1
 80079a0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80079a4:	e008      	b.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80079a6:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80079aa:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
 80079ae:	e003      	b.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079b0:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80079b4:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80079b8:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
 80079bc:	2b01      	cmp	r3, #1
 80079be:	d107      	bne.n	80079d0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80079c0:	4b48      	ldr	r3, [pc, #288]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80079c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80079c6:	4a47      	ldr	r2, [pc, #284]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80079c8:	f023 0304 	bic.w	r3, r3, #4
 80079cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 80079d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80079d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079d8:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80079dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80079de:	2300      	movs	r3, #0
 80079e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80079e2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80079e6:	460b      	mov	r3, r1
 80079e8:	4313      	orrs	r3, r2
 80079ea:	d042      	beq.n	8007a72 <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 80079ec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80079f0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80079f4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80079f8:	d022      	beq.n	8007a40 <HAL_RCCEx_PeriphCLKConfig+0x848>
 80079fa:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80079fe:	d81b      	bhi.n	8007a38 <HAL_RCCEx_PeriphCLKConfig+0x840>
 8007a00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007a04:	d011      	beq.n	8007a2a <HAL_RCCEx_PeriphCLKConfig+0x832>
 8007a06:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007a0a:	d815      	bhi.n	8007a38 <HAL_RCCEx_PeriphCLKConfig+0x840>
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d019      	beq.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 8007a10:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007a14:	d110      	bne.n	8007a38 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007a16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007a1a:	3308      	adds	r3, #8
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	f001 ff9b 	bl	8009958 <RCCEx_PLL2_Config>
 8007a22:	4603      	mov	r3, r0
 8007a24:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8007a28:	e00d      	b.n	8007a46 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a2a:	4b2e      	ldr	r3, [pc, #184]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a2e:	4a2d      	ldr	r2, [pc, #180]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007a30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a34:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8007a36:	e006      	b.n	8007a46 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8007a38:	2301      	movs	r3, #1
 8007a3a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8007a3e:	e002      	b.n	8007a46 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8007a40:	bf00      	nop
 8007a42:	e000      	b.n	8007a46 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8007a44:	bf00      	nop
    }
    if (ret == HAL_OK)
 8007a46:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d10d      	bne.n	8007a6a <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8007a4e:	4b25      	ldr	r3, [pc, #148]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007a50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007a54:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8007a58:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007a5c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007a60:	4a20      	ldr	r2, [pc, #128]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007a62:	430b      	orrs	r3, r1
 8007a64:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007a68:	e003      	b.n	8007a72 <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a6a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8007a6e:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007a72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a7a:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8007a7e:	643b      	str	r3, [r7, #64]	; 0x40
 8007a80:	2300      	movs	r3, #0
 8007a82:	647b      	str	r3, [r7, #68]	; 0x44
 8007a84:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8007a88:	460b      	mov	r3, r1
 8007a8a:	4313      	orrs	r3, r2
 8007a8c:	d032      	beq.n	8007af4 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8007a8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007a92:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007a96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a9a:	d00b      	beq.n	8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8007a9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007aa0:	d804      	bhi.n	8007aac <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d008      	beq.n	8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8007aa6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007aaa:	d007      	beq.n	8007abc <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8007aac:	2301      	movs	r3, #1
 8007aae:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8007ab2:	e004      	b.n	8007abe <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8007ab4:	bf00      	nop
 8007ab6:	e002      	b.n	8007abe <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8007ab8:	bf00      	nop
 8007aba:	e000      	b.n	8007abe <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8007abc:	bf00      	nop
    }
    if (ret == HAL_OK)
 8007abe:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d112      	bne.n	8007aec <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8007ac6:	4b07      	ldr	r3, [pc, #28]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007ac8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007acc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007ad0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007ad4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007ad8:	4a02      	ldr	r2, [pc, #8]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007ada:	430b      	orrs	r3, r1
 8007adc:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8007ae0:	e008      	b.n	8007af4 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 8007ae2:	bf00      	nop
 8007ae4:	46020c00 	.word	0x46020c00
 8007ae8:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007aec:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8007af0:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8007af4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007afc:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8007b00:	63bb      	str	r3, [r7, #56]	; 0x38
 8007b02:	2300      	movs	r3, #0
 8007b04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b06:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8007b0a:	460b      	mov	r3, r1
 8007b0c:	4313      	orrs	r3, r2
 8007b0e:	d00c      	beq.n	8007b2a <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8007b10:	4b98      	ldr	r3, [pc, #608]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007b12:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007b16:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 8007b1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007b1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007b22:	4a94      	ldr	r2, [pc, #592]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007b24:	430b      	orrs	r3, r1
 8007b26:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8007b2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b32:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8007b36:	633b      	str	r3, [r7, #48]	; 0x30
 8007b38:	2300      	movs	r3, #0
 8007b3a:	637b      	str	r3, [r7, #52]	; 0x34
 8007b3c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8007b40:	460b      	mov	r3, r1
 8007b42:	4313      	orrs	r3, r2
 8007b44:	d019      	beq.n	8007b7a <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8007b46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007b4a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007b4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b52:	d105      	bne.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007b54:	4b87      	ldr	r3, [pc, #540]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b58:	4a86      	ldr	r2, [pc, #536]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007b5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b5e:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8007b60:	4b84      	ldr	r3, [pc, #528]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007b62:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007b66:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8007b6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007b6e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007b72:	4a80      	ldr	r2, [pc, #512]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007b74:	430b      	orrs	r3, r1
 8007b76:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8007b7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b82:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8007b86:	62bb      	str	r3, [r7, #40]	; 0x28
 8007b88:	2300      	movs	r3, #0
 8007b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b8c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8007b90:	460b      	mov	r3, r1
 8007b92:	4313      	orrs	r3, r2
 8007b94:	d00c      	beq.n	8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8007b96:	4b77      	ldr	r3, [pc, #476]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007b98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007b9c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007ba0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007ba4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007ba8:	4972      	ldr	r1, [pc, #456]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007baa:	4313      	orrs	r3, r2
 8007bac:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8007bb0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bb8:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8007bbc:	623b      	str	r3, [r7, #32]
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	627b      	str	r3, [r7, #36]	; 0x24
 8007bc2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007bc6:	460b      	mov	r3, r1
 8007bc8:	4313      	orrs	r3, r2
 8007bca:	d00c      	beq.n	8007be6 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8007bcc:	4b69      	ldr	r3, [pc, #420]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007bce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007bd2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007bd6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007bda:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007bde:	4965      	ldr	r1, [pc, #404]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007be0:	4313      	orrs	r3, r2
 8007be2:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8007be6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bee:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8007bf2:	61bb      	str	r3, [r7, #24]
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	61fb      	str	r3, [r7, #28]
 8007bf8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007bfc:	460b      	mov	r3, r1
 8007bfe:	4313      	orrs	r3, r2
 8007c00:	d00c      	beq.n	8007c1c <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8007c02:	4b5c      	ldr	r3, [pc, #368]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007c04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007c08:	f023 0218 	bic.w	r2, r3, #24
 8007c0c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007c10:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007c14:	4957      	ldr	r1, [pc, #348]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007c16:	4313      	orrs	r3, r2
 8007c18:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007c1c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c24:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8007c28:	613b      	str	r3, [r7, #16]
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	617b      	str	r3, [r7, #20]
 8007c2e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007c32:	460b      	mov	r3, r1
 8007c34:	4313      	orrs	r3, r2
 8007c36:	d032      	beq.n	8007c9e <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8007c38:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007c3c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007c40:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007c44:	d105      	bne.n	8007c52 <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c46:	4b4b      	ldr	r3, [pc, #300]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c4a:	4a4a      	ldr	r2, [pc, #296]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007c4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c50:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8007c52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007c56:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007c5a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007c5e:	d108      	bne.n	8007c72 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007c60:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007c64:	3308      	adds	r3, #8
 8007c66:	4618      	mov	r0, r3
 8007c68:	f001 fe76 	bl	8009958 <RCCEx_PLL2_Config>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
    }
    if (ret == HAL_OK)
 8007c72:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d10d      	bne.n	8007c96 <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8007c7a:	4b3e      	ldr	r3, [pc, #248]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007c7c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007c80:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007c84:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007c88:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007c8c:	4939      	ldr	r1, [pc, #228]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8007c94:	e003      	b.n	8007c9e <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c96:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8007c9a:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8007c9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ca6:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 8007caa:	60bb      	str	r3, [r7, #8]
 8007cac:	2300      	movs	r3, #0
 8007cae:	60fb      	str	r3, [r7, #12]
 8007cb0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007cb4:	460b      	mov	r3, r1
 8007cb6:	4313      	orrs	r3, r2
 8007cb8:	d03a      	beq.n	8007d30 <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8007cba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007cbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007cc2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007cc6:	d00e      	beq.n	8007ce6 <HAL_RCCEx_PeriphCLKConfig+0xaee>
 8007cc8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007ccc:	d815      	bhi.n	8007cfa <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d017      	beq.n	8007d02 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8007cd2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007cd6:	d110      	bne.n	8007cfa <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007cd8:	4b26      	ldr	r3, [pc, #152]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cdc:	4a25      	ldr	r2, [pc, #148]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007cde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ce2:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8007ce4:	e00e      	b.n	8007d04 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007ce6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007cea:	3308      	adds	r3, #8
 8007cec:	4618      	mov	r0, r3
 8007cee:	f001 fe33 	bl	8009958 <RCCEx_PLL2_Config>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8007cf8:	e004      	b.n	8007d04 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8007d00:	e000      	b.n	8007d04 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 8007d02:	bf00      	nop
    }
    if (ret == HAL_OK)
 8007d04:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d10d      	bne.n	8007d28 <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8007d0c:	4b19      	ldr	r3, [pc, #100]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007d0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007d12:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007d16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007d1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d1e:	4915      	ldr	r1, [pc, #84]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007d20:	4313      	orrs	r3, r2
 8007d22:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8007d26:	e003      	b.n	8007d30 <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d28:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8007d2c:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8007d30:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d38:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8007d3c:	603b      	str	r3, [r7, #0]
 8007d3e:	2300      	movs	r3, #0
 8007d40:	607b      	str	r3, [r7, #4]
 8007d42:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007d46:	460b      	mov	r3, r1
 8007d48:	4313      	orrs	r3, r2
 8007d4a:	d00c      	beq.n	8007d66 <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8007d4c:	4b09      	ldr	r3, [pc, #36]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007d4e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007d52:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8007d56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007d5a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007d5e:	4905      	ldr	r1, [pc, #20]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007d60:	4313      	orrs	r3, r2
 8007d62:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8007d66:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
}
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	37e8      	adds	r7, #232	; 0xe8
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007d74:	46020c00 	.word	0x46020c00

08007d78 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b089      	sub	sp, #36	; 0x24
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8007d80:	4ba6      	ldr	r3, [pc, #664]	; (800801c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007d82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d88:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8007d8a:	4ba4      	ldr	r3, [pc, #656]	; (800801c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d8e:	f003 0303 	and.w	r3, r3, #3
 8007d92:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8007d94:	4ba1      	ldr	r3, [pc, #644]	; (800801c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d98:	0a1b      	lsrs	r3, r3, #8
 8007d9a:	f003 030f 	and.w	r3, r3, #15
 8007d9e:	3301      	adds	r3, #1
 8007da0:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8007da2:	4b9e      	ldr	r3, [pc, #632]	; (800801c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007da6:	091b      	lsrs	r3, r3, #4
 8007da8:	f003 0301 	and.w	r3, r3, #1
 8007dac:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8007dae:	4b9b      	ldr	r3, [pc, #620]	; (800801c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007db2:	08db      	lsrs	r3, r3, #3
 8007db4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007db8:	68fa      	ldr	r2, [r7, #12]
 8007dba:	fb02 f303 	mul.w	r3, r2, r3
 8007dbe:	ee07 3a90 	vmov	s15, r3
 8007dc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dc6:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 8007dca:	697b      	ldr	r3, [r7, #20]
 8007dcc:	2b03      	cmp	r3, #3
 8007dce:	d062      	beq.n	8007e96 <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 8007dd0:	697b      	ldr	r3, [r7, #20]
 8007dd2:	2b03      	cmp	r3, #3
 8007dd4:	f200 8081 	bhi.w	8007eda <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 8007dd8:	697b      	ldr	r3, [r7, #20]
 8007dda:	2b01      	cmp	r3, #1
 8007ddc:	d024      	beq.n	8007e28 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	2b02      	cmp	r3, #2
 8007de2:	d17a      	bne.n	8007eda <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007de4:	693b      	ldr	r3, [r7, #16]
 8007de6:	ee07 3a90 	vmov	s15, r3
 8007dea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dee:	eddf 6a8c 	vldr	s13, [pc, #560]	; 8008020 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8007df2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007df6:	4b89      	ldr	r3, [pc, #548]	; (800801c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007df8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dfe:	ee07 3a90 	vmov	s15, r3
 8007e02:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8007e06:	ed97 6a02 	vldr	s12, [r7, #8]
 8007e0a:	eddf 5a86 	vldr	s11, [pc, #536]	; 8008024 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8007e0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007e12:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8007e16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007e1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e22:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007e26:	e08f      	b.n	8007f48 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8007e28:	4b7c      	ldr	r3, [pc, #496]	; (800801c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007e2a:	689b      	ldr	r3, [r3, #8]
 8007e2c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d005      	beq.n	8007e40 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8007e34:	4b79      	ldr	r3, [pc, #484]	; (800801c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007e36:	689b      	ldr	r3, [r3, #8]
 8007e38:	0f1b      	lsrs	r3, r3, #28
 8007e3a:	f003 030f 	and.w	r3, r3, #15
 8007e3e:	e006      	b.n	8007e4e <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 8007e40:	4b76      	ldr	r3, [pc, #472]	; (800801c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007e42:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007e46:	041b      	lsls	r3, r3, #16
 8007e48:	0f1b      	lsrs	r3, r3, #28
 8007e4a:	f003 030f 	and.w	r3, r3, #15
 8007e4e:	4a76      	ldr	r2, [pc, #472]	; (8008028 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8007e50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e54:	ee07 3a90 	vmov	s15, r3
 8007e58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e5c:	693b      	ldr	r3, [r7, #16]
 8007e5e:	ee07 3a90 	vmov	s15, r3
 8007e62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007e6a:	69bb      	ldr	r3, [r7, #24]
 8007e6c:	ee07 3a90 	vmov	s15, r3
 8007e70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e74:	ed97 6a02 	vldr	s12, [r7, #8]
 8007e78:	eddf 5a6a 	vldr	s11, [pc, #424]	; 8008024 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8007e7c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e80:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e84:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e88:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8007e8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e90:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007e94:	e058      	b.n	8007f48 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007e96:	693b      	ldr	r3, [r7, #16]
 8007e98:	ee07 3a90 	vmov	s15, r3
 8007e9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ea0:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008020 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8007ea4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ea8:	4b5c      	ldr	r3, [pc, #368]	; (800801c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007eaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007eac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007eb0:	ee07 3a90 	vmov	s15, r3
 8007eb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8007eb8:	ed97 6a02 	vldr	s12, [r7, #8]
 8007ebc:	eddf 5a59 	vldr	s11, [pc, #356]	; 8008024 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8007ec0:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007ec4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8007ec8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ecc:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007ed0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ed4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007ed8:	e036      	b.n	8007f48 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8007eda:	4b50      	ldr	r3, [pc, #320]	; (800801c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007edc:	689b      	ldr	r3, [r3, #8]
 8007ede:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d005      	beq.n	8007ef2 <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 8007ee6:	4b4d      	ldr	r3, [pc, #308]	; (800801c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007ee8:	689b      	ldr	r3, [r3, #8]
 8007eea:	0f1b      	lsrs	r3, r3, #28
 8007eec:	f003 030f 	and.w	r3, r3, #15
 8007ef0:	e006      	b.n	8007f00 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 8007ef2:	4b4a      	ldr	r3, [pc, #296]	; (800801c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007ef4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007ef8:	041b      	lsls	r3, r3, #16
 8007efa:	0f1b      	lsrs	r3, r3, #28
 8007efc:	f003 030f 	and.w	r3, r3, #15
 8007f00:	4a49      	ldr	r2, [pc, #292]	; (8008028 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8007f02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f06:	ee07 3a90 	vmov	s15, r3
 8007f0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f0e:	693b      	ldr	r3, [r7, #16]
 8007f10:	ee07 3a90 	vmov	s15, r3
 8007f14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007f1c:	69bb      	ldr	r3, [r7, #24]
 8007f1e:	ee07 3a90 	vmov	s15, r3
 8007f22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f26:	ed97 6a02 	vldr	s12, [r7, #8]
 8007f2a:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8008024 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8007f2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8007f3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f42:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007f46:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8007f48:	4b34      	ldr	r3, [pc, #208]	; (800801c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d017      	beq.n	8007f84 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007f54:	4b31      	ldr	r3, [pc, #196]	; (800801c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007f56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f58:	0a5b      	lsrs	r3, r3, #9
 8007f5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f5e:	ee07 3a90 	vmov	s15, r3
 8007f62:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8007f66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007f6a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007f6e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f7a:	ee17 2a90 	vmov	r2, s15
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	601a      	str	r2, [r3, #0]
 8007f82:	e002      	b.n	8007f8a <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2200      	movs	r2, #0
 8007f88:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8007f8a:	4b24      	ldr	r3, [pc, #144]	; (800801c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d017      	beq.n	8007fc6 <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007f96:	4b21      	ldr	r3, [pc, #132]	; (800801c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007f98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f9a:	0c1b      	lsrs	r3, r3, #16
 8007f9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fa0:	ee07 3a90 	vmov	s15, r3
 8007fa4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8007fa8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007fac:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007fb0:	edd7 6a07 	vldr	s13, [r7, #28]
 8007fb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007fb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007fbc:	ee17 2a90 	vmov	r2, s15
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	605a      	str	r2, [r3, #4]
 8007fc4:	e002      	b.n	8007fcc <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2200      	movs	r2, #0
 8007fca:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8007fcc:	4b13      	ldr	r3, [pc, #76]	; (800801c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fd0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d017      	beq.n	8008008 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007fd8:	4b10      	ldr	r3, [pc, #64]	; (800801c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007fda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fdc:	0e1b      	lsrs	r3, r3, #24
 8007fde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fe2:	ee07 3a90 	vmov	s15, r3
 8007fe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8007fea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007fee:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007ff2:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ff6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ffa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ffe:	ee17 2a90 	vmov	r2, s15
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008006:	e002      	b.n	800800e <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2200      	movs	r2, #0
 800800c:	609a      	str	r2, [r3, #8]
}
 800800e:	bf00      	nop
 8008010:	3724      	adds	r7, #36	; 0x24
 8008012:	46bd      	mov	sp, r7
 8008014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008018:	4770      	bx	lr
 800801a:	bf00      	nop
 800801c:	46020c00 	.word	0x46020c00
 8008020:	4b742400 	.word	0x4b742400
 8008024:	46000000 	.word	0x46000000
 8008028:	0801ab54 	.word	0x0801ab54

0800802c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800802c:	b480      	push	{r7}
 800802e:	b089      	sub	sp, #36	; 0x24
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8008034:	4ba6      	ldr	r3, [pc, #664]	; (80082d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008036:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008038:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800803c:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800803e:	4ba4      	ldr	r3, [pc, #656]	; (80082d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008042:	f003 0303 	and.w	r3, r3, #3
 8008046:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8008048:	4ba1      	ldr	r3, [pc, #644]	; (80082d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800804a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800804c:	0a1b      	lsrs	r3, r3, #8
 800804e:	f003 030f 	and.w	r3, r3, #15
 8008052:	3301      	adds	r3, #1
 8008054:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8008056:	4b9e      	ldr	r3, [pc, #632]	; (80082d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800805a:	091b      	lsrs	r3, r3, #4
 800805c:	f003 0301 	and.w	r3, r3, #1
 8008060:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8008062:	4b9b      	ldr	r3, [pc, #620]	; (80082d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008066:	08db      	lsrs	r3, r3, #3
 8008068:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800806c:	68fa      	ldr	r2, [r7, #12]
 800806e:	fb02 f303 	mul.w	r3, r2, r3
 8008072:	ee07 3a90 	vmov	s15, r3
 8008076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800807a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 800807e:	697b      	ldr	r3, [r7, #20]
 8008080:	2b03      	cmp	r3, #3
 8008082:	d062      	beq.n	800814a <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 8008084:	697b      	ldr	r3, [r7, #20]
 8008086:	2b03      	cmp	r3, #3
 8008088:	f200 8081 	bhi.w	800818e <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 800808c:	697b      	ldr	r3, [r7, #20]
 800808e:	2b01      	cmp	r3, #1
 8008090:	d024      	beq.n	80080dc <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 8008092:	697b      	ldr	r3, [r7, #20]
 8008094:	2b02      	cmp	r3, #2
 8008096:	d17a      	bne.n	800818e <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8008098:	693b      	ldr	r3, [r7, #16]
 800809a:	ee07 3a90 	vmov	s15, r3
 800809e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080a2:	eddf 6a8c 	vldr	s13, [pc, #560]	; 80082d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 80080a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080aa:	4b89      	ldr	r3, [pc, #548]	; (80082d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80080ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080b2:	ee07 3a90 	vmov	s15, r3
 80080b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80080ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80080be:	eddf 5a86 	vldr	s11, [pc, #536]	; 80082d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80080c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80080c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80080ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80080ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80080d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80080da:	e08f      	b.n	80081fc <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80080dc:	4b7c      	ldr	r3, [pc, #496]	; (80082d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80080de:	689b      	ldr	r3, [r3, #8]
 80080e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d005      	beq.n	80080f4 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 80080e8:	4b79      	ldr	r3, [pc, #484]	; (80082d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80080ea:	689b      	ldr	r3, [r3, #8]
 80080ec:	0f1b      	lsrs	r3, r3, #28
 80080ee:	f003 030f 	and.w	r3, r3, #15
 80080f2:	e006      	b.n	8008102 <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 80080f4:	4b76      	ldr	r3, [pc, #472]	; (80082d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80080f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80080fa:	041b      	lsls	r3, r3, #16
 80080fc:	0f1b      	lsrs	r3, r3, #28
 80080fe:	f003 030f 	and.w	r3, r3, #15
 8008102:	4a76      	ldr	r2, [pc, #472]	; (80082dc <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8008104:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008108:	ee07 3a90 	vmov	s15, r3
 800810c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008110:	693b      	ldr	r3, [r7, #16]
 8008112:	ee07 3a90 	vmov	s15, r3
 8008116:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800811a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800811e:	69bb      	ldr	r3, [r7, #24]
 8008120:	ee07 3a90 	vmov	s15, r3
 8008124:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008128:	ed97 6a02 	vldr	s12, [r7, #8]
 800812c:	eddf 5a6a 	vldr	s11, [pc, #424]	; 80082d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8008130:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008134:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008138:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800813c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8008140:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008144:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008148:	e058      	b.n	80081fc <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800814a:	693b      	ldr	r3, [r7, #16]
 800814c:	ee07 3a90 	vmov	s15, r3
 8008150:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008154:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80082d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8008158:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800815c:	4b5c      	ldr	r3, [pc, #368]	; (80082d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800815e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008160:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008164:	ee07 3a90 	vmov	s15, r3
 8008168:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800816c:	ed97 6a02 	vldr	s12, [r7, #8]
 8008170:	eddf 5a59 	vldr	s11, [pc, #356]	; 80082d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8008174:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8008178:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800817c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008180:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8008184:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008188:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800818c:	e036      	b.n	80081fc <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800818e:	4b50      	ldr	r3, [pc, #320]	; (80082d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008190:	689b      	ldr	r3, [r3, #8]
 8008192:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008196:	2b00      	cmp	r3, #0
 8008198:	d005      	beq.n	80081a6 <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 800819a:	4b4d      	ldr	r3, [pc, #308]	; (80082d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800819c:	689b      	ldr	r3, [r3, #8]
 800819e:	0f1b      	lsrs	r3, r3, #28
 80081a0:	f003 030f 	and.w	r3, r3, #15
 80081a4:	e006      	b.n	80081b4 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 80081a6:	4b4a      	ldr	r3, [pc, #296]	; (80082d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80081a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80081ac:	041b      	lsls	r3, r3, #16
 80081ae:	0f1b      	lsrs	r3, r3, #28
 80081b0:	f003 030f 	and.w	r3, r3, #15
 80081b4:	4a49      	ldr	r2, [pc, #292]	; (80082dc <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 80081b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80081ba:	ee07 3a90 	vmov	s15, r3
 80081be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081c2:	693b      	ldr	r3, [r7, #16]
 80081c4:	ee07 3a90 	vmov	s15, r3
 80081c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80081d0:	69bb      	ldr	r3, [r7, #24]
 80081d2:	ee07 3a90 	vmov	s15, r3
 80081d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081da:	ed97 6a02 	vldr	s12, [r7, #8]
 80081de:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80082d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80081e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80081ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 80081f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80081fa:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 80081fc:	4b34      	ldr	r3, [pc, #208]	; (80082d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80081fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008200:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008204:	2b00      	cmp	r3, #0
 8008206:	d017      	beq.n	8008238 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008208:	4b31      	ldr	r3, [pc, #196]	; (80082d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800820a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800820c:	0a5b      	lsrs	r3, r3, #9
 800820e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008212:	ee07 3a90 	vmov	s15, r3
 8008216:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 800821a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800821e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008222:	edd7 6a07 	vldr	s13, [r7, #28]
 8008226:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800822a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800822e:	ee17 2a90 	vmov	r2, s15
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	601a      	str	r2, [r3, #0]
 8008236:	e002      	b.n	800823e <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2200      	movs	r2, #0
 800823c:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800823e:	4b24      	ldr	r3, [pc, #144]	; (80082d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008246:	2b00      	cmp	r3, #0
 8008248:	d017      	beq.n	800827a <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800824a:	4b21      	ldr	r3, [pc, #132]	; (80082d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800824c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800824e:	0c1b      	lsrs	r3, r3, #16
 8008250:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008254:	ee07 3a90 	vmov	s15, r3
 8008258:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 800825c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008260:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008264:	edd7 6a07 	vldr	s13, [r7, #28]
 8008268:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800826c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008270:	ee17 2a90 	vmov	r2, s15
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	605a      	str	r2, [r3, #4]
 8008278:	e002      	b.n	8008280 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2200      	movs	r2, #0
 800827e:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8008280:	4b13      	ldr	r3, [pc, #76]	; (80082d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008284:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008288:	2b00      	cmp	r3, #0
 800828a:	d017      	beq.n	80082bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800828c:	4b10      	ldr	r3, [pc, #64]	; (80082d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800828e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008290:	0e1b      	lsrs	r3, r3, #24
 8008292:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008296:	ee07 3a90 	vmov	s15, r3
 800829a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800829e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80082a2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80082a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80082aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80082ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80082b2:	ee17 2a90 	vmov	r2, s15
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80082ba:	e002      	b.n	80082c2 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2200      	movs	r2, #0
 80082c0:	609a      	str	r2, [r3, #8]
}
 80082c2:	bf00      	nop
 80082c4:	3724      	adds	r7, #36	; 0x24
 80082c6:	46bd      	mov	sp, r7
 80082c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082cc:	4770      	bx	lr
 80082ce:	bf00      	nop
 80082d0:	46020c00 	.word	0x46020c00
 80082d4:	4b742400 	.word	0x4b742400
 80082d8:	46000000 	.word	0x46000000
 80082dc:	0801ab54 	.word	0x0801ab54

080082e0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80082e0:	b480      	push	{r7}
 80082e2:	b089      	sub	sp, #36	; 0x24
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 80082e8:	4ba6      	ldr	r3, [pc, #664]	; (8008584 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80082ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082f0:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 80082f2:	4ba4      	ldr	r3, [pc, #656]	; (8008584 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80082f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082f6:	f003 0303 	and.w	r3, r3, #3
 80082fa:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 80082fc:	4ba1      	ldr	r3, [pc, #644]	; (8008584 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80082fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008300:	0a1b      	lsrs	r3, r3, #8
 8008302:	f003 030f 	and.w	r3, r3, #15
 8008306:	3301      	adds	r3, #1
 8008308:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 800830a:	4b9e      	ldr	r3, [pc, #632]	; (8008584 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800830c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800830e:	091b      	lsrs	r3, r3, #4
 8008310:	f003 0301 	and.w	r3, r3, #1
 8008314:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8008316:	4b9b      	ldr	r3, [pc, #620]	; (8008584 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008318:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800831a:	08db      	lsrs	r3, r3, #3
 800831c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008320:	68fa      	ldr	r2, [r7, #12]
 8008322:	fb02 f303 	mul.w	r3, r2, r3
 8008326:	ee07 3a90 	vmov	s15, r3
 800832a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800832e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 8008332:	697b      	ldr	r3, [r7, #20]
 8008334:	2b03      	cmp	r3, #3
 8008336:	d062      	beq.n	80083fe <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 8008338:	697b      	ldr	r3, [r7, #20]
 800833a:	2b03      	cmp	r3, #3
 800833c:	f200 8081 	bhi.w	8008442 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	2b01      	cmp	r3, #1
 8008344:	d024      	beq.n	8008390 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 8008346:	697b      	ldr	r3, [r7, #20]
 8008348:	2b02      	cmp	r3, #2
 800834a:	d17a      	bne.n	8008442 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800834c:	693b      	ldr	r3, [r7, #16]
 800834e:	ee07 3a90 	vmov	s15, r3
 8008352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008356:	eddf 6a8c 	vldr	s13, [pc, #560]	; 8008588 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800835a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800835e:	4b89      	ldr	r3, [pc, #548]	; (8008584 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008362:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008366:	ee07 3a90 	vmov	s15, r3
 800836a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800836e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008372:	eddf 5a86 	vldr	s11, [pc, #536]	; 800858c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8008376:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800837a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800837e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008382:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008386:	ee67 7a27 	vmul.f32	s15, s14, s15
 800838a:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 800838e:	e08f      	b.n	80084b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8008390:	4b7c      	ldr	r3, [pc, #496]	; (8008584 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008392:	689b      	ldr	r3, [r3, #8]
 8008394:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008398:	2b00      	cmp	r3, #0
 800839a:	d005      	beq.n	80083a8 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 800839c:	4b79      	ldr	r3, [pc, #484]	; (8008584 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800839e:	689b      	ldr	r3, [r3, #8]
 80083a0:	0f1b      	lsrs	r3, r3, #28
 80083a2:	f003 030f 	and.w	r3, r3, #15
 80083a6:	e006      	b.n	80083b6 <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 80083a8:	4b76      	ldr	r3, [pc, #472]	; (8008584 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80083aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80083ae:	041b      	lsls	r3, r3, #16
 80083b0:	0f1b      	lsrs	r3, r3, #28
 80083b2:	f003 030f 	and.w	r3, r3, #15
 80083b6:	4a76      	ldr	r2, [pc, #472]	; (8008590 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 80083b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80083bc:	ee07 3a90 	vmov	s15, r3
 80083c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083c4:	693b      	ldr	r3, [r7, #16]
 80083c6:	ee07 3a90 	vmov	s15, r3
 80083ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80083d2:	69bb      	ldr	r3, [r7, #24]
 80083d4:	ee07 3a90 	vmov	s15, r3
 80083d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083dc:	ed97 6a02 	vldr	s12, [r7, #8]
 80083e0:	eddf 5a6a 	vldr	s11, [pc, #424]	; 800858c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80083e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80083f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083f8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80083fc:	e058      	b.n	80084b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80083fe:	693b      	ldr	r3, [r7, #16]
 8008400:	ee07 3a90 	vmov	s15, r3
 8008404:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008408:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008588 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800840c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008410:	4b5c      	ldr	r3, [pc, #368]	; (8008584 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008412:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008414:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008418:	ee07 3a90 	vmov	s15, r3
 800841c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8008420:	ed97 6a02 	vldr	s12, [r7, #8]
 8008424:	eddf 5a59 	vldr	s11, [pc, #356]	; 800858c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8008428:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800842c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8008430:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008434:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008438:	ee67 7a27 	vmul.f32	s15, s14, s15
 800843c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008440:	e036      	b.n	80084b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8008442:	4b50      	ldr	r3, [pc, #320]	; (8008584 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008444:	689b      	ldr	r3, [r3, #8]
 8008446:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800844a:	2b00      	cmp	r3, #0
 800844c:	d005      	beq.n	800845a <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 800844e:	4b4d      	ldr	r3, [pc, #308]	; (8008584 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008450:	689b      	ldr	r3, [r3, #8]
 8008452:	0f1b      	lsrs	r3, r3, #28
 8008454:	f003 030f 	and.w	r3, r3, #15
 8008458:	e006      	b.n	8008468 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 800845a:	4b4a      	ldr	r3, [pc, #296]	; (8008584 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800845c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008460:	041b      	lsls	r3, r3, #16
 8008462:	0f1b      	lsrs	r3, r3, #28
 8008464:	f003 030f 	and.w	r3, r3, #15
 8008468:	4a49      	ldr	r2, [pc, #292]	; (8008590 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800846a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800846e:	ee07 3a90 	vmov	s15, r3
 8008472:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008476:	693b      	ldr	r3, [r7, #16]
 8008478:	ee07 3a90 	vmov	s15, r3
 800847c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008480:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008484:	69bb      	ldr	r3, [r7, #24]
 8008486:	ee07 3a90 	vmov	s15, r3
 800848a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800848e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008492:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800858c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8008496:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800849a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800849e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80084a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80084a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084aa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80084ae:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 80084b0:	4b34      	ldr	r3, [pc, #208]	; (8008584 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80084b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d017      	beq.n	80084ec <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80084bc:	4b31      	ldr	r3, [pc, #196]	; (8008584 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80084be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084c0:	0a5b      	lsrs	r3, r3, #9
 80084c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084c6:	ee07 3a90 	vmov	s15, r3
 80084ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 80084ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80084d2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80084d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80084da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80084de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80084e2:	ee17 2a90 	vmov	r2, s15
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	601a      	str	r2, [r3, #0]
 80084ea:	e002      	b.n	80084f2 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2200      	movs	r2, #0
 80084f0:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 80084f2:	4b24      	ldr	r3, [pc, #144]	; (8008584 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80084f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d017      	beq.n	800852e <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80084fe:	4b21      	ldr	r3, [pc, #132]	; (8008584 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008502:	0c1b      	lsrs	r3, r3, #16
 8008504:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008508:	ee07 3a90 	vmov	s15, r3
 800850c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8008510:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008514:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008518:	edd7 6a07 	vldr	s13, [r7, #28]
 800851c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008520:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008524:	ee17 2a90 	vmov	r2, s15
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	605a      	str	r2, [r3, #4]
 800852c:	e002      	b.n	8008534 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2200      	movs	r2, #0
 8008532:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8008534:	4b13      	ldr	r3, [pc, #76]	; (8008584 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008538:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800853c:	2b00      	cmp	r3, #0
 800853e:	d017      	beq.n	8008570 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008540:	4b10      	ldr	r3, [pc, #64]	; (8008584 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008544:	0e1b      	lsrs	r3, r3, #24
 8008546:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800854a:	ee07 3a90 	vmov	s15, r3
 800854e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8008552:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008556:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800855a:	edd7 6a07 	vldr	s13, [r7, #28]
 800855e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008562:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008566:	ee17 2a90 	vmov	r2, s15
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800856e:	e002      	b.n	8008576 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2200      	movs	r2, #0
 8008574:	609a      	str	r2, [r3, #8]
}
 8008576:	bf00      	nop
 8008578:	3724      	adds	r7, #36	; 0x24
 800857a:	46bd      	mov	sp, r7
 800857c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008580:	4770      	bx	lr
 8008582:	bf00      	nop
 8008584:	46020c00 	.word	0x46020c00
 8008588:	4b742400 	.word	0x4b742400
 800858c:	46000000 	.word	0x46000000
 8008590:	0801ab54 	.word	0x0801ab54

08008594 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b08e      	sub	sp, #56	; 0x38
 8008598:	af00      	add	r7, sp, #0
 800859a:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800859e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085a2:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 80085a6:	430b      	orrs	r3, r1
 80085a8:	d145      	bne.n	8008636 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80085aa:	4ba7      	ldr	r3, [pc, #668]	; (8008848 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80085ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80085b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80085b4:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80085b6:	4ba4      	ldr	r3, [pc, #656]	; (8008848 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80085b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80085bc:	f003 0302 	and.w	r3, r3, #2
 80085c0:	2b02      	cmp	r3, #2
 80085c2:	d108      	bne.n	80085d6 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 80085c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085ca:	d104      	bne.n	80085d6 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 80085cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80085d0:	637b      	str	r3, [r7, #52]	; 0x34
 80085d2:	f001 b9b3 	b.w	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80085d6:	4b9c      	ldr	r3, [pc, #624]	; (8008848 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80085d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80085dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80085e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80085e4:	d114      	bne.n	8008610 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 80085e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80085ec:	d110      	bne.n	8008610 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80085ee:	4b96      	ldr	r3, [pc, #600]	; (8008848 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80085f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80085f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80085f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80085fc:	d103      	bne.n	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 80085fe:	23fa      	movs	r3, #250	; 0xfa
 8008600:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008602:	f001 b99b 	b.w	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8008606:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800860a:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800860c:	f001 b996 	b.w	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8008610:	4b8d      	ldr	r3, [pc, #564]	; (8008848 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008618:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800861c:	d107      	bne.n	800862e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800861e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008620:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008624:	d103      	bne.n	800862e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8008626:	4b89      	ldr	r3, [pc, #548]	; (800884c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8008628:	637b      	str	r3, [r7, #52]	; 0x34
 800862a:	f001 b987 	b.w	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800862e:	2300      	movs	r3, #0
 8008630:	637b      	str	r3, [r7, #52]	; 0x34
 8008632:	f001 b983 	b.w	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008636:	e9d7 2300 	ldrd	r2, r3, [r7]
 800863a:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800863e:	430b      	orrs	r3, r1
 8008640:	d151      	bne.n	80086e6 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8008642:	4b81      	ldr	r3, [pc, #516]	; (8008848 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008644:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008648:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800864c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800864e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008650:	2b80      	cmp	r3, #128	; 0x80
 8008652:	d035      	beq.n	80086c0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8008654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008656:	2b80      	cmp	r3, #128	; 0x80
 8008658:	d841      	bhi.n	80086de <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800865a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800865c:	2b60      	cmp	r3, #96	; 0x60
 800865e:	d02a      	beq.n	80086b6 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8008660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008662:	2b60      	cmp	r3, #96	; 0x60
 8008664:	d83b      	bhi.n	80086de <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8008666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008668:	2b40      	cmp	r3, #64	; 0x40
 800866a:	d009      	beq.n	8008680 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800866c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800866e:	2b40      	cmp	r3, #64	; 0x40
 8008670:	d835      	bhi.n	80086de <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8008672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008674:	2b00      	cmp	r3, #0
 8008676:	d00c      	beq.n	8008692 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8008678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800867a:	2b20      	cmp	r3, #32
 800867c:	d012      	beq.n	80086a4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800867e:	e02e      	b.n	80086de <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008680:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008684:	4618      	mov	r0, r3
 8008686:	f7ff fb77 	bl	8007d78 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800868a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800868c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800868e:	f001 b955 	b.w	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008692:	f107 0318 	add.w	r3, r7, #24
 8008696:	4618      	mov	r0, r3
 8008698:	f7ff fcc8 	bl	800802c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800869c:	69bb      	ldr	r3, [r7, #24]
 800869e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80086a0:	f001 b94c 	b.w	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80086a4:	f107 030c 	add.w	r3, r7, #12
 80086a8:	4618      	mov	r0, r3
 80086aa:	f7ff fe19 	bl	80082e0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80086b2:	f001 b943 	b.w	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80086b6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80086ba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80086bc:	f001 b93e 	b.w	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80086c0:	4b61      	ldr	r3, [pc, #388]	; (8008848 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80086c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80086cc:	d103      	bne.n	80086d6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 80086ce:	4b60      	ldr	r3, [pc, #384]	; (8008850 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80086d0:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80086d2:	f001 b933 	b.w	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80086d6:	2300      	movs	r3, #0
 80086d8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80086da:	f001 b92f 	b.w	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :
      {
        frequency = 0U;
 80086de:	2300      	movs	r3, #0
 80086e0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80086e2:	f001 b92b 	b.w	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 80086e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80086ea:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 80086ee:	430b      	orrs	r3, r1
 80086f0:	d158      	bne.n	80087a4 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80086f2:	4b55      	ldr	r3, [pc, #340]	; (8008848 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80086f4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80086f8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80086fc:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80086fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008700:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008704:	d03b      	beq.n	800877e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8008706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008708:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800870c:	d846      	bhi.n	800879c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800870e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008710:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008714:	d02e      	beq.n	8008774 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8008716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008718:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800871c:	d83e      	bhi.n	800879c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800871e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008720:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008724:	d00b      	beq.n	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8008726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008728:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800872c:	d836      	bhi.n	800879c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800872e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008730:	2b00      	cmp	r3, #0
 8008732:	d00d      	beq.n	8008750 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8008734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008736:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800873a:	d012      	beq.n	8008762 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 800873c:	e02e      	b.n	800879c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800873e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008742:	4618      	mov	r0, r3
 8008744:	f7ff fb18 	bl	8007d78 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8008748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800874a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800874c:	f001 b8f6 	b.w	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008750:	f107 0318 	add.w	r3, r7, #24
 8008754:	4618      	mov	r0, r3
 8008756:	f7ff fc69 	bl	800802c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800875a:	69bb      	ldr	r3, [r7, #24]
 800875c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800875e:	f001 b8ed 	b.w	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008762:	f107 030c 	add.w	r3, r7, #12
 8008766:	4618      	mov	r0, r3
 8008768:	f7ff fdba 	bl	80082e0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008770:	f001 b8e4 	b.w	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8008774:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8008778:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800877a:	f001 b8df 	b.w	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800877e:	4b32      	ldr	r3, [pc, #200]	; (8008848 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008786:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800878a:	d103      	bne.n	8008794 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 800878c:	4b30      	ldr	r3, [pc, #192]	; (8008850 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800878e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008790:	f001 b8d4 	b.w	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8008794:	2300      	movs	r3, #0
 8008796:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008798:	f001 b8d0 	b.w	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :

        frequency = 0U;
 800879c:	2300      	movs	r3, #0
 800879e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80087a0:	f001 b8cc 	b.w	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 80087a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087a8:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 80087ac:	430b      	orrs	r3, r1
 80087ae:	d126      	bne.n	80087fe <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 80087b0:	4b25      	ldr	r3, [pc, #148]	; (8008848 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80087b2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80087b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80087ba:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 80087bc:	4b22      	ldr	r3, [pc, #136]	; (8008848 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80087c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80087c8:	d106      	bne.n	80087d8 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 80087ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d103      	bne.n	80087d8 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 80087d0:	4b1f      	ldr	r3, [pc, #124]	; (8008850 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80087d2:	637b      	str	r3, [r7, #52]	; 0x34
 80087d4:	f001 b8b2 	b.w	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 80087d8:	4b1b      	ldr	r3, [pc, #108]	; (8008848 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80087e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80087e4:	d107      	bne.n	80087f6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 80087e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80087ec:	d103      	bne.n	80087f6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 80087ee:	4b19      	ldr	r3, [pc, #100]	; (8008854 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80087f0:	637b      	str	r3, [r7, #52]	; 0x34
 80087f2:	f001 b8a3 	b.w	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 80087f6:	2300      	movs	r3, #0
 80087f8:	637b      	str	r3, [r7, #52]	; 0x34
 80087fa:	f001 b89f 	b.w	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 80087fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008802:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 8008806:	430b      	orrs	r3, r1
 8008808:	d16e      	bne.n	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800880a:	4b0f      	ldr	r3, [pc, #60]	; (8008848 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800880c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008810:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8008814:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8008816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008818:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800881c:	d03d      	beq.n	800889a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800881e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008820:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8008824:	d85c      	bhi.n	80088e0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8008826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008828:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800882c:	d014      	beq.n	8008858 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 800882e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008830:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008834:	d854      	bhi.n	80088e0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8008836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008838:	2b00      	cmp	r3, #0
 800883a:	d01f      	beq.n	800887c <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 800883c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800883e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008842:	d012      	beq.n	800886a <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8008844:	e04c      	b.n	80088e0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8008846:	bf00      	nop
 8008848:	46020c00 	.word	0x46020c00
 800884c:	0007a120 	.word	0x0007a120
 8008850:	00f42400 	.word	0x00f42400
 8008854:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008858:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800885c:	4618      	mov	r0, r3
 800885e:	f7ff fa8b 	bl	8007d78 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8008862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008864:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008866:	f001 b869 	b.w	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800886a:	f107 0318 	add.w	r3, r7, #24
 800886e:	4618      	mov	r0, r3
 8008870:	f7ff fbdc 	bl	800802c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8008874:	69fb      	ldr	r3, [r7, #28]
 8008876:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008878:	f001 b860 	b.w	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800887c:	4ba7      	ldr	r3, [pc, #668]	; (8008b1c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008884:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008888:	d103      	bne.n	8008892 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 800888a:	4ba5      	ldr	r3, [pc, #660]	; (8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800888c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800888e:	f001 b855 	b.w	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8008892:	2300      	movs	r3, #0
 8008894:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008896:	f001 b851 	b.w	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800889a:	4ba0      	ldr	r3, [pc, #640]	; (8008b1c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f003 0320 	and.w	r3, r3, #32
 80088a2:	2b20      	cmp	r3, #32
 80088a4:	d118      	bne.n	80088d8 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80088a6:	4b9d      	ldr	r3, [pc, #628]	; (8008b1c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80088a8:	689b      	ldr	r3, [r3, #8]
 80088aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d005      	beq.n	80088be <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80088b2:	4b9a      	ldr	r3, [pc, #616]	; (8008b1c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80088b4:	689b      	ldr	r3, [r3, #8]
 80088b6:	0e1b      	lsrs	r3, r3, #24
 80088b8:	f003 030f 	and.w	r3, r3, #15
 80088bc:	e006      	b.n	80088cc <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 80088be:	4b97      	ldr	r3, [pc, #604]	; (8008b1c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80088c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80088c4:	041b      	lsls	r3, r3, #16
 80088c6:	0e1b      	lsrs	r3, r3, #24
 80088c8:	f003 030f 	and.w	r3, r3, #15
 80088cc:	4a95      	ldr	r2, [pc, #596]	; (8008b24 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80088ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80088d2:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80088d4:	f001 b832 	b.w	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80088d8:	2300      	movs	r3, #0
 80088da:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80088dc:	f001 b82e 	b.w	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :

        frequency = 0U;
 80088e0:	2300      	movs	r3, #0
 80088e2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80088e4:	f001 b82a 	b.w	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80088e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80088ec:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 80088f0:	430b      	orrs	r3, r1
 80088f2:	d17f      	bne.n	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80088f4:	4b89      	ldr	r3, [pc, #548]	; (8008b1c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80088f6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80088fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80088fe:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8008900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008902:	2b00      	cmp	r3, #0
 8008904:	d165      	bne.n	80089d2 <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8008906:	4b85      	ldr	r3, [pc, #532]	; (8008b1c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008908:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800890c:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8008910:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 8008912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008914:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8008918:	d034      	beq.n	8008984 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 800891a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800891c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8008920:	d853      	bhi.n	80089ca <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8008922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008924:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008928:	d00b      	beq.n	8008942 <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 800892a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800892c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008930:	d84b      	bhi.n	80089ca <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8008932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008934:	2b00      	cmp	r3, #0
 8008936:	d016      	beq.n	8008966 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 8008938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800893a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800893e:	d009      	beq.n	8008954 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8008940:	e043      	b.n	80089ca <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008942:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008946:	4618      	mov	r0, r3
 8008948:	f7ff fa16 	bl	8007d78 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800894c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800894e:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8008950:	f000 bff4 	b.w	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008954:	f107 0318 	add.w	r3, r7, #24
 8008958:	4618      	mov	r0, r3
 800895a:	f7ff fb67 	bl	800802c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800895e:	69fb      	ldr	r3, [r7, #28]
 8008960:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8008962:	f000 bfeb 	b.w	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8008966:	4b6d      	ldr	r3, [pc, #436]	; (8008b1c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800896e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008972:	d103      	bne.n	800897c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 8008974:	4b6a      	ldr	r3, [pc, #424]	; (8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008976:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8008978:	f000 bfe0 	b.w	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = 0U;
 800897c:	2300      	movs	r3, #0
 800897e:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8008980:	f000 bfdc 	b.w	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008984:	4b65      	ldr	r3, [pc, #404]	; (8008b1c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f003 0320 	and.w	r3, r3, #32
 800898c:	2b20      	cmp	r3, #32
 800898e:	d118      	bne.n	80089c2 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008990:	4b62      	ldr	r3, [pc, #392]	; (8008b1c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008992:	689b      	ldr	r3, [r3, #8]
 8008994:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008998:	2b00      	cmp	r3, #0
 800899a:	d005      	beq.n	80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 800899c:	4b5f      	ldr	r3, [pc, #380]	; (8008b1c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800899e:	689b      	ldr	r3, [r3, #8]
 80089a0:	0e1b      	lsrs	r3, r3, #24
 80089a2:	f003 030f 	and.w	r3, r3, #15
 80089a6:	e006      	b.n	80089b6 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 80089a8:	4b5c      	ldr	r3, [pc, #368]	; (8008b1c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80089aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80089ae:	041b      	lsls	r3, r3, #16
 80089b0:	0e1b      	lsrs	r3, r3, #24
 80089b2:	f003 030f 	and.w	r3, r3, #15
 80089b6:	4a5b      	ldr	r2, [pc, #364]	; (8008b24 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80089b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80089bc:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 80089be:	f000 bfbd 	b.w	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = 0U;
 80089c2:	2300      	movs	r3, #0
 80089c4:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80089c6:	f000 bfb9 	b.w	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        default :
        {
          frequency = 0U;
 80089ca:	2300      	movs	r3, #0
 80089cc:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80089ce:	f000 bfb5 	b.w	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 80089d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80089d8:	d108      	bne.n	80089ec <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80089da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80089de:	4618      	mov	r0, r3
 80089e0:	f7ff f9ca 	bl	8007d78 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 80089e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e6:	637b      	str	r3, [r7, #52]	; 0x34
 80089e8:	f000 bfa8 	b.w	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else
    {
      frequency = 0U;
 80089ec:	2300      	movs	r3, #0
 80089ee:	637b      	str	r3, [r7, #52]	; 0x34
 80089f0:	f000 bfa4 	b.w	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 80089f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089f8:	1e51      	subs	r1, r2, #1
 80089fa:	430b      	orrs	r3, r1
 80089fc:	d136      	bne.n	8008a6c <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80089fe:	4b47      	ldr	r3, [pc, #284]	; (8008b1c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008a00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008a04:	f003 0303 	and.w	r3, r3, #3
 8008a08:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8008a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d104      	bne.n	8008a1a <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8008a10:	f7fe fb0c 	bl	800702c <HAL_RCC_GetPCLK2Freq>
 8008a14:	6378      	str	r0, [r7, #52]	; 0x34
 8008a16:	f000 bf91 	b.w	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8008a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a1c:	2b01      	cmp	r3, #1
 8008a1e:	d104      	bne.n	8008a2a <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008a20:	f7fe f9d4 	bl	8006dcc <HAL_RCC_GetSysClockFreq>
 8008a24:	6378      	str	r0, [r7, #52]	; 0x34
 8008a26:	f000 bf89 	b.w	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8008a2a:	4b3c      	ldr	r3, [pc, #240]	; (8008b1c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008a32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a36:	d106      	bne.n	8008a46 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8008a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a3a:	2b02      	cmp	r3, #2
 8008a3c:	d103      	bne.n	8008a46 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 8008a3e:	4b3a      	ldr	r3, [pc, #232]	; (8008b28 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8008a40:	637b      	str	r3, [r7, #52]	; 0x34
 8008a42:	f000 bf7b 	b.w	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8008a46:	4b35      	ldr	r3, [pc, #212]	; (8008b1c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008a48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008a4c:	f003 0302 	and.w	r3, r3, #2
 8008a50:	2b02      	cmp	r3, #2
 8008a52:	d107      	bne.n	8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8008a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a56:	2b03      	cmp	r3, #3
 8008a58:	d104      	bne.n	8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 8008a5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a5e:	637b      	str	r3, [r7, #52]	; 0x34
 8008a60:	f000 bf6c 	b.w	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8008a64:	2300      	movs	r3, #0
 8008a66:	637b      	str	r3, [r7, #52]	; 0x34
 8008a68:	f000 bf68 	b.w	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8008a6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a70:	1e91      	subs	r1, r2, #2
 8008a72:	430b      	orrs	r3, r1
 8008a74:	d136      	bne.n	8008ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8008a76:	4b29      	ldr	r3, [pc, #164]	; (8008b1c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008a78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008a7c:	f003 030c 	and.w	r3, r3, #12
 8008a80:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8008a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d104      	bne.n	8008a92 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008a88:	f7fe fabc 	bl	8007004 <HAL_RCC_GetPCLK1Freq>
 8008a8c:	6378      	str	r0, [r7, #52]	; 0x34
 8008a8e:	f000 bf55 	b.w	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8008a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a94:	2b04      	cmp	r3, #4
 8008a96:	d104      	bne.n	8008aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008a98:	f7fe f998 	bl	8006dcc <HAL_RCC_GetSysClockFreq>
 8008a9c:	6378      	str	r0, [r7, #52]	; 0x34
 8008a9e:	f000 bf4d 	b.w	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8008aa2:	4b1e      	ldr	r3, [pc, #120]	; (8008b1c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008aaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008aae:	d106      	bne.n	8008abe <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8008ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ab2:	2b08      	cmp	r3, #8
 8008ab4:	d103      	bne.n	8008abe <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 8008ab6:	4b1c      	ldr	r3, [pc, #112]	; (8008b28 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8008ab8:	637b      	str	r3, [r7, #52]	; 0x34
 8008aba:	f000 bf3f 	b.w	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8008abe:	4b17      	ldr	r3, [pc, #92]	; (8008b1c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008ac0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008ac4:	f003 0302 	and.w	r3, r3, #2
 8008ac8:	2b02      	cmp	r3, #2
 8008aca:	d107      	bne.n	8008adc <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8008acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ace:	2b0c      	cmp	r3, #12
 8008ad0:	d104      	bne.n	8008adc <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 8008ad2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008ad6:	637b      	str	r3, [r7, #52]	; 0x34
 8008ad8:	f000 bf30 	b.w	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8008adc:	2300      	movs	r3, #0
 8008ade:	637b      	str	r3, [r7, #52]	; 0x34
 8008ae0:	f000 bf2c 	b.w	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8008ae4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ae8:	1f11      	subs	r1, r2, #4
 8008aea:	430b      	orrs	r3, r1
 8008aec:	d13f      	bne.n	8008b6e <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8008aee:	4b0b      	ldr	r3, [pc, #44]	; (8008b1c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008af0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008af4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008af8:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8008afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d104      	bne.n	8008b0a <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008b00:	f7fe fa80 	bl	8007004 <HAL_RCC_GetPCLK1Freq>
 8008b04:	6378      	str	r0, [r7, #52]	; 0x34
 8008b06:	f000 bf19 	b.w	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8008b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b0c:	2b10      	cmp	r3, #16
 8008b0e:	d10d      	bne.n	8008b2c <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008b10:	f7fe f95c 	bl	8006dcc <HAL_RCC_GetSysClockFreq>
 8008b14:	6378      	str	r0, [r7, #52]	; 0x34
 8008b16:	f000 bf11 	b.w	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8008b1a:	bf00      	nop
 8008b1c:	46020c00 	.word	0x46020c00
 8008b20:	02dc6c00 	.word	0x02dc6c00
 8008b24:	0801ab54 	.word	0x0801ab54
 8008b28:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8008b2c:	4ba6      	ldr	r3, [pc, #664]	; (8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008b34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b38:	d106      	bne.n	8008b48 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 8008b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b3c:	2b20      	cmp	r3, #32
 8008b3e:	d103      	bne.n	8008b48 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 8008b40:	4ba2      	ldr	r3, [pc, #648]	; (8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8008b42:	637b      	str	r3, [r7, #52]	; 0x34
 8008b44:	f000 befa 	b.w	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8008b48:	4b9f      	ldr	r3, [pc, #636]	; (8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008b4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008b4e:	f003 0302 	and.w	r3, r3, #2
 8008b52:	2b02      	cmp	r3, #2
 8008b54:	d107      	bne.n	8008b66 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8008b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b58:	2b30      	cmp	r3, #48	; 0x30
 8008b5a:	d104      	bne.n	8008b66 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 8008b5c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b60:	637b      	str	r3, [r7, #52]	; 0x34
 8008b62:	f000 beeb 	b.w	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8008b66:	2300      	movs	r3, #0
 8008b68:	637b      	str	r3, [r7, #52]	; 0x34
 8008b6a:	f000 bee7 	b.w	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8008b6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b72:	f1a2 0108 	sub.w	r1, r2, #8
 8008b76:	430b      	orrs	r3, r1
 8008b78:	d136      	bne.n	8008be8 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8008b7a:	4b93      	ldr	r3, [pc, #588]	; (8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008b7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008b80:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008b84:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8008b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d104      	bne.n	8008b96 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008b8c:	f7fe fa3a 	bl	8007004 <HAL_RCC_GetPCLK1Freq>
 8008b90:	6378      	str	r0, [r7, #52]	; 0x34
 8008b92:	f000 bed3 	b.w	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8008b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b98:	2b40      	cmp	r3, #64	; 0x40
 8008b9a:	d104      	bne.n	8008ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008b9c:	f7fe f916 	bl	8006dcc <HAL_RCC_GetSysClockFreq>
 8008ba0:	6378      	str	r0, [r7, #52]	; 0x34
 8008ba2:	f000 becb 	b.w	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8008ba6:	4b88      	ldr	r3, [pc, #544]	; (8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008bae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008bb2:	d106      	bne.n	8008bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 8008bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bb6:	2b80      	cmp	r3, #128	; 0x80
 8008bb8:	d103      	bne.n	8008bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 8008bba:	4b84      	ldr	r3, [pc, #528]	; (8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8008bbc:	637b      	str	r3, [r7, #52]	; 0x34
 8008bbe:	f000 bebd 	b.w	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8008bc2:	4b81      	ldr	r3, [pc, #516]	; (8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008bc4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008bc8:	f003 0302 	and.w	r3, r3, #2
 8008bcc:	2b02      	cmp	r3, #2
 8008bce:	d107      	bne.n	8008be0 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bd2:	2bc0      	cmp	r3, #192	; 0xc0
 8008bd4:	d104      	bne.n	8008be0 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 8008bd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008bda:	637b      	str	r3, [r7, #52]	; 0x34
 8008bdc:	f000 beae 	b.w	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8008be0:	2300      	movs	r3, #0
 8008be2:	637b      	str	r3, [r7, #52]	; 0x34
 8008be4:	f000 beaa 	b.w	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8008be8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008bec:	f1a2 0110 	sub.w	r1, r2, #16
 8008bf0:	430b      	orrs	r3, r1
 8008bf2:	d139      	bne.n	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8008bf4:	4b74      	ldr	r3, [pc, #464]	; (8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008bf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008bfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008bfe:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8008c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d104      	bne.n	8008c10 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008c06:	f7fe f9fd 	bl	8007004 <HAL_RCC_GetPCLK1Freq>
 8008c0a:	6378      	str	r0, [r7, #52]	; 0x34
 8008c0c:	f000 be96 	b.w	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8008c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c16:	d104      	bne.n	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008c18:	f7fe f8d8 	bl	8006dcc <HAL_RCC_GetSysClockFreq>
 8008c1c:	6378      	str	r0, [r7, #52]	; 0x34
 8008c1e:	f000 be8d 	b.w	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8008c22:	4b69      	ldr	r3, [pc, #420]	; (8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c2e:	d107      	bne.n	8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 8008c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c36:	d103      	bne.n	8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 8008c38:	4b64      	ldr	r3, [pc, #400]	; (8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8008c3a:	637b      	str	r3, [r7, #52]	; 0x34
 8008c3c:	f000 be7e 	b.w	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8008c40:	4b61      	ldr	r3, [pc, #388]	; (8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008c42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008c46:	f003 0302 	and.w	r3, r3, #2
 8008c4a:	2b02      	cmp	r3, #2
 8008c4c:	d108      	bne.n	8008c60 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 8008c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008c54:	d104      	bne.n	8008c60 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 8008c56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c5a:	637b      	str	r3, [r7, #52]	; 0x34
 8008c5c:	f000 be6e 	b.w	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8008c60:	2300      	movs	r3, #0
 8008c62:	637b      	str	r3, [r7, #52]	; 0x34
 8008c64:	f000 be6a 	b.w	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8008c68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c6c:	f1a2 0120 	sub.w	r1, r2, #32
 8008c70:	430b      	orrs	r3, r1
 8008c72:	d158      	bne.n	8008d26 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8008c74:	4b54      	ldr	r3, [pc, #336]	; (8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008c76:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008c7a:	f003 0307 	and.w	r3, r3, #7
 8008c7e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8008c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d104      	bne.n	8008c90 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8008c86:	f7fe f9e5 	bl	8007054 <HAL_RCC_GetPCLK3Freq>
 8008c8a:	6378      	str	r0, [r7, #52]	; 0x34
 8008c8c:	f000 be56 	b.w	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8008c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c92:	2b01      	cmp	r3, #1
 8008c94:	d104      	bne.n	8008ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008c96:	f7fe f899 	bl	8006dcc <HAL_RCC_GetSysClockFreq>
 8008c9a:	6378      	str	r0, [r7, #52]	; 0x34
 8008c9c:	f000 be4e 	b.w	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8008ca0:	4b49      	ldr	r3, [pc, #292]	; (8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008ca8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008cac:	d106      	bne.n	8008cbc <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 8008cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cb0:	2b02      	cmp	r3, #2
 8008cb2:	d103      	bne.n	8008cbc <HAL_RCCEx_GetPeriphCLKFreq+0x728>
    {
      frequency = HSI_VALUE;
 8008cb4:	4b45      	ldr	r3, [pc, #276]	; (8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8008cb6:	637b      	str	r3, [r7, #52]	; 0x34
 8008cb8:	f000 be40 	b.w	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8008cbc:	4b42      	ldr	r3, [pc, #264]	; (8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008cbe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008cc2:	f003 0302 	and.w	r3, r3, #2
 8008cc6:	2b02      	cmp	r3, #2
 8008cc8:	d107      	bne.n	8008cda <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8008cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ccc:	2b03      	cmp	r3, #3
 8008cce:	d104      	bne.n	8008cda <HAL_RCCEx_GetPeriphCLKFreq+0x746>
    {
      frequency = LSE_VALUE;
 8008cd0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008cd4:	637b      	str	r3, [r7, #52]	; 0x34
 8008cd6:	f000 be31 	b.w	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8008cda:	4b3b      	ldr	r3, [pc, #236]	; (8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f003 0320 	and.w	r3, r3, #32
 8008ce2:	2b20      	cmp	r3, #32
 8008ce4:	d11b      	bne.n	8008d1e <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
 8008ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ce8:	2b04      	cmp	r3, #4
 8008cea:	d118      	bne.n	8008d1e <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008cec:	4b36      	ldr	r3, [pc, #216]	; (8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008cee:	689b      	ldr	r3, [r3, #8]
 8008cf0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d005      	beq.n	8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8008cf8:	4b33      	ldr	r3, [pc, #204]	; (8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008cfa:	689b      	ldr	r3, [r3, #8]
 8008cfc:	0e1b      	lsrs	r3, r3, #24
 8008cfe:	f003 030f 	and.w	r3, r3, #15
 8008d02:	e006      	b.n	8008d12 <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
 8008d04:	4b30      	ldr	r3, [pc, #192]	; (8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008d06:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008d0a:	041b      	lsls	r3, r3, #16
 8008d0c:	0e1b      	lsrs	r3, r3, #24
 8008d0e:	f003 030f 	and.w	r3, r3, #15
 8008d12:	4a2f      	ldr	r2, [pc, #188]	; (8008dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008d14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d18:	637b      	str	r3, [r7, #52]	; 0x34
 8008d1a:	f000 be0f 	b.w	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8008d1e:	2300      	movs	r3, #0
 8008d20:	637b      	str	r3, [r7, #52]	; 0x34
 8008d22:	f000 be0b 	b.w	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8008d26:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d2a:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8008d2e:	430b      	orrs	r3, r1
 8008d30:	d172      	bne.n	8008e18 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8008d32:	4b25      	ldr	r3, [pc, #148]	; (8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008d34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008d38:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8008d3c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8008d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d44:	d104      	bne.n	8008d50 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008d46:	f7fe f841 	bl	8006dcc <HAL_RCC_GetSysClockFreq>
 8008d4a:	6378      	str	r0, [r7, #52]	; 0x34
 8008d4c:	f000 bdf6 	b.w	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8008d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d56:	d108      	bne.n	8008d6a <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d58:	f107 0318 	add.w	r3, r7, #24
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	f7ff f965 	bl	800802c <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8008d62:	6a3b      	ldr	r3, [r7, #32]
 8008d64:	637b      	str	r3, [r7, #52]	; 0x34
 8008d66:	f000 bde9 	b.w	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8008d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d104      	bne.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8008d70:	f7fe f92e 	bl	8006fd0 <HAL_RCC_GetHCLKFreq>
 8008d74:	6378      	str	r0, [r7, #52]	; 0x34
 8008d76:	f000 bde1 	b.w	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8008d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d7c:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8008d80:	d128      	bne.n	8008dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008d82:	4b11      	ldr	r3, [pc, #68]	; (8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f003 0320 	and.w	r3, r3, #32
 8008d8a:	2b20      	cmp	r3, #32
 8008d8c:	d118      	bne.n	8008dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008d8e:	4b0e      	ldr	r3, [pc, #56]	; (8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008d90:	689b      	ldr	r3, [r3, #8]
 8008d92:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d005      	beq.n	8008da6 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 8008d9a:	4b0b      	ldr	r3, [pc, #44]	; (8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008d9c:	689b      	ldr	r3, [r3, #8]
 8008d9e:	0e1b      	lsrs	r3, r3, #24
 8008da0:	f003 030f 	and.w	r3, r3, #15
 8008da4:	e006      	b.n	8008db4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8008da6:	4b08      	ldr	r3, [pc, #32]	; (8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008da8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008dac:	041b      	lsls	r3, r3, #16
 8008dae:	0e1b      	lsrs	r3, r3, #24
 8008db0:	f003 030f 	and.w	r3, r3, #15
 8008db4:	4a06      	ldr	r2, [pc, #24]	; (8008dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008db6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008dba:	637b      	str	r3, [r7, #52]	; 0x34
 8008dbc:	f000 bdbe 	b.w	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	637b      	str	r3, [r7, #52]	; 0x34
 8008dc4:	f000 bdba 	b.w	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8008dc8:	46020c00 	.word	0x46020c00
 8008dcc:	00f42400 	.word	0x00f42400
 8008dd0:	0801ab54 	.word	0x0801ab54
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8008dd4:	4baf      	ldr	r3, [pc, #700]	; (8009094 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ddc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008de0:	d107      	bne.n	8008df2 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
 8008de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008de4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008de8:	d103      	bne.n	8008df2 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
    {
      frequency = HSE_VALUE;
 8008dea:	4bab      	ldr	r3, [pc, #684]	; (8009098 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 8008dec:	637b      	str	r3, [r7, #52]	; 0x34
 8008dee:	f000 bda5 	b.w	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8008df2:	4ba8      	ldr	r3, [pc, #672]	; (8009094 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008dfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008dfe:	d107      	bne.n	8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
 8008e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008e06:	d103      	bne.n	8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
    {
      frequency = HSI_VALUE;
 8008e08:	4ba3      	ldr	r3, [pc, #652]	; (8009098 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 8008e0a:	637b      	str	r3, [r7, #52]	; 0x34
 8008e0c:	f000 bd96 	b.w	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8008e10:	2300      	movs	r3, #0
 8008e12:	637b      	str	r3, [r7, #52]	; 0x34
 8008e14:	f000 bd92 	b.w	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8008e18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e1c:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8008e20:	430b      	orrs	r3, r1
 8008e22:	d158      	bne.n	8008ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8008e24:	4b9b      	ldr	r3, [pc, #620]	; (8009094 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8008e26:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008e2a:	f003 0307 	and.w	r3, r3, #7
 8008e2e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8008e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e32:	2b04      	cmp	r3, #4
 8008e34:	d84b      	bhi.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
 8008e36:	a201      	add	r2, pc, #4	; (adr r2, 8008e3c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 8008e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e3c:	08008e75 	.word	0x08008e75
 8008e40:	08008e51 	.word	0x08008e51
 8008e44:	08008e63 	.word	0x08008e63
 8008e48:	08008e7f 	.word	0x08008e7f
 8008e4c:	08008e89 	.word	0x08008e89
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008e50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008e54:	4618      	mov	r0, r3
 8008e56:	f7fe ff8f 	bl	8007d78 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8008e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e5c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008e5e:	f000 bd6d 	b.w	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e62:	f107 030c 	add.w	r3, r7, #12
 8008e66:	4618      	mov	r0, r3
 8008e68:	f7ff fa3a 	bl	80082e0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8008e6c:	693b      	ldr	r3, [r7, #16]
 8008e6e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008e70:	f000 bd64 	b.w	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8008e74:	f7fe f8ac 	bl	8006fd0 <HAL_RCC_GetHCLKFreq>
 8008e78:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8008e7a:	f000 bd5f 	b.w	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8008e7e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8008e82:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008e84:	f000 bd5a 	b.w	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008e88:	4b82      	ldr	r3, [pc, #520]	; (8009094 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f003 0320 	and.w	r3, r3, #32
 8008e90:	2b20      	cmp	r3, #32
 8008e92:	d118      	bne.n	8008ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008e94:	4b7f      	ldr	r3, [pc, #508]	; (8009094 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8008e96:	689b      	ldr	r3, [r3, #8]
 8008e98:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d005      	beq.n	8008eac <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 8008ea0:	4b7c      	ldr	r3, [pc, #496]	; (8009094 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8008ea2:	689b      	ldr	r3, [r3, #8]
 8008ea4:	0e1b      	lsrs	r3, r3, #24
 8008ea6:	f003 030f 	and.w	r3, r3, #15
 8008eaa:	e006      	b.n	8008eba <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 8008eac:	4b79      	ldr	r3, [pc, #484]	; (8009094 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8008eae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008eb2:	041b      	lsls	r3, r3, #16
 8008eb4:	0e1b      	lsrs	r3, r3, #24
 8008eb6:	f003 030f 	and.w	r3, r3, #15
 8008eba:	4a78      	ldr	r2, [pc, #480]	; (800909c <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 8008ebc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ec0:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008ec2:	f000 bd3b 	b.w	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008eca:	f000 bd37 	b.w	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8008ece:	2300      	movs	r3, #0
 8008ed0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008ed2:	f000 bd33 	b.w	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8008ed6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008eda:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 8008ede:	430b      	orrs	r3, r1
 8008ee0:	d167      	bne.n	8008fb2 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8008ee2:	4b6c      	ldr	r3, [pc, #432]	; (8009094 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8008ee4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008ee8:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8008eec:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8008eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ef0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008ef4:	d036      	beq.n	8008f64 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
 8008ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ef8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008efc:	d855      	bhi.n	8008faa <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8008efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f00:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008f04:	d029      	beq.n	8008f5a <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
 8008f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f08:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008f0c:	d84d      	bhi.n	8008faa <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8008f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008f14:	d013      	beq.n	8008f3e <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 8008f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008f1c:	d845      	bhi.n	8008faa <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8008f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d015      	beq.n	8008f50 <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
 8008f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f2a:	d13e      	bne.n	8008faa <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008f2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008f30:	4618      	mov	r0, r3
 8008f32:	f7fe ff21 	bl	8007d78 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8008f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f38:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008f3a:	f000 bcff 	b.w	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f3e:	f107 030c 	add.w	r3, r7, #12
 8008f42:	4618      	mov	r0, r3
 8008f44:	f7ff f9cc 	bl	80082e0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8008f48:	693b      	ldr	r3, [r7, #16]
 8008f4a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008f4c:	f000 bcf6 	b.w	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8008f50:	f7fe f83e 	bl	8006fd0 <HAL_RCC_GetHCLKFreq>
 8008f54:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8008f56:	f000 bcf1 	b.w	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8008f5a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8008f5e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008f60:	f000 bcec 	b.w	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008f64:	4b4b      	ldr	r3, [pc, #300]	; (8009094 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f003 0320 	and.w	r3, r3, #32
 8008f6c:	2b20      	cmp	r3, #32
 8008f6e:	d118      	bne.n	8008fa2 <HAL_RCCEx_GetPeriphCLKFreq+0xa0e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008f70:	4b48      	ldr	r3, [pc, #288]	; (8009094 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8008f72:	689b      	ldr	r3, [r3, #8]
 8008f74:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d005      	beq.n	8008f88 <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
 8008f7c:	4b45      	ldr	r3, [pc, #276]	; (8009094 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8008f7e:	689b      	ldr	r3, [r3, #8]
 8008f80:	0e1b      	lsrs	r3, r3, #24
 8008f82:	f003 030f 	and.w	r3, r3, #15
 8008f86:	e006      	b.n	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8008f88:	4b42      	ldr	r3, [pc, #264]	; (8009094 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8008f8a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008f8e:	041b      	lsls	r3, r3, #16
 8008f90:	0e1b      	lsrs	r3, r3, #24
 8008f92:	f003 030f 	and.w	r3, r3, #15
 8008f96:	4a41      	ldr	r2, [pc, #260]	; (800909c <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 8008f98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f9c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008f9e:	f000 bccd 	b.w	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008fa6:	f000 bcc9 	b.w	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8008faa:	2300      	movs	r3, #0
 8008fac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008fae:	f000 bcc5 	b.w	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8008fb2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008fb6:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 8008fba:	430b      	orrs	r3, r1
 8008fbc:	d14c      	bne.n	8009058 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8008fbe:	4b35      	ldr	r3, [pc, #212]	; (8009094 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8008fc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008fc4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008fc8:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8008fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d104      	bne.n	8008fda <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008fd0:	f7fe f818 	bl	8007004 <HAL_RCC_GetPCLK1Freq>
 8008fd4:	6378      	str	r0, [r7, #52]	; 0x34
 8008fd6:	f000 bcb1 	b.w	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8008fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008fe0:	d104      	bne.n	8008fec <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008fe2:	f7fd fef3 	bl	8006dcc <HAL_RCC_GetSysClockFreq>
 8008fe6:	6378      	str	r0, [r7, #52]	; 0x34
 8008fe8:	f000 bca8 	b.w	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8008fec:	4b29      	ldr	r3, [pc, #164]	; (8009094 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008ff4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ff8:	d107      	bne.n	800900a <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 8008ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ffc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009000:	d103      	bne.n	800900a <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
    {
      frequency = HSI_VALUE;
 8009002:	4b25      	ldr	r3, [pc, #148]	; (8009098 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 8009004:	637b      	str	r3, [r7, #52]	; 0x34
 8009006:	f000 bc99 	b.w	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800900a:	4b22      	ldr	r3, [pc, #136]	; (8009094 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f003 0320 	and.w	r3, r3, #32
 8009012:	2b20      	cmp	r3, #32
 8009014:	d11c      	bne.n	8009050 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
 8009016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009018:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800901c:	d118      	bne.n	8009050 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800901e:	4b1d      	ldr	r3, [pc, #116]	; (8009094 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8009020:	689b      	ldr	r3, [r3, #8]
 8009022:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009026:	2b00      	cmp	r3, #0
 8009028:	d005      	beq.n	8009036 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 800902a:	4b1a      	ldr	r3, [pc, #104]	; (8009094 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800902c:	689b      	ldr	r3, [r3, #8]
 800902e:	0e1b      	lsrs	r3, r3, #24
 8009030:	f003 030f 	and.w	r3, r3, #15
 8009034:	e006      	b.n	8009044 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>
 8009036:	4b17      	ldr	r3, [pc, #92]	; (8009094 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8009038:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800903c:	041b      	lsls	r3, r3, #16
 800903e:	0e1b      	lsrs	r3, r3, #24
 8009040:	f003 030f 	and.w	r3, r3, #15
 8009044:	4a15      	ldr	r2, [pc, #84]	; (800909c <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 8009046:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800904a:	637b      	str	r3, [r7, #52]	; 0x34
 800904c:	f000 bc76 	b.w	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8009050:	2300      	movs	r3, #0
 8009052:	637b      	str	r3, [r7, #52]	; 0x34
 8009054:	f000 bc72 	b.w	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8009058:	e9d7 2300 	ldrd	r2, r3, [r7]
 800905c:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 8009060:	430b      	orrs	r3, r1
 8009062:	d153      	bne.n	800910c <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8009064:	4b0b      	ldr	r3, [pc, #44]	; (8009094 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8009066:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800906a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800906e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8009070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009072:	2b00      	cmp	r3, #0
 8009074:	d104      	bne.n	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009076:	f7fd ffc5 	bl	8007004 <HAL_RCC_GetPCLK1Freq>
 800907a:	6378      	str	r0, [r7, #52]	; 0x34
 800907c:	f000 bc5e 	b.w	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8009080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009082:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009086:	d10b      	bne.n	80090a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009088:	f7fd fea0 	bl	8006dcc <HAL_RCC_GetSysClockFreq>
 800908c:	6378      	str	r0, [r7, #52]	; 0x34
 800908e:	f000 bc55 	b.w	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8009092:	bf00      	nop
 8009094:	46020c00 	.word	0x46020c00
 8009098:	00f42400 	.word	0x00f42400
 800909c:	0801ab54 	.word	0x0801ab54
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 80090a0:	4ba1      	ldr	r3, [pc, #644]	; (8009328 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80090a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80090ac:	d107      	bne.n	80090be <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
 80090ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80090b4:	d103      	bne.n	80090be <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
    {
      frequency = HSI_VALUE;
 80090b6:	4b9d      	ldr	r3, [pc, #628]	; (800932c <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 80090b8:	637b      	str	r3, [r7, #52]	; 0x34
 80090ba:	f000 bc3f 	b.w	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 80090be:	4b9a      	ldr	r3, [pc, #616]	; (8009328 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f003 0320 	and.w	r3, r3, #32
 80090c6:	2b20      	cmp	r3, #32
 80090c8:	d11c      	bne.n	8009104 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
 80090ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090cc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80090d0:	d118      	bne.n	8009104 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80090d2:	4b95      	ldr	r3, [pc, #596]	; (8009328 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80090d4:	689b      	ldr	r3, [r3, #8]
 80090d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d005      	beq.n	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
 80090de:	4b92      	ldr	r3, [pc, #584]	; (8009328 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80090e0:	689b      	ldr	r3, [r3, #8]
 80090e2:	0e1b      	lsrs	r3, r3, #24
 80090e4:	f003 030f 	and.w	r3, r3, #15
 80090e8:	e006      	b.n	80090f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 80090ea:	4b8f      	ldr	r3, [pc, #572]	; (8009328 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80090ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80090f0:	041b      	lsls	r3, r3, #16
 80090f2:	0e1b      	lsrs	r3, r3, #24
 80090f4:	f003 030f 	and.w	r3, r3, #15
 80090f8:	4a8d      	ldr	r2, [pc, #564]	; (8009330 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 80090fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80090fe:	637b      	str	r3, [r7, #52]	; 0x34
 8009100:	f000 bc1c 	b.w	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8009104:	2300      	movs	r3, #0
 8009106:	637b      	str	r3, [r7, #52]	; 0x34
 8009108:	f000 bc18 	b.w	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800910c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009110:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8009114:	430b      	orrs	r3, r1
 8009116:	d151      	bne.n	80091bc <HAL_RCCEx_GetPeriphCLKFreq+0xc28>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8009118:	4b83      	ldr	r3, [pc, #524]	; (8009328 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800911a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800911e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009122:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8009124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009126:	2bc0      	cmp	r3, #192	; 0xc0
 8009128:	d024      	beq.n	8009174 <HAL_RCCEx_GetPeriphCLKFreq+0xbe0>
 800912a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800912c:	2bc0      	cmp	r3, #192	; 0xc0
 800912e:	d842      	bhi.n	80091b6 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8009130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009132:	2b80      	cmp	r3, #128	; 0x80
 8009134:	d00d      	beq.n	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
 8009136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009138:	2b80      	cmp	r3, #128	; 0x80
 800913a:	d83c      	bhi.n	80091b6 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 800913c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800913e:	2b00      	cmp	r3, #0
 8009140:	d003      	beq.n	800914a <HAL_RCCEx_GetPeriphCLKFreq+0xbb6>
 8009142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009144:	2b40      	cmp	r3, #64	; 0x40
 8009146:	d011      	beq.n	800916c <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
 8009148:	e035      	b.n	80091b6 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800914a:	f7fd ff83 	bl	8007054 <HAL_RCC_GetPCLK3Freq>
 800914e:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8009150:	e3f4      	b.n	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009152:	4b75      	ldr	r3, [pc, #468]	; (8009328 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800915a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800915e:	d102      	bne.n	8009166 <HAL_RCCEx_GetPeriphCLKFreq+0xbd2>
        {
          frequency = HSI_VALUE;
 8009160:	4b72      	ldr	r3, [pc, #456]	; (800932c <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8009162:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009164:	e3ea      	b.n	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8009166:	2300      	movs	r3, #0
 8009168:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800916a:	e3e7      	b.n	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 800916c:	f7fd fe2e 	bl	8006dcc <HAL_RCC_GetSysClockFreq>
 8009170:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8009172:	e3e3      	b.n	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009174:	4b6c      	ldr	r3, [pc, #432]	; (8009328 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f003 0320 	and.w	r3, r3, #32
 800917c:	2b20      	cmp	r3, #32
 800917e:	d117      	bne.n	80091b0 <HAL_RCCEx_GetPeriphCLKFreq+0xc1c>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009180:	4b69      	ldr	r3, [pc, #420]	; (8009328 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009182:	689b      	ldr	r3, [r3, #8]
 8009184:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009188:	2b00      	cmp	r3, #0
 800918a:	d005      	beq.n	8009198 <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
 800918c:	4b66      	ldr	r3, [pc, #408]	; (8009328 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800918e:	689b      	ldr	r3, [r3, #8]
 8009190:	0e1b      	lsrs	r3, r3, #24
 8009192:	f003 030f 	and.w	r3, r3, #15
 8009196:	e006      	b.n	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 8009198:	4b63      	ldr	r3, [pc, #396]	; (8009328 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800919a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800919e:	041b      	lsls	r3, r3, #16
 80091a0:	0e1b      	lsrs	r3, r3, #24
 80091a2:	f003 030f 	and.w	r3, r3, #15
 80091a6:	4a62      	ldr	r2, [pc, #392]	; (8009330 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 80091a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80091ac:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80091ae:	e3c5      	b.n	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80091b0:	2300      	movs	r3, #0
 80091b2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80091b4:	e3c2      	b.n	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      default:
      {
        frequency = 0U;
 80091b6:	2300      	movs	r3, #0
 80091b8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80091ba:	e3bf      	b.n	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 80091bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80091c0:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 80091c4:	430b      	orrs	r3, r1
 80091c6:	d147      	bne.n	8009258 <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80091c8:	4b57      	ldr	r3, [pc, #348]	; (8009328 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80091ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80091ce:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80091d2:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 80091d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d103      	bne.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0xc4e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80091da:	f7fd ff13 	bl	8007004 <HAL_RCC_GetPCLK1Freq>
 80091de:	6378      	str	r0, [r7, #52]	; 0x34
 80091e0:	e3ac      	b.n	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 80091e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80091e8:	d103      	bne.n	80091f2 <HAL_RCCEx_GetPeriphCLKFreq+0xc5e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80091ea:	f7fd fdef 	bl	8006dcc <HAL_RCC_GetSysClockFreq>
 80091ee:	6378      	str	r0, [r7, #52]	; 0x34
 80091f0:	e3a4      	b.n	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 80091f2:	4b4d      	ldr	r3, [pc, #308]	; (8009328 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80091fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80091fe:	d106      	bne.n	800920e <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
 8009200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009202:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009206:	d102      	bne.n	800920e <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
    {
      frequency = HSI_VALUE;
 8009208:	4b48      	ldr	r3, [pc, #288]	; (800932c <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 800920a:	637b      	str	r3, [r7, #52]	; 0x34
 800920c:	e396      	b.n	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 800920e:	4b46      	ldr	r3, [pc, #280]	; (8009328 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	f003 0320 	and.w	r3, r3, #32
 8009216:	2b20      	cmp	r3, #32
 8009218:	d11b      	bne.n	8009252 <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
 800921a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800921c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009220:	d117      	bne.n	8009252 <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009222:	4b41      	ldr	r3, [pc, #260]	; (8009328 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009224:	689b      	ldr	r3, [r3, #8]
 8009226:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800922a:	2b00      	cmp	r3, #0
 800922c:	d005      	beq.n	800923a <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
 800922e:	4b3e      	ldr	r3, [pc, #248]	; (8009328 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009230:	689b      	ldr	r3, [r3, #8]
 8009232:	0e1b      	lsrs	r3, r3, #24
 8009234:	f003 030f 	and.w	r3, r3, #15
 8009238:	e006      	b.n	8009248 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
 800923a:	4b3b      	ldr	r3, [pc, #236]	; (8009328 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800923c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009240:	041b      	lsls	r3, r3, #16
 8009242:	0e1b      	lsrs	r3, r3, #24
 8009244:	f003 030f 	and.w	r3, r3, #15
 8009248:	4a39      	ldr	r2, [pc, #228]	; (8009330 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 800924a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800924e:	637b      	str	r3, [r7, #52]	; 0x34
 8009250:	e374      	b.n	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8009252:	2300      	movs	r3, #0
 8009254:	637b      	str	r3, [r7, #52]	; 0x34
 8009256:	e371      	b.n	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8009258:	e9d7 2300 	ldrd	r2, r3, [r7]
 800925c:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8009260:	430b      	orrs	r3, r1
 8009262:	d16a      	bne.n	800933a <HAL_RCCEx_GetPeriphCLKFreq+0xda6>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8009264:	4b30      	ldr	r3, [pc, #192]	; (8009328 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009266:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800926a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800926e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8009270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009272:	2b00      	cmp	r3, #0
 8009274:	d120      	bne.n	80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd24>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009276:	4b2c      	ldr	r3, [pc, #176]	; (8009328 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	f003 0320 	and.w	r3, r3, #32
 800927e:	2b20      	cmp	r3, #32
 8009280:	d117      	bne.n	80092b2 <HAL_RCCEx_GetPeriphCLKFreq+0xd1e>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009282:	4b29      	ldr	r3, [pc, #164]	; (8009328 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009284:	689b      	ldr	r3, [r3, #8]
 8009286:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800928a:	2b00      	cmp	r3, #0
 800928c:	d005      	beq.n	800929a <HAL_RCCEx_GetPeriphCLKFreq+0xd06>
 800928e:	4b26      	ldr	r3, [pc, #152]	; (8009328 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009290:	689b      	ldr	r3, [r3, #8]
 8009292:	0e1b      	lsrs	r3, r3, #24
 8009294:	f003 030f 	and.w	r3, r3, #15
 8009298:	e006      	b.n	80092a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 800929a:	4b23      	ldr	r3, [pc, #140]	; (8009328 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800929c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80092a0:	041b      	lsls	r3, r3, #16
 80092a2:	0e1b      	lsrs	r3, r3, #24
 80092a4:	f003 030f 	and.w	r3, r3, #15
 80092a8:	4a21      	ldr	r2, [pc, #132]	; (8009330 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 80092aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80092ae:	637b      	str	r3, [r7, #52]	; 0x34
 80092b0:	e344      	b.n	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 80092b2:	2300      	movs	r3, #0
 80092b4:	637b      	str	r3, [r7, #52]	; 0x34
 80092b6:	e341      	b.n	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 80092b8:	4b1b      	ldr	r3, [pc, #108]	; (8009328 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80092ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80092be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80092c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80092c6:	d112      	bne.n	80092ee <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 80092c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092ce:	d10e      	bne.n	80092ee <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80092d0:	4b15      	ldr	r3, [pc, #84]	; (8009328 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80092d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80092d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80092da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80092de:	d102      	bne.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
      {
        frequency = LSI_VALUE / 128U;
 80092e0:	23fa      	movs	r3, #250	; 0xfa
 80092e2:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80092e4:	e32a      	b.n	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 80092e6:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80092ea:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80092ec:	e326      	b.n	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 80092ee:	4b0e      	ldr	r3, [pc, #56]	; (8009328 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80092f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80092fa:	d106      	bne.n	800930a <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
 80092fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009302:	d102      	bne.n	800930a <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
    {
      frequency = HSI_VALUE;
 8009304:	4b09      	ldr	r3, [pc, #36]	; (800932c <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8009306:	637b      	str	r3, [r7, #52]	; 0x34
 8009308:	e318      	b.n	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800930a:	4b07      	ldr	r3, [pc, #28]	; (8009328 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800930c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009310:	f003 0302 	and.w	r3, r3, #2
 8009314:	2b02      	cmp	r3, #2
 8009316:	d10d      	bne.n	8009334 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
 8009318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800931a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800931e:	d109      	bne.n	8009334 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
    {
      frequency = LSE_VALUE;
 8009320:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009324:	637b      	str	r3, [r7, #52]	; 0x34
 8009326:	e309      	b.n	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8009328:	46020c00 	.word	0x46020c00
 800932c:	00f42400 	.word	0x00f42400
 8009330:	0801ab54 	.word	0x0801ab54
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8009334:	2300      	movs	r3, #0
 8009336:	637b      	str	r3, [r7, #52]	; 0x34
 8009338:	e300      	b.n	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800933a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800933e:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8009342:	430b      	orrs	r3, r1
 8009344:	d164      	bne.n	8009410 <HAL_RCCEx_GetPeriphCLKFreq+0xe7c>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8009346:	4ba2      	ldr	r3, [pc, #648]	; (80095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009348:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800934c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009350:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8009352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009354:	2b00      	cmp	r3, #0
 8009356:	d120      	bne.n	800939a <HAL_RCCEx_GetPeriphCLKFreq+0xe06>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009358:	4b9d      	ldr	r3, [pc, #628]	; (80095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f003 0320 	and.w	r3, r3, #32
 8009360:	2b20      	cmp	r3, #32
 8009362:	d117      	bne.n	8009394 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009364:	4b9a      	ldr	r3, [pc, #616]	; (80095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009366:	689b      	ldr	r3, [r3, #8]
 8009368:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800936c:	2b00      	cmp	r3, #0
 800936e:	d005      	beq.n	800937c <HAL_RCCEx_GetPeriphCLKFreq+0xde8>
 8009370:	4b97      	ldr	r3, [pc, #604]	; (80095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009372:	689b      	ldr	r3, [r3, #8]
 8009374:	0e1b      	lsrs	r3, r3, #24
 8009376:	f003 030f 	and.w	r3, r3, #15
 800937a:	e006      	b.n	800938a <HAL_RCCEx_GetPeriphCLKFreq+0xdf6>
 800937c:	4b94      	ldr	r3, [pc, #592]	; (80095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800937e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009382:	041b      	lsls	r3, r3, #16
 8009384:	0e1b      	lsrs	r3, r3, #24
 8009386:	f003 030f 	and.w	r3, r3, #15
 800938a:	4a92      	ldr	r2, [pc, #584]	; (80095d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 800938c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009390:	637b      	str	r3, [r7, #52]	; 0x34
 8009392:	e2d3      	b.n	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 8009394:	2300      	movs	r3, #0
 8009396:	637b      	str	r3, [r7, #52]	; 0x34
 8009398:	e2d0      	b.n	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800939a:	4b8d      	ldr	r3, [pc, #564]	; (80095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800939c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80093a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80093a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80093a8:	d112      	bne.n	80093d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
 80093aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80093b0:	d10e      	bne.n	80093d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80093b2:	4b87      	ldr	r3, [pc, #540]	; (80095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80093b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80093b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80093bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80093c0:	d102      	bne.n	80093c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
      {
        frequency = LSI_VALUE / 128U;
 80093c2:	23fa      	movs	r3, #250	; 0xfa
 80093c4:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80093c6:	e2b9      	b.n	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 80093c8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80093cc:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80093ce:	e2b5      	b.n	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 80093d0:	4b7f      	ldr	r3, [pc, #508]	; (80095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80093d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80093dc:	d106      	bne.n	80093ec <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
 80093de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80093e4:	d102      	bne.n	80093ec <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
    {
      frequency = HSI_VALUE;
 80093e6:	4b7c      	ldr	r3, [pc, #496]	; (80095d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 80093e8:	637b      	str	r3, [r7, #52]	; 0x34
 80093ea:	e2a7      	b.n	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 80093ec:	4b78      	ldr	r3, [pc, #480]	; (80095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80093ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80093f2:	f003 0302 	and.w	r3, r3, #2
 80093f6:	2b02      	cmp	r3, #2
 80093f8:	d107      	bne.n	800940a <HAL_RCCEx_GetPeriphCLKFreq+0xe76>
 80093fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009400:	d103      	bne.n	800940a <HAL_RCCEx_GetPeriphCLKFreq+0xe76>
    {
      frequency = LSE_VALUE;
 8009402:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009406:	637b      	str	r3, [r7, #52]	; 0x34
 8009408:	e298      	b.n	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800940a:	2300      	movs	r3, #0
 800940c:	637b      	str	r3, [r7, #52]	; 0x34
 800940e:	e295      	b.n	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8009410:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009414:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8009418:	430b      	orrs	r3, r1
 800941a:	d147      	bne.n	80094ac <HAL_RCCEx_GetPeriphCLKFreq+0xf18>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800941c:	4b6c      	ldr	r3, [pc, #432]	; (80095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800941e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009422:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8009426:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8009428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800942a:	2b00      	cmp	r3, #0
 800942c:	d103      	bne.n	8009436 <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800942e:	f7fd fde9 	bl	8007004 <HAL_RCC_GetPCLK1Freq>
 8009432:	6378      	str	r0, [r7, #52]	; 0x34
 8009434:	e282      	b.n	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8009436:	4b66      	ldr	r3, [pc, #408]	; (80095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009438:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800943c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009440:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009444:	d112      	bne.n	800946c <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
 8009446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009448:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800944c:	d10e      	bne.n	800946c <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800944e:	4b60      	ldr	r3, [pc, #384]	; (80095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009450:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009454:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009458:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800945c:	d102      	bne.n	8009464 <HAL_RCCEx_GetPeriphCLKFreq+0xed0>
      {
        frequency = LSI_VALUE / 128U;
 800945e:	23fa      	movs	r3, #250	; 0xfa
 8009460:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009462:	e26b      	b.n	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8009464:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8009468:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800946a:	e267      	b.n	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800946c:	4b58      	ldr	r3, [pc, #352]	; (80095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009474:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009478:	d106      	bne.n	8009488 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 800947a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800947c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009480:	d102      	bne.n	8009488 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
    {
      frequency = HSI_VALUE;
 8009482:	4b55      	ldr	r3, [pc, #340]	; (80095d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8009484:	637b      	str	r3, [r7, #52]	; 0x34
 8009486:	e259      	b.n	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8009488:	4b51      	ldr	r3, [pc, #324]	; (80095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800948a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800948e:	f003 0302 	and.w	r3, r3, #2
 8009492:	2b02      	cmp	r3, #2
 8009494:	d107      	bne.n	80094a6 <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
 8009496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009498:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800949c:	d103      	bne.n	80094a6 <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      frequency = LSE_VALUE;
 800949e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80094a2:	637b      	str	r3, [r7, #52]	; 0x34
 80094a4:	e24a      	b.n	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 80094a6:	2300      	movs	r3, #0
 80094a8:	637b      	str	r3, [r7, #52]	; 0x34
 80094aa:	e247      	b.n	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 80094ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80094b0:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 80094b4:	430b      	orrs	r3, r1
 80094b6:	d12d      	bne.n	8009514 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 80094b8:	4b45      	ldr	r3, [pc, #276]	; (80095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80094ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80094be:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 80094c2:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 80094c4:	4b42      	ldr	r3, [pc, #264]	; (80095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80094cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80094d0:	d105      	bne.n	80094de <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 80094d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d102      	bne.n	80094de <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
    {
      frequency = HSE_VALUE;
 80094d8:	4b3f      	ldr	r3, [pc, #252]	; (80095d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 80094da:	637b      	str	r3, [r7, #52]	; 0x34
 80094dc:	e22e      	b.n	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 80094de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80094e4:	d107      	bne.n	80094f6 <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80094e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80094ea:	4618      	mov	r0, r3
 80094ec:	f7fe fc44 	bl	8007d78 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 80094f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094f2:	637b      	str	r3, [r7, #52]	; 0x34
 80094f4:	e222      	b.n	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 80094f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80094fc:	d107      	bne.n	800950e <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80094fe:	f107 0318 	add.w	r3, r7, #24
 8009502:	4618      	mov	r0, r3
 8009504:	f7fe fd92 	bl	800802c <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8009508:	69bb      	ldr	r3, [r7, #24]
 800950a:	637b      	str	r3, [r7, #52]	; 0x34
 800950c:	e216      	b.n	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800950e:	2300      	movs	r3, #0
 8009510:	637b      	str	r3, [r7, #52]	; 0x34
 8009512:	e213      	b.n	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8009514:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009518:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 800951c:	430b      	orrs	r3, r1
 800951e:	d15d      	bne.n	80095dc <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8009520:	4b2b      	ldr	r3, [pc, #172]	; (80095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009522:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009526:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800952a:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800952c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800952e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009532:	d028      	beq.n	8009586 <HAL_RCCEx_GetPeriphCLKFreq+0xff2>
 8009534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009536:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800953a:	d845      	bhi.n	80095c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 800953c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800953e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009542:	d013      	beq.n	800956c <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 8009544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009546:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800954a:	d83d      	bhi.n	80095c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 800954c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800954e:	2b00      	cmp	r3, #0
 8009550:	d004      	beq.n	800955c <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>
 8009552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009554:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009558:	d004      	beq.n	8009564 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
 800955a:	e035      	b.n	80095c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 800955c:	f7fd fd66 	bl	800702c <HAL_RCC_GetPCLK2Freq>
 8009560:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8009562:	e1eb      	b.n	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8009564:	f7fd fc32 	bl	8006dcc <HAL_RCC_GetSysClockFreq>
 8009568:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800956a:	e1e7      	b.n	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800956c:	4b18      	ldr	r3, [pc, #96]	; (80095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009574:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009578:	d102      	bne.n	8009580 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>
        {
          frequency = HSI_VALUE;
 800957a:	4b17      	ldr	r3, [pc, #92]	; (80095d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 800957c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800957e:	e1dd      	b.n	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8009580:	2300      	movs	r3, #0
 8009582:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009584:	e1da      	b.n	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009586:	4b12      	ldr	r3, [pc, #72]	; (80095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	f003 0320 	and.w	r3, r3, #32
 800958e:	2b20      	cmp	r3, #32
 8009590:	d117      	bne.n	80095c2 <HAL_RCCEx_GetPeriphCLKFreq+0x102e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009592:	4b0f      	ldr	r3, [pc, #60]	; (80095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009594:	689b      	ldr	r3, [r3, #8]
 8009596:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800959a:	2b00      	cmp	r3, #0
 800959c:	d005      	beq.n	80095aa <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
 800959e:	4b0c      	ldr	r3, [pc, #48]	; (80095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80095a0:	689b      	ldr	r3, [r3, #8]
 80095a2:	0e1b      	lsrs	r3, r3, #24
 80095a4:	f003 030f 	and.w	r3, r3, #15
 80095a8:	e006      	b.n	80095b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1024>
 80095aa:	4b09      	ldr	r3, [pc, #36]	; (80095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80095ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80095b0:	041b      	lsls	r3, r3, #16
 80095b2:	0e1b      	lsrs	r3, r3, #24
 80095b4:	f003 030f 	and.w	r3, r3, #15
 80095b8:	4a06      	ldr	r2, [pc, #24]	; (80095d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 80095ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80095be:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80095c0:	e1bc      	b.n	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80095c2:	2300      	movs	r3, #0
 80095c4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80095c6:	e1b9      	b.n	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 80095c8:	2300      	movs	r3, #0
 80095ca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80095cc:	e1b6      	b.n	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 80095ce:	bf00      	nop
 80095d0:	46020c00 	.word	0x46020c00
 80095d4:	0801ab54 	.word	0x0801ab54
 80095d8:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 80095dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80095e0:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 80095e4:	430b      	orrs	r3, r1
 80095e6:	d156      	bne.n	8009696 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 80095e8:	4ba5      	ldr	r3, [pc, #660]	; (8009880 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80095ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80095ee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80095f2:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 80095f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095f6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80095fa:	d028      	beq.n	800964e <HAL_RCCEx_GetPeriphCLKFreq+0x10ba>
 80095fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095fe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009602:	d845      	bhi.n	8009690 <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
 8009604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009606:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800960a:	d013      	beq.n	8009634 <HAL_RCCEx_GetPeriphCLKFreq+0x10a0>
 800960c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800960e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009612:	d83d      	bhi.n	8009690 <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
 8009614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009616:	2b00      	cmp	r3, #0
 8009618:	d004      	beq.n	8009624 <HAL_RCCEx_GetPeriphCLKFreq+0x1090>
 800961a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800961c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009620:	d004      	beq.n	800962c <HAL_RCCEx_GetPeriphCLKFreq+0x1098>
 8009622:	e035      	b.n	8009690 <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8009624:	f7fd fcee 	bl	8007004 <HAL_RCC_GetPCLK1Freq>
 8009628:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800962a:	e187      	b.n	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800962c:	f7fd fbce 	bl	8006dcc <HAL_RCC_GetSysClockFreq>
 8009630:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8009632:	e183      	b.n	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009634:	4b92      	ldr	r3, [pc, #584]	; (8009880 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800963c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009640:	d102      	bne.n	8009648 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>
        {
          frequency = HSI_VALUE;
 8009642:	4b90      	ldr	r3, [pc, #576]	; (8009884 <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 8009644:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009646:	e179      	b.n	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8009648:	2300      	movs	r3, #0
 800964a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800964c:	e176      	b.n	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800964e:	4b8c      	ldr	r3, [pc, #560]	; (8009880 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f003 0320 	and.w	r3, r3, #32
 8009656:	2b20      	cmp	r3, #32
 8009658:	d117      	bne.n	800968a <HAL_RCCEx_GetPeriphCLKFreq+0x10f6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800965a:	4b89      	ldr	r3, [pc, #548]	; (8009880 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800965c:	689b      	ldr	r3, [r3, #8]
 800965e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009662:	2b00      	cmp	r3, #0
 8009664:	d005      	beq.n	8009672 <HAL_RCCEx_GetPeriphCLKFreq+0x10de>
 8009666:	4b86      	ldr	r3, [pc, #536]	; (8009880 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009668:	689b      	ldr	r3, [r3, #8]
 800966a:	0e1b      	lsrs	r3, r3, #24
 800966c:	f003 030f 	and.w	r3, r3, #15
 8009670:	e006      	b.n	8009680 <HAL_RCCEx_GetPeriphCLKFreq+0x10ec>
 8009672:	4b83      	ldr	r3, [pc, #524]	; (8009880 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009674:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009678:	041b      	lsls	r3, r3, #16
 800967a:	0e1b      	lsrs	r3, r3, #24
 800967c:	f003 030f 	and.w	r3, r3, #15
 8009680:	4a81      	ldr	r2, [pc, #516]	; (8009888 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 8009682:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009686:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009688:	e158      	b.n	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800968a:	2300      	movs	r3, #0
 800968c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800968e:	e155      	b.n	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8009690:	2300      	movs	r3, #0
 8009692:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009694:	e152      	b.n	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8009696:	e9d7 2300 	ldrd	r2, r3, [r7]
 800969a:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 800969e:	430b      	orrs	r3, r1
 80096a0:	d177      	bne.n	8009792 <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 80096a2:	4b77      	ldr	r3, [pc, #476]	; (8009880 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80096a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80096a8:	f003 0318 	and.w	r3, r3, #24
 80096ac:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 80096ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096b0:	2b18      	cmp	r3, #24
 80096b2:	d86b      	bhi.n	800978c <HAL_RCCEx_GetPeriphCLKFreq+0x11f8>
 80096b4:	a201      	add	r2, pc, #4	; (adr r2, 80096bc <HAL_RCCEx_GetPeriphCLKFreq+0x1128>)
 80096b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096ba:	bf00      	nop
 80096bc:	08009721 	.word	0x08009721
 80096c0:	0800978d 	.word	0x0800978d
 80096c4:	0800978d 	.word	0x0800978d
 80096c8:	0800978d 	.word	0x0800978d
 80096cc:	0800978d 	.word	0x0800978d
 80096d0:	0800978d 	.word	0x0800978d
 80096d4:	0800978d 	.word	0x0800978d
 80096d8:	0800978d 	.word	0x0800978d
 80096dc:	08009729 	.word	0x08009729
 80096e0:	0800978d 	.word	0x0800978d
 80096e4:	0800978d 	.word	0x0800978d
 80096e8:	0800978d 	.word	0x0800978d
 80096ec:	0800978d 	.word	0x0800978d
 80096f0:	0800978d 	.word	0x0800978d
 80096f4:	0800978d 	.word	0x0800978d
 80096f8:	0800978d 	.word	0x0800978d
 80096fc:	08009731 	.word	0x08009731
 8009700:	0800978d 	.word	0x0800978d
 8009704:	0800978d 	.word	0x0800978d
 8009708:	0800978d 	.word	0x0800978d
 800970c:	0800978d 	.word	0x0800978d
 8009710:	0800978d 	.word	0x0800978d
 8009714:	0800978d 	.word	0x0800978d
 8009718:	0800978d 	.word	0x0800978d
 800971c:	0800974b 	.word	0x0800974b
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8009720:	f7fd fc98 	bl	8007054 <HAL_RCC_GetPCLK3Freq>
 8009724:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8009726:	e109      	b.n	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8009728:	f7fd fb50 	bl	8006dcc <HAL_RCC_GetSysClockFreq>
 800972c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800972e:	e105      	b.n	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009730:	4b53      	ldr	r3, [pc, #332]	; (8009880 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009738:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800973c:	d102      	bne.n	8009744 <HAL_RCCEx_GetPeriphCLKFreq+0x11b0>
        {
          frequency = HSI_VALUE;
 800973e:	4b51      	ldr	r3, [pc, #324]	; (8009884 <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 8009740:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009742:	e0fb      	b.n	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8009744:	2300      	movs	r3, #0
 8009746:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009748:	e0f8      	b.n	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800974a:	4b4d      	ldr	r3, [pc, #308]	; (8009880 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f003 0320 	and.w	r3, r3, #32
 8009752:	2b20      	cmp	r3, #32
 8009754:	d117      	bne.n	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0x11f2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009756:	4b4a      	ldr	r3, [pc, #296]	; (8009880 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009758:	689b      	ldr	r3, [r3, #8]
 800975a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800975e:	2b00      	cmp	r3, #0
 8009760:	d005      	beq.n	800976e <HAL_RCCEx_GetPeriphCLKFreq+0x11da>
 8009762:	4b47      	ldr	r3, [pc, #284]	; (8009880 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009764:	689b      	ldr	r3, [r3, #8]
 8009766:	0e1b      	lsrs	r3, r3, #24
 8009768:	f003 030f 	and.w	r3, r3, #15
 800976c:	e006      	b.n	800977c <HAL_RCCEx_GetPeriphCLKFreq+0x11e8>
 800976e:	4b44      	ldr	r3, [pc, #272]	; (8009880 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009770:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009774:	041b      	lsls	r3, r3, #16
 8009776:	0e1b      	lsrs	r3, r3, #24
 8009778:	f003 030f 	and.w	r3, r3, #15
 800977c:	4a42      	ldr	r2, [pc, #264]	; (8009888 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 800977e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009782:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009784:	e0da      	b.n	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8009786:	2300      	movs	r3, #0
 8009788:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800978a:	e0d7      	b.n	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 800978c:	2300      	movs	r3, #0
 800978e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009790:	e0d4      	b.n	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8009792:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009796:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 800979a:	430b      	orrs	r3, r1
 800979c:	d155      	bne.n	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x12b6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800979e:	4b38      	ldr	r3, [pc, #224]	; (8009880 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80097a0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80097a4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80097a8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80097aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097ac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80097b0:	d013      	beq.n	80097da <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
 80097b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097b4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80097b8:	d844      	bhi.n	8009844 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
 80097ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80097c0:	d013      	beq.n	80097ea <HAL_RCCEx_GetPeriphCLKFreq+0x1256>
 80097c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80097c8:	d83c      	bhi.n	8009844 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
 80097ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d014      	beq.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 80097d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80097d6:	d014      	beq.n	8009802 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
 80097d8:	e034      	b.n	8009844 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80097da:	f107 0318 	add.w	r3, r7, #24
 80097de:	4618      	mov	r0, r3
 80097e0:	f7fe fc24 	bl	800802c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 80097e4:	69fb      	ldr	r3, [r7, #28]
 80097e6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80097e8:	e0a8      	b.n	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80097ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80097ee:	4618      	mov	r0, r3
 80097f0:	f7fe fac2 	bl	8007d78 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 80097f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097f6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80097f8:	e0a0      	b.n	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80097fa:	f7fd fae7 	bl	8006dcc <HAL_RCC_GetSysClockFreq>
 80097fe:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8009800:	e09c      	b.n	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009802:	4b1f      	ldr	r3, [pc, #124]	; (8009880 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	f003 0320 	and.w	r3, r3, #32
 800980a:	2b20      	cmp	r3, #32
 800980c:	d117      	bne.n	800983e <HAL_RCCEx_GetPeriphCLKFreq+0x12aa>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800980e:	4b1c      	ldr	r3, [pc, #112]	; (8009880 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009810:	689b      	ldr	r3, [r3, #8]
 8009812:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009816:	2b00      	cmp	r3, #0
 8009818:	d005      	beq.n	8009826 <HAL_RCCEx_GetPeriphCLKFreq+0x1292>
 800981a:	4b19      	ldr	r3, [pc, #100]	; (8009880 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800981c:	689b      	ldr	r3, [r3, #8]
 800981e:	0e1b      	lsrs	r3, r3, #24
 8009820:	f003 030f 	and.w	r3, r3, #15
 8009824:	e006      	b.n	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 8009826:	4b16      	ldr	r3, [pc, #88]	; (8009880 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009828:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800982c:	041b      	lsls	r3, r3, #16
 800982e:	0e1b      	lsrs	r3, r3, #24
 8009830:	f003 030f 	and.w	r3, r3, #15
 8009834:	4a14      	ldr	r2, [pc, #80]	; (8009888 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 8009836:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800983a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800983c:	e07e      	b.n	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800983e:	2300      	movs	r3, #0
 8009840:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009842:	e07b      	b.n	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8009844:	2300      	movs	r3, #0
 8009846:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009848:	e078      	b.n	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800984a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800984e:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 8009852:	430b      	orrs	r3, r1
 8009854:	d138      	bne.n	80098c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1334>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8009856:	4b0a      	ldr	r3, [pc, #40]	; (8009880 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009858:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800985c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009860:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8009862:	4b07      	ldr	r3, [pc, #28]	; (8009880 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009864:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009868:	f003 0302 	and.w	r3, r3, #2
 800986c:	2b02      	cmp	r3, #2
 800986e:	d10d      	bne.n	800988c <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
 8009870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009872:	2b00      	cmp	r3, #0
 8009874:	d10a      	bne.n	800988c <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
    {
      frequency = LSE_VALUE;
 8009876:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800987a:	637b      	str	r3, [r7, #52]	; 0x34
 800987c:	e05e      	b.n	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 800987e:	bf00      	nop
 8009880:	46020c00 	.word	0x46020c00
 8009884:	00f42400 	.word	0x00f42400
 8009888:	0801ab54 	.word	0x0801ab54
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800988c:	4b2e      	ldr	r3, [pc, #184]	; (8009948 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 800988e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009892:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009896:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800989a:	d112      	bne.n	80098c2 <HAL_RCCEx_GetPeriphCLKFreq+0x132e>
 800989c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800989e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80098a2:	d10e      	bne.n	80098c2 <HAL_RCCEx_GetPeriphCLKFreq+0x132e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80098a4:	4b28      	ldr	r3, [pc, #160]	; (8009948 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 80098a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80098aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80098ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80098b2:	d102      	bne.n	80098ba <HAL_RCCEx_GetPeriphCLKFreq+0x1326>
      {
        frequency = LSI_VALUE / 128U;
 80098b4:	23fa      	movs	r3, #250	; 0xfa
 80098b6:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80098b8:	e040      	b.n	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 80098ba:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80098be:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80098c0:	e03c      	b.n	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 80098c2:	2300      	movs	r3, #0
 80098c4:	637b      	str	r3, [r7, #52]	; 0x34
 80098c6:	e039      	b.n	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 80098c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80098cc:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 80098d0:	430b      	orrs	r3, r1
 80098d2:	d131      	bne.n	8009938 <HAL_RCCEx_GetPeriphCLKFreq+0x13a4>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 80098d4:	4b1c      	ldr	r3, [pc, #112]	; (8009948 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 80098d6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80098da:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80098de:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 80098e0:	4b19      	ldr	r3, [pc, #100]	; (8009948 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80098e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80098ec:	d105      	bne.n	80098fa <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
 80098ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d102      	bne.n	80098fa <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
    {
      frequency = HSI48_VALUE;
 80098f4:	4b15      	ldr	r3, [pc, #84]	; (800994c <HAL_RCCEx_GetPeriphCLKFreq+0x13b8>)
 80098f6:	637b      	str	r3, [r7, #52]	; 0x34
 80098f8:	e020      	b.n	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 80098fa:	4b13      	ldr	r3, [pc, #76]	; (8009948 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009902:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009906:	d106      	bne.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
 8009908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800990a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800990e:	d102      	bne.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
    {
      frequency = HSI48_VALUE >> 1U ;
 8009910:	4b0f      	ldr	r3, [pc, #60]	; (8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x13bc>)
 8009912:	637b      	str	r3, [r7, #52]	; 0x34
 8009914:	e012      	b.n	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 8009916:	4b0c      	ldr	r3, [pc, #48]	; (8009948 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800991e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009922:	d106      	bne.n	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
 8009924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009926:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800992a:	d102      	bne.n	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
    {
      frequency = HSI_VALUE;
 800992c:	4b09      	ldr	r3, [pc, #36]	; (8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x13c0>)
 800992e:	637b      	str	r3, [r7, #52]	; 0x34
 8009930:	e004      	b.n	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 8009932:	2300      	movs	r3, #0
 8009934:	637b      	str	r3, [r7, #52]	; 0x34
 8009936:	e001      	b.n	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8009938:	2300      	movs	r3, #0
 800993a:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 800993c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800993e:	4618      	mov	r0, r3
 8009940:	3738      	adds	r7, #56	; 0x38
 8009942:	46bd      	mov	sp, r7
 8009944:	bd80      	pop	{r7, pc}
 8009946:	bf00      	nop
 8009948:	46020c00 	.word	0x46020c00
 800994c:	02dc6c00 	.word	0x02dc6c00
 8009950:	016e3600 	.word	0x016e3600
 8009954:	00f42400 	.word	0x00f42400

08009958 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b084      	sub	sp, #16
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8009960:	4b47      	ldr	r3, [pc, #284]	; (8009a80 <RCCEx_PLL2_Config+0x128>)
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	4a46      	ldr	r2, [pc, #280]	; (8009a80 <RCCEx_PLL2_Config+0x128>)
 8009966:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800996a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800996c:	f7f8 fb5c 	bl	8002028 <HAL_GetTick>
 8009970:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009972:	e008      	b.n	8009986 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009974:	f7f8 fb58 	bl	8002028 <HAL_GetTick>
 8009978:	4602      	mov	r2, r0
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	1ad3      	subs	r3, r2, r3
 800997e:	2b02      	cmp	r3, #2
 8009980:	d901      	bls.n	8009986 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8009982:	2303      	movs	r3, #3
 8009984:	e077      	b.n	8009a76 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009986:	4b3e      	ldr	r3, [pc, #248]	; (8009a80 <RCCEx_PLL2_Config+0x128>)
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800998e:	2b00      	cmp	r3, #0
 8009990:	d1f0      	bne.n	8009974 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8009992:	4b3b      	ldr	r3, [pc, #236]	; (8009a80 <RCCEx_PLL2_Config+0x128>)
 8009994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009996:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800999a:	f023 0303 	bic.w	r3, r3, #3
 800999e:	687a      	ldr	r2, [r7, #4]
 80099a0:	6811      	ldr	r1, [r2, #0]
 80099a2:	687a      	ldr	r2, [r7, #4]
 80099a4:	6852      	ldr	r2, [r2, #4]
 80099a6:	3a01      	subs	r2, #1
 80099a8:	0212      	lsls	r2, r2, #8
 80099aa:	430a      	orrs	r2, r1
 80099ac:	4934      	ldr	r1, [pc, #208]	; (8009a80 <RCCEx_PLL2_Config+0x128>)
 80099ae:	4313      	orrs	r3, r2
 80099b0:	62cb      	str	r3, [r1, #44]	; 0x2c
 80099b2:	4b33      	ldr	r3, [pc, #204]	; (8009a80 <RCCEx_PLL2_Config+0x128>)
 80099b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80099b6:	4b33      	ldr	r3, [pc, #204]	; (8009a84 <RCCEx_PLL2_Config+0x12c>)
 80099b8:	4013      	ands	r3, r2
 80099ba:	687a      	ldr	r2, [r7, #4]
 80099bc:	6892      	ldr	r2, [r2, #8]
 80099be:	3a01      	subs	r2, #1
 80099c0:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80099c4:	687a      	ldr	r2, [r7, #4]
 80099c6:	68d2      	ldr	r2, [r2, #12]
 80099c8:	3a01      	subs	r2, #1
 80099ca:	0252      	lsls	r2, r2, #9
 80099cc:	b292      	uxth	r2, r2
 80099ce:	4311      	orrs	r1, r2
 80099d0:	687a      	ldr	r2, [r7, #4]
 80099d2:	6912      	ldr	r2, [r2, #16]
 80099d4:	3a01      	subs	r2, #1
 80099d6:	0412      	lsls	r2, r2, #16
 80099d8:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80099dc:	4311      	orrs	r1, r2
 80099de:	687a      	ldr	r2, [r7, #4]
 80099e0:	6952      	ldr	r2, [r2, #20]
 80099e2:	3a01      	subs	r2, #1
 80099e4:	0612      	lsls	r2, r2, #24
 80099e6:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80099ea:	430a      	orrs	r2, r1
 80099ec:	4924      	ldr	r1, [pc, #144]	; (8009a80 <RCCEx_PLL2_Config+0x128>)
 80099ee:	4313      	orrs	r3, r2
 80099f0:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 80099f2:	4b23      	ldr	r3, [pc, #140]	; (8009a80 <RCCEx_PLL2_Config+0x128>)
 80099f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099f6:	f023 020c 	bic.w	r2, r3, #12
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	699b      	ldr	r3, [r3, #24]
 80099fe:	4920      	ldr	r1, [pc, #128]	; (8009a80 <RCCEx_PLL2_Config+0x128>)
 8009a00:	4313      	orrs	r3, r2
 8009a02:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8009a04:	4b1e      	ldr	r3, [pc, #120]	; (8009a80 <RCCEx_PLL2_Config+0x128>)
 8009a06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	6a1b      	ldr	r3, [r3, #32]
 8009a0c:	491c      	ldr	r1, [pc, #112]	; (8009a80 <RCCEx_PLL2_Config+0x128>)
 8009a0e:	4313      	orrs	r3, r2
 8009a10:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8009a12:	4b1b      	ldr	r3, [pc, #108]	; (8009a80 <RCCEx_PLL2_Config+0x128>)
 8009a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a16:	4a1a      	ldr	r2, [pc, #104]	; (8009a80 <RCCEx_PLL2_Config+0x128>)
 8009a18:	f023 0310 	bic.w	r3, r3, #16
 8009a1c:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009a1e:	4b18      	ldr	r3, [pc, #96]	; (8009a80 <RCCEx_PLL2_Config+0x128>)
 8009a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009a26:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8009a2a:	687a      	ldr	r2, [r7, #4]
 8009a2c:	69d2      	ldr	r2, [r2, #28]
 8009a2e:	00d2      	lsls	r2, r2, #3
 8009a30:	4913      	ldr	r1, [pc, #76]	; (8009a80 <RCCEx_PLL2_Config+0x128>)
 8009a32:	4313      	orrs	r3, r2
 8009a34:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8009a36:	4b12      	ldr	r3, [pc, #72]	; (8009a80 <RCCEx_PLL2_Config+0x128>)
 8009a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a3a:	4a11      	ldr	r2, [pc, #68]	; (8009a80 <RCCEx_PLL2_Config+0x128>)
 8009a3c:	f043 0310 	orr.w	r3, r3, #16
 8009a40:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8009a42:	4b0f      	ldr	r3, [pc, #60]	; (8009a80 <RCCEx_PLL2_Config+0x128>)
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	4a0e      	ldr	r2, [pc, #56]	; (8009a80 <RCCEx_PLL2_Config+0x128>)
 8009a48:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009a4c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009a4e:	f7f8 faeb 	bl	8002028 <HAL_GetTick>
 8009a52:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009a54:	e008      	b.n	8009a68 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009a56:	f7f8 fae7 	bl	8002028 <HAL_GetTick>
 8009a5a:	4602      	mov	r2, r0
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	1ad3      	subs	r3, r2, r3
 8009a60:	2b02      	cmp	r3, #2
 8009a62:	d901      	bls.n	8009a68 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8009a64:	2303      	movs	r3, #3
 8009a66:	e006      	b.n	8009a76 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009a68:	4b05      	ldr	r3, [pc, #20]	; (8009a80 <RCCEx_PLL2_Config+0x128>)
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d0f0      	beq.n	8009a56 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8009a74:	2300      	movs	r3, #0

}
 8009a76:	4618      	mov	r0, r3
 8009a78:	3710      	adds	r7, #16
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	bd80      	pop	{r7, pc}
 8009a7e:	bf00      	nop
 8009a80:	46020c00 	.word	0x46020c00
 8009a84:	80800000 	.word	0x80800000

08009a88 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b084      	sub	sp, #16
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8009a90:	4b47      	ldr	r3, [pc, #284]	; (8009bb0 <RCCEx_PLL3_Config+0x128>)
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	4a46      	ldr	r2, [pc, #280]	; (8009bb0 <RCCEx_PLL3_Config+0x128>)
 8009a96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009a9a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009a9c:	f7f8 fac4 	bl	8002028 <HAL_GetTick>
 8009aa0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009aa2:	e008      	b.n	8009ab6 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009aa4:	f7f8 fac0 	bl	8002028 <HAL_GetTick>
 8009aa8:	4602      	mov	r2, r0
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	1ad3      	subs	r3, r2, r3
 8009aae:	2b02      	cmp	r3, #2
 8009ab0:	d901      	bls.n	8009ab6 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8009ab2:	2303      	movs	r3, #3
 8009ab4:	e077      	b.n	8009ba6 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009ab6:	4b3e      	ldr	r3, [pc, #248]	; (8009bb0 <RCCEx_PLL3_Config+0x128>)
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d1f0      	bne.n	8009aa4 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8009ac2:	4b3b      	ldr	r3, [pc, #236]	; (8009bb0 <RCCEx_PLL3_Config+0x128>)
 8009ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ac6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009aca:	f023 0303 	bic.w	r3, r3, #3
 8009ace:	687a      	ldr	r2, [r7, #4]
 8009ad0:	6811      	ldr	r1, [r2, #0]
 8009ad2:	687a      	ldr	r2, [r7, #4]
 8009ad4:	6852      	ldr	r2, [r2, #4]
 8009ad6:	3a01      	subs	r2, #1
 8009ad8:	0212      	lsls	r2, r2, #8
 8009ada:	430a      	orrs	r2, r1
 8009adc:	4934      	ldr	r1, [pc, #208]	; (8009bb0 <RCCEx_PLL3_Config+0x128>)
 8009ade:	4313      	orrs	r3, r2
 8009ae0:	630b      	str	r3, [r1, #48]	; 0x30
 8009ae2:	4b33      	ldr	r3, [pc, #204]	; (8009bb0 <RCCEx_PLL3_Config+0x128>)
 8009ae4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009ae6:	4b33      	ldr	r3, [pc, #204]	; (8009bb4 <RCCEx_PLL3_Config+0x12c>)
 8009ae8:	4013      	ands	r3, r2
 8009aea:	687a      	ldr	r2, [r7, #4]
 8009aec:	6892      	ldr	r2, [r2, #8]
 8009aee:	3a01      	subs	r2, #1
 8009af0:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8009af4:	687a      	ldr	r2, [r7, #4]
 8009af6:	68d2      	ldr	r2, [r2, #12]
 8009af8:	3a01      	subs	r2, #1
 8009afa:	0252      	lsls	r2, r2, #9
 8009afc:	b292      	uxth	r2, r2
 8009afe:	4311      	orrs	r1, r2
 8009b00:	687a      	ldr	r2, [r7, #4]
 8009b02:	6912      	ldr	r2, [r2, #16]
 8009b04:	3a01      	subs	r2, #1
 8009b06:	0412      	lsls	r2, r2, #16
 8009b08:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8009b0c:	4311      	orrs	r1, r2
 8009b0e:	687a      	ldr	r2, [r7, #4]
 8009b10:	6952      	ldr	r2, [r2, #20]
 8009b12:	3a01      	subs	r2, #1
 8009b14:	0612      	lsls	r2, r2, #24
 8009b16:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8009b1a:	430a      	orrs	r2, r1
 8009b1c:	4924      	ldr	r1, [pc, #144]	; (8009bb0 <RCCEx_PLL3_Config+0x128>)
 8009b1e:	4313      	orrs	r3, r2
 8009b20:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8009b22:	4b23      	ldr	r3, [pc, #140]	; (8009bb0 <RCCEx_PLL3_Config+0x128>)
 8009b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b26:	f023 020c 	bic.w	r2, r3, #12
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	699b      	ldr	r3, [r3, #24]
 8009b2e:	4920      	ldr	r1, [pc, #128]	; (8009bb0 <RCCEx_PLL3_Config+0x128>)
 8009b30:	4313      	orrs	r3, r2
 8009b32:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8009b34:	4b1e      	ldr	r3, [pc, #120]	; (8009bb0 <RCCEx_PLL3_Config+0x128>)
 8009b36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	6a1b      	ldr	r3, [r3, #32]
 8009b3c:	491c      	ldr	r1, [pc, #112]	; (8009bb0 <RCCEx_PLL3_Config+0x128>)
 8009b3e:	4313      	orrs	r3, r2
 8009b40:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8009b42:	4b1b      	ldr	r3, [pc, #108]	; (8009bb0 <RCCEx_PLL3_Config+0x128>)
 8009b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b46:	4a1a      	ldr	r2, [pc, #104]	; (8009bb0 <RCCEx_PLL3_Config+0x128>)
 8009b48:	f023 0310 	bic.w	r3, r3, #16
 8009b4c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009b4e:	4b18      	ldr	r3, [pc, #96]	; (8009bb0 <RCCEx_PLL3_Config+0x128>)
 8009b50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009b56:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8009b5a:	687a      	ldr	r2, [r7, #4]
 8009b5c:	69d2      	ldr	r2, [r2, #28]
 8009b5e:	00d2      	lsls	r2, r2, #3
 8009b60:	4913      	ldr	r1, [pc, #76]	; (8009bb0 <RCCEx_PLL3_Config+0x128>)
 8009b62:	4313      	orrs	r3, r2
 8009b64:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8009b66:	4b12      	ldr	r3, [pc, #72]	; (8009bb0 <RCCEx_PLL3_Config+0x128>)
 8009b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b6a:	4a11      	ldr	r2, [pc, #68]	; (8009bb0 <RCCEx_PLL3_Config+0x128>)
 8009b6c:	f043 0310 	orr.w	r3, r3, #16
 8009b70:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8009b72:	4b0f      	ldr	r3, [pc, #60]	; (8009bb0 <RCCEx_PLL3_Config+0x128>)
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	4a0e      	ldr	r2, [pc, #56]	; (8009bb0 <RCCEx_PLL3_Config+0x128>)
 8009b78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009b7c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009b7e:	f7f8 fa53 	bl	8002028 <HAL_GetTick>
 8009b82:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009b84:	e008      	b.n	8009b98 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009b86:	f7f8 fa4f 	bl	8002028 <HAL_GetTick>
 8009b8a:	4602      	mov	r2, r0
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	1ad3      	subs	r3, r2, r3
 8009b90:	2b02      	cmp	r3, #2
 8009b92:	d901      	bls.n	8009b98 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8009b94:	2303      	movs	r3, #3
 8009b96:	e006      	b.n	8009ba6 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009b98:	4b05      	ldr	r3, [pc, #20]	; (8009bb0 <RCCEx_PLL3_Config+0x128>)
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d0f0      	beq.n	8009b86 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8009ba4:	2300      	movs	r3, #0
}
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	3710      	adds	r7, #16
 8009baa:	46bd      	mov	sp, r7
 8009bac:	bd80      	pop	{r7, pc}
 8009bae:	bf00      	nop
 8009bb0:	46020c00 	.word	0x46020c00
 8009bb4:	80800000 	.word	0x80800000

08009bb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b082      	sub	sp, #8
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d101      	bne.n	8009bca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009bc6:	2301      	movs	r3, #1
 8009bc8:	e054      	b.n	8009c74 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009bd0:	b2db      	uxtb	r3, r3
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d111      	bne.n	8009bfa <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	2200      	movs	r2, #0
 8009bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	f000 fbc6 	bl	800a370 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d102      	bne.n	8009bf2 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	4a23      	ldr	r2, [pc, #140]	; (8009c7c <HAL_TIM_Base_Init+0xc4>)
 8009bf0:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009bf6:	6878      	ldr	r0, [r7, #4]
 8009bf8:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	2202      	movs	r2, #2
 8009bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681a      	ldr	r2, [r3, #0]
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	3304      	adds	r3, #4
 8009c0a:	4619      	mov	r1, r3
 8009c0c:	4610      	mov	r0, r2
 8009c0e:	f000 fab5 	bl	800a17c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	2201      	movs	r2, #1
 8009c16:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	2201      	movs	r2, #1
 8009c1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	2201      	movs	r2, #1
 8009c26:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	2201      	movs	r2, #1
 8009c2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	2201      	movs	r2, #1
 8009c36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	2201      	movs	r2, #1
 8009c3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	2201      	movs	r2, #1
 8009c46:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	2201      	movs	r2, #1
 8009c4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	2201      	movs	r2, #1
 8009c56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	2201      	movs	r2, #1
 8009c5e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	2201      	movs	r2, #1
 8009c66:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	2201      	movs	r2, #1
 8009c6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009c72:	2300      	movs	r3, #0
}
 8009c74:	4618      	mov	r0, r3
 8009c76:	3708      	adds	r7, #8
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	bd80      	pop	{r7, pc}
 8009c7c:	08009c81 	.word	0x08009c81

08009c80 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8009c80:	b480      	push	{r7}
 8009c82:	b083      	sub	sp, #12
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8009c88:	bf00      	nop
 8009c8a:	370c      	adds	r7, #12
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c92:	4770      	bx	lr

08009c94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009c94:	b480      	push	{r7}
 8009c96:	b085      	sub	sp, #20
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ca2:	b2db      	uxtb	r3, r3
 8009ca4:	2b01      	cmp	r3, #1
 8009ca6:	d001      	beq.n	8009cac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009ca8:	2301      	movs	r3, #1
 8009caa:	e072      	b.n	8009d92 <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2202      	movs	r2, #2
 8009cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	68da      	ldr	r2, [r3, #12]
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	f042 0201 	orr.w	r2, r2, #1
 8009cc2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	4a35      	ldr	r2, [pc, #212]	; (8009da0 <HAL_TIM_Base_Start_IT+0x10c>)
 8009cca:	4293      	cmp	r3, r2
 8009ccc:	d040      	beq.n	8009d50 <HAL_TIM_Base_Start_IT+0xbc>
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	4a34      	ldr	r2, [pc, #208]	; (8009da4 <HAL_TIM_Base_Start_IT+0x110>)
 8009cd4:	4293      	cmp	r3, r2
 8009cd6:	d03b      	beq.n	8009d50 <HAL_TIM_Base_Start_IT+0xbc>
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ce0:	d036      	beq.n	8009d50 <HAL_TIM_Base_Start_IT+0xbc>
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009cea:	d031      	beq.n	8009d50 <HAL_TIM_Base_Start_IT+0xbc>
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	4a2d      	ldr	r2, [pc, #180]	; (8009da8 <HAL_TIM_Base_Start_IT+0x114>)
 8009cf2:	4293      	cmp	r3, r2
 8009cf4:	d02c      	beq.n	8009d50 <HAL_TIM_Base_Start_IT+0xbc>
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	4a2c      	ldr	r2, [pc, #176]	; (8009dac <HAL_TIM_Base_Start_IT+0x118>)
 8009cfc:	4293      	cmp	r3, r2
 8009cfe:	d027      	beq.n	8009d50 <HAL_TIM_Base_Start_IT+0xbc>
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	4a2a      	ldr	r2, [pc, #168]	; (8009db0 <HAL_TIM_Base_Start_IT+0x11c>)
 8009d06:	4293      	cmp	r3, r2
 8009d08:	d022      	beq.n	8009d50 <HAL_TIM_Base_Start_IT+0xbc>
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	4a29      	ldr	r2, [pc, #164]	; (8009db4 <HAL_TIM_Base_Start_IT+0x120>)
 8009d10:	4293      	cmp	r3, r2
 8009d12:	d01d      	beq.n	8009d50 <HAL_TIM_Base_Start_IT+0xbc>
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	4a27      	ldr	r2, [pc, #156]	; (8009db8 <HAL_TIM_Base_Start_IT+0x124>)
 8009d1a:	4293      	cmp	r3, r2
 8009d1c:	d018      	beq.n	8009d50 <HAL_TIM_Base_Start_IT+0xbc>
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	4a26      	ldr	r2, [pc, #152]	; (8009dbc <HAL_TIM_Base_Start_IT+0x128>)
 8009d24:	4293      	cmp	r3, r2
 8009d26:	d013      	beq.n	8009d50 <HAL_TIM_Base_Start_IT+0xbc>
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	4a24      	ldr	r2, [pc, #144]	; (8009dc0 <HAL_TIM_Base_Start_IT+0x12c>)
 8009d2e:	4293      	cmp	r3, r2
 8009d30:	d00e      	beq.n	8009d50 <HAL_TIM_Base_Start_IT+0xbc>
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	4a23      	ldr	r2, [pc, #140]	; (8009dc4 <HAL_TIM_Base_Start_IT+0x130>)
 8009d38:	4293      	cmp	r3, r2
 8009d3a:	d009      	beq.n	8009d50 <HAL_TIM_Base_Start_IT+0xbc>
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	4a21      	ldr	r2, [pc, #132]	; (8009dc8 <HAL_TIM_Base_Start_IT+0x134>)
 8009d42:	4293      	cmp	r3, r2
 8009d44:	d004      	beq.n	8009d50 <HAL_TIM_Base_Start_IT+0xbc>
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	4a20      	ldr	r2, [pc, #128]	; (8009dcc <HAL_TIM_Base_Start_IT+0x138>)
 8009d4c:	4293      	cmp	r3, r2
 8009d4e:	d115      	bne.n	8009d7c <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	689a      	ldr	r2, [r3, #8]
 8009d56:	4b1e      	ldr	r3, [pc, #120]	; (8009dd0 <HAL_TIM_Base_Start_IT+0x13c>)
 8009d58:	4013      	ands	r3, r2
 8009d5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	2b06      	cmp	r3, #6
 8009d60:	d015      	beq.n	8009d8e <HAL_TIM_Base_Start_IT+0xfa>
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d68:	d011      	beq.n	8009d8e <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	681a      	ldr	r2, [r3, #0]
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	f042 0201 	orr.w	r2, r2, #1
 8009d78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d7a:	e008      	b.n	8009d8e <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	681a      	ldr	r2, [r3, #0]
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	f042 0201 	orr.w	r2, r2, #1
 8009d8a:	601a      	str	r2, [r3, #0]
 8009d8c:	e000      	b.n	8009d90 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d8e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009d90:	2300      	movs	r3, #0
}
 8009d92:	4618      	mov	r0, r3
 8009d94:	3714      	adds	r7, #20
 8009d96:	46bd      	mov	sp, r7
 8009d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9c:	4770      	bx	lr
 8009d9e:	bf00      	nop
 8009da0:	40012c00 	.word	0x40012c00
 8009da4:	50012c00 	.word	0x50012c00
 8009da8:	40000400 	.word	0x40000400
 8009dac:	50000400 	.word	0x50000400
 8009db0:	40000800 	.word	0x40000800
 8009db4:	50000800 	.word	0x50000800
 8009db8:	40000c00 	.word	0x40000c00
 8009dbc:	50000c00 	.word	0x50000c00
 8009dc0:	40013400 	.word	0x40013400
 8009dc4:	50013400 	.word	0x50013400
 8009dc8:	40014000 	.word	0x40014000
 8009dcc:	50014000 	.word	0x50014000
 8009dd0:	00010007 	.word	0x00010007

08009dd4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b084      	sub	sp, #16
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	68db      	ldr	r3, [r3, #12]
 8009de2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	691b      	ldr	r3, [r3, #16]
 8009dea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009dec:	68bb      	ldr	r3, [r7, #8]
 8009dee:	f003 0302 	and.w	r3, r3, #2
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d026      	beq.n	8009e44 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	f003 0302 	and.w	r3, r3, #2
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d021      	beq.n	8009e44 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	f06f 0202 	mvn.w	r2, #2
 8009e08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	2201      	movs	r2, #1
 8009e0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	699b      	ldr	r3, [r3, #24]
 8009e16:	f003 0303 	and.w	r3, r3, #3
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d005      	beq.n	8009e2a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009e24:	6878      	ldr	r0, [r7, #4]
 8009e26:	4798      	blx	r3
 8009e28:	e009      	b.n	8009e3e <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009e30:	6878      	ldr	r0, [r7, #4]
 8009e32:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009e3a:	6878      	ldr	r0, [r7, #4]
 8009e3c:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	2200      	movs	r2, #0
 8009e42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009e44:	68bb      	ldr	r3, [r7, #8]
 8009e46:	f003 0304 	and.w	r3, r3, #4
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d026      	beq.n	8009e9c <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	f003 0304 	and.w	r3, r3, #4
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d021      	beq.n	8009e9c <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	f06f 0204 	mvn.w	r2, #4
 8009e60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	2202      	movs	r2, #2
 8009e66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	699b      	ldr	r3, [r3, #24]
 8009e6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d005      	beq.n	8009e82 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009e7c:	6878      	ldr	r0, [r7, #4]
 8009e7e:	4798      	blx	r3
 8009e80:	e009      	b.n	8009e96 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009e88:	6878      	ldr	r0, [r7, #4]
 8009e8a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009e92:	6878      	ldr	r0, [r7, #4]
 8009e94:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	2200      	movs	r2, #0
 8009e9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009e9c:	68bb      	ldr	r3, [r7, #8]
 8009e9e:	f003 0308 	and.w	r3, r3, #8
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d026      	beq.n	8009ef4 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	f003 0308 	and.w	r3, r3, #8
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d021      	beq.n	8009ef4 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	f06f 0208 	mvn.w	r2, #8
 8009eb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	2204      	movs	r2, #4
 8009ebe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	69db      	ldr	r3, [r3, #28]
 8009ec6:	f003 0303 	and.w	r3, r3, #3
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d005      	beq.n	8009eda <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009ed4:	6878      	ldr	r0, [r7, #4]
 8009ed6:	4798      	blx	r3
 8009ed8:	e009      	b.n	8009eee <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009ee0:	6878      	ldr	r0, [r7, #4]
 8009ee2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009eea:	6878      	ldr	r0, [r7, #4]
 8009eec:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009ef4:	68bb      	ldr	r3, [r7, #8]
 8009ef6:	f003 0310 	and.w	r3, r3, #16
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d026      	beq.n	8009f4c <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	f003 0310 	and.w	r3, r3, #16
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d021      	beq.n	8009f4c <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	f06f 0210 	mvn.w	r2, #16
 8009f10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	2208      	movs	r2, #8
 8009f16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	69db      	ldr	r3, [r3, #28]
 8009f1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d005      	beq.n	8009f32 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009f2c:	6878      	ldr	r0, [r7, #4]
 8009f2e:	4798      	blx	r3
 8009f30:	e009      	b.n	8009f46 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009f38:	6878      	ldr	r0, [r7, #4]
 8009f3a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009f42:	6878      	ldr	r0, [r7, #4]
 8009f44:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	2200      	movs	r2, #0
 8009f4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009f4c:	68bb      	ldr	r3, [r7, #8]
 8009f4e:	f003 0301 	and.w	r3, r3, #1
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d00e      	beq.n	8009f74 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	f003 0301 	and.w	r3, r3, #1
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d009      	beq.n	8009f74 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	f06f 0201 	mvn.w	r2, #1
 8009f68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009f70:	6878      	ldr	r0, [r7, #4]
 8009f72:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009f74:	68bb      	ldr	r3, [r7, #8]
 8009f76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d104      	bne.n	8009f88 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009f7e:	68bb      	ldr	r3, [r7, #8]
 8009f80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d00e      	beq.n	8009fa6 <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d009      	beq.n	8009fa6 <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8009f9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009fa2:	6878      	ldr	r0, [r7, #4]
 8009fa4:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009fa6:	68bb      	ldr	r3, [r7, #8]
 8009fa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d00e      	beq.n	8009fce <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d009      	beq.n	8009fce <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009fc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009fca:	6878      	ldr	r0, [r7, #4]
 8009fcc:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009fce:	68bb      	ldr	r3, [r7, #8]
 8009fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d00e      	beq.n	8009ff6 <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d009      	beq.n	8009ff6 <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009fea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ff2:	6878      	ldr	r0, [r7, #4]
 8009ff4:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009ff6:	68bb      	ldr	r3, [r7, #8]
 8009ff8:	f003 0320 	and.w	r3, r3, #32
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d00e      	beq.n	800a01e <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	f003 0320 	and.w	r3, r3, #32
 800a006:	2b00      	cmp	r3, #0
 800a008:	d009      	beq.n	800a01e <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	f06f 0220 	mvn.w	r2, #32
 800a012:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a01a:	6878      	ldr	r0, [r7, #4]
 800a01c:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800a01e:	68bb      	ldr	r3, [r7, #8]
 800a020:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a024:	2b00      	cmp	r3, #0
 800a026:	d00e      	beq.n	800a046 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d009      	beq.n	800a046 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800a03a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800a042:	6878      	ldr	r0, [r7, #4]
 800a044:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800a046:	68bb      	ldr	r3, [r7, #8]
 800a048:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d00e      	beq.n	800a06e <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a056:	2b00      	cmp	r3, #0
 800a058:	d009      	beq.n	800a06e <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800a062:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800a06a:	6878      	ldr	r0, [r7, #4]
 800a06c:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800a06e:	68bb      	ldr	r3, [r7, #8]
 800a070:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a074:	2b00      	cmp	r3, #0
 800a076:	d00e      	beq.n	800a096 <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d009      	beq.n	800a096 <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800a08a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800a092:	6878      	ldr	r0, [r7, #4]
 800a094:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800a096:	68bb      	ldr	r3, [r7, #8]
 800a098:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d00e      	beq.n	800a0be <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d009      	beq.n	800a0be <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800a0b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800a0ba:	6878      	ldr	r0, [r7, #4]
 800a0bc:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a0be:	bf00      	nop
 800a0c0:	3710      	adds	r7, #16
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	bd80      	pop	{r7, pc}

0800a0c6 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a0c6:	b480      	push	{r7}
 800a0c8:	b083      	sub	sp, #12
 800a0ca:	af00      	add	r7, sp, #0
 800a0cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800a0ce:	bf00      	nop
 800a0d0:	370c      	adds	r7, #12
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d8:	4770      	bx	lr

0800a0da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a0da:	b480      	push	{r7}
 800a0dc:	b083      	sub	sp, #12
 800a0de:	af00      	add	r7, sp, #0
 800a0e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a0e2:	bf00      	nop
 800a0e4:	370c      	adds	r7, #12
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ec:	4770      	bx	lr

0800a0ee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a0ee:	b480      	push	{r7}
 800a0f0:	b083      	sub	sp, #12
 800a0f2:	af00      	add	r7, sp, #0
 800a0f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a0f6:	bf00      	nop
 800a0f8:	370c      	adds	r7, #12
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a100:	4770      	bx	lr

0800a102 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a102:	b480      	push	{r7}
 800a104:	b083      	sub	sp, #12
 800a106:	af00      	add	r7, sp, #0
 800a108:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800a10a:	bf00      	nop
 800a10c:	370c      	adds	r7, #12
 800a10e:	46bd      	mov	sp, r7
 800a110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a114:	4770      	bx	lr

0800a116 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a116:	b480      	push	{r7}
 800a118:	b083      	sub	sp, #12
 800a11a:	af00      	add	r7, sp, #0
 800a11c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a11e:	bf00      	nop
 800a120:	370c      	adds	r7, #12
 800a122:	46bd      	mov	sp, r7
 800a124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a128:	4770      	bx	lr

0800a12a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a12a:	b480      	push	{r7}
 800a12c:	b083      	sub	sp, #12
 800a12e:	af00      	add	r7, sp, #0
 800a130:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800a132:	bf00      	nop
 800a134:	370c      	adds	r7, #12
 800a136:	46bd      	mov	sp, r7
 800a138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13c:	4770      	bx	lr

0800a13e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a13e:	b480      	push	{r7}
 800a140:	b083      	sub	sp, #12
 800a142:	af00      	add	r7, sp, #0
 800a144:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a146:	bf00      	nop
 800a148:	370c      	adds	r7, #12
 800a14a:	46bd      	mov	sp, r7
 800a14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a150:	4770      	bx	lr

0800a152 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a152:	b480      	push	{r7}
 800a154:	b083      	sub	sp, #12
 800a156:	af00      	add	r7, sp, #0
 800a158:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800a15a:	bf00      	nop
 800a15c:	370c      	adds	r7, #12
 800a15e:	46bd      	mov	sp, r7
 800a160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a164:	4770      	bx	lr

0800a166 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800a166:	b480      	push	{r7}
 800a168:	b083      	sub	sp, #12
 800a16a:	af00      	add	r7, sp, #0
 800a16c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800a16e:	bf00      	nop
 800a170:	370c      	adds	r7, #12
 800a172:	46bd      	mov	sp, r7
 800a174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a178:	4770      	bx	lr
	...

0800a17c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a17c:	b480      	push	{r7}
 800a17e:	b085      	sub	sp, #20
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
 800a184:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	4a68      	ldr	r2, [pc, #416]	; (800a330 <TIM_Base_SetConfig+0x1b4>)
 800a190:	4293      	cmp	r3, r2
 800a192:	d02b      	beq.n	800a1ec <TIM_Base_SetConfig+0x70>
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	4a67      	ldr	r2, [pc, #412]	; (800a334 <TIM_Base_SetConfig+0x1b8>)
 800a198:	4293      	cmp	r3, r2
 800a19a:	d027      	beq.n	800a1ec <TIM_Base_SetConfig+0x70>
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1a2:	d023      	beq.n	800a1ec <TIM_Base_SetConfig+0x70>
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a1aa:	d01f      	beq.n	800a1ec <TIM_Base_SetConfig+0x70>
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	4a62      	ldr	r2, [pc, #392]	; (800a338 <TIM_Base_SetConfig+0x1bc>)
 800a1b0:	4293      	cmp	r3, r2
 800a1b2:	d01b      	beq.n	800a1ec <TIM_Base_SetConfig+0x70>
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	4a61      	ldr	r2, [pc, #388]	; (800a33c <TIM_Base_SetConfig+0x1c0>)
 800a1b8:	4293      	cmp	r3, r2
 800a1ba:	d017      	beq.n	800a1ec <TIM_Base_SetConfig+0x70>
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	4a60      	ldr	r2, [pc, #384]	; (800a340 <TIM_Base_SetConfig+0x1c4>)
 800a1c0:	4293      	cmp	r3, r2
 800a1c2:	d013      	beq.n	800a1ec <TIM_Base_SetConfig+0x70>
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	4a5f      	ldr	r2, [pc, #380]	; (800a344 <TIM_Base_SetConfig+0x1c8>)
 800a1c8:	4293      	cmp	r3, r2
 800a1ca:	d00f      	beq.n	800a1ec <TIM_Base_SetConfig+0x70>
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	4a5e      	ldr	r2, [pc, #376]	; (800a348 <TIM_Base_SetConfig+0x1cc>)
 800a1d0:	4293      	cmp	r3, r2
 800a1d2:	d00b      	beq.n	800a1ec <TIM_Base_SetConfig+0x70>
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	4a5d      	ldr	r2, [pc, #372]	; (800a34c <TIM_Base_SetConfig+0x1d0>)
 800a1d8:	4293      	cmp	r3, r2
 800a1da:	d007      	beq.n	800a1ec <TIM_Base_SetConfig+0x70>
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	4a5c      	ldr	r2, [pc, #368]	; (800a350 <TIM_Base_SetConfig+0x1d4>)
 800a1e0:	4293      	cmp	r3, r2
 800a1e2:	d003      	beq.n	800a1ec <TIM_Base_SetConfig+0x70>
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	4a5b      	ldr	r2, [pc, #364]	; (800a354 <TIM_Base_SetConfig+0x1d8>)
 800a1e8:	4293      	cmp	r3, r2
 800a1ea:	d108      	bne.n	800a1fe <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a1f4:	683b      	ldr	r3, [r7, #0]
 800a1f6:	685b      	ldr	r3, [r3, #4]
 800a1f8:	68fa      	ldr	r2, [r7, #12]
 800a1fa:	4313      	orrs	r3, r2
 800a1fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	4a4b      	ldr	r2, [pc, #300]	; (800a330 <TIM_Base_SetConfig+0x1b4>)
 800a202:	4293      	cmp	r3, r2
 800a204:	d043      	beq.n	800a28e <TIM_Base_SetConfig+0x112>
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	4a4a      	ldr	r2, [pc, #296]	; (800a334 <TIM_Base_SetConfig+0x1b8>)
 800a20a:	4293      	cmp	r3, r2
 800a20c:	d03f      	beq.n	800a28e <TIM_Base_SetConfig+0x112>
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a214:	d03b      	beq.n	800a28e <TIM_Base_SetConfig+0x112>
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a21c:	d037      	beq.n	800a28e <TIM_Base_SetConfig+0x112>
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	4a45      	ldr	r2, [pc, #276]	; (800a338 <TIM_Base_SetConfig+0x1bc>)
 800a222:	4293      	cmp	r3, r2
 800a224:	d033      	beq.n	800a28e <TIM_Base_SetConfig+0x112>
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	4a44      	ldr	r2, [pc, #272]	; (800a33c <TIM_Base_SetConfig+0x1c0>)
 800a22a:	4293      	cmp	r3, r2
 800a22c:	d02f      	beq.n	800a28e <TIM_Base_SetConfig+0x112>
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	4a43      	ldr	r2, [pc, #268]	; (800a340 <TIM_Base_SetConfig+0x1c4>)
 800a232:	4293      	cmp	r3, r2
 800a234:	d02b      	beq.n	800a28e <TIM_Base_SetConfig+0x112>
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	4a42      	ldr	r2, [pc, #264]	; (800a344 <TIM_Base_SetConfig+0x1c8>)
 800a23a:	4293      	cmp	r3, r2
 800a23c:	d027      	beq.n	800a28e <TIM_Base_SetConfig+0x112>
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	4a41      	ldr	r2, [pc, #260]	; (800a348 <TIM_Base_SetConfig+0x1cc>)
 800a242:	4293      	cmp	r3, r2
 800a244:	d023      	beq.n	800a28e <TIM_Base_SetConfig+0x112>
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	4a40      	ldr	r2, [pc, #256]	; (800a34c <TIM_Base_SetConfig+0x1d0>)
 800a24a:	4293      	cmp	r3, r2
 800a24c:	d01f      	beq.n	800a28e <TIM_Base_SetConfig+0x112>
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	4a3f      	ldr	r2, [pc, #252]	; (800a350 <TIM_Base_SetConfig+0x1d4>)
 800a252:	4293      	cmp	r3, r2
 800a254:	d01b      	beq.n	800a28e <TIM_Base_SetConfig+0x112>
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	4a3e      	ldr	r2, [pc, #248]	; (800a354 <TIM_Base_SetConfig+0x1d8>)
 800a25a:	4293      	cmp	r3, r2
 800a25c:	d017      	beq.n	800a28e <TIM_Base_SetConfig+0x112>
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	4a3d      	ldr	r2, [pc, #244]	; (800a358 <TIM_Base_SetConfig+0x1dc>)
 800a262:	4293      	cmp	r3, r2
 800a264:	d013      	beq.n	800a28e <TIM_Base_SetConfig+0x112>
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	4a3c      	ldr	r2, [pc, #240]	; (800a35c <TIM_Base_SetConfig+0x1e0>)
 800a26a:	4293      	cmp	r3, r2
 800a26c:	d00f      	beq.n	800a28e <TIM_Base_SetConfig+0x112>
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	4a3b      	ldr	r2, [pc, #236]	; (800a360 <TIM_Base_SetConfig+0x1e4>)
 800a272:	4293      	cmp	r3, r2
 800a274:	d00b      	beq.n	800a28e <TIM_Base_SetConfig+0x112>
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	4a3a      	ldr	r2, [pc, #232]	; (800a364 <TIM_Base_SetConfig+0x1e8>)
 800a27a:	4293      	cmp	r3, r2
 800a27c:	d007      	beq.n	800a28e <TIM_Base_SetConfig+0x112>
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	4a39      	ldr	r2, [pc, #228]	; (800a368 <TIM_Base_SetConfig+0x1ec>)
 800a282:	4293      	cmp	r3, r2
 800a284:	d003      	beq.n	800a28e <TIM_Base_SetConfig+0x112>
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	4a38      	ldr	r2, [pc, #224]	; (800a36c <TIM_Base_SetConfig+0x1f0>)
 800a28a:	4293      	cmp	r3, r2
 800a28c:	d108      	bne.n	800a2a0 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a294:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	68db      	ldr	r3, [r3, #12]
 800a29a:	68fa      	ldr	r2, [r7, #12]
 800a29c:	4313      	orrs	r3, r2
 800a29e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a2a6:	683b      	ldr	r3, [r7, #0]
 800a2a8:	695b      	ldr	r3, [r3, #20]
 800a2aa:	4313      	orrs	r3, r2
 800a2ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	68fa      	ldr	r2, [r7, #12]
 800a2b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	689a      	ldr	r2, [r3, #8]
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a2bc:	683b      	ldr	r3, [r7, #0]
 800a2be:	681a      	ldr	r2, [r3, #0]
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	4a1a      	ldr	r2, [pc, #104]	; (800a330 <TIM_Base_SetConfig+0x1b4>)
 800a2c8:	4293      	cmp	r3, r2
 800a2ca:	d023      	beq.n	800a314 <TIM_Base_SetConfig+0x198>
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	4a19      	ldr	r2, [pc, #100]	; (800a334 <TIM_Base_SetConfig+0x1b8>)
 800a2d0:	4293      	cmp	r3, r2
 800a2d2:	d01f      	beq.n	800a314 <TIM_Base_SetConfig+0x198>
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	4a1e      	ldr	r2, [pc, #120]	; (800a350 <TIM_Base_SetConfig+0x1d4>)
 800a2d8:	4293      	cmp	r3, r2
 800a2da:	d01b      	beq.n	800a314 <TIM_Base_SetConfig+0x198>
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	4a1d      	ldr	r2, [pc, #116]	; (800a354 <TIM_Base_SetConfig+0x1d8>)
 800a2e0:	4293      	cmp	r3, r2
 800a2e2:	d017      	beq.n	800a314 <TIM_Base_SetConfig+0x198>
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	4a1c      	ldr	r2, [pc, #112]	; (800a358 <TIM_Base_SetConfig+0x1dc>)
 800a2e8:	4293      	cmp	r3, r2
 800a2ea:	d013      	beq.n	800a314 <TIM_Base_SetConfig+0x198>
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	4a1b      	ldr	r2, [pc, #108]	; (800a35c <TIM_Base_SetConfig+0x1e0>)
 800a2f0:	4293      	cmp	r3, r2
 800a2f2:	d00f      	beq.n	800a314 <TIM_Base_SetConfig+0x198>
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	4a1a      	ldr	r2, [pc, #104]	; (800a360 <TIM_Base_SetConfig+0x1e4>)
 800a2f8:	4293      	cmp	r3, r2
 800a2fa:	d00b      	beq.n	800a314 <TIM_Base_SetConfig+0x198>
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	4a19      	ldr	r2, [pc, #100]	; (800a364 <TIM_Base_SetConfig+0x1e8>)
 800a300:	4293      	cmp	r3, r2
 800a302:	d007      	beq.n	800a314 <TIM_Base_SetConfig+0x198>
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	4a18      	ldr	r2, [pc, #96]	; (800a368 <TIM_Base_SetConfig+0x1ec>)
 800a308:	4293      	cmp	r3, r2
 800a30a:	d003      	beq.n	800a314 <TIM_Base_SetConfig+0x198>
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	4a17      	ldr	r2, [pc, #92]	; (800a36c <TIM_Base_SetConfig+0x1f0>)
 800a310:	4293      	cmp	r3, r2
 800a312:	d103      	bne.n	800a31c <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a314:	683b      	ldr	r3, [r7, #0]
 800a316:	691a      	ldr	r2, [r3, #16]
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	2201      	movs	r2, #1
 800a320:	615a      	str	r2, [r3, #20]
}
 800a322:	bf00      	nop
 800a324:	3714      	adds	r7, #20
 800a326:	46bd      	mov	sp, r7
 800a328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32c:	4770      	bx	lr
 800a32e:	bf00      	nop
 800a330:	40012c00 	.word	0x40012c00
 800a334:	50012c00 	.word	0x50012c00
 800a338:	40000400 	.word	0x40000400
 800a33c:	50000400 	.word	0x50000400
 800a340:	40000800 	.word	0x40000800
 800a344:	50000800 	.word	0x50000800
 800a348:	40000c00 	.word	0x40000c00
 800a34c:	50000c00 	.word	0x50000c00
 800a350:	40013400 	.word	0x40013400
 800a354:	50013400 	.word	0x50013400
 800a358:	40014000 	.word	0x40014000
 800a35c:	50014000 	.word	0x50014000
 800a360:	40014400 	.word	0x40014400
 800a364:	50014400 	.word	0x50014400
 800a368:	40014800 	.word	0x40014800
 800a36c:	50014800 	.word	0x50014800

0800a370 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800a370:	b480      	push	{r7}
 800a372:	b083      	sub	sp, #12
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	4a26      	ldr	r2, [pc, #152]	; (800a414 <TIM_ResetCallback+0xa4>)
 800a37c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	4a25      	ldr	r2, [pc, #148]	; (800a418 <TIM_ResetCallback+0xa8>)
 800a384:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	4a24      	ldr	r2, [pc, #144]	; (800a41c <TIM_ResetCallback+0xac>)
 800a38c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	4a23      	ldr	r2, [pc, #140]	; (800a420 <TIM_ResetCallback+0xb0>)
 800a394:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	4a22      	ldr	r2, [pc, #136]	; (800a424 <TIM_ResetCallback+0xb4>)
 800a39c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	4a21      	ldr	r2, [pc, #132]	; (800a428 <TIM_ResetCallback+0xb8>)
 800a3a4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	4a20      	ldr	r2, [pc, #128]	; (800a42c <TIM_ResetCallback+0xbc>)
 800a3ac:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	4a1f      	ldr	r2, [pc, #124]	; (800a430 <TIM_ResetCallback+0xc0>)
 800a3b4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	4a1e      	ldr	r2, [pc, #120]	; (800a434 <TIM_ResetCallback+0xc4>)
 800a3bc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	4a1d      	ldr	r2, [pc, #116]	; (800a438 <TIM_ResetCallback+0xc8>)
 800a3c4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	4a1c      	ldr	r2, [pc, #112]	; (800a43c <TIM_ResetCallback+0xcc>)
 800a3cc:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	4a1b      	ldr	r2, [pc, #108]	; (800a440 <TIM_ResetCallback+0xd0>)
 800a3d4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	4a1a      	ldr	r2, [pc, #104]	; (800a444 <TIM_ResetCallback+0xd4>)
 800a3dc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	4a19      	ldr	r2, [pc, #100]	; (800a448 <TIM_ResetCallback+0xd8>)
 800a3e4:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	4a18      	ldr	r2, [pc, #96]	; (800a44c <TIM_ResetCallback+0xdc>)
 800a3ec:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	4a17      	ldr	r2, [pc, #92]	; (800a450 <TIM_ResetCallback+0xe0>)
 800a3f4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	4a16      	ldr	r2, [pc, #88]	; (800a454 <TIM_ResetCallback+0xe4>)
 800a3fc:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	4a15      	ldr	r2, [pc, #84]	; (800a458 <TIM_ResetCallback+0xe8>)
 800a404:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
 800a408:	bf00      	nop
 800a40a:	370c      	adds	r7, #12
 800a40c:	46bd      	mov	sp, r7
 800a40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a412:	4770      	bx	lr
 800a414:	08000c5d 	.word	0x08000c5d
 800a418:	0800a0c7 	.word	0x0800a0c7
 800a41c:	0800a13f 	.word	0x0800a13f
 800a420:	0800a153 	.word	0x0800a153
 800a424:	0800a0ef 	.word	0x0800a0ef
 800a428:	0800a103 	.word	0x0800a103
 800a42c:	0800a0db 	.word	0x0800a0db
 800a430:	0800a117 	.word	0x0800a117
 800a434:	0800a12b 	.word	0x0800a12b
 800a438:	0800a167 	.word	0x0800a167
 800a43c:	0800a45d 	.word	0x0800a45d
 800a440:	0800a471 	.word	0x0800a471
 800a444:	0800a485 	.word	0x0800a485
 800a448:	0800a499 	.word	0x0800a499
 800a44c:	0800a4ad 	.word	0x0800a4ad
 800a450:	0800a4c1 	.word	0x0800a4c1
 800a454:	0800a4d5 	.word	0x0800a4d5
 800a458:	0800a4e9 	.word	0x0800a4e9

0800a45c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a45c:	b480      	push	{r7}
 800a45e:	b083      	sub	sp, #12
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a464:	bf00      	nop
 800a466:	370c      	adds	r7, #12
 800a468:	46bd      	mov	sp, r7
 800a46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46e:	4770      	bx	lr

0800a470 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a470:	b480      	push	{r7}
 800a472:	b083      	sub	sp, #12
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800a478:	bf00      	nop
 800a47a:	370c      	adds	r7, #12
 800a47c:	46bd      	mov	sp, r7
 800a47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a482:	4770      	bx	lr

0800a484 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a484:	b480      	push	{r7}
 800a486:	b083      	sub	sp, #12
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a48c:	bf00      	nop
 800a48e:	370c      	adds	r7, #12
 800a490:	46bd      	mov	sp, r7
 800a492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a496:	4770      	bx	lr

0800a498 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a498:	b480      	push	{r7}
 800a49a:	b083      	sub	sp, #12
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a4a0:	bf00      	nop
 800a4a2:	370c      	adds	r7, #12
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4aa:	4770      	bx	lr

0800a4ac <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800a4ac:	b480      	push	{r7}
 800a4ae:	b083      	sub	sp, #12
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800a4b4:	bf00      	nop
 800a4b6:	370c      	adds	r7, #12
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4be:	4770      	bx	lr

0800a4c0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800a4c0:	b480      	push	{r7}
 800a4c2:	b083      	sub	sp, #12
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800a4c8:	bf00      	nop
 800a4ca:	370c      	adds	r7, #12
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d2:	4770      	bx	lr

0800a4d4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800a4d4:	b480      	push	{r7}
 800a4d6:	b083      	sub	sp, #12
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800a4dc:	bf00      	nop
 800a4de:	370c      	adds	r7, #12
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e6:	4770      	bx	lr

0800a4e8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800a4e8:	b480      	push	{r7}
 800a4ea:	b083      	sub	sp, #12
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800a4f0:	bf00      	nop
 800a4f2:	370c      	adds	r7, #12
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fa:	4770      	bx	lr

0800a4fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b082      	sub	sp, #8
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d101      	bne.n	800a50e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a50a:	2301      	movs	r3, #1
 800a50c:	e050      	b.n	800a5b0 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a514:	2b00      	cmp	r3, #0
 800a516:	d114      	bne.n	800a542 <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2200      	movs	r2, #0
 800a51c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800a520:	6878      	ldr	r0, [r7, #4]
 800a522:	f000 f945 	bl	800a7b0 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d103      	bne.n	800a538 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	4a21      	ldr	r2, [pc, #132]	; (800a5b8 <HAL_UART_Init+0xbc>)
 800a534:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800a53e:	6878      	ldr	r0, [r7, #4]
 800a540:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	2224      	movs	r2, #36	; 0x24
 800a546:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	681a      	ldr	r2, [r3, #0]
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	f022 0201 	bic.w	r2, r2, #1
 800a558:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d002      	beq.n	800a568 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 800a562:	6878      	ldr	r0, [r7, #4]
 800a564:	f000 fb12 	bl	800ab8c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a568:	6878      	ldr	r0, [r7, #4]
 800a56a:	f000 f96d 	bl	800a848 <UART_SetConfig>
 800a56e:	4603      	mov	r3, r0
 800a570:	2b01      	cmp	r3, #1
 800a572:	d101      	bne.n	800a578 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 800a574:	2301      	movs	r3, #1
 800a576:	e01b      	b.n	800a5b0 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	685a      	ldr	r2, [r3, #4]
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a586:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	689a      	ldr	r2, [r3, #8]
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a596:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	681a      	ldr	r2, [r3, #0]
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	f042 0201 	orr.w	r2, r2, #1
 800a5a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a5a8:	6878      	ldr	r0, [r7, #4]
 800a5aa:	f000 fb91 	bl	800acd0 <UART_CheckIdleState>
 800a5ae:	4603      	mov	r3, r0
}
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	3708      	adds	r7, #8
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	bd80      	pop	{r7, pc}
 800a5b8:	08000f81 	.word	0x08000f81

0800a5bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b08a      	sub	sp, #40	; 0x28
 800a5c0:	af02      	add	r7, sp, #8
 800a5c2:	60f8      	str	r0, [r7, #12]
 800a5c4:	60b9      	str	r1, [r7, #8]
 800a5c6:	603b      	str	r3, [r7, #0]
 800a5c8:	4613      	mov	r3, r2
 800a5ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5d2:	2b20      	cmp	r3, #32
 800a5d4:	f040 808b 	bne.w	800a6ee <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800a5d8:	68bb      	ldr	r3, [r7, #8]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d002      	beq.n	800a5e4 <HAL_UART_Transmit+0x28>
 800a5de:	88fb      	ldrh	r3, [r7, #6]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d101      	bne.n	800a5e8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800a5e4:	2301      	movs	r3, #1
 800a5e6:	e083      	b.n	800a6f0 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	689b      	ldr	r3, [r3, #8]
 800a5ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5f2:	2b80      	cmp	r3, #128	; 0x80
 800a5f4:	d107      	bne.n	800a606 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	689a      	ldr	r2, [r3, #8]
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a604:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	2200      	movs	r2, #0
 800a60a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	2221      	movs	r2, #33	; 0x21
 800a612:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a616:	f7f7 fd07 	bl	8002028 <HAL_GetTick>
 800a61a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	88fa      	ldrh	r2, [r7, #6]
 800a620:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	88fa      	ldrh	r2, [r7, #6]
 800a628:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	689b      	ldr	r3, [r3, #8]
 800a630:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a634:	d108      	bne.n	800a648 <HAL_UART_Transmit+0x8c>
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	691b      	ldr	r3, [r3, #16]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d104      	bne.n	800a648 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 800a63e:	2300      	movs	r3, #0
 800a640:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a642:	68bb      	ldr	r3, [r7, #8]
 800a644:	61bb      	str	r3, [r7, #24]
 800a646:	e003      	b.n	800a650 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 800a648:	68bb      	ldr	r3, [r7, #8]
 800a64a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a64c:	2300      	movs	r3, #0
 800a64e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a650:	e030      	b.n	800a6b4 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a652:	683b      	ldr	r3, [r7, #0]
 800a654:	9300      	str	r3, [sp, #0]
 800a656:	697b      	ldr	r3, [r7, #20]
 800a658:	2200      	movs	r2, #0
 800a65a:	2180      	movs	r1, #128	; 0x80
 800a65c:	68f8      	ldr	r0, [r7, #12]
 800a65e:	f000 fbe1 	bl	800ae24 <UART_WaitOnFlagUntilTimeout>
 800a662:	4603      	mov	r3, r0
 800a664:	2b00      	cmp	r3, #0
 800a666:	d005      	beq.n	800a674 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	2220      	movs	r2, #32
 800a66c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800a670:	2303      	movs	r3, #3
 800a672:	e03d      	b.n	800a6f0 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 800a674:	69fb      	ldr	r3, [r7, #28]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d10b      	bne.n	800a692 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a67a:	69bb      	ldr	r3, [r7, #24]
 800a67c:	881b      	ldrh	r3, [r3, #0]
 800a67e:	461a      	mov	r2, r3
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a688:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a68a:	69bb      	ldr	r3, [r7, #24]
 800a68c:	3302      	adds	r3, #2
 800a68e:	61bb      	str	r3, [r7, #24]
 800a690:	e007      	b.n	800a6a2 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a692:	69fb      	ldr	r3, [r7, #28]
 800a694:	781a      	ldrb	r2, [r3, #0]
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a69c:	69fb      	ldr	r3, [r7, #28]
 800a69e:	3301      	adds	r3, #1
 800a6a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a6a8:	b29b      	uxth	r3, r3
 800a6aa:	3b01      	subs	r3, #1
 800a6ac:	b29a      	uxth	r2, r3
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a6ba:	b29b      	uxth	r3, r3
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d1c8      	bne.n	800a652 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a6c0:	683b      	ldr	r3, [r7, #0]
 800a6c2:	9300      	str	r3, [sp, #0]
 800a6c4:	697b      	ldr	r3, [r7, #20]
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	2140      	movs	r1, #64	; 0x40
 800a6ca:	68f8      	ldr	r0, [r7, #12]
 800a6cc:	f000 fbaa 	bl	800ae24 <UART_WaitOnFlagUntilTimeout>
 800a6d0:	4603      	mov	r3, r0
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d005      	beq.n	800a6e2 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	2220      	movs	r2, #32
 800a6da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800a6de:	2303      	movs	r3, #3
 800a6e0:	e006      	b.n	800a6f0 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	2220      	movs	r2, #32
 800a6e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	e000      	b.n	800a6f0 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 800a6ee:	2302      	movs	r3, #2
  }
}
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	3720      	adds	r7, #32
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	bd80      	pop	{r7, pc}

0800a6f8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a6f8:	b480      	push	{r7}
 800a6fa:	b083      	sub	sp, #12
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a700:	bf00      	nop
 800a702:	370c      	adds	r7, #12
 800a704:	46bd      	mov	sp, r7
 800a706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70a:	4770      	bx	lr

0800a70c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a70c:	b480      	push	{r7}
 800a70e:	b083      	sub	sp, #12
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800a714:	bf00      	nop
 800a716:	370c      	adds	r7, #12
 800a718:	46bd      	mov	sp, r7
 800a71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71e:	4770      	bx	lr

0800a720 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a720:	b480      	push	{r7}
 800a722:	b083      	sub	sp, #12
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800a728:	bf00      	nop
 800a72a:	370c      	adds	r7, #12
 800a72c:	46bd      	mov	sp, r7
 800a72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a732:	4770      	bx	lr

0800a734 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a734:	b480      	push	{r7}
 800a736:	b083      	sub	sp, #12
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800a73c:	bf00      	nop
 800a73e:	370c      	adds	r7, #12
 800a740:	46bd      	mov	sp, r7
 800a742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a746:	4770      	bx	lr

0800a748 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a748:	b480      	push	{r7}
 800a74a:	b083      	sub	sp, #12
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a750:	bf00      	nop
 800a752:	370c      	adds	r7, #12
 800a754:	46bd      	mov	sp, r7
 800a756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75a:	4770      	bx	lr

0800a75c <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800a75c:	b480      	push	{r7}
 800a75e:	b083      	sub	sp, #12
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800a764:	bf00      	nop
 800a766:	370c      	adds	r7, #12
 800a768:	46bd      	mov	sp, r7
 800a76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76e:	4770      	bx	lr

0800a770 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800a770:	b480      	push	{r7}
 800a772:	b083      	sub	sp, #12
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800a778:	bf00      	nop
 800a77a:	370c      	adds	r7, #12
 800a77c:	46bd      	mov	sp, r7
 800a77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a782:	4770      	bx	lr

0800a784 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800a784:	b480      	push	{r7}
 800a786:	b083      	sub	sp, #12
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800a78c:	bf00      	nop
 800a78e:	370c      	adds	r7, #12
 800a790:	46bd      	mov	sp, r7
 800a792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a796:	4770      	bx	lr

0800a798 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a798:	b480      	push	{r7}
 800a79a:	b083      	sub	sp, #12
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
 800a7a0:	460b      	mov	r3, r1
 800a7a2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a7a4:	bf00      	nop
 800a7a6:	370c      	adds	r7, #12
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ae:	4770      	bx	lr

0800a7b0 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800a7b0:	b480      	push	{r7}
 800a7b2:	b083      	sub	sp, #12
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	4a18      	ldr	r2, [pc, #96]	; (800a81c <UART_InitCallbacksToDefault+0x6c>)
 800a7bc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	4a17      	ldr	r2, [pc, #92]	; (800a820 <UART_InitCallbacksToDefault+0x70>)
 800a7c4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	4a16      	ldr	r2, [pc, #88]	; (800a824 <UART_InitCallbacksToDefault+0x74>)
 800a7cc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	4a15      	ldr	r2, [pc, #84]	; (800a828 <UART_InitCallbacksToDefault+0x78>)
 800a7d4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	4a14      	ldr	r2, [pc, #80]	; (800a82c <UART_InitCallbacksToDefault+0x7c>)
 800a7dc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	4a13      	ldr	r2, [pc, #76]	; (800a830 <UART_InitCallbacksToDefault+0x80>)
 800a7e4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	4a12      	ldr	r2, [pc, #72]	; (800a834 <UART_InitCallbacksToDefault+0x84>)
 800a7ec:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	4a11      	ldr	r2, [pc, #68]	; (800a838 <UART_InitCallbacksToDefault+0x88>)
 800a7f4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	4a10      	ldr	r2, [pc, #64]	; (800a83c <UART_InitCallbacksToDefault+0x8c>)
 800a7fc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	4a0f      	ldr	r2, [pc, #60]	; (800a840 <UART_InitCallbacksToDefault+0x90>)
 800a804:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	4a0e      	ldr	r2, [pc, #56]	; (800a844 <UART_InitCallbacksToDefault+0x94>)
 800a80c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc

}
 800a810:	bf00      	nop
 800a812:	370c      	adds	r7, #12
 800a814:	46bd      	mov	sp, r7
 800a816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81a:	4770      	bx	lr
 800a81c:	0800a70d 	.word	0x0800a70d
 800a820:	0800a6f9 	.word	0x0800a6f9
 800a824:	0800a735 	.word	0x0800a735
 800a828:	0800a721 	.word	0x0800a721
 800a82c:	0800a749 	.word	0x0800a749
 800a830:	0800a75d 	.word	0x0800a75d
 800a834:	0800a771 	.word	0x0800a771
 800a838:	0800a785 	.word	0x0800a785
 800a83c:	0800afbf 	.word	0x0800afbf
 800a840:	0800afd3 	.word	0x0800afd3
 800a844:	0800a799 	.word	0x0800a799

0800a848 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a848:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a84c:	b094      	sub	sp, #80	; 0x50
 800a84e:	af00      	add	r7, sp, #0
 800a850:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a852:	2300      	movs	r3, #0
 800a854:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800a858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a85a:	681a      	ldr	r2, [r3, #0]
 800a85c:	4b7e      	ldr	r3, [pc, #504]	; (800aa58 <UART_SetConfig+0x210>)
 800a85e:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a862:	689a      	ldr	r2, [r3, #8]
 800a864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a866:	691b      	ldr	r3, [r3, #16]
 800a868:	431a      	orrs	r2, r3
 800a86a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a86c:	695b      	ldr	r3, [r3, #20]
 800a86e:	431a      	orrs	r2, r3
 800a870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a872:	69db      	ldr	r3, [r3, #28]
 800a874:	4313      	orrs	r3, r2
 800a876:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	4977      	ldr	r1, [pc, #476]	; (800aa5c <UART_SetConfig+0x214>)
 800a880:	4019      	ands	r1, r3
 800a882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a884:	681a      	ldr	r2, [r3, #0]
 800a886:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a888:	430b      	orrs	r3, r1
 800a88a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a88c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	685b      	ldr	r3, [r3, #4]
 800a892:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a898:	68d9      	ldr	r1, [r3, #12]
 800a89a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a89c:	681a      	ldr	r2, [r3, #0]
 800a89e:	ea40 0301 	orr.w	r3, r0, r1
 800a8a2:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a8a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8a6:	699b      	ldr	r3, [r3, #24]
 800a8a8:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a8aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8ac:	681a      	ldr	r2, [r3, #0]
 800a8ae:	4b6a      	ldr	r3, [pc, #424]	; (800aa58 <UART_SetConfig+0x210>)
 800a8b0:	429a      	cmp	r2, r3
 800a8b2:	d009      	beq.n	800a8c8 <UART_SetConfig+0x80>
 800a8b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8b6:	681a      	ldr	r2, [r3, #0]
 800a8b8:	4b69      	ldr	r3, [pc, #420]	; (800aa60 <UART_SetConfig+0x218>)
 800a8ba:	429a      	cmp	r2, r3
 800a8bc:	d004      	beq.n	800a8c8 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a8be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8c0:	6a1a      	ldr	r2, [r3, #32]
 800a8c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a8c4:	4313      	orrs	r3, r2
 800a8c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a8c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	689b      	ldr	r3, [r3, #8]
 800a8ce:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 800a8d2:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800a8d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8d8:	681a      	ldr	r2, [r3, #0]
 800a8da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a8dc:	430b      	orrs	r3, r1
 800a8de:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a8e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8e6:	f023 000f 	bic.w	r0, r3, #15
 800a8ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8ec:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800a8ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8f0:	681a      	ldr	r2, [r3, #0]
 800a8f2:	ea40 0301 	orr.w	r3, r0, r1
 800a8f6:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a8f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8fa:	681a      	ldr	r2, [r3, #0]
 800a8fc:	4b59      	ldr	r3, [pc, #356]	; (800aa64 <UART_SetConfig+0x21c>)
 800a8fe:	429a      	cmp	r2, r3
 800a900:	d102      	bne.n	800a908 <UART_SetConfig+0xc0>
 800a902:	2301      	movs	r3, #1
 800a904:	64bb      	str	r3, [r7, #72]	; 0x48
 800a906:	e029      	b.n	800a95c <UART_SetConfig+0x114>
 800a908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a90a:	681a      	ldr	r2, [r3, #0]
 800a90c:	4b56      	ldr	r3, [pc, #344]	; (800aa68 <UART_SetConfig+0x220>)
 800a90e:	429a      	cmp	r2, r3
 800a910:	d102      	bne.n	800a918 <UART_SetConfig+0xd0>
 800a912:	2302      	movs	r3, #2
 800a914:	64bb      	str	r3, [r7, #72]	; 0x48
 800a916:	e021      	b.n	800a95c <UART_SetConfig+0x114>
 800a918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a91a:	681a      	ldr	r2, [r3, #0]
 800a91c:	4b53      	ldr	r3, [pc, #332]	; (800aa6c <UART_SetConfig+0x224>)
 800a91e:	429a      	cmp	r2, r3
 800a920:	d102      	bne.n	800a928 <UART_SetConfig+0xe0>
 800a922:	2304      	movs	r3, #4
 800a924:	64bb      	str	r3, [r7, #72]	; 0x48
 800a926:	e019      	b.n	800a95c <UART_SetConfig+0x114>
 800a928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a92a:	681a      	ldr	r2, [r3, #0]
 800a92c:	4b50      	ldr	r3, [pc, #320]	; (800aa70 <UART_SetConfig+0x228>)
 800a92e:	429a      	cmp	r2, r3
 800a930:	d102      	bne.n	800a938 <UART_SetConfig+0xf0>
 800a932:	2308      	movs	r3, #8
 800a934:	64bb      	str	r3, [r7, #72]	; 0x48
 800a936:	e011      	b.n	800a95c <UART_SetConfig+0x114>
 800a938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a93a:	681a      	ldr	r2, [r3, #0]
 800a93c:	4b4d      	ldr	r3, [pc, #308]	; (800aa74 <UART_SetConfig+0x22c>)
 800a93e:	429a      	cmp	r2, r3
 800a940:	d102      	bne.n	800a948 <UART_SetConfig+0x100>
 800a942:	2310      	movs	r3, #16
 800a944:	64bb      	str	r3, [r7, #72]	; 0x48
 800a946:	e009      	b.n	800a95c <UART_SetConfig+0x114>
 800a948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a94a:	681a      	ldr	r2, [r3, #0]
 800a94c:	4b42      	ldr	r3, [pc, #264]	; (800aa58 <UART_SetConfig+0x210>)
 800a94e:	429a      	cmp	r2, r3
 800a950:	d102      	bne.n	800a958 <UART_SetConfig+0x110>
 800a952:	2320      	movs	r3, #32
 800a954:	64bb      	str	r3, [r7, #72]	; 0x48
 800a956:	e001      	b.n	800a95c <UART_SetConfig+0x114>
 800a958:	2300      	movs	r3, #0
 800a95a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a95c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a95e:	681a      	ldr	r2, [r3, #0]
 800a960:	4b3d      	ldr	r3, [pc, #244]	; (800aa58 <UART_SetConfig+0x210>)
 800a962:	429a      	cmp	r2, r3
 800a964:	d005      	beq.n	800a972 <UART_SetConfig+0x12a>
 800a966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a968:	681a      	ldr	r2, [r3, #0]
 800a96a:	4b3d      	ldr	r3, [pc, #244]	; (800aa60 <UART_SetConfig+0x218>)
 800a96c:	429a      	cmp	r2, r3
 800a96e:	f040 8085 	bne.w	800aa7c <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800a972:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a974:	2200      	movs	r2, #0
 800a976:	623b      	str	r3, [r7, #32]
 800a978:	627a      	str	r2, [r7, #36]	; 0x24
 800a97a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800a97e:	f7fd fe09 	bl	8008594 <HAL_RCCEx_GetPeriphCLKFreq>
 800a982:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800a984:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a986:	2b00      	cmp	r3, #0
 800a988:	f000 80e8 	beq.w	800ab5c <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a98c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a98e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a990:	4a39      	ldr	r2, [pc, #228]	; (800aa78 <UART_SetConfig+0x230>)
 800a992:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a996:	461a      	mov	r2, r3
 800a998:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a99a:	fbb3 f3f2 	udiv	r3, r3, r2
 800a99e:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a9a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9a2:	685a      	ldr	r2, [r3, #4]
 800a9a4:	4613      	mov	r3, r2
 800a9a6:	005b      	lsls	r3, r3, #1
 800a9a8:	4413      	add	r3, r2
 800a9aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a9ac:	429a      	cmp	r2, r3
 800a9ae:	d305      	bcc.n	800a9bc <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a9b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9b2:	685b      	ldr	r3, [r3, #4]
 800a9b4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a9b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a9b8:	429a      	cmp	r2, r3
 800a9ba:	d903      	bls.n	800a9c4 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 800a9bc:	2301      	movs	r3, #1
 800a9be:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a9c2:	e048      	b.n	800aa56 <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a9c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	61bb      	str	r3, [r7, #24]
 800a9ca:	61fa      	str	r2, [r7, #28]
 800a9cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9d0:	4a29      	ldr	r2, [pc, #164]	; (800aa78 <UART_SetConfig+0x230>)
 800a9d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a9d6:	b29b      	uxth	r3, r3
 800a9d8:	2200      	movs	r2, #0
 800a9da:	613b      	str	r3, [r7, #16]
 800a9dc:	617a      	str	r2, [r7, #20]
 800a9de:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a9e2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a9e6:	f7f5 fd65 	bl	80004b4 <__aeabi_uldivmod>
 800a9ea:	4602      	mov	r2, r0
 800a9ec:	460b      	mov	r3, r1
 800a9ee:	4610      	mov	r0, r2
 800a9f0:	4619      	mov	r1, r3
 800a9f2:	f04f 0200 	mov.w	r2, #0
 800a9f6:	f04f 0300 	mov.w	r3, #0
 800a9fa:	020b      	lsls	r3, r1, #8
 800a9fc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800aa00:	0202      	lsls	r2, r0, #8
 800aa02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800aa04:	6849      	ldr	r1, [r1, #4]
 800aa06:	0849      	lsrs	r1, r1, #1
 800aa08:	2000      	movs	r0, #0
 800aa0a:	460c      	mov	r4, r1
 800aa0c:	4605      	mov	r5, r0
 800aa0e:	eb12 0804 	adds.w	r8, r2, r4
 800aa12:	eb43 0905 	adc.w	r9, r3, r5
 800aa16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa18:	685b      	ldr	r3, [r3, #4]
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	60bb      	str	r3, [r7, #8]
 800aa1e:	60fa      	str	r2, [r7, #12]
 800aa20:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800aa24:	4640      	mov	r0, r8
 800aa26:	4649      	mov	r1, r9
 800aa28:	f7f5 fd44 	bl	80004b4 <__aeabi_uldivmod>
 800aa2c:	4602      	mov	r2, r0
 800aa2e:	460b      	mov	r3, r1
 800aa30:	4613      	mov	r3, r2
 800aa32:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800aa34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aa3a:	d308      	bcc.n	800aa4e <UART_SetConfig+0x206>
 800aa3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aa42:	d204      	bcs.n	800aa4e <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 800aa44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800aa4a:	60da      	str	r2, [r3, #12]
 800aa4c:	e003      	b.n	800aa56 <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 800aa4e:	2301      	movs	r3, #1
 800aa50:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 800aa54:	e082      	b.n	800ab5c <UART_SetConfig+0x314>
 800aa56:	e081      	b.n	800ab5c <UART_SetConfig+0x314>
 800aa58:	46002400 	.word	0x46002400
 800aa5c:	cfff69f3 	.word	0xcfff69f3
 800aa60:	56002400 	.word	0x56002400
 800aa64:	40013800 	.word	0x40013800
 800aa68:	40004400 	.word	0x40004400
 800aa6c:	40004800 	.word	0x40004800
 800aa70:	40004c00 	.word	0x40004c00
 800aa74:	40005000 	.word	0x40005000
 800aa78:	0801ac14 	.word	0x0801ac14
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aa7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa7e:	69db      	ldr	r3, [r3, #28]
 800aa80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aa84:	d13c      	bne.n	800ab00 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800aa86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aa88:	2200      	movs	r2, #0
 800aa8a:	603b      	str	r3, [r7, #0]
 800aa8c:	607a      	str	r2, [r7, #4]
 800aa8e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aa92:	f7fd fd7f 	bl	8008594 <HAL_RCCEx_GetPeriphCLKFreq>
 800aa96:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800aa98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d05e      	beq.n	800ab5c <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aa9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaa2:	4a39      	ldr	r2, [pc, #228]	; (800ab88 <UART_SetConfig+0x340>)
 800aaa4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aaa8:	461a      	mov	r2, r3
 800aaaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aaac:	fbb3 f3f2 	udiv	r3, r3, r2
 800aab0:	005a      	lsls	r2, r3, #1
 800aab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aab4:	685b      	ldr	r3, [r3, #4]
 800aab6:	085b      	lsrs	r3, r3, #1
 800aab8:	441a      	add	r2, r3
 800aaba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aabc:	685b      	ldr	r3, [r3, #4]
 800aabe:	fbb2 f3f3 	udiv	r3, r2, r3
 800aac2:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aac4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aac6:	2b0f      	cmp	r3, #15
 800aac8:	d916      	bls.n	800aaf8 <UART_SetConfig+0x2b0>
 800aaca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aacc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aad0:	d212      	bcs.n	800aaf8 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800aad2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aad4:	b29b      	uxth	r3, r3
 800aad6:	f023 030f 	bic.w	r3, r3, #15
 800aada:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800aadc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aade:	085b      	lsrs	r3, r3, #1
 800aae0:	b29b      	uxth	r3, r3
 800aae2:	f003 0307 	and.w	r3, r3, #7
 800aae6:	b29a      	uxth	r2, r3
 800aae8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800aaea:	4313      	orrs	r3, r2
 800aaec:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 800aaee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800aaf4:	60da      	str	r2, [r3, #12]
 800aaf6:	e031      	b.n	800ab5c <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800aaf8:	2301      	movs	r3, #1
 800aafa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800aafe:	e02d      	b.n	800ab5c <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800ab00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab02:	2200      	movs	r2, #0
 800ab04:	469a      	mov	sl, r3
 800ab06:	4693      	mov	fp, r2
 800ab08:	4650      	mov	r0, sl
 800ab0a:	4659      	mov	r1, fp
 800ab0c:	f7fd fd42 	bl	8008594 <HAL_RCCEx_GetPeriphCLKFreq>
 800ab10:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 800ab12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d021      	beq.n	800ab5c <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ab18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab1c:	4a1a      	ldr	r2, [pc, #104]	; (800ab88 <UART_SetConfig+0x340>)
 800ab1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ab22:	461a      	mov	r2, r3
 800ab24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab26:	fbb3 f2f2 	udiv	r2, r3, r2
 800ab2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab2c:	685b      	ldr	r3, [r3, #4]
 800ab2e:	085b      	lsrs	r3, r3, #1
 800ab30:	441a      	add	r2, r3
 800ab32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab34:	685b      	ldr	r3, [r3, #4]
 800ab36:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab3a:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ab3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab3e:	2b0f      	cmp	r3, #15
 800ab40:	d909      	bls.n	800ab56 <UART_SetConfig+0x30e>
 800ab42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab48:	d205      	bcs.n	800ab56 <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ab4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab4c:	b29a      	uxth	r2, r3
 800ab4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	60da      	str	r2, [r3, #12]
 800ab54:	e002      	b.n	800ab5c <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800ab56:	2301      	movs	r3, #1
 800ab58:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ab5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab5e:	2201      	movs	r2, #1
 800ab60:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800ab64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab66:	2201      	movs	r2, #1
 800ab68:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ab6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab6e:	2200      	movs	r2, #0
 800ab70:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800ab72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab74:	2200      	movs	r2, #0
 800ab76:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800ab78:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	3750      	adds	r7, #80	; 0x50
 800ab80:	46bd      	mov	sp, r7
 800ab82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ab86:	bf00      	nop
 800ab88:	0801ac14 	.word	0x0801ac14

0800ab8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ab8c:	b480      	push	{r7}
 800ab8e:	b083      	sub	sp, #12
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab98:	f003 0308 	and.w	r3, r3, #8
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d00a      	beq.n	800abb6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	685b      	ldr	r3, [r3, #4]
 800aba6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	430a      	orrs	r2, r1
 800abb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abba:	f003 0301 	and.w	r3, r3, #1
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d00a      	beq.n	800abd8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	685b      	ldr	r3, [r3, #4]
 800abc8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	430a      	orrs	r2, r1
 800abd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abdc:	f003 0302 	and.w	r3, r3, #2
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d00a      	beq.n	800abfa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	685b      	ldr	r3, [r3, #4]
 800abea:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	430a      	orrs	r2, r1
 800abf8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abfe:	f003 0304 	and.w	r3, r3, #4
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d00a      	beq.n	800ac1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	685b      	ldr	r3, [r3, #4]
 800ac0c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	430a      	orrs	r2, r1
 800ac1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac20:	f003 0310 	and.w	r3, r3, #16
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d00a      	beq.n	800ac3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	689b      	ldr	r3, [r3, #8]
 800ac2e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	430a      	orrs	r2, r1
 800ac3c:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac42:	f003 0320 	and.w	r3, r3, #32
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d00a      	beq.n	800ac60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	689b      	ldr	r3, [r3, #8]
 800ac50:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	430a      	orrs	r2, r1
 800ac5e:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d01a      	beq.n	800aca2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	685b      	ldr	r3, [r3, #4]
 800ac72:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	430a      	orrs	r2, r1
 800ac80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ac8a:	d10a      	bne.n	800aca2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	685b      	ldr	r3, [r3, #4]
 800ac92:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	430a      	orrs	r2, r1
 800aca0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d00a      	beq.n	800acc4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	685b      	ldr	r3, [r3, #4]
 800acb4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	430a      	orrs	r2, r1
 800acc2:	605a      	str	r2, [r3, #4]
  }
}
 800acc4:	bf00      	nop
 800acc6:	370c      	adds	r7, #12
 800acc8:	46bd      	mov	sp, r7
 800acca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acce:	4770      	bx	lr

0800acd0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b098      	sub	sp, #96	; 0x60
 800acd4:	af02      	add	r7, sp, #8
 800acd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	2200      	movs	r2, #0
 800acdc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ace0:	f7f7 f9a2 	bl	8002028 <HAL_GetTick>
 800ace4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	f003 0308 	and.w	r3, r3, #8
 800acf0:	2b08      	cmp	r3, #8
 800acf2:	d12f      	bne.n	800ad54 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800acf4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800acf8:	9300      	str	r3, [sp, #0]
 800acfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800acfc:	2200      	movs	r2, #0
 800acfe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ad02:	6878      	ldr	r0, [r7, #4]
 800ad04:	f000 f88e 	bl	800ae24 <UART_WaitOnFlagUntilTimeout>
 800ad08:	4603      	mov	r3, r0
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d022      	beq.n	800ad54 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad16:	e853 3f00 	ldrex	r3, [r3]
 800ad1a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ad1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ad22:	653b      	str	r3, [r7, #80]	; 0x50
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	461a      	mov	r2, r3
 800ad2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad2c:	647b      	str	r3, [r7, #68]	; 0x44
 800ad2e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad30:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ad32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ad34:	e841 2300 	strex	r3, r2, [r1]
 800ad38:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ad3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d1e6      	bne.n	800ad0e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	2220      	movs	r2, #32
 800ad44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	2200      	movs	r2, #0
 800ad4c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ad50:	2303      	movs	r3, #3
 800ad52:	e063      	b.n	800ae1c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	f003 0304 	and.w	r3, r3, #4
 800ad5e:	2b04      	cmp	r3, #4
 800ad60:	d149      	bne.n	800adf6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ad62:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ad66:	9300      	str	r3, [sp, #0]
 800ad68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ad70:	6878      	ldr	r0, [r7, #4]
 800ad72:	f000 f857 	bl	800ae24 <UART_WaitOnFlagUntilTimeout>
 800ad76:	4603      	mov	r3, r0
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d03c      	beq.n	800adf6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad84:	e853 3f00 	ldrex	r3, [r3]
 800ad88:	623b      	str	r3, [r7, #32]
   return(result);
 800ad8a:	6a3b      	ldr	r3, [r7, #32]
 800ad8c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ad90:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	461a      	mov	r2, r3
 800ad98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad9a:	633b      	str	r3, [r7, #48]	; 0x30
 800ad9c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ada0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ada2:	e841 2300 	strex	r3, r2, [r1]
 800ada6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ada8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d1e6      	bne.n	800ad7c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	3308      	adds	r3, #8
 800adb4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adb6:	693b      	ldr	r3, [r7, #16]
 800adb8:	e853 3f00 	ldrex	r3, [r3]
 800adbc:	60fb      	str	r3, [r7, #12]
   return(result);
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	f023 0301 	bic.w	r3, r3, #1
 800adc4:	64bb      	str	r3, [r7, #72]	; 0x48
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	3308      	adds	r3, #8
 800adcc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800adce:	61fa      	str	r2, [r7, #28]
 800add0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800add2:	69b9      	ldr	r1, [r7, #24]
 800add4:	69fa      	ldr	r2, [r7, #28]
 800add6:	e841 2300 	strex	r3, r2, [r1]
 800adda:	617b      	str	r3, [r7, #20]
   return(result);
 800addc:	697b      	ldr	r3, [r7, #20]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d1e5      	bne.n	800adae <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	2220      	movs	r2, #32
 800ade6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	2200      	movs	r2, #0
 800adee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800adf2:	2303      	movs	r3, #3
 800adf4:	e012      	b.n	800ae1c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	2220      	movs	r2, #32
 800adfa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	2220      	movs	r2, #32
 800ae02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	2200      	movs	r2, #0
 800ae0a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	2200      	movs	r2, #0
 800ae10:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	2200      	movs	r2, #0
 800ae16:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ae1a:	2300      	movs	r3, #0
}
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	3758      	adds	r7, #88	; 0x58
 800ae20:	46bd      	mov	sp, r7
 800ae22:	bd80      	pop	{r7, pc}

0800ae24 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b084      	sub	sp, #16
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	60f8      	str	r0, [r7, #12]
 800ae2c:	60b9      	str	r1, [r7, #8]
 800ae2e:	603b      	str	r3, [r7, #0]
 800ae30:	4613      	mov	r3, r2
 800ae32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ae34:	e049      	b.n	800aeca <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ae36:	69bb      	ldr	r3, [r7, #24]
 800ae38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ae3c:	d045      	beq.n	800aeca <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ae3e:	f7f7 f8f3 	bl	8002028 <HAL_GetTick>
 800ae42:	4602      	mov	r2, r0
 800ae44:	683b      	ldr	r3, [r7, #0]
 800ae46:	1ad3      	subs	r3, r2, r3
 800ae48:	69ba      	ldr	r2, [r7, #24]
 800ae4a:	429a      	cmp	r2, r3
 800ae4c:	d302      	bcc.n	800ae54 <UART_WaitOnFlagUntilTimeout+0x30>
 800ae4e:	69bb      	ldr	r3, [r7, #24]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d101      	bne.n	800ae58 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ae54:	2303      	movs	r3, #3
 800ae56:	e048      	b.n	800aeea <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	f003 0304 	and.w	r3, r3, #4
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d031      	beq.n	800aeca <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	69db      	ldr	r3, [r3, #28]
 800ae6c:	f003 0308 	and.w	r3, r3, #8
 800ae70:	2b08      	cmp	r3, #8
 800ae72:	d110      	bne.n	800ae96 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	2208      	movs	r2, #8
 800ae7a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ae7c:	68f8      	ldr	r0, [r7, #12]
 800ae7e:	f000 f838 	bl	800aef2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	2208      	movs	r2, #8
 800ae86:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	2200      	movs	r2, #0
 800ae8e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800ae92:	2301      	movs	r3, #1
 800ae94:	e029      	b.n	800aeea <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	69db      	ldr	r3, [r3, #28]
 800ae9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aea0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aea4:	d111      	bne.n	800aeca <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800aeae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800aeb0:	68f8      	ldr	r0, [r7, #12]
 800aeb2:	f000 f81e 	bl	800aef2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	2220      	movs	r2, #32
 800aeba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	2200      	movs	r2, #0
 800aec2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800aec6:	2303      	movs	r3, #3
 800aec8:	e00f      	b.n	800aeea <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	69da      	ldr	r2, [r3, #28]
 800aed0:	68bb      	ldr	r3, [r7, #8]
 800aed2:	4013      	ands	r3, r2
 800aed4:	68ba      	ldr	r2, [r7, #8]
 800aed6:	429a      	cmp	r2, r3
 800aed8:	bf0c      	ite	eq
 800aeda:	2301      	moveq	r3, #1
 800aedc:	2300      	movne	r3, #0
 800aede:	b2db      	uxtb	r3, r3
 800aee0:	461a      	mov	r2, r3
 800aee2:	79fb      	ldrb	r3, [r7, #7]
 800aee4:	429a      	cmp	r2, r3
 800aee6:	d0a6      	beq.n	800ae36 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800aee8:	2300      	movs	r3, #0
}
 800aeea:	4618      	mov	r0, r3
 800aeec:	3710      	adds	r7, #16
 800aeee:	46bd      	mov	sp, r7
 800aef0:	bd80      	pop	{r7, pc}

0800aef2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800aef2:	b480      	push	{r7}
 800aef4:	b095      	sub	sp, #84	; 0x54
 800aef6:	af00      	add	r7, sp, #0
 800aef8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af02:	e853 3f00 	ldrex	r3, [r3]
 800af06:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800af08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af0a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800af0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	461a      	mov	r2, r3
 800af16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af18:	643b      	str	r3, [r7, #64]	; 0x40
 800af1a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af1c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800af1e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800af20:	e841 2300 	strex	r3, r2, [r1]
 800af24:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800af26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d1e6      	bne.n	800aefa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	3308      	adds	r3, #8
 800af32:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af34:	6a3b      	ldr	r3, [r7, #32]
 800af36:	e853 3f00 	ldrex	r3, [r3]
 800af3a:	61fb      	str	r3, [r7, #28]
   return(result);
 800af3c:	69fb      	ldr	r3, [r7, #28]
 800af3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800af42:	f023 0301 	bic.w	r3, r3, #1
 800af46:	64bb      	str	r3, [r7, #72]	; 0x48
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	3308      	adds	r3, #8
 800af4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800af50:	62fa      	str	r2, [r7, #44]	; 0x2c
 800af52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800af56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800af58:	e841 2300 	strex	r3, r2, [r1]
 800af5c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800af5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af60:	2b00      	cmp	r3, #0
 800af62:	d1e3      	bne.n	800af2c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af68:	2b01      	cmp	r3, #1
 800af6a:	d118      	bne.n	800af9e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	e853 3f00 	ldrex	r3, [r3]
 800af78:	60bb      	str	r3, [r7, #8]
   return(result);
 800af7a:	68bb      	ldr	r3, [r7, #8]
 800af7c:	f023 0310 	bic.w	r3, r3, #16
 800af80:	647b      	str	r3, [r7, #68]	; 0x44
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	461a      	mov	r2, r3
 800af88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800af8a:	61bb      	str	r3, [r7, #24]
 800af8c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af8e:	6979      	ldr	r1, [r7, #20]
 800af90:	69ba      	ldr	r2, [r7, #24]
 800af92:	e841 2300 	strex	r3, r2, [r1]
 800af96:	613b      	str	r3, [r7, #16]
   return(result);
 800af98:	693b      	ldr	r3, [r7, #16]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d1e6      	bne.n	800af6c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	2220      	movs	r2, #32
 800afa2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	2200      	movs	r2, #0
 800afaa:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	2200      	movs	r2, #0
 800afb0:	675a      	str	r2, [r3, #116]	; 0x74
}
 800afb2:	bf00      	nop
 800afb4:	3754      	adds	r7, #84	; 0x54
 800afb6:	46bd      	mov	sp, r7
 800afb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afbc:	4770      	bx	lr

0800afbe <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800afbe:	b480      	push	{r7}
 800afc0:	b083      	sub	sp, #12
 800afc2:	af00      	add	r7, sp, #0
 800afc4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800afc6:	bf00      	nop
 800afc8:	370c      	adds	r7, #12
 800afca:	46bd      	mov	sp, r7
 800afcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd0:	4770      	bx	lr

0800afd2 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800afd2:	b480      	push	{r7}
 800afd4:	b083      	sub	sp, #12
 800afd6:	af00      	add	r7, sp, #0
 800afd8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800afda:	bf00      	nop
 800afdc:	370c      	adds	r7, #12
 800afde:	46bd      	mov	sp, r7
 800afe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe4:	4770      	bx	lr

0800afe6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800afe6:	b480      	push	{r7}
 800afe8:	b085      	sub	sp, #20
 800afea:	af00      	add	r7, sp, #0
 800afec:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800aff4:	2b01      	cmp	r3, #1
 800aff6:	d101      	bne.n	800affc <HAL_UARTEx_DisableFifoMode+0x16>
 800aff8:	2302      	movs	r3, #2
 800affa:	e027      	b.n	800b04c <HAL_UARTEx_DisableFifoMode+0x66>
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	2201      	movs	r2, #1
 800b000:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	2224      	movs	r2, #36	; 0x24
 800b008:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	681a      	ldr	r2, [r3, #0]
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	f022 0201 	bic.w	r2, r2, #1
 800b022:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b02a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	2200      	movs	r2, #0
 800b030:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	68fa      	ldr	r2, [r7, #12]
 800b038:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	2220      	movs	r2, #32
 800b03e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	2200      	movs	r2, #0
 800b046:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b04a:	2300      	movs	r3, #0
}
 800b04c:	4618      	mov	r0, r3
 800b04e:	3714      	adds	r7, #20
 800b050:	46bd      	mov	sp, r7
 800b052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b056:	4770      	bx	lr

0800b058 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b058:	b580      	push	{r7, lr}
 800b05a:	b084      	sub	sp, #16
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	6078      	str	r0, [r7, #4]
 800b060:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b068:	2b01      	cmp	r3, #1
 800b06a:	d101      	bne.n	800b070 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b06c:	2302      	movs	r3, #2
 800b06e:	e02d      	b.n	800b0cc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	2201      	movs	r2, #1
 800b074:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	2224      	movs	r2, #36	; 0x24
 800b07c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	681a      	ldr	r2, [r3, #0]
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	f022 0201 	bic.w	r2, r2, #1
 800b096:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	689b      	ldr	r3, [r3, #8]
 800b09e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	683a      	ldr	r2, [r7, #0]
 800b0a8:	430a      	orrs	r2, r1
 800b0aa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b0ac:	6878      	ldr	r0, [r7, #4]
 800b0ae:	f000 f84f 	bl	800b150 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	68fa      	ldr	r2, [r7, #12]
 800b0b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	2220      	movs	r2, #32
 800b0be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	2200      	movs	r2, #0
 800b0c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b0ca:	2300      	movs	r3, #0
}
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	3710      	adds	r7, #16
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	bd80      	pop	{r7, pc}

0800b0d4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b084      	sub	sp, #16
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
 800b0dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b0e4:	2b01      	cmp	r3, #1
 800b0e6:	d101      	bne.n	800b0ec <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b0e8:	2302      	movs	r3, #2
 800b0ea:	e02d      	b.n	800b148 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	2201      	movs	r2, #1
 800b0f0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	2224      	movs	r2, #36	; 0x24
 800b0f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	681a      	ldr	r2, [r3, #0]
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	f022 0201 	bic.w	r2, r2, #1
 800b112:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	689b      	ldr	r3, [r3, #8]
 800b11a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	683a      	ldr	r2, [r7, #0]
 800b124:	430a      	orrs	r2, r1
 800b126:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b128:	6878      	ldr	r0, [r7, #4]
 800b12a:	f000 f811 	bl	800b150 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	68fa      	ldr	r2, [r7, #12]
 800b134:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	2220      	movs	r2, #32
 800b13a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	2200      	movs	r2, #0
 800b142:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b146:	2300      	movs	r3, #0
}
 800b148:	4618      	mov	r0, r3
 800b14a:	3710      	adds	r7, #16
 800b14c:	46bd      	mov	sp, r7
 800b14e:	bd80      	pop	{r7, pc}

0800b150 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b150:	b480      	push	{r7}
 800b152:	b085      	sub	sp, #20
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d108      	bne.n	800b172 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	2201      	movs	r2, #1
 800b164:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	2201      	movs	r2, #1
 800b16c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b170:	e031      	b.n	800b1d6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b172:	2308      	movs	r3, #8
 800b174:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b176:	2308      	movs	r3, #8
 800b178:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	689b      	ldr	r3, [r3, #8]
 800b180:	0e5b      	lsrs	r3, r3, #25
 800b182:	b2db      	uxtb	r3, r3
 800b184:	f003 0307 	and.w	r3, r3, #7
 800b188:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	689b      	ldr	r3, [r3, #8]
 800b190:	0f5b      	lsrs	r3, r3, #29
 800b192:	b2db      	uxtb	r3, r3
 800b194:	f003 0307 	and.w	r3, r3, #7
 800b198:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b19a:	7bbb      	ldrb	r3, [r7, #14]
 800b19c:	7b3a      	ldrb	r2, [r7, #12]
 800b19e:	4911      	ldr	r1, [pc, #68]	; (800b1e4 <UARTEx_SetNbDataToProcess+0x94>)
 800b1a0:	5c8a      	ldrb	r2, [r1, r2]
 800b1a2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b1a6:	7b3a      	ldrb	r2, [r7, #12]
 800b1a8:	490f      	ldr	r1, [pc, #60]	; (800b1e8 <UARTEx_SetNbDataToProcess+0x98>)
 800b1aa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b1ac:	fb93 f3f2 	sdiv	r3, r3, r2
 800b1b0:	b29a      	uxth	r2, r3
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b1b8:	7bfb      	ldrb	r3, [r7, #15]
 800b1ba:	7b7a      	ldrb	r2, [r7, #13]
 800b1bc:	4909      	ldr	r1, [pc, #36]	; (800b1e4 <UARTEx_SetNbDataToProcess+0x94>)
 800b1be:	5c8a      	ldrb	r2, [r1, r2]
 800b1c0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b1c4:	7b7a      	ldrb	r2, [r7, #13]
 800b1c6:	4908      	ldr	r1, [pc, #32]	; (800b1e8 <UARTEx_SetNbDataToProcess+0x98>)
 800b1c8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b1ca:	fb93 f3f2 	sdiv	r3, r3, r2
 800b1ce:	b29a      	uxth	r2, r3
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b1d6:	bf00      	nop
 800b1d8:	3714      	adds	r7, #20
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e0:	4770      	bx	lr
 800b1e2:	bf00      	nop
 800b1e4:	0801ac2c 	.word	0x0801ac2c
 800b1e8:	0801ac34 	.word	0x0801ac34

0800b1ec <LL_DLYB_SetDelay>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: the Delay value is set.
  *          - ERROR: the Delay value is not set.
  */
void LL_DLYB_SetDelay(DLYB_TypeDef *DLYBx, LL_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 800b1ec:	b480      	push	{r7}
 800b1ee:	b083      	sub	sp, #12
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	6078      	str	r0, [r7, #4]
 800b1f4:	6039      	str	r1, [r7, #0]
  /* Check the DelayBlock instance */
  assert_param(IS_DLYB_ALL_INSTANCE(DLYBx));

  /* Enable the length sampling */
  SET_BIT(DLYBx->CR, DLYB_CR_SEN);
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	f043 0202 	orr.w	r2, r3, #2
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	601a      	str	r2, [r3, #0]

  /* Update the UNIT and SEL field */
  DLYBx->CFGR = (pdlyb_cfg->PhaseSel) | ((pdlyb_cfg->Units) << DLYB_CFGR_UNIT_Pos);
 800b202:	683b      	ldr	r3, [r7, #0]
 800b204:	685a      	ldr	r2, [r3, #4]
 800b206:	683b      	ldr	r3, [r7, #0]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	021b      	lsls	r3, r3, #8
 800b20c:	431a      	orrs	r2, r3
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	605a      	str	r2, [r3, #4]

  /* Disable the length sampling */
  CLEAR_BIT(DLYBx->CR, DLYB_CR_SEN);
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	f023 0202 	bic.w	r2, r3, #2
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	601a      	str	r2, [r3, #0]
}
 800b21e:	bf00      	nop
 800b220:	370c      	adds	r7, #12
 800b222:	46bd      	mov	sp, r7
 800b224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b228:	4770      	bx	lr

0800b22a <_fx_directory_entry_read>:
                                   ULONG *entry_ptr, FX_DIR_ENTRY *destination_ptr)
#else
UINT  _fx_directory_entry_read(FX_MEDIA *media_ptr, FX_DIR_ENTRY *source_dir,
                               ULONG *entry_ptr, FX_DIR_ENTRY *destination_ptr)
#endif /* FX_ENABLE_EXFAT */
{
 800b22a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b22e:	b09e      	sub	sp, #120	; 0x78
 800b230:	af04      	add	r7, sp, #16
 800b232:	61f8      	str	r0, [r7, #28]
 800b234:	61b9      	str	r1, [r7, #24]
 800b236:	617a      	str	r2, [r7, #20]
 800b238:	613b      	str	r3, [r7, #16]

UINT   i, j, card, dotflag, get_short_name;
UINT   number_of_lfns;
UINT   status;
ULONG  cluster, next_cluster = 0;
 800b23a:	2300      	movs	r3, #0
 800b23c:	627b      	str	r3, [r7, #36]	; 0x24
ULONG  logical_sector;
ULONG  byte_offset;
ULONG  bytes_per_cluster;
UCHAR *read_ptr;
CHAR  *short_name_ptr;
ULONG  entry = *entry_ptr;
 800b23e:	697b      	ldr	r3, [r7, #20]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	63bb      	str	r3, [r7, #56]	; 0x38


#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of directory entry read requests.  */
    media_ptr -> fx_media_directory_entry_reads++;
 800b244:	69fb      	ldr	r3, [r7, #28]
 800b246:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 800b24a:	1c5a      	adds	r2, r3, #1
 800b24c:	69fb      	ldr	r3, [r7, #28]
 800b24e:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_DIR_ENTRY_READ, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Calculate the byte offset of this directory entry.  */
    byte_offset =  entry * FX_DIR_ENTRY_SIZE;
 800b252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b254:	015b      	lsls	r3, r3, #5
 800b256:	647b      	str	r3, [r7, #68]	; 0x44

    /* Determine if a sub-directory or FAT32 root directory is specified.  */
#ifdef FX_ENABLE_EXFAT
    if ((source_dir) || (media_ptr -> fx_media_FAT_type == FX_FAT32))
#else
    if ((source_dir) || (media_ptr -> fx_media_32_bit_FAT))
 800b258:	69bb      	ldr	r3, [r7, #24]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d104      	bne.n	800b268 <_fx_directory_entry_read+0x3e>
 800b25e:	69fb      	ldr	r3, [r7, #28]
 800b260:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b262:	2b00      	cmp	r3, #0
 800b264:	f000 80a1 	beq.w	800b3aa <_fx_directory_entry_read+0x180>
    {

        /* Yes, a sub-directory is present.  */

        /* Calculate the number of bytes per cluster.  */
        bytes_per_cluster =  ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 800b268:	69fb      	ldr	r3, [r7, #28]
 800b26a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            ((ULONG)media_ptr -> fx_media_sectors_per_cluster);
 800b26c:	69fa      	ldr	r2, [r7, #28]
 800b26e:	6d52      	ldr	r2, [r2, #84]	; 0x54
        bytes_per_cluster =  ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 800b270:	fb02 f303 	mul.w	r3, r2, r3
 800b274:	633b      	str	r3, [r7, #48]	; 0x30

        /* Check for invalid value.  */
        if (bytes_per_cluster == 0)
 800b276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d101      	bne.n	800b280 <_fx_directory_entry_read+0x56>
        {

            /* Invalid media, return error.  */
            return(FX_MEDIA_INVALID);
 800b27c:	2302      	movs	r3, #2
 800b27e:	e355      	b.n	800b92c <_fx_directory_entry_read+0x702>
        }

        /* Now determine the relative cluster in the sub-directory file.  */
        relative_cluster =   (UINT)(byte_offset / bytes_per_cluster);
 800b280:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b284:	fbb2 f3f3 	udiv	r3, r2, r3
 800b288:	653b      	str	r3, [r7, #80]	; 0x50

        /* Calculate the byte offset within the cluster.  */
        byte_offset =  byte_offset % bytes_per_cluster;
 800b28a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b28c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b28e:	fbb3 f2f2 	udiv	r2, r3, r2
 800b292:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b294:	fb01 f202 	mul.w	r2, r1, r2
 800b298:	1a9b      	subs	r3, r3, r2
 800b29a:	647b      	str	r3, [r7, #68]	; 0x44

        /* Now figure out the relative sector within the cluster.  */
        relative_sector =    (UINT)(byte_offset / ((ULONG)media_ptr -> fx_media_bytes_per_sector));
 800b29c:	69fb      	ldr	r3, [r7, #28]
 800b29e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b2a2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2a6:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Read the directory sector into the internal memory buffer.  */

        /* Determine if there is a sub-directory.  */
        if (source_dir)
 800b2a8:	69bb      	ldr	r3, [r7, #24]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d028      	beq.n	800b300 <_fx_directory_entry_read+0xd6>
        {

            /* Determine if this source directory has valid information from the previous call.  */
            if ((source_dir -> fx_dir_entry_last_search_cluster) &&
 800b2ae:	69bb      	ldr	r3, [r7, #24]
 800b2b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d01e      	beq.n	800b2f4 <_fx_directory_entry_read+0xca>
                (source_dir -> fx_dir_entry_last_search_relative_cluster <= relative_cluster) &&
 800b2b6:	69bb      	ldr	r3, [r7, #24]
 800b2b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
            if ((source_dir -> fx_dir_entry_last_search_cluster) &&
 800b2ba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b2bc:	429a      	cmp	r2, r3
 800b2be:	d319      	bcc.n	800b2f4 <_fx_directory_entry_read+0xca>
                (source_dir -> fx_dir_entry_last_search_log_sector == source_dir -> fx_dir_entry_log_sector) &&
 800b2c0:	69bb      	ldr	r3, [r7, #24]
 800b2c2:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 800b2c6:	69bb      	ldr	r3, [r7, #24]
 800b2c8:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
                (source_dir -> fx_dir_entry_last_search_relative_cluster <= relative_cluster) &&
 800b2cc:	4299      	cmp	r1, r3
 800b2ce:	bf08      	it	eq
 800b2d0:	4290      	cmpeq	r0, r2
 800b2d2:	d10f      	bne.n	800b2f4 <_fx_directory_entry_read+0xca>
                (source_dir -> fx_dir_entry_last_search_byte_offset == source_dir -> fx_dir_entry_byte_offset))
 800b2d4:	69bb      	ldr	r3, [r7, #24]
 800b2d6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800b2d8:	69bb      	ldr	r3, [r7, #24]
 800b2da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                (source_dir -> fx_dir_entry_last_search_log_sector == source_dir -> fx_dir_entry_log_sector) &&
 800b2dc:	429a      	cmp	r2, r3
 800b2de:	d109      	bne.n	800b2f4 <_fx_directory_entry_read+0xca>
            {

                /* Use the previous information to start the search.  */
                cluster =  source_dir -> fx_dir_entry_last_search_cluster;
 800b2e0:	69bb      	ldr	r3, [r7, #24]
 800b2e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2e4:	657b      	str	r3, [r7, #84]	; 0x54

                /* Setup the relative cluster index to the saved relative cluster.  */
                i =  source_dir -> fx_dir_entry_last_search_relative_cluster;
 800b2e6:	69bb      	ldr	r3, [r7, #24]
 800b2e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2ea:	667b      	str	r3, [r7, #100]	; 0x64

                /* Clear the search cluster.  It will be updated prior to successful return.  */
                source_dir -> fx_dir_entry_last_search_cluster =  0;
 800b2ec:	69bb      	ldr	r3, [r7, #24]
 800b2ee:	2200      	movs	r2, #0
 800b2f0:	651a      	str	r2, [r3, #80]	; 0x50
 800b2f2:	e00a      	b.n	800b30a <_fx_directory_entry_read+0xe0>
            else
            {

                /* Nothing from the previous directory read, just setup the starting cluster to the
                   beginning of the sub-directory.  */
                cluster =  source_dir -> fx_dir_entry_cluster;
 800b2f4:	69bb      	ldr	r3, [r7, #24]
 800b2f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2f8:	657b      	str	r3, [r7, #84]	; 0x54

                /* Setup the relative cluster index to zero.  */
                i =  0;
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	667b      	str	r3, [r7, #100]	; 0x64
 800b2fe:	e024      	b.n	800b34a <_fx_directory_entry_read+0x120>
        }
        else
        {

            /* No, setup the starting cluster to the FAT32 root cluster.  */
            cluster =  media_ptr -> fx_media_root_cluster_32;
 800b300:	69fb      	ldr	r3, [r7, #28]
 800b302:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b304:	657b      	str	r3, [r7, #84]	; 0x54

            /* Setup the relative cluster index to zero.  */
            i =  0;
 800b306:	2300      	movs	r3, #0
 800b308:	667b      	str	r3, [r7, #100]	; 0x64
        }

        /* Loop to position to the appropriate cluster.  */
        while (i < relative_cluster)
 800b30a:	e01e      	b.n	800b34a <_fx_directory_entry_read+0x120>
        {

            /* Check the value of the new cluster - it must be a valid cluster number
               or something is really wrong!  */
            if ((cluster < FX_FAT_ENTRY_START) || (cluster >= media_ptr -> fx_media_fat_reserved))
 800b30c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b30e:	2b01      	cmp	r3, #1
 800b310:	d907      	bls.n	800b322 <_fx_directory_entry_read+0xf8>
 800b312:	69fb      	ldr	r3, [r7, #28]
 800b314:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800b318:	f8d3 34a8 	ldr.w	r3, [r3, #1192]	; 0x4a8
 800b31c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b31e:	429a      	cmp	r2, r3
 800b320:	d301      	bcc.n	800b326 <_fx_directory_entry_read+0xfc>
            {

                /* Send error message back to caller.  */
                return(FX_FILE_CORRUPT);
 800b322:	2308      	movs	r3, #8
 800b324:	e302      	b.n	800b92c <_fx_directory_entry_read+0x702>
            }

            /* Read the next cluster.  */
            status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 800b326:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b32a:	461a      	mov	r2, r3
 800b32c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b32e:	69f8      	ldr	r0, [r7, #28]
 800b330:	f006 ff46 	bl	80121c0 <_fx_utility_FAT_entry_read>
 800b334:	6378      	str	r0, [r7, #52]	; 0x34

            /* There is a potential for loop, but hardly anything can be done */

            /* Check for I/O error.  */
            if (status != FX_SUCCESS)
 800b336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d001      	beq.n	800b340 <_fx_directory_entry_read+0x116>
            {

                /* Return error code.  */
                return(status);
 800b33c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b33e:	e2f5      	b.n	800b92c <_fx_directory_entry_read+0x702>
            }

            /* Setup the actual cluster.  */
            cluster = next_cluster;
 800b340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b342:	657b      	str	r3, [r7, #84]	; 0x54

            /* Increment the relative cluster number.  */
            i++;
 800b344:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b346:	3301      	adds	r3, #1
 800b348:	667b      	str	r3, [r7, #100]	; 0x64
        while (i < relative_cluster)
 800b34a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b34c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b34e:	429a      	cmp	r2, r3
 800b350:	d3dc      	bcc.n	800b30c <_fx_directory_entry_read+0xe2>
        }

        /* At this point, the directory data sector needs to be read.  */
        logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800b352:	69fb      	ldr	r3, [r7, #28]
 800b354:	6d1a      	ldr	r2, [r3, #80]	; 0x50
            (((ULONG)cluster - FX_FAT_ENTRY_START) *
 800b356:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b358:	3b02      	subs	r3, #2
             ((ULONG)media_ptr -> fx_media_sectors_per_cluster)) +
 800b35a:	69f9      	ldr	r1, [r7, #28]
 800b35c:	6d49      	ldr	r1, [r1, #84]	; 0x54
            (((ULONG)cluster - FX_FAT_ENTRY_START) *
 800b35e:	fb01 f303 	mul.w	r3, r1, r3
        logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800b362:	4413      	add	r3, r2
 800b364:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b366:	4413      	add	r3, r2
 800b368:	64bb      	str	r3, [r7, #72]	; 0x48
            relative_sector;

        /* Read the logical directory sector.  */
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 800b36a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b36c:	2200      	movs	r2, #0
 800b36e:	60bb      	str	r3, [r7, #8]
 800b370:	60fa      	str	r2, [r7, #12]
                                                  media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 800b372:	69fb      	ldr	r3, [r7, #28]
 800b374:	689b      	ldr	r3, [r3, #8]
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 800b376:	2203      	movs	r2, #3
 800b378:	9202      	str	r2, [sp, #8]
 800b37a:	2201      	movs	r2, #1
 800b37c:	9201      	str	r2, [sp, #4]
 800b37e:	9300      	str	r3, [sp, #0]
 800b380:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b384:	69f8      	ldr	r0, [r7, #28]
 800b386:	f008 fb29 	bl	80139dc <_fx_utility_logical_sector_read>
 800b38a:	6378      	str	r0, [r7, #52]	; 0x34

        /* Determine if an error occurred.  */
        if (status != FX_SUCCESS)
 800b38c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d001      	beq.n	800b396 <_fx_directory_entry_read+0x16c>
        {

            /* Return error code.  */
            return(status);
 800b392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b394:	e2ca      	b.n	800b92c <_fx_directory_entry_read+0x702>
        }

        /* Calculate the byte offset within this sector.  */
        byte_offset =  byte_offset % media_ptr -> fx_media_bytes_per_sector;
 800b396:	69fb      	ldr	r3, [r7, #28]
 800b398:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b39a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b39c:	fbb3 f1f2 	udiv	r1, r3, r2
 800b3a0:	fb01 f202 	mul.w	r2, r1, r2
 800b3a4:	1a9b      	subs	r3, r3, r2
 800b3a6:	647b      	str	r3, [r7, #68]	; 0x44
 800b3a8:	e02f      	b.n	800b40a <_fx_directory_entry_read+0x1e0>
    {

        /* Read the entry from the root directory.  */

        /* Determine which sector the requested root directory entry is in.  */
        logical_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 800b3aa:	69fb      	ldr	r3, [r7, #28]
 800b3ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b3b0:	fbb2 f2f3 	udiv	r2, r2, r3
            (ULONG)media_ptr -> fx_media_root_sector_start;
 800b3b4:	69fb      	ldr	r3, [r7, #28]
 800b3b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
        logical_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 800b3b8:	4413      	add	r3, r2
 800b3ba:	64bb      	str	r3, [r7, #72]	; 0x48

        /* Read the logical directory sector.  */
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 800b3bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b3be:	2200      	movs	r2, #0
 800b3c0:	603b      	str	r3, [r7, #0]
 800b3c2:	607a      	str	r2, [r7, #4]
                                                  media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 800b3c4:	69fb      	ldr	r3, [r7, #28]
 800b3c6:	689b      	ldr	r3, [r3, #8]
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 800b3c8:	2203      	movs	r2, #3
 800b3ca:	9202      	str	r2, [sp, #8]
 800b3cc:	2201      	movs	r2, #1
 800b3ce:	9201      	str	r2, [sp, #4]
 800b3d0:	9300      	str	r3, [sp, #0]
 800b3d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b3d6:	69f8      	ldr	r0, [r7, #28]
 800b3d8:	f008 fb00 	bl	80139dc <_fx_utility_logical_sector_read>
 800b3dc:	6378      	str	r0, [r7, #52]	; 0x34

        /* Determine if an error occurred.  */
        if (status != FX_SUCCESS)
 800b3de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d001      	beq.n	800b3e8 <_fx_directory_entry_read+0x1be>
        {

            /* Return error code.  */
            return(status);
 800b3e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3e6:	e2a1      	b.n	800b92c <_fx_directory_entry_read+0x702>
        }

        /* Set the cluster and relative variables (not used in this case) to avoid any compiler
           warnings.  */
        relative_cluster =  relative_sector =  cluster =  0;
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	657b      	str	r3, [r7, #84]	; 0x54
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b3f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b3f2:	653b      	str	r3, [r7, #80]	; 0x50

        /* Now calculate the byte offset into this sector.  */
        byte_offset =  byte_offset -
            ((logical_sector - (ULONG)media_ptr -> fx_media_root_sector_start) *
 800b3f4:	69fb      	ldr	r3, [r7, #28]
 800b3f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b3f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b3fa:	1ad3      	subs	r3, r2, r3
             media_ptr -> fx_media_bytes_per_sector);
 800b3fc:	69fa      	ldr	r2, [r7, #28]
 800b3fe:	6a92      	ldr	r2, [r2, #40]	; 0x28
            ((logical_sector - (ULONG)media_ptr -> fx_media_root_sector_start) *
 800b400:	fb02 f303 	mul.w	r3, r2, r3
        byte_offset =  byte_offset -
 800b404:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b406:	1ad3      	subs	r3, r2, r3
 800b408:	647b      	str	r3, [r7, #68]	; 0x44
    }

    /* Setup a pointer into the buffer.  */
    read_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT)byte_offset;
 800b40a:	69fb      	ldr	r3, [r7, #28]
 800b40c:	689a      	ldr	r2, [r3, #8]
 800b40e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b410:	4413      	add	r3, r2
 800b412:	643b      	str	r3, [r7, #64]	; 0x40

    /* Save the logical sector and byte offset in the returned directory entry.  */
    destination_ptr -> fx_dir_entry_log_sector =       logical_sector;
 800b414:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b416:	2200      	movs	r2, #0
 800b418:	4698      	mov	r8, r3
 800b41a:	4691      	mov	r9, r2
 800b41c:	693b      	ldr	r3, [r7, #16]
 800b41e:	e9c3 8910 	strd	r8, r9, [r3, #64]	; 0x40
    destination_ptr -> fx_dir_entry_byte_offset =      byte_offset;
 800b422:	693b      	ldr	r3, [r7, #16]
 800b424:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b426:	649a      	str	r2, [r3, #72]	; 0x48

    /* Clear the short file name information.  */
    destination_ptr -> fx_dir_entry_long_name_shorted =  0;
 800b428:	693b      	ldr	r3, [r7, #16]
 800b42a:	2200      	movs	r2, #0
 800b42c:	619a      	str	r2, [r3, #24]
    destination_ptr -> fx_dir_entry_short_name[0]     =  0;
 800b42e:	693b      	ldr	r3, [r7, #16]
 800b430:	2200      	movs	r2, #0
 800b432:	711a      	strb	r2, [r3, #4]

    /* Setup short name pointer.  */
    short_name_ptr =  destination_ptr -> fx_dir_entry_name;
 800b434:	693b      	ldr	r3, [r7, #16]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Check if long file name exists.  */
    get_short_name =  0;
 800b43a:	2300      	movs	r3, #0
 800b43c:	65bb      	str	r3, [r7, #88]	; 0x58
    if ((*(read_ptr + 11) == (UCHAR)FX_LONG_NAME) && (*read_ptr != (UCHAR)FX_DIR_ENTRY_FREE))
 800b43e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b440:	330b      	adds	r3, #11
 800b442:	781b      	ldrb	r3, [r3, #0]
 800b444:	2b0f      	cmp	r3, #15
 800b446:	f040 8129 	bne.w	800b69c <_fx_directory_entry_read+0x472>
 800b44a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b44c:	781b      	ldrb	r3, [r3, #0]
 800b44e:	2be5      	cmp	r3, #229	; 0xe5
 800b450:	f000 8124 	beq.w	800b69c <_fx_directory_entry_read+0x472>
    {

        /* Collate the long name. */

        /* Pickup the file name length.  */
        i = (((UINT)(*read_ptr & (UCHAR)0x1f) - 1) * FX_LONG_NAME_ENTRY_LEN) & 0xFFFFFFFF;
 800b454:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b456:	781b      	ldrb	r3, [r3, #0]
 800b458:	f003 021f 	and.w	r2, r3, #31
 800b45c:	4613      	mov	r3, r2
 800b45e:	005b      	lsls	r3, r3, #1
 800b460:	4413      	add	r3, r2
 800b462:	009b      	lsls	r3, r3, #2
 800b464:	4413      	add	r3, r2
 800b466:	3b0d      	subs	r3, #13
 800b468:	667b      	str	r3, [r7, #100]	; 0x64

        /* Save the number of LFN entries.  */
        number_of_lfns =  (UINT)(*read_ptr & (UCHAR)0x1f);
 800b46a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b46c:	781b      	ldrb	r3, [r3, #0]
 800b46e:	f003 031f 	and.w	r3, r3, #31
 800b472:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Check the file name size.  */
        if (i >= (FX_MAX_LONG_NAME_LEN - 1))
 800b474:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b476:	2bfe      	cmp	r3, #254	; 0xfe
 800b478:	d908      	bls.n	800b48c <_fx_directory_entry_read+0x262>
        {

            /* Name is too big, shorten it.  */
            get_short_name = 1;
 800b47a:	2301      	movs	r3, #1
 800b47c:	65bb      	str	r3, [r7, #88]	; 0x58
            destination_ptr -> fx_dir_entry_long_name_shorted =  (UINT)(*read_ptr & (UCHAR)0x1f);
 800b47e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b480:	781b      	ldrb	r3, [r3, #0]
 800b482:	f003 021f 	and.w	r2, r3, #31
 800b486:	693b      	ldr	r3, [r7, #16]
 800b488:	619a      	str	r2, [r3, #24]
 800b48a:	e015      	b.n	800b4b8 <_fx_directory_entry_read+0x28e>
        }
        else
        {

            /* Size of name is fine, save pointer to short file name.  */
            short_name_ptr = destination_ptr -> fx_dir_entry_short_name;
 800b48c:	693b      	ldr	r3, [r7, #16]
 800b48e:	3304      	adds	r3, #4
 800b490:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Loop to make sure the long file name is NULL terminated.  */
            j = i + FX_LONG_NAME_ENTRY_LEN + 1;
 800b492:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b494:	330e      	adds	r3, #14
 800b496:	663b      	str	r3, [r7, #96]	; 0x60
            do
            {
                /* Place a NULL in the long name.  */
                destination_ptr -> fx_dir_entry_name[i] =  0;
 800b498:	693b      	ldr	r3, [r7, #16]
 800b49a:	681a      	ldr	r2, [r3, #0]
 800b49c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b49e:	4413      	add	r3, r2
 800b4a0:	2200      	movs	r2, #0
 800b4a2:	701a      	strb	r2, [r3, #0]

                /* Position to the next entry.  */
                i++;
 800b4a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b4a6:	3301      	adds	r3, #1
 800b4a8:	667b      	str	r3, [r7, #100]	; 0x64
            } while ((i < j) && (i < FX_MAX_LONG_NAME_LEN));
 800b4aa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b4ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b4ae:	429a      	cmp	r2, r3
 800b4b0:	d202      	bcs.n	800b4b8 <_fx_directory_entry_read+0x28e>
 800b4b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b4b4:	2bff      	cmp	r3, #255	; 0xff
 800b4b6:	d9ef      	bls.n	800b498 <_fx_directory_entry_read+0x26e>
        /* Loop to pickup the rest of the name.  */
        do
        {

            /* Get the lower 5 bit containing the cardinality.  */
            card = (UINT)(*read_ptr & (UCHAR)0x1f) - 1;
 800b4b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b4ba:	781b      	ldrb	r3, [r3, #0]
 800b4bc:	f003 031f 	and.w	r3, r3, #31
 800b4c0:	3b01      	subs	r3, #1
 800b4c2:	62bb      	str	r3, [r7, #40]	; 0x28

            /* For simplicity no checksum or cardinality checking is done */
            if (get_short_name == 0)
 800b4c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d168      	bne.n	800b59c <_fx_directory_entry_read+0x372>
            {

                /* Loop to pickup name.  */
                for (i = 1, j = 0; i < FX_DIR_ENTRY_SIZE; i += 2)
 800b4ca:	2301      	movs	r3, #1
 800b4cc:	667b      	str	r3, [r7, #100]	; 0x64
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	663b      	str	r3, [r7, #96]	; 0x60
 800b4d2:	e060      	b.n	800b596 <_fx_directory_entry_read+0x36c>
                {

                    if ((i == 11) || (i == 26))
 800b4d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b4d6:	2b0b      	cmp	r3, #11
 800b4d8:	d057      	beq.n	800b58a <_fx_directory_entry_read+0x360>
 800b4da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b4dc:	2b1a      	cmp	r3, #26
 800b4de:	d054      	beq.n	800b58a <_fx_directory_entry_read+0x360>
                    {
                        continue;
                    }

                    /* i = 12, 27 is not generated due to +=2 */
                    if (i == 13)
 800b4e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b4e2:	2b0d      	cmp	r3, #13
 800b4e4:	d102      	bne.n	800b4ec <_fx_directory_entry_read+0x2c2>
                    {
                        i = 12;
 800b4e6:	230c      	movs	r3, #12
 800b4e8:	667b      	str	r3, [r7, #100]	; 0x64
                        continue; /* this time next unicode is byte offset 14*/
 800b4ea:	e051      	b.n	800b590 <_fx_directory_entry_read+0x366>
                    }

                    /* Determine if there is an actual unicode character present.  */
                    if (read_ptr[i + 1])
 800b4ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b4ee:	3301      	adds	r3, #1
 800b4f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b4f2:	4413      	add	r3, r2
 800b4f4:	781b      	ldrb	r3, [r3, #0]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d014      	beq.n	800b524 <_fx_directory_entry_read+0x2fa>
                    {

                        /* Extended byte is non-zero, make sure both bytes of the unicode entry are not
                           all ones, since this is a normal case.  */
                        if ((read_ptr[i + 1] != (UCHAR)0xFF) || (read_ptr[i] != (UCHAR)0xFF))
 800b4fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b4fc:	3301      	adds	r3, #1
 800b4fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b500:	4413      	add	r3, r2
 800b502:	781b      	ldrb	r3, [r3, #0]
 800b504:	2bff      	cmp	r3, #255	; 0xff
 800b506:	d105      	bne.n	800b514 <_fx_directory_entry_read+0x2ea>
 800b508:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b50a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b50c:	4413      	add	r3, r2
 800b50e:	781b      	ldrb	r3, [r3, #0]
 800b510:	2bff      	cmp	r3, #255	; 0xff
 800b512:	d007      	beq.n	800b524 <_fx_directory_entry_read+0x2fa>
                        {

                            /* Name is an actual unicode name, shorten it.  */
                            get_short_name = 1;
 800b514:	2301      	movs	r3, #1
 800b516:	65bb      	str	r3, [r7, #88]	; 0x58

                            /* Save the number of directory entries the LFN has.  This will be
                               used later when updating the 8.3 portion of the LFN.  */
                            destination_ptr -> fx_dir_entry_long_name_shorted =  number_of_lfns;
 800b518:	693b      	ldr	r3, [r7, #16]
 800b51a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b51c:	619a      	str	r2, [r3, #24]

                            /* Setup short name pointer.  */
                            short_name_ptr =  destination_ptr -> fx_dir_entry_name;
 800b51e:	693b      	ldr	r3, [r7, #16]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	63fb      	str	r3, [r7, #60]	; 0x3c
                        }
                    }

                    /* Determine if the character is NULL.  */
                    if ((read_ptr[i] == FX_NULL) || (read_ptr[i] == (UCHAR)0xFF))
 800b524:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b526:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b528:	4413      	add	r3, r2
 800b52a:	781b      	ldrb	r3, [r3, #0]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d02e      	beq.n	800b58e <_fx_directory_entry_read+0x364>
 800b530:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b532:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b534:	4413      	add	r3, r2
 800b536:	781b      	ldrb	r3, [r3, #0]
 800b538:	2bff      	cmp	r3, #255	; 0xff
 800b53a:	d028      	beq.n	800b58e <_fx_directory_entry_read+0x364>
                    {
                        continue;
                    }

                    /* Determine if the name is too big.  */
                    if ((card * 13 + j) >= (FX_MAX_LONG_NAME_LEN - 1))
 800b53c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b53e:	4613      	mov	r3, r2
 800b540:	005b      	lsls	r3, r3, #1
 800b542:	4413      	add	r3, r2
 800b544:	009b      	lsls	r3, r3, #2
 800b546:	441a      	add	r2, r3
 800b548:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b54a:	4413      	add	r3, r2
 800b54c:	2bfe      	cmp	r3, #254	; 0xfe
 800b54e:	d908      	bls.n	800b562 <_fx_directory_entry_read+0x338>
                    {

                        /* Name is actually too big, shorten it.  */
                        get_short_name =  1;
 800b550:	2301      	movs	r3, #1
 800b552:	65bb      	str	r3, [r7, #88]	; 0x58

                        /* Save the number of directory entries the LFN has.  This will be
                           used later when updating the 8.3 portion of the LFN.  */
                        destination_ptr -> fx_dir_entry_long_name_shorted =  number_of_lfns;
 800b554:	693b      	ldr	r3, [r7, #16]
 800b556:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b558:	619a      	str	r2, [r3, #24]

                        /* Also reposition the short name pointer.  */
                        short_name_ptr =  destination_ptr -> fx_dir_entry_name;
 800b55a:	693b      	ldr	r3, [r7, #16]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	63fb      	str	r3, [r7, #60]	; 0x3c

                        break;
 800b560:	e01c      	b.n	800b59c <_fx_directory_entry_read+0x372>
                    }

                    /* Each entry contains 13 unicode and first byte ASCII, second byte is extended. */
                    destination_ptr -> fx_dir_entry_name[13 * card + j] = (CHAR)read_ptr[i];
 800b562:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b564:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b566:	18d1      	adds	r1, r2, r3
 800b568:	693b      	ldr	r3, [r7, #16]
 800b56a:	6818      	ldr	r0, [r3, #0]
 800b56c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b56e:	4613      	mov	r3, r2
 800b570:	005b      	lsls	r3, r3, #1
 800b572:	4413      	add	r3, r2
 800b574:	009b      	lsls	r3, r3, #2
 800b576:	441a      	add	r2, r3
 800b578:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b57a:	4413      	add	r3, r2
 800b57c:	4403      	add	r3, r0
 800b57e:	780a      	ldrb	r2, [r1, #0]
 800b580:	701a      	strb	r2, [r3, #0]

                    j++;
 800b582:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b584:	3301      	adds	r3, #1
 800b586:	663b      	str	r3, [r7, #96]	; 0x60
 800b588:	e002      	b.n	800b590 <_fx_directory_entry_read+0x366>
                        continue;
 800b58a:	bf00      	nop
 800b58c:	e000      	b.n	800b590 <_fx_directory_entry_read+0x366>
                        continue;
 800b58e:	bf00      	nop
                for (i = 1, j = 0; i < FX_DIR_ENTRY_SIZE; i += 2)
 800b590:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b592:	3302      	adds	r3, #2
 800b594:	667b      	str	r3, [r7, #100]	; 0x64
 800b596:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b598:	2b1f      	cmp	r3, #31
 800b59a:	d99b      	bls.n	800b4d4 <_fx_directory_entry_read+0x2aa>
                }
            }

            /* Determine if a new sector needs to be read.  */
            if (byte_offset + FX_DIR_ENTRY_SIZE >= media_ptr -> fx_media_bytes_per_sector)
 800b59c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b59e:	f103 0220 	add.w	r2, r3, #32
 800b5a2:	69fb      	ldr	r3, [r7, #28]
 800b5a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5a6:	429a      	cmp	r2, r3
 800b5a8:	d365      	bcc.n	800b676 <_fx_directory_entry_read+0x44c>
            {

                /* Determine if a sub-directory or FAT32 root directory is specified.  */
                if ((source_dir) || (media_ptr -> fx_media_32_bit_FAT))
 800b5aa:	69bb      	ldr	r3, [r7, #24]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d103      	bne.n	800b5b8 <_fx_directory_entry_read+0x38e>
 800b5b0:	69fb      	ldr	r3, [r7, #28]
 800b5b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d038      	beq.n	800b62a <_fx_directory_entry_read+0x400>
                {

                    /* Determine the next sector of the directory entry.  */
                    if (relative_sector < (media_ptr -> fx_media_sectors_per_cluster - 1))
 800b5b8:	69fb      	ldr	r3, [r7, #28]
 800b5ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b5bc:	3b01      	subs	r3, #1
 800b5be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b5c0:	429a      	cmp	r2, r3
 800b5c2:	d206      	bcs.n	800b5d2 <_fx_directory_entry_read+0x3a8>
                    {

                        /* More sectors in this cluster.  */

                        /* Simply increment the logical sector.  */
                        logical_sector++;
 800b5c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b5c6:	3301      	adds	r3, #1
 800b5c8:	64bb      	str	r3, [r7, #72]	; 0x48

                        /* Increment the relative sector.  */
                        relative_sector++;
 800b5ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5cc:	3301      	adds	r3, #1
 800b5ce:	64fb      	str	r3, [r7, #76]	; 0x4c
                    if (relative_sector < (media_ptr -> fx_media_sectors_per_cluster - 1))
 800b5d0:	e038      	b.n	800b644 <_fx_directory_entry_read+0x41a>
                    {

                        /* We need to move to the next cluster.  */

                        /* Pickup the next cluster.  */
                        status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 800b5d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b5d6:	461a      	mov	r2, r3
 800b5d8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b5da:	69f8      	ldr	r0, [r7, #28]
 800b5dc:	f006 fdf0 	bl	80121c0 <_fx_utility_FAT_entry_read>
 800b5e0:	6378      	str	r0, [r7, #52]	; 0x34

                        /* Check for I/O error.  */
                        if (status != FX_SUCCESS)
 800b5e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d001      	beq.n	800b5ec <_fx_directory_entry_read+0x3c2>
                        {

                            /* Return error code.  */
                            return(status);
 800b5e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5ea:	e19f      	b.n	800b92c <_fx_directory_entry_read+0x702>
                        }

                        /* Copy next cluster to the current cluster.  */
                        cluster =  next_cluster;
 800b5ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5ee:	657b      	str	r3, [r7, #84]	; 0x54

                        /* Check the value of the new cluster - it must be a valid cluster number
                           or something is really wrong!  */
                        if ((cluster < FX_FAT_ENTRY_START) || (cluster >= media_ptr -> fx_media_fat_reserved))
 800b5f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b5f2:	2b01      	cmp	r3, #1
 800b5f4:	d907      	bls.n	800b606 <_fx_directory_entry_read+0x3dc>
 800b5f6:	69fb      	ldr	r3, [r7, #28]
 800b5f8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800b5fc:	f8d3 34a8 	ldr.w	r3, [r3, #1192]	; 0x4a8
 800b600:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b602:	429a      	cmp	r2, r3
 800b604:	d301      	bcc.n	800b60a <_fx_directory_entry_read+0x3e0>
                        {

                            /* Send error message back to caller.  */
                            return(FX_FILE_CORRUPT);
 800b606:	2308      	movs	r3, #8
 800b608:	e190      	b.n	800b92c <_fx_directory_entry_read+0x702>
                        }

                        /* Now increment the relative cluster.  */
                        relative_cluster++;
 800b60a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b60c:	3301      	adds	r3, #1
 800b60e:	653b      	str	r3, [r7, #80]	; 0x50

                        /* Setup the relative sector (this is zero for subsequent cluster.  */
                        relative_sector =  0;
 800b610:	2300      	movs	r3, #0
 800b612:	64fb      	str	r3, [r7, #76]	; 0x4c

                        /* Calculate the next logical sector.  */
                        logical_sector =   ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800b614:	69fb      	ldr	r3, [r7, #28]
 800b616:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                            (((ULONG)cluster - FX_FAT_ENTRY_START) *
 800b618:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b61a:	3b02      	subs	r3, #2
                             ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 800b61c:	69f9      	ldr	r1, [r7, #28]
 800b61e:	6d49      	ldr	r1, [r1, #84]	; 0x54
                            (((ULONG)cluster - FX_FAT_ENTRY_START) *
 800b620:	fb01 f303 	mul.w	r3, r1, r3
                        logical_sector =   ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800b624:	4413      	add	r3, r2
 800b626:	64bb      	str	r3, [r7, #72]	; 0x48
                    if (relative_sector < (media_ptr -> fx_media_sectors_per_cluster - 1))
 800b628:	e00c      	b.n	800b644 <_fx_directory_entry_read+0x41a>
                {

                    /* Non-FAT 32 root directory.  */

                    /* Advance to the next sector.  */
                    logical_sector++;
 800b62a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b62c:	3301      	adds	r3, #1
 800b62e:	64bb      	str	r3, [r7, #72]	; 0x48

                    /* Determine if the logical sector is valid.  */
                    if (logical_sector >= (ULONG)(media_ptr -> fx_media_root_sector_start + media_ptr -> fx_media_root_sectors))
 800b630:	69fb      	ldr	r3, [r7, #28]
 800b632:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b634:	69fb      	ldr	r3, [r7, #28]
 800b636:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b638:	4413      	add	r3, r2
 800b63a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b63c:	429a      	cmp	r2, r3
 800b63e:	d301      	bcc.n	800b644 <_fx_directory_entry_read+0x41a>
                    {

                        /* Trying to read past root directory - send error message back to caller.  */
                        return(FX_FILE_CORRUPT);
 800b640:	2308      	movs	r3, #8
 800b642:	e173      	b.n	800b92c <_fx_directory_entry_read+0x702>
                    }
                }

                /* Read the new sector.  */
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 800b644:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b646:	2200      	movs	r2, #0
 800b648:	469a      	mov	sl, r3
 800b64a:	4693      	mov	fp, r2
                                                          media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 800b64c:	69fb      	ldr	r3, [r7, #28]
 800b64e:	689b      	ldr	r3, [r3, #8]
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 800b650:	2203      	movs	r2, #3
 800b652:	9202      	str	r2, [sp, #8]
 800b654:	2201      	movs	r2, #1
 800b656:	9201      	str	r2, [sp, #4]
 800b658:	9300      	str	r3, [sp, #0]
 800b65a:	4652      	mov	r2, sl
 800b65c:	465b      	mov	r3, fp
 800b65e:	69f8      	ldr	r0, [r7, #28]
 800b660:	f008 f9bc 	bl	80139dc <_fx_utility_logical_sector_read>
 800b664:	6378      	str	r0, [r7, #52]	; 0x34

                /* Check I/O status.  */
                if (status != FX_SUCCESS)
 800b666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d001      	beq.n	800b670 <_fx_directory_entry_read+0x446>
                {
                    return(status);
 800b66c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b66e:	e15d      	b.n	800b92c <_fx_directory_entry_read+0x702>
                }

                /* Set the byte offset to 0 for new sector.  */
                byte_offset = 0;
 800b670:	2300      	movs	r3, #0
 800b672:	647b      	str	r3, [r7, #68]	; 0x44
 800b674:	e002      	b.n	800b67c <_fx_directory_entry_read+0x452>
            }
            else
            {

                /* Calculate the new byte offset.  */
                byte_offset += FX_DIR_ENTRY_SIZE;
 800b676:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b678:	3320      	adds	r3, #32
 800b67a:	647b      	str	r3, [r7, #68]	; 0x44
            }

            /* Calculate the next read pointer.  */
            read_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT) byte_offset;
 800b67c:	69fb      	ldr	r3, [r7, #28]
 800b67e:	689a      	ldr	r2, [r3, #8]
 800b680:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b682:	4413      	add	r3, r2
 800b684:	643b      	str	r3, [r7, #64]	; 0x40

            /* Move to the next entry.  */
            entry++;
 800b686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b688:	3301      	adds	r3, #1
 800b68a:	63bb      	str	r3, [r7, #56]	; 0x38
        } while (card > 0);
 800b68c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b68e:	2b00      	cmp	r3, #0
 800b690:	f47f af12 	bne.w	800b4b8 <_fx_directory_entry_read+0x28e>

        /* Set flag indicating long file name is present.  */
        destination_ptr -> fx_dir_entry_long_name_present = 1;
 800b694:	693b      	ldr	r3, [r7, #16]
 800b696:	2201      	movs	r2, #1
 800b698:	615a      	str	r2, [r3, #20]
 800b69a:	e001      	b.n	800b6a0 <_fx_directory_entry_read+0x476>
    }
    else
    {
        /* No long file name is present.  */
        get_short_name = 1;
 800b69c:	2301      	movs	r3, #1
 800b69e:	65bb      	str	r3, [r7, #88]	; 0x58
    }

    /* Determine if we need to clear the long name flag.  */
    if (get_short_name == 1)
 800b6a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b6a2:	2b01      	cmp	r3, #1
 800b6a4:	d102      	bne.n	800b6ac <_fx_directory_entry_read+0x482>
    {

        /* Clear the long name flag.  */
        destination_ptr -> fx_dir_entry_long_name_present =  0;
 800b6a6:	693b      	ldr	r3, [r7, #16]
 800b6a8:	2200      	movs	r2, #0
 800b6aa:	615a      	str	r2, [r3, #20]
    }

    /* Pickup the short file name.  */
    short_name_ptr[0] =  0;
 800b6ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6ae:	2200      	movs	r2, #0
 800b6b0:	701a      	strb	r2, [r3, #0]
    dotflag =  0;
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	65fb      	str	r3, [r7, #92]	; 0x5c
    for (i = 0, j = 0; i < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); i++)
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	667b      	str	r3, [r7, #100]	; 0x64
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	663b      	str	r3, [r7, #96]	; 0x60
 800b6be:	e03d      	b.n	800b73c <_fx_directory_entry_read+0x512>
    {

        /* Check for a NULL.  */
        if ((CHAR)read_ptr[i] == 0)
 800b6c0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b6c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b6c4:	4413      	add	r3, r2
 800b6c6:	781b      	ldrb	r3, [r3, #0]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d03b      	beq.n	800b744 <_fx_directory_entry_read+0x51a>
            break;
        }

        /* Check for a dot.  This happens for the first two directory entries, no
           extra dot is needed.  */
        if ((CHAR)read_ptr[i] == '.')
 800b6cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b6ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b6d0:	4413      	add	r3, r2
 800b6d2:	781b      	ldrb	r3, [r3, #0]
 800b6d4:	2b2e      	cmp	r3, #46	; 0x2e
 800b6d6:	d101      	bne.n	800b6dc <_fx_directory_entry_read+0x4b2>
        {
            dotflag =  2;
 800b6d8:	2302      	movs	r3, #2
 800b6da:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        /* Check for a space.  */
        if ((CHAR)read_ptr[i] == ' ')
 800b6dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b6de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b6e0:	4413      	add	r3, r2
 800b6e2:	781b      	ldrb	r3, [r3, #0]
 800b6e4:	2b20      	cmp	r3, #32
 800b6e6:	d105      	bne.n	800b6f4 <_fx_directory_entry_read+0x4ca>
        {
            /* Put a dot if a character comes after space.  */
            if (dotflag == 0)
 800b6e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d122      	bne.n	800b734 <_fx_directory_entry_read+0x50a>
            {
                dotflag =  1;
 800b6ee:	2301      	movs	r3, #1
 800b6f0:	65fb      	str	r3, [r7, #92]	; 0x5c
            }
            continue;
 800b6f2:	e01f      	b.n	800b734 <_fx_directory_entry_read+0x50a>
        }

        /* Check for the main short file name size.  */
        if (i == FX_DIR_NAME_SIZE)
 800b6f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b6f6:	2b08      	cmp	r3, #8
 800b6f8:	d104      	bne.n	800b704 <_fx_directory_entry_read+0x4da>
        {
            /* Check to see if we need to insert a dot.  */
            if (dotflag == 0)
 800b6fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d101      	bne.n	800b704 <_fx_directory_entry_read+0x4da>
            {
                dotflag =  1;
 800b700:	2301      	movs	r3, #1
 800b702:	65fb      	str	r3, [r7, #92]	; 0x5c
            }
        }

        /* Check to see if we need to add a dot.  */
        if (dotflag == 1)
 800b704:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b706:	2b01      	cmp	r3, #1
 800b708:	d108      	bne.n	800b71c <_fx_directory_entry_read+0x4f2>
        {
            /* Add dot to short file name.  */
            short_name_ptr[j++] =  '.';
 800b70a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b70c:	1c5a      	adds	r2, r3, #1
 800b70e:	663a      	str	r2, [r7, #96]	; 0x60
 800b710:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b712:	4413      	add	r3, r2
 800b714:	222e      	movs	r2, #46	; 0x2e
 800b716:	701a      	strb	r2, [r3, #0]
            dotflag =  2;    /* no more dot for spaces */
 800b718:	2302      	movs	r3, #2
 800b71a:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        /* Copy a character.  */
        short_name_ptr[j] =  (CHAR)read_ptr[i];
 800b71c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b71e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b720:	441a      	add	r2, r3
 800b722:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b724:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b726:	440b      	add	r3, r1
 800b728:	7812      	ldrb	r2, [r2, #0]
 800b72a:	701a      	strb	r2, [r3, #0]

        /* Increment size.  */
        j++;
 800b72c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b72e:	3301      	adds	r3, #1
 800b730:	663b      	str	r3, [r7, #96]	; 0x60
 800b732:	e000      	b.n	800b736 <_fx_directory_entry_read+0x50c>
            continue;
 800b734:	bf00      	nop
    for (i = 0, j = 0; i < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); i++)
 800b736:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b738:	3301      	adds	r3, #1
 800b73a:	667b      	str	r3, [r7, #100]	; 0x64
 800b73c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b73e:	2b0a      	cmp	r3, #10
 800b740:	d9be      	bls.n	800b6c0 <_fx_directory_entry_read+0x496>
 800b742:	e000      	b.n	800b746 <_fx_directory_entry_read+0x51c>
            break;
 800b744:	bf00      	nop
    }

    /* Determine if a long file name is present and its associated short file
       name is actually free.  */
    if ((destination_ptr -> fx_dir_entry_long_name_present) && (((UCHAR)short_name_ptr[0]) == (UCHAR)FX_DIR_ENTRY_FREE))
 800b746:	693b      	ldr	r3, [r7, #16]
 800b748:	695b      	ldr	r3, [r3, #20]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d00a      	beq.n	800b764 <_fx_directory_entry_read+0x53a>
 800b74e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b750:	781b      	ldrb	r3, [r3, #0]
 800b752:	2be5      	cmp	r3, #229	; 0xe5
 800b754:	d106      	bne.n	800b764 <_fx_directory_entry_read+0x53a>
    {

        /* Yes, the short file name is really free even though long file name entries directly precede it.
           In this case, simply place the free directory marker at the front of the long file name.  */
        destination_ptr -> fx_dir_entry_name[0] =  (CHAR)FX_DIR_ENTRY_FREE;
 800b756:	693b      	ldr	r3, [r7, #16]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	22e5      	movs	r2, #229	; 0xe5
 800b75c:	701a      	strb	r2, [r3, #0]
        short_name_ptr[0] =  (CHAR)0;
 800b75e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b760:	2200      	movs	r2, #0
 800b762:	701a      	strb	r2, [r3, #0]
    }

    /* Determine if the short name pointer is NULL while the read pointer is
       non-NULL.  */
    if ((short_name_ptr[0] == 0) && (read_ptr[0] == ' '))
 800b764:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b766:	781b      	ldrb	r3, [r3, #0]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d114      	bne.n	800b796 <_fx_directory_entry_read+0x56c>
 800b76c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b76e:	781b      	ldrb	r3, [r3, #0]
 800b770:	2b20      	cmp	r3, #32
 800b772:	d110      	bne.n	800b796 <_fx_directory_entry_read+0x56c>
    {

        /* This condition can occur with an all blank volume name.  Simply
           copy the volume name to the short name in this case.  */
        for (j = 0; j < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); j++)
 800b774:	2300      	movs	r3, #0
 800b776:	663b      	str	r3, [r7, #96]	; 0x60
 800b778:	e00a      	b.n	800b790 <_fx_directory_entry_read+0x566>
        {

            /* Copy a byte of the volume name.  */
            short_name_ptr[j] =  (CHAR)read_ptr[j];
 800b77a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b77c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b77e:	441a      	add	r2, r3
 800b780:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b782:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b784:	440b      	add	r3, r1
 800b786:	7812      	ldrb	r2, [r2, #0]
 800b788:	701a      	strb	r2, [r3, #0]
        for (j = 0; j < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); j++)
 800b78a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b78c:	3301      	adds	r3, #1
 800b78e:	663b      	str	r3, [r7, #96]	; 0x60
 800b790:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b792:	2b0a      	cmp	r3, #10
 800b794:	d9f1      	bls.n	800b77a <_fx_directory_entry_read+0x550>
        }
    }

    /* Set end of string to null.  */
    short_name_ptr[j] = 0;
 800b796:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b798:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b79a:	4413      	add	r3, r2
 800b79c:	2200      	movs	r2, #0
 800b79e:	701a      	strb	r2, [r3, #0]

    /* Load up the destination directory entry.  */
    read_ptr += (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE);
 800b7a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b7a2:	330b      	adds	r3, #11
 800b7a4:	643b      	str	r3, [r7, #64]	; 0x40

    /* Copy the attribute into the destination.  */
    destination_ptr -> fx_dir_entry_attributes =  *read_ptr++;
 800b7a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b7a8:	1c5a      	adds	r2, r3, #1
 800b7aa:	643a      	str	r2, [r7, #64]	; 0x40
 800b7ac:	781a      	ldrb	r2, [r3, #0]
 800b7ae:	693b      	ldr	r3, [r7, #16]
 800b7b0:	771a      	strb	r2, [r3, #28]

    /* Pickup the reserved byte.  */
    destination_ptr -> fx_dir_entry_reserved =  *read_ptr++;
 800b7b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b7b4:	1c5a      	adds	r2, r3, #1
 800b7b6:	643a      	str	r2, [r7, #64]	; 0x40
 800b7b8:	781a      	ldrb	r2, [r3, #0]
 800b7ba:	693b      	ldr	r3, [r7, #16]
 800b7bc:	775a      	strb	r2, [r3, #29]
         BIT3 - set if 8.3 is all in lower case and no extended filename.
         BIT4 - set for file, clear for directory entry if no extended filename.

       This is true for all NT systems. Prior to NT follows MSDOS FAT documentation and
       is set to 0x00, all bits cleared. Therefore if BIT3 is set force lowercase.  */
    if ((get_short_name) && (destination_ptr -> fx_dir_entry_reserved & 0x08))
 800b7be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d02a      	beq.n	800b81a <_fx_directory_entry_read+0x5f0>
 800b7c4:	693b      	ldr	r3, [r7, #16]
 800b7c6:	7f5b      	ldrb	r3, [r3, #29]
 800b7c8:	f003 0308 	and.w	r3, r3, #8
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d024      	beq.n	800b81a <_fx_directory_entry_read+0x5f0>
    {

        /* Microsoft undocumented NT file name feature... convert short name to lower
           case.  */
        for (j = 0; j <= (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE) && (short_name_ptr[j] != 0x00); j++)
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	663b      	str	r3, [r7, #96]	; 0x60
 800b7d4:	e018      	b.n	800b808 <_fx_directory_entry_read+0x5de>
        {

            /* Determine if an upper case character is present.  */
            if ((short_name_ptr[j] >= 'A') && (short_name_ptr[j] <= 'Z'))
 800b7d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b7d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b7da:	4413      	add	r3, r2
 800b7dc:	781b      	ldrb	r3, [r3, #0]
 800b7de:	2b40      	cmp	r3, #64	; 0x40
 800b7e0:	d90f      	bls.n	800b802 <_fx_directory_entry_read+0x5d8>
 800b7e2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b7e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b7e6:	4413      	add	r3, r2
 800b7e8:	781b      	ldrb	r3, [r3, #0]
 800b7ea:	2b5a      	cmp	r3, #90	; 0x5a
 800b7ec:	d809      	bhi.n	800b802 <_fx_directory_entry_read+0x5d8>
            {

                /* Yes, an upper case character is present. Force it to lower case.  */
                short_name_ptr[j] =  (CHAR)(short_name_ptr[j] + 32);
 800b7ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b7f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b7f2:	4413      	add	r3, r2
 800b7f4:	781a      	ldrb	r2, [r3, #0]
 800b7f6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b7f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b7fa:	440b      	add	r3, r1
 800b7fc:	3220      	adds	r2, #32
 800b7fe:	b2d2      	uxtb	r2, r2
 800b800:	701a      	strb	r2, [r3, #0]
        for (j = 0; j <= (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE) && (short_name_ptr[j] != 0x00); j++)
 800b802:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b804:	3301      	adds	r3, #1
 800b806:	663b      	str	r3, [r7, #96]	; 0x60
 800b808:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b80a:	2b0b      	cmp	r3, #11
 800b80c:	d805      	bhi.n	800b81a <_fx_directory_entry_read+0x5f0>
 800b80e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b810:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b812:	4413      	add	r3, r2
 800b814:	781b      	ldrb	r3, [r3, #0]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d1dd      	bne.n	800b7d6 <_fx_directory_entry_read+0x5ac>
            }
        }
    }

    /* Pickup the created time in milliseconds.  */
    destination_ptr -> fx_dir_entry_created_time_ms =  *read_ptr++;
 800b81a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b81c:	1c5a      	adds	r2, r3, #1
 800b81e:	643a      	str	r2, [r7, #64]	; 0x40
 800b820:	781a      	ldrb	r2, [r3, #0]
 800b822:	693b      	ldr	r3, [r7, #16]
 800b824:	779a      	strb	r2, [r3, #30]

    /* Pickup the created time.  */
    destination_ptr -> fx_dir_entry_created_time =  _fx_utility_16_unsigned_read(read_ptr);
 800b826:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800b828:	f006 fc64 	bl	80120f4 <_fx_utility_16_unsigned_read>
 800b82c:	4602      	mov	r2, r0
 800b82e:	693b      	ldr	r3, [r7, #16]
 800b830:	621a      	str	r2, [r3, #32]
    read_ptr =  read_ptr + 2;  /* Always 2 bytes */
 800b832:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b834:	3302      	adds	r3, #2
 800b836:	643b      	str	r3, [r7, #64]	; 0x40

    /* Pickup the created date.  */
    destination_ptr -> fx_dir_entry_created_date =  _fx_utility_16_unsigned_read(read_ptr);
 800b838:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800b83a:	f006 fc5b 	bl	80120f4 <_fx_utility_16_unsigned_read>
 800b83e:	4602      	mov	r2, r0
 800b840:	693b      	ldr	r3, [r7, #16]
 800b842:	625a      	str	r2, [r3, #36]	; 0x24
    read_ptr =  read_ptr + 2;  /* Always 2 bytes */
 800b844:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b846:	3302      	adds	r3, #2
 800b848:	643b      	str	r3, [r7, #64]	; 0x40

    /* Pickup the last accessed date.  */
    destination_ptr -> fx_dir_entry_last_accessed_date =  _fx_utility_16_unsigned_read(read_ptr);
 800b84a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800b84c:	f006 fc52 	bl	80120f4 <_fx_utility_16_unsigned_read>
 800b850:	4602      	mov	r2, r0
 800b852:	693b      	ldr	r3, [r7, #16]
 800b854:	629a      	str	r2, [r3, #40]	; 0x28
    read_ptr =  read_ptr + 2;  /* Always 2 bytes */
 800b856:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b858:	3302      	adds	r3, #2
 800b85a:	643b      	str	r3, [r7, #64]	; 0x40

    /* read the upper 2 bytes of starting cluster - required only for 32 bit FAT */
    if (media_ptr -> fx_media_32_bit_FAT)
 800b85c:	69fb      	ldr	r3, [r7, #28]
 800b85e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b860:	2b00      	cmp	r3, #0
 800b862:	d00b      	beq.n	800b87c <_fx_directory_entry_read+0x652>
    {

        /* FAT32 only.  */
        destination_ptr -> fx_dir_entry_cluster =  _fx_utility_16_unsigned_read(read_ptr);
 800b864:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800b866:	f006 fc45 	bl	80120f4 <_fx_utility_16_unsigned_read>
 800b86a:	4602      	mov	r2, r0
 800b86c:	693b      	ldr	r3, [r7, #16]
 800b86e:	635a      	str	r2, [r3, #52]	; 0x34
        destination_ptr -> fx_dir_entry_cluster <<= 16;
 800b870:	693b      	ldr	r3, [r7, #16]
 800b872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b874:	041a      	lsls	r2, r3, #16
 800b876:	693b      	ldr	r3, [r7, #16]
 800b878:	635a      	str	r2, [r3, #52]	; 0x34
 800b87a:	e002      	b.n	800b882 <_fx_directory_entry_read+0x658>
    }
    else
    {
        /* Not required for non FAT32.  */
        destination_ptr -> fx_dir_entry_cluster =  0;
 800b87c:	693b      	ldr	r3, [r7, #16]
 800b87e:	2200      	movs	r2, #0
 800b880:	635a      	str	r2, [r3, #52]	; 0x34
    }

    /* Advance the read pointer.  */
    read_ptr =  read_ptr + 2;  /* Always 2 bytes */
 800b882:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b884:	3302      	adds	r3, #2
 800b886:	643b      	str	r3, [r7, #64]	; 0x40

    /* Copy the time into the destination.  */
    destination_ptr -> fx_dir_entry_time =  _fx_utility_16_unsigned_read(read_ptr);
 800b888:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800b88a:	f006 fc33 	bl	80120f4 <_fx_utility_16_unsigned_read>
 800b88e:	4602      	mov	r2, r0
 800b890:	693b      	ldr	r3, [r7, #16]
 800b892:	62da      	str	r2, [r3, #44]	; 0x2c
    read_ptr =  read_ptr + 2;  /* Always 2 bytes */
 800b894:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b896:	3302      	adds	r3, #2
 800b898:	643b      	str	r3, [r7, #64]	; 0x40

    /* Copy the date into the destination.  */
    destination_ptr -> fx_dir_entry_date =  _fx_utility_16_unsigned_read(read_ptr);
 800b89a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800b89c:	f006 fc2a 	bl	80120f4 <_fx_utility_16_unsigned_read>
 800b8a0:	4602      	mov	r2, r0
 800b8a2:	693b      	ldr	r3, [r7, #16]
 800b8a4:	631a      	str	r2, [r3, #48]	; 0x30
    read_ptr =  read_ptr + 2;  /* Always 2 bytes */
 800b8a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b8a8:	3302      	adds	r3, #2
 800b8aa:	643b      	str	r3, [r7, #64]	; 0x40

    /* Copy the starting cluster into the destination.  */
    destination_ptr -> fx_dir_entry_cluster +=  _fx_utility_16_unsigned_read(read_ptr);
 800b8ac:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800b8ae:	f006 fc21 	bl	80120f4 <_fx_utility_16_unsigned_read>
 800b8b2:	4602      	mov	r2, r0
 800b8b4:	693b      	ldr	r3, [r7, #16]
 800b8b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8b8:	441a      	add	r2, r3
 800b8ba:	693b      	ldr	r3, [r7, #16]
 800b8bc:	635a      	str	r2, [r3, #52]	; 0x34
    read_ptr =  read_ptr + 2;  /* Always 2 bytes */
 800b8be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b8c0:	3302      	adds	r3, #2
 800b8c2:	643b      	str	r3, [r7, #64]	; 0x40

    /* Copy the file size into the destination.  */
    destination_ptr -> fx_dir_entry_file_size =  _fx_utility_32_unsigned_read(read_ptr);
 800b8c4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800b8c6:	f006 fc3d 	bl	8012144 <_fx_utility_32_unsigned_read>
 800b8ca:	4603      	mov	r3, r0
 800b8cc:	2200      	movs	r2, #0
 800b8ce:	461c      	mov	r4, r3
 800b8d0:	4615      	mov	r5, r2
 800b8d2:	693b      	ldr	r3, [r7, #16]
 800b8d4:	e9c3 450e 	strd	r4, r5, [r3, #56]	; 0x38

    /* Clear the destination search specific fields.  */
    destination_ptr -> fx_dir_entry_last_search_cluster =           0;
 800b8d8:	693b      	ldr	r3, [r7, #16]
 800b8da:	2200      	movs	r2, #0
 800b8dc:	651a      	str	r2, [r3, #80]	; 0x50
    destination_ptr -> fx_dir_entry_last_search_relative_cluster =  0;
 800b8de:	693b      	ldr	r3, [r7, #16]
 800b8e0:	2200      	movs	r2, #0
 800b8e2:	655a      	str	r2, [r3, #84]	; 0x54
    destination_ptr -> fx_dir_entry_last_search_log_sector =        0;
 800b8e4:	6939      	ldr	r1, [r7, #16]
 800b8e6:	f04f 0200 	mov.w	r2, #0
 800b8ea:	f04f 0300 	mov.w	r3, #0
 800b8ee:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
    destination_ptr -> fx_dir_entry_last_search_byte_offset =       0;
 800b8f2:	693b      	ldr	r3, [r7, #16]
 800b8f4:	2200      	movs	r2, #0
 800b8f6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Remember the entry number.  */
    destination_ptr -> fx_dir_entry_number =  entry;
 800b8f8:	693b      	ldr	r3, [r7, #16]
 800b8fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b8fc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Return entry number.  */
    *entry_ptr =  entry;
 800b8fe:	697b      	ldr	r3, [r7, #20]
 800b900:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b902:	601a      	str	r2, [r3, #0]

    /* Determine if we should remember the last cluster and relative cluster.  */
    if (source_dir)
 800b904:	69bb      	ldr	r3, [r7, #24]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d00f      	beq.n	800b92a <_fx_directory_entry_read+0x700>
    {

        /* Yes, remember the last cluster and relative cluster for a subsequent call
           to read a directory entry.  */
        source_dir -> fx_dir_entry_last_search_cluster =           cluster;
 800b90a:	69bb      	ldr	r3, [r7, #24]
 800b90c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b90e:	651a      	str	r2, [r3, #80]	; 0x50
        source_dir -> fx_dir_entry_last_search_relative_cluster =  relative_cluster;
 800b910:	69bb      	ldr	r3, [r7, #24]
 800b912:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b914:	655a      	str	r2, [r3, #84]	; 0x54

        /* Also remember several other items that are unique to the directory... just to verify that the
           search information can be used.  */
        source_dir -> fx_dir_entry_last_search_log_sector =        source_dir -> fx_dir_entry_log_sector;
 800b916:	69bb      	ldr	r3, [r7, #24]
 800b918:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800b91c:	69b9      	ldr	r1, [r7, #24]
 800b91e:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
        source_dir -> fx_dir_entry_last_search_byte_offset =       source_dir -> fx_dir_entry_byte_offset;
 800b922:	69bb      	ldr	r3, [r7, #24]
 800b924:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b926:	69bb      	ldr	r3, [r7, #24]
 800b928:	661a      	str	r2, [r3, #96]	; 0x60
        destination_ptr -> fx_dir_entry_type = FX_EXFAT_DIR_ENTRY_TYPE_FILE_DIRECTORY;
    }
#endif /* FX_ENABLE_EXFAT */

    /* Return success to the caller.  */
    return(FX_SUCCESS);
 800b92a:	2300      	movs	r3, #0
}
 800b92c:	4618      	mov	r0, r3
 800b92e:	3768      	adds	r7, #104	; 0x68
 800b930:	46bd      	mov	sp, r7
 800b932:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

0800b938 <_fx_directory_entry_write>:
/*  03-02-2021     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1.5  */
/*                                                                        */
/**************************************************************************/
UINT  _fx_directory_entry_write(FX_MEDIA *media_ptr, FX_DIR_ENTRY *entry_ptr)
{
 800b938:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b93c:	b0a2      	sub	sp, #136	; 0x88
 800b93e:	af04      	add	r7, sp, #16
 800b940:	6178      	str	r0, [r7, #20]
 800b942:	6139      	str	r1, [r7, #16]


#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of directory entry write requests.  */
    media_ptr -> fx_media_directory_entry_writes++;
 800b944:	697b      	ldr	r3, [r7, #20]
 800b946:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 800b94a:	1c5a      	adds	r2, r3, #1
 800b94c:	697b      	ldr	r3, [r7, #20]
 800b94e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_DIR_ENTRY_WRITE, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Determine if this is entry is being deleted.  */
    if (((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_FREE) &&
 800b952:	693b      	ldr	r3, [r7, #16]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	781b      	ldrb	r3, [r3, #0]
 800b958:	2be5      	cmp	r3, #229	; 0xe5
 800b95a:	d109      	bne.n	800b970 <_fx_directory_entry_write+0x38>
        ((UCHAR)entry_ptr -> fx_dir_entry_short_name[0] == (UCHAR)FX_DIR_ENTRY_FREE))
 800b95c:	693b      	ldr	r3, [r7, #16]
 800b95e:	791b      	ldrb	r3, [r3, #4]
    if (((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_FREE) &&
 800b960:	2be5      	cmp	r3, #229	; 0xe5
 800b962:	d105      	bne.n	800b970 <_fx_directory_entry_write+0x38>
    {

        /* Yes, this is a request to delete the entry. Set the flag to remember this.  */
        delete_flag =  FX_TRUE;
 800b964:	2301      	movs	r3, #1
 800b966:	66bb      	str	r3, [r7, #104]	; 0x68

        /* Null the short file name.  */
        entry_ptr -> fx_dir_entry_short_name[0] =  0;
 800b968:	693b      	ldr	r3, [r7, #16]
 800b96a:	2200      	movs	r2, #0
 800b96c:	711a      	strb	r2, [r3, #4]
 800b96e:	e001      	b.n	800b974 <_fx_directory_entry_write+0x3c>
    }
    else
    {

        /* Not a deleted entry. Set the flag to false.  */
        delete_flag =  FX_FALSE;
 800b970:	2300      	movs	r3, #0
 800b972:	66bb      	str	r3, [r7, #104]	; 0x68
    }

    /* Pickup the byte offset of the entry.  */
    byte_offset = entry_ptr -> fx_dir_entry_byte_offset;
 800b974:	693b      	ldr	r3, [r7, #16]
 800b976:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b978:	637b      	str	r3, [r7, #52]	; 0x34

    /* Pickup the logical sector of the entry.  */
    logical_sector = (ULONG)entry_ptr -> fx_dir_entry_log_sector;
 800b97a:	693b      	ldr	r3, [r7, #16]
 800b97c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800b980:	4613      	mov	r3, r2
 800b982:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Figure out where what cluster we are in.  */
    if (logical_sector >= (ULONG)(media_ptr -> fx_media_data_sector_start))
 800b984:	697b      	ldr	r3, [r7, #20]
 800b986:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b988:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b98a:	429a      	cmp	r2, r3
 800b98c:	d316      	bcc.n	800b9bc <_fx_directory_entry_write+0x84>
    {

        /* Calculate the cluster that this logical sector is in.  */
        cluster =  (logical_sector - media_ptr -> fx_media_data_sector_start) / (media_ptr -> fx_media_sectors_per_cluster) + FX_FAT_ENTRY_START;
 800b98e:	697b      	ldr	r3, [r7, #20]
 800b990:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b992:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b994:	1ad2      	subs	r2, r2, r3
 800b996:	697b      	ldr	r3, [r7, #20]
 800b998:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b99a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b99e:	3302      	adds	r3, #2
 800b9a0:	633b      	str	r3, [r7, #48]	; 0x30

        /* Calculate the relative cluster.  */
        relative_sector =  logical_sector -  (((ULONG)media_ptr -> fx_media_data_sector_start) +
 800b9a2:	697b      	ldr	r3, [r7, #20]
 800b9a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                                              (((ULONG)cluster - FX_FAT_ENTRY_START) *
 800b9a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9a8:	3b02      	subs	r3, #2
                                               ((ULONG)media_ptr -> fx_media_sectors_per_cluster)));
 800b9aa:	6979      	ldr	r1, [r7, #20]
 800b9ac:	6d49      	ldr	r1, [r1, #84]	; 0x54
                                              (((ULONG)cluster - FX_FAT_ENTRY_START) *
 800b9ae:	fb01 f303 	mul.w	r3, r1, r3
        relative_sector =  logical_sector -  (((ULONG)media_ptr -> fx_media_data_sector_start) +
 800b9b2:	4413      	add	r3, r2
 800b9b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b9b6:	1ad3      	subs	r3, r2, r3
 800b9b8:	63bb      	str	r3, [r7, #56]	; 0x38
 800b9ba:	e003      	b.n	800b9c4 <_fx_directory_entry_write+0x8c>
    }
    else
    {

        /* Clear the cluster and the relative sector.  */
        cluster =  0;
 800b9bc:	2300      	movs	r3, #0
 800b9be:	633b      	str	r3, [r7, #48]	; 0x30
        relative_sector =  0;
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Read the logical directory sector.  */
    status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) entry_ptr -> fx_dir_entry_log_sector,
 800b9c4:	693b      	ldr	r3, [r7, #16]
 800b9c6:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
                                              media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 800b9ca:	697b      	ldr	r3, [r7, #20]
 800b9cc:	689a      	ldr	r2, [r3, #8]
    status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) entry_ptr -> fx_dir_entry_log_sector,
 800b9ce:	2303      	movs	r3, #3
 800b9d0:	9302      	str	r3, [sp, #8]
 800b9d2:	2301      	movs	r3, #1
 800b9d4:	9301      	str	r3, [sp, #4]
 800b9d6:	9200      	str	r2, [sp, #0]
 800b9d8:	4602      	mov	r2, r0
 800b9da:	460b      	mov	r3, r1
 800b9dc:	6978      	ldr	r0, [r7, #20]
 800b9de:	f007 fffd 	bl	80139dc <_fx_utility_logical_sector_read>
 800b9e2:	62f8      	str	r0, [r7, #44]	; 0x2c

    /* Determine if an error occurred.  */
    if (status != FX_SUCCESS)
 800b9e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d002      	beq.n	800b9f0 <_fx_directory_entry_write+0xb8>
    {

        /* Return the error status.  */
        return(status);
 800b9ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9ec:	f000 bdda 	b.w	800c5a4 <_fx_directory_entry_write+0xc6c>
    }

    /* Setup a pointer into the buffer.  */
    sector_base_ptr = (UCHAR *)media_ptr -> fx_media_memory_buffer;
 800b9f0:	697b      	ldr	r3, [r7, #20]
 800b9f2:	689b      	ldr	r3, [r3, #8]
 800b9f4:	673b      	str	r3, [r7, #112]	; 0x70
    work_ptr =  sector_base_ptr + (UINT)entry_ptr -> fx_dir_entry_byte_offset;
 800b9f6:	693b      	ldr	r3, [r7, #16]
 800b9f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b9fa:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800b9fc:	4413      	add	r3, r2
 800b9fe:	677b      	str	r3, [r7, #116]	; 0x74
    changed_size = 0;
    changed_offset = entry_ptr -> fx_dir_entry_byte_offset;
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Determine if a long file name is present.  */
    if (entry_ptr -> fx_dir_entry_long_name_present)
 800ba00:	693b      	ldr	r3, [r7, #16]
 800ba02:	695b      	ldr	r3, [r3, #20]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	f000 83cc 	beq.w	800c1a2 <_fx_directory_entry_write+0x86a>
    {

        /* Yes, long name is present - prepare short name and write out this name.  */
        for (len = 0, i = 0, dotpos = 0, dotfound = 0; entry_ptr -> fx_dir_entry_name[len]; len++)
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	653b      	str	r3, [r7, #80]	; 0x50
 800ba0e:	2300      	movs	r3, #0
 800ba10:	667b      	str	r3, [r7, #100]	; 0x64
 800ba12:	2300      	movs	r3, #0
 800ba14:	64bb      	str	r3, [r7, #72]	; 0x48
 800ba16:	2300      	movs	r3, #0
 800ba18:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ba1a:	e02c      	b.n	800ba76 <_fx_directory_entry_write+0x13e>
        {

            /* Check for a dot.  */
            if (entry_ptr -> fx_dir_entry_name[len] == '.')
 800ba1c:	693b      	ldr	r3, [r7, #16]
 800ba1e:	681a      	ldr	r2, [r3, #0]
 800ba20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba22:	4413      	add	r3, r2
 800ba24:	781b      	ldrb	r3, [r3, #0]
 800ba26:	2b2e      	cmp	r3, #46	; 0x2e
 800ba28:	d108      	bne.n	800ba3c <_fx_directory_entry_write+0x104>
            {

                /* Check for leading dot. */
                if (len == 0)
 800ba2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d01e      	beq.n	800ba6e <_fx_directory_entry_write+0x136>
                    continue;
                }

                /* Yes, a dot is present.  From this position the extension will
                   be written.  */
                dotfound = i;
 800ba30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ba32:	64fb      	str	r3, [r7, #76]	; 0x4c
                dotpos   = len + 1;
 800ba34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba36:	3301      	adds	r3, #1
 800ba38:	64bb      	str	r3, [r7, #72]	; 0x48
                continue;
 800ba3a:	e019      	b.n	800ba70 <_fx_directory_entry_write+0x138>
            }

            /* Check for non-space and within the short file name length.  */
            if ((entry_ptr -> fx_dir_entry_name[len] != ' ') && (i < 8))
 800ba3c:	693b      	ldr	r3, [r7, #16]
 800ba3e:	681a      	ldr	r2, [r3, #0]
 800ba40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba42:	4413      	add	r3, r2
 800ba44:	781b      	ldrb	r3, [r3, #0]
 800ba46:	2b20      	cmp	r3, #32
 800ba48:	d012      	beq.n	800ba70 <_fx_directory_entry_write+0x138>
 800ba4a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ba4c:	2b07      	cmp	r3, #7
 800ba4e:	d80f      	bhi.n	800ba70 <_fx_directory_entry_write+0x138>
            {

                /* Copy characters into the short file name area.  */
                shortname[i] = entry_ptr -> fx_dir_entry_name[len];
 800ba50:	693b      	ldr	r3, [r7, #16]
 800ba52:	681a      	ldr	r2, [r3, #0]
 800ba54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba56:	4413      	add	r3, r2
 800ba58:	7819      	ldrb	r1, [r3, #0]
 800ba5a:	f107 021c 	add.w	r2, r7, #28
 800ba5e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ba60:	4413      	add	r3, r2
 800ba62:	460a      	mov	r2, r1
 800ba64:	701a      	strb	r2, [r3, #0]
                i++;
 800ba66:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ba68:	3301      	adds	r3, #1
 800ba6a:	667b      	str	r3, [r7, #100]	; 0x64
 800ba6c:	e000      	b.n	800ba70 <_fx_directory_entry_write+0x138>
                    continue;
 800ba6e:	bf00      	nop
        for (len = 0, i = 0, dotpos = 0, dotfound = 0; entry_ptr -> fx_dir_entry_name[len]; len++)
 800ba70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba72:	3301      	adds	r3, #1
 800ba74:	653b      	str	r3, [r7, #80]	; 0x50
 800ba76:	693b      	ldr	r3, [r7, #16]
 800ba78:	681a      	ldr	r2, [r3, #0]
 800ba7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba7c:	4413      	add	r3, r2
 800ba7e:	781b      	ldrb	r3, [r3, #0]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d1cb      	bne.n	800ba1c <_fx_directory_entry_write+0xe4>
            }
        }

        /* Fill remaining short file name with spaces.  */
        for (j = i; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; j++)
 800ba84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ba86:	663b      	str	r3, [r7, #96]	; 0x60
 800ba88:	e008      	b.n	800ba9c <_fx_directory_entry_write+0x164>
        {
            shortname[j] =  ' ';
 800ba8a:	f107 021c 	add.w	r2, r7, #28
 800ba8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ba90:	4413      	add	r3, r2
 800ba92:	2220      	movs	r2, #32
 800ba94:	701a      	strb	r2, [r3, #0]
        for (j = i; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; j++)
 800ba96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ba98:	3301      	adds	r3, #1
 800ba9a:	663b      	str	r3, [r7, #96]	; 0x60
 800ba9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ba9e:	2b0a      	cmp	r3, #10
 800baa0:	d9f3      	bls.n	800ba8a <_fx_directory_entry_write+0x152>
        }

        /* Determine if a dot was encountered.  */
        if (dotpos)
 800baa2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d03e      	beq.n	800bb26 <_fx_directory_entry_write+0x1ee>
        {

            /* Process relative to the dot position.  */
            if (entry_ptr -> fx_dir_entry_name[dotpos])
 800baa8:	693b      	ldr	r3, [r7, #16]
 800baaa:	681a      	ldr	r2, [r3, #0]
 800baac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800baae:	4413      	add	r3, r2
 800bab0:	781b      	ldrb	r3, [r3, #0]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d008      	beq.n	800bac8 <_fx_directory_entry_write+0x190>
            {
                shortname[8] = entry_ptr -> fx_dir_entry_name[dotpos++];
 800bab6:	693b      	ldr	r3, [r7, #16]
 800bab8:	681a      	ldr	r2, [r3, #0]
 800baba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800babc:	1c59      	adds	r1, r3, #1
 800babe:	64b9      	str	r1, [r7, #72]	; 0x48
 800bac0:	4413      	add	r3, r2
 800bac2:	781b      	ldrb	r3, [r3, #0]
 800bac4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            }
            if (entry_ptr -> fx_dir_entry_name[dotpos])
 800bac8:	693b      	ldr	r3, [r7, #16]
 800baca:	681a      	ldr	r2, [r3, #0]
 800bacc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bace:	4413      	add	r3, r2
 800bad0:	781b      	ldrb	r3, [r3, #0]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d008      	beq.n	800bae8 <_fx_directory_entry_write+0x1b0>
            {
                shortname[9] = entry_ptr -> fx_dir_entry_name[dotpos++];
 800bad6:	693b      	ldr	r3, [r7, #16]
 800bad8:	681a      	ldr	r2, [r3, #0]
 800bada:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800badc:	1c59      	adds	r1, r3, #1
 800bade:	64b9      	str	r1, [r7, #72]	; 0x48
 800bae0:	4413      	add	r3, r2
 800bae2:	781b      	ldrb	r3, [r3, #0]
 800bae4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
            }
            if (entry_ptr -> fx_dir_entry_name[dotpos])
 800bae8:	693b      	ldr	r3, [r7, #16]
 800baea:	681a      	ldr	r2, [r3, #0]
 800baec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800baee:	4413      	add	r3, r2
 800baf0:	781b      	ldrb	r3, [r3, #0]
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d008      	beq.n	800bb08 <_fx_directory_entry_write+0x1d0>
            {
                shortname[10] = entry_ptr -> fx_dir_entry_name[dotpos++];
 800baf6:	693b      	ldr	r3, [r7, #16]
 800baf8:	681a      	ldr	r2, [r3, #0]
 800bafa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bafc:	1c59      	adds	r1, r3, #1
 800bafe:	64b9      	str	r1, [r7, #72]	; 0x48
 800bb00:	4413      	add	r3, r2
 800bb02:	781b      	ldrb	r3, [r3, #0]
 800bb04:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            }

            /* Determine if additional spaces are needed.  */
            i = dotfound;
 800bb08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb0a:	667b      	str	r3, [r7, #100]	; 0x64

            for (; dotfound <= 7; dotfound++)
 800bb0c:	e008      	b.n	800bb20 <_fx_directory_entry_write+0x1e8>
            {
                /* Add space...  */
                shortname[dotfound] = ' ';
 800bb0e:	f107 021c 	add.w	r2, r7, #28
 800bb12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb14:	4413      	add	r3, r2
 800bb16:	2220      	movs	r2, #32
 800bb18:	701a      	strb	r2, [r3, #0]
            for (; dotfound <= 7; dotfound++)
 800bb1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb1c:	3301      	adds	r3, #1
 800bb1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bb20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb22:	2b07      	cmp	r3, #7
 800bb24:	d9f3      	bls.n	800bb0e <_fx_directory_entry_write+0x1d6>
            }
        }

        /* Each entry contains 13 unicode entries.  Calculate the remainder.  */
        if (len % 13 == 0)
 800bb26:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bb28:	4b8e      	ldr	r3, [pc, #568]	; (800bd64 <_fx_directory_entry_write+0x42c>)
 800bb2a:	fba3 2301 	umull	r2, r3, r3, r1
 800bb2e:	089a      	lsrs	r2, r3, #2
 800bb30:	4613      	mov	r3, r2
 800bb32:	005b      	lsls	r3, r3, #1
 800bb34:	4413      	add	r3, r2
 800bb36:	009b      	lsls	r3, r3, #2
 800bb38:	4413      	add	r3, r2
 800bb3a:	1aca      	subs	r2, r1, r3
 800bb3c:	2a00      	cmp	r2, #0
 800bb3e:	d106      	bne.n	800bb4e <_fx_directory_entry_write+0x216>
        {
            card =  len / 13;
 800bb40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb42:	4a88      	ldr	r2, [pc, #544]	; (800bd64 <_fx_directory_entry_write+0x42c>)
 800bb44:	fba2 2303 	umull	r2, r3, r2, r3
 800bb48:	089b      	lsrs	r3, r3, #2
 800bb4a:	657b      	str	r3, [r7, #84]	; 0x54
 800bb4c:	e006      	b.n	800bb5c <_fx_directory_entry_write+0x224>
        }
        else
        {
            card =  len / 13 + 1;
 800bb4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb50:	4a84      	ldr	r2, [pc, #528]	; (800bd64 <_fx_directory_entry_write+0x42c>)
 800bb52:	fba2 2303 	umull	r2, r3, r2, r3
 800bb56:	089b      	lsrs	r3, r3, #2
 800bb58:	3301      	adds	r3, #1
 800bb5a:	657b      	str	r3, [r7, #84]	; 0x54
        }

        /* Default the name match to true.  */
        match =  FX_TRUE;
 800bb5c:	2301      	movs	r3, #1
 800bb5e:	647b      	str	r3, [r7, #68]	; 0x44

        /* Loop through the newly derived short name and the original name and look
           for a non-matching character.  */
        l =  0;
 800bb60:	2300      	movs	r3, #0
 800bb62:	65bb      	str	r3, [r7, #88]	; 0x58
        k =  0;
 800bb64:	2300      	movs	r3, #0
 800bb66:	65fb      	str	r3, [r7, #92]	; 0x5c
        while (k < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE)
 800bb68:	e03f      	b.n	800bbea <_fx_directory_entry_write+0x2b2>
        {

            /* Determine if a space is detected in the short name. If so,
               advance to the extension index.  */
            if (shortname[k] == ' ')
 800bb6a:	f107 021c 	add.w	r2, r7, #28
 800bb6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bb70:	4413      	add	r3, r2
 800bb72:	781b      	ldrb	r3, [r3, #0]
 800bb74:	2b20      	cmp	r3, #32
 800bb76:	d116      	bne.n	800bba6 <_fx_directory_entry_write+0x26e>
            {

                /* The first pad space was detected. First, check for a name
                   without an extension.  */
                if (entry_ptr -> fx_dir_entry_name[l] == FX_NULL)
 800bb78:	693b      	ldr	r3, [r7, #16]
 800bb7a:	681a      	ldr	r2, [r3, #0]
 800bb7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bb7e:	4413      	add	r3, r2
 800bb80:	781b      	ldrb	r3, [r3, #0]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d035      	beq.n	800bbf2 <_fx_directory_entry_write+0x2ba>
                    /* All is okay, get out of the loop!  */
                    break;
                }

                /* Now check for a period in the long name... if not, there is a non-match!  */
                if (entry_ptr -> fx_dir_entry_name[l] != '.')
 800bb86:	693b      	ldr	r3, [r7, #16]
 800bb88:	681a      	ldr	r2, [r3, #0]
 800bb8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bb8c:	4413      	add	r3, r2
 800bb8e:	781b      	ldrb	r3, [r3, #0]
 800bb90:	2b2e      	cmp	r3, #46	; 0x2e
 800bb92:	d002      	beq.n	800bb9a <_fx_directory_entry_write+0x262>
                {

                    /* Set the match flag to false and exit the loop.  */
                    match =  FX_FALSE;
 800bb94:	2300      	movs	r3, #0
 800bb96:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
 800bb98:	e02c      	b.n	800bbf4 <_fx_directory_entry_write+0x2bc>
                }

                /* Otherwise move short file name index to the extension area and
                   increment the long file name index.  */
                k =  8;
 800bb9a:	2308      	movs	r3, #8
 800bb9c:	65fb      	str	r3, [r7, #92]	; 0x5c
                l++;
 800bb9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bba0:	3301      	adds	r3, #1
 800bba2:	65bb      	str	r3, [r7, #88]	; 0x58

                /* Restart the loop at the top.  */
                continue;
 800bba4:	e021      	b.n	800bbea <_fx_directory_entry_write+0x2b2>
            }

            /* Check for the dot for the 8.3 match... it is no longer in the
               shortname but possibly still present in the long name.  */
            if ((k == 8) && (entry_ptr -> fx_dir_entry_name[l] == '.'))
 800bba6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bba8:	2b08      	cmp	r3, #8
 800bbaa:	d109      	bne.n	800bbc0 <_fx_directory_entry_write+0x288>
 800bbac:	693b      	ldr	r3, [r7, #16]
 800bbae:	681a      	ldr	r2, [r3, #0]
 800bbb0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bbb2:	4413      	add	r3, r2
 800bbb4:	781b      	ldrb	r3, [r3, #0]
 800bbb6:	2b2e      	cmp	r3, #46	; 0x2e
 800bbb8:	d102      	bne.n	800bbc0 <_fx_directory_entry_write+0x288>
            {

                /* Yes, handle the implicit dot in the shortname by
                   positioning past it in the long name.  */
                l++;
 800bbba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bbbc:	3301      	adds	r3, #1
 800bbbe:	65bb      	str	r3, [r7, #88]	; 0x58
            }

            /* Do the names match?  */
            if (shortname[k] != entry_ptr -> fx_dir_entry_name[l])
 800bbc0:	f107 021c 	add.w	r2, r7, #28
 800bbc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bbc6:	4413      	add	r3, r2
 800bbc8:	781a      	ldrb	r2, [r3, #0]
 800bbca:	693b      	ldr	r3, [r7, #16]
 800bbcc:	6819      	ldr	r1, [r3, #0]
 800bbce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bbd0:	440b      	add	r3, r1
 800bbd2:	781b      	ldrb	r3, [r3, #0]
 800bbd4:	429a      	cmp	r2, r3
 800bbd6:	d002      	beq.n	800bbde <_fx_directory_entry_write+0x2a6>
            {

                /* No, the names do not match, set the match flag to false and
                   exit the loop.  */
                match =  FX_FALSE;
 800bbd8:	2300      	movs	r3, #0
 800bbda:	647b      	str	r3, [r7, #68]	; 0x44
                break;
 800bbdc:	e00a      	b.n	800bbf4 <_fx_directory_entry_write+0x2bc>
            }

            /* Move the indices forward.  */
            k++;
 800bbde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bbe0:	3301      	adds	r3, #1
 800bbe2:	65fb      	str	r3, [r7, #92]	; 0x5c
            l++;
 800bbe4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bbe6:	3301      	adds	r3, #1
 800bbe8:	65bb      	str	r3, [r7, #88]	; 0x58
        while (k < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE)
 800bbea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bbec:	2b0a      	cmp	r3, #10
 800bbee:	d9bc      	bls.n	800bb6a <_fx_directory_entry_write+0x232>
 800bbf0:	e000      	b.n	800bbf4 <_fx_directory_entry_write+0x2bc>
                    break;
 800bbf2:	bf00      	nop
        }

        /* Check if there is a dot in the name, but no extension in the short name.  In this case, 
           we should create a mangled short name.  */
        if ((dotpos) && (shortname[8] == ' '))
 800bbf4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d005      	beq.n	800bc06 <_fx_directory_entry_write+0x2ce>
 800bbfa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bbfe:	2b20      	cmp	r3, #32
 800bc00:	d101      	bne.n	800bc06 <_fx_directory_entry_write+0x2ce>
        {
        
            /* Something left.. the names do not match!  */
            match =  FX_FALSE;
 800bc02:	2300      	movs	r3, #0
 800bc04:	647b      	str	r3, [r7, #68]	; 0x44
        }

        /* One final check to make sure there is nothing left on the long file name.  */
        if (entry_ptr -> fx_dir_entry_name[l])
 800bc06:	693b      	ldr	r3, [r7, #16]
 800bc08:	681a      	ldr	r2, [r3, #0]
 800bc0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bc0c:	4413      	add	r3, r2
 800bc0e:	781b      	ldrb	r3, [r3, #0]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d001      	beq.n	800bc18 <_fx_directory_entry_write+0x2e0>
        {

            /* Something left.. the names do not match!  */
            match =  FX_FALSE;
 800bc14:	2300      	movs	r3, #0
 800bc16:	647b      	str	r3, [r7, #68]	; 0x44
        }

        /* Determine if the derived short name matches exactly the long file name. If so
           we don't need to mangle the name with a numeric value based on its entry.  */
        if (match == FX_FALSE)
 800bc18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d15a      	bne.n	800bcd4 <_fx_directory_entry_write+0x39c>
        {

            /* Name does not match, create a mangled name.  */

            /* Generate short file name from LFN.  */
            entry = entry_ptr -> fx_dir_entry_number;
 800bc1e:	693b      	ldr	r3, [r7, #16]
 800bc20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc22:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Name suffice is between 000 and FFFF in hex, calculate this short file
               name's numeric component.  */
            entry = entry % 0x10000;
 800bc24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc26:	b29b      	uxth	r3, r3
 800bc28:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Build short name of the format xxx~NNNN.ext.  */
            if (i > 3)
 800bc2a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bc2c:	2b03      	cmp	r3, #3
 800bc2e:	d901      	bls.n	800bc34 <_fx_directory_entry_write+0x2fc>
            {
                i = 3;
 800bc30:	2303      	movs	r3, #3
 800bc32:	667b      	str	r3, [r7, #100]	; 0x64
            }
            shortname[i++] = '~';
 800bc34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bc36:	1c5a      	adds	r2, r3, #1
 800bc38:	667a      	str	r2, [r7, #100]	; 0x64
 800bc3a:	3368      	adds	r3, #104	; 0x68
 800bc3c:	f107 0210 	add.w	r2, r7, #16
 800bc40:	4413      	add	r3, r2
 800bc42:	227e      	movs	r2, #126	; 0x7e
 800bc44:	f803 2c5c 	strb.w	r2, [r3, #-92]

            /* Loop to build the numeric part of the name.  */
            for (l = 0; l < 4; l++)
 800bc48:	2300      	movs	r3, #0
 800bc4a:	65bb      	str	r3, [r7, #88]	; 0x58
 800bc4c:	e03f      	b.n	800bcce <_fx_directory_entry_write+0x396>
            {
                
                /* Shift down the entry number based on the numeric position.  */
                if (l == 0)
 800bc4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d105      	bne.n	800bc60 <_fx_directory_entry_write+0x328>
                {
                    temp =  ((entry >> 12) & 0xf);
 800bc54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc56:	0b1b      	lsrs	r3, r3, #12
 800bc58:	f003 030f 	and.w	r3, r3, #15
 800bc5c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bc5e:	e015      	b.n	800bc8c <_fx_directory_entry_write+0x354>
                }
                else if (l == 1)
 800bc60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bc62:	2b01      	cmp	r3, #1
 800bc64:	d105      	bne.n	800bc72 <_fx_directory_entry_write+0x33a>
                {
                     temp = ((entry >> 8) & 0xf);
 800bc66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc68:	0a1b      	lsrs	r3, r3, #8
 800bc6a:	f003 030f 	and.w	r3, r3, #15
 800bc6e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bc70:	e00c      	b.n	800bc8c <_fx_directory_entry_write+0x354>
                }
                else if (l == 2)
 800bc72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bc74:	2b02      	cmp	r3, #2
 800bc76:	d105      	bne.n	800bc84 <_fx_directory_entry_write+0x34c>
                {
                     temp = ((entry >> 4) & 0xf);
 800bc78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc7a:	091b      	lsrs	r3, r3, #4
 800bc7c:	f003 030f 	and.w	r3, r3, #15
 800bc80:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bc82:	e003      	b.n	800bc8c <_fx_directory_entry_write+0x354>
                }
                else
                {
                     temp = ((entry) & 0xf);
 800bc84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc86:	f003 030f 	and.w	r3, r3, #15
 800bc8a:	66fb      	str	r3, [r7, #108]	; 0x6c
                }
                
                /* Now build hex value.  */
                if (temp > 9)
 800bc8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bc8e:	2b09      	cmp	r3, #9
 800bc90:	d90d      	bls.n	800bcae <_fx_directory_entry_write+0x376>
                    shortname[i++] =  (CHAR)('A' + (temp - 10));
 800bc92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bc94:	b2da      	uxtb	r2, r3
 800bc96:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bc98:	1c59      	adds	r1, r3, #1
 800bc9a:	6679      	str	r1, [r7, #100]	; 0x64
 800bc9c:	3237      	adds	r2, #55	; 0x37
 800bc9e:	b2d2      	uxtb	r2, r2
 800bca0:	3368      	adds	r3, #104	; 0x68
 800bca2:	f107 0110 	add.w	r1, r7, #16
 800bca6:	440b      	add	r3, r1
 800bca8:	f803 2c5c 	strb.w	r2, [r3, #-92]
 800bcac:	e00c      	b.n	800bcc8 <_fx_directory_entry_write+0x390>
                else
                    shortname[i++] =  (CHAR)('0' + temp);
 800bcae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bcb0:	b2da      	uxtb	r2, r3
 800bcb2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bcb4:	1c59      	adds	r1, r3, #1
 800bcb6:	6679      	str	r1, [r7, #100]	; 0x64
 800bcb8:	3230      	adds	r2, #48	; 0x30
 800bcba:	b2d2      	uxtb	r2, r2
 800bcbc:	3368      	adds	r3, #104	; 0x68
 800bcbe:	f107 0110 	add.w	r1, r7, #16
 800bcc2:	440b      	add	r3, r1
 800bcc4:	f803 2c5c 	strb.w	r2, [r3, #-92]
            for (l = 0; l < 4; l++)
 800bcc8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bcca:	3301      	adds	r3, #1
 800bccc:	65bb      	str	r3, [r7, #88]	; 0x58
 800bcce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bcd0:	2b03      	cmp	r3, #3
 800bcd2:	d9bc      	bls.n	800bc4e <_fx_directory_entry_write+0x316>
            }
        }

        /* Set end of short string to NULL.   */
        shortname[11] = 0;
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        /* Determine if the first character of the short file name is the directory free
           value. If so, it must be changed.  */
        if (((UCHAR)shortname[0] == (UCHAR)FX_DIR_ENTRY_FREE) && (delete_flag == FX_FALSE))
 800bcda:	7f3b      	ldrb	r3, [r7, #28]
 800bcdc:	2be5      	cmp	r3, #229	; 0xe5
 800bcde:	d104      	bne.n	800bcea <_fx_directory_entry_write+0x3b2>
 800bce0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d101      	bne.n	800bcea <_fx_directory_entry_write+0x3b2>
        {

            /* Change to 0x8F to be compatible with what DOS does.  */
            shortname[0] =  (CHAR)0x8F;
 800bce6:	238f      	movs	r3, #143	; 0x8f
 800bce8:	773b      	strb	r3, [r7, #28]
        }

        /* Loop to convert the new short file name to upper case.  */
        for (i = 0; i < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); i++)
 800bcea:	2300      	movs	r3, #0
 800bcec:	667b      	str	r3, [r7, #100]	; 0x64
 800bcee:	e01d      	b.n	800bd2c <_fx_directory_entry_write+0x3f4>
        {

            /* Pickup shortname character.  */
            alpha = shortname[i];
 800bcf0:	f107 021c 	add.w	r2, r7, #28
 800bcf4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bcf6:	4413      	add	r3, r2
 800bcf8:	781b      	ldrb	r3, [r3, #0]
 800bcfa:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

            /* Determine if character is lower case.  */
            if ((alpha >= 'a') && (alpha <= 'z'))
 800bcfe:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800bd02:	2b60      	cmp	r3, #96	; 0x60
 800bd04:	d908      	bls.n	800bd18 <_fx_directory_entry_write+0x3e0>
 800bd06:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800bd0a:	2b7a      	cmp	r3, #122	; 0x7a
 800bd0c:	d804      	bhi.n	800bd18 <_fx_directory_entry_write+0x3e0>
            {

                /* Store the character - converted to upper case.  */
                alpha =  (CHAR)(alpha - ((CHAR)0x20));
 800bd0e:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800bd12:	3b20      	subs	r3, #32
 800bd14:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
            }

            /* Now store the short name character.  */
            shortname[i] =  alpha;
 800bd18:	f107 021c 	add.w	r2, r7, #28
 800bd1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bd1e:	4413      	add	r3, r2
 800bd20:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 800bd24:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); i++)
 800bd26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bd28:	3301      	adds	r3, #1
 800bd2a:	667b      	str	r3, [r7, #100]	; 0x64
 800bd2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bd2e:	2b0a      	cmp	r3, #10
 800bd30:	d9de      	bls.n	800bcf0 <_fx_directory_entry_write+0x3b8>
        }

        /* Determine if there already is a short name and we are not deleting the entry.  */
        if (entry_ptr -> fx_dir_entry_short_name[0] != 0)
 800bd32:	693b      	ldr	r3, [r7, #16]
 800bd34:	791b      	ldrb	r3, [r3, #4]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	f000 8095 	beq.w	800be66 <_fx_directory_entry_write+0x52e>
        {

            /* Yes, override the calculated shortname with the original 8.3 name.  */

            /* Clear the short file name area.  */
            for (i = 0; i < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++)
 800bd3c:	2300      	movs	r3, #0
 800bd3e:	667b      	str	r3, [r7, #100]	; 0x64
 800bd40:	e008      	b.n	800bd54 <_fx_directory_entry_write+0x41c>
            {
                shortname[i] = ' ';
 800bd42:	f107 021c 	add.w	r2, r7, #28
 800bd46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bd48:	4413      	add	r3, r2
 800bd4a:	2220      	movs	r2, #32
 800bd4c:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++)
 800bd4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bd50:	3301      	adds	r3, #1
 800bd52:	667b      	str	r3, [r7, #100]	; 0x64
 800bd54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bd56:	2b0a      	cmp	r3, #10
 800bd58:	d9f3      	bls.n	800bd42 <_fx_directory_entry_write+0x40a>
            }

            /* Loop to copy the original short file name.  */
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	667b      	str	r3, [r7, #100]	; 0x64
 800bd5e:	2300      	movs	r3, #0
 800bd60:	663b      	str	r3, [r7, #96]	; 0x60
 800bd62:	e023      	b.n	800bdac <_fx_directory_entry_write+0x474>
 800bd64:	4ec4ec4f 	.word	0x4ec4ec4f
            {

                /* Check for end of copy conditions.  */
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == '.')
 800bd68:	693a      	ldr	r2, [r7, #16]
 800bd6a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bd6c:	4413      	add	r3, r2
 800bd6e:	3304      	adds	r3, #4
 800bd70:	781b      	ldrb	r3, [r3, #0]
 800bd72:	2b2e      	cmp	r3, #46	; 0x2e
 800bd74:	d01e      	beq.n	800bdb4 <_fx_directory_entry_write+0x47c>
                {
                    break;
                }
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 800bd76:	693a      	ldr	r2, [r7, #16]
 800bd78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bd7a:	4413      	add	r3, r2
 800bd7c:	3304      	adds	r3, #4
 800bd7e:	781b      	ldrb	r3, [r3, #0]
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d019      	beq.n	800bdb8 <_fx_directory_entry_write+0x480>
                {
                    break;
                }

                /* Pickup the character.  */
                alpha =  entry_ptr -> fx_dir_entry_short_name[i];
 800bd84:	693a      	ldr	r2, [r7, #16]
 800bd86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bd88:	4413      	add	r3, r2
 800bd8a:	3304      	adds	r3, #4
 800bd8c:	781b      	ldrb	r3, [r3, #0]
 800bd8e:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

                /* Copy file name character.  */
                shortname[j] =  alpha;
 800bd92:	f107 021c 	add.w	r2, r7, #28
 800bd96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bd98:	4413      	add	r3, r2
 800bd9a:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 800bd9e:	701a      	strb	r2, [r3, #0]
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 800bda0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bda2:	3301      	adds	r3, #1
 800bda4:	667b      	str	r3, [r7, #100]	; 0x64
 800bda6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bda8:	3301      	adds	r3, #1
 800bdaa:	663b      	str	r3, [r7, #96]	; 0x60
 800bdac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bdae:	2b07      	cmp	r3, #7
 800bdb0:	d9da      	bls.n	800bd68 <_fx_directory_entry_write+0x430>
 800bdb2:	e002      	b.n	800bdba <_fx_directory_entry_write+0x482>
                    break;
 800bdb4:	bf00      	nop
 800bdb6:	e000      	b.n	800bdba <_fx_directory_entry_write+0x482>
                    break;
 800bdb8:	bf00      	nop
            }

            /* Determine if there is anything left in the short file name.  */
            if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] != 0)
 800bdba:	693a      	ldr	r2, [r7, #16]
 800bdbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bdbe:	4413      	add	r3, r2
 800bdc0:	3304      	adds	r3, #4
 800bdc2:	781b      	ldrb	r3, [r3, #0]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d025      	beq.n	800be14 <_fx_directory_entry_write+0x4dc>
            {

                /* Pickup remaining characters.  */
                for (i++, j = FX_DIR_NAME_SIZE; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++, j++)
 800bdc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bdca:	3301      	adds	r3, #1
 800bdcc:	667b      	str	r3, [r7, #100]	; 0x64
 800bdce:	2308      	movs	r3, #8
 800bdd0:	663b      	str	r3, [r7, #96]	; 0x60
 800bdd2:	e01a      	b.n	800be0a <_fx_directory_entry_write+0x4d2>
                {

                    /* If NULL is encountered, stop the copying.  */
                    if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 800bdd4:	693a      	ldr	r2, [r7, #16]
 800bdd6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bdd8:	4413      	add	r3, r2
 800bdda:	3304      	adds	r3, #4
 800bddc:	781b      	ldrb	r3, [r3, #0]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d017      	beq.n	800be12 <_fx_directory_entry_write+0x4da>
                    {
                        break;
                    }

                    /* Pickup the character.  */
                    alpha =  entry_ptr -> fx_dir_entry_short_name[i];
 800bde2:	693a      	ldr	r2, [r7, #16]
 800bde4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bde6:	4413      	add	r3, r2
 800bde8:	3304      	adds	r3, #4
 800bdea:	781b      	ldrb	r3, [r3, #0]
 800bdec:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

                    /* Copy file name character.  */
                    shortname[j] =  alpha;
 800bdf0:	f107 021c 	add.w	r2, r7, #28
 800bdf4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bdf6:	4413      	add	r3, r2
 800bdf8:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 800bdfc:	701a      	strb	r2, [r3, #0]
                for (i++, j = FX_DIR_NAME_SIZE; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++, j++)
 800bdfe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800be00:	3301      	adds	r3, #1
 800be02:	667b      	str	r3, [r7, #100]	; 0x64
 800be04:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800be06:	3301      	adds	r3, #1
 800be08:	663b      	str	r3, [r7, #96]	; 0x60
 800be0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800be0c:	2b0a      	cmp	r3, #10
 800be0e:	d9e1      	bls.n	800bdd4 <_fx_directory_entry_write+0x49c>
 800be10:	e000      	b.n	800be14 <_fx_directory_entry_write+0x4dc>
                        break;
 800be12:	bf00      	nop
                }
            }

            /* Loop to make sure the short name is upper case.  */
            for (j = 0; j < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); j++)
 800be14:	2300      	movs	r3, #0
 800be16:	663b      	str	r3, [r7, #96]	; 0x60
 800be18:	e01d      	b.n	800be56 <_fx_directory_entry_write+0x51e>
            {

                /* Pickup the character.  */
                alpha =  shortname[j];
 800be1a:	f107 021c 	add.w	r2, r7, #28
 800be1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800be20:	4413      	add	r3, r2
 800be22:	781b      	ldrb	r3, [r3, #0]
 800be24:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

                /* Determine if character is lower case.  */
                if ((alpha >= 'a') && (alpha <= 'z'))
 800be28:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800be2c:	2b60      	cmp	r3, #96	; 0x60
 800be2e:	d908      	bls.n	800be42 <_fx_directory_entry_write+0x50a>
 800be30:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800be34:	2b7a      	cmp	r3, #122	; 0x7a
 800be36:	d804      	bhi.n	800be42 <_fx_directory_entry_write+0x50a>
                {

                    /* Store the character - converted to upper case.  */
                    alpha =  (CHAR)(alpha - ((CHAR)0x20));
 800be38:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800be3c:	3b20      	subs	r3, #32
 800be3e:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
                }

                /* Copy file name character.  */
                shortname[j] =  alpha;
 800be42:	f107 021c 	add.w	r2, r7, #28
 800be46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800be48:	4413      	add	r3, r2
 800be4a:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 800be4e:	701a      	strb	r2, [r3, #0]
            for (j = 0; j < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); j++)
 800be50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800be52:	3301      	adds	r3, #1
 800be54:	663b      	str	r3, [r7, #96]	; 0x60
 800be56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800be58:	2b0a      	cmp	r3, #10
 800be5a:	d9de      	bls.n	800be1a <_fx_directory_entry_write+0x4e2>
            }

            /* Determine if the first character of the short file name is the directory free
               value. If so, it must be changed.  */
            if (((UCHAR)shortname[0]) == ((UCHAR)FX_DIR_ENTRY_FREE))
 800be5c:	7f3b      	ldrb	r3, [r7, #28]
 800be5e:	2be5      	cmp	r3, #229	; 0xe5
 800be60:	d101      	bne.n	800be66 <_fx_directory_entry_write+0x52e>
            {

                /* Change to 0x8F to be compatible with what DOS does.  */
                shortname[0] =  (CHAR)0x8F;
 800be62:	238f      	movs	r3, #143	; 0x8f
 800be64:	773b      	strb	r3, [r7, #28]
            }
        }

        /* Loop to calculate the checksum.  */
        for (i = checksum = 0; i < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++)
 800be66:	2300      	movs	r3, #0
 800be68:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be6c:	2300      	movs	r3, #0
 800be6e:	667b      	str	r3, [r7, #100]	; 0x64
 800be70:	e016      	b.n	800bea0 <_fx_directory_entry_write+0x568>
        {

            /* Calculate the checksum.  */
            checksum = (UCHAR)((UCHAR)(((checksum & 1) << 7) | ((checksum & (UCHAR)0xfe) >> 1)) + shortname[i]);
 800be72:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800be76:	01db      	lsls	r3, r3, #7
 800be78:	b25a      	sxtb	r2, r3
 800be7a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800be7e:	085b      	lsrs	r3, r3, #1
 800be80:	b2db      	uxtb	r3, r3
 800be82:	b25b      	sxtb	r3, r3
 800be84:	4313      	orrs	r3, r2
 800be86:	b25b      	sxtb	r3, r3
 800be88:	b2da      	uxtb	r2, r3
 800be8a:	f107 011c 	add.w	r1, r7, #28
 800be8e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800be90:	440b      	add	r3, r1
 800be92:	781b      	ldrb	r3, [r3, #0]
 800be94:	4413      	add	r3, r2
 800be96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
        for (i = checksum = 0; i < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++)
 800be9a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800be9c:	3301      	adds	r3, #1
 800be9e:	667b      	str	r3, [r7, #100]	; 0x64
 800bea0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bea2:	2b0a      	cmp	r3, #10
 800bea4:	d9e5      	bls.n	800be72 <_fx_directory_entry_write+0x53a>
        }

        /* Set the last entry mark.  */
        work_ptr[0] =  (UCHAR)(0x40 | card);
 800bea6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bea8:	b2db      	uxtb	r3, r3
 800beaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800beae:	b2da      	uxtb	r2, r3
 800beb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800beb2:	701a      	strb	r2, [r3, #0]

        /* Loop to process remainder of long file name entry.  */
        while (card > 0)
 800beb4:	e0f3      	b.n	800c09e <_fx_directory_entry_write+0x766>
        {

            /* Clear eof marker.  */
            eof_marker = 0;
 800beb6:	2300      	movs	r3, #0
 800beb8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42

            /* Determine if the entry is free.  */
            if ((UCHAR)shortname[0] == (UCHAR)FX_DIR_ENTRY_FREE)
 800bebc:	7f3b      	ldrb	r3, [r7, #28]
 800bebe:	2be5      	cmp	r3, #229	; 0xe5
 800bec0:	d102      	bne.n	800bec8 <_fx_directory_entry_write+0x590>
            {
                /* Yes, place delete marker.  */
                work_ptr[0] =  (UCHAR)FX_DIR_ENTRY_FREE;
 800bec2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bec4:	22e5      	movs	r2, #229	; 0xe5
 800bec6:	701a      	strb	r2, [r3, #0]
            }

            /* Setup various long file name fields.  */
            work_ptr[11] = FX_LONG_NAME;
 800bec8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800beca:	330b      	adds	r3, #11
 800becc:	220f      	movs	r2, #15
 800bece:	701a      	strb	r2, [r3, #0]
            work_ptr[12] = 0;
 800bed0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bed2:	330c      	adds	r3, #12
 800bed4:	2200      	movs	r2, #0
 800bed6:	701a      	strb	r2, [r3, #0]
            work_ptr[13] = checksum;
 800bed8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800beda:	330d      	adds	r3, #13
 800bedc:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 800bee0:	701a      	strb	r2, [r3, #0]
            work_ptr[26] = 0;
 800bee2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bee4:	331a      	adds	r3, #26
 800bee6:	2200      	movs	r2, #0
 800bee8:	701a      	strb	r2, [r3, #0]
            work_ptr[27] = 0;
 800beea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800beec:	331b      	adds	r3, #27
 800beee:	2200      	movs	r2, #0
 800bef0:	701a      	strb	r2, [r3, #0]

            /* Loop through file name fields.  */
            for (i = 1, j = 13 * (card - 1); i < FX_DIR_ENTRY_SIZE; i += 2)
 800bef2:	2301      	movs	r3, #1
 800bef4:	667b      	str	r3, [r7, #100]	; 0x64
 800bef6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bef8:	4613      	mov	r3, r2
 800befa:	005b      	lsls	r3, r3, #1
 800befc:	4413      	add	r3, r2
 800befe:	009b      	lsls	r3, r3, #2
 800bf00:	4413      	add	r3, r2
 800bf02:	3b0d      	subs	r3, #13
 800bf04:	663b      	str	r3, [r7, #96]	; 0x60
 800bf06:	e03e      	b.n	800bf86 <_fx_directory_entry_write+0x64e>
            {

                /* Process relative to specific fields.  */
                if ((i == 11) || (i == 26))
 800bf08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bf0a:	2b0b      	cmp	r3, #11
 800bf0c:	d037      	beq.n	800bf7e <_fx_directory_entry_write+0x646>
 800bf0e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bf10:	2b1a      	cmp	r3, #26
 800bf12:	d034      	beq.n	800bf7e <_fx_directory_entry_write+0x646>
                {
                    continue;
                }

                if (i == 13)
 800bf14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bf16:	2b0d      	cmp	r3, #13
 800bf18:	d102      	bne.n	800bf20 <_fx_directory_entry_write+0x5e8>
                {
                    i = 12;
 800bf1a:	230c      	movs	r3, #12
 800bf1c:	667b      	str	r3, [r7, #100]	; 0x64
                    continue;
 800bf1e:	e02f      	b.n	800bf80 <_fx_directory_entry_write+0x648>
                }

                /* Determine if the EOF marker is present.  */
                if (eof_marker)
 800bf20:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d00d      	beq.n	800bf44 <_fx_directory_entry_write+0x60c>
                {

                    work_ptr[i] = eof_marker;
 800bf28:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800bf2a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bf2c:	4413      	add	r3, r2
 800bf2e:	f897 2042 	ldrb.w	r2, [r7, #66]	; 0x42
 800bf32:	701a      	strb	r2, [r3, #0]
                    work_ptr[i + 1] = eof_marker;
 800bf34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bf36:	3301      	adds	r3, #1
 800bf38:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800bf3a:	4413      	add	r3, r2
 800bf3c:	f897 2042 	ldrb.w	r2, [r7, #66]	; 0x42
 800bf40:	701a      	strb	r2, [r3, #0]
 800bf42:	e00e      	b.n	800bf62 <_fx_directory_entry_write+0x62a>
                }
                else
                {
                    work_ptr[i] = (UCHAR)entry_ptr -> fx_dir_entry_name[j];
 800bf44:	693b      	ldr	r3, [r7, #16]
 800bf46:	681a      	ldr	r2, [r3, #0]
 800bf48:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bf4a:	441a      	add	r2, r3
 800bf4c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800bf4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bf50:	440b      	add	r3, r1
 800bf52:	7812      	ldrb	r2, [r2, #0]
 800bf54:	701a      	strb	r2, [r3, #0]
                    work_ptr[i + 1] = 0;
 800bf56:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bf58:	3301      	adds	r3, #1
 800bf5a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800bf5c:	4413      	add	r3, r2
 800bf5e:	2200      	movs	r2, #0
 800bf60:	701a      	strb	r2, [r3, #0]
                }

                if (entry_ptr -> fx_dir_entry_name[j] == 0)
 800bf62:	693b      	ldr	r3, [r7, #16]
 800bf64:	681a      	ldr	r2, [r3, #0]
 800bf66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bf68:	4413      	add	r3, r2
 800bf6a:	781b      	ldrb	r3, [r3, #0]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d102      	bne.n	800bf76 <_fx_directory_entry_write+0x63e>
                {

                    /* end of name, pad with 0xff.  */
                    eof_marker =  (UCHAR)0xff;
 800bf70:	23ff      	movs	r3, #255	; 0xff
 800bf72:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
                }

                j++;
 800bf76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bf78:	3301      	adds	r3, #1
 800bf7a:	663b      	str	r3, [r7, #96]	; 0x60
 800bf7c:	e000      	b.n	800bf80 <_fx_directory_entry_write+0x648>
                    continue;
 800bf7e:	bf00      	nop
            for (i = 1, j = 13 * (card - 1); i < FX_DIR_ENTRY_SIZE; i += 2)
 800bf80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bf82:	3302      	adds	r3, #2
 800bf84:	667b      	str	r3, [r7, #100]	; 0x64
 800bf86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bf88:	2b1f      	cmp	r3, #31
 800bf8a:	d9bd      	bls.n	800bf08 <_fx_directory_entry_write+0x5d0>
            }

            /* Move to the next directory entry.  */
            work_ptr += FX_DIR_ENTRY_SIZE;
 800bf8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bf8e:	3320      	adds	r3, #32
 800bf90:	677b      	str	r3, [r7, #116]	; 0x74
            byte_offset += FX_DIR_ENTRY_SIZE;
 800bf92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf94:	3320      	adds	r3, #32
 800bf96:	637b      	str	r3, [r7, #52]	; 0x34
            /* Update changed_size. */
            changed_size += FX_DIR_ENTRY_SIZE;
#endif /* FX_ENABLE_FAULT_TOLERANT */

            /* Determine if the entry overlaps into the next sector.  */
            if (byte_offset >= media_ptr -> fx_media_bytes_per_sector)
 800bf98:	697b      	ldr	r3, [r7, #20]
 800bf9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf9c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bf9e:	429a      	cmp	r2, r3
 800bfa0:	d376      	bcc.n	800c090 <_fx_directory_entry_write+0x758>
                else
                {
#endif /* FX_ENABLE_FAULT_TOLERANT */

                    /* Write current logical sector out.  */
                    status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) logical_sector,
 800bfa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfa4:	2200      	movs	r2, #0
 800bfa6:	60bb      	str	r3, [r7, #8]
 800bfa8:	60fa      	str	r2, [r7, #12]
 800bfaa:	2303      	movs	r3, #3
 800bfac:	9302      	str	r3, [sp, #8]
 800bfae:	2301      	movs	r3, #1
 800bfb0:	9301      	str	r3, [sp, #4]
 800bfb2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bfb4:	9300      	str	r3, [sp, #0]
 800bfb6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bfba:	6978      	ldr	r0, [r7, #20]
 800bfbc:	f007 ffa2 	bl	8013f04 <_fx_utility_logical_sector_write>
 800bfc0:	62f8      	str	r0, [r7, #44]	; 0x2c
#ifdef FX_ENABLE_FAULT_TOLERANT
                }
#endif /* FX_ENABLE_FAULT_TOLERANT */

                /* Determine if an error occurred.  */
                if (status != FX_SUCCESS)
 800bfc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d001      	beq.n	800bfcc <_fx_directory_entry_write+0x694>
                {

                    /* Return the error status.  */
                    return(status);
 800bfc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfca:	e2eb      	b.n	800c5a4 <_fx_directory_entry_write+0xc6c>
                }

                /* Determine if we are in the root directory.  */
                if (logical_sector >= (ULONG)(media_ptr -> fx_media_data_sector_start))
 800bfcc:	697b      	ldr	r3, [r7, #20]
 800bfce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bfd0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bfd2:	429a      	cmp	r2, r3
 800bfd4:	d335      	bcc.n	800c042 <_fx_directory_entry_write+0x70a>
                {

                    /* Determine the next sector of the directory entry.  */
                    if (relative_sector < (media_ptr -> fx_media_sectors_per_cluster - 1))
 800bfd6:	697b      	ldr	r3, [r7, #20]
 800bfd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bfda:	3b01      	subs	r3, #1
 800bfdc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bfde:	429a      	cmp	r2, r3
 800bfe0:	d206      	bcs.n	800bff0 <_fx_directory_entry_write+0x6b8>
                    {

                        /* More sectors in this cluster.  */

                        /* Simply increment the logical sector.  */
                        logical_sector++;
 800bfe2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfe4:	3301      	adds	r3, #1
 800bfe6:	63fb      	str	r3, [r7, #60]	; 0x3c

                        /* Increment the relative sector.  */
                        relative_sector++;
 800bfe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfea:	3301      	adds	r3, #1
 800bfec:	63bb      	str	r3, [r7, #56]	; 0x38
 800bfee:	e032      	b.n	800c056 <_fx_directory_entry_write+0x71e>
                    {

                        /* We need to move to the next cluster.  */

                        /* Pickup the next cluster.  */
                        status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 800bff0:	f107 0318 	add.w	r3, r7, #24
 800bff4:	461a      	mov	r2, r3
 800bff6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bff8:	6978      	ldr	r0, [r7, #20]
 800bffa:	f006 f8e1 	bl	80121c0 <_fx_utility_FAT_entry_read>
 800bffe:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* Check for I/O error.  */
                        if (status != FX_SUCCESS)
 800c000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c002:	2b00      	cmp	r3, #0
 800c004:	d001      	beq.n	800c00a <_fx_directory_entry_write+0x6d2>
                        {

                            /* Return error code.  */
                            return(status);
 800c006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c008:	e2cc      	b.n	800c5a4 <_fx_directory_entry_write+0xc6c>
                        }

                        /* Copy next cluster to the current cluster.  */
                        cluster =  next_cluster;
 800c00a:	69bb      	ldr	r3, [r7, #24]
 800c00c:	633b      	str	r3, [r7, #48]	; 0x30

                        /* Check the value of the new cluster - it must be a valid cluster number
                           or something is really wrong!  */
                        if ((cluster < FX_FAT_ENTRY_START) || (cluster >= media_ptr -> fx_media_fat_reserved))
 800c00e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c010:	2b01      	cmp	r3, #1
 800c012:	d907      	bls.n	800c024 <_fx_directory_entry_write+0x6ec>
 800c014:	697b      	ldr	r3, [r7, #20]
 800c016:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800c01a:	f8d3 34a8 	ldr.w	r3, [r3, #1192]	; 0x4a8
 800c01e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c020:	429a      	cmp	r2, r3
 800c022:	d301      	bcc.n	800c028 <_fx_directory_entry_write+0x6f0>
                        {

                            /* Send error message back to caller.  */
                            return(FX_FILE_CORRUPT);
 800c024:	2308      	movs	r3, #8
 800c026:	e2bd      	b.n	800c5a4 <_fx_directory_entry_write+0xc6c>
                        }

                        /* Setup the relative sector (this is zero for subsequent cluster.  */
                        relative_sector =  0;
 800c028:	2300      	movs	r3, #0
 800c02a:	63bb      	str	r3, [r7, #56]	; 0x38

                        /* Calculate the next logical sector.  */
                        logical_sector =   ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800c02c:	697b      	ldr	r3, [r7, #20]
 800c02e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                            (((ULONG)cluster - FX_FAT_ENTRY_START) *
 800c030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c032:	3b02      	subs	r3, #2
                             ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 800c034:	6979      	ldr	r1, [r7, #20]
 800c036:	6d49      	ldr	r1, [r1, #84]	; 0x54
                            (((ULONG)cluster - FX_FAT_ENTRY_START) *
 800c038:	fb01 f303 	mul.w	r3, r1, r3
                        logical_sector =   ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800c03c:	4413      	add	r3, r2
 800c03e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c040:	e009      	b.n	800c056 <_fx_directory_entry_write+0x71e>
                }
                else
                {

                    /* Increment the logical sector.  */
                    logical_sector++;
 800c042:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c044:	3301      	adds	r3, #1
 800c046:	63fb      	str	r3, [r7, #60]	; 0x3c

                    /* Determine if the logical sector is valid.  */
                    if (logical_sector >= (ULONG)(media_ptr -> fx_media_data_sector_start))
 800c048:	697b      	ldr	r3, [r7, #20]
 800c04a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c04c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c04e:	429a      	cmp	r2, r3
 800c050:	d301      	bcc.n	800c056 <_fx_directory_entry_write+0x71e>
                    {

                        /* We have exceeded the root directory.  */

                        /* Send error message back to caller.  */
                        return(FX_FILE_CORRUPT);
 800c052:	2308      	movs	r3, #8
 800c054:	e2a6      	b.n	800c5a4 <_fx_directory_entry_write+0xc6c>
                    }
                }

                /* Read the sector.  */
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 800c056:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c058:	2200      	movs	r2, #0
 800c05a:	603b      	str	r3, [r7, #0]
 800c05c:	607a      	str	r2, [r7, #4]
                                                          media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 800c05e:	697b      	ldr	r3, [r7, #20]
 800c060:	689b      	ldr	r3, [r3, #8]
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 800c062:	2203      	movs	r2, #3
 800c064:	9202      	str	r2, [sp, #8]
 800c066:	2201      	movs	r2, #1
 800c068:	9201      	str	r2, [sp, #4]
 800c06a:	9300      	str	r3, [sp, #0]
 800c06c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c070:	6978      	ldr	r0, [r7, #20]
 800c072:	f007 fcb3 	bl	80139dc <_fx_utility_logical_sector_read>
 800c076:	62f8      	str	r0, [r7, #44]	; 0x2c

                /* Determine if an error occurred.  */
                if (status != FX_SUCCESS)
 800c078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d001      	beq.n	800c082 <_fx_directory_entry_write+0x74a>
                {

                    /* Return the error status.  */
                    return(status);
 800c07e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c080:	e290      	b.n	800c5a4 <_fx_directory_entry_write+0xc6c>
                }

                /* Setup logical sector.  */
                sector_base_ptr = media_ptr -> fx_media_memory_buffer;
 800c082:	697b      	ldr	r3, [r7, #20]
 800c084:	689b      	ldr	r3, [r3, #8]
 800c086:	673b      	str	r3, [r7, #112]	; 0x70

                /* Setup a fresh byte offset.  */
                byte_offset = 0;
 800c088:	2300      	movs	r3, #0
 800c08a:	637b      	str	r3, [r7, #52]	; 0x34

                /* Setup a new pointer into the buffer.  */
                work_ptr = sector_base_ptr;
 800c08c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c08e:	677b      	str	r3, [r7, #116]	; 0x74
                changed_offset = 0;
#endif /* FX_ENABLE_FAULT_TOLERANT */
            }

            /* Decrement loop control.  */
            card--;
 800c090:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c092:	3b01      	subs	r3, #1
 800c094:	657b      	str	r3, [r7, #84]	; 0x54
            work_ptr[0] = (UCHAR)card;
 800c096:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c098:	b2da      	uxtb	r2, r3
 800c09a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c09c:	701a      	strb	r2, [r3, #0]
        while (card > 0)
 800c09e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	f47f af08 	bne.w	800beb6 <_fx_directory_entry_write+0x57e>
        }

        /* Determine if there is a short name.  */
        if (entry_ptr -> fx_dir_entry_short_name[0] == 0)
 800c0a6:	693b      	ldr	r3, [r7, #16]
 800c0a8:	791b      	ldrb	r3, [r3, #4]
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d116      	bne.n	800c0dc <_fx_directory_entry_write+0x7a4>
        {

            /* Loop to copy the new short file name.  */
            for (i = 0; i < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); i++)
 800c0ae:	2300      	movs	r3, #0
 800c0b0:	667b      	str	r3, [r7, #100]	; 0x64
 800c0b2:	e00f      	b.n	800c0d4 <_fx_directory_entry_write+0x79c>
            {

                /* Pickup shortname character.  */
                alpha = shortname[i];
 800c0b4:	f107 021c 	add.w	r2, r7, #28
 800c0b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c0ba:	4413      	add	r3, r2
 800c0bc:	781b      	ldrb	r3, [r3, #0]
 800c0be:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

                /* Now store the short name character.  */
                *work_ptr++ =  (UCHAR)alpha;
 800c0c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c0c4:	1c5a      	adds	r2, r3, #1
 800c0c6:	677a      	str	r2, [r7, #116]	; 0x74
 800c0c8:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 800c0cc:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); i++)
 800c0ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c0d0:	3301      	adds	r3, #1
 800c0d2:	667b      	str	r3, [r7, #100]	; 0x64
 800c0d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c0d6:	2b0a      	cmp	r3, #10
 800c0d8:	d9ec      	bls.n	800c0b4 <_fx_directory_entry_write+0x77c>
 800c0da:	e1a5      	b.n	800c428 <_fx_directory_entry_write+0xaf0>
        }
        else
        {

            /* Clear the short file name area.  */
            for (i = 0; i < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++)
 800c0dc:	2300      	movs	r3, #0
 800c0de:	667b      	str	r3, [r7, #100]	; 0x64
 800c0e0:	e007      	b.n	800c0f2 <_fx_directory_entry_write+0x7ba>
            {
                work_ptr[i] = ' ';
 800c0e2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800c0e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c0e6:	4413      	add	r3, r2
 800c0e8:	2220      	movs	r2, #32
 800c0ea:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++)
 800c0ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c0ee:	3301      	adds	r3, #1
 800c0f0:	667b      	str	r3, [r7, #100]	; 0x64
 800c0f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c0f4:	2b0a      	cmp	r3, #10
 800c0f6:	d9f4      	bls.n	800c0e2 <_fx_directory_entry_write+0x7aa>
            }

            /* Loop to copy the old short file name.  */
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	667b      	str	r3, [r7, #100]	; 0x64
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	663b      	str	r3, [r7, #96]	; 0x60
 800c100:	e01c      	b.n	800c13c <_fx_directory_entry_write+0x804>
            {

                /* Check for end of copy conditions.  */
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == '.')
 800c102:	693a      	ldr	r2, [r7, #16]
 800c104:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c106:	4413      	add	r3, r2
 800c108:	3304      	adds	r3, #4
 800c10a:	781b      	ldrb	r3, [r3, #0]
 800c10c:	2b2e      	cmp	r3, #46	; 0x2e
 800c10e:	d019      	beq.n	800c144 <_fx_directory_entry_write+0x80c>
                {
                    break;
                }
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 800c110:	693a      	ldr	r2, [r7, #16]
 800c112:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c114:	4413      	add	r3, r2
 800c116:	3304      	adds	r3, #4
 800c118:	781b      	ldrb	r3, [r3, #0]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d014      	beq.n	800c148 <_fx_directory_entry_write+0x810>
                {
                    break;
                }

                /* Copy file name character.  */
                work_ptr[j] =  (UCHAR)entry_ptr -> fx_dir_entry_short_name[i];
 800c11e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800c120:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c122:	4413      	add	r3, r2
 800c124:	6939      	ldr	r1, [r7, #16]
 800c126:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c128:	440a      	add	r2, r1
 800c12a:	3204      	adds	r2, #4
 800c12c:	7812      	ldrb	r2, [r2, #0]
 800c12e:	701a      	strb	r2, [r3, #0]
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 800c130:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c132:	3301      	adds	r3, #1
 800c134:	667b      	str	r3, [r7, #100]	; 0x64
 800c136:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c138:	3301      	adds	r3, #1
 800c13a:	663b      	str	r3, [r7, #96]	; 0x60
 800c13c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c13e:	2b07      	cmp	r3, #7
 800c140:	d9df      	bls.n	800c102 <_fx_directory_entry_write+0x7ca>
 800c142:	e002      	b.n	800c14a <_fx_directory_entry_write+0x812>
                    break;
 800c144:	bf00      	nop
 800c146:	e000      	b.n	800c14a <_fx_directory_entry_write+0x812>
                    break;
 800c148:	bf00      	nop
            }

            /* Determine if there is anything left in the short file name.  */
            if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] != 0)
 800c14a:	693a      	ldr	r2, [r7, #16]
 800c14c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c14e:	4413      	add	r3, r2
 800c150:	3304      	adds	r3, #4
 800c152:	781b      	ldrb	r3, [r3, #0]
 800c154:	2b00      	cmp	r3, #0
 800c156:	d020      	beq.n	800c19a <_fx_directory_entry_write+0x862>
            {

                /* Pickup remaining characters.  */
                for (i++, j = FX_DIR_NAME_SIZE; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++, j++)
 800c158:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c15a:	3301      	adds	r3, #1
 800c15c:	667b      	str	r3, [r7, #100]	; 0x64
 800c15e:	2308      	movs	r3, #8
 800c160:	663b      	str	r3, [r7, #96]	; 0x60
 800c162:	e015      	b.n	800c190 <_fx_directory_entry_write+0x858>
                {

                    /* If NULL is encountered, stop the copying.  */
                    if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 800c164:	693a      	ldr	r2, [r7, #16]
 800c166:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c168:	4413      	add	r3, r2
 800c16a:	3304      	adds	r3, #4
 800c16c:	781b      	ldrb	r3, [r3, #0]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d012      	beq.n	800c198 <_fx_directory_entry_write+0x860>
                    {
                        break;
                    }

                    /* Copy file name character.  */
                    work_ptr[j] =  (UCHAR)entry_ptr -> fx_dir_entry_short_name[i];
 800c172:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800c174:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c176:	4413      	add	r3, r2
 800c178:	6939      	ldr	r1, [r7, #16]
 800c17a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c17c:	440a      	add	r2, r1
 800c17e:	3204      	adds	r2, #4
 800c180:	7812      	ldrb	r2, [r2, #0]
 800c182:	701a      	strb	r2, [r3, #0]
                for (i++, j = FX_DIR_NAME_SIZE; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++, j++)
 800c184:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c186:	3301      	adds	r3, #1
 800c188:	667b      	str	r3, [r7, #100]	; 0x64
 800c18a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c18c:	3301      	adds	r3, #1
 800c18e:	663b      	str	r3, [r7, #96]	; 0x60
 800c190:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c192:	2b0a      	cmp	r3, #10
 800c194:	d9e6      	bls.n	800c164 <_fx_directory_entry_write+0x82c>
 800c196:	e000      	b.n	800c19a <_fx_directory_entry_write+0x862>
                        break;
 800c198:	bf00      	nop
                }
            }

            /* Adjust the work pointer accordingly.  */
            work_ptr += (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE);
 800c19a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c19c:	330b      	adds	r3, #11
 800c19e:	677b      	str	r3, [r7, #116]	; 0x74
 800c1a0:	e142      	b.n	800c428 <_fx_directory_entry_write+0xaf0>
    }
    else
    {

        /* Determine if long name was shorted.  */
        if (entry_ptr -> fx_dir_entry_long_name_shorted > 0)
 800c1a2:	693b      	ldr	r3, [r7, #16]
 800c1a4:	699b      	ldr	r3, [r3, #24]
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	f000 80a1 	beq.w	800c2ee <_fx_directory_entry_write+0x9b6>
        {

            /* Check for a valid short name.  */
            if ((UCHAR)(0x40 | entry_ptr -> fx_dir_entry_long_name_shorted) == (UCHAR)(*work_ptr))
 800c1ac:	693b      	ldr	r3, [r7, #16]
 800c1ae:	699b      	ldr	r3, [r3, #24]
 800c1b0:	b2db      	uxtb	r3, r3
 800c1b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c1b6:	b2da      	uxtb	r2, r3
 800c1b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c1ba:	781b      	ldrb	r3, [r3, #0]
 800c1bc:	429a      	cmp	r2, r3
 800c1be:	f040 8096 	bne.w	800c2ee <_fx_directory_entry_write+0x9b6>
            {

                /* Loop through the file name.  */
                for (j = 0; j < entry_ptr -> fx_dir_entry_long_name_shorted; j++)
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	663b      	str	r3, [r7, #96]	; 0x60
 800c1c6:	e08c      	b.n	800c2e2 <_fx_directory_entry_write+0x9aa>
                {

                    /* Check for a free entry to be written.  */
                    if ((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_FREE)
 800c1c8:	693b      	ldr	r3, [r7, #16]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	781b      	ldrb	r3, [r3, #0]
 800c1ce:	2be5      	cmp	r3, #229	; 0xe5
 800c1d0:	d102      	bne.n	800c1d8 <_fx_directory_entry_write+0x8a0>
                    {
                        /* Delete long parts.  */
                        work_ptr[0] =  (UCHAR)FX_DIR_ENTRY_FREE;
 800c1d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c1d4:	22e5      	movs	r2, #229	; 0xe5
 800c1d6:	701a      	strb	r2, [r3, #0]
                    }

                    /* Setup pointers for the name write.  */
                    work_ptr += FX_DIR_ENTRY_SIZE;
 800c1d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c1da:	3320      	adds	r3, #32
 800c1dc:	677b      	str	r3, [r7, #116]	; 0x74
                    byte_offset += FX_DIR_ENTRY_SIZE;
 800c1de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1e0:	3320      	adds	r3, #32
 800c1e2:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Update changed_size. */
                    changed_size += FX_DIR_ENTRY_SIZE;
#endif /* FX_ENABLE_FAULT_TOLERANT */

                    /* Determine if the write is within the current sector.   */
                    if (byte_offset >= media_ptr -> fx_media_bytes_per_sector)
 800c1e4:	697b      	ldr	r3, [r7, #20]
 800c1e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c1ea:	429a      	cmp	r2, r3
 800c1ec:	d376      	bcc.n	800c2dc <_fx_directory_entry_write+0x9a4>
                        else
                        {
#endif /* FX_ENABLE_FAULT_TOLERANT */

                            /* Write the current sector out.  */
                            status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) logical_sector,
 800c1ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1f0:	2200      	movs	r2, #0
 800c1f2:	4698      	mov	r8, r3
 800c1f4:	4691      	mov	r9, r2
 800c1f6:	2303      	movs	r3, #3
 800c1f8:	9302      	str	r3, [sp, #8]
 800c1fa:	2301      	movs	r3, #1
 800c1fc:	9301      	str	r3, [sp, #4]
 800c1fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c200:	9300      	str	r3, [sp, #0]
 800c202:	4642      	mov	r2, r8
 800c204:	464b      	mov	r3, r9
 800c206:	6978      	ldr	r0, [r7, #20]
 800c208:	f007 fe7c 	bl	8013f04 <_fx_utility_logical_sector_write>
 800c20c:	62f8      	str	r0, [r7, #44]	; 0x2c
#ifdef FX_ENABLE_FAULT_TOLERANT
                        }
#endif /* FX_ENABLE_FAULT_TOLERANT */

                        /* Determine if an error occurred.  */
                        if (status != FX_SUCCESS)
 800c20e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c210:	2b00      	cmp	r3, #0
 800c212:	d001      	beq.n	800c218 <_fx_directory_entry_write+0x8e0>
                        {

                            /* Return the error status.  */
                            return(status);
 800c214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c216:	e1c5      	b.n	800c5a4 <_fx_directory_entry_write+0xc6c>
                        }

                        /* Determine if we are in the root directory.  */
                        if (logical_sector >= (ULONG)(media_ptr -> fx_media_data_sector_start))
 800c218:	697b      	ldr	r3, [r7, #20]
 800c21a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c21c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c21e:	429a      	cmp	r2, r3
 800c220:	d335      	bcc.n	800c28e <_fx_directory_entry_write+0x956>
                        {

                            /* Determine the next sector of the directory entry.  */
                            if (relative_sector < (media_ptr -> fx_media_sectors_per_cluster - 1))
 800c222:	697b      	ldr	r3, [r7, #20]
 800c224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c226:	3b01      	subs	r3, #1
 800c228:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c22a:	429a      	cmp	r2, r3
 800c22c:	d206      	bcs.n	800c23c <_fx_directory_entry_write+0x904>
                            {

                                /* More sectors in this cluster.  */

                                /* Simply increment the logical sector.  */
                                logical_sector++;
 800c22e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c230:	3301      	adds	r3, #1
 800c232:	63fb      	str	r3, [r7, #60]	; 0x3c

                                /* Increment the relative sector.  */
                                relative_sector++;
 800c234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c236:	3301      	adds	r3, #1
 800c238:	63bb      	str	r3, [r7, #56]	; 0x38
 800c23a:	e032      	b.n	800c2a2 <_fx_directory_entry_write+0x96a>
                            {

                                /* We need to move to the next cluster.  */

                                /* Pickup the next cluster.  */
                                status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 800c23c:	f107 0318 	add.w	r3, r7, #24
 800c240:	461a      	mov	r2, r3
 800c242:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c244:	6978      	ldr	r0, [r7, #20]
 800c246:	f005 ffbb 	bl	80121c0 <_fx_utility_FAT_entry_read>
 800c24a:	62f8      	str	r0, [r7, #44]	; 0x2c

                                /* Check for I/O error.  */
                                if (status != FX_SUCCESS)
 800c24c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d001      	beq.n	800c256 <_fx_directory_entry_write+0x91e>
                                {

                                    /* Return error code.  */
                                    return(status);
 800c252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c254:	e1a6      	b.n	800c5a4 <_fx_directory_entry_write+0xc6c>
                                }

                                /* Copy next cluster to the current cluster.  */
                                cluster =  next_cluster;
 800c256:	69bb      	ldr	r3, [r7, #24]
 800c258:	633b      	str	r3, [r7, #48]	; 0x30

                                /* Check the value of the new cluster - it must be a valid cluster number
                                   or something is really wrong!  */
                                if ((cluster < FX_FAT_ENTRY_START) || (cluster >= media_ptr -> fx_media_fat_reserved))
 800c25a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c25c:	2b01      	cmp	r3, #1
 800c25e:	d907      	bls.n	800c270 <_fx_directory_entry_write+0x938>
 800c260:	697b      	ldr	r3, [r7, #20]
 800c262:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800c266:	f8d3 34a8 	ldr.w	r3, [r3, #1192]	; 0x4a8
 800c26a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c26c:	429a      	cmp	r2, r3
 800c26e:	d301      	bcc.n	800c274 <_fx_directory_entry_write+0x93c>
                                {

                                    /* Send error message back to caller.  */
                                    return(FX_FILE_CORRUPT);
 800c270:	2308      	movs	r3, #8
 800c272:	e197      	b.n	800c5a4 <_fx_directory_entry_write+0xc6c>
                                }

                                /* Setup the relative sector (this is zero for subsequent cluster.  */
                                relative_sector =  0;
 800c274:	2300      	movs	r3, #0
 800c276:	63bb      	str	r3, [r7, #56]	; 0x38

                                /* Calculate the next logical sector.  */
                                logical_sector =   ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800c278:	697b      	ldr	r3, [r7, #20]
 800c27a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                                    (((ULONG)cluster - FX_FAT_ENTRY_START) *
 800c27c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c27e:	3b02      	subs	r3, #2
                                     ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 800c280:	6979      	ldr	r1, [r7, #20]
 800c282:	6d49      	ldr	r1, [r1, #84]	; 0x54
                                    (((ULONG)cluster - FX_FAT_ENTRY_START) *
 800c284:	fb01 f303 	mul.w	r3, r1, r3
                                logical_sector =   ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800c288:	4413      	add	r3, r2
 800c28a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c28c:	e009      	b.n	800c2a2 <_fx_directory_entry_write+0x96a>
                        }
                        else
                        {

                            /* Increment the logical sector.  */
                            logical_sector++;
 800c28e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c290:	3301      	adds	r3, #1
 800c292:	63fb      	str	r3, [r7, #60]	; 0x3c

                            /* Determine if the logical sector is valid.  */
                            if (logical_sector >= (ULONG)(media_ptr -> fx_media_data_sector_start))
 800c294:	697b      	ldr	r3, [r7, #20]
 800c296:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c298:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c29a:	429a      	cmp	r2, r3
 800c29c:	d301      	bcc.n	800c2a2 <_fx_directory_entry_write+0x96a>
                            {

                                /* We have exceeded the root directory.  */

                                /* Send error message back to caller.  */
                                return(FX_FILE_CORRUPT);
 800c29e:	2308      	movs	r3, #8
 800c2a0:	e180      	b.n	800c5a4 <_fx_directory_entry_write+0xc6c>
                            }
                        }

                        /* Read the next logical sector.  */
                        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 800c2a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2a4:	2200      	movs	r2, #0
 800c2a6:	469a      	mov	sl, r3
 800c2a8:	4693      	mov	fp, r2
                                                                  media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 800c2aa:	697b      	ldr	r3, [r7, #20]
 800c2ac:	689b      	ldr	r3, [r3, #8]
                        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 800c2ae:	2203      	movs	r2, #3
 800c2b0:	9202      	str	r2, [sp, #8]
 800c2b2:	2201      	movs	r2, #1
 800c2b4:	9201      	str	r2, [sp, #4]
 800c2b6:	9300      	str	r3, [sp, #0]
 800c2b8:	4652      	mov	r2, sl
 800c2ba:	465b      	mov	r3, fp
 800c2bc:	6978      	ldr	r0, [r7, #20]
 800c2be:	f007 fb8d 	bl	80139dc <_fx_utility_logical_sector_read>
 800c2c2:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* Determine if an error occurred.  */
                        if (status != FX_SUCCESS)
 800c2c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d001      	beq.n	800c2ce <_fx_directory_entry_write+0x996>
                        {

                            /* Return the error status.  */
                            return(status);
 800c2ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2cc:	e16a      	b.n	800c5a4 <_fx_directory_entry_write+0xc6c>
                        }

                        /* Move to the next sector buffer.  */
                        sector_base_ptr = media_ptr -> fx_media_memory_buffer;
 800c2ce:	697b      	ldr	r3, [r7, #20]
 800c2d0:	689b      	ldr	r3, [r3, #8]
 800c2d2:	673b      	str	r3, [r7, #112]	; 0x70

                        /* Setup new buffer pointers.  */
                        byte_offset =  0;
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	637b      	str	r3, [r7, #52]	; 0x34
                        work_ptr = sector_base_ptr;
 800c2d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c2da:	677b      	str	r3, [r7, #116]	; 0x74
                for (j = 0; j < entry_ptr -> fx_dir_entry_long_name_shorted; j++)
 800c2dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c2de:	3301      	adds	r3, #1
 800c2e0:	663b      	str	r3, [r7, #96]	; 0x60
 800c2e2:	693b      	ldr	r3, [r7, #16]
 800c2e4:	699b      	ldr	r3, [r3, #24]
 800c2e6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c2e8:	429a      	cmp	r2, r3
 800c2ea:	f4ff af6d 	bcc.w	800c1c8 <_fx_directory_entry_write+0x890>
                }
            }
        }

        /* This is an 8.3 name.  First clear the directory name.  */
        for (j = 0; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; j++)
 800c2ee:	2300      	movs	r3, #0
 800c2f0:	663b      	str	r3, [r7, #96]	; 0x60
 800c2f2:	e007      	b.n	800c304 <_fx_directory_entry_write+0x9cc>
        {
            work_ptr[j] = ' ';
 800c2f4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800c2f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c2f8:	4413      	add	r3, r2
 800c2fa:	2220      	movs	r2, #32
 800c2fc:	701a      	strb	r2, [r3, #0]
        for (j = 0; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; j++)
 800c2fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c300:	3301      	adds	r3, #1
 800c302:	663b      	str	r3, [r7, #96]	; 0x60
 800c304:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c306:	2b0a      	cmp	r3, #10
 800c308:	d9f4      	bls.n	800c2f4 <_fx_directory_entry_write+0x9bc>
        }

        /* Copy leading dots in case of first two entries of a directory.  */
        for (i = 0; (UCHAR)entry_ptr -> fx_dir_entry_name[i] == '.'; i++)
 800c30a:	2300      	movs	r3, #0
 800c30c:	667b      	str	r3, [r7, #100]	; 0x64
 800c30e:	e007      	b.n	800c320 <_fx_directory_entry_write+0x9e8>
        {
            work_ptr[i] = '.';
 800c310:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800c312:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c314:	4413      	add	r3, r2
 800c316:	222e      	movs	r2, #46	; 0x2e
 800c318:	701a      	strb	r2, [r3, #0]
        for (i = 0; (UCHAR)entry_ptr -> fx_dir_entry_name[i] == '.'; i++)
 800c31a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c31c:	3301      	adds	r3, #1
 800c31e:	667b      	str	r3, [r7, #100]	; 0x64
 800c320:	693b      	ldr	r3, [r7, #16]
 800c322:	681a      	ldr	r2, [r3, #0]
 800c324:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c326:	4413      	add	r3, r2
 800c328:	781b      	ldrb	r3, [r3, #0]
 800c32a:	2b2e      	cmp	r3, #46	; 0x2e
 800c32c:	d0f0      	beq.n	800c310 <_fx_directory_entry_write+0x9d8>
        }

        /* Determine if there are more characters to copy.  */
        if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] != 0)
 800c32e:	693b      	ldr	r3, [r7, #16]
 800c330:	681a      	ldr	r2, [r3, #0]
 800c332:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c334:	4413      	add	r3, r2
 800c336:	781b      	ldrb	r3, [r3, #0]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d039      	beq.n	800c3b0 <_fx_directory_entry_write+0xa78>
        {

            /* Copy directory name.  */
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 800c33c:	2300      	movs	r3, #0
 800c33e:	667b      	str	r3, [r7, #100]	; 0x64
 800c340:	2300      	movs	r3, #0
 800c342:	663b      	str	r3, [r7, #96]	; 0x60
 800c344:	e02d      	b.n	800c3a2 <_fx_directory_entry_write+0xa6a>
            {

                /* Check for end of copy conditions.  */
                if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == '.')
 800c346:	693b      	ldr	r3, [r7, #16]
 800c348:	681a      	ldr	r2, [r3, #0]
 800c34a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c34c:	4413      	add	r3, r2
 800c34e:	781b      	ldrb	r3, [r3, #0]
 800c350:	2b2e      	cmp	r3, #46	; 0x2e
 800c352:	d02a      	beq.n	800c3aa <_fx_directory_entry_write+0xa72>
                {
                    break;
                }
                if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == 0)
 800c354:	693b      	ldr	r3, [r7, #16]
 800c356:	681a      	ldr	r2, [r3, #0]
 800c358:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c35a:	4413      	add	r3, r2
 800c35c:	781b      	ldrb	r3, [r3, #0]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d025      	beq.n	800c3ae <_fx_directory_entry_write+0xa76>
                {
                    break;
                }

                /* Pickup shortname character.  */
                alpha = entry_ptr -> fx_dir_entry_name[i];
 800c362:	693b      	ldr	r3, [r7, #16]
 800c364:	681a      	ldr	r2, [r3, #0]
 800c366:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c368:	4413      	add	r3, r2
 800c36a:	781b      	ldrb	r3, [r3, #0]
 800c36c:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

                /* Determine if character is lower case.  */
                if ((alpha >= 'a') && (alpha <= 'z'))
 800c370:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800c374:	2b60      	cmp	r3, #96	; 0x60
 800c376:	d908      	bls.n	800c38a <_fx_directory_entry_write+0xa52>
 800c378:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800c37c:	2b7a      	cmp	r3, #122	; 0x7a
 800c37e:	d804      	bhi.n	800c38a <_fx_directory_entry_write+0xa52>
                {

                    /* Store the character - converted to upper case.  */
                    alpha =  (CHAR)(alpha - ((CHAR)0x20));
 800c380:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800c384:	3b20      	subs	r3, #32
 800c386:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
                }

                /* Copy a name character.  */
                work_ptr[j] =  (UCHAR)alpha;
 800c38a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800c38c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c38e:	4413      	add	r3, r2
 800c390:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 800c394:	701a      	strb	r2, [r3, #0]
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 800c396:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c398:	3301      	adds	r3, #1
 800c39a:	667b      	str	r3, [r7, #100]	; 0x64
 800c39c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c39e:	3301      	adds	r3, #1
 800c3a0:	663b      	str	r3, [r7, #96]	; 0x60
 800c3a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c3a4:	2b07      	cmp	r3, #7
 800c3a6:	d9ce      	bls.n	800c346 <_fx_directory_entry_write+0xa0e>
 800c3a8:	e002      	b.n	800c3b0 <_fx_directory_entry_write+0xa78>
                    break;
 800c3aa:	bf00      	nop
 800c3ac:	e000      	b.n	800c3b0 <_fx_directory_entry_write+0xa78>
                    break;
 800c3ae:	bf00      	nop
            }
        }

        /* Determine if there are more characters in the name.  */
        if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] != 0)
 800c3b0:	693b      	ldr	r3, [r7, #16]
 800c3b2:	681a      	ldr	r2, [r3, #0]
 800c3b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c3b6:	4413      	add	r3, r2
 800c3b8:	781b      	ldrb	r3, [r3, #0]
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d031      	beq.n	800c422 <_fx_directory_entry_write+0xaea>
        {

            /* Loop to copy the remainder of the name.  */
            for (i++, j = FX_DIR_NAME_SIZE; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++, j++)
 800c3be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c3c0:	3301      	adds	r3, #1
 800c3c2:	667b      	str	r3, [r7, #100]	; 0x64
 800c3c4:	2308      	movs	r3, #8
 800c3c6:	663b      	str	r3, [r7, #96]	; 0x60
 800c3c8:	e026      	b.n	800c418 <_fx_directory_entry_write+0xae0>
            {

                /* Check for end of copy conditions.  */
                if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == 0)
 800c3ca:	693b      	ldr	r3, [r7, #16]
 800c3cc:	681a      	ldr	r2, [r3, #0]
 800c3ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c3d0:	4413      	add	r3, r2
 800c3d2:	781b      	ldrb	r3, [r3, #0]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d023      	beq.n	800c420 <_fx_directory_entry_write+0xae8>
                {
                    break;
                }

                /* Pickup shortname character.  */
                alpha = entry_ptr -> fx_dir_entry_name[i];
 800c3d8:	693b      	ldr	r3, [r7, #16]
 800c3da:	681a      	ldr	r2, [r3, #0]
 800c3dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c3de:	4413      	add	r3, r2
 800c3e0:	781b      	ldrb	r3, [r3, #0]
 800c3e2:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

                /* Determine if character is lower case.  */
                if ((alpha >= 'a') && (alpha <= 'z'))
 800c3e6:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800c3ea:	2b60      	cmp	r3, #96	; 0x60
 800c3ec:	d908      	bls.n	800c400 <_fx_directory_entry_write+0xac8>
 800c3ee:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800c3f2:	2b7a      	cmp	r3, #122	; 0x7a
 800c3f4:	d804      	bhi.n	800c400 <_fx_directory_entry_write+0xac8>
                {

                    /* Store the character - converted to upper case.  */
                    alpha =  (CHAR)(alpha - ((CHAR)0x20));
 800c3f6:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800c3fa:	3b20      	subs	r3, #32
 800c3fc:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
                }

                /* Copy a name character.  */
                work_ptr[j] =  (UCHAR)alpha;
 800c400:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800c402:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c404:	4413      	add	r3, r2
 800c406:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 800c40a:	701a      	strb	r2, [r3, #0]
            for (i++, j = FX_DIR_NAME_SIZE; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++, j++)
 800c40c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c40e:	3301      	adds	r3, #1
 800c410:	667b      	str	r3, [r7, #100]	; 0x64
 800c412:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c414:	3301      	adds	r3, #1
 800c416:	663b      	str	r3, [r7, #96]	; 0x60
 800c418:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c41a:	2b0a      	cmp	r3, #10
 800c41c:	d9d5      	bls.n	800c3ca <_fx_directory_entry_write+0xa92>
 800c41e:	e000      	b.n	800c422 <_fx_directory_entry_write+0xaea>
                    break;
 800c420:	bf00      	nop
            }
        }

        /* Move to the next entry.  */
        work_ptr += (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE);
 800c422:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c424:	330b      	adds	r3, #11
 800c426:	677b      	str	r3, [r7, #116]	; 0x74
    }

    /* Write out the 8.3 part of the name. */

    /* Copy the attribute into the destination.  */
    *work_ptr++ =  entry_ptr -> fx_dir_entry_attributes;
 800c428:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c42a:	1c5a      	adds	r2, r3, #1
 800c42c:	677a      	str	r2, [r7, #116]	; 0x74
 800c42e:	693a      	ldr	r2, [r7, #16]
 800c430:	7f12      	ldrb	r2, [r2, #28]
 800c432:	701a      	strb	r2, [r3, #0]

    /* Copy the reserved byte.  */
    *work_ptr++ =  entry_ptr -> fx_dir_entry_reserved;
 800c434:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c436:	1c5a      	adds	r2, r3, #1
 800c438:	677a      	str	r2, [r7, #116]	; 0x74
 800c43a:	693a      	ldr	r2, [r7, #16]
 800c43c:	7f52      	ldrb	r2, [r2, #29]
 800c43e:	701a      	strb	r2, [r3, #0]

    /* Copy the created time in milliseconds.  */
    *work_ptr++ =  entry_ptr -> fx_dir_entry_created_time_ms;
 800c440:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c442:	1c5a      	adds	r2, r3, #1
 800c444:	677a      	str	r2, [r7, #116]	; 0x74
 800c446:	693a      	ldr	r2, [r7, #16]
 800c448:	7f92      	ldrb	r2, [r2, #30]
 800c44a:	701a      	strb	r2, [r3, #0]

    /* Copy the created time.  */
    _fx_utility_16_unsigned_write(work_ptr, entry_ptr -> fx_dir_entry_created_time);
 800c44c:	693b      	ldr	r3, [r7, #16]
 800c44e:	6a1b      	ldr	r3, [r3, #32]
 800c450:	4619      	mov	r1, r3
 800c452:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800c454:	f005 fe61 	bl	801211a <_fx_utility_16_unsigned_write>
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */
 800c458:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c45a:	3302      	adds	r3, #2
 800c45c:	677b      	str	r3, [r7, #116]	; 0x74

    /* Copy the created date.  */
    _fx_utility_16_unsigned_write(work_ptr, entry_ptr -> fx_dir_entry_created_date);
 800c45e:	693b      	ldr	r3, [r7, #16]
 800c460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c462:	4619      	mov	r1, r3
 800c464:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800c466:	f005 fe58 	bl	801211a <_fx_utility_16_unsigned_write>
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */
 800c46a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c46c:	3302      	adds	r3, #2
 800c46e:	677b      	str	r3, [r7, #116]	; 0x74

    /* Copy the last accessed date.  */
    _fx_utility_16_unsigned_write(work_ptr, entry_ptr -> fx_dir_entry_last_accessed_date);
 800c470:	693b      	ldr	r3, [r7, #16]
 800c472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c474:	4619      	mov	r1, r3
 800c476:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800c478:	f005 fe4f 	bl	801211a <_fx_utility_16_unsigned_write>
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */
 800c47c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c47e:	3302      	adds	r3, #2
 800c480:	677b      	str	r3, [r7, #116]	; 0x74

    /* Determine if a FAT32 entry is present.  */
    if (media_ptr -> fx_media_32_bit_FAT)
 800c482:	697b      	ldr	r3, [r7, #20]
 800c484:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c486:	2b00      	cmp	r3, #0
 800c488:	d008      	beq.n	800c49c <_fx_directory_entry_write+0xb64>
    {

        /* Yes, FAT32 is present, store upper half of cluster.  */
        temp = (entry_ptr -> fx_dir_entry_cluster >> 16);
 800c48a:	693b      	ldr	r3, [r7, #16]
 800c48c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c48e:	0c1b      	lsrs	r3, r3, #16
 800c490:	66fb      	str	r3, [r7, #108]	; 0x6c
        _fx_utility_16_unsigned_write(work_ptr, temp);
 800c492:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800c494:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800c496:	f005 fe40 	bl	801211a <_fx_utility_16_unsigned_write>
 800c49a:	e003      	b.n	800c4a4 <_fx_directory_entry_write+0xb6c>
    else
    {

        /* No, FAT16 or FAT12 is present, just write a 0 for
           the upper half of the cluster.  */
        _fx_utility_16_unsigned_write(work_ptr, 0);
 800c49c:	2100      	movs	r1, #0
 800c49e:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800c4a0:	f005 fe3b 	bl	801211a <_fx_utility_16_unsigned_write>
    }

    /* Advance the entry pointer.  */
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */
 800c4a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c4a6:	3302      	adds	r3, #2
 800c4a8:	677b      	str	r3, [r7, #116]	; 0x74

    /* Copy the time into the destination.  */
    _fx_utility_16_unsigned_write(work_ptr, entry_ptr -> fx_dir_entry_time);
 800c4aa:	693b      	ldr	r3, [r7, #16]
 800c4ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4ae:	4619      	mov	r1, r3
 800c4b0:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800c4b2:	f005 fe32 	bl	801211a <_fx_utility_16_unsigned_write>
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */
 800c4b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c4b8:	3302      	adds	r3, #2
 800c4ba:	677b      	str	r3, [r7, #116]	; 0x74

    /* Copy the date into the destination.  */
    _fx_utility_16_unsigned_write(work_ptr, entry_ptr -> fx_dir_entry_date);
 800c4bc:	693b      	ldr	r3, [r7, #16]
 800c4be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4c0:	4619      	mov	r1, r3
 800c4c2:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800c4c4:	f005 fe29 	bl	801211a <_fx_utility_16_unsigned_write>
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */
 800c4c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c4ca:	3302      	adds	r3, #2
 800c4cc:	677b      	str	r3, [r7, #116]	; 0x74

    /* Copy the starting cluster into the destination.  */
    _fx_utility_16_unsigned_write(work_ptr, (UINT)entry_ptr -> fx_dir_entry_cluster);
 800c4ce:	693b      	ldr	r3, [r7, #16]
 800c4d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4d2:	4619      	mov	r1, r3
 800c4d4:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800c4d6:	f005 fe20 	bl	801211a <_fx_utility_16_unsigned_write>
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */
 800c4da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c4dc:	3302      	adds	r3, #2
 800c4de:	677b      	str	r3, [r7, #116]	; 0x74

    /* Copy the file size into the destination.  */
    _fx_utility_32_unsigned_write(work_ptr, (ULONG)entry_ptr -> fx_dir_entry_file_size);
 800c4e0:	693b      	ldr	r3, [r7, #16]
 800c4e2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800c4e6:	4613      	mov	r3, r2
 800c4e8:	4619      	mov	r1, r3
 800c4ea:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800c4ec:	f005 fe47 	bl	801217e <_fx_utility_32_unsigned_write>
    else
    {
#endif /* FX_ENABLE_FAULT_TOLERANT */

        /* Write the directory sector to the media.  */
        status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) logical_sector,
 800c4f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c4f2:	2200      	movs	r2, #0
 800c4f4:	461c      	mov	r4, r3
 800c4f6:	4615      	mov	r5, r2
 800c4f8:	2303      	movs	r3, #3
 800c4fa:	9302      	str	r3, [sp, #8]
 800c4fc:	2301      	movs	r3, #1
 800c4fe:	9301      	str	r3, [sp, #4]
 800c500:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c502:	9300      	str	r3, [sp, #0]
 800c504:	4622      	mov	r2, r4
 800c506:	462b      	mov	r3, r5
 800c508:	6978      	ldr	r0, [r7, #20]
 800c50a:	f007 fcfb 	bl	8013f04 <_fx_utility_logical_sector_write>
 800c50e:	62f8      	str	r0, [r7, #44]	; 0x2c
#ifdef FX_ENABLE_FAULT_TOLERANT
    }
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Determine if an error occurred.  */
    if (status != FX_SUCCESS)
 800c510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c512:	2b00      	cmp	r3, #0
 800c514:	d001      	beq.n	800c51a <_fx_directory_entry_write+0xbe2>
    {

        /* Return the error status.  */
        return(status);
 800c516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c518:	e044      	b.n	800c5a4 <_fx_directory_entry_write+0xc6c>

#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE

    /* Determine if there is a previously found directory entry in the directory
       search cache.  */
    if (media_ptr -> fx_media_last_found_name[0])
 800c51a:	697b      	ldr	r3, [r7, #20]
 800c51c:	f893 33e0 	ldrb.w	r3, [r3, #992]	; 0x3e0
 800c520:	2b00      	cmp	r3, #0
 800c522:	d03e      	beq.n	800c5a2 <_fx_directory_entry_write+0xc6a>
    {

        /* Determine if the cached search directory entry matches the directory entry being
           written.  */
        if ((entry_ptr -> fx_dir_entry_log_sector == media_ptr -> fx_media_last_found_entry.fx_dir_entry_log_sector) &&
 800c524:	693b      	ldr	r3, [r7, #16]
 800c526:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800c52a:	697b      	ldr	r3, [r7, #20]
 800c52c:	e9d3 23ac 	ldrd	r2, r3, [r3, #688]	; 0x2b0
 800c530:	4299      	cmp	r1, r3
 800c532:	bf08      	it	eq
 800c534:	4290      	cmpeq	r0, r2
 800c536:	d134      	bne.n	800c5a2 <_fx_directory_entry_write+0xc6a>
            (entry_ptr -> fx_dir_entry_byte_offset == media_ptr -> fx_media_last_found_entry.fx_dir_entry_byte_offset))
 800c538:	693b      	ldr	r3, [r7, #16]
 800c53a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c53c:	697b      	ldr	r3, [r7, #20]
 800c53e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
        if ((entry_ptr -> fx_dir_entry_log_sector == media_ptr -> fx_media_last_found_entry.fx_dir_entry_log_sector) &&
 800c542:	429a      	cmp	r2, r3
 800c544:	d12d      	bne.n	800c5a2 <_fx_directory_entry_write+0xc6a>
        {

            /* Yes, this entry is the same as the one currently in the directory search cache.
               Update various fields in the directory search cache with the information being
               written now.  */
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_cluster =         entry_ptr -> fx_dir_entry_cluster;
 800c546:	693b      	ldr	r3, [r7, #16]
 800c548:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c54a:	697b      	ldr	r3, [r7, #20]
 800c54c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_file_size =       entry_ptr -> fx_dir_entry_file_size;
 800c550:	693b      	ldr	r3, [r7, #16]
 800c552:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800c556:	6979      	ldr	r1, [r7, #20]
 800c558:	e9c1 23aa 	strd	r2, r3, [r1, #680]	; 0x2a8
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_attributes =      entry_ptr -> fx_dir_entry_attributes;
 800c55c:	693b      	ldr	r3, [r7, #16]
 800c55e:	7f1a      	ldrb	r2, [r3, #28]
 800c560:	697b      	ldr	r3, [r7, #20]
 800c562:	f883 228c 	strb.w	r2, [r3, #652]	; 0x28c
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_time =            entry_ptr -> fx_dir_entry_time;
 800c566:	693b      	ldr	r3, [r7, #16]
 800c568:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c56a:	697b      	ldr	r3, [r7, #20]
 800c56c:	f8c3 229c 	str.w	r2, [r3, #668]	; 0x29c
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_date =            entry_ptr -> fx_dir_entry_date;
 800c570:	693b      	ldr	r3, [r7, #16]
 800c572:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c574:	697b      	ldr	r3, [r7, #20]
 800c576:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_reserved =        entry_ptr -> fx_dir_entry_reserved;
 800c57a:	693b      	ldr	r3, [r7, #16]
 800c57c:	7f5a      	ldrb	r2, [r3, #29]
 800c57e:	697b      	ldr	r3, [r7, #20]
 800c580:	f883 228d 	strb.w	r2, [r3, #653]	; 0x28d
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_created_time_ms = entry_ptr -> fx_dir_entry_created_time_ms;
 800c584:	693b      	ldr	r3, [r7, #16]
 800c586:	7f9a      	ldrb	r2, [r3, #30]
 800c588:	697b      	ldr	r3, [r7, #20]
 800c58a:	f883 228e 	strb.w	r2, [r3, #654]	; 0x28e
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_created_time =    entry_ptr -> fx_dir_entry_created_time;
 800c58e:	693b      	ldr	r3, [r7, #16]
 800c590:	6a1a      	ldr	r2, [r3, #32]
 800c592:	697b      	ldr	r3, [r7, #20]
 800c594:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_created_date =    entry_ptr -> fx_dir_entry_created_date;
 800c598:	693b      	ldr	r3, [r7, #16]
 800c59a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c59c:	697b      	ldr	r3, [r7, #20]
 800c59e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        }
    }
#endif

    /* Return success to the caller.  */
    return(FX_SUCCESS);
 800c5a2:	2300      	movs	r3, #0
}
 800c5a4:	4618      	mov	r0, r3
 800c5a6:	3778      	adds	r7, #120	; 0x78
 800c5a8:	46bd      	mov	sp, r7
 800c5aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c5ae:	bf00      	nop

0800c5b0 <_fx_directory_free_search>:
/*                                            check for sub directory,    */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _fx_directory_free_search(FX_MEDIA *media_ptr, FX_DIR_ENTRY *directory_ptr, FX_DIR_ENTRY *entry_ptr)
{
 800c5b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c5b4:	b0a8      	sub	sp, #160	; 0xa0
 800c5b6:	af04      	add	r7, sp, #16
 800c5b8:	6278      	str	r0, [r7, #36]	; 0x24
 800c5ba:	6239      	str	r1, [r7, #32]
 800c5bc:	61fa      	str	r2, [r7, #28]
#endif /* FX_ENABLE_EXFAT */

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of directory free entry search requests.  */
    media_ptr -> fx_media_directory_free_searches++;
 800c5be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5c0:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 800c5c4:	1c5a      	adds	r2, r3, #1
 800c5c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5c8:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
#endif

    /* Initialize the entry sector values.  */
    entry_sector = entry_offset = 0;
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	67bb      	str	r3, [r7, #120]	; 0x78
 800c5d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c5d2:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* Set the long file name flag to false.  */
    entry_ptr -> fx_dir_entry_long_name_present =  0;
 800c5d4:	69fb      	ldr	r3, [r7, #28]
 800c5d6:	2200      	movs	r2, #0
 800c5d8:	615a      	str	r2, [r3, #20]

    /* Are there leading dots?  */
    if (entry_ptr -> fx_dir_entry_name[0] == '.')
 800c5da:	69fb      	ldr	r3, [r7, #28]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	781b      	ldrb	r3, [r3, #0]
 800c5e0:	2b2e      	cmp	r3, #46	; 0x2e
 800c5e2:	d108      	bne.n	800c5f6 <_fx_directory_free_search+0x46>
    {

        /* Is there more than 1 dot?  */
        if (entry_ptr -> fx_dir_entry_name[1] == '.')
 800c5e4:	69fb      	ldr	r3, [r7, #28]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	3301      	adds	r3, #1
 800c5ea:	781b      	ldrb	r3, [r3, #0]
 800c5ec:	2b2e      	cmp	r3, #46	; 0x2e
 800c5ee:	d102      	bne.n	800c5f6 <_fx_directory_free_search+0x46>
        {
            /* Yes, consider the name invalid.  */
            return(FX_INVALID_NAME);
 800c5f0:	230c      	movs	r3, #12
 800c5f2:	f000 bc17 	b.w	800ce24 <_fx_directory_free_search+0x874>
        }
    }

    /* Determine if a long file name is present.  */
    for (i = 0, j = 0; entry_ptr -> fx_dir_entry_name[i]; i++)
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c602:	e13d      	b.n	800c880 <_fx_directory_free_search+0x2d0>
    {

        /* Check for upper-case characters.  */
        if ((entry_ptr -> fx_dir_entry_name[i] >= 'A') && (entry_ptr -> fx_dir_entry_name[i] <= 'Z'))
 800c604:	69fb      	ldr	r3, [r7, #28]
 800c606:	681a      	ldr	r2, [r3, #0]
 800c608:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c60c:	4413      	add	r3, r2
 800c60e:	781b      	ldrb	r3, [r3, #0]
 800c610:	2b40      	cmp	r3, #64	; 0x40
 800c612:	d908      	bls.n	800c626 <_fx_directory_free_search+0x76>
 800c614:	69fb      	ldr	r3, [r7, #28]
 800c616:	681a      	ldr	r2, [r3, #0]
 800c618:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c61c:	4413      	add	r3, r2
 800c61e:	781b      	ldrb	r3, [r3, #0]
 800c620:	2b5a      	cmp	r3, #90	; 0x5a
 800c622:	f240 8121 	bls.w	800c868 <_fx_directory_free_search+0x2b8>
        {
            continue;
        }
        /* Check for numeric characters.  */
        else if ((entry_ptr -> fx_dir_entry_name[i] >= '0') && (entry_ptr -> fx_dir_entry_name[i] <= '9'))
 800c626:	69fb      	ldr	r3, [r7, #28]
 800c628:	681a      	ldr	r2, [r3, #0]
 800c62a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c62e:	4413      	add	r3, r2
 800c630:	781b      	ldrb	r3, [r3, #0]
 800c632:	2b2f      	cmp	r3, #47	; 0x2f
 800c634:	d908      	bls.n	800c648 <_fx_directory_free_search+0x98>
 800c636:	69fb      	ldr	r3, [r7, #28]
 800c638:	681a      	ldr	r2, [r3, #0]
 800c63a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c63e:	4413      	add	r3, r2
 800c640:	781b      	ldrb	r3, [r3, #0]
 800c642:	2b39      	cmp	r3, #57	; 0x39
 800c644:	f240 8112 	bls.w	800c86c <_fx_directory_free_search+0x2bc>
        {
            continue;
        }
        /* Check for any lower-case characters.  */
        else if ((entry_ptr -> fx_dir_entry_name[i] >= 'a') && (entry_ptr -> fx_dir_entry_name[i] <= 'z'))
 800c648:	69fb      	ldr	r3, [r7, #28]
 800c64a:	681a      	ldr	r2, [r3, #0]
 800c64c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c650:	4413      	add	r3, r2
 800c652:	781b      	ldrb	r3, [r3, #0]
 800c654:	2b60      	cmp	r3, #96	; 0x60
 800c656:	d90b      	bls.n	800c670 <_fx_directory_free_search+0xc0>
 800c658:	69fb      	ldr	r3, [r7, #28]
 800c65a:	681a      	ldr	r2, [r3, #0]
 800c65c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c660:	4413      	add	r3, r2
 800c662:	781b      	ldrb	r3, [r3, #0]
 800c664:	2b7a      	cmp	r3, #122	; 0x7a
 800c666:	d803      	bhi.n	800c670 <_fx_directory_free_search+0xc0>
        {
            entry_ptr -> fx_dir_entry_long_name_present =  1;
 800c668:	69fb      	ldr	r3, [r7, #28]
 800c66a:	2201      	movs	r2, #1
 800c66c:	615a      	str	r2, [r3, #20]
 800c66e:	e102      	b.n	800c876 <_fx_directory_free_search+0x2c6>
        }
        /* Check for a space in the middle of the name.  */
        else if (entry_ptr -> fx_dir_entry_name[i] == ' ')
 800c670:	69fb      	ldr	r3, [r7, #28]
 800c672:	681a      	ldr	r2, [r3, #0]
 800c674:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c678:	4413      	add	r3, r2
 800c67a:	781b      	ldrb	r3, [r3, #0]
 800c67c:	2b20      	cmp	r3, #32
 800c67e:	d103      	bne.n	800c688 <_fx_directory_free_search+0xd8>
        {
            entry_ptr -> fx_dir_entry_long_name_present = 1;
 800c680:	69fb      	ldr	r3, [r7, #28]
 800c682:	2201      	movs	r2, #1
 800c684:	615a      	str	r2, [r3, #20]
 800c686:	e0f6      	b.n	800c876 <_fx_directory_free_search+0x2c6>
        }
        /* Check for a dot in the name.  */
        else if (entry_ptr -> fx_dir_entry_name[i] == '.')
 800c688:	69fb      	ldr	r3, [r7, #28]
 800c68a:	681a      	ldr	r2, [r3, #0]
 800c68c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c690:	4413      	add	r3, r2
 800c692:	781b      	ldrb	r3, [r3, #0]
 800c694:	2b2e      	cmp	r3, #46	; 0x2e
 800c696:	d114      	bne.n	800c6c2 <_fx_directory_free_search+0x112>
        {
            /* Determine if this is the first dot detected.  */
            if (j == 0)
 800c698:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d10c      	bne.n	800c6ba <_fx_directory_free_search+0x10a>
            {
                /* First dot, remember where it was.  */
                j = i;
 800c6a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c6a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

                /* Determine if this is a leading dot.  */
                if (i == 0)
 800c6a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	f040 80e2 	bne.w	800c876 <_fx_directory_free_search+0x2c6>
                {

                    /* Leading dot detected, treat as a long filename.  */
                    entry_ptr -> fx_dir_entry_long_name_present =  1;
 800c6b2:	69fb      	ldr	r3, [r7, #28]
 800c6b4:	2201      	movs	r2, #1
 800c6b6:	615a      	str	r2, [r3, #20]
 800c6b8:	e0dd      	b.n	800c876 <_fx_directory_free_search+0x2c6>
                }
            }
            else
            {
                /* Second dot detected, must have a long file name.  */
                entry_ptr -> fx_dir_entry_long_name_present = 1;
 800c6ba:	69fb      	ldr	r3, [r7, #28]
 800c6bc:	2201      	movs	r2, #1
 800c6be:	615a      	str	r2, [r3, #20]
 800c6c0:	e0d9      	b.n	800c876 <_fx_directory_free_search+0x2c6>
            }
        }
        /* Check for a special 0xE5 character.  */
        else if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == (UCHAR)0xE5)
 800c6c2:	69fb      	ldr	r3, [r7, #28]
 800c6c4:	681a      	ldr	r2, [r3, #0]
 800c6c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c6ca:	4413      	add	r3, r2
 800c6cc:	781b      	ldrb	r3, [r3, #0]
 800c6ce:	2be5      	cmp	r3, #229	; 0xe5
 800c6d0:	d103      	bne.n	800c6da <_fx_directory_free_search+0x12a>
        {
            entry_ptr -> fx_dir_entry_long_name_present = 1;
 800c6d2:	69fb      	ldr	r3, [r7, #28]
 800c6d4:	2201      	movs	r2, #1
 800c6d6:	615a      	str	r2, [r3, #20]
 800c6d8:	e0cd      	b.n	800c876 <_fx_directory_free_search+0x2c6>
        }
        /* Check for code point value greater than 127.  */
        else if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] > (UCHAR)127)
 800c6da:	69fb      	ldr	r3, [r7, #28]
 800c6dc:	681a      	ldr	r2, [r3, #0]
 800c6de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c6e2:	4413      	add	r3, r2
 800c6e4:	781b      	ldrb	r3, [r3, #0]
 800c6e6:	b25b      	sxtb	r3, r3
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	f2c0 80c1 	blt.w	800c870 <_fx_directory_free_search+0x2c0>
        {
            continue;
        }
        /* Check for any special characters.  */
        else if ((entry_ptr -> fx_dir_entry_name[i] == '~') ||
 800c6ee:	69fb      	ldr	r3, [r7, #28]
 800c6f0:	681a      	ldr	r2, [r3, #0]
 800c6f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c6f6:	4413      	add	r3, r2
 800c6f8:	781b      	ldrb	r3, [r3, #0]
 800c6fa:	2b7e      	cmp	r3, #126	; 0x7e
 800c6fc:	f000 80ba 	beq.w	800c874 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '-') ||
 800c700:	69fb      	ldr	r3, [r7, #28]
 800c702:	681a      	ldr	r2, [r3, #0]
 800c704:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c708:	4413      	add	r3, r2
 800c70a:	781b      	ldrb	r3, [r3, #0]
        else if ((entry_ptr -> fx_dir_entry_name[i] == '~') ||
 800c70c:	2b2d      	cmp	r3, #45	; 0x2d
 800c70e:	f000 80b1 	beq.w	800c874 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '_') ||
 800c712:	69fb      	ldr	r3, [r7, #28]
 800c714:	681a      	ldr	r2, [r3, #0]
 800c716:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c71a:	4413      	add	r3, r2
 800c71c:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '-') ||
 800c71e:	2b5f      	cmp	r3, #95	; 0x5f
 800c720:	f000 80a8 	beq.w	800c874 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '}') ||
 800c724:	69fb      	ldr	r3, [r7, #28]
 800c726:	681a      	ldr	r2, [r3, #0]
 800c728:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c72c:	4413      	add	r3, r2
 800c72e:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '_') ||
 800c730:	2b7d      	cmp	r3, #125	; 0x7d
 800c732:	f000 809f 	beq.w	800c874 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '{') ||
 800c736:	69fb      	ldr	r3, [r7, #28]
 800c738:	681a      	ldr	r2, [r3, #0]
 800c73a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c73e:	4413      	add	r3, r2
 800c740:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '}') ||
 800c742:	2b7b      	cmp	r3, #123	; 0x7b
 800c744:	f000 8096 	beq.w	800c874 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '(') ||
 800c748:	69fb      	ldr	r3, [r7, #28]
 800c74a:	681a      	ldr	r2, [r3, #0]
 800c74c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c750:	4413      	add	r3, r2
 800c752:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '{') ||
 800c754:	2b28      	cmp	r3, #40	; 0x28
 800c756:	f000 808d 	beq.w	800c874 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == ')') ||
 800c75a:	69fb      	ldr	r3, [r7, #28]
 800c75c:	681a      	ldr	r2, [r3, #0]
 800c75e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c762:	4413      	add	r3, r2
 800c764:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '(') ||
 800c766:	2b29      	cmp	r3, #41	; 0x29
 800c768:	f000 8084 	beq.w	800c874 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '`') ||
 800c76c:	69fb      	ldr	r3, [r7, #28]
 800c76e:	681a      	ldr	r2, [r3, #0]
 800c770:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c774:	4413      	add	r3, r2
 800c776:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == ')') ||
 800c778:	2b60      	cmp	r3, #96	; 0x60
 800c77a:	d07b      	beq.n	800c874 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '\'') ||
 800c77c:	69fb      	ldr	r3, [r7, #28]
 800c77e:	681a      	ldr	r2, [r3, #0]
 800c780:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c784:	4413      	add	r3, r2
 800c786:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '`') ||
 800c788:	2b27      	cmp	r3, #39	; 0x27
 800c78a:	d073      	beq.n	800c874 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '!') ||
 800c78c:	69fb      	ldr	r3, [r7, #28]
 800c78e:	681a      	ldr	r2, [r3, #0]
 800c790:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c794:	4413      	add	r3, r2
 800c796:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '\'') ||
 800c798:	2b21      	cmp	r3, #33	; 0x21
 800c79a:	d06b      	beq.n	800c874 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '#') ||
 800c79c:	69fb      	ldr	r3, [r7, #28]
 800c79e:	681a      	ldr	r2, [r3, #0]
 800c7a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c7a4:	4413      	add	r3, r2
 800c7a6:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '!') ||
 800c7a8:	2b23      	cmp	r3, #35	; 0x23
 800c7aa:	d063      	beq.n	800c874 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '$') ||
 800c7ac:	69fb      	ldr	r3, [r7, #28]
 800c7ae:	681a      	ldr	r2, [r3, #0]
 800c7b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c7b4:	4413      	add	r3, r2
 800c7b6:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '#') ||
 800c7b8:	2b24      	cmp	r3, #36	; 0x24
 800c7ba:	d05b      	beq.n	800c874 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '&') ||
 800c7bc:	69fb      	ldr	r3, [r7, #28]
 800c7be:	681a      	ldr	r2, [r3, #0]
 800c7c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c7c4:	4413      	add	r3, r2
 800c7c6:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '$') ||
 800c7c8:	2b26      	cmp	r3, #38	; 0x26
 800c7ca:	d053      	beq.n	800c874 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '@') ||
 800c7cc:	69fb      	ldr	r3, [r7, #28]
 800c7ce:	681a      	ldr	r2, [r3, #0]
 800c7d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c7d4:	4413      	add	r3, r2
 800c7d6:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '&') ||
 800c7d8:	2b40      	cmp	r3, #64	; 0x40
 800c7da:	d04b      	beq.n	800c874 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '^') ||
 800c7dc:	69fb      	ldr	r3, [r7, #28]
 800c7de:	681a      	ldr	r2, [r3, #0]
 800c7e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c7e4:	4413      	add	r3, r2
 800c7e6:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '@') ||
 800c7e8:	2b5e      	cmp	r3, #94	; 0x5e
 800c7ea:	d043      	beq.n	800c874 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '%'))
 800c7ec:	69fb      	ldr	r3, [r7, #28]
 800c7ee:	681a      	ldr	r2, [r3, #0]
 800c7f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c7f4:	4413      	add	r3, r2
 800c7f6:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '^') ||
 800c7f8:	2b25      	cmp	r3, #37	; 0x25
 800c7fa:	d03b      	beq.n	800c874 <_fx_directory_free_search+0x2c4>
        {
            continue;
        }
        /* Check for long filename special characters.  */
        else if ((entry_ptr -> fx_dir_entry_name[i] == '+') ||
 800c7fc:	69fb      	ldr	r3, [r7, #28]
 800c7fe:	681a      	ldr	r2, [r3, #0]
 800c800:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c804:	4413      	add	r3, r2
 800c806:	781b      	ldrb	r3, [r3, #0]
 800c808:	2b2b      	cmp	r3, #43	; 0x2b
 800c80a:	d027      	beq.n	800c85c <_fx_directory_free_search+0x2ac>
                 (entry_ptr -> fx_dir_entry_name[i] == ',') ||
 800c80c:	69fb      	ldr	r3, [r7, #28]
 800c80e:	681a      	ldr	r2, [r3, #0]
 800c810:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c814:	4413      	add	r3, r2
 800c816:	781b      	ldrb	r3, [r3, #0]
        else if ((entry_ptr -> fx_dir_entry_name[i] == '+') ||
 800c818:	2b2c      	cmp	r3, #44	; 0x2c
 800c81a:	d01f      	beq.n	800c85c <_fx_directory_free_search+0x2ac>
                 (entry_ptr -> fx_dir_entry_name[i] == ';') ||
 800c81c:	69fb      	ldr	r3, [r7, #28]
 800c81e:	681a      	ldr	r2, [r3, #0]
 800c820:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c824:	4413      	add	r3, r2
 800c826:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == ',') ||
 800c828:	2b3b      	cmp	r3, #59	; 0x3b
 800c82a:	d017      	beq.n	800c85c <_fx_directory_free_search+0x2ac>
                 (entry_ptr -> fx_dir_entry_name[i] == '=') ||
 800c82c:	69fb      	ldr	r3, [r7, #28]
 800c82e:	681a      	ldr	r2, [r3, #0]
 800c830:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c834:	4413      	add	r3, r2
 800c836:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == ';') ||
 800c838:	2b3d      	cmp	r3, #61	; 0x3d
 800c83a:	d00f      	beq.n	800c85c <_fx_directory_free_search+0x2ac>
                 (entry_ptr -> fx_dir_entry_name[i] == '[') ||
 800c83c:	69fb      	ldr	r3, [r7, #28]
 800c83e:	681a      	ldr	r2, [r3, #0]
 800c840:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c844:	4413      	add	r3, r2
 800c846:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '=') ||
 800c848:	2b5b      	cmp	r3, #91	; 0x5b
 800c84a:	d007      	beq.n	800c85c <_fx_directory_free_search+0x2ac>
                 (entry_ptr -> fx_dir_entry_name[i] == ']'))
 800c84c:	69fb      	ldr	r3, [r7, #28]
 800c84e:	681a      	ldr	r2, [r3, #0]
 800c850:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c854:	4413      	add	r3, r2
 800c856:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '[') ||
 800c858:	2b5d      	cmp	r3, #93	; 0x5d
 800c85a:	d103      	bne.n	800c864 <_fx_directory_free_search+0x2b4>
        {
            entry_ptr -> fx_dir_entry_long_name_present = 1;
 800c85c:	69fb      	ldr	r3, [r7, #28]
 800c85e:	2201      	movs	r2, #1
 800c860:	615a      	str	r2, [r3, #20]
 800c862:	e008      	b.n	800c876 <_fx_directory_free_search+0x2c6>
        }
        /* Something is wrong with the supplied name.  */
        else
        {
            return(FX_INVALID_NAME);
 800c864:	230c      	movs	r3, #12
 800c866:	e2dd      	b.n	800ce24 <_fx_directory_free_search+0x874>
            continue;
 800c868:	bf00      	nop
 800c86a:	e004      	b.n	800c876 <_fx_directory_free_search+0x2c6>
            continue;
 800c86c:	bf00      	nop
 800c86e:	e002      	b.n	800c876 <_fx_directory_free_search+0x2c6>
            continue;
 800c870:	bf00      	nop
 800c872:	e000      	b.n	800c876 <_fx_directory_free_search+0x2c6>
            continue;
 800c874:	bf00      	nop
    for (i = 0, j = 0; entry_ptr -> fx_dir_entry_name[i]; i++)
 800c876:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c87a:	3301      	adds	r3, #1
 800c87c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c880:	69fb      	ldr	r3, [r7, #28]
 800c882:	681a      	ldr	r2, [r3, #0]
 800c884:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c888:	4413      	add	r3, r2
 800c88a:	781b      	ldrb	r3, [r3, #0]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	f47f aeb9 	bne.w	800c604 <_fx_directory_free_search+0x54>
        }
    }

    /* Determine if a dot was found.  */
    if (j != 0)
 800c892:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c896:	2b00      	cmp	r3, #0
 800c898:	d009      	beq.n	800c8ae <_fx_directory_free_search+0x2fe>
    {

        /* Yes, Determine if the extension exceeds a 3 character extension.  */
        if ((i - j) > 4)
 800c89a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800c89e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c8a2:	1ad3      	subs	r3, r2, r3
 800c8a4:	2b04      	cmp	r3, #4
 800c8a6:	d902      	bls.n	800c8ae <_fx_directory_free_search+0x2fe>
        {

            /* Yes, long file name is present.  */
            entry_ptr -> fx_dir_entry_long_name_present = 1;
 800c8a8:	69fb      	ldr	r3, [r7, #28]
 800c8aa:	2201      	movs	r2, #1
 800c8ac:	615a      	str	r2, [r3, #20]
        }
    }

    /* Calculate the total entries needed.  */
    if ((i <= 12) && (entry_ptr -> fx_dir_entry_long_name_present == 0))
 800c8ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c8b2:	2b0c      	cmp	r3, #12
 800c8b4:	d818      	bhi.n	800c8e8 <_fx_directory_free_search+0x338>
 800c8b6:	69fb      	ldr	r3, [r7, #28]
 800c8b8:	695b      	ldr	r3, [r3, #20]
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d114      	bne.n	800c8e8 <_fx_directory_free_search+0x338>
    {

        /* Initialize the total entries to 1.  */
        total_entries = 1;
 800c8be:	2301      	movs	r3, #1
 800c8c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

        /* Check for special instance of long file name.  */
        if ((j >= 9) || ((i - j) >= 9))
 800c8c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c8c8:	2b08      	cmp	r3, #8
 800c8ca:	d806      	bhi.n	800c8da <_fx_directory_free_search+0x32a>
 800c8cc:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800c8d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c8d4:	1ad3      	subs	r3, r2, r3
 800c8d6:	2b08      	cmp	r3, #8
 800c8d8:	d928      	bls.n	800c92c <_fx_directory_free_search+0x37c>
        {

            /* The dot is after 8 character or there is no dot and the name
               is greater than 8 character. */
            entry_ptr -> fx_dir_entry_long_name_present = 1;
 800c8da:	69fb      	ldr	r3, [r7, #28]
 800c8dc:	2201      	movs	r2, #1
 800c8de:	615a      	str	r2, [r3, #20]
            total_entries = 2;
 800c8e0:	2302      	movs	r3, #2
 800c8e2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        if ((j >= 9) || ((i - j) >= 9))
 800c8e6:	e021      	b.n	800c92c <_fx_directory_free_search+0x37c>
    else
    {

        /* Long file name is present, calculate how many entries are needed
           to represent it.  */
        if (i % 13 == 0)
 800c8e8:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800c8ec:	4b95      	ldr	r3, [pc, #596]	; (800cb44 <_fx_directory_free_search+0x594>)
 800c8ee:	fba3 2301 	umull	r2, r3, r3, r1
 800c8f2:	089a      	lsrs	r2, r3, #2
 800c8f4:	4613      	mov	r3, r2
 800c8f6:	005b      	lsls	r3, r3, #1
 800c8f8:	4413      	add	r3, r2
 800c8fa:	009b      	lsls	r3, r3, #2
 800c8fc:	4413      	add	r3, r2
 800c8fe:	1aca      	subs	r2, r1, r3
 800c900:	2a00      	cmp	r2, #0
 800c902:	d109      	bne.n	800c918 <_fx_directory_free_search+0x368>
        {
            /* Exact fit, just add one for the 8.3 short name.  */
            total_entries = i / 13 + 1;
 800c904:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c908:	4a8e      	ldr	r2, [pc, #568]	; (800cb44 <_fx_directory_free_search+0x594>)
 800c90a:	fba2 2303 	umull	r2, r3, r2, r3
 800c90e:	089b      	lsrs	r3, r3, #2
 800c910:	3301      	adds	r3, #1
 800c912:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c916:	e00a      	b.n	800c92e <_fx_directory_free_search+0x37e>
        }
        else
        {
            /* Non-exact fit, add two for 8.3 short name and overlap.  */
            total_entries = i / 13 + 2;
 800c918:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c91c:	4a89      	ldr	r2, [pc, #548]	; (800cb44 <_fx_directory_free_search+0x594>)
 800c91e:	fba2 2303 	umull	r2, r3, r2, r3
 800c922:	089b      	lsrs	r3, r3, #2
 800c924:	3302      	adds	r3, #2
 800c926:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c92a:	e000      	b.n	800c92e <_fx_directory_free_search+0x37e>
        if ((j >= 9) || ((i - j) >= 9))
 800c92c:	bf00      	nop
    }

    /* Determine if the search is in the root directory or in a
       sub-directory.  Note: the directory search function clears the
       first character of the name for the root directory.  */
    if (directory_ptr -> fx_dir_entry_name[0])
 800c92e:	6a3b      	ldr	r3, [r7, #32]
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	781b      	ldrb	r3, [r3, #0]
 800c934:	2b00      	cmp	r3, #0
 800c936:	d00c      	beq.n	800c952 <_fx_directory_free_search+0x3a2>

        /* Search for a free entry in a sub-directory.  */

        /* Pickup the number of entries in this directory.  This was placed
           into the unused file size field.  */
        directory_entries =  (ULONG)directory_ptr -> fx_dir_entry_file_size;
 800c938:	6a3b      	ldr	r3, [r7, #32]
 800c93a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800c93e:	4613      	mov	r3, r2
 800c940:	65fb      	str	r3, [r7, #92]	; 0x5c

        /* Point the search directory pointer to this entry.  */
        search_dir_ptr =  directory_ptr;
 800c942:	6a3b      	ldr	r3, [r7, #32]
 800c944:	65bb      	str	r3, [r7, #88]	; 0x58

        /* Ensure that the search directory's last search cluster is cleared.  */
        search_dir_ptr -> fx_dir_entry_last_search_cluster =  0;
 800c946:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c948:	2200      	movs	r2, #0
 800c94a:	651a      	str	r2, [r3, #80]	; 0x50

        /* Set the initial index to 2, since the first two directory entries are
           always allocated.  */
        directory_index =  2;
 800c94c:	2302      	movs	r3, #2
 800c94e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c950:	e006      	b.n	800c960 <_fx_directory_free_search+0x3b0>
    {

        /* Find a free entry in the root directory.  */

        /* Setup the number of directory entries.  */
        directory_entries =  (ULONG)media_ptr -> fx_media_root_directory_entries;
 800c952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c954:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c956:	65fb      	str	r3, [r7, #92]	; 0x5c

        /* Set the search pointer to NULL since we are working off of the
           root directory.  */
        search_dir_ptr =  FX_NULL;
 800c958:	2300      	movs	r3, #0
 800c95a:	65bb      	str	r3, [r7, #88]	; 0x58

        /* Set the initial index to 0, since the first entry of the root directory is valid.  */
        directory_index =  0;
 800c95c:	2300      	movs	r3, #0
 800c95e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    /* Loop through entries in the search directory.  Yes, this is a
       linear search!  */
    free_entry_start = directory_entries;
 800c960:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c962:	657b      	str	r3, [r7, #84]	; 0x54
    do
    {

        /* Read an entry from the directory.  */
        status =  _fx_directory_entry_read(media_ptr, search_dir_ptr, &directory_index, entry_ptr);
 800c964:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800c968:	69fb      	ldr	r3, [r7, #28]
 800c96a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c96c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c96e:	f7fe fc5c 	bl	800b22a <_fx_directory_entry_read>
 800c972:	64f8      	str	r0, [r7, #76]	; 0x4c

        /* Check for error status.  */
        if (status != FX_SUCCESS)
 800c974:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c976:	2b00      	cmp	r3, #0
 800c978:	d001      	beq.n	800c97e <_fx_directory_free_search+0x3ce>
        {
            return(status);
 800c97a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c97c:	e252      	b.n	800ce24 <_fx_directory_free_search+0x874>
        }

        /* Determine if this is an empty entry.  */
        if ((((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_FREE) && (entry_ptr -> fx_dir_entry_short_name[0] == 0)) ||
 800c97e:	69fb      	ldr	r3, [r7, #28]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	781b      	ldrb	r3, [r3, #0]
 800c984:	2be5      	cmp	r3, #229	; 0xe5
 800c986:	d103      	bne.n	800c990 <_fx_directory_free_search+0x3e0>
 800c988:	69fb      	ldr	r3, [r7, #28]
 800c98a:	791b      	ldrb	r3, [r3, #4]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d004      	beq.n	800c99a <_fx_directory_free_search+0x3ea>
            ((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_DONE))
 800c990:	69fb      	ldr	r3, [r7, #28]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	781b      	ldrb	r3, [r3, #0]
        if ((((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_FREE) && (entry_ptr -> fx_dir_entry_short_name[0] == 0)) ||
 800c996:	2b00      	cmp	r3, #0
 800c998:	d16b      	bne.n	800ca72 <_fx_directory_free_search+0x4c2>
        {

            /* Determine how many entries are needed.  */
            if (total_entries > 1)
 800c99a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c99e:	2b01      	cmp	r3, #1
 800c9a0:	d91a      	bls.n	800c9d8 <_fx_directory_free_search+0x428>
            {

                /* Multiple entries are needed for long file names.  Mark this
                   entry as free. */
                if (entry_ptr -> fx_dir_entry_name[0] == FX_DIR_ENTRY_DONE)
 800c9a2:	69fb      	ldr	r3, [r7, #28]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	781b      	ldrb	r3, [r3, #0]
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d115      	bne.n	800c9d8 <_fx_directory_free_search+0x428>
                {

                    entry_ptr -> fx_dir_entry_long_name_present =  0;
 800c9ac:	69fb      	ldr	r3, [r7, #28]
 800c9ae:	2200      	movs	r2, #0
 800c9b0:	615a      	str	r2, [r3, #20]
                    entry_ptr -> fx_dir_entry_name[0] =      (CHAR)FX_DIR_ENTRY_FREE;
 800c9b2:	69fb      	ldr	r3, [r7, #28]
 800c9b4:	681a      	ldr	r2, [r3, #0]
 800c9b6:	23e5      	movs	r3, #229	; 0xe5
 800c9b8:	7013      	strb	r3, [r2, #0]
                    entry_ptr -> fx_dir_entry_name[1] =      (CHAR)0;
 800c9ba:	69fb      	ldr	r3, [r7, #28]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	1c5a      	adds	r2, r3, #1
 800c9c0:	2300      	movs	r3, #0
 800c9c2:	7013      	strb	r3, [r2, #0]

                    /* Write out the directory entry.  */
                    status = _fx_directory_entry_write(media_ptr, entry_ptr);
 800c9c4:	69f9      	ldr	r1, [r7, #28]
 800c9c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c9c8:	f7fe ffb6 	bl	800b938 <_fx_directory_entry_write>
 800c9cc:	64f8      	str	r0, [r7, #76]	; 0x4c
                    if(status != FX_SUCCESS)
 800c9ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d001      	beq.n	800c9d8 <_fx_directory_free_search+0x428>
                    {  
                        return(status);
 800c9d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c9d6:	e225      	b.n	800ce24 <_fx_directory_free_search+0x874>
                       i.e. entries must be logically contiguous.  */
                }
            }

            /* Determine if we are at the first free entry.  */
            if (free_entry_start == directory_entries)
 800c9d8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c9da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c9dc:	429a      	cmp	r2, r3
 800c9de:	d109      	bne.n	800c9f4 <_fx_directory_free_search+0x444>
            {

                /* Remember the start of the free entry.  */
                free_entry_start =  directory_index;
 800c9e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9e2:	657b      	str	r3, [r7, #84]	; 0x54
                entry_sector =      (ULONG)entry_ptr -> fx_dir_entry_log_sector;
 800c9e4:	69fb      	ldr	r3, [r7, #28]
 800c9e6:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800c9ea:	4613      	mov	r3, r2
 800c9ec:	67fb      	str	r3, [r7, #124]	; 0x7c
                entry_offset  =     entry_ptr -> fx_dir_entry_byte_offset;
 800c9ee:	69fb      	ldr	r3, [r7, #28]
 800c9f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c9f2:	67bb      	str	r3, [r7, #120]	; 0x78
            }

            /* Determine if there are enough free entries to satisfy the request.  */
            if ((directory_index - free_entry_start + 1) >= total_entries)
 800c9f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c9f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c9f8:	1ad3      	subs	r3, r2, r3
 800c9fa:	3301      	adds	r3, #1
 800c9fc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ca00:	429a      	cmp	r2, r3
 800ca02:	d838      	bhi.n	800ca76 <_fx_directory_free_search+0x4c6>

                /* Found an empty slot.  Most pertinent information is already
                   in the entry structure.  */

                /* Setup the the sector and the offset.  */
                entry_ptr -> fx_dir_entry_log_sector =      entry_sector;
 800ca04:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ca06:	2200      	movs	r2, #0
 800ca08:	461c      	mov	r4, r3
 800ca0a:	4615      	mov	r5, r2
 800ca0c:	69fb      	ldr	r3, [r7, #28]
 800ca0e:	e9c3 4510 	strd	r4, r5, [r3, #64]	; 0x40
                entry_ptr -> fx_dir_entry_byte_offset =     entry_offset;
 800ca12:	69fb      	ldr	r3, [r7, #28]
 800ca14:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ca16:	649a      	str	r2, [r3, #72]	; 0x48

                /* Initialize the additional directory entries.  */
                entry_ptr -> fx_dir_entry_reserved =            0;
 800ca18:	69fb      	ldr	r3, [r7, #28]
 800ca1a:	2200      	movs	r2, #0
 800ca1c:	775a      	strb	r2, [r3, #29]
                entry_ptr -> fx_dir_entry_created_time_ms =     0;
 800ca1e:	69fb      	ldr	r3, [r7, #28]
 800ca20:	2200      	movs	r2, #0
 800ca22:	779a      	strb	r2, [r3, #30]
{
UINT posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ca24:	f3ef 8310 	mrs	r3, PRIMASK
 800ca28:	63bb      	str	r3, [r7, #56]	; 0x38
#endif
    return(posture);
 800ca2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38

__attribute__( ( always_inline ) ) static inline UINT __disable_interrupts(void)
{
UINT int_posture;

    int_posture = __get_interrupt_posture();
 800ca2c:	637b      	str	r3, [r7, #52]	; 0x34

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 800ca2e:	b672      	cpsid	i
#endif
    return(int_posture);
 800ca30:	6b7b      	ldr	r3, [r7, #52]	; 0x34

                /* Lockout interrupts for time/date access.  */
                FX_DISABLE_INTS
 800ca32:	64bb      	str	r3, [r7, #72]	; 0x48

                entry_ptr -> fx_dir_entry_created_time =        _fx_system_time;
 800ca34:	4b44      	ldr	r3, [pc, #272]	; (800cb48 <_fx_directory_free_search+0x598>)
 800ca36:	681a      	ldr	r2, [r3, #0]
 800ca38:	69fb      	ldr	r3, [r7, #28]
 800ca3a:	621a      	str	r2, [r3, #32]
                entry_ptr -> fx_dir_entry_created_date =        _fx_system_date;
 800ca3c:	4b43      	ldr	r3, [pc, #268]	; (800cb4c <_fx_directory_free_search+0x59c>)
 800ca3e:	681a      	ldr	r2, [r3, #0]
 800ca40:	69fb      	ldr	r3, [r7, #28]
 800ca42:	625a      	str	r2, [r3, #36]	; 0x24
                entry_ptr -> fx_dir_entry_last_accessed_date =  _fx_system_date;
 800ca44:	4b41      	ldr	r3, [pc, #260]	; (800cb4c <_fx_directory_free_search+0x59c>)
 800ca46:	681a      	ldr	r2, [r3, #0]
 800ca48:	69fb      	ldr	r3, [r7, #28]
 800ca4a:	629a      	str	r2, [r3, #40]	; 0x28
 800ca4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ca4e:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ca50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca52:	f383 8810 	msr	PRIMASK, r3
}
 800ca56:	bf00      	nop

                /* Restore interrupts.  */
                FX_RESTORE_INTS

                /* Determine if a long file name is present.  */
                if (total_entries == 1)
 800ca58:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ca5c:	2b01      	cmp	r3, #1
 800ca5e:	d103      	bne.n	800ca68 <_fx_directory_free_search+0x4b8>
                {
                    entry_ptr -> fx_dir_entry_long_name_present =  0;
 800ca60:	69fb      	ldr	r3, [r7, #28]
 800ca62:	2200      	movs	r2, #0
 800ca64:	615a      	str	r2, [r3, #20]
 800ca66:	e002      	b.n	800ca6e <_fx_directory_free_search+0x4be>
                }
                else
                {
                    entry_ptr -> fx_dir_entry_long_name_present =  1;
 800ca68:	69fb      	ldr	r3, [r7, #28]
 800ca6a:	2201      	movs	r2, #1
 800ca6c:	615a      	str	r2, [r3, #20]
                }

                /* Return a successful completion.  */
                return(FX_SUCCESS);
 800ca6e:	2300      	movs	r3, #0
 800ca70:	e1d8      	b.n	800ce24 <_fx_directory_free_search+0x874>
        }
        else
        {

            /* Reset the free entry start.  */
            free_entry_start =  directory_entries;
 800ca72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ca74:	657b      	str	r3, [r7, #84]	; 0x54
        }

        /* Move to the next entry.  */
        directory_index++;
 800ca76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca78:	3301      	adds	r3, #1
 800ca7a:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Determine if we have exceeded the number of entries in the current directory.  */
        if (directory_index >= directory_entries)
 800ca7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca7e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ca80:	429a      	cmp	r2, r3
 800ca82:	f200 81c9 	bhi.w	800ce18 <_fx_directory_free_search+0x868>
        {

            /* Calculate how many sectors we need for the new directory entry.  */
            sectors =  ((total_entries * FX_DIR_ENTRY_SIZE) + (media_ptr -> fx_media_bytes_per_sector - 1))/
 800ca86:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ca8a:	015a      	lsls	r2, r3, #5
 800ca8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca90:	4413      	add	r3, r2
 800ca92:	1e5a      	subs	r2, r3, #1
                                                                            media_ptr -> fx_media_bytes_per_sector;
 800ca94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            sectors =  ((total_entries * FX_DIR_ENTRY_SIZE) + (media_ptr -> fx_media_bytes_per_sector - 1))/
 800ca98:	fbb2 f3f3 	udiv	r3, r2, r3
 800ca9c:	653b      	str	r3, [r7, #80]	; 0x50

            /* Now calculate how many clusters we need for the new directory entry.  */
            clusters_needed = (sectors + (media_ptr -> fx_media_sectors_per_cluster - 1)) / media_ptr -> fx_media_sectors_per_cluster;
 800ca9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caa0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800caa2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800caa4:	4413      	add	r3, r2
 800caa6:	1e5a      	subs	r2, r3, #1
 800caa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800caac:	fbb2 f3f3 	udiv	r3, r2, r3
 800cab0:	647b      	str	r3, [r7, #68]	; 0x44

            /* Not enough empty entries were found.  If the specified directory is a sub-directory,
               attempt to allocate another cluster to it.  */
            if (((search_dir_ptr) || (media_ptr -> fx_media_32_bit_FAT)) && (media_ptr -> fx_media_available_clusters >= clusters_needed))
 800cab2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d104      	bne.n	800cac2 <_fx_directory_free_search+0x512>
 800cab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	f000 81ab 	beq.w	800ce18 <_fx_directory_free_search+0x868>
 800cac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cac4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cac6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cac8:	429a      	cmp	r2, r3
 800caca:	f200 81a5 	bhi.w	800ce18 <_fx_directory_free_search+0x868>
            {

                /* Search for the additional clusters we need.  */
                first_new_cluster =  0;
 800cace:	2300      	movs	r3, #0
 800cad0:	66bb      	str	r3, [r7, #104]	; 0x68
                total_clusters =     media_ptr -> fx_media_total_clusters;
 800cad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cad6:	66fb      	str	r3, [r7, #108]	; 0x6c
                last_cluster =       0;
 800cad8:	2300      	movs	r3, #0
 800cada:	667b      	str	r3, [r7, #100]	; 0x64
                FAT_index    =       media_ptr -> fx_media_cluster_search_start;
 800cadc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cade:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cae2:	677b      	str	r3, [r7, #116]	; 0x74
                clusters =           clusters_needed;
 800cae4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cae6:	663b      	str	r3, [r7, #96]	; 0x60

                /* Loop to find the needed clusters.  */
                while (clusters)
 800cae8:	e10b      	b.n	800cd02 <_fx_directory_free_search+0x752>
                {

                    /* Decrease the cluster count.  */
                    clusters--;
 800caea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800caec:	3b01      	subs	r3, #1
 800caee:	663b      	str	r3, [r7, #96]	; 0x60
                    /* Loop to find the first available cluster.  */
                    do
                    {

                        /* Make sure we stop looking after one pass through the FAT table.  */
                        if (!total_clusters)
 800caf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d101      	bne.n	800cafa <_fx_directory_free_search+0x54a>
                        {

                            /* Something is wrong with the media - the desired clusters were
                               not found in the FAT table.  */
                            return(FX_NO_MORE_SPACE);
 800caf6:	230a      	movs	r3, #10
 800caf8:	e194      	b.n	800ce24 <_fx_directory_free_search+0x874>
                        }

                        /* Read FAT entry.  */
                        status =  _fx_utility_FAT_entry_read(media_ptr, FAT_index, &FAT_value);
 800cafa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800cafe:	461a      	mov	r2, r3
 800cb00:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800cb02:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cb04:	f005 fb5c 	bl	80121c0 <_fx_utility_FAT_entry_read>
 800cb08:	64f8      	str	r0, [r7, #76]	; 0x4c

                        /* Check for a bad status.  */
                        if (status != FX_SUCCESS)
 800cb0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d001      	beq.n	800cb14 <_fx_directory_free_search+0x564>
                        {

                            /* Return the bad status.  */
                            return(status);
 800cb10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb12:	e187      	b.n	800ce24 <_fx_directory_free_search+0x874>
                        }

                        /* Decrement the total cluster count.  */
                        total_clusters--;
 800cb14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cb16:	3b01      	subs	r3, #1
 800cb18:	66fb      	str	r3, [r7, #108]	; 0x6c

                        /* Determine if the FAT entry is free.  */
                        if (FAT_value == FX_FREE_CLUSTER)
 800cb1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d117      	bne.n	800cb50 <_fx_directory_free_search+0x5a0>
                        {

                            /* Move cluster search pointer forward.  */
                            media_ptr -> fx_media_cluster_search_start =  FAT_index + 1;
 800cb20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cb22:	1c5a      	adds	r2, r3, #1
 800cb24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

                            /* Determine if this needs to be wrapped.  */
                            if (media_ptr -> fx_media_cluster_search_start >= (media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START))
 800cb2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb2c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800cb30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb34:	3302      	adds	r3, #2
 800cb36:	429a      	cmp	r2, r3
 800cb38:	d316      	bcc.n	800cb68 <_fx_directory_free_search+0x5b8>
                            {

                                /* Wrap the search to the beginning FAT entry.  */
                                media_ptr -> fx_media_cluster_search_start =  FX_FAT_ENTRY_START;
 800cb3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb3c:	2202      	movs	r2, #2
 800cb3e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                            }

                            /* Break this loop.  */
                            break;
 800cb42:	e011      	b.n	800cb68 <_fx_directory_free_search+0x5b8>
 800cb44:	4ec4ec4f 	.word	0x4ec4ec4f
 800cb48:	200151c0 	.word	0x200151c0
 800cb4c:	200151bc 	.word	0x200151bc
                        }
                        else
                        {

                            /* FAT entry is not free... Advance the FAT index.  */
                            FAT_index++;
 800cb50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cb52:	3301      	adds	r3, #1
 800cb54:	677b      	str	r3, [r7, #116]	; 0x74

                            /* Determine if we need to wrap the FAT index around.  */
                            if (FAT_index >= (media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START))
 800cb56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb5a:	3302      	adds	r3, #2
 800cb5c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800cb5e:	429a      	cmp	r2, r3
 800cb60:	d3c6      	bcc.n	800caf0 <_fx_directory_free_search+0x540>
                            {

                                /* Wrap the search to the beginning FAT entry.  */
                                FAT_index =  FX_FAT_ENTRY_START;
 800cb62:	2302      	movs	r3, #2
 800cb64:	677b      	str	r3, [r7, #116]	; 0x74
                        if (!total_clusters)
 800cb66:	e7c3      	b.n	800caf0 <_fx_directory_free_search+0x540>
                            break;
 800cb68:	bf00      	nop

                    /* We found an available cluster.  We now need to clear all of entries in
                       each of the cluster's sectors.  */

                    /* Calculate the logical sector of this cluster.  */
                    logical_sector =  ((ULONG) media_ptr -> fx_media_data_sector_start) +
 800cb6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb6c:	6d19      	ldr	r1, [r3, #80]	; 0x50
                                       ((((ULONG) FAT_index) - FX_FAT_ENTRY_START) *
 800cb6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cb70:	1e9a      	subs	r2, r3, #2
                                       ((ULONG) media_ptr -> fx_media_sectors_per_cluster));
 800cb72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
                                       ((((ULONG) FAT_index) - FX_FAT_ENTRY_START) *
 800cb76:	fb02 f303 	mul.w	r3, r2, r3
                    logical_sector =  ((ULONG) media_ptr -> fx_media_data_sector_start) +
 800cb7a:	440b      	add	r3, r1
 800cb7c:	643b      	str	r3, [r7, #64]	; 0x40

                    /* Pickup the number of sectors for the next directory cluster.  */
                    sectors =  media_ptr -> fx_media_sectors_per_cluster;
 800cb7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb82:	653b      	str	r3, [r7, #80]	; 0x50

                    /* Read the logical sector just for cache reasons.  */
                    status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 800cb84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb86:	2200      	movs	r2, #0
 800cb88:	613b      	str	r3, [r7, #16]
 800cb8a:	617a      	str	r2, [r7, #20]
                                                              media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 800cb8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb8e:	689a      	ldr	r2, [r3, #8]
                    status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 800cb90:	2303      	movs	r3, #3
 800cb92:	9302      	str	r3, [sp, #8]
 800cb94:	2301      	movs	r3, #1
 800cb96:	9301      	str	r3, [sp, #4]
 800cb98:	9200      	str	r2, [sp, #0]
 800cb9a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800cb9e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cba0:	f006 ff1c 	bl	80139dc <_fx_utility_logical_sector_read>
 800cba4:	64f8      	str	r0, [r7, #76]	; 0x4c

                    /* Check the return value.  */
                    if (status != FX_SUCCESS)
 800cba6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d001      	beq.n	800cbb0 <_fx_directory_free_search+0x600>
                    {

                        /* Return the error status.  */
                        return(status);
 800cbac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cbae:	e139      	b.n	800ce24 <_fx_directory_free_search+0x874>
                    }

                    /* Clear the entire first sector of the new sub-directory cluster.  */
                    work_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer;
 800cbb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbb2:	689b      	ldr	r3, [r3, #8]
 800cbb4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                    i =  0;
 800cbb8:	2300      	movs	r3, #0
 800cbba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                    while (i < media_ptr -> fx_media_bytes_per_sector)
 800cbbe:	e00d      	b.n	800cbdc <_fx_directory_free_search+0x62c>
                    {

                        /* Clear 4 bytes.  */
                        *((ULONG *)work_ptr) =  (ULONG)0;
 800cbc0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800cbc4:	2200      	movs	r2, #0
 800cbc6:	601a      	str	r2, [r3, #0]

                        /* Increment pointer.  */
                        work_ptr =  work_ptr + sizeof(ULONG);
 800cbc8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800cbcc:	3304      	adds	r3, #4
 800cbce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

                        /* Increment counter.  */
                        i =  i + (ULONG)sizeof(ULONG);
 800cbd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cbd6:	3304      	adds	r3, #4
 800cbd8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                    while (i < media_ptr -> fx_media_bytes_per_sector)
 800cbdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbe0:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800cbe4:	429a      	cmp	r2, r3
 800cbe6:	d3eb      	bcc.n	800cbc0 <_fx_directory_free_search+0x610>
                    }

                    /* Write the logical sector to ensure the zeros are written.  */
                    status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) logical_sector,
 800cbe8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cbea:	2200      	movs	r2, #0
 800cbec:	60bb      	str	r3, [r7, #8]
 800cbee:	60fa      	str	r2, [r7, #12]
                                                               media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 800cbf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbf2:	689a      	ldr	r2, [r3, #8]
                    status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) logical_sector,
 800cbf4:	2303      	movs	r3, #3
 800cbf6:	9302      	str	r3, [sp, #8]
 800cbf8:	2301      	movs	r3, #1
 800cbfa:	9301      	str	r3, [sp, #4]
 800cbfc:	9200      	str	r2, [sp, #0]
 800cbfe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800cc02:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cc04:	f007 f97e 	bl	8013f04 <_fx_utility_logical_sector_write>
 800cc08:	64f8      	str	r0, [r7, #76]	; 0x4c

                    /* Determine if the write was successful.  */
                    if (status != FX_SUCCESS)
 800cc0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d001      	beq.n	800cc14 <_fx_directory_free_search+0x664>
                    {

                        /* Return the error code.  */
                        return(status);
 800cc10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc12:	e107      	b.n	800ce24 <_fx_directory_free_search+0x874>
                    }

                    /* Determine if there are more sectors to clear in the first cluster of the new
                       sub-directory.  */
                    if (sectors > 1)
 800cc14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc16:	2b01      	cmp	r3, #1
 800cc18:	d95a      	bls.n	800ccd0 <_fx_directory_free_search+0x720>

                        /* Yes, invalidate all cached sectors that are contained in the newly allocated first
                           cluster of the directory.  */

                        /* Flush the internal logical sector cache.  */
                        status =  _fx_utility_logical_sector_flush(media_ptr, (ULONG64) (logical_sector + 1), (ULONG64) (sectors - 1), FX_TRUE);
 800cc1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc1c:	3301      	adds	r3, #1
 800cc1e:	2200      	movs	r2, #0
 800cc20:	603b      	str	r3, [r7, #0]
 800cc22:	607a      	str	r2, [r7, #4]
 800cc24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc26:	3b01      	subs	r3, #1
 800cc28:	2200      	movs	r2, #0
 800cc2a:	4698      	mov	r8, r3
 800cc2c:	4691      	mov	r9, r2
 800cc2e:	2301      	movs	r3, #1
 800cc30:	9302      	str	r3, [sp, #8]
 800cc32:	e9cd 8900 	strd	r8, r9, [sp]
 800cc36:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc3a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cc3c:	f006 fcb8 	bl	80135b0 <_fx_utility_logical_sector_flush>
 800cc40:	64f8      	str	r0, [r7, #76]	; 0x4c

                        /* Determine if the flush was successful.  */
                        if (status != FX_SUCCESS)
 800cc42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d001      	beq.n	800cc4c <_fx_directory_free_search+0x69c>
                        {

                            /* Return the error code.  */
                            return(status);
 800cc48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc4a:	e0eb      	b.n	800ce24 <_fx_directory_free_search+0x874>
                        }

                        /* Clear all additional sectors of new sub-directory.  */
                        sectors--;
 800cc4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc4e:	3b01      	subs	r3, #1
 800cc50:	653b      	str	r3, [r7, #80]	; 0x50
                        while (sectors)
 800cc52:	e03a      	b.n	800ccca <_fx_directory_free_search+0x71a>
                        {

#ifndef FX_MEDIA_STATISTICS_DISABLE

                            /* Increment the number of driver write sector(s) requests.  */
                            media_ptr -> fx_media_driver_write_requests++;
 800cc54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc56:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 800cc5a:	1c5a      	adds	r2, r3, #1
 800cc5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc5e:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
#endif

                            /* Build Write request to the driver.  */
                            media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 800cc62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc64:	2201      	movs	r2, #1
 800cc66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                            media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 800cc6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc6c:	2290      	movs	r2, #144	; 0x90
 800cc6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                            media_ptr -> fx_media_driver_buffer =           media_ptr -> fx_media_memory_buffer;
 800cc72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc74:	689a      	ldr	r2, [r3, #8]
 800cc76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc78:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
                            media_ptr -> fx_media_driver_logical_sector =   (ULONG)logical_sector + ((ULONG)sectors);
 800cc7c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cc7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc80:	441a      	add	r2, r3
 800cc82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc84:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
                            media_ptr -> fx_media_driver_sectors =          1;
 800cc88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc8a:	2201      	movs	r2, #1
 800cc8c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
                            media_ptr -> fx_media_driver_sector_type =      FX_DIRECTORY_SECTOR;
 800cc90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc92:	2203      	movs	r2, #3
 800cc94:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

                            /* Set the system write flag since we are writing a directory sector.  */
                            media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 800cc98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc9a:	2201      	movs	r2, #1
 800cc9c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                            /* If trace is enabled, insert this event into the trace buffer.  */
                            FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, ((ULONG)logical_sector) + ((ULONG)sectors), 1, media_ptr -> fx_media_memory_buffer, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                            /* Invoke the driver to write the sector.  */
                            (media_ptr -> fx_media_driver_entry) (media_ptr);
 800cca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cca2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800cca6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cca8:	4798      	blx	r3

                            /* Clear the system write flag.  */
                            media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 800ccaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccac:	2200      	movs	r2, #0
 800ccae:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                            /* Determine if an error occurred.  */
                            if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 800ccb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d003      	beq.n	800ccc4 <_fx_directory_free_search+0x714>
                            {

                                /* Return error code.  */
                                return(media_ptr -> fx_media_driver_status);
 800ccbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ccc2:	e0af      	b.n	800ce24 <_fx_directory_free_search+0x874>
                            }

                            /* Decrease the number of sectors to clear.  */
                            sectors--;
 800ccc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ccc6:	3b01      	subs	r3, #1
 800ccc8:	653b      	str	r3, [r7, #80]	; 0x50
                        while (sectors)
 800ccca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d1c1      	bne.n	800cc54 <_fx_directory_free_search+0x6a4>
                        }
                    }

                    /* Determine if we have found the first new cluster yet.  */
                    if (first_new_cluster == 0)
 800ccd0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d101      	bne.n	800ccda <_fx_directory_free_search+0x72a>
                    {

                        /* Remember the first new cluster. */
                        first_new_cluster =  FAT_index;
 800ccd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ccd8:	66bb      	str	r3, [r7, #104]	; 0x68
                    }

                    /* Check for a valid last cluster to link.  */
                    if (last_cluster)
 800ccda:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d00a      	beq.n	800ccf6 <_fx_directory_free_search+0x746>
                    {

                        /* Normal condition - link the last cluster with the new
                           found cluster.  */
                        status = _fx_utility_FAT_entry_write(media_ptr, last_cluster, FAT_index);
 800cce0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800cce2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800cce4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cce6:	f005 fc94 	bl	8012612 <_fx_utility_FAT_entry_write>
 800ccea:	64f8      	str	r0, [r7, #76]	; 0x4c

                        /* Check for a bad FAT write status.  */
                        if (status !=  FX_SUCCESS)
 800ccec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d001      	beq.n	800ccf6 <_fx_directory_free_search+0x746>
                        {

                            /* Return the bad status.  */
                            return(status);
 800ccf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ccf4:	e096      	b.n	800ce24 <_fx_directory_free_search+0x874>
                        }
                    }

                    /* Otherwise, remember the new FAT index as the last.  */
                    last_cluster =  FAT_index;
 800ccf6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ccf8:	667b      	str	r3, [r7, #100]	; 0x64

                    /* Move to the next FAT entry.  */
                    FAT_index =  media_ptr -> fx_media_cluster_search_start;
 800ccfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cd00:	677b      	str	r3, [r7, #116]	; 0x74
                while (clusters)
 800cd02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	f47f aef0 	bne.w	800caea <_fx_directory_free_search+0x53a>
                }

                /* Place an end-of-file marker on the last cluster.  */
                status = _fx_utility_FAT_entry_write(media_ptr, last_cluster, media_ptr -> fx_media_fat_last);
 800cd0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd0c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800cd10:	f8d3 34ac 	ldr.w	r3, [r3, #1196]	; 0x4ac
 800cd14:	461a      	mov	r2, r3
 800cd16:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800cd18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cd1a:	f005 fc7a 	bl	8012612 <_fx_utility_FAT_entry_write>
 800cd1e:	64f8      	str	r0, [r7, #76]	; 0x4c

                /* Check for a bad FAT write status.  */
                if (status !=  FX_SUCCESS)
 800cd20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d001      	beq.n	800cd2a <_fx_directory_free_search+0x77a>
                {

                    /* Return the bad status.  */
                    return(status);
 800cd26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cd28:	e07c      	b.n	800ce24 <_fx_directory_free_search+0x874>
                /* Flush the cached individual FAT entries */
                _fx_utility_FAT_flush(media_ptr);
#endif

                /* Now the new cluster needs to be linked to the sub-directory.  */
                if (search_dir_ptr)
 800cd2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d003      	beq.n	800cd38 <_fx_directory_free_search+0x788>
                {
                    cluster = search_dir_ptr -> fx_dir_entry_cluster;
 800cd30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cd32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd34:	673b      	str	r3, [r7, #112]	; 0x70
 800cd36:	e002      	b.n	800cd3e <_fx_directory_free_search+0x78e>
                }
                else
                {
                    cluster = media_ptr -> fx_media_root_cluster_32;
 800cd38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cd3c:	673b      	str	r3, [r7, #112]	; 0x70
                }

                /* Initialize loop variables.  */
                last_cluster =  0;
 800cd3e:	2300      	movs	r3, #0
 800cd40:	667b      	str	r3, [r7, #100]	; 0x64
                i =  0;
 800cd42:	2300      	movs	r3, #0
 800cd44:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

                /* Follow the link of FAT entries.  */
                while (cluster < media_ptr -> fx_media_fat_reserved)
 800cd48:	e024      	b.n	800cd94 <_fx_directory_free_search+0x7e4>
                {

                    /* Read the current cluster entry from the FAT.  */
                    status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &FAT_value);
 800cd4a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800cd4e:	461a      	mov	r2, r3
 800cd50:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800cd52:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cd54:	f005 fa34 	bl	80121c0 <_fx_utility_FAT_entry_read>
 800cd58:	64f8      	str	r0, [r7, #76]	; 0x4c
                    i++;
 800cd5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cd5e:	3301      	adds	r3, #1
 800cd60:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

                    /* Check the return value.  */
                    if (status != FX_SUCCESS)
 800cd64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d001      	beq.n	800cd6e <_fx_directory_free_search+0x7be>
                    {

                        /* Return the error status.  */
                        return(status);
 800cd6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cd6c:	e05a      	b.n	800ce24 <_fx_directory_free_search+0x874>
                    }

                    /* Determine if the FAT read was invalid.  */
                    if ((cluster < FX_FAT_ENTRY_START) || (cluster == FAT_value) || (i > media_ptr -> fx_media_total_clusters))
 800cd6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cd70:	2b01      	cmp	r3, #1
 800cd72:	d909      	bls.n	800cd88 <_fx_directory_free_search+0x7d8>
 800cd74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd76:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800cd78:	429a      	cmp	r2, r3
 800cd7a:	d005      	beq.n	800cd88 <_fx_directory_free_search+0x7d8>
 800cd7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd80:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800cd84:	429a      	cmp	r2, r3
 800cd86:	d901      	bls.n	800cd8c <_fx_directory_free_search+0x7dc>
                    {

                        /* Return the bad status.  */
                        return(FX_FAT_READ_ERROR);
 800cd88:	2303      	movs	r3, #3
 800cd8a:	e04b      	b.n	800ce24 <_fx_directory_free_search+0x874>
                    }

                    /* Save the last valid cluster.  */
                    last_cluster =  cluster;
 800cd8c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cd8e:	667b      	str	r3, [r7, #100]	; 0x64

                    /* Setup for the next cluster.  */
                    cluster =  FAT_value;
 800cd90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd92:	673b      	str	r3, [r7, #112]	; 0x70
                while (cluster < media_ptr -> fx_media_fat_reserved)
 800cd94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd96:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800cd9a:	f8d3 34a8 	ldr.w	r3, [r3, #1192]	; 0x4a8
 800cd9e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800cda0:	429a      	cmp	r2, r3
 800cda2:	d3d2      	bcc.n	800cd4a <_fx_directory_free_search+0x79a>
                }

                /* Decrease the available clusters in the media.  */
                media_ptr -> fx_media_available_clusters =  media_ptr -> fx_media_available_clusters - clusters_needed;
 800cda4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cda6:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800cda8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cdaa:	1ad2      	subs	r2, r2, r3
 800cdac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdae:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Increase the number of directory entries.  */
                directory_entries =  directory_entries + ((clusters_needed * media_ptr -> fx_media_sectors_per_cluster) * media_ptr -> fx_media_bytes_per_sector) / FX_DIR_ENTRY_SIZE;
 800cdb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cdb4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cdb6:	fb03 f202 	mul.w	r2, r3, r2
 800cdba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdbe:	fb02 f303 	mul.w	r3, r2, r3
 800cdc2:	095b      	lsrs	r3, r3, #5
 800cdc4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cdc6:	4413      	add	r3, r2
 800cdc8:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Determine if we need to reset the free entry start since we changed the
                   number of directory entries.  If the last entry was not free, then we
                   should definitely reset the free entry start.  */
                if (!(((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR) FX_DIR_ENTRY_FREE) && (entry_ptr -> fx_dir_entry_short_name[0] == 0)))
 800cdca:	69fb      	ldr	r3, [r7, #28]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	781b      	ldrb	r3, [r3, #0]
 800cdd0:	2be5      	cmp	r3, #229	; 0xe5
 800cdd2:	d103      	bne.n	800cddc <_fx_directory_free_search+0x82c>
 800cdd4:	69fb      	ldr	r3, [r7, #28]
 800cdd6:	791b      	ldrb	r3, [r3, #4]
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d001      	beq.n	800cde0 <_fx_directory_free_search+0x830>
                {

                    /* Reset the free entry start to indicate we haven't found a starting free entry yet.  */
                    free_entry_start =  directory_entries;
 800cddc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cdde:	657b      	str	r3, [r7, #84]	; 0x54
                }

                /* Update the directory size field.  */
                directory_ptr -> fx_dir_entry_file_size =  directory_entries;
 800cde0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cde2:	2200      	movs	r2, #0
 800cde4:	469a      	mov	sl, r3
 800cde6:	4693      	mov	fp, r2
 800cde8:	6a3b      	ldr	r3, [r7, #32]
 800cdea:	e9c3 ab0e 	strd	sl, fp, [r3, #56]	; 0x38

                /* Defer the update of the FAT entry and the last cluster of the current
                   directory entry until after the new cluster is initialized and written out.  */

                /* Determine if a FAT32 is present.  */
                if ((media_ptr -> fx_media_32_bit_FAT) && (search_dir_ptr == FX_NULL))
 800cdee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdf0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d005      	beq.n	800ce02 <_fx_directory_free_search+0x852>
 800cdf6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d102      	bne.n	800ce02 <_fx_directory_free_search+0x852>
                {

                    /* Change root directory entry count - FAT32 has a variable sized root directory.  */
                    media_ptr -> fx_media_root_directory_entries =  directory_entries;
 800cdfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdfe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ce00:	679a      	str	r2, [r3, #120]	; 0x78
                }

                /* At this point, link up the last cluster with the new cluster.  */
                status =  _fx_utility_FAT_entry_write(media_ptr, last_cluster, first_new_cluster);
 800ce02:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ce04:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800ce06:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ce08:	f005 fc03 	bl	8012612 <_fx_utility_FAT_entry_write>
 800ce0c:	64f8      	str	r0, [r7, #76]	; 0x4c

                /* Check the return value.  */
                if (status != FX_SUCCESS)
 800ce0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d001      	beq.n	800ce18 <_fx_directory_free_search+0x868>
                {

                    /* Return the error status.  */
                    return(status);
 800ce14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ce16:	e005      	b.n	800ce24 <_fx_directory_free_search+0x874>
                /* Flush the cached individual FAT entries */
                _fx_utility_FAT_flush(media_ptr);
#endif
            }
        }
    } while (directory_index < directory_entries);
 800ce18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce1a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ce1c:	429a      	cmp	r2, r3
 800ce1e:	f63f ada1 	bhi.w	800c964 <_fx_directory_free_search+0x3b4>

    /* Return FX_NO_MORE_SPACE status to the caller.  */
    return(FX_NO_MORE_SPACE);
 800ce22:	230a      	movs	r3, #10
}
 800ce24:	4618      	mov	r0, r3
 800ce26:	3790      	adds	r7, #144	; 0x90
 800ce28:	46bd      	mov	sp, r7
 800ce2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ce2e:	bf00      	nop

0800ce30 <_fx_directory_name_extract>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
CHAR  *_fx_directory_name_extract(CHAR *source_ptr, CHAR *dest_ptr)
{
 800ce30:	b480      	push	{r7}
 800ce32:	b085      	sub	sp, #20
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	6078      	str	r0, [r7, #4]
 800ce38:	6039      	str	r1, [r7, #0]

UINT i;


    /* Set the destination string to NULL.  */
    dest_ptr[0] = 0;
 800ce3a:	683b      	ldr	r3, [r7, #0]
 800ce3c:	2200      	movs	r2, #0
 800ce3e:	701a      	strb	r2, [r3, #0]

    /* Is a backslash present?  */
    if ((*source_ptr == '\\') || (*source_ptr == '/'))
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	781b      	ldrb	r3, [r3, #0]
 800ce44:	2b5c      	cmp	r3, #92	; 0x5c
 800ce46:	d003      	beq.n	800ce50 <_fx_directory_name_extract+0x20>
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	781b      	ldrb	r3, [r3, #0]
 800ce4c:	2b2f      	cmp	r3, #47	; 0x2f
 800ce4e:	d106      	bne.n	800ce5e <_fx_directory_name_extract+0x2e>
    {

        /* Advance the string pointer.  */
        source_ptr++;
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	3301      	adds	r3, #1
 800ce54:	607b      	str	r3, [r7, #4]
    }

    /* Loop to remove any leading spaces.  */
    while (*source_ptr == ' ')
 800ce56:	e002      	b.n	800ce5e <_fx_directory_name_extract+0x2e>
    {

        /* Position past leading space.  */
        source_ptr++;
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	3301      	adds	r3, #1
 800ce5c:	607b      	str	r3, [r7, #4]
    while (*source_ptr == ' ')
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	781b      	ldrb	r3, [r3, #0]
 800ce62:	2b20      	cmp	r3, #32
 800ce64:	d0f8      	beq.n	800ce58 <_fx_directory_name_extract+0x28>
    }

    /* Loop to extract the name.  */
    i = 0;
 800ce66:	2300      	movs	r3, #0
 800ce68:	60fb      	str	r3, [r7, #12]
    while (*source_ptr)
 800ce6a:	e015      	b.n	800ce98 <_fx_directory_name_extract+0x68>
    {

        /* If another backslash is present, break the loop.  */
        if ((*source_ptr == '\\') || (*source_ptr == '/'))
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	781b      	ldrb	r3, [r3, #0]
 800ce70:	2b5c      	cmp	r3, #92	; 0x5c
 800ce72:	d017      	beq.n	800cea4 <_fx_directory_name_extract+0x74>
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	781b      	ldrb	r3, [r3, #0]
 800ce78:	2b2f      	cmp	r3, #47	; 0x2f
 800ce7a:	d013      	beq.n	800cea4 <_fx_directory_name_extract+0x74>
            break;
        }

        /* Long name can be at most 255 characters, but are further limited by the
           FX_MAX_LONG_NAME_LEN define.  */
        if (i == FX_MAX_LONG_NAME_LEN - 1)
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	2bff      	cmp	r3, #255	; 0xff
 800ce80:	d00f      	beq.n	800cea2 <_fx_directory_name_extract+0x72>
        {
            break;
        }

        /* Store the character.  */
        dest_ptr[i] =  *source_ptr++;
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	1c5a      	adds	r2, r3, #1
 800ce86:	607a      	str	r2, [r7, #4]
 800ce88:	6839      	ldr	r1, [r7, #0]
 800ce8a:	68fa      	ldr	r2, [r7, #12]
 800ce8c:	440a      	add	r2, r1
 800ce8e:	781b      	ldrb	r3, [r3, #0]
 800ce90:	7013      	strb	r3, [r2, #0]

        /* Increment the character counter.  */
        i++;
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	3301      	adds	r3, #1
 800ce96:	60fb      	str	r3, [r7, #12]
    while (*source_ptr)
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	781b      	ldrb	r3, [r3, #0]
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d1e5      	bne.n	800ce6c <_fx_directory_name_extract+0x3c>
 800cea0:	e000      	b.n	800cea4 <_fx_directory_name_extract+0x74>
            break;
 800cea2:	bf00      	nop
    }

    /* NULL-terminate the string.  */
    dest_ptr[i] =  0;
 800cea4:	683a      	ldr	r2, [r7, #0]
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	4413      	add	r3, r2
 800ceaa:	2200      	movs	r2, #0
 800ceac:	701a      	strb	r2, [r3, #0]

    /* Determine if we can backup to the previous character.  */
    if (i)
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d00b      	beq.n	800cecc <_fx_directory_name_extract+0x9c>
    {

        /* Yes, we can move backwards.  */
        i--;
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	3b01      	subs	r3, #1
 800ceb8:	60fb      	str	r3, [r7, #12]
    }

    /* Get rid of trailing blanks in the destination string.  */
    while (dest_ptr[i] == ' ')
 800ceba:	e007      	b.n	800cecc <_fx_directory_name_extract+0x9c>
    {

        /* Set this entry to NULL.  */
        dest_ptr[i] =  0;
 800cebc:	683a      	ldr	r2, [r7, #0]
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	4413      	add	r3, r2
 800cec2:	2200      	movs	r2, #0
 800cec4:	701a      	strb	r2, [r3, #0]

        /* Backup to the next character. Since leading spaces have been removed,
           we know that the index is always greater than 1.  */
        i--;
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	3b01      	subs	r3, #1
 800ceca:	60fb      	str	r3, [r7, #12]
    while (dest_ptr[i] == ' ')
 800cecc:	683a      	ldr	r2, [r7, #0]
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	4413      	add	r3, r2
 800ced2:	781b      	ldrb	r3, [r3, #0]
 800ced4:	2b20      	cmp	r3, #32
 800ced6:	d0f1      	beq.n	800cebc <_fx_directory_name_extract+0x8c>
    }

    /* Determine if the source string is now at the end.  */
    if (*source_ptr == 0)
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	781b      	ldrb	r3, [r3, #0]
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d101      	bne.n	800cee4 <_fx_directory_name_extract+0xb4>
    {

        /* Yes, return a NULL pointer.  */
        source_ptr = FX_NULL;
 800cee0:	2300      	movs	r3, #0
 800cee2:	607b      	str	r3, [r7, #4]
    }

    /* Return the last pointer position in the source.  */
    return(source_ptr);
 800cee4:	687b      	ldr	r3, [r7, #4]
}
 800cee6:	4618      	mov	r0, r3
 800cee8:	3714      	adds	r7, #20
 800ceea:	46bd      	mov	sp, r7
 800ceec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef0:	4770      	bx	lr
	...

0800cef4 <_fx_directory_search>:
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _fx_directory_search(FX_MEDIA *media_ptr, CHAR *name_ptr, FX_DIR_ENTRY *entry_ptr,
                           FX_DIR_ENTRY *last_dir_ptr, CHAR **last_name_ptr)
{
 800cef4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cef8:	b0c0      	sub	sp, #256	; 0x100
 800cefa:	af00      	add	r7, sp, #0
 800cefc:	62f8      	str	r0, [r7, #44]	; 0x2c
 800cefe:	62b9      	str	r1, [r7, #40]	; 0x28
 800cf00:	627a      	str	r2, [r7, #36]	; 0x24
 800cf02:	623b      	str	r3, [r7, #32]
UINT          found;
UINT          status;
#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE
UINT          v, j;
#endif /* FX_MEDIA_DISABLE_SEARCH_CACHE */
ULONG         cluster, next_cluster = 0;
 800cf04:	2300      	movs	r3, #0
 800cf06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
FX_DIR_ENTRY  search_dir;
FX_DIR_ENTRY *search_dir_ptr;
CHAR         *name, alpha, name_alpha;
#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE
UINT          index;
CHAR         *path_ptr =  FX_NULL;
 800cf0a:	2300      	movs	r3, #0
 800cf0c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
CHAR         *original_name =  name_ptr;
 800cf10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf12:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
#endif /* FX_ENABLE_EXFAT */

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of directory search requests.  */
    media_ptr -> fx_media_directory_searches++;
 800cf16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf18:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 800cf1c:	1c5a      	adds	r2, r3, #1
 800cf1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf20:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
#endif

    /* Setup pointer to media name buffer.  */
    name =  media_ptr -> fx_media_name_buffer;
 800cf24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf26:	f603 039c 	addw	r3, r3, #2204	; 0x89c
 800cf2a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

    /* Setup the last directory, if required.  */
    if (last_dir_ptr)
 800cf2e:	6a3b      	ldr	r3, [r7, #32]
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d003      	beq.n	800cf3c <_fx_directory_search+0x48>
    {

        /* Set the first character of the directory entry to NULL to
           indicate root or no directory.  */
        last_dir_ptr -> fx_dir_entry_name[0] =  0;
 800cf34:	6a3b      	ldr	r3, [r7, #32]
 800cf36:	681a      	ldr	r2, [r3, #0]
 800cf38:	2300      	movs	r3, #0
 800cf3a:	7013      	strb	r3, [r2, #0]
    }

    /* Determine if the file name has a full directory path.  */
    if ((*name_ptr == '\\') || (*name_ptr == '/'))
 800cf3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf3e:	781b      	ldrb	r3, [r3, #0]
 800cf40:	2b5c      	cmp	r3, #92	; 0x5c
 800cf42:	d003      	beq.n	800cf4c <_fx_directory_search+0x58>
 800cf44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf46:	781b      	ldrb	r3, [r3, #0]
 800cf48:	2b2f      	cmp	r3, #47	; 0x2f
 800cf4a:	d103      	bne.n	800cf54 <_fx_directory_search+0x60>
    {

        /* Directory name has full path, set the search pointer to NULL.  */
        search_dir_ptr =  FX_NULL;
 800cf4c:	2300      	movs	r3, #0
 800cf4e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800cf52:	e044      	b.n	800cfde <_fx_directory_search+0xea>
           directory - if there is one.  */

        /* First check for a local path pointer stored in the thread control block.  This
           is only available in ThreadX Version 4 and above.  */
#ifndef FX_NO_LOCAL_PATH
        if (_tx_thread_current_ptr -> tx_thread_filex_ptr)
 800cf54:	4bab      	ldr	r3, [pc, #684]	; (800d204 <_fx_directory_search+0x310>)
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d022      	beq.n	800cfa6 <_fx_directory_search+0xb2>
        {

            /* Determine if the local directory is not the root directory.  */
            if (((FX_PATH *)_tx_thread_current_ptr -> tx_thread_filex_ptr) -> fx_path_directory.fx_dir_entry_name[0])
 800cf60:	4ba8      	ldr	r3, [pc, #672]	; (800d204 <_fx_directory_search+0x310>)
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	781b      	ldrb	r3, [r3, #0]
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d016      	beq.n	800cf9e <_fx_directory_search+0xaa>
            {

                /* Start at the current working directory of the media.  */
                search_dir =   ((FX_PATH *)_tx_thread_current_ptr -> tx_thread_filex_ptr) -> fx_path_directory;
 800cf70:	4ba4      	ldr	r3, [pc, #656]	; (800d204 <_fx_directory_search+0x310>)
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cf78:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800cf7c:	4619      	mov	r1, r3
 800cf7e:	2370      	movs	r3, #112	; 0x70
 800cf80:	461a      	mov	r2, r3
 800cf82:	f00c fe6e 	bl	8019c62 <memcpy>

#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE

                /* Setup pointer to the path.  */
                path_ptr =  ((FX_PATH *)_tx_thread_current_ptr -> tx_thread_filex_ptr) -> fx_path_string;
 800cf86:	4b9f      	ldr	r3, [pc, #636]	; (800d204 <_fx_directory_search+0x310>)
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cf8e:	3370      	adds	r3, #112	; 0x70
 800cf90:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
#endif

                /* Set the internal pointer to the search directory as well.  */
                search_dir_ptr =  &search_dir;
 800cf94:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800cf98:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800cf9c:	e01f      	b.n	800cfde <_fx_directory_search+0xea>
            }
            else
            {

                /* We are searching in the root directory.  */
                search_dir_ptr =  FX_NULL;
 800cf9e:	2300      	movs	r3, #0
 800cfa0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800cfa4:	e01b      	b.n	800cfde <_fx_directory_search+0xea>
            }
        }
        else
#endif
        if (media_ptr -> fx_media_default_path.fx_path_directory.fx_dir_entry_name[0])
 800cfa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfa8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800cfac:	781b      	ldrb	r3, [r3, #0]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d012      	beq.n	800cfd8 <_fx_directory_search+0xe4>
        {

            /* Start at the current working directory of the media.  */
            search_dir =  media_ptr -> fx_media_default_path.fx_path_directory;
 800cfb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfb4:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800cfb8:	f503 619c 	add.w	r1, r3, #1248	; 0x4e0
 800cfbc:	2370      	movs	r3, #112	; 0x70
 800cfbe:	461a      	mov	r2, r3
 800cfc0:	f00c fe4f 	bl	8019c62 <memcpy>

#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE

            /* Setup pointer to the path.  */
            path_ptr =  media_ptr -> fx_media_default_path.fx_path_string;
 800cfc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfc6:	f503 63aa 	add.w	r3, r3, #1360	; 0x550
 800cfca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
#endif

            /* Set the internal pointer to the search directory as well.  */
            search_dir_ptr =  &search_dir;
 800cfce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800cfd2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800cfd6:	e002      	b.n	800cfde <_fx_directory_search+0xea>
        else
        {

            /* The current default directory is the root so just set the
               search directory pointer to NULL.  */
            search_dir_ptr =  FX_NULL;
 800cfd8:	2300      	movs	r3, #0
 800cfda:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }

#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE

    /* Determine if there is a previously found directory entry.  */
    if (media_ptr -> fx_media_last_found_name[0])
 800cfde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfe0:	f893 33e0 	ldrb.w	r3, [r3, #992]	; 0x3e0
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	f000 81b9 	beq.w	800d35c <_fx_directory_search+0x468>
    CHAR *temp_ptr, beta;

        /* Yes, there is a previously found directory in our cache.  */

        /* Initialize the index.  */
        v =  0;
 800cfea:	2300      	movs	r3, #0
 800cfec:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

        /* Determine if there is a full path.  */
        if ((*name_ptr == '\\') || (*name_ptr == '/'))
 800cff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cff2:	781b      	ldrb	r3, [r3, #0]
 800cff4:	2b5c      	cmp	r3, #92	; 0x5c
 800cff6:	d02d      	beq.n	800d054 <_fx_directory_search+0x160>
 800cff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cffa:	781b      	ldrb	r3, [r3, #0]
 800cffc:	2b2f      	cmp	r3, #47	; 0x2f
 800cffe:	d14c      	bne.n	800d09a <_fx_directory_search+0x1a6>
        {

            /* Yes, the full path is in the name buffer. Simply compare with what is in
               the last search buffer.  */
            while ((v < (FX_MAX_LAST_NAME_LEN - 1)) && (name_ptr[v]))
 800d000:	e028      	b.n	800d054 <_fx_directory_search+0x160>
            {

                /* Pickup the respective name characters.  */
                alpha =  name_ptr[v];
 800d002:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d008:	4413      	add	r3, r2
 800d00a:	781b      	ldrb	r3, [r3, #0]
 800d00c:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
                beta =   media_ptr -> fx_media_last_found_name[v];
 800d010:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d012:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d016:	4413      	add	r3, r2
 800d018:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800d01c:	781b      	ldrb	r3, [r3, #0]
 800d01e:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3

                /* Ensure directory markers are the same.  */
                if (alpha == '\\')
 800d022:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800d026:	2b5c      	cmp	r3, #92	; 0x5c
 800d028:	d102      	bne.n	800d030 <_fx_directory_search+0x13c>
                {
                    alpha =  '/';
 800d02a:	232f      	movs	r3, #47	; 0x2f
 800d02c:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
                }
                if (beta == '\\')
 800d030:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 800d034:	2b5c      	cmp	r3, #92	; 0x5c
 800d036:	d102      	bne.n	800d03e <_fx_directory_search+0x14a>
                {
                    beta =  '/';
 800d038:	232f      	movs	r3, #47	; 0x2f
 800d03a:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
                }

                /* Is the name the same?  */
                if (alpha != beta)
 800d03e:	f897 20d3 	ldrb.w	r2, [r7, #211]	; 0xd3
 800d042:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 800d046:	429a      	cmp	r2, r3
 800d048:	d110      	bne.n	800d06c <_fx_directory_search+0x178>
                    /* Break out of loop!  */
                    break;
                }

                /* Move to next character.  */
                v++;
 800d04a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d04e:	3301      	adds	r3, #1
 800d050:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
            while ((v < (FX_MAX_LAST_NAME_LEN - 1)) && (name_ptr[v]))
 800d054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d058:	2bfe      	cmp	r3, #254	; 0xfe
 800d05a:	d808      	bhi.n	800d06e <_fx_directory_search+0x17a>
 800d05c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d05e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d062:	4413      	add	r3, r2
 800d064:	781b      	ldrb	r3, [r3, #0]
 800d066:	2b00      	cmp	r3, #0
 800d068:	d1cb      	bne.n	800d002 <_fx_directory_search+0x10e>
 800d06a:	e000      	b.n	800d06e <_fx_directory_search+0x17a>
                    break;
 800d06c:	bf00      	nop
            }

            /* Determine if we have a match.  */
            if (name_ptr[v] != media_ptr -> fx_media_last_found_name[v])
 800d06e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d074:	4413      	add	r3, r2
 800d076:	7819      	ldrb	r1, [r3, #0]
 800d078:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d07a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d07e:	4413      	add	r3, r2
 800d080:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800d084:	781b      	ldrb	r3, [r3, #0]
 800d086:	4299      	cmp	r1, r3
 800d088:	d003      	beq.n	800d092 <_fx_directory_search+0x19e>
            {
                match =  FX_FALSE;
 800d08a:	2300      	movs	r3, #0
 800d08c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            if (name_ptr[v] != media_ptr -> fx_media_last_found_name[v])
 800d090:	e0cf      	b.n	800d232 <_fx_directory_search+0x33e>
            }
            else
            {
                match =  FX_TRUE;
 800d092:	2301      	movs	r3, #1
 800d094:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            if (name_ptr[v] != media_ptr -> fx_media_last_found_name[v])
 800d098:	e0cb      	b.n	800d232 <_fx_directory_search+0x33e>
        }
        else
        {

            /* Default to found.  */
            match =  FX_TRUE;
 800d09a:	2301      	movs	r3, #1
 800d09c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

            /* Determine if there is a default path to compare with.  */
            if (path_ptr)
 800d0a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d043      	beq.n	800d130 <_fx_directory_search+0x23c>
            {

                /* Yes, compare the current path with what is contained in the last
                   found buffer. Note that the last found name must have at least one
                   path separator as well as room for at least one character for a name. */
                while ((v < (FX_MAX_LAST_NAME_LEN - 1)) && (path_ptr[v]))
 800d0a8:	e029      	b.n	800d0fe <_fx_directory_search+0x20a>
                {

                    /* Pickup the respective name characters.  */
                    alpha =  media_ptr -> fx_media_last_found_name[v];
 800d0aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d0ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d0b0:	4413      	add	r3, r2
 800d0b2:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800d0b6:	781b      	ldrb	r3, [r3, #0]
 800d0b8:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
                    beta =   path_ptr[v];
 800d0bc:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800d0c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d0c4:	4413      	add	r3, r2
 800d0c6:	781b      	ldrb	r3, [r3, #0]
 800d0c8:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3

                    /* Ensure directory markers are the same.  */
                    if (alpha == '\\')
 800d0cc:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800d0d0:	2b5c      	cmp	r3, #92	; 0x5c
 800d0d2:	d102      	bne.n	800d0da <_fx_directory_search+0x1e6>
                    {
                        alpha =  '/';
 800d0d4:	232f      	movs	r3, #47	; 0x2f
 800d0d6:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
                    }
                    if (beta == '\\')
 800d0da:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 800d0de:	2b5c      	cmp	r3, #92	; 0x5c
 800d0e0:	d102      	bne.n	800d0e8 <_fx_directory_search+0x1f4>
                    {
                        beta =  '/';
 800d0e2:	232f      	movs	r3, #47	; 0x2f
 800d0e4:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
                    }

                    /* Is the name the same?  */
                    if (alpha != beta)
 800d0e8:	f897 20d3 	ldrb.w	r2, [r7, #211]	; 0xd3
 800d0ec:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 800d0f0:	429a      	cmp	r2, r3
 800d0f2:	d111      	bne.n	800d118 <_fx_directory_search+0x224>
                        /* Break out of loop!  */
                        break;
                    }

                    /* Move to next character.  */
                    v++;
 800d0f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d0f8:	3301      	adds	r3, #1
 800d0fa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
                while ((v < (FX_MAX_LAST_NAME_LEN - 1)) && (path_ptr[v]))
 800d0fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d102:	2bfe      	cmp	r3, #254	; 0xfe
 800d104:	d809      	bhi.n	800d11a <_fx_directory_search+0x226>
 800d106:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800d10a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d10e:	4413      	add	r3, r2
 800d110:	781b      	ldrb	r3, [r3, #0]
 800d112:	2b00      	cmp	r3, #0
 800d114:	d1c9      	bne.n	800d0aa <_fx_directory_search+0x1b6>
 800d116:	e000      	b.n	800d11a <_fx_directory_search+0x226>
                        break;
 800d118:	bf00      	nop
                }

                /* Determine if we don't have a match...  The relative path must be exhausted. */
                if (path_ptr[v])
 800d11a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800d11e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d122:	4413      	add	r3, r2
 800d124:	781b      	ldrb	r3, [r3, #0]
 800d126:	2b00      	cmp	r3, #0
 800d128:	d002      	beq.n	800d130 <_fx_directory_search+0x23c>
                {
                    match =  FX_FALSE;
 800d12a:	2300      	movs	r3, #0
 800d12c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                }
            }

            /* Determine if we still have a match.  */
            if (match)
 800d130:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800d134:	2b00      	cmp	r3, #0
 800d136:	d07c      	beq.n	800d232 <_fx_directory_search+0x33e>

                /* Now examine the rest of the last name and the newly supplied
                   input name.  */

                /* Determine if a valid directory separator is present.  */
                if ((media_ptr -> fx_media_last_found_name[v] != '\\') &&
 800d138:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d13a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d13e:	4413      	add	r3, r2
 800d140:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800d144:	781b      	ldrb	r3, [r3, #0]
 800d146:	2b5c      	cmp	r3, #92	; 0x5c
 800d148:	d00c      	beq.n	800d164 <_fx_directory_search+0x270>
                    (media_ptr -> fx_media_last_found_name[v] != '/'))
 800d14a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d14c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d150:	4413      	add	r3, r2
 800d152:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800d156:	781b      	ldrb	r3, [r3, #0]
                if ((media_ptr -> fx_media_last_found_name[v] != '\\') &&
 800d158:	2b2f      	cmp	r3, #47	; 0x2f
 800d15a:	d003      	beq.n	800d164 <_fx_directory_search+0x270>
                {

                    /* Set match to false - invalid directory path separator.  */
                    match =  FX_FALSE;
 800d15c:	2300      	movs	r3, #0
 800d15e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d162:	e004      	b.n	800d16e <_fx_directory_search+0x27a>
                }
                else
                {
                    /* Position past the next directory separator in the
                       last name string.  */
                    v++;
 800d164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d168:	3301      	adds	r3, #1
 800d16a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
                }

                /* Yes, the full path is in the name buffer. Simply compare with what is in
                   the last search buffer.  */
                j =  0;
 800d16e:	2300      	movs	r3, #0
 800d170:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
                while ((v < (FX_MAX_LAST_NAME_LEN - 1)) && (name_ptr[j]) && (match))
 800d174:	e02d      	b.n	800d1d2 <_fx_directory_search+0x2de>
                {

                    /* Pickup the respective name characters.  */
                    alpha =  name_ptr[j];
 800d176:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d178:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800d17c:	4413      	add	r3, r2
 800d17e:	781b      	ldrb	r3, [r3, #0]
 800d180:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
                    beta =   media_ptr -> fx_media_last_found_name[v];
 800d184:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d186:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d18a:	4413      	add	r3, r2
 800d18c:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800d190:	781b      	ldrb	r3, [r3, #0]
 800d192:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3

                    /* Ensure directory markers are the same.  */
                    if (alpha == '\\')
 800d196:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800d19a:	2b5c      	cmp	r3, #92	; 0x5c
 800d19c:	d102      	bne.n	800d1a4 <_fx_directory_search+0x2b0>
                    {
                        alpha =  '/';
 800d19e:	232f      	movs	r3, #47	; 0x2f
 800d1a0:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
                    }
                    if (beta == '\\')
 800d1a4:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 800d1a8:	2b5c      	cmp	r3, #92	; 0x5c
 800d1aa:	d102      	bne.n	800d1b2 <_fx_directory_search+0x2be>
                    {
                        beta =  '/';
 800d1ac:	232f      	movs	r3, #47	; 0x2f
 800d1ae:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
                    }

                    /* Is the name the same?  */
                    if (alpha != beta)
 800d1b2:	f897 20d3 	ldrb.w	r2, [r7, #211]	; 0xd3
 800d1b6:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 800d1ba:	429a      	cmp	r2, r3
 800d1bc:	d119      	bne.n	800d1f2 <_fx_directory_search+0x2fe>
                        /* Break out of loop!  */
                        break;
                    }

                    /* Move to next character.  */
                    v++;
 800d1be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d1c2:	3301      	adds	r3, #1
 800d1c4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
                    j++;
 800d1c8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800d1cc:	3301      	adds	r3, #1
 800d1ce:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
                while ((v < (FX_MAX_LAST_NAME_LEN - 1)) && (name_ptr[j]) && (match))
 800d1d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d1d6:	2bfe      	cmp	r3, #254	; 0xfe
 800d1d8:	d80c      	bhi.n	800d1f4 <_fx_directory_search+0x300>
 800d1da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d1dc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800d1e0:	4413      	add	r3, r2
 800d1e2:	781b      	ldrb	r3, [r3, #0]
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d005      	beq.n	800d1f4 <_fx_directory_search+0x300>
 800d1e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d1c2      	bne.n	800d176 <_fx_directory_search+0x282>
 800d1f0:	e000      	b.n	800d1f4 <_fx_directory_search+0x300>
                        break;
 800d1f2:	bf00      	nop
                }

                /* Avoid accessing fx_media_last_found_name out of bounds. */
                if (v >= 256)
 800d1f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d1f8:	2bff      	cmp	r3, #255	; 0xff
 800d1fa:	d905      	bls.n	800d208 <_fx_directory_search+0x314>
                {
                    match = FX_FALSE;
 800d1fc:	2300      	movs	r3, #0
 800d1fe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d202:	e016      	b.n	800d232 <_fx_directory_search+0x33e>
 800d204:	2001524c 	.word	0x2001524c
                }
                else if ((match) && (name_ptr[j] != media_ptr -> fx_media_last_found_name[v]))
 800d208:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d010      	beq.n	800d232 <_fx_directory_search+0x33e>
 800d210:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d212:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800d216:	4413      	add	r3, r2
 800d218:	7819      	ldrb	r1, [r3, #0]
 800d21a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d21c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d220:	4413      	add	r3, r2
 800d222:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800d226:	781b      	ldrb	r3, [r3, #0]
 800d228:	4299      	cmp	r1, r3
 800d22a:	d002      	beq.n	800d232 <_fx_directory_search+0x33e>
                {

                    /* We don't have a match.  */
                    match =  FX_FALSE;
 800d22c:	2300      	movs	r3, #0
 800d22e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                }
            }
        }

        /* Now determine if we actually found a match.  */
        if (match)
 800d232:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800d236:	2b00      	cmp	r3, #0
 800d238:	f000 8090 	beq.w	800d35c <_fx_directory_search+0x468>
        {

            /* Save the directory entry name pointer.  */
            temp_ptr =  entry_ptr -> fx_dir_entry_name;
 800d23c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

            /* Copy the saved directory entry.  */
            *entry_ptr =  media_ptr -> fx_media_last_found_entry;
 800d244:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d248:	4610      	mov	r0, r2
 800d24a:	f503 731c 	add.w	r3, r3, #624	; 0x270
 800d24e:	2270      	movs	r2, #112	; 0x70
 800d250:	4619      	mov	r1, r3
 800d252:	f00c fd06 	bl	8019c62 <memcpy>

            /* Restore the directory entry name pointer.  */
            entry_ptr -> fx_dir_entry_name =  temp_ptr;
 800d256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d258:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800d25c:	601a      	str	r2, [r3, #0]

            /* Copy the directory name into the destination directory name.  */
            for (index = 0; index < FX_MAX_LONG_NAME_LEN; index++)
 800d25e:	2300      	movs	r3, #0
 800d260:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800d264:	e01d      	b.n	800d2a2 <_fx_directory_search+0x3ae>
            {

                /* Copy character into the destination.  */
                temp_ptr[index] =  media_ptr -> fx_media_last_found_file_name[index];
 800d266:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800d26a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800d26e:	4413      	add	r3, r2
 800d270:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d272:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800d276:	440a      	add	r2, r1
 800d278:	f502 7238 	add.w	r2, r2, #736	; 0x2e0
 800d27c:	7812      	ldrb	r2, [r2, #0]
 800d27e:	701a      	strb	r2, [r3, #0]

                /* See if we have copied the NULL termination character.  */
                if (temp_ptr[index] == (CHAR)FX_NULL)
 800d280:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800d284:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800d288:	4413      	add	r3, r2
 800d28a:	781b      	ldrb	r3, [r3, #0]
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d103      	bne.n	800d298 <_fx_directory_search+0x3a4>
                {
                
                    /* Determine if we should break here or at the top of the loop.  */
                    if (index < (FX_MAX_LONG_NAME_LEN - 1))
 800d290:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800d294:	2bfe      	cmp	r3, #254	; 0xfe
 800d296:	d909      	bls.n	800d2ac <_fx_directory_search+0x3b8>
            for (index = 0; index < FX_MAX_LONG_NAME_LEN; index++)
 800d298:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800d29c:	3301      	adds	r3, #1
 800d29e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800d2a2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800d2a6:	2bff      	cmp	r3, #255	; 0xff
 800d2a8:	d9dd      	bls.n	800d266 <_fx_directory_search+0x372>
 800d2aa:	e000      	b.n	800d2ae <_fx_directory_search+0x3ba>
                    {
                    
                        /* Yes, break out of the loop early.  */
                        break;
 800d2ac:	bf00      	nop
                    }
                }
            }

            /* Determine if there is a search directory to copy.  */
            if ((last_dir_ptr) && (media_ptr -> fx_media_last_found_directory_valid))
 800d2ae:	6a3b      	ldr	r3, [r7, #32]
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d041      	beq.n	800d338 <_fx_directory_search+0x444>
 800d2b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2b6:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d03c      	beq.n	800d338 <_fx_directory_search+0x444>

                /* Yes, there was a search directory... and one is requested in this request as well.
                   Simply copy it into the destination.  */

                /* First, save the name pointer from the list directory pointer.  */
                destination_name_ptr =  last_dir_ptr -> fx_dir_entry_name;
 800d2be:	6a3b      	ldr	r3, [r7, #32]
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

                /* Copy the entire directory entry structure.  */
                *last_dir_ptr =  media_ptr -> fx_media_last_found_directory;
 800d2c6:	6a3a      	ldr	r2, [r7, #32]
 800d2c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2ca:	4610      	mov	r0, r2
 800d2cc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800d2d0:	2270      	movs	r2, #112	; 0x70
 800d2d2:	4619      	mov	r1, r3
 800d2d4:	f00c fcc5 	bl	8019c62 <memcpy>

                /* Restore the original name buffer pointer.  */
                last_dir_ptr -> fx_dir_entry_name =  destination_name_ptr;
 800d2d8:	6a3b      	ldr	r3, [r7, #32]
 800d2da:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800d2de:	601a      	str	r2, [r3, #0]

                /* Pickup pointer to name to copy.  */
                source_name_ptr =  media_ptr -> fx_media_last_found_directory.fx_dir_entry_name;
 800d2e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2e2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d2e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

                /* Loop to copy the name into the last directory name buffer.  */
                for (n = 0; n < FX_MAX_LONG_NAME_LEN; n++)
 800d2ea:	2300      	movs	r3, #0
 800d2ec:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800d2f0:	e01c      	b.n	800d32c <_fx_directory_search+0x438>
                {
                
                    /* Copy a character.  */
                    destination_name_ptr[n] =  source_name_ptr[n];
 800d2f2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800d2f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d2fa:	441a      	add	r2, r3
 800d2fc:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 800d300:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d304:	440b      	add	r3, r1
 800d306:	7812      	ldrb	r2, [r2, #0]
 800d308:	701a      	strb	r2, [r3, #0]
                
                    /* See if we have copied the NULL termination character.  */
                    if (source_name_ptr[n] == (CHAR)FX_NULL)
 800d30a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800d30e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d312:	4413      	add	r3, r2
 800d314:	781b      	ldrb	r3, [r3, #0]
 800d316:	2b00      	cmp	r3, #0
 800d318:	d103      	bne.n	800d322 <_fx_directory_search+0x42e>
                    {
                
                        /* Determine if we should break here or at the top of the loop.  */
                        if (n < (FX_MAX_LONG_NAME_LEN - 1))
 800d31a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d31e:	2bfe      	cmp	r3, #254	; 0xfe
 800d320:	d909      	bls.n	800d336 <_fx_directory_search+0x442>
                for (n = 0; n < FX_MAX_LONG_NAME_LEN; n++)
 800d322:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d326:	3301      	adds	r3, #1
 800d328:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800d32c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d330:	2bff      	cmp	r3, #255	; 0xff
 800d332:	d9de      	bls.n	800d2f2 <_fx_directory_search+0x3fe>
 800d334:	e000      	b.n	800d338 <_fx_directory_search+0x444>
                        {
                    
                            /* Yes, break out of the loop early.  */
                            break;
 800d336:	bf00      	nop
                    }
                }
            }

            /* Return the last name pointer, if required.  */
            if (last_name_ptr)
 800d338:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d004      	beq.n	800d34a <_fx_directory_search+0x456>
            {

                /* Just set the last name to initial name string.  */
                *last_name_ptr =  temp_ptr;
 800d340:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800d344:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800d348:	601a      	str	r2, [r3, #0]
            }

#ifndef FX_MEDIA_STATISTICS_DISABLE

            /* Increment the number of directory search cache hits.  */
            media_ptr -> fx_media_directory_search_cache_hits++;
 800d34a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d34c:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 800d350:	1c5a      	adds	r2, r3, #1
 800d352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d354:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
#endif

            /* Return success.  */
            return(FX_SUCCESS);
 800d358:	2300      	movs	r3, #0
 800d35a:	e2ff      	b.n	800d95c <_fx_directory_search+0xa68>
        }
    }

    /* Not a sequential search, invalidate the saved information.  */
    media_ptr -> fx_media_last_found_name[0] =  FX_NULL;
 800d35c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d35e:	2300      	movs	r3, #0
 800d360:	f882 33e0 	strb.w	r3, [r2, #992]	; 0x3e0
    /* Loop to traverse the directory paths to find the specified file.  */
    do
    {

        /* Remember the last name pointer, if required.  */
        if (last_name_ptr)
 800d364:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d003      	beq.n	800d374 <_fx_directory_search+0x480>
        {

            /* Just set the last name to initial name string.  */
            *last_name_ptr =  name_ptr;
 800d36c:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800d370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d372:	6013      	str	r3, [r2, #0]
        }

        /* Extract file name.  */
        name_ptr =  _fx_directory_name_extract(name_ptr, name);
 800d374:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800d378:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d37a:	f7ff fd59 	bl	800ce30 <_fx_directory_name_extract>
 800d37e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Calculate the directory size.  */
        if (search_dir_ptr)
 800d380:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d384:	2b00      	cmp	r3, #0
 800d386:	f000 80be 	beq.w	800d506 <_fx_directory_search+0x612>
            else
            {
#endif /* FX_ENABLE_EXFAT */

                /* Ensure that the search directory's last search cluster is cleared.  */
                search_dir_ptr -> fx_dir_entry_last_search_cluster =  0;
 800d38a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800d38e:	2300      	movs	r3, #0
 800d390:	6513      	str	r3, [r2, #80]	; 0x50

                /* Calculate the directory size by counting the allocated
                clusters for it.  */
                i =        0;
 800d392:	2300      	movs	r3, #0
 800d394:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                cluster =  search_dir_ptr -> fx_dir_entry_cluster;
 800d398:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d39c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d39e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
                while (cluster < media_ptr -> fx_media_fat_reserved)
 800d3a2:	e02b      	b.n	800d3fc <_fx_directory_search+0x508>
                {

                    /* Increment the cluster count.  */
                    i++;
 800d3a4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d3a8:	3301      	adds	r3, #1
 800d3aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

                    /* Read the next FAT entry.  */
                    status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 800d3ae:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800d3b2:	461a      	mov	r2, r3
 800d3b4:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 800d3b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d3ba:	f004 ff01 	bl	80121c0 <_fx_utility_FAT_entry_read>
 800d3be:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8

                    /* Check the return status.  */
                    if (status != FX_SUCCESS)
 800d3c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d002      	beq.n	800d3d0 <_fx_directory_search+0x4dc>
                    {

                        /* Return the bad status.  */
                        return(status);
 800d3ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d3ce:	e2c5      	b.n	800d95c <_fx_directory_search+0xa68>
                    }

                    /* Check for error situation.  */
                    if ((cluster < FX_FAT_ENTRY_START) || (cluster == next_cluster) || (i > media_ptr -> fx_media_total_clusters))
 800d3d0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800d3d4:	2b01      	cmp	r3, #1
 800d3d6:	d90b      	bls.n	800d3f0 <_fx_directory_search+0x4fc>
 800d3d8:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800d3dc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800d3e0:	4293      	cmp	r3, r2
 800d3e2:	d005      	beq.n	800d3f0 <_fx_directory_search+0x4fc>
 800d3e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d3e8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d3ec:	429a      	cmp	r2, r3
 800d3ee:	d201      	bcs.n	800d3f4 <_fx_directory_search+0x500>
                    {

                        /* Return the bad status.  */
                        return(FX_FAT_READ_ERROR);
 800d3f0:	2303      	movs	r3, #3
 800d3f2:	e2b3      	b.n	800d95c <_fx_directory_search+0xa68>
                    }

                    cluster = next_cluster;
 800d3f4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d3f8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
                while (cluster < media_ptr -> fx_media_fat_reserved)
 800d3fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3fe:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800d402:	f8d3 24a8 	ldr.w	r2, [r3, #1192]	; 0x4a8
 800d406:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800d40a:	4293      	cmp	r3, r2
 800d40c:	d3ca      	bcc.n	800d3a4 <_fx_directory_search+0x4b0>
                }

                /* Now we can calculate the directory size.  */
                directory_size =  (((ULONG64) media_ptr -> fx_media_bytes_per_sector) *
 800d40e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d412:	2200      	movs	r2, #0
 800d414:	469a      	mov	sl, r3
 800d416:	4693      	mov	fp, r2
                                   ((ULONG64) media_ptr -> fx_media_sectors_per_cluster) * i)
 800d418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d41a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d41c:	2200      	movs	r2, #0
 800d41e:	613b      	str	r3, [r7, #16]
 800d420:	617a      	str	r2, [r7, #20]
                directory_size =  (((ULONG64) media_ptr -> fx_media_bytes_per_sector) *
 800d422:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800d426:	4603      	mov	r3, r0
 800d428:	fb03 f20b 	mul.w	r2, r3, fp
 800d42c:	460b      	mov	r3, r1
 800d42e:	fb0a f303 	mul.w	r3, sl, r3
 800d432:	4413      	add	r3, r2
 800d434:	4602      	mov	r2, r0
 800d436:	fbaa 4502 	umull	r4, r5, sl, r2
 800d43a:	442b      	add	r3, r5
 800d43c:	461d      	mov	r5, r3
                                   ((ULONG64) media_ptr -> fx_media_sectors_per_cluster) * i)
 800d43e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d442:	2200      	movs	r2, #0
 800d444:	60bb      	str	r3, [r7, #8]
 800d446:	60fa      	str	r2, [r7, #12]
 800d448:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d44c:	4603      	mov	r3, r0
 800d44e:	fb03 f205 	mul.w	r2, r3, r5
 800d452:	460b      	mov	r3, r1
 800d454:	fb04 f303 	mul.w	r3, r4, r3
 800d458:	4413      	add	r3, r2
 800d45a:	4602      	mov	r2, r0
 800d45c:	fba4 8902 	umull	r8, r9, r4, r2
 800d460:	444b      	add	r3, r9
 800d462:	4699      	mov	r9, r3
                directory_size =  (((ULONG64) media_ptr -> fx_media_bytes_per_sector) *
 800d464:	f04f 0200 	mov.w	r2, #0
 800d468:	f04f 0300 	mov.w	r3, #0
 800d46c:	ea4f 1258 	mov.w	r2, r8, lsr #5
 800d470:	ea42 62c9 	orr.w	r2, r2, r9, lsl #27
 800d474:	ea4f 1359 	mov.w	r3, r9, lsr #5
 800d478:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
                                    / (ULONG64) FX_DIR_ENTRY_SIZE;

                /* Also save this in the directory entry so we don't have to
                   calculate it later.  */
                search_dir_ptr -> fx_dir_entry_file_size =  directory_size;
 800d47c:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 800d480:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800d484:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
            }
#endif /* FX_ENABLE_EXFAT */

            /* If required, copy the last search directory entry into the
               destination.  */
            if (last_dir_ptr)
 800d488:	6a3b      	ldr	r3, [r7, #32]
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d046      	beq.n	800d51c <_fx_directory_search+0x628>
            {

                /* Copy the last search directory into the destination.  */

                /* First, save the name pointer from the list directory pointer.  */
                destination_name_ptr =  last_dir_ptr -> fx_dir_entry_name;
 800d48e:	6a3b      	ldr	r3, [r7, #32]
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

                /* Copy the entire directory entry structure.  */
                *last_dir_ptr =  *search_dir_ptr;
 800d496:	6a3a      	ldr	r2, [r7, #32]
 800d498:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d49c:	4610      	mov	r0, r2
 800d49e:	4619      	mov	r1, r3
 800d4a0:	2370      	movs	r3, #112	; 0x70
 800d4a2:	461a      	mov	r2, r3
 800d4a4:	f00c fbdd 	bl	8019c62 <memcpy>

                /* Restore the original name buffer pointer.  */
                last_dir_ptr -> fx_dir_entry_name =  destination_name_ptr;
 800d4a8:	6a3a      	ldr	r2, [r7, #32]
 800d4aa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800d4ae:	6013      	str	r3, [r2, #0]

                /* Pickup pointer to name to copy.  */
                source_name_ptr =  search_dir_ptr -> fx_dir_entry_name;
 800d4b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

                /* Loop to copy the name into the last directory name buffer.  */
                for (n = 0; n < FX_MAX_LONG_NAME_LEN; n++)
 800d4ba:	2300      	movs	r3, #0
 800d4bc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800d4c0:	e01c      	b.n	800d4fc <_fx_directory_search+0x608>
                {

                    /* Copy a character.  */
                    destination_name_ptr[n] =  source_name_ptr[n];
 800d4c2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800d4c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d4ca:	18d1      	adds	r1, r2, r3
 800d4cc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800d4d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d4d4:	441a      	add	r2, r3
 800d4d6:	780b      	ldrb	r3, [r1, #0]
 800d4d8:	7013      	strb	r3, [r2, #0]

                    /* See if we have copied the NULL termination character.  */
                    if (source_name_ptr[n] == (CHAR) FX_NULL)
 800d4da:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800d4de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d4e2:	4413      	add	r3, r2
 800d4e4:	781b      	ldrb	r3, [r3, #0]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d103      	bne.n	800d4f2 <_fx_directory_search+0x5fe>
                    {
                
                        /* Determine if we should break here or at the top of the loop.  */
                        if (n < (FX_MAX_LONG_NAME_LEN - 1))
 800d4ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d4ee:	2bfe      	cmp	r3, #254	; 0xfe
 800d4f0:	d913      	bls.n	800d51a <_fx_directory_search+0x626>
                for (n = 0; n < FX_MAX_LONG_NAME_LEN; n++)
 800d4f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d4f6:	3301      	adds	r3, #1
 800d4f8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800d4fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d500:	2bff      	cmp	r3, #255	; 0xff
 800d502:	d9de      	bls.n	800d4c2 <_fx_directory_search+0x5ce>
 800d504:	e00a      	b.n	800d51c <_fx_directory_search+0x628>
        }
        else
        {

            /* Directory size is the number of entries in the root directory.  */
            directory_size =  (ULONG)media_ptr -> fx_media_root_directory_entries;
 800d506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d508:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d50a:	2200      	movs	r2, #0
 800d50c:	603b      	str	r3, [r7, #0]
 800d50e:	607a      	str	r2, [r7, #4]
 800d510:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d514:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
 800d518:	e000      	b.n	800d51c <_fx_directory_search+0x628>
                            break;
 800d51a:	bf00      	nop
        }

        /* Loop through entries in the directory.  Yes, this is a
           linear search!  */
        i =      0;
 800d51c:	2300      	movs	r3, #0
 800d51e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        found =  FX_FALSE;
 800d522:	2300      	movs	r3, #0
 800d524:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

            /* Read an entry from the directory.  */
#ifdef FX_ENABLE_EXFAT
            status =  _fx_directory_entry_read_ex(media_ptr, search_dir_ptr, &i, entry_ptr, hash);
#else
            status =  _fx_directory_entry_read(media_ptr, search_dir_ptr, &i, entry_ptr);
 800d528:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800d52c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d52e:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 800d532:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d534:	f7fd fe79 	bl	800b22a <_fx_directory_entry_read>
 800d538:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
#endif /* FX_ENABLE_EXFAT */

            i++;
 800d53c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d540:	3301      	adds	r3, #1
 800d542:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

            /* Check for error status.  */
            if (status != FX_SUCCESS)
 800d546:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d002      	beq.n	800d554 <_fx_directory_search+0x660>
            {
                return(status);
 800d54e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d552:	e203      	b.n	800d95c <_fx_directory_search+0xa68>

            /* Determine if this is the last directory entry.  */
#ifdef FX_ENABLE_EXFAT
            if (entry_ptr -> fx_dir_entry_type == FX_EXFAT_DIR_ENTRY_TYPE_END_MARKER)
#else
            if ((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_DONE)
 800d554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	781b      	ldrb	r3, [r3, #0]
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	f000 80c6 	beq.w	800d6ec <_fx_directory_search+0x7f8>
            {
                break;
            }

            /* Determine if the entry is a volume label entry */
            if ((entry_ptr -> fx_dir_entry_attributes & FX_VOLUME))
 800d560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d562:	7f1b      	ldrb	r3, [r3, #28]
 800d564:	f003 0308 	and.w	r3, r3, #8
 800d568:	2b00      	cmp	r3, #0
 800d56a:	f040 80a9 	bne.w	800d6c0 <_fx_directory_search+0x7cc>

            /* Determine if this is an empty entry.  */
#ifdef FX_ENABLE_EXFAT
            if (entry_ptr -> fx_dir_entry_type != FX_EXFAT_DIR_ENTRY_TYPE_FILE_DIRECTORY)
#else
            if (((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_FREE) && (entry_ptr -> fx_dir_entry_short_name[0] == 0))
 800d56e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	781b      	ldrb	r3, [r3, #0]
 800d574:	2be5      	cmp	r3, #229	; 0xe5
 800d576:	d104      	bne.n	800d582 <_fx_directory_search+0x68e>
 800d578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d57a:	791b      	ldrb	r3, [r3, #4]
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	f000 80a1 	beq.w	800d6c4 <_fx_directory_search+0x7d0>
                continue;
            }

            /* Compare the input name and extension with the directory
               entry.  */
            work_ptr =      &name[0];
 800d582:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d586:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
            dir_name_ptr =  &(entry_ptr -> fx_dir_entry_name[0]);
 800d58a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
            /* Loop to compare names.  */
            do
            {

                /* Pickup character of directory name.  */
                alpha =  *dir_name_ptr;
 800d592:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d596:	781b      	ldrb	r3, [r3, #0]
 800d598:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3

                /* Pickup character of name.  */
                name_alpha =  *work_ptr;
 800d59c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d5a0:	781b      	ldrb	r3, [r3, #0]
 800d5a2:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2

                /* Determine if its case needs to be changed.  */
                if ((alpha >= 'a') && (alpha <= 'z'))
 800d5a6:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800d5aa:	2b60      	cmp	r3, #96	; 0x60
 800d5ac:	d908      	bls.n	800d5c0 <_fx_directory_search+0x6cc>
 800d5ae:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800d5b2:	2b7a      	cmp	r3, #122	; 0x7a
 800d5b4:	d804      	bhi.n	800d5c0 <_fx_directory_search+0x6cc>
                {

                    /* Yes, make upper case.  */
                    alpha =  (CHAR)((INT)alpha - 0x20);
 800d5b6:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800d5ba:	3b20      	subs	r3, #32
 800d5bc:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
                }

                /* Determine if its case needs to be changed.  */
                if ((name_alpha >= 'a') && (name_alpha <= 'z'))
 800d5c0:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 800d5c4:	2b60      	cmp	r3, #96	; 0x60
 800d5c6:	d908      	bls.n	800d5da <_fx_directory_search+0x6e6>
 800d5c8:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 800d5cc:	2b7a      	cmp	r3, #122	; 0x7a
 800d5ce:	d804      	bhi.n	800d5da <_fx_directory_search+0x6e6>
                {

                    /* Yes, make upper case.  */
                    name_alpha =  (CHAR)((INT)name_alpha - 0x20);
 800d5d0:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 800d5d4:	3b20      	subs	r3, #32
 800d5d6:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
                }

                /* Compare name with directory name.  */
                if (alpha != name_alpha)
 800d5da:	f897 20d3 	ldrb.w	r2, [r7, #211]	; 0xd3
 800d5de:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 800d5e2:	429a      	cmp	r2, r3
 800d5e4:	d10f      	bne.n	800d606 <_fx_directory_search+0x712>
                    /* The names don't match, get out of the loop. */
                    break;
                }

                /* Otherwise, increment the name pointers.  */
                work_ptr++;
 800d5e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d5ea:	3301      	adds	r3, #1
 800d5ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
                dir_name_ptr++;
 800d5f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d5f4:	3301      	adds	r3, #1
 800d5f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
            } while (*dir_name_ptr);
 800d5fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d5fe:	781b      	ldrb	r3, [r3, #0]
 800d600:	2b00      	cmp	r3, #0
 800d602:	d1c6      	bne.n	800d592 <_fx_directory_search+0x69e>
 800d604:	e000      	b.n	800d608 <_fx_directory_search+0x714>
                    break;
 800d606:	bf00      	nop

            /* Determine if the requested name has been found.  If so,
               return success to the caller.  */
            if ((*dir_name_ptr == 0) && (*work_ptr == *dir_name_ptr))
 800d608:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d60c:	781b      	ldrb	r3, [r3, #0]
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d10b      	bne.n	800d62a <_fx_directory_search+0x736>
 800d612:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d616:	781a      	ldrb	r2, [r3, #0]
 800d618:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d61c:	781b      	ldrb	r3, [r3, #0]
 800d61e:	429a      	cmp	r2, r3
 800d620:	d103      	bne.n	800d62a <_fx_directory_search+0x736>
            {

                /* Yes, the name was located.  All pertinent directory
                   information is in the directory entry field.  */
                found =  FX_TRUE;
 800d622:	2301      	movs	r3, #1
 800d624:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800d628:	e04d      	b.n	800d6c6 <_fx_directory_search+0x7d2>
            /* Determine if there is a short name to check.  */
#ifdef FX_ENABLE_EXFAT
            else if ((media_ptr -> fx_media_FAT_type != FX_exFAT) &&
                     (entry_ptr -> fx_dir_entry_short_name[0] != 0))
#else
            else if (entry_ptr -> fx_dir_entry_short_name[0] != 0)
 800d62a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d62c:	791b      	ldrb	r3, [r3, #4]
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d049      	beq.n	800d6c6 <_fx_directory_search+0x7d2>
            {

                /* Yes, check for the short part of the name.  */

                /* Compare the input name and extension with the directory entry.  */
                work_ptr =      &name[0];
 800d632:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d636:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
                dir_name_ptr =  &(entry_ptr -> fx_dir_entry_short_name[0]);
 800d63a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d63c:	3304      	adds	r3, #4
 800d63e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                /* Loop to compare names.  */
                do
                {

                    /* Pickup character of directory name.  */
                    alpha =  *dir_name_ptr;
 800d642:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d646:	781b      	ldrb	r3, [r3, #0]
 800d648:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3

                    /* Pickup character of name.  */
                    name_alpha =  *work_ptr;
 800d64c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d650:	781b      	ldrb	r3, [r3, #0]
 800d652:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2

                    /* Determine if its case needs to be changed.  */
                    if ((name_alpha >= 'a') && (name_alpha <= 'z'))
 800d656:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 800d65a:	2b60      	cmp	r3, #96	; 0x60
 800d65c:	d908      	bls.n	800d670 <_fx_directory_search+0x77c>
 800d65e:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 800d662:	2b7a      	cmp	r3, #122	; 0x7a
 800d664:	d804      	bhi.n	800d670 <_fx_directory_search+0x77c>
                    {

                        /* Yes, make upper case.  */
                        name_alpha =  (CHAR)((INT)name_alpha - 0x20);
 800d666:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 800d66a:	3b20      	subs	r3, #32
 800d66c:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
                    }

                    /* Compare name with directory name.  */
                    if (alpha != name_alpha)
 800d670:	f897 20d3 	ldrb.w	r2, [r7, #211]	; 0xd3
 800d674:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 800d678:	429a      	cmp	r2, r3
 800d67a:	d10f      	bne.n	800d69c <_fx_directory_search+0x7a8>
                        break;
                    }

                    /* Otherwise, move the name pointers and increment the
                       count.  */
                    work_ptr++;
 800d67c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d680:	3301      	adds	r3, #1
 800d682:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
                    dir_name_ptr++;
 800d686:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d68a:	3301      	adds	r3, #1
 800d68c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                } while (*dir_name_ptr);
 800d690:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d694:	781b      	ldrb	r3, [r3, #0]
 800d696:	2b00      	cmp	r3, #0
 800d698:	d1d3      	bne.n	800d642 <_fx_directory_search+0x74e>
 800d69a:	e000      	b.n	800d69e <_fx_directory_search+0x7aa>
                        break;
 800d69c:	bf00      	nop

                /* Determine if the names match.  */
                if ((*dir_name_ptr == 0) && (*work_ptr == *dir_name_ptr))
 800d69e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d6a2:	781b      	ldrb	r3, [r3, #0]
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d10e      	bne.n	800d6c6 <_fx_directory_search+0x7d2>
 800d6a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d6ac:	781a      	ldrb	r2, [r3, #0]
 800d6ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d6b2:	781b      	ldrb	r3, [r3, #0]
 800d6b4:	429a      	cmp	r2, r3
 800d6b6:	d106      	bne.n	800d6c6 <_fx_directory_search+0x7d2>
                {

                    /* Yes, the name was located.  All pertinent directory
                        information is in the directory entry field.  */
                    found =  FX_TRUE;
 800d6b8:	2301      	movs	r3, #1
 800d6ba:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800d6be:	e002      	b.n	800d6c6 <_fx_directory_search+0x7d2>
                continue;
 800d6c0:	bf00      	nop
 800d6c2:	e000      	b.n	800d6c6 <_fx_directory_search+0x7d2>
                continue;
 800d6c4:	bf00      	nop
                }
            }
        } while ((i < directory_size) && (!found));
 800d6c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d6ca:	2200      	movs	r2, #0
 800d6cc:	61bb      	str	r3, [r7, #24]
 800d6ce:	61fa      	str	r2, [r7, #28]
 800d6d0:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800d6d4:	69b9      	ldr	r1, [r7, #24]
 800d6d6:	4291      	cmp	r1, r2
 800d6d8:	69f9      	ldr	r1, [r7, #28]
 800d6da:	eb71 0303 	sbcs.w	r3, r1, r3
 800d6de:	d206      	bcs.n	800d6ee <_fx_directory_search+0x7fa>
 800d6e0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	f43f af1f 	beq.w	800d528 <_fx_directory_search+0x634>
 800d6ea:	e000      	b.n	800d6ee <_fx_directory_search+0x7fa>
                break;
 800d6ec:	bf00      	nop

        /* Now determine if we have a match.  */
        if (!found)
 800d6ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d101      	bne.n	800d6fa <_fx_directory_search+0x806>
        {

            /* Return a "not found" status to the caller.  */
            return(FX_NOT_FOUND);
 800d6f6:	2304      	movs	r3, #4
 800d6f8:	e130      	b.n	800d95c <_fx_directory_search+0xa68>
        }

        /* Determine if the found entry is indeed a sub-directory.  */
        if (entry_ptr -> fx_dir_entry_attributes & FX_DIRECTORY)
 800d6fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6fc:	7f1b      	ldrb	r3, [r3, #28]
 800d6fe:	f003 0310 	and.w	r3, r3, #16
 800d702:	2b00      	cmp	r3, #0
 800d704:	d04f      	beq.n	800d7a6 <_fx_directory_search+0x8b2>
        {

            /* Move the directory search pointer to this entry.  */
            search_dir =      *entry_ptr;
 800d706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d708:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800d70c:	4619      	mov	r1, r3
 800d70e:	2370      	movs	r3, #112	; 0x70
 800d710:	461a      	mov	r2, r3
 800d712:	f00c faa6 	bl	8019c62 <memcpy>
            search_dir_ptr =  &search_dir;
 800d716:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d71a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

            /* Ensure that the search directory's last search cluster is cleared.  */
            search_dir_ptr -> fx_dir_entry_last_search_cluster =  0;
 800d71e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800d722:	2300      	movs	r3, #0
 800d724:	6513      	str	r3, [r2, #80]	; 0x50
               directory.  */
#ifdef FX_ENABLE_EXFAT
            if ((!search_dir_ptr -> fx_dir_entry_cluster)
                && (media_ptr -> fx_media_FAT_type != FX_exFAT))
#else
            if (!search_dir_ptr -> fx_dir_entry_cluster)
 800d726:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d72a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d13f      	bne.n	800d7b0 <_fx_directory_search+0x8bc>
            {

                /* This is a backward link to the root directory.  Make
                   sure this is indicated in the search directory
                   information.  */
                search_dir_ptr -> fx_dir_entry_name[0] =  0;
 800d730:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d734:	681a      	ldr	r2, [r3, #0]
 800d736:	2300      	movs	r3, #0
 800d738:	7013      	strb	r3, [r2, #0]

                /* Determine if we need to remember this in the last
                   directory searched return area.  */
                if (last_dir_ptr)
 800d73a:	6a3b      	ldr	r3, [r7, #32]
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d02e      	beq.n	800d79e <_fx_directory_search+0x8aa>
                {

                    /* Yes, return this value to the caller.  */

                    /* First, save the name pointer from the list directory pointer.  */
                    destination_name_ptr =  last_dir_ptr -> fx_dir_entry_name;
 800d740:	6a3b      	ldr	r3, [r7, #32]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

                    /* Copy the entire directory entry structure.  */
                    *last_dir_ptr =  *search_dir_ptr;
 800d748:	6a3a      	ldr	r2, [r7, #32]
 800d74a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d74e:	4610      	mov	r0, r2
 800d750:	4619      	mov	r1, r3
 800d752:	2370      	movs	r3, #112	; 0x70
 800d754:	461a      	mov	r2, r3
 800d756:	f00c fa84 	bl	8019c62 <memcpy>

                    /* Restore the original name buffer pointer.  */
                    last_dir_ptr -> fx_dir_entry_name =  destination_name_ptr;
 800d75a:	6a3a      	ldr	r2, [r7, #32]
 800d75c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800d760:	6013      	str	r3, [r2, #0]

                    /* Pickup pointer to name to copy.  */
                    source_name_ptr =  search_dir_ptr -> fx_dir_entry_name;
 800d762:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

                    /* Loop to copy the name into the last directory name buffer.  */
                    for (n = 0; n < FX_MAX_LONG_NAME_LEN; n++)
 800d76c:	2300      	movs	r3, #0
 800d76e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800d772:	e010      	b.n	800d796 <_fx_directory_search+0x8a2>
                    {

                        /* Copy a character.  */
                        destination_name_ptr[n] =  source_name_ptr[n];
 800d774:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800d778:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d77c:	18d1      	adds	r1, r2, r3
 800d77e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800d782:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d786:	441a      	add	r2, r3
 800d788:	780b      	ldrb	r3, [r1, #0]
 800d78a:	7013      	strb	r3, [r2, #0]
                    for (n = 0; n < FX_MAX_LONG_NAME_LEN; n++)
 800d78c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d790:	3301      	adds	r3, #1
 800d792:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800d796:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d79a:	2bff      	cmp	r3, #255	; 0xff
 800d79c:	d9ea      	bls.n	800d774 <_fx_directory_search+0x880>
                    }
                }

                /* Set the search directory pointer to NULL to indicate
                   we are at the root directory.  */
                search_dir_ptr =  FX_NULL;
 800d79e:	2300      	movs	r3, #0
 800d7a0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800d7a4:	e004      	b.n	800d7b0 <_fx_directory_search+0x8bc>
        else
        {

            /* This is not a directory, we better return not found
               since we can't continue the search.  */
            if (name_ptr)
 800d7a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d001      	beq.n	800d7b0 <_fx_directory_search+0x8bc>
            {

                /* Return not-found status to caller.  */
                return(FX_NOT_FOUND);
 800d7ac:	2304      	movs	r3, #4
 800d7ae:	e0d5      	b.n	800d95c <_fx_directory_search+0xa68>
            }
        }
    } while (name_ptr);
 800d7b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	f47f add6 	bne.w	800d364 <_fx_directory_search+0x470>

    /* At this point, cache the found information.  If a subsequent search for the same name is done,
       it will return immediately.  */

    /* Set the index of the saved name string.  */
    v=  0;
 800d7b8:	2300      	movs	r3, #0
 800d7ba:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

    /* First, build the full path and name.  */
    if ((*original_name != '\\') && (*original_name != '/') && (path_ptr))
 800d7be:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800d7c2:	781b      	ldrb	r3, [r3, #0]
 800d7c4:	2b5c      	cmp	r3, #92	; 0x5c
 800d7c6:	d028      	beq.n	800d81a <_fx_directory_search+0x926>
 800d7c8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800d7cc:	781b      	ldrb	r3, [r3, #0]
 800d7ce:	2b2f      	cmp	r3, #47	; 0x2f
 800d7d0:	d023      	beq.n	800d81a <_fx_directory_search+0x926>
 800d7d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d01f      	beq.n	800d81a <_fx_directory_search+0x926>
    {

        /* Copy the path into the destination.  */
        while ((v< (FX_MAX_LAST_NAME_LEN - 1)) && (path_ptr[v]))
 800d7da:	e012      	b.n	800d802 <_fx_directory_search+0x90e>
        {

            /* Copy one character.   */
            media_ptr -> fx_media_last_found_name[v] =  path_ptr[v];
 800d7dc:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800d7e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d7e4:	4413      	add	r3, r2
 800d7e6:	7819      	ldrb	r1, [r3, #0]
 800d7e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d7ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d7ee:	4413      	add	r3, r2
 800d7f0:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800d7f4:	460a      	mov	r2, r1
 800d7f6:	701a      	strb	r2, [r3, #0]

            /* Move to next character.  */
            v++;
 800d7f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d7fc:	3301      	adds	r3, #1
 800d7fe:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
        while ((v< (FX_MAX_LAST_NAME_LEN - 1)) && (path_ptr[v]))
 800d802:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d806:	2bfe      	cmp	r3, #254	; 0xfe
 800d808:	d807      	bhi.n	800d81a <_fx_directory_search+0x926>
 800d80a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800d80e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d812:	4413      	add	r3, r2
 800d814:	781b      	ldrb	r3, [r3, #0]
 800d816:	2b00      	cmp	r3, #0
 800d818:	d1e0      	bne.n	800d7dc <_fx_directory_search+0x8e8>
        }
    }

    /* Now see if there is no directory path symbol in the name itself.  */
    if ((*original_name != '\\') && (*original_name != '/'))
 800d81a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800d81e:	781b      	ldrb	r3, [r3, #0]
 800d820:	2b5c      	cmp	r3, #92	; 0x5c
 800d822:	d012      	beq.n	800d84a <_fx_directory_search+0x956>
 800d824:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800d828:	781b      	ldrb	r3, [r3, #0]
 800d82a:	2b2f      	cmp	r3, #47	; 0x2f
 800d82c:	d00d      	beq.n	800d84a <_fx_directory_search+0x956>
    {

        /* If there is room, place a directory separator character.  */
        if (v < (FX_MAX_LAST_NAME_LEN - 1))
 800d82e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d832:	2bfe      	cmp	r3, #254	; 0xfe
 800d834:	d809      	bhi.n	800d84a <_fx_directory_search+0x956>
        {
            media_ptr -> fx_media_last_found_name[v++] =  '/';
 800d836:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d83a:	1c5a      	adds	r2, r3, #1
 800d83c:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800d840:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d842:	4413      	add	r3, r2
 800d844:	222f      	movs	r2, #47	; 0x2f
 800d846:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
        }
    }

    /* Now append the name to the path.  */
    j =  0;
 800d84a:	2300      	movs	r3, #0
 800d84c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    while ((v < FX_MAX_LAST_NAME_LEN) && (original_name[j]))
 800d850:	e017      	b.n	800d882 <_fx_directory_search+0x98e>
    {

        /* Copy one character.   */
        media_ptr -> fx_media_last_found_name[v] =  original_name[j];
 800d852:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800d856:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800d85a:	4413      	add	r3, r2
 800d85c:	7819      	ldrb	r1, [r3, #0]
 800d85e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d864:	4413      	add	r3, r2
 800d866:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800d86a:	460a      	mov	r2, r1
 800d86c:	701a      	strb	r2, [r3, #0]

        /* Move to next character.  */
        v++;
 800d86e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d872:	3301      	adds	r3, #1
 800d874:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
        j++;
 800d878:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800d87c:	3301      	adds	r3, #1
 800d87e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    while ((v < FX_MAX_LAST_NAME_LEN) && (original_name[j]))
 800d882:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d886:	2bff      	cmp	r3, #255	; 0xff
 800d888:	d807      	bhi.n	800d89a <_fx_directory_search+0x9a6>
 800d88a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800d88e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800d892:	4413      	add	r3, r2
 800d894:	781b      	ldrb	r3, [r3, #0]
 800d896:	2b00      	cmp	r3, #0
 800d898:	d1db      	bne.n	800d852 <_fx_directory_search+0x95e>
    }

    /* Null terminate the last name string.   */
    if (v< FX_MAX_LAST_NAME_LEN)
 800d89a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d89e:	2bff      	cmp	r3, #255	; 0xff
 800d8a0:	d808      	bhi.n	800d8b4 <_fx_directory_search+0x9c0>
    {

        /* Null terminate.  */
        media_ptr -> fx_media_last_found_name[v] =  FX_NULL;
 800d8a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d8a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d8a8:	4413      	add	r3, r2
 800d8aa:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800d8ae:	2200      	movs	r2, #0
 800d8b0:	701a      	strb	r2, [r3, #0]
 800d8b2:	e003      	b.n	800d8bc <_fx_directory_search+0x9c8>
    }
    else
    {

        /* The string is too big, NULL the string so it won't be used in searching.  */
        media_ptr -> fx_media_last_found_name[0] =  FX_NULL;
 800d8b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8b6:	2200      	movs	r2, #0
 800d8b8:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
    }

    /* Determine if there is a search pointer.  */
    if (search_dir_ptr)
 800d8bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d00e      	beq.n	800d8e2 <_fx_directory_search+0x9ee>
    {

        /* Yes, there is a search directory pointer so save it!   */
        media_ptr -> fx_media_last_found_directory =  *search_dir_ptr;
 800d8c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8c6:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800d8ca:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800d8ce:	4611      	mov	r1, r2
 800d8d0:	2270      	movs	r2, #112	; 0x70
 800d8d2:	4618      	mov	r0, r3
 800d8d4:	f00c f9c5 	bl	8019c62 <memcpy>

        /* Indicate the search directory is valid.  */
        media_ptr -> fx_media_last_found_directory_valid =  FX_TRUE;
 800d8d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8da:	2201      	movs	r2, #1
 800d8dc:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
 800d8e0:	e003      	b.n	800d8ea <_fx_directory_search+0x9f6>
    }
    else
    {

        /* Indicate the search directory is not valid.  */
        media_ptr -> fx_media_last_found_directory_valid =  FX_FALSE;
 800d8e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8e4:	2200      	movs	r2, #0
 800d8e6:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
    }

    /* Copy the directory entry.  */
    media_ptr -> fx_media_last_found_entry =  *entry_ptr;
 800d8ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d8ee:	f503 731c 	add.w	r3, r3, #624	; 0x270
 800d8f2:	4611      	mov	r1, r2
 800d8f4:	2270      	movs	r2, #112	; 0x70
 800d8f6:	4618      	mov	r0, r3
 800d8f8:	f00c f9b3 	bl	8019c62 <memcpy>

    /* Setup the directory entry for the last found internal file name.  */
    media_ptr -> fx_media_last_found_entry.fx_dir_entry_name =  media_ptr -> fx_media_last_found_file_name;
 800d8fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8fe:	f503 7238 	add.w	r2, r3, #736	; 0x2e0
 800d902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d904:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* Copy the actual directory name into the cached directory name.  */
    for (index = 0; index < FX_MAX_LONG_NAME_LEN; index++)
 800d908:	2300      	movs	r3, #0
 800d90a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800d90e:	e01e      	b.n	800d94e <_fx_directory_search+0xa5a>
    {

        /* Copy character into the cached directory name.  */
        media_ptr -> fx_media_last_found_file_name[index] =  entry_ptr ->  fx_dir_entry_name[index];
 800d910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d912:	681a      	ldr	r2, [r3, #0]
 800d914:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800d918:	4413      	add	r3, r2
 800d91a:	7819      	ldrb	r1, [r3, #0]
 800d91c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d91e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800d922:	4413      	add	r3, r2
 800d924:	f503 7338 	add.w	r3, r3, #736	; 0x2e0
 800d928:	460a      	mov	r2, r1
 800d92a:	701a      	strb	r2, [r3, #0]

        /* See if we have copied the NULL termination character.  */
        if (entry_ptr -> fx_dir_entry_name[index] == (CHAR)FX_NULL)
 800d92c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d92e:	681a      	ldr	r2, [r3, #0]
 800d930:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800d934:	4413      	add	r3, r2
 800d936:	781b      	ldrb	r3, [r3, #0]
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d103      	bne.n	800d944 <_fx_directory_search+0xa50>
        {
                
            /* Check to see if we use the break to get out of the loop.  */
            if (index < (FX_MAX_LONG_NAME_LEN - 1))
 800d93c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800d940:	2bfe      	cmp	r3, #254	; 0xfe
 800d942:	d909      	bls.n	800d958 <_fx_directory_search+0xa64>
    for (index = 0; index < FX_MAX_LONG_NAME_LEN; index++)
 800d944:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800d948:	3301      	adds	r3, #1
 800d94a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800d94e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800d952:	2bff      	cmp	r3, #255	; 0xff
 800d954:	d9dc      	bls.n	800d910 <_fx_directory_search+0xa1c>
 800d956:	e000      	b.n	800d95a <_fx_directory_search+0xa66>
            {
                    
                /* Yes, not at the end of the string, break.  */
                break;
 800d958:	bf00      	nop
            }
        }
    }
#endif

    return(FX_SUCCESS);
 800d95a:	2300      	movs	r3, #0
}
 800d95c:	4618      	mov	r0, r3
 800d95e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800d962:	46bd      	mov	sp, r7
 800d964:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800d968 <_fx_file_close>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_file_close(FX_FILE *file_ptr)
{
 800d968:	b580      	push	{r7, lr}
 800d96a:	b088      	sub	sp, #32
 800d96c:	af00      	add	r7, sp, #0
 800d96e:	6078      	str	r0, [r7, #4]
FX_MEDIA *media_ptr;
FX_INT_SAVE_AREA


    /* First, determine if the file is still open.  */
    if (file_ptr -> fx_file_id != FX_FILE_ID)
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	4a49      	ldr	r2, [pc, #292]	; (800da9c <_fx_file_close+0x134>)
 800d976:	4293      	cmp	r3, r2
 800d978:	d001      	beq.n	800d97e <_fx_file_close+0x16>
    {

        /* Return the file not open error status.  */
        return(FX_NOT_OPEN);
 800d97a:	2307      	movs	r3, #7
 800d97c:	e08a      	b.n	800da94 <_fx_file_close+0x12c>
    }

    /* Setup a pointer to the associated media.  */
    media_ptr =  file_ptr -> fx_file_media_ptr;
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d982:	61fb      	str	r3, [r7, #28]

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_file_closes++;
 800d984:	69fb      	ldr	r3, [r7, #28]
 800d986:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800d98a:	1c5a      	adds	r2, r3, #1
 800d98c:	69fb      	ldr	r3, [r7, #28]
 800d98e:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_FILE_CLOSE, file_ptr, file_ptr -> fx_file_current_file_size, 0, 0, FX_TRACE_FILE_EVENTS, 0, 0)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 800d992:	69fb      	ldr	r3, [r7, #28]
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	4a42      	ldr	r2, [pc, #264]	; (800daa0 <_fx_file_close+0x138>)
 800d998:	4293      	cmp	r3, r2
 800d99a:	d001      	beq.n	800d9a0 <_fx_file_close+0x38>
 800d99c:	2311      	movs	r3, #17
 800d99e:	e079      	b.n	800da94 <_fx_file_close+0x12c>
 800d9a0:	69fb      	ldr	r3, [r7, #28]
 800d9a2:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800d9a6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800d9aa:	4618      	mov	r0, r3
 800d9ac:	f009 fdac 	bl	8017508 <_tx_mutex_get>
 800d9b0:	4603      	mov	r3, r0
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d001      	beq.n	800d9ba <_fx_file_close+0x52>
 800d9b6:	2311      	movs	r3, #17
 800d9b8:	e06c      	b.n	800da94 <_fx_file_close+0x12c>
    FX_TRACE_OBJECT_UNREGISTER(file_ptr)

    /* Remove this file from the opened list for the media.  */

    /* See if the file is the only one on the open list for this media.  */
    if (file_ptr == file_ptr -> fx_file_opened_next)
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d9be:	687a      	ldr	r2, [r7, #4]
 800d9c0:	429a      	cmp	r2, r3
 800d9c2:	d104      	bne.n	800d9ce <_fx_file_close+0x66>
    {

        /* Only opened file, just set the opened list to NULL.  */
        media_ptr -> fx_media_opened_file_list =  FX_NULL;
 800d9c4:	69fb      	ldr	r3, [r7, #28]
 800d9c6:	2200      	movs	r2, #0
 800d9c8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 800d9cc:	e014      	b.n	800d9f8 <_fx_file_close+0x90>
    }
    else
    {

        /* Otherwise, not the only opened file, link-up the neighbors.  */
        (file_ptr -> fx_file_opened_next) -> fx_file_opened_previous =
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
            file_ptr -> fx_file_opened_previous;
 800d9d2:	687a      	ldr	r2, [r7, #4]
 800d9d4:	6e12      	ldr	r2, [r2, #96]	; 0x60
        (file_ptr -> fx_file_opened_next) -> fx_file_opened_previous =
 800d9d6:	661a      	str	r2, [r3, #96]	; 0x60
        (file_ptr -> fx_file_opened_previous) -> fx_file_opened_next =
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
            file_ptr -> fx_file_opened_next;
 800d9dc:	687a      	ldr	r2, [r7, #4]
 800d9de:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
        (file_ptr -> fx_file_opened_previous) -> fx_file_opened_next =
 800d9e0:	65da      	str	r2, [r3, #92]	; 0x5c

        /* See if we have to update the opened list head pointer.  */
        if (media_ptr -> fx_media_opened_file_list == file_ptr)
 800d9e2:	69fb      	ldr	r3, [r7, #28]
 800d9e4:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800d9e8:	687a      	ldr	r2, [r7, #4]
 800d9ea:	429a      	cmp	r2, r3
 800d9ec:	d104      	bne.n	800d9f8 <_fx_file_close+0x90>
        {

            /* Yes, move the head pointer to the next opened file. */
            media_ptr -> fx_media_opened_file_list =  file_ptr -> fx_file_opened_next;
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d9f2:	69fb      	ldr	r3, [r7, #28]
 800d9f4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
        }
    }

    /* Decrement the opened file counter.  */
    media_ptr -> fx_media_opened_file_count--;
 800d9f8:	69fb      	ldr	r3, [r7, #28]
 800d9fa:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800d9fe:	1e5a      	subs	r2, r3, #1
 800da00:	69fb      	ldr	r3, [r7, #28]
 800da02:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

    /* Finally, Indicate that this file is closed.  */
    file_ptr -> fx_file_id =  FX_FILE_CLOSED_ID;
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	4a26      	ldr	r2, [pc, #152]	; (800daa4 <_fx_file_close+0x13c>)
 800da0a:	601a      	str	r2, [r3, #0]

    /* Check to see if this file needs to have its directory entry written
       back to the media.  */
    if ((file_ptr -> fx_file_open_mode == FX_OPEN_FOR_WRITE) &&
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	689b      	ldr	r3, [r3, #8]
 800da10:	2b01      	cmp	r3, #1
 800da12:	d138      	bne.n	800da86 <_fx_file_close+0x11e>
        (file_ptr -> fx_file_modified))
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	7b1b      	ldrb	r3, [r3, #12]
    if ((file_ptr -> fx_file_open_mode == FX_OPEN_FOR_WRITE) &&
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d034      	beq.n	800da86 <_fx_file_close+0x11e>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800da1c:	f3ef 8310 	mrs	r3, PRIMASK
 800da20:	60fb      	str	r3, [r7, #12]
    return(posture);
 800da22:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 800da24:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 800da26:	b672      	cpsid	i
    return(int_posture);
 800da28:	68bb      	ldr	r3, [r7, #8]
    {

        /* Lockout interrupts for time/date access.  */
        FX_DISABLE_INTS
 800da2a:	61bb      	str	r3, [r7, #24]

        /* Set the new time and date.  */
        file_ptr -> fx_file_dir_entry.fx_dir_entry_time =  _fx_system_time;
 800da2c:	4b1e      	ldr	r3, [pc, #120]	; (800daa8 <_fx_file_close+0x140>)
 800da2e:	681a      	ldr	r2, [r3, #0]
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        file_ptr -> fx_file_dir_entry.fx_dir_entry_date =  _fx_system_date;
 800da36:	4b1d      	ldr	r3, [pc, #116]	; (800daac <_fx_file_close+0x144>)
 800da38:	681a      	ldr	r2, [r3, #0]
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

        /* Set the last access date.  */
        file_ptr -> fx_file_dir_entry.fx_dir_entry_last_accessed_date =  _fx_system_date;
 800da40:	4b1a      	ldr	r3, [pc, #104]	; (800daac <_fx_file_close+0x144>)
 800da42:	681a      	ldr	r2, [r3, #0]
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800da4a:	69bb      	ldr	r3, [r7, #24]
 800da4c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800da4e:	693b      	ldr	r3, [r7, #16]
 800da50:	f383 8810 	msr	PRIMASK, r3
}
 800da54:	bf00      	nop
        /* Restore interrupts.  */
        FX_RESTORE_INTS

        /* Copy the new file size into the directory entry.  */
        file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =
            file_ptr -> fx_file_current_file_size;
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
        file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =
 800da5c:	6879      	ldr	r1, [r7, #4]
 800da5e:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
                    media_ptr, &(file_ptr -> fx_file_dir_entry), UPDATE_STREAM);
        }
        else
        {
#endif /* FX_ENABLE_EXFAT */
            status = _fx_directory_entry_write(media_ptr, &(file_ptr -> fx_file_dir_entry));
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	3368      	adds	r3, #104	; 0x68
 800da66:	4619      	mov	r1, r3
 800da68:	69f8      	ldr	r0, [r7, #28]
 800da6a:	f7fd ff65 	bl	800b938 <_fx_directory_entry_write>
 800da6e:	6178      	str	r0, [r7, #20]
#ifdef FX_ENABLE_EXFAT
        }
#endif /* FX_ENABLE_EXFAT */

        /* Check for a good status.  */
        if (status != FX_SUCCESS)
 800da70:	697b      	ldr	r3, [r7, #20]
 800da72:	2b00      	cmp	r3, #0
 800da74:	d007      	beq.n	800da86 <_fx_file_close+0x11e>
        {

            /* Release media protection.  */
            FX_UNPROTECT
 800da76:	69fb      	ldr	r3, [r7, #28]
 800da78:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800da7c:	4618      	mov	r0, r3
 800da7e:	f009 ffbb 	bl	80179f8 <_tx_mutex_put>

            /* Error writing the directory.  */
            return(status);
 800da82:	697b      	ldr	r3, [r7, #20]
 800da84:	e006      	b.n	800da94 <_fx_file_close+0x12c>
        }
    }

    /* Release media protection.  */
    FX_UNPROTECT
 800da86:	69fb      	ldr	r3, [r7, #28]
 800da88:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800da8c:	4618      	mov	r0, r3
 800da8e:	f009 ffb3 	bl	80179f8 <_tx_mutex_put>

    /* Return status to the caller.  */
    return(FX_SUCCESS);
 800da92:	2300      	movs	r3, #0
}
 800da94:	4618      	mov	r0, r3
 800da96:	3720      	adds	r7, #32
 800da98:	46bd      	mov	sp, r7
 800da9a:	bd80      	pop	{r7, pc}
 800da9c:	46494c45 	.word	0x46494c45
 800daa0:	4d454449 	.word	0x4d454449
 800daa4:	46494c43 	.word	0x46494c43
 800daa8:	200151c0 	.word	0x200151c0
 800daac:	200151bc 	.word	0x200151bc

0800dab0 <_fx_file_create>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_file_create(FX_MEDIA *media_ptr, CHAR *file_name)
{
 800dab0:	b590      	push	{r4, r7, lr}
 800dab2:	b0c5      	sub	sp, #276	; 0x114
 800dab4:	af02      	add	r7, sp, #8
 800dab6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800daba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dabe:	6018      	str	r0, [r3, #0]
 800dac0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dac4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dac8:	6019      	str	r1, [r3, #0]


#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_file_creates++;
 800daca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dace:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 800dad8:	1c5a      	adds	r2, r3, #1
 800dada:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dade:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
#endif

    /* Determine if the supplied name is less than the maximum supported name size. The
       maximum name (FX_MAX_LONG_NAME_LEN) is defined in fx_api.h.  */
    i =  0;
 800dae8:	2300      	movs	r3, #0
 800daea:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    work_ptr =  (CHAR *)file_name;
 800daee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800daf2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    while (*work_ptr)
 800dafc:	e020      	b.n	800db40 <_fx_file_create+0x90>
    {

        /* Determine if the character designates a new path.  */
        if ((*work_ptr == '\\') || (*work_ptr == '/'))
 800dafe:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800db02:	781b      	ldrb	r3, [r3, #0]
 800db04:	2b5c      	cmp	r3, #92	; 0x5c
 800db06:	d004      	beq.n	800db12 <_fx_file_create+0x62>
 800db08:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800db0c:	781b      	ldrb	r3, [r3, #0]
 800db0e:	2b2f      	cmp	r3, #47	; 0x2f
 800db10:	d103      	bne.n	800db1a <_fx_file_create+0x6a>
        {
            /* Yes, reset the name size.  */
            i =  0;
 800db12:	2300      	movs	r3, #0
 800db14:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800db18:	e00d      	b.n	800db36 <_fx_file_create+0x86>
        }
        /* Check for leading spaces.  */
        else if ((*work_ptr != ' ') || (i != 0))
 800db1a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800db1e:	781b      	ldrb	r3, [r3, #0]
 800db20:	2b20      	cmp	r3, #32
 800db22:	d103      	bne.n	800db2c <_fx_file_create+0x7c>
 800db24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d004      	beq.n	800db36 <_fx_file_create+0x86>
        {

            /* No leading spaces, increment the name size.  */
            i++;
 800db2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800db30:	3301      	adds	r3, #1
 800db32:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        }

        /* Move to the next character.  */
        work_ptr++;
 800db36:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800db3a:	3301      	adds	r3, #1
 800db3c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    while (*work_ptr)
 800db40:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800db44:	781b      	ldrb	r3, [r3, #0]
 800db46:	2b00      	cmp	r3, #0
 800db48:	d1d9      	bne.n	800dafe <_fx_file_create+0x4e>
    }

    /* Determine if the supplied name is valid.  */
    if ((i == 0) || (i >= FX_MAX_LONG_NAME_LEN))
 800db4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d003      	beq.n	800db5a <_fx_file_create+0xaa>
 800db52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800db56:	2bff      	cmp	r3, #255	; 0xff
 800db58:	d901      	bls.n	800db5e <_fx_file_create+0xae>
    {

        /* Return an invalid name value.  */
        return(FX_INVALID_NAME);
 800db5a:	230c      	movs	r3, #12
 800db5c:	e10a      	b.n	800dd74 <_fx_file_create+0x2c4>
    }

    /* Setup pointer to media name buffer.  */
    dir_entry.fx_dir_entry_name =  media_ptr -> fx_media_name_buffer + FX_MAX_LONG_NAME_LEN;
 800db5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800db62:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	f603 039c 	addw	r3, r3, #2204	; 0x89c
 800db6c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800db70:	67bb      	str	r3, [r7, #120]	; 0x78

    /* Setup another pointer to another media name buffer.  */
    search_directory.fx_dir_entry_name =  media_ptr -> fx_media_name_buffer + FX_MAX_LONG_NAME_LEN * 2;
 800db72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800db76:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	f603 039c 	addw	r3, r3, #2204	; 0x89c
 800db80:	f503 7200 	add.w	r2, r3, #512	; 0x200
 800db84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800db88:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800db8c:	601a      	str	r2, [r3, #0]

    /* Clear the short name strings.  */
    dir_entry.fx_dir_entry_short_name[0] =        0;
 800db8e:	2300      	movs	r3, #0
 800db90:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
    search_directory.fx_dir_entry_short_name[0] = 0;
 800db94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800db98:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800db9c:	2200      	movs	r2, #0
 800db9e:	711a      	strb	r2, [r3, #4]

    /* Check the media to make sure it is open.  */
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 800dba0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dba4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	4a74      	ldr	r2, [pc, #464]	; (800dd80 <_fx_file_create+0x2d0>)
 800dbae:	4293      	cmp	r3, r2
 800dbb0:	d001      	beq.n	800dbb6 <_fx_file_create+0x106>
    {

        /* Return the media not opened error.  */
        return(FX_MEDIA_NOT_OPEN);
 800dbb2:	2311      	movs	r3, #17
 800dbb4:	e0de      	b.n	800dd74 <_fx_file_create+0x2c4>

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_FILE_CREATE, media_ptr, file_name, 0, 0, FX_TRACE_FILE_EVENTS, 0, 0)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 800dbb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dbba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	4a6f      	ldr	r2, [pc, #444]	; (800dd80 <_fx_file_create+0x2d0>)
 800dbc4:	4293      	cmp	r3, r2
 800dbc6:	d001      	beq.n	800dbcc <_fx_file_create+0x11c>
 800dbc8:	2311      	movs	r3, #17
 800dbca:	e0d3      	b.n	800dd74 <_fx_file_create+0x2c4>
 800dbcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dbd0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800dbda:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800dbde:	4618      	mov	r0, r3
 800dbe0:	f009 fc92 	bl	8017508 <_tx_mutex_get>
 800dbe4:	4603      	mov	r3, r0
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d001      	beq.n	800dbee <_fx_file_create+0x13e>
 800dbea:	2311      	movs	r3, #17
 800dbec:	e0c2      	b.n	800dd74 <_fx_file_create+0x2c4>
    /* Start transaction. */
    _fx_fault_tolerant_transaction_start(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Check for write protect at the media level (set by driver).  */
    if (media_ptr -> fx_media_driver_write_protect)
 800dbee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dbf2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d00b      	beq.n	800dc18 <_fx_file_create+0x168>
#ifdef FX_ENABLE_FAULT_TOLERANT
        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

        /* Release media protection.  */
        FX_UNPROTECT
 800dc00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dc04:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800dc0e:	4618      	mov	r0, r3
 800dc10:	f009 fef2 	bl	80179f8 <_tx_mutex_put>

        /* Return write protect error.  */
        return(FX_WRITE_PROTECT);
 800dc14:	2323      	movs	r3, #35	; 0x23
 800dc16:	e0ad      	b.n	800dd74 <_fx_file_create+0x2c4>
    }

    /* Search the system for the supplied file name.  */
    status =  _fx_directory_search(media_ptr, file_name, &dir_entry, &search_directory, &name_ptr);
 800dc18:	f107 0408 	add.w	r4, r7, #8
 800dc1c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800dc20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dc24:	f5a3 7184 	sub.w	r1, r3, #264	; 0x108
 800dc28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dc2c:	f5a3 7082 	sub.w	r0, r3, #260	; 0x104
 800dc30:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800dc34:	9300      	str	r3, [sp, #0]
 800dc36:	4623      	mov	r3, r4
 800dc38:	6809      	ldr	r1, [r1, #0]
 800dc3a:	6800      	ldr	r0, [r0, #0]
 800dc3c:	f7ff f95a 	bl	800cef4 <_fx_directory_search>
 800dc40:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc

    /* Determine if the search was successful.  */
    if (status == FX_SUCCESS)
 800dc44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d10b      	bne.n	800dc64 <_fx_file_create+0x1b4>
#ifdef FX_ENABLE_FAULT_TOLERANT
        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

        /* Release media protection.  */
        FX_UNPROTECT
 800dc4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dc50:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800dc5a:	4618      	mov	r0, r3
 800dc5c:	f009 fecc 	bl	80179f8 <_tx_mutex_put>

        /* File found - Return the error code.  */
        return(FX_ALREADY_CREATED);
 800dc60:	230b      	movs	r3, #11
 800dc62:	e087      	b.n	800dd74 <_fx_file_create+0x2c4>
    }

    /* Determine if there is anything left after the name.  */
    if (_fx_directory_name_extract(name_ptr, &dir_entry.fx_dir_entry_name[0]))
 800dc64:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800dc68:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800dc6a:	4611      	mov	r1, r2
 800dc6c:	4618      	mov	r0, r3
 800dc6e:	f7ff f8df 	bl	800ce30 <_fx_directory_name_extract>
 800dc72:	4603      	mov	r3, r0
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d00b      	beq.n	800dc90 <_fx_file_create+0x1e0>
#ifdef FX_ENABLE_FAULT_TOLERANT
        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

        /* Release media protection.  */
        FX_UNPROTECT
 800dc78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dc7c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800dc86:	4618      	mov	r0, r3
 800dc88:	f009 feb6 	bl	80179f8 <_tx_mutex_put>

        /* Extra information after the file name, return an invalid path
           error.  */
        return(FX_INVALID_PATH);
 800dc8c:	230d      	movs	r3, #13
 800dc8e:	e071      	b.n	800dd74 <_fx_file_create+0x2c4>
    /* Save the directory entry size.  */
    dir_size = search_directory.fx_dir_entry_file_size;
#endif /* FX_ENABLE_EXFAT */

    /* Find a free slot for the new file.  */
    status =  _fx_directory_free_search(media_ptr, &search_directory, &dir_entry);
 800dc90:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800dc94:	f107 0108 	add.w	r1, r7, #8
 800dc98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dc9c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dca0:	6818      	ldr	r0, [r3, #0]
 800dca2:	f7fe fc85 	bl	800c5b0 <_fx_directory_free_search>
 800dca6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc

    /* Determine if the search was successful.  */
    if (status != FX_SUCCESS)
 800dcaa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d00c      	beq.n	800dccc <_fx_file_create+0x21c>
#ifdef FX_ENABLE_FAULT_TOLERANT
        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

        /* Release media protection.  */
        FX_UNPROTECT
 800dcb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dcb6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800dcc0:	4618      	mov	r0, r3
 800dcc2:	f009 fe99 	bl	80179f8 <_tx_mutex_put>

        /* Return the error code.  */
        return(status);
 800dcc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800dcca:	e053      	b.n	800dd74 <_fx_file_create+0x2c4>
    }

    /* Populate the directory entry.  */

    /* Isolate the file name.  */
    _fx_directory_name_extract(name_ptr, &dir_entry.fx_dir_entry_name[0]);
 800dccc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800dcd0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800dcd2:	4611      	mov	r1, r2
 800dcd4:	4618      	mov	r0, r3
 800dcd6:	f7ff f8ab 	bl	800ce30 <_fx_directory_name_extract>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800dcda:	f3ef 8310 	mrs	r3, PRIMASK
 800dcde:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    return(posture);
 800dce2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
    int_posture = __get_interrupt_posture();
 800dce6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    __asm__ volatile ("CPSID i" : : : "memory");
 800dcea:	b672      	cpsid	i
    return(int_posture);
 800dcec:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec

    /* Disable interrupts for time/date access.  */
    FX_DISABLE_INTS
 800dcf0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

    /* Set time and date stamps.  */
    dir_entry.fx_dir_entry_time =  _fx_system_time;
 800dcf4:	4b23      	ldr	r3, [pc, #140]	; (800dd84 <_fx_file_create+0x2d4>)
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    dir_entry.fx_dir_entry_date =  _fx_system_date;
 800dcfc:	4b22      	ldr	r3, [pc, #136]	; (800dd88 <_fx_file_create+0x2d8>)
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800dd04:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800dd08:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800dd0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dd10:	f383 8810 	msr	PRIMASK, r3
}
 800dd14:	bf00      	nop

    /* Restore interrupts.  */
    FX_RESTORE_INTS

    /* Set the attributes for the file.  */
    dir_entry.fx_dir_entry_attributes =  FX_ARCHIVE;
 800dd16:	2320      	movs	r3, #32
 800dd18:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94

    /* Set file size to 0. */
    dir_entry.fx_dir_entry_file_size =  0;
 800dd1c:	f04f 0200 	mov.w	r2, #0
 800dd20:	f04f 0300 	mov.w	r3, #0
 800dd24:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
    /* Set available file size to 0. */
    dir_entry.fx_dir_entry_available_file_size = 0;
#endif /* FX_ENABLE_EXFAT */

    /* Set the cluster to NULL.  */
    dir_entry.fx_dir_entry_cluster =    FX_NULL;
 800dd28:	2300      	movs	r3, #0
 800dd2a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

    /* Is there a leading dot?  */
    if (dir_entry.fx_dir_entry_name[0] == '.')
 800dd2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dd30:	781b      	ldrb	r3, [r3, #0]
 800dd32:	2b2e      	cmp	r3, #46	; 0x2e
 800dd34:	d106      	bne.n	800dd44 <_fx_file_create+0x294>
    {

        /* Yes, toggle the hidden attribute bit.  */
        dir_entry.fx_dir_entry_attributes |=  FX_HIDDEN;
 800dd36:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 800dd3a:	f043 0302 	orr.w	r3, r3, #2
 800dd3e:	b2db      	uxtb	r3, r3
 800dd40:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
        status = _fx_directory_exFAT_entry_write(media_ptr, &dir_entry, UPDATE_FULL);
    }
    else
    {
#endif /* FX_ENABLE_EXFAT */
        status = _fx_directory_entry_write(media_ptr, &dir_entry);
 800dd44:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800dd48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dd4c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dd50:	4611      	mov	r1, r2
 800dd52:	6818      	ldr	r0, [r3, #0]
 800dd54:	f7fd fdf0 	bl	800b938 <_fx_directory_entry_write>
 800dd58:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    /* End transaction. */
    status = _fx_fault_tolerant_transaction_end(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Release media protection.  */
    FX_UNPROTECT
 800dd5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dd60:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800dd6a:	4618      	mov	r0, r3
 800dd6c:	f009 fe44 	bl	80179f8 <_tx_mutex_put>

    /* File create is complete, return status.  */
    return(status);
 800dd70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
}
 800dd74:	4618      	mov	r0, r3
 800dd76:	f507 7786 	add.w	r7, r7, #268	; 0x10c
 800dd7a:	46bd      	mov	sp, r7
 800dd7c:	bd90      	pop	{r4, r7, pc}
 800dd7e:	bf00      	nop
 800dd80:	4d454449 	.word	0x4d454449
 800dd84:	200151c0 	.word	0x200151c0
 800dd88:	200151bc 	.word	0x200151bc

0800dd8c <_fx_file_extended_seek>:
/*                                            relative cluster logic,     */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UINT  _fx_file_extended_seek(FX_FILE *file_ptr, ULONG64 byte_offset)
{
 800dd8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800dd90:	b0c2      	sub	sp, #264	; 0x108
 800dd92:	af00      	add	r7, sp, #0
 800dd94:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
 800dd98:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0

UINT      status;
ULONG     cluster;
ULONG     contents = 0;
 800dd9c:	2300      	movs	r3, #0
 800dd9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
ULONG64   bytes_remaining;
FX_MEDIA *media_ptr;


    /* First, determine if the file is still open.  */
    if (file_ptr -> fx_file_id != FX_FILE_ID)
 800dda2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dda6:	681a      	ldr	r2, [r3, #0]
 800dda8:	4bcf      	ldr	r3, [pc, #828]	; (800e0e8 <_fx_file_extended_seek+0x35c>)
 800ddaa:	429a      	cmp	r2, r3
 800ddac:	d001      	beq.n	800ddb2 <_fx_file_extended_seek+0x26>
    {

        /* Return the file not open error status.  */
        return(FX_NOT_OPEN);
 800ddae:	2307      	movs	r3, #7
 800ddb0:	e2b4      	b.n	800e31c <_fx_file_extended_seek+0x590>
    }

#ifndef FX_MEDIA_STATISTICS_DISABLE
    /* Setup pointer to media structure.  */
    media_ptr =  file_ptr -> fx_file_media_ptr;
 800ddb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ddb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ddb8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_file_seeks++;
 800ddbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ddc0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800ddc4:	1c5a      	adds	r2, r3, #1
 800ddc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ddca:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
#endif

    /* Setup pointer to associated media control block.  */
    media_ptr =  file_ptr -> fx_file_media_ptr;
 800ddce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ddd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ddd4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_FILE_SEEK, file_ptr, byte_offset, file_ptr -> fx_file_current_file_offset, 0, FX_TRACE_FILE_EVENTS, 0, 0)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 800ddd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dddc:	681a      	ldr	r2, [r3, #0]
 800ddde:	4bc3      	ldr	r3, [pc, #780]	; (800e0ec <_fx_file_extended_seek+0x360>)
 800dde0:	429a      	cmp	r2, r3
 800dde2:	d001      	beq.n	800dde8 <_fx_file_extended_seek+0x5c>
 800dde4:	2311      	movs	r3, #17
 800dde6:	e299      	b.n	800e31c <_fx_file_extended_seek+0x590>
 800dde8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ddec:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800ddf0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800ddf4:	4618      	mov	r0, r3
 800ddf6:	f009 fb87 	bl	8017508 <_tx_mutex_get>
 800ddfa:	4603      	mov	r3, r0
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d001      	beq.n	800de04 <_fx_file_extended_seek+0x78>
 800de00:	2311      	movs	r3, #17
 800de02:	e28b      	b.n	800e31c <_fx_file_extended_seek+0x590>

    /* Check if we actually have to do anything.  */
    if (byte_offset == file_ptr -> fx_file_current_file_offset)
 800de04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800de08:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800de0c:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800de10:	428b      	cmp	r3, r1
 800de12:	bf08      	it	eq
 800de14:	4282      	cmpeq	r2, r0
 800de16:	d108      	bne.n	800de2a <_fx_file_extended_seek+0x9e>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 800de18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800de1c:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800de20:	4618      	mov	r0, r3
 800de22:	f009 fde9 	bl	80179f8 <_tx_mutex_put>

        /* Seek is complete, return successful status.  */
        return(FX_SUCCESS);
 800de26:	2300      	movs	r3, #0
 800de28:	e278      	b.n	800e31c <_fx_file_extended_seek+0x590>
    }

    /* Calculate the number of bytes per cluster.  */
    bytes_per_cluster =  ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 800de2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800de2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
        ((ULONG)media_ptr -> fx_media_sectors_per_cluster);
 800de30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800de34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    bytes_per_cluster =  ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 800de36:	fb02 f303 	mul.w	r3, r2, r3
 800de3a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0

    /* Check for invalid value.  */
    if (bytes_per_cluster == 0)
 800de3e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800de42:	2b00      	cmp	r3, #0
 800de44:	d108      	bne.n	800de58 <_fx_file_extended_seek+0xcc>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 800de46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800de4a:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800de4e:	4618      	mov	r0, r3
 800de50:	f009 fdd2 	bl	80179f8 <_tx_mutex_put>

        /* Invalid media, return error.  */
        return(FX_MEDIA_INVALID);
 800de54:	2302      	movs	r3, #2
 800de56:	e261      	b.n	800e31c <_fx_file_extended_seek+0x590>
    }

    /* See if we need to adjust the byte offset.  */
    if (byte_offset > file_ptr -> fx_file_current_file_size)
 800de58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800de5c:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 800de60:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800de64:	4290      	cmp	r0, r2
 800de66:	eb71 0303 	sbcs.w	r3, r1, r3
 800de6a:	d205      	bcs.n	800de78 <_fx_file_extended_seek+0xec>
    {

        /* Adjust the byte offset down to the file size. */
        byte_offset =  file_ptr -> fx_file_current_file_size;
 800de6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800de70:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800de74:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
    }

    /* Check if the desired position within the leading consecutive clusters.  */
    if (byte_offset >= (ULONG64)file_ptr -> fx_file_consecutive_cluster * (ULONG64)bytes_per_cluster)
 800de78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800de7c:	699b      	ldr	r3, [r3, #24]
 800de7e:	2200      	movs	r2, #0
 800de80:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800de84:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800de88:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800de8c:	2200      	movs	r2, #0
 800de8e:	469a      	mov	sl, r3
 800de90:	4693      	mov	fp, r2
 800de92:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800de96:	460b      	mov	r3, r1
 800de98:	fb0a f203 	mul.w	r2, sl, r3
 800de9c:	4603      	mov	r3, r0
 800de9e:	fb03 f30b 	mul.w	r3, r3, fp
 800dea2:	4413      	add	r3, r2
 800dea4:	4602      	mov	r2, r0
 800dea6:	fba2 450a 	umull	r4, r5, r2, sl
 800deaa:	442b      	add	r3, r5
 800deac:	461d      	mov	r5, r3
 800deae:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800deb2:	42a2      	cmp	r2, r4
 800deb4:	41ab      	sbcs	r3, r5
 800deb6:	f0c0 8155 	bcc.w	800e164 <_fx_file_extended_seek+0x3d8>

            /* At this point, we are ready to walk list of clusters to setup the
               seek position of this file.  */

            /* check if byte_offset is greater than where we were left off earlier */
            if ((ULONG64)file_ptr -> fx_file_current_relative_cluster * (ULONG64)bytes_per_cluster < byte_offset)
 800deba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800debe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dec0:	2200      	movs	r2, #0
 800dec2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800dec6:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800deca:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800dece:	2200      	movs	r2, #0
 800ded0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ded4:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800ded8:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 800dedc:	462b      	mov	r3, r5
 800dede:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	; 0xb0
 800dee2:	4652      	mov	r2, sl
 800dee4:	fb02 f203 	mul.w	r2, r2, r3
 800dee8:	465b      	mov	r3, fp
 800deea:	4621      	mov	r1, r4
 800deec:	fb01 f303 	mul.w	r3, r1, r3
 800def0:	4413      	add	r3, r2
 800def2:	4622      	mov	r2, r4
 800def4:	4651      	mov	r1, sl
 800def6:	fba2 8901 	umull	r8, r9, r2, r1
 800defa:	444b      	add	r3, r9
 800defc:	4699      	mov	r9, r3
 800defe:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800df02:	4590      	cmp	r8, r2
 800df04:	eb79 0303 	sbcs.w	r3, r9, r3
 800df08:	d225      	bcs.n	800df56 <_fx_file_extended_seek+0x1ca>
            {

                cluster =    file_ptr -> fx_file_current_physical_cluster;
 800df0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800df0e:	6a1b      	ldr	r3, [r3, #32]
 800df10:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

                bytes_remaining =   byte_offset -
                    file_ptr -> fx_file_current_relative_cluster * bytes_per_cluster;
 800df14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800df18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800df1a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800df1e:	fb02 f303 	mul.w	r3, r2, r3
 800df22:	2200      	movs	r2, #0
 800df24:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800df28:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
                bytes_remaining =   byte_offset -
 800df2c:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800df30:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 800df34:	4621      	mov	r1, r4
 800df36:	1a51      	subs	r1, r2, r1
 800df38:	6139      	str	r1, [r7, #16]
 800df3a:	4629      	mov	r1, r5
 800df3c:	eb63 0301 	sbc.w	r3, r3, r1
 800df40:	617b      	str	r3, [r7, #20]
 800df42:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800df46:	e9c7 343e 	strd	r3, r4, [r7, #248]	; 0xf8

                cluster_count = file_ptr -> fx_file_current_relative_cluster;
 800df4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800df4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df50:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800df54:	e0b7      	b.n	800e0c6 <_fx_file_extended_seek+0x33a>
            }
            else
            {

                cluster =    file_ptr -> fx_file_first_physical_cluster +
 800df56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800df5a:	695a      	ldr	r2, [r3, #20]
                    (file_ptr -> fx_file_consecutive_cluster - 1);
 800df5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800df60:	699b      	ldr	r3, [r3, #24]
                cluster =    file_ptr -> fx_file_first_physical_cluster +
 800df62:	4413      	add	r3, r2
 800df64:	3b01      	subs	r3, #1
 800df66:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
                bytes_remaining =   byte_offset -
                    (file_ptr -> fx_file_consecutive_cluster - 1) * bytes_per_cluster;
 800df6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800df6e:	699b      	ldr	r3, [r3, #24]
 800df70:	1e5a      	subs	r2, r3, #1
 800df72:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800df76:	fb02 f303 	mul.w	r3, r2, r3
 800df7a:	2200      	movs	r2, #0
 800df7c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800df80:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
                bytes_remaining =   byte_offset -
 800df84:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800df88:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 800df8c:	4621      	mov	r1, r4
 800df8e:	1a51      	subs	r1, r2, r1
 800df90:	60b9      	str	r1, [r7, #8]
 800df92:	4629      	mov	r1, r5
 800df94:	eb63 0301 	sbc.w	r3, r3, r1
 800df98:	60fb      	str	r3, [r7, #12]
 800df9a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800df9e:	e9c7 343e 	strd	r3, r4, [r7, #248]	; 0xf8
                cluster_count =     (file_ptr -> fx_file_consecutive_cluster - 1);
 800dfa2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dfa6:	699b      	ldr	r3, [r3, #24]
 800dfa8:	3b01      	subs	r3, #1
 800dfaa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
            }


            /* Follow the link of FAT entries.  */
            while ((cluster >= FX_FAT_ENTRY_START) && (cluster < media_ptr -> fx_media_fat_reserved))
 800dfae:	e08a      	b.n	800e0c6 <_fx_file_extended_seek+0x33a>
            {

                /* Increment the number of clusters.  */
                cluster_count++;
 800dfb0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800dfb4:	3301      	adds	r3, #1
 800dfb6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

                /* Read the current cluster entry from the FAT.  */
                status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &contents);
 800dfba:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800dfbe:	461a      	mov	r2, r3
 800dfc0:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 800dfc4:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800dfc8:	f004 f8fa 	bl	80121c0 <_fx_utility_FAT_entry_read>
 800dfcc:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec

                /* Check the return value.  */
                if (status != FX_SUCCESS)
 800dfd0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d009      	beq.n	800dfec <_fx_file_extended_seek+0x260>
                {

                    /* Release media protection.  */
                    FX_UNPROTECT
 800dfd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dfdc:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800dfe0:	4618      	mov	r0, r3
 800dfe2:	f009 fd09 	bl	80179f8 <_tx_mutex_put>

                    /* Return the error status.  */
                    return(status);
 800dfe6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800dfea:	e197      	b.n	800e31c <_fx_file_extended_seek+0x590>
                }

                /* Save the last valid cluster.  */
                last_cluster =  cluster;
 800dfec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dff0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

                /* Setup for the next cluster.  */
                cluster =  contents;
 800dff4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dff8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

                /* Determine if this is the last written cluster.  */
                if (bytes_remaining > bytes_per_cluster)
 800dffc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800e000:	2200      	movs	r2, #0
 800e002:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800e006:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800e00a:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 800e00e:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 800e012:	4621      	mov	r1, r4
 800e014:	4291      	cmp	r1, r2
 800e016:	4629      	mov	r1, r5
 800e018:	eb71 0303 	sbcs.w	r3, r1, r3
 800e01c:	d216      	bcs.n	800e04c <_fx_file_extended_seek+0x2c0>
                {

                    /* Still more seeking, just decrement the working byte offset.  */
                    bytes_remaining =  bytes_remaining - bytes_per_cluster;
 800e01e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800e022:	2200      	movs	r2, #0
 800e024:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800e028:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800e02c:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 800e030:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800e034:	4621      	mov	r1, r4
 800e036:	1a51      	subs	r1, r2, r1
 800e038:	6039      	str	r1, [r7, #0]
 800e03a:	4629      	mov	r1, r5
 800e03c:	eb63 0301 	sbc.w	r3, r3, r1
 800e040:	607b      	str	r3, [r7, #4]
 800e042:	e9d7 3400 	ldrd	r3, r4, [r7]
 800e046:	e9c7 343e 	strd	r3, r4, [r7, #248]	; 0xf8
 800e04a:	e03c      	b.n	800e0c6 <_fx_file_extended_seek+0x33a>
                }
                else
                {

                    /* Remember this cluster number.  */
                    file_ptr -> fx_file_current_physical_cluster =  last_cluster;
 800e04c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e050:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800e054:	6213      	str	r3, [r2, #32]

                    /* Remember the relative cluster.  */
                    file_ptr -> fx_file_current_relative_cluster =  cluster_count - 1;
 800e056:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800e05a:	1e5a      	subs	r2, r3, #1
 800e05c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e060:	635a      	str	r2, [r3, #52]	; 0x34

                    /* If the remaining bytes exactly fits the cluster size, check for
                       a possible adjustment to the next cluster.  */
                    if ((bytes_remaining == bytes_per_cluster) &&
 800e062:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800e066:	2200      	movs	r2, #0
 800e068:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800e06c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800e070:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 800e074:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 800e078:	4621      	mov	r1, r4
 800e07a:	4628      	mov	r0, r5
 800e07c:	4283      	cmp	r3, r0
 800e07e:	bf08      	it	eq
 800e080:	428a      	cmpeq	r2, r1
 800e082:	d135      	bne.n	800e0f0 <_fx_file_extended_seek+0x364>
 800e084:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e088:	2b01      	cmp	r3, #1
 800e08a:	d931      	bls.n	800e0f0 <_fx_file_extended_seek+0x364>
                        (cluster >= FX_FAT_ENTRY_START) && (cluster < media_ptr -> fx_media_fat_reserved))
 800e08c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e090:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800e094:	f8d3 24a8 	ldr.w	r2, [r3, #1192]	; 0x4a8
 800e098:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e09c:	4293      	cmp	r3, r2
 800e09e:	d227      	bcs.n	800e0f0 <_fx_file_extended_seek+0x364>
                    {

                        /* We need to position to next allocated cluster.  */
                        file_ptr -> fx_file_current_physical_cluster =  cluster;
 800e0a0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e0a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e0a8:	6213      	str	r3, [r2, #32]
                        file_ptr -> fx_file_current_relative_cluster++;
 800e0aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e0ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e0b0:	1c5a      	adds	r2, r3, #1
 800e0b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e0b6:	635a      	str	r2, [r3, #52]	; 0x34

                        /* Clear the remaining bytes.  */
                        bytes_remaining =  0;
 800e0b8:	f04f 0200 	mov.w	r2, #0
 800e0bc:	f04f 0300 	mov.w	r3, #0
 800e0c0:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
                    }

                    /* This is the cluster that contains the seek position.  */
                    break;
 800e0c4:	e014      	b.n	800e0f0 <_fx_file_extended_seek+0x364>
            while ((cluster >= FX_FAT_ENTRY_START) && (cluster < media_ptr -> fx_media_fat_reserved))
 800e0c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e0ca:	2b01      	cmp	r3, #1
 800e0cc:	d911      	bls.n	800e0f2 <_fx_file_extended_seek+0x366>
 800e0ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e0d2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800e0d6:	f8d3 24a8 	ldr.w	r2, [r3, #1192]	; 0x4a8
 800e0da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e0de:	4293      	cmp	r3, r2
 800e0e0:	f4ff af66 	bcc.w	800dfb0 <_fx_file_extended_seek+0x224>
 800e0e4:	e005      	b.n	800e0f2 <_fx_file_extended_seek+0x366>
 800e0e6:	bf00      	nop
 800e0e8:	46494c45 	.word	0x46494c45
 800e0ec:	4d454449 	.word	0x4d454449
                    break;
 800e0f0:	bf00      	nop
                }
            }
        
            /* Check for errors in traversal of the FAT chain.  */
            if (byte_offset > (((ULONG64) bytes_per_cluster) * ((ULONG64) cluster_count)))
 800e0f2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800e0f6:	2200      	movs	r2, #0
 800e0f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800e0fc:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800e100:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800e104:	2200      	movs	r2, #0
 800e106:	67bb      	str	r3, [r7, #120]	; 0x78
 800e108:	67fa      	str	r2, [r7, #124]	; 0x7c
 800e10a:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 800e10e:	462b      	mov	r3, r5
 800e110:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800e114:	4642      	mov	r2, r8
 800e116:	fb02 f203 	mul.w	r2, r2, r3
 800e11a:	464b      	mov	r3, r9
 800e11c:	4621      	mov	r1, r4
 800e11e:	fb01 f303 	mul.w	r3, r1, r3
 800e122:	4413      	add	r3, r2
 800e124:	4622      	mov	r2, r4
 800e126:	4641      	mov	r1, r8
 800e128:	fba2 1201 	umull	r1, r2, r2, r1
 800e12c:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 800e130:	460a      	mov	r2, r1
 800e132:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 800e136:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800e13a:	4413      	add	r3, r2
 800e13c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800e140:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800e144:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 800e148:	4621      	mov	r1, r4
 800e14a:	4291      	cmp	r1, r2
 800e14c:	4629      	mov	r1, r5
 800e14e:	4199      	sbcs	r1, r3
 800e150:	d22f      	bcs.n	800e1b2 <_fx_file_extended_seek+0x426>
            {
    
                /* Release media protection.  */
                FX_UNPROTECT
 800e152:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e156:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800e15a:	4618      	mov	r0, r3
 800e15c:	f009 fc4c 	bl	80179f8 <_tx_mutex_put>

                /* This is an error that suggests a corrupt file.  */
                return(FX_FILE_CORRUPT);
 800e160:	2308      	movs	r3, #8
 800e162:	e0db      	b.n	800e31c <_fx_file_extended_seek+0x590>
    }
    else
    {

        /* we should directly access the desired cluster */
        file_ptr -> fx_file_current_relative_cluster = (ULONG)(byte_offset / bytes_per_cluster);
 800e164:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800e168:	2200      	movs	r2, #0
 800e16a:	673b      	str	r3, [r7, #112]	; 0x70
 800e16c:	677a      	str	r2, [r7, #116]	; 0x74
 800e16e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800e172:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800e176:	f7f2 f99d 	bl	80004b4 <__aeabi_uldivmod>
 800e17a:	4602      	mov	r2, r0
 800e17c:	460b      	mov	r3, r1
 800e17e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e182:	635a      	str	r2, [r3, #52]	; 0x34

        file_ptr -> fx_file_current_physical_cluster =
            file_ptr -> fx_file_first_physical_cluster + file_ptr -> fx_file_current_relative_cluster;
 800e184:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e188:	695a      	ldr	r2, [r3, #20]
 800e18a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e18e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e190:	441a      	add	r2, r3
        file_ptr -> fx_file_current_physical_cluster =
 800e192:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e196:	621a      	str	r2, [r3, #32]

        bytes_remaining =  byte_offset % bytes_per_cluster;
 800e198:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800e19c:	2200      	movs	r2, #0
 800e19e:	66bb      	str	r3, [r7, #104]	; 0x68
 800e1a0:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e1a2:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800e1a6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800e1aa:	f7f2 f983 	bl	80004b4 <__aeabi_uldivmod>
 800e1ae:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
    }


    /* Determine if the remaining bytes fit exactly into the cluster size.  */
    if (bytes_remaining == bytes_per_cluster)
 800e1b2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800e1b6:	2200      	movs	r2, #0
 800e1b8:	663b      	str	r3, [r7, #96]	; 0x60
 800e1ba:	667a      	str	r2, [r7, #100]	; 0x64
 800e1bc:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 800e1c0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800e1c4:	4621      	mov	r1, r4
 800e1c6:	4628      	mov	r0, r5
 800e1c8:	4283      	cmp	r3, r0
 800e1ca:	bf08      	it	eq
 800e1cc:	428a      	cmpeq	r2, r1
 800e1ce:	d151      	bne.n	800e274 <_fx_file_extended_seek+0x4e8>
    {

        /* Position to the end of the cluster.  */
        file_ptr -> fx_file_current_logical_sector = (ULONG)(((ULONG)media_ptr -> fx_media_data_sector_start) +
 800e1d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e1d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                                                             (((ULONG64)file_ptr -> fx_file_current_physical_cluster - FX_FAT_ENTRY_START) *
 800e1d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e1da:	6a1b      	ldr	r3, [r3, #32]
        file_ptr -> fx_file_current_logical_sector = (ULONG)(((ULONG)media_ptr -> fx_media_data_sector_start) +
 800e1dc:	3b02      	subs	r3, #2
                                                              ((ULONG)media_ptr -> fx_media_sectors_per_cluster)) +
 800e1de:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 800e1e2:	6d49      	ldr	r1, [r1, #84]	; 0x54
        file_ptr -> fx_file_current_logical_sector = (ULONG)(((ULONG)media_ptr -> fx_media_data_sector_start) +
 800e1e4:	fb01 f303 	mul.w	r3, r1, r3
 800e1e8:	18d4      	adds	r4, r2, r3
                                                             ((bytes_remaining - 1) / (ULONG)media_ptr -> fx_media_bytes_per_sector));
 800e1ea:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 800e1ee:	1e51      	subs	r1, r2, #1
 800e1f0:	65b9      	str	r1, [r7, #88]	; 0x58
 800e1f2:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
 800e1f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e1f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e1fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e1fe:	2200      	movs	r2, #0
 800e200:	653b      	str	r3, [r7, #80]	; 0x50
 800e202:	657a      	str	r2, [r7, #84]	; 0x54
 800e204:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800e208:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800e20c:	f7f2 f952 	bl	80004b4 <__aeabi_uldivmod>
 800e210:	4602      	mov	r2, r0
 800e212:	460b      	mov	r3, r1
        file_ptr -> fx_file_current_logical_sector = (ULONG)(((ULONG)media_ptr -> fx_media_data_sector_start) +
 800e214:	4613      	mov	r3, r2
 800e216:	4423      	add	r3, r4
 800e218:	2200      	movs	r2, #0
 800e21a:	64bb      	str	r3, [r7, #72]	; 0x48
 800e21c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800e21e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e222:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800e226:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
        file_ptr -> fx_file_current_relative_sector =   (UINT)(((bytes_remaining - 1) / (ULONG)media_ptr -> fx_media_bytes_per_sector));
 800e22a:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 800e22e:	1e51      	subs	r1, r2, #1
 800e230:	6439      	str	r1, [r7, #64]	; 0x40
 800e232:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
 800e236:	647b      	str	r3, [r7, #68]	; 0x44
 800e238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e23c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e23e:	2200      	movs	r2, #0
 800e240:	63bb      	str	r3, [r7, #56]	; 0x38
 800e242:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e244:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800e248:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800e24c:	f7f2 f932 	bl	80004b4 <__aeabi_uldivmod>
 800e250:	4602      	mov	r2, r0
 800e252:	460b      	mov	r3, r1
 800e254:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e258:	639a      	str	r2, [r3, #56]	; 0x38
        file_ptr -> fx_file_current_file_offset =       byte_offset;
 800e25a:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800e25e:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800e262:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
        file_ptr -> fx_file_current_logical_offset =    media_ptr -> fx_media_bytes_per_sector;
 800e266:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e26a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e26c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e270:	631a      	str	r2, [r3, #48]	; 0x30
 800e272:	e04b      	b.n	800e30c <_fx_file_extended_seek+0x580>
    }
    else
    {

        /* Position the pointers to the new offset.  */
        file_ptr -> fx_file_current_logical_sector = (ULONG)(((ULONG)media_ptr -> fx_media_data_sector_start) +
 800e274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e278:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                                                             (((ULONG64)file_ptr -> fx_file_current_physical_cluster - FX_FAT_ENTRY_START) *
 800e27a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e27e:	6a1b      	ldr	r3, [r3, #32]
        file_ptr -> fx_file_current_logical_sector = (ULONG)(((ULONG)media_ptr -> fx_media_data_sector_start) +
 800e280:	3b02      	subs	r3, #2
                                                              ((ULONG)media_ptr -> fx_media_sectors_per_cluster)) +
 800e282:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 800e286:	6d49      	ldr	r1, [r1, #84]	; 0x54
        file_ptr -> fx_file_current_logical_sector = (ULONG)(((ULONG)media_ptr -> fx_media_data_sector_start) +
 800e288:	fb01 f303 	mul.w	r3, r1, r3
 800e28c:	18d4      	adds	r4, r2, r3
                                                             (bytes_remaining / (ULONG)media_ptr -> fx_media_bytes_per_sector));
 800e28e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e294:	2200      	movs	r2, #0
 800e296:	633b      	str	r3, [r7, #48]	; 0x30
 800e298:	637a      	str	r2, [r7, #52]	; 0x34
 800e29a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800e29e:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 800e2a2:	f7f2 f907 	bl	80004b4 <__aeabi_uldivmod>
 800e2a6:	4602      	mov	r2, r0
 800e2a8:	460b      	mov	r3, r1
        file_ptr -> fx_file_current_logical_sector = (ULONG)(((ULONG)media_ptr -> fx_media_data_sector_start) +
 800e2aa:	4613      	mov	r3, r2
 800e2ac:	4423      	add	r3, r4
 800e2ae:	2200      	movs	r2, #0
 800e2b0:	62bb      	str	r3, [r7, #40]	; 0x28
 800e2b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e2b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e2b8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800e2bc:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
        file_ptr -> fx_file_current_relative_sector =   (UINT)((bytes_remaining / (ULONG)media_ptr -> fx_media_bytes_per_sector));
 800e2c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e2c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e2c6:	2200      	movs	r2, #0
 800e2c8:	623b      	str	r3, [r7, #32]
 800e2ca:	627a      	str	r2, [r7, #36]	; 0x24
 800e2cc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800e2d0:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 800e2d4:	f7f2 f8ee 	bl	80004b4 <__aeabi_uldivmod>
 800e2d8:	4602      	mov	r2, r0
 800e2da:	460b      	mov	r3, r1
 800e2dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e2e0:	639a      	str	r2, [r3, #56]	; 0x38
        file_ptr -> fx_file_current_file_offset =       byte_offset;
 800e2e2:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800e2e6:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800e2ea:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
        file_ptr -> fx_file_current_logical_offset =    (ULONG)(bytes_remaining % ((ULONG)media_ptr -> fx_media_bytes_per_sector));
 800e2ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e2f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e2f4:	2200      	movs	r2, #0
 800e2f6:	61bb      	str	r3, [r7, #24]
 800e2f8:	61fa      	str	r2, [r7, #28]
 800e2fa:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 800e2fe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e302:	f7f2 f8d7 	bl	80004b4 <__aeabi_uldivmod>
 800e306:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e30a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Release media protection.  */
    FX_UNPROTECT
 800e30c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e310:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800e314:	4618      	mov	r0, r3
 800e316:	f009 fb6f 	bl	80179f8 <_tx_mutex_put>

    /* Seek is complete, return successful status.  */
    return(FX_SUCCESS);
 800e31a:	2300      	movs	r3, #0
}
 800e31c:	4618      	mov	r0, r3
 800e31e:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800e322:	46bd      	mov	sp, r7
 800e324:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800e328 <_fx_file_open>:
/*                                            consecutive detect,         */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_file_open(FX_MEDIA *media_ptr, FX_FILE *file_ptr, CHAR *file_name, UINT open_type)
{
 800e328:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e32c:	b0e8      	sub	sp, #416	; 0x1a0
 800e32e:	af02      	add	r7, sp, #8
 800e330:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
 800e334:	f8c7 1148 	str.w	r1, [r7, #328]	; 0x148
 800e338:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
 800e33c:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
UINT     status;
#ifndef FX_DISABLE_CONSECUTIVE_DETECT
UINT     leading_consecutive;
#endif /* FX_DISABLE_CONSECUTIVE_DETECT */
ULONG    cluster;
ULONG    contents = 0;
 800e340:	2300      	movs	r3, #0
 800e342:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
#endif /* FX_DISABLE_FAST_OPEN */
UCHAR    not_a_file_attr;


    /* Check the media to make sure it is open.  */
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 800e346:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800e34a:	681a      	ldr	r2, [r3, #0]
 800e34c:	4bd9      	ldr	r3, [pc, #868]	; (800e6b4 <_fx_file_open+0x38c>)
 800e34e:	429a      	cmp	r2, r3
 800e350:	d002      	beq.n	800e358 <_fx_file_open+0x30>
    {

        /* Return the media not opened error.  */
        return(FX_MEDIA_NOT_OPEN);
 800e352:	2311      	movs	r3, #17
 800e354:	f000 bcc4 	b.w	800ece0 <_fx_file_open+0x9b8>
    }

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_file_opens++;
 800e358:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800e35c:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800e360:	1c5a      	adds	r2, r3, #1
 800e362:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800e366:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
#endif

    /* Clear the notify function. */
    file_ptr -> fx_file_write_notify = FX_NULL;
 800e36a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800e36e:	2300      	movs	r3, #0
 800e370:	f8c2 31dc 	str.w	r3, [r2, #476]	; 0x1dc
        fat_last        = FX_LAST_CLUSTER_exFAT;
        not_a_file_attr = FX_DIRECTORY;
    }
    else if (media_ptr -> fx_media_FAT_type == FX_FAT32)
#else
    if (media_ptr -> fx_media_32_bit_FAT)
 800e374:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800e378:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d006      	beq.n	800e38c <_fx_file_open+0x64>
#endif /* FX_ENABLE_EXFAT */
    {
        fat_last        = FX_LAST_CLUSTER_1_32;
 800e37e:	4bce      	ldr	r3, [pc, #824]	; (800e6b8 <_fx_file_open+0x390>)
 800e380:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
        not_a_file_attr = FX_DIRECTORY | FX_VOLUME;
 800e384:	2318      	movs	r3, #24
 800e386:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
 800e38a:	e006      	b.n	800e39a <_fx_file_open+0x72>
    }
    else
    {
        fat_last        = FX_LAST_CLUSTER_1;
 800e38c:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 800e390:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
        not_a_file_attr = FX_DIRECTORY | FX_VOLUME;
 800e394:	2318      	movs	r3, #24
 800e396:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
    }

#ifndef FX_DISABLE_FAST_OPEN
    /* Determine if a fast open is selected.  */
    if (open_type == FX_OPEN_FOR_READ_FAST)
 800e39a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800e39e:	2b02      	cmp	r3, #2
 800e3a0:	d106      	bne.n	800e3b0 <_fx_file_open+0x88>
    {

        /* Yes, convert the open type to a standard read.  */
        open_type =  FX_OPEN_FOR_READ;
 800e3a2:	2300      	movs	r3, #0
 800e3a4:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140

        /* Set the open fast flag.  */
        fast_open =  FX_TRUE;
 800e3a8:	2301      	movs	r3, #1
 800e3aa:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 800e3ae:	e002      	b.n	800e3b6 <_fx_file_open+0x8e>
    }
    else
    {

        /* A fast open is not selected, set the flag to false.  */
        fast_open =  FX_FALSE;
 800e3b0:	2300      	movs	r3, #0
 800e3b2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_FILE_OPEN, media_ptr, file_ptr, file_name, open_type, FX_TRACE_FILE_EVENTS, 0, 0)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 800e3b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800e3ba:	681a      	ldr	r2, [r3, #0]
 800e3bc:	4bbd      	ldr	r3, [pc, #756]	; (800e6b4 <_fx_file_open+0x38c>)
 800e3be:	429a      	cmp	r2, r3
 800e3c0:	d002      	beq.n	800e3c8 <_fx_file_open+0xa0>
 800e3c2:	2311      	movs	r3, #17
 800e3c4:	f000 bc8c 	b.w	800ece0 <_fx_file_open+0x9b8>
 800e3c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800e3cc:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800e3d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800e3d4:	4618      	mov	r0, r3
 800e3d6:	f009 f897 	bl	8017508 <_tx_mutex_get>
 800e3da:	4603      	mov	r3, r0
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d002      	beq.n	800e3e6 <_fx_file_open+0xbe>
 800e3e0:	2311      	movs	r3, #17
 800e3e2:	f000 bc7d 	b.w	800ece0 <_fx_file_open+0x9b8>

    /* Setup file name pointer.  */
    file_ptr -> fx_file_dir_entry.fx_dir_entry_name =  file_ptr -> fx_file_name_buffer;
 800e3e6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800e3ea:	f103 02d8 	add.w	r2, r3, #216	; 0xd8
 800e3ee:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800e3f2:	669a      	str	r2, [r3, #104]	; 0x68
    file_ptr -> fx_file_dir_entry.fx_dir_entry_short_name[0] =  0;
 800e3f4:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800e3f8:	2300      	movs	r3, #0
 800e3fa:	f882 306c 	strb.w	r3, [r2, #108]	; 0x6c

    /* Search the system for the supplied file name.  */
    status =  _fx_directory_search(media_ptr, file_name, &(file_ptr -> fx_file_dir_entry), FX_NULL, FX_NULL);
 800e3fe:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800e402:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800e406:	2300      	movs	r3, #0
 800e408:	9300      	str	r3, [sp, #0]
 800e40a:	2300      	movs	r3, #0
 800e40c:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800e410:	f8d7 014c 	ldr.w	r0, [r7, #332]	; 0x14c
 800e414:	f7fe fd6e 	bl	800cef4 <_fx_directory_search>
 800e418:	f8c7 0160 	str.w	r0, [r7, #352]	; 0x160

    /* Determine if the search was successful.  */
    if (status != FX_SUCCESS)
 800e41c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800e420:	2b00      	cmp	r3, #0
 800e422:	d00a      	beq.n	800e43a <_fx_file_open+0x112>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 800e424:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800e428:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800e42c:	4618      	mov	r0, r3
 800e42e:	f009 fae3 	bl	80179f8 <_tx_mutex_put>

        /* Return the error code.  */
        return(status);
 800e432:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800e436:	f000 bc53 	b.w	800ece0 <_fx_file_open+0x9b8>
    }

    /* Check to make sure the found entry is a file.  */
    if (file_ptr -> fx_file_dir_entry.fx_dir_entry_attributes & not_a_file_attr)
 800e43a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800e43e:	f893 2084 	ldrb.w	r2, [r3, #132]	; 0x84
 800e442:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 800e446:	4013      	ands	r3, r2
 800e448:	b2db      	uxtb	r3, r3
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d009      	beq.n	800e462 <_fx_file_open+0x13a>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 800e44e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800e452:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800e456:	4618      	mov	r0, r3
 800e458:	f009 face 	bl	80179f8 <_tx_mutex_put>

        /* Return the not a file error code.  */
        return(FX_NOT_A_FILE);
 800e45c:	2305      	movs	r3, #5
 800e45e:	f000 bc3f 	b.w	800ece0 <_fx_file_open+0x9b8>
            open_count--;
        }
    }
    else
#else
    if (open_type == FX_OPEN_FOR_WRITE)
 800e462:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800e466:	2b01      	cmp	r3, #1
 800e468:	d160      	bne.n	800e52c <_fx_file_open+0x204>
    {

        /* A open for write request is present, check the file attributes
           and the list of open files for any other open instance of
           this file.  */
        if (media_ptr -> fx_media_driver_write_protect)
 800e46a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800e46e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800e472:	2b00      	cmp	r3, #0
 800e474:	d009      	beq.n	800e48a <_fx_file_open+0x162>
        {

            /* Release media protection.  */
            FX_UNPROTECT
 800e476:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800e47a:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800e47e:	4618      	mov	r0, r3
 800e480:	f009 faba 	bl	80179f8 <_tx_mutex_put>

            /* Return write protect error.  */
            return(FX_WRITE_PROTECT);
 800e484:	2323      	movs	r3, #35	; 0x23
 800e486:	f000 bc2b 	b.w	800ece0 <_fx_file_open+0x9b8>
        }

        if (file_ptr -> fx_file_dir_entry.fx_dir_entry_attributes & (UCHAR)(FX_READ_ONLY))
 800e48a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800e48e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800e492:	f003 0301 	and.w	r3, r3, #1
 800e496:	2b00      	cmp	r3, #0
 800e498:	d009      	beq.n	800e4ae <_fx_file_open+0x186>
        {

            /* Release media protection.  */
            FX_UNPROTECT
 800e49a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800e49e:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800e4a2:	4618      	mov	r0, r3
 800e4a4:	f009 faa8 	bl	80179f8 <_tx_mutex_put>

            /* Return the not a file error code.  */
            return(FX_ACCESS_ERROR);
 800e4a8:	2306      	movs	r3, #6
 800e4aa:	f000 bc19 	b.w	800ece0 <_fx_file_open+0x9b8>
        }

        /* Also search the opened files to see if this file is currently
           opened.  */
        open_count =  media_ptr -> fx_media_opened_file_count;
 800e4ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800e4b2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800e4b6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
        search_ptr =  media_ptr -> fx_media_opened_file_list;
 800e4ba:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800e4be:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800e4c2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
        while (open_count)
 800e4c6:	e02d      	b.n	800e524 <_fx_file_open+0x1fc>
                (search_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset ==
                 file_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset))
#else
            /* Look at each opened file to see if the same file is already opened
               for writing.  */
            if ((search_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector ==
 800e4c8:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800e4cc:	e9d3 012a 	ldrd	r0, r1, [r3, #168]	; 0xa8
                 file_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector) &&
 800e4d0:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800e4d4:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	; 0xa8
            if ((search_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector ==
 800e4d8:	4299      	cmp	r1, r3
 800e4da:	bf08      	it	eq
 800e4dc:	4290      	cmpeq	r0, r2
 800e4de:	d117      	bne.n	800e510 <_fx_file_open+0x1e8>
                (search_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset ==
 800e4e0:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800e4e4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
                 file_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset) &&
 800e4e8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800e4ec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
                 file_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector) &&
 800e4f0:	429a      	cmp	r2, r3
 800e4f2:	d10d      	bne.n	800e510 <_fx_file_open+0x1e8>
                (search_ptr -> fx_file_open_mode == FX_OPEN_FOR_WRITE))
 800e4f4:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800e4f8:	689b      	ldr	r3, [r3, #8]
                 file_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset) &&
 800e4fa:	2b01      	cmp	r3, #1
 800e4fc:	d108      	bne.n	800e510 <_fx_file_open+0x1e8>
#endif
            {

                /* Release media protection.  */
                FX_UNPROTECT
 800e4fe:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800e502:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800e506:	4618      	mov	r0, r3
 800e508:	f009 fa76 	bl	80179f8 <_tx_mutex_put>

                /* The file is currently open.  */
                return(FX_ACCESS_ERROR);
 800e50c:	2306      	movs	r3, #6
 800e50e:	e3e7      	b.n	800ece0 <_fx_file_open+0x9b8>
            }

            /* Adjust the pointer and decrement the search count.  */
            search_ptr =  search_ptr -> fx_file_opened_next;
 800e510:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800e514:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e516:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
            open_count--;
 800e51a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800e51e:	3b01      	subs	r3, #1
 800e520:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
        while (open_count)
 800e524:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d1cd      	bne.n	800e4c8 <_fx_file_open+0x1a0>
        }
    }

    /* At this point, we are ready to walk list of clusters to setup the
       initial condition of this file as well as to verify its integrity.  */
    cluster =           file_ptr -> fx_file_dir_entry.fx_dir_entry_cluster;
 800e52c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800e530:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800e534:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
    bytes_remaining =   file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size;
 800e538:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800e53c:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 800e540:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
    bytes_per_cluster = ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 800e544:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800e548:	6a9a      	ldr	r2, [r3, #40]	; 0x28
        ((ULONG)media_ptr -> fx_media_sectors_per_cluster);
 800e54a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800e54e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    bytes_per_cluster = ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 800e550:	fb02 f303 	mul.w	r3, r2, r3
 800e554:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
    file_ptr -> fx_file_current_physical_cluster =  0;
 800e558:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800e55c:	2300      	movs	r3, #0
 800e55e:	6213      	str	r3, [r2, #32]

    /* Check for invalid value.  */
    if (bytes_per_cluster == 0)
 800e560:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800e564:	2b00      	cmp	r3, #0
 800e566:	d108      	bne.n	800e57a <_fx_file_open+0x252>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 800e568:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800e56c:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800e570:	4618      	mov	r0, r3
 800e572:	f009 fa41 	bl	80179f8 <_tx_mutex_put>

        /* Invalid media, return error.  */
        return(FX_MEDIA_INVALID);
 800e576:	2302      	movs	r3, #2
 800e578:	e3b2      	b.n	800ece0 <_fx_file_open+0x9b8>
    }

    last_cluster =      0;
 800e57a:	2300      	movs	r3, #0
 800e57c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
    cluster_count =     0;
 800e580:	2300      	movs	r3, #0
 800e582:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180

#ifndef FX_DISABLE_CONSECUTIVE_DETECT
    leading_consecutive = 1;
 800e586:	2301      	movs	r3, #1
 800e588:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
#endif /* FX_DISABLE_CONSECUTIVE_DETECT */
    file_ptr -> fx_file_consecutive_cluster = 1;
 800e58c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800e590:	2301      	movs	r3, #1
 800e592:	6193      	str	r3, [r2, #24]
#ifndef FX_DISABLE_FAST_OPEN

    /* Determine if the file is being open for reading with the fast option.  */
    if (fast_open)
 800e594:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800e598:	2b00      	cmp	r3, #0
 800e59a:	f000 8103 	beq.w	800e7a4 <_fx_file_open+0x47c>
    {

        /* Calculate the bytes available.  */
        bytes_available =  ((bytes_remaining + bytes_per_cluster - 1) / bytes_per_cluster) * bytes_per_cluster;
 800e59e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800e5a2:	2200      	movs	r2, #0
 800e5a4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800e5a8:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800e5ac:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800e5b0:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 800e5b4:	4621      	mov	r1, r4
 800e5b6:	eb11 0a02 	adds.w	sl, r1, r2
 800e5ba:	4629      	mov	r1, r5
 800e5bc:	eb41 0b03 	adc.w	fp, r1, r3
 800e5c0:	f11a 33ff 	adds.w	r3, sl, #4294967295	; 0xffffffff
 800e5c4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800e5c8:	f14b 33ff 	adc.w	r3, fp, #4294967295	; 0xffffffff
 800e5cc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800e5d0:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800e5d4:	2200      	movs	r2, #0
 800e5d6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800e5da:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 800e5de:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 800e5e2:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 800e5e6:	f7f1 ff65 	bl	80004b4 <__aeabi_uldivmod>
 800e5ea:	4602      	mov	r2, r0
 800e5ec:	460b      	mov	r3, r1
 800e5ee:	4610      	mov	r0, r2
 800e5f0:	4619      	mov	r1, r3
 800e5f2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800e5f6:	2200      	movs	r2, #0
 800e5f8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800e5fc:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 800e600:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 800e604:	4623      	mov	r3, r4
 800e606:	fb03 f201 	mul.w	r2, r3, r1
 800e60a:	462b      	mov	r3, r5
 800e60c:	fb00 f303 	mul.w	r3, r0, r3
 800e610:	4413      	add	r3, r2
 800e612:	4622      	mov	r2, r4
 800e614:	fba0 8902 	umull	r8, r9, r0, r2
 800e618:	444b      	add	r3, r9
 800e61a:	4699      	mov	r9, r3
 800e61c:	e9c7 895e 	strd	r8, r9, [r7, #376]	; 0x178
 800e620:	e9c7 895e 	strd	r8, r9, [r7, #376]	; 0x178
 800e624:	e12f      	b.n	800e886 <_fx_file_open+0x55e>
            /* Follow the link of FAT entries.  */
            while ((cluster >= FX_FAT_ENTRY_START) && (cluster < media_ptr -> fx_media_fat_reserved))
            {

                /* Increment the number of clusters.  */
                cluster_count++;
 800e626:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800e62a:	3301      	adds	r3, #1
 800e62c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180

                /* Read the current cluster entry from the FAT.  */
                status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &contents);
 800e630:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 800e634:	461a      	mov	r2, r3
 800e636:	f8d7 1190 	ldr.w	r1, [r7, #400]	; 0x190
 800e63a:	f8d7 014c 	ldr.w	r0, [r7, #332]	; 0x14c
 800e63e:	f003 fdbf 	bl	80121c0 <_fx_utility_FAT_entry_read>
 800e642:	f8c7 0160 	str.w	r0, [r7, #352]	; 0x160

                /* Check the return value.  */
                if (status != FX_SUCCESS)
 800e646:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d009      	beq.n	800e662 <_fx_file_open+0x33a>
                {

                    /* Release media protection.  */
                    FX_UNPROTECT
 800e64e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800e652:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800e656:	4618      	mov	r0, r3
 800e658:	f009 f9ce 	bl	80179f8 <_tx_mutex_put>

                    /* Return the error status.  */
                    return(status);
 800e65c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800e660:	e33e      	b.n	800ece0 <_fx_file_open+0x9b8>
                }

                /* Determine if the cluster is invalid (points to itself) or the count exceeds the total number of clusters.  */
                if ((cluster == contents) || (cluster_count > media_ptr -> fx_media_total_clusters))
 800e662:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 800e666:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800e66a:	4293      	cmp	r3, r2
 800e66c:	d006      	beq.n	800e67c <_fx_file_open+0x354>
 800e66e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800e672:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e674:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800e678:	4293      	cmp	r3, r2
 800e67a:	d908      	bls.n	800e68e <_fx_file_open+0x366>
                {

                    /* Release media protection.  */
                    FX_UNPROTECT
 800e67c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800e680:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800e684:	4618      	mov	r0, r3
 800e686:	f009 f9b7 	bl	80179f8 <_tx_mutex_put>

                    /* Return the bad status.  */
                    return(FX_FAT_READ_ERROR);
 800e68a:	2303      	movs	r3, #3
 800e68c:	e328      	b.n	800ece0 <_fx_file_open+0x9b8>
                }

#ifndef FX_DISABLE_CONSECUTIVE_DETECT

                /* Check if present and next clusters are consecutive */
                if (cluster + 1 == contents)
 800e68e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800e692:	1c5a      	adds	r2, r3, #1
 800e694:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800e698:	429a      	cmp	r2, r3
 800e69a:	d10f      	bne.n	800e6bc <_fx_file_open+0x394>
                {
            
                    /* Determine if clusters are consecutive so far.  */
                    if (leading_consecutive)
 800e69c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d00e      	beq.n	800e6c2 <_fx_file_open+0x39a>
                    {

                        /* Yes, increment the number of leading consecutive clusters.  */
                        file_ptr -> fx_file_consecutive_cluster++;
 800e6a4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800e6a8:	699b      	ldr	r3, [r3, #24]
 800e6aa:	1c5a      	adds	r2, r3, #1
 800e6ac:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800e6b0:	619a      	str	r2, [r3, #24]
 800e6b2:	e006      	b.n	800e6c2 <_fx_file_open+0x39a>
 800e6b4:	4d454449 	.word	0x4d454449
 800e6b8:	0ffffff8 	.word	0x0ffffff8
                }
                else
                {

                    /* The clusters are no longer consecutive, clear the consecutive flag.  */
                    leading_consecutive = 0;
 800e6bc:	2300      	movs	r3, #0
 800e6be:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
                }
#endif /* FX_DISABLE_CONSECUTIVE_DETECT */

                /* Save the last valid cluster.  */
                last_cluster =  cluster;
 800e6c2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800e6c6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184

                /* Setup for the next cluster.  */
                cluster =  contents;
 800e6ca:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800e6ce:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190

                /* Determine if this is the last written cluster.  We need to remember this
                   for open for writing.  */
                if (bytes_remaining > bytes_per_cluster)
 800e6d2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800e6d6:	2200      	movs	r2, #0
 800e6d8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800e6dc:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 800e6e0:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800e6e4:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 800e6e8:	4641      	mov	r1, r8
 800e6ea:	4291      	cmp	r1, r2
 800e6ec:	4649      	mov	r1, r9
 800e6ee:	eb71 0303 	sbcs.w	r3, r1, r3
 800e6f2:	d216      	bcs.n	800e722 <_fx_file_open+0x3fa>
                {

                    /* Still more written clusters, just decrement the counter.  */
                    bytes_remaining =  bytes_remaining - bytes_per_cluster;
 800e6f4:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800e6f8:	2200      	movs	r2, #0
 800e6fa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800e6fe:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800e702:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800e706:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 800e70a:	4641      	mov	r1, r8
 800e70c:	1a51      	subs	r1, r2, r1
 800e70e:	6039      	str	r1, [r7, #0]
 800e710:	4649      	mov	r1, r9
 800e712:	eb63 0301 	sbc.w	r3, r3, r1
 800e716:	607b      	str	r3, [r7, #4]
 800e718:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e71c:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
 800e720:	e040      	b.n	800e7a4 <_fx_file_open+0x47c>
                }
                else if (!file_ptr -> fx_file_current_physical_cluster)
 800e722:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800e726:	6a1b      	ldr	r3, [r3, #32]
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d13b      	bne.n	800e7a4 <_fx_file_open+0x47c>
                {

                    /* Remember this cluster number.  */
                    file_ptr -> fx_file_current_physical_cluster =  last_cluster;
 800e72c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800e730:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800e734:	6213      	str	r3, [r2, #32]

                    /* Remember the relative cluster.  */
                    file_ptr -> fx_file_current_relative_cluster =  cluster_count - 1;
 800e736:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800e73a:	1e5a      	subs	r2, r3, #1
 800e73c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800e740:	635a      	str	r2, [r3, #52]	; 0x34

                    /* If the remaining bytes exactly fits the cluster size, check for
                       a possible adjustment to the next cluster.  */
                    if ((bytes_remaining == bytes_per_cluster) &&
 800e742:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800e746:	2200      	movs	r2, #0
 800e748:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800e74c:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800e750:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800e754:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 800e758:	4641      	mov	r1, r8
 800e75a:	4648      	mov	r0, r9
 800e75c:	4283      	cmp	r3, r0
 800e75e:	bf08      	it	eq
 800e760:	428a      	cmpeq	r2, r1
 800e762:	d11f      	bne.n	800e7a4 <_fx_file_open+0x47c>
 800e764:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800e768:	2b01      	cmp	r3, #1
 800e76a:	d91b      	bls.n	800e7a4 <_fx_file_open+0x47c>
                        (cluster >= FX_FAT_ENTRY_START) && (cluster < media_ptr -> fx_media_fat_reserved))
 800e76c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800e770:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800e774:	f8d3 24a8 	ldr.w	r2, [r3, #1192]	; 0x4a8
 800e778:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800e77c:	4293      	cmp	r3, r2
 800e77e:	d211      	bcs.n	800e7a4 <_fx_file_open+0x47c>
                    {

                        /* We need to position to next allocated cluster.  */
                        file_ptr -> fx_file_current_physical_cluster =  cluster;
 800e780:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800e784:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800e788:	6213      	str	r3, [r2, #32]
                        file_ptr -> fx_file_current_relative_cluster++;
 800e78a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800e78e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e790:	1c5a      	adds	r2, r3, #1
 800e792:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800e796:	635a      	str	r2, [r3, #52]	; 0x34

                        /* Clear the remaining bytes.  */
                        bytes_remaining =  0;
 800e798:	f04f 0200 	mov.w	r2, #0
 800e79c:	f04f 0300 	mov.w	r3, #0
 800e7a0:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
            while ((cluster >= FX_FAT_ENTRY_START) && (cluster < media_ptr -> fx_media_fat_reserved))
 800e7a4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800e7a8:	2b01      	cmp	r3, #1
 800e7aa:	d90a      	bls.n	800e7c2 <_fx_file_open+0x49a>
 800e7ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800e7b0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800e7b4:	f8d3 24a8 	ldr.w	r2, [r3, #1192]	; 0x4a8
 800e7b8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800e7bc:	4293      	cmp	r3, r2
 800e7be:	f4ff af32 	bcc.w	800e626 <_fx_file_open+0x2fe>
                }
            }

            /* Determine if the number of clusters is large enough to support the
               specified file size.  */
            bytes_available =  ((ULONG64)media_ptr -> fx_media_bytes_per_sector) *
 800e7c2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800e7c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7c8:	2200      	movs	r2, #0
 800e7ca:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800e7ce:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
                ((ULONG64)media_ptr -> fx_media_sectors_per_cluster) *
 800e7d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800e7d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e7d8:	2200      	movs	r2, #0
 800e7da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800e7de:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
            bytes_available =  ((ULONG64)media_ptr -> fx_media_bytes_per_sector) *
 800e7e2:	e9d7 8938 	ldrd	r8, r9, [r7, #224]	; 0xe0
 800e7e6:	464b      	mov	r3, r9
 800e7e8:	e9d7 ab36 	ldrd	sl, fp, [r7, #216]	; 0xd8
 800e7ec:	4652      	mov	r2, sl
 800e7ee:	fb02 f203 	mul.w	r2, r2, r3
 800e7f2:	465b      	mov	r3, fp
 800e7f4:	4641      	mov	r1, r8
 800e7f6:	fb01 f303 	mul.w	r3, r1, r3
 800e7fa:	4413      	add	r3, r2
 800e7fc:	4642      	mov	r2, r8
 800e7fe:	4651      	mov	r1, sl
 800e800:	fba2 4501 	umull	r4, r5, r2, r1
 800e804:	442b      	add	r3, r5
 800e806:	461d      	mov	r5, r3
                ((ULONG64)cluster_count);
 800e808:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800e80c:	2200      	movs	r2, #0
 800e80e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e812:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
            bytes_available =  ((ULONG64)media_ptr -> fx_media_bytes_per_sector) *
 800e816:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800e81a:	4603      	mov	r3, r0
 800e81c:	fb03 f205 	mul.w	r2, r3, r5
 800e820:	460b      	mov	r3, r1
 800e822:	fb04 f303 	mul.w	r3, r4, r3
 800e826:	4413      	add	r3, r2
 800e828:	4602      	mov	r2, r0
 800e82a:	fba4 1202 	umull	r1, r2, r4, r2
 800e82e:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 800e832:	460a      	mov	r2, r1
 800e834:	f8c7 2120 	str.w	r2, [r7, #288]	; 0x120
 800e838:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800e83c:	4413      	add	r3, r2
 800e83e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800e842:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 800e846:	e9c7 345e 	strd	r3, r4, [r7, #376]	; 0x178
 800e84a:	e9c7 345e 	strd	r3, r4, [r7, #376]	; 0x178

            /* Check the bytes available in the cluster chain against the directory entry file size.  */
            if ((bytes_available < file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size) ||
 800e84e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800e852:	e9d3 0128 	ldrd	r0, r1, [r3, #160]	; 0xa0
 800e856:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 800e85a:	4282      	cmp	r2, r0
 800e85c:	418b      	sbcs	r3, r1
 800e85e:	d309      	bcc.n	800e874 <_fx_file_open+0x54c>
 800e860:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800e864:	2b00      	cmp	r3, #0
 800e866:	d00e      	beq.n	800e886 <_fx_file_open+0x55e>
                ((cluster_count) && (contents < fat_last)))
 800e868:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 800e86c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800e870:	4293      	cmp	r3, r2
 800e872:	d908      	bls.n	800e886 <_fx_file_open+0x55e>
            {
                /* File is corrupt, release media protection.  */
                FX_UNPROTECT
 800e874:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800e878:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800e87c:	4618      	mov	r0, r3
 800e87e:	f009 f8bb 	bl	80179f8 <_tx_mutex_put>

                /* Return a corrupt file error status.  */
                return(FX_FILE_CORRUPT);
 800e882:	2308      	movs	r3, #8
 800e884:	e22c      	b.n	800ece0 <_fx_file_open+0x9b8>
#endif /* FX_ENABLE_EXFAT */
    }

    /* The file is okay, populate the file control block and complete the
       file open process.  */
    file_ptr -> fx_file_id =                        FX_FILE_ID;
 800e886:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800e88a:	4baa      	ldr	r3, [pc, #680]	; (800eb34 <_fx_file_open+0x80c>)
 800e88c:	6013      	str	r3, [r2, #0]
    file_ptr -> fx_file_name =                      file_ptr -> fx_file_name_buffer;
 800e88e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800e892:	f103 02d8 	add.w	r2, r3, #216	; 0xd8
 800e896:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800e89a:	605a      	str	r2, [r3, #4]
    file_ptr -> fx_file_media_ptr =                 media_ptr;
 800e89c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800e8a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800e8a4:	6593      	str	r3, [r2, #88]	; 0x58
    file_ptr -> fx_file_open_mode =                 open_type;
 800e8a6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800e8aa:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800e8ae:	6093      	str	r3, [r2, #8]
    file_ptr -> fx_file_modified =                  FX_FALSE;
 800e8b0:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800e8b4:	2300      	movs	r3, #0
 800e8b6:	7313      	strb	r3, [r2, #12]
    file_ptr -> fx_file_total_clusters =            cluster_count;
 800e8b8:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800e8bc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800e8c0:	6113      	str	r3, [r2, #16]
    file_ptr -> fx_file_first_physical_cluster =    file_ptr -> fx_file_dir_entry.fx_dir_entry_cluster;
 800e8c2:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800e8c6:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800e8ca:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800e8ce:	615a      	str	r2, [r3, #20]
    file_ptr -> fx_file_last_physical_cluster =     last_cluster;
 800e8d0:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800e8d4:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800e8d8:	61d3      	str	r3, [r2, #28]
    file_ptr -> fx_file_current_file_size =         file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size;
 800e8da:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800e8de:	e9d3 0128 	ldrd	r0, r1, [r3, #160]	; 0xa0
 800e8e2:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800e8e6:	e9c3 0112 	strd	r0, r1, [r3, #72]	; 0x48
    file_ptr -> fx_file_current_available_size =    bytes_available;
 800e8ea:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 800e8ee:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 800e8f2:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    file_ptr -> fx_file_disable_burst_cache =       FX_FALSE;
 800e8f6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800e8fa:	2300      	movs	r3, #0
 800e8fc:	f8c2 31d8 	str.w	r3, [r2, #472]	; 0x1d8

    /* Set the current settings based on how the file was opened.  */
    if (open_type == FX_OPEN_FOR_READ)
 800e900:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800e904:	2b00      	cmp	r3, #0
 800e906:	d163      	bne.n	800e9d0 <_fx_file_open+0x6a8>
    {

        /* Position the pointers to the beginning of the file.  */
        file_ptr -> fx_file_current_physical_cluster =  file_ptr -> fx_file_first_physical_cluster;
 800e908:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800e90c:	695a      	ldr	r2, [r3, #20]
 800e90e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800e912:	621a      	str	r2, [r3, #32]
        file_ptr -> fx_file_current_relative_cluster =  0;
 800e914:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800e918:	2200      	movs	r2, #0
 800e91a:	635a      	str	r2, [r3, #52]	; 0x34
        file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800e91c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800e920:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e922:	2200      	movs	r2, #0
 800e924:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e928:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
            (((ULONG64)(file_ptr -> fx_file_first_physical_cluster - FX_FAT_ENTRY_START)) *
 800e92c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800e930:	695b      	ldr	r3, [r3, #20]
 800e932:	3b02      	subs	r3, #2
 800e934:	2200      	movs	r2, #0
 800e936:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e93a:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
             ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 800e93e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800e942:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e944:	2200      	movs	r2, #0
 800e946:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e94a:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
            (((ULONG64)(file_ptr -> fx_file_first_physical_cluster - FX_FAT_ENTRY_START)) *
 800e94e:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 800e952:	462b      	mov	r3, r5
 800e954:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800e958:	4642      	mov	r2, r8
 800e95a:	fb02 f203 	mul.w	r2, r2, r3
 800e95e:	464b      	mov	r3, r9
 800e960:	4621      	mov	r1, r4
 800e962:	fb01 f303 	mul.w	r3, r1, r3
 800e966:	4413      	add	r3, r2
 800e968:	4622      	mov	r2, r4
 800e96a:	4641      	mov	r1, r8
 800e96c:	fba2 1201 	umull	r1, r2, r2, r1
 800e970:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 800e974:	460a      	mov	r2, r1
 800e976:	f8c7 2138 	str.w	r2, [r7, #312]	; 0x138
 800e97a:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 800e97e:	4413      	add	r3, r2
 800e980:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
        file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800e984:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 800e988:	4623      	mov	r3, r4
 800e98a:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 800e98e:	4602      	mov	r2, r0
 800e990:	189b      	adds	r3, r3, r2
 800e992:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e996:	460b      	mov	r3, r1
 800e998:	462a      	mov	r2, r5
 800e99a:	eb42 0303 	adc.w	r3, r2, r3
 800e99e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e9a2:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800e9a6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800e9aa:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
        file_ptr -> fx_file_current_relative_sector =   0;
 800e9ae:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800e9b2:	2200      	movs	r2, #0
 800e9b4:	639a      	str	r2, [r3, #56]	; 0x38
        file_ptr -> fx_file_current_logical_offset =    0;
 800e9b6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800e9ba:	2200      	movs	r2, #0
 800e9bc:	631a      	str	r2, [r3, #48]	; 0x30
        file_ptr -> fx_file_current_file_offset =       0;
 800e9be:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 800e9c2:	f04f 0200 	mov.w	r2, #0
 800e9c6:	f04f 0300 	mov.w	r3, #0
 800e9ca:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
 800e9ce:	e140      	b.n	800ec52 <_fx_file_open+0x92a>
    {

        /* Open for writing - position the pointers to the end of the file.  */

        /* Determine if the remaining bytes fit exactly into the cluster size.  */
        if (bytes_remaining == bytes_per_cluster)
 800e9d0:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800e9d4:	2200      	movs	r2, #0
 800e9d6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800e9da:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800e9de:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800e9e2:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 800e9e6:	4621      	mov	r1, r4
 800e9e8:	4628      	mov	r0, r5
 800e9ea:	4283      	cmp	r3, r0
 800e9ec:	bf08      	it	eq
 800e9ee:	428a      	cmpeq	r2, r1
 800e9f0:	f040 80a2 	bne.w	800eb38 <_fx_file_open+0x810>
        {

            /* Position to the end of the cluster.  */
            file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800e9f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800e9f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e9fa:	2200      	movs	r2, #0
 800e9fc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800ea00:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
                (((ULONG64)file_ptr -> fx_file_current_physical_cluster - FX_FAT_ENTRY_START) *
 800ea04:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800ea08:	6a1b      	ldr	r3, [r3, #32]
 800ea0a:	2200      	movs	r2, #0
 800ea0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800ea10:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800ea14:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800ea18:	460b      	mov	r3, r1
 800ea1a:	3b02      	subs	r3, #2
 800ea1c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ea20:	4613      	mov	r3, r2
 800ea22:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
 800ea26:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
                 ((ULONG)media_ptr -> fx_media_sectors_per_cluster)) +
 800ea2a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800ea2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ea30:	2200      	movs	r2, #0
 800ea32:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ea36:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
                (((ULONG64)file_ptr -> fx_file_current_physical_cluster - FX_FAT_ENTRY_START) *
 800ea3a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800ea3e:	462b      	mov	r3, r5
 800ea40:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800ea44:	4642      	mov	r2, r8
 800ea46:	fb02 f203 	mul.w	r2, r2, r3
 800ea4a:	464b      	mov	r3, r9
 800ea4c:	4621      	mov	r1, r4
 800ea4e:	fb01 f303 	mul.w	r3, r1, r3
 800ea52:	4413      	add	r3, r2
 800ea54:	4622      	mov	r2, r4
 800ea56:	4641      	mov	r1, r8
 800ea58:	fba2 1201 	umull	r1, r2, r2, r1
 800ea5c:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 800ea60:	460a      	mov	r2, r1
 800ea62:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
 800ea66:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 800ea6a:	4413      	add	r3, r2
 800ea6c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
            file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800ea70:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 800ea74:	4623      	mov	r3, r4
 800ea76:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 800ea7a:	4602      	mov	r2, r0
 800ea7c:	189b      	adds	r3, r3, r2
 800ea7e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ea82:	460b      	mov	r3, r1
 800ea84:	462a      	mov	r2, r5
 800ea86:	eb42 0303 	adc.w	r3, r2, r3
 800ea8a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                ((ULONG)(((bytes_remaining - 1) / (ULONG)media_ptr -> fx_media_bytes_per_sector)));
 800ea8e:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800ea92:	1e51      	subs	r1, r2, #1
 800ea94:	67b9      	str	r1, [r7, #120]	; 0x78
 800ea96:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
 800ea9a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ea9c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800eaa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eaa2:	2200      	movs	r2, #0
 800eaa4:	673b      	str	r3, [r7, #112]	; 0x70
 800eaa6:	677a      	str	r2, [r7, #116]	; 0x74
 800eaa8:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800eaac:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800eab0:	f7f1 fd00 	bl	80004b4 <__aeabi_uldivmod>
 800eab4:	4602      	mov	r2, r0
 800eab6:	460b      	mov	r3, r1
 800eab8:	2300      	movs	r3, #0
 800eaba:	66ba      	str	r2, [r7, #104]	; 0x68
 800eabc:	66fb      	str	r3, [r7, #108]	; 0x6c
                 ((ULONG)media_ptr -> fx_media_sectors_per_cluster)) +
 800eabe:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 800eac2:	4623      	mov	r3, r4
 800eac4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800eac8:	4602      	mov	r2, r0
 800eaca:	189b      	adds	r3, r3, r2
 800eacc:	663b      	str	r3, [r7, #96]	; 0x60
 800eace:	460b      	mov	r3, r1
 800ead0:	462a      	mov	r2, r5
 800ead2:	eb42 0303 	adc.w	r3, r2, r3
 800ead6:	667b      	str	r3, [r7, #100]	; 0x64
            file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800ead8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800eadc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800eae0:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
            file_ptr -> fx_file_current_relative_sector =   (ULONG)(((bytes_remaining - 1) / (ULONG)media_ptr -> fx_media_bytes_per_sector));
 800eae4:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800eae8:	1e51      	subs	r1, r2, #1
 800eaea:	65b9      	str	r1, [r7, #88]	; 0x58
 800eaec:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
 800eaf0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800eaf2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800eaf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eaf8:	2200      	movs	r2, #0
 800eafa:	653b      	str	r3, [r7, #80]	; 0x50
 800eafc:	657a      	str	r2, [r7, #84]	; 0x54
 800eafe:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800eb02:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800eb06:	f7f1 fcd5 	bl	80004b4 <__aeabi_uldivmod>
 800eb0a:	4602      	mov	r2, r0
 800eb0c:	460b      	mov	r3, r1
 800eb0e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800eb12:	639a      	str	r2, [r3, #56]	; 0x38
            file_ptr -> fx_file_current_file_offset =       file_ptr -> fx_file_current_file_size;
 800eb14:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800eb18:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800eb1c:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 800eb20:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
            file_ptr -> fx_file_current_logical_offset =    media_ptr -> fx_media_bytes_per_sector;
 800eb24:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800eb28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800eb2a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800eb2e:	631a      	str	r2, [r3, #48]	; 0x30
 800eb30:	e08f      	b.n	800ec52 <_fx_file_open+0x92a>
 800eb32:	bf00      	nop
 800eb34:	46494c45 	.word	0x46494c45
        }
        else
        {

            /* Position file parameters at end of last cluster allocation.  */
            file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800eb38:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800eb3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eb3e:	2200      	movs	r2, #0
 800eb40:	64bb      	str	r3, [r7, #72]	; 0x48
 800eb42:	64fa      	str	r2, [r7, #76]	; 0x4c
                (((ULONG64)file_ptr -> fx_file_current_physical_cluster - FX_FAT_ENTRY_START) *
 800eb44:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800eb48:	6a1b      	ldr	r3, [r3, #32]
 800eb4a:	2200      	movs	r2, #0
 800eb4c:	643b      	str	r3, [r7, #64]	; 0x40
 800eb4e:	647a      	str	r2, [r7, #68]	; 0x44
 800eb50:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800eb54:	460b      	mov	r3, r1
 800eb56:	3b02      	subs	r3, #2
 800eb58:	63bb      	str	r3, [r7, #56]	; 0x38
 800eb5a:	4613      	mov	r3, r2
 800eb5c:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
 800eb60:	63fb      	str	r3, [r7, #60]	; 0x3c
                 ((ULONG)media_ptr -> fx_media_sectors_per_cluster)) +
 800eb62:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800eb66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb68:	2200      	movs	r2, #0
 800eb6a:	633b      	str	r3, [r7, #48]	; 0x30
 800eb6c:	637a      	str	r2, [r7, #52]	; 0x34
                (((ULONG64)file_ptr -> fx_file_current_physical_cluster - FX_FAT_ENTRY_START) *
 800eb6e:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 800eb72:	462b      	mov	r3, r5
 800eb74:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	; 0x30
 800eb78:	4642      	mov	r2, r8
 800eb7a:	fb02 f203 	mul.w	r2, r2, r3
 800eb7e:	464b      	mov	r3, r9
 800eb80:	4621      	mov	r1, r4
 800eb82:	fb01 f303 	mul.w	r3, r1, r3
 800eb86:	4413      	add	r3, r2
 800eb88:	4622      	mov	r2, r4
 800eb8a:	4641      	mov	r1, r8
 800eb8c:	fba2 1201 	umull	r1, r2, r2, r1
 800eb90:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 800eb94:	460a      	mov	r2, r1
 800eb96:	f8c7 2128 	str.w	r2, [r7, #296]	; 0x128
 800eb9a:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800eb9e:	4413      	add	r3, r2
 800eba0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800eba4:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800eba8:	4623      	mov	r3, r4
 800ebaa:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800ebae:	4602      	mov	r2, r0
 800ebb0:	189b      	adds	r3, r3, r2
 800ebb2:	62bb      	str	r3, [r7, #40]	; 0x28
 800ebb4:	460b      	mov	r3, r1
 800ebb6:	462a      	mov	r2, r5
 800ebb8:	eb42 0303 	adc.w	r3, r2, r3
 800ebbc:	62fb      	str	r3, [r7, #44]	; 0x2c
                ((ULONG)((bytes_remaining / (ULONG)media_ptr -> fx_media_bytes_per_sector)));
 800ebbe:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800ebc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebc4:	2200      	movs	r2, #0
 800ebc6:	623b      	str	r3, [r7, #32]
 800ebc8:	627a      	str	r2, [r7, #36]	; 0x24
 800ebca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ebce:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 800ebd2:	f7f1 fc6f 	bl	80004b4 <__aeabi_uldivmod>
 800ebd6:	4602      	mov	r2, r0
 800ebd8:	460b      	mov	r3, r1
 800ebda:	2300      	movs	r3, #0
 800ebdc:	61ba      	str	r2, [r7, #24]
 800ebde:	61fb      	str	r3, [r7, #28]
                 ((ULONG)media_ptr -> fx_media_sectors_per_cluster)) +
 800ebe0:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800ebe4:	4623      	mov	r3, r4
 800ebe6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800ebea:	4602      	mov	r2, r0
 800ebec:	189b      	adds	r3, r3, r2
 800ebee:	613b      	str	r3, [r7, #16]
 800ebf0:	460b      	mov	r3, r1
 800ebf2:	462a      	mov	r2, r5
 800ebf4:	eb42 0303 	adc.w	r3, r2, r3
 800ebf8:	617b      	str	r3, [r7, #20]
            file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800ebfa:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800ebfe:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800ec02:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
            file_ptr -> fx_file_current_relative_sector =   (ULONG)((bytes_remaining / (ULONG)media_ptr -> fx_media_bytes_per_sector));
 800ec06:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800ec0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec0c:	2200      	movs	r2, #0
 800ec0e:	60bb      	str	r3, [r7, #8]
 800ec10:	60fa      	str	r2, [r7, #12]
 800ec12:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ec16:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 800ec1a:	f7f1 fc4b 	bl	80004b4 <__aeabi_uldivmod>
 800ec1e:	4602      	mov	r2, r0
 800ec20:	460b      	mov	r3, r1
 800ec22:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800ec26:	639a      	str	r2, [r3, #56]	; 0x38
            file_ptr -> fx_file_current_file_offset =       file_ptr -> fx_file_current_file_size;
 800ec28:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800ec2c:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800ec30:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 800ec34:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
            file_ptr -> fx_file_current_logical_offset =    (ULONG)bytes_remaining % ((ULONG)media_ptr -> fx_media_bytes_per_sector);
 800ec38:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800ec3c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800ec40:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800ec42:	fbb3 f1f2 	udiv	r1, r3, r2
 800ec46:	fb01 f202 	mul.w	r2, r1, r2
 800ec4a:	1a9a      	subs	r2, r3, r2
 800ec4c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800ec50:	631a      	str	r2, [r3, #48]	; 0x30
    file_ptr -> fx_file_maximum_size_used = file_ptr -> fx_file_current_file_size;
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Place newly opened file on the list of open files for
       this media.  First, check for an empty list.  */
    if (media_ptr -> fx_media_opened_file_list)
 800ec52:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800ec56:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d01f      	beq.n	800ec9e <_fx_file_open+0x976>
    {

        /* Pickup tail pointer.  */
        tail_ptr =  (media_ptr -> fx_media_opened_file_list) -> fx_file_opened_previous;
 800ec5e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800ec62:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800ec66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ec68:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158

        /* Place the new file in the list.  */
        (media_ptr -> fx_media_opened_file_list) -> fx_file_opened_previous =  file_ptr;
 800ec6c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800ec70:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800ec74:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800ec78:	661a      	str	r2, [r3, #96]	; 0x60
        tail_ptr -> fx_file_opened_next =  file_ptr;
 800ec7a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800ec7e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800ec82:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Setup this file's opened links.  */
        file_ptr -> fx_file_opened_previous =  tail_ptr;
 800ec84:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800ec88:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 800ec8c:	661a      	str	r2, [r3, #96]	; 0x60
        file_ptr -> fx_file_opened_next =      media_ptr -> fx_media_opened_file_list;
 800ec8e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800ec92:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800ec96:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800ec9a:	65da      	str	r2, [r3, #92]	; 0x5c
 800ec9c:	e00f      	b.n	800ecbe <_fx_file_open+0x996>
    }
    else
    {

        /* The opened media list is empty.  Add the media to empty list.  */
        media_ptr -> fx_media_opened_file_list =   file_ptr;
 800ec9e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800eca2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800eca6:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
        file_ptr ->  fx_file_opened_next =         file_ptr;
 800ecaa:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800ecae:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800ecb2:	65da      	str	r2, [r3, #92]	; 0x5c
        file_ptr ->  fx_file_opened_previous =     file_ptr;
 800ecb4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800ecb8:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800ecbc:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Increment the opened file counter.  */
    media_ptr -> fx_media_opened_file_count++;
 800ecbe:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800ecc2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800ecc6:	1c5a      	adds	r2, r3, #1
 800ecc8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800eccc:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

    /* Release media protection.  */
    FX_UNPROTECT
 800ecd0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800ecd4:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800ecd8:	4618      	mov	r0, r3
 800ecda:	f008 fe8d 	bl	80179f8 <_tx_mutex_put>

    /* Open is complete, return successful status.  */
    return(FX_SUCCESS);
 800ecde:	2300      	movs	r3, #0
}
 800ece0:	4618      	mov	r0, r3
 800ece2:	f507 77cc 	add.w	r7, r7, #408	; 0x198
 800ece6:	46bd      	mov	sp, r7
 800ece8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800ecec <_fx_file_read>:
/*                                            memcpy usage,               */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_file_read(FX_FILE *file_ptr, VOID *buffer_ptr, ULONG request_size, ULONG *actual_size)
{
 800ecec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ecf0:	b0aa      	sub	sp, #168	; 0xa8
 800ecf2:	af04      	add	r7, sp, #16
 800ecf4:	66f8      	str	r0, [r7, #108]	; 0x6c
 800ecf6:	66b9      	str	r1, [r7, #104]	; 0x68
 800ecf8:	667a      	str	r2, [r7, #100]	; 0x64
 800ecfa:	663b      	str	r3, [r7, #96]	; 0x60
ULONG                  trace_timestamp;
#endif


    /* First, determine if the file is still open.  */
    if (file_ptr -> fx_file_id != FX_FILE_ID)
 800ecfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ecfe:	681a      	ldr	r2, [r3, #0]
 800ed00:	4b9d      	ldr	r3, [pc, #628]	; (800ef78 <_fx_file_read+0x28c>)
 800ed02:	429a      	cmp	r2, r3
 800ed04:	d001      	beq.n	800ed0a <_fx_file_read+0x1e>
    {

        /* Return the file not open error status.  */
        return(FX_NOT_OPEN);
 800ed06:	2307      	movs	r3, #7
 800ed08:	e28d      	b.n	800f226 <_fx_file_read+0x53a>
    }

#ifndef FX_MEDIA_STATISTICS_DISABLE
    /* Setup pointer to media structure.  */
    media_ptr =  file_ptr -> fx_file_media_ptr;
 800ed0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ed0e:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_file_reads++;
 800ed10:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ed12:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800ed16:	1c5a      	adds	r2, r3, #1
 800ed18:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ed1a:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
#endif

    /* Setup pointer to associated media control block.  */
    media_ptr =  file_ptr -> fx_file_media_ptr;
 800ed1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ed22:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_FILE_READ, file_ptr, buffer_ptr, request_size, 0, FX_TRACE_FILE_EVENTS, &trace_event, &trace_timestamp)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 800ed24:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ed26:	681a      	ldr	r2, [r3, #0]
 800ed28:	4b94      	ldr	r3, [pc, #592]	; (800ef7c <_fx_file_read+0x290>)
 800ed2a:	429a      	cmp	r2, r3
 800ed2c:	d001      	beq.n	800ed32 <_fx_file_read+0x46>
 800ed2e:	2311      	movs	r3, #17
 800ed30:	e279      	b.n	800f226 <_fx_file_read+0x53a>
 800ed32:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ed34:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800ed38:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800ed3c:	4618      	mov	r0, r3
 800ed3e:	f008 fbe3 	bl	8017508 <_tx_mutex_get>
 800ed42:	4603      	mov	r3, r0
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d001      	beq.n	800ed4c <_fx_file_read+0x60>
 800ed48:	2311      	movs	r3, #17
 800ed4a:	e26c      	b.n	800f226 <_fx_file_read+0x53a>

    /* Next, determine if there is any more bytes to read in the file.  */
    if (file_ptr -> fx_file_current_file_offset >=
 800ed4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed4e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
        file_ptr -> fx_file_current_file_size)
 800ed52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed54:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
    if (file_ptr -> fx_file_current_file_offset >=
 800ed58:	4290      	cmp	r0, r2
 800ed5a:	eb71 0303 	sbcs.w	r3, r1, r3
 800ed5e:	d30a      	bcc.n	800ed76 <_fx_file_read+0x8a>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 800ed60:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ed62:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800ed66:	4618      	mov	r0, r3
 800ed68:	f008 fe46 	bl	80179f8 <_tx_mutex_put>

        /* The file is at the end, return the proper status and set the
           actual size to 0.  */
        *actual_size =  0;
 800ed6c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ed6e:	2200      	movs	r2, #0
 800ed70:	601a      	str	r2, [r3, #0]
        return(FX_END_OF_FILE);
 800ed72:	2309      	movs	r3, #9
 800ed74:	e257      	b.n	800f226 <_fx_file_read+0x53a>
    }

    /* At this point there is something to read.  */

    /* Setup local buffer pointer.  */
    destination_ptr =  (UCHAR *)buffer_ptr;
 800ed76:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ed78:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

    /* Determine if there are less bytes left in the file than that specified
       by the request.  If so, adjust the requested size.  */
    if ((ULONG64)request_size >
 800ed7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ed7e:	2200      	movs	r2, #0
 800ed80:	4698      	mov	r8, r3
 800ed82:	4691      	mov	r9, r2
        (file_ptr -> fx_file_current_file_size - file_ptr -> fx_file_current_file_offset))
 800ed84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed86:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 800ed8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed8c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800ed90:	1a84      	subs	r4, r0, r2
 800ed92:	eb61 0503 	sbc.w	r5, r1, r3
    if ((ULONG64)request_size >
 800ed96:	4544      	cmp	r4, r8
 800ed98:	eb75 0309 	sbcs.w	r3, r5, r9
 800ed9c:	d209      	bcs.n	800edb2 <_fx_file_read+0xc6>
    {

        /* Adjust the bytes remaining to what's available.  */
        request_size =  (ULONG)(file_ptr -> fx_file_current_file_size - file_ptr -> fx_file_current_file_offset);
 800ed9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eda0:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800eda4:	4611      	mov	r1, r2
 800eda6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eda8:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800edac:	4613      	mov	r3, r2
 800edae:	1acb      	subs	r3, r1, r3
 800edb0:	667b      	str	r3, [r7, #100]	; 0x64
    }

    /* Setup the remaining number of bytes to read.  */
    bytes_remaining =  request_size;
 800edb2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800edb4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    /* Loop to read all of the bytes.  */
    while (bytes_remaining)
 800edb8:	e20a      	b.n	800f1d0 <_fx_file_read+0x4e4>
    {

        /* Determine if a beginning or ending partial read is required.  */
        if ((file_ptr -> fx_file_current_logical_offset) ||
 800edba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800edbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d105      	bne.n	800edce <_fx_file_read+0xe2>
            (bytes_remaining < media_ptr -> fx_media_bytes_per_sector))
 800edc2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800edc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
        if ((file_ptr -> fx_file_current_logical_offset) ||
 800edc6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800edca:	4293      	cmp	r3, r2
 800edcc:	d24d      	bcs.n	800ee6a <_fx_file_read+0x17e>
        {

            /* A partial sector read is required.  */

            /* Read the current logical sector.  */
            status =  _fx_utility_logical_sector_read(media_ptr,
 800edce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800edd0:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
                                                      file_ptr -> fx_file_current_logical_sector,
                                                      media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DATA_SECTOR);
 800edd4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800edd6:	689a      	ldr	r2, [r3, #8]
            status =  _fx_utility_logical_sector_read(media_ptr,
 800edd8:	2304      	movs	r3, #4
 800edda:	9302      	str	r3, [sp, #8]
 800eddc:	2301      	movs	r3, #1
 800edde:	9301      	str	r3, [sp, #4]
 800ede0:	9200      	str	r2, [sp, #0]
 800ede2:	4602      	mov	r2, r0
 800ede4:	460b      	mov	r3, r1
 800ede6:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800ede8:	f004 fdf8 	bl	80139dc <_fx_utility_logical_sector_read>
 800edec:	67b8      	str	r0, [r7, #120]	; 0x78

            /* Check for good completion status.  */
            if (status !=  FX_SUCCESS)
 800edee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d007      	beq.n	800ee04 <_fx_file_read+0x118>
            {

                /* Release media protection.  */
                FX_UNPROTECT
 800edf4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800edf6:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800edfa:	4618      	mov	r0, r3
 800edfc:	f008 fdfc 	bl	80179f8 <_tx_mutex_put>

                /* Return the error status.  */
                return(status);
 800ee00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ee02:	e210      	b.n	800f226 <_fx_file_read+0x53a>
            }

            /* Copy the appropriate number of bytes into the destination buffer.  */
            copy_bytes =  media_ptr -> fx_media_bytes_per_sector -
 800ee04:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ee06:	6a9a      	ldr	r2, [r3, #40]	; 0x28
                file_ptr -> fx_file_current_logical_offset;
 800ee08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ee0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            copy_bytes =  media_ptr -> fx_media_bytes_per_sector -
 800ee0c:	1ad3      	subs	r3, r2, r3
 800ee0e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

            /* Check to see if only a portion of the read sector needs to be
               copied.  */
            if (copy_bytes > bytes_remaining)
 800ee12:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800ee16:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ee1a:	429a      	cmp	r2, r3
 800ee1c:	d903      	bls.n	800ee26 <_fx_file_read+0x13a>
            {

                /* Adjust the number of bytes to copy.  */
                copy_bytes =  bytes_remaining;
 800ee1e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ee22:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
            }

            /* Actually perform the memory copy.  */
            _fx_utility_memory_copy(((UCHAR *)media_ptr -> fx_media_memory_buffer) + /* Use case of memcpy is verified. */
 800ee26:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ee28:	689a      	ldr	r2, [r3, #8]
                                    file_ptr -> fx_file_current_logical_offset,
 800ee2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ee2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            _fx_utility_memory_copy(((UCHAR *)media_ptr -> fx_media_memory_buffer) + /* Use case of memcpy is verified. */
 800ee2e:	4413      	add	r3, r2
 800ee30:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800ee34:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800ee38:	4618      	mov	r0, r3
 800ee3a:	f005 f9cb 	bl	80141d4 <_fx_utility_memory_copy>
                                    destination_ptr, copy_bytes);

            /* Increment the logical sector byte offset.  */
            file_ptr -> fx_file_current_logical_offset =
                file_ptr -> fx_file_current_logical_offset + copy_bytes;
 800ee3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ee40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ee42:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ee46:	441a      	add	r2, r3
            file_ptr -> fx_file_current_logical_offset =
 800ee48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ee4a:	631a      	str	r2, [r3, #48]	; 0x30

            /* Adjust the remaining bytes to read.  */
            bytes_remaining =  bytes_remaining - copy_bytes;
 800ee4c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ee50:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ee54:	1ad3      	subs	r3, r2, r3
 800ee56:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

            /* Adjust the pointer to the destination buffer.  */
            destination_ptr =  destination_ptr + copy_bytes;
 800ee5a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800ee5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ee62:	4413      	add	r3, r2
 800ee64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ee68:	e108      	b.n	800f07c <_fx_file_read+0x390>
            /* Attempt to read multiple sectors directly into the destination
               buffer.  */

            /* Calculate the number of whole sectors to read directly into
               the destination buffer.  */
            sectors =  (UINT)(bytes_remaining / media_ptr -> fx_media_bytes_per_sector);
 800ee6a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ee6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ee6e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ee72:	fbb3 f3f2 	udiv	r3, r3, r2
 800ee76:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80


            next_cluster = cluster = file_ptr -> fx_file_current_physical_cluster;
 800ee7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ee7c:	6a1b      	ldr	r3, [r3, #32]
 800ee7e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ee82:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ee86:	677b      	str	r3, [r7, #116]	; 0x74
            for (i = (media_ptr -> fx_media_sectors_per_cluster -
 800ee88:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ee8a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
                      file_ptr -> fx_file_current_relative_sector); i < sectors; i += media_ptr -> fx_media_sectors_per_cluster)
 800ee8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ee8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            for (i = (media_ptr -> fx_media_sectors_per_cluster -
 800ee90:	1ad3      	subs	r3, r2, r3
 800ee92:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ee96:	e033      	b.n	800ef00 <_fx_file_read+0x214>
                    cluster++;
                }
                else
                {
#endif /* FX_ENABLE_EXFAT */
                    status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 800ee98:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800ee9c:	461a      	mov	r2, r3
 800ee9e:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800eea2:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800eea4:	f003 f98c 	bl	80121c0 <_fx_utility_FAT_entry_read>
 800eea8:	67b8      	str	r0, [r7, #120]	; 0x78

                    /* Determine if an error is present.  */
                    if ((status != FX_SUCCESS) || (next_cluster < FX_FAT_ENTRY_START) ||
 800eeaa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d10a      	bne.n	800eec6 <_fx_file_read+0x1da>
 800eeb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800eeb2:	2b01      	cmp	r3, #1
 800eeb4:	d907      	bls.n	800eec6 <_fx_file_read+0x1da>
                        (next_cluster > media_ptr -> fx_media_fat_reserved))
 800eeb6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800eeb8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800eebc:	f8d3 24a8 	ldr.w	r2, [r3, #1192]	; 0x4a8
 800eec0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
                    if ((status != FX_SUCCESS) || (next_cluster < FX_FAT_ENTRY_START) ||
 800eec2:	429a      	cmp	r2, r3
 800eec4:	d20c      	bcs.n	800eee0 <_fx_file_read+0x1f4>
                    {

                        /* Release media protection.  */
                        FX_UNPROTECT
 800eec6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800eec8:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800eecc:	4618      	mov	r0, r3
 800eece:	f008 fd93 	bl	80179f8 <_tx_mutex_put>

                        /* Send error message back to caller.  */
                        if (status != FX_SUCCESS)
 800eed2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d001      	beq.n	800eedc <_fx_file_read+0x1f0>
                        {
                            return(status);
 800eed8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800eeda:	e1a4      	b.n	800f226 <_fx_file_read+0x53a>
                        }
                        else
                        {
                            return(FX_FILE_CORRUPT);
 800eedc:	2308      	movs	r3, #8
 800eede:	e1a2      	b.n	800f226 <_fx_file_read+0x53a>
                        }
                    }

                    if (next_cluster != cluster + 1)
 800eee0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800eee4:	1c5a      	adds	r2, r3, #1
 800eee6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800eee8:	429a      	cmp	r2, r3
 800eeea:	d110      	bne.n	800ef0e <_fx_file_read+0x222>
                    {
                        break;
                    }
                    else
                    {
                        cluster = next_cluster;
 800eeec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800eeee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                      file_ptr -> fx_file_current_relative_sector); i < sectors; i += media_ptr -> fx_media_sectors_per_cluster)
 800eef2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800eef4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800eef6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800eefa:	4413      	add	r3, r2
 800eefc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ef00:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800ef04:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ef08:	429a      	cmp	r2, r3
 800ef0a:	d3c5      	bcc.n	800ee98 <_fx_file_read+0x1ac>
 800ef0c:	e000      	b.n	800ef10 <_fx_file_read+0x224>
                        break;
 800ef0e:	bf00      	nop
#ifdef FX_ENABLE_EXFAT
                }
#endif /* FX_ENABLE_EXFAT */
            }

            if (i < sectors)
 800ef10:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800ef14:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ef18:	429a      	cmp	r2, r3
 800ef1a:	d203      	bcs.n	800ef24 <_fx_file_read+0x238>
            {
                sectors = i;
 800ef1c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ef20:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            }

            /* Determine if this is a single sector read request.  If so, read the sector so it will
               come from the internal cache.  */
            if (sectors == 1)
 800ef24:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ef28:	2b01      	cmp	r3, #1
 800ef2a:	d129      	bne.n	800ef80 <_fx_file_read+0x294>
            {

                /* Read the current logical sector.  */
                status =  _fx_utility_logical_sector_read(media_ptr,
 800ef2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ef2e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
                                                          file_ptr -> fx_file_current_logical_sector,
                                                          media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DATA_SECTOR);
 800ef32:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ef34:	689a      	ldr	r2, [r3, #8]
                status =  _fx_utility_logical_sector_read(media_ptr,
 800ef36:	2304      	movs	r3, #4
 800ef38:	9302      	str	r3, [sp, #8]
 800ef3a:	2301      	movs	r3, #1
 800ef3c:	9301      	str	r3, [sp, #4]
 800ef3e:	9200      	str	r2, [sp, #0]
 800ef40:	4602      	mov	r2, r0
 800ef42:	460b      	mov	r3, r1
 800ef44:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800ef46:	f004 fd49 	bl	80139dc <_fx_utility_logical_sector_read>
 800ef4a:	67b8      	str	r0, [r7, #120]	; 0x78

                /* Check for good completion status.  */
                if (status !=  FX_SUCCESS)
 800ef4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	d007      	beq.n	800ef62 <_fx_file_read+0x276>
                {

                    /* Release media protection.  */
                    FX_UNPROTECT
 800ef52:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ef54:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800ef58:	4618      	mov	r0, r3
 800ef5a:	f008 fd4d 	bl	80179f8 <_tx_mutex_put>

                    /* Return the error status.  */
                    return(status);
 800ef5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ef60:	e161      	b.n	800f226 <_fx_file_read+0x53a>
                }

                /* Actually perform the memory copy.  */
                _fx_utility_memory_copy((UCHAR *)media_ptr -> fx_media_memory_buffer, destination_ptr, media_ptr -> fx_media_bytes_per_sector); /* Use case of memcpy is verified. */
 800ef62:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ef64:	6898      	ldr	r0, [r3, #8]
 800ef66:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ef68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ef6a:	461a      	mov	r2, r3
 800ef6c:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800ef70:	f005 f930 	bl	80141d4 <_fx_utility_memory_copy>
 800ef74:	e02f      	b.n	800efd6 <_fx_file_read+0x2ea>
 800ef76:	bf00      	nop
 800ef78:	46494c45 	.word	0x46494c45
 800ef7c:	4d454449 	.word	0x4d454449

                /* Multiple sector read request.  Read all the sectors at once.  */

                /* Perform the data read directly into the user's buffer of
                   the appropriate number of sectors.  */
                media_ptr -> fx_media_disable_burst_cache = file_ptr -> fx_file_disable_burst_cache;
 800ef80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ef82:	f8d3 21d8 	ldr.w	r2, [r3, #472]	; 0x1d8
 800ef86:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ef88:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800ef8c:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
                status =  _fx_utility_logical_sector_read(media_ptr, file_ptr -> fx_file_current_logical_sector,
 800ef90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ef92:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800ef96:	2304      	movs	r3, #4
 800ef98:	9302      	str	r3, [sp, #8]
 800ef9a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ef9e:	9301      	str	r3, [sp, #4]
 800efa0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800efa4:	9300      	str	r3, [sp, #0]
 800efa6:	4602      	mov	r2, r0
 800efa8:	460b      	mov	r3, r1
 800efaa:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800efac:	f004 fd16 	bl	80139dc <_fx_utility_logical_sector_read>
 800efb0:	67b8      	str	r0, [r7, #120]	; 0x78
                                                          destination_ptr, (ULONG) sectors, FX_DATA_SECTOR);
                media_ptr -> fx_media_disable_burst_cache = FX_FALSE;
 800efb2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800efb4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800efb8:	461a      	mov	r2, r3
 800efba:	2300      	movs	r3, #0
 800efbc:	f8c2 34a4 	str.w	r3, [r2, #1188]	; 0x4a4

                /* Check for good completion status.  */
                if (status !=  FX_SUCCESS)
 800efc0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d007      	beq.n	800efd6 <_fx_file_read+0x2ea>
                {

                    /* Release media protection.  */
                    FX_UNPROTECT
 800efc6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800efc8:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800efcc:	4618      	mov	r0, r3
 800efce:	f008 fd13 	bl	80179f8 <_tx_mutex_put>

                    /* Return the error status.  */
                    return(status);
 800efd2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800efd4:	e127      	b.n	800f226 <_fx_file_read+0x53a>

            /* Increment the current logical sector.  Subtract one from
               the sector count because we are going to use the logical
               offset to do additional sector/cluster arithmetic below.  */
            file_ptr -> fx_file_current_logical_sector =
                file_ptr -> fx_file_current_logical_sector +
 800efd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800efd8:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
                (sectors - 1);
 800efdc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800efe0:	3b01      	subs	r3, #1
 800efe2:	2200      	movs	r2, #0
 800efe4:	65bb      	str	r3, [r7, #88]	; 0x58
 800efe6:	65fa      	str	r2, [r7, #92]	; 0x5c
                file_ptr -> fx_file_current_logical_sector +
 800efe8:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 800efec:	4623      	mov	r3, r4
 800efee:	18c3      	adds	r3, r0, r3
 800eff0:	653b      	str	r3, [r7, #80]	; 0x50
 800eff2:	462b      	mov	r3, r5
 800eff4:	eb41 0303 	adc.w	r3, r1, r3
 800eff8:	657b      	str	r3, [r7, #84]	; 0x54
            file_ptr -> fx_file_current_logical_sector =
 800effa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800effc:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800f000:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28

            /* Move the relative sector and cluster as well.  */
            file_ptr -> fx_file_current_relative_cluster = file_ptr -> fx_file_current_relative_cluster +
 800f004:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f006:	6b59      	ldr	r1, [r3, #52]	; 0x34
                (file_ptr -> fx_file_current_relative_sector + (sectors - 1)) /
 800f008:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f00a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f00c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f010:	4413      	add	r3, r2
 800f012:	1e5a      	subs	r2, r3, #1
                media_ptr -> fx_media_sectors_per_cluster;
 800f014:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
                (file_ptr -> fx_file_current_relative_sector + (sectors - 1)) /
 800f018:	fbb2 f3f3 	udiv	r3, r2, r3
            file_ptr -> fx_file_current_relative_cluster = file_ptr -> fx_file_current_relative_cluster +
 800f01c:	18ca      	adds	r2, r1, r3
 800f01e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f020:	635a      	str	r2, [r3, #52]	; 0x34

            file_ptr -> fx_file_current_relative_sector =
                (file_ptr -> fx_file_current_relative_sector +
 800f022:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f024:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f026:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f02a:	4413      	add	r3, r2
 800f02c:	1e59      	subs	r1, r3, #1
                 (sectors - 1)) % media_ptr -> fx_media_sectors_per_cluster;
 800f02e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f030:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f032:	fbb1 f3f2 	udiv	r3, r1, r2
 800f036:	fb02 f303 	mul.w	r3, r2, r3
 800f03a:	1aca      	subs	r2, r1, r3
            file_ptr -> fx_file_current_relative_sector =
 800f03c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f03e:	639a      	str	r2, [r3, #56]	; 0x38

            /* Increment the logical sector byte offset.  */
            file_ptr -> fx_file_current_logical_offset =
                media_ptr -> fx_media_bytes_per_sector;
 800f040:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f042:	6a9a      	ldr	r2, [r3, #40]	; 0x28
            file_ptr -> fx_file_current_logical_offset =
 800f044:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f046:	631a      	str	r2, [r3, #48]	; 0x30

            file_ptr -> fx_file_current_physical_cluster = cluster;
 800f048:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800f04a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f04e:	6213      	str	r3, [r2, #32]

            /* Adjust the remaining bytes.  */
            bytes_remaining =  bytes_remaining -
                (((ULONG)media_ptr -> fx_media_bytes_per_sector) * sectors);
 800f050:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f052:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f054:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f058:	fb03 f202 	mul.w	r2, r3, r2
            bytes_remaining =  bytes_remaining -
 800f05c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f060:	1a9b      	subs	r3, r3, r2
 800f062:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

            /* Adjust the pointer to the destination buffer.  */
            destination_ptr =  destination_ptr +
                (((ULONG)media_ptr -> fx_media_bytes_per_sector) * sectors);
 800f066:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f068:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f06a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f06e:	fb03 f202 	mul.w	r2, r3, r2
            destination_ptr =  destination_ptr +
 800f072:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f076:	4413      	add	r3, r2
 800f078:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        }

        /* At this point, we have either read a partial sector or have successfully
           read one or more whole sectors.  Determine if we are at the end of
           the current logical sector.  */
        if (file_ptr -> fx_file_current_logical_offset >=
 800f07c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f07e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
            media_ptr -> fx_media_bytes_per_sector)
 800f080:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if (file_ptr -> fx_file_current_logical_offset >=
 800f084:	429a      	cmp	r2, r3
 800f086:	f0c0 80a3 	bcc.w	800f1d0 <_fx_file_read+0x4e4>
        {

            /* Determine if we are at the exact physical end of the file at the end of reading.  */
            if ((bytes_remaining == 0) && ((file_ptr -> fx_file_current_file_offset + (ULONG64)request_size) >=
 800f08a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d11a      	bne.n	800f0c8 <_fx_file_read+0x3dc>
 800f092:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f094:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800f098:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800f09a:	2000      	movs	r0, #0
 800f09c:	64b9      	str	r1, [r7, #72]	; 0x48
 800f09e:	64f8      	str	r0, [r7, #76]	; 0x4c
 800f0a0:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800f0a4:	4621      	mov	r1, r4
 800f0a6:	1851      	adds	r1, r2, r1
 800f0a8:	6439      	str	r1, [r7, #64]	; 0x40
 800f0aa:	4629      	mov	r1, r5
 800f0ac:	414b      	adcs	r3, r1
 800f0ae:	647b      	str	r3, [r7, #68]	; 0x44
                                           file_ptr -> fx_file_current_available_size))
 800f0b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f0b2:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
            if ((bytes_remaining == 0) && ((file_ptr -> fx_file_current_file_offset + (ULONG64)request_size) >=
 800f0b6:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 800f0ba:	4621      	mov	r1, r4
 800f0bc:	4291      	cmp	r1, r2
 800f0be:	4629      	mov	r1, r5
 800f0c0:	eb71 0303 	sbcs.w	r3, r1, r3
 800f0c4:	f080 808a 	bcs.w	800f1dc <_fx_file_read+0x4f0>
            /* We need to move to the next logical sector, but first
               determine if the next logical sector is within the same
               cluster.  */

            /* Increment the current relative sector in the cluster.  */
            file_ptr -> fx_file_current_relative_sector++;
 800f0c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f0ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f0cc:	1c5a      	adds	r2, r3, #1
 800f0ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f0d0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Determine if this is in a new cluster.  */
            if (file_ptr -> fx_file_current_relative_sector >=
 800f0d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f0d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
                media_ptr -> fx_media_sectors_per_cluster)
 800f0d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f0d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
            if (file_ptr -> fx_file_current_relative_sector >=
 800f0da:	429a      	cmp	r2, r3
 800f0dc:	d368      	bcc.n	800f1b0 <_fx_file_read+0x4c4>
                {
#endif /* FX_ENABLE_EXFAT */

                    /* Read the FAT entry of the current cluster to find
                       the next cluster.  */
                    status =  _fx_utility_FAT_entry_read(media_ptr,
 800f0de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f0e0:	6a19      	ldr	r1, [r3, #32]
 800f0e2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800f0e6:	461a      	mov	r2, r3
 800f0e8:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800f0ea:	f003 f869 	bl	80121c0 <_fx_utility_FAT_entry_read>
 800f0ee:	67b8      	str	r0, [r7, #120]	; 0x78
                                                         file_ptr -> fx_file_current_physical_cluster, &next_cluster);

                    /* Determine if an error is present.  */
                    if ((status != FX_SUCCESS) || (next_cluster < FX_FAT_ENTRY_START) ||
 800f0f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d10a      	bne.n	800f10c <_fx_file_read+0x420>
 800f0f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f0f8:	2b01      	cmp	r3, #1
 800f0fa:	d907      	bls.n	800f10c <_fx_file_read+0x420>
                        (next_cluster > media_ptr -> fx_media_fat_reserved))
 800f0fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f0fe:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800f102:	f8d3 24a8 	ldr.w	r2, [r3, #1192]	; 0x4a8
 800f106:	6f7b      	ldr	r3, [r7, #116]	; 0x74
                    if ((status != FX_SUCCESS) || (next_cluster < FX_FAT_ENTRY_START) ||
 800f108:	429a      	cmp	r2, r3
 800f10a:	d20c      	bcs.n	800f126 <_fx_file_read+0x43a>
                    {

                        /* Release media protection.  */
                        FX_UNPROTECT
 800f10c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f10e:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800f112:	4618      	mov	r0, r3
 800f114:	f008 fc70 	bl	80179f8 <_tx_mutex_put>

                        /* Send error message back to caller.  */
                        if (status != FX_SUCCESS)
 800f118:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d001      	beq.n	800f122 <_fx_file_read+0x436>
                        {
                            return(status);
 800f11e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f120:	e081      	b.n	800f226 <_fx_file_read+0x53a>
                        }
                        else
                        {
                            return(FX_FILE_CORRUPT);
 800f122:	2308      	movs	r3, #8
 800f124:	e07f      	b.n	800f226 <_fx_file_read+0x53a>
                }
#endif /* FX_ENABLE_EXFAT */

                /* Otherwise, we have a new cluster.  Save it in the file
                   control block and calculate a new logical sector value.  */
                file_ptr -> fx_file_current_physical_cluster =  next_cluster;
 800f126:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800f128:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f12a:	621a      	str	r2, [r3, #32]
                file_ptr -> fx_file_current_relative_cluster++;
 800f12c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f12e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f130:	1c5a      	adds	r2, r3, #1
 800f132:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f134:	635a      	str	r2, [r3, #52]	; 0x34
                file_ptr -> fx_file_current_logical_sector = ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800f136:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f138:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f13a:	2200      	movs	r2, #0
 800f13c:	63bb      	str	r3, [r7, #56]	; 0x38
 800f13e:	63fa      	str	r2, [r7, #60]	; 0x3c
                    ((((ULONG64)next_cluster) - FX_FAT_ENTRY_START) *
 800f140:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f142:	2200      	movs	r2, #0
 800f144:	633b      	str	r3, [r7, #48]	; 0x30
 800f146:	637a      	str	r2, [r7, #52]	; 0x34
 800f148:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800f14c:	460b      	mov	r3, r1
 800f14e:	3b02      	subs	r3, #2
 800f150:	62bb      	str	r3, [r7, #40]	; 0x28
 800f152:	4613      	mov	r3, r2
 800f154:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
 800f158:	62fb      	str	r3, [r7, #44]	; 0x2c
                     ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 800f15a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f15c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f15e:	2200      	movs	r2, #0
 800f160:	623b      	str	r3, [r7, #32]
 800f162:	627a      	str	r2, [r7, #36]	; 0x24
                    ((((ULONG64)next_cluster) - FX_FAT_ENTRY_START) *
 800f164:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800f168:	462b      	mov	r3, r5
 800f16a:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800f16e:	4642      	mov	r2, r8
 800f170:	fb02 f203 	mul.w	r2, r2, r3
 800f174:	464b      	mov	r3, r9
 800f176:	4621      	mov	r1, r4
 800f178:	fb01 f303 	mul.w	r3, r1, r3
 800f17c:	4413      	add	r3, r2
 800f17e:	4622      	mov	r2, r4
 800f180:	4641      	mov	r1, r8
 800f182:	fba2 ab01 	umull	sl, fp, r2, r1
 800f186:	445b      	add	r3, fp
 800f188:	469b      	mov	fp, r3
                file_ptr -> fx_file_current_logical_sector = ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800f18a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800f18e:	460b      	mov	r3, r1
 800f190:	eb13 030a 	adds.w	r3, r3, sl
 800f194:	61bb      	str	r3, [r7, #24]
 800f196:	4613      	mov	r3, r2
 800f198:	eb43 030b 	adc.w	r3, r3, fp
 800f19c:	61fb      	str	r3, [r7, #28]
 800f19e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f1a0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800f1a4:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
                file_ptr -> fx_file_current_relative_sector =  0;
 800f1a8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800f1aa:	2300      	movs	r3, #0
 800f1ac:	6393      	str	r3, [r2, #56]	; 0x38
 800f1ae:	e00c      	b.n	800f1ca <_fx_file_read+0x4de>
            else
            {

                /* Still within the same cluster so just increment the
                   logical sector.  */
                file_ptr -> fx_file_current_logical_sector++;
 800f1b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f1b2:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800f1b6:	1c51      	adds	r1, r2, #1
 800f1b8:	6139      	str	r1, [r7, #16]
 800f1ba:	f143 0300 	adc.w	r3, r3, #0
 800f1be:	617b      	str	r3, [r7, #20]
 800f1c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f1c2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800f1c6:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
            }

            /* In either case, we are now positioned at a new sector so
               clear the logical sector offset.  */
            file_ptr -> fx_file_current_logical_offset =  0;
 800f1ca:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800f1cc:	2300      	movs	r3, #0
 800f1ce:	6313      	str	r3, [r2, #48]	; 0x30
    while (bytes_remaining)
 800f1d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	f47f adf0 	bne.w	800edba <_fx_file_read+0xce>
 800f1da:	e000      	b.n	800f1de <_fx_file_read+0x4f2>
                break;
 800f1dc:	bf00      	nop
        }
    }

    /* Adjust the current file offset accordingly.  */
    file_ptr -> fx_file_current_file_offset =
        file_ptr -> fx_file_current_file_offset + (ULONG64)request_size;
 800f1de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f1e0:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800f1e4:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800f1e6:	2000      	movs	r0, #0
 800f1e8:	60b9      	str	r1, [r7, #8]
 800f1ea:	60f8      	str	r0, [r7, #12]
 800f1ec:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800f1f0:	4621      	mov	r1, r4
 800f1f2:	1851      	adds	r1, r2, r1
 800f1f4:	6039      	str	r1, [r7, #0]
 800f1f6:	4629      	mov	r1, r5
 800f1f8:	eb43 0101 	adc.w	r1, r3, r1
 800f1fc:	6079      	str	r1, [r7, #4]
    file_ptr -> fx_file_current_file_offset =
 800f1fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f200:	e9d7 1200 	ldrd	r1, r2, [r7]
 800f204:	e9c3 1210 	strd	r1, r2, [r3, #64]	; 0x40

    /* Store the number of bytes actually read.  */
    *actual_size =  request_size;
 800f208:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f20a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f20c:	601a      	str	r2, [r3, #0]

    /* Update the trace event with the bytes read.  */
    FX_TRACE_EVENT_UPDATE(trace_event, trace_timestamp, FX_TRACE_FILE_READ, 0, 0, 0, request_size)

    /* Update the last accessed date.  */
    file_ptr -> fx_file_dir_entry.fx_dir_entry_last_accessed_date =  _fx_system_date;
 800f20e:	4b08      	ldr	r3, [pc, #32]	; (800f230 <_fx_file_read+0x544>)
 800f210:	681a      	ldr	r2, [r3, #0]
 800f212:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f214:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

    /* Release media protection.  */
    FX_UNPROTECT
 800f218:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f21a:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800f21e:	4618      	mov	r0, r3
 800f220:	f008 fbea 	bl	80179f8 <_tx_mutex_put>

    /* Return a successful status to the caller.  */
    return(FX_SUCCESS);
 800f224:	2300      	movs	r3, #0
}
 800f226:	4618      	mov	r0, r3
 800f228:	3798      	adds	r7, #152	; 0x98
 800f22a:	46bd      	mov	sp, r7
 800f22c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f230:	200151bc 	.word	0x200151bc

0800f234 <_fx_file_seek>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef FX_DISABLE_ONE_LINE_FUNCTION
UINT  _fx_file_seek(FX_FILE *file_ptr, ULONG byte_offset)
{
 800f234:	b580      	push	{r7, lr}
 800f236:	b082      	sub	sp, #8
 800f238:	af00      	add	r7, sp, #0
 800f23a:	6078      	str	r0, [r7, #4]
 800f23c:	6039      	str	r1, [r7, #0]

    return(_fx_file_extended_seek(file_ptr, (ULONG64) byte_offset));
 800f23e:	6839      	ldr	r1, [r7, #0]
 800f240:	2000      	movs	r0, #0
 800f242:	460a      	mov	r2, r1
 800f244:	4603      	mov	r3, r0
 800f246:	6878      	ldr	r0, [r7, #4]
 800f248:	f7fe fda0 	bl	800dd8c <_fx_file_extended_seek>
 800f24c:	4603      	mov	r3, r0
}
 800f24e:	4618      	mov	r0, r3
 800f250:	3708      	adds	r7, #8
 800f252:	46bd      	mov	sp, r7
 800f254:	bd80      	pop	{r7, pc}
	...

0800f258 <_fx_file_write>:
/*                                            memcpy usage,               */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_file_write(FX_FILE *file_ptr, VOID *buffer_ptr, ULONG size)
{
 800f258:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f25c:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800f260:	af04      	add	r7, sp, #16
 800f262:	f8c7 019c 	str.w	r0, [r7, #412]	; 0x19c
 800f266:	f8c7 1198 	str.w	r1, [r7, #408]	; 0x198
 800f26a:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
UCHAR                  dont_use_fat_old = FX_FALSE; /* Used by exFAT logic to indicate whether or not the FAT table should be used. */
#endif /* FX_ENABLE_FAULT_TOLERANT */


    /* First, determine if the file is still open.  */
    if (file_ptr -> fx_file_id != FX_FILE_ID)
 800f26e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800f272:	681a      	ldr	r2, [r3, #0]
 800f274:	4bd9      	ldr	r3, [pc, #868]	; (800f5dc <_fx_file_write+0x384>)
 800f276:	429a      	cmp	r2, r3
 800f278:	d002      	beq.n	800f280 <_fx_file_write+0x28>
    {

        /* Return the file not open error status.  */
        return(FX_NOT_OPEN);
 800f27a:	2307      	movs	r3, #7
 800f27c:	f000 bf26 	b.w	80100cc <_fx_file_write+0xe74>
    }

    /* Setup pointer to media structure.  */
    media_ptr =  file_ptr -> fx_file_media_ptr;
 800f280:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800f284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f286:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_file_writes++;
 800f28a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800f28e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800f292:	1c5a      	adds	r2, r3, #1
 800f294:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800f298:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154

#ifdef FX_ENABLE_EXFAT
    if ((media_ptr -> fx_media_FAT_type != FX_exFAT) &&
        (file_ptr -> fx_file_current_file_offset + size > 0xFFFFFFFFULL))
#else
    if (file_ptr -> fx_file_current_file_offset + size > 0xFFFFFFFFULL)
 800f29c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800f2a0:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800f2a4:	f8d7 1194 	ldr.w	r1, [r7, #404]	; 0x194
 800f2a8:	2000      	movs	r0, #0
 800f2aa:	460c      	mov	r4, r1
 800f2ac:	4605      	mov	r5, r0
 800f2ae:	eb12 0804 	adds.w	r8, r2, r4
 800f2b2:	eb43 0905 	adc.w	r9, r3, r5
 800f2b6:	f1b9 0f01 	cmp.w	r9, #1
 800f2ba:	d302      	bcc.n	800f2c2 <_fx_file_write+0x6a>
#endif /* FX_ENABLE_EXFAT */
    {

        /* Return the no more space error, since the new file size would be larger than
           the 32-bit field to represent it in the file's directory entry.  */
        return(FX_NO_MORE_SPACE);
 800f2bc:	230a      	movs	r3, #10
 800f2be:	f000 bf05 	b.w	80100cc <_fx_file_write+0xe74>

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_FILE_WRITE, file_ptr, buffer_ptr, size, 0, FX_TRACE_FILE_EVENTS, &trace_event, &trace_timestamp)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 800f2c2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800f2c6:	681a      	ldr	r2, [r3, #0]
 800f2c8:	4bc5      	ldr	r3, [pc, #788]	; (800f5e0 <_fx_file_write+0x388>)
 800f2ca:	429a      	cmp	r2, r3
 800f2cc:	d002      	beq.n	800f2d4 <_fx_file_write+0x7c>
 800f2ce:	2311      	movs	r3, #17
 800f2d0:	f000 befc 	b.w	80100cc <_fx_file_write+0xe74>
 800f2d4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800f2d8:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800f2dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800f2e0:	4618      	mov	r0, r3
 800f2e2:	f008 f911 	bl	8017508 <_tx_mutex_get>
 800f2e6:	4603      	mov	r3, r0
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d002      	beq.n	800f2f2 <_fx_file_write+0x9a>
 800f2ec:	2311      	movs	r3, #17
 800f2ee:	f000 beed 	b.w	80100cc <_fx_file_write+0xe74>

    /* Check for write protect at the media level (set by driver).  */
    if (media_ptr -> fx_media_driver_write_protect)
 800f2f2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800f2f6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d009      	beq.n	800f312 <_fx_file_write+0xba>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 800f2fe:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800f302:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800f306:	4618      	mov	r0, r3
 800f308:	f008 fb76 	bl	80179f8 <_tx_mutex_put>

        /* Return write protect error.  */
        return(FX_WRITE_PROTECT);
 800f30c:	2323      	movs	r3, #35	; 0x23
 800f30e:	f000 bedd 	b.w	80100cc <_fx_file_write+0xe74>
    }

    /* Make sure this file is open for writing.  */
    if (file_ptr -> fx_file_open_mode != FX_OPEN_FOR_WRITE)
 800f312:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800f316:	689b      	ldr	r3, [r3, #8]
 800f318:	2b01      	cmp	r3, #1
 800f31a:	d009      	beq.n	800f330 <_fx_file_write+0xd8>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 800f31c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800f320:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800f324:	4618      	mov	r0, r3
 800f326:	f008 fb67 	bl	80179f8 <_tx_mutex_put>

        /* Return the access error exception - a write was attempted from
           a file opened for reading!  */
        return(FX_ACCESS_ERROR);
 800f32a:	2306      	movs	r3, #6
 800f32c:	f000 bece 	b.w	80100cc <_fx_file_write+0xe74>
    /* Start transaction. */
    _fx_fault_tolerant_transaction_start(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Calculate the number of bytes per cluster.  */
    bytes_per_cluster =  ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 800f330:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800f334:	6a9a      	ldr	r2, [r3, #40]	; 0x28
        ((ULONG)media_ptr -> fx_media_sectors_per_cluster);
 800f336:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800f33a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    bytes_per_cluster =  ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 800f33c:	fb02 f303 	mul.w	r3, r2, r3
 800f340:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8

    /* Check for invalid value.  */
    if (bytes_per_cluster == 0)
 800f344:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d109      	bne.n	800f360 <_fx_file_write+0x108>
#ifdef FX_ENABLE_FAULT_TOLERANT
        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

        /* Release media protection.  */
        FX_UNPROTECT
 800f34c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800f350:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800f354:	4618      	mov	r0, r3
 800f356:	f008 fb4f 	bl	80179f8 <_tx_mutex_put>

        /* Invalid media, return error.  */
        return(FX_MEDIA_INVALID);
 800f35a:	2302      	movs	r3, #2
 800f35c:	f000 beb6 	b.w	80100cc <_fx_file_write+0xe74>
    }

    /* Initialized first new cluster. */
    first_new_cluster =  0;
 800f360:	2300      	movs	r3, #0
 800f362:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
    }
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Next, determine if there is enough room to write the specified number of
       bytes to the clusters already allocated to this file.  */
    if (((file_ptr -> fx_file_current_available_size - file_ptr -> fx_file_current_file_offset) < size)
 800f366:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800f36a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800f36e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800f372:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800f376:	ebb0 0a02 	subs.w	sl, r0, r2
 800f37a:	eb61 0b03 	sbc.w	fp, r1, r3
 800f37e:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800f382:	2200      	movs	r2, #0
 800f384:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800f388:	f8c7 215c 	str.w	r2, [r7, #348]	; 0x15c
 800f38c:	e9d7 1256 	ldrd	r1, r2, [r7, #344]	; 0x158
 800f390:	460b      	mov	r3, r1
 800f392:	459a      	cmp	sl, r3
 800f394:	4613      	mov	r3, r2
 800f396:	eb7b 0303 	sbcs.w	r3, fp, r3
 800f39a:	f080 82a9 	bcs.w	800f8f0 <_fx_file_write+0x698>

        if (file_ptr -> fx_file_current_available_size - file_ptr -> fx_file_current_file_offset < size)
        {
#endif /* FX_ENABLE_FAULT_TOLERANT */
            /* Calculate clusters that are needed for data append except ones overwritten. */
            clusters =  (UINT)((size + (bytes_per_cluster - 1) -
 800f39e:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 800f3a2:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800f3a6:	4413      	add	r3, r2
 800f3a8:	3b01      	subs	r3, #1
 800f3aa:	2200      	movs	r2, #0
 800f3ac:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800f3b0:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
                                (file_ptr -> fx_file_current_available_size - file_ptr -> fx_file_current_file_offset)) /
 800f3b4:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800f3b8:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800f3bc:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800f3c0:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
            clusters =  (UINT)((size + (bytes_per_cluster - 1) -
 800f3c4:	1a84      	subs	r4, r0, r2
 800f3c6:	f8c7 4148 	str.w	r4, [r7, #328]	; 0x148
 800f3ca:	eb61 0303 	sbc.w	r3, r1, r3
 800f3ce:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800f3d2:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 800f3d6:	4623      	mov	r3, r4
 800f3d8:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800f3dc:	4602      	mov	r2, r0
 800f3de:	189b      	adds	r3, r3, r2
 800f3e0:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 800f3e4:	460b      	mov	r3, r1
 800f3e6:	462a      	mov	r2, r5
 800f3e8:	eb42 0303 	adc.w	r3, r2, r3
 800f3ec:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
                                (file_ptr -> fx_file_current_available_size - file_ptr -> fx_file_current_file_offset)) /
 800f3f0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800f3f4:	2200      	movs	r2, #0
 800f3f6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 800f3fa:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 800f3fe:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800f402:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 800f406:	f7f1 f855 	bl	80004b4 <__aeabi_uldivmod>
 800f40a:	4602      	mov	r2, r0
 800f40c:	460b      	mov	r3, r1
            clusters =  (UINT)((size + (bytes_per_cluster - 1) -
 800f40e:	4613      	mov	r3, r2
 800f410:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0

        /* Determine if we have enough space left.  */
#ifdef FX_ENABLE_FAULT_TOLERANT
        if (clusters + replace_clusters > media_ptr -> fx_media_available_clusters)
#else
        if (clusters > media_ptr -> fx_media_available_clusters)
 800f414:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800f418:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800f41a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800f41e:	4293      	cmp	r3, r2
 800f420:	d909      	bls.n	800f436 <_fx_file_write+0x1de>
#ifdef FX_ENABLE_FAULT_TOLERANT
            FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

            /* Release media protection.  */
            FX_UNPROTECT
 800f422:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800f426:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800f42a:	4618      	mov	r0, r3
 800f42c:	f008 fae4 	bl	80179f8 <_tx_mutex_put>

            /* Out of disk space.  */
            return(FX_NO_MORE_SPACE);
 800f430:	230a      	movs	r3, #10
 800f432:	f000 be4b 	b.w	80100cc <_fx_file_write+0xe74>
        }

        /* Update the file total cluster count.  */
        file_ptr -> fx_file_total_clusters =  file_ptr -> fx_file_total_clusters + clusters;
 800f436:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800f43a:	691a      	ldr	r2, [r3, #16]
 800f43c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800f440:	441a      	add	r2, r3
 800f442:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800f446:	611a      	str	r2, [r3, #16]
        /* Check for wrap-around when updating the available size.  */
#ifdef FX_ENABLE_EXFAT
        if ((media_ptr -> fx_media_FAT_type != FX_exFAT) &&
            (file_ptr -> fx_file_current_available_size + (ULONG64)bytes_per_cluster * (ULONG64)clusters > 0xFFFFFFFFULL))
#else
        if (file_ptr -> fx_file_current_available_size + (ULONG64)bytes_per_cluster * (ULONG64)clusters > 0xFFFFFFFFULL)
 800f448:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800f44c:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800f450:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800f454:	2200      	movs	r2, #0
 800f456:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800f45a:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 800f45e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800f462:	2200      	movs	r2, #0
 800f464:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800f468:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 800f46c:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	; 0x130
 800f470:	464b      	mov	r3, r9
 800f472:	e9d7 ab4a 	ldrd	sl, fp, [r7, #296]	; 0x128
 800f476:	4652      	mov	r2, sl
 800f478:	fb02 f203 	mul.w	r2, r2, r3
 800f47c:	465b      	mov	r3, fp
 800f47e:	4644      	mov	r4, r8
 800f480:	fb04 f303 	mul.w	r3, r4, r3
 800f484:	4413      	add	r3, r2
 800f486:	4642      	mov	r2, r8
 800f488:	4654      	mov	r4, sl
 800f48a:	fba2 4204 	umull	r4, r2, r2, r4
 800f48e:	f8c7 218c 	str.w	r2, [r7, #396]	; 0x18c
 800f492:	4622      	mov	r2, r4
 800f494:	f8c7 2188 	str.w	r2, [r7, #392]	; 0x188
 800f498:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 800f49c:	4413      	add	r3, r2
 800f49e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 800f4a2:	e9d7 4562 	ldrd	r4, r5, [r7, #392]	; 0x188
 800f4a6:	4623      	mov	r3, r4
 800f4a8:	18c3      	adds	r3, r0, r3
 800f4aa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800f4ae:	462b      	mov	r3, r5
 800f4b0:	eb41 0303 	adc.w	r3, r1, r3
 800f4b4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800f4b8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800f4bc:	2b01      	cmp	r3, #1
 800f4be:	d308      	bcc.n	800f4d2 <_fx_file_write+0x27a>
#endif /* FX_ENABLE_EXFAT */
        {

            /* 32-bit wrap around condition is present.  Just set the available file size to all ones, which is
               the maximum file size.  */
            file_ptr -> fx_file_current_available_size =  0xFFFFFFFFULL;
 800f4c0:	f8d7 119c 	ldr.w	r1, [r7, #412]	; 0x19c
 800f4c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f4c8:	f04f 0300 	mov.w	r3, #0
 800f4cc:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 800f4d0:	e03d      	b.n	800f54e <_fx_file_write+0x2f6>
        else
        {

            /* Normal condition, update the available size.  */
            file_ptr -> fx_file_current_available_size =
                file_ptr -> fx_file_current_available_size + (ULONG64)bytes_per_cluster * (ULONG64)clusters;
 800f4d2:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800f4d6:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800f4da:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800f4de:	2200      	movs	r2, #0
 800f4e0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800f4e4:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800f4e8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800f4ec:	2200      	movs	r2, #0
 800f4ee:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800f4f2:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 800f4f6:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 800f4fa:	464b      	mov	r3, r9
 800f4fc:	e9d7 ab44 	ldrd	sl, fp, [r7, #272]	; 0x110
 800f500:	4652      	mov	r2, sl
 800f502:	fb02 f203 	mul.w	r2, r2, r3
 800f506:	465b      	mov	r3, fp
 800f508:	4644      	mov	r4, r8
 800f50a:	fb04 f303 	mul.w	r3, r4, r3
 800f50e:	4413      	add	r3, r2
 800f510:	4642      	mov	r2, r8
 800f512:	4654      	mov	r4, sl
 800f514:	fba2 4204 	umull	r4, r2, r2, r4
 800f518:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 800f51c:	4622      	mov	r2, r4
 800f51e:	f8c7 2180 	str.w	r2, [r7, #384]	; 0x180
 800f522:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 800f526:	4413      	add	r3, r2
 800f528:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800f52c:	e9d7 4560 	ldrd	r4, r5, [r7, #384]	; 0x180
 800f530:	4623      	mov	r3, r4
 800f532:	18c3      	adds	r3, r0, r3
 800f534:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800f538:	462b      	mov	r3, r5
 800f53a:	eb41 0303 	adc.w	r3, r1, r3
 800f53e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
            file_ptr -> fx_file_current_available_size =
 800f542:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800f546:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800f54a:	e9c3 1214 	strd	r1, r2, [r3, #80]	; 0x50
        /* Account for newly allocated clusters. */
        clusters += replace_clusters;
#endif /* FX_ENABLE_FAULT_TOLERANT */

        /* Decrease the available clusters in the media control block. */
        media_ptr -> fx_media_available_clusters =  media_ptr -> fx_media_available_clusters - clusters;
 800f54e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800f552:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800f554:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800f558:	1ad2      	subs	r2, r2, r3
 800f55a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800f55e:	67da      	str	r2, [r3, #124]	; 0x7c
            dont_use_fat_old = (UCHAR)file_ptr -> fx_file_dir_entry.fx_dir_entry_dont_use_fat;
        }
#endif /* FX_ENABLE_EXFAT && FX_ENABLE_FAULT_TOLERANT */

        /* Search for the additional clusters we need.  */
        total_clusters =     media_ptr -> fx_media_total_clusters;
 800f560:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800f564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f566:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
#endif /* FX_ENABLE_EXFAT */
        }
        else
#endif /* FX_ENABLE_FAULT_TOLERANT */
        {
            last_cluster =   file_ptr -> fx_file_last_physical_cluster;
 800f56a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800f56e:	69db      	ldr	r3, [r3, #28]
 800f570:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
        }

        FAT_index    =       media_ptr -> fx_media_cluster_search_start;
 800f574:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800f578:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f57c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4

        /* Loop to find the needed clusters.  */
        while (clusters)
 800f580:	e16f      	b.n	800f862 <_fx_file_write+0x60a>
        {

            /* Decrease the cluster count.  */
            clusters--;
 800f582:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800f586:	3b01      	subs	r3, #1
 800f588:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
                /* Loop to find the first available cluster.  */
                do
                {

                    /* Make sure we stop looking after one pass through the FAT table.  */
                    if (!total_clusters)
 800f58c:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800f590:	2b00      	cmp	r3, #0
 800f592:	d109      	bne.n	800f5a8 <_fx_file_write+0x350>
#ifdef FX_ENABLE_FAULT_TOLERANT
                        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

                        /* Release media protection.  */
                        FX_UNPROTECT
 800f594:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800f598:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800f59c:	4618      	mov	r0, r3
 800f59e:	f008 fa2b 	bl	80179f8 <_tx_mutex_put>

                        /* Something is wrong with the media - the desired clusters were
                           not found in the FAT table.  */
                        return(FX_NO_MORE_SPACE);
 800f5a2:	230a      	movs	r3, #10
 800f5a4:	f000 bd92 	b.w	80100cc <_fx_file_write+0xe74>
                    }

                    /* Read FAT entry.  */
                    status =  _fx_utility_FAT_entry_read(media_ptr, FAT_index, &FAT_value);
 800f5a8:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800f5ac:	461a      	mov	r2, r3
 800f5ae:	f8d7 11c4 	ldr.w	r1, [r7, #452]	; 0x1c4
 800f5b2:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 800f5b6:	f002 fe03 	bl	80121c0 <_fx_utility_FAT_entry_read>
 800f5ba:	f8c7 01ec 	str.w	r0, [r7, #492]	; 0x1ec

                    /* Check for a bad status.  */
                    if (status != FX_SUCCESS)
 800f5be:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d00e      	beq.n	800f5e4 <_fx_file_write+0x38c>
#ifdef FX_ENABLE_FAULT_TOLERANT
                        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

                        /* Release media protection.  */
                        FX_UNPROTECT
 800f5c6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800f5ca:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800f5ce:	4618      	mov	r0, r3
 800f5d0:	f008 fa12 	bl	80179f8 <_tx_mutex_put>

                        /* Return the bad status.  */
                        return(status);
 800f5d4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800f5d8:	f000 bd78 	b.w	80100cc <_fx_file_write+0xe74>
 800f5dc:	46494c45 	.word	0x46494c45
 800f5e0:	4d454449 	.word	0x4d454449
                    }

                    /* Decrement the total cluster count.  */
                    total_clusters--;
 800f5e4:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800f5e8:	3b01      	subs	r3, #1
 800f5ea:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc

                    /* Determine if the FAT entry is free.  */
                    if (FAT_value == FX_FREE_CLUSTER)
 800f5ee:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d116      	bne.n	800f624 <_fx_file_write+0x3cc>
                    {

                        /* Move cluster search pointer forward.  */
                        media_ptr -> fx_media_cluster_search_start =  FAT_index + 1;
 800f5f6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800f5fa:	1c5a      	adds	r2, r3, #1
 800f5fc:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800f600:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

                        /* Determine if this needs to be wrapped.  */
                        if (media_ptr -> fx_media_cluster_search_start >= (media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START))
 800f604:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800f608:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800f60c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800f610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f612:	3302      	adds	r3, #2
 800f614:	429a      	cmp	r2, r3
 800f616:	d316      	bcc.n	800f646 <_fx_file_write+0x3ee>
                        {

                            /* Wrap the search to the beginning FAT entry.  */
                            media_ptr -> fx_media_cluster_search_start =  FX_FAT_ENTRY_START;
 800f618:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 800f61c:	2302      	movs	r3, #2
 800f61e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
                        }

                        /* Break this loop.  */
                        break;
 800f622:	e010      	b.n	800f646 <_fx_file_write+0x3ee>
                    }
                    else
                    {

                        /* FAT entry is not free... Advance the FAT index.  */
                        FAT_index++;
 800f624:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800f628:	3301      	adds	r3, #1
 800f62a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4

                        /* Determine if we need to wrap the FAT index around.  */
                        if (FAT_index >= (media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START))
 800f62e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800f632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f634:	1c9a      	adds	r2, r3, #2
 800f636:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800f63a:	4293      	cmp	r3, r2
 800f63c:	d3a6      	bcc.n	800f58c <_fx_file_write+0x334>
                        {

                            /* Wrap the search to the beginning FAT entry.  */
                            FAT_index =  FX_FAT_ENTRY_START;
 800f63e:	2302      	movs	r3, #2
 800f640:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
                    if (!total_clusters)
 800f644:	e7a2      	b.n	800f58c <_fx_file_write+0x334>
                        break;
 800f646:	bf00      	nop
#ifdef FX_ENABLE_EXFAT
            }
#endif /* FX_ENABLE_EXFAT */

            /* Determine if we have found the first new cluster yet.  */
            if (first_new_cluster == 0)
 800f648:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d103      	bne.n	800f658 <_fx_file_write+0x400>
            {

                /* Remember the first new cluster. */
                first_new_cluster =  FAT_index;
 800f650:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800f654:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
#endif /* FX_ENABLE_FAULT_TOLERANT */
            }

            /* Make a quick check to see if an empty, cluster-less file
               is being written to for the first time.  */
            if (last_cluster)
 800f658:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	f000 808f 	beq.w	800f780 <_fx_file_write+0x528>
            {

                /* Check for the file's cluster.  We won't perform this link until the
                   entire FAT chain is built.  */
                if (last_cluster != file_ptr -> fx_file_last_physical_cluster)
 800f662:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800f666:	69da      	ldr	r2, [r3, #28]
 800f668:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800f66c:	4293      	cmp	r3, r2
 800f66e:	d009      	beq.n	800f684 <_fx_file_write+0x42c>
                    {
#endif /* FX_ENABLE_EXFAT */

                        /* Normal condition - link the last cluster with the new
                           found cluster.  */
                        status = _fx_utility_FAT_entry_write(media_ptr, last_cluster, FAT_index);
 800f670:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
 800f674:	f8d7 11cc 	ldr.w	r1, [r7, #460]	; 0x1cc
 800f678:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 800f67c:	f002 ffc9 	bl	8012612 <_fx_utility_FAT_entry_write>
 800f680:	f8c7 01ec 	str.w	r0, [r7, #492]	; 0x1ec
                    }
#endif /* FX_ENABLE_EXFAT */
                }

                /* Check for a bad FAT write status.  */
                if (status !=  FX_SUCCESS)
 800f684:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d00a      	beq.n	800f6a2 <_fx_file_write+0x44a>
#ifdef FX_ENABLE_FAULT_TOLERANT
                    FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

                    /* Release media protection.  */
                    FX_UNPROTECT
 800f68c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800f690:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800f694:	4618      	mov	r0, r3
 800f696:	f008 f9af 	bl	80179f8 <_tx_mutex_put>

                    /* Return the bad status.  */
                    return(status);
 800f69a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800f69e:	f000 bd15 	b.w	80100cc <_fx_file_write+0xe74>
                }

                /* Determine if we are adding a sector after a write filled the previously
                   allocated cluster exactly.  */
                if ((file_ptr -> fx_file_current_relative_sector >=
 800f6a2:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800f6a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
                     (media_ptr -> fx_media_sectors_per_cluster - 1)) &&
 800f6a8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800f6ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f6ae:	3b01      	subs	r3, #1
                if ((file_ptr -> fx_file_current_relative_sector >=
 800f6b0:	429a      	cmp	r2, r3
 800f6b2:	f0c0 80cc 	bcc.w	800f84e <_fx_file_write+0x5f6>
                    (file_ptr -> fx_file_current_logical_offset >=
 800f6b6:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800f6ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
                     media_ptr -> fx_media_bytes_per_sector))
 800f6bc:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800f6c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     (media_ptr -> fx_media_sectors_per_cluster - 1)) &&
 800f6c2:	429a      	cmp	r2, r3
 800f6c4:	f0c0 80c3 	bcc.w	800f84e <_fx_file_write+0x5f6>
                {

                    /* Yes, we need to adjust all of the pertinent file parameters for
                       writing into this newly allocated cluster.  */
                    file_ptr -> fx_file_current_physical_cluster =  FAT_index;
 800f6c8:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800f6cc:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800f6d0:	6213      	str	r3, [r2, #32]
                    file_ptr -> fx_file_current_relative_cluster++;
 800f6d2:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800f6d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f6d8:	1c5a      	adds	r2, r3, #1
 800f6da:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800f6de:	635a      	str	r2, [r3, #52]	; 0x34
                    file_ptr -> fx_file_current_relative_sector =   0;
 800f6e0:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800f6e4:	2300      	movs	r3, #0
 800f6e6:	6393      	str	r3, [r2, #56]	; 0x38
                    file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800f6e8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800f6ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f6ee:	2200      	movs	r2, #0
 800f6f0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800f6f4:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
                        (((ULONG64)(FAT_index - FX_FAT_ENTRY_START)) *
 800f6f8:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800f6fc:	3b02      	subs	r3, #2
 800f6fe:	2200      	movs	r2, #0
 800f700:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800f704:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
                         ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 800f708:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800f70c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f70e:	2200      	movs	r2, #0
 800f710:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800f714:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
                        (((ULONG64)(FAT_index - FX_FAT_ENTRY_START)) *
 800f718:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 800f71c:	462b      	mov	r3, r5
 800f71e:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 800f722:	4642      	mov	r2, r8
 800f724:	fb02 f203 	mul.w	r2, r2, r3
 800f728:	464b      	mov	r3, r9
 800f72a:	4621      	mov	r1, r4
 800f72c:	fb01 f303 	mul.w	r3, r1, r3
 800f730:	4413      	add	r3, r2
 800f732:	4622      	mov	r2, r4
 800f734:	4641      	mov	r1, r8
 800f736:	fba2 1201 	umull	r1, r2, r2, r1
 800f73a:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 800f73e:	460a      	mov	r2, r1
 800f740:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800f744:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 800f748:	4413      	add	r3, r2
 800f74a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
                    file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800f74e:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 800f752:	4623      	mov	r3, r4
 800f754:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 800f758:	4602      	mov	r2, r0
 800f75a:	189b      	adds	r3, r3, r2
 800f75c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800f760:	462b      	mov	r3, r5
 800f762:	460a      	mov	r2, r1
 800f764:	4153      	adcs	r3, r2
 800f766:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800f76a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800f76e:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800f772:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
                    file_ptr -> fx_file_current_logical_offset =    0;
 800f776:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800f77a:	2300      	movs	r3, #0
 800f77c:	6313      	str	r3, [r2, #48]	; 0x30
 800f77e:	e066      	b.n	800f84e <_fx_file_write+0x5f6>
            {

                /* This is the first cluster allocated for the file.  Just
                   remember it as being the first and setup the other file
                   pointers accordingly.  */
                file_ptr -> fx_file_first_physical_cluster =    FAT_index;
 800f780:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800f784:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800f788:	6153      	str	r3, [r2, #20]
                file_ptr -> fx_file_current_physical_cluster =  FAT_index;
 800f78a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800f78e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800f792:	6213      	str	r3, [r2, #32]
                file_ptr -> fx_file_current_relative_cluster =  0;
 800f794:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800f798:	2300      	movs	r3, #0
 800f79a:	6353      	str	r3, [r2, #52]	; 0x34
                file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800f79c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800f7a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f7a2:	2200      	movs	r2, #0
 800f7a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800f7a8:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
                    (((ULONG64)(FAT_index - FX_FAT_ENTRY_START)) *
 800f7ac:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800f7b0:	3b02      	subs	r3, #2
 800f7b2:	2200      	movs	r2, #0
 800f7b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800f7b8:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
                     ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 800f7bc:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800f7c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f7c2:	2200      	movs	r2, #0
 800f7c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800f7c8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
                    (((ULONG64)(FAT_index - FX_FAT_ENTRY_START)) *
 800f7cc:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 800f7d0:	462b      	mov	r3, r5
 800f7d2:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800f7d6:	4642      	mov	r2, r8
 800f7d8:	fb02 f203 	mul.w	r2, r2, r3
 800f7dc:	464b      	mov	r3, r9
 800f7de:	4621      	mov	r1, r4
 800f7e0:	fb01 f303 	mul.w	r3, r1, r3
 800f7e4:	4413      	add	r3, r2
 800f7e6:	4622      	mov	r2, r4
 800f7e8:	4641      	mov	r1, r8
 800f7ea:	fba2 1201 	umull	r1, r2, r2, r1
 800f7ee:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 800f7f2:	460a      	mov	r2, r1
 800f7f4:	f8c7 2170 	str.w	r2, [r7, #368]	; 0x170
 800f7f8:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800f7fc:	4413      	add	r3, r2
 800f7fe:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
                file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800f802:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 800f806:	4623      	mov	r3, r4
 800f808:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 800f80c:	4602      	mov	r2, r0
 800f80e:	189b      	adds	r3, r3, r2
 800f810:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800f814:	462b      	mov	r3, r5
 800f816:	460a      	mov	r2, r1
 800f818:	4153      	adcs	r3, r2
 800f81a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800f81e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800f822:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800f826:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
#ifdef FX_ENABLE_FAULT_TOLERANT
                if (file_ptr -> fx_file_last_physical_cluster == 0)
#endif /* FX_ENABLE_FAULT_TOLERANT */
                {
                    file_ptr -> fx_file_current_logical_offset =    0;
 800f82a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800f82e:	2300      	movs	r3, #0
 800f830:	6313      	str	r3, [r2, #48]	; 0x30
                    file_ptr -> fx_file_current_file_offset =       0;
 800f832:	f8d7 119c 	ldr.w	r1, [r7, #412]	; 0x19c
 800f836:	f04f 0200 	mov.w	r2, #0
 800f83a:	f04f 0300 	mov.w	r3, #0
 800f83e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
                }

                /* Also remember this as the first cluster in the directory
                   entry.  */
                file_ptr -> fx_file_dir_entry.fx_dir_entry_cluster =  FAT_index;
 800f842:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800f846:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800f84a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
                }
            }
#endif /* FX_ENABLE_EXFAT */

            /* Otherwise, remember the new FAT index as the last.  */
            last_cluster =  FAT_index;
 800f84e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800f852:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc

            /* Move to the next FAT entry.  */
            FAT_index =  media_ptr -> fx_media_cluster_search_start;
 800f856:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800f85a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f85e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
        while (clusters)
 800f862:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800f866:	2b00      	cmp	r3, #0
 800f868:	f47f ae8b 	bne.w	800f582 <_fx_file_write+0x32a>
            else
#endif /* FX_ENABLE_FAULT_TOLERANT */
            {

                /* Place an end-of-file marker on the last cluster.  */
                status = _fx_utility_FAT_entry_write(media_ptr, last_cluster, media_ptr -> fx_media_fat_last);
 800f86c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800f870:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800f874:	f8d3 34ac 	ldr.w	r3, [r3, #1196]	; 0x4ac
 800f878:	461a      	mov	r2, r3
 800f87a:	f8d7 11cc 	ldr.w	r1, [r7, #460]	; 0x1cc
 800f87e:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 800f882:	f002 fec6 	bl	8012612 <_fx_utility_FAT_entry_write>
 800f886:	f8c7 01ec 	str.w	r0, [r7, #492]	; 0x1ec
            }

            /* Check for a bad FAT write status.  */
            if (status !=  FX_SUCCESS)
 800f88a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d00a      	beq.n	800f8a8 <_fx_file_write+0x650>
#ifdef FX_ENABLE_FAULT_TOLERANT
                FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

                /* Release media protection.  */
                FX_UNPROTECT
 800f892:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800f896:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800f89a:	4618      	mov	r0, r3
 800f89c:	f008 f8ac 	bl	80179f8 <_tx_mutex_put>

                /* Return the bad status.  */
                return(status);
 800f8a0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800f8a4:	f000 bc12 	b.w	80100cc <_fx_file_write+0xe74>
#ifdef FX_ENABLE_EXFAT
        }
#endif /* FX_ENABLE_EXFAT */

        /* Determine if the file already had clusters.  */
        if (file_ptr -> fx_file_last_physical_cluster)
 800f8a8:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800f8ac:	69db      	ldr	r3, [r3, #28]
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	d019      	beq.n	800f8e6 <_fx_file_write+0x68e>
                         ((replace_clusters == 0) && (first_new_cluster)))
                {
                    status = _fx_utility_FAT_entry_write(media_ptr, file_ptr -> fx_file_last_physical_cluster, first_new_cluster);
                }
#else
                status = _fx_utility_FAT_entry_write(media_ptr, file_ptr -> fx_file_last_physical_cluster, first_new_cluster);
 800f8b2:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800f8b6:	69db      	ldr	r3, [r3, #28]
 800f8b8:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 800f8bc:	4619      	mov	r1, r3
 800f8be:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 800f8c2:	f002 fea6 	bl	8012612 <_fx_utility_FAT_entry_write>
 800f8c6:	f8c7 01ec 	str.w	r0, [r7, #492]	; 0x1ec
#endif /* FX_ENABLE_FAULT_TOLERANT */

                /* Check for a bad FAT write status.  */
                if (status !=  FX_SUCCESS)
 800f8ca:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d009      	beq.n	800f8e6 <_fx_file_write+0x68e>
#ifdef FX_ENABLE_FAULT_TOLERANT
                    FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

                    /* Release media protection.  */
                    FX_UNPROTECT
 800f8d2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800f8d6:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800f8da:	4618      	mov	r0, r3
 800f8dc:	f008 f88c 	bl	80179f8 <_tx_mutex_put>

                    /* Return the bad status.  */
                    return(status);
 800f8e0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800f8e4:	e3f2      	b.n	80100cc <_fx_file_write+0xe74>
        else
#endif /* FX_ENABLE_FAULT_TOLERANT */
        {

            /* Update the file control block with the last physical cluster.  */
            file_ptr -> fx_file_last_physical_cluster =  last_cluster;
 800f8e6:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800f8ea:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800f8ee:	61d3      	str	r3, [r2, #28]
        }
    }

    /* Check for a need to increment to the next sector within a previously
       allocated cluster.  */
    if (file_ptr -> fx_file_current_logical_offset >=
 800f8f0:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800f8f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
        media_ptr -> fx_media_bytes_per_sector)
 800f8f6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800f8fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    if (file_ptr -> fx_file_current_logical_offset >=
 800f8fc:	429a      	cmp	r2, r3
 800f8fe:	d31b      	bcc.n	800f938 <_fx_file_write+0x6e0>
    {

        /* Update the sector specific file parameters to start at the
           next logical sector.  */
        file_ptr -> fx_file_current_logical_sector++;
 800f900:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800f904:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800f908:	1c51      	adds	r1, r2, #1
 800f90a:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 800f90e:	f143 0300 	adc.w	r3, r3, #0
 800f912:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800f916:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800f91a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800f91e:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
        file_ptr -> fx_file_current_relative_sector++;
 800f922:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800f926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f928:	1c5a      	adds	r2, r3, #1
 800f92a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800f92e:	639a      	str	r2, [r3, #56]	; 0x38
        file_ptr -> fx_file_current_logical_offset =  0;
 800f930:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800f934:	2300      	movs	r3, #0
 800f936:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* At this point there is enough room to perform the file write operation.  */

    /* Setup local buffer pointer.  */
    source_ptr =  (UCHAR *)buffer_ptr;
 800f938:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 800f93c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4

    /* Setup the remaining number of bytes to write.  */
    bytes_remaining =  size;
 800f940:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800f944:	2200      	movs	r2, #0
 800f946:	613b      	str	r3, [r7, #16]
 800f948:	617a      	str	r2, [r7, #20]
 800f94a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800f94e:	e9c7 3478 	strd	r3, r4, [r7, #480]	; 0x1e0
        }
    }
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Loop to write all of the bytes.  */
    while (bytes_remaining)
 800f952:	e290      	b.n	800fe76 <_fx_file_write+0xc1e>
    {

        /* Determine if a beginning or ending partial write is required.  */
        if ((file_ptr -> fx_file_current_logical_offset) ||
 800f954:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800f958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d111      	bne.n	800f982 <_fx_file_write+0x72a>
            (bytes_remaining < media_ptr -> fx_media_bytes_per_sector))
 800f95e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800f962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f964:	2200      	movs	r2, #0
 800f966:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800f96a:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
        if ((file_ptr -> fx_file_current_logical_offset) ||
 800f96e:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	; 0x1e0
 800f972:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 800f976:	4621      	mov	r1, r4
 800f978:	428a      	cmp	r2, r1
 800f97a:	4629      	mov	r1, r5
 800f97c:	418b      	sbcs	r3, r1
 800f97e:	f080 8096 	bcs.w	800faae <_fx_file_write+0x856>
                }
            }
            else
#endif /* FX_ENABLE_FAULT_TOLERANT */
            {
                status =  _fx_utility_logical_sector_read(media_ptr,
 800f982:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800f986:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
                                                          file_ptr -> fx_file_current_logical_sector,
                                                          media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DATA_SECTOR);
 800f98a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800f98e:	689a      	ldr	r2, [r3, #8]
                status =  _fx_utility_logical_sector_read(media_ptr,
 800f990:	2304      	movs	r3, #4
 800f992:	9302      	str	r3, [sp, #8]
 800f994:	2301      	movs	r3, #1
 800f996:	9301      	str	r3, [sp, #4]
 800f998:	9200      	str	r2, [sp, #0]
 800f99a:	4602      	mov	r2, r0
 800f99c:	460b      	mov	r3, r1
 800f99e:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 800f9a2:	f004 f81b 	bl	80139dc <_fx_utility_logical_sector_read>
 800f9a6:	f8c7 01ec 	str.w	r0, [r7, #492]	; 0x1ec
            }

            /* Check for good completion status.  */
            if (status !=  FX_SUCCESS)
 800f9aa:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	d009      	beq.n	800f9c6 <_fx_file_write+0x76e>
#ifdef FX_ENABLE_FAULT_TOLERANT
                FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

                /* Release media protection.  */
                FX_UNPROTECT
 800f9b2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800f9b6:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800f9ba:	4618      	mov	r0, r3
 800f9bc:	f008 f81c 	bl	80179f8 <_tx_mutex_put>

                /* Return the error status.  */
                return(status);
 800f9c0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800f9c4:	e382      	b.n	80100cc <_fx_file_write+0xe74>
            }

            /* Copy the appropriate number of bytes into the destination buffer.  */
            copy_bytes =  media_ptr -> fx_media_bytes_per_sector -
 800f9c6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800f9ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
                file_ptr -> fx_file_current_logical_offset;
 800f9cc:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800f9d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            copy_bytes =  media_ptr -> fx_media_bytes_per_sector -
 800f9d2:	1ad3      	subs	r3, r2, r3
 800f9d4:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8

            /* Check to see if only a portion of the sector needs to be
               copied.  */
            if (copy_bytes > bytes_remaining)
 800f9d8:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 800f9dc:	2200      	movs	r2, #0
 800f9de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800f9e2:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800f9e6:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	; 0x1e0
 800f9ea:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 800f9ee:	4621      	mov	r1, r4
 800f9f0:	428a      	cmp	r2, r1
 800f9f2:	4629      	mov	r1, r5
 800f9f4:	418b      	sbcs	r3, r1
 800f9f6:	d203      	bcs.n	800fa00 <_fx_file_write+0x7a8>
            {

                /* Adjust the number of bytes to copy.  */
                copy_bytes =  (ULONG)bytes_remaining;
 800f9f8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800f9fc:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
            }

            /* Actually perform the memory copy.  */
            _fx_utility_memory_copy(source_ptr, ((UCHAR *)media_ptr -> fx_media_memory_buffer) +  /* Use case of memcpy is verified. */
 800fa00:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800fa04:	689a      	ldr	r2, [r3, #8]
                                    file_ptr -> fx_file_current_logical_offset,
 800fa06:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800fa0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            _fx_utility_memory_copy(source_ptr, ((UCHAR *)media_ptr -> fx_media_memory_buffer) +  /* Use case of memcpy is verified. */
 800fa0c:	4413      	add	r3, r2
 800fa0e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800fa12:	4619      	mov	r1, r3
 800fa14:	f8d7 01d4 	ldr.w	r0, [r7, #468]	; 0x1d4
 800fa18:	f004 fbdc 	bl	80141d4 <_fx_utility_memory_copy>
                                    copy_bytes);

            /* Write back the current logical sector.  */
            status =  _fx_utility_logical_sector_write(media_ptr, file_ptr -> fx_file_current_logical_sector,
 800fa1c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800fa20:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
                                                       media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DATA_SECTOR);
 800fa24:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800fa28:	689a      	ldr	r2, [r3, #8]
            status =  _fx_utility_logical_sector_write(media_ptr, file_ptr -> fx_file_current_logical_sector,
 800fa2a:	2304      	movs	r3, #4
 800fa2c:	9302      	str	r3, [sp, #8]
 800fa2e:	2301      	movs	r3, #1
 800fa30:	9301      	str	r3, [sp, #4]
 800fa32:	9200      	str	r2, [sp, #0]
 800fa34:	4602      	mov	r2, r0
 800fa36:	460b      	mov	r3, r1
 800fa38:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 800fa3c:	f004 fa62 	bl	8013f04 <_fx_utility_logical_sector_write>
 800fa40:	f8c7 01ec 	str.w	r0, [r7, #492]	; 0x1ec

            /* Check for good completion status.  */
            if (status !=  FX_SUCCESS)
 800fa44:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d009      	beq.n	800fa60 <_fx_file_write+0x808>
#ifdef FX_ENABLE_FAULT_TOLERANT
                FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

                /* Release media protection.  */
                FX_UNPROTECT
 800fa4c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800fa50:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800fa54:	4618      	mov	r0, r3
 800fa56:	f007 ffcf 	bl	80179f8 <_tx_mutex_put>

                /* Return the error status.  */
                return(status);
 800fa5a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800fa5e:	e335      	b.n	80100cc <_fx_file_write+0xe74>
            }


            /* Increment the logical sector byte offset.  */
            file_ptr -> fx_file_current_logical_offset =
                file_ptr -> fx_file_current_logical_offset + copy_bytes;
 800fa60:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800fa64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fa66:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 800fa6a:	441a      	add	r2, r3
            file_ptr -> fx_file_current_logical_offset =
 800fa6c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800fa70:	631a      	str	r2, [r3, #48]	; 0x30

            /* Adjust the remaining bytes to read.  */
            bytes_remaining =  bytes_remaining - copy_bytes;
 800fa72:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 800fa76:	2200      	movs	r2, #0
 800fa78:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800fa7c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800fa80:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	; 0x1e0
 800fa84:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 800fa88:	4621      	mov	r1, r4
 800fa8a:	1a51      	subs	r1, r2, r1
 800fa8c:	60b9      	str	r1, [r7, #8]
 800fa8e:	4629      	mov	r1, r5
 800fa90:	eb63 0301 	sbc.w	r3, r3, r1
 800fa94:	60fb      	str	r3, [r7, #12]
 800fa96:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800fa9a:	e9c7 3478 	strd	r3, r4, [r7, #480]	; 0x1e0

            /* Adjust the pointer to the source buffer.  */
            source_ptr =  source_ptr + copy_bytes;
 800fa9e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800faa2:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 800faa6:	4413      	add	r3, r2
 800faa8:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 800faac:	e10d      	b.n	800fcca <_fx_file_write+0xa72>
        {

            /* Attempt to write multiple sectors directly to the media.  */

            /* Calculate the number of whole sectors to write.  */
            sectors =  (UINT)(bytes_remaining / media_ptr -> fx_media_bytes_per_sector);
 800faae:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800fab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fab4:	2200      	movs	r2, #0
 800fab6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800faba:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800fabe:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 800fac2:	e9d7 0178 	ldrd	r0, r1, [r7, #480]	; 0x1e0
 800fac6:	f7f0 fcf5 	bl	80004b4 <__aeabi_uldivmod>
 800faca:	4602      	mov	r2, r0
 800facc:	460b      	mov	r3, r1
 800face:	4613      	mov	r3, r2
 800fad0:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8

            next_cluster = cluster = file_ptr -> fx_file_current_physical_cluster;
 800fad4:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800fad8:	6a1b      	ldr	r3, [r3, #32]
 800fada:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800fade:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800fae2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4

            for (i = (media_ptr -> fx_media_sectors_per_cluster -
 800fae6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800faea:	6d5a      	ldr	r2, [r3, #84]	; 0x54
                      file_ptr -> fx_file_current_relative_sector); i < sectors; i += media_ptr -> fx_media_sectors_per_cluster)
 800faec:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800faf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            for (i = (media_ptr -> fx_media_sectors_per_cluster -
 800faf2:	1ad3      	subs	r3, r2, r3
 800faf4:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800faf8:	e03f      	b.n	800fb7a <_fx_file_write+0x922>
                    cluster++;
                }
                else
                {
#endif /* FX_ENABLE_EXFAT */
                    status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 800fafa:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 800fafe:	461a      	mov	r2, r3
 800fb00:	f8d7 11c8 	ldr.w	r1, [r7, #456]	; 0x1c8
 800fb04:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 800fb08:	f002 fb5a 	bl	80121c0 <_fx_utility_FAT_entry_read>
 800fb0c:	f8c7 01ec 	str.w	r0, [r7, #492]	; 0x1ec

                    /* Determine if an error is present.  */
                    if ((status != FX_SUCCESS) || (next_cluster < FX_FAT_ENTRY_START) ||
 800fb10:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	d10d      	bne.n	800fb34 <_fx_file_write+0x8dc>
 800fb18:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800fb1c:	2b01      	cmp	r3, #1
 800fb1e:	d909      	bls.n	800fb34 <_fx_file_write+0x8dc>
                        (next_cluster > media_ptr -> fx_media_fat_reserved))
 800fb20:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800fb24:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800fb28:	f8d3 24a8 	ldr.w	r2, [r3, #1192]	; 0x4a8
 800fb2c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
                    if ((status != FX_SUCCESS) || (next_cluster < FX_FAT_ENTRY_START) ||
 800fb30:	429a      	cmp	r2, r3
 800fb32:	d20f      	bcs.n	800fb54 <_fx_file_write+0x8fc>
#ifdef FX_ENABLE_FAULT_TOLERANT
                        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

                        /* Release media protection.  */
                        FX_UNPROTECT
 800fb34:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800fb38:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800fb3c:	4618      	mov	r0, r3
 800fb3e:	f007 ff5b 	bl	80179f8 <_tx_mutex_put>

                        /* Send error message back to caller.  */
                        if (status != FX_SUCCESS)
 800fb42:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d002      	beq.n	800fb50 <_fx_file_write+0x8f8>
                        {
                            return(status);
 800fb4a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800fb4e:	e2bd      	b.n	80100cc <_fx_file_write+0xe74>
                        }
                        else
                        {
                            return(FX_FILE_CORRUPT);
 800fb50:	2308      	movs	r3, #8
 800fb52:	e2bb      	b.n	80100cc <_fx_file_write+0xe74>
                        }
                    }

                    if (next_cluster != cluster + 1)
 800fb54:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800fb58:	1c5a      	adds	r2, r3, #1
 800fb5a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800fb5e:	429a      	cmp	r2, r3
 800fb60:	d112      	bne.n	800fb88 <_fx_file_write+0x930>
                    {
                        break;
                    }
                    else
                    {
                        cluster = next_cluster;
 800fb62:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800fb66:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
                      file_ptr -> fx_file_current_relative_sector); i < sectors; i += media_ptr -> fx_media_sectors_per_cluster)
 800fb6a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800fb6e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fb70:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 800fb74:	4413      	add	r3, r2
 800fb76:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800fb7a:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800fb7e:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800fb82:	429a      	cmp	r2, r3
 800fb84:	d3b9      	bcc.n	800fafa <_fx_file_write+0x8a2>
 800fb86:	e000      	b.n	800fb8a <_fx_file_write+0x932>
                        break;
 800fb88:	bf00      	nop
#ifdef FX_ENABLE_EXFAT
                }
#endif /* FX_ENABLE_EXFAT */
            }

            if (i < sectors)
 800fb8a:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800fb8e:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800fb92:	429a      	cmp	r2, r3
 800fb94:	d203      	bcs.n	800fb9e <_fx_file_write+0x946>
            {
                sectors = i;
 800fb96:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 800fb9a:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
            }

            /* Perform the data write directly from the user's buffer of
               the appropriate number of sectors.  */
            status =  _fx_utility_logical_sector_write(media_ptr, file_ptr -> fx_file_current_logical_sector,
 800fb9e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800fba2:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800fba6:	2304      	movs	r3, #4
 800fba8:	9302      	str	r3, [sp, #8]
 800fbaa:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800fbae:	9301      	str	r3, [sp, #4]
 800fbb0:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800fbb4:	9300      	str	r3, [sp, #0]
 800fbb6:	4602      	mov	r2, r0
 800fbb8:	460b      	mov	r3, r1
 800fbba:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 800fbbe:	f004 f9a1 	bl	8013f04 <_fx_utility_logical_sector_write>
 800fbc2:	f8c7 01ec 	str.w	r0, [r7, #492]	; 0x1ec
                                                       source_ptr, (ULONG) sectors, FX_DATA_SECTOR);

            /* Check for good completion status.  */
            if (status !=  FX_SUCCESS)
 800fbc6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d009      	beq.n	800fbe2 <_fx_file_write+0x98a>
#ifdef FX_ENABLE_FAULT_TOLERANT
                FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

                /* Release media protection.  */
                FX_UNPROTECT
 800fbce:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800fbd2:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800fbd6:	4618      	mov	r0, r3
 800fbd8:	f007 ff0e 	bl	80179f8 <_tx_mutex_put>

                /* Return the error status.  */
                return(status);
 800fbdc:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800fbe0:	e274      	b.n	80100cc <_fx_file_write+0xe74>

            /* Increment the current logical sector.  Subtract one from
               the sector count because we are going to use the logical
               offset to do additional sector/cluster arithmetic below.  */
            file_ptr -> fx_file_current_logical_sector =
                file_ptr -> fx_file_current_logical_sector +
 800fbe2:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800fbe6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
                (sectors - 1);
 800fbea:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800fbee:	3b01      	subs	r3, #1
 800fbf0:	2200      	movs	r2, #0
 800fbf2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800fbf6:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
                file_ptr -> fx_file_current_logical_sector +
 800fbfa:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 800fbfe:	4623      	mov	r3, r4
 800fc00:	18c3      	adds	r3, r0, r3
 800fc02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800fc06:	462b      	mov	r3, r5
 800fc08:	eb41 0303 	adc.w	r3, r1, r3
 800fc0c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
            file_ptr -> fx_file_current_logical_sector =
 800fc10:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800fc14:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800fc18:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28

            /* Move the relative cluster and sector as well.  */
            file_ptr -> fx_file_current_relative_cluster = file_ptr -> fx_file_current_relative_cluster +
 800fc1c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800fc20:	6b59      	ldr	r1, [r3, #52]	; 0x34
                (file_ptr -> fx_file_current_relative_sector + (sectors - 1)) /
 800fc22:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800fc26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fc28:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800fc2c:	4413      	add	r3, r2
 800fc2e:	1e5a      	subs	r2, r3, #1
                media_ptr -> fx_media_sectors_per_cluster;
 800fc30:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800fc34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
                (file_ptr -> fx_file_current_relative_sector + (sectors - 1)) /
 800fc36:	fbb2 f3f3 	udiv	r3, r2, r3
            file_ptr -> fx_file_current_relative_cluster = file_ptr -> fx_file_current_relative_cluster +
 800fc3a:	18ca      	adds	r2, r1, r3
 800fc3c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800fc40:	635a      	str	r2, [r3, #52]	; 0x34

            file_ptr -> fx_file_current_relative_sector =
                (file_ptr -> fx_file_current_relative_sector + (sectors - 1)) %
 800fc42:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800fc46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fc48:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800fc4c:	4413      	add	r3, r2
 800fc4e:	1e59      	subs	r1, r3, #1
                media_ptr -> fx_media_sectors_per_cluster;
 800fc50:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800fc54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
                (file_ptr -> fx_file_current_relative_sector + (sectors - 1)) %
 800fc56:	fbb1 f3f2 	udiv	r3, r1, r2
 800fc5a:	fb02 f303 	mul.w	r3, r2, r3
 800fc5e:	1aca      	subs	r2, r1, r3
            file_ptr -> fx_file_current_relative_sector =
 800fc60:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800fc64:	639a      	str	r2, [r3, #56]	; 0x38

            /* Increment the logical sector byte offset.  */
            file_ptr -> fx_file_current_logical_offset =
                media_ptr -> fx_media_bytes_per_sector;
 800fc66:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800fc6a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
            file_ptr -> fx_file_current_logical_offset =
 800fc6c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800fc70:	631a      	str	r2, [r3, #48]	; 0x30

            file_ptr -> fx_file_current_physical_cluster = cluster;
 800fc72:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800fc76:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800fc7a:	6213      	str	r3, [r2, #32]

            /* Adjust the remaining bytes.  */
            bytes_remaining =  bytes_remaining -
                (((ULONG)media_ptr -> fx_media_bytes_per_sector) * sectors);
 800fc7c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800fc80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fc82:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800fc86:	fb02 f303 	mul.w	r3, r2, r3
 800fc8a:	2200      	movs	r2, #0
 800fc8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800fc90:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
            bytes_remaining =  bytes_remaining -
 800fc94:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	; 0x1e0
 800fc98:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 800fc9c:	4621      	mov	r1, r4
 800fc9e:	1a51      	subs	r1, r2, r1
 800fca0:	6039      	str	r1, [r7, #0]
 800fca2:	4629      	mov	r1, r5
 800fca4:	eb63 0301 	sbc.w	r3, r3, r1
 800fca8:	607b      	str	r3, [r7, #4]
 800fcaa:	e9d7 3400 	ldrd	r3, r4, [r7]
 800fcae:	e9c7 3478 	strd	r3, r4, [r7, #480]	; 0x1e0

            /* Adjust the pointer to the source buffer.  */
            source_ptr =  source_ptr +
                (((ULONG)media_ptr -> fx_media_bytes_per_sector) * sectors);
 800fcb2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800fcb6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fcb8:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800fcbc:	fb03 f202 	mul.w	r2, r3, r2
            source_ptr =  source_ptr +
 800fcc0:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800fcc4:	4413      	add	r3, r2
 800fcc6:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
        }

        /* At this point, we have either written a partial sector or have successfully
           written one or more whole sectors.  Determine if we are at the end of
           the current logical sector.  */
        if (file_ptr -> fx_file_current_logical_offset >=
 800fcca:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800fcce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
            media_ptr -> fx_media_bytes_per_sector)
 800fcd0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800fcd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if (file_ptr -> fx_file_current_logical_offset >=
 800fcd6:	429a      	cmp	r2, r3
 800fcd8:	f0c0 80cd 	bcc.w	800fe76 <_fx_file_write+0xc1e>
        {

            /* Determine if we are at the exact physical end of the file.  */
            if ((bytes_remaining == 0) &&
 800fcdc:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	; 0x1e0
 800fce0:	4313      	orrs	r3, r2
 800fce2:	d11f      	bne.n	800fd24 <_fx_file_write+0xacc>
                ((file_ptr -> fx_file_current_file_offset + size) >=
 800fce4:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800fce8:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800fcec:	f8d7 1194 	ldr.w	r1, [r7, #404]	; 0x194
 800fcf0:	2000      	movs	r0, #0
 800fcf2:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800fcf6:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
 800fcfa:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 800fcfe:	4621      	mov	r1, r4
 800fd00:	1851      	adds	r1, r2, r1
 800fd02:	67b9      	str	r1, [r7, #120]	; 0x78
 800fd04:	4629      	mov	r1, r5
 800fd06:	414b      	adcs	r3, r1
 800fd08:	67fb      	str	r3, [r7, #124]	; 0x7c
                 file_ptr -> fx_file_current_available_size))
 800fd0a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800fd0e:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
            if ((bytes_remaining == 0) &&
 800fd12:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800fd16:	4621      	mov	r1, r4
 800fd18:	4291      	cmp	r1, r2
 800fd1a:	4629      	mov	r1, r5
 800fd1c:	eb71 0303 	sbcs.w	r3, r1, r3
 800fd20:	f080 80af 	bcs.w	800fe82 <_fx_file_write+0xc2a>
            /* We need to move to the next logical sector, but first
               determine if the next logical sector is within the same
               cluster.  */

            /* Increment the current relative sector in the cluster.  */
            file_ptr -> fx_file_current_relative_sector++;
 800fd24:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800fd28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd2a:	1c5a      	adds	r2, r3, #1
 800fd2c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800fd30:	639a      	str	r2, [r3, #56]	; 0x38

            /* Determine if this is in a new cluster.  */
            if (file_ptr -> fx_file_current_relative_sector >=
 800fd32:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800fd36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
                media_ptr -> fx_media_sectors_per_cluster)
 800fd38:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800fd3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
            if (file_ptr -> fx_file_current_relative_sector >=
 800fd3e:	429a      	cmp	r2, r3
 800fd40:	f0c0 8086 	bcc.w	800fe50 <_fx_file_write+0xbf8>
                {
#endif /* FX_ENABLE_EXFAT */

                    /* Read the FAT entry of the current cluster to find
                       the next cluster.  */
                    status =  _fx_utility_FAT_entry_read(media_ptr,
 800fd44:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800fd48:	6a19      	ldr	r1, [r3, #32]
 800fd4a:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 800fd4e:	461a      	mov	r2, r3
 800fd50:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 800fd54:	f002 fa34 	bl	80121c0 <_fx_utility_FAT_entry_read>
 800fd58:	f8c7 01ec 	str.w	r0, [r7, #492]	; 0x1ec
                                                         file_ptr -> fx_file_current_physical_cluster, &next_cluster);

                    /* Determine if an error is present.  */
                    if ((status != FX_SUCCESS) || (next_cluster < FX_FAT_ENTRY_START) ||
 800fd5c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	d10d      	bne.n	800fd80 <_fx_file_write+0xb28>
 800fd64:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800fd68:	2b01      	cmp	r3, #1
 800fd6a:	d909      	bls.n	800fd80 <_fx_file_write+0xb28>
                        (next_cluster > media_ptr -> fx_media_fat_reserved))
 800fd6c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800fd70:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800fd74:	f8d3 24a8 	ldr.w	r2, [r3, #1192]	; 0x4a8
 800fd78:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
                    if ((status != FX_SUCCESS) || (next_cluster < FX_FAT_ENTRY_START) ||
 800fd7c:	429a      	cmp	r2, r3
 800fd7e:	d20f      	bcs.n	800fda0 <_fx_file_write+0xb48>
#ifdef FX_ENABLE_FAULT_TOLERANT
                        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

                        /* Release media protection.  */
                        FX_UNPROTECT
 800fd80:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800fd84:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800fd88:	4618      	mov	r0, r3
 800fd8a:	f007 fe35 	bl	80179f8 <_tx_mutex_put>

                        /* Send error message back to caller.  */
                        if (status != FX_SUCCESS)
 800fd8e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d002      	beq.n	800fd9c <_fx_file_write+0xb44>
                        {
                            return(status);
 800fd96:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800fd9a:	e197      	b.n	80100cc <_fx_file_write+0xe74>
                        }
                        else
                        {
                            return(FX_FILE_CORRUPT);
 800fd9c:	2308      	movs	r3, #8
 800fd9e:	e195      	b.n	80100cc <_fx_file_write+0xe74>
                }
#endif /* FX_ENABLE_EXFAT */

                /* Otherwise, we have a new cluster.  Save it in the file
                   control block and calculate a new logical sector value.  */
                file_ptr -> fx_file_current_physical_cluster =  next_cluster;
 800fda0:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 800fda4:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800fda8:	621a      	str	r2, [r3, #32]
                file_ptr -> fx_file_current_relative_cluster++;
 800fdaa:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800fdae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fdb0:	1c5a      	adds	r2, r3, #1
 800fdb2:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800fdb6:	635a      	str	r2, [r3, #52]	; 0x34
                file_ptr -> fx_file_current_logical_sector = ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800fdb8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800fdbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fdbe:	2200      	movs	r2, #0
 800fdc0:	673b      	str	r3, [r7, #112]	; 0x70
 800fdc2:	677a      	str	r2, [r7, #116]	; 0x74
                    ((((ULONG64)next_cluster) - FX_FAT_ENTRY_START) *
 800fdc4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800fdc8:	2200      	movs	r2, #0
 800fdca:	66bb      	str	r3, [r7, #104]	; 0x68
 800fdcc:	66fa      	str	r2, [r7, #108]	; 0x6c
 800fdce:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800fdd2:	460b      	mov	r3, r1
 800fdd4:	3b02      	subs	r3, #2
 800fdd6:	663b      	str	r3, [r7, #96]	; 0x60
 800fdd8:	4613      	mov	r3, r2
 800fdda:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
 800fdde:	667b      	str	r3, [r7, #100]	; 0x64
                     ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 800fde0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800fde4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fde6:	2200      	movs	r2, #0
 800fde8:	65bb      	str	r3, [r7, #88]	; 0x58
 800fdea:	65fa      	str	r2, [r7, #92]	; 0x5c
                    ((((ULONG64)next_cluster) - FX_FAT_ENTRY_START) *
 800fdec:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800fdf0:	462b      	mov	r3, r5
 800fdf2:	e9d7 8916 	ldrd	r8, r9, [r7, #88]	; 0x58
 800fdf6:	4642      	mov	r2, r8
 800fdf8:	fb02 f203 	mul.w	r2, r2, r3
 800fdfc:	464b      	mov	r3, r9
 800fdfe:	4621      	mov	r1, r4
 800fe00:	fb01 f303 	mul.w	r3, r1, r3
 800fe04:	4413      	add	r3, r2
 800fe06:	4622      	mov	r2, r4
 800fe08:	4641      	mov	r1, r8
 800fe0a:	fba2 1201 	umull	r1, r2, r2, r1
 800fe0e:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 800fe12:	460a      	mov	r2, r1
 800fe14:	f8c7 2168 	str.w	r2, [r7, #360]	; 0x168
 800fe18:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 800fe1c:	4413      	add	r3, r2
 800fe1e:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
                file_ptr -> fx_file_current_logical_sector = ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800fe22:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 800fe26:	4623      	mov	r3, r4
 800fe28:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	; 0x168
 800fe2c:	4602      	mov	r2, r0
 800fe2e:	189b      	adds	r3, r3, r2
 800fe30:	653b      	str	r3, [r7, #80]	; 0x50
 800fe32:	462b      	mov	r3, r5
 800fe34:	460a      	mov	r2, r1
 800fe36:	4153      	adcs	r3, r2
 800fe38:	657b      	str	r3, [r7, #84]	; 0x54
 800fe3a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800fe3e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800fe42:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
                file_ptr -> fx_file_current_relative_sector =  0;
 800fe46:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800fe4a:	2300      	movs	r3, #0
 800fe4c:	6393      	str	r3, [r2, #56]	; 0x38
 800fe4e:	e00e      	b.n	800fe6e <_fx_file_write+0xc16>
            else
            {

                /* Still within the same cluster so just increment the
                   logical sector.  */
                file_ptr -> fx_file_current_logical_sector++;
 800fe50:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800fe54:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800fe58:	1c51      	adds	r1, r2, #1
 800fe5a:	64b9      	str	r1, [r7, #72]	; 0x48
 800fe5c:	f143 0300 	adc.w	r3, r3, #0
 800fe60:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fe62:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800fe66:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800fe6a:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
            }

            /* In either case, we are now positioned at a new sector so
               clear the logical sector offset.  */
            file_ptr -> fx_file_current_logical_offset =  0;
 800fe6e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800fe72:	2300      	movs	r3, #0
 800fe74:	6313      	str	r3, [r2, #48]	; 0x30
    while (bytes_remaining)
 800fe76:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	; 0x1e0
 800fe7a:	4313      	orrs	r3, r2
 800fe7c:	f47f ad6a 	bne.w	800f954 <_fx_file_write+0x6fc>
 800fe80:	e000      	b.n	800fe84 <_fx_file_write+0xc2c>
                break;
 800fe82:	bf00      	nop
    }
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Adjust the current file offset accordingly.  */
    file_ptr -> fx_file_current_file_offset =
        file_ptr -> fx_file_current_file_offset + size;
 800fe84:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800fe88:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800fe8c:	f8d7 1194 	ldr.w	r1, [r7, #404]	; 0x194
 800fe90:	2000      	movs	r0, #0
 800fe92:	6439      	str	r1, [r7, #64]	; 0x40
 800fe94:	6478      	str	r0, [r7, #68]	; 0x44
 800fe96:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 800fe9a:	4621      	mov	r1, r4
 800fe9c:	1851      	adds	r1, r2, r1
 800fe9e:	63b9      	str	r1, [r7, #56]	; 0x38
 800fea0:	4629      	mov	r1, r5
 800fea2:	eb43 0101 	adc.w	r1, r3, r1
 800fea6:	63f9      	str	r1, [r7, #60]	; 0x3c
    file_ptr -> fx_file_current_file_offset =
 800fea8:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800feac:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800feb0:	e9c3 1210 	strd	r1, r2, [r3, #64]	; 0x40

    /* Copy the new file size into the directory entry.  */
    file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =
        file_ptr -> fx_file_current_file_size;
 800feb4:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800feb8:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
    file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =
 800febc:	f8d7 119c 	ldr.w	r1, [r7, #412]	; 0x19c
 800fec0:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0

    /* Determine if this write was done past the previous file size.  */
    if (file_ptr -> fx_file_current_file_offset >
 800fec4:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800fec8:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
        file_ptr -> fx_file_current_file_size)
 800fecc:	f8d7 119c 	ldr.w	r1, [r7, #412]	; 0x19c
 800fed0:	e9d1 0112 	ldrd	r0, r1, [r1, #72]	; 0x48
    if (file_ptr -> fx_file_current_file_offset >
 800fed4:	4290      	cmp	r0, r2
 800fed6:	eb71 0303 	sbcs.w	r3, r1, r3
 800feda:	f080 80de 	bcs.w	801009a <_fx_file_write+0xe42>
    {

        /* Yes, we have written past the previous end of the file.  Update
           the file size.  */
        file_ptr -> fx_file_current_file_size =  file_ptr -> fx_file_current_file_offset;
 800fede:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800fee2:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800fee6:	f8d7 119c 	ldr.w	r1, [r7, #412]	; 0x19c
 800feea:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

#ifndef FX_DONT_UPDATE_OPEN_FILES

        /* Search the opened files list to see if the same file is opened for reading.  */
        open_count =  media_ptr -> fx_media_opened_file_count;
 800feee:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800fef2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800fef6:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
        search_ptr =  media_ptr -> fx_media_opened_file_list;
 800fefa:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800fefe:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800ff02:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
        while (open_count)
 800ff06:	e0c3      	b.n	8010090 <_fx_file_write+0xe38>
        {

            /* Is this file the same file opened for reading?  */
            if ((search_ptr != file_ptr) &&
 800ff08:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 800ff0c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800ff10:	429a      	cmp	r2, r3
 800ff12:	f000 80b3 	beq.w	801007c <_fx_file_write+0xe24>
                (search_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector ==
 800ff16:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800ff1a:	e9d3 012a 	ldrd	r0, r1, [r3, #168]	; 0xa8
                 file_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector) &&
 800ff1e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800ff22:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	; 0xa8
            if ((search_ptr != file_ptr) &&
 800ff26:	4299      	cmp	r1, r3
 800ff28:	bf08      	it	eq
 800ff2a:	4290      	cmpeq	r0, r2
 800ff2c:	f040 80a6 	bne.w	801007c <_fx_file_write+0xe24>
                (search_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset ==
 800ff30:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800ff34:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
                 file_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset))
 800ff38:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800ff3c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
                 file_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector) &&
 800ff40:	429a      	cmp	r2, r3
 800ff42:	f040 809b 	bne.w	801007c <_fx_file_write+0xe24>
            {

                /* Yes, the same file is opened for reading.  */

                /* Setup the new size.  */
                search_ptr -> fx_file_current_file_size =  file_ptr -> fx_file_current_file_offset;
 800ff46:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800ff4a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800ff4e:	f8d7 11b0 	ldr.w	r1, [r7, #432]	; 0x1b0
 800ff52:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

                /* Setup the new directory entry.  */
                search_ptr -> fx_file_dir_entry.fx_dir_entry_cluster =      file_ptr -> fx_file_dir_entry.fx_dir_entry_cluster;
 800ff56:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800ff5a:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800ff5e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800ff62:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
                search_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =    file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size;
 800ff66:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800ff6a:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 800ff6e:	f8d7 11b0 	ldr.w	r1, [r7, #432]	; 0x1b0
 800ff72:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
                search_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector =   file_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector;
 800ff76:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800ff7a:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	; 0xa8
 800ff7e:	f8d7 11b0 	ldr.w	r1, [r7, #432]	; 0x1b0
 800ff82:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
                search_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset =  file_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset;
 800ff86:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800ff8a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800ff8e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800ff92:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                /* Setup the last cluster. This really isn't used during reading, but it is nice to keep things
                   consistent.  */
                search_ptr -> fx_file_last_physical_cluster =  file_ptr -> fx_file_last_physical_cluster;
 800ff96:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800ff9a:	69da      	ldr	r2, [r3, #28]
 800ff9c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800ffa0:	61da      	str	r2, [r3, #28]

                /* Update the available clusters as well.  */
                search_ptr -> fx_file_current_available_size =  file_ptr -> fx_file_current_available_size;
 800ffa2:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800ffa6:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800ffaa:	f8d7 11b0 	ldr.w	r1, [r7, #432]	; 0x1b0
 800ffae:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50

                /* Determine if an empty file was previously opened.  */
                if (search_ptr -> fx_file_total_clusters == 0)
 800ffb2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800ffb6:	691b      	ldr	r3, [r3, #16]
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	d15f      	bne.n	801007c <_fx_file_write+0xe24>
                {

                    /* Setup initial parameters.  */
                    search_ptr -> fx_file_total_clusters =            file_ptr -> fx_file_total_clusters;
 800ffbc:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800ffc0:	691a      	ldr	r2, [r3, #16]
 800ffc2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800ffc6:	611a      	str	r2, [r3, #16]
                    search_ptr -> fx_file_current_physical_cluster =  file_ptr -> fx_file_first_physical_cluster;
 800ffc8:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800ffcc:	695a      	ldr	r2, [r3, #20]
 800ffce:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800ffd2:	621a      	str	r2, [r3, #32]
                    search_ptr -> fx_file_current_relative_cluster =  0;
 800ffd4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800ffd8:	2200      	movs	r2, #0
 800ffda:	635a      	str	r2, [r3, #52]	; 0x34
                    search_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800ffdc:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800ffe0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ffe2:	2200      	movs	r2, #0
 800ffe4:	633b      	str	r3, [r7, #48]	; 0x30
 800ffe6:	637a      	str	r2, [r7, #52]	; 0x34
                        (((ULONG64)(file_ptr -> fx_file_first_physical_cluster - FX_FAT_ENTRY_START)) *
 800ffe8:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800ffec:	695b      	ldr	r3, [r3, #20]
 800ffee:	3b02      	subs	r3, #2
 800fff0:	2200      	movs	r2, #0
 800fff2:	62bb      	str	r3, [r7, #40]	; 0x28
 800fff4:	62fa      	str	r2, [r7, #44]	; 0x2c
                         ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 800fff6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800fffa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fffc:	2200      	movs	r2, #0
 800fffe:	623b      	str	r3, [r7, #32]
 8010000:	627a      	str	r2, [r7, #36]	; 0x24
                        (((ULONG64)(file_ptr -> fx_file_first_physical_cluster - FX_FAT_ENTRY_START)) *
 8010002:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8010006:	462b      	mov	r3, r5
 8010008:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 801000c:	4642      	mov	r2, r8
 801000e:	fb02 f203 	mul.w	r2, r2, r3
 8010012:	464b      	mov	r3, r9
 8010014:	4621      	mov	r1, r4
 8010016:	fb01 f303 	mul.w	r3, r1, r3
 801001a:	4413      	add	r3, r2
 801001c:	4622      	mov	r2, r4
 801001e:	4641      	mov	r1, r8
 8010020:	fba2 1201 	umull	r1, r2, r2, r1
 8010024:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8010028:	460a      	mov	r2, r1
 801002a:	f8c7 2160 	str.w	r2, [r7, #352]	; 0x160
 801002e:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8010032:	4413      	add	r3, r2
 8010034:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
                    search_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8010038:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 801003c:	4623      	mov	r3, r4
 801003e:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	; 0x160
 8010042:	4602      	mov	r2, r0
 8010044:	189b      	adds	r3, r3, r2
 8010046:	61bb      	str	r3, [r7, #24]
 8010048:	462b      	mov	r3, r5
 801004a:	460a      	mov	r2, r1
 801004c:	4153      	adcs	r3, r2
 801004e:	61fb      	str	r3, [r7, #28]
 8010050:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8010054:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8010058:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
                    search_ptr -> fx_file_current_relative_sector =   0;
 801005c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8010060:	2200      	movs	r2, #0
 8010062:	639a      	str	r2, [r3, #56]	; 0x38
                    search_ptr -> fx_file_current_logical_offset =    0;
 8010064:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8010068:	2200      	movs	r2, #0
 801006a:	631a      	str	r2, [r3, #48]	; 0x30
                    search_ptr -> fx_file_current_file_offset =       0;
 801006c:	f8d7 11b0 	ldr.w	r1, [r7, #432]	; 0x1b0
 8010070:	f04f 0200 	mov.w	r2, #0
 8010074:	f04f 0300 	mov.w	r3, #0
 8010078:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
                }
            }

            /* Adjust the pointer and decrement the search count.  */
            search_ptr =  search_ptr -> fx_file_opened_next;
 801007c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8010080:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010082:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
            open_count--;
 8010086:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 801008a:	3b01      	subs	r3, #1
 801008c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
        while (open_count)
 8010090:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8010094:	2b00      	cmp	r3, #0
 8010096:	f47f af37 	bne.w	800ff08 <_fx_file_write+0xcb0>
        }
#endif
    }

    /* Finally, mark this file as modified.  */
    file_ptr -> fx_file_modified =  FX_TRUE;
 801009a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 801009e:	2201      	movs	r2, #1
 80100a0:	731a      	strb	r2, [r3, #12]
        file_ptr -> fx_file_maximum_size_used = file_ptr -> fx_file_current_file_offset;
    }
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Invoke file write callback. */
    if (file_ptr -> fx_file_write_notify)
 80100a2:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80100a6:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d006      	beq.n	80100bc <_fx_file_write+0xe64>
    {
        file_ptr -> fx_file_write_notify(file_ptr);
 80100ae:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80100b2:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 80100b6:	f8d7 019c 	ldr.w	r0, [r7, #412]	; 0x19c
 80100ba:	4798      	blx	r3
    }

    /* Release media protection.  */
    FX_UNPROTECT
 80100bc:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80100c0:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 80100c4:	4618      	mov	r0, r3
 80100c6:	f007 fc97 	bl	80179f8 <_tx_mutex_put>

    /* Return a successful status to the caller.  */
    return(FX_SUCCESS);
 80100ca:	2300      	movs	r3, #0
}
 80100cc:	4618      	mov	r0, r3
 80100ce:	f507 77f8 	add.w	r7, r7, #496	; 0x1f0
 80100d2:	46bd      	mov	sp, r7
 80100d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080100d8 <_fx_media_abort>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_media_abort(FX_MEDIA  *media_ptr)
{
 80100d8:	b580      	push	{r7, lr}
 80100da:	b088      	sub	sp, #32
 80100dc:	af00      	add	r7, sp, #0
 80100de:	6078      	str	r0, [r7, #4]


#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_aborts++;
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 80100e6:	1c5a      	adds	r2, r3, #1
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
#endif

    /* Check the media to make sure it is open.  */
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	681b      	ldr	r3, [r3, #0]
 80100f2:	4a3f      	ldr	r2, [pc, #252]	; (80101f0 <_fx_media_abort+0x118>)
 80100f4:	4293      	cmp	r3, r2
 80100f6:	d001      	beq.n	80100fc <_fx_media_abort+0x24>
    {

        /* Return the media not opened error.  */
        return(FX_MEDIA_NOT_OPEN);
 80100f8:	2311      	movs	r3, #17
 80100fa:	e074      	b.n	80101e6 <_fx_media_abort+0x10e>

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_MEDIA_ABORT, media_ptr, 0, 0, 0, FX_TRACE_MEDIA_EVENTS, 0, 0)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	681b      	ldr	r3, [r3, #0]
 8010100:	4a3b      	ldr	r2, [pc, #236]	; (80101f0 <_fx_media_abort+0x118>)
 8010102:	4293      	cmp	r3, r2
 8010104:	d001      	beq.n	801010a <_fx_media_abort+0x32>
 8010106:	2311      	movs	r3, #17
 8010108:	e06d      	b.n	80101e6 <_fx_media_abort+0x10e>
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8010110:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8010114:	4618      	mov	r0, r3
 8010116:	f007 f9f7 	bl	8017508 <_tx_mutex_get>
 801011a:	4603      	mov	r3, r0
 801011c:	2b00      	cmp	r3, #0
 801011e:	d001      	beq.n	8010124 <_fx_media_abort+0x4c>
 8010120:	2311      	movs	r3, #17
 8010122:	e060      	b.n	80101e6 <_fx_media_abort+0x10e>

    /* Loop through the media's open files.  */
    open_count =  media_ptr -> fx_media_opened_file_count;
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 801012a:	61fb      	str	r3, [r7, #28]
    file_ptr =    media_ptr -> fx_media_opened_file_list;
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8010132:	61bb      	str	r3, [r7, #24]
    while (open_count)
 8010134:	e008      	b.n	8010148 <_fx_media_abort+0x70>
    {

        /* Mark the file as aborted.  */
        file_ptr -> fx_file_id =  FX_FILE_ABORTED_ID;
 8010136:	69bb      	ldr	r3, [r7, #24]
 8010138:	4a2e      	ldr	r2, [pc, #184]	; (80101f4 <_fx_media_abort+0x11c>)
 801013a:	601a      	str	r2, [r3, #0]

        /* Adjust the pointer and decrement the file opened count.  */
        file_ptr =  file_ptr -> fx_file_opened_next;
 801013c:	69bb      	ldr	r3, [r7, #24]
 801013e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010140:	61bb      	str	r3, [r7, #24]
        open_count--;
 8010142:	69fb      	ldr	r3, [r7, #28]
 8010144:	3b01      	subs	r3, #1
 8010146:	61fb      	str	r3, [r7, #28]
    while (open_count)
 8010148:	69fb      	ldr	r3, [r7, #28]
 801014a:	2b00      	cmp	r3, #0
 801014c:	d1f3      	bne.n	8010136 <_fx_media_abort+0x5e>
    }

    /* Build the "abort" I/O driver request.  */
    media_ptr -> fx_media_driver_request =      FX_DRIVER_ABORT;
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	2203      	movs	r2, #3
 8010152:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	2290      	movs	r2, #144	; 0x90
 801015a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_ABORT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Call the specified I/O driver with the abort request.  */
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8010164:	6878      	ldr	r0, [r7, #4]
 8010166:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010168:	f3ef 8310 	mrs	r3, PRIMASK
 801016c:	613b      	str	r3, [r7, #16]
    return(posture);
 801016e:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 8010170:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 8010172:	b672      	cpsid	i
    return(int_posture);
 8010174:	68fb      	ldr	r3, [r7, #12]

    /* Now remove this media from the open list.  */

    /* Lockout interrupts for media removal.  */
    FX_DISABLE_INTS
 8010176:	617b      	str	r3, [r7, #20]

    /* See if the media is the only one on the media opened list.  */
    if (_fx_system_media_opened_count == ((ULONG) 1))
 8010178:	4b1f      	ldr	r3, [pc, #124]	; (80101f8 <_fx_media_abort+0x120>)
 801017a:	681b      	ldr	r3, [r3, #0]
 801017c:	2b01      	cmp	r3, #1
 801017e:	d103      	bne.n	8010188 <_fx_media_abort+0xb0>
    {

        /* Only opened media, just set the opened list to NULL.  */
        _fx_system_media_opened_ptr =  FX_NULL;
 8010180:	4b1e      	ldr	r3, [pc, #120]	; (80101fc <_fx_media_abort+0x124>)
 8010182:	2200      	movs	r2, #0
 8010184:	601a      	str	r2, [r3, #0]
 8010186:	e019      	b.n	80101bc <_fx_media_abort+0xe4>
    }
    else
    {

        /* Otherwise, not the only opened media, link-up the neighbors.  */
        (media_ptr -> fx_media_opened_next) -> fx_media_opened_previous =
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
            media_ptr -> fx_media_opened_previous;
 801018e:	687a      	ldr	r2, [r7, #4]
 8010190:	f8d2 20d4 	ldr.w	r2, [r2, #212]	; 0xd4
        (media_ptr -> fx_media_opened_next) -> fx_media_opened_previous =
 8010194:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
        (media_ptr -> fx_media_opened_previous) -> fx_media_opened_next =
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
            media_ptr -> fx_media_opened_next;
 801019e:	687a      	ldr	r2, [r7, #4]
 80101a0:	f8d2 20d0 	ldr.w	r2, [r2, #208]	; 0xd0
        (media_ptr -> fx_media_opened_previous) -> fx_media_opened_next =
 80101a4:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

        /* See if we have to update the opened list head pointer.  */
        if (_fx_system_media_opened_ptr == media_ptr)
 80101a8:	4b14      	ldr	r3, [pc, #80]	; (80101fc <_fx_media_abort+0x124>)
 80101aa:	681b      	ldr	r3, [r3, #0]
 80101ac:	687a      	ldr	r2, [r7, #4]
 80101ae:	429a      	cmp	r2, r3
 80101b0:	d104      	bne.n	80101bc <_fx_media_abort+0xe4>
        {

            /* Yes, move the head pointer to the next opened media. */
            _fx_system_media_opened_ptr =  media_ptr -> fx_media_opened_next;
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80101b8:	4a10      	ldr	r2, [pc, #64]	; (80101fc <_fx_media_abort+0x124>)
 80101ba:	6013      	str	r3, [r2, #0]
        }
    }

    /* Decrement the opened media counter.  */
    _fx_system_media_opened_count--;
 80101bc:	4b0e      	ldr	r3, [pc, #56]	; (80101f8 <_fx_media_abort+0x120>)
 80101be:	681b      	ldr	r3, [r3, #0]
 80101c0:	3b01      	subs	r3, #1
 80101c2:	4a0d      	ldr	r2, [pc, #52]	; (80101f8 <_fx_media_abort+0x120>)
 80101c4:	6013      	str	r3, [r2, #0]

    /* Finally, Indicate that this media is aborted.  */
    media_ptr -> fx_media_id =  FX_MEDIA_ABORTED_ID;
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	4a0d      	ldr	r2, [pc, #52]	; (8010200 <_fx_media_abort+0x128>)
 80101ca:	601a      	str	r2, [r3, #0]
 80101cc:	697b      	ldr	r3, [r7, #20]
 80101ce:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80101d0:	68bb      	ldr	r3, [r7, #8]
 80101d2:	f383 8810 	msr	PRIMASK, r3
}
 80101d6:	bf00      	nop
#ifndef FX_DONT_CREATE_MUTEX

    /* Note that the protection is never released. The mutex delete
       service will handle all threads waiting access to this media
       control block.  */
    tx_mutex_delete(& (media_ptr -> fx_media_protect));
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 80101de:	4618      	mov	r0, r3
 80101e0:	f007 f8e8 	bl	80173b4 <_tx_mutex_delete>
    /* Release media protection.  */
    FX_UNPROTECT
#endif

    /* Return status to the caller.  */
    return(FX_SUCCESS);
 80101e4:	2300      	movs	r3, #0
}
 80101e6:	4618      	mov	r0, r3
 80101e8:	3720      	adds	r7, #32
 80101ea:	46bd      	mov	sp, r7
 80101ec:	bd80      	pop	{r7, pc}
 80101ee:	bf00      	nop
 80101f0:	4d454449 	.word	0x4d454449
 80101f4:	46494c41 	.word	0x46494c41
 80101f8:	200151b8 	.word	0x200151b8
 80101fc:	200151b4 	.word	0x200151b4
 8010200:	4d454441 	.word	0x4d454441

08010204 <_fx_media_boot_info_extract>:
/*                                            check for bimap cache size, */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _fx_media_boot_info_extract(FX_MEDIA *media_ptr)
{
 8010204:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8010208:	b084      	sub	sp, #16
 801020a:	af00      	add	r7, sp, #0
 801020c:	6078      	str	r0, [r7, #4]

UCHAR *boot_sector;


    /* Move the buffer pointer into a local copy.  */
    boot_sector =  media_ptr -> fx_media_driver_buffer;
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010214:	60fb      	str	r3, [r7, #12]

    /* Extract the number of bytes per sector.  */
    media_ptr -> fx_media_bytes_per_sector =    _fx_utility_16_unsigned_read(&boot_sector[FX_BYTES_SECTOR]);
 8010216:	68fb      	ldr	r3, [r7, #12]
 8010218:	330b      	adds	r3, #11
 801021a:	4618      	mov	r0, r3
 801021c:	f001 ff6a 	bl	80120f4 <_fx_utility_16_unsigned_read>
 8010220:	4602      	mov	r2, r0
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	629a      	str	r2, [r3, #40]	; 0x28
    if (media_ptr -> fx_media_bytes_per_sector == 0)
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801022a:	2b00      	cmp	r3, #0
 801022c:	d101      	bne.n	8010232 <_fx_media_boot_info_extract+0x2e>
        return(_fx_utility_exFAT_geometry_check(media_ptr, boot_sector));
    }
    else
    {
#else
        return(FX_MEDIA_INVALID);
 801022e:	2302      	movs	r3, #2
 8010230:	e08c      	b.n	801034c <_fx_media_boot_info_extract+0x148>
#endif /* FX_ENABLE_EXFAT */


        /* FAT12/16/32 volume.  */
        /* Extract the number of sectors per track.  */
        media_ptr -> fx_media_sectors_per_track =   _fx_utility_16_unsigned_read(&boot_sector[FX_SECTORS_PER_TRK]);
 8010232:	68fb      	ldr	r3, [r7, #12]
 8010234:	3318      	adds	r3, #24
 8010236:	4618      	mov	r0, r3
 8010238:	f001 ff5c 	bl	80120f4 <_fx_utility_16_unsigned_read>
 801023c:	4602      	mov	r2, r0
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Extract the number of heads.  */
        media_ptr -> fx_media_heads =               _fx_utility_16_unsigned_read(&boot_sector[FX_HEADS]);
 8010242:	68fb      	ldr	r3, [r7, #12]
 8010244:	331a      	adds	r3, #26
 8010246:	4618      	mov	r0, r3
 8010248:	f001 ff54 	bl	80120f4 <_fx_utility_16_unsigned_read>
 801024c:	4602      	mov	r2, r0
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	631a      	str	r2, [r3, #48]	; 0x30

        /* Extract the total number of sectors.  */
        media_ptr -> fx_media_total_sectors =       _fx_utility_16_unsigned_read(&boot_sector[FX_SECTORS]);
 8010252:	68fb      	ldr	r3, [r7, #12]
 8010254:	3313      	adds	r3, #19
 8010256:	4618      	mov	r0, r3
 8010258:	f001 ff4c 	bl	80120f4 <_fx_utility_16_unsigned_read>
 801025c:	4603      	mov	r3, r0
 801025e:	2200      	movs	r2, #0
 8010260:	4698      	mov	r8, r3
 8010262:	4691      	mov	r9, r2
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	e9c3 890e 	strd	r8, r9, [r3, #56]	; 0x38
        if (media_ptr -> fx_media_total_sectors == 0)
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8010270:	4313      	orrs	r3, r2
 8010272:	d10b      	bne.n	801028c <_fx_media_boot_info_extract+0x88>
        {
            media_ptr -> fx_media_total_sectors = _fx_utility_32_unsigned_read(&boot_sector[FX_HUGE_SECTORS]);
 8010274:	68fb      	ldr	r3, [r7, #12]
 8010276:	3320      	adds	r3, #32
 8010278:	4618      	mov	r0, r3
 801027a:	f001 ff63 	bl	8012144 <_fx_utility_32_unsigned_read>
 801027e:	4603      	mov	r3, r0
 8010280:	2200      	movs	r2, #0
 8010282:	461c      	mov	r4, r3
 8010284:	4615      	mov	r5, r2
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	e9c3 450e 	strd	r4, r5, [r3, #56]	; 0x38
        }

        if (media_ptr -> fx_media_total_sectors == 0)
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8010292:	4313      	orrs	r3, r2
 8010294:	d101      	bne.n	801029a <_fx_media_boot_info_extract+0x96>
        {
            return(FX_MEDIA_INVALID);
 8010296:	2302      	movs	r3, #2
 8010298:	e058      	b.n	801034c <_fx_media_boot_info_extract+0x148>
        }

        /* Extract the number of reserved sectors before the first FAT.  */
        media_ptr -> fx_media_reserved_sectors =    _fx_utility_16_unsigned_read(&boot_sector[FX_RESERVED_SECTORS]);
 801029a:	68fb      	ldr	r3, [r7, #12]
 801029c:	330e      	adds	r3, #14
 801029e:	4618      	mov	r0, r3
 80102a0:	f001 ff28 	bl	80120f4 <_fx_utility_16_unsigned_read>
 80102a4:	4602      	mov	r2, r0
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	645a      	str	r2, [r3, #68]	; 0x44
        if (media_ptr -> fx_media_reserved_sectors == 0)
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d101      	bne.n	80102b6 <_fx_media_boot_info_extract+0xb2>
        {
            return(FX_MEDIA_INVALID);
 80102b2:	2302      	movs	r3, #2
 80102b4:	e04a      	b.n	801034c <_fx_media_boot_info_extract+0x148>
        }

        /* Extract the number of sectors per cluster.  */
        media_ptr -> fx_media_sectors_per_cluster = ((UINT)boot_sector[FX_SECTORS_CLUSTER] & 0xFF);
 80102b6:	68fb      	ldr	r3, [r7, #12]
 80102b8:	330d      	adds	r3, #13
 80102ba:	781b      	ldrb	r3, [r3, #0]
 80102bc:	461a      	mov	r2, r3
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	655a      	str	r2, [r3, #84]	; 0x54

        /* There should always be at least one reserved sector, representing the boot record itself.  */
        if (media_ptr -> fx_media_sectors_per_cluster == 0)
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	d101      	bne.n	80102ce <_fx_media_boot_info_extract+0xca>
        {
            return(FX_MEDIA_INVALID);
 80102ca:	2302      	movs	r3, #2
 80102cc:	e03e      	b.n	801034c <_fx_media_boot_info_extract+0x148>
        }

        /* Extract the number of sectors per FAT.  */
        media_ptr -> fx_media_sectors_per_FAT =     _fx_utility_16_unsigned_read(&boot_sector[FX_SECTORS_PER_FAT]);
 80102ce:	68fb      	ldr	r3, [r7, #12]
 80102d0:	3316      	adds	r3, #22
 80102d2:	4618      	mov	r0, r3
 80102d4:	f001 ff0e 	bl	80120f4 <_fx_utility_16_unsigned_read>
 80102d8:	4602      	mov	r2, r0
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	659a      	str	r2, [r3, #88]	; 0x58
        if (media_ptr -> fx_media_sectors_per_FAT == 0)
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d107      	bne.n	80102f6 <_fx_media_boot_info_extract+0xf2>
        {
            media_ptr -> fx_media_sectors_per_FAT = _fx_utility_32_unsigned_read(&boot_sector[FX_SECTORS_PER_FAT_32]);
 80102e6:	68fb      	ldr	r3, [r7, #12]
 80102e8:	3324      	adds	r3, #36	; 0x24
 80102ea:	4618      	mov	r0, r3
 80102ec:	f001 ff2a 	bl	8012144 <_fx_utility_32_unsigned_read>
 80102f0:	4602      	mov	r2, r0
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	659a      	str	r2, [r3, #88]	; 0x58
        }

        if (media_ptr -> fx_media_sectors_per_FAT == 0)
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	d101      	bne.n	8010302 <_fx_media_boot_info_extract+0xfe>
        {
            return(FX_MEDIA_INVALID);
 80102fe:	2302      	movs	r3, #2
 8010300:	e024      	b.n	801034c <_fx_media_boot_info_extract+0x148>
        }

        /* Extract the number of FATs.  */
        media_ptr -> fx_media_number_of_FATs =      ((UINT)boot_sector[FX_NUMBER_OF_FATS] & 0xFF);
 8010302:	68fb      	ldr	r3, [r7, #12]
 8010304:	3310      	adds	r3, #16
 8010306:	781b      	ldrb	r3, [r3, #0]
 8010308:	461a      	mov	r2, r3
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	65da      	str	r2, [r3, #92]	; 0x5c
        if (media_ptr -> fx_media_number_of_FATs == 0)
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010312:	2b00      	cmp	r3, #0
 8010314:	d101      	bne.n	801031a <_fx_media_boot_info_extract+0x116>
        {
            return(FX_BOOT_ERROR);
 8010316:	2301      	movs	r3, #1
 8010318:	e018      	b.n	801034c <_fx_media_boot_info_extract+0x148>

        /* Extract the number of hidden sectors.  */
#ifdef FX_DRIVER_USE_64BIT_LBA
        media_ptr -> fx_media_hidden_sectors =      _fx_utility_64_unsigned_read(&boot_sector[FX_HIDDEN_SECTORS]);
#else
        media_ptr -> fx_media_hidden_sectors =      _fx_utility_32_unsigned_read(&boot_sector[FX_HIDDEN_SECTORS]);
 801031a:	68fb      	ldr	r3, [r7, #12]
 801031c:	331c      	adds	r3, #28
 801031e:	4618      	mov	r0, r3
 8010320:	f001 ff10 	bl	8012144 <_fx_utility_32_unsigned_read>
 8010324:	4602      	mov	r2, r0
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	671a      	str	r2, [r3, #112]	; 0x70
#endif
        /* Extract the number of root directory entries.  */
        media_ptr -> fx_media_root_directory_entries =  _fx_utility_16_unsigned_read(&boot_sector[FX_ROOT_DIR_ENTRIES]);
 801032a:	68fb      	ldr	r3, [r7, #12]
 801032c:	3311      	adds	r3, #17
 801032e:	4618      	mov	r0, r3
 8010330:	f001 fee0 	bl	80120f4 <_fx_utility_16_unsigned_read>
 8010334:	4602      	mov	r2, r0
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	679a      	str	r2, [r3, #120]	; 0x78

        /* Extract root directory starting cluster (32 bit only) and compute start sector */
        media_ptr -> fx_media_root_cluster_32 = _fx_utility_32_unsigned_read(&boot_sector[FX_ROOT_CLUSTER_32]);
 801033a:	68fb      	ldr	r3, [r7, #12]
 801033c:	332c      	adds	r3, #44	; 0x2c
 801033e:	4618      	mov	r0, r3
 8010340:	f001 ff00 	bl	8012144 <_fx_utility_32_unsigned_read>
 8010344:	4602      	mov	r2, r0
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	675a      	str	r2, [r3, #116]	; 0x74
#ifdef FX_ENABLE_EXFAT
    }
#endif /* FX_ENABLE_EXFAT */

    /* Return a successful status.  */
    return(FX_SUCCESS);
 801034a:	2300      	movs	r3, #0
}
 801034c:	4618      	mov	r0, r3
 801034e:	3710      	adds	r7, #16
 8010350:	46bd      	mov	sp, r7
 8010352:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08010358 <_fx_media_close>:
/*                                            and cache,                  */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_media_close(FX_MEDIA  *media_ptr)
{
 8010358:	b580      	push	{r7, lr}
 801035a:	b092      	sub	sp, #72	; 0x48
 801035c:	af04      	add	r7, sp, #16
 801035e:	6078      	str	r0, [r7, #4]
#endif /* FX_DISABLE_FILE_CLOSE */
UINT     status;


    /* Check the media to make sure it is open.  */
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	681b      	ldr	r3, [r3, #0]
 8010364:	4aa6      	ldr	r2, [pc, #664]	; (8010600 <_fx_media_close+0x2a8>)
 8010366:	4293      	cmp	r3, r2
 8010368:	d001      	beq.n	801036e <_fx_media_close+0x16>
    {

        /* Return the media not opened error.  */
        return(FX_MEDIA_NOT_OPEN);
 801036a:	2311      	movs	r3, #17
 801036c:	e1c2      	b.n	80106f4 <_fx_media_close+0x39c>

    /* If trace is enabled, unregister this object.  */
    FX_TRACE_OBJECT_UNREGISTER(media_ptr)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	681b      	ldr	r3, [r3, #0]
 8010372:	4aa3      	ldr	r2, [pc, #652]	; (8010600 <_fx_media_close+0x2a8>)
 8010374:	4293      	cmp	r3, r2
 8010376:	d001      	beq.n	801037c <_fx_media_close+0x24>
 8010378:	2311      	movs	r3, #17
 801037a:	e1bb      	b.n	80106f4 <_fx_media_close+0x39c>
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8010382:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8010386:	4618      	mov	r0, r3
 8010388:	f007 f8be 	bl	8017508 <_tx_mutex_get>
 801038c:	4603      	mov	r3, r0
 801038e:	2b00      	cmp	r3, #0
 8010390:	d001      	beq.n	8010396 <_fx_media_close+0x3e>
 8010392:	2311      	movs	r3, #17
 8010394:	e1ae      	b.n	80106f4 <_fx_media_close+0x39c>

#ifndef FX_DISABLE_FILE_CLOSE
    /* Loop through the media's open files.  */
    open_count =  media_ptr -> fx_media_opened_file_count;
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 801039c:	637b      	str	r3, [r7, #52]	; 0x34
    file_ptr =    media_ptr -> fx_media_opened_file_list;
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80103a4:	633b      	str	r3, [r7, #48]	; 0x30
    while (open_count)
 80103a6:	e046      	b.n	8010436 <_fx_media_close+0xde>
    {

        /* Look at each opened file to see if the same file is opened
           for writing and has been written to.  */
        if ((file_ptr -> fx_file_open_mode == FX_OPEN_FOR_WRITE) &&
 80103a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103aa:	689b      	ldr	r3, [r3, #8]
 80103ac:	2b01      	cmp	r3, #1
 80103ae:	d139      	bne.n	8010424 <_fx_media_close+0xcc>
            (file_ptr -> fx_file_modified))
 80103b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103b2:	7b1b      	ldrb	r3, [r3, #12]
        if ((file_ptr -> fx_file_open_mode == FX_OPEN_FOR_WRITE) &&
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	d035      	beq.n	8010424 <_fx_media_close+0xcc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80103b8:	f3ef 8310 	mrs	r3, PRIMASK
 80103bc:	61bb      	str	r3, [r7, #24]
    return(posture);
 80103be:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80103c0:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80103c2:	b672      	cpsid	i
    return(int_posture);
 80103c4:	697b      	ldr	r3, [r7, #20]
        {

            /* Lockout interrupts for time/date access.  */
            FX_DISABLE_INTS
 80103c6:	623b      	str	r3, [r7, #32]

            /* Set the new time and date.  */
            file_ptr -> fx_file_dir_entry.fx_dir_entry_time =  _fx_system_time;
 80103c8:	4b8e      	ldr	r3, [pc, #568]	; (8010604 <_fx_media_close+0x2ac>)
 80103ca:	681a      	ldr	r2, [r3, #0]
 80103cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103ce:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            file_ptr -> fx_file_dir_entry.fx_dir_entry_date =  _fx_system_date;
 80103d2:	4b8d      	ldr	r3, [pc, #564]	; (8010608 <_fx_media_close+0x2b0>)
 80103d4:	681a      	ldr	r2, [r3, #0]
 80103d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103d8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 80103dc:	6a3b      	ldr	r3, [r7, #32]
 80103de:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80103e0:	69fb      	ldr	r3, [r7, #28]
 80103e2:	f383 8810 	msr	PRIMASK, r3
}
 80103e6:	bf00      	nop
            /* Restore interrupt posture.  */
            FX_RESTORE_INTS

            /* Copy the new file size into the directory entry.  */
            file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =
                file_ptr -> fx_file_current_file_size;
 80103e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103ea:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
            file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =
 80103ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80103f0:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
                status = _fx_directory_exFAT_entry_write(media_ptr, &(file_ptr -> fx_file_dir_entry), UPDATE_STREAM);
            }
            else
            {
#endif /* FX_ENABLE_EXFAT */
                status = _fx_directory_entry_write(media_ptr, &(file_ptr -> fx_file_dir_entry));
 80103f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103f6:	3368      	adds	r3, #104	; 0x68
 80103f8:	4619      	mov	r1, r3
 80103fa:	6878      	ldr	r0, [r7, #4]
 80103fc:	f7fb fa9c 	bl	800b938 <_fx_directory_entry_write>
 8010400:	62f8      	str	r0, [r7, #44]	; 0x2c
#ifdef FX_ENABLE_EXFAT
            }
#endif /* FX_ENABLE_EXFAT */

            /* Determine if the status was unsuccessful. */
            if (status != FX_SUCCESS)
 8010402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010404:	2b00      	cmp	r3, #0
 8010406:	d00a      	beq.n	801041e <_fx_media_close+0xc6>
            {

                /* Release media protection.  */
                FX_UNPROTECT
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 801040e:	4618      	mov	r0, r3
 8010410:	f007 faf2 	bl	80179f8 <_tx_mutex_put>

                /* Call the media abort routine.  */
                _fx_media_abort(media_ptr);
 8010414:	6878      	ldr	r0, [r7, #4]
 8010416:	f7ff fe5f 	bl	80100d8 <_fx_media_abort>

                /* Return the error status.  */
                return(FX_IO_ERROR);
 801041a:	2390      	movs	r3, #144	; 0x90
 801041c:	e16a      	b.n	80106f4 <_fx_media_close+0x39c>
            }

            /* Clear the file modified flag.  */
            file_ptr -> fx_file_modified =  FX_FALSE;
 801041e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010420:	2200      	movs	r2, #0
 8010422:	731a      	strb	r2, [r3, #12]
        }

        /* Mark the file as closed.  */
        file_ptr -> fx_file_id =  FX_FILE_CLOSED_ID;
 8010424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010426:	4a79      	ldr	r2, [pc, #484]	; (801060c <_fx_media_close+0x2b4>)
 8010428:	601a      	str	r2, [r3, #0]

        /* Adjust the pointer and decrement the opened count.  */
        file_ptr =  file_ptr -> fx_file_opened_next;
 801042a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801042c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801042e:	633b      	str	r3, [r7, #48]	; 0x30
        open_count--;
 8010430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010432:	3b01      	subs	r3, #1
 8010434:	637b      	str	r3, [r7, #52]	; 0x34
    while (open_count)
 8010436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010438:	2b00      	cmp	r3, #0
 801043a:	d1b5      	bne.n	80103a8 <_fx_media_close+0x50>
    }
#endif /* FX_DISABLE_FILE_CLOSE */

    /* Flush the cached individual FAT entries */
    _fx_utility_FAT_flush(media_ptr);
 801043c:	6878      	ldr	r0, [r7, #4]
 801043e:	f002 f9dc 	bl	80127fa <_fx_utility_FAT_flush>

    /* Flush changed sector(s) in the primary FAT to secondary FATs.  */
    _fx_utility_FAT_map_flush(media_ptr);
 8010442:	6878      	ldr	r0, [r7, #4]
 8010444:	f002 fd2a 	bl	8012e9c <_fx_utility_FAT_map_flush>
        _fx_utility_exFAT_bitmap_flush(media_ptr);
    }
#endif /* FX_ENABLE_EXFAT */

    /* Flush the internal logical sector cache.  */
    status =  _fx_utility_logical_sector_flush(media_ptr, ((ULONG64) 1), (ULONG64) (media_ptr -> fx_media_total_sectors), FX_FALSE);
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 801044e:	2100      	movs	r1, #0
 8010450:	9102      	str	r1, [sp, #8]
 8010452:	e9cd 2300 	strd	r2, r3, [sp]
 8010456:	f04f 0201 	mov.w	r2, #1
 801045a:	f04f 0300 	mov.w	r3, #0
 801045e:	6878      	ldr	r0, [r7, #4]
 8010460:	f003 f8a6 	bl	80135b0 <_fx_utility_logical_sector_flush>
 8010464:	62f8      	str	r0, [r7, #44]	; 0x2c

    /* Determine if the flush was unsuccessful. */
    if (status != FX_SUCCESS)
 8010466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010468:	2b00      	cmp	r3, #0
 801046a:	d00a      	beq.n	8010482 <_fx_media_close+0x12a>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8010472:	4618      	mov	r0, r3
 8010474:	f007 fac0 	bl	80179f8 <_tx_mutex_put>

        /* Call the media abort routine.  */
        _fx_media_abort(media_ptr);
 8010478:	6878      	ldr	r0, [r7, #4]
 801047a:	f7ff fe2d 	bl	80100d8 <_fx_media_abort>

        /* Return the error status.  */
        return(FX_IO_ERROR);
 801047e:	2390      	movs	r3, #144	; 0x90
 8010480:	e138      	b.n	80106f4 <_fx_media_close+0x39c>
    }

    /* Determine if the media needs to have the additional information sector updated. This will
       only be the case for 32-bit FATs. The logic here only needs to be done if the last reported
       available cluster count is different that the currently available clusters.  */
    if ((media_ptr -> fx_media_FAT32_additional_info_sector) &&
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010486:	2b00      	cmp	r3, #0
 8010488:	f000 80ca 	beq.w	8010620 <_fx_media_close+0x2c8>
        (media_ptr -> fx_media_FAT32_additional_info_last_available != media_ptr -> fx_media_available_clusters) &&
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    if ((media_ptr -> fx_media_FAT32_additional_info_sector) &&
 8010494:	429a      	cmp	r2, r3
 8010496:	f000 80c3 	beq.w	8010620 <_fx_media_close+0x2c8>
        (media_ptr -> fx_media_driver_write_protect == FX_FALSE))
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
        (media_ptr -> fx_media_FAT32_additional_info_last_available != media_ptr -> fx_media_available_clusters) &&
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	f040 80bd 	bne.w	8010620 <_fx_media_close+0x2c8>
    ULONG  signature;


#ifndef FX_DISABLE_CACHE
        /* Setup a pointer to the first cached entry's buffer.  */
        buffer_ptr =  (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector_memory_buffer;
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	69db      	ldr	r3, [r3, #28]
 80104aa:	681b      	ldr	r3, [r3, #0]
 80104ac:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Invalidate this cache entry.  */
        (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector =  (~(ULONG64)0);
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	69d9      	ldr	r1, [r3, #28]
 80104b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80104b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80104ba:	e9c1 2302 	strd	r2, r3, [r1, #8]
        (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector_valid =  FX_FALSE;
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	69db      	ldr	r3, [r3, #28]
 80104c2:	2200      	movs	r2, #0
 80104c4:	745a      	strb	r2, [r3, #17]
#else
        buffer_ptr =  media_ptr -> fx_media_memory_buffer;
#endif /* FX_DISABLE_CACHE */

        /* Read the FAT32 additional information sector from the device.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_READ;
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	2200      	movs	r2, #0
 80104ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	2290      	movs	r2, #144	; 0x90
 80104d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80104da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        media_ptr -> fx_media_driver_logical_sector =   media_ptr -> fx_media_FAT32_additional_info_sector;
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        media_ptr -> fx_media_driver_sectors =          1;
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	2201      	movs	r2, #1
 80104ec:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        media_ptr -> fx_media_driver_sector_type =      FX_DIRECTORY_SECTOR;
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	2203      	movs	r2, #3
 80104f4:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver read sector(s) requests.  */
        media_ptr -> fx_media_driver_read_requests++;
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 80104fe:	1c5a      	adds	r2, r3, #1
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_READ, media_ptr, media_ptr -> fx_media_FAT32_additional_info_sector, 1, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Invoke the driver to read the FAT32 additional information sector.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 801050c:	6878      	ldr	r0, [r7, #4]
 801050e:	4798      	blx	r3

        /* Determine if the FAT32 sector was read correctly. */
        if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010516:	2b00      	cmp	r3, #0
 8010518:	d00a      	beq.n	8010530 <_fx_media_close+0x1d8>
        {

            /* Release media protection.  */
            FX_UNPROTECT
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8010520:	4618      	mov	r0, r3
 8010522:	f007 fa69 	bl	80179f8 <_tx_mutex_put>

            /* Call the media abort routine.  */
            _fx_media_abort(media_ptr);
 8010526:	6878      	ldr	r0, [r7, #4]
 8010528:	f7ff fdd6 	bl	80100d8 <_fx_media_abort>

            /* Return the error status.  */
            return(FX_IO_ERROR);
 801052c:	2390      	movs	r3, #144	; 0x90
 801052e:	e0e1      	b.n	80106f4 <_fx_media_close+0x39c>
        }

        /* Setup a pointer into the FAT32 additional information sector.  */
        buffer_ptr =  media_ptr -> fx_media_driver_buffer;
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010536:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Pickup the first signature long word.  */
        signature =  _fx_utility_32_unsigned_read(&buffer_ptr[0]);
 8010538:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801053a:	f001 fe03 	bl	8012144 <_fx_utility_32_unsigned_read>
 801053e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Determine if the signature is correct.  */
        if (signature == 0x41615252)
 8010540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010542:	4a33      	ldr	r2, [pc, #204]	; (8010610 <_fx_media_close+0x2b8>)
 8010544:	4293      	cmp	r3, r2
 8010546:	d16b      	bne.n	8010620 <_fx_media_close+0x2c8>
        {

            /* Yes, the first signature is correct, now pickup the next signature.  */
            signature =  _fx_utility_32_unsigned_read(&buffer_ptr[484]);
 8010548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801054a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801054e:	4618      	mov	r0, r3
 8010550:	f001 fdf8 	bl	8012144 <_fx_utility_32_unsigned_read>
 8010554:	6278      	str	r0, [r7, #36]	; 0x24

            /* Determine if this signature is correct.  */
            if (signature == 0x61417272)
 8010556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010558:	4a2e      	ldr	r2, [pc, #184]	; (8010614 <_fx_media_close+0x2bc>)
 801055a:	4293      	cmp	r3, r2
 801055c:	d160      	bne.n	8010620 <_fx_media_close+0x2c8>
            {

                /* Yes, we have a good FAT32 additional information sector.  */

                /* Set the free cluster count to the available clusters in the media control block.  */
                _fx_utility_32_unsigned_write(&buffer_ptr[488], media_ptr -> fx_media_available_clusters);
 801055e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010560:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010568:	4619      	mov	r1, r3
 801056a:	4610      	mov	r0, r2
 801056c:	f001 fe07 	bl	801217e <_fx_utility_32_unsigned_write>

                /* Set the next free cluster number hint to starting search cluster in the media control block.  */
                _fx_utility_32_unsigned_write(&buffer_ptr[492], media_ptr -> fx_media_cluster_search_start);
 8010570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010572:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801057c:	4619      	mov	r1, r3
 801057e:	4610      	mov	r0, r2
 8010580:	f001 fdfd 	bl	801217e <_fx_utility_32_unsigned_write>

                /* Now write the sector back out to the media.  */
                media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	2201      	movs	r2, #1
 8010588:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	2290      	movs	r2, #144	; 0x90
 8010590:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010598:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
                media_ptr -> fx_media_driver_logical_sector =   media_ptr -> fx_media_FAT32_additional_info_sector;
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
                media_ptr -> fx_media_driver_sectors =          1;
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	2201      	movs	r2, #1
 80105aa:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
                media_ptr -> fx_media_driver_sector_type =      FX_DIRECTORY_SECTOR;
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	2203      	movs	r2, #3
 80105b2:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

                /* Set the system write flag since we are writing a directory sector.  */
                media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	2201      	movs	r2, #1
 80105ba:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

#ifndef FX_MEDIA_STATISTICS_DISABLE

                /* Increment the number of driver write sector(s) requests.  */
                media_ptr -> fx_media_driver_write_requests++;
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 80105c4:	1c5a      	adds	r2, r3, #1
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0

                /* If trace is enabled, insert this event into the trace buffer.  */
                FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, media_ptr -> fx_media_FAT32_additional_info_sector, 1, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                /* Invoke the driver to write the FAT32 additional information sector.  */
                (media_ptr -> fx_media_driver_entry) (media_ptr);
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80105d2:	6878      	ldr	r0, [r7, #4]
 80105d4:	4798      	blx	r3

                /* Clear the system write flag.  */
                media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	2200      	movs	r2, #0
 80105da:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                /* Determine if the FAT32 sector was written correctly. */
                if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	d017      	beq.n	8010618 <_fx_media_close+0x2c0>
                {

                    /* Release media protection.  */
                    FX_UNPROTECT
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 80105ee:	4618      	mov	r0, r3
 80105f0:	f007 fa02 	bl	80179f8 <_tx_mutex_put>

                    /* Call the media abort routine.  */
                    _fx_media_abort(media_ptr);
 80105f4:	6878      	ldr	r0, [r7, #4]
 80105f6:	f7ff fd6f 	bl	80100d8 <_fx_media_abort>

                    /* Return the sector IO error status.  */
                    return(FX_IO_ERROR);
 80105fa:	2390      	movs	r3, #144	; 0x90
 80105fc:	e07a      	b.n	80106f4 <_fx_media_close+0x39c>
 80105fe:	bf00      	nop
 8010600:	4d454449 	.word	0x4d454449
 8010604:	200151c0 	.word	0x200151c0
 8010608:	200151bc 	.word	0x200151bc
 801060c:	46494c43 	.word	0x46494c43
 8010610:	41615252 	.word	0x41615252
 8010614:	61417272 	.word	0x61417272
                }

                /* Successful update of the FAT32 additional information sector. Update the
                   last written available cluster count.  */
                media_ptr -> fx_media_FAT32_additional_info_last_available =  media_ptr -> fx_media_available_clusters;
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	66da      	str	r2, [r3, #108]	; 0x6c
    }

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of driver flush requests.  */
    media_ptr -> fx_media_driver_flush_requests++;
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 8010626:	1c5a      	adds	r2, r3, #1
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
#endif

    /* Build the "flush" I/O driver request.  */
    media_ptr -> fx_media_driver_request =      FX_DRIVER_FLUSH;
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	2202      	movs	r2, #2
 8010632:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	2290      	movs	r2, #144	; 0x90
 801063a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_FLUSH, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Call the specified I/O driver with the flush request.  */
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8010644:	6878      	ldr	r0, [r7, #4]
 8010646:	4798      	blx	r3

    /* Build the "uninitialize" I/O driver request.  */
    media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	2208      	movs	r2, #8
 801064c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	2290      	movs	r2, #144	; 0x90
 8010654:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Call the specified I/O driver with the uninitialize request.  */
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 801065e:	6878      	ldr	r0, [r7, #4]
 8010660:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010662:	f3ef 8310 	mrs	r3, PRIMASK
 8010666:	613b      	str	r3, [r7, #16]
    return(posture);
 8010668:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 801066a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 801066c:	b672      	cpsid	i
    return(int_posture);
 801066e:	68fb      	ldr	r3, [r7, #12]

    /* Now remove this media from the open list.  */

    /* Lockout interrupts for media removal.  */
    FX_DISABLE_INTS
 8010670:	623b      	str	r3, [r7, #32]

    /* See if the media is the only one on the media opened list.  */
    if (_fx_system_media_opened_count == ((ULONG) 1))
 8010672:	4b22      	ldr	r3, [pc, #136]	; (80106fc <_fx_media_close+0x3a4>)
 8010674:	681b      	ldr	r3, [r3, #0]
 8010676:	2b01      	cmp	r3, #1
 8010678:	d103      	bne.n	8010682 <_fx_media_close+0x32a>
    {

        /* Only opened media, just set the opened list to NULL.  */
        _fx_system_media_opened_ptr =  FX_NULL;
 801067a:	4b21      	ldr	r3, [pc, #132]	; (8010700 <_fx_media_close+0x3a8>)
 801067c:	2200      	movs	r2, #0
 801067e:	601a      	str	r2, [r3, #0]
 8010680:	e019      	b.n	80106b6 <_fx_media_close+0x35e>
    }
    else
    {

        /* Otherwise, not the only opened media, link-up the neighbors.  */
        (media_ptr -> fx_media_opened_next) -> fx_media_opened_previous =
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
            media_ptr -> fx_media_opened_previous;
 8010688:	687a      	ldr	r2, [r7, #4]
 801068a:	f8d2 20d4 	ldr.w	r2, [r2, #212]	; 0xd4
        (media_ptr -> fx_media_opened_next) -> fx_media_opened_previous =
 801068e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
        (media_ptr -> fx_media_opened_previous) -> fx_media_opened_next =
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
            media_ptr -> fx_media_opened_next;
 8010698:	687a      	ldr	r2, [r7, #4]
 801069a:	f8d2 20d0 	ldr.w	r2, [r2, #208]	; 0xd0
        (media_ptr -> fx_media_opened_previous) -> fx_media_opened_next =
 801069e:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

        /* See if we have to update the opened list head pointer.  */
        if (_fx_system_media_opened_ptr == media_ptr)
 80106a2:	4b17      	ldr	r3, [pc, #92]	; (8010700 <_fx_media_close+0x3a8>)
 80106a4:	681b      	ldr	r3, [r3, #0]
 80106a6:	687a      	ldr	r2, [r7, #4]
 80106a8:	429a      	cmp	r2, r3
 80106aa:	d104      	bne.n	80106b6 <_fx_media_close+0x35e>
        {

            /* Yes, move the head pointer to the next opened media. */
            _fx_system_media_opened_ptr =  media_ptr -> fx_media_opened_next;
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80106b2:	4a13      	ldr	r2, [pc, #76]	; (8010700 <_fx_media_close+0x3a8>)
 80106b4:	6013      	str	r3, [r2, #0]
        }
    }

    /* Decrement the opened media counter.  */
    _fx_system_media_opened_count--;
 80106b6:	4b11      	ldr	r3, [pc, #68]	; (80106fc <_fx_media_close+0x3a4>)
 80106b8:	681b      	ldr	r3, [r3, #0]
 80106ba:	3b01      	subs	r3, #1
 80106bc:	4a0f      	ldr	r2, [pc, #60]	; (80106fc <_fx_media_close+0x3a4>)
 80106be:	6013      	str	r3, [r2, #0]

    /* Finally, Indicate that this media is closed.  */
    media_ptr -> fx_media_id =  FX_MEDIA_CLOSED_ID;
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	4a10      	ldr	r2, [pc, #64]	; (8010704 <_fx_media_close+0x3ac>)
 80106c4:	601a      	str	r2, [r3, #0]
 80106c6:	6a3b      	ldr	r3, [r7, #32]
 80106c8:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80106ca:	68bb      	ldr	r3, [r7, #8]
 80106cc:	f383 8810 	msr	PRIMASK, r3
}
 80106d0:	bf00      	nop
#ifndef FX_DONT_CREATE_MUTEX

    /* Note that the protection is never released. The mutex delete
       service will handle all threads waiting access to this media
       control block.  */
    tx_mutex_delete(& (media_ptr -> fx_media_protect));
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 80106d8:	4618      	mov	r0, r3
 80106da:	f006 fe6b 	bl	80173b4 <_tx_mutex_delete>
#endif
#endif

    /* Invoke media close callback. */
    if (media_ptr -> fx_media_close_notify)
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	d004      	beq.n	80106f2 <_fx_media_close+0x39a>
    {
        media_ptr -> fx_media_close_notify(media_ptr);
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80106ee:	6878      	ldr	r0, [r7, #4]
 80106f0:	4798      	blx	r3
    /* Release media protection.  */
    FX_UNPROTECT
#endif

    /* Return success status to the caller.  */
    return(FX_SUCCESS);
 80106f2:	2300      	movs	r3, #0
}
 80106f4:	4618      	mov	r0, r3
 80106f6:	3738      	adds	r7, #56	; 0x38
 80106f8:	46bd      	mov	sp, r7
 80106fa:	bd80      	pop	{r7, pc}
 80106fc:	200151b8 	.word	0x200151b8
 8010700:	200151b4 	.word	0x200151b4
 8010704:	4d454443 	.word	0x4d454443

08010708 <_fx_media_close_notify_set>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_media_close_notify_set(FX_MEDIA *media_ptr, VOID (*media_close_notify)(FX_MEDIA *media))
{
 8010708:	b480      	push	{r7}
 801070a:	b083      	sub	sp, #12
 801070c:	af00      	add	r7, sp, #0
 801070e:	6078      	str	r0, [r7, #4]
 8010710:	6039      	str	r1, [r7, #0]

    /* Set the notify function. */
    media_ptr -> fx_media_close_notify = media_close_notify;
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	683a      	ldr	r2, [r7, #0]
 8010716:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

    /* Return successful status.  */
    return(FX_SUCCESS);
 801071a:	2300      	movs	r3, #0
}
 801071c:	4618      	mov	r0, r3
 801071e:	370c      	adds	r7, #12
 8010720:	46bd      	mov	sp, r7
 8010722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010726:	4770      	bx	lr

08010728 <_fx_media_extended_space_available>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_media_extended_space_available(FX_MEDIA *media_ptr, ULONG64 *available_bytes_ptr)
{
 8010728:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801072c:	b086      	sub	sp, #24
 801072e:	af00      	add	r7, sp, #0
 8010730:	6078      	str	r0, [r7, #4]
 8010732:	6039      	str	r1, [r7, #0]
ULONG   bytes_per_cluster;
ULONG   available_clusters;


    /* Check the media to make sure it is open.  */
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	681b      	ldr	r3, [r3, #0]
 8010738:	4a24      	ldr	r2, [pc, #144]	; (80107cc <_fx_media_extended_space_available+0xa4>)
 801073a:	4293      	cmp	r3, r2
 801073c:	d001      	beq.n	8010742 <_fx_media_extended_space_available+0x1a>
    {

        /* Return the media not opened error.  */
        return(FX_MEDIA_NOT_OPEN);
 801073e:	2311      	movs	r3, #17
 8010740:	e03e      	b.n	80107c0 <_fx_media_extended_space_available+0x98>

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_MEDIA_SPACE_AVAILABLE, media_ptr, available_bytes_ptr, media_ptr -> fx_media_available_clusters, 0, FX_TRACE_MEDIA_EVENTS, 0, 0)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	681b      	ldr	r3, [r3, #0]
 8010746:	4a21      	ldr	r2, [pc, #132]	; (80107cc <_fx_media_extended_space_available+0xa4>)
 8010748:	4293      	cmp	r3, r2
 801074a:	d001      	beq.n	8010750 <_fx_media_extended_space_available+0x28>
 801074c:	2311      	movs	r3, #17
 801074e:	e037      	b.n	80107c0 <_fx_media_extended_space_available+0x98>
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8010756:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801075a:	4618      	mov	r0, r3
 801075c:	f006 fed4 	bl	8017508 <_tx_mutex_get>
 8010760:	4603      	mov	r3, r0
 8010762:	2b00      	cmp	r3, #0
 8010764:	d001      	beq.n	801076a <_fx_media_extended_space_available+0x42>
 8010766:	2311      	movs	r3, #17
 8010768:	e02a      	b.n	80107c0 <_fx_media_extended_space_available+0x98>

    /* Pickup the number of free clusters.  */
    available_clusters =  media_ptr -> fx_media_available_clusters;
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801076e:	617b      	str	r3, [r7, #20]

    /* Derive the bytes per cluster.  */
    bytes_per_cluster =  media_ptr -> fx_media_bytes_per_sector * media_ptr -> fx_media_sectors_per_cluster;
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010774:	687a      	ldr	r2, [r7, #4]
 8010776:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8010778:	fb02 f303 	mul.w	r3, r2, r3
 801077c:	613b      	str	r3, [r7, #16]

    /* Calculate the free space.  */
    available_bytes =  ((ULONG64)available_clusters) * ((ULONG64)bytes_per_cluster);
 801077e:	697b      	ldr	r3, [r7, #20]
 8010780:	2200      	movs	r2, #0
 8010782:	469a      	mov	sl, r3
 8010784:	4693      	mov	fp, r2
 8010786:	693b      	ldr	r3, [r7, #16]
 8010788:	2200      	movs	r2, #0
 801078a:	4698      	mov	r8, r3
 801078c:	4691      	mov	r9, r2
 801078e:	fb08 f20b 	mul.w	r2, r8, fp
 8010792:	fb0a f309 	mul.w	r3, sl, r9
 8010796:	4413      	add	r3, r2
 8010798:	fbaa 4508 	umull	r4, r5, sl, r8
 801079c:	442b      	add	r3, r5
 801079e:	461d      	mov	r5, r3
 80107a0:	e9c7 4502 	strd	r4, r5, [r7, #8]
 80107a4:	e9c7 4502 	strd	r4, r5, [r7, #8]

    /* Return the value.  */
    *available_bytes_ptr =  available_bytes;
 80107a8:	6839      	ldr	r1, [r7, #0]
 80107aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80107ae:	e9c1 2300 	strd	r2, r3, [r1]

    /* Release media protection.  */
    FX_UNPROTECT
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 80107b8:	4618      	mov	r0, r3
 80107ba:	f007 f91d 	bl	80179f8 <_tx_mutex_put>

    /* Return a successful status to the caller.  */
    return(FX_SUCCESS);
 80107be:	2300      	movs	r3, #0
}
 80107c0:	4618      	mov	r0, r3
 80107c2:	3718      	adds	r7, #24
 80107c4:	46bd      	mov	sp, r7
 80107c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80107ca:	bf00      	nop
 80107cc:	4d454449 	.word	0x4d454449

080107d0 <_fx_media_flush>:
/*                                            disable cache,              */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_media_flush(FX_MEDIA  *media_ptr)
{
 80107d0:	b580      	push	{r7, lr}
 80107d2:	b090      	sub	sp, #64	; 0x40
 80107d4:	af04      	add	r7, sp, #16
 80107d6:	6078      	str	r0, [r7, #4]


#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_flushes++;
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 80107de:	1c5a      	adds	r2, r3, #1
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

    /* Check the media to make sure it is open.  */
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	4aa2      	ldr	r2, [pc, #648]	; (8010a74 <_fx_media_flush+0x2a4>)
 80107ec:	4293      	cmp	r3, r2
 80107ee:	d001      	beq.n	80107f4 <_fx_media_flush+0x24>
    {

        /* Return the media not opened error.  */
        return(FX_MEDIA_NOT_OPEN);
 80107f0:	2311      	movs	r3, #17
 80107f2:	e175      	b.n	8010ae0 <_fx_media_flush+0x310>

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_MEDIA_FLUSH, media_ptr, 0, 0, 0, FX_TRACE_MEDIA_EVENTS, 0, 0)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	681b      	ldr	r3, [r3, #0]
 80107f8:	4a9e      	ldr	r2, [pc, #632]	; (8010a74 <_fx_media_flush+0x2a4>)
 80107fa:	4293      	cmp	r3, r2
 80107fc:	d001      	beq.n	8010802 <_fx_media_flush+0x32>
 80107fe:	2311      	movs	r3, #17
 8010800:	e16e      	b.n	8010ae0 <_fx_media_flush+0x310>
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8010808:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801080c:	4618      	mov	r0, r3
 801080e:	f006 fe7b 	bl	8017508 <_tx_mutex_get>
 8010812:	4603      	mov	r3, r0
 8010814:	2b00      	cmp	r3, #0
 8010816:	d001      	beq.n	801081c <_fx_media_flush+0x4c>
 8010818:	2311      	movs	r3, #17
 801081a:	e161      	b.n	8010ae0 <_fx_media_flush+0x310>

    /* Check for write protect at the media level (set by driver).  */
    if (media_ptr -> fx_media_driver_write_protect)
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8010822:	2b00      	cmp	r3, #0
 8010824:	d007      	beq.n	8010836 <_fx_media_flush+0x66>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 801082c:	4618      	mov	r0, r3
 801082e:	f007 f8e3 	bl	80179f8 <_tx_mutex_put>

        /* Return write protect error.  */
        return(FX_WRITE_PROTECT);
 8010832:	2323      	movs	r3, #35	; 0x23
 8010834:	e154      	b.n	8010ae0 <_fx_media_flush+0x310>
    }

    /* Loop through the media's open files.  */
    open_count =  media_ptr -> fx_media_opened_file_count;
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 801083c:	62fb      	str	r3, [r7, #44]	; 0x2c
    file_ptr =    media_ptr -> fx_media_opened_file_list;
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8010844:	62bb      	str	r3, [r7, #40]	; 0x28
    while (open_count)
 8010846:	e040      	b.n	80108ca <_fx_media_flush+0xfa>
    {

        /* Look at each opened file to see if the same file is opened
           for writing and has been written to.  */
        if ((file_ptr -> fx_file_open_mode == FX_OPEN_FOR_WRITE) &&
 8010848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801084a:	689b      	ldr	r3, [r3, #8]
 801084c:	2b01      	cmp	r3, #1
 801084e:	d136      	bne.n	80108be <_fx_media_flush+0xee>
            (file_ptr -> fx_file_modified))
 8010850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010852:	7b1b      	ldrb	r3, [r3, #12]
        if ((file_ptr -> fx_file_open_mode == FX_OPEN_FOR_WRITE) &&
 8010854:	2b00      	cmp	r3, #0
 8010856:	d032      	beq.n	80108be <_fx_media_flush+0xee>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010858:	f3ef 8310 	mrs	r3, PRIMASK
 801085c:	613b      	str	r3, [r7, #16]
    return(posture);
 801085e:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 8010860:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 8010862:	b672      	cpsid	i
    return(int_posture);
 8010864:	68fb      	ldr	r3, [r7, #12]
        {

            /* Protect against update.  */
            FX_DISABLE_INTS
 8010866:	61bb      	str	r3, [r7, #24]

            /* Set the new time and date.  */
            file_ptr -> fx_file_dir_entry.fx_dir_entry_time =  _fx_system_time;
 8010868:	4b83      	ldr	r3, [pc, #524]	; (8010a78 <_fx_media_flush+0x2a8>)
 801086a:	681a      	ldr	r2, [r3, #0]
 801086c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801086e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            file_ptr -> fx_file_dir_entry.fx_dir_entry_date =  _fx_system_date;
 8010872:	4b82      	ldr	r3, [pc, #520]	; (8010a7c <_fx_media_flush+0x2ac>)
 8010874:	681a      	ldr	r2, [r3, #0]
 8010876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010878:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 801087c:	69bb      	ldr	r3, [r7, #24]
 801087e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010880:	697b      	ldr	r3, [r7, #20]
 8010882:	f383 8810 	msr	PRIMASK, r3
}
 8010886:	bf00      	nop
            /* Restore interrupts.  */
            FX_RESTORE_INTS

            /* Copy the new file size into the directory entry.  */
            file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =
                file_ptr -> fx_file_current_file_size;
 8010888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801088a:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
            file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =
 801088e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010890:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
                        media_ptr, &(file_ptr -> fx_file_dir_entry), UPDATE_STREAM);
            }
            else
            {
#endif /* FX_ENABLE_EXFAT */
                status = _fx_directory_entry_write(media_ptr, &(file_ptr -> fx_file_dir_entry));
 8010894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010896:	3368      	adds	r3, #104	; 0x68
 8010898:	4619      	mov	r1, r3
 801089a:	6878      	ldr	r0, [r7, #4]
 801089c:	f7fb f84c 	bl	800b938 <_fx_directory_entry_write>
 80108a0:	6278      	str	r0, [r7, #36]	; 0x24
#ifdef FX_ENABLE_EXFAT
            }
#endif /* FX_ENABLE_EXFAT */

            /* Check for a good status.  */
            if (status != FX_SUCCESS)
 80108a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d007      	beq.n	80108b8 <_fx_media_flush+0xe8>
            {

                /* Release media protection.  */
                FX_UNPROTECT
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 80108ae:	4618      	mov	r0, r3
 80108b0:	f007 f8a2 	bl	80179f8 <_tx_mutex_put>

                /* Error writing the directory.  */
                return(status);
 80108b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108b6:	e113      	b.n	8010ae0 <_fx_media_flush+0x310>
            }

            /* Clear the file modified flag.  */
            file_ptr -> fx_file_modified =  FX_FALSE;
 80108b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108ba:	2200      	movs	r2, #0
 80108bc:	731a      	strb	r2, [r3, #12]
        }

        /* Adjust the pointer and decrement the opened count.  */
        file_ptr =  file_ptr -> fx_file_opened_next;
 80108be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80108c2:	62bb      	str	r3, [r7, #40]	; 0x28
        open_count--;
 80108c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108c6:	3b01      	subs	r3, #1
 80108c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (open_count)
 80108ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	d1bb      	bne.n	8010848 <_fx_media_flush+0x78>
    }

    /* Flush the cached individual FAT entries */
    _fx_utility_FAT_flush(media_ptr);
 80108d0:	6878      	ldr	r0, [r7, #4]
 80108d2:	f001 ff92 	bl	80127fa <_fx_utility_FAT_flush>

    /* Flush changed sector(s) in the primary FAT to secondary FATs.  */
    _fx_utility_FAT_map_flush(media_ptr);
 80108d6:	6878      	ldr	r0, [r7, #4]
 80108d8:	f002 fae0 	bl	8012e9c <_fx_utility_FAT_map_flush>
        _fx_utility_exFAT_bitmap_flush(media_ptr);
    }
#endif /* FX_ENABLE_EXFAT */

    /* Flush the internal logical sector cache.  */
    status =  _fx_utility_logical_sector_flush(media_ptr, ((ULONG64) 1), (ULONG64) (media_ptr -> fx_media_total_sectors), FX_FALSE);
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80108e2:	2100      	movs	r1, #0
 80108e4:	9102      	str	r1, [sp, #8]
 80108e6:	e9cd 2300 	strd	r2, r3, [sp]
 80108ea:	f04f 0201 	mov.w	r2, #1
 80108ee:	f04f 0300 	mov.w	r3, #0
 80108f2:	6878      	ldr	r0, [r7, #4]
 80108f4:	f002 fe5c 	bl	80135b0 <_fx_utility_logical_sector_flush>
 80108f8:	6278      	str	r0, [r7, #36]	; 0x24

    /* Check for a good status.  */
    if (status != FX_SUCCESS)
 80108fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d007      	beq.n	8010910 <_fx_media_flush+0x140>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8010906:	4618      	mov	r0, r3
 8010908:	f007 f876 	bl	80179f8 <_tx_mutex_put>

        /* Error writing the directory.  */
        return(status);
 801090c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801090e:	e0e7      	b.n	8010ae0 <_fx_media_flush+0x310>
    }

    /* Determine if the media needs to have the additional information sector updated. This will
       only be the case for 32-bit FATs. The logic here only needs to be done if the last reported
       available cluster count is different that the currently available clusters.  */
    if ((media_ptr -> fx_media_FAT32_additional_info_sector) &&
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010914:	2b00      	cmp	r3, #0
 8010916:	f000 80bb 	beq.w	8010a90 <_fx_media_flush+0x2c0>
        (media_ptr -> fx_media_FAT32_additional_info_last_available != media_ptr -> fx_media_available_clusters))
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    if ((media_ptr -> fx_media_FAT32_additional_info_sector) &&
 8010922:	429a      	cmp	r2, r3
 8010924:	f000 80b4 	beq.w	8010a90 <_fx_media_flush+0x2c0>
    ULONG  signature;

#ifndef FX_DISABLE_CACHE

        /* Setup a pointer to the first cached entry's buffer.  */
        buffer_ptr =  (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector_memory_buffer;
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	69db      	ldr	r3, [r3, #28]
 801092c:	681b      	ldr	r3, [r3, #0]
 801092e:	623b      	str	r3, [r7, #32]

        /* Invalidate this cache entry.  */
        (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector =  (~(ULONG64)0);
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	69d9      	ldr	r1, [r3, #28]
 8010934:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010938:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801093c:	e9c1 2302 	strd	r2, r3, [r1, #8]
        (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector_valid =  FX_FALSE;
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	69db      	ldr	r3, [r3, #28]
 8010944:	2200      	movs	r2, #0
 8010946:	745a      	strb	r2, [r3, #17]
#else
        buffer_ptr =  media_ptr -> fx_media_memory_buffer;
#endif /* FX_DISABLE_CACHE */

        /* Read the FAT32 additional information sector from the device.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_READ;
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	2200      	movs	r2, #0
 801094c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	2290      	movs	r2, #144	; 0x90
 8010954:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	6a3a      	ldr	r2, [r7, #32]
 801095c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        media_ptr -> fx_media_driver_logical_sector =   media_ptr -> fx_media_FAT32_additional_info_sector;
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        media_ptr -> fx_media_driver_sectors =          1;
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	2201      	movs	r2, #1
 801096e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        media_ptr -> fx_media_driver_sector_type =      FX_DIRECTORY_SECTOR;
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	2203      	movs	r2, #3
 8010976:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver read sector(s) requests.  */
        media_ptr -> fx_media_driver_read_requests++;
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8010980:	1c5a      	adds	r2, r3, #1
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_READ, media_ptr, media_ptr -> fx_media_FAT32_additional_info_sector, 1, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Invoke the driver to read the FAT32 additional information sector.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 801098e:	6878      	ldr	r0, [r7, #4]
 8010990:	4798      	blx	r3

        /* Determine if the FAT32 sector was read correctly. */
        if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010998:	2b00      	cmp	r3, #0
 801099a:	d007      	beq.n	80109ac <_fx_media_flush+0x1dc>
        {

            /* Release media protection.  */
            FX_UNPROTECT
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 80109a2:	4618      	mov	r0, r3
 80109a4:	f007 f828 	bl	80179f8 <_tx_mutex_put>

            /* Return the error status.  */
            return(FX_IO_ERROR);
 80109a8:	2390      	movs	r3, #144	; 0x90
 80109aa:	e099      	b.n	8010ae0 <_fx_media_flush+0x310>
        }

        /* Setup a pointer into the FAT32 additional information sector.  */
        buffer_ptr =  media_ptr -> fx_media_driver_buffer;
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80109b2:	623b      	str	r3, [r7, #32]

        /* Pickup the first signature long word.  */
        signature =  _fx_utility_32_unsigned_read(&buffer_ptr[0]);
 80109b4:	6a38      	ldr	r0, [r7, #32]
 80109b6:	f001 fbc5 	bl	8012144 <_fx_utility_32_unsigned_read>
 80109ba:	61f8      	str	r0, [r7, #28]

        /* Determine if the signature is correct.  */
        if (signature == 0x41615252)
 80109bc:	69fb      	ldr	r3, [r7, #28]
 80109be:	4a30      	ldr	r2, [pc, #192]	; (8010a80 <_fx_media_flush+0x2b0>)
 80109c0:	4293      	cmp	r3, r2
 80109c2:	d165      	bne.n	8010a90 <_fx_media_flush+0x2c0>
        {

            /* Yes, the first signature is correct, now pickup the next signature.  */
            signature =  _fx_utility_32_unsigned_read(&buffer_ptr[484]);
 80109c4:	6a3b      	ldr	r3, [r7, #32]
 80109c6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80109ca:	4618      	mov	r0, r3
 80109cc:	f001 fbba 	bl	8012144 <_fx_utility_32_unsigned_read>
 80109d0:	61f8      	str	r0, [r7, #28]

            /* Determine if this signature is correct.  */
            if (signature == 0x61417272)
 80109d2:	69fb      	ldr	r3, [r7, #28]
 80109d4:	4a2b      	ldr	r2, [pc, #172]	; (8010a84 <_fx_media_flush+0x2b4>)
 80109d6:	4293      	cmp	r3, r2
 80109d8:	d15a      	bne.n	8010a90 <_fx_media_flush+0x2c0>
            {

                /* Yes, we have a good FAT32 additional information sector.  */

                /* Set the free cluster count to the available clusters in the media control block.  */
                _fx_utility_32_unsigned_write(&buffer_ptr[488], media_ptr -> fx_media_available_clusters);
 80109da:	6a3b      	ldr	r3, [r7, #32]
 80109dc:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80109e4:	4619      	mov	r1, r3
 80109e6:	4610      	mov	r0, r2
 80109e8:	f001 fbc9 	bl	801217e <_fx_utility_32_unsigned_write>

                /* Set the next free cluster number hint to starting search cluster in the media control block.  */
                _fx_utility_32_unsigned_write(&buffer_ptr[492], media_ptr -> fx_media_cluster_search_start);
 80109ec:	6a3b      	ldr	r3, [r7, #32]
 80109ee:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80109f8:	4619      	mov	r1, r3
 80109fa:	4610      	mov	r0, r2
 80109fc:	f001 fbbf 	bl	801217e <_fx_utility_32_unsigned_write>

                /* Now write the sector back out to the media.  */
                media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	2201      	movs	r2, #1
 8010a04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	2290      	movs	r2, #144	; 0x90
 8010a0c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	6a3a      	ldr	r2, [r7, #32]
 8010a14:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
                media_ptr -> fx_media_driver_logical_sector =   media_ptr -> fx_media_FAT32_additional_info_sector;
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
                media_ptr -> fx_media_driver_sectors =          1;
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	2201      	movs	r2, #1
 8010a26:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
                media_ptr -> fx_media_driver_sector_type =      FX_DIRECTORY_SECTOR;
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	2203      	movs	r2, #3
 8010a2e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

                /* Set the system write flag since we are writing a directory sector.  */
                media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	2201      	movs	r2, #1
 8010a36:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

#ifndef FX_MEDIA_STATISTICS_DISABLE

                /* Increment the number of driver write sector(s) requests.  */
                media_ptr -> fx_media_driver_write_requests++;
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8010a40:	1c5a      	adds	r2, r3, #1
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0

                /* If trace is enabled, insert this event into the trace buffer.  */
                FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, media_ptr -> fx_media_FAT32_additional_info_sector, 1, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                /* Invoke the driver to write the FAT32 additional information sector.  */
                (media_ptr -> fx_media_driver_entry) (media_ptr);
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8010a4e:	6878      	ldr	r0, [r7, #4]
 8010a50:	4798      	blx	r3

                /* Clear the system write flag.  */
                media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	2200      	movs	r2, #0
 8010a56:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                /* Determine if the FAT32 sector was written correctly. */
                if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	d011      	beq.n	8010a88 <_fx_media_flush+0x2b8>
                {

                    /* Release media protection.  */
                    FX_UNPROTECT
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8010a6a:	4618      	mov	r0, r3
 8010a6c:	f006 ffc4 	bl	80179f8 <_tx_mutex_put>

                    /* Return the sector IO error status.  */
                    return(FX_IO_ERROR);
 8010a70:	2390      	movs	r3, #144	; 0x90
 8010a72:	e035      	b.n	8010ae0 <_fx_media_flush+0x310>
 8010a74:	4d454449 	.word	0x4d454449
 8010a78:	200151c0 	.word	0x200151c0
 8010a7c:	200151bc 	.word	0x200151bc
 8010a80:	41615252 	.word	0x41615252
 8010a84:	61417272 	.word	0x61417272
                }

                /* Successful update of the FAT32 additional information sector. Update the
                   last written available cluster count.  */
                media_ptr -> fx_media_FAT32_additional_info_last_available =  media_ptr -> fx_media_available_clusters;
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	66da      	str	r2, [r3, #108]	; 0x6c
    }

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of driver flush requests.  */
    media_ptr -> fx_media_driver_flush_requests++;
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 8010a96:	1c5a      	adds	r2, r3, #1
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
#endif

    /* Build the "flush" I/O driver request.  */
    media_ptr -> fx_media_driver_request =      FX_DRIVER_FLUSH;
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	2202      	movs	r2, #2
 8010aa2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	2290      	movs	r2, #144	; 0x90
 8010aaa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_FLUSH, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Call the specified I/O driver with the flush request.  */
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8010ab4:	6878      	ldr	r0, [r7, #4]
 8010ab6:	4798      	blx	r3

    /* Determine if the I/O driver flushed successfully.  */
    if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	d007      	beq.n	8010ad2 <_fx_media_flush+0x302>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8010ac8:	4618      	mov	r0, r3
 8010aca:	f006 ff95 	bl	80179f8 <_tx_mutex_put>

        /* Return the driver error status.  */
        return(FX_IO_ERROR);
 8010ace:	2390      	movs	r3, #144	; 0x90
 8010ad0:	e006      	b.n	8010ae0 <_fx_media_flush+0x310>
    }

    /* Release media protection.  */
    FX_UNPROTECT
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8010ad8:	4618      	mov	r0, r3
 8010ada:	f006 ff8d 	bl	80179f8 <_tx_mutex_put>

    /* If we get here, return successful status to the caller.  */
    return(FX_SUCCESS);
 8010ade:	2300      	movs	r3, #0
}
 8010ae0:	4618      	mov	r0, r3
 8010ae2:	3730      	adds	r7, #48	; 0x30
 8010ae4:	46bd      	mov	sp, r7
 8010ae6:	bd80      	pop	{r7, pc}

08010ae8 <_fx_media_format>:
/**************************************************************************/
UINT  _fx_media_format(FX_MEDIA *media_ptr, VOID (*driver)(FX_MEDIA *media), VOID *driver_info_ptr, UCHAR *memory_ptr, UINT memory_size,
                       CHAR *volume_name, UINT number_of_fats, UINT directory_entries, UINT hidden_sectors,
                       ULONG total_sectors, UINT bytes_per_sector, UINT sectors_per_cluster,
                       UINT heads, UINT sectors_per_track)
{
 8010ae8:	b580      	push	{r7, lr}
 8010aea:	b08e      	sub	sp, #56	; 0x38
 8010aec:	af00      	add	r7, sp, #0
 8010aee:	60f8      	str	r0, [r7, #12]
 8010af0:	60b9      	str	r1, [r7, #8]
 8010af2:	607a      	str	r2, [r7, #4]
 8010af4:	603b      	str	r3, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_MEDIA_FORMAT, media_ptr, directory_entries, total_sectors, sectors_per_cluster, FX_TRACE_MEDIA_EVENTS, 0, 0)

    /* Validate bytes per sector value: greater than zero and no more than 4096.  */
    if((bytes_per_sector == 0) || (bytes_per_sector > 4096))
 8010af6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	d003      	beq.n	8010b04 <_fx_media_format+0x1c>
 8010afc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010afe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010b02:	d901      	bls.n	8010b08 <_fx_media_format+0x20>
        return(FX_SECTOR_INVALID);
 8010b04:	2389      	movs	r3, #137	; 0x89
 8010b06:	e3a0      	b.n	801124a <_fx_media_format+0x762>

    /* Validate sectors per cluster value: greater than zero and no more than 128.  */
    if((sectors_per_cluster == 0) || (sectors_per_cluster > 128))
 8010b08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010b0a:	2b00      	cmp	r3, #0
 8010b0c:	d002      	beq.n	8010b14 <_fx_media_format+0x2c>
 8010b0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010b10:	2b80      	cmp	r3, #128	; 0x80
 8010b12:	d901      	bls.n	8010b18 <_fx_media_format+0x30>
        return(FX_SECTOR_INVALID);
 8010b14:	2389      	movs	r3, #137	; 0x89
 8010b16:	e398      	b.n	801124a <_fx_media_format+0x762>

    /* Setup driver pointer and memory information.  */
    media_ptr -> fx_media_driver_entry =                driver;
 8010b18:	68fb      	ldr	r3, [r7, #12]
 8010b1a:	68ba      	ldr	r2, [r7, #8]
 8010b1c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    media_ptr -> fx_media_memory_buffer =               (UCHAR *)memory_ptr;
 8010b20:	68fb      	ldr	r3, [r7, #12]
 8010b22:	683a      	ldr	r2, [r7, #0]
 8010b24:	609a      	str	r2, [r3, #8]
    media_ptr -> fx_media_memory_size =                 memory_size;
 8010b26:	68fb      	ldr	r3, [r7, #12]
 8010b28:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010b2a:	60da      	str	r2, [r3, #12]

    /* Store geometry information in media record - driver needs this.  */
    media_ptr -> fx_media_bytes_per_sector =            bytes_per_sector;
 8010b2c:	68fb      	ldr	r3, [r7, #12]
 8010b2e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010b30:	629a      	str	r2, [r3, #40]	; 0x28
    media_ptr -> fx_media_sectors_per_track =           sectors_per_track;
 8010b32:	68fb      	ldr	r3, [r7, #12]
 8010b34:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010b36:	62da      	str	r2, [r3, #44]	; 0x2c
    media_ptr -> fx_media_heads =                       heads;
 8010b38:	68fb      	ldr	r3, [r7, #12]
 8010b3a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010b3c:	631a      	str	r2, [r3, #48]	; 0x30
    media_ptr -> fx_media_hidden_sectors =              hidden_sectors;
 8010b3e:	68fb      	ldr	r3, [r7, #12]
 8010b40:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010b42:	671a      	str	r2, [r3, #112]	; 0x70

    /* Initialize the supplied media I/O driver.  First, build the
       initialize driver request.  */
    media_ptr -> fx_media_driver_request =              FX_DRIVER_INIT;
 8010b44:	68fb      	ldr	r3, [r7, #12]
 8010b46:	2204      	movs	r2, #4
 8010b48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    media_ptr -> fx_media_driver_status =               FX_IO_ERROR;
 8010b4c:	68fb      	ldr	r3, [r7, #12]
 8010b4e:	2290      	movs	r2, #144	; 0x90
 8010b50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    media_ptr -> fx_media_driver_info =                 driver_info_ptr;
 8010b54:	68fb      	ldr	r3, [r7, #12]
 8010b56:	687a      	ldr	r2, [r7, #4]
 8010b58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    media_ptr -> fx_media_driver_write_protect =        FX_FALSE;
 8010b5c:	68fb      	ldr	r3, [r7, #12]
 8010b5e:	2200      	movs	r2, #0
 8010b60:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    media_ptr -> fx_media_driver_free_sector_update =   FX_FALSE;
 8010b64:	68fb      	ldr	r3, [r7, #12]
 8010b66:	2200      	movs	r2, #0
 8010b68:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    media_ptr -> fx_media_driver_data_sector_read =     FX_FALSE;
 8010b6c:	68fb      	ldr	r3, [r7, #12]
 8010b6e:	2200      	movs	r2, #0
 8010b70:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_INIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Call the specified I/O driver with the initialize request.  */
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 8010b74:	68fb      	ldr	r3, [r7, #12]
 8010b76:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8010b7a:	68f8      	ldr	r0, [r7, #12]
 8010b7c:	4798      	blx	r3

    /* Determine if the I/O driver initialized successfully.  */
    if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 8010b7e:	68fb      	ldr	r3, [r7, #12]
 8010b80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d001      	beq.n	8010b8c <_fx_media_format+0xa4>
    {

        /* Return the driver error status.  */
        return(FX_IO_ERROR);
 8010b88:	2390      	movs	r3, #144	; 0x90
 8010b8a:	e35e      	b.n	801124a <_fx_media_format+0x762>
    }

    /* Setup driver buffer memory.  */
    media_ptr -> fx_media_driver_buffer =  memory_ptr;
 8010b8c:	68fb      	ldr	r3, [r7, #12]
 8010b8e:	683a      	ldr	r2, [r7, #0]
 8010b90:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

    /* Move the buffer pointer into a local copy.  */
    byte_ptr =  media_ptr -> fx_media_driver_buffer;
 8010b94:	68fb      	ldr	r3, [r7, #12]
 8010b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010b9a:	617b      	str	r3, [r7, #20]

#ifndef FX_DISABLE_FORCE_MEMORY_OPERATION
    /* Clear the buffer record out, assuming it is large enough for one sector.   */
    for (i = 0; i < bytes_per_sector; i++)
 8010b9c:	2300      	movs	r3, #0
 8010b9e:	633b      	str	r3, [r7, #48]	; 0x30
 8010ba0:	e007      	b.n	8010bb2 <_fx_media_format+0xca>
    {

        /* Clear each byte of the boot record.  */
        byte_ptr[i] =  (UCHAR)0;
 8010ba2:	697a      	ldr	r2, [r7, #20]
 8010ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ba6:	4413      	add	r3, r2
 8010ba8:	2200      	movs	r2, #0
 8010baa:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < bytes_per_sector; i++)
 8010bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bae:	3301      	adds	r3, #1
 8010bb0:	633b      	str	r3, [r7, #48]	; 0x30
 8010bb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010bb4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010bb6:	429a      	cmp	r2, r3
 8010bb8:	d3f3      	bcc.n	8010ba2 <_fx_media_format+0xba>
#else
    _fx_utility_memory_set(byte_ptr, 0, bytes_per_sector);
#endif /* FX_DISABLE_FORCE_MEMORY_OPERATION */

    /* Set jump instruction at the beginning of the sector.  */
    byte_ptr[0] =  (UCHAR)0xEB;
 8010bba:	697b      	ldr	r3, [r7, #20]
 8010bbc:	22eb      	movs	r2, #235	; 0xeb
 8010bbe:	701a      	strb	r2, [r3, #0]
    byte_ptr[1] =  (UCHAR)0x34;
 8010bc0:	697b      	ldr	r3, [r7, #20]
 8010bc2:	3301      	adds	r3, #1
 8010bc4:	2234      	movs	r2, #52	; 0x34
 8010bc6:	701a      	strb	r2, [r3, #0]
    byte_ptr[2] =  (UCHAR)0x90;
 8010bc8:	697b      	ldr	r3, [r7, #20]
 8010bca:	3302      	adds	r3, #2
 8010bcc:	2290      	movs	r2, #144	; 0x90
 8010bce:	701a      	strb	r2, [r3, #0]

    /* Set the OEM name in the boot record.  */
    for (i = 0; i < 8; i++)
 8010bd0:	2300      	movs	r3, #0
 8010bd2:	633b      	str	r3, [r7, #48]	; 0x30
 8010bd4:	e00b      	b.n	8010bee <_fx_media_format+0x106>
    {

        /* Copy a character from the OEM name.  */
        byte_ptr[i + 3] =  _fx_media_format_oem_name[i];
 8010bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bd8:	3303      	adds	r3, #3
 8010bda:	697a      	ldr	r2, [r7, #20]
 8010bdc:	4413      	add	r3, r2
 8010bde:	49ac      	ldr	r1, [pc, #688]	; (8010e90 <_fx_media_format+0x3a8>)
 8010be0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010be2:	440a      	add	r2, r1
 8010be4:	7812      	ldrb	r2, [r2, #0]
 8010be6:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < 8; i++)
 8010be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bea:	3301      	adds	r3, #1
 8010bec:	633b      	str	r3, [r7, #48]	; 0x30
 8010bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bf0:	2b07      	cmp	r3, #7
 8010bf2:	d9f0      	bls.n	8010bd6 <_fx_media_format+0xee>
    }

    /* Set the media type in the boot record.  */
    byte_ptr[FX_MEDIA_TYPE] =  _fx_media_format_media_type;
 8010bf4:	697b      	ldr	r3, [r7, #20]
 8010bf6:	3315      	adds	r3, #21
 8010bf8:	4aa6      	ldr	r2, [pc, #664]	; (8010e94 <_fx_media_format+0x3ac>)
 8010bfa:	7812      	ldrb	r2, [r2, #0]
 8010bfc:	701a      	strb	r2, [r3, #0]

    /* Set the number of bytes per sector.  */
    _fx_utility_16_unsigned_write(&byte_ptr[FX_BYTES_SECTOR], bytes_per_sector);
 8010bfe:	697b      	ldr	r3, [r7, #20]
 8010c00:	330b      	adds	r3, #11
 8010c02:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010c04:	4618      	mov	r0, r3
 8010c06:	f001 fa88 	bl	801211a <_fx_utility_16_unsigned_write>

    /* Set the number of sectors per track.  */
    _fx_utility_16_unsigned_write(&byte_ptr[FX_SECTORS_PER_TRK], sectors_per_track);
 8010c0a:	697b      	ldr	r3, [r7, #20]
 8010c0c:	3318      	adds	r3, #24
 8010c0e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8010c10:	4618      	mov	r0, r3
 8010c12:	f001 fa82 	bl	801211a <_fx_utility_16_unsigned_write>

    /* Set the number of heads.  */
    _fx_utility_16_unsigned_write(&byte_ptr[FX_HEADS], heads);
 8010c16:	697b      	ldr	r3, [r7, #20]
 8010c18:	331a      	adds	r3, #26
 8010c1a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8010c1c:	4618      	mov	r0, r3
 8010c1e:	f001 fa7c 	bl	801211a <_fx_utility_16_unsigned_write>
        reserved_sectors =  1;
    }
#else

    /* The boot sector is the only reserved sector.  */
    reserved_sectors =  1;
 8010c22:	2301      	movs	r3, #1
 8010c24:	637b      	str	r3, [r7, #52]	; 0x34
#endif


    /* Calculate the maximum clusters.... This is actually greater than the actual since the FAT
       sectors have yet to be accounted for.  */
    total_clusters =  (total_sectors - reserved_sectors - ((directory_entries * FX_DIR_ENTRY_SIZE) + (bytes_per_sector - 1)) / bytes_per_sector) / sectors_per_cluster;
 8010c26:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010c28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c2a:	1ad2      	subs	r2, r2, r3
 8010c2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010c2e:	0159      	lsls	r1, r3, #5
 8010c30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010c32:	440b      	add	r3, r1
 8010c34:	1e59      	subs	r1, r3, #1
 8010c36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010c38:	fbb1 f3f3 	udiv	r3, r1, r3
 8010c3c:	1ad2      	subs	r2, r2, r3
 8010c3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010c40:	fbb2 f3f3 	udiv	r3, r2, r3
 8010c44:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Calculate the maximum number of FAT sectors necessary for FAT12.  */
    if (total_clusters % 2)
 8010c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c48:	f003 0301 	and.w	r3, r3, #1
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	d006      	beq.n	8010c5e <_fx_media_format+0x176>
    {
        bytes_needed = (total_clusters + total_clusters / 2) + 1;
 8010c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c52:	085a      	lsrs	r2, r3, #1
 8010c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c56:	4413      	add	r3, r2
 8010c58:	3301      	adds	r3, #1
 8010c5a:	627b      	str	r3, [r7, #36]	; 0x24
 8010c5c:	e004      	b.n	8010c68 <_fx_media_format+0x180>
    }
    else
    {
        bytes_needed = (total_clusters + total_clusters / 2);
 8010c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c60:	085b      	lsrs	r3, r3, #1
 8010c62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010c64:	4413      	add	r3, r2
 8010c66:	627b      	str	r3, [r7, #36]	; 0x24
    }
    sectors_per_fat =  bytes_needed / bytes_per_sector;
 8010c68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010c6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8010c70:	623b      	str	r3, [r7, #32]
    if (bytes_needed % bytes_per_sector)
 8010c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c74:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010c76:	fbb3 f2f2 	udiv	r2, r3, r2
 8010c7a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010c7c:	fb01 f202 	mul.w	r2, r1, r2
 8010c80:	1a9b      	subs	r3, r3, r2
 8010c82:	2b00      	cmp	r3, #0
 8010c84:	d002      	beq.n	8010c8c <_fx_media_format+0x1a4>
    {
        sectors_per_fat++;
 8010c86:	6a3b      	ldr	r3, [r7, #32]
 8010c88:	3301      	adds	r3, #1
 8010c8a:	623b      	str	r3, [r7, #32]
    }

    /* Now adjust the total clusters by the number of sectors per FAT.  */
    total_clusters =  total_clusters - ((sectors_per_fat * number_of_fats) + (sectors_per_cluster - 1)) / sectors_per_cluster;
 8010c8c:	6a3b      	ldr	r3, [r7, #32]
 8010c8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010c90:	fb03 f202 	mul.w	r2, r3, r2
 8010c94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010c96:	4413      	add	r3, r2
 8010c98:	1e5a      	subs	r2, r3, #1
 8010c9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010c9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8010ca0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010ca2:	1ad3      	subs	r3, r2, r3
 8010ca4:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Is the total cluster count greater than the FAT12 maximum?  */
    if (total_clusters >= FX_12_BIT_FAT_SIZE)
 8010ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ca8:	f640 72f5 	movw	r2, #4085	; 0xff5
 8010cac:	4293      	cmp	r3, r2
 8010cae:	d97e      	bls.n	8010dae <_fx_media_format+0x2c6>

        /* Yes, too big for FAT12, we need to evaluate for FAT16.  */

        /* Reset the maximum clusters.... This is actually greater than the actual since the FAT
           sectors have yet to be accounted for.  */
        total_clusters =  (total_sectors - reserved_sectors -  ((directory_entries * FX_DIR_ENTRY_SIZE) + (bytes_per_sector - 1)) / bytes_per_sector) / sectors_per_cluster;
 8010cb0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010cb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010cb4:	1ad2      	subs	r2, r2, r3
 8010cb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010cb8:	0159      	lsls	r1, r3, #5
 8010cba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010cbc:	440b      	add	r3, r1
 8010cbe:	1e59      	subs	r1, r3, #1
 8010cc0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010cc2:	fbb1 f3f3 	udiv	r3, r1, r3
 8010cc6:	1ad2      	subs	r2, r2, r3
 8010cc8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010cca:	fbb2 f3f3 	udiv	r3, r2, r3
 8010cce:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Calculate 16-bit FAT is present. Each cluster requires a 2 byte entry in the FAT table.  */
        sectors_per_fat =  (total_clusters * 2) / bytes_per_sector;
 8010cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cd2:	005a      	lsls	r2, r3, #1
 8010cd4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8010cda:	623b      	str	r3, [r7, #32]
        if ((total_clusters * 2) % bytes_per_sector)
 8010cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cde:	005b      	lsls	r3, r3, #1
 8010ce0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010ce2:	fbb3 f2f2 	udiv	r2, r3, r2
 8010ce6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010ce8:	fb01 f202 	mul.w	r2, r1, r2
 8010cec:	1a9b      	subs	r3, r3, r2
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	d002      	beq.n	8010cf8 <_fx_media_format+0x210>
        {
            sectors_per_fat++;
 8010cf2:	6a3b      	ldr	r3, [r7, #32]
 8010cf4:	3301      	adds	r3, #1
 8010cf6:	623b      	str	r3, [r7, #32]
        }

        /* Now adjust the total clusters by the number of sectors per FAT.  */
        total_clusters =  total_clusters - ((sectors_per_fat * number_of_fats) + (sectors_per_cluster - 1)) / sectors_per_cluster;
 8010cf8:	6a3b      	ldr	r3, [r7, #32]
 8010cfa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010cfc:	fb03 f202 	mul.w	r2, r3, r2
 8010d00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010d02:	4413      	add	r3, r2
 8010d04:	1e5a      	subs	r2, r3, #1
 8010d06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8010d0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010d0e:	1ad3      	subs	r3, r2, r3
 8010d10:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Is the total cluster count greater than the FAT16 maximum?  */
        if (total_clusters >= FX_16_BIT_FAT_SIZE)
 8010d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d14:	f64f 72f4 	movw	r2, #65524	; 0xfff4
 8010d18:	4293      	cmp	r3, r2
 8010d1a:	d948      	bls.n	8010dae <_fx_media_format+0x2c6>

            /* Yes, FAT32 is present.  */

            /* Allocate room for the FAT32 additional information sector. This contains useful information
               such as the number of available clusters between successive mounting of the media.  */
            if (bytes_per_sector == 512)
 8010d1c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010d1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010d22:	d109      	bne.n	8010d38 <_fx_media_format+0x250>
            {

                /* Write sector number 1 to the additional information sector.  */
                _fx_utility_16_unsigned_write(&byte_ptr[48], 1);
 8010d24:	697b      	ldr	r3, [r7, #20]
 8010d26:	3330      	adds	r3, #48	; 0x30
 8010d28:	2101      	movs	r1, #1
 8010d2a:	4618      	mov	r0, r3
 8010d2c:	f001 f9f5 	bl	801211a <_fx_utility_16_unsigned_write>

                /* Increment the reserved sectors count, since this will count as a reserved sector.  */
                reserved_sectors++;
 8010d30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d32:	3301      	adds	r3, #1
 8010d34:	637b      	str	r3, [r7, #52]	; 0x34
 8010d36:	e006      	b.n	8010d46 <_fx_media_format+0x25e>
            }
            else
            {

                /* Write value to indicate there is no additional information sector.  */
                _fx_utility_16_unsigned_write(&byte_ptr[48], 0xFFFF);
 8010d38:	697b      	ldr	r3, [r7, #20]
 8010d3a:	3330      	adds	r3, #48	; 0x30
 8010d3c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010d40:	4618      	mov	r0, r3
 8010d42:	f001 f9ea 	bl	801211a <_fx_utility_16_unsigned_write>
            }

            /* Allocate the first cluster to the root directory.  */
            _fx_utility_32_unsigned_write(&byte_ptr[FX_ROOT_CLUSTER_32], FX_FAT_ENTRY_START);
 8010d46:	697b      	ldr	r3, [r7, #20]
 8010d48:	332c      	adds	r3, #44	; 0x2c
 8010d4a:	2102      	movs	r1, #2
 8010d4c:	4618      	mov	r0, r3
 8010d4e:	f001 fa16 	bl	801217e <_fx_utility_32_unsigned_write>

            /* Determine if the number of root directory entries should be modified.  */
            directory_entries =  (sectors_per_cluster * bytes_per_sector) / FX_DIR_ENTRY_SIZE;
 8010d52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010d54:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010d56:	fb02 f303 	mul.w	r3, r2, r3
 8010d5a:	095b      	lsrs	r3, r3, #5
 8010d5c:	64fb      	str	r3, [r7, #76]	; 0x4c

            /* Reset the total_clusters for the FAT32 calculation.  */
            total_clusters =  (total_sectors - reserved_sectors) / sectors_per_cluster;
 8010d5e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010d60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d62:	1ad2      	subs	r2, r2, r3
 8010d64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010d66:	fbb2 f3f3 	udiv	r3, r2, r3
 8010d6a:	62bb      	str	r3, [r7, #40]	; 0x28

            /* 32-bit FAT is present. Each cluster requires a 4 byte entry in the FAT table.  */
            sectors_per_fat =  (total_clusters * 4) / bytes_per_sector;
 8010d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d6e:	009a      	lsls	r2, r3, #2
 8010d70:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8010d76:	623b      	str	r3, [r7, #32]
            if ((total_clusters * 4) % bytes_per_sector)
 8010d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d7a:	009b      	lsls	r3, r3, #2
 8010d7c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010d7e:	fbb3 f2f2 	udiv	r2, r3, r2
 8010d82:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010d84:	fb01 f202 	mul.w	r2, r1, r2
 8010d88:	1a9b      	subs	r3, r3, r2
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	d002      	beq.n	8010d94 <_fx_media_format+0x2ac>
            {
                sectors_per_fat++;
 8010d8e:	6a3b      	ldr	r3, [r7, #32]
 8010d90:	3301      	adds	r3, #1
 8010d92:	623b      	str	r3, [r7, #32]
            }

            /* Now adjust the total clusters by the number of sectors per FAT.  */
            total_clusters =  total_clusters - ((sectors_per_fat * number_of_fats) + (sectors_per_cluster - 1)) / sectors_per_cluster;
 8010d94:	6a3b      	ldr	r3, [r7, #32]
 8010d96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010d98:	fb03 f202 	mul.w	r2, r3, r2
 8010d9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010d9e:	4413      	add	r3, r2
 8010da0:	1e5a      	subs	r2, r3, #1
 8010da2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010da4:	fbb2 f3f3 	udiv	r3, r2, r3
 8010da8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010daa:	1ad3      	subs	r3, r2, r3
 8010dac:	62bb      	str	r3, [r7, #40]	; 0x28
        }
    }

    /* Set sectors per FAT type.  */
    if (total_clusters < FX_16_BIT_FAT_SIZE)
 8010dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010db0:	f64f 72f4 	movw	r2, #65524	; 0xfff4
 8010db4:	4293      	cmp	r3, r2
 8010db6:	d812      	bhi.n	8010dde <_fx_media_format+0x2f6>
    {

        /* Set the number of sectors per FAT12/16.  */
        _fx_utility_16_unsigned_write(&byte_ptr[FX_SECTORS_PER_FAT], sectors_per_fat);
 8010db8:	697b      	ldr	r3, [r7, #20]
 8010dba:	3316      	adds	r3, #22
 8010dbc:	6a39      	ldr	r1, [r7, #32]
 8010dbe:	4618      	mov	r0, r3
 8010dc0:	f001 f9ab 	bl	801211a <_fx_utility_16_unsigned_write>

        /* Set the signature.  */
        byte_ptr[FX_BOOT_SIG] =  0x29;
 8010dc4:	697b      	ldr	r3, [r7, #20]
 8010dc6:	3326      	adds	r3, #38	; 0x26
 8010dc8:	2229      	movs	r2, #41	; 0x29
 8010dca:	701a      	strb	r2, [r3, #0]

        /* Setup the volume ID.  */
        _fx_utility_32_unsigned_write(&byte_ptr[FX_VOLUME_ID], _fx_media_format_volume_id);
 8010dcc:	697b      	ldr	r3, [r7, #20]
 8010dce:	3327      	adds	r3, #39	; 0x27
 8010dd0:	4a31      	ldr	r2, [pc, #196]	; (8010e98 <_fx_media_format+0x3b0>)
 8010dd2:	6812      	ldr	r2, [r2, #0]
 8010dd4:	4611      	mov	r1, r2
 8010dd6:	4618      	mov	r0, r3
 8010dd8:	f001 f9d1 	bl	801217e <_fx_utility_32_unsigned_write>
 8010ddc:	e011      	b.n	8010e02 <_fx_media_format+0x31a>
    }
    else
    {

        /* Set the number of sectors per FAT32.  */
        _fx_utility_32_unsigned_write(&byte_ptr[FX_SECTORS_PER_FAT_32], sectors_per_fat);
 8010dde:	697b      	ldr	r3, [r7, #20]
 8010de0:	3324      	adds	r3, #36	; 0x24
 8010de2:	6a39      	ldr	r1, [r7, #32]
 8010de4:	4618      	mov	r0, r3
 8010de6:	f001 f9ca 	bl	801217e <_fx_utility_32_unsigned_write>

        /* Set the signature.  */
        byte_ptr[FX_BOOT_SIG_32] =  0x29;
 8010dea:	697b      	ldr	r3, [r7, #20]
 8010dec:	3342      	adds	r3, #66	; 0x42
 8010dee:	2229      	movs	r2, #41	; 0x29
 8010df0:	701a      	strb	r2, [r3, #0]

        /* Setup the volume ID.  */
        _fx_utility_32_unsigned_write(&byte_ptr[FX_VOLUME_ID_32], _fx_media_format_volume_id);
 8010df2:	697b      	ldr	r3, [r7, #20]
 8010df4:	3343      	adds	r3, #67	; 0x43
 8010df6:	4a28      	ldr	r2, [pc, #160]	; (8010e98 <_fx_media_format+0x3b0>)
 8010df8:	6812      	ldr	r2, [r2, #0]
 8010dfa:	4611      	mov	r1, r2
 8010dfc:	4618      	mov	r0, r3
 8010dfe:	f001 f9be 	bl	801217e <_fx_utility_32_unsigned_write>
    }

    /* Set the total number of sectors.  */
    if (total_sectors < (ULONG)0xFFFF)
 8010e02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010e04:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8010e08:	4293      	cmp	r3, r2
 8010e0a:	d80c      	bhi.n	8010e26 <_fx_media_format+0x33e>
    {

        /* Write the 16-bit total sector field.  */
        _fx_utility_16_unsigned_write(&byte_ptr[FX_SECTORS], (UINT)(total_sectors));
 8010e0c:	697b      	ldr	r3, [r7, #20]
 8010e0e:	3313      	adds	r3, #19
 8010e10:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010e12:	4618      	mov	r0, r3
 8010e14:	f001 f981 	bl	801211a <_fx_utility_16_unsigned_write>

        /* Set the number of huge sectors.  */
        _fx_utility_32_unsigned_write(&byte_ptr[FX_HUGE_SECTORS], 0);
 8010e18:	697b      	ldr	r3, [r7, #20]
 8010e1a:	3320      	adds	r3, #32
 8010e1c:	2100      	movs	r1, #0
 8010e1e:	4618      	mov	r0, r3
 8010e20:	f001 f9ad 	bl	801217e <_fx_utility_32_unsigned_write>
 8010e24:	e00b      	b.n	8010e3e <_fx_media_format+0x356>
    }
    else
    {

        /* Write the 16-bit total sector field as 0.  */
        _fx_utility_16_unsigned_write(&byte_ptr[FX_SECTORS], (UINT)0);
 8010e26:	697b      	ldr	r3, [r7, #20]
 8010e28:	3313      	adds	r3, #19
 8010e2a:	2100      	movs	r1, #0
 8010e2c:	4618      	mov	r0, r3
 8010e2e:	f001 f974 	bl	801211a <_fx_utility_16_unsigned_write>

        /* Set the number of huge sectors.  */
        _fx_utility_32_unsigned_write(&byte_ptr[FX_HUGE_SECTORS], total_sectors);
 8010e32:	697b      	ldr	r3, [r7, #20]
 8010e34:	3320      	adds	r3, #32
 8010e36:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010e38:	4618      	mov	r0, r3
 8010e3a:	f001 f9a0 	bl	801217e <_fx_utility_32_unsigned_write>
    }

    /* Set the number of reserved sectors.  */
    _fx_utility_16_unsigned_write(&byte_ptr[FX_RESERVED_SECTORS], reserved_sectors);
 8010e3e:	697b      	ldr	r3, [r7, #20]
 8010e40:	330e      	adds	r3, #14
 8010e42:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010e44:	4618      	mov	r0, r3
 8010e46:	f001 f968 	bl	801211a <_fx_utility_16_unsigned_write>

    /* Set the number of sectors per cluster */
    byte_ptr[FX_SECTORS_CLUSTER] =  (UCHAR)sectors_per_cluster;
 8010e4a:	697b      	ldr	r3, [r7, #20]
 8010e4c:	330d      	adds	r3, #13
 8010e4e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010e50:	b2d2      	uxtb	r2, r2
 8010e52:	701a      	strb	r2, [r3, #0]

    /* Set the number of FATs.  */
    byte_ptr[FX_NUMBER_OF_FATS] =  (UCHAR)number_of_fats;
 8010e54:	697b      	ldr	r3, [r7, #20]
 8010e56:	3310      	adds	r3, #16
 8010e58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010e5a:	b2d2      	uxtb	r2, r2
 8010e5c:	701a      	strb	r2, [r3, #0]

    /* Set the number of hidden sectors.  */
    _fx_utility_32_unsigned_write(&byte_ptr[FX_HIDDEN_SECTORS], hidden_sectors);
 8010e5e:	697b      	ldr	r3, [r7, #20]
 8010e60:	331c      	adds	r3, #28
 8010e62:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010e64:	4618      	mov	r0, r3
 8010e66:	f001 f98a 	bl	801217e <_fx_utility_32_unsigned_write>

    /* Determine if a FAT12 or FAT16 is present.  If FAT32 is present, these fields are left alone!   */
    if (total_clusters < FX_16_BIT_FAT_SIZE)
 8010e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e6c:	f64f 72f4 	movw	r2, #65524	; 0xfff4
 8010e70:	4293      	cmp	r3, r2
 8010e72:	d805      	bhi.n	8010e80 <_fx_media_format+0x398>
    {

        /* Yes, set the number of root directory entries.  */
        _fx_utility_16_unsigned_write(&byte_ptr[FX_ROOT_DIR_ENTRIES], directory_entries);
 8010e74:	697b      	ldr	r3, [r7, #20]
 8010e76:	3311      	adds	r3, #17
 8010e78:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8010e7a:	4618      	mov	r0, r3
 8010e7c:	f001 f94d 	bl	801211a <_fx_utility_16_unsigned_write>
    }

    /* Now setup the volume label. */
    if (total_clusters < FX_16_BIT_FAT_SIZE)
 8010e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e82:	f64f 72f4 	movw	r2, #65524	; 0xfff4
 8010e86:	4293      	cmp	r3, r2
 8010e88:	d808      	bhi.n	8010e9c <_fx_media_format+0x3b4>
    {

        /* FAT12/16 volume label offset.  */
        j =  FX_VOLUME_LABEL;
 8010e8a:	232b      	movs	r3, #43	; 0x2b
 8010e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010e8e:	e007      	b.n	8010ea0 <_fx_media_format+0x3b8>
 8010e90:	2000000c 	.word	0x2000000c
 8010e94:	20000014 	.word	0x20000014
 8010e98:	20000018 	.word	0x20000018
    }
    else
    {

        /* FAT32 volume label offset.  */
        j =  FX_VOLUME_LABEL_32;
 8010e9c:	2347      	movs	r3, #71	; 0x47
 8010e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    i = 0;
 8010ea0:	2300      	movs	r3, #0
 8010ea2:	633b      	str	r3, [r7, #48]	; 0x30
    while (i < 11)
 8010ea4:	e012      	b.n	8010ecc <_fx_media_format+0x3e4>
    {

        /* Determine if it is NULL.  */
        if (volume_name[i] == 0)
 8010ea6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010eaa:	4413      	add	r3, r2
 8010eac:	781b      	ldrb	r3, [r3, #0]
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	d010      	beq.n	8010ed4 <_fx_media_format+0x3ec>
            /* Yes, the copying is finished.  */
            break;
        }

        /* Otherwise, copy byte of volume name into boot record.  */
        byte_ptr[j + i] =  (UCHAR)volume_name[i];
 8010eb2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010eb6:	441a      	add	r2, r3
 8010eb8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ebc:	440b      	add	r3, r1
 8010ebe:	6979      	ldr	r1, [r7, #20]
 8010ec0:	440b      	add	r3, r1
 8010ec2:	7812      	ldrb	r2, [r2, #0]
 8010ec4:	701a      	strb	r2, [r3, #0]

        /* Increment byte position.  */
        i++;
 8010ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ec8:	3301      	adds	r3, #1
 8010eca:	633b      	str	r3, [r7, #48]	; 0x30
    while (i < 11)
 8010ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ece:	2b0a      	cmp	r3, #10
 8010ed0:	d9e9      	bls.n	8010ea6 <_fx_media_format+0x3be>
 8010ed2:	e00b      	b.n	8010eec <_fx_media_format+0x404>
            break;
 8010ed4:	bf00      	nop
    }

    /* Now blank-pad the remainder of the volume name.  */
#ifndef FX_DISABLE_FORCE_MEMORY_OPERATION
    while (i < 11)
 8010ed6:	e009      	b.n	8010eec <_fx_media_format+0x404>
    {

        byte_ptr[j + i] =  (UCHAR)' ';
 8010ed8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010edc:	4413      	add	r3, r2
 8010ede:	697a      	ldr	r2, [r7, #20]
 8010ee0:	4413      	add	r3, r2
 8010ee2:	2220      	movs	r2, #32
 8010ee4:	701a      	strb	r2, [r3, #0]
        i++;
 8010ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ee8:	3301      	adds	r3, #1
 8010eea:	633b      	str	r3, [r7, #48]	; 0x30
    while (i < 11)
 8010eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010eee:	2b0a      	cmp	r3, #10
 8010ef0:	d9f2      	bls.n	8010ed8 <_fx_media_format+0x3f0>
    byte_ptr[510] = 0x55;
    byte_ptr[511] = 0xAA;
#else

    /* Set bootrecord signature.  */
    byte_ptr[bytes_per_sector - 2] = 0x55;
 8010ef2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010ef4:	3b02      	subs	r3, #2
 8010ef6:	697a      	ldr	r2, [r7, #20]
 8010ef8:	4413      	add	r3, r2
 8010efa:	2255      	movs	r2, #85	; 0x55
 8010efc:	701a      	strb	r2, [r3, #0]
    byte_ptr[bytes_per_sector - 1] = 0xAA;
 8010efe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010f00:	3b01      	subs	r3, #1
 8010f02:	697a      	ldr	r2, [r7, #20]
 8010f04:	4413      	add	r3, r2
 8010f06:	22aa      	movs	r2, #170	; 0xaa
 8010f08:	701a      	strb	r2, [r3, #0]
#endif

    /* Select the boot record write command.  */
    media_ptr -> fx_media_driver_request =       FX_DRIVER_BOOT_WRITE;
 8010f0a:	68fb      	ldr	r3, [r7, #12]
 8010f0c:	2207      	movs	r2, #7
 8010f0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 8010f12:	68fb      	ldr	r3, [r7, #12]
 8010f14:	2201      	movs	r2, #1
 8010f16:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    media_ptr -> fx_media_driver_sectors =       1;
 8010f1a:	68fb      	ldr	r3, [r7, #12]
 8010f1c:	2201      	movs	r2, #1
 8010f1e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    media_ptr -> fx_media_driver_sector_type =   FX_BOOT_SECTOR;
 8010f22:	68fb      	ldr	r3, [r7, #12]
 8010f24:	2201      	movs	r2, #1
 8010f26:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_BOOT_WRITE, media_ptr, memory_ptr, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Write out the bootrecord */
    (driver)(media_ptr);
 8010f2a:	68bb      	ldr	r3, [r7, #8]
 8010f2c:	68f8      	ldr	r0, [r7, #12]
 8010f2e:	4798      	blx	r3

    /* Clear the write flag.  */
    media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 8010f30:	68fb      	ldr	r3, [r7, #12]
 8010f32:	2200      	movs	r2, #0
 8010f34:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

    /* Determine if it was successful.  */
    if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 8010f38:	68fb      	ldr	r3, [r7, #12]
 8010f3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	d001      	beq.n	8010f46 <_fx_media_format+0x45e>
    {
        return(FX_IO_ERROR);
 8010f42:	2390      	movs	r3, #144	; 0x90
 8010f44:	e181      	b.n	801124a <_fx_media_format+0x762>
    }

    /* Calculate the number of root sectors.  */
    root_sectors =    ((directory_entries * FX_DIR_ENTRY_SIZE) + bytes_per_sector - 1) / bytes_per_sector;
 8010f46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010f48:	015a      	lsls	r2, r3, #5
 8010f4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010f4c:	4413      	add	r3, r2
 8010f4e:	1e5a      	subs	r2, r3, #1
 8010f50:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8010f56:	613b      	str	r3, [r7, #16]

    /* Determine if FAT32 is present AND if the bytes per sector is large enough to have
       a FSINFO sector.  */
    if ((total_clusters >= FX_16_BIT_FAT_SIZE) && (bytes_per_sector == 512))
 8010f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f5a:	f64f 72f4 	movw	r2, #65524	; 0xfff4
 8010f5e:	4293      	cmp	r3, r2
 8010f60:	d971      	bls.n	8011046 <_fx_media_format+0x55e>
 8010f62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010f64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010f68:	d16d      	bne.n	8011046 <_fx_media_format+0x55e>
    {

#ifndef FX_DISABLE_FORCE_MEMORY_OPERATION
        /* Clear sector buffer.  */
        for (i = 0; i < bytes_per_sector; i++)
 8010f6a:	2300      	movs	r3, #0
 8010f6c:	633b      	str	r3, [r7, #48]	; 0x30
 8010f6e:	e007      	b.n	8010f80 <_fx_media_format+0x498>
        {
            byte_ptr[i] =  (CHAR)0;
 8010f70:	697a      	ldr	r2, [r7, #20]
 8010f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f74:	4413      	add	r3, r2
 8010f76:	2200      	movs	r2, #0
 8010f78:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < bytes_per_sector; i++)
 8010f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f7c:	3301      	adds	r3, #1
 8010f7e:	633b      	str	r3, [r7, #48]	; 0x30
 8010f80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010f82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010f84:	429a      	cmp	r2, r3
 8010f86:	d3f3      	bcc.n	8010f70 <_fx_media_format+0x488>
#endif /* FX_DISABLE_FORCE_MEMORY_OPERATION */

        /* Build the FSINFO fields.  */

        /* Build first signature word, used to help verify this is a FSINFO sector.  */
        byte_ptr[0] =  0x52;
 8010f88:	697b      	ldr	r3, [r7, #20]
 8010f8a:	2252      	movs	r2, #82	; 0x52
 8010f8c:	701a      	strb	r2, [r3, #0]
        byte_ptr[1] =  0x52;
 8010f8e:	697b      	ldr	r3, [r7, #20]
 8010f90:	3301      	adds	r3, #1
 8010f92:	2252      	movs	r2, #82	; 0x52
 8010f94:	701a      	strb	r2, [r3, #0]
        byte_ptr[2] =  0x61;
 8010f96:	697b      	ldr	r3, [r7, #20]
 8010f98:	3302      	adds	r3, #2
 8010f9a:	2261      	movs	r2, #97	; 0x61
 8010f9c:	701a      	strb	r2, [r3, #0]
        byte_ptr[3] =  0x41;
 8010f9e:	697b      	ldr	r3, [r7, #20]
 8010fa0:	3303      	adds	r3, #3
 8010fa2:	2241      	movs	r2, #65	; 0x41
 8010fa4:	701a      	strb	r2, [r3, #0]

        /* Build the next signature word, this too is used to help verify that this is a FSINFO sector.  */
        byte_ptr[484] =  0x72;
 8010fa6:	697b      	ldr	r3, [r7, #20]
 8010fa8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8010fac:	2272      	movs	r2, #114	; 0x72
 8010fae:	701a      	strb	r2, [r3, #0]
        byte_ptr[485] =  0x72;
 8010fb0:	697b      	ldr	r3, [r7, #20]
 8010fb2:	f203 13e5 	addw	r3, r3, #485	; 0x1e5
 8010fb6:	2272      	movs	r2, #114	; 0x72
 8010fb8:	701a      	strb	r2, [r3, #0]
        byte_ptr[486] =  0x41;
 8010fba:	697b      	ldr	r3, [r7, #20]
 8010fbc:	f503 73f3 	add.w	r3, r3, #486	; 0x1e6
 8010fc0:	2241      	movs	r2, #65	; 0x41
 8010fc2:	701a      	strb	r2, [r3, #0]
        byte_ptr[487] =  0x61;
 8010fc4:	697b      	ldr	r3, [r7, #20]
 8010fc6:	f203 13e7 	addw	r3, r3, #487	; 0x1e7
 8010fca:	2261      	movs	r2, #97	; 0x61
 8010fcc:	701a      	strb	r2, [r3, #0]

        /* Build the final signature word, this too is used to help verify that this is a FSINFO sector.  */
        byte_ptr[508] =  0x55;
 8010fce:	697b      	ldr	r3, [r7, #20]
 8010fd0:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8010fd4:	2255      	movs	r2, #85	; 0x55
 8010fd6:	701a      	strb	r2, [r3, #0]
        byte_ptr[509] =  0xAA;
 8010fd8:	697b      	ldr	r3, [r7, #20]
 8010fda:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8010fde:	22aa      	movs	r2, #170	; 0xaa
 8010fe0:	701a      	strb	r2, [r3, #0]

        /* Setup the total available clusters on the media. We need to subtract 1 for the FAT32 root directory.  */
        _fx_utility_32_unsigned_write(&byte_ptr[488], (total_clusters - 1));
 8010fe2:	697b      	ldr	r3, [r7, #20]
 8010fe4:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8010fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fea:	3b01      	subs	r3, #1
 8010fec:	4619      	mov	r1, r3
 8010fee:	4610      	mov	r0, r2
 8010ff0:	f001 f8c5 	bl	801217e <_fx_utility_32_unsigned_write>

        /* Setup the starting free cluster to 3, since cluster 2 is reserved for the FAT32 root directory.  */
        _fx_utility_32_unsigned_write(&byte_ptr[492], 3);
 8010ff4:	697b      	ldr	r3, [r7, #20]
 8010ff6:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8010ffa:	2103      	movs	r1, #3
 8010ffc:	4618      	mov	r0, r3
 8010ffe:	f001 f8be 	bl	801217e <_fx_utility_32_unsigned_write>

        /* Now write the FSINFO sector to the media.  */
        media_ptr -> fx_media_driver_logical_sector =  1;
 8011002:	68fb      	ldr	r3, [r7, #12]
 8011004:	2201      	movs	r2, #1
 8011006:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        media_ptr -> fx_media_driver_request =         FX_DRIVER_WRITE;
 801100a:	68fb      	ldr	r3, [r7, #12]
 801100c:	2201      	movs	r2, #1
 801100e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_sectors =         1;
 8011012:	68fb      	ldr	r3, [r7, #12]
 8011014:	2201      	movs	r2, #1
 8011016:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        media_ptr -> fx_media_driver_system_write =    FX_TRUE;
 801101a:	68fb      	ldr	r3, [r7, #12]
 801101c:	2201      	movs	r2, #1
 801101e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        media_ptr -> fx_media_driver_sector_type =     FX_BOOT_SECTOR;
 8011022:	68fb      	ldr	r3, [r7, #12]
 8011024:	2201      	movs	r2, #1
 8011026:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, 1, 1, memory_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Write out the sector.  */
        (driver)(media_ptr);
 801102a:	68bb      	ldr	r3, [r7, #8]
 801102c:	68f8      	ldr	r0, [r7, #12]
 801102e:	4798      	blx	r3

        /* Clear the system write flag.  */
        media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 8011030:	68fb      	ldr	r3, [r7, #12]
 8011032:	2200      	movs	r2, #0
 8011034:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

        /* Determine if it was successful.  */
        if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 8011038:	68fb      	ldr	r3, [r7, #12]
 801103a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801103e:	2b00      	cmp	r3, #0
 8011040:	d001      	beq.n	8011046 <_fx_media_format+0x55e>
        {
            return(FX_IO_ERROR);
 8011042:	2390      	movs	r3, #144	; 0x90
 8011044:	e101      	b.n	801124a <_fx_media_format+0x762>
    }

    /* At this point we need set up first to FAT entries and clear the remaining FAT sectors area.  */

    /* Loop through number of FATs. The first is the only one used.  */
    for (f = 0; f < number_of_fats; f++)
 8011046:	2300      	movs	r3, #0
 8011048:	61fb      	str	r3, [r7, #28]
 801104a:	e0a7      	b.n	801119c <_fx_media_format+0x6b4>
    {

        /* Loop through all the sectors in this FAT.  */
        for (s = 0; s < sectors_per_fat; s++)
 801104c:	2300      	movs	r3, #0
 801104e:	61bb      	str	r3, [r7, #24]
 8011050:	e09c      	b.n	801118c <_fx_media_format+0x6a4>
        {

            if (s == 0)
 8011052:	69bb      	ldr	r3, [r7, #24]
 8011054:	2b00      	cmp	r3, #0
 8011056:	d15e      	bne.n	8011116 <_fx_media_format+0x62e>
            {

                /* Reserve the first two FAT table entries.  */
                if (total_clusters < FX_12_BIT_FAT_SIZE)
 8011058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801105a:	f640 72f5 	movw	r2, #4085	; 0xff5
 801105e:	4293      	cmp	r3, r2
 8011060:	d80e      	bhi.n	8011080 <_fx_media_format+0x598>
                {

                    /* Reserve the first two FAT-12 entries.  */
                    byte_ptr[0] =  _fx_media_format_media_type;
 8011062:	4b7c      	ldr	r3, [pc, #496]	; (8011254 <_fx_media_format+0x76c>)
 8011064:	781a      	ldrb	r2, [r3, #0]
 8011066:	697b      	ldr	r3, [r7, #20]
 8011068:	701a      	strb	r2, [r3, #0]
                    byte_ptr[1] =  (UCHAR)0xFF;
 801106a:	697b      	ldr	r3, [r7, #20]
 801106c:	3301      	adds	r3, #1
 801106e:	22ff      	movs	r2, #255	; 0xff
 8011070:	701a      	strb	r2, [r3, #0]
                    byte_ptr[2] =  (UCHAR)0xFF;
 8011072:	697b      	ldr	r3, [r7, #20]
 8011074:	3302      	adds	r3, #2
 8011076:	22ff      	movs	r2, #255	; 0xff
 8011078:	701a      	strb	r2, [r3, #0]

                    /* Start clearing at FAT entry 3.  */
                    i =  3;
 801107a:	2303      	movs	r3, #3
 801107c:	633b      	str	r3, [r7, #48]	; 0x30
 801107e:	e055      	b.n	801112c <_fx_media_format+0x644>
                }
                else if (total_clusters < FX_16_BIT_FAT_SIZE)
 8011080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011082:	f64f 72f4 	movw	r2, #65524	; 0xfff4
 8011086:	4293      	cmp	r3, r2
 8011088:	d812      	bhi.n	80110b0 <_fx_media_format+0x5c8>
                {

                    /* Reserve the first two FAT-16 entries.  */
                    byte_ptr[0] =  _fx_media_format_media_type;
 801108a:	4b72      	ldr	r3, [pc, #456]	; (8011254 <_fx_media_format+0x76c>)
 801108c:	781a      	ldrb	r2, [r3, #0]
 801108e:	697b      	ldr	r3, [r7, #20]
 8011090:	701a      	strb	r2, [r3, #0]
                    byte_ptr[1] =  (UCHAR)0xFF;
 8011092:	697b      	ldr	r3, [r7, #20]
 8011094:	3301      	adds	r3, #1
 8011096:	22ff      	movs	r2, #255	; 0xff
 8011098:	701a      	strb	r2, [r3, #0]
                    byte_ptr[2] =  (UCHAR)0xFF;
 801109a:	697b      	ldr	r3, [r7, #20]
 801109c:	3302      	adds	r3, #2
 801109e:	22ff      	movs	r2, #255	; 0xff
 80110a0:	701a      	strb	r2, [r3, #0]
                    byte_ptr[3] =  (UCHAR)0xFF;
 80110a2:	697b      	ldr	r3, [r7, #20]
 80110a4:	3303      	adds	r3, #3
 80110a6:	22ff      	movs	r2, #255	; 0xff
 80110a8:	701a      	strb	r2, [r3, #0]

                    /* Start clearing at FAT entry 3.  */
                    i =  4;
 80110aa:	2304      	movs	r3, #4
 80110ac:	633b      	str	r3, [r7, #48]	; 0x30
 80110ae:	e03d      	b.n	801112c <_fx_media_format+0x644>
                }
                else
                {

                    /* Reserve the first two FAT-32 entries.   */
                    byte_ptr[0] =  _fx_media_format_media_type;
 80110b0:	4b68      	ldr	r3, [pc, #416]	; (8011254 <_fx_media_format+0x76c>)
 80110b2:	781a      	ldrb	r2, [r3, #0]
 80110b4:	697b      	ldr	r3, [r7, #20]
 80110b6:	701a      	strb	r2, [r3, #0]
                    byte_ptr[1] =  (UCHAR)0xFF;
 80110b8:	697b      	ldr	r3, [r7, #20]
 80110ba:	3301      	adds	r3, #1
 80110bc:	22ff      	movs	r2, #255	; 0xff
 80110be:	701a      	strb	r2, [r3, #0]
                    byte_ptr[2] =  (UCHAR)0xFF;
 80110c0:	697b      	ldr	r3, [r7, #20]
 80110c2:	3302      	adds	r3, #2
 80110c4:	22ff      	movs	r2, #255	; 0xff
 80110c6:	701a      	strb	r2, [r3, #0]
                    byte_ptr[3] =  (UCHAR)0x0F;
 80110c8:	697b      	ldr	r3, [r7, #20]
 80110ca:	3303      	adds	r3, #3
 80110cc:	220f      	movs	r2, #15
 80110ce:	701a      	strb	r2, [r3, #0]
                    byte_ptr[4] =  (UCHAR)0xFF;
 80110d0:	697b      	ldr	r3, [r7, #20]
 80110d2:	3304      	adds	r3, #4
 80110d4:	22ff      	movs	r2, #255	; 0xff
 80110d6:	701a      	strb	r2, [r3, #0]
                    byte_ptr[5] =  (UCHAR)0xFF;
 80110d8:	697b      	ldr	r3, [r7, #20]
 80110da:	3305      	adds	r3, #5
 80110dc:	22ff      	movs	r2, #255	; 0xff
 80110de:	701a      	strb	r2, [r3, #0]
                    byte_ptr[6] =  (UCHAR)0xFF;
 80110e0:	697b      	ldr	r3, [r7, #20]
 80110e2:	3306      	adds	r3, #6
 80110e4:	22ff      	movs	r2, #255	; 0xff
 80110e6:	701a      	strb	r2, [r3, #0]
                    byte_ptr[7] =  (UCHAR)0x0F;
 80110e8:	697b      	ldr	r3, [r7, #20]
 80110ea:	3307      	adds	r3, #7
 80110ec:	220f      	movs	r2, #15
 80110ee:	701a      	strb	r2, [r3, #0]

                    /* Preallocate the first cluster for the root directory.  */
                    byte_ptr[8] =   (UCHAR)0xFF;
 80110f0:	697b      	ldr	r3, [r7, #20]
 80110f2:	3308      	adds	r3, #8
 80110f4:	22ff      	movs	r2, #255	; 0xff
 80110f6:	701a      	strb	r2, [r3, #0]
                    byte_ptr[9] =   (UCHAR)0xFF;
 80110f8:	697b      	ldr	r3, [r7, #20]
 80110fa:	3309      	adds	r3, #9
 80110fc:	22ff      	movs	r2, #255	; 0xff
 80110fe:	701a      	strb	r2, [r3, #0]
                    byte_ptr[10] =  (UCHAR)0xFF;
 8011100:	697b      	ldr	r3, [r7, #20]
 8011102:	330a      	adds	r3, #10
 8011104:	22ff      	movs	r2, #255	; 0xff
 8011106:	701a      	strb	r2, [r3, #0]
                    byte_ptr[11] =  (UCHAR)0x0F;
 8011108:	697b      	ldr	r3, [r7, #20]
 801110a:	330b      	adds	r3, #11
 801110c:	220f      	movs	r2, #15
 801110e:	701a      	strb	r2, [r3, #0]

                    /* Start clearing at FAT entry 3.  */
                    i =  12;
 8011110:	230c      	movs	r3, #12
 8011112:	633b      	str	r3, [r7, #48]	; 0x30
 8011114:	e00a      	b.n	801112c <_fx_media_format+0x644>
                }
            }
            else
            {
                i = 0;
 8011116:	2300      	movs	r3, #0
 8011118:	633b      	str	r3, [r7, #48]	; 0x30
            }

#ifndef FX_DISABLE_FORCE_MEMORY_OPERATION
            /* Clear remainder of sector buffer.  */
            for (; i < bytes_per_sector; i++)
 801111a:	e007      	b.n	801112c <_fx_media_format+0x644>
            {
                byte_ptr[i] =  (CHAR)0;
 801111c:	697a      	ldr	r2, [r7, #20]
 801111e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011120:	4413      	add	r3, r2
 8011122:	2200      	movs	r2, #0
 8011124:	701a      	strb	r2, [r3, #0]
            for (; i < bytes_per_sector; i++)
 8011126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011128:	3301      	adds	r3, #1
 801112a:	633b      	str	r3, [r7, #48]	; 0x30
 801112c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801112e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011130:	429a      	cmp	r2, r3
 8011132:	d3f3      	bcc.n	801111c <_fx_media_format+0x634>
#else
            _fx_utility_memory_set(&byte_ptr[i], 0, (bytes_per_sector - i));
#endif  /* FX_DISABLE_FORCE_MEMORY_OPERATION */

            /* Build sector write command.  */
            media_ptr -> fx_media_driver_logical_sector =  reserved_sectors + (f * sectors_per_fat) + s;
 8011134:	69fb      	ldr	r3, [r7, #28]
 8011136:	6a3a      	ldr	r2, [r7, #32]
 8011138:	fb03 f202 	mul.w	r2, r3, r2
 801113c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801113e:	441a      	add	r2, r3
 8011140:	69bb      	ldr	r3, [r7, #24]
 8011142:	441a      	add	r2, r3
 8011144:	68fb      	ldr	r3, [r7, #12]
 8011146:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            media_ptr -> fx_media_driver_request =         FX_DRIVER_WRITE;
 801114a:	68fb      	ldr	r3, [r7, #12]
 801114c:	2201      	movs	r2, #1
 801114e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
            media_ptr -> fx_media_driver_sectors =         1;
 8011152:	68fb      	ldr	r3, [r7, #12]
 8011154:	2201      	movs	r2, #1
 8011156:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
            media_ptr -> fx_media_driver_system_write =    FX_TRUE;
 801115a:	68fb      	ldr	r3, [r7, #12]
 801115c:	2201      	movs	r2, #1
 801115e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
            media_ptr -> fx_media_driver_sector_type =     FX_FAT_SECTOR;
 8011162:	68fb      	ldr	r3, [r7, #12]
 8011164:	2202      	movs	r2, #2
 8011166:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

            /* If trace is enabled, insert this event into the trace buffer.  */
            FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, media_ptr -> fx_media_driver_logical_sector, 1, memory_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

            /* Write out the sector.  */
            (driver)(media_ptr);
 801116a:	68bb      	ldr	r3, [r7, #8]
 801116c:	68f8      	ldr	r0, [r7, #12]
 801116e:	4798      	blx	r3

            /* Clear the system write flag.  */
            media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 8011170:	68fb      	ldr	r3, [r7, #12]
 8011172:	2200      	movs	r2, #0
 8011174:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

            /* Determine if it was successful.  */
            if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 8011178:	68fb      	ldr	r3, [r7, #12]
 801117a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801117e:	2b00      	cmp	r3, #0
 8011180:	d001      	beq.n	8011186 <_fx_media_format+0x69e>
            {
                return(FX_IO_ERROR);
 8011182:	2390      	movs	r3, #144	; 0x90
 8011184:	e061      	b.n	801124a <_fx_media_format+0x762>
        for (s = 0; s < sectors_per_fat; s++)
 8011186:	69bb      	ldr	r3, [r7, #24]
 8011188:	3301      	adds	r3, #1
 801118a:	61bb      	str	r3, [r7, #24]
 801118c:	69ba      	ldr	r2, [r7, #24]
 801118e:	6a3b      	ldr	r3, [r7, #32]
 8011190:	429a      	cmp	r2, r3
 8011192:	f4ff af5e 	bcc.w	8011052 <_fx_media_format+0x56a>
    for (f = 0; f < number_of_fats; f++)
 8011196:	69fb      	ldr	r3, [r7, #28]
 8011198:	3301      	adds	r3, #1
 801119a:	61fb      	str	r3, [r7, #28]
 801119c:	69fa      	ldr	r2, [r7, #28]
 801119e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80111a0:	429a      	cmp	r2, r3
 80111a2:	f4ff af53 	bcc.w	801104c <_fx_media_format+0x564>
        }
    }

#ifndef FX_DISABLE_FORCE_MEMORY_OPERATION
    /* Clear sector buffer.  */
    for (i = 0; i < bytes_per_sector; i++)
 80111a6:	2300      	movs	r3, #0
 80111a8:	633b      	str	r3, [r7, #48]	; 0x30
 80111aa:	e007      	b.n	80111bc <_fx_media_format+0x6d4>
    {
        byte_ptr[i] =  (CHAR)0;
 80111ac:	697a      	ldr	r2, [r7, #20]
 80111ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111b0:	4413      	add	r3, r2
 80111b2:	2200      	movs	r2, #0
 80111b4:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < bytes_per_sector; i++)
 80111b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111b8:	3301      	adds	r3, #1
 80111ba:	633b      	str	r3, [r7, #48]	; 0x30
 80111bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80111be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80111c0:	429a      	cmp	r2, r3
 80111c2:	d3f3      	bcc.n	80111ac <_fx_media_format+0x6c4>
#else
    _fx_utility_memory_set(byte_ptr, 0, bytes_per_sector);
#endif /* FX_DISABLE_FORCE_MEMORY_OPERATION */

    /* Now clear the root directory sectors.  */
    for (s = 0; s < root_sectors; s++)
 80111c4:	2300      	movs	r3, #0
 80111c6:	61bb      	str	r3, [r7, #24]
 80111c8:	e02b      	b.n	8011222 <_fx_media_format+0x73a>
    {

        /* Build sector write command.  */
        media_ptr -> fx_media_driver_logical_sector =  reserved_sectors + (number_of_fats * sectors_per_fat) + s;
 80111ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80111cc:	6a3a      	ldr	r2, [r7, #32]
 80111ce:	fb03 f202 	mul.w	r2, r3, r2
 80111d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80111d4:	441a      	add	r2, r3
 80111d6:	69bb      	ldr	r3, [r7, #24]
 80111d8:	441a      	add	r2, r3
 80111da:	68fb      	ldr	r3, [r7, #12]
 80111dc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        media_ptr -> fx_media_driver_request =         FX_DRIVER_WRITE;
 80111e0:	68fb      	ldr	r3, [r7, #12]
 80111e2:	2201      	movs	r2, #1
 80111e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_sectors =         1;
 80111e8:	68fb      	ldr	r3, [r7, #12]
 80111ea:	2201      	movs	r2, #1
 80111ec:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        media_ptr -> fx_media_driver_system_write =    FX_TRUE;
 80111f0:	68fb      	ldr	r3, [r7, #12]
 80111f2:	2201      	movs	r2, #1
 80111f4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        media_ptr -> fx_media_driver_sector_type =     FX_DIRECTORY_SECTOR;
 80111f8:	68fb      	ldr	r3, [r7, #12]
 80111fa:	2203      	movs	r2, #3
 80111fc:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, media_ptr -> fx_media_driver_logical_sector, 1, memory_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Write out the sector.  */
        (driver)(media_ptr);
 8011200:	68bb      	ldr	r3, [r7, #8]
 8011202:	68f8      	ldr	r0, [r7, #12]
 8011204:	4798      	blx	r3

        /* Clear the write flag.  */
        media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 8011206:	68fb      	ldr	r3, [r7, #12]
 8011208:	2200      	movs	r2, #0
 801120a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

        /* Determine if it was successful.  */
        if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 801120e:	68fb      	ldr	r3, [r7, #12]
 8011210:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011214:	2b00      	cmp	r3, #0
 8011216:	d001      	beq.n	801121c <_fx_media_format+0x734>
        {
            return(FX_IO_ERROR);
 8011218:	2390      	movs	r3, #144	; 0x90
 801121a:	e016      	b.n	801124a <_fx_media_format+0x762>
    for (s = 0; s < root_sectors; s++)
 801121c:	69bb      	ldr	r3, [r7, #24]
 801121e:	3301      	adds	r3, #1
 8011220:	61bb      	str	r3, [r7, #24]
 8011222:	69ba      	ldr	r2, [r7, #24]
 8011224:	693b      	ldr	r3, [r7, #16]
 8011226:	429a      	cmp	r2, r3
 8011228:	d3cf      	bcc.n	80111ca <_fx_media_format+0x6e2>
        }
    }

    /* Build the "uninitialize" I/O driver request.  */
    media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 801122a:	68fb      	ldr	r3, [r7, #12]
 801122c:	2208      	movs	r2, #8
 801122e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 8011232:	68fb      	ldr	r3, [r7, #12]
 8011234:	2290      	movs	r2, #144	; 0x90
 8011236:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Call the specified I/O driver with the uninitialize request.  */
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 801123a:	68fb      	ldr	r3, [r7, #12]
 801123c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8011240:	68f8      	ldr	r0, [r7, #12]
 8011242:	4798      	blx	r3

    /* Return success!  */
    return(media_ptr -> fx_media_driver_status);
 8011244:	68fb      	ldr	r3, [r7, #12]
 8011246:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 801124a:	4618      	mov	r0, r3
 801124c:	3738      	adds	r7, #56	; 0x38
 801124e:	46bd      	mov	sp, r7
 8011250:	bd80      	pop	{r7, pc}
 8011252:	bf00      	nop
 8011254:	20000014 	.word	0x20000014

08011258 <_fx_media_open>:
/*                                                                        */
/**************************************************************************/
UINT  _fx_media_open(FX_MEDIA *media_ptr, CHAR *media_name,
                     VOID (*media_driver)(FX_MEDIA *), VOID *driver_info_ptr,
                     VOID *memory_ptr, ULONG memory_size)
{
 8011258:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801125c:	b09a      	sub	sp, #104	; 0x68
 801125e:	af04      	add	r7, sp, #16
 8011260:	60f8      	str	r0, [r7, #12]
 8011262:	60b9      	str	r1, [r7, #8]
 8011264:	607a      	str	r2, [r7, #4]
 8011266:	603b      	str	r3, [r7, #0]
FX_INT_SAVE_AREA


#ifndef FX_DISABLE_BUILD_OPTIONS
    /* Reference the version ID and option words to ensure they are linked in.  */
    if ((_fx_system_build_options_1 | _fx_system_build_options_2 | _fx_system_build_options_3) == 0 ||
 8011268:	4bba      	ldr	r3, [pc, #744]	; (8011554 <_fx_media_open+0x2fc>)
 801126a:	681a      	ldr	r2, [r3, #0]
 801126c:	4bba      	ldr	r3, [pc, #744]	; (8011558 <_fx_media_open+0x300>)
 801126e:	681b      	ldr	r3, [r3, #0]
 8011270:	431a      	orrs	r2, r3
 8011272:	4bba      	ldr	r3, [pc, #744]	; (801155c <_fx_media_open+0x304>)
 8011274:	681b      	ldr	r3, [r3, #0]
 8011276:	4313      	orrs	r3, r2
 8011278:	2b00      	cmp	r3, #0
 801127a:	d003      	beq.n	8011284 <_fx_media_open+0x2c>
        _fx_version_id[0] == 0)
 801127c:	4bb8      	ldr	r3, [pc, #736]	; (8011560 <_fx_media_open+0x308>)
 801127e:	781b      	ldrb	r3, [r3, #0]
    if ((_fx_system_build_options_1 | _fx_system_build_options_2 | _fx_system_build_options_3) == 0 ||
 8011280:	2b00      	cmp	r3, #0
 8011282:	d102      	bne.n	801128a <_fx_media_open+0x32>
    {

        /* We should never get here!  */
        return(FX_NOT_IMPLEMENTED);
 8011284:	2322      	movs	r3, #34	; 0x22
 8011286:	f000 bd53 	b.w	8011d30 <_fx_media_open+0xad8>
#ifdef FX_DISABLE_CACHE
    media_ptr -> fx_media_memory_buffer_sector = (ULONG64)-1;
#endif /* FX_DISABLE_CACHE */

    /* Save the basic information in the media control block.  */
    media_ptr -> fx_media_name =                        media_name;
 801128a:	68fb      	ldr	r3, [r7, #12]
 801128c:	68ba      	ldr	r2, [r7, #8]
 801128e:	605a      	str	r2, [r3, #4]
    media_ptr -> fx_media_driver_entry =                media_driver;
 8011290:	68fb      	ldr	r3, [r7, #12]
 8011292:	687a      	ldr	r2, [r7, #4]
 8011294:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    media_ptr -> fx_media_memory_buffer =               (UCHAR *)memory_ptr;
 8011298:	68fb      	ldr	r3, [r7, #12]
 801129a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801129c:	609a      	str	r2, [r3, #8]
    media_ptr -> fx_media_memory_size =                 memory_size;
 801129e:	68fb      	ldr	r3, [r7, #12]
 80112a0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80112a2:	60da      	str	r2, [r3, #12]
#ifndef FX_DISABLE_FORCE_MEMORY_OPERATION
    media_ptr -> fx_media_disable_burst_cache =         FX_FALSE;
 80112a4:	68fb      	ldr	r3, [r7, #12]
 80112a6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80112aa:	461a      	mov	r2, r3
 80112ac:	2300      	movs	r3, #0
 80112ae:	f8c2 34a4 	str.w	r3, [r2, #1188]	; 0x4a4
    media_ptr -> fx_media_FAT_type =                    0;
 80112b2:	68fb      	ldr	r3, [r7, #12]
 80112b4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80112b8:	2200      	movs	r2, #0
 80112ba:	f883 24b0 	strb.w	r2, [r3, #1200]	; 0x4b0
#endif /* FX_DISABLE_FORCE_MEMORY_OPERATION */

    /* Save the original memory pointer.  */
    original_memory_ptr =  (UCHAR *)memory_ptr;
 80112be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80112c0:	643b      	str	r3, [r7, #64]	; 0x40

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Clear the optional media statistics.  */
    media_ptr -> fx_media_directory_attributes_reads =  0;
 80112c2:	68fb      	ldr	r3, [r7, #12]
 80112c4:	2200      	movs	r2, #0
 80112c6:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
    media_ptr -> fx_media_directory_attributes_sets =  0;
 80112ca:	68fb      	ldr	r3, [r7, #12]
 80112cc:	2200      	movs	r2, #0
 80112ce:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    media_ptr -> fx_media_directory_creates =  0;
 80112d2:	68fb      	ldr	r3, [r7, #12]
 80112d4:	2200      	movs	r2, #0
 80112d6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    media_ptr -> fx_media_directory_default_gets =  0;
 80112da:	68fb      	ldr	r3, [r7, #12]
 80112dc:	2200      	movs	r2, #0
 80112de:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    media_ptr -> fx_media_directory_default_sets =  0;
 80112e2:	68fb      	ldr	r3, [r7, #12]
 80112e4:	2200      	movs	r2, #0
 80112e6:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
    media_ptr -> fx_media_directory_deletes =  0;
 80112ea:	68fb      	ldr	r3, [r7, #12]
 80112ec:	2200      	movs	r2, #0
 80112ee:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
    media_ptr -> fx_media_directory_first_entry_finds =  0;
 80112f2:	68fb      	ldr	r3, [r7, #12]
 80112f4:	2200      	movs	r2, #0
 80112f6:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
    media_ptr -> fx_media_directory_first_full_entry_finds =  0;
 80112fa:	68fb      	ldr	r3, [r7, #12]
 80112fc:	2200      	movs	r2, #0
 80112fe:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    media_ptr -> fx_media_directory_information_gets =  0;
 8011302:	68fb      	ldr	r3, [r7, #12]
 8011304:	2200      	movs	r2, #0
 8011306:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
    media_ptr -> fx_media_directory_local_path_clears =  0;
 801130a:	68fb      	ldr	r3, [r7, #12]
 801130c:	2200      	movs	r2, #0
 801130e:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
    media_ptr -> fx_media_directory_local_path_gets =  0;
 8011312:	68fb      	ldr	r3, [r7, #12]
 8011314:	2200      	movs	r2, #0
 8011316:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    media_ptr -> fx_media_directory_local_path_restores =  0;
 801131a:	68fb      	ldr	r3, [r7, #12]
 801131c:	2200      	movs	r2, #0
 801131e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    media_ptr -> fx_media_directory_local_path_sets =  0;
 8011322:	68fb      	ldr	r3, [r7, #12]
 8011324:	2200      	movs	r2, #0
 8011326:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    media_ptr -> fx_media_directory_name_tests =  0;
 801132a:	68fb      	ldr	r3, [r7, #12]
 801132c:	2200      	movs	r2, #0
 801132e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    media_ptr -> fx_media_directory_next_entry_finds =  0;
 8011332:	68fb      	ldr	r3, [r7, #12]
 8011334:	2200      	movs	r2, #0
 8011336:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    media_ptr -> fx_media_directory_next_full_entry_finds =  0;
 801133a:	68fb      	ldr	r3, [r7, #12]
 801133c:	2200      	movs	r2, #0
 801133e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    media_ptr -> fx_media_directory_renames =  0;
 8011342:	68fb      	ldr	r3, [r7, #12]
 8011344:	2200      	movs	r2, #0
 8011346:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    media_ptr -> fx_media_file_allocates =  0;
 801134a:	68fb      	ldr	r3, [r7, #12]
 801134c:	2200      	movs	r2, #0
 801134e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    media_ptr -> fx_media_file_attributes_reads =  0;
 8011352:	68fb      	ldr	r3, [r7, #12]
 8011354:	2200      	movs	r2, #0
 8011356:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    media_ptr -> fx_media_file_attributes_sets =  0;
 801135a:	68fb      	ldr	r3, [r7, #12]
 801135c:	2200      	movs	r2, #0
 801135e:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    media_ptr -> fx_media_file_best_effort_allocates =  0;
 8011362:	68fb      	ldr	r3, [r7, #12]
 8011364:	2200      	movs	r2, #0
 8011366:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    media_ptr -> fx_media_file_closes =  0;
 801136a:	68fb      	ldr	r3, [r7, #12]
 801136c:	2200      	movs	r2, #0
 801136e:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
    media_ptr -> fx_media_file_creates =  0;
 8011372:	68fb      	ldr	r3, [r7, #12]
 8011374:	2200      	movs	r2, #0
 8011376:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
    media_ptr -> fx_media_file_deletes =  0;
 801137a:	68fb      	ldr	r3, [r7, #12]
 801137c:	2200      	movs	r2, #0
 801137e:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    media_ptr -> fx_media_file_opens =  0;
 8011382:	68fb      	ldr	r3, [r7, #12]
 8011384:	2200      	movs	r2, #0
 8011386:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
    media_ptr -> fx_media_file_reads =  0;
 801138a:	68fb      	ldr	r3, [r7, #12]
 801138c:	2200      	movs	r2, #0
 801138e:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    media_ptr -> fx_media_file_relative_seeks =  0;
 8011392:	68fb      	ldr	r3, [r7, #12]
 8011394:	2200      	movs	r2, #0
 8011396:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    media_ptr -> fx_media_file_renames =  0;
 801139a:	68fb      	ldr	r3, [r7, #12]
 801139c:	2200      	movs	r2, #0
 801139e:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
    media_ptr -> fx_media_file_seeks =  0;
 80113a2:	68fb      	ldr	r3, [r7, #12]
 80113a4:	2200      	movs	r2, #0
 80113a6:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
    media_ptr -> fx_media_file_truncates =  0;
 80113aa:	68fb      	ldr	r3, [r7, #12]
 80113ac:	2200      	movs	r2, #0
 80113ae:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
    media_ptr -> fx_media_file_truncate_releases =  0;
 80113b2:	68fb      	ldr	r3, [r7, #12]
 80113b4:	2200      	movs	r2, #0
 80113b6:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
    media_ptr -> fx_media_file_writes =  0;
 80113ba:	68fb      	ldr	r3, [r7, #12]
 80113bc:	2200      	movs	r2, #0
 80113be:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
    media_ptr -> fx_media_aborts =  0;
 80113c2:	68fb      	ldr	r3, [r7, #12]
 80113c4:	2200      	movs	r2, #0
 80113c6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    media_ptr -> fx_media_flushes =  0;
 80113ca:	68fb      	ldr	r3, [r7, #12]
 80113cc:	2200      	movs	r2, #0
 80113ce:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
    media_ptr -> fx_media_reads =  0;
 80113d2:	68fb      	ldr	r3, [r7, #12]
 80113d4:	2200      	movs	r2, #0
 80113d6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
    media_ptr -> fx_media_writes =  0;
 80113da:	68fb      	ldr	r3, [r7, #12]
 80113dc:	2200      	movs	r2, #0
 80113de:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
    media_ptr -> fx_media_directory_entry_reads =  0;
 80113e2:	68fb      	ldr	r3, [r7, #12]
 80113e4:	2200      	movs	r2, #0
 80113e6:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
    media_ptr -> fx_media_directory_entry_writes =  0;
 80113ea:	68fb      	ldr	r3, [r7, #12]
 80113ec:	2200      	movs	r2, #0
 80113ee:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
    media_ptr -> fx_media_directory_searches =  0;
 80113f2:	68fb      	ldr	r3, [r7, #12]
 80113f4:	2200      	movs	r2, #0
 80113f6:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE
    media_ptr -> fx_media_directory_search_cache_hits =  0;
 80113fa:	68fb      	ldr	r3, [r7, #12]
 80113fc:	2200      	movs	r2, #0
 80113fe:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
#endif
    media_ptr -> fx_media_directory_free_searches =  0;
 8011402:	68fb      	ldr	r3, [r7, #12]
 8011404:	2200      	movs	r2, #0
 8011406:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
    media_ptr -> fx_media_fat_entry_reads =  0;
 801140a:	68fb      	ldr	r3, [r7, #12]
 801140c:	2200      	movs	r2, #0
 801140e:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
    media_ptr -> fx_media_fat_entry_writes =  0;
 8011412:	68fb      	ldr	r3, [r7, #12]
 8011414:	2200      	movs	r2, #0
 8011416:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    media_ptr -> fx_media_fat_entry_cache_read_hits =  0;
 801141a:	68fb      	ldr	r3, [r7, #12]
 801141c:	2200      	movs	r2, #0
 801141e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    media_ptr -> fx_media_fat_entry_cache_read_misses =  0;
 8011422:	68fb      	ldr	r3, [r7, #12]
 8011424:	2200      	movs	r2, #0
 8011426:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    media_ptr -> fx_media_fat_entry_cache_write_hits =  0;
 801142a:	68fb      	ldr	r3, [r7, #12]
 801142c:	2200      	movs	r2, #0
 801142e:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    media_ptr -> fx_media_fat_entry_cache_write_misses =  0;
 8011432:	68fb      	ldr	r3, [r7, #12]
 8011434:	2200      	movs	r2, #0
 8011436:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    media_ptr -> fx_media_fat_cache_flushes =  0;
 801143a:	68fb      	ldr	r3, [r7, #12]
 801143c:	2200      	movs	r2, #0
 801143e:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    media_ptr -> fx_media_fat_sector_reads =  0;
 8011442:	68fb      	ldr	r3, [r7, #12]
 8011444:	2200      	movs	r2, #0
 8011446:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    media_ptr -> fx_media_fat_sector_writes =  0;
 801144a:	68fb      	ldr	r3, [r7, #12]
 801144c:	2200      	movs	r2, #0
 801144e:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    media_ptr -> fx_media_logical_sector_reads =  0;
 8011452:	68fb      	ldr	r3, [r7, #12]
 8011454:	2200      	movs	r2, #0
 8011456:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
    media_ptr -> fx_media_logical_sector_writes =  0;
 801145a:	68fb      	ldr	r3, [r7, #12]
 801145c:	2200      	movs	r2, #0
 801145e:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
    media_ptr -> fx_media_logical_sector_cache_read_hits =  0;
 8011462:	68fb      	ldr	r3, [r7, #12]
 8011464:	2200      	movs	r2, #0
 8011466:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
    media_ptr -> fx_media_logical_sector_cache_read_misses =  0;
 801146a:	68fb      	ldr	r3, [r7, #12]
 801146c:	2200      	movs	r2, #0
 801146e:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
    media_ptr -> fx_media_driver_read_requests =  0;
 8011472:	68fb      	ldr	r3, [r7, #12]
 8011474:	2200      	movs	r2, #0
 8011476:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
    media_ptr -> fx_media_driver_write_requests =  0;
 801147a:	68fb      	ldr	r3, [r7, #12]
 801147c:	2200      	movs	r2, #0
 801147e:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
    media_ptr -> fx_media_driver_boot_read_requests =  0;
 8011482:	68fb      	ldr	r3, [r7, #12]
 8011484:	2200      	movs	r2, #0
 8011486:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
    media_ptr -> fx_media_driver_boot_write_requests =  0;
 801148a:	68fb      	ldr	r3, [r7, #12]
 801148c:	2200      	movs	r2, #0
 801148e:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
    media_ptr -> fx_media_driver_release_sectors_requests =  0;
 8011492:	68fb      	ldr	r3, [r7, #12]
 8011494:	2200      	movs	r2, #0
 8011496:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
    media_ptr -> fx_media_driver_flush_requests =  0;
 801149a:	68fb      	ldr	r3, [r7, #12]
 801149c:	2200      	movs	r2, #0
 801149e:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_MEDIA_OPEN, media_ptr, media_driver, memory_ptr, memory_size, FX_TRACE_MEDIA_EVENTS, 0, 0)

    /* Initialize the supplied media I/O driver.  First, build the
       initialize driver request.  */
    media_ptr -> fx_media_driver_request =              FX_DRIVER_INIT;
 80114a2:	68fb      	ldr	r3, [r7, #12]
 80114a4:	2204      	movs	r2, #4
 80114a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    media_ptr -> fx_media_driver_status =               FX_IO_ERROR;
 80114aa:	68fb      	ldr	r3, [r7, #12]
 80114ac:	2290      	movs	r2, #144	; 0x90
 80114ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    media_ptr -> fx_media_driver_info =                 driver_info_ptr;
 80114b2:	68fb      	ldr	r3, [r7, #12]
 80114b4:	683a      	ldr	r2, [r7, #0]
 80114b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    media_ptr -> fx_media_driver_write_protect =        FX_FALSE;
 80114ba:	68fb      	ldr	r3, [r7, #12]
 80114bc:	2200      	movs	r2, #0
 80114be:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    media_ptr -> fx_media_driver_free_sector_update =   FX_FALSE;
 80114c2:	68fb      	ldr	r3, [r7, #12]
 80114c4:	2200      	movs	r2, #0
 80114c6:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    media_ptr -> fx_media_driver_data_sector_read =     FX_FALSE;
 80114ca:	68fb      	ldr	r3, [r7, #12]
 80114cc:	2200      	movs	r2, #0
 80114ce:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_INIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Call the specified I/O driver with the initialize request.  */
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 80114d2:	68fb      	ldr	r3, [r7, #12]
 80114d4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80114d8:	68f8      	ldr	r0, [r7, #12]
 80114da:	4798      	blx	r3

    /* Determine if the I/O driver initialized successfully.  */
    if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 80114dc:	68fb      	ldr	r3, [r7, #12]
 80114de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80114e2:	2b00      	cmp	r3, #0
 80114e4:	d002      	beq.n	80114ec <_fx_media_open+0x294>
    {

        /* Return the driver error status.  */
        return(FX_IO_ERROR);
 80114e6:	2390      	movs	r3, #144	; 0x90
 80114e8:	f000 bc22 	b.w	8011d30 <_fx_media_open+0xad8>
    }

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of driver boot read requests.  */
    media_ptr -> fx_media_driver_boot_read_requests++;
 80114ec:	68fb      	ldr	r3, [r7, #12]
 80114ee:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 80114f2:	1c5a      	adds	r2, r3, #1
 80114f4:	68fb      	ldr	r3, [r7, #12]
 80114f6:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
#endif

    /* Read the boot sector from the device.  Build the read boot sector
       command.  */
    media_ptr -> fx_media_driver_request =          FX_DRIVER_BOOT_READ;
 80114fa:	68fb      	ldr	r3, [r7, #12]
 80114fc:	2205      	movs	r2, #5
 80114fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8011502:	68fb      	ldr	r3, [r7, #12]
 8011504:	2290      	movs	r2, #144	; 0x90
 8011506:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    media_ptr -> fx_media_driver_buffer =           memory_ptr;
 801150a:	68fb      	ldr	r3, [r7, #12]
 801150c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801150e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    media_ptr -> fx_media_driver_sectors =          1;
 8011512:	68fb      	ldr	r3, [r7, #12]
 8011514:	2201      	movs	r2, #1
 8011516:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    media_ptr -> fx_media_driver_sector_type =      FX_BOOT_SECTOR;
 801151a:	68fb      	ldr	r3, [r7, #12]
 801151c:	2201      	movs	r2, #1
 801151e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_BOOT_READ, media_ptr, memory_ptr, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Invoke the driver to read the boot sector.  */
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 8011522:	68fb      	ldr	r3, [r7, #12]
 8011524:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8011528:	68f8      	ldr	r0, [r7, #12]
 801152a:	4798      	blx	r3

    /* Determine if the boot sector was read correctly. */
    if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 801152c:	68fb      	ldr	r3, [r7, #12]
 801152e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011532:	2b00      	cmp	r3, #0
 8011534:	d016      	beq.n	8011564 <_fx_media_open+0x30c>
    {

        /* Build the "uninitialize" I/O driver request.  */
        media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 8011536:	68fb      	ldr	r3, [r7, #12]
 8011538:	2208      	movs	r2, #8
 801153a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 801153e:	68fb      	ldr	r3, [r7, #12]
 8011540:	2290      	movs	r2, #144	; 0x90
 8011542:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Call the specified I/O driver with the uninitialize request.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 8011546:	68fb      	ldr	r3, [r7, #12]
 8011548:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 801154c:	68f8      	ldr	r0, [r7, #12]
 801154e:	4798      	blx	r3

        /* Return the boot sector error status.  */
        return(FX_BOOT_ERROR);
 8011550:	2301      	movs	r3, #1
 8011552:	e3ed      	b.n	8011d30 <_fx_media_open+0xad8>
 8011554:	200151cc 	.word	0x200151cc
 8011558:	200151d0 	.word	0x200151d0
 801155c:	200151d4 	.word	0x200151d4
 8011560:	2000001c 	.word	0x2000001c
    }

    /* Extract and validate the media parameters from the boot sector.  */
    if (_fx_media_boot_info_extract(media_ptr) != FX_SUCCESS)
 8011564:	68f8      	ldr	r0, [r7, #12]
 8011566:	f7fe fe4d 	bl	8010204 <_fx_media_boot_info_extract>
 801156a:	4603      	mov	r3, r0
 801156c:	2b00      	cmp	r3, #0
 801156e:	d00e      	beq.n	801158e <_fx_media_open+0x336>
    {

        /* Build the "uninitialize" I/O driver request.  */
        media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 8011570:	68fb      	ldr	r3, [r7, #12]
 8011572:	2208      	movs	r2, #8
 8011574:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 8011578:	68fb      	ldr	r3, [r7, #12]
 801157a:	2290      	movs	r2, #144	; 0x90
 801157c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Call the specified I/O driver with the uninitialize request.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 8011580:	68fb      	ldr	r3, [r7, #12]
 8011582:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8011586:	68f8      	ldr	r0, [r7, #12]
 8011588:	4798      	blx	r3

        /* Return the invalid media error status.  */
        return(FX_MEDIA_INVALID);
 801158a:	2302      	movs	r3, #2
 801158c:	e3d0      	b.n	8011d30 <_fx_media_open+0xad8>
    }

    /* Pickup the additional info sector number. This will only be used in FAT32 situations.  */
    additional_info_sector =  _fx_utility_16_unsigned_read(&media_ptr -> fx_media_driver_buffer[48]);
 801158e:	68fb      	ldr	r3, [r7, #12]
 8011590:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011594:	3330      	adds	r3, #48	; 0x30
 8011596:	4618      	mov	r0, r3
 8011598:	f000 fdac 	bl	80120f4 <_fx_utility_16_unsigned_read>
 801159c:	63f8      	str	r0, [r7, #60]	; 0x3c

    /* Is there at least one?  */
    if (memory_size < media_ptr -> fx_media_bytes_per_sector)
 801159e:	68fb      	ldr	r3, [r7, #12]
 80115a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80115a2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80115a4:	429a      	cmp	r2, r3
 80115a6:	d20e      	bcs.n	80115c6 <_fx_media_open+0x36e>
    {

        /* Build the "uninitialize" I/O driver request.  */
        media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 80115a8:	68fb      	ldr	r3, [r7, #12]
 80115aa:	2208      	movs	r2, #8
 80115ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 80115b0:	68fb      	ldr	r3, [r7, #12]
 80115b2:	2290      	movs	r2, #144	; 0x90
 80115b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Call the specified I/O driver with the uninitialize request.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 80115b8:	68fb      	ldr	r3, [r7, #12]
 80115ba:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80115be:	68f8      	ldr	r0, [r7, #12]
 80115c0:	4798      	blx	r3

        /* Error in the buffer size supplied by user.  */
        return(FX_BUFFER_ERROR);
 80115c2:	2321      	movs	r3, #33	; 0x21
 80115c4:	e3b4      	b.n	8011d30 <_fx_media_open+0xad8>
    }

#ifndef FX_DISABLE_CACHE
    /* Determine how many logical sectors can be cached with user's supplied
       buffer area - there must be at least enough for one sector!  */
    media_ptr -> fx_media_sector_cache_size =  memory_size / media_ptr -> fx_media_bytes_per_sector;
 80115c6:	68fb      	ldr	r3, [r7, #12]
 80115c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80115ca:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80115cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80115d0:	68fb      	ldr	r3, [r7, #12]
 80115d2:	615a      	str	r2, [r3, #20]
    /* If trace is enabled, register this object.  */
    FX_TRACE_OBJECT_REGISTER(FX_TRACE_OBJECT_TYPE_MEDIA, media_ptr, media_name, FX_MAX_FAT_CACHE, media_ptr -> fx_media_sector_cache_size)
    
    /* Adjust the internal cache to fit the fixed number of sector cache control blocks
       built into the media control block.  */
    if (media_ptr -> fx_media_sector_cache_size > FX_MAX_SECTOR_CACHE)
 80115d4:	68fb      	ldr	r3, [r7, #12]
 80115d6:	695b      	ldr	r3, [r3, #20]
 80115d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80115dc:	d903      	bls.n	80115e6 <_fx_media_open+0x38e>
    {

        /* Adjust the number of cache sectors downward.  If this is insufficient,
           the FX_MAX_SECTOR_CACHE constant in FX_API.H must be changed and the FileX
           library must be rebuilt.  */
        media_ptr -> fx_media_sector_cache_size =  FX_MAX_SECTOR_CACHE;
 80115de:	68fb      	ldr	r3, [r7, #12]
 80115e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80115e4:	615a      	str	r2, [r3, #20]
    }

    /* Otherwise, everything is okay.  Initialize the data structures for managing the
       logical sector cache.  */
    i =  (UINT)media_ptr -> fx_media_sector_cache_size;
 80115e6:	68fb      	ldr	r3, [r7, #12]
 80115e8:	695b      	ldr	r3, [r3, #20]
 80115ea:	64fb      	str	r3, [r7, #76]	; 0x4c
    cache_entry_ptr =  media_ptr -> fx_media_sector_cache;
 80115ec:	68fb      	ldr	r3, [r7, #12]
 80115ee:	f503 634a 	add.w	r3, r3, #3232	; 0xca0
 80115f2:	647b      	str	r3, [r7, #68]	; 0x44
    while (i--)
 80115f4:	e01c      	b.n	8011630 <_fx_media_open+0x3d8>
    {

        /* Initialize each of the cache entries.  */
        cache_entry_ptr -> fx_cached_sector_memory_buffer =  (UCHAR *)memory_ptr;
 80115f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80115f8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80115fa:	601a      	str	r2, [r3, #0]
        cache_entry_ptr -> fx_cached_sector =                (~(ULONG64)0);
 80115fc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80115fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011602:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011606:	e9c1 2302 	strd	r2, r3, [r1, #8]
        cache_entry_ptr -> fx_cached_sector_buffer_dirty =   FX_FALSE;
 801160a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801160c:	2200      	movs	r2, #0
 801160e:	741a      	strb	r2, [r3, #16]
        cache_entry_ptr -> fx_cached_sector_valid =          FX_FALSE;
 8011610:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011612:	2200      	movs	r2, #0
 8011614:	745a      	strb	r2, [r3, #17]
        cache_entry_ptr -> fx_cached_sector_next_used =      cache_entry_ptr + 1;
 8011616:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011618:	f103 0218 	add.w	r2, r3, #24
 801161c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801161e:	615a      	str	r2, [r3, #20]

        /* Move to the next cache sector entry.  */
        cache_entry_ptr++;
 8011620:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011622:	3318      	adds	r3, #24
 8011624:	647b      	str	r3, [r7, #68]	; 0x44

        /* Update the memory pointer to the next buffer slot.  */
        memory_ptr =  (VOID *)(((UCHAR *)memory_ptr) + media_ptr -> fx_media_bytes_per_sector);
 8011626:	68fb      	ldr	r3, [r7, #12]
 8011628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801162a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801162c:	4413      	add	r3, r2
 801162e:	67bb      	str	r3, [r7, #120]	; 0x78
    while (i--)
 8011630:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011632:	1e5a      	subs	r2, r3, #1
 8011634:	64fa      	str	r2, [r7, #76]	; 0x4c
 8011636:	2b00      	cmp	r3, #0
 8011638:	d1dd      	bne.n	80115f6 <_fx_media_open+0x39e>
    }

    /* Backup to the last cache entry to set its next pointer to NULL.  */
    cache_entry_ptr--;
 801163a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801163c:	3b18      	subs	r3, #24
 801163e:	647b      	str	r3, [r7, #68]	; 0x44
    cache_entry_ptr -> fx_cached_sector_next_used =  FX_NULL;
 8011640:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011642:	2200      	movs	r2, #0
 8011644:	615a      	str	r2, [r3, #20]

    /* Remember the last memory address used by the caching logic.  */
    media_ptr -> fx_media_sector_cache_end =  ((UCHAR *)memory_ptr) - 1;
 8011646:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011648:	1e5a      	subs	r2, r3, #1
 801164a:	68fb      	ldr	r3, [r7, #12]
 801164c:	619a      	str	r2, [r3, #24]

    /* Setup the head pointer of the list.  */
    media_ptr -> fx_media_sector_cache_list_ptr =  media_ptr -> fx_media_sector_cache;
 801164e:	68fb      	ldr	r3, [r7, #12]
 8011650:	f503 624a 	add.w	r2, r3, #3232	; 0xca0
 8011654:	68fb      	ldr	r3, [r7, #12]
 8011656:	61da      	str	r2, [r3, #28]

    /* Setup the bit map that keeps track of the valid hashed cache logical sectors.  */
    media_ptr -> fx_media_sector_cache_hashed_sector_valid =  0;
 8011658:	68fb      	ldr	r3, [r7, #12]
 801165a:	2200      	movs	r2, #0
 801165c:	621a      	str	r2, [r3, #32]

    /* Clear the counter of the number of outstanding dirty sectors.  */
    media_ptr -> fx_media_sector_cache_dirty_count =  0;
 801165e:	68fb      	ldr	r3, [r7, #12]
 8011660:	2200      	movs	r2, #0
 8011662:	625a      	str	r2, [r3, #36]	; 0x24

    /* Determine if the logical sector cache should be managed by the hash function
       instead of the linear search. The cache must be a power of 2 that is between the
       minimum and maximum cache size.  */
    if ((media_ptr -> fx_media_sector_cache_size >= FX_SECTOR_CACHE_HASH_ENABLE) &&
 8011664:	68fb      	ldr	r3, [r7, #12]
 8011666:	695b      	ldr	r3, [r3, #20]
 8011668:	2b0f      	cmp	r3, #15
 801166a:	d91a      	bls.n	80116a2 <_fx_media_open+0x44a>
        ((media_ptr -> fx_media_sector_cache_size ^ (media_ptr -> fx_media_sector_cache_size - 1)) ==
 801166c:	68fb      	ldr	r3, [r7, #12]
 801166e:	695a      	ldr	r2, [r3, #20]
 8011670:	68fb      	ldr	r3, [r7, #12]
 8011672:	695b      	ldr	r3, [r3, #20]
 8011674:	3b01      	subs	r3, #1
 8011676:	405a      	eors	r2, r3
         (media_ptr -> fx_media_sector_cache_size | (media_ptr -> fx_media_sector_cache_size - 1))))
 8011678:	68fb      	ldr	r3, [r7, #12]
 801167a:	6959      	ldr	r1, [r3, #20]
 801167c:	68fb      	ldr	r3, [r7, #12]
 801167e:	695b      	ldr	r3, [r3, #20]
 8011680:	3b01      	subs	r3, #1
 8011682:	430b      	orrs	r3, r1
    if ((media_ptr -> fx_media_sector_cache_size >= FX_SECTOR_CACHE_HASH_ENABLE) &&
 8011684:	429a      	cmp	r2, r3
 8011686:	d10c      	bne.n	80116a2 <_fx_media_open+0x44a>
    {


        /* Set the logical sector cache hash flag. When this flag is set, the logical
           sector cache is accessed with a hash function instead of a linear search.  */
        media_ptr -> fx_media_sector_cache_hashed =  FX_TRUE;
 8011688:	68fb      	ldr	r3, [r7, #12]
 801168a:	2201      	movs	r2, #1
 801168c:	611a      	str	r2, [r3, #16]
        media_ptr -> fx_media_sector_cache_hash_mask =
            ((media_ptr -> fx_media_sector_cache_size / FX_SECTOR_CACHE_DEPTH) - 1);
 801168e:	68fb      	ldr	r3, [r7, #12]
 8011690:	695b      	ldr	r3, [r3, #20]
 8011692:	089b      	lsrs	r3, r3, #2
 8011694:	3b01      	subs	r3, #1
        media_ptr -> fx_media_sector_cache_hash_mask =
 8011696:	68fa      	ldr	r2, [r7, #12]
 8011698:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 801169c:	f8c2 34a0 	str.w	r3, [r2, #1184]	; 0x4a0
 80116a0:	e002      	b.n	80116a8 <_fx_media_open+0x450>
    }
    else
    {

        /* Clear the logical sector cache flag.  */
        media_ptr -> fx_media_sector_cache_hashed =  FX_FALSE;
 80116a2:	68fb      	ldr	r3, [r7, #12]
 80116a4:	2200      	movs	r2, #0
 80116a6:	611a      	str	r2, [r3, #16]
    media_ptr -> fx_media_memory_buffer = memory_ptr;
#endif /* FX_DISABLE_CACHE */

#ifndef FX_DISABLE_FORCE_MEMORY_OPERATION
    /* Initialize the FAT cache entry array.  */
    for (i = 0; i < FX_MAX_FAT_CACHE; i++)
 80116a8:	2300      	movs	r3, #0
 80116aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80116ac:	e023      	b.n	80116f6 <_fx_media_open+0x49e>
    {

        /* Clear entry in the FAT cache.  */
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster =   0;
 80116ae:	68f9      	ldr	r1, [r7, #12]
 80116b0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80116b2:	4613      	mov	r3, r2
 80116b4:	005b      	lsls	r3, r3, #1
 80116b6:	4413      	add	r3, r2
 80116b8:	009b      	lsls	r3, r3, #2
 80116ba:	440b      	add	r3, r1
 80116bc:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 80116c0:	2200      	movs	r2, #0
 80116c2:	601a      	str	r2, [r3, #0]
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value   =   0;
 80116c4:	68f9      	ldr	r1, [r7, #12]
 80116c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80116c8:	4613      	mov	r3, r2
 80116ca:	005b      	lsls	r3, r3, #1
 80116cc:	4413      	add	r3, r2
 80116ce:	009b      	lsls	r3, r3, #2
 80116d0:	440b      	add	r3, r1
 80116d2:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 80116d6:	2200      	movs	r2, #0
 80116d8:	601a      	str	r2, [r3, #0]
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty   =   0;
 80116da:	68f9      	ldr	r1, [r7, #12]
 80116dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80116de:	4613      	mov	r3, r2
 80116e0:	005b      	lsls	r3, r3, #1
 80116e2:	4413      	add	r3, r2
 80116e4:	009b      	lsls	r3, r3, #2
 80116e6:	440b      	add	r3, r1
 80116e8:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 80116ec:	2200      	movs	r2, #0
 80116ee:	601a      	str	r2, [r3, #0]
    for (i = 0; i < FX_MAX_FAT_CACHE; i++)
 80116f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80116f2:	3301      	adds	r3, #1
 80116f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80116f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80116f8:	2b0f      	cmp	r3, #15
 80116fa:	d9d8      	bls.n	80116ae <_fx_media_open+0x456>
    }

    /* Initialize the secondary FAT update map.  */
    for (i = 0; i < FX_FAT_MAP_SIZE; i++)
 80116fc:	2300      	movs	r3, #0
 80116fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011700:	e009      	b.n	8011716 <_fx_media_open+0x4be>
    {

        /* Clear bit map entry for secondary FAT update.  */
        media_ptr -> fx_media_fat_secondary_update_map[i] =  0;
 8011702:	68fa      	ldr	r2, [r7, #12]
 8011704:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011706:	4413      	add	r3, r2
 8011708:	f603 0318 	addw	r3, r3, #2072	; 0x818
 801170c:	2200      	movs	r2, #0
 801170e:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < FX_FAT_MAP_SIZE; i++)
 8011710:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011712:	3301      	adds	r3, #1
 8011714:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011716:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011718:	2b7f      	cmp	r3, #127	; 0x7f
 801171a:	d9f2      	bls.n	8011702 <_fx_media_open+0x4aa>
    if (media_ptr -> fx_media_FAT_type != FX_exFAT)
    {
#endif /* FX_ENABLE_EXFAT */

        /* Root_sector_start has been computed */
        media_ptr -> fx_media_root_sector_start =  media_ptr -> fx_media_reserved_sectors +
 801171c:	68fb      	ldr	r3, [r7, #12]
 801171e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
            (media_ptr -> fx_media_number_of_FATs *
 8011720:	68fb      	ldr	r3, [r7, #12]
 8011722:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
             media_ptr -> fx_media_sectors_per_FAT);
 8011724:	68f9      	ldr	r1, [r7, #12]
 8011726:	6d89      	ldr	r1, [r1, #88]	; 0x58
            (media_ptr -> fx_media_number_of_FATs *
 8011728:	fb01 f303 	mul.w	r3, r1, r3
        media_ptr -> fx_media_root_sector_start =  media_ptr -> fx_media_reserved_sectors +
 801172c:	441a      	add	r2, r3
 801172e:	68fb      	ldr	r3, [r7, #12]
 8011730:	649a      	str	r2, [r3, #72]	; 0x48

        /* Calculate the number of directory sectors.  */
        media_ptr -> fx_media_root_sectors =
            ((media_ptr -> fx_media_root_directory_entries * FX_DIR_ENTRY_SIZE) +
 8011732:	68fb      	ldr	r3, [r7, #12]
 8011734:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011736:	015a      	lsls	r2, r3, #5
             media_ptr -> fx_media_bytes_per_sector - 1) /
 8011738:	68fb      	ldr	r3, [r7, #12]
 801173a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            ((media_ptr -> fx_media_root_directory_entries * FX_DIR_ENTRY_SIZE) +
 801173c:	4413      	add	r3, r2
             media_ptr -> fx_media_bytes_per_sector - 1) /
 801173e:	1e5a      	subs	r2, r3, #1
            media_ptr -> fx_media_bytes_per_sector;
 8011740:	68fb      	ldr	r3, [r7, #12]
 8011742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             media_ptr -> fx_media_bytes_per_sector - 1) /
 8011744:	fbb2 f2f3 	udiv	r2, r2, r3
        media_ptr -> fx_media_root_sectors =
 8011748:	68fb      	ldr	r3, [r7, #12]
 801174a:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Calculate the starting data sector.  */
        media_ptr -> fx_media_data_sector_start =  media_ptr -> fx_media_root_sector_start +
 801174c:	68fb      	ldr	r3, [r7, #12]
 801174e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
            media_ptr -> fx_media_root_sectors;
 8011750:	68fb      	ldr	r3, [r7, #12]
 8011752:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
        media_ptr -> fx_media_data_sector_start =  media_ptr -> fx_media_root_sector_start +
 8011754:	441a      	add	r2, r3
 8011756:	68fb      	ldr	r3, [r7, #12]
 8011758:	651a      	str	r2, [r3, #80]	; 0x50

        /* Calculate the total number of clusters.  */
        media_ptr -> fx_media_total_clusters =  (ULONG)((media_ptr -> fx_media_total_sectors - media_ptr -> fx_media_data_sector_start) /
 801175a:	68fb      	ldr	r3, [r7, #12]
 801175c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8011760:	68f9      	ldr	r1, [r7, #12]
 8011762:	6d09      	ldr	r1, [r1, #80]	; 0x50
 8011764:	2000      	movs	r0, #0
 8011766:	460c      	mov	r4, r1
 8011768:	4605      	mov	r5, r0
 801176a:	ebb2 0804 	subs.w	r8, r2, r4
 801176e:	eb63 0905 	sbc.w	r9, r3, r5
                                                            media_ptr -> fx_media_sectors_per_cluster);
 8011772:	68fb      	ldr	r3, [r7, #12]
 8011774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011776:	2200      	movs	r2, #0
 8011778:	469a      	mov	sl, r3
 801177a:	4693      	mov	fp, r2
        media_ptr -> fx_media_total_clusters =  (ULONG)((media_ptr -> fx_media_total_sectors - media_ptr -> fx_media_data_sector_start) /
 801177c:	4652      	mov	r2, sl
 801177e:	465b      	mov	r3, fp
 8011780:	4640      	mov	r0, r8
 8011782:	4649      	mov	r1, r9
 8011784:	f7ee fe96 	bl	80004b4 <__aeabi_uldivmod>
 8011788:	4602      	mov	r2, r0
 801178a:	460b      	mov	r3, r1
 801178c:	68fb      	ldr	r3, [r7, #12]
 801178e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Determine if a 12-bit FAT is in use.  */
        if (media_ptr -> fx_media_total_clusters < FX_12_BIT_FAT_SIZE)
 8011790:	68fb      	ldr	r3, [r7, #12]
 8011792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011794:	f640 72f5 	movw	r2, #4085	; 0xff5
 8011798:	4293      	cmp	r3, r2
 801179a:	d819      	bhi.n	80117d0 <_fx_media_open+0x578>
        {

            /* Yes, 12-bit FAT is present.  Set flag accordingly.  */
            media_ptr -> fx_media_12_bit_FAT = FX_TRUE;
 801179c:	68fb      	ldr	r3, [r7, #12]
 801179e:	2201      	movs	r2, #1
 80117a0:	661a      	str	r2, [r3, #96]	; 0x60
            media_ptr -> fx_media_32_bit_FAT = FX_FALSE;
 80117a2:	68fb      	ldr	r3, [r7, #12]
 80117a4:	2200      	movs	r2, #0
 80117a6:	665a      	str	r2, [r3, #100]	; 0x64
#ifdef FX_ENABLE_EXFAT
            media_ptr -> fx_media_FAT_type = FX_FAT12;
#endif /* FX_ENABLE_EXFAT */

            /* No additional information sector in FAT12.  */
            media_ptr -> fx_media_FAT32_additional_info_sector =  0;
 80117a8:	68fb      	ldr	r3, [r7, #12]
 80117aa:	2200      	movs	r2, #0
 80117ac:	669a      	str	r2, [r3, #104]	; 0x68

            /* Set FAT last and FAT reserved. */
            media_ptr -> fx_media_fat_reserved = FX_RESERVED_1;
 80117ae:	68fb      	ldr	r3, [r7, #12]
 80117b0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80117b4:	461a      	mov	r2, r3
 80117b6:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 80117ba:	f8c2 34a8 	str.w	r3, [r2, #1192]	; 0x4a8
            media_ptr -> fx_media_fat_last = FX_LAST_CLUSTER_2;
 80117be:	68fb      	ldr	r3, [r7, #12]
 80117c0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80117c4:	461a      	mov	r2, r3
 80117c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80117ca:	f8c2 34ac 	str.w	r3, [r2, #1196]	; 0x4ac
 80117ce:	e037      	b.n	8011840 <_fx_media_open+0x5e8>
        }
        else if (media_ptr -> fx_media_total_clusters < FX_16_BIT_FAT_SIZE)
 80117d0:	68fb      	ldr	r3, [r7, #12]
 80117d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80117d4:	f64f 72f4 	movw	r2, #65524	; 0xfff4
 80117d8:	4293      	cmp	r3, r2
 80117da:	d819      	bhi.n	8011810 <_fx_media_open+0x5b8>
        {

            /* A 16-bit FAT is present.  Set flag accordingly.  */
            media_ptr -> fx_media_12_bit_FAT =  FX_FALSE;
 80117dc:	68fb      	ldr	r3, [r7, #12]
 80117de:	2200      	movs	r2, #0
 80117e0:	661a      	str	r2, [r3, #96]	; 0x60
            media_ptr -> fx_media_32_bit_FAT =  FX_FALSE;
 80117e2:	68fb      	ldr	r3, [r7, #12]
 80117e4:	2200      	movs	r2, #0
 80117e6:	665a      	str	r2, [r3, #100]	; 0x64
#ifdef FX_ENABLE_EXFAT
            media_ptr -> fx_media_FAT_type = FX_FAT16;
#endif /* FX_ENABLE_EXFAT */

            /* No additional information sector in FAT16.  */
            media_ptr -> fx_media_FAT32_additional_info_sector =  0;
 80117e8:	68fb      	ldr	r3, [r7, #12]
 80117ea:	2200      	movs	r2, #0
 80117ec:	669a      	str	r2, [r3, #104]	; 0x68

            /* Set FAT last and FAT reserved. */
            media_ptr -> fx_media_fat_reserved = FX_RESERVED_1;
 80117ee:	68fb      	ldr	r3, [r7, #12]
 80117f0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80117f4:	461a      	mov	r2, r3
 80117f6:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 80117fa:	f8c2 34a8 	str.w	r3, [r2, #1192]	; 0x4a8
            media_ptr -> fx_media_fat_last = FX_LAST_CLUSTER_2;
 80117fe:	68fb      	ldr	r3, [r7, #12]
 8011800:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8011804:	461a      	mov	r2, r3
 8011806:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801180a:	f8c2 34ac 	str.w	r3, [r2, #1196]	; 0x4ac
 801180e:	e017      	b.n	8011840 <_fx_media_open+0x5e8>
        }
        else
        {

            /* Yes, a 32-bit FAT is present.  */
            media_ptr -> fx_media_12_bit_FAT =  FX_FALSE;
 8011810:	68fb      	ldr	r3, [r7, #12]
 8011812:	2200      	movs	r2, #0
 8011814:	661a      	str	r2, [r3, #96]	; 0x60
            media_ptr -> fx_media_32_bit_FAT =  FX_TRUE;
 8011816:	68fb      	ldr	r3, [r7, #12]
 8011818:	2201      	movs	r2, #1
 801181a:	665a      	str	r2, [r3, #100]	; 0x64
            media_ptr -> fx_media_FAT_type = FX_FAT32;
#endif /* FX_ENABLE_EXFAT */

            /* Save the additional information sector FAT32. This was read from the boot
               sector earlier in this routine. */
            media_ptr -> fx_media_FAT32_additional_info_sector =  additional_info_sector;
 801181c:	68fb      	ldr	r3, [r7, #12]
 801181e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011820:	669a      	str	r2, [r3, #104]	; 0x68

            /* Set FAT last and FAT reserved. */
            media_ptr -> fx_media_fat_reserved = FX_RESERVED_1_32;
 8011822:	68fb      	ldr	r3, [r7, #12]
 8011824:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8011828:	461a      	mov	r2, r3
 801182a:	4b95      	ldr	r3, [pc, #596]	; (8011a80 <_fx_media_open+0x828>)
 801182c:	f8c2 34a8 	str.w	r3, [r2, #1192]	; 0x4a8
            media_ptr -> fx_media_fat_last = FX_LAST_CLUSTER_2_32;
 8011830:	68fb      	ldr	r3, [r7, #12]
 8011832:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8011836:	461a      	mov	r2, r3
 8011838:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 801183c:	f8c2 34ac 	str.w	r3, [r2, #1196]	; 0x4ac
       it is variable in FAT32.  */
#ifdef FX_ENABLE_EXFAT
    if (media_ptr -> fx_media_32_bit_FAT == FX_TRUE || 
        (media_ptr -> fx_media_FAT_type == FX_exFAT))
#else
    if (media_ptr -> fx_media_32_bit_FAT == FX_TRUE)
 8011840:	68fb      	ldr	r3, [r7, #12]
 8011842:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011844:	2b01      	cmp	r3, #1
 8011846:	d15f      	bne.n	8011908 <_fx_media_open+0x6b0>
        if (media_ptr -> fx_media_32_bit_FAT == FX_TRUE)
        {
#endif /* FX_ENABLE_EXFAT */

            /* Root First cluster starts from at least cluster 2, or higher. */
            if (media_ptr -> fx_media_root_cluster_32 < FX_FAT_ENTRY_START)
 8011848:	68fb      	ldr	r3, [r7, #12]
 801184a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801184c:	2b01      	cmp	r3, #1
 801184e:	d801      	bhi.n	8011854 <_fx_media_open+0x5fc>
            {
                return(FX_MEDIA_INVALID);
 8011850:	2302      	movs	r3, #2
 8011852:	e26d      	b.n	8011d30 <_fx_media_open+0xad8>
            }

            /* Calculate logical number of root dir sector.  */
            media_ptr -> fx_media_root_sector_start = media_ptr -> fx_media_data_sector_start +
 8011854:	68fb      	ldr	r3, [r7, #12]
 8011856:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                (media_ptr -> fx_media_root_cluster_32 - FX_FAT_ENTRY_START) *
 8011858:	68fb      	ldr	r3, [r7, #12]
 801185a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801185c:	3b02      	subs	r3, #2
                media_ptr -> fx_media_sectors_per_cluster;
 801185e:	68f9      	ldr	r1, [r7, #12]
 8011860:	6d49      	ldr	r1, [r1, #84]	; 0x54
                (media_ptr -> fx_media_root_cluster_32 - FX_FAT_ENTRY_START) *
 8011862:	fb01 f303 	mul.w	r3, r1, r3
            media_ptr -> fx_media_root_sector_start = media_ptr -> fx_media_data_sector_start +
 8011866:	441a      	add	r2, r3
 8011868:	68fb      	ldr	r3, [r7, #12]
 801186a:	649a      	str	r2, [r3, #72]	; 0x48
#ifdef FX_ENABLE_EXFAT
        }
#endif /* FX_ENABLE_EXFAT */

        /* Calculate maximum possible value for fx_media_root_directory_entries */
        i = 0;
 801186c:	2300      	movs	r3, #0
 801186e:	64fb      	str	r3, [r7, #76]	; 0x4c
        for (cluster_number = media_ptr -> fx_media_root_cluster_32;;)
 8011870:	68fb      	ldr	r3, [r7, #12]
 8011872:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011874:	657b      	str	r3, [r7, #84]	; 0x54
        {

            status =  _fx_utility_FAT_entry_read(media_ptr, cluster_number, &FAT_entry);
 8011876:	f107 0310 	add.w	r3, r7, #16
 801187a:	461a      	mov	r2, r3
 801187c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801187e:	68f8      	ldr	r0, [r7, #12]
 8011880:	f000 fc9e 	bl	80121c0 <_fx_utility_FAT_entry_read>
 8011884:	63b8      	str	r0, [r7, #56]	; 0x38
            i++;
 8011886:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011888:	3301      	adds	r3, #1
 801188a:	64fb      	str	r3, [r7, #76]	; 0x4c
            /* Determine if the read was successful.  */
            if (status != FX_SUCCESS)
 801188c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801188e:	2b00      	cmp	r3, #0
 8011890:	d00e      	beq.n	80118b0 <_fx_media_open+0x658>
            {

                /* Build the "uninitialize" I/O driver request.  */
                media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 8011892:	68fb      	ldr	r3, [r7, #12]
 8011894:	2208      	movs	r2, #8
 8011896:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 801189a:	68fb      	ldr	r3, [r7, #12]
 801189c:	2290      	movs	r2, #144	; 0x90
 801189e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

                /* If trace is enabled, insert this event into the trace buffer.  */
                FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                /* Call the specified I/O driver with the uninitialize request.  */
                (media_ptr -> fx_media_driver_entry) (media_ptr);
 80118a2:	68fb      	ldr	r3, [r7, #12]
 80118a4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80118a8:	68f8      	ldr	r0, [r7, #12]
 80118aa:	4798      	blx	r3

                return(FX_FAT_READ_ERROR);
 80118ac:	2303      	movs	r3, #3
 80118ae:	e23f      	b.n	8011d30 <_fx_media_open+0xad8>
            }

            if ((cluster_number == FAT_entry) || (i > media_ptr -> fx_media_total_clusters))
 80118b0:	693b      	ldr	r3, [r7, #16]
 80118b2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80118b4:	429a      	cmp	r2, r3
 80118b6:	d004      	beq.n	80118c2 <_fx_media_open+0x66a>
 80118b8:	68fb      	ldr	r3, [r7, #12]
 80118ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80118bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80118be:	429a      	cmp	r2, r3
 80118c0:	d90e      	bls.n	80118e0 <_fx_media_open+0x688>
            {

                /* Build the "uninitialize" I/O driver request.  */
                media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 80118c2:	68fb      	ldr	r3, [r7, #12]
 80118c4:	2208      	movs	r2, #8
 80118c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 80118ca:	68fb      	ldr	r3, [r7, #12]
 80118cc:	2290      	movs	r2, #144	; 0x90
 80118ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

                /* If trace is enabled, insert this event into the trace buffer.  */
                FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                /* Call the specified I/O driver with the uninitialize request.  */
                (media_ptr -> fx_media_driver_entry) (media_ptr);
 80118d2:	68fb      	ldr	r3, [r7, #12]
 80118d4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80118d8:	68f8      	ldr	r0, [r7, #12]
 80118da:	4798      	blx	r3

                return(FX_FAT_READ_ERROR);
 80118dc:	2303      	movs	r3, #3
 80118de:	e227      	b.n	8011d30 <_fx_media_open+0xad8>
            }
            if (FAT_entry >= FX_RESERVED_1_32)
 80118e0:	693b      	ldr	r3, [r7, #16]
 80118e2:	4a68      	ldr	r2, [pc, #416]	; (8011a84 <_fx_media_open+0x82c>)
 80118e4:	4293      	cmp	r3, r2
 80118e6:	d802      	bhi.n	80118ee <_fx_media_open+0x696>
            {
                break;
            }
            cluster_number = FAT_entry;
 80118e8:	693b      	ldr	r3, [r7, #16]
 80118ea:	657b      	str	r3, [r7, #84]	; 0x54
            status =  _fx_utility_FAT_entry_read(media_ptr, cluster_number, &FAT_entry);
 80118ec:	e7c3      	b.n	8011876 <_fx_media_open+0x61e>
                break;
 80118ee:	bf00      	nop
        }

        /* Calculate the number of directory entries.  */
        media_ptr -> fx_media_root_directory_entries =  (i * media_ptr -> fx_media_sectors_per_cluster *
 80118f0:	68fb      	ldr	r3, [r7, #12]
 80118f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80118f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80118f6:	fb02 f303 	mul.w	r3, r2, r3
                                                         media_ptr -> fx_media_bytes_per_sector) / FX_DIR_ENTRY_SIZE;
 80118fa:	68fa      	ldr	r2, [r7, #12]
 80118fc:	6a92      	ldr	r2, [r2, #40]	; 0x28
        media_ptr -> fx_media_root_directory_entries =  (i * media_ptr -> fx_media_sectors_per_cluster *
 80118fe:	fb02 f303 	mul.w	r3, r2, r3
                                                         media_ptr -> fx_media_bytes_per_sector) / FX_DIR_ENTRY_SIZE;
 8011902:	095a      	lsrs	r2, r3, #5
        media_ptr -> fx_media_root_directory_entries =  (i * media_ptr -> fx_media_sectors_per_cluster *
 8011904:	68fb      	ldr	r3, [r7, #12]
 8011906:	679a      	str	r2, [r3, #120]	; 0x78
    }

#ifndef FX_DISABLE_FORCE_MEMORY_OPERATION
    /* Calculate the number of available clusters.  */
    media_ptr -> fx_media_available_clusters =  0;
 8011908:	68fb      	ldr	r3, [r7, #12]
 801190a:	2200      	movs	r2, #0
 801190c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the cluster search start to an invalid value.  */
    media_ptr -> fx_media_cluster_search_start =  0;
 801190e:	68fb      	ldr	r3, [r7, #12]
 8011910:	2200      	movs	r2, #0
 8011912:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* FX_DISABLE_FORCE_MEMORY_OPERATION */

    /* Determine if there is 32-bit FAT additional information sector. */
    if (media_ptr -> fx_media_FAT32_additional_info_sector)
 8011916:	68fb      	ldr	r3, [r7, #12]
 8011918:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801191a:	2b00      	cmp	r3, #0
 801191c:	f000 808e 	beq.w	8011a3c <_fx_media_open+0x7e4>
        /* Yes, read the FAT32 additional information sector to get the available cluster count and
           the hint for the first available cluster.  */

#ifndef FX_DISABLE_CACHE
        /* Setup a pointer to the first cached entry's buffer.  */
        buffer_ptr =  (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector_memory_buffer;
 8011920:	68fb      	ldr	r3, [r7, #12]
 8011922:	69db      	ldr	r3, [r3, #28]
 8011924:	681b      	ldr	r3, [r3, #0]
 8011926:	637b      	str	r3, [r7, #52]	; 0x34

        /* Invalidate this cache entry.  */
        (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector =  (~((ULONG64) 0));
 8011928:	68fb      	ldr	r3, [r7, #12]
 801192a:	69d9      	ldr	r1, [r3, #28]
 801192c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011930:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011934:	e9c1 2302 	strd	r2, r3, [r1, #8]
        (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector_valid =  FX_FALSE;
 8011938:	68fb      	ldr	r3, [r7, #12]
 801193a:	69db      	ldr	r3, [r3, #28]
 801193c:	2200      	movs	r2, #0
 801193e:	745a      	strb	r2, [r3, #17]
        buffer_ptr =  media_ptr -> fx_media_memory_buffer;
        media_ptr -> fx_media_memory_buffer_sector = (ULONG64)-1;
#endif /* FX_DISABLE_CACHE */

        /* Read the FAT32 additional information sector from the device.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_READ;
 8011940:	68fb      	ldr	r3, [r7, #12]
 8011942:	2200      	movs	r2, #0
 8011944:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8011948:	68fb      	ldr	r3, [r7, #12]
 801194a:	2290      	movs	r2, #144	; 0x90
 801194c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 8011950:	68fb      	ldr	r3, [r7, #12]
 8011952:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011954:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        media_ptr -> fx_media_driver_logical_sector =   media_ptr -> fx_media_FAT32_additional_info_sector;
 8011958:	68fb      	ldr	r3, [r7, #12]
 801195a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 801195c:	68fb      	ldr	r3, [r7, #12]
 801195e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        media_ptr -> fx_media_driver_sectors =          1;
 8011962:	68fb      	ldr	r3, [r7, #12]
 8011964:	2201      	movs	r2, #1
 8011966:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        media_ptr -> fx_media_driver_sector_type =      FX_DIRECTORY_SECTOR;
 801196a:	68fb      	ldr	r3, [r7, #12]
 801196c:	2203      	movs	r2, #3
 801196e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver read sector(s) requests.  */
        media_ptr -> fx_media_driver_read_requests++;
 8011972:	68fb      	ldr	r3, [r7, #12]
 8011974:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8011978:	1c5a      	adds	r2, r3, #1
 801197a:	68fb      	ldr	r3, [r7, #12]
 801197c:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_READ, media_ptr, media_ptr -> fx_media_FAT32_additional_info_sector, 1, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Invoke the driver to read the FAT32 additional information sector.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 8011980:	68fb      	ldr	r3, [r7, #12]
 8011982:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8011986:	68f8      	ldr	r0, [r7, #12]
 8011988:	4798      	blx	r3

        /* Determine if the FAT32 sector was read correctly. */
        if (media_ptr -> fx_media_driver_status == FX_SUCCESS)
 801198a:	68fb      	ldr	r3, [r7, #12]
 801198c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011990:	2b00      	cmp	r3, #0
 8011992:	d150      	bne.n	8011a36 <_fx_media_open+0x7de>
        {

            /* Yes, setup a pointer into the FAT32 additional information sector.  */
            buffer_ptr =  media_ptr -> fx_media_driver_buffer;
 8011994:	68fb      	ldr	r3, [r7, #12]
 8011996:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801199a:	637b      	str	r3, [r7, #52]	; 0x34

            /* Pickup the first signature long word.  */
            signature =  _fx_utility_32_unsigned_read(&buffer_ptr[0]);
 801199c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801199e:	f000 fbd1 	bl	8012144 <_fx_utility_32_unsigned_read>
 80119a2:	6338      	str	r0, [r7, #48]	; 0x30

            /* Determine if the signature is correct.  */
            if (signature == 0x41615252)
 80119a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119a6:	4a38      	ldr	r2, [pc, #224]	; (8011a88 <_fx_media_open+0x830>)
 80119a8:	4293      	cmp	r3, r2
 80119aa:	d140      	bne.n	8011a2e <_fx_media_open+0x7d6>
            {

                /* Yes, the first signature is correct, now pickup the next signature.  */
                signature =  _fx_utility_32_unsigned_read(&buffer_ptr[484]);
 80119ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80119ae:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80119b2:	4618      	mov	r0, r3
 80119b4:	f000 fbc6 	bl	8012144 <_fx_utility_32_unsigned_read>
 80119b8:	6338      	str	r0, [r7, #48]	; 0x30

                /* Determine if this signature is correct.  */
                if (signature == 0x61417272)
 80119ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119bc:	4a33      	ldr	r2, [pc, #204]	; (8011a8c <_fx_media_open+0x834>)
 80119be:	4293      	cmp	r3, r2
 80119c0:	d131      	bne.n	8011a26 <_fx_media_open+0x7ce>
                {

                    /* Yes, we have a good FAT32 additional information sector.  */

                    /* Pickup the current available cluster count on the media.  */
                    media_ptr -> fx_media_available_clusters =  _fx_utility_32_unsigned_read(&buffer_ptr[488]);
 80119c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80119c4:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80119c8:	4618      	mov	r0, r3
 80119ca:	f000 fbbb 	bl	8012144 <_fx_utility_32_unsigned_read>
 80119ce:	4602      	mov	r2, r0
 80119d0:	68fb      	ldr	r3, [r7, #12]
 80119d2:	67da      	str	r2, [r3, #124]	; 0x7c

                    /* Initialize the last reported available cluster count to the same value.  */
                    media_ptr -> fx_media_FAT32_additional_info_last_available =  media_ptr -> fx_media_available_clusters;
 80119d4:	68fb      	ldr	r3, [r7, #12]
 80119d6:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80119d8:	68fb      	ldr	r3, [r7, #12]
 80119da:	66da      	str	r2, [r3, #108]	; 0x6c

                    /* Pickup the hint for the starting free cluster search.  */
                    media_ptr -> fx_media_cluster_search_start =  _fx_utility_32_unsigned_read(&buffer_ptr[492]);
 80119dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80119de:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80119e2:	4618      	mov	r0, r3
 80119e4:	f000 fbae 	bl	8012144 <_fx_utility_32_unsigned_read>
 80119e8:	4602      	mov	r2, r0
 80119ea:	68fb      	ldr	r3, [r7, #12]
 80119ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

                    /* Perform a quick sanity check on the available cluster count and the starting free
                       cluster search.  */
                    if ((media_ptr -> fx_media_available_clusters > media_ptr -> fx_media_total_clusters) ||
 80119f0:	68fb      	ldr	r3, [r7, #12]
 80119f2:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80119f4:	68fb      	ldr	r3, [r7, #12]
 80119f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80119f8:	429a      	cmp	r2, r3
 80119fa:	d80c      	bhi.n	8011a16 <_fx_media_open+0x7be>
                        (media_ptr -> fx_media_cluster_search_start > media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START) ||
 80119fc:	68fb      	ldr	r3, [r7, #12]
 80119fe:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8011a02:	68fb      	ldr	r3, [r7, #12]
 8011a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011a06:	3302      	adds	r3, #2
                    if ((media_ptr -> fx_media_available_clusters > media_ptr -> fx_media_total_clusters) ||
 8011a08:	429a      	cmp	r2, r3
 8011a0a:	d804      	bhi.n	8011a16 <_fx_media_open+0x7be>
                        (media_ptr -> fx_media_cluster_search_start < FX_FAT_ENTRY_START))
 8011a0c:	68fb      	ldr	r3, [r7, #12]
 8011a0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
                        (media_ptr -> fx_media_cluster_search_start > media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START) ||
 8011a12:	2b01      	cmp	r3, #1
 8011a14:	d812      	bhi.n	8011a3c <_fx_media_open+0x7e4>
                    {

                        /* Something is wrong, clear the available cluster count and search so the regular processing
                           is used.  */
                        media_ptr -> fx_media_available_clusters =    0;
 8011a16:	68fb      	ldr	r3, [r7, #12]
 8011a18:	2200      	movs	r2, #0
 8011a1a:	67da      	str	r2, [r3, #124]	; 0x7c
                        media_ptr -> fx_media_cluster_search_start =  0;
 8011a1c:	68fb      	ldr	r3, [r7, #12]
 8011a1e:	2200      	movs	r2, #0
 8011a20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8011a24:	e00a      	b.n	8011a3c <_fx_media_open+0x7e4>
                }
                else
                {

                    /* Signature is bad, invalidate the additional info sector.  */
                    media_ptr -> fx_media_FAT32_additional_info_sector =  0;
 8011a26:	68fb      	ldr	r3, [r7, #12]
 8011a28:	2200      	movs	r2, #0
 8011a2a:	669a      	str	r2, [r3, #104]	; 0x68
 8011a2c:	e006      	b.n	8011a3c <_fx_media_open+0x7e4>
            }
            else
            {

                /* Signature is bad, invalidate the additional info sector.  */
                media_ptr -> fx_media_FAT32_additional_info_sector =  0;
 8011a2e:	68fb      	ldr	r3, [r7, #12]
 8011a30:	2200      	movs	r2, #0
 8011a32:	669a      	str	r2, [r3, #104]	; 0x68
 8011a34:	e002      	b.n	8011a3c <_fx_media_open+0x7e4>
        }
        else
        {

            /* IO error trying to read additional information sector, invalidate the additional info sector.  */
            media_ptr -> fx_media_FAT32_additional_info_sector =  0;
 8011a36:	68fb      	ldr	r3, [r7, #12]
 8011a38:	2200      	movs	r2, #0
 8011a3a:	669a      	str	r2, [r3, #104]	; 0x68

    /* Search the media to find the first available cluster as well as the total
       available clusters.  */

    /* Determine what type of FAT is present.  */
    if (media_ptr -> fx_media_12_bit_FAT)
 8011a3c:	68fb      	ldr	r3, [r7, #12]
 8011a3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011a40:	2b00      	cmp	r3, #0
 8011a42:	d040      	beq.n	8011ac6 <_fx_media_open+0x86e>

        /* A 12-bit FAT is present.  Utilize the FAT entry read utility to pickup
           each FAT entry's contents.  */

        /* Loop to read each cluster entry in the first FAT.  */
        for (cluster_number =  FX_FAT_ENTRY_START;
 8011a44:	2302      	movs	r3, #2
 8011a46:	657b      	str	r3, [r7, #84]	; 0x54
 8011a48:	e036      	b.n	8011ab8 <_fx_media_open+0x860>
             cluster_number < (media_ptr -> fx_media_total_clusters) + FX_FAT_ENTRY_START;
             cluster_number++)
        {

            /* Read a FAT entry.  */
            status =  _fx_utility_FAT_entry_read(media_ptr, cluster_number, &FAT_entry);
 8011a4a:	f107 0310 	add.w	r3, r7, #16
 8011a4e:	461a      	mov	r2, r3
 8011a50:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011a52:	68f8      	ldr	r0, [r7, #12]
 8011a54:	f000 fbb4 	bl	80121c0 <_fx_utility_FAT_entry_read>
 8011a58:	63b8      	str	r0, [r7, #56]	; 0x38

            /* Determine if the read was successful.  */
            if (status != FX_SUCCESS)
 8011a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a5c:	2b00      	cmp	r3, #0
 8011a5e:	d017      	beq.n	8011a90 <_fx_media_open+0x838>
            {

                /* Build the "uninitialize" I/O driver request.  */
                media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 8011a60:	68fb      	ldr	r3, [r7, #12]
 8011a62:	2208      	movs	r2, #8
 8011a64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 8011a68:	68fb      	ldr	r3, [r7, #12]
 8011a6a:	2290      	movs	r2, #144	; 0x90
 8011a6c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

                /* If trace is enabled, insert this event into the trace buffer.  */
                FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                /* Call the specified I/O driver with the uninitialize request.  */
                (media_ptr -> fx_media_driver_entry) (media_ptr);
 8011a70:	68fb      	ldr	r3, [r7, #12]
 8011a72:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8011a76:	68f8      	ldr	r0, [r7, #12]
 8011a78:	4798      	blx	r3

                return(FX_FAT_READ_ERROR);
 8011a7a:	2303      	movs	r3, #3
 8011a7c:	e158      	b.n	8011d30 <_fx_media_open+0xad8>
 8011a7e:	bf00      	nop
 8011a80:	0ffffff0 	.word	0x0ffffff0
 8011a84:	0fffffef 	.word	0x0fffffef
 8011a88:	41615252 	.word	0x41615252
 8011a8c:	61417272 	.word	0x61417272
            }

            /* Now determine if the FAT entry is available.  */
            if (FAT_entry == FX_FREE_CLUSTER)
 8011a90:	693b      	ldr	r3, [r7, #16]
 8011a92:	2b00      	cmp	r3, #0
 8011a94:	d10d      	bne.n	8011ab2 <_fx_media_open+0x85a>
            {

                /* Increment the number of available clusters.  */
                media_ptr -> fx_media_available_clusters++;
 8011a96:	68fb      	ldr	r3, [r7, #12]
 8011a98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011a9a:	1c5a      	adds	r2, r3, #1
 8011a9c:	68fb      	ldr	r3, [r7, #12]
 8011a9e:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Determine if the starting free cluster has been found yet.  */
                if (media_ptr -> fx_media_cluster_search_start == 0)
 8011aa0:	68fb      	ldr	r3, [r7, #12]
 8011aa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	d103      	bne.n	8011ab2 <_fx_media_open+0x85a>
                {

                    /* Remember the first free cluster to start further searches from.  */
                    media_ptr -> fx_media_cluster_search_start =  cluster_number;
 8011aaa:	68fb      	ldr	r3, [r7, #12]
 8011aac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011aae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
             cluster_number++)
 8011ab2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011ab4:	3301      	adds	r3, #1
 8011ab6:	657b      	str	r3, [r7, #84]	; 0x54
             cluster_number < (media_ptr -> fx_media_total_clusters) + FX_FAT_ENTRY_START;
 8011ab8:	68fb      	ldr	r3, [r7, #12]
 8011aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011abc:	3302      	adds	r3, #2
 8011abe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011ac0:	429a      	cmp	r2, r3
 8011ac2:	d3c2      	bcc.n	8011a4a <_fx_media_open+0x7f2>
 8011ac4:	e0b4      	b.n	8011c30 <_fx_media_open+0x9d8>
    }
#ifdef FX_ENABLE_EXFAT
    else if ((media_ptr -> fx_media_available_clusters == 0)
             && (media_ptr -> fx_media_FAT_type != FX_exFAT))
#else
    else if (media_ptr -> fx_media_available_clusters == 0)
 8011ac6:	68fb      	ldr	r3, [r7, #12]
 8011ac8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	f040 80b0 	bne.w	8011c30 <_fx_media_open+0x9d8>
        /* A 16 or 32-bit FAT is present. Read directly into the logical sector
           cache memory to optimize I/O on larger devices. Since we are looking for
           values of zero, endian issues are not important.  */

        /* Invalidate the current logical sector cache.  */
        _fx_utility_logical_sector_flush(media_ptr, ((ULONG64) 1), (ULONG64) (media_ptr -> fx_media_total_sectors), FX_TRUE);
 8011ad0:	68fb      	ldr	r3, [r7, #12]
 8011ad2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8011ad6:	2101      	movs	r1, #1
 8011ad8:	9102      	str	r1, [sp, #8]
 8011ada:	e9cd 2300 	strd	r2, r3, [sp]
 8011ade:	f04f 0201 	mov.w	r2, #1
 8011ae2:	f04f 0300 	mov.w	r3, #0
 8011ae6:	68f8      	ldr	r0, [r7, #12]
 8011ae8:	f001 fd62 	bl	80135b0 <_fx_utility_logical_sector_flush>

        /* Reset the memory pointer.  */
        media_ptr -> fx_media_memory_buffer =  original_memory_ptr;
 8011aec:	68fb      	ldr	r3, [r7, #12]
 8011aee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011af0:	609a      	str	r2, [r3, #8]

        /* Loop through all FAT sectors in the primary FAT.  The first two entries are
           examined in this loop, but they are always unavailable.  */
        cluster_number =  0;
 8011af2:	2300      	movs	r3, #0
 8011af4:	657b      	str	r3, [r7, #84]	; 0x54
#ifndef FX_DISABLE_CACHE
        for (i = 0; i < media_ptr -> fx_media_sectors_per_FAT; i = i + media_ptr -> fx_media_sector_cache_size)
 8011af6:	2300      	movs	r3, #0
 8011af8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011afa:	e093      	b.n	8011c24 <_fx_media_open+0x9cc>
        {

            /* Calculate the starting next FAT sector.  */
            FAT_sector =  media_ptr -> fx_media_reserved_sectors + i;
 8011afc:	68fb      	ldr	r3, [r7, #12]
 8011afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011b00:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011b02:	4413      	add	r3, r2
 8011b04:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Calculate how many sectors to read.  */
            FAT_read_sectors =  media_ptr -> fx_media_sectors_per_FAT - i;
 8011b06:	68fb      	ldr	r3, [r7, #12]
 8011b08:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011b0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b0c:	1ad3      	subs	r3, r2, r3
 8011b0e:	653b      	str	r3, [r7, #80]	; 0x50

            /* Determine if there is not enough memory to read the remaining FAT sectors.  */
            if (FAT_read_sectors > media_ptr -> fx_media_sector_cache_size)
 8011b10:	68fb      	ldr	r3, [r7, #12]
 8011b12:	695b      	ldr	r3, [r3, #20]
 8011b14:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011b16:	429a      	cmp	r2, r3
 8011b18:	d902      	bls.n	8011b20 <_fx_media_open+0x8c8>
            {
                FAT_read_sectors =  media_ptr -> fx_media_sector_cache_size;
 8011b1a:	68fb      	ldr	r3, [r7, #12]
 8011b1c:	695b      	ldr	r3, [r3, #20]
 8011b1e:	653b      	str	r3, [r7, #80]	; 0x50
            /* Calculate how many sectors to read.  */
            FAT_read_sectors =  1;
#endif /* FX_DISABLE_CACHE */

            /* Read the FAT sectors directly from the driver.  */
            media_ptr -> fx_media_driver_request =          FX_DRIVER_READ;
 8011b20:	68fb      	ldr	r3, [r7, #12]
 8011b22:	2200      	movs	r2, #0
 8011b24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
            media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8011b28:	68fb      	ldr	r3, [r7, #12]
 8011b2a:	2290      	movs	r2, #144	; 0x90
 8011b2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
            media_ptr -> fx_media_driver_buffer =           media_ptr -> fx_media_memory_buffer;
 8011b30:	68fb      	ldr	r3, [r7, #12]
 8011b32:	689a      	ldr	r2, [r3, #8]
 8011b34:	68fb      	ldr	r3, [r7, #12]
 8011b36:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
            media_ptr -> fx_media_driver_logical_sector =   FAT_sector;
 8011b3a:	68fb      	ldr	r3, [r7, #12]
 8011b3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011b3e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            media_ptr -> fx_media_driver_sectors =          FAT_read_sectors;
 8011b42:	68fb      	ldr	r3, [r7, #12]
 8011b44:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011b46:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
            media_ptr -> fx_media_driver_sector_type =      FX_FAT_SECTOR;
 8011b4a:	68fb      	ldr	r3, [r7, #12]
 8011b4c:	2202      	movs	r2, #2
 8011b4e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

            /* If trace is enabled, insert this event into the trace buffer.  */
            FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_READ, media_ptr, FAT_sector, FAT_read_sectors, media_ptr -> fx_media_memory_buffer, FX_TRACE_INTERNAL_EVENTS, 0, 0)

            /* Invoke the driver to read the FAT sectors.  */
            (media_ptr -> fx_media_driver_entry) (media_ptr);
 8011b52:	68fb      	ldr	r3, [r7, #12]
 8011b54:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8011b58:	68f8      	ldr	r0, [r7, #12]
 8011b5a:	4798      	blx	r3

            /* Determine if the read was successful.  */
            if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 8011b5c:	68fb      	ldr	r3, [r7, #12]
 8011b5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	d00e      	beq.n	8011b84 <_fx_media_open+0x92c>
            {

                /* Build the "uninitialize" I/O driver request.  */
                media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 8011b66:	68fb      	ldr	r3, [r7, #12]
 8011b68:	2208      	movs	r2, #8
 8011b6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 8011b6e:	68fb      	ldr	r3, [r7, #12]
 8011b70:	2290      	movs	r2, #144	; 0x90
 8011b72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

                /* If trace is enabled, insert this event into the trace buffer.  */
                FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                /* Call the specified I/O driver with the uninitialize request.  */
                (media_ptr -> fx_media_driver_entry) (media_ptr);
 8011b76:	68fb      	ldr	r3, [r7, #12]
 8011b78:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8011b7c:	68f8      	ldr	r0, [r7, #12]
 8011b7e:	4798      	blx	r3

                return(FX_FAT_READ_ERROR);
 8011b80:	2303      	movs	r3, #3
 8011b82:	e0d5      	b.n	8011d30 <_fx_media_open+0xad8>
            }

            /* Calculate the number of bytes in the buffer.  */
            bytes_in_buffer =  (media_ptr -> fx_media_bytes_per_sector * FAT_read_sectors);
 8011b84:	68fb      	ldr	r3, [r7, #12]
 8011b86:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011b88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011b8a:	fb02 f303 	mul.w	r3, r2, r3
 8011b8e:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Walk through the sector cache memory to search for available clusters and the first
               available if not already found.  */
            for (j = 0; j < bytes_in_buffer;)
 8011b90:	2300      	movs	r3, #0
 8011b92:	64bb      	str	r3, [r7, #72]	; 0x48
 8011b94:	e03d      	b.n	8011c12 <_fx_media_open+0x9ba>
            {

                /* Check for a 32-bit FAT.  */
                if (media_ptr -> fx_media_32_bit_FAT)
 8011b96:	68fb      	ldr	r3, [r7, #12]
 8011b98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	d009      	beq.n	8011bb2 <_fx_media_open+0x95a>
                {

                    /* Pickup 32-bit FAT entry.  */
                    FAT_entry =  *((ULONG *)&(media_ptr -> fx_media_memory_buffer[j]));
 8011b9e:	68fb      	ldr	r3, [r7, #12]
 8011ba0:	689a      	ldr	r2, [r3, #8]
 8011ba2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011ba4:	4413      	add	r3, r2
 8011ba6:	681b      	ldr	r3, [r3, #0]
 8011ba8:	613b      	str	r3, [r7, #16]

                    /* Advance to next FAT entry.  */
                    j = j + 4;
 8011baa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011bac:	3304      	adds	r3, #4
 8011bae:	64bb      	str	r3, [r7, #72]	; 0x48
 8011bb0:	e011      	b.n	8011bd6 <_fx_media_open+0x97e>
                }
                else
                {

                    /* Process a 16-bit FAT entry.  */
                    FAT_entry =  (((ULONG)(media_ptr -> fx_media_memory_buffer[j])) & 0xFF) |
 8011bb2:	68fb      	ldr	r3, [r7, #12]
 8011bb4:	689a      	ldr	r2, [r3, #8]
 8011bb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011bb8:	4413      	add	r3, r2
 8011bba:	781b      	ldrb	r3, [r3, #0]
 8011bbc:	4619      	mov	r1, r3
                        ((((ULONG)(media_ptr -> fx_media_memory_buffer[j + 1])) & 0xFF) << 8);
 8011bbe:	68fb      	ldr	r3, [r7, #12]
 8011bc0:	689a      	ldr	r2, [r3, #8]
 8011bc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011bc4:	3301      	adds	r3, #1
 8011bc6:	4413      	add	r3, r2
 8011bc8:	781b      	ldrb	r3, [r3, #0]
 8011bca:	021b      	lsls	r3, r3, #8
                    FAT_entry =  (((ULONG)(media_ptr -> fx_media_memory_buffer[j])) & 0xFF) |
 8011bcc:	430b      	orrs	r3, r1
 8011bce:	613b      	str	r3, [r7, #16]

                    /* Advance to next FAT entry.  */
                    j =  j + 2;
 8011bd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011bd2:	3302      	adds	r3, #2
 8011bd4:	64bb      	str	r3, [r7, #72]	; 0x48
                }

                /* Determine if the FAT entry is free.  */
                if (FAT_entry == FX_FREE_CLUSTER)
 8011bd6:	693b      	ldr	r3, [r7, #16]
 8011bd8:	2b00      	cmp	r3, #0
 8011bda:	d10d      	bne.n	8011bf8 <_fx_media_open+0x9a0>
                {

                    /* Entry is free, increment available clusters.  */
                    media_ptr -> fx_media_available_clusters++;
 8011bdc:	68fb      	ldr	r3, [r7, #12]
 8011bde:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011be0:	1c5a      	adds	r2, r3, #1
 8011be2:	68fb      	ldr	r3, [r7, #12]
 8011be4:	67da      	str	r2, [r3, #124]	; 0x7c

                    /* Determine if the starting free cluster has been found yet.  */
                    if (media_ptr -> fx_media_cluster_search_start == 0)
 8011be6:	68fb      	ldr	r3, [r7, #12]
 8011be8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011bec:	2b00      	cmp	r3, #0
 8011bee:	d103      	bne.n	8011bf8 <_fx_media_open+0x9a0>
                    {

                        /* Remember the first free cluster to start further searches from.  */
                        media_ptr -> fx_media_cluster_search_start =  cluster_number;
 8011bf0:	68fb      	ldr	r3, [r7, #12]
 8011bf2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011bf4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                    }
                }

                /* Increment the cluster number.  */
                cluster_number++;
 8011bf8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011bfa:	3301      	adds	r3, #1
 8011bfc:	657b      	str	r3, [r7, #84]	; 0x54

                /* Determine if we have reviewed all FAT entries.  */
                if (cluster_number >= (media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START))
 8011bfe:	68fb      	ldr	r3, [r7, #12]
 8011c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011c02:	3302      	adds	r3, #2
 8011c04:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011c06:	429a      	cmp	r2, r3
 8011c08:	d303      	bcc.n	8011c12 <_fx_media_open+0x9ba>
                {

                    /* Yes, we have looked at all the FAT entries.  */

                    /* Ensure that the outer loop terminates as well.  */
                    i = media_ptr -> fx_media_sectors_per_FAT;
 8011c0a:	68fb      	ldr	r3, [r7, #12]
 8011c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011c0e:	64fb      	str	r3, [r7, #76]	; 0x4c
                    break;
 8011c10:	e003      	b.n	8011c1a <_fx_media_open+0x9c2>
            for (j = 0; j < bytes_in_buffer;)
 8011c12:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c16:	429a      	cmp	r2, r3
 8011c18:	d3bd      	bcc.n	8011b96 <_fx_media_open+0x93e>
        for (i = 0; i < media_ptr -> fx_media_sectors_per_FAT; i = i + media_ptr -> fx_media_sector_cache_size)
 8011c1a:	68fb      	ldr	r3, [r7, #12]
 8011c1c:	695b      	ldr	r3, [r3, #20]
 8011c1e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011c20:	4413      	add	r3, r2
 8011c22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011c24:	68fb      	ldr	r3, [r7, #12]
 8011c26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011c28:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011c2a:	429a      	cmp	r2, r3
 8011c2c:	f4ff af66 	bcc.w	8011afc <_fx_media_open+0x8a4>
    }
#endif /* FX_ENABLE_EXFAT */

    /* If there were no free clusters, just set the search pointer to the
       first cluster number.  */
    if (media_ptr -> fx_media_cluster_search_start == 0)
 8011c30:	68fb      	ldr	r3, [r7, #12]
 8011c32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011c36:	2b00      	cmp	r3, #0
 8011c38:	d103      	bne.n	8011c42 <_fx_media_open+0x9ea>
    {
        media_ptr -> fx_media_cluster_search_start =  FX_FAT_ENTRY_START;
 8011c3a:	68fb      	ldr	r3, [r7, #12]
 8011c3c:	2202      	movs	r2, #2
 8011c3e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Setup the current working directory fields to default to the root
       directory.  */
    media_ptr -> fx_media_default_path.fx_path_directory.fx_dir_entry_name =
        media_ptr -> fx_media_default_path.fx_path_name_buffer;
 8011c42:	68fb      	ldr	r3, [r7, #12]
 8011c44:	f503 62ca 	add.w	r2, r3, #1616	; 0x650
    media_ptr -> fx_media_default_path.fx_path_directory.fx_dir_entry_name =
 8011c48:	68fb      	ldr	r3, [r7, #12]
 8011c4a:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
    media_ptr -> fx_media_default_path.fx_path_directory.fx_dir_entry_short_name[0] =  0;
 8011c4e:	68fb      	ldr	r3, [r7, #12]
 8011c50:	2200      	movs	r2, #0
 8011c52:	f883 24e4 	strb.w	r2, [r3, #1252]	; 0x4e4
    media_ptr -> fx_media_default_path.fx_path_directory.fx_dir_entry_name[0] =        0;
 8011c56:	68fb      	ldr	r3, [r7, #12]
 8011c58:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8011c5c:	2200      	movs	r2, #0
 8011c5e:	701a      	strb	r2, [r3, #0]
    media_ptr -> fx_media_default_path.fx_path_string[0] =                      (CHAR)0;
 8011c60:	68fb      	ldr	r3, [r7, #12]
 8011c62:	2200      	movs	r2, #0
 8011c64:	f883 2550 	strb.w	r2, [r3, #1360]	; 0x550
    media_ptr -> fx_media_default_path.fx_path_string[FX_MAXIMUM_PATH - 1] =      (CHAR)0;
 8011c68:	68fb      	ldr	r3, [r7, #12]
 8011c6a:	2200      	movs	r2, #0
 8011c6c:	f883 264f 	strb.w	r2, [r3, #1615]	; 0x64f
    media_ptr -> fx_media_default_path.fx_path_current_entry =                         0;
 8011c70:	68fb      	ldr	r3, [r7, #12]
 8011c72:	2200      	movs	r2, #0
 8011c74:	f8c3 2750 	str.w	r2, [r3, #1872]	; 0x750

#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE

    /* Invalidate the previously found directory entry.  */
    media_ptr -> fx_media_last_found_name[0] =  0;
 8011c78:	68fb      	ldr	r3, [r7, #12]
 8011c7a:	2200      	movs	r2, #0
 8011c7c:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
#endif

#ifndef FX_DISABLE_FORCE_MEMORY_OPERATION
    /* Initialize the opened file linked list and associated counter.  */
    media_ptr -> fx_media_opened_file_list =      FX_NULL;
 8011c80:	68fb      	ldr	r3, [r7, #12]
 8011c82:	2200      	movs	r2, #0
 8011c84:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    media_ptr -> fx_media_opened_file_count =     0;
 8011c88:	68fb      	ldr	r3, [r7, #12]
 8011c8a:	2200      	movs	r2, #0
 8011c8c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
#ifndef FX_SINGLE_THREAD

#ifndef FX_DONT_CREATE_MUTEX

    /* Create ThreadX mutex for protection.  */
    tx_mutex_create(&(media_ptr -> fx_media_protect), "FileX Media Mutex", TX_NO_INHERIT);
 8011c90:	68fb      	ldr	r3, [r7, #12]
 8011c92:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8011c96:	2200      	movs	r2, #0
 8011c98:	4928      	ldr	r1, [pc, #160]	; (8011d3c <_fx_media_open+0xae4>)
 8011c9a:	4618      	mov	r0, r3
 8011c9c:	f005 fb30 	bl	8017300 <_tx_mutex_create>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011ca0:	f3ef 8310 	mrs	r3, PRIMASK
 8011ca4:	61fb      	str	r3, [r7, #28]
    return(posture);
 8011ca6:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8011ca8:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8011caa:	b672      	cpsid	i
    return(int_posture);
 8011cac:	69bb      	ldr	r3, [r7, #24]
    /* Protect against other threads accessing the media.  */
    FX_PROTECT
#endif

    /* Lockout interrupts.  */
    FX_DISABLE_INTS
 8011cae:	627b      	str	r3, [r7, #36]	; 0x24

    /* At this point, the media has been opened successfully.  Place the
       media on the linked list of currently opened media.  */

    /* Load the media ID field in the media control block.  */
    media_ptr -> fx_media_id =  (ULONG)FX_MEDIA_ID;
 8011cb0:	68fb      	ldr	r3, [r7, #12]
 8011cb2:	4a23      	ldr	r2, [pc, #140]	; (8011d40 <_fx_media_open+0xae8>)
 8011cb4:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of opened media.  First,
       check for an empty list.  */
    if (_fx_system_media_opened_ptr)
 8011cb6:	4b23      	ldr	r3, [pc, #140]	; (8011d44 <_fx_media_open+0xaec>)
 8011cb8:	681b      	ldr	r3, [r3, #0]
 8011cba:	2b00      	cmp	r3, #0
 8011cbc:	d017      	beq.n	8011cee <_fx_media_open+0xa96>
    {

        /* Pickup tail pointer.  */
        tail_ptr =  _fx_system_media_opened_ptr -> fx_media_opened_previous;
 8011cbe:	4b21      	ldr	r3, [pc, #132]	; (8011d44 <_fx_media_open+0xaec>)
 8011cc0:	681b      	ldr	r3, [r3, #0]
 8011cc2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8011cc6:	623b      	str	r3, [r7, #32]

        /* Place the new media in the list.  */
        _fx_system_media_opened_ptr -> fx_media_opened_previous =  media_ptr;
 8011cc8:	4b1e      	ldr	r3, [pc, #120]	; (8011d44 <_fx_media_open+0xaec>)
 8011cca:	681b      	ldr	r3, [r3, #0]
 8011ccc:	68fa      	ldr	r2, [r7, #12]
 8011cce:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
        tail_ptr -> fx_media_opened_next =  media_ptr;
 8011cd2:	6a3b      	ldr	r3, [r7, #32]
 8011cd4:	68fa      	ldr	r2, [r7, #12]
 8011cd6:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

        /* Setup this media's opened links.  */
        media_ptr -> fx_media_opened_previous =  tail_ptr;
 8011cda:	68fb      	ldr	r3, [r7, #12]
 8011cdc:	6a3a      	ldr	r2, [r7, #32]
 8011cde:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
        media_ptr -> fx_media_opened_next =      _fx_system_media_opened_ptr;
 8011ce2:	4b18      	ldr	r3, [pc, #96]	; (8011d44 <_fx_media_open+0xaec>)
 8011ce4:	681a      	ldr	r2, [r3, #0]
 8011ce6:	68fb      	ldr	r3, [r7, #12]
 8011ce8:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 8011cec:	e00a      	b.n	8011d04 <_fx_media_open+0xaac>
    }
    else
    {

        /* The opened media list is empty.  Add the media to empty list.  */
        _fx_system_media_opened_ptr =           media_ptr;
 8011cee:	4a15      	ldr	r2, [pc, #84]	; (8011d44 <_fx_media_open+0xaec>)
 8011cf0:	68fb      	ldr	r3, [r7, #12]
 8011cf2:	6013      	str	r3, [r2, #0]
        media_ptr -> fx_media_opened_next =     media_ptr;
 8011cf4:	68fb      	ldr	r3, [r7, #12]
 8011cf6:	68fa      	ldr	r2, [r7, #12]
 8011cf8:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
        media_ptr -> fx_media_opened_previous = media_ptr;
 8011cfc:	68fb      	ldr	r3, [r7, #12]
 8011cfe:	68fa      	ldr	r2, [r7, #12]
 8011d00:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    }

    /* Increment the opened media counter.  */
    _fx_system_media_opened_count++;
 8011d04:	4b10      	ldr	r3, [pc, #64]	; (8011d48 <_fx_media_open+0xaf0>)
 8011d06:	681b      	ldr	r3, [r3, #0]
 8011d08:	3301      	adds	r3, #1
 8011d0a:	4a0f      	ldr	r2, [pc, #60]	; (8011d48 <_fx_media_open+0xaf0>)
 8011d0c:	6013      	str	r3, [r2, #0]

    /* Invoke media open callback. */
    if (media_ptr -> fx_media_open_notify)
 8011d0e:	68fb      	ldr	r3, [r7, #12]
 8011d10:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	d004      	beq.n	8011d22 <_fx_media_open+0xaca>
    {
        media_ptr -> fx_media_open_notify(media_ptr);
 8011d18:	68fb      	ldr	r3, [r7, #12]
 8011d1a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8011d1e:	68f8      	ldr	r0, [r7, #12]
 8011d20:	4798      	blx	r3
 8011d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d24:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011d26:	697b      	ldr	r3, [r7, #20]
 8011d28:	f383 8810 	msr	PRIMASK, r3
}
 8011d2c:	bf00      	nop
    /* Release media protection.  */
    FX_UNPROTECT
#endif

    /* Return a successful status.  */
    return(FX_SUCCESS);
 8011d2e:	2300      	movs	r3, #0
}
 8011d30:	4618      	mov	r0, r3
 8011d32:	3758      	adds	r7, #88	; 0x58
 8011d34:	46bd      	mov	sp, r7
 8011d36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011d3a:	bf00      	nop
 8011d3c:	0801aac8 	.word	0x0801aac8
 8011d40:	4d454449 	.word	0x4d454449
 8011d44:	200151b4 	.word	0x200151b4
 8011d48:	200151b8 	.word	0x200151b8

08011d4c <_fx_media_space_available>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_media_space_available(FX_MEDIA *media_ptr, ULONG *available_bytes_ptr)
{
 8011d4c:	b580      	push	{r7, lr}
 8011d4e:	b086      	sub	sp, #24
 8011d50:	af00      	add	r7, sp, #0
 8011d52:	6078      	str	r0, [r7, #4]
 8011d54:	6039      	str	r1, [r7, #0]

UINT    status;
ULONG64 available_bytes;

    /* Call actual media space available service.  */
    status = _fx_media_extended_space_available(media_ptr, &available_bytes);
 8011d56:	f107 0308 	add.w	r3, r7, #8
 8011d5a:	4619      	mov	r1, r3
 8011d5c:	6878      	ldr	r0, [r7, #4]
 8011d5e:	f7fe fce3 	bl	8010728 <_fx_media_extended_space_available>
 8011d62:	6178      	str	r0, [r7, #20]

    /* Check status.  */
    if (status == FX_SUCCESS)
 8011d64:	697b      	ldr	r3, [r7, #20]
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	d10c      	bne.n	8011d84 <_fx_media_space_available+0x38>
    {

        /* Determine if more than 4GB available.  */
        if (available_bytes > 0x00000000FFFFFFFF)
 8011d6a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8011d6e:	2b01      	cmp	r3, #1
 8011d70:	d304      	bcc.n	8011d7c <_fx_media_space_available+0x30>
        {

            /* Yes, we must have more than 4GB available... report the maximum we can fit
               in 32bits, which is 4GB.  */
            *available_bytes_ptr = 0xFFFFFFFF;
 8011d72:	683b      	ldr	r3, [r7, #0]
 8011d74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011d78:	601a      	str	r2, [r3, #0]
 8011d7a:	e003      	b.n	8011d84 <_fx_media_space_available+0x38>
        }
        else
        {
            *available_bytes_ptr = (ULONG)(available_bytes);
 8011d7c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8011d80:	683b      	ldr	r3, [r7, #0]
 8011d82:	601a      	str	r2, [r3, #0]
        }
    }

    /* Return status to the caller.  */
    return(status);
 8011d84:	697b      	ldr	r3, [r7, #20]
}
 8011d86:	4618      	mov	r0, r3
 8011d88:	3718      	adds	r7, #24
 8011d8a:	46bd      	mov	sp, r7
 8011d8c:	bd80      	pop	{r7, pc}
	...

08011d90 <_fx_system_initialize>:
/*                                            disable build options,      */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _fx_system_initialize(VOID)
{
 8011d90:	b580      	push	{r7, lr}
 8011d92:	b084      	sub	sp, #16
 8011d94:	af04      	add	r7, sp, #16
    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_SYSTEM_INITIALIZE, 0, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Initialize the head pointer of the opened media list and the
       number of opened media.  */
    _fx_system_media_opened_ptr =       FX_NULL;
 8011d96:	4b27      	ldr	r3, [pc, #156]	; (8011e34 <_fx_system_initialize+0xa4>)
 8011d98:	2200      	movs	r2, #0
 8011d9a:	601a      	str	r2, [r3, #0]
    _fx_system_media_opened_count =     0;
 8011d9c:	4b26      	ldr	r3, [pc, #152]	; (8011e38 <_fx_system_initialize+0xa8>)
 8011d9e:	2200      	movs	r2, #0
 8011da0:	601a      	str	r2, [r3, #0]

    /* Initialize the time and date fields with their default values.  */
    _fx_system_date =   FX_INITIAL_DATE;
 8011da2:	4b26      	ldr	r3, [pc, #152]	; (8011e3c <_fx_system_initialize+0xac>)
 8011da4:	f644 2221 	movw	r2, #18977	; 0x4a21
 8011da8:	601a      	str	r2, [r3, #0]
    _fx_system_time =   FX_INITIAL_TIME;
 8011daa:	4b25      	ldr	r3, [pc, #148]	; (8011e40 <_fx_system_initialize+0xb0>)
 8011dac:	2200      	movs	r2, #0
 8011dae:	601a      	str	r2, [r3, #0]

    /* Initialize the sector and FAT cache sizes.  */
    _fx_system_media_max_sector_cache =  FX_MAX_SECTOR_CACHE;
 8011db0:	4b24      	ldr	r3, [pc, #144]	; (8011e44 <_fx_system_initialize+0xb4>)
 8011db2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011db6:	601a      	str	r2, [r3, #0]
    _fx_system_media_max_fat_cache =     FX_MAX_FAT_CACHE;
 8011db8:	4b23      	ldr	r3, [pc, #140]	; (8011e48 <_fx_system_initialize+0xb8>)
 8011dba:	2210      	movs	r2, #16
 8011dbc:	601a      	str	r2, [r3, #0]
       FX_UPDATE_RATE_IN_TICKS.  Note that the timer is not necessary for
       regular FileX operation - it is only needed for accurate system
       date and time stamps on files.  */

#ifndef FX_NO_TIMER
    tx_timer_create(&_fx_system_timer, "FileX System Timer", _fx_system_timer_entry, FX_TIMER_ID,
 8011dbe:	2301      	movs	r3, #1
 8011dc0:	9302      	str	r3, [sp, #8]
 8011dc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8011dc6:	9301      	str	r3, [sp, #4]
 8011dc8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8011dcc:	9300      	str	r3, [sp, #0]
 8011dce:	4b1f      	ldr	r3, [pc, #124]	; (8011e4c <_fx_system_initialize+0xbc>)
 8011dd0:	4a1f      	ldr	r2, [pc, #124]	; (8011e50 <_fx_system_initialize+0xc0>)
 8011dd2:	4920      	ldr	r1, [pc, #128]	; (8011e54 <_fx_system_initialize+0xc4>)
 8011dd4:	4820      	ldr	r0, [pc, #128]	; (8011e58 <_fx_system_initialize+0xc8>)
 8011dd6:	f007 f80b 	bl	8018df0 <_tx_timer_create>
    /* Setup the build options variables.  */

    /* Setup the first build options variable.  */
    if (FX_MAX_LONG_NAME_LEN > 0xFF)
    {
        _fx_system_build_options_1 =  _fx_system_build_options_1 | (((ULONG)0xFF) << 24);
 8011dda:	4b20      	ldr	r3, [pc, #128]	; (8011e5c <_fx_system_initialize+0xcc>)
 8011ddc:	681b      	ldr	r3, [r3, #0]
 8011dde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011de2:	4a1e      	ldr	r2, [pc, #120]	; (8011e5c <_fx_system_initialize+0xcc>)
 8011de4:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_1 =  _fx_system_build_options_1 | (((ULONG)(FX_MAX_LONG_NAME_LEN & 0xFF)) << 24);
    }
    if (FX_MAX_LAST_NAME_LEN > 0xFF)
    {
        _fx_system_build_options_1 =  _fx_system_build_options_1 | (((ULONG)0xFF) << 16);
 8011de6:	4b1d      	ldr	r3, [pc, #116]	; (8011e5c <_fx_system_initialize+0xcc>)
 8011de8:	681b      	ldr	r3, [r3, #0]
 8011dea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011dee:	4a1b      	ldr	r2, [pc, #108]	; (8011e5c <_fx_system_initialize+0xcc>)
 8011df0:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | (((ULONG)0xFFFF) << 16);
    }
    else
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | (((ULONG)FX_MAX_SECTOR_CACHE) << 16);
 8011df2:	4b1b      	ldr	r3, [pc, #108]	; (8011e60 <_fx_system_initialize+0xd0>)
 8011df4:	681b      	ldr	r3, [r3, #0]
 8011df6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8011dfa:	4a19      	ldr	r2, [pc, #100]	; (8011e60 <_fx_system_initialize+0xd0>)
 8011dfc:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | (((ULONG)0xFF) << 8);
    }
    else
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | (((ULONG)FX_FAT_MAP_SIZE) << 8);
 8011dfe:	4b18      	ldr	r3, [pc, #96]	; (8011e60 <_fx_system_initialize+0xd0>)
 8011e00:	681b      	ldr	r3, [r3, #0]
 8011e02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011e06:	4a16      	ldr	r2, [pc, #88]	; (8011e60 <_fx_system_initialize+0xd0>)
 8011e08:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | ((ULONG)0xFF);
    }
    else
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | ((ULONG)FX_MAX_FAT_CACHE);
 8011e0a:	4b15      	ldr	r3, [pc, #84]	; (8011e60 <_fx_system_initialize+0xd0>)
 8011e0c:	681b      	ldr	r3, [r3, #0]
 8011e0e:	f043 0310 	orr.w	r3, r3, #16
 8011e12:	4a13      	ldr	r2, [pc, #76]	; (8011e60 <_fx_system_initialize+0xd0>)
 8011e14:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_3 =  _fx_system_build_options_3 | (((ULONG)0xFF) << 16);
    }
    else
    {
        _fx_system_build_options_3 =  _fx_system_build_options_3 | (((ULONG)FX_UPDATE_RATE_IN_SECONDS) << 16);
 8011e16:	4b13      	ldr	r3, [pc, #76]	; (8011e64 <_fx_system_initialize+0xd4>)
 8011e18:	681b      	ldr	r3, [r3, #0]
 8011e1a:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 8011e1e:	4a11      	ldr	r2, [pc, #68]	; (8011e64 <_fx_system_initialize+0xd4>)
 8011e20:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_3 =  _fx_system_build_options_3 | ((ULONG)0xFFFF);
    }
    else
    {
        _fx_system_build_options_3 =  _fx_system_build_options_3 | ((ULONG)FX_UPDATE_RATE_IN_TICKS);
 8011e22:	4b10      	ldr	r3, [pc, #64]	; (8011e64 <_fx_system_initialize+0xd4>)
 8011e24:	681b      	ldr	r3, [r3, #0]
 8011e26:	f443 737a 	orr.w	r3, r3, #1000	; 0x3e8
 8011e2a:	4a0e      	ldr	r2, [pc, #56]	; (8011e64 <_fx_system_initialize+0xd4>)
 8011e2c:	6013      	str	r3, [r2, #0]
    }
#endif /* FX_DISABLE_BUILD_OPTIONS */
}
 8011e2e:	bf00      	nop
 8011e30:	46bd      	mov	sp, r7
 8011e32:	bd80      	pop	{r7, pc}
 8011e34:	200151b4 	.word	0x200151b4
 8011e38:	200151b8 	.word	0x200151b8
 8011e3c:	200151bc 	.word	0x200151bc
 8011e40:	200151c0 	.word	0x200151c0
 8011e44:	200151c4 	.word	0x200151c4
 8011e48:	200151c8 	.word	0x200151c8
 8011e4c:	46585359 	.word	0x46585359
 8011e50:	08011e69 	.word	0x08011e69
 8011e54:	0801aadc 	.word	0x0801aadc
 8011e58:	200151d8 	.word	0x200151d8
 8011e5c:	200151cc 	.word	0x200151cc
 8011e60:	200151d0 	.word	0x200151d0
 8011e64:	200151d4 	.word	0x200151d4

08011e68 <_fx_system_timer_entry>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _fx_system_timer_entry(ULONG id)
{
 8011e68:	b480      	push	{r7}
 8011e6a:	b089      	sub	sp, #36	; 0x24
 8011e6c:	af00      	add	r7, sp, #0
 8011e6e:	6078      	str	r0, [r7, #4]
UINT month;
UINT year;


    /* Determine if the ID is valid.  */
    if (id == FX_TIMER_ID)
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	4a9c      	ldr	r2, [pc, #624]	; (80120e4 <_fx_system_timer_entry+0x27c>)
 8011e74:	4293      	cmp	r3, r2
 8011e76:	f040 8130 	bne.w	80120da <_fx_system_timer_entry+0x272>
    {

        /* Break the current date time into separate fields for easier work!  */
        second =  (_fx_system_time & FX_SECOND_MASK) * 2;
 8011e7a:	4b9b      	ldr	r3, [pc, #620]	; (80120e8 <_fx_system_timer_entry+0x280>)
 8011e7c:	681b      	ldr	r3, [r3, #0]
 8011e7e:	f003 031f 	and.w	r3, r3, #31
 8011e82:	005b      	lsls	r3, r3, #1
 8011e84:	61fb      	str	r3, [r7, #28]
        minute =  (_fx_system_time >> FX_MINUTE_SHIFT) & FX_MINUTE_MASK;
 8011e86:	4b98      	ldr	r3, [pc, #608]	; (80120e8 <_fx_system_timer_entry+0x280>)
 8011e88:	681b      	ldr	r3, [r3, #0]
 8011e8a:	095b      	lsrs	r3, r3, #5
 8011e8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011e90:	61bb      	str	r3, [r7, #24]
        hour =    (_fx_system_time >> FX_HOUR_SHIFT) & FX_HOUR_MASK;
 8011e92:	4b95      	ldr	r3, [pc, #596]	; (80120e8 <_fx_system_timer_entry+0x280>)
 8011e94:	681b      	ldr	r3, [r3, #0]
 8011e96:	0adb      	lsrs	r3, r3, #11
 8011e98:	f003 031f 	and.w	r3, r3, #31
 8011e9c:	617b      	str	r3, [r7, #20]
        day =     _fx_system_date & FX_DAY_MASK;
 8011e9e:	4b93      	ldr	r3, [pc, #588]	; (80120ec <_fx_system_timer_entry+0x284>)
 8011ea0:	681b      	ldr	r3, [r3, #0]
 8011ea2:	f003 031f 	and.w	r3, r3, #31
 8011ea6:	613b      	str	r3, [r7, #16]
        month =   (_fx_system_date >> FX_MONTH_SHIFT) & FX_MONTH_MASK;
 8011ea8:	4b90      	ldr	r3, [pc, #576]	; (80120ec <_fx_system_timer_entry+0x284>)
 8011eaa:	681b      	ldr	r3, [r3, #0]
 8011eac:	095b      	lsrs	r3, r3, #5
 8011eae:	f003 030f 	and.w	r3, r3, #15
 8011eb2:	60fb      	str	r3, [r7, #12]
        year =    ((_fx_system_date >> FX_YEAR_SHIFT) & FX_YEAR_MASK) + FX_BASE_YEAR;
 8011eb4:	4b8d      	ldr	r3, [pc, #564]	; (80120ec <_fx_system_timer_entry+0x284>)
 8011eb6:	681b      	ldr	r3, [r3, #0]
 8011eb8:	0a5b      	lsrs	r3, r3, #9
 8011eba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011ebe:	f203 73bc 	addw	r3, r3, #1980	; 0x7bc
 8011ec2:	60bb      	str	r3, [r7, #8]

        /* Now apply the "second" update.  */
        second =  second + FX_UPDATE_RATE_IN_SECONDS;
 8011ec4:	69fb      	ldr	r3, [r7, #28]
 8011ec6:	330a      	adds	r3, #10
 8011ec8:	61fb      	str	r3, [r7, #28]

        /* Determine if we need to adjust the minute field.  */
        if (second > FX_MAXIMUM_SECOND)
 8011eca:	69fb      	ldr	r3, [r7, #28]
 8011ecc:	2b3b      	cmp	r3, #59	; 0x3b
 8011ece:	f240 80eb 	bls.w	80120a8 <_fx_system_timer_entry+0x240>
        {

            /* Yes, we need to adjust the minute field.  */
            minute =  minute + second / 60;
 8011ed2:	69fb      	ldr	r3, [r7, #28]
 8011ed4:	4a86      	ldr	r2, [pc, #536]	; (80120f0 <_fx_system_timer_entry+0x288>)
 8011ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8011eda:	095b      	lsrs	r3, r3, #5
 8011edc:	69ba      	ldr	r2, [r7, #24]
 8011ede:	4413      	add	r3, r2
 8011ee0:	61bb      	str	r3, [r7, #24]
            second =  second % 60;
 8011ee2:	69fa      	ldr	r2, [r7, #28]
 8011ee4:	4b82      	ldr	r3, [pc, #520]	; (80120f0 <_fx_system_timer_entry+0x288>)
 8011ee6:	fba3 1302 	umull	r1, r3, r3, r2
 8011eea:	0959      	lsrs	r1, r3, #5
 8011eec:	460b      	mov	r3, r1
 8011eee:	011b      	lsls	r3, r3, #4
 8011ef0:	1a5b      	subs	r3, r3, r1
 8011ef2:	009b      	lsls	r3, r3, #2
 8011ef4:	1ad3      	subs	r3, r2, r3
 8011ef6:	61fb      	str	r3, [r7, #28]

            /* Determine if we need to adjust the hour field.  */
            if (minute > FX_MAXIMUM_MINUTE)
 8011ef8:	69bb      	ldr	r3, [r7, #24]
 8011efa:	2b3b      	cmp	r3, #59	; 0x3b
 8011efc:	f240 80d4 	bls.w	80120a8 <_fx_system_timer_entry+0x240>
            {

                /* Yes, we need to adjust the hour field.  */
                hour =    hour + minute / 60;
 8011f00:	69bb      	ldr	r3, [r7, #24]
 8011f02:	4a7b      	ldr	r2, [pc, #492]	; (80120f0 <_fx_system_timer_entry+0x288>)
 8011f04:	fba2 2303 	umull	r2, r3, r2, r3
 8011f08:	095b      	lsrs	r3, r3, #5
 8011f0a:	697a      	ldr	r2, [r7, #20]
 8011f0c:	4413      	add	r3, r2
 8011f0e:	617b      	str	r3, [r7, #20]
                minute =  minute % 60;
 8011f10:	69ba      	ldr	r2, [r7, #24]
 8011f12:	4b77      	ldr	r3, [pc, #476]	; (80120f0 <_fx_system_timer_entry+0x288>)
 8011f14:	fba3 1302 	umull	r1, r3, r3, r2
 8011f18:	0959      	lsrs	r1, r3, #5
 8011f1a:	460b      	mov	r3, r1
 8011f1c:	011b      	lsls	r3, r3, #4
 8011f1e:	1a5b      	subs	r3, r3, r1
 8011f20:	009b      	lsls	r3, r3, #2
 8011f22:	1ad3      	subs	r3, r2, r3
 8011f24:	61bb      	str	r3, [r7, #24]

                /* Determine if we need to adjust the day field.  */
                if (hour > FX_MAXIMUM_HOUR)
 8011f26:	697b      	ldr	r3, [r7, #20]
 8011f28:	2b17      	cmp	r3, #23
 8011f2a:	f240 80bd 	bls.w	80120a8 <_fx_system_timer_entry+0x240>
                {

                    /* Yes, we need to adjust the day field.  */
                    hour =  0;
 8011f2e:	2300      	movs	r3, #0
 8011f30:	617b      	str	r3, [r7, #20]
                    day++;
 8011f32:	693b      	ldr	r3, [r7, #16]
 8011f34:	3301      	adds	r3, #1
 8011f36:	613b      	str	r3, [r7, #16]

                    /* Determine if we need to adjust the month field.  */
                    switch (month)
 8011f38:	68fb      	ldr	r3, [r7, #12]
 8011f3a:	3b01      	subs	r3, #1
 8011f3c:	2b0b      	cmp	r3, #11
 8011f3e:	f200 80c9 	bhi.w	80120d4 <_fx_system_timer_entry+0x26c>
 8011f42:	a201      	add	r2, pc, #4	; (adr r2, 8011f48 <_fx_system_timer_entry+0xe0>)
 8011f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f48:	08011f79 	.word	0x08011f79
 8011f4c:	08011f8b 	.word	0x08011f8b
 8011f50:	08011fb9 	.word	0x08011fb9
 8011f54:	08011fcb 	.word	0x08011fcb
 8011f58:	08011fdd 	.word	0x08011fdd
 8011f5c:	08011fef 	.word	0x08011fef
 8011f60:	08012001 	.word	0x08012001
 8011f64:	08012013 	.word	0x08012013
 8011f68:	08012025 	.word	0x08012025
 8011f6c:	08012037 	.word	0x08012037
 8011f70:	08012049 	.word	0x08012049
 8011f74:	0801205b 	.word	0x0801205b

                    case 1:                 /* January  */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 8011f78:	693b      	ldr	r3, [r7, #16]
 8011f7a:	2b1f      	cmp	r3, #31
 8011f7c:	d97d      	bls.n	801207a <_fx_system_timer_entry+0x212>
                        {

                            /* Move to next month.  */
                            day = 1;
 8011f7e:	2301      	movs	r3, #1
 8011f80:	613b      	str	r3, [r7, #16]
                            month++;
 8011f82:	68fb      	ldr	r3, [r7, #12]
 8011f84:	3301      	adds	r3, #1
 8011f86:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 8011f88:	e077      	b.n	801207a <_fx_system_timer_entry+0x212>
                    {

                        /* Check for leap year.  We don't need to check for leap
                           century her (century years divisible by 400) since 2000
                           is and this FAT format only supports years to 2107. */
                        if ((year % 4) == 0)
 8011f8a:	68bb      	ldr	r3, [r7, #8]
 8011f8c:	f003 0303 	and.w	r3, r3, #3
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	d108      	bne.n	8011fa6 <_fx_system_timer_entry+0x13e>
                        {

                            /* Leap year in February... check for 29 days
                               instead of 28.  */
                            if (day > 29)
 8011f94:	693b      	ldr	r3, [r7, #16]
 8011f96:	2b1d      	cmp	r3, #29
 8011f98:	d971      	bls.n	801207e <_fx_system_timer_entry+0x216>
                            {

                                /* Adjust the month.  */
                                day =  1;
 8011f9a:	2301      	movs	r3, #1
 8011f9c:	613b      	str	r3, [r7, #16]
                                month++;
 8011f9e:	68fb      	ldr	r3, [r7, #12]
 8011fa0:	3301      	adds	r3, #1
 8011fa2:	60fb      	str	r3, [r7, #12]
                                /* Adjust the month.  */
                                day = 1;
                                month++;
                            }
                        }
                        break;
 8011fa4:	e06b      	b.n	801207e <_fx_system_timer_entry+0x216>
                            if (day > 28)
 8011fa6:	693b      	ldr	r3, [r7, #16]
 8011fa8:	2b1c      	cmp	r3, #28
 8011faa:	d968      	bls.n	801207e <_fx_system_timer_entry+0x216>
                                day = 1;
 8011fac:	2301      	movs	r3, #1
 8011fae:	613b      	str	r3, [r7, #16]
                                month++;
 8011fb0:	68fb      	ldr	r3, [r7, #12]
 8011fb2:	3301      	adds	r3, #1
 8011fb4:	60fb      	str	r3, [r7, #12]
                        break;
 8011fb6:	e062      	b.n	801207e <_fx_system_timer_entry+0x216>

                    case 3:                 /* March  */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 8011fb8:	693b      	ldr	r3, [r7, #16]
 8011fba:	2b1f      	cmp	r3, #31
 8011fbc:	d961      	bls.n	8012082 <_fx_system_timer_entry+0x21a>
                        {

                            /* Move to next month.  */
                            day = 1;
 8011fbe:	2301      	movs	r3, #1
 8011fc0:	613b      	str	r3, [r7, #16]
                            month++;
 8011fc2:	68fb      	ldr	r3, [r7, #12]
 8011fc4:	3301      	adds	r3, #1
 8011fc6:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 8011fc8:	e05b      	b.n	8012082 <_fx_system_timer_entry+0x21a>

                    case 4:                 /* April  */
                    {

                        /* Check for end of the month.  */
                        if (day > 30)
 8011fca:	693b      	ldr	r3, [r7, #16]
 8011fcc:	2b1e      	cmp	r3, #30
 8011fce:	d95a      	bls.n	8012086 <_fx_system_timer_entry+0x21e>
                        {

                            /* Move to next month.  */
                            day = 1;
 8011fd0:	2301      	movs	r3, #1
 8011fd2:	613b      	str	r3, [r7, #16]
                            month++;
 8011fd4:	68fb      	ldr	r3, [r7, #12]
 8011fd6:	3301      	adds	r3, #1
 8011fd8:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 8011fda:	e054      	b.n	8012086 <_fx_system_timer_entry+0x21e>

                    case 5:                 /* May  */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 8011fdc:	693b      	ldr	r3, [r7, #16]
 8011fde:	2b1f      	cmp	r3, #31
 8011fe0:	d953      	bls.n	801208a <_fx_system_timer_entry+0x222>
                        {

                            /* Move to next month.  */
                            day = 1;
 8011fe2:	2301      	movs	r3, #1
 8011fe4:	613b      	str	r3, [r7, #16]
                            month++;
 8011fe6:	68fb      	ldr	r3, [r7, #12]
 8011fe8:	3301      	adds	r3, #1
 8011fea:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 8011fec:	e04d      	b.n	801208a <_fx_system_timer_entry+0x222>

                    case 6:                 /* June */
                    {

                        /* Check for end of the month.  */
                        if (day > 30)
 8011fee:	693b      	ldr	r3, [r7, #16]
 8011ff0:	2b1e      	cmp	r3, #30
 8011ff2:	d94c      	bls.n	801208e <_fx_system_timer_entry+0x226>
                        {

                            /* Move to next month.  */
                            day = 1;
 8011ff4:	2301      	movs	r3, #1
 8011ff6:	613b      	str	r3, [r7, #16]
                            month++;
 8011ff8:	68fb      	ldr	r3, [r7, #12]
 8011ffa:	3301      	adds	r3, #1
 8011ffc:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 8011ffe:	e046      	b.n	801208e <_fx_system_timer_entry+0x226>

                    case 7:                 /* July */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 8012000:	693b      	ldr	r3, [r7, #16]
 8012002:	2b1f      	cmp	r3, #31
 8012004:	d945      	bls.n	8012092 <_fx_system_timer_entry+0x22a>
                        {

                            /* Move to next month.  */
                            day = 1;
 8012006:	2301      	movs	r3, #1
 8012008:	613b      	str	r3, [r7, #16]
                            month++;
 801200a:	68fb      	ldr	r3, [r7, #12]
 801200c:	3301      	adds	r3, #1
 801200e:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 8012010:	e03f      	b.n	8012092 <_fx_system_timer_entry+0x22a>

                    case 8:                 /* August */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 8012012:	693b      	ldr	r3, [r7, #16]
 8012014:	2b1f      	cmp	r3, #31
 8012016:	d93e      	bls.n	8012096 <_fx_system_timer_entry+0x22e>
                        {

                            /* Move to next month.  */
                            day = 1;
 8012018:	2301      	movs	r3, #1
 801201a:	613b      	str	r3, [r7, #16]
                            month++;
 801201c:	68fb      	ldr	r3, [r7, #12]
 801201e:	3301      	adds	r3, #1
 8012020:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 8012022:	e038      	b.n	8012096 <_fx_system_timer_entry+0x22e>

                    case 9:                 /* September */
                    {

                        /* Check for end of the month.  */
                        if (day > 30)
 8012024:	693b      	ldr	r3, [r7, #16]
 8012026:	2b1e      	cmp	r3, #30
 8012028:	d937      	bls.n	801209a <_fx_system_timer_entry+0x232>
                        {

                            /* Move to next month.  */
                            day = 1;
 801202a:	2301      	movs	r3, #1
 801202c:	613b      	str	r3, [r7, #16]
                            month++;
 801202e:	68fb      	ldr	r3, [r7, #12]
 8012030:	3301      	adds	r3, #1
 8012032:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 8012034:	e031      	b.n	801209a <_fx_system_timer_entry+0x232>

                    case 10:                /* October */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 8012036:	693b      	ldr	r3, [r7, #16]
 8012038:	2b1f      	cmp	r3, #31
 801203a:	d930      	bls.n	801209e <_fx_system_timer_entry+0x236>
                        {

                            /* Move to next month.  */
                            day = 1;
 801203c:	2301      	movs	r3, #1
 801203e:	613b      	str	r3, [r7, #16]
                            month++;
 8012040:	68fb      	ldr	r3, [r7, #12]
 8012042:	3301      	adds	r3, #1
 8012044:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 8012046:	e02a      	b.n	801209e <_fx_system_timer_entry+0x236>

                    case 11:                /* November */
                    {

                        /* Check for end of the month.  */
                        if (day > 30)
 8012048:	693b      	ldr	r3, [r7, #16]
 801204a:	2b1e      	cmp	r3, #30
 801204c:	d929      	bls.n	80120a2 <_fx_system_timer_entry+0x23a>
                        {

                            /* Move to next month.  */
                            day = 1;
 801204e:	2301      	movs	r3, #1
 8012050:	613b      	str	r3, [r7, #16]
                            month++;
 8012052:	68fb      	ldr	r3, [r7, #12]
 8012054:	3301      	adds	r3, #1
 8012056:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 8012058:	e023      	b.n	80120a2 <_fx_system_timer_entry+0x23a>

                    case 12:                /* December */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 801205a:	693b      	ldr	r3, [r7, #16]
 801205c:	2b1f      	cmp	r3, #31
 801205e:	d922      	bls.n	80120a6 <_fx_system_timer_entry+0x23e>
                        {

                            /* Move to next month.  */
                            day = 1;
 8012060:	2301      	movs	r3, #1
 8012062:	613b      	str	r3, [r7, #16]
                            month = 1;
 8012064:	2301      	movs	r3, #1
 8012066:	60fb      	str	r3, [r7, #12]

                            /* Also move to next year.  */
                            year++;
 8012068:	68bb      	ldr	r3, [r7, #8]
 801206a:	3301      	adds	r3, #1
 801206c:	60bb      	str	r3, [r7, #8]

                            /* Check for a year that exceeds the representation
                               in this format.  */
                            if (year > FX_MAXIMUM_YEAR)
 801206e:	68bb      	ldr	r3, [r7, #8]
 8012070:	f640 023b 	movw	r2, #2107	; 0x83b
 8012074:	4293      	cmp	r3, r2
 8012076:	d82f      	bhi.n	80120d8 <_fx_system_timer_entry+0x270>
                            {
                                return;
                            }
                        }
                        break;
 8012078:	e015      	b.n	80120a6 <_fx_system_timer_entry+0x23e>
                        break;
 801207a:	bf00      	nop
 801207c:	e014      	b.n	80120a8 <_fx_system_timer_entry+0x240>
                        break;
 801207e:	bf00      	nop
 8012080:	e012      	b.n	80120a8 <_fx_system_timer_entry+0x240>
                        break;
 8012082:	bf00      	nop
 8012084:	e010      	b.n	80120a8 <_fx_system_timer_entry+0x240>
                        break;
 8012086:	bf00      	nop
 8012088:	e00e      	b.n	80120a8 <_fx_system_timer_entry+0x240>
                        break;
 801208a:	bf00      	nop
 801208c:	e00c      	b.n	80120a8 <_fx_system_timer_entry+0x240>
                        break;
 801208e:	bf00      	nop
 8012090:	e00a      	b.n	80120a8 <_fx_system_timer_entry+0x240>
                        break;
 8012092:	bf00      	nop
 8012094:	e008      	b.n	80120a8 <_fx_system_timer_entry+0x240>
                        break;
 8012096:	bf00      	nop
 8012098:	e006      	b.n	80120a8 <_fx_system_timer_entry+0x240>
                        break;
 801209a:	bf00      	nop
 801209c:	e004      	b.n	80120a8 <_fx_system_timer_entry+0x240>
                        break;
 801209e:	bf00      	nop
 80120a0:	e002      	b.n	80120a8 <_fx_system_timer_entry+0x240>
                        break;
 80120a2:	bf00      	nop
 80120a4:	e000      	b.n	80120a8 <_fx_system_timer_entry+0x240>
                        break;
 80120a6:	bf00      	nop
        }

        /* Now apply the new setting to the internal representation.  */

        /* Set the system date.  */
        _fx_system_date =  ((year - FX_BASE_YEAR) << FX_YEAR_SHIFT) |
 80120a8:	68bb      	ldr	r3, [r7, #8]
 80120aa:	f2a3 73bc 	subw	r3, r3, #1980	; 0x7bc
 80120ae:	025a      	lsls	r2, r3, #9
                            (month << FX_MONTH_SHIFT) | day;
 80120b0:	68fb      	ldr	r3, [r7, #12]
 80120b2:	015b      	lsls	r3, r3, #5
        _fx_system_date =  ((year - FX_BASE_YEAR) << FX_YEAR_SHIFT) |
 80120b4:	431a      	orrs	r2, r3
                            (month << FX_MONTH_SHIFT) | day;
 80120b6:	693b      	ldr	r3, [r7, #16]
 80120b8:	4313      	orrs	r3, r2
        _fx_system_date =  ((year - FX_BASE_YEAR) << FX_YEAR_SHIFT) |
 80120ba:	4a0c      	ldr	r2, [pc, #48]	; (80120ec <_fx_system_timer_entry+0x284>)
 80120bc:	6013      	str	r3, [r2, #0]

        /* Set the new system time.  */
        _fx_system_time  =  (hour << FX_HOUR_SHIFT) |
 80120be:	697b      	ldr	r3, [r7, #20]
 80120c0:	02da      	lsls	r2, r3, #11
                            (minute << FX_MINUTE_SHIFT) | (second / 2);
 80120c2:	69bb      	ldr	r3, [r7, #24]
 80120c4:	015b      	lsls	r3, r3, #5
        _fx_system_time  =  (hour << FX_HOUR_SHIFT) |
 80120c6:	431a      	orrs	r2, r3
                            (minute << FX_MINUTE_SHIFT) | (second / 2);
 80120c8:	69fb      	ldr	r3, [r7, #28]
 80120ca:	085b      	lsrs	r3, r3, #1
 80120cc:	4313      	orrs	r3, r2
        _fx_system_time  =  (hour << FX_HOUR_SHIFT) |
 80120ce:	4a06      	ldr	r2, [pc, #24]	; (80120e8 <_fx_system_timer_entry+0x280>)
 80120d0:	6013      	str	r3, [r2, #0]
 80120d2:	e002      	b.n	80120da <_fx_system_timer_entry+0x272>
                        return;             /* Skip updating date/time!  */
 80120d4:	bf00      	nop
 80120d6:	e000      	b.n	80120da <_fx_system_timer_entry+0x272>
                                return;
 80120d8:	bf00      	nop
    }
}
 80120da:	3724      	adds	r7, #36	; 0x24
 80120dc:	46bd      	mov	sp, r7
 80120de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120e2:	4770      	bx	lr
 80120e4:	46585359 	.word	0x46585359
 80120e8:	200151c0 	.word	0x200151c0
 80120ec:	200151bc 	.word	0x200151bc
 80120f0:	88888889 	.word	0x88888889

080120f4 <_fx_utility_16_unsigned_read>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_16_unsigned_read(UCHAR *source_ptr)
{
 80120f4:	b480      	push	{r7}
 80120f6:	b085      	sub	sp, #20
 80120f8:	af00      	add	r7, sp, #0
 80120fa:	6078      	str	r0, [r7, #4]

UINT value;

    /* Pickup the UINT from the destination with endian-awareness.  */
    value =  ((((UINT)*(source_ptr + 1)) & 0xFF) << 8) |
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	3301      	adds	r3, #1
 8012100:	781b      	ldrb	r3, [r3, #0]
 8012102:	021b      	lsls	r3, r3, #8
              ((UINT)*(source_ptr) & 0xFF);
 8012104:	687a      	ldr	r2, [r7, #4]
 8012106:	7812      	ldrb	r2, [r2, #0]
    value =  ((((UINT)*(source_ptr + 1)) & 0xFF) << 8) |
 8012108:	4313      	orrs	r3, r2
 801210a:	60fb      	str	r3, [r7, #12]

    /* Return value to caller.  */
    return(value);
 801210c:	68fb      	ldr	r3, [r7, #12]
}
 801210e:	4618      	mov	r0, r3
 8012110:	3714      	adds	r7, #20
 8012112:	46bd      	mov	sp, r7
 8012114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012118:	4770      	bx	lr

0801211a <_fx_utility_16_unsigned_write>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _fx_utility_16_unsigned_write(UCHAR *dest_ptr, UINT value)
{
 801211a:	b480      	push	{r7}
 801211c:	b083      	sub	sp, #12
 801211e:	af00      	add	r7, sp, #0
 8012120:	6078      	str	r0, [r7, #4]
 8012122:	6039      	str	r1, [r7, #0]

    /* Store the UINT into the destination with endian-awareness.  */
    *(dest_ptr) =       (UCHAR)(value & 0xFF);
 8012124:	683b      	ldr	r3, [r7, #0]
 8012126:	b2da      	uxtb	r2, r3
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	701a      	strb	r2, [r3, #0]
    *(dest_ptr + 1) =   (UCHAR)((value >> 8) & 0xFF);
 801212c:	683b      	ldr	r3, [r7, #0]
 801212e:	0a1a      	lsrs	r2, r3, #8
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	3301      	adds	r3, #1
 8012134:	b2d2      	uxtb	r2, r2
 8012136:	701a      	strb	r2, [r3, #0]
}
 8012138:	bf00      	nop
 801213a:	370c      	adds	r7, #12
 801213c:	46bd      	mov	sp, r7
 801213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012142:	4770      	bx	lr

08012144 <_fx_utility_32_unsigned_read>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
ULONG  _fx_utility_32_unsigned_read(UCHAR *source_ptr)
{
 8012144:	b480      	push	{r7}
 8012146:	b085      	sub	sp, #20
 8012148:	af00      	add	r7, sp, #0
 801214a:	6078      	str	r0, [r7, #4]

ULONG value;

    /* Pickup the UINT from the destination with endian-awareness.  */
    value =  ((((ULONG) *(source_ptr+3)) & 0xFF) << 24) |
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	3303      	adds	r3, #3
 8012150:	781b      	ldrb	r3, [r3, #0]
 8012152:	061a      	lsls	r2, r3, #24
             ((((ULONG) *(source_ptr+2)) & 0xFF) << 16) |
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	3302      	adds	r3, #2
 8012158:	781b      	ldrb	r3, [r3, #0]
 801215a:	041b      	lsls	r3, r3, #16
    value =  ((((ULONG) *(source_ptr+3)) & 0xFF) << 24) |
 801215c:	431a      	orrs	r2, r3
             ((((ULONG) *(source_ptr+1)) & 0xFF) << 8)  |
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	3301      	adds	r3, #1
 8012162:	781b      	ldrb	r3, [r3, #0]
 8012164:	021b      	lsls	r3, r3, #8
             ((((ULONG) *(source_ptr+2)) & 0xFF) << 16) |
 8012166:	4313      	orrs	r3, r2
              (((ULONG) *(source_ptr)) & 0xFF);
 8012168:	687a      	ldr	r2, [r7, #4]
 801216a:	7812      	ldrb	r2, [r2, #0]
    value =  ((((ULONG) *(source_ptr+3)) & 0xFF) << 24) |
 801216c:	4313      	orrs	r3, r2
 801216e:	60fb      	str	r3, [r7, #12]

    /* Return value to caller.  */
    return(value);
 8012170:	68fb      	ldr	r3, [r7, #12]
}
 8012172:	4618      	mov	r0, r3
 8012174:	3714      	adds	r7, #20
 8012176:	46bd      	mov	sp, r7
 8012178:	f85d 7b04 	ldr.w	r7, [sp], #4
 801217c:	4770      	bx	lr

0801217e <_fx_utility_32_unsigned_write>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _fx_utility_32_unsigned_write(UCHAR *dest_ptr, ULONG value)
{
 801217e:	b480      	push	{r7}
 8012180:	b083      	sub	sp, #12
 8012182:	af00      	add	r7, sp, #0
 8012184:	6078      	str	r0, [r7, #4]
 8012186:	6039      	str	r1, [r7, #0]

    /* Store the UINT into the destination with endian-awareness.  */
    *(dest_ptr) =       (UCHAR)(value & 0xFF);
 8012188:	683b      	ldr	r3, [r7, #0]
 801218a:	b2da      	uxtb	r2, r3
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	701a      	strb	r2, [r3, #0]
    *(dest_ptr + 1) =   (UCHAR)((value >> 8) & 0xFF);
 8012190:	683b      	ldr	r3, [r7, #0]
 8012192:	0a1a      	lsrs	r2, r3, #8
 8012194:	687b      	ldr	r3, [r7, #4]
 8012196:	3301      	adds	r3, #1
 8012198:	b2d2      	uxtb	r2, r2
 801219a:	701a      	strb	r2, [r3, #0]
    *(dest_ptr + 2) =   (UCHAR)((value >> 16) & 0xFF);
 801219c:	683b      	ldr	r3, [r7, #0]
 801219e:	0c1a      	lsrs	r2, r3, #16
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	3302      	adds	r3, #2
 80121a4:	b2d2      	uxtb	r2, r2
 80121a6:	701a      	strb	r2, [r3, #0]
    *(dest_ptr + 3) =   (UCHAR)((value >> 24) & 0xFF);
 80121a8:	683b      	ldr	r3, [r7, #0]
 80121aa:	0e1a      	lsrs	r2, r3, #24
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	3303      	adds	r3, #3
 80121b0:	b2d2      	uxtb	r2, r2
 80121b2:	701a      	strb	r2, [r3, #0]
}
 80121b4:	bf00      	nop
 80121b6:	370c      	adds	r7, #12
 80121b8:	46bd      	mov	sp, r7
 80121ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121be:	4770      	bx	lr

080121c0 <_fx_utility_FAT_entry_read>:
/*                                            fixed compiler warning,     */
/*                                            resulting in version 6.2.0  */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_FAT_entry_read(FX_MEDIA *media_ptr, ULONG cluster, ULONG *entry_ptr)
{
 80121c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80121c4:	b098      	sub	sp, #96	; 0x60
 80121c6:	af04      	add	r7, sp, #16
 80121c8:	61f8      	str	r0, [r7, #28]
 80121ca:	61b9      	str	r1, [r7, #24]
 80121cc:	617a      	str	r2, [r7, #20]
    }
#endif /* FX_ENABLE_FAULT_TOLERANT */

#ifndef FX_MEDIA_STATISTICS_DISABLE
    /* Increment the number of FAT entry reads and cache hits.  */
    media_ptr -> fx_media_fat_entry_reads++;
 80121ce:	69fb      	ldr	r3, [r7, #28]
 80121d0:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 80121d4:	1c5a      	adds	r2, r3, #1
 80121d6:	69fb      	ldr	r3, [r7, #28]
 80121d8:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
    media_ptr -> fx_media_fat_entry_cache_read_hits++;
 80121dc:	69fb      	ldr	r3, [r7, #28]
 80121de:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 80121e2:	1c5a      	adds	r2, r3, #1
 80121e4:	69fb      	ldr	r3, [r7, #28]
 80121e6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

    /* Extended port-specific processing macro, which is by default defined to white space.  */
    FX_UTILITY_FAT_ENTRY_READ_EXTENSION

    /* Calculate the area of the cache for this FAT entry.  */
    index =  (cluster & FX_FAT_CACHE_HASH_MASK) * FX_FAT_CACHE_DEPTH;
 80121ea:	69bb      	ldr	r3, [r7, #24]
 80121ec:	f003 0303 	and.w	r3, r3, #3
 80121f0:	009b      	lsls	r3, r3, #2
 80121f2:	647b      	str	r3, [r7, #68]	; 0x44

    /* Build a pointer to the cache entry.  */
    cache_entry_ptr =  &media_ptr -> fx_media_fat_cache[index];
 80121f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80121f6:	4613      	mov	r3, r2
 80121f8:	005b      	lsls	r3, r3, #1
 80121fa:	4413      	add	r3, r2
 80121fc:	009b      	lsls	r3, r3, #2
 80121fe:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 8012202:	69fa      	ldr	r2, [r7, #28]
 8012204:	4413      	add	r3, r2
 8012206:	643b      	str	r3, [r7, #64]	; 0x40

#ifndef FX_DISABLE_FAT_ENTRY_REFRESH
    /* Determine if the FAT entry is in the cache - assuming the depth of the FAT cache is
       4 entries.  */
    if ((cache_entry_ptr -> fx_fat_cache_entry_cluster) == cluster)
 8012208:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801220a:	681b      	ldr	r3, [r3, #0]
 801220c:	69ba      	ldr	r2, [r7, #24]
 801220e:	429a      	cmp	r2, r3
 8012210:	d105      	bne.n	801221e <_fx_utility_FAT_entry_read+0x5e>
    {

        /* Yes, return the cached value.  */
        *entry_ptr =  cache_entry_ptr -> fx_fat_cache_entry_value;
 8012212:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012214:	685a      	ldr	r2, [r3, #4]
 8012216:	697b      	ldr	r3, [r7, #20]
 8012218:	601a      	str	r2, [r3, #0]

        /* Don't move anything since we found the entry.  */

        /* Return a successful status.  */
        return(FX_SUCCESS);
 801221a:	2300      	movs	r3, #0
 801221c:	e1f4      	b.n	8012608 <_fx_utility_FAT_entry_read+0x448>
    }
    else if (((cache_entry_ptr + 1) -> fx_fat_cache_entry_cluster) == cluster)
 801221e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012220:	330c      	adds	r3, #12
 8012222:	681b      	ldr	r3, [r3, #0]
 8012224:	69ba      	ldr	r2, [r7, #24]
 8012226:	429a      	cmp	r2, r3
 8012228:	d11d      	bne.n	8012266 <_fx_utility_FAT_entry_read+0xa6>
    {

        /* Yes, return the cached value.  */
        *entry_ptr =  (cache_entry_ptr + 1) -> fx_fat_cache_entry_value;
 801222a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801222c:	330c      	adds	r3, #12
 801222e:	685a      	ldr	r2, [r3, #4]
 8012230:	697b      	ldr	r3, [r7, #20]
 8012232:	601a      	str	r2, [r3, #0]

        /* Just swap the first and second entry.  */
        temp_cache_entry =        *(cache_entry_ptr);
 8012234:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012236:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801223a:	ca07      	ldmia	r2, {r0, r1, r2}
 801223c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        *(cache_entry_ptr) =      *(cache_entry_ptr + 1);
 8012240:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012242:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012244:	4614      	mov	r4, r2
 8012246:	330c      	adds	r3, #12
 8012248:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801224c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        *(cache_entry_ptr + 1) =  temp_cache_entry;
 8012250:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012252:	330c      	adds	r3, #12
 8012254:	461c      	mov	r4, r3
 8012256:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801225a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801225e:	e884 0007 	stmia.w	r4, {r0, r1, r2}

        /* Return a successful status.  */
        return(FX_SUCCESS);
 8012262:	2300      	movs	r3, #0
 8012264:	e1d0      	b.n	8012608 <_fx_utility_FAT_entry_read+0x448>
    }
    else if (((cache_entry_ptr + 2) -> fx_fat_cache_entry_cluster) == cluster)
 8012266:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012268:	3318      	adds	r3, #24
 801226a:	681b      	ldr	r3, [r3, #0]
 801226c:	69ba      	ldr	r2, [r7, #24]
 801226e:	429a      	cmp	r2, r3
 8012270:	d127      	bne.n	80122c2 <_fx_utility_FAT_entry_read+0x102>
    {

        /* Yes, return the cached value.  */
        *entry_ptr =  (cache_entry_ptr + 2) -> fx_fat_cache_entry_value;
 8012272:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012274:	3318      	adds	r3, #24
 8012276:	685a      	ldr	r2, [r3, #4]
 8012278:	697b      	ldr	r3, [r7, #20]
 801227a:	601a      	str	r2, [r3, #0]

        /* Move the third entry to the top and the first two entries down.  */
        temp_cache_entry =        *(cache_entry_ptr);
 801227c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801227e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012282:	ca07      	ldmia	r2, {r0, r1, r2}
 8012284:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        *(cache_entry_ptr) =      *(cache_entry_ptr + 2);
 8012288:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801228a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801228c:	4614      	mov	r4, r2
 801228e:	3318      	adds	r3, #24
 8012290:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012294:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        *(cache_entry_ptr + 2) =  *(cache_entry_ptr + 1);
 8012298:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801229a:	f103 0218 	add.w	r2, r3, #24
 801229e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80122a0:	4614      	mov	r4, r2
 80122a2:	330c      	adds	r3, #12
 80122a4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80122a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        *(cache_entry_ptr + 1) =  temp_cache_entry;
 80122ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80122ae:	330c      	adds	r3, #12
 80122b0:	461c      	mov	r4, r3
 80122b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80122b6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80122ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}

        /* Return a successful status.  */
        return(FX_SUCCESS);
 80122be:	2300      	movs	r3, #0
 80122c0:	e1a2      	b.n	8012608 <_fx_utility_FAT_entry_read+0x448>
    }
    else if (((cache_entry_ptr + 3) -> fx_fat_cache_entry_cluster) == cluster)
 80122c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80122c4:	3324      	adds	r3, #36	; 0x24
 80122c6:	681b      	ldr	r3, [r3, #0]
 80122c8:	69ba      	ldr	r2, [r7, #24]
 80122ca:	429a      	cmp	r2, r3
 80122cc:	d131      	bne.n	8012332 <_fx_utility_FAT_entry_read+0x172>
    {

        /* Yes, return the cached value.  */
        *entry_ptr =  (cache_entry_ptr + 3) -> fx_fat_cache_entry_value;
 80122ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80122d0:	3324      	adds	r3, #36	; 0x24
 80122d2:	685a      	ldr	r2, [r3, #4]
 80122d4:	697b      	ldr	r3, [r7, #20]
 80122d6:	601a      	str	r2, [r3, #0]

        /* Move the last entry to the top and the first three entries down.  */
        temp_cache_entry =        *(cache_entry_ptr);
 80122d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80122da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80122de:	ca07      	ldmia	r2, {r0, r1, r2}
 80122e0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        *(cache_entry_ptr) =      *(cache_entry_ptr + 3);
 80122e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80122e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80122e8:	4614      	mov	r4, r2
 80122ea:	3324      	adds	r3, #36	; 0x24
 80122ec:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80122f0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        *(cache_entry_ptr + 3) =  *(cache_entry_ptr + 2);
 80122f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80122f6:	f103 0224 	add.w	r2, r3, #36	; 0x24
 80122fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80122fc:	4614      	mov	r4, r2
 80122fe:	3318      	adds	r3, #24
 8012300:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012304:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        *(cache_entry_ptr + 2) =  *(cache_entry_ptr + 1);
 8012308:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801230a:	f103 0218 	add.w	r2, r3, #24
 801230e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012310:	4614      	mov	r4, r2
 8012312:	330c      	adds	r3, #12
 8012314:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012318:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        *(cache_entry_ptr + 1) =  temp_cache_entry;
 801231c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801231e:	330c      	adds	r3, #12
 8012320:	461c      	mov	r4, r3
 8012322:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012326:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801232a:	e884 0007 	stmia.w	r4, {r0, r1, r2}

        /* Return a successful status.  */
        return(FX_SUCCESS);
 801232e:	2300      	movs	r3, #0
 8012330:	e16a      	b.n	8012608 <_fx_utility_FAT_entry_read+0x448>
    }
#endif /* FX_DISABLE_FAT_ENTRY_REFRESH */

    /* Determine if the oldest entry was modified, i.e. whether or not it is
       dirty.  */
    if (media_ptr -> fx_media_fat_cache[index + 3].fx_fat_cache_entry_dirty)
 8012332:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012334:	1cda      	adds	r2, r3, #3
 8012336:	69f9      	ldr	r1, [r7, #28]
 8012338:	4613      	mov	r3, r2
 801233a:	005b      	lsls	r3, r3, #1
 801233c:	4413      	add	r3, r2
 801233e:	009b      	lsls	r3, r3, #2
 8012340:	440b      	add	r3, r1
 8012342:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 8012346:	681b      	ldr	r3, [r3, #0]
 8012348:	2b00      	cmp	r3, #0
 801234a:	d008      	beq.n	801235e <_fx_utility_FAT_entry_read+0x19e>
    {

        /* Yes, the entry is dirty and needs to be flushed out.  */
        status = _fx_utility_FAT_flush(media_ptr);
 801234c:	69f8      	ldr	r0, [r7, #28]
 801234e:	f000 fa54 	bl	80127fa <_fx_utility_FAT_flush>
 8012352:	63f8      	str	r0, [r7, #60]	; 0x3c

        /* Check for completion status.  */
        if (status != FX_SUCCESS)
 8012354:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012356:	2b00      	cmp	r3, #0
 8012358:	d001      	beq.n	801235e <_fx_utility_FAT_entry_read+0x19e>
        {

            /* Return error status.  */
            return(status);
 801235a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801235c:	e154      	b.n	8012608 <_fx_utility_FAT_entry_read+0x448>
       actually read the FAT entry.  */

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Decrement the number of cache hits.  */
    media_ptr -> fx_media_fat_entry_cache_read_hits--;
 801235e:	69fb      	ldr	r3, [r7, #28]
 8012360:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8012364:	1e5a      	subs	r2, r3, #1
 8012366:	69fb      	ldr	r3, [r7, #28]
 8012368:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

    /* Increment the number of cache misses.  */
    media_ptr -> fx_media_fat_entry_cache_read_misses++;
 801236c:	69fb      	ldr	r3, [r7, #28]
 801236e:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 8012372:	1c5a      	adds	r2, r3, #1
 8012374:	69fb      	ldr	r3, [r7, #28]
 8012376:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
#endif

    /* Determine which type of FAT is present.  */
    if (media_ptr -> fx_media_12_bit_FAT)
 801237a:	69fb      	ldr	r3, [r7, #28]
 801237c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801237e:	2b00      	cmp	r3, #0
 8012380:	f000 80a7 	beq.w	80124d2 <_fx_utility_FAT_entry_read+0x312>
    {

        /* Calculate the byte offset to the cluster entry.  */
        byte_offset =  (((ULONG)cluster << 1) + cluster) >> 1;
 8012384:	69bb      	ldr	r3, [r7, #24]
 8012386:	005a      	lsls	r2, r3, #1
 8012388:	69bb      	ldr	r3, [r7, #24]
 801238a:	4413      	add	r3, r2
 801238c:	085b      	lsrs	r3, r3, #1
 801238e:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Calculate the FAT sector the requested FAT entry resides in.  */
        FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8012390:	69fb      	ldr	r3, [r7, #28]
 8012392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012394:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012396:	fbb2 f2f3 	udiv	r2, r2, r3
            (ULONG)media_ptr -> fx_media_reserved_sectors;
 801239a:	69fb      	ldr	r3, [r7, #28]
 801239c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
        FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 801239e:	4413      	add	r3, r2
 80123a0:	637b      	str	r3, [r7, #52]	; 0x34

        /* Read the sector in.  */
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 80123a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80123a4:	2200      	movs	r2, #0
 80123a6:	60bb      	str	r3, [r7, #8]
 80123a8:	60fa      	str	r2, [r7, #12]
                                                  media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 80123aa:	69fb      	ldr	r3, [r7, #28]
 80123ac:	689b      	ldr	r3, [r3, #8]
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 80123ae:	2202      	movs	r2, #2
 80123b0:	9202      	str	r2, [sp, #8]
 80123b2:	2201      	movs	r2, #1
 80123b4:	9201      	str	r2, [sp, #4]
 80123b6:	9300      	str	r3, [sp, #0]
 80123b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80123bc:	69f8      	ldr	r0, [r7, #28]
 80123be:	f001 fb0d 	bl	80139dc <_fx_utility_logical_sector_read>
 80123c2:	63f8      	str	r0, [r7, #60]	; 0x3c

        /* Determine if an error occurred.  */
        if (status != FX_SUCCESS)
 80123c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80123c6:	2b00      	cmp	r3, #0
 80123c8:	d001      	beq.n	80123ce <_fx_utility_FAT_entry_read+0x20e>
        {
            /* Return the error status.  */
            return(status);
 80123ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80123cc:	e11c      	b.n	8012608 <_fx_utility_FAT_entry_read+0x448>
        }

        /* Now calculate the byte offset into this FAT sector.  */
        byte_offset =  byte_offset -
            ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 80123ce:	69fb      	ldr	r3, [r7, #28]
 80123d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80123d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80123d4:	1ad3      	subs	r3, r2, r3
             media_ptr -> fx_media_bytes_per_sector);
 80123d6:	69fa      	ldr	r2, [r7, #28]
 80123d8:	6a92      	ldr	r2, [r2, #40]	; 0x28
            ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 80123da:	fb02 f303 	mul.w	r3, r2, r3
        byte_offset =  byte_offset -
 80123de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80123e0:	1ad3      	subs	r3, r2, r3
 80123e2:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Setup a pointer into the buffer.  */
        FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT)byte_offset;
 80123e4:	69fb      	ldr	r3, [r7, #28]
 80123e6:	689a      	ldr	r2, [r3, #8]
 80123e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123ea:	4413      	add	r3, r2
 80123ec:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Determine if the cluster entry is odd or even.  */
        if (cluster & 1)
 80123ee:	69bb      	ldr	r3, [r7, #24]
 80123f0:	f003 0301 	and.w	r3, r3, #1
 80123f4:	2b00      	cmp	r3, #0
 80123f6:	d030      	beq.n	801245a <_fx_utility_FAT_entry_read+0x29a>
        {

            /* Odd cluster number.  */

            /* Pickup the lower nibble of the FAT entry.  */
            entry =  (((UINT)*FAT_ptr) & 0xF0) >> 4;
 80123f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80123fa:	781b      	ldrb	r3, [r3, #0]
 80123fc:	091b      	lsrs	r3, r3, #4
 80123fe:	b2db      	uxtb	r3, r3
 8012400:	64bb      	str	r3, [r7, #72]	; 0x48

            /* Move to the next byte of the FAT entry.  */
            FAT_ptr++;
 8012402:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012404:	3301      	adds	r3, #1
 8012406:	64fb      	str	r3, [r7, #76]	; 0x4c

            /* Determine if we are now past the end of the FAT buffer in memory.  */
            if (byte_offset == (ULONG)(media_ptr -> fx_media_bytes_per_sector - 1))
 8012408:	69fb      	ldr	r3, [r7, #28]
 801240a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801240c:	3b01      	subs	r3, #1
 801240e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012410:	429a      	cmp	r2, r3
 8012412:	d11b      	bne.n	801244c <_fx_utility_FAT_entry_read+0x28c>
            {

                /* Yes, we need to read the next sector.  */
                FAT_sector++;
 8012414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012416:	3301      	adds	r3, #1
 8012418:	637b      	str	r3, [r7, #52]	; 0x34
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 801241a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801241c:	2200      	movs	r2, #0
 801241e:	603b      	str	r3, [r7, #0]
 8012420:	607a      	str	r2, [r7, #4]
                                                          media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 8012422:	69fb      	ldr	r3, [r7, #28]
 8012424:	689b      	ldr	r3, [r3, #8]
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8012426:	2202      	movs	r2, #2
 8012428:	9202      	str	r2, [sp, #8]
 801242a:	2201      	movs	r2, #1
 801242c:	9201      	str	r2, [sp, #4]
 801242e:	9300      	str	r3, [sp, #0]
 8012430:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012434:	69f8      	ldr	r0, [r7, #28]
 8012436:	f001 fad1 	bl	80139dc <_fx_utility_logical_sector_read>
 801243a:	63f8      	str	r0, [r7, #60]	; 0x3c

                /* Determine if an error occurred.  */
                if (status != FX_SUCCESS)
 801243c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801243e:	2b00      	cmp	r3, #0
 8012440:	d001      	beq.n	8012446 <_fx_utility_FAT_entry_read+0x286>
                {

                    /* Return the error status.  */
                    return(status);
 8012442:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012444:	e0e0      	b.n	8012608 <_fx_utility_FAT_entry_read+0x448>
                }

                /* Setup a pointer into the buffer.  */
                FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer;
 8012446:	69fb      	ldr	r3, [r7, #28]
 8012448:	689b      	ldr	r3, [r3, #8]
 801244a:	64fb      	str	r3, [r7, #76]	; 0x4c
            }

            /* Pickup the upper 8 bits of the FAT entry.  */
            entry =  entry | (((UINT)*FAT_ptr) << 4);
 801244c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801244e:	781b      	ldrb	r3, [r3, #0]
 8012450:	011b      	lsls	r3, r3, #4
 8012452:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012454:	4313      	orrs	r3, r2
 8012456:	64bb      	str	r3, [r7, #72]	; 0x48
 8012458:	e02f      	b.n	80124ba <_fx_utility_FAT_entry_read+0x2fa>
        {

            /* Even cluster number.  */

            /* Pickup the lower byte of the FAT entry.  */
            entry =  (UINT)(((UINT)*FAT_ptr) & 0xFF);
 801245a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801245c:	781b      	ldrb	r3, [r3, #0]
 801245e:	64bb      	str	r3, [r7, #72]	; 0x48

            /* Move to the next nibble of the FAT entry.  */
            FAT_ptr++;
 8012460:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012462:	3301      	adds	r3, #1
 8012464:	64fb      	str	r3, [r7, #76]	; 0x4c

            /* Determine if we are now past the end of the FAT buffer in memory.  */
            if (byte_offset == (ULONG)(media_ptr -> fx_media_bytes_per_sector - 1))
 8012466:	69fb      	ldr	r3, [r7, #28]
 8012468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801246a:	3b01      	subs	r3, #1
 801246c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801246e:	429a      	cmp	r2, r3
 8012470:	d11b      	bne.n	80124aa <_fx_utility_FAT_entry_read+0x2ea>
            {

                /* Yes, we need to read the next sector.  */
                FAT_sector++;
 8012472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012474:	3301      	adds	r3, #1
 8012476:	637b      	str	r3, [r7, #52]	; 0x34
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8012478:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801247a:	2200      	movs	r2, #0
 801247c:	469a      	mov	sl, r3
 801247e:	4693      	mov	fp, r2
                                                          media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 8012480:	69fb      	ldr	r3, [r7, #28]
 8012482:	689b      	ldr	r3, [r3, #8]
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8012484:	2202      	movs	r2, #2
 8012486:	9202      	str	r2, [sp, #8]
 8012488:	2201      	movs	r2, #1
 801248a:	9201      	str	r2, [sp, #4]
 801248c:	9300      	str	r3, [sp, #0]
 801248e:	4652      	mov	r2, sl
 8012490:	465b      	mov	r3, fp
 8012492:	69f8      	ldr	r0, [r7, #28]
 8012494:	f001 faa2 	bl	80139dc <_fx_utility_logical_sector_read>
 8012498:	63f8      	str	r0, [r7, #60]	; 0x3c

                /* Determine if an error occurred.  */
                if (status != FX_SUCCESS)
 801249a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801249c:	2b00      	cmp	r3, #0
 801249e:	d001      	beq.n	80124a4 <_fx_utility_FAT_entry_read+0x2e4>
                {
                    return(status);
 80124a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80124a2:	e0b1      	b.n	8012608 <_fx_utility_FAT_entry_read+0x448>
                }

                /* Setup a pointer into the buffer.  */
                FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer;
 80124a4:	69fb      	ldr	r3, [r7, #28]
 80124a6:	689b      	ldr	r3, [r3, #8]
 80124a8:	64fb      	str	r3, [r7, #76]	; 0x4c
            }

            /* Pickup the upper 4 bits of the FAT entry.  */
            entry =  entry | ((((UINT)*FAT_ptr) & 0x0F) << 8);
 80124aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80124ac:	781b      	ldrb	r3, [r3, #0]
 80124ae:	021b      	lsls	r3, r3, #8
 80124b0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80124b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80124b6:	4313      	orrs	r3, r2
 80124b8:	64bb      	str	r3, [r7, #72]	; 0x48
        }

        /* Determine if we need to do sign extension on the 12-bit eof value.  */
        if (entry >= FX_MAX_12BIT_CLUST)
 80124ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80124bc:	f5b3 6f7f 	cmp.w	r3, #4080	; 0xff0
 80124c0:	d303      	bcc.n	80124ca <_fx_utility_FAT_entry_read+0x30a>
        {

            /* Yes, we need to sign extend.  */
            entry =  entry | FX_SIGN_EXTEND;
 80124c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80124c4:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 80124c8:	64bb      	str	r3, [r7, #72]	; 0x48
        }

        *entry_ptr =  entry;
 80124ca:	697b      	ldr	r3, [r7, #20]
 80124cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80124ce:	601a      	str	r2, [r3, #0]
 80124d0:	e078      	b.n	80125c4 <_fx_utility_FAT_entry_read+0x404>

    /* Check for a 16-bit FAT.  */
#ifdef FX_ENABLE_EXFAT
    else if (FX_FAT16  == media_ptr -> fx_media_FAT_type)
#else
    else if (!media_ptr -> fx_media_32_bit_FAT)
 80124d2:	69fb      	ldr	r3, [r7, #28]
 80124d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80124d6:	2b00      	cmp	r3, #0
 80124d8:	d139      	bne.n	801254e <_fx_utility_FAT_entry_read+0x38e>
    {

        /* 16-bit FAT is present.  */

        /* Calculate the byte offset to the cluster entry.  */
        byte_offset =  (((ULONG)cluster) * 2);
 80124da:	69bb      	ldr	r3, [r7, #24]
 80124dc:	005b      	lsls	r3, r3, #1
 80124de:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Calculate the FAT sector the requested FAT entry resides in.  */
        FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 80124e0:	69fb      	ldr	r3, [r7, #28]
 80124e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80124e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80124e6:	fbb2 f2f3 	udiv	r2, r2, r3
            (ULONG)media_ptr -> fx_media_reserved_sectors;
 80124ea:	69fb      	ldr	r3, [r7, #28]
 80124ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
        FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 80124ee:	4413      	add	r3, r2
 80124f0:	637b      	str	r3, [r7, #52]	; 0x34

        /* Read the FAT sector.  */
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 80124f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80124f4:	2200      	movs	r2, #0
 80124f6:	4698      	mov	r8, r3
 80124f8:	4691      	mov	r9, r2
                                                  media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 80124fa:	69fb      	ldr	r3, [r7, #28]
 80124fc:	689b      	ldr	r3, [r3, #8]
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 80124fe:	2202      	movs	r2, #2
 8012500:	9202      	str	r2, [sp, #8]
 8012502:	2201      	movs	r2, #1
 8012504:	9201      	str	r2, [sp, #4]
 8012506:	9300      	str	r3, [sp, #0]
 8012508:	4642      	mov	r2, r8
 801250a:	464b      	mov	r3, r9
 801250c:	69f8      	ldr	r0, [r7, #28]
 801250e:	f001 fa65 	bl	80139dc <_fx_utility_logical_sector_read>
 8012512:	63f8      	str	r0, [r7, #60]	; 0x3c

        /* Determine if an error occurred.  */
        if (status != FX_SUCCESS)
 8012514:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012516:	2b00      	cmp	r3, #0
 8012518:	d001      	beq.n	801251e <_fx_utility_FAT_entry_read+0x35e>
        {

            /* Return the error code.  */
            return(status);
 801251a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801251c:	e074      	b.n	8012608 <_fx_utility_FAT_entry_read+0x448>
        }

        /* Now calculate the byte offset into this FAT sector.  */
        byte_offset =  byte_offset -
            ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 801251e:	69fb      	ldr	r3, [r7, #28]
 8012520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012522:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012524:	1ad3      	subs	r3, r2, r3
             media_ptr -> fx_media_bytes_per_sector);
 8012526:	69fa      	ldr	r2, [r7, #28]
 8012528:	6a92      	ldr	r2, [r2, #40]	; 0x28
            ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 801252a:	fb02 f303 	mul.w	r3, r2, r3
        byte_offset =  byte_offset -
 801252e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012530:	1ad3      	subs	r3, r2, r3
 8012532:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Setup a pointer into the buffer.  */
        FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT)byte_offset;
 8012534:	69fb      	ldr	r3, [r7, #28]
 8012536:	689a      	ldr	r2, [r3, #8]
 8012538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801253a:	4413      	add	r3, r2
 801253c:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Pickup the FAT entry.  */
        entry =  _fx_utility_16_unsigned_read(FAT_ptr);
 801253e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8012540:	f7ff fdd8 	bl	80120f4 <_fx_utility_16_unsigned_read>
 8012544:	64b8      	str	r0, [r7, #72]	; 0x48

        *entry_ptr =  entry;
 8012546:	697b      	ldr	r3, [r7, #20]
 8012548:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801254a:	601a      	str	r2, [r3, #0]
 801254c:	e03a      	b.n	80125c4 <_fx_utility_FAT_entry_read+0x404>
    else
#endif /* FX_ENABLE_EXFAT */
    {

        /* Otherwise, a 32 bit FAT present.  */
        byte_offset =  (((ULONG)cluster) * 4);
 801254e:	69bb      	ldr	r3, [r7, #24]
 8012550:	009b      	lsls	r3, r3, #2
 8012552:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Calculate the FAT sector the requested FAT entry resides in.  */
        FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8012554:	69fb      	ldr	r3, [r7, #28]
 8012556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012558:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801255a:	fbb2 f2f3 	udiv	r2, r2, r3
            (ULONG)media_ptr -> fx_media_reserved_sectors;
 801255e:	69fb      	ldr	r3, [r7, #28]
 8012560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
        FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8012562:	4413      	add	r3, r2
 8012564:	637b      	str	r3, [r7, #52]	; 0x34

        /* Calculate the byte offset to the FAT entry.  */
        byte_offset = (byte_offset % media_ptr -> fx_media_bytes_per_sector);
 8012566:	69fb      	ldr	r3, [r7, #28]
 8012568:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801256a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801256c:	fbb3 f1f2 	udiv	r1, r3, r2
 8012570:	fb01 f202 	mul.w	r2, r1, r2
 8012574:	1a9b      	subs	r3, r3, r2
 8012576:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Read the appropriate FAT sector.  */
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8012578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801257a:	2200      	movs	r2, #0
 801257c:	461c      	mov	r4, r3
 801257e:	4615      	mov	r5, r2
                                                  media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 8012580:	69fb      	ldr	r3, [r7, #28]
 8012582:	689b      	ldr	r3, [r3, #8]
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8012584:	2202      	movs	r2, #2
 8012586:	9202      	str	r2, [sp, #8]
 8012588:	2201      	movs	r2, #1
 801258a:	9201      	str	r2, [sp, #4]
 801258c:	9300      	str	r3, [sp, #0]
 801258e:	4622      	mov	r2, r4
 8012590:	462b      	mov	r3, r5
 8012592:	69f8      	ldr	r0, [r7, #28]
 8012594:	f001 fa22 	bl	80139dc <_fx_utility_logical_sector_read>
 8012598:	63f8      	str	r0, [r7, #60]	; 0x3c

        /* Determine if an error occurred.  */
        if (status != FX_SUCCESS)
 801259a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801259c:	2b00      	cmp	r3, #0
 801259e:	d001      	beq.n	80125a4 <_fx_utility_FAT_entry_read+0x3e4>
        {

            /* Return the error code.  */
            return(status);
 80125a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80125a2:	e031      	b.n	8012608 <_fx_utility_FAT_entry_read+0x448>
        }

        /* Setup a pointer into the buffer.  */
        FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (ULONG)byte_offset;
 80125a4:	69fb      	ldr	r3, [r7, #28]
 80125a6:	689a      	ldr	r2, [r3, #8]
 80125a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125aa:	4413      	add	r3, r2
 80125ac:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Pickup the FAT entry.  */
        entry32 =  _fx_utility_32_unsigned_read(FAT_ptr);
 80125ae:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80125b0:	f7ff fdc8 	bl	8012144 <_fx_utility_32_unsigned_read>
 80125b4:	6338      	str	r0, [r7, #48]	; 0x30
        if (media_ptr -> fx_media_FAT_type == FX_FAT32)
        {
#endif /* FX_ENABLE_EXFAT */

            /* Clear upper nibble.  */
            entry32 = entry32 & 0x0FFFFFFF;
 80125b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125b8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80125bc:	633b      	str	r3, [r7, #48]	; 0x30
#ifdef FX_ENABLE_EXFAT
        }
#endif /* FX_ENABLE_EXFAT */

        *entry_ptr =  entry32;
 80125be:	697b      	ldr	r3, [r7, #20]
 80125c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80125c2:	601a      	str	r2, [r3, #0]
    }

    /* Move all the cache entries down so the oldest is at the bottom.  */
    *(cache_entry_ptr + 3) =  *(cache_entry_ptr + 2);
 80125c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80125c6:	f103 0224 	add.w	r2, r3, #36	; 0x24
 80125ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80125cc:	4614      	mov	r4, r2
 80125ce:	3318      	adds	r3, #24
 80125d0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80125d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    *(cache_entry_ptr + 2) =  *(cache_entry_ptr + 1);
 80125d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80125da:	f103 0218 	add.w	r2, r3, #24
 80125de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80125e0:	4614      	mov	r4, r2
 80125e2:	330c      	adds	r3, #12
 80125e4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80125e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    *(cache_entry_ptr + 1) =  *(cache_entry_ptr);
 80125ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80125ee:	330c      	adds	r3, #12
 80125f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80125f2:	ca07      	ldmia	r2, {r0, r1, r2}
 80125f4:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    /* Setup the new FAT entry in the cache.  */
    cache_entry_ptr -> fx_fat_cache_entry_cluster =  cluster;
 80125f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80125fa:	69ba      	ldr	r2, [r7, #24]
 80125fc:	601a      	str	r2, [r3, #0]
    cache_entry_ptr -> fx_fat_cache_entry_value   =  *entry_ptr;
 80125fe:	697b      	ldr	r3, [r7, #20]
 8012600:	681a      	ldr	r2, [r3, #0]
 8012602:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012604:	605a      	str	r2, [r3, #4]

    /* Return success to the caller.  */
    return(FX_SUCCESS);
 8012606:	2300      	movs	r3, #0
}
 8012608:	4618      	mov	r0, r3
 801260a:	3750      	adds	r7, #80	; 0x50
 801260c:	46bd      	mov	sp, r7
 801260e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08012612 <_fx_utility_FAT_entry_write>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_FAT_entry_write(FX_MEDIA *media_ptr, ULONG cluster, ULONG next_cluster)
{
 8012612:	b590      	push	{r4, r7, lr}
 8012614:	b089      	sub	sp, #36	; 0x24
 8012616:	af00      	add	r7, sp, #0
 8012618:	60f8      	str	r0, [r7, #12]
 801261a:	60b9      	str	r1, [r7, #8]
 801261c:	607a      	str	r2, [r7, #4]
    }
#endif /* FX_ENABLE_FAULT_TOLERANT */

#ifndef FX_MEDIA_STATISTICS_DISABLE
    /* Increment the number of FAT entry writes and cache hits.  */
    media_ptr -> fx_media_fat_entry_writes++;
 801261e:	68fb      	ldr	r3, [r7, #12]
 8012620:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 8012624:	1c5a      	adds	r2, r3, #1
 8012626:	68fb      	ldr	r3, [r7, #12]
 8012628:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    media_ptr -> fx_media_fat_entry_cache_write_hits++;
 801262c:	68fb      	ldr	r3, [r7, #12]
 801262e:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 8012632:	1c5a      	adds	r2, r3, #1
 8012634:	68fb      	ldr	r3, [r7, #12]
 8012636:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188

    /* Extended port-specific processing macro, which is by default defined to white space.  */
    FX_UTILITY_FAT_ENTRY_WRITE_EXTENSION

    /* Calculate the area of the cache for this FAT entry.  */
    index =  (cluster & FX_FAT_CACHE_HASH_MASK) * FX_FAT_CACHE_DEPTH;
 801263a:	68bb      	ldr	r3, [r7, #8]
 801263c:	f003 0303 	and.w	r3, r3, #3
 8012640:	009b      	lsls	r3, r3, #2
 8012642:	61bb      	str	r3, [r7, #24]

    /* Build a pointer to the cache entry.  */
    cache_entry_ptr =  &media_ptr -> fx_media_fat_cache[index];
 8012644:	69ba      	ldr	r2, [r7, #24]
 8012646:	4613      	mov	r3, r2
 8012648:	005b      	lsls	r3, r3, #1
 801264a:	4413      	add	r3, r2
 801264c:	009b      	lsls	r3, r3, #2
 801264e:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 8012652:	68fa      	ldr	r2, [r7, #12]
 8012654:	4413      	add	r3, r2
 8012656:	617b      	str	r3, [r7, #20]

    /* First search for the entry in the FAT entry cache.  */
    for (i = 0; i < FX_FAT_CACHE_DEPTH; i++)
 8012658:	2300      	movs	r3, #0
 801265a:	61fb      	str	r3, [r7, #28]
 801265c:	e051      	b.n	8012702 <_fx_utility_FAT_entry_write+0xf0>
    {

        /* See if the entry matches the write request.  */
        if (((cache_entry_ptr + i) -> fx_fat_cache_entry_cluster) == cluster)
 801265e:	69fa      	ldr	r2, [r7, #28]
 8012660:	4613      	mov	r3, r2
 8012662:	005b      	lsls	r3, r3, #1
 8012664:	4413      	add	r3, r2
 8012666:	009b      	lsls	r3, r3, #2
 8012668:	461a      	mov	r2, r3
 801266a:	697b      	ldr	r3, [r7, #20]
 801266c:	4413      	add	r3, r2
 801266e:	681b      	ldr	r3, [r3, #0]
 8012670:	68ba      	ldr	r2, [r7, #8]
 8012672:	429a      	cmp	r2, r3
 8012674:	d142      	bne.n	80126fc <_fx_utility_FAT_entry_write+0xea>
        {

            /* Yes, we have a matching entry.  Save the new information in the FAT
               cache and mark this entry as dirty.  */
            (cache_entry_ptr + i) -> fx_fat_cache_entry_value =     next_cluster;
 8012676:	69fa      	ldr	r2, [r7, #28]
 8012678:	4613      	mov	r3, r2
 801267a:	005b      	lsls	r3, r3, #1
 801267c:	4413      	add	r3, r2
 801267e:	009b      	lsls	r3, r3, #2
 8012680:	461a      	mov	r2, r3
 8012682:	697b      	ldr	r3, [r7, #20]
 8012684:	4413      	add	r3, r2
 8012686:	687a      	ldr	r2, [r7, #4]
 8012688:	605a      	str	r2, [r3, #4]
            (cache_entry_ptr + i) -> fx_fat_cache_entry_dirty =     1;
 801268a:	69fa      	ldr	r2, [r7, #28]
 801268c:	4613      	mov	r3, r2
 801268e:	005b      	lsls	r3, r3, #1
 8012690:	4413      	add	r3, r2
 8012692:	009b      	lsls	r3, r3, #2
 8012694:	461a      	mov	r2, r3
 8012696:	697b      	ldr	r3, [r7, #20]
 8012698:	4413      	add	r3, r2
 801269a:	2201      	movs	r2, #1
 801269c:	609a      	str	r2, [r3, #8]

            /* Determine if the driver has requested notification when data sectors in the media
               become free.  This can be useful to FLASH manager software.  */
            if ((media_ptr -> fx_media_driver_free_sector_update) && (next_cluster == FX_FREE_CLUSTER))
 801269e:	68fb      	ldr	r3, [r7, #12]
 80126a0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80126a4:	2b00      	cmp	r3, #0
 80126a6:	d027      	beq.n	80126f8 <_fx_utility_FAT_entry_write+0xe6>
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	d124      	bne.n	80126f8 <_fx_utility_FAT_entry_write+0xe6>
                   not in use.  */

#ifndef FX_MEDIA_STATISTICS_DISABLE

                /* Increment the number of driver release sectors requests.  */
                media_ptr -> fx_media_driver_release_sectors_requests++;
 80126ae:	68fb      	ldr	r3, [r7, #12]
 80126b0:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 80126b4:	1c5a      	adds	r2, r3, #1
 80126b6:	68fb      	ldr	r3, [r7, #12]
 80126b8:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
#endif

                /* This cluster is being released so inform the driver that the
                   corresponding sectors are now available.  */
                media_ptr -> fx_media_driver_request =          FX_DRIVER_RELEASE_SECTORS;
 80126bc:	68fb      	ldr	r3, [r7, #12]
 80126be:	2206      	movs	r2, #6
 80126c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 80126c4:	68fb      	ldr	r3, [r7, #12]
 80126c6:	2290      	movs	r2, #144	; 0x90
 80126c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                media_ptr -> fx_media_driver_logical_sector =   (media_ptr -> fx_media_data_sector_start +
 80126cc:	68fb      	ldr	r3, [r7, #12]
 80126ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                                                                 ((cluster - FX_FAT_ENTRY_START) * media_ptr -> fx_media_sectors_per_cluster));
 80126d0:	68bb      	ldr	r3, [r7, #8]
 80126d2:	3b02      	subs	r3, #2
 80126d4:	68f9      	ldr	r1, [r7, #12]
 80126d6:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80126d8:	fb01 f303 	mul.w	r3, r1, r3
                media_ptr -> fx_media_driver_logical_sector =   (media_ptr -> fx_media_data_sector_start +
 80126dc:	441a      	add	r2, r3
 80126de:	68fb      	ldr	r3, [r7, #12]
 80126e0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
                media_ptr -> fx_media_driver_sectors =          media_ptr -> fx_media_sectors_per_cluster;
 80126e4:	68fb      	ldr	r3, [r7, #12]
 80126e6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80126e8:	68fb      	ldr	r3, [r7, #12]
 80126ea:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

                /* If trace is enabled, insert this event into the trace buffer.  */
                FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_RELEASE_SECTORS, media_ptr, media_ptr -> fx_media_driver_logical_sector, media_ptr -> fx_media_driver_sectors, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                /* Call the driver.  */
                (media_ptr -> fx_media_driver_entry)(media_ptr);
 80126ee:	68fb      	ldr	r3, [r7, #12]
 80126f0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80126f4:	68f8      	ldr	r0, [r7, #12]
 80126f6:	4798      	blx	r3
            }

            /* Done, return successful status.  */
            return(FX_SUCCESS);
 80126f8:	2300      	movs	r3, #0
 80126fa:	e07a      	b.n	80127f2 <_fx_utility_FAT_entry_write+0x1e0>
    for (i = 0; i < FX_FAT_CACHE_DEPTH; i++)
 80126fc:	69fb      	ldr	r3, [r7, #28]
 80126fe:	3301      	adds	r3, #1
 8012700:	61fb      	str	r3, [r7, #28]
 8012702:	69fb      	ldr	r3, [r7, #28]
 8012704:	2b03      	cmp	r3, #3
 8012706:	d9aa      	bls.n	801265e <_fx_utility_FAT_entry_write+0x4c>
    /* If we reach this point, we know that the FAT write request is not in
       the cache.  */

#ifndef FX_MEDIA_STATISTICS_DISABLE
    /* Decrement the number of cache hits.  */
    media_ptr -> fx_media_fat_entry_cache_write_hits--;
 8012708:	68fb      	ldr	r3, [r7, #12]
 801270a:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 801270e:	1e5a      	subs	r2, r3, #1
 8012710:	68fb      	ldr	r3, [r7, #12]
 8012712:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188

    /* Increment the number of cache misses.  */
    media_ptr -> fx_media_fat_entry_cache_write_misses++;
 8012716:	68fb      	ldr	r3, [r7, #12]
 8012718:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 801271c:	1c5a      	adds	r2, r3, #1
 801271e:	68fb      	ldr	r3, [r7, #12]
 8012720:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
#endif

    /* Determine if the oldest entry is dirty and needs to be flushed.  */
    if (media_ptr -> fx_media_fat_cache[index + 3].fx_fat_cache_entry_dirty == 1)
 8012724:	69bb      	ldr	r3, [r7, #24]
 8012726:	1cda      	adds	r2, r3, #3
 8012728:	68f9      	ldr	r1, [r7, #12]
 801272a:	4613      	mov	r3, r2
 801272c:	005b      	lsls	r3, r3, #1
 801272e:	4413      	add	r3, r2
 8012730:	009b      	lsls	r3, r3, #2
 8012732:	440b      	add	r3, r1
 8012734:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 8012738:	681b      	ldr	r3, [r3, #0]
 801273a:	2b01      	cmp	r3, #1
 801273c:	d108      	bne.n	8012750 <_fx_utility_FAT_entry_write+0x13e>
    {

        /* Flush the dirty entry so it can be used to hold the current
           FAT entry write request.  */
        status = _fx_utility_FAT_flush(media_ptr);
 801273e:	68f8      	ldr	r0, [r7, #12]
 8012740:	f000 f85b 	bl	80127fa <_fx_utility_FAT_flush>
 8012744:	6138      	str	r0, [r7, #16]

        /* Determine if the write was successful.  */
        if (status != FX_SUCCESS)
 8012746:	693b      	ldr	r3, [r7, #16]
 8012748:	2b00      	cmp	r3, #0
 801274a:	d001      	beq.n	8012750 <_fx_utility_FAT_entry_write+0x13e>
        {

            /* No, return error status to caller.  */
            return(status);
 801274c:	693b      	ldr	r3, [r7, #16]
 801274e:	e050      	b.n	80127f2 <_fx_utility_FAT_entry_write+0x1e0>
        }

    }

    /* Move all the cache entries down so the oldest is at the bottom.  */
    *(cache_entry_ptr + 3) =  *(cache_entry_ptr + 2);
 8012750:	697b      	ldr	r3, [r7, #20]
 8012752:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8012756:	697b      	ldr	r3, [r7, #20]
 8012758:	4614      	mov	r4, r2
 801275a:	3318      	adds	r3, #24
 801275c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012760:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    *(cache_entry_ptr + 2) =  *(cache_entry_ptr + 1);
 8012764:	697b      	ldr	r3, [r7, #20]
 8012766:	f103 0218 	add.w	r2, r3, #24
 801276a:	697b      	ldr	r3, [r7, #20]
 801276c:	4614      	mov	r4, r2
 801276e:	330c      	adds	r3, #12
 8012770:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012774:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    *(cache_entry_ptr + 1) =  *(cache_entry_ptr);
 8012778:	697b      	ldr	r3, [r7, #20]
 801277a:	330c      	adds	r3, #12
 801277c:	697a      	ldr	r2, [r7, #20]
 801277e:	ca07      	ldmia	r2, {r0, r1, r2}
 8012780:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    /* Save the current FAT entry write request and mark as dirty.  */
    cache_entry_ptr -> fx_fat_cache_entry_dirty =    1;
 8012784:	697b      	ldr	r3, [r7, #20]
 8012786:	2201      	movs	r2, #1
 8012788:	609a      	str	r2, [r3, #8]
    cache_entry_ptr -> fx_fat_cache_entry_cluster =  cluster;
 801278a:	697b      	ldr	r3, [r7, #20]
 801278c:	68ba      	ldr	r2, [r7, #8]
 801278e:	601a      	str	r2, [r3, #0]
    cache_entry_ptr -> fx_fat_cache_entry_value =    next_cluster;
 8012790:	697b      	ldr	r3, [r7, #20]
 8012792:	687a      	ldr	r2, [r7, #4]
 8012794:	605a      	str	r2, [r3, #4]

    /* Determine if the driver has requested notification when data sectors in the media
       become free.  This can be useful to FLASH manager software.  */
    if ((media_ptr -> fx_media_driver_free_sector_update) && (next_cluster == FX_FREE_CLUSTER))
 8012796:	68fb      	ldr	r3, [r7, #12]
 8012798:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801279c:	2b00      	cmp	r3, #0
 801279e:	d027      	beq.n	80127f0 <_fx_utility_FAT_entry_write+0x1de>
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	d124      	bne.n	80127f0 <_fx_utility_FAT_entry_write+0x1de>
           not in use.  */

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver release sectors requests.  */
        media_ptr -> fx_media_driver_release_sectors_requests++;
 80127a6:	68fb      	ldr	r3, [r7, #12]
 80127a8:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 80127ac:	1c5a      	adds	r2, r3, #1
 80127ae:	68fb      	ldr	r3, [r7, #12]
 80127b0:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
#endif

        /* This cluster is being released so inform the driver that the
              corresponding sectors are now available.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_RELEASE_SECTORS;
 80127b4:	68fb      	ldr	r3, [r7, #12]
 80127b6:	2206      	movs	r2, #6
 80127b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 80127bc:	68fb      	ldr	r3, [r7, #12]
 80127be:	2290      	movs	r2, #144	; 0x90
 80127c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        media_ptr -> fx_media_driver_logical_sector =   (media_ptr -> fx_media_data_sector_start +
 80127c4:	68fb      	ldr	r3, [r7, #12]
 80127c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                                                         ((cluster - FX_FAT_ENTRY_START) * media_ptr -> fx_media_sectors_per_cluster));
 80127c8:	68bb      	ldr	r3, [r7, #8]
 80127ca:	3b02      	subs	r3, #2
 80127cc:	68f9      	ldr	r1, [r7, #12]
 80127ce:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80127d0:	fb01 f303 	mul.w	r3, r1, r3
        media_ptr -> fx_media_driver_logical_sector =   (media_ptr -> fx_media_data_sector_start +
 80127d4:	441a      	add	r2, r3
 80127d6:	68fb      	ldr	r3, [r7, #12]
 80127d8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        media_ptr -> fx_media_driver_sectors =          media_ptr -> fx_media_sectors_per_cluster;
 80127dc:	68fb      	ldr	r3, [r7, #12]
 80127de:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80127e0:	68fb      	ldr	r3, [r7, #12]
 80127e2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_RELEASE_SECTORS, media_ptr, media_ptr -> fx_media_driver_logical_sector, media_ptr -> fx_media_driver_sectors, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Call the driver.  */
        (media_ptr -> fx_media_driver_entry)(media_ptr);
 80127e6:	68fb      	ldr	r3, [r7, #12]
 80127e8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80127ec:	68f8      	ldr	r0, [r7, #12]
 80127ee:	4798      	blx	r3
    }

    /* Return success to caller.  */
    return(FX_SUCCESS);
 80127f0:	2300      	movs	r3, #0
}
 80127f2:	4618      	mov	r0, r3
 80127f4:	3724      	adds	r7, #36	; 0x24
 80127f6:	46bd      	mov	sp, r7
 80127f8:	bd90      	pop	{r4, r7, pc}

080127fa <_fx_utility_FAT_flush>:
/*                                            FAT secondary update map,   */
/*                                            resulting in version 6.1.2  */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_FAT_flush(FX_MEDIA *media_ptr)
{
 80127fa:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80127fe:	b09a      	sub	sp, #104	; 0x68
 8012800:	af04      	add	r7, sp, #16
 8012802:	61f8      	str	r0, [r7, #28]
INT    multi_sector_entry;
ULONG  sector;

#ifndef FX_MEDIA_STATISTICS_DISABLE
    /* Increment the number of cache flush requests.  */
    media_ptr -> fx_media_fat_cache_flushes++;
 8012804:	69fb      	ldr	r3, [r7, #28]
 8012806:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 801280a:	1c5a      	adds	r2, r3, #1
 801280c:	69fb      	ldr	r3, [r7, #28]
 801280e:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
#endif

    /* Loop through the media's FAT cache and flush out dirty entries.  */
    for (index = 0; index < FX_MAX_FAT_CACHE; index++)
 8012812:	2300      	movs	r3, #0
 8012814:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012816:	e337      	b.n	8012e88 <_fx_utility_FAT_flush+0x68e>
    {

        /* Determine if the entry is dirty.  */
        if ((media_ptr -> fx_media_fat_cache[index].fx_fat_cache_entry_dirty) == 0)
 8012818:	69f9      	ldr	r1, [r7, #28]
 801281a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801281c:	4613      	mov	r3, r2
 801281e:	005b      	lsls	r3, r3, #1
 8012820:	4413      	add	r3, r2
 8012822:	009b      	lsls	r3, r3, #2
 8012824:	440b      	add	r3, r1
 8012826:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 801282a:	681b      	ldr	r3, [r3, #0]
 801282c:	2b00      	cmp	r3, #0
 801282e:	f000 8325 	beq.w	8012e7c <_fx_utility_FAT_flush+0x682>

        /* Otherwise, the entry is indeed dirty and must be flushed out.  Process
           relative to the type of FAT that is being used.  */

        /* Pickup the contents of the FAT cache entry.  */
        cluster =       media_ptr -> fx_media_fat_cache[index].fx_fat_cache_entry_cluster;
 8012832:	69f9      	ldr	r1, [r7, #28]
 8012834:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012836:	4613      	mov	r3, r2
 8012838:	005b      	lsls	r3, r3, #1
 801283a:	4413      	add	r3, r2
 801283c:	009b      	lsls	r3, r3, #2
 801283e:	440b      	add	r3, r1
 8012840:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 8012844:	681b      	ldr	r3, [r3, #0]
 8012846:	643b      	str	r3, [r7, #64]	; 0x40

        /* Determine which type of FAT is present.  */
#ifdef FX_ENABLE_EXFAT
        if (media_ptr -> fx_media_FAT_type == FX_FAT12)
#else
        if (media_ptr -> fx_media_12_bit_FAT)
 8012848:	69fb      	ldr	r3, [r7, #28]
 801284a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801284c:	2b00      	cmp	r3, #0
 801284e:	f000 816c 	beq.w	8012b2a <_fx_utility_FAT_flush+0x330>
#endif /* FX_ENABLE_EXFAT */
        {

            /* Calculate the byte offset to the cluster entry.  */
            byte_offset =  (((ULONG)cluster << 1) + cluster) >> 1;
 8012852:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012854:	005a      	lsls	r2, r3, #1
 8012856:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012858:	4413      	add	r3, r2
 801285a:	085b      	lsrs	r3, r3, #1
 801285c:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Calculate the FAT sector the requested FAT entry resides in.  */
            FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 801285e:	69fb      	ldr	r3, [r7, #28]
 8012860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012862:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012864:	fbb2 f2f3 	udiv	r2, r2, r3
                (ULONG)media_ptr -> fx_media_reserved_sectors;
 8012868:	69fb      	ldr	r3, [r7, #28]
 801286a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 801286c:	4413      	add	r3, r2
 801286e:	657b      	str	r3, [r7, #84]	; 0x54

            /* Initialize as not written.  */
            multi_sector_entry = -1;
 8012870:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012874:	647b      	str	r3, [r7, #68]	; 0x44

            for (;;)
            {

                /* Pickup the FAT sector.  */
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8012876:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012878:	2200      	movs	r2, #0
 801287a:	461c      	mov	r4, r3
 801287c:	4615      	mov	r5, r2
                                                          media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 801287e:	69fb      	ldr	r3, [r7, #28]
 8012880:	689a      	ldr	r2, [r3, #8]
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8012882:	2302      	movs	r3, #2
 8012884:	9302      	str	r3, [sp, #8]
 8012886:	2301      	movs	r3, #1
 8012888:	9301      	str	r3, [sp, #4]
 801288a:	9200      	str	r2, [sp, #0]
 801288c:	4622      	mov	r2, r4
 801288e:	462b      	mov	r3, r5
 8012890:	69f8      	ldr	r0, [r7, #28]
 8012892:	f001 f8a3 	bl	80139dc <_fx_utility_logical_sector_read>
 8012896:	63b8      	str	r0, [r7, #56]	; 0x38

                /* Determine if an error occurred.  */
                if (status != FX_SUCCESS)
 8012898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801289a:	2b00      	cmp	r3, #0
 801289c:	d001      	beq.n	80128a2 <_fx_utility_FAT_flush+0xa8>
                {

                    /* Return the error status.  */
                    return(status);
 801289e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128a0:	e2f7      	b.n	8012e92 <_fx_utility_FAT_flush+0x698>
                }

                /* Determine if a mulit-sector FAT update is present.  */
                if (multi_sector_entry != -1)
 80128a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80128a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80128a8:	d037      	beq.n	801291a <_fx_utility_FAT_flush+0x120>

                    /* Yes, store the remaining portion of the new FAT entry in the
                       next FAT sector.  */

                    /* Setup a pointer into the buffer.  */
                    FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer;
 80128aa:	69fb      	ldr	r3, [r7, #28]
 80128ac:	689b      	ldr	r3, [r3, #8]
 80128ae:	62fb      	str	r3, [r7, #44]	; 0x2c

                    /* Pickup the cluster and next cluster.  */
                    cluster = (media_ptr -> fx_media_fat_cache[multi_sector_entry].fx_fat_cache_entry_cluster);
 80128b0:	69f9      	ldr	r1, [r7, #28]
 80128b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80128b4:	4613      	mov	r3, r2
 80128b6:	005b      	lsls	r3, r3, #1
 80128b8:	4413      	add	r3, r2
 80128ba:	009b      	lsls	r3, r3, #2
 80128bc:	440b      	add	r3, r1
 80128be:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 80128c2:	681b      	ldr	r3, [r3, #0]
 80128c4:	643b      	str	r3, [r7, #64]	; 0x40
                    next_cluster = media_ptr -> fx_media_fat_cache[multi_sector_entry].fx_fat_cache_entry_value;
 80128c6:	69f9      	ldr	r1, [r7, #28]
 80128c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80128ca:	4613      	mov	r3, r2
 80128cc:	005b      	lsls	r3, r3, #1
 80128ce:	4413      	add	r3, r2
 80128d0:	009b      	lsls	r3, r3, #2
 80128d2:	440b      	add	r3, r1
 80128d4:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 80128d8:	681b      	ldr	r3, [r3, #0]
 80128da:	62bb      	str	r3, [r7, #40]	; 0x28

                    /* Determine if the cluster entry is odd or even.  */
                    if (cluster & 1)
 80128dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80128de:	f003 0301 	and.w	r3, r3, #1
 80128e2:	2b00      	cmp	r3, #0
 80128e4:	d005      	beq.n	80128f2 <_fx_utility_FAT_flush+0xf8>
                    {

                        /* Store the upper 8 bits of the FAT entry.  */
                        *FAT_ptr =  (UCHAR)((next_cluster >> 4) & 0xFF);
 80128e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128e8:	091b      	lsrs	r3, r3, #4
 80128ea:	b2db      	uxtb	r3, r3
 80128ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80128ee:	7013      	strb	r3, [r2, #0]
 80128f0:	e010      	b.n	8012914 <_fx_utility_FAT_flush+0x11a>
                    }
                    else
                    {

                        /* Store the upper 4 bits of the FAT entry.  */
                        temp =  ((UINT)*FAT_ptr) & 0xF0;
 80128f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128f4:	781b      	ldrb	r3, [r3, #0]
 80128f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80128fa:	627b      	str	r3, [r7, #36]	; 0x24
                        *FAT_ptr =  (UCHAR)(temp | ((next_cluster >> 8) & 0xF));
 80128fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128fe:	b2da      	uxtb	r2, r3
 8012900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012902:	0a1b      	lsrs	r3, r3, #8
 8012904:	b2db      	uxtb	r3, r3
 8012906:	f003 030f 	and.w	r3, r3, #15
 801290a:	b2db      	uxtb	r3, r3
 801290c:	4313      	orrs	r3, r2
 801290e:	b2db      	uxtb	r3, r3
 8012910:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012912:	7013      	strb	r3, [r2, #0]
                    }

                    /* Clear the multi-sector flag.  */
                    multi_sector_entry = -1;
 8012914:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012918:	647b      	str	r3, [r7, #68]	; 0x44
                }

                /* Loop through the remainder of the cache to check for multiple entries
                   within the same FAT sector being written out.  */
                for (i = index; i < FX_MAX_FAT_CACHE; i++)
 801291a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801291c:	653b      	str	r3, [r7, #80]	; 0x50
 801291e:	e0a0      	b.n	8012a62 <_fx_utility_FAT_flush+0x268>
                {

                    /* Is the cache entry dirty?  */
                    if ((media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty) == 0)
 8012920:	69f9      	ldr	r1, [r7, #28]
 8012922:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012924:	4613      	mov	r3, r2
 8012926:	005b      	lsls	r3, r3, #1
 8012928:	4413      	add	r3, r2
 801292a:	009b      	lsls	r3, r3, #2
 801292c:	440b      	add	r3, r1
 801292e:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 8012932:	681b      	ldr	r3, [r3, #0]
 8012934:	2b00      	cmp	r3, #0
 8012936:	f000 808a 	beq.w	8012a4e <_fx_utility_FAT_flush+0x254>
                        /* Not dirty, does not need to be flushed.  */
                        continue;
                    }

                    /* Isolate the cluster.  */
                    cluster = (media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster);
 801293a:	69f9      	ldr	r1, [r7, #28]
 801293c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801293e:	4613      	mov	r3, r2
 8012940:	005b      	lsls	r3, r3, #1
 8012942:	4413      	add	r3, r2
 8012944:	009b      	lsls	r3, r3, #2
 8012946:	440b      	add	r3, r1
 8012948:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 801294c:	681b      	ldr	r3, [r3, #0]
 801294e:	643b      	str	r3, [r7, #64]	; 0x40

                    /* Calculate the byte offset to the cluster entry.  */
                    byte_offset =  (((ULONG)cluster << 1) + cluster) >> 1;
 8012950:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012952:	005a      	lsls	r2, r3, #1
 8012954:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012956:	4413      	add	r3, r2
 8012958:	085b      	lsrs	r3, r3, #1
 801295a:	63fb      	str	r3, [r7, #60]	; 0x3c

                    /* Pickup the sector.  */
                    sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 801295c:	69fb      	ldr	r3, [r7, #28]
 801295e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012960:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012962:	fbb2 f2f3 	udiv	r2, r2, r3
                        (ULONG)media_ptr -> fx_media_reserved_sectors;
 8012966:	69fb      	ldr	r3, [r7, #28]
 8012968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                    sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 801296a:	4413      	add	r3, r2
 801296c:	633b      	str	r3, [r7, #48]	; 0x30

                    /* Is it the current FAT sector?  */
                    if (sector != FAT_sector)
 801296e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012970:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012972:	429a      	cmp	r2, r3
 8012974:	d16d      	bne.n	8012a52 <_fx_utility_FAT_flush+0x258>
                        /* Different FAT sector - not in this pass of the loop.  */
                        continue;
                    }

                    /* Pickup new value for this FAT entry.  */
                    next_cluster =  media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value;
 8012976:	69f9      	ldr	r1, [r7, #28]
 8012978:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801297a:	4613      	mov	r3, r2
 801297c:	005b      	lsls	r3, r3, #1
 801297e:	4413      	add	r3, r2
 8012980:	009b      	lsls	r3, r3, #2
 8012982:	440b      	add	r3, r1
 8012984:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 8012988:	681b      	ldr	r3, [r3, #0]
 801298a:	62bb      	str	r3, [r7, #40]	; 0x28

                    /* Now calculate the byte offset into this FAT sector.  */
                    byte_offset =  byte_offset -
                        ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 801298c:	69fb      	ldr	r3, [r7, #28]
 801298e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012990:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012992:	1ad2      	subs	r2, r2, r3
                         media_ptr -> fx_media_bytes_per_sector);
 8012994:	69fb      	ldr	r3, [r7, #28]
 8012996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                        ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 8012998:	fb02 f303 	mul.w	r3, r2, r3
                    byte_offset =  byte_offset -
 801299c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801299e:	1ad3      	subs	r3, r2, r3
 80129a0:	63fb      	str	r3, [r7, #60]	; 0x3c

                    /* Determine if we are now past the end of the FAT buffer in memory.  */
                    if (byte_offset == (ULONG)(media_ptr -> fx_media_bytes_per_sector - 1))
 80129a2:	69fb      	ldr	r3, [r7, #28]
 80129a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80129a6:	3b01      	subs	r3, #1
 80129a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80129aa:	429a      	cmp	r2, r3
 80129ac:	d101      	bne.n	80129b2 <_fx_utility_FAT_flush+0x1b8>
                    {

                        /* Yes, we need to read the next sector */
                        multi_sector_entry = (INT)i;
 80129ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80129b0:	647b      	str	r3, [r7, #68]	; 0x44
                    }

                    /* Setup a pointer into the buffer.  */
                    FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT)byte_offset;
 80129b2:	69fb      	ldr	r3, [r7, #28]
 80129b4:	689a      	ldr	r2, [r3, #8]
 80129b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80129b8:	4413      	add	r3, r2
 80129ba:	62fb      	str	r3, [r7, #44]	; 0x2c

                    /* Clear the dirty flag.  */
                    media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty = 0;
 80129bc:	69f9      	ldr	r1, [r7, #28]
 80129be:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80129c0:	4613      	mov	r3, r2
 80129c2:	005b      	lsls	r3, r3, #1
 80129c4:	4413      	add	r3, r2
 80129c6:	009b      	lsls	r3, r3, #2
 80129c8:	440b      	add	r3, r1
 80129ca:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 80129ce:	2200      	movs	r2, #0
 80129d0:	601a      	str	r2, [r3, #0]

                    /* Determine if the cluster entry is odd or even.  */
                    if (cluster & 1)
 80129d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80129d4:	f003 0301 	and.w	r3, r3, #1
 80129d8:	2b00      	cmp	r3, #0
 80129da:	d01b      	beq.n	8012a14 <_fx_utility_FAT_flush+0x21a>
                        /* Odd cluster number.  */

                        /* Pickup the upper nibble of the FAT entry.  */

                        /* First, set the lower nibble of the FAT entry.  */
                        temp =      (((UINT)*FAT_ptr) & 0x0F);
 80129dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129de:	781b      	ldrb	r3, [r3, #0]
 80129e0:	f003 030f 	and.w	r3, r3, #15
 80129e4:	627b      	str	r3, [r7, #36]	; 0x24
                        *FAT_ptr =  (UCHAR)(temp | ((next_cluster << 4) & 0xF0));
 80129e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129e8:	b2da      	uxtb	r2, r3
 80129ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129ec:	b2db      	uxtb	r3, r3
 80129ee:	011b      	lsls	r3, r3, #4
 80129f0:	b2db      	uxtb	r3, r3
 80129f2:	4313      	orrs	r3, r2
 80129f4:	b2db      	uxtb	r3, r3
 80129f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80129f8:	7013      	strb	r3, [r2, #0]

                        /* Determine if this is a mulit-sector entry.  */
                        if ((multi_sector_entry) == (INT)i)
 80129fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80129fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80129fe:	429a      	cmp	r2, r3
 8012a00:	d029      	beq.n	8012a56 <_fx_utility_FAT_flush+0x25c>
                            /* Yes, requires multiple sector - will write rest of the part later.  */
                            continue;
                        }

                        /* Move to the next byte of the FAT entry.  */
                        FAT_ptr++;
 8012a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a04:	3301      	adds	r3, #1
 8012a06:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Store the upper 8 bits of the FAT entry.  */
                        *FAT_ptr =  (UCHAR)((next_cluster >> 4) & 0xFF);
 8012a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a0a:	091b      	lsrs	r3, r3, #4
 8012a0c:	b2db      	uxtb	r3, r3
 8012a0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012a10:	7013      	strb	r3, [r2, #0]
 8012a12:	e023      	b.n	8012a5c <_fx_utility_FAT_flush+0x262>
                    {

                        /* Even cluster number.  */

                        /* Store the lower byte of the FAT entry.  */
                        *FAT_ptr =  (UCHAR)(next_cluster & 0xFF);
 8012a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a16:	b2db      	uxtb	r3, r3
 8012a18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012a1a:	7013      	strb	r3, [r2, #0]

                        /* Determine if this is a mulit-sector entry.  */
                        if ((multi_sector_entry) == (INT)i)
 8012a1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012a1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012a20:	429a      	cmp	r2, r3
 8012a22:	d01a      	beq.n	8012a5a <_fx_utility_FAT_flush+0x260>
                            /* Yes, requires multiple sector - will write rest of the part later.  */
                            continue;
                        }

                        /* Move to the next nibble of the FAT entry.  */
                        FAT_ptr++;
 8012a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a26:	3301      	adds	r3, #1
 8012a28:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Store the upper 4 bits of the FAT entry.  */
                        temp =  ((UINT)*FAT_ptr) & 0xF0;
 8012a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a2c:	781b      	ldrb	r3, [r3, #0]
 8012a2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012a32:	627b      	str	r3, [r7, #36]	; 0x24
                        *FAT_ptr =  (UCHAR)(temp | ((next_cluster >> 8) & 0xF));
 8012a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a36:	b2da      	uxtb	r2, r3
 8012a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a3a:	0a1b      	lsrs	r3, r3, #8
 8012a3c:	b2db      	uxtb	r3, r3
 8012a3e:	f003 030f 	and.w	r3, r3, #15
 8012a42:	b2db      	uxtb	r3, r3
 8012a44:	4313      	orrs	r3, r2
 8012a46:	b2db      	uxtb	r3, r3
 8012a48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012a4a:	7013      	strb	r3, [r2, #0]
 8012a4c:	e006      	b.n	8012a5c <_fx_utility_FAT_flush+0x262>
                        continue;
 8012a4e:	bf00      	nop
 8012a50:	e004      	b.n	8012a5c <_fx_utility_FAT_flush+0x262>
                        continue;
 8012a52:	bf00      	nop
 8012a54:	e002      	b.n	8012a5c <_fx_utility_FAT_flush+0x262>
                            continue;
 8012a56:	bf00      	nop
 8012a58:	e000      	b.n	8012a5c <_fx_utility_FAT_flush+0x262>
                            continue;
 8012a5a:	bf00      	nop
                for (i = index; i < FX_MAX_FAT_CACHE; i++)
 8012a5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012a5e:	3301      	adds	r3, #1
 8012a60:	653b      	str	r3, [r7, #80]	; 0x50
 8012a62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012a64:	2b0f      	cmp	r3, #15
 8012a66:	f67f af5b 	bls.w	8012920 <_fx_utility_FAT_flush+0x126>
                    }
                }

                /* First, write out the current sector. */
                status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) FAT_sector,
 8012a6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012a6c:	2200      	movs	r2, #0
 8012a6e:	4698      	mov	r8, r3
 8012a70:	4691      	mov	r9, r2
                                                           media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 8012a72:	69fb      	ldr	r3, [r7, #28]
 8012a74:	689a      	ldr	r2, [r3, #8]
                status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) FAT_sector,
 8012a76:	2302      	movs	r3, #2
 8012a78:	9302      	str	r3, [sp, #8]
 8012a7a:	2301      	movs	r3, #1
 8012a7c:	9301      	str	r3, [sp, #4]
 8012a7e:	9200      	str	r2, [sp, #0]
 8012a80:	4642      	mov	r2, r8
 8012a82:	464b      	mov	r3, r9
 8012a84:	69f8      	ldr	r0, [r7, #28]
 8012a86:	f001 fa3d 	bl	8013f04 <_fx_utility_logical_sector_write>
 8012a8a:	63b8      	str	r0, [r7, #56]	; 0x38
                /* Determine if an error occurred.  */
                if (status != FX_SUCCESS)
 8012a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a8e:	2b00      	cmp	r3, #0
 8012a90:	d001      	beq.n	8012a96 <_fx_utility_FAT_flush+0x29c>
                {

                    /* Return the error status.  */
                    return(status);
 8012a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a94:	e1fd      	b.n	8012e92 <_fx_utility_FAT_flush+0x698>
                }

                /* Mark the FAT sector update bit map to indicate this sector has been written.  */
                if (media_ptr -> fx_media_sectors_per_FAT % (FX_FAT_MAP_SIZE << 3) == 0)
 8012a96:	69fb      	ldr	r3, [r7, #28]
 8012a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012a9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8012a9e:	2b00      	cmp	r3, #0
 8012aa0:	d105      	bne.n	8012aae <_fx_utility_FAT_flush+0x2b4>
                {
                    sectors_per_bit =  (UCHAR)((UINT)media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3));
 8012aa2:	69fb      	ldr	r3, [r7, #28]
 8012aa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012aa6:	0a9b      	lsrs	r3, r3, #10
 8012aa8:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8012aac:	e006      	b.n	8012abc <_fx_utility_FAT_flush+0x2c2>
                }
                else
                {
                    sectors_per_bit =  (UCHAR)((UINT)media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3) + 1);
 8012aae:	69fb      	ldr	r3, [r7, #28]
 8012ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012ab2:	0a9b      	lsrs	r3, r3, #10
 8012ab4:	b2db      	uxtb	r3, r3
 8012ab6:	3301      	adds	r3, #1
 8012ab8:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
                }

                /* Check for invalid value.  */
                if (sectors_per_bit == 0)
 8012abc:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8012ac0:	2b00      	cmp	r3, #0
 8012ac2:	d101      	bne.n	8012ac8 <_fx_utility_FAT_flush+0x2ce>
                {

                    /* Invalid media, return error.  */
                    return(FX_MEDIA_INVALID);
 8012ac4:	2302      	movs	r3, #2
 8012ac6:	e1e4      	b.n	8012e92 <_fx_utility_FAT_flush+0x698>
                }

                ind = ((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) >> 3;
 8012ac8:	69fb      	ldr	r3, [r7, #28]
 8012aca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012acc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012ace:	1ad2      	subs	r2, r2, r3
 8012ad0:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8012ad4:	fbb2 f3f3 	udiv	r3, r2, r3
 8012ad8:	08db      	lsrs	r3, r3, #3
 8012ada:	637b      	str	r3, [r7, #52]	; 0x34
                media_ptr -> fx_media_fat_secondary_update_map[ind] = 
                    (UCHAR)((INT)media_ptr -> fx_media_fat_secondary_update_map[ind]
 8012adc:	69fa      	ldr	r2, [r7, #28]
 8012ade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012ae0:	4413      	add	r3, r2
 8012ae2:	f603 0318 	addw	r3, r3, #2072	; 0x818
 8012ae6:	781b      	ldrb	r3, [r3, #0]
 8012ae8:	b259      	sxtb	r1, r3
                    | (1 <<(((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) & 7)));
 8012aea:	69fb      	ldr	r3, [r7, #28]
 8012aec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012aee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012af0:	1a9a      	subs	r2, r3, r2
 8012af2:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8012af6:	fbb2 f3f3 	udiv	r3, r2, r3
 8012afa:	f003 0207 	and.w	r2, r3, #7
 8012afe:	2301      	movs	r3, #1
 8012b00:	4093      	lsls	r3, r2
 8012b02:	b25b      	sxtb	r3, r3
 8012b04:	430b      	orrs	r3, r1
 8012b06:	b25b      	sxtb	r3, r3
                    (UCHAR)((INT)media_ptr -> fx_media_fat_secondary_update_map[ind]
 8012b08:	b2d9      	uxtb	r1, r3
                media_ptr -> fx_media_fat_secondary_update_map[ind] = 
 8012b0a:	69fa      	ldr	r2, [r7, #28]
 8012b0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b0e:	4413      	add	r3, r2
 8012b10:	f603 0218 	addw	r2, r3, #2072	; 0x818
 8012b14:	460b      	mov	r3, r1
 8012b16:	7013      	strb	r3, [r2, #0]

                /* Determine if the multi-sector flag is set.  */
                if (multi_sector_entry != -1)
 8012b18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012b1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012b1e:	f000 81af 	beq.w	8012e80 <_fx_utility_FAT_flush+0x686>
                {

                    /* Yes, position to the next sector and read it in.  */
                    FAT_sector++;
 8012b22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012b24:	3301      	adds	r3, #1
 8012b26:	657b      	str	r3, [r7, #84]	; 0x54
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8012b28:	e6a5      	b.n	8012876 <_fx_utility_FAT_flush+0x7c>
            }
        }
#ifdef FX_ENABLE_EXFAT
        else if (media_ptr -> fx_media_FAT_type == FX_FAT16)
#else
        else if (!media_ptr -> fx_media_32_bit_FAT)
 8012b2a:	69fb      	ldr	r3, [r7, #28]
 8012b2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012b2e:	2b00      	cmp	r3, #0
 8012b30:	f040 80d2 	bne.w	8012cd8 <_fx_utility_FAT_flush+0x4de>
        {

            /* 16-bit FAT is present.  */

            /* Calculate the byte offset to the cluster entry.  */
            byte_offset =  (((ULONG)cluster) << 1);
 8012b34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012b36:	005b      	lsls	r3, r3, #1
 8012b38:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Calculate the FAT sector the requested FAT entry resides in.  */
            FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8012b3a:	69fb      	ldr	r3, [r7, #28]
 8012b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012b3e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012b40:	fbb2 f2f3 	udiv	r2, r2, r3
                (ULONG)media_ptr -> fx_media_reserved_sectors;
 8012b44:	69fb      	ldr	r3, [r7, #28]
 8012b46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8012b48:	4413      	add	r3, r2
 8012b4a:	657b      	str	r3, [r7, #84]	; 0x54

            /* Read the FAT sector.  */
            status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8012b4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012b4e:	2200      	movs	r2, #0
 8012b50:	469a      	mov	sl, r3
 8012b52:	4693      	mov	fp, r2
                                                      media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 8012b54:	69fb      	ldr	r3, [r7, #28]
 8012b56:	689a      	ldr	r2, [r3, #8]
            status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8012b58:	2302      	movs	r3, #2
 8012b5a:	9302      	str	r3, [sp, #8]
 8012b5c:	2301      	movs	r3, #1
 8012b5e:	9301      	str	r3, [sp, #4]
 8012b60:	9200      	str	r2, [sp, #0]
 8012b62:	4652      	mov	r2, sl
 8012b64:	465b      	mov	r3, fp
 8012b66:	69f8      	ldr	r0, [r7, #28]
 8012b68:	f000 ff38 	bl	80139dc <_fx_utility_logical_sector_read>
 8012b6c:	63b8      	str	r0, [r7, #56]	; 0x38

            /* Determine if an error occurred.  */
            if (status != FX_SUCCESS)
 8012b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b70:	2b00      	cmp	r3, #0
 8012b72:	d001      	beq.n	8012b78 <_fx_utility_FAT_flush+0x37e>
            {

                /* Return the error status.  */
                return(status);
 8012b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b76:	e18c      	b.n	8012e92 <_fx_utility_FAT_flush+0x698>
            }

            /* Loop through the remainder of the cache to check for multiple entries
               within the same FAT sector being written out.  */
            for (i = index; i < FX_MAX_FAT_CACHE; i++)
 8012b78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012b7a:	653b      	str	r3, [r7, #80]	; 0x50
 8012b7c:	e057      	b.n	8012c2e <_fx_utility_FAT_flush+0x434>
            {

                /* Determine if the entry is dirty.  */
                if (media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty == 0)
 8012b7e:	69f9      	ldr	r1, [r7, #28]
 8012b80:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012b82:	4613      	mov	r3, r2
 8012b84:	005b      	lsls	r3, r3, #1
 8012b86:	4413      	add	r3, r2
 8012b88:	009b      	lsls	r3, r3, #2
 8012b8a:	440b      	add	r3, r1
 8012b8c:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 8012b90:	681b      	ldr	r3, [r3, #0]
 8012b92:	2b00      	cmp	r3, #0
 8012b94:	d045      	beq.n	8012c22 <_fx_utility_FAT_flush+0x428>
                    /* Not dirty, does not need to be flushed.  */
                    continue;
                }

                /* Isolate the cluster.  */
                cluster = (media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster);
 8012b96:	69f9      	ldr	r1, [r7, #28]
 8012b98:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012b9a:	4613      	mov	r3, r2
 8012b9c:	005b      	lsls	r3, r3, #1
 8012b9e:	4413      	add	r3, r2
 8012ba0:	009b      	lsls	r3, r3, #2
 8012ba2:	440b      	add	r3, r1
 8012ba4:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 8012ba8:	681b      	ldr	r3, [r3, #0]
 8012baa:	643b      	str	r3, [r7, #64]	; 0x40

                /* Calculate the byte offset to the cluster entry.  */
                byte_offset =  (((ULONG)cluster) * 2);
 8012bac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012bae:	005b      	lsls	r3, r3, #1
 8012bb0:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Pickup the sector.  */
                sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8012bb2:	69fb      	ldr	r3, [r7, #28]
 8012bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012bb6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012bb8:	fbb2 f2f3 	udiv	r2, r2, r3
                    (ULONG)media_ptr -> fx_media_reserved_sectors;
 8012bbc:	69fb      	ldr	r3, [r7, #28]
 8012bbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8012bc0:	4413      	add	r3, r2
 8012bc2:	633b      	str	r3, [r7, #48]	; 0x30

                /* Is it the current FAT sector?  */
                if (sector != FAT_sector)
 8012bc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012bc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012bc8:	429a      	cmp	r2, r3
 8012bca:	d12c      	bne.n	8012c26 <_fx_utility_FAT_flush+0x42c>
                    continue;
                }

                /* Now calculate the byte offset into this FAT sector.  */
                byte_offset =  byte_offset -
                    ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 8012bcc:	69fb      	ldr	r3, [r7, #28]
 8012bce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012bd0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012bd2:	1ad2      	subs	r2, r2, r3
                     media_ptr -> fx_media_bytes_per_sector);
 8012bd4:	69fb      	ldr	r3, [r7, #28]
 8012bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                    ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 8012bd8:	fb02 f303 	mul.w	r3, r2, r3
                byte_offset =  byte_offset -
 8012bdc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012bde:	1ad3      	subs	r3, r2, r3
 8012be0:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Setup a pointer into the buffer.  */
                FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT)byte_offset;
 8012be2:	69fb      	ldr	r3, [r7, #28]
 8012be4:	689a      	ldr	r2, [r3, #8]
 8012be6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012be8:	4413      	add	r3, r2
 8012bea:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Pickup new value for this FAT entry.  */
                next_cluster =  media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value;
 8012bec:	69f9      	ldr	r1, [r7, #28]
 8012bee:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012bf0:	4613      	mov	r3, r2
 8012bf2:	005b      	lsls	r3, r3, #1
 8012bf4:	4413      	add	r3, r2
 8012bf6:	009b      	lsls	r3, r3, #2
 8012bf8:	440b      	add	r3, r1
 8012bfa:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 8012bfe:	681b      	ldr	r3, [r3, #0]
 8012c00:	62bb      	str	r3, [r7, #40]	; 0x28

                /* Store the FAT entry.  */
                _fx_utility_16_unsigned_write(FAT_ptr, (UINT)next_cluster);
 8012c02:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012c04:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012c06:	f7ff fa88 	bl	801211a <_fx_utility_16_unsigned_write>

                /* Clear the dirty flag.  */
                media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty = 0;
 8012c0a:	69f9      	ldr	r1, [r7, #28]
 8012c0c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012c0e:	4613      	mov	r3, r2
 8012c10:	005b      	lsls	r3, r3, #1
 8012c12:	4413      	add	r3, r2
 8012c14:	009b      	lsls	r3, r3, #2
 8012c16:	440b      	add	r3, r1
 8012c18:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 8012c1c:	2200      	movs	r2, #0
 8012c1e:	601a      	str	r2, [r3, #0]
 8012c20:	e002      	b.n	8012c28 <_fx_utility_FAT_flush+0x42e>
                    continue;
 8012c22:	bf00      	nop
 8012c24:	e000      	b.n	8012c28 <_fx_utility_FAT_flush+0x42e>
                    continue;
 8012c26:	bf00      	nop
            for (i = index; i < FX_MAX_FAT_CACHE; i++)
 8012c28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012c2a:	3301      	adds	r3, #1
 8012c2c:	653b      	str	r3, [r7, #80]	; 0x50
 8012c2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012c30:	2b0f      	cmp	r3, #15
 8012c32:	d9a4      	bls.n	8012b7e <_fx_utility_FAT_flush+0x384>
            }

            /* Write the last written FAT sector out.  */
            status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) FAT_sector,
 8012c34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012c36:	2200      	movs	r2, #0
 8012c38:	613b      	str	r3, [r7, #16]
 8012c3a:	617a      	str	r2, [r7, #20]
                                                       media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 8012c3c:	69fb      	ldr	r3, [r7, #28]
 8012c3e:	689a      	ldr	r2, [r3, #8]
            status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) FAT_sector,
 8012c40:	2302      	movs	r3, #2
 8012c42:	9302      	str	r3, [sp, #8]
 8012c44:	2301      	movs	r3, #1
 8012c46:	9301      	str	r3, [sp, #4]
 8012c48:	9200      	str	r2, [sp, #0]
 8012c4a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8012c4e:	69f8      	ldr	r0, [r7, #28]
 8012c50:	f001 f958 	bl	8013f04 <_fx_utility_logical_sector_write>
 8012c54:	63b8      	str	r0, [r7, #56]	; 0x38

            /* Determine if an error occurred.  */
            if (status != FX_SUCCESS)
 8012c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c58:	2b00      	cmp	r3, #0
 8012c5a:	d001      	beq.n	8012c60 <_fx_utility_FAT_flush+0x466>
            {
                /* Return the error status.  */
                return(status);
 8012c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c5e:	e118      	b.n	8012e92 <_fx_utility_FAT_flush+0x698>
            }

            /* Mark the FAT sector update bit map to indicate this sector has been
               written.  */
            if (media_ptr -> fx_media_sectors_per_FAT % (FX_FAT_MAP_SIZE << 3) == 0)
 8012c60:	69fb      	ldr	r3, [r7, #28]
 8012c62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012c64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8012c68:	2b00      	cmp	r3, #0
 8012c6a:	d105      	bne.n	8012c78 <_fx_utility_FAT_flush+0x47e>
            {
                sectors_per_bit =  (UCHAR)(media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3));
 8012c6c:	69fb      	ldr	r3, [r7, #28]
 8012c6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012c70:	0a9b      	lsrs	r3, r3, #10
 8012c72:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8012c76:	e006      	b.n	8012c86 <_fx_utility_FAT_flush+0x48c>
            }
            else
            {
                sectors_per_bit =  (UCHAR)((media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3)) + 1);
 8012c78:	69fb      	ldr	r3, [r7, #28]
 8012c7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012c7c:	0a9b      	lsrs	r3, r3, #10
 8012c7e:	b2db      	uxtb	r3, r3
 8012c80:	3301      	adds	r3, #1
 8012c82:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
            }
            ind = ((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) >> 3;
 8012c86:	69fb      	ldr	r3, [r7, #28]
 8012c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012c8a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012c8c:	1ad2      	subs	r2, r2, r3
 8012c8e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8012c92:	fbb2 f3f3 	udiv	r3, r2, r3
 8012c96:	08db      	lsrs	r3, r3, #3
 8012c98:	637b      	str	r3, [r7, #52]	; 0x34
            media_ptr -> fx_media_fat_secondary_update_map[ind] = 
                (UCHAR)((INT)media_ptr -> fx_media_fat_secondary_update_map[ind]
 8012c9a:	69fa      	ldr	r2, [r7, #28]
 8012c9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c9e:	4413      	add	r3, r2
 8012ca0:	f603 0318 	addw	r3, r3, #2072	; 0x818
 8012ca4:	781b      	ldrb	r3, [r3, #0]
 8012ca6:	b259      	sxtb	r1, r3
                | (1 <<(((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) & 7)));
 8012ca8:	69fb      	ldr	r3, [r7, #28]
 8012caa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012cac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012cae:	1a9a      	subs	r2, r3, r2
 8012cb0:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8012cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8012cb8:	f003 0207 	and.w	r2, r3, #7
 8012cbc:	2301      	movs	r3, #1
 8012cbe:	4093      	lsls	r3, r2
 8012cc0:	b25b      	sxtb	r3, r3
 8012cc2:	430b      	orrs	r3, r1
 8012cc4:	b25b      	sxtb	r3, r3
                (UCHAR)((INT)media_ptr -> fx_media_fat_secondary_update_map[ind]
 8012cc6:	b2d9      	uxtb	r1, r3
            media_ptr -> fx_media_fat_secondary_update_map[ind] = 
 8012cc8:	69fa      	ldr	r2, [r7, #28]
 8012cca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012ccc:	4413      	add	r3, r2
 8012cce:	f603 0218 	addw	r2, r3, #2072	; 0x818
 8012cd2:	460b      	mov	r3, r1
 8012cd4:	7013      	strb	r3, [r2, #0]
 8012cd6:	e0d4      	b.n	8012e82 <_fx_utility_FAT_flush+0x688>
        {

            /* 32-bit FAT or exFAT are present.  */

            /* Calculate the byte offset to the cluster entry.  */
            byte_offset =  (((ULONG)cluster) * 4);
 8012cd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012cda:	009b      	lsls	r3, r3, #2
 8012cdc:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Calculate the FAT sector the requested FAT entry resides in.  */
            FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8012cde:	69fb      	ldr	r3, [r7, #28]
 8012ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012ce2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012ce4:	fbb2 f2f3 	udiv	r2, r2, r3
                (ULONG)media_ptr -> fx_media_reserved_sectors;
 8012ce8:	69fb      	ldr	r3, [r7, #28]
 8012cea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8012cec:	4413      	add	r3, r2
 8012cee:	657b      	str	r3, [r7, #84]	; 0x54

            /* Read the FAT sector.  */
            status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8012cf0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012cf2:	2200      	movs	r2, #0
 8012cf4:	60bb      	str	r3, [r7, #8]
 8012cf6:	60fa      	str	r2, [r7, #12]
                                                      media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 8012cf8:	69fb      	ldr	r3, [r7, #28]
 8012cfa:	689a      	ldr	r2, [r3, #8]
            status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8012cfc:	2302      	movs	r3, #2
 8012cfe:	9302      	str	r3, [sp, #8]
 8012d00:	2301      	movs	r3, #1
 8012d02:	9301      	str	r3, [sp, #4]
 8012d04:	9200      	str	r2, [sp, #0]
 8012d06:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8012d0a:	69f8      	ldr	r0, [r7, #28]
 8012d0c:	f000 fe66 	bl	80139dc <_fx_utility_logical_sector_read>
 8012d10:	63b8      	str	r0, [r7, #56]	; 0x38

            /* Determine if an error occurred.  */
            if (status != FX_SUCCESS)
 8012d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d14:	2b00      	cmp	r3, #0
 8012d16:	d001      	beq.n	8012d1c <_fx_utility_FAT_flush+0x522>
            {

                /* Return the error status.  */
                return(status);
 8012d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d1a:	e0ba      	b.n	8012e92 <_fx_utility_FAT_flush+0x698>
            }

            /* Loop through the remainder of the cache to check for multiple entries
               within the same FAT sector being written out.  */
            for (i = index; i < FX_MAX_FAT_CACHE; i++)
 8012d1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012d1e:	653b      	str	r3, [r7, #80]	; 0x50
 8012d20:	e057      	b.n	8012dd2 <_fx_utility_FAT_flush+0x5d8>
            {

                /* Determine if the entry is dirty.  */
                if (media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty == 0)
 8012d22:	69f9      	ldr	r1, [r7, #28]
 8012d24:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012d26:	4613      	mov	r3, r2
 8012d28:	005b      	lsls	r3, r3, #1
 8012d2a:	4413      	add	r3, r2
 8012d2c:	009b      	lsls	r3, r3, #2
 8012d2e:	440b      	add	r3, r1
 8012d30:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 8012d34:	681b      	ldr	r3, [r3, #0]
 8012d36:	2b00      	cmp	r3, #0
 8012d38:	d045      	beq.n	8012dc6 <_fx_utility_FAT_flush+0x5cc>
                    /* Not dirty, does not need to be flushed.  */
                    continue;
                }

                /* Isolate the cluster.  */
                cluster = (media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster);
 8012d3a:	69f9      	ldr	r1, [r7, #28]
 8012d3c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012d3e:	4613      	mov	r3, r2
 8012d40:	005b      	lsls	r3, r3, #1
 8012d42:	4413      	add	r3, r2
 8012d44:	009b      	lsls	r3, r3, #2
 8012d46:	440b      	add	r3, r1
 8012d48:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 8012d4c:	681b      	ldr	r3, [r3, #0]
 8012d4e:	643b      	str	r3, [r7, #64]	; 0x40

                /* Calculate the byte offset to the cluster entry.  */
                byte_offset =  (((ULONG)cluster) * 4);
 8012d50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012d52:	009b      	lsls	r3, r3, #2
 8012d54:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Pickup the sector.  */
                sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8012d56:	69fb      	ldr	r3, [r7, #28]
 8012d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012d5a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012d5c:	fbb2 f2f3 	udiv	r2, r2, r3
                    (ULONG)media_ptr -> fx_media_reserved_sectors;
 8012d60:	69fb      	ldr	r3, [r7, #28]
 8012d62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8012d64:	4413      	add	r3, r2
 8012d66:	633b      	str	r3, [r7, #48]	; 0x30

                /* Is it the current FAT sector?  */
                if (sector != FAT_sector)
 8012d68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012d6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012d6c:	429a      	cmp	r2, r3
 8012d6e:	d12c      	bne.n	8012dca <_fx_utility_FAT_flush+0x5d0>
                    continue;
                }

                /* Now calculate the byte offset into this FAT sector.  */
                byte_offset =  byte_offset -
                    ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 8012d70:	69fb      	ldr	r3, [r7, #28]
 8012d72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012d74:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012d76:	1ad2      	subs	r2, r2, r3
                     media_ptr -> fx_media_bytes_per_sector);
 8012d78:	69fb      	ldr	r3, [r7, #28]
 8012d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                    ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 8012d7c:	fb02 f303 	mul.w	r3, r2, r3
                byte_offset =  byte_offset -
 8012d80:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012d82:	1ad3      	subs	r3, r2, r3
 8012d84:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Setup a pointer into the buffer.  */
                FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT)byte_offset;
 8012d86:	69fb      	ldr	r3, [r7, #28]
 8012d88:	689a      	ldr	r2, [r3, #8]
 8012d8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012d8c:	4413      	add	r3, r2
 8012d8e:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Pickup new value for this FAT entry.  */
                next_cluster =  media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value;
 8012d90:	69f9      	ldr	r1, [r7, #28]
 8012d92:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012d94:	4613      	mov	r3, r2
 8012d96:	005b      	lsls	r3, r3, #1
 8012d98:	4413      	add	r3, r2
 8012d9a:	009b      	lsls	r3, r3, #2
 8012d9c:	440b      	add	r3, r1
 8012d9e:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 8012da2:	681b      	ldr	r3, [r3, #0]
 8012da4:	62bb      	str	r3, [r7, #40]	; 0x28

                /* Store the FAT entry.  */
                _fx_utility_32_unsigned_write(FAT_ptr, next_cluster);
 8012da6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012da8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012daa:	f7ff f9e8 	bl	801217e <_fx_utility_32_unsigned_write>

                /* Clear the dirty flag.  */
                media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty = 0;
 8012dae:	69f9      	ldr	r1, [r7, #28]
 8012db0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012db2:	4613      	mov	r3, r2
 8012db4:	005b      	lsls	r3, r3, #1
 8012db6:	4413      	add	r3, r2
 8012db8:	009b      	lsls	r3, r3, #2
 8012dba:	440b      	add	r3, r1
 8012dbc:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 8012dc0:	2200      	movs	r2, #0
 8012dc2:	601a      	str	r2, [r3, #0]
 8012dc4:	e002      	b.n	8012dcc <_fx_utility_FAT_flush+0x5d2>
                    continue;
 8012dc6:	bf00      	nop
 8012dc8:	e000      	b.n	8012dcc <_fx_utility_FAT_flush+0x5d2>
                    continue;
 8012dca:	bf00      	nop
            for (i = index; i < FX_MAX_FAT_CACHE; i++)
 8012dcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012dce:	3301      	adds	r3, #1
 8012dd0:	653b      	str	r3, [r7, #80]	; 0x50
 8012dd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012dd4:	2b0f      	cmp	r3, #15
 8012dd6:	d9a4      	bls.n	8012d22 <_fx_utility_FAT_flush+0x528>
            }

            /* Write the last written FAT sector out.  */
            status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) FAT_sector,
 8012dd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012dda:	2200      	movs	r2, #0
 8012ddc:	603b      	str	r3, [r7, #0]
 8012dde:	607a      	str	r2, [r7, #4]
                                                       media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 8012de0:	69fb      	ldr	r3, [r7, #28]
 8012de2:	689a      	ldr	r2, [r3, #8]
            status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) FAT_sector,
 8012de4:	2302      	movs	r3, #2
 8012de6:	9302      	str	r3, [sp, #8]
 8012de8:	2301      	movs	r3, #1
 8012dea:	9301      	str	r3, [sp, #4]
 8012dec:	9200      	str	r2, [sp, #0]
 8012dee:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012df2:	69f8      	ldr	r0, [r7, #28]
 8012df4:	f001 f886 	bl	8013f04 <_fx_utility_logical_sector_write>
 8012df8:	63b8      	str	r0, [r7, #56]	; 0x38

            /* Determine if an error occurred.  */
            if (status != FX_SUCCESS)
 8012dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012dfc:	2b00      	cmp	r3, #0
 8012dfe:	d001      	beq.n	8012e04 <_fx_utility_FAT_flush+0x60a>
            {

                /* Return the error status.  */
                return(status);
 8012e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e02:	e046      	b.n	8012e92 <_fx_utility_FAT_flush+0x698>
            {
#endif /* FX_ENABLE_EXFAT */

                /* Mark the FAT sector update bit map to indicate this sector has been
                   written.  */
                if (media_ptr -> fx_media_sectors_per_FAT % (FX_FAT_MAP_SIZE << 3) == 0)
 8012e04:	69fb      	ldr	r3, [r7, #28]
 8012e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012e08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8012e0c:	2b00      	cmp	r3, #0
 8012e0e:	d105      	bne.n	8012e1c <_fx_utility_FAT_flush+0x622>
                {
                    sectors_per_bit =  (UCHAR)(media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3));
 8012e10:	69fb      	ldr	r3, [r7, #28]
 8012e12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012e14:	0a9b      	lsrs	r3, r3, #10
 8012e16:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8012e1a:	e006      	b.n	8012e2a <_fx_utility_FAT_flush+0x630>
                }
                else
                {
                    sectors_per_bit =  (UCHAR)((media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3)) + 1);
 8012e1c:	69fb      	ldr	r3, [r7, #28]
 8012e1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012e20:	0a9b      	lsrs	r3, r3, #10
 8012e22:	b2db      	uxtb	r3, r3
 8012e24:	3301      	adds	r3, #1
 8012e26:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
                }
                ind = ((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) >> 3;
 8012e2a:	69fb      	ldr	r3, [r7, #28]
 8012e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012e2e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012e30:	1ad2      	subs	r2, r2, r3
 8012e32:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8012e36:	fbb2 f3f3 	udiv	r3, r2, r3
 8012e3a:	08db      	lsrs	r3, r3, #3
 8012e3c:	637b      	str	r3, [r7, #52]	; 0x34
                media_ptr -> fx_media_fat_secondary_update_map[ind] = 
                    (UCHAR)((INT)media_ptr -> fx_media_fat_secondary_update_map[ind]
 8012e3e:	69fa      	ldr	r2, [r7, #28]
 8012e40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012e42:	4413      	add	r3, r2
 8012e44:	f603 0318 	addw	r3, r3, #2072	; 0x818
 8012e48:	781b      	ldrb	r3, [r3, #0]
 8012e4a:	b259      	sxtb	r1, r3
                    | (1 <<(((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) & 7)));
 8012e4c:	69fb      	ldr	r3, [r7, #28]
 8012e4e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012e50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012e52:	1a9a      	subs	r2, r3, r2
 8012e54:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8012e58:	fbb2 f3f3 	udiv	r3, r2, r3
 8012e5c:	f003 0207 	and.w	r2, r3, #7
 8012e60:	2301      	movs	r3, #1
 8012e62:	4093      	lsls	r3, r2
 8012e64:	b25b      	sxtb	r3, r3
 8012e66:	430b      	orrs	r3, r1
 8012e68:	b25b      	sxtb	r3, r3
                    (UCHAR)((INT)media_ptr -> fx_media_fat_secondary_update_map[ind]
 8012e6a:	b2d9      	uxtb	r1, r3
                media_ptr -> fx_media_fat_secondary_update_map[ind] = 
 8012e6c:	69fa      	ldr	r2, [r7, #28]
 8012e6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012e70:	4413      	add	r3, r2
 8012e72:	f603 0218 	addw	r2, r3, #2072	; 0x818
 8012e76:	460b      	mov	r3, r1
 8012e78:	7013      	strb	r3, [r2, #0]
 8012e7a:	e002      	b.n	8012e82 <_fx_utility_FAT_flush+0x688>
            continue;
 8012e7c:	bf00      	nop
 8012e7e:	e000      	b.n	8012e82 <_fx_utility_FAT_flush+0x688>
                    break;
 8012e80:	bf00      	nop
    for (index = 0; index < FX_MAX_FAT_CACHE; index++)
 8012e82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012e84:	3301      	adds	r3, #1
 8012e86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012e88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012e8a:	2b0f      	cmp	r3, #15
 8012e8c:	f67f acc4 	bls.w	8012818 <_fx_utility_FAT_flush+0x1e>
        media_ptr -> fx_media_fault_tolerant_cached_FAT_sector = 0;
    }
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Return successful status.  */
    return(FX_SUCCESS);
 8012e90:	2300      	movs	r3, #0
}
 8012e92:	4618      	mov	r0, r3
 8012e94:	3758      	adds	r7, #88	; 0x58
 8012e96:	46bd      	mov	sp, r7
 8012e98:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08012e9c <_fx_utility_FAT_map_flush>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_FAT_map_flush(FX_MEDIA *media_ptr)
{
 8012e9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8012ea0:	b092      	sub	sp, #72	; 0x48
 8012ea2:	af04      	add	r7, sp, #16
 8012ea4:	61f8      	str	r0, [r7, #28]
       or more primary FAT sectors. Because of this, it is possible some FAT sectors that
       were not changed may get flushed out to the secondary FAT.  However, this method
       provides very nice performance benefits during normal operation and is much more
       reasonable than performing a total copy of the primary FAT to each secondary FAT
       on media flush and media close.  */
    if (media_ptr -> fx_media_sectors_per_FAT % (FX_FAT_MAP_SIZE << 3) == 0)
 8012ea6:	69fb      	ldr	r3, [r7, #28]
 8012ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012eaa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8012eae:	2b00      	cmp	r3, #0
 8012eb0:	d105      	bne.n	8012ebe <_fx_utility_FAT_map_flush+0x22>
    {
        sectors_per_bit =  (UCHAR)(media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3));
 8012eb2:	69fb      	ldr	r3, [r7, #28]
 8012eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012eb6:	0a9b      	lsrs	r3, r3, #10
 8012eb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012ebc:	e006      	b.n	8012ecc <_fx_utility_FAT_map_flush+0x30>
    }
    else
    {
        sectors_per_bit =  (UCHAR)(media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3) + 1);
 8012ebe:	69fb      	ldr	r3, [r7, #28]
 8012ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012ec2:	0a9b      	lsrs	r3, r3, #10
 8012ec4:	b2db      	uxtb	r3, r3
 8012ec6:	3301      	adds	r3, #1
 8012ec8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Loop through the FAT update map to mirror primary FAT sectors to secondary FAT(s).  */
    for (i = 0; i < FX_FAT_MAP_SIZE << 3; i++)
 8012ecc:	2300      	movs	r3, #0
 8012ece:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012ed0:	e089      	b.n	8012fe6 <_fx_utility_FAT_map_flush+0x14a>
    {

        /* Determine if there are FAT changes specified by this entry.  */
        if ((media_ptr -> fx_media_fat_secondary_update_map[i >> 3] & (1 << (i & 7))) == 0)
 8012ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ed4:	08db      	lsrs	r3, r3, #3
 8012ed6:	69fa      	ldr	r2, [r7, #28]
 8012ed8:	4413      	add	r3, r2
 8012eda:	f893 3818 	ldrb.w	r3, [r3, #2072]	; 0x818
 8012ede:	461a      	mov	r2, r3
 8012ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ee2:	f003 0307 	and.w	r3, r3, #7
 8012ee6:	fa42 f303 	asr.w	r3, r2, r3
 8012eea:	f003 0301 	and.w	r3, r3, #1
 8012eee:	2b00      	cmp	r3, #0
 8012ef0:	d075      	beq.n	8012fde <_fx_utility_FAT_map_flush+0x142>
            /* No, look at the next bit map entry.  */
            continue;
        }

        /* Setup the parameters for performing the update.  */
        FAT_sector =    i * sectors_per_bit + media_ptr -> fx_media_reserved_sectors;
 8012ef2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012ef6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012ef8:	fb03 f202 	mul.w	r2, r3, r2
 8012efc:	69fb      	ldr	r3, [r7, #28]
 8012efe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012f00:	4413      	add	r3, r2
 8012f02:	637b      	str	r3, [r7, #52]	; 0x34
        last_sector =   FAT_sector + sectors_per_bit;
 8012f04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012f08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012f0a:	4413      	add	r3, r2
 8012f0c:	633b      	str	r3, [r7, #48]	; 0x30

        /* Make sure the last update sector is within range.  */
        if (last_sector > (media_ptr -> fx_media_sectors_per_FAT + media_ptr -> fx_media_reserved_sectors))
 8012f0e:	69fb      	ldr	r3, [r7, #28]
 8012f10:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8012f12:	69fb      	ldr	r3, [r7, #28]
 8012f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012f16:	4413      	add	r3, r2
 8012f18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012f1a:	429a      	cmp	r2, r3
 8012f1c:	d95a      	bls.n	8012fd4 <_fx_utility_FAT_map_flush+0x138>
        {
            last_sector =  media_ptr -> fx_media_sectors_per_FAT + media_ptr -> fx_media_reserved_sectors;
 8012f1e:	69fb      	ldr	r3, [r7, #28]
 8012f20:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8012f22:	69fb      	ldr	r3, [r7, #28]
 8012f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012f26:	4413      	add	r3, r2
 8012f28:	633b      	str	r3, [r7, #48]	; 0x30
        }

        /* Loop to mirror primary FAT sectors to secondary FAT(s).  */
        for (; FAT_sector < last_sector; FAT_sector++)
 8012f2a:	e053      	b.n	8012fd4 <_fx_utility_FAT_map_flush+0x138>
        {

            /* Read the FAT sector.  */
            status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8012f2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012f2e:	2200      	movs	r2, #0
 8012f30:	613b      	str	r3, [r7, #16]
 8012f32:	617a      	str	r2, [r7, #20]
                                                      media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 8012f34:	69fb      	ldr	r3, [r7, #28]
 8012f36:	689a      	ldr	r2, [r3, #8]
            status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8012f38:	2302      	movs	r3, #2
 8012f3a:	9302      	str	r3, [sp, #8]
 8012f3c:	2301      	movs	r3, #1
 8012f3e:	9301      	str	r3, [sp, #4]
 8012f40:	9200      	str	r2, [sp, #0]
 8012f42:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8012f46:	69f8      	ldr	r0, [r7, #28]
 8012f48:	f000 fd48 	bl	80139dc <_fx_utility_logical_sector_read>
 8012f4c:	6238      	str	r0, [r7, #32]

            /* Determine if an error occurred.  */
            if (status != FX_SUCCESS)
 8012f4e:	6a3b      	ldr	r3, [r7, #32]
 8012f50:	2b00      	cmp	r3, #0
 8012f52:	d001      	beq.n	8012f58 <_fx_utility_FAT_map_flush+0xbc>
            {
                /* Return the error status.  */
                return(status);
 8012f54:	6a3b      	ldr	r3, [r7, #32]
 8012f56:	e05c      	b.n	8013012 <_fx_utility_FAT_map_flush+0x176>
            }

            /* Pickup how many secondary FATs there are.  */
            FATs =  media_ptr -> fx_media_number_of_FATs - 1;
 8012f58:	69fb      	ldr	r3, [r7, #28]
 8012f5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012f5c:	3b01      	subs	r3, #1
 8012f5e:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Loop to update additional FAT entries.  */
            while (FATs)
 8012f60:	e032      	b.n	8012fc8 <_fx_utility_FAT_map_flush+0x12c>
            {

                /* Mirror main FAT sector write into the additional FATs.  */
                status =  _fx_utility_logical_sector_write(media_ptr,
                                                           ((ULONG64) FAT_sector) + ((ULONG64)FATs * (ULONG64)(media_ptr -> fx_media_sectors_per_FAT)),
 8012f62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012f64:	2200      	movs	r2, #0
 8012f66:	60bb      	str	r3, [r7, #8]
 8012f68:	60fa      	str	r2, [r7, #12]
 8012f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f6c:	2200      	movs	r2, #0
 8012f6e:	4698      	mov	r8, r3
 8012f70:	4691      	mov	r9, r2
 8012f72:	69fb      	ldr	r3, [r7, #28]
 8012f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012f76:	2200      	movs	r2, #0
 8012f78:	469a      	mov	sl, r3
 8012f7a:	4693      	mov	fp, r2
 8012f7c:	fb0a f209 	mul.w	r2, sl, r9
 8012f80:	fb08 f30b 	mul.w	r3, r8, fp
 8012f84:	4413      	add	r3, r2
 8012f86:	fba8 450a 	umull	r4, r5, r8, sl
 8012f8a:	442b      	add	r3, r5
 8012f8c:	461d      	mov	r5, r3
                status =  _fx_utility_logical_sector_write(media_ptr,
 8012f8e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8012f92:	460b      	mov	r3, r1
 8012f94:	191b      	adds	r3, r3, r4
 8012f96:	603b      	str	r3, [r7, #0]
 8012f98:	4613      	mov	r3, r2
 8012f9a:	416b      	adcs	r3, r5
 8012f9c:	607b      	str	r3, [r7, #4]
                                                           media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 8012f9e:	69fb      	ldr	r3, [r7, #28]
 8012fa0:	689a      	ldr	r2, [r3, #8]
                status =  _fx_utility_logical_sector_write(media_ptr,
 8012fa2:	2302      	movs	r3, #2
 8012fa4:	9302      	str	r3, [sp, #8]
 8012fa6:	2301      	movs	r3, #1
 8012fa8:	9301      	str	r3, [sp, #4]
 8012faa:	9200      	str	r2, [sp, #0]
 8012fac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012fb0:	69f8      	ldr	r0, [r7, #28]
 8012fb2:	f000 ffa7 	bl	8013f04 <_fx_utility_logical_sector_write>
 8012fb6:	6238      	str	r0, [r7, #32]

                /* Determine if an error occurred.  */
                if (status != FX_SUCCESS)
 8012fb8:	6a3b      	ldr	r3, [r7, #32]
 8012fba:	2b00      	cmp	r3, #0
 8012fbc:	d001      	beq.n	8012fc2 <_fx_utility_FAT_map_flush+0x126>
                {

                    /* Return the error status.  */
                    return(status);
 8012fbe:	6a3b      	ldr	r3, [r7, #32]
 8012fc0:	e027      	b.n	8013012 <_fx_utility_FAT_map_flush+0x176>
                }

                /* Decrement the number of FATs.  */
                FATs--;
 8012fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fc4:	3b01      	subs	r3, #1
 8012fc6:	62bb      	str	r3, [r7, #40]	; 0x28
            while (FATs)
 8012fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fca:	2b00      	cmp	r3, #0
 8012fcc:	d1c9      	bne.n	8012f62 <_fx_utility_FAT_map_flush+0xc6>
        for (; FAT_sector < last_sector; FAT_sector++)
 8012fce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012fd0:	3301      	adds	r3, #1
 8012fd2:	637b      	str	r3, [r7, #52]	; 0x34
 8012fd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fd8:	429a      	cmp	r2, r3
 8012fda:	d3a7      	bcc.n	8012f2c <_fx_utility_FAT_map_flush+0x90>
 8012fdc:	e000      	b.n	8012fe0 <_fx_utility_FAT_map_flush+0x144>
            continue;
 8012fde:	bf00      	nop
    for (i = 0; i < FX_FAT_MAP_SIZE << 3; i++)
 8012fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fe2:	3301      	adds	r3, #1
 8012fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fe8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012fec:	f4ff af71 	bcc.w	8012ed2 <_fx_utility_FAT_map_flush+0x36>
            }
        }
    }

    /* Clear the bit map that indicates primary FAT updates.  */
    for (i = 0; i < FX_FAT_MAP_SIZE; i++)
 8012ff0:	2300      	movs	r3, #0
 8012ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012ff4:	e009      	b.n	801300a <_fx_utility_FAT_map_flush+0x16e>
    {

        /* Clear each entry in the bit map.  */
        media_ptr -> fx_media_fat_secondary_update_map[i] =  0;
 8012ff6:	69fa      	ldr	r2, [r7, #28]
 8012ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ffa:	4413      	add	r3, r2
 8012ffc:	f603 0318 	addw	r3, r3, #2072	; 0x818
 8013000:	2200      	movs	r2, #0
 8013002:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < FX_FAT_MAP_SIZE; i++)
 8013004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013006:	3301      	adds	r3, #1
 8013008:	62fb      	str	r3, [r7, #44]	; 0x2c
 801300a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801300c:	2b7f      	cmp	r3, #127	; 0x7f
 801300e:	d9f2      	bls.n	8012ff6 <_fx_utility_FAT_map_flush+0x15a>
    }

    /* Return a successful completion.  */
    return(FX_SUCCESS);
 8013010:	2300      	movs	r3, #0
}
 8013012:	4618      	mov	r0, r3
 8013014:	3738      	adds	r7, #56	; 0x38
 8013016:	46bd      	mov	sp, r7
 8013018:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801301c <_fx_utility_logical_sector_cache_entry_read>:
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
FX_CACHED_SECTOR  *_fx_utility_logical_sector_cache_entry_read(FX_MEDIA *media_ptr, ULONG64 logical_sector,
                                                               FX_CACHED_SECTOR **previous_cache_entry)
{
 801301c:	b480      	push	{r7}
 801301e:	b08f      	sub	sp, #60	; 0x3c
 8013020:	af00      	add	r7, sp, #0
 8013022:	60f8      	str	r0, [r7, #12]
 8013024:	e9c7 2300 	strd	r2, r3, [r7]
ULONG             cache_size;
ULONG             index;


    /* Determine if the logical sector cache access should use the hash function.  */
    if (media_ptr -> fx_media_sector_cache_hashed)
 8013028:	68fb      	ldr	r3, [r7, #12]
 801302a:	691b      	ldr	r3, [r3, #16]
 801302c:	2b00      	cmp	r3, #0
 801302e:	f000 8275 	beq.w	801351c <_fx_utility_logical_sector_cache_entry_read+0x500>

        /* Calculate the area of the cache for this logical sector.  */

        /* First compute the hashed value of this index by simply using the lower bits of
           the sector number.  */
        index =  (ULONG)(logical_sector & media_ptr -> fx_media_sector_cache_hash_mask);
 8013032:	683a      	ldr	r2, [r7, #0]
 8013034:	68fb      	ldr	r3, [r7, #12]
 8013036:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801303a:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 801303e:	4013      	ands	r3, r2
 8013040:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Set the bit indicating there is one or more valid sectors at this cache index.  */
        media_ptr -> fx_media_sector_cache_hashed_sector_valid |=  ((ULONG)1) << (index % 32);
 8013042:	68fb      	ldr	r3, [r7, #12]
 8013044:	6a1a      	ldr	r2, [r3, #32]
 8013046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013048:	f003 031f 	and.w	r3, r3, #31
 801304c:	2101      	movs	r1, #1
 801304e:	fa01 f303 	lsl.w	r3, r1, r3
 8013052:	431a      	orrs	r2, r3
 8013054:	68fb      	ldr	r3, [r7, #12]
 8013056:	621a      	str	r2, [r3, #32]

        /* Compute the actual array index by multiplying by the cache depth.  */
        index =  index * FX_SECTOR_CACHE_DEPTH;
 8013058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801305a:	009b      	lsls	r3, r3, #2
 801305c:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Build a pointer to the cache entry.  */
        cache_entry =  &(media_ptr -> fx_media_sector_cache[index]);
 801305e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013060:	4613      	mov	r3, r2
 8013062:	005b      	lsls	r3, r3, #1
 8013064:	4413      	add	r3, r2
 8013066:	00db      	lsls	r3, r3, #3
 8013068:	f503 634a 	add.w	r3, r3, #3232	; 0xca0
 801306c:	68fa      	ldr	r2, [r7, #12]
 801306e:	4413      	add	r3, r2
 8013070:	637b      	str	r3, [r7, #52]	; 0x34

        /* Determine if the logical sector is in the cache - assuming the depth of the
           sector cache is 4 entries.  */
        if ((cache_entry -> fx_cached_sector_valid) && (cache_entry -> fx_cached_sector == logical_sector))
 8013072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013074:	7c5b      	ldrb	r3, [r3, #17]
 8013076:	2b00      	cmp	r3, #0
 8013078:	d015      	beq.n	80130a6 <_fx_utility_logical_sector_cache_entry_read+0x8a>
 801307a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801307c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8013080:	e9d7 0100 	ldrd	r0, r1, [r7]
 8013084:	4299      	cmp	r1, r3
 8013086:	bf08      	it	eq
 8013088:	4290      	cmpeq	r0, r2
 801308a:	d10c      	bne.n	80130a6 <_fx_utility_logical_sector_cache_entry_read+0x8a>
        {

            /* Yes, we found a match.  Simply setup the pointer to this
               buffer and return.  */
            media_ptr -> fx_media_memory_buffer =  cache_entry -> fx_cached_sector_memory_buffer;
 801308c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801308e:	681a      	ldr	r2, [r3, #0]
 8013090:	68fb      	ldr	r3, [r7, #12]
 8013092:	609a      	str	r2, [r3, #8]

#ifndef FX_MEDIA_STATISTICS_DISABLE

            /* Increment the number of logical sectors cache read hits.  */
            media_ptr -> fx_media_logical_sector_cache_read_hits++;
 8013094:	68fb      	ldr	r3, [r7, #12]
 8013096:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 801309a:	1c5a      	adds	r2, r3, #1
 801309c:	68fb      	ldr	r3, [r7, #12]
 801309e:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
#endif
            /* Success, return to caller immediately!  */
            return(FX_NULL);
 80130a2:	2300      	movs	r3, #0
 80130a4:	e27e      	b.n	80135a4 <_fx_utility_logical_sector_cache_entry_read+0x588>
        }
        else if (((cache_entry + 1) -> fx_cached_sector_valid) && ((cache_entry + 1) -> fx_cached_sector == logical_sector))
 80130a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80130a8:	3318      	adds	r3, #24
 80130aa:	7c5b      	ldrb	r3, [r3, #17]
 80130ac:	2b00      	cmp	r3, #0
 80130ae:	d060      	beq.n	8013172 <_fx_utility_logical_sector_cache_entry_read+0x156>
 80130b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80130b2:	3318      	adds	r3, #24
 80130b4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80130b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80130bc:	4299      	cmp	r1, r3
 80130be:	bf08      	it	eq
 80130c0:	4290      	cmpeq	r0, r2
 80130c2:	d156      	bne.n	8013172 <_fx_utility_logical_sector_cache_entry_read+0x156>
        {

            /* Yes, we found a match.  Simply setup the pointer to this
               buffer and return.  */
            media_ptr -> fx_media_memory_buffer =  (cache_entry + 1) -> fx_cached_sector_memory_buffer;
 80130c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80130c6:	3318      	adds	r3, #24
 80130c8:	681a      	ldr	r2, [r3, #0]
 80130ca:	68fb      	ldr	r3, [r7, #12]
 80130cc:	609a      	str	r2, [r3, #8]

#ifndef FX_MEDIA_STATISTICS_DISABLE

            /* Increment the number of logical sectors cache read hits.  */
            media_ptr -> fx_media_logical_sector_cache_read_hits++;
 80130ce:	68fb      	ldr	r3, [r7, #12]
 80130d0:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80130d4:	1c5a      	adds	r2, r3, #1
 80130d6:	68fb      	ldr	r3, [r7, #12]
 80130d8:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
#endif

            /* Swap the first and second cache entries to keep the most recently used
               at the top.  */
            temp_storage.fx_cached_sector_memory_buffer =           (cache_entry) -> fx_cached_sector_memory_buffer;
 80130dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80130de:	681b      	ldr	r3, [r3, #0]
 80130e0:	613b      	str	r3, [r7, #16]
            temp_storage.fx_cached_sector =                         (cache_entry) -> fx_cached_sector;
 80130e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80130e4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80130e8:	e9c7 2306 	strd	r2, r3, [r7, #24]
            temp_storage.fx_cached_sector_buffer_dirty =            (cache_entry) -> fx_cached_sector_buffer_dirty;
 80130ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80130ee:	7c1b      	ldrb	r3, [r3, #16]
 80130f0:	f887 3020 	strb.w	r3, [r7, #32]
            temp_storage.fx_cached_sector_valid =                   (cache_entry) -> fx_cached_sector_valid;
 80130f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80130f6:	7c5b      	ldrb	r3, [r3, #17]
 80130f8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            temp_storage.fx_cached_sector_type =                    (cache_entry) -> fx_cached_sector_type;
 80130fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80130fe:	7c9b      	ldrb	r3, [r3, #18]
 8013100:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

            (cache_entry) -> fx_cached_sector_memory_buffer =       (cache_entry + 1) -> fx_cached_sector_memory_buffer;
 8013104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013106:	3318      	adds	r3, #24
 8013108:	681a      	ldr	r2, [r3, #0]
 801310a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801310c:	601a      	str	r2, [r3, #0]
            (cache_entry) -> fx_cached_sector =                     (cache_entry + 1) -> fx_cached_sector;
 801310e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013110:	3318      	adds	r3, #24
 8013112:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8013116:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013118:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry) -> fx_cached_sector_buffer_dirty =        (cache_entry + 1) -> fx_cached_sector_buffer_dirty;
 801311c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801311e:	3318      	adds	r3, #24
 8013120:	7c1a      	ldrb	r2, [r3, #16]
 8013122:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013124:	741a      	strb	r2, [r3, #16]
            (cache_entry) -> fx_cached_sector_valid =               (cache_entry + 1) -> fx_cached_sector_valid;
 8013126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013128:	3318      	adds	r3, #24
 801312a:	7c5a      	ldrb	r2, [r3, #17]
 801312c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801312e:	745a      	strb	r2, [r3, #17]
            (cache_entry) -> fx_cached_sector_type =                (cache_entry + 1) -> fx_cached_sector_type;
 8013130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013132:	3318      	adds	r3, #24
 8013134:	7c9a      	ldrb	r2, [r3, #18]
 8013136:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013138:	749a      	strb	r2, [r3, #18]

            (cache_entry + 1) -> fx_cached_sector_memory_buffer =   temp_storage.fx_cached_sector_memory_buffer;
 801313a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801313c:	3318      	adds	r3, #24
 801313e:	693a      	ldr	r2, [r7, #16]
 8013140:	601a      	str	r2, [r3, #0]
            (cache_entry + 1) -> fx_cached_sector =                 temp_storage.fx_cached_sector;
 8013142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013144:	f103 0118 	add.w	r1, r3, #24
 8013148:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801314c:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry + 1) -> fx_cached_sector_buffer_dirty =    temp_storage.fx_cached_sector_buffer_dirty;
 8013150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013152:	3318      	adds	r3, #24
 8013154:	f897 2020 	ldrb.w	r2, [r7, #32]
 8013158:	741a      	strb	r2, [r3, #16]
            (cache_entry + 1) -> fx_cached_sector_valid =           temp_storage.fx_cached_sector_valid;
 801315a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801315c:	3318      	adds	r3, #24
 801315e:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8013162:	745a      	strb	r2, [r3, #17]
            (cache_entry + 1) -> fx_cached_sector_type =            temp_storage.fx_cached_sector_type;
 8013164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013166:	3318      	adds	r3, #24
 8013168:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801316c:	749a      	strb	r2, [r3, #18]

            /* Success, return to caller immediately!  */
            return(FX_NULL);
 801316e:	2300      	movs	r3, #0
 8013170:	e218      	b.n	80135a4 <_fx_utility_logical_sector_cache_entry_read+0x588>
        }
        else if (((cache_entry + 2) -> fx_cached_sector_valid) && ((cache_entry + 2) -> fx_cached_sector == logical_sector))
 8013172:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013174:	3330      	adds	r3, #48	; 0x30
 8013176:	7c5b      	ldrb	r3, [r3, #17]
 8013178:	2b00      	cmp	r3, #0
 801317a:	f000 8086 	beq.w	801328a <_fx_utility_logical_sector_cache_entry_read+0x26e>
 801317e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013180:	3330      	adds	r3, #48	; 0x30
 8013182:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8013186:	e9d7 0100 	ldrd	r0, r1, [r7]
 801318a:	4299      	cmp	r1, r3
 801318c:	bf08      	it	eq
 801318e:	4290      	cmpeq	r0, r2
 8013190:	d17b      	bne.n	801328a <_fx_utility_logical_sector_cache_entry_read+0x26e>
        {

            /* Yes, we found a match.  Simply setup the pointer to this
               buffer and return.  */
            media_ptr -> fx_media_memory_buffer =  (cache_entry + 2) -> fx_cached_sector_memory_buffer;
 8013192:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013194:	3330      	adds	r3, #48	; 0x30
 8013196:	681a      	ldr	r2, [r3, #0]
 8013198:	68fb      	ldr	r3, [r7, #12]
 801319a:	609a      	str	r2, [r3, #8]

#ifndef FX_MEDIA_STATISTICS_DISABLE

            /* Increment the number of logical sectors cache read hits.  */
            media_ptr -> fx_media_logical_sector_cache_read_hits++;
 801319c:	68fb      	ldr	r3, [r7, #12]
 801319e:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80131a2:	1c5a      	adds	r2, r3, #1
 80131a4:	68fb      	ldr	r3, [r7, #12]
 80131a6:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
#endif

            /* Move the third entry to the top and the first two entries down.  */
            temp_storage.fx_cached_sector_memory_buffer =           (cache_entry) -> fx_cached_sector_memory_buffer;
 80131aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80131ac:	681b      	ldr	r3, [r3, #0]
 80131ae:	613b      	str	r3, [r7, #16]
            temp_storage.fx_cached_sector =                         (cache_entry) -> fx_cached_sector;
 80131b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80131b2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80131b6:	e9c7 2306 	strd	r2, r3, [r7, #24]
            temp_storage.fx_cached_sector_buffer_dirty =            (cache_entry) -> fx_cached_sector_buffer_dirty;
 80131ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80131bc:	7c1b      	ldrb	r3, [r3, #16]
 80131be:	f887 3020 	strb.w	r3, [r7, #32]
            temp_storage.fx_cached_sector_valid =                   (cache_entry) -> fx_cached_sector_valid;
 80131c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80131c4:	7c5b      	ldrb	r3, [r3, #17]
 80131c6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            temp_storage.fx_cached_sector_type =                    (cache_entry) -> fx_cached_sector_type;
 80131ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80131cc:	7c9b      	ldrb	r3, [r3, #18]
 80131ce:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

            (cache_entry) -> fx_cached_sector_memory_buffer =       (cache_entry + 2) -> fx_cached_sector_memory_buffer;
 80131d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80131d4:	3330      	adds	r3, #48	; 0x30
 80131d6:	681a      	ldr	r2, [r3, #0]
 80131d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80131da:	601a      	str	r2, [r3, #0]
            (cache_entry) -> fx_cached_sector =                     (cache_entry + 2) -> fx_cached_sector;
 80131dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80131de:	3330      	adds	r3, #48	; 0x30
 80131e0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80131e4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80131e6:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry) -> fx_cached_sector_buffer_dirty =        (cache_entry + 2) -> fx_cached_sector_buffer_dirty;
 80131ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80131ec:	3330      	adds	r3, #48	; 0x30
 80131ee:	7c1a      	ldrb	r2, [r3, #16]
 80131f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80131f2:	741a      	strb	r2, [r3, #16]
            (cache_entry) -> fx_cached_sector_valid =               (cache_entry + 2) -> fx_cached_sector_valid;
 80131f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80131f6:	3330      	adds	r3, #48	; 0x30
 80131f8:	7c5a      	ldrb	r2, [r3, #17]
 80131fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80131fc:	745a      	strb	r2, [r3, #17]
            (cache_entry) -> fx_cached_sector_type =                (cache_entry + 2) -> fx_cached_sector_type;
 80131fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013200:	3330      	adds	r3, #48	; 0x30
 8013202:	7c9a      	ldrb	r2, [r3, #18]
 8013204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013206:	749a      	strb	r2, [r3, #18]

            (cache_entry + 2) -> fx_cached_sector_memory_buffer =   (cache_entry + 1) -> fx_cached_sector_memory_buffer;
 8013208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801320a:	f103 0218 	add.w	r2, r3, #24
 801320e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013210:	3330      	adds	r3, #48	; 0x30
 8013212:	6812      	ldr	r2, [r2, #0]
 8013214:	601a      	str	r2, [r3, #0]
            (cache_entry + 2) -> fx_cached_sector =                 (cache_entry + 1) -> fx_cached_sector;
 8013216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013218:	3318      	adds	r3, #24
 801321a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801321c:	f102 0130 	add.w	r1, r2, #48	; 0x30
 8013220:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8013224:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry + 2) -> fx_cached_sector_buffer_dirty =    (cache_entry + 1) -> fx_cached_sector_buffer_dirty;
 8013228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801322a:	f103 0218 	add.w	r2, r3, #24
 801322e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013230:	3330      	adds	r3, #48	; 0x30
 8013232:	7c12      	ldrb	r2, [r2, #16]
 8013234:	741a      	strb	r2, [r3, #16]
            (cache_entry + 2) -> fx_cached_sector_valid =           (cache_entry + 1) -> fx_cached_sector_valid;
 8013236:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013238:	f103 0218 	add.w	r2, r3, #24
 801323c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801323e:	3330      	adds	r3, #48	; 0x30
 8013240:	7c52      	ldrb	r2, [r2, #17]
 8013242:	745a      	strb	r2, [r3, #17]
            (cache_entry + 2) -> fx_cached_sector_type =            (cache_entry + 1) -> fx_cached_sector_type;
 8013244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013246:	f103 0218 	add.w	r2, r3, #24
 801324a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801324c:	3330      	adds	r3, #48	; 0x30
 801324e:	7c92      	ldrb	r2, [r2, #18]
 8013250:	749a      	strb	r2, [r3, #18]

            (cache_entry + 1) -> fx_cached_sector_memory_buffer =   temp_storage.fx_cached_sector_memory_buffer;
 8013252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013254:	3318      	adds	r3, #24
 8013256:	693a      	ldr	r2, [r7, #16]
 8013258:	601a      	str	r2, [r3, #0]
            (cache_entry + 1) -> fx_cached_sector =                 temp_storage.fx_cached_sector;
 801325a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801325c:	f103 0118 	add.w	r1, r3, #24
 8013260:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8013264:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry + 1) -> fx_cached_sector_buffer_dirty =    temp_storage.fx_cached_sector_buffer_dirty;
 8013268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801326a:	3318      	adds	r3, #24
 801326c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8013270:	741a      	strb	r2, [r3, #16]
            (cache_entry + 1) -> fx_cached_sector_valid =           temp_storage.fx_cached_sector_valid;
 8013272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013274:	3318      	adds	r3, #24
 8013276:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 801327a:	745a      	strb	r2, [r3, #17]
            (cache_entry + 1) -> fx_cached_sector_type =            temp_storage.fx_cached_sector_type;
 801327c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801327e:	3318      	adds	r3, #24
 8013280:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8013284:	749a      	strb	r2, [r3, #18]

            /* Success, return to caller immediately!  */
            return(FX_NULL);
 8013286:	2300      	movs	r3, #0
 8013288:	e18c      	b.n	80135a4 <_fx_utility_logical_sector_cache_entry_read+0x588>
        }
        else if (((cache_entry + 3) -> fx_cached_sector_valid) && ((cache_entry + 3) -> fx_cached_sector == logical_sector))
 801328a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801328c:	3348      	adds	r3, #72	; 0x48
 801328e:	7c5b      	ldrb	r3, [r3, #17]
 8013290:	2b00      	cmp	r3, #0
 8013292:	f000 80ac 	beq.w	80133ee <_fx_utility_logical_sector_cache_entry_read+0x3d2>
 8013296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013298:	3348      	adds	r3, #72	; 0x48
 801329a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801329e:	e9d7 0100 	ldrd	r0, r1, [r7]
 80132a2:	4299      	cmp	r1, r3
 80132a4:	bf08      	it	eq
 80132a6:	4290      	cmpeq	r0, r2
 80132a8:	f040 80a1 	bne.w	80133ee <_fx_utility_logical_sector_cache_entry_read+0x3d2>
        {

            /* Yes, we found a match.  Simply setup the pointer to this
               buffer and return.  */
            media_ptr -> fx_media_memory_buffer =  (cache_entry + 3) -> fx_cached_sector_memory_buffer;
 80132ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80132ae:	3348      	adds	r3, #72	; 0x48
 80132b0:	681a      	ldr	r2, [r3, #0]
 80132b2:	68fb      	ldr	r3, [r7, #12]
 80132b4:	609a      	str	r2, [r3, #8]

#ifndef FX_MEDIA_STATISTICS_DISABLE

            /* Increment the number of logical sectors cache read hits.  */
            media_ptr -> fx_media_logical_sector_cache_read_hits++;
 80132b6:	68fb      	ldr	r3, [r7, #12]
 80132b8:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80132bc:	1c5a      	adds	r2, r3, #1
 80132be:	68fb      	ldr	r3, [r7, #12]
 80132c0:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
#endif

            /* Move the last entry to the top and the first three entries down.  */
            temp_storage.fx_cached_sector_memory_buffer =           (cache_entry) -> fx_cached_sector_memory_buffer;
 80132c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80132c6:	681b      	ldr	r3, [r3, #0]
 80132c8:	613b      	str	r3, [r7, #16]
            temp_storage.fx_cached_sector =                         (cache_entry) -> fx_cached_sector;
 80132ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80132cc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80132d0:	e9c7 2306 	strd	r2, r3, [r7, #24]
            temp_storage.fx_cached_sector_buffer_dirty =            (cache_entry) -> fx_cached_sector_buffer_dirty;
 80132d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80132d6:	7c1b      	ldrb	r3, [r3, #16]
 80132d8:	f887 3020 	strb.w	r3, [r7, #32]
            temp_storage.fx_cached_sector_valid =                   (cache_entry) -> fx_cached_sector_valid;
 80132dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80132de:	7c5b      	ldrb	r3, [r3, #17]
 80132e0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            temp_storage.fx_cached_sector_type =                    (cache_entry) -> fx_cached_sector_type;
 80132e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80132e6:	7c9b      	ldrb	r3, [r3, #18]
 80132e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

            (cache_entry) -> fx_cached_sector_memory_buffer =       (cache_entry + 3) -> fx_cached_sector_memory_buffer;
 80132ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80132ee:	3348      	adds	r3, #72	; 0x48
 80132f0:	681a      	ldr	r2, [r3, #0]
 80132f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80132f4:	601a      	str	r2, [r3, #0]
            (cache_entry) -> fx_cached_sector =                     (cache_entry + 3) -> fx_cached_sector;
 80132f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80132f8:	3348      	adds	r3, #72	; 0x48
 80132fa:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80132fe:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013300:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry) -> fx_cached_sector_buffer_dirty =        (cache_entry + 3) -> fx_cached_sector_buffer_dirty;
 8013304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013306:	3348      	adds	r3, #72	; 0x48
 8013308:	7c1a      	ldrb	r2, [r3, #16]
 801330a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801330c:	741a      	strb	r2, [r3, #16]
            (cache_entry) -> fx_cached_sector_valid =               (cache_entry + 3) -> fx_cached_sector_valid;
 801330e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013310:	3348      	adds	r3, #72	; 0x48
 8013312:	7c5a      	ldrb	r2, [r3, #17]
 8013314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013316:	745a      	strb	r2, [r3, #17]
            (cache_entry) -> fx_cached_sector_type =                (cache_entry + 3) -> fx_cached_sector_type;
 8013318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801331a:	3348      	adds	r3, #72	; 0x48
 801331c:	7c9a      	ldrb	r2, [r3, #18]
 801331e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013320:	749a      	strb	r2, [r3, #18]

            (cache_entry + 3) -> fx_cached_sector_memory_buffer =   (cache_entry + 2) -> fx_cached_sector_memory_buffer;
 8013322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013324:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8013328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801332a:	3348      	adds	r3, #72	; 0x48
 801332c:	6812      	ldr	r2, [r2, #0]
 801332e:	601a      	str	r2, [r3, #0]
            (cache_entry + 3) -> fx_cached_sector =                 (cache_entry + 2) -> fx_cached_sector;
 8013330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013332:	3330      	adds	r3, #48	; 0x30
 8013334:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013336:	f102 0148 	add.w	r1, r2, #72	; 0x48
 801333a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801333e:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry + 3) -> fx_cached_sector_buffer_dirty =    (cache_entry + 2) -> fx_cached_sector_buffer_dirty;
 8013342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013344:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8013348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801334a:	3348      	adds	r3, #72	; 0x48
 801334c:	7c12      	ldrb	r2, [r2, #16]
 801334e:	741a      	strb	r2, [r3, #16]
            (cache_entry + 3) -> fx_cached_sector_valid =           (cache_entry + 2) -> fx_cached_sector_valid;
 8013350:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013352:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8013356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013358:	3348      	adds	r3, #72	; 0x48
 801335a:	7c52      	ldrb	r2, [r2, #17]
 801335c:	745a      	strb	r2, [r3, #17]
            (cache_entry + 3) -> fx_cached_sector_type =            (cache_entry + 2) -> fx_cached_sector_type;
 801335e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013360:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8013364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013366:	3348      	adds	r3, #72	; 0x48
 8013368:	7c92      	ldrb	r2, [r2, #18]
 801336a:	749a      	strb	r2, [r3, #18]

            (cache_entry + 2) -> fx_cached_sector_memory_buffer =   (cache_entry + 1) -> fx_cached_sector_memory_buffer;
 801336c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801336e:	f103 0218 	add.w	r2, r3, #24
 8013372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013374:	3330      	adds	r3, #48	; 0x30
 8013376:	6812      	ldr	r2, [r2, #0]
 8013378:	601a      	str	r2, [r3, #0]
            (cache_entry + 2) -> fx_cached_sector =                 (cache_entry + 1) -> fx_cached_sector;
 801337a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801337c:	3318      	adds	r3, #24
 801337e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013380:	f102 0130 	add.w	r1, r2, #48	; 0x30
 8013384:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8013388:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry + 2) -> fx_cached_sector_buffer_dirty =    (cache_entry + 1) -> fx_cached_sector_buffer_dirty;
 801338c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801338e:	f103 0218 	add.w	r2, r3, #24
 8013392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013394:	3330      	adds	r3, #48	; 0x30
 8013396:	7c12      	ldrb	r2, [r2, #16]
 8013398:	741a      	strb	r2, [r3, #16]
            (cache_entry + 2) -> fx_cached_sector_valid =           (cache_entry + 1) -> fx_cached_sector_valid;
 801339a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801339c:	f103 0218 	add.w	r2, r3, #24
 80133a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80133a2:	3330      	adds	r3, #48	; 0x30
 80133a4:	7c52      	ldrb	r2, [r2, #17]
 80133a6:	745a      	strb	r2, [r3, #17]
            (cache_entry + 2) -> fx_cached_sector_type =            (cache_entry + 1) -> fx_cached_sector_type;
 80133a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80133aa:	f103 0218 	add.w	r2, r3, #24
 80133ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80133b0:	3330      	adds	r3, #48	; 0x30
 80133b2:	7c92      	ldrb	r2, [r2, #18]
 80133b4:	749a      	strb	r2, [r3, #18]

            (cache_entry + 1) -> fx_cached_sector_memory_buffer =   temp_storage.fx_cached_sector_memory_buffer;
 80133b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80133b8:	3318      	adds	r3, #24
 80133ba:	693a      	ldr	r2, [r7, #16]
 80133bc:	601a      	str	r2, [r3, #0]
            (cache_entry + 1) -> fx_cached_sector =                 temp_storage.fx_cached_sector;
 80133be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80133c0:	f103 0118 	add.w	r1, r3, #24
 80133c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80133c8:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry + 1) -> fx_cached_sector_buffer_dirty =    temp_storage.fx_cached_sector_buffer_dirty;
 80133cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80133ce:	3318      	adds	r3, #24
 80133d0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80133d4:	741a      	strb	r2, [r3, #16]
            (cache_entry + 1) -> fx_cached_sector_valid =           temp_storage.fx_cached_sector_valid;
 80133d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80133d8:	3318      	adds	r3, #24
 80133da:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80133de:	745a      	strb	r2, [r3, #17]
            (cache_entry + 1) -> fx_cached_sector_type =            temp_storage.fx_cached_sector_type;
 80133e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80133e2:	3318      	adds	r3, #24
 80133e4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80133e8:	749a      	strb	r2, [r3, #18]

            /* Success, return to caller immediately!  */
            return(FX_NULL);
 80133ea:	2300      	movs	r3, #0
 80133ec:	e0da      	b.n	80135a4 <_fx_utility_logical_sector_cache_entry_read+0x588>
        }

        /* At this point we have a cache miss.  We need to move all of the sectors down one slot, swapping
           the 4th entry with the first.  */
        temp_storage.fx_cached_sector_memory_buffer =           (cache_entry + 3) -> fx_cached_sector_memory_buffer;
 80133ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80133f0:	3348      	adds	r3, #72	; 0x48
 80133f2:	681b      	ldr	r3, [r3, #0]
 80133f4:	613b      	str	r3, [r7, #16]
        temp_storage.fx_cached_sector =                         (cache_entry + 3) -> fx_cached_sector;
 80133f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80133f8:	3348      	adds	r3, #72	; 0x48
 80133fa:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80133fe:	e9c7 2306 	strd	r2, r3, [r7, #24]
        temp_storage.fx_cached_sector_buffer_dirty =            (cache_entry + 3) -> fx_cached_sector_buffer_dirty;
 8013402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013404:	3348      	adds	r3, #72	; 0x48
 8013406:	7c1b      	ldrb	r3, [r3, #16]
 8013408:	f887 3020 	strb.w	r3, [r7, #32]
        temp_storage.fx_cached_sector_valid =                   (cache_entry + 3) -> fx_cached_sector_valid;
 801340c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801340e:	3348      	adds	r3, #72	; 0x48
 8013410:	7c5b      	ldrb	r3, [r3, #17]
 8013412:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        temp_storage.fx_cached_sector_type =                    (cache_entry + 3) -> fx_cached_sector_type;
 8013416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013418:	3348      	adds	r3, #72	; 0x48
 801341a:	7c9b      	ldrb	r3, [r3, #18]
 801341c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

        (cache_entry + 3) -> fx_cached_sector_memory_buffer =   (cache_entry + 2) -> fx_cached_sector_memory_buffer;
 8013420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013422:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8013426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013428:	3348      	adds	r3, #72	; 0x48
 801342a:	6812      	ldr	r2, [r2, #0]
 801342c:	601a      	str	r2, [r3, #0]
        (cache_entry + 3) -> fx_cached_sector =                 (cache_entry + 2) -> fx_cached_sector;
 801342e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013430:	3330      	adds	r3, #48	; 0x30
 8013432:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013434:	f102 0148 	add.w	r1, r2, #72	; 0x48
 8013438:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801343c:	e9c1 2302 	strd	r2, r3, [r1, #8]
        (cache_entry + 3) -> fx_cached_sector_buffer_dirty =    (cache_entry + 2) -> fx_cached_sector_buffer_dirty;
 8013440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013442:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8013446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013448:	3348      	adds	r3, #72	; 0x48
 801344a:	7c12      	ldrb	r2, [r2, #16]
 801344c:	741a      	strb	r2, [r3, #16]
        (cache_entry + 3) -> fx_cached_sector_valid =           (cache_entry + 2) -> fx_cached_sector_valid;
 801344e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013450:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8013454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013456:	3348      	adds	r3, #72	; 0x48
 8013458:	7c52      	ldrb	r2, [r2, #17]
 801345a:	745a      	strb	r2, [r3, #17]
        (cache_entry + 3) -> fx_cached_sector_type =            (cache_entry + 2) -> fx_cached_sector_type;
 801345c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801345e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8013462:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013464:	3348      	adds	r3, #72	; 0x48
 8013466:	7c92      	ldrb	r2, [r2, #18]
 8013468:	749a      	strb	r2, [r3, #18]

        (cache_entry + 2) -> fx_cached_sector_memory_buffer =   (cache_entry + 1) -> fx_cached_sector_memory_buffer;
 801346a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801346c:	f103 0218 	add.w	r2, r3, #24
 8013470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013472:	3330      	adds	r3, #48	; 0x30
 8013474:	6812      	ldr	r2, [r2, #0]
 8013476:	601a      	str	r2, [r3, #0]
        (cache_entry + 2) -> fx_cached_sector =                 (cache_entry + 1) -> fx_cached_sector;
 8013478:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801347a:	3318      	adds	r3, #24
 801347c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801347e:	f102 0130 	add.w	r1, r2, #48	; 0x30
 8013482:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8013486:	e9c1 2302 	strd	r2, r3, [r1, #8]
        (cache_entry + 2) -> fx_cached_sector_buffer_dirty =    (cache_entry + 1) -> fx_cached_sector_buffer_dirty;
 801348a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801348c:	f103 0218 	add.w	r2, r3, #24
 8013490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013492:	3330      	adds	r3, #48	; 0x30
 8013494:	7c12      	ldrb	r2, [r2, #16]
 8013496:	741a      	strb	r2, [r3, #16]
        (cache_entry + 2) -> fx_cached_sector_valid =           (cache_entry + 1) -> fx_cached_sector_valid;
 8013498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801349a:	f103 0218 	add.w	r2, r3, #24
 801349e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80134a0:	3330      	adds	r3, #48	; 0x30
 80134a2:	7c52      	ldrb	r2, [r2, #17]
 80134a4:	745a      	strb	r2, [r3, #17]
        (cache_entry + 2) -> fx_cached_sector_type =            (cache_entry + 1) -> fx_cached_sector_type;
 80134a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80134a8:	f103 0218 	add.w	r2, r3, #24
 80134ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80134ae:	3330      	adds	r3, #48	; 0x30
 80134b0:	7c92      	ldrb	r2, [r2, #18]
 80134b2:	749a      	strb	r2, [r3, #18]

        (cache_entry + 1) -> fx_cached_sector_memory_buffer =   (cache_entry) -> fx_cached_sector_memory_buffer;
 80134b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80134b6:	3318      	adds	r3, #24
 80134b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80134ba:	6812      	ldr	r2, [r2, #0]
 80134bc:	601a      	str	r2, [r3, #0]
        (cache_entry + 1) -> fx_cached_sector =                 (cache_entry) -> fx_cached_sector;
 80134be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80134c0:	f103 0118 	add.w	r1, r3, #24
 80134c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80134c6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80134ca:	e9c1 2302 	strd	r2, r3, [r1, #8]
        (cache_entry + 1) -> fx_cached_sector_buffer_dirty =    (cache_entry) -> fx_cached_sector_buffer_dirty;
 80134ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80134d0:	3318      	adds	r3, #24
 80134d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80134d4:	7c12      	ldrb	r2, [r2, #16]
 80134d6:	741a      	strb	r2, [r3, #16]
        (cache_entry + 1) -> fx_cached_sector_valid =           (cache_entry) -> fx_cached_sector_valid;
 80134d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80134da:	3318      	adds	r3, #24
 80134dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80134de:	7c52      	ldrb	r2, [r2, #17]
 80134e0:	745a      	strb	r2, [r3, #17]
        (cache_entry + 1) -> fx_cached_sector_type =            (cache_entry) -> fx_cached_sector_type;
 80134e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80134e4:	3318      	adds	r3, #24
 80134e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80134e8:	7c92      	ldrb	r2, [r2, #18]
 80134ea:	749a      	strb	r2, [r3, #18]

        (cache_entry) -> fx_cached_sector_memory_buffer =       temp_storage.fx_cached_sector_memory_buffer;
 80134ec:	693a      	ldr	r2, [r7, #16]
 80134ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80134f0:	601a      	str	r2, [r3, #0]
        (cache_entry) -> fx_cached_sector =                     temp_storage.fx_cached_sector;
 80134f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80134f6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80134f8:	e9c1 2302 	strd	r2, r3, [r1, #8]
        (cache_entry) -> fx_cached_sector_buffer_dirty =        temp_storage.fx_cached_sector_buffer_dirty;
 80134fc:	f897 2020 	ldrb.w	r2, [r7, #32]
 8013500:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013502:	741a      	strb	r2, [r3, #16]
        (cache_entry) -> fx_cached_sector_valid =               temp_storage.fx_cached_sector_valid;
 8013504:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8013508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801350a:	745a      	strb	r2, [r3, #17]
        (cache_entry) -> fx_cached_sector_type =                temp_storage.fx_cached_sector_type;
 801350c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8013510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013512:	749a      	strb	r2, [r3, #18]

        /* Set the previous pointer to NULL to avoid the linked list update below.  */
        *previous_cache_entry =  FX_NULL;
 8013514:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013516:	2200      	movs	r2, #0
 8013518:	601a      	str	r2, [r3, #0]
 801351a:	e042      	b.n	80135a2 <_fx_utility_logical_sector_cache_entry_read+0x586>
    }
    else
    {

        /* Search for an entry in the cache that matches this request.  */
        cache_size =            media_ptr -> fx_media_sector_cache_size;
 801351c:	68fb      	ldr	r3, [r7, #12]
 801351e:	695b      	ldr	r3, [r3, #20]
 8013520:	633b      	str	r3, [r7, #48]	; 0x30
        cache_entry =           media_ptr -> fx_media_sector_cache_list_ptr;
 8013522:	68fb      	ldr	r3, [r7, #12]
 8013524:	69db      	ldr	r3, [r3, #28]
 8013526:	637b      	str	r3, [r7, #52]	; 0x34
        *previous_cache_entry =  FX_NULL;
 8013528:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801352a:	2200      	movs	r2, #0
 801352c:	601a      	str	r2, [r3, #0]

        /* Look at the cache entries until a match is found or the end of
           the cache is reached.  */
        while (cache_size--)
 801352e:	e033      	b.n	8013598 <_fx_utility_logical_sector_cache_entry_read+0x57c>
        {

            /* Determine if the requested sector has been found.  */
            if ((cache_entry -> fx_cached_sector_valid) && (cache_entry -> fx_cached_sector == logical_sector))
 8013530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013532:	7c5b      	ldrb	r3, [r3, #17]
 8013534:	2b00      	cmp	r3, #0
 8013536:	d025      	beq.n	8013584 <_fx_utility_logical_sector_cache_entry_read+0x568>
 8013538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801353a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801353e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8013542:	4299      	cmp	r1, r3
 8013544:	bf08      	it	eq
 8013546:	4290      	cmpeq	r0, r2
 8013548:	d11c      	bne.n	8013584 <_fx_utility_logical_sector_cache_entry_read+0x568>
            {

                /* Yes, we found a match.  Simply setup the pointer to this
                   buffer and return.  */
                media_ptr -> fx_media_memory_buffer =  cache_entry -> fx_cached_sector_memory_buffer;
 801354a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801354c:	681a      	ldr	r2, [r3, #0]
 801354e:	68fb      	ldr	r3, [r7, #12]
 8013550:	609a      	str	r2, [r3, #8]

                /* Determine if we need to update the last used list.  */
                if (*previous_cache_entry)
 8013552:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013554:	681b      	ldr	r3, [r3, #0]
 8013556:	2b00      	cmp	r3, #0
 8013558:	d00b      	beq.n	8013572 <_fx_utility_logical_sector_cache_entry_read+0x556>

                    /* Yes, the current entry is not at the front of the list
                       so we need to change the order.  */

                    /* Link the previous entry to this entry's next pointer.  */
                    (*previous_cache_entry) -> fx_cached_sector_next_used =
 801355a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801355c:	681b      	ldr	r3, [r3, #0]
                        cache_entry -> fx_cached_sector_next_used;
 801355e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013560:	6952      	ldr	r2, [r2, #20]
                    (*previous_cache_entry) -> fx_cached_sector_next_used =
 8013562:	615a      	str	r2, [r3, #20]

                    /* Place this entry at the head of the list.  */
                    cache_entry -> fx_cached_sector_next_used =
                        media_ptr -> fx_media_sector_cache_list_ptr;
 8013564:	68fb      	ldr	r3, [r7, #12]
 8013566:	69da      	ldr	r2, [r3, #28]
                    cache_entry -> fx_cached_sector_next_used =
 8013568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801356a:	615a      	str	r2, [r3, #20]
                    media_ptr -> fx_media_sector_cache_list_ptr =  cache_entry;
 801356c:	68fb      	ldr	r3, [r7, #12]
 801356e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013570:	61da      	str	r2, [r3, #28]
                }

#ifndef FX_MEDIA_STATISTICS_DISABLE

                /* Increment the number of logical sectors cache read hits.  */
                media_ptr -> fx_media_logical_sector_cache_read_hits++;
 8013572:	68fb      	ldr	r3, [r7, #12]
 8013574:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8013578:	1c5a      	adds	r2, r3, #1
 801357a:	68fb      	ldr	r3, [r7, #12]
 801357c:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
#endif

                /* Success, return to caller immediately!  */
                return(FX_NULL);
 8013580:	2300      	movs	r3, #0
 8013582:	e00f      	b.n	80135a4 <_fx_utility_logical_sector_cache_entry_read+0x588>
            }

            /* Otherwise, we have not found the cached entry yet.  */

            /* If there are more entries, move to the next one.  */
            if (cache_entry -> fx_cached_sector_next_used)
 8013584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013586:	695b      	ldr	r3, [r3, #20]
 8013588:	2b00      	cmp	r3, #0
 801358a:	d005      	beq.n	8013598 <_fx_utility_logical_sector_cache_entry_read+0x57c>
            {

                *previous_cache_entry =  cache_entry;
 801358c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801358e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013590:	601a      	str	r2, [r3, #0]
                cache_entry =           cache_entry -> fx_cached_sector_next_used;
 8013592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013594:	695b      	ldr	r3, [r3, #20]
 8013596:	637b      	str	r3, [r7, #52]	; 0x34
        while (cache_size--)
 8013598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801359a:	1e5a      	subs	r2, r3, #1
 801359c:	633a      	str	r2, [r7, #48]	; 0x30
 801359e:	2b00      	cmp	r3, #0
 80135a0:	d1c6      	bne.n	8013530 <_fx_utility_logical_sector_cache_entry_read+0x514>
            }
        }
    }

    /* The requested sector is not in cache, return the last cache entry.  */
    return(cache_entry);
 80135a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    FX_PARAMETER_NOT_USED(media_ptr);
    FX_PARAMETER_NOT_USED(logical_sector);
    FX_PARAMETER_NOT_USED(previous_cache_entry);
    return(FX_NULL);
#endif /* FX_DISABLE_CACHE */
}
 80135a4:	4618      	mov	r0, r3
 80135a6:	373c      	adds	r7, #60	; 0x3c
 80135a8:	46bd      	mov	sp, r7
 80135aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135ae:	4770      	bx	lr

080135b0 <_fx_utility_logical_sector_flush>:
/*                                            errors without cache,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_logical_sector_flush(FX_MEDIA *media_ptr, ULONG64 starting_sector, ULONG64 sectors, UINT invalidate)
{
 80135b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80135b4:	b094      	sub	sp, #80	; 0x50
 80135b6:	af00      	add	r7, sp, #0
 80135b8:	61f8      	str	r0, [r7, #28]
 80135ba:	e9c7 2304 	strd	r2, r3, [r7, #16]

    /* Extended port-specific processing macro, which is by default defined to white space.  */
    FX_UTILITY_LOGICAL_SECTOR_FLUSH_EXTENSION

    /* Calculate the ending sector.  */
    ending_sector =  starting_sector + sectors - 1;
 80135be:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80135c2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80135c6:	1884      	adds	r4, r0, r2
 80135c8:	eb41 0503 	adc.w	r5, r1, r3
 80135cc:	1e63      	subs	r3, r4, #1
 80135ce:	60bb      	str	r3, [r7, #8]
 80135d0:	f145 33ff 	adc.w	r3, r5, #4294967295	; 0xffffffff
 80135d4:	60fb      	str	r3, [r7, #12]
 80135d6:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80135da:	e9c7 3408 	strd	r3, r4, [r7, #32]

    /* Pickup the number of dirty sectors currently in the cache.  */
    remaining_dirty =  media_ptr -> fx_media_sector_cache_dirty_count;
 80135de:	69fb      	ldr	r3, [r7, #28]
 80135e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80135e2:	633b      	str	r3, [r7, #48]	; 0x30

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_MEDIA_FLUSH, media_ptr, media_ptr -> fx_media_sector_cache_dirty_count, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Determine what type of cache configuration we have.  */
    if (media_ptr -> fx_media_sector_cache_hashed == FX_FALSE)
 80135e4:	69fb      	ldr	r3, [r7, #28]
 80135e6:	691b      	ldr	r3, [r3, #16]
 80135e8:	2b00      	cmp	r3, #0
 80135ea:	f040 80b4 	bne.w	8013756 <_fx_utility_logical_sector_flush+0x1a6>

        /* Linear cache present, simply walk through the search list until
           an unused cache entry is present.  */

        /* Flush and invalidate the internal logical sector cache.  */
        cache_size =            media_ptr -> fx_media_sector_cache_size;
 80135ee:	69fb      	ldr	r3, [r7, #28]
 80135f0:	695b      	ldr	r3, [r3, #20]
 80135f2:	64bb      	str	r3, [r7, #72]	; 0x48
        cache_entry =           media_ptr -> fx_media_sector_cache_list_ptr;
 80135f4:	69fb      	ldr	r3, [r7, #28]
 80135f6:	69db      	ldr	r3, [r3, #28]
 80135f8:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Look at the cache entries that have been written to.  */
        while ((cache_size--) && (cache_entry -> fx_cached_sector))
 80135fa:	e09f      	b.n	801373c <_fx_utility_logical_sector_flush+0x18c>
        {

            /* Determine if invalidation is not required and there are no
               more dirty sectors. */
            if ((remaining_dirty == 0) && (invalidate == FX_FALSE))
 80135fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135fe:	2b00      	cmp	r3, #0
 8013600:	d103      	bne.n	801360a <_fx_utility_logical_sector_flush+0x5a>
 8013602:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013604:	2b00      	cmp	r3, #0
 8013606:	f000 81de 	beq.w	80139c6 <_fx_utility_logical_sector_flush+0x416>
                /* Yes, nothing left to do.  */
                break;
            }

            /* Determine if there are any more sectors to process.  */
            if (sectors == 0)
 801360a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 801360e:	4313      	orrs	r3, r2
 8013610:	f000 81db 	beq.w	80139ca <_fx_utility_logical_sector_flush+0x41a>
                /* No more sectors required to process.  */
                break;
            }

            /* Determine if this cached sector is within the specified range and is valid.  */
            if ((cache_entry -> fx_cached_sector_valid) &&
 8013614:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013616:	7c5b      	ldrb	r3, [r3, #17]
 8013618:	2b00      	cmp	r3, #0
 801361a:	f000 808c 	beq.w	8013736 <_fx_utility_logical_sector_flush+0x186>
                (cache_entry -> fx_cached_sector >= starting_sector) &&
 801361e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013620:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
            if ((cache_entry -> fx_cached_sector_valid) &&
 8013624:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8013628:	4290      	cmp	r0, r2
 801362a:	eb71 0303 	sbcs.w	r3, r1, r3
 801362e:	f0c0 8082 	bcc.w	8013736 <_fx_utility_logical_sector_flush+0x186>
                (cache_entry -> fx_cached_sector <= ending_sector))
 8013632:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013634:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
                (cache_entry -> fx_cached_sector >= starting_sector) &&
 8013638:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 801363c:	4290      	cmp	r0, r2
 801363e:	eb71 0303 	sbcs.w	r3, r1, r3
 8013642:	d378      	bcc.n	8013736 <_fx_utility_logical_sector_flush+0x186>
            {

                /* Yes, the cache entry is valid and within the specified range. Determine if
                   the requested sector has been written to.  */
                if (cache_entry -> fx_cached_sector_buffer_dirty)
 8013644:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013646:	7c1b      	ldrb	r3, [r3, #16]
 8013648:	2b00      	cmp	r3, #0
 801364a:	d04d      	beq.n	80136e8 <_fx_utility_logical_sector_flush+0x138>
                {

                    /* Yes, write the cached sector out to the media.  */

                    /* Check for write protect at the media level (set by driver).  */
                    if (media_ptr -> fx_media_driver_write_protect == FX_FALSE)
 801364c:	69fb      	ldr	r3, [r7, #28]
 801364e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8013652:	2b00      	cmp	r3, #0
 8013654:	d148      	bne.n	80136e8 <_fx_utility_logical_sector_flush+0x138>
                    {

#ifndef FX_MEDIA_STATISTICS_DISABLE

                        /* Increment the number of driver write sector(s) requests.  */
                        media_ptr -> fx_media_driver_write_requests++;
 8013656:	69fb      	ldr	r3, [r7, #28]
 8013658:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 801365c:	1c5a      	adds	r2, r3, #1
 801365e:	69fb      	ldr	r3, [r7, #28]
 8013660:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
#endif

                        /* Build write request to the driver.  */
                        media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 8013664:	69fb      	ldr	r3, [r7, #28]
 8013666:	2201      	movs	r2, #1
 8013668:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 801366c:	69fb      	ldr	r3, [r7, #28]
 801366e:	2290      	movs	r2, #144	; 0x90
 8013670:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                        media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 8013674:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013676:	681a      	ldr	r2, [r3, #0]
 8013678:	69fb      	ldr	r3, [r7, #28]
 801367a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#ifdef FX_DRIVER_USE_64BIT_LBA
                        media_ptr -> fx_media_driver_logical_sector =   cache_entry -> fx_cached_sector;
#else
                        media_ptr -> fx_media_driver_logical_sector =   (ULONG)cache_entry -> fx_cached_sector;
 801367e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013680:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8013684:	69fb      	ldr	r3, [r7, #28]
 8013686:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif
                        media_ptr -> fx_media_driver_sectors =          1;
 801368a:	69fb      	ldr	r3, [r7, #28]
 801368c:	2201      	movs	r2, #1
 801368e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
                        media_ptr -> fx_media_driver_sector_type =      cache_entry -> fx_cached_sector_type;
 8013692:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013694:	7c9b      	ldrb	r3, [r3, #18]
 8013696:	461a      	mov	r2, r3
 8013698:	69fb      	ldr	r3, [r7, #28]
 801369a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

                        /* Sectors other than FX_DATA_SECTOR will never be dirty when FX_FAULT_TOLERANT is defined. */
#ifndef FX_FAULT_TOLERANT
                        /* Determine if the system write flag needs to be set.  */
                        if (cache_entry -> fx_cached_sector_type != FX_DATA_SECTOR)
 801369e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80136a0:	7c9b      	ldrb	r3, [r3, #18]
 80136a2:	2b04      	cmp	r3, #4
 80136a4:	d003      	beq.n	80136ae <_fx_utility_logical_sector_flush+0xfe>
                        {

                            /* Yes, a system sector write is present so set the flag.  The driver
                               can use this flag to make extra safeguards in writing the sector
                               out, yielding more fault tolerance.  */
                            media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 80136a6:	69fb      	ldr	r3, [r7, #28]
 80136a8:	2201      	movs	r2, #1
 80136aa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                        /* If trace is enabled, insert this event into the trace buffer.  */
                        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, cache_entry -> fx_cached_sector, 1, cache_entry -> fx_cached_sector_memory_buffer, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                        /* Invoke the driver to write the sector.  */
                        (media_ptr -> fx_media_driver_entry) (media_ptr);
 80136ae:	69fb      	ldr	r3, [r7, #28]
 80136b0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80136b4:	69f8      	ldr	r0, [r7, #28]
 80136b6:	4798      	blx	r3

                        /* Clear the system write flag.  */
                        media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 80136b8:	69fb      	ldr	r3, [r7, #28]
 80136ba:	2200      	movs	r2, #0
 80136bc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                        /* Check for successful completion.  */
                        if (media_ptr -> fx_media_driver_status)
 80136c0:	69fb      	ldr	r3, [r7, #28]
 80136c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80136c6:	2b00      	cmp	r3, #0
 80136c8:	d003      	beq.n	80136d2 <_fx_utility_logical_sector_flush+0x122>
                        {

                            /* Error writing a cached sector out.  Return the
                               error status.  */
                            return(media_ptr -> fx_media_driver_status);
 80136ca:	69fb      	ldr	r3, [r7, #28]
 80136cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80136d0:	e17f      	b.n	80139d2 <_fx_utility_logical_sector_flush+0x422>
                        }

                        /* Clear the buffer dirty flag since it has been flushed
                           out.  */
                        cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 80136d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80136d4:	2200      	movs	r2, #0
 80136d6:	741a      	strb	r2, [r3, #16]

                        /* Decrement the number of dirty sectors currently in the cache.  */
                        media_ptr -> fx_media_sector_cache_dirty_count--;
 80136d8:	69fb      	ldr	r3, [r7, #28]
 80136da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80136dc:	1e5a      	subs	r2, r3, #1
 80136de:	69fb      	ldr	r3, [r7, #28]
 80136e0:	625a      	str	r2, [r3, #36]	; 0x24
                        remaining_dirty--;
 80136e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136e4:	3b01      	subs	r3, #1
 80136e6:	633b      	str	r3, [r7, #48]	; 0x30
                    }
                }

                /* Determine if the invalidate option is specified.  */
                if (invalidate)
 80136e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80136ea:	2b00      	cmp	r3, #0
 80136ec:	d018      	beq.n	8013720 <_fx_utility_logical_sector_flush+0x170>
                {

                    /* Invalidate the cache entry.  */
                    cache_entry -> fx_cached_sector_valid =  FX_FALSE;
 80136ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80136f0:	2200      	movs	r2, #0
 80136f2:	745a      	strb	r2, [r3, #17]

                    /* Place all ones in the sector number.  */
                    cache_entry -> fx_cached_sector =  (~(ULONG64)0);
 80136f4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80136f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80136fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80136fe:	e9c1 2302 	strd	r2, r3, [r1, #8]

                    /* Determine if this sector is still dirty, this could be the case if
                       write protection was turned on.  */
                    if (cache_entry -> fx_cached_sector_buffer_dirty)
 8013702:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013704:	7c1b      	ldrb	r3, [r3, #16]
 8013706:	2b00      	cmp	r3, #0
 8013708:	d00a      	beq.n	8013720 <_fx_utility_logical_sector_flush+0x170>
                    {

                        /* Yes, clear the dirty flag.  */
                        cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 801370a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801370c:	2200      	movs	r2, #0
 801370e:	741a      	strb	r2, [r3, #16]

                        /* Decrement the number of dirty sectors currently in the cache.  */
                        media_ptr -> fx_media_sector_cache_dirty_count--;
 8013710:	69fb      	ldr	r3, [r7, #28]
 8013712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013714:	1e5a      	subs	r2, r3, #1
 8013716:	69fb      	ldr	r3, [r7, #28]
 8013718:	625a      	str	r2, [r3, #36]	; 0x24
                        remaining_dirty--;
 801371a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801371c:	3b01      	subs	r3, #1
 801371e:	633b      	str	r3, [r7, #48]	; 0x30
                    }
                }

                /* Decrement the number of sectors in the range that have been processed.  */
                sectors--;
 8013720:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8013724:	1e51      	subs	r1, r2, #1
 8013726:	6039      	str	r1, [r7, #0]
 8013728:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
 801372c:	607b      	str	r3, [r7, #4]
 801372e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8013732:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
            }

            /* Move to the next entry in the sector cache.  */
            cache_entry =  cache_entry -> fx_cached_sector_next_used;
 8013736:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013738:	695b      	ldr	r3, [r3, #20]
 801373a:	64fb      	str	r3, [r7, #76]	; 0x4c
        while ((cache_size--) && (cache_entry -> fx_cached_sector))
 801373c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801373e:	1e5a      	subs	r2, r3, #1
 8013740:	64ba      	str	r2, [r7, #72]	; 0x48
 8013742:	2b00      	cmp	r3, #0
 8013744:	f000 8144 	beq.w	80139d0 <_fx_utility_logical_sector_flush+0x420>
 8013748:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801374a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801374e:	4313      	orrs	r3, r2
 8013750:	f47f af54 	bne.w	80135fc <_fx_utility_logical_sector_flush+0x4c>
 8013754:	e13c      	b.n	80139d0 <_fx_utility_logical_sector_flush+0x420>
    }
    else
    {

        /* Hashed cache is present. Pickup the cache size.  */
        cache_size =            media_ptr -> fx_media_sector_cache_size;
 8013756:	69fb      	ldr	r3, [r7, #28]
 8013758:	695b      	ldr	r3, [r3, #20]
 801375a:	64bb      	str	r3, [r7, #72]	; 0x48

        /* Initialize the loop control parameters.  */
        bit_set =  0;
 801375c:	2300      	movs	r3, #0
 801375e:	643b      	str	r3, [r7, #64]	; 0x40
        valid_bit_map =  media_ptr -> fx_media_sector_cache_hashed_sector_valid;
 8013760:	69fb      	ldr	r3, [r7, #28]
 8013762:	6a1b      	ldr	r3, [r3, #32]
 8013764:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Determine how to process the hashed cache based on the number of sectors
           to process. If the sequential sector range is less than the bit map size,
           simply use the starting sector to derive the index into the cache.  */
        if (sectors < 32)
 8013766:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 801376a:	2a20      	cmp	r2, #32
 801376c:	f173 0300 	sbcs.w	r3, r3, #0
 8013770:	d202      	bcs.n	8013778 <_fx_utility_logical_sector_flush+0x1c8>
        {
            use_starting_sector =  FX_TRUE;
 8013772:	2301      	movs	r3, #1
 8013774:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013776:	e121      	b.n	80139bc <_fx_utility_logical_sector_flush+0x40c>
        }
        else
        {
            use_starting_sector =  FX_FALSE;
 8013778:	2300      	movs	r3, #0
 801377a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        /* Determine if there is anything valid in the cache.  */
        while (valid_bit_map)
 801377c:	e11e      	b.n	80139bc <_fx_utility_logical_sector_flush+0x40c>
        {

            /* Determine if invalidation is not required and there are no
               more dirty sectors. */
            if ((remaining_dirty == 0) && (invalidate == FX_FALSE))
 801377e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013780:	2b00      	cmp	r3, #0
 8013782:	d103      	bne.n	801378c <_fx_utility_logical_sector_flush+0x1dc>
 8013784:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013786:	2b00      	cmp	r3, #0
 8013788:	f000 8121 	beq.w	80139ce <_fx_utility_logical_sector_flush+0x41e>
                /* Yes, nothing left to do.  */
                break;
            }

            /* Determine if there are any more sectors to process.  */
            if ((sectors == 0) || (starting_sector > ending_sector))
 801378c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8013790:	4313      	orrs	r3, r2
 8013792:	f000 811d 	beq.w	80139d0 <_fx_utility_logical_sector_flush+0x420>
 8013796:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801379a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 801379e:	4290      	cmp	r0, r2
 80137a0:	eb71 0303 	sbcs.w	r3, r1, r3
 80137a4:	f0c0 8114 	bcc.w	80139d0 <_fx_utility_logical_sector_flush+0x420>
                /* No more sectors required to process.  */
                break;
            }

            /* Determine how to compute the hash index.  */
            if (use_starting_sector)
 80137a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80137aa:	2b00      	cmp	r3, #0
 80137ac:	d015      	beq.n	80137da <_fx_utility_logical_sector_flush+0x22a>
            {

                /* Calculate the hash value of this sector using the lower bits.  */
                index =  (ULONG)(starting_sector & media_ptr -> fx_media_sector_cache_hash_mask);
 80137ae:	693a      	ldr	r2, [r7, #16]
 80137b0:	69fb      	ldr	r3, [r7, #28]
 80137b2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80137b6:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 80137ba:	4013      	ands	r3, r2
 80137bc:	63bb      	str	r3, [r7, #56]	; 0x38

                /* Calculate the bit set indicating there is one or more valid sectors at this cache index.  */
                bit_set =  (index % 32);
 80137be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137c0:	f003 031f 	and.w	r3, r3, #31
 80137c4:	643b      	str	r3, [r7, #64]	; 0x40

                /* Compute the actual array index by multiplying by the cache depth.  */
                index =  (bit_set * FX_SECTOR_CACHE_DEPTH);
 80137c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80137c8:	009b      	lsls	r3, r3, #2
 80137ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80137cc:	e00d      	b.n	80137ea <_fx_utility_logical_sector_flush+0x23a>
                /* Find the next set bit.  */
                while ((valid_bit_map & 1) == 0)
                {

                    /* Otherwise, shift down the bit in the bit map.  */
                    valid_bit_map =  valid_bit_map >> 1;
 80137ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137d0:	085b      	lsrs	r3, r3, #1
 80137d2:	62fb      	str	r3, [r7, #44]	; 0x2c

                    /* Increment the set bit marker.  */
                    bit_set++;
 80137d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80137d6:	3301      	adds	r3, #1
 80137d8:	643b      	str	r3, [r7, #64]	; 0x40
                while ((valid_bit_map & 1) == 0)
 80137da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137dc:	f003 0301 	and.w	r3, r3, #1
 80137e0:	2b00      	cmp	r3, #0
 80137e2:	d0f4      	beq.n	80137ce <_fx_utility_logical_sector_flush+0x21e>
                }

                /* Compute the first actual index into the hashed cache.  */
                index =  (bit_set * FX_SECTOR_CACHE_DEPTH);
 80137e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80137e6:	009b      	lsls	r3, r3, #2
 80137e8:	63bb      	str	r3, [r7, #56]	; 0x38
            /* At this point, bit_set represents the next group of hashed sectors that could
               have valid cache entries and index represents the index into the sector cache
               of that sector group.  */

            /* Clear the remaining valid sectors for this entry in the bit map.  */
            remaining_valid =  0;
 80137ea:	2300      	movs	r3, #0
 80137ec:	637b      	str	r3, [r7, #52]	; 0x34
            /* Loop to check the corresponding hash entries.  */
            do
            {

                /* Setup pointer to the cache entry.  */
                cache_entry =  &(media_ptr -> fx_media_sector_cache[index]);
 80137ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80137f0:	4613      	mov	r3, r2
 80137f2:	005b      	lsls	r3, r3, #1
 80137f4:	4413      	add	r3, r2
 80137f6:	00db      	lsls	r3, r3, #3
 80137f8:	f503 634a 	add.w	r3, r3, #3232	; 0xca0
 80137fc:	69fa      	ldr	r2, [r7, #28]
 80137fe:	4413      	add	r3, r2
 8013800:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Loop to examine the full depth of the hashed cache.  */
                for (i = 0; i < 4; i++)
 8013802:	2300      	movs	r3, #0
 8013804:	647b      	str	r3, [r7, #68]	; 0x44
 8013806:	e0a7      	b.n	8013958 <_fx_utility_logical_sector_flush+0x3a8>
                {

                    /* Determine if this cached sector is within the specified range and is valid.  */
                    if ((cache_entry -> fx_cached_sector_valid) &&
 8013808:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801380a:	7c5b      	ldrb	r3, [r3, #17]
 801380c:	2b00      	cmp	r3, #0
 801380e:	f000 8089 	beq.w	8013924 <_fx_utility_logical_sector_flush+0x374>
                        (cache_entry -> fx_cached_sector >= starting_sector) &&
 8013812:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013814:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
                    if ((cache_entry -> fx_cached_sector_valid) &&
 8013818:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801381c:	4290      	cmp	r0, r2
 801381e:	eb71 0303 	sbcs.w	r3, r1, r3
 8013822:	d37f      	bcc.n	8013924 <_fx_utility_logical_sector_flush+0x374>
                        (cache_entry -> fx_cached_sector <= ending_sector))
 8013824:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013826:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
                        (cache_entry -> fx_cached_sector >= starting_sector) &&
 801382a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 801382e:	4290      	cmp	r0, r2
 8013830:	eb71 0303 	sbcs.w	r3, r1, r3
 8013834:	d376      	bcc.n	8013924 <_fx_utility_logical_sector_flush+0x374>
                    {

                        /* Determine if the requested sector has been written to.  */
                        if (cache_entry -> fx_cached_sector_buffer_dirty)
 8013836:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013838:	7c1b      	ldrb	r3, [r3, #16]
 801383a:	2b00      	cmp	r3, #0
 801383c:	d04d      	beq.n	80138da <_fx_utility_logical_sector_flush+0x32a>


                            /* Yes, write the cached sector out to the media.  */

                            /* Check for write protect at the media level (set by driver).  */
                            if (media_ptr -> fx_media_driver_write_protect == FX_FALSE)
 801383e:	69fb      	ldr	r3, [r7, #28]
 8013840:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8013844:	2b00      	cmp	r3, #0
 8013846:	d148      	bne.n	80138da <_fx_utility_logical_sector_flush+0x32a>
                            {

#ifndef FX_MEDIA_STATISTICS_DISABLE

                                /* Increment the number of driver write sector(s) requests.  */
                                media_ptr -> fx_media_driver_write_requests++;
 8013848:	69fb      	ldr	r3, [r7, #28]
 801384a:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 801384e:	1c5a      	adds	r2, r3, #1
 8013850:	69fb      	ldr	r3, [r7, #28]
 8013852:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
#endif

                                /* Build Write request to the driver.  */
                                media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 8013856:	69fb      	ldr	r3, [r7, #28]
 8013858:	2201      	movs	r2, #1
 801385a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                                media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 801385e:	69fb      	ldr	r3, [r7, #28]
 8013860:	2290      	movs	r2, #144	; 0x90
 8013862:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                                media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 8013866:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013868:	681a      	ldr	r2, [r3, #0]
 801386a:	69fb      	ldr	r3, [r7, #28]
 801386c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#ifdef FX_DRIVER_USE_64BIT_LBA
                                media_ptr -> fx_media_driver_logical_sector =   cache_entry -> fx_cached_sector;
#else
                                media_ptr -> fx_media_driver_logical_sector =   (ULONG)cache_entry -> fx_cached_sector;
 8013870:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013872:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8013876:	69fb      	ldr	r3, [r7, #28]
 8013878:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif
                                media_ptr -> fx_media_driver_sectors =          1;
 801387c:	69fb      	ldr	r3, [r7, #28]
 801387e:	2201      	movs	r2, #1
 8013880:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
                                media_ptr -> fx_media_driver_sector_type =      cache_entry -> fx_cached_sector_type;
 8013884:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013886:	7c9b      	ldrb	r3, [r3, #18]
 8013888:	461a      	mov	r2, r3
 801388a:	69fb      	ldr	r3, [r7, #28]
 801388c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

                                /* Sectors other than FX_DATA_SECTOR will never be dirty when FX_FAULT_TOLERANT is defined. */
#ifndef FX_FAULT_TOLERANT
                                /* Determine if the system write flag needs to be set.  */
                                if (cache_entry -> fx_cached_sector_type != FX_DATA_SECTOR)
 8013890:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013892:	7c9b      	ldrb	r3, [r3, #18]
 8013894:	2b04      	cmp	r3, #4
 8013896:	d003      	beq.n	80138a0 <_fx_utility_logical_sector_flush+0x2f0>
                                {

                                    /* Yes, a system sector write is present so set the flag.  The driver
                                       can use this flag to make extra safeguards in writing the sector
                                       out, yielding more fault tolerance.  */
                                    media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 8013898:	69fb      	ldr	r3, [r7, #28]
 801389a:	2201      	movs	r2, #1
 801389c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                                /* If trace is enabled, insert this event into the trace buffer.  */
                                FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, cache_entry -> fx_cached_sector, 1, cache_entry -> fx_cached_sector_memory_buffer, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                                /* Invoke the driver to write the sector.  */
                                (media_ptr -> fx_media_driver_entry) (media_ptr);
 80138a0:	69fb      	ldr	r3, [r7, #28]
 80138a2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80138a6:	69f8      	ldr	r0, [r7, #28]
 80138a8:	4798      	blx	r3

                                /* Clear the system write flag.  */
                                media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 80138aa:	69fb      	ldr	r3, [r7, #28]
 80138ac:	2200      	movs	r2, #0
 80138ae:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                                /* Check for successful completion.  */
                                if (media_ptr -> fx_media_driver_status)
 80138b2:	69fb      	ldr	r3, [r7, #28]
 80138b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80138b8:	2b00      	cmp	r3, #0
 80138ba:	d003      	beq.n	80138c4 <_fx_utility_logical_sector_flush+0x314>
                                {

                                    /* Error writing a cached sector out.  Return the
                                       error status.  */
                                    return(media_ptr -> fx_media_driver_status);
 80138bc:	69fb      	ldr	r3, [r7, #28]
 80138be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80138c2:	e086      	b.n	80139d2 <_fx_utility_logical_sector_flush+0x422>
                                }

                                /* Clear the buffer dirty flag since it has been flushed
                                   out.  */
                                cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 80138c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80138c6:	2200      	movs	r2, #0
 80138c8:	741a      	strb	r2, [r3, #16]

                                /* Decrement the number of dirty sectors currently in the cache.  */
                                media_ptr -> fx_media_sector_cache_dirty_count--;
 80138ca:	69fb      	ldr	r3, [r7, #28]
 80138cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138ce:	1e5a      	subs	r2, r3, #1
 80138d0:	69fb      	ldr	r3, [r7, #28]
 80138d2:	625a      	str	r2, [r3, #36]	; 0x24
                                remaining_dirty--;
 80138d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138d6:	3b01      	subs	r3, #1
 80138d8:	633b      	str	r3, [r7, #48]	; 0x30
                            }
                        }

                        /* Determine if the invalidate option is specified.  */
                        if (invalidate)
 80138da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80138dc:	2b00      	cmp	r3, #0
 80138de:	d018      	beq.n	8013912 <_fx_utility_logical_sector_flush+0x362>
                        {

                            /* Invalidate the cache entry.  */
                            cache_entry -> fx_cached_sector_valid =  FX_FALSE;
 80138e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80138e2:	2200      	movs	r2, #0
 80138e4:	745a      	strb	r2, [r3, #17]

                            /* Place all ones in the sector number.  */
                            cache_entry -> fx_cached_sector =  (~(ULONG64)0);
 80138e6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80138e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80138ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80138f0:	e9c1 2302 	strd	r2, r3, [r1, #8]

                            /* Determine if this sector is still dirty, this could be the case if
                               write protection was turned on.  */
                            if (cache_entry -> fx_cached_sector_buffer_dirty)
 80138f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80138f6:	7c1b      	ldrb	r3, [r3, #16]
 80138f8:	2b00      	cmp	r3, #0
 80138fa:	d00a      	beq.n	8013912 <_fx_utility_logical_sector_flush+0x362>
                            {

                                /* Yes, clear the dirty flag.  */
                                cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 80138fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80138fe:	2200      	movs	r2, #0
 8013900:	741a      	strb	r2, [r3, #16]

                                /* Decrement the number of dirty sectors currently in the cache.  */
                                media_ptr -> fx_media_sector_cache_dirty_count--;
 8013902:	69fb      	ldr	r3, [r7, #28]
 8013904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013906:	1e5a      	subs	r2, r3, #1
 8013908:	69fb      	ldr	r3, [r7, #28]
 801390a:	625a      	str	r2, [r3, #36]	; 0x24
                                remaining_dirty--;
 801390c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801390e:	3b01      	subs	r3, #1
 8013910:	633b      	str	r3, [r7, #48]	; 0x30
                            }
                        }

                        /* Decrement the number of sectors in the range that have been processed.  */
                        sectors--;
 8013912:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8013916:	f112 38ff 	adds.w	r8, r2, #4294967295	; 0xffffffff
 801391a:	f143 39ff 	adc.w	r9, r3, #4294967295	; 0xffffffff
 801391e:	e9c7 891c 	strd	r8, r9, [r7, #112]	; 0x70
 8013922:	e006      	b.n	8013932 <_fx_utility_logical_sector_flush+0x382>
                    }
                    else
                    {

                        /* Determine if the sector is valid.  */
                        if (cache_entry -> fx_cached_sector_valid)
 8013924:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013926:	7c5b      	ldrb	r3, [r3, #17]
 8013928:	2b00      	cmp	r3, #0
 801392a:	d002      	beq.n	8013932 <_fx_utility_logical_sector_flush+0x382>
                        {

                            /* Increment the number of still remaining but out of range sectors.  */
                            remaining_valid++;
 801392c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801392e:	3301      	adds	r3, #1
 8013930:	637b      	str	r3, [r7, #52]	; 0x34
                        }
                    }

                    /* Determine if invalidation is not required and there are no
                       more dirty sectors. */
                    if ((remaining_dirty == 0) && (invalidate == FX_FALSE))
 8013932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013934:	2b00      	cmp	r3, #0
 8013936:	d102      	bne.n	801393e <_fx_utility_logical_sector_flush+0x38e>
 8013938:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801393a:	2b00      	cmp	r3, #0
 801393c:	d011      	beq.n	8013962 <_fx_utility_logical_sector_flush+0x3b2>
                        /* Yes, nothing left to do.  */
                        break;
                    }

                    /* Determine if there are any more sectors to process.  */
                    if ((sectors == 0) && (invalidate == FX_FALSE))
 801393e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8013942:	4313      	orrs	r3, r2
 8013944:	d102      	bne.n	801394c <_fx_utility_logical_sector_flush+0x39c>
 8013946:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013948:	2b00      	cmp	r3, #0
 801394a:	d00c      	beq.n	8013966 <_fx_utility_logical_sector_flush+0x3b6>
                        /* No more sectors required to process.  */
                        break;
                    }

                    /* Move to the next cache entry.  */
                    cache_entry++;
 801394c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801394e:	3318      	adds	r3, #24
 8013950:	64fb      	str	r3, [r7, #76]	; 0x4c
                for (i = 0; i < 4; i++)
 8013952:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013954:	3301      	adds	r3, #1
 8013956:	647b      	str	r3, [r7, #68]	; 0x44
 8013958:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801395a:	2b03      	cmp	r3, #3
 801395c:	f67f af54 	bls.w	8013808 <_fx_utility_logical_sector_flush+0x258>
 8013960:	e002      	b.n	8013968 <_fx_utility_logical_sector_flush+0x3b8>
                        break;
 8013962:	bf00      	nop
 8013964:	e000      	b.n	8013968 <_fx_utility_logical_sector_flush+0x3b8>
                        break;
 8013966:	bf00      	nop
                }

                /* Move the index to the next position since the bit map can only represent 32
                   cache entries.  */
                index =  index + (32 * FX_SECTOR_CACHE_DEPTH);
 8013968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801396a:	3380      	adds	r3, #128	; 0x80
 801396c:	63bb      	str	r3, [r7, #56]	; 0x38
            } while (index < cache_size);
 801396e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013970:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013972:	429a      	cmp	r2, r3
 8013974:	f4ff af3b 	bcc.w	80137ee <_fx_utility_logical_sector_flush+0x23e>

            /* Determine if invalidation was required and there are no more valid sectors
               associated with this bit position.  */
            if ((invalidate) && (remaining_valid == 0))
 8013978:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801397a:	2b00      	cmp	r3, #0
 801397c:	d00c      	beq.n	8013998 <_fx_utility_logical_sector_flush+0x3e8>
 801397e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013980:	2b00      	cmp	r3, #0
 8013982:	d109      	bne.n	8013998 <_fx_utility_logical_sector_flush+0x3e8>
            {

                /* Clear this bit position.  */
                media_ptr -> fx_media_sector_cache_hashed_sector_valid &=  ~(((ULONG)1) << bit_set);
 8013984:	69fb      	ldr	r3, [r7, #28]
 8013986:	6a1a      	ldr	r2, [r3, #32]
 8013988:	2101      	movs	r1, #1
 801398a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801398c:	fa01 f303 	lsl.w	r3, r1, r3
 8013990:	43db      	mvns	r3, r3
 8013992:	401a      	ands	r2, r3
 8013994:	69fb      	ldr	r3, [r7, #28]
 8013996:	621a      	str	r2, [r3, #32]
            }

            /* Determine if the starting sector is being used for examination of the hash.  */
            if (use_starting_sector)
 8013998:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801399a:	2b00      	cmp	r3, #0
 801399c:	d008      	beq.n	80139b0 <_fx_utility_logical_sector_flush+0x400>
            {

                /* Move to the next sector.  */
                starting_sector++;
 801399e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80139a2:	f112 0a01 	adds.w	sl, r2, #1
 80139a6:	f143 0b00 	adc.w	fp, r3, #0
 80139aa:	e9c7 ab04 	strd	sl, fp, [r7, #16]
 80139ae:	e005      	b.n	80139bc <_fx_utility_logical_sector_flush+0x40c>
            }
            else
            {

                /* Move to next bit in the map.  */
                valid_bit_map =  valid_bit_map >> 1;
 80139b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80139b2:	085b      	lsrs	r3, r3, #1
 80139b4:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Increment the set bit marker.  */
                bit_set++;
 80139b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80139b8:	3301      	adds	r3, #1
 80139ba:	643b      	str	r3, [r7, #64]	; 0x40
        while (valid_bit_map)
 80139bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80139be:	2b00      	cmp	r3, #0
 80139c0:	f47f aedd 	bne.w	801377e <_fx_utility_logical_sector_flush+0x1ce>
 80139c4:	e004      	b.n	80139d0 <_fx_utility_logical_sector_flush+0x420>
                break;
 80139c6:	bf00      	nop
 80139c8:	e002      	b.n	80139d0 <_fx_utility_logical_sector_flush+0x420>
                break;
 80139ca:	bf00      	nop
 80139cc:	e000      	b.n	80139d0 <_fx_utility_logical_sector_flush+0x420>
                break;
 80139ce:	bf00      	nop
    FX_PARAMETER_NOT_USED(sectors);
    FX_PARAMETER_NOT_USED(invalidate);
#endif /* FX_DISABLE_CACHE */

    /* If we get here, return successful status to the caller.  */
    return(FX_SUCCESS);
 80139d0:	2300      	movs	r3, #0
}
 80139d2:	4618      	mov	r0, r3
 80139d4:	3750      	adds	r7, #80	; 0x50
 80139d6:	46bd      	mov	sp, r7
 80139d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080139dc <_fx_utility_logical_sector_read>:
/*                                            resulting in version 6.2.0  */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_logical_sector_read(FX_MEDIA *media_ptr, ULONG64 logical_sector,
                                      VOID *buffer_ptr, ULONG sectors, UCHAR sector_type)
{
 80139dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80139e0:	b09c      	sub	sp, #112	; 0x70
 80139e2:	af04      	add	r7, sp, #16
 80139e4:	64f8      	str	r0, [r7, #76]	; 0x4c
 80139e6:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40


#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Determine if the request is for FAT sector.  */
    if (sector_type == FX_FAT_SECTOR)
 80139ea:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 80139ee:	2b02      	cmp	r3, #2
 80139f0:	d106      	bne.n	8013a00 <_fx_utility_logical_sector_read+0x24>
    {

        /* Increment the number of FAT sector reads.  */
        media_ptr -> fx_media_fat_sector_reads++;
 80139f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80139f4:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 80139f8:	1c5a      	adds	r2, r3, #1
 80139fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80139fc:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    }

    /* Increment the number of logical sectors read.  */
    media_ptr -> fx_media_logical_sector_reads++;
 8013a00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013a02:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8013a06:	1c5a      	adds	r2, r3, #1
 8013a08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013a0a:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
    /* Extended port-specific processing macro, which is by default defined to white space.  */
    FX_UTILITY_LOGICAL_SECTOR_READ_EXTENSION

#ifndef FX_DISABLE_CACHE
    /* Determine if the request is for the internal media buffer area.  */
    if ((((UCHAR *)buffer_ptr) >= media_ptr -> fx_media_memory_buffer) &&
 8013a0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013a10:	689a      	ldr	r2, [r3, #8]
 8013a12:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8013a16:	4293      	cmp	r3, r2
 8013a18:	f0c0 80d9 	bcc.w	8013bce <_fx_utility_logical_sector_read+0x1f2>
        (((UCHAR *)buffer_ptr) <= media_ptr -> fx_media_sector_cache_end))
 8013a1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013a1e:	699a      	ldr	r2, [r3, #24]
    if ((((UCHAR *)buffer_ptr) >= media_ptr -> fx_media_memory_buffer) &&
 8013a20:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8013a24:	4293      	cmp	r3, r2
 8013a26:	f200 80d2 	bhi.w	8013bce <_fx_utility_logical_sector_read+0x1f2>
    {

        /* Internal cache buffer is requested.  */

        /* Examine the logical sector cache.  */
        cache_entry = _fx_utility_logical_sector_cache_entry_read(media_ptr, logical_sector, &previous_cache_entry);
 8013a2a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013a2e:	9300      	str	r3, [sp, #0]
 8013a30:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8013a34:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8013a36:	f7ff faf1 	bl	801301c <_fx_utility_logical_sector_cache_entry_read>
 8013a3a:	6578      	str	r0, [r7, #84]	; 0x54

        /* Was the sector found?  */
        if (cache_entry == FX_NULL)
 8013a3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013a3e:	2b00      	cmp	r3, #0
 8013a40:	d101      	bne.n	8013a46 <_fx_utility_logical_sector_read+0x6a>
        {

            /* Yes, the sector was found. Return success!  */
            return(FX_SUCCESS);
 8013a42:	2300      	movs	r3, #0
 8013a44:	e259      	b.n	8013efa <_fx_utility_logical_sector_read+0x51e>
        /* At this point, we need to read in a sector from the media.  */

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of logical sectors cache read misses.  */
        media_ptr -> fx_media_logical_sector_cache_read_misses++;
 8013a46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013a48:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8013a4c:	1c5a      	adds	r2, r3, #1
 8013a4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013a50:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_LOG_SECTOR_CACHE_MISS, media_ptr, logical_sector, 0, media_ptr -> fx_media_sector_cache_size, FX_TRACE_INTERNAL_EVENTS, 0, 0)
#endif

        /* First, check and see if the last used entry has been
           modified.  */
        if ((cache_entry -> fx_cached_sector_valid) &&
 8013a54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013a56:	7c5b      	ldrb	r3, [r3, #17]
 8013a58:	2b00      	cmp	r3, #0
 8013a5a:	d049      	beq.n	8013af0 <_fx_utility_logical_sector_read+0x114>
            (cache_entry -> fx_cached_sector_buffer_dirty))
 8013a5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013a5e:	7c1b      	ldrb	r3, [r3, #16]
        if ((cache_entry -> fx_cached_sector_valid) &&
 8013a60:	2b00      	cmp	r3, #0
 8013a62:	d045      	beq.n	8013af0 <_fx_utility_logical_sector_read+0x114>
               before we read in the new buffer.  */

#ifndef FX_MEDIA_STATISTICS_DISABLE

            /* Increment the number of driver write sector(s) requests.  */
            media_ptr -> fx_media_driver_write_requests++;
 8013a64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013a66:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8013a6a:	1c5a      	adds	r2, r3, #1
 8013a6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013a6e:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
#endif

            /* Build write request to the driver.  */
            media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 8013a72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013a74:	2201      	movs	r2, #1
 8013a76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
            media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8013a7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013a7c:	2290      	movs	r2, #144	; 0x90
 8013a7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
            media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 8013a82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013a84:	681a      	ldr	r2, [r3, #0]
 8013a86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013a88:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#ifdef FX_DRIVER_USE_64BIT_LBA
            media_ptr -> fx_media_driver_logical_sector =   cache_entry -> fx_cached_sector;
#else
            media_ptr -> fx_media_driver_logical_sector =   (ULONG)cache_entry -> fx_cached_sector;
 8013a8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013a8e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8013a92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013a94:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif
            media_ptr -> fx_media_driver_sectors =          1;
 8013a98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013a9a:	2201      	movs	r2, #1
 8013a9c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
            media_ptr -> fx_media_driver_sector_type =      cache_entry -> fx_cached_sector_type;
 8013aa0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013aa2:	7c9b      	ldrb	r3, [r3, #18]
 8013aa4:	461a      	mov	r2, r3
 8013aa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013aa8:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

            /* Determine if the sector is a data sector or a system sector.  */
            if (cache_entry -> fx_cached_sector_type != FX_DATA_SECTOR)
 8013aac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013aae:	7c9b      	ldrb	r3, [r3, #18]
 8013ab0:	2b04      	cmp	r3, #4
 8013ab2:	d003      	beq.n	8013abc <_fx_utility_logical_sector_read+0xe0>
            {

                /* System sector is present.  */
                media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 8013ab4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013ab6:	2201      	movs	r2, #1
 8013ab8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

            /* If trace is enabled, insert this event into the trace buffer.  */
            FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, cache_entry -> fx_cached_sector, 1, cache_entry -> fx_cached_sector_memory_buffer, FX_TRACE_INTERNAL_EVENTS, 0, 0)

            /* Invoke the driver to write the sector.  */
            (media_ptr -> fx_media_driver_entry) (media_ptr);
 8013abc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013abe:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8013ac2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8013ac4:	4798      	blx	r3

            /* Clear the system write flag.  */
            media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 8013ac6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013ac8:	2200      	movs	r2, #0
 8013aca:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

            /* Check for successful completion.  */
            if (media_ptr -> fx_media_driver_status)
 8013ace:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013ad0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013ad4:	2b00      	cmp	r3, #0
 8013ad6:	d003      	beq.n	8013ae0 <_fx_utility_logical_sector_read+0x104>
            {

                /* Error writing a cached sector out.  Return the
                   error status.  */
                return(media_ptr -> fx_media_driver_status);
 8013ad8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013ada:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013ade:	e20c      	b.n	8013efa <_fx_utility_logical_sector_read+0x51e>
            }

            /* Clear the buffer dirty flag since it has been flushed
               out.  */
            cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 8013ae0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013ae2:	2200      	movs	r2, #0
 8013ae4:	741a      	strb	r2, [r3, #16]

            /* Decrement the number of outstanding dirty cache entries.  */
            media_ptr -> fx_media_sector_cache_dirty_count--;
 8013ae6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013aea:	1e5a      	subs	r2, r3, #1
 8013aec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013aee:	625a      	str	r2, [r3, #36]	; 0x24

        /* At this point, we can go out and setup this cached sector
           entry.  */

        /* Compare against logical sector to make sure it is valid.  */
        if (logical_sector >= media_ptr -> fx_media_total_sectors)
 8013af0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013af2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8013af6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8013afa:	4290      	cmp	r0, r2
 8013afc:	eb71 0303 	sbcs.w	r3, r1, r3
 8013b00:	d301      	bcc.n	8013b06 <_fx_utility_logical_sector_read+0x12a>
        {
            return(FX_SECTOR_INVALID);
 8013b02:	2389      	movs	r3, #137	; 0x89
 8013b04:	e1f9      	b.n	8013efa <_fx_utility_logical_sector_read+0x51e>
        }

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver read sector(s) requests.  */
        media_ptr -> fx_media_driver_read_requests++;
 8013b06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013b08:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8013b0c:	1c5a      	adds	r2, r3, #1
 8013b0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013b10:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
#endif

        /* Build Read request to the driver.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_READ;
 8013b14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013b16:	2200      	movs	r2, #0
 8013b18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8013b1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013b1e:	2290      	movs	r2, #144	; 0x90
 8013b20:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 8013b24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013b26:	681a      	ldr	r2, [r3, #0]
 8013b28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013b2a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#ifdef FX_DRIVER_USE_64BIT_LBA
        media_ptr -> fx_media_driver_logical_sector =   logical_sector;
#else
        media_ptr -> fx_media_driver_logical_sector =   (ULONG)logical_sector;
 8013b2e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013b30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013b32:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif
        media_ptr -> fx_media_driver_sectors =          1;
 8013b36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013b38:	2201      	movs	r2, #1
 8013b3a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        media_ptr -> fx_media_driver_sector_type =      sector_type;
 8013b3e:	f897 2088 	ldrb.w	r2, [r7, #136]	; 0x88
 8013b42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013b44:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

        /* Determine if the sector is a data sector or a system sector.  */
        if (sector_type == FX_DATA_SECTOR)
 8013b48:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8013b4c:	2b04      	cmp	r3, #4
 8013b4e:	d103      	bne.n	8013b58 <_fx_utility_logical_sector_read+0x17c>
        {

            /* Data sector is present.  */
            media_ptr -> fx_media_driver_data_sector_read =  FX_TRUE;
 8013b50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013b52:	2201      	movs	r2, #1
 8013b54:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_READ, media_ptr, logical_sector, 1, cache_entry -> fx_cached_sector_memory_buffer, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Invoke the driver to read the sector.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 8013b58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013b5a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8013b5e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8013b60:	4798      	blx	r3

        /* Clear data sector is present flag.  */
        media_ptr -> fx_media_driver_data_sector_read =  FX_FALSE;
 8013b62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013b64:	2200      	movs	r2, #0
 8013b66:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

        /* Determine if the read was successful.  */
        if (media_ptr -> fx_media_driver_status == FX_SUCCESS)
 8013b6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013b6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013b70:	2b00      	cmp	r3, #0
 8013b72:	d11a      	bne.n	8013baa <_fx_utility_logical_sector_read+0x1ce>
        {

            /* Remember the sector number.  */
            cache_entry -> fx_cached_sector =  logical_sector;
 8013b74:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8013b76:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8013b7a:	e9c1 2302 	strd	r2, r3, [r1, #8]

            /* Make the cache entry valid.  */
            cache_entry -> fx_cached_sector_valid =  FX_TRUE;
 8013b7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013b80:	2201      	movs	r2, #1
 8013b82:	745a      	strb	r2, [r3, #17]

            /* Remember the sector type.  */
            cache_entry -> fx_cached_sector_type =  sector_type;
 8013b84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013b86:	f897 2088 	ldrb.w	r2, [r7, #136]	; 0x88
 8013b8a:	749a      	strb	r2, [r3, #18]

            /* Place this entry that the head of the cached sector
               list.  */

            /* Determine if we need to update the last used list.  */
            if (previous_cache_entry)
 8013b8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013b8e:	2b00      	cmp	r3, #0
 8013b90:	d015      	beq.n	8013bbe <_fx_utility_logical_sector_read+0x1e2>

                /* Yes, the current entry is not at the front of the list
                   so we need to change the order.  */

                /* Link the previous entry to this entry's next pointer.  */
                previous_cache_entry -> fx_cached_sector_next_used =
 8013b92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                    cache_entry -> fx_cached_sector_next_used;
 8013b94:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013b96:	6952      	ldr	r2, [r2, #20]
                previous_cache_entry -> fx_cached_sector_next_used =
 8013b98:	615a      	str	r2, [r3, #20]

                /* Place this entry at the head of the list.  */
                cache_entry -> fx_cached_sector_next_used =
                    media_ptr -> fx_media_sector_cache_list_ptr;
 8013b9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013b9c:	69da      	ldr	r2, [r3, #28]
                cache_entry -> fx_cached_sector_next_used =
 8013b9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013ba0:	615a      	str	r2, [r3, #20]
                media_ptr -> fx_media_sector_cache_list_ptr =  cache_entry;
 8013ba2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013ba4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013ba6:	61da      	str	r2, [r3, #28]
 8013ba8:	e009      	b.n	8013bbe <_fx_utility_logical_sector_read+0x1e2>
        }
        else
        {

            /* Invalidate the cache entry on read errors.  */
            cache_entry -> fx_cached_sector_valid =  FX_FALSE;
 8013baa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013bac:	2200      	movs	r2, #0
 8013bae:	745a      	strb	r2, [r3, #17]

            /* Put all ones in the sector value.  */
            cache_entry -> fx_cached_sector =  (~(ULONG64)0);
 8013bb0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8013bb2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013bb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013bba:	e9c1 2302 	strd	r2, r3, [r1, #8]
        }

        /* Simply setup the pointer to this buffer and return.  */
        media_ptr -> fx_media_memory_buffer =  cache_entry -> fx_cached_sector_memory_buffer;
 8013bbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013bc0:	681a      	ldr	r2, [r3, #0]
 8013bc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013bc4:	609a      	str	r2, [r3, #8]

        /* Return the driver status.  */
        return(media_ptr -> fx_media_driver_status);
 8013bc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013bc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013bcc:	e195      	b.n	8013efa <_fx_utility_logical_sector_read+0x51e>
    {

        /* Direct I/O to application buffer area.  */

        /* Compare against logical sector to make sure it is valid.  */
        if ((logical_sector + sectors - 1) > (ULONG)media_ptr -> fx_media_total_sectors)
 8013bce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013bd2:	2200      	movs	r2, #0
 8013bd4:	469a      	mov	sl, r3
 8013bd6:	4693      	mov	fp, r2
 8013bd8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8013bdc:	eb1a 0402 	adds.w	r4, sl, r2
 8013be0:	eb4b 0503 	adc.w	r5, fp, r3
 8013be4:	f114 38ff 	adds.w	r8, r4, #4294967295	; 0xffffffff
 8013be8:	f145 39ff 	adc.w	r9, r5, #4294967295	; 0xffffffff
 8013bec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013bee:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8013bf2:	2300      	movs	r3, #0
 8013bf4:	63ba      	str	r2, [r7, #56]	; 0x38
 8013bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013bf8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8013bfc:	460b      	mov	r3, r1
 8013bfe:	4543      	cmp	r3, r8
 8013c00:	4613      	mov	r3, r2
 8013c02:	eb73 0309 	sbcs.w	r3, r3, r9
 8013c06:	d22c      	bcs.n	8013c62 <_fx_utility_logical_sector_read+0x286>
        {
            return(FX_SECTOR_INVALID);
 8013c08:	2389      	movs	r3, #137	; 0x89
 8013c0a:	e176      	b.n	8013efa <_fx_utility_logical_sector_read+0x51e>
        /* Attempt to fill the beginning of the buffer from cached sectors.  */
        while (sectors)
        {

            /* Determine if the sector is in the cache.  */
            if (_fx_utility_logical_sector_cache_entry_read(media_ptr, logical_sector, &previous_cache_entry))
 8013c0c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013c10:	9300      	str	r3, [sp, #0]
 8013c12:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8013c16:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8013c18:	f7ff fa00 	bl	801301c <_fx_utility_logical_sector_cache_entry_read>
 8013c1c:	4603      	mov	r3, r0
 8013c1e:	2b00      	cmp	r3, #0
 8013c20:	d124      	bne.n	8013c6c <_fx_utility_logical_sector_read+0x290>
                /* Not in the cache - get out of the loop!  */
                break;
            }

            /* Yes, sector is in the cache. Copy the data from the cache to the destination buffer.  */
            _fx_utility_memory_copy(media_ptr -> fx_media_memory_buffer, buffer_ptr, media_ptr -> fx_media_bytes_per_sector); /* Use case of memcpy is verified. */
 8013c22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013c24:	6898      	ldr	r0, [r3, #8]
 8013c26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013c2a:	461a      	mov	r2, r3
 8013c2c:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8013c30:	f000 fad0 	bl	80141d4 <_fx_utility_memory_copy>

            /* Advance the destination buffer.  */
            buffer_ptr =  ((UCHAR *)buffer_ptr) + media_ptr -> fx_media_bytes_per_sector;
 8013c34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013c36:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013c38:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8013c3c:	4413      	add	r3, r2
 8013c3e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

            /* Advance the sector and decrement the number of sectors left.  */
            logical_sector++;
 8013c42:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8013c46:	1c51      	adds	r1, r2, #1
 8013c48:	61b9      	str	r1, [r7, #24]
 8013c4a:	f143 0300 	adc.w	r3, r3, #0
 8013c4e:	61fb      	str	r3, [r7, #28]
 8013c50:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8013c54:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
            sectors--;
 8013c58:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013c5c:	3b01      	subs	r3, #1
 8013c5e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        while (sectors)
 8013c62:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013c66:	2b00      	cmp	r3, #0
 8013c68:	d1d0      	bne.n	8013c0c <_fx_utility_logical_sector_read+0x230>
 8013c6a:	e000      	b.n	8013c6e <_fx_utility_logical_sector_read+0x292>
                break;
 8013c6c:	bf00      	nop
        }

        /* Calculate the end sector.  */
        end_sector = logical_sector + sectors - 1;
 8013c6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013c72:	2200      	movs	r2, #0
 8013c74:	633b      	str	r3, [r7, #48]	; 0x30
 8013c76:	637a      	str	r2, [r7, #52]	; 0x34
 8013c78:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8013c7c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8013c80:	4621      	mov	r1, r4
 8013c82:	1889      	adds	r1, r1, r2
 8013c84:	62b9      	str	r1, [r7, #40]	; 0x28
 8013c86:	4629      	mov	r1, r5
 8013c88:	eb43 0101 	adc.w	r1, r3, r1
 8013c8c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8013c8e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8013c92:	460b      	mov	r3, r1
 8013c94:	3b01      	subs	r3, #1
 8013c96:	613b      	str	r3, [r7, #16]
 8013c98:	4613      	mov	r3, r2
 8013c9a:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
 8013c9e:	617b      	str	r3, [r7, #20]
 8013ca0:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8013ca4:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58

        /* Attempt to fill the end of the buffer from the opposite direction.  */
        while (sectors)
 8013ca8:	e02b      	b.n	8013d02 <_fx_utility_logical_sector_read+0x326>
        {

            /* Determine if the sector is in the cache.  */
            if (_fx_utility_logical_sector_cache_entry_read(media_ptr, end_sector, &previous_cache_entry))
 8013caa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013cae:	9300      	str	r3, [sp, #0]
 8013cb0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8013cb4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8013cb6:	f7ff f9b1 	bl	801301c <_fx_utility_logical_sector_cache_entry_read>
 8013cba:	4603      	mov	r3, r0
 8013cbc:	2b00      	cmp	r3, #0
 8013cbe:	d125      	bne.n	8013d0c <_fx_utility_logical_sector_read+0x330>
                /* Not in the cache - get out of the loop!  */
                break;
            }

            /* Yes, sector is in the cache. Copy the data from the cache to the destination buffer.  */
            _fx_utility_memory_copy(media_ptr -> fx_media_memory_buffer, /* Use case of memcpy is verified. */
 8013cc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013cc2:	6898      	ldr	r0, [r3, #8]
                                    ((UCHAR *)buffer_ptr) + ((sectors - 1) * media_ptr -> fx_media_bytes_per_sector),
 8013cc4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013cc8:	3b01      	subs	r3, #1
 8013cca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013ccc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8013cce:	fb02 f303 	mul.w	r3, r2, r3
            _fx_utility_memory_copy(media_ptr -> fx_media_memory_buffer, /* Use case of memcpy is verified. */
 8013cd2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8013cd6:	18d1      	adds	r1, r2, r3
                                    media_ptr -> fx_media_bytes_per_sector);
 8013cd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            _fx_utility_memory_copy(media_ptr -> fx_media_memory_buffer, /* Use case of memcpy is verified. */
 8013cdc:	461a      	mov	r2, r3
 8013cde:	f000 fa79 	bl	80141d4 <_fx_utility_memory_copy>

            /* Move sector to previous sector and decrement the number of sectors left.  */
            end_sector--;
 8013ce2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8013ce6:	1e51      	subs	r1, r2, #1
 8013ce8:	60b9      	str	r1, [r7, #8]
 8013cea:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
 8013cee:	60fb      	str	r3, [r7, #12]
 8013cf0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8013cf4:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
            sectors--;
 8013cf8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013cfc:	3b01      	subs	r3, #1
 8013cfe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        while (sectors)
 8013d02:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013d06:	2b00      	cmp	r3, #0
 8013d08:	d1cf      	bne.n	8013caa <_fx_utility_logical_sector_read+0x2ce>
 8013d0a:	e000      	b.n	8013d0e <_fx_utility_logical_sector_read+0x332>
                break;
 8013d0c:	bf00      	nop
        }

        /* Determine if there are still sectors left to read.  */
        if (sectors == 0)
 8013d0e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013d12:	2b00      	cmp	r3, #0
 8013d14:	d101      	bne.n	8013d1a <_fx_utility_logical_sector_read+0x33e>
        {

            /* No more sectors to read - return success!  */
            return(FX_SUCCESS);
 8013d16:	2300      	movs	r3, #0
 8013d18:	e0ef      	b.n	8013efa <_fx_utility_logical_sector_read+0x51e>
        }

        /* Flush and invalidate any entries in the cache that are in this direct I/O read request range.  */
        _fx_utility_logical_sector_flush(media_ptr, logical_sector, (ULONG64) sectors, FX_TRUE);
 8013d1a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013d1e:	2200      	movs	r2, #0
 8013d20:	623b      	str	r3, [r7, #32]
 8013d22:	627a      	str	r2, [r7, #36]	; 0x24
 8013d24:	2301      	movs	r3, #1
 8013d26:	9302      	str	r3, [sp, #8]
 8013d28:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8013d2c:	e9cd 3400 	strd	r3, r4, [sp]
 8013d30:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8013d34:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8013d36:	f7ff fc3b 	bl	80135b0 <_fx_utility_logical_sector_flush>
#endif /* FX_DISABLE_CACHE */

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver read sector(s) requests.  */
        media_ptr -> fx_media_driver_read_requests++;
 8013d3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013d3c:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8013d40:	1c5a      	adds	r2, r3, #1
 8013d42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013d44:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
#endif

        /* Build read request to the driver.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_READ;
 8013d48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013d4a:	2200      	movs	r2, #0
 8013d4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8013d50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013d52:	2290      	movs	r2, #144	; 0x90
 8013d54:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 8013d58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013d5a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8013d5e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#ifdef FX_DRIVER_USE_64BIT_LBA
        media_ptr -> fx_media_driver_logical_sector =   logical_sector;
#else
        media_ptr -> fx_media_driver_logical_sector =   (ULONG)logical_sector;
 8013d62:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013d64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013d66:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif
        media_ptr -> fx_media_driver_sectors =          sectors;
 8013d6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013d6c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8013d70:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        media_ptr -> fx_media_driver_sector_type =      sector_type;
 8013d74:	f897 2088 	ldrb.w	r2, [r7, #136]	; 0x88
 8013d78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013d7a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

        /* Determine if the sector is a data sector or a system sector.  */
        if (sector_type == FX_DATA_SECTOR)
 8013d7e:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8013d82:	2b04      	cmp	r3, #4
 8013d84:	d103      	bne.n	8013d8e <_fx_utility_logical_sector_read+0x3b2>
        {

            /* Data sector is present.  */
            media_ptr -> fx_media_driver_data_sector_read =  FX_TRUE;
 8013d86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013d88:	2201      	movs	r2, #1
 8013d8a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_READ, media_ptr, logical_sector, sectors, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Invoke the driver to read the sector.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 8013d8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013d90:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8013d94:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8013d96:	4798      	blx	r3

        /* Clear data sector is present flag.  */
        media_ptr -> fx_media_driver_data_sector_read =  FX_FALSE;
 8013d98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013d9a:	2200      	movs	r2, #0
 8013d9c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

#ifndef FX_DISABLE_DIRECT_DATA_READ_CACHE_FILL

        /* Determine if the read was successful and if number of sectors just read will
           reasonably fit into the cache.  */
        if ((media_ptr -> fx_media_driver_status == FX_SUCCESS) && (sectors < (media_ptr -> fx_media_sector_cache_size / 4)))
 8013da0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013da2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013da6:	2b00      	cmp	r3, #0
 8013da8:	f040 80a4 	bne.w	8013ef4 <_fx_utility_logical_sector_read+0x518>
 8013dac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013dae:	695b      	ldr	r3, [r3, #20]
 8013db0:	089b      	lsrs	r3, r3, #2
 8013db2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8013db6:	429a      	cmp	r2, r3
 8013db8:	f080 809c 	bcs.w	8013ef4 <_fx_utility_logical_sector_read+0x518>

            /* Yes, read of direct sectors was successful.  */

            /* Copy the sectors directly read into the cache so they are available on
               subsequent read requests.  */
            while (sectors)
 8013dbc:	e095      	b.n	8013eea <_fx_utility_logical_sector_read+0x50e>
            {

                /* Attempt to read the cache entry.  */
                cache_entry =  _fx_utility_logical_sector_cache_entry_read(media_ptr, logical_sector, &previous_cache_entry);
 8013dbe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013dc2:	9300      	str	r3, [sp, #0]
 8013dc4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8013dc8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8013dca:	f7ff f927 	bl	801301c <_fx_utility_logical_sector_cache_entry_read>
 8013dce:	6578      	str	r0, [r7, #84]	; 0x54
                FX_UTILITY_LOGICAL_SECTOR_READ_EXTENSION_1

                /* At this point, a cache entry should always be present since we invalidated
                   the cache over this sector range previously. In any case, check for the error
                   condition.  */
                if (cache_entry == FX_NULL)
 8013dd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013dd2:	2b00      	cmp	r3, #0
 8013dd4:	d101      	bne.n	8013dda <_fx_utility_logical_sector_read+0x3fe>
                {

                    /* This case should never happen, however, if it does simply give up on updating the
                       cache with the sectors from the direct read.  */
                    return(FX_SUCCESS);
 8013dd6:	2300      	movs	r3, #0
 8013dd8:	e08f      	b.n	8013efa <_fx_utility_logical_sector_read+0x51e>
                }

                /* Determine if the cache entry is dirty and needs to be written out before it is used.  */
                if ((cache_entry -> fx_cached_sector_valid) &&
 8013dda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013ddc:	7c5b      	ldrb	r3, [r3, #17]
 8013dde:	2b00      	cmp	r3, #0
 8013de0:	d049      	beq.n	8013e76 <_fx_utility_logical_sector_read+0x49a>
                    (cache_entry -> fx_cached_sector_buffer_dirty))
 8013de2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013de4:	7c1b      	ldrb	r3, [r3, #16]
                if ((cache_entry -> fx_cached_sector_valid) &&
 8013de6:	2b00      	cmp	r3, #0
 8013de8:	d045      	beq.n	8013e76 <_fx_utility_logical_sector_read+0x49a>
                       before we read in the new buffer.  */

#ifndef FX_MEDIA_STATISTICS_DISABLE

                    /* Increment the number of driver write sector(s) requests.  */
                    media_ptr -> fx_media_driver_write_requests++;
 8013dea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013dec:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8013df0:	1c5a      	adds	r2, r3, #1
 8013df2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013df4:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
#endif

                    /* Build write request to the driver.  */
                    media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 8013df8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013dfa:	2201      	movs	r2, #1
 8013dfc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                    media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8013e00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013e02:	2290      	movs	r2, #144	; 0x90
 8013e04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                    media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 8013e08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013e0a:	681a      	ldr	r2, [r3, #0]
 8013e0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013e0e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#ifdef FX_DRIVER_USE_64BIT_LBA
                    media_ptr -> fx_media_driver_logical_sector =   cache_entry -> fx_cached_sector;
#else
                    media_ptr -> fx_media_driver_logical_sector =   (ULONG)cache_entry -> fx_cached_sector;
 8013e12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013e14:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8013e18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013e1a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif
                    media_ptr -> fx_media_driver_sectors =          1;
 8013e1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013e20:	2201      	movs	r2, #1
 8013e22:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
                    media_ptr -> fx_media_driver_sector_type =      cache_entry -> fx_cached_sector_type;
 8013e26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013e28:	7c9b      	ldrb	r3, [r3, #18]
 8013e2a:	461a      	mov	r2, r3
 8013e2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013e2e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

                    /* Only data sectors may be dirty when FX_FAULT_TOLERANT is defined */
#ifndef FX_FAULT_TOLERANT
                    /* Determine if the sector is a data sector or a system sector.  */
                    if (cache_entry -> fx_cached_sector_type != FX_DATA_SECTOR)
 8013e32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013e34:	7c9b      	ldrb	r3, [r3, #18]
 8013e36:	2b04      	cmp	r3, #4
 8013e38:	d003      	beq.n	8013e42 <_fx_utility_logical_sector_read+0x466>
                    {

                        /* System sector is present.  */
                        media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 8013e3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013e3c:	2201      	movs	r2, #1
 8013e3e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                    /* If trace is enabled, insert this event into the trace buffer.  */
                    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, cache_entry -> fx_cached_sector, 1, cache_entry -> fx_cached_sector_memory_buffer, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                    /* Invoke the driver to write the sector.  */
                    (media_ptr -> fx_media_driver_entry) (media_ptr);
 8013e42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013e44:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8013e48:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8013e4a:	4798      	blx	r3

                    /* Clear the system write flag.  */
                    media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 8013e4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013e4e:	2200      	movs	r2, #0
 8013e50:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                    /* Check for successful completion.  */
                    if (media_ptr -> fx_media_driver_status)
 8013e54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013e56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013e5a:	2b00      	cmp	r3, #0
 8013e5c:	d003      	beq.n	8013e66 <_fx_utility_logical_sector_read+0x48a>
                    {

                        /* Error writing a cached sector out.  Return the
                           error status.  */
                        return(media_ptr -> fx_media_driver_status);
 8013e5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013e60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013e64:	e049      	b.n	8013efa <_fx_utility_logical_sector_read+0x51e>
                    }

                    /* Clear the buffer dirty flag since it has been flushed
                       out.  */
                    cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 8013e66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013e68:	2200      	movs	r2, #0
 8013e6a:	741a      	strb	r2, [r3, #16]

                    /* Decrement the number of outstanding dirty cache entries.  */
                    media_ptr -> fx_media_sector_cache_dirty_count--;
 8013e6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e70:	1e5a      	subs	r2, r3, #1
 8013e72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013e74:	625a      	str	r2, [r3, #36]	; 0x24
                }

                /* Now setup the cache entry with information from the new sector.  */

                /* Remember the sector number.  */
                cache_entry -> fx_cached_sector =  logical_sector;
 8013e76:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8013e78:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8013e7c:	e9c1 2302 	strd	r2, r3, [r1, #8]

                /* Make the cache entry valid.  */
                cache_entry -> fx_cached_sector_valid =  FX_TRUE;
 8013e80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013e82:	2201      	movs	r2, #1
 8013e84:	745a      	strb	r2, [r3, #17]

                /* Remember the sector type.  */
                cache_entry -> fx_cached_sector_type =  sector_type;
 8013e86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013e88:	f897 2088 	ldrb.w	r2, [r7, #136]	; 0x88
 8013e8c:	749a      	strb	r2, [r3, #18]

                /* Place this entry that the head of the cached sector
                   list.  */

                /* Determine if we need to update the last used list.  */
                if (previous_cache_entry)
 8013e8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013e90:	2b00      	cmp	r3, #0
 8013e92:	d00a      	beq.n	8013eaa <_fx_utility_logical_sector_read+0x4ce>

                    /* Yes, the current entry is not at the front of the list
                       so we need to change the order.  */

                    /* Link the previous entry to this entry's next pointer.  */
                    previous_cache_entry -> fx_cached_sector_next_used =
 8013e94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                        cache_entry -> fx_cached_sector_next_used;
 8013e96:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013e98:	6952      	ldr	r2, [r2, #20]
                    previous_cache_entry -> fx_cached_sector_next_used =
 8013e9a:	615a      	str	r2, [r3, #20]

                    /* Place this entry at the head of the list.  */
                    cache_entry -> fx_cached_sector_next_used =
                        media_ptr -> fx_media_sector_cache_list_ptr;
 8013e9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013e9e:	69da      	ldr	r2, [r3, #28]
                    cache_entry -> fx_cached_sector_next_used =
 8013ea0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013ea2:	615a      	str	r2, [r3, #20]
                    media_ptr -> fx_media_sector_cache_list_ptr =  cache_entry;
 8013ea4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013ea6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013ea8:	61da      	str	r2, [r3, #28]
                }

                /* Copy the data from the destination buffer to the cache entry.  */
                _fx_utility_memory_copy(buffer_ptr, /* Use case of memcpy is verified. */
 8013eaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013eac:	6819      	ldr	r1, [r3, #0]
                                        cache_entry -> fx_cached_sector_memory_buffer,
                                        media_ptr -> fx_media_bytes_per_sector);
 8013eae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                _fx_utility_memory_copy(buffer_ptr, /* Use case of memcpy is verified. */
 8013eb2:	461a      	mov	r2, r3
 8013eb4:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8013eb8:	f000 f98c 	bl	80141d4 <_fx_utility_memory_copy>

                /* Advance the destination buffer.  */
                buffer_ptr =  ((UCHAR *)buffer_ptr) + media_ptr -> fx_media_bytes_per_sector;
 8013ebc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013ec0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8013ec4:	4413      	add	r3, r2
 8013ec6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                /* Advance the source sector and decrement the sector count.  */
                logical_sector++;
 8013eca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8013ece:	1c51      	adds	r1, r2, #1
 8013ed0:	6039      	str	r1, [r7, #0]
 8013ed2:	f143 0300 	adc.w	r3, r3, #0
 8013ed6:	607b      	str	r3, [r7, #4]
 8013ed8:	e9d7 3400 	ldrd	r3, r4, [r7]
 8013edc:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                sectors--;
 8013ee0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013ee4:	3b01      	subs	r3, #1
 8013ee6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
            while (sectors)
 8013eea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013eee:	2b00      	cmp	r3, #0
 8013ef0:	f47f af65 	bne.w	8013dbe <_fx_utility_logical_sector_read+0x3e2>
            }
        }
#endif

        /* Return the driver status.  */
        return(media_ptr -> fx_media_driver_status);
 8013ef4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013ef6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    }
}
 8013efa:	4618      	mov	r0, r3
 8013efc:	3760      	adds	r7, #96	; 0x60
 8013efe:	46bd      	mov	sp, r7
 8013f00:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08013f04 <_fx_utility_logical_sector_write>:
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_logical_sector_write(FX_MEDIA *media_ptr, ULONG64 logical_sector,
                                       VOID *buffer_ptr, ULONG sectors, UCHAR sector_type)
{
 8013f04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8013f08:	b096      	sub	sp, #88	; 0x58
 8013f0a:	af04      	add	r7, sp, #16
 8013f0c:	62f8      	str	r0, [r7, #44]	; 0x2c
 8013f0e:	e9c7 2308 	strd	r2, r3, [r7, #32]
#ifndef FX_DISABLE_CACHE
FX_CACHED_SECTOR *cache_entry;
UINT              cache_size;
UINT              index;
UINT              i;
UCHAR             cache_found = FX_FALSE;
 8013f12:	2300      	movs	r3, #0
 8013f14:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
#endif /* FX_DISABLE_CACHE */

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Determine if the request is for FAT sector.  */
    if (sector_type == FX_FAT_SECTOR)
 8013f18:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8013f1c:	2b02      	cmp	r3, #2
 8013f1e:	d106      	bne.n	8013f2e <_fx_utility_logical_sector_write+0x2a>
    {

        /* Increment the number of FAT sector writes.  */
        media_ptr -> fx_media_fat_sector_writes++;
 8013f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f22:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8013f26:	1c5a      	adds	r2, r3, #1
 8013f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f2a:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    }

    /* Increment the number of logical sectors written.  */
    media_ptr -> fx_media_logical_sector_writes++;
 8013f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f30:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8013f34:	1c5a      	adds	r2, r3, #1
 8013f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f38:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
    /* Extended port-specific processing macro, which is by default defined to white space.  */
    FX_UTILITY_LOGICAL_SECTOR_WRITE_EXTENSION

#ifndef FX_DISABLE_CACHE
    /* Determine if the request is from the internal media buffer area.  */
    if ((((UCHAR *)buffer_ptr) >= media_ptr -> fx_media_memory_buffer) &&
 8013f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f3e:	689a      	ldr	r2, [r3, #8]
 8013f40:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013f42:	4293      	cmp	r3, r2
 8013f44:	f0c0 80d8 	bcc.w	80140f8 <_fx_utility_logical_sector_write+0x1f4>
        (((UCHAR *)buffer_ptr) <= media_ptr -> fx_media_sector_cache_end))
 8013f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f4a:	699a      	ldr	r2, [r3, #24]
    if ((((UCHAR *)buffer_ptr) >= media_ptr -> fx_media_memory_buffer) &&
 8013f4c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013f4e:	4293      	cmp	r3, r2
 8013f50:	f200 80d2 	bhi.w	80140f8 <_fx_utility_logical_sector_write+0x1f4>
    {

        /* Internal cache buffer is requested.  */

        /* Determine if the logical sector cache access should use the hash function.  */
        if (media_ptr -> fx_media_sector_cache_hashed)
 8013f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f56:	691b      	ldr	r3, [r3, #16]
 8013f58:	2b00      	cmp	r3, #0
 8013f5a:	d030      	beq.n	8013fbe <_fx_utility_logical_sector_write+0xba>
        {

            /* Calculate the area of the cache for this logical sector.  */
            index =  (ULONG)(logical_sector & media_ptr -> fx_media_sector_cache_hash_mask) * FX_SECTOR_CACHE_DEPTH;
 8013f5c:	6a3a      	ldr	r2, [r7, #32]
 8013f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f60:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8013f64:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 8013f68:	4013      	ands	r3, r2
 8013f6a:	009b      	lsls	r3, r3, #2
 8013f6c:	637b      	str	r3, [r7, #52]	; 0x34

            /* Build a pointer to the cache entry.  */
            cache_entry =  &(media_ptr -> fx_media_sector_cache[index]);
 8013f6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013f70:	4613      	mov	r3, r2
 8013f72:	005b      	lsls	r3, r3, #1
 8013f74:	4413      	add	r3, r2
 8013f76:	00db      	lsls	r3, r3, #3
 8013f78:	f503 634a 	add.w	r3, r3, #3232	; 0xca0
 8013f7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013f7e:	4413      	add	r3, r2
 8013f80:	647b      	str	r3, [r7, #68]	; 0x44

            for (i = 0; i < FX_SECTOR_CACHE_DEPTH; i++, cache_entry++)
 8013f82:	2300      	movs	r3, #0
 8013f84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013f86:	e016      	b.n	8013fb6 <_fx_utility_logical_sector_write+0xb2>
            {


                /* Determine if the logical sector is in the cache - assuming the depth of the
                   sector cache is 4 entries.  */
                if ((cache_entry -> fx_cached_sector_valid) && (cache_entry -> fx_cached_sector == logical_sector))
 8013f88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013f8a:	7c5b      	ldrb	r3, [r3, #17]
 8013f8c:	2b00      	cmp	r3, #0
 8013f8e:	d00c      	beq.n	8013faa <_fx_utility_logical_sector_write+0xa6>
 8013f90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013f92:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8013f96:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8013f9a:	4299      	cmp	r1, r3
 8013f9c:	bf08      	it	eq
 8013f9e:	4290      	cmpeq	r0, r2
 8013fa0:	d103      	bne.n	8013faa <_fx_utility_logical_sector_write+0xa6>
                {
                    cache_found = FX_TRUE;
 8013fa2:	2301      	movs	r3, #1
 8013fa4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
                    break;
 8013fa8:	e02d      	b.n	8014006 <_fx_utility_logical_sector_write+0x102>
            for (i = 0; i < FX_SECTOR_CACHE_DEPTH; i++, cache_entry++)
 8013faa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013fac:	3301      	adds	r3, #1
 8013fae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013fb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013fb2:	3318      	adds	r3, #24
 8013fb4:	647b      	str	r3, [r7, #68]	; 0x44
 8013fb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013fb8:	2b03      	cmp	r3, #3
 8013fba:	d9e5      	bls.n	8013f88 <_fx_utility_logical_sector_write+0x84>
 8013fbc:	e023      	b.n	8014006 <_fx_utility_logical_sector_write+0x102>
        }
        else
        {

            /* Search for an entry in the cache that matches this request.  */
            cache_size =            media_ptr -> fx_media_sector_cache_size;
 8013fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fc0:	695b      	ldr	r3, [r3, #20]
 8013fc2:	643b      	str	r3, [r7, #64]	; 0x40
            cache_entry =           media_ptr -> fx_media_sector_cache_list_ptr;
 8013fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fc6:	69db      	ldr	r3, [r3, #28]
 8013fc8:	647b      	str	r3, [r7, #68]	; 0x44

            /* Look at the cache entries until a match is found or the end of
               the cache is reached.  */
            while (cache_size--)
 8013fca:	e017      	b.n	8013ffc <_fx_utility_logical_sector_write+0xf8>
            {

                /* Determine if the requested sector has been found.  */
                if ((cache_entry -> fx_cached_sector_valid) && (cache_entry -> fx_cached_sector == logical_sector))
 8013fcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013fce:	7c5b      	ldrb	r3, [r3, #17]
 8013fd0:	2b00      	cmp	r3, #0
 8013fd2:	d00c      	beq.n	8013fee <_fx_utility_logical_sector_write+0xea>
 8013fd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013fd6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8013fda:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8013fde:	4299      	cmp	r1, r3
 8013fe0:	bf08      	it	eq
 8013fe2:	4290      	cmpeq	r0, r2
 8013fe4:	d103      	bne.n	8013fee <_fx_utility_logical_sector_write+0xea>
                {
                    cache_found = FX_TRUE;
 8013fe6:	2301      	movs	r3, #1
 8013fe8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
                    break;
 8013fec:	e00b      	b.n	8014006 <_fx_utility_logical_sector_write+0x102>
                }

                /* Otherwise, we have not found the cached entry yet.  */

                /* If there are more entries, move to the next one.  */
                if (cache_entry -> fx_cached_sector_next_used)
 8013fee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013ff0:	695b      	ldr	r3, [r3, #20]
 8013ff2:	2b00      	cmp	r3, #0
 8013ff4:	d002      	beq.n	8013ffc <_fx_utility_logical_sector_write+0xf8>
                {

                    /* Move to the next cache entry.  */
                    cache_entry =  cache_entry -> fx_cached_sector_next_used;
 8013ff6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013ff8:	695b      	ldr	r3, [r3, #20]
 8013ffa:	647b      	str	r3, [r7, #68]	; 0x44
            while (cache_size--)
 8013ffc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013ffe:	1e5a      	subs	r2, r3, #1
 8014000:	643a      	str	r2, [r7, #64]	; 0x40
 8014002:	2b00      	cmp	r3, #0
 8014004:	d1e2      	bne.n	8013fcc <_fx_utility_logical_sector_write+0xc8>
                }
            }
        }
#endif /* FX_ENABLE_FAULT_TOLERANT */

        if (cache_found)
 8014006:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801400a:	2b00      	cmp	r3, #0
 801400c:	d00d      	beq.n	801402a <_fx_utility_logical_sector_write+0x126>
                return(media_ptr -> fx_media_driver_status);
            }
#endif

            /* Determine if this is the first write of this logical sector.  */
            if (cache_entry -> fx_cached_sector_buffer_dirty == FX_FALSE)
 801400e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014010:	7c1b      	ldrb	r3, [r3, #16]
 8014012:	2b00      	cmp	r3, #0
 8014014:	d107      	bne.n	8014026 <_fx_utility_logical_sector_write+0x122>
            {

                /* Yes, increment the number of outstanding dirty sectors.  */
                media_ptr -> fx_media_sector_cache_dirty_count++;
 8014016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801401a:	1c5a      	adds	r2, r3, #1
 801401c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801401e:	625a      	str	r2, [r3, #36]	; 0x24

                /* Simply mark this entry as dirty.  */
                cache_entry -> fx_cached_sector_buffer_dirty =  FX_TRUE;
 8014020:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014022:	2201      	movs	r2, #1
 8014024:	741a      	strb	r2, [r3, #16]

            /* Don't bother updating the cache linked list since writes are
               preceded by reads anyway.  */

            /* Success, return to caller immediately!  */
            return(FX_SUCCESS);
 8014026:	2300      	movs	r3, #0
 8014028:	e0cf      	b.n	80141ca <_fx_utility_logical_sector_write+0x2c6>

        /* Okay, so if we are here the request must be for the additional FAT writes, since this is the
           only time a write request is made without a preceding read request.  */

        /* Is the logical sector valid?  */
        if ((logical_sector == 0) || (logical_sector == ((ULONG)0xFFFFFFFF)))
 801402a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801402e:	4313      	orrs	r3, r2
 8014030:	d004      	beq.n	801403c <_fx_utility_logical_sector_write+0x138>
 8014032:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8014036:	1c51      	adds	r1, r2, #1
 8014038:	430b      	orrs	r3, r1
 801403a:	d101      	bne.n	8014040 <_fx_utility_logical_sector_write+0x13c>
        {
            return(FX_SECTOR_INVALID);
 801403c:	2389      	movs	r3, #137	; 0x89
 801403e:	e0c4      	b.n	80141ca <_fx_utility_logical_sector_write+0x2c6>
        }

        /* Compare logical sector against total sectors to make sure it is valid.  */
        if ((logical_sector + sectors - 1) >= media_ptr -> fx_media_total_sectors)
 8014040:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014042:	2200      	movs	r2, #0
 8014044:	61bb      	str	r3, [r7, #24]
 8014046:	61fa      	str	r2, [r7, #28]
 8014048:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801404c:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8014050:	4621      	mov	r1, r4
 8014052:	1889      	adds	r1, r1, r2
 8014054:	6139      	str	r1, [r7, #16]
 8014056:	4629      	mov	r1, r5
 8014058:	eb43 0101 	adc.w	r1, r3, r1
 801405c:	6179      	str	r1, [r7, #20]
 801405e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8014062:	460b      	mov	r3, r1
 8014064:	f113 3aff 	adds.w	sl, r3, #4294967295	; 0xffffffff
 8014068:	4613      	mov	r3, r2
 801406a:	f143 3bff 	adc.w	fp, r3, #4294967295	; 0xffffffff
 801406e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014070:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8014074:	4592      	cmp	sl, r2
 8014076:	eb7b 0303 	sbcs.w	r3, fp, r3
 801407a:	d301      	bcc.n	8014080 <_fx_utility_logical_sector_write+0x17c>
        {
            return(FX_SECTOR_INVALID);
 801407c:	2389      	movs	r3, #137	; 0x89
 801407e:	e0a4      	b.n	80141ca <_fx_utility_logical_sector_write+0x2c6>
        /* Just write the buffer to the media.  */

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver write sector(s) requests.  */
        media_ptr -> fx_media_driver_write_requests++;
 8014080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014082:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8014086:	1c5a      	adds	r2, r3, #1
 8014088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801408a:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
#endif

        /* Build write request to the driver.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 801408e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014090:	2201      	movs	r2, #1
 8014092:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8014096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014098:	2290      	movs	r2, #144	; 0x90
 801409a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 801409e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140a0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80140a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#ifdef FX_DRIVER_USE_64BIT_LBA
        media_ptr -> fx_media_driver_logical_sector =   logical_sector;
#else
        media_ptr -> fx_media_driver_logical_sector =   (ULONG)logical_sector;
 80140a6:	6a3a      	ldr	r2, [r7, #32]
 80140a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140aa:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif
        media_ptr -> fx_media_driver_sectors =          sectors;
 80140ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140b0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80140b2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        media_ptr -> fx_media_driver_sector_type =      sector_type;
 80140b6:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 80140ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140bc:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

        /* Determine if the system write flag needs to be set.  */
        if (sector_type != FX_DATA_SECTOR)
 80140c0:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 80140c4:	2b04      	cmp	r3, #4
 80140c6:	d003      	beq.n	80140d0 <_fx_utility_logical_sector_write+0x1cc>
        {

            /* Yes, a system sector write is present so set the flag.  The driver
               can use this flag to make extra safeguards in writing the sector
               out, yielding more fault tolerance.  */
            media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 80140c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140ca:	2201      	movs	r2, #1
 80140cc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, logical_sector, sectors, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Invoke the driver to write the sector(s).  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 80140d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140d2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80140d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80140d8:	4798      	blx	r3

        /* Clear the system write flag.  */
        media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 80140da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140dc:	2200      	movs	r2, #0
 80140de:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

        /* Check for successful completion.  */
        if (media_ptr -> fx_media_driver_status)
 80140e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80140e8:	2b00      	cmp	r3, #0
 80140ea:	d003      	beq.n	80140f4 <_fx_utility_logical_sector_write+0x1f0>
        {

            /* Error writing a internal sector out.  Return the
               error status.  */
            return(media_ptr -> fx_media_driver_status);
 80140ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80140f2:	e06a      	b.n	80141ca <_fx_utility_logical_sector_write+0x2c6>
        }

        /* At this point, we have a successful write.  */
        return(FX_SUCCESS);
 80140f4:	2300      	movs	r3, #0
 80140f6:	e068      	b.n	80141ca <_fx_utility_logical_sector_write+0x2c6>

        /* Otherwise, the write request is being made directly from an application
           buffer. Determine if the logical sector is valid.  */

        /* Is the logical sector valid? */
        if ((logical_sector == 0) || (logical_sector == ((ULONG)0xFFFFFFFF)))
 80140f8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80140fc:	4313      	orrs	r3, r2
 80140fe:	d004      	beq.n	801410a <_fx_utility_logical_sector_write+0x206>
 8014100:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8014104:	1c51      	adds	r1, r2, #1
 8014106:	430b      	orrs	r3, r1
 8014108:	d101      	bne.n	801410e <_fx_utility_logical_sector_write+0x20a>
        {
            return(FX_SECTOR_INVALID);
 801410a:	2389      	movs	r3, #137	; 0x89
 801410c:	e05d      	b.n	80141ca <_fx_utility_logical_sector_write+0x2c6>
        }

        /* Compare logical sector against total sectors to make sure it is valid.  */
        if ((logical_sector + sectors - 1) >= media_ptr -> fx_media_total_sectors)
 801410e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014110:	2200      	movs	r2, #0
 8014112:	60bb      	str	r3, [r7, #8]
 8014114:	60fa      	str	r2, [r7, #12]
 8014116:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801411a:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 801411e:	4651      	mov	r1, sl
 8014120:	eb11 0802 	adds.w	r8, r1, r2
 8014124:	4659      	mov	r1, fp
 8014126:	eb41 0903 	adc.w	r9, r1, r3
 801412a:	f118 34ff 	adds.w	r4, r8, #4294967295	; 0xffffffff
 801412e:	f149 35ff 	adc.w	r5, r9, #4294967295	; 0xffffffff
 8014132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014134:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8014138:	4294      	cmp	r4, r2
 801413a:	eb75 0303 	sbcs.w	r3, r5, r3
 801413e:	d301      	bcc.n	8014144 <_fx_utility_logical_sector_write+0x240>
        {
            return(FX_SECTOR_INVALID);
 8014140:	2389      	movs	r3, #137	; 0x89
 8014142:	e042      	b.n	80141ca <_fx_utility_logical_sector_write+0x2c6>
        }

        /* Flush and invalidate for any entries in the cache that are in this direct I/O read request range.  */
        _fx_utility_logical_sector_flush(media_ptr, logical_sector, (ULONG64) sectors, FX_TRUE);
 8014144:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014146:	2200      	movs	r2, #0
 8014148:	603b      	str	r3, [r7, #0]
 801414a:	607a      	str	r2, [r7, #4]
 801414c:	2301      	movs	r3, #1
 801414e:	9302      	str	r3, [sp, #8]
 8014150:	e9d7 3400 	ldrd	r3, r4, [r7]
 8014154:	e9cd 3400 	strd	r3, r4, [sp]
 8014158:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801415c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801415e:	f7ff fa27 	bl	80135b0 <_fx_utility_logical_sector_flush>
#endif /* FX_DISABLE_CACHE */

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver write sector(s) requests.  */
        media_ptr -> fx_media_driver_write_requests++;
 8014162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014164:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8014168:	1c5a      	adds	r2, r3, #1
 801416a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801416c:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
#endif

        /* Build request to the driver.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 8014170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014172:	2201      	movs	r2, #1
 8014174:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8014178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801417a:	2290      	movs	r2, #144	; 0x90
 801417c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 8014180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014182:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8014184:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#ifdef FX_DRIVER_USE_64BIT_LBA
        media_ptr -> fx_media_driver_logical_sector =   logical_sector;
#else
        media_ptr -> fx_media_driver_logical_sector =   (ULONG)logical_sector;
 8014188:	6a3a      	ldr	r2, [r7, #32]
 801418a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801418c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif
        media_ptr -> fx_media_driver_sectors =          sectors;
 8014190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014192:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8014194:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        media_ptr -> fx_media_driver_sector_type =      sector_type;
 8014198:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 801419c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801419e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

        /* Determine if the system write flag needs to be set.  */
        if (sector_type != FX_DATA_SECTOR)
 80141a2:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 80141a6:	2b04      	cmp	r3, #4
 80141a8:	d003      	beq.n	80141b2 <_fx_utility_logical_sector_write+0x2ae>
        {

            /* Yes, a system sector write is present so set the flag.  The driver
               can use this flag to make extra safeguards in writing the sector
               out, yielding more fault tolerance.  */
            media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 80141aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141ac:	2201      	movs	r2, #1
 80141ae:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, logical_sector, sectors, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Invoke the driver to write the sector(s).  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 80141b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141b4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80141b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80141ba:	4798      	blx	r3

        /* Clear the system write flag.  */
        media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 80141bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141be:	2200      	movs	r2, #0
 80141c0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

        /* Return driver status.  */
        return(media_ptr -> fx_media_driver_status);
 80141c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    }
}
 80141ca:	4618      	mov	r0, r3
 80141cc:	3748      	adds	r7, #72	; 0x48
 80141ce:	46bd      	mov	sp, r7
 80141d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080141d4 <_fx_utility_memory_copy>:
/*                                            memcpy usage,               */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _fx_utility_memory_copy(UCHAR *source_ptr, UCHAR *dest_ptr, ULONG size)
{
 80141d4:	b580      	push	{r7, lr}
 80141d6:	b084      	sub	sp, #16
 80141d8:	af00      	add	r7, sp, #0
 80141da:	60f8      	str	r0, [r7, #12]
 80141dc:	60b9      	str	r1, [r7, #8]
 80141de:	607a      	str	r2, [r7, #4]

    /* Copy the memory.  */
    memcpy(dest_ptr, source_ptr, size); /* Use case of memcpy is verified. */
 80141e0:	687a      	ldr	r2, [r7, #4]
 80141e2:	68f9      	ldr	r1, [r7, #12]
 80141e4:	68b8      	ldr	r0, [r7, #8]
 80141e6:	f005 fd3c 	bl	8019c62 <memcpy>
}
 80141ea:	bf00      	nop
 80141ec:	3710      	adds	r7, #16
 80141ee:	46bd      	mov	sp, r7
 80141f0:	bd80      	pop	{r7, pc}
	...

080141f4 <_fxe_file_close>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fxe_file_close(FX_FILE *file_ptr)
{
 80141f4:	b580      	push	{r7, lr}
 80141f6:	b084      	sub	sp, #16
 80141f8:	af00      	add	r7, sp, #0
 80141fa:	6078      	str	r0, [r7, #4]

UINT status;


    /* Check for a null file pointer.  */
    if (file_ptr == FX_NULL)
 80141fc:	687b      	ldr	r3, [r7, #4]
 80141fe:	2b00      	cmp	r3, #0
 8014200:	d101      	bne.n	8014206 <_fxe_file_close+0x12>
    {
        return(FX_PTR_ERROR);
 8014202:	2318      	movs	r3, #24
 8014204:	e018      	b.n	8014238 <_fxe_file_close+0x44>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8014206:	f3ef 8305 	mrs	r3, IPSR
 801420a:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 801420c:	68ba      	ldr	r2, [r7, #8]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 801420e:	4b0c      	ldr	r3, [pc, #48]	; (8014240 <_fxe_file_close+0x4c>)
 8014210:	681b      	ldr	r3, [r3, #0]
 8014212:	4313      	orrs	r3, r2
 8014214:	2b00      	cmp	r3, #0
 8014216:	d108      	bne.n	801422a <_fxe_file_close+0x36>
 8014218:	4b0a      	ldr	r3, [pc, #40]	; (8014244 <_fxe_file_close+0x50>)
 801421a:	681b      	ldr	r3, [r3, #0]
 801421c:	2b00      	cmp	r3, #0
 801421e:	d004      	beq.n	801422a <_fxe_file_close+0x36>
 8014220:	4b08      	ldr	r3, [pc, #32]	; (8014244 <_fxe_file_close+0x50>)
 8014222:	681b      	ldr	r3, [r3, #0]
 8014224:	4a08      	ldr	r2, [pc, #32]	; (8014248 <_fxe_file_close+0x54>)
 8014226:	4293      	cmp	r3, r2
 8014228:	d101      	bne.n	801422e <_fxe_file_close+0x3a>
 801422a:	2320      	movs	r3, #32
 801422c:	e004      	b.n	8014238 <_fxe_file_close+0x44>

    /* Call actual file close service.  */
    status =  _fx_file_close(file_ptr);
 801422e:	6878      	ldr	r0, [r7, #4]
 8014230:	f7f9 fb9a 	bl	800d968 <_fx_file_close>
 8014234:	60f8      	str	r0, [r7, #12]

    /* Return status to the caller.  */
    return(status);
 8014236:	68fb      	ldr	r3, [r7, #12]
}
 8014238:	4618      	mov	r0, r3
 801423a:	3710      	adds	r7, #16
 801423c:	46bd      	mov	sp, r7
 801423e:	bd80      	pop	{r7, pc}
 8014240:	200010dc 	.word	0x200010dc
 8014244:	2001524c 	.word	0x2001524c
 8014248:	20015394 	.word	0x20015394

0801424c <_fxe_file_create>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fxe_file_create(FX_MEDIA *media_ptr, CHAR *file_name)
{
 801424c:	b580      	push	{r7, lr}
 801424e:	b084      	sub	sp, #16
 8014250:	af00      	add	r7, sp, #0
 8014252:	6078      	str	r0, [r7, #4]
 8014254:	6039      	str	r1, [r7, #0]

UINT status;


    /* Check for a null media pointer.  */
    if (media_ptr == FX_NULL)
 8014256:	687b      	ldr	r3, [r7, #4]
 8014258:	2b00      	cmp	r3, #0
 801425a:	d101      	bne.n	8014260 <_fxe_file_create+0x14>
    {
        return(FX_PTR_ERROR);
 801425c:	2318      	movs	r3, #24
 801425e:	e019      	b.n	8014294 <_fxe_file_create+0x48>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8014260:	f3ef 8305 	mrs	r3, IPSR
 8014264:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 8014266:	68ba      	ldr	r2, [r7, #8]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 8014268:	4b0c      	ldr	r3, [pc, #48]	; (801429c <_fxe_file_create+0x50>)
 801426a:	681b      	ldr	r3, [r3, #0]
 801426c:	4313      	orrs	r3, r2
 801426e:	2b00      	cmp	r3, #0
 8014270:	d108      	bne.n	8014284 <_fxe_file_create+0x38>
 8014272:	4b0b      	ldr	r3, [pc, #44]	; (80142a0 <_fxe_file_create+0x54>)
 8014274:	681b      	ldr	r3, [r3, #0]
 8014276:	2b00      	cmp	r3, #0
 8014278:	d004      	beq.n	8014284 <_fxe_file_create+0x38>
 801427a:	4b09      	ldr	r3, [pc, #36]	; (80142a0 <_fxe_file_create+0x54>)
 801427c:	681b      	ldr	r3, [r3, #0]
 801427e:	4a09      	ldr	r2, [pc, #36]	; (80142a4 <_fxe_file_create+0x58>)
 8014280:	4293      	cmp	r3, r2
 8014282:	d101      	bne.n	8014288 <_fxe_file_create+0x3c>
 8014284:	2320      	movs	r3, #32
 8014286:	e005      	b.n	8014294 <_fxe_file_create+0x48>

    /* Call actual file create service.  */
    status =  _fx_file_create(media_ptr, file_name);
 8014288:	6839      	ldr	r1, [r7, #0]
 801428a:	6878      	ldr	r0, [r7, #4]
 801428c:	f7f9 fc10 	bl	800dab0 <_fx_file_create>
 8014290:	60f8      	str	r0, [r7, #12]

    /* File create is complete, return status.  */
    return(status);
 8014292:	68fb      	ldr	r3, [r7, #12]
}
 8014294:	4618      	mov	r0, r3
 8014296:	3710      	adds	r7, #16
 8014298:	46bd      	mov	sp, r7
 801429a:	bd80      	pop	{r7, pc}
 801429c:	200010dc 	.word	0x200010dc
 80142a0:	2001524c 	.word	0x2001524c
 80142a4:	20015394 	.word	0x20015394

080142a8 <_fxe_file_open>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fxe_file_open(FX_MEDIA *media_ptr, FX_FILE *file_ptr, CHAR *file_name, UINT open_type, UINT file_control_block_size)
{
 80142a8:	b580      	push	{r7, lr}
 80142aa:	b088      	sub	sp, #32
 80142ac:	af00      	add	r7, sp, #0
 80142ae:	60f8      	str	r0, [r7, #12]
 80142b0:	60b9      	str	r1, [r7, #8]
 80142b2:	607a      	str	r2, [r7, #4]
 80142b4:	603b      	str	r3, [r7, #0]
FX_FILE *current_file;
ULONG    open_count;


    /* Check for a null media or file pointer.  */
    if ((media_ptr == FX_NULL) || (media_ptr -> fx_media_id != FX_MEDIA_ID) || (file_ptr == FX_NULL) || (file_control_block_size != sizeof(FX_FILE)))
 80142b6:	68fb      	ldr	r3, [r7, #12]
 80142b8:	2b00      	cmp	r3, #0
 80142ba:	d00b      	beq.n	80142d4 <_fxe_file_open+0x2c>
 80142bc:	68fb      	ldr	r3, [r7, #12]
 80142be:	681b      	ldr	r3, [r3, #0]
 80142c0:	4a36      	ldr	r2, [pc, #216]	; (801439c <_fxe_file_open+0xf4>)
 80142c2:	4293      	cmp	r3, r2
 80142c4:	d106      	bne.n	80142d4 <_fxe_file_open+0x2c>
 80142c6:	68bb      	ldr	r3, [r7, #8]
 80142c8:	2b00      	cmp	r3, #0
 80142ca:	d003      	beq.n	80142d4 <_fxe_file_open+0x2c>
 80142cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142ce:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80142d2:	d001      	beq.n	80142d8 <_fxe_file_open+0x30>
    {
        return(FX_PTR_ERROR);
 80142d4:	2318      	movs	r3, #24
 80142d6:	e05d      	b.n	8014394 <_fxe_file_open+0xec>
    }

    /* Check for an invalid open type.  */
    if ((open_type != FX_OPEN_FOR_READ) && (open_type != FX_OPEN_FOR_READ_FAST) && (open_type != FX_OPEN_FOR_WRITE))
 80142d8:	683b      	ldr	r3, [r7, #0]
 80142da:	2b00      	cmp	r3, #0
 80142dc:	d007      	beq.n	80142ee <_fxe_file_open+0x46>
 80142de:	683b      	ldr	r3, [r7, #0]
 80142e0:	2b02      	cmp	r3, #2
 80142e2:	d004      	beq.n	80142ee <_fxe_file_open+0x46>
 80142e4:	683b      	ldr	r3, [r7, #0]
 80142e6:	2b01      	cmp	r3, #1
 80142e8:	d001      	beq.n	80142ee <_fxe_file_open+0x46>
    {
        return(FX_ACCESS_ERROR);
 80142ea:	2306      	movs	r3, #6
 80142ec:	e052      	b.n	8014394 <_fxe_file_open+0xec>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80142ee:	f3ef 8305 	mrs	r3, IPSR
 80142f2:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 80142f4:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 80142f6:	4b2a      	ldr	r3, [pc, #168]	; (80143a0 <_fxe_file_open+0xf8>)
 80142f8:	681b      	ldr	r3, [r3, #0]
 80142fa:	4313      	orrs	r3, r2
 80142fc:	2b00      	cmp	r3, #0
 80142fe:	d108      	bne.n	8014312 <_fxe_file_open+0x6a>
 8014300:	4b28      	ldr	r3, [pc, #160]	; (80143a4 <_fxe_file_open+0xfc>)
 8014302:	681b      	ldr	r3, [r3, #0]
 8014304:	2b00      	cmp	r3, #0
 8014306:	d004      	beq.n	8014312 <_fxe_file_open+0x6a>
 8014308:	4b26      	ldr	r3, [pc, #152]	; (80143a4 <_fxe_file_open+0xfc>)
 801430a:	681b      	ldr	r3, [r3, #0]
 801430c:	4a26      	ldr	r2, [pc, #152]	; (80143a8 <_fxe_file_open+0x100>)
 801430e:	4293      	cmp	r3, r2
 8014310:	d101      	bne.n	8014316 <_fxe_file_open+0x6e>
 8014312:	2320      	movs	r3, #32
 8014314:	e03e      	b.n	8014394 <_fxe_file_open+0xec>

    /* Get protection.  */
    FX_PROTECT
 8014316:	68fb      	ldr	r3, [r7, #12]
 8014318:	681b      	ldr	r3, [r3, #0]
 801431a:	4a20      	ldr	r2, [pc, #128]	; (801439c <_fxe_file_open+0xf4>)
 801431c:	4293      	cmp	r3, r2
 801431e:	d001      	beq.n	8014324 <_fxe_file_open+0x7c>
 8014320:	2311      	movs	r3, #17
 8014322:	e037      	b.n	8014394 <_fxe_file_open+0xec>
 8014324:	68fb      	ldr	r3, [r7, #12]
 8014326:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 801432a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801432e:	4618      	mov	r0, r3
 8014330:	f003 f8ea 	bl	8017508 <_tx_mutex_get>
 8014334:	4603      	mov	r3, r0
 8014336:	2b00      	cmp	r3, #0
 8014338:	d001      	beq.n	801433e <_fxe_file_open+0x96>
 801433a:	2311      	movs	r3, #17
 801433c:	e02a      	b.n	8014394 <_fxe_file_open+0xec>

    /* Check for a duplicate file open.  */

    /* Loop to search the list for the same file handle.  */
    current_file =  media_ptr -> fx_media_opened_file_list;
 801433e:	68fb      	ldr	r3, [r7, #12]
 8014340:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8014344:	61fb      	str	r3, [r7, #28]
    open_count =    media_ptr -> fx_media_opened_file_count;
 8014346:	68fb      	ldr	r3, [r7, #12]
 8014348:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 801434c:	61bb      	str	r3, [r7, #24]

    while (open_count--)
 801434e:	e00e      	b.n	801436e <_fxe_file_open+0xc6>
    {

        /* See if a match exists.  */
        if (file_ptr == current_file)
 8014350:	68ba      	ldr	r2, [r7, #8]
 8014352:	69fb      	ldr	r3, [r7, #28]
 8014354:	429a      	cmp	r2, r3
 8014356:	d107      	bne.n	8014368 <_fxe_file_open+0xc0>
        {

            /* Release protection.  */
            FX_UNPROTECT
 8014358:	68fb      	ldr	r3, [r7, #12]
 801435a:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 801435e:	4618      	mov	r0, r3
 8014360:	f003 fb4a 	bl	80179f8 <_tx_mutex_put>

            /* Return error.  */
            return(FX_PTR_ERROR);
 8014364:	2318      	movs	r3, #24
 8014366:	e015      	b.n	8014394 <_fxe_file_open+0xec>
        }

        /* Move to the next opened file.  */
        current_file =  current_file -> fx_file_opened_next;
 8014368:	69fb      	ldr	r3, [r7, #28]
 801436a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801436c:	61fb      	str	r3, [r7, #28]
    while (open_count--)
 801436e:	69bb      	ldr	r3, [r7, #24]
 8014370:	1e5a      	subs	r2, r3, #1
 8014372:	61ba      	str	r2, [r7, #24]
 8014374:	2b00      	cmp	r3, #0
 8014376:	d1eb      	bne.n	8014350 <_fxe_file_open+0xa8>
    }

    /* Release protection.  */
    FX_UNPROTECT
 8014378:	68fb      	ldr	r3, [r7, #12]
 801437a:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 801437e:	4618      	mov	r0, r3
 8014380:	f003 fb3a 	bl	80179f8 <_tx_mutex_put>

    /* Call actual file open service.  */
    status =  _fx_file_open(media_ptr, file_ptr, file_name, open_type);
 8014384:	683b      	ldr	r3, [r7, #0]
 8014386:	687a      	ldr	r2, [r7, #4]
 8014388:	68b9      	ldr	r1, [r7, #8]
 801438a:	68f8      	ldr	r0, [r7, #12]
 801438c:	f7f9 ffcc 	bl	800e328 <_fx_file_open>
 8014390:	6178      	str	r0, [r7, #20]

    /* Open is complete, return status.  */
    return(status);
 8014392:	697b      	ldr	r3, [r7, #20]
}
 8014394:	4618      	mov	r0, r3
 8014396:	3720      	adds	r7, #32
 8014398:	46bd      	mov	sp, r7
 801439a:	bd80      	pop	{r7, pc}
 801439c:	4d454449 	.word	0x4d454449
 80143a0:	200010dc 	.word	0x200010dc
 80143a4:	2001524c 	.word	0x2001524c
 80143a8:	20015394 	.word	0x20015394

080143ac <_fxe_file_read>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fxe_file_read(FX_FILE *file_ptr, VOID *buffer_ptr, ULONG request_size, ULONG *actual_size)
{
 80143ac:	b580      	push	{r7, lr}
 80143ae:	b086      	sub	sp, #24
 80143b0:	af00      	add	r7, sp, #0
 80143b2:	60f8      	str	r0, [r7, #12]
 80143b4:	60b9      	str	r1, [r7, #8]
 80143b6:	607a      	str	r2, [r7, #4]
 80143b8:	603b      	str	r3, [r7, #0]

UINT status;


    /* Check for a null file or buffer pointer.  */
    if ((file_ptr == FX_NULL) || (buffer_ptr == FX_NULL) || (actual_size == FX_NULL))
 80143ba:	68fb      	ldr	r3, [r7, #12]
 80143bc:	2b00      	cmp	r3, #0
 80143be:	d005      	beq.n	80143cc <_fxe_file_read+0x20>
 80143c0:	68bb      	ldr	r3, [r7, #8]
 80143c2:	2b00      	cmp	r3, #0
 80143c4:	d002      	beq.n	80143cc <_fxe_file_read+0x20>
 80143c6:	683b      	ldr	r3, [r7, #0]
 80143c8:	2b00      	cmp	r3, #0
 80143ca:	d101      	bne.n	80143d0 <_fxe_file_read+0x24>
    {
        return(FX_PTR_ERROR);
 80143cc:	2318      	movs	r3, #24
 80143ce:	e01b      	b.n	8014408 <_fxe_file_read+0x5c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80143d0:	f3ef 8305 	mrs	r3, IPSR
 80143d4:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 80143d6:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 80143d8:	4b0d      	ldr	r3, [pc, #52]	; (8014410 <_fxe_file_read+0x64>)
 80143da:	681b      	ldr	r3, [r3, #0]
 80143dc:	4313      	orrs	r3, r2
 80143de:	2b00      	cmp	r3, #0
 80143e0:	d108      	bne.n	80143f4 <_fxe_file_read+0x48>
 80143e2:	4b0c      	ldr	r3, [pc, #48]	; (8014414 <_fxe_file_read+0x68>)
 80143e4:	681b      	ldr	r3, [r3, #0]
 80143e6:	2b00      	cmp	r3, #0
 80143e8:	d004      	beq.n	80143f4 <_fxe_file_read+0x48>
 80143ea:	4b0a      	ldr	r3, [pc, #40]	; (8014414 <_fxe_file_read+0x68>)
 80143ec:	681b      	ldr	r3, [r3, #0]
 80143ee:	4a0a      	ldr	r2, [pc, #40]	; (8014418 <_fxe_file_read+0x6c>)
 80143f0:	4293      	cmp	r3, r2
 80143f2:	d101      	bne.n	80143f8 <_fxe_file_read+0x4c>
 80143f4:	2320      	movs	r3, #32
 80143f6:	e007      	b.n	8014408 <_fxe_file_read+0x5c>

    /* Call actual file read service.  */
    status =  _fx_file_read(file_ptr, buffer_ptr, request_size, actual_size);
 80143f8:	683b      	ldr	r3, [r7, #0]
 80143fa:	687a      	ldr	r2, [r7, #4]
 80143fc:	68b9      	ldr	r1, [r7, #8]
 80143fe:	68f8      	ldr	r0, [r7, #12]
 8014400:	f7fa fc74 	bl	800ecec <_fx_file_read>
 8014404:	6178      	str	r0, [r7, #20]

    /* Return status to the caller.  */
    return(status);
 8014406:	697b      	ldr	r3, [r7, #20]
}
 8014408:	4618      	mov	r0, r3
 801440a:	3718      	adds	r7, #24
 801440c:	46bd      	mov	sp, r7
 801440e:	bd80      	pop	{r7, pc}
 8014410:	200010dc 	.word	0x200010dc
 8014414:	2001524c 	.word	0x2001524c
 8014418:	20015394 	.word	0x20015394

0801441c <_fxe_file_seek>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fxe_file_seek(FX_FILE *file_ptr, ULONG byte_offset)
{
 801441c:	b580      	push	{r7, lr}
 801441e:	b084      	sub	sp, #16
 8014420:	af00      	add	r7, sp, #0
 8014422:	6078      	str	r0, [r7, #4]
 8014424:	6039      	str	r1, [r7, #0]

UINT status;


    /* Check for a null file pointer.  */
    if (file_ptr == FX_NULL)
 8014426:	687b      	ldr	r3, [r7, #4]
 8014428:	2b00      	cmp	r3, #0
 801442a:	d101      	bne.n	8014430 <_fxe_file_seek+0x14>
    {
        return(FX_PTR_ERROR);
 801442c:	2318      	movs	r3, #24
 801442e:	e019      	b.n	8014464 <_fxe_file_seek+0x48>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8014430:	f3ef 8305 	mrs	r3, IPSR
 8014434:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 8014436:	68ba      	ldr	r2, [r7, #8]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 8014438:	4b0c      	ldr	r3, [pc, #48]	; (801446c <_fxe_file_seek+0x50>)
 801443a:	681b      	ldr	r3, [r3, #0]
 801443c:	4313      	orrs	r3, r2
 801443e:	2b00      	cmp	r3, #0
 8014440:	d108      	bne.n	8014454 <_fxe_file_seek+0x38>
 8014442:	4b0b      	ldr	r3, [pc, #44]	; (8014470 <_fxe_file_seek+0x54>)
 8014444:	681b      	ldr	r3, [r3, #0]
 8014446:	2b00      	cmp	r3, #0
 8014448:	d004      	beq.n	8014454 <_fxe_file_seek+0x38>
 801444a:	4b09      	ldr	r3, [pc, #36]	; (8014470 <_fxe_file_seek+0x54>)
 801444c:	681b      	ldr	r3, [r3, #0]
 801444e:	4a09      	ldr	r2, [pc, #36]	; (8014474 <_fxe_file_seek+0x58>)
 8014450:	4293      	cmp	r3, r2
 8014452:	d101      	bne.n	8014458 <_fxe_file_seek+0x3c>
 8014454:	2320      	movs	r3, #32
 8014456:	e005      	b.n	8014464 <_fxe_file_seek+0x48>

    /* Call actual file seek service.  */
    status =  _fx_file_seek(file_ptr, byte_offset);
 8014458:	6839      	ldr	r1, [r7, #0]
 801445a:	6878      	ldr	r0, [r7, #4]
 801445c:	f7fa feea 	bl	800f234 <_fx_file_seek>
 8014460:	60f8      	str	r0, [r7, #12]

    /* Seek is complete, return status.  */
    return(status);
 8014462:	68fb      	ldr	r3, [r7, #12]
}
 8014464:	4618      	mov	r0, r3
 8014466:	3710      	adds	r7, #16
 8014468:	46bd      	mov	sp, r7
 801446a:	bd80      	pop	{r7, pc}
 801446c:	200010dc 	.word	0x200010dc
 8014470:	2001524c 	.word	0x2001524c
 8014474:	20015394 	.word	0x20015394

08014478 <_fxe_file_write>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fxe_file_write(FX_FILE *file_ptr, VOID *buffer_ptr, ULONG size)
{
 8014478:	b580      	push	{r7, lr}
 801447a:	b086      	sub	sp, #24
 801447c:	af00      	add	r7, sp, #0
 801447e:	60f8      	str	r0, [r7, #12]
 8014480:	60b9      	str	r1, [r7, #8]
 8014482:	607a      	str	r2, [r7, #4]

UINT status;


    /* Check for a null file or buffer pointer.  */
    if ((file_ptr == FX_NULL) || (buffer_ptr == FX_NULL))
 8014484:	68fb      	ldr	r3, [r7, #12]
 8014486:	2b00      	cmp	r3, #0
 8014488:	d002      	beq.n	8014490 <_fxe_file_write+0x18>
 801448a:	68bb      	ldr	r3, [r7, #8]
 801448c:	2b00      	cmp	r3, #0
 801448e:	d101      	bne.n	8014494 <_fxe_file_write+0x1c>
    {
        return(FX_PTR_ERROR);
 8014490:	2318      	movs	r3, #24
 8014492:	e01a      	b.n	80144ca <_fxe_file_write+0x52>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8014494:	f3ef 8305 	mrs	r3, IPSR
 8014498:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 801449a:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 801449c:	4b0d      	ldr	r3, [pc, #52]	; (80144d4 <_fxe_file_write+0x5c>)
 801449e:	681b      	ldr	r3, [r3, #0]
 80144a0:	4313      	orrs	r3, r2
 80144a2:	2b00      	cmp	r3, #0
 80144a4:	d108      	bne.n	80144b8 <_fxe_file_write+0x40>
 80144a6:	4b0c      	ldr	r3, [pc, #48]	; (80144d8 <_fxe_file_write+0x60>)
 80144a8:	681b      	ldr	r3, [r3, #0]
 80144aa:	2b00      	cmp	r3, #0
 80144ac:	d004      	beq.n	80144b8 <_fxe_file_write+0x40>
 80144ae:	4b0a      	ldr	r3, [pc, #40]	; (80144d8 <_fxe_file_write+0x60>)
 80144b0:	681b      	ldr	r3, [r3, #0]
 80144b2:	4a0a      	ldr	r2, [pc, #40]	; (80144dc <_fxe_file_write+0x64>)
 80144b4:	4293      	cmp	r3, r2
 80144b6:	d101      	bne.n	80144bc <_fxe_file_write+0x44>
 80144b8:	2320      	movs	r3, #32
 80144ba:	e006      	b.n	80144ca <_fxe_file_write+0x52>

    /* Call actual file write service.  */
    status =  _fx_file_write(file_ptr, buffer_ptr, size);
 80144bc:	687a      	ldr	r2, [r7, #4]
 80144be:	68b9      	ldr	r1, [r7, #8]
 80144c0:	68f8      	ldr	r0, [r7, #12]
 80144c2:	f7fa fec9 	bl	800f258 <_fx_file_write>
 80144c6:	6178      	str	r0, [r7, #20]

    /* Return status to the caller.  */
    return(status);
 80144c8:	697b      	ldr	r3, [r7, #20]
}
 80144ca:	4618      	mov	r0, r3
 80144cc:	3718      	adds	r7, #24
 80144ce:	46bd      	mov	sp, r7
 80144d0:	bd80      	pop	{r7, pc}
 80144d2:	bf00      	nop
 80144d4:	200010dc 	.word	0x200010dc
 80144d8:	2001524c 	.word	0x2001524c
 80144dc:	20015394 	.word	0x20015394

080144e0 <_fxe_media_close>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fxe_media_close(FX_MEDIA  *media_ptr)
{
 80144e0:	b580      	push	{r7, lr}
 80144e2:	b084      	sub	sp, #16
 80144e4:	af00      	add	r7, sp, #0
 80144e6:	6078      	str	r0, [r7, #4]

UINT status;


    /* Check for a null media pointer.  */
    if (media_ptr == FX_NULL)
 80144e8:	687b      	ldr	r3, [r7, #4]
 80144ea:	2b00      	cmp	r3, #0
 80144ec:	d101      	bne.n	80144f2 <_fxe_media_close+0x12>
    {
        return(FX_PTR_ERROR);
 80144ee:	2318      	movs	r3, #24
 80144f0:	e018      	b.n	8014524 <_fxe_media_close+0x44>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80144f2:	f3ef 8305 	mrs	r3, IPSR
 80144f6:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 80144f8:	68ba      	ldr	r2, [r7, #8]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 80144fa:	4b0c      	ldr	r3, [pc, #48]	; (801452c <_fxe_media_close+0x4c>)
 80144fc:	681b      	ldr	r3, [r3, #0]
 80144fe:	4313      	orrs	r3, r2
 8014500:	2b00      	cmp	r3, #0
 8014502:	d108      	bne.n	8014516 <_fxe_media_close+0x36>
 8014504:	4b0a      	ldr	r3, [pc, #40]	; (8014530 <_fxe_media_close+0x50>)
 8014506:	681b      	ldr	r3, [r3, #0]
 8014508:	2b00      	cmp	r3, #0
 801450a:	d004      	beq.n	8014516 <_fxe_media_close+0x36>
 801450c:	4b08      	ldr	r3, [pc, #32]	; (8014530 <_fxe_media_close+0x50>)
 801450e:	681b      	ldr	r3, [r3, #0]
 8014510:	4a08      	ldr	r2, [pc, #32]	; (8014534 <_fxe_media_close+0x54>)
 8014512:	4293      	cmp	r3, r2
 8014514:	d101      	bne.n	801451a <_fxe_media_close+0x3a>
 8014516:	2320      	movs	r3, #32
 8014518:	e004      	b.n	8014524 <_fxe_media_close+0x44>

    /* Call actual media close service.  */
    status =  _fx_media_close(media_ptr);
 801451a:	6878      	ldr	r0, [r7, #4]
 801451c:	f7fb ff1c 	bl	8010358 <_fx_media_close>
 8014520:	60f8      	str	r0, [r7, #12]

    /* Return status to the caller.  */
    return(status);
 8014522:	68fb      	ldr	r3, [r7, #12]
}
 8014524:	4618      	mov	r0, r3
 8014526:	3710      	adds	r7, #16
 8014528:	46bd      	mov	sp, r7
 801452a:	bd80      	pop	{r7, pc}
 801452c:	200010dc 	.word	0x200010dc
 8014530:	2001524c 	.word	0x2001524c
 8014534:	20015394 	.word	0x20015394

08014538 <_fxe_media_close_notify_set>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fxe_media_close_notify_set(FX_MEDIA *media_ptr, VOID (*media_close_notify)(FX_MEDIA *media))
{
 8014538:	b580      	push	{r7, lr}
 801453a:	b084      	sub	sp, #16
 801453c:	af00      	add	r7, sp, #0
 801453e:	6078      	str	r0, [r7, #4]
 8014540:	6039      	str	r1, [r7, #0]
UINT status;

    /* Check for invalid input pointers.  */
    if (media_ptr == FX_NULL)
 8014542:	687b      	ldr	r3, [r7, #4]
 8014544:	2b00      	cmp	r3, #0
 8014546:	d101      	bne.n	801454c <_fxe_media_close_notify_set+0x14>
    {
        return(FX_PTR_ERROR);
 8014548:	2318      	movs	r3, #24
 801454a:	e019      	b.n	8014580 <_fxe_media_close_notify_set+0x48>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801454c:	f3ef 8305 	mrs	r3, IPSR
 8014550:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 8014552:	68ba      	ldr	r2, [r7, #8]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 8014554:	4b0c      	ldr	r3, [pc, #48]	; (8014588 <_fxe_media_close_notify_set+0x50>)
 8014556:	681b      	ldr	r3, [r3, #0]
 8014558:	4313      	orrs	r3, r2
 801455a:	2b00      	cmp	r3, #0
 801455c:	d108      	bne.n	8014570 <_fxe_media_close_notify_set+0x38>
 801455e:	4b0b      	ldr	r3, [pc, #44]	; (801458c <_fxe_media_close_notify_set+0x54>)
 8014560:	681b      	ldr	r3, [r3, #0]
 8014562:	2b00      	cmp	r3, #0
 8014564:	d004      	beq.n	8014570 <_fxe_media_close_notify_set+0x38>
 8014566:	4b09      	ldr	r3, [pc, #36]	; (801458c <_fxe_media_close_notify_set+0x54>)
 8014568:	681b      	ldr	r3, [r3, #0]
 801456a:	4a09      	ldr	r2, [pc, #36]	; (8014590 <_fxe_media_close_notify_set+0x58>)
 801456c:	4293      	cmp	r3, r2
 801456e:	d101      	bne.n	8014574 <_fxe_media_close_notify_set+0x3c>
 8014570:	2320      	movs	r3, #32
 8014572:	e005      	b.n	8014580 <_fxe_media_close_notify_set+0x48>

    /* Call actual media close notify set service.  */
    status =  _fx_media_close_notify_set(media_ptr, media_close_notify);
 8014574:	6839      	ldr	r1, [r7, #0]
 8014576:	6878      	ldr	r0, [r7, #4]
 8014578:	f7fc f8c6 	bl	8010708 <_fx_media_close_notify_set>
 801457c:	60f8      	str	r0, [r7, #12]

    /* Return status.  */
    return(status);
 801457e:	68fb      	ldr	r3, [r7, #12]
}
 8014580:	4618      	mov	r0, r3
 8014582:	3710      	adds	r7, #16
 8014584:	46bd      	mov	sp, r7
 8014586:	bd80      	pop	{r7, pc}
 8014588:	200010dc 	.word	0x200010dc
 801458c:	2001524c 	.word	0x2001524c
 8014590:	20015394 	.word	0x20015394

08014594 <_fxe_media_flush>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fxe_media_flush(FX_MEDIA  *media_ptr)
{
 8014594:	b580      	push	{r7, lr}
 8014596:	b084      	sub	sp, #16
 8014598:	af00      	add	r7, sp, #0
 801459a:	6078      	str	r0, [r7, #4]

UINT status;


    /* Check for a null media pointer.  */
    if (media_ptr == FX_NULL)
 801459c:	687b      	ldr	r3, [r7, #4]
 801459e:	2b00      	cmp	r3, #0
 80145a0:	d101      	bne.n	80145a6 <_fxe_media_flush+0x12>
    {
        return(FX_PTR_ERROR);
 80145a2:	2318      	movs	r3, #24
 80145a4:	e018      	b.n	80145d8 <_fxe_media_flush+0x44>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80145a6:	f3ef 8305 	mrs	r3, IPSR
 80145aa:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 80145ac:	68ba      	ldr	r2, [r7, #8]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 80145ae:	4b0c      	ldr	r3, [pc, #48]	; (80145e0 <_fxe_media_flush+0x4c>)
 80145b0:	681b      	ldr	r3, [r3, #0]
 80145b2:	4313      	orrs	r3, r2
 80145b4:	2b00      	cmp	r3, #0
 80145b6:	d108      	bne.n	80145ca <_fxe_media_flush+0x36>
 80145b8:	4b0a      	ldr	r3, [pc, #40]	; (80145e4 <_fxe_media_flush+0x50>)
 80145ba:	681b      	ldr	r3, [r3, #0]
 80145bc:	2b00      	cmp	r3, #0
 80145be:	d004      	beq.n	80145ca <_fxe_media_flush+0x36>
 80145c0:	4b08      	ldr	r3, [pc, #32]	; (80145e4 <_fxe_media_flush+0x50>)
 80145c2:	681b      	ldr	r3, [r3, #0]
 80145c4:	4a08      	ldr	r2, [pc, #32]	; (80145e8 <_fxe_media_flush+0x54>)
 80145c6:	4293      	cmp	r3, r2
 80145c8:	d101      	bne.n	80145ce <_fxe_media_flush+0x3a>
 80145ca:	2320      	movs	r3, #32
 80145cc:	e004      	b.n	80145d8 <_fxe_media_flush+0x44>

    /* Call actual media flush service.  */
    status =  _fx_media_flush(media_ptr);
 80145ce:	6878      	ldr	r0, [r7, #4]
 80145d0:	f7fc f8fe 	bl	80107d0 <_fx_media_flush>
 80145d4:	60f8      	str	r0, [r7, #12]

    /* Return status to the caller.  */
    return(status);
 80145d6:	68fb      	ldr	r3, [r7, #12]
}
 80145d8:	4618      	mov	r0, r3
 80145da:	3710      	adds	r7, #16
 80145dc:	46bd      	mov	sp, r7
 80145de:	bd80      	pop	{r7, pc}
 80145e0:	200010dc 	.word	0x200010dc
 80145e4:	2001524c 	.word	0x2001524c
 80145e8:	20015394 	.word	0x20015394

080145ec <_fxe_media_format>:
/**************************************************************************/
UINT  _fxe_media_format(FX_MEDIA *media_ptr, VOID (*driver)(FX_MEDIA *media), VOID *driver_info_ptr, UCHAR *memory_ptr, UINT memory_size,
                        CHAR *volume_name, UINT number_of_fats, UINT directory_entries, UINT hidden_sectors,
                        ULONG total_sectors, UINT bytes_per_sector, UINT sectors_per_cluster,
                        UINT heads, UINT sectors_per_track)
{
 80145ec:	b580      	push	{r7, lr}
 80145ee:	b090      	sub	sp, #64	; 0x40
 80145f0:	af0a      	add	r7, sp, #40	; 0x28
 80145f2:	60f8      	str	r0, [r7, #12]
 80145f4:	60b9      	str	r1, [r7, #8]
 80145f6:	607a      	str	r2, [r7, #4]
 80145f8:	603b      	str	r3, [r7, #0]

UINT status;


    /* Check for invalid input pointers.  */
    if ((media_ptr == FX_NULL) || (driver == FX_NULL) || (memory_ptr == FX_NULL))
 80145fa:	68fb      	ldr	r3, [r7, #12]
 80145fc:	2b00      	cmp	r3, #0
 80145fe:	d005      	beq.n	801460c <_fxe_media_format+0x20>
 8014600:	68bb      	ldr	r3, [r7, #8]
 8014602:	2b00      	cmp	r3, #0
 8014604:	d002      	beq.n	801460c <_fxe_media_format+0x20>
 8014606:	683b      	ldr	r3, [r7, #0]
 8014608:	2b00      	cmp	r3, #0
 801460a:	d101      	bne.n	8014610 <_fxe_media_format+0x24>
    {
        return(FX_PTR_ERROR);
 801460c:	2318      	movs	r3, #24
 801460e:	e02f      	b.n	8014670 <_fxe_media_format+0x84>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8014610:	f3ef 8305 	mrs	r3, IPSR
 8014614:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8014616:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 8014618:	4b17      	ldr	r3, [pc, #92]	; (8014678 <_fxe_media_format+0x8c>)
 801461a:	681b      	ldr	r3, [r3, #0]
 801461c:	4313      	orrs	r3, r2
 801461e:	2b00      	cmp	r3, #0
 8014620:	d108      	bne.n	8014634 <_fxe_media_format+0x48>
 8014622:	4b16      	ldr	r3, [pc, #88]	; (801467c <_fxe_media_format+0x90>)
 8014624:	681b      	ldr	r3, [r3, #0]
 8014626:	2b00      	cmp	r3, #0
 8014628:	d004      	beq.n	8014634 <_fxe_media_format+0x48>
 801462a:	4b14      	ldr	r3, [pc, #80]	; (801467c <_fxe_media_format+0x90>)
 801462c:	681b      	ldr	r3, [r3, #0]
 801462e:	4a14      	ldr	r2, [pc, #80]	; (8014680 <_fxe_media_format+0x94>)
 8014630:	4293      	cmp	r3, r2
 8014632:	d101      	bne.n	8014638 <_fxe_media_format+0x4c>
 8014634:	2320      	movs	r3, #32
 8014636:	e01b      	b.n	8014670 <_fxe_media_format+0x84>

    /* Call actual media format service.  */
    status =  _fx_media_format(media_ptr, driver, driver_info_ptr, memory_ptr, memory_size,
 8014638:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801463a:	9309      	str	r3, [sp, #36]	; 0x24
 801463c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801463e:	9308      	str	r3, [sp, #32]
 8014640:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014642:	9307      	str	r3, [sp, #28]
 8014644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014646:	9306      	str	r3, [sp, #24]
 8014648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801464a:	9305      	str	r3, [sp, #20]
 801464c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801464e:	9304      	str	r3, [sp, #16]
 8014650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014652:	9303      	str	r3, [sp, #12]
 8014654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014656:	9302      	str	r3, [sp, #8]
 8014658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801465a:	9301      	str	r3, [sp, #4]
 801465c:	6a3b      	ldr	r3, [r7, #32]
 801465e:	9300      	str	r3, [sp, #0]
 8014660:	683b      	ldr	r3, [r7, #0]
 8014662:	687a      	ldr	r2, [r7, #4]
 8014664:	68b9      	ldr	r1, [r7, #8]
 8014666:	68f8      	ldr	r0, [r7, #12]
 8014668:	f7fc fa3e 	bl	8010ae8 <_fx_media_format>
 801466c:	6178      	str	r0, [r7, #20]
                               volume_name, number_of_fats, directory_entries, hidden_sectors,
                               total_sectors, bytes_per_sector, sectors_per_cluster,
                               heads, sectors_per_track);

    /* Return completion status.  */
    return(status);
 801466e:	697b      	ldr	r3, [r7, #20]
}
 8014670:	4618      	mov	r0, r3
 8014672:	3718      	adds	r7, #24
 8014674:	46bd      	mov	sp, r7
 8014676:	bd80      	pop	{r7, pc}
 8014678:	200010dc 	.word	0x200010dc
 801467c:	2001524c 	.word	0x2001524c
 8014680:	20015394 	.word	0x20015394

08014684 <_fxe_media_open>:
/*                                                                        */
/**************************************************************************/
UINT  _fxe_media_open(FX_MEDIA *media_ptr, CHAR *media_name,
                      VOID (*media_driver)(FX_MEDIA *), VOID *driver_info_ptr,
                      VOID *memory_ptr, ULONG memory_size, UINT media_control_block_size)
{
 8014684:	b580      	push	{r7, lr}
 8014686:	b08e      	sub	sp, #56	; 0x38
 8014688:	af02      	add	r7, sp, #8
 801468a:	60f8      	str	r0, [r7, #12]
 801468c:	60b9      	str	r1, [r7, #8]
 801468e:	607a      	str	r2, [r7, #4]
 8014690:	603b      	str	r3, [r7, #0]
UINT       old_threshold;
#endif


    /* Check for invalid input pointers.  */
    if ((media_ptr == FX_NULL) || (media_driver == FX_NULL) || (memory_ptr == FX_NULL) || (media_control_block_size != sizeof(FX_MEDIA)))
 8014692:	68fb      	ldr	r3, [r7, #12]
 8014694:	2b00      	cmp	r3, #0
 8014696:	d00a      	beq.n	80146ae <_fxe_media_open+0x2a>
 8014698:	687b      	ldr	r3, [r7, #4]
 801469a:	2b00      	cmp	r3, #0
 801469c:	d007      	beq.n	80146ae <_fxe_media_open+0x2a>
 801469e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146a0:	2b00      	cmp	r3, #0
 80146a2:	d004      	beq.n	80146ae <_fxe_media_open+0x2a>
 80146a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80146a6:	f242 42b8 	movw	r2, #9400	; 0x24b8
 80146aa:	4293      	cmp	r3, r2
 80146ac:	d001      	beq.n	80146b2 <_fxe_media_open+0x2e>
    {
        return(FX_PTR_ERROR);
 80146ae:	2318      	movs	r3, #24
 80146b0:	e071      	b.n	8014796 <_fxe_media_open+0x112>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80146b2:	f3ef 8305 	mrs	r3, IPSR
 80146b6:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 80146b8:	69ba      	ldr	r2, [r7, #24]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 80146ba:	4b39      	ldr	r3, [pc, #228]	; (80147a0 <_fxe_media_open+0x11c>)
 80146bc:	681b      	ldr	r3, [r3, #0]
 80146be:	4313      	orrs	r3, r2
 80146c0:	2b00      	cmp	r3, #0
 80146c2:	d108      	bne.n	80146d6 <_fxe_media_open+0x52>
 80146c4:	4b37      	ldr	r3, [pc, #220]	; (80147a4 <_fxe_media_open+0x120>)
 80146c6:	681b      	ldr	r3, [r3, #0]
 80146c8:	2b00      	cmp	r3, #0
 80146ca:	d004      	beq.n	80146d6 <_fxe_media_open+0x52>
 80146cc:	4b35      	ldr	r3, [pc, #212]	; (80147a4 <_fxe_media_open+0x120>)
 80146ce:	681b      	ldr	r3, [r3, #0]
 80146d0:	4a35      	ldr	r2, [pc, #212]	; (80147a8 <_fxe_media_open+0x124>)
 80146d2:	4293      	cmp	r3, r2
 80146d4:	d101      	bne.n	80146da <_fxe_media_open+0x56>
 80146d6:	2320      	movs	r3, #32
 80146d8:	e05d      	b.n	8014796 <_fxe_media_open+0x112>

    /* Check for proper size of the logical sector cache.  */
    temp =  _fx_system_media_max_sector_cache;
 80146da:	4b34      	ldr	r3, [pc, #208]	; (80147ac <_fxe_media_open+0x128>)
 80146dc:	681b      	ldr	r3, [r3, #0]
 80146de:	627b      	str	r3, [r7, #36]	; 0x24

    /* Isolate the lowest set bit.  */
    temp =  (temp & ((~temp) + ((ULONG) 1)));
 80146e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146e2:	425b      	negs	r3, r3
 80146e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80146e6:	4013      	ands	r3, r2
 80146e8:	627b      	str	r3, [r7, #36]	; 0x24

    /* If FX_MAX_SECTOR_CACHE is a power of 2, the value of temp should be unchanged.  */
    if ((temp == 1) || (temp != _fx_system_media_max_sector_cache))
 80146ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146ec:	2b01      	cmp	r3, #1
 80146ee:	d004      	beq.n	80146fa <_fxe_media_open+0x76>
 80146f0:	4b2e      	ldr	r3, [pc, #184]	; (80147ac <_fxe_media_open+0x128>)
 80146f2:	681b      	ldr	r3, [r3, #0]
 80146f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80146f6:	429a      	cmp	r2, r3
 80146f8:	d001      	beq.n	80146fe <_fxe_media_open+0x7a>
    {

        /* Not a power of 2, return an error.  */
        return(FX_MEDIA_INVALID);
 80146fa:	2302      	movs	r3, #2
 80146fc:	e04b      	b.n	8014796 <_fxe_media_open+0x112>
    }

    /* Check for proper size of the FAT cache.  */
    temp =  _fx_system_media_max_fat_cache;
 80146fe:	4b2c      	ldr	r3, [pc, #176]	; (80147b0 <_fxe_media_open+0x12c>)
 8014700:	681b      	ldr	r3, [r3, #0]
 8014702:	627b      	str	r3, [r7, #36]	; 0x24

    /* Isolate the lowest set bit.  */
    temp =  (temp & ((~temp) + ((ULONG) 1)));
 8014704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014706:	425b      	negs	r3, r3
 8014708:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801470a:	4013      	ands	r3, r2
 801470c:	627b      	str	r3, [r7, #36]	; 0x24

    /* If FX_MAX_FAT_CACHE is a power of 2, the value of temp should be unchanged.  */
    if ((temp == 1) || (temp != _fx_system_media_max_fat_cache))
 801470e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014710:	2b01      	cmp	r3, #1
 8014712:	d004      	beq.n	801471e <_fxe_media_open+0x9a>
 8014714:	4b26      	ldr	r3, [pc, #152]	; (80147b0 <_fxe_media_open+0x12c>)
 8014716:	681b      	ldr	r3, [r3, #0]
 8014718:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801471a:	429a      	cmp	r2, r3
 801471c:	d001      	beq.n	8014722 <_fxe_media_open+0x9e>
    {

        /* Not a power of 2, return an error.  */
        return(FX_MEDIA_INVALID);
 801471e:	2302      	movs	r3, #2
 8014720:	e039      	b.n	8014796 <_fxe_media_open+0x112>

#ifndef FX_SINGLE_THREAD

    /* Pickup current thread pointer. At this point we know the current thread pointer is non-null since 
       it was checked by code in FX_CALLER_CHECKING_CODE macro.  */
    current_thread =  tx_thread_identify();
 8014722:	f003 fecd 	bl	80184c0 <_tx_thread_identify>
 8014726:	6238      	str	r0, [r7, #32]

    /* Disable preemption temporarily.  */
    tx_thread_preemption_change(current_thread, 0, &old_threshold);
 8014728:	f107 0314 	add.w	r3, r7, #20
 801472c:	461a      	mov	r2, r3
 801472e:	2100      	movs	r1, #0
 8014730:	6a38      	ldr	r0, [r7, #32]
 8014732:	f003 ff1f 	bl	8018574 <_tx_thread_preemption_change>
#endif

    /* Loop to check for the media already opened.  */
    current_media =  _fx_system_media_opened_ptr;
 8014736:	4b1f      	ldr	r3, [pc, #124]	; (80147b4 <_fxe_media_open+0x130>)
 8014738:	681b      	ldr	r3, [r3, #0]
 801473a:	62fb      	str	r3, [r7, #44]	; 0x2c
    open_count =     _fx_system_media_opened_count;
 801473c:	4b1e      	ldr	r3, [pc, #120]	; (80147b8 <_fxe_media_open+0x134>)
 801473e:	681b      	ldr	r3, [r3, #0]
 8014740:	62bb      	str	r3, [r7, #40]	; 0x28
    while (open_count--)
 8014742:	e010      	b.n	8014766 <_fxe_media_open+0xe2>
    {

        /* Is the new media pointer already open?  */
        if (media_ptr == current_media)
 8014744:	68fa      	ldr	r2, [r7, #12]
 8014746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014748:	429a      	cmp	r2, r3
 801474a:	d108      	bne.n	801475e <_fxe_media_open+0xda>
        {

#ifndef FX_SINGLE_THREAD

            /* Restore preemption.  */
            tx_thread_preemption_change(current_thread, old_threshold, &old_threshold);
 801474c:	697b      	ldr	r3, [r7, #20]
 801474e:	f107 0214 	add.w	r2, r7, #20
 8014752:	4619      	mov	r1, r3
 8014754:	6a38      	ldr	r0, [r7, #32]
 8014756:	f003 ff0d 	bl	8018574 <_tx_thread_preemption_change>
#endif

            /* Duplicate media open, return an error!  */
            return(FX_PTR_ERROR);
 801475a:	2318      	movs	r3, #24
 801475c:	e01b      	b.n	8014796 <_fxe_media_open+0x112>
        }

        /* Move to next entry.  */
        current_media =  current_media -> fx_media_opened_next;
 801475e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014760:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8014764:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (open_count--)
 8014766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014768:	1e5a      	subs	r2, r3, #1
 801476a:	62ba      	str	r2, [r7, #40]	; 0x28
 801476c:	2b00      	cmp	r3, #0
 801476e:	d1e9      	bne.n	8014744 <_fxe_media_open+0xc0>
    }

#ifndef FX_SINGLE_THREAD

    /* Restore preemption.  */
    tx_thread_preemption_change(current_thread, old_threshold, &old_threshold);
 8014770:	697b      	ldr	r3, [r7, #20]
 8014772:	f107 0214 	add.w	r2, r7, #20
 8014776:	4619      	mov	r1, r3
 8014778:	6a38      	ldr	r0, [r7, #32]
 801477a:	f003 fefb 	bl	8018574 <_tx_thread_preemption_change>
#endif

    /* Call actual media open service.  */
    status =  _fx_media_open(media_ptr, media_name, media_driver, driver_info_ptr,
 801477e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014780:	9301      	str	r3, [sp, #4]
 8014782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014784:	9300      	str	r3, [sp, #0]
 8014786:	683b      	ldr	r3, [r7, #0]
 8014788:	687a      	ldr	r2, [r7, #4]
 801478a:	68b9      	ldr	r1, [r7, #8]
 801478c:	68f8      	ldr	r0, [r7, #12]
 801478e:	f7fc fd63 	bl	8011258 <_fx_media_open>
 8014792:	61f8      	str	r0, [r7, #28]
                             memory_ptr, memory_size);

    /* Return status.  */
    return(status);
 8014794:	69fb      	ldr	r3, [r7, #28]
}
 8014796:	4618      	mov	r0, r3
 8014798:	3730      	adds	r7, #48	; 0x30
 801479a:	46bd      	mov	sp, r7
 801479c:	bd80      	pop	{r7, pc}
 801479e:	bf00      	nop
 80147a0:	200010dc 	.word	0x200010dc
 80147a4:	2001524c 	.word	0x2001524c
 80147a8:	20015394 	.word	0x20015394
 80147ac:	200151c4 	.word	0x200151c4
 80147b0:	200151c8 	.word	0x200151c8
 80147b4:	200151b4 	.word	0x200151b4
 80147b8:	200151b8 	.word	0x200151b8

080147bc <_fxe_media_space_available>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fxe_media_space_available(FX_MEDIA *media_ptr, ULONG *available_bytes_ptr)
{
 80147bc:	b580      	push	{r7, lr}
 80147be:	b084      	sub	sp, #16
 80147c0:	af00      	add	r7, sp, #0
 80147c2:	6078      	str	r0, [r7, #4]
 80147c4:	6039      	str	r1, [r7, #0]

UINT status;


    /* Check for a null media pointer or destination pointer.  */
    if ((media_ptr == FX_NULL) || (available_bytes_ptr == FX_NULL))
 80147c6:	687b      	ldr	r3, [r7, #4]
 80147c8:	2b00      	cmp	r3, #0
 80147ca:	d002      	beq.n	80147d2 <_fxe_media_space_available+0x16>
 80147cc:	683b      	ldr	r3, [r7, #0]
 80147ce:	2b00      	cmp	r3, #0
 80147d0:	d101      	bne.n	80147d6 <_fxe_media_space_available+0x1a>
    {
        return(FX_PTR_ERROR);
 80147d2:	2318      	movs	r3, #24
 80147d4:	e019      	b.n	801480a <_fxe_media_space_available+0x4e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80147d6:	f3ef 8305 	mrs	r3, IPSR
 80147da:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 80147dc:	68ba      	ldr	r2, [r7, #8]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 80147de:	4b0d      	ldr	r3, [pc, #52]	; (8014814 <_fxe_media_space_available+0x58>)
 80147e0:	681b      	ldr	r3, [r3, #0]
 80147e2:	4313      	orrs	r3, r2
 80147e4:	2b00      	cmp	r3, #0
 80147e6:	d108      	bne.n	80147fa <_fxe_media_space_available+0x3e>
 80147e8:	4b0b      	ldr	r3, [pc, #44]	; (8014818 <_fxe_media_space_available+0x5c>)
 80147ea:	681b      	ldr	r3, [r3, #0]
 80147ec:	2b00      	cmp	r3, #0
 80147ee:	d004      	beq.n	80147fa <_fxe_media_space_available+0x3e>
 80147f0:	4b09      	ldr	r3, [pc, #36]	; (8014818 <_fxe_media_space_available+0x5c>)
 80147f2:	681b      	ldr	r3, [r3, #0]
 80147f4:	4a09      	ldr	r2, [pc, #36]	; (801481c <_fxe_media_space_available+0x60>)
 80147f6:	4293      	cmp	r3, r2
 80147f8:	d101      	bne.n	80147fe <_fxe_media_space_available+0x42>
 80147fa:	2320      	movs	r3, #32
 80147fc:	e005      	b.n	801480a <_fxe_media_space_available+0x4e>

    /* Call actual media space available service.  */
    status =  _fx_media_space_available(media_ptr, available_bytes_ptr);
 80147fe:	6839      	ldr	r1, [r7, #0]
 8014800:	6878      	ldr	r0, [r7, #4]
 8014802:	f7fd faa3 	bl	8011d4c <_fx_media_space_available>
 8014806:	60f8      	str	r0, [r7, #12]

    /* Return status to the caller.  */
    return(status);
 8014808:	68fb      	ldr	r3, [r7, #12]
}
 801480a:	4618      	mov	r0, r3
 801480c:	3710      	adds	r7, #16
 801480e:	46bd      	mov	sp, r7
 8014810:	bd80      	pop	{r7, pc}
 8014812:	bf00      	nop
 8014814:	200010dc 	.word	0x200010dc
 8014818:	2001524c 	.word	0x2001524c
 801481c:	20015394 	.word	0x20015394

08014820 <find_driver_id>:
static ULONG  num_drivers = sizeof(fx_lx_nor_drivers)/sizeof(fx_lx_nor_drivers[0]);

/* Exported functions ------------------------------------------------------- */

static UINT find_driver_id(UINT driver_id)
{
 8014820:	b480      	push	{r7}
 8014822:	b085      	sub	sp, #20
 8014824:	af00      	add	r7, sp, #0
 8014826:	6078      	str	r0, [r7, #4]
    UINT i = 0;
 8014828:	2300      	movs	r3, #0
 801482a:	60fb      	str	r3, [r7, #12]

    for (i = 0; i < num_drivers; i++)
 801482c:	2300      	movs	r3, #0
 801482e:	60fb      	str	r3, [r7, #12]
 8014830:	e011      	b.n	8014856 <find_driver_id+0x36>
    {
        if (fx_lx_nor_drivers[i].id == driver_id)
 8014832:	4a0f      	ldr	r2, [pc, #60]	; (8014870 <find_driver_id+0x50>)
 8014834:	68fb      	ldr	r3, [r7, #12]
 8014836:	f44f 7103 	mov.w	r1, #524	; 0x20c
 801483a:	fb01 f303 	mul.w	r3, r1, r3
 801483e:	4413      	add	r3, r2
 8014840:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8014844:	681b      	ldr	r3, [r3, #0]
 8014846:	687a      	ldr	r2, [r7, #4]
 8014848:	429a      	cmp	r2, r3
 801484a:	d101      	bne.n	8014850 <find_driver_id+0x30>
            return i;
 801484c:	68fb      	ldr	r3, [r7, #12]
 801484e:	e009      	b.n	8014864 <find_driver_id+0x44>
    for (i = 0; i < num_drivers; i++)
 8014850:	68fb      	ldr	r3, [r7, #12]
 8014852:	3301      	adds	r3, #1
 8014854:	60fb      	str	r3, [r7, #12]
 8014856:	4b07      	ldr	r3, [pc, #28]	; (8014874 <find_driver_id+0x54>)
 8014858:	681b      	ldr	r3, [r3, #0]
 801485a:	68fa      	ldr	r2, [r7, #12]
 801485c:	429a      	cmp	r2, r3
 801485e:	d3e8      	bcc.n	8014832 <find_driver_id+0x12>
    }

    return UNKNOWN_DRIVER_ID;
 8014860:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8014864:	4618      	mov	r0, r3
 8014866:	3714      	adds	r7, #20
 8014868:	46bd      	mov	sp, r7
 801486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801486e:	4770      	bx	lr
 8014870:	20000078 	.word	0x20000078
 8014874:	200010d8 	.word	0x200010d8

08014878 <fx_stm32_levelx_nor_driver>:

VOID  fx_stm32_levelx_nor_driver(FX_MEDIA *media_ptr)
{
 8014878:	b580      	push	{r7, lr}
 801487a:	b088      	sub	sp, #32
 801487c:	af00      	add	r7, sp, #0
 801487e:	6078      	str	r0, [r7, #4]

    /* Process the driver request specified in the media control block.*/
#ifdef USE_LX_NOR_DEFAULT_DRIVER
    i = find_driver_id(NOR_DEFAULT_DRIVER);
#else
    if (media_ptr->fx_media_driver_info == NULL)
 8014880:	687b      	ldr	r3, [r7, #4]
 8014882:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014886:	2b00      	cmp	r3, #0
 8014888:	d103      	bne.n	8014892 <fx_stm32_levelx_nor_driver+0x1a>
    {
        i = UNKNOWN_DRIVER_ID;
 801488a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801488e:	61fb      	str	r3, [r7, #28]
 8014890:	e006      	b.n	80148a0 <fx_stm32_levelx_nor_driver+0x28>
    }
    else
    {
        i = find_driver_id((UINT)media_ptr->fx_media_driver_info);
 8014892:	687b      	ldr	r3, [r7, #4]
 8014894:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014898:	4618      	mov	r0, r3
 801489a:	f7ff ffc1 	bl	8014820 <find_driver_id>
 801489e:	61f8      	str	r0, [r7, #28]
    }

#endif

    if (i == UNKNOWN_DRIVER_ID)
 80148a0:	69fb      	ldr	r3, [r7, #28]
 80148a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80148a6:	d104      	bne.n	80148b2 <fx_stm32_levelx_nor_driver+0x3a>
    {
        /* No Driver found return an error */
        media_ptr->fx_media_driver_status = FX_MEDIA_INVALID;
 80148a8:	687b      	ldr	r3, [r7, #4]
 80148aa:	2202      	movs	r2, #2
 80148ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        return;
 80148b0:	e131      	b.n	8014b16 <fx_stm32_levelx_nor_driver+0x29e>
    }
    else
    {
        current_driver = &fx_lx_nor_drivers[i];
 80148b2:	69fb      	ldr	r3, [r7, #28]
 80148b4:	f44f 7203 	mov.w	r2, #524	; 0x20c
 80148b8:	fb02 f303 	mul.w	r3, r2, r3
 80148bc:	4a97      	ldr	r2, [pc, #604]	; (8014b1c <fx_stm32_levelx_nor_driver+0x2a4>)
 80148be:	4413      	add	r3, r2
 80148c0:	4a97      	ldr	r2, [pc, #604]	; (8014b20 <fx_stm32_levelx_nor_driver+0x2a8>)
 80148c2:	6013      	str	r3, [r2, #0]
    }

    switch(media_ptr->fx_media_driver_request)
 80148c4:	687b      	ldr	r3, [r7, #4]
 80148c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80148ca:	2b08      	cmp	r3, #8
 80148cc:	f200 811e 	bhi.w	8014b0c <fx_stm32_levelx_nor_driver+0x294>
 80148d0:	a201      	add	r2, pc, #4	; (adr r2, 80148d8 <fx_stm32_levelx_nor_driver+0x60>)
 80148d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80148d6:	bf00      	nop
 80148d8:	08014983 	.word	0x08014983
 80148dc:	08014a17 	.word	0x08014a17
 80148e0:	08014af9 	.word	0x08014af9
 80148e4:	08014b03 	.word	0x08014b03
 80148e8:	080148fd 	.word	0x080148fd
 80148ec:	080149e5 	.word	0x080149e5
 80148f0:	08014aab 	.word	0x08014aab
 80148f4:	08014a79 	.word	0x08014a79
 80148f8:	0801495d 	.word	0x0801495d
    {

        case FX_DRIVER_INIT:
            {
                if (current_driver->initialized == FX_FALSE)
 80148fc:	4b88      	ldr	r3, [pc, #544]	; (8014b20 <fx_stm32_levelx_nor_driver+0x2a8>)
 80148fe:	681b      	ldr	r3, [r3, #0]
 8014900:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8014904:	2b00      	cmp	r3, #0
 8014906:	d124      	bne.n	8014952 <fx_stm32_levelx_nor_driver+0xda>
                {
                    /* Open flash instance*/
                    status = lx_nor_flash_open(&current_driver->flash_instance, current_driver->name, current_driver->nor_driver_initialize);
 8014908:	4b85      	ldr	r3, [pc, #532]	; (8014b20 <fx_stm32_levelx_nor_driver+0x2a8>)
 801490a:	681b      	ldr	r3, [r3, #0]
 801490c:	4618      	mov	r0, r3
 801490e:	4b84      	ldr	r3, [pc, #528]	; (8014b20 <fx_stm32_levelx_nor_driver+0x2a8>)
 8014910:	681b      	ldr	r3, [r3, #0]
 8014912:	f503 71f0 	add.w	r1, r3, #480	; 0x1e0
 8014916:	4b82      	ldr	r3, [pc, #520]	; (8014b20 <fx_stm32_levelx_nor_driver+0x2a8>)
 8014918:	681b      	ldr	r3, [r3, #0]
 801491a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 801491e:	461a      	mov	r2, r3
 8014920:	f001 f856 	bl	80159d0 <_lx_nor_flash_open>
 8014924:	60f8      	str	r0, [r7, #12]

                    /* LevelX driver correctly initialized */
                    if (status == LX_SUCCESS)
 8014926:	68fb      	ldr	r3, [r7, #12]
 8014928:	2b00      	cmp	r3, #0
 801492a:	d10d      	bne.n	8014948 <fx_stm32_levelx_nor_driver+0xd0>
                    {
                        current_driver->initialized = FX_TRUE;
 801492c:	4b7c      	ldr	r3, [pc, #496]	; (8014b20 <fx_stm32_levelx_nor_driver+0x2a8>)
 801492e:	681b      	ldr	r3, [r3, #0]
 8014930:	2201      	movs	r2, #1
 8014932:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
                        media_ptr->fx_media_driver_status = FX_SUCCESS;
 8014936:	687b      	ldr	r3, [r7, #4]
 8014938:	2200      	movs	r2, #0
 801493a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

                        media_ptr->fx_media_driver_free_sector_update = FX_TRUE;
 801493e:	687b      	ldr	r3, [r7, #4]
 8014940:	2201      	movs	r2, #1
 8014942:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
                        break;
 8014946:	e0e6      	b.n	8014b16 <fx_stm32_levelx_nor_driver+0x29e>
                    }
                    else
                    {
                        media_ptr->fx_media_driver_status = FX_IO_ERROR;
 8014948:	687b      	ldr	r3, [r7, #4]
 801494a:	2290      	movs	r2, #144	; 0x90
 801494c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                else
                {
                    media_ptr->fx_media_driver_status = FX_SUCCESS;
                }

                break;
 8014950:	e0e1      	b.n	8014b16 <fx_stm32_levelx_nor_driver+0x29e>
                    media_ptr->fx_media_driver_status = FX_SUCCESS;
 8014952:	687b      	ldr	r3, [r7, #4]
 8014954:	2200      	movs	r2, #0
 8014956:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                break;
 801495a:	e0dc      	b.n	8014b16 <fx_stm32_levelx_nor_driver+0x29e>
            }

        case FX_DRIVER_UNINIT:
            {
                /* Successful driver */
                status = lx_nor_flash_close(&current_driver->flash_instance);
 801495c:	4b70      	ldr	r3, [pc, #448]	; (8014b20 <fx_stm32_levelx_nor_driver+0x2a8>)
 801495e:	681b      	ldr	r3, [r3, #0]
 8014960:	4618      	mov	r0, r3
 8014962:	f000 fb27 	bl	8014fb4 <_lx_nor_flash_close>
 8014966:	60f8      	str	r0, [r7, #12]

                if (status == LX_SUCCESS)
 8014968:	68fb      	ldr	r3, [r7, #12]
 801496a:	2b00      	cmp	r3, #0
 801496c:	d104      	bne.n	8014978 <fx_stm32_levelx_nor_driver+0x100>
                {
                    media_ptr->fx_media_driver_status =  FX_SUCCESS;
 801496e:	687b      	ldr	r3, [r7, #4]
 8014970:	2200      	movs	r2, #0
 8014972:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                else
                {
                    media_ptr->fx_media_driver_status =  FX_IO_ERROR;
                }

                break;
 8014976:	e0ce      	b.n	8014b16 <fx_stm32_levelx_nor_driver+0x29e>
                    media_ptr->fx_media_driver_status =  FX_IO_ERROR;
 8014978:	687b      	ldr	r3, [r7, #4]
 801497a:	2290      	movs	r2, #144	; 0x90
 801497c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                break;
 8014980:	e0c9      	b.n	8014b16 <fx_stm32_levelx_nor_driver+0x29e>
            }

        case FX_DRIVER_READ:
            {
                /* Setup the destination buffer and logical sector.  */
                logical_sector = media_ptr->fx_media_driver_logical_sector;
 8014982:	687b      	ldr	r3, [r7, #4]
 8014984:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8014988:	613b      	str	r3, [r7, #16]
                destination_buffer =(UCHAR *)media_ptr->fx_media_driver_buffer;
 801498a:	687b      	ldr	r3, [r7, #4]
 801498c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014990:	617b      	str	r3, [r7, #20]

                /* Loop to read sectors from flash.  */
                for (i = 0; i < media_ptr->fx_media_driver_sectors; i++)
 8014992:	2300      	movs	r3, #0
 8014994:	61fb      	str	r3, [r7, #28]
 8014996:	e01a      	b.n	80149ce <fx_stm32_levelx_nor_driver+0x156>
                {

                    /* Read a sector from NOR flash.  */
                    status =  lx_nor_flash_sector_read(&current_driver->flash_instance, logical_sector, destination_buffer);
 8014998:	4b61      	ldr	r3, [pc, #388]	; (8014b20 <fx_stm32_levelx_nor_driver+0x2a8>)
 801499a:	681b      	ldr	r3, [r3, #0]
 801499c:	697a      	ldr	r2, [r7, #20]
 801499e:	6939      	ldr	r1, [r7, #16]
 80149a0:	4618      	mov	r0, r3
 80149a2:	f001 fd5c 	bl	801645e <_lx_nor_flash_sector_read>
 80149a6:	60f8      	str	r0, [r7, #12]

                    /* Determine if the read was successful.  */
                    if (status != LX_SUCCESS)
 80149a8:	68fb      	ldr	r3, [r7, #12]
 80149aa:	2b00      	cmp	r3, #0
 80149ac:	d004      	beq.n	80149b8 <fx_stm32_levelx_nor_driver+0x140>
                    {

                        /* Return an I/O error to FileX.  */
                        media_ptr->fx_media_driver_status = FX_IO_ERROR;
 80149ae:	687b      	ldr	r3, [r7, #4]
 80149b0:	2290      	movs	r2, #144	; 0x90
 80149b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

                        return;
 80149b6:	e0ae      	b.n	8014b16 <fx_stm32_levelx_nor_driver+0x29e>
                    }

                    /* Move to the next entries.  */
                    logical_sector++;
 80149b8:	693b      	ldr	r3, [r7, #16]
 80149ba:	3301      	adds	r3, #1
 80149bc:	613b      	str	r3, [r7, #16]
                    destination_buffer = destination_buffer + media_ptr->fx_media_bytes_per_sector;
 80149be:	687b      	ldr	r3, [r7, #4]
 80149c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80149c2:	697a      	ldr	r2, [r7, #20]
 80149c4:	4413      	add	r3, r2
 80149c6:	617b      	str	r3, [r7, #20]
                for (i = 0; i < media_ptr->fx_media_driver_sectors; i++)
 80149c8:	69fb      	ldr	r3, [r7, #28]
 80149ca:	3301      	adds	r3, #1
 80149cc:	61fb      	str	r3, [r7, #28]
 80149ce:	687b      	ldr	r3, [r7, #4]
 80149d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80149d4:	69fa      	ldr	r2, [r7, #28]
 80149d6:	429a      	cmp	r2, r3
 80149d8:	d3de      	bcc.n	8014998 <fx_stm32_levelx_nor_driver+0x120>
                }

                /* Successful driver request.  */
                media_ptr->fx_media_driver_status =  FX_SUCCESS;
 80149da:	687b      	ldr	r3, [r7, #4]
 80149dc:	2200      	movs	r2, #0
 80149de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

                break;
 80149e2:	e098      	b.n	8014b16 <fx_stm32_levelx_nor_driver+0x29e>
            {

                /* Read the boot record and return to the caller.  */

                /* Setup the destination buffer.  */
                destination_buffer =  (UCHAR *) media_ptr -> fx_media_driver_buffer;
 80149e4:	687b      	ldr	r3, [r7, #4]
 80149e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80149ea:	617b      	str	r3, [r7, #20]

                /* Read boot sector from NOR flash.  */
                status =  lx_nor_flash_sector_read(&current_driver->flash_instance, 0, destination_buffer);
 80149ec:	4b4c      	ldr	r3, [pc, #304]	; (8014b20 <fx_stm32_levelx_nor_driver+0x2a8>)
 80149ee:	681b      	ldr	r3, [r3, #0]
 80149f0:	697a      	ldr	r2, [r7, #20]
 80149f2:	2100      	movs	r1, #0
 80149f4:	4618      	mov	r0, r3
 80149f6:	f001 fd32 	bl	801645e <_lx_nor_flash_sector_read>
 80149fa:	60f8      	str	r0, [r7, #12]

                /* Determine if the boot read was successful.  */
                if (status != LX_SUCCESS)
 80149fc:	68fb      	ldr	r3, [r7, #12]
 80149fe:	2b00      	cmp	r3, #0
 8014a00:	d004      	beq.n	8014a0c <fx_stm32_levelx_nor_driver+0x194>
                {
                    /* Return an I/O error to FileX.  */
                    media_ptr -> fx_media_driver_status =  FX_IO_ERROR;
 8014a02:	687b      	ldr	r3, [r7, #4]
 8014a04:	2290      	movs	r2, #144	; 0x90
 8014a06:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

                    return;
 8014a0a:	e084      	b.n	8014b16 <fx_stm32_levelx_nor_driver+0x29e>
                }

                /* Successful driver request.  */
                media_ptr -> fx_media_driver_status =  FX_SUCCESS;
 8014a0c:	687b      	ldr	r3, [r7, #4]
 8014a0e:	2200      	movs	r2, #0
 8014a10:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                break;
 8014a14:	e07f      	b.n	8014b16 <fx_stm32_levelx_nor_driver+0x29e>
            }

        case FX_DRIVER_WRITE:
            {
                /* Setup the source buffer and logical sector.  */
                logical_sector = media_ptr->fx_media_driver_logical_sector;
 8014a16:	687b      	ldr	r3, [r7, #4]
 8014a18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8014a1c:	613b      	str	r3, [r7, #16]
                source_buffer = (UCHAR *) media_ptr->fx_media_driver_buffer;
 8014a1e:	687b      	ldr	r3, [r7, #4]
 8014a20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014a24:	61bb      	str	r3, [r7, #24]

                /* Loop to write sectors to flash.  */
                for (i = 0; i < media_ptr->fx_media_driver_sectors; i++)
 8014a26:	2300      	movs	r3, #0
 8014a28:	61fb      	str	r3, [r7, #28]
 8014a2a:	e01a      	b.n	8014a62 <fx_stm32_levelx_nor_driver+0x1ea>
                {
                    /* Write a sector to NOR flash.  */
                    status =  lx_nor_flash_sector_write(&current_driver->flash_instance, logical_sector, source_buffer);
 8014a2c:	4b3c      	ldr	r3, [pc, #240]	; (8014b20 <fx_stm32_levelx_nor_driver+0x2a8>)
 8014a2e:	681b      	ldr	r3, [r3, #0]
 8014a30:	69ba      	ldr	r2, [r7, #24]
 8014a32:	6939      	ldr	r1, [r7, #16]
 8014a34:	4618      	mov	r0, r3
 8014a36:	f001 fded 	bl	8016614 <_lx_nor_flash_sector_write>
 8014a3a:	60f8      	str	r0, [r7, #12]

                    /* Determine if the write was successful.  */
                    if (status != LX_SUCCESS)
 8014a3c:	68fb      	ldr	r3, [r7, #12]
 8014a3e:	2b00      	cmp	r3, #0
 8014a40:	d004      	beq.n	8014a4c <fx_stm32_levelx_nor_driver+0x1d4>
                    {
                        /* Return an I/O error to FileX.  */
                        media_ptr->fx_media_driver_status =  FX_IO_ERROR;
 8014a42:	687b      	ldr	r3, [r7, #4]
 8014a44:	2290      	movs	r2, #144	; 0x90
 8014a46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                        return;
 8014a4a:	e064      	b.n	8014b16 <fx_stm32_levelx_nor_driver+0x29e>
                    }

                    /* Move to the next entries.  */
                    logical_sector++;
 8014a4c:	693b      	ldr	r3, [r7, #16]
 8014a4e:	3301      	adds	r3, #1
 8014a50:	613b      	str	r3, [r7, #16]
                    source_buffer =  source_buffer + media_ptr->fx_media_bytes_per_sector;
 8014a52:	687b      	ldr	r3, [r7, #4]
 8014a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014a56:	69ba      	ldr	r2, [r7, #24]
 8014a58:	4413      	add	r3, r2
 8014a5a:	61bb      	str	r3, [r7, #24]
                for (i = 0; i < media_ptr->fx_media_driver_sectors; i++)
 8014a5c:	69fb      	ldr	r3, [r7, #28]
 8014a5e:	3301      	adds	r3, #1
 8014a60:	61fb      	str	r3, [r7, #28]
 8014a62:	687b      	ldr	r3, [r7, #4]
 8014a64:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8014a68:	69fa      	ldr	r2, [r7, #28]
 8014a6a:	429a      	cmp	r2, r3
 8014a6c:	d3de      	bcc.n	8014a2c <fx_stm32_levelx_nor_driver+0x1b4>
                }

                /* Successful driver request.  */
                media_ptr->fx_media_driver_status =  FX_SUCCESS;
 8014a6e:	687b      	ldr	r3, [r7, #4]
 8014a70:	2200      	movs	r2, #0
 8014a72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                break;
 8014a76:	e04e      	b.n	8014b16 <fx_stm32_levelx_nor_driver+0x29e>
            {

                /* Write the boot record and return to the caller.  */

                /* Setup the source buffer.  */
                source_buffer =       (UCHAR *) media_ptr -> fx_media_driver_buffer;
 8014a78:	687b      	ldr	r3, [r7, #4]
 8014a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014a7e:	61bb      	str	r3, [r7, #24]

                /* Write boot sector to NOR flash.  */
                status =  lx_nor_flash_sector_write(&current_driver->flash_instance, 0, source_buffer);
 8014a80:	4b27      	ldr	r3, [pc, #156]	; (8014b20 <fx_stm32_levelx_nor_driver+0x2a8>)
 8014a82:	681b      	ldr	r3, [r3, #0]
 8014a84:	69ba      	ldr	r2, [r7, #24]
 8014a86:	2100      	movs	r1, #0
 8014a88:	4618      	mov	r0, r3
 8014a8a:	f001 fdc3 	bl	8016614 <_lx_nor_flash_sector_write>
 8014a8e:	60f8      	str	r0, [r7, #12]

                /* Determine if the boot write was successful.  */
                if (status != LX_SUCCESS)
 8014a90:	68fb      	ldr	r3, [r7, #12]
 8014a92:	2b00      	cmp	r3, #0
 8014a94:	d004      	beq.n	8014aa0 <fx_stm32_levelx_nor_driver+0x228>
                {

                    /* Return an I/O error to FileX.  */
                    media_ptr -> fx_media_driver_status =  FX_IO_ERROR;
 8014a96:	687b      	ldr	r3, [r7, #4]
 8014a98:	2290      	movs	r2, #144	; 0x90
 8014a9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

                    return;
 8014a9e:	e03a      	b.n	8014b16 <fx_stm32_levelx_nor_driver+0x29e>
                }

                /* Successful driver request.  */
                media_ptr -> fx_media_driver_status =  FX_SUCCESS;
 8014aa0:	687b      	ldr	r3, [r7, #4]
 8014aa2:	2200      	movs	r2, #0
 8014aa4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                break ;
 8014aa8:	e035      	b.n	8014b16 <fx_stm32_levelx_nor_driver+0x29e>
            }
        case FX_DRIVER_RELEASE_SECTORS:
            {
                /* Setup the logical sector.  */
                logical_sector =  media_ptr->fx_media_driver_logical_sector;
 8014aaa:	687b      	ldr	r3, [r7, #4]
 8014aac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8014ab0:	613b      	str	r3, [r7, #16]

                /* Release sectors.  */
                for (i = 0; i < media_ptr->fx_media_driver_sectors; i++)
 8014ab2:	2300      	movs	r3, #0
 8014ab4:	61fb      	str	r3, [r7, #28]
 8014ab6:	e014      	b.n	8014ae2 <fx_stm32_levelx_nor_driver+0x26a>
                {
                    /* Release NOR flash sector.  */
                    status = lx_nor_flash_sector_release(&current_driver->flash_instance, logical_sector);
 8014ab8:	4b19      	ldr	r3, [pc, #100]	; (8014b20 <fx_stm32_levelx_nor_driver+0x2a8>)
 8014aba:	681b      	ldr	r3, [r3, #0]
 8014abc:	6939      	ldr	r1, [r7, #16]
 8014abe:	4618      	mov	r0, r3
 8014ac0:	f001 fd3c 	bl	801653c <_lx_nor_flash_sector_release>
 8014ac4:	60f8      	str	r0, [r7, #12]

                    /* Determine if the sector release was successful.  */
                    if (status != LX_SUCCESS)
 8014ac6:	68fb      	ldr	r3, [r7, #12]
 8014ac8:	2b00      	cmp	r3, #0
 8014aca:	d004      	beq.n	8014ad6 <fx_stm32_levelx_nor_driver+0x25e>
                    {
                        /* Return an I/O error to FileX.  */
                        media_ptr->fx_media_driver_status = FX_IO_ERROR;
 8014acc:	687b      	ldr	r3, [r7, #4]
 8014ace:	2290      	movs	r2, #144	; 0x90
 8014ad0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                        return;
 8014ad4:	e01f      	b.n	8014b16 <fx_stm32_levelx_nor_driver+0x29e>
                    }

                    /* Move to the next entries.  */
                    logical_sector++;
 8014ad6:	693b      	ldr	r3, [r7, #16]
 8014ad8:	3301      	adds	r3, #1
 8014ada:	613b      	str	r3, [r7, #16]
                for (i = 0; i < media_ptr->fx_media_driver_sectors; i++)
 8014adc:	69fb      	ldr	r3, [r7, #28]
 8014ade:	3301      	adds	r3, #1
 8014ae0:	61fb      	str	r3, [r7, #28]
 8014ae2:	687b      	ldr	r3, [r7, #4]
 8014ae4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8014ae8:	69fa      	ldr	r2, [r7, #28]
 8014aea:	429a      	cmp	r2, r3
 8014aec:	d3e4      	bcc.n	8014ab8 <fx_stm32_levelx_nor_driver+0x240>
                }

                /* Successful driver request.  */
                media_ptr->fx_media_driver_status =  FX_SUCCESS;
 8014aee:	687b      	ldr	r3, [r7, #4]
 8014af0:	2200      	movs	r2, #0
 8014af2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                break;
 8014af6:	e00e      	b.n	8014b16 <fx_stm32_levelx_nor_driver+0x29e>
            }

        case FX_DRIVER_FLUSH:
            {
                /* Return driver success.  */
                media_ptr->fx_media_driver_status =  FX_SUCCESS;
 8014af8:	687b      	ldr	r3, [r7, #4]
 8014afa:	2200      	movs	r2, #0
 8014afc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                break;
 8014b00:	e009      	b.n	8014b16 <fx_stm32_levelx_nor_driver+0x29e>
            }

        case FX_DRIVER_ABORT:
            {
                /* Return driver success.  */
                media_ptr->fx_media_driver_status =  FX_SUCCESS;
 8014b02:	687b      	ldr	r3, [r7, #4]
 8014b04:	2200      	movs	r2, #0
 8014b06:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                break;
 8014b0a:	e004      	b.n	8014b16 <fx_stm32_levelx_nor_driver+0x29e>
            }

        default:
            {
                /* Invalid driver request.  */
                media_ptr->fx_media_driver_status =  FX_IO_ERROR;
 8014b0c:	687b      	ldr	r3, [r7, #4]
 8014b0e:	2290      	movs	r2, #144	; 0x90
 8014b10:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                break;
 8014b14:	bf00      	nop
            }
    }
}
 8014b16:	3720      	adds	r7, #32
 8014b18:	46bd      	mov	sp, r7
 8014b1a:	bd80      	pop	{r7, pc}
 8014b1c:	20000078 	.word	0x20000078
 8014b20:	20015204 	.word	0x20015204

08014b24 <_lx_nor_flash_block_reclaim>:
/*  06-02-2021     Bhupendra Naphade        Modified comment(s),          */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UINT  _lx_nor_flash_block_reclaim(LX_NOR_FLASH *nor_flash)
{
 8014b24:	b580      	push	{r7, lr}
 8014b26:	b094      	sub	sp, #80	; 0x50
 8014b28:	af02      	add	r7, sp, #8
 8014b2a:	6078      	str	r0, [r7, #4]
ULONG   new_mapping_entry;
UINT    status;


    /* Determine the next block to erase.  */
    _lx_nor_flash_next_block_to_erase_find(nor_flash, &erase_block, &erase_count, &mapped_sectors, &obsolete_sectors);
 8014b2c:	f107 0018 	add.w	r0, r7, #24
 8014b30:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8014b34:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8014b38:	f107 0314 	add.w	r3, r7, #20
 8014b3c:	9300      	str	r3, [sp, #0]
 8014b3e:	4603      	mov	r3, r0
 8014b40:	6878      	ldr	r0, [r7, #4]
 8014b42:	f000 fe54 	bl	80157ee <_lx_nor_flash_next_block_to_erase_find>

    /* Determine if the search pointer is set for this block.  */
    if (nor_flash -> lx_nor_flash_free_block_search == erase_block)
 8014b46:	687b      	ldr	r3, [r7, #4]
 8014b48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8014b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b4c:	429a      	cmp	r2, r3
 8014b4e:	d10c      	bne.n	8014b6a <_lx_nor_flash_block_reclaim+0x46>
    {
    
        /* Ensure the search block is not the block we are trying to free.  */
        nor_flash -> lx_nor_flash_free_block_search =  erase_block + 1;
 8014b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b52:	1c5a      	adds	r2, r3, #1
 8014b54:	687b      	ldr	r3, [r7, #4]
 8014b56:	641a      	str	r2, [r3, #64]	; 0x40
     
        /* Check for wrap condition.  */
        if (nor_flash -> lx_nor_flash_free_block_search >= nor_flash -> lx_nor_flash_total_blocks)
 8014b58:	687b      	ldr	r3, [r7, #4]
 8014b5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8014b5c:	687b      	ldr	r3, [r7, #4]
 8014b5e:	685b      	ldr	r3, [r3, #4]
 8014b60:	429a      	cmp	r2, r3
 8014b62:	d302      	bcc.n	8014b6a <_lx_nor_flash_block_reclaim+0x46>
            nor_flash -> lx_nor_flash_free_block_search =  0;
 8014b64:	687b      	ldr	r3, [r7, #4]
 8014b66:	2200      	movs	r2, #0
 8014b68:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Setup the block word pointer to the first word of the search block.  */
    block_word_ptr =  nor_flash -> lx_nor_flash_base_address + (nor_flash -> lx_nor_flash_words_per_block * erase_block);
 8014b6a:	687b      	ldr	r3, [r7, #4]
 8014b6c:	695a      	ldr	r2, [r3, #20]
 8014b6e:	687b      	ldr	r3, [r7, #4]
 8014b70:	689b      	ldr	r3, [r3, #8]
 8014b72:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8014b74:	fb01 f303 	mul.w	r3, r1, r3
 8014b78:	009b      	lsls	r3, r3, #2
 8014b7a:	4413      	add	r3, r2
 8014b7c:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Determine if this block is completely obsolete.  */
    if (obsolete_sectors == nor_flash -> lx_nor_flash_physical_sectors_per_block)
 8014b7e:	687b      	ldr	r3, [r7, #4]
 8014b80:	691a      	ldr	r2, [r3, #16]
 8014b82:	697b      	ldr	r3, [r7, #20]
 8014b84:	429a      	cmp	r2, r3
 8014b86:	f040 8082 	bne.w	8014c8e <_lx_nor_flash_block_reclaim+0x16a>
    {

        /* Write the erased started indication.  */            
        erase_started_value =  LX_BLOCK_ERASE_STARTED;
 8014b8a:	2300      	movs	r3, #0
 8014b8c:	61fb      	str	r3, [r7, #28]
        status =  _lx_nor_flash_driver_write(nor_flash, block_word_ptr, &erase_started_value, 1);
 8014b8e:	f107 021c 	add.w	r2, r7, #28
 8014b92:	2301      	movs	r3, #1
 8014b94:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014b96:	6878      	ldr	r0, [r7, #4]
 8014b98:	f000 fba8 	bl	80152ec <_lx_nor_flash_driver_write>
 8014b9c:	6378      	str	r0, [r7, #52]	; 0x34

        /* Check for an error from flash driver. Drivers should never return an error..  */
        if (status)
 8014b9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014ba0:	2b00      	cmp	r3, #0
 8014ba2:	d005      	beq.n	8014bb0 <_lx_nor_flash_block_reclaim+0x8c>
        {
        
            /* Call system error handler.  */
            _lx_nor_flash_system_error(nor_flash, status);
 8014ba4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8014ba6:	6878      	ldr	r0, [r7, #4]
 8014ba8:	f001 fe42 	bl	8016830 <_lx_nor_flash_system_error>

            /* Return the error.  */
            return(status);
 8014bac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014bae:	e1fd      	b.n	8014fac <_lx_nor_flash_block_reclaim+0x488>
        }
       
        /* Erase the entire block.  */
        status =  _lx_nor_flash_driver_block_erase(nor_flash, erase_block, erase_count+1);
 8014bb0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8014bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bb4:	3301      	adds	r3, #1
 8014bb6:	461a      	mov	r2, r3
 8014bb8:	6878      	ldr	r0, [r7, #4]
 8014bba:	f000 fa53 	bl	8015064 <_lx_nor_flash_driver_block_erase>
 8014bbe:	6378      	str	r0, [r7, #52]	; 0x34

        /* Check for an error from flash driver. Drivers should never return an error..  */
        if (status)
 8014bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014bc2:	2b00      	cmp	r3, #0
 8014bc4:	d005      	beq.n	8014bd2 <_lx_nor_flash_block_reclaim+0xae>
        {
        
            /* Call system error handler.  */
            _lx_nor_flash_system_error(nor_flash, status);
 8014bc6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8014bc8:	6878      	ldr	r0, [r7, #4]
 8014bca:	f001 fe31 	bl	8016830 <_lx_nor_flash_system_error>
            
            /* Return the error.  */
            return(status);
 8014bce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014bd0:	e1ec      	b.n	8014fac <_lx_nor_flash_block_reclaim+0x488>
        }
        
        /* Increment the erase count.  */
        erase_count++;            
 8014bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bd4:	3301      	adds	r3, #1
 8014bd6:	627b      	str	r3, [r7, #36]	; 0x24

        /* Determine if the new erase count exceeds the maximum.  */
        if (erase_count > ((ULONG) LX_BLOCK_ERASE_COUNT_MAX))
 8014bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bda:	2b00      	cmp	r3, #0
 8014bdc:	da02      	bge.n	8014be4 <_lx_nor_flash_block_reclaim+0xc0>
        {
                
            /* Yes, erase count is in overflow. Stay at the maximum count.  */
            erase_count =  ((ULONG) LX_BLOCK_ERASE_COUNT_MAX);
 8014bde:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8014be2:	627b      	str	r3, [r7, #36]	; 0x24
        }
        
        /* Determine if we need to update the maximum erase count.  */
        if (erase_count > nor_flash -> lx_nor_flash_maximum_erase_count)
 8014be4:	687b      	ldr	r3, [r7, #4]
 8014be6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8014be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bea:	429a      	cmp	r2, r3
 8014bec:	d202      	bcs.n	8014bf4 <_lx_nor_flash_block_reclaim+0xd0>
        {
        
            /* Yes, a new maximum is present.  */
            nor_flash -> lx_nor_flash_maximum_erase_count =  erase_count;
 8014bee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014bf0:	687b      	ldr	r3, [r7, #4]
 8014bf2:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        
        /* Setup the free bit map that corresponds to the free physical sectors in this
           block. Note that we only need to setup the portion of the free bit map that doesn't 
           have sectors associated with it.  */            
        status =  _lx_nor_flash_driver_write(nor_flash, block_word_ptr+(nor_flash -> lx_nor_flash_block_free_bit_map_offset + (nor_flash -> lx_nor_flash_block_bit_map_words - 1)), 
 8014bf4:	687b      	ldr	r3, [r7, #4]
 8014bf6:	699a      	ldr	r2, [r3, #24]
 8014bf8:	687b      	ldr	r3, [r7, #4]
 8014bfa:	69db      	ldr	r3, [r3, #28]
 8014bfc:	4413      	add	r3, r2
 8014bfe:	3b01      	subs	r3, #1
 8014c00:	009b      	lsls	r3, r3, #2
 8014c02:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014c04:	18d1      	adds	r1, r2, r3
 8014c06:	687b      	ldr	r3, [r7, #4]
 8014c08:	f103 0220 	add.w	r2, r3, #32
 8014c0c:	2301      	movs	r3, #1
 8014c0e:	6878      	ldr	r0, [r7, #4]
 8014c10:	f000 fb6c 	bl	80152ec <_lx_nor_flash_driver_write>
 8014c14:	6378      	str	r0, [r7, #52]	; 0x34
                                                                        &(nor_flash -> lx_nor_flash_block_bit_map_mask), 1);

        /* Check for an error from flash driver. Drivers should never return an error..  */
        if (status)
 8014c16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014c18:	2b00      	cmp	r3, #0
 8014c1a:	d005      	beq.n	8014c28 <_lx_nor_flash_block_reclaim+0x104>
        {
       
            /* Call system error handler.  */
            _lx_nor_flash_system_error(nor_flash, status);
 8014c1c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8014c1e:	6878      	ldr	r0, [r7, #4]
 8014c20:	f001 fe06 	bl	8016830 <_lx_nor_flash_system_error>

            /* Return the error.  */
            return(status);
 8014c24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014c26:	e1c1      	b.n	8014fac <_lx_nor_flash_block_reclaim+0x488>
        }
        
        /* Write the initial erase count for the block with upper bit set.  */
        temp_erase_count =  (erase_count | LX_BLOCK_ERASED);
 8014c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8014c2e:	623b      	str	r3, [r7, #32]
        status =  _lx_nor_flash_driver_write(nor_flash, block_word_ptr, &temp_erase_count, 1);
 8014c30:	f107 0220 	add.w	r2, r7, #32
 8014c34:	2301      	movs	r3, #1
 8014c36:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014c38:	6878      	ldr	r0, [r7, #4]
 8014c3a:	f000 fb57 	bl	80152ec <_lx_nor_flash_driver_write>
 8014c3e:	6378      	str	r0, [r7, #52]	; 0x34

        /* Check for an error from flash driver. Drivers should never return an error..  */
        if (status)
 8014c40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014c42:	2b00      	cmp	r3, #0
 8014c44:	d005      	beq.n	8014c52 <_lx_nor_flash_block_reclaim+0x12e>
        {
        
            /* Call system error handler.  */
            _lx_nor_flash_system_error(nor_flash, status);
 8014c46:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8014c48:	6878      	ldr	r0, [r7, #4]
 8014c4a:	f001 fdf1 	bl	8016830 <_lx_nor_flash_system_error>

            /* Return the error.  */
            return(status);
 8014c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014c50:	e1ac      	b.n	8014fac <_lx_nor_flash_block_reclaim+0x488>
        }

        /* Write the final initial erase count for the block.  */
        status =  _lx_nor_flash_driver_write(nor_flash, block_word_ptr, &erase_count, 1);
 8014c52:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8014c56:	2301      	movs	r3, #1
 8014c58:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014c5a:	6878      	ldr	r0, [r7, #4]
 8014c5c:	f000 fb46 	bl	80152ec <_lx_nor_flash_driver_write>
 8014c60:	6378      	str	r0, [r7, #52]	; 0x34

        /* Check for an error from flash driver. Drivers should never return an error..  */
        if (status)
 8014c62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014c64:	2b00      	cmp	r3, #0
 8014c66:	d005      	beq.n	8014c74 <_lx_nor_flash_block_reclaim+0x150>
        {
        
            /* Call system error handler.  */
            _lx_nor_flash_system_error(nor_flash, status);
 8014c68:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8014c6a:	6878      	ldr	r0, [r7, #4]
 8014c6c:	f001 fde0 	bl	8016830 <_lx_nor_flash_system_error>

            /* Return the error.  */
            return(status);
 8014c70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014c72:	e19b      	b.n	8014fac <_lx_nor_flash_block_reclaim+0x488>
        }
        
        /* Update parameters of this flash.  */
        nor_flash -> lx_nor_flash_free_physical_sectors =      nor_flash -> lx_nor_flash_free_physical_sectors + obsolete_sectors;
 8014c74:	687b      	ldr	r3, [r7, #4]
 8014c76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014c78:	697b      	ldr	r3, [r7, #20]
 8014c7a:	441a      	add	r2, r3
 8014c7c:	687b      	ldr	r3, [r7, #4]
 8014c7e:	62da      	str	r2, [r3, #44]	; 0x2c
        nor_flash -> lx_nor_flash_obsolete_physical_sectors =  nor_flash -> lx_nor_flash_obsolete_physical_sectors - obsolete_sectors;
 8014c80:	687b      	ldr	r3, [r7, #4]
 8014c82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8014c84:	697b      	ldr	r3, [r7, #20]
 8014c86:	1ad2      	subs	r2, r2, r3
 8014c88:	687b      	ldr	r3, [r7, #4]
 8014c8a:	635a      	str	r2, [r3, #52]	; 0x34
 8014c8c:	e18d      	b.n	8014faa <_lx_nor_flash_block_reclaim+0x486>
    }
    else 
    {
    
        /* Calculate the number of free sectors in this block.  */
        free_sectors =  nor_flash -> lx_nor_flash_physical_sectors_per_block - (obsolete_sectors + mapped_sectors);
 8014c8e:	687b      	ldr	r3, [r7, #4]
 8014c90:	691a      	ldr	r2, [r3, #16]
 8014c92:	6979      	ldr	r1, [r7, #20]
 8014c94:	69bb      	ldr	r3, [r7, #24]
 8014c96:	440b      	add	r3, r1
 8014c98:	1ad3      	subs	r3, r2, r3
 8014c9a:	63bb      	str	r3, [r7, #56]	; 0x38
        
        /* Determine if there are enough free sectors outside of this block to reclaim this block.  */
        if (mapped_sectors <= (nor_flash -> lx_nor_flash_free_physical_sectors - free_sectors))
 8014c9c:	687b      	ldr	r3, [r7, #4]
 8014c9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ca2:	1ad2      	subs	r2, r2, r3
 8014ca4:	69bb      	ldr	r3, [r7, #24]
 8014ca6:	429a      	cmp	r2, r3
 8014ca8:	f0c0 817f 	bcc.w	8014faa <_lx_nor_flash_block_reclaim+0x486>
        {
        
            /* Setup a pointer to the mapped list.  */
            list_word_ptr =  block_word_ptr + nor_flash -> lx_nor_flash_block_physical_sector_mapping_offset;
 8014cac:	687b      	ldr	r3, [r7, #4]
 8014cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014cb0:	009b      	lsls	r3, r3, #2
 8014cb2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014cb4:	4413      	add	r3, r2
 8014cb6:	647b      	str	r3, [r7, #68]	; 0x44

            /* Now search through the list to find mapped sectors to move.  */
            for (i = 0; i < nor_flash -> lx_nor_flash_physical_sectors_per_block; i++)
 8014cb8:	2300      	movs	r3, #0
 8014cba:	643b      	str	r3, [r7, #64]	; 0x40
 8014cbc:	e0ea      	b.n	8014e94 <_lx_nor_flash_block_reclaim+0x370>
#ifdef LX_DIRECT_READ
        
                /* Read the word directly.  */
                list_word =  *(list_word_ptr);
#else
                status =  _lx_nor_flash_driver_read(nor_flash, list_word_ptr, &list_word, 1);
 8014cbe:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8014cc2:	2301      	movs	r3, #1
 8014cc4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8014cc6:	6878      	ldr	r0, [r7, #4]
 8014cc8:	f000 fa2a 	bl	8015120 <_lx_nor_flash_driver_read>
 8014ccc:	6378      	str	r0, [r7, #52]	; 0x34

                /* Check for an error from flash driver. Drivers should never return an error..  */
                if (status)
 8014cce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014cd0:	2b00      	cmp	r3, #0
 8014cd2:	d005      	beq.n	8014ce0 <_lx_nor_flash_block_reclaim+0x1bc>
                {
        
                    /* Call system error handler.  */
                    _lx_nor_flash_system_error(nor_flash, status);
 8014cd4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8014cd6:	6878      	ldr	r0, [r7, #4]
 8014cd8:	f001 fdaa 	bl	8016830 <_lx_nor_flash_system_error>

                    /* Return the error.  */
                    return(status);
 8014cdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014cde:	e165      	b.n	8014fac <_lx_nor_flash_block_reclaim+0x488>
                }
#endif

                /* Determine if the entry hasn't been used.  */
                if (list_word == LX_NOR_PHYSICAL_SECTOR_FREE)
 8014ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ce2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014ce6:	f000 80dc 	beq.w	8014ea2 <_lx_nor_flash_block_reclaim+0x37e>
                       else exists after this point.  */
                    break;
                }
            
                /* Is this entry mapped?  */
                if (list_word & LX_NOR_PHYSICAL_SECTOR_VALID)
 8014cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014cec:	2b00      	cmp	r3, #0
 8014cee:	f280 80cb 	bge.w	8014e88 <_lx_nor_flash_block_reclaim+0x364>
                {
                
                    /* Pickup the logical sector associated with this mapped physical sector.  */
                    logical_sector =  list_word & LX_NOR_LOGICAL_SECTOR_MASK;
 8014cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014cf4:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8014cf8:	633b      	str	r3, [r7, #48]	; 0x30

                    /* Invalidate the old sector mapping cache entry.  */
                    _lx_nor_flash_sector_mapping_cache_invalidate(nor_flash, logical_sector);
 8014cfa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014cfc:	6878      	ldr	r0, [r7, #4]
 8014cfe:	f001 fb24 	bl	801634a <_lx_nor_flash_sector_mapping_cache_invalidate>
                      
                    /* Allocate a new physical sector for this write.  */
                    _lx_nor_flash_physical_sector_allocate(nor_flash, logical_sector, &new_mapping_address, &new_sector_address);
 8014d02:	f107 030c 	add.w	r3, r7, #12
 8014d06:	f107 0210 	add.w	r2, r7, #16
 8014d0a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014d0c:	6878      	ldr	r0, [r7, #4]
 8014d0e:	f001 f9c5 	bl	801609c <_lx_nor_flash_physical_sector_allocate>
                    
                    /* Check to see if the new sector is also in the erase block.  */
                    if ((new_sector_address >= block_word_ptr) && (new_sector_address < (block_word_ptr + nor_flash -> lx_nor_flash_words_per_block)))
 8014d12:	68fb      	ldr	r3, [r7, #12]
 8014d14:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014d16:	429a      	cmp	r2, r3
 8014d18:	d828      	bhi.n	8014d6c <_lx_nor_flash_block_reclaim+0x248>
 8014d1a:	687b      	ldr	r3, [r7, #4]
 8014d1c:	689b      	ldr	r3, [r3, #8]
 8014d1e:	009b      	lsls	r3, r3, #2
 8014d20:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014d22:	441a      	add	r2, r3
 8014d24:	68fb      	ldr	r3, [r7, #12]
 8014d26:	429a      	cmp	r2, r3
 8014d28:	d920      	bls.n	8014d6c <_lx_nor_flash_block_reclaim+0x248>
                    {
                    
                        /* Yes, the new sector was found in the block to be erased. Simply move the search pointer
                           to the block after the erase block and search for another sector from there.  */
                        nor_flash -> lx_nor_flash_free_block_search =  erase_block + 1;
 8014d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d2c:	1c5a      	adds	r2, r3, #1
 8014d2e:	687b      	ldr	r3, [r7, #4]
 8014d30:	641a      	str	r2, [r3, #64]	; 0x40
     
                        /* Check for wrap condition.  */
                        if (nor_flash -> lx_nor_flash_free_block_search >= nor_flash -> lx_nor_flash_total_blocks)
 8014d32:	687b      	ldr	r3, [r7, #4]
 8014d34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8014d36:	687b      	ldr	r3, [r7, #4]
 8014d38:	685b      	ldr	r3, [r3, #4]
 8014d3a:	429a      	cmp	r2, r3
 8014d3c:	d302      	bcc.n	8014d44 <_lx_nor_flash_block_reclaim+0x220>
                            nor_flash -> lx_nor_flash_free_block_search =  0;
 8014d3e:	687b      	ldr	r3, [r7, #4]
 8014d40:	2200      	movs	r2, #0
 8014d42:	641a      	str	r2, [r3, #64]	; 0x40

                        /* Allocate a new physical sector for this write.  */
                        _lx_nor_flash_physical_sector_allocate(nor_flash, logical_sector, &new_mapping_address, &new_sector_address);
 8014d44:	f107 030c 	add.w	r3, r7, #12
 8014d48:	f107 0210 	add.w	r2, r7, #16
 8014d4c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014d4e:	6878      	ldr	r0, [r7, #4]
 8014d50:	f001 f9a4 	bl	801609c <_lx_nor_flash_physical_sector_allocate>

                        /* Check again for the new sector inside of the block to erase. This should be impossible, since
                           we check previously if there are enough free sectors outside of this block needed to reclaim
                           this block.  */
                        if ((new_sector_address >= block_word_ptr) && (new_sector_address < (block_word_ptr + LX_NOR_SECTOR_SIZE)))
 8014d54:	68fb      	ldr	r3, [r7, #12]
 8014d56:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014d58:	429a      	cmp	r2, r3
 8014d5a:	d807      	bhi.n	8014d6c <_lx_nor_flash_block_reclaim+0x248>
 8014d5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014d5e:	f503 7200 	add.w	r2, r3, #512	; 0x200
 8014d62:	68fb      	ldr	r3, [r7, #12]
 8014d64:	429a      	cmp	r2, r3
 8014d66:	d901      	bls.n	8014d6c <_lx_nor_flash_block_reclaim+0x248>
                        {

                            /* System error, a new sector is not available outside of the erase block. 
                               Clear the new sector so we fall through to the error handling. */
                            new_mapping_address =  LX_NULL;
 8014d68:	2300      	movs	r3, #0
 8014d6a:	613b      	str	r3, [r7, #16]
                        }
                    }

                    /* Determine if the new sector allocation was successful.  */
                    if (new_mapping_address)
 8014d6c:	693b      	ldr	r3, [r7, #16]
 8014d6e:	2b00      	cmp	r3, #0
 8014d70:	d07e      	beq.n	8014e70 <_lx_nor_flash_block_reclaim+0x34c>
                        }
#else

                        /* First, read the sector data into the internal memory of the NOR flash instance. This internal memory
                           is supplied by the underlying driver during initialization.  */
                        status =  _lx_nor_flash_driver_read(nor_flash, (block_word_ptr + nor_flash -> lx_nor_flash_block_physical_sector_offset) +
 8014d72:	687b      	ldr	r3, [r7, #4]
 8014d74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014d76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014d78:	01db      	lsls	r3, r3, #7
 8014d7a:	4413      	add	r3, r2
 8014d7c:	009b      	lsls	r3, r3, #2
 8014d7e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014d80:	18d1      	adds	r1, r2, r3
 8014d82:	687b      	ldr	r3, [r7, #4]
 8014d84:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8014d88:	2380      	movs	r3, #128	; 0x80
 8014d8a:	6878      	ldr	r0, [r7, #4]
 8014d8c:	f000 f9c8 	bl	8015120 <_lx_nor_flash_driver_read>
 8014d90:	6378      	str	r0, [r7, #52]	; 0x34
                                                                                       (i * LX_NOR_SECTOR_SIZE), nor_flash -> lx_nor_flash_sector_buffer,
                                                                                       LX_NOR_SECTOR_SIZE);

                        /* Check for an error from flash driver. Drivers should never return an error..  */
                        if (status)
 8014d92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014d94:	2b00      	cmp	r3, #0
 8014d96:	d005      	beq.n	8014da4 <_lx_nor_flash_block_reclaim+0x280>
                        {
        
                            /* Call system error handler.  */
                            _lx_nor_flash_system_error(nor_flash, status);
 8014d98:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8014d9a:	6878      	ldr	r0, [r7, #4]
 8014d9c:	f001 fd48 	bl	8016830 <_lx_nor_flash_system_error>

                            /* Return the error.  */
                            return(status);
 8014da0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014da2:	e103      	b.n	8014fac <_lx_nor_flash_block_reclaim+0x488>
                        }

                        /* Next, write the sector data from the internal buffer to the new physical sector.  */
                        status =  _lx_nor_flash_driver_write(nor_flash, new_sector_address, nor_flash -> lx_nor_flash_sector_buffer, LX_NOR_SECTOR_SIZE);
 8014da4:	68f9      	ldr	r1, [r7, #12]
 8014da6:	687b      	ldr	r3, [r7, #4]
 8014da8:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8014dac:	2380      	movs	r3, #128	; 0x80
 8014dae:	6878      	ldr	r0, [r7, #4]
 8014db0:	f000 fa9c 	bl	80152ec <_lx_nor_flash_driver_write>
 8014db4:	6378      	str	r0, [r7, #52]	; 0x34

                        /* Check for an error from flash driver. Drivers should never return an error..  */
                        if (status)
 8014db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014db8:	2b00      	cmp	r3, #0
 8014dba:	d005      	beq.n	8014dc8 <_lx_nor_flash_block_reclaim+0x2a4>
                        {
        
                            /* Call system error handler.  */
                            _lx_nor_flash_system_error(nor_flash, status);
 8014dbc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8014dbe:	6878      	ldr	r0, [r7, #4]
 8014dc0:	f001 fd36 	bl	8016830 <_lx_nor_flash_system_error>

                            /* Return the error.  */
                            return(status);
 8014dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014dc6:	e0f1      	b.n	8014fac <_lx_nor_flash_block_reclaim+0x488>
#endif

                        /* Now deprecate the old sector mapping.  */
            
                        /* Clear bit 30, which indicates this sector is superceded.  */
                        list_word =  list_word & ~((ULONG) LX_NOR_PHYSICAL_SECTOR_SUPERCEDED);
 8014dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014dca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8014dce:	62fb      	str	r3, [r7, #44]	; 0x2c
            
                        /* Write the value back to the flash to clear bit 30.  */
                        status =  _lx_nor_flash_driver_write(nor_flash, list_word_ptr, &list_word, 1);
 8014dd0:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8014dd4:	2301      	movs	r3, #1
 8014dd6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8014dd8:	6878      	ldr	r0, [r7, #4]
 8014dda:	f000 fa87 	bl	80152ec <_lx_nor_flash_driver_write>
 8014dde:	6378      	str	r0, [r7, #52]	; 0x34
                
                        /* Check for an error from flash driver. Drivers should never return an error..  */
                        if (status)
 8014de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014de2:	2b00      	cmp	r3, #0
 8014de4:	d005      	beq.n	8014df2 <_lx_nor_flash_block_reclaim+0x2ce>
                        {
        
                            /* Call system error handler.  */
                            _lx_nor_flash_system_error(nor_flash, status);
 8014de6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8014de8:	6878      	ldr	r0, [r7, #4]
 8014dea:	f001 fd21 	bl	8016830 <_lx_nor_flash_system_error>

                            /* Return the error.  */
                            return(status);
 8014dee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014df0:	e0dc      	b.n	8014fac <_lx_nor_flash_block_reclaim+0x488>
                        }
                
                        /* Now build the new mapping entry - with the not valid bit set initially.  */
                        new_mapping_entry =  ((ULONG) LX_NOR_PHYSICAL_SECTOR_VALID) | ((ULONG) LX_NOR_PHYSICAL_SECTOR_SUPERCEDED) | (ULONG) LX_NOR_PHYSICAL_SECTOR_MAPPING_NOT_VALID | logical_sector;
 8014df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014df4:	f043 4360 	orr.w	r3, r3, #3758096384	; 0xe0000000
 8014df8:	60bb      	str	r3, [r7, #8]
            
                        /* Write out the new mapping entry.  */
                        status =  _lx_nor_flash_driver_write(nor_flash, new_mapping_address, &new_mapping_entry, 1);
 8014dfa:	6939      	ldr	r1, [r7, #16]
 8014dfc:	f107 0208 	add.w	r2, r7, #8
 8014e00:	2301      	movs	r3, #1
 8014e02:	6878      	ldr	r0, [r7, #4]
 8014e04:	f000 fa72 	bl	80152ec <_lx_nor_flash_driver_write>
 8014e08:	6378      	str	r0, [r7, #52]	; 0x34

                        /* Check for an error from flash driver. Drivers should never return an error..  */
                        if (status)
 8014e0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014e0c:	2b00      	cmp	r3, #0
 8014e0e:	d005      	beq.n	8014e1c <_lx_nor_flash_block_reclaim+0x2f8>
                        {
        
                            /* Call system error handler.  */
                            _lx_nor_flash_system_error(nor_flash, status);
 8014e10:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8014e12:	6878      	ldr	r0, [r7, #4]
 8014e14:	f001 fd0c 	bl	8016830 <_lx_nor_flash_system_error>

                            /* Return the error.  */
                            return(status);
 8014e18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014e1a:	e0c7      	b.n	8014fac <_lx_nor_flash_block_reclaim+0x488>
                        }

                        /* Now clear the not valid bit to make this sector mapping valid.  This is done because the writing of the extra bytes itself can 
                           be interrupted and we need to make sure this can be detected when the flash is opened again.  */
                        new_mapping_entry =  new_mapping_entry & ~((ULONG) LX_NOR_PHYSICAL_SECTOR_MAPPING_NOT_VALID);
 8014e1c:	68bb      	ldr	r3, [r7, #8]
 8014e1e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8014e22:	60bb      	str	r3, [r7, #8]
            
                        /* Clear the not valid bit.  */
                        status =  _lx_nor_flash_driver_write(nor_flash, new_mapping_address, &new_mapping_entry, 1);
 8014e24:	6939      	ldr	r1, [r7, #16]
 8014e26:	f107 0208 	add.w	r2, r7, #8
 8014e2a:	2301      	movs	r3, #1
 8014e2c:	6878      	ldr	r0, [r7, #4]
 8014e2e:	f000 fa5d 	bl	80152ec <_lx_nor_flash_driver_write>
 8014e32:	6378      	str	r0, [r7, #52]	; 0x34

                        /* Check for an error from flash driver. Drivers should never return an error..  */
                        if (status)
 8014e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014e36:	2b00      	cmp	r3, #0
 8014e38:	d005      	beq.n	8014e46 <_lx_nor_flash_block_reclaim+0x322>
                        {
        
                            /* Call system error handler.  */
                            _lx_nor_flash_system_error(nor_flash, status);
 8014e3a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8014e3c:	6878      	ldr	r0, [r7, #4]
 8014e3e:	f001 fcf7 	bl	8016830 <_lx_nor_flash_system_error>

                            /* Return the error.  */
                            return(status);
 8014e42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014e44:	e0b2      	b.n	8014fac <_lx_nor_flash_block_reclaim+0x488>
                        }

                        /* Now clear bit 31, which indicates this sector is now obsoleted.  */
                        list_word =  list_word & ~((ULONG) LX_NOR_PHYSICAL_SECTOR_VALID);
 8014e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e48:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
            
                        /* Write the value back to the flash to clear bit 31.  */
                        status =  _lx_nor_flash_driver_write(nor_flash, list_word_ptr, &list_word, 1);
 8014e4e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8014e52:	2301      	movs	r3, #1
 8014e54:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8014e56:	6878      	ldr	r0, [r7, #4]
 8014e58:	f000 fa48 	bl	80152ec <_lx_nor_flash_driver_write>
 8014e5c:	6378      	str	r0, [r7, #52]	; 0x34

                        /* Check for an error from flash driver. Drivers should never return an error..  */
                        if (status)
 8014e5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014e60:	2b00      	cmp	r3, #0
 8014e62:	d00b      	beq.n	8014e7c <_lx_nor_flash_block_reclaim+0x358>
                        {
        
                            /* Call system error handler.  */
                            _lx_nor_flash_system_error(nor_flash, status);
 8014e64:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8014e66:	6878      	ldr	r0, [r7, #4]
 8014e68:	f001 fce2 	bl	8016830 <_lx_nor_flash_system_error>

                            /* Return the error.  */
                            return(status);
 8014e6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014e6e:	e09d      	b.n	8014fac <_lx_nor_flash_block_reclaim+0x488>
                    }
                    else
                    {

                        /* Call system error handler - the allocation should always succeed at this point.  */
                        _lx_nor_flash_system_error(nor_flash, LX_SYSTEM_ALLOCATION_FAILED);
 8014e70:	215c      	movs	r1, #92	; 0x5c
 8014e72:	6878      	ldr	r0, [r7, #4]
 8014e74:	f001 fcdc 	bl	8016830 <_lx_nor_flash_system_error>

                        /* Return the error.  */
                        return(status);
 8014e78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014e7a:	e097      	b.n	8014fac <_lx_nor_flash_block_reclaim+0x488>
                    }
                        
                    /* Decrement the number of mapped sectors.  */
                    mapped_sectors--;
 8014e7c:	69bb      	ldr	r3, [r7, #24]
 8014e7e:	3b01      	subs	r3, #1
 8014e80:	61bb      	str	r3, [r7, #24]
                            
                    /* Determine if we are done.  */
                    if (mapped_sectors == 0)
 8014e82:	69bb      	ldr	r3, [r7, #24]
 8014e84:	2b00      	cmp	r3, #0
 8014e86:	d00e      	beq.n	8014ea6 <_lx_nor_flash_block_reclaim+0x382>
                        break;
               }

               /* Move the list pointer ahead.  */
               list_word_ptr++;
 8014e88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014e8a:	3304      	adds	r3, #4
 8014e8c:	647b      	str	r3, [r7, #68]	; 0x44
            for (i = 0; i < nor_flash -> lx_nor_flash_physical_sectors_per_block; i++)
 8014e8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014e90:	3301      	adds	r3, #1
 8014e92:	643b      	str	r3, [r7, #64]	; 0x40
 8014e94:	687b      	ldr	r3, [r7, #4]
 8014e96:	691b      	ldr	r3, [r3, #16]
 8014e98:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014e9a:	429a      	cmp	r2, r3
 8014e9c:	f4ff af0f 	bcc.w	8014cbe <_lx_nor_flash_block_reclaim+0x19a>
 8014ea0:	e002      	b.n	8014ea8 <_lx_nor_flash_block_reclaim+0x384>
                    break;
 8014ea2:	bf00      	nop
 8014ea4:	e000      	b.n	8014ea8 <_lx_nor_flash_block_reclaim+0x384>
                        break;
 8014ea6:	bf00      	nop
            }

            /* Write the erased started indication.  */            
            erase_started_value =  LX_BLOCK_ERASE_STARTED;
 8014ea8:	2300      	movs	r3, #0
 8014eaa:	61fb      	str	r3, [r7, #28]
            status =  _lx_nor_flash_driver_write(nor_flash, block_word_ptr, &erase_started_value, 1);
 8014eac:	f107 021c 	add.w	r2, r7, #28
 8014eb0:	2301      	movs	r3, #1
 8014eb2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014eb4:	6878      	ldr	r0, [r7, #4]
 8014eb6:	f000 fa19 	bl	80152ec <_lx_nor_flash_driver_write>
 8014eba:	6378      	str	r0, [r7, #52]	; 0x34

            /* Check for an error from flash driver. Drivers should never return an error..  */
            if (status)
 8014ebc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014ebe:	2b00      	cmp	r3, #0
 8014ec0:	d005      	beq.n	8014ece <_lx_nor_flash_block_reclaim+0x3aa>
            {
        
                /* Call system error handler.  */
                _lx_nor_flash_system_error(nor_flash, status);
 8014ec2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8014ec4:	6878      	ldr	r0, [r7, #4]
 8014ec6:	f001 fcb3 	bl	8016830 <_lx_nor_flash_system_error>

                /* Return the error.  */
                return(status);
 8014eca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014ecc:	e06e      	b.n	8014fac <_lx_nor_flash_block_reclaim+0x488>
            }
        
            /* Erase the entire block.  */
            status =  _lx_nor_flash_driver_block_erase(nor_flash, erase_block, erase_count+1);
 8014ece:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8014ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ed2:	3301      	adds	r3, #1
 8014ed4:	461a      	mov	r2, r3
 8014ed6:	6878      	ldr	r0, [r7, #4]
 8014ed8:	f000 f8c4 	bl	8015064 <_lx_nor_flash_driver_block_erase>
 8014edc:	6378      	str	r0, [r7, #52]	; 0x34

            /* Check for an error from flash driver. Drivers should never return an error..  */
            if (status)
 8014ede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014ee0:	2b00      	cmp	r3, #0
 8014ee2:	d005      	beq.n	8014ef0 <_lx_nor_flash_block_reclaim+0x3cc>
            {
        
                /* Call system error handler.  */
                _lx_nor_flash_system_error(nor_flash, status);
 8014ee4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8014ee6:	6878      	ldr	r0, [r7, #4]
 8014ee8:	f001 fca2 	bl	8016830 <_lx_nor_flash_system_error>

                /* Return the error.  */
                return(status);
 8014eec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014eee:	e05d      	b.n	8014fac <_lx_nor_flash_block_reclaim+0x488>
            }
        
            /* Increment the erase count.  */
            erase_count++;            
 8014ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ef2:	3301      	adds	r3, #1
 8014ef4:	627b      	str	r3, [r7, #36]	; 0x24

            /* Determine if the new erase count exceeds the maximum.  */
            if (erase_count > ((ULONG) LX_BLOCK_ERASE_COUNT_MAX))
 8014ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ef8:	2b00      	cmp	r3, #0
 8014efa:	da02      	bge.n	8014f02 <_lx_nor_flash_block_reclaim+0x3de>
            {
                
                /* Yes, erase count is in overflow. Stay at the maximum count.  */
                erase_count =  ((ULONG) LX_BLOCK_ERASE_COUNT_MAX);
 8014efc:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8014f00:	627b      	str	r3, [r7, #36]	; 0x24
            }

            /* Determine if we need to update the maximum erase count.  */
            if (erase_count > nor_flash -> lx_nor_flash_maximum_erase_count)
 8014f02:	687b      	ldr	r3, [r7, #4]
 8014f04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8014f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f08:	429a      	cmp	r2, r3
 8014f0a:	d202      	bcs.n	8014f12 <_lx_nor_flash_block_reclaim+0x3ee>
            {
        
                /* Yes, a new maximum is present.  */
                nor_flash -> lx_nor_flash_maximum_erase_count =  erase_count;
 8014f0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014f0e:	687b      	ldr	r3, [r7, #4]
 8014f10:	63da      	str	r2, [r3, #60]	; 0x3c
            }
        
            /* Setup the free bit map that corresponds to the free physical sectors in this
               block. Note that we only need to setup the portion of the free bit map that doesn't 
               have sectors associated with it.  */            
            status =  _lx_nor_flash_driver_write(nor_flash, block_word_ptr+(nor_flash -> lx_nor_flash_block_free_bit_map_offset + (nor_flash -> lx_nor_flash_block_bit_map_words - 1)) , 
 8014f12:	687b      	ldr	r3, [r7, #4]
 8014f14:	699a      	ldr	r2, [r3, #24]
 8014f16:	687b      	ldr	r3, [r7, #4]
 8014f18:	69db      	ldr	r3, [r3, #28]
 8014f1a:	4413      	add	r3, r2
 8014f1c:	3b01      	subs	r3, #1
 8014f1e:	009b      	lsls	r3, r3, #2
 8014f20:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014f22:	18d1      	adds	r1, r2, r3
 8014f24:	687b      	ldr	r3, [r7, #4]
 8014f26:	f103 0220 	add.w	r2, r3, #32
 8014f2a:	2301      	movs	r3, #1
 8014f2c:	6878      	ldr	r0, [r7, #4]
 8014f2e:	f000 f9dd 	bl	80152ec <_lx_nor_flash_driver_write>
 8014f32:	6378      	str	r0, [r7, #52]	; 0x34
                                                                             &(nor_flash -> lx_nor_flash_block_bit_map_mask), 1);
        
            /* Check for an error from flash driver. Drivers should never return an error..  */
            if (status)
 8014f34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014f36:	2b00      	cmp	r3, #0
 8014f38:	d005      	beq.n	8014f46 <_lx_nor_flash_block_reclaim+0x422>
            {
        
                /* Call system error handler.  */
                _lx_nor_flash_system_error(nor_flash, status);
 8014f3a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8014f3c:	6878      	ldr	r0, [r7, #4]
 8014f3e:	f001 fc77 	bl	8016830 <_lx_nor_flash_system_error>

                /* Return the error.  */
                return(status);
 8014f42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014f44:	e032      	b.n	8014fac <_lx_nor_flash_block_reclaim+0x488>
            }

            /* Write the initial erase count for the block with the upper bit set.  */
            temp_erase_count =  (erase_count | LX_BLOCK_ERASED);
 8014f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f48:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8014f4c:	623b      	str	r3, [r7, #32]
            status =  _lx_nor_flash_driver_write(nor_flash, block_word_ptr, &temp_erase_count, 1);
 8014f4e:	f107 0220 	add.w	r2, r7, #32
 8014f52:	2301      	movs	r3, #1
 8014f54:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014f56:	6878      	ldr	r0, [r7, #4]
 8014f58:	f000 f9c8 	bl	80152ec <_lx_nor_flash_driver_write>
 8014f5c:	6378      	str	r0, [r7, #52]	; 0x34

            /* Check for an error from flash driver. Drivers should never return an error..  */
            if (status)
 8014f5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014f60:	2b00      	cmp	r3, #0
 8014f62:	d005      	beq.n	8014f70 <_lx_nor_flash_block_reclaim+0x44c>
            {
        
                /* Call system error handler.  */
                _lx_nor_flash_system_error(nor_flash, status);
 8014f64:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8014f66:	6878      	ldr	r0, [r7, #4]
 8014f68:	f001 fc62 	bl	8016830 <_lx_nor_flash_system_error>

                /* Return the error.  */
                return(status);
 8014f6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014f6e:	e01d      	b.n	8014fac <_lx_nor_flash_block_reclaim+0x488>
            }

            /* Write the final initial erase count for the block.  */
            status =  _lx_nor_flash_driver_write(nor_flash, block_word_ptr, &erase_count, 1);
 8014f70:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8014f74:	2301      	movs	r3, #1
 8014f76:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014f78:	6878      	ldr	r0, [r7, #4]
 8014f7a:	f000 f9b7 	bl	80152ec <_lx_nor_flash_driver_write>
 8014f7e:	6378      	str	r0, [r7, #52]	; 0x34

            /* Check for an error from flash driver. Drivers should never return an error..  */
            if (status)
 8014f80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014f82:	2b00      	cmp	r3, #0
 8014f84:	d005      	beq.n	8014f92 <_lx_nor_flash_block_reclaim+0x46e>
            {
        
                /* Call system error handler.  */
                _lx_nor_flash_system_error(nor_flash, status);
 8014f86:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8014f88:	6878      	ldr	r0, [r7, #4]
 8014f8a:	f001 fc51 	bl	8016830 <_lx_nor_flash_system_error>

                /* Return the error.  */
                return(status);
 8014f8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014f90:	e00c      	b.n	8014fac <_lx_nor_flash_block_reclaim+0x488>
            }

            /* Update parameters of this flash.  */
            nor_flash -> lx_nor_flash_free_physical_sectors =      nor_flash -> lx_nor_flash_free_physical_sectors + obsolete_sectors;
 8014f92:	687b      	ldr	r3, [r7, #4]
 8014f94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014f96:	697b      	ldr	r3, [r7, #20]
 8014f98:	441a      	add	r2, r3
 8014f9a:	687b      	ldr	r3, [r7, #4]
 8014f9c:	62da      	str	r2, [r3, #44]	; 0x2c
            nor_flash -> lx_nor_flash_obsolete_physical_sectors =  nor_flash -> lx_nor_flash_obsolete_physical_sectors - obsolete_sectors;
 8014f9e:	687b      	ldr	r3, [r7, #4]
 8014fa0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8014fa2:	697b      	ldr	r3, [r7, #20]
 8014fa4:	1ad2      	subs	r2, r2, r3
 8014fa6:	687b      	ldr	r3, [r7, #4]
 8014fa8:	635a      	str	r2, [r3, #52]	; 0x34
        }
    }

    /* Return status.  */
    return(LX_SUCCESS);
 8014faa:	2300      	movs	r3, #0
}
 8014fac:	4618      	mov	r0, r3
 8014fae:	3748      	adds	r7, #72	; 0x48
 8014fb0:	46bd      	mov	sp, r7
 8014fb2:	bd80      	pop	{r7, pc}

08014fb4 <_lx_nor_flash_close>:
/*  06-02-2021     Bhupendra Naphade        Modified comment(s),          */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UINT  _lx_nor_flash_close(LX_NOR_FLASH *nor_flash)
{
 8014fb4:	b480      	push	{r7}
 8014fb6:	b087      	sub	sp, #28
 8014fb8:	af00      	add	r7, sp, #0
 8014fba:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014fbc:	f3ef 8310 	mrs	r3, PRIMASK
 8014fc0:	613b      	str	r3, [r7, #16]
    return(posture);
 8014fc2:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 8014fc4:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 8014fc6:	b672      	cpsid	i
    return(int_posture);
 8014fc8:	68fb      	ldr	r3, [r7, #12]

LX_INTERRUPT_SAVE_AREA


    /* Lockout interrupts for NOR flash close.  */
    LX_DISABLE
 8014fca:	617b      	str	r3, [r7, #20]

    /* See if the media is the only one on the media opened list.  */
    if ((_lx_nor_flash_opened_ptr == nor_flash) &&
 8014fcc:	4b22      	ldr	r3, [pc, #136]	; (8015058 <_lx_nor_flash_close+0xa4>)
 8014fce:	681b      	ldr	r3, [r3, #0]
 8014fd0:	687a      	ldr	r2, [r7, #4]
 8014fd2:	429a      	cmp	r2, r3
 8014fd4:	d111      	bne.n	8014ffa <_lx_nor_flash_close+0x46>
        (_lx_nor_flash_opened_ptr == nor_flash -> lx_nor_flash_open_next) &&
 8014fd6:	687b      	ldr	r3, [r7, #4]
 8014fd8:	f8d3 21d8 	ldr.w	r2, [r3, #472]	; 0x1d8
 8014fdc:	4b1e      	ldr	r3, [pc, #120]	; (8015058 <_lx_nor_flash_close+0xa4>)
 8014fde:	681b      	ldr	r3, [r3, #0]
    if ((_lx_nor_flash_opened_ptr == nor_flash) &&
 8014fe0:	429a      	cmp	r2, r3
 8014fe2:	d10a      	bne.n	8014ffa <_lx_nor_flash_close+0x46>
        (_lx_nor_flash_opened_ptr == nor_flash -> lx_nor_flash_open_previous))
 8014fe4:	687b      	ldr	r3, [r7, #4]
 8014fe6:	f8d3 21dc 	ldr.w	r2, [r3, #476]	; 0x1dc
 8014fea:	4b1b      	ldr	r3, [pc, #108]	; (8015058 <_lx_nor_flash_close+0xa4>)
 8014fec:	681b      	ldr	r3, [r3, #0]
        (_lx_nor_flash_opened_ptr == nor_flash -> lx_nor_flash_open_next) &&
 8014fee:	429a      	cmp	r2, r3
 8014ff0:	d103      	bne.n	8014ffa <_lx_nor_flash_close+0x46>
    {

        /* Only opened NOR flash, just set the opened list to NULL.  */
        _lx_nor_flash_opened_ptr =  LX_NULL;
 8014ff2:	4b19      	ldr	r3, [pc, #100]	; (8015058 <_lx_nor_flash_close+0xa4>)
 8014ff4:	2200      	movs	r2, #0
 8014ff6:	601a      	str	r2, [r3, #0]
 8014ff8:	e019      	b.n	801502e <_lx_nor_flash_close+0x7a>
    }
    else
    {

        /* Otherwise, not the only opened NOR flash, link-up the neighbors.  */
        (nor_flash -> lx_nor_flash_open_next) -> lx_nor_flash_open_previous =
 8014ffa:	687b      	ldr	r3, [r7, #4]
 8014ffc:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
                                            nor_flash -> lx_nor_flash_open_previous;
 8015000:	687a      	ldr	r2, [r7, #4]
 8015002:	f8d2 21dc 	ldr.w	r2, [r2, #476]	; 0x1dc
        (nor_flash -> lx_nor_flash_open_next) -> lx_nor_flash_open_previous =
 8015006:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
        (nor_flash -> lx_nor_flash_open_previous) -> lx_nor_flash_open_next =
 801500a:	687b      	ldr	r3, [r7, #4]
 801500c:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
                                            nor_flash -> lx_nor_flash_open_next;
 8015010:	687a      	ldr	r2, [r7, #4]
 8015012:	f8d2 21d8 	ldr.w	r2, [r2, #472]	; 0x1d8
        (nor_flash -> lx_nor_flash_open_previous) -> lx_nor_flash_open_next =
 8015016:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8

        /* See if we have to update the opened list head pointer.  */
        if (_lx_nor_flash_opened_ptr == nor_flash)
 801501a:	4b0f      	ldr	r3, [pc, #60]	; (8015058 <_lx_nor_flash_close+0xa4>)
 801501c:	681b      	ldr	r3, [r3, #0]
 801501e:	687a      	ldr	r2, [r7, #4]
 8015020:	429a      	cmp	r2, r3
 8015022:	d104      	bne.n	801502e <_lx_nor_flash_close+0x7a>
        {
                    
            /* Yes, move the head pointer to the next opened NOR flash. */
            _lx_nor_flash_opened_ptr =  nor_flash -> lx_nor_flash_open_next; 
 8015024:	687b      	ldr	r3, [r7, #4]
 8015026:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 801502a:	4a0b      	ldr	r2, [pc, #44]	; (8015058 <_lx_nor_flash_close+0xa4>)
 801502c:	6013      	str	r3, [r2, #0]
        }
    }

    /* Decrement the opened NOR flash counter.  */
    _lx_nor_flash_opened_count--;
 801502e:	4b0b      	ldr	r3, [pc, #44]	; (801505c <_lx_nor_flash_close+0xa8>)
 8015030:	681b      	ldr	r3, [r3, #0]
 8015032:	3b01      	subs	r3, #1
 8015034:	4a09      	ldr	r2, [pc, #36]	; (801505c <_lx_nor_flash_close+0xa8>)
 8015036:	6013      	str	r3, [r2, #0]

    /* Finally, indicate that this NOR flash is closed.  */
    nor_flash -> lx_nor_flash_state =  LX_NOR_FLASH_CLOSED;
 8015038:	687b      	ldr	r3, [r7, #4]
 801503a:	4a09      	ldr	r2, [pc, #36]	; (8015060 <_lx_nor_flash_close+0xac>)
 801503c:	601a      	str	r2, [r3, #0]
 801503e:	697b      	ldr	r3, [r7, #20]
 8015040:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015042:	68bb      	ldr	r3, [r7, #8]
 8015044:	f383 8810 	msr	PRIMASK, r3
}
 8015048:	bf00      	nop

    /* Delete the thread safe mutex.  */
    tx_mutex_delete(&nor_flash -> lx_nor_flash_mutex);
#endif
    /* Return success.  */
    return(LX_SUCCESS);
 801504a:	2300      	movs	r3, #0
}
 801504c:	4618      	mov	r0, r3
 801504e:	371c      	adds	r7, #28
 8015050:	46bd      	mov	sp, r7
 8015052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015056:	4770      	bx	lr
 8015058:	20015208 	.word	0x20015208
 801505c:	2001520c 	.word	0x2001520c
 8015060:	4e4f5244 	.word	0x4e4f5244

08015064 <_lx_nor_flash_driver_block_erase>:
/*  06-02-2021     Bhupendra Naphade        Modified comment(s),          */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UINT  _lx_nor_flash_driver_block_erase(LX_NOR_FLASH *nor_flash, ULONG block, ULONG erase_count)
{
 8015064:	b580      	push	{r7, lr}
 8015066:	b08a      	sub	sp, #40	; 0x28
 8015068:	af00      	add	r7, sp, #0
 801506a:	60f8      	str	r0, [r7, #12]
 801506c:	60b9      	str	r1, [r7, #8]
 801506e:	607a      	str	r2, [r7, #4]
ULONG   *cache_entry_start;
ULONG   *cache_entry_end;


    /* Calculate the block starting address.  */
    block_start_address =  nor_flash -> lx_nor_flash_base_address + (block * nor_flash -> lx_nor_flash_words_per_block);
 8015070:	68fb      	ldr	r3, [r7, #12]
 8015072:	695a      	ldr	r2, [r3, #20]
 8015074:	68fb      	ldr	r3, [r7, #12]
 8015076:	689b      	ldr	r3, [r3, #8]
 8015078:	68b9      	ldr	r1, [r7, #8]
 801507a:	fb01 f303 	mul.w	r3, r1, r3
 801507e:	009b      	lsls	r3, r3, #2
 8015080:	4413      	add	r3, r2
 8015082:	623b      	str	r3, [r7, #32]
    block_end_address =    block_start_address + nor_flash -> lx_nor_flash_words_per_block;
 8015084:	68fb      	ldr	r3, [r7, #12]
 8015086:	689b      	ldr	r3, [r3, #8]
 8015088:	009b      	lsls	r3, r3, #2
 801508a:	6a3a      	ldr	r2, [r7, #32]
 801508c:	4413      	add	r3, r2
 801508e:	61fb      	str	r3, [r7, #28]
    
    /* Loop through the cache entries to see if there is a sector in cache.  */
    for (i = 0; i < nor_flash -> lx_nor_flash_extended_cache_entries; i++)
 8015090:	2300      	movs	r3, #0
 8015092:	627b      	str	r3, [r7, #36]	; 0x24
 8015094:	e032      	b.n	80150fc <_lx_nor_flash_driver_block_erase+0x98>
    {
        
        /* Search through the cache to see if this cache entry needs to be invalidated.  */
                
        /* Determine the cache entry addresses.  */
        cache_entry_start =  nor_flash -> lx_nor_flash_extended_cache[i].lx_nor_flash_extended_cache_entry_sector_address;
 8015096:	68f9      	ldr	r1, [r7, #12]
 8015098:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801509a:	4613      	mov	r3, r2
 801509c:	005b      	lsls	r3, r3, #1
 801509e:	4413      	add	r3, r2
 80150a0:	009b      	lsls	r3, r3, #2
 80150a2:	440b      	add	r3, r1
 80150a4:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 80150a8:	681b      	ldr	r3, [r3, #0]
 80150aa:	617b      	str	r3, [r7, #20]
        cache_entry_end =    cache_entry_start + LX_NOR_SECTOR_SIZE;
 80150ac:	697b      	ldr	r3, [r7, #20]
 80150ae:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80150b2:	613b      	str	r3, [r7, #16]
                
        /* Determine if the flash address in in the cache entry.  */
        if ((cache_entry_start) && (block_start_address <= cache_entry_start) && (block_end_address > cache_entry_end))
 80150b4:	697b      	ldr	r3, [r7, #20]
 80150b6:	2b00      	cmp	r3, #0
 80150b8:	d01d      	beq.n	80150f6 <_lx_nor_flash_driver_block_erase+0x92>
 80150ba:	6a3a      	ldr	r2, [r7, #32]
 80150bc:	697b      	ldr	r3, [r7, #20]
 80150be:	429a      	cmp	r2, r3
 80150c0:	d819      	bhi.n	80150f6 <_lx_nor_flash_driver_block_erase+0x92>
 80150c2:	69fa      	ldr	r2, [r7, #28]
 80150c4:	693b      	ldr	r3, [r7, #16]
 80150c6:	429a      	cmp	r2, r3
 80150c8:	d915      	bls.n	80150f6 <_lx_nor_flash_driver_block_erase+0x92>
        {
    
            /* Yes, this cache entry is in the block to be erased so invalidate it.  */
            nor_flash -> lx_nor_flash_extended_cache[i].lx_nor_flash_extended_cache_entry_sector_address =  LX_NULL;
 80150ca:	68f9      	ldr	r1, [r7, #12]
 80150cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80150ce:	4613      	mov	r3, r2
 80150d0:	005b      	lsls	r3, r3, #1
 80150d2:	4413      	add	r3, r2
 80150d4:	009b      	lsls	r3, r3, #2
 80150d6:	440b      	add	r3, r1
 80150d8:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 80150dc:	2200      	movs	r2, #0
 80150de:	601a      	str	r2, [r3, #0]
            nor_flash -> lx_nor_flash_extended_cache[i].lx_nor_flash_extended_cache_entry_access_count =    0;
 80150e0:	68f9      	ldr	r1, [r7, #12]
 80150e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80150e4:	4613      	mov	r3, r2
 80150e6:	005b      	lsls	r3, r3, #1
 80150e8:	4413      	add	r3, r2
 80150ea:	009b      	lsls	r3, r3, #2
 80150ec:	440b      	add	r3, r1
 80150ee:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80150f2:	2200      	movs	r2, #0
 80150f4:	601a      	str	r2, [r3, #0]
    for (i = 0; i < nor_flash -> lx_nor_flash_extended_cache_entries; i++)
 80150f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150f8:	3301      	adds	r3, #1
 80150fa:	627b      	str	r3, [r7, #36]	; 0x24
 80150fc:	68fb      	ldr	r3, [r7, #12]
 80150fe:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 8015102:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015104:	429a      	cmp	r2, r3
 8015106:	d3c6      	bcc.n	8015096 <_lx_nor_flash_driver_block_erase+0x32>
        }
    }
#endif

    /* Call the actual driver block erase function.  */
    status =  (nor_flash -> lx_nor_flash_driver_block_erase)(block, erase_count);
 8015108:	68fb      	ldr	r3, [r7, #12]
 801510a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801510e:	6879      	ldr	r1, [r7, #4]
 8015110:	68b8      	ldr	r0, [r7, #8]
 8015112:	4798      	blx	r3
 8015114:	61b8      	str	r0, [r7, #24]

    /* Return completion status.  */
    return(status);   
 8015116:	69bb      	ldr	r3, [r7, #24]
}
 8015118:	4618      	mov	r0, r3
 801511a:	3728      	adds	r7, #40	; 0x28
 801511c:	46bd      	mov	sp, r7
 801511e:	bd80      	pop	{r7, pc}

08015120 <_lx_nor_flash_driver_read>:
/*  06-02-2021     Bhupendra Naphade        Modified comment(s),          */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UINT  _lx_nor_flash_driver_read(LX_NOR_FLASH *nor_flash, ULONG *flash_address, ULONG *destination, ULONG words)
{
 8015120:	b590      	push	{r4, r7, lr}
 8015122:	b08b      	sub	sp, #44	; 0x2c
 8015124:	af00      	add	r7, sp, #0
 8015126:	60f8      	str	r0, [r7, #12]
 8015128:	60b9      	str	r1, [r7, #8]
 801512a:	607a      	str	r2, [r7, #4]
 801512c:	603b      	str	r3, [r7, #0]
ULONG   cache_offset;
UINT    least_used_cache_entry;


    /* Is the request a whole sector or a partial sector.  */
    if ((words == 1) && (nor_flash -> lx_nor_flash_extended_cache_entries))
 801512e:	683b      	ldr	r3, [r7, #0]
 8015130:	2b01      	cmp	r3, #1
 8015132:	f040 80ce 	bne.w	80152d2 <_lx_nor_flash_driver_read+0x1b2>
 8015136:	68fb      	ldr	r3, [r7, #12]
 8015138:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 801513c:	2b00      	cmp	r3, #0
 801513e:	f000 80c8 	beq.w	80152d2 <_lx_nor_flash_driver_read+0x1b2>

        /* One word request, which implies that it is a NOR flash metadata read.  */
            
            
        /* Initialize the least used cache entry.  */
        least_used_cache_entry =  0;
 8015142:	2300      	movs	r3, #0
 8015144:	623b      	str	r3, [r7, #32]
            
        do
        {    

            /* Loop through the cache entries to see if there is a sector in cache.  */
            for (i = 0; i < nor_flash -> lx_nor_flash_extended_cache_entries; i++)
 8015146:	2300      	movs	r3, #0
 8015148:	627b      	str	r3, [r7, #36]	; 0x24
 801514a:	e06b      	b.n	8015224 <_lx_nor_flash_driver_read+0x104>
            {
        
                /* Search through the cache to find the entry.  */
                
                /* Determine the cache entry addresses.  */
                cache_entry_start =  nor_flash -> lx_nor_flash_extended_cache[i].lx_nor_flash_extended_cache_entry_sector_address;
 801514c:	68f9      	ldr	r1, [r7, #12]
 801514e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015150:	4613      	mov	r3, r2
 8015152:	005b      	lsls	r3, r3, #1
 8015154:	4413      	add	r3, r2
 8015156:	009b      	lsls	r3, r3, #2
 8015158:	440b      	add	r3, r1
 801515a:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 801515e:	681b      	ldr	r3, [r3, #0]
 8015160:	61bb      	str	r3, [r7, #24]
                cache_entry_end =    cache_entry_start + LX_NOR_SECTOR_SIZE;
 8015162:	69bb      	ldr	r3, [r7, #24]
 8015164:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8015168:	613b      	str	r3, [r7, #16]
                
                /* Determine if the flash address in in the cache entry.  */
                if ((cache_entry_start) && (flash_address >= cache_entry_start) && (flash_address < cache_entry_end))
 801516a:	69bb      	ldr	r3, [r7, #24]
 801516c:	2b00      	cmp	r3, #0
 801516e:	d03a      	beq.n	80151e6 <_lx_nor_flash_driver_read+0xc6>
 8015170:	68ba      	ldr	r2, [r7, #8]
 8015172:	69bb      	ldr	r3, [r7, #24]
 8015174:	429a      	cmp	r2, r3
 8015176:	d336      	bcc.n	80151e6 <_lx_nor_flash_driver_read+0xc6>
 8015178:	68ba      	ldr	r2, [r7, #8]
 801517a:	693b      	ldr	r3, [r7, #16]
 801517c:	429a      	cmp	r2, r3
 801517e:	d232      	bcs.n	80151e6 <_lx_nor_flash_driver_read+0xc6>
                {
                
                    /* Yes, we found the entry.  */
                    
                    /* Increment the accessed count.  */
                    nor_flash -> lx_nor_flash_extended_cache[i].lx_nor_flash_extended_cache_entry_access_count++;
 8015180:	68f9      	ldr	r1, [r7, #12]
 8015182:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015184:	4613      	mov	r3, r2
 8015186:	005b      	lsls	r3, r3, #1
 8015188:	4413      	add	r3, r2
 801518a:	009b      	lsls	r3, r3, #2
 801518c:	440b      	add	r3, r1
 801518e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8015192:	681b      	ldr	r3, [r3, #0]
 8015194:	1c59      	adds	r1, r3, #1
 8015196:	68f8      	ldr	r0, [r7, #12]
 8015198:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801519a:	4613      	mov	r3, r2
 801519c:	005b      	lsls	r3, r3, #1
 801519e:	4413      	add	r3, r2
 80151a0:	009b      	lsls	r3, r3, #2
 80151a2:	4403      	add	r3, r0
 80151a4:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80151a8:	6019      	str	r1, [r3, #0]
                    
                    /* Calculate the offset into the cache entry.  */
                    cache_offset =  (ULONG)(flash_address - cache_entry_start);
 80151aa:	68ba      	ldr	r2, [r7, #8]
 80151ac:	69bb      	ldr	r3, [r7, #24]
 80151ae:	1ad3      	subs	r3, r2, r3
 80151b0:	109b      	asrs	r3, r3, #2
 80151b2:	61fb      	str	r3, [r7, #28]
                    
                    /* Copy the word from the cache.  */
                    *destination =  *(nor_flash -> lx_nor_flash_extended_cache[i].lx_nor_flash_extended_cache_entry_sector_memory + cache_offset);
 80151b4:	68f9      	ldr	r1, [r7, #12]
 80151b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80151b8:	4613      	mov	r3, r2
 80151ba:	005b      	lsls	r3, r3, #1
 80151bc:	4413      	add	r3, r2
 80151be:	009b      	lsls	r3, r3, #2
 80151c0:	440b      	add	r3, r1
 80151c2:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 80151c6:	681a      	ldr	r2, [r3, #0]
 80151c8:	69fb      	ldr	r3, [r7, #28]
 80151ca:	009b      	lsls	r3, r3, #2
 80151cc:	4413      	add	r3, r2
 80151ce:	681a      	ldr	r2, [r3, #0]
 80151d0:	687b      	ldr	r3, [r7, #4]
 80151d2:	601a      	str	r2, [r3, #0]
                    
                    /* Increment the number of cache hits.  */
                    nor_flash -> lx_nor_flash_extended_cache_hits++;
 80151d4:	68fb      	ldr	r3, [r7, #12]
 80151d6:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 80151da:	1c5a      	adds	r2, r3, #1
 80151dc:	68fb      	ldr	r3, [r7, #12]
 80151de:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
                    
                    /* Return success.  */
                    return(LX_SUCCESS);                    
 80151e2:	2300      	movs	r3, #0
 80151e4:	e07e      	b.n	80152e4 <_lx_nor_flash_driver_read+0x1c4>
                }
                else
                {
                    
                    /* Determine if we have a new least used sector.  */
                    if (i != least_used_cache_entry)
 80151e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80151e8:	6a3b      	ldr	r3, [r7, #32]
 80151ea:	429a      	cmp	r2, r3
 80151ec:	d017      	beq.n	801521e <_lx_nor_flash_driver_read+0xfe>
                    {
                    
                        /* Determine if this entry has a smaller accessed count.  */
                        if (nor_flash -> lx_nor_flash_extended_cache[i].lx_nor_flash_extended_cache_entry_access_count <
 80151ee:	68f9      	ldr	r1, [r7, #12]
 80151f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80151f2:	4613      	mov	r3, r2
 80151f4:	005b      	lsls	r3, r3, #1
 80151f6:	4413      	add	r3, r2
 80151f8:	009b      	lsls	r3, r3, #2
 80151fa:	440b      	add	r3, r1
 80151fc:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8015200:	6819      	ldr	r1, [r3, #0]
                            nor_flash -> lx_nor_flash_extended_cache[least_used_cache_entry].lx_nor_flash_extended_cache_entry_access_count)
 8015202:	68f8      	ldr	r0, [r7, #12]
 8015204:	6a3a      	ldr	r2, [r7, #32]
 8015206:	4613      	mov	r3, r2
 8015208:	005b      	lsls	r3, r3, #1
 801520a:	4413      	add	r3, r2
 801520c:	009b      	lsls	r3, r3, #2
 801520e:	4403      	add	r3, r0
 8015210:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8015214:	681b      	ldr	r3, [r3, #0]
                        if (nor_flash -> lx_nor_flash_extended_cache[i].lx_nor_flash_extended_cache_entry_access_count <
 8015216:	4299      	cmp	r1, r3
 8015218:	d201      	bcs.n	801521e <_lx_nor_flash_driver_read+0xfe>
                        {
                        
                            /* New least used entry.  */
                            least_used_cache_entry =  i;
 801521a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801521c:	623b      	str	r3, [r7, #32]
            for (i = 0; i < nor_flash -> lx_nor_flash_extended_cache_entries; i++)
 801521e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015220:	3301      	adds	r3, #1
 8015222:	627b      	str	r3, [r7, #36]	; 0x24
 8015224:	68fb      	ldr	r3, [r7, #12]
 8015226:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 801522a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801522c:	429a      	cmp	r2, r3
 801522e:	d38d      	bcc.n	801514c <_lx_nor_flash_driver_read+0x2c>
                    }
                }
            }

            /* Now read in the sector into the cache.  */
            cache_offset =  (ULONG)(flash_address - nor_flash -> lx_nor_flash_base_address);
 8015230:	68fb      	ldr	r3, [r7, #12]
 8015232:	695b      	ldr	r3, [r3, #20]
 8015234:	68ba      	ldr	r2, [r7, #8]
 8015236:	1ad3      	subs	r3, r2, r3
 8015238:	109b      	asrs	r3, r3, #2
 801523a:	61fb      	str	r3, [r7, #28]
            cache_offset =  cache_offset & ~((ULONG) (LX_NOR_SECTOR_SIZE-1));
 801523c:	69fb      	ldr	r3, [r7, #28]
 801523e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8015242:	61fb      	str	r3, [r7, #28]
            cache_entry_start =  nor_flash -> lx_nor_flash_base_address + cache_offset;
 8015244:	68fb      	ldr	r3, [r7, #12]
 8015246:	695a      	ldr	r2, [r3, #20]
 8015248:	69fb      	ldr	r3, [r7, #28]
 801524a:	009b      	lsls	r3, r3, #2
 801524c:	4413      	add	r3, r2
 801524e:	61bb      	str	r3, [r7, #24]
            
            /* Call the actual driver read function.  */
            status =  (nor_flash -> lx_nor_flash_driver_read)(cache_entry_start, 
 8015250:	68fb      	ldr	r3, [r7, #12]
 8015252:	f8d3 4090 	ldr.w	r4, [r3, #144]	; 0x90
 8015256:	68f9      	ldr	r1, [r7, #12]
 8015258:	6a3a      	ldr	r2, [r7, #32]
 801525a:	4613      	mov	r3, r2
 801525c:	005b      	lsls	r3, r3, #1
 801525e:	4413      	add	r3, r2
 8015260:	009b      	lsls	r3, r3, #2
 8015262:	440b      	add	r3, r1
 8015264:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 8015268:	681b      	ldr	r3, [r3, #0]
 801526a:	2280      	movs	r2, #128	; 0x80
 801526c:	4619      	mov	r1, r3
 801526e:	69b8      	ldr	r0, [r7, #24]
 8015270:	47a0      	blx	r4
 8015272:	6178      	str	r0, [r7, #20]
                            nor_flash -> lx_nor_flash_extended_cache[least_used_cache_entry].lx_nor_flash_extended_cache_entry_sector_memory, 
                            LX_NOR_SECTOR_SIZE);
            
            /* Determine if there was an error.  */
            if (status != LX_SUCCESS)
 8015274:	697b      	ldr	r3, [r7, #20]
 8015276:	2b00      	cmp	r3, #0
 8015278:	d001      	beq.n	801527e <_lx_nor_flash_driver_read+0x15e>
            {
            
                /* Return the error to the caller.  */
                return(status);
 801527a:	697b      	ldr	r3, [r7, #20]
 801527c:	e032      	b.n	80152e4 <_lx_nor_flash_driver_read+0x1c4>
            }
            
            /* Setup the cache entry.  */
            nor_flash -> lx_nor_flash_extended_cache[least_used_cache_entry].lx_nor_flash_extended_cache_entry_sector_address =  cache_entry_start;
 801527e:	68f9      	ldr	r1, [r7, #12]
 8015280:	6a3a      	ldr	r2, [r7, #32]
 8015282:	4613      	mov	r3, r2
 8015284:	005b      	lsls	r3, r3, #1
 8015286:	4413      	add	r3, r2
 8015288:	009b      	lsls	r3, r3, #2
 801528a:	440b      	add	r3, r1
 801528c:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 8015290:	69ba      	ldr	r2, [r7, #24]
 8015292:	601a      	str	r2, [r3, #0]
            nor_flash -> lx_nor_flash_extended_cache[least_used_cache_entry].lx_nor_flash_extended_cache_entry_access_count =    0;
 8015294:	68f9      	ldr	r1, [r7, #12]
 8015296:	6a3a      	ldr	r2, [r7, #32]
 8015298:	4613      	mov	r3, r2
 801529a:	005b      	lsls	r3, r3, #1
 801529c:	4413      	add	r3, r2
 801529e:	009b      	lsls	r3, r3, #2
 80152a0:	440b      	add	r3, r1
 80152a2:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80152a6:	2200      	movs	r2, #0
 80152a8:	601a      	str	r2, [r3, #0]
            
            /* Increment the number of cache misses.  */
            nor_flash -> lx_nor_flash_extended_cache_misses++;
 80152aa:	68fb      	ldr	r3, [r7, #12]
 80152ac:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 80152b0:	1c5a      	adds	r2, r3, #1
 80152b2:	68fb      	ldr	r3, [r7, #12]
 80152b4:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
            
            /* Decrement the number of cache hits, so that the increment that will happen next will be cancelled out.  */
            nor_flash -> lx_nor_flash_extended_cache_hits--;
 80152b8:	68fb      	ldr	r3, [r7, #12]
 80152ba:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 80152be:	1e5a      	subs	r2, r3, #1
 80152c0:	68fb      	ldr	r3, [r7, #12]
 80152c2:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
            
        } while (status == LX_SUCCESS);
 80152c6:	697b      	ldr	r3, [r7, #20]
 80152c8:	2b00      	cmp	r3, #0
 80152ca:	f43f af3c 	beq.w	8015146 <_lx_nor_flash_driver_read+0x26>
        
        /* Return success.  */
        return(LX_SUCCESS);
 80152ce:	2300      	movs	r3, #0
 80152d0:	e008      	b.n	80152e4 <_lx_nor_flash_driver_read+0x1c4>
    }
    else
    {
    
        /* Call the actual driver read function.  */
        status =  (nor_flash -> lx_nor_flash_driver_read)(flash_address, destination, words);
 80152d2:	68fb      	ldr	r3, [r7, #12]
 80152d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80152d8:	683a      	ldr	r2, [r7, #0]
 80152da:	6879      	ldr	r1, [r7, #4]
 80152dc:	68b8      	ldr	r0, [r7, #8]
 80152de:	4798      	blx	r3
 80152e0:	6178      	str	r0, [r7, #20]

        /* Return completion status.  */
        return(status);   
 80152e2:	697b      	ldr	r3, [r7, #20]
    status =  (nor_flash -> lx_nor_flash_driver_read)(flash_address, destination, words);

    /* Return completion status.  */
    return(status);   
#endif
}
 80152e4:	4618      	mov	r0, r3
 80152e6:	372c      	adds	r7, #44	; 0x2c
 80152e8:	46bd      	mov	sp, r7
 80152ea:	bd90      	pop	{r4, r7, pc}

080152ec <_lx_nor_flash_driver_write>:
/*  06-02-2021     Bhupendra Naphade        Modified comment(s),          */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UINT  _lx_nor_flash_driver_write(LX_NOR_FLASH *nor_flash, ULONG *flash_address, ULONG *source, ULONG words)
{
 80152ec:	b580      	push	{r7, lr}
 80152ee:	b08a      	sub	sp, #40	; 0x28
 80152f0:	af00      	add	r7, sp, #0
 80152f2:	60f8      	str	r0, [r7, #12]
 80152f4:	60b9      	str	r1, [r7, #8]
 80152f6:	607a      	str	r2, [r7, #4]
 80152f8:	603b      	str	r3, [r7, #0]
ULONG   *cache_entry_end;
ULONG   cache_offset;


    /* Is the request a whole sector or a partial sector.  */
    if ((words == 1) && (nor_flash -> lx_nor_flash_extended_cache_entries))
 80152fa:	683b      	ldr	r3, [r7, #0]
 80152fc:	2b01      	cmp	r3, #1
 80152fe:	d140      	bne.n	8015382 <_lx_nor_flash_driver_write+0x96>
 8015300:	68fb      	ldr	r3, [r7, #12]
 8015302:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 8015306:	2b00      	cmp	r3, #0
 8015308:	d03b      	beq.n	8015382 <_lx_nor_flash_driver_write+0x96>
    {

        /* One word request, which implies that it is a NOR flash metadata write.  */

        /* Loop through the cache entries to see if there is a sector in cache.  */
        for (i = 0; i < nor_flash -> lx_nor_flash_extended_cache_entries; i++)
 801530a:	2300      	movs	r3, #0
 801530c:	627b      	str	r3, [r7, #36]	; 0x24
 801530e:	e032      	b.n	8015376 <_lx_nor_flash_driver_write+0x8a>
        {
        
            /* Search through the cache to see if there is a cache entry.  */
                
            /* Determine the cache entry addresses.  */
            cache_entry_start =  nor_flash -> lx_nor_flash_extended_cache[i].lx_nor_flash_extended_cache_entry_sector_address;
 8015310:	68f9      	ldr	r1, [r7, #12]
 8015312:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015314:	4613      	mov	r3, r2
 8015316:	005b      	lsls	r3, r3, #1
 8015318:	4413      	add	r3, r2
 801531a:	009b      	lsls	r3, r3, #2
 801531c:	440b      	add	r3, r1
 801531e:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 8015322:	681b      	ldr	r3, [r3, #0]
 8015324:	623b      	str	r3, [r7, #32]
            cache_entry_end =    cache_entry_start + LX_NOR_SECTOR_SIZE;
 8015326:	6a3b      	ldr	r3, [r7, #32]
 8015328:	f503 7300 	add.w	r3, r3, #512	; 0x200
 801532c:	61fb      	str	r3, [r7, #28]
                
            /* Determine if the flash address in in the cache entry.  */
            if ((cache_entry_start) && (flash_address >= cache_entry_start) && (flash_address < cache_entry_end))
 801532e:	6a3b      	ldr	r3, [r7, #32]
 8015330:	2b00      	cmp	r3, #0
 8015332:	d01d      	beq.n	8015370 <_lx_nor_flash_driver_write+0x84>
 8015334:	68ba      	ldr	r2, [r7, #8]
 8015336:	6a3b      	ldr	r3, [r7, #32]
 8015338:	429a      	cmp	r2, r3
 801533a:	d319      	bcc.n	8015370 <_lx_nor_flash_driver_write+0x84>
 801533c:	68ba      	ldr	r2, [r7, #8]
 801533e:	69fb      	ldr	r3, [r7, #28]
 8015340:	429a      	cmp	r2, r3
 8015342:	d215      	bcs.n	8015370 <_lx_nor_flash_driver_write+0x84>
            {
                
                /* Yes, we found the entry.  */
                    
                /* Calculate the offset into the cache entry.  */
                cache_offset =  (ULONG)(flash_address - cache_entry_start);
 8015344:	68ba      	ldr	r2, [r7, #8]
 8015346:	6a3b      	ldr	r3, [r7, #32]
 8015348:	1ad3      	subs	r3, r2, r3
 801534a:	109b      	asrs	r3, r3, #2
 801534c:	61bb      	str	r3, [r7, #24]
                    
                /* Copy the word into the cache.  */
                *(nor_flash -> lx_nor_flash_extended_cache[i].lx_nor_flash_extended_cache_entry_sector_memory + cache_offset) =  *source;
 801534e:	68f9      	ldr	r1, [r7, #12]
 8015350:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015352:	4613      	mov	r3, r2
 8015354:	005b      	lsls	r3, r3, #1
 8015356:	4413      	add	r3, r2
 8015358:	009b      	lsls	r3, r3, #2
 801535a:	440b      	add	r3, r1
 801535c:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 8015360:	681a      	ldr	r2, [r3, #0]
 8015362:	69bb      	ldr	r3, [r7, #24]
 8015364:	009b      	lsls	r3, r3, #2
 8015366:	4413      	add	r3, r2
 8015368:	687a      	ldr	r2, [r7, #4]
 801536a:	6812      	ldr	r2, [r2, #0]
 801536c:	601a      	str	r2, [r3, #0]
                
                /* Get out of the loop.  */
                break;
 801536e:	e008      	b.n	8015382 <_lx_nor_flash_driver_write+0x96>
        for (i = 0; i < nor_flash -> lx_nor_flash_extended_cache_entries; i++)
 8015370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015372:	3301      	adds	r3, #1
 8015374:	627b      	str	r3, [r7, #36]	; 0x24
 8015376:	68fb      	ldr	r3, [r7, #12]
 8015378:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 801537c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801537e:	429a      	cmp	r2, r3
 8015380:	d3c6      	bcc.n	8015310 <_lx_nor_flash_driver_write+0x24>
            }
        }
    }
    
    /* In any case, call the actual driver write function.  */
    status =  (nor_flash -> lx_nor_flash_driver_write)(flash_address, source, words);
 8015382:	68fb      	ldr	r3, [r7, #12]
 8015384:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8015388:	683a      	ldr	r2, [r7, #0]
 801538a:	6879      	ldr	r1, [r7, #4]
 801538c:	68b8      	ldr	r0, [r7, #8]
 801538e:	4798      	blx	r3
 8015390:	6178      	str	r0, [r7, #20]
    
    /* Return completion status.  */
    return(status);   
 8015392:	697b      	ldr	r3, [r7, #20]
    status =  (nor_flash -> lx_nor_flash_driver_write)(flash_address, source, words);
    
    /* Return completion status.  */
    return(status);   
#endif
}
 8015394:	4618      	mov	r0, r3
 8015396:	3728      	adds	r7, #40	; 0x28
 8015398:	46bd      	mov	sp, r7
 801539a:	bd80      	pop	{r7, pc}

0801539c <_lx_nor_flash_logical_sector_find>:
/*  06-02-2021     Bhupendra Naphade        Modified comment(s),          */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UINT  _lx_nor_flash_logical_sector_find(LX_NOR_FLASH *nor_flash, ULONG logical_sector, ULONG superceded_check, ULONG **physical_sector_map_entry, ULONG **physical_sector_address)
{
 801539c:	b590      	push	{r4, r7, lr}
 801539e:	b095      	sub	sp, #84	; 0x54
 80153a0:	af00      	add	r7, sp, #0
 80153a2:	60f8      	str	r0, [r7, #12]
 80153a4:	60b9      	str	r1, [r7, #8]
 80153a6:	607a      	str	r2, [r7, #4]
 80153a8:	603b      	str	r3, [r7, #0]
ULONG                               mapped_sectors;
ULONG                               total_blocks;
ULONG                               total_sectors;
ULONG                               i, j;
ULONG                               search_start;
LX_NOR_SECTOR_MAPPING_CACHE_ENTRY   *sector_mapping_cache_entry_ptr = LX_NULL;
 80153aa:	2300      	movs	r3, #0
 80153ac:	637b      	str	r3, [r7, #52]	; 0x34
UINT                                status;
#endif


    /* Initialize the return parameters.  */
    *physical_sector_map_entry =  (ULONG *) 0;
 80153ae:	683b      	ldr	r3, [r7, #0]
 80153b0:	2200      	movs	r2, #0
 80153b2:	601a      	str	r2, [r3, #0]
    *physical_sector_address =    (ULONG *) 0;
 80153b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80153b6:	2200      	movs	r2, #0
 80153b8:	601a      	str	r2, [r3, #0]
    
    /* Determine if there are any mapped physical sectors.  */
    if (nor_flash -> lx_nor_flash_mapped_physical_sectors == 0)
 80153ba:	68fb      	ldr	r3, [r7, #12]
 80153bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80153be:	2b00      	cmp	r3, #0
 80153c0:	d101      	bne.n	80153c6 <_lx_nor_flash_logical_sector_find+0x2a>
    {

        /* No mapped sector so nothing can be found!.  */
        return(LX_SECTOR_NOT_FOUND);
 80153c2:	2303      	movs	r3, #3
 80153c4:	e20f      	b.n	80157e6 <_lx_nor_flash_logical_sector_find+0x44a>
    }

    /* Determine if the sector mapping cache is enabled.  */
    if (nor_flash -> lx_nor_flash_sector_mapping_cache_enabled)
 80153c6:	68fb      	ldr	r3, [r7, #12]
 80153c8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80153cc:	2b00      	cmp	r3, #0
 80153ce:	f000 80d8 	beq.w	8015582 <_lx_nor_flash_logical_sector_find+0x1e6>
    {
    
        /* Calculate the starting index of the sector cache for this sector entry.  */
        i =  (logical_sector & LX_NOR_SECTOR_MAPPING_CACHE_HASH_MASK) * LX_NOR_SECTOR_MAPPING_CACHE_DEPTH;
 80153d2:	68bb      	ldr	r3, [r7, #8]
 80153d4:	f003 0303 	and.w	r3, r3, #3
 80153d8:	009b      	lsls	r3, r3, #2
 80153da:	643b      	str	r3, [r7, #64]	; 0x40

        /* Build a pointer to the cache entry.  */
        sector_mapping_cache_entry_ptr =  &nor_flash -> lx_nor_flash_sector_mapping_cache[i];
 80153dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80153de:	4613      	mov	r3, r2
 80153e0:	005b      	lsls	r3, r3, #1
 80153e2:	4413      	add	r3, r2
 80153e4:	009b      	lsls	r3, r3, #2
 80153e6:	33a8      	adds	r3, #168	; 0xa8
 80153e8:	68fa      	ldr	r2, [r7, #12]
 80153ea:	4413      	add	r3, r2
 80153ec:	3304      	adds	r3, #4
 80153ee:	637b      	str	r3, [r7, #52]	; 0x34

        /* Determine if the sector is in the sector mapping cache - assuming the depth of the sector 
           mapping cache is LX_NOR_SECTOR_MAPPING_CACHE_DEPTH entries.  */
        if ((sector_mapping_cache_entry_ptr -> lx_nor_sector_mapping_cache_logical_sector) == (logical_sector | LX_NOR_SECTOR_MAPPING_CACHE_ENTRY_VALID))
 80153f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80153f2:	681a      	ldr	r2, [r3, #0]
 80153f4:	68bb      	ldr	r3, [r7, #8]
 80153f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80153fa:	429a      	cmp	r2, r3
 80153fc:	d10e      	bne.n	801541c <_lx_nor_flash_logical_sector_find+0x80>
        {

            /* Increment the sector mapping cache hit counter.  */
            nor_flash -> lx_nor_flash_sector_mapping_cache_hits++;
 80153fe:	68fb      	ldr	r3, [r7, #12]
 8015400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015402:	1c5a      	adds	r2, r3, #1
 8015404:	68fb      	ldr	r3, [r7, #12]
 8015406:	655a      	str	r2, [r3, #84]	; 0x54

            /* Yes, return the cached values associated with the sector.  */
            *physical_sector_map_entry =  sector_mapping_cache_entry_ptr -> lx_nor_sector_mapping_cache_physical_sector_map_entry;
 8015408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801540a:	685a      	ldr	r2, [r3, #4]
 801540c:	683b      	ldr	r3, [r7, #0]
 801540e:	601a      	str	r2, [r3, #0]
            *physical_sector_address =    sector_mapping_cache_entry_ptr -> lx_nor_sector_mapping_cache_physical_sector_address;
 8015410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015412:	689a      	ldr	r2, [r3, #8]
 8015414:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015416:	601a      	str	r2, [r3, #0]

            /* Don't move anything since we found the entry at the top.  */

            /* Return a successful status.  */
            return(LX_SUCCESS);
 8015418:	2300      	movs	r3, #0
 801541a:	e1e4      	b.n	80157e6 <_lx_nor_flash_logical_sector_find+0x44a>
        }
        else if (((sector_mapping_cache_entry_ptr + 1) -> lx_nor_sector_mapping_cache_logical_sector) == (logical_sector | LX_NOR_SECTOR_MAPPING_CACHE_ENTRY_VALID))
 801541c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801541e:	330c      	adds	r3, #12
 8015420:	681a      	ldr	r2, [r3, #0]
 8015422:	68bb      	ldr	r3, [r7, #8]
 8015424:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8015428:	429a      	cmp	r2, r3
 801542a:	d127      	bne.n	801547c <_lx_nor_flash_logical_sector_find+0xe0>
        {

            /* Increment the sector mapping cache hit counter.  */
            nor_flash -> lx_nor_flash_sector_mapping_cache_hits++;
 801542c:	68fb      	ldr	r3, [r7, #12]
 801542e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015430:	1c5a      	adds	r2, r3, #1
 8015432:	68fb      	ldr	r3, [r7, #12]
 8015434:	655a      	str	r2, [r3, #84]	; 0x54

            /* Yes, return the cached values associated with the sector.  */
            *physical_sector_map_entry =  (sector_mapping_cache_entry_ptr + 1) -> lx_nor_sector_mapping_cache_physical_sector_map_entry;
 8015436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015438:	330c      	adds	r3, #12
 801543a:	685a      	ldr	r2, [r3, #4]
 801543c:	683b      	ldr	r3, [r7, #0]
 801543e:	601a      	str	r2, [r3, #0]
            *physical_sector_address =    (sector_mapping_cache_entry_ptr + 1) -> lx_nor_sector_mapping_cache_physical_sector_address;
 8015440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015442:	330c      	adds	r3, #12
 8015444:	689a      	ldr	r2, [r3, #8]
 8015446:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015448:	601a      	str	r2, [r3, #0]

            /* Just swap the first and second entry.  */
            temp_sector_mapping_cache_entry =        *(sector_mapping_cache_entry_ptr);
 801544a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801544c:	f107 0310 	add.w	r3, r7, #16
 8015450:	ca07      	ldmia	r2, {r0, r1, r2}
 8015452:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            *(sector_mapping_cache_entry_ptr) =      *(sector_mapping_cache_entry_ptr + 1);
 8015456:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015458:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801545a:	4614      	mov	r4, r2
 801545c:	330c      	adds	r3, #12
 801545e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8015462:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            *(sector_mapping_cache_entry_ptr + 1) =  temp_sector_mapping_cache_entry;
 8015466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015468:	330c      	adds	r3, #12
 801546a:	461c      	mov	r4, r3
 801546c:	f107 0310 	add.w	r3, r7, #16
 8015470:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8015474:	e884 0007 	stmia.w	r4, {r0, r1, r2}

            /* Return a successful status.  */
            return(LX_SUCCESS);
 8015478:	2300      	movs	r3, #0
 801547a:	e1b4      	b.n	80157e6 <_lx_nor_flash_logical_sector_find+0x44a>
        }
        else if (((sector_mapping_cache_entry_ptr + 2) -> lx_nor_sector_mapping_cache_logical_sector) == (logical_sector | LX_NOR_SECTOR_MAPPING_CACHE_ENTRY_VALID))
 801547c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801547e:	3318      	adds	r3, #24
 8015480:	681a      	ldr	r2, [r3, #0]
 8015482:	68bb      	ldr	r3, [r7, #8]
 8015484:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8015488:	429a      	cmp	r2, r3
 801548a:	d131      	bne.n	80154f0 <_lx_nor_flash_logical_sector_find+0x154>
        {

            /* Increment the sector mapping cache hit counter.  */
            nor_flash -> lx_nor_flash_sector_mapping_cache_hits++;
 801548c:	68fb      	ldr	r3, [r7, #12]
 801548e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015490:	1c5a      	adds	r2, r3, #1
 8015492:	68fb      	ldr	r3, [r7, #12]
 8015494:	655a      	str	r2, [r3, #84]	; 0x54

            /* Yes, return the cached value.  */
            *physical_sector_map_entry =  (sector_mapping_cache_entry_ptr + 2) -> lx_nor_sector_mapping_cache_physical_sector_map_entry;
 8015496:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015498:	3318      	adds	r3, #24
 801549a:	685a      	ldr	r2, [r3, #4]
 801549c:	683b      	ldr	r3, [r7, #0]
 801549e:	601a      	str	r2, [r3, #0]
            *physical_sector_address =    (sector_mapping_cache_entry_ptr + 2) -> lx_nor_sector_mapping_cache_physical_sector_address;
 80154a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80154a2:	3318      	adds	r3, #24
 80154a4:	689a      	ldr	r2, [r3, #8]
 80154a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80154a8:	601a      	str	r2, [r3, #0]

            /* Move the third entry to the top and the first two entries down.  */
            temp_sector_mapping_cache_entry =        *(sector_mapping_cache_entry_ptr);
 80154aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80154ac:	f107 0310 	add.w	r3, r7, #16
 80154b0:	ca07      	ldmia	r2, {r0, r1, r2}
 80154b2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            *(sector_mapping_cache_entry_ptr) =      *(sector_mapping_cache_entry_ptr + 2);
 80154b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80154b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80154ba:	4614      	mov	r4, r2
 80154bc:	3318      	adds	r3, #24
 80154be:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80154c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            *(sector_mapping_cache_entry_ptr + 2) =  *(sector_mapping_cache_entry_ptr + 1);
 80154c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80154c8:	f103 0218 	add.w	r2, r3, #24
 80154cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80154ce:	4614      	mov	r4, r2
 80154d0:	330c      	adds	r3, #12
 80154d2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80154d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            *(sector_mapping_cache_entry_ptr + 1) =  temp_sector_mapping_cache_entry;
 80154da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80154dc:	330c      	adds	r3, #12
 80154de:	461c      	mov	r4, r3
 80154e0:	f107 0310 	add.w	r3, r7, #16
 80154e4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80154e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}

            /* Return a successful status.  */
            return(LX_SUCCESS);
 80154ec:	2300      	movs	r3, #0
 80154ee:	e17a      	b.n	80157e6 <_lx_nor_flash_logical_sector_find+0x44a>
        }
        else if (((sector_mapping_cache_entry_ptr + 3) -> lx_nor_sector_mapping_cache_logical_sector) == (logical_sector | LX_NOR_SECTOR_MAPPING_CACHE_ENTRY_VALID))
 80154f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80154f2:	3324      	adds	r3, #36	; 0x24
 80154f4:	681a      	ldr	r2, [r3, #0]
 80154f6:	68bb      	ldr	r3, [r7, #8]
 80154f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80154fc:	429a      	cmp	r2, r3
 80154fe:	d13b      	bne.n	8015578 <_lx_nor_flash_logical_sector_find+0x1dc>
        {

            /* Increment the sector mapping cache hit counter.  */
            nor_flash -> lx_nor_flash_sector_mapping_cache_hits++;
 8015500:	68fb      	ldr	r3, [r7, #12]
 8015502:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015504:	1c5a      	adds	r2, r3, #1
 8015506:	68fb      	ldr	r3, [r7, #12]
 8015508:	655a      	str	r2, [r3, #84]	; 0x54

            /* Yes, return the cached value.  */
            *physical_sector_map_entry =  (sector_mapping_cache_entry_ptr + 3) -> lx_nor_sector_mapping_cache_physical_sector_map_entry;
 801550a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801550c:	3324      	adds	r3, #36	; 0x24
 801550e:	685a      	ldr	r2, [r3, #4]
 8015510:	683b      	ldr	r3, [r7, #0]
 8015512:	601a      	str	r2, [r3, #0]
            *physical_sector_address =    (sector_mapping_cache_entry_ptr + 3) -> lx_nor_sector_mapping_cache_physical_sector_address;
 8015514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015516:	3324      	adds	r3, #36	; 0x24
 8015518:	689a      	ldr	r2, [r3, #8]
 801551a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801551c:	601a      	str	r2, [r3, #0]

            /* Move the last entry to the top and the first three entries down.  */
            temp_sector_mapping_cache_entry =        *(sector_mapping_cache_entry_ptr);
 801551e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015520:	f107 0310 	add.w	r3, r7, #16
 8015524:	ca07      	ldmia	r2, {r0, r1, r2}
 8015526:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            *(sector_mapping_cache_entry_ptr) =      *(sector_mapping_cache_entry_ptr + 3);
 801552a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801552c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801552e:	4614      	mov	r4, r2
 8015530:	3324      	adds	r3, #36	; 0x24
 8015532:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8015536:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            *(sector_mapping_cache_entry_ptr + 3) =  *(sector_mapping_cache_entry_ptr + 2);
 801553a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801553c:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8015540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015542:	4614      	mov	r4, r2
 8015544:	3318      	adds	r3, #24
 8015546:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801554a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            *(sector_mapping_cache_entry_ptr + 2) =  *(sector_mapping_cache_entry_ptr + 1);
 801554e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015550:	f103 0218 	add.w	r2, r3, #24
 8015554:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015556:	4614      	mov	r4, r2
 8015558:	330c      	adds	r3, #12
 801555a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801555e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            *(sector_mapping_cache_entry_ptr + 1) =  temp_sector_mapping_cache_entry;
 8015562:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015564:	330c      	adds	r3, #12
 8015566:	461c      	mov	r4, r3
 8015568:	f107 0310 	add.w	r3, r7, #16
 801556c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8015570:	e884 0007 	stmia.w	r4, {r0, r1, r2}

            /* Return a successful status.  */
            return(LX_SUCCESS);
 8015574:	2300      	movs	r3, #0
 8015576:	e136      	b.n	80157e6 <_lx_nor_flash_logical_sector_find+0x44a>
        }
    
        /* If we get here, we have a cache miss so increment the counter before we fall through the loop.  */
        nor_flash -> lx_nor_flash_sector_mapping_cache_misses++;
 8015578:	68fb      	ldr	r3, [r7, #12]
 801557a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801557c:	1c5a      	adds	r2, r3, #1
 801557e:	68fb      	ldr	r3, [r7, #12]
 8015580:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Setup the total number of mapped sectors.  */
    mapped_sectors =  nor_flash -> lx_nor_flash_mapped_physical_sectors;
 8015582:	68fb      	ldr	r3, [r7, #12]
 8015584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015586:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Start searching from the last found block.  */
    i =  nor_flash -> lx_nor_flash_found_block_search;
 8015588:	68fb      	ldr	r3, [r7, #12]
 801558a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801558c:	643b      	str	r3, [r7, #64]	; 0x40

    /* Setup the starting sector to look at.  */
    j =  nor_flash -> lx_nor_flash_found_sector_search;
 801558e:	68fb      	ldr	r3, [r7, #12]
 8015590:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015592:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Pickup the total number of blocks.  */
    total_blocks =  nor_flash -> lx_nor_flash_total_blocks;
 8015594:	68fb      	ldr	r3, [r7, #12]
 8015596:	685b      	ldr	r3, [r3, #4]
 8015598:	64bb      	str	r3, [r7, #72]	; 0x48

    /* Loop through the blocks to attempt to find the mapped logical sector.  */
    while (total_blocks--) 
 801559a:	e11b      	b.n	80157d4 <_lx_nor_flash_logical_sector_find+0x438>
    {

        /* Setup the block word pointer to the first word of the search block.  */
        block_word_ptr =  (nor_flash -> lx_nor_flash_base_address + (i * nor_flash -> lx_nor_flash_words_per_block));
 801559c:	68fb      	ldr	r3, [r7, #12]
 801559e:	695a      	ldr	r2, [r3, #20]
 80155a0:	68fb      	ldr	r3, [r7, #12]
 80155a2:	689b      	ldr	r3, [r3, #8]
 80155a4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80155a6:	fb01 f303 	mul.w	r3, r1, r3
 80155aa:	009b      	lsls	r3, r3, #2
 80155ac:	4413      	add	r3, r2
 80155ae:	633b      	str	r3, [r7, #48]	; 0x30
#ifdef LX_DIRECT_READ
        
        /* Read the word directly.  */
        min_logical_sector =  *(block_word_ptr + LX_NOR_FLASH_MIN_LOGICAL_SECTOR_OFFSET);
#else
        status =  _lx_nor_flash_driver_read(nor_flash, block_word_ptr + LX_NOR_FLASH_MIN_LOGICAL_SECTOR_OFFSET, &min_logical_sector, 1);
 80155b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80155b2:	1d19      	adds	r1, r3, #4
 80155b4:	f107 0220 	add.w	r2, r7, #32
 80155b8:	2301      	movs	r3, #1
 80155ba:	68f8      	ldr	r0, [r7, #12]
 80155bc:	f7ff fdb0 	bl	8015120 <_lx_nor_flash_driver_read>
 80155c0:	62f8      	str	r0, [r7, #44]	; 0x2c

        /* Check for an error from flash driver. Drivers should never return an error..  */
        if (status)
 80155c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155c4:	2b00      	cmp	r3, #0
 80155c6:	d005      	beq.n	80155d4 <_lx_nor_flash_logical_sector_find+0x238>
        {
        
            /* Call system error handler.  */
            _lx_nor_flash_system_error(nor_flash, status);
 80155c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80155ca:	68f8      	ldr	r0, [r7, #12]
 80155cc:	f001 f930 	bl	8016830 <_lx_nor_flash_system_error>

            /* Return the error.  */
            return(status);
 80155d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155d2:	e108      	b.n	80157e6 <_lx_nor_flash_logical_sector_find+0x44a>
#ifdef LX_DIRECT_READ
        
        /* Read the word directly.  */
        max_logical_sector =  *(block_word_ptr + LX_NOR_FLASH_MAX_LOGICAL_SECTOR_OFFSET);
#else
        status =  _lx_nor_flash_driver_read(nor_flash, block_word_ptr + LX_NOR_FLASH_MAX_LOGICAL_SECTOR_OFFSET, &max_logical_sector, 1);
 80155d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80155d6:	f103 0108 	add.w	r1, r3, #8
 80155da:	f107 021c 	add.w	r2, r7, #28
 80155de:	2301      	movs	r3, #1
 80155e0:	68f8      	ldr	r0, [r7, #12]
 80155e2:	f7ff fd9d 	bl	8015120 <_lx_nor_flash_driver_read>
 80155e6:	62f8      	str	r0, [r7, #44]	; 0x2c

        /* Check for an error from flash driver. Drivers should never return an error..  */
        if (status)
 80155e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155ea:	2b00      	cmp	r3, #0
 80155ec:	d005      	beq.n	80155fa <_lx_nor_flash_logical_sector_find+0x25e>
        {
        
            /* Call system error handler.  */
            _lx_nor_flash_system_error(nor_flash, status);
 80155ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80155f0:	68f8      	ldr	r0, [r7, #12]
 80155f2:	f001 f91d 	bl	8016830 <_lx_nor_flash_system_error>

            /* Return the error.  */
            return(status);
 80155f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155f8:	e0f5      	b.n	80157e6 <_lx_nor_flash_logical_sector_find+0x44a>
        }
#endif

        /* Are the values valid?  */
        if ((min_logical_sector != LX_ALL_ONES) && (max_logical_sector != LX_ALL_ONES))
 80155fa:	6a3b      	ldr	r3, [r7, #32]
 80155fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015600:	d018      	beq.n	8015634 <_lx_nor_flash_logical_sector_find+0x298>
 8015602:	69fb      	ldr	r3, [r7, #28]
 8015604:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015608:	d014      	beq.n	8015634 <_lx_nor_flash_logical_sector_find+0x298>
        {

            /* Now let's check to see if the search sector is within this range.  */
            if ((logical_sector < min_logical_sector) || (logical_sector > max_logical_sector))
 801560a:	6a3b      	ldr	r3, [r7, #32]
 801560c:	68ba      	ldr	r2, [r7, #8]
 801560e:	429a      	cmp	r2, r3
 8015610:	d303      	bcc.n	801561a <_lx_nor_flash_logical_sector_find+0x27e>
 8015612:	69fb      	ldr	r3, [r7, #28]
 8015614:	68ba      	ldr	r2, [r7, #8]
 8015616:	429a      	cmp	r2, r3
 8015618:	d90c      	bls.n	8015634 <_lx_nor_flash_logical_sector_find+0x298>
            {

                /* Move to the next block.  */
                i++;
 801561a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801561c:	3301      	adds	r3, #1
 801561e:	643b      	str	r3, [r7, #64]	; 0x40
      
                /* Determine if we have wrapped.  */
                if (i >= nor_flash -> lx_nor_flash_total_blocks)
 8015620:	68fb      	ldr	r3, [r7, #12]
 8015622:	685b      	ldr	r3, [r3, #4]
 8015624:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015626:	429a      	cmp	r2, r3
 8015628:	d301      	bcc.n	801562e <_lx_nor_flash_logical_sector_find+0x292>
                {
        
                    /* Yes, we have wrapped, set to block 0.  */
                    i =  0;
 801562a:	2300      	movs	r3, #0
 801562c:	643b      	str	r3, [r7, #64]	; 0x40
                }

                /* Start at the first sector in the next block.  */
                j =  0;
 801562e:	2300      	movs	r3, #0
 8015630:	63fb      	str	r3, [r7, #60]	; 0x3c
              
                /* No point in looking further into this block, just continue the loop.  */
                continue;            
 8015632:	e0cf      	b.n	80157d4 <_lx_nor_flash_logical_sector_find+0x438>
            }
        }
       
        /* Setup the total number of sectors.  */
        total_sectors =  nor_flash -> lx_nor_flash_physical_sectors_per_block;
 8015634:	68fb      	ldr	r3, [r7, #12]
 8015636:	691b      	ldr	r3, [r3, #16]
 8015638:	647b      	str	r3, [r7, #68]	; 0x44
        
        /* Remember the start of the search.  */
        search_start =  j;
 801563a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801563c:	63bb      	str	r3, [r7, #56]	; 0x38
        
        /* Now search through the sector list to find a match.  */
        while (total_sectors--)
 801563e:	e0b2      	b.n	80157a6 <_lx_nor_flash_logical_sector_find+0x40a>
        {

            /* Setup a pointer to the mapped list.  */
            list_word_ptr =  block_word_ptr + nor_flash -> lx_nor_flash_block_physical_sector_mapping_offset + j;
 8015640:	68fb      	ldr	r3, [r7, #12]
 8015642:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015644:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015646:	4413      	add	r3, r2
 8015648:	009b      	lsls	r3, r3, #2
 801564a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801564c:	4413      	add	r3, r2
 801564e:	62bb      	str	r3, [r7, #40]	; 0x28
#ifdef LX_DIRECT_READ
        
            /* Read the word directly.  */
            list_word =  *(list_word_ptr);
#else
            status =  _lx_nor_flash_driver_read(nor_flash, list_word_ptr, &list_word, 1);
 8015650:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8015654:	2301      	movs	r3, #1
 8015656:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015658:	68f8      	ldr	r0, [r7, #12]
 801565a:	f7ff fd61 	bl	8015120 <_lx_nor_flash_driver_read>
 801565e:	62f8      	str	r0, [r7, #44]	; 0x2c

            /* Check for an error from flash driver. Drivers should never return an error..  */
            if (status)
 8015660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015662:	2b00      	cmp	r3, #0
 8015664:	d005      	beq.n	8015672 <_lx_nor_flash_logical_sector_find+0x2d6>
            {
        
                /* Call system error handler.  */
                _lx_nor_flash_system_error(nor_flash, status);
 8015666:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015668:	68f8      	ldr	r0, [r7, #12]
 801566a:	f001 f8e1 	bl	8016830 <_lx_nor_flash_system_error>

                /* Return the error.  */
                return(status);
 801566e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015670:	e0b9      	b.n	80157e6 <_lx_nor_flash_logical_sector_find+0x44a>
            }
#endif
            
            /* Determine if the entry hasn't been used.  */
            if (list_word == LX_NOR_PHYSICAL_SECTOR_FREE)
 8015672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015674:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015678:	d10a      	bne.n	8015690 <_lx_nor_flash_logical_sector_find+0x2f4>
                
                /* Since the mapping is done sequentially in the block, we know nothing
                   else exists after this point.  */
              
                /* Determine if the search started at the beginning of the block.  */
                if (search_start == 0)
 801567a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801567c:	2b00      	cmp	r3, #0
 801567e:	f000 8099 	beq.w	80157b4 <_lx_nor_flash_logical_sector_find+0x418>
                }
                else
                {
              
                    /* Setup the new total to the search start.  */
                    total_sectors =  search_start;
 8015682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015684:	647b      	str	r3, [r7, #68]	; 0x44
                    
                    /* Clear search start.  */
                    search_start =  0;
 8015686:	2300      	movs	r3, #0
 8015688:	63bb      	str	r3, [r7, #56]	; 0x38
                    
                    /* Start search over.  */
                    j =  0;
 801568a:	2300      	movs	r3, #0
 801568c:	63fb      	str	r3, [r7, #60]	; 0x3c
                    continue;
 801568e:	e08a      	b.n	80157a6 <_lx_nor_flash_logical_sector_find+0x40a>
                }
            }
            
            /* Is this entry valid?  */
            if ((list_word & (LX_NOR_PHYSICAL_SECTOR_VALID | LX_NOR_PHYSICAL_SECTOR_MAPPING_NOT_VALID)) == LX_NOR_PHYSICAL_SECTOR_VALID)
 8015690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015692:	f003 4320 	and.w	r3, r3, #2684354560	; 0xa0000000
 8015696:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801569a:	d17a      	bne.n	8015792 <_lx_nor_flash_logical_sector_find+0x3f6>
            {
                
                /* Decrement the number of mapped sectors.  */
                mapped_sectors--;    
 801569c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801569e:	3b01      	subs	r3, #1
 80156a0:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Do we have a valid sector match?  */
                if ((list_word & LX_NOR_LOGICAL_SECTOR_MASK) == logical_sector)
 80156a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156a4:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 80156a8:	68ba      	ldr	r2, [r7, #8]
 80156aa:	429a      	cmp	r2, r3
 80156ac:	d171      	bne.n	8015792 <_lx_nor_flash_logical_sector_find+0x3f6>
                {

                    /* Determine if we care about the superceded bit.  */
                    if (superceded_check == LX_FALSE)
 80156ae:	687b      	ldr	r3, [r7, #4]
 80156b0:	2b00      	cmp	r3, #0
 80156b2:	d14a      	bne.n	801574a <_lx_nor_flash_logical_sector_find+0x3ae>
                    {
                                    
                        /* Prepare the return information.  */
                        *physical_sector_map_entry =  list_word_ptr;
 80156b4:	683b      	ldr	r3, [r7, #0]
 80156b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80156b8:	601a      	str	r2, [r3, #0]
                        *physical_sector_address =    block_word_ptr + nor_flash -> lx_nor_flash_block_physical_sector_offset + (j * LX_NOR_SECTOR_SIZE);
 80156ba:	68fb      	ldr	r3, [r7, #12]
 80156bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80156be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80156c0:	01db      	lsls	r3, r3, #7
 80156c2:	4413      	add	r3, r2
 80156c4:	009b      	lsls	r3, r3, #2
 80156c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80156c8:	441a      	add	r2, r3
 80156ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80156cc:	601a      	str	r2, [r3, #0]

                        /* Determine if the sector mapping cache is enabled.  */
                        if (nor_flash -> lx_nor_flash_sector_mapping_cache_enabled)
 80156ce:	68fb      	ldr	r3, [r7, #12]
 80156d0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80156d4:	2b00      	cmp	r3, #0
 80156d6:	d026      	beq.n	8015726 <_lx_nor_flash_logical_sector_find+0x38a>
                        {

                            /* Yes, update the cache with the sector mapping.  */
                            
                            /* Move all the cache entries down so the oldest is at the bottom.  */
                            *(sector_mapping_cache_entry_ptr + 3) =  *(sector_mapping_cache_entry_ptr + 2);
 80156d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80156da:	f103 0224 	add.w	r2, r3, #36	; 0x24
 80156de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80156e0:	4614      	mov	r4, r2
 80156e2:	3318      	adds	r3, #24
 80156e4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80156e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
                            *(sector_mapping_cache_entry_ptr + 2) =  *(sector_mapping_cache_entry_ptr + 1);
 80156ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80156ee:	f103 0218 	add.w	r2, r3, #24
 80156f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80156f4:	4614      	mov	r4, r2
 80156f6:	330c      	adds	r3, #12
 80156f8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80156fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
                            *(sector_mapping_cache_entry_ptr + 1) =  *(sector_mapping_cache_entry_ptr);
 8015700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015702:	330c      	adds	r3, #12
 8015704:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015706:	ca07      	ldmia	r2, {r0, r1, r2}
 8015708:	e883 0007 	stmia.w	r3, {r0, r1, r2}

                            /* Setup the new sector information in the cache.  */
                            sector_mapping_cache_entry_ptr -> lx_nor_sector_mapping_cache_logical_sector =             (logical_sector | LX_NOR_SECTOR_MAPPING_CACHE_ENTRY_VALID);
 801570c:	68bb      	ldr	r3, [r7, #8]
 801570e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8015712:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015714:	601a      	str	r2, [r3, #0]
                            sector_mapping_cache_entry_ptr -> lx_nor_sector_mapping_cache_physical_sector_map_entry =  *physical_sector_map_entry;
 8015716:	683b      	ldr	r3, [r7, #0]
 8015718:	681a      	ldr	r2, [r3, #0]
 801571a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801571c:	605a      	str	r2, [r3, #4]
                            sector_mapping_cache_entry_ptr -> lx_nor_sector_mapping_cache_physical_sector_address =    *physical_sector_address;
 801571e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015720:	681a      	ldr	r2, [r3, #0]
 8015722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015724:	609a      	str	r2, [r3, #8]
                        }

                        /* Remember the last found block for next search.  */
                        nor_flash -> lx_nor_flash_found_block_search =  i;
 8015726:	68fb      	ldr	r3, [r7, #12]
 8015728:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801572a:	645a      	str	r2, [r3, #68]	; 0x44
                        
                        /* Remember the last found sector.  */
                        nor_flash -> lx_nor_flash_found_sector_search =  j+1;
 801572c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801572e:	1c5a      	adds	r2, r3, #1
 8015730:	68fb      	ldr	r3, [r7, #12]
 8015732:	649a      	str	r2, [r3, #72]	; 0x48
                        
                        /* Has this wrapped around?  */
                        if (nor_flash -> lx_nor_flash_found_sector_search >= nor_flash -> lx_nor_flash_physical_sectors_per_block)
 8015734:	68fb      	ldr	r3, [r7, #12]
 8015736:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8015738:	68fb      	ldr	r3, [r7, #12]
 801573a:	691b      	ldr	r3, [r3, #16]
 801573c:	429a      	cmp	r2, r3
 801573e:	d302      	bcc.n	8015746 <_lx_nor_flash_logical_sector_find+0x3aa>
                        {
                        
                            /* Reset to the beginning sector.  */
                            nor_flash -> lx_nor_flash_found_sector_search =  0;
 8015740:	68fb      	ldr	r3, [r7, #12]
 8015742:	2200      	movs	r2, #0
 8015744:	649a      	str	r2, [r3, #72]	; 0x48
                        }

                        /* Return success!  */
                        return(LX_SUCCESS);                     
 8015746:	2300      	movs	r3, #0
 8015748:	e04d      	b.n	80157e6 <_lx_nor_flash_logical_sector_find+0x44a>
                    }

                    /* Check for the superceded bit being clear, which means the sector was superceded.  */
                    else if (list_word & LX_NOR_PHYSICAL_SECTOR_SUPERCEDED)
 801574a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801574c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8015750:	2b00      	cmp	r3, #0
 8015752:	d01e      	beq.n	8015792 <_lx_nor_flash_logical_sector_find+0x3f6>
                    {
                        
                        /* Prepare the return information.  */
                        *physical_sector_map_entry =  list_word_ptr;
 8015754:	683b      	ldr	r3, [r7, #0]
 8015756:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015758:	601a      	str	r2, [r3, #0]
                        *physical_sector_address =    block_word_ptr + nor_flash -> lx_nor_flash_block_physical_sector_offset + (j * LX_NOR_SECTOR_SIZE);
 801575a:	68fb      	ldr	r3, [r7, #12]
 801575c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801575e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015760:	01db      	lsls	r3, r3, #7
 8015762:	4413      	add	r3, r2
 8015764:	009b      	lsls	r3, r3, #2
 8015766:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015768:	441a      	add	r2, r3
 801576a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801576c:	601a      	str	r2, [r3, #0]

                        /* No need to update the cache here, since this condition only happens during initialization.  */

                        /* Remember the last found block for next search.  */
                        nor_flash -> lx_nor_flash_found_block_search =  i;
 801576e:	68fb      	ldr	r3, [r7, #12]
 8015770:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015772:	645a      	str	r2, [r3, #68]	; 0x44

                        /* Remember the last found sector.  */
                        nor_flash -> lx_nor_flash_found_sector_search =  j+1;
 8015774:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015776:	1c5a      	adds	r2, r3, #1
 8015778:	68fb      	ldr	r3, [r7, #12]
 801577a:	649a      	str	r2, [r3, #72]	; 0x48
                        
                        /* Has this wrapped around?  */
                        if (nor_flash -> lx_nor_flash_found_sector_search >= nor_flash -> lx_nor_flash_physical_sectors_per_block)
 801577c:	68fb      	ldr	r3, [r7, #12]
 801577e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8015780:	68fb      	ldr	r3, [r7, #12]
 8015782:	691b      	ldr	r3, [r3, #16]
 8015784:	429a      	cmp	r2, r3
 8015786:	d302      	bcc.n	801578e <_lx_nor_flash_logical_sector_find+0x3f2>
                        {
                        
                            /* Reset to the beginning sector.  */
                            nor_flash -> lx_nor_flash_found_sector_search =  0;
 8015788:	68fb      	ldr	r3, [r7, #12]
 801578a:	2200      	movs	r2, #0
 801578c:	649a      	str	r2, [r3, #72]	; 0x48
                        }

                        /* Return success!  */
                        return(LX_SUCCESS);                     
 801578e:	2300      	movs	r3, #0
 8015790:	e029      	b.n	80157e6 <_lx_nor_flash_logical_sector_find+0x44a>
                    }
                }
            }

            /* Move to the next list entry.  */
            j++;
 8015792:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015794:	3301      	adds	r3, #1
 8015796:	63fb      	str	r3, [r7, #60]	; 0x3c
            
            /* Check for wrap around.  */
            if (j >= nor_flash -> lx_nor_flash_physical_sectors_per_block)
 8015798:	68fb      	ldr	r3, [r7, #12]
 801579a:	691b      	ldr	r3, [r3, #16]
 801579c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801579e:	429a      	cmp	r2, r3
 80157a0:	d301      	bcc.n	80157a6 <_lx_nor_flash_logical_sector_find+0x40a>
            {
            
                /* Yes, wrap around, go back to the beginning.  */
                j =  0;
 80157a2:	2300      	movs	r3, #0
 80157a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        while (total_sectors--)
 80157a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80157a8:	1e5a      	subs	r2, r3, #1
 80157aa:	647a      	str	r2, [r7, #68]	; 0x44
 80157ac:	2b00      	cmp	r3, #0
 80157ae:	f47f af47 	bne.w	8015640 <_lx_nor_flash_logical_sector_find+0x2a4>
 80157b2:	e000      	b.n	80157b6 <_lx_nor_flash_logical_sector_find+0x41a>
                    break;
 80157b4:	bf00      	nop
            }
        }

        /* Determine if there are any more mapped sectors.  */
        if (mapped_sectors == 0)
 80157b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80157b8:	2b00      	cmp	r3, #0
 80157ba:	d012      	beq.n	80157e2 <_lx_nor_flash_logical_sector_find+0x446>
            break;
            
        /* Move to the next block.  */
        i++;
 80157bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80157be:	3301      	adds	r3, #1
 80157c0:	643b      	str	r3, [r7, #64]	; 0x40
       
        /* Determine if we have wrapped.  */
        if (i >= nor_flash -> lx_nor_flash_total_blocks)
 80157c2:	68fb      	ldr	r3, [r7, #12]
 80157c4:	685b      	ldr	r3, [r3, #4]
 80157c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80157c8:	429a      	cmp	r2, r3
 80157ca:	d301      	bcc.n	80157d0 <_lx_nor_flash_logical_sector_find+0x434>
        {
        
            /* Yes, we have wrapped, set to block 0.  */
            i =  0;
 80157cc:	2300      	movs	r3, #0
 80157ce:	643b      	str	r3, [r7, #64]	; 0x40
        }

        /* Start at the first sector in the next block.  */
        j =  0;
 80157d0:	2300      	movs	r3, #0
 80157d2:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (total_blocks--) 
 80157d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80157d6:	1e5a      	subs	r2, r3, #1
 80157d8:	64ba      	str	r2, [r7, #72]	; 0x48
 80157da:	2b00      	cmp	r3, #0
 80157dc:	f47f aede 	bne.w	801559c <_lx_nor_flash_logical_sector_find+0x200>
 80157e0:	e000      	b.n	80157e4 <_lx_nor_flash_logical_sector_find+0x448>
            break;
 80157e2:	bf00      	nop
    }

    /* Return sector not found status.  */
    return(LX_SECTOR_NOT_FOUND);  
 80157e4:	2303      	movs	r3, #3
}
 80157e6:	4618      	mov	r0, r3
 80157e8:	3754      	adds	r7, #84	; 0x54
 80157ea:	46bd      	mov	sp, r7
 80157ec:	bd90      	pop	{r4, r7, pc}

080157ee <_lx_nor_flash_next_block_to_erase_find>:
/*  06-02-2021     Bhupendra Naphade        Modified comment(s),          */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UINT  _lx_nor_flash_next_block_to_erase_find(LX_NOR_FLASH *nor_flash, ULONG *return_erase_block, ULONG *return_erase_count, ULONG *return_mapped_sectors, ULONG *return_obsolete_sectors)
{
 80157ee:	b580      	push	{r7, lr}
 80157f0:	b098      	sub	sp, #96	; 0x60
 80157f2:	af00      	add	r7, sp, #0
 80157f4:	60f8      	str	r0, [r7, #12]
 80157f6:	60b9      	str	r1, [r7, #8]
 80157f8:	607a      	str	r2, [r7, #4]
 80157fa:	603b      	str	r3, [r7, #0]
ULONG   list_word;
ULONG   i, j;
ULONG   mapped_sectors;
ULONG   erase_count;
ULONG   obsolete_sectors;
ULONG   min_block_erase = 0;
 80157fc:	2300      	movs	r3, #0
 80157fe:	647b      	str	r3, [r7, #68]	; 0x44
ULONG   min_block_erase_count;
ULONG   min_block_obsolete_count = 0;
 8015800:	2300      	movs	r3, #0
 8015802:	63fb      	str	r3, [r7, #60]	; 0x3c
ULONG   min_block_mapped_count = 0;
 8015804:	2300      	movs	r3, #0
 8015806:	63bb      	str	r3, [r7, #56]	; 0x38
ULONG   max_obsolete_sectors;
ULONG   max_obsolete_block = 0;
 8015808:	2300      	movs	r3, #0
 801580a:	633b      	str	r3, [r7, #48]	; 0x30
ULONG   max_obsolete_erase_count = 0;
 801580c:	2300      	movs	r3, #0
 801580e:	62fb      	str	r3, [r7, #44]	; 0x2c
ULONG   max_obsolete_mapped_count = 0;
 8015810:	2300      	movs	r3, #0
 8015812:	62bb      	str	r3, [r7, #40]	; 0x28
UINT    status;
#endif


    /* Setup the block word pointer to the first word of the search block.  */
    block_word_ptr =  nor_flash -> lx_nor_flash_base_address;
 8015814:	68fb      	ldr	r3, [r7, #12]
 8015816:	695b      	ldr	r3, [r3, #20]
 8015818:	65fb      	str	r3, [r7, #92]	; 0x5c

    /* Initialize the minimum erase count.  */
    min_block_erase_count =  LX_ALL_ONES;
 801581a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801581e:	643b      	str	r3, [r7, #64]	; 0x40
    
    /* Initialize the system minimum and maximum erase counts.  */
    min_system_block_erase_count =  LX_ALL_ONES;
 8015820:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015824:	627b      	str	r3, [r7, #36]	; 0x24
    max_system_block_erase_count =  0;
 8015826:	2300      	movs	r3, #0
 8015828:	623b      	str	r3, [r7, #32]
        
    /* Initialize the maximum obsolete sector count.  */
    max_obsolete_sectors =  0;
 801582a:	2300      	movs	r3, #0
 801582c:	637b      	str	r3, [r7, #52]	; 0x34
        
    /* Calculate the erase count threshold.  */
    if (nor_flash -> lx_nor_flash_free_physical_sectors >= nor_flash -> lx_nor_flash_physical_sectors_per_block)
 801582e:	68fb      	ldr	r3, [r7, #12]
 8015830:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015832:	68fb      	ldr	r3, [r7, #12]
 8015834:	691b      	ldr	r3, [r3, #16]
 8015836:	429a      	cmp	r2, r3
 8015838:	d304      	bcc.n	8015844 <_lx_nor_flash_next_block_to_erase_find+0x56>
    {
        
        /* Calculate erase count threshold by adding constant to the current minimum.  */
        erase_count_threshold =  nor_flash -> lx_nor_flash_minimum_erase_count + LX_NOR_FLASH_MAX_ERASE_COUNT_DELTA;
 801583a:	68fb      	ldr	r3, [r7, #12]
 801583c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801583e:	3304      	adds	r3, #4
 8015840:	61fb      	str	r3, [r7, #28]
 8015842:	e002      	b.n	801584a <_lx_nor_flash_next_block_to_erase_find+0x5c>
    }
    else
    {
      
        /* When the number of free sectors is low, simply pick the block that has the most number of obsolete sectors.  */
        erase_count_threshold =  LX_ALL_ONES;
 8015844:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015848:	61fb      	str	r3, [r7, #28]
    }
    
    /* Loop through the blocks to attempt to find the mapped logical sector.  */
    for (i = 0; i < nor_flash -> lx_nor_flash_total_blocks; i++)
 801584a:	2300      	movs	r3, #0
 801584c:	657b      	str	r3, [r7, #84]	; 0x54
 801584e:	e092      	b.n	8015976 <_lx_nor_flash_next_block_to_erase_find+0x188>
#ifdef LX_DIRECT_READ
        
        /* Read the word directly.  */
        erase_count =  *(block_word_ptr);
#else
        status =  _lx_nor_flash_driver_read(nor_flash, block_word_ptr, &erase_count, 1);
 8015850:	f107 0210 	add.w	r2, r7, #16
 8015854:	2301      	movs	r3, #1
 8015856:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8015858:	68f8      	ldr	r0, [r7, #12]
 801585a:	f7ff fc61 	bl	8015120 <_lx_nor_flash_driver_read>
 801585e:	61b8      	str	r0, [r7, #24]

        /* Check for an error from flash driver. Drivers should never return an error..  */
        if (status)
 8015860:	69bb      	ldr	r3, [r7, #24]
 8015862:	2b00      	cmp	r3, #0
 8015864:	d005      	beq.n	8015872 <_lx_nor_flash_next_block_to_erase_find+0x84>
        {
        
            /* Call system error handler.  */
            _lx_nor_flash_system_error(nor_flash, status);
 8015866:	69b9      	ldr	r1, [r7, #24]
 8015868:	68f8      	ldr	r0, [r7, #12]
 801586a:	f000 ffe1 	bl	8016830 <_lx_nor_flash_system_error>

            /* Return the error.  */
            return(status);
 801586e:	69bb      	ldr	r3, [r7, #24]
 8015870:	e0aa      	b.n	80159c8 <_lx_nor_flash_next_block_to_erase_find+0x1da>
        }
#endif

        /* Update the system minimum and maximum erase counts.  */
        if (erase_count < min_system_block_erase_count)
 8015872:	693b      	ldr	r3, [r7, #16]
 8015874:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015876:	429a      	cmp	r2, r3
 8015878:	d901      	bls.n	801587e <_lx_nor_flash_next_block_to_erase_find+0x90>
            min_system_block_erase_count =  erase_count;
 801587a:	693b      	ldr	r3, [r7, #16]
 801587c:	627b      	str	r3, [r7, #36]	; 0x24
        if (erase_count > max_system_block_erase_count)
 801587e:	693b      	ldr	r3, [r7, #16]
 8015880:	6a3a      	ldr	r2, [r7, #32]
 8015882:	429a      	cmp	r2, r3
 8015884:	d201      	bcs.n	801588a <_lx_nor_flash_next_block_to_erase_find+0x9c>
            max_system_block_erase_count =  erase_count;
 8015886:	693b      	ldr	r3, [r7, #16]
 8015888:	623b      	str	r3, [r7, #32]

        /* Compute the number of obsolete and mapped sectors for this block.  */
        obsolete_sectors =  0;
 801588a:	2300      	movs	r3, #0
 801588c:	64bb      	str	r3, [r7, #72]	; 0x48
        mapped_sectors =    0;
 801588e:	2300      	movs	r3, #0
 8015890:	64fb      	str	r3, [r7, #76]	; 0x4c
        
        /* Setup a pointer to the mapped list.  */
        list_word_ptr =  block_word_ptr + nor_flash -> lx_nor_flash_block_physical_sector_mapping_offset;
 8015892:	68fb      	ldr	r3, [r7, #12]
 8015894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015896:	009b      	lsls	r3, r3, #2
 8015898:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801589a:	4413      	add	r3, r2
 801589c:	65bb      	str	r3, [r7, #88]	; 0x58

        /* Loop through the mapped list for this block.  */
        for (j = 0; j < nor_flash -> lx_nor_flash_physical_sectors_per_block; j++)
 801589e:	2300      	movs	r3, #0
 80158a0:	653b      	str	r3, [r7, #80]	; 0x50
 80158a2:	e024      	b.n	80158ee <_lx_nor_flash_next_block_to_erase_find+0x100>
#ifdef LX_DIRECT_READ
        
            /* Read the word directly.  */
            list_word =  *(list_word_ptr);
#else
            status =  _lx_nor_flash_driver_read(nor_flash, list_word_ptr, &list_word, 1);
 80158a4:	f107 0214 	add.w	r2, r7, #20
 80158a8:	2301      	movs	r3, #1
 80158aa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80158ac:	68f8      	ldr	r0, [r7, #12]
 80158ae:	f7ff fc37 	bl	8015120 <_lx_nor_flash_driver_read>
 80158b2:	61b8      	str	r0, [r7, #24]

            /* Check for an error from flash driver. Drivers should never return an error..  */
            if (status)
 80158b4:	69bb      	ldr	r3, [r7, #24]
 80158b6:	2b00      	cmp	r3, #0
 80158b8:	d005      	beq.n	80158c6 <_lx_nor_flash_next_block_to_erase_find+0xd8>
            {
        
                /* Call system error handler.  */
                _lx_nor_flash_system_error(nor_flash, status);
 80158ba:	69b9      	ldr	r1, [r7, #24]
 80158bc:	68f8      	ldr	r0, [r7, #12]
 80158be:	f000 ffb7 	bl	8016830 <_lx_nor_flash_system_error>

                /* Return the error.  */
                return(status);
 80158c2:	69bb      	ldr	r3, [r7, #24]
 80158c4:	e080      	b.n	80159c8 <_lx_nor_flash_next_block_to_erase_find+0x1da>
            }
#endif
            
            /* Determine if the entry hasn't been used.  */
            if (list_word == LX_NOR_PHYSICAL_SECTOR_FREE)
 80158c6:	697b      	ldr	r3, [r7, #20]
 80158c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80158cc:	d015      	beq.n	80158fa <_lx_nor_flash_next_block_to_erase_find+0x10c>
                   else exists after this point.  */
                break;
            }
            
            /* Is this entry obsolete?  */
            if ((list_word & LX_NOR_PHYSICAL_SECTOR_VALID) == 0)
 80158ce:	697b      	ldr	r3, [r7, #20]
 80158d0:	2b00      	cmp	r3, #0
 80158d2:	db03      	blt.n	80158dc <_lx_nor_flash_next_block_to_erase_find+0xee>
            {
                
                /* Increment the number of obsolete sectors.  */
                obsolete_sectors++;    
 80158d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80158d6:	3301      	adds	r3, #1
 80158d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80158da:	e002      	b.n	80158e2 <_lx_nor_flash_next_block_to_erase_find+0xf4>
            }
            else
            {
                
                /* Increment the number of mapped sectors.  */
                mapped_sectors++;
 80158dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80158de:	3301      	adds	r3, #1
 80158e0:	64fb      	str	r3, [r7, #76]	; 0x4c
            }

            /* Move the list pointer ahead.  */
            list_word_ptr++;
 80158e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80158e4:	3304      	adds	r3, #4
 80158e6:	65bb      	str	r3, [r7, #88]	; 0x58
        for (j = 0; j < nor_flash -> lx_nor_flash_physical_sectors_per_block; j++)
 80158e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80158ea:	3301      	adds	r3, #1
 80158ec:	653b      	str	r3, [r7, #80]	; 0x50
 80158ee:	68fb      	ldr	r3, [r7, #12]
 80158f0:	691b      	ldr	r3, [r3, #16]
 80158f2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80158f4:	429a      	cmp	r2, r3
 80158f6:	d3d5      	bcc.n	80158a4 <_lx_nor_flash_next_block_to_erase_find+0xb6>
 80158f8:	e000      	b.n	80158fc <_lx_nor_flash_next_block_to_erase_find+0x10e>
                break;
 80158fa:	bf00      	nop
        }

        /* Determine if we have a block with a new maximum number of obsolete sectors.  */
        if ((obsolete_sectors > max_obsolete_sectors) && (erase_count <= erase_count_threshold))
 80158fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80158fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015900:	429a      	cmp	r2, r3
 8015902:	d90c      	bls.n	801591e <_lx_nor_flash_next_block_to_erase_find+0x130>
 8015904:	693b      	ldr	r3, [r7, #16]
 8015906:	69fa      	ldr	r2, [r7, #28]
 8015908:	429a      	cmp	r2, r3
 801590a:	d308      	bcc.n	801591e <_lx_nor_flash_next_block_to_erase_find+0x130>
        {
        
            /* Update the new maximum obsolete sectors and related information.  */
            max_obsolete_sectors =      obsolete_sectors;
 801590c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801590e:	637b      	str	r3, [r7, #52]	; 0x34
            max_obsolete_block =        i;
 8015910:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015912:	633b      	str	r3, [r7, #48]	; 0x30
            max_obsolete_erase_count =  erase_count;
 8015914:	693b      	ldr	r3, [r7, #16]
 8015916:	62fb      	str	r3, [r7, #44]	; 0x2c
            max_obsolete_mapped_count = mapped_sectors;
 8015918:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801591a:	62bb      	str	r3, [r7, #40]	; 0x28
 801591c:	e016      	b.n	801594c <_lx_nor_flash_next_block_to_erase_find+0x15e>
        }
        else if ((max_obsolete_sectors) && (obsolete_sectors == max_obsolete_sectors) && (erase_count <= erase_count_threshold))
 801591e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015920:	2b00      	cmp	r3, #0
 8015922:	d013      	beq.n	801594c <_lx_nor_flash_next_block_to_erase_find+0x15e>
 8015924:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015928:	429a      	cmp	r2, r3
 801592a:	d10f      	bne.n	801594c <_lx_nor_flash_next_block_to_erase_find+0x15e>
 801592c:	693b      	ldr	r3, [r7, #16]
 801592e:	69fa      	ldr	r2, [r7, #28]
 8015930:	429a      	cmp	r2, r3
 8015932:	d30b      	bcc.n	801594c <_lx_nor_flash_next_block_to_erase_find+0x15e>
        {
        
            /* Another block has the same number of obsolete sectors.  Does this new block have a smaller erase
               count?  */
            if (erase_count < max_obsolete_erase_count)
 8015934:	693b      	ldr	r3, [r7, #16]
 8015936:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015938:	429a      	cmp	r2, r3
 801593a:	d907      	bls.n	801594c <_lx_nor_flash_next_block_to_erase_find+0x15e>
            {
            
                /* Yes, erase the block with the smaller erase count.  */
                max_obsolete_sectors =      obsolete_sectors;
 801593c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801593e:	637b      	str	r3, [r7, #52]	; 0x34
                max_obsolete_block =        i;
 8015940:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015942:	633b      	str	r3, [r7, #48]	; 0x30
                max_obsolete_erase_count =  erase_count;
 8015944:	693b      	ldr	r3, [r7, #16]
 8015946:	62fb      	str	r3, [r7, #44]	; 0x2c
                max_obsolete_mapped_count = mapped_sectors;
 8015948:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801594a:	62bb      	str	r3, [r7, #40]	; 0x28
            }
        }
        
        /* Determine if we have a new minimum erase count.  */
        if (erase_count < min_block_erase_count)
 801594c:	693b      	ldr	r3, [r7, #16]
 801594e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015950:	429a      	cmp	r2, r3
 8015952:	d907      	bls.n	8015964 <_lx_nor_flash_next_block_to_erase_find+0x176>
        {
            
            /* Update the new minimum erase count and related information.  */
            min_block_erase_count =     erase_count;
 8015954:	693b      	ldr	r3, [r7, #16]
 8015956:	643b      	str	r3, [r7, #64]	; 0x40
            min_block_erase =           i;
 8015958:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801595a:	647b      	str	r3, [r7, #68]	; 0x44
            min_block_obsolete_count =  obsolete_sectors;
 801595c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801595e:	63fb      	str	r3, [r7, #60]	; 0x3c
            min_block_mapped_count =    mapped_sectors;
 8015960:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015962:	63bb      	str	r3, [r7, #56]	; 0x38
        }
          
        /* Move to the next block.  */
        block_word_ptr =  block_word_ptr + nor_flash -> lx_nor_flash_words_per_block;
 8015964:	68fb      	ldr	r3, [r7, #12]
 8015966:	689b      	ldr	r3, [r3, #8]
 8015968:	009b      	lsls	r3, r3, #2
 801596a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801596c:	4413      	add	r3, r2
 801596e:	65fb      	str	r3, [r7, #92]	; 0x5c
    for (i = 0; i < nor_flash -> lx_nor_flash_total_blocks; i++)
 8015970:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015972:	3301      	adds	r3, #1
 8015974:	657b      	str	r3, [r7, #84]	; 0x54
 8015976:	68fb      	ldr	r3, [r7, #12]
 8015978:	685b      	ldr	r3, [r3, #4]
 801597a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801597c:	429a      	cmp	r2, r3
 801597e:	f4ff af67 	bcc.w	8015850 <_lx_nor_flash_next_block_to_erase_find+0x62>
    }

    /* Determine if we can erase the block with the most obsolete sectors.  */
    if (max_obsolete_sectors)
 8015982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015984:	2b00      	cmp	r3, #0
 8015986:	d00c      	beq.n	80159a2 <_lx_nor_flash_next_block_to_erase_find+0x1b4>
    {
    
        /* Erase the block with the most obsolete sectors.  */
        *return_erase_block =       max_obsolete_block;
 8015988:	68bb      	ldr	r3, [r7, #8]
 801598a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801598c:	601a      	str	r2, [r3, #0]
        *return_erase_count =       max_obsolete_erase_count;
 801598e:	687b      	ldr	r3, [r7, #4]
 8015990:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015992:	601a      	str	r2, [r3, #0]
        *return_obsolete_sectors =  max_obsolete_sectors;
 8015994:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015996:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015998:	601a      	str	r2, [r3, #0]
        *return_mapped_sectors =    max_obsolete_mapped_count;
 801599a:	683b      	ldr	r3, [r7, #0]
 801599c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801599e:	601a      	str	r2, [r3, #0]
 80159a0:	e00b      	b.n	80159ba <_lx_nor_flash_next_block_to_erase_find+0x1cc>
    }
    else
    {
      
        /* Otherwise, choose the block with the smallest erase count.  */
        *return_erase_block =       min_block_erase;
 80159a2:	68bb      	ldr	r3, [r7, #8]
 80159a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80159a6:	601a      	str	r2, [r3, #0]
        *return_erase_count =       min_block_erase_count;
 80159a8:	687b      	ldr	r3, [r7, #4]
 80159aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80159ac:	601a      	str	r2, [r3, #0]
        *return_obsolete_sectors =  min_block_obsolete_count;
 80159ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80159b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80159b2:	601a      	str	r2, [r3, #0]
        *return_mapped_sectors =    min_block_mapped_count;
 80159b4:	683b      	ldr	r3, [r7, #0]
 80159b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80159b8:	601a      	str	r2, [r3, #0]
    }

    /* Update the overall minimum and maximum erase count.  */
    nor_flash -> lx_nor_flash_minimum_erase_count =  min_system_block_erase_count;
 80159ba:	68fb      	ldr	r3, [r7, #12]
 80159bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80159be:	639a      	str	r2, [r3, #56]	; 0x38
    nor_flash -> lx_nor_flash_maximum_erase_count =  max_system_block_erase_count;
 80159c0:	68fb      	ldr	r3, [r7, #12]
 80159c2:	6a3a      	ldr	r2, [r7, #32]
 80159c4:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Return success.  */
    return(LX_SUCCESS);
 80159c6:	2300      	movs	r3, #0
}
 80159c8:	4618      	mov	r0, r3
 80159ca:	3760      	adds	r7, #96	; 0x60
 80159cc:	46bd      	mov	sp, r7
 80159ce:	bd80      	pop	{r7, pc}

080159d0 <_lx_nor_flash_open>:
/*                                            updated product constants   */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UINT  _lx_nor_flash_open(LX_NOR_FLASH  *nor_flash, CHAR *name, UINT (*nor_driver_initialize)(LX_NOR_FLASH *))
{
 80159d0:	b580      	push	{r7, lr}
 80159d2:	b0a0      	sub	sp, #128	; 0x80
 80159d4:	af02      	add	r7, sp, #8
 80159d6:	60f8      	str	r0, [r7, #12]
 80159d8:	60b9      	str	r1, [r7, #8]
 80159da:	607a      	str	r2, [r7, #4]
LX_INTERRUPT_SAVE_AREA

    LX_PARAMETER_NOT_USED(name);

    /* Clear the NOR flash control block.  */
    LX_MEMSET(nor_flash, 0, sizeof(LX_NOR_FLASH));
 80159dc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80159e0:	2100      	movs	r1, #0
 80159e2:	68f8      	ldr	r0, [r7, #12]
 80159e4:	f004 f908 	bl	8019bf8 <memset>
   
    /* Call the flash driver's initialization function.  */
    (nor_driver_initialize)(nor_flash);
 80159e8:	687b      	ldr	r3, [r7, #4]
 80159ea:	68f8      	ldr	r0, [r7, #12]
 80159ec:	4798      	blx	r3

#ifndef LX_DIRECT_READ

    /* Determine if the driver supplied a RAM buffer for reading the NOR sector if direct read is not
       supported.  */
    if (nor_flash -> lx_nor_flash_sector_buffer == LX_NULL)
 80159ee:	68fb      	ldr	r3, [r7, #12]
 80159f0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80159f4:	2b00      	cmp	r3, #0
 80159f6:	d101      	bne.n	80159fc <_lx_nor_flash_open+0x2c>
    {

        /* Return an error.  */
        return(LX_NO_MEMORY);
 80159f8:	2308      	movs	r3, #8
 80159fa:	e345      	b.n	8016088 <_lx_nor_flash_open+0x6b8>
    }
#endif
    
    /* Setup the offset to the free bit map.  */
    nor_flash -> lx_nor_flash_block_free_bit_map_offset =  sizeof(LX_NOR_FLASH_BLOCK_HEADER)/sizeof(ULONG);
 80159fc:	68fb      	ldr	r3, [r7, #12]
 80159fe:	2203      	movs	r2, #3
 8015a00:	619a      	str	r2, [r3, #24]
    
    /* Calculate the number of bits we need in the free physical sector bit map.  Subtract 1 to account for the 
       flash block header itself. The case where multiple physical sectors are needed for certain sized flash 
       devices is handled below.  */
    sectors_per_block =  (nor_flash -> lx_nor_flash_words_per_block / LX_NOR_SECTOR_SIZE) - 1;
 8015a02:	68fb      	ldr	r3, [r7, #12]
 8015a04:	689b      	ldr	r3, [r3, #8]
 8015a06:	09db      	lsrs	r3, r3, #7
 8015a08:	3b01      	subs	r3, #1
 8015a0a:	677b      	str	r3, [r7, #116]	; 0x74

    /* Calculate the number of words required for the sector map array.  */
    sector_map_words =  sectors_per_block;
 8015a0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015a0e:	653b      	str	r3, [r7, #80]	; 0x50
    
    /* Calculate the number of words we need for the free physical sector bit map.  */
    bit_map_words =  (sectors_per_block + 31)/ 32;
 8015a10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015a12:	331f      	adds	r3, #31
 8015a14:	095b      	lsrs	r3, r3, #5
 8015a16:	64fb      	str	r3, [r7, #76]	; 0x4c
    
    /* Save the number of bit map words.  */
    nor_flash -> lx_nor_flash_block_bit_map_words =  bit_map_words;
 8015a18:	68fb      	ldr	r3, [r7, #12]
 8015a1a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8015a1c:	61da      	str	r2, [r3, #28]
    
    /* Setup the offset (in words) to the array of physical sector mapping.  */
    nor_flash -> lx_nor_flash_block_physical_sector_mapping_offset =  nor_flash -> lx_nor_flash_block_free_bit_map_offset + bit_map_words;
 8015a1e:	68fb      	ldr	r3, [r7, #12]
 8015a20:	699a      	ldr	r2, [r3, #24]
 8015a22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015a24:	441a      	add	r2, r3
 8015a26:	68fb      	ldr	r3, [r7, #12]
 8015a28:	625a      	str	r2, [r3, #36]	; 0x24
    
    /* Calculate the total number of words required for the flash block header.  */
    total_header_words =  sizeof(LX_NOR_FLASH_BLOCK_HEADER)/sizeof(ULONG) + bit_map_words + sector_map_words;
 8015a2a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8015a2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015a2e:	4413      	add	r3, r2
 8015a30:	3303      	adds	r3, #3
 8015a32:	673b      	str	r3, [r7, #112]	; 0x70
    
    /* Determine if more physical sectors are needed, which can happen on large devices.  */
    if (total_header_words <= LX_NOR_SECTOR_SIZE)
 8015a34:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015a36:	2b80      	cmp	r3, #128	; 0x80
 8015a38:	d802      	bhi.n	8015a40 <_lx_nor_flash_open+0x70>
    {
    
        /* Round up to the size of 1 physical sector.  */
        total_header_words =  LX_NOR_SECTOR_SIZE;
 8015a3a:	2380      	movs	r3, #128	; 0x80
 8015a3c:	673b      	str	r3, [r7, #112]	; 0x70
 8015a3e:	e00e      	b.n	8015a5e <_lx_nor_flash_open+0x8e>
    }
    else
    {

        /* Otherwise calculate how many header sectors are necessary.  */
        header_sectors =  (total_header_words-1)/LX_NOR_SECTOR_SIZE;
 8015a40:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015a42:	3b01      	subs	r3, #1
 8015a44:	09db      	lsrs	r3, r3, #7
 8015a46:	64bb      	str	r3, [r7, #72]	; 0x48
        
        /* Round up to the next sector.  */
        header_sectors++;
 8015a48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015a4a:	3301      	adds	r3, #1
 8015a4c:	64bb      	str	r3, [r7, #72]	; 0x48
        
        /* Compute the total header words, rounding to the next sector.  */
        total_header_words =  header_sectors * LX_NOR_SECTOR_SIZE;
 8015a4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015a50:	01db      	lsls	r3, r3, #7
 8015a52:	673b      	str	r3, [r7, #112]	; 0x70
        
        /* Adjust the number of sectors per block.  */
        sectors_per_block =  sectors_per_block - (header_sectors - 1);
 8015a54:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8015a56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015a58:	1ad3      	subs	r3, r2, r3
 8015a5a:	3301      	adds	r3, #1
 8015a5c:	677b      	str	r3, [r7, #116]	; 0x74
    }
    
    /* Save the offset to the sector area.  */
    nor_flash -> lx_nor_flash_block_physical_sector_offset =  total_header_words;
 8015a5e:	68fb      	ldr	r3, [r7, #12]
 8015a60:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8015a62:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Save the physical sectors per block and total physical sectors.  */
    nor_flash -> lx_nor_flash_physical_sectors_per_block =  sectors_per_block;
 8015a64:	68fb      	ldr	r3, [r7, #12]
 8015a66:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8015a68:	611a      	str	r2, [r3, #16]
    nor_flash -> lx_nor_flash_total_physical_sectors =      nor_flash -> lx_nor_flash_total_blocks * sectors_per_block;
 8015a6a:	68fb      	ldr	r3, [r7, #12]
 8015a6c:	685b      	ldr	r3, [r3, #4]
 8015a6e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8015a70:	fb03 f202 	mul.w	r2, r3, r2
 8015a74:	68fb      	ldr	r3, [r7, #12]
 8015a76:	60da      	str	r2, [r3, #12]
    
    /* Build the free bit map mask, for the portion of the bit map that is less than 32 bits.  */
    if ((sectors_per_block % 32) != 0)
 8015a78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015a7a:	f003 031f 	and.w	r3, r3, #31
 8015a7e:	2b00      	cmp	r3, #0
 8015a80:	d00a      	beq.n	8015a98 <_lx_nor_flash_open+0xc8>
    {
        bit_map_mask =  (ULONG)(1 << (sectors_per_block % 32));
 8015a82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015a84:	f003 031f 	and.w	r3, r3, #31
 8015a88:	2201      	movs	r2, #1
 8015a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8015a8e:	627b      	str	r3, [r7, #36]	; 0x24
        bit_map_mask =  bit_map_mask - 1;
 8015a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a92:	3b01      	subs	r3, #1
 8015a94:	627b      	str	r3, [r7, #36]	; 0x24
 8015a96:	e002      	b.n	8015a9e <_lx_nor_flash_open+0xce>
    }
    else
    {
    
        /* Exactly 32 sectors for the bit map mask.  */
        bit_map_mask =  LX_ALL_ONES;
 8015a98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015a9c:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* Save the free bit map mask in the control block.  */
    nor_flash -> lx_nor_flash_block_bit_map_mask =  bit_map_mask;
 8015a9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015aa0:	68fb      	ldr	r3, [r7, #12]
 8015aa2:	621a      	str	r2, [r3, #32]
    
    /* Setup default values for the max/min erased counts.  */
    min_erased_count =  LX_ALL_ONES;
 8015aa4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015aa8:	663b      	str	r3, [r7, #96]	; 0x60
    max_erased_count =  0;
 8015aaa:	2300      	movs	r3, #0
 8015aac:	617b      	str	r3, [r7, #20]
    
    /* Setup the block word pointer to the first word of the first block, which is effectively the 
       flash base address.  */
    block_word_ptr =  nor_flash -> lx_nor_flash_base_address;
 8015aae:	68fb      	ldr	r3, [r7, #12]
 8015ab0:	695b      	ldr	r3, [r3, #20]
 8015ab2:	66fb      	str	r3, [r7, #108]	; 0x6c
    
    /* Loop through the blocks to determine the minimum and maximum erase count.  */
    for (l = 0; l < nor_flash -> lx_nor_flash_total_blocks; l++)
 8015ab4:	2300      	movs	r3, #0
 8015ab6:	657b      	str	r3, [r7, #84]	; 0x54
 8015ab8:	e02f      	b.n	8015b1a <_lx_nor_flash_open+0x14a>
        block_word =  *block_word_ptr;
#else

        

        status =  _lx_nor_flash_driver_read(nor_flash, block_word_ptr, &block_word, 1);
 8015aba:	f107 0220 	add.w	r2, r7, #32
 8015abe:	2301      	movs	r3, #1
 8015ac0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8015ac2:	68f8      	ldr	r0, [r7, #12]
 8015ac4:	f7ff fb2c 	bl	8015120 <_lx_nor_flash_driver_read>
 8015ac8:	6478      	str	r0, [r7, #68]	; 0x44
        
        /* Check for an error from flash driver. Drivers should never return an error..  */
        if (status)
 8015aca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015acc:	2b00      	cmp	r3, #0
 8015ace:	d005      	beq.n	8015adc <_lx_nor_flash_open+0x10c>
        {
        
            /* Call system error handler.  */
            _lx_nor_flash_system_error(nor_flash, status);
 8015ad0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8015ad2:	68f8      	ldr	r0, [r7, #12]
 8015ad4:	f000 feac 	bl	8016830 <_lx_nor_flash_system_error>

            /* Return an error.  */
            return(LX_ERROR);
 8015ad8:	2301      	movs	r3, #1
 8015ada:	e2d5      	b.n	8016088 <_lx_nor_flash_open+0x6b8>
        }
#endif

        /* Is the block erased?  */
        if (((block_word & LX_BLOCK_ERASED) != LX_BLOCK_ERASED) && (block_word != LX_BLOCK_ERASE_STARTED))
 8015adc:	6a3b      	ldr	r3, [r7, #32]
 8015ade:	2b00      	cmp	r3, #0
 8015ae0:	db12      	blt.n	8015b08 <_lx_nor_flash_open+0x138>
 8015ae2:	6a3b      	ldr	r3, [r7, #32]
 8015ae4:	2b00      	cmp	r3, #0
 8015ae6:	d00f      	beq.n	8015b08 <_lx_nor_flash_open+0x138>
        {
        
            /* No, valid block.  Isolate the erased count.  */
            erased_count =  (block_word & LX_BLOCK_ERASE_COUNT_MASK);
 8015ae8:	6a3b      	ldr	r3, [r7, #32]
 8015aea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015aee:	637b      	str	r3, [r7, #52]	; 0x34
            
            /* Is this the new minimum?  */
            if (erased_count < min_erased_count)
 8015af0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015af2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015af4:	429a      	cmp	r2, r3
 8015af6:	d201      	bcs.n	8015afc <_lx_nor_flash_open+0x12c>
            {
                
                /* Yes, remember the new minimum.  */
                min_erased_count =  erased_count;
 8015af8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015afa:	663b      	str	r3, [r7, #96]	; 0x60
            }
            
            /* Is this the new maximum?  */
            if (erased_count > max_erased_count)
 8015afc:	697b      	ldr	r3, [r7, #20]
 8015afe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015b00:	429a      	cmp	r2, r3
 8015b02:	d901      	bls.n	8015b08 <_lx_nor_flash_open+0x138>
            {
            
                /* Yes, remember the new maximum.  */
                max_erased_count =  erased_count;
 8015b04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015b06:	617b      	str	r3, [r7, #20]
            }
        }
        
        /* Move to the next flash block.  */
        block_word_ptr =  block_word_ptr + (nor_flash -> lx_nor_flash_words_per_block);
 8015b08:	68fb      	ldr	r3, [r7, #12]
 8015b0a:	689b      	ldr	r3, [r3, #8]
 8015b0c:	009b      	lsls	r3, r3, #2
 8015b0e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8015b10:	4413      	add	r3, r2
 8015b12:	66fb      	str	r3, [r7, #108]	; 0x6c
    for (l = 0; l < nor_flash -> lx_nor_flash_total_blocks; l++)
 8015b14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015b16:	3301      	adds	r3, #1
 8015b18:	657b      	str	r3, [r7, #84]	; 0x54
 8015b1a:	68fb      	ldr	r3, [r7, #12]
 8015b1c:	685b      	ldr	r3, [r3, #4]
 8015b1e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8015b20:	429a      	cmp	r2, r3
 8015b22:	d3ca      	bcc.n	8015aba <_lx_nor_flash_open+0xea>
    }    

    /* If we haven't found any erased counts, we can assume the flash is completely erased and needs to 
       be setup for the first time.  */
    if (min_erased_count == LX_ALL_ONES)
 8015b24:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015b26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015b2a:	d14e      	bne.n	8015bca <_lx_nor_flash_open+0x1fa>
    {
    
        /* Indicate that this is the initial format.  */
        nor_flash -> lx_nor_flash_diagnostic_initial_format =  LX_TRUE;
 8015b2c:	68fb      	ldr	r3, [r7, #12]
 8015b2e:	2201      	movs	r2, #1
 8015b30:	66da      	str	r2, [r3, #108]	; 0x6c
    
        /* Setup the block word pointer to the first word of the first block, which is effectively the 
           flash base address.  */
        block_word_ptr =  nor_flash -> lx_nor_flash_base_address;
 8015b32:	68fb      	ldr	r3, [r7, #12]
 8015b34:	695b      	ldr	r3, [r3, #20]
 8015b36:	66fb      	str	r3, [r7, #108]	; 0x6c
    
        /* Loop through the blocks to setup the flash the fist time.  */
        for (l = 0; l < nor_flash -> lx_nor_flash_total_blocks; l++)
 8015b38:	2300      	movs	r3, #0
 8015b3a:	657b      	str	r3, [r7, #84]	; 0x54
 8015b3c:	e03f      	b.n	8015bbe <_lx_nor_flash_open+0x1ee>
        {

            /* Setup the free bit map that corresponds to the free physical sectors in this
               block. Note that we only need to setup the portion of the free bit map that doesn't 
               have sectors associated with it.  */            
            status =  _lx_nor_flash_driver_write(nor_flash, block_word_ptr+(nor_flash -> lx_nor_flash_block_free_bit_map_offset + (bit_map_words-1)) , &bit_map_mask, 1);
 8015b3e:	68fb      	ldr	r3, [r7, #12]
 8015b40:	699a      	ldr	r2, [r3, #24]
 8015b42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015b44:	4413      	add	r3, r2
 8015b46:	3b01      	subs	r3, #1
 8015b48:	009b      	lsls	r3, r3, #2
 8015b4a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8015b4c:	18d1      	adds	r1, r2, r3
 8015b4e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8015b52:	2301      	movs	r3, #1
 8015b54:	68f8      	ldr	r0, [r7, #12]
 8015b56:	f7ff fbc9 	bl	80152ec <_lx_nor_flash_driver_write>
 8015b5a:	6478      	str	r0, [r7, #68]	; 0x44
        
            /* Check for an error from flash driver. Drivers should never return an error..  */
            if (status)
 8015b5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015b5e:	2b00      	cmp	r3, #0
 8015b60:	d005      	beq.n	8015b6e <_lx_nor_flash_open+0x19e>
            {
        
                /* Call system error handler.  */
                _lx_nor_flash_system_error(nor_flash, status);
 8015b62:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8015b64:	68f8      	ldr	r0, [r7, #12]
 8015b66:	f000 fe63 	bl	8016830 <_lx_nor_flash_system_error>

                /* Return an error.  */
                return(LX_ERROR);
 8015b6a:	2301      	movs	r3, #1
 8015b6c:	e28c      	b.n	8016088 <_lx_nor_flash_open+0x6b8>
            }

            /* Setup the initial erase count to 1.  */
            block_word =  ((ULONG) 1);
 8015b6e:	2301      	movs	r3, #1
 8015b70:	623b      	str	r3, [r7, #32]
    
            /* Write the initial erase count for the block.  */            
            status =  _lx_nor_flash_driver_write(nor_flash, block_word_ptr, &block_word, 1);
 8015b72:	f107 0220 	add.w	r2, r7, #32
 8015b76:	2301      	movs	r3, #1
 8015b78:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8015b7a:	68f8      	ldr	r0, [r7, #12]
 8015b7c:	f7ff fbb6 	bl	80152ec <_lx_nor_flash_driver_write>
 8015b80:	6478      	str	r0, [r7, #68]	; 0x44

            /* Check for an error from flash driver. Drivers should never return an error..  */
            if (status)
 8015b82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015b84:	2b00      	cmp	r3, #0
 8015b86:	d005      	beq.n	8015b94 <_lx_nor_flash_open+0x1c4>
            {
        
                /* Call system error handler.  */
                _lx_nor_flash_system_error(nor_flash, status);
 8015b88:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8015b8a:	68f8      	ldr	r0, [r7, #12]
 8015b8c:	f000 fe50 	bl	8016830 <_lx_nor_flash_system_error>

                /* Return an error.  */
                return(LX_ERROR);
 8015b90:	2301      	movs	r3, #1
 8015b92:	e279      	b.n	8016088 <_lx_nor_flash_open+0x6b8>
            }

            /* Update the overall minimum and maximum erase count.  */
            nor_flash -> lx_nor_flash_minimum_erase_count =  1;
 8015b94:	68fb      	ldr	r3, [r7, #12]
 8015b96:	2201      	movs	r2, #1
 8015b98:	639a      	str	r2, [r3, #56]	; 0x38
            nor_flash -> lx_nor_flash_maximum_erase_count =  1;
 8015b9a:	68fb      	ldr	r3, [r7, #12]
 8015b9c:	2201      	movs	r2, #1
 8015b9e:	63da      	str	r2, [r3, #60]	; 0x3c

            /* Update the number of free physical sectors.  */
            nor_flash -> lx_nor_flash_free_physical_sectors =   nor_flash -> lx_nor_flash_free_physical_sectors + sectors_per_block;
 8015ba0:	68fb      	ldr	r3, [r7, #12]
 8015ba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015ba4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015ba6:	441a      	add	r2, r3
 8015ba8:	68fb      	ldr	r3, [r7, #12]
 8015baa:	62da      	str	r2, [r3, #44]	; 0x2c
        
            /* Move to the next flash block.  */
            block_word_ptr =  block_word_ptr + (nor_flash -> lx_nor_flash_words_per_block);
 8015bac:	68fb      	ldr	r3, [r7, #12]
 8015bae:	689b      	ldr	r3, [r3, #8]
 8015bb0:	009b      	lsls	r3, r3, #2
 8015bb2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8015bb4:	4413      	add	r3, r2
 8015bb6:	66fb      	str	r3, [r7, #108]	; 0x6c
        for (l = 0; l < nor_flash -> lx_nor_flash_total_blocks; l++)
 8015bb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015bba:	3301      	adds	r3, #1
 8015bbc:	657b      	str	r3, [r7, #84]	; 0x54
 8015bbe:	68fb      	ldr	r3, [r7, #12]
 8015bc0:	685b      	ldr	r3, [r3, #4]
 8015bc2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8015bc4:	429a      	cmp	r2, r3
 8015bc6:	d3ba      	bcc.n	8015b3e <_lx_nor_flash_open+0x16e>
 8015bc8:	e216      	b.n	8015ff8 <_lx_nor_flash_open+0x628>

        /* At this point, we have a previously managed flash structure. This needs to be traversed to prepare for the 
           current flash operation.  */

        /* Default the flash free sector search to an invalid value.  */
        nor_flash -> lx_nor_flash_free_block_search =  nor_flash -> lx_nor_flash_total_blocks;
 8015bca:	68fb      	ldr	r3, [r7, #12]
 8015bcc:	685a      	ldr	r2, [r3, #4]
 8015bce:	68fb      	ldr	r3, [r7, #12]
 8015bd0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Setup the block word pointer to the first word of the first block, which is effectively the 
           flash base address.  */
        block_word_ptr =  nor_flash -> lx_nor_flash_base_address;
 8015bd2:	68fb      	ldr	r3, [r7, #12]
 8015bd4:	695b      	ldr	r3, [r3, #20]
 8015bd6:	66fb      	str	r3, [r7, #108]	; 0x6c
    
        /* Loop through the blocks.  */
        for (l = 0; l < nor_flash -> lx_nor_flash_total_blocks; l++)
 8015bd8:	2300      	movs	r3, #0
 8015bda:	657b      	str	r3, [r7, #84]	; 0x54
 8015bdc:	e1f7      	b.n	8015fce <_lx_nor_flash_open+0x5fe>
#ifdef LX_DIRECT_READ
        
            /* Read the word directly.  */
            block_word =  *block_word_ptr;
#else
            status =  _lx_nor_flash_driver_read(nor_flash, block_word_ptr, &block_word, 1);
 8015bde:	f107 0220 	add.w	r2, r7, #32
 8015be2:	2301      	movs	r3, #1
 8015be4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8015be6:	68f8      	ldr	r0, [r7, #12]
 8015be8:	f7ff fa9a 	bl	8015120 <_lx_nor_flash_driver_read>
 8015bec:	6478      	str	r0, [r7, #68]	; 0x44

            /* Check for an error from flash driver. Drivers should never return an error..  */
            if (status)
 8015bee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015bf0:	2b00      	cmp	r3, #0
 8015bf2:	d005      	beq.n	8015c00 <_lx_nor_flash_open+0x230>
            {
        
                /* Call system error handler.  */
                _lx_nor_flash_system_error(nor_flash, status);
 8015bf4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8015bf6:	68f8      	ldr	r0, [r7, #12]
 8015bf8:	f000 fe1a 	bl	8016830 <_lx_nor_flash_system_error>

                /* Return an error.  */
                return(LX_ERROR);
 8015bfc:	2301      	movs	r3, #1
 8015bfe:	e243      	b.n	8016088 <_lx_nor_flash_open+0x6b8>
            }
#endif

            /* Is the block erased?  */
            if (((block_word & LX_BLOCK_ERASED) == LX_BLOCK_ERASED) || (block_word == LX_BLOCK_ERASE_STARTED))
 8015c00:	6a3b      	ldr	r3, [r7, #32]
 8015c02:	2b00      	cmp	r3, #0
 8015c04:	db02      	blt.n	8015c0c <_lx_nor_flash_open+0x23c>
 8015c06:	6a3b      	ldr	r3, [r7, #32]
 8015c08:	2b00      	cmp	r3, #0
 8015c0a:	d17b      	bne.n	8015d04 <_lx_nor_flash_open+0x334>

                /* This can happen if we were previously in the process of erasing the flash block and a 
                   power interruption occurs.  It should only occur once though. */

                /* Is this the first time?  */
                if (nor_flash -> lx_nor_flash_diagnostic_erased_block)
 8015c0c:	68fb      	ldr	r3, [r7, #12]
 8015c0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015c10:	2b00      	cmp	r3, #0
 8015c12:	d005      	beq.n	8015c20 <_lx_nor_flash_open+0x250>
                {
                            
                    /* No, this is a potential format error, since this should only happen once in a given
                       NOR flash format.  */
                    _lx_nor_flash_system_error(nor_flash, LX_SYSTEM_INVALID_BLOCK);
 8015c14:	215b      	movs	r1, #91	; 0x5b
 8015c16:	68f8      	ldr	r0, [r7, #12]
 8015c18:	f000 fe0a 	bl	8016830 <_lx_nor_flash_system_error>

                    /* Return an error.  */
                    return(LX_ERROR);
 8015c1c:	2301      	movs	r3, #1
 8015c1e:	e233      	b.n	8016088 <_lx_nor_flash_open+0x6b8>
                }

                /* Increment the erased block diagnostic.  */
                nor_flash -> lx_nor_flash_diagnostic_erased_block++;
 8015c20:	68fb      	ldr	r3, [r7, #12]
 8015c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015c24:	1c5a      	adds	r2, r3, #1
 8015c26:	68fb      	ldr	r3, [r7, #12]
 8015c28:	671a      	str	r2, [r3, #112]	; 0x70

                /* Check to see if the block is erased. */
                status =  (nor_flash -> lx_nor_flash_driver_block_erased_verify)(l);
 8015c2a:	68fb      	ldr	r3, [r7, #12]
 8015c2c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8015c30:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8015c32:	4798      	blx	r3
 8015c34:	6478      	str	r0, [r7, #68]	; 0x44

                /* Is the block completely erased?  */
                if (status != LX_SUCCESS)
 8015c36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015c38:	2b00      	cmp	r3, #0
 8015c3a:	d01e      	beq.n	8015c7a <_lx_nor_flash_open+0x2aa>
                {
                
                    /* Is this the first time?  */
                    if (nor_flash -> lx_nor_flash_diagnostic_re_erase_block)
 8015c3c:	68fb      	ldr	r3, [r7, #12]
 8015c3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015c40:	2b00      	cmp	r3, #0
 8015c42:	d005      	beq.n	8015c50 <_lx_nor_flash_open+0x280>
                    {
                            
                        /* No, this is a potential format error, since this should only happen once in a given
                           NOR flash format.  */
                        _lx_nor_flash_system_error(nor_flash, LX_SYSTEM_INVALID_BLOCK);
 8015c44:	215b      	movs	r1, #91	; 0x5b
 8015c46:	68f8      	ldr	r0, [r7, #12]
 8015c48:	f000 fdf2 	bl	8016830 <_lx_nor_flash_system_error>

                        /* Return an error.  */
                        return(LX_ERROR);
 8015c4c:	2301      	movs	r3, #1
 8015c4e:	e21b      	b.n	8016088 <_lx_nor_flash_open+0x6b8>
                    }

                    /* Increment the erased block diagnostic.  */
                    nor_flash -> lx_nor_flash_diagnostic_re_erase_block++;
 8015c50:	68fb      	ldr	r3, [r7, #12]
 8015c52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015c54:	1c5a      	adds	r2, r3, #1
 8015c56:	68fb      	ldr	r3, [r7, #12]
 8015c58:	675a      	str	r2, [r3, #116]	; 0x74
        
                    /* No, the block is not fully erased, erase it again.  */
                    status =  _lx_nor_flash_driver_block_erase(nor_flash, l, max_erased_count);
 8015c5a:	697b      	ldr	r3, [r7, #20]
 8015c5c:	461a      	mov	r2, r3
 8015c5e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8015c60:	68f8      	ldr	r0, [r7, #12]
 8015c62:	f7ff f9ff 	bl	8015064 <_lx_nor_flash_driver_block_erase>
 8015c66:	6478      	str	r0, [r7, #68]	; 0x44
                    
                    /* Check for an error from flash driver. Drivers should never return an error..  */
                    if (status)
 8015c68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015c6a:	2b00      	cmp	r3, #0
 8015c6c:	d005      	beq.n	8015c7a <_lx_nor_flash_open+0x2aa>
                    {
        
                        /* Call system error handler.  */
                        _lx_nor_flash_system_error(nor_flash, status);
 8015c6e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8015c70:	68f8      	ldr	r0, [r7, #12]
 8015c72:	f000 fddd 	bl	8016830 <_lx_nor_flash_system_error>

                        /* Return an error.  */
                        return(LX_ERROR);
 8015c76:	2301      	movs	r3, #1
 8015c78:	e206      	b.n	8016088 <_lx_nor_flash_open+0x6b8>
                }

                /* Setup the free bit map that corresponds to the free physical sectors in this
                   block. Note that we only need to setup the portion of the free bit map that doesn't 
                   have sectors associated with it.  */            
                status =  _lx_nor_flash_driver_write(nor_flash, block_word_ptr+(nor_flash -> lx_nor_flash_block_free_bit_map_offset + (bit_map_words-1)) , &bit_map_mask, 1);
 8015c7a:	68fb      	ldr	r3, [r7, #12]
 8015c7c:	699a      	ldr	r2, [r3, #24]
 8015c7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015c80:	4413      	add	r3, r2
 8015c82:	3b01      	subs	r3, #1
 8015c84:	009b      	lsls	r3, r3, #2
 8015c86:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8015c88:	18d1      	adds	r1, r2, r3
 8015c8a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8015c8e:	2301      	movs	r3, #1
 8015c90:	68f8      	ldr	r0, [r7, #12]
 8015c92:	f7ff fb2b 	bl	80152ec <_lx_nor_flash_driver_write>
 8015c96:	6478      	str	r0, [r7, #68]	; 0x44
        
                /* Check for an error from flash driver. Drivers should never return an error..  */
                if (status)
 8015c98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015c9a:	2b00      	cmp	r3, #0
 8015c9c:	d005      	beq.n	8015caa <_lx_nor_flash_open+0x2da>
                {
        
                    /* Call system error handler.  */
                    _lx_nor_flash_system_error(nor_flash, status);
 8015c9e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8015ca0:	68f8      	ldr	r0, [r7, #12]
 8015ca2:	f000 fdc5 	bl	8016830 <_lx_nor_flash_system_error>

                    /* Return an error.  */
                    return(LX_ERROR);
 8015ca6:	2301      	movs	r3, #1
 8015ca8:	e1ee      	b.n	8016088 <_lx_nor_flash_open+0x6b8>
                }

                /* Write the initial erase count for the block with upper bit set.  */            
                temp_erased_count =  (max_erased_count | LX_BLOCK_ERASED);
 8015caa:	697b      	ldr	r3, [r7, #20]
 8015cac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8015cb0:	613b      	str	r3, [r7, #16]
                status =  _lx_nor_flash_driver_write(nor_flash, block_word_ptr, &temp_erased_count, 1);
 8015cb2:	f107 0210 	add.w	r2, r7, #16
 8015cb6:	2301      	movs	r3, #1
 8015cb8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8015cba:	68f8      	ldr	r0, [r7, #12]
 8015cbc:	f7ff fb16 	bl	80152ec <_lx_nor_flash_driver_write>
 8015cc0:	6478      	str	r0, [r7, #68]	; 0x44

                /* Check for an error from flash driver. Drivers should never return an error..  */
                if (status)
 8015cc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015cc4:	2b00      	cmp	r3, #0
 8015cc6:	d005      	beq.n	8015cd4 <_lx_nor_flash_open+0x304>
                {
        
                    /* Call system error handler.  */
                    _lx_nor_flash_system_error(nor_flash, status);
 8015cc8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8015cca:	68f8      	ldr	r0, [r7, #12]
 8015ccc:	f000 fdb0 	bl	8016830 <_lx_nor_flash_system_error>

                    /* Return an error.  */
                    return(LX_ERROR);
 8015cd0:	2301      	movs	r3, #1
 8015cd2:	e1d9      	b.n	8016088 <_lx_nor_flash_open+0x6b8>
                }

                /* Write the final initial erase count for the block.  */            
                status =  _lx_nor_flash_driver_write(nor_flash, block_word_ptr, &max_erased_count, 1);
 8015cd4:	f107 0214 	add.w	r2, r7, #20
 8015cd8:	2301      	movs	r3, #1
 8015cda:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8015cdc:	68f8      	ldr	r0, [r7, #12]
 8015cde:	f7ff fb05 	bl	80152ec <_lx_nor_flash_driver_write>
 8015ce2:	6478      	str	r0, [r7, #68]	; 0x44

                /* Check for an error from flash driver. Drivers should never return an error..  */
                if (status)
 8015ce4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015ce6:	2b00      	cmp	r3, #0
 8015ce8:	d005      	beq.n	8015cf6 <_lx_nor_flash_open+0x326>
                {
        
                    /* Call system error handler.  */
                    _lx_nor_flash_system_error(nor_flash, status);
 8015cea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8015cec:	68f8      	ldr	r0, [r7, #12]
 8015cee:	f000 fd9f 	bl	8016830 <_lx_nor_flash_system_error>

                    /* Return an error.  */
                    return(LX_ERROR);
 8015cf2:	2301      	movs	r3, #1
 8015cf4:	e1c8      	b.n	8016088 <_lx_nor_flash_open+0x6b8>
                }

                /* Update the number of free physical sectors.  */
                nor_flash -> lx_nor_flash_free_physical_sectors =   nor_flash -> lx_nor_flash_free_physical_sectors + sectors_per_block;
 8015cf6:	68fb      	ldr	r3, [r7, #12]
 8015cf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015cfa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015cfc:	441a      	add	r2, r3
 8015cfe:	68fb      	ldr	r3, [r7, #12]
 8015d00:	62da      	str	r2, [r3, #44]	; 0x2c
 8015d02:	e15b      	b.n	8015fbc <_lx_nor_flash_open+0x5ec>
            }
            else
            {

                /* Calculate the number of free sectors from the free sector bit map.  */
                free_sectors =  0;
 8015d04:	2300      	movs	r3, #0
 8015d06:	66bb      	str	r3, [r7, #104]	; 0x68
                for (j = 0; j < bit_map_words; j++)
 8015d08:	2300      	movs	r3, #0
 8015d0a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8015d0c:	e036      	b.n	8015d7c <_lx_nor_flash_open+0x3ac>
#ifdef LX_DIRECT_READ
        
                    /* Read the word directly.  */
                    block_word =  *(block_word_ptr + nor_flash -> lx_nor_flash_block_free_bit_map_offset + j);
#else
                    status =  _lx_nor_flash_driver_read(nor_flash, (block_word_ptr + nor_flash -> lx_nor_flash_block_free_bit_map_offset + j), &block_word, 1);
 8015d0e:	68fb      	ldr	r3, [r7, #12]
 8015d10:	699a      	ldr	r2, [r3, #24]
 8015d12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015d14:	4413      	add	r3, r2
 8015d16:	009b      	lsls	r3, r3, #2
 8015d18:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8015d1a:	18d1      	adds	r1, r2, r3
 8015d1c:	f107 0220 	add.w	r2, r7, #32
 8015d20:	2301      	movs	r3, #1
 8015d22:	68f8      	ldr	r0, [r7, #12]
 8015d24:	f7ff f9fc 	bl	8015120 <_lx_nor_flash_driver_read>
 8015d28:	6478      	str	r0, [r7, #68]	; 0x44

                    /* Check for an error from flash driver. Drivers should never return an error..  */
                    if (status)
 8015d2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015d2c:	2b00      	cmp	r3, #0
 8015d2e:	d005      	beq.n	8015d3c <_lx_nor_flash_open+0x36c>
                    {
        
                        /* Call system error handler.  */
                        _lx_nor_flash_system_error(nor_flash, status);
 8015d30:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8015d32:	68f8      	ldr	r0, [r7, #12]
 8015d34:	f000 fd7c 	bl	8016830 <_lx_nor_flash_system_error>

                        /* Return an error.  */
                        return(LX_ERROR);
 8015d38:	2301      	movs	r3, #1
 8015d3a:	e1a5      	b.n	8016088 <_lx_nor_flash_open+0x6b8>
                    }
#endif
                    
                    /* Count the number of set bits (free sectors).  */
                    for (k = 0; k < 32; k++)
 8015d3c:	2300      	movs	r3, #0
 8015d3e:	65bb      	str	r3, [r7, #88]	; 0x58
 8015d40:	e016      	b.n	8015d70 <_lx_nor_flash_open+0x3a0>
                    {
                    
                        /* Is this sector free?  */
                        if (block_word & 1)
 8015d42:	6a3b      	ldr	r3, [r7, #32]
 8015d44:	f003 0301 	and.w	r3, r3, #1
 8015d48:	2b00      	cmp	r3, #0
 8015d4a:	d00b      	beq.n	8015d64 <_lx_nor_flash_open+0x394>
                        {
                            /* Yes, this sector is free, increment the free sectors count.  */
                            free_sectors++;
 8015d4c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015d4e:	3301      	adds	r3, #1
 8015d50:	66bb      	str	r3, [r7, #104]	; 0x68
                            
                            /* Determine if we need to update the search pointer.  */
                            if (nor_flash -> lx_nor_flash_free_block_search == nor_flash -> lx_nor_flash_total_blocks)
 8015d52:	68fb      	ldr	r3, [r7, #12]
 8015d54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8015d56:	68fb      	ldr	r3, [r7, #12]
 8015d58:	685b      	ldr	r3, [r3, #4]
 8015d5a:	429a      	cmp	r2, r3
 8015d5c:	d102      	bne.n	8015d64 <_lx_nor_flash_open+0x394>
                            {
                            
                                /* Remember the block with free sectors.  */
                                nor_flash -> lx_nor_flash_free_block_search =  l;
 8015d5e:	68fb      	ldr	r3, [r7, #12]
 8015d60:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8015d62:	641a      	str	r2, [r3, #64]	; 0x40
                            }
                        }
                        
                        /* Shift down the free sector.  */
                        block_word =  block_word >> 1;
 8015d64:	6a3b      	ldr	r3, [r7, #32]
 8015d66:	085b      	lsrs	r3, r3, #1
 8015d68:	623b      	str	r3, [r7, #32]
                    for (k = 0; k < 32; k++)
 8015d6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015d6c:	3301      	adds	r3, #1
 8015d6e:	65bb      	str	r3, [r7, #88]	; 0x58
 8015d70:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015d72:	2b1f      	cmp	r3, #31
 8015d74:	d9e5      	bls.n	8015d42 <_lx_nor_flash_open+0x372>
                for (j = 0; j < bit_map_words; j++)
 8015d76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015d78:	3301      	adds	r3, #1
 8015d7a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8015d7c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8015d7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015d80:	429a      	cmp	r2, r3
 8015d82:	d3c4      	bcc.n	8015d0e <_lx_nor_flash_open+0x33e>
                    }
                }
                    
                /* Update the number of free physical sectors.  */
                nor_flash -> lx_nor_flash_free_physical_sectors =   nor_flash -> lx_nor_flash_free_physical_sectors + free_sectors;
 8015d84:	68fb      	ldr	r3, [r7, #12]
 8015d86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015d88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015d8a:	441a      	add	r2, r3
 8015d8c:	68fb      	ldr	r3, [r7, #12]
 8015d8e:	62da      	str	r2, [r3, #44]	; 0x2c

                /* We need to now examine the mapping list.  */
                    
                /* Calculate how many non-free sectors there are - this includes valid and obsolete sectors.  */
                used_sectors =  sectors_per_block - free_sectors;
 8015d90:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8015d92:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015d94:	1ad3      	subs	r3, r2, r3
 8015d96:	667b      	str	r3, [r7, #100]	; 0x64
                    
                /* Now walk the list of logical-physical sector mapping.  */
                for (j = 0; j < sectors_per_block; j++)
 8015d98:	2300      	movs	r3, #0
 8015d9a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8015d9c:	e109      	b.n	8015fb2 <_lx_nor_flash_open+0x5e2>
#ifdef LX_DIRECT_READ
        
                    /* Read the word directly.  */
                    block_word =  *(block_word_ptr + nor_flash -> lx_nor_flash_block_physical_sector_mapping_offset + j);
#else
                    status =  _lx_nor_flash_driver_read(nor_flash, (block_word_ptr + nor_flash -> lx_nor_flash_block_physical_sector_mapping_offset + j), &block_word, 1);
 8015d9e:	68fb      	ldr	r3, [r7, #12]
 8015da0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015da2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015da4:	4413      	add	r3, r2
 8015da6:	009b      	lsls	r3, r3, #2
 8015da8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8015daa:	18d1      	adds	r1, r2, r3
 8015dac:	f107 0220 	add.w	r2, r7, #32
 8015db0:	2301      	movs	r3, #1
 8015db2:	68f8      	ldr	r0, [r7, #12]
 8015db4:	f7ff f9b4 	bl	8015120 <_lx_nor_flash_driver_read>
 8015db8:	6478      	str	r0, [r7, #68]	; 0x44

                    /* Check for an error from flash driver. Drivers should never return an error..  */
                    if (status)
 8015dba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015dbc:	2b00      	cmp	r3, #0
 8015dbe:	d005      	beq.n	8015dcc <_lx_nor_flash_open+0x3fc>
                    {
        
                        /* Call system error handler.  */
                        _lx_nor_flash_system_error(nor_flash, status);
 8015dc0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8015dc2:	68f8      	ldr	r0, [r7, #12]
 8015dc4:	f000 fd34 	bl	8016830 <_lx_nor_flash_system_error>

                        /* Return an error.  */
                        return(LX_ERROR);
 8015dc8:	2301      	movs	r3, #1
 8015dca:	e15d      	b.n	8016088 <_lx_nor_flash_open+0x6b8>
                    }
#endif

                    /* Determine if we are expecting to find a used sector.   */
                    if (used_sectors)
 8015dcc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015dce:	2b00      	cmp	r3, #0
 8015dd0:	f000 80c4 	beq.w	8015f5c <_lx_nor_flash_open+0x58c>
                    {

                        /* Yes, we expect this entry to be used.  */

                        /* Is this sector in-use?  */
                        if ((block_word & LX_NOR_LOGICAL_SECTOR_MASK) != LX_NOR_LOGICAL_SECTOR_MASK)
 8015dd4:	6a3b      	ldr	r3, [r7, #32]
 8015dd6:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8015dda:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 8015dde:	4293      	cmp	r3, r2
 8015de0:	d051      	beq.n	8015e86 <_lx_nor_flash_open+0x4b6>
                        {

                            /* Determine if the valid bit is set and the superceded bit is clear. This indicates the block was 
                               about to become obsolete.  */
                            if ((block_word & LX_NOR_PHYSICAL_SECTOR_VALID) && ((block_word & LX_NOR_PHYSICAL_SECTOR_SUPERCEDED) == 0))
 8015de2:	6a3b      	ldr	r3, [r7, #32]
 8015de4:	2b00      	cmp	r3, #0
 8015de6:	da7d      	bge.n	8015ee4 <_lx_nor_flash_open+0x514>
 8015de8:	6a3b      	ldr	r3, [r7, #32]
 8015dea:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8015dee:	2b00      	cmp	r3, #0
 8015df0:	d178      	bne.n	8015ee4 <_lx_nor_flash_open+0x514>
                            {


                                /* Increment the being obsoleted count.  */
                                nor_flash -> lx_nor_flash_diagnostic_sector_being_obsoleted++;
 8015df2:	68fb      	ldr	r3, [r7, #12]
 8015df4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015df6:	1c5a      	adds	r2, r3, #1
 8015df8:	68fb      	ldr	r3, [r7, #12]
 8015dfa:	679a      	str	r2, [r3, #120]	; 0x78

                                /* Save the currently mapped physical sectors.  */
                                temp =  nor_flash -> lx_nor_flash_mapped_physical_sectors;
 8015dfc:	68fb      	ldr	r3, [r7, #12]
 8015dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015e00:	643b      	str	r3, [r7, #64]	; 0x40
                                
                                /* Indicate all the physical sectors are mapped for the purpose of this search.  */
                                nor_flash -> lx_nor_flash_mapped_physical_sectors =  nor_flash -> lx_nor_flash_total_physical_sectors;
 8015e02:	68fb      	ldr	r3, [r7, #12]
 8015e04:	68da      	ldr	r2, [r3, #12]
 8015e06:	68fb      	ldr	r3, [r7, #12]
 8015e08:	631a      	str	r2, [r3, #48]	; 0x30

                                /* Yes, this block was about to become obsolete. Perform a search for a logical sector entry that
                                   has both of these bits set.  */
                                _lx_nor_flash_logical_sector_find(nor_flash, (block_word & LX_NOR_LOGICAL_SECTOR_MASK), LX_TRUE, &new_map_entry, &new_sector_address);
 8015e0a:	6a3b      	ldr	r3, [r7, #32]
 8015e0c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8015e10:	f107 021c 	add.w	r2, r7, #28
 8015e14:	f107 0318 	add.w	r3, r7, #24
 8015e18:	9300      	str	r3, [sp, #0]
 8015e1a:	4613      	mov	r3, r2
 8015e1c:	2201      	movs	r2, #1
 8015e1e:	68f8      	ldr	r0, [r7, #12]
 8015e20:	f7ff fabc 	bl	801539c <_lx_nor_flash_logical_sector_find>

                                /* Restore the number of mapped physical sectors.  */
                                nor_flash -> lx_nor_flash_mapped_physical_sectors =  temp;
 8015e24:	68fb      	ldr	r3, [r7, #12]
 8015e26:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015e28:	631a      	str	r2, [r3, #48]	; 0x30

                                /* Determine if the new logical sector entry is present.  */
                                if (new_map_entry)
 8015e2a:	69fb      	ldr	r3, [r7, #28]
 8015e2c:	2b00      	cmp	r3, #0
 8015e2e:	d059      	beq.n	8015ee4 <_lx_nor_flash_open+0x514>
                                {
                                
                                    /* Yes, make the current entry obsolete in favor of the new entry.  */
                                    block_word =  block_word & ~((ULONG) LX_NOR_PHYSICAL_SECTOR_VALID);
 8015e30:	6a3b      	ldr	r3, [r7, #32]
 8015e32:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015e36:	623b      	str	r3, [r7, #32]
                                    status =  _lx_nor_flash_driver_write(nor_flash, (block_word_ptr + nor_flash -> lx_nor_flash_block_physical_sector_mapping_offset + j), &block_word, 1);
 8015e38:	68fb      	ldr	r3, [r7, #12]
 8015e3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015e3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015e3e:	4413      	add	r3, r2
 8015e40:	009b      	lsls	r3, r3, #2
 8015e42:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8015e44:	18d1      	adds	r1, r2, r3
 8015e46:	f107 0220 	add.w	r2, r7, #32
 8015e4a:	2301      	movs	r3, #1
 8015e4c:	68f8      	ldr	r0, [r7, #12]
 8015e4e:	f7ff fa4d 	bl	80152ec <_lx_nor_flash_driver_write>
 8015e52:	6478      	str	r0, [r7, #68]	; 0x44

                                    /* Check for an error from flash driver. Drivers should never return an error..  */
                                    if (status)
 8015e54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015e56:	2b00      	cmp	r3, #0
 8015e58:	d005      	beq.n	8015e66 <_lx_nor_flash_open+0x496>
                                    {
        
                                        /* Call system error handler.  */
                                        _lx_nor_flash_system_error(nor_flash, status);
 8015e5a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8015e5c:	68f8      	ldr	r0, [r7, #12]
 8015e5e:	f000 fce7 	bl	8016830 <_lx_nor_flash_system_error>

                                        /* Return an error.  */
                                        return(LX_ERROR);
 8015e62:	2301      	movs	r3, #1
 8015e64:	e110      	b.n	8016088 <_lx_nor_flash_open+0x6b8>
                                    }
                                    
                                    /* Is this the first time?  */
                                    if (nor_flash -> lx_nor_flash_diagnostic_sector_obsoleted)
 8015e66:	68fb      	ldr	r3, [r7, #12]
 8015e68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015e6a:	2b00      	cmp	r3, #0
 8015e6c:	d005      	beq.n	8015e7a <_lx_nor_flash_open+0x4aa>
                                    {
                            
                                        /* No, this is a potential format error, since this should only happen once in a given
                                           NOR flash format.  */
                                        _lx_nor_flash_system_error(nor_flash, LX_SYSTEM_INVALID_FORMAT);
 8015e6e:	215a      	movs	r1, #90	; 0x5a
 8015e70:	68f8      	ldr	r0, [r7, #12]
 8015e72:	f000 fcdd 	bl	8016830 <_lx_nor_flash_system_error>

                                        /* Return an error.  */
                                        return(LX_ERROR);
 8015e76:	2301      	movs	r3, #1
 8015e78:	e106      	b.n	8016088 <_lx_nor_flash_open+0x6b8>
                                    }

                                    /* Increment the obsoleted count.  */
                                    nor_flash -> lx_nor_flash_diagnostic_sector_obsoleted++;
 8015e7a:	68fb      	ldr	r3, [r7, #12]
 8015e7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015e7e:	1c5a      	adds	r2, r3, #1
 8015e80:	68fb      	ldr	r3, [r7, #12]
 8015e82:	67da      	str	r2, [r3, #124]	; 0x7c
 8015e84:	e02e      	b.n	8015ee4 <_lx_nor_flash_open+0x514>
                                }
                            }
                        }    
                        
                        /* Determine if the sector is free.  */
                        else if (block_word == LX_NOR_PHYSICAL_SECTOR_FREE)
 8015e86:	6a3b      	ldr	r3, [r7, #32]
 8015e88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015e8c:	d12a      	bne.n	8015ee4 <_lx_nor_flash_open+0x514>
                        
                            /* A free entry when there are still used sectors implies that the sector was allocated and a power interruption 
                               took place prior to writing the new logical sector number into the list.  */
                            
                            /* Is this the first time?  */
                            if (nor_flash -> lx_nor_flash_diagnostic_mapping_invalidated)
 8015e8e:	68fb      	ldr	r3, [r7, #12]
 8015e90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015e94:	2b00      	cmp	r3, #0
 8015e96:	d005      	beq.n	8015ea4 <_lx_nor_flash_open+0x4d4>
                            {
                            
                                /* No, this is a potential format error, since this should only happen once in a given
                                   NOR flash format.  */
                                _lx_nor_flash_system_error(nor_flash, LX_SYSTEM_INVALID_FORMAT);
 8015e98:	215a      	movs	r1, #90	; 0x5a
 8015e9a:	68f8      	ldr	r0, [r7, #12]
 8015e9c:	f000 fcc8 	bl	8016830 <_lx_nor_flash_system_error>

                                /* Return an error.  */
                                return(LX_ERROR);
 8015ea0:	2301      	movs	r3, #1
 8015ea2:	e0f1      	b.n	8016088 <_lx_nor_flash_open+0x6b8>
                            }
                            
                            /* Write 0s out to this entry to invalidate the sector entry.  */
                            block_word =  0;
 8015ea4:	2300      	movs	r3, #0
 8015ea6:	623b      	str	r3, [r7, #32]
                            status =  _lx_nor_flash_driver_write(nor_flash, (block_word_ptr + nor_flash -> lx_nor_flash_block_physical_sector_mapping_offset + j), &block_word, 1);
 8015ea8:	68fb      	ldr	r3, [r7, #12]
 8015eaa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015eac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015eae:	4413      	add	r3, r2
 8015eb0:	009b      	lsls	r3, r3, #2
 8015eb2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8015eb4:	18d1      	adds	r1, r2, r3
 8015eb6:	f107 0220 	add.w	r2, r7, #32
 8015eba:	2301      	movs	r3, #1
 8015ebc:	68f8      	ldr	r0, [r7, #12]
 8015ebe:	f7ff fa15 	bl	80152ec <_lx_nor_flash_driver_write>
 8015ec2:	6478      	str	r0, [r7, #68]	; 0x44

                            /* Check for an error from flash driver. Drivers should never return an error..  */
                            if (status)
 8015ec4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015ec6:	2b00      	cmp	r3, #0
 8015ec8:	d005      	beq.n	8015ed6 <_lx_nor_flash_open+0x506>
                            {
        
                                /* Call system error handler.  */
                                _lx_nor_flash_system_error(nor_flash, status);
 8015eca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8015ecc:	68f8      	ldr	r0, [r7, #12]
 8015ece:	f000 fcaf 	bl	8016830 <_lx_nor_flash_system_error>

                                /* Return an error.  */
                                return(LX_ERROR);
 8015ed2:	2301      	movs	r3, #1
 8015ed4:	e0d8      	b.n	8016088 <_lx_nor_flash_open+0x6b8>
                            }

                            /* Increment the number of mapping invalidates.  */                            
                            nor_flash -> lx_nor_flash_diagnostic_mapping_invalidated++;
 8015ed6:	68fb      	ldr	r3, [r7, #12]
 8015ed8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015edc:	1c5a      	adds	r2, r3, #1
 8015ede:	68fb      	ldr	r3, [r7, #12]
 8015ee0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                        }
                        
                        /* Yes, now determine if the sector is obsolete.  */
                        if ((block_word & LX_NOR_PHYSICAL_SECTOR_VALID) == 0)
 8015ee4:	6a3b      	ldr	r3, [r7, #32]
 8015ee6:	2b00      	cmp	r3, #0
 8015ee8:	db05      	blt.n	8015ef6 <_lx_nor_flash_open+0x526>
                        {
                                
                            /* Increment the number of obsolete sectors.  */
                            nor_flash -> lx_nor_flash_obsolete_physical_sectors++;
 8015eea:	68fb      	ldr	r3, [r7, #12]
 8015eec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015eee:	1c5a      	adds	r2, r3, #1
 8015ef0:	68fb      	ldr	r3, [r7, #12]
 8015ef2:	635a      	str	r2, [r3, #52]	; 0x34
 8015ef4:	e02e      	b.n	8015f54 <_lx_nor_flash_open+0x584>
                        }

                        /* Determine if the mapping for this sector isn't yet valid.  */
                        else if (block_word & LX_NOR_PHYSICAL_SECTOR_MAPPING_NOT_VALID)
 8015ef6:	6a3b      	ldr	r3, [r7, #32]
 8015ef8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8015efc:	2b00      	cmp	r3, #0
 8015efe:	d024      	beq.n	8015f4a <_lx_nor_flash_open+0x57a>
                        {
                       
                            /* Yes, a power interruption or reset occurred while the sector mapping entry was being written.  */

                            /* Increment the number of obsolete sectors.  */
                            nor_flash -> lx_nor_flash_obsolete_physical_sectors++;
 8015f00:	68fb      	ldr	r3, [r7, #12]
 8015f02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015f04:	1c5a      	adds	r2, r3, #1
 8015f06:	68fb      	ldr	r3, [r7, #12]
 8015f08:	635a      	str	r2, [r3, #52]	; 0x34
                            
                            /* Increment the interrupted mapping counter.  */                           
                            nor_flash -> lx_nor_flash_diagnostic_mapping_write_interrupted++;
 8015f0a:	68fb      	ldr	r3, [r7, #12]
 8015f0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015f10:	1c5a      	adds	r2, r3, #1
 8015f12:	68fb      	ldr	r3, [r7, #12]
 8015f14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

                            /* Invalidate this entry - clearing valid bit, superceded bit and logical sector.  */
                            block_word =  0;
 8015f18:	2300      	movs	r3, #0
 8015f1a:	623b      	str	r3, [r7, #32]
                            status =  _lx_nor_flash_driver_write(nor_flash, (block_word_ptr + nor_flash -> lx_nor_flash_block_physical_sector_mapping_offset + j), &block_word, 1);
 8015f1c:	68fb      	ldr	r3, [r7, #12]
 8015f1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015f20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015f22:	4413      	add	r3, r2
 8015f24:	009b      	lsls	r3, r3, #2
 8015f26:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8015f28:	18d1      	adds	r1, r2, r3
 8015f2a:	f107 0220 	add.w	r2, r7, #32
 8015f2e:	2301      	movs	r3, #1
 8015f30:	68f8      	ldr	r0, [r7, #12]
 8015f32:	f7ff f9db 	bl	80152ec <_lx_nor_flash_driver_write>
 8015f36:	6478      	str	r0, [r7, #68]	; 0x44

                            /* Check for an error from flash driver. Drivers should never return an error..  */
                            if (status)
 8015f38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015f3a:	2b00      	cmp	r3, #0
 8015f3c:	d00a      	beq.n	8015f54 <_lx_nor_flash_open+0x584>
                            {
        
                                /* Call system error handler.  */
                                _lx_nor_flash_system_error(nor_flash, status);
 8015f3e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8015f40:	68f8      	ldr	r0, [r7, #12]
 8015f42:	f000 fc75 	bl	8016830 <_lx_nor_flash_system_error>

                                /* Return an error.  */
                                return(LX_ERROR);
 8015f46:	2301      	movs	r3, #1
 8015f48:	e09e      	b.n	8016088 <_lx_nor_flash_open+0x6b8>
                            }
                        }
                        else
                        {
                            /* Increment the number of mapped physical sectors.  */
                            nor_flash -> lx_nor_flash_mapped_physical_sectors++;
 8015f4a:	68fb      	ldr	r3, [r7, #12]
 8015f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015f4e:	1c5a      	adds	r2, r3, #1
 8015f50:	68fb      	ldr	r3, [r7, #12]
 8015f52:	631a      	str	r2, [r3, #48]	; 0x30
                        }
                        
                        /* Decrease the number of used sectors.  */
                        used_sectors--;
 8015f54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015f56:	3b01      	subs	r3, #1
 8015f58:	667b      	str	r3, [r7, #100]	; 0x64
 8015f5a:	e027      	b.n	8015fac <_lx_nor_flash_open+0x5dc>
                    {
                    
                        /* No more used sectors in this flash block.  */
                    
                        /* In this case the entry must be free or there is a serious NOR flash format error present.  */
                        if (block_word != LX_NOR_PHYSICAL_SECTOR_FREE)
 8015f5c:	6a3b      	ldr	r3, [r7, #32]
 8015f5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015f62:	d023      	beq.n	8015fac <_lx_nor_flash_open+0x5dc>
                        {
                        
                            /* Increment the sector not free diagnostic.  */
                            nor_flash -> lx_nor_flash_diagnostic_sector_not_free++;
 8015f64:	68fb      	ldr	r3, [r7, #12]
 8015f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015f6a:	1c5a      	adds	r2, r3, #1
 8015f6c:	68fb      	ldr	r3, [r7, #12]
 8015f6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

                            /* NOR flash format.  */
                            _lx_nor_flash_system_error(nor_flash, LX_SYSTEM_INVALID_FORMAT);
 8015f72:	215a      	movs	r1, #90	; 0x5a
 8015f74:	68f8      	ldr	r0, [r7, #12]
 8015f76:	f000 fc5b 	bl	8016830 <_lx_nor_flash_system_error>

                            /* Write 0s out to this entry to invalidate the sector entry.  */
                            block_word =  0;
 8015f7a:	2300      	movs	r3, #0
 8015f7c:	623b      	str	r3, [r7, #32]
                            status =  _lx_nor_flash_driver_write(nor_flash, (block_word_ptr + nor_flash -> lx_nor_flash_block_physical_sector_mapping_offset + j), &block_word, 1);
 8015f7e:	68fb      	ldr	r3, [r7, #12]
 8015f80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015f82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015f84:	4413      	add	r3, r2
 8015f86:	009b      	lsls	r3, r3, #2
 8015f88:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8015f8a:	18d1      	adds	r1, r2, r3
 8015f8c:	f107 0220 	add.w	r2, r7, #32
 8015f90:	2301      	movs	r3, #1
 8015f92:	68f8      	ldr	r0, [r7, #12]
 8015f94:	f7ff f9aa 	bl	80152ec <_lx_nor_flash_driver_write>
 8015f98:	6478      	str	r0, [r7, #68]	; 0x44

                            /* Check for an error from flash driver. Drivers should never return an error..  */
                            if (status)
 8015f9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015f9c:	2b00      	cmp	r3, #0
 8015f9e:	d005      	beq.n	8015fac <_lx_nor_flash_open+0x5dc>
                            {
        
                                /* Call system error handler.  */
                                _lx_nor_flash_system_error(nor_flash, status);
 8015fa0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8015fa2:	68f8      	ldr	r0, [r7, #12]
 8015fa4:	f000 fc44 	bl	8016830 <_lx_nor_flash_system_error>

                                /* Return an error.  */
                                return(LX_ERROR);
 8015fa8:	2301      	movs	r3, #1
 8015faa:	e06d      	b.n	8016088 <_lx_nor_flash_open+0x6b8>
                for (j = 0; j < sectors_per_block; j++)
 8015fac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015fae:	3301      	adds	r3, #1
 8015fb0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8015fb2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8015fb4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015fb6:	429a      	cmp	r2, r3
 8015fb8:	f4ff aef1 	bcc.w	8015d9e <_lx_nor_flash_open+0x3ce>
                    }
                }
            }       
            
            /* Move to the next flash block.  */
            block_word_ptr =  block_word_ptr + (nor_flash -> lx_nor_flash_words_per_block);
 8015fbc:	68fb      	ldr	r3, [r7, #12]
 8015fbe:	689b      	ldr	r3, [r3, #8]
 8015fc0:	009b      	lsls	r3, r3, #2
 8015fc2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8015fc4:	4413      	add	r3, r2
 8015fc6:	66fb      	str	r3, [r7, #108]	; 0x6c
        for (l = 0; l < nor_flash -> lx_nor_flash_total_blocks; l++)
 8015fc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015fca:	3301      	adds	r3, #1
 8015fcc:	657b      	str	r3, [r7, #84]	; 0x54
 8015fce:	68fb      	ldr	r3, [r7, #12]
 8015fd0:	685b      	ldr	r3, [r3, #4]
 8015fd2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8015fd4:	429a      	cmp	r2, r3
 8015fd6:	f4ff ae02 	bcc.w	8015bde <_lx_nor_flash_open+0x20e>
        }

        /* Update the overall minimum and maximum erase count.  */
        nor_flash -> lx_nor_flash_minimum_erase_count =  min_erased_count;
 8015fda:	68fb      	ldr	r3, [r7, #12]
 8015fdc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8015fde:	639a      	str	r2, [r3, #56]	; 0x38
        nor_flash -> lx_nor_flash_maximum_erase_count =  max_erased_count;
 8015fe0:	697a      	ldr	r2, [r7, #20]
 8015fe2:	68fb      	ldr	r3, [r7, #12]
 8015fe4:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Determine if we need to update the free sector search pointer.  */
        if (nor_flash -> lx_nor_flash_free_block_search == nor_flash -> lx_nor_flash_total_blocks)
 8015fe6:	68fb      	ldr	r3, [r7, #12]
 8015fe8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8015fea:	68fb      	ldr	r3, [r7, #12]
 8015fec:	685b      	ldr	r3, [r3, #4]
 8015fee:	429a      	cmp	r2, r3
 8015ff0:	d102      	bne.n	8015ff8 <_lx_nor_flash_open+0x628>
        {
                            
            /* Just start at the beginning.  */
            nor_flash -> lx_nor_flash_free_block_search =  0;
 8015ff2:	68fb      	ldr	r3, [r7, #12]
 8015ff4:	2200      	movs	r2, #0
 8015ff6:	641a      	str	r2, [r3, #64]	; 0x40
        return(LX_ERROR);
    }
#endif

    /* Enable the sector mapping cache.  */
    nor_flash -> lx_nor_flash_sector_mapping_cache_enabled =  LX_TRUE;
 8015ff8:	68fb      	ldr	r3, [r7, #12]
 8015ffa:	2201      	movs	r2, #1
 8015ffc:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

    /* Initialize the last found block and sector markers.  */
    nor_flash -> lx_nor_flash_found_block_search =   0;
 8016000:	68fb      	ldr	r3, [r7, #12]
 8016002:	2200      	movs	r2, #0
 8016004:	645a      	str	r2, [r3, #68]	; 0x44
    nor_flash -> lx_nor_flash_found_sector_search =  0;
 8016006:	68fb      	ldr	r3, [r7, #12]
 8016008:	2200      	movs	r2, #0
 801600a:	649a      	str	r2, [r3, #72]	; 0x48
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801600c:	f3ef 8310 	mrs	r3, PRIMASK
 8016010:	633b      	str	r3, [r7, #48]	; 0x30
    return(posture);
 8016012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    int_posture = __get_interrupt_posture();
 8016014:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 8016016:	b672      	cpsid	i
    return(int_posture);
 8016018:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    /* Lockout interrupts.  */
    LX_DISABLE
 801601a:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* At this point, the NOR flash has been opened successfully.  Place the 
       NOR flash control block on the linked list of currently opened NOR flashes.  */

    /* Set the NOR flash state to open.  */
    nor_flash -> lx_nor_flash_state =  LX_NOR_FLASH_OPENED;
 801601c:	68fb      	ldr	r3, [r7, #12]
 801601e:	4a1c      	ldr	r2, [pc, #112]	; (8016090 <_lx_nor_flash_open+0x6c0>)
 8016020:	601a      	str	r2, [r3, #0]

    /* Place the NOR flash control block on the list of opened NOR flashes.  First,
       check for an empty list.  */
    if (_lx_nor_flash_opened_count)
 8016022:	4b1c      	ldr	r3, [pc, #112]	; (8016094 <_lx_nor_flash_open+0x6c4>)
 8016024:	681b      	ldr	r3, [r3, #0]
 8016026:	2b00      	cmp	r3, #0
 8016028:	d017      	beq.n	801605a <_lx_nor_flash_open+0x68a>
    {

        /* List is not empty - other NOR flashes are open.  */

        /* Pickup tail pointer.  */
        tail_ptr =  _lx_nor_flash_opened_ptr -> lx_nor_flash_open_previous;
 801602a:	4b1b      	ldr	r3, [pc, #108]	; (8016098 <_lx_nor_flash_open+0x6c8>)
 801602c:	681b      	ldr	r3, [r3, #0]
 801602e:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 8016032:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Place the new NOR flash control block in the list.  */
        _lx_nor_flash_opened_ptr -> lx_nor_flash_open_previous =  nor_flash;
 8016034:	4b18      	ldr	r3, [pc, #96]	; (8016098 <_lx_nor_flash_open+0x6c8>)
 8016036:	681b      	ldr	r3, [r3, #0]
 8016038:	68fa      	ldr	r2, [r7, #12]
 801603a:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
        tail_ptr -> lx_nor_flash_open_next =                       nor_flash;
 801603e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016040:	68fa      	ldr	r2, [r7, #12]
 8016042:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8

        /* Setup this NOR flash's opened links.  */
        nor_flash -> lx_nor_flash_open_previous =  tail_ptr;
 8016046:	68fb      	ldr	r3, [r7, #12]
 8016048:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801604a:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
        nor_flash -> lx_nor_flash_open_next =      _lx_nor_flash_opened_ptr;   
 801604e:	4b12      	ldr	r3, [pc, #72]	; (8016098 <_lx_nor_flash_open+0x6c8>)
 8016050:	681a      	ldr	r2, [r3, #0]
 8016052:	68fb      	ldr	r3, [r7, #12]
 8016054:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
 8016058:	e00a      	b.n	8016070 <_lx_nor_flash_open+0x6a0>
    }
    else
    {

        /* The opened NOR flash list is empty.  Add the NOR flash to empty list.  */
        _lx_nor_flash_opened_ptr =                 nor_flash;
 801605a:	4a0f      	ldr	r2, [pc, #60]	; (8016098 <_lx_nor_flash_open+0x6c8>)
 801605c:	68fb      	ldr	r3, [r7, #12]
 801605e:	6013      	str	r3, [r2, #0]
        nor_flash -> lx_nor_flash_open_next =      nor_flash;
 8016060:	68fb      	ldr	r3, [r7, #12]
 8016062:	68fa      	ldr	r2, [r7, #12]
 8016064:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
        nor_flash -> lx_nor_flash_open_previous =  nor_flash;
 8016068:	68fb      	ldr	r3, [r7, #12]
 801606a:	68fa      	ldr	r2, [r7, #12]
 801606c:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
    }

    /* Increment the opened NOR flash counter.  */
    _lx_nor_flash_opened_count++;
 8016070:	4b08      	ldr	r3, [pc, #32]	; (8016094 <_lx_nor_flash_open+0x6c4>)
 8016072:	681b      	ldr	r3, [r3, #0]
 8016074:	3301      	adds	r3, #1
 8016076:	4a07      	ldr	r2, [pc, #28]	; (8016094 <_lx_nor_flash_open+0x6c4>)
 8016078:	6013      	str	r3, [r2, #0]
 801607a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801607c:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801607e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016080:	f383 8810 	msr	PRIMASK, r3
}
 8016084:	bf00      	nop

    /* Restore interrupts.  */
    LX_RESTORE

    /* Return a successful completion.  */
    return(LX_SUCCESS);
 8016086:	2300      	movs	r3, #0
}
 8016088:	4618      	mov	r0, r3
 801608a:	3778      	adds	r7, #120	; 0x78
 801608c:	46bd      	mov	sp, r7
 801608e:	bd80      	pop	{r7, pc}
 8016090:	4e4f524f 	.word	0x4e4f524f
 8016094:	2001520c 	.word	0x2001520c
 8016098:	20015208 	.word	0x20015208

0801609c <_lx_nor_flash_physical_sector_allocate>:
/*  06-02-2021     Bhupendra Naphade        Modified comment(s),          */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UINT  _lx_nor_flash_physical_sector_allocate(LX_NOR_FLASH *nor_flash, ULONG logical_sector, ULONG **physical_sector_map_entry, ULONG **physical_sector_address)
{
 801609c:	b580      	push	{r7, lr}
 801609e:	b090      	sub	sp, #64	; 0x40
 80160a0:	af00      	add	r7, sp, #0
 80160a2:	60f8      	str	r0, [r7, #12]
 80160a4:	60b9      	str	r1, [r7, #8]
 80160a6:	607a      	str	r2, [r7, #4]
 80160a8:	603b      	str	r3, [r7, #0]
ULONG   i, j, k, l;
UINT    status;


    /* Increment the number of physical sector allocation requests.  */
    nor_flash -> lx_nor_flash_physical_block_allocates++;
 80160aa:	68fb      	ldr	r3, [r7, #12]
 80160ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80160ae:	1c5a      	adds	r2, r3, #1
 80160b0:	68fb      	ldr	r3, [r7, #12]
 80160b2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize the return parameters.  */
    *physical_sector_map_entry =  (ULONG *) 0;
 80160b4:	687b      	ldr	r3, [r7, #4]
 80160b6:	2200      	movs	r2, #0
 80160b8:	601a      	str	r2, [r3, #0]
    *physical_sector_address =    (ULONG *) 0;
 80160ba:	683b      	ldr	r3, [r7, #0]
 80160bc:	2200      	movs	r2, #0
 80160be:	601a      	str	r2, [r3, #0]
    
    /* Determine if there are any free physical sectors.  */
    if (nor_flash -> lx_nor_flash_free_physical_sectors == 0)
 80160c0:	68fb      	ldr	r3, [r7, #12]
 80160c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80160c4:	2b00      	cmp	r3, #0
 80160c6:	d106      	bne.n	80160d6 <_lx_nor_flash_physical_sector_allocate+0x3a>
    {

        /* Increment the number of failed allocations.  */
        nor_flash -> lx_nor_flash_physical_block_allocate_errors++;
 80160c8:	68fb      	ldr	r3, [r7, #12]
 80160ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80160cc:	1c5a      	adds	r2, r3, #1
 80160ce:	68fb      	ldr	r3, [r7, #12]
 80160d0:	661a      	str	r2, [r3, #96]	; 0x60

        /* No free physical sectors, return .  */
        return(LX_NO_SECTORS);
 80160d2:	2302      	movs	r3, #2
 80160d4:	e135      	b.n	8016342 <_lx_nor_flash_physical_sector_allocate+0x2a6>
    }

    /* Pickup the search for a free physical sector at the specified block.  */
    search_block =  nor_flash -> lx_nor_flash_free_block_search;
 80160d6:	68fb      	ldr	r3, [r7, #12]
 80160d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80160da:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Loop through the blocks to find a free physical sector.  */
    for (i = 0; i < nor_flash -> lx_nor_flash_total_blocks; i++)
 80160dc:	2300      	movs	r3, #0
 80160de:	637b      	str	r3, [r7, #52]	; 0x34
 80160e0:	e123      	b.n	801632a <_lx_nor_flash_physical_sector_allocate+0x28e>
    {

        /* Setup the block word pointer to the first word of the search block.  */
        block_word_ptr =  nor_flash -> lx_nor_flash_base_address + (search_block * nor_flash -> lx_nor_flash_words_per_block);
 80160e2:	68fb      	ldr	r3, [r7, #12]
 80160e4:	695a      	ldr	r2, [r3, #20]
 80160e6:	68fb      	ldr	r3, [r7, #12]
 80160e8:	689b      	ldr	r3, [r3, #8]
 80160ea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80160ec:	fb01 f303 	mul.w	r3, r1, r3
 80160f0:	009b      	lsls	r3, r3, #2
 80160f2:	4413      	add	r3, r2
 80160f4:	627b      	str	r3, [r7, #36]	; 0x24

        /* Find the first free physical sector from the free sector bit map of this block.  */
        for (j = 0; j < nor_flash -> lx_nor_flash_block_bit_map_words; j++)
 80160f6:	2300      	movs	r3, #0
 80160f8:	633b      	str	r3, [r7, #48]	; 0x30
 80160fa:	e103      	b.n	8016304 <_lx_nor_flash_physical_sector_allocate+0x268>
#ifdef LX_DIRECT_READ
        
            /* Read the word directly.  */
            block_word =  *(block_word_ptr + nor_flash -> lx_nor_flash_block_free_bit_map_offset + j);
#else
            status =  _lx_nor_flash_driver_read(nor_flash, (block_word_ptr + nor_flash -> lx_nor_flash_block_free_bit_map_offset + j), &block_word, 1);
 80160fc:	68fb      	ldr	r3, [r7, #12]
 80160fe:	699a      	ldr	r2, [r3, #24]
 8016100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016102:	4413      	add	r3, r2
 8016104:	009b      	lsls	r3, r3, #2
 8016106:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016108:	18d1      	adds	r1, r2, r3
 801610a:	f107 021c 	add.w	r2, r7, #28
 801610e:	2301      	movs	r3, #1
 8016110:	68f8      	ldr	r0, [r7, #12]
 8016112:	f7ff f805 	bl	8015120 <_lx_nor_flash_driver_read>
 8016116:	6238      	str	r0, [r7, #32]

            /* Check for an error from flash driver. Drivers should never return an error..  */
            if (status)
 8016118:	6a3b      	ldr	r3, [r7, #32]
 801611a:	2b00      	cmp	r3, #0
 801611c:	d005      	beq.n	801612a <_lx_nor_flash_physical_sector_allocate+0x8e>
            {
        
                /* Call system error handler.  */
                _lx_nor_flash_system_error(nor_flash, status);
 801611e:	6a39      	ldr	r1, [r7, #32]
 8016120:	68f8      	ldr	r0, [r7, #12]
 8016122:	f000 fb85 	bl	8016830 <_lx_nor_flash_system_error>
                
                /* Return the error.  */
                return(status);
 8016126:	6a3b      	ldr	r3, [r7, #32]
 8016128:	e10b      	b.n	8016342 <_lx_nor_flash_physical_sector_allocate+0x2a6>
            }
#endif
                    
            /* Are there any free sectors in this word?  */
            if (block_word)
 801612a:	69fb      	ldr	r3, [r7, #28]
 801612c:	2b00      	cmp	r3, #0
 801612e:	f000 80e6 	beq.w	80162fe <_lx_nor_flash_physical_sector_allocate+0x262>
            {
            
                /* Yes, there are free sectors in this word.  */
                for (k = 0; k < 32; k++)
 8016132:	2300      	movs	r3, #0
 8016134:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016136:	e0dc      	b.n	80162f2 <_lx_nor_flash_physical_sector_allocate+0x256>
                {
                    
                    /* Is this sector free?  */
                    if (block_word & 1)
 8016138:	69fb      	ldr	r3, [r7, #28]
 801613a:	f003 0301 	and.w	r3, r3, #1
 801613e:	2b00      	cmp	r3, #0
 8016140:	f000 80ce 	beq.w	80162e0 <_lx_nor_flash_physical_sector_allocate+0x244>
#ifdef LX_DIRECT_READ
        
                        /* Read the word directly.  */
                        block_word =  *(block_word_ptr + nor_flash -> lx_nor_flash_block_free_bit_map_offset + j);
#else
                        status =  _lx_nor_flash_driver_read(nor_flash, (block_word_ptr + nor_flash -> lx_nor_flash_block_free_bit_map_offset + j), &block_word, 1);
 8016144:	68fb      	ldr	r3, [r7, #12]
 8016146:	699a      	ldr	r2, [r3, #24]
 8016148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801614a:	4413      	add	r3, r2
 801614c:	009b      	lsls	r3, r3, #2
 801614e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016150:	18d1      	adds	r1, r2, r3
 8016152:	f107 021c 	add.w	r2, r7, #28
 8016156:	2301      	movs	r3, #1
 8016158:	68f8      	ldr	r0, [r7, #12]
 801615a:	f7fe ffe1 	bl	8015120 <_lx_nor_flash_driver_read>
 801615e:	6238      	str	r0, [r7, #32]

                        /* Check for an error from flash driver. Drivers should never return an error..  */
                        if (status)
 8016160:	6a3b      	ldr	r3, [r7, #32]
 8016162:	2b00      	cmp	r3, #0
 8016164:	d005      	beq.n	8016172 <_lx_nor_flash_physical_sector_allocate+0xd6>
                        {
        
                            /* Call system error handler.  */
                            _lx_nor_flash_system_error(nor_flash, status);
 8016166:	6a39      	ldr	r1, [r7, #32]
 8016168:	68f8      	ldr	r0, [r7, #12]
 801616a:	f000 fb61 	bl	8016830 <_lx_nor_flash_system_error>

                            /* Return the error.  */
                            return(status);
 801616e:	6a3b      	ldr	r3, [r7, #32]
 8016170:	e0e7      	b.n	8016342 <_lx_nor_flash_physical_sector_allocate+0x2a6>
                        }
#endif
                        
                        /* Clear the bit associated with the free sector to indicate it is not free.  */
                        block_word =  block_word & ~(((ULONG) 1) << k);
 8016172:	2201      	movs	r2, #1
 8016174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016176:	fa02 f303 	lsl.w	r3, r2, r3
 801617a:	43da      	mvns	r2, r3
 801617c:	69fb      	ldr	r3, [r7, #28]
 801617e:	4013      	ands	r3, r2
 8016180:	61fb      	str	r3, [r7, #28]
                        
                        /* Now write back free bit map word with the bit for this sector cleared.  */
                        status =  _lx_nor_flash_driver_write(nor_flash, (block_word_ptr + nor_flash -> lx_nor_flash_block_free_bit_map_offset + j), &block_word, 1);
 8016182:	68fb      	ldr	r3, [r7, #12]
 8016184:	699a      	ldr	r2, [r3, #24]
 8016186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016188:	4413      	add	r3, r2
 801618a:	009b      	lsls	r3, r3, #2
 801618c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801618e:	18d1      	adds	r1, r2, r3
 8016190:	f107 021c 	add.w	r2, r7, #28
 8016194:	2301      	movs	r3, #1
 8016196:	68f8      	ldr	r0, [r7, #12]
 8016198:	f7ff f8a8 	bl	80152ec <_lx_nor_flash_driver_write>
 801619c:	6238      	str	r0, [r7, #32]

                        /* Check for an error from flash driver. Drivers should never return an error..  */
                        if (status)
 801619e:	6a3b      	ldr	r3, [r7, #32]
 80161a0:	2b00      	cmp	r3, #0
 80161a2:	d005      	beq.n	80161b0 <_lx_nor_flash_physical_sector_allocate+0x114>
                        {
        
                            /* Call system error handler.  */
                            _lx_nor_flash_system_error(nor_flash, status);
 80161a4:	6a39      	ldr	r1, [r7, #32]
 80161a6:	68f8      	ldr	r0, [r7, #12]
 80161a8:	f000 fb42 	bl	8016830 <_lx_nor_flash_system_error>

                            /* Return the error.  */
                            return(status);
 80161ac:	6a3b      	ldr	r3, [r7, #32]
 80161ae:	e0c8      	b.n	8016342 <_lx_nor_flash_physical_sector_allocate+0x2a6>
                        }

                        /* Determine if this is the last entry available in this block.  */
                        if (((block_word >> 1) == 0) && (j == (nor_flash -> lx_nor_flash_block_bit_map_words - 1)))
 80161b0:	69fb      	ldr	r3, [r7, #28]
 80161b2:	085b      	lsrs	r3, r3, #1
 80161b4:	2b00      	cmp	r3, #0
 80161b6:	d175      	bne.n	80162a4 <_lx_nor_flash_physical_sector_allocate+0x208>
 80161b8:	68fb      	ldr	r3, [r7, #12]
 80161ba:	69db      	ldr	r3, [r3, #28]
 80161bc:	3b01      	subs	r3, #1
 80161be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80161c0:	429a      	cmp	r2, r3
 80161c2:	d16f      	bne.n	80162a4 <_lx_nor_flash_physical_sector_allocate+0x208>
                        
                            /* This is the last physical sector in the block.  Now we need to calculate the minimum valid logical
                               sector and the maximum valid logical sector.  */

                            /* Setup the minimum and maximum logical sectors to the current logical sector.  */
                            min_logical_sector =  logical_sector;
 80161c4:	68bb      	ldr	r3, [r7, #8]
 80161c6:	61bb      	str	r3, [r7, #24]
                            max_logical_sector =  logical_sector;
 80161c8:	68bb      	ldr	r3, [r7, #8]
 80161ca:	617b      	str	r3, [r7, #20]
                               
                            /* Setup a pointer to the mapped list.  */
                            list_word_ptr =  block_word_ptr + nor_flash -> lx_nor_flash_block_physical_sector_mapping_offset;
 80161cc:	68fb      	ldr	r3, [r7, #12]
 80161ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80161d0:	009b      	lsls	r3, r3, #2
 80161d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80161d4:	4413      	add	r3, r2
 80161d6:	63bb      	str	r3, [r7, #56]	; 0x38

                            /* Loop to search the mapped list.  */
                            for (l = 0; l < nor_flash -> lx_nor_flash_physical_sectors_per_block; l++)
 80161d8:	2300      	movs	r3, #0
 80161da:	62bb      	str	r3, [r7, #40]	; 0x28
 80161dc:	e02e      	b.n	801623c <_lx_nor_flash_physical_sector_allocate+0x1a0>
#ifdef LX_DIRECT_READ
        
                                /* Read the word directly.  */
                                list_word =  *(list_word_ptr);
#else
                                status =  _lx_nor_flash_driver_read(nor_flash, list_word_ptr, &list_word, 1);
 80161de:	f107 0210 	add.w	r2, r7, #16
 80161e2:	2301      	movs	r3, #1
 80161e4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80161e6:	68f8      	ldr	r0, [r7, #12]
 80161e8:	f7fe ff9a 	bl	8015120 <_lx_nor_flash_driver_read>
 80161ec:	6238      	str	r0, [r7, #32]
                                
                                /* Check for an error from flash driver. Drivers should never return an error..  */
                                if (status)
 80161ee:	6a3b      	ldr	r3, [r7, #32]
 80161f0:	2b00      	cmp	r3, #0
 80161f2:	d005      	beq.n	8016200 <_lx_nor_flash_physical_sector_allocate+0x164>
                                {
        
                                    /* Call system error handler.  */
                                    _lx_nor_flash_system_error(nor_flash, status);
 80161f4:	6a39      	ldr	r1, [r7, #32]
 80161f6:	68f8      	ldr	r0, [r7, #12]
 80161f8:	f000 fb1a 	bl	8016830 <_lx_nor_flash_system_error>

                                    /* Return the error.  */
                                    return(status);
 80161fc:	6a3b      	ldr	r3, [r7, #32]
 80161fe:	e0a0      	b.n	8016342 <_lx_nor_flash_physical_sector_allocate+0x2a6>
                                }
#endif
            
                                /* Is this entry valid?  */
                                if (list_word & LX_NOR_PHYSICAL_SECTOR_VALID)
 8016200:	693b      	ldr	r3, [r7, #16]
 8016202:	2b00      	cmp	r3, #0
 8016204:	da14      	bge.n	8016230 <_lx_nor_flash_physical_sector_allocate+0x194>
                                {

                                    /* Isolate the logical sector.  */
                                    list_word =  list_word & LX_NOR_LOGICAL_SECTOR_MASK;
 8016206:	693b      	ldr	r3, [r7, #16]
 8016208:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 801620c:	613b      	str	r3, [r7, #16]

                                    /* Determine if a new minimum has been found.  */
                                    if (list_word < min_logical_sector)
 801620e:	693a      	ldr	r2, [r7, #16]
 8016210:	69bb      	ldr	r3, [r7, #24]
 8016212:	429a      	cmp	r2, r3
 8016214:	d201      	bcs.n	801621a <_lx_nor_flash_physical_sector_allocate+0x17e>
                                        min_logical_sector =  list_word;
 8016216:	693b      	ldr	r3, [r7, #16]
 8016218:	61bb      	str	r3, [r7, #24]
                
                                    /* Determine if a new maximum has been found.  */
                                    if (list_word != LX_NOR_LOGICAL_SECTOR_MASK)
 801621a:	693b      	ldr	r3, [r7, #16]
 801621c:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 8016220:	4293      	cmp	r3, r2
 8016222:	d005      	beq.n	8016230 <_lx_nor_flash_physical_sector_allocate+0x194>
                                    {
                                        if (list_word > max_logical_sector)
 8016224:	693a      	ldr	r2, [r7, #16]
 8016226:	697b      	ldr	r3, [r7, #20]
 8016228:	429a      	cmp	r2, r3
 801622a:	d901      	bls.n	8016230 <_lx_nor_flash_physical_sector_allocate+0x194>
                                            max_logical_sector =  list_word;                    
 801622c:	693b      	ldr	r3, [r7, #16]
 801622e:	617b      	str	r3, [r7, #20]
                                    }
                                }

                                /* Move the list pointer ahead.  */
                                list_word_ptr++;
 8016230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016232:	3304      	adds	r3, #4
 8016234:	63bb      	str	r3, [r7, #56]	; 0x38
                            for (l = 0; l < nor_flash -> lx_nor_flash_physical_sectors_per_block; l++)
 8016236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016238:	3301      	adds	r3, #1
 801623a:	62bb      	str	r3, [r7, #40]	; 0x28
 801623c:	68fb      	ldr	r3, [r7, #12]
 801623e:	691b      	ldr	r3, [r3, #16]
 8016240:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016242:	429a      	cmp	r2, r3
 8016244:	d3cb      	bcc.n	80161de <_lx_nor_flash_physical_sector_allocate+0x142>
                            }
                            
                            /* Move the search pointer forward, since we know this block is exhausted.  */
                            search_block++;
 8016246:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016248:	3301      	adds	r3, #1
 801624a:	63fb      	str	r3, [r7, #60]	; 0x3c
                            
                            /* Check for wrap condition on the search block.  */
                            if (search_block >= nor_flash -> lx_nor_flash_total_blocks)
 801624c:	68fb      	ldr	r3, [r7, #12]
 801624e:	685b      	ldr	r3, [r3, #4]
 8016250:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016252:	429a      	cmp	r2, r3
 8016254:	d301      	bcc.n	801625a <_lx_nor_flash_physical_sector_allocate+0x1be>
                            {
                            
                                /* Reset search block to the beginning.  */
                                search_block =  0;
 8016256:	2300      	movs	r3, #0
 8016258:	63fb      	str	r3, [r7, #60]	; 0x3c
                            }
                            
                            /* Now write the minimum and maximum logical sector in this block.  */
                            status =  _lx_nor_flash_driver_write(nor_flash, block_word_ptr + LX_NOR_FLASH_MIN_LOGICAL_SECTOR_OFFSET, &min_logical_sector, 1);
 801625a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801625c:	1d19      	adds	r1, r3, #4
 801625e:	f107 0218 	add.w	r2, r7, #24
 8016262:	2301      	movs	r3, #1
 8016264:	68f8      	ldr	r0, [r7, #12]
 8016266:	f7ff f841 	bl	80152ec <_lx_nor_flash_driver_write>
 801626a:	6238      	str	r0, [r7, #32]

                            /* Check for an error from flash driver. Drivers should never return an error..  */
                            if (status)
 801626c:	6a3b      	ldr	r3, [r7, #32]
 801626e:	2b00      	cmp	r3, #0
 8016270:	d005      	beq.n	801627e <_lx_nor_flash_physical_sector_allocate+0x1e2>
                            {
        
                                /* Call system error handler.  */
                                _lx_nor_flash_system_error(nor_flash, status);
 8016272:	6a39      	ldr	r1, [r7, #32]
 8016274:	68f8      	ldr	r0, [r7, #12]
 8016276:	f000 fadb 	bl	8016830 <_lx_nor_flash_system_error>

                                /* Return the error.  */
                                return(status);
 801627a:	6a3b      	ldr	r3, [r7, #32]
 801627c:	e061      	b.n	8016342 <_lx_nor_flash_physical_sector_allocate+0x2a6>
                            }
                            
                            status =  _lx_nor_flash_driver_write(nor_flash, block_word_ptr + LX_NOR_FLASH_MAX_LOGICAL_SECTOR_OFFSET, &max_logical_sector, 1);
 801627e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016280:	f103 0108 	add.w	r1, r3, #8
 8016284:	f107 0214 	add.w	r2, r7, #20
 8016288:	2301      	movs	r3, #1
 801628a:	68f8      	ldr	r0, [r7, #12]
 801628c:	f7ff f82e 	bl	80152ec <_lx_nor_flash_driver_write>
 8016290:	6238      	str	r0, [r7, #32]

                            /* Check for an error from flash driver. Drivers should never return an error..  */
                            if (status)
 8016292:	6a3b      	ldr	r3, [r7, #32]
 8016294:	2b00      	cmp	r3, #0
 8016296:	d005      	beq.n	80162a4 <_lx_nor_flash_physical_sector_allocate+0x208>
                            {
        
                                /* Call system error handler.  */
                                _lx_nor_flash_system_error(nor_flash, status);
 8016298:	6a39      	ldr	r1, [r7, #32]
 801629a:	68f8      	ldr	r0, [r7, #12]
 801629c:	f000 fac8 	bl	8016830 <_lx_nor_flash_system_error>

                                /* Return the error.  */
                                return(status);
 80162a0:	6a3b      	ldr	r3, [r7, #32]
 80162a2:	e04e      	b.n	8016342 <_lx_nor_flash_physical_sector_allocate+0x2a6>
                            }
                        }
                                                
                        /* Remember the block to search.  */
                        nor_flash -> lx_nor_flash_free_block_search =  search_block;
 80162a4:	68fb      	ldr	r3, [r7, #12]
 80162a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80162a8:	641a      	str	r2, [r3, #64]	; 0x40
                                                
                        /* Prepare the return information.  */
                        *physical_sector_map_entry =  block_word_ptr + (nor_flash -> lx_nor_flash_block_physical_sector_mapping_offset + (j * 32)) + k;
 80162aa:	68fb      	ldr	r3, [r7, #12]
 80162ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80162ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162b0:	015b      	lsls	r3, r3, #5
 80162b2:	441a      	add	r2, r3
 80162b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162b6:	4413      	add	r3, r2
 80162b8:	009b      	lsls	r3, r3, #2
 80162ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80162bc:	441a      	add	r2, r3
 80162be:	687b      	ldr	r3, [r7, #4]
 80162c0:	601a      	str	r2, [r3, #0]
                        *physical_sector_address =    block_word_ptr + (nor_flash -> lx_nor_flash_block_physical_sector_offset) + (((j * 32) + k) * LX_NOR_SECTOR_SIZE);
 80162c2:	68fb      	ldr	r3, [r7, #12]
 80162c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80162c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162c8:	0159      	lsls	r1, r3, #5
 80162ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162cc:	440b      	add	r3, r1
 80162ce:	01db      	lsls	r3, r3, #7
 80162d0:	4413      	add	r3, r2
 80162d2:	009b      	lsls	r3, r3, #2
 80162d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80162d6:	441a      	add	r2, r3
 80162d8:	683b      	ldr	r3, [r7, #0]
 80162da:	601a      	str	r2, [r3, #0]

                        /* Return success!  */
                        return(LX_SUCCESS);                     
 80162dc:	2300      	movs	r3, #0
 80162de:	e030      	b.n	8016342 <_lx_nor_flash_physical_sector_allocate+0x2a6>
                    }
                        
                    /* Shift down the bit map.  */
                    block_word =  block_word >> 1;
 80162e0:	69fb      	ldr	r3, [r7, #28]
 80162e2:	085b      	lsrs	r3, r3, #1
 80162e4:	61fb      	str	r3, [r7, #28]
                    
                    /* Determine if there are any more bits set? If not, we can break out of the search of this word.  */
                    if (block_word == 0)
 80162e6:	69fb      	ldr	r3, [r7, #28]
 80162e8:	2b00      	cmp	r3, #0
 80162ea:	d007      	beq.n	80162fc <_lx_nor_flash_physical_sector_allocate+0x260>
                for (k = 0; k < 32; k++)
 80162ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162ee:	3301      	adds	r3, #1
 80162f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80162f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162f4:	2b1f      	cmp	r3, #31
 80162f6:	f67f af1f 	bls.w	8016138 <_lx_nor_flash_physical_sector_allocate+0x9c>
 80162fa:	e000      	b.n	80162fe <_lx_nor_flash_physical_sector_allocate+0x262>
                        break;
 80162fc:	bf00      	nop
        for (j = 0; j < nor_flash -> lx_nor_flash_block_bit_map_words; j++)
 80162fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016300:	3301      	adds	r3, #1
 8016302:	633b      	str	r3, [r7, #48]	; 0x30
 8016304:	68fb      	ldr	r3, [r7, #12]
 8016306:	69db      	ldr	r3, [r3, #28]
 8016308:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801630a:	429a      	cmp	r2, r3
 801630c:	f4ff aef6 	bcc.w	80160fc <_lx_nor_flash_physical_sector_allocate+0x60>
                }
            }
        }
            
        /* Move to the next flash block.  */
        search_block++;
 8016310:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016312:	3301      	adds	r3, #1
 8016314:	63fb      	str	r3, [r7, #60]	; 0x3c
        
        /* Determine if we have to wrap the search block.  */
        if (search_block >= nor_flash -> lx_nor_flash_total_blocks)
 8016316:	68fb      	ldr	r3, [r7, #12]
 8016318:	685b      	ldr	r3, [r3, #4]
 801631a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801631c:	429a      	cmp	r2, r3
 801631e:	d301      	bcc.n	8016324 <_lx_nor_flash_physical_sector_allocate+0x288>
        {
        
            /* Set the search block to the beginning.  */
            search_block =  0;
 8016320:	2300      	movs	r3, #0
 8016322:	63fb      	str	r3, [r7, #60]	; 0x3c
    for (i = 0; i < nor_flash -> lx_nor_flash_total_blocks; i++)
 8016324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016326:	3301      	adds	r3, #1
 8016328:	637b      	str	r3, [r7, #52]	; 0x34
 801632a:	68fb      	ldr	r3, [r7, #12]
 801632c:	685b      	ldr	r3, [r3, #4]
 801632e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016330:	429a      	cmp	r2, r3
 8016332:	f4ff aed6 	bcc.w	80160e2 <_lx_nor_flash_physical_sector_allocate+0x46>
        }
    }

    /* Increment the number of failed allocations.  */
    nor_flash -> lx_nor_flash_physical_block_allocate_errors++;
 8016336:	68fb      	ldr	r3, [r7, #12]
 8016338:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801633a:	1c5a      	adds	r2, r3, #1
 801633c:	68fb      	ldr	r3, [r7, #12]
 801633e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return no sector completion.  */
    return(LX_NO_SECTORS);
 8016340:	2302      	movs	r3, #2
}
 8016342:	4618      	mov	r0, r3
 8016344:	3740      	adds	r7, #64	; 0x40
 8016346:	46bd      	mov	sp, r7
 8016348:	bd80      	pop	{r7, pc}

0801634a <_lx_nor_flash_sector_mapping_cache_invalidate>:
/*  06-02-2021     Bhupendra Naphade        Modified comment(s),          */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
VOID  _lx_nor_flash_sector_mapping_cache_invalidate(LX_NOR_FLASH *nor_flash, ULONG logical_sector)
{
 801634a:	b490      	push	{r4, r7}
 801634c:	b084      	sub	sp, #16
 801634e:	af00      	add	r7, sp, #0
 8016350:	6078      	str	r0, [r7, #4]
 8016352:	6039      	str	r1, [r7, #0]
ULONG                           i;
LX_NOR_SECTOR_MAPPING_CACHE_ENTRY  *sector_mapping_cache_entry_ptr;


    /* Determine if the sector mapping cache is enabled.  */
    if (nor_flash -> lx_nor_flash_sector_mapping_cache_enabled)
 8016354:	687b      	ldr	r3, [r7, #4]
 8016356:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801635a:	2b00      	cmp	r3, #0
 801635c:	d07a      	beq.n	8016454 <_lx_nor_flash_sector_mapping_cache_invalidate+0x10a>
    {
    
        /* Calculate the starting index of the sector mapping cache for this sector entry.  */
        i =  (logical_sector & LX_NOR_SECTOR_MAPPING_CACHE_HASH_MASK) * LX_NOR_SECTOR_MAPPING_CACHE_DEPTH;
 801635e:	683b      	ldr	r3, [r7, #0]
 8016360:	f003 0303 	and.w	r3, r3, #3
 8016364:	009b      	lsls	r3, r3, #2
 8016366:	60fb      	str	r3, [r7, #12]

        /* Build a pointer to the cache entry.  */
        sector_mapping_cache_entry_ptr =  &nor_flash -> lx_nor_flash_sector_mapping_cache[i];
 8016368:	68fa      	ldr	r2, [r7, #12]
 801636a:	4613      	mov	r3, r2
 801636c:	005b      	lsls	r3, r3, #1
 801636e:	4413      	add	r3, r2
 8016370:	009b      	lsls	r3, r3, #2
 8016372:	33a8      	adds	r3, #168	; 0xa8
 8016374:	687a      	ldr	r2, [r7, #4]
 8016376:	4413      	add	r3, r2
 8016378:	3304      	adds	r3, #4
 801637a:	60bb      	str	r3, [r7, #8]

        /* Determine if the sector is in the sector mapping cache - assuming the depth of the sector 
           mapping cache is LX_NOR_SECTOR_MAPPING_CACHE_DEPTH entries.  */
        if ((sector_mapping_cache_entry_ptr -> lx_nor_sector_mapping_cache_logical_sector) == (logical_sector | LX_NOR_SECTOR_MAPPING_CACHE_ENTRY_VALID))
 801637c:	68bb      	ldr	r3, [r7, #8]
 801637e:	681a      	ldr	r2, [r3, #0]
 8016380:	683b      	ldr	r3, [r7, #0]
 8016382:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8016386:	429a      	cmp	r2, r3
 8016388:	d120      	bne.n	80163cc <_lx_nor_flash_sector_mapping_cache_invalidate+0x82>
        {

            /* Move all cache entries up and invalidate the last entry.  */
            *(sector_mapping_cache_entry_ptr) =      *(sector_mapping_cache_entry_ptr + 1);
 801638a:	68ba      	ldr	r2, [r7, #8]
 801638c:	68bb      	ldr	r3, [r7, #8]
 801638e:	4614      	mov	r4, r2
 8016390:	330c      	adds	r3, #12
 8016392:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8016396:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            *(sector_mapping_cache_entry_ptr + 1) =  *(sector_mapping_cache_entry_ptr + 2);
 801639a:	68bb      	ldr	r3, [r7, #8]
 801639c:	f103 020c 	add.w	r2, r3, #12
 80163a0:	68bb      	ldr	r3, [r7, #8]
 80163a2:	4614      	mov	r4, r2
 80163a4:	3318      	adds	r3, #24
 80163a6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80163aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            *(sector_mapping_cache_entry_ptr + 2) =  *(sector_mapping_cache_entry_ptr + 3);
 80163ae:	68bb      	ldr	r3, [r7, #8]
 80163b0:	f103 0218 	add.w	r2, r3, #24
 80163b4:	68bb      	ldr	r3, [r7, #8]
 80163b6:	4614      	mov	r4, r2
 80163b8:	3324      	adds	r3, #36	; 0x24
 80163ba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80163be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            
            /* Invalidate the last entry.  */
            (sector_mapping_cache_entry_ptr + 3) -> lx_nor_sector_mapping_cache_logical_sector =   0;
 80163c2:	68bb      	ldr	r3, [r7, #8]
 80163c4:	3324      	adds	r3, #36	; 0x24
 80163c6:	2200      	movs	r2, #0
 80163c8:	601a      	str	r2, [r3, #0]

            /* Simply invalidate the last entry.  */
            (sector_mapping_cache_entry_ptr + 3) -> lx_nor_sector_mapping_cache_logical_sector =   0;
        }
    }
}
 80163ca:	e043      	b.n	8016454 <_lx_nor_flash_sector_mapping_cache_invalidate+0x10a>
        else if (((sector_mapping_cache_entry_ptr + 1) -> lx_nor_sector_mapping_cache_logical_sector) == (logical_sector | LX_NOR_SECTOR_MAPPING_CACHE_ENTRY_VALID))
 80163cc:	68bb      	ldr	r3, [r7, #8]
 80163ce:	330c      	adds	r3, #12
 80163d0:	681a      	ldr	r2, [r3, #0]
 80163d2:	683b      	ldr	r3, [r7, #0]
 80163d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80163d8:	429a      	cmp	r2, r3
 80163da:	d118      	bne.n	801640e <_lx_nor_flash_sector_mapping_cache_invalidate+0xc4>
            *(sector_mapping_cache_entry_ptr + 1) =  *(sector_mapping_cache_entry_ptr + 2);
 80163dc:	68bb      	ldr	r3, [r7, #8]
 80163de:	f103 020c 	add.w	r2, r3, #12
 80163e2:	68bb      	ldr	r3, [r7, #8]
 80163e4:	4614      	mov	r4, r2
 80163e6:	3318      	adds	r3, #24
 80163e8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80163ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            *(sector_mapping_cache_entry_ptr + 2) =  *(sector_mapping_cache_entry_ptr + 3);
 80163f0:	68bb      	ldr	r3, [r7, #8]
 80163f2:	f103 0218 	add.w	r2, r3, #24
 80163f6:	68bb      	ldr	r3, [r7, #8]
 80163f8:	4614      	mov	r4, r2
 80163fa:	3324      	adds	r3, #36	; 0x24
 80163fc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8016400:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            (sector_mapping_cache_entry_ptr + 3) -> lx_nor_sector_mapping_cache_logical_sector =   0;
 8016404:	68bb      	ldr	r3, [r7, #8]
 8016406:	3324      	adds	r3, #36	; 0x24
 8016408:	2200      	movs	r2, #0
 801640a:	601a      	str	r2, [r3, #0]
}
 801640c:	e022      	b.n	8016454 <_lx_nor_flash_sector_mapping_cache_invalidate+0x10a>
        else if (((sector_mapping_cache_entry_ptr + 2) -> lx_nor_sector_mapping_cache_logical_sector) == (logical_sector | LX_NOR_SECTOR_MAPPING_CACHE_ENTRY_VALID))
 801640e:	68bb      	ldr	r3, [r7, #8]
 8016410:	3318      	adds	r3, #24
 8016412:	681a      	ldr	r2, [r3, #0]
 8016414:	683b      	ldr	r3, [r7, #0]
 8016416:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801641a:	429a      	cmp	r2, r3
 801641c:	d10e      	bne.n	801643c <_lx_nor_flash_sector_mapping_cache_invalidate+0xf2>
            *(sector_mapping_cache_entry_ptr + 2) =  *(sector_mapping_cache_entry_ptr + 3);
 801641e:	68bb      	ldr	r3, [r7, #8]
 8016420:	f103 0218 	add.w	r2, r3, #24
 8016424:	68bb      	ldr	r3, [r7, #8]
 8016426:	4614      	mov	r4, r2
 8016428:	3324      	adds	r3, #36	; 0x24
 801642a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801642e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            (sector_mapping_cache_entry_ptr + 3) -> lx_nor_sector_mapping_cache_logical_sector =   0;
 8016432:	68bb      	ldr	r3, [r7, #8]
 8016434:	3324      	adds	r3, #36	; 0x24
 8016436:	2200      	movs	r2, #0
 8016438:	601a      	str	r2, [r3, #0]
}
 801643a:	e00b      	b.n	8016454 <_lx_nor_flash_sector_mapping_cache_invalidate+0x10a>
        else if (((sector_mapping_cache_entry_ptr + 3) -> lx_nor_sector_mapping_cache_logical_sector) == (logical_sector | LX_NOR_SECTOR_MAPPING_CACHE_ENTRY_VALID))
 801643c:	68bb      	ldr	r3, [r7, #8]
 801643e:	3324      	adds	r3, #36	; 0x24
 8016440:	681a      	ldr	r2, [r3, #0]
 8016442:	683b      	ldr	r3, [r7, #0]
 8016444:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8016448:	429a      	cmp	r2, r3
 801644a:	d103      	bne.n	8016454 <_lx_nor_flash_sector_mapping_cache_invalidate+0x10a>
            (sector_mapping_cache_entry_ptr + 3) -> lx_nor_sector_mapping_cache_logical_sector =   0;
 801644c:	68bb      	ldr	r3, [r7, #8]
 801644e:	3324      	adds	r3, #36	; 0x24
 8016450:	2200      	movs	r2, #0
 8016452:	601a      	str	r2, [r3, #0]
}
 8016454:	bf00      	nop
 8016456:	3710      	adds	r7, #16
 8016458:	46bd      	mov	sp, r7
 801645a:	bc90      	pop	{r4, r7}
 801645c:	4770      	bx	lr

0801645e <_lx_nor_flash_sector_read>:
/*  06-02-2021     Bhupendra Naphade        Modified comment(s),          */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UINT  _lx_nor_flash_sector_read(LX_NOR_FLASH *nor_flash, ULONG logical_sector, VOID *buffer)
{
 801645e:	b580      	push	{r7, lr}
 8016460:	b08a      	sub	sp, #40	; 0x28
 8016462:	af02      	add	r7, sp, #8
 8016464:	60f8      	str	r0, [r7, #12]
 8016466:	60b9      	str	r1, [r7, #8]
 8016468:	607a      	str	r2, [r7, #4]
    /* Obtain the thread safe mutex.  */
    tx_mutex_get(&nor_flash -> lx_nor_flash_mutex, TX_WAIT_FOREVER);
#endif

    /* Increment the number of read requests.  */
    nor_flash -> lx_nor_flash_read_requests++;
 801646a:	68fb      	ldr	r3, [r7, #12]
 801646c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801646e:	1c5a      	adds	r2, r3, #1
 8016470:	68fb      	ldr	r3, [r7, #12]
 8016472:	651a      	str	r2, [r3, #80]	; 0x50

    /* See if we can find the sector in the current mapping.  */
    _lx_nor_flash_logical_sector_find(nor_flash, logical_sector, LX_FALSE, &mapping_address, &sector_address);
 8016474:	f107 0218 	add.w	r2, r7, #24
 8016478:	f107 0310 	add.w	r3, r7, #16
 801647c:	9300      	str	r3, [sp, #0]
 801647e:	4613      	mov	r3, r2
 8016480:	2200      	movs	r2, #0
 8016482:	68b9      	ldr	r1, [r7, #8]
 8016484:	68f8      	ldr	r0, [r7, #12]
 8016486:	f7fe ff89 	bl	801539c <_lx_nor_flash_logical_sector_find>
    
    /* Determine if the logical sector was found.  */
    if (mapping_address)
 801648a:	69bb      	ldr	r3, [r7, #24]
 801648c:	2b00      	cmp	r3, #0
 801648e:	d013      	beq.n	80164b8 <_lx_nor_flash_sector_read+0x5a>
    {
    
        /* Yes, we were able to find the logical sector.  */
        
        /* Read the sector data from the physical sector.  */
        status =  _lx_nor_flash_driver_read(nor_flash, sector_address, buffer, LX_NOR_SECTOR_SIZE);
 8016490:	6939      	ldr	r1, [r7, #16]
 8016492:	2380      	movs	r3, #128	; 0x80
 8016494:	687a      	ldr	r2, [r7, #4]
 8016496:	68f8      	ldr	r0, [r7, #12]
 8016498:	f7fe fe42 	bl	8015120 <_lx_nor_flash_driver_read>
 801649c:	61f8      	str	r0, [r7, #28]

        /* Check for an error from flash driver. Drivers should never return an error..  */
        if (status)
 801649e:	69fb      	ldr	r3, [r7, #28]
 80164a0:	2b00      	cmp	r3, #0
 80164a2:	d006      	beq.n	80164b2 <_lx_nor_flash_sector_read+0x54>
        {
        
            /* Call system error handler.  */
            _lx_nor_flash_system_error(nor_flash, status);
 80164a4:	69f9      	ldr	r1, [r7, #28]
 80164a6:	68f8      	ldr	r0, [r7, #12]
 80164a8:	f000 f9c2 	bl	8016830 <_lx_nor_flash_system_error>
            
            /* Adjust return status.  */
            status =  LX_ERROR;
 80164ac:	2301      	movs	r3, #1
 80164ae:	61fb      	str	r3, [r7, #28]
 80164b0:	e03f      	b.n	8016532 <_lx_nor_flash_sector_read+0xd4>
        }
        else
        {

            /* Set the status to success.  */
            status =  LX_SUCCESS;
 80164b2:	2300      	movs	r3, #0
 80164b4:	61fb      	str	r3, [r7, #28]
 80164b6:	e03c      	b.n	8016532 <_lx_nor_flash_sector_read+0xd4>
    }
    else
    {
        
        /* Allocate a new physical sector for this write.  */
        _lx_nor_flash_physical_sector_allocate(nor_flash, logical_sector, &mapping_address, &sector_address);
 80164b8:	f107 0310 	add.w	r3, r7, #16
 80164bc:	f107 0218 	add.w	r2, r7, #24
 80164c0:	68b9      	ldr	r1, [r7, #8]
 80164c2:	68f8      	ldr	r0, [r7, #12]
 80164c4:	f7ff fdea 	bl	801609c <_lx_nor_flash_physical_sector_allocate>

        /* Determine if the new sector allocation was successful.  */
        if (mapping_address)
 80164c8:	69bb      	ldr	r3, [r7, #24]
 80164ca:	2b00      	cmp	r3, #0
 80164cc:	d02f      	beq.n	801652e <_lx_nor_flash_sector_read+0xd0>
        {

            /* Update the number of free physical sectors.  */
            nor_flash -> lx_nor_flash_free_physical_sectors--;
 80164ce:	68fb      	ldr	r3, [r7, #12]
 80164d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80164d2:	1e5a      	subs	r2, r3, #1
 80164d4:	68fb      	ldr	r3, [r7, #12]
 80164d6:	62da      	str	r2, [r3, #44]	; 0x2c
    
            /* Read the sector data from the physical sector.  */
            status =  _lx_nor_flash_driver_read(nor_flash, sector_address, buffer, LX_NOR_SECTOR_SIZE);
 80164d8:	6939      	ldr	r1, [r7, #16]
 80164da:	2380      	movs	r3, #128	; 0x80
 80164dc:	687a      	ldr	r2, [r7, #4]
 80164de:	68f8      	ldr	r0, [r7, #12]
 80164e0:	f7fe fe1e 	bl	8015120 <_lx_nor_flash_driver_read>
 80164e4:	61f8      	str	r0, [r7, #28]

            /* Check for an error from flash driver. Drivers should never return an error..  */
            if (status)
 80164e6:	69fb      	ldr	r3, [r7, #28]
 80164e8:	2b00      	cmp	r3, #0
 80164ea:	d003      	beq.n	80164f4 <_lx_nor_flash_sector_read+0x96>
            {
        
                /* Call system error handler.  */
                _lx_nor_flash_system_error(nor_flash, status);
 80164ec:	69f9      	ldr	r1, [r7, #28]
 80164ee:	68f8      	ldr	r0, [r7, #12]
 80164f0:	f000 f99e 	bl	8016830 <_lx_nor_flash_system_error>
            }

            /* Now build the new mapping entry.  */
            mapping_entry =  ((ULONG) LX_NOR_PHYSICAL_SECTOR_VALID) | ((ULONG) LX_NOR_PHYSICAL_SECTOR_SUPERCEDED) | logical_sector;
 80164f4:	68bb      	ldr	r3, [r7, #8]
 80164f6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80164fa:	617b      	str	r3, [r7, #20]
            
            /* Write out the new mapping entry.  */
            status =  _lx_nor_flash_driver_write(nor_flash, mapping_address, &mapping_entry, 1);
 80164fc:	69b9      	ldr	r1, [r7, #24]
 80164fe:	f107 0214 	add.w	r2, r7, #20
 8016502:	2301      	movs	r3, #1
 8016504:	68f8      	ldr	r0, [r7, #12]
 8016506:	f7fe fef1 	bl	80152ec <_lx_nor_flash_driver_write>
 801650a:	61f8      	str	r0, [r7, #28]

            /* Check for an error from flash driver. Drivers should never return an error..  */
            if (status)
 801650c:	69fb      	ldr	r3, [r7, #28]
 801650e:	2b00      	cmp	r3, #0
 8016510:	d005      	beq.n	801651e <_lx_nor_flash_sector_read+0xc0>
            {
        
                /* Call system error handler.  */
                _lx_nor_flash_system_error(nor_flash, status);
 8016512:	69f9      	ldr	r1, [r7, #28]
 8016514:	68f8      	ldr	r0, [r7, #12]
 8016516:	f000 f98b 	bl	8016830 <_lx_nor_flash_system_error>
                /* Release the thread safe mutex.  */
                tx_mutex_put(&nor_flash -> lx_nor_flash_mutex);
#endif

                /* Return status.  */
                return(LX_ERROR);
 801651a:	2301      	movs	r3, #1
 801651c:	e00a      	b.n	8016534 <_lx_nor_flash_sector_read+0xd6>
            }

            /* Increment the number of mapped physical sectors.  */
            nor_flash -> lx_nor_flash_mapped_physical_sectors++;
 801651e:	68fb      	ldr	r3, [r7, #12]
 8016520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016522:	1c5a      	adds	r2, r3, #1
 8016524:	68fb      	ldr	r3, [r7, #12]
 8016526:	631a      	str	r2, [r3, #48]	; 0x30

            /* Set the status to success.  */
            status =  LX_SUCCESS;
 8016528:	2300      	movs	r3, #0
 801652a:	61fb      	str	r3, [r7, #28]
 801652c:	e001      	b.n	8016532 <_lx_nor_flash_sector_read+0xd4>
        }
        else
        {
      
            /* Could not find the logical sector.  */
            status =  LX_SECTOR_NOT_FOUND;
 801652e:	2303      	movs	r3, #3
 8016530:	61fb      	str	r3, [r7, #28]
    /* Release the thread safe mutex.  */
    tx_mutex_put(&nor_flash -> lx_nor_flash_mutex);
#endif

    /* Return status.  */
    return(status);
 8016532:	69fb      	ldr	r3, [r7, #28]
}
 8016534:	4618      	mov	r0, r3
 8016536:	3720      	adds	r7, #32
 8016538:	46bd      	mov	sp, r7
 801653a:	bd80      	pop	{r7, pc}

0801653c <_lx_nor_flash_sector_release>:
/*  06-02-2021     Bhupendra Naphade        Modified comment(s),          */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UINT  _lx_nor_flash_sector_release(LX_NOR_FLASH *nor_flash, ULONG logical_sector)
{
 801653c:	b580      	push	{r7, lr}
 801653e:	b08a      	sub	sp, #40	; 0x28
 8016540:	af02      	add	r7, sp, #8
 8016542:	6078      	str	r0, [r7, #4]
 8016544:	6039      	str	r1, [r7, #0]
    /* Obtain the thread safe mutex.  */
    tx_mutex_get(&nor_flash -> lx_nor_flash_mutex, TX_WAIT_FOREVER);
#endif

    /* Increment the number of read requests.  */
    nor_flash -> lx_nor_flash_read_requests++;
 8016546:	687b      	ldr	r3, [r7, #4]
 8016548:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801654a:	1c5a      	adds	r2, r3, #1
 801654c:	687b      	ldr	r3, [r7, #4]
 801654e:	651a      	str	r2, [r3, #80]	; 0x50

    /* See if we can find the sector in the current mapping.  */
    _lx_nor_flash_logical_sector_find(nor_flash, logical_sector, LX_FALSE, &mapping_address, &sector_address);
 8016550:	f107 0214 	add.w	r2, r7, #20
 8016554:	f107 030c 	add.w	r3, r7, #12
 8016558:	9300      	str	r3, [sp, #0]
 801655a:	4613      	mov	r3, r2
 801655c:	2200      	movs	r2, #0
 801655e:	6839      	ldr	r1, [r7, #0]
 8016560:	6878      	ldr	r0, [r7, #4]
 8016562:	f7fe ff1b 	bl	801539c <_lx_nor_flash_logical_sector_find>
    
    /* Determine if the logical sector was found.  */
    if (mapping_address)
 8016566:	697b      	ldr	r3, [r7, #20]
 8016568:	2b00      	cmp	r3, #0
 801656a:	d04c      	beq.n	8016606 <_lx_nor_flash_sector_release+0xca>
#ifdef LX_DIRECT_READ
        
        /* Read the word directly.  */
        mapping_entry =  *(mapping_address);
#else
        status =  _lx_nor_flash_driver_read(nor_flash, mapping_address, &mapping_entry, 1);
 801656c:	6979      	ldr	r1, [r7, #20]
 801656e:	f107 0210 	add.w	r2, r7, #16
 8016572:	2301      	movs	r3, #1
 8016574:	6878      	ldr	r0, [r7, #4]
 8016576:	f7fe fdd3 	bl	8015120 <_lx_nor_flash_driver_read>
 801657a:	61f8      	str	r0, [r7, #28]

        /* Check for an error from flash driver. Drivers should never return an error..  */
        if (status)
 801657c:	69fb      	ldr	r3, [r7, #28]
 801657e:	2b00      	cmp	r3, #0
 8016580:	d005      	beq.n	801658e <_lx_nor_flash_sector_release+0x52>
        {
        
            /* Call system error handler.  */
            _lx_nor_flash_system_error(nor_flash, status);
 8016582:	69f9      	ldr	r1, [r7, #28]
 8016584:	6878      	ldr	r0, [r7, #4]
 8016586:	f000 f953 	bl	8016830 <_lx_nor_flash_system_error>
            /* Release the thread safe mutex.  */
            tx_mutex_put(&nor_flash -> lx_nor_flash_mutex);
#endif

            /* Return status.  */
            return(LX_ERROR);
 801658a:	2301      	movs	r3, #1
 801658c:	e03e      	b.n	801660c <_lx_nor_flash_sector_release+0xd0>
        }
#endif

        /* Mark this sector as invalid.  */
        /* Now clear bits 31 and 30, which indicates this sector is now obsoleted.  */
        mapping_entry =  mapping_entry & ~(((ULONG) LX_NOR_PHYSICAL_SECTOR_VALID) | ((ULONG) LX_NOR_PHYSICAL_SECTOR_SUPERCEDED));
 801658e:	693b      	ldr	r3, [r7, #16]
 8016590:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8016594:	613b      	str	r3, [r7, #16]
            
        /* Write the value back to the flash to clear bits 31 & 30.  */
        status =  _lx_nor_flash_driver_write(nor_flash, mapping_address, &mapping_entry, 1);
 8016596:	6979      	ldr	r1, [r7, #20]
 8016598:	f107 0210 	add.w	r2, r7, #16
 801659c:	2301      	movs	r3, #1
 801659e:	6878      	ldr	r0, [r7, #4]
 80165a0:	f7fe fea4 	bl	80152ec <_lx_nor_flash_driver_write>
 80165a4:	61f8      	str	r0, [r7, #28]
            
        /* Check for an error from flash driver. Drivers should never return an error..  */
        if (status)
 80165a6:	69fb      	ldr	r3, [r7, #28]
 80165a8:	2b00      	cmp	r3, #0
 80165aa:	d005      	beq.n	80165b8 <_lx_nor_flash_sector_release+0x7c>
        {
        
            /* Call system error handler.  */
            _lx_nor_flash_system_error(nor_flash, status);
 80165ac:	69f9      	ldr	r1, [r7, #28]
 80165ae:	6878      	ldr	r0, [r7, #4]
 80165b0:	f000 f93e 	bl	8016830 <_lx_nor_flash_system_error>
            /* Release the thread safe mutex.  */
            tx_mutex_put(&nor_flash -> lx_nor_flash_mutex);
#endif

            /* Return status.  */
            return(LX_ERROR);
 80165b4:	2301      	movs	r3, #1
 80165b6:	e029      	b.n	801660c <_lx_nor_flash_sector_release+0xd0>
        }

        /* Increment the number of obsolete physical sectors.  */
        nor_flash -> lx_nor_flash_obsolete_physical_sectors++;
 80165b8:	687b      	ldr	r3, [r7, #4]
 80165ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80165bc:	1c5a      	adds	r2, r3, #1
 80165be:	687b      	ldr	r3, [r7, #4]
 80165c0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Decrement the number of mapped physical sectors.  */
        nor_flash -> lx_nor_flash_mapped_physical_sectors--;
 80165c2:	687b      	ldr	r3, [r7, #4]
 80165c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80165c6:	1e5a      	subs	r2, r3, #1
 80165c8:	687b      	ldr	r3, [r7, #4]
 80165ca:	631a      	str	r2, [r3, #48]	; 0x30
            
        /* Ensure the sector mapping cache no longer has this sector.  */
        _lx_nor_flash_sector_mapping_cache_invalidate(nor_flash, logical_sector);
 80165cc:	6839      	ldr	r1, [r7, #0]
 80165ce:	6878      	ldr	r0, [r7, #4]
 80165d0:	f7ff febb 	bl	801634a <_lx_nor_flash_sector_mapping_cache_invalidate>

        /* Determine if there are less than two block's worth of free sectors.  */
        i =  0;
 80165d4:	2300      	movs	r3, #0
 80165d6:	61bb      	str	r3, [r7, #24]
        while (nor_flash -> lx_nor_flash_free_physical_sectors <= nor_flash -> lx_nor_flash_physical_sectors_per_block)
 80165d8:	e00a      	b.n	80165f0 <_lx_nor_flash_sector_release+0xb4>
        {
     
            /* Attempt to reclaim one physical block.  */
            _lx_nor_flash_block_reclaim(nor_flash);
 80165da:	6878      	ldr	r0, [r7, #4]
 80165dc:	f7fe faa2 	bl	8014b24 <_lx_nor_flash_block_reclaim>

            /* Increment the block count.  */
            i++;
 80165e0:	69bb      	ldr	r3, [r7, #24]
 80165e2:	3301      	adds	r3, #1
 80165e4:	61bb      	str	r3, [r7, #24]

            /* Have we exceeded the number of blocks in the system?  */
            if (i >= nor_flash -> lx_nor_flash_total_blocks)
 80165e6:	687b      	ldr	r3, [r7, #4]
 80165e8:	685b      	ldr	r3, [r3, #4]
 80165ea:	69ba      	ldr	r2, [r7, #24]
 80165ec:	429a      	cmp	r2, r3
 80165ee:	d206      	bcs.n	80165fe <_lx_nor_flash_sector_release+0xc2>
        while (nor_flash -> lx_nor_flash_free_physical_sectors <= nor_flash -> lx_nor_flash_physical_sectors_per_block)
 80165f0:	687b      	ldr	r3, [r7, #4]
 80165f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80165f4:	687b      	ldr	r3, [r7, #4]
 80165f6:	691b      	ldr	r3, [r3, #16]
 80165f8:	429a      	cmp	r2, r3
 80165fa:	d9ee      	bls.n	80165da <_lx_nor_flash_sector_release+0x9e>
 80165fc:	e000      	b.n	8016600 <_lx_nor_flash_sector_release+0xc4>
            { 
          
                /* Yes, break out of the loop.  */
                break;
 80165fe:	bf00      	nop
            }
        }

        /* Set the status to success.  */
        status =  LX_SUCCESS;
 8016600:	2300      	movs	r3, #0
 8016602:	61fb      	str	r3, [r7, #28]
 8016604:	e001      	b.n	801660a <_lx_nor_flash_sector_release+0xce>
    }
    else
    {

        /* Could not find the logical sector.  */
        status =  LX_SECTOR_NOT_FOUND;
 8016606:	2303      	movs	r3, #3
 8016608:	61fb      	str	r3, [r7, #28]
    /* Release the thread safe mutex.  */
    tx_mutex_put(&nor_flash -> lx_nor_flash_mutex);
#endif

    /* Return status.  */
    return(status);
 801660a:	69fb      	ldr	r3, [r7, #28]
}
 801660c:	4618      	mov	r0, r3
 801660e:	3720      	adds	r7, #32
 8016610:	46bd      	mov	sp, r7
 8016612:	bd80      	pop	{r7, pc}

08016614 <_lx_nor_flash_sector_write>:
/*  06-02-2021     Bhupendra Naphade        Modified comment(s),          */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UINT  _lx_nor_flash_sector_write(LX_NOR_FLASH *nor_flash, ULONG logical_sector, VOID *buffer)
{
 8016614:	b590      	push	{r4, r7, lr}
 8016616:	b091      	sub	sp, #68	; 0x44
 8016618:	af02      	add	r7, sp, #8
 801661a:	60f8      	str	r0, [r7, #12]
 801661c:	60b9      	str	r1, [r7, #8]
 801661e:	607a      	str	r2, [r7, #4]
    /* Obtain the thread safe mutex.  */
    tx_mutex_get(&nor_flash -> lx_nor_flash_mutex, TX_WAIT_FOREVER);
#endif

    /* Determine if there are less than two block's worth of free sectors.  */
    i =  0;
 8016620:	2300      	movs	r3, #0
 8016622:	637b      	str	r3, [r7, #52]	; 0x34
    while (nor_flash -> lx_nor_flash_free_physical_sectors <= nor_flash -> lx_nor_flash_physical_sectors_per_block)
 8016624:	e00a      	b.n	801663c <_lx_nor_flash_sector_write+0x28>
    {
     
        /* Attempt to reclaim one physical block.  */
        _lx_nor_flash_block_reclaim(nor_flash);
 8016626:	68f8      	ldr	r0, [r7, #12]
 8016628:	f7fe fa7c 	bl	8014b24 <_lx_nor_flash_block_reclaim>

        /* Increment the block count.  */
        i++;
 801662c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801662e:	3301      	adds	r3, #1
 8016630:	637b      	str	r3, [r7, #52]	; 0x34

        /* Have we exceeded the number of blocks in the system?  */
        if (i >= nor_flash -> lx_nor_flash_total_blocks)
 8016632:	68fb      	ldr	r3, [r7, #12]
 8016634:	685b      	ldr	r3, [r3, #4]
 8016636:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016638:	429a      	cmp	r2, r3
 801663a:	d206      	bcs.n	801664a <_lx_nor_flash_sector_write+0x36>
    while (nor_flash -> lx_nor_flash_free_physical_sectors <= nor_flash -> lx_nor_flash_physical_sectors_per_block)
 801663c:	68fb      	ldr	r3, [r7, #12]
 801663e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016640:	68fb      	ldr	r3, [r7, #12]
 8016642:	691b      	ldr	r3, [r3, #16]
 8016644:	429a      	cmp	r2, r3
 8016646:	d9ee      	bls.n	8016626 <_lx_nor_flash_sector_write+0x12>
 8016648:	e000      	b.n	801664c <_lx_nor_flash_sector_write+0x38>
        { 
          
            /* Yes, break out of the loop.  */
            break;
 801664a:	bf00      	nop
        }
    }

    /* Increment the number of write requests.  */
    nor_flash -> lx_nor_flash_write_requests++;
 801664c:	68fb      	ldr	r3, [r7, #12]
 801664e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016650:	1c5a      	adds	r2, r3, #1
 8016652:	68fb      	ldr	r3, [r7, #12]
 8016654:	64da      	str	r2, [r3, #76]	; 0x4c

    /* See if we can find the sector in the current mapping.  */
    _lx_nor_flash_logical_sector_find(nor_flash, logical_sector, LX_FALSE, &old_mapping_address, &old_sector_address);
 8016656:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801665a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801665e:	9300      	str	r3, [sp, #0]
 8016660:	4613      	mov	r3, r2
 8016662:	2200      	movs	r2, #0
 8016664:	68b9      	ldr	r1, [r7, #8]
 8016666:	68f8      	ldr	r0, [r7, #12]
 8016668:	f7fe fe98 	bl	801539c <_lx_nor_flash_logical_sector_find>
       
    /* Allocate a new physical sector for this write.  */
    _lx_nor_flash_physical_sector_allocate(nor_flash, logical_sector, &new_mapping_address, &new_sector_address);
 801666c:	f107 0318 	add.w	r3, r7, #24
 8016670:	f107 021c 	add.w	r2, r7, #28
 8016674:	68b9      	ldr	r1, [r7, #8]
 8016676:	68f8      	ldr	r0, [r7, #12]
 8016678:	f7ff fd10 	bl	801609c <_lx_nor_flash_physical_sector_allocate>

    /* Determine if the new sector allocation was successful.  */
    if (new_mapping_address)
 801667c:	69fb      	ldr	r3, [r7, #28]
 801667e:	2b00      	cmp	r3, #0
 8016680:	f000 80cf 	beq.w	8016822 <_lx_nor_flash_sector_write+0x20e>
    {
    
        /* Yes, we were able to allocate a new physical sector.  */

        /* Update the number of free physical sectors.  */
        nor_flash -> lx_nor_flash_free_physical_sectors--;
 8016684:	68fb      	ldr	r3, [r7, #12]
 8016686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016688:	1e5a      	subs	r2, r3, #1
 801668a:	68fb      	ldr	r3, [r7, #12]
 801668c:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Write the sector data to the new physical sector.  */
        status =  _lx_nor_flash_driver_write(nor_flash, new_sector_address, buffer, LX_NOR_SECTOR_SIZE);
 801668e:	69b9      	ldr	r1, [r7, #24]
 8016690:	2380      	movs	r3, #128	; 0x80
 8016692:	687a      	ldr	r2, [r7, #4]
 8016694:	68f8      	ldr	r0, [r7, #12]
 8016696:	f7fe fe29 	bl	80152ec <_lx_nor_flash_driver_write>
 801669a:	6338      	str	r0, [r7, #48]	; 0x30

        /* Check for an error from flash driver. Drivers should never return an error..  */
        if (status)
 801669c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801669e:	2b00      	cmp	r3, #0
 80166a0:	d005      	beq.n	80166ae <_lx_nor_flash_sector_write+0x9a>
        {
        
            /* Call system error handler.  */
            _lx_nor_flash_system_error(nor_flash, status);
 80166a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80166a4:	68f8      	ldr	r0, [r7, #12]
 80166a6:	f000 f8c3 	bl	8016830 <_lx_nor_flash_system_error>
            /* Release the thread safe mutex.  */
            tx_mutex_put(&nor_flash -> lx_nor_flash_mutex);
#endif

            /* Return status.  */
            return(LX_ERROR);
 80166aa:	2301      	movs	r3, #1
 80166ac:	e0bc      	b.n	8016828 <_lx_nor_flash_sector_write+0x214>
        }

        /* Was there a previously mapped sector?  */
        if (old_mapping_address)
 80166ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80166b0:	2b00      	cmp	r3, #0
 80166b2:	d025      	beq.n	8016700 <_lx_nor_flash_sector_write+0xec>
#ifdef LX_DIRECT_READ
        
            /* Read the word directly.  */
            old_mapping_entry =  *(old_mapping_address);
#else
            status =  _lx_nor_flash_driver_read(nor_flash, old_mapping_address, &old_mapping_entry, 1);
 80166b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80166b6:	f107 0220 	add.w	r2, r7, #32
 80166ba:	2301      	movs	r3, #1
 80166bc:	68f8      	ldr	r0, [r7, #12]
 80166be:	f7fe fd2f 	bl	8015120 <_lx_nor_flash_driver_read>
 80166c2:	6338      	str	r0, [r7, #48]	; 0x30

            /* Check for an error from flash driver. Drivers should never return an error..  */
            if (status)
 80166c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80166c6:	2b00      	cmp	r3, #0
 80166c8:	d005      	beq.n	80166d6 <_lx_nor_flash_sector_write+0xc2>
            {
        
                /* Call system error handler.  */
                _lx_nor_flash_system_error(nor_flash, status);
 80166ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80166cc:	68f8      	ldr	r0, [r7, #12]
 80166ce:	f000 f8af 	bl	8016830 <_lx_nor_flash_system_error>
                /* Release the thread safe mutex.  */
                tx_mutex_put(&nor_flash -> lx_nor_flash_mutex);
#endif

                /* Return status.  */
                return(LX_ERROR);
 80166d2:	2301      	movs	r3, #1
 80166d4:	e0a8      	b.n	8016828 <_lx_nor_flash_sector_write+0x214>
            }
#endif
            
            /* Clear bit 30, which indicates this sector is superceded.  */
            old_mapping_entry =  old_mapping_entry & ~((ULONG) LX_NOR_PHYSICAL_SECTOR_SUPERCEDED);
 80166d6:	6a3b      	ldr	r3, [r7, #32]
 80166d8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80166dc:	623b      	str	r3, [r7, #32]
            
            /* Write the value back to the flash to clear bit 30.  */
            status =  _lx_nor_flash_driver_write(nor_flash, old_mapping_address, &old_mapping_entry, 1);
 80166de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80166e0:	f107 0220 	add.w	r2, r7, #32
 80166e4:	2301      	movs	r3, #1
 80166e6:	68f8      	ldr	r0, [r7, #12]
 80166e8:	f7fe fe00 	bl	80152ec <_lx_nor_flash_driver_write>
 80166ec:	6338      	str	r0, [r7, #48]	; 0x30

            /* Check for an error from flash driver. Drivers should never return an error..  */
            if (status)
 80166ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80166f0:	2b00      	cmp	r3, #0
 80166f2:	d005      	beq.n	8016700 <_lx_nor_flash_sector_write+0xec>
            {
        
                /* Call system error handler.  */
                _lx_nor_flash_system_error(nor_flash, status);
 80166f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80166f6:	68f8      	ldr	r0, [r7, #12]
 80166f8:	f000 f89a 	bl	8016830 <_lx_nor_flash_system_error>
                /* Release the thread safe mutex.  */
                tx_mutex_put(&nor_flash -> lx_nor_flash_mutex);
#endif

                /* Return status.  */
                return(LX_ERROR);
 80166fc:	2301      	movs	r3, #1
 80166fe:	e093      	b.n	8016828 <_lx_nor_flash_sector_write+0x214>
            }
        }
        
        /* Now build the new mapping entry - with the not valid bit set initially.  */
        new_mapping_entry =  ((ULONG) LX_NOR_PHYSICAL_SECTOR_VALID) | ((ULONG) LX_NOR_PHYSICAL_SECTOR_SUPERCEDED) | ((ULONG) LX_NOR_PHYSICAL_SECTOR_MAPPING_NOT_VALID) | logical_sector;
 8016700:	68bb      	ldr	r3, [r7, #8]
 8016702:	f043 4360 	orr.w	r3, r3, #3758096384	; 0xe0000000
 8016706:	617b      	str	r3, [r7, #20]
            
        /* Write out the new mapping entry.  */
        status =  _lx_nor_flash_driver_write(nor_flash, new_mapping_address, &new_mapping_entry, 1);
 8016708:	69f9      	ldr	r1, [r7, #28]
 801670a:	f107 0214 	add.w	r2, r7, #20
 801670e:	2301      	movs	r3, #1
 8016710:	68f8      	ldr	r0, [r7, #12]
 8016712:	f7fe fdeb 	bl	80152ec <_lx_nor_flash_driver_write>
 8016716:	6338      	str	r0, [r7, #48]	; 0x30

        /* Check for an error from flash driver. Drivers should never return an error..  */
        if (status)
 8016718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801671a:	2b00      	cmp	r3, #0
 801671c:	d005      	beq.n	801672a <_lx_nor_flash_sector_write+0x116>
        {
        
            /* Call system error handler.  */
            _lx_nor_flash_system_error(nor_flash, status);
 801671e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8016720:	68f8      	ldr	r0, [r7, #12]
 8016722:	f000 f885 	bl	8016830 <_lx_nor_flash_system_error>
            /* Release the thread safe mutex.  */
            tx_mutex_put(&nor_flash -> lx_nor_flash_mutex);
#endif

            /* Return status.  */
            return(LX_ERROR);
 8016726:	2301      	movs	r3, #1
 8016728:	e07e      	b.n	8016828 <_lx_nor_flash_sector_write+0x214>
        }

        /* Now clear the not valid bit to make this sector mapping valid.  This is done because the writing of the extra bytes itself can 
           be interrupted and we need to make sure this can be detected when the flash is opened again.  */
        new_mapping_entry =  new_mapping_entry & ~((ULONG) LX_NOR_PHYSICAL_SECTOR_MAPPING_NOT_VALID);
 801672a:	697b      	ldr	r3, [r7, #20]
 801672c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8016730:	617b      	str	r3, [r7, #20]
            
        /* Clear the not valid bit.  */
        status =  _lx_nor_flash_driver_write(nor_flash, new_mapping_address, &new_mapping_entry, 1);
 8016732:	69f9      	ldr	r1, [r7, #28]
 8016734:	f107 0214 	add.w	r2, r7, #20
 8016738:	2301      	movs	r3, #1
 801673a:	68f8      	ldr	r0, [r7, #12]
 801673c:	f7fe fdd6 	bl	80152ec <_lx_nor_flash_driver_write>
 8016740:	6338      	str	r0, [r7, #48]	; 0x30

        /* Check for an error from flash driver. Drivers should never return an error..  */
        if (status)
 8016742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016744:	2b00      	cmp	r3, #0
 8016746:	d005      	beq.n	8016754 <_lx_nor_flash_sector_write+0x140>
        {
        
            /* Call system error handler.  */
            _lx_nor_flash_system_error(nor_flash, status);
 8016748:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801674a:	68f8      	ldr	r0, [r7, #12]
 801674c:	f000 f870 	bl	8016830 <_lx_nor_flash_system_error>
            /* Release the thread safe mutex.  */
            tx_mutex_put(&nor_flash -> lx_nor_flash_mutex);
#endif

            /* Return status.  */
            return(LX_ERROR);
 8016750:	2301      	movs	r3, #1
 8016752:	e069      	b.n	8016828 <_lx_nor_flash_sector_write+0x214>
        }

        /* Increment the number of mapped physical sectors.  */
        nor_flash -> lx_nor_flash_mapped_physical_sectors++;
 8016754:	68fb      	ldr	r3, [r7, #12]
 8016756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016758:	1c5a      	adds	r2, r3, #1
 801675a:	68fb      	ldr	r3, [r7, #12]
 801675c:	631a      	str	r2, [r3, #48]	; 0x30
        
        /* Was there a previously mapped sector?  */
        if (old_mapping_address)
 801675e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016760:	2b00      	cmp	r3, #0
 8016762:	d022      	beq.n	80167aa <_lx_nor_flash_sector_write+0x196>
        {
        
            /* Now clear bit 31, which indicates this sector is now obsoleted.  */
            old_mapping_entry =  old_mapping_entry & ~((ULONG) LX_NOR_PHYSICAL_SECTOR_VALID);
 8016764:	6a3b      	ldr	r3, [r7, #32]
 8016766:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801676a:	623b      	str	r3, [r7, #32]
            
            /* Write the value back to the flash to clear bit 31.  */
            status =  _lx_nor_flash_driver_write(nor_flash, old_mapping_address, &old_mapping_entry, 1);
 801676c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801676e:	f107 0220 	add.w	r2, r7, #32
 8016772:	2301      	movs	r3, #1
 8016774:	68f8      	ldr	r0, [r7, #12]
 8016776:	f7fe fdb9 	bl	80152ec <_lx_nor_flash_driver_write>
 801677a:	6338      	str	r0, [r7, #48]	; 0x30
            
            /* Check for an error from flash driver. Drivers should never return an error..  */
            if (status)
 801677c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801677e:	2b00      	cmp	r3, #0
 8016780:	d005      	beq.n	801678e <_lx_nor_flash_sector_write+0x17a>
            {
        
                /* Call system error handler.  */
                _lx_nor_flash_system_error(nor_flash, status);
 8016782:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8016784:	68f8      	ldr	r0, [r7, #12]
 8016786:	f000 f853 	bl	8016830 <_lx_nor_flash_system_error>
                /* Release the thread safe mutex.  */
                tx_mutex_put(&nor_flash -> lx_nor_flash_mutex);
#endif

              /* Return status.  */
                return(LX_ERROR);
 801678a:	2301      	movs	r3, #1
 801678c:	e04c      	b.n	8016828 <_lx_nor_flash_sector_write+0x214>
            }

            /* Increment the number of obsolete physical sectors.  */
            nor_flash -> lx_nor_flash_obsolete_physical_sectors++;
 801678e:	68fb      	ldr	r3, [r7, #12]
 8016790:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016792:	1c5a      	adds	r2, r3, #1
 8016794:	68fb      	ldr	r3, [r7, #12]
 8016796:	635a      	str	r2, [r3, #52]	; 0x34

            /* Decrement the number of mapped physical sectors.  */
            nor_flash -> lx_nor_flash_mapped_physical_sectors--;
 8016798:	68fb      	ldr	r3, [r7, #12]
 801679a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801679c:	1e5a      	subs	r2, r3, #1
 801679e:	68fb      	ldr	r3, [r7, #12]
 80167a0:	631a      	str	r2, [r3, #48]	; 0x30
            
            /* Invalidate the old sector mapping cache entry.  */
            _lx_nor_flash_sector_mapping_cache_invalidate(nor_flash, logical_sector);
 80167a2:	68b9      	ldr	r1, [r7, #8]
 80167a4:	68f8      	ldr	r0, [r7, #12]
 80167a6:	f7ff fdd0 	bl	801634a <_lx_nor_flash_sector_mapping_cache_invalidate>
        }

        /* Determine if the sector mapping cache is enabled.  */
        if (nor_flash -> lx_nor_flash_sector_mapping_cache_enabled)
 80167aa:	68fb      	ldr	r3, [r7, #12]
 80167ac:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80167b0:	2b00      	cmp	r3, #0
 80167b2:	d033      	beq.n	801681c <_lx_nor_flash_sector_write+0x208>
        {
        
            /* Yes, sector mapping cache is enabled, place this sector information in the cache.  */
            
            /* Calculate the starting index of the sector mapping cache for this sector entry.  */
            i =  (logical_sector & LX_NOR_SECTOR_MAPPING_CACHE_HASH_MASK) * LX_NOR_SECTOR_MAPPING_CACHE_DEPTH;
 80167b4:	68bb      	ldr	r3, [r7, #8]
 80167b6:	f003 0303 	and.w	r3, r3, #3
 80167ba:	009b      	lsls	r3, r3, #2
 80167bc:	637b      	str	r3, [r7, #52]	; 0x34

            /* Build a pointer to the cache entry.  */
            sector_mapping_cache_entry_ptr =  &nor_flash -> lx_nor_flash_sector_mapping_cache[i];
 80167be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80167c0:	4613      	mov	r3, r2
 80167c2:	005b      	lsls	r3, r3, #1
 80167c4:	4413      	add	r3, r2
 80167c6:	009b      	lsls	r3, r3, #2
 80167c8:	33a8      	adds	r3, #168	; 0xa8
 80167ca:	68fa      	ldr	r2, [r7, #12]
 80167cc:	4413      	add	r3, r2
 80167ce:	3304      	adds	r3, #4
 80167d0:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Move all the cache entries down so the oldest is at the bottom.  */
            *(sector_mapping_cache_entry_ptr + 3) =  *(sector_mapping_cache_entry_ptr + 2);
 80167d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80167d4:	f103 0224 	add.w	r2, r3, #36	; 0x24
 80167d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80167da:	4614      	mov	r4, r2
 80167dc:	3318      	adds	r3, #24
 80167de:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80167e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            *(sector_mapping_cache_entry_ptr + 2) =  *(sector_mapping_cache_entry_ptr + 1);
 80167e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80167e8:	f103 0218 	add.w	r2, r3, #24
 80167ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80167ee:	4614      	mov	r4, r2
 80167f0:	330c      	adds	r3, #12
 80167f2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80167f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            *(sector_mapping_cache_entry_ptr + 1) =  *(sector_mapping_cache_entry_ptr);
 80167fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80167fc:	330c      	adds	r3, #12
 80167fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016800:	ca07      	ldmia	r2, {r0, r1, r2}
 8016802:	e883 0007 	stmia.w	r3, {r0, r1, r2}
           
            /* Setup the new sector information in the cache.  */
            sector_mapping_cache_entry_ptr -> lx_nor_sector_mapping_cache_logical_sector =             (logical_sector | LX_NOR_SECTOR_MAPPING_CACHE_ENTRY_VALID);
 8016806:	68bb      	ldr	r3, [r7, #8]
 8016808:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 801680c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801680e:	601a      	str	r2, [r3, #0]
            sector_mapping_cache_entry_ptr -> lx_nor_sector_mapping_cache_physical_sector_map_entry =  new_mapping_address;
 8016810:	69fa      	ldr	r2, [r7, #28]
 8016812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016814:	605a      	str	r2, [r3, #4]
            sector_mapping_cache_entry_ptr -> lx_nor_sector_mapping_cache_physical_sector_address =    new_sector_address;
 8016816:	69ba      	ldr	r2, [r7, #24]
 8016818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801681a:	609a      	str	r2, [r3, #8]
        }

        /* Indicate the write was successful.  */
        status =  LX_SUCCESS;        
 801681c:	2300      	movs	r3, #0
 801681e:	633b      	str	r3, [r7, #48]	; 0x30
 8016820:	e001      	b.n	8016826 <_lx_nor_flash_sector_write+0x212>
    }
    else
    {
    
        /* Indicate the write was unsuccessful.  */
        status =  LX_NO_SECTORS;
 8016822:	2302      	movs	r3, #2
 8016824:	633b      	str	r3, [r7, #48]	; 0x30
    /* Release the thread safe mutex.  */
    tx_mutex_put(&nor_flash -> lx_nor_flash_mutex);
#endif

    /* Return the completion status.  */
    return(status);
 8016826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8016828:	4618      	mov	r0, r3
 801682a:	373c      	adds	r7, #60	; 0x3c
 801682c:	46bd      	mov	sp, r7
 801682e:	bd90      	pop	{r4, r7, pc}

08016830 <_lx_nor_flash_system_error>:
/*  06-02-2021     Bhupendra Naphade        Modified comment(s),          */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
VOID  _lx_nor_flash_system_error(LX_NOR_FLASH *nor_flash, UINT error_code)
{
 8016830:	b580      	push	{r7, lr}
 8016832:	b082      	sub	sp, #8
 8016834:	af00      	add	r7, sp, #0
 8016836:	6078      	str	r0, [r7, #4]
 8016838:	6039      	str	r1, [r7, #0]

    /* Increment the system error counter.  */
    nor_flash -> lx_nor_flash_diagnostic_system_errors++;
 801683a:	687b      	ldr	r3, [r7, #4]
 801683c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801683e:	1c5a      	adds	r2, r3, #1
 8016840:	687b      	ldr	r3, [r7, #4]
 8016842:	665a      	str	r2, [r3, #100]	; 0x64
    
    /* Save the most recent system error code.  */
    nor_flash -> lx_nor_flash_diagnostic_system_error =  error_code;
 8016844:	687b      	ldr	r3, [r7, #4]
 8016846:	683a      	ldr	r2, [r7, #0]
 8016848:	669a      	str	r2, [r3, #104]	; 0x68
    
    /* Determine if the driver has setup a system error handler.  */
    if (nor_flash -> lx_nor_flash_driver_system_error)
 801684a:	687b      	ldr	r3, [r7, #4]
 801684c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8016850:	2b00      	cmp	r3, #0
 8016852:	d004      	beq.n	801685e <_lx_nor_flash_system_error+0x2e>
    {
    
        /* Yes, call the driver's system error handler.  */
        (nor_flash -> lx_nor_flash_driver_system_error)(error_code);
 8016854:	687b      	ldr	r3, [r7, #4]
 8016856:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801685a:	6838      	ldr	r0, [r7, #0]
 801685c:	4798      	blx	r3
    }
}
 801685e:	bf00      	nop
 8016860:	3708      	adds	r7, #8
 8016862:	46bd      	mov	sp, r7
 8016864:	bd80      	pop	{r7, pc}

08016866 <check_status>:
* @param none
* @retval LX_SUCCESS if the octospi is ready, LX_ERROR otherwise
*/

static UINT check_status(void)
{
 8016866:	b580      	push	{r7, lr}
 8016868:	b082      	sub	sp, #8
 801686a:	af00      	add	r7, sp, #0
  ULONG start = LX_STM32_OSPI_CURRENT_TIME();
 801686c:	f002 faa2 	bl	8018db4 <_tx_time_get>
 8016870:	6078      	str	r0, [r7, #4]
  while (LX_STM32_OSPI_CURRENT_TIME() - start < LX_STM32_OSPI_DEFAULT_TIMEOUT)
 8016872:	e007      	b.n	8016884 <check_status+0x1e>
  {
    if (lx_stm32_ospi_get_status(LX_STM32_OSPI_INSTANCE) == 0)
 8016874:	2001      	movs	r0, #1
 8016876:	f7ea fef3 	bl	8001660 <lx_stm32_ospi_get_status>
 801687a:	4603      	mov	r3, r0
 801687c:	2b00      	cmp	r3, #0
 801687e:	d101      	bne.n	8016884 <check_status+0x1e>
    {
      return LX_SUCCESS;
 8016880:	2300      	movs	r3, #0
 8016882:	e008      	b.n	8016896 <check_status+0x30>
  while (LX_STM32_OSPI_CURRENT_TIME() - start < LX_STM32_OSPI_DEFAULT_TIMEOUT)
 8016884:	f002 fa96 	bl	8018db4 <_tx_time_get>
 8016888:	4602      	mov	r2, r0
 801688a:	687b      	ldr	r3, [r7, #4]
 801688c:	1ad3      	subs	r3, r2, r3
 801688e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8016892:	d3ef      	bcc.n	8016874 <check_status+0xe>
    }
  }

  return LX_ERROR;
 8016894:	2301      	movs	r3, #1
}
 8016896:	4618      	mov	r0, r3
 8016898:	3708      	adds	r7, #8
 801689a:	46bd      	mov	sp, r7
 801689c:	bd80      	pop	{r7, pc}
	...

080168a0 <lx_stm32_ospi_initialize>:
* @param LX_NOR_FLASH * the levelx NOR flash main instance.
* @retval LX_SUCCESS if the octospi is ready, LX_ERROR otherwise
*/

UINT lx_stm32_ospi_initialize(LX_NOR_FLASH *nor_flash)
{
 80168a0:	b580      	push	{r7, lr}
 80168a2:	b086      	sub	sp, #24
 80168a4:	af00      	add	r7, sp, #0
 80168a6:	6078      	str	r0, [r7, #4]
  INT ret;
  ULONG block_size;
  ULONG total_blocks;

  if (is_initialized == LX_FALSE)
 80168a8:	4b30      	ldr	r3, [pc, #192]	; (801696c <lx_stm32_ospi_initialize+0xcc>)
 80168aa:	681b      	ldr	r3, [r3, #0]
 80168ac:	2b00      	cmp	r3, #0
 80168ae:	d142      	bne.n	8016936 <lx_stm32_ospi_initialize+0x96>
  {

    ret = lx_stm32_ospi_lowlevel_init(LX_STM32_OSPI_INSTANCE);
 80168b0:	2001      	movs	r0, #1
 80168b2:	f7ea fe97 	bl	80015e4 <lx_stm32_ospi_lowlevel_init>
 80168b6:	6178      	str	r0, [r7, #20]

    if (ret != 0)
 80168b8:	697b      	ldr	r3, [r7, #20]
 80168ba:	2b00      	cmp	r3, #0
 80168bc:	d001      	beq.n	80168c2 <lx_stm32_ospi_initialize+0x22>
    {
      return LX_ERROR;
 80168be:	2301      	movs	r3, #1
 80168c0:	e050      	b.n	8016964 <lx_stm32_ospi_initialize+0xc4>
    {
      return LX_ERROR;
    }
#endif

    if (check_status() != LX_SUCCESS)
 80168c2:	f7ff ffd0 	bl	8016866 <check_status>
 80168c6:	4603      	mov	r3, r0
 80168c8:	2b00      	cmp	r3, #0
 80168ca:	d001      	beq.n	80168d0 <lx_stm32_ospi_initialize+0x30>
    {
      return LX_ERROR;
 80168cc:	2301      	movs	r3, #1
 80168ce:	e049      	b.n	8016964 <lx_stm32_ospi_initialize+0xc4>
    }

    ret = lx_stm32_ospi_get_info(LX_STM32_OSPI_INSTANCE, &block_size, &total_blocks);
 80168d0:	f107 020c 	add.w	r2, r7, #12
 80168d4:	f107 0310 	add.w	r3, r7, #16
 80168d8:	4619      	mov	r1, r3
 80168da:	2001      	movs	r0, #1
 80168dc:	f7ea ff18 	bl	8001710 <lx_stm32_ospi_get_info>
 80168e0:	6178      	str	r0, [r7, #20]

    if (ret != 0)
 80168e2:	697b      	ldr	r3, [r7, #20]
 80168e4:	2b00      	cmp	r3, #0
 80168e6:	d001      	beq.n	80168ec <lx_stm32_ospi_initialize+0x4c>
    {
      return LX_ERROR;
 80168e8:	2301      	movs	r3, #1
 80168ea:	e03b      	b.n	8016964 <lx_stm32_ospi_initialize+0xc4>
    }

    /* Setup the base address of the flash memory.  */
    nor_flash->lx_nor_flash_base_address = 0;
 80168ec:	687b      	ldr	r3, [r7, #4]
 80168ee:	2200      	movs	r2, #0
 80168f0:	615a      	str	r2, [r3, #20]

    /* Setup geometry of the flash.  */
    nor_flash->lx_nor_flash_total_blocks = total_blocks;
 80168f2:	68fa      	ldr	r2, [r7, #12]
 80168f4:	687b      	ldr	r3, [r7, #4]
 80168f6:	605a      	str	r2, [r3, #4]
    nor_flash->lx_nor_flash_words_per_block = block_size / sizeof(ULONG);
 80168f8:	693b      	ldr	r3, [r7, #16]
 80168fa:	089a      	lsrs	r2, r3, #2
 80168fc:	687b      	ldr	r3, [r7, #4]
 80168fe:	609a      	str	r2, [r3, #8]

    nor_flash->lx_nor_flash_driver_read = lx_ospi_driver_read_sector;
 8016900:	687b      	ldr	r3, [r7, #4]
 8016902:	4a1b      	ldr	r2, [pc, #108]	; (8016970 <lx_stm32_ospi_initialize+0xd0>)
 8016904:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    nor_flash->lx_nor_flash_driver_write = lx_ospi_driver_write_sector;
 8016908:	687b      	ldr	r3, [r7, #4]
 801690a:	4a1a      	ldr	r2, [pc, #104]	; (8016974 <lx_stm32_ospi_initialize+0xd4>)
 801690c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    nor_flash->lx_nor_flash_driver_block_erase = lx_ospi_driver_erase_block;
 8016910:	687b      	ldr	r3, [r7, #4]
 8016912:	4a19      	ldr	r2, [pc, #100]	; (8016978 <lx_stm32_ospi_initialize+0xd8>)
 8016914:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    nor_flash->lx_nor_flash_driver_block_erased_verify = lx_ospi_driver_block_erased_verify;
 8016918:	687b      	ldr	r3, [r7, #4]
 801691a:	4a18      	ldr	r2, [pc, #96]	; (801697c <lx_stm32_ospi_initialize+0xdc>)
 801691c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    nor_flash->lx_nor_flash_driver_system_error = lx_ospi_driver_system_error;
 8016920:	687b      	ldr	r3, [r7, #4]
 8016922:	4a17      	ldr	r2, [pc, #92]	; (8016980 <lx_stm32_ospi_initialize+0xe0>)
 8016924:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

#ifndef LX_DIRECT_READ
    /* Setup local buffer for NOR flash operation. This buffer must be the sector size of the NOR flash memory.  */
    nor_flash->lx_nor_flash_sector_buffer =  &ospi_sector_buffer[0];
 8016928:	687b      	ldr	r3, [r7, #4]
 801692a:	4a16      	ldr	r2, [pc, #88]	; (8016984 <lx_stm32_ospi_initialize+0xe4>)
 801692c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
#endif
    is_initialized = LX_TRUE;
 8016930:	4b0e      	ldr	r3, [pc, #56]	; (801696c <lx_stm32_ospi_initialize+0xcc>)
 8016932:	2201      	movs	r2, #1
 8016934:	601a      	str	r2, [r3, #0]
  }

  /* call post init routine*/
  LX_STM32_OSPI_POST_INIT();
 8016936:	231c      	movs	r3, #28
 8016938:	2200      	movs	r2, #0
 801693a:	4913      	ldr	r1, [pc, #76]	; (8016988 <lx_stm32_ospi_initialize+0xe8>)
 801693c:	4813      	ldr	r0, [pc, #76]	; (801698c <lx_stm32_ospi_initialize+0xec>)
 801693e:	f002 fe05 	bl	801954c <_txe_semaphore_create>
 8016942:	4603      	mov	r3, r0
 8016944:	2b00      	cmp	r3, #0
 8016946:	d001      	beq.n	801694c <lx_stm32_ospi_initialize+0xac>
 8016948:	2301      	movs	r3, #1
 801694a:	e00b      	b.n	8016964 <lx_stm32_ospi_initialize+0xc4>
 801694c:	231c      	movs	r3, #28
 801694e:	2200      	movs	r2, #0
 8016950:	490f      	ldr	r1, [pc, #60]	; (8016990 <lx_stm32_ospi_initialize+0xf0>)
 8016952:	4810      	ldr	r0, [pc, #64]	; (8016994 <lx_stm32_ospi_initialize+0xf4>)
 8016954:	f002 fdfa 	bl	801954c <_txe_semaphore_create>
 8016958:	4603      	mov	r3, r0
 801695a:	2b00      	cmp	r3, #0
 801695c:	d001      	beq.n	8016962 <lx_stm32_ospi_initialize+0xc2>
 801695e:	2301      	movs	r3, #1
 8016960:	e000      	b.n	8016964 <lx_stm32_ospi_initialize+0xc4>

  /* Return success.  */
  return LX_SUCCESS;
 8016962:	2300      	movs	r3, #0
}
 8016964:	4618      	mov	r0, r3
 8016966:	3718      	adds	r7, #24
 8016968:	46bd      	mov	sp, r7
 801696a:	bd80      	pop	{r7, pc}
 801696c:	20015210 	.word	0x20015210
 8016970:	08016999 	.word	0x08016999
 8016974:	080169fd 	.word	0x080169fd
 8016978:	08016a61 	.word	0x08016a61
 801697c:	08016aa1 	.word	0x08016aa1
 8016980:	080019f5 	.word	0x080019f5
 8016984:	20005178 	.word	0x20005178
 8016988:	0801aaf0 	.word	0x0801aaf0
 801698c:	20015178 	.word	0x20015178
 8016990:	0801ab0c 	.word	0x0801ab0c
 8016994:	20015194 	.word	0x20015194

08016998 <lx_ospi_driver_read_sector>:
* @retval LX_SUCCESS if data is read correctly, LX_ERROR on errors
*/


static UINT lx_ospi_driver_read_sector(ULONG *flash_address, ULONG *destination, ULONG words)
{
 8016998:	b580      	push	{r7, lr}
 801699a:	b086      	sub	sp, #24
 801699c:	af00      	add	r7, sp, #0
 801699e:	60f8      	str	r0, [r7, #12]
 80169a0:	60b9      	str	r1, [r7, #8]
 80169a2:	607a      	str	r2, [r7, #4]
  UINT status = LX_SUCCESS;
 80169a4:	2300      	movs	r3, #0
 80169a6:	617b      	str	r3, [r7, #20]

  if (check_status() != LX_SUCCESS)
 80169a8:	f7ff ff5d 	bl	8016866 <check_status>
 80169ac:	4603      	mov	r3, r0
 80169ae:	2b00      	cmp	r3, #0
 80169b0:	d001      	beq.n	80169b6 <lx_ospi_driver_read_sector+0x1e>
  {
    return LX_ERROR;
 80169b2:	2301      	movs	r3, #1
 80169b4:	e01b      	b.n	80169ee <lx_ospi_driver_read_sector+0x56>
  }

  LX_STM32_OSPI_PRE_READ_TRANSFER(status);

  if (status != LX_SUCCESS)
 80169b6:	697b      	ldr	r3, [r7, #20]
 80169b8:	2b00      	cmp	r3, #0
 80169ba:	d001      	beq.n	80169c0 <lx_ospi_driver_read_sector+0x28>
  {
    return status;
 80169bc:	697b      	ldr	r3, [r7, #20]
 80169be:	e016      	b.n	80169ee <lx_ospi_driver_read_sector+0x56>
  }

  if (lx_stm32_ospi_read(LX_STM32_OSPI_INSTANCE, flash_address, destination, words) != 0)
 80169c0:	687b      	ldr	r3, [r7, #4]
 80169c2:	68ba      	ldr	r2, [r7, #8]
 80169c4:	68f9      	ldr	r1, [r7, #12]
 80169c6:	2001      	movs	r0, #1
 80169c8:	f7ea feba 	bl	8001740 <lx_stm32_ospi_read>
 80169cc:	4603      	mov	r3, r0
 80169ce:	2b00      	cmp	r3, #0
 80169d0:	d002      	beq.n	80169d8 <lx_ospi_driver_read_sector+0x40>
  {
    status = LX_ERROR;
 80169d2:	2301      	movs	r3, #1
 80169d4:	617b      	str	r3, [r7, #20]
 80169d6:	e009      	b.n	80169ec <lx_ospi_driver_read_sector+0x54>
    LX_STM32_OSPI_READ_TRANSFER_ERROR(status);
  }
  else
  {
    LX_STM32_OSPI_READ_CPLT_NOTIFY(status);
 80169d8:	f241 3188 	movw	r1, #5000	; 0x1388
 80169dc:	4806      	ldr	r0, [pc, #24]	; (80169f8 <lx_ospi_driver_read_sector+0x60>)
 80169de:	f002 fe89 	bl	80196f4 <_txe_semaphore_get>
 80169e2:	4603      	mov	r3, r0
 80169e4:	2b00      	cmp	r3, #0
 80169e6:	d001      	beq.n	80169ec <lx_ospi_driver_read_sector+0x54>
 80169e8:	2301      	movs	r3, #1
 80169ea:	617b      	str	r3, [r7, #20]
  }

  LX_STM32_OSPI_POST_READ_TRANSFER(status);

  return status;
 80169ec:	697b      	ldr	r3, [r7, #20]
}
 80169ee:	4618      	mov	r0, r3
 80169f0:	3718      	adds	r7, #24
 80169f2:	46bd      	mov	sp, r7
 80169f4:	bd80      	pop	{r7, pc}
 80169f6:	bf00      	nop
 80169f8:	20015178 	.word	0x20015178

080169fc <lx_ospi_driver_write_sector>:
* @param ULONG words the number of words to write
* @retval LX_SUCCESS if data is written correctly, LX_ERROR on errors
*/

static UINT  lx_ospi_driver_write_sector(ULONG *flash_address, ULONG *source, ULONG words)
{
 80169fc:	b580      	push	{r7, lr}
 80169fe:	b086      	sub	sp, #24
 8016a00:	af00      	add	r7, sp, #0
 8016a02:	60f8      	str	r0, [r7, #12]
 8016a04:	60b9      	str	r1, [r7, #8]
 8016a06:	607a      	str	r2, [r7, #4]
  UINT status = LX_SUCCESS;
 8016a08:	2300      	movs	r3, #0
 8016a0a:	617b      	str	r3, [r7, #20]

  if (check_status() != LX_SUCCESS)
 8016a0c:	f7ff ff2b 	bl	8016866 <check_status>
 8016a10:	4603      	mov	r3, r0
 8016a12:	2b00      	cmp	r3, #0
 8016a14:	d001      	beq.n	8016a1a <lx_ospi_driver_write_sector+0x1e>
  {
    return LX_ERROR;
 8016a16:	2301      	movs	r3, #1
 8016a18:	e01b      	b.n	8016a52 <lx_ospi_driver_write_sector+0x56>
  }

  LX_STM32_OSPI_PRE_WRITE_TRANSFER(status);

  if (status != LX_SUCCESS)
 8016a1a:	697b      	ldr	r3, [r7, #20]
 8016a1c:	2b00      	cmp	r3, #0
 8016a1e:	d001      	beq.n	8016a24 <lx_ospi_driver_write_sector+0x28>
  {
    return status;
 8016a20:	697b      	ldr	r3, [r7, #20]
 8016a22:	e016      	b.n	8016a52 <lx_ospi_driver_write_sector+0x56>
  }

  if (lx_stm32_ospi_write(LX_STM32_OSPI_INSTANCE, flash_address, source, words) != 0)
 8016a24:	687b      	ldr	r3, [r7, #4]
 8016a26:	68ba      	ldr	r2, [r7, #8]
 8016a28:	68f9      	ldr	r1, [r7, #12]
 8016a2a:	2001      	movs	r0, #1
 8016a2c:	f7ea fed8 	bl	80017e0 <lx_stm32_ospi_write>
 8016a30:	4603      	mov	r3, r0
 8016a32:	2b00      	cmp	r3, #0
 8016a34:	d002      	beq.n	8016a3c <lx_ospi_driver_write_sector+0x40>
  {
    status = LX_ERROR;
 8016a36:	2301      	movs	r3, #1
 8016a38:	617b      	str	r3, [r7, #20]
 8016a3a:	e009      	b.n	8016a50 <lx_ospi_driver_write_sector+0x54>
    LX_STM32_OSPI_WRITE_TRANSFER_ERROR(status);
  }
  else
  {
    LX_STM32_OSPI_WRITE_CPLT_NOTIFY(status);
 8016a3c:	f241 3188 	movw	r1, #5000	; 0x1388
 8016a40:	4806      	ldr	r0, [pc, #24]	; (8016a5c <lx_ospi_driver_write_sector+0x60>)
 8016a42:	f002 fe57 	bl	80196f4 <_txe_semaphore_get>
 8016a46:	4603      	mov	r3, r0
 8016a48:	2b00      	cmp	r3, #0
 8016a4a:	d001      	beq.n	8016a50 <lx_ospi_driver_write_sector+0x54>
 8016a4c:	2301      	movs	r3, #1
 8016a4e:	617b      	str	r3, [r7, #20]
  }

  LX_STM32_OSPI_POST_WRITE_TRANSFER(status);

  return status;
 8016a50:	697b      	ldr	r3, [r7, #20]
}
 8016a52:	4618      	mov	r0, r3
 8016a54:	3718      	adds	r7, #24
 8016a56:	46bd      	mov	sp, r7
 8016a58:	bd80      	pop	{r7, pc}
 8016a5a:	bf00      	nop
 8016a5c:	20015194 	.word	0x20015194

08016a60 <lx_ospi_driver_erase_block>:

static UINT  lx_ospi_driver_erase_block(ULONG block, ULONG erase_count)
{
 8016a60:	b580      	push	{r7, lr}
 8016a62:	b084      	sub	sp, #16
 8016a64:	af00      	add	r7, sp, #0
 8016a66:	6078      	str	r0, [r7, #4]
 8016a68:	6039      	str	r1, [r7, #0]
  UINT status;

  if (check_status() != LX_SUCCESS)
 8016a6a:	f7ff fefc 	bl	8016866 <check_status>
 8016a6e:	4603      	mov	r3, r0
 8016a70:	2b00      	cmp	r3, #0
 8016a72:	d001      	beq.n	8016a78 <lx_ospi_driver_erase_block+0x18>
  {
    return LX_ERROR;
 8016a74:	2301      	movs	r3, #1
 8016a76:	e00f      	b.n	8016a98 <lx_ospi_driver_erase_block+0x38>
  }

  if (lx_stm32_ospi_erase(LX_STM32_OSPI_INSTANCE, block, erase_count, 0) != 0)
 8016a78:	2300      	movs	r3, #0
 8016a7a:	683a      	ldr	r2, [r7, #0]
 8016a7c:	6879      	ldr	r1, [r7, #4]
 8016a7e:	2001      	movs	r0, #1
 8016a80:	f7ea ff4e 	bl	8001920 <lx_stm32_ospi_erase>
 8016a84:	4603      	mov	r3, r0
 8016a86:	2b00      	cmp	r3, #0
 8016a88:	d002      	beq.n	8016a90 <lx_ospi_driver_erase_block+0x30>
  {
    status = LX_ERROR;
 8016a8a:	2301      	movs	r3, #1
 8016a8c:	60fb      	str	r3, [r7, #12]
 8016a8e:	e002      	b.n	8016a96 <lx_ospi_driver_erase_block+0x36>
  }
  else
  {
    status = check_status();
 8016a90:	f7ff fee9 	bl	8016866 <check_status>
 8016a94:	60f8      	str	r0, [r7, #12]
  }

  return status;
 8016a96:	68fb      	ldr	r3, [r7, #12]
}
 8016a98:	4618      	mov	r0, r3
 8016a9a:	3710      	adds	r7, #16
 8016a9c:	46bd      	mov	sp, r7
 8016a9e:	bd80      	pop	{r7, pc}

08016aa0 <lx_ospi_driver_block_erased_verify>:

static UINT lx_ospi_driver_block_erased_verify(ULONG block)
{
 8016aa0:	b580      	push	{r7, lr}
 8016aa2:	b084      	sub	sp, #16
 8016aa4:	af00      	add	r7, sp, #0
 8016aa6:	6078      	str	r0, [r7, #4]
  UINT status;

  if (check_status() != LX_SUCCESS)
 8016aa8:	f7ff fedd 	bl	8016866 <check_status>
 8016aac:	4603      	mov	r3, r0
 8016aae:	2b00      	cmp	r3, #0
 8016ab0:	d001      	beq.n	8016ab6 <lx_ospi_driver_block_erased_verify+0x16>
  {
    return LX_ERROR;
 8016ab2:	2301      	movs	r3, #1
 8016ab4:	e00c      	b.n	8016ad0 <lx_ospi_driver_block_erased_verify+0x30>
  }

  if (lx_stm32_ospi_is_block_erased(LX_STM32_OSPI_INSTANCE, block) == 0)
 8016ab6:	6879      	ldr	r1, [r7, #4]
 8016ab8:	2001      	movs	r0, #1
 8016aba:	f7ea ff8d 	bl	80019d8 <lx_stm32_ospi_is_block_erased>
 8016abe:	4603      	mov	r3, r0
 8016ac0:	2b00      	cmp	r3, #0
 8016ac2:	d102      	bne.n	8016aca <lx_ospi_driver_block_erased_verify+0x2a>
  {
    status = LX_SUCCESS;
 8016ac4:	2300      	movs	r3, #0
 8016ac6:	60fb      	str	r3, [r7, #12]
 8016ac8:	e001      	b.n	8016ace <lx_ospi_driver_block_erased_verify+0x2e>
  }
  else
  {
    status = LX_ERROR;
 8016aca:	2301      	movs	r3, #1
 8016acc:	60fb      	str	r3, [r7, #12]
  }

  return status;
 8016ace:	68fb      	ldr	r3, [r7, #12]
}
 8016ad0:	4618      	mov	r0, r3
 8016ad2:	3710      	adds	r7, #16
 8016ad4:	46bd      	mov	sp, r7
 8016ad6:	bd80      	pop	{r7, pc}

08016ad8 <_tx_byte_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, ULONG memory_size,  ULONG wait_option)
{
 8016ad8:	b580      	push	{r7, lr}
 8016ada:	b096      	sub	sp, #88	; 0x58
 8016adc:	af00      	add	r7, sp, #0
 8016ade:	60f8      	str	r0, [r7, #12]
 8016ae0:	60b9      	str	r1, [r7, #8]
 8016ae2:	607a      	str	r2, [r7, #4]
 8016ae4:	603b      	str	r3, [r7, #0]
#endif


    /* Round the memory size up to the next size that is evenly divisible by
       an ALIGN_TYPE (this is typically a 32-bit ULONG).  This guarantees proper alignment.  */
    memory_size = (((memory_size + (sizeof(ALIGN_TYPE)))-((ALIGN_TYPE) 1))/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 8016ae6:	687b      	ldr	r3, [r7, #4]
 8016ae8:	3303      	adds	r3, #3
 8016aea:	f023 0303 	bic.w	r3, r3, #3
 8016aee:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8016af0:	f3ef 8310 	mrs	r3, PRIMASK
 8016af4:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 8016af6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 8016af8:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 8016afa:	b672      	cpsid	i
    return(int_posture);
 8016afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable interrupts.  */
    TX_DISABLE
 8016afe:	657b      	str	r3, [r7, #84]	; 0x54

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8016b00:	4b55      	ldr	r3, [pc, #340]	; (8016c58 <_tx_byte_allocate+0x180>)
 8016b02:	681b      	ldr	r3, [r3, #0]
 8016b04:	64bb      	str	r3, [r7, #72]	; 0x48
    lower_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_LOWER_OFFSET));
    upper_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_UPPER_OFFSET));
#endif

    /* Set the search finished flag to false.  */
    finished =  TX_FALSE;
 8016b06:	2300      	movs	r3, #0
 8016b08:	64fb      	str	r3, [r7, #76]	; 0x4c
    /* Loop to handle cases where the owner of the pool changed.  */
    do
    {

        /* Indicate that this thread is the current owner.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8016b0a:	68fb      	ldr	r3, [r7, #12]
 8016b0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016b0e:	621a      	str	r2, [r3, #32]
 8016b10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016b12:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8016b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b16:	f383 8810 	msr	PRIMASK, r3
}
 8016b1a:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* At this point, the executing thread owns the pool and can perform a search
           for free memory.  */
        work_ptr =  _tx_byte_pool_search(pool_ptr, memory_size);
 8016b1c:	6879      	ldr	r1, [r7, #4]
 8016b1e:	68f8      	ldr	r0, [r7, #12]
 8016b20:	f000 f9b2 	bl	8016e88 <_tx_byte_pool_search>
 8016b24:	6478      	str	r0, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8016b26:	f3ef 8310 	mrs	r3, PRIMASK
 8016b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8016b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8016b2e:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8016b30:	b672      	cpsid	i
    return(int_posture);
 8016b32:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Optional processing extension.  */
        TX_BYTE_ALLOCATE_EXTENSION

        /* Lockout interrupts.  */
        TX_DISABLE
 8016b34:	657b      	str	r3, [r7, #84]	; 0x54

        /* Determine if we are finished.  */
        if (work_ptr != TX_NULL)
 8016b36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016b38:	2b00      	cmp	r3, #0
 8016b3a:	d002      	beq.n	8016b42 <_tx_byte_allocate+0x6a>
        {

            /* Yes, we have found a block the search is finished.  */
            finished =  TX_TRUE;
 8016b3c:	2301      	movs	r3, #1
 8016b3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8016b40:	e006      	b.n	8016b50 <_tx_byte_allocate+0x78>
        }
        else
        {

            /* No block was found, does this thread still own the pool?  */
            if (pool_ptr -> tx_byte_pool_owner == thread_ptr)
 8016b42:	68fb      	ldr	r3, [r7, #12]
 8016b44:	6a1b      	ldr	r3, [r3, #32]
 8016b46:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016b48:	429a      	cmp	r2, r3
 8016b4a:	d101      	bne.n	8016b50 <_tx_byte_allocate+0x78>
            {

                /* Yes, then we have looked through the entire pool and haven't found the memory.  */
                finished =  TX_TRUE;
 8016b4c:	2301      	movs	r3, #1
 8016b4e:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }

    } while (finished == TX_FALSE);
 8016b50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016b52:	2b00      	cmp	r3, #0
 8016b54:	d0d9      	beq.n	8016b0a <_tx_byte_allocate+0x32>

    /* Copy the pointer into the return destination.  */
    *memory_ptr =  (VOID *) work_ptr;
 8016b56:	68bb      	ldr	r3, [r7, #8]
 8016b58:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016b5a:	601a      	str	r2, [r3, #0]

    /* Determine if memory was found.  */
    if (work_ptr != TX_NULL)
 8016b5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016b5e:	2b00      	cmp	r3, #0
 8016b60:	d008      	beq.n	8016b74 <_tx_byte_allocate+0x9c>
 8016b62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016b64:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8016b66:	6a3b      	ldr	r3, [r7, #32]
 8016b68:	f383 8810 	msr	PRIMASK, r3
}
 8016b6c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the status to success.  */
        status =  TX_SUCCESS;
 8016b6e:	2300      	movs	r3, #0
 8016b70:	653b      	str	r3, [r7, #80]	; 0x50
 8016b72:	e06c      	b.n	8016c4e <_tx_byte_allocate+0x176>
    {

        /* No memory of sufficient size was found...  */

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 8016b74:	683b      	ldr	r3, [r7, #0]
 8016b76:	2b00      	cmp	r3, #0
 8016b78:	d061      	beq.n	8016c3e <_tx_byte_allocate+0x166>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 8016b7a:	4b38      	ldr	r3, [pc, #224]	; (8016c5c <_tx_byte_allocate+0x184>)
 8016b7c:	681b      	ldr	r3, [r3, #0]
 8016b7e:	2b00      	cmp	r3, #0
 8016b80:	d007      	beq.n	8016b92 <_tx_byte_allocate+0xba>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NO_MEMORY;
 8016b82:	2310      	movs	r3, #16
 8016b84:	653b      	str	r3, [r7, #80]	; 0x50
 8016b86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016b88:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8016b8a:	69fb      	ldr	r3, [r7, #28]
 8016b8c:	f383 8810 	msr	PRIMASK, r3
}
 8016b90:	e05d      	b.n	8016c4e <_tx_byte_allocate+0x176>
                /* Increment the number of suspensions on this pool.  */
                pool_ptr -> tx_byte_pool_performance_suspension_count++;
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_byte_pool_cleanup);
 8016b92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016b94:	4a32      	ldr	r2, [pc, #200]	; (8016c60 <_tx_byte_allocate+0x188>)
 8016b96:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) pool_ptr;
 8016b98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016b9a:	68fa      	ldr	r2, [r7, #12]
 8016b9c:	66da      	str	r2, [r3, #108]	; 0x6c

                /* Save the return memory pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) memory_ptr;
 8016b9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016ba0:	68ba      	ldr	r2, [r7, #8]
 8016ba2:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Save the byte size requested.  */
                thread_ptr -> tx_thread_suspend_info =  memory_size;
 8016ba4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016ba6:	687a      	ldr	r2, [r7, #4]
 8016ba8:	679a      	str	r2, [r3, #120]	; 0x78

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 8016baa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016bac:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8016bb0:	1c5a      	adds	r2, r3, #1
 8016bb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016bb4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

                /* Pickup the number of suspended threads.  */
                suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 8016bb8:	68fb      	ldr	r3, [r7, #12]
 8016bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016bbc:	643b      	str	r3, [r7, #64]	; 0x40

                /* Increment the suspension count.  */
                (pool_ptr -> tx_byte_pool_suspended_count)++;
 8016bbe:	68fb      	ldr	r3, [r7, #12]
 8016bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016bc2:	1c5a      	adds	r2, r3, #1
 8016bc4:	68fb      	ldr	r3, [r7, #12]
 8016bc6:	629a      	str	r2, [r3, #40]	; 0x28

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 8016bc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016bca:	2b00      	cmp	r3, #0
 8016bcc:	d109      	bne.n	8016be2 <_tx_byte_allocate+0x10a>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    pool_ptr -> tx_byte_pool_suspension_list =      thread_ptr;
 8016bce:	68fb      	ldr	r3, [r7, #12]
 8016bd0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016bd2:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 8016bd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016bd6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016bd8:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8016bda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016bdc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016bde:	675a      	str	r2, [r3, #116]	; 0x74
 8016be0:	e011      	b.n	8016c06 <_tx_byte_allocate+0x12e>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   pool_ptr -> tx_byte_pool_suspension_list;
 8016be2:	68fb      	ldr	r3, [r7, #12]
 8016be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016be6:	63fb      	str	r3, [r7, #60]	; 0x3c
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 8016be8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016bea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016bec:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8016bee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016bf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016bf2:	63bb      	str	r3, [r7, #56]	; 0x38
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8016bf4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016bf6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016bf8:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8016bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016bfc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016bfe:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8016c00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016c02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016c04:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =       TX_BYTE_MEMORY;
 8016c06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016c08:	2209      	movs	r2, #9
 8016c0a:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8016c0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016c0e:	2201      	movs	r2, #1
 8016c10:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8016c12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016c14:	683a      	ldr	r2, [r7, #0]
 8016c16:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 8016c18:	4b10      	ldr	r3, [pc, #64]	; (8016c5c <_tx_byte_allocate+0x184>)
 8016c1a:	681b      	ldr	r3, [r3, #0]
 8016c1c:	3301      	adds	r3, #1
 8016c1e:	4a0f      	ldr	r2, [pc, #60]	; (8016c5c <_tx_byte_allocate+0x184>)
 8016c20:	6013      	str	r3, [r2, #0]
 8016c22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016c24:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8016c26:	69bb      	ldr	r3, [r7, #24]
 8016c28:	f383 8810 	msr	PRIMASK, r3
}
 8016c2c:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8016c2e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8016c30:	f001 ff1a 	bl	8018a68 <_tx_thread_system_suspend>
                    *((ULONG *) (log_entry_ptr + TX_EL_EVENT_INFO_4_OFFSET)) =  (ULONG) *memory_ptr;
                }
#endif

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 8016c34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016c36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8016c3a:	653b      	str	r3, [r7, #80]	; 0x50
 8016c3c:	e007      	b.n	8016c4e <_tx_byte_allocate+0x176>
 8016c3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016c40:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8016c42:	697b      	ldr	r3, [r7, #20]
 8016c44:	f383 8810 	msr	PRIMASK, r3
}
 8016c48:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NO_MEMORY;
 8016c4a:	2310      	movs	r3, #16
 8016c4c:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return completion status.  */
    return(status);
 8016c4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 8016c50:	4618      	mov	r0, r3
 8016c52:	3758      	adds	r7, #88	; 0x58
 8016c54:	46bd      	mov	sp, r7
 8016c56:	bd80      	pop	{r7, pc}
 8016c58:	2001524c 	.word	0x2001524c
 8016c5c:	200152e4 	.word	0x200152e4
 8016c60:	08016c65 	.word	0x08016c65

08016c64 <_tx_byte_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_byte_pool_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 8016c64:	b580      	push	{r7, lr}
 8016c66:	b08e      	sub	sp, #56	; 0x38
 8016c68:	af00      	add	r7, sp, #0
 8016c6a:	6078      	str	r0, [r7, #4]
 8016c6c:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8016c6e:	f3ef 8310 	mrs	r3, PRIMASK
 8016c72:	623b      	str	r3, [r7, #32]
    return(posture);
 8016c74:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8016c76:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8016c78:	b672      	cpsid	i
    return(int_posture);
 8016c7a:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the byte pool.  */
    TX_DISABLE
 8016c7c:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_byte_pool_cleanup))
 8016c7e:	687b      	ldr	r3, [r7, #4]
 8016c80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8016c82:	4a33      	ldr	r2, [pc, #204]	; (8016d50 <_tx_byte_pool_cleanup+0xec>)
 8016c84:	4293      	cmp	r3, r2
 8016c86:	d158      	bne.n	8016d3a <_tx_byte_pool_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8016c88:	687b      	ldr	r3, [r7, #4]
 8016c8a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8016c8e:	683a      	ldr	r2, [r7, #0]
 8016c90:	429a      	cmp	r2, r3
 8016c92:	d152      	bne.n	8016d3a <_tx_byte_pool_cleanup+0xd6>
        {

            /* Setup pointer to byte pool control block.  */
            pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8016c94:	687b      	ldr	r3, [r7, #4]
 8016c96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016c98:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL byte pool pointer.  */
            if (pool_ptr != TX_NULL)
 8016c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c9c:	2b00      	cmp	r3, #0
 8016c9e:	d04c      	beq.n	8016d3a <_tx_byte_pool_cleanup+0xd6>
            {

                /* Check for valid pool ID.  */
                if (pool_ptr -> tx_byte_pool_id == TX_BYTE_POOL_ID)
 8016ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ca2:	681b      	ldr	r3, [r3, #0]
 8016ca4:	4a2b      	ldr	r2, [pc, #172]	; (8016d54 <_tx_byte_pool_cleanup+0xf0>)
 8016ca6:	4293      	cmp	r3, r2
 8016ca8:	d147      	bne.n	8016d3a <_tx_byte_pool_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 8016caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016cae:	2b00      	cmp	r3, #0
 8016cb0:	d043      	beq.n	8016d3a <_tx_byte_pool_cleanup+0xd6>
                        /* Setup pointer to byte pool control block.  */
                        pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
#endif

                        /* Thread suspended for memory... Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8016cb2:	687b      	ldr	r3, [r7, #4]
 8016cb4:	2200      	movs	r2, #0
 8016cb6:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        pool_ptr -> tx_byte_pool_suspended_count--;
 8016cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016cbc:	1e5a      	subs	r2, r3, #1
 8016cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016cc0:	629a      	str	r2, [r3, #40]	; 0x28

                        /* Pickup the suspended count.  */
                        suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 8016cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016cc6:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8016cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016cca:	2b00      	cmp	r3, #0
 8016ccc:	d103      	bne.n	8016cd6 <_tx_byte_pool_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
 8016cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016cd0:	2200      	movs	r2, #0
 8016cd2:	625a      	str	r2, [r3, #36]	; 0x24
 8016cd4:	e013      	b.n	8016cfe <_tx_byte_pool_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 8016cd6:	687b      	ldr	r3, [r7, #4]
 8016cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016cda:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8016cdc:	687b      	ldr	r3, [r7, #4]
 8016cde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016ce0:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8016ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ce4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016ce6:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8016ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016cea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016cec:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (pool_ptr -> tx_byte_pool_suspension_list == thread_ptr)
 8016cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016cf2:	687a      	ldr	r2, [r7, #4]
 8016cf4:	429a      	cmp	r2, r3
 8016cf6:	d102      	bne.n	8016cfe <_tx_byte_pool_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                pool_ptr -> tx_byte_pool_suspension_list =      next_thread;
 8016cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016cfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016cfc:	625a      	str	r2, [r3, #36]	; 0x24
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_BYTE_MEMORY)
 8016cfe:	687b      	ldr	r3, [r7, #4]
 8016d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016d02:	2b09      	cmp	r3, #9
 8016d04:	d119      	bne.n	8016d3a <_tx_byte_pool_cleanup+0xd6>
                            /* Increment the number of timeouts on this byte pool.  */
                            pool_ptr -> tx_byte_pool_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_MEMORY;
 8016d06:	687b      	ldr	r3, [r7, #4]
 8016d08:	2210      	movs	r2, #16
 8016d0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8016d0e:	4b12      	ldr	r3, [pc, #72]	; (8016d58 <_tx_byte_pool_cleanup+0xf4>)
 8016d10:	681b      	ldr	r3, [r3, #0]
 8016d12:	3301      	adds	r3, #1
 8016d14:	4a10      	ldr	r2, [pc, #64]	; (8016d58 <_tx_byte_pool_cleanup+0xf4>)
 8016d16:	6013      	str	r3, [r2, #0]
 8016d18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016d1a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8016d1c:	693b      	ldr	r3, [r7, #16]
 8016d1e:	f383 8810 	msr	PRIMASK, r3
}
 8016d22:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 8016d24:	6878      	ldr	r0, [r7, #4]
 8016d26:	f001 fd9f 	bl	8018868 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8016d2a:	f3ef 8310 	mrs	r3, PRIMASK
 8016d2e:	61bb      	str	r3, [r7, #24]
    return(posture);
 8016d30:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8016d32:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8016d34:	b672      	cpsid	i
    return(int_posture);
 8016d36:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 8016d38:	637b      	str	r3, [r7, #52]	; 0x34
 8016d3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016d3c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8016d3e:	68fb      	ldr	r3, [r7, #12]
 8016d40:	f383 8810 	msr	PRIMASK, r3
}
 8016d44:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8016d46:	bf00      	nop
 8016d48:	3738      	adds	r7, #56	; 0x38
 8016d4a:	46bd      	mov	sp, r7
 8016d4c:	bd80      	pop	{r7, pc}
 8016d4e:	bf00      	nop
 8016d50:	08016c65 	.word	0x08016c65
 8016d54:	42595445 	.word	0x42595445
 8016d58:	200152e4 	.word	0x200152e4

08016d5c <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 8016d5c:	b580      	push	{r7, lr}
 8016d5e:	b08e      	sub	sp, #56	; 0x38
 8016d60:	af00      	add	r7, sp, #0
 8016d62:	60f8      	str	r0, [r7, #12]
 8016d64:	60b9      	str	r1, [r7, #8]
 8016d66:	607a      	str	r2, [r7, #4]
 8016d68:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 8016d6a:	2234      	movs	r2, #52	; 0x34
 8016d6c:	2100      	movs	r1, #0
 8016d6e:	68f8      	ldr	r0, [r7, #12]
 8016d70:	f002 ff42 	bl	8019bf8 <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 8016d74:	683b      	ldr	r3, [r7, #0]
 8016d76:	f023 0303 	bic.w	r3, r3, #3
 8016d7a:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 8016d7c:	68fb      	ldr	r3, [r7, #12]
 8016d7e:	68ba      	ldr	r2, [r7, #8]
 8016d80:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8016d82:	68fb      	ldr	r3, [r7, #12]
 8016d84:	687a      	ldr	r2, [r7, #4]
 8016d86:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 8016d88:	68fb      	ldr	r3, [r7, #12]
 8016d8a:	683a      	ldr	r2, [r7, #0]
 8016d8c:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8016d8e:	68fb      	ldr	r3, [r7, #12]
 8016d90:	687a      	ldr	r2, [r7, #4]
 8016d92:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8016d94:	68fb      	ldr	r3, [r7, #12]
 8016d96:	687a      	ldr	r2, [r7, #4]
 8016d98:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 8016d9a:	683b      	ldr	r3, [r7, #0]
 8016d9c:	f1a3 0208 	sub.w	r2, r3, #8
 8016da0:	68fb      	ldr	r3, [r7, #12]
 8016da2:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 8016da4:	68fb      	ldr	r3, [r7, #12]
 8016da6:	2202      	movs	r2, #2
 8016da8:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8016daa:	687b      	ldr	r3, [r7, #4]
 8016dac:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 8016dae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016db0:	683b      	ldr	r3, [r7, #0]
 8016db2:	4413      	add	r3, r2
 8016db4:	637b      	str	r3, [r7, #52]	; 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 8016db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016db8:	3b04      	subs	r3, #4
 8016dba:	637b      	str	r3, [r7, #52]	; 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8016dbc:	68fb      	ldr	r3, [r7, #12]
 8016dbe:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8016dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  temp_ptr;
 8016dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016dc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016dc8:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 8016dca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016dcc:	3b04      	subs	r3, #4
 8016dce:	637b      	str	r3, [r7, #52]	; 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8016dd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8016dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016dd6:	687a      	ldr	r2, [r7, #4]
 8016dd8:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8016dda:	687b      	ldr	r3, [r7, #4]
 8016ddc:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 8016dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016de0:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  block_ptr;
 8016de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016de4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016de6:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8016de8:	687b      	ldr	r3, [r7, #4]
 8016dea:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 8016dec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016dee:	3304      	adds	r3, #4
 8016df0:	637b      	str	r3, [r7, #52]	; 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 8016df2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016df4:	62bb      	str	r3, [r7, #40]	; 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 8016df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016df8:	4a1f      	ldr	r2, [pc, #124]	; (8016e78 <_tx_byte_pool_create+0x11c>)
 8016dfa:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 8016dfc:	68fb      	ldr	r3, [r7, #12]
 8016dfe:	2200      	movs	r2, #0
 8016e00:	621a      	str	r2, [r3, #32]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8016e02:	f3ef 8310 	mrs	r3, PRIMASK
 8016e06:	61bb      	str	r3, [r7, #24]
    return(posture);
 8016e08:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8016e0a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8016e0c:	b672      	cpsid	i
    return(int_posture);
 8016e0e:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 8016e10:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 8016e12:	68fb      	ldr	r3, [r7, #12]
 8016e14:	4a19      	ldr	r2, [pc, #100]	; (8016e7c <_tx_byte_pool_create+0x120>)
 8016e16:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 8016e18:	4b19      	ldr	r3, [pc, #100]	; (8016e80 <_tx_byte_pool_create+0x124>)
 8016e1a:	681b      	ldr	r3, [r3, #0]
 8016e1c:	2b00      	cmp	r3, #0
 8016e1e:	d109      	bne.n	8016e34 <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 8016e20:	4a18      	ldr	r2, [pc, #96]	; (8016e84 <_tx_byte_pool_create+0x128>)
 8016e22:	68fb      	ldr	r3, [r7, #12]
 8016e24:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 8016e26:	68fb      	ldr	r3, [r7, #12]
 8016e28:	68fa      	ldr	r2, [r7, #12]
 8016e2a:	62da      	str	r2, [r3, #44]	; 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 8016e2c:	68fb      	ldr	r3, [r7, #12]
 8016e2e:	68fa      	ldr	r2, [r7, #12]
 8016e30:	631a      	str	r2, [r3, #48]	; 0x30
 8016e32:	e011      	b.n	8016e58 <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 8016e34:	4b13      	ldr	r3, [pc, #76]	; (8016e84 <_tx_byte_pool_create+0x128>)
 8016e36:	681b      	ldr	r3, [r3, #0]
 8016e38:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 8016e3a:	6a3b      	ldr	r3, [r7, #32]
 8016e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016e3e:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 8016e40:	6a3b      	ldr	r3, [r7, #32]
 8016e42:	68fa      	ldr	r2, [r7, #12]
 8016e44:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 8016e46:	69fb      	ldr	r3, [r7, #28]
 8016e48:	68fa      	ldr	r2, [r7, #12]
 8016e4a:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 8016e4c:	68fb      	ldr	r3, [r7, #12]
 8016e4e:	69fa      	ldr	r2, [r7, #28]
 8016e50:	631a      	str	r2, [r3, #48]	; 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 8016e52:	68fb      	ldr	r3, [r7, #12]
 8016e54:	6a3a      	ldr	r2, [r7, #32]
 8016e56:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 8016e58:	4b09      	ldr	r3, [pc, #36]	; (8016e80 <_tx_byte_pool_create+0x124>)
 8016e5a:	681b      	ldr	r3, [r3, #0]
 8016e5c:	3301      	adds	r3, #1
 8016e5e:	4a08      	ldr	r2, [pc, #32]	; (8016e80 <_tx_byte_pool_create+0x124>)
 8016e60:	6013      	str	r3, [r2, #0]
 8016e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e64:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8016e66:	693b      	ldr	r3, [r7, #16]
 8016e68:	f383 8810 	msr	PRIMASK, r3
}
 8016e6c:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8016e6e:	2300      	movs	r3, #0
}
 8016e70:	4618      	mov	r0, r3
 8016e72:	3738      	adds	r7, #56	; 0x38
 8016e74:	46bd      	mov	sp, r7
 8016e76:	bd80      	pop	{r7, pc}
 8016e78:	ffffeeee 	.word	0xffffeeee
 8016e7c:	42595445 	.word	0x42595445
 8016e80:	20015240 	.word	0x20015240
 8016e84:	2001523c 	.word	0x2001523c

08016e88 <_tx_byte_pool_search>:
/*                                            calculation,                */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UCHAR  *_tx_byte_pool_search(TX_BYTE_POOL *pool_ptr, ULONG memory_size)
{
 8016e88:	b480      	push	{r7}
 8016e8a:	b097      	sub	sp, #92	; 0x5c
 8016e8c:	af00      	add	r7, sp, #0
 8016e8e:	6078      	str	r0, [r7, #4]
 8016e90:	6039      	str	r1, [r7, #0]
UCHAR           *next_ptr;
UCHAR           **this_block_link_ptr;
UCHAR           **next_block_link_ptr;
ULONG           available_bytes;
UINT            examine_blocks;
UINT            first_free_block_found =  TX_FALSE;
 8016e92:	2300      	movs	r3, #0
 8016e94:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8016e96:	f3ef 8310 	mrs	r3, PRIMASK
 8016e9a:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8016e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 8016e9e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8016ea0:	b672      	cpsid	i
    return(int_posture);
 8016ea2:	6a3b      	ldr	r3, [r7, #32]
UCHAR           *work_ptr;
ULONG           total_theoretical_available;


    /* Disable interrupts.  */
    TX_DISABLE
 8016ea4:	657b      	str	r3, [r7, #84]	; 0x54

    /* First, determine if there are enough bytes in the pool.  */
    /* Theoretical bytes available = free bytes + ((fragments-2) * overhead of each block) */
    total_theoretical_available = pool_ptr -> tx_byte_pool_available + ((pool_ptr -> tx_byte_pool_fragments - 2) * ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE))));
 8016ea6:	687b      	ldr	r3, [r7, #4]
 8016ea8:	689a      	ldr	r2, [r3, #8]
 8016eaa:	687b      	ldr	r3, [r7, #4]
 8016eac:	68db      	ldr	r3, [r3, #12]
 8016eae:	3b02      	subs	r3, #2
 8016eb0:	00db      	lsls	r3, r3, #3
 8016eb2:	4413      	add	r3, r2
 8016eb4:	643b      	str	r3, [r7, #64]	; 0x40
    if (memory_size >= total_theoretical_available)
 8016eb6:	683a      	ldr	r2, [r7, #0]
 8016eb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016eba:	429a      	cmp	r2, r3
 8016ebc:	d308      	bcc.n	8016ed0 <_tx_byte_pool_search+0x48>
 8016ebe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016ec0:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8016ec2:	69fb      	ldr	r3, [r7, #28]
 8016ec4:	f383 8810 	msr	PRIMASK, r3
}
 8016ec8:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Not enough memory, return a NULL pointer.  */
        current_ptr =  TX_NULL;
 8016eca:	2300      	movs	r3, #0
 8016ecc:	653b      	str	r3, [r7, #80]	; 0x50
 8016ece:	e0dd      	b.n	801708c <_tx_byte_pool_search+0x204>
    }
    else
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8016ed0:	4b72      	ldr	r3, [pc, #456]	; (801709c <_tx_byte_pool_search+0x214>)
 8016ed2:	681b      	ldr	r3, [r3, #0]
 8016ed4:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Setup ownership of the byte pool.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8016ed6:	687b      	ldr	r3, [r7, #4]
 8016ed8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016eda:	621a      	str	r2, [r3, #32]

        /* Walk through the memory pool in search for a large enough block.  */
        current_ptr =      pool_ptr -> tx_byte_pool_search;
 8016edc:	687b      	ldr	r3, [r7, #4]
 8016ede:	695b      	ldr	r3, [r3, #20]
 8016ee0:	653b      	str	r3, [r7, #80]	; 0x50
        examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 8016ee2:	687b      	ldr	r3, [r7, #4]
 8016ee4:	68db      	ldr	r3, [r3, #12]
 8016ee6:	3301      	adds	r3, #1
 8016ee8:	64bb      	str	r3, [r7, #72]	; 0x48
        available_bytes =  ((ULONG) 0);
 8016eea:	2300      	movs	r3, #0
 8016eec:	64fb      	str	r3, [r7, #76]	; 0x4c
            /* Increment the number of fragments searched on this pool.  */
            pool_ptr -> tx_byte_pool_performance_search_count++;
#endif

            /* Check to see if this block is free.  */
            work_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 8016eee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016ef0:	3304      	adds	r3, #4
 8016ef2:	63bb      	str	r3, [r7, #56]	; 0x38
            free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8016ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ef6:	637b      	str	r3, [r7, #52]	; 0x34
            if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 8016ef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016efa:	681b      	ldr	r3, [r3, #0]
 8016efc:	4a68      	ldr	r2, [pc, #416]	; (80170a0 <_tx_byte_pool_search+0x218>)
 8016efe:	4293      	cmp	r3, r2
 8016f00:	d143      	bne.n	8016f8a <_tx_byte_pool_search+0x102>
            {

                /* Determine if this is the first free block.  */
                if (first_free_block_found == TX_FALSE)
 8016f02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016f04:	2b00      	cmp	r3, #0
 8016f06:	d104      	bne.n	8016f12 <_tx_byte_pool_search+0x8a>
                {
                    /* This is the first free block.  */
                    pool_ptr->tx_byte_pool_search =  current_ptr;
 8016f08:	687b      	ldr	r3, [r7, #4]
 8016f0a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8016f0c:	615a      	str	r2, [r3, #20]

                    /* Set the flag to indicate we have found the first free
                       block.  */
                    first_free_block_found =  TX_TRUE;
 8016f0e:	2301      	movs	r3, #1
 8016f10:	647b      	str	r3, [r7, #68]	; 0x44
                }

                /* Block is free, see if it is large enough.  */

                /* Pickup the next block's pointer.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8016f12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016f14:	633b      	str	r3, [r7, #48]	; 0x30
                next_ptr =             *this_block_link_ptr;
 8016f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f18:	681b      	ldr	r3, [r3, #0]
 8016f1a:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Calculate the number of bytes available in this block.  */
                available_bytes =   TX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 8016f1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016f1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016f20:	1ad3      	subs	r3, r2, r3
 8016f22:	64fb      	str	r3, [r7, #76]	; 0x4c
                available_bytes =   available_bytes - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 8016f24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016f26:	3b08      	subs	r3, #8
 8016f28:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* If this is large enough, we are done because our first-fit algorithm
                   has been satisfied!  */
                if (available_bytes >= memory_size)
 8016f2a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8016f2c:	683b      	ldr	r3, [r7, #0]
 8016f2e:	429a      	cmp	r2, r3
 8016f30:	d257      	bcs.n	8016fe2 <_tx_byte_pool_search+0x15a>
                }
                else
                {

                    /* Clear the available bytes variable.  */
                    available_bytes =  ((ULONG) 0);
 8016f32:	2300      	movs	r3, #0
 8016f34:	64fb      	str	r3, [r7, #76]	; 0x4c

                    /* Not enough memory, check to see if the neighbor is
                       free and can be merged.  */
                    work_ptr =  TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 8016f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f38:	3304      	adds	r3, #4
 8016f3a:	63bb      	str	r3, [r7, #56]	; 0x38
                    free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8016f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f3e:	637b      	str	r3, [r7, #52]	; 0x34
                    if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 8016f40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016f42:	681b      	ldr	r3, [r3, #0]
 8016f44:	4a56      	ldr	r2, [pc, #344]	; (80170a0 <_tx_byte_pool_search+0x218>)
 8016f46:	4293      	cmp	r3, r2
 8016f48:	d113      	bne.n	8016f72 <_tx_byte_pool_search+0xea>
                    {

                        /* Yes, neighbor block can be merged!  This is quickly accomplished
                           by updating the current block with the next blocks pointer.  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 8016f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f4c:	62bb      	str	r3, [r7, #40]	; 0x28
                        *this_block_link_ptr =  *next_block_link_ptr;
 8016f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f50:	681a      	ldr	r2, [r3, #0]
 8016f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f54:	601a      	str	r2, [r3, #0]

                        /* Reduce the fragment total.  We don't need to increase the bytes
                           available because all free headers are also included in the available
                           count.  */
                        pool_ptr -> tx_byte_pool_fragments--;
 8016f56:	687b      	ldr	r3, [r7, #4]
 8016f58:	68db      	ldr	r3, [r3, #12]
 8016f5a:	1e5a      	subs	r2, r3, #1
 8016f5c:	687b      	ldr	r3, [r7, #4]
 8016f5e:	60da      	str	r2, [r3, #12]
                        /* Increment the number of blocks merged on this pool.  */
                        pool_ptr -> tx_byte_pool_performance_merge_count++;
#endif

                        /* See if the search pointer is affected.  */
                        if (pool_ptr -> tx_byte_pool_search ==  next_ptr)
 8016f60:	687b      	ldr	r3, [r7, #4]
 8016f62:	695b      	ldr	r3, [r3, #20]
 8016f64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016f66:	429a      	cmp	r2, r3
 8016f68:	d114      	bne.n	8016f94 <_tx_byte_pool_search+0x10c>
                        {
                            /* Yes, update the search pointer.   */
                            pool_ptr -> tx_byte_pool_search =  current_ptr;
 8016f6a:	687b      	ldr	r3, [r7, #4]
 8016f6c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8016f6e:	615a      	str	r2, [r3, #20]
 8016f70:	e010      	b.n	8016f94 <_tx_byte_pool_search+0x10c>
                        }
                    }
                    else
                    {
                        /* Neighbor is not free so we can skip over it!  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 8016f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f74:	62bb      	str	r3, [r7, #40]	; 0x28
                        current_ptr =  *next_block_link_ptr;
 8016f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f78:	681b      	ldr	r3, [r3, #0]
 8016f7a:	653b      	str	r3, [r7, #80]	; 0x50

                        /* Decrement the examined block count to account for this one.  */
                        if (examine_blocks != ((UINT) 0))
 8016f7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016f7e:	2b00      	cmp	r3, #0
 8016f80:	d008      	beq.n	8016f94 <_tx_byte_pool_search+0x10c>
                        {
                            examine_blocks--;
 8016f82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016f84:	3b01      	subs	r3, #1
 8016f86:	64bb      	str	r3, [r7, #72]	; 0x48
 8016f88:	e004      	b.n	8016f94 <_tx_byte_pool_search+0x10c>
            }
            else
            {

                /* Block is not free, move to next block.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8016f8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016f8c:	633b      	str	r3, [r7, #48]	; 0x30
                current_ptr =  *this_block_link_ptr;
 8016f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f90:	681b      	ldr	r3, [r3, #0]
 8016f92:	653b      	str	r3, [r7, #80]	; 0x50
            }

            /* Another block has been searched... decrement counter.  */
            if (examine_blocks != ((UINT) 0))
 8016f94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016f96:	2b00      	cmp	r3, #0
 8016f98:	d002      	beq.n	8016fa0 <_tx_byte_pool_search+0x118>
            {

                examine_blocks--;
 8016f9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016f9c:	3b01      	subs	r3, #1
 8016f9e:	64bb      	str	r3, [r7, #72]	; 0x48
 8016fa0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016fa2:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8016fa4:	693b      	ldr	r3, [r7, #16]
 8016fa6:	f383 8810 	msr	PRIMASK, r3
}
 8016faa:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8016fac:	f3ef 8310 	mrs	r3, PRIMASK
 8016fb0:	61bb      	str	r3, [r7, #24]
    return(posture);
 8016fb2:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8016fb4:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8016fb6:	b672      	cpsid	i
    return(int_posture);
 8016fb8:	697b      	ldr	r3, [r7, #20]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts.  */
            TX_DISABLE
 8016fba:	657b      	str	r3, [r7, #84]	; 0x54

            /* Determine if anything has changed in terms of pool ownership.  */
            if (pool_ptr -> tx_byte_pool_owner != thread_ptr)
 8016fbc:	687b      	ldr	r3, [r7, #4]
 8016fbe:	6a1b      	ldr	r3, [r3, #32]
 8016fc0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016fc2:	429a      	cmp	r2, r3
 8016fc4:	d009      	beq.n	8016fda <_tx_byte_pool_search+0x152>
            {

                /* Pool changed ownership in the brief period interrupts were
                   enabled.  Reset the search.  */
                current_ptr =      pool_ptr -> tx_byte_pool_search;
 8016fc6:	687b      	ldr	r3, [r7, #4]
 8016fc8:	695b      	ldr	r3, [r3, #20]
 8016fca:	653b      	str	r3, [r7, #80]	; 0x50
                examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 8016fcc:	687b      	ldr	r3, [r7, #4]
 8016fce:	68db      	ldr	r3, [r3, #12]
 8016fd0:	3301      	adds	r3, #1
 8016fd2:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Setup our ownership again.  */
                pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8016fd4:	687b      	ldr	r3, [r7, #4]
 8016fd6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016fd8:	621a      	str	r2, [r3, #32]
            }
        } while(examine_blocks != ((UINT) 0));
 8016fda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016fdc:	2b00      	cmp	r3, #0
 8016fde:	d186      	bne.n	8016eee <_tx_byte_pool_search+0x66>
 8016fe0:	e000      	b.n	8016fe4 <_tx_byte_pool_search+0x15c>
                    break;
 8016fe2:	bf00      	nop

        /* Determine if a block was found.  If so, determine if it needs to be
           split.  */
        if (available_bytes != ((ULONG) 0))
 8016fe4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016fe6:	2b00      	cmp	r3, #0
 8016fe8:	d048      	beq.n	801707c <_tx_byte_pool_search+0x1f4>
        {

            /* Determine if we need to split this block.  */
            if ((available_bytes - memory_size) >= ((ULONG) TX_BYTE_BLOCK_MIN))
 8016fea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8016fec:	683b      	ldr	r3, [r7, #0]
 8016fee:	1ad3      	subs	r3, r2, r3
 8016ff0:	2b13      	cmp	r3, #19
 8016ff2:	d91e      	bls.n	8017032 <_tx_byte_pool_search+0x1aa>
            {

                /* Split the block.  */
                next_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (memory_size + ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 8016ff4:	683b      	ldr	r3, [r7, #0]
 8016ff6:	3308      	adds	r3, #8
 8016ff8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8016ffa:	4413      	add	r3, r2
 8016ffc:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Setup the new free block.  */
                next_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 8016ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017000:	62bb      	str	r3, [r7, #40]	; 0x28
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8017002:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017004:	633b      	str	r3, [r7, #48]	; 0x30
                *next_block_link_ptr =  *this_block_link_ptr;
 8017006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017008:	681a      	ldr	r2, [r3, #0]
 801700a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801700c:	601a      	str	r2, [r3, #0]
                work_ptr =              TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 801700e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017010:	3304      	adds	r3, #4
 8017012:	63bb      	str	r3, [r7, #56]	; 0x38
                free_ptr =              TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8017014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017016:	637b      	str	r3, [r7, #52]	; 0x34
                *free_ptr =             TX_BYTE_BLOCK_FREE;
 8017018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801701a:	4a21      	ldr	r2, [pc, #132]	; (80170a0 <_tx_byte_pool_search+0x218>)
 801701c:	601a      	str	r2, [r3, #0]

                /* Increase the total fragment counter.  */
                pool_ptr -> tx_byte_pool_fragments++;
 801701e:	687b      	ldr	r3, [r7, #4]
 8017020:	68db      	ldr	r3, [r3, #12]
 8017022:	1c5a      	adds	r2, r3, #1
 8017024:	687b      	ldr	r3, [r7, #4]
 8017026:	60da      	str	r2, [r3, #12]

                /* Update the current pointer to point at the newly created block.  */
                *this_block_link_ptr =  next_ptr;
 8017028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801702a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801702c:	601a      	str	r2, [r3, #0]

                /* Set available equal to memory size for subsequent calculation.  */
                available_bytes =  memory_size;
 801702e:	683b      	ldr	r3, [r7, #0]
 8017030:	64fb      	str	r3, [r7, #76]	; 0x4c
                pool_ptr -> tx_byte_pool_performance_split_count++;
#endif
            }

            /* In any case, mark the current block as allocated.  */
            work_ptr =              TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 8017032:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017034:	3304      	adds	r3, #4
 8017036:	63bb      	str	r3, [r7, #56]	; 0x38
            this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 8017038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801703a:	633b      	str	r3, [r7, #48]	; 0x30
            *this_block_link_ptr =  TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 801703c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801703e:	687a      	ldr	r2, [r7, #4]
 8017040:	601a      	str	r2, [r3, #0]

            /* Reduce the number of available bytes in the pool.  */
            pool_ptr -> tx_byte_pool_available =  (pool_ptr -> tx_byte_pool_available - available_bytes) - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 8017042:	687b      	ldr	r3, [r7, #4]
 8017044:	689a      	ldr	r2, [r3, #8]
 8017046:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017048:	1ad3      	subs	r3, r2, r3
 801704a:	f1a3 0208 	sub.w	r2, r3, #8
 801704e:	687b      	ldr	r3, [r7, #4]
 8017050:	609a      	str	r2, [r3, #8]

            /* Determine if the search pointer needs to be updated. This is only done
               if the search pointer matches the block to be returned.  */
            if (current_ptr == pool_ptr -> tx_byte_pool_search)
 8017052:	687b      	ldr	r3, [r7, #4]
 8017054:	695b      	ldr	r3, [r3, #20]
 8017056:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8017058:	429a      	cmp	r2, r3
 801705a:	d105      	bne.n	8017068 <_tx_byte_pool_search+0x1e0>
            {

                /* Yes, update the search pointer to the next block.  */
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 801705c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801705e:	633b      	str	r3, [r7, #48]	; 0x30
                pool_ptr -> tx_byte_pool_search =  *this_block_link_ptr;
 8017060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017062:	681a      	ldr	r2, [r3, #0]
 8017064:	687b      	ldr	r3, [r7, #4]
 8017066:	615a      	str	r2, [r3, #20]
 8017068:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801706a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801706c:	68fb      	ldr	r3, [r7, #12]
 801706e:	f383 8810 	msr	PRIMASK, r3
}
 8017072:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust the pointer for the application.  */
            current_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 8017074:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017076:	3308      	adds	r3, #8
 8017078:	653b      	str	r3, [r7, #80]	; 0x50
 801707a:	e007      	b.n	801708c <_tx_byte_pool_search+0x204>
 801707c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801707e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8017080:	68bb      	ldr	r3, [r7, #8]
 8017082:	f383 8810 	msr	PRIMASK, r3
}
 8017086:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Set current pointer to NULL to indicate nothing was found.  */
            current_ptr =  TX_NULL;
 8017088:	2300      	movs	r3, #0
 801708a:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return the search pointer.  */
    return(current_ptr);
 801708c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 801708e:	4618      	mov	r0, r3
 8017090:	375c      	adds	r7, #92	; 0x5c
 8017092:	46bd      	mov	sp, r7
 8017094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017098:	4770      	bx	lr
 801709a:	bf00      	nop
 801709c:	2001524c 	.word	0x2001524c
 80170a0:	ffffeeee 	.word	0xffffeeee

080170a4 <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 80170a4:	b580      	push	{r7, lr}
 80170a6:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 80170a8:	f001 fa28 	bl	80184fc <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 80170ac:	f001 ff26 	bl	8018efc <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 80170b0:	4b12      	ldr	r3, [pc, #72]	; (80170fc <_tx_initialize_high_level+0x58>)
 80170b2:	2200      	movs	r2, #0
 80170b4:	601a      	str	r2, [r3, #0]
 80170b6:	4b12      	ldr	r3, [pc, #72]	; (8017100 <_tx_initialize_high_level+0x5c>)
 80170b8:	2200      	movs	r2, #0
 80170ba:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 80170bc:	4b11      	ldr	r3, [pc, #68]	; (8017104 <_tx_initialize_high_level+0x60>)
 80170be:	2200      	movs	r2, #0
 80170c0:	601a      	str	r2, [r3, #0]
 80170c2:	4b11      	ldr	r3, [pc, #68]	; (8017108 <_tx_initialize_high_level+0x64>)
 80170c4:	2200      	movs	r2, #0
 80170c6:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 80170c8:	4b10      	ldr	r3, [pc, #64]	; (801710c <_tx_initialize_high_level+0x68>)
 80170ca:	2200      	movs	r2, #0
 80170cc:	601a      	str	r2, [r3, #0]
 80170ce:	4b10      	ldr	r3, [pc, #64]	; (8017110 <_tx_initialize_high_level+0x6c>)
 80170d0:	2200      	movs	r2, #0
 80170d2:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 80170d4:	4b0f      	ldr	r3, [pc, #60]	; (8017114 <_tx_initialize_high_level+0x70>)
 80170d6:	2200      	movs	r2, #0
 80170d8:	601a      	str	r2, [r3, #0]
 80170da:	4b0f      	ldr	r3, [pc, #60]	; (8017118 <_tx_initialize_high_level+0x74>)
 80170dc:	2200      	movs	r2, #0
 80170de:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 80170e0:	4b0e      	ldr	r3, [pc, #56]	; (801711c <_tx_initialize_high_level+0x78>)
 80170e2:	2200      	movs	r2, #0
 80170e4:	601a      	str	r2, [r3, #0]
 80170e6:	4b0e      	ldr	r3, [pc, #56]	; (8017120 <_tx_initialize_high_level+0x7c>)
 80170e8:	2200      	movs	r2, #0
 80170ea:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 80170ec:	4b0d      	ldr	r3, [pc, #52]	; (8017124 <_tx_initialize_high_level+0x80>)
 80170ee:	2200      	movs	r2, #0
 80170f0:	601a      	str	r2, [r3, #0]
 80170f2:	4b0d      	ldr	r3, [pc, #52]	; (8017128 <_tx_initialize_high_level+0x84>)
 80170f4:	2200      	movs	r2, #0
 80170f6:	601a      	str	r2, [r3, #0]
#endif
}
 80170f8:	bf00      	nop
 80170fa:	bd80      	pop	{r7, pc}
 80170fc:	20015214 	.word	0x20015214
 8017100:	20015218 	.word	0x20015218
 8017104:	2001521c 	.word	0x2001521c
 8017108:	20015220 	.word	0x20015220
 801710c:	20015224 	.word	0x20015224
 8017110:	20015228 	.word	0x20015228
 8017114:	20015234 	.word	0x20015234
 8017118:	20015238 	.word	0x20015238
 801711c:	2001523c 	.word	0x2001523c
 8017120:	20015240 	.word	0x20015240
 8017124:	2001522c 	.word	0x2001522c
 8017128:	20015230 	.word	0x20015230

0801712c <_tx_initialize_kernel_enter>:
/*                                            added EPK initialization,   */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 801712c:	b580      	push	{r7, lr}
 801712e:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 8017130:	4b10      	ldr	r3, [pc, #64]	; (8017174 <_tx_initialize_kernel_enter+0x48>)
 8017132:	681b      	ldr	r3, [r3, #0]
 8017134:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 8017138:	d00c      	beq.n	8017154 <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 801713a:	4b0e      	ldr	r3, [pc, #56]	; (8017174 <_tx_initialize_kernel_enter+0x48>)
 801713c:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 8017140:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 8017142:	f7e9 f899 	bl	8000278 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 8017146:	f7ff ffad 	bl	80170a4 <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 801714a:	4b0b      	ldr	r3, [pc, #44]	; (8017178 <_tx_initialize_kernel_enter+0x4c>)
 801714c:	681b      	ldr	r3, [r3, #0]
 801714e:	3301      	adds	r3, #1
 8017150:	4a09      	ldr	r2, [pc, #36]	; (8017178 <_tx_initialize_kernel_enter+0x4c>)
 8017152:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8017154:	4b07      	ldr	r3, [pc, #28]	; (8017174 <_tx_initialize_kernel_enter+0x48>)
 8017156:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 801715a:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 801715c:	4b07      	ldr	r3, [pc, #28]	; (801717c <_tx_initialize_kernel_enter+0x50>)
 801715e:	681b      	ldr	r3, [r3, #0]
 8017160:	4618      	mov	r0, r3
 8017162:	f7e9 fb37 	bl	80007d4 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 8017166:	4b03      	ldr	r3, [pc, #12]	; (8017174 <_tx_initialize_kernel_enter+0x48>)
 8017168:	2200      	movs	r2, #0
 801716a:	601a      	str	r2, [r3, #0]
    /* Initialize Execution Profile Kit.  */
    _tx_execution_initialize();
#endif

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 801716c:	f7e9 f8c0 	bl	80002f0 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8017170:	bf00      	nop
 8017172:	bd80      	pop	{r7, pc}
 8017174:	200010dc 	.word	0x200010dc
 8017178:	200152e4 	.word	0x200152e4
 801717c:	20015244 	.word	0x20015244

08017180 <_tx_mutex_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 8017180:	b580      	push	{r7, lr}
 8017182:	b08e      	sub	sp, #56	; 0x38
 8017184:	af00      	add	r7, sp, #0
 8017186:	6078      	str	r0, [r7, #4]
 8017188:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801718a:	f3ef 8310 	mrs	r3, PRIMASK
 801718e:	623b      	str	r3, [r7, #32]
    return(posture);
 8017190:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8017192:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8017194:	b672      	cpsid	i
    return(int_posture);
 8017196:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the mutex.  */
    TX_DISABLE
 8017198:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_mutex_cleanup))
 801719a:	687b      	ldr	r3, [r7, #4]
 801719c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801719e:	4a33      	ldr	r2, [pc, #204]	; (801726c <_tx_mutex_cleanup+0xec>)
 80171a0:	4293      	cmp	r3, r2
 80171a2:	d158      	bne.n	8017256 <_tx_mutex_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 80171a4:	687b      	ldr	r3, [r7, #4]
 80171a6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80171aa:	683a      	ldr	r2, [r7, #0]
 80171ac:	429a      	cmp	r2, r3
 80171ae:	d152      	bne.n	8017256 <_tx_mutex_cleanup+0xd6>
        {

            /* Setup pointer to mutex control block.  */
            mutex_ptr =  TX_VOID_TO_MUTEX_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 80171b0:	687b      	ldr	r3, [r7, #4]
 80171b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80171b4:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for NULL mutex pointer.  */
            if (mutex_ptr != TX_NULL)
 80171b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80171b8:	2b00      	cmp	r3, #0
 80171ba:	d04c      	beq.n	8017256 <_tx_mutex_cleanup+0xd6>
            {

                /* Determine if the mutex ID is valid.  */
                if (mutex_ptr -> tx_mutex_id == TX_MUTEX_ID)
 80171bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80171be:	681b      	ldr	r3, [r3, #0]
 80171c0:	4a2b      	ldr	r2, [pc, #172]	; (8017270 <_tx_mutex_cleanup+0xf0>)
 80171c2:	4293      	cmp	r3, r2
 80171c4:	d147      	bne.n	8017256 <_tx_mutex_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 80171c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80171c8:	69db      	ldr	r3, [r3, #28]
 80171ca:	2b00      	cmp	r3, #0
 80171cc:	d043      	beq.n	8017256 <_tx_mutex_cleanup+0xd6>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80171ce:	687b      	ldr	r3, [r7, #4]
 80171d0:	2200      	movs	r2, #0
 80171d2:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        mutex_ptr -> tx_mutex_suspended_count--;
 80171d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80171d6:	69db      	ldr	r3, [r3, #28]
 80171d8:	1e5a      	subs	r2, r3, #1
 80171da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80171dc:	61da      	str	r2, [r3, #28]

                        /* Pickup the suspended count.  */
                        suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 80171de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80171e0:	69db      	ldr	r3, [r3, #28]
 80171e2:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 80171e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171e6:	2b00      	cmp	r3, #0
 80171e8:	d103      	bne.n	80171f2 <_tx_mutex_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 80171ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80171ec:	2200      	movs	r2, #0
 80171ee:	619a      	str	r2, [r3, #24]
 80171f0:	e013      	b.n	801721a <_tx_mutex_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 80171f2:	687b      	ldr	r3, [r7, #4]
 80171f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80171f6:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 80171f8:	687b      	ldr	r3, [r7, #4]
 80171fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80171fc:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 80171fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017200:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017202:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8017204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017206:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017208:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (mutex_ptr -> tx_mutex_suspension_list == thread_ptr)
 801720a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801720c:	699b      	ldr	r3, [r3, #24]
 801720e:	687a      	ldr	r2, [r7, #4]
 8017210:	429a      	cmp	r2, r3
 8017212:	d102      	bne.n	801721a <_tx_mutex_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                mutex_ptr -> tx_mutex_suspension_list =         next_thread;
 8017214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017216:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017218:	619a      	str	r2, [r3, #24]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_MUTEX_SUSP)
 801721a:	687b      	ldr	r3, [r7, #4]
 801721c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801721e:	2b0d      	cmp	r3, #13
 8017220:	d119      	bne.n	8017256 <_tx_mutex_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            mutex_ptr -> tx_mutex_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NOT_AVAILABLE;
 8017222:	687b      	ldr	r3, [r7, #4]
 8017224:	221d      	movs	r2, #29
 8017226:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 801722a:	4b12      	ldr	r3, [pc, #72]	; (8017274 <_tx_mutex_cleanup+0xf4>)
 801722c:	681b      	ldr	r3, [r3, #0]
 801722e:	3301      	adds	r3, #1
 8017230:	4a10      	ldr	r2, [pc, #64]	; (8017274 <_tx_mutex_cleanup+0xf4>)
 8017232:	6013      	str	r3, [r2, #0]
 8017234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017236:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8017238:	693b      	ldr	r3, [r7, #16]
 801723a:	f383 8810 	msr	PRIMASK, r3
}
 801723e:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 8017240:	6878      	ldr	r0, [r7, #4]
 8017242:	f001 fb11 	bl	8018868 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8017246:	f3ef 8310 	mrs	r3, PRIMASK
 801724a:	61bb      	str	r3, [r7, #24]
    return(posture);
 801724c:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 801724e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8017250:	b672      	cpsid	i
    return(int_posture);
 8017252:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 8017254:	637b      	str	r3, [r7, #52]	; 0x34
 8017256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017258:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801725a:	68fb      	ldr	r3, [r7, #12]
 801725c:	f383 8810 	msr	PRIMASK, r3
}
 8017260:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8017262:	bf00      	nop
 8017264:	3738      	adds	r7, #56	; 0x38
 8017266:	46bd      	mov	sp, r7
 8017268:	bd80      	pop	{r7, pc}
 801726a:	bf00      	nop
 801726c:	08017181 	.word	0x08017181
 8017270:	4d555445 	.word	0x4d555445
 8017274:	200152e4 	.word	0x200152e4

08017278 <_tx_mutex_thread_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_thread_release(TX_THREAD  *thread_ptr)
{
 8017278:	b580      	push	{r7, lr}
 801727a:	b08a      	sub	sp, #40	; 0x28
 801727c:	af00      	add	r7, sp, #0
 801727e:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8017280:	f3ef 8310 	mrs	r3, PRIMASK
 8017284:	61fb      	str	r3, [r7, #28]
    return(posture);
 8017286:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8017288:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 801728a:	b672      	cpsid	i
    return(int_posture);
 801728c:	69bb      	ldr	r3, [r7, #24]
UINT        status;
#endif


    /* Disable interrupts.  */
    TX_DISABLE
 801728e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8017290:	4b1a      	ldr	r3, [pc, #104]	; (80172fc <_tx_mutex_thread_release+0x84>)
 8017292:	681b      	ldr	r3, [r3, #0]
 8017294:	3301      	adds	r3, #1
 8017296:	4a19      	ldr	r2, [pc, #100]	; (80172fc <_tx_mutex_thread_release+0x84>)
 8017298:	6013      	str	r3, [r2, #0]
    /* Loop to look at all the mutexes.  */
    do
    {

        /* Pickup the mutex head pointer.  */
        mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 801729a:	687b      	ldr	r3, [r7, #4]
 801729c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80172a0:	623b      	str	r3, [r7, #32]

        /* Determine if there is a mutex.  */
        if (mutex_ptr != TX_NULL)
 80172a2:	6a3b      	ldr	r3, [r7, #32]
 80172a4:	2b00      	cmp	r3, #0
 80172a6:	d017      	beq.n	80172d8 <_tx_mutex_thread_release+0x60>
        {

            /* Yes, set the ownership count to 1.  */
            mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 80172a8:	6a3b      	ldr	r3, [r7, #32]
 80172aa:	2201      	movs	r2, #1
 80172ac:	609a      	str	r2, [r3, #8]
 80172ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80172b0:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80172b2:	68fb      	ldr	r3, [r7, #12]
 80172b4:	f383 8810 	msr	PRIMASK, r3
}
 80172b8:	bf00      	nop
            do
            {
                status =  _tx_mutex_put(mutex_ptr);
            } while (status != TX_SUCCESS);
#else
            _tx_mutex_put(mutex_ptr);
 80172ba:	6a38      	ldr	r0, [r7, #32]
 80172bc:	f000 fb9c 	bl	80179f8 <_tx_mutex_put>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80172c0:	f3ef 8310 	mrs	r3, PRIMASK
 80172c4:	617b      	str	r3, [r7, #20]
    return(posture);
 80172c6:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 80172c8:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 80172ca:	b672      	cpsid	i
    return(int_posture);
 80172cc:	693b      	ldr	r3, [r7, #16]
#endif

            /* Disable interrupts.  */
            TX_DISABLE
 80172ce:	627b      	str	r3, [r7, #36]	; 0x24

            /* Move to the next mutex.  */
            mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 80172d0:	687b      	ldr	r3, [r7, #4]
 80172d2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80172d6:	623b      	str	r3, [r7, #32]
        }
    } while (mutex_ptr != TX_NULL);
 80172d8:	6a3b      	ldr	r3, [r7, #32]
 80172da:	2b00      	cmp	r3, #0
 80172dc:	d1dd      	bne.n	801729a <_tx_mutex_thread_release+0x22>

    /* Restore preemption.  */
    _tx_thread_preempt_disable--;
 80172de:	4b07      	ldr	r3, [pc, #28]	; (80172fc <_tx_mutex_thread_release+0x84>)
 80172e0:	681b      	ldr	r3, [r3, #0]
 80172e2:	3b01      	subs	r3, #1
 80172e4:	4a05      	ldr	r2, [pc, #20]	; (80172fc <_tx_mutex_thread_release+0x84>)
 80172e6:	6013      	str	r3, [r2, #0]
 80172e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80172ea:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80172ec:	68bb      	ldr	r3, [r7, #8]
 80172ee:	f383 8810 	msr	PRIMASK, r3
}
 80172f2:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE
}
 80172f4:	bf00      	nop
 80172f6:	3728      	adds	r7, #40	; 0x28
 80172f8:	46bd      	mov	sp, r7
 80172fa:	bd80      	pop	{r7, pc}
 80172fc:	200152e4 	.word	0x200152e4

08017300 <_tx_mutex_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_create(TX_MUTEX *mutex_ptr, CHAR *name_ptr, UINT inherit)
{
 8017300:	b580      	push	{r7, lr}
 8017302:	b08a      	sub	sp, #40	; 0x28
 8017304:	af00      	add	r7, sp, #0
 8017306:	60f8      	str	r0, [r7, #12]
 8017308:	60b9      	str	r1, [r7, #8]
 801730a:	607a      	str	r2, [r7, #4]
TX_MUTEX        *next_mutex;
TX_MUTEX        *previous_mutex;


    /* Initialize mutex control block to all zeros.  */
    TX_MEMSET(mutex_ptr, 0, (sizeof(TX_MUTEX)));
 801730c:	2234      	movs	r2, #52	; 0x34
 801730e:	2100      	movs	r1, #0
 8017310:	68f8      	ldr	r0, [r7, #12]
 8017312:	f002 fc71 	bl	8019bf8 <memset>

    /* Setup the basic mutex fields.  */
    mutex_ptr -> tx_mutex_name =             name_ptr;
 8017316:	68fb      	ldr	r3, [r7, #12]
 8017318:	68ba      	ldr	r2, [r7, #8]
 801731a:	605a      	str	r2, [r3, #4]
    mutex_ptr -> tx_mutex_inherit =          inherit;
 801731c:	68fb      	ldr	r3, [r7, #12]
 801731e:	687a      	ldr	r2, [r7, #4]
 8017320:	611a      	str	r2, [r3, #16]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8017322:	f3ef 8310 	mrs	r3, PRIMASK
 8017326:	61bb      	str	r3, [r7, #24]
    return(posture);
 8017328:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 801732a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 801732c:	b672      	cpsid	i
    return(int_posture);
 801732e:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the mutex on the created list.  */
    TX_DISABLE
 8017330:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the mutex ID to make it valid.  */
    mutex_ptr -> tx_mutex_id =  TX_MUTEX_ID;
 8017332:	68fb      	ldr	r3, [r7, #12]
 8017334:	4a1a      	ldr	r2, [pc, #104]	; (80173a0 <_tx_mutex_create+0xa0>)
 8017336:	601a      	str	r2, [r3, #0]

    /* Setup the thread mutex release function pointer.  */
    _tx_thread_mutex_release =  &(_tx_mutex_thread_release);
 8017338:	4b1a      	ldr	r3, [pc, #104]	; (80173a4 <_tx_mutex_create+0xa4>)
 801733a:	4a1b      	ldr	r2, [pc, #108]	; (80173a8 <_tx_mutex_create+0xa8>)
 801733c:	601a      	str	r2, [r3, #0]

    /* Place the mutex on the list of created mutexes.  First,
       check for an empty list.  */
    if (_tx_mutex_created_count == TX_EMPTY)
 801733e:	4b1b      	ldr	r3, [pc, #108]	; (80173ac <_tx_mutex_create+0xac>)
 8017340:	681b      	ldr	r3, [r3, #0]
 8017342:	2b00      	cmp	r3, #0
 8017344:	d109      	bne.n	801735a <_tx_mutex_create+0x5a>
    {

        /* The created mutex list is empty.  Add mutex to empty list.  */
        _tx_mutex_created_ptr =                   mutex_ptr;
 8017346:	4a1a      	ldr	r2, [pc, #104]	; (80173b0 <_tx_mutex_create+0xb0>)
 8017348:	68fb      	ldr	r3, [r7, #12]
 801734a:	6013      	str	r3, [r2, #0]
        mutex_ptr -> tx_mutex_created_next =      mutex_ptr;
 801734c:	68fb      	ldr	r3, [r7, #12]
 801734e:	68fa      	ldr	r2, [r7, #12]
 8017350:	621a      	str	r2, [r3, #32]
        mutex_ptr -> tx_mutex_created_previous =  mutex_ptr;
 8017352:	68fb      	ldr	r3, [r7, #12]
 8017354:	68fa      	ldr	r2, [r7, #12]
 8017356:	625a      	str	r2, [r3, #36]	; 0x24
 8017358:	e011      	b.n	801737e <_tx_mutex_create+0x7e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_mutex =      _tx_mutex_created_ptr;
 801735a:	4b15      	ldr	r3, [pc, #84]	; (80173b0 <_tx_mutex_create+0xb0>)
 801735c:	681b      	ldr	r3, [r3, #0]
 801735e:	623b      	str	r3, [r7, #32]
        previous_mutex =  next_mutex -> tx_mutex_created_previous;
 8017360:	6a3b      	ldr	r3, [r7, #32]
 8017362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017364:	61fb      	str	r3, [r7, #28]

        /* Place the new mutex in the list.  */
        next_mutex -> tx_mutex_created_previous =  mutex_ptr;
 8017366:	6a3b      	ldr	r3, [r7, #32]
 8017368:	68fa      	ldr	r2, [r7, #12]
 801736a:	625a      	str	r2, [r3, #36]	; 0x24
        previous_mutex -> tx_mutex_created_next =  mutex_ptr;
 801736c:	69fb      	ldr	r3, [r7, #28]
 801736e:	68fa      	ldr	r2, [r7, #12]
 8017370:	621a      	str	r2, [r3, #32]

        /* Setup this mutex's next and previous created links.  */
        mutex_ptr -> tx_mutex_created_previous =  previous_mutex;
 8017372:	68fb      	ldr	r3, [r7, #12]
 8017374:	69fa      	ldr	r2, [r7, #28]
 8017376:	625a      	str	r2, [r3, #36]	; 0x24
        mutex_ptr -> tx_mutex_created_next =      next_mutex;
 8017378:	68fb      	ldr	r3, [r7, #12]
 801737a:	6a3a      	ldr	r2, [r7, #32]
 801737c:	621a      	str	r2, [r3, #32]
    }

    /* Increment the ownership count.  */
    _tx_mutex_created_count++;
 801737e:	4b0b      	ldr	r3, [pc, #44]	; (80173ac <_tx_mutex_create+0xac>)
 8017380:	681b      	ldr	r3, [r3, #0]
 8017382:	3301      	adds	r3, #1
 8017384:	4a09      	ldr	r2, [pc, #36]	; (80173ac <_tx_mutex_create+0xac>)
 8017386:	6013      	str	r3, [r2, #0]
 8017388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801738a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801738c:	693b      	ldr	r3, [r7, #16]
 801738e:	f383 8810 	msr	PRIMASK, r3
}
 8017392:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8017394:	2300      	movs	r3, #0
}
 8017396:	4618      	mov	r0, r3
 8017398:	3728      	adds	r7, #40	; 0x28
 801739a:	46bd      	mov	sp, r7
 801739c:	bd80      	pop	{r7, pc}
 801739e:	bf00      	nop
 80173a0:	4d555445 	.word	0x4d555445
 80173a4:	200152e8 	.word	0x200152e8
 80173a8:	08017279 	.word	0x08017279
 80173ac:	20015230 	.word	0x20015230
 80173b0:	2001522c 	.word	0x2001522c

080173b4 <_tx_mutex_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_delete(TX_MUTEX *mutex_ptr)
{
 80173b4:	b580      	push	{r7, lr}
 80173b6:	b096      	sub	sp, #88	; 0x58
 80173b8:	af00      	add	r7, sp, #0
 80173ba:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80173bc:	f3ef 8310 	mrs	r3, PRIMASK
 80173c0:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 80173c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 80173c4:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 80173c6:	b672      	cpsid	i
    return(int_posture);
 80173c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
#ifdef TX_MISRA_ENABLE
UINT            status;
#endif

    /* Disable interrupts to remove the mutex from the created list.  */
    TX_DISABLE
 80173ca:	657b      	str	r3, [r7, #84]	; 0x54

    /* Log this kernel call.  */
    TX_EL_MUTEX_DELETE_INSERT

    /* Clear the mutex ID to make it invalid.  */
    mutex_ptr -> tx_mutex_id =  TX_CLEAR_ID;
 80173cc:	687b      	ldr	r3, [r7, #4]
 80173ce:	2200      	movs	r2, #0
 80173d0:	601a      	str	r2, [r3, #0]

    /* Decrement the created count.  */
    _tx_mutex_created_count--;
 80173d2:	4b4a      	ldr	r3, [pc, #296]	; (80174fc <_tx_mutex_delete+0x148>)
 80173d4:	681b      	ldr	r3, [r3, #0]
 80173d6:	3b01      	subs	r3, #1
 80173d8:	4a48      	ldr	r2, [pc, #288]	; (80174fc <_tx_mutex_delete+0x148>)
 80173da:	6013      	str	r3, [r2, #0]

    /* See if the mutex is the only one on the list.  */
    if (_tx_mutex_created_count == TX_EMPTY)
 80173dc:	4b47      	ldr	r3, [pc, #284]	; (80174fc <_tx_mutex_delete+0x148>)
 80173de:	681b      	ldr	r3, [r3, #0]
 80173e0:	2b00      	cmp	r3, #0
 80173e2:	d103      	bne.n	80173ec <_tx_mutex_delete+0x38>
    {

        /* Only created mutex, just set the created list to NULL.  */
        _tx_mutex_created_ptr =  TX_NULL;
 80173e4:	4b46      	ldr	r3, [pc, #280]	; (8017500 <_tx_mutex_delete+0x14c>)
 80173e6:	2200      	movs	r2, #0
 80173e8:	601a      	str	r2, [r3, #0]
 80173ea:	e013      	b.n	8017414 <_tx_mutex_delete+0x60>
    }
    else
    {

        /* Link-up the neighbors.  */
        next_mutex =                               mutex_ptr -> tx_mutex_created_next;
 80173ec:	687b      	ldr	r3, [r7, #4]
 80173ee:	6a1b      	ldr	r3, [r3, #32]
 80173f0:	64bb      	str	r3, [r7, #72]	; 0x48
        previous_mutex =                           mutex_ptr -> tx_mutex_created_previous;
 80173f2:	687b      	ldr	r3, [r7, #4]
 80173f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80173f6:	647b      	str	r3, [r7, #68]	; 0x44
        next_mutex -> tx_mutex_created_previous =  previous_mutex;
 80173f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80173fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80173fc:	625a      	str	r2, [r3, #36]	; 0x24
        previous_mutex -> tx_mutex_created_next =  next_mutex;
 80173fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017400:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017402:	621a      	str	r2, [r3, #32]

        /* See if we have to update the created list head pointer.  */
        if (_tx_mutex_created_ptr == mutex_ptr)
 8017404:	4b3e      	ldr	r3, [pc, #248]	; (8017500 <_tx_mutex_delete+0x14c>)
 8017406:	681b      	ldr	r3, [r3, #0]
 8017408:	687a      	ldr	r2, [r7, #4]
 801740a:	429a      	cmp	r2, r3
 801740c:	d102      	bne.n	8017414 <_tx_mutex_delete+0x60>
        {

            /* Yes, move the head pointer to the next link. */
            _tx_mutex_created_ptr =  next_mutex;
 801740e:	4a3c      	ldr	r2, [pc, #240]	; (8017500 <_tx_mutex_delete+0x14c>)
 8017410:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017412:	6013      	str	r3, [r2, #0]
        }
    }

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8017414:	4b3b      	ldr	r3, [pc, #236]	; (8017504 <_tx_mutex_delete+0x150>)
 8017416:	681b      	ldr	r3, [r3, #0]
 8017418:	3301      	adds	r3, #1
 801741a:	4a3a      	ldr	r2, [pc, #232]	; (8017504 <_tx_mutex_delete+0x150>)
 801741c:	6013      	str	r3, [r2, #0]

    /* Pickup the suspension information.  */
    thread_ptr =                             mutex_ptr -> tx_mutex_suspension_list;
 801741e:	687b      	ldr	r3, [r7, #4]
 8017420:	699b      	ldr	r3, [r3, #24]
 8017422:	653b      	str	r3, [r7, #80]	; 0x50
    mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 8017424:	687b      	ldr	r3, [r7, #4]
 8017426:	2200      	movs	r2, #0
 8017428:	619a      	str	r2, [r3, #24]
    suspended_count =                        mutex_ptr -> tx_mutex_suspended_count;
 801742a:	687b      	ldr	r3, [r7, #4]
 801742c:	69db      	ldr	r3, [r3, #28]
 801742e:	64fb      	str	r3, [r7, #76]	; 0x4c
    mutex_ptr -> tx_mutex_suspended_count =  TX_NO_SUSPENSIONS;
 8017430:	687b      	ldr	r3, [r7, #4]
 8017432:	2200      	movs	r2, #0
 8017434:	61da      	str	r2, [r3, #28]


    /* Determine if the mutex is currently on a thread's ownership list.  */

    /* Setup pointer to owner of mutex.  */
    owner_thread =  mutex_ptr -> tx_mutex_owner;
 8017436:	687b      	ldr	r3, [r7, #4]
 8017438:	68db      	ldr	r3, [r3, #12]
 801743a:	643b      	str	r3, [r7, #64]	; 0x40

    /* Determine if there is a valid thread pointer.  */
    if (owner_thread != TX_NULL)
 801743c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801743e:	2b00      	cmp	r3, #0
 8017440:	d013      	beq.n	801746a <_tx_mutex_delete+0xb6>
    {

        /* Yes, remove this mutex from the owned list.  */

        /* Set the ownership count to 1.  */
        mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 8017442:	687b      	ldr	r3, [r7, #4]
 8017444:	2201      	movs	r2, #1
 8017446:	609a      	str	r2, [r3, #8]
 8017448:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801744a:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801744c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801744e:	f383 8810 	msr	PRIMASK, r3
}
 8017452:	bf00      	nop
        do
        {
            status =  _tx_mutex_put(mutex_ptr);
        } while (status != TX_SUCCESS);
#else
        _tx_mutex_put(mutex_ptr);
 8017454:	6878      	ldr	r0, [r7, #4]
 8017456:	f000 facf 	bl	80179f8 <_tx_mutex_put>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801745a:	f3ef 8310 	mrs	r3, PRIMASK
 801745e:	633b      	str	r3, [r7, #48]	; 0x30
    return(posture);
 8017460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    int_posture = __get_interrupt_posture();
 8017462:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 8017464:	b672      	cpsid	i
    return(int_posture);
 8017466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
#endif

        /* Disable interrupts.  */
        TX_DISABLE
 8017468:	657b      	str	r3, [r7, #84]	; 0x54
 801746a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801746c:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801746e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017470:	f383 8810 	msr	PRIMASK, r3
}
 8017474:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the mutex list to resume any and all threads suspended
       on this mutex.  */
    while (suspended_count != ((ULONG) 0))
 8017476:	e024      	b.n	80174c2 <_tx_mutex_delete+0x10e>
    {

        /* Decrement the suspension count.  */
        suspended_count--;
 8017478:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801747a:	3b01      	subs	r3, #1
 801747c:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801747e:	f3ef 8310 	mrs	r3, PRIMASK
 8017482:	61fb      	str	r3, [r7, #28]
    return(posture);
 8017484:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8017486:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8017488:	b672      	cpsid	i
    return(int_posture);
 801748a:	69bb      	ldr	r3, [r7, #24]

        /* Lockout interrupts.  */
        TX_DISABLE
 801748c:	657b      	str	r3, [r7, #84]	; 0x54

        /* Clear the cleanup pointer, this prevents the timeout from doing
           anything.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 801748e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017490:	2200      	movs	r2, #0
 8017492:	669a      	str	r2, [r3, #104]	; 0x68

        /* Set the return status in the thread to TX_DELETED.  */
        thread_ptr -> tx_thread_suspend_status =  TX_DELETED;
 8017494:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017496:	2201      	movs	r2, #1
 8017498:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Move the thread pointer ahead.  */
        next_thread =  thread_ptr -> tx_thread_suspended_next;
 801749c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801749e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80174a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption again.  */
        _tx_thread_preempt_disable++;
 80174a2:	4b18      	ldr	r3, [pc, #96]	; (8017504 <_tx_mutex_delete+0x150>)
 80174a4:	681b      	ldr	r3, [r3, #0]
 80174a6:	3301      	adds	r3, #1
 80174a8:	4a16      	ldr	r2, [pc, #88]	; (8017504 <_tx_mutex_delete+0x150>)
 80174aa:	6013      	str	r3, [r2, #0]
 80174ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80174ae:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80174b0:	6a3b      	ldr	r3, [r7, #32]
 80174b2:	f383 8810 	msr	PRIMASK, r3
}
 80174b6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 80174b8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80174ba:	f001 f9d5 	bl	8018868 <_tx_thread_system_resume>
#endif

        /* Move to next thread.  */
        thread_ptr =  next_thread;
 80174be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80174c0:	653b      	str	r3, [r7, #80]	; 0x50
    while (suspended_count != ((ULONG) 0))
 80174c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80174c4:	2b00      	cmp	r3, #0
 80174c6:	d1d7      	bne.n	8017478 <_tx_mutex_delete+0xc4>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80174c8:	f3ef 8310 	mrs	r3, PRIMASK
 80174cc:	613b      	str	r3, [r7, #16]
    return(posture);
 80174ce:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 80174d0:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 80174d2:	b672      	cpsid	i
    return(int_posture);
 80174d4:	68fb      	ldr	r3, [r7, #12]

    /* Execute Port-Specific completion processing. If needed, it is typically defined in tx_port.h.  */
    TX_MUTEX_DELETE_PORT_COMPLETION(mutex_ptr)

    /* Disable interrupts.  */
    TX_DISABLE
 80174d6:	657b      	str	r3, [r7, #84]	; 0x54

    /* Release previous preempt disable.  */
    _tx_thread_preempt_disable--;
 80174d8:	4b0a      	ldr	r3, [pc, #40]	; (8017504 <_tx_mutex_delete+0x150>)
 80174da:	681b      	ldr	r3, [r3, #0]
 80174dc:	3b01      	subs	r3, #1
 80174de:	4a09      	ldr	r2, [pc, #36]	; (8017504 <_tx_mutex_delete+0x150>)
 80174e0:	6013      	str	r3, [r2, #0]
 80174e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80174e4:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80174e6:	697b      	ldr	r3, [r7, #20]
 80174e8:	f383 8810 	msr	PRIMASK, r3
}
 80174ec:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 80174ee:	f001 f981 	bl	80187f4 <_tx_thread_system_preempt_check>

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 80174f2:	2300      	movs	r3, #0
}
 80174f4:	4618      	mov	r0, r3
 80174f6:	3758      	adds	r7, #88	; 0x58
 80174f8:	46bd      	mov	sp, r7
 80174fa:	bd80      	pop	{r7, pc}
 80174fc:	20015230 	.word	0x20015230
 8017500:	2001522c 	.word	0x2001522c
 8017504:	200152e4 	.word	0x200152e4

08017508 <_tx_mutex_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_get(TX_MUTEX *mutex_ptr, ULONG wait_option)
{
 8017508:	b580      	push	{r7, lr}
 801750a:	b092      	sub	sp, #72	; 0x48
 801750c:	af00      	add	r7, sp, #0
 801750e:	6078      	str	r0, [r7, #4]
 8017510:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8017512:	f3ef 8310 	mrs	r3, PRIMASK
 8017516:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8017518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 801751a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 801751c:	b672      	cpsid	i
    return(int_posture);
 801751e:	6a3b      	ldr	r3, [r7, #32]
TX_THREAD       *previous_thread;
UINT            status;


    /* Disable interrupts to get an instance from the mutex.  */
    TX_DISABLE
 8017520:	643b      	str	r3, [r7, #64]	; 0x40

    /* Log this kernel call.  */
    TX_EL_MUTEX_GET_INSERT

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8017522:	4b7a      	ldr	r3, [pc, #488]	; (801770c <_tx_mutex_get+0x204>)
 8017524:	681b      	ldr	r3, [r3, #0]
 8017526:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Determine if this mutex is available.  */
    if (mutex_ptr -> tx_mutex_ownership_count == ((UINT) 0))
 8017528:	687b      	ldr	r3, [r7, #4]
 801752a:	689b      	ldr	r3, [r3, #8]
 801752c:	2b00      	cmp	r3, #0
 801752e:	d144      	bne.n	80175ba <_tx_mutex_get+0xb2>
    {

        /* Set the ownership count to 1.  */
        mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 8017530:	687b      	ldr	r3, [r7, #4]
 8017532:	2201      	movs	r2, #1
 8017534:	609a      	str	r2, [r3, #8]

        /* Remember that the calling thread owns the mutex.  */
        mutex_ptr -> tx_mutex_owner =  thread_ptr;
 8017536:	687b      	ldr	r3, [r7, #4]
 8017538:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801753a:	60da      	str	r2, [r3, #12]

        /* Determine if the thread pointer is valid.  */
        if (thread_ptr != TX_NULL)
 801753c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801753e:	2b00      	cmp	r3, #0
 8017540:	d032      	beq.n	80175a8 <_tx_mutex_get+0xa0>
        {

            /* Determine if priority inheritance is required.  */
            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8017542:	687b      	ldr	r3, [r7, #4]
 8017544:	691b      	ldr	r3, [r3, #16]
 8017546:	2b01      	cmp	r3, #1
 8017548:	d106      	bne.n	8017558 <_tx_mutex_get+0x50>
            {

                /* Remember the current priority of thread.  */
                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 801754a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801754c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801754e:	687b      	ldr	r3, [r7, #4]
 8017550:	615a      	str	r2, [r3, #20]

                /* Setup the highest priority waiting thread.  */
                mutex_ptr -> tx_mutex_highest_priority_waiting =  ((UINT) TX_MAX_PRIORITIES);
 8017552:	687b      	ldr	r3, [r7, #4]
 8017554:	2220      	movs	r2, #32
 8017556:	629a      	str	r2, [r3, #40]	; 0x28
            }

            /* Pickup next mutex pointer, which is the head of the list.  */
            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 8017558:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801755a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801755e:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
            if (next_mutex != TX_NULL)
 8017560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017562:	2b00      	cmp	r3, #0
 8017564:	d00f      	beq.n	8017586 <_tx_mutex_get+0x7e>
            {

                /* Non-empty list. Link up the mutex.  */

                /* Pickup the next and previous mutex pointer.  */
                previous_mutex =  next_mutex -> tx_mutex_owned_previous;
 8017566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801756a:	62bb      	str	r3, [r7, #40]	; 0x28

                /* Place the owned mutex in the list.  */
                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 801756c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801756e:	687a      	ldr	r2, [r7, #4]
 8017570:	631a      	str	r2, [r3, #48]	; 0x30
                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 8017572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017574:	687a      	ldr	r2, [r7, #4]
 8017576:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Setup this mutex's next and previous created links.  */
                mutex_ptr -> tx_mutex_owned_previous =  previous_mutex;
 8017578:	687b      	ldr	r3, [r7, #4]
 801757a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801757c:	631a      	str	r2, [r3, #48]	; 0x30
                mutex_ptr -> tx_mutex_owned_next =      next_mutex;
 801757e:	687b      	ldr	r3, [r7, #4]
 8017580:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017582:	62da      	str	r2, [r3, #44]	; 0x2c
 8017584:	e009      	b.n	801759a <_tx_mutex_get+0x92>
            }
            else
            {

                /* The owned mutex list is empty.  Add mutex to empty list.  */
                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 8017586:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017588:	687a      	ldr	r2, [r7, #4]
 801758a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
 801758e:	687b      	ldr	r3, [r7, #4]
 8017590:	687a      	ldr	r2, [r7, #4]
 8017592:	62da      	str	r2, [r3, #44]	; 0x2c
                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 8017594:	687b      	ldr	r3, [r7, #4]
 8017596:	687a      	ldr	r2, [r7, #4]
 8017598:	631a      	str	r2, [r3, #48]	; 0x30
            }

            /* Increment the number of mutexes owned counter.  */
            thread_ptr -> tx_thread_owned_mutex_count++;
 801759a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801759c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80175a0:	1c5a      	adds	r2, r3, #1
 80175a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80175a4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 80175a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80175aa:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80175ac:	69fb      	ldr	r3, [r7, #28]
 80175ae:	f383 8810 	msr	PRIMASK, r3
}
 80175b2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  TX_SUCCESS;
 80175b4:	2300      	movs	r3, #0
 80175b6:	647b      	str	r3, [r7, #68]	; 0x44
 80175b8:	e0a2      	b.n	8017700 <_tx_mutex_get+0x1f8>
    }

    /* Otherwise, see if the owning thread is trying to obtain the same mutex.  */
    else if (mutex_ptr -> tx_mutex_owner == thread_ptr)
 80175ba:	687b      	ldr	r3, [r7, #4]
 80175bc:	68db      	ldr	r3, [r3, #12]
 80175be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80175c0:	429a      	cmp	r2, r3
 80175c2:	d10d      	bne.n	80175e0 <_tx_mutex_get+0xd8>
    {

        /* The owning thread is requesting the mutex again, just
           increment the ownership count.  */
        mutex_ptr -> tx_mutex_ownership_count++;
 80175c4:	687b      	ldr	r3, [r7, #4]
 80175c6:	689b      	ldr	r3, [r3, #8]
 80175c8:	1c5a      	adds	r2, r3, #1
 80175ca:	687b      	ldr	r3, [r7, #4]
 80175cc:	609a      	str	r2, [r3, #8]
 80175ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80175d0:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80175d2:	69bb      	ldr	r3, [r7, #24]
 80175d4:	f383 8810 	msr	PRIMASK, r3
}
 80175d8:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  TX_SUCCESS;
 80175da:	2300      	movs	r3, #0
 80175dc:	647b      	str	r3, [r7, #68]	; 0x44
 80175de:	e08f      	b.n	8017700 <_tx_mutex_get+0x1f8>
    }
    else
    {

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 80175e0:	683b      	ldr	r3, [r7, #0]
 80175e2:	2b00      	cmp	r3, #0
 80175e4:	f000 8084 	beq.w	80176f0 <_tx_mutex_get+0x1e8>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 80175e8:	4b49      	ldr	r3, [pc, #292]	; (8017710 <_tx_mutex_get+0x208>)
 80175ea:	681b      	ldr	r3, [r3, #0]
 80175ec:	2b00      	cmp	r3, #0
 80175ee:	d008      	beq.n	8017602 <_tx_mutex_get+0xfa>
 80175f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80175f2:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80175f4:	697b      	ldr	r3, [r7, #20]
 80175f6:	f383 8810 	msr	PRIMASK, r3
}
 80175fa:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NOT_AVAILABLE;
 80175fc:	231d      	movs	r3, #29
 80175fe:	647b      	str	r3, [r7, #68]	; 0x44
 8017600:	e07e      	b.n	8017700 <_tx_mutex_get+0x1f8>
            {

                /* Prepare for suspension of this thread.  */

                /* Pickup the mutex owner.  */
                mutex_owner =  mutex_ptr -> tx_mutex_owner;
 8017602:	687b      	ldr	r3, [r7, #4]
 8017604:	68db      	ldr	r3, [r3, #12]
 8017606:	63bb      	str	r3, [r7, #56]	; 0x38
#endif
                }
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_mutex_cleanup);
 8017608:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801760a:	4a42      	ldr	r2, [pc, #264]	; (8017714 <_tx_mutex_get+0x20c>)
 801760c:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this mutex control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) mutex_ptr;
 801760e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017610:	687a      	ldr	r2, [r7, #4]
 8017612:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 8017614:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017616:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801761a:	1c5a      	adds	r2, r3, #1
 801761c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801761e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

                /* Setup suspension list.  */
                if (mutex_ptr -> tx_mutex_suspended_count == TX_NO_SUSPENSIONS)
 8017622:	687b      	ldr	r3, [r7, #4]
 8017624:	69db      	ldr	r3, [r3, #28]
 8017626:	2b00      	cmp	r3, #0
 8017628:	d109      	bne.n	801763e <_tx_mutex_get+0x136>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    mutex_ptr -> tx_mutex_suspension_list =         thread_ptr;
 801762a:	687b      	ldr	r3, [r7, #4]
 801762c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801762e:	619a      	str	r2, [r3, #24]
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 8017630:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017632:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8017634:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8017636:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017638:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801763a:	675a      	str	r2, [r3, #116]	; 0x74
 801763c:	e011      	b.n	8017662 <_tx_mutex_get+0x15a>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   mutex_ptr -> tx_mutex_suspension_list;
 801763e:	687b      	ldr	r3, [r7, #4]
 8017640:	699b      	ldr	r3, [r3, #24]
 8017642:	637b      	str	r3, [r7, #52]	; 0x34
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 8017644:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017646:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017648:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 801764a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801764c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801764e:	633b      	str	r3, [r7, #48]	; 0x30
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8017650:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017652:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017654:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8017656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017658:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801765a:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 801765c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801765e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8017660:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Increment the suspension count.  */
                mutex_ptr -> tx_mutex_suspended_count++;
 8017662:	687b      	ldr	r3, [r7, #4]
 8017664:	69db      	ldr	r3, [r3, #28]
 8017666:	1c5a      	adds	r2, r3, #1
 8017668:	687b      	ldr	r3, [r7, #4]
 801766a:	61da      	str	r2, [r3, #28]

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =    TX_MUTEX_SUSP;
 801766c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801766e:	220d      	movs	r2, #13
 8017670:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8017672:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017674:	2201      	movs	r2, #1
 8017676:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8017678:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801767a:	683a      	ldr	r2, [r7, #0]
 801767c:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 801767e:	4b24      	ldr	r3, [pc, #144]	; (8017710 <_tx_mutex_get+0x208>)
 8017680:	681b      	ldr	r3, [r3, #0]
 8017682:	3301      	adds	r3, #1
 8017684:	4a22      	ldr	r2, [pc, #136]	; (8017710 <_tx_mutex_get+0x208>)
 8017686:	6013      	str	r3, [r2, #0]
 8017688:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801768a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801768c:	693b      	ldr	r3, [r7, #16]
 801768e:	f383 8810 	msr	PRIMASK, r3
}
 8017692:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if we need to raise the priority of the thread
                   owning the mutex.  */
                if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8017694:	687b      	ldr	r3, [r7, #4]
 8017696:	691b      	ldr	r3, [r3, #16]
 8017698:	2b01      	cmp	r3, #1
 801769a:	d121      	bne.n	80176e0 <_tx_mutex_get+0x1d8>
                {

                    /* Determine if this is the highest priority to raise for this mutex.  */
                    if (mutex_ptr -> tx_mutex_highest_priority_waiting > thread_ptr -> tx_thread_priority)
 801769c:	687b      	ldr	r3, [r7, #4]
 801769e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80176a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80176a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80176a4:	429a      	cmp	r2, r3
 80176a6:	d903      	bls.n	80176b0 <_tx_mutex_get+0x1a8>
                    {

                        /* Remember this priority.  */
                        mutex_ptr -> tx_mutex_highest_priority_waiting =  thread_ptr -> tx_thread_priority;
 80176a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80176aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80176ac:	687b      	ldr	r3, [r7, #4]
 80176ae:	629a      	str	r2, [r3, #40]	; 0x28
                    }

                    /* Determine if we have to update inherit priority level of the mutex owner.  */
                    if (thread_ptr -> tx_thread_priority < mutex_owner -> tx_thread_inherit_priority)
 80176b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80176b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80176b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80176b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80176ba:	429a      	cmp	r2, r3
 80176bc:	d204      	bcs.n	80176c8 <_tx_mutex_get+0x1c0>
                    {

                        /* Remember the new priority inheritance priority.  */
                        mutex_owner -> tx_thread_inherit_priority =  thread_ptr -> tx_thread_priority;
 80176be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80176c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80176c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80176c4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
                    }

                    /* Priority inheritance is requested, check to see if the thread that owns the mutex is lower priority.  */
                    if (mutex_owner -> tx_thread_priority > thread_ptr -> tx_thread_priority)
 80176c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80176ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80176cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80176ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80176d0:	429a      	cmp	r2, r3
 80176d2:	d905      	bls.n	80176e0 <_tx_mutex_get+0x1d8>
                    {

                        /* Yes, raise the suspended, owning thread's priority to that
                           of the current thread.  */
                        _tx_mutex_priority_change(mutex_owner, thread_ptr -> tx_thread_priority);
 80176d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80176d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80176d8:	4619      	mov	r1, r3
 80176da:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80176dc:	f000 f8ce 	bl	801787c <_tx_mutex_priority_change>
#endif
                    }
                }

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 80176e0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80176e2:	f001 f9c1 	bl	8018a68 <_tx_thread_system_suspend>
#endif
                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 80176e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80176e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80176ec:	647b      	str	r3, [r7, #68]	; 0x44
 80176ee:	e007      	b.n	8017700 <_tx_mutex_get+0x1f8>
 80176f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80176f2:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80176f4:	68fb      	ldr	r3, [r7, #12]
 80176f6:	f383 8810 	msr	PRIMASK, r3
}
 80176fa:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NOT_AVAILABLE;
 80176fc:	231d      	movs	r3, #29
 80176fe:	647b      	str	r3, [r7, #68]	; 0x44
        }
    }

    /* Return completion status.  */
    return(status);
 8017700:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8017702:	4618      	mov	r0, r3
 8017704:	3748      	adds	r7, #72	; 0x48
 8017706:	46bd      	mov	sp, r7
 8017708:	bd80      	pop	{r7, pc}
 801770a:	bf00      	nop
 801770c:	2001524c 	.word	0x2001524c
 8017710:	200152e4 	.word	0x200152e4
 8017714:	08017181 	.word	0x08017181

08017718 <_tx_mutex_prioritize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_prioritize(TX_MUTEX *mutex_ptr)
{
 8017718:	b580      	push	{r7, lr}
 801771a:	b092      	sub	sp, #72	; 0x48
 801771c:	af00      	add	r7, sp, #0
 801771e:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8017720:	f3ef 8310 	mrs	r3, PRIMASK
 8017724:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8017726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 8017728:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 801772a:	b672      	cpsid	i
    return(int_posture);
 801772c:	6a3b      	ldr	r3, [r7, #32]
UINT            status;
#endif


    /* Disable interrupts.  */
    TX_DISABLE
 801772e:	647b      	str	r3, [r7, #68]	; 0x44

    /* Log this kernel call.  */
    TX_EL_MUTEX_PRIORITIZE_INSERT

    /* Pickup the suspended count.  */
    suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 8017730:	687b      	ldr	r3, [r7, #4]
 8017732:	69db      	ldr	r3, [r3, #28]
 8017734:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if there are fewer than 2 suspended threads.  */
    if (suspended_count < ((UINT) 2))
 8017736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017738:	2b01      	cmp	r3, #1
 801773a:	d805      	bhi.n	8017748 <_tx_mutex_prioritize+0x30>
 801773c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801773e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8017740:	69fb      	ldr	r3, [r7, #28]
 8017742:	f383 8810 	msr	PRIMASK, r3
}
 8017746:	e092      	b.n	801786e <_tx_mutex_prioritize+0x156>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if there how many threads are suspended on this mutex.  */
    else if (suspended_count == ((UINT) 2))
 8017748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801774a:	2b02      	cmp	r3, #2
 801774c:	d114      	bne.n	8017778 <_tx_mutex_prioritize+0x60>
    {

        /* Pickup the head pointer and the next pointer.  */
        head_ptr =  mutex_ptr -> tx_mutex_suspension_list;
 801774e:	687b      	ldr	r3, [r7, #4]
 8017750:	699b      	ldr	r3, [r3, #24]
 8017752:	63bb      	str	r3, [r7, #56]	; 0x38
        next_thread =  head_ptr -> tx_thread_suspended_next;
 8017754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017758:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Determine if the next suspended thread has a higher priority.  */
        if ((next_thread -> tx_thread_priority) < (head_ptr -> tx_thread_priority))
 801775a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801775c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801775e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017762:	429a      	cmp	r2, r3
 8017764:	d202      	bcs.n	801776c <_tx_mutex_prioritize+0x54>
        {

            /* Yes, move the list head to the next thread.  */
            mutex_ptr -> tx_mutex_suspension_list =  next_thread;
 8017766:	687b      	ldr	r3, [r7, #4]
 8017768:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801776a:	619a      	str	r2, [r3, #24]
 801776c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801776e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8017770:	69bb      	ldr	r3, [r7, #24]
 8017772:	f383 8810 	msr	PRIMASK, r3
}
 8017776:	e07a      	b.n	801786e <_tx_mutex_prioritize+0x156>
    }
    else
    {

        /* Remember the suspension count and head pointer.  */
        head_ptr =   mutex_ptr -> tx_mutex_suspension_list;
 8017778:	687b      	ldr	r3, [r7, #4]
 801777a:	699b      	ldr	r3, [r3, #24]
 801777c:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Default the highest priority thread to the thread at the front of the list.  */
        priority_thread_ptr =  head_ptr;
 801777e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017780:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Setup search pointer.  */
        thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 8017782:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017786:	643b      	str	r3, [r7, #64]	; 0x40

        /* Disable preemption.  */
        _tx_thread_preempt_disable++;
 8017788:	4b3b      	ldr	r3, [pc, #236]	; (8017878 <_tx_mutex_prioritize+0x160>)
 801778a:	681b      	ldr	r3, [r3, #0]
 801778c:	3301      	adds	r3, #1
 801778e:	4a3a      	ldr	r2, [pc, #232]	; (8017878 <_tx_mutex_prioritize+0x160>)
 8017790:	6013      	str	r3, [r2, #0]

        /* Set the list changed flag to false.  */
        list_changed =  TX_FALSE;
 8017792:	2300      	movs	r3, #0
 8017794:	633b      	str	r3, [r7, #48]	; 0x30
        /* Search through the list to find the highest priority thread.  */
        do
        {

            /* Is the current thread higher priority?  */
            if (thread_ptr -> tx_thread_priority < priority_thread_ptr -> tx_thread_priority)
 8017796:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017798:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801779a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801779c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801779e:	429a      	cmp	r2, r3
 80177a0:	d201      	bcs.n	80177a6 <_tx_mutex_prioritize+0x8e>
            {

                /* Yes, remember that this thread is the highest priority.  */
                priority_thread_ptr =  thread_ptr;
 80177a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80177a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80177a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80177a8:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80177aa:	68fb      	ldr	r3, [r7, #12]
 80177ac:	f383 8810 	msr	PRIMASK, r3
}
 80177b0:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80177b2:	f3ef 8310 	mrs	r3, PRIMASK
 80177b6:	617b      	str	r3, [r7, #20]
    return(posture);
 80177b8:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 80177ba:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 80177bc:	b672      	cpsid	i
    return(int_posture);
 80177be:	693b      	ldr	r3, [r7, #16]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 80177c0:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if any changes to the list have occurred while
               interrupts were enabled.  */

            /* Is the list head the same?  */
            if (head_ptr != mutex_ptr -> tx_mutex_suspension_list)
 80177c2:	687b      	ldr	r3, [r7, #4]
 80177c4:	699b      	ldr	r3, [r3, #24]
 80177c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80177c8:	429a      	cmp	r2, r3
 80177ca:	d002      	beq.n	80177d2 <_tx_mutex_prioritize+0xba>
            {

                /* The list head has changed, set the list changed flag.  */
                list_changed =  TX_TRUE;
 80177cc:	2301      	movs	r3, #1
 80177ce:	633b      	str	r3, [r7, #48]	; 0x30
 80177d0:	e006      	b.n	80177e0 <_tx_mutex_prioritize+0xc8>
            }
            else
            {

                /* Is the suspended count the same?  */
                if (suspended_count != mutex_ptr -> tx_mutex_suspended_count)
 80177d2:	687b      	ldr	r3, [r7, #4]
 80177d4:	69db      	ldr	r3, [r3, #28]
 80177d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80177d8:	429a      	cmp	r2, r3
 80177da:	d001      	beq.n	80177e0 <_tx_mutex_prioritize+0xc8>
                {

                    /* The list head has changed, set the list changed flag.  */
                    list_changed =  TX_TRUE;
 80177dc:	2301      	movs	r3, #1
 80177de:	633b      	str	r3, [r7, #48]	; 0x30
                }
            }

            /* Determine if the list has changed.  */
            if (list_changed == TX_FALSE)
 80177e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80177e2:	2b00      	cmp	r3, #0
 80177e4:	d103      	bne.n	80177ee <_tx_mutex_prioritize+0xd6>
            {

                /* Move the thread pointer to the next thread.  */
                thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 80177e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80177e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80177ea:	643b      	str	r3, [r7, #64]	; 0x40
 80177ec:	e00c      	b.n	8017808 <_tx_mutex_prioritize+0xf0>
            }
            else
            {

                /* Remember the suspension count and head pointer.  */
                head_ptr =   mutex_ptr -> tx_mutex_suspension_list;
 80177ee:	687b      	ldr	r3, [r7, #4]
 80177f0:	699b      	ldr	r3, [r3, #24]
 80177f2:	63bb      	str	r3, [r7, #56]	; 0x38
                suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 80177f4:	687b      	ldr	r3, [r7, #4]
 80177f6:	69db      	ldr	r3, [r3, #28]
 80177f8:	637b      	str	r3, [r7, #52]	; 0x34

                /* Default the highest priority thread to the thread at the front of the list.  */
                priority_thread_ptr =  head_ptr;
 80177fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80177fc:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Setup search pointer.  */
                thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 80177fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017802:	643b      	str	r3, [r7, #64]	; 0x40

                /* Reset the list changed flag.  */
                list_changed =  TX_FALSE;
 8017804:	2300      	movs	r3, #0
 8017806:	633b      	str	r3, [r7, #48]	; 0x30
            }

        } while (thread_ptr != head_ptr);
 8017808:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801780a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801780c:	429a      	cmp	r2, r3
 801780e:	d1c2      	bne.n	8017796 <_tx_mutex_prioritize+0x7e>

        /* Release preemption.  */
        _tx_thread_preempt_disable--;
 8017810:	4b19      	ldr	r3, [pc, #100]	; (8017878 <_tx_mutex_prioritize+0x160>)
 8017812:	681b      	ldr	r3, [r3, #0]
 8017814:	3b01      	subs	r3, #1
 8017816:	4a18      	ldr	r2, [pc, #96]	; (8017878 <_tx_mutex_prioritize+0x160>)
 8017818:	6013      	str	r3, [r2, #0]

        /* Now determine if the highest priority thread is at the front
           of the list.  */
        if (priority_thread_ptr != head_ptr)
 801781a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801781c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801781e:	429a      	cmp	r2, r3
 8017820:	d01d      	beq.n	801785e <_tx_mutex_prioritize+0x146>
            /* No, we need to move the highest priority suspended thread to the
               front of the list.  */

            /* First, remove the highest priority thread by updating the
               adjacent suspended threads.  */
            next_thread =                                  priority_thread_ptr -> tx_thread_suspended_next;
 8017822:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017826:	62fb      	str	r3, [r7, #44]	; 0x2c
            previous_thread =                              priority_thread_ptr -> tx_thread_suspended_previous;
 8017828:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801782a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801782c:	62bb      	str	r3, [r7, #40]	; 0x28
            next_thread -> tx_thread_suspended_previous =  previous_thread;
 801782e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017830:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017832:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =  next_thread;
 8017834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017836:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017838:	671a      	str	r2, [r3, #112]	; 0x70

            /* Now, link the highest priority thread at the front of the list.  */
            previous_thread =                                      head_ptr -> tx_thread_suspended_previous;
 801783a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801783c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801783e:	62bb      	str	r3, [r7, #40]	; 0x28
            priority_thread_ptr -> tx_thread_suspended_next =      head_ptr;
 8017840:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017842:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8017844:	671a      	str	r2, [r3, #112]	; 0x70
            priority_thread_ptr -> tx_thread_suspended_previous =  previous_thread;
 8017846:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017848:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801784a:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =          priority_thread_ptr;
 801784c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801784e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8017850:	671a      	str	r2, [r3, #112]	; 0x70
            head_ptr -> tx_thread_suspended_previous =             priority_thread_ptr;
 8017852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017854:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8017856:	675a      	str	r2, [r3, #116]	; 0x74

            /* Move the list head pointer to the highest priority suspended thread.  */
            mutex_ptr -> tx_mutex_suspension_list =  priority_thread_ptr;
 8017858:	687b      	ldr	r3, [r7, #4]
 801785a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801785c:	619a      	str	r2, [r3, #24]
 801785e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017860:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8017862:	68bb      	ldr	r3, [r7, #8]
 8017864:	f383 8810 	msr	PRIMASK, r3
}
 8017868:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 801786a:	f000 ffc3 	bl	80187f4 <_tx_thread_system_preempt_check>
    /* Return completion status.  */
    return(status);
#else

    /* Return successful completion.  */
    return(TX_SUCCESS);
 801786e:	2300      	movs	r3, #0
#endif
}
 8017870:	4618      	mov	r0, r3
 8017872:	3748      	adds	r7, #72	; 0x48
 8017874:	46bd      	mov	sp, r7
 8017876:	bd80      	pop	{r7, pc}
 8017878:	200152e4 	.word	0x200152e4

0801787c <_tx_mutex_priority_change>:
/*                                            priority rather than next,  */
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_priority_change(TX_THREAD *thread_ptr, UINT new_priority)
{
 801787c:	b580      	push	{r7, lr}
 801787e:	b090      	sub	sp, #64	; 0x40
 8017880:	af00      	add	r7, sp, #0
 8017882:	6078      	str	r0, [r7, #4]
 8017884:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8017886:	f3ef 8310 	mrs	r3, PRIMASK
 801788a:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 801788c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 801788e:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8017890:	b672      	cpsid	i
    return(int_posture);
 8017892:	6abb      	ldr	r3, [r7, #40]	; 0x28


#ifndef TX_NOT_INTERRUPTABLE

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8017894:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif

    /* Determine if this thread is currently ready.  */
    if (thread_ptr -> tx_thread_state != TX_READY)
 8017896:	687b      	ldr	r3, [r7, #4]
 8017898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801789a:	2b00      	cmp	r3, #0
 801789c:	d017      	beq.n	80178ce <_tx_mutex_priority_change+0x52>
    {

        /* Change thread priority to the new mutex priority-inheritance priority.  */
        thread_ptr -> tx_thread_priority =  new_priority;
 801789e:	687b      	ldr	r3, [r7, #4]
 80178a0:	683a      	ldr	r2, [r7, #0]
 80178a2:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Determine how to setup the thread's preemption-threshold.  */
        if (thread_ptr -> tx_thread_user_preempt_threshold < new_priority)
 80178a4:	687b      	ldr	r3, [r7, #4]
 80178a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80178aa:	683a      	ldr	r2, [r7, #0]
 80178ac:	429a      	cmp	r2, r3
 80178ae:	d905      	bls.n	80178bc <_tx_mutex_priority_change+0x40>
        {

            /* Change thread preemption-threshold to the user's preemption-threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 80178b0:	687b      	ldr	r3, [r7, #4]
 80178b2:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80178b6:	687b      	ldr	r3, [r7, #4]
 80178b8:	63da      	str	r2, [r3, #60]	; 0x3c
 80178ba:	e002      	b.n	80178c2 <_tx_mutex_priority_change+0x46>
        }
        else
        {

            /* Change the thread preemption-threshold to the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_priority;
 80178bc:	687b      	ldr	r3, [r7, #4]
 80178be:	683a      	ldr	r2, [r7, #0]
 80178c0:	63da      	str	r2, [r3, #60]	; 0x3c
 80178c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80178c4:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80178c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80178c8:	f383 8810 	msr	PRIMASK, r3
}
 80178cc:	e089      	b.n	80179e2 <_tx_mutex_priority_change+0x166>
    }
    else
    {

        /* Pickup the next thread to execute.  */
        execute_ptr =  _tx_thread_execute_ptr;
 80178ce:	4b47      	ldr	r3, [pc, #284]	; (80179ec <_tx_mutex_priority_change+0x170>)
 80178d0:	681b      	ldr	r3, [r3, #0]
 80178d2:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Save the original priority.  */
        original_priority =  thread_ptr -> tx_thread_priority;
 80178d4:	687b      	ldr	r3, [r7, #4]
 80178d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80178d8:	637b      	str	r3, [r7, #52]	; 0x34
        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
#else

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable =  _tx_thread_preempt_disable + ((UINT) 2);
 80178da:	4b45      	ldr	r3, [pc, #276]	; (80179f0 <_tx_mutex_priority_change+0x174>)
 80178dc:	681b      	ldr	r3, [r3, #0]
 80178de:	3302      	adds	r3, #2
 80178e0:	4a43      	ldr	r2, [pc, #268]	; (80179f0 <_tx_mutex_priority_change+0x174>)
 80178e2:	6013      	str	r3, [r2, #0]

        /* Set the state to priority change.  */
        thread_ptr -> tx_thread_state =    TX_PRIORITY_CHANGE;
 80178e4:	687b      	ldr	r3, [r7, #4]
 80178e6:	220e      	movs	r2, #14
 80178e8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the suspending flag. */
        thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80178ea:	687b      	ldr	r3, [r7, #4]
 80178ec:	2201      	movs	r2, #1
 80178ee:	639a      	str	r2, [r3, #56]	; 0x38

        /* Setup the timeout period.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 80178f0:	687b      	ldr	r3, [r7, #4]
 80178f2:	2200      	movs	r2, #0
 80178f4:	64da      	str	r2, [r3, #76]	; 0x4c
 80178f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80178f8:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80178fa:	69bb      	ldr	r3, [r7, #24]
 80178fc:	f383 8810 	msr	PRIMASK, r3
}
 8017900:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* The thread is ready and must first be removed from the list.  Call the
           system suspend function to accomplish this.  */
        _tx_thread_system_suspend(thread_ptr);
 8017902:	6878      	ldr	r0, [r7, #4]
 8017904:	f001 f8b0 	bl	8018a68 <_tx_thread_system_suspend>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8017908:	f3ef 8310 	mrs	r3, PRIMASK
 801790c:	623b      	str	r3, [r7, #32]
    return(posture);
 801790e:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8017910:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8017912:	b672      	cpsid	i
    return(int_posture);
 8017914:	69fb      	ldr	r3, [r7, #28]

        /* Disable interrupts.  */
        TX_DISABLE
 8017916:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* At this point, the preempt disable flag is still set, so we still have
           protection against all preemption.  */

        /* Change thread priority to the new mutex priority-inheritance priority.  */
        thread_ptr -> tx_thread_priority =  new_priority;
 8017918:	687b      	ldr	r3, [r7, #4]
 801791a:	683a      	ldr	r2, [r7, #0]
 801791c:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Determine how to setup the thread's preemption-threshold.  */
        if (thread_ptr -> tx_thread_user_preempt_threshold < new_priority)
 801791e:	687b      	ldr	r3, [r7, #4]
 8017920:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8017924:	683a      	ldr	r2, [r7, #0]
 8017926:	429a      	cmp	r2, r3
 8017928:	d905      	bls.n	8017936 <_tx_mutex_priority_change+0xba>
        {

            /* Change thread preemption-threshold to the user's preemption-threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 801792a:	687b      	ldr	r3, [r7, #4]
 801792c:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8017930:	687b      	ldr	r3, [r7, #4]
 8017932:	63da      	str	r2, [r3, #60]	; 0x3c
 8017934:	e002      	b.n	801793c <_tx_mutex_priority_change+0xc0>
        }
        else
        {

            /* Change the thread preemption-threshold to the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_priority;
 8017936:	687b      	ldr	r3, [r7, #4]
 8017938:	683a      	ldr	r2, [r7, #0]
 801793a:	63da      	str	r2, [r3, #60]	; 0x3c
 801793c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801793e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8017940:	68fb      	ldr	r3, [r7, #12]
 8017942:	f383 8810 	msr	PRIMASK, r3
}
 8017946:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread with the new priority.  */
        _tx_thread_system_resume(thread_ptr);
 8017948:	6878      	ldr	r0, [r7, #4]
 801794a:	f000 ff8d 	bl	8018868 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801794e:	f3ef 8310 	mrs	r3, PRIMASK
 8017952:	617b      	str	r3, [r7, #20]
    return(posture);
 8017954:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8017956:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8017958:	b672      	cpsid	i
    return(int_posture);
 801795a:	693b      	ldr	r3, [r7, #16]
        TX_MUTEX_PRIORITY_CHANGE_EXTENSION

#ifndef TX_NOT_INTERRUPTABLE

        /* Disable interrupts.  */
        TX_DISABLE
 801795c:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif

        /* Pickup the next thread to execute.  */
        next_execute_ptr =  _tx_thread_execute_ptr;
 801795e:	4b23      	ldr	r3, [pc, #140]	; (80179ec <_tx_mutex_priority_change+0x170>)
 8017960:	681b      	ldr	r3, [r3, #0]
 8017962:	633b      	str	r3, [r7, #48]	; 0x30

        /* Determine if this thread is not the next thread to execute.  */
        if (thread_ptr != next_execute_ptr)
 8017964:	687a      	ldr	r2, [r7, #4]
 8017966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017968:	429a      	cmp	r2, r3
 801796a:	d034      	beq.n	80179d6 <_tx_mutex_priority_change+0x15a>
        {

            /* Make sure the thread is still ready.  */
            if (thread_ptr -> tx_thread_state == TX_READY)
 801796c:	687b      	ldr	r3, [r7, #4]
 801796e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017970:	2b00      	cmp	r3, #0
 8017972:	d130      	bne.n	80179d6 <_tx_mutex_priority_change+0x15a>
            {

                /* Now check and see if this thread has an equal or higher priority.  */
                if (thread_ptr -> tx_thread_priority <= next_execute_ptr -> tx_thread_priority)
 8017974:	687b      	ldr	r3, [r7, #4]
 8017976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801797a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801797c:	429a      	cmp	r2, r3
 801797e:	d811      	bhi.n	80179a4 <_tx_mutex_priority_change+0x128>
                {

                    /* Now determine if this thread was the previously executing thread.  */
                    if (thread_ptr == execute_ptr)
 8017980:	687a      	ldr	r2, [r7, #4]
 8017982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017984:	429a      	cmp	r2, r3
 8017986:	d126      	bne.n	80179d6 <_tx_mutex_priority_change+0x15a>

                        /* Yes, this thread was previously executing before we temporarily suspended and resumed
                           it in order to change the priority. A lower or same priority thread cannot be the next thread
                           to execute in this case since this thread really didn't suspend.  Simply reset the execute
                           pointer to this thread.  */
                        _tx_thread_execute_ptr =  thread_ptr;
 8017988:	4a18      	ldr	r2, [pc, #96]	; (80179ec <_tx_mutex_priority_change+0x170>)
 801798a:	687b      	ldr	r3, [r7, #4]
 801798c:	6013      	str	r3, [r2, #0]

                        /* Determine if we moved to a lower priority. If so, move the thread to the front of its priority list.  */
                        if (original_priority < new_priority)
 801798e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017990:	683b      	ldr	r3, [r7, #0]
 8017992:	429a      	cmp	r2, r3
 8017994:	d21f      	bcs.n	80179d6 <_tx_mutex_priority_change+0x15a>
                        {

                            /* Ensure that this thread is placed at the front of the priority list.  */
                            _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 8017996:	687b      	ldr	r3, [r7, #4]
 8017998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801799a:	4916      	ldr	r1, [pc, #88]	; (80179f4 <_tx_mutex_priority_change+0x178>)
 801799c:	687a      	ldr	r2, [r7, #4]
 801799e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80179a2:	e018      	b.n	80179d6 <_tx_mutex_priority_change+0x15a>
                }
                else
                {

                    /* Now determine if this thread's preemption-threshold needs to be enforced.  */
                    if (thread_ptr -> tx_thread_preempt_threshold < thread_ptr -> tx_thread_priority)
 80179a4:	687b      	ldr	r3, [r7, #4]
 80179a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80179a8:	687b      	ldr	r3, [r7, #4]
 80179aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80179ac:	429a      	cmp	r2, r3
 80179ae:	d212      	bcs.n	80179d6 <_tx_mutex_priority_change+0x15a>
                    {

                        /* Yes, preemption-threshold is in force for this thread. */

                        /* Compare the next thread to execute thread's priority against the thread's preemption-threshold.  */
                        if (thread_ptr -> tx_thread_preempt_threshold <= next_execute_ptr -> tx_thread_priority)
 80179b0:	687b      	ldr	r3, [r7, #4]
 80179b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80179b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80179b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80179b8:	429a      	cmp	r2, r3
 80179ba:	d80c      	bhi.n	80179d6 <_tx_mutex_priority_change+0x15a>
                        {

                            /* We must swap execute pointers to enforce the preemption-threshold of a thread coming out of
                               priority inheritance.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 80179bc:	4a0b      	ldr	r2, [pc, #44]	; (80179ec <_tx_mutex_priority_change+0x170>)
 80179be:	687b      	ldr	r3, [r7, #4]
 80179c0:	6013      	str	r3, [r2, #0]

                            /* Determine if we moved to a lower priority. If so, move the thread to the front of its priority list.  */
                            if (original_priority < new_priority)
 80179c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80179c4:	683b      	ldr	r3, [r7, #0]
 80179c6:	429a      	cmp	r2, r3
 80179c8:	d205      	bcs.n	80179d6 <_tx_mutex_priority_change+0x15a>
                            {

                                /* Ensure that this thread is placed at the front of the priority list.  */
                                _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 80179ca:	687b      	ldr	r3, [r7, #4]
 80179cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80179ce:	4909      	ldr	r1, [pc, #36]	; (80179f4 <_tx_mutex_priority_change+0x178>)
 80179d0:	687a      	ldr	r2, [r7, #4]
 80179d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80179d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80179d8:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80179da:	68bb      	ldr	r3, [r7, #8]
 80179dc:	f383 8810 	msr	PRIMASK, r3
}
 80179e0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 80179e2:	bf00      	nop
 80179e4:	3740      	adds	r7, #64	; 0x40
 80179e6:	46bd      	mov	sp, r7
 80179e8:	bd80      	pop	{r7, pc}
 80179ea:	bf00      	nop
 80179ec:	20015250 	.word	0x20015250
 80179f0:	200152e4 	.word	0x200152e4
 80179f4:	20015264 	.word	0x20015264

080179f8 <_tx_mutex_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_put(TX_MUTEX *mutex_ptr)
{
 80179f8:	b580      	push	{r7, lr}
 80179fa:	b0a6      	sub	sp, #152	; 0x98
 80179fc:	af00      	add	r7, sp, #0
 80179fe:	6078      	str	r0, [r7, #4]
TX_THREAD       *suspended_thread;
UINT            inheritance_priority;


    /* Setup status to indicate the processing is not complete.  */
    status =  TX_NOT_DONE;
 8017a00:	2320      	movs	r3, #32
 8017a02:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8017a06:	f3ef 8310 	mrs	r3, PRIMASK
 8017a0a:	65fb      	str	r3, [r7, #92]	; 0x5c
    return(posture);
 8017a0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    int_posture = __get_interrupt_posture();
 8017a0e:	65bb      	str	r3, [r7, #88]	; 0x58
    __asm__ volatile ("CPSID i" : : : "memory");
 8017a10:	b672      	cpsid	i
    return(int_posture);
 8017a12:	6dbb      	ldr	r3, [r7, #88]	; 0x58

    /* Disable interrupts to put an instance back to the mutex.  */
    TX_DISABLE
 8017a14:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    /* Log this kernel call.  */
    TX_EL_MUTEX_PUT_INSERT

    /* Determine if this mutex is owned.  */
    if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 8017a18:	687b      	ldr	r3, [r7, #4]
 8017a1a:	689b      	ldr	r3, [r3, #8]
 8017a1c:	2b00      	cmp	r3, #0
 8017a1e:	f000 81ff 	beq.w	8017e20 <_tx_mutex_put+0x428>
    {

        /* Pickup the owning thread pointer.  */
        thread_ptr =  mutex_ptr -> tx_mutex_owner;
 8017a22:	687b      	ldr	r3, [r7, #4]
 8017a24:	68db      	ldr	r3, [r3, #12]
 8017a26:	67fb      	str	r3, [r7, #124]	; 0x7c

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 8017a28:	4ba3      	ldr	r3, [pc, #652]	; (8017cb8 <_tx_mutex_put+0x2c0>)
 8017a2a:	681b      	ldr	r3, [r3, #0]
 8017a2c:	67bb      	str	r3, [r7, #120]	; 0x78

        /* Check to see if the mutex is owned by the calling thread.  */
        if (mutex_ptr -> tx_mutex_owner != current_thread)
 8017a2e:	687b      	ldr	r3, [r7, #4]
 8017a30:	68db      	ldr	r3, [r3, #12]
 8017a32:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8017a34:	429a      	cmp	r2, r3
 8017a36:	d00d      	beq.n	8017a54 <_tx_mutex_put+0x5c>
        {

            /* Determine if the preempt disable flag is set, indicating that
               the caller is not the application but from ThreadX. In such
               cases, the thread mutex owner does not need to match.  */
            if (_tx_thread_preempt_disable == ((UINT) 0))
 8017a38:	4ba0      	ldr	r3, [pc, #640]	; (8017cbc <_tx_mutex_put+0x2c4>)
 8017a3a:	681b      	ldr	r3, [r3, #0]
 8017a3c:	2b00      	cmp	r3, #0
 8017a3e:	d109      	bne.n	8017a54 <_tx_mutex_put+0x5c>
 8017a40:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8017a44:	657b      	str	r3, [r7, #84]	; 0x54
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8017a46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017a48:	f383 8810 	msr	PRIMASK, r3
}
 8017a4c:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Caller does not own the mutex.  */
                status =  TX_NOT_OWNED;
 8017a4e:	231e      	movs	r3, #30
 8017a50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            }
        }

        /* Determine if we should continue.  */
        if (status == TX_NOT_DONE)
 8017a54:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8017a58:	2b20      	cmp	r3, #32
 8017a5a:	f040 81eb 	bne.w	8017e34 <_tx_mutex_put+0x43c>
        {

            /* Decrement the mutex ownership count.  */
            mutex_ptr -> tx_mutex_ownership_count--;
 8017a5e:	687b      	ldr	r3, [r7, #4]
 8017a60:	689b      	ldr	r3, [r3, #8]
 8017a62:	1e5a      	subs	r2, r3, #1
 8017a64:	687b      	ldr	r3, [r7, #4]
 8017a66:	609a      	str	r2, [r3, #8]

            /* Determine if the mutex is still owned by the current thread.  */
            if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 8017a68:	687b      	ldr	r3, [r7, #4]
 8017a6a:	689b      	ldr	r3, [r3, #8]
 8017a6c:	2b00      	cmp	r3, #0
 8017a6e:	d00a      	beq.n	8017a86 <_tx_mutex_put+0x8e>
 8017a70:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8017a74:	653b      	str	r3, [r7, #80]	; 0x50
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8017a76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017a78:	f383 8810 	msr	PRIMASK, r3
}
 8017a7c:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Mutex is still owned, just return successful status.  */
                status =  TX_SUCCESS;
 8017a7e:	2300      	movs	r3, #0
 8017a80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8017a84:	e1d6      	b.n	8017e34 <_tx_mutex_put+0x43c>
            }
            else
            {

                /* Check for a NULL thread pointer, which can only happen during initialization.   */
                if (thread_ptr == TX_NULL)
 8017a86:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8017a88:	2b00      	cmp	r3, #0
 8017a8a:	d10a      	bne.n	8017aa2 <_tx_mutex_put+0xaa>
 8017a8c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8017a90:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8017a92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017a94:	f383 8810 	msr	PRIMASK, r3
}
 8017a98:	bf00      	nop

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Mutex is now available, return successful status.  */
                    status =  TX_SUCCESS;
 8017a9a:	2300      	movs	r3, #0
 8017a9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8017aa0:	e1c8      	b.n	8017e34 <_tx_mutex_put+0x43c>
                    /* The mutex is now available.   */

                    /* Remove this mutex from the owned mutex list.  */

                    /* Decrement the ownership count.  */
                    thread_ptr -> tx_thread_owned_mutex_count--;
 8017aa2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8017aa4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8017aa8:	1e5a      	subs	r2, r3, #1
 8017aaa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8017aac:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

                    /* Determine if this mutex was the only one on the list.  */
                    if (thread_ptr -> tx_thread_owned_mutex_count == ((UINT) 0))
 8017ab0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8017ab2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8017ab6:	2b00      	cmp	r3, #0
 8017ab8:	d104      	bne.n	8017ac4 <_tx_mutex_put+0xcc>
                    {

                        /* Yes, the list is empty.  Simply set the head pointer to NULL.  */
                        thread_ptr -> tx_thread_owned_mutex_list =  TX_NULL;
 8017aba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8017abc:	2200      	movs	r2, #0
 8017abe:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 8017ac2:	e019      	b.n	8017af8 <_tx_mutex_put+0x100>
                    {

                        /* No, there are more mutexes on the list.  */

                        /* Link-up the neighbors.  */
                        next_mutex =                             mutex_ptr -> tx_mutex_owned_next;
 8017ac4:	687b      	ldr	r3, [r7, #4]
 8017ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017ac8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                        previous_mutex =                         mutex_ptr -> tx_mutex_owned_previous;
 8017acc:	687b      	ldr	r3, [r7, #4]
 8017ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017ad0:	677b      	str	r3, [r7, #116]	; 0x74
                        next_mutex -> tx_mutex_owned_previous =  previous_mutex;
 8017ad2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8017ad6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8017ad8:	631a      	str	r2, [r3, #48]	; 0x30
                        previous_mutex -> tx_mutex_owned_next =  next_mutex;
 8017ada:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8017adc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8017ae0:	62da      	str	r2, [r3, #44]	; 0x2c

                        /* See if we have to update the created list head pointer.  */
                        if (thread_ptr -> tx_thread_owned_mutex_list == mutex_ptr)
 8017ae2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8017ae4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8017ae8:	687a      	ldr	r2, [r7, #4]
 8017aea:	429a      	cmp	r2, r3
 8017aec:	d104      	bne.n	8017af8 <_tx_mutex_put+0x100>
                        {

                            /* Yes, move the head pointer to the next link. */
                            thread_ptr -> tx_thread_owned_mutex_list =  next_mutex;
 8017aee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8017af0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8017af4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                        }
                    }

                    /* Determine if the simple, non-suspension, non-priority inheritance case is present.  */
                    if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 8017af8:	687b      	ldr	r3, [r7, #4]
 8017afa:	699b      	ldr	r3, [r3, #24]
 8017afc:	2b00      	cmp	r3, #0
 8017afe:	d110      	bne.n	8017b22 <_tx_mutex_put+0x12a>
                    {

                        /* Is this a priority inheritance mutex?  */
                        if (mutex_ptr -> tx_mutex_inherit == TX_FALSE)
 8017b00:	687b      	ldr	r3, [r7, #4]
 8017b02:	691b      	ldr	r3, [r3, #16]
 8017b04:	2b00      	cmp	r3, #0
 8017b06:	d10c      	bne.n	8017b22 <_tx_mutex_put+0x12a>
                        {

                            /* Yes, we are done - set the mutex owner to NULL.   */
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 8017b08:	687b      	ldr	r3, [r7, #4]
 8017b0a:	2200      	movs	r2, #0
 8017b0c:	60da      	str	r2, [r3, #12]
 8017b0e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8017b12:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8017b14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017b16:	f383 8810 	msr	PRIMASK, r3
}
 8017b1a:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Mutex is now available, return successful status.  */
                            status =  TX_SUCCESS;
 8017b1c:	2300      	movs	r3, #0
 8017b1e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                        }
                    }

                    /* Determine if the processing is complete.  */
                    if (status == TX_NOT_DONE)
 8017b22:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8017b26:	2b20      	cmp	r3, #32
 8017b28:	f040 8184 	bne.w	8017e34 <_tx_mutex_put+0x43c>
                    {

                        /* Initialize original owner and thread priority.  */
                        old_owner =      TX_NULL;
 8017b2c:	2300      	movs	r3, #0
 8017b2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                        old_priority =   thread_ptr -> tx_thread_user_priority;
 8017b32:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8017b34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8017b38:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

                        /* Does this mutex support priority inheritance?  */
                        if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8017b3c:	687b      	ldr	r3, [r7, #4]
 8017b3e:	691b      	ldr	r3, [r3, #16]
 8017b40:	2b01      	cmp	r3, #1
 8017b42:	d155      	bne.n	8017bf0 <_tx_mutex_put+0x1f8>
                        {

#ifndef TX_NOT_INTERRUPTABLE

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8017b44:	4b5d      	ldr	r3, [pc, #372]	; (8017cbc <_tx_mutex_put+0x2c4>)
 8017b46:	681b      	ldr	r3, [r3, #0]
 8017b48:	3301      	adds	r3, #1
 8017b4a:	4a5c      	ldr	r2, [pc, #368]	; (8017cbc <_tx_mutex_put+0x2c4>)
 8017b4c:	6013      	str	r3, [r2, #0]
 8017b4e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8017b52:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8017b54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017b56:	f383 8810 	msr	PRIMASK, r3
}
 8017b5a:	bf00      	nop
                            /* Restore interrupts.  */
                            TX_RESTORE
#endif

                            /* Default the inheritance priority to disabled.  */
                            inheritance_priority =  ((UINT) TX_MAX_PRIORITIES);
 8017b5c:	2320      	movs	r3, #32
 8017b5e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                            /* Search the owned mutexes for this thread to determine the highest priority for this
                               former mutex owner to return to.  */
                            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 8017b62:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8017b64:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8017b68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                            while (next_mutex != TX_NULL)
 8017b6c:	e01f      	b.n	8017bae <_tx_mutex_put+0x1b6>
                            {

                                /* Does this mutex support priority inheritance?  */
                                if (next_mutex -> tx_mutex_inherit == TX_TRUE)
 8017b6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8017b72:	691b      	ldr	r3, [r3, #16]
 8017b74:	2b01      	cmp	r3, #1
 8017b76:	d10b      	bne.n	8017b90 <_tx_mutex_put+0x198>
                                {

                                    /* Determine if highest priority field of the mutex is higher than the priority to
                                       restore.  */
                                    if (next_mutex -> tx_mutex_highest_priority_waiting < inheritance_priority)
 8017b78:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8017b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017b7e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8017b82:	429a      	cmp	r2, r3
 8017b84:	d904      	bls.n	8017b90 <_tx_mutex_put+0x198>
                                    {

                                        /* Use this priority to return releasing thread to.  */
                                        inheritance_priority =   next_mutex -> tx_mutex_highest_priority_waiting;
 8017b86:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8017b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017b8c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                                    }
                                }

                                /* Move mutex pointer to the next mutex in the list.  */
                                next_mutex =  next_mutex -> tx_mutex_owned_next;
 8017b90:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8017b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017b96:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

                                /* Are we at the end of the list?  */
                                if (next_mutex == thread_ptr -> tx_thread_owned_mutex_list)
 8017b9a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8017b9c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8017ba0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8017ba4:	429a      	cmp	r2, r3
 8017ba6:	d102      	bne.n	8017bae <_tx_mutex_put+0x1b6>
                                {

                                    /* Yes, set the next mutex to NULL.  */
                                    next_mutex =  TX_NULL;
 8017ba8:	2300      	movs	r3, #0
 8017baa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                            while (next_mutex != TX_NULL)
 8017bae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8017bb2:	2b00      	cmp	r3, #0
 8017bb4:	d1db      	bne.n	8017b6e <_tx_mutex_put+0x176>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8017bb6:	f3ef 8310 	mrs	r3, PRIMASK
 8017bba:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 8017bbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 8017bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 8017bc0:	b672      	cpsid	i
    return(int_posture);
 8017bc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                            }

#ifndef TX_NOT_INTERRUPTABLE

                            /* Disable interrupts.  */
                            TX_DISABLE
 8017bc4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                            /* Undo the temporarily preemption disable.  */
                            _tx_thread_preempt_disable--;
 8017bc8:	4b3c      	ldr	r3, [pc, #240]	; (8017cbc <_tx_mutex_put+0x2c4>)
 8017bca:	681b      	ldr	r3, [r3, #0]
 8017bcc:	3b01      	subs	r3, #1
 8017bce:	4a3b      	ldr	r2, [pc, #236]	; (8017cbc <_tx_mutex_put+0x2c4>)
 8017bd0:	6013      	str	r3, [r2, #0]
#endif

                            /* Set the inherit priority to that of the highest priority thread waiting on the mutex.  */
                            thread_ptr -> tx_thread_inherit_priority =  inheritance_priority;
 8017bd2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8017bd4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8017bd8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

                            /* Determine if the inheritance priority is less than the default old priority.  */
                            if (inheritance_priority < old_priority)
 8017bdc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8017be0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8017be4:	429a      	cmp	r2, r3
 8017be6:	d203      	bcs.n	8017bf0 <_tx_mutex_put+0x1f8>
                            {

                                /* Yes, update the old priority.  */
                                old_priority =  inheritance_priority;
 8017be8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8017bec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                            }
                        }

                        /* Determine if priority inheritance is in effect and there are one or more
                           threads suspended on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspended_count > ((UINT) 1))
 8017bf0:	687b      	ldr	r3, [r7, #4]
 8017bf2:	69db      	ldr	r3, [r3, #28]
 8017bf4:	2b01      	cmp	r3, #1
 8017bf6:	d920      	bls.n	8017c3a <_tx_mutex_put+0x242>
                        {

                            /* Is priority inheritance in effect?  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8017bf8:	687b      	ldr	r3, [r7, #4]
 8017bfa:	691b      	ldr	r3, [r3, #16]
 8017bfc:	2b01      	cmp	r3, #1
 8017bfe:	d11c      	bne.n	8017c3a <_tx_mutex_put+0x242>
                                   at the front of the suspension list.  */

#ifndef TX_NOT_INTERRUPTABLE

                                /* Temporarily disable preemption.  */
                                _tx_thread_preempt_disable++;
 8017c00:	4b2e      	ldr	r3, [pc, #184]	; (8017cbc <_tx_mutex_put+0x2c4>)
 8017c02:	681b      	ldr	r3, [r3, #0]
 8017c04:	3301      	adds	r3, #1
 8017c06:	4a2d      	ldr	r2, [pc, #180]	; (8017cbc <_tx_mutex_put+0x2c4>)
 8017c08:	6013      	str	r3, [r2, #0]
 8017c0a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8017c0e:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8017c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c12:	f383 8810 	msr	PRIMASK, r3
}
 8017c16:	bf00      	nop
                                do
                                {
                                    status =  _tx_mutex_prioritize(mutex_ptr);
                                } while (status != TX_SUCCESS);
#else
                                _tx_mutex_prioritize(mutex_ptr);
 8017c18:	6878      	ldr	r0, [r7, #4]
 8017c1a:	f7ff fd7d 	bl	8017718 <_tx_mutex_prioritize>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8017c1e:	f3ef 8310 	mrs	r3, PRIMASK
 8017c22:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 8017c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 8017c26:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 8017c28:	b672      	cpsid	i
    return(int_posture);
 8017c2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                TX_MUTEX_PUT_EXTENSION_1

#ifndef TX_NOT_INTERRUPTABLE

                                /* Disable interrupts.  */
                                TX_DISABLE
 8017c2c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                                /* Back off the preemption disable.  */
                                _tx_thread_preempt_disable--;
 8017c30:	4b22      	ldr	r3, [pc, #136]	; (8017cbc <_tx_mutex_put+0x2c4>)
 8017c32:	681b      	ldr	r3, [r3, #0]
 8017c34:	3b01      	subs	r3, #1
 8017c36:	4a21      	ldr	r2, [pc, #132]	; (8017cbc <_tx_mutex_put+0x2c4>)
 8017c38:	6013      	str	r3, [r2, #0]
#endif
                            }
                        }

                        /* Now determine if there are any threads still waiting on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 8017c3a:	687b      	ldr	r3, [r7, #4]
 8017c3c:	699b      	ldr	r3, [r3, #24]
 8017c3e:	2b00      	cmp	r3, #0
 8017c40:	d13e      	bne.n	8017cc0 <_tx_mutex_put+0x2c8>
                            /* No, there are no longer any threads waiting on the mutex.  */

#ifndef TX_NOT_INTERRUPTABLE

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8017c42:	4b1e      	ldr	r3, [pc, #120]	; (8017cbc <_tx_mutex_put+0x2c4>)
 8017c44:	681b      	ldr	r3, [r3, #0]
 8017c46:	3301      	adds	r3, #1
 8017c48:	4a1c      	ldr	r2, [pc, #112]	; (8017cbc <_tx_mutex_put+0x2c4>)
 8017c4a:	6013      	str	r3, [r2, #0]
 8017c4c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8017c50:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8017c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c54:	f383 8810 	msr	PRIMASK, r3
}
 8017c58:	bf00      	nop
                            /* Mutex is not owned, but it is possible that a thread that
                               caused a priority inheritance to occur is no longer waiting
                               on the mutex.  */

                            /* Setup the highest priority waiting thread.  */
                            mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 8017c5a:	687b      	ldr	r3, [r7, #4]
 8017c5c:	2220      	movs	r2, #32
 8017c5e:	629a      	str	r2, [r3, #40]	; 0x28

                            /* Determine if we need to restore priority.  */
                            if ((mutex_ptr -> tx_mutex_owner) -> tx_thread_priority != old_priority)
 8017c60:	687b      	ldr	r3, [r7, #4]
 8017c62:	68db      	ldr	r3, [r3, #12]
 8017c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017c66:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8017c6a:	429a      	cmp	r2, r3
 8017c6c:	d006      	beq.n	8017c7c <_tx_mutex_put+0x284>
                            {

                                /* Yes, restore the priority of thread.  */
                                _tx_mutex_priority_change(mutex_ptr -> tx_mutex_owner, old_priority);
 8017c6e:	687b      	ldr	r3, [r7, #4]
 8017c70:	68db      	ldr	r3, [r3, #12]
 8017c72:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8017c76:	4618      	mov	r0, r3
 8017c78:	f7ff fe00 	bl	801787c <_tx_mutex_priority_change>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8017c7c:	f3ef 8310 	mrs	r3, PRIMASK
 8017c80:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8017c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 8017c84:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8017c86:	b672      	cpsid	i
    return(int_posture);
 8017c88:	6a3b      	ldr	r3, [r7, #32]
                            }

#ifndef TX_NOT_INTERRUPTABLE

                            /* Disable interrupts again.  */
                            TX_DISABLE
 8017c8a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                            /* Back off the preemption disable.  */
                            _tx_thread_preempt_disable--;
 8017c8e:	4b0b      	ldr	r3, [pc, #44]	; (8017cbc <_tx_mutex_put+0x2c4>)
 8017c90:	681b      	ldr	r3, [r3, #0]
 8017c92:	3b01      	subs	r3, #1
 8017c94:	4a09      	ldr	r2, [pc, #36]	; (8017cbc <_tx_mutex_put+0x2c4>)
 8017c96:	6013      	str	r3, [r2, #0]
#endif

                            /* Set the mutex owner to NULL.  */
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 8017c98:	687b      	ldr	r3, [r7, #4]
 8017c9a:	2200      	movs	r2, #0
 8017c9c:	60da      	str	r2, [r3, #12]
 8017c9e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8017ca2:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8017ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ca6:	f383 8810 	msr	PRIMASK, r3
}
 8017caa:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Check for preemption.  */
                            _tx_thread_system_preempt_check();
 8017cac:	f000 fda2 	bl	80187f4 <_tx_thread_system_preempt_check>

                            /* Set status to success.  */
                            status =  TX_SUCCESS;
 8017cb0:	2300      	movs	r3, #0
 8017cb2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8017cb6:	e0bd      	b.n	8017e34 <_tx_mutex_put+0x43c>
 8017cb8:	2001524c 	.word	0x2001524c
 8017cbc:	200152e4 	.word	0x200152e4
                        }
                        else
                        {

                            /* Pickup the thread at the front of the suspension list.  */
                            thread_ptr =  mutex_ptr -> tx_mutex_suspension_list;
 8017cc0:	687b      	ldr	r3, [r7, #4]
 8017cc2:	699b      	ldr	r3, [r3, #24]
 8017cc4:	67fb      	str	r3, [r7, #124]	; 0x7c

                            /* Save the previous ownership information, if inheritance is
                               in effect.  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8017cc6:	687b      	ldr	r3, [r7, #4]
 8017cc8:	691b      	ldr	r3, [r3, #16]
 8017cca:	2b01      	cmp	r3, #1
 8017ccc:	d10a      	bne.n	8017ce4 <_tx_mutex_put+0x2ec>
                            {

                                /* Remember the old mutex owner.  */
                                old_owner =  mutex_ptr -> tx_mutex_owner;
 8017cce:	687b      	ldr	r3, [r7, #4]
 8017cd0:	68db      	ldr	r3, [r3, #12]
 8017cd2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                                /* Setup owner thread priority information.  */
                                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 8017cd6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8017cd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017cda:	687b      	ldr	r3, [r7, #4]
 8017cdc:	615a      	str	r2, [r3, #20]

                                /* Setup the highest priority waiting thread.  */
                                mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 8017cde:	687b      	ldr	r3, [r7, #4]
 8017ce0:	2220      	movs	r2, #32
 8017ce2:	629a      	str	r2, [r3, #40]	; 0x28
                            }

                            /* Determine how many mutexes are owned by this thread.  */
                            owned_count =  thread_ptr -> tx_thread_owned_mutex_count;
 8017ce4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8017ce6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8017cea:	673b      	str	r3, [r7, #112]	; 0x70

                            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
                            if (owned_count == ((UINT) 0))
 8017cec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8017cee:	2b00      	cmp	r3, #0
 8017cf0:	d10a      	bne.n	8017d08 <_tx_mutex_put+0x310>
                            {

                                /* The owned mutex list is empty.  Add mutex to empty list.  */
                                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 8017cf2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8017cf4:	687a      	ldr	r2, [r7, #4]
 8017cf6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
 8017cfa:	687b      	ldr	r3, [r7, #4]
 8017cfc:	687a      	ldr	r2, [r7, #4]
 8017cfe:	62da      	str	r2, [r3, #44]	; 0x2c
                                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 8017d00:	687b      	ldr	r3, [r7, #4]
 8017d02:	687a      	ldr	r2, [r7, #4]
 8017d04:	631a      	str	r2, [r3, #48]	; 0x30
 8017d06:	e016      	b.n	8017d36 <_tx_mutex_put+0x33e>
                            {

                                /* Non-empty list. Link up the mutex.  */

                                /* Pickup tail pointer.  */
                                next_mutex =                            thread_ptr -> tx_thread_owned_mutex_list;
 8017d08:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8017d0a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8017d0e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                                previous_mutex =                        next_mutex -> tx_mutex_owned_previous;
 8017d12:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8017d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017d18:	677b      	str	r3, [r7, #116]	; 0x74

                                /* Place the owned mutex in the list.  */
                                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 8017d1a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8017d1e:	687a      	ldr	r2, [r7, #4]
 8017d20:	631a      	str	r2, [r3, #48]	; 0x30
                                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 8017d22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8017d24:	687a      	ldr	r2, [r7, #4]
 8017d26:	62da      	str	r2, [r3, #44]	; 0x2c

                                /* Setup this mutex's next and previous created links.  */
                                mutex_ptr -> tx_mutex_owned_previous =   previous_mutex;
 8017d28:	687b      	ldr	r3, [r7, #4]
 8017d2a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8017d2c:	631a      	str	r2, [r3, #48]	; 0x30
                                mutex_ptr -> tx_mutex_owned_next =       next_mutex;
 8017d2e:	687b      	ldr	r3, [r7, #4]
 8017d30:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8017d34:	62da      	str	r2, [r3, #44]	; 0x2c
                            }

                            /* Increment the number of mutexes owned counter.  */
                            thread_ptr -> tx_thread_owned_mutex_count =  owned_count + ((UINT) 1);
 8017d36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8017d38:	1c5a      	adds	r2, r3, #1
 8017d3a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8017d3c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

                            /* Mark the Mutex as owned and fill in the corresponding information.  */
                            mutex_ptr -> tx_mutex_ownership_count =  (UINT) 1;
 8017d40:	687b      	ldr	r3, [r7, #4]
 8017d42:	2201      	movs	r2, #1
 8017d44:	609a      	str	r2, [r3, #8]
                            mutex_ptr -> tx_mutex_owner =            thread_ptr;
 8017d46:	687b      	ldr	r3, [r7, #4]
 8017d48:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8017d4a:	60da      	str	r2, [r3, #12]

                            /* Remove the suspended thread from the list.  */

                            /* Decrement the suspension count.  */
                            mutex_ptr -> tx_mutex_suspended_count--;
 8017d4c:	687b      	ldr	r3, [r7, #4]
 8017d4e:	69db      	ldr	r3, [r3, #28]
 8017d50:	1e5a      	subs	r2, r3, #1
 8017d52:	687b      	ldr	r3, [r7, #4]
 8017d54:	61da      	str	r2, [r3, #28]

                            /* Pickup the suspended count.  */
                            suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 8017d56:	687b      	ldr	r3, [r7, #4]
 8017d58:	69db      	ldr	r3, [r3, #28]
 8017d5a:	66fb      	str	r3, [r7, #108]	; 0x6c

                            /* See if this is the only suspended thread on the list.  */
                            if (suspended_count == TX_NO_SUSPENSIONS)
 8017d5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017d5e:	2b00      	cmp	r3, #0
 8017d60:	d103      	bne.n	8017d6a <_tx_mutex_put+0x372>
                            {

                                /* Yes, the only suspended thread.  */

                                /* Update the head pointer.  */
                                mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 8017d62:	687b      	ldr	r3, [r7, #4]
 8017d64:	2200      	movs	r2, #0
 8017d66:	619a      	str	r2, [r3, #24]
 8017d68:	e00e      	b.n	8017d88 <_tx_mutex_put+0x390>
                            {

                                /* At least one more thread is on the same expiration list.  */

                                /* Update the list head pointer.  */
                                next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 8017d6a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8017d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017d6e:	66bb      	str	r3, [r7, #104]	; 0x68
                                mutex_ptr -> tx_mutex_suspension_list =        next_thread;
 8017d70:	687b      	ldr	r3, [r7, #4]
 8017d72:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8017d74:	619a      	str	r2, [r3, #24]

                                /* Update the links of the adjacent threads.  */
                                previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 8017d76:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8017d78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017d7a:	667b      	str	r3, [r7, #100]	; 0x64
                                next_thread -> tx_thread_suspended_previous =  previous_thread;
 8017d7c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017d7e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8017d80:	675a      	str	r2, [r3, #116]	; 0x74
                                previous_thread -> tx_thread_suspended_next =  next_thread;
 8017d82:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017d84:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8017d86:	671a      	str	r2, [r3, #112]	; 0x70
                            }

                            /* Prepare for resumption of the first thread.  */

                            /* Clear cleanup routine to avoid timeout.  */
                            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8017d88:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8017d8a:	2200      	movs	r2, #0
 8017d8c:	669a      	str	r2, [r3, #104]	; 0x68

                            /* Put return status into the thread control block.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8017d8e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8017d90:	2200      	movs	r2, #0
 8017d92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Restore interrupts.  */
                            TX_RESTORE
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8017d96:	4b2a      	ldr	r3, [pc, #168]	; (8017e40 <_tx_mutex_put+0x448>)
 8017d98:	681b      	ldr	r3, [r3, #0]
 8017d9a:	3301      	adds	r3, #1
 8017d9c:	4a28      	ldr	r2, [pc, #160]	; (8017e40 <_tx_mutex_put+0x448>)
 8017d9e:	6013      	str	r3, [r2, #0]
 8017da0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8017da4:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8017da6:	69fb      	ldr	r3, [r7, #28]
 8017da8:	f383 8810 	msr	PRIMASK, r3
}
 8017dac:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Determine if priority inheritance is enabled for this mutex.  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8017dae:	687b      	ldr	r3, [r7, #4]
 8017db0:	691b      	ldr	r3, [r3, #16]
 8017db2:	2b01      	cmp	r3, #1
 8017db4:	d12d      	bne.n	8017e12 <_tx_mutex_put+0x41a>
                            {

                                /* Yes, priority inheritance is requested.  */

                                /* Determine if there are any more threads still suspended on the mutex.  */
                                if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 8017db6:	687b      	ldr	r3, [r7, #4]
 8017db8:	69db      	ldr	r3, [r3, #28]
 8017dba:	2b00      	cmp	r3, #0
 8017dbc:	d01c      	beq.n	8017df8 <_tx_mutex_put+0x400>
                                    do
                                    {
                                        status =  _tx_mutex_prioritize(mutex_ptr);
                                    } while (status != TX_SUCCESS);
#else
                                    _tx_mutex_prioritize(mutex_ptr);
 8017dbe:	6878      	ldr	r0, [r7, #4]
 8017dc0:	f7ff fcaa 	bl	8017718 <_tx_mutex_prioritize>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8017dc4:	f3ef 8310 	mrs	r3, PRIMASK
 8017dc8:	61bb      	str	r3, [r7, #24]
    return(posture);
 8017dca:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8017dcc:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8017dce:	b672      	cpsid	i
    return(int_posture);
 8017dd0:	697b      	ldr	r3, [r7, #20]

                                    /* Optional processing extension.  */
                                    TX_MUTEX_PUT_EXTENSION_2

                                    /* Disable interrupts.  */
                                    TX_DISABLE
 8017dd2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                                    /* Determine if there still are threads suspended for this mutex.  */
                                    suspended_thread =  mutex_ptr -> tx_mutex_suspension_list;
 8017dd6:	687b      	ldr	r3, [r7, #4]
 8017dd8:	699b      	ldr	r3, [r3, #24]
 8017dda:	663b      	str	r3, [r7, #96]	; 0x60
                                    if (suspended_thread != TX_NULL)
 8017ddc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8017dde:	2b00      	cmp	r3, #0
 8017de0:	d003      	beq.n	8017dea <_tx_mutex_put+0x3f2>
                                    {

                                        /* Setup the highest priority thread waiting on this mutex.  */
                                        mutex_ptr -> tx_mutex_highest_priority_waiting =  suspended_thread -> tx_thread_priority;
 8017de2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8017de4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017de6:	687b      	ldr	r3, [r7, #4]
 8017de8:	629a      	str	r2, [r3, #40]	; 0x28
 8017dea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8017dee:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8017df0:	693b      	ldr	r3, [r7, #16]
 8017df2:	f383 8810 	msr	PRIMASK, r3
}
 8017df6:	bf00      	nop

                                /* Restore previous priority needs to be restored after priority
                                   inheritance.  */

                                /* Is the priority different?  */
                                if (old_owner -> tx_thread_priority != old_priority)
 8017df8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8017dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017dfe:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8017e02:	429a      	cmp	r2, r3
 8017e04:	d005      	beq.n	8017e12 <_tx_mutex_put+0x41a>
                                {

                                    /* Restore the priority of thread.  */
                                    _tx_mutex_priority_change(old_owner, old_priority);
 8017e06:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8017e0a:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8017e0e:	f7ff fd35 	bl	801787c <_tx_mutex_priority_change>
                                }
                            }

                            /* Resume thread.  */
                            _tx_thread_system_resume(thread_ptr);
 8017e12:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8017e14:	f000 fd28 	bl	8018868 <_tx_thread_system_resume>
#endif

                            /* Return a successful status.  */
                            status =  TX_SUCCESS;
 8017e18:	2300      	movs	r3, #0
 8017e1a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8017e1e:	e009      	b.n	8017e34 <_tx_mutex_put+0x43c>
 8017e20:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8017e24:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8017e26:	68fb      	ldr	r3, [r7, #12]
 8017e28:	f383 8810 	msr	PRIMASK, r3
}
 8017e2c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Caller does not own the mutex.  */
        status =  TX_NOT_OWNED;
 8017e2e:	231e      	movs	r3, #30
 8017e30:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    }

    /* Return the completion status.  */
    return(status);
 8017e34:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
}
 8017e38:	4618      	mov	r0, r3
 8017e3a:	3798      	adds	r7, #152	; 0x98
 8017e3c:	46bd      	mov	sp, r7
 8017e3e:	bd80      	pop	{r7, pc}
 8017e40:	200152e4 	.word	0x200152e4

08017e44 <_tx_semaphore_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_semaphore_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 8017e44:	b580      	push	{r7, lr}
 8017e46:	b08e      	sub	sp, #56	; 0x38
 8017e48:	af00      	add	r7, sp, #0
 8017e4a:	6078      	str	r0, [r7, #4]
 8017e4c:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8017e4e:	f3ef 8310 	mrs	r3, PRIMASK
 8017e52:	623b      	str	r3, [r7, #32]
    return(posture);
 8017e54:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8017e56:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8017e58:	b672      	cpsid	i
    return(int_posture);
 8017e5a:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the semaphore.  */
    TX_DISABLE
 8017e5c:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_semaphore_cleanup))
 8017e5e:	687b      	ldr	r3, [r7, #4]
 8017e60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8017e62:	4a33      	ldr	r2, [pc, #204]	; (8017f30 <_tx_semaphore_cleanup+0xec>)
 8017e64:	4293      	cmp	r3, r2
 8017e66:	d158      	bne.n	8017f1a <_tx_semaphore_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8017e68:	687b      	ldr	r3, [r7, #4]
 8017e6a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8017e6e:	683a      	ldr	r2, [r7, #0]
 8017e70:	429a      	cmp	r2, r3
 8017e72:	d152      	bne.n	8017f1a <_tx_semaphore_cleanup+0xd6>
        {

            /* Setup pointer to semaphore control block.  */
            semaphore_ptr =  TX_VOID_TO_SEMAPHORE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8017e74:	687b      	ldr	r3, [r7, #4]
 8017e76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017e78:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL semaphore pointer.  */
            if (semaphore_ptr != TX_NULL)
 8017e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e7c:	2b00      	cmp	r3, #0
 8017e7e:	d04c      	beq.n	8017f1a <_tx_semaphore_cleanup+0xd6>
            {

                /* Check for a valid semaphore ID.  */
                if (semaphore_ptr -> tx_semaphore_id == TX_SEMAPHORE_ID)
 8017e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e82:	681b      	ldr	r3, [r3, #0]
 8017e84:	4a2b      	ldr	r2, [pc, #172]	; (8017f34 <_tx_semaphore_cleanup+0xf0>)
 8017e86:	4293      	cmp	r3, r2
 8017e88:	d147      	bne.n	8017f1a <_tx_semaphore_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (semaphore_ptr -> tx_semaphore_suspended_count != TX_NO_SUSPENSIONS)
 8017e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e8c:	691b      	ldr	r3, [r3, #16]
 8017e8e:	2b00      	cmp	r3, #0
 8017e90:	d043      	beq.n	8017f1a <_tx_semaphore_cleanup+0xd6>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8017e92:	687b      	ldr	r3, [r7, #4]
 8017e94:	2200      	movs	r2, #0
 8017e96:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspended count.  */
                        semaphore_ptr -> tx_semaphore_suspended_count--;
 8017e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e9a:	691b      	ldr	r3, [r3, #16]
 8017e9c:	1e5a      	subs	r2, r3, #1
 8017e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ea0:	611a      	str	r2, [r3, #16]

                        /* Pickup the suspended count.  */
                        suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 8017ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ea4:	691b      	ldr	r3, [r3, #16]
 8017ea6:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8017ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017eaa:	2b00      	cmp	r3, #0
 8017eac:	d103      	bne.n	8017eb6 <_tx_semaphore_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 8017eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017eb0:	2200      	movs	r2, #0
 8017eb2:	60da      	str	r2, [r3, #12]
 8017eb4:	e013      	b.n	8017ede <_tx_semaphore_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 8017eb6:	687b      	ldr	r3, [r7, #4]
 8017eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017eba:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8017ebc:	687b      	ldr	r3, [r7, #4]
 8017ebe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017ec0:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8017ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ec4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017ec6:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8017ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017eca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017ecc:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (semaphore_ptr -> tx_semaphore_suspension_list == thread_ptr)
 8017ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ed0:	68db      	ldr	r3, [r3, #12]
 8017ed2:	687a      	ldr	r2, [r7, #4]
 8017ed4:	429a      	cmp	r2, r3
 8017ed6:	d102      	bne.n	8017ede <_tx_semaphore_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 8017ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017eda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017edc:	60da      	str	r2, [r3, #12]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_SEMAPHORE_SUSP)
 8017ede:	687b      	ldr	r3, [r7, #4]
 8017ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017ee2:	2b06      	cmp	r3, #6
 8017ee4:	d119      	bne.n	8017f1a <_tx_semaphore_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            semaphore_ptr -> tx_semaphore_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_INSTANCE;
 8017ee6:	687b      	ldr	r3, [r7, #4]
 8017ee8:	220d      	movs	r2, #13
 8017eea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8017eee:	4b12      	ldr	r3, [pc, #72]	; (8017f38 <_tx_semaphore_cleanup+0xf4>)
 8017ef0:	681b      	ldr	r3, [r3, #0]
 8017ef2:	3301      	adds	r3, #1
 8017ef4:	4a10      	ldr	r2, [pc, #64]	; (8017f38 <_tx_semaphore_cleanup+0xf4>)
 8017ef6:	6013      	str	r3, [r2, #0]
 8017ef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017efa:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8017efc:	693b      	ldr	r3, [r7, #16]
 8017efe:	f383 8810 	msr	PRIMASK, r3
}
 8017f02:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 8017f04:	6878      	ldr	r0, [r7, #4]
 8017f06:	f000 fcaf 	bl	8018868 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8017f0a:	f3ef 8310 	mrs	r3, PRIMASK
 8017f0e:	61bb      	str	r3, [r7, #24]
    return(posture);
 8017f10:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8017f12:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8017f14:	b672      	cpsid	i
    return(int_posture);
 8017f16:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 8017f18:	637b      	str	r3, [r7, #52]	; 0x34
 8017f1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017f1c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8017f1e:	68fb      	ldr	r3, [r7, #12]
 8017f20:	f383 8810 	msr	PRIMASK, r3
}
 8017f24:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8017f26:	bf00      	nop
 8017f28:	3738      	adds	r7, #56	; 0x38
 8017f2a:	46bd      	mov	sp, r7
 8017f2c:	bd80      	pop	{r7, pc}
 8017f2e:	bf00      	nop
 8017f30:	08017e45 	.word	0x08017e45
 8017f34:	53454d41 	.word	0x53454d41
 8017f38:	200152e4 	.word	0x200152e4

08017f3c <_tx_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count)
{
 8017f3c:	b580      	push	{r7, lr}
 8017f3e:	b08a      	sub	sp, #40	; 0x28
 8017f40:	af00      	add	r7, sp, #0
 8017f42:	60f8      	str	r0, [r7, #12]
 8017f44:	60b9      	str	r1, [r7, #8]
 8017f46:	607a      	str	r2, [r7, #4]
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Initialize semaphore control block to all zeros.  */
    TX_MEMSET(semaphore_ptr, 0, (sizeof(TX_SEMAPHORE)));
 8017f48:	221c      	movs	r2, #28
 8017f4a:	2100      	movs	r1, #0
 8017f4c:	68f8      	ldr	r0, [r7, #12]
 8017f4e:	f001 fe53 	bl	8019bf8 <memset>

    /* Setup the basic semaphore fields.  */
    semaphore_ptr -> tx_semaphore_name =             name_ptr;
 8017f52:	68fb      	ldr	r3, [r7, #12]
 8017f54:	68ba      	ldr	r2, [r7, #8]
 8017f56:	605a      	str	r2, [r3, #4]
    semaphore_ptr -> tx_semaphore_count =            initial_count;
 8017f58:	68fb      	ldr	r3, [r7, #12]
 8017f5a:	687a      	ldr	r2, [r7, #4]
 8017f5c:	609a      	str	r2, [r3, #8]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8017f5e:	f3ef 8310 	mrs	r3, PRIMASK
 8017f62:	61bb      	str	r3, [r7, #24]
    return(posture);
 8017f64:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8017f66:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8017f68:	b672      	cpsid	i
    return(int_posture);
 8017f6a:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the semaphore on the created list.  */
    TX_DISABLE
 8017f6c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the semaphore ID to make it valid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_SEMAPHORE_ID;
 8017f6e:	68fb      	ldr	r3, [r7, #12]
 8017f70:	4a18      	ldr	r2, [pc, #96]	; (8017fd4 <_tx_semaphore_create+0x98>)
 8017f72:	601a      	str	r2, [r3, #0]

    /* Place the semaphore on the list of created semaphores.  First,
       check for an empty list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 8017f74:	4b18      	ldr	r3, [pc, #96]	; (8017fd8 <_tx_semaphore_create+0x9c>)
 8017f76:	681b      	ldr	r3, [r3, #0]
 8017f78:	2b00      	cmp	r3, #0
 8017f7a:	d109      	bne.n	8017f90 <_tx_semaphore_create+0x54>
    {

        /* The created semaphore list is empty.  Add semaphore to empty list.  */
        _tx_semaphore_created_ptr =                       semaphore_ptr;
 8017f7c:	4a17      	ldr	r2, [pc, #92]	; (8017fdc <_tx_semaphore_create+0xa0>)
 8017f7e:	68fb      	ldr	r3, [r7, #12]
 8017f80:	6013      	str	r3, [r2, #0]
        semaphore_ptr -> tx_semaphore_created_next =      semaphore_ptr;
 8017f82:	68fb      	ldr	r3, [r7, #12]
 8017f84:	68fa      	ldr	r2, [r7, #12]
 8017f86:	615a      	str	r2, [r3, #20]
        semaphore_ptr -> tx_semaphore_created_previous =  semaphore_ptr;
 8017f88:	68fb      	ldr	r3, [r7, #12]
 8017f8a:	68fa      	ldr	r2, [r7, #12]
 8017f8c:	619a      	str	r2, [r3, #24]
 8017f8e:	e011      	b.n	8017fb4 <_tx_semaphore_create+0x78>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_semaphore =      _tx_semaphore_created_ptr;
 8017f90:	4b12      	ldr	r3, [pc, #72]	; (8017fdc <_tx_semaphore_create+0xa0>)
 8017f92:	681b      	ldr	r3, [r3, #0]
 8017f94:	623b      	str	r3, [r7, #32]
        previous_semaphore =  next_semaphore -> tx_semaphore_created_previous;
 8017f96:	6a3b      	ldr	r3, [r7, #32]
 8017f98:	699b      	ldr	r3, [r3, #24]
 8017f9a:	61fb      	str	r3, [r7, #28]

        /* Place the new semaphore in the list.  */
        next_semaphore -> tx_semaphore_created_previous =  semaphore_ptr;
 8017f9c:	6a3b      	ldr	r3, [r7, #32]
 8017f9e:	68fa      	ldr	r2, [r7, #12]
 8017fa0:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  semaphore_ptr;
 8017fa2:	69fb      	ldr	r3, [r7, #28]
 8017fa4:	68fa      	ldr	r2, [r7, #12]
 8017fa6:	615a      	str	r2, [r3, #20]

        /* Setup this semaphore's next and previous created links.  */
        semaphore_ptr -> tx_semaphore_created_previous =  previous_semaphore;
 8017fa8:	68fb      	ldr	r3, [r7, #12]
 8017faa:	69fa      	ldr	r2, [r7, #28]
 8017fac:	619a      	str	r2, [r3, #24]
        semaphore_ptr -> tx_semaphore_created_next =      next_semaphore;
 8017fae:	68fb      	ldr	r3, [r7, #12]
 8017fb0:	6a3a      	ldr	r2, [r7, #32]
 8017fb2:	615a      	str	r2, [r3, #20]
    }

    /* Increment the created count.  */
    _tx_semaphore_created_count++;
 8017fb4:	4b08      	ldr	r3, [pc, #32]	; (8017fd8 <_tx_semaphore_create+0x9c>)
 8017fb6:	681b      	ldr	r3, [r3, #0]
 8017fb8:	3301      	adds	r3, #1
 8017fba:	4a07      	ldr	r2, [pc, #28]	; (8017fd8 <_tx_semaphore_create+0x9c>)
 8017fbc:	6013      	str	r3, [r2, #0]
 8017fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fc0:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8017fc2:	693b      	ldr	r3, [r7, #16]
 8017fc4:	f383 8810 	msr	PRIMASK, r3
}
 8017fc8:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8017fca:	2300      	movs	r3, #0
}
 8017fcc:	4618      	mov	r0, r3
 8017fce:	3728      	adds	r7, #40	; 0x28
 8017fd0:	46bd      	mov	sp, r7
 8017fd2:	bd80      	pop	{r7, pc}
 8017fd4:	53454d41 	.word	0x53454d41
 8017fd8:	20015218 	.word	0x20015218
 8017fdc:	20015214 	.word	0x20015214

08017fe0 <_tx_semaphore_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_delete(TX_SEMAPHORE *semaphore_ptr)
{
 8017fe0:	b580      	push	{r7, lr}
 8017fe2:	b092      	sub	sp, #72	; 0x48
 8017fe4:	af00      	add	r7, sp, #0
 8017fe6:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8017fe8:	f3ef 8310 	mrs	r3, PRIMASK
 8017fec:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8017fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8017ff0:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8017ff2:	b672      	cpsid	i
    return(int_posture);
 8017ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Disable interrupts to remove the semaphore from the created list.  */
    TX_DISABLE
 8017ff6:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_DELETE_INSERT

    /* Clear the semaphore ID to make it invalid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_CLEAR_ID;
 8017ff8:	687b      	ldr	r3, [r7, #4]
 8017ffa:	2200      	movs	r2, #0
 8017ffc:	601a      	str	r2, [r3, #0]

    /* Decrement the number of semaphores.  */
    _tx_semaphore_created_count--;
 8017ffe:	4b3d      	ldr	r3, [pc, #244]	; (80180f4 <_tx_semaphore_delete+0x114>)
 8018000:	681b      	ldr	r3, [r3, #0]
 8018002:	3b01      	subs	r3, #1
 8018004:	4a3b      	ldr	r2, [pc, #236]	; (80180f4 <_tx_semaphore_delete+0x114>)
 8018006:	6013      	str	r3, [r2, #0]

    /* See if the semaphore is the only one on the list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 8018008:	4b3a      	ldr	r3, [pc, #232]	; (80180f4 <_tx_semaphore_delete+0x114>)
 801800a:	681b      	ldr	r3, [r3, #0]
 801800c:	2b00      	cmp	r3, #0
 801800e:	d103      	bne.n	8018018 <_tx_semaphore_delete+0x38>
    {

        /* Only created semaphore, just set the created list to NULL.  */
        _tx_semaphore_created_ptr =  TX_NULL;
 8018010:	4b39      	ldr	r3, [pc, #228]	; (80180f8 <_tx_semaphore_delete+0x118>)
 8018012:	2200      	movs	r2, #0
 8018014:	601a      	str	r2, [r3, #0]
 8018016:	e013      	b.n	8018040 <_tx_semaphore_delete+0x60>
    }
    else
    {

        /* Link-up the neighbors.  */
        next_semaphore =                                   semaphore_ptr -> tx_semaphore_created_next;
 8018018:	687b      	ldr	r3, [r7, #4]
 801801a:	695b      	ldr	r3, [r3, #20]
 801801c:	63bb      	str	r3, [r7, #56]	; 0x38
        previous_semaphore =                               semaphore_ptr -> tx_semaphore_created_previous;
 801801e:	687b      	ldr	r3, [r7, #4]
 8018020:	699b      	ldr	r3, [r3, #24]
 8018022:	637b      	str	r3, [r7, #52]	; 0x34
        next_semaphore -> tx_semaphore_created_previous =  previous_semaphore;
 8018024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018026:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8018028:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  next_semaphore;
 801802a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801802c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801802e:	615a      	str	r2, [r3, #20]

        /* See if we have to update the created list head pointer.  */
        if (_tx_semaphore_created_ptr == semaphore_ptr)
 8018030:	4b31      	ldr	r3, [pc, #196]	; (80180f8 <_tx_semaphore_delete+0x118>)
 8018032:	681b      	ldr	r3, [r3, #0]
 8018034:	687a      	ldr	r2, [r7, #4]
 8018036:	429a      	cmp	r2, r3
 8018038:	d102      	bne.n	8018040 <_tx_semaphore_delete+0x60>
        {

            /* Yes, move the head pointer to the next link. */
            _tx_semaphore_created_ptr =  next_semaphore;
 801803a:	4a2f      	ldr	r2, [pc, #188]	; (80180f8 <_tx_semaphore_delete+0x118>)
 801803c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801803e:	6013      	str	r3, [r2, #0]
        }
    }

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8018040:	4b2e      	ldr	r3, [pc, #184]	; (80180fc <_tx_semaphore_delete+0x11c>)
 8018042:	681b      	ldr	r3, [r3, #0]
 8018044:	3301      	adds	r3, #1
 8018046:	4a2d      	ldr	r2, [pc, #180]	; (80180fc <_tx_semaphore_delete+0x11c>)
 8018048:	6013      	str	r3, [r2, #0]

    /* Pickup the suspension information.  */
    thread_ptr =                                     semaphore_ptr -> tx_semaphore_suspension_list;
 801804a:	687b      	ldr	r3, [r7, #4]
 801804c:	68db      	ldr	r3, [r3, #12]
 801804e:	647b      	str	r3, [r7, #68]	; 0x44
    semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 8018050:	687b      	ldr	r3, [r7, #4]
 8018052:	2200      	movs	r2, #0
 8018054:	60da      	str	r2, [r3, #12]
    suspended_count =                                semaphore_ptr -> tx_semaphore_suspended_count;
 8018056:	687b      	ldr	r3, [r7, #4]
 8018058:	691b      	ldr	r3, [r3, #16]
 801805a:	643b      	str	r3, [r7, #64]	; 0x40
    semaphore_ptr -> tx_semaphore_suspended_count =  TX_NO_SUSPENSIONS;
 801805c:	687b      	ldr	r3, [r7, #4]
 801805e:	2200      	movs	r2, #0
 8018060:	611a      	str	r2, [r3, #16]
 8018062:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018064:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8018066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018068:	f383 8810 	msr	PRIMASK, r3
}
 801806c:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the semaphore list to resume any and all threads suspended
       on this semaphore.  */
    while (suspended_count != TX_NO_SUSPENSIONS)
 801806e:	e024      	b.n	80180ba <_tx_semaphore_delete+0xda>
    {

        /* Decrement the suspension count.  */
        suspended_count--;
 8018070:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018072:	3b01      	subs	r3, #1
 8018074:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8018076:	f3ef 8310 	mrs	r3, PRIMASK
 801807a:	61fb      	str	r3, [r7, #28]
    return(posture);
 801807c:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 801807e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8018080:	b672      	cpsid	i
    return(int_posture);
 8018082:	69bb      	ldr	r3, [r7, #24]

        /* Lockout interrupts.  */
        TX_DISABLE
 8018084:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Clear the cleanup pointer, this prevents the timeout from doing
           anything.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8018086:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018088:	2200      	movs	r2, #0
 801808a:	669a      	str	r2, [r3, #104]	; 0x68

        /* Set the return status in the thread to TX_DELETED.  */
        thread_ptr -> tx_thread_suspend_status =  TX_DELETED;
 801808c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801808e:	2201      	movs	r2, #1
 8018090:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Move the thread pointer ahead.  */
        next_thread =  thread_ptr -> tx_thread_suspended_next;
 8018094:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018096:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018098:	633b      	str	r3, [r7, #48]	; 0x30
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption again.  */
        _tx_thread_preempt_disable++;
 801809a:	4b18      	ldr	r3, [pc, #96]	; (80180fc <_tx_semaphore_delete+0x11c>)
 801809c:	681b      	ldr	r3, [r3, #0]
 801809e:	3301      	adds	r3, #1
 80180a0:	4a16      	ldr	r2, [pc, #88]	; (80180fc <_tx_semaphore_delete+0x11c>)
 80180a2:	6013      	str	r3, [r2, #0]
 80180a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80180a6:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80180a8:	6a3b      	ldr	r3, [r7, #32]
 80180aa:	f383 8810 	msr	PRIMASK, r3
}
 80180ae:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 80180b0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80180b2:	f000 fbd9 	bl	8018868 <_tx_thread_system_resume>
#endif

        /* Move to next thread.  */
        thread_ptr =  next_thread;
 80180b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80180b8:	647b      	str	r3, [r7, #68]	; 0x44
    while (suspended_count != TX_NO_SUSPENSIONS)
 80180ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80180bc:	2b00      	cmp	r3, #0
 80180be:	d1d7      	bne.n	8018070 <_tx_semaphore_delete+0x90>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80180c0:	f3ef 8310 	mrs	r3, PRIMASK
 80180c4:	613b      	str	r3, [r7, #16]
    return(posture);
 80180c6:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 80180c8:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 80180ca:	b672      	cpsid	i
    return(int_posture);
 80180cc:	68fb      	ldr	r3, [r7, #12]

    /* Execute Port-Specific completion processing. If needed, it is typically defined in tx_port.h.  */
    TX_SEMAPHORE_DELETE_PORT_COMPLETION(semaphore_ptr)

    /* Disable interrupts.  */
    TX_DISABLE
 80180ce:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Release previous preempt disable.  */
    _tx_thread_preempt_disable--;
 80180d0:	4b0a      	ldr	r3, [pc, #40]	; (80180fc <_tx_semaphore_delete+0x11c>)
 80180d2:	681b      	ldr	r3, [r3, #0]
 80180d4:	3b01      	subs	r3, #1
 80180d6:	4a09      	ldr	r2, [pc, #36]	; (80180fc <_tx_semaphore_delete+0x11c>)
 80180d8:	6013      	str	r3, [r2, #0]
 80180da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80180dc:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80180de:	697b      	ldr	r3, [r7, #20]
 80180e0:	f383 8810 	msr	PRIMASK, r3
}
 80180e4:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 80180e6:	f000 fb85 	bl	80187f4 <_tx_thread_system_preempt_check>

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 80180ea:	2300      	movs	r3, #0
}
 80180ec:	4618      	mov	r0, r3
 80180ee:	3748      	adds	r7, #72	; 0x48
 80180f0:	46bd      	mov	sp, r7
 80180f2:	bd80      	pop	{r7, pc}
 80180f4:	20015218 	.word	0x20015218
 80180f8:	20015214 	.word	0x20015214
 80180fc:	200152e4 	.word	0x200152e4

08018100 <_tx_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 8018100:	b580      	push	{r7, lr}
 8018102:	b08e      	sub	sp, #56	; 0x38
 8018104:	af00      	add	r7, sp, #0
 8018106:	6078      	str	r0, [r7, #4]
 8018108:	6039      	str	r1, [r7, #0]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 801810a:	2300      	movs	r3, #0
 801810c:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801810e:	f3ef 8310 	mrs	r3, PRIMASK
 8018112:	623b      	str	r3, [r7, #32]
    return(posture);
 8018114:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8018116:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8018118:	b672      	cpsid	i
    return(int_posture);
 801811a:	69fb      	ldr	r3, [r7, #28]

    /* Disable interrupts to get an instance from the semaphore.  */
    TX_DISABLE
 801811c:	633b      	str	r3, [r7, #48]	; 0x30

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_GET_INSERT

    /* Determine if there is an instance of the semaphore.  */
    if (semaphore_ptr -> tx_semaphore_count != ((ULONG) 0))
 801811e:	687b      	ldr	r3, [r7, #4]
 8018120:	689b      	ldr	r3, [r3, #8]
 8018122:	2b00      	cmp	r3, #0
 8018124:	d00a      	beq.n	801813c <_tx_semaphore_get+0x3c>
    {

        /* Decrement the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count--;
 8018126:	687b      	ldr	r3, [r7, #4]
 8018128:	689b      	ldr	r3, [r3, #8]
 801812a:	1e5a      	subs	r2, r3, #1
 801812c:	687b      	ldr	r3, [r7, #4]
 801812e:	609a      	str	r2, [r3, #8]
 8018130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018132:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8018134:	69bb      	ldr	r3, [r7, #24]
 8018136:	f383 8810 	msr	PRIMASK, r3
}
 801813a:	e068      	b.n	801820e <_tx_semaphore_get+0x10e>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 801813c:	683b      	ldr	r3, [r7, #0]
 801813e:	2b00      	cmp	r3, #0
 8018140:	d05d      	beq.n	80181fe <_tx_semaphore_get+0xfe>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8018142:	4b35      	ldr	r3, [pc, #212]	; (8018218 <_tx_semaphore_get+0x118>)
 8018144:	681b      	ldr	r3, [r3, #0]
 8018146:	2b00      	cmp	r3, #0
 8018148:	d008      	beq.n	801815c <_tx_semaphore_get+0x5c>
 801814a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801814c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801814e:	697b      	ldr	r3, [r7, #20]
 8018150:	f383 8810 	msr	PRIMASK, r3
}
 8018154:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_NO_INSTANCE;
 8018156:	230d      	movs	r3, #13
 8018158:	637b      	str	r3, [r7, #52]	; 0x34
 801815a:	e058      	b.n	801820e <_tx_semaphore_get+0x10e>
            /* Increment the number of suspensions on this semaphore.  */
            semaphore_ptr -> tx_semaphore_performance_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 801815c:	4b2f      	ldr	r3, [pc, #188]	; (801821c <_tx_semaphore_get+0x11c>)
 801815e:	681b      	ldr	r3, [r3, #0]
 8018160:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_semaphore_cleanup);
 8018162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018164:	4a2e      	ldr	r2, [pc, #184]	; (8018220 <_tx_semaphore_get+0x120>)
 8018166:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this semaphore control
               block.  */
            thread_ptr -> tx_thread_suspend_control_block =  (VOID *) semaphore_ptr;
 8018168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801816a:	687a      	ldr	r2, [r7, #4]
 801816c:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 801816e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018170:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8018174:	1c5a      	adds	r2, r3, #1
 8018176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018178:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Setup suspension list.  */
            if (semaphore_ptr -> tx_semaphore_suspended_count == TX_NO_SUSPENSIONS)
 801817c:	687b      	ldr	r3, [r7, #4]
 801817e:	691b      	ldr	r3, [r3, #16]
 8018180:	2b00      	cmp	r3, #0
 8018182:	d109      	bne.n	8018198 <_tx_semaphore_get+0x98>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                semaphore_ptr -> tx_semaphore_suspension_list =         thread_ptr;
 8018184:	687b      	ldr	r3, [r7, #4]
 8018186:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018188:	60da      	str	r2, [r3, #12]
                thread_ptr -> tx_thread_suspended_next =                thread_ptr;
 801818a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801818c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801818e:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =            thread_ptr;
 8018190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018192:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018194:	675a      	str	r2, [r3, #116]	; 0x74
 8018196:	e011      	b.n	80181bc <_tx_semaphore_get+0xbc>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   semaphore_ptr -> tx_semaphore_suspension_list;
 8018198:	687b      	ldr	r3, [r7, #4]
 801819a:	68db      	ldr	r3, [r3, #12]
 801819c:	62bb      	str	r3, [r7, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 801819e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80181a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80181a2:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 80181a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80181a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80181a8:	627b      	str	r3, [r7, #36]	; 0x24
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 80181aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80181ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80181ae:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 80181b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80181b4:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 80181b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80181b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80181ba:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the number of suspensions.  */
            semaphore_ptr -> tx_semaphore_suspended_count++;
 80181bc:	687b      	ldr	r3, [r7, #4]
 80181be:	691b      	ldr	r3, [r3, #16]
 80181c0:	1c5a      	adds	r2, r3, #1
 80181c2:	687b      	ldr	r3, [r7, #4]
 80181c4:	611a      	str	r2, [r3, #16]

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SEMAPHORE_SUSP;
 80181c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80181c8:	2206      	movs	r2, #6
 80181ca:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80181cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80181ce:	2201      	movs	r2, #1
 80181d0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 80181d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80181d4:	683a      	ldr	r2, [r7, #0]
 80181d6:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 80181d8:	4b0f      	ldr	r3, [pc, #60]	; (8018218 <_tx_semaphore_get+0x118>)
 80181da:	681b      	ldr	r3, [r3, #0]
 80181dc:	3301      	adds	r3, #1
 80181de:	4a0e      	ldr	r2, [pc, #56]	; (8018218 <_tx_semaphore_get+0x118>)
 80181e0:	6013      	str	r3, [r2, #0]
 80181e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80181e4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80181e6:	693b      	ldr	r3, [r7, #16]
 80181e8:	f383 8810 	msr	PRIMASK, r3
}
 80181ec:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 80181ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80181f0:	f000 fc3a 	bl	8018a68 <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 80181f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80181f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80181fa:	637b      	str	r3, [r7, #52]	; 0x34
 80181fc:	e007      	b.n	801820e <_tx_semaphore_get+0x10e>
 80181fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018200:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8018202:	68fb      	ldr	r3, [r7, #12]
 8018204:	f383 8810 	msr	PRIMASK, r3
}
 8018208:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_NO_INSTANCE;
 801820a:	230d      	movs	r3, #13
 801820c:	637b      	str	r3, [r7, #52]	; 0x34
    }

    /* Return completion status.  */
    return(status);
 801820e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8018210:	4618      	mov	r0, r3
 8018212:	3738      	adds	r7, #56	; 0x38
 8018214:	46bd      	mov	sp, r7
 8018216:	bd80      	pop	{r7, pc}
 8018218:	200152e4 	.word	0x200152e4
 801821c:	2001524c 	.word	0x2001524c
 8018220:	08017e45 	.word	0x08017e45

08018224 <_tx_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 8018224:	b580      	push	{r7, lr}
 8018226:	b08c      	sub	sp, #48	; 0x30
 8018228:	af00      	add	r7, sp, #0
 801822a:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801822c:	f3ef 8310 	mrs	r3, PRIMASK
 8018230:	61bb      	str	r3, [r7, #24]
    return(posture);
 8018232:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8018234:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8018236:	b672      	cpsid	i
    return(int_posture);
 8018238:	697b      	ldr	r3, [r7, #20]
TX_THREAD       *next_thread;
TX_THREAD       *previous_thread;


    /* Disable interrupts to put an instance back to the semaphore.  */
    TX_DISABLE
 801823a:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_PUT_INSERT

    /* Pickup the number of suspended threads.  */
    suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 801823c:	687b      	ldr	r3, [r7, #4]
 801823e:	691b      	ldr	r3, [r3, #16]
 8018240:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Determine if there are any threads suspended on the semaphore.  */
    if (suspended_count == TX_NO_SUSPENSIONS)
 8018242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018244:	2b00      	cmp	r3, #0
 8018246:	d10a      	bne.n	801825e <_tx_semaphore_put+0x3a>
    {

        /* Increment the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count++;
 8018248:	687b      	ldr	r3, [r7, #4]
 801824a:	689b      	ldr	r3, [r3, #8]
 801824c:	1c5a      	adds	r2, r3, #1
 801824e:	687b      	ldr	r3, [r7, #4]
 8018250:	609a      	str	r2, [r3, #8]
 8018252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018254:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8018256:	693b      	ldr	r3, [r7, #16]
 8018258:	f383 8810 	msr	PRIMASK, r3
}
 801825c:	e033      	b.n	80182c6 <_tx_semaphore_put+0xa2>
    {

        /* A thread is suspended on this semaphore.  */

        /* Pickup the pointer to the first suspended thread.  */
        thread_ptr =  semaphore_ptr -> tx_semaphore_suspension_list;
 801825e:	687b      	ldr	r3, [r7, #4]
 8018260:	68db      	ldr	r3, [r3, #12]
 8018262:	627b      	str	r3, [r7, #36]	; 0x24

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        suspended_count--;
 8018264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018266:	3b01      	subs	r3, #1
 8018268:	62bb      	str	r3, [r7, #40]	; 0x28
        if (suspended_count == TX_NO_SUSPENSIONS)
 801826a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801826c:	2b00      	cmp	r3, #0
 801826e:	d103      	bne.n	8018278 <_tx_semaphore_put+0x54>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 8018270:	687b      	ldr	r3, [r7, #4]
 8018272:	2200      	movs	r2, #0
 8018274:	60da      	str	r2, [r3, #12]
 8018276:	e00e      	b.n	8018296 <_tx_semaphore_put+0x72>
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            next_thread =                                     thread_ptr -> tx_thread_suspended_next;
 8018278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801827a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801827c:	623b      	str	r3, [r7, #32]
            semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 801827e:	687b      	ldr	r3, [r7, #4]
 8018280:	6a3a      	ldr	r2, [r7, #32]
 8018282:	60da      	str	r2, [r3, #12]

            /* Update the links of the adjacent threads.  */
            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8018284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018286:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018288:	61fb      	str	r3, [r7, #28]
            next_thread -> tx_thread_suspended_previous =   previous_thread;
 801828a:	6a3b      	ldr	r3, [r7, #32]
 801828c:	69fa      	ldr	r2, [r7, #28]
 801828e:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =   next_thread;
 8018290:	69fb      	ldr	r3, [r7, #28]
 8018292:	6a3a      	ldr	r2, [r7, #32]
 8018294:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        semaphore_ptr -> tx_semaphore_suspended_count =  suspended_count;
 8018296:	687b      	ldr	r3, [r7, #4]
 8018298:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801829a:	611a      	str	r2, [r3, #16]

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 801829c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801829e:	2200      	movs	r2, #0
 80182a0:	669a      	str	r2, [r3, #104]	; 0x68
        /* Pickup the application notify function.  */
        semaphore_put_notify =  semaphore_ptr -> tx_semaphore_put_notify;
#endif

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 80182a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80182a4:	2200      	movs	r2, #0
 80182a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 80182aa:	4b09      	ldr	r3, [pc, #36]	; (80182d0 <_tx_semaphore_put+0xac>)
 80182ac:	681b      	ldr	r3, [r3, #0]
 80182ae:	3301      	adds	r3, #1
 80182b0:	4a07      	ldr	r2, [pc, #28]	; (80182d0 <_tx_semaphore_put+0xac>)
 80182b2:	6013      	str	r3, [r2, #0]
 80182b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80182b6:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80182b8:	68fb      	ldr	r3, [r7, #12]
 80182ba:	f383 8810 	msr	PRIMASK, r3
}
 80182be:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 80182c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80182c2:	f000 fad1 	bl	8018868 <_tx_thread_system_resume>
        }
#endif
    }

    /* Return successful completion.  */
    return(TX_SUCCESS);
 80182c6:	2300      	movs	r3, #0
}
 80182c8:	4618      	mov	r0, r3
 80182ca:	3730      	adds	r7, #48	; 0x30
 80182cc:	46bd      	mov	sp, r7
 80182ce:	bd80      	pop	{r7, pc}
 80182d0:	200152e4 	.word	0x200152e4

080182d4 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 80182d4:	b580      	push	{r7, lr}
 80182d6:	b092      	sub	sp, #72	; 0x48
 80182d8:	af00      	add	r7, sp, #0
 80182da:	60f8      	str	r0, [r7, #12]
 80182dc:	60b9      	str	r1, [r7, #8]
 80182de:	607a      	str	r2, [r7, #4]
 80182e0:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 80182e2:	2300      	movs	r3, #0
 80182e4:	643b      	str	r3, [r7, #64]	; 0x40
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 80182e6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80182e8:	21ef      	movs	r1, #239	; 0xef
 80182ea:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80182ec:	f001 fc84 	bl	8019bf8 <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 80182f0:	22b0      	movs	r2, #176	; 0xb0
 80182f2:	2100      	movs	r1, #0
 80182f4:	68f8      	ldr	r0, [r7, #12]
 80182f6:	f001 fc7f 	bl	8019bf8 <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 80182fa:	68fb      	ldr	r3, [r7, #12]
 80182fc:	68ba      	ldr	r2, [r7, #8]
 80182fe:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 8018300:	68fb      	ldr	r3, [r7, #12]
 8018302:	687a      	ldr	r2, [r7, #4]
 8018304:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 8018306:	68fb      	ldr	r3, [r7, #12]
 8018308:	683a      	ldr	r2, [r7, #0]
 801830a:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 801830c:	68fb      	ldr	r3, [r7, #12]
 801830e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8018310:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 8018312:	68fb      	ldr	r3, [r7, #12]
 8018314:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8018316:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 8018318:	68fb      	ldr	r3, [r7, #12]
 801831a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801831c:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 801831e:	68fb      	ldr	r3, [r7, #12]
 8018320:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8018322:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 8018326:	68fb      	ldr	r3, [r7, #12]
 8018328:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801832a:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 801832c:	68fb      	ldr	r3, [r7, #12]
 801832e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8018330:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 8018332:	68fb      	ldr	r3, [r7, #12]
 8018334:	2220      	movs	r2, #32
 8018336:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 801833a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801833c:	63fb      	str	r3, [r7, #60]	; 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 801833e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018340:	3b01      	subs	r3, #1
 8018342:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8018344:	4413      	add	r3, r2
 8018346:	63fb      	str	r3, [r7, #60]	; 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 8018348:	68fb      	ldr	r3, [r7, #12]
 801834a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801834c:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 801834e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8018350:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8018352:	429a      	cmp	r2, r3
 8018354:	d007      	beq.n	8018366 <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 8018356:	68fb      	ldr	r3, [r7, #12]
 8018358:	2200      	movs	r2, #0
 801835a:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 801835c:	68fb      	ldr	r3, [r7, #12]
 801835e:	2200      	movs	r2, #0
 8018360:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8018364:	e006      	b.n	8018374 <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 8018366:	68fb      	ldr	r3, [r7, #12]
 8018368:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801836a:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 801836c:	68fb      	ldr	r3, [r7, #12]
 801836e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8018370:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8018374:	68fb      	ldr	r3, [r7, #12]
 8018376:	2203      	movs	r2, #3
 8018378:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 801837a:	68fb      	ldr	r3, [r7, #12]
 801837c:	4a48      	ldr	r2, [pc, #288]	; (80184a0 <_tx_thread_create+0x1cc>)
 801837e:	655a      	str	r2, [r3, #84]	; 0x54
 8018380:	68fa      	ldr	r2, [r7, #12]
 8018382:	68fb      	ldr	r3, [r7, #12]
 8018384:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 8018386:	4947      	ldr	r1, [pc, #284]	; (80184a4 <_tx_thread_create+0x1d0>)
 8018388:	68f8      	ldr	r0, [r7, #12]
 801838a:	f7e8 f817 	bl	80003bc <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801838e:	f3ef 8310 	mrs	r3, PRIMASK
 8018392:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8018394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8018396:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8018398:	b672      	cpsid	i
    return(int_posture);
 801839a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 801839c:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 801839e:	68fb      	ldr	r3, [r7, #12]
 80183a0:	4a41      	ldr	r2, [pc, #260]	; (80184a8 <_tx_thread_create+0x1d4>)
 80183a2:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 80183a4:	4b41      	ldr	r3, [pc, #260]	; (80184ac <_tx_thread_create+0x1d8>)
 80183a6:	681b      	ldr	r3, [r3, #0]
 80183a8:	2b00      	cmp	r3, #0
 80183aa:	d10b      	bne.n	80183c4 <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 80183ac:	4a40      	ldr	r2, [pc, #256]	; (80184b0 <_tx_thread_create+0x1dc>)
 80183ae:	68fb      	ldr	r3, [r7, #12]
 80183b0:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 80183b2:	68fb      	ldr	r3, [r7, #12]
 80183b4:	68fa      	ldr	r2, [r7, #12]
 80183b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 80183ba:	68fb      	ldr	r3, [r7, #12]
 80183bc:	68fa      	ldr	r2, [r7, #12]
 80183be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80183c2:	e016      	b.n	80183f2 <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 80183c4:	4b3a      	ldr	r3, [pc, #232]	; (80184b0 <_tx_thread_create+0x1dc>)
 80183c6:	681b      	ldr	r3, [r3, #0]
 80183c8:	637b      	str	r3, [r7, #52]	; 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 80183ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80183cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80183d0:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 80183d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80183d4:	68fa      	ldr	r2, [r7, #12]
 80183d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 80183da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80183dc:	68fa      	ldr	r2, [r7, #12]
 80183de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 80183e2:	68fb      	ldr	r3, [r7, #12]
 80183e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80183e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 80183ea:	68fb      	ldr	r3, [r7, #12]
 80183ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80183ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 80183f2:	4b2e      	ldr	r3, [pc, #184]	; (80184ac <_tx_thread_create+0x1d8>)
 80183f4:	681b      	ldr	r3, [r3, #0]
 80183f6:	3301      	adds	r3, #1
 80183f8:	4a2c      	ldr	r2, [pc, #176]	; (80184ac <_tx_thread_create+0x1d8>)
 80183fa:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 80183fc:	4b2d      	ldr	r3, [pc, #180]	; (80184b4 <_tx_thread_create+0x1e0>)
 80183fe:	681b      	ldr	r3, [r3, #0]
 8018400:	3301      	adds	r3, #1
 8018402:	4a2c      	ldr	r2, [pc, #176]	; (80184b4 <_tx_thread_create+0x1e0>)
 8018404:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 8018406:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8018408:	2b01      	cmp	r3, #1
 801840a:	d129      	bne.n	8018460 <_tx_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801840c:	f3ef 8305 	mrs	r3, IPSR
 8018410:	627b      	str	r3, [r7, #36]	; 0x24
    return(ipsr_value);
 8018412:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 8018414:	4b28      	ldr	r3, [pc, #160]	; (80184b8 <_tx_thread_create+0x1e4>)
 8018416:	681b      	ldr	r3, [r3, #0]
 8018418:	4313      	orrs	r3, r2
 801841a:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 801841e:	d30d      	bcc.n	801843c <_tx_thread_create+0x168>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 8018420:	4b26      	ldr	r3, [pc, #152]	; (80184bc <_tx_thread_create+0x1e8>)
 8018422:	681b      	ldr	r3, [r3, #0]
 8018424:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 8018426:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018428:	2b00      	cmp	r3, #0
 801842a:	d009      	beq.n	8018440 <_tx_thread_create+0x16c>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 801842c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801842e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018430:	643b      	str	r3, [r7, #64]	; 0x40

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 8018432:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018434:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018436:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018438:	63da      	str	r2, [r3, #60]	; 0x3c
 801843a:	e001      	b.n	8018440 <_tx_thread_create+0x16c>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 801843c:	2300      	movs	r3, #0
 801843e:	647b      	str	r3, [r7, #68]	; 0x44
 8018440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018442:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8018444:	6a3b      	ldr	r3, [r7, #32]
 8018446:	f383 8810 	msr	PRIMASK, r3
}
 801844a:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 801844c:	68f8      	ldr	r0, [r7, #12]
 801844e:	f000 fa0b 	bl	8018868 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 8018452:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018454:	2b00      	cmp	r3, #0
 8018456:	d01e      	beq.n	8018496 <_tx_thread_create+0x1c2>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 8018458:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801845a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801845c:	63da      	str	r2, [r3, #60]	; 0x3c
 801845e:	e01a      	b.n	8018496 <_tx_thread_create+0x1c2>
 8018460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018462:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8018464:	693b      	ldr	r3, [r7, #16]
 8018466:	f383 8810 	msr	PRIMASK, r3
}
 801846a:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801846c:	f3ef 8310 	mrs	r3, PRIMASK
 8018470:	61bb      	str	r3, [r7, #24]
    return(posture);
 8018472:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8018474:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8018476:	b672      	cpsid	i
    return(int_posture);
 8018478:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 801847a:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 801847c:	4b0d      	ldr	r3, [pc, #52]	; (80184b4 <_tx_thread_create+0x1e0>)
 801847e:	681b      	ldr	r3, [r3, #0]
 8018480:	3b01      	subs	r3, #1
 8018482:	4a0c      	ldr	r2, [pc, #48]	; (80184b4 <_tx_thread_create+0x1e0>)
 8018484:	6013      	str	r3, [r2, #0]
 8018486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018488:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801848a:	69fb      	ldr	r3, [r7, #28]
 801848c:	f383 8810 	msr	PRIMASK, r3
}
 8018490:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8018492:	f000 f9af 	bl	80187f4 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 8018496:	2300      	movs	r3, #0
}
 8018498:	4618      	mov	r0, r3
 801849a:	3748      	adds	r7, #72	; 0x48
 801849c:	46bd      	mov	sp, r7
 801849e:	bd80      	pop	{r7, pc}
 80184a0:	08018d3d 	.word	0x08018d3d
 80184a4:	0801865d 	.word	0x0801865d
 80184a8:	54485244 	.word	0x54485244
 80184ac:	20015258 	.word	0x20015258
 80184b0:	20015254 	.word	0x20015254
 80184b4:	200152e4 	.word	0x200152e4
 80184b8:	200010dc 	.word	0x200010dc
 80184bc:	20015250 	.word	0x20015250

080184c0 <_tx_thread_identify>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
TX_THREAD  *_tx_thread_identify(VOID)
{
 80184c0:	b480      	push	{r7}
 80184c2:	b087      	sub	sp, #28
 80184c4:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80184c6:	f3ef 8310 	mrs	r3, PRIMASK
 80184ca:	60bb      	str	r3, [r7, #8]
    return(posture);
 80184cc:	68bb      	ldr	r3, [r7, #8]
    int_posture = __get_interrupt_posture();
 80184ce:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("CPSID i" : : : "memory");
 80184d0:	b672      	cpsid	i
    return(int_posture);
 80184d2:	687b      	ldr	r3, [r7, #4]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 80184d4:	617b      	str	r3, [r7, #20]

   /* Log this kernel call.  */
    TX_EL_THREAD_IDENTIFY_INSERT

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 80184d6:	4b08      	ldr	r3, [pc, #32]	; (80184f8 <_tx_thread_identify+0x38>)
 80184d8:	681b      	ldr	r3, [r3, #0]
 80184da:	613b      	str	r3, [r7, #16]
 80184dc:	697b      	ldr	r3, [r7, #20]
 80184de:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80184e0:	68fb      	ldr	r3, [r7, #12]
 80184e2:	f383 8810 	msr	PRIMASK, r3
}
 80184e6:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return the current thread pointer.  */
    return(thread_ptr);
 80184e8:	693b      	ldr	r3, [r7, #16]
}
 80184ea:	4618      	mov	r0, r3
 80184ec:	371c      	adds	r7, #28
 80184ee:	46bd      	mov	sp, r7
 80184f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184f4:	4770      	bx	lr
 80184f6:	bf00      	nop
 80184f8:	2001524c 	.word	0x2001524c

080184fc <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 80184fc:	b580      	push	{r7, lr}
 80184fe:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 8018500:	4b12      	ldr	r3, [pc, #72]	; (801854c <_tx_thread_initialize+0x50>)
 8018502:	2200      	movs	r2, #0
 8018504:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 8018506:	4b12      	ldr	r3, [pc, #72]	; (8018550 <_tx_thread_initialize+0x54>)
 8018508:	2200      	movs	r2, #0
 801850a:	601a      	str	r2, [r3, #0]
 801850c:	4b11      	ldr	r3, [pc, #68]	; (8018554 <_tx_thread_initialize+0x58>)
 801850e:	2200      	movs	r2, #0
 8018510:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8018512:	4b11      	ldr	r3, [pc, #68]	; (8018558 <_tx_thread_initialize+0x5c>)
 8018514:	2220      	movs	r2, #32
 8018516:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 8018518:	2280      	movs	r2, #128	; 0x80
 801851a:	2100      	movs	r1, #0
 801851c:	480f      	ldr	r0, [pc, #60]	; (801855c <_tx_thread_initialize+0x60>)
 801851e:	f001 fb6b 	bl	8019bf8 <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 8018522:	4b0f      	ldr	r3, [pc, #60]	; (8018560 <_tx_thread_initialize+0x64>)
 8018524:	2200      	movs	r2, #0
 8018526:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 8018528:	4b0e      	ldr	r3, [pc, #56]	; (8018564 <_tx_thread_initialize+0x68>)
 801852a:	2200      	movs	r2, #0
 801852c:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 801852e:	4b0e      	ldr	r3, [pc, #56]	; (8018568 <_tx_thread_initialize+0x6c>)
 8018530:	2200      	movs	r2, #0
 8018532:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 8018534:	4b0d      	ldr	r3, [pc, #52]	; (801856c <_tx_thread_initialize+0x70>)
 8018536:	2200      	movs	r2, #0
 8018538:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 801853a:	4b0d      	ldr	r3, [pc, #52]	; (8018570 <_tx_thread_initialize+0x74>)
 801853c:	681b      	ldr	r3, [r3, #0]
 801853e:	f043 7385 	orr.w	r3, r3, #17432576	; 0x10a0000
    _tx_build_options =  _tx_build_options 
 8018542:	4a0b      	ldr	r2, [pc, #44]	; (8018570 <_tx_thread_initialize+0x74>)
 8018544:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 8018546:	bf00      	nop
 8018548:	bd80      	pop	{r7, pc}
 801854a:	bf00      	nop
 801854c:	2001524c 	.word	0x2001524c
 8018550:	20015250 	.word	0x20015250
 8018554:	2001525c 	.word	0x2001525c
 8018558:	20015260 	.word	0x20015260
 801855c:	20015264 	.word	0x20015264
 8018560:	20015254 	.word	0x20015254
 8018564:	20015258 	.word	0x20015258
 8018568:	200152e4 	.word	0x200152e4
 801856c:	200152e8 	.word	0x200152e8
 8018570:	200152ec 	.word	0x200152ec

08018574 <_tx_thread_preemption_change>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_preemption_change(TX_THREAD *thread_ptr, UINT new_threshold, UINT *old_threshold)
{
 8018574:	b580      	push	{r7, lr}
 8018576:	b08c      	sub	sp, #48	; 0x30
 8018578:	af00      	add	r7, sp, #0
 801857a:	60f8      	str	r0, [r7, #12]
 801857c:	60b9      	str	r1, [r7, #8]
 801857e:	607a      	str	r2, [r7, #4]
#endif
UINT        status;


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8018580:	2300      	movs	r3, #0
 8018582:	62bb      	str	r3, [r7, #40]	; 0x28
#ifdef TX_DISABLE_PREEMPTION_THRESHOLD

    /* Only allow 0 (disable all preemption) and returning preemption-threshold to the
       current thread priority if preemption-threshold is disabled. All other threshold
       values are converted to 0.  */
    if (thread_ptr -> tx_thread_user_priority != new_threshold)
 8018584:	68fb      	ldr	r3, [r7, #12]
 8018586:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801858a:	68ba      	ldr	r2, [r7, #8]
 801858c:	429a      	cmp	r2, r3
 801858e:	d004      	beq.n	801859a <_tx_thread_preemption_change+0x26>
    {

        /* Is the new threshold zero?  */
        if (new_threshold != ((UINT) 0))
 8018590:	68bb      	ldr	r3, [r7, #8]
 8018592:	2b00      	cmp	r3, #0
 8018594:	d001      	beq.n	801859a <_tx_thread_preemption_change+0x26>
        {

            /* Convert the new threshold to disable all preemption, since preemption-threshold is
               not supported.  */
            new_threshold =  ((UINT) 0);
 8018596:	2300      	movs	r3, #0
 8018598:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801859a:	f3ef 8310 	mrs	r3, PRIMASK
 801859e:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 80185a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 80185a2:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 80185a4:	b672      	cpsid	i
    return(int_posture);
 80185a6:	6a3b      	ldr	r3, [r7, #32]
        }
    }
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 80185a8:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Log this kernel call.  */
    TX_EL_THREAD_PREEMPTION_CHANGE_INSERT

    /* Determine if the new threshold is greater than the current user priority.  */
    if (new_threshold > thread_ptr -> tx_thread_user_priority)
 80185aa:	68fb      	ldr	r3, [r7, #12]
 80185ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80185b0:	68ba      	ldr	r2, [r7, #8]
 80185b2:	429a      	cmp	r2, r3
 80185b4:	d902      	bls.n	80185bc <_tx_thread_preemption_change+0x48>
    {

        /* Return error.  */
        status =  TX_THRESH_ERROR;
 80185b6:	2318      	movs	r3, #24
 80185b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80185ba:	e03e      	b.n	801863a <_tx_thread_preemption_change+0xc6>
            }
        }
#endif

        /* Return the user's preemption-threshold.   */
        *old_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 80185bc:	68fb      	ldr	r3, [r7, #12]
 80185be:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80185c2:	687b      	ldr	r3, [r7, #4]
 80185c4:	601a      	str	r2, [r3, #0]

        /* Setup the new threshold.  */
        thread_ptr -> tx_thread_user_preempt_threshold =  new_threshold;
 80185c6:	68fb      	ldr	r3, [r7, #12]
 80185c8:	68ba      	ldr	r2, [r7, #8]
 80185ca:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

        /* Determine if the new threshold represents a higher priority than the priority inheritance threshold.  */
        if (new_threshold < thread_ptr -> tx_thread_inherit_priority)
 80185ce:	68fb      	ldr	r3, [r7, #12]
 80185d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80185d4:	68ba      	ldr	r2, [r7, #8]
 80185d6:	429a      	cmp	r2, r3
 80185d8:	d203      	bcs.n	80185e2 <_tx_thread_preemption_change+0x6e>
        {

            /* Update the actual preemption-threshold with the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_threshold;
 80185da:	68fb      	ldr	r3, [r7, #12]
 80185dc:	68ba      	ldr	r2, [r7, #8]
 80185de:	63da      	str	r2, [r3, #60]	; 0x3c
 80185e0:	e004      	b.n	80185ec <_tx_thread_preemption_change+0x78>
        }
        else
        {

            /* Update the actual preemption-threshold with the priority inheritance.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_inherit_priority;
 80185e2:	68fb      	ldr	r3, [r7, #12]
 80185e4:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80185e8:	68fb      	ldr	r3, [r7, #12]
 80185ea:	63da      	str	r2, [r3, #60]	; 0x3c
        }

        /* Is the thread priority less than the current highest priority?  If not, no preemption is required.  */
        if (_tx_thread_highest_priority < thread_ptr -> tx_thread_priority)
 80185ec:	68fb      	ldr	r3, [r7, #12]
 80185ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80185f0:	4b17      	ldr	r3, [pc, #92]	; (8018650 <_tx_thread_preemption_change+0xdc>)
 80185f2:	681b      	ldr	r3, [r3, #0]
 80185f4:	429a      	cmp	r2, r3
 80185f6:	d920      	bls.n	801863a <_tx_thread_preemption_change+0xc6>
        {

            /* Is the new thread preemption-threshold less than the current highest priority?  If not, no preemption is required.  */
            if (_tx_thread_highest_priority < new_threshold)
 80185f8:	4b15      	ldr	r3, [pc, #84]	; (8018650 <_tx_thread_preemption_change+0xdc>)
 80185fa:	681b      	ldr	r3, [r3, #0]
 80185fc:	68ba      	ldr	r2, [r7, #8]
 80185fe:	429a      	cmp	r2, r3
 8018600:	d91b      	bls.n	801863a <_tx_thread_preemption_change+0xc6>
            {

                /* If the current execute pointer is the same at this thread, preemption needs to take place.  */
                if (_tx_thread_execute_ptr == thread_ptr)
 8018602:	4b14      	ldr	r3, [pc, #80]	; (8018654 <_tx_thread_preemption_change+0xe0>)
 8018604:	681b      	ldr	r3, [r3, #0]
 8018606:	68fa      	ldr	r2, [r7, #12]
 8018608:	429a      	cmp	r2, r3
 801860a:	d116      	bne.n	801863a <_tx_thread_preemption_change+0xc6>
                        _tx_thread_performance_execute_log[_tx_thread_performance__execute_log_index] =  _tx_thread_execute_ptr;
                    }
#endif

                    /* Setup the highest priority thread to execute.  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 801860c:	4b10      	ldr	r3, [pc, #64]	; (8018650 <_tx_thread_preemption_change+0xdc>)
 801860e:	681b      	ldr	r3, [r3, #0]
 8018610:	4a11      	ldr	r2, [pc, #68]	; (8018658 <_tx_thread_preemption_change+0xe4>)
 8018612:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018616:	4a0f      	ldr	r2, [pc, #60]	; (8018654 <_tx_thread_preemption_change+0xe0>)
 8018618:	6013      	str	r3, [r2, #0]
 801861a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801861c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801861e:	697b      	ldr	r3, [r7, #20]
 8018620:	f383 8810 	msr	PRIMASK, r3
}
 8018624:	bf00      	nop

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Check for preemption.  */
                    _tx_thread_system_preempt_check();
 8018626:	f000 f8e5 	bl	80187f4 <_tx_thread_system_preempt_check>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801862a:	f3ef 8310 	mrs	r3, PRIMASK
 801862e:	61fb      	str	r3, [r7, #28]
    return(posture);
 8018630:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8018632:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8018634:	b672      	cpsid	i
    return(int_posture);
 8018636:	69bb      	ldr	r3, [r7, #24]

                    /* Disable interrupts.  */
                    TX_DISABLE
 8018638:	62fb      	str	r3, [r7, #44]	; 0x2c
 801863a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801863c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801863e:	693b      	ldr	r3, [r7, #16]
 8018640:	f383 8810 	msr	PRIMASK, r3
}
 8018644:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(status);
 8018646:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8018648:	4618      	mov	r0, r3
 801864a:	3730      	adds	r7, #48	; 0x30
 801864c:	46bd      	mov	sp, r7
 801864e:	bd80      	pop	{r7, pc}
 8018650:	20015260 	.word	0x20015260
 8018654:	20015250 	.word	0x20015250
 8018658:	20015264 	.word	0x20015264

0801865c <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 801865c:	b580      	push	{r7, lr}
 801865e:	b088      	sub	sp, #32
 8018660:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8018662:	4b21      	ldr	r3, [pc, #132]	; (80186e8 <_tx_thread_shell_entry+0x8c>)
 8018664:	681b      	ldr	r3, [r3, #0]
 8018666:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 8018668:	69fb      	ldr	r3, [r7, #28]
 801866a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801866c:	69fa      	ldr	r2, [r7, #28]
 801866e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8018670:	4610      	mov	r0, r2
 8018672:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 8018674:	4b1d      	ldr	r3, [pc, #116]	; (80186ec <_tx_thread_shell_entry+0x90>)
 8018676:	681b      	ldr	r3, [r3, #0]
 8018678:	2b00      	cmp	r3, #0
 801867a:	d003      	beq.n	8018684 <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 801867c:	4b1b      	ldr	r3, [pc, #108]	; (80186ec <_tx_thread_shell_entry+0x90>)
 801867e:	681b      	ldr	r3, [r3, #0]
 8018680:	69f8      	ldr	r0, [r7, #28]
 8018682:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8018684:	f3ef 8310 	mrs	r3, PRIMASK
 8018688:	607b      	str	r3, [r7, #4]
    return(posture);
 801868a:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 801868c:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 801868e:	b672      	cpsid	i
    return(int_posture);
 8018690:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 8018692:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 8018694:	69fb      	ldr	r3, [r7, #28]
 8018696:	2201      	movs	r2, #1
 8018698:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 801869a:	69fb      	ldr	r3, [r7, #28]
 801869c:	2201      	movs	r2, #1
 801869e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 80186a0:	69fb      	ldr	r3, [r7, #28]
 80186a2:	2200      	movs	r2, #0
 80186a4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 80186a6:	4b12      	ldr	r3, [pc, #72]	; (80186f0 <_tx_thread_shell_entry+0x94>)
 80186a8:	681b      	ldr	r3, [r3, #0]
 80186aa:	3301      	adds	r3, #1
 80186ac:	4a10      	ldr	r2, [pc, #64]	; (80186f0 <_tx_thread_shell_entry+0x94>)
 80186ae:	6013      	str	r3, [r2, #0]
 80186b0:	69bb      	ldr	r3, [r7, #24]
 80186b2:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80186b4:	68bb      	ldr	r3, [r7, #8]
 80186b6:	f383 8810 	msr	PRIMASK, r3
}
 80186ba:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 80186bc:	f3ef 8314 	mrs	r3, CONTROL
 80186c0:	60fb      	str	r3, [r7, #12]
    return(control_value);
 80186c2:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 80186c4:	617b      	str	r3, [r7, #20]
 80186c6:	697b      	ldr	r3, [r7, #20]
 80186c8:	f023 0304 	bic.w	r3, r3, #4
 80186cc:	617b      	str	r3, [r7, #20]
 80186ce:	697b      	ldr	r3, [r7, #20]
 80186d0:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 80186d2:	693b      	ldr	r3, [r7, #16]
 80186d4:	f383 8814 	msr	CONTROL, r3
}
 80186d8:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 80186da:	69f8      	ldr	r0, [r7, #28]
 80186dc:	f000 f9c4 	bl	8018a68 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 80186e0:	bf00      	nop
 80186e2:	3720      	adds	r7, #32
 80186e4:	46bd      	mov	sp, r7
 80186e6:	bd80      	pop	{r7, pc}
 80186e8:	2001524c 	.word	0x2001524c
 80186ec:	200152e8 	.word	0x200152e8
 80186f0:	200152e4 	.word	0x200152e4

080186f4 <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 80186f4:	b580      	push	{r7, lr}
 80186f6:	b08e      	sub	sp, #56	; 0x38
 80186f8:	af00      	add	r7, sp, #0
 80186fa:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80186fc:	f3ef 8310 	mrs	r3, PRIMASK
 8018700:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8018702:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8018704:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8018706:	b672      	cpsid	i
    return(int_posture);
 8018708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 801870a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 801870c:	4b35      	ldr	r3, [pc, #212]	; (80187e4 <_tx_thread_sleep+0xf0>)
 801870e:	681b      	ldr	r3, [r3, #0]
 8018710:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 8018712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018714:	2b00      	cmp	r3, #0
 8018716:	d108      	bne.n	801872a <_tx_thread_sleep+0x36>
 8018718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801871a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801871c:	6a3b      	ldr	r3, [r7, #32]
 801871e:	f383 8810 	msr	PRIMASK, r3
}
 8018722:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8018724:	2313      	movs	r3, #19
 8018726:	637b      	str	r3, [r7, #52]	; 0x34
 8018728:	e056      	b.n	80187d8 <_tx_thread_sleep+0xe4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801872a:	f3ef 8305 	mrs	r3, IPSR
 801872e:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 8018730:	69fa      	ldr	r2, [r7, #28]
    }

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8018732:	4b2d      	ldr	r3, [pc, #180]	; (80187e8 <_tx_thread_sleep+0xf4>)
 8018734:	681b      	ldr	r3, [r3, #0]
 8018736:	4313      	orrs	r3, r2
 8018738:	2b00      	cmp	r3, #0
 801873a:	d008      	beq.n	801874e <_tx_thread_sleep+0x5a>
 801873c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801873e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8018740:	69bb      	ldr	r3, [r7, #24]
 8018742:	f383 8810 	msr	PRIMASK, r3
}
 8018746:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8018748:	2313      	movs	r3, #19
 801874a:	637b      	str	r3, [r7, #52]	; 0x34
 801874c:	e044      	b.n	80187d8 <_tx_thread_sleep+0xe4>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 801874e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018750:	4a26      	ldr	r2, [pc, #152]	; (80187ec <_tx_thread_sleep+0xf8>)
 8018752:	4293      	cmp	r3, r2
 8018754:	d108      	bne.n	8018768 <_tx_thread_sleep+0x74>
 8018756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018758:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801875a:	697b      	ldr	r3, [r7, #20]
 801875c:	f383 8810 	msr	PRIMASK, r3
}
 8018760:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8018762:	2313      	movs	r3, #19
 8018764:	637b      	str	r3, [r7, #52]	; 0x34
 8018766:	e037      	b.n	80187d8 <_tx_thread_sleep+0xe4>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 8018768:	687b      	ldr	r3, [r7, #4]
 801876a:	2b00      	cmp	r3, #0
 801876c:	d108      	bne.n	8018780 <_tx_thread_sleep+0x8c>
 801876e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018770:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8018772:	693b      	ldr	r3, [r7, #16]
 8018774:	f383 8810 	msr	PRIMASK, r3
}
 8018778:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 801877a:	2300      	movs	r3, #0
 801877c:	637b      	str	r3, [r7, #52]	; 0x34
 801877e:	e02b      	b.n	80187d8 <_tx_thread_sleep+0xe4>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8018780:	4b1b      	ldr	r3, [pc, #108]	; (80187f0 <_tx_thread_sleep+0xfc>)
 8018782:	681b      	ldr	r3, [r3, #0]
 8018784:	2b00      	cmp	r3, #0
 8018786:	d008      	beq.n	801879a <_tx_thread_sleep+0xa6>
 8018788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801878a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801878c:	68fb      	ldr	r3, [r7, #12]
 801878e:	f383 8810 	msr	PRIMASK, r3
}
 8018792:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 8018794:	2313      	movs	r3, #19
 8018796:	637b      	str	r3, [r7, #52]	; 0x34
 8018798:	e01e      	b.n	80187d8 <_tx_thread_sleep+0xe4>
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 801879a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801879c:	2204      	movs	r2, #4
 801879e:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80187a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80187a2:	2201      	movs	r2, #1
 80187a4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 80187a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80187a8:	2200      	movs	r2, #0
 80187aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 80187ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80187b0:	687a      	ldr	r2, [r7, #4]
 80187b2:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 80187b4:	4b0e      	ldr	r3, [pc, #56]	; (80187f0 <_tx_thread_sleep+0xfc>)
 80187b6:	681b      	ldr	r3, [r3, #0]
 80187b8:	3301      	adds	r3, #1
 80187ba:	4a0d      	ldr	r2, [pc, #52]	; (80187f0 <_tx_thread_sleep+0xfc>)
 80187bc:	6013      	str	r3, [r2, #0]
 80187be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187c0:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80187c2:	68bb      	ldr	r3, [r7, #8]
 80187c4:	f383 8810 	msr	PRIMASK, r3
}
 80187c8:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 80187ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80187cc:	f000 f94c 	bl	8018a68 <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 80187d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80187d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80187d6:	637b      	str	r3, [r7, #52]	; 0x34
        }
    }

    /* Return completion status.  */
    return(status);
 80187d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80187da:	4618      	mov	r0, r3
 80187dc:	3738      	adds	r7, #56	; 0x38
 80187de:	46bd      	mov	sp, r7
 80187e0:	bd80      	pop	{r7, pc}
 80187e2:	bf00      	nop
 80187e4:	2001524c 	.word	0x2001524c
 80187e8:	200010dc 	.word	0x200010dc
 80187ec:	20015394 	.word	0x20015394
 80187f0:	200152e4 	.word	0x200152e4

080187f4 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 80187f4:	b480      	push	{r7}
 80187f6:	b089      	sub	sp, #36	; 0x24
 80187f8:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80187fa:	4b17      	ldr	r3, [pc, #92]	; (8018858 <_tx_thread_system_preempt_check+0x64>)
 80187fc:	681b      	ldr	r3, [r3, #0]
 80187fe:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 8018800:	69fb      	ldr	r3, [r7, #28]
 8018802:	2b00      	cmp	r3, #0
 8018804:	d121      	bne.n	801884a <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 8018806:	4b15      	ldr	r3, [pc, #84]	; (801885c <_tx_thread_system_preempt_check+0x68>)
 8018808:	681b      	ldr	r3, [r3, #0]
 801880a:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 801880c:	4b14      	ldr	r3, [pc, #80]	; (8018860 <_tx_thread_system_preempt_check+0x6c>)
 801880e:	681b      	ldr	r3, [r3, #0]
 8018810:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 8018812:	69ba      	ldr	r2, [r7, #24]
 8018814:	697b      	ldr	r3, [r7, #20]
 8018816:	429a      	cmp	r2, r3
 8018818:	d017      	beq.n	801884a <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
UINT interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 801881a:	4b12      	ldr	r3, [pc, #72]	; (8018864 <_tx_thread_system_preempt_check+0x70>)
 801881c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018820:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8018822:	f3ef 8305 	mrs	r3, IPSR
 8018826:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8018828:	693b      	ldr	r3, [r7, #16]
    if (_tx_ipsr_get() == 0)
 801882a:	2b00      	cmp	r3, #0
 801882c:	d10c      	bne.n	8018848 <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801882e:	f3ef 8310 	mrs	r3, PRIMASK
 8018832:	60fb      	str	r3, [r7, #12]
    return(posture);
 8018834:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 8018836:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8018838:	b662      	cpsie	i
}
 801883a:	bf00      	nop
 801883c:	68bb      	ldr	r3, [r7, #8]
 801883e:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8018840:	687b      	ldr	r3, [r7, #4]
 8018842:	f383 8810 	msr	PRIMASK, r3
}
 8018846:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 8018848:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 801884a:	bf00      	nop
 801884c:	3724      	adds	r7, #36	; 0x24
 801884e:	46bd      	mov	sp, r7
 8018850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018854:	4770      	bx	lr
 8018856:	bf00      	nop
 8018858:	200152e4 	.word	0x200152e4
 801885c:	2001524c 	.word	0x2001524c
 8018860:	20015250 	.word	0x20015250
 8018864:	e000ed04 	.word	0xe000ed04

08018868 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8018868:	b580      	push	{r7, lr}
 801886a:	b096      	sub	sp, #88	; 0x58
 801886c:	af00      	add	r7, sp, #0
 801886e:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8018870:	f3ef 8310 	mrs	r3, PRIMASK
 8018874:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 8018876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 8018878:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 801887a:	b672      	cpsid	i
    return(int_posture);
 801887c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 801887e:	657b      	str	r3, [r7, #84]	; 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 8018880:	687b      	ldr	r3, [r7, #4]
 8018882:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8018884:	2b00      	cmp	r3, #0
 8018886:	d005      	beq.n	8018894 <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 8018888:	687b      	ldr	r3, [r7, #4]
 801888a:	334c      	adds	r3, #76	; 0x4c
 801888c:	4618      	mov	r0, r3
 801888e:	f000 fc13 	bl	80190b8 <_tx_timer_system_deactivate>
 8018892:	e002      	b.n	801889a <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8018894:	687b      	ldr	r3, [r7, #4]
 8018896:	2200      	movs	r2, #0
 8018898:	64da      	str	r2, [r3, #76]	; 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 801889a:	4b6c      	ldr	r3, [pc, #432]	; (8018a4c <_tx_thread_system_resume+0x1e4>)
 801889c:	681b      	ldr	r3, [r3, #0]
 801889e:	3b01      	subs	r3, #1
 80188a0:	4a6a      	ldr	r2, [pc, #424]	; (8018a4c <_tx_thread_system_resume+0x1e4>)
 80188a2:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 80188a4:	687b      	ldr	r3, [r7, #4]
 80188a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80188a8:	2b00      	cmp	r3, #0
 80188aa:	f040 8083 	bne.w	80189b4 <_tx_thread_system_resume+0x14c>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 80188ae:	687b      	ldr	r3, [r7, #4]
 80188b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80188b2:	2b00      	cmp	r3, #0
 80188b4:	f000 8097 	beq.w	80189e6 <_tx_thread_system_resume+0x17e>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 80188b8:	687b      	ldr	r3, [r7, #4]
 80188ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80188bc:	2b00      	cmp	r3, #0
 80188be:	d172      	bne.n	80189a6 <_tx_thread_system_resume+0x13e>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 80188c0:	687b      	ldr	r3, [r7, #4]
 80188c2:	2200      	movs	r2, #0
 80188c4:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 80188c6:	687b      	ldr	r3, [r7, #4]
 80188c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80188ca:	653b      	str	r3, [r7, #80]	; 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 80188cc:	4a60      	ldr	r2, [pc, #384]	; (8018a50 <_tx_thread_system_resume+0x1e8>)
 80188ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80188d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80188d4:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (head_ptr == TX_NULL)
 80188d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80188d8:	2b00      	cmp	r3, #0
 80188da:	d154      	bne.n	8018986 <_tx_thread_system_resume+0x11e>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 80188dc:	495c      	ldr	r1, [pc, #368]	; (8018a50 <_tx_thread_system_resume+0x1e8>)
 80188de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80188e0:	687a      	ldr	r2, [r7, #4]
 80188e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 80188e6:	687b      	ldr	r3, [r7, #4]
 80188e8:	687a      	ldr	r2, [r7, #4]
 80188ea:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 80188ec:	687b      	ldr	r3, [r7, #4]
 80188ee:	687a      	ldr	r2, [r7, #4]
 80188f0:	625a      	str	r2, [r3, #36]	; 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 80188f2:	2201      	movs	r2, #1
 80188f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80188f6:	fa02 f303 	lsl.w	r3, r2, r3
 80188fa:	647b      	str	r3, [r7, #68]	; 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 80188fc:	4b55      	ldr	r3, [pc, #340]	; (8018a54 <_tx_thread_system_resume+0x1ec>)
 80188fe:	681a      	ldr	r2, [r3, #0]
 8018900:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018902:	4313      	orrs	r3, r2
 8018904:	4a53      	ldr	r2, [pc, #332]	; (8018a54 <_tx_thread_system_resume+0x1ec>)
 8018906:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 8018908:	4b53      	ldr	r3, [pc, #332]	; (8018a58 <_tx_thread_system_resume+0x1f0>)
 801890a:	681b      	ldr	r3, [r3, #0]
 801890c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801890e:	429a      	cmp	r2, r3
 8018910:	d269      	bcs.n	80189e6 <_tx_thread_system_resume+0x17e>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 8018912:	4a51      	ldr	r2, [pc, #324]	; (8018a58 <_tx_thread_system_resume+0x1f0>)
 8018914:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018916:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 8018918:	4b50      	ldr	r3, [pc, #320]	; (8018a5c <_tx_thread_system_resume+0x1f4>)
 801891a:	681b      	ldr	r3, [r3, #0]
 801891c:	643b      	str	r3, [r7, #64]	; 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 801891e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018920:	2b00      	cmp	r3, #0
 8018922:	d103      	bne.n	801892c <_tx_thread_system_resume+0xc4>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 8018924:	4a4d      	ldr	r2, [pc, #308]	; (8018a5c <_tx_thread_system_resume+0x1f4>)
 8018926:	687b      	ldr	r3, [r7, #4]
 8018928:	6013      	str	r3, [r2, #0]
 801892a:	e05c      	b.n	80189e6 <_tx_thread_system_resume+0x17e>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 801892c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801892e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018930:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8018932:	429a      	cmp	r2, r3
 8018934:	d257      	bcs.n	80189e6 <_tx_thread_system_resume+0x17e>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 8018936:	4a49      	ldr	r2, [pc, #292]	; (8018a5c <_tx_thread_system_resume+0x1f4>)
 8018938:	687b      	ldr	r3, [r7, #4]
 801893a:	6013      	str	r3, [r2, #0]
 801893c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801893e:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8018940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018942:	f383 8810 	msr	PRIMASK, r3
}
 8018946:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8018948:	4b40      	ldr	r3, [pc, #256]	; (8018a4c <_tx_thread_system_resume+0x1e4>)
 801894a:	681b      	ldr	r3, [r3, #0]
 801894c:	63fb      	str	r3, [r7, #60]	; 0x3c
                                if (combined_flags == ((ULONG) 0))
 801894e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018950:	2b00      	cmp	r3, #0
 8018952:	d174      	bne.n	8018a3e <_tx_thread_system_resume+0x1d6>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8018954:	4b42      	ldr	r3, [pc, #264]	; (8018a60 <_tx_thread_system_resume+0x1f8>)
 8018956:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801895a:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801895c:	f3ef 8305 	mrs	r3, IPSR
 8018960:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 8018962:	6abb      	ldr	r3, [r7, #40]	; 0x28
    if (_tx_ipsr_get() == 0)
 8018964:	2b00      	cmp	r3, #0
 8018966:	d10c      	bne.n	8018982 <_tx_thread_system_resume+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8018968:	f3ef 8310 	mrs	r3, PRIMASK
 801896c:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 801896e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        interrupt_save = __get_interrupt_posture();
 8018970:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8018972:	b662      	cpsie	i
}
 8018974:	bf00      	nop
 8018976:	6a3b      	ldr	r3, [r7, #32]
 8018978:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801897a:	69fb      	ldr	r3, [r7, #28]
 801897c:	f383 8810 	msr	PRIMASK, r3
}
 8018980:	bf00      	nop
}
 8018982:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 8018984:	e05b      	b.n	8018a3e <_tx_thread_system_resume+0x1d6>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 8018986:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801898a:	64bb      	str	r3, [r7, #72]	; 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 801898c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801898e:	687a      	ldr	r2, [r7, #4]
 8018990:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 8018992:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018994:	687a      	ldr	r2, [r7, #4]
 8018996:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 8018998:	687b      	ldr	r3, [r7, #4]
 801899a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801899c:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 801899e:	687b      	ldr	r3, [r7, #4]
 80189a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80189a2:	621a      	str	r2, [r3, #32]
 80189a4:	e01f      	b.n	80189e6 <_tx_thread_system_resume+0x17e>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 80189a6:	687b      	ldr	r3, [r7, #4]
 80189a8:	2200      	movs	r2, #0
 80189aa:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 80189ac:	687b      	ldr	r3, [r7, #4]
 80189ae:	2203      	movs	r2, #3
 80189b0:	631a      	str	r2, [r3, #48]	; 0x30
 80189b2:	e018      	b.n	80189e6 <_tx_thread_system_resume+0x17e>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 80189b4:	687b      	ldr	r3, [r7, #4]
 80189b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80189b8:	2b01      	cmp	r3, #1
 80189ba:	d014      	beq.n	80189e6 <_tx_thread_system_resume+0x17e>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 80189bc:	687b      	ldr	r3, [r7, #4]
 80189be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80189c0:	2b02      	cmp	r3, #2
 80189c2:	d010      	beq.n	80189e6 <_tx_thread_system_resume+0x17e>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 80189c4:	687b      	ldr	r3, [r7, #4]
 80189c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80189c8:	2b00      	cmp	r3, #0
 80189ca:	d106      	bne.n	80189da <_tx_thread_system_resume+0x172>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 80189cc:	687b      	ldr	r3, [r7, #4]
 80189ce:	2200      	movs	r2, #0
 80189d0:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 80189d2:	687b      	ldr	r3, [r7, #4]
 80189d4:	2200      	movs	r2, #0
 80189d6:	631a      	str	r2, [r3, #48]	; 0x30
 80189d8:	e005      	b.n	80189e6 <_tx_thread_system_resume+0x17e>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 80189da:	687b      	ldr	r3, [r7, #4]
 80189dc:	2200      	movs	r2, #0
 80189de:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 80189e0:	687b      	ldr	r3, [r7, #4]
 80189e2:	2203      	movs	r2, #3
 80189e4:	631a      	str	r2, [r3, #48]	; 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 80189e6:	4b1f      	ldr	r3, [pc, #124]	; (8018a64 <_tx_thread_system_resume+0x1fc>)
 80189e8:	681b      	ldr	r3, [r3, #0]
 80189ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80189ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80189ee:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80189f0:	69bb      	ldr	r3, [r7, #24]
 80189f2:	f383 8810 	msr	PRIMASK, r3
}
 80189f6:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 80189f8:	4b18      	ldr	r3, [pc, #96]	; (8018a5c <_tx_thread_system_resume+0x1f4>)
 80189fa:	681b      	ldr	r3, [r3, #0]
 80189fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80189fe:	429a      	cmp	r2, r3
 8018a00:	d020      	beq.n	8018a44 <_tx_thread_system_resume+0x1dc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8018a02:	4b12      	ldr	r3, [pc, #72]	; (8018a4c <_tx_thread_system_resume+0x1e4>)
 8018a04:	681b      	ldr	r3, [r3, #0]
 8018a06:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (combined_flags == ((ULONG) 0))
 8018a08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018a0a:	2b00      	cmp	r3, #0
 8018a0c:	d11a      	bne.n	8018a44 <_tx_thread_system_resume+0x1dc>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8018a0e:	4b14      	ldr	r3, [pc, #80]	; (8018a60 <_tx_thread_system_resume+0x1f8>)
 8018a10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018a14:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8018a16:	f3ef 8305 	mrs	r3, IPSR
 8018a1a:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8018a1c:	697b      	ldr	r3, [r7, #20]
    if (_tx_ipsr_get() == 0)
 8018a1e:	2b00      	cmp	r3, #0
 8018a20:	d10f      	bne.n	8018a42 <_tx_thread_system_resume+0x1da>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8018a22:	f3ef 8310 	mrs	r3, PRIMASK
 8018a26:	613b      	str	r3, [r7, #16]
    return(posture);
 8018a28:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 8018a2a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8018a2c:	b662      	cpsie	i
}
 8018a2e:	bf00      	nop
 8018a30:	68fb      	ldr	r3, [r7, #12]
 8018a32:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8018a34:	68bb      	ldr	r3, [r7, #8]
 8018a36:	f383 8810 	msr	PRIMASK, r3
}
 8018a3a:	bf00      	nop
}
 8018a3c:	e001      	b.n	8018a42 <_tx_thread_system_resume+0x1da>
                                return;
 8018a3e:	bf00      	nop
 8018a40:	e000      	b.n	8018a44 <_tx_thread_system_resume+0x1dc>
 8018a42:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 8018a44:	3758      	adds	r7, #88	; 0x58
 8018a46:	46bd      	mov	sp, r7
 8018a48:	bd80      	pop	{r7, pc}
 8018a4a:	bf00      	nop
 8018a4c:	200152e4 	.word	0x200152e4
 8018a50:	20015264 	.word	0x20015264
 8018a54:	2001525c 	.word	0x2001525c
 8018a58:	20015260 	.word	0x20015260
 8018a5c:	20015250 	.word	0x20015250
 8018a60:	e000ed04 	.word	0xe000ed04
 8018a64:	2001524c 	.word	0x2001524c

08018a68 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8018a68:	b580      	push	{r7, lr}
 8018a6a:	b09e      	sub	sp, #120	; 0x78
 8018a6c:	af00      	add	r7, sp, #0
 8018a6e:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8018a70:	4b81      	ldr	r3, [pc, #516]	; (8018c78 <_tx_thread_system_suspend+0x210>)
 8018a72:	681b      	ldr	r3, [r3, #0]
 8018a74:	677b      	str	r3, [r7, #116]	; 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8018a76:	f3ef 8310 	mrs	r3, PRIMASK
 8018a7a:	64fb      	str	r3, [r7, #76]	; 0x4c
    return(posture);
 8018a7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    int_posture = __get_interrupt_posture();
 8018a7e:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 8018a80:	b672      	cpsid	i
    return(int_posture);
 8018a82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8018a84:	673b      	str	r3, [r7, #112]	; 0x70

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 8018a86:	687a      	ldr	r2, [r7, #4]
 8018a88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8018a8a:	429a      	cmp	r2, r3
 8018a8c:	d112      	bne.n	8018ab4 <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 8018a8e:	687b      	ldr	r3, [r7, #4]
 8018a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018a92:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 8018a94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018a96:	2b00      	cmp	r3, #0
 8018a98:	d008      	beq.n	8018aac <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 8018a9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018a9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018aa0:	d004      	beq.n	8018aac <_tx_thread_system_suspend+0x44>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 8018aa2:	687b      	ldr	r3, [r7, #4]
 8018aa4:	334c      	adds	r3, #76	; 0x4c
 8018aa6:	4618      	mov	r0, r3
 8018aa8:	f000 faa4 	bl	8018ff4 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8018aac:	687b      	ldr	r3, [r7, #4]
 8018aae:	69db      	ldr	r3, [r3, #28]
 8018ab0:	4a72      	ldr	r2, [pc, #456]	; (8018c7c <_tx_thread_system_suspend+0x214>)
 8018ab2:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8018ab4:	4b72      	ldr	r3, [pc, #456]	; (8018c80 <_tx_thread_system_suspend+0x218>)
 8018ab6:	681b      	ldr	r3, [r3, #0]
 8018ab8:	3b01      	subs	r3, #1
 8018aba:	4a71      	ldr	r2, [pc, #452]	; (8018c80 <_tx_thread_system_suspend+0x218>)
 8018abc:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 8018abe:	687b      	ldr	r3, [r7, #4]
 8018ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018ac2:	2b01      	cmp	r3, #1
 8018ac4:	f040 80a6 	bne.w	8018c14 <_tx_thread_system_suspend+0x1ac>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 8018ac8:	687b      	ldr	r3, [r7, #4]
 8018aca:	2200      	movs	r2, #0
 8018acc:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 8018ace:	687b      	ldr	r3, [r7, #4]
 8018ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018ad2:	66bb      	str	r3, [r7, #104]	; 0x68

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 8018ad4:	687b      	ldr	r3, [r7, #4]
 8018ad6:	6a1b      	ldr	r3, [r3, #32]
 8018ad8:	667b      	str	r3, [r7, #100]	; 0x64

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 8018ada:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8018adc:	687b      	ldr	r3, [r7, #4]
 8018ade:	429a      	cmp	r2, r3
 8018ae0:	d015      	beq.n	8018b0e <_tx_thread_system_suspend+0xa6>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 8018ae2:	687b      	ldr	r3, [r7, #4]
 8018ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018ae6:	653b      	str	r3, [r7, #80]	; 0x50

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 8018ae8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8018aea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8018aec:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 8018aee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018af0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8018af2:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 8018af4:	4a63      	ldr	r2, [pc, #396]	; (8018c84 <_tx_thread_system_suspend+0x21c>)
 8018af6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8018af8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018afc:	687a      	ldr	r2, [r7, #4]
 8018afe:	429a      	cmp	r2, r3
 8018b00:	d157      	bne.n	8018bb2 <_tx_thread_system_suspend+0x14a>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 8018b02:	4960      	ldr	r1, [pc, #384]	; (8018c84 <_tx_thread_system_suspend+0x21c>)
 8018b04:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8018b06:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8018b08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8018b0c:	e051      	b.n	8018bb2 <_tx_thread_system_suspend+0x14a>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 8018b0e:	4a5d      	ldr	r2, [pc, #372]	; (8018c84 <_tx_thread_system_suspend+0x21c>)
 8018b10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8018b12:	2100      	movs	r1, #0
 8018b14:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 8018b18:	2201      	movs	r2, #1
 8018b1a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8018b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8018b20:	663b      	str	r3, [r7, #96]	; 0x60
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 8018b22:	4b59      	ldr	r3, [pc, #356]	; (8018c88 <_tx_thread_system_suspend+0x220>)
 8018b24:	681a      	ldr	r2, [r3, #0]
 8018b26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8018b28:	43db      	mvns	r3, r3
 8018b2a:	4013      	ands	r3, r2
 8018b2c:	4a56      	ldr	r2, [pc, #344]	; (8018c88 <_tx_thread_system_suspend+0x220>)
 8018b2e:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 8018b30:	2300      	movs	r3, #0
 8018b32:	65fb      	str	r3, [r7, #92]	; 0x5c
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 8018b34:	4b54      	ldr	r3, [pc, #336]	; (8018c88 <_tx_thread_system_suspend+0x220>)
 8018b36:	681b      	ldr	r3, [r3, #0]
 8018b38:	65bb      	str	r3, [r7, #88]	; 0x58

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 8018b3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8018b3c:	2b00      	cmp	r3, #0
 8018b3e:	d12b      	bne.n	8018b98 <_tx_thread_system_suspend+0x130>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8018b40:	4b52      	ldr	r3, [pc, #328]	; (8018c8c <_tx_thread_system_suspend+0x224>)
 8018b42:	2220      	movs	r2, #32
 8018b44:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 8018b46:	4b52      	ldr	r3, [pc, #328]	; (8018c90 <_tx_thread_system_suspend+0x228>)
 8018b48:	2200      	movs	r2, #0
 8018b4a:	601a      	str	r2, [r3, #0]
 8018b4c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8018b4e:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8018b50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018b52:	f383 8810 	msr	PRIMASK, r3
}
 8018b56:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8018b58:	4b49      	ldr	r3, [pc, #292]	; (8018c80 <_tx_thread_system_suspend+0x218>)
 8018b5a:	681b      	ldr	r3, [r3, #0]
 8018b5c:	657b      	str	r3, [r7, #84]	; 0x54
                if (combined_flags == ((ULONG) 0))
 8018b5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018b60:	2b00      	cmp	r3, #0
 8018b62:	f040 8081 	bne.w	8018c68 <_tx_thread_system_suspend+0x200>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8018b66:	4b4b      	ldr	r3, [pc, #300]	; (8018c94 <_tx_thread_system_suspend+0x22c>)
 8018b68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018b6c:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8018b6e:	f3ef 8305 	mrs	r3, IPSR
 8018b72:	643b      	str	r3, [r7, #64]	; 0x40
    return(ipsr_value);
 8018b74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    if (_tx_ipsr_get() == 0)
 8018b76:	2b00      	cmp	r3, #0
 8018b78:	d10c      	bne.n	8018b94 <_tx_thread_system_suspend+0x12c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8018b7a:	f3ef 8310 	mrs	r3, PRIMASK
 8018b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
    return(posture);
 8018b80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        interrupt_save = __get_interrupt_posture();
 8018b82:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 8018b84:	b662      	cpsie	i
}
 8018b86:	bf00      	nop
 8018b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018b8a:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8018b8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018b8e:	f383 8810 	msr	PRIMASK, r3
}
 8018b92:	bf00      	nop
}
 8018b94:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 8018b96:	e067      	b.n	8018c68 <_tx_thread_system_suspend+0x200>
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 8018b98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8018b9a:	fa93 f3a3 	rbit	r3, r3
 8018b9e:	65bb      	str	r3, [r7, #88]	; 0x58
 8018ba0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8018ba2:	fab3 f383 	clz	r3, r3
 8018ba6:	663b      	str	r3, [r7, #96]	; 0x60

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 8018ba8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8018baa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8018bac:	4413      	add	r3, r2
 8018bae:	4a37      	ldr	r2, [pc, #220]	; (8018c8c <_tx_thread_system_suspend+0x224>)
 8018bb0:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 8018bb2:	4b37      	ldr	r3, [pc, #220]	; (8018c90 <_tx_thread_system_suspend+0x228>)
 8018bb4:	681b      	ldr	r3, [r3, #0]
 8018bb6:	687a      	ldr	r2, [r7, #4]
 8018bb8:	429a      	cmp	r2, r3
 8018bba:	d12b      	bne.n	8018c14 <_tx_thread_system_suspend+0x1ac>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8018bbc:	4b33      	ldr	r3, [pc, #204]	; (8018c8c <_tx_thread_system_suspend+0x224>)
 8018bbe:	681b      	ldr	r3, [r3, #0]
 8018bc0:	4a30      	ldr	r2, [pc, #192]	; (8018c84 <_tx_thread_system_suspend+0x21c>)
 8018bc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018bc6:	4a32      	ldr	r2, [pc, #200]	; (8018c90 <_tx_thread_system_suspend+0x228>)
 8018bc8:	6013      	str	r3, [r2, #0]
 8018bca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8018bcc:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8018bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018bd0:	f383 8810 	msr	PRIMASK, r3
}
 8018bd4:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8018bd6:	4b2a      	ldr	r3, [pc, #168]	; (8018c80 <_tx_thread_system_suspend+0x218>)
 8018bd8:	681b      	ldr	r3, [r3, #0]
 8018bda:	657b      	str	r3, [r7, #84]	; 0x54
            if (combined_flags == ((ULONG) 0))
 8018bdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018bde:	2b00      	cmp	r3, #0
 8018be0:	d144      	bne.n	8018c6c <_tx_thread_system_suspend+0x204>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8018be2:	4b2c      	ldr	r3, [pc, #176]	; (8018c94 <_tx_thread_system_suspend+0x22c>)
 8018be4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018be8:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8018bea:	f3ef 8305 	mrs	r3, IPSR
 8018bee:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 8018bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    if (_tx_ipsr_get() == 0)
 8018bf2:	2b00      	cmp	r3, #0
 8018bf4:	d10c      	bne.n	8018c10 <_tx_thread_system_suspend+0x1a8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8018bf6:	f3ef 8310 	mrs	r3, PRIMASK
 8018bfa:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8018bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
        interrupt_save = __get_interrupt_posture();
 8018bfe:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 8018c00:	b662      	cpsie	i
}
 8018c02:	bf00      	nop
 8018c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018c06:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8018c08:	6a3b      	ldr	r3, [r7, #32]
 8018c0a:	f383 8810 	msr	PRIMASK, r3
}
 8018c0e:	bf00      	nop
}
 8018c10:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 8018c12:	e02b      	b.n	8018c6c <_tx_thread_system_suspend+0x204>
 8018c14:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8018c16:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8018c18:	69fb      	ldr	r3, [r7, #28]
 8018c1a:	f383 8810 	msr	PRIMASK, r3
}
 8018c1e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8018c20:	4b1b      	ldr	r3, [pc, #108]	; (8018c90 <_tx_thread_system_suspend+0x228>)
 8018c22:	681b      	ldr	r3, [r3, #0]
 8018c24:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8018c26:	429a      	cmp	r2, r3
 8018c28:	d022      	beq.n	8018c70 <_tx_thread_system_suspend+0x208>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8018c2a:	4b15      	ldr	r3, [pc, #84]	; (8018c80 <_tx_thread_system_suspend+0x218>)
 8018c2c:	681b      	ldr	r3, [r3, #0]
 8018c2e:	657b      	str	r3, [r7, #84]	; 0x54
        if (combined_flags == ((ULONG) 0))
 8018c30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018c32:	2b00      	cmp	r3, #0
 8018c34:	d11c      	bne.n	8018c70 <_tx_thread_system_suspend+0x208>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8018c36:	4b17      	ldr	r3, [pc, #92]	; (8018c94 <_tx_thread_system_suspend+0x22c>)
 8018c38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018c3c:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8018c3e:	f3ef 8305 	mrs	r3, IPSR
 8018c42:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8018c44:	69bb      	ldr	r3, [r7, #24]
    if (_tx_ipsr_get() == 0)
 8018c46:	2b00      	cmp	r3, #0
 8018c48:	d10c      	bne.n	8018c64 <_tx_thread_system_suspend+0x1fc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8018c4a:	f3ef 8310 	mrs	r3, PRIMASK
 8018c4e:	617b      	str	r3, [r7, #20]
    return(posture);
 8018c50:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 8018c52:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8018c54:	b662      	cpsie	i
}
 8018c56:	bf00      	nop
 8018c58:	693b      	ldr	r3, [r7, #16]
 8018c5a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8018c5c:	68fb      	ldr	r3, [r7, #12]
 8018c5e:	f383 8810 	msr	PRIMASK, r3
}
 8018c62:	bf00      	nop
}
 8018c64:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 8018c66:	e003      	b.n	8018c70 <_tx_thread_system_suspend+0x208>
                return;
 8018c68:	bf00      	nop
 8018c6a:	e002      	b.n	8018c72 <_tx_thread_system_suspend+0x20a>
            return;
 8018c6c:	bf00      	nop
 8018c6e:	e000      	b.n	8018c72 <_tx_thread_system_suspend+0x20a>
    return;
 8018c70:	bf00      	nop
}
 8018c72:	3778      	adds	r7, #120	; 0x78
 8018c74:	46bd      	mov	sp, r7
 8018c76:	bd80      	pop	{r7, pc}
 8018c78:	2001524c 	.word	0x2001524c
 8018c7c:	20015850 	.word	0x20015850
 8018c80:	200152e4 	.word	0x200152e4
 8018c84:	20015264 	.word	0x20015264
 8018c88:	2001525c 	.word	0x2001525c
 8018c8c:	20015260 	.word	0x20015260
 8018c90:	20015250 	.word	0x20015250
 8018c94:	e000ed04 	.word	0xe000ed04

08018c98 <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 8018c98:	b480      	push	{r7}
 8018c9a:	b087      	sub	sp, #28
 8018c9c:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8018c9e:	4b21      	ldr	r3, [pc, #132]	; (8018d24 <_tx_thread_time_slice+0x8c>)
 8018ca0:	681b      	ldr	r3, [r3, #0]
 8018ca2:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8018ca4:	f3ef 8310 	mrs	r3, PRIMASK
 8018ca8:	60fb      	str	r3, [r7, #12]
    return(posture);
 8018caa:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 8018cac:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 8018cae:	b672      	cpsid	i
    return(int_posture);
 8018cb0:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 8018cb2:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8018cb4:	4b1c      	ldr	r3, [pc, #112]	; (8018d28 <_tx_thread_time_slice+0x90>)
 8018cb6:	2200      	movs	r2, #0
 8018cb8:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 8018cba:	697b      	ldr	r3, [r7, #20]
 8018cbc:	2b00      	cmp	r3, #0
 8018cbe:	d024      	beq.n	8018d0a <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 8018cc0:	697b      	ldr	r3, [r7, #20]
 8018cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018cc4:	2b00      	cmp	r3, #0
 8018cc6:	d120      	bne.n	8018d0a <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8018cc8:	697b      	ldr	r3, [r7, #20]
 8018cca:	69da      	ldr	r2, [r3, #28]
 8018ccc:	697b      	ldr	r3, [r7, #20]
 8018cce:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 8018cd0:	697b      	ldr	r3, [r7, #20]
 8018cd2:	699b      	ldr	r3, [r3, #24]
 8018cd4:	4a15      	ldr	r2, [pc, #84]	; (8018d2c <_tx_thread_time_slice+0x94>)
 8018cd6:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 8018cd8:	697b      	ldr	r3, [r7, #20]
 8018cda:	6a1b      	ldr	r3, [r3, #32]
 8018cdc:	697a      	ldr	r2, [r7, #20]
 8018cde:	429a      	cmp	r2, r3
 8018ce0:	d013      	beq.n	8018d0a <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 8018ce2:	697b      	ldr	r3, [r7, #20]
 8018ce4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018ce6:	697b      	ldr	r3, [r7, #20]
 8018ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018cea:	429a      	cmp	r2, r3
 8018cec:	d10d      	bne.n	8018d0a <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 8018cee:	697b      	ldr	r3, [r7, #20]
 8018cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018cf2:	697a      	ldr	r2, [r7, #20]
 8018cf4:	6a12      	ldr	r2, [r2, #32]
 8018cf6:	490e      	ldr	r1, [pc, #56]	; (8018d30 <_tx_thread_time_slice+0x98>)
 8018cf8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8018cfc:	4b0d      	ldr	r3, [pc, #52]	; (8018d34 <_tx_thread_time_slice+0x9c>)
 8018cfe:	681b      	ldr	r3, [r3, #0]
 8018d00:	4a0b      	ldr	r2, [pc, #44]	; (8018d30 <_tx_thread_time_slice+0x98>)
 8018d02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018d06:	4a0c      	ldr	r2, [pc, #48]	; (8018d38 <_tx_thread_time_slice+0xa0>)
 8018d08:	6013      	str	r3, [r2, #0]
 8018d0a:	693b      	ldr	r3, [r7, #16]
 8018d0c:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8018d0e:	687b      	ldr	r3, [r7, #4]
 8018d10:	f383 8810 	msr	PRIMASK, r3
}
 8018d14:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 8018d16:	bf00      	nop
 8018d18:	371c      	adds	r7, #28
 8018d1a:	46bd      	mov	sp, r7
 8018d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d20:	4770      	bx	lr
 8018d22:	bf00      	nop
 8018d24:	2001524c 	.word	0x2001524c
 8018d28:	200152f4 	.word	0x200152f4
 8018d2c:	20015850 	.word	0x20015850
 8018d30:	20015264 	.word	0x20015264
 8018d34:	20015260 	.word	0x20015260
 8018d38:	20015250 	.word	0x20015250

08018d3c <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 8018d3c:	b580      	push	{r7, lr}
 8018d3e:	b08a      	sub	sp, #40	; 0x28
 8018d40:	af00      	add	r7, sp, #0
 8018d42:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 8018d44:	687b      	ldr	r3, [r7, #4]
 8018d46:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8018d48:	f3ef 8310 	mrs	r3, PRIMASK
 8018d4c:	617b      	str	r3, [r7, #20]
    return(posture);
 8018d4e:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8018d50:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8018d52:	b672      	cpsid	i
    return(int_posture);
 8018d54:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 8018d56:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 8018d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018d5c:	2b04      	cmp	r3, #4
 8018d5e:	d10e      	bne.n	8018d7e <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 8018d60:	4b13      	ldr	r3, [pc, #76]	; (8018db0 <_tx_thread_timeout+0x74>)
 8018d62:	681b      	ldr	r3, [r3, #0]
 8018d64:	3301      	adds	r3, #1
 8018d66:	4a12      	ldr	r2, [pc, #72]	; (8018db0 <_tx_thread_timeout+0x74>)
 8018d68:	6013      	str	r3, [r2, #0]
 8018d6a:	6a3b      	ldr	r3, [r7, #32]
 8018d6c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8018d6e:	68fb      	ldr	r3, [r7, #12]
 8018d70:	f383 8810 	msr	PRIMASK, r3
}
 8018d74:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 8018d76:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018d78:	f7ff fd76 	bl	8018868 <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 8018d7c:	e013      	b.n	8018da6 <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 8018d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8018d82:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 8018d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d86:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8018d8a:	61bb      	str	r3, [r7, #24]
 8018d8c:	6a3b      	ldr	r3, [r7, #32]
 8018d8e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8018d90:	68bb      	ldr	r3, [r7, #8]
 8018d92:	f383 8810 	msr	PRIMASK, r3
}
 8018d96:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 8018d98:	69fb      	ldr	r3, [r7, #28]
 8018d9a:	2b00      	cmp	r3, #0
 8018d9c:	d003      	beq.n	8018da6 <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 8018d9e:	69fb      	ldr	r3, [r7, #28]
 8018da0:	69b9      	ldr	r1, [r7, #24]
 8018da2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018da4:	4798      	blx	r3
}
 8018da6:	bf00      	nop
 8018da8:	3728      	adds	r7, #40	; 0x28
 8018daa:	46bd      	mov	sp, r7
 8018dac:	bd80      	pop	{r7, pc}
 8018dae:	bf00      	nop
 8018db0:	200152e4 	.word	0x200152e4

08018db4 <_tx_time_get>:
/*  12-31-2020     Andres Mlinar            Modified comment(s),          */
/*                                            resulting in version 6.1.3  */
/*                                                                        */
/**************************************************************************/
ULONG  _tx_time_get(VOID)
{
 8018db4:	b480      	push	{r7}
 8018db6:	b087      	sub	sp, #28
 8018db8:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8018dba:	f3ef 8310 	mrs	r3, PRIMASK
 8018dbe:	60bb      	str	r3, [r7, #8]
    return(posture);
 8018dc0:	68bb      	ldr	r3, [r7, #8]
    int_posture = __get_interrupt_posture();
 8018dc2:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("CPSID i" : : : "memory");
 8018dc4:	b672      	cpsid	i
    return(int_posture);
 8018dc6:	687b      	ldr	r3, [r7, #4]
#endif
ULONG   temp_time;


    /* Disable interrupts.  */
    TX_DISABLE
 8018dc8:	617b      	str	r3, [r7, #20]

    /* Pickup the system clock time.  */
    temp_time =  _tx_timer_system_clock;
 8018dca:	4b08      	ldr	r3, [pc, #32]	; (8018dec <_tx_time_get+0x38>)
 8018dcc:	681b      	ldr	r3, [r3, #0]
 8018dce:	613b      	str	r3, [r7, #16]
 8018dd0:	697b      	ldr	r3, [r7, #20]
 8018dd2:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8018dd4:	68fb      	ldr	r3, [r7, #12]
 8018dd6:	f383 8810 	msr	PRIMASK, r3
}
 8018dda:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return the time.  */
    return(temp_time);
 8018ddc:	693b      	ldr	r3, [r7, #16]
}
 8018dde:	4618      	mov	r0, r3
 8018de0:	371c      	adds	r7, #28
 8018de2:	46bd      	mov	sp, r7
 8018de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018de8:	4770      	bx	lr
 8018dea:	bf00      	nop
 8018dec:	200152f0 	.word	0x200152f0

08018df0 <_tx_timer_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_create(TX_TIMER *timer_ptr, CHAR *name_ptr,
            VOID (*expiration_function)(ULONG id), ULONG expiration_input,
            ULONG initial_ticks, ULONG reschedule_ticks, UINT auto_activate)
{
 8018df0:	b580      	push	{r7, lr}
 8018df2:	b08a      	sub	sp, #40	; 0x28
 8018df4:	af00      	add	r7, sp, #0
 8018df6:	60f8      	str	r0, [r7, #12]
 8018df8:	60b9      	str	r1, [r7, #8]
 8018dfa:	607a      	str	r2, [r7, #4]
 8018dfc:	603b      	str	r3, [r7, #0]
TX_TIMER        *next_timer;
TX_TIMER        *previous_timer;


    /* Initialize timer control block to all zeros.  */
    TX_MEMSET(timer_ptr, 0, (sizeof(TX_TIMER)));
 8018dfe:	222c      	movs	r2, #44	; 0x2c
 8018e00:	2100      	movs	r1, #0
 8018e02:	68f8      	ldr	r0, [r7, #12]
 8018e04:	f000 fef8 	bl	8019bf8 <memset>

    /* Setup the basic timer fields.  */
    timer_ptr -> tx_timer_name =                                            name_ptr;
 8018e08:	68fb      	ldr	r3, [r7, #12]
 8018e0a:	68ba      	ldr	r2, [r7, #8]
 8018e0c:	605a      	str	r2, [r3, #4]
    timer_ptr -> tx_timer_internal.tx_timer_internal_remaining_ticks =      initial_ticks;
 8018e0e:	68fb      	ldr	r3, [r7, #12]
 8018e10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018e12:	609a      	str	r2, [r3, #8]
    timer_ptr -> tx_timer_internal.tx_timer_internal_re_initialize_ticks =  reschedule_ticks;
 8018e14:	68fb      	ldr	r3, [r7, #12]
 8018e16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8018e18:	60da      	str	r2, [r3, #12]
    timer_ptr -> tx_timer_internal.tx_timer_internal_timeout_function =     expiration_function;
 8018e1a:	68fb      	ldr	r3, [r7, #12]
 8018e1c:	687a      	ldr	r2, [r7, #4]
 8018e1e:	611a      	str	r2, [r3, #16]
    timer_ptr -> tx_timer_internal.tx_timer_internal_timeout_param =        expiration_input;
 8018e20:	68fb      	ldr	r3, [r7, #12]
 8018e22:	683a      	ldr	r2, [r7, #0]
 8018e24:	615a      	str	r2, [r3, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8018e26:	f3ef 8310 	mrs	r3, PRIMASK
 8018e2a:	61bb      	str	r3, [r7, #24]
    return(posture);
 8018e2c:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8018e2e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8018e30:	b672      	cpsid	i
    return(int_posture);
 8018e32:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 8018e34:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the timer ID to make it valid.  */
    timer_ptr -> tx_timer_id =  TX_TIMER_ID;
 8018e36:	68fb      	ldr	r3, [r7, #12]
 8018e38:	4a1c      	ldr	r2, [pc, #112]	; (8018eac <_tx_timer_create+0xbc>)
 8018e3a:	601a      	str	r2, [r3, #0]

    /* Place the timer on the list of created application timers.  First,
       check for an empty list.  */
    if (_tx_timer_created_count == TX_EMPTY)
 8018e3c:	4b1c      	ldr	r3, [pc, #112]	; (8018eb0 <_tx_timer_create+0xc0>)
 8018e3e:	681b      	ldr	r3, [r3, #0]
 8018e40:	2b00      	cmp	r3, #0
 8018e42:	d109      	bne.n	8018e58 <_tx_timer_create+0x68>
    {

        /* The created timer list is empty.  Add timer to empty list.  */
        _tx_timer_created_ptr =                   timer_ptr;
 8018e44:	4a1b      	ldr	r2, [pc, #108]	; (8018eb4 <_tx_timer_create+0xc4>)
 8018e46:	68fb      	ldr	r3, [r7, #12]
 8018e48:	6013      	str	r3, [r2, #0]
        timer_ptr -> tx_timer_created_next =      timer_ptr;
 8018e4a:	68fb      	ldr	r3, [r7, #12]
 8018e4c:	68fa      	ldr	r2, [r7, #12]
 8018e4e:	625a      	str	r2, [r3, #36]	; 0x24
        timer_ptr -> tx_timer_created_previous =  timer_ptr;
 8018e50:	68fb      	ldr	r3, [r7, #12]
 8018e52:	68fa      	ldr	r2, [r7, #12]
 8018e54:	629a      	str	r2, [r3, #40]	; 0x28
 8018e56:	e011      	b.n	8018e7c <_tx_timer_create+0x8c>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_timer =  _tx_timer_created_ptr;
 8018e58:	4b16      	ldr	r3, [pc, #88]	; (8018eb4 <_tx_timer_create+0xc4>)
 8018e5a:	681b      	ldr	r3, [r3, #0]
 8018e5c:	623b      	str	r3, [r7, #32]
        previous_timer =  next_timer -> tx_timer_created_previous;
 8018e5e:	6a3b      	ldr	r3, [r7, #32]
 8018e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018e62:	61fb      	str	r3, [r7, #28]

        /* Place the new timer in the list.  */
        next_timer -> tx_timer_created_previous =  timer_ptr;
 8018e64:	6a3b      	ldr	r3, [r7, #32]
 8018e66:	68fa      	ldr	r2, [r7, #12]
 8018e68:	629a      	str	r2, [r3, #40]	; 0x28
        previous_timer -> tx_timer_created_next =    timer_ptr;
 8018e6a:	69fb      	ldr	r3, [r7, #28]
 8018e6c:	68fa      	ldr	r2, [r7, #12]
 8018e6e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Setup this timer's created links.  */
        timer_ptr -> tx_timer_created_previous =  previous_timer;
 8018e70:	68fb      	ldr	r3, [r7, #12]
 8018e72:	69fa      	ldr	r2, [r7, #28]
 8018e74:	629a      	str	r2, [r3, #40]	; 0x28
        timer_ptr -> tx_timer_created_next =      next_timer;
 8018e76:	68fb      	ldr	r3, [r7, #12]
 8018e78:	6a3a      	ldr	r2, [r7, #32]
 8018e7a:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Increment the number of created timers.  */
    _tx_timer_created_count++;
 8018e7c:	4b0c      	ldr	r3, [pc, #48]	; (8018eb0 <_tx_timer_create+0xc0>)
 8018e7e:	681b      	ldr	r3, [r3, #0]
 8018e80:	3301      	adds	r3, #1
 8018e82:	4a0b      	ldr	r2, [pc, #44]	; (8018eb0 <_tx_timer_create+0xc0>)
 8018e84:	6013      	str	r3, [r2, #0]

    /* Log this kernel call.  */
    TX_EL_TIMER_CREATE_INSERT

    /* Determine if this timer needs to be activated.  */
    if (auto_activate == TX_AUTO_ACTIVATE)
 8018e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018e88:	2b01      	cmp	r3, #1
 8018e8a:	d104      	bne.n	8018e96 <_tx_timer_create+0xa6>
        /* Increment the number of activations on this timer.  */
        timer_ptr -> tx_timer_performance_activate_count++;
#endif

        /* Call actual activation function.  */
        _tx_timer_system_activate(&(timer_ptr -> tx_timer_internal));
 8018e8c:	68fb      	ldr	r3, [r7, #12]
 8018e8e:	3308      	adds	r3, #8
 8018e90:	4618      	mov	r0, r3
 8018e92:	f000 f8af 	bl	8018ff4 <_tx_timer_system_activate>
 8018e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e98:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8018e9a:	693b      	ldr	r3, [r7, #16]
 8018e9c:	f383 8810 	msr	PRIMASK, r3
}
 8018ea0:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8018ea2:	2300      	movs	r3, #0
}
 8018ea4:	4618      	mov	r0, r3
 8018ea6:	3728      	adds	r7, #40	; 0x28
 8018ea8:	46bd      	mov	sp, r7
 8018eaa:	bd80      	pop	{r7, pc}
 8018eac:	4154494d 	.word	0x4154494d
 8018eb0:	2001538c 	.word	0x2001538c
 8018eb4:	20015388 	.word	0x20015388

08018eb8 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 8018eb8:	b580      	push	{r7, lr}
 8018eba:	b084      	sub	sp, #16
 8018ebc:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8018ebe:	f3ef 8310 	mrs	r3, PRIMASK
 8018ec2:	607b      	str	r3, [r7, #4]
    return(posture);
 8018ec4:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 8018ec6:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 8018ec8:	b672      	cpsid	i
    return(int_posture);
 8018eca:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 8018ecc:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 8018ece:	4b09      	ldr	r3, [pc, #36]	; (8018ef4 <_tx_timer_expiration_process+0x3c>)
 8018ed0:	681b      	ldr	r3, [r3, #0]
 8018ed2:	3301      	adds	r3, #1
 8018ed4:	4a07      	ldr	r2, [pc, #28]	; (8018ef4 <_tx_timer_expiration_process+0x3c>)
 8018ed6:	6013      	str	r3, [r2, #0]
 8018ed8:	68fb      	ldr	r3, [r7, #12]
 8018eda:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8018edc:	68bb      	ldr	r3, [r7, #8]
 8018ede:	f383 8810 	msr	PRIMASK, r3
}
 8018ee2:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 8018ee4:	4804      	ldr	r0, [pc, #16]	; (8018ef8 <_tx_timer_expiration_process+0x40>)
 8018ee6:	f7ff fcbf 	bl	8018868 <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8018eea:	bf00      	nop
 8018eec:	3710      	adds	r7, #16
 8018eee:	46bd      	mov	sp, r7
 8018ef0:	bd80      	pop	{r7, pc}
 8018ef2:	bf00      	nop
 8018ef4:	200152e4 	.word	0x200152e4
 8018ef8:	20015394 	.word	0x20015394

08018efc <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 8018efc:	b590      	push	{r4, r7, lr}
 8018efe:	b089      	sub	sp, #36	; 0x24
 8018f00:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 8018f02:	4b28      	ldr	r3, [pc, #160]	; (8018fa4 <_tx_timer_initialize+0xa8>)
 8018f04:	2200      	movs	r2, #0
 8018f06:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 8018f08:	4b27      	ldr	r3, [pc, #156]	; (8018fa8 <_tx_timer_initialize+0xac>)
 8018f0a:	2200      	movs	r2, #0
 8018f0c:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8018f0e:	4b27      	ldr	r3, [pc, #156]	; (8018fac <_tx_timer_initialize+0xb0>)
 8018f10:	2200      	movs	r2, #0
 8018f12:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 8018f14:	4b26      	ldr	r3, [pc, #152]	; (8018fb0 <_tx_timer_initialize+0xb4>)
 8018f16:	2200      	movs	r2, #0
 8018f18:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 8018f1a:	4b26      	ldr	r3, [pc, #152]	; (8018fb4 <_tx_timer_initialize+0xb8>)
 8018f1c:	2200      	movs	r2, #0
 8018f1e:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 8018f20:	2280      	movs	r2, #128	; 0x80
 8018f22:	2100      	movs	r1, #0
 8018f24:	4824      	ldr	r0, [pc, #144]	; (8018fb8 <_tx_timer_initialize+0xbc>)
 8018f26:	f000 fe67 	bl	8019bf8 <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 8018f2a:	4b24      	ldr	r3, [pc, #144]	; (8018fbc <_tx_timer_initialize+0xc0>)
 8018f2c:	4a22      	ldr	r2, [pc, #136]	; (8018fb8 <_tx_timer_initialize+0xbc>)
 8018f2e:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 8018f30:	4b23      	ldr	r3, [pc, #140]	; (8018fc0 <_tx_timer_initialize+0xc4>)
 8018f32:	4a21      	ldr	r2, [pc, #132]	; (8018fb8 <_tx_timer_initialize+0xbc>)
 8018f34:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 8018f36:	4b23      	ldr	r3, [pc, #140]	; (8018fc4 <_tx_timer_initialize+0xc8>)
 8018f38:	4a23      	ldr	r2, [pc, #140]	; (8018fc8 <_tx_timer_initialize+0xcc>)
 8018f3a:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 8018f3c:	4b21      	ldr	r3, [pc, #132]	; (8018fc4 <_tx_timer_initialize+0xc8>)
 8018f3e:	681b      	ldr	r3, [r3, #0]
 8018f40:	3304      	adds	r3, #4
 8018f42:	4a20      	ldr	r2, [pc, #128]	; (8018fc4 <_tx_timer_initialize+0xc8>)
 8018f44:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 8018f46:	4b21      	ldr	r3, [pc, #132]	; (8018fcc <_tx_timer_initialize+0xd0>)
 8018f48:	4a21      	ldr	r2, [pc, #132]	; (8018fd0 <_tx_timer_initialize+0xd4>)
 8018f4a:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 8018f4c:	4b21      	ldr	r3, [pc, #132]	; (8018fd4 <_tx_timer_initialize+0xd8>)
 8018f4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8018f52:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 8018f54:	4b20      	ldr	r3, [pc, #128]	; (8018fd8 <_tx_timer_initialize+0xdc>)
 8018f56:	2200      	movs	r2, #0
 8018f58:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 8018f5a:	4b1c      	ldr	r3, [pc, #112]	; (8018fcc <_tx_timer_initialize+0xd0>)
 8018f5c:	681b      	ldr	r3, [r3, #0]
 8018f5e:	4a1d      	ldr	r2, [pc, #116]	; (8018fd4 <_tx_timer_initialize+0xd8>)
 8018f60:	6812      	ldr	r2, [r2, #0]
 8018f62:	491d      	ldr	r1, [pc, #116]	; (8018fd8 <_tx_timer_initialize+0xdc>)
 8018f64:	6809      	ldr	r1, [r1, #0]
 8018f66:	481c      	ldr	r0, [pc, #112]	; (8018fd8 <_tx_timer_initialize+0xdc>)
 8018f68:	6800      	ldr	r0, [r0, #0]
 8018f6a:	2400      	movs	r4, #0
 8018f6c:	9405      	str	r4, [sp, #20]
 8018f6e:	2400      	movs	r4, #0
 8018f70:	9404      	str	r4, [sp, #16]
 8018f72:	9003      	str	r0, [sp, #12]
 8018f74:	9102      	str	r1, [sp, #8]
 8018f76:	9201      	str	r2, [sp, #4]
 8018f78:	9300      	str	r3, [sp, #0]
 8018f7a:	4b18      	ldr	r3, [pc, #96]	; (8018fdc <_tx_timer_initialize+0xe0>)
 8018f7c:	4a18      	ldr	r2, [pc, #96]	; (8018fe0 <_tx_timer_initialize+0xe4>)
 8018f7e:	4919      	ldr	r1, [pc, #100]	; (8018fe4 <_tx_timer_initialize+0xe8>)
 8018f80:	4819      	ldr	r0, [pc, #100]	; (8018fe8 <_tx_timer_initialize+0xec>)
 8018f82:	f7ff f9a7 	bl	80182d4 <_tx_thread_create>
 8018f86:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 8018f88:	687b      	ldr	r3, [r7, #4]
 8018f8a:	2b00      	cmp	r3, #0
 8018f8c:	d1e5      	bne.n	8018f5a <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 8018f8e:	4b17      	ldr	r3, [pc, #92]	; (8018fec <_tx_timer_initialize+0xf0>)
 8018f90:	2200      	movs	r2, #0
 8018f92:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 8018f94:	4b16      	ldr	r3, [pc, #88]	; (8018ff0 <_tx_timer_initialize+0xf4>)
 8018f96:	2200      	movs	r2, #0
 8018f98:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 8018f9a:	bf00      	nop
 8018f9c:	370c      	adds	r7, #12
 8018f9e:	46bd      	mov	sp, r7
 8018fa0:	bd90      	pop	{r4, r7, pc}
 8018fa2:	bf00      	nop
 8018fa4:	200152f0 	.word	0x200152f0
 8018fa8:	20015850 	.word	0x20015850
 8018fac:	200152f4 	.word	0x200152f4
 8018fb0:	20015384 	.word	0x20015384
 8018fb4:	20015390 	.word	0x20015390
 8018fb8:	200152f8 	.word	0x200152f8
 8018fbc:	20015378 	.word	0x20015378
 8018fc0:	20015380 	.word	0x20015380
 8018fc4:	2001537c 	.word	0x2001537c
 8018fc8:	20015374 	.word	0x20015374
 8018fcc:	20015444 	.word	0x20015444
 8018fd0:	20015450 	.word	0x20015450
 8018fd4:	20015448 	.word	0x20015448
 8018fd8:	2001544c 	.word	0x2001544c
 8018fdc:	4154494d 	.word	0x4154494d
 8018fe0:	08019129 	.word	0x08019129
 8018fe4:	0801ab28 	.word	0x0801ab28
 8018fe8:	20015394 	.word	0x20015394
 8018fec:	20015388 	.word	0x20015388
 8018ff0:	2001538c 	.word	0x2001538c

08018ff4 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 8018ff4:	b480      	push	{r7}
 8018ff6:	b089      	sub	sp, #36	; 0x24
 8018ff8:	af00      	add	r7, sp, #0
 8018ffa:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 8018ffc:	687b      	ldr	r3, [r7, #4]
 8018ffe:	681b      	ldr	r3, [r3, #0]
 8019000:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 8019002:	697b      	ldr	r3, [r7, #20]
 8019004:	2b00      	cmp	r3, #0
 8019006:	d04a      	beq.n	801909e <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 8019008:	697b      	ldr	r3, [r7, #20]
 801900a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801900e:	d046      	beq.n	801909e <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 8019010:	687b      	ldr	r3, [r7, #4]
 8019012:	699b      	ldr	r3, [r3, #24]
 8019014:	2b00      	cmp	r3, #0
 8019016:	d142      	bne.n	801909e <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 8019018:	697b      	ldr	r3, [r7, #20]
 801901a:	2b20      	cmp	r3, #32
 801901c:	d902      	bls.n	8019024 <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 801901e:	231f      	movs	r3, #31
 8019020:	61bb      	str	r3, [r7, #24]
 8019022:	e002      	b.n	801902a <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 8019024:	697b      	ldr	r3, [r7, #20]
 8019026:	3b01      	subs	r3, #1
 8019028:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 801902a:	4b20      	ldr	r3, [pc, #128]	; (80190ac <_tx_timer_system_activate+0xb8>)
 801902c:	681a      	ldr	r2, [r3, #0]
 801902e:	69bb      	ldr	r3, [r7, #24]
 8019030:	009b      	lsls	r3, r3, #2
 8019032:	4413      	add	r3, r2
 8019034:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 8019036:	4b1e      	ldr	r3, [pc, #120]	; (80190b0 <_tx_timer_system_activate+0xbc>)
 8019038:	681b      	ldr	r3, [r3, #0]
 801903a:	69fa      	ldr	r2, [r7, #28]
 801903c:	429a      	cmp	r2, r3
 801903e:	d30b      	bcc.n	8019058 <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 8019040:	4b1b      	ldr	r3, [pc, #108]	; (80190b0 <_tx_timer_system_activate+0xbc>)
 8019042:	681b      	ldr	r3, [r3, #0]
 8019044:	69fa      	ldr	r2, [r7, #28]
 8019046:	1ad3      	subs	r3, r2, r3
 8019048:	109b      	asrs	r3, r3, #2
 801904a:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 801904c:	4b19      	ldr	r3, [pc, #100]	; (80190b4 <_tx_timer_system_activate+0xc0>)
 801904e:	681a      	ldr	r2, [r3, #0]
 8019050:	693b      	ldr	r3, [r7, #16]
 8019052:	009b      	lsls	r3, r3, #2
 8019054:	4413      	add	r3, r2
 8019056:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 8019058:	69fb      	ldr	r3, [r7, #28]
 801905a:	681b      	ldr	r3, [r3, #0]
 801905c:	2b00      	cmp	r3, #0
 801905e:	d109      	bne.n	8019074 <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 8019060:	687b      	ldr	r3, [r7, #4]
 8019062:	687a      	ldr	r2, [r7, #4]
 8019064:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 8019066:	687b      	ldr	r3, [r7, #4]
 8019068:	687a      	ldr	r2, [r7, #4]
 801906a:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 801906c:	69fb      	ldr	r3, [r7, #28]
 801906e:	687a      	ldr	r2, [r7, #4]
 8019070:	601a      	str	r2, [r3, #0]
 8019072:	e011      	b.n	8019098 <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 8019074:	69fb      	ldr	r3, [r7, #28]
 8019076:	681b      	ldr	r3, [r3, #0]
 8019078:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 801907a:	68fb      	ldr	r3, [r7, #12]
 801907c:	695b      	ldr	r3, [r3, #20]
 801907e:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 8019080:	68bb      	ldr	r3, [r7, #8]
 8019082:	687a      	ldr	r2, [r7, #4]
 8019084:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 8019086:	68fb      	ldr	r3, [r7, #12]
 8019088:	687a      	ldr	r2, [r7, #4]
 801908a:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 801908c:	687b      	ldr	r3, [r7, #4]
 801908e:	68fa      	ldr	r2, [r7, #12]
 8019090:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 8019092:	687b      	ldr	r3, [r7, #4]
 8019094:	68ba      	ldr	r2, [r7, #8]
 8019096:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 8019098:	687b      	ldr	r3, [r7, #4]
 801909a:	69fa      	ldr	r2, [r7, #28]
 801909c:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 801909e:	bf00      	nop
 80190a0:	3724      	adds	r7, #36	; 0x24
 80190a2:	46bd      	mov	sp, r7
 80190a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190a8:	4770      	bx	lr
 80190aa:	bf00      	nop
 80190ac:	20015380 	.word	0x20015380
 80190b0:	2001537c 	.word	0x2001537c
 80190b4:	20015378 	.word	0x20015378

080190b8 <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 80190b8:	b480      	push	{r7}
 80190ba:	b087      	sub	sp, #28
 80190bc:	af00      	add	r7, sp, #0
 80190be:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 80190c0:	687b      	ldr	r3, [r7, #4]
 80190c2:	699b      	ldr	r3, [r3, #24]
 80190c4:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 80190c6:	697b      	ldr	r3, [r7, #20]
 80190c8:	2b00      	cmp	r3, #0
 80190ca:	d026      	beq.n	801911a <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 80190cc:	687b      	ldr	r3, [r7, #4]
 80190ce:	691b      	ldr	r3, [r3, #16]
 80190d0:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 80190d2:	687a      	ldr	r2, [r7, #4]
 80190d4:	693b      	ldr	r3, [r7, #16]
 80190d6:	429a      	cmp	r2, r3
 80190d8:	d108      	bne.n	80190ec <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 80190da:	697b      	ldr	r3, [r7, #20]
 80190dc:	681b      	ldr	r3, [r3, #0]
 80190de:	687a      	ldr	r2, [r7, #4]
 80190e0:	429a      	cmp	r2, r3
 80190e2:	d117      	bne.n	8019114 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 80190e4:	697b      	ldr	r3, [r7, #20]
 80190e6:	2200      	movs	r2, #0
 80190e8:	601a      	str	r2, [r3, #0]
 80190ea:	e013      	b.n	8019114 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 80190ec:	687b      	ldr	r3, [r7, #4]
 80190ee:	695b      	ldr	r3, [r3, #20]
 80190f0:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 80190f2:	693b      	ldr	r3, [r7, #16]
 80190f4:	68fa      	ldr	r2, [r7, #12]
 80190f6:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 80190f8:	68fb      	ldr	r3, [r7, #12]
 80190fa:	693a      	ldr	r2, [r7, #16]
 80190fc:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 80190fe:	697b      	ldr	r3, [r7, #20]
 8019100:	681b      	ldr	r3, [r3, #0]
 8019102:	687a      	ldr	r2, [r7, #4]
 8019104:	429a      	cmp	r2, r3
 8019106:	d105      	bne.n	8019114 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 8019108:	693b      	ldr	r3, [r7, #16]
 801910a:	697a      	ldr	r2, [r7, #20]
 801910c:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 801910e:	697b      	ldr	r3, [r7, #20]
 8019110:	693a      	ldr	r2, [r7, #16]
 8019112:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 8019114:	687b      	ldr	r3, [r7, #4]
 8019116:	2200      	movs	r2, #0
 8019118:	619a      	str	r2, [r3, #24]
    }
}
 801911a:	bf00      	nop
 801911c:	371c      	adds	r7, #28
 801911e:	46bd      	mov	sp, r7
 8019120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019124:	4770      	bx	lr
	...

08019128 <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 8019128:	b580      	push	{r7, lr}
 801912a:	b098      	sub	sp, #96	; 0x60
 801912c:	af00      	add	r7, sp, #0
 801912e:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 8019130:	2300      	movs	r3, #0
 8019132:	657b      	str	r3, [r7, #84]	; 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 8019134:	687b      	ldr	r3, [r7, #4]
 8019136:	4a73      	ldr	r2, [pc, #460]	; (8019304 <_tx_timer_thread_entry+0x1dc>)
 8019138:	4293      	cmp	r3, r2
 801913a:	f040 80de 	bne.w	80192fa <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801913e:	f3ef 8310 	mrs	r3, PRIMASK
 8019142:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 8019144:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 8019146:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 8019148:	b672      	cpsid	i
    return(int_posture);
 801914a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 801914c:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 801914e:	4b6e      	ldr	r3, [pc, #440]	; (8019308 <_tx_timer_thread_entry+0x1e0>)
 8019150:	681b      	ldr	r3, [r3, #0]
 8019152:	681b      	ldr	r3, [r3, #0]
 8019154:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 8019156:	68fb      	ldr	r3, [r7, #12]
 8019158:	2b00      	cmp	r3, #0
 801915a:	d003      	beq.n	8019164 <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 801915c:	68fb      	ldr	r3, [r7, #12]
 801915e:	f107 020c 	add.w	r2, r7, #12
 8019162:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 8019164:	4b68      	ldr	r3, [pc, #416]	; (8019308 <_tx_timer_thread_entry+0x1e0>)
 8019166:	681b      	ldr	r3, [r3, #0]
 8019168:	2200      	movs	r2, #0
 801916a:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 801916c:	4b66      	ldr	r3, [pc, #408]	; (8019308 <_tx_timer_thread_entry+0x1e0>)
 801916e:	681b      	ldr	r3, [r3, #0]
 8019170:	3304      	adds	r3, #4
 8019172:	4a65      	ldr	r2, [pc, #404]	; (8019308 <_tx_timer_thread_entry+0x1e0>)
 8019174:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 8019176:	4b64      	ldr	r3, [pc, #400]	; (8019308 <_tx_timer_thread_entry+0x1e0>)
 8019178:	681a      	ldr	r2, [r3, #0]
 801917a:	4b64      	ldr	r3, [pc, #400]	; (801930c <_tx_timer_thread_entry+0x1e4>)
 801917c:	681b      	ldr	r3, [r3, #0]
 801917e:	429a      	cmp	r2, r3
 8019180:	d103      	bne.n	801918a <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 8019182:	4b63      	ldr	r3, [pc, #396]	; (8019310 <_tx_timer_thread_entry+0x1e8>)
 8019184:	681b      	ldr	r3, [r3, #0]
 8019186:	4a60      	ldr	r2, [pc, #384]	; (8019308 <_tx_timer_thread_entry+0x1e0>)
 8019188:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 801918a:	4b62      	ldr	r3, [pc, #392]	; (8019314 <_tx_timer_thread_entry+0x1ec>)
 801918c:	2200      	movs	r2, #0
 801918e:	601a      	str	r2, [r3, #0]
 8019190:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019192:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8019194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019196:	f383 8810 	msr	PRIMASK, r3
}
 801919a:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801919c:	f3ef 8310 	mrs	r3, PRIMASK
 80191a0:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 80191a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 80191a4:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 80191a6:	b672      	cpsid	i
    return(int_posture);
 80191a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 80191aa:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 80191ac:	e07f      	b.n	80192ae <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 80191ae:	68fb      	ldr	r3, [r7, #12]
 80191b0:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 80191b2:	68fb      	ldr	r3, [r7, #12]
 80191b4:	691b      	ldr	r3, [r3, #16]
 80191b6:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 80191b8:	2300      	movs	r3, #0
 80191ba:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 80191bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80191be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80191c0:	429a      	cmp	r2, r3
 80191c2:	d102      	bne.n	80191ca <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 80191c4:	2300      	movs	r3, #0
 80191c6:	60fb      	str	r3, [r7, #12]
 80191c8:	e00e      	b.n	80191e8 <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 80191ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80191cc:	695b      	ldr	r3, [r3, #20]
 80191ce:	647b      	str	r3, [r7, #68]	; 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 80191d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80191d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80191d4:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 80191d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80191d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80191da:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 80191dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80191de:	f107 020c 	add.w	r2, r7, #12
 80191e2:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 80191e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80191e6:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 80191e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80191ea:	681b      	ldr	r3, [r3, #0]
 80191ec:	2b20      	cmp	r3, #32
 80191ee:	d911      	bls.n	8019214 <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 80191f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80191f2:	681b      	ldr	r3, [r3, #0]
 80191f4:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 80191f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80191fa:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 80191fc:	2300      	movs	r3, #0
 80191fe:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8019200:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019202:	f107 0208 	add.w	r2, r7, #8
 8019206:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 8019208:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801920a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801920c:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 801920e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019210:	60bb      	str	r3, [r7, #8]
 8019212:	e01a      	b.n	801924a <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 8019214:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019216:	689b      	ldr	r3, [r3, #8]
 8019218:	65bb      	str	r3, [r7, #88]	; 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 801921a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801921c:	68db      	ldr	r3, [r3, #12]
 801921e:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 8019220:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019222:	685a      	ldr	r2, [r3, #4]
 8019224:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019226:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 8019228:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801922a:	681b      	ldr	r3, [r3, #0]
 801922c:	2b00      	cmp	r3, #0
 801922e:	d009      	beq.n	8019244 <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8019230:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019232:	f107 0208 	add.w	r2, r7, #8
 8019236:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 8019238:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801923a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801923c:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 801923e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019240:	60bb      	str	r3, [r7, #8]
 8019242:	e002      	b.n	801924a <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 8019244:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019246:	2200      	movs	r2, #0
 8019248:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 801924a:	4a33      	ldr	r2, [pc, #204]	; (8019318 <_tx_timer_thread_entry+0x1f0>)
 801924c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801924e:	6013      	str	r3, [r2, #0]
 8019250:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019252:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8019254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019256:	f383 8810 	msr	PRIMASK, r3
}
 801925a:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 801925c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801925e:	2b00      	cmp	r3, #0
 8019260:	d002      	beq.n	8019268 <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 8019262:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8019264:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8019266:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8019268:	f3ef 8310 	mrs	r3, PRIMASK
 801926c:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 801926e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8019270:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8019272:	b672      	cpsid	i
    return(int_posture);
 8019274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 8019276:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 8019278:	4b27      	ldr	r3, [pc, #156]	; (8019318 <_tx_timer_thread_entry+0x1f0>)
 801927a:	2200      	movs	r2, #0
 801927c:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 801927e:	68bb      	ldr	r3, [r7, #8]
 8019280:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8019282:	429a      	cmp	r2, r3
 8019284:	d105      	bne.n	8019292 <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 8019286:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019288:	2200      	movs	r2, #0
 801928a:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 801928c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801928e:	f7ff feb1 	bl	8018ff4 <_tx_timer_system_activate>
 8019292:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019294:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8019296:	69bb      	ldr	r3, [r7, #24]
 8019298:	f383 8810 	msr	PRIMASK, r3
}
 801929c:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801929e:	f3ef 8310 	mrs	r3, PRIMASK
 80192a2:	623b      	str	r3, [r7, #32]
    return(posture);
 80192a4:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 80192a6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 80192a8:	b672      	cpsid	i
    return(int_posture);
 80192aa:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 80192ac:	65fb      	str	r3, [r7, #92]	; 0x5c
            while (expired_timers != TX_NULL)
 80192ae:	68fb      	ldr	r3, [r7, #12]
 80192b0:	2b00      	cmp	r3, #0
 80192b2:	f47f af7c 	bne.w	80191ae <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 80192b6:	4b17      	ldr	r3, [pc, #92]	; (8019314 <_tx_timer_thread_entry+0x1ec>)
 80192b8:	681b      	ldr	r3, [r3, #0]
 80192ba:	2b00      	cmp	r3, #0
 80192bc:	d116      	bne.n	80192ec <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 80192be:	4b17      	ldr	r3, [pc, #92]	; (801931c <_tx_timer_thread_entry+0x1f4>)
 80192c0:	653b      	str	r3, [r7, #80]	; 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 80192c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80192c4:	2203      	movs	r2, #3
 80192c6:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80192c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80192ca:	2201      	movs	r2, #1
 80192cc:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 80192ce:	4b14      	ldr	r3, [pc, #80]	; (8019320 <_tx_timer_thread_entry+0x1f8>)
 80192d0:	681b      	ldr	r3, [r3, #0]
 80192d2:	3301      	adds	r3, #1
 80192d4:	4a12      	ldr	r2, [pc, #72]	; (8019320 <_tx_timer_thread_entry+0x1f8>)
 80192d6:	6013      	str	r3, [r2, #0]
 80192d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80192da:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80192dc:	697b      	ldr	r3, [r7, #20]
 80192de:	f383 8810 	msr	PRIMASK, r3
}
 80192e2:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 80192e4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80192e6:	f7ff fbbf 	bl	8018a68 <_tx_thread_system_suspend>
 80192ea:	e728      	b.n	801913e <_tx_timer_thread_entry+0x16>
 80192ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80192ee:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80192f0:	693b      	ldr	r3, [r7, #16]
 80192f2:	f383 8810 	msr	PRIMASK, r3
}
 80192f6:	bf00      	nop
            TX_DISABLE
 80192f8:	e721      	b.n	801913e <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 80192fa:	bf00      	nop
 80192fc:	3760      	adds	r7, #96	; 0x60
 80192fe:	46bd      	mov	sp, r7
 8019300:	bd80      	pop	{r7, pc}
 8019302:	bf00      	nop
 8019304:	4154494d 	.word	0x4154494d
 8019308:	20015380 	.word	0x20015380
 801930c:	2001537c 	.word	0x2001537c
 8019310:	20015378 	.word	0x20015378
 8019314:	20015384 	.word	0x20015384
 8019318:	20015390 	.word	0x20015390
 801931c:	20015394 	.word	0x20015394
 8019320:	200152e4 	.word	0x200152e4

08019324 <_txe_byte_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr,
                                    ULONG memory_size,  ULONG wait_option)
{
 8019324:	b580      	push	{r7, lr}
 8019326:	b08a      	sub	sp, #40	; 0x28
 8019328:	af00      	add	r7, sp, #0
 801932a:	60f8      	str	r0, [r7, #12]
 801932c:	60b9      	str	r1, [r7, #8]
 801932e:	607a      	str	r2, [r7, #4]
 8019330:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8019332:	2300      	movs	r3, #0
 8019334:	627b      	str	r3, [r7, #36]	; 0x24

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 8019336:	68fb      	ldr	r3, [r7, #12]
 8019338:	2b00      	cmp	r3, #0
 801933a:	d102      	bne.n	8019342 <_txe_byte_allocate+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 801933c:	2302      	movs	r3, #2
 801933e:	627b      	str	r3, [r7, #36]	; 0x24
 8019340:	e029      	b.n	8019396 <_txe_byte_allocate+0x72>
    }

    /* Now check for invalid pool ID.  */
    else if  (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 8019342:	68fb      	ldr	r3, [r7, #12]
 8019344:	681b      	ldr	r3, [r3, #0]
 8019346:	4a2d      	ldr	r2, [pc, #180]	; (80193fc <_txe_byte_allocate+0xd8>)
 8019348:	4293      	cmp	r3, r2
 801934a:	d002      	beq.n	8019352 <_txe_byte_allocate+0x2e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 801934c:	2302      	movs	r3, #2
 801934e:	627b      	str	r3, [r7, #36]	; 0x24
 8019350:	e021      	b.n	8019396 <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid destination for return pointer.  */
    else if (memory_ptr == TX_NULL)
 8019352:	68bb      	ldr	r3, [r7, #8]
 8019354:	2b00      	cmp	r3, #0
 8019356:	d102      	bne.n	801935e <_txe_byte_allocate+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 8019358:	2303      	movs	r3, #3
 801935a:	627b      	str	r3, [r7, #36]	; 0x24
 801935c:	e01b      	b.n	8019396 <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid memory size.  */
    else if (memory_size == ((ULONG) 0))
 801935e:	687b      	ldr	r3, [r7, #4]
 8019360:	2b00      	cmp	r3, #0
 8019362:	d102      	bne.n	801936a <_txe_byte_allocate+0x46>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 8019364:	2305      	movs	r3, #5
 8019366:	627b      	str	r3, [r7, #36]	; 0x24
 8019368:	e015      	b.n	8019396 <_txe_byte_allocate+0x72>
    }

    /* Determine if the size is greater than the pool size.  */
    else if (memory_size > pool_ptr -> tx_byte_pool_size)
 801936a:	68fb      	ldr	r3, [r7, #12]
 801936c:	69db      	ldr	r3, [r3, #28]
 801936e:	687a      	ldr	r2, [r7, #4]
 8019370:	429a      	cmp	r2, r3
 8019372:	d902      	bls.n	801937a <_txe_byte_allocate+0x56>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 8019374:	2305      	movs	r3, #5
 8019376:	627b      	str	r3, [r7, #36]	; 0x24
 8019378:	e00d      	b.n	8019396 <_txe_byte_allocate+0x72>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 801937a:	683b      	ldr	r3, [r7, #0]
 801937c:	2b00      	cmp	r3, #0
 801937e:	d00a      	beq.n	8019396 <_txe_byte_allocate+0x72>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8019380:	f3ef 8305 	mrs	r3, IPSR
 8019384:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 8019386:	69fa      	ldr	r2, [r7, #28]
        {

            /* Is call from ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8019388:	4b1d      	ldr	r3, [pc, #116]	; (8019400 <_txe_byte_allocate+0xdc>)
 801938a:	681b      	ldr	r3, [r3, #0]
 801938c:	4313      	orrs	r3, r2
 801938e:	2b00      	cmp	r3, #0
 8019390:	d001      	beq.n	8019396 <_txe_byte_allocate+0x72>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 8019392:	2304      	movs	r3, #4
 8019394:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Check for timer execution.  */
    if (status == TX_SUCCESS)
 8019396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019398:	2b00      	cmp	r3, #0
 801939a:	d108      	bne.n	80193ae <_txe_byte_allocate+0x8a>
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 801939c:	4b19      	ldr	r3, [pc, #100]	; (8019404 <_txe_byte_allocate+0xe0>)
 801939e:	681b      	ldr	r3, [r3, #0]
 80193a0:	623b      	str	r3, [r7, #32]

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 80193a2:	6a3b      	ldr	r3, [r7, #32]
 80193a4:	4a18      	ldr	r2, [pc, #96]	; (8019408 <_txe_byte_allocate+0xe4>)
 80193a6:	4293      	cmp	r3, r2
 80193a8:	d101      	bne.n	80193ae <_txe_byte_allocate+0x8a>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 80193aa:	2313      	movs	r3, #19
 80193ac:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#endif

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 80193ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80193b0:	2b00      	cmp	r3, #0
 80193b2:	d114      	bne.n	80193de <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80193b4:	f3ef 8305 	mrs	r3, IPSR
 80193b8:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 80193ba:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80193bc:	4b10      	ldr	r3, [pc, #64]	; (8019400 <_txe_byte_allocate+0xdc>)
 80193be:	681b      	ldr	r3, [r3, #0]
 80193c0:	4313      	orrs	r3, r2
 80193c2:	2b00      	cmp	r3, #0
 80193c4:	d00b      	beq.n	80193de <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80193c6:	f3ef 8305 	mrs	r3, IPSR
 80193ca:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80193cc:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 80193ce:	4b0c      	ldr	r3, [pc, #48]	; (8019400 <_txe_byte_allocate+0xdc>)
 80193d0:	681b      	ldr	r3, [r3, #0]
 80193d2:	4313      	orrs	r3, r2
 80193d4:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80193d8:	d201      	bcs.n	80193de <_txe_byte_allocate+0xba>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80193da:	2313      	movs	r3, #19
 80193dc:	627b      	str	r3, [r7, #36]	; 0x24
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80193de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80193e0:	2b00      	cmp	r3, #0
 80193e2:	d106      	bne.n	80193f2 <_txe_byte_allocate+0xce>
    {

        /* Call actual byte memory allocate function.  */
        status =  _tx_byte_allocate(pool_ptr, memory_ptr, memory_size,  wait_option);
 80193e4:	683b      	ldr	r3, [r7, #0]
 80193e6:	687a      	ldr	r2, [r7, #4]
 80193e8:	68b9      	ldr	r1, [r7, #8]
 80193ea:	68f8      	ldr	r0, [r7, #12]
 80193ec:	f7fd fb74 	bl	8016ad8 <_tx_byte_allocate>
 80193f0:	6278      	str	r0, [r7, #36]	; 0x24
    }

    /* Return completion status.  */
    return(status);
 80193f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80193f4:	4618      	mov	r0, r3
 80193f6:	3728      	adds	r7, #40	; 0x28
 80193f8:	46bd      	mov	sp, r7
 80193fa:	bd80      	pop	{r7, pc}
 80193fc:	42595445 	.word	0x42595445
 8019400:	200010dc 	.word	0x200010dc
 8019404:	2001524c 	.word	0x2001524c
 8019408:	20015394 	.word	0x20015394

0801940c <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 801940c:	b580      	push	{r7, lr}
 801940e:	b092      	sub	sp, #72	; 0x48
 8019410:	af00      	add	r7, sp, #0
 8019412:	60f8      	str	r0, [r7, #12]
 8019414:	60b9      	str	r1, [r7, #8]
 8019416:	607a      	str	r2, [r7, #4]
 8019418:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 801941a:	2300      	movs	r3, #0
 801941c:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 801941e:	68fb      	ldr	r3, [r7, #12]
 8019420:	2b00      	cmp	r3, #0
 8019422:	d102      	bne.n	801942a <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8019424:	2302      	movs	r3, #2
 8019426:	647b      	str	r3, [r7, #68]	; 0x44
 8019428:	e075      	b.n	8019516 <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 801942a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801942c:	2b34      	cmp	r3, #52	; 0x34
 801942e:	d002      	beq.n	8019436 <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8019430:	2302      	movs	r3, #2
 8019432:	647b      	str	r3, [r7, #68]	; 0x44
 8019434:	e06f      	b.n	8019516 <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8019436:	f3ef 8310 	mrs	r3, PRIMASK
 801943a:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 801943c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 801943e:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8019440:	b672      	cpsid	i
    return(int_posture);
 8019442:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8019444:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8019446:	4b3b      	ldr	r3, [pc, #236]	; (8019534 <_txe_byte_pool_create+0x128>)
 8019448:	681b      	ldr	r3, [r3, #0]
 801944a:	3301      	adds	r3, #1
 801944c:	4a39      	ldr	r2, [pc, #228]	; (8019534 <_txe_byte_pool_create+0x128>)
 801944e:	6013      	str	r3, [r2, #0]
 8019450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019452:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8019454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019456:	f383 8810 	msr	PRIMASK, r3
}
 801945a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 801945c:	4b36      	ldr	r3, [pc, #216]	; (8019538 <_txe_byte_pool_create+0x12c>)
 801945e:	681b      	ldr	r3, [r3, #0]
 8019460:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 8019462:	2300      	movs	r3, #0
 8019464:	643b      	str	r3, [r7, #64]	; 0x40
 8019466:	e009      	b.n	801947c <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 8019468:	68fa      	ldr	r2, [r7, #12]
 801946a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801946c:	429a      	cmp	r2, r3
 801946e:	d00b      	beq.n	8019488 <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 8019470:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019474:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 8019476:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019478:	3301      	adds	r3, #1
 801947a:	643b      	str	r3, [r7, #64]	; 0x40
 801947c:	4b2f      	ldr	r3, [pc, #188]	; (801953c <_txe_byte_pool_create+0x130>)
 801947e:	681b      	ldr	r3, [r3, #0]
 8019480:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8019482:	429a      	cmp	r2, r3
 8019484:	d3f0      	bcc.n	8019468 <_txe_byte_pool_create+0x5c>
 8019486:	e000      	b.n	801948a <_txe_byte_pool_create+0x7e>
                break;
 8019488:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801948a:	f3ef 8310 	mrs	r3, PRIMASK
 801948e:	623b      	str	r3, [r7, #32]
    return(posture);
 8019490:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8019492:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8019494:	b672      	cpsid	i
    return(int_posture);
 8019496:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8019498:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 801949a:	4b26      	ldr	r3, [pc, #152]	; (8019534 <_txe_byte_pool_create+0x128>)
 801949c:	681b      	ldr	r3, [r3, #0]
 801949e:	3b01      	subs	r3, #1
 80194a0:	4a24      	ldr	r2, [pc, #144]	; (8019534 <_txe_byte_pool_create+0x128>)
 80194a2:	6013      	str	r3, [r2, #0]
 80194a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80194a6:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80194a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80194aa:	f383 8810 	msr	PRIMASK, r3
}
 80194ae:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80194b0:	f7ff f9a0 	bl	80187f4 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 80194b4:	68fa      	ldr	r2, [r7, #12]
 80194b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80194b8:	429a      	cmp	r2, r3
 80194ba:	d102      	bne.n	80194c2 <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 80194bc:	2302      	movs	r3, #2
 80194be:	647b      	str	r3, [r7, #68]	; 0x44
 80194c0:	e029      	b.n	8019516 <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 80194c2:	687b      	ldr	r3, [r7, #4]
 80194c4:	2b00      	cmp	r3, #0
 80194c6:	d102      	bne.n	80194ce <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 80194c8:	2303      	movs	r3, #3
 80194ca:	647b      	str	r3, [r7, #68]	; 0x44
 80194cc:	e023      	b.n	8019516 <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 80194ce:	683b      	ldr	r3, [r7, #0]
 80194d0:	2b63      	cmp	r3, #99	; 0x63
 80194d2:	d802      	bhi.n	80194da <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 80194d4:	2305      	movs	r3, #5
 80194d6:	647b      	str	r3, [r7, #68]	; 0x44
 80194d8:	e01d      	b.n	8019516 <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 80194da:	4b19      	ldr	r3, [pc, #100]	; (8019540 <_txe_byte_pool_create+0x134>)
 80194dc:	681b      	ldr	r3, [r3, #0]
 80194de:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 80194e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80194e2:	4a18      	ldr	r2, [pc, #96]	; (8019544 <_txe_byte_pool_create+0x138>)
 80194e4:	4293      	cmp	r3, r2
 80194e6:	d101      	bne.n	80194ec <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80194e8:	2313      	movs	r3, #19
 80194ea:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80194ec:	f3ef 8305 	mrs	r3, IPSR
 80194f0:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 80194f2:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80194f4:	4b14      	ldr	r3, [pc, #80]	; (8019548 <_txe_byte_pool_create+0x13c>)
 80194f6:	681b      	ldr	r3, [r3, #0]
 80194f8:	4313      	orrs	r3, r2
 80194fa:	2b00      	cmp	r3, #0
 80194fc:	d00b      	beq.n	8019516 <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80194fe:	f3ef 8305 	mrs	r3, IPSR
 8019502:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8019504:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8019506:	4b10      	ldr	r3, [pc, #64]	; (8019548 <_txe_byte_pool_create+0x13c>)
 8019508:	681b      	ldr	r3, [r3, #0]
 801950a:	4313      	orrs	r3, r2
 801950c:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8019510:	d201      	bcs.n	8019516 <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8019512:	2313      	movs	r3, #19
 8019514:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8019516:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019518:	2b00      	cmp	r3, #0
 801951a:	d106      	bne.n	801952a <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 801951c:	683b      	ldr	r3, [r7, #0]
 801951e:	687a      	ldr	r2, [r7, #4]
 8019520:	68b9      	ldr	r1, [r7, #8]
 8019522:	68f8      	ldr	r0, [r7, #12]
 8019524:	f7fd fc1a 	bl	8016d5c <_tx_byte_pool_create>
 8019528:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 801952a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 801952c:	4618      	mov	r0, r3
 801952e:	3748      	adds	r7, #72	; 0x48
 8019530:	46bd      	mov	sp, r7
 8019532:	bd80      	pop	{r7, pc}
 8019534:	200152e4 	.word	0x200152e4
 8019538:	2001523c 	.word	0x2001523c
 801953c:	20015240 	.word	0x20015240
 8019540:	2001524c 	.word	0x2001524c
 8019544:	20015394 	.word	0x20015394
 8019548:	200010dc 	.word	0x200010dc

0801954c <_txe_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count, UINT semaphore_control_block_size)
{
 801954c:	b580      	push	{r7, lr}
 801954e:	b092      	sub	sp, #72	; 0x48
 8019550:	af00      	add	r7, sp, #0
 8019552:	60f8      	str	r0, [r7, #12]
 8019554:	60b9      	str	r1, [r7, #8]
 8019556:	607a      	str	r2, [r7, #4]
 8019558:	603b      	str	r3, [r7, #0]
TX_THREAD           *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 801955a:	2300      	movs	r3, #0
 801955c:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 801955e:	68fb      	ldr	r3, [r7, #12]
 8019560:	2b00      	cmp	r3, #0
 8019562:	d102      	bne.n	801956a <_txe_semaphore_create+0x1e>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8019564:	230c      	movs	r3, #12
 8019566:	647b      	str	r3, [r7, #68]	; 0x44
 8019568:	e054      	b.n	8019614 <_txe_semaphore_create+0xc8>
    }

    /* Now check for a valid semaphore ID.  */
    else if (semaphore_control_block_size != (sizeof(TX_SEMAPHORE)))
 801956a:	683b      	ldr	r3, [r7, #0]
 801956c:	2b1c      	cmp	r3, #28
 801956e:	d002      	beq.n	8019576 <_txe_semaphore_create+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8019570:	230c      	movs	r3, #12
 8019572:	647b      	str	r3, [r7, #68]	; 0x44
 8019574:	e04e      	b.n	8019614 <_txe_semaphore_create+0xc8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8019576:	f3ef 8310 	mrs	r3, PRIMASK
 801957a:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 801957c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 801957e:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8019580:	b672      	cpsid	i
    return(int_posture);
 8019582:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8019584:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8019586:	4b36      	ldr	r3, [pc, #216]	; (8019660 <_txe_semaphore_create+0x114>)
 8019588:	681b      	ldr	r3, [r3, #0]
 801958a:	3301      	adds	r3, #1
 801958c:	4a34      	ldr	r2, [pc, #208]	; (8019660 <_txe_semaphore_create+0x114>)
 801958e:	6013      	str	r3, [r2, #0]
 8019590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019592:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8019594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019596:	f383 8810 	msr	PRIMASK, r3
}
 801959a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_semaphore =  _tx_semaphore_created_ptr;
 801959c:	4b31      	ldr	r3, [pc, #196]	; (8019664 <_txe_semaphore_create+0x118>)
 801959e:	681b      	ldr	r3, [r3, #0]
 80195a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 80195a2:	2300      	movs	r3, #0
 80195a4:	643b      	str	r3, [r7, #64]	; 0x40
 80195a6:	e009      	b.n	80195bc <_txe_semaphore_create+0x70>
        {

            /* Determine if this semaphore matches the current semaphore in the list.  */
            if (semaphore_ptr == next_semaphore)
 80195a8:	68fa      	ldr	r2, [r7, #12]
 80195aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80195ac:	429a      	cmp	r2, r3
 80195ae:	d00b      	beq.n	80195c8 <_txe_semaphore_create+0x7c>
            }
            else
            {

                /* Move to next semaphore.  */
                next_semaphore =  next_semaphore -> tx_semaphore_created_next;
 80195b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80195b2:	695b      	ldr	r3, [r3, #20]
 80195b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 80195b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80195b8:	3301      	adds	r3, #1
 80195ba:	643b      	str	r3, [r7, #64]	; 0x40
 80195bc:	4b2a      	ldr	r3, [pc, #168]	; (8019668 <_txe_semaphore_create+0x11c>)
 80195be:	681b      	ldr	r3, [r3, #0]
 80195c0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80195c2:	429a      	cmp	r2, r3
 80195c4:	d3f0      	bcc.n	80195a8 <_txe_semaphore_create+0x5c>
 80195c6:	e000      	b.n	80195ca <_txe_semaphore_create+0x7e>
                break;
 80195c8:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80195ca:	f3ef 8310 	mrs	r3, PRIMASK
 80195ce:	623b      	str	r3, [r7, #32]
    return(posture);
 80195d0:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 80195d2:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 80195d4:	b672      	cpsid	i
    return(int_posture);
 80195d6:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 80195d8:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 80195da:	4b21      	ldr	r3, [pc, #132]	; (8019660 <_txe_semaphore_create+0x114>)
 80195dc:	681b      	ldr	r3, [r3, #0]
 80195de:	3b01      	subs	r3, #1
 80195e0:	4a1f      	ldr	r2, [pc, #124]	; (8019660 <_txe_semaphore_create+0x114>)
 80195e2:	6013      	str	r3, [r2, #0]
 80195e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80195e6:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80195e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80195ea:	f383 8810 	msr	PRIMASK, r3
}
 80195ee:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80195f0:	f7ff f900 	bl	80187f4 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate semaphore.  */
        if (semaphore_ptr == next_semaphore)
 80195f4:	68fa      	ldr	r2, [r7, #12]
 80195f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80195f8:	429a      	cmp	r2, r3
 80195fa:	d102      	bne.n	8019602 <_txe_semaphore_create+0xb6>
        {

            /* Semaphore is already created, return appropriate error code.  */
            status =  TX_SEMAPHORE_ERROR;
 80195fc:	230c      	movs	r3, #12
 80195fe:	647b      	str	r3, [r7, #68]	; 0x44
 8019600:	e008      	b.n	8019614 <_txe_semaphore_create+0xc8>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8019602:	4b1a      	ldr	r3, [pc, #104]	; (801966c <_txe_semaphore_create+0x120>)
 8019604:	681b      	ldr	r3, [r3, #0]
 8019606:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8019608:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801960a:	4a19      	ldr	r2, [pc, #100]	; (8019670 <_txe_semaphore_create+0x124>)
 801960c:	4293      	cmp	r3, r2
 801960e:	d101      	bne.n	8019614 <_txe_semaphore_create+0xc8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8019610:	2313      	movs	r3, #19
 8019612:	647b      	str	r3, [r7, #68]	; 0x44
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8019614:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019616:	2b00      	cmp	r3, #0
 8019618:	d114      	bne.n	8019644 <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801961a:	f3ef 8305 	mrs	r3, IPSR
 801961e:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8019620:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8019622:	4b14      	ldr	r3, [pc, #80]	; (8019674 <_txe_semaphore_create+0x128>)
 8019624:	681b      	ldr	r3, [r3, #0]
 8019626:	4313      	orrs	r3, r2
 8019628:	2b00      	cmp	r3, #0
 801962a:	d00b      	beq.n	8019644 <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801962c:	f3ef 8305 	mrs	r3, IPSR
 8019630:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8019632:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8019634:	4b0f      	ldr	r3, [pc, #60]	; (8019674 <_txe_semaphore_create+0x128>)
 8019636:	681b      	ldr	r3, [r3, #0]
 8019638:	4313      	orrs	r3, r2
 801963a:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 801963e:	d201      	bcs.n	8019644 <_txe_semaphore_create+0xf8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8019640:	2313      	movs	r3, #19
 8019642:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8019644:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019646:	2b00      	cmp	r3, #0
 8019648:	d105      	bne.n	8019656 <_txe_semaphore_create+0x10a>
    {

        /* Call actual semaphore create function.  */
        status =  _tx_semaphore_create(semaphore_ptr, name_ptr, initial_count);
 801964a:	687a      	ldr	r2, [r7, #4]
 801964c:	68b9      	ldr	r1, [r7, #8]
 801964e:	68f8      	ldr	r0, [r7, #12]
 8019650:	f7fe fc74 	bl	8017f3c <_tx_semaphore_create>
 8019654:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 8019656:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8019658:	4618      	mov	r0, r3
 801965a:	3748      	adds	r7, #72	; 0x48
 801965c:	46bd      	mov	sp, r7
 801965e:	bd80      	pop	{r7, pc}
 8019660:	200152e4 	.word	0x200152e4
 8019664:	20015214 	.word	0x20015214
 8019668:	20015218 	.word	0x20015218
 801966c:	2001524c 	.word	0x2001524c
 8019670:	20015394 	.word	0x20015394
 8019674:	200010dc 	.word	0x200010dc

08019678 <_txe_semaphore_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_delete(TX_SEMAPHORE *semaphore_ptr)
{
 8019678:	b580      	push	{r7, lr}
 801967a:	b086      	sub	sp, #24
 801967c:	af00      	add	r7, sp, #0
 801967e:	6078      	str	r0, [r7, #4]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8019680:	2300      	movs	r3, #0
 8019682:	617b      	str	r3, [r7, #20]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 8019684:	687b      	ldr	r3, [r7, #4]
 8019686:	2b00      	cmp	r3, #0
 8019688:	d102      	bne.n	8019690 <_txe_semaphore_delete+0x18>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 801968a:	230c      	movs	r3, #12
 801968c:	617b      	str	r3, [r7, #20]
 801968e:	e01c      	b.n	80196ca <_txe_semaphore_delete+0x52>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 8019690:	687b      	ldr	r3, [r7, #4]
 8019692:	681b      	ldr	r3, [r3, #0]
 8019694:	4a13      	ldr	r2, [pc, #76]	; (80196e4 <_txe_semaphore_delete+0x6c>)
 8019696:	4293      	cmp	r3, r2
 8019698:	d002      	beq.n	80196a0 <_txe_semaphore_delete+0x28>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 801969a:	230c      	movs	r3, #12
 801969c:	617b      	str	r3, [r7, #20]
 801969e:	e014      	b.n	80196ca <_txe_semaphore_delete+0x52>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80196a0:	f3ef 8305 	mrs	r3, IPSR
 80196a4:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 80196a6:	68fa      	ldr	r2, [r7, #12]
    {

        /* Check for invalid caller of this function.  */

        /* Is the caller an ISR or Initialization?  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80196a8:	4b0f      	ldr	r3, [pc, #60]	; (80196e8 <_txe_semaphore_delete+0x70>)
 80196aa:	681b      	ldr	r3, [r3, #0]
 80196ac:	4313      	orrs	r3, r2
 80196ae:	2b00      	cmp	r3, #0
 80196b0:	d002      	beq.n	80196b8 <_txe_semaphore_delete+0x40>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 80196b2:	2313      	movs	r3, #19
 80196b4:	617b      	str	r3, [r7, #20]
 80196b6:	e008      	b.n	80196ca <_txe_semaphore_delete+0x52>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 80196b8:	4b0c      	ldr	r3, [pc, #48]	; (80196ec <_txe_semaphore_delete+0x74>)
 80196ba:	681b      	ldr	r3, [r3, #0]
 80196bc:	613b      	str	r3, [r7, #16]

            /* Is the caller the system timer thread?  */
            if (thread_ptr == &_tx_timer_thread)
 80196be:	693b      	ldr	r3, [r7, #16]
 80196c0:	4a0b      	ldr	r2, [pc, #44]	; (80196f0 <_txe_semaphore_delete+0x78>)
 80196c2:	4293      	cmp	r3, r2
 80196c4:	d101      	bne.n	80196ca <_txe_semaphore_delete+0x52>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80196c6:	2313      	movs	r3, #19
 80196c8:	617b      	str	r3, [r7, #20]
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80196ca:	697b      	ldr	r3, [r7, #20]
 80196cc:	2b00      	cmp	r3, #0
 80196ce:	d103      	bne.n	80196d8 <_txe_semaphore_delete+0x60>
    {

        /* Call actual semaphore delete function.  */
        status =  _tx_semaphore_delete(semaphore_ptr);
 80196d0:	6878      	ldr	r0, [r7, #4]
 80196d2:	f7fe fc85 	bl	8017fe0 <_tx_semaphore_delete>
 80196d6:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 80196d8:	697b      	ldr	r3, [r7, #20]
}
 80196da:	4618      	mov	r0, r3
 80196dc:	3718      	adds	r7, #24
 80196de:	46bd      	mov	sp, r7
 80196e0:	bd80      	pop	{r7, pc}
 80196e2:	bf00      	nop
 80196e4:	53454d41 	.word	0x53454d41
 80196e8:	200010dc 	.word	0x200010dc
 80196ec:	2001524c 	.word	0x2001524c
 80196f0:	20015394 	.word	0x20015394

080196f4 <_txe_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 80196f4:	b580      	push	{r7, lr}
 80196f6:	b086      	sub	sp, #24
 80196f8:	af00      	add	r7, sp, #0
 80196fa:	6078      	str	r0, [r7, #4]
 80196fc:	6039      	str	r1, [r7, #0]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80196fe:	2300      	movs	r3, #0
 8019700:	617b      	str	r3, [r7, #20]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 8019702:	687b      	ldr	r3, [r7, #4]
 8019704:	2b00      	cmp	r3, #0
 8019706:	d102      	bne.n	801970e <_txe_semaphore_get+0x1a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8019708:	230c      	movs	r3, #12
 801970a:	617b      	str	r3, [r7, #20]
 801970c:	e01f      	b.n	801974e <_txe_semaphore_get+0x5a>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 801970e:	687b      	ldr	r3, [r7, #4]
 8019710:	681b      	ldr	r3, [r3, #0]
 8019712:	4a15      	ldr	r2, [pc, #84]	; (8019768 <_txe_semaphore_get+0x74>)
 8019714:	4293      	cmp	r3, r2
 8019716:	d002      	beq.n	801971e <_txe_semaphore_get+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8019718:	230c      	movs	r3, #12
 801971a:	617b      	str	r3, [r7, #20]
 801971c:	e017      	b.n	801974e <_txe_semaphore_get+0x5a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 801971e:	683b      	ldr	r3, [r7, #0]
 8019720:	2b00      	cmp	r3, #0
 8019722:	d014      	beq.n	801974e <_txe_semaphore_get+0x5a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8019724:	f3ef 8305 	mrs	r3, IPSR
 8019728:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 801972a:	68fa      	ldr	r2, [r7, #12]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 801972c:	4b0f      	ldr	r3, [pc, #60]	; (801976c <_txe_semaphore_get+0x78>)
 801972e:	681b      	ldr	r3, [r3, #0]
 8019730:	4313      	orrs	r3, r2
 8019732:	2b00      	cmp	r3, #0
 8019734:	d002      	beq.n	801973c <_txe_semaphore_get+0x48>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 8019736:	2304      	movs	r3, #4
 8019738:	617b      	str	r3, [r7, #20]
 801973a:	e008      	b.n	801974e <_txe_semaphore_get+0x5a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 801973c:	4b0c      	ldr	r3, [pc, #48]	; (8019770 <_txe_semaphore_get+0x7c>)
 801973e:	681b      	ldr	r3, [r3, #0]
 8019740:	613b      	str	r3, [r7, #16]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 8019742:	693b      	ldr	r3, [r7, #16]
 8019744:	4a0b      	ldr	r2, [pc, #44]	; (8019774 <_txe_semaphore_get+0x80>)
 8019746:	4293      	cmp	r3, r2
 8019748:	d101      	bne.n	801974e <_txe_semaphore_get+0x5a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 801974a:	2304      	movs	r3, #4
 801974c:	617b      	str	r3, [r7, #20]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 801974e:	697b      	ldr	r3, [r7, #20]
 8019750:	2b00      	cmp	r3, #0
 8019752:	d104      	bne.n	801975e <_txe_semaphore_get+0x6a>
    {

        /* Call actual get semaphore function.  */
        status =  _tx_semaphore_get(semaphore_ptr, wait_option);
 8019754:	6839      	ldr	r1, [r7, #0]
 8019756:	6878      	ldr	r0, [r7, #4]
 8019758:	f7fe fcd2 	bl	8018100 <_tx_semaphore_get>
 801975c:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 801975e:	697b      	ldr	r3, [r7, #20]
}
 8019760:	4618      	mov	r0, r3
 8019762:	3718      	adds	r7, #24
 8019764:	46bd      	mov	sp, r7
 8019766:	bd80      	pop	{r7, pc}
 8019768:	53454d41 	.word	0x53454d41
 801976c:	200010dc 	.word	0x200010dc
 8019770:	2001524c 	.word	0x2001524c
 8019774:	20015394 	.word	0x20015394

08019778 <_txe_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 8019778:	b580      	push	{r7, lr}
 801977a:	b084      	sub	sp, #16
 801977c:	af00      	add	r7, sp, #0
 801977e:	6078      	str	r0, [r7, #4]

UINT        status;


    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 8019780:	687b      	ldr	r3, [r7, #4]
 8019782:	2b00      	cmp	r3, #0
 8019784:	d102      	bne.n	801978c <_txe_semaphore_put+0x14>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8019786:	230c      	movs	r3, #12
 8019788:	60fb      	str	r3, [r7, #12]
 801978a:	e00b      	b.n	80197a4 <_txe_semaphore_put+0x2c>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 801978c:	687b      	ldr	r3, [r7, #4]
 801978e:	681b      	ldr	r3, [r3, #0]
 8019790:	4a07      	ldr	r2, [pc, #28]	; (80197b0 <_txe_semaphore_put+0x38>)
 8019792:	4293      	cmp	r3, r2
 8019794:	d002      	beq.n	801979c <_txe_semaphore_put+0x24>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8019796:	230c      	movs	r3, #12
 8019798:	60fb      	str	r3, [r7, #12]
 801979a:	e003      	b.n	80197a4 <_txe_semaphore_put+0x2c>
    }
    else
    {

        /* Call actual put semaphore function.  */
        status =  _tx_semaphore_put(semaphore_ptr);
 801979c:	6878      	ldr	r0, [r7, #4]
 801979e:	f7fe fd41 	bl	8018224 <_tx_semaphore_put>
 80197a2:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 80197a4:	68fb      	ldr	r3, [r7, #12]
}
 80197a6:	4618      	mov	r0, r3
 80197a8:	3710      	adds	r7, #16
 80197aa:	46bd      	mov	sp, r7
 80197ac:	bd80      	pop	{r7, pc}
 80197ae:	bf00      	nop
 80197b0:	53454d41 	.word	0x53454d41

080197b4 <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 80197b4:	b580      	push	{r7, lr}
 80197b6:	b09a      	sub	sp, #104	; 0x68
 80197b8:	af06      	add	r7, sp, #24
 80197ba:	60f8      	str	r0, [r7, #12]
 80197bc:	60b9      	str	r1, [r7, #8]
 80197be:	607a      	str	r2, [r7, #4]
 80197c0:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80197c2:	2300      	movs	r3, #0
 80197c4:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 80197c6:	68fb      	ldr	r3, [r7, #12]
 80197c8:	2b00      	cmp	r3, #0
 80197ca:	d102      	bne.n	80197d2 <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 80197cc:	230e      	movs	r3, #14
 80197ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80197d0:	e0bb      	b.n	801994a <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 80197d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80197d4:	2bb0      	cmp	r3, #176	; 0xb0
 80197d6:	d002      	beq.n	80197de <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 80197d8:	230e      	movs	r3, #14
 80197da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80197dc:	e0b5      	b.n	801994a <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80197de:	f3ef 8310 	mrs	r3, PRIMASK
 80197e2:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 80197e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 80197e6:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 80197e8:	b672      	cpsid	i
    return(int_posture);
 80197ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 80197ec:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 80197ee:	4b64      	ldr	r3, [pc, #400]	; (8019980 <_txe_thread_create+0x1cc>)
 80197f0:	681b      	ldr	r3, [r3, #0]
 80197f2:	3301      	adds	r3, #1
 80197f4:	4a62      	ldr	r2, [pc, #392]	; (8019980 <_txe_thread_create+0x1cc>)
 80197f6:	6013      	str	r3, [r2, #0]
 80197f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80197fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80197fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80197fe:	f383 8810 	msr	PRIMASK, r3
}
 8019802:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 8019804:	2300      	movs	r3, #0
 8019806:	64bb      	str	r3, [r7, #72]	; 0x48
        next_thread =  _tx_thread_created_ptr;
 8019808:	4b5e      	ldr	r3, [pc, #376]	; (8019984 <_txe_thread_create+0x1d0>)
 801980a:	681b      	ldr	r3, [r3, #0]
 801980c:	643b      	str	r3, [r7, #64]	; 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 801980e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8019810:	63bb      	str	r3, [r7, #56]	; 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 8019812:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019814:	3b01      	subs	r3, #1
 8019816:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019818:	4413      	add	r3, r2
 801981a:	63bb      	str	r3, [r7, #56]	; 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 801981c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801981e:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8019820:	2300      	movs	r3, #0
 8019822:	647b      	str	r3, [r7, #68]	; 0x44
 8019824:	e02b      	b.n	801987e <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 8019826:	68fa      	ldr	r2, [r7, #12]
 8019828:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801982a:	429a      	cmp	r2, r3
 801982c:	d101      	bne.n	8019832 <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 801982e:	2301      	movs	r3, #1
 8019830:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 8019832:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019834:	2b01      	cmp	r3, #1
 8019836:	d028      	beq.n	801988a <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 8019838:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801983a:	68db      	ldr	r3, [r3, #12]
 801983c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801983e:	429a      	cmp	r2, r3
 8019840:	d308      	bcc.n	8019854 <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 8019842:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019844:	691b      	ldr	r3, [r3, #16]
 8019846:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8019848:	429a      	cmp	r2, r3
 801984a:	d203      	bcs.n	8019854 <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 801984c:	2300      	movs	r3, #0
 801984e:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8019850:	2301      	movs	r3, #1
 8019852:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 8019854:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019856:	68db      	ldr	r3, [r3, #12]
 8019858:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801985a:	429a      	cmp	r2, r3
 801985c:	d308      	bcc.n	8019870 <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 801985e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019860:	691b      	ldr	r3, [r3, #16]
 8019862:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8019864:	429a      	cmp	r2, r3
 8019866:	d203      	bcs.n	8019870 <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 8019868:	2300      	movs	r3, #0
 801986a:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 801986c:	2301      	movs	r3, #1
 801986e:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 8019870:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8019876:	643b      	str	r3, [r7, #64]	; 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8019878:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801987a:	3301      	adds	r3, #1
 801987c:	647b      	str	r3, [r7, #68]	; 0x44
 801987e:	4b42      	ldr	r3, [pc, #264]	; (8019988 <_txe_thread_create+0x1d4>)
 8019880:	681b      	ldr	r3, [r3, #0]
 8019882:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8019884:	429a      	cmp	r2, r3
 8019886:	d3ce      	bcc.n	8019826 <_txe_thread_create+0x72>
 8019888:	e000      	b.n	801988c <_txe_thread_create+0xd8>
                break;
 801988a:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801988c:	f3ef 8310 	mrs	r3, PRIMASK
 8019890:	61fb      	str	r3, [r7, #28]
    return(posture);
 8019892:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8019894:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8019896:	b672      	cpsid	i
    return(int_posture);
 8019898:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 801989a:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 801989c:	4b38      	ldr	r3, [pc, #224]	; (8019980 <_txe_thread_create+0x1cc>)
 801989e:	681b      	ldr	r3, [r3, #0]
 80198a0:	3b01      	subs	r3, #1
 80198a2:	4a37      	ldr	r2, [pc, #220]	; (8019980 <_txe_thread_create+0x1cc>)
 80198a4:	6013      	str	r3, [r2, #0]
 80198a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80198a8:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80198aa:	6a3b      	ldr	r3, [r7, #32]
 80198ac:	f383 8810 	msr	PRIMASK, r3
}
 80198b0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80198b2:	f7fe ff9f 	bl	80187f4 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 80198b6:	68fa      	ldr	r2, [r7, #12]
 80198b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80198ba:	429a      	cmp	r2, r3
 80198bc:	d102      	bne.n	80198c4 <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 80198be:	230e      	movs	r3, #14
 80198c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80198c2:	e042      	b.n	801994a <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 80198c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80198c6:	2b00      	cmp	r3, #0
 80198c8:	d102      	bne.n	80198d0 <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 80198ca:	2303      	movs	r3, #3
 80198cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80198ce:	e03c      	b.n	801994a <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 80198d0:	687b      	ldr	r3, [r7, #4]
 80198d2:	2b00      	cmp	r3, #0
 80198d4:	d102      	bne.n	80198dc <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 80198d6:	2303      	movs	r3, #3
 80198d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80198da:	e036      	b.n	801994a <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 80198dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80198de:	2bc7      	cmp	r3, #199	; 0xc7
 80198e0:	d802      	bhi.n	80198e8 <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 80198e2:	2305      	movs	r3, #5
 80198e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80198e6:	e030      	b.n	801994a <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 80198e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80198ea:	2b1f      	cmp	r3, #31
 80198ec:	d902      	bls.n	80198f4 <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 80198ee:	230f      	movs	r3, #15
 80198f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80198f2:	e02a      	b.n	801994a <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 80198f4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80198f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80198f8:	429a      	cmp	r2, r3
 80198fa:	d902      	bls.n	8019902 <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 80198fc:	2318      	movs	r3, #24
 80198fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8019900:	e023      	b.n	801994a <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 8019902:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019904:	2b01      	cmp	r3, #1
 8019906:	d902      	bls.n	801990e <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 8019908:	2310      	movs	r3, #16
 801990a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801990c:	e01d      	b.n	801994a <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 801990e:	4b1f      	ldr	r3, [pc, #124]	; (801998c <_txe_thread_create+0x1d8>)
 8019910:	681b      	ldr	r3, [r3, #0]
 8019912:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 8019914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019916:	4a1e      	ldr	r2, [pc, #120]	; (8019990 <_txe_thread_create+0x1dc>)
 8019918:	4293      	cmp	r3, r2
 801991a:	d101      	bne.n	8019920 <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 801991c:	2313      	movs	r3, #19
 801991e:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8019920:	f3ef 8305 	mrs	r3, IPSR
 8019924:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8019926:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8019928:	4b1a      	ldr	r3, [pc, #104]	; (8019994 <_txe_thread_create+0x1e0>)
 801992a:	681b      	ldr	r3, [r3, #0]
 801992c:	4313      	orrs	r3, r2
 801992e:	2b00      	cmp	r3, #0
 8019930:	d00b      	beq.n	801994a <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8019932:	f3ef 8305 	mrs	r3, IPSR
 8019936:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8019938:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 801993a:	4b16      	ldr	r3, [pc, #88]	; (8019994 <_txe_thread_create+0x1e0>)
 801993c:	681b      	ldr	r3, [r3, #0]
 801993e:	4313      	orrs	r3, r2
 8019940:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8019944:	d201      	bcs.n	801994a <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8019946:	2313      	movs	r3, #19
 8019948:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 801994a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801994c:	2b00      	cmp	r3, #0
 801994e:	d112      	bne.n	8019976 <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 8019950:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019952:	9305      	str	r3, [sp, #20]
 8019954:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8019956:	9304      	str	r3, [sp, #16]
 8019958:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801995a:	9303      	str	r3, [sp, #12]
 801995c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801995e:	9302      	str	r3, [sp, #8]
 8019960:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019962:	9301      	str	r3, [sp, #4]
 8019964:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8019966:	9300      	str	r3, [sp, #0]
 8019968:	683b      	ldr	r3, [r7, #0]
 801996a:	687a      	ldr	r2, [r7, #4]
 801996c:	68b9      	ldr	r1, [r7, #8]
 801996e:	68f8      	ldr	r0, [r7, #12]
 8019970:	f7fe fcb0 	bl	80182d4 <_tx_thread_create>
 8019974:	64f8      	str	r0, [r7, #76]	; 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 8019976:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8019978:	4618      	mov	r0, r3
 801997a:	3750      	adds	r7, #80	; 0x50
 801997c:	46bd      	mov	sp, r7
 801997e:	bd80      	pop	{r7, pc}
 8019980:	200152e4 	.word	0x200152e4
 8019984:	20015254 	.word	0x20015254
 8019988:	20015258 	.word	0x20015258
 801998c:	2001524c 	.word	0x2001524c
 8019990:	20015394 	.word	0x20015394
 8019994:	200010dc 	.word	0x200010dc

08019998 <std>:
 8019998:	2300      	movs	r3, #0
 801999a:	b510      	push	{r4, lr}
 801999c:	4604      	mov	r4, r0
 801999e:	6083      	str	r3, [r0, #8]
 80199a0:	8181      	strh	r1, [r0, #12]
 80199a2:	4619      	mov	r1, r3
 80199a4:	6643      	str	r3, [r0, #100]	; 0x64
 80199a6:	81c2      	strh	r2, [r0, #14]
 80199a8:	2208      	movs	r2, #8
 80199aa:	6183      	str	r3, [r0, #24]
 80199ac:	e9c0 3300 	strd	r3, r3, [r0]
 80199b0:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80199b4:	305c      	adds	r0, #92	; 0x5c
 80199b6:	f000 f91f 	bl	8019bf8 <memset>
 80199ba:	4b0d      	ldr	r3, [pc, #52]	; (80199f0 <std+0x58>)
 80199bc:	6224      	str	r4, [r4, #32]
 80199be:	6263      	str	r3, [r4, #36]	; 0x24
 80199c0:	4b0c      	ldr	r3, [pc, #48]	; (80199f4 <std+0x5c>)
 80199c2:	62a3      	str	r3, [r4, #40]	; 0x28
 80199c4:	4b0c      	ldr	r3, [pc, #48]	; (80199f8 <std+0x60>)
 80199c6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80199c8:	4b0c      	ldr	r3, [pc, #48]	; (80199fc <std+0x64>)
 80199ca:	6323      	str	r3, [r4, #48]	; 0x30
 80199cc:	4b0c      	ldr	r3, [pc, #48]	; (8019a00 <std+0x68>)
 80199ce:	429c      	cmp	r4, r3
 80199d0:	d006      	beq.n	80199e0 <std+0x48>
 80199d2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80199d6:	4294      	cmp	r4, r2
 80199d8:	d002      	beq.n	80199e0 <std+0x48>
 80199da:	33d0      	adds	r3, #208	; 0xd0
 80199dc:	429c      	cmp	r4, r3
 80199de:	d105      	bne.n	80199ec <std+0x54>
 80199e0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80199e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80199e8:	f000 b938 	b.w	8019c5c <__retarget_lock_init_recursive>
 80199ec:	bd10      	pop	{r4, pc}
 80199ee:	bf00      	nop
 80199f0:	0801a4d9 	.word	0x0801a4d9
 80199f4:	0801a4fb 	.word	0x0801a4fb
 80199f8:	0801a533 	.word	0x0801a533
 80199fc:	0801a557 	.word	0x0801a557
 8019a00:	20015854 	.word	0x20015854

08019a04 <stdio_exit_handler>:
 8019a04:	4a02      	ldr	r2, [pc, #8]	; (8019a10 <stdio_exit_handler+0xc>)
 8019a06:	4903      	ldr	r1, [pc, #12]	; (8019a14 <stdio_exit_handler+0x10>)
 8019a08:	4803      	ldr	r0, [pc, #12]	; (8019a18 <stdio_exit_handler+0x14>)
 8019a0a:	f000 b869 	b.w	8019ae0 <_fwalk_sglue>
 8019a0e:	bf00      	nop
 8019a10:	200010e0 	.word	0x200010e0
 8019a14:	0801a471 	.word	0x0801a471
 8019a18:	200010ec 	.word	0x200010ec

08019a1c <cleanup_stdio>:
 8019a1c:	6841      	ldr	r1, [r0, #4]
 8019a1e:	4b0c      	ldr	r3, [pc, #48]	; (8019a50 <cleanup_stdio+0x34>)
 8019a20:	4299      	cmp	r1, r3
 8019a22:	b510      	push	{r4, lr}
 8019a24:	4604      	mov	r4, r0
 8019a26:	d001      	beq.n	8019a2c <cleanup_stdio+0x10>
 8019a28:	f000 fd22 	bl	801a470 <_fflush_r>
 8019a2c:	68a1      	ldr	r1, [r4, #8]
 8019a2e:	4b09      	ldr	r3, [pc, #36]	; (8019a54 <cleanup_stdio+0x38>)
 8019a30:	4299      	cmp	r1, r3
 8019a32:	d002      	beq.n	8019a3a <cleanup_stdio+0x1e>
 8019a34:	4620      	mov	r0, r4
 8019a36:	f000 fd1b 	bl	801a470 <_fflush_r>
 8019a3a:	68e1      	ldr	r1, [r4, #12]
 8019a3c:	4b06      	ldr	r3, [pc, #24]	; (8019a58 <cleanup_stdio+0x3c>)
 8019a3e:	4299      	cmp	r1, r3
 8019a40:	d004      	beq.n	8019a4c <cleanup_stdio+0x30>
 8019a42:	4620      	mov	r0, r4
 8019a44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019a48:	f000 bd12 	b.w	801a470 <_fflush_r>
 8019a4c:	bd10      	pop	{r4, pc}
 8019a4e:	bf00      	nop
 8019a50:	20015854 	.word	0x20015854
 8019a54:	200158bc 	.word	0x200158bc
 8019a58:	20015924 	.word	0x20015924

08019a5c <global_stdio_init.part.0>:
 8019a5c:	b510      	push	{r4, lr}
 8019a5e:	4b0b      	ldr	r3, [pc, #44]	; (8019a8c <global_stdio_init.part.0+0x30>)
 8019a60:	2104      	movs	r1, #4
 8019a62:	4c0b      	ldr	r4, [pc, #44]	; (8019a90 <global_stdio_init.part.0+0x34>)
 8019a64:	4a0b      	ldr	r2, [pc, #44]	; (8019a94 <global_stdio_init.part.0+0x38>)
 8019a66:	4620      	mov	r0, r4
 8019a68:	601a      	str	r2, [r3, #0]
 8019a6a:	2200      	movs	r2, #0
 8019a6c:	f7ff ff94 	bl	8019998 <std>
 8019a70:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8019a74:	2201      	movs	r2, #1
 8019a76:	2109      	movs	r1, #9
 8019a78:	f7ff ff8e 	bl	8019998 <std>
 8019a7c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8019a80:	2202      	movs	r2, #2
 8019a82:	2112      	movs	r1, #18
 8019a84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019a88:	f7ff bf86 	b.w	8019998 <std>
 8019a8c:	2001598c 	.word	0x2001598c
 8019a90:	20015854 	.word	0x20015854
 8019a94:	08019a05 	.word	0x08019a05

08019a98 <__sfp_lock_acquire>:
 8019a98:	4801      	ldr	r0, [pc, #4]	; (8019aa0 <__sfp_lock_acquire+0x8>)
 8019a9a:	f000 b8e0 	b.w	8019c5e <__retarget_lock_acquire_recursive>
 8019a9e:	bf00      	nop
 8019aa0:	20015991 	.word	0x20015991

08019aa4 <__sfp_lock_release>:
 8019aa4:	4801      	ldr	r0, [pc, #4]	; (8019aac <__sfp_lock_release+0x8>)
 8019aa6:	f000 b8db 	b.w	8019c60 <__retarget_lock_release_recursive>
 8019aaa:	bf00      	nop
 8019aac:	20015991 	.word	0x20015991

08019ab0 <__sinit>:
 8019ab0:	b510      	push	{r4, lr}
 8019ab2:	4604      	mov	r4, r0
 8019ab4:	f7ff fff0 	bl	8019a98 <__sfp_lock_acquire>
 8019ab8:	6a23      	ldr	r3, [r4, #32]
 8019aba:	b11b      	cbz	r3, 8019ac4 <__sinit+0x14>
 8019abc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019ac0:	f7ff bff0 	b.w	8019aa4 <__sfp_lock_release>
 8019ac4:	4b04      	ldr	r3, [pc, #16]	; (8019ad8 <__sinit+0x28>)
 8019ac6:	6223      	str	r3, [r4, #32]
 8019ac8:	4b04      	ldr	r3, [pc, #16]	; (8019adc <__sinit+0x2c>)
 8019aca:	681b      	ldr	r3, [r3, #0]
 8019acc:	2b00      	cmp	r3, #0
 8019ace:	d1f5      	bne.n	8019abc <__sinit+0xc>
 8019ad0:	f7ff ffc4 	bl	8019a5c <global_stdio_init.part.0>
 8019ad4:	e7f2      	b.n	8019abc <__sinit+0xc>
 8019ad6:	bf00      	nop
 8019ad8:	08019a1d 	.word	0x08019a1d
 8019adc:	2001598c 	.word	0x2001598c

08019ae0 <_fwalk_sglue>:
 8019ae0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019ae4:	4607      	mov	r7, r0
 8019ae6:	4688      	mov	r8, r1
 8019ae8:	4614      	mov	r4, r2
 8019aea:	2600      	movs	r6, #0
 8019aec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8019af0:	f1b9 0901 	subs.w	r9, r9, #1
 8019af4:	d505      	bpl.n	8019b02 <_fwalk_sglue+0x22>
 8019af6:	6824      	ldr	r4, [r4, #0]
 8019af8:	2c00      	cmp	r4, #0
 8019afa:	d1f7      	bne.n	8019aec <_fwalk_sglue+0xc>
 8019afc:	4630      	mov	r0, r6
 8019afe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019b02:	89ab      	ldrh	r3, [r5, #12]
 8019b04:	2b01      	cmp	r3, #1
 8019b06:	d907      	bls.n	8019b18 <_fwalk_sglue+0x38>
 8019b08:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019b0c:	3301      	adds	r3, #1
 8019b0e:	d003      	beq.n	8019b18 <_fwalk_sglue+0x38>
 8019b10:	4629      	mov	r1, r5
 8019b12:	4638      	mov	r0, r7
 8019b14:	47c0      	blx	r8
 8019b16:	4306      	orrs	r6, r0
 8019b18:	3568      	adds	r5, #104	; 0x68
 8019b1a:	e7e9      	b.n	8019af0 <_fwalk_sglue+0x10>

08019b1c <iprintf>:
 8019b1c:	b40f      	push	{r0, r1, r2, r3}
 8019b1e:	b507      	push	{r0, r1, r2, lr}
 8019b20:	4906      	ldr	r1, [pc, #24]	; (8019b3c <iprintf+0x20>)
 8019b22:	ab04      	add	r3, sp, #16
 8019b24:	6808      	ldr	r0, [r1, #0]
 8019b26:	f853 2b04 	ldr.w	r2, [r3], #4
 8019b2a:	6881      	ldr	r1, [r0, #8]
 8019b2c:	9301      	str	r3, [sp, #4]
 8019b2e:	f000 f8cf 	bl	8019cd0 <_vfiprintf_r>
 8019b32:	b003      	add	sp, #12
 8019b34:	f85d eb04 	ldr.w	lr, [sp], #4
 8019b38:	b004      	add	sp, #16
 8019b3a:	4770      	bx	lr
 8019b3c:	20001138 	.word	0x20001138

08019b40 <_puts_r>:
 8019b40:	6a03      	ldr	r3, [r0, #32]
 8019b42:	b570      	push	{r4, r5, r6, lr}
 8019b44:	4605      	mov	r5, r0
 8019b46:	460e      	mov	r6, r1
 8019b48:	6884      	ldr	r4, [r0, #8]
 8019b4a:	b90b      	cbnz	r3, 8019b50 <_puts_r+0x10>
 8019b4c:	f7ff ffb0 	bl	8019ab0 <__sinit>
 8019b50:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019b52:	07db      	lsls	r3, r3, #31
 8019b54:	d405      	bmi.n	8019b62 <_puts_r+0x22>
 8019b56:	89a3      	ldrh	r3, [r4, #12]
 8019b58:	0598      	lsls	r0, r3, #22
 8019b5a:	d402      	bmi.n	8019b62 <_puts_r+0x22>
 8019b5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019b5e:	f000 f87e 	bl	8019c5e <__retarget_lock_acquire_recursive>
 8019b62:	89a3      	ldrh	r3, [r4, #12]
 8019b64:	0719      	lsls	r1, r3, #28
 8019b66:	d513      	bpl.n	8019b90 <_puts_r+0x50>
 8019b68:	6923      	ldr	r3, [r4, #16]
 8019b6a:	b18b      	cbz	r3, 8019b90 <_puts_r+0x50>
 8019b6c:	3e01      	subs	r6, #1
 8019b6e:	68a3      	ldr	r3, [r4, #8]
 8019b70:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8019b74:	3b01      	subs	r3, #1
 8019b76:	60a3      	str	r3, [r4, #8]
 8019b78:	b9e9      	cbnz	r1, 8019bb6 <_puts_r+0x76>
 8019b7a:	2b00      	cmp	r3, #0
 8019b7c:	da2e      	bge.n	8019bdc <_puts_r+0x9c>
 8019b7e:	4622      	mov	r2, r4
 8019b80:	210a      	movs	r1, #10
 8019b82:	4628      	mov	r0, r5
 8019b84:	f000 fceb 	bl	801a55e <__swbuf_r>
 8019b88:	3001      	adds	r0, #1
 8019b8a:	d007      	beq.n	8019b9c <_puts_r+0x5c>
 8019b8c:	250a      	movs	r5, #10
 8019b8e:	e007      	b.n	8019ba0 <_puts_r+0x60>
 8019b90:	4621      	mov	r1, r4
 8019b92:	4628      	mov	r0, r5
 8019b94:	f000 fd20 	bl	801a5d8 <__swsetup_r>
 8019b98:	2800      	cmp	r0, #0
 8019b9a:	d0e7      	beq.n	8019b6c <_puts_r+0x2c>
 8019b9c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8019ba0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019ba2:	07da      	lsls	r2, r3, #31
 8019ba4:	d405      	bmi.n	8019bb2 <_puts_r+0x72>
 8019ba6:	89a3      	ldrh	r3, [r4, #12]
 8019ba8:	059b      	lsls	r3, r3, #22
 8019baa:	d402      	bmi.n	8019bb2 <_puts_r+0x72>
 8019bac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019bae:	f000 f857 	bl	8019c60 <__retarget_lock_release_recursive>
 8019bb2:	4628      	mov	r0, r5
 8019bb4:	bd70      	pop	{r4, r5, r6, pc}
 8019bb6:	2b00      	cmp	r3, #0
 8019bb8:	da04      	bge.n	8019bc4 <_puts_r+0x84>
 8019bba:	69a2      	ldr	r2, [r4, #24]
 8019bbc:	429a      	cmp	r2, r3
 8019bbe:	dc06      	bgt.n	8019bce <_puts_r+0x8e>
 8019bc0:	290a      	cmp	r1, #10
 8019bc2:	d004      	beq.n	8019bce <_puts_r+0x8e>
 8019bc4:	6823      	ldr	r3, [r4, #0]
 8019bc6:	1c5a      	adds	r2, r3, #1
 8019bc8:	6022      	str	r2, [r4, #0]
 8019bca:	7019      	strb	r1, [r3, #0]
 8019bcc:	e7cf      	b.n	8019b6e <_puts_r+0x2e>
 8019bce:	4622      	mov	r2, r4
 8019bd0:	4628      	mov	r0, r5
 8019bd2:	f000 fcc4 	bl	801a55e <__swbuf_r>
 8019bd6:	3001      	adds	r0, #1
 8019bd8:	d1c9      	bne.n	8019b6e <_puts_r+0x2e>
 8019bda:	e7df      	b.n	8019b9c <_puts_r+0x5c>
 8019bdc:	6823      	ldr	r3, [r4, #0]
 8019bde:	250a      	movs	r5, #10
 8019be0:	1c5a      	adds	r2, r3, #1
 8019be2:	6022      	str	r2, [r4, #0]
 8019be4:	701d      	strb	r5, [r3, #0]
 8019be6:	e7db      	b.n	8019ba0 <_puts_r+0x60>

08019be8 <puts>:
 8019be8:	4b02      	ldr	r3, [pc, #8]	; (8019bf4 <puts+0xc>)
 8019bea:	4601      	mov	r1, r0
 8019bec:	6818      	ldr	r0, [r3, #0]
 8019bee:	f7ff bfa7 	b.w	8019b40 <_puts_r>
 8019bf2:	bf00      	nop
 8019bf4:	20001138 	.word	0x20001138

08019bf8 <memset>:
 8019bf8:	4402      	add	r2, r0
 8019bfa:	4603      	mov	r3, r0
 8019bfc:	4293      	cmp	r3, r2
 8019bfe:	d100      	bne.n	8019c02 <memset+0xa>
 8019c00:	4770      	bx	lr
 8019c02:	f803 1b01 	strb.w	r1, [r3], #1
 8019c06:	e7f9      	b.n	8019bfc <memset+0x4>

08019c08 <__errno>:
 8019c08:	4b01      	ldr	r3, [pc, #4]	; (8019c10 <__errno+0x8>)
 8019c0a:	6818      	ldr	r0, [r3, #0]
 8019c0c:	4770      	bx	lr
 8019c0e:	bf00      	nop
 8019c10:	20001138 	.word	0x20001138

08019c14 <__libc_init_array>:
 8019c14:	b570      	push	{r4, r5, r6, lr}
 8019c16:	4d0d      	ldr	r5, [pc, #52]	; (8019c4c <__libc_init_array+0x38>)
 8019c18:	2600      	movs	r6, #0
 8019c1a:	4c0d      	ldr	r4, [pc, #52]	; (8019c50 <__libc_init_array+0x3c>)
 8019c1c:	1b64      	subs	r4, r4, r5
 8019c1e:	10a4      	asrs	r4, r4, #2
 8019c20:	42a6      	cmp	r6, r4
 8019c22:	d109      	bne.n	8019c38 <__libc_init_array+0x24>
 8019c24:	4d0b      	ldr	r5, [pc, #44]	; (8019c54 <__libc_init_array+0x40>)
 8019c26:	2600      	movs	r6, #0
 8019c28:	4c0b      	ldr	r4, [pc, #44]	; (8019c58 <__libc_init_array+0x44>)
 8019c2a:	f000 fe61 	bl	801a8f0 <_init>
 8019c2e:	1b64      	subs	r4, r4, r5
 8019c30:	10a4      	asrs	r4, r4, #2
 8019c32:	42a6      	cmp	r6, r4
 8019c34:	d105      	bne.n	8019c42 <__libc_init_array+0x2e>
 8019c36:	bd70      	pop	{r4, r5, r6, pc}
 8019c38:	f855 3b04 	ldr.w	r3, [r5], #4
 8019c3c:	3601      	adds	r6, #1
 8019c3e:	4798      	blx	r3
 8019c40:	e7ee      	b.n	8019c20 <__libc_init_array+0xc>
 8019c42:	f855 3b04 	ldr.w	r3, [r5], #4
 8019c46:	3601      	adds	r6, #1
 8019c48:	4798      	blx	r3
 8019c4a:	e7f2      	b.n	8019c32 <__libc_init_array+0x1e>
 8019c4c:	0801ac78 	.word	0x0801ac78
 8019c50:	0801ac78 	.word	0x0801ac78
 8019c54:	0801ac78 	.word	0x0801ac78
 8019c58:	0801ac7c 	.word	0x0801ac7c

08019c5c <__retarget_lock_init_recursive>:
 8019c5c:	4770      	bx	lr

08019c5e <__retarget_lock_acquire_recursive>:
 8019c5e:	4770      	bx	lr

08019c60 <__retarget_lock_release_recursive>:
 8019c60:	4770      	bx	lr

08019c62 <memcpy>:
 8019c62:	440a      	add	r2, r1
 8019c64:	1e43      	subs	r3, r0, #1
 8019c66:	4291      	cmp	r1, r2
 8019c68:	d100      	bne.n	8019c6c <memcpy+0xa>
 8019c6a:	4770      	bx	lr
 8019c6c:	b510      	push	{r4, lr}
 8019c6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019c72:	4291      	cmp	r1, r2
 8019c74:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019c78:	d1f9      	bne.n	8019c6e <memcpy+0xc>
 8019c7a:	bd10      	pop	{r4, pc}

08019c7c <__sfputc_r>:
 8019c7c:	6893      	ldr	r3, [r2, #8]
 8019c7e:	3b01      	subs	r3, #1
 8019c80:	2b00      	cmp	r3, #0
 8019c82:	6093      	str	r3, [r2, #8]
 8019c84:	b410      	push	{r4}
 8019c86:	da08      	bge.n	8019c9a <__sfputc_r+0x1e>
 8019c88:	6994      	ldr	r4, [r2, #24]
 8019c8a:	42a3      	cmp	r3, r4
 8019c8c:	db01      	blt.n	8019c92 <__sfputc_r+0x16>
 8019c8e:	290a      	cmp	r1, #10
 8019c90:	d103      	bne.n	8019c9a <__sfputc_r+0x1e>
 8019c92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019c96:	f000 bc62 	b.w	801a55e <__swbuf_r>
 8019c9a:	6813      	ldr	r3, [r2, #0]
 8019c9c:	1c58      	adds	r0, r3, #1
 8019c9e:	6010      	str	r0, [r2, #0]
 8019ca0:	4608      	mov	r0, r1
 8019ca2:	7019      	strb	r1, [r3, #0]
 8019ca4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019ca8:	4770      	bx	lr

08019caa <__sfputs_r>:
 8019caa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019cac:	4606      	mov	r6, r0
 8019cae:	460f      	mov	r7, r1
 8019cb0:	4614      	mov	r4, r2
 8019cb2:	18d5      	adds	r5, r2, r3
 8019cb4:	42ac      	cmp	r4, r5
 8019cb6:	d101      	bne.n	8019cbc <__sfputs_r+0x12>
 8019cb8:	2000      	movs	r0, #0
 8019cba:	e007      	b.n	8019ccc <__sfputs_r+0x22>
 8019cbc:	463a      	mov	r2, r7
 8019cbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019cc2:	4630      	mov	r0, r6
 8019cc4:	f7ff ffda 	bl	8019c7c <__sfputc_r>
 8019cc8:	1c43      	adds	r3, r0, #1
 8019cca:	d1f3      	bne.n	8019cb4 <__sfputs_r+0xa>
 8019ccc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019cd0 <_vfiprintf_r>:
 8019cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019cd4:	460d      	mov	r5, r1
 8019cd6:	b09d      	sub	sp, #116	; 0x74
 8019cd8:	4614      	mov	r4, r2
 8019cda:	4698      	mov	r8, r3
 8019cdc:	4606      	mov	r6, r0
 8019cde:	b118      	cbz	r0, 8019ce8 <_vfiprintf_r+0x18>
 8019ce0:	6a03      	ldr	r3, [r0, #32]
 8019ce2:	b90b      	cbnz	r3, 8019ce8 <_vfiprintf_r+0x18>
 8019ce4:	f7ff fee4 	bl	8019ab0 <__sinit>
 8019ce8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019cea:	07d9      	lsls	r1, r3, #31
 8019cec:	d405      	bmi.n	8019cfa <_vfiprintf_r+0x2a>
 8019cee:	89ab      	ldrh	r3, [r5, #12]
 8019cf0:	059a      	lsls	r2, r3, #22
 8019cf2:	d402      	bmi.n	8019cfa <_vfiprintf_r+0x2a>
 8019cf4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019cf6:	f7ff ffb2 	bl	8019c5e <__retarget_lock_acquire_recursive>
 8019cfa:	89ab      	ldrh	r3, [r5, #12]
 8019cfc:	071b      	lsls	r3, r3, #28
 8019cfe:	d501      	bpl.n	8019d04 <_vfiprintf_r+0x34>
 8019d00:	692b      	ldr	r3, [r5, #16]
 8019d02:	b99b      	cbnz	r3, 8019d2c <_vfiprintf_r+0x5c>
 8019d04:	4629      	mov	r1, r5
 8019d06:	4630      	mov	r0, r6
 8019d08:	f000 fc66 	bl	801a5d8 <__swsetup_r>
 8019d0c:	b170      	cbz	r0, 8019d2c <_vfiprintf_r+0x5c>
 8019d0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019d10:	07dc      	lsls	r4, r3, #31
 8019d12:	d504      	bpl.n	8019d1e <_vfiprintf_r+0x4e>
 8019d14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019d18:	b01d      	add	sp, #116	; 0x74
 8019d1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019d1e:	89ab      	ldrh	r3, [r5, #12]
 8019d20:	0598      	lsls	r0, r3, #22
 8019d22:	d4f7      	bmi.n	8019d14 <_vfiprintf_r+0x44>
 8019d24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019d26:	f7ff ff9b 	bl	8019c60 <__retarget_lock_release_recursive>
 8019d2a:	e7f3      	b.n	8019d14 <_vfiprintf_r+0x44>
 8019d2c:	2300      	movs	r3, #0
 8019d2e:	f8cd 800c 	str.w	r8, [sp, #12]
 8019d32:	f04f 0901 	mov.w	r9, #1
 8019d36:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 8019ef0 <_vfiprintf_r+0x220>
 8019d3a:	9309      	str	r3, [sp, #36]	; 0x24
 8019d3c:	2320      	movs	r3, #32
 8019d3e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019d42:	2330      	movs	r3, #48	; 0x30
 8019d44:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019d48:	4623      	mov	r3, r4
 8019d4a:	469a      	mov	sl, r3
 8019d4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019d50:	b10a      	cbz	r2, 8019d56 <_vfiprintf_r+0x86>
 8019d52:	2a25      	cmp	r2, #37	; 0x25
 8019d54:	d1f9      	bne.n	8019d4a <_vfiprintf_r+0x7a>
 8019d56:	ebba 0b04 	subs.w	fp, sl, r4
 8019d5a:	d00b      	beq.n	8019d74 <_vfiprintf_r+0xa4>
 8019d5c:	465b      	mov	r3, fp
 8019d5e:	4622      	mov	r2, r4
 8019d60:	4629      	mov	r1, r5
 8019d62:	4630      	mov	r0, r6
 8019d64:	f7ff ffa1 	bl	8019caa <__sfputs_r>
 8019d68:	3001      	adds	r0, #1
 8019d6a:	f000 80a9 	beq.w	8019ec0 <_vfiprintf_r+0x1f0>
 8019d6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019d70:	445a      	add	r2, fp
 8019d72:	9209      	str	r2, [sp, #36]	; 0x24
 8019d74:	f89a 3000 	ldrb.w	r3, [sl]
 8019d78:	2b00      	cmp	r3, #0
 8019d7a:	f000 80a1 	beq.w	8019ec0 <_vfiprintf_r+0x1f0>
 8019d7e:	2300      	movs	r3, #0
 8019d80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019d84:	f10a 0a01 	add.w	sl, sl, #1
 8019d88:	9304      	str	r3, [sp, #16]
 8019d8a:	9307      	str	r3, [sp, #28]
 8019d8c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019d90:	931a      	str	r3, [sp, #104]	; 0x68
 8019d92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019d96:	4654      	mov	r4, sl
 8019d98:	2205      	movs	r2, #5
 8019d9a:	4855      	ldr	r0, [pc, #340]	; (8019ef0 <_vfiprintf_r+0x220>)
 8019d9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019da0:	f000 fd4c 	bl	801a83c <memchr>
 8019da4:	9a04      	ldr	r2, [sp, #16]
 8019da6:	b9d8      	cbnz	r0, 8019de0 <_vfiprintf_r+0x110>
 8019da8:	06d1      	lsls	r1, r2, #27
 8019daa:	bf44      	itt	mi
 8019dac:	2320      	movmi	r3, #32
 8019dae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019db2:	0713      	lsls	r3, r2, #28
 8019db4:	bf44      	itt	mi
 8019db6:	232b      	movmi	r3, #43	; 0x2b
 8019db8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019dbc:	f89a 3000 	ldrb.w	r3, [sl]
 8019dc0:	2b2a      	cmp	r3, #42	; 0x2a
 8019dc2:	d015      	beq.n	8019df0 <_vfiprintf_r+0x120>
 8019dc4:	9a07      	ldr	r2, [sp, #28]
 8019dc6:	4654      	mov	r4, sl
 8019dc8:	2000      	movs	r0, #0
 8019dca:	f04f 0c0a 	mov.w	ip, #10
 8019dce:	4621      	mov	r1, r4
 8019dd0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019dd4:	3b30      	subs	r3, #48	; 0x30
 8019dd6:	2b09      	cmp	r3, #9
 8019dd8:	d94d      	bls.n	8019e76 <_vfiprintf_r+0x1a6>
 8019dda:	b1b0      	cbz	r0, 8019e0a <_vfiprintf_r+0x13a>
 8019ddc:	9207      	str	r2, [sp, #28]
 8019dde:	e014      	b.n	8019e0a <_vfiprintf_r+0x13a>
 8019de0:	eba0 0308 	sub.w	r3, r0, r8
 8019de4:	46a2      	mov	sl, r4
 8019de6:	fa09 f303 	lsl.w	r3, r9, r3
 8019dea:	4313      	orrs	r3, r2
 8019dec:	9304      	str	r3, [sp, #16]
 8019dee:	e7d2      	b.n	8019d96 <_vfiprintf_r+0xc6>
 8019df0:	9b03      	ldr	r3, [sp, #12]
 8019df2:	1d19      	adds	r1, r3, #4
 8019df4:	681b      	ldr	r3, [r3, #0]
 8019df6:	2b00      	cmp	r3, #0
 8019df8:	9103      	str	r1, [sp, #12]
 8019dfa:	bfbb      	ittet	lt
 8019dfc:	425b      	neglt	r3, r3
 8019dfe:	f042 0202 	orrlt.w	r2, r2, #2
 8019e02:	9307      	strge	r3, [sp, #28]
 8019e04:	9307      	strlt	r3, [sp, #28]
 8019e06:	bfb8      	it	lt
 8019e08:	9204      	strlt	r2, [sp, #16]
 8019e0a:	7823      	ldrb	r3, [r4, #0]
 8019e0c:	2b2e      	cmp	r3, #46	; 0x2e
 8019e0e:	d10c      	bne.n	8019e2a <_vfiprintf_r+0x15a>
 8019e10:	7863      	ldrb	r3, [r4, #1]
 8019e12:	2b2a      	cmp	r3, #42	; 0x2a
 8019e14:	d134      	bne.n	8019e80 <_vfiprintf_r+0x1b0>
 8019e16:	9b03      	ldr	r3, [sp, #12]
 8019e18:	3402      	adds	r4, #2
 8019e1a:	1d1a      	adds	r2, r3, #4
 8019e1c:	681b      	ldr	r3, [r3, #0]
 8019e1e:	2b00      	cmp	r3, #0
 8019e20:	9203      	str	r2, [sp, #12]
 8019e22:	bfb8      	it	lt
 8019e24:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8019e28:	9305      	str	r3, [sp, #20]
 8019e2a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8019f00 <_vfiprintf_r+0x230>
 8019e2e:	2203      	movs	r2, #3
 8019e30:	7821      	ldrb	r1, [r4, #0]
 8019e32:	4650      	mov	r0, sl
 8019e34:	f000 fd02 	bl	801a83c <memchr>
 8019e38:	b138      	cbz	r0, 8019e4a <_vfiprintf_r+0x17a>
 8019e3a:	eba0 000a 	sub.w	r0, r0, sl
 8019e3e:	2240      	movs	r2, #64	; 0x40
 8019e40:	9b04      	ldr	r3, [sp, #16]
 8019e42:	3401      	adds	r4, #1
 8019e44:	4082      	lsls	r2, r0
 8019e46:	4313      	orrs	r3, r2
 8019e48:	9304      	str	r3, [sp, #16]
 8019e4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019e4e:	2206      	movs	r2, #6
 8019e50:	4828      	ldr	r0, [pc, #160]	; (8019ef4 <_vfiprintf_r+0x224>)
 8019e52:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019e56:	f000 fcf1 	bl	801a83c <memchr>
 8019e5a:	2800      	cmp	r0, #0
 8019e5c:	d03f      	beq.n	8019ede <_vfiprintf_r+0x20e>
 8019e5e:	4b26      	ldr	r3, [pc, #152]	; (8019ef8 <_vfiprintf_r+0x228>)
 8019e60:	bb1b      	cbnz	r3, 8019eaa <_vfiprintf_r+0x1da>
 8019e62:	9b03      	ldr	r3, [sp, #12]
 8019e64:	3307      	adds	r3, #7
 8019e66:	f023 0307 	bic.w	r3, r3, #7
 8019e6a:	3308      	adds	r3, #8
 8019e6c:	9303      	str	r3, [sp, #12]
 8019e6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019e70:	443b      	add	r3, r7
 8019e72:	9309      	str	r3, [sp, #36]	; 0x24
 8019e74:	e768      	b.n	8019d48 <_vfiprintf_r+0x78>
 8019e76:	fb0c 3202 	mla	r2, ip, r2, r3
 8019e7a:	460c      	mov	r4, r1
 8019e7c:	2001      	movs	r0, #1
 8019e7e:	e7a6      	b.n	8019dce <_vfiprintf_r+0xfe>
 8019e80:	2300      	movs	r3, #0
 8019e82:	3401      	adds	r4, #1
 8019e84:	f04f 0c0a 	mov.w	ip, #10
 8019e88:	4619      	mov	r1, r3
 8019e8a:	9305      	str	r3, [sp, #20]
 8019e8c:	4620      	mov	r0, r4
 8019e8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019e92:	3a30      	subs	r2, #48	; 0x30
 8019e94:	2a09      	cmp	r2, #9
 8019e96:	d903      	bls.n	8019ea0 <_vfiprintf_r+0x1d0>
 8019e98:	2b00      	cmp	r3, #0
 8019e9a:	d0c6      	beq.n	8019e2a <_vfiprintf_r+0x15a>
 8019e9c:	9105      	str	r1, [sp, #20]
 8019e9e:	e7c4      	b.n	8019e2a <_vfiprintf_r+0x15a>
 8019ea0:	fb0c 2101 	mla	r1, ip, r1, r2
 8019ea4:	4604      	mov	r4, r0
 8019ea6:	2301      	movs	r3, #1
 8019ea8:	e7f0      	b.n	8019e8c <_vfiprintf_r+0x1bc>
 8019eaa:	ab03      	add	r3, sp, #12
 8019eac:	462a      	mov	r2, r5
 8019eae:	a904      	add	r1, sp, #16
 8019eb0:	4630      	mov	r0, r6
 8019eb2:	9300      	str	r3, [sp, #0]
 8019eb4:	4b11      	ldr	r3, [pc, #68]	; (8019efc <_vfiprintf_r+0x22c>)
 8019eb6:	f3af 8000 	nop.w
 8019eba:	4607      	mov	r7, r0
 8019ebc:	1c78      	adds	r0, r7, #1
 8019ebe:	d1d6      	bne.n	8019e6e <_vfiprintf_r+0x19e>
 8019ec0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019ec2:	07d9      	lsls	r1, r3, #31
 8019ec4:	d405      	bmi.n	8019ed2 <_vfiprintf_r+0x202>
 8019ec6:	89ab      	ldrh	r3, [r5, #12]
 8019ec8:	059a      	lsls	r2, r3, #22
 8019eca:	d402      	bmi.n	8019ed2 <_vfiprintf_r+0x202>
 8019ecc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019ece:	f7ff fec7 	bl	8019c60 <__retarget_lock_release_recursive>
 8019ed2:	89ab      	ldrh	r3, [r5, #12]
 8019ed4:	065b      	lsls	r3, r3, #25
 8019ed6:	f53f af1d 	bmi.w	8019d14 <_vfiprintf_r+0x44>
 8019eda:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019edc:	e71c      	b.n	8019d18 <_vfiprintf_r+0x48>
 8019ede:	ab03      	add	r3, sp, #12
 8019ee0:	462a      	mov	r2, r5
 8019ee2:	a904      	add	r1, sp, #16
 8019ee4:	4630      	mov	r0, r6
 8019ee6:	9300      	str	r3, [sp, #0]
 8019ee8:	4b04      	ldr	r3, [pc, #16]	; (8019efc <_vfiprintf_r+0x22c>)
 8019eea:	f000 f91d 	bl	801a128 <_printf_i>
 8019eee:	e7e4      	b.n	8019eba <_vfiprintf_r+0x1ea>
 8019ef0:	0801ac3c 	.word	0x0801ac3c
 8019ef4:	0801ac46 	.word	0x0801ac46
 8019ef8:	00000000 	.word	0x00000000
 8019efc:	08019cab 	.word	0x08019cab
 8019f00:	0801ac42 	.word	0x0801ac42

08019f04 <sbrk_aligned>:
 8019f04:	b570      	push	{r4, r5, r6, lr}
 8019f06:	4e0e      	ldr	r6, [pc, #56]	; (8019f40 <sbrk_aligned+0x3c>)
 8019f08:	460c      	mov	r4, r1
 8019f0a:	4605      	mov	r5, r0
 8019f0c:	6831      	ldr	r1, [r6, #0]
 8019f0e:	b911      	cbnz	r1, 8019f16 <sbrk_aligned+0x12>
 8019f10:	f000 fc72 	bl	801a7f8 <_sbrk_r>
 8019f14:	6030      	str	r0, [r6, #0]
 8019f16:	4621      	mov	r1, r4
 8019f18:	4628      	mov	r0, r5
 8019f1a:	f000 fc6d 	bl	801a7f8 <_sbrk_r>
 8019f1e:	1c43      	adds	r3, r0, #1
 8019f20:	d00a      	beq.n	8019f38 <sbrk_aligned+0x34>
 8019f22:	1cc4      	adds	r4, r0, #3
 8019f24:	f024 0403 	bic.w	r4, r4, #3
 8019f28:	42a0      	cmp	r0, r4
 8019f2a:	d007      	beq.n	8019f3c <sbrk_aligned+0x38>
 8019f2c:	1a21      	subs	r1, r4, r0
 8019f2e:	4628      	mov	r0, r5
 8019f30:	f000 fc62 	bl	801a7f8 <_sbrk_r>
 8019f34:	3001      	adds	r0, #1
 8019f36:	d101      	bne.n	8019f3c <sbrk_aligned+0x38>
 8019f38:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8019f3c:	4620      	mov	r0, r4
 8019f3e:	bd70      	pop	{r4, r5, r6, pc}
 8019f40:	20015998 	.word	0x20015998

08019f44 <_malloc_r>:
 8019f44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019f48:	1ccd      	adds	r5, r1, #3
 8019f4a:	4607      	mov	r7, r0
 8019f4c:	f025 0503 	bic.w	r5, r5, #3
 8019f50:	3508      	adds	r5, #8
 8019f52:	2d0c      	cmp	r5, #12
 8019f54:	bf38      	it	cc
 8019f56:	250c      	movcc	r5, #12
 8019f58:	2d00      	cmp	r5, #0
 8019f5a:	db01      	blt.n	8019f60 <_malloc_r+0x1c>
 8019f5c:	42a9      	cmp	r1, r5
 8019f5e:	d905      	bls.n	8019f6c <_malloc_r+0x28>
 8019f60:	230c      	movs	r3, #12
 8019f62:	2600      	movs	r6, #0
 8019f64:	603b      	str	r3, [r7, #0]
 8019f66:	4630      	mov	r0, r6
 8019f68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019f6c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801a040 <_malloc_r+0xfc>
 8019f70:	f000 faa6 	bl	801a4c0 <__malloc_lock>
 8019f74:	f8d8 3000 	ldr.w	r3, [r8]
 8019f78:	461c      	mov	r4, r3
 8019f7a:	bb5c      	cbnz	r4, 8019fd4 <_malloc_r+0x90>
 8019f7c:	4629      	mov	r1, r5
 8019f7e:	4638      	mov	r0, r7
 8019f80:	f7ff ffc0 	bl	8019f04 <sbrk_aligned>
 8019f84:	1c43      	adds	r3, r0, #1
 8019f86:	4604      	mov	r4, r0
 8019f88:	d155      	bne.n	801a036 <_malloc_r+0xf2>
 8019f8a:	f8d8 4000 	ldr.w	r4, [r8]
 8019f8e:	4626      	mov	r6, r4
 8019f90:	2e00      	cmp	r6, #0
 8019f92:	d145      	bne.n	801a020 <_malloc_r+0xdc>
 8019f94:	2c00      	cmp	r4, #0
 8019f96:	d048      	beq.n	801a02a <_malloc_r+0xe6>
 8019f98:	6823      	ldr	r3, [r4, #0]
 8019f9a:	4631      	mov	r1, r6
 8019f9c:	4638      	mov	r0, r7
 8019f9e:	eb04 0903 	add.w	r9, r4, r3
 8019fa2:	f000 fc29 	bl	801a7f8 <_sbrk_r>
 8019fa6:	4581      	cmp	r9, r0
 8019fa8:	d13f      	bne.n	801a02a <_malloc_r+0xe6>
 8019faa:	6821      	ldr	r1, [r4, #0]
 8019fac:	4638      	mov	r0, r7
 8019fae:	1a6d      	subs	r5, r5, r1
 8019fb0:	4629      	mov	r1, r5
 8019fb2:	f7ff ffa7 	bl	8019f04 <sbrk_aligned>
 8019fb6:	3001      	adds	r0, #1
 8019fb8:	d037      	beq.n	801a02a <_malloc_r+0xe6>
 8019fba:	6823      	ldr	r3, [r4, #0]
 8019fbc:	442b      	add	r3, r5
 8019fbe:	6023      	str	r3, [r4, #0]
 8019fc0:	f8d8 3000 	ldr.w	r3, [r8]
 8019fc4:	2b00      	cmp	r3, #0
 8019fc6:	d038      	beq.n	801a03a <_malloc_r+0xf6>
 8019fc8:	685a      	ldr	r2, [r3, #4]
 8019fca:	42a2      	cmp	r2, r4
 8019fcc:	d12b      	bne.n	801a026 <_malloc_r+0xe2>
 8019fce:	2200      	movs	r2, #0
 8019fd0:	605a      	str	r2, [r3, #4]
 8019fd2:	e00f      	b.n	8019ff4 <_malloc_r+0xb0>
 8019fd4:	6822      	ldr	r2, [r4, #0]
 8019fd6:	1b52      	subs	r2, r2, r5
 8019fd8:	d41f      	bmi.n	801a01a <_malloc_r+0xd6>
 8019fda:	2a0b      	cmp	r2, #11
 8019fdc:	d917      	bls.n	801a00e <_malloc_r+0xca>
 8019fde:	1961      	adds	r1, r4, r5
 8019fe0:	42a3      	cmp	r3, r4
 8019fe2:	6025      	str	r5, [r4, #0]
 8019fe4:	bf18      	it	ne
 8019fe6:	6059      	strne	r1, [r3, #4]
 8019fe8:	6863      	ldr	r3, [r4, #4]
 8019fea:	bf08      	it	eq
 8019fec:	f8c8 1000 	streq.w	r1, [r8]
 8019ff0:	5162      	str	r2, [r4, r5]
 8019ff2:	604b      	str	r3, [r1, #4]
 8019ff4:	f104 060b 	add.w	r6, r4, #11
 8019ff8:	4638      	mov	r0, r7
 8019ffa:	f000 fa67 	bl	801a4cc <__malloc_unlock>
 8019ffe:	1d23      	adds	r3, r4, #4
 801a000:	f026 0607 	bic.w	r6, r6, #7
 801a004:	1af2      	subs	r2, r6, r3
 801a006:	d0ae      	beq.n	8019f66 <_malloc_r+0x22>
 801a008:	1b9b      	subs	r3, r3, r6
 801a00a:	50a3      	str	r3, [r4, r2]
 801a00c:	e7ab      	b.n	8019f66 <_malloc_r+0x22>
 801a00e:	42a3      	cmp	r3, r4
 801a010:	6862      	ldr	r2, [r4, #4]
 801a012:	d1dd      	bne.n	8019fd0 <_malloc_r+0x8c>
 801a014:	f8c8 2000 	str.w	r2, [r8]
 801a018:	e7ec      	b.n	8019ff4 <_malloc_r+0xb0>
 801a01a:	4623      	mov	r3, r4
 801a01c:	6864      	ldr	r4, [r4, #4]
 801a01e:	e7ac      	b.n	8019f7a <_malloc_r+0x36>
 801a020:	4634      	mov	r4, r6
 801a022:	6876      	ldr	r6, [r6, #4]
 801a024:	e7b4      	b.n	8019f90 <_malloc_r+0x4c>
 801a026:	4613      	mov	r3, r2
 801a028:	e7cc      	b.n	8019fc4 <_malloc_r+0x80>
 801a02a:	230c      	movs	r3, #12
 801a02c:	4638      	mov	r0, r7
 801a02e:	603b      	str	r3, [r7, #0]
 801a030:	f000 fa4c 	bl	801a4cc <__malloc_unlock>
 801a034:	e797      	b.n	8019f66 <_malloc_r+0x22>
 801a036:	6025      	str	r5, [r4, #0]
 801a038:	e7dc      	b.n	8019ff4 <_malloc_r+0xb0>
 801a03a:	605b      	str	r3, [r3, #4]
 801a03c:	deff      	udf	#255	; 0xff
 801a03e:	bf00      	nop
 801a040:	20015994 	.word	0x20015994

0801a044 <_printf_common>:
 801a044:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a048:	4616      	mov	r6, r2
 801a04a:	4699      	mov	r9, r3
 801a04c:	688a      	ldr	r2, [r1, #8]
 801a04e:	4607      	mov	r7, r0
 801a050:	690b      	ldr	r3, [r1, #16]
 801a052:	460c      	mov	r4, r1
 801a054:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801a058:	4293      	cmp	r3, r2
 801a05a:	bfb8      	it	lt
 801a05c:	4613      	movlt	r3, r2
 801a05e:	6033      	str	r3, [r6, #0]
 801a060:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801a064:	b10a      	cbz	r2, 801a06a <_printf_common+0x26>
 801a066:	3301      	adds	r3, #1
 801a068:	6033      	str	r3, [r6, #0]
 801a06a:	6823      	ldr	r3, [r4, #0]
 801a06c:	0699      	lsls	r1, r3, #26
 801a06e:	bf42      	ittt	mi
 801a070:	6833      	ldrmi	r3, [r6, #0]
 801a072:	3302      	addmi	r3, #2
 801a074:	6033      	strmi	r3, [r6, #0]
 801a076:	6825      	ldr	r5, [r4, #0]
 801a078:	f015 0506 	ands.w	r5, r5, #6
 801a07c:	d106      	bne.n	801a08c <_printf_common+0x48>
 801a07e:	f104 0a19 	add.w	sl, r4, #25
 801a082:	68e3      	ldr	r3, [r4, #12]
 801a084:	6832      	ldr	r2, [r6, #0]
 801a086:	1a9b      	subs	r3, r3, r2
 801a088:	42ab      	cmp	r3, r5
 801a08a:	dc2b      	bgt.n	801a0e4 <_printf_common+0xa0>
 801a08c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801a090:	1e13      	subs	r3, r2, #0
 801a092:	6822      	ldr	r2, [r4, #0]
 801a094:	bf18      	it	ne
 801a096:	2301      	movne	r3, #1
 801a098:	0692      	lsls	r2, r2, #26
 801a09a:	d430      	bmi.n	801a0fe <_printf_common+0xba>
 801a09c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801a0a0:	4649      	mov	r1, r9
 801a0a2:	4638      	mov	r0, r7
 801a0a4:	47c0      	blx	r8
 801a0a6:	3001      	adds	r0, #1
 801a0a8:	d023      	beq.n	801a0f2 <_printf_common+0xae>
 801a0aa:	6823      	ldr	r3, [r4, #0]
 801a0ac:	341a      	adds	r4, #26
 801a0ae:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 801a0b2:	f003 0306 	and.w	r3, r3, #6
 801a0b6:	2b04      	cmp	r3, #4
 801a0b8:	bf0a      	itet	eq
 801a0ba:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 801a0be:	2500      	movne	r5, #0
 801a0c0:	6833      	ldreq	r3, [r6, #0]
 801a0c2:	f04f 0600 	mov.w	r6, #0
 801a0c6:	bf08      	it	eq
 801a0c8:	1aed      	subeq	r5, r5, r3
 801a0ca:	f854 3c12 	ldr.w	r3, [r4, #-18]
 801a0ce:	bf08      	it	eq
 801a0d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a0d4:	4293      	cmp	r3, r2
 801a0d6:	bfc4      	itt	gt
 801a0d8:	1a9b      	subgt	r3, r3, r2
 801a0da:	18ed      	addgt	r5, r5, r3
 801a0dc:	42b5      	cmp	r5, r6
 801a0de:	d11a      	bne.n	801a116 <_printf_common+0xd2>
 801a0e0:	2000      	movs	r0, #0
 801a0e2:	e008      	b.n	801a0f6 <_printf_common+0xb2>
 801a0e4:	2301      	movs	r3, #1
 801a0e6:	4652      	mov	r2, sl
 801a0e8:	4649      	mov	r1, r9
 801a0ea:	4638      	mov	r0, r7
 801a0ec:	47c0      	blx	r8
 801a0ee:	3001      	adds	r0, #1
 801a0f0:	d103      	bne.n	801a0fa <_printf_common+0xb6>
 801a0f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a0f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a0fa:	3501      	adds	r5, #1
 801a0fc:	e7c1      	b.n	801a082 <_printf_common+0x3e>
 801a0fe:	18e1      	adds	r1, r4, r3
 801a100:	1c5a      	adds	r2, r3, #1
 801a102:	2030      	movs	r0, #48	; 0x30
 801a104:	3302      	adds	r3, #2
 801a106:	4422      	add	r2, r4
 801a108:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801a10c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801a110:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801a114:	e7c2      	b.n	801a09c <_printf_common+0x58>
 801a116:	2301      	movs	r3, #1
 801a118:	4622      	mov	r2, r4
 801a11a:	4649      	mov	r1, r9
 801a11c:	4638      	mov	r0, r7
 801a11e:	47c0      	blx	r8
 801a120:	3001      	adds	r0, #1
 801a122:	d0e6      	beq.n	801a0f2 <_printf_common+0xae>
 801a124:	3601      	adds	r6, #1
 801a126:	e7d9      	b.n	801a0dc <_printf_common+0x98>

0801a128 <_printf_i>:
 801a128:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a12c:	7e0f      	ldrb	r7, [r1, #24]
 801a12e:	4691      	mov	r9, r2
 801a130:	4680      	mov	r8, r0
 801a132:	460c      	mov	r4, r1
 801a134:	2f78      	cmp	r7, #120	; 0x78
 801a136:	469a      	mov	sl, r3
 801a138:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801a13a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801a13e:	d807      	bhi.n	801a150 <_printf_i+0x28>
 801a140:	2f62      	cmp	r7, #98	; 0x62
 801a142:	d80a      	bhi.n	801a15a <_printf_i+0x32>
 801a144:	2f00      	cmp	r7, #0
 801a146:	f000 80d3 	beq.w	801a2f0 <_printf_i+0x1c8>
 801a14a:	2f58      	cmp	r7, #88	; 0x58
 801a14c:	f000 80bf 	beq.w	801a2ce <_printf_i+0x1a6>
 801a150:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a154:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801a158:	e03a      	b.n	801a1d0 <_printf_i+0xa8>
 801a15a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801a15e:	2b15      	cmp	r3, #21
 801a160:	d8f6      	bhi.n	801a150 <_printf_i+0x28>
 801a162:	a101      	add	r1, pc, #4	; (adr r1, 801a168 <_printf_i+0x40>)
 801a164:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801a168:	0801a1c1 	.word	0x0801a1c1
 801a16c:	0801a1d5 	.word	0x0801a1d5
 801a170:	0801a151 	.word	0x0801a151
 801a174:	0801a151 	.word	0x0801a151
 801a178:	0801a151 	.word	0x0801a151
 801a17c:	0801a151 	.word	0x0801a151
 801a180:	0801a1d5 	.word	0x0801a1d5
 801a184:	0801a151 	.word	0x0801a151
 801a188:	0801a151 	.word	0x0801a151
 801a18c:	0801a151 	.word	0x0801a151
 801a190:	0801a151 	.word	0x0801a151
 801a194:	0801a2d7 	.word	0x0801a2d7
 801a198:	0801a201 	.word	0x0801a201
 801a19c:	0801a293 	.word	0x0801a293
 801a1a0:	0801a151 	.word	0x0801a151
 801a1a4:	0801a151 	.word	0x0801a151
 801a1a8:	0801a2f9 	.word	0x0801a2f9
 801a1ac:	0801a151 	.word	0x0801a151
 801a1b0:	0801a201 	.word	0x0801a201
 801a1b4:	0801a151 	.word	0x0801a151
 801a1b8:	0801a151 	.word	0x0801a151
 801a1bc:	0801a29b 	.word	0x0801a29b
 801a1c0:	682b      	ldr	r3, [r5, #0]
 801a1c2:	1d1a      	adds	r2, r3, #4
 801a1c4:	681b      	ldr	r3, [r3, #0]
 801a1c6:	602a      	str	r2, [r5, #0]
 801a1c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a1cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801a1d0:	2301      	movs	r3, #1
 801a1d2:	e09e      	b.n	801a312 <_printf_i+0x1ea>
 801a1d4:	6820      	ldr	r0, [r4, #0]
 801a1d6:	682b      	ldr	r3, [r5, #0]
 801a1d8:	0607      	lsls	r7, r0, #24
 801a1da:	f103 0104 	add.w	r1, r3, #4
 801a1de:	6029      	str	r1, [r5, #0]
 801a1e0:	d501      	bpl.n	801a1e6 <_printf_i+0xbe>
 801a1e2:	681e      	ldr	r6, [r3, #0]
 801a1e4:	e003      	b.n	801a1ee <_printf_i+0xc6>
 801a1e6:	0646      	lsls	r6, r0, #25
 801a1e8:	d5fb      	bpl.n	801a1e2 <_printf_i+0xba>
 801a1ea:	f9b3 6000 	ldrsh.w	r6, [r3]
 801a1ee:	2e00      	cmp	r6, #0
 801a1f0:	da03      	bge.n	801a1fa <_printf_i+0xd2>
 801a1f2:	232d      	movs	r3, #45	; 0x2d
 801a1f4:	4276      	negs	r6, r6
 801a1f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a1fa:	4859      	ldr	r0, [pc, #356]	; (801a360 <_printf_i+0x238>)
 801a1fc:	230a      	movs	r3, #10
 801a1fe:	e012      	b.n	801a226 <_printf_i+0xfe>
 801a200:	682b      	ldr	r3, [r5, #0]
 801a202:	6820      	ldr	r0, [r4, #0]
 801a204:	1d19      	adds	r1, r3, #4
 801a206:	6029      	str	r1, [r5, #0]
 801a208:	0605      	lsls	r5, r0, #24
 801a20a:	d501      	bpl.n	801a210 <_printf_i+0xe8>
 801a20c:	681e      	ldr	r6, [r3, #0]
 801a20e:	e002      	b.n	801a216 <_printf_i+0xee>
 801a210:	0641      	lsls	r1, r0, #25
 801a212:	d5fb      	bpl.n	801a20c <_printf_i+0xe4>
 801a214:	881e      	ldrh	r6, [r3, #0]
 801a216:	2f6f      	cmp	r7, #111	; 0x6f
 801a218:	4851      	ldr	r0, [pc, #324]	; (801a360 <_printf_i+0x238>)
 801a21a:	bf0c      	ite	eq
 801a21c:	2308      	moveq	r3, #8
 801a21e:	230a      	movne	r3, #10
 801a220:	2100      	movs	r1, #0
 801a222:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801a226:	6865      	ldr	r5, [r4, #4]
 801a228:	2d00      	cmp	r5, #0
 801a22a:	60a5      	str	r5, [r4, #8]
 801a22c:	bfa2      	ittt	ge
 801a22e:	6821      	ldrge	r1, [r4, #0]
 801a230:	f021 0104 	bicge.w	r1, r1, #4
 801a234:	6021      	strge	r1, [r4, #0]
 801a236:	b90e      	cbnz	r6, 801a23c <_printf_i+0x114>
 801a238:	2d00      	cmp	r5, #0
 801a23a:	d04a      	beq.n	801a2d2 <_printf_i+0x1aa>
 801a23c:	4615      	mov	r5, r2
 801a23e:	fbb6 f1f3 	udiv	r1, r6, r3
 801a242:	fb03 6711 	mls	r7, r3, r1, r6
 801a246:	5dc7      	ldrb	r7, [r0, r7]
 801a248:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801a24c:	4637      	mov	r7, r6
 801a24e:	460e      	mov	r6, r1
 801a250:	42bb      	cmp	r3, r7
 801a252:	d9f4      	bls.n	801a23e <_printf_i+0x116>
 801a254:	2b08      	cmp	r3, #8
 801a256:	d10b      	bne.n	801a270 <_printf_i+0x148>
 801a258:	6823      	ldr	r3, [r4, #0]
 801a25a:	07de      	lsls	r6, r3, #31
 801a25c:	d508      	bpl.n	801a270 <_printf_i+0x148>
 801a25e:	6923      	ldr	r3, [r4, #16]
 801a260:	6861      	ldr	r1, [r4, #4]
 801a262:	4299      	cmp	r1, r3
 801a264:	bfde      	ittt	le
 801a266:	2330      	movle	r3, #48	; 0x30
 801a268:	f805 3c01 	strble.w	r3, [r5, #-1]
 801a26c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801a270:	1b52      	subs	r2, r2, r5
 801a272:	6122      	str	r2, [r4, #16]
 801a274:	464b      	mov	r3, r9
 801a276:	aa03      	add	r2, sp, #12
 801a278:	4621      	mov	r1, r4
 801a27a:	4640      	mov	r0, r8
 801a27c:	f8cd a000 	str.w	sl, [sp]
 801a280:	f7ff fee0 	bl	801a044 <_printf_common>
 801a284:	3001      	adds	r0, #1
 801a286:	d149      	bne.n	801a31c <_printf_i+0x1f4>
 801a288:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a28c:	b004      	add	sp, #16
 801a28e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a292:	6823      	ldr	r3, [r4, #0]
 801a294:	f043 0320 	orr.w	r3, r3, #32
 801a298:	6023      	str	r3, [r4, #0]
 801a29a:	2778      	movs	r7, #120	; 0x78
 801a29c:	4831      	ldr	r0, [pc, #196]	; (801a364 <_printf_i+0x23c>)
 801a29e:	6823      	ldr	r3, [r4, #0]
 801a2a0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801a2a4:	061f      	lsls	r7, r3, #24
 801a2a6:	6829      	ldr	r1, [r5, #0]
 801a2a8:	f851 6b04 	ldr.w	r6, [r1], #4
 801a2ac:	d402      	bmi.n	801a2b4 <_printf_i+0x18c>
 801a2ae:	065f      	lsls	r7, r3, #25
 801a2b0:	bf48      	it	mi
 801a2b2:	b2b6      	uxthmi	r6, r6
 801a2b4:	07df      	lsls	r7, r3, #31
 801a2b6:	6029      	str	r1, [r5, #0]
 801a2b8:	bf44      	itt	mi
 801a2ba:	f043 0320 	orrmi.w	r3, r3, #32
 801a2be:	6023      	strmi	r3, [r4, #0]
 801a2c0:	b91e      	cbnz	r6, 801a2ca <_printf_i+0x1a2>
 801a2c2:	6823      	ldr	r3, [r4, #0]
 801a2c4:	f023 0320 	bic.w	r3, r3, #32
 801a2c8:	6023      	str	r3, [r4, #0]
 801a2ca:	2310      	movs	r3, #16
 801a2cc:	e7a8      	b.n	801a220 <_printf_i+0xf8>
 801a2ce:	4824      	ldr	r0, [pc, #144]	; (801a360 <_printf_i+0x238>)
 801a2d0:	e7e5      	b.n	801a29e <_printf_i+0x176>
 801a2d2:	4615      	mov	r5, r2
 801a2d4:	e7be      	b.n	801a254 <_printf_i+0x12c>
 801a2d6:	682b      	ldr	r3, [r5, #0]
 801a2d8:	6826      	ldr	r6, [r4, #0]
 801a2da:	1d18      	adds	r0, r3, #4
 801a2dc:	6961      	ldr	r1, [r4, #20]
 801a2de:	6028      	str	r0, [r5, #0]
 801a2e0:	0635      	lsls	r5, r6, #24
 801a2e2:	681b      	ldr	r3, [r3, #0]
 801a2e4:	d501      	bpl.n	801a2ea <_printf_i+0x1c2>
 801a2e6:	6019      	str	r1, [r3, #0]
 801a2e8:	e002      	b.n	801a2f0 <_printf_i+0x1c8>
 801a2ea:	0670      	lsls	r0, r6, #25
 801a2ec:	d5fb      	bpl.n	801a2e6 <_printf_i+0x1be>
 801a2ee:	8019      	strh	r1, [r3, #0]
 801a2f0:	2300      	movs	r3, #0
 801a2f2:	4615      	mov	r5, r2
 801a2f4:	6123      	str	r3, [r4, #16]
 801a2f6:	e7bd      	b.n	801a274 <_printf_i+0x14c>
 801a2f8:	682b      	ldr	r3, [r5, #0]
 801a2fa:	2100      	movs	r1, #0
 801a2fc:	1d1a      	adds	r2, r3, #4
 801a2fe:	602a      	str	r2, [r5, #0]
 801a300:	681d      	ldr	r5, [r3, #0]
 801a302:	6862      	ldr	r2, [r4, #4]
 801a304:	4628      	mov	r0, r5
 801a306:	f000 fa99 	bl	801a83c <memchr>
 801a30a:	b108      	cbz	r0, 801a310 <_printf_i+0x1e8>
 801a30c:	1b40      	subs	r0, r0, r5
 801a30e:	6060      	str	r0, [r4, #4]
 801a310:	6863      	ldr	r3, [r4, #4]
 801a312:	6123      	str	r3, [r4, #16]
 801a314:	2300      	movs	r3, #0
 801a316:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a31a:	e7ab      	b.n	801a274 <_printf_i+0x14c>
 801a31c:	6923      	ldr	r3, [r4, #16]
 801a31e:	462a      	mov	r2, r5
 801a320:	4649      	mov	r1, r9
 801a322:	4640      	mov	r0, r8
 801a324:	47d0      	blx	sl
 801a326:	3001      	adds	r0, #1
 801a328:	d0ae      	beq.n	801a288 <_printf_i+0x160>
 801a32a:	6823      	ldr	r3, [r4, #0]
 801a32c:	079b      	lsls	r3, r3, #30
 801a32e:	d413      	bmi.n	801a358 <_printf_i+0x230>
 801a330:	68e0      	ldr	r0, [r4, #12]
 801a332:	9b03      	ldr	r3, [sp, #12]
 801a334:	4298      	cmp	r0, r3
 801a336:	bfb8      	it	lt
 801a338:	4618      	movlt	r0, r3
 801a33a:	e7a7      	b.n	801a28c <_printf_i+0x164>
 801a33c:	2301      	movs	r3, #1
 801a33e:	4632      	mov	r2, r6
 801a340:	4649      	mov	r1, r9
 801a342:	4640      	mov	r0, r8
 801a344:	47d0      	blx	sl
 801a346:	3001      	adds	r0, #1
 801a348:	d09e      	beq.n	801a288 <_printf_i+0x160>
 801a34a:	3501      	adds	r5, #1
 801a34c:	68e3      	ldr	r3, [r4, #12]
 801a34e:	9903      	ldr	r1, [sp, #12]
 801a350:	1a5b      	subs	r3, r3, r1
 801a352:	42ab      	cmp	r3, r5
 801a354:	dcf2      	bgt.n	801a33c <_printf_i+0x214>
 801a356:	e7eb      	b.n	801a330 <_printf_i+0x208>
 801a358:	2500      	movs	r5, #0
 801a35a:	f104 0619 	add.w	r6, r4, #25
 801a35e:	e7f5      	b.n	801a34c <_printf_i+0x224>
 801a360:	0801ac4d 	.word	0x0801ac4d
 801a364:	0801ac5e 	.word	0x0801ac5e

0801a368 <__sflush_r>:
 801a368:	898a      	ldrh	r2, [r1, #12]
 801a36a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a36e:	4605      	mov	r5, r0
 801a370:	0710      	lsls	r0, r2, #28
 801a372:	460c      	mov	r4, r1
 801a374:	d458      	bmi.n	801a428 <__sflush_r+0xc0>
 801a376:	684b      	ldr	r3, [r1, #4]
 801a378:	2b00      	cmp	r3, #0
 801a37a:	dc05      	bgt.n	801a388 <__sflush_r+0x20>
 801a37c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801a37e:	2b00      	cmp	r3, #0
 801a380:	dc02      	bgt.n	801a388 <__sflush_r+0x20>
 801a382:	2000      	movs	r0, #0
 801a384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a388:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a38a:	2e00      	cmp	r6, #0
 801a38c:	d0f9      	beq.n	801a382 <__sflush_r+0x1a>
 801a38e:	2300      	movs	r3, #0
 801a390:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801a394:	682f      	ldr	r7, [r5, #0]
 801a396:	6a21      	ldr	r1, [r4, #32]
 801a398:	602b      	str	r3, [r5, #0]
 801a39a:	d032      	beq.n	801a402 <__sflush_r+0x9a>
 801a39c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801a39e:	89a3      	ldrh	r3, [r4, #12]
 801a3a0:	075a      	lsls	r2, r3, #29
 801a3a2:	d505      	bpl.n	801a3b0 <__sflush_r+0x48>
 801a3a4:	6863      	ldr	r3, [r4, #4]
 801a3a6:	1ac0      	subs	r0, r0, r3
 801a3a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801a3aa:	b10b      	cbz	r3, 801a3b0 <__sflush_r+0x48>
 801a3ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801a3ae:	1ac0      	subs	r0, r0, r3
 801a3b0:	2300      	movs	r3, #0
 801a3b2:	4602      	mov	r2, r0
 801a3b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a3b6:	4628      	mov	r0, r5
 801a3b8:	6a21      	ldr	r1, [r4, #32]
 801a3ba:	47b0      	blx	r6
 801a3bc:	1c43      	adds	r3, r0, #1
 801a3be:	89a3      	ldrh	r3, [r4, #12]
 801a3c0:	d106      	bne.n	801a3d0 <__sflush_r+0x68>
 801a3c2:	6829      	ldr	r1, [r5, #0]
 801a3c4:	291d      	cmp	r1, #29
 801a3c6:	d82b      	bhi.n	801a420 <__sflush_r+0xb8>
 801a3c8:	4a28      	ldr	r2, [pc, #160]	; (801a46c <__sflush_r+0x104>)
 801a3ca:	410a      	asrs	r2, r1
 801a3cc:	07d6      	lsls	r6, r2, #31
 801a3ce:	d427      	bmi.n	801a420 <__sflush_r+0xb8>
 801a3d0:	2200      	movs	r2, #0
 801a3d2:	04d9      	lsls	r1, r3, #19
 801a3d4:	6062      	str	r2, [r4, #4]
 801a3d6:	6922      	ldr	r2, [r4, #16]
 801a3d8:	6022      	str	r2, [r4, #0]
 801a3da:	d504      	bpl.n	801a3e6 <__sflush_r+0x7e>
 801a3dc:	1c42      	adds	r2, r0, #1
 801a3de:	d101      	bne.n	801a3e4 <__sflush_r+0x7c>
 801a3e0:	682b      	ldr	r3, [r5, #0]
 801a3e2:	b903      	cbnz	r3, 801a3e6 <__sflush_r+0x7e>
 801a3e4:	6560      	str	r0, [r4, #84]	; 0x54
 801a3e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a3e8:	602f      	str	r7, [r5, #0]
 801a3ea:	2900      	cmp	r1, #0
 801a3ec:	d0c9      	beq.n	801a382 <__sflush_r+0x1a>
 801a3ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a3f2:	4299      	cmp	r1, r3
 801a3f4:	d002      	beq.n	801a3fc <__sflush_r+0x94>
 801a3f6:	4628      	mov	r0, r5
 801a3f8:	f000 fa2e 	bl	801a858 <_free_r>
 801a3fc:	2000      	movs	r0, #0
 801a3fe:	6360      	str	r0, [r4, #52]	; 0x34
 801a400:	e7c0      	b.n	801a384 <__sflush_r+0x1c>
 801a402:	2301      	movs	r3, #1
 801a404:	4628      	mov	r0, r5
 801a406:	47b0      	blx	r6
 801a408:	1c41      	adds	r1, r0, #1
 801a40a:	d1c8      	bne.n	801a39e <__sflush_r+0x36>
 801a40c:	682b      	ldr	r3, [r5, #0]
 801a40e:	2b00      	cmp	r3, #0
 801a410:	d0c5      	beq.n	801a39e <__sflush_r+0x36>
 801a412:	2b1d      	cmp	r3, #29
 801a414:	d001      	beq.n	801a41a <__sflush_r+0xb2>
 801a416:	2b16      	cmp	r3, #22
 801a418:	d101      	bne.n	801a41e <__sflush_r+0xb6>
 801a41a:	602f      	str	r7, [r5, #0]
 801a41c:	e7b1      	b.n	801a382 <__sflush_r+0x1a>
 801a41e:	89a3      	ldrh	r3, [r4, #12]
 801a420:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a424:	81a3      	strh	r3, [r4, #12]
 801a426:	e7ad      	b.n	801a384 <__sflush_r+0x1c>
 801a428:	690f      	ldr	r7, [r1, #16]
 801a42a:	2f00      	cmp	r7, #0
 801a42c:	d0a9      	beq.n	801a382 <__sflush_r+0x1a>
 801a42e:	0793      	lsls	r3, r2, #30
 801a430:	680e      	ldr	r6, [r1, #0]
 801a432:	600f      	str	r7, [r1, #0]
 801a434:	bf0c      	ite	eq
 801a436:	694b      	ldreq	r3, [r1, #20]
 801a438:	2300      	movne	r3, #0
 801a43a:	eba6 0807 	sub.w	r8, r6, r7
 801a43e:	608b      	str	r3, [r1, #8]
 801a440:	f1b8 0f00 	cmp.w	r8, #0
 801a444:	dd9d      	ble.n	801a382 <__sflush_r+0x1a>
 801a446:	4643      	mov	r3, r8
 801a448:	463a      	mov	r2, r7
 801a44a:	6a21      	ldr	r1, [r4, #32]
 801a44c:	4628      	mov	r0, r5
 801a44e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801a450:	47b0      	blx	r6
 801a452:	2800      	cmp	r0, #0
 801a454:	dc06      	bgt.n	801a464 <__sflush_r+0xfc>
 801a456:	89a3      	ldrh	r3, [r4, #12]
 801a458:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a45c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a460:	81a3      	strh	r3, [r4, #12]
 801a462:	e78f      	b.n	801a384 <__sflush_r+0x1c>
 801a464:	4407      	add	r7, r0
 801a466:	eba8 0800 	sub.w	r8, r8, r0
 801a46a:	e7e9      	b.n	801a440 <__sflush_r+0xd8>
 801a46c:	dfbffffe 	.word	0xdfbffffe

0801a470 <_fflush_r>:
 801a470:	b538      	push	{r3, r4, r5, lr}
 801a472:	690b      	ldr	r3, [r1, #16]
 801a474:	4605      	mov	r5, r0
 801a476:	460c      	mov	r4, r1
 801a478:	b913      	cbnz	r3, 801a480 <_fflush_r+0x10>
 801a47a:	2500      	movs	r5, #0
 801a47c:	4628      	mov	r0, r5
 801a47e:	bd38      	pop	{r3, r4, r5, pc}
 801a480:	b118      	cbz	r0, 801a48a <_fflush_r+0x1a>
 801a482:	6a03      	ldr	r3, [r0, #32]
 801a484:	b90b      	cbnz	r3, 801a48a <_fflush_r+0x1a>
 801a486:	f7ff fb13 	bl	8019ab0 <__sinit>
 801a48a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a48e:	2b00      	cmp	r3, #0
 801a490:	d0f3      	beq.n	801a47a <_fflush_r+0xa>
 801a492:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801a494:	07d0      	lsls	r0, r2, #31
 801a496:	d404      	bmi.n	801a4a2 <_fflush_r+0x32>
 801a498:	0599      	lsls	r1, r3, #22
 801a49a:	d402      	bmi.n	801a4a2 <_fflush_r+0x32>
 801a49c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a49e:	f7ff fbde 	bl	8019c5e <__retarget_lock_acquire_recursive>
 801a4a2:	4628      	mov	r0, r5
 801a4a4:	4621      	mov	r1, r4
 801a4a6:	f7ff ff5f 	bl	801a368 <__sflush_r>
 801a4aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a4ac:	4605      	mov	r5, r0
 801a4ae:	07da      	lsls	r2, r3, #31
 801a4b0:	d4e4      	bmi.n	801a47c <_fflush_r+0xc>
 801a4b2:	89a3      	ldrh	r3, [r4, #12]
 801a4b4:	059b      	lsls	r3, r3, #22
 801a4b6:	d4e1      	bmi.n	801a47c <_fflush_r+0xc>
 801a4b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a4ba:	f7ff fbd1 	bl	8019c60 <__retarget_lock_release_recursive>
 801a4be:	e7dd      	b.n	801a47c <_fflush_r+0xc>

0801a4c0 <__malloc_lock>:
 801a4c0:	4801      	ldr	r0, [pc, #4]	; (801a4c8 <__malloc_lock+0x8>)
 801a4c2:	f7ff bbcc 	b.w	8019c5e <__retarget_lock_acquire_recursive>
 801a4c6:	bf00      	nop
 801a4c8:	20015990 	.word	0x20015990

0801a4cc <__malloc_unlock>:
 801a4cc:	4801      	ldr	r0, [pc, #4]	; (801a4d4 <__malloc_unlock+0x8>)
 801a4ce:	f7ff bbc7 	b.w	8019c60 <__retarget_lock_release_recursive>
 801a4d2:	bf00      	nop
 801a4d4:	20015990 	.word	0x20015990

0801a4d8 <__sread>:
 801a4d8:	b510      	push	{r4, lr}
 801a4da:	460c      	mov	r4, r1
 801a4dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a4e0:	f000 f978 	bl	801a7d4 <_read_r>
 801a4e4:	2800      	cmp	r0, #0
 801a4e6:	bfab      	itete	ge
 801a4e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801a4ea:	89a3      	ldrhlt	r3, [r4, #12]
 801a4ec:	181b      	addge	r3, r3, r0
 801a4ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801a4f2:	bfac      	ite	ge
 801a4f4:	6563      	strge	r3, [r4, #84]	; 0x54
 801a4f6:	81a3      	strhlt	r3, [r4, #12]
 801a4f8:	bd10      	pop	{r4, pc}

0801a4fa <__swrite>:
 801a4fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a4fe:	461f      	mov	r7, r3
 801a500:	898b      	ldrh	r3, [r1, #12]
 801a502:	4605      	mov	r5, r0
 801a504:	460c      	mov	r4, r1
 801a506:	05db      	lsls	r3, r3, #23
 801a508:	4616      	mov	r6, r2
 801a50a:	d505      	bpl.n	801a518 <__swrite+0x1e>
 801a50c:	2302      	movs	r3, #2
 801a50e:	2200      	movs	r2, #0
 801a510:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a514:	f000 f94c 	bl	801a7b0 <_lseek_r>
 801a518:	89a3      	ldrh	r3, [r4, #12]
 801a51a:	4632      	mov	r2, r6
 801a51c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a520:	4628      	mov	r0, r5
 801a522:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801a526:	81a3      	strh	r3, [r4, #12]
 801a528:	463b      	mov	r3, r7
 801a52a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a52e:	f000 b973 	b.w	801a818 <_write_r>

0801a532 <__sseek>:
 801a532:	b510      	push	{r4, lr}
 801a534:	460c      	mov	r4, r1
 801a536:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a53a:	f000 f939 	bl	801a7b0 <_lseek_r>
 801a53e:	1c43      	adds	r3, r0, #1
 801a540:	89a3      	ldrh	r3, [r4, #12]
 801a542:	bf15      	itete	ne
 801a544:	6560      	strne	r0, [r4, #84]	; 0x54
 801a546:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801a54a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801a54e:	81a3      	strheq	r3, [r4, #12]
 801a550:	bf18      	it	ne
 801a552:	81a3      	strhne	r3, [r4, #12]
 801a554:	bd10      	pop	{r4, pc}

0801a556 <__sclose>:
 801a556:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a55a:	f000 b8f7 	b.w	801a74c <_close_r>

0801a55e <__swbuf_r>:
 801a55e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a560:	460e      	mov	r6, r1
 801a562:	4614      	mov	r4, r2
 801a564:	4605      	mov	r5, r0
 801a566:	b118      	cbz	r0, 801a570 <__swbuf_r+0x12>
 801a568:	6a03      	ldr	r3, [r0, #32]
 801a56a:	b90b      	cbnz	r3, 801a570 <__swbuf_r+0x12>
 801a56c:	f7ff faa0 	bl	8019ab0 <__sinit>
 801a570:	69a3      	ldr	r3, [r4, #24]
 801a572:	60a3      	str	r3, [r4, #8]
 801a574:	89a3      	ldrh	r3, [r4, #12]
 801a576:	071a      	lsls	r2, r3, #28
 801a578:	d525      	bpl.n	801a5c6 <__swbuf_r+0x68>
 801a57a:	6923      	ldr	r3, [r4, #16]
 801a57c:	b31b      	cbz	r3, 801a5c6 <__swbuf_r+0x68>
 801a57e:	6823      	ldr	r3, [r4, #0]
 801a580:	b2f6      	uxtb	r6, r6
 801a582:	6922      	ldr	r2, [r4, #16]
 801a584:	4637      	mov	r7, r6
 801a586:	1a98      	subs	r0, r3, r2
 801a588:	6963      	ldr	r3, [r4, #20]
 801a58a:	4283      	cmp	r3, r0
 801a58c:	dc04      	bgt.n	801a598 <__swbuf_r+0x3a>
 801a58e:	4621      	mov	r1, r4
 801a590:	4628      	mov	r0, r5
 801a592:	f7ff ff6d 	bl	801a470 <_fflush_r>
 801a596:	b9e0      	cbnz	r0, 801a5d2 <__swbuf_r+0x74>
 801a598:	68a3      	ldr	r3, [r4, #8]
 801a59a:	3b01      	subs	r3, #1
 801a59c:	60a3      	str	r3, [r4, #8]
 801a59e:	6823      	ldr	r3, [r4, #0]
 801a5a0:	1c5a      	adds	r2, r3, #1
 801a5a2:	6022      	str	r2, [r4, #0]
 801a5a4:	701e      	strb	r6, [r3, #0]
 801a5a6:	1c43      	adds	r3, r0, #1
 801a5a8:	6962      	ldr	r2, [r4, #20]
 801a5aa:	429a      	cmp	r2, r3
 801a5ac:	d004      	beq.n	801a5b8 <__swbuf_r+0x5a>
 801a5ae:	89a3      	ldrh	r3, [r4, #12]
 801a5b0:	07db      	lsls	r3, r3, #31
 801a5b2:	d506      	bpl.n	801a5c2 <__swbuf_r+0x64>
 801a5b4:	2e0a      	cmp	r6, #10
 801a5b6:	d104      	bne.n	801a5c2 <__swbuf_r+0x64>
 801a5b8:	4621      	mov	r1, r4
 801a5ba:	4628      	mov	r0, r5
 801a5bc:	f7ff ff58 	bl	801a470 <_fflush_r>
 801a5c0:	b938      	cbnz	r0, 801a5d2 <__swbuf_r+0x74>
 801a5c2:	4638      	mov	r0, r7
 801a5c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a5c6:	4621      	mov	r1, r4
 801a5c8:	4628      	mov	r0, r5
 801a5ca:	f000 f805 	bl	801a5d8 <__swsetup_r>
 801a5ce:	2800      	cmp	r0, #0
 801a5d0:	d0d5      	beq.n	801a57e <__swbuf_r+0x20>
 801a5d2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801a5d6:	e7f4      	b.n	801a5c2 <__swbuf_r+0x64>

0801a5d8 <__swsetup_r>:
 801a5d8:	b538      	push	{r3, r4, r5, lr}
 801a5da:	4b2a      	ldr	r3, [pc, #168]	; (801a684 <__swsetup_r+0xac>)
 801a5dc:	4605      	mov	r5, r0
 801a5de:	460c      	mov	r4, r1
 801a5e0:	6818      	ldr	r0, [r3, #0]
 801a5e2:	b118      	cbz	r0, 801a5ec <__swsetup_r+0x14>
 801a5e4:	6a03      	ldr	r3, [r0, #32]
 801a5e6:	b90b      	cbnz	r3, 801a5ec <__swsetup_r+0x14>
 801a5e8:	f7ff fa62 	bl	8019ab0 <__sinit>
 801a5ec:	89a3      	ldrh	r3, [r4, #12]
 801a5ee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a5f2:	0718      	lsls	r0, r3, #28
 801a5f4:	d422      	bmi.n	801a63c <__swsetup_r+0x64>
 801a5f6:	06d9      	lsls	r1, r3, #27
 801a5f8:	d407      	bmi.n	801a60a <__swsetup_r+0x32>
 801a5fa:	2309      	movs	r3, #9
 801a5fc:	602b      	str	r3, [r5, #0]
 801a5fe:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801a602:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a606:	81a3      	strh	r3, [r4, #12]
 801a608:	e034      	b.n	801a674 <__swsetup_r+0x9c>
 801a60a:	0758      	lsls	r0, r3, #29
 801a60c:	d512      	bpl.n	801a634 <__swsetup_r+0x5c>
 801a60e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a610:	b141      	cbz	r1, 801a624 <__swsetup_r+0x4c>
 801a612:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a616:	4299      	cmp	r1, r3
 801a618:	d002      	beq.n	801a620 <__swsetup_r+0x48>
 801a61a:	4628      	mov	r0, r5
 801a61c:	f000 f91c 	bl	801a858 <_free_r>
 801a620:	2300      	movs	r3, #0
 801a622:	6363      	str	r3, [r4, #52]	; 0x34
 801a624:	89a3      	ldrh	r3, [r4, #12]
 801a626:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801a62a:	81a3      	strh	r3, [r4, #12]
 801a62c:	2300      	movs	r3, #0
 801a62e:	6063      	str	r3, [r4, #4]
 801a630:	6923      	ldr	r3, [r4, #16]
 801a632:	6023      	str	r3, [r4, #0]
 801a634:	89a3      	ldrh	r3, [r4, #12]
 801a636:	f043 0308 	orr.w	r3, r3, #8
 801a63a:	81a3      	strh	r3, [r4, #12]
 801a63c:	6923      	ldr	r3, [r4, #16]
 801a63e:	b94b      	cbnz	r3, 801a654 <__swsetup_r+0x7c>
 801a640:	89a3      	ldrh	r3, [r4, #12]
 801a642:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801a646:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a64a:	d003      	beq.n	801a654 <__swsetup_r+0x7c>
 801a64c:	4621      	mov	r1, r4
 801a64e:	4628      	mov	r0, r5
 801a650:	f000 f83f 	bl	801a6d2 <__smakebuf_r>
 801a654:	89a0      	ldrh	r0, [r4, #12]
 801a656:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a65a:	f010 0301 	ands.w	r3, r0, #1
 801a65e:	d00a      	beq.n	801a676 <__swsetup_r+0x9e>
 801a660:	2300      	movs	r3, #0
 801a662:	60a3      	str	r3, [r4, #8]
 801a664:	6963      	ldr	r3, [r4, #20]
 801a666:	425b      	negs	r3, r3
 801a668:	61a3      	str	r3, [r4, #24]
 801a66a:	6923      	ldr	r3, [r4, #16]
 801a66c:	b943      	cbnz	r3, 801a680 <__swsetup_r+0xa8>
 801a66e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801a672:	d1c4      	bne.n	801a5fe <__swsetup_r+0x26>
 801a674:	bd38      	pop	{r3, r4, r5, pc}
 801a676:	0781      	lsls	r1, r0, #30
 801a678:	bf58      	it	pl
 801a67a:	6963      	ldrpl	r3, [r4, #20]
 801a67c:	60a3      	str	r3, [r4, #8]
 801a67e:	e7f4      	b.n	801a66a <__swsetup_r+0x92>
 801a680:	2000      	movs	r0, #0
 801a682:	e7f7      	b.n	801a674 <__swsetup_r+0x9c>
 801a684:	20001138 	.word	0x20001138

0801a688 <__swhatbuf_r>:
 801a688:	b570      	push	{r4, r5, r6, lr}
 801a68a:	460c      	mov	r4, r1
 801a68c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a690:	b096      	sub	sp, #88	; 0x58
 801a692:	4615      	mov	r5, r2
 801a694:	2900      	cmp	r1, #0
 801a696:	461e      	mov	r6, r3
 801a698:	da0c      	bge.n	801a6b4 <__swhatbuf_r+0x2c>
 801a69a:	89a3      	ldrh	r3, [r4, #12]
 801a69c:	2100      	movs	r1, #0
 801a69e:	f013 0f80 	tst.w	r3, #128	; 0x80
 801a6a2:	bf0c      	ite	eq
 801a6a4:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801a6a8:	2340      	movne	r3, #64	; 0x40
 801a6aa:	2000      	movs	r0, #0
 801a6ac:	6031      	str	r1, [r6, #0]
 801a6ae:	602b      	str	r3, [r5, #0]
 801a6b0:	b016      	add	sp, #88	; 0x58
 801a6b2:	bd70      	pop	{r4, r5, r6, pc}
 801a6b4:	466a      	mov	r2, sp
 801a6b6:	f000 f859 	bl	801a76c <_fstat_r>
 801a6ba:	2800      	cmp	r0, #0
 801a6bc:	dbed      	blt.n	801a69a <__swhatbuf_r+0x12>
 801a6be:	9901      	ldr	r1, [sp, #4]
 801a6c0:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801a6c4:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801a6c8:	4259      	negs	r1, r3
 801a6ca:	4159      	adcs	r1, r3
 801a6cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a6d0:	e7eb      	b.n	801a6aa <__swhatbuf_r+0x22>

0801a6d2 <__smakebuf_r>:
 801a6d2:	898b      	ldrh	r3, [r1, #12]
 801a6d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a6d6:	079d      	lsls	r5, r3, #30
 801a6d8:	4606      	mov	r6, r0
 801a6da:	460c      	mov	r4, r1
 801a6dc:	d507      	bpl.n	801a6ee <__smakebuf_r+0x1c>
 801a6de:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801a6e2:	6023      	str	r3, [r4, #0]
 801a6e4:	6123      	str	r3, [r4, #16]
 801a6e6:	2301      	movs	r3, #1
 801a6e8:	6163      	str	r3, [r4, #20]
 801a6ea:	b002      	add	sp, #8
 801a6ec:	bd70      	pop	{r4, r5, r6, pc}
 801a6ee:	ab01      	add	r3, sp, #4
 801a6f0:	466a      	mov	r2, sp
 801a6f2:	f7ff ffc9 	bl	801a688 <__swhatbuf_r>
 801a6f6:	9900      	ldr	r1, [sp, #0]
 801a6f8:	4605      	mov	r5, r0
 801a6fa:	4630      	mov	r0, r6
 801a6fc:	f7ff fc22 	bl	8019f44 <_malloc_r>
 801a700:	b948      	cbnz	r0, 801a716 <__smakebuf_r+0x44>
 801a702:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a706:	059a      	lsls	r2, r3, #22
 801a708:	d4ef      	bmi.n	801a6ea <__smakebuf_r+0x18>
 801a70a:	f023 0303 	bic.w	r3, r3, #3
 801a70e:	f043 0302 	orr.w	r3, r3, #2
 801a712:	81a3      	strh	r3, [r4, #12]
 801a714:	e7e3      	b.n	801a6de <__smakebuf_r+0xc>
 801a716:	89a3      	ldrh	r3, [r4, #12]
 801a718:	6020      	str	r0, [r4, #0]
 801a71a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a71e:	6120      	str	r0, [r4, #16]
 801a720:	81a3      	strh	r3, [r4, #12]
 801a722:	9b00      	ldr	r3, [sp, #0]
 801a724:	6163      	str	r3, [r4, #20]
 801a726:	9b01      	ldr	r3, [sp, #4]
 801a728:	b15b      	cbz	r3, 801a742 <__smakebuf_r+0x70>
 801a72a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a72e:	4630      	mov	r0, r6
 801a730:	f000 f82e 	bl	801a790 <_isatty_r>
 801a734:	b128      	cbz	r0, 801a742 <__smakebuf_r+0x70>
 801a736:	89a3      	ldrh	r3, [r4, #12]
 801a738:	f023 0303 	bic.w	r3, r3, #3
 801a73c:	f043 0301 	orr.w	r3, r3, #1
 801a740:	81a3      	strh	r3, [r4, #12]
 801a742:	89a3      	ldrh	r3, [r4, #12]
 801a744:	431d      	orrs	r5, r3
 801a746:	81a5      	strh	r5, [r4, #12]
 801a748:	e7cf      	b.n	801a6ea <__smakebuf_r+0x18>
	...

0801a74c <_close_r>:
 801a74c:	b538      	push	{r3, r4, r5, lr}
 801a74e:	2300      	movs	r3, #0
 801a750:	4d05      	ldr	r5, [pc, #20]	; (801a768 <_close_r+0x1c>)
 801a752:	4604      	mov	r4, r0
 801a754:	4608      	mov	r0, r1
 801a756:	602b      	str	r3, [r5, #0]
 801a758:	f7e6 fd57 	bl	800120a <_close>
 801a75c:	1c43      	adds	r3, r0, #1
 801a75e:	d102      	bne.n	801a766 <_close_r+0x1a>
 801a760:	682b      	ldr	r3, [r5, #0]
 801a762:	b103      	cbz	r3, 801a766 <_close_r+0x1a>
 801a764:	6023      	str	r3, [r4, #0]
 801a766:	bd38      	pop	{r3, r4, r5, pc}
 801a768:	2001599c 	.word	0x2001599c

0801a76c <_fstat_r>:
 801a76c:	b538      	push	{r3, r4, r5, lr}
 801a76e:	2300      	movs	r3, #0
 801a770:	4d06      	ldr	r5, [pc, #24]	; (801a78c <_fstat_r+0x20>)
 801a772:	4604      	mov	r4, r0
 801a774:	4608      	mov	r0, r1
 801a776:	4611      	mov	r1, r2
 801a778:	602b      	str	r3, [r5, #0]
 801a77a:	f7e6 fd52 	bl	8001222 <_fstat>
 801a77e:	1c43      	adds	r3, r0, #1
 801a780:	d102      	bne.n	801a788 <_fstat_r+0x1c>
 801a782:	682b      	ldr	r3, [r5, #0]
 801a784:	b103      	cbz	r3, 801a788 <_fstat_r+0x1c>
 801a786:	6023      	str	r3, [r4, #0]
 801a788:	bd38      	pop	{r3, r4, r5, pc}
 801a78a:	bf00      	nop
 801a78c:	2001599c 	.word	0x2001599c

0801a790 <_isatty_r>:
 801a790:	b538      	push	{r3, r4, r5, lr}
 801a792:	2300      	movs	r3, #0
 801a794:	4d05      	ldr	r5, [pc, #20]	; (801a7ac <_isatty_r+0x1c>)
 801a796:	4604      	mov	r4, r0
 801a798:	4608      	mov	r0, r1
 801a79a:	602b      	str	r3, [r5, #0]
 801a79c:	f7e6 fd51 	bl	8001242 <_isatty>
 801a7a0:	1c43      	adds	r3, r0, #1
 801a7a2:	d102      	bne.n	801a7aa <_isatty_r+0x1a>
 801a7a4:	682b      	ldr	r3, [r5, #0]
 801a7a6:	b103      	cbz	r3, 801a7aa <_isatty_r+0x1a>
 801a7a8:	6023      	str	r3, [r4, #0]
 801a7aa:	bd38      	pop	{r3, r4, r5, pc}
 801a7ac:	2001599c 	.word	0x2001599c

0801a7b0 <_lseek_r>:
 801a7b0:	b538      	push	{r3, r4, r5, lr}
 801a7b2:	4604      	mov	r4, r0
 801a7b4:	4d06      	ldr	r5, [pc, #24]	; (801a7d0 <_lseek_r+0x20>)
 801a7b6:	4608      	mov	r0, r1
 801a7b8:	4611      	mov	r1, r2
 801a7ba:	2200      	movs	r2, #0
 801a7bc:	602a      	str	r2, [r5, #0]
 801a7be:	461a      	mov	r2, r3
 801a7c0:	f7e6 fd4a 	bl	8001258 <_lseek>
 801a7c4:	1c43      	adds	r3, r0, #1
 801a7c6:	d102      	bne.n	801a7ce <_lseek_r+0x1e>
 801a7c8:	682b      	ldr	r3, [r5, #0]
 801a7ca:	b103      	cbz	r3, 801a7ce <_lseek_r+0x1e>
 801a7cc:	6023      	str	r3, [r4, #0]
 801a7ce:	bd38      	pop	{r3, r4, r5, pc}
 801a7d0:	2001599c 	.word	0x2001599c

0801a7d4 <_read_r>:
 801a7d4:	b538      	push	{r3, r4, r5, lr}
 801a7d6:	4604      	mov	r4, r0
 801a7d8:	4d06      	ldr	r5, [pc, #24]	; (801a7f4 <_read_r+0x20>)
 801a7da:	4608      	mov	r0, r1
 801a7dc:	4611      	mov	r1, r2
 801a7de:	2200      	movs	r2, #0
 801a7e0:	602a      	str	r2, [r5, #0]
 801a7e2:	461a      	mov	r2, r3
 801a7e4:	f7e6 fcd8 	bl	8001198 <_read>
 801a7e8:	1c43      	adds	r3, r0, #1
 801a7ea:	d102      	bne.n	801a7f2 <_read_r+0x1e>
 801a7ec:	682b      	ldr	r3, [r5, #0]
 801a7ee:	b103      	cbz	r3, 801a7f2 <_read_r+0x1e>
 801a7f0:	6023      	str	r3, [r4, #0]
 801a7f2:	bd38      	pop	{r3, r4, r5, pc}
 801a7f4:	2001599c 	.word	0x2001599c

0801a7f8 <_sbrk_r>:
 801a7f8:	b538      	push	{r3, r4, r5, lr}
 801a7fa:	2300      	movs	r3, #0
 801a7fc:	4d05      	ldr	r5, [pc, #20]	; (801a814 <_sbrk_r+0x1c>)
 801a7fe:	4604      	mov	r4, r0
 801a800:	4608      	mov	r0, r1
 801a802:	602b      	str	r3, [r5, #0]
 801a804:	f7e6 fd36 	bl	8001274 <_sbrk>
 801a808:	1c43      	adds	r3, r0, #1
 801a80a:	d102      	bne.n	801a812 <_sbrk_r+0x1a>
 801a80c:	682b      	ldr	r3, [r5, #0]
 801a80e:	b103      	cbz	r3, 801a812 <_sbrk_r+0x1a>
 801a810:	6023      	str	r3, [r4, #0]
 801a812:	bd38      	pop	{r3, r4, r5, pc}
 801a814:	2001599c 	.word	0x2001599c

0801a818 <_write_r>:
 801a818:	b538      	push	{r3, r4, r5, lr}
 801a81a:	4604      	mov	r4, r0
 801a81c:	4d06      	ldr	r5, [pc, #24]	; (801a838 <_write_r+0x20>)
 801a81e:	4608      	mov	r0, r1
 801a820:	4611      	mov	r1, r2
 801a822:	2200      	movs	r2, #0
 801a824:	602a      	str	r2, [r5, #0]
 801a826:	461a      	mov	r2, r3
 801a828:	f7e6 fcd3 	bl	80011d2 <_write>
 801a82c:	1c43      	adds	r3, r0, #1
 801a82e:	d102      	bne.n	801a836 <_write_r+0x1e>
 801a830:	682b      	ldr	r3, [r5, #0]
 801a832:	b103      	cbz	r3, 801a836 <_write_r+0x1e>
 801a834:	6023      	str	r3, [r4, #0]
 801a836:	bd38      	pop	{r3, r4, r5, pc}
 801a838:	2001599c 	.word	0x2001599c

0801a83c <memchr>:
 801a83c:	b2c9      	uxtb	r1, r1
 801a83e:	4402      	add	r2, r0
 801a840:	b510      	push	{r4, lr}
 801a842:	4290      	cmp	r0, r2
 801a844:	4603      	mov	r3, r0
 801a846:	d101      	bne.n	801a84c <memchr+0x10>
 801a848:	2300      	movs	r3, #0
 801a84a:	e003      	b.n	801a854 <memchr+0x18>
 801a84c:	781c      	ldrb	r4, [r3, #0]
 801a84e:	3001      	adds	r0, #1
 801a850:	428c      	cmp	r4, r1
 801a852:	d1f6      	bne.n	801a842 <memchr+0x6>
 801a854:	4618      	mov	r0, r3
 801a856:	bd10      	pop	{r4, pc}

0801a858 <_free_r>:
 801a858:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a85a:	2900      	cmp	r1, #0
 801a85c:	d043      	beq.n	801a8e6 <_free_r+0x8e>
 801a85e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a862:	1f0c      	subs	r4, r1, #4
 801a864:	9001      	str	r0, [sp, #4]
 801a866:	2b00      	cmp	r3, #0
 801a868:	bfb8      	it	lt
 801a86a:	18e4      	addlt	r4, r4, r3
 801a86c:	f7ff fe28 	bl	801a4c0 <__malloc_lock>
 801a870:	4a1e      	ldr	r2, [pc, #120]	; (801a8ec <_free_r+0x94>)
 801a872:	9801      	ldr	r0, [sp, #4]
 801a874:	6813      	ldr	r3, [r2, #0]
 801a876:	b933      	cbnz	r3, 801a886 <_free_r+0x2e>
 801a878:	6063      	str	r3, [r4, #4]
 801a87a:	6014      	str	r4, [r2, #0]
 801a87c:	b003      	add	sp, #12
 801a87e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a882:	f7ff be23 	b.w	801a4cc <__malloc_unlock>
 801a886:	42a3      	cmp	r3, r4
 801a888:	d908      	bls.n	801a89c <_free_r+0x44>
 801a88a:	6825      	ldr	r5, [r4, #0]
 801a88c:	1961      	adds	r1, r4, r5
 801a88e:	428b      	cmp	r3, r1
 801a890:	bf01      	itttt	eq
 801a892:	6819      	ldreq	r1, [r3, #0]
 801a894:	685b      	ldreq	r3, [r3, #4]
 801a896:	1949      	addeq	r1, r1, r5
 801a898:	6021      	streq	r1, [r4, #0]
 801a89a:	e7ed      	b.n	801a878 <_free_r+0x20>
 801a89c:	461a      	mov	r2, r3
 801a89e:	685b      	ldr	r3, [r3, #4]
 801a8a0:	b10b      	cbz	r3, 801a8a6 <_free_r+0x4e>
 801a8a2:	42a3      	cmp	r3, r4
 801a8a4:	d9fa      	bls.n	801a89c <_free_r+0x44>
 801a8a6:	6811      	ldr	r1, [r2, #0]
 801a8a8:	1855      	adds	r5, r2, r1
 801a8aa:	42a5      	cmp	r5, r4
 801a8ac:	d10b      	bne.n	801a8c6 <_free_r+0x6e>
 801a8ae:	6824      	ldr	r4, [r4, #0]
 801a8b0:	4421      	add	r1, r4
 801a8b2:	1854      	adds	r4, r2, r1
 801a8b4:	6011      	str	r1, [r2, #0]
 801a8b6:	42a3      	cmp	r3, r4
 801a8b8:	d1e0      	bne.n	801a87c <_free_r+0x24>
 801a8ba:	681c      	ldr	r4, [r3, #0]
 801a8bc:	685b      	ldr	r3, [r3, #4]
 801a8be:	440c      	add	r4, r1
 801a8c0:	6053      	str	r3, [r2, #4]
 801a8c2:	6014      	str	r4, [r2, #0]
 801a8c4:	e7da      	b.n	801a87c <_free_r+0x24>
 801a8c6:	d902      	bls.n	801a8ce <_free_r+0x76>
 801a8c8:	230c      	movs	r3, #12
 801a8ca:	6003      	str	r3, [r0, #0]
 801a8cc:	e7d6      	b.n	801a87c <_free_r+0x24>
 801a8ce:	6825      	ldr	r5, [r4, #0]
 801a8d0:	1961      	adds	r1, r4, r5
 801a8d2:	428b      	cmp	r3, r1
 801a8d4:	bf02      	ittt	eq
 801a8d6:	6819      	ldreq	r1, [r3, #0]
 801a8d8:	685b      	ldreq	r3, [r3, #4]
 801a8da:	1949      	addeq	r1, r1, r5
 801a8dc:	6063      	str	r3, [r4, #4]
 801a8de:	bf08      	it	eq
 801a8e0:	6021      	streq	r1, [r4, #0]
 801a8e2:	6054      	str	r4, [r2, #4]
 801a8e4:	e7ca      	b.n	801a87c <_free_r+0x24>
 801a8e6:	b003      	add	sp, #12
 801a8e8:	bd30      	pop	{r4, r5, pc}
 801a8ea:	bf00      	nop
 801a8ec:	20015994 	.word	0x20015994

0801a8f0 <_init>:
 801a8f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a8f2:	bf00      	nop
 801a8f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a8f6:	bc08      	pop	{r3}
 801a8f8:	469e      	mov	lr, r3
 801a8fa:	4770      	bx	lr

0801a8fc <_fini>:
 801a8fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a8fe:	bf00      	nop
 801a900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a902:	bc08      	pop	{r3}
 801a904:	469e      	mov	lr, r3
 801a906:	4770      	bx	lr
