
BLE_AT_Client.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000de80  08000238  08000238  00010238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008b8  0800e0b8  0800e0b8  0001e0b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e970  0800e970  000202e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800e970  0800e970  0001e970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e978  0800e978  000202e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800e978  0800e978  0001e978  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800e980  0800e980  0001e980  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002e0  20000000  0800e988  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000380  200002e0  0800ec68  000202e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000660  0800ec68  00020660  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  000202e0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020316  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001520b  00000000  00000000  00020359  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ee9  00000000  00000000  00035564  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001008  00000000  00000000  00038450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d73  00000000  00000000  00039458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00034d53  00000000  00000000  0003a1cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016871  00000000  00000000  0006ef1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0014141a  00000000  00000000  0008578f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005614  00000000  00000000  001c6bac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a8  00000000  00000000  001cc1c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	; (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	; (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	200002e0 	.word	0x200002e0
 8000254:	00000000 	.word	0x00000000
 8000258:	0800e0a0 	.word	0x0800e0a0

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	; (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	; (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	; (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	200002e4 	.word	0x200002e4
 8000274:	0800e0a0 	.word	0x0800e0a0

08000278 <strlen>:
 8000278:	4603      	mov	r3, r0
 800027a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027e:	2a00      	cmp	r2, #0
 8000280:	d1fb      	bne.n	800027a <strlen+0x2>
 8000282:	1a18      	subs	r0, r3, r0
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr

08000288 <strcmp>:
 8000288:	f810 2b01 	ldrb.w	r2, [r0], #1
 800028c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000290:	2a01      	cmp	r2, #1
 8000292:	bf28      	it	cs
 8000294:	429a      	cmpcs	r2, r3
 8000296:	d0f7      	beq.n	8000288 <strcmp>
 8000298:	1ad0      	subs	r0, r2, r3
 800029a:	4770      	bx	lr

0800029c <__aeabi_drsub>:
 800029c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a0:	e002      	b.n	80002a8 <__adddf3>
 80002a2:	bf00      	nop

080002a4 <__aeabi_dsub>:
 80002a4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002a8 <__adddf3>:
 80002a8:	b530      	push	{r4, r5, lr}
 80002aa:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ae:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b2:	ea94 0f05 	teq	r4, r5
 80002b6:	bf08      	it	eq
 80002b8:	ea90 0f02 	teqeq	r0, r2
 80002bc:	bf1f      	itttt	ne
 80002be:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002c6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ca:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ce:	f000 80e2 	beq.w	8000496 <__adddf3+0x1ee>
 80002d2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002d6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002da:	bfb8      	it	lt
 80002dc:	426d      	neglt	r5, r5
 80002de:	dd0c      	ble.n	80002fa <__adddf3+0x52>
 80002e0:	442c      	add	r4, r5
 80002e2:	ea80 0202 	eor.w	r2, r0, r2
 80002e6:	ea81 0303 	eor.w	r3, r1, r3
 80002ea:	ea82 0000 	eor.w	r0, r2, r0
 80002ee:	ea83 0101 	eor.w	r1, r3, r1
 80002f2:	ea80 0202 	eor.w	r2, r0, r2
 80002f6:	ea81 0303 	eor.w	r3, r1, r3
 80002fa:	2d36      	cmp	r5, #54	; 0x36
 80002fc:	bf88      	it	hi
 80002fe:	bd30      	pophi	{r4, r5, pc}
 8000300:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000304:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000308:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800030c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000310:	d002      	beq.n	8000318 <__adddf3+0x70>
 8000312:	4240      	negs	r0, r0
 8000314:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000318:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800031c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000320:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x84>
 8000326:	4252      	negs	r2, r2
 8000328:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800032c:	ea94 0f05 	teq	r4, r5
 8000330:	f000 80a7 	beq.w	8000482 <__adddf3+0x1da>
 8000334:	f1a4 0401 	sub.w	r4, r4, #1
 8000338:	f1d5 0e20 	rsbs	lr, r5, #32
 800033c:	db0d      	blt.n	800035a <__adddf3+0xb2>
 800033e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000342:	fa22 f205 	lsr.w	r2, r2, r5
 8000346:	1880      	adds	r0, r0, r2
 8000348:	f141 0100 	adc.w	r1, r1, #0
 800034c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000350:	1880      	adds	r0, r0, r2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	4159      	adcs	r1, r3
 8000358:	e00e      	b.n	8000378 <__adddf3+0xd0>
 800035a:	f1a5 0520 	sub.w	r5, r5, #32
 800035e:	f10e 0e20 	add.w	lr, lr, #32
 8000362:	2a01      	cmp	r2, #1
 8000364:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000368:	bf28      	it	cs
 800036a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800036e:	fa43 f305 	asr.w	r3, r3, r5
 8000372:	18c0      	adds	r0, r0, r3
 8000374:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000378:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800037c:	d507      	bpl.n	800038e <__adddf3+0xe6>
 800037e:	f04f 0e00 	mov.w	lr, #0
 8000382:	f1dc 0c00 	rsbs	ip, ip, #0
 8000386:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038a:	eb6e 0101 	sbc.w	r1, lr, r1
 800038e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000392:	d31b      	bcc.n	80003cc <__adddf3+0x124>
 8000394:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000398:	d30c      	bcc.n	80003b4 <__adddf3+0x10c>
 800039a:	0849      	lsrs	r1, r1, #1
 800039c:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a4:	f104 0401 	add.w	r4, r4, #1
 80003a8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003ac:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b0:	f080 809a 	bcs.w	80004e8 <__adddf3+0x240>
 80003b4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003b8:	bf08      	it	eq
 80003ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003be:	f150 0000 	adcs.w	r0, r0, #0
 80003c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003c6:	ea41 0105 	orr.w	r1, r1, r5
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d0:	4140      	adcs	r0, r0
 80003d2:	eb41 0101 	adc.w	r1, r1, r1
 80003d6:	3c01      	subs	r4, #1
 80003d8:	bf28      	it	cs
 80003da:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003de:	d2e9      	bcs.n	80003b4 <__adddf3+0x10c>
 80003e0:	f091 0f00 	teq	r1, #0
 80003e4:	bf04      	itt	eq
 80003e6:	4601      	moveq	r1, r0
 80003e8:	2000      	moveq	r0, #0
 80003ea:	fab1 f381 	clz	r3, r1
 80003ee:	bf08      	it	eq
 80003f0:	3320      	addeq	r3, #32
 80003f2:	f1a3 030b 	sub.w	r3, r3, #11
 80003f6:	f1b3 0220 	subs.w	r2, r3, #32
 80003fa:	da0c      	bge.n	8000416 <__adddf3+0x16e>
 80003fc:	320c      	adds	r2, #12
 80003fe:	dd08      	ble.n	8000412 <__adddf3+0x16a>
 8000400:	f102 0c14 	add.w	ip, r2, #20
 8000404:	f1c2 020c 	rsb	r2, r2, #12
 8000408:	fa01 f00c 	lsl.w	r0, r1, ip
 800040c:	fa21 f102 	lsr.w	r1, r1, r2
 8000410:	e00c      	b.n	800042c <__adddf3+0x184>
 8000412:	f102 0214 	add.w	r2, r2, #20
 8000416:	bfd8      	it	le
 8000418:	f1c2 0c20 	rsble	ip, r2, #32
 800041c:	fa01 f102 	lsl.w	r1, r1, r2
 8000420:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000424:	bfdc      	itt	le
 8000426:	ea41 010c 	orrle.w	r1, r1, ip
 800042a:	4090      	lslle	r0, r2
 800042c:	1ae4      	subs	r4, r4, r3
 800042e:	bfa2      	ittt	ge
 8000430:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000434:	4329      	orrge	r1, r5
 8000436:	bd30      	popge	{r4, r5, pc}
 8000438:	ea6f 0404 	mvn.w	r4, r4
 800043c:	3c1f      	subs	r4, #31
 800043e:	da1c      	bge.n	800047a <__adddf3+0x1d2>
 8000440:	340c      	adds	r4, #12
 8000442:	dc0e      	bgt.n	8000462 <__adddf3+0x1ba>
 8000444:	f104 0414 	add.w	r4, r4, #20
 8000448:	f1c4 0220 	rsb	r2, r4, #32
 800044c:	fa20 f004 	lsr.w	r0, r0, r4
 8000450:	fa01 f302 	lsl.w	r3, r1, r2
 8000454:	ea40 0003 	orr.w	r0, r0, r3
 8000458:	fa21 f304 	lsr.w	r3, r1, r4
 800045c:	ea45 0103 	orr.w	r1, r5, r3
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	f1c4 040c 	rsb	r4, r4, #12
 8000466:	f1c4 0220 	rsb	r2, r4, #32
 800046a:	fa20 f002 	lsr.w	r0, r0, r2
 800046e:	fa01 f304 	lsl.w	r3, r1, r4
 8000472:	ea40 0003 	orr.w	r0, r0, r3
 8000476:	4629      	mov	r1, r5
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	fa21 f004 	lsr.w	r0, r1, r4
 800047e:	4629      	mov	r1, r5
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	f094 0f00 	teq	r4, #0
 8000486:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048a:	bf06      	itte	eq
 800048c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000490:	3401      	addeq	r4, #1
 8000492:	3d01      	subne	r5, #1
 8000494:	e74e      	b.n	8000334 <__adddf3+0x8c>
 8000496:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049a:	bf18      	it	ne
 800049c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a0:	d029      	beq.n	80004f6 <__adddf3+0x24e>
 80004a2:	ea94 0f05 	teq	r4, r5
 80004a6:	bf08      	it	eq
 80004a8:	ea90 0f02 	teqeq	r0, r2
 80004ac:	d005      	beq.n	80004ba <__adddf3+0x212>
 80004ae:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b2:	bf04      	itt	eq
 80004b4:	4619      	moveq	r1, r3
 80004b6:	4610      	moveq	r0, r2
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	ea91 0f03 	teq	r1, r3
 80004be:	bf1e      	ittt	ne
 80004c0:	2100      	movne	r1, #0
 80004c2:	2000      	movne	r0, #0
 80004c4:	bd30      	popne	{r4, r5, pc}
 80004c6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ca:	d105      	bne.n	80004d8 <__adddf3+0x230>
 80004cc:	0040      	lsls	r0, r0, #1
 80004ce:	4149      	adcs	r1, r1
 80004d0:	bf28      	it	cs
 80004d2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004d6:	bd30      	pop	{r4, r5, pc}
 80004d8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004dc:	bf3c      	itt	cc
 80004de:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e2:	bd30      	popcc	{r4, r5, pc}
 80004e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004ec:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f0:	f04f 0000 	mov.w	r0, #0
 80004f4:	bd30      	pop	{r4, r5, pc}
 80004f6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fa:	bf1a      	itte	ne
 80004fc:	4619      	movne	r1, r3
 80004fe:	4610      	movne	r0, r2
 8000500:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000504:	bf1c      	itt	ne
 8000506:	460b      	movne	r3, r1
 8000508:	4602      	movne	r2, r0
 800050a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800050e:	bf06      	itte	eq
 8000510:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000514:	ea91 0f03 	teqeq	r1, r3
 8000518:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800051c:	bd30      	pop	{r4, r5, pc}
 800051e:	bf00      	nop

08000520 <__aeabi_ui2d>:
 8000520:	f090 0f00 	teq	r0, #0
 8000524:	bf04      	itt	eq
 8000526:	2100      	moveq	r1, #0
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000530:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000534:	f04f 0500 	mov.w	r5, #0
 8000538:	f04f 0100 	mov.w	r1, #0
 800053c:	e750      	b.n	80003e0 <__adddf3+0x138>
 800053e:	bf00      	nop

08000540 <__aeabi_i2d>:
 8000540:	f090 0f00 	teq	r0, #0
 8000544:	bf04      	itt	eq
 8000546:	2100      	moveq	r1, #0
 8000548:	4770      	bxeq	lr
 800054a:	b530      	push	{r4, r5, lr}
 800054c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000550:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000554:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000558:	bf48      	it	mi
 800055a:	4240      	negmi	r0, r0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e73e      	b.n	80003e0 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_f2d>:
 8000564:	0042      	lsls	r2, r0, #1
 8000566:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056a:	ea4f 0131 	mov.w	r1, r1, rrx
 800056e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000572:	bf1f      	itttt	ne
 8000574:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000578:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800057c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000580:	4770      	bxne	lr
 8000582:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000586:	bf08      	it	eq
 8000588:	4770      	bxeq	lr
 800058a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800058e:	bf04      	itt	eq
 8000590:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000594:	4770      	bxeq	lr
 8000596:	b530      	push	{r4, r5, lr}
 8000598:	f44f 7460 	mov.w	r4, #896	; 0x380
 800059c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a4:	e71c      	b.n	80003e0 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_ul2d>:
 80005a8:	ea50 0201 	orrs.w	r2, r0, r1
 80005ac:	bf08      	it	eq
 80005ae:	4770      	bxeq	lr
 80005b0:	b530      	push	{r4, r5, lr}
 80005b2:	f04f 0500 	mov.w	r5, #0
 80005b6:	e00a      	b.n	80005ce <__aeabi_l2d+0x16>

080005b8 <__aeabi_l2d>:
 80005b8:	ea50 0201 	orrs.w	r2, r0, r1
 80005bc:	bf08      	it	eq
 80005be:	4770      	bxeq	lr
 80005c0:	b530      	push	{r4, r5, lr}
 80005c2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005c6:	d502      	bpl.n	80005ce <__aeabi_l2d+0x16>
 80005c8:	4240      	negs	r0, r0
 80005ca:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ce:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005d6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005da:	f43f aed8 	beq.w	800038e <__adddf3+0xe6>
 80005de:	f04f 0203 	mov.w	r2, #3
 80005e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e6:	bf18      	it	ne
 80005e8:	3203      	addne	r2, #3
 80005ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ee:	bf18      	it	ne
 80005f0:	3203      	addne	r2, #3
 80005f2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005f6:	f1c2 0320 	rsb	r3, r2, #32
 80005fa:	fa00 fc03 	lsl.w	ip, r0, r3
 80005fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000602:	fa01 fe03 	lsl.w	lr, r1, r3
 8000606:	ea40 000e 	orr.w	r0, r0, lr
 800060a:	fa21 f102 	lsr.w	r1, r1, r2
 800060e:	4414      	add	r4, r2
 8000610:	e6bd      	b.n	800038e <__adddf3+0xe6>
 8000612:	bf00      	nop

08000614 <__aeabi_dmul>:
 8000614:	b570      	push	{r4, r5, r6, lr}
 8000616:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800061e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000622:	bf1d      	ittte	ne
 8000624:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000628:	ea94 0f0c 	teqne	r4, ip
 800062c:	ea95 0f0c 	teqne	r5, ip
 8000630:	f000 f8de 	bleq	80007f0 <__aeabi_dmul+0x1dc>
 8000634:	442c      	add	r4, r5
 8000636:	ea81 0603 	eor.w	r6, r1, r3
 800063a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800063e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000642:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000646:	bf18      	it	ne
 8000648:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800064c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000650:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000654:	d038      	beq.n	80006c8 <__aeabi_dmul+0xb4>
 8000656:	fba0 ce02 	umull	ip, lr, r0, r2
 800065a:	f04f 0500 	mov.w	r5, #0
 800065e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000662:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000666:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066a:	f04f 0600 	mov.w	r6, #0
 800066e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000672:	f09c 0f00 	teq	ip, #0
 8000676:	bf18      	it	ne
 8000678:	f04e 0e01 	orrne.w	lr, lr, #1
 800067c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000680:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000684:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000688:	d204      	bcs.n	8000694 <__aeabi_dmul+0x80>
 800068a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800068e:	416d      	adcs	r5, r5
 8000690:	eb46 0606 	adc.w	r6, r6, r6
 8000694:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000698:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800069c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006a8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006ac:	bf88      	it	hi
 80006ae:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b2:	d81e      	bhi.n	80006f2 <__aeabi_dmul+0xde>
 80006b4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006b8:	bf08      	it	eq
 80006ba:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006be:	f150 0000 	adcs.w	r0, r0, #0
 80006c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006c6:	bd70      	pop	{r4, r5, r6, pc}
 80006c8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006cc:	ea46 0101 	orr.w	r1, r6, r1
 80006d0:	ea40 0002 	orr.w	r0, r0, r2
 80006d4:	ea81 0103 	eor.w	r1, r1, r3
 80006d8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006dc:	bfc2      	ittt	gt
 80006de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006e6:	bd70      	popgt	{r4, r5, r6, pc}
 80006e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006ec:	f04f 0e00 	mov.w	lr, #0
 80006f0:	3c01      	subs	r4, #1
 80006f2:	f300 80ab 	bgt.w	800084c <__aeabi_dmul+0x238>
 80006f6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fa:	bfde      	ittt	le
 80006fc:	2000      	movle	r0, #0
 80006fe:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000702:	bd70      	pople	{r4, r5, r6, pc}
 8000704:	f1c4 0400 	rsb	r4, r4, #0
 8000708:	3c20      	subs	r4, #32
 800070a:	da35      	bge.n	8000778 <__aeabi_dmul+0x164>
 800070c:	340c      	adds	r4, #12
 800070e:	dc1b      	bgt.n	8000748 <__aeabi_dmul+0x134>
 8000710:	f104 0414 	add.w	r4, r4, #20
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f305 	lsl.w	r3, r0, r5
 800071c:	fa20 f004 	lsr.w	r0, r0, r4
 8000720:	fa01 f205 	lsl.w	r2, r1, r5
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800072c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000730:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000734:	fa21 f604 	lsr.w	r6, r1, r4
 8000738:	eb42 0106 	adc.w	r1, r2, r6
 800073c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000740:	bf08      	it	eq
 8000742:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000746:	bd70      	pop	{r4, r5, r6, pc}
 8000748:	f1c4 040c 	rsb	r4, r4, #12
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f304 	lsl.w	r3, r0, r4
 8000754:	fa20 f005 	lsr.w	r0, r0, r5
 8000758:	fa01 f204 	lsl.w	r2, r1, r4
 800075c:	ea40 0002 	orr.w	r0, r0, r2
 8000760:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	f141 0100 	adc.w	r1, r1, #0
 800076c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000770:	bf08      	it	eq
 8000772:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000776:	bd70      	pop	{r4, r5, r6, pc}
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f205 	lsl.w	r2, r0, r5
 8000780:	ea4e 0e02 	orr.w	lr, lr, r2
 8000784:	fa20 f304 	lsr.w	r3, r0, r4
 8000788:	fa01 f205 	lsl.w	r2, r1, r5
 800078c:	ea43 0302 	orr.w	r3, r3, r2
 8000790:	fa21 f004 	lsr.w	r0, r1, r4
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	fa21 f204 	lsr.w	r2, r1, r4
 800079c:	ea20 0002 	bic.w	r0, r0, r2
 80007a0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a8:	bf08      	it	eq
 80007aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ae:	bd70      	pop	{r4, r5, r6, pc}
 80007b0:	f094 0f00 	teq	r4, #0
 80007b4:	d10f      	bne.n	80007d6 <__aeabi_dmul+0x1c2>
 80007b6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ba:	0040      	lsls	r0, r0, #1
 80007bc:	eb41 0101 	adc.w	r1, r1, r1
 80007c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c4:	bf08      	it	eq
 80007c6:	3c01      	subeq	r4, #1
 80007c8:	d0f7      	beq.n	80007ba <__aeabi_dmul+0x1a6>
 80007ca:	ea41 0106 	orr.w	r1, r1, r6
 80007ce:	f095 0f00 	teq	r5, #0
 80007d2:	bf18      	it	ne
 80007d4:	4770      	bxne	lr
 80007d6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007da:	0052      	lsls	r2, r2, #1
 80007dc:	eb43 0303 	adc.w	r3, r3, r3
 80007e0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e4:	bf08      	it	eq
 80007e6:	3d01      	subeq	r5, #1
 80007e8:	d0f7      	beq.n	80007da <__aeabi_dmul+0x1c6>
 80007ea:	ea43 0306 	orr.w	r3, r3, r6
 80007ee:	4770      	bx	lr
 80007f0:	ea94 0f0c 	teq	r4, ip
 80007f4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007f8:	bf18      	it	ne
 80007fa:	ea95 0f0c 	teqne	r5, ip
 80007fe:	d00c      	beq.n	800081a <__aeabi_dmul+0x206>
 8000800:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000804:	bf18      	it	ne
 8000806:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080a:	d1d1      	bne.n	80007b0 <__aeabi_dmul+0x19c>
 800080c:	ea81 0103 	eor.w	r1, r1, r3
 8000810:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000814:	f04f 0000 	mov.w	r0, #0
 8000818:	bd70      	pop	{r4, r5, r6, pc}
 800081a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800081e:	bf06      	itte	eq
 8000820:	4610      	moveq	r0, r2
 8000822:	4619      	moveq	r1, r3
 8000824:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000828:	d019      	beq.n	800085e <__aeabi_dmul+0x24a>
 800082a:	ea94 0f0c 	teq	r4, ip
 800082e:	d102      	bne.n	8000836 <__aeabi_dmul+0x222>
 8000830:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000834:	d113      	bne.n	800085e <__aeabi_dmul+0x24a>
 8000836:	ea95 0f0c 	teq	r5, ip
 800083a:	d105      	bne.n	8000848 <__aeabi_dmul+0x234>
 800083c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000840:	bf1c      	itt	ne
 8000842:	4610      	movne	r0, r2
 8000844:	4619      	movne	r1, r3
 8000846:	d10a      	bne.n	800085e <__aeabi_dmul+0x24a>
 8000848:	ea81 0103 	eor.w	r1, r1, r3
 800084c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000850:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000854:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000862:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000866:	bd70      	pop	{r4, r5, r6, pc}

08000868 <__aeabi_ddiv>:
 8000868:	b570      	push	{r4, r5, r6, lr}
 800086a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800086e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000872:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000876:	bf1d      	ittte	ne
 8000878:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800087c:	ea94 0f0c 	teqne	r4, ip
 8000880:	ea95 0f0c 	teqne	r5, ip
 8000884:	f000 f8a7 	bleq	80009d6 <__aeabi_ddiv+0x16e>
 8000888:	eba4 0405 	sub.w	r4, r4, r5
 800088c:	ea81 0e03 	eor.w	lr, r1, r3
 8000890:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000894:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000898:	f000 8088 	beq.w	80009ac <__aeabi_ddiv+0x144>
 800089c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008a8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008ac:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008b8:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008bc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c0:	429d      	cmp	r5, r3
 80008c2:	bf08      	it	eq
 80008c4:	4296      	cmpeq	r6, r2
 80008c6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ca:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ce:	d202      	bcs.n	80008d6 <__aeabi_ddiv+0x6e>
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	1ab6      	subs	r6, r6, r2
 80008d8:	eb65 0503 	sbc.w	r5, r5, r3
 80008dc:	085b      	lsrs	r3, r3, #1
 80008de:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008e6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ea:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ee:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f2:	bf22      	ittt	cs
 80008f4:	1ab6      	subcs	r6, r6, r2
 80008f6:	4675      	movcs	r5, lr
 80008f8:	ea40 000c 	orrcs.w	r0, r0, ip
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	ebb6 0e02 	subs.w	lr, r6, r2
 8000906:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090a:	bf22      	ittt	cs
 800090c:	1ab6      	subcs	r6, r6, r2
 800090e:	4675      	movcs	r5, lr
 8000910:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	ebb6 0e02 	subs.w	lr, r6, r2
 800091e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000922:	bf22      	ittt	cs
 8000924:	1ab6      	subcs	r6, r6, r2
 8000926:	4675      	movcs	r5, lr
 8000928:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800092c:	085b      	lsrs	r3, r3, #1
 800092e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000932:	ebb6 0e02 	subs.w	lr, r6, r2
 8000936:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093a:	bf22      	ittt	cs
 800093c:	1ab6      	subcs	r6, r6, r2
 800093e:	4675      	movcs	r5, lr
 8000940:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000944:	ea55 0e06 	orrs.w	lr, r5, r6
 8000948:	d018      	beq.n	800097c <__aeabi_ddiv+0x114>
 800094a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800094e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000952:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000956:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800095e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000962:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000966:	d1c0      	bne.n	80008ea <__aeabi_ddiv+0x82>
 8000968:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800096c:	d10b      	bne.n	8000986 <__aeabi_ddiv+0x11e>
 800096e:	ea41 0100 	orr.w	r1, r1, r0
 8000972:	f04f 0000 	mov.w	r0, #0
 8000976:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097a:	e7b6      	b.n	80008ea <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	bf04      	itt	eq
 8000982:	4301      	orreq	r1, r0
 8000984:	2000      	moveq	r0, #0
 8000986:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098a:	bf88      	it	hi
 800098c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000990:	f63f aeaf 	bhi.w	80006f2 <__aeabi_dmul+0xde>
 8000994:	ebb5 0c03 	subs.w	ip, r5, r3
 8000998:	bf04      	itt	eq
 800099a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800099e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a2:	f150 0000 	adcs.w	r0, r0, #0
 80009a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009aa:	bd70      	pop	{r4, r5, r6, pc}
 80009ac:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009b8:	bfc2      	ittt	gt
 80009ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c2:	bd70      	popgt	{r4, r5, r6, pc}
 80009c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009c8:	f04f 0e00 	mov.w	lr, #0
 80009cc:	3c01      	subs	r4, #1
 80009ce:	e690      	b.n	80006f2 <__aeabi_dmul+0xde>
 80009d0:	ea45 0e06 	orr.w	lr, r5, r6
 80009d4:	e68d      	b.n	80006f2 <__aeabi_dmul+0xde>
 80009d6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009da:	ea94 0f0c 	teq	r4, ip
 80009de:	bf08      	it	eq
 80009e0:	ea95 0f0c 	teqeq	r5, ip
 80009e4:	f43f af3b 	beq.w	800085e <__aeabi_dmul+0x24a>
 80009e8:	ea94 0f0c 	teq	r4, ip
 80009ec:	d10a      	bne.n	8000a04 <__aeabi_ddiv+0x19c>
 80009ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f2:	f47f af34 	bne.w	800085e <__aeabi_dmul+0x24a>
 80009f6:	ea95 0f0c 	teq	r5, ip
 80009fa:	f47f af25 	bne.w	8000848 <__aeabi_dmul+0x234>
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	e72c      	b.n	800085e <__aeabi_dmul+0x24a>
 8000a04:	ea95 0f0c 	teq	r5, ip
 8000a08:	d106      	bne.n	8000a18 <__aeabi_ddiv+0x1b0>
 8000a0a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a0e:	f43f aefd 	beq.w	800080c <__aeabi_dmul+0x1f8>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e722      	b.n	800085e <__aeabi_dmul+0x24a>
 8000a18:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a1c:	bf18      	it	ne
 8000a1e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a22:	f47f aec5 	bne.w	80007b0 <__aeabi_dmul+0x19c>
 8000a26:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2a:	f47f af0d 	bne.w	8000848 <__aeabi_dmul+0x234>
 8000a2e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a32:	f47f aeeb 	bne.w	800080c <__aeabi_dmul+0x1f8>
 8000a36:	e712      	b.n	800085e <__aeabi_dmul+0x24a>

08000a38 <__gedf2>:
 8000a38:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a3c:	e006      	b.n	8000a4c <__cmpdf2+0x4>
 8000a3e:	bf00      	nop

08000a40 <__ledf2>:
 8000a40:	f04f 0c01 	mov.w	ip, #1
 8000a44:	e002      	b.n	8000a4c <__cmpdf2+0x4>
 8000a46:	bf00      	nop

08000a48 <__cmpdf2>:
 8000a48:	f04f 0c01 	mov.w	ip, #1
 8000a4c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a5c:	bf18      	it	ne
 8000a5e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a62:	d01b      	beq.n	8000a9c <__cmpdf2+0x54>
 8000a64:	b001      	add	sp, #4
 8000a66:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6a:	bf0c      	ite	eq
 8000a6c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a70:	ea91 0f03 	teqne	r1, r3
 8000a74:	bf02      	ittt	eq
 8000a76:	ea90 0f02 	teqeq	r0, r2
 8000a7a:	2000      	moveq	r0, #0
 8000a7c:	4770      	bxeq	lr
 8000a7e:	f110 0f00 	cmn.w	r0, #0
 8000a82:	ea91 0f03 	teq	r1, r3
 8000a86:	bf58      	it	pl
 8000a88:	4299      	cmppl	r1, r3
 8000a8a:	bf08      	it	eq
 8000a8c:	4290      	cmpeq	r0, r2
 8000a8e:	bf2c      	ite	cs
 8000a90:	17d8      	asrcs	r0, r3, #31
 8000a92:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a96:	f040 0001 	orr.w	r0, r0, #1
 8000a9a:	4770      	bx	lr
 8000a9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__cmpdf2+0x64>
 8000aa6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aaa:	d107      	bne.n	8000abc <__cmpdf2+0x74>
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab4:	d1d6      	bne.n	8000a64 <__cmpdf2+0x1c>
 8000ab6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aba:	d0d3      	beq.n	8000a64 <__cmpdf2+0x1c>
 8000abc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_cdrcmple>:
 8000ac4:	4684      	mov	ip, r0
 8000ac6:	4610      	mov	r0, r2
 8000ac8:	4662      	mov	r2, ip
 8000aca:	468c      	mov	ip, r1
 8000acc:	4619      	mov	r1, r3
 8000ace:	4663      	mov	r3, ip
 8000ad0:	e000      	b.n	8000ad4 <__aeabi_cdcmpeq>
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_cdcmpeq>:
 8000ad4:	b501      	push	{r0, lr}
 8000ad6:	f7ff ffb7 	bl	8000a48 <__cmpdf2>
 8000ada:	2800      	cmp	r0, #0
 8000adc:	bf48      	it	mi
 8000ade:	f110 0f00 	cmnmi.w	r0, #0
 8000ae2:	bd01      	pop	{r0, pc}

08000ae4 <__aeabi_dcmpeq>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff fff4 	bl	8000ad4 <__aeabi_cdcmpeq>
 8000aec:	bf0c      	ite	eq
 8000aee:	2001      	moveq	r0, #1
 8000af0:	2000      	movne	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmplt>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff ffea 	bl	8000ad4 <__aeabi_cdcmpeq>
 8000b00:	bf34      	ite	cc
 8000b02:	2001      	movcc	r0, #1
 8000b04:	2000      	movcs	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmple>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffe0 	bl	8000ad4 <__aeabi_cdcmpeq>
 8000b14:	bf94      	ite	ls
 8000b16:	2001      	movls	r0, #1
 8000b18:	2000      	movhi	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmpge>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffce 	bl	8000ac4 <__aeabi_cdrcmple>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpgt>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffc4 	bl	8000ac4 <__aeabi_cdrcmple>
 8000b3c:	bf34      	ite	cc
 8000b3e:	2001      	movcc	r0, #1
 8000b40:	2000      	movcs	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpun>:
 8000b48:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b50:	d102      	bne.n	8000b58 <__aeabi_dcmpun+0x10>
 8000b52:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b56:	d10a      	bne.n	8000b6e <__aeabi_dcmpun+0x26>
 8000b58:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b5c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b60:	d102      	bne.n	8000b68 <__aeabi_dcmpun+0x20>
 8000b62:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b66:	d102      	bne.n	8000b6e <__aeabi_dcmpun+0x26>
 8000b68:	f04f 0000 	mov.w	r0, #0
 8000b6c:	4770      	bx	lr
 8000b6e:	f04f 0001 	mov.w	r0, #1
 8000b72:	4770      	bx	lr

08000b74 <__aeabi_d2uiz>:
 8000b74:	004a      	lsls	r2, r1, #1
 8000b76:	d211      	bcs.n	8000b9c <__aeabi_d2uiz+0x28>
 8000b78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b7c:	d211      	bcs.n	8000ba2 <__aeabi_d2uiz+0x2e>
 8000b7e:	d50d      	bpl.n	8000b9c <__aeabi_d2uiz+0x28>
 8000b80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b88:	d40e      	bmi.n	8000ba8 <__aeabi_d2uiz+0x34>
 8000b8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b96:	fa23 f002 	lsr.w	r0, r3, r2
 8000b9a:	4770      	bx	lr
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba6:	d102      	bne.n	8000bae <__aeabi_d2uiz+0x3a>
 8000ba8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bac:	4770      	bx	lr
 8000bae:	f04f 0000 	mov.w	r0, #0
 8000bb2:	4770      	bx	lr

08000bb4 <__aeabi_d2f>:
 8000bb4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bbc:	bf24      	itt	cs
 8000bbe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bc6:	d90d      	bls.n	8000be4 <__aeabi_d2f+0x30>
 8000bc8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bcc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bd8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bdc:	bf08      	it	eq
 8000bde:	f020 0001 	biceq.w	r0, r0, #1
 8000be2:	4770      	bx	lr
 8000be4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000be8:	d121      	bne.n	8000c2e <__aeabi_d2f+0x7a>
 8000bea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bee:	bfbc      	itt	lt
 8000bf0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf4:	4770      	bxlt	lr
 8000bf6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bfe:	f1c2 0218 	rsb	r2, r2, #24
 8000c02:	f1c2 0c20 	rsb	ip, r2, #32
 8000c06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000c0e:	bf18      	it	ne
 8000c10:	f040 0001 	orrne.w	r0, r0, #1
 8000c14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c20:	ea40 000c 	orr.w	r0, r0, ip
 8000c24:	fa23 f302 	lsr.w	r3, r3, r2
 8000c28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c2c:	e7cc      	b.n	8000bc8 <__aeabi_d2f+0x14>
 8000c2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c32:	d107      	bne.n	8000c44 <__aeabi_d2f+0x90>
 8000c34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c38:	bf1e      	ittt	ne
 8000c3a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c3e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c42:	4770      	bxne	lr
 8000c44:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop

08000c54 <__aeabi_uldivmod>:
 8000c54:	b953      	cbnz	r3, 8000c6c <__aeabi_uldivmod+0x18>
 8000c56:	b94a      	cbnz	r2, 8000c6c <__aeabi_uldivmod+0x18>
 8000c58:	2900      	cmp	r1, #0
 8000c5a:	bf08      	it	eq
 8000c5c:	2800      	cmpeq	r0, #0
 8000c5e:	bf1c      	itt	ne
 8000c60:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c64:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c68:	f000 b9b8 	b.w	8000fdc <__aeabi_idiv0>
 8000c6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c74:	f000 f83c 	bl	8000cf0 <__udivmoddi4>
 8000c78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c80:	b004      	add	sp, #16
 8000c82:	4770      	bx	lr

08000c84 <__aeabi_d2lz>:
 8000c84:	b538      	push	{r3, r4, r5, lr}
 8000c86:	2200      	movs	r2, #0
 8000c88:	2300      	movs	r3, #0
 8000c8a:	4604      	mov	r4, r0
 8000c8c:	460d      	mov	r5, r1
 8000c8e:	f7ff ff33 	bl	8000af8 <__aeabi_dcmplt>
 8000c92:	b928      	cbnz	r0, 8000ca0 <__aeabi_d2lz+0x1c>
 8000c94:	4620      	mov	r0, r4
 8000c96:	4629      	mov	r1, r5
 8000c98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c9c:	f000 b80a 	b.w	8000cb4 <__aeabi_d2ulz>
 8000ca0:	4620      	mov	r0, r4
 8000ca2:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000ca6:	f000 f805 	bl	8000cb4 <__aeabi_d2ulz>
 8000caa:	4240      	negs	r0, r0
 8000cac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb0:	bd38      	pop	{r3, r4, r5, pc}
 8000cb2:	bf00      	nop

08000cb4 <__aeabi_d2ulz>:
 8000cb4:	b5d0      	push	{r4, r6, r7, lr}
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	4b0b      	ldr	r3, [pc, #44]	; (8000ce8 <__aeabi_d2ulz+0x34>)
 8000cba:	4606      	mov	r6, r0
 8000cbc:	460f      	mov	r7, r1
 8000cbe:	f7ff fca9 	bl	8000614 <__aeabi_dmul>
 8000cc2:	f7ff ff57 	bl	8000b74 <__aeabi_d2uiz>
 8000cc6:	4604      	mov	r4, r0
 8000cc8:	f7ff fc2a 	bl	8000520 <__aeabi_ui2d>
 8000ccc:	2200      	movs	r2, #0
 8000cce:	4b07      	ldr	r3, [pc, #28]	; (8000cec <__aeabi_d2ulz+0x38>)
 8000cd0:	f7ff fca0 	bl	8000614 <__aeabi_dmul>
 8000cd4:	4602      	mov	r2, r0
 8000cd6:	460b      	mov	r3, r1
 8000cd8:	4630      	mov	r0, r6
 8000cda:	4639      	mov	r1, r7
 8000cdc:	f7ff fae2 	bl	80002a4 <__aeabi_dsub>
 8000ce0:	f7ff ff48 	bl	8000b74 <__aeabi_d2uiz>
 8000ce4:	4621      	mov	r1, r4
 8000ce6:	bdd0      	pop	{r4, r6, r7, pc}
 8000ce8:	3df00000 	.word	0x3df00000
 8000cec:	41f00000 	.word	0x41f00000

08000cf0 <__udivmoddi4>:
 8000cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000cf4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8000cf6:	460d      	mov	r5, r1
 8000cf8:	4604      	mov	r4, r0
 8000cfa:	460f      	mov	r7, r1
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d146      	bne.n	8000d8e <__udivmoddi4+0x9e>
 8000d00:	428a      	cmp	r2, r1
 8000d02:	4694      	mov	ip, r2
 8000d04:	d95e      	bls.n	8000dc4 <__udivmoddi4+0xd4>
 8000d06:	fab2 f382 	clz	r3, r2
 8000d0a:	b143      	cbz	r3, 8000d1e <__udivmoddi4+0x2e>
 8000d0c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d10:	f1c3 0220 	rsb	r2, r3, #32
 8000d14:	409f      	lsls	r7, r3
 8000d16:	409c      	lsls	r4, r3
 8000d18:	fa20 f202 	lsr.w	r2, r0, r2
 8000d1c:	4317      	orrs	r7, r2
 8000d1e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d22:	fa1f f58c 	uxth.w	r5, ip
 8000d26:	0c22      	lsrs	r2, r4, #16
 8000d28:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d2c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d30:	fb01 f005 	mul.w	r0, r1, r5
 8000d34:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d38:	4290      	cmp	r0, r2
 8000d3a:	d908      	bls.n	8000d4e <__udivmoddi4+0x5e>
 8000d3c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d40:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000d44:	d202      	bcs.n	8000d4c <__udivmoddi4+0x5c>
 8000d46:	4290      	cmp	r0, r2
 8000d48:	f200 8134 	bhi.w	8000fb4 <__udivmoddi4+0x2c4>
 8000d4c:	4639      	mov	r1, r7
 8000d4e:	1a12      	subs	r2, r2, r0
 8000d50:	b2a4      	uxth	r4, r4
 8000d52:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d56:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d5a:	fb00 f505 	mul.w	r5, r0, r5
 8000d5e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d62:	42a5      	cmp	r5, r4
 8000d64:	d908      	bls.n	8000d78 <__udivmoddi4+0x88>
 8000d66:	eb1c 0404 	adds.w	r4, ip, r4
 8000d6a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d6e:	d202      	bcs.n	8000d76 <__udivmoddi4+0x86>
 8000d70:	42a5      	cmp	r5, r4
 8000d72:	f200 8119 	bhi.w	8000fa8 <__udivmoddi4+0x2b8>
 8000d76:	4610      	mov	r0, r2
 8000d78:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d7c:	1b64      	subs	r4, r4, r5
 8000d7e:	2100      	movs	r1, #0
 8000d80:	b11e      	cbz	r6, 8000d8a <__udivmoddi4+0x9a>
 8000d82:	40dc      	lsrs	r4, r3
 8000d84:	2300      	movs	r3, #0
 8000d86:	e9c6 4300 	strd	r4, r3, [r6]
 8000d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0xb4>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80fc 	beq.w	8000f90 <__udivmoddi4+0x2a0>
 8000d98:	2100      	movs	r1, #0
 8000d9a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d9e:	4608      	mov	r0, r1
 8000da0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000da4:	fab3 f183 	clz	r1, r3
 8000da8:	2900      	cmp	r1, #0
 8000daa:	d14c      	bne.n	8000e46 <__udivmoddi4+0x156>
 8000dac:	42ab      	cmp	r3, r5
 8000dae:	f0c0 80f2 	bcc.w	8000f96 <__udivmoddi4+0x2a6>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f240 80ef 	bls.w	8000f96 <__udivmoddi4+0x2a6>
 8000db8:	4608      	mov	r0, r1
 8000dba:	2e00      	cmp	r6, #0
 8000dbc:	d0e5      	beq.n	8000d8a <__udivmoddi4+0x9a>
 8000dbe:	e9c6 4700 	strd	r4, r7, [r6]
 8000dc2:	e7e2      	b.n	8000d8a <__udivmoddi4+0x9a>
 8000dc4:	b902      	cbnz	r2, 8000dc8 <__udivmoddi4+0xd8>
 8000dc6:	deff      	udf	#255	; 0xff
 8000dc8:	fab2 f382 	clz	r3, r2
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	f040 809f 	bne.w	8000f10 <__udivmoddi4+0x220>
 8000dd2:	1a8a      	subs	r2, r1, r2
 8000dd4:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000dd8:	fa1f f78c 	uxth.w	r7, ip
 8000ddc:	2101      	movs	r1, #1
 8000dde:	fbb2 f5fe 	udiv	r5, r2, lr
 8000de2:	fb0e 2015 	mls	r0, lr, r5, r2
 8000de6:	0c22      	lsrs	r2, r4, #16
 8000de8:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dec:	fb07 f005 	mul.w	r0, r7, r5
 8000df0:	4290      	cmp	r0, r2
 8000df2:	d90f      	bls.n	8000e14 <__udivmoddi4+0x124>
 8000df4:	eb1c 0202 	adds.w	r2, ip, r2
 8000df8:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000dfc:	bf2c      	ite	cs
 8000dfe:	f04f 0901 	movcs.w	r9, #1
 8000e02:	f04f 0900 	movcc.w	r9, #0
 8000e06:	4290      	cmp	r0, r2
 8000e08:	d903      	bls.n	8000e12 <__udivmoddi4+0x122>
 8000e0a:	f1b9 0f00 	cmp.w	r9, #0
 8000e0e:	f000 80ce 	beq.w	8000fae <__udivmoddi4+0x2be>
 8000e12:	4645      	mov	r5, r8
 8000e14:	1a12      	subs	r2, r2, r0
 8000e16:	b2a4      	uxth	r4, r4
 8000e18:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e1c:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e20:	fb00 f707 	mul.w	r7, r0, r7
 8000e24:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e28:	42a7      	cmp	r7, r4
 8000e2a:	d908      	bls.n	8000e3e <__udivmoddi4+0x14e>
 8000e2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e30:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000e34:	d202      	bcs.n	8000e3c <__udivmoddi4+0x14c>
 8000e36:	42a7      	cmp	r7, r4
 8000e38:	f200 80b3 	bhi.w	8000fa2 <__udivmoddi4+0x2b2>
 8000e3c:	4610      	mov	r0, r2
 8000e3e:	1be4      	subs	r4, r4, r7
 8000e40:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e44:	e79c      	b.n	8000d80 <__udivmoddi4+0x90>
 8000e46:	f1c1 0420 	rsb	r4, r1, #32
 8000e4a:	408b      	lsls	r3, r1
 8000e4c:	fa05 fc01 	lsl.w	ip, r5, r1
 8000e50:	fa22 f704 	lsr.w	r7, r2, r4
 8000e54:	40e5      	lsrs	r5, r4
 8000e56:	408a      	lsls	r2, r1
 8000e58:	431f      	orrs	r7, r3
 8000e5a:	fa20 f304 	lsr.w	r3, r0, r4
 8000e5e:	4088      	lsls	r0, r1
 8000e60:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000e64:	ea43 030c 	orr.w	r3, r3, ip
 8000e68:	fa1f fc87 	uxth.w	ip, r7
 8000e6c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e70:	fbb5 fef8 	udiv	lr, r5, r8
 8000e74:	fb08 551e 	mls	r5, r8, lr, r5
 8000e78:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000e7c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e80:	45a9      	cmp	r9, r5
 8000e82:	d90e      	bls.n	8000ea2 <__udivmoddi4+0x1b2>
 8000e84:	197d      	adds	r5, r7, r5
 8000e86:	f10e 3aff 	add.w	sl, lr, #4294967295	; 0xffffffff
 8000e8a:	bf2c      	ite	cs
 8000e8c:	f04f 0b01 	movcs.w	fp, #1
 8000e90:	f04f 0b00 	movcc.w	fp, #0
 8000e94:	45a9      	cmp	r9, r5
 8000e96:	d903      	bls.n	8000ea0 <__udivmoddi4+0x1b0>
 8000e98:	f1bb 0f00 	cmp.w	fp, #0
 8000e9c:	f000 808d 	beq.w	8000fba <__udivmoddi4+0x2ca>
 8000ea0:	46d6      	mov	lr, sl
 8000ea2:	eba5 0509 	sub.w	r5, r5, r9
 8000ea6:	fa1f f983 	uxth.w	r9, r3
 8000eaa:	fbb5 f3f8 	udiv	r3, r5, r8
 8000eae:	fb08 5513 	mls	r5, r8, r3, r5
 8000eb2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eb6:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000eba:	45ac      	cmp	ip, r5
 8000ebc:	d906      	bls.n	8000ecc <__udivmoddi4+0x1dc>
 8000ebe:	197d      	adds	r5, r7, r5
 8000ec0:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000ec4:	d201      	bcs.n	8000eca <__udivmoddi4+0x1da>
 8000ec6:	45ac      	cmp	ip, r5
 8000ec8:	d87e      	bhi.n	8000fc8 <__udivmoddi4+0x2d8>
 8000eca:	4643      	mov	r3, r8
 8000ecc:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000ed0:	eba5 050c 	sub.w	r5, r5, ip
 8000ed4:	fba3 9802 	umull	r9, r8, r3, r2
 8000ed8:	4545      	cmp	r5, r8
 8000eda:	46ce      	mov	lr, r9
 8000edc:	46c4      	mov	ip, r8
 8000ede:	d302      	bcc.n	8000ee6 <__udivmoddi4+0x1f6>
 8000ee0:	d106      	bne.n	8000ef0 <__udivmoddi4+0x200>
 8000ee2:	4548      	cmp	r0, r9
 8000ee4:	d204      	bcs.n	8000ef0 <__udivmoddi4+0x200>
 8000ee6:	3b01      	subs	r3, #1
 8000ee8:	ebb9 0e02 	subs.w	lr, r9, r2
 8000eec:	eb68 0c07 	sbc.w	ip, r8, r7
 8000ef0:	2e00      	cmp	r6, #0
 8000ef2:	d06f      	beq.n	8000fd4 <__udivmoddi4+0x2e4>
 8000ef4:	ebb0 020e 	subs.w	r2, r0, lr
 8000ef8:	eb65 050c 	sbc.w	r5, r5, ip
 8000efc:	40ca      	lsrs	r2, r1
 8000efe:	fa05 f404 	lsl.w	r4, r5, r4
 8000f02:	40cd      	lsrs	r5, r1
 8000f04:	4618      	mov	r0, r3
 8000f06:	4314      	orrs	r4, r2
 8000f08:	2100      	movs	r1, #0
 8000f0a:	e9c6 4500 	strd	r4, r5, [r6]
 8000f0e:	e73c      	b.n	8000d8a <__udivmoddi4+0x9a>
 8000f10:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f14:	f1c3 0220 	rsb	r2, r3, #32
 8000f18:	4099      	lsls	r1, r3
 8000f1a:	409c      	lsls	r4, r3
 8000f1c:	40d5      	lsrs	r5, r2
 8000f1e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000f22:	fa20 f202 	lsr.w	r2, r0, r2
 8000f26:	fa1f f78c 	uxth.w	r7, ip
 8000f2a:	fbb5 f0fe 	udiv	r0, r5, lr
 8000f2e:	430a      	orrs	r2, r1
 8000f30:	fb0e 5510 	mls	r5, lr, r0, r5
 8000f34:	0c11      	lsrs	r1, r2, #16
 8000f36:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f3a:	fb00 f507 	mul.w	r5, r0, r7
 8000f3e:	428d      	cmp	r5, r1
 8000f40:	d90e      	bls.n	8000f60 <__udivmoddi4+0x270>
 8000f42:	eb1c 0101 	adds.w	r1, ip, r1
 8000f46:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f4a:	bf2c      	ite	cs
 8000f4c:	f04f 0901 	movcs.w	r9, #1
 8000f50:	f04f 0900 	movcc.w	r9, #0
 8000f54:	428d      	cmp	r5, r1
 8000f56:	d902      	bls.n	8000f5e <__udivmoddi4+0x26e>
 8000f58:	f1b9 0f00 	cmp.w	r9, #0
 8000f5c:	d031      	beq.n	8000fc2 <__udivmoddi4+0x2d2>
 8000f5e:	4640      	mov	r0, r8
 8000f60:	1b49      	subs	r1, r1, r5
 8000f62:	b292      	uxth	r2, r2
 8000f64:	fbb1 f5fe 	udiv	r5, r1, lr
 8000f68:	fb0e 1115 	mls	r1, lr, r5, r1
 8000f6c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f70:	fb05 f107 	mul.w	r1, r5, r7
 8000f74:	4291      	cmp	r1, r2
 8000f76:	d907      	bls.n	8000f88 <__udivmoddi4+0x298>
 8000f78:	eb1c 0202 	adds.w	r2, ip, r2
 8000f7c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000f80:	d201      	bcs.n	8000f86 <__udivmoddi4+0x296>
 8000f82:	4291      	cmp	r1, r2
 8000f84:	d823      	bhi.n	8000fce <__udivmoddi4+0x2de>
 8000f86:	4645      	mov	r5, r8
 8000f88:	1a52      	subs	r2, r2, r1
 8000f8a:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f8e:	e726      	b.n	8000dde <__udivmoddi4+0xee>
 8000f90:	4631      	mov	r1, r6
 8000f92:	4630      	mov	r0, r6
 8000f94:	e6f9      	b.n	8000d8a <__udivmoddi4+0x9a>
 8000f96:	1a84      	subs	r4, r0, r2
 8000f98:	eb65 0203 	sbc.w	r2, r5, r3
 8000f9c:	2001      	movs	r0, #1
 8000f9e:	4617      	mov	r7, r2
 8000fa0:	e70b      	b.n	8000dba <__udivmoddi4+0xca>
 8000fa2:	4464      	add	r4, ip
 8000fa4:	3802      	subs	r0, #2
 8000fa6:	e74a      	b.n	8000e3e <__udivmoddi4+0x14e>
 8000fa8:	4464      	add	r4, ip
 8000faa:	3802      	subs	r0, #2
 8000fac:	e6e4      	b.n	8000d78 <__udivmoddi4+0x88>
 8000fae:	3d02      	subs	r5, #2
 8000fb0:	4462      	add	r2, ip
 8000fb2:	e72f      	b.n	8000e14 <__udivmoddi4+0x124>
 8000fb4:	3902      	subs	r1, #2
 8000fb6:	4462      	add	r2, ip
 8000fb8:	e6c9      	b.n	8000d4e <__udivmoddi4+0x5e>
 8000fba:	f1ae 0e02 	sub.w	lr, lr, #2
 8000fbe:	443d      	add	r5, r7
 8000fc0:	e76f      	b.n	8000ea2 <__udivmoddi4+0x1b2>
 8000fc2:	3802      	subs	r0, #2
 8000fc4:	4461      	add	r1, ip
 8000fc6:	e7cb      	b.n	8000f60 <__udivmoddi4+0x270>
 8000fc8:	3b02      	subs	r3, #2
 8000fca:	443d      	add	r5, r7
 8000fcc:	e77e      	b.n	8000ecc <__udivmoddi4+0x1dc>
 8000fce:	3d02      	subs	r5, #2
 8000fd0:	4462      	add	r2, ip
 8000fd2:	e7d9      	b.n	8000f88 <__udivmoddi4+0x298>
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	4631      	mov	r1, r6
 8000fd8:	e6d7      	b.n	8000d8a <__udivmoddi4+0x9a>
 8000fda:	bf00      	nop

08000fdc <__aeabi_idiv0>:
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop

08000fe0 <BSP_LED_Init>:
  *            @arg  LED6
  *            @arg  LED7
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b08a      	sub	sp, #40	; 0x28
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000fea:	2300      	movs	r3, #0
 8000fec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO_LED clock */
  LED6_GPIO_CLK_ENABLE();
 8000fee:	4b22      	ldr	r3, [pc, #136]	; (8001078 <BSP_LED_Init+0x98>)
 8000ff0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000ff4:	4a20      	ldr	r2, [pc, #128]	; (8001078 <BSP_LED_Init+0x98>)
 8000ff6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ffa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000ffe:	4b1e      	ldr	r3, [pc, #120]	; (8001078 <BSP_LED_Init+0x98>)
 8001000:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001004:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001008:	60fb      	str	r3, [r7, #12]
 800100a:	68fb      	ldr	r3, [r7, #12]
  LED7_GPIO_CLK_ENABLE();
 800100c:	4b1a      	ldr	r3, [pc, #104]	; (8001078 <BSP_LED_Init+0x98>)
 800100e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001012:	4a19      	ldr	r2, [pc, #100]	; (8001078 <BSP_LED_Init+0x98>)
 8001014:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001018:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800101c:	4b16      	ldr	r3, [pc, #88]	; (8001078 <BSP_LED_Init+0x98>)
 800101e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001022:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001026:	60bb      	str	r3, [r7, #8]
 8001028:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 800102a:	2301      	movs	r3, #1
 800102c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Pull = GPIO_NOPULL;
 800102e:	2300      	movs	r3, #0
 8001030:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001032:	2302      	movs	r3, #2
 8001034:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Pin = LED_PIN [Led];
 8001036:	79fb      	ldrb	r3, [r7, #7]
 8001038:	4a10      	ldr	r2, [pc, #64]	; (800107c <BSP_LED_Init+0x9c>)
 800103a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800103e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001040:	79fb      	ldrb	r3, [r7, #7]
 8001042:	4a0f      	ldr	r2, [pc, #60]	; (8001080 <BSP_LED_Init+0xa0>)
 8001044:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001048:	f107 0210 	add.w	r2, r7, #16
 800104c:	4611      	mov	r1, r2
 800104e:	4618      	mov	r0, r3
 8001050:	f002 ff8a 	bl	8003f68 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT [Led], (uint16_t)LED_PIN[Led], GPIO_PIN_SET);
 8001054:	79fb      	ldrb	r3, [r7, #7]
 8001056:	4a0a      	ldr	r2, [pc, #40]	; (8001080 <BSP_LED_Init+0xa0>)
 8001058:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800105c:	79fb      	ldrb	r3, [r7, #7]
 800105e:	4a07      	ldr	r2, [pc, #28]	; (800107c <BSP_LED_Init+0x9c>)
 8001060:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001064:	b29b      	uxth	r3, r3
 8001066:	2201      	movs	r2, #1
 8001068:	4619      	mov	r1, r3
 800106a:	f003 f955 	bl	8004318 <HAL_GPIO_WritePin>

  return ret;
 800106e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001070:	4618      	mov	r0, r3
 8001072:	3728      	adds	r7, #40	; 0x28
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	46020c00 	.word	0x46020c00
 800107c:	0800e448 	.word	0x0800e448
 8001080:	20000000 	.word	0x20000000

08001084 <BSP_LED_On>:
  *            @arg  LED6
  *            @arg  LED7
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	4603      	mov	r3, r0
 800108c:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  HAL_GPIO_WritePin(LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_RESET);
 800108e:	79fb      	ldrb	r3, [r7, #7]
 8001090:	4a09      	ldr	r2, [pc, #36]	; (80010b8 <BSP_LED_On+0x34>)
 8001092:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001096:	79fb      	ldrb	r3, [r7, #7]
 8001098:	4a08      	ldr	r2, [pc, #32]	; (80010bc <BSP_LED_On+0x38>)
 800109a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800109e:	b29b      	uxth	r3, r3
 80010a0:	2200      	movs	r2, #0
 80010a2:	4619      	mov	r1, r3
 80010a4:	f003 f938 	bl	8004318 <HAL_GPIO_WritePin>
  ret = BSP_ERROR_NONE;
 80010a8:	2300      	movs	r3, #0
 80010aa:	60fb      	str	r3, [r7, #12]

  return ret;
 80010ac:	68fb      	ldr	r3, [r7, #12]
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3710      	adds	r7, #16
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	20000000 	.word	0x20000000
 80010bc:	0800e448 	.word	0x0800e448

080010c0 <BSP_LED_Off>:
  *            @arg  LED6
  *            @arg  LED7
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	4603      	mov	r3, r0
 80010c8:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  HAL_GPIO_WritePin(LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_SET);
 80010ca:	79fb      	ldrb	r3, [r7, #7]
 80010cc:	4a09      	ldr	r2, [pc, #36]	; (80010f4 <BSP_LED_Off+0x34>)
 80010ce:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80010d2:	79fb      	ldrb	r3, [r7, #7]
 80010d4:	4a08      	ldr	r2, [pc, #32]	; (80010f8 <BSP_LED_Off+0x38>)
 80010d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010da:	b29b      	uxth	r3, r3
 80010dc:	2201      	movs	r2, #1
 80010de:	4619      	mov	r1, r3
 80010e0:	f003 f91a 	bl	8004318 <HAL_GPIO_WritePin>
  ret = BSP_ERROR_NONE;
 80010e4:	2300      	movs	r3, #0
 80010e6:	60fb      	str	r3, [r7, #12]

  return ret;
 80010e8:	68fb      	ldr	r3, [r7, #12]
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3710      	adds	r7, #16
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	20000000 	.word	0x20000000
 80010f8:	0800e448 	.word	0x0800e448

080010fc <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b08a      	sub	sp, #40	; 0x28
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	460a      	mov	r2, r1
 8001106:	71fb      	strb	r3, [r7, #7]
 8001108:	4613      	mov	r3, r2
 800110a:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800110c:	2300      	movs	r3, #0
 800110e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitTypeDef gpio_init_structure;
  static BSP_EXTI_LineCallback ButtonCallback[BUTTON_NBR] = {BUTTON_USER_EXTI_Callback,};
  static uint32_t  BSP_BUTTON_PRIO [BUTTON_NBR] = {BSP_BUTTON_USER_IT_PRIORITY,};
  static const uint32_t BUTTON_EXTI_LINE[BUTTON_NBR] = {BUTTON_USER_EXTI_LINE,};

  if (Button != BUTTON_USER)
 8001110:	79fb      	ldrb	r3, [r7, #7]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d003      	beq.n	800111e <BSP_PB_Init+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001116:	f06f 0301 	mvn.w	r3, #1
 800111a:	627b      	str	r3, [r7, #36]	; 0x24
 800111c:	e05c      	b.n	80011d8 <BSP_PB_Init+0xdc>
  }
  else
  {
    /* Enable the BUTTON clock*/
    BUTTON_USER_GPIO_CLK_ENABLE();
 800111e:	4b31      	ldr	r3, [pc, #196]	; (80011e4 <BSP_PB_Init+0xe8>)
 8001120:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001124:	4a2f      	ldr	r2, [pc, #188]	; (80011e4 <BSP_PB_Init+0xe8>)
 8001126:	f043 0304 	orr.w	r3, r3, #4
 800112a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800112e:	4b2d      	ldr	r3, [pc, #180]	; (80011e4 <BSP_PB_Init+0xe8>)
 8001130:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001134:	f003 0304 	and.w	r3, r3, #4
 8001138:	60fb      	str	r3, [r7, #12]
 800113a:	68fb      	ldr	r3, [r7, #12]

    gpio_init_structure.Pin = BUTTON_PIN [Button];
 800113c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001140:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Pull = GPIO_PULLDOWN;
 8001142:	2302      	movs	r3, #2
 8001144:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001146:	2302      	movs	r3, #2
 8001148:	61fb      	str	r3, [r7, #28]

    if (ButtonMode == BUTTON_MODE_GPIO)
 800114a:	79bb      	ldrb	r3, [r7, #6]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d10c      	bne.n	800116a <BSP_PB_Init+0x6e>
    {
      /* Configure Button pin as input */
      gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8001150:	2300      	movs	r3, #0
 8001152:	617b      	str	r3, [r7, #20]
      HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8001154:	79fb      	ldrb	r3, [r7, #7]
 8001156:	4a24      	ldr	r2, [pc, #144]	; (80011e8 <BSP_PB_Init+0xec>)
 8001158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800115c:	f107 0210 	add.w	r2, r7, #16
 8001160:	4611      	mov	r1, r2
 8001162:	4618      	mov	r0, r3
 8001164:	f002 ff00 	bl	8003f68 <HAL_GPIO_Init>
 8001168:	e036      	b.n	80011d8 <BSP_PB_Init+0xdc>
    }
    else /* (ButtonMode == BUTTON_MODE_EXTI) */
    {
      /* Configure Button pin as input with External interrupt */
      gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 800116a:	4b20      	ldr	r3, [pc, #128]	; (80011ec <BSP_PB_Init+0xf0>)
 800116c:	617b      	str	r3, [r7, #20]

      HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800116e:	79fb      	ldrb	r3, [r7, #7]
 8001170:	4a1d      	ldr	r2, [pc, #116]	; (80011e8 <BSP_PB_Init+0xec>)
 8001172:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001176:	f107 0210 	add.w	r2, r7, #16
 800117a:	4611      	mov	r1, r2
 800117c:	4618      	mov	r0, r3
 800117e:	f002 fef3 	bl	8003f68 <HAL_GPIO_Init>

      (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8001182:	79fa      	ldrb	r2, [r7, #7]
 8001184:	4613      	mov	r3, r2
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	4413      	add	r3, r2
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	4a18      	ldr	r2, [pc, #96]	; (80011f0 <BSP_PB_Init+0xf4>)
 800118e:	441a      	add	r2, r3
 8001190:	79fb      	ldrb	r3, [r7, #7]
 8001192:	4918      	ldr	r1, [pc, #96]	; (80011f4 <BSP_PB_Init+0xf8>)
 8001194:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001198:	4619      	mov	r1, r3
 800119a:	4610      	mov	r0, r2
 800119c:	f002 fe88 	bl	8003eb0 <HAL_EXTI_GetHandle>
      (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 80011a0:	79fa      	ldrb	r2, [r7, #7]
 80011a2:	4613      	mov	r3, r2
 80011a4:	005b      	lsls	r3, r3, #1
 80011a6:	4413      	add	r3, r2
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	4a11      	ldr	r2, [pc, #68]	; (80011f0 <BSP_PB_Init+0xf4>)
 80011ac:	1898      	adds	r0, r3, r2
 80011ae:	79fb      	ldrb	r3, [r7, #7]
 80011b0:	4a11      	ldr	r2, [pc, #68]	; (80011f8 <BSP_PB_Init+0xfc>)
 80011b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011b6:	461a      	mov	r2, r3
 80011b8:	2100      	movs	r1, #0
 80011ba:	f002 fe4d 	bl	8003e58 <HAL_EXTI_RegisterCallback>

      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80011be:	2018      	movs	r0, #24
 80011c0:	79fb      	ldrb	r3, [r7, #7]
 80011c2:	4a0e      	ldr	r2, [pc, #56]	; (80011fc <BSP_PB_Init+0x100>)
 80011c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011c8:	2200      	movs	r2, #0
 80011ca:	4619      	mov	r1, r3
 80011cc:	f002 fd6b 	bl	8003ca6 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80011d0:	2318      	movs	r3, #24
 80011d2:	4618      	mov	r0, r3
 80011d4:	f002 fd81 	bl	8003cda <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 80011d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3728      	adds	r7, #40	; 0x28
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	46020c00 	.word	0x46020c00
 80011e8:	20000008 	.word	0x20000008
 80011ec:	10110000 	.word	0x10110000
 80011f0:	200002fc 	.word	0x200002fc
 80011f4:	0800e450 	.word	0x0800e450
 80011f8:	2000000c 	.word	0x2000000c
 80011fc:	20000010 	.word	0x20000010

08001200 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  KEY EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001204:	2000      	movs	r0, #0
 8001206:	f009 f901 	bl	800a40c <BSP_PB_Callback>
}
 800120a:	bf00      	nop
 800120c:	bd80      	pop	{r7, pc}
	...

08001210 <stm32wb_at_Init>:
 * @brief Init the at module
 * @param None
 * @retval 0 in case of success, an error code otherwise
 */
uint8_t stm32wb_at_Init(uint8_t *buff_rx, uint8_t buff_rx_size)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	460b      	mov	r3, r1
 800121a:	70fb      	strb	r3, [r7, #3]
  uint8_t status;

  if(buff_rx_size >= sizeof(str_received))
 800121c:	78fb      	ldrb	r3, [r7, #3]
 800121e:	2b3f      	cmp	r3, #63	; 0x3f
 8001220:	d91b      	bls.n	800125a <stm32wb_at_Init+0x4a>
  {
    buffer_rx_size = buff_rx_size;
 8001222:	4a11      	ldr	r2, [pc, #68]	; (8001268 <stm32wb_at_Init+0x58>)
 8001224:	78fb      	ldrb	r3, [r7, #3]
 8001226:	7013      	strb	r3, [r2, #0]
    buffer_rx = buff_rx;
 8001228:	4a10      	ldr	r2, [pc, #64]	; (800126c <stm32wb_at_Init+0x5c>)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6013      	str	r3, [r2, #0]
    (void)memset(&buffer_rx[0], 0, buffer_rx_size);
 800122e:	4b0f      	ldr	r3, [pc, #60]	; (800126c <stm32wb_at_Init+0x5c>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a0d      	ldr	r2, [pc, #52]	; (8001268 <stm32wb_at_Init+0x58>)
 8001234:	7812      	ldrb	r2, [r2, #0]
 8001236:	2100      	movs	r1, #0
 8001238:	4618      	mov	r0, r3
 800123a:	f00a fe2d 	bl	800be98 <memset>
    buffer_rx_cursor = 0;
 800123e:	4b0c      	ldr	r3, [pc, #48]	; (8001270 <stm32wb_at_Init+0x60>)
 8001240:	2200      	movs	r2, #0
 8001242:	701a      	strb	r2, [r3, #0]
    (void)memset(&str_received[0], 0, sizeof(str_received));
 8001244:	2240      	movs	r2, #64	; 0x40
 8001246:	2100      	movs	r1, #0
 8001248:	480a      	ldr	r0, [pc, #40]	; (8001274 <stm32wb_at_Init+0x64>)
 800124a:	f00a fe25 	bl	800be98 <memset>

    stm32wb_at_ll_Async_receive(0);
 800124e:	2000      	movs	r0, #0
 8001250:	f009 f9b4 	bl	800a5bc <stm32wb_at_ll_Async_receive>
    status = 0;
 8001254:	2300      	movs	r3, #0
 8001256:	73fb      	strb	r3, [r7, #15]
 8001258:	e001      	b.n	800125e <stm32wb_at_Init+0x4e>
  }
  else
  {
    status = 1;
 800125a:	2301      	movs	r3, #1
 800125c:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 800125e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001260:	4618      	mov	r0, r3
 8001262:	3710      	adds	r7, #16
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	2000030c 	.word	0x2000030c
 800126c:	20000308 	.word	0x20000308
 8001270:	2000030d 	.word	0x2000030d
 8001274:	20000310 	.word	0x20000310

08001278 <stm32wb_at_Received>:
 * @brief Accumulate bytes received and detects a new frame received
 * @param byte the last byte received
 * @retval 0 in case of success, an error code otherwise
 */
uint8_t stm32wb_at_Received(uint8_t byte)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	4603      	mov	r3, r0
 8001280:	71fb      	strb	r3, [r7, #7]
  uint8_t status, i;

  if(buffer_rx_cursor < buffer_rx_size)
 8001282:	4b55      	ldr	r3, [pc, #340]	; (80013d8 <stm32wb_at_Received+0x160>)
 8001284:	781a      	ldrb	r2, [r3, #0]
 8001286:	4b55      	ldr	r3, [pc, #340]	; (80013dc <stm32wb_at_Received+0x164>)
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	429a      	cmp	r2, r3
 800128c:	f080 809c 	bcs.w	80013c8 <stm32wb_at_Received+0x150>
  {
    buffer_rx[buffer_rx_cursor] = byte;
 8001290:	4b53      	ldr	r3, [pc, #332]	; (80013e0 <stm32wb_at_Received+0x168>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a50      	ldr	r2, [pc, #320]	; (80013d8 <stm32wb_at_Received+0x160>)
 8001296:	7812      	ldrb	r2, [r2, #0]
 8001298:	4413      	add	r3, r2
 800129a:	79fa      	ldrb	r2, [r7, #7]
 800129c:	701a      	strb	r2, [r3, #0]
    buffer_rx_cursor++;
 800129e:	4b4e      	ldr	r3, [pc, #312]	; (80013d8 <stm32wb_at_Received+0x160>)
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	3301      	adds	r3, #1
 80012a4:	b2da      	uxtb	r2, r3
 80012a6:	4b4c      	ldr	r3, [pc, #304]	; (80013d8 <stm32wb_at_Received+0x160>)
 80012a8:	701a      	strb	r2, [r3, #0]

    /* check if we have received the command delimiter LF */
    if(byte == (uint8_t)'\n')
 80012aa:	79fb      	ldrb	r3, [r7, #7]
 80012ac:	2b0a      	cmp	r3, #10
 80012ae:	f040 8085 	bne.w	80013bc <stm32wb_at_Received+0x144>
    {
      /* remove CR if any */
      if(buffer_rx_cursor > 2U)
 80012b2:	4b49      	ldr	r3, [pc, #292]	; (80013d8 <stm32wb_at_Received+0x160>)
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	2b02      	cmp	r3, #2
 80012b8:	d91e      	bls.n	80012f8 <stm32wb_at_Received+0x80>
      {
        if( buffer_rx[buffer_rx_cursor - 2U] == (uint8_t)'\r')
 80012ba:	4b49      	ldr	r3, [pc, #292]	; (80013e0 <stm32wb_at_Received+0x168>)
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	4b46      	ldr	r3, [pc, #280]	; (80013d8 <stm32wb_at_Received+0x160>)
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	3b02      	subs	r3, #2
 80012c4:	4413      	add	r3, r2
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	2b0d      	cmp	r3, #13
 80012ca:	d115      	bne.n	80012f8 <stm32wb_at_Received+0x80>
        {
          buffer_rx[buffer_rx_cursor - 1U] = 0U;
 80012cc:	4b44      	ldr	r3, [pc, #272]	; (80013e0 <stm32wb_at_Received+0x168>)
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	4b41      	ldr	r3, [pc, #260]	; (80013d8 <stm32wb_at_Received+0x160>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	3b01      	subs	r3, #1
 80012d6:	4413      	add	r3, r2
 80012d8:	2200      	movs	r2, #0
 80012da:	701a      	strb	r2, [r3, #0]
          buffer_rx[buffer_rx_cursor - 2U] = (uint8_t)'\n';
 80012dc:	4b40      	ldr	r3, [pc, #256]	; (80013e0 <stm32wb_at_Received+0x168>)
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	4b3d      	ldr	r3, [pc, #244]	; (80013d8 <stm32wb_at_Received+0x160>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	3b02      	subs	r3, #2
 80012e6:	4413      	add	r3, r2
 80012e8:	220a      	movs	r2, #10
 80012ea:	701a      	strb	r2, [r3, #0]
          buffer_rx_cursor--;
 80012ec:	4b3a      	ldr	r3, [pc, #232]	; (80013d8 <stm32wb_at_Received+0x160>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	3b01      	subs	r3, #1
 80012f2:	b2da      	uxtb	r2, r3
 80012f4:	4b38      	ldr	r3, [pc, #224]	; (80013d8 <stm32wb_at_Received+0x160>)
 80012f6:	701a      	strb	r2, [r3, #0]
        }
      }
      /* remove the last \n */
      buffer_rx[buffer_rx_cursor - 1U] = 0U;
 80012f8:	4b39      	ldr	r3, [pc, #228]	; (80013e0 <stm32wb_at_Received+0x168>)
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	4b36      	ldr	r3, [pc, #216]	; (80013d8 <stm32wb_at_Received+0x160>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	3b01      	subs	r3, #1
 8001302:	4413      	add	r3, r2
 8001304:	2200      	movs	r2, #0
 8001306:	701a      	strb	r2, [r3, #0]
      buffer_rx_cursor--;
 8001308:	4b33      	ldr	r3, [pc, #204]	; (80013d8 <stm32wb_at_Received+0x160>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	3b01      	subs	r3, #1
 800130e:	b2da      	uxtb	r2, r3
 8001310:	4b31      	ldr	r3, [pc, #196]	; (80013d8 <stm32wb_at_Received+0x160>)
 8001312:	701a      	strb	r2, [r3, #0]

      /* remove null leading character if any*/
      if( buffer_rx[0] == 0U)
 8001314:	4b32      	ldr	r3, [pc, #200]	; (80013e0 <stm32wb_at_Received+0x168>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d11e      	bne.n	800135c <stm32wb_at_Received+0xe4>
      {
        i = 1U;
 800131e:	2301      	movs	r3, #1
 8001320:	73bb      	strb	r3, [r7, #14]
        while(buffer_rx[i] != 0U)
 8001322:	e00d      	b.n	8001340 <stm32wb_at_Received+0xc8>
        {
          buffer_rx[i - 1U] = buffer_rx[i];
 8001324:	4b2e      	ldr	r3, [pc, #184]	; (80013e0 <stm32wb_at_Received+0x168>)
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	7bbb      	ldrb	r3, [r7, #14]
 800132a:	441a      	add	r2, r3
 800132c:	4b2c      	ldr	r3, [pc, #176]	; (80013e0 <stm32wb_at_Received+0x168>)
 800132e:	6819      	ldr	r1, [r3, #0]
 8001330:	7bbb      	ldrb	r3, [r7, #14]
 8001332:	3b01      	subs	r3, #1
 8001334:	440b      	add	r3, r1
 8001336:	7812      	ldrb	r2, [r2, #0]
 8001338:	701a      	strb	r2, [r3, #0]
          i++;
 800133a:	7bbb      	ldrb	r3, [r7, #14]
 800133c:	3301      	adds	r3, #1
 800133e:	73bb      	strb	r3, [r7, #14]
        while(buffer_rx[i] != 0U)
 8001340:	4b27      	ldr	r3, [pc, #156]	; (80013e0 <stm32wb_at_Received+0x168>)
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	7bbb      	ldrb	r3, [r7, #14]
 8001346:	4413      	add	r3, r2
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d1ea      	bne.n	8001324 <stm32wb_at_Received+0xac>
        }
        buffer_rx[i - 1U] = 0U;
 800134e:	4b24      	ldr	r3, [pc, #144]	; (80013e0 <stm32wb_at_Received+0x168>)
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	7bbb      	ldrb	r3, [r7, #14]
 8001354:	3b01      	subs	r3, #1
 8001356:	4413      	add	r3, r2
 8001358:	2200      	movs	r2, #0
 800135a:	701a      	strb	r2, [r3, #0]
      }


      /* check if command is long enough */
      if(buffer_rx_cursor > 1U)
 800135c:	4b1e      	ldr	r3, [pc, #120]	; (80013d8 <stm32wb_at_Received+0x160>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	2b01      	cmp	r3, #1
 8001362:	d91c      	bls.n	800139e <stm32wb_at_Received+0x126>
      {
        (void)strcpy(&str_received[0], (char*)&buffer_rx[0]);
 8001364:	4b1e      	ldr	r3, [pc, #120]	; (80013e0 <stm32wb_at_Received+0x168>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4619      	mov	r1, r3
 800136a:	481e      	ldr	r0, [pc, #120]	; (80013e4 <stm32wb_at_Received+0x16c>)
 800136c:	f00a fdd6 	bl	800bf1c <strcpy>

        stm32wb_at_ll_Async_receive((uint8_t)sizeof(str_received));
 8001370:	2040      	movs	r0, #64	; 0x40
 8001372:	f009 f923 	bl	800a5bc <stm32wb_at_ll_Async_receive>

        (void)memset(&buffer_rx[0], 0, buffer_rx_size);
 8001376:	4b1a      	ldr	r3, [pc, #104]	; (80013e0 <stm32wb_at_Received+0x168>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a18      	ldr	r2, [pc, #96]	; (80013dc <stm32wb_at_Received+0x164>)
 800137c:	7812      	ldrb	r2, [r2, #0]
 800137e:	2100      	movs	r1, #0
 8001380:	4618      	mov	r0, r3
 8001382:	f00a fd89 	bl	800be98 <memset>
        buffer_rx_cursor = 0U;
 8001386:	4b14      	ldr	r3, [pc, #80]	; (80013d8 <stm32wb_at_Received+0x160>)
 8001388:	2200      	movs	r2, #0
 800138a:	701a      	strb	r2, [r3, #0]

        (void)stm32wb_at_Process_rx_frame(str_received);
 800138c:	4815      	ldr	r0, [pc, #84]	; (80013e4 <stm32wb_at_Received+0x16c>)
 800138e:	f000 f8ed 	bl	800156c <stm32wb_at_Process_rx_frame>
        (void)memset(&str_received[0], 0, sizeof(str_received));
 8001392:	2240      	movs	r2, #64	; 0x40
 8001394:	2100      	movs	r1, #0
 8001396:	4813      	ldr	r0, [pc, #76]	; (80013e4 <stm32wb_at_Received+0x16c>)
 8001398:	f00a fd7e 	bl	800be98 <memset>
 800139c:	e011      	b.n	80013c2 <stm32wb_at_Received+0x14a>
      }
      else
      {
        (void)memset(&buffer_rx[0], 0, buffer_rx_size);
 800139e:	4b10      	ldr	r3, [pc, #64]	; (80013e0 <stm32wb_at_Received+0x168>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a0e      	ldr	r2, [pc, #56]	; (80013dc <stm32wb_at_Received+0x164>)
 80013a4:	7812      	ldrb	r2, [r2, #0]
 80013a6:	2100      	movs	r1, #0
 80013a8:	4618      	mov	r0, r3
 80013aa:	f00a fd75 	bl	800be98 <memset>
        buffer_rx_cursor = 0U;
 80013ae:	4b0a      	ldr	r3, [pc, #40]	; (80013d8 <stm32wb_at_Received+0x160>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	701a      	strb	r2, [r3, #0]
        
        stm32wb_at_ll_Async_receive(0);
 80013b4:	2000      	movs	r0, #0
 80013b6:	f009 f901 	bl	800a5bc <stm32wb_at_ll_Async_receive>
 80013ba:	e002      	b.n	80013c2 <stm32wb_at_Received+0x14a>
      }
    }
    else
    {
      stm32wb_at_ll_Async_receive(0);
 80013bc:	2000      	movs	r0, #0
 80013be:	f009 f8fd 	bl	800a5bc <stm32wb_at_ll_Async_receive>
    }
    status = 0U;
 80013c2:	2300      	movs	r3, #0
 80013c4:	73fb      	strb	r3, [r7, #15]
 80013c6:	e001      	b.n	80013cc <stm32wb_at_Received+0x154>
  }
  else
  {
    status = 1U;
 80013c8:	2301      	movs	r3, #1
 80013ca:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80013cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3710      	adds	r7, #16
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	2000030d 	.word	0x2000030d
 80013dc:	2000030c 	.word	0x2000030c
 80013e0:	20000308 	.word	0x20000308
 80013e4:	20000310 	.word	0x20000310

080013e8 <str_to_byte_tab>:
 * @param uint8_t *tab d    pointer to hold data output.
 * @param uint8_t* tab_len  provide the tab size and will hold size of tab converted.
 * @retval 0 in case of success, an error code otherwise
 */
uint8_t str_to_byte_tab(char *str_in, uint8_t *tab, uint8_t* tab_len)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b088      	sub	sp, #32
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	60f8      	str	r0, [r7, #12]
 80013f0:	60b9      	str	r1, [r7, #8]
 80013f2:	607a      	str	r2, [r7, #4]
  uint8_t status = 0;
 80013f4:	2300      	movs	r3, #0
 80013f6:	77fb      	strb	r3, [r7, #31]
  uint16_t tab_limit, cpt, val;
  char *str_p;
  
  str_p = str_in;
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	617b      	str	r3, [r7, #20]
  
  if( strncmp(str_p, "0x", 2) == 0 )
 80013fc:	2202      	movs	r2, #2
 80013fe:	495a      	ldr	r1, [pc, #360]	; (8001568 <str_to_byte_tab+0x180>)
 8001400:	6978      	ldr	r0, [r7, #20]
 8001402:	f00a fcda 	bl	800bdba <strncmp>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	f040 80a6 	bne.w	800155a <str_to_byte_tab+0x172>
  {
    cpt = 0;
 800140e:	2300      	movs	r3, #0
 8001410:	83bb      	strh	r3, [r7, #28]
    tab_limit = *tab_len;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	827b      	strh	r3, [r7, #18]
    *tab_len = 0;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2200      	movs	r2, #0
 800141c:	701a      	strb	r2, [r3, #0]
    str_p++;
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	3301      	adds	r3, #1
 8001422:	617b      	str	r3, [r7, #20]
    str_p++;
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	3301      	adds	r3, #1
 8001428:	617b      	str	r3, [r7, #20]
    
    (void)memset(tab, 0, tab_limit);
 800142a:	8a7b      	ldrh	r3, [r7, #18]
 800142c:	461a      	mov	r2, r3
 800142e:	2100      	movs	r1, #0
 8001430:	68b8      	ldr	r0, [r7, #8]
 8001432:	f00a fd31 	bl	800be98 <memset>
    
    do
    {
      if(*str_p == ' ')
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	2b20      	cmp	r3, #32
 800143c:	d103      	bne.n	8001446 <str_to_byte_tab+0x5e>
      {
        str_p++;
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	3301      	adds	r3, #1
 8001442:	617b      	str	r3, [r7, #20]
        continue;
 8001444:	e075      	b.n	8001532 <str_to_byte_tab+0x14a>
      }
      else if( (*str_p >= '0') &&  (*str_p <= '9') )
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	2b2f      	cmp	r3, #47	; 0x2f
 800144c:	d909      	bls.n	8001462 <str_to_byte_tab+0x7a>
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	2b39      	cmp	r3, #57	; 0x39
 8001454:	d805      	bhi.n	8001462 <str_to_byte_tab+0x7a>
      {
        val = (uint16_t)(*str_p - '0');
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	b29b      	uxth	r3, r3
 800145c:	3b30      	subs	r3, #48	; 0x30
 800145e:	837b      	strh	r3, [r7, #26]
 8001460:	e034      	b.n	80014cc <str_to_byte_tab+0xe4>
      }
      else if( (*str_p >= 'a') &&  (*str_p <= 'f') )
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	2b60      	cmp	r3, #96	; 0x60
 8001468:	d909      	bls.n	800147e <str_to_byte_tab+0x96>
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	2b66      	cmp	r3, #102	; 0x66
 8001470:	d805      	bhi.n	800147e <str_to_byte_tab+0x96>
      {
        val = (uint16_t)(*str_p - 'a' + 10);
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	b29b      	uxth	r3, r3
 8001478:	3b57      	subs	r3, #87	; 0x57
 800147a:	837b      	strh	r3, [r7, #26]
 800147c:	e026      	b.n	80014cc <str_to_byte_tab+0xe4>
      }
      else if( (*str_p >= 'A') &&  (*str_p <= 'F') )
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	2b40      	cmp	r3, #64	; 0x40
 8001484:	d909      	bls.n	800149a <str_to_byte_tab+0xb2>
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	2b46      	cmp	r3, #70	; 0x46
 800148c:	d805      	bhi.n	800149a <str_to_byte_tab+0xb2>
      {
        val = (uint16_t)(*str_p - 'A' + 10);
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	b29b      	uxth	r3, r3
 8001494:	3b37      	subs	r3, #55	; 0x37
 8001496:	837b      	strh	r3, [r7, #26]
 8001498:	e018      	b.n	80014cc <str_to_byte_tab+0xe4>
      }
      else
      {
        if( (cpt % 2U) != 0)
 800149a:	8bbb      	ldrh	r3, [r7, #28]
 800149c:	f003 0301 	and.w	r3, r3, #1
 80014a0:	b29b      	uxth	r3, r3
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d00f      	beq.n	80014c6 <str_to_byte_tab+0xde>
        {
          tab[cpt >> 1U] /= 16U;
 80014a6:	8bbb      	ldrh	r3, [r7, #28]
 80014a8:	085b      	lsrs	r3, r3, #1
 80014aa:	b29b      	uxth	r3, r3
 80014ac:	461a      	mov	r2, r3
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	4413      	add	r3, r2
 80014b2:	781a      	ldrb	r2, [r3, #0]
 80014b4:	8bbb      	ldrh	r3, [r7, #28]
 80014b6:	085b      	lsrs	r3, r3, #1
 80014b8:	b29b      	uxth	r3, r3
 80014ba:	4619      	mov	r1, r3
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	440b      	add	r3, r1
 80014c0:	0912      	lsrs	r2, r2, #4
 80014c2:	b2d2      	uxtb	r2, r2
 80014c4:	701a      	strb	r2, [r3, #0]
        }
        status = 0;
 80014c6:	2300      	movs	r3, #0
 80014c8:	77fb      	strb	r3, [r7, #31]
        break;
 80014ca:	e038      	b.n	800153e <str_to_byte_tab+0x156>
      }
      
      if( (cpt % 2U) == 0U)
 80014cc:	8bbb      	ldrh	r3, [r7, #28]
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	b29b      	uxth	r3, r3
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d114      	bne.n	8001502 <str_to_byte_tab+0x11a>
      {
        tab[cpt >> 1] += (uint8_t)(val * 16U);
 80014d8:	8bbb      	ldrh	r3, [r7, #28]
 80014da:	085b      	lsrs	r3, r3, #1
 80014dc:	b29b      	uxth	r3, r3
 80014de:	461a      	mov	r2, r3
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	4413      	add	r3, r2
 80014e4:	7819      	ldrb	r1, [r3, #0]
 80014e6:	8b7b      	ldrh	r3, [r7, #26]
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	011b      	lsls	r3, r3, #4
 80014ec:	b2da      	uxtb	r2, r3
 80014ee:	8bbb      	ldrh	r3, [r7, #28]
 80014f0:	085b      	lsrs	r3, r3, #1
 80014f2:	b29b      	uxth	r3, r3
 80014f4:	4618      	mov	r0, r3
 80014f6:	68bb      	ldr	r3, [r7, #8]
 80014f8:	4403      	add	r3, r0
 80014fa:	440a      	add	r2, r1
 80014fc:	b2d2      	uxtb	r2, r2
 80014fe:	701a      	strb	r2, [r3, #0]
 8001500:	e011      	b.n	8001526 <str_to_byte_tab+0x13e>
      }
      else
      {
        tab[cpt >> 1] += (uint8_t)val;
 8001502:	8bbb      	ldrh	r3, [r7, #28]
 8001504:	085b      	lsrs	r3, r3, #1
 8001506:	b29b      	uxth	r3, r3
 8001508:	461a      	mov	r2, r3
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	4413      	add	r3, r2
 800150e:	7819      	ldrb	r1, [r3, #0]
 8001510:	8b7b      	ldrh	r3, [r7, #26]
 8001512:	b2da      	uxtb	r2, r3
 8001514:	8bbb      	ldrh	r3, [r7, #28]
 8001516:	085b      	lsrs	r3, r3, #1
 8001518:	b29b      	uxth	r3, r3
 800151a:	4618      	mov	r0, r3
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	4403      	add	r3, r0
 8001520:	440a      	add	r2, r1
 8001522:	b2d2      	uxtb	r2, r2
 8001524:	701a      	strb	r2, [r3, #0]
      }
      cpt++;
 8001526:	8bbb      	ldrh	r3, [r7, #28]
 8001528:	3301      	adds	r3, #1
 800152a:	83bb      	strh	r3, [r7, #28]
      str_p++;
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	3301      	adds	r3, #1
 8001530:	617b      	str	r3, [r7, #20]
    }while( cpt < (tab_limit * 2) );
 8001532:	8bba      	ldrh	r2, [r7, #28]
 8001534:	8a7b      	ldrh	r3, [r7, #18]
 8001536:	005b      	lsls	r3, r3, #1
 8001538:	429a      	cmp	r2, r3
 800153a:	f6ff af7c 	blt.w	8001436 <str_to_byte_tab+0x4e>
    
    if(cpt == 1U)
 800153e:	8bbb      	ldrh	r3, [r7, #28]
 8001540:	2b01      	cmp	r3, #1
 8001542:	d103      	bne.n	800154c <str_to_byte_tab+0x164>
    {
      *tab_len = 1;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2201      	movs	r2, #1
 8001548:	701a      	strb	r2, [r3, #0]
 800154a:	e008      	b.n	800155e <str_to_byte_tab+0x176>
    }
    else
    {
      *tab_len = (uint8_t)(cpt >> 1);
 800154c:	8bbb      	ldrh	r3, [r7, #28]
 800154e:	085b      	lsrs	r3, r3, #1
 8001550:	b29b      	uxth	r3, r3
 8001552:	b2da      	uxtb	r2, r3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	701a      	strb	r2, [r3, #0]
 8001558:	e001      	b.n	800155e <str_to_byte_tab+0x176>
    }
  }
  else
  {
    status = 1;
 800155a:	2301      	movs	r3, #1
 800155c:	77fb      	strb	r3, [r7, #31]
  }

  return status;
 800155e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001560:	4618      	mov	r0, r3
 8001562:	3720      	adds	r7, #32
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	0800e0b8 	.word	0x0800e0b8

0800156c <stm32wb_at_Process_rx_frame>:
 * @brief Process a frame received
 * @param str pointer string to process
 * @retval 0 in case of success, an error code otherwise
 */
__weak uint8_t stm32wb_at_Process_rx_frame(char * str)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  (void)stm32wb_at_client_Process_rx_frame(str);
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f000 f95f 	bl	8001838 <stm32wb_at_client_Process_rx_frame>

  return 0;
 800157a:	2300      	movs	r3, #0
}
 800157c:	4618      	mov	r0, r3
 800157e:	3708      	adds	r7, #8
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}

08001584 <stm32wb_at_BLE_INIT_cb>:
const char *AT_BLE_EVT_STRING[] = {
  FOREACH_AT_BLE_EVT(GENERATE_STRING)
};

/* Exported functions --------------------------------------------------------*/
FOREACH_AT_BLE_CMD(GENERATE_AT_BLE_CB_FUNC)
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	2301      	movs	r3, #1
 800158e:	4618      	mov	r0, r3
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr

0800159a <stm32wb_at_BLE_ADV_PARAM_cb>:
 800159a:	b480      	push	{r7}
 800159c:	b083      	sub	sp, #12
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
 80015a2:	2301      	movs	r3, #1
 80015a4:	4618      	mov	r0, r3
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <stm32wb_at_BLE_ADV_cb>:
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	2301      	movs	r3, #1
 80015ba:	4618      	mov	r0, r3
 80015bc:	370c      	adds	r7, #12
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr

080015c6 <stm32wb_at_BLE_CHAR_ADD_cb>:
 80015c6:	b480      	push	{r7}
 80015c8:	b083      	sub	sp, #12
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
 80015ce:	2301      	movs	r3, #1
 80015d0:	4618      	mov	r0, r3
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr

080015dc <stm32wb_at_BLE_PERIPH_SEC_REQ_cb>:
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	2301      	movs	r3, #1
 80015e6:	4618      	mov	r0, r3
 80015e8:	370c      	adds	r7, #12
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr

080015f2 <stm32wb_at_BLE_PAIRING_CONFIRM_cb>:
 80015f2:	b480      	push	{r7}
 80015f4:	b083      	sub	sp, #12
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	6078      	str	r0, [r7, #4]
 80015fa:	2301      	movs	r3, #1
 80015fc:	4618      	mov	r0, r3
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <stm32wb_at_BLE_PASSKEY_RESP_cb>:
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	2301      	movs	r3, #1
 8001612:	4618      	mov	r0, r3
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr

0800161e <stm32wb_at_BLE_IO_CAPA_cb>:
 800161e:	b480      	push	{r7}
 8001620:	b083      	sub	sp, #12
 8001622:	af00      	add	r7, sp, #0
 8001624:	6078      	str	r0, [r7, #4]
 8001626:	2301      	movs	r3, #1
 8001628:	4618      	mov	r0, r3
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr

08001634 <stm32wb_at_BLE_SET_AUTHEN_REQ_cb>:
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	2301      	movs	r3, #1
 800163e:	4618      	mov	r0, r3
 8001640:	370c      	adds	r7, #12
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr

0800164a <stm32wb_at_BLE_CLEAR_DB_cb>:
 800164a:	b480      	push	{r7}
 800164c:	b083      	sub	sp, #12
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
 8001652:	2301      	movs	r3, #1
 8001654:	4618      	mov	r0, r3
 8001656:	370c      	adds	r7, #12
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr

08001660 <stm32wb_at_BLE_RST_cb>:
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	2301      	movs	r3, #1
 800166a:	4618      	mov	r0, r3
 800166c:	370c      	adds	r7, #12
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr

08001676 <stm32wb_at_BLE_PUB_ADDR_cb>:
 8001676:	b480      	push	{r7}
 8001678:	b083      	sub	sp, #12
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]
 800167e:	2301      	movs	r3, #1
 8001680:	4618      	mov	r0, r3
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr

0800168c <stm32wb_at_BLE_RAND_ADDR_cb>:
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	2301      	movs	r3, #1
 8001696:	4618      	mov	r0, r3
 8001698:	370c      	adds	r7, #12
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr

080016a2 <stm32wb_at_BLE_NAME_cb>:
 80016a2:	b480      	push	{r7}
 80016a4:	b083      	sub	sp, #12
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]
 80016aa:	2301      	movs	r3, #1
 80016ac:	4618      	mov	r0, r3
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <stm32wb_at_BLE_RF_POWER_cb>:
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	2301      	movs	r3, #1
 80016c2:	4618      	mov	r0, r3
 80016c4:	370c      	adds	r7, #12
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr

080016ce <stm32wb_at_BLE_CONN_INT_cb>:
 80016ce:	b480      	push	{r7}
 80016d0:	b083      	sub	sp, #12
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]
 80016d6:	2301      	movs	r3, #1
 80016d8:	4618      	mov	r0, r3
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <stm32wb_at_BLE_EVT_UPD_CONN_cb>:
FOREACH_AT_BLE_EVT(GENERATE_AT_BLE_EVT_CB_FUNC)
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	2301      	movs	r3, #1
 80016ee:	4618      	mov	r0, r3
 80016f0:	370c      	adds	r7, #12
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr

080016fa <stm32wb_at_BLE_EVT_VALUE_CONFIRM_cb>:
 80016fa:	b480      	push	{r7}
 80016fc:	b083      	sub	sp, #12
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
 8001702:	2301      	movs	r3, #1
 8001704:	4618      	mov	r0, r3
 8001706:	370c      	adds	r7, #12
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr

08001710 <stm32wb_at_client_Init>:
 * @brief Init the at client
 * @param None
 * @retval 0 in case of success, an error code otherwise
 */
uint8_t stm32wb_at_client_Init(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  (void)memset(&client_buff_tx[0], 0, sizeof(client_buff_tx));
 8001714:	2240      	movs	r2, #64	; 0x40
 8001716:	2100      	movs	r1, #0
 8001718:	4804      	ldr	r0, [pc, #16]	; (800172c <stm32wb_at_client_Init+0x1c>)
 800171a:	f00a fbbd 	bl	800be98 <memset>
  client_current_cmd =  BLE_NONE;
 800171e:	4b04      	ldr	r3, [pc, #16]	; (8001730 <stm32wb_at_client_Init+0x20>)
 8001720:	2215      	movs	r2, #21
 8001722:	701a      	strb	r2, [r3, #0]

  return 0;
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	20000350 	.word	0x20000350
 8001730:	20000390 	.word	0x20000390

08001734 <stm32wb_at_client_Query>:
 * @brief Query the server on a specified command
 * @param cmd code to query
 * @retval 0 in case of success, an error code otherwise
 */
uint8_t stm32wb_at_client_Query(stm32wb_at_BLE_CMD_t cmd)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	4603      	mov	r3, r0
 800173c:	71fb      	strb	r3, [r7, #7]
  uint8_t status;

  (void)stm32wb_at_client_Wait_ready();
 800173e:	f002 f8e7 	bl	8003910 <stm32wb_at_client_Wait_ready>

  if(cmd == BLE_TEST)
 8001742:	79fb      	ldrb	r3, [r7, #7]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d127      	bne.n	8001798 <stm32wb_at_client_Query+0x64>
  {
    (void)strcpy(client_buff_tx, AT_CMD_TEST);
 8001748:	4b34      	ldr	r3, [pc, #208]	; (800181c <stm32wb_at_client_Query+0xe8>)
 800174a:	4a35      	ldr	r2, [pc, #212]	; (8001820 <stm32wb_at_client_Query+0xec>)
 800174c:	6812      	ldr	r2, [r2, #0]
 800174e:	4611      	mov	r1, r2
 8001750:	8019      	strh	r1, [r3, #0]
 8001752:	3302      	adds	r3, #2
 8001754:	0c12      	lsrs	r2, r2, #16
 8001756:	701a      	strb	r2, [r3, #0]
    (void)strcat(client_buff_tx, AT_EOL);
 8001758:	4830      	ldr	r0, [pc, #192]	; (800181c <stm32wb_at_client_Query+0xe8>)
 800175a:	f7fe fd8d 	bl	8000278 <strlen>
 800175e:	4603      	mov	r3, r0
 8001760:	461a      	mov	r2, r3
 8001762:	4b2e      	ldr	r3, [pc, #184]	; (800181c <stm32wb_at_client_Query+0xe8>)
 8001764:	4413      	add	r3, r2
 8001766:	4a2f      	ldr	r2, [pc, #188]	; (8001824 <stm32wb_at_client_Query+0xf0>)
 8001768:	8811      	ldrh	r1, [r2, #0]
 800176a:	7892      	ldrb	r2, [r2, #2]
 800176c:	8019      	strh	r1, [r3, #0]
 800176e:	709a      	strb	r2, [r3, #2]

    client_current_cmd = cmd;
 8001770:	4a2d      	ldr	r2, [pc, #180]	; (8001828 <stm32wb_at_client_Query+0xf4>)
 8001772:	79fb      	ldrb	r3, [r7, #7]
 8001774:	7013      	strb	r3, [r2, #0]
    status = stm32wb_at_ll_Transmit((uint8_t *)&client_buff_tx[0], (uint16_t)strlen(client_buff_tx));
 8001776:	4829      	ldr	r0, [pc, #164]	; (800181c <stm32wb_at_client_Query+0xe8>)
 8001778:	f7fe fd7e 	bl	8000278 <strlen>
 800177c:	4603      	mov	r3, r0
 800177e:	b29b      	uxth	r3, r3
 8001780:	4619      	mov	r1, r3
 8001782:	4826      	ldr	r0, [pc, #152]	; (800181c <stm32wb_at_client_Query+0xe8>)
 8001784:	f008 fefe 	bl	800a584 <stm32wb_at_ll_Transmit>
 8001788:	4603      	mov	r3, r0
 800178a:	73fb      	strb	r3, [r7, #15]
    (void)memset(&client_buff_tx[0], 0, sizeof(client_buff_tx));
 800178c:	2240      	movs	r2, #64	; 0x40
 800178e:	2100      	movs	r1, #0
 8001790:	4822      	ldr	r0, [pc, #136]	; (800181c <stm32wb_at_client_Query+0xe8>)
 8001792:	f00a fb81 	bl	800be98 <memset>
 8001796:	e03b      	b.n	8001810 <stm32wb_at_client_Query+0xdc>
  }
  else if(cmd < BLE_NONE)
 8001798:	79fb      	ldrb	r3, [r7, #7]
 800179a:	2b14      	cmp	r3, #20
 800179c:	d836      	bhi.n	800180c <stm32wb_at_client_Query+0xd8>
  {
    (void)strcpy(client_buff_tx, AT_PRE_CMD);
 800179e:	4b1f      	ldr	r3, [pc, #124]	; (800181c <stm32wb_at_client_Query+0xe8>)
 80017a0:	4a22      	ldr	r2, [pc, #136]	; (800182c <stm32wb_at_client_Query+0xf8>)
 80017a2:	601a      	str	r2, [r3, #0]
    (void)strcat(client_buff_tx, AT_BLE_CMD_STRING[cmd]);
 80017a4:	79fb      	ldrb	r3, [r7, #7]
 80017a6:	4a22      	ldr	r2, [pc, #136]	; (8001830 <stm32wb_at_client_Query+0xfc>)
 80017a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017ac:	4619      	mov	r1, r3
 80017ae:	481b      	ldr	r0, [pc, #108]	; (800181c <stm32wb_at_client_Query+0xe8>)
 80017b0:	f00a faf4 	bl	800bd9c <strcat>
    (void)strcat(client_buff_tx, AT_GET);
 80017b4:	4819      	ldr	r0, [pc, #100]	; (800181c <stm32wb_at_client_Query+0xe8>)
 80017b6:	f7fe fd5f 	bl	8000278 <strlen>
 80017ba:	4603      	mov	r3, r0
 80017bc:	461a      	mov	r2, r3
 80017be:	4b17      	ldr	r3, [pc, #92]	; (800181c <stm32wb_at_client_Query+0xe8>)
 80017c0:	4413      	add	r3, r2
 80017c2:	491c      	ldr	r1, [pc, #112]	; (8001834 <stm32wb_at_client_Query+0x100>)
 80017c4:	461a      	mov	r2, r3
 80017c6:	460b      	mov	r3, r1
 80017c8:	881b      	ldrh	r3, [r3, #0]
 80017ca:	8013      	strh	r3, [r2, #0]
    (void)strcat(client_buff_tx, AT_EOL);
 80017cc:	4813      	ldr	r0, [pc, #76]	; (800181c <stm32wb_at_client_Query+0xe8>)
 80017ce:	f7fe fd53 	bl	8000278 <strlen>
 80017d2:	4603      	mov	r3, r0
 80017d4:	461a      	mov	r2, r3
 80017d6:	4b11      	ldr	r3, [pc, #68]	; (800181c <stm32wb_at_client_Query+0xe8>)
 80017d8:	4413      	add	r3, r2
 80017da:	4a12      	ldr	r2, [pc, #72]	; (8001824 <stm32wb_at_client_Query+0xf0>)
 80017dc:	8811      	ldrh	r1, [r2, #0]
 80017de:	7892      	ldrb	r2, [r2, #2]
 80017e0:	8019      	strh	r1, [r3, #0]
 80017e2:	709a      	strb	r2, [r3, #2]

    client_current_cmd = cmd;
 80017e4:	4a10      	ldr	r2, [pc, #64]	; (8001828 <stm32wb_at_client_Query+0xf4>)
 80017e6:	79fb      	ldrb	r3, [r7, #7]
 80017e8:	7013      	strb	r3, [r2, #0]
    status = stm32wb_at_ll_Transmit((uint8_t *)&client_buff_tx[0], (uint16_t)strlen(client_buff_tx));
 80017ea:	480c      	ldr	r0, [pc, #48]	; (800181c <stm32wb_at_client_Query+0xe8>)
 80017ec:	f7fe fd44 	bl	8000278 <strlen>
 80017f0:	4603      	mov	r3, r0
 80017f2:	b29b      	uxth	r3, r3
 80017f4:	4619      	mov	r1, r3
 80017f6:	4809      	ldr	r0, [pc, #36]	; (800181c <stm32wb_at_client_Query+0xe8>)
 80017f8:	f008 fec4 	bl	800a584 <stm32wb_at_ll_Transmit>
 80017fc:	4603      	mov	r3, r0
 80017fe:	73fb      	strb	r3, [r7, #15]
    (void)memset(&client_buff_tx[0], 0, sizeof(client_buff_tx));
 8001800:	2240      	movs	r2, #64	; 0x40
 8001802:	2100      	movs	r1, #0
 8001804:	4805      	ldr	r0, [pc, #20]	; (800181c <stm32wb_at_client_Query+0xe8>)
 8001806:	f00a fb47 	bl	800be98 <memset>
 800180a:	e001      	b.n	8001810 <stm32wb_at_client_Query+0xdc>
  }
  else
  {
    status = 1;
 800180c:	2301      	movs	r3, #1
 800180e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8001810:	7bfb      	ldrb	r3, [r7, #15]
}
 8001812:	4618      	mov	r0, r3
 8001814:	3710      	adds	r7, #16
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	20000350 	.word	0x20000350
 8001820:	0800e284 	.word	0x0800e284
 8001824:	0800e288 	.word	0x0800e288
 8001828:	20000390 	.word	0x20000390
 800182c:	002b5441 	.word	0x002b5441
 8001830:	20000094 	.word	0x20000094
 8001834:	0800e28c 	.word	0x0800e28c

08001838 <stm32wb_at_client_Process_rx_frame>:
 * @brief Process an At string and perform required actions
 * @param str pointer to the string to process
 * @retval 0 in case of success, an error code otherwise
 */
uint8_t stm32wb_at_client_Process_rx_frame(char * str)
{
 8001838:	b590      	push	{r4, r7, lr}
 800183a:	b0ff      	sub	sp, #508	; 0x1fc
 800183c:	af00      	add	r7, sp, #0
 800183e:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8001842:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8001846:	6018      	str	r0, [r3, #0]
  uint8_t status;  
  uint32_t current_evt;
  char *str_local;

  status = 1;
 8001848:	2301      	movs	r3, #1
 800184a:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
  str_local = str;
 800184e:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8001852:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec

  if( strcmp(str_local, AT_CMD_STATUS_OK) == 0)
 800185c:	49c6      	ldr	r1, [pc, #792]	; (8001b78 <stm32wb_at_client_Process_rx_frame+0x340>)
 800185e:	f8d7 01ec 	ldr.w	r0, [r7, #492]	; 0x1ec
 8001862:	f7fe fd11 	bl	8000288 <strcmp>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d107      	bne.n	800187c <stm32wb_at_client_Process_rx_frame+0x44>
  {
    client_current_cmd = BLE_NONE;
 800186c:	4bc3      	ldr	r3, [pc, #780]	; (8001b7c <stm32wb_at_client_Process_rx_frame+0x344>)
 800186e:	2215      	movs	r2, #21
 8001870:	701a      	strb	r2, [r3, #0]
    status = 0;
 8001872:	2300      	movs	r3, #0
 8001874:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
 8001878:	f001 bbae 	b.w	8002fd8 <stm32wb_at_client_Process_rx_frame+0x17a0>
  }
  else if( strcmp(str_local, AT_CMD_STATUS_ERROR) == 0)
 800187c:	49c0      	ldr	r1, [pc, #768]	; (8001b80 <stm32wb_at_client_Process_rx_frame+0x348>)
 800187e:	f8d7 01ec 	ldr.w	r0, [r7, #492]	; 0x1ec
 8001882:	f7fe fd01 	bl	8000288 <strcmp>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d107      	bne.n	800189c <stm32wb_at_client_Process_rx_frame+0x64>
  {
    client_current_cmd = BLE_NONE;
 800188c:	4bbb      	ldr	r3, [pc, #748]	; (8001b7c <stm32wb_at_client_Process_rx_frame+0x344>)
 800188e:	2215      	movs	r2, #21
 8001890:	701a      	strb	r2, [r3, #0]
    status = 0;
 8001892:	2300      	movs	r3, #0
 8001894:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
 8001898:	f001 bb9e 	b.w	8002fd8 <stm32wb_at_client_Process_rx_frame+0x17a0>
  }
  else if( strncmp(str_local, AT_REPLY, strlen(AT_REPLY)) == 0)
 800189c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80018a0:	781a      	ldrb	r2, [r3, #0]
 80018a2:	4bb8      	ldr	r3, [pc, #736]	; (8001b84 <stm32wb_at_client_Process_rx_frame+0x34c>)
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	f041 812e 	bne.w	8002b0a <stm32wb_at_client_Process_rx_frame+0x12d2>
  {
    str_local++;
 80018ae:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80018b2:	3301      	adds	r3, #1
 80018b4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    /* check if it's a response of current command */
    if( strncmp(str_local, AT_BLE_CMD_STRING[client_current_cmd], strlen(AT_BLE_CMD_STRING[client_current_cmd])) == 0)
 80018b8:	4bb0      	ldr	r3, [pc, #704]	; (8001b7c <stm32wb_at_client_Process_rx_frame+0x344>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	461a      	mov	r2, r3
 80018be:	4bb2      	ldr	r3, [pc, #712]	; (8001b88 <stm32wb_at_client_Process_rx_frame+0x350>)
 80018c0:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 80018c4:	4bad      	ldr	r3, [pc, #692]	; (8001b7c <stm32wb_at_client_Process_rx_frame+0x344>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	461a      	mov	r2, r3
 80018ca:	4baf      	ldr	r3, [pc, #700]	; (8001b88 <stm32wb_at_client_Process_rx_frame+0x350>)
 80018cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7fe fcd1 	bl	8000278 <strlen>
 80018d6:	4603      	mov	r3, r0
 80018d8:	461a      	mov	r2, r3
 80018da:	4621      	mov	r1, r4
 80018dc:	f8d7 01ec 	ldr.w	r0, [r7, #492]	; 0x1ec
 80018e0:	f00a fa6b 	bl	800bdba <strncmp>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	f041 8376 	bne.w	8002fd8 <stm32wb_at_client_Process_rx_frame+0x17a0>
    {
      str_local += strlen(AT_BLE_CMD_STRING[client_current_cmd]);
 80018ec:	4ba3      	ldr	r3, [pc, #652]	; (8001b7c <stm32wb_at_client_Process_rx_frame+0x344>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	461a      	mov	r2, r3
 80018f2:	4ba5      	ldr	r3, [pc, #660]	; (8001b88 <stm32wb_at_client_Process_rx_frame+0x350>)
 80018f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7fe fcbd 	bl	8000278 <strlen>
 80018fe:	4602      	mov	r2, r0
 8001900:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001904:	4413      	add	r3, r2
 8001906:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec

      if( strncmp(str_local, AT_READ, strlen(AT_READ)) == 0)
 800190a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800190e:	781a      	ldrb	r2, [r3, #0]
 8001910:	4b9e      	ldr	r3, [pc, #632]	; (8001b8c <stm32wb_at_client_Process_rx_frame+0x354>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	2b00      	cmp	r3, #0
 8001918:	f041 835e 	bne.w	8002fd8 <stm32wb_at_client_Process_rx_frame+0x17a0>
      {
        str_local++;
 800191c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001920:	3301      	adds	r3, #1
 8001922:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
        /* extract params regarding current command */
        switch (client_current_cmd) {
 8001926:	4b95      	ldr	r3, [pc, #596]	; (8001b7c <stm32wb_at_client_Process_rx_frame+0x344>)
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	3b01      	subs	r3, #1
 800192c:	2b13      	cmp	r3, #19
 800192e:	f201 8328 	bhi.w	8002f82 <stm32wb_at_client_Process_rx_frame+0x174a>
 8001932:	a201      	add	r2, pc, #4	; (adr r2, 8001938 <stm32wb_at_client_Process_rx_frame+0x100>)
 8001934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001938:	08001989 	.word	0x08001989
 800193c:	08001b95 	.word	0x08001b95
 8001940:	08001cd1 	.word	0x08001cd1
 8001944:	08001c33 	.word	0x08001c33
 8001948:	08001f99 	.word	0x08001f99
 800194c:	080022b5 	.word	0x080022b5
 8001950:	08002353 	.word	0x08002353
 8001954:	080023f1 	.word	0x080023f1
 8001958:	0800248d 	.word	0x0800248d
 800195c:	0800252b 	.word	0x0800252b
 8001960:	08002787 	.word	0x08002787
 8001964:	08002803 	.word	0x08002803
 8001968:	08002f83 	.word	0x08002f83
 800196c:	0800289f 	.word	0x0800289f
 8001970:	08002945 	.word	0x08002945
 8001974:	08002ae5 	.word	0x08002ae5
 8001978:	080029e5 	.word	0x080029e5
 800197c:	08002f83 	.word	0x08002f83
 8001980:	08002f83 	.word	0x08002f83
 8001984:	08001e1b 	.word	0x08001e1b
          case BLE_SVC:
          {
            stm32wb_at_BLE_SVC_t param;
            char * token;
            status = 0;
 8001988:	2300      	movs	r3, #0
 800198a:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
            
            token = strtok(str_local, AT_SEPARATOR);
 800198e:	4980      	ldr	r1, [pc, #512]	; (8001b90 <stm32wb_at_client_Process_rx_frame+0x358>)
 8001990:	f8d7 01ec 	ldr.w	r0, [r7, #492]	; 0x1ec
 8001994:	f00a fa24 	bl	800bde0 <strtok>
 8001998:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190
            if(token != NULL)
 800199c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d01b      	beq.n	80019dc <stm32wb_at_client_Process_rx_frame+0x1a4>
            {
              errno = 0;
 80019a4:	f00a fa80 	bl	800bea8 <__errno>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2200      	movs	r2, #0
 80019ac:	601a      	str	r2, [r3, #0]
              param.index = (uint8_t)strtol(token, NULL, 0);
 80019ae:	2200      	movs	r2, #0
 80019b0:	2100      	movs	r1, #0
 80019b2:	f8d7 0190 	ldr.w	r0, [r7, #400]	; 0x190
 80019b6:	f00a f95b 	bl	800bc70 <strtol>
 80019ba:	4603      	mov	r3, r0
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	f887 3188 	strb.w	r3, [r7, #392]	; 0x188
              if(errno != 0)
 80019c2:	f00a fa71 	bl	800bea8 <__errno>
 80019c6:	4603      	mov	r3, r0
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d00c      	beq.n	80019e8 <stm32wb_at_client_Process_rx_frame+0x1b0>
              {
                status |= 1U;
 80019ce:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 80019d2:	f043 0301 	orr.w	r3, r3, #1
 80019d6:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
 80019da:	e005      	b.n	80019e8 <stm32wb_at_client_Process_rx_frame+0x1b0>
              }
            }
            else
            {
              status |= 1U;
 80019dc:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 80019e0:	f043 0301 	orr.w	r3, r3, #1
 80019e4:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
            }
            
            if((param.index >= SRV_CUSTOM_APP_SVC_OFFSET) && 
 80019e8:	f897 3188 	ldrb.w	r3, [r7, #392]	; 0x188
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	f240 8089 	bls.w	8001b04 <stm32wb_at_client_Process_rx_frame+0x2cc>
               (param.index < (SRV_CUSTOM_APP_SVC_OFFSET + SRV_CUSTOM_APP_SVC_COUNT)) )
 80019f2:	f897 3188 	ldrb.w	r3, [r7, #392]	; 0x188
            if((param.index >= SRV_CUSTOM_APP_SVC_OFFSET) && 
 80019f6:	2b07      	cmp	r3, #7
 80019f8:	f200 8084 	bhi.w	8001b04 <stm32wb_at_client_Process_rx_frame+0x2cc>
            {
              token = strtok(NULL, AT_SEPARATOR);
 80019fc:	4964      	ldr	r1, [pc, #400]	; (8001b90 <stm32wb_at_client_Process_rx_frame+0x358>)
 80019fe:	2000      	movs	r0, #0
 8001a00:	f00a f9ee 	bl	800bde0 <strtok>
 8001a04:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190
              if(token != NULL)
 8001a08:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d01b      	beq.n	8001a48 <stm32wb_at_client_Process_rx_frame+0x210>
              {
                errno = 0;
 8001a10:	f00a fa4a 	bl	800bea8 <__errno>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2200      	movs	r2, #0
 8001a18:	601a      	str	r2, [r3, #0]
                param.svc_uuid_type = (uint8_t)strtol(token, NULL, 0);
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	f8d7 0190 	ldr.w	r0, [r7, #400]	; 0x190
 8001a22:	f00a f925 	bl	800bc70 <strtol>
 8001a26:	4603      	mov	r3, r0
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	f887 3189 	strb.w	r3, [r7, #393]	; 0x189
                if(errno != 0)
 8001a2e:	f00a fa3b 	bl	800bea8 <__errno>
 8001a32:	4603      	mov	r3, r0
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d00c      	beq.n	8001a54 <stm32wb_at_client_Process_rx_frame+0x21c>
                {
                  status |= 1U;
 8001a3a:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8001a3e:	f043 0301 	orr.w	r3, r3, #1
 8001a42:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
 8001a46:	e005      	b.n	8001a54 <stm32wb_at_client_Process_rx_frame+0x21c>
                }
              }
              else
              {
                status |= 1U;
 8001a48:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8001a4c:	f043 0301 	orr.w	r3, r3, #1
 8001a50:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
              }
              
              token = strtok(NULL, AT_SEPARATOR);
 8001a54:	494e      	ldr	r1, [pc, #312]	; (8001b90 <stm32wb_at_client_Process_rx_frame+0x358>)
 8001a56:	2000      	movs	r0, #0
 8001a58:	f00a f9c2 	bl	800bde0 <strtok>
 8001a5c:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190
              if(token != NULL)
 8001a60:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d01b      	beq.n	8001aa0 <stm32wb_at_client_Process_rx_frame+0x268>
              {
                errno = 0;
 8001a68:	f00a fa1e 	bl	800bea8 <__errno>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2200      	movs	r2, #0
 8001a70:	601a      	str	r2, [r3, #0]
                param.svc_uuid = (uint16_t)strtol(token, NULL, 0);
 8001a72:	2200      	movs	r2, #0
 8001a74:	2100      	movs	r1, #0
 8001a76:	f8d7 0190 	ldr.w	r0, [r7, #400]	; 0x190
 8001a7a:	f00a f8f9 	bl	800bc70 <strtol>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	f8a7 318a 	strh.w	r3, [r7, #394]	; 0x18a
                if(errno != 0)
 8001a86:	f00a fa0f 	bl	800bea8 <__errno>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d00c      	beq.n	8001aac <stm32wb_at_client_Process_rx_frame+0x274>
                {
                  status |= 1U;
 8001a92:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8001a96:	f043 0301 	orr.w	r3, r3, #1
 8001a9a:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
 8001a9e:	e005      	b.n	8001aac <stm32wb_at_client_Process_rx_frame+0x274>
                }
              }
              else
              {
                status |= 1U;
 8001aa0:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8001aa4:	f043 0301 	orr.w	r3, r3, #1
 8001aa8:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
              }
              
              token = strtok(NULL, AT_SEPARATOR);
 8001aac:	4938      	ldr	r1, [pc, #224]	; (8001b90 <stm32wb_at_client_Process_rx_frame+0x358>)
 8001aae:	2000      	movs	r0, #0
 8001ab0:	f00a f996 	bl	800bde0 <strtok>
 8001ab4:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190
              if(token != NULL)
 8001ab8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d01b      	beq.n	8001af8 <stm32wb_at_client_Process_rx_frame+0x2c0>
              {
                errno = 0;
 8001ac0:	f00a f9f2 	bl	800bea8 <__errno>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	601a      	str	r2, [r3, #0]
                param.max_attr_record = (uint8_t)strtol(token, NULL, 0);
 8001aca:	2200      	movs	r2, #0
 8001acc:	2100      	movs	r1, #0
 8001ace:	f8d7 0190 	ldr.w	r0, [r7, #400]	; 0x190
 8001ad2:	f00a f8cd 	bl	800bc70 <strtol>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	f887 318c 	strb.w	r3, [r7, #396]	; 0x18c
                if(errno != 0)
 8001ade:	f00a f9e3 	bl	800bea8 <__errno>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d00c      	beq.n	8001b04 <stm32wb_at_client_Process_rx_frame+0x2cc>
                {
                  status |= 1U;
 8001aea:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8001aee:	f043 0301 	orr.w	r3, r3, #1
 8001af2:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
 8001af6:	e005      	b.n	8001b04 <stm32wb_at_client_Process_rx_frame+0x2cc>
                }
              }
              else
              {
                status |= 1U;
 8001af8:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8001afc:	f043 0301 	orr.w	r3, r3, #1
 8001b00:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
              }              
            }
            
            if( param.index >= (SRV_CUSTOM_APP_SVC_OFFSET + SRV_CUSTOM_APP_SVC_COUNT) )
 8001b04:	f897 3188 	ldrb.w	r3, [r7, #392]	; 0x188
 8001b08:	2b07      	cmp	r3, #7
 8001b0a:	d905      	bls.n	8001b18 <stm32wb_at_client_Process_rx_frame+0x2e0>
            {
              status |= 1U;
 8001b0c:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8001b10:	f043 0301 	orr.w	r3, r3, #1
 8001b14:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
            }
            
            token = strtok(NULL, AT_SEPARATOR);
 8001b18:	491d      	ldr	r1, [pc, #116]	; (8001b90 <stm32wb_at_client_Process_rx_frame+0x358>)
 8001b1a:	2000      	movs	r0, #0
 8001b1c:	f00a f960 	bl	800bde0 <strtok>
 8001b20:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190
            if(token != NULL)
 8001b24:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d005      	beq.n	8001b38 <stm32wb_at_client_Process_rx_frame+0x300>
            {
              status |= 1U;
 8001b2c:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8001b30:	f043 0301 	orr.w	r3, r3, #1
 8001b34:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
            }
            
            token = strtok(NULL, AT_SEPARATOR);
 8001b38:	4915      	ldr	r1, [pc, #84]	; (8001b90 <stm32wb_at_client_Process_rx_frame+0x358>)
 8001b3a:	2000      	movs	r0, #0
 8001b3c:	f00a f950 	bl	800bde0 <strtok>
 8001b40:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190
            if(token != NULL)
 8001b44:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d005      	beq.n	8001b58 <stm32wb_at_client_Process_rx_frame+0x320>
            {
              status |= 1U;
 8001b4c:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8001b50:	f043 0301 	orr.w	r3, r3, #1
 8001b54:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
            }

            if(status == 0U)
 8001b58:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	f041 8212 	bne.w	8002f86 <stm32wb_at_client_Process_rx_frame+0x174e>
            {
              status = stm32wb_at_BLE_SVC_cb(&param);
 8001b62:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001b66:	4618      	mov	r0, r3
 8001b68:	f008 fcc6 	bl	800a4f8 <stm32wb_at_BLE_SVC_cb>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
            }            
            break;            
 8001b72:	f001 ba08 	b.w	8002f86 <stm32wb_at_client_Process_rx_frame+0x174e>
 8001b76:	bf00      	nop
 8001b78:	0800e290 	.word	0x0800e290
 8001b7c:	20000390 	.word	0x20000390
 8001b80:	0800e294 	.word	0x0800e294
 8001b84:	0800e29c 	.word	0x0800e29c
 8001b88:	20000094 	.word	0x20000094
 8001b8c:	0800e2a0 	.word	0x0800e2a0
 8001b90:	0800e2a4 	.word	0x0800e2a4
          }
          case BLE_INIT:
          {
            stm32wb_at_BLE_INIT_t param;
            char * token;
            status = 0;
 8001b94:	2300      	movs	r3, #0
 8001b96:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
            
            token = strtok(str_local, AT_SEPARATOR);
 8001b9a:	49d7      	ldr	r1, [pc, #860]	; (8001ef8 <stm32wb_at_client_Process_rx_frame+0x6c0>)
 8001b9c:	f8d7 01ec 	ldr.w	r0, [r7, #492]	; 0x1ec
 8001ba0:	f00a f91e 	bl	800bde0 <strtok>
 8001ba4:	f8c7 0194 	str.w	r0, [r7, #404]	; 0x194
            if(token != NULL)
 8001ba8:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d01b      	beq.n	8001be8 <stm32wb_at_client_Process_rx_frame+0x3b0>
            {
              errno = 0;
 8001bb0:	f00a f97a 	bl	800bea8 <__errno>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	601a      	str	r2, [r3, #0]
              param.init_set = (uint8_t)strtol(token, NULL, 0);
 8001bba:	2200      	movs	r2, #0
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	f8d7 0194 	ldr.w	r0, [r7, #404]	; 0x194
 8001bc2:	f00a f855 	bl	800bc70 <strtol>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184
              if(errno != 0)
 8001bce:	f00a f96b 	bl	800bea8 <__errno>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d00c      	beq.n	8001bf4 <stm32wb_at_client_Process_rx_frame+0x3bc>
              {
                status |= 1U;
 8001bda:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8001bde:	f043 0301 	orr.w	r3, r3, #1
 8001be2:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
 8001be6:	e005      	b.n	8001bf4 <stm32wb_at_client_Process_rx_frame+0x3bc>
              }
            }
            else
            {
              status |= 1U;
 8001be8:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8001bec:	f043 0301 	orr.w	r3, r3, #1
 8001bf0:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
            }
            
            token = strtok(NULL, AT_SEPARATOR);
 8001bf4:	49c0      	ldr	r1, [pc, #768]	; (8001ef8 <stm32wb_at_client_Process_rx_frame+0x6c0>)
 8001bf6:	2000      	movs	r0, #0
 8001bf8:	f00a f8f2 	bl	800bde0 <strtok>
 8001bfc:	f8c7 0194 	str.w	r0, [r7, #404]	; 0x194
            if(token != NULL)
 8001c00:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d005      	beq.n	8001c14 <stm32wb_at_client_Process_rx_frame+0x3dc>
            {
              status |= 1U;
 8001c08:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8001c0c:	f043 0301 	orr.w	r3, r3, #1
 8001c10:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
            }

            if(status == 0U)
 8001c14:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	f041 81b6 	bne.w	8002f8a <stm32wb_at_client_Process_rx_frame+0x1752>
            {
              status = stm32wb_at_BLE_INIT_cb(&param);
 8001c1e:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7ff fcae 	bl	8001584 <stm32wb_at_BLE_INIT_cb>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
            }            
            break;
 8001c2e:	f001 b9ac 	b.w	8002f8a <stm32wb_at_client_Process_rx_frame+0x1752>
          }
          case BLE_ADV:
          {
            stm32wb_at_BLE_ADV_t param;
            char * token;
            status = 0;
 8001c32:	2300      	movs	r3, #0
 8001c34:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7

            token = strtok(str_local, AT_SEPARATOR);
 8001c38:	49af      	ldr	r1, [pc, #700]	; (8001ef8 <stm32wb_at_client_Process_rx_frame+0x6c0>)
 8001c3a:	f8d7 01ec 	ldr.w	r0, [r7, #492]	; 0x1ec
 8001c3e:	f00a f8cf 	bl	800bde0 <strtok>
 8001c42:	f8c7 019c 	str.w	r0, [r7, #412]	; 0x19c
            if(token != NULL)
 8001c46:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d01b      	beq.n	8001c86 <stm32wb_at_client_Process_rx_frame+0x44e>
            {
              errno = 0;
 8001c4e:	f00a f92b 	bl	800bea8 <__errno>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]
              param.enable = (uint8_t)strtol(token, NULL, 0);
 8001c58:	2200      	movs	r2, #0
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	f8d7 019c 	ldr.w	r0, [r7, #412]	; 0x19c
 8001c60:	f00a f806 	bl	800bc70 <strtol>
 8001c64:	4603      	mov	r3, r0
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	f887 3180 	strb.w	r3, [r7, #384]	; 0x180
              if(errno != 0)
 8001c6c:	f00a f91c 	bl	800bea8 <__errno>
 8001c70:	4603      	mov	r3, r0
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d00c      	beq.n	8001c92 <stm32wb_at_client_Process_rx_frame+0x45a>
              {
                status |= 1U;
 8001c78:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8001c7c:	f043 0301 	orr.w	r3, r3, #1
 8001c80:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
 8001c84:	e005      	b.n	8001c92 <stm32wb_at_client_Process_rx_frame+0x45a>
              }
            }
            else
            {
              status |= 1U;
 8001c86:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8001c8a:	f043 0301 	orr.w	r3, r3, #1
 8001c8e:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
            }
            
            token = strtok(NULL, AT_SEPARATOR);
 8001c92:	4999      	ldr	r1, [pc, #612]	; (8001ef8 <stm32wb_at_client_Process_rx_frame+0x6c0>)
 8001c94:	2000      	movs	r0, #0
 8001c96:	f00a f8a3 	bl	800bde0 <strtok>
 8001c9a:	f8c7 019c 	str.w	r0, [r7, #412]	; 0x19c
            if(token != NULL)
 8001c9e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d005      	beq.n	8001cb2 <stm32wb_at_client_Process_rx_frame+0x47a>
            {
              status |= 1U;
 8001ca6:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8001caa:	f043 0301 	orr.w	r3, r3, #1
 8001cae:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
            }

            if(status == 0U)
 8001cb2:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	f041 8169 	bne.w	8002f8e <stm32wb_at_client_Process_rx_frame+0x1756>
            {
              status = stm32wb_at_BLE_ADV_cb(&param);
 8001cbc:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7ff fc75 	bl	80015b0 <stm32wb_at_BLE_ADV_cb>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
            }
            break;
 8001ccc:	f001 b95f 	b.w	8002f8e <stm32wb_at_client_Process_rx_frame+0x1756>
          }
          case BLE_ADV_PARAM:
          {
            stm32wb_at_BLE_ADV_PARAM_t param;
            char * token;
            status = 0;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7

            token = strtok(str_local, AT_SEPARATOR);
 8001cd6:	4988      	ldr	r1, [pc, #544]	; (8001ef8 <stm32wb_at_client_Process_rx_frame+0x6c0>)
 8001cd8:	f8d7 01ec 	ldr.w	r0, [r7, #492]	; 0x1ec
 8001cdc:	f00a f880 	bl	800bde0 <strtok>
 8001ce0:	f8c7 0198 	str.w	r0, [r7, #408]	; 0x198
            if(token != NULL)
 8001ce4:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d01b      	beq.n	8001d24 <stm32wb_at_client_Process_rx_frame+0x4ec>
            {
              errno = 0;
 8001cec:	f00a f8dc 	bl	800bea8 <__errno>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	601a      	str	r2, [r3, #0]
              param.adv_type = (uint8_t)strtol(token, NULL, 0);
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	2100      	movs	r1, #0
 8001cfa:	f8d7 0198 	ldr.w	r0, [r7, #408]	; 0x198
 8001cfe:	f009 ffb7 	bl	800bc70 <strtol>
 8001d02:	4603      	mov	r3, r0
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	f887 3175 	strb.w	r3, [r7, #373]	; 0x175
              if(errno != 0)
 8001d0a:	f00a f8cd 	bl	800bea8 <__errno>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d00c      	beq.n	8001d30 <stm32wb_at_client_Process_rx_frame+0x4f8>
              {
                status |= 1U;
 8001d16:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8001d1a:	f043 0301 	orr.w	r3, r3, #1
 8001d1e:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
 8001d22:	e005      	b.n	8001d30 <stm32wb_at_client_Process_rx_frame+0x4f8>
              }
            }
            else
            {
              status |= 1U;
 8001d24:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8001d28:	f043 0301 	orr.w	r3, r3, #1
 8001d2c:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
            }
            
            token = strtok(NULL, AT_SEPARATOR);
 8001d30:	4971      	ldr	r1, [pc, #452]	; (8001ef8 <stm32wb_at_client_Process_rx_frame+0x6c0>)
 8001d32:	2000      	movs	r0, #0
 8001d34:	f00a f854 	bl	800bde0 <strtok>
 8001d38:	f8c7 0198 	str.w	r0, [r7, #408]	; 0x198
            if(token != NULL)
 8001d3c:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d01a      	beq.n	8001d7a <stm32wb_at_client_Process_rx_frame+0x542>
            {
              errno = 0;
 8001d44:	f00a f8b0 	bl	800bea8 <__errno>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	601a      	str	r2, [r3, #0]
              param.adv_int_min = strtof(token, NULL);
 8001d4e:	2100      	movs	r1, #0
 8001d50:	f8d7 0198 	ldr.w	r0, [r7, #408]	; 0x198
 8001d54:	f009 fea4 	bl	800baa0 <strtof>
 8001d58:	eef0 7a40 	vmov.f32	s15, s0
 8001d5c:	edc7 7a5e 	vstr	s15, [r7, #376]	; 0x178
              if(errno != 0)
 8001d60:	f00a f8a2 	bl	800bea8 <__errno>
 8001d64:	4603      	mov	r3, r0
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d00c      	beq.n	8001d86 <stm32wb_at_client_Process_rx_frame+0x54e>
              {
                status |= 1U;
 8001d6c:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8001d70:	f043 0301 	orr.w	r3, r3, #1
 8001d74:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
 8001d78:	e005      	b.n	8001d86 <stm32wb_at_client_Process_rx_frame+0x54e>
              }
            }
            else
            {
              status |= 1U;
 8001d7a:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8001d7e:	f043 0301 	orr.w	r3, r3, #1
 8001d82:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
            }
            
            token = strtok(NULL, AT_SEPARATOR);
 8001d86:	495c      	ldr	r1, [pc, #368]	; (8001ef8 <stm32wb_at_client_Process_rx_frame+0x6c0>)
 8001d88:	2000      	movs	r0, #0
 8001d8a:	f00a f829 	bl	800bde0 <strtok>
 8001d8e:	f8c7 0198 	str.w	r0, [r7, #408]	; 0x198
            if(token != NULL)
 8001d92:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d01a      	beq.n	8001dd0 <stm32wb_at_client_Process_rx_frame+0x598>
            {
              errno = 0;
 8001d9a:	f00a f885 	bl	800bea8 <__errno>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2200      	movs	r2, #0
 8001da2:	601a      	str	r2, [r3, #0]
              param.adv_int_max = strtof(token, NULL);
 8001da4:	2100      	movs	r1, #0
 8001da6:	f8d7 0198 	ldr.w	r0, [r7, #408]	; 0x198
 8001daa:	f009 fe79 	bl	800baa0 <strtof>
 8001dae:	eef0 7a40 	vmov.f32	s15, s0
 8001db2:	edc7 7a5f 	vstr	s15, [r7, #380]	; 0x17c
              if(errno != 0)
 8001db6:	f00a f877 	bl	800bea8 <__errno>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d00c      	beq.n	8001ddc <stm32wb_at_client_Process_rx_frame+0x5a4>
              {
                status |= 1U;
 8001dc2:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8001dc6:	f043 0301 	orr.w	r3, r3, #1
 8001dca:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
 8001dce:	e005      	b.n	8001ddc <stm32wb_at_client_Process_rx_frame+0x5a4>
              }
            }
            else
            {
              status |= 1U;
 8001dd0:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8001dd4:	f043 0301 	orr.w	r3, r3, #1
 8001dd8:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
            }
            
            token = strtok(NULL, AT_SEPARATOR);
 8001ddc:	4946      	ldr	r1, [pc, #280]	; (8001ef8 <stm32wb_at_client_Process_rx_frame+0x6c0>)
 8001dde:	2000      	movs	r0, #0
 8001de0:	f009 fffe 	bl	800bde0 <strtok>
 8001de4:	f8c7 0198 	str.w	r0, [r7, #408]	; 0x198
            if(token != NULL)
 8001de8:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d005      	beq.n	8001dfc <stm32wb_at_client_Process_rx_frame+0x5c4>
            {
              status |= 1U;
 8001df0:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8001df4:	f043 0301 	orr.w	r3, r3, #1
 8001df8:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
            }

            if(status == 0U)
 8001dfc:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	f041 80c6 	bne.w	8002f92 <stm32wb_at_client_Process_rx_frame+0x175a>
            {
              status = stm32wb_at_BLE_ADV_PARAM_cb(&param);
 8001e06:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7ff fbc5 	bl	800159a <stm32wb_at_BLE_ADV_PARAM_cb>
 8001e10:	4603      	mov	r3, r0
 8001e12:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
            }
            break;
 8001e16:	f001 b8bc 	b.w	8002f92 <stm32wb_at_client_Process_rx_frame+0x175a>
          case BLE_CONN_INT:
          {
            stm32wb_at_BLE_CONN_INT_t param;
            char * token;
            float value;
            status = 0;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7

            token = strtok(str_local, AT_SEPARATOR);
 8001e20:	4935      	ldr	r1, [pc, #212]	; (8001ef8 <stm32wb_at_client_Process_rx_frame+0x6c0>)
 8001e22:	f8d7 01ec 	ldr.w	r0, [r7, #492]	; 0x1ec
 8001e26:	f009 ffdb 	bl	800bde0 <strtok>
 8001e2a:	f8c7 01d4 	str.w	r0, [r7, #468]	; 0x1d4
            if(token != NULL)
 8001e2e:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d036      	beq.n	8001ea4 <stm32wb_at_client_Process_rx_frame+0x66c>
            {
              errno = 0;
 8001e36:	f00a f837 	bl	800bea8 <__errno>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	601a      	str	r2, [r3, #0]
              value = strtof(token, NULL);
 8001e40:	2100      	movs	r1, #0
 8001e42:	f8d7 01d4 	ldr.w	r0, [r7, #468]	; 0x1d4
 8001e46:	f009 fe2b 	bl	800baa0 <strtof>
 8001e4a:	ed87 0a74 	vstr	s0, [r7, #464]	; 0x1d0
              if(errno != 0)
 8001e4e:	f00a f82b 	bl	800bea8 <__errno>
 8001e52:	4603      	mov	r3, r0
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d006      	beq.n	8001e68 <stm32wb_at_client_Process_rx_frame+0x630>
              {
                status |= 1U;
 8001e5a:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8001e5e:	f043 0301 	orr.w	r3, r3, #1
 8001e62:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
 8001e66:	e023      	b.n	8001eb0 <stm32wb_at_client_Process_rx_frame+0x678>
              }
              else
              {
                if ((value >= 7.5f) && (value <= 4000.0f))
 8001e68:	edd7 7a74 	vldr	s15, [r7, #464]	; 0x1d0
 8001e6c:	eeb1 7a0e 	vmov.f32	s14, #30	; 0x40f00000  7.5
 8001e70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e78:	db0d      	blt.n	8001e96 <stm32wb_at_client_Process_rx_frame+0x65e>
 8001e7a:	edd7 7a74 	vldr	s15, [r7, #464]	; 0x1d0
 8001e7e:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8001efc <stm32wb_at_client_Process_rx_frame+0x6c4>
 8001e82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e8a:	d804      	bhi.n	8001e96 <stm32wb_at_client_Process_rx_frame+0x65e>
                {
                  param.min = value;
 8001e8c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001e90:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8001e94:	e00c      	b.n	8001eb0 <stm32wb_at_client_Process_rx_frame+0x678>
                }
                else
                {
                  status |= 1U;
 8001e96:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8001e9a:	f043 0301 	orr.w	r3, r3, #1
 8001e9e:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
 8001ea2:	e005      	b.n	8001eb0 <stm32wb_at_client_Process_rx_frame+0x678>
                }
              }
            }
            else
            {
              status |= 1U;
 8001ea4:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8001ea8:	f043 0301 	orr.w	r3, r3, #1
 8001eac:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
            }

            token = strtok(str_local, AT_SEPARATOR);
 8001eb0:	4911      	ldr	r1, [pc, #68]	; (8001ef8 <stm32wb_at_client_Process_rx_frame+0x6c0>)
 8001eb2:	f8d7 01ec 	ldr.w	r0, [r7, #492]	; 0x1ec
 8001eb6:	f009 ff93 	bl	800bde0 <strtok>
 8001eba:	f8c7 01d4 	str.w	r0, [r7, #468]	; 0x1d4
            if(token != NULL)
 8001ebe:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d043      	beq.n	8001f4e <stm32wb_at_client_Process_rx_frame+0x716>
            {
              errno = 0;
 8001ec6:	f009 ffef 	bl	800bea8 <__errno>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2200      	movs	r2, #0
 8001ece:	601a      	str	r2, [r3, #0]
              value = strtof(token, NULL);
 8001ed0:	2100      	movs	r1, #0
 8001ed2:	f8d7 01d4 	ldr.w	r0, [r7, #468]	; 0x1d4
 8001ed6:	f009 fde3 	bl	800baa0 <strtof>
 8001eda:	ed87 0a74 	vstr	s0, [r7, #464]	; 0x1d0
              if(errno != 0)
 8001ede:	f009 ffe3 	bl	800bea8 <__errno>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d00a      	beq.n	8001f00 <stm32wb_at_client_Process_rx_frame+0x6c8>
              {
                status |= 1U;
 8001eea:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8001eee:	f043 0301 	orr.w	r3, r3, #1
 8001ef2:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
 8001ef6:	e030      	b.n	8001f5a <stm32wb_at_client_Process_rx_frame+0x722>
 8001ef8:	0800e2a4 	.word	0x0800e2a4
 8001efc:	457a0000 	.word	0x457a0000
              }
              else
              {
                if ((value >= 7.5f) && (value <= 4000.0f) && (value >= param.min))
 8001f00:	edd7 7a74 	vldr	s15, [r7, #464]	; 0x1d0
 8001f04:	eeb1 7a0e 	vmov.f32	s14, #30	; 0x40f00000  7.5
 8001f08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f10:	db16      	blt.n	8001f40 <stm32wb_at_client_Process_rx_frame+0x708>
 8001f12:	edd7 7a74 	vldr	s15, [r7, #464]	; 0x1d0
 8001f16:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8001efc <stm32wb_at_client_Process_rx_frame+0x6c4>
 8001f1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f22:	d80d      	bhi.n	8001f40 <stm32wb_at_client_Process_rx_frame+0x708>
 8001f24:	edd7 7a5b 	vldr	s15, [r7, #364]	; 0x16c
 8001f28:	ed97 7a74 	vldr	s14, [r7, #464]	; 0x1d0
 8001f2c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f34:	db04      	blt.n	8001f40 <stm32wb_at_client_Process_rx_frame+0x708>
                {
                  param.max = value;
 8001f36:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001f3a:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8001f3e:	e00c      	b.n	8001f5a <stm32wb_at_client_Process_rx_frame+0x722>
                }
                else
                {
                  status |= 1U;
 8001f40:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8001f44:	f043 0301 	orr.w	r3, r3, #1
 8001f48:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
 8001f4c:	e005      	b.n	8001f5a <stm32wb_at_client_Process_rx_frame+0x722>
                }
              }
            }
            else
            {
              status |= 1U;
 8001f4e:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8001f52:	f043 0301 	orr.w	r3, r3, #1
 8001f56:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
            }

            token = strtok(NULL, AT_SEPARATOR);
 8001f5a:	49d5      	ldr	r1, [pc, #852]	; (80022b0 <stm32wb_at_client_Process_rx_frame+0xa78>)
 8001f5c:	2000      	movs	r0, #0
 8001f5e:	f009 ff3f 	bl	800bde0 <strtok>
 8001f62:	f8c7 01d4 	str.w	r0, [r7, #468]	; 0x1d4
            if(token != NULL)
 8001f66:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d005      	beq.n	8001f7a <stm32wb_at_client_Process_rx_frame+0x742>
            {
              status |= 1U;
 8001f6e:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8001f72:	f043 0301 	orr.w	r3, r3, #1
 8001f76:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
            }

            if(status == 0U)
 8001f7a:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	f041 8009 	bne.w	8002f96 <stm32wb_at_client_Process_rx_frame+0x175e>
            {
              status = stm32wb_at_BLE_CONN_INT_cb(&param);
 8001f84:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7ff fba0 	bl	80016ce <stm32wb_at_BLE_CONN_INT_cb>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
            }
            break;
 8001f94:	f000 bfff 	b.w	8002f96 <stm32wb_at_client_Process_rx_frame+0x175e>
          }
          case BLE_CHAR_ADD:
          {
            stm32wb_at_BLE_CHAR_ADD_t param;
            char * token;
            status = 0;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7

            token = strtok(str_local, AT_SEPARATOR);
 8001f9e:	49c4      	ldr	r1, [pc, #784]	; (80022b0 <stm32wb_at_client_Process_rx_frame+0xa78>)
 8001fa0:	f8d7 01ec 	ldr.w	r0, [r7, #492]	; 0x1ec
 8001fa4:	f009 ff1c 	bl	800bde0 <strtok>
 8001fa8:	f8c7 01a0 	str.w	r0, [r7, #416]	; 0x1a0
            if(token != NULL)
 8001fac:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d01b      	beq.n	8001fec <stm32wb_at_client_Process_rx_frame+0x7b4>
            {
              errno = 0;
 8001fb4:	f009 ff78 	bl	800bea8 <__errno>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2200      	movs	r2, #0
 8001fbc:	601a      	str	r2, [r3, #0]
              param.svc_id = (uint8_t)strtol(token, NULL, 0);
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	2100      	movs	r1, #0
 8001fc2:	f8d7 01a0 	ldr.w	r0, [r7, #416]	; 0x1a0
 8001fc6:	f009 fe53 	bl	800bc70 <strtol>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	f887 3160 	strb.w	r3, [r7, #352]	; 0x160
              if(errno != 0)
 8001fd2:	f009 ff69 	bl	800bea8 <__errno>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d00c      	beq.n	8001ff8 <stm32wb_at_client_Process_rx_frame+0x7c0>
              {
                status |= 1U;
 8001fde:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8001fe2:	f043 0301 	orr.w	r3, r3, #1
 8001fe6:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
 8001fea:	e005      	b.n	8001ff8 <stm32wb_at_client_Process_rx_frame+0x7c0>
              }
            }
            else
            {
              status |= 1U;
 8001fec:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8001ff0:	f043 0301 	orr.w	r3, r3, #1
 8001ff4:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
            }

            token = strtok(str_local, AT_SEPARATOR);
 8001ff8:	49ad      	ldr	r1, [pc, #692]	; (80022b0 <stm32wb_at_client_Process_rx_frame+0xa78>)
 8001ffa:	f8d7 01ec 	ldr.w	r0, [r7, #492]	; 0x1ec
 8001ffe:	f009 feef 	bl	800bde0 <strtok>
 8002002:	f8c7 01a0 	str.w	r0, [r7, #416]	; 0x1a0
            if(token != NULL)
 8002006:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d01b      	beq.n	8002046 <stm32wb_at_client_Process_rx_frame+0x80e>
            {
              errno = 0;
 800200e:	f009 ff4b 	bl	800bea8 <__errno>
 8002012:	4603      	mov	r3, r0
 8002014:	2200      	movs	r2, #0
 8002016:	601a      	str	r2, [r3, #0]
              param.char_id = (uint8_t)strtol(token, NULL, 0);
 8002018:	2200      	movs	r2, #0
 800201a:	2100      	movs	r1, #0
 800201c:	f8d7 01a0 	ldr.w	r0, [r7, #416]	; 0x1a0
 8002020:	f009 fe26 	bl	800bc70 <strtol>
 8002024:	4603      	mov	r3, r0
 8002026:	b2db      	uxtb	r3, r3
 8002028:	f887 3161 	strb.w	r3, [r7, #353]	; 0x161
              if(errno != 0)
 800202c:	f009 ff3c 	bl	800bea8 <__errno>
 8002030:	4603      	mov	r3, r0
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d00c      	beq.n	8002052 <stm32wb_at_client_Process_rx_frame+0x81a>
              {
                status |= 1U;
 8002038:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 800203c:	f043 0301 	orr.w	r3, r3, #1
 8002040:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
 8002044:	e005      	b.n	8002052 <stm32wb_at_client_Process_rx_frame+0x81a>
              }
            }
            else
            {
              status |= 1U;
 8002046:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 800204a:	f043 0301 	orr.w	r3, r3, #1
 800204e:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
            }
            
            token = strtok(str_local, AT_SEPARATOR);
 8002052:	4997      	ldr	r1, [pc, #604]	; (80022b0 <stm32wb_at_client_Process_rx_frame+0xa78>)
 8002054:	f8d7 01ec 	ldr.w	r0, [r7, #492]	; 0x1ec
 8002058:	f009 fec2 	bl	800bde0 <strtok>
 800205c:	f8c7 01a0 	str.w	r0, [r7, #416]	; 0x1a0
            if(token != NULL)
 8002060:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d01b      	beq.n	80020a0 <stm32wb_at_client_Process_rx_frame+0x868>
            {
              errno = 0;
 8002068:	f009 ff1e 	bl	800bea8 <__errno>
 800206c:	4603      	mov	r3, r0
 800206e:	2200      	movs	r2, #0
 8002070:	601a      	str	r2, [r3, #0]
              param.char_uuid_type = (uint8_t)strtol(token, NULL, 0);
 8002072:	2200      	movs	r2, #0
 8002074:	2100      	movs	r1, #0
 8002076:	f8d7 01a0 	ldr.w	r0, [r7, #416]	; 0x1a0
 800207a:	f009 fdf9 	bl	800bc70 <strtol>
 800207e:	4603      	mov	r3, r0
 8002080:	b2db      	uxtb	r3, r3
 8002082:	f887 3162 	strb.w	r3, [r7, #354]	; 0x162
              if(errno != 0)
 8002086:	f009 ff0f 	bl	800bea8 <__errno>
 800208a:	4603      	mov	r3, r0
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d00c      	beq.n	80020ac <stm32wb_at_client_Process_rx_frame+0x874>
              {
                status |= 1U;
 8002092:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8002096:	f043 0301 	orr.w	r3, r3, #1
 800209a:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
 800209e:	e005      	b.n	80020ac <stm32wb_at_client_Process_rx_frame+0x874>
              }
            }
            else
            {
              status |= 1U;
 80020a0:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 80020a4:	f043 0301 	orr.w	r3, r3, #1
 80020a8:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
            }
            
            token = strtok(str_local, AT_SEPARATOR);
 80020ac:	4980      	ldr	r1, [pc, #512]	; (80022b0 <stm32wb_at_client_Process_rx_frame+0xa78>)
 80020ae:	f8d7 01ec 	ldr.w	r0, [r7, #492]	; 0x1ec
 80020b2:	f009 fe95 	bl	800bde0 <strtok>
 80020b6:	f8c7 01a0 	str.w	r0, [r7, #416]	; 0x1a0
            if(token != NULL)
 80020ba:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d01b      	beq.n	80020fa <stm32wb_at_client_Process_rx_frame+0x8c2>
            {
              errno = 0;
 80020c2:	f009 fef1 	bl	800bea8 <__errno>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2200      	movs	r2, #0
 80020ca:	601a      	str	r2, [r3, #0]
              param.char_uuid = (uint16_t)strtol(token, NULL, 0);
 80020cc:	2200      	movs	r2, #0
 80020ce:	2100      	movs	r1, #0
 80020d0:	f8d7 01a0 	ldr.w	r0, [r7, #416]	; 0x1a0
 80020d4:	f009 fdcc 	bl	800bc70 <strtol>
 80020d8:	4603      	mov	r3, r0
 80020da:	b29b      	uxth	r3, r3
 80020dc:	f8a7 3164 	strh.w	r3, [r7, #356]	; 0x164
              if(errno != 0)
 80020e0:	f009 fee2 	bl	800bea8 <__errno>
 80020e4:	4603      	mov	r3, r0
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d00c      	beq.n	8002106 <stm32wb_at_client_Process_rx_frame+0x8ce>
              {
                status |= 1U;
 80020ec:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 80020f0:	f043 0301 	orr.w	r3, r3, #1
 80020f4:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
 80020f8:	e005      	b.n	8002106 <stm32wb_at_client_Process_rx_frame+0x8ce>
              }
            }
            else
            {
              status |= 1U;
 80020fa:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 80020fe:	f043 0301 	orr.w	r3, r3, #1
 8002102:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
            }
            
            token = strtok(str_local, AT_SEPARATOR);
 8002106:	496a      	ldr	r1, [pc, #424]	; (80022b0 <stm32wb_at_client_Process_rx_frame+0xa78>)
 8002108:	f8d7 01ec 	ldr.w	r0, [r7, #492]	; 0x1ec
 800210c:	f009 fe68 	bl	800bde0 <strtok>
 8002110:	f8c7 01a0 	str.w	r0, [r7, #416]	; 0x1a0
            if(token != NULL)
 8002114:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d01c      	beq.n	8002156 <stm32wb_at_client_Process_rx_frame+0x91e>
            {
              errno = 0;
 800211c:	f009 fec4 	bl	800bea8 <__errno>
 8002120:	4603      	mov	r3, r0
 8002122:	2200      	movs	r2, #0
 8002124:	601a      	str	r2, [r3, #0]
              param.char_value_len = (uint8_t)strtol(token, NULL, 0);
 8002126:	2200      	movs	r2, #0
 8002128:	2100      	movs	r1, #0
 800212a:	f8d7 01a0 	ldr.w	r0, [r7, #416]	; 0x1a0
 800212e:	f009 fd9f 	bl	800bc70 <strtol>
 8002132:	4603      	mov	r3, r0
 8002134:	b2db      	uxtb	r3, r3
 8002136:	b29b      	uxth	r3, r3
 8002138:	f8a7 3166 	strh.w	r3, [r7, #358]	; 0x166
              if(errno != 0)
 800213c:	f009 feb4 	bl	800bea8 <__errno>
 8002140:	4603      	mov	r3, r0
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d00c      	beq.n	8002162 <stm32wb_at_client_Process_rx_frame+0x92a>
              {
                status |= 1U;
 8002148:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 800214c:	f043 0301 	orr.w	r3, r3, #1
 8002150:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
 8002154:	e005      	b.n	8002162 <stm32wb_at_client_Process_rx_frame+0x92a>
              }
            }
            else
            {
              status |= 1U;
 8002156:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 800215a:	f043 0301 	orr.w	r3, r3, #1
 800215e:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
            }

            token = strtok(str_local, AT_SEPARATOR);
 8002162:	4953      	ldr	r1, [pc, #332]	; (80022b0 <stm32wb_at_client_Process_rx_frame+0xa78>)
 8002164:	f8d7 01ec 	ldr.w	r0, [r7, #492]	; 0x1ec
 8002168:	f009 fe3a 	bl	800bde0 <strtok>
 800216c:	f8c7 01a0 	str.w	r0, [r7, #416]	; 0x1a0
            if(token != NULL)
 8002170:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d01b      	beq.n	80021b0 <stm32wb_at_client_Process_rx_frame+0x978>
            {
              errno = 0;
 8002178:	f009 fe96 	bl	800bea8 <__errno>
 800217c:	4603      	mov	r3, r0
 800217e:	2200      	movs	r2, #0
 8002180:	601a      	str	r2, [r3, #0]
              param.char_properties = (uint8_t)strtol(token, NULL, 0);
 8002182:	2200      	movs	r2, #0
 8002184:	2100      	movs	r1, #0
 8002186:	f8d7 01a0 	ldr.w	r0, [r7, #416]	; 0x1a0
 800218a:	f009 fd71 	bl	800bc70 <strtol>
 800218e:	4603      	mov	r3, r0
 8002190:	b2db      	uxtb	r3, r3
 8002192:	f887 3168 	strb.w	r3, [r7, #360]	; 0x168
              if(errno != 0)
 8002196:	f009 fe87 	bl	800bea8 <__errno>
 800219a:	4603      	mov	r3, r0
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d00c      	beq.n	80021bc <stm32wb_at_client_Process_rx_frame+0x984>
              {
                status |= 1U;
 80021a2:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 80021a6:	f043 0301 	orr.w	r3, r3, #1
 80021aa:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
 80021ae:	e005      	b.n	80021bc <stm32wb_at_client_Process_rx_frame+0x984>
              }
            }
            else
            {
              status |= 1U;
 80021b0:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 80021b4:	f043 0301 	orr.w	r3, r3, #1
 80021b8:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
            }
            
            token = strtok(str_local, AT_SEPARATOR);
 80021bc:	493c      	ldr	r1, [pc, #240]	; (80022b0 <stm32wb_at_client_Process_rx_frame+0xa78>)
 80021be:	f8d7 01ec 	ldr.w	r0, [r7, #492]	; 0x1ec
 80021c2:	f009 fe0d 	bl	800bde0 <strtok>
 80021c6:	f8c7 01a0 	str.w	r0, [r7, #416]	; 0x1a0
            if(token != NULL)
 80021ca:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d01b      	beq.n	800220a <stm32wb_at_client_Process_rx_frame+0x9d2>
            {
              errno = 0;
 80021d2:	f009 fe69 	bl	800bea8 <__errno>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2200      	movs	r2, #0
 80021da:	601a      	str	r2, [r3, #0]
              param.sec_permission = (uint8_t)strtol(token, NULL, 0);
 80021dc:	2200      	movs	r2, #0
 80021de:	2100      	movs	r1, #0
 80021e0:	f8d7 01a0 	ldr.w	r0, [r7, #416]	; 0x1a0
 80021e4:	f009 fd44 	bl	800bc70 <strtol>
 80021e8:	4603      	mov	r3, r0
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	f887 3169 	strb.w	r3, [r7, #361]	; 0x169
              if(errno != 0)
 80021f0:	f009 fe5a 	bl	800bea8 <__errno>
 80021f4:	4603      	mov	r3, r0
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d00c      	beq.n	8002216 <stm32wb_at_client_Process_rx_frame+0x9de>
              {
                status |= 1U;
 80021fc:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8002200:	f043 0301 	orr.w	r3, r3, #1
 8002204:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
 8002208:	e005      	b.n	8002216 <stm32wb_at_client_Process_rx_frame+0x9de>
              }
            }
            else
            {
              status |= 1U;
 800220a:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 800220e:	f043 0301 	orr.w	r3, r3, #1
 8002212:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
            }
            
            token = strtok(str_local, AT_SEPARATOR);
 8002216:	4926      	ldr	r1, [pc, #152]	; (80022b0 <stm32wb_at_client_Process_rx_frame+0xa78>)
 8002218:	f8d7 01ec 	ldr.w	r0, [r7, #492]	; 0x1ec
 800221c:	f009 fde0 	bl	800bde0 <strtok>
 8002220:	f8c7 01a0 	str.w	r0, [r7, #416]	; 0x1a0
            if(token != NULL)
 8002224:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d01b      	beq.n	8002264 <stm32wb_at_client_Process_rx_frame+0xa2c>
            {
              errno = 0;
 800222c:	f009 fe3c 	bl	800bea8 <__errno>
 8002230:	4603      	mov	r3, r0
 8002232:	2200      	movs	r2, #0
 8002234:	601a      	str	r2, [r3, #0]
              param.gatt_evt_mask = (uint8_t)strtol(token, NULL, 0);
 8002236:	2200      	movs	r2, #0
 8002238:	2100      	movs	r1, #0
 800223a:	f8d7 01a0 	ldr.w	r0, [r7, #416]	; 0x1a0
 800223e:	f009 fd17 	bl	800bc70 <strtol>
 8002242:	4603      	mov	r3, r0
 8002244:	b2db      	uxtb	r3, r3
 8002246:	f887 316a 	strb.w	r3, [r7, #362]	; 0x16a
              if(errno != 0)
 800224a:	f009 fe2d 	bl	800bea8 <__errno>
 800224e:	4603      	mov	r3, r0
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d00c      	beq.n	8002270 <stm32wb_at_client_Process_rx_frame+0xa38>
              {
                status |= 1U;
 8002256:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 800225a:	f043 0301 	orr.w	r3, r3, #1
 800225e:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
 8002262:	e005      	b.n	8002270 <stm32wb_at_client_Process_rx_frame+0xa38>
              }
            }
            else
            {
              status |= 1U;
 8002264:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8002268:	f043 0301 	orr.w	r3, r3, #1
 800226c:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
            }            

            token = strtok(NULL, AT_SEPARATOR);
 8002270:	490f      	ldr	r1, [pc, #60]	; (80022b0 <stm32wb_at_client_Process_rx_frame+0xa78>)
 8002272:	2000      	movs	r0, #0
 8002274:	f009 fdb4 	bl	800bde0 <strtok>
 8002278:	f8c7 01a0 	str.w	r0, [r7, #416]	; 0x1a0
            if(token != NULL)
 800227c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d005      	beq.n	8002290 <stm32wb_at_client_Process_rx_frame+0xa58>
            {
              status |= 1U;
 8002284:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8002288:	f043 0301 	orr.w	r3, r3, #1
 800228c:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
            }

            if(status == 0U)
 8002290:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8002294:	2b00      	cmp	r3, #0
 8002296:	f040 8680 	bne.w	8002f9a <stm32wb_at_client_Process_rx_frame+0x1762>
            {
              status = stm32wb_at_BLE_CHAR_ADD_cb(&param);
 800229a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800229e:	4618      	mov	r0, r3
 80022a0:	f7ff f991 	bl	80015c6 <stm32wb_at_BLE_CHAR_ADD_cb>
 80022a4:	4603      	mov	r3, r0
 80022a6:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
            }
            break;
 80022aa:	f000 be76 	b.w	8002f9a <stm32wb_at_client_Process_rx_frame+0x1762>
 80022ae:	bf00      	nop
 80022b0:	0800e2a4 	.word	0x0800e2a4
          }
          case BLE_PERIPH_SEC_REQ:
          {
            stm32wb_at_BLE_PERIPH_SEC_REQ_t param;
            char * token;
            status = 0;
 80022b4:	2300      	movs	r3, #0
 80022b6:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
            
            token = strtok(str_local, AT_SEPARATOR);
 80022ba:	49c7      	ldr	r1, [pc, #796]	; (80025d8 <stm32wb_at_client_Process_rx_frame+0xda0>)
 80022bc:	f8d7 01ec 	ldr.w	r0, [r7, #492]	; 0x1ec
 80022c0:	f009 fd8e 	bl	800bde0 <strtok>
 80022c4:	f8c7 01a4 	str.w	r0, [r7, #420]	; 0x1a4
            if(token != NULL)
 80022c8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d01b      	beq.n	8002308 <stm32wb_at_client_Process_rx_frame+0xad0>
            {
              errno = 0;
 80022d0:	f009 fdea 	bl	800bea8 <__errno>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2200      	movs	r2, #0
 80022d8:	601a      	str	r2, [r3, #0]
              param.enable = (uint8_t)strtol(token, NULL, 0);
 80022da:	2200      	movs	r2, #0
 80022dc:	2100      	movs	r1, #0
 80022de:	f8d7 01a4 	ldr.w	r0, [r7, #420]	; 0x1a4
 80022e2:	f009 fcc5 	bl	800bc70 <strtol>
 80022e6:	4603      	mov	r3, r0
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	f887 315c 	strb.w	r3, [r7, #348]	; 0x15c
              if(errno != 0)
 80022ee:	f009 fddb 	bl	800bea8 <__errno>
 80022f2:	4603      	mov	r3, r0
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d00c      	beq.n	8002314 <stm32wb_at_client_Process_rx_frame+0xadc>
              {
                status |= 1U;
 80022fa:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 80022fe:	f043 0301 	orr.w	r3, r3, #1
 8002302:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
 8002306:	e005      	b.n	8002314 <stm32wb_at_client_Process_rx_frame+0xadc>
              }
            }
            else
            {
              status |= 1U;
 8002308:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 800230c:	f043 0301 	orr.w	r3, r3, #1
 8002310:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
            }
            
            token = strtok(NULL, AT_SEPARATOR);
 8002314:	49b0      	ldr	r1, [pc, #704]	; (80025d8 <stm32wb_at_client_Process_rx_frame+0xda0>)
 8002316:	2000      	movs	r0, #0
 8002318:	f009 fd62 	bl	800bde0 <strtok>
 800231c:	f8c7 01a4 	str.w	r0, [r7, #420]	; 0x1a4
            if(token != NULL)
 8002320:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002324:	2b00      	cmp	r3, #0
 8002326:	d005      	beq.n	8002334 <stm32wb_at_client_Process_rx_frame+0xafc>
            {
              status |= 1U;
 8002328:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 800232c:	f043 0301 	orr.w	r3, r3, #1
 8002330:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
            }
            if(status == 0U)
 8002334:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8002338:	2b00      	cmp	r3, #0
 800233a:	f040 8630 	bne.w	8002f9e <stm32wb_at_client_Process_rx_frame+0x1766>
            {
              status = stm32wb_at_BLE_PERIPH_SEC_REQ_cb(&param);
 800233e:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8002342:	4618      	mov	r0, r3
 8002344:	f7ff f94a 	bl	80015dc <stm32wb_at_BLE_PERIPH_SEC_REQ_cb>
 8002348:	4603      	mov	r3, r0
 800234a:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
            }
            break;
 800234e:	f000 be26 	b.w	8002f9e <stm32wb_at_client_Process_rx_frame+0x1766>
          }
          case BLE_PAIRING_CONFIRM:
          {
            stm32wb_at_BLE_PAIRING_CONFIRM_t param;
            char * token;
            status = 0;
 8002352:	2300      	movs	r3, #0
 8002354:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7

            token = strtok(str_local, AT_SEPARATOR);
 8002358:	499f      	ldr	r1, [pc, #636]	; (80025d8 <stm32wb_at_client_Process_rx_frame+0xda0>)
 800235a:	f8d7 01ec 	ldr.w	r0, [r7, #492]	; 0x1ec
 800235e:	f009 fd3f 	bl	800bde0 <strtok>
 8002362:	f8c7 01a8 	str.w	r0, [r7, #424]	; 0x1a8
            if(token != NULL)
 8002366:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800236a:	2b00      	cmp	r3, #0
 800236c:	d01b      	beq.n	80023a6 <stm32wb_at_client_Process_rx_frame+0xb6e>
            {
              errno = 0;
 800236e:	f009 fd9b 	bl	800bea8 <__errno>
 8002372:	4603      	mov	r3, r0
 8002374:	2200      	movs	r2, #0
 8002376:	601a      	str	r2, [r3, #0]
              param.confirm_yes_no = (uint8_t)strtol(token, NULL, 0);
 8002378:	2200      	movs	r2, #0
 800237a:	2100      	movs	r1, #0
 800237c:	f8d7 01a8 	ldr.w	r0, [r7, #424]	; 0x1a8
 8002380:	f009 fc76 	bl	800bc70 <strtol>
 8002384:	4603      	mov	r3, r0
 8002386:	b2db      	uxtb	r3, r3
 8002388:	f887 3158 	strb.w	r3, [r7, #344]	; 0x158
              if(errno != 0)
 800238c:	f009 fd8c 	bl	800bea8 <__errno>
 8002390:	4603      	mov	r3, r0
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d00c      	beq.n	80023b2 <stm32wb_at_client_Process_rx_frame+0xb7a>
              {
                status |= 1U;
 8002398:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 800239c:	f043 0301 	orr.w	r3, r3, #1
 80023a0:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
 80023a4:	e005      	b.n	80023b2 <stm32wb_at_client_Process_rx_frame+0xb7a>
              }
            }
            else
            {
              status |= 1U;
 80023a6:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 80023aa:	f043 0301 	orr.w	r3, r3, #1
 80023ae:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
            }        

            token = strtok(NULL, AT_SEPARATOR);
 80023b2:	4989      	ldr	r1, [pc, #548]	; (80025d8 <stm32wb_at_client_Process_rx_frame+0xda0>)
 80023b4:	2000      	movs	r0, #0
 80023b6:	f009 fd13 	bl	800bde0 <strtok>
 80023ba:	f8c7 01a8 	str.w	r0, [r7, #424]	; 0x1a8
            if(token != NULL)
 80023be:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d005      	beq.n	80023d2 <stm32wb_at_client_Process_rx_frame+0xb9a>
            {
              status |= 1U;
 80023c6:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 80023ca:	f043 0301 	orr.w	r3, r3, #1
 80023ce:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
            }

            if(status == 0U)
 80023d2:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	f040 85e3 	bne.w	8002fa2 <stm32wb_at_client_Process_rx_frame+0x176a>
            {
              status = stm32wb_at_BLE_PAIRING_CONFIRM_cb(&param);
 80023dc:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7ff f906 	bl	80015f2 <stm32wb_at_BLE_PAIRING_CONFIRM_cb>
 80023e6:	4603      	mov	r3, r0
 80023e8:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
            }
            break;
 80023ec:	f000 bdd9 	b.w	8002fa2 <stm32wb_at_client_Process_rx_frame+0x176a>
          }
          case BLE_PASSKEY_RESP:
          {
            stm32wb_at_BLE_PASSKEY_RESP_t param;
            char * token;
            status = 0;
 80023f0:	2300      	movs	r3, #0
 80023f2:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
            
            token = strtok(str_local, AT_SEPARATOR);
 80023f6:	4978      	ldr	r1, [pc, #480]	; (80025d8 <stm32wb_at_client_Process_rx_frame+0xda0>)
 80023f8:	f8d7 01ec 	ldr.w	r0, [r7, #492]	; 0x1ec
 80023fc:	f009 fcf0 	bl	800bde0 <strtok>
 8002400:	f8c7 01ac 	str.w	r0, [r7, #428]	; 0x1ac
            if(token != NULL)
 8002404:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8002408:	2b00      	cmp	r3, #0
 800240a:	d01a      	beq.n	8002442 <stm32wb_at_client_Process_rx_frame+0xc0a>
            {
              errno = 0;
 800240c:	f009 fd4c 	bl	800bea8 <__errno>
 8002410:	4603      	mov	r3, r0
 8002412:	2200      	movs	r2, #0
 8002414:	601a      	str	r2, [r3, #0]
              param.pass_key_resp = (uint32_t)strtol(token, NULL, 0);
 8002416:	2200      	movs	r2, #0
 8002418:	2100      	movs	r1, #0
 800241a:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 800241e:	f009 fc27 	bl	800bc70 <strtol>
 8002422:	4603      	mov	r3, r0
 8002424:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
              if(errno != 0)
 8002428:	f009 fd3e 	bl	800bea8 <__errno>
 800242c:	4603      	mov	r3, r0
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d00c      	beq.n	800244e <stm32wb_at_client_Process_rx_frame+0xc16>
              {
                status |= 1U;
 8002434:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8002438:	f043 0301 	orr.w	r3, r3, #1
 800243c:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
 8002440:	e005      	b.n	800244e <stm32wb_at_client_Process_rx_frame+0xc16>
              }
            }
            else
            {
              status |= 1U;
 8002442:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8002446:	f043 0301 	orr.w	r3, r3, #1
 800244a:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
            }
            
            token = strtok(NULL, AT_SEPARATOR);
 800244e:	4962      	ldr	r1, [pc, #392]	; (80025d8 <stm32wb_at_client_Process_rx_frame+0xda0>)
 8002450:	2000      	movs	r0, #0
 8002452:	f009 fcc5 	bl	800bde0 <strtok>
 8002456:	f8c7 01ac 	str.w	r0, [r7, #428]	; 0x1ac
            if(token != NULL)
 800245a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800245e:	2b00      	cmp	r3, #0
 8002460:	d005      	beq.n	800246e <stm32wb_at_client_Process_rx_frame+0xc36>
            {
              status |= 1U;
 8002462:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8002466:	f043 0301 	orr.w	r3, r3, #1
 800246a:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
            }
            
            if(status == 0U)
 800246e:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8002472:	2b00      	cmp	r3, #0
 8002474:	f040 8597 	bne.w	8002fa6 <stm32wb_at_client_Process_rx_frame+0x176e>
            {
              status = stm32wb_at_BLE_PASSKEY_RESP_cb(&param);
 8002478:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 800247c:	4618      	mov	r0, r3
 800247e:	f7ff f8c3 	bl	8001608 <stm32wb_at_BLE_PASSKEY_RESP_cb>
 8002482:	4603      	mov	r3, r0
 8002484:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
            }
            break;
 8002488:	f000 bd8d 	b.w	8002fa6 <stm32wb_at_client_Process_rx_frame+0x176e>
          }
          case BLE_IO_CAPA:
          {
            stm32wb_at_BLE_IO_CAPA_t  param;
            char * token;
            status = 0;
 800248c:	2300      	movs	r3, #0
 800248e:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
            
            token = strtok(str_local, AT_SEPARATOR);
 8002492:	4951      	ldr	r1, [pc, #324]	; (80025d8 <stm32wb_at_client_Process_rx_frame+0xda0>)
 8002494:	f8d7 01ec 	ldr.w	r0, [r7, #492]	; 0x1ec
 8002498:	f009 fca2 	bl	800bde0 <strtok>
 800249c:	f8c7 01b0 	str.w	r0, [r7, #432]	; 0x1b0
            if(token != NULL)
 80024a0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d01b      	beq.n	80024e0 <stm32wb_at_client_Process_rx_frame+0xca8>
            {
              errno = 0;
 80024a8:	f009 fcfe 	bl	800bea8 <__errno>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2200      	movs	r2, #0
 80024b0:	601a      	str	r2, [r3, #0]
              param.io_capability = (uint8_t)strtol(token, NULL, 0);
 80024b2:	2200      	movs	r2, #0
 80024b4:	2100      	movs	r1, #0
 80024b6:	f8d7 01b0 	ldr.w	r0, [r7, #432]	; 0x1b0
 80024ba:	f009 fbd9 	bl	800bc70 <strtol>
 80024be:	4603      	mov	r3, r0
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	f887 3150 	strb.w	r3, [r7, #336]	; 0x150
              if(errno != 0)
 80024c6:	f009 fcef 	bl	800bea8 <__errno>
 80024ca:	4603      	mov	r3, r0
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d00c      	beq.n	80024ec <stm32wb_at_client_Process_rx_frame+0xcb4>
              {
                status |= 1U;
 80024d2:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 80024d6:	f043 0301 	orr.w	r3, r3, #1
 80024da:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
 80024de:	e005      	b.n	80024ec <stm32wb_at_client_Process_rx_frame+0xcb4>
              }
            }
            else
            {
              status |= 1U;
 80024e0:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 80024e4:	f043 0301 	orr.w	r3, r3, #1
 80024e8:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
            }                                       
            
            token = strtok(NULL, AT_SEPARATOR);
 80024ec:	493a      	ldr	r1, [pc, #232]	; (80025d8 <stm32wb_at_client_Process_rx_frame+0xda0>)
 80024ee:	2000      	movs	r0, #0
 80024f0:	f009 fc76 	bl	800bde0 <strtok>
 80024f4:	f8c7 01b0 	str.w	r0, [r7, #432]	; 0x1b0
            if(token != NULL)
 80024f8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d005      	beq.n	800250c <stm32wb_at_client_Process_rx_frame+0xcd4>
            {
              status |= 1U;
 8002500:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8002504:	f043 0301 	orr.w	r3, r3, #1
 8002508:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
            }
            
            if(status == 0U)
 800250c:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8002510:	2b00      	cmp	r3, #0
 8002512:	f040 854a 	bne.w	8002faa <stm32wb_at_client_Process_rx_frame+0x1772>
            {
              status = stm32wb_at_BLE_IO_CAPA_cb(&param);
 8002516:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800251a:	4618      	mov	r0, r3
 800251c:	f7ff f87f 	bl	800161e <stm32wb_at_BLE_IO_CAPA_cb>
 8002520:	4603      	mov	r3, r0
 8002522:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
            } 
            break;
 8002526:	f000 bd40 	b.w	8002faa <stm32wb_at_client_Process_rx_frame+0x1772>
          {
            stm32wb_at_BLE_SET_AUTHEN_REQ_t  param;
            char * token;
                    
            /* all the fields are mandatory using this method */                    
            status = 0;
 800252a:	2300      	movs	r3, #0
 800252c:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
            
            token = strtok(str_local, AT_SEPARATOR);
 8002530:	4929      	ldr	r1, [pc, #164]	; (80025d8 <stm32wb_at_client_Process_rx_frame+0xda0>)
 8002532:	f8d7 01ec 	ldr.w	r0, [r7, #492]	; 0x1ec
 8002536:	f009 fc53 	bl	800bde0 <strtok>
 800253a:	f8c7 01b4 	str.w	r0, [r7, #436]	; 0x1b4
            if(token != NULL)
 800253e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002542:	2b00      	cmp	r3, #0
 8002544:	d01b      	beq.n	800257e <stm32wb_at_client_Process_rx_frame+0xd46>
            {
              errno = 0;
 8002546:	f009 fcaf 	bl	800bea8 <__errno>
 800254a:	4603      	mov	r3, r0
 800254c:	2200      	movs	r2, #0
 800254e:	601a      	str	r2, [r3, #0]
              param.bonding_mode = (uint8_t)strtol(str_local, NULL, 0);
 8002550:	2200      	movs	r2, #0
 8002552:	2100      	movs	r1, #0
 8002554:	f8d7 01ec 	ldr.w	r0, [r7, #492]	; 0x1ec
 8002558:	f009 fb8a 	bl	800bc70 <strtol>
 800255c:	4603      	mov	r3, r0
 800255e:	b2db      	uxtb	r3, r3
 8002560:	f887 3144 	strb.w	r3, [r7, #324]	; 0x144
              if(errno != 0)
 8002564:	f009 fca0 	bl	800bea8 <__errno>
 8002568:	4603      	mov	r3, r0
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d00c      	beq.n	800258a <stm32wb_at_client_Process_rx_frame+0xd52>
              {
                status |= 1U;
 8002570:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8002574:	f043 0301 	orr.w	r3, r3, #1
 8002578:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
 800257c:	e005      	b.n	800258a <stm32wb_at_client_Process_rx_frame+0xd52>
              }
            }
            else
            {
              status |= 1U;
 800257e:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8002582:	f043 0301 	orr.w	r3, r3, #1
 8002586:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
            }
            
            token = strtok(NULL, AT_SEPARATOR);
 800258a:	4913      	ldr	r1, [pc, #76]	; (80025d8 <stm32wb_at_client_Process_rx_frame+0xda0>)
 800258c:	2000      	movs	r0, #0
 800258e:	f009 fc27 	bl	800bde0 <strtok>
 8002592:	f8c7 01b4 	str.w	r0, [r7, #436]	; 0x1b4
            if(token != NULL)
 8002596:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800259a:	2b00      	cmp	r3, #0
 800259c:	d01e      	beq.n	80025dc <stm32wb_at_client_Process_rx_frame+0xda4>
            {
              errno = 0;
 800259e:	f009 fc83 	bl	800bea8 <__errno>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2200      	movs	r2, #0
 80025a6:	601a      	str	r2, [r3, #0]
              param.mitm = (uint8_t)strtol(token, NULL, 0);
 80025a8:	2200      	movs	r2, #0
 80025aa:	2100      	movs	r1, #0
 80025ac:	f8d7 01b4 	ldr.w	r0, [r7, #436]	; 0x1b4
 80025b0:	f009 fb5e 	bl	800bc70 <strtol>
 80025b4:	4603      	mov	r3, r0
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	f887 3145 	strb.w	r3, [r7, #325]	; 0x145
              if(errno != 0)
 80025bc:	f009 fc74 	bl	800bea8 <__errno>
 80025c0:	4603      	mov	r3, r0
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d00f      	beq.n	80025e8 <stm32wb_at_client_Process_rx_frame+0xdb0>
              {
                status |= 1U;
 80025c8:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 80025cc:	f043 0301 	orr.w	r3, r3, #1
 80025d0:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
 80025d4:	e008      	b.n	80025e8 <stm32wb_at_client_Process_rx_frame+0xdb0>
 80025d6:	bf00      	nop
 80025d8:	0800e2a4 	.word	0x0800e2a4
              }
            }
            else
            {
              status |= 1U;
 80025dc:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 80025e0:	f043 0301 	orr.w	r3, r3, #1
 80025e4:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
            }
            
            token = strtok(NULL, AT_SEPARATOR);
 80025e8:	49d5      	ldr	r1, [pc, #852]	; (8002940 <stm32wb_at_client_Process_rx_frame+0x1108>)
 80025ea:	2000      	movs	r0, #0
 80025ec:	f009 fbf8 	bl	800bde0 <strtok>
 80025f0:	f8c7 01b4 	str.w	r0, [r7, #436]	; 0x1b4
            if(token != NULL)
 80025f4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d01b      	beq.n	8002634 <stm32wb_at_client_Process_rx_frame+0xdfc>
            {
              errno = 0;
 80025fc:	f009 fc54 	bl	800bea8 <__errno>
 8002600:	4603      	mov	r3, r0
 8002602:	2200      	movs	r2, #0
 8002604:	601a      	str	r2, [r3, #0]
              param.sc_support = (uint8_t)strtol(token, NULL, 0);
 8002606:	2200      	movs	r2, #0
 8002608:	2100      	movs	r1, #0
 800260a:	f8d7 01b4 	ldr.w	r0, [r7, #436]	; 0x1b4
 800260e:	f009 fb2f 	bl	800bc70 <strtol>
 8002612:	4603      	mov	r3, r0
 8002614:	b2db      	uxtb	r3, r3
 8002616:	f887 3146 	strb.w	r3, [r7, #326]	; 0x146
              if(errno != 0)
 800261a:	f009 fc45 	bl	800bea8 <__errno>
 800261e:	4603      	mov	r3, r0
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d00c      	beq.n	8002640 <stm32wb_at_client_Process_rx_frame+0xe08>
              {
                status |= 1U;
 8002626:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 800262a:	f043 0301 	orr.w	r3, r3, #1
 800262e:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
 8002632:	e005      	b.n	8002640 <stm32wb_at_client_Process_rx_frame+0xe08>
              }
            }
            else
            {
              status |= 1U;
 8002634:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8002638:	f043 0301 	orr.w	r3, r3, #1
 800263c:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
            }
            
            token = strtok(NULL, AT_SEPARATOR);
 8002640:	49bf      	ldr	r1, [pc, #764]	; (8002940 <stm32wb_at_client_Process_rx_frame+0x1108>)
 8002642:	2000      	movs	r0, #0
 8002644:	f009 fbcc 	bl	800bde0 <strtok>
 8002648:	f8c7 01b4 	str.w	r0, [r7, #436]	; 0x1b4
            if(token != NULL)
 800264c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002650:	2b00      	cmp	r3, #0
 8002652:	d01b      	beq.n	800268c <stm32wb_at_client_Process_rx_frame+0xe54>
            {
              errno = 0;
 8002654:	f009 fc28 	bl	800bea8 <__errno>
 8002658:	4603      	mov	r3, r0
 800265a:	2200      	movs	r2, #0
 800265c:	601a      	str	r2, [r3, #0]
              param.use_fixed_pin = (uint8_t)strtol(token, NULL, 0);
 800265e:	2200      	movs	r2, #0
 8002660:	2100      	movs	r1, #0
 8002662:	f8d7 01b4 	ldr.w	r0, [r7, #436]	; 0x1b4
 8002666:	f009 fb03 	bl	800bc70 <strtol>
 800266a:	4603      	mov	r3, r0
 800266c:	b2db      	uxtb	r3, r3
 800266e:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
              if(errno != 0)
 8002672:	f009 fc19 	bl	800bea8 <__errno>
 8002676:	4603      	mov	r3, r0
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d00c      	beq.n	8002698 <stm32wb_at_client_Process_rx_frame+0xe60>
              {
                status |= 1U;
 800267e:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8002682:	f043 0301 	orr.w	r3, r3, #1
 8002686:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
 800268a:	e005      	b.n	8002698 <stm32wb_at_client_Process_rx_frame+0xe60>
              }
            }
            else
            {
              status |= 1U;
 800268c:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8002690:	f043 0301 	orr.w	r3, r3, #1
 8002694:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
            }
            token = strtok(NULL, AT_SEPARATOR);
 8002698:	49a9      	ldr	r1, [pc, #676]	; (8002940 <stm32wb_at_client_Process_rx_frame+0x1108>)
 800269a:	2000      	movs	r0, #0
 800269c:	f009 fba0 	bl	800bde0 <strtok>
 80026a0:	f8c7 01b4 	str.w	r0, [r7, #436]	; 0x1b4
            if(token != NULL)
 80026a4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d01b      	beq.n	80026e4 <stm32wb_at_client_Process_rx_frame+0xeac>
            {
              errno = 0;
 80026ac:	f009 fbfc 	bl	800bea8 <__errno>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2200      	movs	r2, #0
 80026b4:	601a      	str	r2, [r3, #0]
              param.fixed_pin = (uint8_t)strtol(token, NULL, 0);
 80026b6:	2200      	movs	r2, #0
 80026b8:	2100      	movs	r1, #0
 80026ba:	f8d7 01b4 	ldr.w	r0, [r7, #436]	; 0x1b4
 80026be:	f009 fad7 	bl	800bc70 <strtol>
 80026c2:	4603      	mov	r3, r0
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
              if(errno != 0)
 80026ca:	f009 fbed 	bl	800bea8 <__errno>
 80026ce:	4603      	mov	r3, r0
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d00c      	beq.n	80026f0 <stm32wb_at_client_Process_rx_frame+0xeb8>
              {
                status |= 1U;
 80026d6:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 80026da:	f043 0301 	orr.w	r3, r3, #1
 80026de:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
 80026e2:	e005      	b.n	80026f0 <stm32wb_at_client_Process_rx_frame+0xeb8>
              }
            }
            else
            {
              status |= 1U;
 80026e4:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 80026e8:	f043 0301 	orr.w	r3, r3, #1
 80026ec:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
            }
            token = strtok(NULL, AT_SEPARATOR);
 80026f0:	4993      	ldr	r1, [pc, #588]	; (8002940 <stm32wb_at_client_Process_rx_frame+0x1108>)
 80026f2:	2000      	movs	r0, #0
 80026f4:	f009 fb74 	bl	800bde0 <strtok>
 80026f8:	f8c7 01b4 	str.w	r0, [r7, #436]	; 0x1b4
            if(token != NULL)
 80026fc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002700:	2b00      	cmp	r3, #0
 8002702:	d01b      	beq.n	800273c <stm32wb_at_client_Process_rx_frame+0xf04>
            {
              errno = 0;
 8002704:	f009 fbd0 	bl	800bea8 <__errno>
 8002708:	4603      	mov	r3, r0
 800270a:	2200      	movs	r2, #0
 800270c:	601a      	str	r2, [r3, #0]
              param.identity_address_type = (uint8_t)strtol(token, NULL, 0);
 800270e:	2200      	movs	r2, #0
 8002710:	2100      	movs	r1, #0
 8002712:	f8d7 01b4 	ldr.w	r0, [r7, #436]	; 0x1b4
 8002716:	f009 faab 	bl	800bc70 <strtol>
 800271a:	4603      	mov	r3, r0
 800271c:	b2db      	uxtb	r3, r3
 800271e:	f887 314c 	strb.w	r3, [r7, #332]	; 0x14c
              if(errno != 0)
 8002722:	f009 fbc1 	bl	800bea8 <__errno>
 8002726:	4603      	mov	r3, r0
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d00c      	beq.n	8002748 <stm32wb_at_client_Process_rx_frame+0xf10>
              {
                status |= 1U;
 800272e:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8002732:	f043 0301 	orr.w	r3, r3, #1
 8002736:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
 800273a:	e005      	b.n	8002748 <stm32wb_at_client_Process_rx_frame+0xf10>
              }
            }
            else
            {
              status |= 1U;
 800273c:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8002740:	f043 0301 	orr.w	r3, r3, #1
 8002744:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
            }
            
            token = strtok(NULL, AT_SEPARATOR);
 8002748:	497d      	ldr	r1, [pc, #500]	; (8002940 <stm32wb_at_client_Process_rx_frame+0x1108>)
 800274a:	2000      	movs	r0, #0
 800274c:	f009 fb48 	bl	800bde0 <strtok>
 8002750:	f8c7 01b4 	str.w	r0, [r7, #436]	; 0x1b4
            if(token != NULL)
 8002754:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002758:	2b00      	cmp	r3, #0
 800275a:	d005      	beq.n	8002768 <stm32wb_at_client_Process_rx_frame+0xf30>
            {
              status |= 1U;
 800275c:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8002760:	f043 0301 	orr.w	r3, r3, #1
 8002764:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
            }
            
            if(status == 0U)
 8002768:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 800276c:	2b00      	cmp	r3, #0
 800276e:	f040 841e 	bne.w	8002fae <stm32wb_at_client_Process_rx_frame+0x1776>
            {
              status = stm32wb_at_BLE_SET_AUTHEN_REQ_cb(&param);
 8002772:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8002776:	4618      	mov	r0, r3
 8002778:	f7fe ff5c 	bl	8001634 <stm32wb_at_BLE_SET_AUTHEN_REQ_cb>
 800277c:	4603      	mov	r3, r0
 800277e:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
            }
            break;
 8002782:	f000 bc14 	b.w	8002fae <stm32wb_at_client_Process_rx_frame+0x1776>
          }
          case BLE_CLEAR_DB:
          {
            stm32wb_at_BLE_CLEAR_DB_t param;
            char * token;
            status = 0;
 8002786:	2300      	movs	r3, #0
 8002788:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
                    
            token = strtok(str_local, AT_SEPARATOR);
 800278c:	496c      	ldr	r1, [pc, #432]	; (8002940 <stm32wb_at_client_Process_rx_frame+0x1108>)
 800278e:	f8d7 01ec 	ldr.w	r0, [r7, #492]	; 0x1ec
 8002792:	f009 fb25 	bl	800bde0 <strtok>
 8002796:	f8c7 01b8 	str.w	r0, [r7, #440]	; 0x1b8
            if(token != NULL)
 800279a:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d01b      	beq.n	80027da <stm32wb_at_client_Process_rx_frame+0xfa2>
            {
              errno = 0;
 80027a2:	f009 fb81 	bl	800bea8 <__errno>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2200      	movs	r2, #0
 80027aa:	601a      	str	r2, [r3, #0]
              param.dummy = (uint8_t)strtol(token, NULL, 0);
 80027ac:	2200      	movs	r2, #0
 80027ae:	2100      	movs	r1, #0
 80027b0:	f8d7 01b8 	ldr.w	r0, [r7, #440]	; 0x1b8
 80027b4:	f009 fa5c 	bl	800bc70 <strtol>
 80027b8:	4603      	mov	r3, r0
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	f887 3140 	strb.w	r3, [r7, #320]	; 0x140
              if(errno != 0)
 80027c0:	f009 fb72 	bl	800bea8 <__errno>
 80027c4:	4603      	mov	r3, r0
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d00c      	beq.n	80027e6 <stm32wb_at_client_Process_rx_frame+0xfae>
              {
                status |= 1U;
 80027cc:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 80027d0:	f043 0301 	orr.w	r3, r3, #1
 80027d4:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
 80027d8:	e005      	b.n	80027e6 <stm32wb_at_client_Process_rx_frame+0xfae>
              }
            }
            else
            {
              status |= 1U;
 80027da:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 80027de:	f043 0301 	orr.w	r3, r3, #1
 80027e2:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
            }
            if(status == 0U)
 80027e6:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	f040 83e1 	bne.w	8002fb2 <stm32wb_at_client_Process_rx_frame+0x177a>
            {
              status = stm32wb_at_BLE_CLEAR_DB_cb(&param);
 80027f0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80027f4:	4618      	mov	r0, r3
 80027f6:	f7fe ff28 	bl	800164a <stm32wb_at_BLE_CLEAR_DB_cb>
 80027fa:	4603      	mov	r3, r0
 80027fc:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
            }
            break;
 8002800:	e3d7      	b.n	8002fb2 <stm32wb_at_client_Process_rx_frame+0x177a>
          }
          case BLE_RST:
          {
            stm32wb_at_BLE_RST_t param;
            char * token;
            status = 0;
 8002802:	2300      	movs	r3, #0
 8002804:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
            
            token = strtok(str_local, AT_SEPARATOR);
 8002808:	494d      	ldr	r1, [pc, #308]	; (8002940 <stm32wb_at_client_Process_rx_frame+0x1108>)
 800280a:	f8d7 01ec 	ldr.w	r0, [r7, #492]	; 0x1ec
 800280e:	f009 fae7 	bl	800bde0 <strtok>
 8002812:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
            if(token != NULL)
 8002816:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800281a:	2b00      	cmp	r3, #0
 800281c:	d01b      	beq.n	8002856 <stm32wb_at_client_Process_rx_frame+0x101e>
            {
              errno = 0;
 800281e:	f009 fb43 	bl	800bea8 <__errno>
 8002822:	4603      	mov	r3, r0
 8002824:	2200      	movs	r2, #0
 8002826:	601a      	str	r2, [r3, #0]
              param.reset = (uint8_t)strtol(token, NULL, 0);
 8002828:	2200      	movs	r2, #0
 800282a:	2100      	movs	r1, #0
 800282c:	f8d7 01bc 	ldr.w	r0, [r7, #444]	; 0x1bc
 8002830:	f009 fa1e 	bl	800bc70 <strtol>
 8002834:	4603      	mov	r3, r0
 8002836:	b2db      	uxtb	r3, r3
 8002838:	f887 313c 	strb.w	r3, [r7, #316]	; 0x13c
              if(errno != 0)
 800283c:	f009 fb34 	bl	800bea8 <__errno>
 8002840:	4603      	mov	r3, r0
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d00c      	beq.n	8002862 <stm32wb_at_client_Process_rx_frame+0x102a>
              {
                status |= 1U;
 8002848:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 800284c:	f043 0301 	orr.w	r3, r3, #1
 8002850:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
 8002854:	e005      	b.n	8002862 <stm32wb_at_client_Process_rx_frame+0x102a>
              }
            }
            else
            {
              status |= 1U;
 8002856:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 800285a:	f043 0301 	orr.w	r3, r3, #1
 800285e:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
            }                                       
            
            token = strtok(NULL, AT_SEPARATOR);
 8002862:	4937      	ldr	r1, [pc, #220]	; (8002940 <stm32wb_at_client_Process_rx_frame+0x1108>)
 8002864:	2000      	movs	r0, #0
 8002866:	f009 fabb 	bl	800bde0 <strtok>
 800286a:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
            if(token != NULL)
 800286e:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8002872:	2b00      	cmp	r3, #0
 8002874:	d005      	beq.n	8002882 <stm32wb_at_client_Process_rx_frame+0x104a>
            {
              status |= 1U;
 8002876:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 800287a:	f043 0301 	orr.w	r3, r3, #1
 800287e:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
            }
            
            if(status == 0U)
 8002882:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8002886:	2b00      	cmp	r3, #0
 8002888:	f040 8395 	bne.w	8002fb6 <stm32wb_at_client_Process_rx_frame+0x177e>
            {
              status = stm32wb_at_BLE_RST_cb(&param);
 800288c:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8002890:	4618      	mov	r0, r3
 8002892:	f7fe fee5 	bl	8001660 <stm32wb_at_BLE_RST_cb>
 8002896:	4603      	mov	r3, r0
 8002898:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
            } 
            break;
 800289c:	e38b      	b.n	8002fb6 <stm32wb_at_client_Process_rx_frame+0x177e>
          case BLE_PUB_ADDR:
          {
            stm32wb_at_BLE_PUB_ADDR_t param;
            char * token;
            uint8_t tab_len;
            status = 0;
 800289e:	2300      	movs	r3, #0
 80028a0:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
            
            token = strtok(str_local, AT_SEPARATOR);
 80028a4:	4926      	ldr	r1, [pc, #152]	; (8002940 <stm32wb_at_client_Process_rx_frame+0x1108>)
 80028a6:	f8d7 01ec 	ldr.w	r0, [r7, #492]	; 0x1ec
 80028aa:	f009 fa99 	bl	800bde0 <strtok>
 80028ae:	f8c7 01c0 	str.w	r0, [r7, #448]	; 0x1c0
            if(token != NULL)
 80028b2:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d01d      	beq.n	80028f6 <stm32wb_at_client_Process_rx_frame+0x10be>
            {
              tab_len = (uint8_t)sizeof(param.BD_address);
 80028ba:	2306      	movs	r3, #6
 80028bc:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
              status |= str_to_byte_tab(token, &param.BD_address[0], &tab_len);
 80028c0:	f207 1233 	addw	r2, r7, #307	; 0x133
 80028c4:	f507 739a 	add.w	r3, r7, #308	; 0x134
 80028c8:	4619      	mov	r1, r3
 80028ca:	f8d7 01c0 	ldr.w	r0, [r7, #448]	; 0x1c0
 80028ce:	f7fe fd8b 	bl	80013e8 <str_to_byte_tab>
 80028d2:	4603      	mov	r3, r0
 80028d4:	461a      	mov	r2, r3
 80028d6:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 80028da:	4313      	orrs	r3, r2
 80028dc:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
              if(tab_len != 6U)
 80028e0:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80028e4:	2b06      	cmp	r3, #6
 80028e6:	d00c      	beq.n	8002902 <stm32wb_at_client_Process_rx_frame+0x10ca>
              {
                status |= 1U;
 80028e8:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 80028ec:	f043 0301 	orr.w	r3, r3, #1
 80028f0:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
 80028f4:	e005      	b.n	8002902 <stm32wb_at_client_Process_rx_frame+0x10ca>
              }
            }
            else
            {
              status |= 1U;
 80028f6:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 80028fa:	f043 0301 	orr.w	r3, r3, #1
 80028fe:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
            }
            
            token = strtok(NULL, AT_SEPARATOR);
 8002902:	490f      	ldr	r1, [pc, #60]	; (8002940 <stm32wb_at_client_Process_rx_frame+0x1108>)
 8002904:	2000      	movs	r0, #0
 8002906:	f009 fa6b 	bl	800bde0 <strtok>
 800290a:	f8c7 01c0 	str.w	r0, [r7, #448]	; 0x1c0
            if(token != NULL)
 800290e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d005      	beq.n	8002922 <stm32wb_at_client_Process_rx_frame+0x10ea>
            {
              status |= 1U;
 8002916:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 800291a:	f043 0301 	orr.w	r3, r3, #1
 800291e:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
            }
            
            if(status == 0U)
 8002922:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8002926:	2b00      	cmp	r3, #0
 8002928:	f040 8347 	bne.w	8002fba <stm32wb_at_client_Process_rx_frame+0x1782>
            {
              status = stm32wb_at_BLE_PUB_ADDR_cb(&param);
 800292c:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8002930:	4618      	mov	r0, r3
 8002932:	f7fe fea0 	bl	8001676 <stm32wb_at_BLE_PUB_ADDR_cb>
 8002936:	4603      	mov	r3, r0
 8002938:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
            }
            break;
 800293c:	e33d      	b.n	8002fba <stm32wb_at_client_Process_rx_frame+0x1782>
 800293e:	bf00      	nop
 8002940:	0800e2a4 	.word	0x0800e2a4
          case BLE_RAND_ADDR:
          {
            stm32wb_at_BLE_RAND_ADDR_t param;
            char * token;
            uint8_t tab_len;
            status = 0;
 8002944:	2300      	movs	r3, #0
 8002946:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
            
            token = strtok(str_local, AT_SEPARATOR);
 800294a:	49d1      	ldr	r1, [pc, #836]	; (8002c90 <stm32wb_at_client_Process_rx_frame+0x1458>)
 800294c:	f8d7 01ec 	ldr.w	r0, [r7, #492]	; 0x1ec
 8002950:	f009 fa46 	bl	800bde0 <strtok>
 8002954:	f8c7 01c4 	str.w	r0, [r7, #452]	; 0x1c4
            if(token != NULL)
 8002958:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800295c:	2b00      	cmp	r3, #0
 800295e:	d01d      	beq.n	800299c <stm32wb_at_client_Process_rx_frame+0x1164>
            {
              tab_len = (uint8_t)sizeof(param.BD_address);
 8002960:	2306      	movs	r3, #6
 8002962:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
              status |= str_to_byte_tab(token, &param.BD_address[0], &tab_len);
 8002966:	f207 122b 	addw	r2, r7, #299	; 0x12b
 800296a:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800296e:	4619      	mov	r1, r3
 8002970:	f8d7 01c4 	ldr.w	r0, [r7, #452]	; 0x1c4
 8002974:	f7fe fd38 	bl	80013e8 <str_to_byte_tab>
 8002978:	4603      	mov	r3, r0
 800297a:	461a      	mov	r2, r3
 800297c:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8002980:	4313      	orrs	r3, r2
 8002982:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
              if(tab_len != 6U)
 8002986:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800298a:	2b06      	cmp	r3, #6
 800298c:	d00c      	beq.n	80029a8 <stm32wb_at_client_Process_rx_frame+0x1170>
              {
                status |= 1U;
 800298e:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8002992:	f043 0301 	orr.w	r3, r3, #1
 8002996:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
 800299a:	e005      	b.n	80029a8 <stm32wb_at_client_Process_rx_frame+0x1170>
              }                    
            }
            else
            {
              status |= 1U;
 800299c:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 80029a0:	f043 0301 	orr.w	r3, r3, #1
 80029a4:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
            }
            
            token = strtok(NULL, AT_SEPARATOR);
 80029a8:	49b9      	ldr	r1, [pc, #740]	; (8002c90 <stm32wb_at_client_Process_rx_frame+0x1458>)
 80029aa:	2000      	movs	r0, #0
 80029ac:	f009 fa18 	bl	800bde0 <strtok>
 80029b0:	f8c7 01c4 	str.w	r0, [r7, #452]	; 0x1c4
            if(token != NULL)
 80029b4:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d005      	beq.n	80029c8 <stm32wb_at_client_Process_rx_frame+0x1190>
            {
              status |= 1U;
 80029bc:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 80029c0:	f043 0301 	orr.w	r3, r3, #1
 80029c4:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
            }
            
            if(status == 0U)
 80029c8:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	f040 82f6 	bne.w	8002fbe <stm32wb_at_client_Process_rx_frame+0x1786>
            {
              status = stm32wb_at_BLE_RAND_ADDR_cb(&param);
 80029d2:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 80029d6:	4618      	mov	r0, r3
 80029d8:	f7fe fe58 	bl	800168c <stm32wb_at_BLE_RAND_ADDR_cb>
 80029dc:	4603      	mov	r3, r0
 80029de:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
            }
            break;
 80029e2:	e2ec      	b.n	8002fbe <stm32wb_at_client_Process_rx_frame+0x1786>
          {
            stm32wb_at_BLE_RF_POWER_t param;
            char * token;
            float value;
            uint8_t i;
            uint8_t value_flag = 0;
 80029e4:	2300      	movs	r3, #0
 80029e6:	f887 31ea 	strb.w	r3, [r7, #490]	; 0x1ea
            status = 0;            
 80029ea:	2300      	movs	r3, #0
 80029ec:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
            
            token = strtok(str_local, AT_SEPARATOR);
 80029f0:	49a7      	ldr	r1, [pc, #668]	; (8002c90 <stm32wb_at_client_Process_rx_frame+0x1458>)
 80029f2:	f8d7 01ec 	ldr.w	r0, [r7, #492]	; 0x1ec
 80029f6:	f009 f9f3 	bl	800bde0 <strtok>
 80029fa:	f8c7 01cc 	str.w	r0, [r7, #460]	; 0x1cc
            if(token != NULL)
 80029fe:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d04a      	beq.n	8002a9c <stm32wb_at_client_Process_rx_frame+0x1264>
            {
              errno = 0;
 8002a06:	f009 fa4f 	bl	800bea8 <__errno>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	601a      	str	r2, [r3, #0]
              value = strtof(token, NULL);
 8002a10:	2100      	movs	r1, #0
 8002a12:	f8d7 01cc 	ldr.w	r0, [r7, #460]	; 0x1cc
 8002a16:	f009 f843 	bl	800baa0 <strtof>
 8002a1a:	ed87 0a72 	vstr	s0, [r7, #456]	; 0x1c8
              if(errno != 0)
 8002a1e:	f009 fa43 	bl	800bea8 <__errno>
 8002a22:	4603      	mov	r3, r0
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d006      	beq.n	8002a38 <stm32wb_at_client_Process_rx_frame+0x1200>
              {
                status |= 1U;
 8002a2a:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8002a2e:	f043 0301 	orr.w	r3, r3, #1
 8002a32:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
 8002a36:	e037      	b.n	8002aa8 <stm32wb_at_client_Process_rx_frame+0x1270>
              }
              else
              {              
                for (i = 0 ; i < (sizeof(tab_conv_tx_power) / sizeof(tab_conv_tx_power[0])) ; i++)
 8002a38:	2300      	movs	r3, #0
 8002a3a:	f887 31eb 	strb.w	r3, [r7, #491]	; 0x1eb
 8002a3e:	e01e      	b.n	8002a7e <stm32wb_at_client_Process_rx_frame+0x1246>
                {
                  if (value == tab_conv_tx_power[i])
 8002a40:	f897 31eb 	ldrb.w	r3, [r7, #491]	; 0x1eb
 8002a44:	4a93      	ldr	r2, [pc, #588]	; (8002c94 <stm32wb_at_client_Process_rx_frame+0x145c>)
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	4413      	add	r3, r2
 8002a4a:	edd3 7a00 	vldr	s15, [r3]
 8002a4e:	ed97 7a72 	vldr	s14, [r7, #456]	; 0x1c8
 8002a52:	eeb4 7a67 	vcmp.f32	s14, s15
 8002a56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a5a:	d10b      	bne.n	8002a74 <stm32wb_at_client_Process_rx_frame+0x123c>
                  {
                    value_flag = 1;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	f887 31ea 	strb.w	r3, [r7, #490]	; 0x1ea
                    param.tx_power = value;
 8002a62:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002a66:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
                    param.tx_power_code = i;
 8002a6a:	f897 31eb 	ldrb.w	r3, [r7, #491]	; 0x1eb
 8002a6e:	f887 3124 	strb.w	r3, [r7, #292]	; 0x124
                    break;
 8002a72:	e008      	b.n	8002a86 <stm32wb_at_client_Process_rx_frame+0x124e>
                for (i = 0 ; i < (sizeof(tab_conv_tx_power) / sizeof(tab_conv_tx_power[0])) ; i++)
 8002a74:	f897 31eb 	ldrb.w	r3, [r7, #491]	; 0x1eb
 8002a78:	3301      	adds	r3, #1
 8002a7a:	f887 31eb 	strb.w	r3, [r7, #491]	; 0x1eb
 8002a7e:	f897 31eb 	ldrb.w	r3, [r7, #491]	; 0x1eb
 8002a82:	2b1f      	cmp	r3, #31
 8002a84:	d9dc      	bls.n	8002a40 <stm32wb_at_client_Process_rx_frame+0x1208>
                  }
                }
                if (value_flag != 1)
 8002a86:	f897 31ea 	ldrb.w	r3, [r7, #490]	; 0x1ea
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d00c      	beq.n	8002aa8 <stm32wb_at_client_Process_rx_frame+0x1270>
                {
                  status |= 1U;
 8002a8e:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8002a92:	f043 0301 	orr.w	r3, r3, #1
 8002a96:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
 8002a9a:	e005      	b.n	8002aa8 <stm32wb_at_client_Process_rx_frame+0x1270>
                }
              }
            }
            else
            {
              status |= 1U;
 8002a9c:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8002aa0:	f043 0301 	orr.w	r3, r3, #1
 8002aa4:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
            }
            
            token = strtok(NULL, AT_SEPARATOR);
 8002aa8:	4979      	ldr	r1, [pc, #484]	; (8002c90 <stm32wb_at_client_Process_rx_frame+0x1458>)
 8002aaa:	2000      	movs	r0, #0
 8002aac:	f009 f998 	bl	800bde0 <strtok>
 8002ab0:	f8c7 01cc 	str.w	r0, [r7, #460]	; 0x1cc
            if(token != NULL)
 8002ab4:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d005      	beq.n	8002ac8 <stm32wb_at_client_Process_rx_frame+0x1290>
            {
              status |= 1U;
 8002abc:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8002ac0:	f043 0301 	orr.w	r3, r3, #1
 8002ac4:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
            }
            
            if(status == 0U)
 8002ac8:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	f040 8278 	bne.w	8002fc2 <stm32wb_at_client_Process_rx_frame+0x178a>
            {
              status = stm32wb_at_BLE_RF_POWER_cb(&param);
 8002ad2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7fe fdee 	bl	80016b8 <stm32wb_at_BLE_RF_POWER_cb>
 8002adc:	4603      	mov	r3, r0
 8002ade:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
            }
            break;
 8002ae2:	e26e      	b.n	8002fc2 <stm32wb_at_client_Process_rx_frame+0x178a>
          }
          case BLE_NAME:
          {
            stm32wb_at_BLE_NAME_t param;
            status = 0;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
            
            (void)strcpy(&param.name[0], str_local);
 8002aea:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8002aee:	f8d7 11ec 	ldr.w	r1, [r7, #492]	; 0x1ec
 8002af2:	4618      	mov	r0, r3
 8002af4:	f009 fa12 	bl	800bf1c <strcpy>
            
            /* do not check separator as it can be in the name itself */
            status = stm32wb_at_BLE_NAME_cb(&param);
 8002af8:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8002afc:	4618      	mov	r0, r3
 8002afe:	f7fe fdd0 	bl	80016a2 <stm32wb_at_BLE_NAME_cb>
 8002b02:	4603      	mov	r3, r0
 8002b04:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
            break;
 8002b08:	e266      	b.n	8002fd8 <stm32wb_at_client_Process_rx_frame+0x17a0>
            break;
        }
      }
    }
  }
  else if( strncmp(str_local, AT_EVENT, strlen(AT_EVENT)) == 0)
 8002b0a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8002b0e:	781a      	ldrb	r2, [r3, #0]
 8002b10:	4b61      	ldr	r3, [pc, #388]	; (8002c98 <stm32wb_at_client_Process_rx_frame+0x1460>)
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	f040 825e 	bne.w	8002fd8 <stm32wb_at_client_Process_rx_frame+0x17a0>
  {
    str_local++;
 8002b1c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8002b20:	3301      	adds	r3, #1
 8002b22:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec

    for( current_evt = 0 ; current_evt < (uint32_t)BLE_EVT_NONE ; current_evt++ )
 8002b26:	2300      	movs	r3, #0
 8002b28:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 8002b2c:	e02a      	b.n	8002b84 <stm32wb_at_client_Process_rx_frame+0x134c>
    {
      if( strncmp(str_local, AT_BLE_EVT_STRING[current_evt], strlen(AT_BLE_EVT_STRING[current_evt])) == 0 )
 8002b2e:	4a5b      	ldr	r2, [pc, #364]	; (8002c9c <stm32wb_at_client_Process_rx_frame+0x1464>)
 8002b30:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002b34:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8002b38:	4a58      	ldr	r2, [pc, #352]	; (8002c9c <stm32wb_at_client_Process_rx_frame+0x1464>)
 8002b3a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002b3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7fd fb98 	bl	8000278 <strlen>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	4621      	mov	r1, r4
 8002b4e:	f8d7 01ec 	ldr.w	r0, [r7, #492]	; 0x1ec
 8002b52:	f009 f932 	bl	800bdba <strncmp>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d10e      	bne.n	8002b7a <stm32wb_at_client_Process_rx_frame+0x1342>
      {
        str_local += strlen(AT_BLE_EVT_STRING[current_evt]);
 8002b5c:	4a4f      	ldr	r2, [pc, #316]	; (8002c9c <stm32wb_at_client_Process_rx_frame+0x1464>)
 8002b5e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002b62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7fd fb86 	bl	8000278 <strlen>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8002b72:	4413      	add	r3, r2
 8002b74:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
        break;
 8002b78:	e008      	b.n	8002b8c <stm32wb_at_client_Process_rx_frame+0x1354>
    for( current_evt = 0 ; current_evt < (uint32_t)BLE_EVT_NONE ; current_evt++ )
 8002b7a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002b7e:	3301      	adds	r3, #1
 8002b80:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 8002b84:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002b88:	2b05      	cmp	r3, #5
 8002b8a:	d9d0      	bls.n	8002b2e <stm32wb_at_client_Process_rx_frame+0x12f6>
      }
    }
    if( current_evt == (uint32_t)BLE_EVT_NONE)
 8002b8c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002b90:	2b06      	cmp	r3, #6
 8002b92:	d103      	bne.n	8002b9c <stm32wb_at_client_Process_rx_frame+0x1364>
    {
      status = 1;
 8002b94:	2301      	movs	r3, #1
 8002b96:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
 8002b9a:	e21d      	b.n	8002fd8 <stm32wb_at_client_Process_rx_frame+0x17a0>
    }
    else
    {
      if (strncmp(str_local, AT_SET, strlen(AT_SET)) == 0)
 8002b9c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8002ba0:	781a      	ldrb	r2, [r3, #0]
 8002ba2:	4b3f      	ldr	r3, [pc, #252]	; (8002ca0 <stm32wb_at_client_Process_rx_frame+0x1468>)
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	f040 81e6 	bne.w	8002f7a <stm32wb_at_client_Process_rx_frame+0x1742>
      {
        str_local++;
 8002bae:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
        /* extract params regarding current command */
        switch (current_evt) {
 8002bb8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002bbc:	2b03      	cmp	r3, #3
 8002bbe:	f200 8202 	bhi.w	8002fc6 <stm32wb_at_client_Process_rx_frame+0x178e>
 8002bc2:	a201      	add	r2, pc, #4	; (adr r2, 8002bc8 <stm32wb_at_client_Process_rx_frame+0x1390>)
 8002bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bc8:	08002bd9 	.word	0x08002bd9
 8002bcc:	08002da9 	.word	0x08002da9
 8002bd0:	08002e45 	.word	0x08002e45
 8002bd4:	08002ee1 	.word	0x08002ee1
          case BLE_EVT_WRITE:
          {
            stm32wb_at_BLE_EVT_WRITE_t param;
            char * token;
            uint16_t data;
            status = 0;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7

            token = strtok(str_local, AT_SEPARATOR);
 8002bde:	492c      	ldr	r1, [pc, #176]	; (8002c90 <stm32wb_at_client_Process_rx_frame+0x1458>)
 8002be0:	f8d7 01ec 	ldr.w	r0, [r7, #492]	; 0x1ec
 8002be4:	f009 f8fc 	bl	800bde0 <strtok>
 8002be8:	f8c7 01d8 	str.w	r0, [r7, #472]	; 0x1d8
            if(token != NULL)
 8002bec:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d01e      	beq.n	8002c32 <stm32wb_at_client_Process_rx_frame+0x13fa>
            {
              errno = 0;
 8002bf4:	f009 f958 	bl	800bea8 <__errno>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	601a      	str	r2, [r3, #0]
              param.svc_index = (uint8_t)strtol(token, NULL, 0);
 8002bfe:	2200      	movs	r2, #0
 8002c00:	2100      	movs	r1, #0
 8002c02:	f8d7 01d8 	ldr.w	r0, [r7, #472]	; 0x1d8
 8002c06:	f009 f833 	bl	800bc70 <strtol>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	b2da      	uxtb	r2, r3
 8002c0e:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8002c12:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8002c16:	701a      	strb	r2, [r3, #0]
              if(errno != 0)
 8002c18:	f009 f946 	bl	800bea8 <__errno>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d00c      	beq.n	8002c3e <stm32wb_at_client_Process_rx_frame+0x1406>
              {
                status |= 1U;
 8002c24:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8002c28:	f043 0301 	orr.w	r3, r3, #1
 8002c2c:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
 8002c30:	e005      	b.n	8002c3e <stm32wb_at_client_Process_rx_frame+0x1406>
              }
            }
            else
            {
              status |= 1U;
 8002c32:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8002c36:	f043 0301 	orr.w	r3, r3, #1
 8002c3a:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
            }

            token = strtok(NULL, AT_SEPARATOR);
 8002c3e:	4914      	ldr	r1, [pc, #80]	; (8002c90 <stm32wb_at_client_Process_rx_frame+0x1458>)
 8002c40:	2000      	movs	r0, #0
 8002c42:	f009 f8cd 	bl	800bde0 <strtok>
 8002c46:	f8c7 01d8 	str.w	r0, [r7, #472]	; 0x1d8
            if(token != NULL)
 8002c4a:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d028      	beq.n	8002ca4 <stm32wb_at_client_Process_rx_frame+0x146c>
            {
              errno = 0;
 8002c52:	f009 f929 	bl	800bea8 <__errno>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2200      	movs	r2, #0
 8002c5a:	601a      	str	r2, [r3, #0]
              param.char_index = (uint8_t)strtol(token, NULL, 0);
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	2100      	movs	r1, #0
 8002c60:	f8d7 01d8 	ldr.w	r0, [r7, #472]	; 0x1d8
 8002c64:	f009 f804 	bl	800bc70 <strtol>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	b2da      	uxtb	r2, r3
 8002c6c:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8002c70:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8002c74:	705a      	strb	r2, [r3, #1]
              if(errno != 0)
 8002c76:	f009 f917 	bl	800bea8 <__errno>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d016      	beq.n	8002cb0 <stm32wb_at_client_Process_rx_frame+0x1478>
              {
                status |= 1U;
 8002c82:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8002c86:	f043 0301 	orr.w	r3, r3, #1
 8002c8a:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
 8002c8e:	e00f      	b.n	8002cb0 <stm32wb_at_client_Process_rx_frame+0x1478>
 8002c90:	0800e2a4 	.word	0x0800e2a4
 8002c94:	20000014 	.word	0x20000014
 8002c98:	0800e2a8 	.word	0x0800e2a8
 8002c9c:	200000ec 	.word	0x200000ec
 8002ca0:	0800e2ac 	.word	0x0800e2ac
              }
            }
            else
            {
              status |= 1U;
 8002ca4:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8002ca8:	f043 0301 	orr.w	r3, r3, #1
 8002cac:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
            }

            token = strtok(NULL, AT_SEPARATOR);
 8002cb0:	49cd      	ldr	r1, [pc, #820]	; (8002fe8 <stm32wb_at_client_Process_rx_frame+0x17b0>)
 8002cb2:	2000      	movs	r0, #0
 8002cb4:	f009 f894 	bl	800bde0 <strtok>
 8002cb8:	f8c7 01d8 	str.w	r0, [r7, #472]	; 0x1d8
            if(token != NULL)
 8002cbc:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d04d      	beq.n	8002d60 <stm32wb_at_client_Process_rx_frame+0x1528>
            {
              if( strncmp(token, "0x", 2) == 0U )
 8002cc4:	2202      	movs	r2, #2
 8002cc6:	49c9      	ldr	r1, [pc, #804]	; (8002fec <stm32wb_at_client_Process_rx_frame+0x17b4>)
 8002cc8:	f8d7 01d8 	ldr.w	r0, [r7, #472]	; 0x1d8
 8002ccc:	f009 f875 	bl	800bdba <strncmp>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d11a      	bne.n	8002d0c <stm32wb_at_client_Process_rx_frame+0x14d4>
              {
                param.val_tab_len = (uint8_t)(sizeof(param.val_tab) / sizeof(param.val_tab[0]));
 8002cd6:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8002cda:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8002cde:	22f5      	movs	r2, #245	; 0xf5
 8002ce0:	f883 20f7 	strb.w	r2, [r3, #247]	; 0xf7
                status |= str_to_byte_tab(token, &param.val_tab[0], &param.val_tab_len);                        
 8002ce4:	f107 0308 	add.w	r3, r7, #8
 8002ce8:	f103 02f7 	add.w	r2, r3, #247	; 0xf7
 8002cec:	f107 0308 	add.w	r3, r7, #8
 8002cf0:	3302      	adds	r3, #2
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	f8d7 01d8 	ldr.w	r0, [r7, #472]	; 0x1d8
 8002cf8:	f7fe fb76 	bl	80013e8 <str_to_byte_tab>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	461a      	mov	r2, r3
 8002d00:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8002d04:	4313      	orrs	r3, r2
 8002d06:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
 8002d0a:	e02f      	b.n	8002d6c <stm32wb_at_client_Process_rx_frame+0x1534>
              }
              else
              {
                errno = 0;
 8002d0c:	f009 f8cc 	bl	800bea8 <__errno>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2200      	movs	r2, #0
 8002d14:	601a      	str	r2, [r3, #0]
                data = (uint16_t)strtol(token, NULL, 0);
 8002d16:	2200      	movs	r2, #0
 8002d18:	2100      	movs	r1, #0
 8002d1a:	f8d7 01d8 	ldr.w	r0, [r7, #472]	; 0x1d8
 8002d1e:	f008 ffa7 	bl	800bc70 <strtol>
 8002d22:	4603      	mov	r3, r0
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
                if(errno != 0)
 8002d2a:	f009 f8bd 	bl	800bea8 <__errno>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d005      	beq.n	8002d42 <stm32wb_at_client_Process_rx_frame+0x150a>
                {
                  status |= 1U;
 8002d36:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8002d3a:	f043 0301 	orr.w	r3, r3, #1
 8002d3e:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
                }
                param.val_tab_len = (uint8_t)sizeof(uint16_t);
 8002d42:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8002d46:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8002d4a:	2202      	movs	r2, #2
 8002d4c:	f883 20f7 	strb.w	r2, [r3, #247]	; 0xf7
 8002d50:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
                (void)memcpy(&param.val_tab[0], &data, sizeof(uint16_t));
 8002d54:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8002d58:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8002d5c:	805a      	strh	r2, [r3, #2]
 8002d5e:	e005      	b.n	8002d6c <stm32wb_at_client_Process_rx_frame+0x1534>
              }
            }
            else
            {
              status |= 1U;
 8002d60:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8002d64:	f043 0301 	orr.w	r3, r3, #1
 8002d68:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
            }

            token = strtok(NULL, AT_SEPARATOR);
 8002d6c:	499e      	ldr	r1, [pc, #632]	; (8002fe8 <stm32wb_at_client_Process_rx_frame+0x17b0>)
 8002d6e:	2000      	movs	r0, #0
 8002d70:	f009 f836 	bl	800bde0 <strtok>
 8002d74:	f8c7 01d8 	str.w	r0, [r7, #472]	; 0x1d8
            if(token != NULL)
 8002d78:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d005      	beq.n	8002d8c <stm32wb_at_client_Process_rx_frame+0x1554>
            {
              status |= 1U;
 8002d80:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8002d84:	f043 0301 	orr.w	r3, r3, #1
 8002d88:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
            }

            if(status == 0U)
 8002d8c:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	f040 811a 	bne.w	8002fca <stm32wb_at_client_Process_rx_frame+0x1792>
            {
              status = stm32wb_at_BLE_EVT_WRITE_cb(&param);
 8002d96:	f107 0308 	add.w	r3, r7, #8
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f007 fbbe 	bl	800a51c <stm32wb_at_BLE_EVT_WRITE_cb>
 8002da0:	4603      	mov	r3, r0
 8002da2:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
            }
            break;
 8002da6:	e110      	b.n	8002fca <stm32wb_at_client_Process_rx_frame+0x1792>
          }
          case BLE_EVT_CONN:
          {
            stm32wb_at_BLE_EVT_CONN_t param;
            char * token;
            status = 0;
 8002da8:	2300      	movs	r3, #0
 8002daa:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7

            token = strtok(str_local, AT_SEPARATOR);
 8002dae:	498e      	ldr	r1, [pc, #568]	; (8002fe8 <stm32wb_at_client_Process_rx_frame+0x17b0>)
 8002db0:	f8d7 01ec 	ldr.w	r0, [r7, #492]	; 0x1ec
 8002db4:	f009 f814 	bl	800bde0 <strtok>
 8002db8:	f8c7 01dc 	str.w	r0, [r7, #476]	; 0x1dc
            if(token != NULL)
 8002dbc:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d01b      	beq.n	8002dfc <stm32wb_at_client_Process_rx_frame+0x15c4>
            {
              errno = 0;
 8002dc4:	f009 f870 	bl	800bea8 <__errno>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2200      	movs	r2, #0
 8002dcc:	601a      	str	r2, [r3, #0]
              param.status = (uint8_t)strtol(token, NULL, 0);
 8002dce:	2200      	movs	r2, #0
 8002dd0:	2100      	movs	r1, #0
 8002dd2:	f8d7 01dc 	ldr.w	r0, [r7, #476]	; 0x1dc
 8002dd6:	f008 ff4b 	bl	800bc70 <strtol>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	f887 3108 	strb.w	r3, [r7, #264]	; 0x108
              if(errno != 0)
 8002de2:	f009 f861 	bl	800bea8 <__errno>
 8002de6:	4603      	mov	r3, r0
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d00c      	beq.n	8002e08 <stm32wb_at_client_Process_rx_frame+0x15d0>
              {
                status |= 1U;
 8002dee:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8002df2:	f043 0301 	orr.w	r3, r3, #1
 8002df6:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
 8002dfa:	e005      	b.n	8002e08 <stm32wb_at_client_Process_rx_frame+0x15d0>
              }
            }
            else
            {
              status |= 1U;
 8002dfc:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8002e00:	f043 0301 	orr.w	r3, r3, #1
 8002e04:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
            }

            token = strtok(NULL, AT_SEPARATOR);
 8002e08:	4977      	ldr	r1, [pc, #476]	; (8002fe8 <stm32wb_at_client_Process_rx_frame+0x17b0>)
 8002e0a:	2000      	movs	r0, #0
 8002e0c:	f008 ffe8 	bl	800bde0 <strtok>
 8002e10:	f8c7 01dc 	str.w	r0, [r7, #476]	; 0x1dc
            if(token != NULL)
 8002e14:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d005      	beq.n	8002e28 <stm32wb_at_client_Process_rx_frame+0x15f0>
            {
              status |= 1U;
 8002e1c:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8002e20:	f043 0301 	orr.w	r3, r3, #1
 8002e24:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
            }

            if(status == 0U)
 8002e28:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	f040 80ce 	bne.w	8002fce <stm32wb_at_client_Process_rx_frame+0x1796>
            {
              status = stm32wb_at_BLE_EVT_CONN_cb(&param);
 8002e32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002e36:	4618      	mov	r0, r3
 8002e38:	f007 fb8c 	bl	800a554 <stm32wb_at_BLE_EVT_CONN_cb>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
            }
            break;
 8002e42:	e0c4      	b.n	8002fce <stm32wb_at_client_Process_rx_frame+0x1796>
          }
          case BLE_EVT_UPD_CONN:
          {
            stm32wb_at_BLE_EVT_UPD_CONN_t param;
            char * token;
            status = 0;
 8002e44:	2300      	movs	r3, #0
 8002e46:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7

            token = strtok(str_local, AT_SEPARATOR);
 8002e4a:	4967      	ldr	r1, [pc, #412]	; (8002fe8 <stm32wb_at_client_Process_rx_frame+0x17b0>)
 8002e4c:	f8d7 01ec 	ldr.w	r0, [r7, #492]	; 0x1ec
 8002e50:	f008 ffc6 	bl	800bde0 <strtok>
 8002e54:	f8c7 01e0 	str.w	r0, [r7, #480]	; 0x1e0
            if(token != NULL)
 8002e58:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d01b      	beq.n	8002e98 <stm32wb_at_client_Process_rx_frame+0x1660>
            {
              errno = 0;
 8002e60:	f009 f822 	bl	800bea8 <__errno>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2200      	movs	r2, #0
 8002e68:	601a      	str	r2, [r3, #0]
              param.status = (uint8_t)strtol(token, NULL, 0);
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	2100      	movs	r1, #0
 8002e6e:	f8d7 01e0 	ldr.w	r0, [r7, #480]	; 0x1e0
 8002e72:	f008 fefd 	bl	800bc70 <strtol>
 8002e76:	4603      	mov	r3, r0
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
              if(errno != 0)
 8002e7e:	f009 f813 	bl	800bea8 <__errno>
 8002e82:	4603      	mov	r3, r0
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d00c      	beq.n	8002ea4 <stm32wb_at_client_Process_rx_frame+0x166c>
              {
                status |= 1U;
 8002e8a:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8002e8e:	f043 0301 	orr.w	r3, r3, #1
 8002e92:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
 8002e96:	e005      	b.n	8002ea4 <stm32wb_at_client_Process_rx_frame+0x166c>
              }
            }
            else
            {
              status |= 1U;
 8002e98:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8002e9c:	f043 0301 	orr.w	r3, r3, #1
 8002ea0:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
            }

            token = strtok(NULL, AT_SEPARATOR);
 8002ea4:	4950      	ldr	r1, [pc, #320]	; (8002fe8 <stm32wb_at_client_Process_rx_frame+0x17b0>)
 8002ea6:	2000      	movs	r0, #0
 8002ea8:	f008 ff9a 	bl	800bde0 <strtok>
 8002eac:	f8c7 01e0 	str.w	r0, [r7, #480]	; 0x1e0
            if(token != NULL)
 8002eb0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d005      	beq.n	8002ec4 <stm32wb_at_client_Process_rx_frame+0x168c>
            {
              status |= 1U;
 8002eb8:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8002ebc:	f043 0301 	orr.w	r3, r3, #1
 8002ec0:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
            }

            if(status == 0U)
 8002ec4:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	f040 8082 	bne.w	8002fd2 <stm32wb_at_client_Process_rx_frame+0x179a>
            {
              status = stm32wb_at_BLE_EVT_UPD_CONN_cb(&param);
 8002ece:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f7fe fc06 	bl	80016e4 <stm32wb_at_BLE_EVT_UPD_CONN_cb>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
            }
            break;
 8002ede:	e078      	b.n	8002fd2 <stm32wb_at_client_Process_rx_frame+0x179a>
          }
          case BLE_EVT_VALUE_CONFIRM:
          {
            stm32wb_at_BLE_EVT_VALUE_CONFIRM_t param;
            char * token;
            status = 0;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
            
            token = strtok(str_local, AT_SEPARATOR);
 8002ee6:	4940      	ldr	r1, [pc, #256]	; (8002fe8 <stm32wb_at_client_Process_rx_frame+0x17b0>)
 8002ee8:	f8d7 01ec 	ldr.w	r0, [r7, #492]	; 0x1ec
 8002eec:	f008 ff78 	bl	800bde0 <strtok>
 8002ef0:	f8c7 01e4 	str.w	r0, [r7, #484]	; 0x1e4
            if(token != NULL)
 8002ef4:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d01b      	beq.n	8002f34 <stm32wb_at_client_Process_rx_frame+0x16fc>
            {
              errno = 0;
 8002efc:	f008 ffd4 	bl	800bea8 <__errno>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2200      	movs	r2, #0
 8002f04:	601a      	str	r2, [r3, #0]
              param.numeric_value = (uint8_t)strtol(token, NULL, 0);
 8002f06:	2200      	movs	r2, #0
 8002f08:	2100      	movs	r1, #0
 8002f0a:	f8d7 01e4 	ldr.w	r0, [r7, #484]	; 0x1e4
 8002f0e:	f008 feaf 	bl	800bc70 <strtol>
 8002f12:	4603      	mov	r3, r0
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
              if(errno != 0)
 8002f1a:	f008 ffc5 	bl	800bea8 <__errno>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d00c      	beq.n	8002f40 <stm32wb_at_client_Process_rx_frame+0x1708>
              {
                status |= 1U;
 8002f26:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8002f2a:	f043 0301 	orr.w	r3, r3, #1
 8002f2e:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
 8002f32:	e005      	b.n	8002f40 <stm32wb_at_client_Process_rx_frame+0x1708>
              }
            }
            else
            {
              status |= 1U;
 8002f34:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8002f38:	f043 0301 	orr.w	r3, r3, #1
 8002f3c:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
            }

            token = strtok(NULL, AT_SEPARATOR);
 8002f40:	4929      	ldr	r1, [pc, #164]	; (8002fe8 <stm32wb_at_client_Process_rx_frame+0x17b0>)
 8002f42:	2000      	movs	r0, #0
 8002f44:	f008 ff4c 	bl	800bde0 <strtok>
 8002f48:	f8c7 01e4 	str.w	r0, [r7, #484]	; 0x1e4
            if(token != NULL)
 8002f4c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d005      	beq.n	8002f60 <stm32wb_at_client_Process_rx_frame+0x1728>
            {
              status |= 1U;
 8002f54:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8002f58:	f043 0301 	orr.w	r3, r3, #1
 8002f5c:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
            }

            if(status == 0U)
 8002f60:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d136      	bne.n	8002fd6 <stm32wb_at_client_Process_rx_frame+0x179e>
            {
              status = stm32wb_at_BLE_EVT_VALUE_CONFIRM_cb(&param);
 8002f68:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f7fe fbc4 	bl	80016fa <stm32wb_at_BLE_EVT_VALUE_CONFIRM_cb>
 8002f72:	4603      	mov	r3, r0
 8002f74:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
            }
            break;
 8002f78:	e02d      	b.n	8002fd6 <stm32wb_at_client_Process_rx_frame+0x179e>
            break;
        }
      }
      else
      {
        status = 1;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
 8002f80:	e02a      	b.n	8002fd8 <stm32wb_at_client_Process_rx_frame+0x17a0>
            break;
 8002f82:	bf00      	nop
 8002f84:	e028      	b.n	8002fd8 <stm32wb_at_client_Process_rx_frame+0x17a0>
            break;            
 8002f86:	bf00      	nop
 8002f88:	e026      	b.n	8002fd8 <stm32wb_at_client_Process_rx_frame+0x17a0>
            break;
 8002f8a:	bf00      	nop
 8002f8c:	e024      	b.n	8002fd8 <stm32wb_at_client_Process_rx_frame+0x17a0>
            break;
 8002f8e:	bf00      	nop
 8002f90:	e022      	b.n	8002fd8 <stm32wb_at_client_Process_rx_frame+0x17a0>
            break;
 8002f92:	bf00      	nop
 8002f94:	e020      	b.n	8002fd8 <stm32wb_at_client_Process_rx_frame+0x17a0>
            break;
 8002f96:	bf00      	nop
 8002f98:	e01e      	b.n	8002fd8 <stm32wb_at_client_Process_rx_frame+0x17a0>
            break;
 8002f9a:	bf00      	nop
 8002f9c:	e01c      	b.n	8002fd8 <stm32wb_at_client_Process_rx_frame+0x17a0>
            break;
 8002f9e:	bf00      	nop
 8002fa0:	e01a      	b.n	8002fd8 <stm32wb_at_client_Process_rx_frame+0x17a0>
            break;
 8002fa2:	bf00      	nop
 8002fa4:	e018      	b.n	8002fd8 <stm32wb_at_client_Process_rx_frame+0x17a0>
            break;
 8002fa6:	bf00      	nop
 8002fa8:	e016      	b.n	8002fd8 <stm32wb_at_client_Process_rx_frame+0x17a0>
            break;
 8002faa:	bf00      	nop
 8002fac:	e014      	b.n	8002fd8 <stm32wb_at_client_Process_rx_frame+0x17a0>
            break;
 8002fae:	bf00      	nop
 8002fb0:	e012      	b.n	8002fd8 <stm32wb_at_client_Process_rx_frame+0x17a0>
            break;
 8002fb2:	bf00      	nop
 8002fb4:	e010      	b.n	8002fd8 <stm32wb_at_client_Process_rx_frame+0x17a0>
            break;
 8002fb6:	bf00      	nop
 8002fb8:	e00e      	b.n	8002fd8 <stm32wb_at_client_Process_rx_frame+0x17a0>
            break;
 8002fba:	bf00      	nop
 8002fbc:	e00c      	b.n	8002fd8 <stm32wb_at_client_Process_rx_frame+0x17a0>
            break;
 8002fbe:	bf00      	nop
 8002fc0:	e00a      	b.n	8002fd8 <stm32wb_at_client_Process_rx_frame+0x17a0>
            break;
 8002fc2:	bf00      	nop
 8002fc4:	e008      	b.n	8002fd8 <stm32wb_at_client_Process_rx_frame+0x17a0>
            break;
 8002fc6:	bf00      	nop
 8002fc8:	e006      	b.n	8002fd8 <stm32wb_at_client_Process_rx_frame+0x17a0>
            break;
 8002fca:	bf00      	nop
 8002fcc:	e004      	b.n	8002fd8 <stm32wb_at_client_Process_rx_frame+0x17a0>
            break;
 8002fce:	bf00      	nop
 8002fd0:	e002      	b.n	8002fd8 <stm32wb_at_client_Process_rx_frame+0x17a0>
            break;
 8002fd2:	bf00      	nop
 8002fd4:	e000      	b.n	8002fd8 <stm32wb_at_client_Process_rx_frame+0x17a0>
            break;
 8002fd6:	bf00      	nop
      }
    }
  }

  return status;
 8002fd8:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f507 77fe 	add.w	r7, r7, #508	; 0x1fc
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd90      	pop	{r4, r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	0800e2a4 	.word	0x0800e2a4
 8002fec:	0800e2b0 	.word	0x0800e2b0

08002ff0 <stm32wb_at_client_Set>:
 * @param cmd command code
 * @param param pointer to parameters of command
 * @retval 0 in case of success, an error code otherwise
 */
uint8_t stm32wb_at_client_Set(stm32wb_at_BLE_CMD_t cmd, void *param)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b0b2      	sub	sp, #200	; 0xc8
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	6039      	str	r1, [r7, #0]
 8002ffa:	71fb      	strb	r3, [r7, #7]
  uint8_t status;

  (void)stm32wb_at_client_Wait_ready();
 8002ffc:	f000 fc88 	bl	8003910 <stm32wb_at_client_Wait_ready>

  if(cmd < BLE_NONE)
 8003000:	79fb      	ldrb	r3, [r7, #7]
 8003002:	2b14      	cmp	r3, #20
 8003004:	f200 8468 	bhi.w	80038d8 <stm32wb_at_client_Set+0x8e8>
  {
    client_current_cmd = cmd;
 8003008:	4abc      	ldr	r2, [pc, #752]	; (80032fc <stm32wb_at_client_Set+0x30c>)
 800300a:	79fb      	ldrb	r3, [r7, #7]
 800300c:	7013      	strb	r3, [r2, #0]

    (void)strcpy(client_buff_tx, AT_PRE_CMD);
 800300e:	4bbc      	ldr	r3, [pc, #752]	; (8003300 <stm32wb_at_client_Set+0x310>)
 8003010:	4abc      	ldr	r2, [pc, #752]	; (8003304 <stm32wb_at_client_Set+0x314>)
 8003012:	601a      	str	r2, [r3, #0]
    (void)strcat(client_buff_tx, AT_BLE_CMD_STRING[cmd]);
 8003014:	79fb      	ldrb	r3, [r7, #7]
 8003016:	4abc      	ldr	r2, [pc, #752]	; (8003308 <stm32wb_at_client_Set+0x318>)
 8003018:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800301c:	4619      	mov	r1, r3
 800301e:	48b8      	ldr	r0, [pc, #736]	; (8003300 <stm32wb_at_client_Set+0x310>)
 8003020:	f008 febc 	bl	800bd9c <strcat>
    (void)strcat(client_buff_tx, AT_SET);
 8003024:	48b6      	ldr	r0, [pc, #728]	; (8003300 <stm32wb_at_client_Set+0x310>)
 8003026:	f7fd f927 	bl	8000278 <strlen>
 800302a:	4603      	mov	r3, r0
 800302c:	461a      	mov	r2, r3
 800302e:	4bb4      	ldr	r3, [pc, #720]	; (8003300 <stm32wb_at_client_Set+0x310>)
 8003030:	4413      	add	r3, r2
 8003032:	49b6      	ldr	r1, [pc, #728]	; (800330c <stm32wb_at_client_Set+0x31c>)
 8003034:	461a      	mov	r2, r3
 8003036:	460b      	mov	r3, r1
 8003038:	881b      	ldrh	r3, [r3, #0]
 800303a:	8013      	strh	r3, [r2, #0]

    switch (cmd) {
 800303c:	79fb      	ldrb	r3, [r7, #7]
 800303e:	3b01      	subs	r3, #1
 8003040:	2b13      	cmp	r3, #19
 8003042:	f200 8423 	bhi.w	800388c <stm32wb_at_client_Set+0x89c>
 8003046:	a201      	add	r2, pc, #4	; (adr r2, 800304c <stm32wb_at_client_Set+0x5c>)
 8003048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800304c:	0800309d 	.word	0x0800309d
 8003050:	08003179 	.word	0x08003179
 8003054:	0800345b 	.word	0x0800345b
 8003058:	08003433 	.word	0x08003433
 800305c:	080035e5 	.word	0x080035e5
 8003060:	0800388d 	.word	0x0800388d
 8003064:	0800388d 	.word	0x0800388d
 8003068:	080031cf 	.word	0x080031cf
 800306c:	0800388d 	.word	0x0800388d
 8003070:	0800388d 	.word	0x0800388d
 8003074:	0800388d 	.word	0x0800388d
 8003078:	08003795 	.word	0x08003795
 800307c:	0800388d 	.word	0x0800388d
 8003080:	080037bd 	.word	0x080037bd
 8003084:	0800381b 	.word	0x0800381b
 8003088:	08003879 	.word	0x08003879
 800308c:	080031a1 	.word	0x080031a1
 8003090:	080031f5 	.word	0x080031f5
 8003094:	0800332d 	.word	0x0800332d
 8003098:	0800355b 	.word	0x0800355b
      case BLE_SVC:
      {
        stm32wb_at_BLE_SVC_t *p = (stm32wb_at_BLE_SVC_t*)param;
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        char str_tmp[8];

        (void)sprintf(str_tmp, "%d", p->index);
 80030a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	461a      	mov	r2, r3
 80030aa:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80030ae:	4998      	ldr	r1, [pc, #608]	; (8003310 <stm32wb_at_client_Set+0x320>)
 80030b0:	4618      	mov	r0, r3
 80030b2:	f007 fe1f 	bl	800acf4 <siprintf>
        (void)strcat(client_buff_tx, str_tmp);
 80030b6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80030ba:	4619      	mov	r1, r3
 80030bc:	4890      	ldr	r0, [pc, #576]	; (8003300 <stm32wb_at_client_Set+0x310>)
 80030be:	f008 fe6d 	bl	800bd9c <strcat>
        if(p->index >= SRV_CUSTOM_APP_SVC_OFFSET)
 80030c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	f240 83e1 	bls.w	8003890 <stm32wb_at_client_Set+0x8a0>
        {
          (void)strcat(client_buff_tx, AT_SEPARATOR);
 80030ce:	488c      	ldr	r0, [pc, #560]	; (8003300 <stm32wb_at_client_Set+0x310>)
 80030d0:	f7fd f8d2 	bl	8000278 <strlen>
 80030d4:	4603      	mov	r3, r0
 80030d6:	461a      	mov	r2, r3
 80030d8:	4b89      	ldr	r3, [pc, #548]	; (8003300 <stm32wb_at_client_Set+0x310>)
 80030da:	4413      	add	r3, r2
 80030dc:	498d      	ldr	r1, [pc, #564]	; (8003314 <stm32wb_at_client_Set+0x324>)
 80030de:	461a      	mov	r2, r3
 80030e0:	460b      	mov	r3, r1
 80030e2:	881b      	ldrh	r3, [r3, #0]
 80030e4:	8013      	strh	r3, [r2, #0]
          
          (void)sprintf(str_tmp, "%d", p->svc_uuid_type);
 80030e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80030ea:	785b      	ldrb	r3, [r3, #1]
 80030ec:	461a      	mov	r2, r3
 80030ee:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80030f2:	4987      	ldr	r1, [pc, #540]	; (8003310 <stm32wb_at_client_Set+0x320>)
 80030f4:	4618      	mov	r0, r3
 80030f6:	f007 fdfd 	bl	800acf4 <siprintf>
          (void)strcat(client_buff_tx, str_tmp);
 80030fa:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80030fe:	4619      	mov	r1, r3
 8003100:	487f      	ldr	r0, [pc, #508]	; (8003300 <stm32wb_at_client_Set+0x310>)
 8003102:	f008 fe4b 	bl	800bd9c <strcat>
          (void)strcat(client_buff_tx, AT_SEPARATOR);
 8003106:	487e      	ldr	r0, [pc, #504]	; (8003300 <stm32wb_at_client_Set+0x310>)
 8003108:	f7fd f8b6 	bl	8000278 <strlen>
 800310c:	4603      	mov	r3, r0
 800310e:	461a      	mov	r2, r3
 8003110:	4b7b      	ldr	r3, [pc, #492]	; (8003300 <stm32wb_at_client_Set+0x310>)
 8003112:	4413      	add	r3, r2
 8003114:	497f      	ldr	r1, [pc, #508]	; (8003314 <stm32wb_at_client_Set+0x324>)
 8003116:	461a      	mov	r2, r3
 8003118:	460b      	mov	r3, r1
 800311a:	881b      	ldrh	r3, [r3, #0]
 800311c:	8013      	strh	r3, [r2, #0]
          
          (void)sprintf(str_tmp, "0x%04x", p->svc_uuid);
 800311e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003122:	885b      	ldrh	r3, [r3, #2]
 8003124:	461a      	mov	r2, r3
 8003126:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800312a:	497b      	ldr	r1, [pc, #492]	; (8003318 <stm32wb_at_client_Set+0x328>)
 800312c:	4618      	mov	r0, r3
 800312e:	f007 fde1 	bl	800acf4 <siprintf>
          (void)strcat(client_buff_tx, str_tmp);
 8003132:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003136:	4619      	mov	r1, r3
 8003138:	4871      	ldr	r0, [pc, #452]	; (8003300 <stm32wb_at_client_Set+0x310>)
 800313a:	f008 fe2f 	bl	800bd9c <strcat>
          (void)strcat(client_buff_tx, AT_SEPARATOR);
 800313e:	4870      	ldr	r0, [pc, #448]	; (8003300 <stm32wb_at_client_Set+0x310>)
 8003140:	f7fd f89a 	bl	8000278 <strlen>
 8003144:	4603      	mov	r3, r0
 8003146:	461a      	mov	r2, r3
 8003148:	4b6d      	ldr	r3, [pc, #436]	; (8003300 <stm32wb_at_client_Set+0x310>)
 800314a:	4413      	add	r3, r2
 800314c:	4971      	ldr	r1, [pc, #452]	; (8003314 <stm32wb_at_client_Set+0x324>)
 800314e:	461a      	mov	r2, r3
 8003150:	460b      	mov	r3, r1
 8003152:	881b      	ldrh	r3, [r3, #0]
 8003154:	8013      	strh	r3, [r2, #0]
          
          (void)sprintf(str_tmp, "%d", p->max_attr_record);
 8003156:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800315a:	791b      	ldrb	r3, [r3, #4]
 800315c:	461a      	mov	r2, r3
 800315e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003162:	496b      	ldr	r1, [pc, #428]	; (8003310 <stm32wb_at_client_Set+0x320>)
 8003164:	4618      	mov	r0, r3
 8003166:	f007 fdc5 	bl	800acf4 <siprintf>
          (void)strcat(client_buff_tx, str_tmp);
 800316a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800316e:	4619      	mov	r1, r3
 8003170:	4863      	ldr	r0, [pc, #396]	; (8003300 <stm32wb_at_client_Set+0x310>)
 8003172:	f008 fe13 	bl	800bd9c <strcat>
        }
        break;
 8003176:	e38b      	b.n	8003890 <stm32wb_at_client_Set+0x8a0>
      }
      case BLE_INIT:
      {
        stm32wb_at_BLE_INIT_t *p = (stm32wb_at_BLE_INIT_t*)param;
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        char str_tmp[8];
        
        (void)sprintf(str_tmp, "%d", p->init_set);
 800317e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	461a      	mov	r2, r3
 8003186:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800318a:	4961      	ldr	r1, [pc, #388]	; (8003310 <stm32wb_at_client_Set+0x320>)
 800318c:	4618      	mov	r0, r3
 800318e:	f007 fdb1 	bl	800acf4 <siprintf>
        (void)strcat(client_buff_tx, str_tmp);
 8003192:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003196:	4619      	mov	r1, r3
 8003198:	4859      	ldr	r0, [pc, #356]	; (8003300 <stm32wb_at_client_Set+0x310>)
 800319a:	f008 fdff 	bl	800bd9c <strcat>

        break;
 800319e:	e37a      	b.n	8003896 <stm32wb_at_client_Set+0x8a6>
      }
      case BLE_RF_POWER:
      {
        stm32wb_at_BLE_RF_POWER_t *p = (stm32wb_at_BLE_RF_POWER_t*)param;
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
        char str_tmp[8];
        
        (void)sprintf(str_tmp, "%.2f", p->tx_power);
 80031a6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4618      	mov	r0, r3
 80031ae:	f7fd f9d9 	bl	8000564 <__aeabi_f2d>
 80031b2:	4602      	mov	r2, r0
 80031b4:	460b      	mov	r3, r1
 80031b6:	f107 0070 	add.w	r0, r7, #112	; 0x70
 80031ba:	4958      	ldr	r1, [pc, #352]	; (800331c <stm32wb_at_client_Set+0x32c>)
 80031bc:	f007 fd9a 	bl	800acf4 <siprintf>
        (void)strcat(client_buff_tx, str_tmp);
 80031c0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80031c4:	4619      	mov	r1, r3
 80031c6:	484e      	ldr	r0, [pc, #312]	; (8003300 <stm32wb_at_client_Set+0x310>)
 80031c8:	f008 fde8 	bl	800bd9c <strcat>

        break;
 80031cc:	e363      	b.n	8003896 <stm32wb_at_client_Set+0x8a6>
      {
        break;
      }
      case BLE_PASSKEY_RESP:
      {
        stm32wb_at_BLE_PASSKEY_RESP_t *p = (stm32wb_at_BLE_PASSKEY_RESP_t*)param;
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        char str_tmp[8];
        
        #if defined(__GNUC__) && !defined(__ARMCC_VERSION)
        (void)sprintf(str_tmp, "%ld", p->pass_key_resp);
 80031d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80031de:	4950      	ldr	r1, [pc, #320]	; (8003320 <stm32wb_at_client_Set+0x330>)
 80031e0:	4618      	mov	r0, r3
 80031e2:	f007 fd87 	bl	800acf4 <siprintf>
        #else
        (void)sprintf(str_tmp, "%d", p->pass_key_resp);
        #endif
        (void)strcat(client_buff_tx, str_tmp);
 80031e6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80031ea:	4619      	mov	r1, r3
 80031ec:	4844      	ldr	r0, [pc, #272]	; (8003300 <stm32wb_at_client_Set+0x310>)
 80031ee:	f008 fdd5 	bl	800bd9c <strcat>

        break;
 80031f2:	e350      	b.n	8003896 <stm32wb_at_client_Set+0x8a6>
      {
        break;
      }
      case BLE_NOTIF_VAL:
      {
        stm32wb_at_BLE_NOTIF_VAL_t *p = (stm32wb_at_BLE_NOTIF_VAL_t*)param;
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        uint8_t i;
        char str_tmp[8];

        (void)sprintf(str_tmp, "%d", p->svc_index);
 80031fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	461a      	mov	r2, r3
 8003202:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003206:	4942      	ldr	r1, [pc, #264]	; (8003310 <stm32wb_at_client_Set+0x320>)
 8003208:	4618      	mov	r0, r3
 800320a:	f007 fd73 	bl	800acf4 <siprintf>
        (void)strcat(client_buff_tx, str_tmp);
 800320e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003212:	4619      	mov	r1, r3
 8003214:	483a      	ldr	r0, [pc, #232]	; (8003300 <stm32wb_at_client_Set+0x310>)
 8003216:	f008 fdc1 	bl	800bd9c <strcat>
        (void)strcat(client_buff_tx, AT_SEPARATOR);
 800321a:	4839      	ldr	r0, [pc, #228]	; (8003300 <stm32wb_at_client_Set+0x310>)
 800321c:	f7fd f82c 	bl	8000278 <strlen>
 8003220:	4603      	mov	r3, r0
 8003222:	461a      	mov	r2, r3
 8003224:	4b36      	ldr	r3, [pc, #216]	; (8003300 <stm32wb_at_client_Set+0x310>)
 8003226:	4413      	add	r3, r2
 8003228:	493a      	ldr	r1, [pc, #232]	; (8003314 <stm32wb_at_client_Set+0x324>)
 800322a:	461a      	mov	r2, r3
 800322c:	460b      	mov	r3, r1
 800322e:	881b      	ldrh	r3, [r3, #0]
 8003230:	8013      	strh	r3, [r2, #0]

        (void)sprintf(str_tmp, "%d", p->char_index);
 8003232:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003236:	785b      	ldrb	r3, [r3, #1]
 8003238:	461a      	mov	r2, r3
 800323a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800323e:	4934      	ldr	r1, [pc, #208]	; (8003310 <stm32wb_at_client_Set+0x320>)
 8003240:	4618      	mov	r0, r3
 8003242:	f007 fd57 	bl	800acf4 <siprintf>
        (void)strcat(client_buff_tx, str_tmp);
 8003246:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800324a:	4619      	mov	r1, r3
 800324c:	482c      	ldr	r0, [pc, #176]	; (8003300 <stm32wb_at_client_Set+0x310>)
 800324e:	f008 fda5 	bl	800bd9c <strcat>
        (void)strcat(client_buff_tx, AT_SEPARATOR);
 8003252:	482b      	ldr	r0, [pc, #172]	; (8003300 <stm32wb_at_client_Set+0x310>)
 8003254:	f7fd f810 	bl	8000278 <strlen>
 8003258:	4603      	mov	r3, r0
 800325a:	461a      	mov	r2, r3
 800325c:	4b28      	ldr	r3, [pc, #160]	; (8003300 <stm32wb_at_client_Set+0x310>)
 800325e:	4413      	add	r3, r2
 8003260:	492c      	ldr	r1, [pc, #176]	; (8003314 <stm32wb_at_client_Set+0x324>)
 8003262:	461a      	mov	r2, r3
 8003264:	460b      	mov	r3, r1
 8003266:	881b      	ldrh	r3, [r3, #0]
 8003268:	8013      	strh	r3, [r2, #0]
        
        if(p->val_tab_len <= 1U)
 800326a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800326e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003272:	2b01      	cmp	r3, #1
 8003274:	d810      	bhi.n	8003298 <stm32wb_at_client_Set+0x2a8>
        {
          (void)sprintf(str_tmp, "%d", (uint16_t)p->val_tab[0]);
 8003276:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800327a:	789b      	ldrb	r3, [r3, #2]
 800327c:	461a      	mov	r2, r3
 800327e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003282:	4923      	ldr	r1, [pc, #140]	; (8003310 <stm32wb_at_client_Set+0x320>)
 8003284:	4618      	mov	r0, r3
 8003286:	f007 fd35 	bl	800acf4 <siprintf>
          (void)strcat(client_buff_tx, str_tmp);
 800328a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800328e:	4619      	mov	r1, r3
 8003290:	481b      	ldr	r0, [pc, #108]	; (8003300 <stm32wb_at_client_Set+0x310>)
 8003292:	f008 fd83 	bl	800bd9c <strcat>
          {
            (void)sprintf( str_tmp, "%02x", p->val_tab[i] );
            (void)strcat(client_buff_tx, str_tmp);
          }
        }
        break;
 8003296:	e2fe      	b.n	8003896 <stm32wb_at_client_Set+0x8a6>
          (void)strcat(client_buff_tx, "0x");
 8003298:	4819      	ldr	r0, [pc, #100]	; (8003300 <stm32wb_at_client_Set+0x310>)
 800329a:	f7fc ffed 	bl	8000278 <strlen>
 800329e:	4603      	mov	r3, r0
 80032a0:	461a      	mov	r2, r3
 80032a2:	4b17      	ldr	r3, [pc, #92]	; (8003300 <stm32wb_at_client_Set+0x310>)
 80032a4:	4413      	add	r3, r2
 80032a6:	4a1f      	ldr	r2, [pc, #124]	; (8003324 <stm32wb_at_client_Set+0x334>)
 80032a8:	8811      	ldrh	r1, [r2, #0]
 80032aa:	7892      	ldrb	r2, [r2, #2]
 80032ac:	8019      	strh	r1, [r3, #0]
 80032ae:	709a      	strb	r2, [r3, #2]
          for(i = 0 ; i < p->val_tab_len ; i++)
 80032b0:	2300      	movs	r3, #0
 80032b2:	f887 30c6 	strb.w	r3, [r7, #198]	; 0xc6
 80032b6:	e017      	b.n	80032e8 <stm32wb_at_client_Set+0x2f8>
            (void)sprintf( str_tmp, "%02x", p->val_tab[i] );
 80032b8:	f897 30c6 	ldrb.w	r3, [r7, #198]	; 0xc6
 80032bc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80032c0:	4413      	add	r3, r2
 80032c2:	789b      	ldrb	r3, [r3, #2]
 80032c4:	461a      	mov	r2, r3
 80032c6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80032ca:	4917      	ldr	r1, [pc, #92]	; (8003328 <stm32wb_at_client_Set+0x338>)
 80032cc:	4618      	mov	r0, r3
 80032ce:	f007 fd11 	bl	800acf4 <siprintf>
            (void)strcat(client_buff_tx, str_tmp);
 80032d2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80032d6:	4619      	mov	r1, r3
 80032d8:	4809      	ldr	r0, [pc, #36]	; (8003300 <stm32wb_at_client_Set+0x310>)
 80032da:	f008 fd5f 	bl	800bd9c <strcat>
          for(i = 0 ; i < p->val_tab_len ; i++)
 80032de:	f897 30c6 	ldrb.w	r3, [r7, #198]	; 0xc6
 80032e2:	3301      	adds	r3, #1
 80032e4:	f887 30c6 	strb.w	r3, [r7, #198]	; 0xc6
 80032e8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80032ec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80032f0:	f897 20c6 	ldrb.w	r2, [r7, #198]	; 0xc6
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d3df      	bcc.n	80032b8 <stm32wb_at_client_Set+0x2c8>
        break;
 80032f8:	e2cd      	b.n	8003896 <stm32wb_at_client_Set+0x8a6>
 80032fa:	bf00      	nop
 80032fc:	20000390 	.word	0x20000390
 8003300:	20000350 	.word	0x20000350
 8003304:	002b5441 	.word	0x002b5441
 8003308:	20000094 	.word	0x20000094
 800330c:	0800e2ac 	.word	0x0800e2ac
 8003310:	0800e2b4 	.word	0x0800e2b4
 8003314:	0800e2a4 	.word	0x0800e2a4
 8003318:	0800e2b8 	.word	0x0800e2b8
 800331c:	0800e2c0 	.word	0x0800e2c0
 8003320:	0800e2c8 	.word	0x0800e2c8
 8003324:	0800e2b0 	.word	0x0800e2b0
 8003328:	0800e2cc 	.word	0x0800e2cc
      }
      case BLE_INDIC_VAL:
      {
        stm32wb_at_BLE_INDIC_VAL_t *p = (stm32wb_at_BLE_INDIC_VAL_t*)param;
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
        uint8_t i;
        char str_tmp[8];

        (void)sprintf(str_tmp, "%d", p->svc_index);
 8003332:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	461a      	mov	r2, r3
 800333a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800333e:	49a2      	ldr	r1, [pc, #648]	; (80035c8 <stm32wb_at_client_Set+0x5d8>)
 8003340:	4618      	mov	r0, r3
 8003342:	f007 fcd7 	bl	800acf4 <siprintf>
        (void)strcat(client_buff_tx, str_tmp);
 8003346:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800334a:	4619      	mov	r1, r3
 800334c:	489f      	ldr	r0, [pc, #636]	; (80035cc <stm32wb_at_client_Set+0x5dc>)
 800334e:	f008 fd25 	bl	800bd9c <strcat>
        (void)strcat(client_buff_tx, AT_SEPARATOR);
 8003352:	489e      	ldr	r0, [pc, #632]	; (80035cc <stm32wb_at_client_Set+0x5dc>)
 8003354:	f7fc ff90 	bl	8000278 <strlen>
 8003358:	4603      	mov	r3, r0
 800335a:	461a      	mov	r2, r3
 800335c:	4b9b      	ldr	r3, [pc, #620]	; (80035cc <stm32wb_at_client_Set+0x5dc>)
 800335e:	4413      	add	r3, r2
 8003360:	499b      	ldr	r1, [pc, #620]	; (80035d0 <stm32wb_at_client_Set+0x5e0>)
 8003362:	461a      	mov	r2, r3
 8003364:	460b      	mov	r3, r1
 8003366:	881b      	ldrh	r3, [r3, #0]
 8003368:	8013      	strh	r3, [r2, #0]

        (void)sprintf(str_tmp, "%d", p->char_index);
 800336a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800336e:	785b      	ldrb	r3, [r3, #1]
 8003370:	461a      	mov	r2, r3
 8003372:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003376:	4994      	ldr	r1, [pc, #592]	; (80035c8 <stm32wb_at_client_Set+0x5d8>)
 8003378:	4618      	mov	r0, r3
 800337a:	f007 fcbb 	bl	800acf4 <siprintf>
        (void)strcat(client_buff_tx, str_tmp);
 800337e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003382:	4619      	mov	r1, r3
 8003384:	4891      	ldr	r0, [pc, #580]	; (80035cc <stm32wb_at_client_Set+0x5dc>)
 8003386:	f008 fd09 	bl	800bd9c <strcat>
        (void)strcat(client_buff_tx, AT_SEPARATOR);
 800338a:	4890      	ldr	r0, [pc, #576]	; (80035cc <stm32wb_at_client_Set+0x5dc>)
 800338c:	f7fc ff74 	bl	8000278 <strlen>
 8003390:	4603      	mov	r3, r0
 8003392:	461a      	mov	r2, r3
 8003394:	4b8d      	ldr	r3, [pc, #564]	; (80035cc <stm32wb_at_client_Set+0x5dc>)
 8003396:	4413      	add	r3, r2
 8003398:	498d      	ldr	r1, [pc, #564]	; (80035d0 <stm32wb_at_client_Set+0x5e0>)
 800339a:	461a      	mov	r2, r3
 800339c:	460b      	mov	r3, r1
 800339e:	881b      	ldrh	r3, [r3, #0]
 80033a0:	8013      	strh	r3, [r2, #0]

        if(p->val_tab_len <= 1U)
 80033a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80033a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d810      	bhi.n	80033d0 <stm32wb_at_client_Set+0x3e0>
        {
          (void)sprintf(str_tmp, "%d", (uint16_t)p->val_tab[0]);
 80033ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80033b2:	789b      	ldrb	r3, [r3, #2]
 80033b4:	461a      	mov	r2, r3
 80033b6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80033ba:	4983      	ldr	r1, [pc, #524]	; (80035c8 <stm32wb_at_client_Set+0x5d8>)
 80033bc:	4618      	mov	r0, r3
 80033be:	f007 fc99 	bl	800acf4 <siprintf>
          (void)strcat(client_buff_tx, str_tmp);
 80033c2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80033c6:	4619      	mov	r1, r3
 80033c8:	4880      	ldr	r0, [pc, #512]	; (80035cc <stm32wb_at_client_Set+0x5dc>)
 80033ca:	f008 fce7 	bl	800bd9c <strcat>
            (void)sprintf( str_tmp, "%02x", p->val_tab[i] );
            (void)strcat(client_buff_tx, str_tmp);
          }
        }
          
        break;
 80033ce:	e262      	b.n	8003896 <stm32wb_at_client_Set+0x8a6>
          (void)strcat(client_buff_tx, "0x");
 80033d0:	487e      	ldr	r0, [pc, #504]	; (80035cc <stm32wb_at_client_Set+0x5dc>)
 80033d2:	f7fc ff51 	bl	8000278 <strlen>
 80033d6:	4603      	mov	r3, r0
 80033d8:	461a      	mov	r2, r3
 80033da:	4b7c      	ldr	r3, [pc, #496]	; (80035cc <stm32wb_at_client_Set+0x5dc>)
 80033dc:	4413      	add	r3, r2
 80033de:	4a7d      	ldr	r2, [pc, #500]	; (80035d4 <stm32wb_at_client_Set+0x5e4>)
 80033e0:	8811      	ldrh	r1, [r2, #0]
 80033e2:	7892      	ldrb	r2, [r2, #2]
 80033e4:	8019      	strh	r1, [r3, #0]
 80033e6:	709a      	strb	r2, [r3, #2]
          for(i = 0 ; i < p->val_tab_len ; i++)
 80033e8:	2300      	movs	r3, #0
 80033ea:	f887 30c5 	strb.w	r3, [r7, #197]	; 0xc5
 80033ee:	e017      	b.n	8003420 <stm32wb_at_client_Set+0x430>
            (void)sprintf( str_tmp, "%02x", p->val_tab[i] );
 80033f0:	f897 30c5 	ldrb.w	r3, [r7, #197]	; 0xc5
 80033f4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80033f8:	4413      	add	r3, r2
 80033fa:	789b      	ldrb	r3, [r3, #2]
 80033fc:	461a      	mov	r2, r3
 80033fe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003402:	4975      	ldr	r1, [pc, #468]	; (80035d8 <stm32wb_at_client_Set+0x5e8>)
 8003404:	4618      	mov	r0, r3
 8003406:	f007 fc75 	bl	800acf4 <siprintf>
            (void)strcat(client_buff_tx, str_tmp);
 800340a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800340e:	4619      	mov	r1, r3
 8003410:	486e      	ldr	r0, [pc, #440]	; (80035cc <stm32wb_at_client_Set+0x5dc>)
 8003412:	f008 fcc3 	bl	800bd9c <strcat>
          for(i = 0 ; i < p->val_tab_len ; i++)
 8003416:	f897 30c5 	ldrb.w	r3, [r7, #197]	; 0xc5
 800341a:	3301      	adds	r3, #1
 800341c:	f887 30c5 	strb.w	r3, [r7, #197]	; 0xc5
 8003420:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003424:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003428:	f897 20c5 	ldrb.w	r2, [r7, #197]	; 0xc5
 800342c:	429a      	cmp	r2, r3
 800342e:	d3df      	bcc.n	80033f0 <stm32wb_at_client_Set+0x400>
        break;
 8003430:	e231      	b.n	8003896 <stm32wb_at_client_Set+0x8a6>
      }
      case BLE_ADV:
      {
        stm32wb_at_BLE_ADV_t *p = (stm32wb_at_BLE_ADV_t*)param;
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        char str_tmp[8];

        (void)sprintf(str_tmp, "%d", p->enable);
 8003438:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800343c:	781b      	ldrb	r3, [r3, #0]
 800343e:	461a      	mov	r2, r3
 8003440:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003444:	4960      	ldr	r1, [pc, #384]	; (80035c8 <stm32wb_at_client_Set+0x5d8>)
 8003446:	4618      	mov	r0, r3
 8003448:	f007 fc54 	bl	800acf4 <siprintf>
        (void)strcat(client_buff_tx, str_tmp);
 800344c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003450:	4619      	mov	r1, r3
 8003452:	485e      	ldr	r0, [pc, #376]	; (80035cc <stm32wb_at_client_Set+0x5dc>)
 8003454:	f008 fca2 	bl	800bd9c <strcat>

        break;
 8003458:	e21d      	b.n	8003896 <stm32wb_at_client_Set+0x8a6>
      }
      case BLE_ADV_PARAM:
      {
        stm32wb_at_BLE_ADV_PARAM_t *p = (stm32wb_at_BLE_ADV_PARAM_t*)param;
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        char str_tmp[8];

        (void)sprintf(str_tmp, "%d", p->entry_number);
 8003460:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	461a      	mov	r2, r3
 8003468:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800346c:	4956      	ldr	r1, [pc, #344]	; (80035c8 <stm32wb_at_client_Set+0x5d8>)
 800346e:	4618      	mov	r0, r3
 8003470:	f007 fc40 	bl	800acf4 <siprintf>
        (void)strcat(client_buff_tx, str_tmp);
 8003474:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003478:	4619      	mov	r1, r3
 800347a:	4854      	ldr	r0, [pc, #336]	; (80035cc <stm32wb_at_client_Set+0x5dc>)
 800347c:	f008 fc8e 	bl	800bd9c <strcat>
        if(p->entry_number == 0U)
 8003480:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	2b00      	cmp	r3, #0
 8003488:	f040 8204 	bne.w	8003894 <stm32wb_at_client_Set+0x8a4>
        {
          (void)strcat(client_buff_tx, AT_SEPARATOR);
 800348c:	484f      	ldr	r0, [pc, #316]	; (80035cc <stm32wb_at_client_Set+0x5dc>)
 800348e:	f7fc fef3 	bl	8000278 <strlen>
 8003492:	4603      	mov	r3, r0
 8003494:	461a      	mov	r2, r3
 8003496:	4b4d      	ldr	r3, [pc, #308]	; (80035cc <stm32wb_at_client_Set+0x5dc>)
 8003498:	4413      	add	r3, r2
 800349a:	494d      	ldr	r1, [pc, #308]	; (80035d0 <stm32wb_at_client_Set+0x5e0>)
 800349c:	461a      	mov	r2, r3
 800349e:	460b      	mov	r3, r1
 80034a0:	881b      	ldrh	r3, [r3, #0]
 80034a2:	8013      	strh	r3, [r2, #0]

          (void)sprintf(str_tmp, "%d", p->adv_type);
 80034a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80034a8:	785b      	ldrb	r3, [r3, #1]
 80034aa:	461a      	mov	r2, r3
 80034ac:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80034b0:	4945      	ldr	r1, [pc, #276]	; (80035c8 <stm32wb_at_client_Set+0x5d8>)
 80034b2:	4618      	mov	r0, r3
 80034b4:	f007 fc1e 	bl	800acf4 <siprintf>
          (void)strcat(client_buff_tx, str_tmp);
 80034b8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80034bc:	4619      	mov	r1, r3
 80034be:	4843      	ldr	r0, [pc, #268]	; (80035cc <stm32wb_at_client_Set+0x5dc>)
 80034c0:	f008 fc6c 	bl	800bd9c <strcat>
          (void)strcat(client_buff_tx, AT_SEPARATOR);
 80034c4:	4841      	ldr	r0, [pc, #260]	; (80035cc <stm32wb_at_client_Set+0x5dc>)
 80034c6:	f7fc fed7 	bl	8000278 <strlen>
 80034ca:	4603      	mov	r3, r0
 80034cc:	461a      	mov	r2, r3
 80034ce:	4b3f      	ldr	r3, [pc, #252]	; (80035cc <stm32wb_at_client_Set+0x5dc>)
 80034d0:	4413      	add	r3, r2
 80034d2:	493f      	ldr	r1, [pc, #252]	; (80035d0 <stm32wb_at_client_Set+0x5e0>)
 80034d4:	461a      	mov	r2, r3
 80034d6:	460b      	mov	r3, r1
 80034d8:	881b      	ldrh	r3, [r3, #0]
 80034da:	8013      	strh	r3, [r2, #0]
          
          (void)sprintf(str_tmp, "%.2f", p->adv_int_min);
 80034dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	4618      	mov	r0, r3
 80034e4:	f7fd f83e 	bl	8000564 <__aeabi_f2d>
 80034e8:	4602      	mov	r2, r0
 80034ea:	460b      	mov	r3, r1
 80034ec:	f107 0048 	add.w	r0, r7, #72	; 0x48
 80034f0:	493a      	ldr	r1, [pc, #232]	; (80035dc <stm32wb_at_client_Set+0x5ec>)
 80034f2:	f007 fbff 	bl	800acf4 <siprintf>
          (void)strcat(client_buff_tx, str_tmp);
 80034f6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80034fa:	4619      	mov	r1, r3
 80034fc:	4833      	ldr	r0, [pc, #204]	; (80035cc <stm32wb_at_client_Set+0x5dc>)
 80034fe:	f008 fc4d 	bl	800bd9c <strcat>
          (void)strcat(client_buff_tx, AT_SEPARATOR);
 8003502:	4832      	ldr	r0, [pc, #200]	; (80035cc <stm32wb_at_client_Set+0x5dc>)
 8003504:	f7fc feb8 	bl	8000278 <strlen>
 8003508:	4603      	mov	r3, r0
 800350a:	461a      	mov	r2, r3
 800350c:	4b2f      	ldr	r3, [pc, #188]	; (80035cc <stm32wb_at_client_Set+0x5dc>)
 800350e:	4413      	add	r3, r2
 8003510:	492f      	ldr	r1, [pc, #188]	; (80035d0 <stm32wb_at_client_Set+0x5e0>)
 8003512:	461a      	mov	r2, r3
 8003514:	460b      	mov	r3, r1
 8003516:	881b      	ldrh	r3, [r3, #0]
 8003518:	8013      	strh	r3, [r2, #0]

          (void)sprintf(str_tmp, "%.2f", p->adv_int_max);
 800351a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	4618      	mov	r0, r3
 8003522:	f7fd f81f 	bl	8000564 <__aeabi_f2d>
 8003526:	4602      	mov	r2, r0
 8003528:	460b      	mov	r3, r1
 800352a:	f107 0048 	add.w	r0, r7, #72	; 0x48
 800352e:	492b      	ldr	r1, [pc, #172]	; (80035dc <stm32wb_at_client_Set+0x5ec>)
 8003530:	f007 fbe0 	bl	800acf4 <siprintf>
          (void)strcat(client_buff_tx, str_tmp);
 8003534:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003538:	4619      	mov	r1, r3
 800353a:	4824      	ldr	r0, [pc, #144]	; (80035cc <stm32wb_at_client_Set+0x5dc>)
 800353c:	f008 fc2e 	bl	800bd9c <strcat>
          (void)strcat(client_buff_tx, AT_SEPARATOR);
 8003540:	4822      	ldr	r0, [pc, #136]	; (80035cc <stm32wb_at_client_Set+0x5dc>)
 8003542:	f7fc fe99 	bl	8000278 <strlen>
 8003546:	4603      	mov	r3, r0
 8003548:	461a      	mov	r2, r3
 800354a:	4b20      	ldr	r3, [pc, #128]	; (80035cc <stm32wb_at_client_Set+0x5dc>)
 800354c:	4413      	add	r3, r2
 800354e:	4920      	ldr	r1, [pc, #128]	; (80035d0 <stm32wb_at_client_Set+0x5e0>)
 8003550:	461a      	mov	r2, r3
 8003552:	460b      	mov	r3, r1
 8003554:	881b      	ldrh	r3, [r3, #0]
 8003556:	8013      	strh	r3, [r2, #0]
        }
        break;
 8003558:	e19c      	b.n	8003894 <stm32wb_at_client_Set+0x8a4>
      }
      case BLE_CONN_INT:
      {
        stm32wb_at_BLE_CONN_INT_t *p = (stm32wb_at_BLE_CONN_INT_t*)param;
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
        char str_tmp[8];

        (void)sprintf(str_tmp, "%.1f", p->min);
 8003560:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4618      	mov	r0, r3
 8003568:	f7fc fffc 	bl	8000564 <__aeabi_f2d>
 800356c:	4602      	mov	r2, r0
 800356e:	460b      	mov	r3, r1
 8003570:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8003574:	491a      	ldr	r1, [pc, #104]	; (80035e0 <stm32wb_at_client_Set+0x5f0>)
 8003576:	f007 fbbd 	bl	800acf4 <siprintf>
        (void)strcat(client_buff_tx, str_tmp);
 800357a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800357e:	4619      	mov	r1, r3
 8003580:	4812      	ldr	r0, [pc, #72]	; (80035cc <stm32wb_at_client_Set+0x5dc>)
 8003582:	f008 fc0b 	bl	800bd9c <strcat>
        (void)strcat(client_buff_tx, AT_SEPARATOR);
 8003586:	4811      	ldr	r0, [pc, #68]	; (80035cc <stm32wb_at_client_Set+0x5dc>)
 8003588:	f7fc fe76 	bl	8000278 <strlen>
 800358c:	4603      	mov	r3, r0
 800358e:	461a      	mov	r2, r3
 8003590:	4b0e      	ldr	r3, [pc, #56]	; (80035cc <stm32wb_at_client_Set+0x5dc>)
 8003592:	4413      	add	r3, r2
 8003594:	490e      	ldr	r1, [pc, #56]	; (80035d0 <stm32wb_at_client_Set+0x5e0>)
 8003596:	461a      	mov	r2, r3
 8003598:	460b      	mov	r3, r1
 800359a:	881b      	ldrh	r3, [r3, #0]
 800359c:	8013      	strh	r3, [r2, #0]

        (void)sprintf(str_tmp, "%.1f", p->max);
 800359e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	4618      	mov	r0, r3
 80035a6:	f7fc ffdd 	bl	8000564 <__aeabi_f2d>
 80035aa:	4602      	mov	r2, r0
 80035ac:	460b      	mov	r3, r1
 80035ae:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80035b2:	490b      	ldr	r1, [pc, #44]	; (80035e0 <stm32wb_at_client_Set+0x5f0>)
 80035b4:	f007 fb9e 	bl	800acf4 <siprintf>
        (void)strcat(client_buff_tx, str_tmp);
 80035b8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80035bc:	4619      	mov	r1, r3
 80035be:	4803      	ldr	r0, [pc, #12]	; (80035cc <stm32wb_at_client_Set+0x5dc>)
 80035c0:	f008 fbec 	bl	800bd9c <strcat>

        break;
 80035c4:	e167      	b.n	8003896 <stm32wb_at_client_Set+0x8a6>
 80035c6:	bf00      	nop
 80035c8:	0800e2b4 	.word	0x0800e2b4
 80035cc:	20000350 	.word	0x20000350
 80035d0:	0800e2a4 	.word	0x0800e2a4
 80035d4:	0800e2b0 	.word	0x0800e2b0
 80035d8:	0800e2cc 	.word	0x0800e2cc
 80035dc:	0800e2c0 	.word	0x0800e2c0
 80035e0:	0800e2d4 	.word	0x0800e2d4
      }
      case BLE_CHAR_ADD:
      {
        stm32wb_at_BLE_CHAR_ADD_t *p = (stm32wb_at_BLE_CHAR_ADD_t*)param;
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        char str_tmp[8];

        (void)sprintf(str_tmp, "%d", p->svc_id);
 80035ea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	461a      	mov	r2, r3
 80035f2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80035f6:	49bd      	ldr	r1, [pc, #756]	; (80038ec <stm32wb_at_client_Set+0x8fc>)
 80035f8:	4618      	mov	r0, r3
 80035fa:	f007 fb7b 	bl	800acf4 <siprintf>
        (void)strcat(client_buff_tx, str_tmp);
 80035fe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003602:	4619      	mov	r1, r3
 8003604:	48ba      	ldr	r0, [pc, #744]	; (80038f0 <stm32wb_at_client_Set+0x900>)
 8003606:	f008 fbc9 	bl	800bd9c <strcat>
        (void)strcat(client_buff_tx, AT_SEPARATOR);
 800360a:	48b9      	ldr	r0, [pc, #740]	; (80038f0 <stm32wb_at_client_Set+0x900>)
 800360c:	f7fc fe34 	bl	8000278 <strlen>
 8003610:	4603      	mov	r3, r0
 8003612:	461a      	mov	r2, r3
 8003614:	4bb6      	ldr	r3, [pc, #728]	; (80038f0 <stm32wb_at_client_Set+0x900>)
 8003616:	4413      	add	r3, r2
 8003618:	49b6      	ldr	r1, [pc, #728]	; (80038f4 <stm32wb_at_client_Set+0x904>)
 800361a:	461a      	mov	r2, r3
 800361c:	460b      	mov	r3, r1
 800361e:	881b      	ldrh	r3, [r3, #0]
 8003620:	8013      	strh	r3, [r2, #0]
        
        (void)sprintf(str_tmp, "%d", p->char_id);
 8003622:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003626:	785b      	ldrb	r3, [r3, #1]
 8003628:	461a      	mov	r2, r3
 800362a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800362e:	49af      	ldr	r1, [pc, #700]	; (80038ec <stm32wb_at_client_Set+0x8fc>)
 8003630:	4618      	mov	r0, r3
 8003632:	f007 fb5f 	bl	800acf4 <siprintf>
        (void)strcat(client_buff_tx, str_tmp);
 8003636:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800363a:	4619      	mov	r1, r3
 800363c:	48ac      	ldr	r0, [pc, #688]	; (80038f0 <stm32wb_at_client_Set+0x900>)
 800363e:	f008 fbad 	bl	800bd9c <strcat>
        (void)strcat(client_buff_tx, AT_SEPARATOR);
 8003642:	48ab      	ldr	r0, [pc, #684]	; (80038f0 <stm32wb_at_client_Set+0x900>)
 8003644:	f7fc fe18 	bl	8000278 <strlen>
 8003648:	4603      	mov	r3, r0
 800364a:	461a      	mov	r2, r3
 800364c:	4ba8      	ldr	r3, [pc, #672]	; (80038f0 <stm32wb_at_client_Set+0x900>)
 800364e:	4413      	add	r3, r2
 8003650:	49a8      	ldr	r1, [pc, #672]	; (80038f4 <stm32wb_at_client_Set+0x904>)
 8003652:	461a      	mov	r2, r3
 8003654:	460b      	mov	r3, r1
 8003656:	881b      	ldrh	r3, [r3, #0]
 8003658:	8013      	strh	r3, [r2, #0]

        (void)sprintf(str_tmp, "%d", p->char_uuid_type);
 800365a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800365e:	789b      	ldrb	r3, [r3, #2]
 8003660:	461a      	mov	r2, r3
 8003662:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003666:	49a1      	ldr	r1, [pc, #644]	; (80038ec <stm32wb_at_client_Set+0x8fc>)
 8003668:	4618      	mov	r0, r3
 800366a:	f007 fb43 	bl	800acf4 <siprintf>
        (void)strcat(client_buff_tx, str_tmp);
 800366e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003672:	4619      	mov	r1, r3
 8003674:	489e      	ldr	r0, [pc, #632]	; (80038f0 <stm32wb_at_client_Set+0x900>)
 8003676:	f008 fb91 	bl	800bd9c <strcat>
        (void)strcat(client_buff_tx, AT_SEPARATOR);
 800367a:	489d      	ldr	r0, [pc, #628]	; (80038f0 <stm32wb_at_client_Set+0x900>)
 800367c:	f7fc fdfc 	bl	8000278 <strlen>
 8003680:	4603      	mov	r3, r0
 8003682:	461a      	mov	r2, r3
 8003684:	4b9a      	ldr	r3, [pc, #616]	; (80038f0 <stm32wb_at_client_Set+0x900>)
 8003686:	4413      	add	r3, r2
 8003688:	499a      	ldr	r1, [pc, #616]	; (80038f4 <stm32wb_at_client_Set+0x904>)
 800368a:	461a      	mov	r2, r3
 800368c:	460b      	mov	r3, r1
 800368e:	881b      	ldrh	r3, [r3, #0]
 8003690:	8013      	strh	r3, [r2, #0]
        
        (void)sprintf(str_tmp, "0x%04x", p->char_uuid);
 8003692:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003696:	889b      	ldrh	r3, [r3, #4]
 8003698:	461a      	mov	r2, r3
 800369a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800369e:	4996      	ldr	r1, [pc, #600]	; (80038f8 <stm32wb_at_client_Set+0x908>)
 80036a0:	4618      	mov	r0, r3
 80036a2:	f007 fb27 	bl	800acf4 <siprintf>
        (void)strcat(client_buff_tx, str_tmp);
 80036a6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80036aa:	4619      	mov	r1, r3
 80036ac:	4890      	ldr	r0, [pc, #576]	; (80038f0 <stm32wb_at_client_Set+0x900>)
 80036ae:	f008 fb75 	bl	800bd9c <strcat>
        (void)strcat(client_buff_tx, AT_SEPARATOR);
 80036b2:	488f      	ldr	r0, [pc, #572]	; (80038f0 <stm32wb_at_client_Set+0x900>)
 80036b4:	f7fc fde0 	bl	8000278 <strlen>
 80036b8:	4603      	mov	r3, r0
 80036ba:	461a      	mov	r2, r3
 80036bc:	4b8c      	ldr	r3, [pc, #560]	; (80038f0 <stm32wb_at_client_Set+0x900>)
 80036be:	4413      	add	r3, r2
 80036c0:	498c      	ldr	r1, [pc, #560]	; (80038f4 <stm32wb_at_client_Set+0x904>)
 80036c2:	461a      	mov	r2, r3
 80036c4:	460b      	mov	r3, r1
 80036c6:	881b      	ldrh	r3, [r3, #0]
 80036c8:	8013      	strh	r3, [r2, #0]

        (void)sprintf(str_tmp, "%d", p->char_value_len);
 80036ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80036ce:	88db      	ldrh	r3, [r3, #6]
 80036d0:	461a      	mov	r2, r3
 80036d2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80036d6:	4985      	ldr	r1, [pc, #532]	; (80038ec <stm32wb_at_client_Set+0x8fc>)
 80036d8:	4618      	mov	r0, r3
 80036da:	f007 fb0b 	bl	800acf4 <siprintf>
        (void)strcat(client_buff_tx, str_tmp);
 80036de:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80036e2:	4619      	mov	r1, r3
 80036e4:	4882      	ldr	r0, [pc, #520]	; (80038f0 <stm32wb_at_client_Set+0x900>)
 80036e6:	f008 fb59 	bl	800bd9c <strcat>
        (void)strcat(client_buff_tx, AT_SEPARATOR);
 80036ea:	4881      	ldr	r0, [pc, #516]	; (80038f0 <stm32wb_at_client_Set+0x900>)
 80036ec:	f7fc fdc4 	bl	8000278 <strlen>
 80036f0:	4603      	mov	r3, r0
 80036f2:	461a      	mov	r2, r3
 80036f4:	4b7e      	ldr	r3, [pc, #504]	; (80038f0 <stm32wb_at_client_Set+0x900>)
 80036f6:	4413      	add	r3, r2
 80036f8:	497e      	ldr	r1, [pc, #504]	; (80038f4 <stm32wb_at_client_Set+0x904>)
 80036fa:	461a      	mov	r2, r3
 80036fc:	460b      	mov	r3, r1
 80036fe:	881b      	ldrh	r3, [r3, #0]
 8003700:	8013      	strh	r3, [r2, #0]

        (void)sprintf(str_tmp, "0x%02x", p->char_properties);
 8003702:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003706:	7a1b      	ldrb	r3, [r3, #8]
 8003708:	461a      	mov	r2, r3
 800370a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800370e:	497b      	ldr	r1, [pc, #492]	; (80038fc <stm32wb_at_client_Set+0x90c>)
 8003710:	4618      	mov	r0, r3
 8003712:	f007 faef 	bl	800acf4 <siprintf>
        (void)strcat(client_buff_tx, str_tmp);
 8003716:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800371a:	4619      	mov	r1, r3
 800371c:	4874      	ldr	r0, [pc, #464]	; (80038f0 <stm32wb_at_client_Set+0x900>)
 800371e:	f008 fb3d 	bl	800bd9c <strcat>
        (void)strcat(client_buff_tx, AT_SEPARATOR);
 8003722:	4873      	ldr	r0, [pc, #460]	; (80038f0 <stm32wb_at_client_Set+0x900>)
 8003724:	f7fc fda8 	bl	8000278 <strlen>
 8003728:	4603      	mov	r3, r0
 800372a:	461a      	mov	r2, r3
 800372c:	4b70      	ldr	r3, [pc, #448]	; (80038f0 <stm32wb_at_client_Set+0x900>)
 800372e:	4413      	add	r3, r2
 8003730:	4970      	ldr	r1, [pc, #448]	; (80038f4 <stm32wb_at_client_Set+0x904>)
 8003732:	461a      	mov	r2, r3
 8003734:	460b      	mov	r3, r1
 8003736:	881b      	ldrh	r3, [r3, #0]
 8003738:	8013      	strh	r3, [r2, #0]
        
        (void)sprintf(str_tmp, "0x%02x", p->sec_permission);
 800373a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800373e:	7a5b      	ldrb	r3, [r3, #9]
 8003740:	461a      	mov	r2, r3
 8003742:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003746:	496d      	ldr	r1, [pc, #436]	; (80038fc <stm32wb_at_client_Set+0x90c>)
 8003748:	4618      	mov	r0, r3
 800374a:	f007 fad3 	bl	800acf4 <siprintf>
        (void)strcat(client_buff_tx, str_tmp);
 800374e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003752:	4619      	mov	r1, r3
 8003754:	4866      	ldr	r0, [pc, #408]	; (80038f0 <stm32wb_at_client_Set+0x900>)
 8003756:	f008 fb21 	bl	800bd9c <strcat>
        (void)strcat(client_buff_tx, AT_SEPARATOR);
 800375a:	4865      	ldr	r0, [pc, #404]	; (80038f0 <stm32wb_at_client_Set+0x900>)
 800375c:	f7fc fd8c 	bl	8000278 <strlen>
 8003760:	4603      	mov	r3, r0
 8003762:	461a      	mov	r2, r3
 8003764:	4b62      	ldr	r3, [pc, #392]	; (80038f0 <stm32wb_at_client_Set+0x900>)
 8003766:	4413      	add	r3, r2
 8003768:	4962      	ldr	r1, [pc, #392]	; (80038f4 <stm32wb_at_client_Set+0x904>)
 800376a:	461a      	mov	r2, r3
 800376c:	460b      	mov	r3, r1
 800376e:	881b      	ldrh	r3, [r3, #0]
 8003770:	8013      	strh	r3, [r2, #0]

        (void)sprintf(str_tmp, "0x%02x", p->gatt_evt_mask);
 8003772:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003776:	7a9b      	ldrb	r3, [r3, #10]
 8003778:	461a      	mov	r2, r3
 800377a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800377e:	495f      	ldr	r1, [pc, #380]	; (80038fc <stm32wb_at_client_Set+0x90c>)
 8003780:	4618      	mov	r0, r3
 8003782:	f007 fab7 	bl	800acf4 <siprintf>
        (void)strcat(client_buff_tx, str_tmp);
 8003786:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800378a:	4619      	mov	r1, r3
 800378c:	4858      	ldr	r0, [pc, #352]	; (80038f0 <stm32wb_at_client_Set+0x900>)
 800378e:	f008 fb05 	bl	800bd9c <strcat>

        break;
 8003792:	e080      	b.n	8003896 <stm32wb_at_client_Set+0x8a6>
      }
      case BLE_RST:
      {
        stm32wb_at_BLE_RST_t *p = (stm32wb_at_BLE_RST_t*)param;
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        char str_tmp[8];

        (void)sprintf(str_tmp, "%d", p->reset);
 800379a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	461a      	mov	r2, r3
 80037a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80037a6:	4951      	ldr	r1, [pc, #324]	; (80038ec <stm32wb_at_client_Set+0x8fc>)
 80037a8:	4618      	mov	r0, r3
 80037aa:	f007 faa3 	bl	800acf4 <siprintf>
        (void)strcat(client_buff_tx, str_tmp);
 80037ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80037b2:	4619      	mov	r1, r3
 80037b4:	484e      	ldr	r0, [pc, #312]	; (80038f0 <stm32wb_at_client_Set+0x900>)
 80037b6:	f008 faf1 	bl	800bd9c <strcat>

        break;
 80037ba:	e06c      	b.n	8003896 <stm32wb_at_client_Set+0x8a6>
      }
      case BLE_PUB_ADDR:
      {
        stm32wb_at_BLE_PUB_ADDR_t *p = (stm32wb_at_BLE_PUB_ADDR_t*)param;
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        char str_tmp[20];
        uint8_t i;
        
        (void)strcat(client_buff_tx, "0x");
 80037c2:	484b      	ldr	r0, [pc, #300]	; (80038f0 <stm32wb_at_client_Set+0x900>)
 80037c4:	f7fc fd58 	bl	8000278 <strlen>
 80037c8:	4603      	mov	r3, r0
 80037ca:	461a      	mov	r2, r3
 80037cc:	4b48      	ldr	r3, [pc, #288]	; (80038f0 <stm32wb_at_client_Set+0x900>)
 80037ce:	4413      	add	r3, r2
 80037d0:	4a4b      	ldr	r2, [pc, #300]	; (8003900 <stm32wb_at_client_Set+0x910>)
 80037d2:	8811      	ldrh	r1, [r2, #0]
 80037d4:	7892      	ldrb	r2, [r2, #2]
 80037d6:	8019      	strh	r1, [r3, #0]
 80037d8:	709a      	strb	r2, [r3, #2]
        for(i = 0 ; i < sizeof(p->BD_address) ; i++)
 80037da:	2300      	movs	r3, #0
 80037dc:	f887 30c4 	strb.w	r3, [r7, #196]	; 0xc4
 80037e0:	e016      	b.n	8003810 <stm32wb_at_client_Set+0x820>
        {
          (void)sprintf(str_tmp, "%02x", p->BD_address[i]);
 80037e2:	f897 30c4 	ldrb.w	r3, [r7, #196]	; 0xc4
 80037e6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80037ea:	5cd3      	ldrb	r3, [r2, r3]
 80037ec:	461a      	mov	r2, r3
 80037ee:	f107 031c 	add.w	r3, r7, #28
 80037f2:	4944      	ldr	r1, [pc, #272]	; (8003904 <stm32wb_at_client_Set+0x914>)
 80037f4:	4618      	mov	r0, r3
 80037f6:	f007 fa7d 	bl	800acf4 <siprintf>
          (void)strcat(client_buff_tx, str_tmp);
 80037fa:	f107 031c 	add.w	r3, r7, #28
 80037fe:	4619      	mov	r1, r3
 8003800:	483b      	ldr	r0, [pc, #236]	; (80038f0 <stm32wb_at_client_Set+0x900>)
 8003802:	f008 facb 	bl	800bd9c <strcat>
        for(i = 0 ; i < sizeof(p->BD_address) ; i++)
 8003806:	f897 30c4 	ldrb.w	r3, [r7, #196]	; 0xc4
 800380a:	3301      	adds	r3, #1
 800380c:	f887 30c4 	strb.w	r3, [r7, #196]	; 0xc4
 8003810:	f897 30c4 	ldrb.w	r3, [r7, #196]	; 0xc4
 8003814:	2b05      	cmp	r3, #5
 8003816:	d9e4      	bls.n	80037e2 <stm32wb_at_client_Set+0x7f2>
        }

        break;
 8003818:	e03d      	b.n	8003896 <stm32wb_at_client_Set+0x8a6>
      }
      case BLE_RAND_ADDR:
      {
        stm32wb_at_BLE_RAND_ADDR_t *p = (stm32wb_at_BLE_RAND_ADDR_t*)param;
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        char str_tmp[20];
        uint8_t i;
        
        (void)strcat(client_buff_tx, "0x");
 8003820:	4833      	ldr	r0, [pc, #204]	; (80038f0 <stm32wb_at_client_Set+0x900>)
 8003822:	f7fc fd29 	bl	8000278 <strlen>
 8003826:	4603      	mov	r3, r0
 8003828:	461a      	mov	r2, r3
 800382a:	4b31      	ldr	r3, [pc, #196]	; (80038f0 <stm32wb_at_client_Set+0x900>)
 800382c:	4413      	add	r3, r2
 800382e:	4a34      	ldr	r2, [pc, #208]	; (8003900 <stm32wb_at_client_Set+0x910>)
 8003830:	8811      	ldrh	r1, [r2, #0]
 8003832:	7892      	ldrb	r2, [r2, #2]
 8003834:	8019      	strh	r1, [r3, #0]
 8003836:	709a      	strb	r2, [r3, #2]
        for(i = 0 ; i < sizeof(p->BD_address) ; i++)
 8003838:	2300      	movs	r3, #0
 800383a:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
 800383e:	e016      	b.n	800386e <stm32wb_at_client_Set+0x87e>
        {
          (void)sprintf(str_tmp, "%02x", p->BD_address[i]);
 8003840:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 8003844:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003848:	5cd3      	ldrb	r3, [r2, r3]
 800384a:	461a      	mov	r2, r3
 800384c:	f107 0308 	add.w	r3, r7, #8
 8003850:	492c      	ldr	r1, [pc, #176]	; (8003904 <stm32wb_at_client_Set+0x914>)
 8003852:	4618      	mov	r0, r3
 8003854:	f007 fa4e 	bl	800acf4 <siprintf>
          (void)strcat(client_buff_tx, str_tmp);
 8003858:	f107 0308 	add.w	r3, r7, #8
 800385c:	4619      	mov	r1, r3
 800385e:	4824      	ldr	r0, [pc, #144]	; (80038f0 <stm32wb_at_client_Set+0x900>)
 8003860:	f008 fa9c 	bl	800bd9c <strcat>
        for(i = 0 ; i < sizeof(p->BD_address) ; i++)
 8003864:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 8003868:	3301      	adds	r3, #1
 800386a:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
 800386e:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 8003872:	2b05      	cmp	r3, #5
 8003874:	d9e4      	bls.n	8003840 <stm32wb_at_client_Set+0x850>
        }

        break;
 8003876:	e00e      	b.n	8003896 <stm32wb_at_client_Set+0x8a6>
      }
      case BLE_NAME:
      {
        stm32wb_at_BLE_NAME_t *p = (stm32wb_at_BLE_NAME_t*)param;
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

        (void)strcat(client_buff_tx, p->name);
 800387e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003882:	4619      	mov	r1, r3
 8003884:	481a      	ldr	r0, [pc, #104]	; (80038f0 <stm32wb_at_client_Set+0x900>)
 8003886:	f008 fa89 	bl	800bd9c <strcat>

        break;
 800388a:	e004      	b.n	8003896 <stm32wb_at_client_Set+0x8a6>
      }
      default:
        break;
 800388c:	bf00      	nop
 800388e:	e002      	b.n	8003896 <stm32wb_at_client_Set+0x8a6>
        break;
 8003890:	bf00      	nop
 8003892:	e000      	b.n	8003896 <stm32wb_at_client_Set+0x8a6>
        break;
 8003894:	bf00      	nop
    }

    (void)strcat(client_buff_tx, AT_EOL);
 8003896:	4816      	ldr	r0, [pc, #88]	; (80038f0 <stm32wb_at_client_Set+0x900>)
 8003898:	f7fc fcee 	bl	8000278 <strlen>
 800389c:	4603      	mov	r3, r0
 800389e:	461a      	mov	r2, r3
 80038a0:	4b13      	ldr	r3, [pc, #76]	; (80038f0 <stm32wb_at_client_Set+0x900>)
 80038a2:	4413      	add	r3, r2
 80038a4:	4a18      	ldr	r2, [pc, #96]	; (8003908 <stm32wb_at_client_Set+0x918>)
 80038a6:	8811      	ldrh	r1, [r2, #0]
 80038a8:	7892      	ldrb	r2, [r2, #2]
 80038aa:	8019      	strh	r1, [r3, #0]
 80038ac:	709a      	strb	r2, [r3, #2]

    client_current_cmd = cmd;
 80038ae:	4a17      	ldr	r2, [pc, #92]	; (800390c <stm32wb_at_client_Set+0x91c>)
 80038b0:	79fb      	ldrb	r3, [r7, #7]
 80038b2:	7013      	strb	r3, [r2, #0]
    status = stm32wb_at_ll_Transmit((uint8_t *)&client_buff_tx[0], (uint16_t)strlen(client_buff_tx));
 80038b4:	480e      	ldr	r0, [pc, #56]	; (80038f0 <stm32wb_at_client_Set+0x900>)
 80038b6:	f7fc fcdf 	bl	8000278 <strlen>
 80038ba:	4603      	mov	r3, r0
 80038bc:	b29b      	uxth	r3, r3
 80038be:	4619      	mov	r1, r3
 80038c0:	480b      	ldr	r0, [pc, #44]	; (80038f0 <stm32wb_at_client_Set+0x900>)
 80038c2:	f006 fe5f 	bl	800a584 <stm32wb_at_ll_Transmit>
 80038c6:	4603      	mov	r3, r0
 80038c8:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
    (void)memset(&client_buff_tx[0], 0, sizeof(client_buff_tx));
 80038cc:	2240      	movs	r2, #64	; 0x40
 80038ce:	2100      	movs	r1, #0
 80038d0:	4807      	ldr	r0, [pc, #28]	; (80038f0 <stm32wb_at_client_Set+0x900>)
 80038d2:	f008 fae1 	bl	800be98 <memset>
 80038d6:	e002      	b.n	80038de <stm32wb_at_client_Set+0x8ee>
  }
  else
  {
    status = 1;
 80038d8:	2301      	movs	r3, #1
 80038da:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
  }

  return status;
 80038de:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	37c8      	adds	r7, #200	; 0xc8
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	0800e2b4 	.word	0x0800e2b4
 80038f0:	20000350 	.word	0x20000350
 80038f4:	0800e2a4 	.word	0x0800e2a4
 80038f8:	0800e2b8 	.word	0x0800e2b8
 80038fc:	0800e2dc 	.word	0x0800e2dc
 8003900:	0800e2b0 	.word	0x0800e2b0
 8003904:	0800e2cc 	.word	0x0800e2cc
 8003908:	0800e288 	.word	0x0800e288
 800390c:	20000390 	.word	0x20000390

08003910 <stm32wb_at_client_Wait_ready>:
 * @brief Wait for the last AT command completed
 * @param None
 * @retval 0 in case of success, an error code otherwise
 */
static uint8_t stm32wb_at_client_Wait_ready(void)
{
 8003910:	b480      	push	{r7}
 8003912:	af00      	add	r7, sp, #0
  while (client_current_cmd !=  BLE_NONE)
 8003914:	bf00      	nop
 8003916:	4b05      	ldr	r3, [pc, #20]	; (800392c <stm32wb_at_client_Wait_ready+0x1c>)
 8003918:	781b      	ldrb	r3, [r3, #0]
 800391a:	2b15      	cmp	r3, #21
 800391c:	d1fb      	bne.n	8003916 <stm32wb_at_client_Wait_ready+0x6>
  {
  }

  return 0;
 800391e:	2300      	movs	r3, #0
}
 8003920:	4618      	mov	r0, r3
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr
 800392a:	bf00      	nop
 800392c:	20000390 	.word	0x20000390

08003930 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003930:	b480      	push	{r7}
 8003932:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003934:	4b18      	ldr	r3, [pc, #96]	; (8003998 <SystemInit+0x68>)
 8003936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800393a:	4a17      	ldr	r2, [pc, #92]	; (8003998 <SystemInit+0x68>)
 800393c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003940:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8003944:	4b15      	ldr	r3, [pc, #84]	; (800399c <SystemInit+0x6c>)
 8003946:	2201      	movs	r2, #1
 8003948:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 800394a:	4b14      	ldr	r3, [pc, #80]	; (800399c <SystemInit+0x6c>)
 800394c:	2200      	movs	r2, #0
 800394e:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8003950:	4b12      	ldr	r3, [pc, #72]	; (800399c <SystemInit+0x6c>)
 8003952:	2200      	movs	r2, #0
 8003954:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8003956:	4b11      	ldr	r3, [pc, #68]	; (800399c <SystemInit+0x6c>)
 8003958:	2200      	movs	r2, #0
 800395a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 800395c:	4b0f      	ldr	r3, [pc, #60]	; (800399c <SystemInit+0x6c>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a0e      	ldr	r2, [pc, #56]	; (800399c <SystemInit+0x6c>)
 8003962:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8003966:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800396a:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 800396c:	4b0b      	ldr	r3, [pc, #44]	; (800399c <SystemInit+0x6c>)
 800396e:	2200      	movs	r2, #0
 8003970:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8003972:	4b0a      	ldr	r3, [pc, #40]	; (800399c <SystemInit+0x6c>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a09      	ldr	r2, [pc, #36]	; (800399c <SystemInit+0x6c>)
 8003978:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800397c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800397e:	4b07      	ldr	r3, [pc, #28]	; (800399c <SystemInit+0x6c>)
 8003980:	2200      	movs	r2, #0
 8003982:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003984:	4b04      	ldr	r3, [pc, #16]	; (8003998 <SystemInit+0x68>)
 8003986:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800398a:	609a      	str	r2, [r3, #8]
  #endif
}
 800398c:	bf00      	nop
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr
 8003996:	bf00      	nop
 8003998:	e000ed00 	.word	0xe000ed00
 800399c:	46020c00 	.word	0x46020c00

080039a0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80039a4:	4b11      	ldr	r3, [pc, #68]	; (80039ec <HAL_Init+0x4c>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a10      	ldr	r2, [pc, #64]	; (80039ec <HAL_Init+0x4c>)
 80039aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80039b0:	2003      	movs	r0, #3
 80039b2:	f000 f96d 	bl	8003c90 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80039b6:	f001 fea1 	bl	80056fc <HAL_RCC_GetSysClockFreq>
 80039ba:	4602      	mov	r2, r0
 80039bc:	4b0c      	ldr	r3, [pc, #48]	; (80039f0 <HAL_Init+0x50>)
 80039be:	6a1b      	ldr	r3, [r3, #32]
 80039c0:	f003 030f 	and.w	r3, r3, #15
 80039c4:	490b      	ldr	r1, [pc, #44]	; (80039f4 <HAL_Init+0x54>)
 80039c6:	5ccb      	ldrb	r3, [r1, r3]
 80039c8:	fa22 f303 	lsr.w	r3, r2, r3
 80039cc:	4a0a      	ldr	r2, [pc, #40]	; (80039f8 <HAL_Init+0x58>)
 80039ce:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80039d0:	200f      	movs	r0, #15
 80039d2:	f000 f813 	bl	80039fc <HAL_InitTick>
 80039d6:	4603      	mov	r3, r0
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d001      	beq.n	80039e0 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e002      	b.n	80039e6 <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80039e0:	f006 ffc0 	bl	800a964 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80039e4:	2300      	movs	r3, #0
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	40022000 	.word	0x40022000
 80039f0:	46020c00 	.word	0x46020c00
 80039f4:	0800e454 	.word	0x0800e454
 80039f8:	20000108 	.word	0x20000108

080039fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b082      	sub	sp, #8
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8003a04:	4b15      	ldr	r3, [pc, #84]	; (8003a5c <HAL_InitTick+0x60>)
 8003a06:	781b      	ldrb	r3, [r3, #0]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d101      	bne.n	8003a10 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e021      	b.n	8003a54 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003a10:	4b13      	ldr	r3, [pc, #76]	; (8003a60 <HAL_InitTick+0x64>)
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	4b11      	ldr	r3, [pc, #68]	; (8003a5c <HAL_InitTick+0x60>)
 8003a16:	781b      	ldrb	r3, [r3, #0]
 8003a18:	4619      	mov	r1, r3
 8003a1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a22:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a26:	4618      	mov	r0, r3
 8003a28:	f000 f965 	bl	8003cf6 <HAL_SYSTICK_Config>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d001      	beq.n	8003a36 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e00e      	b.n	8003a54 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2b0f      	cmp	r3, #15
 8003a3a:	d80a      	bhi.n	8003a52 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	6879      	ldr	r1, [r7, #4]
 8003a40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a44:	f000 f92f 	bl	8003ca6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003a48:	4a06      	ldr	r2, [pc, #24]	; (8003a64 <HAL_InitTick+0x68>)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	e000      	b.n	8003a54 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3708      	adds	r7, #8
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	20000110 	.word	0x20000110
 8003a60:	20000108 	.word	0x20000108
 8003a64:	2000010c 	.word	0x2000010c

08003a68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003a6c:	4b06      	ldr	r3, [pc, #24]	; (8003a88 <HAL_IncTick+0x20>)
 8003a6e:	781b      	ldrb	r3, [r3, #0]
 8003a70:	461a      	mov	r2, r3
 8003a72:	4b06      	ldr	r3, [pc, #24]	; (8003a8c <HAL_IncTick+0x24>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4413      	add	r3, r2
 8003a78:	4a04      	ldr	r2, [pc, #16]	; (8003a8c <HAL_IncTick+0x24>)
 8003a7a:	6013      	str	r3, [r2, #0]
}
 8003a7c:	bf00      	nop
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr
 8003a86:	bf00      	nop
 8003a88:	20000110 	.word	0x20000110
 8003a8c:	20000394 	.word	0x20000394

08003a90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a90:	b480      	push	{r7}
 8003a92:	af00      	add	r7, sp, #0
  return uwTick;
 8003a94:	4b03      	ldr	r3, [pc, #12]	; (8003aa4 <HAL_GetTick+0x14>)
 8003a96:	681b      	ldr	r3, [r3, #0]
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr
 8003aa2:	bf00      	nop
 8003aa4:	20000394 	.word	0x20000394

08003aa8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b084      	sub	sp, #16
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ab0:	f7ff ffee 	bl	8003a90 <HAL_GetTick>
 8003ab4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ac0:	d005      	beq.n	8003ace <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003ac2:	4b0a      	ldr	r3, [pc, #40]	; (8003aec <HAL_Delay+0x44>)
 8003ac4:	781b      	ldrb	r3, [r3, #0]
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	4413      	add	r3, r2
 8003acc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003ace:	bf00      	nop
 8003ad0:	f7ff ffde 	bl	8003a90 <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	68fa      	ldr	r2, [r7, #12]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d8f7      	bhi.n	8003ad0 <HAL_Delay+0x28>
  {
  }
}
 8003ae0:	bf00      	nop
 8003ae2:	bf00      	nop
 8003ae4:	3710      	adds	r7, #16
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop
 8003aec:	20000110 	.word	0x20000110

08003af0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b085      	sub	sp, #20
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f003 0307 	and.w	r3, r3, #7
 8003afe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b00:	4b0c      	ldr	r3, [pc, #48]	; (8003b34 <__NVIC_SetPriorityGrouping+0x44>)
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b06:	68ba      	ldr	r2, [r7, #8]
 8003b08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b22:	4a04      	ldr	r2, [pc, #16]	; (8003b34 <__NVIC_SetPriorityGrouping+0x44>)
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	60d3      	str	r3, [r2, #12]
}
 8003b28:	bf00      	nop
 8003b2a:	3714      	adds	r7, #20
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr
 8003b34:	e000ed00 	.word	0xe000ed00

08003b38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b3c:	4b04      	ldr	r3, [pc, #16]	; (8003b50 <__NVIC_GetPriorityGrouping+0x18>)
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	0a1b      	lsrs	r3, r3, #8
 8003b42:	f003 0307 	and.w	r3, r3, #7
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr
 8003b50:	e000ed00 	.word	0xe000ed00

08003b54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b083      	sub	sp, #12
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	db0b      	blt.n	8003b7e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b66:	79fb      	ldrb	r3, [r7, #7]
 8003b68:	f003 021f 	and.w	r2, r3, #31
 8003b6c:	4907      	ldr	r1, [pc, #28]	; (8003b8c <__NVIC_EnableIRQ+0x38>)
 8003b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b72:	095b      	lsrs	r3, r3, #5
 8003b74:	2001      	movs	r0, #1
 8003b76:	fa00 f202 	lsl.w	r2, r0, r2
 8003b7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003b7e:	bf00      	nop
 8003b80:	370c      	adds	r7, #12
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr
 8003b8a:	bf00      	nop
 8003b8c:	e000e100 	.word	0xe000e100

08003b90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	4603      	mov	r3, r0
 8003b98:	6039      	str	r1, [r7, #0]
 8003b9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	db0a      	blt.n	8003bba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	b2da      	uxtb	r2, r3
 8003ba8:	490c      	ldr	r1, [pc, #48]	; (8003bdc <__NVIC_SetPriority+0x4c>)
 8003baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bae:	0112      	lsls	r2, r2, #4
 8003bb0:	b2d2      	uxtb	r2, r2
 8003bb2:	440b      	add	r3, r1
 8003bb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003bb8:	e00a      	b.n	8003bd0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	b2da      	uxtb	r2, r3
 8003bbe:	4908      	ldr	r1, [pc, #32]	; (8003be0 <__NVIC_SetPriority+0x50>)
 8003bc0:	79fb      	ldrb	r3, [r7, #7]
 8003bc2:	f003 030f 	and.w	r3, r3, #15
 8003bc6:	3b04      	subs	r3, #4
 8003bc8:	0112      	lsls	r2, r2, #4
 8003bca:	b2d2      	uxtb	r2, r2
 8003bcc:	440b      	add	r3, r1
 8003bce:	761a      	strb	r2, [r3, #24]
}
 8003bd0:	bf00      	nop
 8003bd2:	370c      	adds	r7, #12
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr
 8003bdc:	e000e100 	.word	0xe000e100
 8003be0:	e000ed00 	.word	0xe000ed00

08003be4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b089      	sub	sp, #36	; 0x24
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	60b9      	str	r1, [r7, #8]
 8003bee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f003 0307 	and.w	r3, r3, #7
 8003bf6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	f1c3 0307 	rsb	r3, r3, #7
 8003bfe:	2b04      	cmp	r3, #4
 8003c00:	bf28      	it	cs
 8003c02:	2304      	movcs	r3, #4
 8003c04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	3304      	adds	r3, #4
 8003c0a:	2b06      	cmp	r3, #6
 8003c0c:	d902      	bls.n	8003c14 <NVIC_EncodePriority+0x30>
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	3b03      	subs	r3, #3
 8003c12:	e000      	b.n	8003c16 <NVIC_EncodePriority+0x32>
 8003c14:	2300      	movs	r3, #0
 8003c16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003c1c:	69bb      	ldr	r3, [r7, #24]
 8003c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c22:	43da      	mvns	r2, r3
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	401a      	ands	r2, r3
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c2c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	fa01 f303 	lsl.w	r3, r1, r3
 8003c36:	43d9      	mvns	r1, r3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c3c:	4313      	orrs	r3, r2
         );
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3724      	adds	r7, #36	; 0x24
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr
	...

08003c4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b082      	sub	sp, #8
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	3b01      	subs	r3, #1
 8003c58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c5c:	d301      	bcc.n	8003c62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e00f      	b.n	8003c82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c62:	4a0a      	ldr	r2, [pc, #40]	; (8003c8c <SysTick_Config+0x40>)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	3b01      	subs	r3, #1
 8003c68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c6a:	210f      	movs	r1, #15
 8003c6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c70:	f7ff ff8e 	bl	8003b90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c74:	4b05      	ldr	r3, [pc, #20]	; (8003c8c <SysTick_Config+0x40>)
 8003c76:	2200      	movs	r2, #0
 8003c78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c7a:	4b04      	ldr	r3, [pc, #16]	; (8003c8c <SysTick_Config+0x40>)
 8003c7c:	2207      	movs	r2, #7
 8003c7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c80:	2300      	movs	r3, #0
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3708      	adds	r7, #8
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	e000e010 	.word	0xe000e010

08003c90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b082      	sub	sp, #8
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f7ff ff29 	bl	8003af0 <__NVIC_SetPriorityGrouping>
}
 8003c9e:	bf00      	nop
 8003ca0:	3708      	adds	r7, #8
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}

08003ca6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ca6:	b580      	push	{r7, lr}
 8003ca8:	b086      	sub	sp, #24
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	4603      	mov	r3, r0
 8003cae:	60b9      	str	r1, [r7, #8]
 8003cb0:	607a      	str	r2, [r7, #4]
 8003cb2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003cb4:	f7ff ff40 	bl	8003b38 <__NVIC_GetPriorityGrouping>
 8003cb8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	68b9      	ldr	r1, [r7, #8]
 8003cbe:	6978      	ldr	r0, [r7, #20]
 8003cc0:	f7ff ff90 	bl	8003be4 <NVIC_EncodePriority>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cca:	4611      	mov	r1, r2
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f7ff ff5f 	bl	8003b90 <__NVIC_SetPriority>
}
 8003cd2:	bf00      	nop
 8003cd4:	3718      	adds	r7, #24
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}

08003cda <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cda:	b580      	push	{r7, lr}
 8003cdc:	b082      	sub	sp, #8
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f7ff ff33 	bl	8003b54 <__NVIC_EnableIRQ>
}
 8003cee:	bf00      	nop
 8003cf0:	3708      	adds	r7, #8
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}

08003cf6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003cf6:	b580      	push	{r7, lr}
 8003cf8:	b082      	sub	sp, #8
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f7ff ffa4 	bl	8003c4c <SysTick_Config>
 8003d04:	4603      	mov	r3, r0
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3708      	adds	r7, #8
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}

08003d0e <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8003d0e:	b580      	push	{r7, lr}
 8003d10:	b084      	sub	sp, #16
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8003d16:	f7ff febb 	bl	8003a90 <HAL_GetTick>
 8003d1a:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d101      	bne.n	8003d26 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e06b      	b.n	8003dfe <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	2b02      	cmp	r3, #2
 8003d30:	d008      	beq.n	8003d44 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2220      	movs	r2, #32
 8003d36:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e05c      	b.n	8003dfe <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	695a      	ldr	r2, [r3, #20]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f042 0204 	orr.w	r2, r2, #4
 8003d52:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2205      	movs	r2, #5
 8003d58:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8003d5c:	e020      	b.n	8003da0 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8003d5e:	f7ff fe97 	bl	8003a90 <HAL_GetTick>
 8003d62:	4602      	mov	r2, r0
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	1ad3      	subs	r3, r2, r3
 8003d68:	2b05      	cmp	r3, #5
 8003d6a:	d919      	bls.n	8003da0 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d70:	f043 0210 	orr.w	r2, r3, #16
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	659a      	str	r2, [r3, #88]	; 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2203      	movs	r2, #3
 8003d7c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d003      	beq.n	8003d94 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d90:	2201      	movs	r2, #1
 8003d92:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2200      	movs	r2, #0
 8003d98:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e02e      	b.n	8003dfe <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	691b      	ldr	r3, [r3, #16]
 8003da6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d0d7      	beq.n	8003d5e <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	695a      	ldr	r2, [r3, #20]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f042 0202 	orr.w	r2, r2, #2
 8003dbc:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2204      	movs	r2, #4
 8003dc2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8003dce:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ddc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d007      	beq.n	8003df4 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003de8:	2201      	movs	r2, #1
 8003dea:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	2200      	movs	r2, #0
 8003df2:	649a      	str	r2, [r3, #72]	; 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8003dfc:	2300      	movs	r3, #0
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3710      	adds	r7, #16
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}

08003e06 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8003e06:	b480      	push	{r7}
 8003e08:	b083      	sub	sp, #12
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d101      	bne.n	8003e18 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e019      	b.n	8003e4c <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	2b02      	cmp	r3, #2
 8003e22:	d004      	beq.n	8003e2e <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2220      	movs	r2, #32
 8003e28:	659a      	str	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e00e      	b.n	8003e4c <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2204      	movs	r2, #4
 8003e32:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	695b      	ldr	r3, [r3, #20]
 8003e3c:	687a      	ldr	r2, [r7, #4]
 8003e3e:	6812      	ldr	r2, [r2, #0]
 8003e40:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003e44:	f043 0304 	orr.w	r3, r3, #4
 8003e48:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8003e4a:	2300      	movs	r3, #0
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	370c      	adds	r7, #12
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr

08003e58 <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b087      	sub	sp, #28
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	60f8      	str	r0, [r7, #12]
 8003e60:	460b      	mov	r3, r1
 8003e62:	607a      	str	r2, [r7, #4]
 8003e64:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8003e66:	2300      	movs	r3, #0
 8003e68:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8003e6a:	7afb      	ldrb	r3, [r7, #11]
 8003e6c:	2b02      	cmp	r3, #2
 8003e6e:	d011      	beq.n	8003e94 <HAL_EXTI_RegisterCallback+0x3c>
 8003e70:	2b02      	cmp	r3, #2
 8003e72:	dc13      	bgt.n	8003e9c <HAL_EXTI_RegisterCallback+0x44>
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d002      	beq.n	8003e7e <HAL_EXTI_RegisterCallback+0x26>
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d007      	beq.n	8003e8c <HAL_EXTI_RegisterCallback+0x34>
 8003e7c:	e00e      	b.n	8003e9c <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	609a      	str	r2, [r3, #8]
      break;
 8003e8a:	e00a      	b.n	8003ea2 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	605a      	str	r2, [r3, #4]
      break;
 8003e92:	e006      	b.n	8003ea2 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	609a      	str	r2, [r3, #8]
      break;
 8003e9a:	e002      	b.n	8003ea2 <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	75fb      	strb	r3, [r7, #23]
      break;
 8003ea0:	bf00      	nop
  }

  return status;
 8003ea2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	371c      	adds	r7, #28
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr

08003eb0 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b083      	sub	sp, #12
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d101      	bne.n	8003ec4 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e003      	b.n	8003ecc <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	683a      	ldr	r2, [r7, #0]
 8003ec8:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8003eca:	2300      	movs	r3, #0
  }
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	370c      	adds	r7, #12
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr

08003ed8 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b086      	sub	sp, #24
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	0c1b      	lsrs	r3, r3, #16
 8003ee6:	f003 0301 	and.w	r3, r3, #1
 8003eea:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 031f 	and.w	r3, r3, #31
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8003efa:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	015a      	lsls	r2, r3, #5
 8003f00:	4b17      	ldr	r3, [pc, #92]	; (8003f60 <HAL_EXTI_IRQHandler+0x88>)
 8003f02:	4413      	add	r3, r2
 8003f04:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	693a      	ldr	r2, [r7, #16]
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d009      	beq.n	8003f2a <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	693a      	ldr	r2, [r7, #16]
 8003f1a:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d002      	beq.n	8003f2a <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	015a      	lsls	r2, r3, #5
 8003f2e:	4b0d      	ldr	r3, [pc, #52]	; (8003f64 <HAL_EXTI_IRQHandler+0x8c>)
 8003f30:	4413      	add	r3, r2
 8003f32:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	693a      	ldr	r2, [r7, #16]
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d009      	beq.n	8003f58 <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	693a      	ldr	r2, [r7, #16]
 8003f48:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d002      	beq.n	8003f58 <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	4798      	blx	r3
    }
  }
}
 8003f58:	bf00      	nop
 8003f5a:	3718      	adds	r7, #24
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}
 8003f60:	4602200c 	.word	0x4602200c
 8003f64:	46022010 	.word	0x46022010

08003f68 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b089      	sub	sp, #36	; 0x24
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8003f72:	2300      	movs	r3, #0
 8003f74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003f7a:	e1ba      	b.n	80042f2 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	2101      	movs	r1, #1
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	fa01 f303 	lsl.w	r3, r1, r3
 8003f88:	4013      	ands	r3, r2
 8003f8a:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	f000 81aa 	beq.w	80042ec <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	4a55      	ldr	r2, [pc, #340]	; (80040f0 <HAL_GPIO_Init+0x188>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d15d      	bne.n	800405c <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	fa02 f303 	lsl.w	r3, r2, r3
 8003fae:	43db      	mvns	r3, r3
 8003fb0:	69fa      	ldr	r2, [r7, #28]
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	f003 0201 	and.w	r2, r3, #1
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc4:	69fa      	ldr	r2, [r7, #28]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	69fa      	ldr	r2, [r7, #28]
 8003fce:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8003fd0:	4a48      	ldr	r2, [pc, #288]	; (80040f4 <HAL_GPIO_Init+0x18c>)
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003fd8:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8003fda:	4a46      	ldr	r2, [pc, #280]	; (80040f4 <HAL_GPIO_Init+0x18c>)
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	00db      	lsls	r3, r3, #3
 8003fe0:	4413      	add	r3, r2
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8003fe6:	69bb      	ldr	r3, [r7, #24]
 8003fe8:	08da      	lsrs	r2, r3, #3
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	3208      	adds	r2, #8
 8003fee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ff2:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8003ff4:	69bb      	ldr	r3, [r7, #24]
 8003ff6:	f003 0307 	and.w	r3, r3, #7
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	220f      	movs	r2, #15
 8003ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8004002:	43db      	mvns	r3, r3
 8004004:	69fa      	ldr	r2, [r7, #28]
 8004006:	4013      	ands	r3, r2
 8004008:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 800400a:	69bb      	ldr	r3, [r7, #24]
 800400c:	f003 0307 	and.w	r3, r3, #7
 8004010:	009b      	lsls	r3, r3, #2
 8004012:	220b      	movs	r2, #11
 8004014:	fa02 f303 	lsl.w	r3, r2, r3
 8004018:	69fa      	ldr	r2, [r7, #28]
 800401a:	4313      	orrs	r3, r2
 800401c:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 800401e:	69bb      	ldr	r3, [r7, #24]
 8004020:	08da      	lsrs	r2, r3, #3
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	3208      	adds	r2, #8
 8004026:	69f9      	ldr	r1, [r7, #28]
 8004028:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	005b      	lsls	r3, r3, #1
 8004036:	2203      	movs	r2, #3
 8004038:	fa02 f303 	lsl.w	r3, r2, r3
 800403c:	43db      	mvns	r3, r3
 800403e:	69fa      	ldr	r2, [r7, #28]
 8004040:	4013      	ands	r3, r2
 8004042:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8004044:	69bb      	ldr	r3, [r7, #24]
 8004046:	005b      	lsls	r3, r3, #1
 8004048:	2202      	movs	r2, #2
 800404a:	fa02 f303 	lsl.w	r3, r2, r3
 800404e:	69fa      	ldr	r2, [r7, #28]
 8004050:	4313      	orrs	r3, r2
 8004052:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	69fa      	ldr	r2, [r7, #28]
 8004058:	601a      	str	r2, [r3, #0]
 800405a:	e067      	b.n	800412c <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	2b02      	cmp	r3, #2
 8004062:	d003      	beq.n	800406c <HAL_GPIO_Init+0x104>
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	2b12      	cmp	r3, #18
 800406a:	d145      	bne.n	80040f8 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	08da      	lsrs	r2, r3, #3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	3208      	adds	r2, #8
 8004074:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004078:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	f003 0307 	and.w	r3, r3, #7
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	220f      	movs	r2, #15
 8004084:	fa02 f303 	lsl.w	r3, r2, r3
 8004088:	43db      	mvns	r3, r3
 800408a:	69fa      	ldr	r2, [r7, #28]
 800408c:	4013      	ands	r3, r2
 800408e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	691b      	ldr	r3, [r3, #16]
 8004094:	f003 020f 	and.w	r2, r3, #15
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	f003 0307 	and.w	r3, r3, #7
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	fa02 f303 	lsl.w	r3, r2, r3
 80040a4:	69fa      	ldr	r2, [r7, #28]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	08da      	lsrs	r2, r3, #3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	3208      	adds	r2, #8
 80040b2:	69f9      	ldr	r1, [r7, #28]
 80040b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80040be:	69bb      	ldr	r3, [r7, #24]
 80040c0:	005b      	lsls	r3, r3, #1
 80040c2:	2203      	movs	r2, #3
 80040c4:	fa02 f303 	lsl.w	r3, r2, r3
 80040c8:	43db      	mvns	r3, r3
 80040ca:	69fa      	ldr	r2, [r7, #28]
 80040cc:	4013      	ands	r3, r2
 80040ce:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f003 0203 	and.w	r2, r3, #3
 80040d8:	69bb      	ldr	r3, [r7, #24]
 80040da:	005b      	lsls	r3, r3, #1
 80040dc:	fa02 f303 	lsl.w	r3, r2, r3
 80040e0:	69fa      	ldr	r2, [r7, #28]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	69fa      	ldr	r2, [r7, #28]
 80040ea:	601a      	str	r2, [r3, #0]
 80040ec:	e01e      	b.n	800412c <HAL_GPIO_Init+0x1c4>
 80040ee:	bf00      	nop
 80040f0:	46020000 	.word	0x46020000
 80040f4:	0800e4ac 	.word	0x0800e4ac
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80040fe:	69bb      	ldr	r3, [r7, #24]
 8004100:	005b      	lsls	r3, r3, #1
 8004102:	2203      	movs	r2, #3
 8004104:	fa02 f303 	lsl.w	r3, r2, r3
 8004108:	43db      	mvns	r3, r3
 800410a:	69fa      	ldr	r2, [r7, #28]
 800410c:	4013      	ands	r3, r2
 800410e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	f003 0203 	and.w	r2, r3, #3
 8004118:	69bb      	ldr	r3, [r7, #24]
 800411a:	005b      	lsls	r3, r3, #1
 800411c:	fa02 f303 	lsl.w	r3, r2, r3
 8004120:	69fa      	ldr	r2, [r7, #28]
 8004122:	4313      	orrs	r3, r2
 8004124:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	69fa      	ldr	r2, [r7, #28]
 800412a:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	2b01      	cmp	r3, #1
 8004132:	d00b      	beq.n	800414c <HAL_GPIO_Init+0x1e4>
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	2b02      	cmp	r3, #2
 800413a:	d007      	beq.n	800414c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004140:	2b11      	cmp	r3, #17
 8004142:	d003      	beq.n	800414c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	2b12      	cmp	r3, #18
 800414a:	d130      	bne.n	80041ae <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8004152:	69bb      	ldr	r3, [r7, #24]
 8004154:	005b      	lsls	r3, r3, #1
 8004156:	2203      	movs	r2, #3
 8004158:	fa02 f303 	lsl.w	r3, r2, r3
 800415c:	43db      	mvns	r3, r3
 800415e:	69fa      	ldr	r2, [r7, #28]
 8004160:	4013      	ands	r3, r2
 8004162:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	68da      	ldr	r2, [r3, #12]
 8004168:	69bb      	ldr	r3, [r7, #24]
 800416a:	005b      	lsls	r3, r3, #1
 800416c:	fa02 f303 	lsl.w	r3, r2, r3
 8004170:	69fa      	ldr	r2, [r7, #28]
 8004172:	4313      	orrs	r3, r2
 8004174:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	69fa      	ldr	r2, [r7, #28]
 800417a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8004182:	2201      	movs	r2, #1
 8004184:	69bb      	ldr	r3, [r7, #24]
 8004186:	fa02 f303 	lsl.w	r3, r2, r3
 800418a:	43db      	mvns	r3, r3
 800418c:	69fa      	ldr	r2, [r7, #28]
 800418e:	4013      	ands	r3, r2
 8004190:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	091b      	lsrs	r3, r3, #4
 8004198:	f003 0201 	and.w	r2, r3, #1
 800419c:	69bb      	ldr	r3, [r7, #24]
 800419e:	fa02 f303 	lsl.w	r3, r2, r3
 80041a2:	69fa      	ldr	r2, [r7, #28]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	69fa      	ldr	r2, [r7, #28]
 80041ac:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	2b03      	cmp	r3, #3
 80041b4:	d017      	beq.n	80041e6 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	68db      	ldr	r3, [r3, #12]
 80041ba:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 80041bc:	69bb      	ldr	r3, [r7, #24]
 80041be:	005b      	lsls	r3, r3, #1
 80041c0:	2203      	movs	r2, #3
 80041c2:	fa02 f303 	lsl.w	r3, r2, r3
 80041c6:	43db      	mvns	r3, r3
 80041c8:	69fa      	ldr	r2, [r7, #28]
 80041ca:	4013      	ands	r3, r2
 80041cc:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	689a      	ldr	r2, [r3, #8]
 80041d2:	69bb      	ldr	r3, [r7, #24]
 80041d4:	005b      	lsls	r3, r3, #1
 80041d6:	fa02 f303 	lsl.w	r3, r2, r3
 80041da:	69fa      	ldr	r2, [r7, #28]
 80041dc:	4313      	orrs	r3, r2
 80041de:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	69fa      	ldr	r2, [r7, #28]
 80041e4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d07c      	beq.n	80042ec <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80041f2:	4a47      	ldr	r2, [pc, #284]	; (8004310 <HAL_GPIO_Init+0x3a8>)
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	089b      	lsrs	r3, r3, #2
 80041f8:	3318      	adds	r3, #24
 80041fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041fe:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	f003 0303 	and.w	r3, r3, #3
 8004206:	00db      	lsls	r3, r3, #3
 8004208:	220f      	movs	r2, #15
 800420a:	fa02 f303 	lsl.w	r3, r2, r3
 800420e:	43db      	mvns	r3, r3
 8004210:	69fa      	ldr	r2, [r7, #28]
 8004212:	4013      	ands	r3, r2
 8004214:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	0a9a      	lsrs	r2, r3, #10
 800421a:	4b3e      	ldr	r3, [pc, #248]	; (8004314 <HAL_GPIO_Init+0x3ac>)
 800421c:	4013      	ands	r3, r2
 800421e:	697a      	ldr	r2, [r7, #20]
 8004220:	f002 0203 	and.w	r2, r2, #3
 8004224:	00d2      	lsls	r2, r2, #3
 8004226:	4093      	lsls	r3, r2
 8004228:	69fa      	ldr	r2, [r7, #28]
 800422a:	4313      	orrs	r3, r2
 800422c:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 800422e:	4938      	ldr	r1, [pc, #224]	; (8004310 <HAL_GPIO_Init+0x3a8>)
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	089b      	lsrs	r3, r3, #2
 8004234:	3318      	adds	r3, #24
 8004236:	69fa      	ldr	r2, [r7, #28]
 8004238:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800423c:	4b34      	ldr	r3, [pc, #208]	; (8004310 <HAL_GPIO_Init+0x3a8>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	43db      	mvns	r3, r3
 8004246:	69fa      	ldr	r2, [r7, #28]
 8004248:	4013      	ands	r3, r2
 800424a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004254:	2b00      	cmp	r3, #0
 8004256:	d003      	beq.n	8004260 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8004258:	69fa      	ldr	r2, [r7, #28]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	4313      	orrs	r3, r2
 800425e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8004260:	4a2b      	ldr	r2, [pc, #172]	; (8004310 <HAL_GPIO_Init+0x3a8>)
 8004262:	69fb      	ldr	r3, [r7, #28]
 8004264:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8004266:	4b2a      	ldr	r3, [pc, #168]	; (8004310 <HAL_GPIO_Init+0x3a8>)
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	43db      	mvns	r3, r3
 8004270:	69fa      	ldr	r2, [r7, #28]
 8004272:	4013      	ands	r3, r2
 8004274:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800427e:	2b00      	cmp	r3, #0
 8004280:	d003      	beq.n	800428a <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8004282:	69fa      	ldr	r2, [r7, #28]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	4313      	orrs	r3, r2
 8004288:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 800428a:	4a21      	ldr	r2, [pc, #132]	; (8004310 <HAL_GPIO_Init+0x3a8>)
 800428c:	69fb      	ldr	r3, [r7, #28]
 800428e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8004290:	4b1f      	ldr	r3, [pc, #124]	; (8004310 <HAL_GPIO_Init+0x3a8>)
 8004292:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004296:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	43db      	mvns	r3, r3
 800429c:	69fa      	ldr	r2, [r7, #28]
 800429e:	4013      	ands	r3, r2
 80042a0:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d003      	beq.n	80042b6 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 80042ae:	69fa      	ldr	r2, [r7, #28]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 80042b6:	4a16      	ldr	r2, [pc, #88]	; (8004310 <HAL_GPIO_Init+0x3a8>)
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 80042be:	4b14      	ldr	r3, [pc, #80]	; (8004310 <HAL_GPIO_Init+0x3a8>)
 80042c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042c4:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	43db      	mvns	r3, r3
 80042ca:	69fa      	ldr	r2, [r7, #28]
 80042cc:	4013      	ands	r3, r2
 80042ce:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d003      	beq.n	80042e4 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 80042dc:	69fa      	ldr	r2, [r7, #28]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	4313      	orrs	r3, r2
 80042e2:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 80042e4:	4a0a      	ldr	r2, [pc, #40]	; (8004310 <HAL_GPIO_Init+0x3a8>)
 80042e6:	69fb      	ldr	r3, [r7, #28]
 80042e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	3301      	adds	r3, #1
 80042f0:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	fa22 f303 	lsr.w	r3, r2, r3
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	f47f ae3d 	bne.w	8003f7c <HAL_GPIO_Init+0x14>
  }
}
 8004302:	bf00      	nop
 8004304:	bf00      	nop
 8004306:	3724      	adds	r7, #36	; 0x24
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr
 8004310:	46022000 	.word	0x46022000
 8004314:	002f7f7f 	.word	0x002f7f7f

08004318 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004318:	b480      	push	{r7}
 800431a:	b083      	sub	sp, #12
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	460b      	mov	r3, r1
 8004322:	807b      	strh	r3, [r7, #2]
 8004324:	4613      	mov	r3, r2
 8004326:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004328:	787b      	ldrb	r3, [r7, #1]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d003      	beq.n	8004336 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800432e:	887a      	ldrh	r2, [r7, #2]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8004334:	e002      	b.n	800433c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8004336:	887a      	ldrh	r2, [r7, #2]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800433c:	bf00      	nop
 800433e:	370c      	adds	r7, #12
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr

08004348 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8004348:	b480      	push	{r7}
 800434a:	b085      	sub	sp, #20
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004350:	2300      	movs	r3, #0
 8004352:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8004354:	4b0b      	ldr	r3, [pc, #44]	; (8004384 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0301 	and.w	r3, r3, #1
 800435c:	2b00      	cmp	r3, #0
 800435e:	d002      	beq.n	8004366 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	73fb      	strb	r3, [r7, #15]
 8004364:	e007      	b.n	8004376 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8004366:	4b07      	ldr	r3, [pc, #28]	; (8004384 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f023 0204 	bic.w	r2, r3, #4
 800436e:	4905      	ldr	r1, [pc, #20]	; (8004384 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	4313      	orrs	r3, r2
 8004374:	600b      	str	r3, [r1, #0]
  }

  return status;
 8004376:	7bfb      	ldrb	r3, [r7, #15]
}
 8004378:	4618      	mov	r0, r3
 800437a:	3714      	adds	r7, #20
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr
 8004384:	40030400 	.word	0x40030400

08004388 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8004388:	b480      	push	{r7}
 800438a:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 800438c:	4b05      	ldr	r3, [pc, #20]	; (80043a4 <HAL_ICACHE_Enable+0x1c>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a04      	ldr	r2, [pc, #16]	; (80043a4 <HAL_ICACHE_Enable+0x1c>)
 8004392:	f043 0301 	orr.w	r3, r3, #1
 8004396:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8004398:	2300      	movs	r3, #0
}
 800439a:	4618      	mov	r0, r3
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr
 80043a4:	40030400 	.word	0x40030400

080043a8 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b085      	sub	sp, #20
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 80043b0:	4b39      	ldr	r3, [pc, #228]	; (8004498 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80043b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80043b8:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80043ba:	68ba      	ldr	r2, [r7, #8]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	429a      	cmp	r2, r3
 80043c0:	d10b      	bne.n	80043da <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043c8:	d905      	bls.n	80043d6 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80043ca:	4b33      	ldr	r3, [pc, #204]	; (8004498 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80043cc:	68db      	ldr	r3, [r3, #12]
 80043ce:	4a32      	ldr	r2, [pc, #200]	; (8004498 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80043d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043d4:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 80043d6:	2300      	movs	r3, #0
 80043d8:	e057      	b.n	800448a <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043e0:	d90a      	bls.n	80043f8 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 80043e2:	4b2d      	ldr	r3, [pc, #180]	; (8004498 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	4313      	orrs	r3, r2
 80043ee:	4a2a      	ldr	r2, [pc, #168]	; (8004498 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80043f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043f4:	60d3      	str	r3, [r2, #12]
 80043f6:	e007      	b.n	8004408 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 80043f8:	4b27      	ldr	r3, [pc, #156]	; (8004498 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004400:	4925      	ldr	r1, [pc, #148]	; (8004498 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	4313      	orrs	r3, r2
 8004406:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004408:	4b24      	ldr	r3, [pc, #144]	; (800449c <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a24      	ldr	r2, [pc, #144]	; (80044a0 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800440e:	fba2 2303 	umull	r2, r3, r2, r3
 8004412:	099b      	lsrs	r3, r3, #6
 8004414:	2232      	movs	r2, #50	; 0x32
 8004416:	fb02 f303 	mul.w	r3, r2, r3
 800441a:	4a21      	ldr	r2, [pc, #132]	; (80044a0 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800441c:	fba2 2303 	umull	r2, r3, r2, r3
 8004420:	099b      	lsrs	r3, r3, #6
 8004422:	3301      	adds	r3, #1
 8004424:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8004426:	e002      	b.n	800442e <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	3b01      	subs	r3, #1
 800442c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800442e:	4b1a      	ldr	r3, [pc, #104]	; (8004498 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d102      	bne.n	8004440 <HAL_PWREx_ControlVoltageScaling+0x98>
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d1f3      	bne.n	8004428 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d01b      	beq.n	800447e <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004446:	4b15      	ldr	r3, [pc, #84]	; (800449c <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a15      	ldr	r2, [pc, #84]	; (80044a0 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800444c:	fba2 2303 	umull	r2, r3, r2, r3
 8004450:	099b      	lsrs	r3, r3, #6
 8004452:	2232      	movs	r2, #50	; 0x32
 8004454:	fb02 f303 	mul.w	r3, r2, r3
 8004458:	4a11      	ldr	r2, [pc, #68]	; (80044a0 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800445a:	fba2 2303 	umull	r2, r3, r2, r3
 800445e:	099b      	lsrs	r3, r3, #6
 8004460:	3301      	adds	r3, #1
 8004462:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8004464:	e002      	b.n	800446c <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	3b01      	subs	r3, #1
 800446a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800446c:	4b0a      	ldr	r3, [pc, #40]	; (8004498 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800446e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004470:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004474:	2b00      	cmp	r3, #0
 8004476:	d102      	bne.n	800447e <HAL_PWREx_ControlVoltageScaling+0xd6>
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d1f3      	bne.n	8004466 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d101      	bne.n	8004488 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8004484:	2303      	movs	r3, #3
 8004486:	e000      	b.n	800448a <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8004488:	2300      	movs	r3, #0
}
 800448a:	4618      	mov	r0, r3
 800448c:	3714      	adds	r7, #20
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr
 8004496:	bf00      	nop
 8004498:	46020800 	.word	0x46020800
 800449c:	20000108 	.word	0x20000108
 80044a0:	10624dd3 	.word	0x10624dd3

080044a4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80044a4:	b480      	push	{r7}
 80044a6:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 80044a8:	4b04      	ldr	r3, [pc, #16]	; (80044bc <HAL_PWREx_GetVoltageRange+0x18>)
 80044aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr
 80044ba:	bf00      	nop
 80044bc:	46020800 	.word	0x46020800

080044c0 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b085      	sub	sp, #20
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80044c8:	4b22      	ldr	r3, [pc, #136]	; (8004554 <HAL_PWREx_ConfigSupply+0x94>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a22      	ldr	r2, [pc, #136]	; (8004558 <HAL_PWREx_ConfigSupply+0x98>)
 80044ce:	fba2 2303 	umull	r2, r3, r2, r3
 80044d2:	099b      	lsrs	r3, r3, #6
 80044d4:	2232      	movs	r2, #50	; 0x32
 80044d6:	fb02 f303 	mul.w	r3, r2, r3
 80044da:	4a1f      	ldr	r2, [pc, #124]	; (8004558 <HAL_PWREx_ConfigSupply+0x98>)
 80044dc:	fba2 2303 	umull	r2, r3, r2, r3
 80044e0:	099b      	lsrs	r3, r3, #6
 80044e2:	3301      	adds	r3, #1
 80044e4:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d113      	bne.n	8004514 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80044ec:	4b1b      	ldr	r3, [pc, #108]	; (800455c <HAL_PWREx_ConfigSupply+0x9c>)
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	4a1a      	ldr	r2, [pc, #104]	; (800455c <HAL_PWREx_ConfigSupply+0x9c>)
 80044f2:	f023 0302 	bic.w	r3, r3, #2
 80044f6:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80044f8:	e002      	b.n	8004500 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	3b01      	subs	r3, #1
 80044fe:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004500:	4b16      	ldr	r3, [pc, #88]	; (800455c <HAL_PWREx_ConfigSupply+0x9c>)
 8004502:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004504:	f003 0302 	and.w	r3, r3, #2
 8004508:	2b02      	cmp	r3, #2
 800450a:	d116      	bne.n	800453a <HAL_PWREx_ConfigSupply+0x7a>
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d1f3      	bne.n	80044fa <HAL_PWREx_ConfigSupply+0x3a>
 8004512:	e012      	b.n	800453a <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8004514:	4b11      	ldr	r3, [pc, #68]	; (800455c <HAL_PWREx_ConfigSupply+0x9c>)
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	4a10      	ldr	r2, [pc, #64]	; (800455c <HAL_PWREx_ConfigSupply+0x9c>)
 800451a:	f043 0302 	orr.w	r3, r3, #2
 800451e:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004520:	e002      	b.n	8004528 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	3b01      	subs	r3, #1
 8004526:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004528:	4b0c      	ldr	r3, [pc, #48]	; (800455c <HAL_PWREx_ConfigSupply+0x9c>)
 800452a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800452c:	f003 0302 	and.w	r3, r3, #2
 8004530:	2b00      	cmp	r3, #0
 8004532:	d102      	bne.n	800453a <HAL_PWREx_ConfigSupply+0x7a>
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d1f3      	bne.n	8004522 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d101      	bne.n	8004544 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8004540:	2303      	movs	r3, #3
 8004542:	e000      	b.n	8004546 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8004544:	2300      	movs	r3, #0
}
 8004546:	4618      	mov	r0, r3
 8004548:	3714      	adds	r7, #20
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr
 8004552:	bf00      	nop
 8004554:	20000108 	.word	0x20000108
 8004558:	10624dd3 	.word	0x10624dd3
 800455c:	46020800 	.word	0x46020800

08004560 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b08e      	sub	sp, #56	; 0x38
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8004568:	2300      	movs	r3, #0
 800456a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d102      	bne.n	800457a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	f000 bec8 	b.w	800530a <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800457a:	4b99      	ldr	r3, [pc, #612]	; (80047e0 <HAL_RCC_OscConfig+0x280>)
 800457c:	69db      	ldr	r3, [r3, #28]
 800457e:	f003 030c 	and.w	r3, r3, #12
 8004582:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004584:	4b96      	ldr	r3, [pc, #600]	; (80047e0 <HAL_RCC_OscConfig+0x280>)
 8004586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004588:	f003 0303 	and.w	r3, r3, #3
 800458c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 0310 	and.w	r3, r3, #16
 8004596:	2b00      	cmp	r3, #0
 8004598:	f000 816c 	beq.w	8004874 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800459c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d007      	beq.n	80045b2 <HAL_RCC_OscConfig+0x52>
 80045a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a4:	2b0c      	cmp	r3, #12
 80045a6:	f040 80de 	bne.w	8004766 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80045aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	f040 80da 	bne.w	8004766 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	69db      	ldr	r3, [r3, #28]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d102      	bne.n	80045c0 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	f000 bea5 	b.w	800530a <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045c4:	4b86      	ldr	r3, [pc, #536]	; (80047e0 <HAL_RCC_OscConfig+0x280>)
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d004      	beq.n	80045da <HAL_RCC_OscConfig+0x7a>
 80045d0:	4b83      	ldr	r3, [pc, #524]	; (80047e0 <HAL_RCC_OscConfig+0x280>)
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80045d8:	e005      	b.n	80045e6 <HAL_RCC_OscConfig+0x86>
 80045da:	4b81      	ldr	r3, [pc, #516]	; (80047e0 <HAL_RCC_OscConfig+0x280>)
 80045dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80045e0:	041b      	lsls	r3, r3, #16
 80045e2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d255      	bcs.n	8004696 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80045ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d10a      	bne.n	8004606 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f4:	4618      	mov	r0, r3
 80045f6:	f001 f9d9 	bl	80059ac <RCC_SetFlashLatencyFromMSIRange>
 80045fa:	4603      	mov	r3, r0
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d002      	beq.n	8004606 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	f000 be82 	b.w	800530a <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004606:	4b76      	ldr	r3, [pc, #472]	; (80047e0 <HAL_RCC_OscConfig+0x280>)
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	4a75      	ldr	r2, [pc, #468]	; (80047e0 <HAL_RCC_OscConfig+0x280>)
 800460c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004610:	6093      	str	r3, [r2, #8]
 8004612:	4b73      	ldr	r3, [pc, #460]	; (80047e0 <HAL_RCC_OscConfig+0x280>)
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461e:	4970      	ldr	r1, [pc, #448]	; (80047e0 <HAL_RCC_OscConfig+0x280>)
 8004620:	4313      	orrs	r3, r2
 8004622:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004628:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800462c:	d309      	bcc.n	8004642 <HAL_RCC_OscConfig+0xe2>
 800462e:	4b6c      	ldr	r3, [pc, #432]	; (80047e0 <HAL_RCC_OscConfig+0x280>)
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	f023 021f 	bic.w	r2, r3, #31
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6a1b      	ldr	r3, [r3, #32]
 800463a:	4969      	ldr	r1, [pc, #420]	; (80047e0 <HAL_RCC_OscConfig+0x280>)
 800463c:	4313      	orrs	r3, r2
 800463e:	60cb      	str	r3, [r1, #12]
 8004640:	e07e      	b.n	8004740 <HAL_RCC_OscConfig+0x1e0>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004646:	2b00      	cmp	r3, #0
 8004648:	da0a      	bge.n	8004660 <HAL_RCC_OscConfig+0x100>
 800464a:	4b65      	ldr	r3, [pc, #404]	; (80047e0 <HAL_RCC_OscConfig+0x280>)
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6a1b      	ldr	r3, [r3, #32]
 8004656:	015b      	lsls	r3, r3, #5
 8004658:	4961      	ldr	r1, [pc, #388]	; (80047e0 <HAL_RCC_OscConfig+0x280>)
 800465a:	4313      	orrs	r3, r2
 800465c:	60cb      	str	r3, [r1, #12]
 800465e:	e06f      	b.n	8004740 <HAL_RCC_OscConfig+0x1e0>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004664:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004668:	d30a      	bcc.n	8004680 <HAL_RCC_OscConfig+0x120>
 800466a:	4b5d      	ldr	r3, [pc, #372]	; (80047e0 <HAL_RCC_OscConfig+0x280>)
 800466c:	68db      	ldr	r3, [r3, #12]
 800466e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6a1b      	ldr	r3, [r3, #32]
 8004676:	029b      	lsls	r3, r3, #10
 8004678:	4959      	ldr	r1, [pc, #356]	; (80047e0 <HAL_RCC_OscConfig+0x280>)
 800467a:	4313      	orrs	r3, r2
 800467c:	60cb      	str	r3, [r1, #12]
 800467e:	e05f      	b.n	8004740 <HAL_RCC_OscConfig+0x1e0>
 8004680:	4b57      	ldr	r3, [pc, #348]	; (80047e0 <HAL_RCC_OscConfig+0x280>)
 8004682:	68db      	ldr	r3, [r3, #12]
 8004684:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6a1b      	ldr	r3, [r3, #32]
 800468c:	03db      	lsls	r3, r3, #15
 800468e:	4954      	ldr	r1, [pc, #336]	; (80047e0 <HAL_RCC_OscConfig+0x280>)
 8004690:	4313      	orrs	r3, r2
 8004692:	60cb      	str	r3, [r1, #12]
 8004694:	e054      	b.n	8004740 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004696:	4b52      	ldr	r3, [pc, #328]	; (80047e0 <HAL_RCC_OscConfig+0x280>)
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	4a51      	ldr	r2, [pc, #324]	; (80047e0 <HAL_RCC_OscConfig+0x280>)
 800469c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80046a0:	6093      	str	r3, [r2, #8]
 80046a2:	4b4f      	ldr	r3, [pc, #316]	; (80047e0 <HAL_RCC_OscConfig+0x280>)
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ae:	494c      	ldr	r1, [pc, #304]	; (80047e0 <HAL_RCC_OscConfig+0x280>)
 80046b0:	4313      	orrs	r3, r2
 80046b2:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b8:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80046bc:	d309      	bcc.n	80046d2 <HAL_RCC_OscConfig+0x172>
 80046be:	4b48      	ldr	r3, [pc, #288]	; (80047e0 <HAL_RCC_OscConfig+0x280>)
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	f023 021f 	bic.w	r2, r3, #31
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6a1b      	ldr	r3, [r3, #32]
 80046ca:	4945      	ldr	r1, [pc, #276]	; (80047e0 <HAL_RCC_OscConfig+0x280>)
 80046cc:	4313      	orrs	r3, r2
 80046ce:	60cb      	str	r3, [r1, #12]
 80046d0:	e028      	b.n	8004724 <HAL_RCC_OscConfig+0x1c4>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	da0a      	bge.n	80046f0 <HAL_RCC_OscConfig+0x190>
 80046da:	4b41      	ldr	r3, [pc, #260]	; (80047e0 <HAL_RCC_OscConfig+0x280>)
 80046dc:	68db      	ldr	r3, [r3, #12]
 80046de:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6a1b      	ldr	r3, [r3, #32]
 80046e6:	015b      	lsls	r3, r3, #5
 80046e8:	493d      	ldr	r1, [pc, #244]	; (80047e0 <HAL_RCC_OscConfig+0x280>)
 80046ea:	4313      	orrs	r3, r2
 80046ec:	60cb      	str	r3, [r1, #12]
 80046ee:	e019      	b.n	8004724 <HAL_RCC_OscConfig+0x1c4>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046f8:	d30a      	bcc.n	8004710 <HAL_RCC_OscConfig+0x1b0>
 80046fa:	4b39      	ldr	r3, [pc, #228]	; (80047e0 <HAL_RCC_OscConfig+0x280>)
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a1b      	ldr	r3, [r3, #32]
 8004706:	029b      	lsls	r3, r3, #10
 8004708:	4935      	ldr	r1, [pc, #212]	; (80047e0 <HAL_RCC_OscConfig+0x280>)
 800470a:	4313      	orrs	r3, r2
 800470c:	60cb      	str	r3, [r1, #12]
 800470e:	e009      	b.n	8004724 <HAL_RCC_OscConfig+0x1c4>
 8004710:	4b33      	ldr	r3, [pc, #204]	; (80047e0 <HAL_RCC_OscConfig+0x280>)
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6a1b      	ldr	r3, [r3, #32]
 800471c:	03db      	lsls	r3, r3, #15
 800471e:	4930      	ldr	r1, [pc, #192]	; (80047e0 <HAL_RCC_OscConfig+0x280>)
 8004720:	4313      	orrs	r3, r2
 8004722:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004726:	2b00      	cmp	r3, #0
 8004728:	d10a      	bne.n	8004740 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472e:	4618      	mov	r0, r3
 8004730:	f001 f93c 	bl	80059ac <RCC_SetFlashLatencyFromMSIRange>
 8004734:	4603      	mov	r3, r0
 8004736:	2b00      	cmp	r3, #0
 8004738:	d002      	beq.n	8004740 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	f000 bde5 	b.w	800530a <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8004740:	f001 f8de 	bl	8005900 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004744:	4b27      	ldr	r3, [pc, #156]	; (80047e4 <HAL_RCC_OscConfig+0x284>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4618      	mov	r0, r3
 800474a:	f7ff f957 	bl	80039fc <HAL_InitTick>
 800474e:	4603      	mov	r3, r0
 8004750:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 8004754:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004758:	2b00      	cmp	r3, #0
 800475a:	f000 808a 	beq.w	8004872 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 800475e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004762:	f000 bdd2 	b.w	800530a <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	69db      	ldr	r3, [r3, #28]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d066      	beq.n	800483c <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 800476e:	4b1c      	ldr	r3, [pc, #112]	; (80047e0 <HAL_RCC_OscConfig+0x280>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a1b      	ldr	r2, [pc, #108]	; (80047e0 <HAL_RCC_OscConfig+0x280>)
 8004774:	f043 0301 	orr.w	r3, r3, #1
 8004778:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800477a:	f7ff f989 	bl	8003a90 <HAL_GetTick>
 800477e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004780:	e009      	b.n	8004796 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004782:	f7ff f985 	bl	8003a90 <HAL_GetTick>
 8004786:	4602      	mov	r2, r0
 8004788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800478a:	1ad3      	subs	r3, r2, r3
 800478c:	2b02      	cmp	r3, #2
 800478e:	d902      	bls.n	8004796 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8004790:	2303      	movs	r3, #3
 8004792:	f000 bdba 	b.w	800530a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004796:	4b12      	ldr	r3, [pc, #72]	; (80047e0 <HAL_RCC_OscConfig+0x280>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 0304 	and.w	r3, r3, #4
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d0ef      	beq.n	8004782 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80047a2:	4b0f      	ldr	r3, [pc, #60]	; (80047e0 <HAL_RCC_OscConfig+0x280>)
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	4a0e      	ldr	r2, [pc, #56]	; (80047e0 <HAL_RCC_OscConfig+0x280>)
 80047a8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80047ac:	6093      	str	r3, [r2, #8]
 80047ae:	4b0c      	ldr	r3, [pc, #48]	; (80047e0 <HAL_RCC_OscConfig+0x280>)
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ba:	4909      	ldr	r1, [pc, #36]	; (80047e0 <HAL_RCC_OscConfig+0x280>)
 80047bc:	4313      	orrs	r3, r2
 80047be:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c4:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80047c8:	d30e      	bcc.n	80047e8 <HAL_RCC_OscConfig+0x288>
 80047ca:	4b05      	ldr	r3, [pc, #20]	; (80047e0 <HAL_RCC_OscConfig+0x280>)
 80047cc:	68db      	ldr	r3, [r3, #12]
 80047ce:	f023 021f 	bic.w	r2, r3, #31
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6a1b      	ldr	r3, [r3, #32]
 80047d6:	4902      	ldr	r1, [pc, #8]	; (80047e0 <HAL_RCC_OscConfig+0x280>)
 80047d8:	4313      	orrs	r3, r2
 80047da:	60cb      	str	r3, [r1, #12]
 80047dc:	e04a      	b.n	8004874 <HAL_RCC_OscConfig+0x314>
 80047de:	bf00      	nop
 80047e0:	46020c00 	.word	0x46020c00
 80047e4:	2000010c 	.word	0x2000010c
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	da0a      	bge.n	8004806 <HAL_RCC_OscConfig+0x2a6>
 80047f0:	4b98      	ldr	r3, [pc, #608]	; (8004a54 <HAL_RCC_OscConfig+0x4f4>)
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6a1b      	ldr	r3, [r3, #32]
 80047fc:	015b      	lsls	r3, r3, #5
 80047fe:	4995      	ldr	r1, [pc, #596]	; (8004a54 <HAL_RCC_OscConfig+0x4f4>)
 8004800:	4313      	orrs	r3, r2
 8004802:	60cb      	str	r3, [r1, #12]
 8004804:	e036      	b.n	8004874 <HAL_RCC_OscConfig+0x314>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800480e:	d30a      	bcc.n	8004826 <HAL_RCC_OscConfig+0x2c6>
 8004810:	4b90      	ldr	r3, [pc, #576]	; (8004a54 <HAL_RCC_OscConfig+0x4f4>)
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6a1b      	ldr	r3, [r3, #32]
 800481c:	029b      	lsls	r3, r3, #10
 800481e:	498d      	ldr	r1, [pc, #564]	; (8004a54 <HAL_RCC_OscConfig+0x4f4>)
 8004820:	4313      	orrs	r3, r2
 8004822:	60cb      	str	r3, [r1, #12]
 8004824:	e026      	b.n	8004874 <HAL_RCC_OscConfig+0x314>
 8004826:	4b8b      	ldr	r3, [pc, #556]	; (8004a54 <HAL_RCC_OscConfig+0x4f4>)
 8004828:	68db      	ldr	r3, [r3, #12]
 800482a:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6a1b      	ldr	r3, [r3, #32]
 8004832:	03db      	lsls	r3, r3, #15
 8004834:	4987      	ldr	r1, [pc, #540]	; (8004a54 <HAL_RCC_OscConfig+0x4f4>)
 8004836:	4313      	orrs	r3, r2
 8004838:	60cb      	str	r3, [r1, #12]
 800483a:	e01b      	b.n	8004874 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 800483c:	4b85      	ldr	r3, [pc, #532]	; (8004a54 <HAL_RCC_OscConfig+0x4f4>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a84      	ldr	r2, [pc, #528]	; (8004a54 <HAL_RCC_OscConfig+0x4f4>)
 8004842:	f023 0301 	bic.w	r3, r3, #1
 8004846:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004848:	f7ff f922 	bl	8003a90 <HAL_GetTick>
 800484c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800484e:	e009      	b.n	8004864 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004850:	f7ff f91e 	bl	8003a90 <HAL_GetTick>
 8004854:	4602      	mov	r2, r0
 8004856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	2b02      	cmp	r3, #2
 800485c:	d902      	bls.n	8004864 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 800485e:	2303      	movs	r3, #3
 8004860:	f000 bd53 	b.w	800530a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8004864:	4b7b      	ldr	r3, [pc, #492]	; (8004a54 <HAL_RCC_OscConfig+0x4f4>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 0304 	and.w	r3, r3, #4
 800486c:	2b00      	cmp	r3, #0
 800486e:	d1ef      	bne.n	8004850 <HAL_RCC_OscConfig+0x2f0>
 8004870:	e000      	b.n	8004874 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004872:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 0301 	and.w	r3, r3, #1
 800487c:	2b00      	cmp	r3, #0
 800487e:	f000 808b 	beq.w	8004998 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004884:	2b08      	cmp	r3, #8
 8004886:	d005      	beq.n	8004894 <HAL_RCC_OscConfig+0x334>
 8004888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800488a:	2b0c      	cmp	r3, #12
 800488c:	d109      	bne.n	80048a2 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800488e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004890:	2b03      	cmp	r3, #3
 8004892:	d106      	bne.n	80048a2 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d17d      	bne.n	8004998 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	f000 bd34 	b.w	800530a <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048aa:	d106      	bne.n	80048ba <HAL_RCC_OscConfig+0x35a>
 80048ac:	4b69      	ldr	r3, [pc, #420]	; (8004a54 <HAL_RCC_OscConfig+0x4f4>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a68      	ldr	r2, [pc, #416]	; (8004a54 <HAL_RCC_OscConfig+0x4f4>)
 80048b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048b6:	6013      	str	r3, [r2, #0]
 80048b8:	e041      	b.n	800493e <HAL_RCC_OscConfig+0x3de>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80048c2:	d112      	bne.n	80048ea <HAL_RCC_OscConfig+0x38a>
 80048c4:	4b63      	ldr	r3, [pc, #396]	; (8004a54 <HAL_RCC_OscConfig+0x4f4>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a62      	ldr	r2, [pc, #392]	; (8004a54 <HAL_RCC_OscConfig+0x4f4>)
 80048ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048ce:	6013      	str	r3, [r2, #0]
 80048d0:	4b60      	ldr	r3, [pc, #384]	; (8004a54 <HAL_RCC_OscConfig+0x4f4>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a5f      	ldr	r2, [pc, #380]	; (8004a54 <HAL_RCC_OscConfig+0x4f4>)
 80048d6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80048da:	6013      	str	r3, [r2, #0]
 80048dc:	4b5d      	ldr	r3, [pc, #372]	; (8004a54 <HAL_RCC_OscConfig+0x4f4>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a5c      	ldr	r2, [pc, #368]	; (8004a54 <HAL_RCC_OscConfig+0x4f4>)
 80048e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048e6:	6013      	str	r3, [r2, #0]
 80048e8:	e029      	b.n	800493e <HAL_RCC_OscConfig+0x3de>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80048f2:	d112      	bne.n	800491a <HAL_RCC_OscConfig+0x3ba>
 80048f4:	4b57      	ldr	r3, [pc, #348]	; (8004a54 <HAL_RCC_OscConfig+0x4f4>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a56      	ldr	r2, [pc, #344]	; (8004a54 <HAL_RCC_OscConfig+0x4f4>)
 80048fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048fe:	6013      	str	r3, [r2, #0]
 8004900:	4b54      	ldr	r3, [pc, #336]	; (8004a54 <HAL_RCC_OscConfig+0x4f4>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a53      	ldr	r2, [pc, #332]	; (8004a54 <HAL_RCC_OscConfig+0x4f4>)
 8004906:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800490a:	6013      	str	r3, [r2, #0]
 800490c:	4b51      	ldr	r3, [pc, #324]	; (8004a54 <HAL_RCC_OscConfig+0x4f4>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a50      	ldr	r2, [pc, #320]	; (8004a54 <HAL_RCC_OscConfig+0x4f4>)
 8004912:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004916:	6013      	str	r3, [r2, #0]
 8004918:	e011      	b.n	800493e <HAL_RCC_OscConfig+0x3de>
 800491a:	4b4e      	ldr	r3, [pc, #312]	; (8004a54 <HAL_RCC_OscConfig+0x4f4>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a4d      	ldr	r2, [pc, #308]	; (8004a54 <HAL_RCC_OscConfig+0x4f4>)
 8004920:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004924:	6013      	str	r3, [r2, #0]
 8004926:	4b4b      	ldr	r3, [pc, #300]	; (8004a54 <HAL_RCC_OscConfig+0x4f4>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a4a      	ldr	r2, [pc, #296]	; (8004a54 <HAL_RCC_OscConfig+0x4f4>)
 800492c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004930:	6013      	str	r3, [r2, #0]
 8004932:	4b48      	ldr	r3, [pc, #288]	; (8004a54 <HAL_RCC_OscConfig+0x4f4>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a47      	ldr	r2, [pc, #284]	; (8004a54 <HAL_RCC_OscConfig+0x4f4>)
 8004938:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800493c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d014      	beq.n	8004970 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8004946:	f7ff f8a3 	bl	8003a90 <HAL_GetTick>
 800494a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800494c:	e009      	b.n	8004962 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800494e:	f7ff f89f 	bl	8003a90 <HAL_GetTick>
 8004952:	4602      	mov	r2, r0
 8004954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004956:	1ad3      	subs	r3, r2, r3
 8004958:	2b64      	cmp	r3, #100	; 0x64
 800495a:	d902      	bls.n	8004962 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 800495c:	2303      	movs	r3, #3
 800495e:	f000 bcd4 	b.w	800530a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004962:	4b3c      	ldr	r3, [pc, #240]	; (8004a54 <HAL_RCC_OscConfig+0x4f4>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800496a:	2b00      	cmp	r3, #0
 800496c:	d0ef      	beq.n	800494e <HAL_RCC_OscConfig+0x3ee>
 800496e:	e013      	b.n	8004998 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8004970:	f7ff f88e 	bl	8003a90 <HAL_GetTick>
 8004974:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004976:	e009      	b.n	800498c <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004978:	f7ff f88a 	bl	8003a90 <HAL_GetTick>
 800497c:	4602      	mov	r2, r0
 800497e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	2b64      	cmp	r3, #100	; 0x64
 8004984:	d902      	bls.n	800498c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8004986:	2303      	movs	r3, #3
 8004988:	f000 bcbf 	b.w	800530a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800498c:	4b31      	ldr	r3, [pc, #196]	; (8004a54 <HAL_RCC_OscConfig+0x4f4>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004994:	2b00      	cmp	r3, #0
 8004996:	d1ef      	bne.n	8004978 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 0302 	and.w	r3, r3, #2
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d05f      	beq.n	8004a64 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80049a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049a6:	2b04      	cmp	r3, #4
 80049a8:	d005      	beq.n	80049b6 <HAL_RCC_OscConfig+0x456>
 80049aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ac:	2b0c      	cmp	r3, #12
 80049ae:	d114      	bne.n	80049da <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80049b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049b2:	2b02      	cmp	r3, #2
 80049b4:	d111      	bne.n	80049da <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	68db      	ldr	r3, [r3, #12]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d102      	bne.n	80049c4 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	f000 bca3 	b.w	800530a <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80049c4:	4b23      	ldr	r3, [pc, #140]	; (8004a54 <HAL_RCC_OscConfig+0x4f4>)
 80049c6:	691b      	ldr	r3, [r3, #16]
 80049c8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	691b      	ldr	r3, [r3, #16]
 80049d0:	041b      	lsls	r3, r3, #16
 80049d2:	4920      	ldr	r1, [pc, #128]	; (8004a54 <HAL_RCC_OscConfig+0x4f4>)
 80049d4:	4313      	orrs	r3, r2
 80049d6:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80049d8:	e044      	b.n	8004a64 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	68db      	ldr	r3, [r3, #12]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d024      	beq.n	8004a2c <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 80049e2:	4b1c      	ldr	r3, [pc, #112]	; (8004a54 <HAL_RCC_OscConfig+0x4f4>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a1b      	ldr	r2, [pc, #108]	; (8004a54 <HAL_RCC_OscConfig+0x4f4>)
 80049e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049ec:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80049ee:	f7ff f84f 	bl	8003a90 <HAL_GetTick>
 80049f2:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80049f4:	e009      	b.n	8004a0a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049f6:	f7ff f84b 	bl	8003a90 <HAL_GetTick>
 80049fa:	4602      	mov	r2, r0
 80049fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049fe:	1ad3      	subs	r3, r2, r3
 8004a00:	2b02      	cmp	r3, #2
 8004a02:	d902      	bls.n	8004a0a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004a04:	2303      	movs	r3, #3
 8004a06:	f000 bc80 	b.w	800530a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a0a:	4b12      	ldr	r3, [pc, #72]	; (8004a54 <HAL_RCC_OscConfig+0x4f4>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d0ef      	beq.n	80049f6 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8004a16:	4b0f      	ldr	r3, [pc, #60]	; (8004a54 <HAL_RCC_OscConfig+0x4f4>)
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	691b      	ldr	r3, [r3, #16]
 8004a22:	041b      	lsls	r3, r3, #16
 8004a24:	490b      	ldr	r1, [pc, #44]	; (8004a54 <HAL_RCC_OscConfig+0x4f4>)
 8004a26:	4313      	orrs	r3, r2
 8004a28:	610b      	str	r3, [r1, #16]
 8004a2a:	e01b      	b.n	8004a64 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8004a2c:	4b09      	ldr	r3, [pc, #36]	; (8004a54 <HAL_RCC_OscConfig+0x4f4>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a08      	ldr	r2, [pc, #32]	; (8004a54 <HAL_RCC_OscConfig+0x4f4>)
 8004a32:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a36:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004a38:	f7ff f82a 	bl	8003a90 <HAL_GetTick>
 8004a3c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004a3e:	e00b      	b.n	8004a58 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a40:	f7ff f826 	bl	8003a90 <HAL_GetTick>
 8004a44:	4602      	mov	r2, r0
 8004a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a48:	1ad3      	subs	r3, r2, r3
 8004a4a:	2b02      	cmp	r3, #2
 8004a4c:	d904      	bls.n	8004a58 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8004a4e:	2303      	movs	r3, #3
 8004a50:	f000 bc5b 	b.w	800530a <HAL_RCC_OscConfig+0xdaa>
 8004a54:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004a58:	4baf      	ldr	r3, [pc, #700]	; (8004d18 <HAL_RCC_OscConfig+0x7b8>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d1ed      	bne.n	8004a40 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0308 	and.w	r3, r3, #8
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	f000 80c8 	beq.w	8004c02 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8004a72:	2300      	movs	r3, #0
 8004a74:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a78:	4ba7      	ldr	r3, [pc, #668]	; (8004d18 <HAL_RCC_OscConfig+0x7b8>)
 8004a7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a7e:	f003 0304 	and.w	r3, r3, #4
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d111      	bne.n	8004aaa <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a86:	4ba4      	ldr	r3, [pc, #656]	; (8004d18 <HAL_RCC_OscConfig+0x7b8>)
 8004a88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a8c:	4aa2      	ldr	r2, [pc, #648]	; (8004d18 <HAL_RCC_OscConfig+0x7b8>)
 8004a8e:	f043 0304 	orr.w	r3, r3, #4
 8004a92:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8004a96:	4ba0      	ldr	r3, [pc, #640]	; (8004d18 <HAL_RCC_OscConfig+0x7b8>)
 8004a98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a9c:	f003 0304 	and.w	r3, r3, #4
 8004aa0:	617b      	str	r3, [r7, #20]
 8004aa2:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004aaa:	4b9c      	ldr	r3, [pc, #624]	; (8004d1c <HAL_RCC_OscConfig+0x7bc>)
 8004aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aae:	f003 0301 	and.w	r3, r3, #1
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d119      	bne.n	8004aea <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004ab6:	4b99      	ldr	r3, [pc, #612]	; (8004d1c <HAL_RCC_OscConfig+0x7bc>)
 8004ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aba:	4a98      	ldr	r2, [pc, #608]	; (8004d1c <HAL_RCC_OscConfig+0x7bc>)
 8004abc:	f043 0301 	orr.w	r3, r3, #1
 8004ac0:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ac2:	f7fe ffe5 	bl	8003a90 <HAL_GetTick>
 8004ac6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004ac8:	e009      	b.n	8004ade <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004aca:	f7fe ffe1 	bl	8003a90 <HAL_GetTick>
 8004ace:	4602      	mov	r2, r0
 8004ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad2:	1ad3      	subs	r3, r2, r3
 8004ad4:	2b02      	cmp	r3, #2
 8004ad6:	d902      	bls.n	8004ade <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8004ad8:	2303      	movs	r3, #3
 8004ada:	f000 bc16 	b.w	800530a <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004ade:	4b8f      	ldr	r3, [pc, #572]	; (8004d1c <HAL_RCC_OscConfig+0x7bc>)
 8004ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ae2:	f003 0301 	and.w	r3, r3, #1
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d0ef      	beq.n	8004aca <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	695b      	ldr	r3, [r3, #20]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d05f      	beq.n	8004bb2 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8004af2:	4b89      	ldr	r3, [pc, #548]	; (8004d18 <HAL_RCC_OscConfig+0x7b8>)
 8004af4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004af8:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	699a      	ldr	r2, [r3, #24]
 8004afe:	6a3b      	ldr	r3, [r7, #32]
 8004b00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d037      	beq.n	8004b78 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8004b08:	6a3b      	ldr	r3, [r7, #32]
 8004b0a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d006      	beq.n	8004b20 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8004b12:	6a3b      	ldr	r3, [r7, #32]
 8004b14:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d101      	bne.n	8004b20 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e3f4      	b.n	800530a <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8004b20:	6a3b      	ldr	r3, [r7, #32]
 8004b22:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d01b      	beq.n	8004b62 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8004b2a:	4b7b      	ldr	r3, [pc, #492]	; (8004d18 <HAL_RCC_OscConfig+0x7b8>)
 8004b2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004b30:	4a79      	ldr	r2, [pc, #484]	; (8004d18 <HAL_RCC_OscConfig+0x7b8>)
 8004b32:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8004b36:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 8004b3a:	f7fe ffa9 	bl	8003a90 <HAL_GetTick>
 8004b3e:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004b40:	e008      	b.n	8004b54 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b42:	f7fe ffa5 	bl	8003a90 <HAL_GetTick>
 8004b46:	4602      	mov	r2, r0
 8004b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b4a:	1ad3      	subs	r3, r2, r3
 8004b4c:	2b05      	cmp	r3, #5
 8004b4e:	d901      	bls.n	8004b54 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8004b50:	2303      	movs	r3, #3
 8004b52:	e3da      	b.n	800530a <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004b54:	4b70      	ldr	r3, [pc, #448]	; (8004d18 <HAL_RCC_OscConfig+0x7b8>)
 8004b56:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004b5a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d1ef      	bne.n	8004b42 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8004b62:	4b6d      	ldr	r3, [pc, #436]	; (8004d18 <HAL_RCC_OscConfig+0x7b8>)
 8004b64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004b68:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	699b      	ldr	r3, [r3, #24]
 8004b70:	4969      	ldr	r1, [pc, #420]	; (8004d18 <HAL_RCC_OscConfig+0x7b8>)
 8004b72:	4313      	orrs	r3, r2
 8004b74:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8004b78:	4b67      	ldr	r3, [pc, #412]	; (8004d18 <HAL_RCC_OscConfig+0x7b8>)
 8004b7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004b7e:	4a66      	ldr	r2, [pc, #408]	; (8004d18 <HAL_RCC_OscConfig+0x7b8>)
 8004b80:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004b84:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8004b88:	f7fe ff82 	bl	8003a90 <HAL_GetTick>
 8004b8c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004b8e:	e008      	b.n	8004ba2 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b90:	f7fe ff7e 	bl	8003a90 <HAL_GetTick>
 8004b94:	4602      	mov	r2, r0
 8004b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b98:	1ad3      	subs	r3, r2, r3
 8004b9a:	2b05      	cmp	r3, #5
 8004b9c:	d901      	bls.n	8004ba2 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8004b9e:	2303      	movs	r3, #3
 8004ba0:	e3b3      	b.n	800530a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004ba2:	4b5d      	ldr	r3, [pc, #372]	; (8004d18 <HAL_RCC_OscConfig+0x7b8>)
 8004ba4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004ba8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d0ef      	beq.n	8004b90 <HAL_RCC_OscConfig+0x630>
 8004bb0:	e01b      	b.n	8004bea <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8004bb2:	4b59      	ldr	r3, [pc, #356]	; (8004d18 <HAL_RCC_OscConfig+0x7b8>)
 8004bb4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004bb8:	4a57      	ldr	r2, [pc, #348]	; (8004d18 <HAL_RCC_OscConfig+0x7b8>)
 8004bba:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8004bbe:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8004bc2:	f7fe ff65 	bl	8003a90 <HAL_GetTick>
 8004bc6:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004bc8:	e008      	b.n	8004bdc <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bca:	f7fe ff61 	bl	8003a90 <HAL_GetTick>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bd2:	1ad3      	subs	r3, r2, r3
 8004bd4:	2b05      	cmp	r3, #5
 8004bd6:	d901      	bls.n	8004bdc <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8004bd8:	2303      	movs	r3, #3
 8004bda:	e396      	b.n	800530a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004bdc:	4b4e      	ldr	r3, [pc, #312]	; (8004d18 <HAL_RCC_OscConfig+0x7b8>)
 8004bde:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004be2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d1ef      	bne.n	8004bca <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004bea:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d107      	bne.n	8004c02 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bf2:	4b49      	ldr	r3, [pc, #292]	; (8004d18 <HAL_RCC_OscConfig+0x7b8>)
 8004bf4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bf8:	4a47      	ldr	r2, [pc, #284]	; (8004d18 <HAL_RCC_OscConfig+0x7b8>)
 8004bfa:	f023 0304 	bic.w	r3, r3, #4
 8004bfe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 0304 	and.w	r3, r3, #4
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	f000 8111 	beq.w	8004e32 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8004c10:	2300      	movs	r3, #0
 8004c12:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c16:	4b40      	ldr	r3, [pc, #256]	; (8004d18 <HAL_RCC_OscConfig+0x7b8>)
 8004c18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c1c:	f003 0304 	and.w	r3, r3, #4
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d111      	bne.n	8004c48 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c24:	4b3c      	ldr	r3, [pc, #240]	; (8004d18 <HAL_RCC_OscConfig+0x7b8>)
 8004c26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c2a:	4a3b      	ldr	r2, [pc, #236]	; (8004d18 <HAL_RCC_OscConfig+0x7b8>)
 8004c2c:	f043 0304 	orr.w	r3, r3, #4
 8004c30:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8004c34:	4b38      	ldr	r3, [pc, #224]	; (8004d18 <HAL_RCC_OscConfig+0x7b8>)
 8004c36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c3a:	f003 0304 	and.w	r3, r3, #4
 8004c3e:	613b      	str	r3, [r7, #16]
 8004c40:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8004c42:	2301      	movs	r3, #1
 8004c44:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004c48:	4b34      	ldr	r3, [pc, #208]	; (8004d1c <HAL_RCC_OscConfig+0x7bc>)
 8004c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c4c:	f003 0301 	and.w	r3, r3, #1
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d118      	bne.n	8004c86 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004c54:	4b31      	ldr	r3, [pc, #196]	; (8004d1c <HAL_RCC_OscConfig+0x7bc>)
 8004c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c58:	4a30      	ldr	r2, [pc, #192]	; (8004d1c <HAL_RCC_OscConfig+0x7bc>)
 8004c5a:	f043 0301 	orr.w	r3, r3, #1
 8004c5e:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c60:	f7fe ff16 	bl	8003a90 <HAL_GetTick>
 8004c64:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004c66:	e008      	b.n	8004c7a <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c68:	f7fe ff12 	bl	8003a90 <HAL_GetTick>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c70:	1ad3      	subs	r3, r2, r3
 8004c72:	2b02      	cmp	r3, #2
 8004c74:	d901      	bls.n	8004c7a <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8004c76:	2303      	movs	r3, #3
 8004c78:	e347      	b.n	800530a <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004c7a:	4b28      	ldr	r3, [pc, #160]	; (8004d1c <HAL_RCC_OscConfig+0x7bc>)
 8004c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c7e:	f003 0301 	and.w	r3, r3, #1
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d0f0      	beq.n	8004c68 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	f003 0301 	and.w	r3, r3, #1
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d01f      	beq.n	8004cd2 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	f003 0304 	and.w	r3, r3, #4
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d010      	beq.n	8004cc0 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004c9e:	4b1e      	ldr	r3, [pc, #120]	; (8004d18 <HAL_RCC_OscConfig+0x7b8>)
 8004ca0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004ca4:	4a1c      	ldr	r2, [pc, #112]	; (8004d18 <HAL_RCC_OscConfig+0x7b8>)
 8004ca6:	f043 0304 	orr.w	r3, r3, #4
 8004caa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004cae:	4b1a      	ldr	r3, [pc, #104]	; (8004d18 <HAL_RCC_OscConfig+0x7b8>)
 8004cb0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004cb4:	4a18      	ldr	r2, [pc, #96]	; (8004d18 <HAL_RCC_OscConfig+0x7b8>)
 8004cb6:	f043 0301 	orr.w	r3, r3, #1
 8004cba:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004cbe:	e018      	b.n	8004cf2 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004cc0:	4b15      	ldr	r3, [pc, #84]	; (8004d18 <HAL_RCC_OscConfig+0x7b8>)
 8004cc2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004cc6:	4a14      	ldr	r2, [pc, #80]	; (8004d18 <HAL_RCC_OscConfig+0x7b8>)
 8004cc8:	f043 0301 	orr.w	r3, r3, #1
 8004ccc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004cd0:	e00f      	b.n	8004cf2 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004cd2:	4b11      	ldr	r3, [pc, #68]	; (8004d18 <HAL_RCC_OscConfig+0x7b8>)
 8004cd4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004cd8:	4a0f      	ldr	r2, [pc, #60]	; (8004d18 <HAL_RCC_OscConfig+0x7b8>)
 8004cda:	f023 0301 	bic.w	r3, r3, #1
 8004cde:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004ce2:	4b0d      	ldr	r3, [pc, #52]	; (8004d18 <HAL_RCC_OscConfig+0x7b8>)
 8004ce4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004ce8:	4a0b      	ldr	r2, [pc, #44]	; (8004d18 <HAL_RCC_OscConfig+0x7b8>)
 8004cea:	f023 0304 	bic.w	r3, r3, #4
 8004cee:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d057      	beq.n	8004daa <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8004cfa:	f7fe fec9 	bl	8003a90 <HAL_GetTick>
 8004cfe:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d00:	e00e      	b.n	8004d20 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d02:	f7fe fec5 	bl	8003a90 <HAL_GetTick>
 8004d06:	4602      	mov	r2, r0
 8004d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d0a:	1ad3      	subs	r3, r2, r3
 8004d0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d905      	bls.n	8004d20 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8004d14:	2303      	movs	r3, #3
 8004d16:	e2f8      	b.n	800530a <HAL_RCC_OscConfig+0xdaa>
 8004d18:	46020c00 	.word	0x46020c00
 8004d1c:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d20:	4b9c      	ldr	r3, [pc, #624]	; (8004f94 <HAL_RCC_OscConfig+0xa34>)
 8004d22:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004d26:	f003 0302 	and.w	r3, r3, #2
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d0e9      	beq.n	8004d02 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d01b      	beq.n	8004d72 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004d3a:	4b96      	ldr	r3, [pc, #600]	; (8004f94 <HAL_RCC_OscConfig+0xa34>)
 8004d3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004d40:	4a94      	ldr	r2, [pc, #592]	; (8004f94 <HAL_RCC_OscConfig+0xa34>)
 8004d42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d46:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004d4a:	e00a      	b.n	8004d62 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d4c:	f7fe fea0 	bl	8003a90 <HAL_GetTick>
 8004d50:	4602      	mov	r2, r0
 8004d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d901      	bls.n	8004d62 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8004d5e:	2303      	movs	r3, #3
 8004d60:	e2d3      	b.n	800530a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004d62:	4b8c      	ldr	r3, [pc, #560]	; (8004f94 <HAL_RCC_OscConfig+0xa34>)
 8004d64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004d68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d0ed      	beq.n	8004d4c <HAL_RCC_OscConfig+0x7ec>
 8004d70:	e053      	b.n	8004e1a <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004d72:	4b88      	ldr	r3, [pc, #544]	; (8004f94 <HAL_RCC_OscConfig+0xa34>)
 8004d74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004d78:	4a86      	ldr	r2, [pc, #536]	; (8004f94 <HAL_RCC_OscConfig+0xa34>)
 8004d7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d7e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004d82:	e00a      	b.n	8004d9a <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d84:	f7fe fe84 	bl	8003a90 <HAL_GetTick>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d901      	bls.n	8004d9a <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8004d96:	2303      	movs	r3, #3
 8004d98:	e2b7      	b.n	800530a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004d9a:	4b7e      	ldr	r3, [pc, #504]	; (8004f94 <HAL_RCC_OscConfig+0xa34>)
 8004d9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004da0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d1ed      	bne.n	8004d84 <HAL_RCC_OscConfig+0x824>
 8004da8:	e037      	b.n	8004e1a <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8004daa:	f7fe fe71 	bl	8003a90 <HAL_GetTick>
 8004dae:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004db0:	e00a      	b.n	8004dc8 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004db2:	f7fe fe6d 	bl	8003a90 <HAL_GetTick>
 8004db6:	4602      	mov	r2, r0
 8004db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dba:	1ad3      	subs	r3, r2, r3
 8004dbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d901      	bls.n	8004dc8 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8004dc4:	2303      	movs	r3, #3
 8004dc6:	e2a0      	b.n	800530a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004dc8:	4b72      	ldr	r3, [pc, #456]	; (8004f94 <HAL_RCC_OscConfig+0xa34>)
 8004dca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004dce:	f003 0302 	and.w	r3, r3, #2
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d1ed      	bne.n	8004db2 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8004dd6:	4b6f      	ldr	r3, [pc, #444]	; (8004f94 <HAL_RCC_OscConfig+0xa34>)
 8004dd8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004ddc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d01a      	beq.n	8004e1a <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004de4:	4b6b      	ldr	r3, [pc, #428]	; (8004f94 <HAL_RCC_OscConfig+0xa34>)
 8004de6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004dea:	4a6a      	ldr	r2, [pc, #424]	; (8004f94 <HAL_RCC_OscConfig+0xa34>)
 8004dec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004df0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004df4:	e00a      	b.n	8004e0c <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004df6:	f7fe fe4b 	bl	8003a90 <HAL_GetTick>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dfe:	1ad3      	subs	r3, r2, r3
 8004e00:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d901      	bls.n	8004e0c <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8004e08:	2303      	movs	r3, #3
 8004e0a:	e27e      	b.n	800530a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004e0c:	4b61      	ldr	r3, [pc, #388]	; (8004f94 <HAL_RCC_OscConfig+0xa34>)
 8004e0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004e12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d1ed      	bne.n	8004df6 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004e1a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d107      	bne.n	8004e32 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e22:	4b5c      	ldr	r3, [pc, #368]	; (8004f94 <HAL_RCC_OscConfig+0xa34>)
 8004e24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e28:	4a5a      	ldr	r2, [pc, #360]	; (8004f94 <HAL_RCC_OscConfig+0xa34>)
 8004e2a:	f023 0304 	bic.w	r3, r3, #4
 8004e2e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 0320 	and.w	r3, r3, #32
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d036      	beq.n	8004eac <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d019      	beq.n	8004e7a <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8004e46:	4b53      	ldr	r3, [pc, #332]	; (8004f94 <HAL_RCC_OscConfig+0xa34>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a52      	ldr	r2, [pc, #328]	; (8004f94 <HAL_RCC_OscConfig+0xa34>)
 8004e4c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004e50:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004e52:	f7fe fe1d 	bl	8003a90 <HAL_GetTick>
 8004e56:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004e58:	e008      	b.n	8004e6c <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e5a:	f7fe fe19 	bl	8003a90 <HAL_GetTick>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e62:	1ad3      	subs	r3, r2, r3
 8004e64:	2b02      	cmp	r3, #2
 8004e66:	d901      	bls.n	8004e6c <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8004e68:	2303      	movs	r3, #3
 8004e6a:	e24e      	b.n	800530a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004e6c:	4b49      	ldr	r3, [pc, #292]	; (8004f94 <HAL_RCC_OscConfig+0xa34>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d0f0      	beq.n	8004e5a <HAL_RCC_OscConfig+0x8fa>
 8004e78:	e018      	b.n	8004eac <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8004e7a:	4b46      	ldr	r3, [pc, #280]	; (8004f94 <HAL_RCC_OscConfig+0xa34>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a45      	ldr	r2, [pc, #276]	; (8004f94 <HAL_RCC_OscConfig+0xa34>)
 8004e80:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e84:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004e86:	f7fe fe03 	bl	8003a90 <HAL_GetTick>
 8004e8a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004e8c:	e008      	b.n	8004ea0 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e8e:	f7fe fdff 	bl	8003a90 <HAL_GetTick>
 8004e92:	4602      	mov	r2, r0
 8004e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e96:	1ad3      	subs	r3, r2, r3
 8004e98:	2b02      	cmp	r3, #2
 8004e9a:	d901      	bls.n	8004ea0 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8004e9c:	2303      	movs	r3, #3
 8004e9e:	e234      	b.n	800530a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004ea0:	4b3c      	ldr	r3, [pc, #240]	; (8004f94 <HAL_RCC_OscConfig+0xa34>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d1f0      	bne.n	8004e8e <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d036      	beq.n	8004f26 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d019      	beq.n	8004ef4 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8004ec0:	4b34      	ldr	r3, [pc, #208]	; (8004f94 <HAL_RCC_OscConfig+0xa34>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a33      	ldr	r2, [pc, #204]	; (8004f94 <HAL_RCC_OscConfig+0xa34>)
 8004ec6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004eca:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004ecc:	f7fe fde0 	bl	8003a90 <HAL_GetTick>
 8004ed0:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8004ed2:	e008      	b.n	8004ee6 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8004ed4:	f7fe fddc 	bl	8003a90 <HAL_GetTick>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004edc:	1ad3      	subs	r3, r2, r3
 8004ede:	2b02      	cmp	r3, #2
 8004ee0:	d901      	bls.n	8004ee6 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8004ee2:	2303      	movs	r3, #3
 8004ee4:	e211      	b.n	800530a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8004ee6:	4b2b      	ldr	r3, [pc, #172]	; (8004f94 <HAL_RCC_OscConfig+0xa34>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d0f0      	beq.n	8004ed4 <HAL_RCC_OscConfig+0x974>
 8004ef2:	e018      	b.n	8004f26 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8004ef4:	4b27      	ldr	r3, [pc, #156]	; (8004f94 <HAL_RCC_OscConfig+0xa34>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a26      	ldr	r2, [pc, #152]	; (8004f94 <HAL_RCC_OscConfig+0xa34>)
 8004efa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004efe:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004f00:	f7fe fdc6 	bl	8003a90 <HAL_GetTick>
 8004f04:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8004f06:	e008      	b.n	8004f1a <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8004f08:	f7fe fdc2 	bl	8003a90 <HAL_GetTick>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f10:	1ad3      	subs	r3, r2, r3
 8004f12:	2b02      	cmp	r3, #2
 8004f14:	d901      	bls.n	8004f1a <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8004f16:	2303      	movs	r3, #3
 8004f18:	e1f7      	b.n	800530a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8004f1a:	4b1e      	ldr	r3, [pc, #120]	; (8004f94 <HAL_RCC_OscConfig+0xa34>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d1f0      	bne.n	8004f08 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d07f      	beq.n	8005032 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d062      	beq.n	8005000 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8004f3a:	4b16      	ldr	r3, [pc, #88]	; (8004f94 <HAL_RCC_OscConfig+0xa34>)
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	4a15      	ldr	r2, [pc, #84]	; (8004f94 <HAL_RCC_OscConfig+0xa34>)
 8004f40:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004f44:	6093      	str	r3, [r2, #8]
 8004f46:	4b13      	ldr	r3, [pc, #76]	; (8004f94 <HAL_RCC_OscConfig+0xa34>)
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f52:	4910      	ldr	r1, [pc, #64]	; (8004f94 <HAL_RCC_OscConfig+0xa34>)
 8004f54:	4313      	orrs	r3, r2
 8004f56:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8004f60:	d309      	bcc.n	8004f76 <HAL_RCC_OscConfig+0xa16>
 8004f62:	4b0c      	ldr	r3, [pc, #48]	; (8004f94 <HAL_RCC_OscConfig+0xa34>)
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	f023 021f 	bic.w	r2, r3, #31
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6a1b      	ldr	r3, [r3, #32]
 8004f6e:	4909      	ldr	r1, [pc, #36]	; (8004f94 <HAL_RCC_OscConfig+0xa34>)
 8004f70:	4313      	orrs	r3, r2
 8004f72:	60cb      	str	r3, [r1, #12]
 8004f74:	e02a      	b.n	8004fcc <HAL_RCC_OscConfig+0xa6c>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	da0c      	bge.n	8004f98 <HAL_RCC_OscConfig+0xa38>
 8004f7e:	4b05      	ldr	r3, [pc, #20]	; (8004f94 <HAL_RCC_OscConfig+0xa34>)
 8004f80:	68db      	ldr	r3, [r3, #12]
 8004f82:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6a1b      	ldr	r3, [r3, #32]
 8004f8a:	015b      	lsls	r3, r3, #5
 8004f8c:	4901      	ldr	r1, [pc, #4]	; (8004f94 <HAL_RCC_OscConfig+0xa34>)
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	60cb      	str	r3, [r1, #12]
 8004f92:	e01b      	b.n	8004fcc <HAL_RCC_OscConfig+0xa6c>
 8004f94:	46020c00 	.word	0x46020c00
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fa0:	d30a      	bcc.n	8004fb8 <HAL_RCC_OscConfig+0xa58>
 8004fa2:	4ba1      	ldr	r3, [pc, #644]	; (8005228 <HAL_RCC_OscConfig+0xcc8>)
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6a1b      	ldr	r3, [r3, #32]
 8004fae:	029b      	lsls	r3, r3, #10
 8004fb0:	499d      	ldr	r1, [pc, #628]	; (8005228 <HAL_RCC_OscConfig+0xcc8>)
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	60cb      	str	r3, [r1, #12]
 8004fb6:	e009      	b.n	8004fcc <HAL_RCC_OscConfig+0xa6c>
 8004fb8:	4b9b      	ldr	r3, [pc, #620]	; (8005228 <HAL_RCC_OscConfig+0xcc8>)
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6a1b      	ldr	r3, [r3, #32]
 8004fc4:	03db      	lsls	r3, r3, #15
 8004fc6:	4998      	ldr	r1, [pc, #608]	; (8005228 <HAL_RCC_OscConfig+0xcc8>)
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8004fcc:	4b96      	ldr	r3, [pc, #600]	; (8005228 <HAL_RCC_OscConfig+0xcc8>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a95      	ldr	r2, [pc, #596]	; (8005228 <HAL_RCC_OscConfig+0xcc8>)
 8004fd2:	f043 0310 	orr.w	r3, r3, #16
 8004fd6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004fd8:	f7fe fd5a 	bl	8003a90 <HAL_GetTick>
 8004fdc:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8004fde:	e008      	b.n	8004ff2 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8004fe0:	f7fe fd56 	bl	8003a90 <HAL_GetTick>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe8:	1ad3      	subs	r3, r2, r3
 8004fea:	2b02      	cmp	r3, #2
 8004fec:	d901      	bls.n	8004ff2 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8004fee:	2303      	movs	r3, #3
 8004ff0:	e18b      	b.n	800530a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8004ff2:	4b8d      	ldr	r3, [pc, #564]	; (8005228 <HAL_RCC_OscConfig+0xcc8>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 0320 	and.w	r3, r3, #32
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d0f0      	beq.n	8004fe0 <HAL_RCC_OscConfig+0xa80>
 8004ffe:	e018      	b.n	8005032 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8005000:	4b89      	ldr	r3, [pc, #548]	; (8005228 <HAL_RCC_OscConfig+0xcc8>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a88      	ldr	r2, [pc, #544]	; (8005228 <HAL_RCC_OscConfig+0xcc8>)
 8005006:	f023 0310 	bic.w	r3, r3, #16
 800500a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800500c:	f7fe fd40 	bl	8003a90 <HAL_GetTick>
 8005010:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8005012:	e008      	b.n	8005026 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8005014:	f7fe fd3c 	bl	8003a90 <HAL_GetTick>
 8005018:	4602      	mov	r2, r0
 800501a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800501c:	1ad3      	subs	r3, r2, r3
 800501e:	2b02      	cmp	r3, #2
 8005020:	d901      	bls.n	8005026 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8005022:	2303      	movs	r3, #3
 8005024:	e171      	b.n	800530a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8005026:	4b80      	ldr	r3, [pc, #512]	; (8005228 <HAL_RCC_OscConfig+0xcc8>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 0320 	and.w	r3, r3, #32
 800502e:	2b00      	cmp	r3, #0
 8005030:	d1f0      	bne.n	8005014 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005036:	2b00      	cmp	r3, #0
 8005038:	f000 8166 	beq.w	8005308 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 800503c:	2300      	movs	r3, #0
 800503e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005042:	4b79      	ldr	r3, [pc, #484]	; (8005228 <HAL_RCC_OscConfig+0xcc8>)
 8005044:	69db      	ldr	r3, [r3, #28]
 8005046:	f003 030c 	and.w	r3, r3, #12
 800504a:	2b0c      	cmp	r3, #12
 800504c:	f000 80f2 	beq.w	8005234 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005054:	2b02      	cmp	r3, #2
 8005056:	f040 80c5 	bne.w	80051e4 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800505a:	4b73      	ldr	r3, [pc, #460]	; (8005228 <HAL_RCC_OscConfig+0xcc8>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a72      	ldr	r2, [pc, #456]	; (8005228 <HAL_RCC_OscConfig+0xcc8>)
 8005060:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005064:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005066:	f7fe fd13 	bl	8003a90 <HAL_GetTick>
 800506a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800506c:	e008      	b.n	8005080 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800506e:	f7fe fd0f 	bl	8003a90 <HAL_GetTick>
 8005072:	4602      	mov	r2, r0
 8005074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005076:	1ad3      	subs	r3, r2, r3
 8005078:	2b02      	cmp	r3, #2
 800507a:	d901      	bls.n	8005080 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 800507c:	2303      	movs	r3, #3
 800507e:	e144      	b.n	800530a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005080:	4b69      	ldr	r3, [pc, #420]	; (8005228 <HAL_RCC_OscConfig+0xcc8>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005088:	2b00      	cmp	r3, #0
 800508a:	d1f0      	bne.n	800506e <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800508c:	4b66      	ldr	r3, [pc, #408]	; (8005228 <HAL_RCC_OscConfig+0xcc8>)
 800508e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005092:	f003 0304 	and.w	r3, r3, #4
 8005096:	2b00      	cmp	r3, #0
 8005098:	d111      	bne.n	80050be <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 800509a:	4b63      	ldr	r3, [pc, #396]	; (8005228 <HAL_RCC_OscConfig+0xcc8>)
 800509c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050a0:	4a61      	ldr	r2, [pc, #388]	; (8005228 <HAL_RCC_OscConfig+0xcc8>)
 80050a2:	f043 0304 	orr.w	r3, r3, #4
 80050a6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80050aa:	4b5f      	ldr	r3, [pc, #380]	; (8005228 <HAL_RCC_OscConfig+0xcc8>)
 80050ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050b0:	f003 0304 	and.w	r3, r3, #4
 80050b4:	60fb      	str	r3, [r7, #12]
 80050b6:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 80050b8:	2301      	movs	r3, #1
 80050ba:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 80050be:	4b5b      	ldr	r3, [pc, #364]	; (800522c <HAL_RCC_OscConfig+0xccc>)
 80050c0:	68db      	ldr	r3, [r3, #12]
 80050c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050c6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80050ca:	d102      	bne.n	80050d2 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 80050cc:	2301      	movs	r3, #1
 80050ce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80050d2:	4b56      	ldr	r3, [pc, #344]	; (800522c <HAL_RCC_OscConfig+0xccc>)
 80050d4:	68db      	ldr	r3, [r3, #12]
 80050d6:	4a55      	ldr	r2, [pc, #340]	; (800522c <HAL_RCC_OscConfig+0xccc>)
 80050d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80050dc:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 80050de:	4b52      	ldr	r3, [pc, #328]	; (8005228 <HAL_RCC_OscConfig+0xcc8>)
 80050e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80050e6:	f023 0303 	bic.w	r3, r3, #3
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80050f2:	3a01      	subs	r2, #1
 80050f4:	0212      	lsls	r2, r2, #8
 80050f6:	4311      	orrs	r1, r2
 80050f8:	687a      	ldr	r2, [r7, #4]
 80050fa:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80050fc:	430a      	orrs	r2, r1
 80050fe:	494a      	ldr	r1, [pc, #296]	; (8005228 <HAL_RCC_OscConfig+0xcc8>)
 8005100:	4313      	orrs	r3, r2
 8005102:	628b      	str	r3, [r1, #40]	; 0x28
 8005104:	4b48      	ldr	r3, [pc, #288]	; (8005228 <HAL_RCC_OscConfig+0xcc8>)
 8005106:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005108:	4b49      	ldr	r3, [pc, #292]	; (8005230 <HAL_RCC_OscConfig+0xcd0>)
 800510a:	4013      	ands	r3, r2
 800510c:	687a      	ldr	r2, [r7, #4]
 800510e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005110:	3a01      	subs	r2, #1
 8005112:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8005116:	687a      	ldr	r2, [r7, #4]
 8005118:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800511a:	3a01      	subs	r2, #1
 800511c:	0252      	lsls	r2, r2, #9
 800511e:	b292      	uxth	r2, r2
 8005120:	4311      	orrs	r1, r2
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005126:	3a01      	subs	r2, #1
 8005128:	0412      	lsls	r2, r2, #16
 800512a:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800512e:	4311      	orrs	r1, r2
 8005130:	687a      	ldr	r2, [r7, #4]
 8005132:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005134:	3a01      	subs	r2, #1
 8005136:	0612      	lsls	r2, r2, #24
 8005138:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800513c:	430a      	orrs	r2, r1
 800513e:	493a      	ldr	r1, [pc, #232]	; (8005228 <HAL_RCC_OscConfig+0xcc8>)
 8005140:	4313      	orrs	r3, r2
 8005142:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8005144:	4b38      	ldr	r3, [pc, #224]	; (8005228 <HAL_RCC_OscConfig+0xcc8>)
 8005146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005148:	4a37      	ldr	r2, [pc, #220]	; (8005228 <HAL_RCC_OscConfig+0xcc8>)
 800514a:	f023 0310 	bic.w	r3, r3, #16
 800514e:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005154:	4a34      	ldr	r2, [pc, #208]	; (8005228 <HAL_RCC_OscConfig+0xcc8>)
 8005156:	00db      	lsls	r3, r3, #3
 8005158:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800515a:	4b33      	ldr	r3, [pc, #204]	; (8005228 <HAL_RCC_OscConfig+0xcc8>)
 800515c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800515e:	4a32      	ldr	r2, [pc, #200]	; (8005228 <HAL_RCC_OscConfig+0xcc8>)
 8005160:	f043 0310 	orr.w	r3, r3, #16
 8005164:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8005166:	4b30      	ldr	r3, [pc, #192]	; (8005228 <HAL_RCC_OscConfig+0xcc8>)
 8005168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800516a:	f023 020c 	bic.w	r2, r3, #12
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005172:	492d      	ldr	r1, [pc, #180]	; (8005228 <HAL_RCC_OscConfig+0xcc8>)
 8005174:	4313      	orrs	r3, r2
 8005176:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 8005178:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800517c:	2b01      	cmp	r3, #1
 800517e:	d105      	bne.n	800518c <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8005180:	4b2a      	ldr	r3, [pc, #168]	; (800522c <HAL_RCC_OscConfig+0xccc>)
 8005182:	68db      	ldr	r3, [r3, #12]
 8005184:	4a29      	ldr	r2, [pc, #164]	; (800522c <HAL_RCC_OscConfig+0xccc>)
 8005186:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800518a:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 800518c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8005190:	2b01      	cmp	r3, #1
 8005192:	d107      	bne.n	80051a4 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8005194:	4b24      	ldr	r3, [pc, #144]	; (8005228 <HAL_RCC_OscConfig+0xcc8>)
 8005196:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800519a:	4a23      	ldr	r2, [pc, #140]	; (8005228 <HAL_RCC_OscConfig+0xcc8>)
 800519c:	f023 0304 	bic.w	r3, r3, #4
 80051a0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80051a4:	4b20      	ldr	r3, [pc, #128]	; (8005228 <HAL_RCC_OscConfig+0xcc8>)
 80051a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051a8:	4a1f      	ldr	r2, [pc, #124]	; (8005228 <HAL_RCC_OscConfig+0xcc8>)
 80051aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80051ae:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 80051b0:	4b1d      	ldr	r3, [pc, #116]	; (8005228 <HAL_RCC_OscConfig+0xcc8>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a1c      	ldr	r2, [pc, #112]	; (8005228 <HAL_RCC_OscConfig+0xcc8>)
 80051b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80051ba:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80051bc:	f7fe fc68 	bl	8003a90 <HAL_GetTick>
 80051c0:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80051c2:	e008      	b.n	80051d6 <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051c4:	f7fe fc64 	bl	8003a90 <HAL_GetTick>
 80051c8:	4602      	mov	r2, r0
 80051ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051cc:	1ad3      	subs	r3, r2, r3
 80051ce:	2b02      	cmp	r3, #2
 80051d0:	d901      	bls.n	80051d6 <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 80051d2:	2303      	movs	r3, #3
 80051d4:	e099      	b.n	800530a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80051d6:	4b14      	ldr	r3, [pc, #80]	; (8005228 <HAL_RCC_OscConfig+0xcc8>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d0f0      	beq.n	80051c4 <HAL_RCC_OscConfig+0xc64>
 80051e2:	e091      	b.n	8005308 <HAL_RCC_OscConfig+0xda8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80051e4:	4b10      	ldr	r3, [pc, #64]	; (8005228 <HAL_RCC_OscConfig+0xcc8>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a0f      	ldr	r2, [pc, #60]	; (8005228 <HAL_RCC_OscConfig+0xcc8>)
 80051ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051ee:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80051f0:	f7fe fc4e 	bl	8003a90 <HAL_GetTick>
 80051f4:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80051f6:	e008      	b.n	800520a <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051f8:	f7fe fc4a 	bl	8003a90 <HAL_GetTick>
 80051fc:	4602      	mov	r2, r0
 80051fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005200:	1ad3      	subs	r3, r2, r3
 8005202:	2b02      	cmp	r3, #2
 8005204:	d901      	bls.n	800520a <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8005206:	2303      	movs	r3, #3
 8005208:	e07f      	b.n	800530a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800520a:	4b07      	ldr	r3, [pc, #28]	; (8005228 <HAL_RCC_OscConfig+0xcc8>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005212:	2b00      	cmp	r3, #0
 8005214:	d1f0      	bne.n	80051f8 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8005216:	4b04      	ldr	r3, [pc, #16]	; (8005228 <HAL_RCC_OscConfig+0xcc8>)
 8005218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800521a:	4a03      	ldr	r2, [pc, #12]	; (8005228 <HAL_RCC_OscConfig+0xcc8>)
 800521c:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8005220:	f023 0303 	bic.w	r3, r3, #3
 8005224:	6293      	str	r3, [r2, #40]	; 0x28
 8005226:	e06f      	b.n	8005308 <HAL_RCC_OscConfig+0xda8>
 8005228:	46020c00 	.word	0x46020c00
 800522c:	46020800 	.word	0x46020800
 8005230:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8005234:	4b37      	ldr	r3, [pc, #220]	; (8005314 <HAL_RCC_OscConfig+0xdb4>)
 8005236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005238:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800523a:	4b36      	ldr	r3, [pc, #216]	; (8005314 <HAL_RCC_OscConfig+0xdb4>)
 800523c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800523e:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005244:	2b01      	cmp	r3, #1
 8005246:	d039      	beq.n	80052bc <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8005248:	69fb      	ldr	r3, [r7, #28]
 800524a:	f003 0203 	and.w	r2, r3, #3
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005252:	429a      	cmp	r2, r3
 8005254:	d132      	bne.n	80052bc <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8005256:	69fb      	ldr	r3, [r7, #28]
 8005258:	0a1b      	lsrs	r3, r3, #8
 800525a:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005262:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8005264:	429a      	cmp	r2, r3
 8005266:	d129      	bne.n	80052bc <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8005268:	69fb      	ldr	r3, [r7, #28]
 800526a:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8005272:	429a      	cmp	r2, r3
 8005274:	d122      	bne.n	80052bc <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005276:	69bb      	ldr	r3, [r7, #24]
 8005278:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005280:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8005282:	429a      	cmp	r2, r3
 8005284:	d11a      	bne.n	80052bc <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8005286:	69bb      	ldr	r3, [r7, #24]
 8005288:	0a5b      	lsrs	r3, r3, #9
 800528a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005292:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005294:	429a      	cmp	r2, r3
 8005296:	d111      	bne.n	80052bc <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8005298:	69bb      	ldr	r3, [r7, #24]
 800529a:	0c1b      	lsrs	r3, r3, #16
 800529c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052a4:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d108      	bne.n	80052bc <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80052aa:	69bb      	ldr	r3, [r7, #24]
 80052ac:	0e1b      	lsrs	r3, r3, #24
 80052ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052b6:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d001      	beq.n	80052c0 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 80052bc:	2301      	movs	r3, #1
 80052be:	e024      	b.n	800530a <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80052c0:	4b14      	ldr	r3, [pc, #80]	; (8005314 <HAL_RCC_OscConfig+0xdb4>)
 80052c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052c4:	08db      	lsrs	r3, r3, #3
 80052c6:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80052ce:	429a      	cmp	r2, r3
 80052d0:	d01a      	beq.n	8005308 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80052d2:	4b10      	ldr	r3, [pc, #64]	; (8005314 <HAL_RCC_OscConfig+0xdb4>)
 80052d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052d6:	4a0f      	ldr	r2, [pc, #60]	; (8005314 <HAL_RCC_OscConfig+0xdb4>)
 80052d8:	f023 0310 	bic.w	r3, r3, #16
 80052dc:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052de:	f7fe fbd7 	bl	8003a90 <HAL_GetTick>
 80052e2:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 80052e4:	bf00      	nop
 80052e6:	f7fe fbd3 	bl	8003a90 <HAL_GetTick>
 80052ea:	4602      	mov	r2, r0
 80052ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d0f9      	beq.n	80052e6 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052f6:	4a07      	ldr	r2, [pc, #28]	; (8005314 <HAL_RCC_OscConfig+0xdb4>)
 80052f8:	00db      	lsls	r3, r3, #3
 80052fa:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80052fc:	4b05      	ldr	r3, [pc, #20]	; (8005314 <HAL_RCC_OscConfig+0xdb4>)
 80052fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005300:	4a04      	ldr	r2, [pc, #16]	; (8005314 <HAL_RCC_OscConfig+0xdb4>)
 8005302:	f043 0310 	orr.w	r3, r3, #16
 8005306:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }
  }
  return HAL_OK;
 8005308:	2300      	movs	r3, #0
}
 800530a:	4618      	mov	r0, r3
 800530c:	3738      	adds	r7, #56	; 0x38
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}
 8005312:	bf00      	nop
 8005314:	46020c00 	.word	0x46020c00

08005318 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b086      	sub	sp, #24
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d101      	bne.n	800532c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	e1d9      	b.n	80056e0 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800532c:	4b9b      	ldr	r3, [pc, #620]	; (800559c <HAL_RCC_ClockConfig+0x284>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f003 030f 	and.w	r3, r3, #15
 8005334:	683a      	ldr	r2, [r7, #0]
 8005336:	429a      	cmp	r2, r3
 8005338:	d910      	bls.n	800535c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800533a:	4b98      	ldr	r3, [pc, #608]	; (800559c <HAL_RCC_ClockConfig+0x284>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f023 020f 	bic.w	r2, r3, #15
 8005342:	4996      	ldr	r1, [pc, #600]	; (800559c <HAL_RCC_ClockConfig+0x284>)
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	4313      	orrs	r3, r2
 8005348:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800534a:	4b94      	ldr	r3, [pc, #592]	; (800559c <HAL_RCC_ClockConfig+0x284>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f003 030f 	and.w	r3, r3, #15
 8005352:	683a      	ldr	r2, [r7, #0]
 8005354:	429a      	cmp	r2, r3
 8005356:	d001      	beq.n	800535c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	e1c1      	b.n	80056e0 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f003 0310 	and.w	r3, r3, #16
 8005364:	2b00      	cmp	r3, #0
 8005366:	d010      	beq.n	800538a <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	695a      	ldr	r2, [r3, #20]
 800536c:	4b8c      	ldr	r3, [pc, #560]	; (80055a0 <HAL_RCC_ClockConfig+0x288>)
 800536e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005370:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005374:	429a      	cmp	r2, r3
 8005376:	d908      	bls.n	800538a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8005378:	4b89      	ldr	r3, [pc, #548]	; (80055a0 <HAL_RCC_ClockConfig+0x288>)
 800537a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	695b      	ldr	r3, [r3, #20]
 8005384:	4986      	ldr	r1, [pc, #536]	; (80055a0 <HAL_RCC_ClockConfig+0x288>)
 8005386:	4313      	orrs	r3, r2
 8005388:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f003 0308 	and.w	r3, r3, #8
 8005392:	2b00      	cmp	r3, #0
 8005394:	d012      	beq.n	80053bc <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	691a      	ldr	r2, [r3, #16]
 800539a:	4b81      	ldr	r3, [pc, #516]	; (80055a0 <HAL_RCC_ClockConfig+0x288>)
 800539c:	6a1b      	ldr	r3, [r3, #32]
 800539e:	091b      	lsrs	r3, r3, #4
 80053a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d909      	bls.n	80053bc <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80053a8:	4b7d      	ldr	r3, [pc, #500]	; (80055a0 <HAL_RCC_ClockConfig+0x288>)
 80053aa:	6a1b      	ldr	r3, [r3, #32]
 80053ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	691b      	ldr	r3, [r3, #16]
 80053b4:	011b      	lsls	r3, r3, #4
 80053b6:	497a      	ldr	r1, [pc, #488]	; (80055a0 <HAL_RCC_ClockConfig+0x288>)
 80053b8:	4313      	orrs	r3, r2
 80053ba:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 0304 	and.w	r3, r3, #4
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d010      	beq.n	80053ea <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	68da      	ldr	r2, [r3, #12]
 80053cc:	4b74      	ldr	r3, [pc, #464]	; (80055a0 <HAL_RCC_ClockConfig+0x288>)
 80053ce:	6a1b      	ldr	r3, [r3, #32]
 80053d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d908      	bls.n	80053ea <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80053d8:	4b71      	ldr	r3, [pc, #452]	; (80055a0 <HAL_RCC_ClockConfig+0x288>)
 80053da:	6a1b      	ldr	r3, [r3, #32]
 80053dc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	496e      	ldr	r1, [pc, #440]	; (80055a0 <HAL_RCC_ClockConfig+0x288>)
 80053e6:	4313      	orrs	r3, r2
 80053e8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 0302 	and.w	r3, r3, #2
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d010      	beq.n	8005418 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	689a      	ldr	r2, [r3, #8]
 80053fa:	4b69      	ldr	r3, [pc, #420]	; (80055a0 <HAL_RCC_ClockConfig+0x288>)
 80053fc:	6a1b      	ldr	r3, [r3, #32]
 80053fe:	f003 030f 	and.w	r3, r3, #15
 8005402:	429a      	cmp	r2, r3
 8005404:	d908      	bls.n	8005418 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8005406:	4b66      	ldr	r3, [pc, #408]	; (80055a0 <HAL_RCC_ClockConfig+0x288>)
 8005408:	6a1b      	ldr	r3, [r3, #32]
 800540a:	f023 020f 	bic.w	r2, r3, #15
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	4963      	ldr	r1, [pc, #396]	; (80055a0 <HAL_RCC_ClockConfig+0x288>)
 8005414:	4313      	orrs	r3, r2
 8005416:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f003 0301 	and.w	r3, r3, #1
 8005420:	2b00      	cmp	r3, #0
 8005422:	f000 80d2 	beq.w	80055ca <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8005426:	2300      	movs	r3, #0
 8005428:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	2b03      	cmp	r3, #3
 8005430:	d143      	bne.n	80054ba <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005432:	4b5b      	ldr	r3, [pc, #364]	; (80055a0 <HAL_RCC_ClockConfig+0x288>)
 8005434:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005438:	f003 0304 	and.w	r3, r3, #4
 800543c:	2b00      	cmp	r3, #0
 800543e:	d110      	bne.n	8005462 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8005440:	4b57      	ldr	r3, [pc, #348]	; (80055a0 <HAL_RCC_ClockConfig+0x288>)
 8005442:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005446:	4a56      	ldr	r2, [pc, #344]	; (80055a0 <HAL_RCC_ClockConfig+0x288>)
 8005448:	f043 0304 	orr.w	r3, r3, #4
 800544c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8005450:	4b53      	ldr	r3, [pc, #332]	; (80055a0 <HAL_RCC_ClockConfig+0x288>)
 8005452:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005456:	f003 0304 	and.w	r3, r3, #4
 800545a:	60bb      	str	r3, [r7, #8]
 800545c:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800545e:	2301      	movs	r3, #1
 8005460:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8005462:	f7fe fb15 	bl	8003a90 <HAL_GetTick>
 8005466:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8005468:	4b4e      	ldr	r3, [pc, #312]	; (80055a4 <HAL_RCC_ClockConfig+0x28c>)
 800546a:	68db      	ldr	r3, [r3, #12]
 800546c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005470:	2b00      	cmp	r3, #0
 8005472:	d00f      	beq.n	8005494 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8005474:	e008      	b.n	8005488 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8005476:	f7fe fb0b 	bl	8003a90 <HAL_GetTick>
 800547a:	4602      	mov	r2, r0
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	1ad3      	subs	r3, r2, r3
 8005480:	2b02      	cmp	r3, #2
 8005482:	d901      	bls.n	8005488 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8005484:	2303      	movs	r3, #3
 8005486:	e12b      	b.n	80056e0 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8005488:	4b46      	ldr	r3, [pc, #280]	; (80055a4 <HAL_RCC_ClockConfig+0x28c>)
 800548a:	68db      	ldr	r3, [r3, #12]
 800548c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005490:	2b00      	cmp	r3, #0
 8005492:	d0f0      	beq.n	8005476 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005494:	7dfb      	ldrb	r3, [r7, #23]
 8005496:	2b01      	cmp	r3, #1
 8005498:	d107      	bne.n	80054aa <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800549a:	4b41      	ldr	r3, [pc, #260]	; (80055a0 <HAL_RCC_ClockConfig+0x288>)
 800549c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054a0:	4a3f      	ldr	r2, [pc, #252]	; (80055a0 <HAL_RCC_ClockConfig+0x288>)
 80054a2:	f023 0304 	bic.w	r3, r3, #4
 80054a6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80054aa:	4b3d      	ldr	r3, [pc, #244]	; (80055a0 <HAL_RCC_ClockConfig+0x288>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d121      	bne.n	80054fa <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	e112      	b.n	80056e0 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	2b02      	cmp	r3, #2
 80054c0:	d107      	bne.n	80054d2 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80054c2:	4b37      	ldr	r3, [pc, #220]	; (80055a0 <HAL_RCC_ClockConfig+0x288>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d115      	bne.n	80054fa <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	e106      	b.n	80056e0 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d107      	bne.n	80054ea <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80054da:	4b31      	ldr	r3, [pc, #196]	; (80055a0 <HAL_RCC_ClockConfig+0x288>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f003 0304 	and.w	r3, r3, #4
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d109      	bne.n	80054fa <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	e0fa      	b.n	80056e0 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80054ea:	4b2d      	ldr	r3, [pc, #180]	; (80055a0 <HAL_RCC_ClockConfig+0x288>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d101      	bne.n	80054fa <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	e0f2      	b.n	80056e0 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 80054fa:	4b29      	ldr	r3, [pc, #164]	; (80055a0 <HAL_RCC_ClockConfig+0x288>)
 80054fc:	69db      	ldr	r3, [r3, #28]
 80054fe:	f023 0203 	bic.w	r2, r3, #3
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	4926      	ldr	r1, [pc, #152]	; (80055a0 <HAL_RCC_ClockConfig+0x288>)
 8005508:	4313      	orrs	r3, r2
 800550a:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 800550c:	f7fe fac0 	bl	8003a90 <HAL_GetTick>
 8005510:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	2b03      	cmp	r3, #3
 8005518:	d112      	bne.n	8005540 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800551a:	e00a      	b.n	8005532 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800551c:	f7fe fab8 	bl	8003a90 <HAL_GetTick>
 8005520:	4602      	mov	r2, r0
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	1ad3      	subs	r3, r2, r3
 8005526:	f241 3288 	movw	r2, #5000	; 0x1388
 800552a:	4293      	cmp	r3, r2
 800552c:	d901      	bls.n	8005532 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800552e:	2303      	movs	r3, #3
 8005530:	e0d6      	b.n	80056e0 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005532:	4b1b      	ldr	r3, [pc, #108]	; (80055a0 <HAL_RCC_ClockConfig+0x288>)
 8005534:	69db      	ldr	r3, [r3, #28]
 8005536:	f003 030c 	and.w	r3, r3, #12
 800553a:	2b0c      	cmp	r3, #12
 800553c:	d1ee      	bne.n	800551c <HAL_RCC_ClockConfig+0x204>
 800553e:	e044      	b.n	80055ca <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	2b02      	cmp	r3, #2
 8005546:	d112      	bne.n	800556e <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005548:	e00a      	b.n	8005560 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800554a:	f7fe faa1 	bl	8003a90 <HAL_GetTick>
 800554e:	4602      	mov	r2, r0
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	1ad3      	subs	r3, r2, r3
 8005554:	f241 3288 	movw	r2, #5000	; 0x1388
 8005558:	4293      	cmp	r3, r2
 800555a:	d901      	bls.n	8005560 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 800555c:	2303      	movs	r3, #3
 800555e:	e0bf      	b.n	80056e0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005560:	4b0f      	ldr	r3, [pc, #60]	; (80055a0 <HAL_RCC_ClockConfig+0x288>)
 8005562:	69db      	ldr	r3, [r3, #28]
 8005564:	f003 030c 	and.w	r3, r3, #12
 8005568:	2b08      	cmp	r3, #8
 800556a:	d1ee      	bne.n	800554a <HAL_RCC_ClockConfig+0x232>
 800556c:	e02d      	b.n	80055ca <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d123      	bne.n	80055be <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005576:	e00a      	b.n	800558e <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005578:	f7fe fa8a 	bl	8003a90 <HAL_GetTick>
 800557c:	4602      	mov	r2, r0
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	1ad3      	subs	r3, r2, r3
 8005582:	f241 3288 	movw	r2, #5000	; 0x1388
 8005586:	4293      	cmp	r3, r2
 8005588:	d901      	bls.n	800558e <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800558a:	2303      	movs	r3, #3
 800558c:	e0a8      	b.n	80056e0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800558e:	4b04      	ldr	r3, [pc, #16]	; (80055a0 <HAL_RCC_ClockConfig+0x288>)
 8005590:	69db      	ldr	r3, [r3, #28]
 8005592:	f003 030c 	and.w	r3, r3, #12
 8005596:	2b00      	cmp	r3, #0
 8005598:	d1ee      	bne.n	8005578 <HAL_RCC_ClockConfig+0x260>
 800559a:	e016      	b.n	80055ca <HAL_RCC_ClockConfig+0x2b2>
 800559c:	40022000 	.word	0x40022000
 80055a0:	46020c00 	.word	0x46020c00
 80055a4:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055a8:	f7fe fa72 	bl	8003a90 <HAL_GetTick>
 80055ac:	4602      	mov	r2, r0
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	1ad3      	subs	r3, r2, r3
 80055b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d901      	bls.n	80055be <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80055ba:	2303      	movs	r3, #3
 80055bc:	e090      	b.n	80056e0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80055be:	4b4a      	ldr	r3, [pc, #296]	; (80056e8 <HAL_RCC_ClockConfig+0x3d0>)
 80055c0:	69db      	ldr	r3, [r3, #28]
 80055c2:	f003 030c 	and.w	r3, r3, #12
 80055c6:	2b04      	cmp	r3, #4
 80055c8:	d1ee      	bne.n	80055a8 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f003 0302 	and.w	r3, r3, #2
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d010      	beq.n	80055f8 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	689a      	ldr	r2, [r3, #8]
 80055da:	4b43      	ldr	r3, [pc, #268]	; (80056e8 <HAL_RCC_ClockConfig+0x3d0>)
 80055dc:	6a1b      	ldr	r3, [r3, #32]
 80055de:	f003 030f 	and.w	r3, r3, #15
 80055e2:	429a      	cmp	r2, r3
 80055e4:	d208      	bcs.n	80055f8 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80055e6:	4b40      	ldr	r3, [pc, #256]	; (80056e8 <HAL_RCC_ClockConfig+0x3d0>)
 80055e8:	6a1b      	ldr	r3, [r3, #32]
 80055ea:	f023 020f 	bic.w	r2, r3, #15
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	493d      	ldr	r1, [pc, #244]	; (80056e8 <HAL_RCC_ClockConfig+0x3d0>)
 80055f4:	4313      	orrs	r3, r2
 80055f6:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80055f8:	4b3c      	ldr	r3, [pc, #240]	; (80056ec <HAL_RCC_ClockConfig+0x3d4>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f003 030f 	and.w	r3, r3, #15
 8005600:	683a      	ldr	r2, [r7, #0]
 8005602:	429a      	cmp	r2, r3
 8005604:	d210      	bcs.n	8005628 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005606:	4b39      	ldr	r3, [pc, #228]	; (80056ec <HAL_RCC_ClockConfig+0x3d4>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f023 020f 	bic.w	r2, r3, #15
 800560e:	4937      	ldr	r1, [pc, #220]	; (80056ec <HAL_RCC_ClockConfig+0x3d4>)
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	4313      	orrs	r3, r2
 8005614:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005616:	4b35      	ldr	r3, [pc, #212]	; (80056ec <HAL_RCC_ClockConfig+0x3d4>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f003 030f 	and.w	r3, r3, #15
 800561e:	683a      	ldr	r2, [r7, #0]
 8005620:	429a      	cmp	r2, r3
 8005622:	d001      	beq.n	8005628 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	e05b      	b.n	80056e0 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f003 0304 	and.w	r3, r3, #4
 8005630:	2b00      	cmp	r3, #0
 8005632:	d010      	beq.n	8005656 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	68da      	ldr	r2, [r3, #12]
 8005638:	4b2b      	ldr	r3, [pc, #172]	; (80056e8 <HAL_RCC_ClockConfig+0x3d0>)
 800563a:	6a1b      	ldr	r3, [r3, #32]
 800563c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005640:	429a      	cmp	r2, r3
 8005642:	d208      	bcs.n	8005656 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8005644:	4b28      	ldr	r3, [pc, #160]	; (80056e8 <HAL_RCC_ClockConfig+0x3d0>)
 8005646:	6a1b      	ldr	r3, [r3, #32]
 8005648:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	68db      	ldr	r3, [r3, #12]
 8005650:	4925      	ldr	r1, [pc, #148]	; (80056e8 <HAL_RCC_ClockConfig+0x3d0>)
 8005652:	4313      	orrs	r3, r2
 8005654:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f003 0308 	and.w	r3, r3, #8
 800565e:	2b00      	cmp	r3, #0
 8005660:	d012      	beq.n	8005688 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	691a      	ldr	r2, [r3, #16]
 8005666:	4b20      	ldr	r3, [pc, #128]	; (80056e8 <HAL_RCC_ClockConfig+0x3d0>)
 8005668:	6a1b      	ldr	r3, [r3, #32]
 800566a:	091b      	lsrs	r3, r3, #4
 800566c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005670:	429a      	cmp	r2, r3
 8005672:	d209      	bcs.n	8005688 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8005674:	4b1c      	ldr	r3, [pc, #112]	; (80056e8 <HAL_RCC_ClockConfig+0x3d0>)
 8005676:	6a1b      	ldr	r3, [r3, #32]
 8005678:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	691b      	ldr	r3, [r3, #16]
 8005680:	011b      	lsls	r3, r3, #4
 8005682:	4919      	ldr	r1, [pc, #100]	; (80056e8 <HAL_RCC_ClockConfig+0x3d0>)
 8005684:	4313      	orrs	r3, r2
 8005686:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f003 0310 	and.w	r3, r3, #16
 8005690:	2b00      	cmp	r3, #0
 8005692:	d010      	beq.n	80056b6 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	695a      	ldr	r2, [r3, #20]
 8005698:	4b13      	ldr	r3, [pc, #76]	; (80056e8 <HAL_RCC_ClockConfig+0x3d0>)
 800569a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800569c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d208      	bcs.n	80056b6 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 80056a4:	4b10      	ldr	r3, [pc, #64]	; (80056e8 <HAL_RCC_ClockConfig+0x3d0>)
 80056a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	695b      	ldr	r3, [r3, #20]
 80056b0:	490d      	ldr	r1, [pc, #52]	; (80056e8 <HAL_RCC_ClockConfig+0x3d0>)
 80056b2:	4313      	orrs	r3, r2
 80056b4:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80056b6:	f000 f821 	bl	80056fc <HAL_RCC_GetSysClockFreq>
 80056ba:	4602      	mov	r2, r0
 80056bc:	4b0a      	ldr	r3, [pc, #40]	; (80056e8 <HAL_RCC_ClockConfig+0x3d0>)
 80056be:	6a1b      	ldr	r3, [r3, #32]
 80056c0:	f003 030f 	and.w	r3, r3, #15
 80056c4:	490a      	ldr	r1, [pc, #40]	; (80056f0 <HAL_RCC_ClockConfig+0x3d8>)
 80056c6:	5ccb      	ldrb	r3, [r1, r3]
 80056c8:	fa22 f303 	lsr.w	r3, r2, r3
 80056cc:	4a09      	ldr	r2, [pc, #36]	; (80056f4 <HAL_RCC_ClockConfig+0x3dc>)
 80056ce:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80056d0:	4b09      	ldr	r3, [pc, #36]	; (80056f8 <HAL_RCC_ClockConfig+0x3e0>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4618      	mov	r0, r3
 80056d6:	f7fe f991 	bl	80039fc <HAL_InitTick>
 80056da:	4603      	mov	r3, r0
 80056dc:	73fb      	strb	r3, [r7, #15]

  return status;
 80056de:	7bfb      	ldrb	r3, [r7, #15]
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	3718      	adds	r7, #24
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}
 80056e8:	46020c00 	.word	0x46020c00
 80056ec:	40022000 	.word	0x40022000
 80056f0:	0800e454 	.word	0x0800e454
 80056f4:	20000108 	.word	0x20000108
 80056f8:	2000010c 	.word	0x2000010c

080056fc <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b08b      	sub	sp, #44	; 0x2c
 8005700:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8005702:	2300      	movs	r3, #0
 8005704:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8005706:	2300      	movs	r3, #0
 8005708:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800570a:	4b78      	ldr	r3, [pc, #480]	; (80058ec <HAL_RCC_GetSysClockFreq+0x1f0>)
 800570c:	69db      	ldr	r3, [r3, #28]
 800570e:	f003 030c 	and.w	r3, r3, #12
 8005712:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005714:	4b75      	ldr	r3, [pc, #468]	; (80058ec <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005718:	f003 0303 	and.w	r3, r3, #3
 800571c:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800571e:	69bb      	ldr	r3, [r7, #24]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d005      	beq.n	8005730 <HAL_RCC_GetSysClockFreq+0x34>
 8005724:	69bb      	ldr	r3, [r7, #24]
 8005726:	2b0c      	cmp	r3, #12
 8005728:	d121      	bne.n	800576e <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	2b01      	cmp	r3, #1
 800572e:	d11e      	bne.n	800576e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8005730:	4b6e      	ldr	r3, [pc, #440]	; (80058ec <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005738:	2b00      	cmp	r3, #0
 800573a:	d107      	bne.n	800574c <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 800573c:	4b6b      	ldr	r3, [pc, #428]	; (80058ec <HAL_RCC_GetSysClockFreq+0x1f0>)
 800573e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005742:	0b1b      	lsrs	r3, r3, #12
 8005744:	f003 030f 	and.w	r3, r3, #15
 8005748:	627b      	str	r3, [r7, #36]	; 0x24
 800574a:	e005      	b.n	8005758 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 800574c:	4b67      	ldr	r3, [pc, #412]	; (80058ec <HAL_RCC_GetSysClockFreq+0x1f0>)
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	0f1b      	lsrs	r3, r3, #28
 8005752:	f003 030f 	and.w	r3, r3, #15
 8005756:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005758:	4a65      	ldr	r2, [pc, #404]	; (80058f0 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800575a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800575c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005760:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005762:	69bb      	ldr	r3, [r7, #24]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d110      	bne.n	800578a <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576a:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800576c:	e00d      	b.n	800578a <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800576e:	4b5f      	ldr	r3, [pc, #380]	; (80058ec <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005770:	69db      	ldr	r3, [r3, #28]
 8005772:	f003 030c 	and.w	r3, r3, #12
 8005776:	2b04      	cmp	r3, #4
 8005778:	d102      	bne.n	8005780 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800577a:	4b5e      	ldr	r3, [pc, #376]	; (80058f4 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800577c:	623b      	str	r3, [r7, #32]
 800577e:	e004      	b.n	800578a <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005780:	69bb      	ldr	r3, [r7, #24]
 8005782:	2b08      	cmp	r3, #8
 8005784:	d101      	bne.n	800578a <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005786:	4b5b      	ldr	r3, [pc, #364]	; (80058f4 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8005788:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800578a:	69bb      	ldr	r3, [r7, #24]
 800578c:	2b0c      	cmp	r3, #12
 800578e:	f040 80a5 	bne.w	80058dc <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005792:	4b56      	ldr	r3, [pc, #344]	; (80058ec <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005796:	f003 0303 	and.w	r3, r3, #3
 800579a:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800579c:	4b53      	ldr	r3, [pc, #332]	; (80058ec <HAL_RCC_GetSysClockFreq+0x1f0>)
 800579e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057a0:	0a1b      	lsrs	r3, r3, #8
 80057a2:	f003 030f 	and.w	r3, r3, #15
 80057a6:	3301      	adds	r3, #1
 80057a8:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80057aa:	4b50      	ldr	r3, [pc, #320]	; (80058ec <HAL_RCC_GetSysClockFreq+0x1f0>)
 80057ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ae:	091b      	lsrs	r3, r3, #4
 80057b0:	f003 0301 	and.w	r3, r3, #1
 80057b4:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80057b6:	4b4d      	ldr	r3, [pc, #308]	; (80058ec <HAL_RCC_GetSysClockFreq+0x1f0>)
 80057b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ba:	08db      	lsrs	r3, r3, #3
 80057bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80057c0:	68ba      	ldr	r2, [r7, #8]
 80057c2:	fb02 f303 	mul.w	r3, r2, r3
 80057c6:	ee07 3a90 	vmov	s15, r3
 80057ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057ce:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	2b02      	cmp	r3, #2
 80057d6:	d003      	beq.n	80057e0 <HAL_RCC_GetSysClockFreq+0xe4>
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	2b03      	cmp	r3, #3
 80057dc:	d022      	beq.n	8005824 <HAL_RCC_GetSysClockFreq+0x128>
 80057de:	e043      	b.n	8005868 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	ee07 3a90 	vmov	s15, r3
 80057e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057ea:	eddf 6a43 	vldr	s13, [pc, #268]	; 80058f8 <HAL_RCC_GetSysClockFreq+0x1fc>
 80057ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057f2:	4b3e      	ldr	r3, [pc, #248]	; (80058ec <HAL_RCC_GetSysClockFreq+0x1f0>)
 80057f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057fa:	ee07 3a90 	vmov	s15, r3
 80057fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005802:	ed97 6a01 	vldr	s12, [r7, #4]
 8005806:	eddf 5a3d 	vldr	s11, [pc, #244]	; 80058fc <HAL_RCC_GetSysClockFreq+0x200>
 800580a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800580e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005812:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005816:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800581a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800581e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005822:	e046      	b.n	80058b2 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	ee07 3a90 	vmov	s15, r3
 800582a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800582e:	eddf 6a32 	vldr	s13, [pc, #200]	; 80058f8 <HAL_RCC_GetSysClockFreq+0x1fc>
 8005832:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005836:	4b2d      	ldr	r3, [pc, #180]	; (80058ec <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005838:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800583a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800583e:	ee07 3a90 	vmov	s15, r3
 8005842:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005846:	ed97 6a01 	vldr	s12, [r7, #4]
 800584a:	eddf 5a2c 	vldr	s11, [pc, #176]	; 80058fc <HAL_RCC_GetSysClockFreq+0x200>
 800584e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005852:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005856:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800585a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800585e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005862:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005866:	e024      	b.n	80058b2 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800586a:	ee07 3a90 	vmov	s15, r3
 800586e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	ee07 3a90 	vmov	s15, r3
 8005878:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800587c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005880:	4b1a      	ldr	r3, [pc, #104]	; (80058ec <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005884:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005888:	ee07 3a90 	vmov	s15, r3
 800588c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005890:	ed97 6a01 	vldr	s12, [r7, #4]
 8005894:	eddf 5a19 	vldr	s11, [pc, #100]	; 80058fc <HAL_RCC_GetSysClockFreq+0x200>
 8005898:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800589c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80058a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80058a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058ac:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80058b0:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 80058b2:	4b0e      	ldr	r3, [pc, #56]	; (80058ec <HAL_RCC_GetSysClockFreq+0x1f0>)
 80058b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058b6:	0e1b      	lsrs	r3, r3, #24
 80058b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058bc:	3301      	adds	r3, #1
 80058be:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	ee07 3a90 	vmov	s15, r3
 80058c6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80058ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80058ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058d6:	ee17 3a90 	vmov	r3, s15
 80058da:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 80058dc:	6a3b      	ldr	r3, [r7, #32]
}
 80058de:	4618      	mov	r0, r3
 80058e0:	372c      	adds	r7, #44	; 0x2c
 80058e2:	46bd      	mov	sp, r7
 80058e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e8:	4770      	bx	lr
 80058ea:	bf00      	nop
 80058ec:	46020c00 	.word	0x46020c00
 80058f0:	0800e46c 	.word	0x0800e46c
 80058f4:	00f42400 	.word	0x00f42400
 80058f8:	4b742400 	.word	0x4b742400
 80058fc:	46000000 	.word	0x46000000

08005900 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005904:	f7ff fefa 	bl	80056fc <HAL_RCC_GetSysClockFreq>
 8005908:	4602      	mov	r2, r0
 800590a:	4b07      	ldr	r3, [pc, #28]	; (8005928 <HAL_RCC_GetHCLKFreq+0x28>)
 800590c:	6a1b      	ldr	r3, [r3, #32]
 800590e:	f003 030f 	and.w	r3, r3, #15
 8005912:	4906      	ldr	r1, [pc, #24]	; (800592c <HAL_RCC_GetHCLKFreq+0x2c>)
 8005914:	5ccb      	ldrb	r3, [r1, r3]
 8005916:	fa22 f303 	lsr.w	r3, r2, r3
 800591a:	4a05      	ldr	r2, [pc, #20]	; (8005930 <HAL_RCC_GetHCLKFreq+0x30>)
 800591c:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800591e:	4b04      	ldr	r3, [pc, #16]	; (8005930 <HAL_RCC_GetHCLKFreq+0x30>)
 8005920:	681b      	ldr	r3, [r3, #0]
}
 8005922:	4618      	mov	r0, r3
 8005924:	bd80      	pop	{r7, pc}
 8005926:	bf00      	nop
 8005928:	46020c00 	.word	0x46020c00
 800592c:	0800e454 	.word	0x0800e454
 8005930:	20000108 	.word	0x20000108

08005934 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8005938:	f7ff ffe2 	bl	8005900 <HAL_RCC_GetHCLKFreq>
 800593c:	4602      	mov	r2, r0
 800593e:	4b05      	ldr	r3, [pc, #20]	; (8005954 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005940:	6a1b      	ldr	r3, [r3, #32]
 8005942:	091b      	lsrs	r3, r3, #4
 8005944:	f003 0307 	and.w	r3, r3, #7
 8005948:	4903      	ldr	r1, [pc, #12]	; (8005958 <HAL_RCC_GetPCLK1Freq+0x24>)
 800594a:	5ccb      	ldrb	r3, [r1, r3]
 800594c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005950:	4618      	mov	r0, r3
 8005952:	bd80      	pop	{r7, pc}
 8005954:	46020c00 	.word	0x46020c00
 8005958:	0800e464 	.word	0x0800e464

0800595c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8005960:	f7ff ffce 	bl	8005900 <HAL_RCC_GetHCLKFreq>
 8005964:	4602      	mov	r2, r0
 8005966:	4b05      	ldr	r3, [pc, #20]	; (800597c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005968:	6a1b      	ldr	r3, [r3, #32]
 800596a:	0a1b      	lsrs	r3, r3, #8
 800596c:	f003 0307 	and.w	r3, r3, #7
 8005970:	4903      	ldr	r1, [pc, #12]	; (8005980 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005972:	5ccb      	ldrb	r3, [r1, r3]
 8005974:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005978:	4618      	mov	r0, r3
 800597a:	bd80      	pop	{r7, pc}
 800597c:	46020c00 	.word	0x46020c00
 8005980:	0800e464 	.word	0x0800e464

08005984 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8005988:	f7ff ffba 	bl	8005900 <HAL_RCC_GetHCLKFreq>
 800598c:	4602      	mov	r2, r0
 800598e:	4b05      	ldr	r3, [pc, #20]	; (80059a4 <HAL_RCC_GetPCLK3Freq+0x20>)
 8005990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005992:	091b      	lsrs	r3, r3, #4
 8005994:	f003 0307 	and.w	r3, r3, #7
 8005998:	4903      	ldr	r1, [pc, #12]	; (80059a8 <HAL_RCC_GetPCLK3Freq+0x24>)
 800599a:	5ccb      	ldrb	r3, [r1, r3]
 800599c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	bd80      	pop	{r7, pc}
 80059a4:	46020c00 	.word	0x46020c00
 80059a8:	0800e464 	.word	0x0800e464

080059ac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b086      	sub	sp, #24
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80059b4:	4b3e      	ldr	r3, [pc, #248]	; (8005ab0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80059b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059ba:	f003 0304 	and.w	r3, r3, #4
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d003      	beq.n	80059ca <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80059c2:	f7fe fd6f 	bl	80044a4 <HAL_PWREx_GetVoltageRange>
 80059c6:	6178      	str	r0, [r7, #20]
 80059c8:	e019      	b.n	80059fe <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80059ca:	4b39      	ldr	r3, [pc, #228]	; (8005ab0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80059cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059d0:	4a37      	ldr	r2, [pc, #220]	; (8005ab0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80059d2:	f043 0304 	orr.w	r3, r3, #4
 80059d6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80059da:	4b35      	ldr	r3, [pc, #212]	; (8005ab0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80059dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059e0:	f003 0304 	and.w	r3, r3, #4
 80059e4:	60fb      	str	r3, [r7, #12]
 80059e6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80059e8:	f7fe fd5c 	bl	80044a4 <HAL_PWREx_GetVoltageRange>
 80059ec:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80059ee:	4b30      	ldr	r3, [pc, #192]	; (8005ab0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80059f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059f4:	4a2e      	ldr	r2, [pc, #184]	; (8005ab0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80059f6:	f023 0304 	bic.w	r3, r3, #4
 80059fa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005a04:	d003      	beq.n	8005a0e <RCC_SetFlashLatencyFromMSIRange+0x62>
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a0c:	d109      	bne.n	8005a22 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a14:	d202      	bcs.n	8005a1c <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8005a16:	2301      	movs	r3, #1
 8005a18:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8005a1a:	e033      	b.n	8005a84 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8005a20:	e030      	b.n	8005a84 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a28:	d208      	bcs.n	8005a3c <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a30:	d102      	bne.n	8005a38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8005a32:	2303      	movs	r3, #3
 8005a34:	613b      	str	r3, [r7, #16]
 8005a36:	e025      	b.n	8005a84 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	e035      	b.n	8005aa8 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a42:	d90f      	bls.n	8005a64 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d109      	bne.n	8005a5e <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005a50:	d902      	bls.n	8005a58 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8005a52:	2300      	movs	r3, #0
 8005a54:	613b      	str	r3, [r7, #16]
 8005a56:	e015      	b.n	8005a84 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8005a58:	2301      	movs	r3, #1
 8005a5a:	613b      	str	r3, [r7, #16]
 8005a5c:	e012      	b.n	8005a84 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8005a5e:	2300      	movs	r3, #0
 8005a60:	613b      	str	r3, [r7, #16]
 8005a62:	e00f      	b.n	8005a84 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a6a:	d109      	bne.n	8005a80 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a72:	d102      	bne.n	8005a7a <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8005a74:	2301      	movs	r3, #1
 8005a76:	613b      	str	r3, [r7, #16]
 8005a78:	e004      	b.n	8005a84 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8005a7a:	2302      	movs	r3, #2
 8005a7c:	613b      	str	r3, [r7, #16]
 8005a7e:	e001      	b.n	8005a84 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8005a80:	2301      	movs	r3, #1
 8005a82:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005a84:	4b0b      	ldr	r3, [pc, #44]	; (8005ab4 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f023 020f 	bic.w	r2, r3, #15
 8005a8c:	4909      	ldr	r1, [pc, #36]	; (8005ab4 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	4313      	orrs	r3, r2
 8005a92:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8005a94:	4b07      	ldr	r3, [pc, #28]	; (8005ab4 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f003 030f 	and.w	r3, r3, #15
 8005a9c:	693a      	ldr	r2, [r7, #16]
 8005a9e:	429a      	cmp	r2, r3
 8005aa0:	d001      	beq.n	8005aa6 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e000      	b.n	8005aa8 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8005aa6:	2300      	movs	r3, #0
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3718      	adds	r7, #24
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}
 8005ab0:	46020c00 	.word	0x46020c00
 8005ab4:	40022000 	.word	0x40022000

08005ab8 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8005ab8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005abc:	b0ba      	sub	sp, #232	; 0xe8
 8005abe:	af00      	add	r7, sp, #0
 8005ac0:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005aca:	2300      	movs	r3, #0
 8005acc:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005ad0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ad8:	f002 0401 	and.w	r4, r2, #1
 8005adc:	2500      	movs	r5, #0
 8005ade:	ea54 0305 	orrs.w	r3, r4, r5
 8005ae2:	d00b      	beq.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8005ae4:	4bcb      	ldr	r3, [pc, #812]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ae6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005aea:	f023 0103 	bic.w	r1, r3, #3
 8005aee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005af2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005af4:	4ac7      	ldr	r2, [pc, #796]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005af6:	430b      	orrs	r3, r1
 8005af8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005afc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b04:	f002 0802 	and.w	r8, r2, #2
 8005b08:	f04f 0900 	mov.w	r9, #0
 8005b0c:	ea58 0309 	orrs.w	r3, r8, r9
 8005b10:	d00b      	beq.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8005b12:	4bc0      	ldr	r3, [pc, #768]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005b18:	f023 010c 	bic.w	r1, r3, #12
 8005b1c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b22:	4abc      	ldr	r2, [pc, #752]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b24:	430b      	orrs	r3, r1
 8005b26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005b2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b32:	f002 0a04 	and.w	sl, r2, #4
 8005b36:	f04f 0b00 	mov.w	fp, #0
 8005b3a:	ea5a 030b 	orrs.w	r3, sl, fp
 8005b3e:	d00b      	beq.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8005b40:	4bb4      	ldr	r3, [pc, #720]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005b46:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8005b4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005b4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b50:	4ab0      	ldr	r2, [pc, #704]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b52:	430b      	orrs	r3, r1
 8005b54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005b58:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b60:	f002 0308 	and.w	r3, r2, #8
 8005b64:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005b68:	2300      	movs	r3, #0
 8005b6a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005b6e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8005b72:	460b      	mov	r3, r1
 8005b74:	4313      	orrs	r3, r2
 8005b76:	d00b      	beq.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8005b78:	4ba6      	ldr	r3, [pc, #664]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005b7e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005b82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005b86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b88:	4aa2      	ldr	r2, [pc, #648]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b8a:	430b      	orrs	r3, r1
 8005b8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005b90:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b98:	f002 0310 	and.w	r3, r2, #16
 8005b9c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005ba6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005baa:	460b      	mov	r3, r1
 8005bac:	4313      	orrs	r3, r2
 8005bae:	d00b      	beq.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8005bb0:	4b98      	ldr	r3, [pc, #608]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005bb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005bb6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005bba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005bbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bc0:	4a94      	ldr	r2, [pc, #592]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005bc2:	430b      	orrs	r3, r1
 8005bc4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005bc8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bd0:	f002 0320 	and.w	r3, r2, #32
 8005bd4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005bd8:	2300      	movs	r3, #0
 8005bda:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005bde:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8005be2:	460b      	mov	r3, r1
 8005be4:	4313      	orrs	r3, r2
 8005be6:	d00b      	beq.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8005be8:	4b8a      	ldr	r3, [pc, #552]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005bea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005bee:	f023 0107 	bic.w	r1, r3, #7
 8005bf2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005bf6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005bf8:	4a86      	ldr	r2, [pc, #536]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005bfa:	430b      	orrs	r3, r1
 8005bfc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005c00:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c08:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8005c0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c10:	2300      	movs	r3, #0
 8005c12:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c16:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8005c1a:	460b      	mov	r3, r1
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	d00b      	beq.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8005c20:	4b7c      	ldr	r3, [pc, #496]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005c26:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8005c2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005c2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c30:	4a78      	ldr	r2, [pc, #480]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c32:	430b      	orrs	r3, r1
 8005c34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005c38:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c40:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8005c44:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005c48:	2300      	movs	r3, #0
 8005c4a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005c4e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005c52:	460b      	mov	r3, r1
 8005c54:	4313      	orrs	r3, r2
 8005c56:	d00b      	beq.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8005c58:	4b6e      	ldr	r3, [pc, #440]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005c5e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005c62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005c66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c68:	4a6a      	ldr	r2, [pc, #424]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c6a:	430b      	orrs	r3, r1
 8005c6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005c70:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c78:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8005c7c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005c80:	2300      	movs	r3, #0
 8005c82:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005c86:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8005c8a:	460b      	mov	r3, r1
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	d00b      	beq.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8005c90:	4b60      	ldr	r3, [pc, #384]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c92:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005c96:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005c9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ca0:	4a5c      	ldr	r2, [pc, #368]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ca2:	430b      	orrs	r3, r1
 8005ca4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005ca8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cb0:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8005cb4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005cb8:	2300      	movs	r3, #0
 8005cba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005cbe:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8005cc2:	460b      	mov	r3, r1
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	d00b      	beq.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8005cc8:	4b52      	ldr	r3, [pc, #328]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005cca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005cce:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 8005cd2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005cd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cd8:	4a4e      	ldr	r2, [pc, #312]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005cda:	430b      	orrs	r3, r1
 8005cdc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005ce0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ce8:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8005cec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005cf6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8005cfa:	460b      	mov	r3, r1
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	d00b      	beq.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8005d00:	4b44      	ldr	r3, [pc, #272]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005d02:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005d06:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8005d0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005d0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d10:	4a40      	ldr	r2, [pc, #256]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005d12:	430b      	orrs	r3, r1
 8005d14:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005d18:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d20:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8005d24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005d28:	2300      	movs	r3, #0
 8005d2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005d2e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8005d32:	460b      	mov	r3, r1
 8005d34:	4313      	orrs	r3, r2
 8005d36:	d00b      	beq.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8005d38:	4b36      	ldr	r3, [pc, #216]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005d3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005d3e:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8005d42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005d46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d48:	4a32      	ldr	r2, [pc, #200]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005d4a:	430b      	orrs	r3, r1
 8005d4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8005d50:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d58:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8005d5c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005d60:	2300      	movs	r3, #0
 8005d62:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005d66:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8005d6a:	460b      	mov	r3, r1
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	d00c      	beq.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8005d70:	4b28      	ldr	r3, [pc, #160]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005d72:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005d76:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005d7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005d7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d82:	4a24      	ldr	r2, [pc, #144]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005d84:	430b      	orrs	r3, r1
 8005d86:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005d8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d92:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8005d96:	67bb      	str	r3, [r7, #120]	; 0x78
 8005d98:	2300      	movs	r3, #0
 8005d9a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005d9c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8005da0:	460b      	mov	r3, r1
 8005da2:	4313      	orrs	r3, r2
 8005da4:	d04f      	beq.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8005da6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dae:	2b80      	cmp	r3, #128	; 0x80
 8005db0:	d02d      	beq.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x356>
 8005db2:	2b80      	cmp	r3, #128	; 0x80
 8005db4:	d827      	bhi.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005db6:	2b60      	cmp	r3, #96	; 0x60
 8005db8:	d02e      	beq.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005dba:	2b60      	cmp	r3, #96	; 0x60
 8005dbc:	d823      	bhi.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005dbe:	2b40      	cmp	r3, #64	; 0x40
 8005dc0:	d006      	beq.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8005dc2:	2b40      	cmp	r3, #64	; 0x40
 8005dc4:	d81f      	bhi.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d009      	beq.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x326>
 8005dca:	2b20      	cmp	r3, #32
 8005dcc:	d011      	beq.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8005dce:	e01a      	b.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005dd0:	4b10      	ldr	r3, [pc, #64]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dd4:	4a0f      	ldr	r2, [pc, #60]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005dd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005dda:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005ddc:	e01d      	b.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005dde:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005de2:	3308      	adds	r3, #8
 8005de4:	4618      	mov	r0, r3
 8005de6:	f002 fa17 	bl	8008218 <RCCEx_PLL2_Config>
 8005dea:	4603      	mov	r3, r0
 8005dec:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005df0:	e013      	b.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005df2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005df6:	332c      	adds	r3, #44	; 0x2c
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f002 faa5 	bl	8008348 <RCCEx_PLL3_Config>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005e04:	e009      	b.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005e0c:	e005      	b.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 8005e0e:	bf00      	nop
 8005e10:	e003      	b.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0x362>
 8005e12:	bf00      	nop
 8005e14:	46020c00 	.word	0x46020c00
        break;
 8005e18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e1a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d10d      	bne.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8005e22:	4bb6      	ldr	r3, [pc, #728]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005e24:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005e28:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 8005e2c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e34:	4ab1      	ldr	r2, [pc, #708]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005e36:	430b      	orrs	r3, r1
 8005e38:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8005e3c:	e003      	b.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e3e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005e42:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005e46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e4e:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8005e52:	673b      	str	r3, [r7, #112]	; 0x70
 8005e54:	2300      	movs	r3, #0
 8005e56:	677b      	str	r3, [r7, #116]	; 0x74
 8005e58:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8005e5c:	460b      	mov	r3, r1
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	d053      	beq.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8005e62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e6e:	d033      	beq.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8005e70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e74:	d82c      	bhi.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8005e76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e7a:	d02f      	beq.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x424>
 8005e7c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e80:	d826      	bhi.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8005e82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e86:	d008      	beq.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8005e88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e8c:	d820      	bhi.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d00a      	beq.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 8005e92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e96:	d011      	beq.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0x404>
 8005e98:	e01a      	b.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005e9a:	4b98      	ldr	r3, [pc, #608]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e9e:	4a97      	ldr	r2, [pc, #604]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005ea0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ea4:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005ea6:	e01a      	b.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005ea8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005eac:	3308      	adds	r3, #8
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f002 f9b2 	bl	8008218 <RCCEx_PLL2_Config>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005eba:	e010      	b.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005ebc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ec0:	332c      	adds	r3, #44	; 0x2c
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f002 fa40 	bl	8008348 <RCCEx_PLL3_Config>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005ece:	e006      	b.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005ed6:	e002      	b.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8005ed8:	bf00      	nop
 8005eda:	e000      	b.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8005edc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ede:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d10d      	bne.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8005ee6:	4b85      	ldr	r3, [pc, #532]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005ee8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005eec:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8005ef0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ef4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ef8:	4a80      	ldr	r2, [pc, #512]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005efa:	430b      	orrs	r3, r1
 8005efc:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8005f00:	e003      	b.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f02:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005f06:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8005f0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f12:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8005f16:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f18:	2300      	movs	r3, #0
 8005f1a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005f1c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8005f20:	460b      	mov	r3, r1
 8005f22:	4313      	orrs	r3, r2
 8005f24:	d046      	beq.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8005f26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f2a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005f2e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8005f32:	d028      	beq.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8005f34:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8005f38:	d821      	bhi.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8005f3a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f3e:	d022      	beq.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8005f40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f44:	d81b      	bhi.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8005f46:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005f4a:	d01c      	beq.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8005f4c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005f50:	d815      	bhi.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8005f52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f56:	d008      	beq.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8005f58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f5c:	d80f      	bhi.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d011      	beq.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8005f62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f66:	d00e      	beq.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8005f68:	e009      	b.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005f6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f6e:	3308      	adds	r3, #8
 8005f70:	4618      	mov	r0, r3
 8005f72:	f002 f951 	bl	8008218 <RCCEx_PLL2_Config>
 8005f76:	4603      	mov	r3, r0
 8005f78:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005f7c:	e004      	b.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005f84:	e000      	b.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 8005f86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f88:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d10d      	bne.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8005f90:	4b5a      	ldr	r3, [pc, #360]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005f92:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005f96:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8005f9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f9e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005fa2:	4a56      	ldr	r2, [pc, #344]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005fa4:	430b      	orrs	r3, r1
 8005fa6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005faa:	e003      	b.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fac:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005fb0:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8005fb4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fbc:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8005fc0:	663b      	str	r3, [r7, #96]	; 0x60
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	667b      	str	r3, [r7, #100]	; 0x64
 8005fc6:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8005fca:	460b      	mov	r3, r1
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	d03f      	beq.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8005fd0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fd8:	2b04      	cmp	r3, #4
 8005fda:	d81e      	bhi.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x562>
 8005fdc:	a201      	add	r2, pc, #4	; (adr r2, 8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 8005fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fe2:	bf00      	nop
 8005fe4:	08006023 	.word	0x08006023
 8005fe8:	08005ff9 	.word	0x08005ff9
 8005fec:	08006007 	.word	0x08006007
 8005ff0:	08006023 	.word	0x08006023
 8005ff4:	08006023 	.word	0x08006023
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005ff8:	4b40      	ldr	r3, [pc, #256]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ffc:	4a3f      	ldr	r2, [pc, #252]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005ffe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006002:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8006004:	e00e      	b.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006006:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800600a:	332c      	adds	r3, #44	; 0x2c
 800600c:	4618      	mov	r0, r3
 800600e:	f002 f99b 	bl	8008348 <RCCEx_PLL3_Config>
 8006012:	4603      	mov	r3, r0
 8006014:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006018:	e004      	b.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800601a:	2301      	movs	r3, #1
 800601c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006020:	e000      	b.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 8006022:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006024:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006028:	2b00      	cmp	r3, #0
 800602a:	d10d      	bne.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 800602c:	4b33      	ldr	r3, [pc, #204]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800602e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006032:	f023 0107 	bic.w	r1, r3, #7
 8006036:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800603a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800603e:	4a2f      	ldr	r2, [pc, #188]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006040:	430b      	orrs	r3, r1
 8006042:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8006046:	e003      	b.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006048:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800604c:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8006050:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006058:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800605c:	65bb      	str	r3, [r7, #88]	; 0x58
 800605e:	2300      	movs	r3, #0
 8006060:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006062:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8006066:	460b      	mov	r3, r1
 8006068:	4313      	orrs	r3, r2
 800606a:	d04d      	beq.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 800606c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006070:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006074:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006078:	d028      	beq.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x614>
 800607a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800607e:	d821      	bhi.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8006080:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006084:	d024      	beq.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0x618>
 8006086:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800608a:	d81b      	bhi.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 800608c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006090:	d00e      	beq.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 8006092:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006096:	d815      	bhi.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8006098:	2b00      	cmp	r3, #0
 800609a:	d01b      	beq.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x61c>
 800609c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060a0:	d110      	bne.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80060a2:	4b16      	ldr	r3, [pc, #88]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80060a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060a6:	4a15      	ldr	r2, [pc, #84]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80060a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060ac:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 80060ae:	e012      	b.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80060b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80060b4:	332c      	adds	r3, #44	; 0x2c
 80060b6:	4618      	mov	r0, r3
 80060b8:	f002 f946 	bl	8008348 <RCCEx_PLL3_Config>
 80060bc:	4603      	mov	r3, r0
 80060be:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80060c2:	e008      	b.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80060c4:	2301      	movs	r3, #1
 80060c6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80060ca:	e004      	b.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 80060cc:	bf00      	nop
 80060ce:	e002      	b.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 80060d0:	bf00      	nop
 80060d2:	e000      	b.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 80060d4:	bf00      	nop
    }
    if (ret == HAL_OK)
 80060d6:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d110      	bne.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 80060de:	4b07      	ldr	r3, [pc, #28]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80060e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80060e4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80060e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80060ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060f0:	4a02      	ldr	r2, [pc, #8]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80060f2:	430b      	orrs	r3, r1
 80060f4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80060f8:	e006      	b.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x650>
 80060fa:	bf00      	nop
 80060fc:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006100:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006104:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006108:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800610c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006110:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8006114:	653b      	str	r3, [r7, #80]	; 0x50
 8006116:	2300      	movs	r3, #0
 8006118:	657b      	str	r3, [r7, #84]	; 0x54
 800611a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800611e:	460b      	mov	r3, r1
 8006120:	4313      	orrs	r3, r2
 8006122:	f000 80b5 	beq.w	8006290 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006126:	2300      	movs	r3, #0
 8006128:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800612c:	4b9d      	ldr	r3, [pc, #628]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800612e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006132:	f003 0304 	and.w	r3, r3, #4
 8006136:	2b00      	cmp	r3, #0
 8006138:	d113      	bne.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800613a:	4b9a      	ldr	r3, [pc, #616]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800613c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006140:	4a98      	ldr	r2, [pc, #608]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006142:	f043 0304 	orr.w	r3, r3, #4
 8006146:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800614a:	4b96      	ldr	r3, [pc, #600]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800614c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006150:	f003 0304 	and.w	r3, r3, #4
 8006154:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006158:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
      pwrclkchanged = SET;
 800615c:	2301      	movs	r3, #1
 800615e:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8006162:	4b91      	ldr	r3, [pc, #580]	; (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8006164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006166:	4a90      	ldr	r2, [pc, #576]	; (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8006168:	f043 0301 	orr.w	r3, r3, #1
 800616c:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800616e:	f7fd fc8f 	bl	8003a90 <HAL_GetTick>
 8006172:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006176:	e00b      	b.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006178:	f7fd fc8a 	bl	8003a90 <HAL_GetTick>
 800617c:	4602      	mov	r2, r0
 800617e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006182:	1ad3      	subs	r3, r2, r3
 8006184:	2b02      	cmp	r3, #2
 8006186:	d903      	bls.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 8006188:	2303      	movs	r3, #3
 800618a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800618e:	e005      	b.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006190:	4b85      	ldr	r3, [pc, #532]	; (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8006192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006194:	f003 0301 	and.w	r3, r3, #1
 8006198:	2b00      	cmp	r3, #0
 800619a:	d0ed      	beq.n	8006178 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 800619c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d165      	bne.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80061a4:	4b7f      	ldr	r3, [pc, #508]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80061a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80061aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80061b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d023      	beq.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0x74a>
 80061ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80061be:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80061c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d01b      	beq.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80061ca:	4b76      	ldr	r3, [pc, #472]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80061cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80061d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061d4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80061d8:	4b72      	ldr	r3, [pc, #456]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80061da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80061de:	4a71      	ldr	r2, [pc, #452]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80061e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061e4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80061e8:	4b6e      	ldr	r3, [pc, #440]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80061ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80061ee:	4a6d      	ldr	r2, [pc, #436]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80061f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061f4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80061f8:	4a6a      	ldr	r2, [pc, #424]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80061fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061fe:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006202:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006206:	f003 0301 	and.w	r3, r3, #1
 800620a:	2b00      	cmp	r3, #0
 800620c:	d019      	beq.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800620e:	f7fd fc3f 	bl	8003a90 <HAL_GetTick>
 8006212:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006216:	e00d      	b.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006218:	f7fd fc3a 	bl	8003a90 <HAL_GetTick>
 800621c:	4602      	mov	r2, r0
 800621e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006222:	1ad2      	subs	r2, r2, r3
 8006224:	f241 3388 	movw	r3, #5000	; 0x1388
 8006228:	429a      	cmp	r2, r3
 800622a:	d903      	bls.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 800622c:	2303      	movs	r3, #3
 800622e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
            break;
 8006232:	e006      	b.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006234:	4b5b      	ldr	r3, [pc, #364]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006236:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800623a:	f003 0302 	and.w	r3, r3, #2
 800623e:	2b00      	cmp	r3, #0
 8006240:	d0ea      	beq.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 8006242:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006246:	2b00      	cmp	r3, #0
 8006248:	d10d      	bne.n	8006266 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800624a:	4b56      	ldr	r3, [pc, #344]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800624c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006250:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006254:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006258:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800625c:	4a51      	ldr	r2, [pc, #324]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800625e:	430b      	orrs	r3, r1
 8006260:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8006264:	e008      	b.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006266:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800626a:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
 800626e:	e003      	b.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006270:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006274:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006278:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
 800627c:	2b01      	cmp	r3, #1
 800627e:	d107      	bne.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006280:	4b48      	ldr	r3, [pc, #288]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006282:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006286:	4a47      	ldr	r2, [pc, #284]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006288:	f023 0304 	bic.w	r3, r3, #4
 800628c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8006290:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006298:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800629c:	64bb      	str	r3, [r7, #72]	; 0x48
 800629e:	2300      	movs	r3, #0
 80062a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80062a2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80062a6:	460b      	mov	r3, r1
 80062a8:	4313      	orrs	r3, r2
 80062aa:	d042      	beq.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 80062ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80062b0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80062b4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80062b8:	d022      	beq.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0x848>
 80062ba:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80062be:	d81b      	bhi.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x840>
 80062c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80062c4:	d011      	beq.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0x832>
 80062c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80062ca:	d815      	bhi.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x840>
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d019      	beq.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 80062d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80062d4:	d110      	bne.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80062d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80062da:	3308      	adds	r3, #8
 80062dc:	4618      	mov	r0, r3
 80062de:	f001 ff9b 	bl	8008218 <RCCEx_PLL2_Config>
 80062e2:	4603      	mov	r3, r0
 80062e4:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80062e8:	e00d      	b.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062ea:	4b2e      	ldr	r3, [pc, #184]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80062ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ee:	4a2d      	ldr	r2, [pc, #180]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80062f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062f4:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 80062f6:	e006      	b.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80062f8:	2301      	movs	r3, #1
 80062fa:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80062fe:	e002      	b.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8006300:	bf00      	nop
 8006302:	e000      	b.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8006304:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006306:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800630a:	2b00      	cmp	r3, #0
 800630c:	d10d      	bne.n	800632a <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800630e:	4b25      	ldr	r3, [pc, #148]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006310:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006314:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8006318:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800631c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006320:	4a20      	ldr	r2, [pc, #128]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006322:	430b      	orrs	r3, r1
 8006324:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006328:	e003      	b.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800632a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800632e:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006332:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800633a:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800633e:	643b      	str	r3, [r7, #64]	; 0x40
 8006340:	2300      	movs	r3, #0
 8006342:	647b      	str	r3, [r7, #68]	; 0x44
 8006344:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8006348:	460b      	mov	r3, r1
 800634a:	4313      	orrs	r3, r2
 800634c:	d032      	beq.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800634e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006352:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006356:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800635a:	d00b      	beq.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 800635c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006360:	d804      	bhi.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 8006362:	2b00      	cmp	r3, #0
 8006364:	d008      	beq.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8006366:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800636a:	d007      	beq.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 800636c:	2301      	movs	r3, #1
 800636e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006372:	e004      	b.n	800637e <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8006374:	bf00      	nop
 8006376:	e002      	b.n	800637e <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8006378:	bf00      	nop
 800637a:	e000      	b.n	800637e <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 800637c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800637e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006382:	2b00      	cmp	r3, #0
 8006384:	d112      	bne.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8006386:	4b07      	ldr	r3, [pc, #28]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006388:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800638c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006390:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006394:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006398:	4a02      	ldr	r2, [pc, #8]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800639a:	430b      	orrs	r3, r1
 800639c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80063a0:	e008      	b.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 80063a2:	bf00      	nop
 80063a4:	46020c00 	.word	0x46020c00
 80063a8:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063ac:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80063b0:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 80063b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80063b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063bc:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80063c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80063c2:	2300      	movs	r3, #0
 80063c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063c6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80063ca:	460b      	mov	r3, r1
 80063cc:	4313      	orrs	r3, r2
 80063ce:	d00c      	beq.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 80063d0:	4b98      	ldr	r3, [pc, #608]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80063d2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80063d6:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 80063da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80063de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80063e2:	4a94      	ldr	r2, [pc, #592]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80063e4:	430b      	orrs	r3, r1
 80063e6:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 80063ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80063ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063f2:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80063f6:	633b      	str	r3, [r7, #48]	; 0x30
 80063f8:	2300      	movs	r3, #0
 80063fa:	637b      	str	r3, [r7, #52]	; 0x34
 80063fc:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8006400:	460b      	mov	r3, r1
 8006402:	4313      	orrs	r3, r2
 8006404:	d019      	beq.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8006406:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800640a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800640e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006412:	d105      	bne.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006414:	4b87      	ldr	r3, [pc, #540]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006418:	4a86      	ldr	r2, [pc, #536]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800641a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800641e:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8006420:	4b84      	ldr	r3, [pc, #528]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006422:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006426:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800642a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800642e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006432:	4a80      	ldr	r2, [pc, #512]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006434:	430b      	orrs	r3, r1
 8006436:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800643a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800643e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006442:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8006446:	62bb      	str	r3, [r7, #40]	; 0x28
 8006448:	2300      	movs	r3, #0
 800644a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800644c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8006450:	460b      	mov	r3, r1
 8006452:	4313      	orrs	r3, r2
 8006454:	d00c      	beq.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8006456:	4b77      	ldr	r3, [pc, #476]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006458:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800645c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006460:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006464:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006468:	4972      	ldr	r1, [pc, #456]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800646a:	4313      	orrs	r3, r2
 800646c:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8006470:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006478:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800647c:	623b      	str	r3, [r7, #32]
 800647e:	2300      	movs	r3, #0
 8006480:	627b      	str	r3, [r7, #36]	; 0x24
 8006482:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006486:	460b      	mov	r3, r1
 8006488:	4313      	orrs	r3, r2
 800648a:	d00c      	beq.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800648c:	4b69      	ldr	r3, [pc, #420]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800648e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006492:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006496:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800649a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800649e:	4965      	ldr	r1, [pc, #404]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80064a0:	4313      	orrs	r3, r2
 80064a2:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80064a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80064aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ae:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80064b2:	61bb      	str	r3, [r7, #24]
 80064b4:	2300      	movs	r3, #0
 80064b6:	61fb      	str	r3, [r7, #28]
 80064b8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80064bc:	460b      	mov	r3, r1
 80064be:	4313      	orrs	r3, r2
 80064c0:	d00c      	beq.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 80064c2:	4b5c      	ldr	r3, [pc, #368]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80064c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80064c8:	f023 0218 	bic.w	r2, r3, #24
 80064cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80064d0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80064d4:	4957      	ldr	r1, [pc, #348]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80064d6:	4313      	orrs	r3, r2
 80064d8:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80064dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80064e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e4:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 80064e8:	613b      	str	r3, [r7, #16]
 80064ea:	2300      	movs	r3, #0
 80064ec:	617b      	str	r3, [r7, #20]
 80064ee:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80064f2:	460b      	mov	r3, r1
 80064f4:	4313      	orrs	r3, r2
 80064f6:	d032      	beq.n	800655e <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 80064f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80064fc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006500:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006504:	d105      	bne.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006506:	4b4b      	ldr	r3, [pc, #300]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800650a:	4a4a      	ldr	r2, [pc, #296]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800650c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006510:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8006512:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006516:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800651a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800651e:	d108      	bne.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006520:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006524:	3308      	adds	r3, #8
 8006526:	4618      	mov	r0, r3
 8006528:	f001 fe76 	bl	8008218 <RCCEx_PLL2_Config>
 800652c:	4603      	mov	r3, r0
 800652e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
    }
    if (ret == HAL_OK)
 8006532:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006536:	2b00      	cmp	r3, #0
 8006538:	d10d      	bne.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800653a:	4b3e      	ldr	r3, [pc, #248]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800653c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006540:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006544:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006548:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800654c:	4939      	ldr	r1, [pc, #228]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800654e:	4313      	orrs	r3, r2
 8006550:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8006554:	e003      	b.n	800655e <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006556:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800655a:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 800655e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006566:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 800656a:	60bb      	str	r3, [r7, #8]
 800656c:	2300      	movs	r3, #0
 800656e:	60fb      	str	r3, [r7, #12]
 8006570:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006574:	460b      	mov	r3, r1
 8006576:	4313      	orrs	r3, r2
 8006578:	d03a      	beq.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 800657a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800657e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006582:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006586:	d00e      	beq.n	80065a6 <HAL_RCCEx_PeriphCLKConfig+0xaee>
 8006588:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800658c:	d815      	bhi.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800658e:	2b00      	cmp	r3, #0
 8006590:	d017      	beq.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8006592:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006596:	d110      	bne.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006598:	4b26      	ldr	r3, [pc, #152]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800659a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800659c:	4a25      	ldr	r2, [pc, #148]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800659e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065a2:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80065a4:	e00e      	b.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80065a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80065aa:	3308      	adds	r3, #8
 80065ac:	4618      	mov	r0, r3
 80065ae:	f001 fe33 	bl	8008218 <RCCEx_PLL2_Config>
 80065b2:	4603      	mov	r3, r0
 80065b4:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80065b8:	e004      	b.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 80065ba:	2301      	movs	r3, #1
 80065bc:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80065c0:	e000      	b.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 80065c2:	bf00      	nop
    }
    if (ret == HAL_OK)
 80065c4:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d10d      	bne.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 80065cc:	4b19      	ldr	r3, [pc, #100]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80065ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80065d2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80065d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80065da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065de:	4915      	ldr	r1, [pc, #84]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80065e0:	4313      	orrs	r3, r2
 80065e2:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 80065e6:	e003      	b.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065e8:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80065ec:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 80065f0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80065f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065f8:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80065fc:	603b      	str	r3, [r7, #0]
 80065fe:	2300      	movs	r3, #0
 8006600:	607b      	str	r3, [r7, #4]
 8006602:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006606:	460b      	mov	r3, r1
 8006608:	4313      	orrs	r3, r2
 800660a:	d00c      	beq.n	8006626 <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800660c:	4b09      	ldr	r3, [pc, #36]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800660e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006612:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8006616:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800661a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800661e:	4905      	ldr	r1, [pc, #20]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006620:	4313      	orrs	r3, r2
 8006622:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8006626:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
}
 800662a:	4618      	mov	r0, r3
 800662c:	37e8      	adds	r7, #232	; 0xe8
 800662e:	46bd      	mov	sp, r7
 8006630:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006634:	46020c00 	.word	0x46020c00

08006638 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8006638:	b480      	push	{r7}
 800663a:	b089      	sub	sp, #36	; 0x24
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8006640:	4ba6      	ldr	r3, [pc, #664]	; (80068dc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006642:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006644:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006648:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800664a:	4ba4      	ldr	r3, [pc, #656]	; (80068dc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800664c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800664e:	f003 0303 	and.w	r3, r3, #3
 8006652:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8006654:	4ba1      	ldr	r3, [pc, #644]	; (80068dc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006658:	0a1b      	lsrs	r3, r3, #8
 800665a:	f003 030f 	and.w	r3, r3, #15
 800665e:	3301      	adds	r3, #1
 8006660:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8006662:	4b9e      	ldr	r3, [pc, #632]	; (80068dc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006666:	091b      	lsrs	r3, r3, #4
 8006668:	f003 0301 	and.w	r3, r3, #1
 800666c:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800666e:	4b9b      	ldr	r3, [pc, #620]	; (80068dc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006672:	08db      	lsrs	r3, r3, #3
 8006674:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006678:	68fa      	ldr	r2, [r7, #12]
 800667a:	fb02 f303 	mul.w	r3, r2, r3
 800667e:	ee07 3a90 	vmov	s15, r3
 8006682:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006686:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	2b03      	cmp	r3, #3
 800668e:	d062      	beq.n	8006756 <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	2b03      	cmp	r3, #3
 8006694:	f200 8081 	bhi.w	800679a <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	2b01      	cmp	r3, #1
 800669c:	d024      	beq.n	80066e8 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	2b02      	cmp	r3, #2
 80066a2:	d17a      	bne.n	800679a <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	ee07 3a90 	vmov	s15, r3
 80066aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066ae:	eddf 6a8c 	vldr	s13, [pc, #560]	; 80068e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 80066b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066b6:	4b89      	ldr	r3, [pc, #548]	; (80068dc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80066b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066be:	ee07 3a90 	vmov	s15, r3
 80066c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80066c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80066ca:	eddf 5a86 	vldr	s11, [pc, #536]	; 80068e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80066ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80066d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80066d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80066da:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80066de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066e2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80066e6:	e08f      	b.n	8006808 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80066e8:	4b7c      	ldr	r3, [pc, #496]	; (80068dc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80066ea:	689b      	ldr	r3, [r3, #8]
 80066ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d005      	beq.n	8006700 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 80066f4:	4b79      	ldr	r3, [pc, #484]	; (80068dc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80066f6:	689b      	ldr	r3, [r3, #8]
 80066f8:	0f1b      	lsrs	r3, r3, #28
 80066fa:	f003 030f 	and.w	r3, r3, #15
 80066fe:	e006      	b.n	800670e <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 8006700:	4b76      	ldr	r3, [pc, #472]	; (80068dc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006702:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006706:	041b      	lsls	r3, r3, #16
 8006708:	0f1b      	lsrs	r3, r3, #28
 800670a:	f003 030f 	and.w	r3, r3, #15
 800670e:	4a76      	ldr	r2, [pc, #472]	; (80068e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8006710:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006714:	ee07 3a90 	vmov	s15, r3
 8006718:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	ee07 3a90 	vmov	s15, r3
 8006722:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006726:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800672a:	69bb      	ldr	r3, [r7, #24]
 800672c:	ee07 3a90 	vmov	s15, r3
 8006730:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006734:	ed97 6a02 	vldr	s12, [r7, #8]
 8006738:	eddf 5a6a 	vldr	s11, [pc, #424]	; 80068e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800673c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006740:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006744:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006748:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800674c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006750:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006754:	e058      	b.n	8006808 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	ee07 3a90 	vmov	s15, r3
 800675c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006760:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80068e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8006764:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006768:	4b5c      	ldr	r3, [pc, #368]	; (80068dc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800676a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800676c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006770:	ee07 3a90 	vmov	s15, r3
 8006774:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8006778:	ed97 6a02 	vldr	s12, [r7, #8]
 800677c:	eddf 5a59 	vldr	s11, [pc, #356]	; 80068e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8006780:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006784:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8006788:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800678c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006790:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006794:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006798:	e036      	b.n	8006808 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800679a:	4b50      	ldr	r3, [pc, #320]	; (80068dc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800679c:	689b      	ldr	r3, [r3, #8]
 800679e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d005      	beq.n	80067b2 <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 80067a6:	4b4d      	ldr	r3, [pc, #308]	; (80068dc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80067a8:	689b      	ldr	r3, [r3, #8]
 80067aa:	0f1b      	lsrs	r3, r3, #28
 80067ac:	f003 030f 	and.w	r3, r3, #15
 80067b0:	e006      	b.n	80067c0 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 80067b2:	4b4a      	ldr	r3, [pc, #296]	; (80068dc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80067b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80067b8:	041b      	lsls	r3, r3, #16
 80067ba:	0f1b      	lsrs	r3, r3, #28
 80067bc:	f003 030f 	and.w	r3, r3, #15
 80067c0:	4a49      	ldr	r2, [pc, #292]	; (80068e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 80067c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067c6:	ee07 3a90 	vmov	s15, r3
 80067ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	ee07 3a90 	vmov	s15, r3
 80067d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80067dc:	69bb      	ldr	r3, [r7, #24]
 80067de:	ee07 3a90 	vmov	s15, r3
 80067e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80067ea:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80068e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80067ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80067fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006802:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006806:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8006808:	4b34      	ldr	r3, [pc, #208]	; (80068dc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800680a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800680c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006810:	2b00      	cmp	r3, #0
 8006812:	d017      	beq.n	8006844 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006814:	4b31      	ldr	r3, [pc, #196]	; (80068dc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006818:	0a5b      	lsrs	r3, r3, #9
 800681a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800681e:	ee07 3a90 	vmov	s15, r3
 8006822:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8006826:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800682a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800682e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006832:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006836:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800683a:	ee17 2a90 	vmov	r2, s15
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	601a      	str	r2, [r3, #0]
 8006842:	e002      	b.n	800684a <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2200      	movs	r2, #0
 8006848:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800684a:	4b24      	ldr	r3, [pc, #144]	; (80068dc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800684c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800684e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006852:	2b00      	cmp	r3, #0
 8006854:	d017      	beq.n	8006886 <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006856:	4b21      	ldr	r3, [pc, #132]	; (80068dc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800685a:	0c1b      	lsrs	r3, r3, #16
 800685c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006860:	ee07 3a90 	vmov	s15, r3
 8006864:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8006868:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800686c:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006870:	edd7 6a07 	vldr	s13, [r7, #28]
 8006874:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006878:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800687c:	ee17 2a90 	vmov	r2, s15
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	605a      	str	r2, [r3, #4]
 8006884:	e002      	b.n	800688c <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2200      	movs	r2, #0
 800688a:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800688c:	4b13      	ldr	r3, [pc, #76]	; (80068dc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800688e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006890:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006894:	2b00      	cmp	r3, #0
 8006896:	d017      	beq.n	80068c8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006898:	4b10      	ldr	r3, [pc, #64]	; (80068dc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800689a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800689c:	0e1b      	lsrs	r3, r3, #24
 800689e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068a2:	ee07 3a90 	vmov	s15, r3
 80068a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 80068aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80068ae:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80068b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80068b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80068be:	ee17 2a90 	vmov	r2, s15
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80068c6:	e002      	b.n	80068ce <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2200      	movs	r2, #0
 80068cc:	609a      	str	r2, [r3, #8]
}
 80068ce:	bf00      	nop
 80068d0:	3724      	adds	r7, #36	; 0x24
 80068d2:	46bd      	mov	sp, r7
 80068d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d8:	4770      	bx	lr
 80068da:	bf00      	nop
 80068dc:	46020c00 	.word	0x46020c00
 80068e0:	4b742400 	.word	0x4b742400
 80068e4:	46000000 	.word	0x46000000
 80068e8:	0800e46c 	.word	0x0800e46c

080068ec <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b089      	sub	sp, #36	; 0x24
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80068f4:	4ba6      	ldr	r3, [pc, #664]	; (8006b90 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80068f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068fc:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80068fe:	4ba4      	ldr	r3, [pc, #656]	; (8006b90 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006902:	f003 0303 	and.w	r3, r3, #3
 8006906:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8006908:	4ba1      	ldr	r3, [pc, #644]	; (8006b90 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800690a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800690c:	0a1b      	lsrs	r3, r3, #8
 800690e:	f003 030f 	and.w	r3, r3, #15
 8006912:	3301      	adds	r3, #1
 8006914:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8006916:	4b9e      	ldr	r3, [pc, #632]	; (8006b90 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800691a:	091b      	lsrs	r3, r3, #4
 800691c:	f003 0301 	and.w	r3, r3, #1
 8006920:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8006922:	4b9b      	ldr	r3, [pc, #620]	; (8006b90 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006926:	08db      	lsrs	r3, r3, #3
 8006928:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800692c:	68fa      	ldr	r2, [r7, #12]
 800692e:	fb02 f303 	mul.w	r3, r2, r3
 8006932:	ee07 3a90 	vmov	s15, r3
 8006936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800693a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	2b03      	cmp	r3, #3
 8006942:	d062      	beq.n	8006a0a <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	2b03      	cmp	r3, #3
 8006948:	f200 8081 	bhi.w	8006a4e <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	2b01      	cmp	r3, #1
 8006950:	d024      	beq.n	800699c <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	2b02      	cmp	r3, #2
 8006956:	d17a      	bne.n	8006a4e <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	ee07 3a90 	vmov	s15, r3
 800695e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006962:	eddf 6a8c 	vldr	s13, [pc, #560]	; 8006b94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8006966:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800696a:	4b89      	ldr	r3, [pc, #548]	; (8006b90 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800696c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800696e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006972:	ee07 3a90 	vmov	s15, r3
 8006976:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800697a:	ed97 6a02 	vldr	s12, [r7, #8]
 800697e:	eddf 5a86 	vldr	s11, [pc, #536]	; 8006b98 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8006982:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006986:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800698a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800698e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006992:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006996:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800699a:	e08f      	b.n	8006abc <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800699c:	4b7c      	ldr	r3, [pc, #496]	; (8006b90 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d005      	beq.n	80069b4 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 80069a8:	4b79      	ldr	r3, [pc, #484]	; (8006b90 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80069aa:	689b      	ldr	r3, [r3, #8]
 80069ac:	0f1b      	lsrs	r3, r3, #28
 80069ae:	f003 030f 	and.w	r3, r3, #15
 80069b2:	e006      	b.n	80069c2 <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 80069b4:	4b76      	ldr	r3, [pc, #472]	; (8006b90 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80069b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80069ba:	041b      	lsls	r3, r3, #16
 80069bc:	0f1b      	lsrs	r3, r3, #28
 80069be:	f003 030f 	and.w	r3, r3, #15
 80069c2:	4a76      	ldr	r2, [pc, #472]	; (8006b9c <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 80069c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069c8:	ee07 3a90 	vmov	s15, r3
 80069cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	ee07 3a90 	vmov	s15, r3
 80069d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80069de:	69bb      	ldr	r3, [r7, #24]
 80069e0:	ee07 3a90 	vmov	s15, r3
 80069e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069e8:	ed97 6a02 	vldr	s12, [r7, #8]
 80069ec:	eddf 5a6a 	vldr	s11, [pc, #424]	; 8006b98 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80069f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80069fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8006a00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a04:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006a08:	e058      	b.n	8006abc <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	ee07 3a90 	vmov	s15, r3
 8006a10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a14:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006b94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8006a18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a1c:	4b5c      	ldr	r3, [pc, #368]	; (8006b90 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006a1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a24:	ee07 3a90 	vmov	s15, r3
 8006a28:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8006a2c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a30:	eddf 5a59 	vldr	s11, [pc, #356]	; 8006b98 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8006a34:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006a38:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8006a3c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a40:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006a44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a48:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006a4c:	e036      	b.n	8006abc <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8006a4e:	4b50      	ldr	r3, [pc, #320]	; (8006b90 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006a50:	689b      	ldr	r3, [r3, #8]
 8006a52:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d005      	beq.n	8006a66 <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 8006a5a:	4b4d      	ldr	r3, [pc, #308]	; (8006b90 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006a5c:	689b      	ldr	r3, [r3, #8]
 8006a5e:	0f1b      	lsrs	r3, r3, #28
 8006a60:	f003 030f 	and.w	r3, r3, #15
 8006a64:	e006      	b.n	8006a74 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 8006a66:	4b4a      	ldr	r3, [pc, #296]	; (8006b90 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006a68:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006a6c:	041b      	lsls	r3, r3, #16
 8006a6e:	0f1b      	lsrs	r3, r3, #28
 8006a70:	f003 030f 	and.w	r3, r3, #15
 8006a74:	4a49      	ldr	r2, [pc, #292]	; (8006b9c <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8006a76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a7a:	ee07 3a90 	vmov	s15, r3
 8006a7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	ee07 3a90 	vmov	s15, r3
 8006a88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006a90:	69bb      	ldr	r3, [r7, #24]
 8006a92:	ee07 3a90 	vmov	s15, r3
 8006a96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a9e:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8006b98 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8006aa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006aa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006aaa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006aae:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8006ab2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ab6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006aba:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8006abc:	4b34      	ldr	r3, [pc, #208]	; (8006b90 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ac0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d017      	beq.n	8006af8 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006ac8:	4b31      	ldr	r3, [pc, #196]	; (8006b90 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006aca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006acc:	0a5b      	lsrs	r3, r3, #9
 8006ace:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ad2:	ee07 3a90 	vmov	s15, r3
 8006ad6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8006ada:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006ade:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006ae2:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ae6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006aea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006aee:	ee17 2a90 	vmov	r2, s15
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	601a      	str	r2, [r3, #0]
 8006af6:	e002      	b.n	8006afe <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2200      	movs	r2, #0
 8006afc:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8006afe:	4b24      	ldr	r3, [pc, #144]	; (8006b90 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d017      	beq.n	8006b3a <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006b0a:	4b21      	ldr	r3, [pc, #132]	; (8006b90 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006b0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b0e:	0c1b      	lsrs	r3, r3, #16
 8006b10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b14:	ee07 3a90 	vmov	s15, r3
 8006b18:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8006b1c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006b20:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006b24:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b30:	ee17 2a90 	vmov	r2, s15
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	605a      	str	r2, [r3, #4]
 8006b38:	e002      	b.n	8006b40 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8006b40:	4b13      	ldr	r3, [pc, #76]	; (8006b90 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d017      	beq.n	8006b7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006b4c:	4b10      	ldr	r3, [pc, #64]	; (8006b90 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006b4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b50:	0e1b      	lsrs	r3, r3, #24
 8006b52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b56:	ee07 3a90 	vmov	s15, r3
 8006b5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8006b5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006b62:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006b66:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b72:	ee17 2a90 	vmov	r2, s15
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006b7a:	e002      	b.n	8006b82 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	609a      	str	r2, [r3, #8]
}
 8006b82:	bf00      	nop
 8006b84:	3724      	adds	r7, #36	; 0x24
 8006b86:	46bd      	mov	sp, r7
 8006b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8c:	4770      	bx	lr
 8006b8e:	bf00      	nop
 8006b90:	46020c00 	.word	0x46020c00
 8006b94:	4b742400 	.word	0x4b742400
 8006b98:	46000000 	.word	0x46000000
 8006b9c:	0800e46c 	.word	0x0800e46c

08006ba0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b089      	sub	sp, #36	; 0x24
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8006ba8:	4ba6      	ldr	r3, [pc, #664]	; (8006e44 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006baa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bb0:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8006bb2:	4ba4      	ldr	r3, [pc, #656]	; (8006e44 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bb6:	f003 0303 	and.w	r3, r3, #3
 8006bba:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8006bbc:	4ba1      	ldr	r3, [pc, #644]	; (8006e44 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bc0:	0a1b      	lsrs	r3, r3, #8
 8006bc2:	f003 030f 	and.w	r3, r3, #15
 8006bc6:	3301      	adds	r3, #1
 8006bc8:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8006bca:	4b9e      	ldr	r3, [pc, #632]	; (8006e44 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bce:	091b      	lsrs	r3, r3, #4
 8006bd0:	f003 0301 	and.w	r3, r3, #1
 8006bd4:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8006bd6:	4b9b      	ldr	r3, [pc, #620]	; (8006e44 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006bd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bda:	08db      	lsrs	r3, r3, #3
 8006bdc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006be0:	68fa      	ldr	r2, [r7, #12]
 8006be2:	fb02 f303 	mul.w	r3, r2, r3
 8006be6:	ee07 3a90 	vmov	s15, r3
 8006bea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bee:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	2b03      	cmp	r3, #3
 8006bf6:	d062      	beq.n	8006cbe <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 8006bf8:	697b      	ldr	r3, [r7, #20]
 8006bfa:	2b03      	cmp	r3, #3
 8006bfc:	f200 8081 	bhi.w	8006d02 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	2b01      	cmp	r3, #1
 8006c04:	d024      	beq.n	8006c50 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	2b02      	cmp	r3, #2
 8006c0a:	d17a      	bne.n	8006d02 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	ee07 3a90 	vmov	s15, r3
 8006c12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c16:	eddf 6a8c 	vldr	s13, [pc, #560]	; 8006e48 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8006c1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c1e:	4b89      	ldr	r3, [pc, #548]	; (8006e44 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c26:	ee07 3a90 	vmov	s15, r3
 8006c2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8006c2e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c32:	eddf 5a86 	vldr	s11, [pc, #536]	; 8006e4c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8006c36:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006c3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8006c3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c42:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006c46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c4a:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 8006c4e:	e08f      	b.n	8006d70 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006c50:	4b7c      	ldr	r3, [pc, #496]	; (8006e44 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006c52:	689b      	ldr	r3, [r3, #8]
 8006c54:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d005      	beq.n	8006c68 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8006c5c:	4b79      	ldr	r3, [pc, #484]	; (8006e44 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006c5e:	689b      	ldr	r3, [r3, #8]
 8006c60:	0f1b      	lsrs	r3, r3, #28
 8006c62:	f003 030f 	and.w	r3, r3, #15
 8006c66:	e006      	b.n	8006c76 <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 8006c68:	4b76      	ldr	r3, [pc, #472]	; (8006e44 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006c6a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006c6e:	041b      	lsls	r3, r3, #16
 8006c70:	0f1b      	lsrs	r3, r3, #28
 8006c72:	f003 030f 	and.w	r3, r3, #15
 8006c76:	4a76      	ldr	r2, [pc, #472]	; (8006e50 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8006c78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c7c:	ee07 3a90 	vmov	s15, r3
 8006c80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	ee07 3a90 	vmov	s15, r3
 8006c8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006c92:	69bb      	ldr	r3, [r7, #24]
 8006c94:	ee07 3a90 	vmov	s15, r3
 8006c98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c9c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ca0:	eddf 5a6a 	vldr	s11, [pc, #424]	; 8006e4c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8006ca4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ca8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006cb0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006cb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cb8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006cbc:	e058      	b.n	8006d70 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	ee07 3a90 	vmov	s15, r3
 8006cc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cc8:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006e48 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8006ccc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cd0:	4b5c      	ldr	r3, [pc, #368]	; (8006e44 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006cd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cd8:	ee07 3a90 	vmov	s15, r3
 8006cdc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8006ce0:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ce4:	eddf 5a59 	vldr	s11, [pc, #356]	; 8006e4c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8006ce8:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006cec:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8006cf0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006cf4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006cf8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cfc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006d00:	e036      	b.n	8006d70 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006d02:	4b50      	ldr	r3, [pc, #320]	; (8006e44 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006d04:	689b      	ldr	r3, [r3, #8]
 8006d06:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d005      	beq.n	8006d1a <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 8006d0e:	4b4d      	ldr	r3, [pc, #308]	; (8006e44 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006d10:	689b      	ldr	r3, [r3, #8]
 8006d12:	0f1b      	lsrs	r3, r3, #28
 8006d14:	f003 030f 	and.w	r3, r3, #15
 8006d18:	e006      	b.n	8006d28 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 8006d1a:	4b4a      	ldr	r3, [pc, #296]	; (8006e44 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006d1c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006d20:	041b      	lsls	r3, r3, #16
 8006d22:	0f1b      	lsrs	r3, r3, #28
 8006d24:	f003 030f 	and.w	r3, r3, #15
 8006d28:	4a49      	ldr	r2, [pc, #292]	; (8006e50 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8006d2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d2e:	ee07 3a90 	vmov	s15, r3
 8006d32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	ee07 3a90 	vmov	s15, r3
 8006d3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d40:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006d44:	69bb      	ldr	r3, [r7, #24]
 8006d46:	ee07 3a90 	vmov	s15, r3
 8006d4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006d52:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8006e4c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8006d56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d62:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006d66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d6a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006d6e:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8006d70:	4b34      	ldr	r3, [pc, #208]	; (8006e44 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d017      	beq.n	8006dac <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006d7c:	4b31      	ldr	r3, [pc, #196]	; (8006e44 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006d7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d80:	0a5b      	lsrs	r3, r3, #9
 8006d82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d86:	ee07 3a90 	vmov	s15, r3
 8006d8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8006d8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006d92:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006d96:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006da2:	ee17 2a90 	vmov	r2, s15
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	601a      	str	r2, [r3, #0]
 8006daa:	e002      	b.n	8006db2 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2200      	movs	r2, #0
 8006db0:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8006db2:	4b24      	ldr	r3, [pc, #144]	; (8006e44 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d017      	beq.n	8006dee <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006dbe:	4b21      	ldr	r3, [pc, #132]	; (8006e44 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dc2:	0c1b      	lsrs	r3, r3, #16
 8006dc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006dc8:	ee07 3a90 	vmov	s15, r3
 8006dcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8006dd0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006dd4:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006dd8:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ddc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006de0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006de4:	ee17 2a90 	vmov	r2, s15
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	605a      	str	r2, [r3, #4]
 8006dec:	e002      	b.n	8006df4 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2200      	movs	r2, #0
 8006df2:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8006df4:	4b13      	ldr	r3, [pc, #76]	; (8006e44 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006df8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d017      	beq.n	8006e30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006e00:	4b10      	ldr	r3, [pc, #64]	; (8006e44 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006e02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e04:	0e1b      	lsrs	r3, r3, #24
 8006e06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e0a:	ee07 3a90 	vmov	s15, r3
 8006e0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8006e12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006e16:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006e1a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e26:	ee17 2a90 	vmov	r2, s15
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006e2e:	e002      	b.n	8006e36 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2200      	movs	r2, #0
 8006e34:	609a      	str	r2, [r3, #8]
}
 8006e36:	bf00      	nop
 8006e38:	3724      	adds	r7, #36	; 0x24
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e40:	4770      	bx	lr
 8006e42:	bf00      	nop
 8006e44:	46020c00 	.word	0x46020c00
 8006e48:	4b742400 	.word	0x4b742400
 8006e4c:	46000000 	.word	0x46000000
 8006e50:	0800e46c 	.word	0x0800e46c

08006e54 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b08e      	sub	sp, #56	; 0x38
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8006e5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e62:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 8006e66:	430b      	orrs	r3, r1
 8006e68:	d145      	bne.n	8006ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8006e6a:	4ba7      	ldr	r3, [pc, #668]	; (8007108 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006e6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006e70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e74:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8006e76:	4ba4      	ldr	r3, [pc, #656]	; (8007108 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006e78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006e7c:	f003 0302 	and.w	r3, r3, #2
 8006e80:	2b02      	cmp	r3, #2
 8006e82:	d108      	bne.n	8006e96 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8006e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e8a:	d104      	bne.n	8006e96 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8006e8c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e90:	637b      	str	r3, [r7, #52]	; 0x34
 8006e92:	f001 b9b3 	b.w	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8006e96:	4b9c      	ldr	r3, [pc, #624]	; (8007108 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006e98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006e9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ea0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006ea4:	d114      	bne.n	8006ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8006ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ea8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006eac:	d110      	bne.n	8006ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006eae:	4b96      	ldr	r3, [pc, #600]	; (8007108 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006eb0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006eb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006eb8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ebc:	d103      	bne.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8006ebe:	23fa      	movs	r3, #250	; 0xfa
 8006ec0:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006ec2:	f001 b99b 	b.w	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8006ec6:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006eca:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006ecc:	f001 b996 	b.w	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8006ed0:	4b8d      	ldr	r3, [pc, #564]	; (8007108 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ed8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006edc:	d107      	bne.n	8006eee <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8006ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ee0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ee4:	d103      	bne.n	8006eee <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8006ee6:	4b89      	ldr	r3, [pc, #548]	; (800710c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8006ee8:	637b      	str	r3, [r7, #52]	; 0x34
 8006eea:	f001 b987 	b.w	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	637b      	str	r3, [r7, #52]	; 0x34
 8006ef2:	f001 b983 	b.w	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006ef6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006efa:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8006efe:	430b      	orrs	r3, r1
 8006f00:	d151      	bne.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8006f02:	4b81      	ldr	r3, [pc, #516]	; (8007108 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006f04:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006f08:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8006f0c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8006f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f10:	2b80      	cmp	r3, #128	; 0x80
 8006f12:	d035      	beq.n	8006f80 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8006f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f16:	2b80      	cmp	r3, #128	; 0x80
 8006f18:	d841      	bhi.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8006f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f1c:	2b60      	cmp	r3, #96	; 0x60
 8006f1e:	d02a      	beq.n	8006f76 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8006f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f22:	2b60      	cmp	r3, #96	; 0x60
 8006f24:	d83b      	bhi.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8006f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f28:	2b40      	cmp	r3, #64	; 0x40
 8006f2a:	d009      	beq.n	8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8006f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f2e:	2b40      	cmp	r3, #64	; 0x40
 8006f30:	d835      	bhi.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8006f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d00c      	beq.n	8006f52 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8006f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f3a:	2b20      	cmp	r3, #32
 8006f3c:	d012      	beq.n	8006f64 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8006f3e:	e02e      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006f40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f44:	4618      	mov	r0, r3
 8006f46:	f7ff fb77 	bl	8006638 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f4c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006f4e:	f001 b955 	b.w	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f52:	f107 0318 	add.w	r3, r7, #24
 8006f56:	4618      	mov	r0, r3
 8006f58:	f7ff fcc8 	bl	80068ec <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8006f5c:	69bb      	ldr	r3, [r7, #24]
 8006f5e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006f60:	f001 b94c 	b.w	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f64:	f107 030c 	add.w	r3, r7, #12
 8006f68:	4618      	mov	r0, r3
 8006f6a:	f7ff fe19 	bl	8006ba0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006f72:	f001 b943 	b.w	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006f76:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006f7a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006f7c:	f001 b93e 	b.w	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006f80:	4b61      	ldr	r3, [pc, #388]	; (8007108 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f8c:	d103      	bne.n	8006f96 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8006f8e:	4b60      	ldr	r3, [pc, #384]	; (8007110 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006f90:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006f92:	f001 b933 	b.w	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8006f96:	2300      	movs	r3, #0
 8006f98:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006f9a:	f001 b92f 	b.w	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :
      {
        frequency = 0U;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006fa2:	f001 b92b 	b.w	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8006fa6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006faa:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8006fae:	430b      	orrs	r3, r1
 8006fb0:	d158      	bne.n	8007064 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8006fb2:	4b55      	ldr	r3, [pc, #340]	; (8007108 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006fb4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006fb8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006fbc:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8006fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fc4:	d03b      	beq.n	800703e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8006fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fcc:	d846      	bhi.n	800705c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8006fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fd0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006fd4:	d02e      	beq.n	8007034 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8006fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fd8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006fdc:	d83e      	bhi.n	800705c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8006fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fe0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006fe4:	d00b      	beq.n	8006ffe <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8006fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fe8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006fec:	d836      	bhi.n	800705c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8006fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d00d      	beq.n	8007010 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8006ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ff6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ffa:	d012      	beq.n	8007022 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8006ffc:	e02e      	b.n	800705c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006ffe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007002:	4618      	mov	r0, r3
 8007004:	f7ff fb18 	bl	8006638 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8007008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800700a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800700c:	f001 b8f6 	b.w	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007010:	f107 0318 	add.w	r3, r7, #24
 8007014:	4618      	mov	r0, r3
 8007016:	f7ff fc69 	bl	80068ec <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800701a:	69bb      	ldr	r3, [r7, #24]
 800701c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800701e:	f001 b8ed 	b.w	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007022:	f107 030c 	add.w	r3, r7, #12
 8007026:	4618      	mov	r0, r3
 8007028:	f7ff fdba 	bl	8006ba0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007030:	f001 b8e4 	b.w	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007034:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007038:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800703a:	f001 b8df 	b.w	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800703e:	4b32      	ldr	r3, [pc, #200]	; (8007108 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007046:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800704a:	d103      	bne.n	8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 800704c:	4b30      	ldr	r3, [pc, #192]	; (8007110 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800704e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007050:	f001 b8d4 	b.w	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8007054:	2300      	movs	r3, #0
 8007056:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007058:	f001 b8d0 	b.w	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :

        frequency = 0U;
 800705c:	2300      	movs	r3, #0
 800705e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007060:	f001 b8cc 	b.w	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 8007064:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007068:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800706c:	430b      	orrs	r3, r1
 800706e:	d126      	bne.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8007070:	4b25      	ldr	r3, [pc, #148]	; (8007108 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007072:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007076:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800707a:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 800707c:	4b22      	ldr	r3, [pc, #136]	; (8007108 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007084:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007088:	d106      	bne.n	8007098 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800708a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800708c:	2b00      	cmp	r3, #0
 800708e:	d103      	bne.n	8007098 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 8007090:	4b1f      	ldr	r3, [pc, #124]	; (8007110 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007092:	637b      	str	r3, [r7, #52]	; 0x34
 8007094:	f001 b8b2 	b.w	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8007098:	4b1b      	ldr	r3, [pc, #108]	; (8007108 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070a4:	d107      	bne.n	80070b6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 80070a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070ac:	d103      	bne.n	80070b6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 80070ae:	4b19      	ldr	r3, [pc, #100]	; (8007114 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80070b0:	637b      	str	r3, [r7, #52]	; 0x34
 80070b2:	f001 b8a3 	b.w	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 80070b6:	2300      	movs	r3, #0
 80070b8:	637b      	str	r3, [r7, #52]	; 0x34
 80070ba:	f001 b89f 	b.w	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 80070be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070c2:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 80070c6:	430b      	orrs	r3, r1
 80070c8:	d16e      	bne.n	80071a8 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 80070ca:	4b0f      	ldr	r3, [pc, #60]	; (8007108 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80070cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80070d0:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80070d4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80070d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070d8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80070dc:	d03d      	beq.n	800715a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80070de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070e0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80070e4:	d85c      	bhi.n	80071a0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 80070e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80070ec:	d014      	beq.n	8007118 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 80070ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80070f4:	d854      	bhi.n	80071a0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 80070f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d01f      	beq.n	800713c <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 80070fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007102:	d012      	beq.n	800712a <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8007104:	e04c      	b.n	80071a0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8007106:	bf00      	nop
 8007108:	46020c00 	.word	0x46020c00
 800710c:	0007a120 	.word	0x0007a120
 8007110:	00f42400 	.word	0x00f42400
 8007114:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007118:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800711c:	4618      	mov	r0, r3
 800711e:	f7ff fa8b 	bl	8006638 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8007122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007124:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007126:	f001 b869 	b.w	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800712a:	f107 0318 	add.w	r3, r7, #24
 800712e:	4618      	mov	r0, r3
 8007130:	f7ff fbdc 	bl	80068ec <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8007134:	69fb      	ldr	r3, [r7, #28]
 8007136:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007138:	f001 b860 	b.w	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800713c:	4ba7      	ldr	r3, [pc, #668]	; (80073dc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007144:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007148:	d103      	bne.n	8007152 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 800714a:	4ba5      	ldr	r3, [pc, #660]	; (80073e0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800714c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800714e:	f001 b855 	b.w	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8007152:	2300      	movs	r3, #0
 8007154:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007156:	f001 b851 	b.w	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800715a:	4ba0      	ldr	r3, [pc, #640]	; (80073dc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f003 0320 	and.w	r3, r3, #32
 8007162:	2b20      	cmp	r3, #32
 8007164:	d118      	bne.n	8007198 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007166:	4b9d      	ldr	r3, [pc, #628]	; (80073dc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007168:	689b      	ldr	r3, [r3, #8]
 800716a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800716e:	2b00      	cmp	r3, #0
 8007170:	d005      	beq.n	800717e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8007172:	4b9a      	ldr	r3, [pc, #616]	; (80073dc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007174:	689b      	ldr	r3, [r3, #8]
 8007176:	0e1b      	lsrs	r3, r3, #24
 8007178:	f003 030f 	and.w	r3, r3, #15
 800717c:	e006      	b.n	800718c <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800717e:	4b97      	ldr	r3, [pc, #604]	; (80073dc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007180:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007184:	041b      	lsls	r3, r3, #16
 8007186:	0e1b      	lsrs	r3, r3, #24
 8007188:	f003 030f 	and.w	r3, r3, #15
 800718c:	4a95      	ldr	r2, [pc, #596]	; (80073e4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800718e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007192:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007194:	f001 b832 	b.w	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8007198:	2300      	movs	r3, #0
 800719a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800719c:	f001 b82e 	b.w	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :

        frequency = 0U;
 80071a0:	2300      	movs	r3, #0
 80071a2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80071a4:	f001 b82a 	b.w	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80071a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071ac:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 80071b0:	430b      	orrs	r3, r1
 80071b2:	d17f      	bne.n	80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80071b4:	4b89      	ldr	r3, [pc, #548]	; (80073dc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80071b6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80071ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071be:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 80071c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d165      	bne.n	8007292 <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 80071c6:	4b85      	ldr	r3, [pc, #532]	; (80073dc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80071c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80071cc:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80071d0:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 80071d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071d4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80071d8:	d034      	beq.n	8007244 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 80071da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071dc:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80071e0:	d853      	bhi.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 80071e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80071e8:	d00b      	beq.n	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 80071ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80071f0:	d84b      	bhi.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 80071f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d016      	beq.n	8007226 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 80071f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071fa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80071fe:	d009      	beq.n	8007214 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8007200:	e043      	b.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007202:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007206:	4618      	mov	r0, r3
 8007208:	f7ff fa16 	bl	8006638 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800720c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800720e:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8007210:	f000 bff4 	b.w	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007214:	f107 0318 	add.w	r3, r7, #24
 8007218:	4618      	mov	r0, r3
 800721a:	f7ff fb67 	bl	80068ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800721e:	69fb      	ldr	r3, [r7, #28]
 8007220:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8007222:	f000 bfeb 	b.w	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8007226:	4b6d      	ldr	r3, [pc, #436]	; (80073dc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800722e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007232:	d103      	bne.n	800723c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 8007234:	4b6a      	ldr	r3, [pc, #424]	; (80073e0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007236:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8007238:	f000 bfe0 	b.w	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = 0U;
 800723c:	2300      	movs	r3, #0
 800723e:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8007240:	f000 bfdc 	b.w	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007244:	4b65      	ldr	r3, [pc, #404]	; (80073dc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f003 0320 	and.w	r3, r3, #32
 800724c:	2b20      	cmp	r3, #32
 800724e:	d118      	bne.n	8007282 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007250:	4b62      	ldr	r3, [pc, #392]	; (80073dc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007252:	689b      	ldr	r3, [r3, #8]
 8007254:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007258:	2b00      	cmp	r3, #0
 800725a:	d005      	beq.n	8007268 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 800725c:	4b5f      	ldr	r3, [pc, #380]	; (80073dc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800725e:	689b      	ldr	r3, [r3, #8]
 8007260:	0e1b      	lsrs	r3, r3, #24
 8007262:	f003 030f 	and.w	r3, r3, #15
 8007266:	e006      	b.n	8007276 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8007268:	4b5c      	ldr	r3, [pc, #368]	; (80073dc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800726a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800726e:	041b      	lsls	r3, r3, #16
 8007270:	0e1b      	lsrs	r3, r3, #24
 8007272:	f003 030f 	and.w	r3, r3, #15
 8007276:	4a5b      	ldr	r2, [pc, #364]	; (80073e4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800727c:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800727e:	f000 bfbd 	b.w	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = 0U;
 8007282:	2300      	movs	r3, #0
 8007284:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8007286:	f000 bfb9 	b.w	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        default :
        {
          frequency = 0U;
 800728a:	2300      	movs	r3, #0
 800728c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800728e:	f000 bfb5 	b.w	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8007292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007294:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007298:	d108      	bne.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800729a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800729e:	4618      	mov	r0, r3
 80072a0:	f7ff f9ca 	bl	8006638 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 80072a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a6:	637b      	str	r3, [r7, #52]	; 0x34
 80072a8:	f000 bfa8 	b.w	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else
    {
      frequency = 0U;
 80072ac:	2300      	movs	r3, #0
 80072ae:	637b      	str	r3, [r7, #52]	; 0x34
 80072b0:	f000 bfa4 	b.w	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 80072b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072b8:	1e51      	subs	r1, r2, #1
 80072ba:	430b      	orrs	r3, r1
 80072bc:	d136      	bne.n	800732c <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80072be:	4b47      	ldr	r3, [pc, #284]	; (80073dc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80072c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80072c4:	f003 0303 	and.w	r3, r3, #3
 80072c8:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 80072ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d104      	bne.n	80072da <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 80072d0:	f7fe fb44 	bl	800595c <HAL_RCC_GetPCLK2Freq>
 80072d4:	6378      	str	r0, [r7, #52]	; 0x34
 80072d6:	f000 bf91 	b.w	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 80072da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072dc:	2b01      	cmp	r3, #1
 80072de:	d104      	bne.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80072e0:	f7fe fa0c 	bl	80056fc <HAL_RCC_GetSysClockFreq>
 80072e4:	6378      	str	r0, [r7, #52]	; 0x34
 80072e6:	f000 bf89 	b.w	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 80072ea:	4b3c      	ldr	r3, [pc, #240]	; (80073dc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072f6:	d106      	bne.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 80072f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072fa:	2b02      	cmp	r3, #2
 80072fc:	d103      	bne.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 80072fe:	4b3a      	ldr	r3, [pc, #232]	; (80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8007300:	637b      	str	r3, [r7, #52]	; 0x34
 8007302:	f000 bf7b 	b.w	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8007306:	4b35      	ldr	r3, [pc, #212]	; (80073dc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007308:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800730c:	f003 0302 	and.w	r3, r3, #2
 8007310:	2b02      	cmp	r3, #2
 8007312:	d107      	bne.n	8007324 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8007314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007316:	2b03      	cmp	r3, #3
 8007318:	d104      	bne.n	8007324 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 800731a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800731e:	637b      	str	r3, [r7, #52]	; 0x34
 8007320:	f000 bf6c 	b.w	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8007324:	2300      	movs	r3, #0
 8007326:	637b      	str	r3, [r7, #52]	; 0x34
 8007328:	f000 bf68 	b.w	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 800732c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007330:	1e91      	subs	r1, r2, #2
 8007332:	430b      	orrs	r3, r1
 8007334:	d136      	bne.n	80073a4 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8007336:	4b29      	ldr	r3, [pc, #164]	; (80073dc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007338:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800733c:	f003 030c 	and.w	r3, r3, #12
 8007340:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8007342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007344:	2b00      	cmp	r3, #0
 8007346:	d104      	bne.n	8007352 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007348:	f7fe faf4 	bl	8005934 <HAL_RCC_GetPCLK1Freq>
 800734c:	6378      	str	r0, [r7, #52]	; 0x34
 800734e:	f000 bf55 	b.w	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8007352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007354:	2b04      	cmp	r3, #4
 8007356:	d104      	bne.n	8007362 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007358:	f7fe f9d0 	bl	80056fc <HAL_RCC_GetSysClockFreq>
 800735c:	6378      	str	r0, [r7, #52]	; 0x34
 800735e:	f000 bf4d 	b.w	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8007362:	4b1e      	ldr	r3, [pc, #120]	; (80073dc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800736a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800736e:	d106      	bne.n	800737e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8007370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007372:	2b08      	cmp	r3, #8
 8007374:	d103      	bne.n	800737e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 8007376:	4b1c      	ldr	r3, [pc, #112]	; (80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8007378:	637b      	str	r3, [r7, #52]	; 0x34
 800737a:	f000 bf3f 	b.w	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800737e:	4b17      	ldr	r3, [pc, #92]	; (80073dc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007380:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007384:	f003 0302 	and.w	r3, r3, #2
 8007388:	2b02      	cmp	r3, #2
 800738a:	d107      	bne.n	800739c <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 800738c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800738e:	2b0c      	cmp	r3, #12
 8007390:	d104      	bne.n	800739c <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 8007392:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007396:	637b      	str	r3, [r7, #52]	; 0x34
 8007398:	f000 bf30 	b.w	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 800739c:	2300      	movs	r3, #0
 800739e:	637b      	str	r3, [r7, #52]	; 0x34
 80073a0:	f000 bf2c 	b.w	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 80073a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073a8:	1f11      	subs	r1, r2, #4
 80073aa:	430b      	orrs	r3, r1
 80073ac:	d13f      	bne.n	800742e <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80073ae:	4b0b      	ldr	r3, [pc, #44]	; (80073dc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80073b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80073b4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80073b8:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 80073ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d104      	bne.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80073c0:	f7fe fab8 	bl	8005934 <HAL_RCC_GetPCLK1Freq>
 80073c4:	6378      	str	r0, [r7, #52]	; 0x34
 80073c6:	f000 bf19 	b.w	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 80073ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073cc:	2b10      	cmp	r3, #16
 80073ce:	d10d      	bne.n	80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80073d0:	f7fe f994 	bl	80056fc <HAL_RCC_GetSysClockFreq>
 80073d4:	6378      	str	r0, [r7, #52]	; 0x34
 80073d6:	f000 bf11 	b.w	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 80073da:	bf00      	nop
 80073dc:	46020c00 	.word	0x46020c00
 80073e0:	02dc6c00 	.word	0x02dc6c00
 80073e4:	0800e46c 	.word	0x0800e46c
 80073e8:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80073ec:	4ba6      	ldr	r3, [pc, #664]	; (8007688 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80073f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073f8:	d106      	bne.n	8007408 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 80073fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073fc:	2b20      	cmp	r3, #32
 80073fe:	d103      	bne.n	8007408 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 8007400:	4ba2      	ldr	r3, [pc, #648]	; (800768c <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8007402:	637b      	str	r3, [r7, #52]	; 0x34
 8007404:	f000 befa 	b.w	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8007408:	4b9f      	ldr	r3, [pc, #636]	; (8007688 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800740a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800740e:	f003 0302 	and.w	r3, r3, #2
 8007412:	2b02      	cmp	r3, #2
 8007414:	d107      	bne.n	8007426 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8007416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007418:	2b30      	cmp	r3, #48	; 0x30
 800741a:	d104      	bne.n	8007426 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 800741c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007420:	637b      	str	r3, [r7, #52]	; 0x34
 8007422:	f000 beeb 	b.w	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8007426:	2300      	movs	r3, #0
 8007428:	637b      	str	r3, [r7, #52]	; 0x34
 800742a:	f000 bee7 	b.w	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 800742e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007432:	f1a2 0108 	sub.w	r1, r2, #8
 8007436:	430b      	orrs	r3, r1
 8007438:	d136      	bne.n	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800743a:	4b93      	ldr	r3, [pc, #588]	; (8007688 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800743c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007440:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007444:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8007446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007448:	2b00      	cmp	r3, #0
 800744a:	d104      	bne.n	8007456 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800744c:	f7fe fa72 	bl	8005934 <HAL_RCC_GetPCLK1Freq>
 8007450:	6378      	str	r0, [r7, #52]	; 0x34
 8007452:	f000 bed3 	b.w	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8007456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007458:	2b40      	cmp	r3, #64	; 0x40
 800745a:	d104      	bne.n	8007466 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800745c:	f7fe f94e 	bl	80056fc <HAL_RCC_GetSysClockFreq>
 8007460:	6378      	str	r0, [r7, #52]	; 0x34
 8007462:	f000 becb 	b.w	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8007466:	4b88      	ldr	r3, [pc, #544]	; (8007688 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800746e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007472:	d106      	bne.n	8007482 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 8007474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007476:	2b80      	cmp	r3, #128	; 0x80
 8007478:	d103      	bne.n	8007482 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 800747a:	4b84      	ldr	r3, [pc, #528]	; (800768c <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800747c:	637b      	str	r3, [r7, #52]	; 0x34
 800747e:	f000 bebd 	b.w	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8007482:	4b81      	ldr	r3, [pc, #516]	; (8007688 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007484:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007488:	f003 0302 	and.w	r3, r3, #2
 800748c:	2b02      	cmp	r3, #2
 800748e:	d107      	bne.n	80074a0 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8007490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007492:	2bc0      	cmp	r3, #192	; 0xc0
 8007494:	d104      	bne.n	80074a0 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 8007496:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800749a:	637b      	str	r3, [r7, #52]	; 0x34
 800749c:	f000 beae 	b.w	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 80074a0:	2300      	movs	r3, #0
 80074a2:	637b      	str	r3, [r7, #52]	; 0x34
 80074a4:	f000 beaa 	b.w	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 80074a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074ac:	f1a2 0110 	sub.w	r1, r2, #16
 80074b0:	430b      	orrs	r3, r1
 80074b2:	d139      	bne.n	8007528 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80074b4:	4b74      	ldr	r3, [pc, #464]	; (8007688 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80074b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80074ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074be:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 80074c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d104      	bne.n	80074d0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80074c6:	f7fe fa35 	bl	8005934 <HAL_RCC_GetPCLK1Freq>
 80074ca:	6378      	str	r0, [r7, #52]	; 0x34
 80074cc:	f000 be96 	b.w	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 80074d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074d6:	d104      	bne.n	80074e2 <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80074d8:	f7fe f910 	bl	80056fc <HAL_RCC_GetSysClockFreq>
 80074dc:	6378      	str	r0, [r7, #52]	; 0x34
 80074de:	f000 be8d 	b.w	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 80074e2:	4b69      	ldr	r3, [pc, #420]	; (8007688 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074ee:	d107      	bne.n	8007500 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 80074f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074f6:	d103      	bne.n	8007500 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 80074f8:	4b64      	ldr	r3, [pc, #400]	; (800768c <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80074fa:	637b      	str	r3, [r7, #52]	; 0x34
 80074fc:	f000 be7e 	b.w	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8007500:	4b61      	ldr	r3, [pc, #388]	; (8007688 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007502:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007506:	f003 0302 	and.w	r3, r3, #2
 800750a:	2b02      	cmp	r3, #2
 800750c:	d108      	bne.n	8007520 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 800750e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007510:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007514:	d104      	bne.n	8007520 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 8007516:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800751a:	637b      	str	r3, [r7, #52]	; 0x34
 800751c:	f000 be6e 	b.w	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8007520:	2300      	movs	r3, #0
 8007522:	637b      	str	r3, [r7, #52]	; 0x34
 8007524:	f000 be6a 	b.w	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8007528:	e9d7 2300 	ldrd	r2, r3, [r7]
 800752c:	f1a2 0120 	sub.w	r1, r2, #32
 8007530:	430b      	orrs	r3, r1
 8007532:	d158      	bne.n	80075e6 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8007534:	4b54      	ldr	r3, [pc, #336]	; (8007688 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007536:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800753a:	f003 0307 	and.w	r3, r3, #7
 800753e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8007540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007542:	2b00      	cmp	r3, #0
 8007544:	d104      	bne.n	8007550 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8007546:	f7fe fa1d 	bl	8005984 <HAL_RCC_GetPCLK3Freq>
 800754a:	6378      	str	r0, [r7, #52]	; 0x34
 800754c:	f000 be56 	b.w	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8007550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007552:	2b01      	cmp	r3, #1
 8007554:	d104      	bne.n	8007560 <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007556:	f7fe f8d1 	bl	80056fc <HAL_RCC_GetSysClockFreq>
 800755a:	6378      	str	r0, [r7, #52]	; 0x34
 800755c:	f000 be4e 	b.w	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8007560:	4b49      	ldr	r3, [pc, #292]	; (8007688 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007568:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800756c:	d106      	bne.n	800757c <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 800756e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007570:	2b02      	cmp	r3, #2
 8007572:	d103      	bne.n	800757c <HAL_RCCEx_GetPeriphCLKFreq+0x728>
    {
      frequency = HSI_VALUE;
 8007574:	4b45      	ldr	r3, [pc, #276]	; (800768c <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8007576:	637b      	str	r3, [r7, #52]	; 0x34
 8007578:	f000 be40 	b.w	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800757c:	4b42      	ldr	r3, [pc, #264]	; (8007688 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800757e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007582:	f003 0302 	and.w	r3, r3, #2
 8007586:	2b02      	cmp	r3, #2
 8007588:	d107      	bne.n	800759a <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 800758a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800758c:	2b03      	cmp	r3, #3
 800758e:	d104      	bne.n	800759a <HAL_RCCEx_GetPeriphCLKFreq+0x746>
    {
      frequency = LSE_VALUE;
 8007590:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007594:	637b      	str	r3, [r7, #52]	; 0x34
 8007596:	f000 be31 	b.w	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800759a:	4b3b      	ldr	r3, [pc, #236]	; (8007688 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f003 0320 	and.w	r3, r3, #32
 80075a2:	2b20      	cmp	r3, #32
 80075a4:	d11b      	bne.n	80075de <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
 80075a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075a8:	2b04      	cmp	r3, #4
 80075aa:	d118      	bne.n	80075de <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80075ac:	4b36      	ldr	r3, [pc, #216]	; (8007688 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80075ae:	689b      	ldr	r3, [r3, #8]
 80075b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d005      	beq.n	80075c4 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 80075b8:	4b33      	ldr	r3, [pc, #204]	; (8007688 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80075ba:	689b      	ldr	r3, [r3, #8]
 80075bc:	0e1b      	lsrs	r3, r3, #24
 80075be:	f003 030f 	and.w	r3, r3, #15
 80075c2:	e006      	b.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
 80075c4:	4b30      	ldr	r3, [pc, #192]	; (8007688 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80075c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80075ca:	041b      	lsls	r3, r3, #16
 80075cc:	0e1b      	lsrs	r3, r3, #24
 80075ce:	f003 030f 	and.w	r3, r3, #15
 80075d2:	4a2f      	ldr	r2, [pc, #188]	; (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80075d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075d8:	637b      	str	r3, [r7, #52]	; 0x34
 80075da:	f000 be0f 	b.w	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 80075de:	2300      	movs	r3, #0
 80075e0:	637b      	str	r3, [r7, #52]	; 0x34
 80075e2:	f000 be0b 	b.w	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 80075e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075ea:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 80075ee:	430b      	orrs	r3, r1
 80075f0:	d172      	bne.n	80076d8 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 80075f2:	4b25      	ldr	r3, [pc, #148]	; (8007688 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80075f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80075f8:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80075fc:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 80075fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007600:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007604:	d104      	bne.n	8007610 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007606:	f7fe f879 	bl	80056fc <HAL_RCC_GetSysClockFreq>
 800760a:	6378      	str	r0, [r7, #52]	; 0x34
 800760c:	f000 bdf6 	b.w	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8007610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007612:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007616:	d108      	bne.n	800762a <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007618:	f107 0318 	add.w	r3, r7, #24
 800761c:	4618      	mov	r0, r3
 800761e:	f7ff f965 	bl	80068ec <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8007622:	6a3b      	ldr	r3, [r7, #32]
 8007624:	637b      	str	r3, [r7, #52]	; 0x34
 8007626:	f000 bde9 	b.w	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800762a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800762c:	2b00      	cmp	r3, #0
 800762e:	d104      	bne.n	800763a <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8007630:	f7fe f966 	bl	8005900 <HAL_RCC_GetHCLKFreq>
 8007634:	6378      	str	r0, [r7, #52]	; 0x34
 8007636:	f000 bde1 	b.w	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800763a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800763c:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8007640:	d128      	bne.n	8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007642:	4b11      	ldr	r3, [pc, #68]	; (8007688 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f003 0320 	and.w	r3, r3, #32
 800764a:	2b20      	cmp	r3, #32
 800764c:	d118      	bne.n	8007680 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800764e:	4b0e      	ldr	r3, [pc, #56]	; (8007688 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007650:	689b      	ldr	r3, [r3, #8]
 8007652:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007656:	2b00      	cmp	r3, #0
 8007658:	d005      	beq.n	8007666 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 800765a:	4b0b      	ldr	r3, [pc, #44]	; (8007688 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800765c:	689b      	ldr	r3, [r3, #8]
 800765e:	0e1b      	lsrs	r3, r3, #24
 8007660:	f003 030f 	and.w	r3, r3, #15
 8007664:	e006      	b.n	8007674 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8007666:	4b08      	ldr	r3, [pc, #32]	; (8007688 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007668:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800766c:	041b      	lsls	r3, r3, #16
 800766e:	0e1b      	lsrs	r3, r3, #24
 8007670:	f003 030f 	and.w	r3, r3, #15
 8007674:	4a06      	ldr	r2, [pc, #24]	; (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007676:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800767a:	637b      	str	r3, [r7, #52]	; 0x34
 800767c:	f000 bdbe 	b.w	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 8007680:	2300      	movs	r3, #0
 8007682:	637b      	str	r3, [r7, #52]	; 0x34
 8007684:	f000 bdba 	b.w	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8007688:	46020c00 	.word	0x46020c00
 800768c:	00f42400 	.word	0x00f42400
 8007690:	0800e46c 	.word	0x0800e46c
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8007694:	4baf      	ldr	r3, [pc, #700]	; (8007954 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800769c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80076a0:	d107      	bne.n	80076b2 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
 80076a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076a4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80076a8:	d103      	bne.n	80076b2 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
    {
      frequency = HSE_VALUE;
 80076aa:	4bab      	ldr	r3, [pc, #684]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 80076ac:	637b      	str	r3, [r7, #52]	; 0x34
 80076ae:	f000 bda5 	b.w	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 80076b2:	4ba8      	ldr	r3, [pc, #672]	; (8007954 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076be:	d107      	bne.n	80076d0 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
 80076c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80076c6:	d103      	bne.n	80076d0 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
    {
      frequency = HSI_VALUE;
 80076c8:	4ba3      	ldr	r3, [pc, #652]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 80076ca:	637b      	str	r3, [r7, #52]	; 0x34
 80076cc:	f000 bd96 	b.w	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 80076d0:	2300      	movs	r3, #0
 80076d2:	637b      	str	r3, [r7, #52]	; 0x34
 80076d4:	f000 bd92 	b.w	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 80076d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076dc:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 80076e0:	430b      	orrs	r3, r1
 80076e2:	d158      	bne.n	8007796 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 80076e4:	4b9b      	ldr	r3, [pc, #620]	; (8007954 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80076e6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80076ea:	f003 0307 	and.w	r3, r3, #7
 80076ee:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80076f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076f2:	2b04      	cmp	r3, #4
 80076f4:	d84b      	bhi.n	800778e <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
 80076f6:	a201      	add	r2, pc, #4	; (adr r2, 80076fc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 80076f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076fc:	08007735 	.word	0x08007735
 8007700:	08007711 	.word	0x08007711
 8007704:	08007723 	.word	0x08007723
 8007708:	0800773f 	.word	0x0800773f
 800770c:	08007749 	.word	0x08007749
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007710:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007714:	4618      	mov	r0, r3
 8007716:	f7fe ff8f 	bl	8006638 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800771a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800771c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800771e:	f000 bd6d 	b.w	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007722:	f107 030c 	add.w	r3, r7, #12
 8007726:	4618      	mov	r0, r3
 8007728:	f7ff fa3a 	bl	8006ba0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800772c:	693b      	ldr	r3, [r7, #16]
 800772e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007730:	f000 bd64 	b.w	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8007734:	f7fe f8e4 	bl	8005900 <HAL_RCC_GetHCLKFreq>
 8007738:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800773a:	f000 bd5f 	b.w	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800773e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007742:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007744:	f000 bd5a 	b.w	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007748:	4b82      	ldr	r3, [pc, #520]	; (8007954 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f003 0320 	and.w	r3, r3, #32
 8007750:	2b20      	cmp	r3, #32
 8007752:	d118      	bne.n	8007786 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007754:	4b7f      	ldr	r3, [pc, #508]	; (8007954 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007756:	689b      	ldr	r3, [r3, #8]
 8007758:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800775c:	2b00      	cmp	r3, #0
 800775e:	d005      	beq.n	800776c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 8007760:	4b7c      	ldr	r3, [pc, #496]	; (8007954 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007762:	689b      	ldr	r3, [r3, #8]
 8007764:	0e1b      	lsrs	r3, r3, #24
 8007766:	f003 030f 	and.w	r3, r3, #15
 800776a:	e006      	b.n	800777a <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 800776c:	4b79      	ldr	r3, [pc, #484]	; (8007954 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800776e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007772:	041b      	lsls	r3, r3, #16
 8007774:	0e1b      	lsrs	r3, r3, #24
 8007776:	f003 030f 	and.w	r3, r3, #15
 800777a:	4a78      	ldr	r2, [pc, #480]	; (800795c <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 800777c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007780:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007782:	f000 bd3b 	b.w	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8007786:	2300      	movs	r3, #0
 8007788:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800778a:	f000 bd37 	b.w	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 800778e:	2300      	movs	r3, #0
 8007790:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007792:	f000 bd33 	b.w	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8007796:	e9d7 2300 	ldrd	r2, r3, [r7]
 800779a:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 800779e:	430b      	orrs	r3, r1
 80077a0:	d167      	bne.n	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 80077a2:	4b6c      	ldr	r3, [pc, #432]	; (8007954 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80077a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80077a8:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80077ac:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80077ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077b0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80077b4:	d036      	beq.n	8007824 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
 80077b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077b8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80077bc:	d855      	bhi.n	800786a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 80077be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077c0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80077c4:	d029      	beq.n	800781a <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
 80077c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077c8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80077cc:	d84d      	bhi.n	800786a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 80077ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80077d4:	d013      	beq.n	80077fe <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 80077d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80077dc:	d845      	bhi.n	800786a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 80077de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d015      	beq.n	8007810 <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
 80077e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077ea:	d13e      	bne.n	800786a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80077ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80077f0:	4618      	mov	r0, r3
 80077f2:	f7fe ff21 	bl	8006638 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80077f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80077fa:	f000 bcff 	b.w	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80077fe:	f107 030c 	add.w	r3, r7, #12
 8007802:	4618      	mov	r0, r3
 8007804:	f7ff f9cc 	bl	8006ba0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8007808:	693b      	ldr	r3, [r7, #16]
 800780a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800780c:	f000 bcf6 	b.w	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8007810:	f7fe f876 	bl	8005900 <HAL_RCC_GetHCLKFreq>
 8007814:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007816:	f000 bcf1 	b.w	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800781a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800781e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007820:	f000 bcec 	b.w	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007824:	4b4b      	ldr	r3, [pc, #300]	; (8007954 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f003 0320 	and.w	r3, r3, #32
 800782c:	2b20      	cmp	r3, #32
 800782e:	d118      	bne.n	8007862 <HAL_RCCEx_GetPeriphCLKFreq+0xa0e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007830:	4b48      	ldr	r3, [pc, #288]	; (8007954 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007832:	689b      	ldr	r3, [r3, #8]
 8007834:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007838:	2b00      	cmp	r3, #0
 800783a:	d005      	beq.n	8007848 <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
 800783c:	4b45      	ldr	r3, [pc, #276]	; (8007954 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800783e:	689b      	ldr	r3, [r3, #8]
 8007840:	0e1b      	lsrs	r3, r3, #24
 8007842:	f003 030f 	and.w	r3, r3, #15
 8007846:	e006      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8007848:	4b42      	ldr	r3, [pc, #264]	; (8007954 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800784a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800784e:	041b      	lsls	r3, r3, #16
 8007850:	0e1b      	lsrs	r3, r3, #24
 8007852:	f003 030f 	and.w	r3, r3, #15
 8007856:	4a41      	ldr	r2, [pc, #260]	; (800795c <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 8007858:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800785c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800785e:	f000 bccd 	b.w	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8007862:	2300      	movs	r3, #0
 8007864:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007866:	f000 bcc9 	b.w	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 800786a:	2300      	movs	r3, #0
 800786c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800786e:	f000 bcc5 	b.w	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8007872:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007876:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 800787a:	430b      	orrs	r3, r1
 800787c:	d14c      	bne.n	8007918 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800787e:	4b35      	ldr	r3, [pc, #212]	; (8007954 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007880:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007884:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007888:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800788a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800788c:	2b00      	cmp	r3, #0
 800788e:	d104      	bne.n	800789a <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007890:	f7fe f850 	bl	8005934 <HAL_RCC_GetPCLK1Freq>
 8007894:	6378      	str	r0, [r7, #52]	; 0x34
 8007896:	f000 bcb1 	b.w	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800789a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800789c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078a0:	d104      	bne.n	80078ac <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80078a2:	f7fd ff2b 	bl	80056fc <HAL_RCC_GetSysClockFreq>
 80078a6:	6378      	str	r0, [r7, #52]	; 0x34
 80078a8:	f000 bca8 	b.w	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 80078ac:	4b29      	ldr	r3, [pc, #164]	; (8007954 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078b8:	d107      	bne.n	80078ca <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 80078ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80078c0:	d103      	bne.n	80078ca <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
    {
      frequency = HSI_VALUE;
 80078c2:	4b25      	ldr	r3, [pc, #148]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 80078c4:	637b      	str	r3, [r7, #52]	; 0x34
 80078c6:	f000 bc99 	b.w	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 80078ca:	4b22      	ldr	r3, [pc, #136]	; (8007954 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f003 0320 	and.w	r3, r3, #32
 80078d2:	2b20      	cmp	r3, #32
 80078d4:	d11c      	bne.n	8007910 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
 80078d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078d8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80078dc:	d118      	bne.n	8007910 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80078de:	4b1d      	ldr	r3, [pc, #116]	; (8007954 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80078e0:	689b      	ldr	r3, [r3, #8]
 80078e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d005      	beq.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 80078ea:	4b1a      	ldr	r3, [pc, #104]	; (8007954 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80078ec:	689b      	ldr	r3, [r3, #8]
 80078ee:	0e1b      	lsrs	r3, r3, #24
 80078f0:	f003 030f 	and.w	r3, r3, #15
 80078f4:	e006      	b.n	8007904 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>
 80078f6:	4b17      	ldr	r3, [pc, #92]	; (8007954 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80078f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80078fc:	041b      	lsls	r3, r3, #16
 80078fe:	0e1b      	lsrs	r3, r3, #24
 8007900:	f003 030f 	and.w	r3, r3, #15
 8007904:	4a15      	ldr	r2, [pc, #84]	; (800795c <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 8007906:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800790a:	637b      	str	r3, [r7, #52]	; 0x34
 800790c:	f000 bc76 	b.w	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8007910:	2300      	movs	r3, #0
 8007912:	637b      	str	r3, [r7, #52]	; 0x34
 8007914:	f000 bc72 	b.w	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8007918:	e9d7 2300 	ldrd	r2, r3, [r7]
 800791c:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 8007920:	430b      	orrs	r3, r1
 8007922:	d153      	bne.n	80079cc <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8007924:	4b0b      	ldr	r3, [pc, #44]	; (8007954 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007926:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800792a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800792e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8007930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007932:	2b00      	cmp	r3, #0
 8007934:	d104      	bne.n	8007940 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007936:	f7fd fffd 	bl	8005934 <HAL_RCC_GetPCLK1Freq>
 800793a:	6378      	str	r0, [r7, #52]	; 0x34
 800793c:	f000 bc5e 	b.w	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8007940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007942:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007946:	d10b      	bne.n	8007960 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007948:	f7fd fed8 	bl	80056fc <HAL_RCC_GetSysClockFreq>
 800794c:	6378      	str	r0, [r7, #52]	; 0x34
 800794e:	f000 bc55 	b.w	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8007952:	bf00      	nop
 8007954:	46020c00 	.word	0x46020c00
 8007958:	00f42400 	.word	0x00f42400
 800795c:	0800e46c 	.word	0x0800e46c
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8007960:	4ba1      	ldr	r3, [pc, #644]	; (8007be8 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007968:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800796c:	d107      	bne.n	800797e <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
 800796e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007970:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007974:	d103      	bne.n	800797e <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
    {
      frequency = HSI_VALUE;
 8007976:	4b9d      	ldr	r3, [pc, #628]	; (8007bec <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8007978:	637b      	str	r3, [r7, #52]	; 0x34
 800797a:	f000 bc3f 	b.w	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800797e:	4b9a      	ldr	r3, [pc, #616]	; (8007be8 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f003 0320 	and.w	r3, r3, #32
 8007986:	2b20      	cmp	r3, #32
 8007988:	d11c      	bne.n	80079c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
 800798a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800798c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007990:	d118      	bne.n	80079c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007992:	4b95      	ldr	r3, [pc, #596]	; (8007be8 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007994:	689b      	ldr	r3, [r3, #8]
 8007996:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800799a:	2b00      	cmp	r3, #0
 800799c:	d005      	beq.n	80079aa <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
 800799e:	4b92      	ldr	r3, [pc, #584]	; (8007be8 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80079a0:	689b      	ldr	r3, [r3, #8]
 80079a2:	0e1b      	lsrs	r3, r3, #24
 80079a4:	f003 030f 	and.w	r3, r3, #15
 80079a8:	e006      	b.n	80079b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 80079aa:	4b8f      	ldr	r3, [pc, #572]	; (8007be8 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80079ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80079b0:	041b      	lsls	r3, r3, #16
 80079b2:	0e1b      	lsrs	r3, r3, #24
 80079b4:	f003 030f 	and.w	r3, r3, #15
 80079b8:	4a8d      	ldr	r2, [pc, #564]	; (8007bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 80079ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079be:	637b      	str	r3, [r7, #52]	; 0x34
 80079c0:	f000 bc1c 	b.w	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 80079c4:	2300      	movs	r3, #0
 80079c6:	637b      	str	r3, [r7, #52]	; 0x34
 80079c8:	f000 bc18 	b.w	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 80079cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80079d0:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 80079d4:	430b      	orrs	r3, r1
 80079d6:	d151      	bne.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0xc28>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80079d8:	4b83      	ldr	r3, [pc, #524]	; (8007be8 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80079da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80079de:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80079e2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80079e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079e6:	2bc0      	cmp	r3, #192	; 0xc0
 80079e8:	d024      	beq.n	8007a34 <HAL_RCCEx_GetPeriphCLKFreq+0xbe0>
 80079ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ec:	2bc0      	cmp	r3, #192	; 0xc0
 80079ee:	d842      	bhi.n	8007a76 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 80079f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079f2:	2b80      	cmp	r3, #128	; 0x80
 80079f4:	d00d      	beq.n	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
 80079f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079f8:	2b80      	cmp	r3, #128	; 0x80
 80079fa:	d83c      	bhi.n	8007a76 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 80079fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d003      	beq.n	8007a0a <HAL_RCCEx_GetPeriphCLKFreq+0xbb6>
 8007a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a04:	2b40      	cmp	r3, #64	; 0x40
 8007a06:	d011      	beq.n	8007a2c <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
 8007a08:	e035      	b.n	8007a76 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8007a0a:	f7fd ffbb 	bl	8005984 <HAL_RCC_GetPCLK3Freq>
 8007a0e:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007a10:	e3f4      	b.n	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007a12:	4b75      	ldr	r3, [pc, #468]	; (8007be8 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a1e:	d102      	bne.n	8007a26 <HAL_RCCEx_GetPeriphCLKFreq+0xbd2>
        {
          frequency = HSI_VALUE;
 8007a20:	4b72      	ldr	r3, [pc, #456]	; (8007bec <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8007a22:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007a24:	e3ea      	b.n	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8007a26:	2300      	movs	r3, #0
 8007a28:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a2a:	e3e7      	b.n	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8007a2c:	f7fd fe66 	bl	80056fc <HAL_RCC_GetSysClockFreq>
 8007a30:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007a32:	e3e3      	b.n	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007a34:	4b6c      	ldr	r3, [pc, #432]	; (8007be8 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f003 0320 	and.w	r3, r3, #32
 8007a3c:	2b20      	cmp	r3, #32
 8007a3e:	d117      	bne.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xc1c>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007a40:	4b69      	ldr	r3, [pc, #420]	; (8007be8 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007a42:	689b      	ldr	r3, [r3, #8]
 8007a44:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d005      	beq.n	8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
 8007a4c:	4b66      	ldr	r3, [pc, #408]	; (8007be8 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007a4e:	689b      	ldr	r3, [r3, #8]
 8007a50:	0e1b      	lsrs	r3, r3, #24
 8007a52:	f003 030f 	and.w	r3, r3, #15
 8007a56:	e006      	b.n	8007a66 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 8007a58:	4b63      	ldr	r3, [pc, #396]	; (8007be8 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007a5a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007a5e:	041b      	lsls	r3, r3, #16
 8007a60:	0e1b      	lsrs	r3, r3, #24
 8007a62:	f003 030f 	and.w	r3, r3, #15
 8007a66:	4a62      	ldr	r2, [pc, #392]	; (8007bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 8007a68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a6c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007a6e:	e3c5      	b.n	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8007a70:	2300      	movs	r3, #0
 8007a72:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a74:	e3c2      	b.n	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      default:
      {
        frequency = 0U;
 8007a76:	2300      	movs	r3, #0
 8007a78:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a7a:	e3bf      	b.n	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8007a7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a80:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 8007a84:	430b      	orrs	r3, r1
 8007a86:	d147      	bne.n	8007b18 <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8007a88:	4b57      	ldr	r3, [pc, #348]	; (8007be8 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007a8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007a8e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007a92:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8007a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d103      	bne.n	8007aa2 <HAL_RCCEx_GetPeriphCLKFreq+0xc4e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007a9a:	f7fd ff4b 	bl	8005934 <HAL_RCC_GetPCLK1Freq>
 8007a9e:	6378      	str	r0, [r7, #52]	; 0x34
 8007aa0:	e3ac      	b.n	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8007aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aa4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007aa8:	d103      	bne.n	8007ab2 <HAL_RCCEx_GetPeriphCLKFreq+0xc5e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007aaa:	f7fd fe27 	bl	80056fc <HAL_RCC_GetSysClockFreq>
 8007aae:	6378      	str	r0, [r7, #52]	; 0x34
 8007ab0:	e3a4      	b.n	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8007ab2:	4b4d      	ldr	r3, [pc, #308]	; (8007be8 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007aba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007abe:	d106      	bne.n	8007ace <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
 8007ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ac2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ac6:	d102      	bne.n	8007ace <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
    {
      frequency = HSI_VALUE;
 8007ac8:	4b48      	ldr	r3, [pc, #288]	; (8007bec <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8007aca:	637b      	str	r3, [r7, #52]	; 0x34
 8007acc:	e396      	b.n	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8007ace:	4b46      	ldr	r3, [pc, #280]	; (8007be8 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f003 0320 	and.w	r3, r3, #32
 8007ad6:	2b20      	cmp	r3, #32
 8007ad8:	d11b      	bne.n	8007b12 <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
 8007ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007adc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007ae0:	d117      	bne.n	8007b12 <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007ae2:	4b41      	ldr	r3, [pc, #260]	; (8007be8 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007ae4:	689b      	ldr	r3, [r3, #8]
 8007ae6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d005      	beq.n	8007afa <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
 8007aee:	4b3e      	ldr	r3, [pc, #248]	; (8007be8 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007af0:	689b      	ldr	r3, [r3, #8]
 8007af2:	0e1b      	lsrs	r3, r3, #24
 8007af4:	f003 030f 	and.w	r3, r3, #15
 8007af8:	e006      	b.n	8007b08 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
 8007afa:	4b3b      	ldr	r3, [pc, #236]	; (8007be8 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007afc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007b00:	041b      	lsls	r3, r3, #16
 8007b02:	0e1b      	lsrs	r3, r3, #24
 8007b04:	f003 030f 	and.w	r3, r3, #15
 8007b08:	4a39      	ldr	r2, [pc, #228]	; (8007bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 8007b0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b0e:	637b      	str	r3, [r7, #52]	; 0x34
 8007b10:	e374      	b.n	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8007b12:	2300      	movs	r3, #0
 8007b14:	637b      	str	r3, [r7, #52]	; 0x34
 8007b16:	e371      	b.n	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8007b18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b1c:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8007b20:	430b      	orrs	r3, r1
 8007b22:	d16a      	bne.n	8007bfa <HAL_RCCEx_GetPeriphCLKFreq+0xda6>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8007b24:	4b30      	ldr	r3, [pc, #192]	; (8007be8 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007b26:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007b2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b2e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8007b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d120      	bne.n	8007b78 <HAL_RCCEx_GetPeriphCLKFreq+0xd24>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007b36:	4b2c      	ldr	r3, [pc, #176]	; (8007be8 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f003 0320 	and.w	r3, r3, #32
 8007b3e:	2b20      	cmp	r3, #32
 8007b40:	d117      	bne.n	8007b72 <HAL_RCCEx_GetPeriphCLKFreq+0xd1e>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007b42:	4b29      	ldr	r3, [pc, #164]	; (8007be8 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007b44:	689b      	ldr	r3, [r3, #8]
 8007b46:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d005      	beq.n	8007b5a <HAL_RCCEx_GetPeriphCLKFreq+0xd06>
 8007b4e:	4b26      	ldr	r3, [pc, #152]	; (8007be8 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007b50:	689b      	ldr	r3, [r3, #8]
 8007b52:	0e1b      	lsrs	r3, r3, #24
 8007b54:	f003 030f 	and.w	r3, r3, #15
 8007b58:	e006      	b.n	8007b68 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 8007b5a:	4b23      	ldr	r3, [pc, #140]	; (8007be8 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007b5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007b60:	041b      	lsls	r3, r3, #16
 8007b62:	0e1b      	lsrs	r3, r3, #24
 8007b64:	f003 030f 	and.w	r3, r3, #15
 8007b68:	4a21      	ldr	r2, [pc, #132]	; (8007bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 8007b6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b6e:	637b      	str	r3, [r7, #52]	; 0x34
 8007b70:	e344      	b.n	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 8007b72:	2300      	movs	r3, #0
 8007b74:	637b      	str	r3, [r7, #52]	; 0x34
 8007b76:	e341      	b.n	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8007b78:	4b1b      	ldr	r3, [pc, #108]	; (8007be8 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007b7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007b7e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b82:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007b86:	d112      	bne.n	8007bae <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 8007b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b8e:	d10e      	bne.n	8007bae <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007b90:	4b15      	ldr	r3, [pc, #84]	; (8007be8 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007b92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007b96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b9a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007b9e:	d102      	bne.n	8007ba6 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
      {
        frequency = LSI_VALUE / 128U;
 8007ba0:	23fa      	movs	r3, #250	; 0xfa
 8007ba2:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007ba4:	e32a      	b.n	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8007ba6:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007baa:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007bac:	e326      	b.n	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8007bae:	4b0e      	ldr	r3, [pc, #56]	; (8007be8 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007bb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007bba:	d106      	bne.n	8007bca <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
 8007bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007bc2:	d102      	bne.n	8007bca <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
    {
      frequency = HSI_VALUE;
 8007bc4:	4b09      	ldr	r3, [pc, #36]	; (8007bec <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8007bc6:	637b      	str	r3, [r7, #52]	; 0x34
 8007bc8:	e318      	b.n	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8007bca:	4b07      	ldr	r3, [pc, #28]	; (8007be8 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007bcc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007bd0:	f003 0302 	and.w	r3, r3, #2
 8007bd4:	2b02      	cmp	r3, #2
 8007bd6:	d10d      	bne.n	8007bf4 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
 8007bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bda:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007bde:	d109      	bne.n	8007bf4 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
    {
      frequency = LSE_VALUE;
 8007be0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007be4:	637b      	str	r3, [r7, #52]	; 0x34
 8007be6:	e309      	b.n	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8007be8:	46020c00 	.word	0x46020c00
 8007bec:	00f42400 	.word	0x00f42400
 8007bf0:	0800e46c 	.word	0x0800e46c
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	637b      	str	r3, [r7, #52]	; 0x34
 8007bf8:	e300      	b.n	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8007bfa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007bfe:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8007c02:	430b      	orrs	r3, r1
 8007c04:	d164      	bne.n	8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0xe7c>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8007c06:	4ba2      	ldr	r3, [pc, #648]	; (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007c08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007c0c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007c10:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8007c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d120      	bne.n	8007c5a <HAL_RCCEx_GetPeriphCLKFreq+0xe06>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007c18:	4b9d      	ldr	r3, [pc, #628]	; (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f003 0320 	and.w	r3, r3, #32
 8007c20:	2b20      	cmp	r3, #32
 8007c22:	d117      	bne.n	8007c54 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007c24:	4b9a      	ldr	r3, [pc, #616]	; (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007c26:	689b      	ldr	r3, [r3, #8]
 8007c28:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d005      	beq.n	8007c3c <HAL_RCCEx_GetPeriphCLKFreq+0xde8>
 8007c30:	4b97      	ldr	r3, [pc, #604]	; (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007c32:	689b      	ldr	r3, [r3, #8]
 8007c34:	0e1b      	lsrs	r3, r3, #24
 8007c36:	f003 030f 	and.w	r3, r3, #15
 8007c3a:	e006      	b.n	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0xdf6>
 8007c3c:	4b94      	ldr	r3, [pc, #592]	; (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007c3e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007c42:	041b      	lsls	r3, r3, #16
 8007c44:	0e1b      	lsrs	r3, r3, #24
 8007c46:	f003 030f 	and.w	r3, r3, #15
 8007c4a:	4a92      	ldr	r2, [pc, #584]	; (8007e94 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 8007c4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c50:	637b      	str	r3, [r7, #52]	; 0x34
 8007c52:	e2d3      	b.n	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 8007c54:	2300      	movs	r3, #0
 8007c56:	637b      	str	r3, [r7, #52]	; 0x34
 8007c58:	e2d0      	b.n	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8007c5a:	4b8d      	ldr	r3, [pc, #564]	; (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007c5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007c60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c64:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007c68:	d112      	bne.n	8007c90 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
 8007c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c70:	d10e      	bne.n	8007c90 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007c72:	4b87      	ldr	r3, [pc, #540]	; (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007c74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007c78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c7c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c80:	d102      	bne.n	8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
      {
        frequency = LSI_VALUE / 128U;
 8007c82:	23fa      	movs	r3, #250	; 0xfa
 8007c84:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007c86:	e2b9      	b.n	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8007c88:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007c8c:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007c8e:	e2b5      	b.n	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8007c90:	4b7f      	ldr	r3, [pc, #508]	; (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c9c:	d106      	bne.n	8007cac <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
 8007c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ca0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ca4:	d102      	bne.n	8007cac <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
    {
      frequency = HSI_VALUE;
 8007ca6:	4b7c      	ldr	r3, [pc, #496]	; (8007e98 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8007ca8:	637b      	str	r3, [r7, #52]	; 0x34
 8007caa:	e2a7      	b.n	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8007cac:	4b78      	ldr	r3, [pc, #480]	; (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007cae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007cb2:	f003 0302 	and.w	r3, r3, #2
 8007cb6:	2b02      	cmp	r3, #2
 8007cb8:	d107      	bne.n	8007cca <HAL_RCCEx_GetPeriphCLKFreq+0xe76>
 8007cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cbc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007cc0:	d103      	bne.n	8007cca <HAL_RCCEx_GetPeriphCLKFreq+0xe76>
    {
      frequency = LSE_VALUE;
 8007cc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007cc6:	637b      	str	r3, [r7, #52]	; 0x34
 8007cc8:	e298      	b.n	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8007cca:	2300      	movs	r3, #0
 8007ccc:	637b      	str	r3, [r7, #52]	; 0x34
 8007cce:	e295      	b.n	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8007cd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007cd4:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8007cd8:	430b      	orrs	r3, r1
 8007cda:	d147      	bne.n	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0xf18>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8007cdc:	4b6c      	ldr	r3, [pc, #432]	; (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007cde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007ce2:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8007ce6:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8007ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d103      	bne.n	8007cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007cee:	f7fd fe21 	bl	8005934 <HAL_RCC_GetPCLK1Freq>
 8007cf2:	6378      	str	r0, [r7, #52]	; 0x34
 8007cf4:	e282      	b.n	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8007cf6:	4b66      	ldr	r3, [pc, #408]	; (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007cf8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007cfc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007d04:	d112      	bne.n	8007d2c <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
 8007d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d08:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007d0c:	d10e      	bne.n	8007d2c <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007d0e:	4b60      	ldr	r3, [pc, #384]	; (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007d10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007d14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d18:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d1c:	d102      	bne.n	8007d24 <HAL_RCCEx_GetPeriphCLKFreq+0xed0>
      {
        frequency = LSI_VALUE / 128U;
 8007d1e:	23fa      	movs	r3, #250	; 0xfa
 8007d20:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007d22:	e26b      	b.n	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8007d24:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007d28:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007d2a:	e267      	b.n	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8007d2c:	4b58      	ldr	r3, [pc, #352]	; (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d38:	d106      	bne.n	8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 8007d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d3c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007d40:	d102      	bne.n	8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
    {
      frequency = HSI_VALUE;
 8007d42:	4b55      	ldr	r3, [pc, #340]	; (8007e98 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8007d44:	637b      	str	r3, [r7, #52]	; 0x34
 8007d46:	e259      	b.n	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8007d48:	4b51      	ldr	r3, [pc, #324]	; (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007d4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007d4e:	f003 0302 	and.w	r3, r3, #2
 8007d52:	2b02      	cmp	r3, #2
 8007d54:	d107      	bne.n	8007d66 <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
 8007d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d58:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007d5c:	d103      	bne.n	8007d66 <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      frequency = LSE_VALUE;
 8007d5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d62:	637b      	str	r3, [r7, #52]	; 0x34
 8007d64:	e24a      	b.n	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8007d66:	2300      	movs	r3, #0
 8007d68:	637b      	str	r3, [r7, #52]	; 0x34
 8007d6a:	e247      	b.n	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8007d6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d70:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 8007d74:	430b      	orrs	r3, r1
 8007d76:	d12d      	bne.n	8007dd4 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8007d78:	4b45      	ldr	r3, [pc, #276]	; (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007d7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007d7e:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8007d82:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8007d84:	4b42      	ldr	r3, [pc, #264]	; (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d8c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007d90:	d105      	bne.n	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 8007d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d102      	bne.n	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
    {
      frequency = HSE_VALUE;
 8007d98:	4b3f      	ldr	r3, [pc, #252]	; (8007e98 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8007d9a:	637b      	str	r3, [r7, #52]	; 0x34
 8007d9c:	e22e      	b.n	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8007d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007da0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007da4:	d107      	bne.n	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007da6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007daa:	4618      	mov	r0, r3
 8007dac:	f7fe fc44 	bl	8006638 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8007db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007db2:	637b      	str	r3, [r7, #52]	; 0x34
 8007db4:	e222      	b.n	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8007db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007db8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007dbc:	d107      	bne.n	8007dce <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007dbe:	f107 0318 	add.w	r3, r7, #24
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	f7fe fd92 	bl	80068ec <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8007dc8:	69bb      	ldr	r3, [r7, #24]
 8007dca:	637b      	str	r3, [r7, #52]	; 0x34
 8007dcc:	e216      	b.n	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8007dce:	2300      	movs	r3, #0
 8007dd0:	637b      	str	r3, [r7, #52]	; 0x34
 8007dd2:	e213      	b.n	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8007dd4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007dd8:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 8007ddc:	430b      	orrs	r3, r1
 8007dde:	d15d      	bne.n	8007e9c <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8007de0:	4b2b      	ldr	r3, [pc, #172]	; (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007de2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007de6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007dea:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8007dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dee:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007df2:	d028      	beq.n	8007e46 <HAL_RCCEx_GetPeriphCLKFreq+0xff2>
 8007df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007df6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007dfa:	d845      	bhi.n	8007e88 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 8007dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dfe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007e02:	d013      	beq.n	8007e2c <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 8007e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e06:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007e0a:	d83d      	bhi.n	8007e88 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 8007e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d004      	beq.n	8007e1c <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>
 8007e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e18:	d004      	beq.n	8007e24 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
 8007e1a:	e035      	b.n	8007e88 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8007e1c:	f7fd fd9e 	bl	800595c <HAL_RCC_GetPCLK2Freq>
 8007e20:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007e22:	e1eb      	b.n	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007e24:	f7fd fc6a 	bl	80056fc <HAL_RCC_GetSysClockFreq>
 8007e28:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007e2a:	e1e7      	b.n	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007e2c:	4b18      	ldr	r3, [pc, #96]	; (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e38:	d102      	bne.n	8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>
        {
          frequency = HSI_VALUE;
 8007e3a:	4b17      	ldr	r3, [pc, #92]	; (8007e98 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8007e3c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007e3e:	e1dd      	b.n	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8007e40:	2300      	movs	r3, #0
 8007e42:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007e44:	e1da      	b.n	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007e46:	4b12      	ldr	r3, [pc, #72]	; (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f003 0320 	and.w	r3, r3, #32
 8007e4e:	2b20      	cmp	r3, #32
 8007e50:	d117      	bne.n	8007e82 <HAL_RCCEx_GetPeriphCLKFreq+0x102e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007e52:	4b0f      	ldr	r3, [pc, #60]	; (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007e54:	689b      	ldr	r3, [r3, #8]
 8007e56:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d005      	beq.n	8007e6a <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
 8007e5e:	4b0c      	ldr	r3, [pc, #48]	; (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007e60:	689b      	ldr	r3, [r3, #8]
 8007e62:	0e1b      	lsrs	r3, r3, #24
 8007e64:	f003 030f 	and.w	r3, r3, #15
 8007e68:	e006      	b.n	8007e78 <HAL_RCCEx_GetPeriphCLKFreq+0x1024>
 8007e6a:	4b09      	ldr	r3, [pc, #36]	; (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007e6c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007e70:	041b      	lsls	r3, r3, #16
 8007e72:	0e1b      	lsrs	r3, r3, #24
 8007e74:	f003 030f 	and.w	r3, r3, #15
 8007e78:	4a06      	ldr	r2, [pc, #24]	; (8007e94 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 8007e7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e7e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007e80:	e1bc      	b.n	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8007e82:	2300      	movs	r3, #0
 8007e84:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007e86:	e1b9      	b.n	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8007e88:	2300      	movs	r3, #0
 8007e8a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007e8c:	e1b6      	b.n	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8007e8e:	bf00      	nop
 8007e90:	46020c00 	.word	0x46020c00
 8007e94:	0800e46c 	.word	0x0800e46c
 8007e98:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8007e9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ea0:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 8007ea4:	430b      	orrs	r3, r1
 8007ea6:	d156      	bne.n	8007f56 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8007ea8:	4ba5      	ldr	r3, [pc, #660]	; (8008140 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007eaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007eae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007eb2:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8007eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eb6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007eba:	d028      	beq.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0x10ba>
 8007ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ebe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007ec2:	d845      	bhi.n	8007f50 <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
 8007ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ec6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007eca:	d013      	beq.n	8007ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x10a0>
 8007ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ece:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ed2:	d83d      	bhi.n	8007f50 <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
 8007ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d004      	beq.n	8007ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x1090>
 8007eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007edc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ee0:	d004      	beq.n	8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x1098>
 8007ee2:	e035      	b.n	8007f50 <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8007ee4:	f7fd fd26 	bl	8005934 <HAL_RCC_GetPCLK1Freq>
 8007ee8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007eea:	e187      	b.n	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007eec:	f7fd fc06 	bl	80056fc <HAL_RCC_GetSysClockFreq>
 8007ef0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007ef2:	e183      	b.n	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007ef4:	4b92      	ldr	r3, [pc, #584]	; (8008140 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007efc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f00:	d102      	bne.n	8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>
        {
          frequency = HSI_VALUE;
 8007f02:	4b90      	ldr	r3, [pc, #576]	; (8008144 <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 8007f04:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007f06:	e179      	b.n	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8007f08:	2300      	movs	r3, #0
 8007f0a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007f0c:	e176      	b.n	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007f0e:	4b8c      	ldr	r3, [pc, #560]	; (8008140 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f003 0320 	and.w	r3, r3, #32
 8007f16:	2b20      	cmp	r3, #32
 8007f18:	d117      	bne.n	8007f4a <HAL_RCCEx_GetPeriphCLKFreq+0x10f6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007f1a:	4b89      	ldr	r3, [pc, #548]	; (8008140 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007f1c:	689b      	ldr	r3, [r3, #8]
 8007f1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d005      	beq.n	8007f32 <HAL_RCCEx_GetPeriphCLKFreq+0x10de>
 8007f26:	4b86      	ldr	r3, [pc, #536]	; (8008140 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007f28:	689b      	ldr	r3, [r3, #8]
 8007f2a:	0e1b      	lsrs	r3, r3, #24
 8007f2c:	f003 030f 	and.w	r3, r3, #15
 8007f30:	e006      	b.n	8007f40 <HAL_RCCEx_GetPeriphCLKFreq+0x10ec>
 8007f32:	4b83      	ldr	r3, [pc, #524]	; (8008140 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007f34:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007f38:	041b      	lsls	r3, r3, #16
 8007f3a:	0e1b      	lsrs	r3, r3, #24
 8007f3c:	f003 030f 	and.w	r3, r3, #15
 8007f40:	4a81      	ldr	r2, [pc, #516]	; (8008148 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 8007f42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f46:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007f48:	e158      	b.n	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007f4e:	e155      	b.n	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8007f50:	2300      	movs	r3, #0
 8007f52:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007f54:	e152      	b.n	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8007f56:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f5a:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 8007f5e:	430b      	orrs	r3, r1
 8007f60:	d177      	bne.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8007f62:	4b77      	ldr	r3, [pc, #476]	; (8008140 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007f64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007f68:	f003 0318 	and.w	r3, r3, #24
 8007f6c:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8007f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f70:	2b18      	cmp	r3, #24
 8007f72:	d86b      	bhi.n	800804c <HAL_RCCEx_GetPeriphCLKFreq+0x11f8>
 8007f74:	a201      	add	r2, pc, #4	; (adr r2, 8007f7c <HAL_RCCEx_GetPeriphCLKFreq+0x1128>)
 8007f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f7a:	bf00      	nop
 8007f7c:	08007fe1 	.word	0x08007fe1
 8007f80:	0800804d 	.word	0x0800804d
 8007f84:	0800804d 	.word	0x0800804d
 8007f88:	0800804d 	.word	0x0800804d
 8007f8c:	0800804d 	.word	0x0800804d
 8007f90:	0800804d 	.word	0x0800804d
 8007f94:	0800804d 	.word	0x0800804d
 8007f98:	0800804d 	.word	0x0800804d
 8007f9c:	08007fe9 	.word	0x08007fe9
 8007fa0:	0800804d 	.word	0x0800804d
 8007fa4:	0800804d 	.word	0x0800804d
 8007fa8:	0800804d 	.word	0x0800804d
 8007fac:	0800804d 	.word	0x0800804d
 8007fb0:	0800804d 	.word	0x0800804d
 8007fb4:	0800804d 	.word	0x0800804d
 8007fb8:	0800804d 	.word	0x0800804d
 8007fbc:	08007ff1 	.word	0x08007ff1
 8007fc0:	0800804d 	.word	0x0800804d
 8007fc4:	0800804d 	.word	0x0800804d
 8007fc8:	0800804d 	.word	0x0800804d
 8007fcc:	0800804d 	.word	0x0800804d
 8007fd0:	0800804d 	.word	0x0800804d
 8007fd4:	0800804d 	.word	0x0800804d
 8007fd8:	0800804d 	.word	0x0800804d
 8007fdc:	0800800b 	.word	0x0800800b
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8007fe0:	f7fd fcd0 	bl	8005984 <HAL_RCC_GetPCLK3Freq>
 8007fe4:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007fe6:	e109      	b.n	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007fe8:	f7fd fb88 	bl	80056fc <HAL_RCC_GetSysClockFreq>
 8007fec:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007fee:	e105      	b.n	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007ff0:	4b53      	ldr	r3, [pc, #332]	; (8008140 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ff8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ffc:	d102      	bne.n	8008004 <HAL_RCCEx_GetPeriphCLKFreq+0x11b0>
        {
          frequency = HSI_VALUE;
 8007ffe:	4b51      	ldr	r3, [pc, #324]	; (8008144 <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 8008000:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008002:	e0fb      	b.n	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8008004:	2300      	movs	r3, #0
 8008006:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008008:	e0f8      	b.n	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800800a:	4b4d      	ldr	r3, [pc, #308]	; (8008140 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f003 0320 	and.w	r3, r3, #32
 8008012:	2b20      	cmp	r3, #32
 8008014:	d117      	bne.n	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0x11f2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008016:	4b4a      	ldr	r3, [pc, #296]	; (8008140 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008018:	689b      	ldr	r3, [r3, #8]
 800801a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800801e:	2b00      	cmp	r3, #0
 8008020:	d005      	beq.n	800802e <HAL_RCCEx_GetPeriphCLKFreq+0x11da>
 8008022:	4b47      	ldr	r3, [pc, #284]	; (8008140 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008024:	689b      	ldr	r3, [r3, #8]
 8008026:	0e1b      	lsrs	r3, r3, #24
 8008028:	f003 030f 	and.w	r3, r3, #15
 800802c:	e006      	b.n	800803c <HAL_RCCEx_GetPeriphCLKFreq+0x11e8>
 800802e:	4b44      	ldr	r3, [pc, #272]	; (8008140 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008030:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008034:	041b      	lsls	r3, r3, #16
 8008036:	0e1b      	lsrs	r3, r3, #24
 8008038:	f003 030f 	and.w	r3, r3, #15
 800803c:	4a42      	ldr	r2, [pc, #264]	; (8008148 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 800803e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008042:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008044:	e0da      	b.n	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8008046:	2300      	movs	r3, #0
 8008048:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800804a:	e0d7      	b.n	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 800804c:	2300      	movs	r3, #0
 800804e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008050:	e0d4      	b.n	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8008052:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008056:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 800805a:	430b      	orrs	r3, r1
 800805c:	d155      	bne.n	800810a <HAL_RCCEx_GetPeriphCLKFreq+0x12b6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800805e:	4b38      	ldr	r3, [pc, #224]	; (8008140 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008060:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008064:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8008068:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800806a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800806c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008070:	d013      	beq.n	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
 8008072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008074:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008078:	d844      	bhi.n	8008104 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
 800807a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800807c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008080:	d013      	beq.n	80080aa <HAL_RCCEx_GetPeriphCLKFreq+0x1256>
 8008082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008084:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008088:	d83c      	bhi.n	8008104 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
 800808a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800808c:	2b00      	cmp	r3, #0
 800808e:	d014      	beq.n	80080ba <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8008090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008092:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008096:	d014      	beq.n	80080c2 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
 8008098:	e034      	b.n	8008104 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800809a:	f107 0318 	add.w	r3, r7, #24
 800809e:	4618      	mov	r0, r3
 80080a0:	f7fe fc24 	bl	80068ec <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 80080a4:	69fb      	ldr	r3, [r7, #28]
 80080a6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80080a8:	e0a8      	b.n	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80080aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80080ae:	4618      	mov	r0, r3
 80080b0:	f7fe fac2 	bl	8006638 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 80080b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080b6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80080b8:	e0a0      	b.n	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80080ba:	f7fd fb1f 	bl	80056fc <HAL_RCC_GetSysClockFreq>
 80080be:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80080c0:	e09c      	b.n	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80080c2:	4b1f      	ldr	r3, [pc, #124]	; (8008140 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f003 0320 	and.w	r3, r3, #32
 80080ca:	2b20      	cmp	r3, #32
 80080cc:	d117      	bne.n	80080fe <HAL_RCCEx_GetPeriphCLKFreq+0x12aa>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80080ce:	4b1c      	ldr	r3, [pc, #112]	; (8008140 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80080d0:	689b      	ldr	r3, [r3, #8]
 80080d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d005      	beq.n	80080e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1292>
 80080da:	4b19      	ldr	r3, [pc, #100]	; (8008140 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80080dc:	689b      	ldr	r3, [r3, #8]
 80080de:	0e1b      	lsrs	r3, r3, #24
 80080e0:	f003 030f 	and.w	r3, r3, #15
 80080e4:	e006      	b.n	80080f4 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 80080e6:	4b16      	ldr	r3, [pc, #88]	; (8008140 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80080e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80080ec:	041b      	lsls	r3, r3, #16
 80080ee:	0e1b      	lsrs	r3, r3, #24
 80080f0:	f003 030f 	and.w	r3, r3, #15
 80080f4:	4a14      	ldr	r2, [pc, #80]	; (8008148 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 80080f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080fa:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80080fc:	e07e      	b.n	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80080fe:	2300      	movs	r3, #0
 8008100:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008102:	e07b      	b.n	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8008104:	2300      	movs	r3, #0
 8008106:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008108:	e078      	b.n	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800810a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800810e:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 8008112:	430b      	orrs	r3, r1
 8008114:	d138      	bne.n	8008188 <HAL_RCCEx_GetPeriphCLKFreq+0x1334>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8008116:	4b0a      	ldr	r3, [pc, #40]	; (8008140 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008118:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800811c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008120:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8008122:	4b07      	ldr	r3, [pc, #28]	; (8008140 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008124:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008128:	f003 0302 	and.w	r3, r3, #2
 800812c:	2b02      	cmp	r3, #2
 800812e:	d10d      	bne.n	800814c <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
 8008130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008132:	2b00      	cmp	r3, #0
 8008134:	d10a      	bne.n	800814c <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
    {
      frequency = LSE_VALUE;
 8008136:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800813a:	637b      	str	r3, [r7, #52]	; 0x34
 800813c:	e05e      	b.n	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 800813e:	bf00      	nop
 8008140:	46020c00 	.word	0x46020c00
 8008144:	00f42400 	.word	0x00f42400
 8008148:	0800e46c 	.word	0x0800e46c
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800814c:	4b2e      	ldr	r3, [pc, #184]	; (8008208 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 800814e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008152:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008156:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800815a:	d112      	bne.n	8008182 <HAL_RCCEx_GetPeriphCLKFreq+0x132e>
 800815c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800815e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008162:	d10e      	bne.n	8008182 <HAL_RCCEx_GetPeriphCLKFreq+0x132e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008164:	4b28      	ldr	r3, [pc, #160]	; (8008208 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8008166:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800816a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800816e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008172:	d102      	bne.n	800817a <HAL_RCCEx_GetPeriphCLKFreq+0x1326>
      {
        frequency = LSI_VALUE / 128U;
 8008174:	23fa      	movs	r3, #250	; 0xfa
 8008176:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008178:	e040      	b.n	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 800817a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800817e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008180:	e03c      	b.n	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8008182:	2300      	movs	r3, #0
 8008184:	637b      	str	r3, [r7, #52]	; 0x34
 8008186:	e039      	b.n	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8008188:	e9d7 2300 	ldrd	r2, r3, [r7]
 800818c:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8008190:	430b      	orrs	r3, r1
 8008192:	d131      	bne.n	80081f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a4>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8008194:	4b1c      	ldr	r3, [pc, #112]	; (8008208 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8008196:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800819a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800819e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 80081a0:	4b19      	ldr	r3, [pc, #100]	; (8008208 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80081a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081ac:	d105      	bne.n	80081ba <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
 80081ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d102      	bne.n	80081ba <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
    {
      frequency = HSI48_VALUE;
 80081b4:	4b15      	ldr	r3, [pc, #84]	; (800820c <HAL_RCCEx_GetPeriphCLKFreq+0x13b8>)
 80081b6:	637b      	str	r3, [r7, #52]	; 0x34
 80081b8:	e020      	b.n	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 80081ba:	4b13      	ldr	r3, [pc, #76]	; (8008208 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80081c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081c6:	d106      	bne.n	80081d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
 80081c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081ce:	d102      	bne.n	80081d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
    {
      frequency = HSI48_VALUE >> 1U ;
 80081d0:	4b0f      	ldr	r3, [pc, #60]	; (8008210 <HAL_RCCEx_GetPeriphCLKFreq+0x13bc>)
 80081d2:	637b      	str	r3, [r7, #52]	; 0x34
 80081d4:	e012      	b.n	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 80081d6:	4b0c      	ldr	r3, [pc, #48]	; (8008208 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80081de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081e2:	d106      	bne.n	80081f2 <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
 80081e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081ea:	d102      	bne.n	80081f2 <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
    {
      frequency = HSI_VALUE;
 80081ec:	4b09      	ldr	r3, [pc, #36]	; (8008214 <HAL_RCCEx_GetPeriphCLKFreq+0x13c0>)
 80081ee:	637b      	str	r3, [r7, #52]	; 0x34
 80081f0:	e004      	b.n	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 80081f2:	2300      	movs	r3, #0
 80081f4:	637b      	str	r3, [r7, #52]	; 0x34
 80081f6:	e001      	b.n	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 80081f8:	2300      	movs	r3, #0
 80081fa:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 80081fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80081fe:	4618      	mov	r0, r3
 8008200:	3738      	adds	r7, #56	; 0x38
 8008202:	46bd      	mov	sp, r7
 8008204:	bd80      	pop	{r7, pc}
 8008206:	bf00      	nop
 8008208:	46020c00 	.word	0x46020c00
 800820c:	02dc6c00 	.word	0x02dc6c00
 8008210:	016e3600 	.word	0x016e3600
 8008214:	00f42400 	.word	0x00f42400

08008218 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b084      	sub	sp, #16
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8008220:	4b47      	ldr	r3, [pc, #284]	; (8008340 <RCCEx_PLL2_Config+0x128>)
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	4a46      	ldr	r2, [pc, #280]	; (8008340 <RCCEx_PLL2_Config+0x128>)
 8008226:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800822a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800822c:	f7fb fc30 	bl	8003a90 <HAL_GetTick>
 8008230:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008232:	e008      	b.n	8008246 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008234:	f7fb fc2c 	bl	8003a90 <HAL_GetTick>
 8008238:	4602      	mov	r2, r0
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	1ad3      	subs	r3, r2, r3
 800823e:	2b02      	cmp	r3, #2
 8008240:	d901      	bls.n	8008246 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8008242:	2303      	movs	r3, #3
 8008244:	e077      	b.n	8008336 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008246:	4b3e      	ldr	r3, [pc, #248]	; (8008340 <RCCEx_PLL2_Config+0x128>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800824e:	2b00      	cmp	r3, #0
 8008250:	d1f0      	bne.n	8008234 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8008252:	4b3b      	ldr	r3, [pc, #236]	; (8008340 <RCCEx_PLL2_Config+0x128>)
 8008254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008256:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800825a:	f023 0303 	bic.w	r3, r3, #3
 800825e:	687a      	ldr	r2, [r7, #4]
 8008260:	6811      	ldr	r1, [r2, #0]
 8008262:	687a      	ldr	r2, [r7, #4]
 8008264:	6852      	ldr	r2, [r2, #4]
 8008266:	3a01      	subs	r2, #1
 8008268:	0212      	lsls	r2, r2, #8
 800826a:	430a      	orrs	r2, r1
 800826c:	4934      	ldr	r1, [pc, #208]	; (8008340 <RCCEx_PLL2_Config+0x128>)
 800826e:	4313      	orrs	r3, r2
 8008270:	62cb      	str	r3, [r1, #44]	; 0x2c
 8008272:	4b33      	ldr	r3, [pc, #204]	; (8008340 <RCCEx_PLL2_Config+0x128>)
 8008274:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008276:	4b33      	ldr	r3, [pc, #204]	; (8008344 <RCCEx_PLL2_Config+0x12c>)
 8008278:	4013      	ands	r3, r2
 800827a:	687a      	ldr	r2, [r7, #4]
 800827c:	6892      	ldr	r2, [r2, #8]
 800827e:	3a01      	subs	r2, #1
 8008280:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8008284:	687a      	ldr	r2, [r7, #4]
 8008286:	68d2      	ldr	r2, [r2, #12]
 8008288:	3a01      	subs	r2, #1
 800828a:	0252      	lsls	r2, r2, #9
 800828c:	b292      	uxth	r2, r2
 800828e:	4311      	orrs	r1, r2
 8008290:	687a      	ldr	r2, [r7, #4]
 8008292:	6912      	ldr	r2, [r2, #16]
 8008294:	3a01      	subs	r2, #1
 8008296:	0412      	lsls	r2, r2, #16
 8008298:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800829c:	4311      	orrs	r1, r2
 800829e:	687a      	ldr	r2, [r7, #4]
 80082a0:	6952      	ldr	r2, [r2, #20]
 80082a2:	3a01      	subs	r2, #1
 80082a4:	0612      	lsls	r2, r2, #24
 80082a6:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80082aa:	430a      	orrs	r2, r1
 80082ac:	4924      	ldr	r1, [pc, #144]	; (8008340 <RCCEx_PLL2_Config+0x128>)
 80082ae:	4313      	orrs	r3, r2
 80082b0:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 80082b2:	4b23      	ldr	r3, [pc, #140]	; (8008340 <RCCEx_PLL2_Config+0x128>)
 80082b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082b6:	f023 020c 	bic.w	r2, r3, #12
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	699b      	ldr	r3, [r3, #24]
 80082be:	4920      	ldr	r1, [pc, #128]	; (8008340 <RCCEx_PLL2_Config+0x128>)
 80082c0:	4313      	orrs	r3, r2
 80082c2:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 80082c4:	4b1e      	ldr	r3, [pc, #120]	; (8008340 <RCCEx_PLL2_Config+0x128>)
 80082c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6a1b      	ldr	r3, [r3, #32]
 80082cc:	491c      	ldr	r1, [pc, #112]	; (8008340 <RCCEx_PLL2_Config+0x128>)
 80082ce:	4313      	orrs	r3, r2
 80082d0:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 80082d2:	4b1b      	ldr	r3, [pc, #108]	; (8008340 <RCCEx_PLL2_Config+0x128>)
 80082d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082d6:	4a1a      	ldr	r2, [pc, #104]	; (8008340 <RCCEx_PLL2_Config+0x128>)
 80082d8:	f023 0310 	bic.w	r3, r3, #16
 80082dc:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80082de:	4b18      	ldr	r3, [pc, #96]	; (8008340 <RCCEx_PLL2_Config+0x128>)
 80082e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80082e6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80082ea:	687a      	ldr	r2, [r7, #4]
 80082ec:	69d2      	ldr	r2, [r2, #28]
 80082ee:	00d2      	lsls	r2, r2, #3
 80082f0:	4913      	ldr	r1, [pc, #76]	; (8008340 <RCCEx_PLL2_Config+0x128>)
 80082f2:	4313      	orrs	r3, r2
 80082f4:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 80082f6:	4b12      	ldr	r3, [pc, #72]	; (8008340 <RCCEx_PLL2_Config+0x128>)
 80082f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082fa:	4a11      	ldr	r2, [pc, #68]	; (8008340 <RCCEx_PLL2_Config+0x128>)
 80082fc:	f043 0310 	orr.w	r3, r3, #16
 8008300:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8008302:	4b0f      	ldr	r3, [pc, #60]	; (8008340 <RCCEx_PLL2_Config+0x128>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	4a0e      	ldr	r2, [pc, #56]	; (8008340 <RCCEx_PLL2_Config+0x128>)
 8008308:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800830c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800830e:	f7fb fbbf 	bl	8003a90 <HAL_GetTick>
 8008312:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008314:	e008      	b.n	8008328 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008316:	f7fb fbbb 	bl	8003a90 <HAL_GetTick>
 800831a:	4602      	mov	r2, r0
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	1ad3      	subs	r3, r2, r3
 8008320:	2b02      	cmp	r3, #2
 8008322:	d901      	bls.n	8008328 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8008324:	2303      	movs	r3, #3
 8008326:	e006      	b.n	8008336 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008328:	4b05      	ldr	r3, [pc, #20]	; (8008340 <RCCEx_PLL2_Config+0x128>)
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008330:	2b00      	cmp	r3, #0
 8008332:	d0f0      	beq.n	8008316 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8008334:	2300      	movs	r3, #0

}
 8008336:	4618      	mov	r0, r3
 8008338:	3710      	adds	r7, #16
 800833a:	46bd      	mov	sp, r7
 800833c:	bd80      	pop	{r7, pc}
 800833e:	bf00      	nop
 8008340:	46020c00 	.word	0x46020c00
 8008344:	80800000 	.word	0x80800000

08008348 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b084      	sub	sp, #16
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8008350:	4b47      	ldr	r3, [pc, #284]	; (8008470 <RCCEx_PLL3_Config+0x128>)
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4a46      	ldr	r2, [pc, #280]	; (8008470 <RCCEx_PLL3_Config+0x128>)
 8008356:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800835a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800835c:	f7fb fb98 	bl	8003a90 <HAL_GetTick>
 8008360:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008362:	e008      	b.n	8008376 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008364:	f7fb fb94 	bl	8003a90 <HAL_GetTick>
 8008368:	4602      	mov	r2, r0
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	1ad3      	subs	r3, r2, r3
 800836e:	2b02      	cmp	r3, #2
 8008370:	d901      	bls.n	8008376 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8008372:	2303      	movs	r3, #3
 8008374:	e077      	b.n	8008466 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008376:	4b3e      	ldr	r3, [pc, #248]	; (8008470 <RCCEx_PLL3_Config+0x128>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800837e:	2b00      	cmp	r3, #0
 8008380:	d1f0      	bne.n	8008364 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8008382:	4b3b      	ldr	r3, [pc, #236]	; (8008470 <RCCEx_PLL3_Config+0x128>)
 8008384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008386:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800838a:	f023 0303 	bic.w	r3, r3, #3
 800838e:	687a      	ldr	r2, [r7, #4]
 8008390:	6811      	ldr	r1, [r2, #0]
 8008392:	687a      	ldr	r2, [r7, #4]
 8008394:	6852      	ldr	r2, [r2, #4]
 8008396:	3a01      	subs	r2, #1
 8008398:	0212      	lsls	r2, r2, #8
 800839a:	430a      	orrs	r2, r1
 800839c:	4934      	ldr	r1, [pc, #208]	; (8008470 <RCCEx_PLL3_Config+0x128>)
 800839e:	4313      	orrs	r3, r2
 80083a0:	630b      	str	r3, [r1, #48]	; 0x30
 80083a2:	4b33      	ldr	r3, [pc, #204]	; (8008470 <RCCEx_PLL3_Config+0x128>)
 80083a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80083a6:	4b33      	ldr	r3, [pc, #204]	; (8008474 <RCCEx_PLL3_Config+0x12c>)
 80083a8:	4013      	ands	r3, r2
 80083aa:	687a      	ldr	r2, [r7, #4]
 80083ac:	6892      	ldr	r2, [r2, #8]
 80083ae:	3a01      	subs	r2, #1
 80083b0:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80083b4:	687a      	ldr	r2, [r7, #4]
 80083b6:	68d2      	ldr	r2, [r2, #12]
 80083b8:	3a01      	subs	r2, #1
 80083ba:	0252      	lsls	r2, r2, #9
 80083bc:	b292      	uxth	r2, r2
 80083be:	4311      	orrs	r1, r2
 80083c0:	687a      	ldr	r2, [r7, #4]
 80083c2:	6912      	ldr	r2, [r2, #16]
 80083c4:	3a01      	subs	r2, #1
 80083c6:	0412      	lsls	r2, r2, #16
 80083c8:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80083cc:	4311      	orrs	r1, r2
 80083ce:	687a      	ldr	r2, [r7, #4]
 80083d0:	6952      	ldr	r2, [r2, #20]
 80083d2:	3a01      	subs	r2, #1
 80083d4:	0612      	lsls	r2, r2, #24
 80083d6:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80083da:	430a      	orrs	r2, r1
 80083dc:	4924      	ldr	r1, [pc, #144]	; (8008470 <RCCEx_PLL3_Config+0x128>)
 80083de:	4313      	orrs	r3, r2
 80083e0:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 80083e2:	4b23      	ldr	r3, [pc, #140]	; (8008470 <RCCEx_PLL3_Config+0x128>)
 80083e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083e6:	f023 020c 	bic.w	r2, r3, #12
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	699b      	ldr	r3, [r3, #24]
 80083ee:	4920      	ldr	r1, [pc, #128]	; (8008470 <RCCEx_PLL3_Config+0x128>)
 80083f0:	4313      	orrs	r3, r2
 80083f2:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 80083f4:	4b1e      	ldr	r3, [pc, #120]	; (8008470 <RCCEx_PLL3_Config+0x128>)
 80083f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6a1b      	ldr	r3, [r3, #32]
 80083fc:	491c      	ldr	r1, [pc, #112]	; (8008470 <RCCEx_PLL3_Config+0x128>)
 80083fe:	4313      	orrs	r3, r2
 8008400:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8008402:	4b1b      	ldr	r3, [pc, #108]	; (8008470 <RCCEx_PLL3_Config+0x128>)
 8008404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008406:	4a1a      	ldr	r2, [pc, #104]	; (8008470 <RCCEx_PLL3_Config+0x128>)
 8008408:	f023 0310 	bic.w	r3, r3, #16
 800840c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800840e:	4b18      	ldr	r3, [pc, #96]	; (8008470 <RCCEx_PLL3_Config+0x128>)
 8008410:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008412:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008416:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800841a:	687a      	ldr	r2, [r7, #4]
 800841c:	69d2      	ldr	r2, [r2, #28]
 800841e:	00d2      	lsls	r2, r2, #3
 8008420:	4913      	ldr	r1, [pc, #76]	; (8008470 <RCCEx_PLL3_Config+0x128>)
 8008422:	4313      	orrs	r3, r2
 8008424:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8008426:	4b12      	ldr	r3, [pc, #72]	; (8008470 <RCCEx_PLL3_Config+0x128>)
 8008428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800842a:	4a11      	ldr	r2, [pc, #68]	; (8008470 <RCCEx_PLL3_Config+0x128>)
 800842c:	f043 0310 	orr.w	r3, r3, #16
 8008430:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8008432:	4b0f      	ldr	r3, [pc, #60]	; (8008470 <RCCEx_PLL3_Config+0x128>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	4a0e      	ldr	r2, [pc, #56]	; (8008470 <RCCEx_PLL3_Config+0x128>)
 8008438:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800843c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800843e:	f7fb fb27 	bl	8003a90 <HAL_GetTick>
 8008442:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008444:	e008      	b.n	8008458 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008446:	f7fb fb23 	bl	8003a90 <HAL_GetTick>
 800844a:	4602      	mov	r2, r0
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	1ad3      	subs	r3, r2, r3
 8008450:	2b02      	cmp	r3, #2
 8008452:	d901      	bls.n	8008458 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8008454:	2303      	movs	r3, #3
 8008456:	e006      	b.n	8008466 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008458:	4b05      	ldr	r3, [pc, #20]	; (8008470 <RCCEx_PLL3_Config+0x128>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008460:	2b00      	cmp	r3, #0
 8008462:	d0f0      	beq.n	8008446 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8008464:	2300      	movs	r3, #0
}
 8008466:	4618      	mov	r0, r3
 8008468:	3710      	adds	r7, #16
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}
 800846e:	bf00      	nop
 8008470:	46020c00 	.word	0x46020c00
 8008474:	80800000 	.word	0x80800000

08008478 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b082      	sub	sp, #8
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d101      	bne.n	800848a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008486:	2301      	movs	r3, #1
 8008488:	e042      	b.n	8008510 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008490:	2b00      	cmp	r3, #0
 8008492:	d106      	bne.n	80084a2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2200      	movs	r2, #0
 8008498:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f002 fa69 	bl	800a974 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2224      	movs	r2, #36	; 0x24
 80084a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	681a      	ldr	r2, [r3, #0]
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f022 0201 	bic.w	r2, r2, #1
 80084b8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d002      	beq.n	80084c8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f000 fdaa 	bl	800901c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	f000 fc05 	bl	8008cd8 <UART_SetConfig>
 80084ce:	4603      	mov	r3, r0
 80084d0:	2b01      	cmp	r3, #1
 80084d2:	d101      	bne.n	80084d8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80084d4:	2301      	movs	r3, #1
 80084d6:	e01b      	b.n	8008510 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	685a      	ldr	r2, [r3, #4]
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80084e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	689a      	ldr	r2, [r3, #8]
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80084f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	681a      	ldr	r2, [r3, #0]
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f042 0201 	orr.w	r2, r2, #1
 8008506:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	f000 fe29 	bl	8009160 <UART_CheckIdleState>
 800850e:	4603      	mov	r3, r0
}
 8008510:	4618      	mov	r0, r3
 8008512:	3708      	adds	r7, #8
 8008514:	46bd      	mov	sp, r7
 8008516:	bd80      	pop	{r7, pc}

08008518 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b08a      	sub	sp, #40	; 0x28
 800851c:	af02      	add	r7, sp, #8
 800851e:	60f8      	str	r0, [r7, #12]
 8008520:	60b9      	str	r1, [r7, #8]
 8008522:	603b      	str	r3, [r7, #0]
 8008524:	4613      	mov	r3, r2
 8008526:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800852e:	2b20      	cmp	r3, #32
 8008530:	f040 808b 	bne.w	800864a <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8008534:	68bb      	ldr	r3, [r7, #8]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d002      	beq.n	8008540 <HAL_UART_Transmit+0x28>
 800853a:	88fb      	ldrh	r3, [r7, #6]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d101      	bne.n	8008544 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008540:	2301      	movs	r3, #1
 8008542:	e083      	b.n	800864c <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	689b      	ldr	r3, [r3, #8]
 800854a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800854e:	2b80      	cmp	r3, #128	; 0x80
 8008550:	d107      	bne.n	8008562 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	689a      	ldr	r2, [r3, #8]
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008560:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	2200      	movs	r2, #0
 8008566:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	2221      	movs	r2, #33	; 0x21
 800856e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008572:	f7fb fa8d 	bl	8003a90 <HAL_GetTick>
 8008576:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	88fa      	ldrh	r2, [r7, #6]
 800857c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	88fa      	ldrh	r2, [r7, #6]
 8008584:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	689b      	ldr	r3, [r3, #8]
 800858c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008590:	d108      	bne.n	80085a4 <HAL_UART_Transmit+0x8c>
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	691b      	ldr	r3, [r3, #16]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d104      	bne.n	80085a4 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 800859a:	2300      	movs	r3, #0
 800859c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800859e:	68bb      	ldr	r3, [r7, #8]
 80085a0:	61bb      	str	r3, [r7, #24]
 80085a2:	e003      	b.n	80085ac <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80085a8:	2300      	movs	r3, #0
 80085aa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80085ac:	e030      	b.n	8008610 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	9300      	str	r3, [sp, #0]
 80085b2:	697b      	ldr	r3, [r7, #20]
 80085b4:	2200      	movs	r2, #0
 80085b6:	2180      	movs	r1, #128	; 0x80
 80085b8:	68f8      	ldr	r0, [r7, #12]
 80085ba:	f000 fe7b 	bl	80092b4 <UART_WaitOnFlagUntilTimeout>
 80085be:	4603      	mov	r3, r0
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d005      	beq.n	80085d0 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	2220      	movs	r2, #32
 80085c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80085cc:	2303      	movs	r3, #3
 80085ce:	e03d      	b.n	800864c <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 80085d0:	69fb      	ldr	r3, [r7, #28]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d10b      	bne.n	80085ee <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80085d6:	69bb      	ldr	r3, [r7, #24]
 80085d8:	881b      	ldrh	r3, [r3, #0]
 80085da:	461a      	mov	r2, r3
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80085e4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80085e6:	69bb      	ldr	r3, [r7, #24]
 80085e8:	3302      	adds	r3, #2
 80085ea:	61bb      	str	r3, [r7, #24]
 80085ec:	e007      	b.n	80085fe <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80085ee:	69fb      	ldr	r3, [r7, #28]
 80085f0:	781a      	ldrb	r2, [r3, #0]
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80085f8:	69fb      	ldr	r3, [r7, #28]
 80085fa:	3301      	adds	r3, #1
 80085fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008604:	b29b      	uxth	r3, r3
 8008606:	3b01      	subs	r3, #1
 8008608:	b29a      	uxth	r2, r3
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008616:	b29b      	uxth	r3, r3
 8008618:	2b00      	cmp	r3, #0
 800861a:	d1c8      	bne.n	80085ae <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	9300      	str	r3, [sp, #0]
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	2200      	movs	r2, #0
 8008624:	2140      	movs	r1, #64	; 0x40
 8008626:	68f8      	ldr	r0, [r7, #12]
 8008628:	f000 fe44 	bl	80092b4 <UART_WaitOnFlagUntilTimeout>
 800862c:	4603      	mov	r3, r0
 800862e:	2b00      	cmp	r3, #0
 8008630:	d005      	beq.n	800863e <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	2220      	movs	r2, #32
 8008636:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800863a:	2303      	movs	r3, #3
 800863c:	e006      	b.n	800864c <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	2220      	movs	r2, #32
 8008642:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8008646:	2300      	movs	r3, #0
 8008648:	e000      	b.n	800864c <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 800864a:	2302      	movs	r3, #2
  }
}
 800864c:	4618      	mov	r0, r3
 800864e:	3720      	adds	r7, #32
 8008650:	46bd      	mov	sp, r7
 8008652:	bd80      	pop	{r7, pc}

08008654 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b08a      	sub	sp, #40	; 0x28
 8008658:	af00      	add	r7, sp, #0
 800865a:	60f8      	str	r0, [r7, #12]
 800865c:	60b9      	str	r1, [r7, #8]
 800865e:	4613      	mov	r3, r2
 8008660:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008668:	2b20      	cmp	r3, #32
 800866a:	d14b      	bne.n	8008704 <HAL_UART_Receive_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d002      	beq.n	8008678 <HAL_UART_Receive_IT+0x24>
 8008672:	88fb      	ldrh	r3, [r7, #6]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d101      	bne.n	800867c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008678:	2301      	movs	r3, #1
 800867a:	e044      	b.n	8008706 <HAL_UART_Receive_IT+0xb2>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	2200      	movs	r2, #0
 8008680:	66da      	str	r2, [r3, #108]	; 0x6c

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Rx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	689b      	ldr	r3, [r3, #8]
 8008688:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800868c:	2b40      	cmp	r3, #64	; 0x40
 800868e:	d107      	bne.n	80086a0 <HAL_UART_Receive_IT+0x4c>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	689a      	ldr	r2, [r3, #8]
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800869e:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	4a1a      	ldr	r2, [pc, #104]	; (8008710 <HAL_UART_Receive_IT+0xbc>)
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d024      	beq.n	80086f4 <HAL_UART_Receive_IT+0xa0>
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	4a19      	ldr	r2, [pc, #100]	; (8008714 <HAL_UART_Receive_IT+0xc0>)
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d01f      	beq.n	80086f4 <HAL_UART_Receive_IT+0xa0>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	685b      	ldr	r3, [r3, #4]
 80086ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d018      	beq.n	80086f4 <HAL_UART_Receive_IT+0xa0>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086c8:	697b      	ldr	r3, [r7, #20]
 80086ca:	e853 3f00 	ldrex	r3, [r3]
 80086ce:	613b      	str	r3, [r7, #16]
   return(result);
 80086d0:	693b      	ldr	r3, [r7, #16]
 80086d2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80086d6:	627b      	str	r3, [r7, #36]	; 0x24
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	461a      	mov	r2, r3
 80086de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086e0:	623b      	str	r3, [r7, #32]
 80086e2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086e4:	69f9      	ldr	r1, [r7, #28]
 80086e6:	6a3a      	ldr	r2, [r7, #32]
 80086e8:	e841 2300 	strex	r3, r2, [r1]
 80086ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80086ee:	69bb      	ldr	r3, [r7, #24]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d1e6      	bne.n	80086c2 <HAL_UART_Receive_IT+0x6e>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80086f4:	88fb      	ldrh	r3, [r7, #6]
 80086f6:	461a      	mov	r2, r3
 80086f8:	68b9      	ldr	r1, [r7, #8]
 80086fa:	68f8      	ldr	r0, [r7, #12]
 80086fc:	f000 fe42 	bl	8009384 <UART_Start_Receive_IT>
 8008700:	4603      	mov	r3, r0
 8008702:	e000      	b.n	8008706 <HAL_UART_Receive_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8008704:	2302      	movs	r3, #2
  }
}
 8008706:	4618      	mov	r0, r3
 8008708:	3728      	adds	r7, #40	; 0x28
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}
 800870e:	bf00      	nop
 8008710:	46002400 	.word	0x46002400
 8008714:	56002400 	.word	0x56002400

08008718 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b0ae      	sub	sp, #184	; 0xb8
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	69db      	ldr	r3, [r3, #28]
 8008726:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	689b      	ldr	r3, [r3, #8]
 800873a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800873e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008742:	f640 030f 	movw	r3, #2063	; 0x80f
 8008746:	4013      	ands	r3, r2
 8008748:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (errorflags == 0U)
 800874c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008750:	2b00      	cmp	r3, #0
 8008752:	d11b      	bne.n	800878c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008754:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008758:	f003 0320 	and.w	r3, r3, #32
 800875c:	2b00      	cmp	r3, #0
 800875e:	d015      	beq.n	800878c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008760:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008764:	f003 0320 	and.w	r3, r3, #32
 8008768:	2b00      	cmp	r3, #0
 800876a:	d105      	bne.n	8008778 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800876c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008770:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008774:	2b00      	cmp	r3, #0
 8008776:	d009      	beq.n	800878c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800877c:	2b00      	cmp	r3, #0
 800877e:	f000 827e 	beq.w	8008c7e <HAL_UART_IRQHandler+0x566>
      {
        huart->RxISR(huart);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008786:	6878      	ldr	r0, [r7, #4]
 8008788:	4798      	blx	r3
      }
      return;
 800878a:	e278      	b.n	8008c7e <HAL_UART_IRQHandler+0x566>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800878c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008790:	2b00      	cmp	r3, #0
 8008792:	f000 80fd 	beq.w	8008990 <HAL_UART_IRQHandler+0x278>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008796:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800879a:	4b7a      	ldr	r3, [pc, #488]	; (8008984 <HAL_UART_IRQHandler+0x26c>)
 800879c:	4013      	ands	r3, r2
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d106      	bne.n	80087b0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80087a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80087a6:	4b78      	ldr	r3, [pc, #480]	; (8008988 <HAL_UART_IRQHandler+0x270>)
 80087a8:	4013      	ands	r3, r2
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	f000 80f0 	beq.w	8008990 <HAL_UART_IRQHandler+0x278>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80087b0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80087b4:	f003 0301 	and.w	r3, r3, #1
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d011      	beq.n	80087e0 <HAL_UART_IRQHandler+0xc8>
 80087bc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80087c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d00b      	beq.n	80087e0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	2201      	movs	r2, #1
 80087ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087d6:	f043 0201 	orr.w	r2, r3, #1
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80087e0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80087e4:	f003 0302 	and.w	r3, r3, #2
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d011      	beq.n	8008810 <HAL_UART_IRQHandler+0xf8>
 80087ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80087f0:	f003 0301 	and.w	r3, r3, #1
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d00b      	beq.n	8008810 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	2202      	movs	r2, #2
 80087fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008806:	f043 0204 	orr.w	r2, r3, #4
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008810:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008814:	f003 0304 	and.w	r3, r3, #4
 8008818:	2b00      	cmp	r3, #0
 800881a:	d011      	beq.n	8008840 <HAL_UART_IRQHandler+0x128>
 800881c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008820:	f003 0301 	and.w	r3, r3, #1
 8008824:	2b00      	cmp	r3, #0
 8008826:	d00b      	beq.n	8008840 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	2204      	movs	r2, #4
 800882e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008836:	f043 0202 	orr.w	r2, r3, #2
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008840:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008844:	f003 0308 	and.w	r3, r3, #8
 8008848:	2b00      	cmp	r3, #0
 800884a:	d017      	beq.n	800887c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800884c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008850:	f003 0320 	and.w	r3, r3, #32
 8008854:	2b00      	cmp	r3, #0
 8008856:	d105      	bne.n	8008864 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008858:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800885c:	4b49      	ldr	r3, [pc, #292]	; (8008984 <HAL_UART_IRQHandler+0x26c>)
 800885e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008860:	2b00      	cmp	r3, #0
 8008862:	d00b      	beq.n	800887c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	2208      	movs	r2, #8
 800886a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008872:	f043 0208 	orr.w	r2, r3, #8
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800887c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008880:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008884:	2b00      	cmp	r3, #0
 8008886:	d012      	beq.n	80088ae <HAL_UART_IRQHandler+0x196>
 8008888:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800888c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008890:	2b00      	cmp	r3, #0
 8008892:	d00c      	beq.n	80088ae <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800889c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088a4:	f043 0220 	orr.w	r2, r3, #32
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	f000 81e4 	beq.w	8008c82 <HAL_UART_IRQHandler+0x56a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80088ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80088be:	f003 0320 	and.w	r3, r3, #32
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d013      	beq.n	80088ee <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80088c6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80088ca:	f003 0320 	and.w	r3, r3, #32
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d105      	bne.n	80088de <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80088d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80088d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d007      	beq.n	80088ee <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d003      	beq.n	80088ee <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	689b      	ldr	r3, [r3, #8]
 80088fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008902:	2b40      	cmp	r3, #64	; 0x40
 8008904:	d005      	beq.n	8008912 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008906:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800890a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800890e:	2b00      	cmp	r3, #0
 8008910:	d02e      	beq.n	8008970 <HAL_UART_IRQHandler+0x258>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f000 fe58 	bl	80095c8 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	689b      	ldr	r3, [r3, #8]
 800891e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008922:	2b40      	cmp	r3, #64	; 0x40
 8008924:	d120      	bne.n	8008968 <HAL_UART_IRQHandler+0x250>
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800892c:	2b00      	cmp	r3, #0
 800892e:	d017      	beq.n	8008960 <HAL_UART_IRQHandler+0x248>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008936:	4a15      	ldr	r2, [pc, #84]	; (800898c <HAL_UART_IRQHandler+0x274>)
 8008938:	66da      	str	r2, [r3, #108]	; 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008940:	4618      	mov	r0, r3
 8008942:	f7fb fa60 	bl	8003e06 <HAL_DMA_Abort_IT>
 8008946:	4603      	mov	r3, r0
 8008948:	2b00      	cmp	r3, #0
 800894a:	d019      	beq.n	8008980 <HAL_UART_IRQHandler+0x268>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008952:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008954:	687a      	ldr	r2, [r7, #4]
 8008956:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800895a:	4610      	mov	r0, r2
 800895c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800895e:	e00f      	b.n	8008980 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	f000 f9a3 	bl	8008cac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008966:	e00b      	b.n	8008980 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	f000 f99f 	bl	8008cac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800896e:	e007      	b.n	8008980 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f000 f99b 	bl	8008cac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2200      	movs	r2, #0
 800897a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800897e:	e180      	b.n	8008c82 <HAL_UART_IRQHandler+0x56a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008980:	bf00      	nop
    return;
 8008982:	e17e      	b.n	8008c82 <HAL_UART_IRQHandler+0x56a>
 8008984:	10000001 	.word	0x10000001
 8008988:	04000120 	.word	0x04000120
 800898c:	08009695 	.word	0x08009695

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008994:	2b01      	cmp	r3, #1
 8008996:	f040 8129 	bne.w	8008bec <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800899a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800899e:	f003 0310 	and.w	r3, r3, #16
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	f000 8122 	beq.w	8008bec <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80089a8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80089ac:	f003 0310 	and.w	r3, r3, #16
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	f000 811b 	beq.w	8008bec <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	2210      	movs	r2, #16
 80089bc:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	689b      	ldr	r3, [r3, #8]
 80089c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089c8:	2b40      	cmp	r3, #64	; 0x40
 80089ca:	f040 8091 	bne.w	8008af0 <HAL_UART_IRQHandler+0x3d8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80089d8:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
      if ((nb_remaining_rx_data > 0U)
 80089dc:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	f000 8150 	beq.w	8008c86 <HAL_UART_IRQHandler+0x56e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80089ec:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 80089f0:	429a      	cmp	r2, r3
 80089f2:	f080 8148 	bcs.w	8008c86 <HAL_UART_IRQHandler+0x56e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 80089fc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a08:	2b81      	cmp	r3, #129	; 0x81
 8008a0a:	d060      	beq.n	8008ace <HAL_UART_IRQHandler+0x3b6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a14:	e853 3f00 	ldrex	r3, [r3]
 8008a18:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008a1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008a1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008a20:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	461a      	mov	r2, r3
 8008a2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008a2e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008a32:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a34:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008a36:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008a3a:	e841 2300 	strex	r3, r2, [r1]
 8008a3e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008a40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d1e2      	bne.n	8008a0c <HAL_UART_IRQHandler+0x2f4>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	3308      	adds	r3, #8
 8008a4c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008a50:	e853 3f00 	ldrex	r3, [r3]
 8008a54:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008a56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008a58:	f023 0301 	bic.w	r3, r3, #1
 8008a5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	3308      	adds	r3, #8
 8008a66:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008a6a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008a6c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a6e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008a70:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008a72:	e841 2300 	strex	r3, r2, [r1]
 8008a76:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008a78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d1e3      	bne.n	8008a46 <HAL_UART_IRQHandler+0x32e>
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	2220      	movs	r2, #32
 8008a82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	2200      	movs	r2, #0
 8008a8a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a94:	e853 3f00 	ldrex	r3, [r3]
 8008a98:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008a9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a9c:	f023 0310 	bic.w	r3, r3, #16
 8008aa0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	461a      	mov	r2, r3
 8008aaa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008aae:	65bb      	str	r3, [r7, #88]	; 0x58
 8008ab0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ab2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008ab4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008ab6:	e841 2300 	strex	r3, r2, [r1]
 8008aba:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008abc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d1e4      	bne.n	8008a8c <HAL_UART_IRQHandler+0x374>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008ac8:	4618      	mov	r0, r3
 8008aca:	f7fb f920 	bl	8003d0e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2202      	movs	r2, #2
 8008ad2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008ae0:	b29b      	uxth	r3, r3
 8008ae2:	1ad3      	subs	r3, r2, r3
 8008ae4:	b29b      	uxth	r3, r3
 8008ae6:	4619      	mov	r1, r3
 8008ae8:	6878      	ldr	r0, [r7, #4]
 8008aea:	f000 f8e9 	bl	8008cc0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008aee:	e0ca      	b.n	8008c86 <HAL_UART_IRQHandler+0x56e>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008afc:	b29b      	uxth	r3, r3
 8008afe:	1ad3      	subs	r3, r2, r3
 8008b00:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
      if ((huart->RxXferCount > 0U)
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008b0a:	b29b      	uxth	r3, r3
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	f000 80bc 	beq.w	8008c8a <HAL_UART_IRQHandler+0x572>
          && (nb_rx_data > 0U))
 8008b12:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	f000 80b7 	beq.w	8008c8a <HAL_UART_IRQHandler+0x572>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b24:	e853 3f00 	ldrex	r3, [r3]
 8008b28:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008b2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b2c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008b30:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	461a      	mov	r2, r3
 8008b3a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008b3e:	647b      	str	r3, [r7, #68]	; 0x44
 8008b40:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b42:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008b44:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008b46:	e841 2300 	strex	r3, r2, [r1]
 8008b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008b4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d1e4      	bne.n	8008b1c <HAL_UART_IRQHandler+0x404>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	3308      	adds	r3, #8
 8008b58:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b5c:	e853 3f00 	ldrex	r3, [r3]
 8008b60:	623b      	str	r3, [r7, #32]
   return(result);
 8008b62:	6a3b      	ldr	r3, [r7, #32]
 8008b64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008b68:	f023 0301 	bic.w	r3, r3, #1
 8008b6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	3308      	adds	r3, #8
 8008b76:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8008b7a:	633a      	str	r2, [r7, #48]	; 0x30
 8008b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008b80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b82:	e841 2300 	strex	r3, r2, [r1]
 8008b86:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d1e1      	bne.n	8008b52 <HAL_UART_IRQHandler+0x43a>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2220      	movs	r2, #32
 8008b92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2200      	movs	r2, #0
 8008b9a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ba8:	693b      	ldr	r3, [r7, #16]
 8008baa:	e853 3f00 	ldrex	r3, [r3]
 8008bae:	60fb      	str	r3, [r7, #12]
   return(result);
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	f023 0310 	bic.w	r3, r3, #16
 8008bb6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	461a      	mov	r2, r3
 8008bc0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008bc4:	61fb      	str	r3, [r7, #28]
 8008bc6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bc8:	69b9      	ldr	r1, [r7, #24]
 8008bca:	69fa      	ldr	r2, [r7, #28]
 8008bcc:	e841 2300 	strex	r3, r2, [r1]
 8008bd0:	617b      	str	r3, [r7, #20]
   return(result);
 8008bd2:	697b      	ldr	r3, [r7, #20]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d1e4      	bne.n	8008ba2 <HAL_UART_IRQHandler+0x48a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2202      	movs	r2, #2
 8008bdc:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008bde:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8008be2:	4619      	mov	r1, r3
 8008be4:	6878      	ldr	r0, [r7, #4]
 8008be6:	f000 f86b 	bl	8008cc0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008bea:	e04e      	b.n	8008c8a <HAL_UART_IRQHandler+0x572>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008bec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008bf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d014      	beq.n	8008c22 <HAL_UART_IRQHandler+0x50a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008bf8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008bfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d105      	bne.n	8008c10 <HAL_UART_IRQHandler+0x4f8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008c04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008c08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d008      	beq.n	8008c22 <HAL_UART_IRQHandler+0x50a>
  {
    if (huart->TxISR != NULL)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d03a      	beq.n	8008c8e <HAL_UART_IRQHandler+0x576>
    {
      huart->TxISR(huart);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008c1c:	6878      	ldr	r0, [r7, #4]
 8008c1e:	4798      	blx	r3
    }
    return;
 8008c20:	e035      	b.n	8008c8e <HAL_UART_IRQHandler+0x576>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008c22:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d009      	beq.n	8008c42 <HAL_UART_IRQHandler+0x52a>
 8008c2e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d003      	beq.n	8008c42 <HAL_UART_IRQHandler+0x52a>
  {
    UART_EndTransmit_IT(huart);
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	f000 fd40 	bl	80096c0 <UART_EndTransmit_IT>
    return;
 8008c40:	e026      	b.n	8008c90 <HAL_UART_IRQHandler+0x578>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008c42:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008c46:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d009      	beq.n	8008c62 <HAL_UART_IRQHandler+0x54a>
 8008c4e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008c52:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d003      	beq.n	8008c62 <HAL_UART_IRQHandler+0x54a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f001 fa9e 	bl	800a19c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008c60:	e016      	b.n	8008c90 <HAL_UART_IRQHandler+0x578>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008c62:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008c66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d010      	beq.n	8008c90 <HAL_UART_IRQHandler+0x578>
 8008c6e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	da0c      	bge.n	8008c90 <HAL_UART_IRQHandler+0x578>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008c76:	6878      	ldr	r0, [r7, #4]
 8008c78:	f001 fa86 	bl	800a188 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008c7c:	e008      	b.n	8008c90 <HAL_UART_IRQHandler+0x578>
      return;
 8008c7e:	bf00      	nop
 8008c80:	e006      	b.n	8008c90 <HAL_UART_IRQHandler+0x578>
    return;
 8008c82:	bf00      	nop
 8008c84:	e004      	b.n	8008c90 <HAL_UART_IRQHandler+0x578>
      return;
 8008c86:	bf00      	nop
 8008c88:	e002      	b.n	8008c90 <HAL_UART_IRQHandler+0x578>
      return;
 8008c8a:	bf00      	nop
 8008c8c:	e000      	b.n	8008c90 <HAL_UART_IRQHandler+0x578>
    return;
 8008c8e:	bf00      	nop
  }
}
 8008c90:	37b8      	adds	r7, #184	; 0xb8
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}
 8008c96:	bf00      	nop

08008c98 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008c98:	b480      	push	{r7}
 8008c9a:	b083      	sub	sp, #12
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008ca0:	bf00      	nop
 8008ca2:	370c      	adds	r7, #12
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008caa:	4770      	bx	lr

08008cac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008cac:	b480      	push	{r7}
 8008cae:	b083      	sub	sp, #12
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008cb4:	bf00      	nop
 8008cb6:	370c      	adds	r7, #12
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbe:	4770      	bx	lr

08008cc0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	b083      	sub	sp, #12
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
 8008cc8:	460b      	mov	r3, r1
 8008cca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008ccc:	bf00      	nop
 8008cce:	370c      	adds	r7, #12
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd6:	4770      	bx	lr

08008cd8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008cd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008cdc:	b094      	sub	sp, #80	; 0x50
 8008cde:	af00      	add	r7, sp, #0
 8008ce0:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8008ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cea:	681a      	ldr	r2, [r3, #0]
 8008cec:	4b7e      	ldr	r3, [pc, #504]	; (8008ee8 <UART_SetConfig+0x210>)
 8008cee:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cf2:	689a      	ldr	r2, [r3, #8]
 8008cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cf6:	691b      	ldr	r3, [r3, #16]
 8008cf8:	431a      	orrs	r2, r3
 8008cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cfc:	695b      	ldr	r3, [r3, #20]
 8008cfe:	431a      	orrs	r2, r3
 8008d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d02:	69db      	ldr	r3, [r3, #28]
 8008d04:	4313      	orrs	r3, r2
 8008d06:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	4977      	ldr	r1, [pc, #476]	; (8008eec <UART_SetConfig+0x214>)
 8008d10:	4019      	ands	r1, r3
 8008d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d14:	681a      	ldr	r2, [r3, #0]
 8008d16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d18:	430b      	orrs	r3, r1
 8008d1a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	685b      	ldr	r3, [r3, #4]
 8008d22:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d28:	68d9      	ldr	r1, [r3, #12]
 8008d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d2c:	681a      	ldr	r2, [r3, #0]
 8008d2e:	ea40 0301 	orr.w	r3, r0, r1
 8008d32:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d36:	699b      	ldr	r3, [r3, #24]
 8008d38:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d3c:	681a      	ldr	r2, [r3, #0]
 8008d3e:	4b6a      	ldr	r3, [pc, #424]	; (8008ee8 <UART_SetConfig+0x210>)
 8008d40:	429a      	cmp	r2, r3
 8008d42:	d009      	beq.n	8008d58 <UART_SetConfig+0x80>
 8008d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d46:	681a      	ldr	r2, [r3, #0]
 8008d48:	4b69      	ldr	r3, [pc, #420]	; (8008ef0 <UART_SetConfig+0x218>)
 8008d4a:	429a      	cmp	r2, r3
 8008d4c:	d004      	beq.n	8008d58 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d50:	6a1a      	ldr	r2, [r3, #32]
 8008d52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d54:	4313      	orrs	r3, r2
 8008d56:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	689b      	ldr	r3, [r3, #8]
 8008d5e:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 8008d62:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8008d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d68:	681a      	ldr	r2, [r3, #0]
 8008d6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d6c:	430b      	orrs	r3, r1
 8008d6e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d76:	f023 000f 	bic.w	r0, r3, #15
 8008d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d7c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8008d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d80:	681a      	ldr	r2, [r3, #0]
 8008d82:	ea40 0301 	orr.w	r3, r0, r1
 8008d86:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d8a:	681a      	ldr	r2, [r3, #0]
 8008d8c:	4b59      	ldr	r3, [pc, #356]	; (8008ef4 <UART_SetConfig+0x21c>)
 8008d8e:	429a      	cmp	r2, r3
 8008d90:	d102      	bne.n	8008d98 <UART_SetConfig+0xc0>
 8008d92:	2301      	movs	r3, #1
 8008d94:	64bb      	str	r3, [r7, #72]	; 0x48
 8008d96:	e029      	b.n	8008dec <UART_SetConfig+0x114>
 8008d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d9a:	681a      	ldr	r2, [r3, #0]
 8008d9c:	4b56      	ldr	r3, [pc, #344]	; (8008ef8 <UART_SetConfig+0x220>)
 8008d9e:	429a      	cmp	r2, r3
 8008da0:	d102      	bne.n	8008da8 <UART_SetConfig+0xd0>
 8008da2:	2302      	movs	r3, #2
 8008da4:	64bb      	str	r3, [r7, #72]	; 0x48
 8008da6:	e021      	b.n	8008dec <UART_SetConfig+0x114>
 8008da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008daa:	681a      	ldr	r2, [r3, #0]
 8008dac:	4b53      	ldr	r3, [pc, #332]	; (8008efc <UART_SetConfig+0x224>)
 8008dae:	429a      	cmp	r2, r3
 8008db0:	d102      	bne.n	8008db8 <UART_SetConfig+0xe0>
 8008db2:	2304      	movs	r3, #4
 8008db4:	64bb      	str	r3, [r7, #72]	; 0x48
 8008db6:	e019      	b.n	8008dec <UART_SetConfig+0x114>
 8008db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dba:	681a      	ldr	r2, [r3, #0]
 8008dbc:	4b50      	ldr	r3, [pc, #320]	; (8008f00 <UART_SetConfig+0x228>)
 8008dbe:	429a      	cmp	r2, r3
 8008dc0:	d102      	bne.n	8008dc8 <UART_SetConfig+0xf0>
 8008dc2:	2308      	movs	r3, #8
 8008dc4:	64bb      	str	r3, [r7, #72]	; 0x48
 8008dc6:	e011      	b.n	8008dec <UART_SetConfig+0x114>
 8008dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dca:	681a      	ldr	r2, [r3, #0]
 8008dcc:	4b4d      	ldr	r3, [pc, #308]	; (8008f04 <UART_SetConfig+0x22c>)
 8008dce:	429a      	cmp	r2, r3
 8008dd0:	d102      	bne.n	8008dd8 <UART_SetConfig+0x100>
 8008dd2:	2310      	movs	r3, #16
 8008dd4:	64bb      	str	r3, [r7, #72]	; 0x48
 8008dd6:	e009      	b.n	8008dec <UART_SetConfig+0x114>
 8008dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dda:	681a      	ldr	r2, [r3, #0]
 8008ddc:	4b42      	ldr	r3, [pc, #264]	; (8008ee8 <UART_SetConfig+0x210>)
 8008dde:	429a      	cmp	r2, r3
 8008de0:	d102      	bne.n	8008de8 <UART_SetConfig+0x110>
 8008de2:	2320      	movs	r3, #32
 8008de4:	64bb      	str	r3, [r7, #72]	; 0x48
 8008de6:	e001      	b.n	8008dec <UART_SetConfig+0x114>
 8008de8:	2300      	movs	r3, #0
 8008dea:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dee:	681a      	ldr	r2, [r3, #0]
 8008df0:	4b3d      	ldr	r3, [pc, #244]	; (8008ee8 <UART_SetConfig+0x210>)
 8008df2:	429a      	cmp	r2, r3
 8008df4:	d005      	beq.n	8008e02 <UART_SetConfig+0x12a>
 8008df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008df8:	681a      	ldr	r2, [r3, #0]
 8008dfa:	4b3d      	ldr	r3, [pc, #244]	; (8008ef0 <UART_SetConfig+0x218>)
 8008dfc:	429a      	cmp	r2, r3
 8008dfe:	f040 8085 	bne.w	8008f0c <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008e02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e04:	2200      	movs	r2, #0
 8008e06:	623b      	str	r3, [r7, #32]
 8008e08:	627a      	str	r2, [r7, #36]	; 0x24
 8008e0a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008e0e:	f7fe f821 	bl	8006e54 <HAL_RCCEx_GetPeriphCLKFreq>
 8008e12:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8008e14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	f000 80e8 	beq.w	8008fec <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e20:	4a39      	ldr	r2, [pc, #228]	; (8008f08 <UART_SetConfig+0x230>)
 8008e22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e26:	461a      	mov	r2, r3
 8008e28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e2a:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e2e:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e32:	685a      	ldr	r2, [r3, #4]
 8008e34:	4613      	mov	r3, r2
 8008e36:	005b      	lsls	r3, r3, #1
 8008e38:	4413      	add	r3, r2
 8008e3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e3c:	429a      	cmp	r2, r3
 8008e3e:	d305      	bcc.n	8008e4c <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e42:	685b      	ldr	r3, [r3, #4]
 8008e44:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008e46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e48:	429a      	cmp	r2, r3
 8008e4a:	d903      	bls.n	8008e54 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 8008e4c:	2301      	movs	r3, #1
 8008e4e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008e52:	e048      	b.n	8008ee6 <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e56:	2200      	movs	r2, #0
 8008e58:	61bb      	str	r3, [r7, #24]
 8008e5a:	61fa      	str	r2, [r7, #28]
 8008e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e60:	4a29      	ldr	r2, [pc, #164]	; (8008f08 <UART_SetConfig+0x230>)
 8008e62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e66:	b29b      	uxth	r3, r3
 8008e68:	2200      	movs	r2, #0
 8008e6a:	613b      	str	r3, [r7, #16]
 8008e6c:	617a      	str	r2, [r7, #20]
 8008e6e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008e72:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008e76:	f7f7 feed 	bl	8000c54 <__aeabi_uldivmod>
 8008e7a:	4602      	mov	r2, r0
 8008e7c:	460b      	mov	r3, r1
 8008e7e:	4610      	mov	r0, r2
 8008e80:	4619      	mov	r1, r3
 8008e82:	f04f 0200 	mov.w	r2, #0
 8008e86:	f04f 0300 	mov.w	r3, #0
 8008e8a:	020b      	lsls	r3, r1, #8
 8008e8c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008e90:	0202      	lsls	r2, r0, #8
 8008e92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008e94:	6849      	ldr	r1, [r1, #4]
 8008e96:	0849      	lsrs	r1, r1, #1
 8008e98:	2000      	movs	r0, #0
 8008e9a:	460c      	mov	r4, r1
 8008e9c:	4605      	mov	r5, r0
 8008e9e:	eb12 0804 	adds.w	r8, r2, r4
 8008ea2:	eb43 0905 	adc.w	r9, r3, r5
 8008ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ea8:	685b      	ldr	r3, [r3, #4]
 8008eaa:	2200      	movs	r2, #0
 8008eac:	60bb      	str	r3, [r7, #8]
 8008eae:	60fa      	str	r2, [r7, #12]
 8008eb0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008eb4:	4640      	mov	r0, r8
 8008eb6:	4649      	mov	r1, r9
 8008eb8:	f7f7 fecc 	bl	8000c54 <__aeabi_uldivmod>
 8008ebc:	4602      	mov	r2, r0
 8008ebe:	460b      	mov	r3, r1
 8008ec0:	4613      	mov	r3, r2
 8008ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008ec4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ec6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008eca:	d308      	bcc.n	8008ede <UART_SetConfig+0x206>
 8008ecc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ece:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008ed2:	d204      	bcs.n	8008ede <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 8008ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008eda:	60da      	str	r2, [r3, #12]
 8008edc:	e003      	b.n	8008ee6 <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 8008ede:	2301      	movs	r3, #1
 8008ee0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 8008ee4:	e082      	b.n	8008fec <UART_SetConfig+0x314>
 8008ee6:	e081      	b.n	8008fec <UART_SetConfig+0x314>
 8008ee8:	46002400 	.word	0x46002400
 8008eec:	cfff69f3 	.word	0xcfff69f3
 8008ef0:	56002400 	.word	0x56002400
 8008ef4:	40013800 	.word	0x40013800
 8008ef8:	40004400 	.word	0x40004400
 8008efc:	40004800 	.word	0x40004800
 8008f00:	40004c00 	.word	0x40004c00
 8008f04:	40005000 	.word	0x40005000
 8008f08:	0800e52c 	.word	0x0800e52c
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f0e:	69db      	ldr	r3, [r3, #28]
 8008f10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f14:	d13c      	bne.n	8008f90 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008f16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f18:	2200      	movs	r2, #0
 8008f1a:	603b      	str	r3, [r7, #0]
 8008f1c:	607a      	str	r2, [r7, #4]
 8008f1e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008f22:	f7fd ff97 	bl	8006e54 <HAL_RCCEx_GetPeriphCLKFreq>
 8008f26:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008f28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d05e      	beq.n	8008fec <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f32:	4a39      	ldr	r2, [pc, #228]	; (8009018 <UART_SetConfig+0x340>)
 8008f34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f38:	461a      	mov	r2, r3
 8008f3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008f40:	005a      	lsls	r2, r3, #1
 8008f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f44:	685b      	ldr	r3, [r3, #4]
 8008f46:	085b      	lsrs	r3, r3, #1
 8008f48:	441a      	add	r2, r3
 8008f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f4c:	685b      	ldr	r3, [r3, #4]
 8008f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f52:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008f54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f56:	2b0f      	cmp	r3, #15
 8008f58:	d916      	bls.n	8008f88 <UART_SetConfig+0x2b0>
 8008f5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f60:	d212      	bcs.n	8008f88 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008f62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f64:	b29b      	uxth	r3, r3
 8008f66:	f023 030f 	bic.w	r3, r3, #15
 8008f6a:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008f6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f6e:	085b      	lsrs	r3, r3, #1
 8008f70:	b29b      	uxth	r3, r3
 8008f72:	f003 0307 	and.w	r3, r3, #7
 8008f76:	b29a      	uxth	r2, r3
 8008f78:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8008f7a:	4313      	orrs	r3, r2
 8008f7c:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 8008f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8008f84:	60da      	str	r2, [r3, #12]
 8008f86:	e031      	b.n	8008fec <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8008f88:	2301      	movs	r3, #1
 8008f8a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008f8e:	e02d      	b.n	8008fec <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008f90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f92:	2200      	movs	r2, #0
 8008f94:	469a      	mov	sl, r3
 8008f96:	4693      	mov	fp, r2
 8008f98:	4650      	mov	r0, sl
 8008f9a:	4659      	mov	r1, fp
 8008f9c:	f7fd ff5a 	bl	8006e54 <HAL_RCCEx_GetPeriphCLKFreq>
 8008fa0:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 8008fa2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d021      	beq.n	8008fec <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fac:	4a1a      	ldr	r2, [pc, #104]	; (8009018 <UART_SetConfig+0x340>)
 8008fae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008fb2:	461a      	mov	r2, r3
 8008fb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008fb6:	fbb3 f2f2 	udiv	r2, r3, r2
 8008fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fbc:	685b      	ldr	r3, [r3, #4]
 8008fbe:	085b      	lsrs	r3, r3, #1
 8008fc0:	441a      	add	r2, r3
 8008fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fc4:	685b      	ldr	r3, [r3, #4]
 8008fc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fca:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008fcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fce:	2b0f      	cmp	r3, #15
 8008fd0:	d909      	bls.n	8008fe6 <UART_SetConfig+0x30e>
 8008fd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008fd8:	d205      	bcs.n	8008fe6 <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008fda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fdc:	b29a      	uxth	r2, r3
 8008fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	60da      	str	r2, [r3, #12]
 8008fe4:	e002      	b.n	8008fec <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8008fe6:	2301      	movs	r3, #1
 8008fe8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fee:	2201      	movs	r2, #1
 8008ff0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ff6:	2201      	movs	r2, #1
 8008ff8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ffe:	2200      	movs	r2, #0
 8009000:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8009002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009004:	2200      	movs	r2, #0
 8009006:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8009008:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800900c:	4618      	mov	r0, r3
 800900e:	3750      	adds	r7, #80	; 0x50
 8009010:	46bd      	mov	sp, r7
 8009012:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009016:	bf00      	nop
 8009018:	0800e52c 	.word	0x0800e52c

0800901c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800901c:	b480      	push	{r7}
 800901e:	b083      	sub	sp, #12
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009028:	f003 0308 	and.w	r3, r3, #8
 800902c:	2b00      	cmp	r3, #0
 800902e:	d00a      	beq.n	8009046 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	685b      	ldr	r3, [r3, #4]
 8009036:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	430a      	orrs	r2, r1
 8009044:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800904a:	f003 0301 	and.w	r3, r3, #1
 800904e:	2b00      	cmp	r3, #0
 8009050:	d00a      	beq.n	8009068 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	685b      	ldr	r3, [r3, #4]
 8009058:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	430a      	orrs	r2, r1
 8009066:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800906c:	f003 0302 	and.w	r3, r3, #2
 8009070:	2b00      	cmp	r3, #0
 8009072:	d00a      	beq.n	800908a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	685b      	ldr	r3, [r3, #4]
 800907a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	430a      	orrs	r2, r1
 8009088:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800908e:	f003 0304 	and.w	r3, r3, #4
 8009092:	2b00      	cmp	r3, #0
 8009094:	d00a      	beq.n	80090ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	685b      	ldr	r3, [r3, #4]
 800909c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	430a      	orrs	r2, r1
 80090aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090b0:	f003 0310 	and.w	r3, r3, #16
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d00a      	beq.n	80090ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	689b      	ldr	r3, [r3, #8]
 80090be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	430a      	orrs	r2, r1
 80090cc:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090d2:	f003 0320 	and.w	r3, r3, #32
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d00a      	beq.n	80090f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	689b      	ldr	r3, [r3, #8]
 80090e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	430a      	orrs	r2, r1
 80090ee:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d01a      	beq.n	8009132 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	685b      	ldr	r3, [r3, #4]
 8009102:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	430a      	orrs	r2, r1
 8009110:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009116:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800911a:	d10a      	bne.n	8009132 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	685b      	ldr	r3, [r3, #4]
 8009122:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	430a      	orrs	r2, r1
 8009130:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009136:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800913a:	2b00      	cmp	r3, #0
 800913c:	d00a      	beq.n	8009154 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	685b      	ldr	r3, [r3, #4]
 8009144:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	430a      	orrs	r2, r1
 8009152:	605a      	str	r2, [r3, #4]
  }
}
 8009154:	bf00      	nop
 8009156:	370c      	adds	r7, #12
 8009158:	46bd      	mov	sp, r7
 800915a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915e:	4770      	bx	lr

08009160 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b098      	sub	sp, #96	; 0x60
 8009164:	af02      	add	r7, sp, #8
 8009166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2200      	movs	r2, #0
 800916c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009170:	f7fa fc8e 	bl	8003a90 <HAL_GetTick>
 8009174:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f003 0308 	and.w	r3, r3, #8
 8009180:	2b08      	cmp	r3, #8
 8009182:	d12f      	bne.n	80091e4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009184:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009188:	9300      	str	r3, [sp, #0]
 800918a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800918c:	2200      	movs	r2, #0
 800918e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009192:	6878      	ldr	r0, [r7, #4]
 8009194:	f000 f88e 	bl	80092b4 <UART_WaitOnFlagUntilTimeout>
 8009198:	4603      	mov	r3, r0
 800919a:	2b00      	cmp	r3, #0
 800919c:	d022      	beq.n	80091e4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091a6:	e853 3f00 	ldrex	r3, [r3]
 80091aa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80091ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80091b2:	653b      	str	r3, [r7, #80]	; 0x50
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	461a      	mov	r2, r3
 80091ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80091bc:	647b      	str	r3, [r7, #68]	; 0x44
 80091be:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091c0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80091c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80091c4:	e841 2300 	strex	r3, r2, [r1]
 80091c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80091ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d1e6      	bne.n	800919e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2220      	movs	r2, #32
 80091d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2200      	movs	r2, #0
 80091dc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80091e0:	2303      	movs	r3, #3
 80091e2:	e063      	b.n	80092ac <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f003 0304 	and.w	r3, r3, #4
 80091ee:	2b04      	cmp	r3, #4
 80091f0:	d149      	bne.n	8009286 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80091f2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80091f6:	9300      	str	r3, [sp, #0]
 80091f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80091fa:	2200      	movs	r2, #0
 80091fc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009200:	6878      	ldr	r0, [r7, #4]
 8009202:	f000 f857 	bl	80092b4 <UART_WaitOnFlagUntilTimeout>
 8009206:	4603      	mov	r3, r0
 8009208:	2b00      	cmp	r3, #0
 800920a:	d03c      	beq.n	8009286 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009214:	e853 3f00 	ldrex	r3, [r3]
 8009218:	623b      	str	r3, [r7, #32]
   return(result);
 800921a:	6a3b      	ldr	r3, [r7, #32]
 800921c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009220:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	461a      	mov	r2, r3
 8009228:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800922a:	633b      	str	r3, [r7, #48]	; 0x30
 800922c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800922e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009230:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009232:	e841 2300 	strex	r3, r2, [r1]
 8009236:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800923a:	2b00      	cmp	r3, #0
 800923c:	d1e6      	bne.n	800920c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	3308      	adds	r3, #8
 8009244:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009246:	693b      	ldr	r3, [r7, #16]
 8009248:	e853 3f00 	ldrex	r3, [r3]
 800924c:	60fb      	str	r3, [r7, #12]
   return(result);
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	f023 0301 	bic.w	r3, r3, #1
 8009254:	64bb      	str	r3, [r7, #72]	; 0x48
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	3308      	adds	r3, #8
 800925c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800925e:	61fa      	str	r2, [r7, #28]
 8009260:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009262:	69b9      	ldr	r1, [r7, #24]
 8009264:	69fa      	ldr	r2, [r7, #28]
 8009266:	e841 2300 	strex	r3, r2, [r1]
 800926a:	617b      	str	r3, [r7, #20]
   return(result);
 800926c:	697b      	ldr	r3, [r7, #20]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d1e5      	bne.n	800923e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	2220      	movs	r2, #32
 8009276:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2200      	movs	r2, #0
 800927e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009282:	2303      	movs	r3, #3
 8009284:	e012      	b.n	80092ac <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2220      	movs	r2, #32
 800928a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	2220      	movs	r2, #32
 8009292:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2200      	movs	r2, #0
 800929a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2200      	movs	r2, #0
 80092a0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2200      	movs	r2, #0
 80092a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80092aa:	2300      	movs	r3, #0
}
 80092ac:	4618      	mov	r0, r3
 80092ae:	3758      	adds	r7, #88	; 0x58
 80092b0:	46bd      	mov	sp, r7
 80092b2:	bd80      	pop	{r7, pc}

080092b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b084      	sub	sp, #16
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	60f8      	str	r0, [r7, #12]
 80092bc:	60b9      	str	r1, [r7, #8]
 80092be:	603b      	str	r3, [r7, #0]
 80092c0:	4613      	mov	r3, r2
 80092c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80092c4:	e049      	b.n	800935a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80092c6:	69bb      	ldr	r3, [r7, #24]
 80092c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80092cc:	d045      	beq.n	800935a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80092ce:	f7fa fbdf 	bl	8003a90 <HAL_GetTick>
 80092d2:	4602      	mov	r2, r0
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	1ad3      	subs	r3, r2, r3
 80092d8:	69ba      	ldr	r2, [r7, #24]
 80092da:	429a      	cmp	r2, r3
 80092dc:	d302      	bcc.n	80092e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80092de:	69bb      	ldr	r3, [r7, #24]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d101      	bne.n	80092e8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80092e4:	2303      	movs	r3, #3
 80092e6:	e048      	b.n	800937a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	f003 0304 	and.w	r3, r3, #4
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d031      	beq.n	800935a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	69db      	ldr	r3, [r3, #28]
 80092fc:	f003 0308 	and.w	r3, r3, #8
 8009300:	2b08      	cmp	r3, #8
 8009302:	d110      	bne.n	8009326 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	2208      	movs	r2, #8
 800930a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800930c:	68f8      	ldr	r0, [r7, #12]
 800930e:	f000 f95b 	bl	80095c8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	2208      	movs	r2, #8
 8009316:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	2200      	movs	r2, #0
 800931e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8009322:	2301      	movs	r3, #1
 8009324:	e029      	b.n	800937a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	69db      	ldr	r3, [r3, #28]
 800932c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009330:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009334:	d111      	bne.n	800935a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800933e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009340:	68f8      	ldr	r0, [r7, #12]
 8009342:	f000 f941 	bl	80095c8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	2220      	movs	r2, #32
 800934a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	2200      	movs	r2, #0
 8009352:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8009356:	2303      	movs	r3, #3
 8009358:	e00f      	b.n	800937a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	69da      	ldr	r2, [r3, #28]
 8009360:	68bb      	ldr	r3, [r7, #8]
 8009362:	4013      	ands	r3, r2
 8009364:	68ba      	ldr	r2, [r7, #8]
 8009366:	429a      	cmp	r2, r3
 8009368:	bf0c      	ite	eq
 800936a:	2301      	moveq	r3, #1
 800936c:	2300      	movne	r3, #0
 800936e:	b2db      	uxtb	r3, r3
 8009370:	461a      	mov	r2, r3
 8009372:	79fb      	ldrb	r3, [r7, #7]
 8009374:	429a      	cmp	r2, r3
 8009376:	d0a6      	beq.n	80092c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009378:	2300      	movs	r3, #0
}
 800937a:	4618      	mov	r0, r3
 800937c:	3710      	adds	r7, #16
 800937e:	46bd      	mov	sp, r7
 8009380:	bd80      	pop	{r7, pc}
	...

08009384 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009384:	b480      	push	{r7}
 8009386:	b0a3      	sub	sp, #140	; 0x8c
 8009388:	af00      	add	r7, sp, #0
 800938a:	60f8      	str	r0, [r7, #12]
 800938c:	60b9      	str	r1, [r7, #8]
 800938e:	4613      	mov	r3, r2
 8009390:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	68ba      	ldr	r2, [r7, #8]
 8009396:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	88fa      	ldrh	r2, [r7, #6]
 800939c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	88fa      	ldrh	r2, [r7, #6]
 80093a4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	2200      	movs	r2, #0
 80093ac:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	689b      	ldr	r3, [r3, #8]
 80093b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093b6:	d10e      	bne.n	80093d6 <UART_Start_Receive_IT+0x52>
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	691b      	ldr	r3, [r3, #16]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d105      	bne.n	80093cc <UART_Start_Receive_IT+0x48>
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80093c6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80093ca:	e02d      	b.n	8009428 <UART_Start_Receive_IT+0xa4>
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	22ff      	movs	r2, #255	; 0xff
 80093d0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80093d4:	e028      	b.n	8009428 <UART_Start_Receive_IT+0xa4>
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	689b      	ldr	r3, [r3, #8]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d10d      	bne.n	80093fa <UART_Start_Receive_IT+0x76>
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	691b      	ldr	r3, [r3, #16]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d104      	bne.n	80093f0 <UART_Start_Receive_IT+0x6c>
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	22ff      	movs	r2, #255	; 0xff
 80093ea:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80093ee:	e01b      	b.n	8009428 <UART_Start_Receive_IT+0xa4>
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	227f      	movs	r2, #127	; 0x7f
 80093f4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80093f8:	e016      	b.n	8009428 <UART_Start_Receive_IT+0xa4>
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	689b      	ldr	r3, [r3, #8]
 80093fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009402:	d10d      	bne.n	8009420 <UART_Start_Receive_IT+0x9c>
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	691b      	ldr	r3, [r3, #16]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d104      	bne.n	8009416 <UART_Start_Receive_IT+0x92>
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	227f      	movs	r2, #127	; 0x7f
 8009410:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009414:	e008      	b.n	8009428 <UART_Start_Receive_IT+0xa4>
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	223f      	movs	r2, #63	; 0x3f
 800941a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800941e:	e003      	b.n	8009428 <UART_Start_Receive_IT+0xa4>
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	2200      	movs	r2, #0
 8009424:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	2200      	movs	r2, #0
 800942c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	2222      	movs	r2, #34	; 0x22
 8009434:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	3308      	adds	r3, #8
 800943e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009440:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009442:	e853 3f00 	ldrex	r3, [r3]
 8009446:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8009448:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800944a:	f043 0301 	orr.w	r3, r3, #1
 800944e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	3308      	adds	r3, #8
 8009458:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800945c:	673a      	str	r2, [r7, #112]	; 0x70
 800945e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009460:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8009462:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009464:	e841 2300 	strex	r3, r2, [r1]
 8009468:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800946a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800946c:	2b00      	cmp	r3, #0
 800946e:	d1e3      	bne.n	8009438 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009474:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009478:	d14f      	bne.n	800951a <UART_Start_Receive_IT+0x196>
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009480:	88fa      	ldrh	r2, [r7, #6]
 8009482:	429a      	cmp	r2, r3
 8009484:	d349      	bcc.n	800951a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	689b      	ldr	r3, [r3, #8]
 800948a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800948e:	d107      	bne.n	80094a0 <UART_Start_Receive_IT+0x11c>
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	691b      	ldr	r3, [r3, #16]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d103      	bne.n	80094a0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	4a47      	ldr	r2, [pc, #284]	; (80095b8 <UART_Start_Receive_IT+0x234>)
 800949c:	675a      	str	r2, [r3, #116]	; 0x74
 800949e:	e002      	b.n	80094a6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	4a46      	ldr	r2, [pc, #280]	; (80095bc <UART_Start_Receive_IT+0x238>)
 80094a4:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	691b      	ldr	r3, [r3, #16]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d01a      	beq.n	80094e4 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80094b6:	e853 3f00 	ldrex	r3, [r3]
 80094ba:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80094bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80094c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	461a      	mov	r2, r3
 80094cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80094d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80094d2:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094d4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80094d6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80094d8:	e841 2300 	strex	r3, r2, [r1]
 80094dc:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80094de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d1e4      	bne.n	80094ae <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	3308      	adds	r3, #8
 80094ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094ee:	e853 3f00 	ldrex	r3, [r3]
 80094f2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80094f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80094fa:	67fb      	str	r3, [r7, #124]	; 0x7c
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	3308      	adds	r3, #8
 8009502:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009504:	64ba      	str	r2, [r7, #72]	; 0x48
 8009506:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009508:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800950a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800950c:	e841 2300 	strex	r3, r2, [r1]
 8009510:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009512:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009514:	2b00      	cmp	r3, #0
 8009516:	d1e5      	bne.n	80094e4 <UART_Start_Receive_IT+0x160>
 8009518:	e046      	b.n	80095a8 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	689b      	ldr	r3, [r3, #8]
 800951e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009522:	d107      	bne.n	8009534 <UART_Start_Receive_IT+0x1b0>
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	691b      	ldr	r3, [r3, #16]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d103      	bne.n	8009534 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	4a24      	ldr	r2, [pc, #144]	; (80095c0 <UART_Start_Receive_IT+0x23c>)
 8009530:	675a      	str	r2, [r3, #116]	; 0x74
 8009532:	e002      	b.n	800953a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	4a23      	ldr	r2, [pc, #140]	; (80095c4 <UART_Start_Receive_IT+0x240>)
 8009538:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	691b      	ldr	r3, [r3, #16]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d019      	beq.n	8009576 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800954a:	e853 3f00 	ldrex	r3, [r3]
 800954e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009552:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8009556:	677b      	str	r3, [r7, #116]	; 0x74
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	461a      	mov	r2, r3
 800955e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009560:	637b      	str	r3, [r7, #52]	; 0x34
 8009562:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009564:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009566:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009568:	e841 2300 	strex	r3, r2, [r1]
 800956c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800956e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009570:	2b00      	cmp	r3, #0
 8009572:	d1e6      	bne.n	8009542 <UART_Start_Receive_IT+0x1be>
 8009574:	e018      	b.n	80095a8 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800957c:	697b      	ldr	r3, [r7, #20]
 800957e:	e853 3f00 	ldrex	r3, [r3]
 8009582:	613b      	str	r3, [r7, #16]
   return(result);
 8009584:	693b      	ldr	r3, [r7, #16]
 8009586:	f043 0320 	orr.w	r3, r3, #32
 800958a:	67bb      	str	r3, [r7, #120]	; 0x78
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	461a      	mov	r2, r3
 8009592:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009594:	623b      	str	r3, [r7, #32]
 8009596:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009598:	69f9      	ldr	r1, [r7, #28]
 800959a:	6a3a      	ldr	r2, [r7, #32]
 800959c:	e841 2300 	strex	r3, r2, [r1]
 80095a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80095a2:	69bb      	ldr	r3, [r7, #24]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d1e6      	bne.n	8009576 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80095a8:	2300      	movs	r3, #0
}
 80095aa:	4618      	mov	r0, r3
 80095ac:	378c      	adds	r7, #140	; 0x8c
 80095ae:	46bd      	mov	sp, r7
 80095b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b4:	4770      	bx	lr
 80095b6:	bf00      	nop
 80095b8:	08009e11 	.word	0x08009e11
 80095bc:	08009aa1 	.word	0x08009aa1
 80095c0:	080098dd 	.word	0x080098dd
 80095c4:	08009719 	.word	0x08009719

080095c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80095c8:	b480      	push	{r7}
 80095ca:	b095      	sub	sp, #84	; 0x54
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095d8:	e853 3f00 	ldrex	r3, [r3]
 80095dc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80095de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80095e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	461a      	mov	r2, r3
 80095ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095ee:	643b      	str	r3, [r7, #64]	; 0x40
 80095f0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095f2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80095f4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80095f6:	e841 2300 	strex	r3, r2, [r1]
 80095fa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80095fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d1e6      	bne.n	80095d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	3308      	adds	r3, #8
 8009608:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800960a:	6a3b      	ldr	r3, [r7, #32]
 800960c:	e853 3f00 	ldrex	r3, [r3]
 8009610:	61fb      	str	r3, [r7, #28]
   return(result);
 8009612:	69fb      	ldr	r3, [r7, #28]
 8009614:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009618:	f023 0301 	bic.w	r3, r3, #1
 800961c:	64bb      	str	r3, [r7, #72]	; 0x48
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	3308      	adds	r3, #8
 8009624:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009626:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009628:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800962a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800962c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800962e:	e841 2300 	strex	r3, r2, [r1]
 8009632:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009636:	2b00      	cmp	r3, #0
 8009638:	d1e3      	bne.n	8009602 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800963e:	2b01      	cmp	r3, #1
 8009640:	d118      	bne.n	8009674 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	e853 3f00 	ldrex	r3, [r3]
 800964e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009650:	68bb      	ldr	r3, [r7, #8]
 8009652:	f023 0310 	bic.w	r3, r3, #16
 8009656:	647b      	str	r3, [r7, #68]	; 0x44
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	461a      	mov	r2, r3
 800965e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009660:	61bb      	str	r3, [r7, #24]
 8009662:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009664:	6979      	ldr	r1, [r7, #20]
 8009666:	69ba      	ldr	r2, [r7, #24]
 8009668:	e841 2300 	strex	r3, r2, [r1]
 800966c:	613b      	str	r3, [r7, #16]
   return(result);
 800966e:	693b      	ldr	r3, [r7, #16]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d1e6      	bne.n	8009642 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2220      	movs	r2, #32
 8009678:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2200      	movs	r2, #0
 8009680:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2200      	movs	r2, #0
 8009686:	675a      	str	r2, [r3, #116]	; 0x74
}
 8009688:	bf00      	nop
 800968a:	3754      	adds	r7, #84	; 0x54
 800968c:	46bd      	mov	sp, r7
 800968e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009692:	4770      	bx	lr

08009694 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b084      	sub	sp, #16
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80096a0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	2200      	movs	r2, #0
 80096a6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	2200      	movs	r2, #0
 80096ae:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80096b2:	68f8      	ldr	r0, [r7, #12]
 80096b4:	f7ff fafa 	bl	8008cac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80096b8:	bf00      	nop
 80096ba:	3710      	adds	r7, #16
 80096bc:	46bd      	mov	sp, r7
 80096be:	bd80      	pop	{r7, pc}

080096c0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b088      	sub	sp, #32
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	e853 3f00 	ldrex	r3, [r3]
 80096d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80096d6:	68bb      	ldr	r3, [r7, #8]
 80096d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80096dc:	61fb      	str	r3, [r7, #28]
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	461a      	mov	r2, r3
 80096e4:	69fb      	ldr	r3, [r7, #28]
 80096e6:	61bb      	str	r3, [r7, #24]
 80096e8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096ea:	6979      	ldr	r1, [r7, #20]
 80096ec:	69ba      	ldr	r2, [r7, #24]
 80096ee:	e841 2300 	strex	r3, r2, [r1]
 80096f2:	613b      	str	r3, [r7, #16]
   return(result);
 80096f4:	693b      	ldr	r3, [r7, #16]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d1e6      	bne.n	80096c8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	2220      	movs	r2, #32
 80096fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2200      	movs	r2, #0
 8009706:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009708:	6878      	ldr	r0, [r7, #4]
 800970a:	f7ff fac5 	bl	8008c98 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800970e:	bf00      	nop
 8009710:	3720      	adds	r7, #32
 8009712:	46bd      	mov	sp, r7
 8009714:	bd80      	pop	{r7, pc}
	...

08009718 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b09c      	sub	sp, #112	; 0x70
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009726:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009730:	2b22      	cmp	r3, #34	; 0x22
 8009732:	f040 80c3 	bne.w	80098bc <UART_RxISR_8BIT+0x1a4>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800973c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009740:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009744:	b2d9      	uxtb	r1, r3
 8009746:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800974a:	b2da      	uxtb	r2, r3
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009750:	400a      	ands	r2, r1
 8009752:	b2d2      	uxtb	r2, r2
 8009754:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800975a:	1c5a      	adds	r2, r3, #1
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009766:	b29b      	uxth	r3, r3
 8009768:	3b01      	subs	r3, #1
 800976a:	b29a      	uxth	r2, r3
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009778:	b29b      	uxth	r3, r3
 800977a:	2b00      	cmp	r3, #0
 800977c:	f040 80a6 	bne.w	80098cc <UART_RxISR_8BIT+0x1b4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009786:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009788:	e853 3f00 	ldrex	r3, [r3]
 800978c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800978e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009790:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009794:	66bb      	str	r3, [r7, #104]	; 0x68
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	461a      	mov	r2, r3
 800979c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800979e:	65bb      	str	r3, [r7, #88]	; 0x58
 80097a0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097a2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80097a4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80097a6:	e841 2300 	strex	r3, r2, [r1]
 80097aa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80097ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d1e6      	bne.n	8009780 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	3308      	adds	r3, #8
 80097b8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097bc:	e853 3f00 	ldrex	r3, [r3]
 80097c0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80097c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097c4:	f023 0301 	bic.w	r3, r3, #1
 80097c8:	667b      	str	r3, [r7, #100]	; 0x64
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	3308      	adds	r3, #8
 80097d0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80097d2:	647a      	str	r2, [r7, #68]	; 0x44
 80097d4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097d6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80097d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80097da:	e841 2300 	strex	r3, r2, [r1]
 80097de:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80097e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d1e5      	bne.n	80097b2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	2220      	movs	r2, #32
 80097ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	2200      	movs	r2, #0
 80097f2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2200      	movs	r2, #0
 80097f8:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	4a35      	ldr	r2, [pc, #212]	; (80098d4 <UART_RxISR_8BIT+0x1bc>)
 8009800:	4293      	cmp	r3, r2
 8009802:	d024      	beq.n	800984e <UART_RxISR_8BIT+0x136>
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	4a33      	ldr	r2, [pc, #204]	; (80098d8 <UART_RxISR_8BIT+0x1c0>)
 800980a:	4293      	cmp	r3, r2
 800980c:	d01f      	beq.n	800984e <UART_RxISR_8BIT+0x136>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	685b      	ldr	r3, [r3, #4]
 8009814:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009818:	2b00      	cmp	r3, #0
 800981a:	d018      	beq.n	800984e <UART_RxISR_8BIT+0x136>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009824:	e853 3f00 	ldrex	r3, [r3]
 8009828:	623b      	str	r3, [r7, #32]
   return(result);
 800982a:	6a3b      	ldr	r3, [r7, #32]
 800982c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009830:	663b      	str	r3, [r7, #96]	; 0x60
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	461a      	mov	r2, r3
 8009838:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800983a:	633b      	str	r3, [r7, #48]	; 0x30
 800983c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800983e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009840:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009842:	e841 2300 	strex	r3, r2, [r1]
 8009846:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800984a:	2b00      	cmp	r3, #0
 800984c:	d1e6      	bne.n	800981c <UART_RxISR_8BIT+0x104>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009852:	2b01      	cmp	r3, #1
 8009854:	d12e      	bne.n	80098b4 <UART_RxISR_8BIT+0x19c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	2200      	movs	r2, #0
 800985a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009862:	693b      	ldr	r3, [r7, #16]
 8009864:	e853 3f00 	ldrex	r3, [r3]
 8009868:	60fb      	str	r3, [r7, #12]
   return(result);
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	f023 0310 	bic.w	r3, r3, #16
 8009870:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	461a      	mov	r2, r3
 8009878:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800987a:	61fb      	str	r3, [r7, #28]
 800987c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800987e:	69b9      	ldr	r1, [r7, #24]
 8009880:	69fa      	ldr	r2, [r7, #28]
 8009882:	e841 2300 	strex	r3, r2, [r1]
 8009886:	617b      	str	r3, [r7, #20]
   return(result);
 8009888:	697b      	ldr	r3, [r7, #20]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d1e6      	bne.n	800985c <UART_RxISR_8BIT+0x144>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	69db      	ldr	r3, [r3, #28]
 8009894:	f003 0310 	and.w	r3, r3, #16
 8009898:	2b10      	cmp	r3, #16
 800989a:	d103      	bne.n	80098a4 <UART_RxISR_8BIT+0x18c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	2210      	movs	r2, #16
 80098a2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80098aa:	4619      	mov	r1, r3
 80098ac:	6878      	ldr	r0, [r7, #4]
 80098ae:	f7ff fa07 	bl	8008cc0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80098b2:	e00b      	b.n	80098cc <UART_RxISR_8BIT+0x1b4>
        HAL_UART_RxCpltCallback(huart);
 80098b4:	6878      	ldr	r0, [r7, #4]
 80098b6:	f000 fe9f 	bl	800a5f8 <HAL_UART_RxCpltCallback>
}
 80098ba:	e007      	b.n	80098cc <UART_RxISR_8BIT+0x1b4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	699a      	ldr	r2, [r3, #24]
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	f042 0208 	orr.w	r2, r2, #8
 80098ca:	619a      	str	r2, [r3, #24]
}
 80098cc:	bf00      	nop
 80098ce:	3770      	adds	r7, #112	; 0x70
 80098d0:	46bd      	mov	sp, r7
 80098d2:	bd80      	pop	{r7, pc}
 80098d4:	46002400 	.word	0x46002400
 80098d8:	56002400 	.word	0x56002400

080098dc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	b09c      	sub	sp, #112	; 0x70
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80098ea:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80098f4:	2b22      	cmp	r3, #34	; 0x22
 80098f6:	f040 80c3 	bne.w	8009a80 <UART_RxISR_16BIT+0x1a4>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009900:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009908:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800990a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800990e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8009912:	4013      	ands	r3, r2
 8009914:	b29a      	uxth	r2, r3
 8009916:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009918:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800991e:	1c9a      	adds	r2, r3, #2
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800992a:	b29b      	uxth	r3, r3
 800992c:	3b01      	subs	r3, #1
 800992e:	b29a      	uxth	r2, r3
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800993c:	b29b      	uxth	r3, r3
 800993e:	2b00      	cmp	r3, #0
 8009940:	f040 80a6 	bne.w	8009a90 <UART_RxISR_16BIT+0x1b4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800994a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800994c:	e853 3f00 	ldrex	r3, [r3]
 8009950:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009952:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009954:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009958:	667b      	str	r3, [r7, #100]	; 0x64
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	461a      	mov	r2, r3
 8009960:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009962:	657b      	str	r3, [r7, #84]	; 0x54
 8009964:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009966:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009968:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800996a:	e841 2300 	strex	r3, r2, [r1]
 800996e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009970:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009972:	2b00      	cmp	r3, #0
 8009974:	d1e6      	bne.n	8009944 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	3308      	adds	r3, #8
 800997c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800997e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009980:	e853 3f00 	ldrex	r3, [r3]
 8009984:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009988:	f023 0301 	bic.w	r3, r3, #1
 800998c:	663b      	str	r3, [r7, #96]	; 0x60
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	3308      	adds	r3, #8
 8009994:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009996:	643a      	str	r2, [r7, #64]	; 0x40
 8009998:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800999a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800999c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800999e:	e841 2300 	strex	r3, r2, [r1]
 80099a2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80099a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d1e5      	bne.n	8009976 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	2220      	movs	r2, #32
 80099ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	2200      	movs	r2, #0
 80099b6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	2200      	movs	r2, #0
 80099bc:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	4a35      	ldr	r2, [pc, #212]	; (8009a98 <UART_RxISR_16BIT+0x1bc>)
 80099c4:	4293      	cmp	r3, r2
 80099c6:	d024      	beq.n	8009a12 <UART_RxISR_16BIT+0x136>
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	4a33      	ldr	r2, [pc, #204]	; (8009a9c <UART_RxISR_16BIT+0x1c0>)
 80099ce:	4293      	cmp	r3, r2
 80099d0:	d01f      	beq.n	8009a12 <UART_RxISR_16BIT+0x136>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	685b      	ldr	r3, [r3, #4]
 80099d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d018      	beq.n	8009a12 <UART_RxISR_16BIT+0x136>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099e6:	6a3b      	ldr	r3, [r7, #32]
 80099e8:	e853 3f00 	ldrex	r3, [r3]
 80099ec:	61fb      	str	r3, [r7, #28]
   return(result);
 80099ee:	69fb      	ldr	r3, [r7, #28]
 80099f0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80099f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	461a      	mov	r2, r3
 80099fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80099fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009a00:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a02:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009a04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a06:	e841 2300 	strex	r3, r2, [r1]
 8009a0a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d1e6      	bne.n	80099e0 <UART_RxISR_16BIT+0x104>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a16:	2b01      	cmp	r3, #1
 8009a18:	d12e      	bne.n	8009a78 <UART_RxISR_16BIT+0x19c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	e853 3f00 	ldrex	r3, [r3]
 8009a2c:	60bb      	str	r3, [r7, #8]
   return(result);
 8009a2e:	68bb      	ldr	r3, [r7, #8]
 8009a30:	f023 0310 	bic.w	r3, r3, #16
 8009a34:	65bb      	str	r3, [r7, #88]	; 0x58
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	461a      	mov	r2, r3
 8009a3c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009a3e:	61bb      	str	r3, [r7, #24]
 8009a40:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a42:	6979      	ldr	r1, [r7, #20]
 8009a44:	69ba      	ldr	r2, [r7, #24]
 8009a46:	e841 2300 	strex	r3, r2, [r1]
 8009a4a:	613b      	str	r3, [r7, #16]
   return(result);
 8009a4c:	693b      	ldr	r3, [r7, #16]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d1e6      	bne.n	8009a20 <UART_RxISR_16BIT+0x144>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	69db      	ldr	r3, [r3, #28]
 8009a58:	f003 0310 	and.w	r3, r3, #16
 8009a5c:	2b10      	cmp	r3, #16
 8009a5e:	d103      	bne.n	8009a68 <UART_RxISR_16BIT+0x18c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	2210      	movs	r2, #16
 8009a66:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009a6e:	4619      	mov	r1, r3
 8009a70:	6878      	ldr	r0, [r7, #4]
 8009a72:	f7ff f925 	bl	8008cc0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009a76:	e00b      	b.n	8009a90 <UART_RxISR_16BIT+0x1b4>
        HAL_UART_RxCpltCallback(huart);
 8009a78:	6878      	ldr	r0, [r7, #4]
 8009a7a:	f000 fdbd 	bl	800a5f8 <HAL_UART_RxCpltCallback>
}
 8009a7e:	e007      	b.n	8009a90 <UART_RxISR_16BIT+0x1b4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	699a      	ldr	r2, [r3, #24]
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	f042 0208 	orr.w	r2, r2, #8
 8009a8e:	619a      	str	r2, [r3, #24]
}
 8009a90:	bf00      	nop
 8009a92:	3770      	adds	r7, #112	; 0x70
 8009a94:	46bd      	mov	sp, r7
 8009a96:	bd80      	pop	{r7, pc}
 8009a98:	46002400 	.word	0x46002400
 8009a9c:	56002400 	.word	0x56002400

08009aa0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b0ac      	sub	sp, #176	; 0xb0
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009aae:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	69db      	ldr	r3, [r3, #28]
 8009ab8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	689b      	ldr	r3, [r3, #8]
 8009acc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ad6:	2b22      	cmp	r3, #34	; 0x22
 8009ad8:	f040 8187 	bne.w	8009dea <UART_RxISR_8BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009ae2:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009ae6:	e12a      	b.n	8009d3e <UART_RxISR_8BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aee:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009af2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8009af6:	b2d9      	uxtb	r1, r3
 8009af8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8009afc:	b2da      	uxtb	r2, r3
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b02:	400a      	ands	r2, r1
 8009b04:	b2d2      	uxtb	r2, r2
 8009b06:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b0c:	1c5a      	adds	r2, r3, #1
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009b18:	b29b      	uxth	r3, r3
 8009b1a:	3b01      	subs	r3, #1
 8009b1c:	b29a      	uxth	r2, r3
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	69db      	ldr	r3, [r3, #28]
 8009b2a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009b2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009b32:	f003 0307 	and.w	r3, r3, #7
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d053      	beq.n	8009be2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009b3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009b3e:	f003 0301 	and.w	r3, r3, #1
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d011      	beq.n	8009b6a <UART_RxISR_8BIT_FIFOEN+0xca>
 8009b46:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009b4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d00b      	beq.n	8009b6a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	2201      	movs	r2, #1
 8009b58:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b60:	f043 0201 	orr.w	r2, r3, #1
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009b6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009b6e:	f003 0302 	and.w	r3, r3, #2
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d011      	beq.n	8009b9a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8009b76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009b7a:	f003 0301 	and.w	r3, r3, #1
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d00b      	beq.n	8009b9a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	2202      	movs	r2, #2
 8009b88:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b90:	f043 0204 	orr.w	r2, r3, #4
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009b9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009b9e:	f003 0304 	and.w	r3, r3, #4
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d011      	beq.n	8009bca <UART_RxISR_8BIT_FIFOEN+0x12a>
 8009ba6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009baa:	f003 0301 	and.w	r3, r3, #1
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d00b      	beq.n	8009bca <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	2204      	movs	r2, #4
 8009bb8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009bc0:	f043 0202 	orr.w	r2, r3, #2
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d006      	beq.n	8009be2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009bd4:	6878      	ldr	r0, [r7, #4]
 8009bd6:	f7ff f869 	bl	8008cac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	2200      	movs	r2, #0
 8009bde:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009be8:	b29b      	uxth	r3, r3
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	f040 80a7 	bne.w	8009d3e <UART_RxISR_8BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bf6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009bf8:	e853 3f00 	ldrex	r3, [r3]
 8009bfc:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8009bfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009c04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	461a      	mov	r2, r3
 8009c0e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009c12:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009c14:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c16:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8009c18:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009c1a:	e841 2300 	strex	r3, r2, [r1]
 8009c1e:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8009c20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d1e4      	bne.n	8009bf0 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	3308      	adds	r3, #8
 8009c2c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009c30:	e853 3f00 	ldrex	r3, [r3]
 8009c34:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8009c36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009c38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009c3c:	f023 0301 	bic.w	r3, r3, #1
 8009c40:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	3308      	adds	r3, #8
 8009c4a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009c4e:	66ba      	str	r2, [r7, #104]	; 0x68
 8009c50:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c52:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8009c54:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009c56:	e841 2300 	strex	r3, r2, [r1]
 8009c5a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8009c5c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d1e1      	bne.n	8009c26 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	2220      	movs	r2, #32
 8009c66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	2200      	movs	r2, #0
 8009c74:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	4a62      	ldr	r2, [pc, #392]	; (8009e04 <UART_RxISR_8BIT_FIFOEN+0x364>)
 8009c7c:	4293      	cmp	r3, r2
 8009c7e:	d026      	beq.n	8009cce <UART_RxISR_8BIT_FIFOEN+0x22e>
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	4a60      	ldr	r2, [pc, #384]	; (8009e08 <UART_RxISR_8BIT_FIFOEN+0x368>)
 8009c86:	4293      	cmp	r3, r2
 8009c88:	d021      	beq.n	8009cce <UART_RxISR_8BIT_FIFOEN+0x22e>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	685b      	ldr	r3, [r3, #4]
 8009c90:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d01a      	beq.n	8009cce <UART_RxISR_8BIT_FIFOEN+0x22e>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009ca0:	e853 3f00 	ldrex	r3, [r3]
 8009ca4:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009ca6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ca8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009cac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	461a      	mov	r2, r3
 8009cb6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009cba:	657b      	str	r3, [r7, #84]	; 0x54
 8009cbc:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cbe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009cc0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009cc2:	e841 2300 	strex	r3, r2, [r1]
 8009cc6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009cc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d1e4      	bne.n	8009c98 <UART_RxISR_8BIT_FIFOEN+0x1f8>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009cd2:	2b01      	cmp	r3, #1
 8009cd4:	d130      	bne.n	8009d38 <UART_RxISR_8BIT_FIFOEN+0x298>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	2200      	movs	r2, #0
 8009cda:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ce2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ce4:	e853 3f00 	ldrex	r3, [r3]
 8009ce8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cec:	f023 0310 	bic.w	r3, r3, #16
 8009cf0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	461a      	mov	r2, r3
 8009cfa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009cfe:	643b      	str	r3, [r7, #64]	; 0x40
 8009d00:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d02:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009d04:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009d06:	e841 2300 	strex	r3, r2, [r1]
 8009d0a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d1e4      	bne.n	8009cdc <UART_RxISR_8BIT_FIFOEN+0x23c>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	69db      	ldr	r3, [r3, #28]
 8009d18:	f003 0310 	and.w	r3, r3, #16
 8009d1c:	2b10      	cmp	r3, #16
 8009d1e:	d103      	bne.n	8009d28 <UART_RxISR_8BIT_FIFOEN+0x288>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	2210      	movs	r2, #16
 8009d26:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009d2e:	4619      	mov	r1, r3
 8009d30:	6878      	ldr	r0, [r7, #4]
 8009d32:	f7fe ffc5 	bl	8008cc0 <HAL_UARTEx_RxEventCallback>
 8009d36:	e002      	b.n	8009d3e <UART_RxISR_8BIT_FIFOEN+0x29e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009d38:	6878      	ldr	r0, [r7, #4]
 8009d3a:	f000 fc5d 	bl	800a5f8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009d3e:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d006      	beq.n	8009d54 <UART_RxISR_8BIT_FIFOEN+0x2b4>
 8009d46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009d4a:	f003 0320 	and.w	r3, r3, #32
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	f47f aeca 	bne.w	8009ae8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009d5a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009d5e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d049      	beq.n	8009dfa <UART_RxISR_8BIT_FIFOEN+0x35a>
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009d6c:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8009d70:	429a      	cmp	r2, r3
 8009d72:	d242      	bcs.n	8009dfa <UART_RxISR_8BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	3308      	adds	r3, #8
 8009d7a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d7c:	6a3b      	ldr	r3, [r7, #32]
 8009d7e:	e853 3f00 	ldrex	r3, [r3]
 8009d82:	61fb      	str	r3, [r7, #28]
   return(result);
 8009d84:	69fb      	ldr	r3, [r7, #28]
 8009d86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009d8a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	3308      	adds	r3, #8
 8009d94:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8009d98:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009d9a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009d9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009da0:	e841 2300 	strex	r3, r2, [r1]
 8009da4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d1e3      	bne.n	8009d74 <UART_RxISR_8BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	4a17      	ldr	r2, [pc, #92]	; (8009e0c <UART_RxISR_8BIT_FIFOEN+0x36c>)
 8009db0:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	e853 3f00 	ldrex	r3, [r3]
 8009dbe:	60bb      	str	r3, [r7, #8]
   return(result);
 8009dc0:	68bb      	ldr	r3, [r7, #8]
 8009dc2:	f043 0320 	orr.w	r3, r3, #32
 8009dc6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	461a      	mov	r2, r3
 8009dd0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009dd4:	61bb      	str	r3, [r7, #24]
 8009dd6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dd8:	6979      	ldr	r1, [r7, #20]
 8009dda:	69ba      	ldr	r2, [r7, #24]
 8009ddc:	e841 2300 	strex	r3, r2, [r1]
 8009de0:	613b      	str	r3, [r7, #16]
   return(result);
 8009de2:	693b      	ldr	r3, [r7, #16]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d1e4      	bne.n	8009db2 <UART_RxISR_8BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009de8:	e007      	b.n	8009dfa <UART_RxISR_8BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	699a      	ldr	r2, [r3, #24]
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	f042 0208 	orr.w	r2, r2, #8
 8009df8:	619a      	str	r2, [r3, #24]
}
 8009dfa:	bf00      	nop
 8009dfc:	37b0      	adds	r7, #176	; 0xb0
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	bd80      	pop	{r7, pc}
 8009e02:	bf00      	nop
 8009e04:	46002400 	.word	0x46002400
 8009e08:	56002400 	.word	0x56002400
 8009e0c:	08009719 	.word	0x08009719

08009e10 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b0ae      	sub	sp, #184	; 0xb8
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009e1e:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	69db      	ldr	r3, [r3, #28]
 8009e28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	689b      	ldr	r3, [r3, #8]
 8009e3c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009e46:	2b22      	cmp	r3, #34	; 0x22
 8009e48:	f040 818b 	bne.w	800a162 <UART_RxISR_16BIT_FIFOEN+0x352>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009e52:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009e56:	e12e      	b.n	800a0b6 <UART_RxISR_16BIT_FIFOEN+0x2a6>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e5e:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8009e6a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8009e6e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8009e72:	4013      	ands	r3, r2
 8009e74:	b29a      	uxth	r2, r3
 8009e76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009e7a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e80:	1c9a      	adds	r2, r3, #2
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009e8c:	b29b      	uxth	r3, r3
 8009e8e:	3b01      	subs	r3, #1
 8009e90:	b29a      	uxth	r2, r3
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	69db      	ldr	r3, [r3, #28]
 8009e9e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009ea2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009ea6:	f003 0307 	and.w	r3, r3, #7
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d053      	beq.n	8009f56 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009eae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009eb2:	f003 0301 	and.w	r3, r3, #1
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d011      	beq.n	8009ede <UART_RxISR_16BIT_FIFOEN+0xce>
 8009eba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009ebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d00b      	beq.n	8009ede <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	2201      	movs	r2, #1
 8009ecc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ed4:	f043 0201 	orr.w	r2, r3, #1
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009ede:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009ee2:	f003 0302 	and.w	r3, r3, #2
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d011      	beq.n	8009f0e <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009eea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009eee:	f003 0301 	and.w	r3, r3, #1
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d00b      	beq.n	8009f0e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	2202      	movs	r2, #2
 8009efc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f04:	f043 0204 	orr.w	r2, r3, #4
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009f0e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009f12:	f003 0304 	and.w	r3, r3, #4
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d011      	beq.n	8009f3e <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009f1a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009f1e:	f003 0301 	and.w	r3, r3, #1
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d00b      	beq.n	8009f3e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	2204      	movs	r2, #4
 8009f2c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f34:	f043 0202 	orr.w	r2, r3, #2
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d006      	beq.n	8009f56 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009f48:	6878      	ldr	r0, [r7, #4]
 8009f4a:	f7fe feaf 	bl	8008cac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	2200      	movs	r2, #0
 8009f52:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009f5c:	b29b      	uxth	r3, r3
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	f040 80a9 	bne.w	800a0b6 <UART_RxISR_16BIT_FIFOEN+0x2a6>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009f6c:	e853 3f00 	ldrex	r3, [r3]
 8009f70:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009f72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009f74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009f78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	461a      	mov	r2, r3
 8009f82:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009f86:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009f8a:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f8c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009f8e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009f92:	e841 2300 	strex	r3, r2, [r1]
 8009f96:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009f98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d1e2      	bne.n	8009f64 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	3308      	adds	r3, #8
 8009fa4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fa6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009fa8:	e853 3f00 	ldrex	r3, [r3]
 8009fac:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009fae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009fb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009fb4:	f023 0301 	bic.w	r3, r3, #1
 8009fb8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	3308      	adds	r3, #8
 8009fc2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8009fc6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009fc8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fca:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009fcc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009fce:	e841 2300 	strex	r3, r2, [r1]
 8009fd2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009fd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d1e1      	bne.n	8009f9e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	2220      	movs	r2, #32
 8009fde:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	2200      	movs	r2, #0
 8009fec:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	4a62      	ldr	r2, [pc, #392]	; (800a17c <UART_RxISR_16BIT_FIFOEN+0x36c>)
 8009ff4:	4293      	cmp	r3, r2
 8009ff6:	d026      	beq.n	800a046 <UART_RxISR_16BIT_FIFOEN+0x236>
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	4a60      	ldr	r2, [pc, #384]	; (800a180 <UART_RxISR_16BIT_FIFOEN+0x370>)
 8009ffe:	4293      	cmp	r3, r2
 800a000:	d021      	beq.n	800a046 <UART_RxISR_16BIT_FIFOEN+0x236>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	685b      	ldr	r3, [r3, #4]
 800a008:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d01a      	beq.n	800a046 <UART_RxISR_16BIT_FIFOEN+0x236>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a016:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a018:	e853 3f00 	ldrex	r3, [r3]
 800a01c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a01e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a020:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a024:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	461a      	mov	r2, r3
 800a02e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a032:	65bb      	str	r3, [r7, #88]	; 0x58
 800a034:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a036:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a038:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a03a:	e841 2300 	strex	r3, r2, [r1]
 800a03e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a040:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a042:	2b00      	cmp	r3, #0
 800a044:	d1e4      	bne.n	800a010 <UART_RxISR_16BIT_FIFOEN+0x200>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a04a:	2b01      	cmp	r3, #1
 800a04c:	d130      	bne.n	800a0b0 <UART_RxISR_16BIT_FIFOEN+0x2a0>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	2200      	movs	r2, #0
 800a052:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a05a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a05c:	e853 3f00 	ldrex	r3, [r3]
 800a060:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a062:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a064:	f023 0310 	bic.w	r3, r3, #16
 800a068:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	461a      	mov	r2, r3
 800a072:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a076:	647b      	str	r3, [r7, #68]	; 0x44
 800a078:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a07a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a07c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a07e:	e841 2300 	strex	r3, r2, [r1]
 800a082:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a084:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a086:	2b00      	cmp	r3, #0
 800a088:	d1e4      	bne.n	800a054 <UART_RxISR_16BIT_FIFOEN+0x244>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	69db      	ldr	r3, [r3, #28]
 800a090:	f003 0310 	and.w	r3, r3, #16
 800a094:	2b10      	cmp	r3, #16
 800a096:	d103      	bne.n	800a0a0 <UART_RxISR_16BIT_FIFOEN+0x290>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	2210      	movs	r2, #16
 800a09e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a0a6:	4619      	mov	r1, r3
 800a0a8:	6878      	ldr	r0, [r7, #4]
 800a0aa:	f7fe fe09 	bl	8008cc0 <HAL_UARTEx_RxEventCallback>
 800a0ae:	e002      	b.n	800a0b6 <UART_RxISR_16BIT_FIFOEN+0x2a6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800a0b0:	6878      	ldr	r0, [r7, #4]
 800a0b2:	f000 faa1 	bl	800a5f8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a0b6:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d006      	beq.n	800a0cc <UART_RxISR_16BIT_FIFOEN+0x2bc>
 800a0be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a0c2:	f003 0320 	and.w	r3, r3, #32
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	f47f aec6 	bne.w	8009e58 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a0d2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a0d6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d049      	beq.n	800a172 <UART_RxISR_16BIT_FIFOEN+0x362>
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a0e4:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800a0e8:	429a      	cmp	r2, r3
 800a0ea:	d242      	bcs.n	800a172 <UART_RxISR_16BIT_FIFOEN+0x362>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	3308      	adds	r3, #8
 800a0f2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0f6:	e853 3f00 	ldrex	r3, [r3]
 800a0fa:	623b      	str	r3, [r7, #32]
   return(result);
 800a0fc:	6a3b      	ldr	r3, [r7, #32]
 800a0fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a102:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	3308      	adds	r3, #8
 800a10c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a110:	633a      	str	r2, [r7, #48]	; 0x30
 800a112:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a114:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a116:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a118:	e841 2300 	strex	r3, r2, [r1]
 800a11c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a11e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a120:	2b00      	cmp	r3, #0
 800a122:	d1e3      	bne.n	800a0ec <UART_RxISR_16BIT_FIFOEN+0x2dc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	4a17      	ldr	r2, [pc, #92]	; (800a184 <UART_RxISR_16BIT_FIFOEN+0x374>)
 800a128:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a130:	693b      	ldr	r3, [r7, #16]
 800a132:	e853 3f00 	ldrex	r3, [r3]
 800a136:	60fb      	str	r3, [r7, #12]
   return(result);
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	f043 0320 	orr.w	r3, r3, #32
 800a13e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	461a      	mov	r2, r3
 800a148:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a14c:	61fb      	str	r3, [r7, #28]
 800a14e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a150:	69b9      	ldr	r1, [r7, #24]
 800a152:	69fa      	ldr	r2, [r7, #28]
 800a154:	e841 2300 	strex	r3, r2, [r1]
 800a158:	617b      	str	r3, [r7, #20]
   return(result);
 800a15a:	697b      	ldr	r3, [r7, #20]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d1e4      	bne.n	800a12a <UART_RxISR_16BIT_FIFOEN+0x31a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a160:	e007      	b.n	800a172 <UART_RxISR_16BIT_FIFOEN+0x362>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	699a      	ldr	r2, [r3, #24]
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	f042 0208 	orr.w	r2, r2, #8
 800a170:	619a      	str	r2, [r3, #24]
}
 800a172:	bf00      	nop
 800a174:	37b8      	adds	r7, #184	; 0xb8
 800a176:	46bd      	mov	sp, r7
 800a178:	bd80      	pop	{r7, pc}
 800a17a:	bf00      	nop
 800a17c:	46002400 	.word	0x46002400
 800a180:	56002400 	.word	0x56002400
 800a184:	080098dd 	.word	0x080098dd

0800a188 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a188:	b480      	push	{r7}
 800a18a:	b083      	sub	sp, #12
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a190:	bf00      	nop
 800a192:	370c      	adds	r7, #12
 800a194:	46bd      	mov	sp, r7
 800a196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19a:	4770      	bx	lr

0800a19c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a19c:	b480      	push	{r7}
 800a19e:	b083      	sub	sp, #12
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a1a4:	bf00      	nop
 800a1a6:	370c      	adds	r7, #12
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ae:	4770      	bx	lr

0800a1b0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a1b0:	b480      	push	{r7}
 800a1b2:	b085      	sub	sp, #20
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a1be:	2b01      	cmp	r3, #1
 800a1c0:	d101      	bne.n	800a1c6 <HAL_UARTEx_DisableFifoMode+0x16>
 800a1c2:	2302      	movs	r3, #2
 800a1c4:	e027      	b.n	800a216 <HAL_UARTEx_DisableFifoMode+0x66>
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	2201      	movs	r2, #1
 800a1ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	2224      	movs	r2, #36	; 0x24
 800a1d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	681a      	ldr	r2, [r3, #0]
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	f022 0201 	bic.w	r2, r2, #1
 800a1ec:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a1f4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	68fa      	ldr	r2, [r7, #12]
 800a202:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2220      	movs	r2, #32
 800a208:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	2200      	movs	r2, #0
 800a210:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a214:	2300      	movs	r3, #0
}
 800a216:	4618      	mov	r0, r3
 800a218:	3714      	adds	r7, #20
 800a21a:	46bd      	mov	sp, r7
 800a21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a220:	4770      	bx	lr

0800a222 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a222:	b580      	push	{r7, lr}
 800a224:	b084      	sub	sp, #16
 800a226:	af00      	add	r7, sp, #0
 800a228:	6078      	str	r0, [r7, #4]
 800a22a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a232:	2b01      	cmp	r3, #1
 800a234:	d101      	bne.n	800a23a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a236:	2302      	movs	r3, #2
 800a238:	e02d      	b.n	800a296 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	2201      	movs	r2, #1
 800a23e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	2224      	movs	r2, #36	; 0x24
 800a246:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	681a      	ldr	r2, [r3, #0]
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	f022 0201 	bic.w	r2, r2, #1
 800a260:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	689b      	ldr	r3, [r3, #8]
 800a268:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	683a      	ldr	r2, [r7, #0]
 800a272:	430a      	orrs	r2, r1
 800a274:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a276:	6878      	ldr	r0, [r7, #4]
 800a278:	f000 f850 	bl	800a31c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	68fa      	ldr	r2, [r7, #12]
 800a282:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2220      	movs	r2, #32
 800a288:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	2200      	movs	r2, #0
 800a290:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a294:	2300      	movs	r3, #0
}
 800a296:	4618      	mov	r0, r3
 800a298:	3710      	adds	r7, #16
 800a29a:	46bd      	mov	sp, r7
 800a29c:	bd80      	pop	{r7, pc}

0800a29e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a29e:	b580      	push	{r7, lr}
 800a2a0:	b084      	sub	sp, #16
 800a2a2:	af00      	add	r7, sp, #0
 800a2a4:	6078      	str	r0, [r7, #4]
 800a2a6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a2ae:	2b01      	cmp	r3, #1
 800a2b0:	d101      	bne.n	800a2b6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a2b2:	2302      	movs	r3, #2
 800a2b4:	e02d      	b.n	800a312 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	2201      	movs	r2, #1
 800a2ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	2224      	movs	r2, #36	; 0x24
 800a2c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	681a      	ldr	r2, [r3, #0]
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	f022 0201 	bic.w	r2, r2, #1
 800a2dc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	689b      	ldr	r3, [r3, #8]
 800a2e4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	683a      	ldr	r2, [r7, #0]
 800a2ee:	430a      	orrs	r2, r1
 800a2f0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a2f2:	6878      	ldr	r0, [r7, #4]
 800a2f4:	f000 f812 	bl	800a31c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	68fa      	ldr	r2, [r7, #12]
 800a2fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2220      	movs	r2, #32
 800a304:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	2200      	movs	r2, #0
 800a30c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a310:	2300      	movs	r3, #0
}
 800a312:	4618      	mov	r0, r3
 800a314:	3710      	adds	r7, #16
 800a316:	46bd      	mov	sp, r7
 800a318:	bd80      	pop	{r7, pc}
	...

0800a31c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a31c:	b480      	push	{r7}
 800a31e:	b085      	sub	sp, #20
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d108      	bne.n	800a33e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	2201      	movs	r2, #1
 800a330:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	2201      	movs	r2, #1
 800a338:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a33c:	e031      	b.n	800a3a2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a33e:	2308      	movs	r3, #8
 800a340:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a342:	2308      	movs	r3, #8
 800a344:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	689b      	ldr	r3, [r3, #8]
 800a34c:	0e5b      	lsrs	r3, r3, #25
 800a34e:	b2db      	uxtb	r3, r3
 800a350:	f003 0307 	and.w	r3, r3, #7
 800a354:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	689b      	ldr	r3, [r3, #8]
 800a35c:	0f5b      	lsrs	r3, r3, #29
 800a35e:	b2db      	uxtb	r3, r3
 800a360:	f003 0307 	and.w	r3, r3, #7
 800a364:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a366:	7bbb      	ldrb	r3, [r7, #14]
 800a368:	7b3a      	ldrb	r2, [r7, #12]
 800a36a:	4911      	ldr	r1, [pc, #68]	; (800a3b0 <UARTEx_SetNbDataToProcess+0x94>)
 800a36c:	5c8a      	ldrb	r2, [r1, r2]
 800a36e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a372:	7b3a      	ldrb	r2, [r7, #12]
 800a374:	490f      	ldr	r1, [pc, #60]	; (800a3b4 <UARTEx_SetNbDataToProcess+0x98>)
 800a376:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a378:	fb93 f3f2 	sdiv	r3, r3, r2
 800a37c:	b29a      	uxth	r2, r3
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a384:	7bfb      	ldrb	r3, [r7, #15]
 800a386:	7b7a      	ldrb	r2, [r7, #13]
 800a388:	4909      	ldr	r1, [pc, #36]	; (800a3b0 <UARTEx_SetNbDataToProcess+0x94>)
 800a38a:	5c8a      	ldrb	r2, [r1, r2]
 800a38c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a390:	7b7a      	ldrb	r2, [r7, #13]
 800a392:	4908      	ldr	r1, [pc, #32]	; (800a3b4 <UARTEx_SetNbDataToProcess+0x98>)
 800a394:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a396:	fb93 f3f2 	sdiv	r3, r3, r2
 800a39a:	b29a      	uxth	r2, r3
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a3a2:	bf00      	nop
 800a3a4:	3714      	adds	r7, #20
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ac:	4770      	bx	lr
 800a3ae:	bf00      	nop
 800a3b0:	0800e544 	.word	0x0800e544
 800a3b4:	0800e54c 	.word	0x0800e54c

0800a3b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 800a3b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 800a3f0 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 800a3bc:	f7f9 fab8 	bl	8003930 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800a3c0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800a3c2:	e003      	b.n	800a3cc <LoopCopyDataInit>

0800a3c4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800a3c4:	4b0b      	ldr	r3, [pc, #44]	; (800a3f4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800a3c6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800a3c8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800a3ca:	3104      	adds	r1, #4

0800a3cc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800a3cc:	480a      	ldr	r0, [pc, #40]	; (800a3f8 <LoopForever+0xa>)
	ldr	r3, =_edata
 800a3ce:	4b0b      	ldr	r3, [pc, #44]	; (800a3fc <LoopForever+0xe>)
	adds	r2, r0, r1
 800a3d0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800a3d2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800a3d4:	d3f6      	bcc.n	800a3c4 <CopyDataInit>
	ldr	r2, =_sbss
 800a3d6:	4a0a      	ldr	r2, [pc, #40]	; (800a400 <LoopForever+0x12>)
	b	LoopFillZerobss
 800a3d8:	e002      	b.n	800a3e0 <LoopFillZerobss>

0800a3da <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800a3da:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800a3dc:	f842 3b04 	str.w	r3, [r2], #4

0800a3e0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800a3e0:	4b08      	ldr	r3, [pc, #32]	; (800a404 <LoopForever+0x16>)
	cmp	r2, r3
 800a3e2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800a3e4:	d3f9      	bcc.n	800a3da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800a3e6:	f001 fd65 	bl	800beb4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800a3ea:	f000 f91d 	bl	800a628 <main>

0800a3ee <LoopForever>:

LoopForever:
    b LoopForever
 800a3ee:	e7fe      	b.n	800a3ee <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 800a3f0:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 800a3f4:	0800e988 	.word	0x0800e988
	ldr	r0, =_sdata
 800a3f8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800a3fc:	200002e0 	.word	0x200002e0
	ldr	r2, =_sbss
 800a400:	200002e0 	.word	0x200002e0
	ldr	r3, = _ebss
 800a404:	20000660 	.word	0x20000660

0800a408 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800a408:	e7fe      	b.n	800a408 <ADC1_IRQHandler>
	...

0800a40c <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b096      	sub	sp, #88	; 0x58
 800a410:	af00      	add	r7, sp, #0
 800a412:	4603      	mov	r3, r0
 800a414:	71fb      	strb	r3, [r7, #7]
  if (Button == BUTTON_USER)
 800a416:	79fb      	ldrb	r3, [r7, #7]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d161      	bne.n	800a4e0 <BSP_PB_Callback+0xd4>
  {
    if( (HAL_GetTick() - tick_snapshot2) > 4000)
 800a41c:	f7f9 fb38 	bl	8003a90 <HAL_GetTick>
 800a420:	4602      	mov	r2, r0
 800a422:	4b31      	ldr	r3, [pc, #196]	; (800a4e8 <BSP_PB_Callback+0xdc>)
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	1ad3      	subs	r3, r2, r3
 800a428:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800a42c:	d958      	bls.n	800a4e0 <BSP_PB_Callback+0xd4>
    {
      if( (HAL_GetTick() - tick_snapshot) < 500)
 800a42e:	f7f9 fb2f 	bl	8003a90 <HAL_GetTick>
 800a432:	4602      	mov	r2, r0
 800a434:	4b2d      	ldr	r3, [pc, #180]	; (800a4ec <BSP_PB_Callback+0xe0>)
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	1ad3      	subs	r3, r2, r3
 800a43a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800a43e:	d21e      	bcs.n	800a47e <BSP_PB_Callback+0x72>
      {
        uint8_t svc_index;

        tick_snapshot2 = HAL_GetTick();
 800a440:	f7f9 fb26 	bl	8003a90 <HAL_GetTick>
 800a444:	4603      	mov	r3, r0
 800a446:	4a28      	ldr	r2, [pc, #160]	; (800a4e8 <BSP_PB_Callback+0xdc>)
 800a448:	6013      	str	r3, [r2, #0]
        if(global_svc_index == 1)
 800a44a:	4b29      	ldr	r3, [pc, #164]	; (800a4f0 <BSP_PB_Callback+0xe4>)
 800a44c:	781b      	ldrb	r3, [r3, #0]
 800a44e:	2b01      	cmp	r3, #1
 800a450:	d103      	bne.n	800a45a <BSP_PB_Callback+0x4e>
        {
          svc_index = 2;
 800a452:	2302      	movs	r3, #2
 800a454:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800a458:	e002      	b.n	800a460 <BSP_PB_Callback+0x54>
        }
        else
        {
          svc_index = 1;
 800a45a:	2301      	movs	r3, #1
 800a45c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        }
        /* Send a BLE_SVC command to select the service running */
        stm32wb_at_BLE_SVC_t param_BLE_SVC;
        param_BLE_SVC.index = svc_index;
 800a460:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a464:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
        stm32wb_at_client_Set(BLE_SVC, &param_BLE_SVC);
 800a468:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800a46c:	4619      	mov	r1, r3
 800a46e:	2001      	movs	r0, #1
 800a470:	f7f8 fdbe 	bl	8002ff0 <stm32wb_at_client_Set>
        
        global_svc_index = svc_index;
 800a474:	4a1e      	ldr	r2, [pc, #120]	; (800a4f0 <BSP_PB_Callback+0xe4>)
 800a476:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a47a:	7013      	strb	r3, [r2, #0]
        stm32wb_at_client_Set(BLE_NOTIF_VAL, &param_BLE_NOTIF_VAL);
      }
    }
  }

  return;
 800a47c:	e030      	b.n	800a4e0 <BSP_PB_Callback+0xd4>
        tick_snapshot = HAL_GetTick();
 800a47e:	f7f9 fb07 	bl	8003a90 <HAL_GetTick>
 800a482:	4603      	mov	r3, r0
 800a484:	4a19      	ldr	r2, [pc, #100]	; (800a4ec <BSP_PB_Callback+0xe0>)
 800a486:	6013      	str	r3, [r2, #0]
        if(global_svc_index == 1)
 800a488:	4b19      	ldr	r3, [pc, #100]	; (800a4f0 <BSP_PB_Callback+0xe4>)
 800a48a:	781b      	ldrb	r3, [r3, #0]
 800a48c:	2b01      	cmp	r3, #1
 800a48e:	d109      	bne.n	800a4a4 <BSP_PB_Callback+0x98>
          param_BLE_NOTIF_VAL.svc_index = 1;
 800a490:	2301      	movs	r3, #1
 800a492:	733b      	strb	r3, [r7, #12]
          param_BLE_NOTIF_VAL.char_index = 2;
 800a494:	2302      	movs	r3, #2
 800a496:	737b      	strb	r3, [r7, #13]
          param_BLE_NOTIF_VAL.val_tab[0] = 1;
 800a498:	2301      	movs	r3, #1
 800a49a:	73bb      	strb	r3, [r7, #14]
          param_BLE_NOTIF_VAL.val_tab_len = 1;
 800a49c:	2301      	movs	r3, #1
 800a49e:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800a4a2:	e016      	b.n	800a4d2 <BSP_PB_Callback+0xc6>
          param_BLE_NOTIF_VAL.svc_index = 2;
 800a4a4:	2302      	movs	r3, #2
 800a4a6:	733b      	strb	r3, [r7, #12]
          param_BLE_NOTIF_VAL.char_index = 1;
 800a4a8:	2301      	movs	r3, #1
 800a4aa:	737b      	strb	r3, [r7, #13]
          param_BLE_NOTIF_VAL.val_tab[0] = 80 + (HAL_GetTick() % 60);
 800a4ac:	f7f9 faf0 	bl	8003a90 <HAL_GetTick>
 800a4b0:	4601      	mov	r1, r0
 800a4b2:	4b10      	ldr	r3, [pc, #64]	; (800a4f4 <BSP_PB_Callback+0xe8>)
 800a4b4:	fba3 2301 	umull	r2, r3, r3, r1
 800a4b8:	095a      	lsrs	r2, r3, #5
 800a4ba:	4613      	mov	r3, r2
 800a4bc:	011b      	lsls	r3, r3, #4
 800a4be:	1a9b      	subs	r3, r3, r2
 800a4c0:	009b      	lsls	r3, r3, #2
 800a4c2:	1aca      	subs	r2, r1, r3
 800a4c4:	b2d3      	uxtb	r3, r2
 800a4c6:	3350      	adds	r3, #80	; 0x50
 800a4c8:	b2db      	uxtb	r3, r3
 800a4ca:	73bb      	strb	r3, [r7, #14]
          param_BLE_NOTIF_VAL.val_tab_len = 1;
 800a4cc:	2301      	movs	r3, #1
 800a4ce:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
        stm32wb_at_client_Set(BLE_NOTIF_VAL, &param_BLE_NOTIF_VAL);
 800a4d2:	f107 030c 	add.w	r3, r7, #12
 800a4d6:	4619      	mov	r1, r3
 800a4d8:	2012      	movs	r0, #18
 800a4da:	f7f8 fd89 	bl	8002ff0 <stm32wb_at_client_Set>
  return;
 800a4de:	bf00      	nop
 800a4e0:	bf00      	nop
}
 800a4e2:	3758      	adds	r7, #88	; 0x58
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	bd80      	pop	{r7, pc}
 800a4e8:	200003a0 	.word	0x200003a0
 800a4ec:	2000039c 	.word	0x2000039c
 800a4f0:	200003e4 	.word	0x200003e4
 800a4f4:	88888889 	.word	0x88888889

0800a4f8 <stm32wb_at_BLE_SVC_cb>:

uint8_t stm32wb_at_BLE_SVC_cb(stm32wb_at_BLE_SVC_t *param)
{
 800a4f8:	b480      	push	{r7}
 800a4fa:	b083      	sub	sp, #12
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
  global_svc_index = param->index;
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	781a      	ldrb	r2, [r3, #0]
 800a504:	4b04      	ldr	r3, [pc, #16]	; (800a518 <stm32wb_at_BLE_SVC_cb+0x20>)
 800a506:	701a      	strb	r2, [r3, #0]

  return 0;
 800a508:	2300      	movs	r3, #0
}
 800a50a:	4618      	mov	r0, r3
 800a50c:	370c      	adds	r7, #12
 800a50e:	46bd      	mov	sp, r7
 800a510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a514:	4770      	bx	lr
 800a516:	bf00      	nop
 800a518:	200003e4 	.word	0x200003e4

0800a51c <stm32wb_at_BLE_EVT_WRITE_cb>:

uint8_t stm32wb_at_BLE_EVT_WRITE_cb(stm32wb_at_BLE_EVT_WRITE_t *param)
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b082      	sub	sp, #8
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
  if( (param->svc_index == 1) && (param->char_index == 2) )
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	781b      	ldrb	r3, [r3, #0]
 800a528:	2b01      	cmp	r3, #1
 800a52a:	d10e      	bne.n	800a54a <stm32wb_at_BLE_EVT_WRITE_cb+0x2e>
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	785b      	ldrb	r3, [r3, #1]
 800a530:	2b02      	cmp	r3, #2
 800a532:	d10a      	bne.n	800a54a <stm32wb_at_BLE_EVT_WRITE_cb+0x2e>
  {
    if(param->val_tab[0] == 0)
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	789b      	ldrb	r3, [r3, #2]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d103      	bne.n	800a544 <stm32wb_at_BLE_EVT_WRITE_cb+0x28>
    {
      BSP_LED_Off(LED_GREEN);
 800a53c:	2001      	movs	r0, #1
 800a53e:	f7f6 fdbf 	bl	80010c0 <BSP_LED_Off>
 800a542:	e002      	b.n	800a54a <stm32wb_at_BLE_EVT_WRITE_cb+0x2e>
    }
    else
    {
      BSP_LED_On(LED_GREEN);
 800a544:	2001      	movs	r0, #1
 800a546:	f7f6 fd9d 	bl	8001084 <BSP_LED_On>
    }
  }

  return 0;
 800a54a:	2300      	movs	r3, #0
}
 800a54c:	4618      	mov	r0, r3
 800a54e:	3708      	adds	r7, #8
 800a550:	46bd      	mov	sp, r7
 800a552:	bd80      	pop	{r7, pc}

0800a554 <stm32wb_at_BLE_EVT_CONN_cb>:

uint8_t stm32wb_at_BLE_EVT_CONN_cb(stm32wb_at_BLE_EVT_CONN_t *param)
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b082      	sub	sp, #8
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
  if(param->status != 0)
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	781b      	ldrb	r3, [r3, #0]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d003      	beq.n	800a56c <stm32wb_at_BLE_EVT_CONN_cb+0x18>
  {
    printf("A remote device is  now connected\n");
 800a564:	4805      	ldr	r0, [pc, #20]	; (800a57c <stm32wb_at_BLE_EVT_CONN_cb+0x28>)
 800a566:	f001 fc11 	bl	800bd8c <puts>
 800a56a:	e002      	b.n	800a572 <stm32wb_at_BLE_EVT_CONN_cb+0x1e>
  }
  else
  {
    printf("The remote device is  now disconnected\n");
 800a56c:	4804      	ldr	r0, [pc, #16]	; (800a580 <stm32wb_at_BLE_EVT_CONN_cb+0x2c>)
 800a56e:	f001 fc0d 	bl	800bd8c <puts>
  }
  return 0;
 800a572:	2300      	movs	r3, #0
}
 800a574:	4618      	mov	r0, r3
 800a576:	3708      	adds	r7, #8
 800a578:	46bd      	mov	sp, r7
 800a57a:	bd80      	pop	{r7, pc}
 800a57c:	0800e2e4 	.word	0x0800e2e4
 800a580:	0800e308 	.word	0x0800e308

0800a584 <stm32wb_at_ll_Transmit>:
 * @param  pBuff pointer to the first byte to transmit
 * @param  Size byte count to transfer
 * @retval 0 in case of success, an error code otherwise
 */
uint8_t stm32wb_at_ll_Transmit(uint8_t *pBuff, uint16_t Size)
{
 800a584:	b580      	push	{r7, lr}
 800a586:	b084      	sub	sp, #16
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
 800a58c:	460b      	mov	r3, r1
 800a58e:	807b      	strh	r3, [r7, #2]
  uint8_t status;

  status = HAL_UART_Transmit(&huart4, pBuff, Size, 0xFFFF);
 800a590:	887a      	ldrh	r2, [r7, #2]
 800a592:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a596:	6879      	ldr	r1, [r7, #4]
 800a598:	4806      	ldr	r0, [pc, #24]	; (800a5b4 <stm32wb_at_ll_Transmit+0x30>)
 800a59a:	f7fd ffbd 	bl	8008518 <HAL_UART_Transmit>
 800a59e:	4603      	mov	r3, r0
 800a5a0:	73fb      	strb	r3, [r7, #15]
  printf("  TX: %s",pBuff);
 800a5a2:	6879      	ldr	r1, [r7, #4]
 800a5a4:	4804      	ldr	r0, [pc, #16]	; (800a5b8 <stm32wb_at_ll_Transmit+0x34>)
 800a5a6:	f001 fb8b 	bl	800bcc0 <iprintf>

  return status;
 800a5aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	3710      	adds	r7, #16
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	bd80      	pop	{r7, pc}
 800a5b4:	2000047c 	.word	0x2000047c
 800a5b8:	0800e330 	.word	0x0800e330

0800a5bc <stm32wb_at_ll_Async_receive>:
 * @brief  Triggers the reception of a byte
 * @param  new_frame contains the length of a new frame received in rx buffer, else 0
 * @retval None
 */
void stm32wb_at_ll_Async_receive(uint8_t new_frame)
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b082      	sub	sp, #8
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	4603      	mov	r3, r0
 800a5c4:	71fb      	strb	r3, [r7, #7]
  if(new_frame != 0)
 800a5c6:	79fb      	ldrb	r3, [r7, #7]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d003      	beq.n	800a5d4 <stm32wb_at_ll_Async_receive+0x18>
  {
    printf("  RX: %s\r\n",at_buffer);
 800a5cc:	4906      	ldr	r1, [pc, #24]	; (800a5e8 <stm32wb_at_ll_Async_receive+0x2c>)
 800a5ce:	4807      	ldr	r0, [pc, #28]	; (800a5ec <stm32wb_at_ll_Async_receive+0x30>)
 800a5d0:	f001 fb76 	bl	800bcc0 <iprintf>
  }
  HAL_UART_Receive_IT(&huart4, &received_byte, 1);
 800a5d4:	2201      	movs	r2, #1
 800a5d6:	4906      	ldr	r1, [pc, #24]	; (800a5f0 <stm32wb_at_ll_Async_receive+0x34>)
 800a5d8:	4806      	ldr	r0, [pc, #24]	; (800a5f4 <stm32wb_at_ll_Async_receive+0x38>)
 800a5da:	f7fe f83b 	bl	8008654 <HAL_UART_Receive_IT>

  return;
 800a5de:	bf00      	nop
}
 800a5e0:	3708      	adds	r7, #8
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	bd80      	pop	{r7, pc}
 800a5e6:	bf00      	nop
 800a5e8:	200003a4 	.word	0x200003a4
 800a5ec:	0800e33c 	.word	0x0800e33c
 800a5f0:	20000398 	.word	0x20000398
 800a5f4:	2000047c 	.word	0x2000047c

0800a5f8 <HAL_UART_RxCpltCallback>:
  * @note   This example shows a simple way to report end of DMA Rx transfer, and
  *         you can add your own implementation.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b082      	sub	sp, #8
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
  if((uint32_t)UartHandle->Instance == (uint32_t)UART4)
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	4a06      	ldr	r2, [pc, #24]	; (800a620 <HAL_UART_RxCpltCallback+0x28>)
 800a606:	4293      	cmp	r3, r2
 800a608:	d105      	bne.n	800a616 <HAL_UART_RxCpltCallback+0x1e>
  {
    stm32wb_at_Received(received_byte);
 800a60a:	4b06      	ldr	r3, [pc, #24]	; (800a624 <HAL_UART_RxCpltCallback+0x2c>)
 800a60c:	781b      	ldrb	r3, [r3, #0]
 800a60e:	4618      	mov	r0, r3
 800a610:	f7f6 fe32 	bl	8001278 <stm32wb_at_Received>
  }

  return;
 800a614:	bf00      	nop
 800a616:	bf00      	nop
}
 800a618:	3708      	adds	r7, #8
 800a61a:	46bd      	mov	sp, r7
 800a61c:	bd80      	pop	{r7, pc}
 800a61e:	bf00      	nop
 800a620:	40004c00 	.word	0x40004c00
 800a624:	20000398 	.word	0x20000398

0800a628 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b082      	sub	sp, #8
 800a62c:	af00      	add	r7, sp, #0
  uint8_t status = 0;
 800a62e:	2300      	movs	r3, #0
 800a630:	71fb      	strb	r3, [r7, #7]
       - Configure the Flash prefetch
       - Configure the Systick to generate an interrupt each 1 msec
       - Set NVIC Group Priority to 3
       - Low Level Initialization
     */
  HAL_Init();
 800a632:	f7f9 f9b5 	bl	80039a0 <HAL_Init>

  /* Enable the Instruction Cache */
  CACHE_Enable();
 800a636:	f000 f973 	bl	800a920 <CACHE_Enable>

  /* Configure the System clock to have a frequency of 160 MHz */
  SystemClock_Config();
 800a63a:	f000 f867 	bl	800a70c <SystemClock_Config>

  BSP_LED_Init(LED_GREEN);
 800a63e:	2001      	movs	r0, #1
 800a640:	f7f6 fcce 	bl	8000fe0 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 800a644:	2000      	movs	r0, #0
 800a646:	f7f6 fccb 	bl	8000fe0 <BSP_LED_Init>

  MX_USART1_UART_Init();
 800a64a:	f000 f8d1 	bl	800a7f0 <MX_USART1_UART_Init>
  MX_USART4_UART_Init();
 800a64e:	f000 f91b 	bl	800a888 <MX_USART4_UART_Init>

  BSP_LED_Off(LED_GREEN);
 800a652:	2001      	movs	r0, #1
 800a654:	f7f6 fd34 	bl	80010c0 <BSP_LED_Off>
  printf("--------------------------------------------\n");
 800a658:	4824      	ldr	r0, [pc, #144]	; (800a6ec <main+0xc4>)
 800a65a:	f001 fb97 	bl	800bd8c <puts>
  printf("Start of the STM32WB5M module AT example.\n");
 800a65e:	4824      	ldr	r0, [pc, #144]	; (800a6f0 <main+0xc8>)
 800a660:	f001 fb94 	bl	800bd8c <puts>
  printf("Run ST BLE sensor application on your smartphone and connect to you device.\n");
 800a664:	4823      	ldr	r0, [pc, #140]	; (800a6f4 <main+0xcc>)
 800a666:	f001 fb91 	bl	800bd8c <puts>
  printf("Press user button:\n");
 800a66a:	4823      	ldr	r0, [pc, #140]	; (800a6f8 <main+0xd0>)
 800a66c:	f001 fb8e 	bl	800bd8c <puts>
  printf("  - once to notify a value.\n");
 800a670:	4822      	ldr	r0, [pc, #136]	; (800a6fc <main+0xd4>)
 800a672:	f001 fb8b 	bl	800bd8c <puts>
  printf("  - twice to toggle the BLE service.\n");
 800a676:	4822      	ldr	r0, [pc, #136]	; (800a700 <main+0xd8>)
 800a678:	f001 fb88 	bl	800bd8c <puts>
  printf("--------------------------------------------\n");
 800a67c:	481b      	ldr	r0, [pc, #108]	; (800a6ec <main+0xc4>)
 800a67e:	f001 fb85 	bl	800bd8c <puts>

  HAL_Delay(2000);
 800a682:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a686:	f7f9 fa0f 	bl	8003aa8 <HAL_Delay>
  status |= stm32wb_at_Init(&at_buffer[0], sizeof(at_buffer));
 800a68a:	2140      	movs	r1, #64	; 0x40
 800a68c:	481d      	ldr	r0, [pc, #116]	; (800a704 <main+0xdc>)
 800a68e:	f7f6 fdbf 	bl	8001210 <stm32wb_at_Init>
 800a692:	4603      	mov	r3, r0
 800a694:	461a      	mov	r2, r3
 800a696:	79fb      	ldrb	r3, [r7, #7]
 800a698:	4313      	orrs	r3, r2
 800a69a:	71fb      	strb	r3, [r7, #7]
  status |= stm32wb_at_client_Init();
 800a69c:	f7f7 f838 	bl	8001710 <stm32wb_at_client_Init>
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	461a      	mov	r2, r3
 800a6a4:	79fb      	ldrb	r3, [r7, #7]
 800a6a6:	4313      	orrs	r3, r2
 800a6a8:	71fb      	strb	r3, [r7, #7]

  /* Test the UART communication link with BLE module */
  status |= stm32wb_at_client_Query(BLE_TEST);
 800a6aa:	2000      	movs	r0, #0
 800a6ac:	f7f7 f842 	bl	8001734 <stm32wb_at_client_Query>
 800a6b0:	4603      	mov	r3, r0
 800a6b2:	461a      	mov	r2, r3
 800a6b4:	79fb      	ldrb	r3, [r7, #7]
 800a6b6:	4313      	orrs	r3, r2
 800a6b8:	71fb      	strb	r3, [r7, #7]
  HAL_Delay(1000);
 800a6ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a6be:	f7f9 f9f3 	bl	8003aa8 <HAL_Delay>

  if(status != 0)
 800a6c2:	79fb      	ldrb	r3, [r7, #7]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d001      	beq.n	800a6cc <main+0xa4>
  {
    Error_Handler();
 800a6c8:	f000 f946 	bl	800a958 <Error_Handler>
  }
  /* Send a BLE AT command to start the BLE P2P server application */
  stm32wb_at_BLE_SVC_t param_BLE_SVC;
  global_svc_index = 1;
 800a6cc:	4b0e      	ldr	r3, [pc, #56]	; (800a708 <main+0xe0>)
 800a6ce:	2201      	movs	r2, #1
 800a6d0:	701a      	strb	r2, [r3, #0]
  param_BLE_SVC.index = global_svc_index;
 800a6d2:	4b0d      	ldr	r3, [pc, #52]	; (800a708 <main+0xe0>)
 800a6d4:	781b      	ldrb	r3, [r3, #0]
 800a6d6:	703b      	strb	r3, [r7, #0]
  stm32wb_at_client_Set(BLE_SVC, &param_BLE_SVC);
 800a6d8:	463b      	mov	r3, r7
 800a6da:	4619      	mov	r1, r3
 800a6dc:	2001      	movs	r0, #1
 800a6de:	f7f8 fc87 	bl	8002ff0 <stm32wb_at_client_Set>

  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 800a6e2:	2101      	movs	r1, #1
 800a6e4:	2000      	movs	r0, #0
 800a6e6:	f7f6 fd09 	bl	80010fc <BSP_PB_Init>

  /* Infinite loop */
  while (1)
 800a6ea:	e7fe      	b.n	800a6ea <main+0xc2>
 800a6ec:	0800e348 	.word	0x0800e348
 800a6f0:	0800e378 	.word	0x0800e378
 800a6f4:	0800e3a4 	.word	0x0800e3a4
 800a6f8:	0800e3f0 	.word	0x0800e3f0
 800a6fc:	0800e404 	.word	0x0800e404
 800a700:	0800e420 	.word	0x0800e420
 800a704:	200003a4 	.word	0x200003a4
 800a708:	200003e4 	.word	0x200003e4

0800a70c <SystemClock_Config>:
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
void SystemClock_Config(void)
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b0a0      	sub	sp, #128	; 0x80
 800a710:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a712:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800a716:	2200      	movs	r2, #0
 800a718:	601a      	str	r2, [r3, #0]
 800a71a:	605a      	str	r2, [r3, #4]
 800a71c:	609a      	str	r2, [r3, #8]
 800a71e:	60da      	str	r2, [r3, #12]
 800a720:	611a      	str	r2, [r3, #16]
 800a722:	615a      	str	r2, [r3, #20]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a724:	f107 0308 	add.w	r3, r7, #8
 800a728:	2260      	movs	r2, #96	; 0x60
 800a72a:	2100      	movs	r1, #0
 800a72c:	4618      	mov	r0, r3
 800a72e:	f001 fbb3 	bl	800be98 <memset>

  /* Enable voltage range 1 for frequency above 100 Mhz */
  __HAL_RCC_PWR_CLK_ENABLE();
 800a732:	4b2e      	ldr	r3, [pc, #184]	; (800a7ec <SystemClock_Config+0xe0>)
 800a734:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a738:	4a2c      	ldr	r2, [pc, #176]	; (800a7ec <SystemClock_Config+0xe0>)
 800a73a:	f043 0304 	orr.w	r3, r3, #4
 800a73e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800a742:	4b2a      	ldr	r3, [pc, #168]	; (800a7ec <SystemClock_Config+0xe0>)
 800a744:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a748:	f003 0304 	and.w	r3, r3, #4
 800a74c:	607b      	str	r3, [r7, #4]
 800a74e:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800a750:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 800a754:	f7f9 fe28 	bl	80043a8 <HAL_PWREx_ControlVoltageScaling>

  /* Switch to SMPS regulator instead of LDO */
  HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY);
 800a758:	2002      	movs	r0, #2
 800a75a:	f7f9 feb1 	bl	80044c0 <HAL_PWREx_ConfigSupply>

  __HAL_RCC_PWR_CLK_DISABLE();
 800a75e:	4b23      	ldr	r3, [pc, #140]	; (800a7ec <SystemClock_Config+0xe0>)
 800a760:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a764:	4a21      	ldr	r2, [pc, #132]	; (800a7ec <SystemClock_Config+0xe0>)
 800a766:	f023 0304 	bic.w	r3, r3, #4
 800a76a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /* MSI Oscillator enabled at reset (4Mhz), activate PLL with MSI as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800a76e:	2310      	movs	r3, #16
 800a770:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800a772:	2301      	movs	r3, #1
 800a774:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 800a776:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a77a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800a77c:	2310      	movs	r3, #16
 800a77e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a780:	2302      	movs	r3, #2
 800a782:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800a784:	2301      	movs	r3, #1
 800a786:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 800a788:	2300      	movs	r3, #0
 800a78a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800a78c:	2301      	movs	r3, #1
 800a78e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 80;
 800a790:	2350      	movs	r3, #80	; 0x50
 800a792:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = 2;
 800a794:	2302      	movs	r3, #2
 800a796:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 800a798:	2302      	movs	r3, #2
 800a79a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800a79c:	2302      	movs	r3, #2
 800a79e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLFRACN= 0;
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a7a4:	f107 0308 	add.w	r3, r7, #8
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	f7f9 fed9 	bl	8004560 <HAL_RCC_OscConfig>
 800a7ae:	4603      	mov	r3, r0
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d000      	beq.n	800a7b6 <SystemClock_Config+0xaa>
  {
    /* Initialization Error */
    while(1);
 800a7b4:	e7fe      	b.n	800a7b4 <SystemClock_Config+0xa8>
  }

  /* Select PLL as system clock source and configure bus clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 800a7b6:	231f      	movs	r3, #31
 800a7b8:	66bb      	str	r3, [r7, #104]	; 0x68
                                 RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_PCLK3);
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a7ba:	2303      	movs	r3, #3
 800a7bc:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a7be:	2300      	movs	r3, #0
 800a7c0:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	67fb      	str	r3, [r7, #124]	; 0x7c
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800a7ce:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800a7d2:	2104      	movs	r1, #4
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	f7fa fd9f 	bl	8005318 <HAL_RCC_ClockConfig>
 800a7da:	4603      	mov	r3, r0
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d000      	beq.n	800a7e2 <SystemClock_Config+0xd6>
  {
    /* Initialization Error */
    while(1);
 800a7e0:	e7fe      	b.n	800a7e0 <SystemClock_Config+0xd4>
  }
}
 800a7e2:	bf00      	nop
 800a7e4:	3780      	adds	r7, #128	; 0x80
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	bd80      	pop	{r7, pc}
 800a7ea:	bf00      	nop
 800a7ec:	46020c00 	.word	0x46020c00

0800a7f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800a7f4:	4b22      	ldr	r3, [pc, #136]	; (800a880 <MX_USART1_UART_Init+0x90>)
 800a7f6:	4a23      	ldr	r2, [pc, #140]	; (800a884 <MX_USART1_UART_Init+0x94>)
 800a7f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800a7fa:	4b21      	ldr	r3, [pc, #132]	; (800a880 <MX_USART1_UART_Init+0x90>)
 800a7fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800a800:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800a802:	4b1f      	ldr	r3, [pc, #124]	; (800a880 <MX_USART1_UART_Init+0x90>)
 800a804:	2200      	movs	r2, #0
 800a806:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800a808:	4b1d      	ldr	r3, [pc, #116]	; (800a880 <MX_USART1_UART_Init+0x90>)
 800a80a:	2200      	movs	r2, #0
 800a80c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800a80e:	4b1c      	ldr	r3, [pc, #112]	; (800a880 <MX_USART1_UART_Init+0x90>)
 800a810:	2200      	movs	r2, #0
 800a812:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800a814:	4b1a      	ldr	r3, [pc, #104]	; (800a880 <MX_USART1_UART_Init+0x90>)
 800a816:	220c      	movs	r2, #12
 800a818:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a81a:	4b19      	ldr	r3, [pc, #100]	; (800a880 <MX_USART1_UART_Init+0x90>)
 800a81c:	2200      	movs	r2, #0
 800a81e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800a820:	4b17      	ldr	r3, [pc, #92]	; (800a880 <MX_USART1_UART_Init+0x90>)
 800a822:	2200      	movs	r2, #0
 800a824:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a826:	4b16      	ldr	r3, [pc, #88]	; (800a880 <MX_USART1_UART_Init+0x90>)
 800a828:	2200      	movs	r2, #0
 800a82a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800a82c:	4b14      	ldr	r3, [pc, #80]	; (800a880 <MX_USART1_UART_Init+0x90>)
 800a82e:	2200      	movs	r2, #0
 800a830:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a832:	4b13      	ldr	r3, [pc, #76]	; (800a880 <MX_USART1_UART_Init+0x90>)
 800a834:	2200      	movs	r2, #0
 800a836:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800a838:	4811      	ldr	r0, [pc, #68]	; (800a880 <MX_USART1_UART_Init+0x90>)
 800a83a:	f7fd fe1d 	bl	8008478 <HAL_UART_Init>
 800a83e:	4603      	mov	r3, r0
 800a840:	2b00      	cmp	r3, #0
 800a842:	d001      	beq.n	800a848 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800a844:	f000 f888 	bl	800a958 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800a848:	2100      	movs	r1, #0
 800a84a:	480d      	ldr	r0, [pc, #52]	; (800a880 <MX_USART1_UART_Init+0x90>)
 800a84c:	f7ff fce9 	bl	800a222 <HAL_UARTEx_SetTxFifoThreshold>
 800a850:	4603      	mov	r3, r0
 800a852:	2b00      	cmp	r3, #0
 800a854:	d001      	beq.n	800a85a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800a856:	f000 f87f 	bl	800a958 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800a85a:	2100      	movs	r1, #0
 800a85c:	4808      	ldr	r0, [pc, #32]	; (800a880 <MX_USART1_UART_Init+0x90>)
 800a85e:	f7ff fd1e 	bl	800a29e <HAL_UARTEx_SetRxFifoThreshold>
 800a862:	4603      	mov	r3, r0
 800a864:	2b00      	cmp	r3, #0
 800a866:	d001      	beq.n	800a86c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800a868:	f000 f876 	bl	800a958 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800a86c:	4804      	ldr	r0, [pc, #16]	; (800a880 <MX_USART1_UART_Init+0x90>)
 800a86e:	f7ff fc9f 	bl	800a1b0 <HAL_UARTEx_DisableFifoMode>
 800a872:	4603      	mov	r3, r0
 800a874:	2b00      	cmp	r3, #0
 800a876:	d001      	beq.n	800a87c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800a878:	f000 f86e 	bl	800a958 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800a87c:	bf00      	nop
 800a87e:	bd80      	pop	{r7, pc}
 800a880:	200003e8 	.word	0x200003e8
 800a884:	40013800 	.word	0x40013800

0800a888 <MX_USART4_UART_Init>:
  * @brief USART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART4_UART_Init(void)
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = UART4;
 800a88c:	4b22      	ldr	r3, [pc, #136]	; (800a918 <MX_USART4_UART_Init+0x90>)
 800a88e:	4a23      	ldr	r2, [pc, #140]	; (800a91c <MX_USART4_UART_Init+0x94>)
 800a890:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 800a892:	4b21      	ldr	r3, [pc, #132]	; (800a918 <MX_USART4_UART_Init+0x90>)
 800a894:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800a898:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800a89a:	4b1f      	ldr	r3, [pc, #124]	; (800a918 <MX_USART4_UART_Init+0x90>)
 800a89c:	2200      	movs	r2, #0
 800a89e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800a8a0:	4b1d      	ldr	r3, [pc, #116]	; (800a918 <MX_USART4_UART_Init+0x90>)
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800a8a6:	4b1c      	ldr	r3, [pc, #112]	; (800a918 <MX_USART4_UART_Init+0x90>)
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800a8ac:	4b1a      	ldr	r3, [pc, #104]	; (800a918 <MX_USART4_UART_Init+0x90>)
 800a8ae:	220c      	movs	r2, #12
 800a8b0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a8b2:	4b19      	ldr	r3, [pc, #100]	; (800a918 <MX_USART4_UART_Init+0x90>)
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800a8b8:	4b17      	ldr	r3, [pc, #92]	; (800a918 <MX_USART4_UART_Init+0x90>)
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a8be:	4b16      	ldr	r3, [pc, #88]	; (800a918 <MX_USART4_UART_Init+0x90>)
 800a8c0:	2200      	movs	r2, #0
 800a8c2:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800a8c4:	4b14      	ldr	r3, [pc, #80]	; (800a918 <MX_USART4_UART_Init+0x90>)
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a8ca:	4b13      	ldr	r3, [pc, #76]	; (800a918 <MX_USART4_UART_Init+0x90>)
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800a8d0:	4811      	ldr	r0, [pc, #68]	; (800a918 <MX_USART4_UART_Init+0x90>)
 800a8d2:	f7fd fdd1 	bl	8008478 <HAL_UART_Init>
 800a8d6:	4603      	mov	r3, r0
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d001      	beq.n	800a8e0 <MX_USART4_UART_Init+0x58>
  {
    Error_Handler();
 800a8dc:	f000 f83c 	bl	800a958 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800a8e0:	2100      	movs	r1, #0
 800a8e2:	480d      	ldr	r0, [pc, #52]	; (800a918 <MX_USART4_UART_Init+0x90>)
 800a8e4:	f7ff fc9d 	bl	800a222 <HAL_UARTEx_SetTxFifoThreshold>
 800a8e8:	4603      	mov	r3, r0
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d001      	beq.n	800a8f2 <MX_USART4_UART_Init+0x6a>
  {
    Error_Handler();
 800a8ee:	f000 f833 	bl	800a958 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800a8f2:	2100      	movs	r1, #0
 800a8f4:	4808      	ldr	r0, [pc, #32]	; (800a918 <MX_USART4_UART_Init+0x90>)
 800a8f6:	f7ff fcd2 	bl	800a29e <HAL_UARTEx_SetRxFifoThreshold>
 800a8fa:	4603      	mov	r3, r0
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d001      	beq.n	800a904 <MX_USART4_UART_Init+0x7c>
  {
    Error_Handler();
 800a900:	f000 f82a 	bl	800a958 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 800a904:	4804      	ldr	r0, [pc, #16]	; (800a918 <MX_USART4_UART_Init+0x90>)
 800a906:	f7ff fc53 	bl	800a1b0 <HAL_UARTEx_DisableFifoMode>
 800a90a:	4603      	mov	r3, r0
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d001      	beq.n	800a914 <MX_USART4_UART_Init+0x8c>
  {
    Error_Handler();
 800a910:	f000 f822 	bl	800a958 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 800a914:	bf00      	nop
 800a916:	bd80      	pop	{r7, pc}
 800a918:	2000047c 	.word	0x2000047c
 800a91c:	40004c00 	.word	0x40004c00

0800a920 <CACHE_Enable>:
  * @brief  Enable ICACHE with 1-way set-associative configuration.
  * @param  None
  * @retval None
  */
static void CACHE_Enable(void)
{
 800a920:	b580      	push	{r7, lr}
 800a922:	af00      	add	r7, sp, #0
  /* Configure ICACHE associativity mode */
  HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY);
 800a924:	2000      	movs	r0, #0
 800a926:	f7f9 fd0f 	bl	8004348 <HAL_ICACHE_ConfigAssociativityMode>

  /* Enable ICACHE */
  HAL_ICACHE_Enable();
 800a92a:	f7f9 fd2d 	bl	8004388 <HAL_ICACHE_Enable>
}
 800a92e:	bf00      	nop
 800a930:	bd80      	pop	{r7, pc}
	...

0800a934 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 800a934:	b580      	push	{r7, lr}
 800a936:	b082      	sub	sp, #8
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 800a93c:	1d39      	adds	r1, r7, #4
 800a93e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a942:	2201      	movs	r2, #1
 800a944:	4803      	ldr	r0, [pc, #12]	; (800a954 <__io_putchar+0x20>)
 800a946:	f7fd fde7 	bl	8008518 <HAL_UART_Transmit>

  return ch;
 800a94a:	687b      	ldr	r3, [r7, #4]
}
 800a94c:	4618      	mov	r0, r3
 800a94e:	3708      	adds	r7, #8
 800a950:	46bd      	mov	sp, r7
 800a952:	bd80      	pop	{r7, pc}
 800a954:	200003e8 	.word	0x200003e8

0800a958 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  /* Turn LED6 on */
  BSP_LED_On(LED_RED);
 800a95c:	2000      	movs	r0, #0
 800a95e:	f7f6 fb91 	bl	8001084 <BSP_LED_On>
  while (1);
 800a962:	e7fe      	b.n	800a962 <Error_Handler+0xa>

0800a964 <HAL_MspInit>:
/**
  * @brief  Initialize the Global MSP.
  * @retval None
  */
void HAL_MspInit(void)
{
 800a964:	b480      	push	{r7}
 800a966:	af00      	add	r7, sp, #0
  /* NOTE : This function is generated automatically by STM32CubeMX and eventually
            modified by the user
   */
}
 800a968:	bf00      	nop
 800a96a:	46bd      	mov	sp, r7
 800a96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a970:	4770      	bx	lr
	...

0800a974 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800a974:	b580      	push	{r7, lr}
 800a976:	b0be      	sub	sp, #248	; 0xf8
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a97c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800a980:	2200      	movs	r2, #0
 800a982:	601a      	str	r2, [r3, #0]
 800a984:	605a      	str	r2, [r3, #4]
 800a986:	609a      	str	r2, [r3, #8]
 800a988:	60da      	str	r2, [r3, #12]
 800a98a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a98c:	f107 0318 	add.w	r3, r7, #24
 800a990:	22c8      	movs	r2, #200	; 0xc8
 800a992:	2100      	movs	r1, #0
 800a994:	4618      	mov	r0, r3
 800a996:	f001 fa7f 	bl	800be98 <memset>
  if(huart->Instance==USART1)
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	4a50      	ldr	r2, [pc, #320]	; (800aae0 <HAL_UART_MspInit+0x16c>)
 800a9a0:	4293      	cmp	r3, r2
 800a9a2:	d145      	bne.n	800aa30 <HAL_UART_MspInit+0xbc>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800a9a4:	f04f 0201 	mov.w	r2, #1
 800a9a8:	f04f 0300 	mov.w	r3, #0
 800a9ac:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a9b4:	f107 0318 	add.w	r3, r7, #24
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	f7fb f87d 	bl	8005ab8 <HAL_RCCEx_PeriphCLKConfig>
 800a9be:	4603      	mov	r3, r0
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d001      	beq.n	800a9c8 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 800a9c4:	f7ff ffc8 	bl	800a958 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800a9c8:	4b46      	ldr	r3, [pc, #280]	; (800aae4 <HAL_UART_MspInit+0x170>)
 800a9ca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a9ce:	4a45      	ldr	r2, [pc, #276]	; (800aae4 <HAL_UART_MspInit+0x170>)
 800a9d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a9d4:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 800a9d8:	4b42      	ldr	r3, [pc, #264]	; (800aae4 <HAL_UART_MspInit+0x170>)
 800a9da:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a9de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a9e2:	617b      	str	r3, [r7, #20]
 800a9e4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a9e6:	4b3f      	ldr	r3, [pc, #252]	; (800aae4 <HAL_UART_MspInit+0x170>)
 800a9e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a9ec:	4a3d      	ldr	r2, [pc, #244]	; (800aae4 <HAL_UART_MspInit+0x170>)
 800a9ee:	f043 0301 	orr.w	r3, r3, #1
 800a9f2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800a9f6:	4b3b      	ldr	r3, [pc, #236]	; (800aae4 <HAL_UART_MspInit+0x170>)
 800a9f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a9fc:	f003 0301 	and.w	r3, r3, #1
 800aa00:	613b      	str	r3, [r7, #16]
 800aa02:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 800aa04:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800aa08:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aa0c:	2302      	movs	r3, #2
 800aa0e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aa12:	2300      	movs	r3, #0
 800aa14:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aa18:	2300      	movs	r3, #0
 800aa1a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800aa1e:	2307      	movs	r3, #7
 800aa20:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800aa24:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800aa28:	4619      	mov	r1, r3
 800aa2a:	482f      	ldr	r0, [pc, #188]	; (800aae8 <HAL_UART_MspInit+0x174>)
 800aa2c:	f7f9 fa9c 	bl	8003f68 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  if(huart->Instance==UART4)
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	4a2d      	ldr	r2, [pc, #180]	; (800aaec <HAL_UART_MspInit+0x178>)
 800aa36:	4293      	cmp	r3, r2
 800aa38:	d14d      	bne.n	800aad6 <HAL_UART_MspInit+0x162>
  /* USER CODE BEGIN USART4_MspInit 0 */

  /* USER CODE END USART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800aa3a:	f04f 0208 	mov.w	r2, #8
 800aa3e:	f04f 0300 	mov.w	r3, #0
 800aa42:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800aa46:	2300      	movs	r3, #0
 800aa48:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800aa4a:	f107 0318 	add.w	r3, r7, #24
 800aa4e:	4618      	mov	r0, r3
 800aa50:	f7fb f832 	bl	8005ab8 <HAL_RCCEx_PeriphCLKConfig>
 800aa54:	4603      	mov	r3, r0
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d001      	beq.n	800aa5e <HAL_UART_MspInit+0xea>
    {
      Error_Handler();
 800aa5a:	f7ff ff7d 	bl	800a958 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800aa5e:	4b21      	ldr	r3, [pc, #132]	; (800aae4 <HAL_UART_MspInit+0x170>)
 800aa60:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800aa64:	4a1f      	ldr	r2, [pc, #124]	; (800aae4 <HAL_UART_MspInit+0x170>)
 800aa66:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800aa6a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800aa6e:	4b1d      	ldr	r3, [pc, #116]	; (800aae4 <HAL_UART_MspInit+0x170>)
 800aa70:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800aa74:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800aa78:	60fb      	str	r3, [r7, #12]
 800aa7a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800aa7c:	4b19      	ldr	r3, [pc, #100]	; (800aae4 <HAL_UART_MspInit+0x170>)
 800aa7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aa82:	4a18      	ldr	r2, [pc, #96]	; (800aae4 <HAL_UART_MspInit+0x170>)
 800aa84:	f043 0304 	orr.w	r3, r3, #4
 800aa88:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800aa8c:	4b15      	ldr	r3, [pc, #84]	; (800aae4 <HAL_UART_MspInit+0x170>)
 800aa8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aa92:	f003 0304 	and.w	r3, r3, #4
 800aa96:	60bb      	str	r3, [r7, #8]
 800aa98:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800aa9a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800aa9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aaa2:	2302      	movs	r3, #2
 800aaa4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aaae:	2300      	movs	r3, #0
 800aab0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800aab4:	2308      	movs	r3, #8
 800aab6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800aaba:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800aabe:	4619      	mov	r1, r3
 800aac0:	480b      	ldr	r0, [pc, #44]	; (800aaf0 <HAL_UART_MspInit+0x17c>)
 800aac2:	f7f9 fa51 	bl	8003f68 <HAL_GPIO_Init>
    
    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800aac6:	2200      	movs	r2, #0
 800aac8:	2100      	movs	r1, #0
 800aaca:	2040      	movs	r0, #64	; 0x40
 800aacc:	f7f9 f8eb 	bl	8003ca6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800aad0:	2040      	movs	r0, #64	; 0x40
 800aad2:	f7f9 f902 	bl	8003cda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 800aad6:	bf00      	nop
 800aad8:	37f8      	adds	r7, #248	; 0xf8
 800aada:	46bd      	mov	sp, r7
 800aadc:	bd80      	pop	{r7, pc}
 800aade:	bf00      	nop
 800aae0:	40013800 	.word	0x40013800
 800aae4:	46020c00 	.word	0x46020c00
 800aae8:	42020000 	.word	0x42020000
 800aaec:	40004c00 	.word	0x40004c00
 800aaf0:	42020800 	.word	0x42020800

0800aaf4 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800aaf4:	b480      	push	{r7}
 800aaf6:	af00      	add	r7, sp, #0
}
 800aaf8:	bf00      	nop
 800aafa:	46bd      	mov	sp, r7
 800aafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab00:	4770      	bx	lr

0800ab02 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800ab02:	b480      	push	{r7}
 800ab04:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800ab06:	e7fe      	b.n	800ab06 <HardFault_Handler+0x4>

0800ab08 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800ab08:	b480      	push	{r7}
 800ab0a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800ab0c:	e7fe      	b.n	800ab0c <MemManage_Handler+0x4>

0800ab0e <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800ab0e:	b480      	push	{r7}
 800ab10:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800ab12:	e7fe      	b.n	800ab12 <BusFault_Handler+0x4>

0800ab14 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800ab14:	b480      	push	{r7}
 800ab16:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800ab18:	e7fe      	b.n	800ab18 <UsageFault_Handler+0x4>

0800ab1a <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800ab1a:	b480      	push	{r7}
 800ab1c:	af00      	add	r7, sp, #0
}
 800ab1e:	bf00      	nop
 800ab20:	46bd      	mov	sp, r7
 800ab22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab26:	4770      	bx	lr

0800ab28 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800ab28:	b480      	push	{r7}
 800ab2a:	af00      	add	r7, sp, #0
  while (1)
 800ab2c:	e7fe      	b.n	800ab2c <DebugMon_Handler+0x4>

0800ab2e <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800ab2e:	b480      	push	{r7}
 800ab30:	af00      	add	r7, sp, #0
  while (1)
 800ab32:	e7fe      	b.n	800ab32 <PendSV_Handler+0x4>

0800ab34 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800ab34:	b580      	push	{r7, lr}
 800ab36:	af00      	add	r7, sp, #0
  HAL_IncTick();
 800ab38:	f7f8 ff96 	bl	8003a68 <HAL_IncTick>
}
 800ab3c:	bf00      	nop
 800ab3e:	bd80      	pop	{r7, pc}

0800ab40 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800ab44:	4802      	ldr	r0, [pc, #8]	; (800ab50 <UART4_IRQHandler+0x10>)
 800ab46:	f7fd fde7 	bl	8008718 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800ab4a:	bf00      	nop
 800ab4c:	bd80      	pop	{r7, pc}
 800ab4e:	bf00      	nop
 800ab50:	2000047c 	.word	0x2000047c

0800ab54 <EXTI13_IRQHandler>:
  * @brief  This function handles EXTI13 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI13_IRQHandler(void)
{
 800ab54:	b580      	push	{r7, lr}
 800ab56:	af00      	add	r7, sp, #0
  HAL_EXTI_IRQHandler(&hpb_exti[0]);
 800ab58:	4802      	ldr	r0, [pc, #8]	; (800ab64 <EXTI13_IRQHandler+0x10>)
 800ab5a:	f7f9 f9bd 	bl	8003ed8 <HAL_EXTI_IRQHandler>
}
 800ab5e:	bf00      	nop
 800ab60:	bd80      	pop	{r7, pc}
 800ab62:	bf00      	nop
 800ab64:	200002fc 	.word	0x200002fc

0800ab68 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800ab68:	b480      	push	{r7}
 800ab6a:	af00      	add	r7, sp, #0
	return 1;
 800ab6c:	2301      	movs	r3, #1
}
 800ab6e:	4618      	mov	r0, r3
 800ab70:	46bd      	mov	sp, r7
 800ab72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab76:	4770      	bx	lr

0800ab78 <_kill>:

int _kill(int pid, int sig)
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b082      	sub	sp, #8
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
 800ab80:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800ab82:	f001 f991 	bl	800bea8 <__errno>
 800ab86:	4603      	mov	r3, r0
 800ab88:	2216      	movs	r2, #22
 800ab8a:	601a      	str	r2, [r3, #0]
	return -1;
 800ab8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800ab90:	4618      	mov	r0, r3
 800ab92:	3708      	adds	r7, #8
 800ab94:	46bd      	mov	sp, r7
 800ab96:	bd80      	pop	{r7, pc}

0800ab98 <_exit>:

void _exit (int status)
{
 800ab98:	b580      	push	{r7, lr}
 800ab9a:	b082      	sub	sp, #8
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800aba0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800aba4:	6878      	ldr	r0, [r7, #4]
 800aba6:	f7ff ffe7 	bl	800ab78 <_kill>
	while (1) {}		/* Make sure we hang here */
 800abaa:	e7fe      	b.n	800abaa <_exit+0x12>

0800abac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800abac:	b580      	push	{r7, lr}
 800abae:	b086      	sub	sp, #24
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	60f8      	str	r0, [r7, #12]
 800abb4:	60b9      	str	r1, [r7, #8]
 800abb6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800abb8:	2300      	movs	r3, #0
 800abba:	617b      	str	r3, [r7, #20]
 800abbc:	e00a      	b.n	800abd4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800abbe:	f3af 8000 	nop.w
 800abc2:	4601      	mov	r1, r0
 800abc4:	68bb      	ldr	r3, [r7, #8]
 800abc6:	1c5a      	adds	r2, r3, #1
 800abc8:	60ba      	str	r2, [r7, #8]
 800abca:	b2ca      	uxtb	r2, r1
 800abcc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800abce:	697b      	ldr	r3, [r7, #20]
 800abd0:	3301      	adds	r3, #1
 800abd2:	617b      	str	r3, [r7, #20]
 800abd4:	697a      	ldr	r2, [r7, #20]
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	429a      	cmp	r2, r3
 800abda:	dbf0      	blt.n	800abbe <_read+0x12>
	}

return len;
 800abdc:	687b      	ldr	r3, [r7, #4]
}
 800abde:	4618      	mov	r0, r3
 800abe0:	3718      	adds	r7, #24
 800abe2:	46bd      	mov	sp, r7
 800abe4:	bd80      	pop	{r7, pc}

0800abe6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800abe6:	b580      	push	{r7, lr}
 800abe8:	b086      	sub	sp, #24
 800abea:	af00      	add	r7, sp, #0
 800abec:	60f8      	str	r0, [r7, #12]
 800abee:	60b9      	str	r1, [r7, #8]
 800abf0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800abf2:	2300      	movs	r3, #0
 800abf4:	617b      	str	r3, [r7, #20]
 800abf6:	e009      	b.n	800ac0c <_write+0x26>
	{
		__io_putchar(*ptr++);
 800abf8:	68bb      	ldr	r3, [r7, #8]
 800abfa:	1c5a      	adds	r2, r3, #1
 800abfc:	60ba      	str	r2, [r7, #8]
 800abfe:	781b      	ldrb	r3, [r3, #0]
 800ac00:	4618      	mov	r0, r3
 800ac02:	f7ff fe97 	bl	800a934 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ac06:	697b      	ldr	r3, [r7, #20]
 800ac08:	3301      	adds	r3, #1
 800ac0a:	617b      	str	r3, [r7, #20]
 800ac0c:	697a      	ldr	r2, [r7, #20]
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	429a      	cmp	r2, r3
 800ac12:	dbf1      	blt.n	800abf8 <_write+0x12>
	}
	return len;
 800ac14:	687b      	ldr	r3, [r7, #4]
}
 800ac16:	4618      	mov	r0, r3
 800ac18:	3718      	adds	r7, #24
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	bd80      	pop	{r7, pc}

0800ac1e <_close>:

int _close(int file)
{
 800ac1e:	b480      	push	{r7}
 800ac20:	b083      	sub	sp, #12
 800ac22:	af00      	add	r7, sp, #0
 800ac24:	6078      	str	r0, [r7, #4]
	return -1;
 800ac26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	370c      	adds	r7, #12
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac34:	4770      	bx	lr

0800ac36 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800ac36:	b480      	push	{r7}
 800ac38:	b083      	sub	sp, #12
 800ac3a:	af00      	add	r7, sp, #0
 800ac3c:	6078      	str	r0, [r7, #4]
 800ac3e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800ac40:	683b      	ldr	r3, [r7, #0]
 800ac42:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800ac46:	605a      	str	r2, [r3, #4]
	return 0;
 800ac48:	2300      	movs	r3, #0
}
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	370c      	adds	r7, #12
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac54:	4770      	bx	lr

0800ac56 <_isatty>:

int _isatty(int file)
{
 800ac56:	b480      	push	{r7}
 800ac58:	b083      	sub	sp, #12
 800ac5a:	af00      	add	r7, sp, #0
 800ac5c:	6078      	str	r0, [r7, #4]
	return 1;
 800ac5e:	2301      	movs	r3, #1
}
 800ac60:	4618      	mov	r0, r3
 800ac62:	370c      	adds	r7, #12
 800ac64:	46bd      	mov	sp, r7
 800ac66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6a:	4770      	bx	lr

0800ac6c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800ac6c:	b480      	push	{r7}
 800ac6e:	b085      	sub	sp, #20
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	60f8      	str	r0, [r7, #12]
 800ac74:	60b9      	str	r1, [r7, #8]
 800ac76:	607a      	str	r2, [r7, #4]
	return 0;
 800ac78:	2300      	movs	r3, #0
}
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	3714      	adds	r7, #20
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac84:	4770      	bx	lr
	...

0800ac88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b086      	sub	sp, #24
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800ac90:	4a14      	ldr	r2, [pc, #80]	; (800ace4 <_sbrk+0x5c>)
 800ac92:	4b15      	ldr	r3, [pc, #84]	; (800ace8 <_sbrk+0x60>)
 800ac94:	1ad3      	subs	r3, r2, r3
 800ac96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800ac98:	697b      	ldr	r3, [r7, #20]
 800ac9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800ac9c:	4b13      	ldr	r3, [pc, #76]	; (800acec <_sbrk+0x64>)
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d102      	bne.n	800acaa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800aca4:	4b11      	ldr	r3, [pc, #68]	; (800acec <_sbrk+0x64>)
 800aca6:	4a12      	ldr	r2, [pc, #72]	; (800acf0 <_sbrk+0x68>)
 800aca8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800acaa:	4b10      	ldr	r3, [pc, #64]	; (800acec <_sbrk+0x64>)
 800acac:	681a      	ldr	r2, [r3, #0]
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	4413      	add	r3, r2
 800acb2:	693a      	ldr	r2, [r7, #16]
 800acb4:	429a      	cmp	r2, r3
 800acb6:	d207      	bcs.n	800acc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800acb8:	f001 f8f6 	bl	800bea8 <__errno>
 800acbc:	4603      	mov	r3, r0
 800acbe:	220c      	movs	r2, #12
 800acc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800acc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800acc6:	e009      	b.n	800acdc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800acc8:	4b08      	ldr	r3, [pc, #32]	; (800acec <_sbrk+0x64>)
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800acce:	4b07      	ldr	r3, [pc, #28]	; (800acec <_sbrk+0x64>)
 800acd0:	681a      	ldr	r2, [r3, #0]
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	4413      	add	r3, r2
 800acd6:	4a05      	ldr	r2, [pc, #20]	; (800acec <_sbrk+0x64>)
 800acd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800acda:	68fb      	ldr	r3, [r7, #12]
}
 800acdc:	4618      	mov	r0, r3
 800acde:	3718      	adds	r7, #24
 800ace0:	46bd      	mov	sp, r7
 800ace2:	bd80      	pop	{r7, pc}
 800ace4:	200c0000 	.word	0x200c0000
 800ace8:	00000400 	.word	0x00000400
 800acec:	20000510 	.word	0x20000510
 800acf0:	20000660 	.word	0x20000660

0800acf4 <siprintf>:
 800acf4:	b40e      	push	{r1, r2, r3}
 800acf6:	b500      	push	{lr}
 800acf8:	b09c      	sub	sp, #112	; 0x70
 800acfa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800acfe:	ab1d      	add	r3, sp, #116	; 0x74
 800ad00:	9002      	str	r0, [sp, #8]
 800ad02:	9006      	str	r0, [sp, #24]
 800ad04:	9107      	str	r1, [sp, #28]
 800ad06:	9104      	str	r1, [sp, #16]
 800ad08:	4808      	ldr	r0, [pc, #32]	; (800ad2c <siprintf+0x38>)
 800ad0a:	4909      	ldr	r1, [pc, #36]	; (800ad30 <siprintf+0x3c>)
 800ad0c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad10:	9105      	str	r1, [sp, #20]
 800ad12:	a902      	add	r1, sp, #8
 800ad14:	6800      	ldr	r0, [r0, #0]
 800ad16:	9301      	str	r3, [sp, #4]
 800ad18:	f001 fce6 	bl	800c6e8 <_svfiprintf_r>
 800ad1c:	9b02      	ldr	r3, [sp, #8]
 800ad1e:	2200      	movs	r2, #0
 800ad20:	701a      	strb	r2, [r3, #0]
 800ad22:	b01c      	add	sp, #112	; 0x70
 800ad24:	f85d eb04 	ldr.w	lr, [sp], #4
 800ad28:	b003      	add	sp, #12
 800ad2a:	4770      	bx	lr
 800ad2c:	200002d8 	.word	0x200002d8
 800ad30:	ffff0208 	.word	0xffff0208

0800ad34 <std>:
 800ad34:	2300      	movs	r3, #0
 800ad36:	b510      	push	{r4, lr}
 800ad38:	4604      	mov	r4, r0
 800ad3a:	6083      	str	r3, [r0, #8]
 800ad3c:	8181      	strh	r1, [r0, #12]
 800ad3e:	4619      	mov	r1, r3
 800ad40:	6643      	str	r3, [r0, #100]	; 0x64
 800ad42:	81c2      	strh	r2, [r0, #14]
 800ad44:	2208      	movs	r2, #8
 800ad46:	6183      	str	r3, [r0, #24]
 800ad48:	e9c0 3300 	strd	r3, r3, [r0]
 800ad4c:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ad50:	305c      	adds	r0, #92	; 0x5c
 800ad52:	f001 f8a1 	bl	800be98 <memset>
 800ad56:	4b0d      	ldr	r3, [pc, #52]	; (800ad8c <std+0x58>)
 800ad58:	6224      	str	r4, [r4, #32]
 800ad5a:	6263      	str	r3, [r4, #36]	; 0x24
 800ad5c:	4b0c      	ldr	r3, [pc, #48]	; (800ad90 <std+0x5c>)
 800ad5e:	62a3      	str	r3, [r4, #40]	; 0x28
 800ad60:	4b0c      	ldr	r3, [pc, #48]	; (800ad94 <std+0x60>)
 800ad62:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ad64:	4b0c      	ldr	r3, [pc, #48]	; (800ad98 <std+0x64>)
 800ad66:	6323      	str	r3, [r4, #48]	; 0x30
 800ad68:	4b0c      	ldr	r3, [pc, #48]	; (800ad9c <std+0x68>)
 800ad6a:	429c      	cmp	r4, r3
 800ad6c:	d006      	beq.n	800ad7c <std+0x48>
 800ad6e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800ad72:	4294      	cmp	r4, r2
 800ad74:	d002      	beq.n	800ad7c <std+0x48>
 800ad76:	33d0      	adds	r3, #208	; 0xd0
 800ad78:	429c      	cmp	r4, r3
 800ad7a:	d105      	bne.n	800ad88 <std+0x54>
 800ad7c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ad80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad84:	f001 b8ba 	b.w	800befc <__retarget_lock_init_recursive>
 800ad88:	bd10      	pop	{r4, pc}
 800ad8a:	bf00      	nop
 800ad8c:	0800dae7 	.word	0x0800dae7
 800ad90:	0800db09 	.word	0x0800db09
 800ad94:	0800db41 	.word	0x0800db41
 800ad98:	0800db65 	.word	0x0800db65
 800ad9c:	20000514 	.word	0x20000514

0800ada0 <stdio_exit_handler>:
 800ada0:	4a02      	ldr	r2, [pc, #8]	; (800adac <stdio_exit_handler+0xc>)
 800ada2:	4903      	ldr	r1, [pc, #12]	; (800adb0 <stdio_exit_handler+0x10>)
 800ada4:	4803      	ldr	r0, [pc, #12]	; (800adb4 <stdio_exit_handler+0x14>)
 800ada6:	f000 bf6d 	b.w	800bc84 <_fwalk_sglue>
 800adaa:	bf00      	nop
 800adac:	20000114 	.word	0x20000114
 800adb0:	0800d10d 	.word	0x0800d10d
 800adb4:	2000028c 	.word	0x2000028c

0800adb8 <cleanup_stdio>:
 800adb8:	6841      	ldr	r1, [r0, #4]
 800adba:	4b0c      	ldr	r3, [pc, #48]	; (800adec <cleanup_stdio+0x34>)
 800adbc:	4299      	cmp	r1, r3
 800adbe:	b510      	push	{r4, lr}
 800adc0:	4604      	mov	r4, r0
 800adc2:	d001      	beq.n	800adc8 <cleanup_stdio+0x10>
 800adc4:	f002 f9a2 	bl	800d10c <_fflush_r>
 800adc8:	68a1      	ldr	r1, [r4, #8]
 800adca:	4b09      	ldr	r3, [pc, #36]	; (800adf0 <cleanup_stdio+0x38>)
 800adcc:	4299      	cmp	r1, r3
 800adce:	d002      	beq.n	800add6 <cleanup_stdio+0x1e>
 800add0:	4620      	mov	r0, r4
 800add2:	f002 f99b 	bl	800d10c <_fflush_r>
 800add6:	68e1      	ldr	r1, [r4, #12]
 800add8:	4b06      	ldr	r3, [pc, #24]	; (800adf4 <cleanup_stdio+0x3c>)
 800adda:	4299      	cmp	r1, r3
 800addc:	d004      	beq.n	800ade8 <cleanup_stdio+0x30>
 800adde:	4620      	mov	r0, r4
 800ade0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ade4:	f002 b992 	b.w	800d10c <_fflush_r>
 800ade8:	bd10      	pop	{r4, pc}
 800adea:	bf00      	nop
 800adec:	20000514 	.word	0x20000514
 800adf0:	2000057c 	.word	0x2000057c
 800adf4:	200005e4 	.word	0x200005e4

0800adf8 <global_stdio_init.part.0>:
 800adf8:	b510      	push	{r4, lr}
 800adfa:	4b0b      	ldr	r3, [pc, #44]	; (800ae28 <global_stdio_init.part.0+0x30>)
 800adfc:	2104      	movs	r1, #4
 800adfe:	4c0b      	ldr	r4, [pc, #44]	; (800ae2c <global_stdio_init.part.0+0x34>)
 800ae00:	4a0b      	ldr	r2, [pc, #44]	; (800ae30 <global_stdio_init.part.0+0x38>)
 800ae02:	4620      	mov	r0, r4
 800ae04:	601a      	str	r2, [r3, #0]
 800ae06:	2200      	movs	r2, #0
 800ae08:	f7ff ff94 	bl	800ad34 <std>
 800ae0c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800ae10:	2201      	movs	r2, #1
 800ae12:	2109      	movs	r1, #9
 800ae14:	f7ff ff8e 	bl	800ad34 <std>
 800ae18:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800ae1c:	2202      	movs	r2, #2
 800ae1e:	2112      	movs	r1, #18
 800ae20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae24:	f7ff bf86 	b.w	800ad34 <std>
 800ae28:	2000064c 	.word	0x2000064c
 800ae2c:	20000514 	.word	0x20000514
 800ae30:	0800ada1 	.word	0x0800ada1

0800ae34 <__sfp_lock_acquire>:
 800ae34:	4801      	ldr	r0, [pc, #4]	; (800ae3c <__sfp_lock_acquire+0x8>)
 800ae36:	f001 b862 	b.w	800befe <__retarget_lock_acquire_recursive>
 800ae3a:	bf00      	nop
 800ae3c:	20000651 	.word	0x20000651

0800ae40 <__sfp_lock_release>:
 800ae40:	4801      	ldr	r0, [pc, #4]	; (800ae48 <__sfp_lock_release+0x8>)
 800ae42:	f001 b85d 	b.w	800bf00 <__retarget_lock_release_recursive>
 800ae46:	bf00      	nop
 800ae48:	20000651 	.word	0x20000651

0800ae4c <__sinit>:
 800ae4c:	b510      	push	{r4, lr}
 800ae4e:	4604      	mov	r4, r0
 800ae50:	f7ff fff0 	bl	800ae34 <__sfp_lock_acquire>
 800ae54:	6a23      	ldr	r3, [r4, #32]
 800ae56:	b11b      	cbz	r3, 800ae60 <__sinit+0x14>
 800ae58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae5c:	f7ff bff0 	b.w	800ae40 <__sfp_lock_release>
 800ae60:	4b04      	ldr	r3, [pc, #16]	; (800ae74 <__sinit+0x28>)
 800ae62:	6223      	str	r3, [r4, #32]
 800ae64:	4b04      	ldr	r3, [pc, #16]	; (800ae78 <__sinit+0x2c>)
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d1f5      	bne.n	800ae58 <__sinit+0xc>
 800ae6c:	f7ff ffc4 	bl	800adf8 <global_stdio_init.part.0>
 800ae70:	e7f2      	b.n	800ae58 <__sinit+0xc>
 800ae72:	bf00      	nop
 800ae74:	0800adb9 	.word	0x0800adb9
 800ae78:	2000064c 	.word	0x2000064c

0800ae7c <sulp>:
 800ae7c:	b570      	push	{r4, r5, r6, lr}
 800ae7e:	4604      	mov	r4, r0
 800ae80:	460d      	mov	r5, r1
 800ae82:	4616      	mov	r6, r2
 800ae84:	ec45 4b10 	vmov	d0, r4, r5
 800ae88:	f002 fce8 	bl	800d85c <__ulp>
 800ae8c:	ec51 0b10 	vmov	r0, r1, d0
 800ae90:	b17e      	cbz	r6, 800aeb2 <sulp+0x36>
 800ae92:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ae96:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	dd09      	ble.n	800aeb2 <sulp+0x36>
 800ae9e:	051b      	lsls	r3, r3, #20
 800aea0:	2400      	movs	r4, #0
 800aea2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800aea6:	4622      	mov	r2, r4
 800aea8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800aeac:	462b      	mov	r3, r5
 800aeae:	f7f5 fbb1 	bl	8000614 <__aeabi_dmul>
 800aeb2:	bd70      	pop	{r4, r5, r6, pc}
 800aeb4:	0000      	movs	r0, r0
	...

0800aeb8 <_strtod_l>:
 800aeb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aebc:	ed2d 8b02 	vpush	{d8}
 800aec0:	b09b      	sub	sp, #108	; 0x6c
 800aec2:	4604      	mov	r4, r0
 800aec4:	460d      	mov	r5, r1
 800aec6:	f04f 0800 	mov.w	r8, #0
 800aeca:	9213      	str	r2, [sp, #76]	; 0x4c
 800aecc:	2200      	movs	r2, #0
 800aece:	f04f 0900 	mov.w	r9, #0
 800aed2:	9216      	str	r2, [sp, #88]	; 0x58
 800aed4:	460a      	mov	r2, r1
 800aed6:	9215      	str	r2, [sp, #84]	; 0x54
 800aed8:	7811      	ldrb	r1, [r2, #0]
 800aeda:	292b      	cmp	r1, #43	; 0x2b
 800aedc:	d04c      	beq.n	800af78 <_strtod_l+0xc0>
 800aede:	d83a      	bhi.n	800af56 <_strtod_l+0x9e>
 800aee0:	290d      	cmp	r1, #13
 800aee2:	d834      	bhi.n	800af4e <_strtod_l+0x96>
 800aee4:	2908      	cmp	r1, #8
 800aee6:	d834      	bhi.n	800af52 <_strtod_l+0x9a>
 800aee8:	2900      	cmp	r1, #0
 800aeea:	d03d      	beq.n	800af68 <_strtod_l+0xb0>
 800aeec:	2200      	movs	r2, #0
 800aeee:	920a      	str	r2, [sp, #40]	; 0x28
 800aef0:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800aef2:	7832      	ldrb	r2, [r6, #0]
 800aef4:	2a30      	cmp	r2, #48	; 0x30
 800aef6:	f040 80b4 	bne.w	800b062 <_strtod_l+0x1aa>
 800aefa:	7872      	ldrb	r2, [r6, #1]
 800aefc:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800af00:	2a58      	cmp	r2, #88	; 0x58
 800af02:	d170      	bne.n	800afe6 <_strtod_l+0x12e>
 800af04:	9302      	str	r3, [sp, #8]
 800af06:	a915      	add	r1, sp, #84	; 0x54
 800af08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af0a:	4620      	mov	r0, r4
 800af0c:	4a8e      	ldr	r2, [pc, #568]	; (800b148 <_strtod_l+0x290>)
 800af0e:	9301      	str	r3, [sp, #4]
 800af10:	ab16      	add	r3, sp, #88	; 0x58
 800af12:	9300      	str	r3, [sp, #0]
 800af14:	ab17      	add	r3, sp, #92	; 0x5c
 800af16:	f001 f89d 	bl	800c054 <__gethex>
 800af1a:	f010 070f 	ands.w	r7, r0, #15
 800af1e:	4605      	mov	r5, r0
 800af20:	d005      	beq.n	800af2e <_strtod_l+0x76>
 800af22:	2f06      	cmp	r7, #6
 800af24:	d12a      	bne.n	800af7c <_strtod_l+0xc4>
 800af26:	3601      	adds	r6, #1
 800af28:	2300      	movs	r3, #0
 800af2a:	9615      	str	r6, [sp, #84]	; 0x54
 800af2c:	930a      	str	r3, [sp, #40]	; 0x28
 800af2e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800af30:	2b00      	cmp	r3, #0
 800af32:	f040 8581 	bne.w	800ba38 <_strtod_l+0xb80>
 800af36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af38:	b1db      	cbz	r3, 800af72 <_strtod_l+0xba>
 800af3a:	4642      	mov	r2, r8
 800af3c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800af40:	ec43 2b10 	vmov	d0, r2, r3
 800af44:	b01b      	add	sp, #108	; 0x6c
 800af46:	ecbd 8b02 	vpop	{d8}
 800af4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af4e:	2920      	cmp	r1, #32
 800af50:	d1cc      	bne.n	800aeec <_strtod_l+0x34>
 800af52:	3201      	adds	r2, #1
 800af54:	e7bf      	b.n	800aed6 <_strtod_l+0x1e>
 800af56:	292d      	cmp	r1, #45	; 0x2d
 800af58:	d1c8      	bne.n	800aeec <_strtod_l+0x34>
 800af5a:	2101      	movs	r1, #1
 800af5c:	910a      	str	r1, [sp, #40]	; 0x28
 800af5e:	1c51      	adds	r1, r2, #1
 800af60:	9115      	str	r1, [sp, #84]	; 0x54
 800af62:	7852      	ldrb	r2, [r2, #1]
 800af64:	2a00      	cmp	r2, #0
 800af66:	d1c3      	bne.n	800aef0 <_strtod_l+0x38>
 800af68:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800af6a:	9515      	str	r5, [sp, #84]	; 0x54
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	f040 8561 	bne.w	800ba34 <_strtod_l+0xb7c>
 800af72:	4642      	mov	r2, r8
 800af74:	464b      	mov	r3, r9
 800af76:	e7e3      	b.n	800af40 <_strtod_l+0x88>
 800af78:	2100      	movs	r1, #0
 800af7a:	e7ef      	b.n	800af5c <_strtod_l+0xa4>
 800af7c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800af7e:	b13a      	cbz	r2, 800af90 <_strtod_l+0xd8>
 800af80:	2135      	movs	r1, #53	; 0x35
 800af82:	a818      	add	r0, sp, #96	; 0x60
 800af84:	f002 fd6b 	bl	800da5e <__copybits>
 800af88:	9916      	ldr	r1, [sp, #88]	; 0x58
 800af8a:	4620      	mov	r0, r4
 800af8c:	f002 f932 	bl	800d1f4 <_Bfree>
 800af90:	3f01      	subs	r7, #1
 800af92:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800af94:	2f04      	cmp	r7, #4
 800af96:	d806      	bhi.n	800afa6 <_strtod_l+0xee>
 800af98:	e8df f007 	tbb	[pc, r7]
 800af9c:	201d0314 	.word	0x201d0314
 800afa0:	14          	.byte	0x14
 800afa1:	00          	.byte	0x00
 800afa2:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800afa6:	05e9      	lsls	r1, r5, #23
 800afa8:	bf48      	it	mi
 800afaa:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800afae:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800afb2:	0d1b      	lsrs	r3, r3, #20
 800afb4:	051b      	lsls	r3, r3, #20
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d1b9      	bne.n	800af2e <_strtod_l+0x76>
 800afba:	f000 ff75 	bl	800bea8 <__errno>
 800afbe:	2322      	movs	r3, #34	; 0x22
 800afc0:	6003      	str	r3, [r0, #0]
 800afc2:	e7b4      	b.n	800af2e <_strtod_l+0x76>
 800afc4:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800afc8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800afcc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800afd0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800afd4:	e7e7      	b.n	800afa6 <_strtod_l+0xee>
 800afd6:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800b150 <_strtod_l+0x298>
 800afda:	e7e4      	b.n	800afa6 <_strtod_l+0xee>
 800afdc:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800afe0:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800afe4:	e7df      	b.n	800afa6 <_strtod_l+0xee>
 800afe6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800afe8:	1c5a      	adds	r2, r3, #1
 800afea:	9215      	str	r2, [sp, #84]	; 0x54
 800afec:	785b      	ldrb	r3, [r3, #1]
 800afee:	2b30      	cmp	r3, #48	; 0x30
 800aff0:	d0f9      	beq.n	800afe6 <_strtod_l+0x12e>
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d09b      	beq.n	800af2e <_strtod_l+0x76>
 800aff6:	2301      	movs	r3, #1
 800aff8:	f04f 0a00 	mov.w	sl, #0
 800affc:	9304      	str	r3, [sp, #16]
 800affe:	220a      	movs	r2, #10
 800b000:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b002:	46d3      	mov	fp, sl
 800b004:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800b008:	930b      	str	r3, [sp, #44]	; 0x2c
 800b00a:	9815      	ldr	r0, [sp, #84]	; 0x54
 800b00c:	7806      	ldrb	r6, [r0, #0]
 800b00e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800b012:	b2d9      	uxtb	r1, r3
 800b014:	2909      	cmp	r1, #9
 800b016:	d926      	bls.n	800b066 <_strtod_l+0x1ae>
 800b018:	2201      	movs	r2, #1
 800b01a:	494c      	ldr	r1, [pc, #304]	; (800b14c <_strtod_l+0x294>)
 800b01c:	f000 fecd 	bl	800bdba <strncmp>
 800b020:	2800      	cmp	r0, #0
 800b022:	d030      	beq.n	800b086 <_strtod_l+0x1ce>
 800b024:	2000      	movs	r0, #0
 800b026:	4632      	mov	r2, r6
 800b028:	465e      	mov	r6, fp
 800b02a:	4603      	mov	r3, r0
 800b02c:	9005      	str	r0, [sp, #20]
 800b02e:	2a65      	cmp	r2, #101	; 0x65
 800b030:	d001      	beq.n	800b036 <_strtod_l+0x17e>
 800b032:	2a45      	cmp	r2, #69	; 0x45
 800b034:	d113      	bne.n	800b05e <_strtod_l+0x1a6>
 800b036:	b91e      	cbnz	r6, 800b040 <_strtod_l+0x188>
 800b038:	9a04      	ldr	r2, [sp, #16]
 800b03a:	4302      	orrs	r2, r0
 800b03c:	d094      	beq.n	800af68 <_strtod_l+0xb0>
 800b03e:	2600      	movs	r6, #0
 800b040:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800b042:	1c6a      	adds	r2, r5, #1
 800b044:	9215      	str	r2, [sp, #84]	; 0x54
 800b046:	786a      	ldrb	r2, [r5, #1]
 800b048:	2a2b      	cmp	r2, #43	; 0x2b
 800b04a:	d073      	beq.n	800b134 <_strtod_l+0x27c>
 800b04c:	2a2d      	cmp	r2, #45	; 0x2d
 800b04e:	d077      	beq.n	800b140 <_strtod_l+0x288>
 800b050:	f04f 0c00 	mov.w	ip, #0
 800b054:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800b058:	2909      	cmp	r1, #9
 800b05a:	d97f      	bls.n	800b15c <_strtod_l+0x2a4>
 800b05c:	9515      	str	r5, [sp, #84]	; 0x54
 800b05e:	2700      	movs	r7, #0
 800b060:	e09e      	b.n	800b1a0 <_strtod_l+0x2e8>
 800b062:	2300      	movs	r3, #0
 800b064:	e7c8      	b.n	800aff8 <_strtod_l+0x140>
 800b066:	f1bb 0f08 	cmp.w	fp, #8
 800b06a:	f100 0001 	add.w	r0, r0, #1
 800b06e:	f10b 0b01 	add.w	fp, fp, #1
 800b072:	bfd4      	ite	le
 800b074:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800b076:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800b07a:	9015      	str	r0, [sp, #84]	; 0x54
 800b07c:	bfdc      	itt	le
 800b07e:	fb02 3301 	mlale	r3, r2, r1, r3
 800b082:	9309      	strle	r3, [sp, #36]	; 0x24
 800b084:	e7c1      	b.n	800b00a <_strtod_l+0x152>
 800b086:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b088:	1c5a      	adds	r2, r3, #1
 800b08a:	9215      	str	r2, [sp, #84]	; 0x54
 800b08c:	785a      	ldrb	r2, [r3, #1]
 800b08e:	f1bb 0f00 	cmp.w	fp, #0
 800b092:	d036      	beq.n	800b102 <_strtod_l+0x24a>
 800b094:	465e      	mov	r6, fp
 800b096:	9005      	str	r0, [sp, #20]
 800b098:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800b09c:	2b09      	cmp	r3, #9
 800b09e:	d912      	bls.n	800b0c6 <_strtod_l+0x20e>
 800b0a0:	2301      	movs	r3, #1
 800b0a2:	e7c4      	b.n	800b02e <_strtod_l+0x176>
 800b0a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b0a6:	3001      	adds	r0, #1
 800b0a8:	1c5a      	adds	r2, r3, #1
 800b0aa:	9215      	str	r2, [sp, #84]	; 0x54
 800b0ac:	785a      	ldrb	r2, [r3, #1]
 800b0ae:	2a30      	cmp	r2, #48	; 0x30
 800b0b0:	d0f8      	beq.n	800b0a4 <_strtod_l+0x1ec>
 800b0b2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800b0b6:	2b08      	cmp	r3, #8
 800b0b8:	f200 84c3 	bhi.w	800ba42 <_strtod_l+0xb8a>
 800b0bc:	9005      	str	r0, [sp, #20]
 800b0be:	2000      	movs	r0, #0
 800b0c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b0c2:	4606      	mov	r6, r0
 800b0c4:	930b      	str	r3, [sp, #44]	; 0x2c
 800b0c6:	3a30      	subs	r2, #48	; 0x30
 800b0c8:	f100 0301 	add.w	r3, r0, #1
 800b0cc:	d013      	beq.n	800b0f6 <_strtod_l+0x23e>
 800b0ce:	9905      	ldr	r1, [sp, #20]
 800b0d0:	eb00 0c06 	add.w	ip, r0, r6
 800b0d4:	4419      	add	r1, r3
 800b0d6:	4633      	mov	r3, r6
 800b0d8:	9105      	str	r1, [sp, #20]
 800b0da:	210a      	movs	r1, #10
 800b0dc:	4563      	cmp	r3, ip
 800b0de:	d112      	bne.n	800b106 <_strtod_l+0x24e>
 800b0e0:	1833      	adds	r3, r6, r0
 800b0e2:	3601      	adds	r6, #1
 800b0e4:	2b08      	cmp	r3, #8
 800b0e6:	4406      	add	r6, r0
 800b0e8:	dc1a      	bgt.n	800b120 <_strtod_l+0x268>
 800b0ea:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b0ec:	230a      	movs	r3, #10
 800b0ee:	fb03 2301 	mla	r3, r3, r1, r2
 800b0f2:	9309      	str	r3, [sp, #36]	; 0x24
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	1c51      	adds	r1, r2, #1
 800b0fc:	9115      	str	r1, [sp, #84]	; 0x54
 800b0fe:	7852      	ldrb	r2, [r2, #1]
 800b100:	e7ca      	b.n	800b098 <_strtod_l+0x1e0>
 800b102:	4658      	mov	r0, fp
 800b104:	e7d3      	b.n	800b0ae <_strtod_l+0x1f6>
 800b106:	2b08      	cmp	r3, #8
 800b108:	f103 0301 	add.w	r3, r3, #1
 800b10c:	dc03      	bgt.n	800b116 <_strtod_l+0x25e>
 800b10e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b110:	434f      	muls	r7, r1
 800b112:	9709      	str	r7, [sp, #36]	; 0x24
 800b114:	e7e2      	b.n	800b0dc <_strtod_l+0x224>
 800b116:	2b10      	cmp	r3, #16
 800b118:	bfd8      	it	le
 800b11a:	fb01 fa0a 	mulle.w	sl, r1, sl
 800b11e:	e7dd      	b.n	800b0dc <_strtod_l+0x224>
 800b120:	2e10      	cmp	r6, #16
 800b122:	bfdc      	itt	le
 800b124:	230a      	movle	r3, #10
 800b126:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800b12a:	e7e3      	b.n	800b0f4 <_strtod_l+0x23c>
 800b12c:	2300      	movs	r3, #0
 800b12e:	9305      	str	r3, [sp, #20]
 800b130:	2301      	movs	r3, #1
 800b132:	e781      	b.n	800b038 <_strtod_l+0x180>
 800b134:	f04f 0c00 	mov.w	ip, #0
 800b138:	1caa      	adds	r2, r5, #2
 800b13a:	9215      	str	r2, [sp, #84]	; 0x54
 800b13c:	78aa      	ldrb	r2, [r5, #2]
 800b13e:	e789      	b.n	800b054 <_strtod_l+0x19c>
 800b140:	f04f 0c01 	mov.w	ip, #1
 800b144:	e7f8      	b.n	800b138 <_strtod_l+0x280>
 800b146:	bf00      	nop
 800b148:	0800e564 	.word	0x0800e564
 800b14c:	0800e554 	.word	0x0800e554
 800b150:	7ff00000 	.word	0x7ff00000
 800b154:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b156:	1c51      	adds	r1, r2, #1
 800b158:	9115      	str	r1, [sp, #84]	; 0x54
 800b15a:	7852      	ldrb	r2, [r2, #1]
 800b15c:	2a30      	cmp	r2, #48	; 0x30
 800b15e:	d0f9      	beq.n	800b154 <_strtod_l+0x29c>
 800b160:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800b164:	2908      	cmp	r1, #8
 800b166:	f63f af7a 	bhi.w	800b05e <_strtod_l+0x1a6>
 800b16a:	3a30      	subs	r2, #48	; 0x30
 800b16c:	9208      	str	r2, [sp, #32]
 800b16e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b170:	920c      	str	r2, [sp, #48]	; 0x30
 800b172:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b174:	1c57      	adds	r7, r2, #1
 800b176:	9715      	str	r7, [sp, #84]	; 0x54
 800b178:	7852      	ldrb	r2, [r2, #1]
 800b17a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800b17e:	f1be 0f09 	cmp.w	lr, #9
 800b182:	d938      	bls.n	800b1f6 <_strtod_l+0x33e>
 800b184:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b186:	1a7f      	subs	r7, r7, r1
 800b188:	2f08      	cmp	r7, #8
 800b18a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800b18e:	dc03      	bgt.n	800b198 <_strtod_l+0x2e0>
 800b190:	9908      	ldr	r1, [sp, #32]
 800b192:	428f      	cmp	r7, r1
 800b194:	bfa8      	it	ge
 800b196:	460f      	movge	r7, r1
 800b198:	f1bc 0f00 	cmp.w	ip, #0
 800b19c:	d000      	beq.n	800b1a0 <_strtod_l+0x2e8>
 800b19e:	427f      	negs	r7, r7
 800b1a0:	2e00      	cmp	r6, #0
 800b1a2:	d14f      	bne.n	800b244 <_strtod_l+0x38c>
 800b1a4:	9904      	ldr	r1, [sp, #16]
 800b1a6:	4301      	orrs	r1, r0
 800b1a8:	f47f aec1 	bne.w	800af2e <_strtod_l+0x76>
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	f47f aedb 	bne.w	800af68 <_strtod_l+0xb0>
 800b1b2:	2a69      	cmp	r2, #105	; 0x69
 800b1b4:	d029      	beq.n	800b20a <_strtod_l+0x352>
 800b1b6:	dc26      	bgt.n	800b206 <_strtod_l+0x34e>
 800b1b8:	2a49      	cmp	r2, #73	; 0x49
 800b1ba:	d026      	beq.n	800b20a <_strtod_l+0x352>
 800b1bc:	2a4e      	cmp	r2, #78	; 0x4e
 800b1be:	f47f aed3 	bne.w	800af68 <_strtod_l+0xb0>
 800b1c2:	499c      	ldr	r1, [pc, #624]	; (800b434 <_strtod_l+0x57c>)
 800b1c4:	a815      	add	r0, sp, #84	; 0x54
 800b1c6:	f001 f985 	bl	800c4d4 <__match>
 800b1ca:	2800      	cmp	r0, #0
 800b1cc:	f43f aecc 	beq.w	800af68 <_strtod_l+0xb0>
 800b1d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b1d2:	781b      	ldrb	r3, [r3, #0]
 800b1d4:	2b28      	cmp	r3, #40	; 0x28
 800b1d6:	d12f      	bne.n	800b238 <_strtod_l+0x380>
 800b1d8:	aa18      	add	r2, sp, #96	; 0x60
 800b1da:	4997      	ldr	r1, [pc, #604]	; (800b438 <_strtod_l+0x580>)
 800b1dc:	a815      	add	r0, sp, #84	; 0x54
 800b1de:	f001 f98d 	bl	800c4fc <__hexnan>
 800b1e2:	2805      	cmp	r0, #5
 800b1e4:	d128      	bne.n	800b238 <_strtod_l+0x380>
 800b1e6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b1e8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b1ec:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800b1f0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800b1f4:	e69b      	b.n	800af2e <_strtod_l+0x76>
 800b1f6:	9f08      	ldr	r7, [sp, #32]
 800b1f8:	210a      	movs	r1, #10
 800b1fa:	fb01 2107 	mla	r1, r1, r7, r2
 800b1fe:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800b202:	9208      	str	r2, [sp, #32]
 800b204:	e7b5      	b.n	800b172 <_strtod_l+0x2ba>
 800b206:	2a6e      	cmp	r2, #110	; 0x6e
 800b208:	e7d9      	b.n	800b1be <_strtod_l+0x306>
 800b20a:	498c      	ldr	r1, [pc, #560]	; (800b43c <_strtod_l+0x584>)
 800b20c:	a815      	add	r0, sp, #84	; 0x54
 800b20e:	f001 f961 	bl	800c4d4 <__match>
 800b212:	2800      	cmp	r0, #0
 800b214:	f43f aea8 	beq.w	800af68 <_strtod_l+0xb0>
 800b218:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b21a:	a815      	add	r0, sp, #84	; 0x54
 800b21c:	4988      	ldr	r1, [pc, #544]	; (800b440 <_strtod_l+0x588>)
 800b21e:	3b01      	subs	r3, #1
 800b220:	9315      	str	r3, [sp, #84]	; 0x54
 800b222:	f001 f957 	bl	800c4d4 <__match>
 800b226:	b910      	cbnz	r0, 800b22e <_strtod_l+0x376>
 800b228:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b22a:	3301      	adds	r3, #1
 800b22c:	9315      	str	r3, [sp, #84]	; 0x54
 800b22e:	f8df 9220 	ldr.w	r9, [pc, #544]	; 800b450 <_strtod_l+0x598>
 800b232:	f04f 0800 	mov.w	r8, #0
 800b236:	e67a      	b.n	800af2e <_strtod_l+0x76>
 800b238:	4882      	ldr	r0, [pc, #520]	; (800b444 <_strtod_l+0x58c>)
 800b23a:	f000 fe79 	bl	800bf30 <nan>
 800b23e:	ec59 8b10 	vmov	r8, r9, d0
 800b242:	e674      	b.n	800af2e <_strtod_l+0x76>
 800b244:	9b05      	ldr	r3, [sp, #20]
 800b246:	f1bb 0f00 	cmp.w	fp, #0
 800b24a:	bf08      	it	eq
 800b24c:	46b3      	moveq	fp, r6
 800b24e:	2e10      	cmp	r6, #16
 800b250:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b252:	eba7 0303 	sub.w	r3, r7, r3
 800b256:	4635      	mov	r5, r6
 800b258:	bfa8      	it	ge
 800b25a:	2510      	movge	r5, #16
 800b25c:	9308      	str	r3, [sp, #32]
 800b25e:	f7f5 f95f 	bl	8000520 <__aeabi_ui2d>
 800b262:	2e09      	cmp	r6, #9
 800b264:	4680      	mov	r8, r0
 800b266:	4689      	mov	r9, r1
 800b268:	dd13      	ble.n	800b292 <_strtod_l+0x3da>
 800b26a:	4b77      	ldr	r3, [pc, #476]	; (800b448 <_strtod_l+0x590>)
 800b26c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b270:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b274:	f7f5 f9ce 	bl	8000614 <__aeabi_dmul>
 800b278:	4680      	mov	r8, r0
 800b27a:	4689      	mov	r9, r1
 800b27c:	4650      	mov	r0, sl
 800b27e:	f7f5 f94f 	bl	8000520 <__aeabi_ui2d>
 800b282:	4602      	mov	r2, r0
 800b284:	460b      	mov	r3, r1
 800b286:	4640      	mov	r0, r8
 800b288:	4649      	mov	r1, r9
 800b28a:	f7f5 f80d 	bl	80002a8 <__adddf3>
 800b28e:	4680      	mov	r8, r0
 800b290:	4689      	mov	r9, r1
 800b292:	2e0f      	cmp	r6, #15
 800b294:	dc38      	bgt.n	800b308 <_strtod_l+0x450>
 800b296:	9b08      	ldr	r3, [sp, #32]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	f43f ae48 	beq.w	800af2e <_strtod_l+0x76>
 800b29e:	dd24      	ble.n	800b2ea <_strtod_l+0x432>
 800b2a0:	2b16      	cmp	r3, #22
 800b2a2:	dc0b      	bgt.n	800b2bc <_strtod_l+0x404>
 800b2a4:	4968      	ldr	r1, [pc, #416]	; (800b448 <_strtod_l+0x590>)
 800b2a6:	4642      	mov	r2, r8
 800b2a8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b2ac:	464b      	mov	r3, r9
 800b2ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b2b2:	f7f5 f9af 	bl	8000614 <__aeabi_dmul>
 800b2b6:	4680      	mov	r8, r0
 800b2b8:	4689      	mov	r9, r1
 800b2ba:	e638      	b.n	800af2e <_strtod_l+0x76>
 800b2bc:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800b2c0:	9a08      	ldr	r2, [sp, #32]
 800b2c2:	4293      	cmp	r3, r2
 800b2c4:	db20      	blt.n	800b308 <_strtod_l+0x450>
 800b2c6:	f1c6 060f 	rsb	r6, r6, #15
 800b2ca:	4c5f      	ldr	r4, [pc, #380]	; (800b448 <_strtod_l+0x590>)
 800b2cc:	4642      	mov	r2, r8
 800b2ce:	464b      	mov	r3, r9
 800b2d0:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800b2d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b2d8:	f7f5 f99c 	bl	8000614 <__aeabi_dmul>
 800b2dc:	9b08      	ldr	r3, [sp, #32]
 800b2de:	1b9e      	subs	r6, r3, r6
 800b2e0:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800b2e4:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b2e8:	e7e3      	b.n	800b2b2 <_strtod_l+0x3fa>
 800b2ea:	9b08      	ldr	r3, [sp, #32]
 800b2ec:	3316      	adds	r3, #22
 800b2ee:	db0b      	blt.n	800b308 <_strtod_l+0x450>
 800b2f0:	9b05      	ldr	r3, [sp, #20]
 800b2f2:	4640      	mov	r0, r8
 800b2f4:	4649      	mov	r1, r9
 800b2f6:	1bdf      	subs	r7, r3, r7
 800b2f8:	4b53      	ldr	r3, [pc, #332]	; (800b448 <_strtod_l+0x590>)
 800b2fa:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800b2fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b302:	f7f5 fab1 	bl	8000868 <__aeabi_ddiv>
 800b306:	e7d6      	b.n	800b2b6 <_strtod_l+0x3fe>
 800b308:	1b75      	subs	r5, r6, r5
 800b30a:	9b08      	ldr	r3, [sp, #32]
 800b30c:	441d      	add	r5, r3
 800b30e:	2d00      	cmp	r5, #0
 800b310:	dd70      	ble.n	800b3f4 <_strtod_l+0x53c>
 800b312:	f015 030f 	ands.w	r3, r5, #15
 800b316:	d00a      	beq.n	800b32e <_strtod_l+0x476>
 800b318:	494b      	ldr	r1, [pc, #300]	; (800b448 <_strtod_l+0x590>)
 800b31a:	4642      	mov	r2, r8
 800b31c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b320:	464b      	mov	r3, r9
 800b322:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b326:	f7f5 f975 	bl	8000614 <__aeabi_dmul>
 800b32a:	4680      	mov	r8, r0
 800b32c:	4689      	mov	r9, r1
 800b32e:	f035 050f 	bics.w	r5, r5, #15
 800b332:	d04d      	beq.n	800b3d0 <_strtod_l+0x518>
 800b334:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800b338:	dd22      	ble.n	800b380 <_strtod_l+0x4c8>
 800b33a:	2500      	movs	r5, #0
 800b33c:	46ab      	mov	fp, r5
 800b33e:	9509      	str	r5, [sp, #36]	; 0x24
 800b340:	9505      	str	r5, [sp, #20]
 800b342:	2322      	movs	r3, #34	; 0x22
 800b344:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800b450 <_strtod_l+0x598>
 800b348:	f04f 0800 	mov.w	r8, #0
 800b34c:	6023      	str	r3, [r4, #0]
 800b34e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b350:	2b00      	cmp	r3, #0
 800b352:	f43f adec 	beq.w	800af2e <_strtod_l+0x76>
 800b356:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b358:	4620      	mov	r0, r4
 800b35a:	f001 ff4b 	bl	800d1f4 <_Bfree>
 800b35e:	9905      	ldr	r1, [sp, #20]
 800b360:	4620      	mov	r0, r4
 800b362:	f001 ff47 	bl	800d1f4 <_Bfree>
 800b366:	4659      	mov	r1, fp
 800b368:	4620      	mov	r0, r4
 800b36a:	f001 ff43 	bl	800d1f4 <_Bfree>
 800b36e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b370:	4620      	mov	r0, r4
 800b372:	f001 ff3f 	bl	800d1f4 <_Bfree>
 800b376:	4629      	mov	r1, r5
 800b378:	4620      	mov	r0, r4
 800b37a:	f001 ff3b 	bl	800d1f4 <_Bfree>
 800b37e:	e5d6      	b.n	800af2e <_strtod_l+0x76>
 800b380:	4b32      	ldr	r3, [pc, #200]	; (800b44c <_strtod_l+0x594>)
 800b382:	112d      	asrs	r5, r5, #4
 800b384:	4640      	mov	r0, r8
 800b386:	4649      	mov	r1, r9
 800b388:	9304      	str	r3, [sp, #16]
 800b38a:	2300      	movs	r3, #0
 800b38c:	469a      	mov	sl, r3
 800b38e:	2d01      	cmp	r5, #1
 800b390:	dc21      	bgt.n	800b3d6 <_strtod_l+0x51e>
 800b392:	b10b      	cbz	r3, 800b398 <_strtod_l+0x4e0>
 800b394:	4680      	mov	r8, r0
 800b396:	4689      	mov	r9, r1
 800b398:	492c      	ldr	r1, [pc, #176]	; (800b44c <_strtod_l+0x594>)
 800b39a:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800b39e:	4642      	mov	r2, r8
 800b3a0:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800b3a4:	464b      	mov	r3, r9
 800b3a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b3aa:	f7f5 f933 	bl	8000614 <__aeabi_dmul>
 800b3ae:	4b28      	ldr	r3, [pc, #160]	; (800b450 <_strtod_l+0x598>)
 800b3b0:	460a      	mov	r2, r1
 800b3b2:	4680      	mov	r8, r0
 800b3b4:	400b      	ands	r3, r1
 800b3b6:	4927      	ldr	r1, [pc, #156]	; (800b454 <_strtod_l+0x59c>)
 800b3b8:	428b      	cmp	r3, r1
 800b3ba:	d8be      	bhi.n	800b33a <_strtod_l+0x482>
 800b3bc:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b3c0:	428b      	cmp	r3, r1
 800b3c2:	bf86      	itte	hi
 800b3c4:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800b458 <_strtod_l+0x5a0>
 800b3c8:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 800b3cc:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	9304      	str	r3, [sp, #16]
 800b3d4:	e07c      	b.n	800b4d0 <_strtod_l+0x618>
 800b3d6:	07ea      	lsls	r2, r5, #31
 800b3d8:	d505      	bpl.n	800b3e6 <_strtod_l+0x52e>
 800b3da:	9b04      	ldr	r3, [sp, #16]
 800b3dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3e0:	f7f5 f918 	bl	8000614 <__aeabi_dmul>
 800b3e4:	2301      	movs	r3, #1
 800b3e6:	9a04      	ldr	r2, [sp, #16]
 800b3e8:	f10a 0a01 	add.w	sl, sl, #1
 800b3ec:	106d      	asrs	r5, r5, #1
 800b3ee:	3208      	adds	r2, #8
 800b3f0:	9204      	str	r2, [sp, #16]
 800b3f2:	e7cc      	b.n	800b38e <_strtod_l+0x4d6>
 800b3f4:	d0ec      	beq.n	800b3d0 <_strtod_l+0x518>
 800b3f6:	426d      	negs	r5, r5
 800b3f8:	f015 020f 	ands.w	r2, r5, #15
 800b3fc:	d00a      	beq.n	800b414 <_strtod_l+0x55c>
 800b3fe:	4b12      	ldr	r3, [pc, #72]	; (800b448 <_strtod_l+0x590>)
 800b400:	4640      	mov	r0, r8
 800b402:	4649      	mov	r1, r9
 800b404:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b40c:	f7f5 fa2c 	bl	8000868 <__aeabi_ddiv>
 800b410:	4680      	mov	r8, r0
 800b412:	4689      	mov	r9, r1
 800b414:	112d      	asrs	r5, r5, #4
 800b416:	d0db      	beq.n	800b3d0 <_strtod_l+0x518>
 800b418:	2d1f      	cmp	r5, #31
 800b41a:	dd1f      	ble.n	800b45c <_strtod_l+0x5a4>
 800b41c:	2500      	movs	r5, #0
 800b41e:	46ab      	mov	fp, r5
 800b420:	9509      	str	r5, [sp, #36]	; 0x24
 800b422:	9505      	str	r5, [sp, #20]
 800b424:	2322      	movs	r3, #34	; 0x22
 800b426:	f04f 0800 	mov.w	r8, #0
 800b42a:	f04f 0900 	mov.w	r9, #0
 800b42e:	6023      	str	r3, [r4, #0]
 800b430:	e78d      	b.n	800b34e <_strtod_l+0x496>
 800b432:	bf00      	nop
 800b434:	0800e55f 	.word	0x0800e55f
 800b438:	0800e578 	.word	0x0800e578
 800b43c:	0800e556 	.word	0x0800e556
 800b440:	0800e559 	.word	0x0800e559
 800b444:	0800e76d 	.word	0x0800e76d
 800b448:	0800e898 	.word	0x0800e898
 800b44c:	0800e870 	.word	0x0800e870
 800b450:	7ff00000 	.word	0x7ff00000
 800b454:	7ca00000 	.word	0x7ca00000
 800b458:	7fefffff 	.word	0x7fefffff
 800b45c:	f015 0310 	ands.w	r3, r5, #16
 800b460:	4640      	mov	r0, r8
 800b462:	4649      	mov	r1, r9
 800b464:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800b808 <_strtod_l+0x950>
 800b468:	bf18      	it	ne
 800b46a:	236a      	movne	r3, #106	; 0x6a
 800b46c:	9304      	str	r3, [sp, #16]
 800b46e:	2300      	movs	r3, #0
 800b470:	07ea      	lsls	r2, r5, #31
 800b472:	d504      	bpl.n	800b47e <_strtod_l+0x5c6>
 800b474:	e9da 2300 	ldrd	r2, r3, [sl]
 800b478:	f7f5 f8cc 	bl	8000614 <__aeabi_dmul>
 800b47c:	2301      	movs	r3, #1
 800b47e:	106d      	asrs	r5, r5, #1
 800b480:	f10a 0a08 	add.w	sl, sl, #8
 800b484:	d1f4      	bne.n	800b470 <_strtod_l+0x5b8>
 800b486:	b10b      	cbz	r3, 800b48c <_strtod_l+0x5d4>
 800b488:	4680      	mov	r8, r0
 800b48a:	4689      	mov	r9, r1
 800b48c:	9b04      	ldr	r3, [sp, #16]
 800b48e:	b1bb      	cbz	r3, 800b4c0 <_strtod_l+0x608>
 800b490:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800b494:	4649      	mov	r1, r9
 800b496:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	dd10      	ble.n	800b4c0 <_strtod_l+0x608>
 800b49e:	2b1f      	cmp	r3, #31
 800b4a0:	f340 811e 	ble.w	800b6e0 <_strtod_l+0x828>
 800b4a4:	2b34      	cmp	r3, #52	; 0x34
 800b4a6:	f04f 0800 	mov.w	r8, #0
 800b4aa:	bfdb      	ittet	le
 800b4ac:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 800b4b0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800b4b4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800b4b8:	4093      	lslle	r3, r2
 800b4ba:	bfd8      	it	le
 800b4bc:	ea03 0901 	andle.w	r9, r3, r1
 800b4c0:	2200      	movs	r2, #0
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	4640      	mov	r0, r8
 800b4c6:	4649      	mov	r1, r9
 800b4c8:	f7f5 fb0c 	bl	8000ae4 <__aeabi_dcmpeq>
 800b4cc:	2800      	cmp	r0, #0
 800b4ce:	d1a5      	bne.n	800b41c <_strtod_l+0x564>
 800b4d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4d2:	465a      	mov	r2, fp
 800b4d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b4d6:	4620      	mov	r0, r4
 800b4d8:	9300      	str	r3, [sp, #0]
 800b4da:	4633      	mov	r3, r6
 800b4dc:	f001 fef4 	bl	800d2c8 <__s2b>
 800b4e0:	9009      	str	r0, [sp, #36]	; 0x24
 800b4e2:	2800      	cmp	r0, #0
 800b4e4:	f43f af29 	beq.w	800b33a <_strtod_l+0x482>
 800b4e8:	9a08      	ldr	r2, [sp, #32]
 800b4ea:	2500      	movs	r5, #0
 800b4ec:	9b05      	ldr	r3, [sp, #20]
 800b4ee:	2a00      	cmp	r2, #0
 800b4f0:	46ab      	mov	fp, r5
 800b4f2:	eba3 0307 	sub.w	r3, r3, r7
 800b4f6:	bfa8      	it	ge
 800b4f8:	2300      	movge	r3, #0
 800b4fa:	930c      	str	r3, [sp, #48]	; 0x30
 800b4fc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b500:	9312      	str	r3, [sp, #72]	; 0x48
 800b502:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b504:	4620      	mov	r0, r4
 800b506:	6859      	ldr	r1, [r3, #4]
 800b508:	f001 fe34 	bl	800d174 <_Balloc>
 800b50c:	9005      	str	r0, [sp, #20]
 800b50e:	2800      	cmp	r0, #0
 800b510:	f43f af17 	beq.w	800b342 <_strtod_l+0x48a>
 800b514:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b516:	300c      	adds	r0, #12
 800b518:	691a      	ldr	r2, [r3, #16]
 800b51a:	f103 010c 	add.w	r1, r3, #12
 800b51e:	3202      	adds	r2, #2
 800b520:	0092      	lsls	r2, r2, #2
 800b522:	f000 fcee 	bl	800bf02 <memcpy>
 800b526:	aa18      	add	r2, sp, #96	; 0x60
 800b528:	a917      	add	r1, sp, #92	; 0x5c
 800b52a:	4620      	mov	r0, r4
 800b52c:	ec49 8b10 	vmov	d0, r8, r9
 800b530:	f002 fa08 	bl	800d944 <__d2b>
 800b534:	9016      	str	r0, [sp, #88]	; 0x58
 800b536:	ec49 8b18 	vmov	d8, r8, r9
 800b53a:	2800      	cmp	r0, #0
 800b53c:	f43f af01 	beq.w	800b342 <_strtod_l+0x48a>
 800b540:	2101      	movs	r1, #1
 800b542:	4620      	mov	r0, r4
 800b544:	f001 ff58 	bl	800d3f8 <__i2b>
 800b548:	4683      	mov	fp, r0
 800b54a:	2800      	cmp	r0, #0
 800b54c:	f43f aef9 	beq.w	800b342 <_strtod_l+0x48a>
 800b550:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800b552:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b554:	2e00      	cmp	r6, #0
 800b556:	bfa9      	itett	ge
 800b558:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800b55a:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800b55c:	eb06 0a03 	addge.w	sl, r6, r3
 800b560:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800b562:	bfb8      	it	lt
 800b564:	1b9f      	sublt	r7, r3, r6
 800b566:	9b04      	ldr	r3, [sp, #16]
 800b568:	bfb8      	it	lt
 800b56a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800b56e:	1af6      	subs	r6, r6, r3
 800b570:	4ba0      	ldr	r3, [pc, #640]	; (800b7f4 <_strtod_l+0x93c>)
 800b572:	4416      	add	r6, r2
 800b574:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b578:	3e01      	subs	r6, #1
 800b57a:	429e      	cmp	r6, r3
 800b57c:	f280 80c3 	bge.w	800b706 <_strtod_l+0x84e>
 800b580:	1b9b      	subs	r3, r3, r6
 800b582:	2101      	movs	r1, #1
 800b584:	2b1f      	cmp	r3, #31
 800b586:	eba2 0203 	sub.w	r2, r2, r3
 800b58a:	f300 80b0 	bgt.w	800b6ee <_strtod_l+0x836>
 800b58e:	fa01 f303 	lsl.w	r3, r1, r3
 800b592:	930e      	str	r3, [sp, #56]	; 0x38
 800b594:	2300      	movs	r3, #0
 800b596:	930d      	str	r3, [sp, #52]	; 0x34
 800b598:	eb0a 0602 	add.w	r6, sl, r2
 800b59c:	9b04      	ldr	r3, [sp, #16]
 800b59e:	4417      	add	r7, r2
 800b5a0:	45b2      	cmp	sl, r6
 800b5a2:	441f      	add	r7, r3
 800b5a4:	4653      	mov	r3, sl
 800b5a6:	bfa8      	it	ge
 800b5a8:	4633      	movge	r3, r6
 800b5aa:	42bb      	cmp	r3, r7
 800b5ac:	bfa8      	it	ge
 800b5ae:	463b      	movge	r3, r7
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	bfc2      	ittt	gt
 800b5b4:	1af6      	subgt	r6, r6, r3
 800b5b6:	1aff      	subgt	r7, r7, r3
 800b5b8:	ebaa 0a03 	subgt.w	sl, sl, r3
 800b5bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	dd17      	ble.n	800b5f2 <_strtod_l+0x73a>
 800b5c2:	4659      	mov	r1, fp
 800b5c4:	461a      	mov	r2, r3
 800b5c6:	4620      	mov	r0, r4
 800b5c8:	f001 ffd6 	bl	800d578 <__pow5mult>
 800b5cc:	4683      	mov	fp, r0
 800b5ce:	2800      	cmp	r0, #0
 800b5d0:	f43f aeb7 	beq.w	800b342 <_strtod_l+0x48a>
 800b5d4:	4601      	mov	r1, r0
 800b5d6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b5d8:	4620      	mov	r0, r4
 800b5da:	f001 ff23 	bl	800d424 <__multiply>
 800b5de:	900b      	str	r0, [sp, #44]	; 0x2c
 800b5e0:	2800      	cmp	r0, #0
 800b5e2:	f43f aeae 	beq.w	800b342 <_strtod_l+0x48a>
 800b5e6:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b5e8:	4620      	mov	r0, r4
 800b5ea:	f001 fe03 	bl	800d1f4 <_Bfree>
 800b5ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b5f0:	9316      	str	r3, [sp, #88]	; 0x58
 800b5f2:	2e00      	cmp	r6, #0
 800b5f4:	f300 808c 	bgt.w	800b710 <_strtod_l+0x858>
 800b5f8:	9b08      	ldr	r3, [sp, #32]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	dd08      	ble.n	800b610 <_strtod_l+0x758>
 800b5fe:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b600:	4620      	mov	r0, r4
 800b602:	9905      	ldr	r1, [sp, #20]
 800b604:	f001 ffb8 	bl	800d578 <__pow5mult>
 800b608:	9005      	str	r0, [sp, #20]
 800b60a:	2800      	cmp	r0, #0
 800b60c:	f43f ae99 	beq.w	800b342 <_strtod_l+0x48a>
 800b610:	2f00      	cmp	r7, #0
 800b612:	dd08      	ble.n	800b626 <_strtod_l+0x76e>
 800b614:	463a      	mov	r2, r7
 800b616:	9905      	ldr	r1, [sp, #20]
 800b618:	4620      	mov	r0, r4
 800b61a:	f002 f807 	bl	800d62c <__lshift>
 800b61e:	9005      	str	r0, [sp, #20]
 800b620:	2800      	cmp	r0, #0
 800b622:	f43f ae8e 	beq.w	800b342 <_strtod_l+0x48a>
 800b626:	f1ba 0f00 	cmp.w	sl, #0
 800b62a:	dd08      	ble.n	800b63e <_strtod_l+0x786>
 800b62c:	4659      	mov	r1, fp
 800b62e:	4652      	mov	r2, sl
 800b630:	4620      	mov	r0, r4
 800b632:	f001 fffb 	bl	800d62c <__lshift>
 800b636:	4683      	mov	fp, r0
 800b638:	2800      	cmp	r0, #0
 800b63a:	f43f ae82 	beq.w	800b342 <_strtod_l+0x48a>
 800b63e:	9a05      	ldr	r2, [sp, #20]
 800b640:	4620      	mov	r0, r4
 800b642:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b644:	f002 f87a 	bl	800d73c <__mdiff>
 800b648:	4605      	mov	r5, r0
 800b64a:	2800      	cmp	r0, #0
 800b64c:	f43f ae79 	beq.w	800b342 <_strtod_l+0x48a>
 800b650:	68c3      	ldr	r3, [r0, #12]
 800b652:	4659      	mov	r1, fp
 800b654:	930b      	str	r3, [sp, #44]	; 0x2c
 800b656:	2300      	movs	r3, #0
 800b658:	60c3      	str	r3, [r0, #12]
 800b65a:	f002 f853 	bl	800d704 <__mcmp>
 800b65e:	2800      	cmp	r0, #0
 800b660:	da60      	bge.n	800b724 <_strtod_l+0x86c>
 800b662:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b664:	ea53 0308 	orrs.w	r3, r3, r8
 800b668:	f040 8084 	bne.w	800b774 <_strtod_l+0x8bc>
 800b66c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b670:	2b00      	cmp	r3, #0
 800b672:	d17f      	bne.n	800b774 <_strtod_l+0x8bc>
 800b674:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b678:	0d1b      	lsrs	r3, r3, #20
 800b67a:	051b      	lsls	r3, r3, #20
 800b67c:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b680:	d978      	bls.n	800b774 <_strtod_l+0x8bc>
 800b682:	696b      	ldr	r3, [r5, #20]
 800b684:	b913      	cbnz	r3, 800b68c <_strtod_l+0x7d4>
 800b686:	692b      	ldr	r3, [r5, #16]
 800b688:	2b01      	cmp	r3, #1
 800b68a:	dd73      	ble.n	800b774 <_strtod_l+0x8bc>
 800b68c:	4629      	mov	r1, r5
 800b68e:	2201      	movs	r2, #1
 800b690:	4620      	mov	r0, r4
 800b692:	f001 ffcb 	bl	800d62c <__lshift>
 800b696:	4659      	mov	r1, fp
 800b698:	4605      	mov	r5, r0
 800b69a:	f002 f833 	bl	800d704 <__mcmp>
 800b69e:	2800      	cmp	r0, #0
 800b6a0:	dd68      	ble.n	800b774 <_strtod_l+0x8bc>
 800b6a2:	9904      	ldr	r1, [sp, #16]
 800b6a4:	464b      	mov	r3, r9
 800b6a6:	4a54      	ldr	r2, [pc, #336]	; (800b7f8 <_strtod_l+0x940>)
 800b6a8:	2900      	cmp	r1, #0
 800b6aa:	f000 8084 	beq.w	800b7b6 <_strtod_l+0x8fe>
 800b6ae:	ea02 0109 	and.w	r1, r2, r9
 800b6b2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b6b6:	dc7e      	bgt.n	800b7b6 <_strtod_l+0x8fe>
 800b6b8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b6bc:	f77f aeb2 	ble.w	800b424 <_strtod_l+0x56c>
 800b6c0:	4b4e      	ldr	r3, [pc, #312]	; (800b7fc <_strtod_l+0x944>)
 800b6c2:	4640      	mov	r0, r8
 800b6c4:	4649      	mov	r1, r9
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	f7f4 ffa4 	bl	8000614 <__aeabi_dmul>
 800b6cc:	4b4a      	ldr	r3, [pc, #296]	; (800b7f8 <_strtod_l+0x940>)
 800b6ce:	4680      	mov	r8, r0
 800b6d0:	4689      	mov	r9, r1
 800b6d2:	400b      	ands	r3, r1
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	f47f ae3e 	bne.w	800b356 <_strtod_l+0x49e>
 800b6da:	2322      	movs	r3, #34	; 0x22
 800b6dc:	6023      	str	r3, [r4, #0]
 800b6de:	e63a      	b.n	800b356 <_strtod_l+0x49e>
 800b6e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b6e4:	fa02 f303 	lsl.w	r3, r2, r3
 800b6e8:	ea03 0808 	and.w	r8, r3, r8
 800b6ec:	e6e8      	b.n	800b4c0 <_strtod_l+0x608>
 800b6ee:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800b6f2:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800b6f6:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800b6fa:	36e2      	adds	r6, #226	; 0xe2
 800b6fc:	fa01 f306 	lsl.w	r3, r1, r6
 800b700:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800b704:	e748      	b.n	800b598 <_strtod_l+0x6e0>
 800b706:	2100      	movs	r1, #0
 800b708:	2301      	movs	r3, #1
 800b70a:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800b70e:	e743      	b.n	800b598 <_strtod_l+0x6e0>
 800b710:	4632      	mov	r2, r6
 800b712:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b714:	4620      	mov	r0, r4
 800b716:	f001 ff89 	bl	800d62c <__lshift>
 800b71a:	9016      	str	r0, [sp, #88]	; 0x58
 800b71c:	2800      	cmp	r0, #0
 800b71e:	f47f af6b 	bne.w	800b5f8 <_strtod_l+0x740>
 800b722:	e60e      	b.n	800b342 <_strtod_l+0x48a>
 800b724:	46ca      	mov	sl, r9
 800b726:	d171      	bne.n	800b80c <_strtod_l+0x954>
 800b728:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b72a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b72e:	b352      	cbz	r2, 800b786 <_strtod_l+0x8ce>
 800b730:	4a33      	ldr	r2, [pc, #204]	; (800b800 <_strtod_l+0x948>)
 800b732:	4293      	cmp	r3, r2
 800b734:	d12a      	bne.n	800b78c <_strtod_l+0x8d4>
 800b736:	9b04      	ldr	r3, [sp, #16]
 800b738:	4641      	mov	r1, r8
 800b73a:	b1fb      	cbz	r3, 800b77c <_strtod_l+0x8c4>
 800b73c:	4b2e      	ldr	r3, [pc, #184]	; (800b7f8 <_strtod_l+0x940>)
 800b73e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b742:	ea09 0303 	and.w	r3, r9, r3
 800b746:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b74a:	d81a      	bhi.n	800b782 <_strtod_l+0x8ca>
 800b74c:	0d1b      	lsrs	r3, r3, #20
 800b74e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b752:	fa02 f303 	lsl.w	r3, r2, r3
 800b756:	4299      	cmp	r1, r3
 800b758:	d118      	bne.n	800b78c <_strtod_l+0x8d4>
 800b75a:	4b2a      	ldr	r3, [pc, #168]	; (800b804 <_strtod_l+0x94c>)
 800b75c:	459a      	cmp	sl, r3
 800b75e:	d102      	bne.n	800b766 <_strtod_l+0x8ae>
 800b760:	3101      	adds	r1, #1
 800b762:	f43f adee 	beq.w	800b342 <_strtod_l+0x48a>
 800b766:	4b24      	ldr	r3, [pc, #144]	; (800b7f8 <_strtod_l+0x940>)
 800b768:	f04f 0800 	mov.w	r8, #0
 800b76c:	ea0a 0303 	and.w	r3, sl, r3
 800b770:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800b774:	9b04      	ldr	r3, [sp, #16]
 800b776:	2b00      	cmp	r3, #0
 800b778:	d1a2      	bne.n	800b6c0 <_strtod_l+0x808>
 800b77a:	e5ec      	b.n	800b356 <_strtod_l+0x49e>
 800b77c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b780:	e7e9      	b.n	800b756 <_strtod_l+0x89e>
 800b782:	4613      	mov	r3, r2
 800b784:	e7e7      	b.n	800b756 <_strtod_l+0x89e>
 800b786:	ea53 0308 	orrs.w	r3, r3, r8
 800b78a:	d08a      	beq.n	800b6a2 <_strtod_l+0x7ea>
 800b78c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b78e:	b1e3      	cbz	r3, 800b7ca <_strtod_l+0x912>
 800b790:	ea13 0f0a 	tst.w	r3, sl
 800b794:	d0ee      	beq.n	800b774 <_strtod_l+0x8bc>
 800b796:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b798:	4640      	mov	r0, r8
 800b79a:	9a04      	ldr	r2, [sp, #16]
 800b79c:	4649      	mov	r1, r9
 800b79e:	b1c3      	cbz	r3, 800b7d2 <_strtod_l+0x91a>
 800b7a0:	f7ff fb6c 	bl	800ae7c <sulp>
 800b7a4:	4602      	mov	r2, r0
 800b7a6:	460b      	mov	r3, r1
 800b7a8:	ec51 0b18 	vmov	r0, r1, d8
 800b7ac:	f7f4 fd7c 	bl	80002a8 <__adddf3>
 800b7b0:	4680      	mov	r8, r0
 800b7b2:	4689      	mov	r9, r1
 800b7b4:	e7de      	b.n	800b774 <_strtod_l+0x8bc>
 800b7b6:	4013      	ands	r3, r2
 800b7b8:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800b7bc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b7c0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800b7c4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800b7c8:	e7d4      	b.n	800b774 <_strtod_l+0x8bc>
 800b7ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b7cc:	ea13 0f08 	tst.w	r3, r8
 800b7d0:	e7e0      	b.n	800b794 <_strtod_l+0x8dc>
 800b7d2:	f7ff fb53 	bl	800ae7c <sulp>
 800b7d6:	4602      	mov	r2, r0
 800b7d8:	460b      	mov	r3, r1
 800b7da:	ec51 0b18 	vmov	r0, r1, d8
 800b7de:	f7f4 fd61 	bl	80002a4 <__aeabi_dsub>
 800b7e2:	2200      	movs	r2, #0
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	4680      	mov	r8, r0
 800b7e8:	4689      	mov	r9, r1
 800b7ea:	f7f5 f97b 	bl	8000ae4 <__aeabi_dcmpeq>
 800b7ee:	2800      	cmp	r0, #0
 800b7f0:	d0c0      	beq.n	800b774 <_strtod_l+0x8bc>
 800b7f2:	e617      	b.n	800b424 <_strtod_l+0x56c>
 800b7f4:	fffffc02 	.word	0xfffffc02
 800b7f8:	7ff00000 	.word	0x7ff00000
 800b7fc:	39500000 	.word	0x39500000
 800b800:	000fffff 	.word	0x000fffff
 800b804:	7fefffff 	.word	0x7fefffff
 800b808:	0800e590 	.word	0x0800e590
 800b80c:	4659      	mov	r1, fp
 800b80e:	4628      	mov	r0, r5
 800b810:	f002 f8f2 	bl	800d9f8 <__ratio>
 800b814:	2200      	movs	r2, #0
 800b816:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b81a:	ee10 0a10 	vmov	r0, s0
 800b81e:	ec57 6b10 	vmov	r6, r7, d0
 800b822:	4639      	mov	r1, r7
 800b824:	f7f5 f972 	bl	8000b0c <__aeabi_dcmple>
 800b828:	2800      	cmp	r0, #0
 800b82a:	d071      	beq.n	800b910 <_strtod_l+0xa58>
 800b82c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d17c      	bne.n	800b92c <_strtod_l+0xa74>
 800b832:	f1b8 0f00 	cmp.w	r8, #0
 800b836:	d15a      	bne.n	800b8ee <_strtod_l+0xa36>
 800b838:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d15d      	bne.n	800b8fc <_strtod_l+0xa44>
 800b840:	2200      	movs	r2, #0
 800b842:	4b91      	ldr	r3, [pc, #580]	; (800ba88 <_strtod_l+0xbd0>)
 800b844:	4630      	mov	r0, r6
 800b846:	4639      	mov	r1, r7
 800b848:	f7f5 f956 	bl	8000af8 <__aeabi_dcmplt>
 800b84c:	2800      	cmp	r0, #0
 800b84e:	d15c      	bne.n	800b90a <_strtod_l+0xa52>
 800b850:	4630      	mov	r0, r6
 800b852:	4639      	mov	r1, r7
 800b854:	2200      	movs	r2, #0
 800b856:	4b8d      	ldr	r3, [pc, #564]	; (800ba8c <_strtod_l+0xbd4>)
 800b858:	f7f4 fedc 	bl	8000614 <__aeabi_dmul>
 800b85c:	4606      	mov	r6, r0
 800b85e:	460f      	mov	r7, r1
 800b860:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800b864:	9606      	str	r6, [sp, #24]
 800b866:	9307      	str	r3, [sp, #28]
 800b868:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b86c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800b870:	4b87      	ldr	r3, [pc, #540]	; (800ba90 <_strtod_l+0xbd8>)
 800b872:	ea0a 0303 	and.w	r3, sl, r3
 800b876:	930d      	str	r3, [sp, #52]	; 0x34
 800b878:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b87a:	4b86      	ldr	r3, [pc, #536]	; (800ba94 <_strtod_l+0xbdc>)
 800b87c:	429a      	cmp	r2, r3
 800b87e:	f040 8090 	bne.w	800b9a2 <_strtod_l+0xaea>
 800b882:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800b886:	ec49 8b10 	vmov	d0, r8, r9
 800b88a:	f001 ffe7 	bl	800d85c <__ulp>
 800b88e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b892:	ec51 0b10 	vmov	r0, r1, d0
 800b896:	f7f4 febd 	bl	8000614 <__aeabi_dmul>
 800b89a:	4642      	mov	r2, r8
 800b89c:	464b      	mov	r3, r9
 800b89e:	f7f4 fd03 	bl	80002a8 <__adddf3>
 800b8a2:	460b      	mov	r3, r1
 800b8a4:	497a      	ldr	r1, [pc, #488]	; (800ba90 <_strtod_l+0xbd8>)
 800b8a6:	4680      	mov	r8, r0
 800b8a8:	4a7b      	ldr	r2, [pc, #492]	; (800ba98 <_strtod_l+0xbe0>)
 800b8aa:	4019      	ands	r1, r3
 800b8ac:	4291      	cmp	r1, r2
 800b8ae:	d944      	bls.n	800b93a <_strtod_l+0xa82>
 800b8b0:	ee18 2a90 	vmov	r2, s17
 800b8b4:	4b79      	ldr	r3, [pc, #484]	; (800ba9c <_strtod_l+0xbe4>)
 800b8b6:	429a      	cmp	r2, r3
 800b8b8:	d104      	bne.n	800b8c4 <_strtod_l+0xa0c>
 800b8ba:	ee18 3a10 	vmov	r3, s16
 800b8be:	3301      	adds	r3, #1
 800b8c0:	f43f ad3f 	beq.w	800b342 <_strtod_l+0x48a>
 800b8c4:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 800ba9c <_strtod_l+0xbe4>
 800b8c8:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800b8cc:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b8ce:	4620      	mov	r0, r4
 800b8d0:	f001 fc90 	bl	800d1f4 <_Bfree>
 800b8d4:	9905      	ldr	r1, [sp, #20]
 800b8d6:	4620      	mov	r0, r4
 800b8d8:	f001 fc8c 	bl	800d1f4 <_Bfree>
 800b8dc:	4659      	mov	r1, fp
 800b8de:	4620      	mov	r0, r4
 800b8e0:	f001 fc88 	bl	800d1f4 <_Bfree>
 800b8e4:	4629      	mov	r1, r5
 800b8e6:	4620      	mov	r0, r4
 800b8e8:	f001 fc84 	bl	800d1f4 <_Bfree>
 800b8ec:	e609      	b.n	800b502 <_strtod_l+0x64a>
 800b8ee:	f1b8 0f01 	cmp.w	r8, #1
 800b8f2:	d103      	bne.n	800b8fc <_strtod_l+0xa44>
 800b8f4:	f1b9 0f00 	cmp.w	r9, #0
 800b8f8:	f43f ad94 	beq.w	800b424 <_strtod_l+0x56c>
 800b8fc:	2600      	movs	r6, #0
 800b8fe:	4f62      	ldr	r7, [pc, #392]	; (800ba88 <_strtod_l+0xbd0>)
 800b900:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800ba58 <_strtod_l+0xba0>
 800b904:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b908:	e7ae      	b.n	800b868 <_strtod_l+0x9b0>
 800b90a:	2600      	movs	r6, #0
 800b90c:	4f5f      	ldr	r7, [pc, #380]	; (800ba8c <_strtod_l+0xbd4>)
 800b90e:	e7a7      	b.n	800b860 <_strtod_l+0x9a8>
 800b910:	4b5e      	ldr	r3, [pc, #376]	; (800ba8c <_strtod_l+0xbd4>)
 800b912:	4630      	mov	r0, r6
 800b914:	4639      	mov	r1, r7
 800b916:	2200      	movs	r2, #0
 800b918:	f7f4 fe7c 	bl	8000614 <__aeabi_dmul>
 800b91c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b91e:	4606      	mov	r6, r0
 800b920:	460f      	mov	r7, r1
 800b922:	2b00      	cmp	r3, #0
 800b924:	d09c      	beq.n	800b860 <_strtod_l+0x9a8>
 800b926:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b92a:	e79d      	b.n	800b868 <_strtod_l+0x9b0>
 800b92c:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 800ba60 <_strtod_l+0xba8>
 800b930:	ec57 6b17 	vmov	r6, r7, d7
 800b934:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b938:	e796      	b.n	800b868 <_strtod_l+0x9b0>
 800b93a:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800b93e:	9b04      	ldr	r3, [sp, #16]
 800b940:	46ca      	mov	sl, r9
 800b942:	2b00      	cmp	r3, #0
 800b944:	d1c2      	bne.n	800b8cc <_strtod_l+0xa14>
 800b946:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b94a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b94c:	0d1b      	lsrs	r3, r3, #20
 800b94e:	051b      	lsls	r3, r3, #20
 800b950:	429a      	cmp	r2, r3
 800b952:	d1bb      	bne.n	800b8cc <_strtod_l+0xa14>
 800b954:	4630      	mov	r0, r6
 800b956:	4639      	mov	r1, r7
 800b958:	f7f5 f994 	bl	8000c84 <__aeabi_d2lz>
 800b95c:	f7f4 fe2c 	bl	80005b8 <__aeabi_l2d>
 800b960:	4602      	mov	r2, r0
 800b962:	460b      	mov	r3, r1
 800b964:	4630      	mov	r0, r6
 800b966:	4639      	mov	r1, r7
 800b968:	f7f4 fc9c 	bl	80002a4 <__aeabi_dsub>
 800b96c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b970:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b972:	4606      	mov	r6, r0
 800b974:	ea43 0308 	orr.w	r3, r3, r8
 800b978:	460f      	mov	r7, r1
 800b97a:	4313      	orrs	r3, r2
 800b97c:	d054      	beq.n	800ba28 <_strtod_l+0xb70>
 800b97e:	a33a      	add	r3, pc, #232	; (adr r3, 800ba68 <_strtod_l+0xbb0>)
 800b980:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b984:	f7f5 f8b8 	bl	8000af8 <__aeabi_dcmplt>
 800b988:	2800      	cmp	r0, #0
 800b98a:	f47f ace4 	bne.w	800b356 <_strtod_l+0x49e>
 800b98e:	4630      	mov	r0, r6
 800b990:	4639      	mov	r1, r7
 800b992:	a337      	add	r3, pc, #220	; (adr r3, 800ba70 <_strtod_l+0xbb8>)
 800b994:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b998:	f7f5 f8cc 	bl	8000b34 <__aeabi_dcmpgt>
 800b99c:	2800      	cmp	r0, #0
 800b99e:	d095      	beq.n	800b8cc <_strtod_l+0xa14>
 800b9a0:	e4d9      	b.n	800b356 <_strtod_l+0x49e>
 800b9a2:	9b04      	ldr	r3, [sp, #16]
 800b9a4:	b333      	cbz	r3, 800b9f4 <_strtod_l+0xb3c>
 800b9a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b9a8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b9ac:	d822      	bhi.n	800b9f4 <_strtod_l+0xb3c>
 800b9ae:	4630      	mov	r0, r6
 800b9b0:	4639      	mov	r1, r7
 800b9b2:	a331      	add	r3, pc, #196	; (adr r3, 800ba78 <_strtod_l+0xbc0>)
 800b9b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9b8:	f7f5 f8a8 	bl	8000b0c <__aeabi_dcmple>
 800b9bc:	b1a0      	cbz	r0, 800b9e8 <_strtod_l+0xb30>
 800b9be:	4639      	mov	r1, r7
 800b9c0:	4630      	mov	r0, r6
 800b9c2:	f7f5 f8d7 	bl	8000b74 <__aeabi_d2uiz>
 800b9c6:	2801      	cmp	r0, #1
 800b9c8:	bf38      	it	cc
 800b9ca:	2001      	movcc	r0, #1
 800b9cc:	f7f4 fda8 	bl	8000520 <__aeabi_ui2d>
 800b9d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b9d2:	4606      	mov	r6, r0
 800b9d4:	460f      	mov	r7, r1
 800b9d6:	bb23      	cbnz	r3, 800ba22 <_strtod_l+0xb6a>
 800b9d8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b9dc:	9010      	str	r0, [sp, #64]	; 0x40
 800b9de:	9311      	str	r3, [sp, #68]	; 0x44
 800b9e0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b9e4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800b9e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b9ea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b9ec:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b9f0:	1a9b      	subs	r3, r3, r2
 800b9f2:	930f      	str	r3, [sp, #60]	; 0x3c
 800b9f4:	eeb0 0a48 	vmov.f32	s0, s16
 800b9f8:	eef0 0a68 	vmov.f32	s1, s17
 800b9fc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800ba00:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800ba04:	f001 ff2a 	bl	800d85c <__ulp>
 800ba08:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800ba0c:	ec53 2b10 	vmov	r2, r3, d0
 800ba10:	f7f4 fe00 	bl	8000614 <__aeabi_dmul>
 800ba14:	ec53 2b18 	vmov	r2, r3, d8
 800ba18:	f7f4 fc46 	bl	80002a8 <__adddf3>
 800ba1c:	4680      	mov	r8, r0
 800ba1e:	4689      	mov	r9, r1
 800ba20:	e78d      	b.n	800b93e <_strtod_l+0xa86>
 800ba22:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800ba26:	e7db      	b.n	800b9e0 <_strtod_l+0xb28>
 800ba28:	a315      	add	r3, pc, #84	; (adr r3, 800ba80 <_strtod_l+0xbc8>)
 800ba2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba2e:	f7f5 f863 	bl	8000af8 <__aeabi_dcmplt>
 800ba32:	e7b3      	b.n	800b99c <_strtod_l+0xae4>
 800ba34:	2300      	movs	r3, #0
 800ba36:	930a      	str	r3, [sp, #40]	; 0x28
 800ba38:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ba3a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ba3c:	6013      	str	r3, [r2, #0]
 800ba3e:	f7ff ba7a 	b.w	800af36 <_strtod_l+0x7e>
 800ba42:	2a65      	cmp	r2, #101	; 0x65
 800ba44:	f43f ab72 	beq.w	800b12c <_strtod_l+0x274>
 800ba48:	2a45      	cmp	r2, #69	; 0x45
 800ba4a:	f43f ab6f 	beq.w	800b12c <_strtod_l+0x274>
 800ba4e:	2301      	movs	r3, #1
 800ba50:	f7ff bba8 	b.w	800b1a4 <_strtod_l+0x2ec>
 800ba54:	f3af 8000 	nop.w
 800ba58:	00000000 	.word	0x00000000
 800ba5c:	bff00000 	.word	0xbff00000
 800ba60:	00000000 	.word	0x00000000
 800ba64:	3ff00000 	.word	0x3ff00000
 800ba68:	94a03595 	.word	0x94a03595
 800ba6c:	3fdfffff 	.word	0x3fdfffff
 800ba70:	35afe535 	.word	0x35afe535
 800ba74:	3fe00000 	.word	0x3fe00000
 800ba78:	ffc00000 	.word	0xffc00000
 800ba7c:	41dfffff 	.word	0x41dfffff
 800ba80:	94a03595 	.word	0x94a03595
 800ba84:	3fcfffff 	.word	0x3fcfffff
 800ba88:	3ff00000 	.word	0x3ff00000
 800ba8c:	3fe00000 	.word	0x3fe00000
 800ba90:	7ff00000 	.word	0x7ff00000
 800ba94:	7fe00000 	.word	0x7fe00000
 800ba98:	7c9fffff 	.word	0x7c9fffff
 800ba9c:	7fefffff 	.word	0x7fefffff

0800baa0 <strtof>:
 800baa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800baa4:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 800bb68 <strtof+0xc8>
 800baa8:	460a      	mov	r2, r1
 800baaa:	4b2a      	ldr	r3, [pc, #168]	; (800bb54 <strtof+0xb4>)
 800baac:	4601      	mov	r1, r0
 800baae:	f8d8 0000 	ldr.w	r0, [r8]
 800bab2:	ed2d 8b02 	vpush	{d8}
 800bab6:	f7ff f9ff 	bl	800aeb8 <_strtod_l>
 800baba:	ee10 2a10 	vmov	r2, s0
 800babe:	ee10 0a10 	vmov	r0, s0
 800bac2:	ec55 4b10 	vmov	r4, r5, d0
 800bac6:	462b      	mov	r3, r5
 800bac8:	4629      	mov	r1, r5
 800baca:	f7f5 f83d 	bl	8000b48 <__aeabi_dcmpun>
 800bace:	b190      	cbz	r0, 800baf6 <strtof+0x56>
 800bad0:	2d00      	cmp	r5, #0
 800bad2:	4821      	ldr	r0, [pc, #132]	; (800bb58 <strtof+0xb8>)
 800bad4:	da09      	bge.n	800baea <strtof+0x4a>
 800bad6:	f000 fa33 	bl	800bf40 <nanf>
 800bada:	eeb1 8a40 	vneg.f32	s16, s0
 800bade:	eeb0 0a48 	vmov.f32	s0, s16
 800bae2:	ecbd 8b02 	vpop	{d8}
 800bae6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800baea:	ecbd 8b02 	vpop	{d8}
 800baee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800baf2:	f000 ba25 	b.w	800bf40 <nanf>
 800baf6:	4620      	mov	r0, r4
 800baf8:	4629      	mov	r1, r5
 800bafa:	f7f5 f85b 	bl	8000bb4 <__aeabi_d2f>
 800bafe:	ee08 0a10 	vmov	s16, r0
 800bb02:	eddf 7a16 	vldr	s15, [pc, #88]	; 800bb5c <strtof+0xbc>
 800bb06:	eeb0 7ac8 	vabs.f32	s14, s16
 800bb0a:	eeb4 7a67 	vcmp.f32	s14, s15
 800bb0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb12:	dd11      	ble.n	800bb38 <strtof+0x98>
 800bb14:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 800bb18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bb1c:	4b10      	ldr	r3, [pc, #64]	; (800bb60 <strtof+0xc0>)
 800bb1e:	4620      	mov	r0, r4
 800bb20:	4639      	mov	r1, r7
 800bb22:	f7f5 f811 	bl	8000b48 <__aeabi_dcmpun>
 800bb26:	b980      	cbnz	r0, 800bb4a <strtof+0xaa>
 800bb28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bb2c:	4b0c      	ldr	r3, [pc, #48]	; (800bb60 <strtof+0xc0>)
 800bb2e:	4620      	mov	r0, r4
 800bb30:	4639      	mov	r1, r7
 800bb32:	f7f4 ffeb 	bl	8000b0c <__aeabi_dcmple>
 800bb36:	b940      	cbnz	r0, 800bb4a <strtof+0xaa>
 800bb38:	ee18 3a10 	vmov	r3, s16
 800bb3c:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800bb40:	d1cd      	bne.n	800bade <strtof+0x3e>
 800bb42:	4b08      	ldr	r3, [pc, #32]	; (800bb64 <strtof+0xc4>)
 800bb44:	402b      	ands	r3, r5
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d0c9      	beq.n	800bade <strtof+0x3e>
 800bb4a:	f8d8 3000 	ldr.w	r3, [r8]
 800bb4e:	2222      	movs	r2, #34	; 0x22
 800bb50:	601a      	str	r2, [r3, #0]
 800bb52:	e7c4      	b.n	800bade <strtof+0x3e>
 800bb54:	20000120 	.word	0x20000120
 800bb58:	0800e76d 	.word	0x0800e76d
 800bb5c:	7f7fffff 	.word	0x7f7fffff
 800bb60:	7fefffff 	.word	0x7fefffff
 800bb64:	7ff00000 	.word	0x7ff00000
 800bb68:	200002d8 	.word	0x200002d8

0800bb6c <_strtol_l.constprop.0>:
 800bb6c:	2b01      	cmp	r3, #1
 800bb6e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb72:	d001      	beq.n	800bb78 <_strtol_l.constprop.0+0xc>
 800bb74:	2b24      	cmp	r3, #36	; 0x24
 800bb76:	d906      	bls.n	800bb86 <_strtol_l.constprop.0+0x1a>
 800bb78:	f000 f996 	bl	800bea8 <__errno>
 800bb7c:	2316      	movs	r3, #22
 800bb7e:	6003      	str	r3, [r0, #0]
 800bb80:	2000      	movs	r0, #0
 800bb82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb86:	460d      	mov	r5, r1
 800bb88:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 800bc6c <_strtol_l.constprop.0+0x100>
 800bb8c:	462e      	mov	r6, r5
 800bb8e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bb92:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800bb96:	f017 0708 	ands.w	r7, r7, #8
 800bb9a:	d1f7      	bne.n	800bb8c <_strtol_l.constprop.0+0x20>
 800bb9c:	2c2d      	cmp	r4, #45	; 0x2d
 800bb9e:	d132      	bne.n	800bc06 <_strtol_l.constprop.0+0x9a>
 800bba0:	782c      	ldrb	r4, [r5, #0]
 800bba2:	2701      	movs	r7, #1
 800bba4:	1cb5      	adds	r5, r6, #2
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d05b      	beq.n	800bc62 <_strtol_l.constprop.0+0xf6>
 800bbaa:	2b10      	cmp	r3, #16
 800bbac:	d109      	bne.n	800bbc2 <_strtol_l.constprop.0+0x56>
 800bbae:	2c30      	cmp	r4, #48	; 0x30
 800bbb0:	d107      	bne.n	800bbc2 <_strtol_l.constprop.0+0x56>
 800bbb2:	782c      	ldrb	r4, [r5, #0]
 800bbb4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800bbb8:	2c58      	cmp	r4, #88	; 0x58
 800bbba:	d14d      	bne.n	800bc58 <_strtol_l.constprop.0+0xec>
 800bbbc:	786c      	ldrb	r4, [r5, #1]
 800bbbe:	2310      	movs	r3, #16
 800bbc0:	3502      	adds	r5, #2
 800bbc2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800bbc6:	f04f 0e00 	mov.w	lr, #0
 800bbca:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800bbce:	4676      	mov	r6, lr
 800bbd0:	fbb8 f9f3 	udiv	r9, r8, r3
 800bbd4:	fb03 8a19 	mls	sl, r3, r9, r8
 800bbd8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800bbdc:	f1bc 0f09 	cmp.w	ip, #9
 800bbe0:	d816      	bhi.n	800bc10 <_strtol_l.constprop.0+0xa4>
 800bbe2:	4664      	mov	r4, ip
 800bbe4:	42a3      	cmp	r3, r4
 800bbe6:	dd24      	ble.n	800bc32 <_strtol_l.constprop.0+0xc6>
 800bbe8:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800bbec:	d008      	beq.n	800bc00 <_strtol_l.constprop.0+0x94>
 800bbee:	45b1      	cmp	r9, r6
 800bbf0:	d31c      	bcc.n	800bc2c <_strtol_l.constprop.0+0xc0>
 800bbf2:	d101      	bne.n	800bbf8 <_strtol_l.constprop.0+0x8c>
 800bbf4:	45a2      	cmp	sl, r4
 800bbf6:	db19      	blt.n	800bc2c <_strtol_l.constprop.0+0xc0>
 800bbf8:	fb06 4603 	mla	r6, r6, r3, r4
 800bbfc:	f04f 0e01 	mov.w	lr, #1
 800bc00:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bc04:	e7e8      	b.n	800bbd8 <_strtol_l.constprop.0+0x6c>
 800bc06:	2c2b      	cmp	r4, #43	; 0x2b
 800bc08:	bf04      	itt	eq
 800bc0a:	782c      	ldrbeq	r4, [r5, #0]
 800bc0c:	1cb5      	addeq	r5, r6, #2
 800bc0e:	e7ca      	b.n	800bba6 <_strtol_l.constprop.0+0x3a>
 800bc10:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800bc14:	f1bc 0f19 	cmp.w	ip, #25
 800bc18:	d801      	bhi.n	800bc1e <_strtol_l.constprop.0+0xb2>
 800bc1a:	3c37      	subs	r4, #55	; 0x37
 800bc1c:	e7e2      	b.n	800bbe4 <_strtol_l.constprop.0+0x78>
 800bc1e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800bc22:	f1bc 0f19 	cmp.w	ip, #25
 800bc26:	d804      	bhi.n	800bc32 <_strtol_l.constprop.0+0xc6>
 800bc28:	3c57      	subs	r4, #87	; 0x57
 800bc2a:	e7db      	b.n	800bbe4 <_strtol_l.constprop.0+0x78>
 800bc2c:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 800bc30:	e7e6      	b.n	800bc00 <_strtol_l.constprop.0+0x94>
 800bc32:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800bc36:	d105      	bne.n	800bc44 <_strtol_l.constprop.0+0xd8>
 800bc38:	2322      	movs	r3, #34	; 0x22
 800bc3a:	4646      	mov	r6, r8
 800bc3c:	6003      	str	r3, [r0, #0]
 800bc3e:	b942      	cbnz	r2, 800bc52 <_strtol_l.constprop.0+0xe6>
 800bc40:	4630      	mov	r0, r6
 800bc42:	e79e      	b.n	800bb82 <_strtol_l.constprop.0+0x16>
 800bc44:	b107      	cbz	r7, 800bc48 <_strtol_l.constprop.0+0xdc>
 800bc46:	4276      	negs	r6, r6
 800bc48:	2a00      	cmp	r2, #0
 800bc4a:	d0f9      	beq.n	800bc40 <_strtol_l.constprop.0+0xd4>
 800bc4c:	f1be 0f00 	cmp.w	lr, #0
 800bc50:	d000      	beq.n	800bc54 <_strtol_l.constprop.0+0xe8>
 800bc52:	1e69      	subs	r1, r5, #1
 800bc54:	6011      	str	r1, [r2, #0]
 800bc56:	e7f3      	b.n	800bc40 <_strtol_l.constprop.0+0xd4>
 800bc58:	2430      	movs	r4, #48	; 0x30
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d1b1      	bne.n	800bbc2 <_strtol_l.constprop.0+0x56>
 800bc5e:	2308      	movs	r3, #8
 800bc60:	e7af      	b.n	800bbc2 <_strtol_l.constprop.0+0x56>
 800bc62:	2c30      	cmp	r4, #48	; 0x30
 800bc64:	d0a5      	beq.n	800bbb2 <_strtol_l.constprop.0+0x46>
 800bc66:	230a      	movs	r3, #10
 800bc68:	e7ab      	b.n	800bbc2 <_strtol_l.constprop.0+0x56>
 800bc6a:	bf00      	nop
 800bc6c:	0800e632 	.word	0x0800e632

0800bc70 <strtol>:
 800bc70:	4613      	mov	r3, r2
 800bc72:	460a      	mov	r2, r1
 800bc74:	4601      	mov	r1, r0
 800bc76:	4802      	ldr	r0, [pc, #8]	; (800bc80 <strtol+0x10>)
 800bc78:	6800      	ldr	r0, [r0, #0]
 800bc7a:	f7ff bf77 	b.w	800bb6c <_strtol_l.constprop.0>
 800bc7e:	bf00      	nop
 800bc80:	200002d8 	.word	0x200002d8

0800bc84 <_fwalk_sglue>:
 800bc84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc88:	4607      	mov	r7, r0
 800bc8a:	4688      	mov	r8, r1
 800bc8c:	4614      	mov	r4, r2
 800bc8e:	2600      	movs	r6, #0
 800bc90:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bc94:	f1b9 0901 	subs.w	r9, r9, #1
 800bc98:	d505      	bpl.n	800bca6 <_fwalk_sglue+0x22>
 800bc9a:	6824      	ldr	r4, [r4, #0]
 800bc9c:	2c00      	cmp	r4, #0
 800bc9e:	d1f7      	bne.n	800bc90 <_fwalk_sglue+0xc>
 800bca0:	4630      	mov	r0, r6
 800bca2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bca6:	89ab      	ldrh	r3, [r5, #12]
 800bca8:	2b01      	cmp	r3, #1
 800bcaa:	d907      	bls.n	800bcbc <_fwalk_sglue+0x38>
 800bcac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bcb0:	3301      	adds	r3, #1
 800bcb2:	d003      	beq.n	800bcbc <_fwalk_sglue+0x38>
 800bcb4:	4629      	mov	r1, r5
 800bcb6:	4638      	mov	r0, r7
 800bcb8:	47c0      	blx	r8
 800bcba:	4306      	orrs	r6, r0
 800bcbc:	3568      	adds	r5, #104	; 0x68
 800bcbe:	e7e9      	b.n	800bc94 <_fwalk_sglue+0x10>

0800bcc0 <iprintf>:
 800bcc0:	b40f      	push	{r0, r1, r2, r3}
 800bcc2:	b507      	push	{r0, r1, r2, lr}
 800bcc4:	4906      	ldr	r1, [pc, #24]	; (800bce0 <iprintf+0x20>)
 800bcc6:	ab04      	add	r3, sp, #16
 800bcc8:	6808      	ldr	r0, [r1, #0]
 800bcca:	f853 2b04 	ldr.w	r2, [r3], #4
 800bcce:	6881      	ldr	r1, [r0, #8]
 800bcd0:	9301      	str	r3, [sp, #4]
 800bcd2:	f000 fe31 	bl	800c938 <_vfiprintf_r>
 800bcd6:	b003      	add	sp, #12
 800bcd8:	f85d eb04 	ldr.w	lr, [sp], #4
 800bcdc:	b004      	add	sp, #16
 800bcde:	4770      	bx	lr
 800bce0:	200002d8 	.word	0x200002d8

0800bce4 <_puts_r>:
 800bce4:	6a03      	ldr	r3, [r0, #32]
 800bce6:	b570      	push	{r4, r5, r6, lr}
 800bce8:	4605      	mov	r5, r0
 800bcea:	460e      	mov	r6, r1
 800bcec:	6884      	ldr	r4, [r0, #8]
 800bcee:	b90b      	cbnz	r3, 800bcf4 <_puts_r+0x10>
 800bcf0:	f7ff f8ac 	bl	800ae4c <__sinit>
 800bcf4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bcf6:	07db      	lsls	r3, r3, #31
 800bcf8:	d405      	bmi.n	800bd06 <_puts_r+0x22>
 800bcfa:	89a3      	ldrh	r3, [r4, #12]
 800bcfc:	0598      	lsls	r0, r3, #22
 800bcfe:	d402      	bmi.n	800bd06 <_puts_r+0x22>
 800bd00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bd02:	f000 f8fc 	bl	800befe <__retarget_lock_acquire_recursive>
 800bd06:	89a3      	ldrh	r3, [r4, #12]
 800bd08:	0719      	lsls	r1, r3, #28
 800bd0a:	d513      	bpl.n	800bd34 <_puts_r+0x50>
 800bd0c:	6923      	ldr	r3, [r4, #16]
 800bd0e:	b18b      	cbz	r3, 800bd34 <_puts_r+0x50>
 800bd10:	3e01      	subs	r6, #1
 800bd12:	68a3      	ldr	r3, [r4, #8]
 800bd14:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800bd18:	3b01      	subs	r3, #1
 800bd1a:	60a3      	str	r3, [r4, #8]
 800bd1c:	b9e9      	cbnz	r1, 800bd5a <_puts_r+0x76>
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	da2e      	bge.n	800bd80 <_puts_r+0x9c>
 800bd22:	4622      	mov	r2, r4
 800bd24:	210a      	movs	r1, #10
 800bd26:	4628      	mov	r0, r5
 800bd28:	f001 ff61 	bl	800dbee <__swbuf_r>
 800bd2c:	3001      	adds	r0, #1
 800bd2e:	d007      	beq.n	800bd40 <_puts_r+0x5c>
 800bd30:	250a      	movs	r5, #10
 800bd32:	e007      	b.n	800bd44 <_puts_r+0x60>
 800bd34:	4621      	mov	r1, r4
 800bd36:	4628      	mov	r0, r5
 800bd38:	f001 ff96 	bl	800dc68 <__swsetup_r>
 800bd3c:	2800      	cmp	r0, #0
 800bd3e:	d0e7      	beq.n	800bd10 <_puts_r+0x2c>
 800bd40:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800bd44:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bd46:	07da      	lsls	r2, r3, #31
 800bd48:	d405      	bmi.n	800bd56 <_puts_r+0x72>
 800bd4a:	89a3      	ldrh	r3, [r4, #12]
 800bd4c:	059b      	lsls	r3, r3, #22
 800bd4e:	d402      	bmi.n	800bd56 <_puts_r+0x72>
 800bd50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bd52:	f000 f8d5 	bl	800bf00 <__retarget_lock_release_recursive>
 800bd56:	4628      	mov	r0, r5
 800bd58:	bd70      	pop	{r4, r5, r6, pc}
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	da04      	bge.n	800bd68 <_puts_r+0x84>
 800bd5e:	69a2      	ldr	r2, [r4, #24]
 800bd60:	429a      	cmp	r2, r3
 800bd62:	dc06      	bgt.n	800bd72 <_puts_r+0x8e>
 800bd64:	290a      	cmp	r1, #10
 800bd66:	d004      	beq.n	800bd72 <_puts_r+0x8e>
 800bd68:	6823      	ldr	r3, [r4, #0]
 800bd6a:	1c5a      	adds	r2, r3, #1
 800bd6c:	6022      	str	r2, [r4, #0]
 800bd6e:	7019      	strb	r1, [r3, #0]
 800bd70:	e7cf      	b.n	800bd12 <_puts_r+0x2e>
 800bd72:	4622      	mov	r2, r4
 800bd74:	4628      	mov	r0, r5
 800bd76:	f001 ff3a 	bl	800dbee <__swbuf_r>
 800bd7a:	3001      	adds	r0, #1
 800bd7c:	d1c9      	bne.n	800bd12 <_puts_r+0x2e>
 800bd7e:	e7df      	b.n	800bd40 <_puts_r+0x5c>
 800bd80:	6823      	ldr	r3, [r4, #0]
 800bd82:	250a      	movs	r5, #10
 800bd84:	1c5a      	adds	r2, r3, #1
 800bd86:	6022      	str	r2, [r4, #0]
 800bd88:	701d      	strb	r5, [r3, #0]
 800bd8a:	e7db      	b.n	800bd44 <_puts_r+0x60>

0800bd8c <puts>:
 800bd8c:	4b02      	ldr	r3, [pc, #8]	; (800bd98 <puts+0xc>)
 800bd8e:	4601      	mov	r1, r0
 800bd90:	6818      	ldr	r0, [r3, #0]
 800bd92:	f7ff bfa7 	b.w	800bce4 <_puts_r>
 800bd96:	bf00      	nop
 800bd98:	200002d8 	.word	0x200002d8

0800bd9c <strcat>:
 800bd9c:	4602      	mov	r2, r0
 800bd9e:	b510      	push	{r4, lr}
 800bda0:	7814      	ldrb	r4, [r2, #0]
 800bda2:	4613      	mov	r3, r2
 800bda4:	3201      	adds	r2, #1
 800bda6:	2c00      	cmp	r4, #0
 800bda8:	d1fa      	bne.n	800bda0 <strcat+0x4>
 800bdaa:	3b01      	subs	r3, #1
 800bdac:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bdb0:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bdb4:	2a00      	cmp	r2, #0
 800bdb6:	d1f9      	bne.n	800bdac <strcat+0x10>
 800bdb8:	bd10      	pop	{r4, pc}

0800bdba <strncmp>:
 800bdba:	b510      	push	{r4, lr}
 800bdbc:	b16a      	cbz	r2, 800bdda <strncmp+0x20>
 800bdbe:	3901      	subs	r1, #1
 800bdc0:	1884      	adds	r4, r0, r2
 800bdc2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bdc6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800bdca:	429a      	cmp	r2, r3
 800bdcc:	d103      	bne.n	800bdd6 <strncmp+0x1c>
 800bdce:	42a0      	cmp	r0, r4
 800bdd0:	d001      	beq.n	800bdd6 <strncmp+0x1c>
 800bdd2:	2a00      	cmp	r2, #0
 800bdd4:	d1f5      	bne.n	800bdc2 <strncmp+0x8>
 800bdd6:	1ad0      	subs	r0, r2, r3
 800bdd8:	bd10      	pop	{r4, pc}
 800bdda:	4610      	mov	r0, r2
 800bddc:	e7fc      	b.n	800bdd8 <strncmp+0x1e>
	...

0800bde0 <strtok>:
 800bde0:	4b16      	ldr	r3, [pc, #88]	; (800be3c <strtok+0x5c>)
 800bde2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bde4:	681e      	ldr	r6, [r3, #0]
 800bde6:	4605      	mov	r5, r0
 800bde8:	6c74      	ldr	r4, [r6, #68]	; 0x44
 800bdea:	b9fc      	cbnz	r4, 800be2c <strtok+0x4c>
 800bdec:	2050      	movs	r0, #80	; 0x50
 800bdee:	9101      	str	r1, [sp, #4]
 800bdf0:	f000 febc 	bl	800cb6c <malloc>
 800bdf4:	9901      	ldr	r1, [sp, #4]
 800bdf6:	4602      	mov	r2, r0
 800bdf8:	6470      	str	r0, [r6, #68]	; 0x44
 800bdfa:	b920      	cbnz	r0, 800be06 <strtok+0x26>
 800bdfc:	4b10      	ldr	r3, [pc, #64]	; (800be40 <strtok+0x60>)
 800bdfe:	215b      	movs	r1, #91	; 0x5b
 800be00:	4810      	ldr	r0, [pc, #64]	; (800be44 <strtok+0x64>)
 800be02:	f000 f8a3 	bl	800bf4c <__assert_func>
 800be06:	e9c0 4400 	strd	r4, r4, [r0]
 800be0a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800be0e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800be12:	6184      	str	r4, [r0, #24]
 800be14:	7704      	strb	r4, [r0, #28]
 800be16:	6244      	str	r4, [r0, #36]	; 0x24
 800be18:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800be1c:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800be20:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800be24:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800be28:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800be2c:	2301      	movs	r3, #1
 800be2e:	6c72      	ldr	r2, [r6, #68]	; 0x44
 800be30:	4628      	mov	r0, r5
 800be32:	b002      	add	sp, #8
 800be34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800be38:	f000 b806 	b.w	800be48 <__strtok_r>
 800be3c:	200002d8 	.word	0x200002d8
 800be40:	0800e5b8 	.word	0x0800e5b8
 800be44:	0800e5cf 	.word	0x0800e5cf

0800be48 <__strtok_r>:
 800be48:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be4a:	b908      	cbnz	r0, 800be50 <__strtok_r+0x8>
 800be4c:	6810      	ldr	r0, [r2, #0]
 800be4e:	b188      	cbz	r0, 800be74 <__strtok_r+0x2c>
 800be50:	4604      	mov	r4, r0
 800be52:	4620      	mov	r0, r4
 800be54:	460f      	mov	r7, r1
 800be56:	f814 5b01 	ldrb.w	r5, [r4], #1
 800be5a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800be5e:	b91e      	cbnz	r6, 800be68 <__strtok_r+0x20>
 800be60:	b965      	cbnz	r5, 800be7c <__strtok_r+0x34>
 800be62:	4628      	mov	r0, r5
 800be64:	6015      	str	r5, [r2, #0]
 800be66:	e005      	b.n	800be74 <__strtok_r+0x2c>
 800be68:	42b5      	cmp	r5, r6
 800be6a:	d1f6      	bne.n	800be5a <__strtok_r+0x12>
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d1f0      	bne.n	800be52 <__strtok_r+0xa>
 800be70:	6014      	str	r4, [r2, #0]
 800be72:	7003      	strb	r3, [r0, #0]
 800be74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be76:	461c      	mov	r4, r3
 800be78:	e00c      	b.n	800be94 <__strtok_r+0x4c>
 800be7a:	b915      	cbnz	r5, 800be82 <__strtok_r+0x3a>
 800be7c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800be80:	460e      	mov	r6, r1
 800be82:	f816 5b01 	ldrb.w	r5, [r6], #1
 800be86:	42ab      	cmp	r3, r5
 800be88:	d1f7      	bne.n	800be7a <__strtok_r+0x32>
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d0f3      	beq.n	800be76 <__strtok_r+0x2e>
 800be8e:	2300      	movs	r3, #0
 800be90:	f804 3c01 	strb.w	r3, [r4, #-1]
 800be94:	6014      	str	r4, [r2, #0]
 800be96:	e7ed      	b.n	800be74 <__strtok_r+0x2c>

0800be98 <memset>:
 800be98:	4402      	add	r2, r0
 800be9a:	4603      	mov	r3, r0
 800be9c:	4293      	cmp	r3, r2
 800be9e:	d100      	bne.n	800bea2 <memset+0xa>
 800bea0:	4770      	bx	lr
 800bea2:	f803 1b01 	strb.w	r1, [r3], #1
 800bea6:	e7f9      	b.n	800be9c <memset+0x4>

0800bea8 <__errno>:
 800bea8:	4b01      	ldr	r3, [pc, #4]	; (800beb0 <__errno+0x8>)
 800beaa:	6818      	ldr	r0, [r3, #0]
 800beac:	4770      	bx	lr
 800beae:	bf00      	nop
 800beb0:	200002d8 	.word	0x200002d8

0800beb4 <__libc_init_array>:
 800beb4:	b570      	push	{r4, r5, r6, lr}
 800beb6:	4d0d      	ldr	r5, [pc, #52]	; (800beec <__libc_init_array+0x38>)
 800beb8:	2600      	movs	r6, #0
 800beba:	4c0d      	ldr	r4, [pc, #52]	; (800bef0 <__libc_init_array+0x3c>)
 800bebc:	1b64      	subs	r4, r4, r5
 800bebe:	10a4      	asrs	r4, r4, #2
 800bec0:	42a6      	cmp	r6, r4
 800bec2:	d109      	bne.n	800bed8 <__libc_init_array+0x24>
 800bec4:	4d0b      	ldr	r5, [pc, #44]	; (800bef4 <__libc_init_array+0x40>)
 800bec6:	2600      	movs	r6, #0
 800bec8:	4c0b      	ldr	r4, [pc, #44]	; (800bef8 <__libc_init_array+0x44>)
 800beca:	f002 f8e9 	bl	800e0a0 <_init>
 800bece:	1b64      	subs	r4, r4, r5
 800bed0:	10a4      	asrs	r4, r4, #2
 800bed2:	42a6      	cmp	r6, r4
 800bed4:	d105      	bne.n	800bee2 <__libc_init_array+0x2e>
 800bed6:	bd70      	pop	{r4, r5, r6, pc}
 800bed8:	f855 3b04 	ldr.w	r3, [r5], #4
 800bedc:	3601      	adds	r6, #1
 800bede:	4798      	blx	r3
 800bee0:	e7ee      	b.n	800bec0 <__libc_init_array+0xc>
 800bee2:	f855 3b04 	ldr.w	r3, [r5], #4
 800bee6:	3601      	adds	r6, #1
 800bee8:	4798      	blx	r3
 800beea:	e7f2      	b.n	800bed2 <__libc_init_array+0x1e>
 800beec:	0800e978 	.word	0x0800e978
 800bef0:	0800e978 	.word	0x0800e978
 800bef4:	0800e978 	.word	0x0800e978
 800bef8:	0800e97c 	.word	0x0800e97c

0800befc <__retarget_lock_init_recursive>:
 800befc:	4770      	bx	lr

0800befe <__retarget_lock_acquire_recursive>:
 800befe:	4770      	bx	lr

0800bf00 <__retarget_lock_release_recursive>:
 800bf00:	4770      	bx	lr

0800bf02 <memcpy>:
 800bf02:	440a      	add	r2, r1
 800bf04:	1e43      	subs	r3, r0, #1
 800bf06:	4291      	cmp	r1, r2
 800bf08:	d100      	bne.n	800bf0c <memcpy+0xa>
 800bf0a:	4770      	bx	lr
 800bf0c:	b510      	push	{r4, lr}
 800bf0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bf12:	4291      	cmp	r1, r2
 800bf14:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bf18:	d1f9      	bne.n	800bf0e <memcpy+0xc>
 800bf1a:	bd10      	pop	{r4, pc}

0800bf1c <strcpy>:
 800bf1c:	4603      	mov	r3, r0
 800bf1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bf22:	f803 2b01 	strb.w	r2, [r3], #1
 800bf26:	2a00      	cmp	r2, #0
 800bf28:	d1f9      	bne.n	800bf1e <strcpy+0x2>
 800bf2a:	4770      	bx	lr
 800bf2c:	0000      	movs	r0, r0
	...

0800bf30 <nan>:
 800bf30:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800bf38 <nan+0x8>
 800bf34:	4770      	bx	lr
 800bf36:	bf00      	nop
 800bf38:	00000000 	.word	0x00000000
 800bf3c:	7ff80000 	.word	0x7ff80000

0800bf40 <nanf>:
 800bf40:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800bf48 <nanf+0x8>
 800bf44:	4770      	bx	lr
 800bf46:	bf00      	nop
 800bf48:	7fc00000 	.word	0x7fc00000

0800bf4c <__assert_func>:
 800bf4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bf4e:	4614      	mov	r4, r2
 800bf50:	461a      	mov	r2, r3
 800bf52:	4b09      	ldr	r3, [pc, #36]	; (800bf78 <__assert_func+0x2c>)
 800bf54:	4605      	mov	r5, r0
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	68d8      	ldr	r0, [r3, #12]
 800bf5a:	b14c      	cbz	r4, 800bf70 <__assert_func+0x24>
 800bf5c:	4b07      	ldr	r3, [pc, #28]	; (800bf7c <__assert_func+0x30>)
 800bf5e:	9100      	str	r1, [sp, #0]
 800bf60:	4907      	ldr	r1, [pc, #28]	; (800bf80 <__assert_func+0x34>)
 800bf62:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bf66:	462b      	mov	r3, r5
 800bf68:	f001 fe00 	bl	800db6c <fiprintf>
 800bf6c:	f001 ffe2 	bl	800df34 <abort>
 800bf70:	4b04      	ldr	r3, [pc, #16]	; (800bf84 <__assert_func+0x38>)
 800bf72:	461c      	mov	r4, r3
 800bf74:	e7f3      	b.n	800bf5e <__assert_func+0x12>
 800bf76:	bf00      	nop
 800bf78:	200002d8 	.word	0x200002d8
 800bf7c:	0800e732 	.word	0x0800e732
 800bf80:	0800e73f 	.word	0x0800e73f
 800bf84:	0800e76d 	.word	0x0800e76d

0800bf88 <rshift>:
 800bf88:	6903      	ldr	r3, [r0, #16]
 800bf8a:	114a      	asrs	r2, r1, #5
 800bf8c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800bf90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bf94:	f100 0414 	add.w	r4, r0, #20
 800bf98:	dd45      	ble.n	800c026 <rshift+0x9e>
 800bf9a:	f011 011f 	ands.w	r1, r1, #31
 800bf9e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800bfa2:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800bfa6:	d10c      	bne.n	800bfc2 <rshift+0x3a>
 800bfa8:	f100 0710 	add.w	r7, r0, #16
 800bfac:	4629      	mov	r1, r5
 800bfae:	42b1      	cmp	r1, r6
 800bfb0:	d334      	bcc.n	800c01c <rshift+0x94>
 800bfb2:	1a9b      	subs	r3, r3, r2
 800bfb4:	1eea      	subs	r2, r5, #3
 800bfb6:	009b      	lsls	r3, r3, #2
 800bfb8:	4296      	cmp	r6, r2
 800bfba:	bf38      	it	cc
 800bfbc:	2300      	movcc	r3, #0
 800bfbe:	4423      	add	r3, r4
 800bfc0:	e015      	b.n	800bfee <rshift+0x66>
 800bfc2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800bfc6:	f1c1 0820 	rsb	r8, r1, #32
 800bfca:	f105 0e04 	add.w	lr, r5, #4
 800bfce:	46a1      	mov	r9, r4
 800bfd0:	40cf      	lsrs	r7, r1
 800bfd2:	4576      	cmp	r6, lr
 800bfd4:	46f4      	mov	ip, lr
 800bfd6:	d815      	bhi.n	800c004 <rshift+0x7c>
 800bfd8:	1a9a      	subs	r2, r3, r2
 800bfda:	3501      	adds	r5, #1
 800bfdc:	0092      	lsls	r2, r2, #2
 800bfde:	3a04      	subs	r2, #4
 800bfe0:	42ae      	cmp	r6, r5
 800bfe2:	bf38      	it	cc
 800bfe4:	2200      	movcc	r2, #0
 800bfe6:	18a3      	adds	r3, r4, r2
 800bfe8:	50a7      	str	r7, [r4, r2]
 800bfea:	b107      	cbz	r7, 800bfee <rshift+0x66>
 800bfec:	3304      	adds	r3, #4
 800bfee:	1b1a      	subs	r2, r3, r4
 800bff0:	42a3      	cmp	r3, r4
 800bff2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800bff6:	bf08      	it	eq
 800bff8:	2300      	moveq	r3, #0
 800bffa:	6102      	str	r2, [r0, #16]
 800bffc:	bf08      	it	eq
 800bffe:	6143      	streq	r3, [r0, #20]
 800c000:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c004:	f8dc c000 	ldr.w	ip, [ip]
 800c008:	fa0c fc08 	lsl.w	ip, ip, r8
 800c00c:	ea4c 0707 	orr.w	r7, ip, r7
 800c010:	f849 7b04 	str.w	r7, [r9], #4
 800c014:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c018:	40cf      	lsrs	r7, r1
 800c01a:	e7da      	b.n	800bfd2 <rshift+0x4a>
 800c01c:	f851 cb04 	ldr.w	ip, [r1], #4
 800c020:	f847 cf04 	str.w	ip, [r7, #4]!
 800c024:	e7c3      	b.n	800bfae <rshift+0x26>
 800c026:	4623      	mov	r3, r4
 800c028:	e7e1      	b.n	800bfee <rshift+0x66>

0800c02a <__hexdig_fun>:
 800c02a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c02e:	2b09      	cmp	r3, #9
 800c030:	d802      	bhi.n	800c038 <__hexdig_fun+0xe>
 800c032:	3820      	subs	r0, #32
 800c034:	b2c0      	uxtb	r0, r0
 800c036:	4770      	bx	lr
 800c038:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c03c:	2b05      	cmp	r3, #5
 800c03e:	d801      	bhi.n	800c044 <__hexdig_fun+0x1a>
 800c040:	3847      	subs	r0, #71	; 0x47
 800c042:	e7f7      	b.n	800c034 <__hexdig_fun+0xa>
 800c044:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c048:	2b05      	cmp	r3, #5
 800c04a:	d801      	bhi.n	800c050 <__hexdig_fun+0x26>
 800c04c:	3827      	subs	r0, #39	; 0x27
 800c04e:	e7f1      	b.n	800c034 <__hexdig_fun+0xa>
 800c050:	2000      	movs	r0, #0
 800c052:	4770      	bx	lr

0800c054 <__gethex>:
 800c054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c058:	4617      	mov	r7, r2
 800c05a:	680a      	ldr	r2, [r1, #0]
 800c05c:	b085      	sub	sp, #20
 800c05e:	4681      	mov	r9, r0
 800c060:	f102 0b02 	add.w	fp, r2, #2
 800c064:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c068:	468a      	mov	sl, r1
 800c06a:	9302      	str	r3, [sp, #8]
 800c06c:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c070:	32fe      	adds	r2, #254	; 0xfe
 800c072:	eb02 030b 	add.w	r3, r2, fp
 800c076:	46d8      	mov	r8, fp
 800c078:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800c07c:	9301      	str	r3, [sp, #4]
 800c07e:	2830      	cmp	r0, #48	; 0x30
 800c080:	d0f7      	beq.n	800c072 <__gethex+0x1e>
 800c082:	f7ff ffd2 	bl	800c02a <__hexdig_fun>
 800c086:	4604      	mov	r4, r0
 800c088:	2800      	cmp	r0, #0
 800c08a:	d137      	bne.n	800c0fc <__gethex+0xa8>
 800c08c:	2201      	movs	r2, #1
 800c08e:	49a7      	ldr	r1, [pc, #668]	; (800c32c <__gethex+0x2d8>)
 800c090:	4640      	mov	r0, r8
 800c092:	f7ff fe92 	bl	800bdba <strncmp>
 800c096:	4606      	mov	r6, r0
 800c098:	2800      	cmp	r0, #0
 800c09a:	d168      	bne.n	800c16e <__gethex+0x11a>
 800c09c:	f898 0001 	ldrb.w	r0, [r8, #1]
 800c0a0:	465d      	mov	r5, fp
 800c0a2:	f7ff ffc2 	bl	800c02a <__hexdig_fun>
 800c0a6:	2800      	cmp	r0, #0
 800c0a8:	d063      	beq.n	800c172 <__gethex+0x11e>
 800c0aa:	465a      	mov	r2, fp
 800c0ac:	7810      	ldrb	r0, [r2, #0]
 800c0ae:	4690      	mov	r8, r2
 800c0b0:	3201      	adds	r2, #1
 800c0b2:	2830      	cmp	r0, #48	; 0x30
 800c0b4:	d0fa      	beq.n	800c0ac <__gethex+0x58>
 800c0b6:	f7ff ffb8 	bl	800c02a <__hexdig_fun>
 800c0ba:	fab0 f480 	clz	r4, r0
 800c0be:	2301      	movs	r3, #1
 800c0c0:	465e      	mov	r6, fp
 800c0c2:	0964      	lsrs	r4, r4, #5
 800c0c4:	9301      	str	r3, [sp, #4]
 800c0c6:	4642      	mov	r2, r8
 800c0c8:	4615      	mov	r5, r2
 800c0ca:	3201      	adds	r2, #1
 800c0cc:	7828      	ldrb	r0, [r5, #0]
 800c0ce:	f7ff ffac 	bl	800c02a <__hexdig_fun>
 800c0d2:	2800      	cmp	r0, #0
 800c0d4:	d1f8      	bne.n	800c0c8 <__gethex+0x74>
 800c0d6:	2201      	movs	r2, #1
 800c0d8:	4994      	ldr	r1, [pc, #592]	; (800c32c <__gethex+0x2d8>)
 800c0da:	4628      	mov	r0, r5
 800c0dc:	f7ff fe6d 	bl	800bdba <strncmp>
 800c0e0:	b978      	cbnz	r0, 800c102 <__gethex+0xae>
 800c0e2:	b946      	cbnz	r6, 800c0f6 <__gethex+0xa2>
 800c0e4:	1c6e      	adds	r6, r5, #1
 800c0e6:	4632      	mov	r2, r6
 800c0e8:	4615      	mov	r5, r2
 800c0ea:	3201      	adds	r2, #1
 800c0ec:	7828      	ldrb	r0, [r5, #0]
 800c0ee:	f7ff ff9c 	bl	800c02a <__hexdig_fun>
 800c0f2:	2800      	cmp	r0, #0
 800c0f4:	d1f8      	bne.n	800c0e8 <__gethex+0x94>
 800c0f6:	1b73      	subs	r3, r6, r5
 800c0f8:	009e      	lsls	r6, r3, #2
 800c0fa:	e004      	b.n	800c106 <__gethex+0xb2>
 800c0fc:	2400      	movs	r4, #0
 800c0fe:	4626      	mov	r6, r4
 800c100:	e7e1      	b.n	800c0c6 <__gethex+0x72>
 800c102:	2e00      	cmp	r6, #0
 800c104:	d1f7      	bne.n	800c0f6 <__gethex+0xa2>
 800c106:	782b      	ldrb	r3, [r5, #0]
 800c108:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c10c:	2b50      	cmp	r3, #80	; 0x50
 800c10e:	d13d      	bne.n	800c18c <__gethex+0x138>
 800c110:	786b      	ldrb	r3, [r5, #1]
 800c112:	2b2b      	cmp	r3, #43	; 0x2b
 800c114:	d02f      	beq.n	800c176 <__gethex+0x122>
 800c116:	2b2d      	cmp	r3, #45	; 0x2d
 800c118:	d031      	beq.n	800c17e <__gethex+0x12a>
 800c11a:	1c69      	adds	r1, r5, #1
 800c11c:	f04f 0b00 	mov.w	fp, #0
 800c120:	7808      	ldrb	r0, [r1, #0]
 800c122:	f7ff ff82 	bl	800c02a <__hexdig_fun>
 800c126:	1e42      	subs	r2, r0, #1
 800c128:	b2d2      	uxtb	r2, r2
 800c12a:	2a18      	cmp	r2, #24
 800c12c:	d82e      	bhi.n	800c18c <__gethex+0x138>
 800c12e:	f1a0 0210 	sub.w	r2, r0, #16
 800c132:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c136:	f7ff ff78 	bl	800c02a <__hexdig_fun>
 800c13a:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800c13e:	fa5f fc8c 	uxtb.w	ip, ip
 800c142:	f1bc 0f18 	cmp.w	ip, #24
 800c146:	d91d      	bls.n	800c184 <__gethex+0x130>
 800c148:	f1bb 0f00 	cmp.w	fp, #0
 800c14c:	d000      	beq.n	800c150 <__gethex+0xfc>
 800c14e:	4252      	negs	r2, r2
 800c150:	4416      	add	r6, r2
 800c152:	f8ca 1000 	str.w	r1, [sl]
 800c156:	b1dc      	cbz	r4, 800c190 <__gethex+0x13c>
 800c158:	9b01      	ldr	r3, [sp, #4]
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	bf14      	ite	ne
 800c15e:	f04f 0800 	movne.w	r8, #0
 800c162:	f04f 0806 	moveq.w	r8, #6
 800c166:	4640      	mov	r0, r8
 800c168:	b005      	add	sp, #20
 800c16a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c16e:	4645      	mov	r5, r8
 800c170:	4626      	mov	r6, r4
 800c172:	2401      	movs	r4, #1
 800c174:	e7c7      	b.n	800c106 <__gethex+0xb2>
 800c176:	f04f 0b00 	mov.w	fp, #0
 800c17a:	1ca9      	adds	r1, r5, #2
 800c17c:	e7d0      	b.n	800c120 <__gethex+0xcc>
 800c17e:	f04f 0b01 	mov.w	fp, #1
 800c182:	e7fa      	b.n	800c17a <__gethex+0x126>
 800c184:	230a      	movs	r3, #10
 800c186:	fb03 0002 	mla	r0, r3, r2, r0
 800c18a:	e7d0      	b.n	800c12e <__gethex+0xda>
 800c18c:	4629      	mov	r1, r5
 800c18e:	e7e0      	b.n	800c152 <__gethex+0xfe>
 800c190:	eba5 0308 	sub.w	r3, r5, r8
 800c194:	4621      	mov	r1, r4
 800c196:	3b01      	subs	r3, #1
 800c198:	2b07      	cmp	r3, #7
 800c19a:	dc0a      	bgt.n	800c1b2 <__gethex+0x15e>
 800c19c:	4648      	mov	r0, r9
 800c19e:	f000 ffe9 	bl	800d174 <_Balloc>
 800c1a2:	4604      	mov	r4, r0
 800c1a4:	b940      	cbnz	r0, 800c1b8 <__gethex+0x164>
 800c1a6:	4b62      	ldr	r3, [pc, #392]	; (800c330 <__gethex+0x2dc>)
 800c1a8:	4602      	mov	r2, r0
 800c1aa:	21e4      	movs	r1, #228	; 0xe4
 800c1ac:	4861      	ldr	r0, [pc, #388]	; (800c334 <__gethex+0x2e0>)
 800c1ae:	f7ff fecd 	bl	800bf4c <__assert_func>
 800c1b2:	3101      	adds	r1, #1
 800c1b4:	105b      	asrs	r3, r3, #1
 800c1b6:	e7ef      	b.n	800c198 <__gethex+0x144>
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	f100 0a14 	add.w	sl, r0, #20
 800c1be:	495b      	ldr	r1, [pc, #364]	; (800c32c <__gethex+0x2d8>)
 800c1c0:	469b      	mov	fp, r3
 800c1c2:	f8cd a004 	str.w	sl, [sp, #4]
 800c1c6:	45a8      	cmp	r8, r5
 800c1c8:	d342      	bcc.n	800c250 <__gethex+0x1fc>
 800c1ca:	9801      	ldr	r0, [sp, #4]
 800c1cc:	f840 bb04 	str.w	fp, [r0], #4
 800c1d0:	eba0 000a 	sub.w	r0, r0, sl
 800c1d4:	1080      	asrs	r0, r0, #2
 800c1d6:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800c1da:	6120      	str	r0, [r4, #16]
 800c1dc:	4658      	mov	r0, fp
 800c1de:	f001 f8bd 	bl	800d35c <__hi0bits>
 800c1e2:	683d      	ldr	r5, [r7, #0]
 800c1e4:	eba8 0000 	sub.w	r0, r8, r0
 800c1e8:	42a8      	cmp	r0, r5
 800c1ea:	dd59      	ble.n	800c2a0 <__gethex+0x24c>
 800c1ec:	eba0 0805 	sub.w	r8, r0, r5
 800c1f0:	4620      	mov	r0, r4
 800c1f2:	4641      	mov	r1, r8
 800c1f4:	f001 fc56 	bl	800daa4 <__any_on>
 800c1f8:	4683      	mov	fp, r0
 800c1fa:	b1b8      	cbz	r0, 800c22c <__gethex+0x1d8>
 800c1fc:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 800c200:	f04f 0b01 	mov.w	fp, #1
 800c204:	1159      	asrs	r1, r3, #5
 800c206:	f003 021f 	and.w	r2, r3, #31
 800c20a:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c20e:	fa0b f202 	lsl.w	r2, fp, r2
 800c212:	420a      	tst	r2, r1
 800c214:	d00a      	beq.n	800c22c <__gethex+0x1d8>
 800c216:	455b      	cmp	r3, fp
 800c218:	dd06      	ble.n	800c228 <__gethex+0x1d4>
 800c21a:	f1a8 0102 	sub.w	r1, r8, #2
 800c21e:	4620      	mov	r0, r4
 800c220:	f001 fc40 	bl	800daa4 <__any_on>
 800c224:	2800      	cmp	r0, #0
 800c226:	d138      	bne.n	800c29a <__gethex+0x246>
 800c228:	f04f 0b02 	mov.w	fp, #2
 800c22c:	4446      	add	r6, r8
 800c22e:	4641      	mov	r1, r8
 800c230:	4620      	mov	r0, r4
 800c232:	f7ff fea9 	bl	800bf88 <rshift>
 800c236:	68bb      	ldr	r3, [r7, #8]
 800c238:	42b3      	cmp	r3, r6
 800c23a:	da41      	bge.n	800c2c0 <__gethex+0x26c>
 800c23c:	4621      	mov	r1, r4
 800c23e:	4648      	mov	r0, r9
 800c240:	f000 ffd8 	bl	800d1f4 <_Bfree>
 800c244:	2300      	movs	r3, #0
 800c246:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c248:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800c24c:	6013      	str	r3, [r2, #0]
 800c24e:	e78a      	b.n	800c166 <__gethex+0x112>
 800c250:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800c254:	2a2e      	cmp	r2, #46	; 0x2e
 800c256:	d014      	beq.n	800c282 <__gethex+0x22e>
 800c258:	2b20      	cmp	r3, #32
 800c25a:	d106      	bne.n	800c26a <__gethex+0x216>
 800c25c:	9b01      	ldr	r3, [sp, #4]
 800c25e:	f843 bb04 	str.w	fp, [r3], #4
 800c262:	f04f 0b00 	mov.w	fp, #0
 800c266:	9301      	str	r3, [sp, #4]
 800c268:	465b      	mov	r3, fp
 800c26a:	7828      	ldrb	r0, [r5, #0]
 800c26c:	9303      	str	r3, [sp, #12]
 800c26e:	f7ff fedc 	bl	800c02a <__hexdig_fun>
 800c272:	9b03      	ldr	r3, [sp, #12]
 800c274:	f000 000f 	and.w	r0, r0, #15
 800c278:	4098      	lsls	r0, r3
 800c27a:	3304      	adds	r3, #4
 800c27c:	ea4b 0b00 	orr.w	fp, fp, r0
 800c280:	e7a1      	b.n	800c1c6 <__gethex+0x172>
 800c282:	45a8      	cmp	r8, r5
 800c284:	d8e8      	bhi.n	800c258 <__gethex+0x204>
 800c286:	2201      	movs	r2, #1
 800c288:	4628      	mov	r0, r5
 800c28a:	9303      	str	r3, [sp, #12]
 800c28c:	f7ff fd95 	bl	800bdba <strncmp>
 800c290:	4926      	ldr	r1, [pc, #152]	; (800c32c <__gethex+0x2d8>)
 800c292:	9b03      	ldr	r3, [sp, #12]
 800c294:	2800      	cmp	r0, #0
 800c296:	d1df      	bne.n	800c258 <__gethex+0x204>
 800c298:	e795      	b.n	800c1c6 <__gethex+0x172>
 800c29a:	f04f 0b03 	mov.w	fp, #3
 800c29e:	e7c5      	b.n	800c22c <__gethex+0x1d8>
 800c2a0:	da0b      	bge.n	800c2ba <__gethex+0x266>
 800c2a2:	eba5 0800 	sub.w	r8, r5, r0
 800c2a6:	4621      	mov	r1, r4
 800c2a8:	4648      	mov	r0, r9
 800c2aa:	4642      	mov	r2, r8
 800c2ac:	eba6 0608 	sub.w	r6, r6, r8
 800c2b0:	f001 f9bc 	bl	800d62c <__lshift>
 800c2b4:	4604      	mov	r4, r0
 800c2b6:	f100 0a14 	add.w	sl, r0, #20
 800c2ba:	f04f 0b00 	mov.w	fp, #0
 800c2be:	e7ba      	b.n	800c236 <__gethex+0x1e2>
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	42b3      	cmp	r3, r6
 800c2c4:	dd74      	ble.n	800c3b0 <__gethex+0x35c>
 800c2c6:	1b9e      	subs	r6, r3, r6
 800c2c8:	42b5      	cmp	r5, r6
 800c2ca:	dc35      	bgt.n	800c338 <__gethex+0x2e4>
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	2b02      	cmp	r3, #2
 800c2d0:	d023      	beq.n	800c31a <__gethex+0x2c6>
 800c2d2:	2b03      	cmp	r3, #3
 800c2d4:	d025      	beq.n	800c322 <__gethex+0x2ce>
 800c2d6:	2b01      	cmp	r3, #1
 800c2d8:	d115      	bne.n	800c306 <__gethex+0x2b2>
 800c2da:	42b5      	cmp	r5, r6
 800c2dc:	d113      	bne.n	800c306 <__gethex+0x2b2>
 800c2de:	2d01      	cmp	r5, #1
 800c2e0:	d10b      	bne.n	800c2fa <__gethex+0x2a6>
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	f04f 0862 	mov.w	r8, #98	; 0x62
 800c2e8:	9a02      	ldr	r2, [sp, #8]
 800c2ea:	6013      	str	r3, [r2, #0]
 800c2ec:	2301      	movs	r3, #1
 800c2ee:	6123      	str	r3, [r4, #16]
 800c2f0:	f8ca 3000 	str.w	r3, [sl]
 800c2f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c2f6:	601c      	str	r4, [r3, #0]
 800c2f8:	e735      	b.n	800c166 <__gethex+0x112>
 800c2fa:	1e69      	subs	r1, r5, #1
 800c2fc:	4620      	mov	r0, r4
 800c2fe:	f001 fbd1 	bl	800daa4 <__any_on>
 800c302:	2800      	cmp	r0, #0
 800c304:	d1ed      	bne.n	800c2e2 <__gethex+0x28e>
 800c306:	4621      	mov	r1, r4
 800c308:	4648      	mov	r0, r9
 800c30a:	f000 ff73 	bl	800d1f4 <_Bfree>
 800c30e:	2300      	movs	r3, #0
 800c310:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c312:	f04f 0850 	mov.w	r8, #80	; 0x50
 800c316:	6013      	str	r3, [r2, #0]
 800c318:	e725      	b.n	800c166 <__gethex+0x112>
 800c31a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d1f2      	bne.n	800c306 <__gethex+0x2b2>
 800c320:	e7df      	b.n	800c2e2 <__gethex+0x28e>
 800c322:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c324:	2b00      	cmp	r3, #0
 800c326:	d1dc      	bne.n	800c2e2 <__gethex+0x28e>
 800c328:	e7ed      	b.n	800c306 <__gethex+0x2b2>
 800c32a:	bf00      	nop
 800c32c:	0800e554 	.word	0x0800e554
 800c330:	0800e76e 	.word	0x0800e76e
 800c334:	0800e77f 	.word	0x0800e77f
 800c338:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800c33c:	f1bb 0f00 	cmp.w	fp, #0
 800c340:	d133      	bne.n	800c3aa <__gethex+0x356>
 800c342:	f1b8 0f00 	cmp.w	r8, #0
 800c346:	d004      	beq.n	800c352 <__gethex+0x2fe>
 800c348:	4641      	mov	r1, r8
 800c34a:	4620      	mov	r0, r4
 800c34c:	f001 fbaa 	bl	800daa4 <__any_on>
 800c350:	4683      	mov	fp, r0
 800c352:	ea4f 1268 	mov.w	r2, r8, asr #5
 800c356:	2301      	movs	r3, #1
 800c358:	f008 081f 	and.w	r8, r8, #31
 800c35c:	4631      	mov	r1, r6
 800c35e:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c362:	4620      	mov	r0, r4
 800c364:	fa03 f308 	lsl.w	r3, r3, r8
 800c368:	1bad      	subs	r5, r5, r6
 800c36a:	f04f 0802 	mov.w	r8, #2
 800c36e:	4213      	tst	r3, r2
 800c370:	bf18      	it	ne
 800c372:	f04b 0b02 	orrne.w	fp, fp, #2
 800c376:	f7ff fe07 	bl	800bf88 <rshift>
 800c37a:	687e      	ldr	r6, [r7, #4]
 800c37c:	f1bb 0f00 	cmp.w	fp, #0
 800c380:	d04a      	beq.n	800c418 <__gethex+0x3c4>
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	2b02      	cmp	r3, #2
 800c386:	d016      	beq.n	800c3b6 <__gethex+0x362>
 800c388:	2b03      	cmp	r3, #3
 800c38a:	d018      	beq.n	800c3be <__gethex+0x36a>
 800c38c:	2b01      	cmp	r3, #1
 800c38e:	d109      	bne.n	800c3a4 <__gethex+0x350>
 800c390:	f01b 0f02 	tst.w	fp, #2
 800c394:	d006      	beq.n	800c3a4 <__gethex+0x350>
 800c396:	f8da 3000 	ldr.w	r3, [sl]
 800c39a:	ea4b 0b03 	orr.w	fp, fp, r3
 800c39e:	f01b 0f01 	tst.w	fp, #1
 800c3a2:	d10f      	bne.n	800c3c4 <__gethex+0x370>
 800c3a4:	f048 0810 	orr.w	r8, r8, #16
 800c3a8:	e036      	b.n	800c418 <__gethex+0x3c4>
 800c3aa:	f04f 0b01 	mov.w	fp, #1
 800c3ae:	e7d0      	b.n	800c352 <__gethex+0x2fe>
 800c3b0:	f04f 0801 	mov.w	r8, #1
 800c3b4:	e7e2      	b.n	800c37c <__gethex+0x328>
 800c3b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c3b8:	f1c3 0301 	rsb	r3, r3, #1
 800c3bc:	930f      	str	r3, [sp, #60]	; 0x3c
 800c3be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d0ef      	beq.n	800c3a4 <__gethex+0x350>
 800c3c4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c3c8:	f104 0214 	add.w	r2, r4, #20
 800c3cc:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800c3d0:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800c3d4:	9301      	str	r3, [sp, #4]
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	4694      	mov	ip, r2
 800c3da:	f852 1b04 	ldr.w	r1, [r2], #4
 800c3de:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 800c3e2:	d01e      	beq.n	800c422 <__gethex+0x3ce>
 800c3e4:	3101      	adds	r1, #1
 800c3e6:	f8cc 1000 	str.w	r1, [ip]
 800c3ea:	f1b8 0f02 	cmp.w	r8, #2
 800c3ee:	f104 0214 	add.w	r2, r4, #20
 800c3f2:	d13d      	bne.n	800c470 <__gethex+0x41c>
 800c3f4:	683b      	ldr	r3, [r7, #0]
 800c3f6:	3b01      	subs	r3, #1
 800c3f8:	42ab      	cmp	r3, r5
 800c3fa:	d10b      	bne.n	800c414 <__gethex+0x3c0>
 800c3fc:	1169      	asrs	r1, r5, #5
 800c3fe:	2301      	movs	r3, #1
 800c400:	f005 051f 	and.w	r5, r5, #31
 800c404:	fa03 f505 	lsl.w	r5, r3, r5
 800c408:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c40c:	421d      	tst	r5, r3
 800c40e:	bf18      	it	ne
 800c410:	f04f 0801 	movne.w	r8, #1
 800c414:	f048 0820 	orr.w	r8, r8, #32
 800c418:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c41a:	601c      	str	r4, [r3, #0]
 800c41c:	9b02      	ldr	r3, [sp, #8]
 800c41e:	601e      	str	r6, [r3, #0]
 800c420:	e6a1      	b.n	800c166 <__gethex+0x112>
 800c422:	4290      	cmp	r0, r2
 800c424:	f842 3c04 	str.w	r3, [r2, #-4]
 800c428:	d8d6      	bhi.n	800c3d8 <__gethex+0x384>
 800c42a:	68a2      	ldr	r2, [r4, #8]
 800c42c:	4593      	cmp	fp, r2
 800c42e:	db17      	blt.n	800c460 <__gethex+0x40c>
 800c430:	6861      	ldr	r1, [r4, #4]
 800c432:	4648      	mov	r0, r9
 800c434:	3101      	adds	r1, #1
 800c436:	f000 fe9d 	bl	800d174 <_Balloc>
 800c43a:	4682      	mov	sl, r0
 800c43c:	b918      	cbnz	r0, 800c446 <__gethex+0x3f2>
 800c43e:	4b1b      	ldr	r3, [pc, #108]	; (800c4ac <__gethex+0x458>)
 800c440:	4602      	mov	r2, r0
 800c442:	2184      	movs	r1, #132	; 0x84
 800c444:	e6b2      	b.n	800c1ac <__gethex+0x158>
 800c446:	6922      	ldr	r2, [r4, #16]
 800c448:	f104 010c 	add.w	r1, r4, #12
 800c44c:	300c      	adds	r0, #12
 800c44e:	3202      	adds	r2, #2
 800c450:	0092      	lsls	r2, r2, #2
 800c452:	f7ff fd56 	bl	800bf02 <memcpy>
 800c456:	4621      	mov	r1, r4
 800c458:	4654      	mov	r4, sl
 800c45a:	4648      	mov	r0, r9
 800c45c:	f000 feca 	bl	800d1f4 <_Bfree>
 800c460:	6922      	ldr	r2, [r4, #16]
 800c462:	1c51      	adds	r1, r2, #1
 800c464:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800c468:	6121      	str	r1, [r4, #16]
 800c46a:	2101      	movs	r1, #1
 800c46c:	6151      	str	r1, [r2, #20]
 800c46e:	e7bc      	b.n	800c3ea <__gethex+0x396>
 800c470:	6921      	ldr	r1, [r4, #16]
 800c472:	4559      	cmp	r1, fp
 800c474:	dd0b      	ble.n	800c48e <__gethex+0x43a>
 800c476:	2101      	movs	r1, #1
 800c478:	4620      	mov	r0, r4
 800c47a:	f7ff fd85 	bl	800bf88 <rshift>
 800c47e:	3601      	adds	r6, #1
 800c480:	68bb      	ldr	r3, [r7, #8]
 800c482:	42b3      	cmp	r3, r6
 800c484:	f6ff aeda 	blt.w	800c23c <__gethex+0x1e8>
 800c488:	f04f 0801 	mov.w	r8, #1
 800c48c:	e7c2      	b.n	800c414 <__gethex+0x3c0>
 800c48e:	f015 051f 	ands.w	r5, r5, #31
 800c492:	d0f9      	beq.n	800c488 <__gethex+0x434>
 800c494:	9b01      	ldr	r3, [sp, #4]
 800c496:	f1c5 0520 	rsb	r5, r5, #32
 800c49a:	441a      	add	r2, r3
 800c49c:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800c4a0:	f000 ff5c 	bl	800d35c <__hi0bits>
 800c4a4:	42a8      	cmp	r0, r5
 800c4a6:	dbe6      	blt.n	800c476 <__gethex+0x422>
 800c4a8:	e7ee      	b.n	800c488 <__gethex+0x434>
 800c4aa:	bf00      	nop
 800c4ac:	0800e76e 	.word	0x0800e76e

0800c4b0 <L_shift>:
 800c4b0:	f1c2 0208 	rsb	r2, r2, #8
 800c4b4:	0092      	lsls	r2, r2, #2
 800c4b6:	b570      	push	{r4, r5, r6, lr}
 800c4b8:	f1c2 0620 	rsb	r6, r2, #32
 800c4bc:	6843      	ldr	r3, [r0, #4]
 800c4be:	6804      	ldr	r4, [r0, #0]
 800c4c0:	fa03 f506 	lsl.w	r5, r3, r6
 800c4c4:	40d3      	lsrs	r3, r2
 800c4c6:	432c      	orrs	r4, r5
 800c4c8:	6004      	str	r4, [r0, #0]
 800c4ca:	f840 3f04 	str.w	r3, [r0, #4]!
 800c4ce:	4288      	cmp	r0, r1
 800c4d0:	d3f4      	bcc.n	800c4bc <L_shift+0xc>
 800c4d2:	bd70      	pop	{r4, r5, r6, pc}

0800c4d4 <__match>:
 800c4d4:	6803      	ldr	r3, [r0, #0]
 800c4d6:	3301      	adds	r3, #1
 800c4d8:	b530      	push	{r4, r5, lr}
 800c4da:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c4de:	b914      	cbnz	r4, 800c4e6 <__match+0x12>
 800c4e0:	6003      	str	r3, [r0, #0]
 800c4e2:	2001      	movs	r0, #1
 800c4e4:	bd30      	pop	{r4, r5, pc}
 800c4e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c4ea:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c4ee:	2d19      	cmp	r5, #25
 800c4f0:	bf98      	it	ls
 800c4f2:	3220      	addls	r2, #32
 800c4f4:	42a2      	cmp	r2, r4
 800c4f6:	d0f0      	beq.n	800c4da <__match+0x6>
 800c4f8:	2000      	movs	r0, #0
 800c4fa:	e7f3      	b.n	800c4e4 <__match+0x10>

0800c4fc <__hexnan>:
 800c4fc:	680b      	ldr	r3, [r1, #0]
 800c4fe:	6801      	ldr	r1, [r0, #0]
 800c500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c504:	115e      	asrs	r6, r3, #5
 800c506:	f013 031f 	ands.w	r3, r3, #31
 800c50a:	f04f 0500 	mov.w	r5, #0
 800c50e:	b087      	sub	sp, #28
 800c510:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c514:	4682      	mov	sl, r0
 800c516:	4690      	mov	r8, r2
 800c518:	46ab      	mov	fp, r5
 800c51a:	bf18      	it	ne
 800c51c:	3604      	addne	r6, #4
 800c51e:	9301      	str	r3, [sp, #4]
 800c520:	9502      	str	r5, [sp, #8]
 800c522:	1f37      	subs	r7, r6, #4
 800c524:	f846 5c04 	str.w	r5, [r6, #-4]
 800c528:	46b9      	mov	r9, r7
 800c52a:	463c      	mov	r4, r7
 800c52c:	1c4b      	adds	r3, r1, #1
 800c52e:	784a      	ldrb	r2, [r1, #1]
 800c530:	9303      	str	r3, [sp, #12]
 800c532:	b342      	cbz	r2, 800c586 <__hexnan+0x8a>
 800c534:	4610      	mov	r0, r2
 800c536:	9105      	str	r1, [sp, #20]
 800c538:	9204      	str	r2, [sp, #16]
 800c53a:	f7ff fd76 	bl	800c02a <__hexdig_fun>
 800c53e:	2800      	cmp	r0, #0
 800c540:	d14f      	bne.n	800c5e2 <__hexnan+0xe6>
 800c542:	9a04      	ldr	r2, [sp, #16]
 800c544:	9905      	ldr	r1, [sp, #20]
 800c546:	2a20      	cmp	r2, #32
 800c548:	d818      	bhi.n	800c57c <__hexnan+0x80>
 800c54a:	9b02      	ldr	r3, [sp, #8]
 800c54c:	459b      	cmp	fp, r3
 800c54e:	dd13      	ble.n	800c578 <__hexnan+0x7c>
 800c550:	454c      	cmp	r4, r9
 800c552:	d206      	bcs.n	800c562 <__hexnan+0x66>
 800c554:	2d07      	cmp	r5, #7
 800c556:	dc04      	bgt.n	800c562 <__hexnan+0x66>
 800c558:	462a      	mov	r2, r5
 800c55a:	4649      	mov	r1, r9
 800c55c:	4620      	mov	r0, r4
 800c55e:	f7ff ffa7 	bl	800c4b0 <L_shift>
 800c562:	4544      	cmp	r4, r8
 800c564:	d94f      	bls.n	800c606 <__hexnan+0x10a>
 800c566:	2300      	movs	r3, #0
 800c568:	f1a4 0904 	sub.w	r9, r4, #4
 800c56c:	f8cd b008 	str.w	fp, [sp, #8]
 800c570:	f844 3c04 	str.w	r3, [r4, #-4]
 800c574:	461d      	mov	r5, r3
 800c576:	464c      	mov	r4, r9
 800c578:	9903      	ldr	r1, [sp, #12]
 800c57a:	e7d7      	b.n	800c52c <__hexnan+0x30>
 800c57c:	2a29      	cmp	r2, #41	; 0x29
 800c57e:	d154      	bne.n	800c62a <__hexnan+0x12e>
 800c580:	3102      	adds	r1, #2
 800c582:	f8ca 1000 	str.w	r1, [sl]
 800c586:	f1bb 0f00 	cmp.w	fp, #0
 800c58a:	d04e      	beq.n	800c62a <__hexnan+0x12e>
 800c58c:	454c      	cmp	r4, r9
 800c58e:	d206      	bcs.n	800c59e <__hexnan+0xa2>
 800c590:	2d07      	cmp	r5, #7
 800c592:	dc04      	bgt.n	800c59e <__hexnan+0xa2>
 800c594:	462a      	mov	r2, r5
 800c596:	4649      	mov	r1, r9
 800c598:	4620      	mov	r0, r4
 800c59a:	f7ff ff89 	bl	800c4b0 <L_shift>
 800c59e:	4544      	cmp	r4, r8
 800c5a0:	d933      	bls.n	800c60a <__hexnan+0x10e>
 800c5a2:	f1a8 0204 	sub.w	r2, r8, #4
 800c5a6:	4623      	mov	r3, r4
 800c5a8:	f853 1b04 	ldr.w	r1, [r3], #4
 800c5ac:	429f      	cmp	r7, r3
 800c5ae:	f842 1f04 	str.w	r1, [r2, #4]!
 800c5b2:	d2f9      	bcs.n	800c5a8 <__hexnan+0xac>
 800c5b4:	1b3b      	subs	r3, r7, r4
 800c5b6:	3e03      	subs	r6, #3
 800c5b8:	3401      	adds	r4, #1
 800c5ba:	2200      	movs	r2, #0
 800c5bc:	f023 0303 	bic.w	r3, r3, #3
 800c5c0:	3304      	adds	r3, #4
 800c5c2:	42a6      	cmp	r6, r4
 800c5c4:	bf38      	it	cc
 800c5c6:	2304      	movcc	r3, #4
 800c5c8:	4443      	add	r3, r8
 800c5ca:	f843 2b04 	str.w	r2, [r3], #4
 800c5ce:	429f      	cmp	r7, r3
 800c5d0:	d2fb      	bcs.n	800c5ca <__hexnan+0xce>
 800c5d2:	683b      	ldr	r3, [r7, #0]
 800c5d4:	b91b      	cbnz	r3, 800c5de <__hexnan+0xe2>
 800c5d6:	4547      	cmp	r7, r8
 800c5d8:	d125      	bne.n	800c626 <__hexnan+0x12a>
 800c5da:	2301      	movs	r3, #1
 800c5dc:	603b      	str	r3, [r7, #0]
 800c5de:	2005      	movs	r0, #5
 800c5e0:	e024      	b.n	800c62c <__hexnan+0x130>
 800c5e2:	3501      	adds	r5, #1
 800c5e4:	f10b 0b01 	add.w	fp, fp, #1
 800c5e8:	2d08      	cmp	r5, #8
 800c5ea:	dd05      	ble.n	800c5f8 <__hexnan+0xfc>
 800c5ec:	4544      	cmp	r4, r8
 800c5ee:	d9c3      	bls.n	800c578 <__hexnan+0x7c>
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	3c04      	subs	r4, #4
 800c5f4:	2501      	movs	r5, #1
 800c5f6:	6023      	str	r3, [r4, #0]
 800c5f8:	6822      	ldr	r2, [r4, #0]
 800c5fa:	f000 000f 	and.w	r0, r0, #15
 800c5fe:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c602:	6020      	str	r0, [r4, #0]
 800c604:	e7b8      	b.n	800c578 <__hexnan+0x7c>
 800c606:	2508      	movs	r5, #8
 800c608:	e7b6      	b.n	800c578 <__hexnan+0x7c>
 800c60a:	9b01      	ldr	r3, [sp, #4]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d0e0      	beq.n	800c5d2 <__hexnan+0xd6>
 800c610:	f1c3 0320 	rsb	r3, r3, #32
 800c614:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c618:	40da      	lsrs	r2, r3
 800c61a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c61e:	4013      	ands	r3, r2
 800c620:	f846 3c04 	str.w	r3, [r6, #-4]
 800c624:	e7d5      	b.n	800c5d2 <__hexnan+0xd6>
 800c626:	3f04      	subs	r7, #4
 800c628:	e7d3      	b.n	800c5d2 <__hexnan+0xd6>
 800c62a:	2004      	movs	r0, #4
 800c62c:	b007      	add	sp, #28
 800c62e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c632 <__ssputs_r>:
 800c632:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c636:	461f      	mov	r7, r3
 800c638:	688e      	ldr	r6, [r1, #8]
 800c63a:	4682      	mov	sl, r0
 800c63c:	460c      	mov	r4, r1
 800c63e:	42be      	cmp	r6, r7
 800c640:	4690      	mov	r8, r2
 800c642:	680b      	ldr	r3, [r1, #0]
 800c644:	d82c      	bhi.n	800c6a0 <__ssputs_r+0x6e>
 800c646:	898a      	ldrh	r2, [r1, #12]
 800c648:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c64c:	d026      	beq.n	800c69c <__ssputs_r+0x6a>
 800c64e:	6965      	ldr	r5, [r4, #20]
 800c650:	6909      	ldr	r1, [r1, #16]
 800c652:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c656:	eba3 0901 	sub.w	r9, r3, r1
 800c65a:	1c7b      	adds	r3, r7, #1
 800c65c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c660:	444b      	add	r3, r9
 800c662:	106d      	asrs	r5, r5, #1
 800c664:	429d      	cmp	r5, r3
 800c666:	bf38      	it	cc
 800c668:	461d      	movcc	r5, r3
 800c66a:	0553      	lsls	r3, r2, #21
 800c66c:	d527      	bpl.n	800c6be <__ssputs_r+0x8c>
 800c66e:	4629      	mov	r1, r5
 800c670:	f000 faa4 	bl	800cbbc <_malloc_r>
 800c674:	4606      	mov	r6, r0
 800c676:	b360      	cbz	r0, 800c6d2 <__ssputs_r+0xa0>
 800c678:	464a      	mov	r2, r9
 800c67a:	6921      	ldr	r1, [r4, #16]
 800c67c:	f7ff fc41 	bl	800bf02 <memcpy>
 800c680:	89a3      	ldrh	r3, [r4, #12]
 800c682:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c686:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c68a:	81a3      	strh	r3, [r4, #12]
 800c68c:	6126      	str	r6, [r4, #16]
 800c68e:	444e      	add	r6, r9
 800c690:	6165      	str	r5, [r4, #20]
 800c692:	eba5 0509 	sub.w	r5, r5, r9
 800c696:	6026      	str	r6, [r4, #0]
 800c698:	463e      	mov	r6, r7
 800c69a:	60a5      	str	r5, [r4, #8]
 800c69c:	42be      	cmp	r6, r7
 800c69e:	d900      	bls.n	800c6a2 <__ssputs_r+0x70>
 800c6a0:	463e      	mov	r6, r7
 800c6a2:	4632      	mov	r2, r6
 800c6a4:	4641      	mov	r1, r8
 800c6a6:	6820      	ldr	r0, [r4, #0]
 800c6a8:	f001 fba4 	bl	800ddf4 <memmove>
 800c6ac:	68a3      	ldr	r3, [r4, #8]
 800c6ae:	2000      	movs	r0, #0
 800c6b0:	1b9b      	subs	r3, r3, r6
 800c6b2:	60a3      	str	r3, [r4, #8]
 800c6b4:	6823      	ldr	r3, [r4, #0]
 800c6b6:	4433      	add	r3, r6
 800c6b8:	6023      	str	r3, [r4, #0]
 800c6ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6be:	462a      	mov	r2, r5
 800c6c0:	f001 fa66 	bl	800db90 <_realloc_r>
 800c6c4:	4606      	mov	r6, r0
 800c6c6:	2800      	cmp	r0, #0
 800c6c8:	d1e0      	bne.n	800c68c <__ssputs_r+0x5a>
 800c6ca:	6921      	ldr	r1, [r4, #16]
 800c6cc:	4650      	mov	r0, sl
 800c6ce:	f001 fc4f 	bl	800df70 <_free_r>
 800c6d2:	230c      	movs	r3, #12
 800c6d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c6d8:	f8ca 3000 	str.w	r3, [sl]
 800c6dc:	89a3      	ldrh	r3, [r4, #12]
 800c6de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c6e2:	81a3      	strh	r3, [r4, #12]
 800c6e4:	e7e9      	b.n	800c6ba <__ssputs_r+0x88>
	...

0800c6e8 <_svfiprintf_r>:
 800c6e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6ec:	4698      	mov	r8, r3
 800c6ee:	898b      	ldrh	r3, [r1, #12]
 800c6f0:	b09d      	sub	sp, #116	; 0x74
 800c6f2:	4607      	mov	r7, r0
 800c6f4:	061b      	lsls	r3, r3, #24
 800c6f6:	460d      	mov	r5, r1
 800c6f8:	4614      	mov	r4, r2
 800c6fa:	d50e      	bpl.n	800c71a <_svfiprintf_r+0x32>
 800c6fc:	690b      	ldr	r3, [r1, #16]
 800c6fe:	b963      	cbnz	r3, 800c71a <_svfiprintf_r+0x32>
 800c700:	2140      	movs	r1, #64	; 0x40
 800c702:	f000 fa5b 	bl	800cbbc <_malloc_r>
 800c706:	6028      	str	r0, [r5, #0]
 800c708:	6128      	str	r0, [r5, #16]
 800c70a:	b920      	cbnz	r0, 800c716 <_svfiprintf_r+0x2e>
 800c70c:	230c      	movs	r3, #12
 800c70e:	603b      	str	r3, [r7, #0]
 800c710:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c714:	e0d0      	b.n	800c8b8 <_svfiprintf_r+0x1d0>
 800c716:	2340      	movs	r3, #64	; 0x40
 800c718:	616b      	str	r3, [r5, #20]
 800c71a:	2300      	movs	r3, #0
 800c71c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c720:	f04f 0901 	mov.w	r9, #1
 800c724:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c8d0 <_svfiprintf_r+0x1e8>
 800c728:	9309      	str	r3, [sp, #36]	; 0x24
 800c72a:	2320      	movs	r3, #32
 800c72c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c730:	2330      	movs	r3, #48	; 0x30
 800c732:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c736:	4623      	mov	r3, r4
 800c738:	469a      	mov	sl, r3
 800c73a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c73e:	b10a      	cbz	r2, 800c744 <_svfiprintf_r+0x5c>
 800c740:	2a25      	cmp	r2, #37	; 0x25
 800c742:	d1f9      	bne.n	800c738 <_svfiprintf_r+0x50>
 800c744:	ebba 0b04 	subs.w	fp, sl, r4
 800c748:	d00b      	beq.n	800c762 <_svfiprintf_r+0x7a>
 800c74a:	465b      	mov	r3, fp
 800c74c:	4622      	mov	r2, r4
 800c74e:	4629      	mov	r1, r5
 800c750:	4638      	mov	r0, r7
 800c752:	f7ff ff6e 	bl	800c632 <__ssputs_r>
 800c756:	3001      	adds	r0, #1
 800c758:	f000 80a9 	beq.w	800c8ae <_svfiprintf_r+0x1c6>
 800c75c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c75e:	445a      	add	r2, fp
 800c760:	9209      	str	r2, [sp, #36]	; 0x24
 800c762:	f89a 3000 	ldrb.w	r3, [sl]
 800c766:	2b00      	cmp	r3, #0
 800c768:	f000 80a1 	beq.w	800c8ae <_svfiprintf_r+0x1c6>
 800c76c:	2300      	movs	r3, #0
 800c76e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c772:	f10a 0a01 	add.w	sl, sl, #1
 800c776:	9304      	str	r3, [sp, #16]
 800c778:	9307      	str	r3, [sp, #28]
 800c77a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c77e:	931a      	str	r3, [sp, #104]	; 0x68
 800c780:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c784:	4654      	mov	r4, sl
 800c786:	2205      	movs	r2, #5
 800c788:	4851      	ldr	r0, [pc, #324]	; (800c8d0 <_svfiprintf_r+0x1e8>)
 800c78a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c78e:	f001 fbc3 	bl	800df18 <memchr>
 800c792:	9a04      	ldr	r2, [sp, #16]
 800c794:	b9d8      	cbnz	r0, 800c7ce <_svfiprintf_r+0xe6>
 800c796:	06d0      	lsls	r0, r2, #27
 800c798:	bf44      	itt	mi
 800c79a:	2320      	movmi	r3, #32
 800c79c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c7a0:	0711      	lsls	r1, r2, #28
 800c7a2:	bf44      	itt	mi
 800c7a4:	232b      	movmi	r3, #43	; 0x2b
 800c7a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c7aa:	f89a 3000 	ldrb.w	r3, [sl]
 800c7ae:	2b2a      	cmp	r3, #42	; 0x2a
 800c7b0:	d015      	beq.n	800c7de <_svfiprintf_r+0xf6>
 800c7b2:	9a07      	ldr	r2, [sp, #28]
 800c7b4:	4654      	mov	r4, sl
 800c7b6:	2000      	movs	r0, #0
 800c7b8:	f04f 0c0a 	mov.w	ip, #10
 800c7bc:	4621      	mov	r1, r4
 800c7be:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c7c2:	3b30      	subs	r3, #48	; 0x30
 800c7c4:	2b09      	cmp	r3, #9
 800c7c6:	d94d      	bls.n	800c864 <_svfiprintf_r+0x17c>
 800c7c8:	b1b0      	cbz	r0, 800c7f8 <_svfiprintf_r+0x110>
 800c7ca:	9207      	str	r2, [sp, #28]
 800c7cc:	e014      	b.n	800c7f8 <_svfiprintf_r+0x110>
 800c7ce:	eba0 0308 	sub.w	r3, r0, r8
 800c7d2:	46a2      	mov	sl, r4
 800c7d4:	fa09 f303 	lsl.w	r3, r9, r3
 800c7d8:	4313      	orrs	r3, r2
 800c7da:	9304      	str	r3, [sp, #16]
 800c7dc:	e7d2      	b.n	800c784 <_svfiprintf_r+0x9c>
 800c7de:	9b03      	ldr	r3, [sp, #12]
 800c7e0:	1d19      	adds	r1, r3, #4
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	9103      	str	r1, [sp, #12]
 800c7e8:	bfbb      	ittet	lt
 800c7ea:	425b      	neglt	r3, r3
 800c7ec:	f042 0202 	orrlt.w	r2, r2, #2
 800c7f0:	9307      	strge	r3, [sp, #28]
 800c7f2:	9307      	strlt	r3, [sp, #28]
 800c7f4:	bfb8      	it	lt
 800c7f6:	9204      	strlt	r2, [sp, #16]
 800c7f8:	7823      	ldrb	r3, [r4, #0]
 800c7fa:	2b2e      	cmp	r3, #46	; 0x2e
 800c7fc:	d10c      	bne.n	800c818 <_svfiprintf_r+0x130>
 800c7fe:	7863      	ldrb	r3, [r4, #1]
 800c800:	2b2a      	cmp	r3, #42	; 0x2a
 800c802:	d134      	bne.n	800c86e <_svfiprintf_r+0x186>
 800c804:	9b03      	ldr	r3, [sp, #12]
 800c806:	3402      	adds	r4, #2
 800c808:	1d1a      	adds	r2, r3, #4
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	9203      	str	r2, [sp, #12]
 800c810:	bfb8      	it	lt
 800c812:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c816:	9305      	str	r3, [sp, #20]
 800c818:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800c8e0 <_svfiprintf_r+0x1f8>
 800c81c:	2203      	movs	r2, #3
 800c81e:	7821      	ldrb	r1, [r4, #0]
 800c820:	4650      	mov	r0, sl
 800c822:	f001 fb79 	bl	800df18 <memchr>
 800c826:	b138      	cbz	r0, 800c838 <_svfiprintf_r+0x150>
 800c828:	eba0 000a 	sub.w	r0, r0, sl
 800c82c:	2240      	movs	r2, #64	; 0x40
 800c82e:	9b04      	ldr	r3, [sp, #16]
 800c830:	3401      	adds	r4, #1
 800c832:	4082      	lsls	r2, r0
 800c834:	4313      	orrs	r3, r2
 800c836:	9304      	str	r3, [sp, #16]
 800c838:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c83c:	2206      	movs	r2, #6
 800c83e:	4825      	ldr	r0, [pc, #148]	; (800c8d4 <_svfiprintf_r+0x1ec>)
 800c840:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c844:	f001 fb68 	bl	800df18 <memchr>
 800c848:	2800      	cmp	r0, #0
 800c84a:	d038      	beq.n	800c8be <_svfiprintf_r+0x1d6>
 800c84c:	4b22      	ldr	r3, [pc, #136]	; (800c8d8 <_svfiprintf_r+0x1f0>)
 800c84e:	bb1b      	cbnz	r3, 800c898 <_svfiprintf_r+0x1b0>
 800c850:	9b03      	ldr	r3, [sp, #12]
 800c852:	3307      	adds	r3, #7
 800c854:	f023 0307 	bic.w	r3, r3, #7
 800c858:	3308      	adds	r3, #8
 800c85a:	9303      	str	r3, [sp, #12]
 800c85c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c85e:	4433      	add	r3, r6
 800c860:	9309      	str	r3, [sp, #36]	; 0x24
 800c862:	e768      	b.n	800c736 <_svfiprintf_r+0x4e>
 800c864:	fb0c 3202 	mla	r2, ip, r2, r3
 800c868:	460c      	mov	r4, r1
 800c86a:	2001      	movs	r0, #1
 800c86c:	e7a6      	b.n	800c7bc <_svfiprintf_r+0xd4>
 800c86e:	2300      	movs	r3, #0
 800c870:	3401      	adds	r4, #1
 800c872:	f04f 0c0a 	mov.w	ip, #10
 800c876:	4619      	mov	r1, r3
 800c878:	9305      	str	r3, [sp, #20]
 800c87a:	4620      	mov	r0, r4
 800c87c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c880:	3a30      	subs	r2, #48	; 0x30
 800c882:	2a09      	cmp	r2, #9
 800c884:	d903      	bls.n	800c88e <_svfiprintf_r+0x1a6>
 800c886:	2b00      	cmp	r3, #0
 800c888:	d0c6      	beq.n	800c818 <_svfiprintf_r+0x130>
 800c88a:	9105      	str	r1, [sp, #20]
 800c88c:	e7c4      	b.n	800c818 <_svfiprintf_r+0x130>
 800c88e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c892:	4604      	mov	r4, r0
 800c894:	2301      	movs	r3, #1
 800c896:	e7f0      	b.n	800c87a <_svfiprintf_r+0x192>
 800c898:	ab03      	add	r3, sp, #12
 800c89a:	462a      	mov	r2, r5
 800c89c:	a904      	add	r1, sp, #16
 800c89e:	4638      	mov	r0, r7
 800c8a0:	9300      	str	r3, [sp, #0]
 800c8a2:	4b0e      	ldr	r3, [pc, #56]	; (800c8dc <_svfiprintf_r+0x1f4>)
 800c8a4:	f3af 8000 	nop.w
 800c8a8:	1c42      	adds	r2, r0, #1
 800c8aa:	4606      	mov	r6, r0
 800c8ac:	d1d6      	bne.n	800c85c <_svfiprintf_r+0x174>
 800c8ae:	89ab      	ldrh	r3, [r5, #12]
 800c8b0:	065b      	lsls	r3, r3, #25
 800c8b2:	f53f af2d 	bmi.w	800c710 <_svfiprintf_r+0x28>
 800c8b6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c8b8:	b01d      	add	sp, #116	; 0x74
 800c8ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8be:	ab03      	add	r3, sp, #12
 800c8c0:	462a      	mov	r2, r5
 800c8c2:	a904      	add	r1, sp, #16
 800c8c4:	4638      	mov	r0, r7
 800c8c6:	9300      	str	r3, [sp, #0]
 800c8c8:	4b04      	ldr	r3, [pc, #16]	; (800c8dc <_svfiprintf_r+0x1f4>)
 800c8ca:	f000 fa7b 	bl	800cdc4 <_printf_i>
 800c8ce:	e7eb      	b.n	800c8a8 <_svfiprintf_r+0x1c0>
 800c8d0:	0800e7df 	.word	0x0800e7df
 800c8d4:	0800e7e9 	.word	0x0800e7e9
 800c8d8:	00000000 	.word	0x00000000
 800c8dc:	0800c633 	.word	0x0800c633
 800c8e0:	0800e7e5 	.word	0x0800e7e5

0800c8e4 <__sfputc_r>:
 800c8e4:	6893      	ldr	r3, [r2, #8]
 800c8e6:	3b01      	subs	r3, #1
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	6093      	str	r3, [r2, #8]
 800c8ec:	b410      	push	{r4}
 800c8ee:	da08      	bge.n	800c902 <__sfputc_r+0x1e>
 800c8f0:	6994      	ldr	r4, [r2, #24]
 800c8f2:	42a3      	cmp	r3, r4
 800c8f4:	db01      	blt.n	800c8fa <__sfputc_r+0x16>
 800c8f6:	290a      	cmp	r1, #10
 800c8f8:	d103      	bne.n	800c902 <__sfputc_r+0x1e>
 800c8fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c8fe:	f001 b976 	b.w	800dbee <__swbuf_r>
 800c902:	6813      	ldr	r3, [r2, #0]
 800c904:	1c58      	adds	r0, r3, #1
 800c906:	6010      	str	r0, [r2, #0]
 800c908:	4608      	mov	r0, r1
 800c90a:	7019      	strb	r1, [r3, #0]
 800c90c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c910:	4770      	bx	lr

0800c912 <__sfputs_r>:
 800c912:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c914:	4606      	mov	r6, r0
 800c916:	460f      	mov	r7, r1
 800c918:	4614      	mov	r4, r2
 800c91a:	18d5      	adds	r5, r2, r3
 800c91c:	42ac      	cmp	r4, r5
 800c91e:	d101      	bne.n	800c924 <__sfputs_r+0x12>
 800c920:	2000      	movs	r0, #0
 800c922:	e007      	b.n	800c934 <__sfputs_r+0x22>
 800c924:	463a      	mov	r2, r7
 800c926:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c92a:	4630      	mov	r0, r6
 800c92c:	f7ff ffda 	bl	800c8e4 <__sfputc_r>
 800c930:	1c43      	adds	r3, r0, #1
 800c932:	d1f3      	bne.n	800c91c <__sfputs_r+0xa>
 800c934:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c938 <_vfiprintf_r>:
 800c938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c93c:	460d      	mov	r5, r1
 800c93e:	b09d      	sub	sp, #116	; 0x74
 800c940:	4614      	mov	r4, r2
 800c942:	4698      	mov	r8, r3
 800c944:	4606      	mov	r6, r0
 800c946:	b118      	cbz	r0, 800c950 <_vfiprintf_r+0x18>
 800c948:	6a03      	ldr	r3, [r0, #32]
 800c94a:	b90b      	cbnz	r3, 800c950 <_vfiprintf_r+0x18>
 800c94c:	f7fe fa7e 	bl	800ae4c <__sinit>
 800c950:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c952:	07d9      	lsls	r1, r3, #31
 800c954:	d405      	bmi.n	800c962 <_vfiprintf_r+0x2a>
 800c956:	89ab      	ldrh	r3, [r5, #12]
 800c958:	059a      	lsls	r2, r3, #22
 800c95a:	d402      	bmi.n	800c962 <_vfiprintf_r+0x2a>
 800c95c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c95e:	f7ff face 	bl	800befe <__retarget_lock_acquire_recursive>
 800c962:	89ab      	ldrh	r3, [r5, #12]
 800c964:	071b      	lsls	r3, r3, #28
 800c966:	d501      	bpl.n	800c96c <_vfiprintf_r+0x34>
 800c968:	692b      	ldr	r3, [r5, #16]
 800c96a:	b99b      	cbnz	r3, 800c994 <_vfiprintf_r+0x5c>
 800c96c:	4629      	mov	r1, r5
 800c96e:	4630      	mov	r0, r6
 800c970:	f001 f97a 	bl	800dc68 <__swsetup_r>
 800c974:	b170      	cbz	r0, 800c994 <_vfiprintf_r+0x5c>
 800c976:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c978:	07dc      	lsls	r4, r3, #31
 800c97a:	d504      	bpl.n	800c986 <_vfiprintf_r+0x4e>
 800c97c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c980:	b01d      	add	sp, #116	; 0x74
 800c982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c986:	89ab      	ldrh	r3, [r5, #12]
 800c988:	0598      	lsls	r0, r3, #22
 800c98a:	d4f7      	bmi.n	800c97c <_vfiprintf_r+0x44>
 800c98c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c98e:	f7ff fab7 	bl	800bf00 <__retarget_lock_release_recursive>
 800c992:	e7f3      	b.n	800c97c <_vfiprintf_r+0x44>
 800c994:	2300      	movs	r3, #0
 800c996:	f8cd 800c 	str.w	r8, [sp, #12]
 800c99a:	f04f 0901 	mov.w	r9, #1
 800c99e:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 800cb58 <_vfiprintf_r+0x220>
 800c9a2:	9309      	str	r3, [sp, #36]	; 0x24
 800c9a4:	2320      	movs	r3, #32
 800c9a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c9aa:	2330      	movs	r3, #48	; 0x30
 800c9ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c9b0:	4623      	mov	r3, r4
 800c9b2:	469a      	mov	sl, r3
 800c9b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c9b8:	b10a      	cbz	r2, 800c9be <_vfiprintf_r+0x86>
 800c9ba:	2a25      	cmp	r2, #37	; 0x25
 800c9bc:	d1f9      	bne.n	800c9b2 <_vfiprintf_r+0x7a>
 800c9be:	ebba 0b04 	subs.w	fp, sl, r4
 800c9c2:	d00b      	beq.n	800c9dc <_vfiprintf_r+0xa4>
 800c9c4:	465b      	mov	r3, fp
 800c9c6:	4622      	mov	r2, r4
 800c9c8:	4629      	mov	r1, r5
 800c9ca:	4630      	mov	r0, r6
 800c9cc:	f7ff ffa1 	bl	800c912 <__sfputs_r>
 800c9d0:	3001      	adds	r0, #1
 800c9d2:	f000 80a9 	beq.w	800cb28 <_vfiprintf_r+0x1f0>
 800c9d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c9d8:	445a      	add	r2, fp
 800c9da:	9209      	str	r2, [sp, #36]	; 0x24
 800c9dc:	f89a 3000 	ldrb.w	r3, [sl]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	f000 80a1 	beq.w	800cb28 <_vfiprintf_r+0x1f0>
 800c9e6:	2300      	movs	r3, #0
 800c9e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c9ec:	f10a 0a01 	add.w	sl, sl, #1
 800c9f0:	9304      	str	r3, [sp, #16]
 800c9f2:	9307      	str	r3, [sp, #28]
 800c9f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c9f8:	931a      	str	r3, [sp, #104]	; 0x68
 800c9fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c9fe:	4654      	mov	r4, sl
 800ca00:	2205      	movs	r2, #5
 800ca02:	4855      	ldr	r0, [pc, #340]	; (800cb58 <_vfiprintf_r+0x220>)
 800ca04:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca08:	f001 fa86 	bl	800df18 <memchr>
 800ca0c:	9a04      	ldr	r2, [sp, #16]
 800ca0e:	b9d8      	cbnz	r0, 800ca48 <_vfiprintf_r+0x110>
 800ca10:	06d1      	lsls	r1, r2, #27
 800ca12:	bf44      	itt	mi
 800ca14:	2320      	movmi	r3, #32
 800ca16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ca1a:	0713      	lsls	r3, r2, #28
 800ca1c:	bf44      	itt	mi
 800ca1e:	232b      	movmi	r3, #43	; 0x2b
 800ca20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ca24:	f89a 3000 	ldrb.w	r3, [sl]
 800ca28:	2b2a      	cmp	r3, #42	; 0x2a
 800ca2a:	d015      	beq.n	800ca58 <_vfiprintf_r+0x120>
 800ca2c:	9a07      	ldr	r2, [sp, #28]
 800ca2e:	4654      	mov	r4, sl
 800ca30:	2000      	movs	r0, #0
 800ca32:	f04f 0c0a 	mov.w	ip, #10
 800ca36:	4621      	mov	r1, r4
 800ca38:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ca3c:	3b30      	subs	r3, #48	; 0x30
 800ca3e:	2b09      	cmp	r3, #9
 800ca40:	d94d      	bls.n	800cade <_vfiprintf_r+0x1a6>
 800ca42:	b1b0      	cbz	r0, 800ca72 <_vfiprintf_r+0x13a>
 800ca44:	9207      	str	r2, [sp, #28]
 800ca46:	e014      	b.n	800ca72 <_vfiprintf_r+0x13a>
 800ca48:	eba0 0308 	sub.w	r3, r0, r8
 800ca4c:	46a2      	mov	sl, r4
 800ca4e:	fa09 f303 	lsl.w	r3, r9, r3
 800ca52:	4313      	orrs	r3, r2
 800ca54:	9304      	str	r3, [sp, #16]
 800ca56:	e7d2      	b.n	800c9fe <_vfiprintf_r+0xc6>
 800ca58:	9b03      	ldr	r3, [sp, #12]
 800ca5a:	1d19      	adds	r1, r3, #4
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	9103      	str	r1, [sp, #12]
 800ca62:	bfbb      	ittet	lt
 800ca64:	425b      	neglt	r3, r3
 800ca66:	f042 0202 	orrlt.w	r2, r2, #2
 800ca6a:	9307      	strge	r3, [sp, #28]
 800ca6c:	9307      	strlt	r3, [sp, #28]
 800ca6e:	bfb8      	it	lt
 800ca70:	9204      	strlt	r2, [sp, #16]
 800ca72:	7823      	ldrb	r3, [r4, #0]
 800ca74:	2b2e      	cmp	r3, #46	; 0x2e
 800ca76:	d10c      	bne.n	800ca92 <_vfiprintf_r+0x15a>
 800ca78:	7863      	ldrb	r3, [r4, #1]
 800ca7a:	2b2a      	cmp	r3, #42	; 0x2a
 800ca7c:	d134      	bne.n	800cae8 <_vfiprintf_r+0x1b0>
 800ca7e:	9b03      	ldr	r3, [sp, #12]
 800ca80:	3402      	adds	r4, #2
 800ca82:	1d1a      	adds	r2, r3, #4
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	9203      	str	r2, [sp, #12]
 800ca8a:	bfb8      	it	lt
 800ca8c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ca90:	9305      	str	r3, [sp, #20]
 800ca92:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800cb68 <_vfiprintf_r+0x230>
 800ca96:	2203      	movs	r2, #3
 800ca98:	7821      	ldrb	r1, [r4, #0]
 800ca9a:	4650      	mov	r0, sl
 800ca9c:	f001 fa3c 	bl	800df18 <memchr>
 800caa0:	b138      	cbz	r0, 800cab2 <_vfiprintf_r+0x17a>
 800caa2:	eba0 000a 	sub.w	r0, r0, sl
 800caa6:	2240      	movs	r2, #64	; 0x40
 800caa8:	9b04      	ldr	r3, [sp, #16]
 800caaa:	3401      	adds	r4, #1
 800caac:	4082      	lsls	r2, r0
 800caae:	4313      	orrs	r3, r2
 800cab0:	9304      	str	r3, [sp, #16]
 800cab2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cab6:	2206      	movs	r2, #6
 800cab8:	4828      	ldr	r0, [pc, #160]	; (800cb5c <_vfiprintf_r+0x224>)
 800caba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cabe:	f001 fa2b 	bl	800df18 <memchr>
 800cac2:	2800      	cmp	r0, #0
 800cac4:	d03f      	beq.n	800cb46 <_vfiprintf_r+0x20e>
 800cac6:	4b26      	ldr	r3, [pc, #152]	; (800cb60 <_vfiprintf_r+0x228>)
 800cac8:	bb1b      	cbnz	r3, 800cb12 <_vfiprintf_r+0x1da>
 800caca:	9b03      	ldr	r3, [sp, #12]
 800cacc:	3307      	adds	r3, #7
 800cace:	f023 0307 	bic.w	r3, r3, #7
 800cad2:	3308      	adds	r3, #8
 800cad4:	9303      	str	r3, [sp, #12]
 800cad6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cad8:	443b      	add	r3, r7
 800cada:	9309      	str	r3, [sp, #36]	; 0x24
 800cadc:	e768      	b.n	800c9b0 <_vfiprintf_r+0x78>
 800cade:	fb0c 3202 	mla	r2, ip, r2, r3
 800cae2:	460c      	mov	r4, r1
 800cae4:	2001      	movs	r0, #1
 800cae6:	e7a6      	b.n	800ca36 <_vfiprintf_r+0xfe>
 800cae8:	2300      	movs	r3, #0
 800caea:	3401      	adds	r4, #1
 800caec:	f04f 0c0a 	mov.w	ip, #10
 800caf0:	4619      	mov	r1, r3
 800caf2:	9305      	str	r3, [sp, #20]
 800caf4:	4620      	mov	r0, r4
 800caf6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cafa:	3a30      	subs	r2, #48	; 0x30
 800cafc:	2a09      	cmp	r2, #9
 800cafe:	d903      	bls.n	800cb08 <_vfiprintf_r+0x1d0>
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d0c6      	beq.n	800ca92 <_vfiprintf_r+0x15a>
 800cb04:	9105      	str	r1, [sp, #20]
 800cb06:	e7c4      	b.n	800ca92 <_vfiprintf_r+0x15a>
 800cb08:	fb0c 2101 	mla	r1, ip, r1, r2
 800cb0c:	4604      	mov	r4, r0
 800cb0e:	2301      	movs	r3, #1
 800cb10:	e7f0      	b.n	800caf4 <_vfiprintf_r+0x1bc>
 800cb12:	ab03      	add	r3, sp, #12
 800cb14:	462a      	mov	r2, r5
 800cb16:	a904      	add	r1, sp, #16
 800cb18:	4630      	mov	r0, r6
 800cb1a:	9300      	str	r3, [sp, #0]
 800cb1c:	4b11      	ldr	r3, [pc, #68]	; (800cb64 <_vfiprintf_r+0x22c>)
 800cb1e:	f3af 8000 	nop.w
 800cb22:	4607      	mov	r7, r0
 800cb24:	1c78      	adds	r0, r7, #1
 800cb26:	d1d6      	bne.n	800cad6 <_vfiprintf_r+0x19e>
 800cb28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cb2a:	07d9      	lsls	r1, r3, #31
 800cb2c:	d405      	bmi.n	800cb3a <_vfiprintf_r+0x202>
 800cb2e:	89ab      	ldrh	r3, [r5, #12]
 800cb30:	059a      	lsls	r2, r3, #22
 800cb32:	d402      	bmi.n	800cb3a <_vfiprintf_r+0x202>
 800cb34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cb36:	f7ff f9e3 	bl	800bf00 <__retarget_lock_release_recursive>
 800cb3a:	89ab      	ldrh	r3, [r5, #12]
 800cb3c:	065b      	lsls	r3, r3, #25
 800cb3e:	f53f af1d 	bmi.w	800c97c <_vfiprintf_r+0x44>
 800cb42:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cb44:	e71c      	b.n	800c980 <_vfiprintf_r+0x48>
 800cb46:	ab03      	add	r3, sp, #12
 800cb48:	462a      	mov	r2, r5
 800cb4a:	a904      	add	r1, sp, #16
 800cb4c:	4630      	mov	r0, r6
 800cb4e:	9300      	str	r3, [sp, #0]
 800cb50:	4b04      	ldr	r3, [pc, #16]	; (800cb64 <_vfiprintf_r+0x22c>)
 800cb52:	f000 f937 	bl	800cdc4 <_printf_i>
 800cb56:	e7e4      	b.n	800cb22 <_vfiprintf_r+0x1ea>
 800cb58:	0800e7df 	.word	0x0800e7df
 800cb5c:	0800e7e9 	.word	0x0800e7e9
 800cb60:	00000000 	.word	0x00000000
 800cb64:	0800c913 	.word	0x0800c913
 800cb68:	0800e7e5 	.word	0x0800e7e5

0800cb6c <malloc>:
 800cb6c:	4b02      	ldr	r3, [pc, #8]	; (800cb78 <malloc+0xc>)
 800cb6e:	4601      	mov	r1, r0
 800cb70:	6818      	ldr	r0, [r3, #0]
 800cb72:	f000 b823 	b.w	800cbbc <_malloc_r>
 800cb76:	bf00      	nop
 800cb78:	200002d8 	.word	0x200002d8

0800cb7c <sbrk_aligned>:
 800cb7c:	b570      	push	{r4, r5, r6, lr}
 800cb7e:	4e0e      	ldr	r6, [pc, #56]	; (800cbb8 <sbrk_aligned+0x3c>)
 800cb80:	460c      	mov	r4, r1
 800cb82:	4605      	mov	r5, r0
 800cb84:	6831      	ldr	r1, [r6, #0]
 800cb86:	b911      	cbnz	r1, 800cb8e <sbrk_aligned+0x12>
 800cb88:	f001 f9a4 	bl	800ded4 <_sbrk_r>
 800cb8c:	6030      	str	r0, [r6, #0]
 800cb8e:	4621      	mov	r1, r4
 800cb90:	4628      	mov	r0, r5
 800cb92:	f001 f99f 	bl	800ded4 <_sbrk_r>
 800cb96:	1c43      	adds	r3, r0, #1
 800cb98:	d00a      	beq.n	800cbb0 <sbrk_aligned+0x34>
 800cb9a:	1cc4      	adds	r4, r0, #3
 800cb9c:	f024 0403 	bic.w	r4, r4, #3
 800cba0:	42a0      	cmp	r0, r4
 800cba2:	d007      	beq.n	800cbb4 <sbrk_aligned+0x38>
 800cba4:	1a21      	subs	r1, r4, r0
 800cba6:	4628      	mov	r0, r5
 800cba8:	f001 f994 	bl	800ded4 <_sbrk_r>
 800cbac:	3001      	adds	r0, #1
 800cbae:	d101      	bne.n	800cbb4 <sbrk_aligned+0x38>
 800cbb0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800cbb4:	4620      	mov	r0, r4
 800cbb6:	bd70      	pop	{r4, r5, r6, pc}
 800cbb8:	20000658 	.word	0x20000658

0800cbbc <_malloc_r>:
 800cbbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cbc0:	1ccd      	adds	r5, r1, #3
 800cbc2:	4607      	mov	r7, r0
 800cbc4:	f025 0503 	bic.w	r5, r5, #3
 800cbc8:	3508      	adds	r5, #8
 800cbca:	2d0c      	cmp	r5, #12
 800cbcc:	bf38      	it	cc
 800cbce:	250c      	movcc	r5, #12
 800cbd0:	2d00      	cmp	r5, #0
 800cbd2:	db01      	blt.n	800cbd8 <_malloc_r+0x1c>
 800cbd4:	42a9      	cmp	r1, r5
 800cbd6:	d905      	bls.n	800cbe4 <_malloc_r+0x28>
 800cbd8:	230c      	movs	r3, #12
 800cbda:	2600      	movs	r6, #0
 800cbdc:	603b      	str	r3, [r7, #0]
 800cbde:	4630      	mov	r0, r6
 800cbe0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cbe4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ccb8 <_malloc_r+0xfc>
 800cbe8:	f000 fab8 	bl	800d15c <__malloc_lock>
 800cbec:	f8d8 3000 	ldr.w	r3, [r8]
 800cbf0:	461c      	mov	r4, r3
 800cbf2:	bb5c      	cbnz	r4, 800cc4c <_malloc_r+0x90>
 800cbf4:	4629      	mov	r1, r5
 800cbf6:	4638      	mov	r0, r7
 800cbf8:	f7ff ffc0 	bl	800cb7c <sbrk_aligned>
 800cbfc:	1c43      	adds	r3, r0, #1
 800cbfe:	4604      	mov	r4, r0
 800cc00:	d155      	bne.n	800ccae <_malloc_r+0xf2>
 800cc02:	f8d8 4000 	ldr.w	r4, [r8]
 800cc06:	4626      	mov	r6, r4
 800cc08:	2e00      	cmp	r6, #0
 800cc0a:	d145      	bne.n	800cc98 <_malloc_r+0xdc>
 800cc0c:	2c00      	cmp	r4, #0
 800cc0e:	d048      	beq.n	800cca2 <_malloc_r+0xe6>
 800cc10:	6823      	ldr	r3, [r4, #0]
 800cc12:	4631      	mov	r1, r6
 800cc14:	4638      	mov	r0, r7
 800cc16:	eb04 0903 	add.w	r9, r4, r3
 800cc1a:	f001 f95b 	bl	800ded4 <_sbrk_r>
 800cc1e:	4581      	cmp	r9, r0
 800cc20:	d13f      	bne.n	800cca2 <_malloc_r+0xe6>
 800cc22:	6821      	ldr	r1, [r4, #0]
 800cc24:	4638      	mov	r0, r7
 800cc26:	1a6d      	subs	r5, r5, r1
 800cc28:	4629      	mov	r1, r5
 800cc2a:	f7ff ffa7 	bl	800cb7c <sbrk_aligned>
 800cc2e:	3001      	adds	r0, #1
 800cc30:	d037      	beq.n	800cca2 <_malloc_r+0xe6>
 800cc32:	6823      	ldr	r3, [r4, #0]
 800cc34:	442b      	add	r3, r5
 800cc36:	6023      	str	r3, [r4, #0]
 800cc38:	f8d8 3000 	ldr.w	r3, [r8]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d038      	beq.n	800ccb2 <_malloc_r+0xf6>
 800cc40:	685a      	ldr	r2, [r3, #4]
 800cc42:	42a2      	cmp	r2, r4
 800cc44:	d12b      	bne.n	800cc9e <_malloc_r+0xe2>
 800cc46:	2200      	movs	r2, #0
 800cc48:	605a      	str	r2, [r3, #4]
 800cc4a:	e00f      	b.n	800cc6c <_malloc_r+0xb0>
 800cc4c:	6822      	ldr	r2, [r4, #0]
 800cc4e:	1b52      	subs	r2, r2, r5
 800cc50:	d41f      	bmi.n	800cc92 <_malloc_r+0xd6>
 800cc52:	2a0b      	cmp	r2, #11
 800cc54:	d917      	bls.n	800cc86 <_malloc_r+0xca>
 800cc56:	1961      	adds	r1, r4, r5
 800cc58:	42a3      	cmp	r3, r4
 800cc5a:	6025      	str	r5, [r4, #0]
 800cc5c:	bf18      	it	ne
 800cc5e:	6059      	strne	r1, [r3, #4]
 800cc60:	6863      	ldr	r3, [r4, #4]
 800cc62:	bf08      	it	eq
 800cc64:	f8c8 1000 	streq.w	r1, [r8]
 800cc68:	5162      	str	r2, [r4, r5]
 800cc6a:	604b      	str	r3, [r1, #4]
 800cc6c:	f104 060b 	add.w	r6, r4, #11
 800cc70:	4638      	mov	r0, r7
 800cc72:	f000 fa79 	bl	800d168 <__malloc_unlock>
 800cc76:	1d23      	adds	r3, r4, #4
 800cc78:	f026 0607 	bic.w	r6, r6, #7
 800cc7c:	1af2      	subs	r2, r6, r3
 800cc7e:	d0ae      	beq.n	800cbde <_malloc_r+0x22>
 800cc80:	1b9b      	subs	r3, r3, r6
 800cc82:	50a3      	str	r3, [r4, r2]
 800cc84:	e7ab      	b.n	800cbde <_malloc_r+0x22>
 800cc86:	42a3      	cmp	r3, r4
 800cc88:	6862      	ldr	r2, [r4, #4]
 800cc8a:	d1dd      	bne.n	800cc48 <_malloc_r+0x8c>
 800cc8c:	f8c8 2000 	str.w	r2, [r8]
 800cc90:	e7ec      	b.n	800cc6c <_malloc_r+0xb0>
 800cc92:	4623      	mov	r3, r4
 800cc94:	6864      	ldr	r4, [r4, #4]
 800cc96:	e7ac      	b.n	800cbf2 <_malloc_r+0x36>
 800cc98:	4634      	mov	r4, r6
 800cc9a:	6876      	ldr	r6, [r6, #4]
 800cc9c:	e7b4      	b.n	800cc08 <_malloc_r+0x4c>
 800cc9e:	4613      	mov	r3, r2
 800cca0:	e7cc      	b.n	800cc3c <_malloc_r+0x80>
 800cca2:	230c      	movs	r3, #12
 800cca4:	4638      	mov	r0, r7
 800cca6:	603b      	str	r3, [r7, #0]
 800cca8:	f000 fa5e 	bl	800d168 <__malloc_unlock>
 800ccac:	e797      	b.n	800cbde <_malloc_r+0x22>
 800ccae:	6025      	str	r5, [r4, #0]
 800ccb0:	e7dc      	b.n	800cc6c <_malloc_r+0xb0>
 800ccb2:	605b      	str	r3, [r3, #4]
 800ccb4:	deff      	udf	#255	; 0xff
 800ccb6:	bf00      	nop
 800ccb8:	20000654 	.word	0x20000654

0800ccbc <__ascii_mbtowc>:
 800ccbc:	b082      	sub	sp, #8
 800ccbe:	b901      	cbnz	r1, 800ccc2 <__ascii_mbtowc+0x6>
 800ccc0:	a901      	add	r1, sp, #4
 800ccc2:	b142      	cbz	r2, 800ccd6 <__ascii_mbtowc+0x1a>
 800ccc4:	b14b      	cbz	r3, 800ccda <__ascii_mbtowc+0x1e>
 800ccc6:	7813      	ldrb	r3, [r2, #0]
 800ccc8:	600b      	str	r3, [r1, #0]
 800ccca:	7812      	ldrb	r2, [r2, #0]
 800cccc:	1e10      	subs	r0, r2, #0
 800ccce:	bf18      	it	ne
 800ccd0:	2001      	movne	r0, #1
 800ccd2:	b002      	add	sp, #8
 800ccd4:	4770      	bx	lr
 800ccd6:	4610      	mov	r0, r2
 800ccd8:	e7fb      	b.n	800ccd2 <__ascii_mbtowc+0x16>
 800ccda:	f06f 0001 	mvn.w	r0, #1
 800ccde:	e7f8      	b.n	800ccd2 <__ascii_mbtowc+0x16>

0800cce0 <_printf_common>:
 800cce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cce4:	4616      	mov	r6, r2
 800cce6:	4699      	mov	r9, r3
 800cce8:	688a      	ldr	r2, [r1, #8]
 800ccea:	4607      	mov	r7, r0
 800ccec:	690b      	ldr	r3, [r1, #16]
 800ccee:	460c      	mov	r4, r1
 800ccf0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ccf4:	4293      	cmp	r3, r2
 800ccf6:	bfb8      	it	lt
 800ccf8:	4613      	movlt	r3, r2
 800ccfa:	6033      	str	r3, [r6, #0]
 800ccfc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cd00:	b10a      	cbz	r2, 800cd06 <_printf_common+0x26>
 800cd02:	3301      	adds	r3, #1
 800cd04:	6033      	str	r3, [r6, #0]
 800cd06:	6823      	ldr	r3, [r4, #0]
 800cd08:	0699      	lsls	r1, r3, #26
 800cd0a:	bf42      	ittt	mi
 800cd0c:	6833      	ldrmi	r3, [r6, #0]
 800cd0e:	3302      	addmi	r3, #2
 800cd10:	6033      	strmi	r3, [r6, #0]
 800cd12:	6825      	ldr	r5, [r4, #0]
 800cd14:	f015 0506 	ands.w	r5, r5, #6
 800cd18:	d106      	bne.n	800cd28 <_printf_common+0x48>
 800cd1a:	f104 0a19 	add.w	sl, r4, #25
 800cd1e:	68e3      	ldr	r3, [r4, #12]
 800cd20:	6832      	ldr	r2, [r6, #0]
 800cd22:	1a9b      	subs	r3, r3, r2
 800cd24:	42ab      	cmp	r3, r5
 800cd26:	dc2b      	bgt.n	800cd80 <_printf_common+0xa0>
 800cd28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cd2c:	1e13      	subs	r3, r2, #0
 800cd2e:	6822      	ldr	r2, [r4, #0]
 800cd30:	bf18      	it	ne
 800cd32:	2301      	movne	r3, #1
 800cd34:	0692      	lsls	r2, r2, #26
 800cd36:	d430      	bmi.n	800cd9a <_printf_common+0xba>
 800cd38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cd3c:	4649      	mov	r1, r9
 800cd3e:	4638      	mov	r0, r7
 800cd40:	47c0      	blx	r8
 800cd42:	3001      	adds	r0, #1
 800cd44:	d023      	beq.n	800cd8e <_printf_common+0xae>
 800cd46:	6823      	ldr	r3, [r4, #0]
 800cd48:	341a      	adds	r4, #26
 800cd4a:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800cd4e:	f003 0306 	and.w	r3, r3, #6
 800cd52:	2b04      	cmp	r3, #4
 800cd54:	bf0a      	itet	eq
 800cd56:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800cd5a:	2500      	movne	r5, #0
 800cd5c:	6833      	ldreq	r3, [r6, #0]
 800cd5e:	f04f 0600 	mov.w	r6, #0
 800cd62:	bf08      	it	eq
 800cd64:	1aed      	subeq	r5, r5, r3
 800cd66:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800cd6a:	bf08      	it	eq
 800cd6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cd70:	4293      	cmp	r3, r2
 800cd72:	bfc4      	itt	gt
 800cd74:	1a9b      	subgt	r3, r3, r2
 800cd76:	18ed      	addgt	r5, r5, r3
 800cd78:	42b5      	cmp	r5, r6
 800cd7a:	d11a      	bne.n	800cdb2 <_printf_common+0xd2>
 800cd7c:	2000      	movs	r0, #0
 800cd7e:	e008      	b.n	800cd92 <_printf_common+0xb2>
 800cd80:	2301      	movs	r3, #1
 800cd82:	4652      	mov	r2, sl
 800cd84:	4649      	mov	r1, r9
 800cd86:	4638      	mov	r0, r7
 800cd88:	47c0      	blx	r8
 800cd8a:	3001      	adds	r0, #1
 800cd8c:	d103      	bne.n	800cd96 <_printf_common+0xb6>
 800cd8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cd92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd96:	3501      	adds	r5, #1
 800cd98:	e7c1      	b.n	800cd1e <_printf_common+0x3e>
 800cd9a:	18e1      	adds	r1, r4, r3
 800cd9c:	1c5a      	adds	r2, r3, #1
 800cd9e:	2030      	movs	r0, #48	; 0x30
 800cda0:	3302      	adds	r3, #2
 800cda2:	4422      	add	r2, r4
 800cda4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cda8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cdac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cdb0:	e7c2      	b.n	800cd38 <_printf_common+0x58>
 800cdb2:	2301      	movs	r3, #1
 800cdb4:	4622      	mov	r2, r4
 800cdb6:	4649      	mov	r1, r9
 800cdb8:	4638      	mov	r0, r7
 800cdba:	47c0      	blx	r8
 800cdbc:	3001      	adds	r0, #1
 800cdbe:	d0e6      	beq.n	800cd8e <_printf_common+0xae>
 800cdc0:	3601      	adds	r6, #1
 800cdc2:	e7d9      	b.n	800cd78 <_printf_common+0x98>

0800cdc4 <_printf_i>:
 800cdc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cdc8:	7e0f      	ldrb	r7, [r1, #24]
 800cdca:	4691      	mov	r9, r2
 800cdcc:	4680      	mov	r8, r0
 800cdce:	460c      	mov	r4, r1
 800cdd0:	2f78      	cmp	r7, #120	; 0x78
 800cdd2:	469a      	mov	sl, r3
 800cdd4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cdd6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cdda:	d807      	bhi.n	800cdec <_printf_i+0x28>
 800cddc:	2f62      	cmp	r7, #98	; 0x62
 800cdde:	d80a      	bhi.n	800cdf6 <_printf_i+0x32>
 800cde0:	2f00      	cmp	r7, #0
 800cde2:	f000 80d3 	beq.w	800cf8c <_printf_i+0x1c8>
 800cde6:	2f58      	cmp	r7, #88	; 0x58
 800cde8:	f000 80bf 	beq.w	800cf6a <_printf_i+0x1a6>
 800cdec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cdf0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cdf4:	e03a      	b.n	800ce6c <_printf_i+0xa8>
 800cdf6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cdfa:	2b15      	cmp	r3, #21
 800cdfc:	d8f6      	bhi.n	800cdec <_printf_i+0x28>
 800cdfe:	a101      	add	r1, pc, #4	; (adr r1, 800ce04 <_printf_i+0x40>)
 800ce00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ce04:	0800ce5d 	.word	0x0800ce5d
 800ce08:	0800ce71 	.word	0x0800ce71
 800ce0c:	0800cded 	.word	0x0800cded
 800ce10:	0800cded 	.word	0x0800cded
 800ce14:	0800cded 	.word	0x0800cded
 800ce18:	0800cded 	.word	0x0800cded
 800ce1c:	0800ce71 	.word	0x0800ce71
 800ce20:	0800cded 	.word	0x0800cded
 800ce24:	0800cded 	.word	0x0800cded
 800ce28:	0800cded 	.word	0x0800cded
 800ce2c:	0800cded 	.word	0x0800cded
 800ce30:	0800cf73 	.word	0x0800cf73
 800ce34:	0800ce9d 	.word	0x0800ce9d
 800ce38:	0800cf2f 	.word	0x0800cf2f
 800ce3c:	0800cded 	.word	0x0800cded
 800ce40:	0800cded 	.word	0x0800cded
 800ce44:	0800cf95 	.word	0x0800cf95
 800ce48:	0800cded 	.word	0x0800cded
 800ce4c:	0800ce9d 	.word	0x0800ce9d
 800ce50:	0800cded 	.word	0x0800cded
 800ce54:	0800cded 	.word	0x0800cded
 800ce58:	0800cf37 	.word	0x0800cf37
 800ce5c:	682b      	ldr	r3, [r5, #0]
 800ce5e:	1d1a      	adds	r2, r3, #4
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	602a      	str	r2, [r5, #0]
 800ce64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ce68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ce6c:	2301      	movs	r3, #1
 800ce6e:	e09e      	b.n	800cfae <_printf_i+0x1ea>
 800ce70:	6820      	ldr	r0, [r4, #0]
 800ce72:	682b      	ldr	r3, [r5, #0]
 800ce74:	0607      	lsls	r7, r0, #24
 800ce76:	f103 0104 	add.w	r1, r3, #4
 800ce7a:	6029      	str	r1, [r5, #0]
 800ce7c:	d501      	bpl.n	800ce82 <_printf_i+0xbe>
 800ce7e:	681e      	ldr	r6, [r3, #0]
 800ce80:	e003      	b.n	800ce8a <_printf_i+0xc6>
 800ce82:	0646      	lsls	r6, r0, #25
 800ce84:	d5fb      	bpl.n	800ce7e <_printf_i+0xba>
 800ce86:	f9b3 6000 	ldrsh.w	r6, [r3]
 800ce8a:	2e00      	cmp	r6, #0
 800ce8c:	da03      	bge.n	800ce96 <_printf_i+0xd2>
 800ce8e:	232d      	movs	r3, #45	; 0x2d
 800ce90:	4276      	negs	r6, r6
 800ce92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ce96:	4859      	ldr	r0, [pc, #356]	; (800cffc <_printf_i+0x238>)
 800ce98:	230a      	movs	r3, #10
 800ce9a:	e012      	b.n	800cec2 <_printf_i+0xfe>
 800ce9c:	682b      	ldr	r3, [r5, #0]
 800ce9e:	6820      	ldr	r0, [r4, #0]
 800cea0:	1d19      	adds	r1, r3, #4
 800cea2:	6029      	str	r1, [r5, #0]
 800cea4:	0605      	lsls	r5, r0, #24
 800cea6:	d501      	bpl.n	800ceac <_printf_i+0xe8>
 800cea8:	681e      	ldr	r6, [r3, #0]
 800ceaa:	e002      	b.n	800ceb2 <_printf_i+0xee>
 800ceac:	0641      	lsls	r1, r0, #25
 800ceae:	d5fb      	bpl.n	800cea8 <_printf_i+0xe4>
 800ceb0:	881e      	ldrh	r6, [r3, #0]
 800ceb2:	2f6f      	cmp	r7, #111	; 0x6f
 800ceb4:	4851      	ldr	r0, [pc, #324]	; (800cffc <_printf_i+0x238>)
 800ceb6:	bf0c      	ite	eq
 800ceb8:	2308      	moveq	r3, #8
 800ceba:	230a      	movne	r3, #10
 800cebc:	2100      	movs	r1, #0
 800cebe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cec2:	6865      	ldr	r5, [r4, #4]
 800cec4:	2d00      	cmp	r5, #0
 800cec6:	60a5      	str	r5, [r4, #8]
 800cec8:	bfa2      	ittt	ge
 800ceca:	6821      	ldrge	r1, [r4, #0]
 800cecc:	f021 0104 	bicge.w	r1, r1, #4
 800ced0:	6021      	strge	r1, [r4, #0]
 800ced2:	b90e      	cbnz	r6, 800ced8 <_printf_i+0x114>
 800ced4:	2d00      	cmp	r5, #0
 800ced6:	d04a      	beq.n	800cf6e <_printf_i+0x1aa>
 800ced8:	4615      	mov	r5, r2
 800ceda:	fbb6 f1f3 	udiv	r1, r6, r3
 800cede:	fb03 6711 	mls	r7, r3, r1, r6
 800cee2:	5dc7      	ldrb	r7, [r0, r7]
 800cee4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cee8:	4637      	mov	r7, r6
 800ceea:	460e      	mov	r6, r1
 800ceec:	42bb      	cmp	r3, r7
 800ceee:	d9f4      	bls.n	800ceda <_printf_i+0x116>
 800cef0:	2b08      	cmp	r3, #8
 800cef2:	d10b      	bne.n	800cf0c <_printf_i+0x148>
 800cef4:	6823      	ldr	r3, [r4, #0]
 800cef6:	07de      	lsls	r6, r3, #31
 800cef8:	d508      	bpl.n	800cf0c <_printf_i+0x148>
 800cefa:	6923      	ldr	r3, [r4, #16]
 800cefc:	6861      	ldr	r1, [r4, #4]
 800cefe:	4299      	cmp	r1, r3
 800cf00:	bfde      	ittt	le
 800cf02:	2330      	movle	r3, #48	; 0x30
 800cf04:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cf08:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800cf0c:	1b52      	subs	r2, r2, r5
 800cf0e:	6122      	str	r2, [r4, #16]
 800cf10:	464b      	mov	r3, r9
 800cf12:	aa03      	add	r2, sp, #12
 800cf14:	4621      	mov	r1, r4
 800cf16:	4640      	mov	r0, r8
 800cf18:	f8cd a000 	str.w	sl, [sp]
 800cf1c:	f7ff fee0 	bl	800cce0 <_printf_common>
 800cf20:	3001      	adds	r0, #1
 800cf22:	d149      	bne.n	800cfb8 <_printf_i+0x1f4>
 800cf24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cf28:	b004      	add	sp, #16
 800cf2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf2e:	6823      	ldr	r3, [r4, #0]
 800cf30:	f043 0320 	orr.w	r3, r3, #32
 800cf34:	6023      	str	r3, [r4, #0]
 800cf36:	2778      	movs	r7, #120	; 0x78
 800cf38:	4831      	ldr	r0, [pc, #196]	; (800d000 <_printf_i+0x23c>)
 800cf3a:	6823      	ldr	r3, [r4, #0]
 800cf3c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800cf40:	061f      	lsls	r7, r3, #24
 800cf42:	6829      	ldr	r1, [r5, #0]
 800cf44:	f851 6b04 	ldr.w	r6, [r1], #4
 800cf48:	d402      	bmi.n	800cf50 <_printf_i+0x18c>
 800cf4a:	065f      	lsls	r7, r3, #25
 800cf4c:	bf48      	it	mi
 800cf4e:	b2b6      	uxthmi	r6, r6
 800cf50:	07df      	lsls	r7, r3, #31
 800cf52:	6029      	str	r1, [r5, #0]
 800cf54:	bf44      	itt	mi
 800cf56:	f043 0320 	orrmi.w	r3, r3, #32
 800cf5a:	6023      	strmi	r3, [r4, #0]
 800cf5c:	b91e      	cbnz	r6, 800cf66 <_printf_i+0x1a2>
 800cf5e:	6823      	ldr	r3, [r4, #0]
 800cf60:	f023 0320 	bic.w	r3, r3, #32
 800cf64:	6023      	str	r3, [r4, #0]
 800cf66:	2310      	movs	r3, #16
 800cf68:	e7a8      	b.n	800cebc <_printf_i+0xf8>
 800cf6a:	4824      	ldr	r0, [pc, #144]	; (800cffc <_printf_i+0x238>)
 800cf6c:	e7e5      	b.n	800cf3a <_printf_i+0x176>
 800cf6e:	4615      	mov	r5, r2
 800cf70:	e7be      	b.n	800cef0 <_printf_i+0x12c>
 800cf72:	682b      	ldr	r3, [r5, #0]
 800cf74:	6826      	ldr	r6, [r4, #0]
 800cf76:	1d18      	adds	r0, r3, #4
 800cf78:	6961      	ldr	r1, [r4, #20]
 800cf7a:	6028      	str	r0, [r5, #0]
 800cf7c:	0635      	lsls	r5, r6, #24
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	d501      	bpl.n	800cf86 <_printf_i+0x1c2>
 800cf82:	6019      	str	r1, [r3, #0]
 800cf84:	e002      	b.n	800cf8c <_printf_i+0x1c8>
 800cf86:	0670      	lsls	r0, r6, #25
 800cf88:	d5fb      	bpl.n	800cf82 <_printf_i+0x1be>
 800cf8a:	8019      	strh	r1, [r3, #0]
 800cf8c:	2300      	movs	r3, #0
 800cf8e:	4615      	mov	r5, r2
 800cf90:	6123      	str	r3, [r4, #16]
 800cf92:	e7bd      	b.n	800cf10 <_printf_i+0x14c>
 800cf94:	682b      	ldr	r3, [r5, #0]
 800cf96:	2100      	movs	r1, #0
 800cf98:	1d1a      	adds	r2, r3, #4
 800cf9a:	602a      	str	r2, [r5, #0]
 800cf9c:	681d      	ldr	r5, [r3, #0]
 800cf9e:	6862      	ldr	r2, [r4, #4]
 800cfa0:	4628      	mov	r0, r5
 800cfa2:	f000 ffb9 	bl	800df18 <memchr>
 800cfa6:	b108      	cbz	r0, 800cfac <_printf_i+0x1e8>
 800cfa8:	1b40      	subs	r0, r0, r5
 800cfaa:	6060      	str	r0, [r4, #4]
 800cfac:	6863      	ldr	r3, [r4, #4]
 800cfae:	6123      	str	r3, [r4, #16]
 800cfb0:	2300      	movs	r3, #0
 800cfb2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cfb6:	e7ab      	b.n	800cf10 <_printf_i+0x14c>
 800cfb8:	6923      	ldr	r3, [r4, #16]
 800cfba:	462a      	mov	r2, r5
 800cfbc:	4649      	mov	r1, r9
 800cfbe:	4640      	mov	r0, r8
 800cfc0:	47d0      	blx	sl
 800cfc2:	3001      	adds	r0, #1
 800cfc4:	d0ae      	beq.n	800cf24 <_printf_i+0x160>
 800cfc6:	6823      	ldr	r3, [r4, #0]
 800cfc8:	079b      	lsls	r3, r3, #30
 800cfca:	d413      	bmi.n	800cff4 <_printf_i+0x230>
 800cfcc:	68e0      	ldr	r0, [r4, #12]
 800cfce:	9b03      	ldr	r3, [sp, #12]
 800cfd0:	4298      	cmp	r0, r3
 800cfd2:	bfb8      	it	lt
 800cfd4:	4618      	movlt	r0, r3
 800cfd6:	e7a7      	b.n	800cf28 <_printf_i+0x164>
 800cfd8:	2301      	movs	r3, #1
 800cfda:	4632      	mov	r2, r6
 800cfdc:	4649      	mov	r1, r9
 800cfde:	4640      	mov	r0, r8
 800cfe0:	47d0      	blx	sl
 800cfe2:	3001      	adds	r0, #1
 800cfe4:	d09e      	beq.n	800cf24 <_printf_i+0x160>
 800cfe6:	3501      	adds	r5, #1
 800cfe8:	68e3      	ldr	r3, [r4, #12]
 800cfea:	9903      	ldr	r1, [sp, #12]
 800cfec:	1a5b      	subs	r3, r3, r1
 800cfee:	42ab      	cmp	r3, r5
 800cff0:	dcf2      	bgt.n	800cfd8 <_printf_i+0x214>
 800cff2:	e7eb      	b.n	800cfcc <_printf_i+0x208>
 800cff4:	2500      	movs	r5, #0
 800cff6:	f104 0619 	add.w	r6, r4, #25
 800cffa:	e7f5      	b.n	800cfe8 <_printf_i+0x224>
 800cffc:	0800e7f0 	.word	0x0800e7f0
 800d000:	0800e801 	.word	0x0800e801

0800d004 <__sflush_r>:
 800d004:	898a      	ldrh	r2, [r1, #12]
 800d006:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d00a:	4605      	mov	r5, r0
 800d00c:	0710      	lsls	r0, r2, #28
 800d00e:	460c      	mov	r4, r1
 800d010:	d458      	bmi.n	800d0c4 <__sflush_r+0xc0>
 800d012:	684b      	ldr	r3, [r1, #4]
 800d014:	2b00      	cmp	r3, #0
 800d016:	dc05      	bgt.n	800d024 <__sflush_r+0x20>
 800d018:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	dc02      	bgt.n	800d024 <__sflush_r+0x20>
 800d01e:	2000      	movs	r0, #0
 800d020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d024:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d026:	2e00      	cmp	r6, #0
 800d028:	d0f9      	beq.n	800d01e <__sflush_r+0x1a>
 800d02a:	2300      	movs	r3, #0
 800d02c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d030:	682f      	ldr	r7, [r5, #0]
 800d032:	6a21      	ldr	r1, [r4, #32]
 800d034:	602b      	str	r3, [r5, #0]
 800d036:	d032      	beq.n	800d09e <__sflush_r+0x9a>
 800d038:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d03a:	89a3      	ldrh	r3, [r4, #12]
 800d03c:	075a      	lsls	r2, r3, #29
 800d03e:	d505      	bpl.n	800d04c <__sflush_r+0x48>
 800d040:	6863      	ldr	r3, [r4, #4]
 800d042:	1ac0      	subs	r0, r0, r3
 800d044:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d046:	b10b      	cbz	r3, 800d04c <__sflush_r+0x48>
 800d048:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d04a:	1ac0      	subs	r0, r0, r3
 800d04c:	2300      	movs	r3, #0
 800d04e:	4602      	mov	r2, r0
 800d050:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d052:	4628      	mov	r0, r5
 800d054:	6a21      	ldr	r1, [r4, #32]
 800d056:	47b0      	blx	r6
 800d058:	1c43      	adds	r3, r0, #1
 800d05a:	89a3      	ldrh	r3, [r4, #12]
 800d05c:	d106      	bne.n	800d06c <__sflush_r+0x68>
 800d05e:	6829      	ldr	r1, [r5, #0]
 800d060:	291d      	cmp	r1, #29
 800d062:	d82b      	bhi.n	800d0bc <__sflush_r+0xb8>
 800d064:	4a28      	ldr	r2, [pc, #160]	; (800d108 <__sflush_r+0x104>)
 800d066:	410a      	asrs	r2, r1
 800d068:	07d6      	lsls	r6, r2, #31
 800d06a:	d427      	bmi.n	800d0bc <__sflush_r+0xb8>
 800d06c:	2200      	movs	r2, #0
 800d06e:	04d9      	lsls	r1, r3, #19
 800d070:	6062      	str	r2, [r4, #4]
 800d072:	6922      	ldr	r2, [r4, #16]
 800d074:	6022      	str	r2, [r4, #0]
 800d076:	d504      	bpl.n	800d082 <__sflush_r+0x7e>
 800d078:	1c42      	adds	r2, r0, #1
 800d07a:	d101      	bne.n	800d080 <__sflush_r+0x7c>
 800d07c:	682b      	ldr	r3, [r5, #0]
 800d07e:	b903      	cbnz	r3, 800d082 <__sflush_r+0x7e>
 800d080:	6560      	str	r0, [r4, #84]	; 0x54
 800d082:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d084:	602f      	str	r7, [r5, #0]
 800d086:	2900      	cmp	r1, #0
 800d088:	d0c9      	beq.n	800d01e <__sflush_r+0x1a>
 800d08a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d08e:	4299      	cmp	r1, r3
 800d090:	d002      	beq.n	800d098 <__sflush_r+0x94>
 800d092:	4628      	mov	r0, r5
 800d094:	f000 ff6c 	bl	800df70 <_free_r>
 800d098:	2000      	movs	r0, #0
 800d09a:	6360      	str	r0, [r4, #52]	; 0x34
 800d09c:	e7c0      	b.n	800d020 <__sflush_r+0x1c>
 800d09e:	2301      	movs	r3, #1
 800d0a0:	4628      	mov	r0, r5
 800d0a2:	47b0      	blx	r6
 800d0a4:	1c41      	adds	r1, r0, #1
 800d0a6:	d1c8      	bne.n	800d03a <__sflush_r+0x36>
 800d0a8:	682b      	ldr	r3, [r5, #0]
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d0c5      	beq.n	800d03a <__sflush_r+0x36>
 800d0ae:	2b1d      	cmp	r3, #29
 800d0b0:	d001      	beq.n	800d0b6 <__sflush_r+0xb2>
 800d0b2:	2b16      	cmp	r3, #22
 800d0b4:	d101      	bne.n	800d0ba <__sflush_r+0xb6>
 800d0b6:	602f      	str	r7, [r5, #0]
 800d0b8:	e7b1      	b.n	800d01e <__sflush_r+0x1a>
 800d0ba:	89a3      	ldrh	r3, [r4, #12]
 800d0bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d0c0:	81a3      	strh	r3, [r4, #12]
 800d0c2:	e7ad      	b.n	800d020 <__sflush_r+0x1c>
 800d0c4:	690f      	ldr	r7, [r1, #16]
 800d0c6:	2f00      	cmp	r7, #0
 800d0c8:	d0a9      	beq.n	800d01e <__sflush_r+0x1a>
 800d0ca:	0793      	lsls	r3, r2, #30
 800d0cc:	680e      	ldr	r6, [r1, #0]
 800d0ce:	600f      	str	r7, [r1, #0]
 800d0d0:	bf0c      	ite	eq
 800d0d2:	694b      	ldreq	r3, [r1, #20]
 800d0d4:	2300      	movne	r3, #0
 800d0d6:	eba6 0807 	sub.w	r8, r6, r7
 800d0da:	608b      	str	r3, [r1, #8]
 800d0dc:	f1b8 0f00 	cmp.w	r8, #0
 800d0e0:	dd9d      	ble.n	800d01e <__sflush_r+0x1a>
 800d0e2:	4643      	mov	r3, r8
 800d0e4:	463a      	mov	r2, r7
 800d0e6:	6a21      	ldr	r1, [r4, #32]
 800d0e8:	4628      	mov	r0, r5
 800d0ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d0ec:	47b0      	blx	r6
 800d0ee:	2800      	cmp	r0, #0
 800d0f0:	dc06      	bgt.n	800d100 <__sflush_r+0xfc>
 800d0f2:	89a3      	ldrh	r3, [r4, #12]
 800d0f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d0f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d0fc:	81a3      	strh	r3, [r4, #12]
 800d0fe:	e78f      	b.n	800d020 <__sflush_r+0x1c>
 800d100:	4407      	add	r7, r0
 800d102:	eba8 0800 	sub.w	r8, r8, r0
 800d106:	e7e9      	b.n	800d0dc <__sflush_r+0xd8>
 800d108:	dfbffffe 	.word	0xdfbffffe

0800d10c <_fflush_r>:
 800d10c:	b538      	push	{r3, r4, r5, lr}
 800d10e:	690b      	ldr	r3, [r1, #16]
 800d110:	4605      	mov	r5, r0
 800d112:	460c      	mov	r4, r1
 800d114:	b913      	cbnz	r3, 800d11c <_fflush_r+0x10>
 800d116:	2500      	movs	r5, #0
 800d118:	4628      	mov	r0, r5
 800d11a:	bd38      	pop	{r3, r4, r5, pc}
 800d11c:	b118      	cbz	r0, 800d126 <_fflush_r+0x1a>
 800d11e:	6a03      	ldr	r3, [r0, #32]
 800d120:	b90b      	cbnz	r3, 800d126 <_fflush_r+0x1a>
 800d122:	f7fd fe93 	bl	800ae4c <__sinit>
 800d126:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d0f3      	beq.n	800d116 <_fflush_r+0xa>
 800d12e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d130:	07d0      	lsls	r0, r2, #31
 800d132:	d404      	bmi.n	800d13e <_fflush_r+0x32>
 800d134:	0599      	lsls	r1, r3, #22
 800d136:	d402      	bmi.n	800d13e <_fflush_r+0x32>
 800d138:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d13a:	f7fe fee0 	bl	800befe <__retarget_lock_acquire_recursive>
 800d13e:	4628      	mov	r0, r5
 800d140:	4621      	mov	r1, r4
 800d142:	f7ff ff5f 	bl	800d004 <__sflush_r>
 800d146:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d148:	4605      	mov	r5, r0
 800d14a:	07da      	lsls	r2, r3, #31
 800d14c:	d4e4      	bmi.n	800d118 <_fflush_r+0xc>
 800d14e:	89a3      	ldrh	r3, [r4, #12]
 800d150:	059b      	lsls	r3, r3, #22
 800d152:	d4e1      	bmi.n	800d118 <_fflush_r+0xc>
 800d154:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d156:	f7fe fed3 	bl	800bf00 <__retarget_lock_release_recursive>
 800d15a:	e7dd      	b.n	800d118 <_fflush_r+0xc>

0800d15c <__malloc_lock>:
 800d15c:	4801      	ldr	r0, [pc, #4]	; (800d164 <__malloc_lock+0x8>)
 800d15e:	f7fe bece 	b.w	800befe <__retarget_lock_acquire_recursive>
 800d162:	bf00      	nop
 800d164:	20000650 	.word	0x20000650

0800d168 <__malloc_unlock>:
 800d168:	4801      	ldr	r0, [pc, #4]	; (800d170 <__malloc_unlock+0x8>)
 800d16a:	f7fe bec9 	b.w	800bf00 <__retarget_lock_release_recursive>
 800d16e:	bf00      	nop
 800d170:	20000650 	.word	0x20000650

0800d174 <_Balloc>:
 800d174:	b570      	push	{r4, r5, r6, lr}
 800d176:	69c6      	ldr	r6, [r0, #28]
 800d178:	4604      	mov	r4, r0
 800d17a:	460d      	mov	r5, r1
 800d17c:	b976      	cbnz	r6, 800d19c <_Balloc+0x28>
 800d17e:	2010      	movs	r0, #16
 800d180:	f7ff fcf4 	bl	800cb6c <malloc>
 800d184:	4602      	mov	r2, r0
 800d186:	61e0      	str	r0, [r4, #28]
 800d188:	b920      	cbnz	r0, 800d194 <_Balloc+0x20>
 800d18a:	4b18      	ldr	r3, [pc, #96]	; (800d1ec <_Balloc+0x78>)
 800d18c:	216b      	movs	r1, #107	; 0x6b
 800d18e:	4818      	ldr	r0, [pc, #96]	; (800d1f0 <_Balloc+0x7c>)
 800d190:	f7fe fedc 	bl	800bf4c <__assert_func>
 800d194:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d198:	6006      	str	r6, [r0, #0]
 800d19a:	60c6      	str	r6, [r0, #12]
 800d19c:	69e6      	ldr	r6, [r4, #28]
 800d19e:	68f3      	ldr	r3, [r6, #12]
 800d1a0:	b183      	cbz	r3, 800d1c4 <_Balloc+0x50>
 800d1a2:	69e3      	ldr	r3, [r4, #28]
 800d1a4:	68db      	ldr	r3, [r3, #12]
 800d1a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d1aa:	b9b8      	cbnz	r0, 800d1dc <_Balloc+0x68>
 800d1ac:	2101      	movs	r1, #1
 800d1ae:	4620      	mov	r0, r4
 800d1b0:	fa01 f605 	lsl.w	r6, r1, r5
 800d1b4:	1d72      	adds	r2, r6, #5
 800d1b6:	0092      	lsls	r2, r2, #2
 800d1b8:	f000 fec3 	bl	800df42 <_calloc_r>
 800d1bc:	b160      	cbz	r0, 800d1d8 <_Balloc+0x64>
 800d1be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d1c2:	e00e      	b.n	800d1e2 <_Balloc+0x6e>
 800d1c4:	2221      	movs	r2, #33	; 0x21
 800d1c6:	2104      	movs	r1, #4
 800d1c8:	4620      	mov	r0, r4
 800d1ca:	f000 feba 	bl	800df42 <_calloc_r>
 800d1ce:	69e3      	ldr	r3, [r4, #28]
 800d1d0:	60f0      	str	r0, [r6, #12]
 800d1d2:	68db      	ldr	r3, [r3, #12]
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d1e4      	bne.n	800d1a2 <_Balloc+0x2e>
 800d1d8:	2000      	movs	r0, #0
 800d1da:	bd70      	pop	{r4, r5, r6, pc}
 800d1dc:	6802      	ldr	r2, [r0, #0]
 800d1de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d1e2:	2300      	movs	r3, #0
 800d1e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d1e8:	e7f7      	b.n	800d1da <_Balloc+0x66>
 800d1ea:	bf00      	nop
 800d1ec:	0800e5b8 	.word	0x0800e5b8
 800d1f0:	0800e812 	.word	0x0800e812

0800d1f4 <_Bfree>:
 800d1f4:	b570      	push	{r4, r5, r6, lr}
 800d1f6:	69c6      	ldr	r6, [r0, #28]
 800d1f8:	4605      	mov	r5, r0
 800d1fa:	460c      	mov	r4, r1
 800d1fc:	b976      	cbnz	r6, 800d21c <_Bfree+0x28>
 800d1fe:	2010      	movs	r0, #16
 800d200:	f7ff fcb4 	bl	800cb6c <malloc>
 800d204:	4602      	mov	r2, r0
 800d206:	61e8      	str	r0, [r5, #28]
 800d208:	b920      	cbnz	r0, 800d214 <_Bfree+0x20>
 800d20a:	4b09      	ldr	r3, [pc, #36]	; (800d230 <_Bfree+0x3c>)
 800d20c:	218f      	movs	r1, #143	; 0x8f
 800d20e:	4809      	ldr	r0, [pc, #36]	; (800d234 <_Bfree+0x40>)
 800d210:	f7fe fe9c 	bl	800bf4c <__assert_func>
 800d214:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d218:	6006      	str	r6, [r0, #0]
 800d21a:	60c6      	str	r6, [r0, #12]
 800d21c:	b13c      	cbz	r4, 800d22e <_Bfree+0x3a>
 800d21e:	69eb      	ldr	r3, [r5, #28]
 800d220:	6862      	ldr	r2, [r4, #4]
 800d222:	68db      	ldr	r3, [r3, #12]
 800d224:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d228:	6021      	str	r1, [r4, #0]
 800d22a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d22e:	bd70      	pop	{r4, r5, r6, pc}
 800d230:	0800e5b8 	.word	0x0800e5b8
 800d234:	0800e812 	.word	0x0800e812

0800d238 <__multadd>:
 800d238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d23c:	f101 0c14 	add.w	ip, r1, #20
 800d240:	4607      	mov	r7, r0
 800d242:	460c      	mov	r4, r1
 800d244:	461e      	mov	r6, r3
 800d246:	690d      	ldr	r5, [r1, #16]
 800d248:	2000      	movs	r0, #0
 800d24a:	f8dc 3000 	ldr.w	r3, [ip]
 800d24e:	3001      	adds	r0, #1
 800d250:	b299      	uxth	r1, r3
 800d252:	4285      	cmp	r5, r0
 800d254:	fb02 6101 	mla	r1, r2, r1, r6
 800d258:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d25c:	ea4f 4311 	mov.w	r3, r1, lsr #16
 800d260:	b289      	uxth	r1, r1
 800d262:	fb02 3306 	mla	r3, r2, r6, r3
 800d266:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d26a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d26e:	f84c 1b04 	str.w	r1, [ip], #4
 800d272:	dcea      	bgt.n	800d24a <__multadd+0x12>
 800d274:	b30e      	cbz	r6, 800d2ba <__multadd+0x82>
 800d276:	68a3      	ldr	r3, [r4, #8]
 800d278:	42ab      	cmp	r3, r5
 800d27a:	dc19      	bgt.n	800d2b0 <__multadd+0x78>
 800d27c:	6861      	ldr	r1, [r4, #4]
 800d27e:	4638      	mov	r0, r7
 800d280:	3101      	adds	r1, #1
 800d282:	f7ff ff77 	bl	800d174 <_Balloc>
 800d286:	4680      	mov	r8, r0
 800d288:	b928      	cbnz	r0, 800d296 <__multadd+0x5e>
 800d28a:	4602      	mov	r2, r0
 800d28c:	4b0c      	ldr	r3, [pc, #48]	; (800d2c0 <__multadd+0x88>)
 800d28e:	21ba      	movs	r1, #186	; 0xba
 800d290:	480c      	ldr	r0, [pc, #48]	; (800d2c4 <__multadd+0x8c>)
 800d292:	f7fe fe5b 	bl	800bf4c <__assert_func>
 800d296:	6922      	ldr	r2, [r4, #16]
 800d298:	f104 010c 	add.w	r1, r4, #12
 800d29c:	300c      	adds	r0, #12
 800d29e:	3202      	adds	r2, #2
 800d2a0:	0092      	lsls	r2, r2, #2
 800d2a2:	f7fe fe2e 	bl	800bf02 <memcpy>
 800d2a6:	4621      	mov	r1, r4
 800d2a8:	4644      	mov	r4, r8
 800d2aa:	4638      	mov	r0, r7
 800d2ac:	f7ff ffa2 	bl	800d1f4 <_Bfree>
 800d2b0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d2b4:	3501      	adds	r5, #1
 800d2b6:	615e      	str	r6, [r3, #20]
 800d2b8:	6125      	str	r5, [r4, #16]
 800d2ba:	4620      	mov	r0, r4
 800d2bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2c0:	0800e76e 	.word	0x0800e76e
 800d2c4:	0800e812 	.word	0x0800e812

0800d2c8 <__s2b>:
 800d2c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d2cc:	4615      	mov	r5, r2
 800d2ce:	461f      	mov	r7, r3
 800d2d0:	2209      	movs	r2, #9
 800d2d2:	3308      	adds	r3, #8
 800d2d4:	460c      	mov	r4, r1
 800d2d6:	4606      	mov	r6, r0
 800d2d8:	2100      	movs	r1, #0
 800d2da:	fb93 f3f2 	sdiv	r3, r3, r2
 800d2de:	2201      	movs	r2, #1
 800d2e0:	429a      	cmp	r2, r3
 800d2e2:	db09      	blt.n	800d2f8 <__s2b+0x30>
 800d2e4:	4630      	mov	r0, r6
 800d2e6:	f7ff ff45 	bl	800d174 <_Balloc>
 800d2ea:	b940      	cbnz	r0, 800d2fe <__s2b+0x36>
 800d2ec:	4602      	mov	r2, r0
 800d2ee:	4b19      	ldr	r3, [pc, #100]	; (800d354 <__s2b+0x8c>)
 800d2f0:	21d3      	movs	r1, #211	; 0xd3
 800d2f2:	4819      	ldr	r0, [pc, #100]	; (800d358 <__s2b+0x90>)
 800d2f4:	f7fe fe2a 	bl	800bf4c <__assert_func>
 800d2f8:	0052      	lsls	r2, r2, #1
 800d2fa:	3101      	adds	r1, #1
 800d2fc:	e7f0      	b.n	800d2e0 <__s2b+0x18>
 800d2fe:	9b08      	ldr	r3, [sp, #32]
 800d300:	2d09      	cmp	r5, #9
 800d302:	6143      	str	r3, [r0, #20]
 800d304:	f04f 0301 	mov.w	r3, #1
 800d308:	6103      	str	r3, [r0, #16]
 800d30a:	dd16      	ble.n	800d33a <__s2b+0x72>
 800d30c:	f104 0909 	add.w	r9, r4, #9
 800d310:	442c      	add	r4, r5
 800d312:	46c8      	mov	r8, r9
 800d314:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d318:	4601      	mov	r1, r0
 800d31a:	220a      	movs	r2, #10
 800d31c:	4630      	mov	r0, r6
 800d31e:	3b30      	subs	r3, #48	; 0x30
 800d320:	f7ff ff8a 	bl	800d238 <__multadd>
 800d324:	45a0      	cmp	r8, r4
 800d326:	d1f5      	bne.n	800d314 <__s2b+0x4c>
 800d328:	f1a5 0408 	sub.w	r4, r5, #8
 800d32c:	444c      	add	r4, r9
 800d32e:	1b2d      	subs	r5, r5, r4
 800d330:	1963      	adds	r3, r4, r5
 800d332:	42bb      	cmp	r3, r7
 800d334:	db04      	blt.n	800d340 <__s2b+0x78>
 800d336:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d33a:	340a      	adds	r4, #10
 800d33c:	2509      	movs	r5, #9
 800d33e:	e7f6      	b.n	800d32e <__s2b+0x66>
 800d340:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d344:	4601      	mov	r1, r0
 800d346:	220a      	movs	r2, #10
 800d348:	4630      	mov	r0, r6
 800d34a:	3b30      	subs	r3, #48	; 0x30
 800d34c:	f7ff ff74 	bl	800d238 <__multadd>
 800d350:	e7ee      	b.n	800d330 <__s2b+0x68>
 800d352:	bf00      	nop
 800d354:	0800e76e 	.word	0x0800e76e
 800d358:	0800e812 	.word	0x0800e812

0800d35c <__hi0bits>:
 800d35c:	0c03      	lsrs	r3, r0, #16
 800d35e:	041b      	lsls	r3, r3, #16
 800d360:	b9d3      	cbnz	r3, 800d398 <__hi0bits+0x3c>
 800d362:	0400      	lsls	r0, r0, #16
 800d364:	2310      	movs	r3, #16
 800d366:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d36a:	bf04      	itt	eq
 800d36c:	0200      	lsleq	r0, r0, #8
 800d36e:	3308      	addeq	r3, #8
 800d370:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d374:	bf04      	itt	eq
 800d376:	0100      	lsleq	r0, r0, #4
 800d378:	3304      	addeq	r3, #4
 800d37a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d37e:	bf04      	itt	eq
 800d380:	0080      	lsleq	r0, r0, #2
 800d382:	3302      	addeq	r3, #2
 800d384:	2800      	cmp	r0, #0
 800d386:	db05      	blt.n	800d394 <__hi0bits+0x38>
 800d388:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d38c:	f103 0301 	add.w	r3, r3, #1
 800d390:	bf08      	it	eq
 800d392:	2320      	moveq	r3, #32
 800d394:	4618      	mov	r0, r3
 800d396:	4770      	bx	lr
 800d398:	2300      	movs	r3, #0
 800d39a:	e7e4      	b.n	800d366 <__hi0bits+0xa>

0800d39c <__lo0bits>:
 800d39c:	6803      	ldr	r3, [r0, #0]
 800d39e:	f013 0207 	ands.w	r2, r3, #7
 800d3a2:	d00c      	beq.n	800d3be <__lo0bits+0x22>
 800d3a4:	07d9      	lsls	r1, r3, #31
 800d3a6:	d422      	bmi.n	800d3ee <__lo0bits+0x52>
 800d3a8:	079a      	lsls	r2, r3, #30
 800d3aa:	bf47      	ittee	mi
 800d3ac:	085b      	lsrmi	r3, r3, #1
 800d3ae:	2201      	movmi	r2, #1
 800d3b0:	089b      	lsrpl	r3, r3, #2
 800d3b2:	2202      	movpl	r2, #2
 800d3b4:	bf4c      	ite	mi
 800d3b6:	6003      	strmi	r3, [r0, #0]
 800d3b8:	6003      	strpl	r3, [r0, #0]
 800d3ba:	4610      	mov	r0, r2
 800d3bc:	4770      	bx	lr
 800d3be:	b299      	uxth	r1, r3
 800d3c0:	b909      	cbnz	r1, 800d3c6 <__lo0bits+0x2a>
 800d3c2:	0c1b      	lsrs	r3, r3, #16
 800d3c4:	2210      	movs	r2, #16
 800d3c6:	b2d9      	uxtb	r1, r3
 800d3c8:	b909      	cbnz	r1, 800d3ce <__lo0bits+0x32>
 800d3ca:	3208      	adds	r2, #8
 800d3cc:	0a1b      	lsrs	r3, r3, #8
 800d3ce:	0719      	lsls	r1, r3, #28
 800d3d0:	bf04      	itt	eq
 800d3d2:	091b      	lsreq	r3, r3, #4
 800d3d4:	3204      	addeq	r2, #4
 800d3d6:	0799      	lsls	r1, r3, #30
 800d3d8:	bf04      	itt	eq
 800d3da:	089b      	lsreq	r3, r3, #2
 800d3dc:	3202      	addeq	r2, #2
 800d3de:	07d9      	lsls	r1, r3, #31
 800d3e0:	d403      	bmi.n	800d3ea <__lo0bits+0x4e>
 800d3e2:	085b      	lsrs	r3, r3, #1
 800d3e4:	f102 0201 	add.w	r2, r2, #1
 800d3e8:	d003      	beq.n	800d3f2 <__lo0bits+0x56>
 800d3ea:	6003      	str	r3, [r0, #0]
 800d3ec:	e7e5      	b.n	800d3ba <__lo0bits+0x1e>
 800d3ee:	2200      	movs	r2, #0
 800d3f0:	e7e3      	b.n	800d3ba <__lo0bits+0x1e>
 800d3f2:	2220      	movs	r2, #32
 800d3f4:	e7e1      	b.n	800d3ba <__lo0bits+0x1e>
	...

0800d3f8 <__i2b>:
 800d3f8:	b510      	push	{r4, lr}
 800d3fa:	460c      	mov	r4, r1
 800d3fc:	2101      	movs	r1, #1
 800d3fe:	f7ff feb9 	bl	800d174 <_Balloc>
 800d402:	4602      	mov	r2, r0
 800d404:	b928      	cbnz	r0, 800d412 <__i2b+0x1a>
 800d406:	4b05      	ldr	r3, [pc, #20]	; (800d41c <__i2b+0x24>)
 800d408:	f240 1145 	movw	r1, #325	; 0x145
 800d40c:	4804      	ldr	r0, [pc, #16]	; (800d420 <__i2b+0x28>)
 800d40e:	f7fe fd9d 	bl	800bf4c <__assert_func>
 800d412:	2301      	movs	r3, #1
 800d414:	6144      	str	r4, [r0, #20]
 800d416:	6103      	str	r3, [r0, #16]
 800d418:	bd10      	pop	{r4, pc}
 800d41a:	bf00      	nop
 800d41c:	0800e76e 	.word	0x0800e76e
 800d420:	0800e812 	.word	0x0800e812

0800d424 <__multiply>:
 800d424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d428:	4691      	mov	r9, r2
 800d42a:	690a      	ldr	r2, [r1, #16]
 800d42c:	460c      	mov	r4, r1
 800d42e:	b085      	sub	sp, #20
 800d430:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d434:	429a      	cmp	r2, r3
 800d436:	bfbe      	ittt	lt
 800d438:	460b      	movlt	r3, r1
 800d43a:	464c      	movlt	r4, r9
 800d43c:	4699      	movlt	r9, r3
 800d43e:	6927      	ldr	r7, [r4, #16]
 800d440:	68a3      	ldr	r3, [r4, #8]
 800d442:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d446:	6861      	ldr	r1, [r4, #4]
 800d448:	eb07 060a 	add.w	r6, r7, sl
 800d44c:	42b3      	cmp	r3, r6
 800d44e:	bfb8      	it	lt
 800d450:	3101      	addlt	r1, #1
 800d452:	f7ff fe8f 	bl	800d174 <_Balloc>
 800d456:	b930      	cbnz	r0, 800d466 <__multiply+0x42>
 800d458:	4602      	mov	r2, r0
 800d45a:	4b45      	ldr	r3, [pc, #276]	; (800d570 <__multiply+0x14c>)
 800d45c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800d460:	4844      	ldr	r0, [pc, #272]	; (800d574 <__multiply+0x150>)
 800d462:	f7fe fd73 	bl	800bf4c <__assert_func>
 800d466:	f100 0514 	add.w	r5, r0, #20
 800d46a:	2200      	movs	r2, #0
 800d46c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d470:	462b      	mov	r3, r5
 800d472:	4543      	cmp	r3, r8
 800d474:	d321      	bcc.n	800d4ba <__multiply+0x96>
 800d476:	f104 0314 	add.w	r3, r4, #20
 800d47a:	f104 0115 	add.w	r1, r4, #21
 800d47e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d482:	f109 0314 	add.w	r3, r9, #20
 800d486:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d48a:	9202      	str	r2, [sp, #8]
 800d48c:	1b3a      	subs	r2, r7, r4
 800d48e:	3a15      	subs	r2, #21
 800d490:	f022 0203 	bic.w	r2, r2, #3
 800d494:	3204      	adds	r2, #4
 800d496:	428f      	cmp	r7, r1
 800d498:	bf38      	it	cc
 800d49a:	2204      	movcc	r2, #4
 800d49c:	9201      	str	r2, [sp, #4]
 800d49e:	9a02      	ldr	r2, [sp, #8]
 800d4a0:	9303      	str	r3, [sp, #12]
 800d4a2:	429a      	cmp	r2, r3
 800d4a4:	d80c      	bhi.n	800d4c0 <__multiply+0x9c>
 800d4a6:	2e00      	cmp	r6, #0
 800d4a8:	dd03      	ble.n	800d4b2 <__multiply+0x8e>
 800d4aa:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d05b      	beq.n	800d56a <__multiply+0x146>
 800d4b2:	6106      	str	r6, [r0, #16]
 800d4b4:	b005      	add	sp, #20
 800d4b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4ba:	f843 2b04 	str.w	r2, [r3], #4
 800d4be:	e7d8      	b.n	800d472 <__multiply+0x4e>
 800d4c0:	f8b3 a000 	ldrh.w	sl, [r3]
 800d4c4:	f1ba 0f00 	cmp.w	sl, #0
 800d4c8:	d024      	beq.n	800d514 <__multiply+0xf0>
 800d4ca:	f104 0e14 	add.w	lr, r4, #20
 800d4ce:	46a9      	mov	r9, r5
 800d4d0:	f04f 0c00 	mov.w	ip, #0
 800d4d4:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d4d8:	f8d9 1000 	ldr.w	r1, [r9]
 800d4dc:	fa1f fb82 	uxth.w	fp, r2
 800d4e0:	4577      	cmp	r7, lr
 800d4e2:	b289      	uxth	r1, r1
 800d4e4:	fb0a 110b 	mla	r1, sl, fp, r1
 800d4e8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d4ec:	f8d9 2000 	ldr.w	r2, [r9]
 800d4f0:	4461      	add	r1, ip
 800d4f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d4f6:	fb0a c20b 	mla	r2, sl, fp, ip
 800d4fa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d4fe:	b289      	uxth	r1, r1
 800d500:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d504:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d508:	f849 1b04 	str.w	r1, [r9], #4
 800d50c:	d8e2      	bhi.n	800d4d4 <__multiply+0xb0>
 800d50e:	9a01      	ldr	r2, [sp, #4]
 800d510:	f845 c002 	str.w	ip, [r5, r2]
 800d514:	9a03      	ldr	r2, [sp, #12]
 800d516:	3304      	adds	r3, #4
 800d518:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d51c:	f1b9 0f00 	cmp.w	r9, #0
 800d520:	d021      	beq.n	800d566 <__multiply+0x142>
 800d522:	6829      	ldr	r1, [r5, #0]
 800d524:	f104 0c14 	add.w	ip, r4, #20
 800d528:	46ae      	mov	lr, r5
 800d52a:	f04f 0a00 	mov.w	sl, #0
 800d52e:	f8bc b000 	ldrh.w	fp, [ip]
 800d532:	b289      	uxth	r1, r1
 800d534:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d538:	fb09 220b 	mla	r2, r9, fp, r2
 800d53c:	4452      	add	r2, sl
 800d53e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d542:	f84e 1b04 	str.w	r1, [lr], #4
 800d546:	f85c 1b04 	ldr.w	r1, [ip], #4
 800d54a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d54e:	f8be 1000 	ldrh.w	r1, [lr]
 800d552:	4567      	cmp	r7, ip
 800d554:	fb09 110a 	mla	r1, r9, sl, r1
 800d558:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800d55c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d560:	d8e5      	bhi.n	800d52e <__multiply+0x10a>
 800d562:	9a01      	ldr	r2, [sp, #4]
 800d564:	50a9      	str	r1, [r5, r2]
 800d566:	3504      	adds	r5, #4
 800d568:	e799      	b.n	800d49e <__multiply+0x7a>
 800d56a:	3e01      	subs	r6, #1
 800d56c:	e79b      	b.n	800d4a6 <__multiply+0x82>
 800d56e:	bf00      	nop
 800d570:	0800e76e 	.word	0x0800e76e
 800d574:	0800e812 	.word	0x0800e812

0800d578 <__pow5mult>:
 800d578:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d57c:	4615      	mov	r5, r2
 800d57e:	f012 0203 	ands.w	r2, r2, #3
 800d582:	4606      	mov	r6, r0
 800d584:	460f      	mov	r7, r1
 800d586:	d007      	beq.n	800d598 <__pow5mult+0x20>
 800d588:	3a01      	subs	r2, #1
 800d58a:	4c25      	ldr	r4, [pc, #148]	; (800d620 <__pow5mult+0xa8>)
 800d58c:	2300      	movs	r3, #0
 800d58e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d592:	f7ff fe51 	bl	800d238 <__multadd>
 800d596:	4607      	mov	r7, r0
 800d598:	10ad      	asrs	r5, r5, #2
 800d59a:	d03d      	beq.n	800d618 <__pow5mult+0xa0>
 800d59c:	69f4      	ldr	r4, [r6, #28]
 800d59e:	b97c      	cbnz	r4, 800d5c0 <__pow5mult+0x48>
 800d5a0:	2010      	movs	r0, #16
 800d5a2:	f7ff fae3 	bl	800cb6c <malloc>
 800d5a6:	4602      	mov	r2, r0
 800d5a8:	61f0      	str	r0, [r6, #28]
 800d5aa:	b928      	cbnz	r0, 800d5b8 <__pow5mult+0x40>
 800d5ac:	4b1d      	ldr	r3, [pc, #116]	; (800d624 <__pow5mult+0xac>)
 800d5ae:	f240 11b3 	movw	r1, #435	; 0x1b3
 800d5b2:	481d      	ldr	r0, [pc, #116]	; (800d628 <__pow5mult+0xb0>)
 800d5b4:	f7fe fcca 	bl	800bf4c <__assert_func>
 800d5b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d5bc:	6004      	str	r4, [r0, #0]
 800d5be:	60c4      	str	r4, [r0, #12]
 800d5c0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800d5c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d5c8:	b94c      	cbnz	r4, 800d5de <__pow5mult+0x66>
 800d5ca:	f240 2171 	movw	r1, #625	; 0x271
 800d5ce:	4630      	mov	r0, r6
 800d5d0:	f7ff ff12 	bl	800d3f8 <__i2b>
 800d5d4:	2300      	movs	r3, #0
 800d5d6:	4604      	mov	r4, r0
 800d5d8:	f8c8 0008 	str.w	r0, [r8, #8]
 800d5dc:	6003      	str	r3, [r0, #0]
 800d5de:	f04f 0900 	mov.w	r9, #0
 800d5e2:	07eb      	lsls	r3, r5, #31
 800d5e4:	d50a      	bpl.n	800d5fc <__pow5mult+0x84>
 800d5e6:	4639      	mov	r1, r7
 800d5e8:	4622      	mov	r2, r4
 800d5ea:	4630      	mov	r0, r6
 800d5ec:	f7ff ff1a 	bl	800d424 <__multiply>
 800d5f0:	4680      	mov	r8, r0
 800d5f2:	4639      	mov	r1, r7
 800d5f4:	4630      	mov	r0, r6
 800d5f6:	4647      	mov	r7, r8
 800d5f8:	f7ff fdfc 	bl	800d1f4 <_Bfree>
 800d5fc:	106d      	asrs	r5, r5, #1
 800d5fe:	d00b      	beq.n	800d618 <__pow5mult+0xa0>
 800d600:	6820      	ldr	r0, [r4, #0]
 800d602:	b938      	cbnz	r0, 800d614 <__pow5mult+0x9c>
 800d604:	4622      	mov	r2, r4
 800d606:	4621      	mov	r1, r4
 800d608:	4630      	mov	r0, r6
 800d60a:	f7ff ff0b 	bl	800d424 <__multiply>
 800d60e:	6020      	str	r0, [r4, #0]
 800d610:	f8c0 9000 	str.w	r9, [r0]
 800d614:	4604      	mov	r4, r0
 800d616:	e7e4      	b.n	800d5e2 <__pow5mult+0x6a>
 800d618:	4638      	mov	r0, r7
 800d61a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d61e:	bf00      	nop
 800d620:	0800e960 	.word	0x0800e960
 800d624:	0800e5b8 	.word	0x0800e5b8
 800d628:	0800e812 	.word	0x0800e812

0800d62c <__lshift>:
 800d62c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d630:	460c      	mov	r4, r1
 800d632:	4607      	mov	r7, r0
 800d634:	4691      	mov	r9, r2
 800d636:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d63a:	6923      	ldr	r3, [r4, #16]
 800d63c:	6849      	ldr	r1, [r1, #4]
 800d63e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d642:	68a3      	ldr	r3, [r4, #8]
 800d644:	f108 0601 	add.w	r6, r8, #1
 800d648:	42b3      	cmp	r3, r6
 800d64a:	db0b      	blt.n	800d664 <__lshift+0x38>
 800d64c:	4638      	mov	r0, r7
 800d64e:	f7ff fd91 	bl	800d174 <_Balloc>
 800d652:	4605      	mov	r5, r0
 800d654:	b948      	cbnz	r0, 800d66a <__lshift+0x3e>
 800d656:	4602      	mov	r2, r0
 800d658:	4b28      	ldr	r3, [pc, #160]	; (800d6fc <__lshift+0xd0>)
 800d65a:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800d65e:	4828      	ldr	r0, [pc, #160]	; (800d700 <__lshift+0xd4>)
 800d660:	f7fe fc74 	bl	800bf4c <__assert_func>
 800d664:	3101      	adds	r1, #1
 800d666:	005b      	lsls	r3, r3, #1
 800d668:	e7ee      	b.n	800d648 <__lshift+0x1c>
 800d66a:	2300      	movs	r3, #0
 800d66c:	f100 0114 	add.w	r1, r0, #20
 800d670:	f100 0210 	add.w	r2, r0, #16
 800d674:	4618      	mov	r0, r3
 800d676:	4553      	cmp	r3, sl
 800d678:	db33      	blt.n	800d6e2 <__lshift+0xb6>
 800d67a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d67e:	f104 0314 	add.w	r3, r4, #20
 800d682:	6920      	ldr	r0, [r4, #16]
 800d684:	f019 091f 	ands.w	r9, r9, #31
 800d688:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d68c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d690:	d02b      	beq.n	800d6ea <__lshift+0xbe>
 800d692:	f1c9 0e20 	rsb	lr, r9, #32
 800d696:	468a      	mov	sl, r1
 800d698:	2200      	movs	r2, #0
 800d69a:	6818      	ldr	r0, [r3, #0]
 800d69c:	fa00 f009 	lsl.w	r0, r0, r9
 800d6a0:	4310      	orrs	r0, r2
 800d6a2:	f84a 0b04 	str.w	r0, [sl], #4
 800d6a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d6aa:	459c      	cmp	ip, r3
 800d6ac:	fa22 f20e 	lsr.w	r2, r2, lr
 800d6b0:	d8f3      	bhi.n	800d69a <__lshift+0x6e>
 800d6b2:	ebac 0304 	sub.w	r3, ip, r4
 800d6b6:	f104 0015 	add.w	r0, r4, #21
 800d6ba:	3b15      	subs	r3, #21
 800d6bc:	f023 0303 	bic.w	r3, r3, #3
 800d6c0:	3304      	adds	r3, #4
 800d6c2:	4584      	cmp	ip, r0
 800d6c4:	bf38      	it	cc
 800d6c6:	2304      	movcc	r3, #4
 800d6c8:	50ca      	str	r2, [r1, r3]
 800d6ca:	b10a      	cbz	r2, 800d6d0 <__lshift+0xa4>
 800d6cc:	f108 0602 	add.w	r6, r8, #2
 800d6d0:	3e01      	subs	r6, #1
 800d6d2:	4638      	mov	r0, r7
 800d6d4:	4621      	mov	r1, r4
 800d6d6:	612e      	str	r6, [r5, #16]
 800d6d8:	f7ff fd8c 	bl	800d1f4 <_Bfree>
 800d6dc:	4628      	mov	r0, r5
 800d6de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6e2:	3301      	adds	r3, #1
 800d6e4:	f842 0f04 	str.w	r0, [r2, #4]!
 800d6e8:	e7c5      	b.n	800d676 <__lshift+0x4a>
 800d6ea:	3904      	subs	r1, #4
 800d6ec:	f853 2b04 	ldr.w	r2, [r3], #4
 800d6f0:	459c      	cmp	ip, r3
 800d6f2:	f841 2f04 	str.w	r2, [r1, #4]!
 800d6f6:	d8f9      	bhi.n	800d6ec <__lshift+0xc0>
 800d6f8:	e7ea      	b.n	800d6d0 <__lshift+0xa4>
 800d6fa:	bf00      	nop
 800d6fc:	0800e76e 	.word	0x0800e76e
 800d700:	0800e812 	.word	0x0800e812

0800d704 <__mcmp>:
 800d704:	6902      	ldr	r2, [r0, #16]
 800d706:	b530      	push	{r4, r5, lr}
 800d708:	690c      	ldr	r4, [r1, #16]
 800d70a:	1b12      	subs	r2, r2, r4
 800d70c:	d10e      	bne.n	800d72c <__mcmp+0x28>
 800d70e:	f100 0314 	add.w	r3, r0, #20
 800d712:	3114      	adds	r1, #20
 800d714:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d718:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d71c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d720:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d724:	42a5      	cmp	r5, r4
 800d726:	d003      	beq.n	800d730 <__mcmp+0x2c>
 800d728:	d305      	bcc.n	800d736 <__mcmp+0x32>
 800d72a:	2201      	movs	r2, #1
 800d72c:	4610      	mov	r0, r2
 800d72e:	bd30      	pop	{r4, r5, pc}
 800d730:	4283      	cmp	r3, r0
 800d732:	d3f3      	bcc.n	800d71c <__mcmp+0x18>
 800d734:	e7fa      	b.n	800d72c <__mcmp+0x28>
 800d736:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d73a:	e7f7      	b.n	800d72c <__mcmp+0x28>

0800d73c <__mdiff>:
 800d73c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d740:	460c      	mov	r4, r1
 800d742:	4606      	mov	r6, r0
 800d744:	4611      	mov	r1, r2
 800d746:	4692      	mov	sl, r2
 800d748:	4620      	mov	r0, r4
 800d74a:	f7ff ffdb 	bl	800d704 <__mcmp>
 800d74e:	1e05      	subs	r5, r0, #0
 800d750:	d110      	bne.n	800d774 <__mdiff+0x38>
 800d752:	4629      	mov	r1, r5
 800d754:	4630      	mov	r0, r6
 800d756:	f7ff fd0d 	bl	800d174 <_Balloc>
 800d75a:	b930      	cbnz	r0, 800d76a <__mdiff+0x2e>
 800d75c:	4b3d      	ldr	r3, [pc, #244]	; (800d854 <__mdiff+0x118>)
 800d75e:	4602      	mov	r2, r0
 800d760:	f240 2137 	movw	r1, #567	; 0x237
 800d764:	483c      	ldr	r0, [pc, #240]	; (800d858 <__mdiff+0x11c>)
 800d766:	f7fe fbf1 	bl	800bf4c <__assert_func>
 800d76a:	2301      	movs	r3, #1
 800d76c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d770:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d774:	bfa4      	itt	ge
 800d776:	4653      	movge	r3, sl
 800d778:	46a2      	movge	sl, r4
 800d77a:	4630      	mov	r0, r6
 800d77c:	bfa8      	it	ge
 800d77e:	2500      	movge	r5, #0
 800d780:	f8da 1004 	ldr.w	r1, [sl, #4]
 800d784:	bfac      	ite	ge
 800d786:	461c      	movge	r4, r3
 800d788:	2501      	movlt	r5, #1
 800d78a:	f7ff fcf3 	bl	800d174 <_Balloc>
 800d78e:	b920      	cbnz	r0, 800d79a <__mdiff+0x5e>
 800d790:	4b30      	ldr	r3, [pc, #192]	; (800d854 <__mdiff+0x118>)
 800d792:	4602      	mov	r2, r0
 800d794:	f240 2145 	movw	r1, #581	; 0x245
 800d798:	e7e4      	b.n	800d764 <__mdiff+0x28>
 800d79a:	f8da 7010 	ldr.w	r7, [sl, #16]
 800d79e:	f104 0914 	add.w	r9, r4, #20
 800d7a2:	6926      	ldr	r6, [r4, #16]
 800d7a4:	f100 0814 	add.w	r8, r0, #20
 800d7a8:	60c5      	str	r5, [r0, #12]
 800d7aa:	f10a 0514 	add.w	r5, sl, #20
 800d7ae:	f10a 0210 	add.w	r2, sl, #16
 800d7b2:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d7b6:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 800d7ba:	46c2      	mov	sl, r8
 800d7bc:	f04f 0c00 	mov.w	ip, #0
 800d7c0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d7c4:	f859 3b04 	ldr.w	r3, [r9], #4
 800d7c8:	fa1f f18b 	uxth.w	r1, fp
 800d7cc:	454e      	cmp	r6, r9
 800d7ce:	4461      	add	r1, ip
 800d7d0:	fa1f fc83 	uxth.w	ip, r3
 800d7d4:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800d7d8:	eba1 010c 	sub.w	r1, r1, ip
 800d7dc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d7e0:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800d7e4:	b289      	uxth	r1, r1
 800d7e6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800d7ea:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800d7ee:	f84a 1b04 	str.w	r1, [sl], #4
 800d7f2:	d8e5      	bhi.n	800d7c0 <__mdiff+0x84>
 800d7f4:	1b33      	subs	r3, r6, r4
 800d7f6:	3415      	adds	r4, #21
 800d7f8:	3b15      	subs	r3, #21
 800d7fa:	f023 0303 	bic.w	r3, r3, #3
 800d7fe:	3304      	adds	r3, #4
 800d800:	42a6      	cmp	r6, r4
 800d802:	bf38      	it	cc
 800d804:	2304      	movcc	r3, #4
 800d806:	441d      	add	r5, r3
 800d808:	4443      	add	r3, r8
 800d80a:	462c      	mov	r4, r5
 800d80c:	461e      	mov	r6, r3
 800d80e:	4574      	cmp	r4, lr
 800d810:	d30e      	bcc.n	800d830 <__mdiff+0xf4>
 800d812:	f10e 0203 	add.w	r2, lr, #3
 800d816:	1b52      	subs	r2, r2, r5
 800d818:	3d03      	subs	r5, #3
 800d81a:	f022 0203 	bic.w	r2, r2, #3
 800d81e:	45ae      	cmp	lr, r5
 800d820:	bf38      	it	cc
 800d822:	2200      	movcc	r2, #0
 800d824:	4413      	add	r3, r2
 800d826:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800d82a:	b18a      	cbz	r2, 800d850 <__mdiff+0x114>
 800d82c:	6107      	str	r7, [r0, #16]
 800d82e:	e79f      	b.n	800d770 <__mdiff+0x34>
 800d830:	f854 8b04 	ldr.w	r8, [r4], #4
 800d834:	fa1f f288 	uxth.w	r2, r8
 800d838:	4462      	add	r2, ip
 800d83a:	1411      	asrs	r1, r2, #16
 800d83c:	b292      	uxth	r2, r2
 800d83e:	eb01 4118 	add.w	r1, r1, r8, lsr #16
 800d842:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800d846:	ea4f 4c21 	mov.w	ip, r1, asr #16
 800d84a:	f846 2b04 	str.w	r2, [r6], #4
 800d84e:	e7de      	b.n	800d80e <__mdiff+0xd2>
 800d850:	3f01      	subs	r7, #1
 800d852:	e7e8      	b.n	800d826 <__mdiff+0xea>
 800d854:	0800e76e 	.word	0x0800e76e
 800d858:	0800e812 	.word	0x0800e812

0800d85c <__ulp>:
 800d85c:	b082      	sub	sp, #8
 800d85e:	4b11      	ldr	r3, [pc, #68]	; (800d8a4 <__ulp+0x48>)
 800d860:	ed8d 0b00 	vstr	d0, [sp]
 800d864:	9a01      	ldr	r2, [sp, #4]
 800d866:	4013      	ands	r3, r2
 800d868:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	dc08      	bgt.n	800d882 <__ulp+0x26>
 800d870:	425b      	negs	r3, r3
 800d872:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800d876:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d87a:	da04      	bge.n	800d886 <__ulp+0x2a>
 800d87c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d880:	4113      	asrs	r3, r2
 800d882:	2200      	movs	r2, #0
 800d884:	e008      	b.n	800d898 <__ulp+0x3c>
 800d886:	f1a2 0314 	sub.w	r3, r2, #20
 800d88a:	2b1e      	cmp	r3, #30
 800d88c:	bfd6      	itet	le
 800d88e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800d892:	2201      	movgt	r2, #1
 800d894:	40da      	lsrle	r2, r3
 800d896:	2300      	movs	r3, #0
 800d898:	4619      	mov	r1, r3
 800d89a:	4610      	mov	r0, r2
 800d89c:	ec41 0b10 	vmov	d0, r0, r1
 800d8a0:	b002      	add	sp, #8
 800d8a2:	4770      	bx	lr
 800d8a4:	7ff00000 	.word	0x7ff00000

0800d8a8 <__b2d>:
 800d8a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8ac:	6906      	ldr	r6, [r0, #16]
 800d8ae:	f100 0814 	add.w	r8, r0, #20
 800d8b2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800d8b6:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d8ba:	1f37      	subs	r7, r6, #4
 800d8bc:	4610      	mov	r0, r2
 800d8be:	f7ff fd4d 	bl	800d35c <__hi0bits>
 800d8c2:	f1c0 0320 	rsb	r3, r0, #32
 800d8c6:	280a      	cmp	r0, #10
 800d8c8:	600b      	str	r3, [r1, #0]
 800d8ca:	491d      	ldr	r1, [pc, #116]	; (800d940 <__b2d+0x98>)
 800d8cc:	dc16      	bgt.n	800d8fc <__b2d+0x54>
 800d8ce:	f1c0 0c0b 	rsb	ip, r0, #11
 800d8d2:	45b8      	cmp	r8, r7
 800d8d4:	f100 0015 	add.w	r0, r0, #21
 800d8d8:	fa22 f30c 	lsr.w	r3, r2, ip
 800d8dc:	fa02 f000 	lsl.w	r0, r2, r0
 800d8e0:	ea43 0501 	orr.w	r5, r3, r1
 800d8e4:	bf34      	ite	cc
 800d8e6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d8ea:	2300      	movcs	r3, #0
 800d8ec:	fa23 f30c 	lsr.w	r3, r3, ip
 800d8f0:	4303      	orrs	r3, r0
 800d8f2:	461c      	mov	r4, r3
 800d8f4:	ec45 4b10 	vmov	d0, r4, r5
 800d8f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8fc:	45b8      	cmp	r8, r7
 800d8fe:	bf3a      	itte	cc
 800d900:	f1a6 0708 	subcc.w	r7, r6, #8
 800d904:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d908:	2300      	movcs	r3, #0
 800d90a:	380b      	subs	r0, #11
 800d90c:	d014      	beq.n	800d938 <__b2d+0x90>
 800d90e:	f1c0 0120 	rsb	r1, r0, #32
 800d912:	4082      	lsls	r2, r0
 800d914:	4547      	cmp	r7, r8
 800d916:	fa23 f401 	lsr.w	r4, r3, r1
 800d91a:	fa03 f300 	lsl.w	r3, r3, r0
 800d91e:	ea42 0204 	orr.w	r2, r2, r4
 800d922:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800d926:	bf8c      	ite	hi
 800d928:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800d92c:	2200      	movls	r2, #0
 800d92e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800d932:	40ca      	lsrs	r2, r1
 800d934:	4313      	orrs	r3, r2
 800d936:	e7dc      	b.n	800d8f2 <__b2d+0x4a>
 800d938:	ea42 0501 	orr.w	r5, r2, r1
 800d93c:	e7d9      	b.n	800d8f2 <__b2d+0x4a>
 800d93e:	bf00      	nop
 800d940:	3ff00000 	.word	0x3ff00000

0800d944 <__d2b>:
 800d944:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d948:	460f      	mov	r7, r1
 800d94a:	2101      	movs	r1, #1
 800d94c:	4616      	mov	r6, r2
 800d94e:	ec59 8b10 	vmov	r8, r9, d0
 800d952:	f7ff fc0f 	bl	800d174 <_Balloc>
 800d956:	4604      	mov	r4, r0
 800d958:	b930      	cbnz	r0, 800d968 <__d2b+0x24>
 800d95a:	4602      	mov	r2, r0
 800d95c:	4b24      	ldr	r3, [pc, #144]	; (800d9f0 <__d2b+0xac>)
 800d95e:	f240 310f 	movw	r1, #783	; 0x30f
 800d962:	4824      	ldr	r0, [pc, #144]	; (800d9f4 <__d2b+0xb0>)
 800d964:	f7fe faf2 	bl	800bf4c <__assert_func>
 800d968:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d96c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d970:	bb2d      	cbnz	r5, 800d9be <__d2b+0x7a>
 800d972:	9301      	str	r3, [sp, #4]
 800d974:	f1b8 0300 	subs.w	r3, r8, #0
 800d978:	d026      	beq.n	800d9c8 <__d2b+0x84>
 800d97a:	4668      	mov	r0, sp
 800d97c:	9300      	str	r3, [sp, #0]
 800d97e:	f7ff fd0d 	bl	800d39c <__lo0bits>
 800d982:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d986:	b1e8      	cbz	r0, 800d9c4 <__d2b+0x80>
 800d988:	f1c0 0320 	rsb	r3, r0, #32
 800d98c:	fa02 f303 	lsl.w	r3, r2, r3
 800d990:	40c2      	lsrs	r2, r0
 800d992:	430b      	orrs	r3, r1
 800d994:	9201      	str	r2, [sp, #4]
 800d996:	6163      	str	r3, [r4, #20]
 800d998:	9b01      	ldr	r3, [sp, #4]
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	61a3      	str	r3, [r4, #24]
 800d99e:	bf14      	ite	ne
 800d9a0:	2202      	movne	r2, #2
 800d9a2:	2201      	moveq	r2, #1
 800d9a4:	6122      	str	r2, [r4, #16]
 800d9a6:	b1bd      	cbz	r5, 800d9d8 <__d2b+0x94>
 800d9a8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d9ac:	4405      	add	r5, r0
 800d9ae:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d9b2:	603d      	str	r5, [r7, #0]
 800d9b4:	6030      	str	r0, [r6, #0]
 800d9b6:	4620      	mov	r0, r4
 800d9b8:	b003      	add	sp, #12
 800d9ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d9be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d9c2:	e7d6      	b.n	800d972 <__d2b+0x2e>
 800d9c4:	6161      	str	r1, [r4, #20]
 800d9c6:	e7e7      	b.n	800d998 <__d2b+0x54>
 800d9c8:	a801      	add	r0, sp, #4
 800d9ca:	f7ff fce7 	bl	800d39c <__lo0bits>
 800d9ce:	9b01      	ldr	r3, [sp, #4]
 800d9d0:	3020      	adds	r0, #32
 800d9d2:	2201      	movs	r2, #1
 800d9d4:	6163      	str	r3, [r4, #20]
 800d9d6:	e7e5      	b.n	800d9a4 <__d2b+0x60>
 800d9d8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d9dc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d9e0:	6038      	str	r0, [r7, #0]
 800d9e2:	6918      	ldr	r0, [r3, #16]
 800d9e4:	f7ff fcba 	bl	800d35c <__hi0bits>
 800d9e8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d9ec:	e7e2      	b.n	800d9b4 <__d2b+0x70>
 800d9ee:	bf00      	nop
 800d9f0:	0800e76e 	.word	0x0800e76e
 800d9f4:	0800e812 	.word	0x0800e812

0800d9f8 <__ratio>:
 800d9f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9fc:	4688      	mov	r8, r1
 800d9fe:	4681      	mov	r9, r0
 800da00:	4669      	mov	r1, sp
 800da02:	f7ff ff51 	bl	800d8a8 <__b2d>
 800da06:	a901      	add	r1, sp, #4
 800da08:	4640      	mov	r0, r8
 800da0a:	ec55 4b10 	vmov	r4, r5, d0
 800da0e:	f7ff ff4b 	bl	800d8a8 <__b2d>
 800da12:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800da16:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800da1a:	462f      	mov	r7, r5
 800da1c:	eba3 0c02 	sub.w	ip, r3, r2
 800da20:	e9dd 3200 	ldrd	r3, r2, [sp]
 800da24:	ec51 0b10 	vmov	r0, r1, d0
 800da28:	1a9b      	subs	r3, r3, r2
 800da2a:	468b      	mov	fp, r1
 800da2c:	4620      	mov	r0, r4
 800da2e:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800da32:	2b00      	cmp	r3, #0
 800da34:	bfd5      	itete	le
 800da36:	460a      	movle	r2, r1
 800da38:	462a      	movgt	r2, r5
 800da3a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800da3e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800da42:	bfd8      	it	le
 800da44:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800da48:	ee10 2a10 	vmov	r2, s0
 800da4c:	4639      	mov	r1, r7
 800da4e:	465b      	mov	r3, fp
 800da50:	f7f2 ff0a 	bl	8000868 <__aeabi_ddiv>
 800da54:	ec41 0b10 	vmov	d0, r0, r1
 800da58:	b003      	add	sp, #12
 800da5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800da5e <__copybits>:
 800da5e:	3901      	subs	r1, #1
 800da60:	f102 0314 	add.w	r3, r2, #20
 800da64:	1149      	asrs	r1, r1, #5
 800da66:	b570      	push	{r4, r5, r6, lr}
 800da68:	3101      	adds	r1, #1
 800da6a:	6914      	ldr	r4, [r2, #16]
 800da6c:	1f05      	subs	r5, r0, #4
 800da6e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800da72:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800da76:	42a3      	cmp	r3, r4
 800da78:	d30c      	bcc.n	800da94 <__copybits+0x36>
 800da7a:	1aa3      	subs	r3, r4, r2
 800da7c:	3211      	adds	r2, #17
 800da7e:	3b11      	subs	r3, #17
 800da80:	f023 0303 	bic.w	r3, r3, #3
 800da84:	42a2      	cmp	r2, r4
 800da86:	bf88      	it	hi
 800da88:	2300      	movhi	r3, #0
 800da8a:	4418      	add	r0, r3
 800da8c:	2300      	movs	r3, #0
 800da8e:	4288      	cmp	r0, r1
 800da90:	d305      	bcc.n	800da9e <__copybits+0x40>
 800da92:	bd70      	pop	{r4, r5, r6, pc}
 800da94:	f853 6b04 	ldr.w	r6, [r3], #4
 800da98:	f845 6f04 	str.w	r6, [r5, #4]!
 800da9c:	e7eb      	b.n	800da76 <__copybits+0x18>
 800da9e:	f840 3b04 	str.w	r3, [r0], #4
 800daa2:	e7f4      	b.n	800da8e <__copybits+0x30>

0800daa4 <__any_on>:
 800daa4:	f100 0214 	add.w	r2, r0, #20
 800daa8:	114b      	asrs	r3, r1, #5
 800daaa:	6900      	ldr	r0, [r0, #16]
 800daac:	4298      	cmp	r0, r3
 800daae:	b510      	push	{r4, lr}
 800dab0:	db11      	blt.n	800dad6 <__any_on+0x32>
 800dab2:	dd0a      	ble.n	800daca <__any_on+0x26>
 800dab4:	f011 011f 	ands.w	r1, r1, #31
 800dab8:	d007      	beq.n	800daca <__any_on+0x26>
 800daba:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800dabe:	fa24 f001 	lsr.w	r0, r4, r1
 800dac2:	fa00 f101 	lsl.w	r1, r0, r1
 800dac6:	428c      	cmp	r4, r1
 800dac8:	d10b      	bne.n	800dae2 <__any_on+0x3e>
 800daca:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800dace:	4293      	cmp	r3, r2
 800dad0:	d803      	bhi.n	800dada <__any_on+0x36>
 800dad2:	2000      	movs	r0, #0
 800dad4:	bd10      	pop	{r4, pc}
 800dad6:	4603      	mov	r3, r0
 800dad8:	e7f7      	b.n	800daca <__any_on+0x26>
 800dada:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800dade:	2900      	cmp	r1, #0
 800dae0:	d0f5      	beq.n	800dace <__any_on+0x2a>
 800dae2:	2001      	movs	r0, #1
 800dae4:	e7f6      	b.n	800dad4 <__any_on+0x30>

0800dae6 <__sread>:
 800dae6:	b510      	push	{r4, lr}
 800dae8:	460c      	mov	r4, r1
 800daea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800daee:	f000 f9df 	bl	800deb0 <_read_r>
 800daf2:	2800      	cmp	r0, #0
 800daf4:	bfab      	itete	ge
 800daf6:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800daf8:	89a3      	ldrhlt	r3, [r4, #12]
 800dafa:	181b      	addge	r3, r3, r0
 800dafc:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800db00:	bfac      	ite	ge
 800db02:	6563      	strge	r3, [r4, #84]	; 0x54
 800db04:	81a3      	strhlt	r3, [r4, #12]
 800db06:	bd10      	pop	{r4, pc}

0800db08 <__swrite>:
 800db08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db0c:	461f      	mov	r7, r3
 800db0e:	898b      	ldrh	r3, [r1, #12]
 800db10:	4605      	mov	r5, r0
 800db12:	460c      	mov	r4, r1
 800db14:	05db      	lsls	r3, r3, #23
 800db16:	4616      	mov	r6, r2
 800db18:	d505      	bpl.n	800db26 <__swrite+0x1e>
 800db1a:	2302      	movs	r3, #2
 800db1c:	2200      	movs	r2, #0
 800db1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db22:	f000 f9b3 	bl	800de8c <_lseek_r>
 800db26:	89a3      	ldrh	r3, [r4, #12]
 800db28:	4632      	mov	r2, r6
 800db2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800db2e:	4628      	mov	r0, r5
 800db30:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800db34:	81a3      	strh	r3, [r4, #12]
 800db36:	463b      	mov	r3, r7
 800db38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800db3c:	f000 b9da 	b.w	800def4 <_write_r>

0800db40 <__sseek>:
 800db40:	b510      	push	{r4, lr}
 800db42:	460c      	mov	r4, r1
 800db44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db48:	f000 f9a0 	bl	800de8c <_lseek_r>
 800db4c:	1c43      	adds	r3, r0, #1
 800db4e:	89a3      	ldrh	r3, [r4, #12]
 800db50:	bf15      	itete	ne
 800db52:	6560      	strne	r0, [r4, #84]	; 0x54
 800db54:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800db58:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800db5c:	81a3      	strheq	r3, [r4, #12]
 800db5e:	bf18      	it	ne
 800db60:	81a3      	strhne	r3, [r4, #12]
 800db62:	bd10      	pop	{r4, pc}

0800db64 <__sclose>:
 800db64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db68:	f000 b95e 	b.w	800de28 <_close_r>

0800db6c <fiprintf>:
 800db6c:	b40e      	push	{r1, r2, r3}
 800db6e:	b503      	push	{r0, r1, lr}
 800db70:	ab03      	add	r3, sp, #12
 800db72:	4601      	mov	r1, r0
 800db74:	4805      	ldr	r0, [pc, #20]	; (800db8c <fiprintf+0x20>)
 800db76:	f853 2b04 	ldr.w	r2, [r3], #4
 800db7a:	6800      	ldr	r0, [r0, #0]
 800db7c:	9301      	str	r3, [sp, #4]
 800db7e:	f7fe fedb 	bl	800c938 <_vfiprintf_r>
 800db82:	b002      	add	sp, #8
 800db84:	f85d eb04 	ldr.w	lr, [sp], #4
 800db88:	b003      	add	sp, #12
 800db8a:	4770      	bx	lr
 800db8c:	200002d8 	.word	0x200002d8

0800db90 <_realloc_r>:
 800db90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db94:	4680      	mov	r8, r0
 800db96:	4614      	mov	r4, r2
 800db98:	460e      	mov	r6, r1
 800db9a:	b921      	cbnz	r1, 800dba6 <_realloc_r+0x16>
 800db9c:	4611      	mov	r1, r2
 800db9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dba2:	f7ff b80b 	b.w	800cbbc <_malloc_r>
 800dba6:	b92a      	cbnz	r2, 800dbb4 <_realloc_r+0x24>
 800dba8:	4625      	mov	r5, r4
 800dbaa:	f000 f9e1 	bl	800df70 <_free_r>
 800dbae:	4628      	mov	r0, r5
 800dbb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbb4:	f000 fa28 	bl	800e008 <_malloc_usable_size_r>
 800dbb8:	4284      	cmp	r4, r0
 800dbba:	4607      	mov	r7, r0
 800dbbc:	d802      	bhi.n	800dbc4 <_realloc_r+0x34>
 800dbbe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800dbc2:	d812      	bhi.n	800dbea <_realloc_r+0x5a>
 800dbc4:	4621      	mov	r1, r4
 800dbc6:	4640      	mov	r0, r8
 800dbc8:	f7fe fff8 	bl	800cbbc <_malloc_r>
 800dbcc:	4605      	mov	r5, r0
 800dbce:	2800      	cmp	r0, #0
 800dbd0:	d0ed      	beq.n	800dbae <_realloc_r+0x1e>
 800dbd2:	42bc      	cmp	r4, r7
 800dbd4:	4622      	mov	r2, r4
 800dbd6:	4631      	mov	r1, r6
 800dbd8:	bf28      	it	cs
 800dbda:	463a      	movcs	r2, r7
 800dbdc:	f7fe f991 	bl	800bf02 <memcpy>
 800dbe0:	4631      	mov	r1, r6
 800dbe2:	4640      	mov	r0, r8
 800dbe4:	f000 f9c4 	bl	800df70 <_free_r>
 800dbe8:	e7e1      	b.n	800dbae <_realloc_r+0x1e>
 800dbea:	4635      	mov	r5, r6
 800dbec:	e7df      	b.n	800dbae <_realloc_r+0x1e>

0800dbee <__swbuf_r>:
 800dbee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbf0:	460e      	mov	r6, r1
 800dbf2:	4614      	mov	r4, r2
 800dbf4:	4605      	mov	r5, r0
 800dbf6:	b118      	cbz	r0, 800dc00 <__swbuf_r+0x12>
 800dbf8:	6a03      	ldr	r3, [r0, #32]
 800dbfa:	b90b      	cbnz	r3, 800dc00 <__swbuf_r+0x12>
 800dbfc:	f7fd f926 	bl	800ae4c <__sinit>
 800dc00:	69a3      	ldr	r3, [r4, #24]
 800dc02:	60a3      	str	r3, [r4, #8]
 800dc04:	89a3      	ldrh	r3, [r4, #12]
 800dc06:	071a      	lsls	r2, r3, #28
 800dc08:	d525      	bpl.n	800dc56 <__swbuf_r+0x68>
 800dc0a:	6923      	ldr	r3, [r4, #16]
 800dc0c:	b31b      	cbz	r3, 800dc56 <__swbuf_r+0x68>
 800dc0e:	6823      	ldr	r3, [r4, #0]
 800dc10:	b2f6      	uxtb	r6, r6
 800dc12:	6922      	ldr	r2, [r4, #16]
 800dc14:	4637      	mov	r7, r6
 800dc16:	1a98      	subs	r0, r3, r2
 800dc18:	6963      	ldr	r3, [r4, #20]
 800dc1a:	4283      	cmp	r3, r0
 800dc1c:	dc04      	bgt.n	800dc28 <__swbuf_r+0x3a>
 800dc1e:	4621      	mov	r1, r4
 800dc20:	4628      	mov	r0, r5
 800dc22:	f7ff fa73 	bl	800d10c <_fflush_r>
 800dc26:	b9e0      	cbnz	r0, 800dc62 <__swbuf_r+0x74>
 800dc28:	68a3      	ldr	r3, [r4, #8]
 800dc2a:	3b01      	subs	r3, #1
 800dc2c:	60a3      	str	r3, [r4, #8]
 800dc2e:	6823      	ldr	r3, [r4, #0]
 800dc30:	1c5a      	adds	r2, r3, #1
 800dc32:	6022      	str	r2, [r4, #0]
 800dc34:	701e      	strb	r6, [r3, #0]
 800dc36:	1c43      	adds	r3, r0, #1
 800dc38:	6962      	ldr	r2, [r4, #20]
 800dc3a:	429a      	cmp	r2, r3
 800dc3c:	d004      	beq.n	800dc48 <__swbuf_r+0x5a>
 800dc3e:	89a3      	ldrh	r3, [r4, #12]
 800dc40:	07db      	lsls	r3, r3, #31
 800dc42:	d506      	bpl.n	800dc52 <__swbuf_r+0x64>
 800dc44:	2e0a      	cmp	r6, #10
 800dc46:	d104      	bne.n	800dc52 <__swbuf_r+0x64>
 800dc48:	4621      	mov	r1, r4
 800dc4a:	4628      	mov	r0, r5
 800dc4c:	f7ff fa5e 	bl	800d10c <_fflush_r>
 800dc50:	b938      	cbnz	r0, 800dc62 <__swbuf_r+0x74>
 800dc52:	4638      	mov	r0, r7
 800dc54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc56:	4621      	mov	r1, r4
 800dc58:	4628      	mov	r0, r5
 800dc5a:	f000 f805 	bl	800dc68 <__swsetup_r>
 800dc5e:	2800      	cmp	r0, #0
 800dc60:	d0d5      	beq.n	800dc0e <__swbuf_r+0x20>
 800dc62:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800dc66:	e7f4      	b.n	800dc52 <__swbuf_r+0x64>

0800dc68 <__swsetup_r>:
 800dc68:	b538      	push	{r3, r4, r5, lr}
 800dc6a:	4b2a      	ldr	r3, [pc, #168]	; (800dd14 <__swsetup_r+0xac>)
 800dc6c:	4605      	mov	r5, r0
 800dc6e:	460c      	mov	r4, r1
 800dc70:	6818      	ldr	r0, [r3, #0]
 800dc72:	b118      	cbz	r0, 800dc7c <__swsetup_r+0x14>
 800dc74:	6a03      	ldr	r3, [r0, #32]
 800dc76:	b90b      	cbnz	r3, 800dc7c <__swsetup_r+0x14>
 800dc78:	f7fd f8e8 	bl	800ae4c <__sinit>
 800dc7c:	89a3      	ldrh	r3, [r4, #12]
 800dc7e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dc82:	0718      	lsls	r0, r3, #28
 800dc84:	d422      	bmi.n	800dccc <__swsetup_r+0x64>
 800dc86:	06d9      	lsls	r1, r3, #27
 800dc88:	d407      	bmi.n	800dc9a <__swsetup_r+0x32>
 800dc8a:	2309      	movs	r3, #9
 800dc8c:	602b      	str	r3, [r5, #0]
 800dc8e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800dc92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dc96:	81a3      	strh	r3, [r4, #12]
 800dc98:	e034      	b.n	800dd04 <__swsetup_r+0x9c>
 800dc9a:	0758      	lsls	r0, r3, #29
 800dc9c:	d512      	bpl.n	800dcc4 <__swsetup_r+0x5c>
 800dc9e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dca0:	b141      	cbz	r1, 800dcb4 <__swsetup_r+0x4c>
 800dca2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dca6:	4299      	cmp	r1, r3
 800dca8:	d002      	beq.n	800dcb0 <__swsetup_r+0x48>
 800dcaa:	4628      	mov	r0, r5
 800dcac:	f000 f960 	bl	800df70 <_free_r>
 800dcb0:	2300      	movs	r3, #0
 800dcb2:	6363      	str	r3, [r4, #52]	; 0x34
 800dcb4:	89a3      	ldrh	r3, [r4, #12]
 800dcb6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800dcba:	81a3      	strh	r3, [r4, #12]
 800dcbc:	2300      	movs	r3, #0
 800dcbe:	6063      	str	r3, [r4, #4]
 800dcc0:	6923      	ldr	r3, [r4, #16]
 800dcc2:	6023      	str	r3, [r4, #0]
 800dcc4:	89a3      	ldrh	r3, [r4, #12]
 800dcc6:	f043 0308 	orr.w	r3, r3, #8
 800dcca:	81a3      	strh	r3, [r4, #12]
 800dccc:	6923      	ldr	r3, [r4, #16]
 800dcce:	b94b      	cbnz	r3, 800dce4 <__swsetup_r+0x7c>
 800dcd0:	89a3      	ldrh	r3, [r4, #12]
 800dcd2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800dcd6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dcda:	d003      	beq.n	800dce4 <__swsetup_r+0x7c>
 800dcdc:	4621      	mov	r1, r4
 800dcde:	4628      	mov	r0, r5
 800dce0:	f000 f84c 	bl	800dd7c <__smakebuf_r>
 800dce4:	89a0      	ldrh	r0, [r4, #12]
 800dce6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dcea:	f010 0301 	ands.w	r3, r0, #1
 800dcee:	d00a      	beq.n	800dd06 <__swsetup_r+0x9e>
 800dcf0:	2300      	movs	r3, #0
 800dcf2:	60a3      	str	r3, [r4, #8]
 800dcf4:	6963      	ldr	r3, [r4, #20]
 800dcf6:	425b      	negs	r3, r3
 800dcf8:	61a3      	str	r3, [r4, #24]
 800dcfa:	6923      	ldr	r3, [r4, #16]
 800dcfc:	b943      	cbnz	r3, 800dd10 <__swsetup_r+0xa8>
 800dcfe:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800dd02:	d1c4      	bne.n	800dc8e <__swsetup_r+0x26>
 800dd04:	bd38      	pop	{r3, r4, r5, pc}
 800dd06:	0781      	lsls	r1, r0, #30
 800dd08:	bf58      	it	pl
 800dd0a:	6963      	ldrpl	r3, [r4, #20]
 800dd0c:	60a3      	str	r3, [r4, #8]
 800dd0e:	e7f4      	b.n	800dcfa <__swsetup_r+0x92>
 800dd10:	2000      	movs	r0, #0
 800dd12:	e7f7      	b.n	800dd04 <__swsetup_r+0x9c>
 800dd14:	200002d8 	.word	0x200002d8

0800dd18 <__ascii_wctomb>:
 800dd18:	b149      	cbz	r1, 800dd2e <__ascii_wctomb+0x16>
 800dd1a:	2aff      	cmp	r2, #255	; 0xff
 800dd1c:	bf8d      	iteet	hi
 800dd1e:	238a      	movhi	r3, #138	; 0x8a
 800dd20:	2001      	movls	r0, #1
 800dd22:	700a      	strbls	r2, [r1, #0]
 800dd24:	6003      	strhi	r3, [r0, #0]
 800dd26:	bf88      	it	hi
 800dd28:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800dd2c:	4770      	bx	lr
 800dd2e:	4608      	mov	r0, r1
 800dd30:	4770      	bx	lr

0800dd32 <__swhatbuf_r>:
 800dd32:	b570      	push	{r4, r5, r6, lr}
 800dd34:	460c      	mov	r4, r1
 800dd36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd3a:	b096      	sub	sp, #88	; 0x58
 800dd3c:	4615      	mov	r5, r2
 800dd3e:	2900      	cmp	r1, #0
 800dd40:	461e      	mov	r6, r3
 800dd42:	da0c      	bge.n	800dd5e <__swhatbuf_r+0x2c>
 800dd44:	89a3      	ldrh	r3, [r4, #12]
 800dd46:	2100      	movs	r1, #0
 800dd48:	f013 0f80 	tst.w	r3, #128	; 0x80
 800dd4c:	bf0c      	ite	eq
 800dd4e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800dd52:	2340      	movne	r3, #64	; 0x40
 800dd54:	2000      	movs	r0, #0
 800dd56:	6031      	str	r1, [r6, #0]
 800dd58:	602b      	str	r3, [r5, #0]
 800dd5a:	b016      	add	sp, #88	; 0x58
 800dd5c:	bd70      	pop	{r4, r5, r6, pc}
 800dd5e:	466a      	mov	r2, sp
 800dd60:	f000 f872 	bl	800de48 <_fstat_r>
 800dd64:	2800      	cmp	r0, #0
 800dd66:	dbed      	blt.n	800dd44 <__swhatbuf_r+0x12>
 800dd68:	9901      	ldr	r1, [sp, #4]
 800dd6a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800dd6e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800dd72:	4259      	negs	r1, r3
 800dd74:	4159      	adcs	r1, r3
 800dd76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dd7a:	e7eb      	b.n	800dd54 <__swhatbuf_r+0x22>

0800dd7c <__smakebuf_r>:
 800dd7c:	898b      	ldrh	r3, [r1, #12]
 800dd7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dd80:	079d      	lsls	r5, r3, #30
 800dd82:	4606      	mov	r6, r0
 800dd84:	460c      	mov	r4, r1
 800dd86:	d507      	bpl.n	800dd98 <__smakebuf_r+0x1c>
 800dd88:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800dd8c:	6023      	str	r3, [r4, #0]
 800dd8e:	6123      	str	r3, [r4, #16]
 800dd90:	2301      	movs	r3, #1
 800dd92:	6163      	str	r3, [r4, #20]
 800dd94:	b002      	add	sp, #8
 800dd96:	bd70      	pop	{r4, r5, r6, pc}
 800dd98:	ab01      	add	r3, sp, #4
 800dd9a:	466a      	mov	r2, sp
 800dd9c:	f7ff ffc9 	bl	800dd32 <__swhatbuf_r>
 800dda0:	9900      	ldr	r1, [sp, #0]
 800dda2:	4605      	mov	r5, r0
 800dda4:	4630      	mov	r0, r6
 800dda6:	f7fe ff09 	bl	800cbbc <_malloc_r>
 800ddaa:	b948      	cbnz	r0, 800ddc0 <__smakebuf_r+0x44>
 800ddac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ddb0:	059a      	lsls	r2, r3, #22
 800ddb2:	d4ef      	bmi.n	800dd94 <__smakebuf_r+0x18>
 800ddb4:	f023 0303 	bic.w	r3, r3, #3
 800ddb8:	f043 0302 	orr.w	r3, r3, #2
 800ddbc:	81a3      	strh	r3, [r4, #12]
 800ddbe:	e7e3      	b.n	800dd88 <__smakebuf_r+0xc>
 800ddc0:	89a3      	ldrh	r3, [r4, #12]
 800ddc2:	6020      	str	r0, [r4, #0]
 800ddc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ddc8:	6120      	str	r0, [r4, #16]
 800ddca:	81a3      	strh	r3, [r4, #12]
 800ddcc:	9b00      	ldr	r3, [sp, #0]
 800ddce:	6163      	str	r3, [r4, #20]
 800ddd0:	9b01      	ldr	r3, [sp, #4]
 800ddd2:	b15b      	cbz	r3, 800ddec <__smakebuf_r+0x70>
 800ddd4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ddd8:	4630      	mov	r0, r6
 800ddda:	f000 f847 	bl	800de6c <_isatty_r>
 800ddde:	b128      	cbz	r0, 800ddec <__smakebuf_r+0x70>
 800dde0:	89a3      	ldrh	r3, [r4, #12]
 800dde2:	f023 0303 	bic.w	r3, r3, #3
 800dde6:	f043 0301 	orr.w	r3, r3, #1
 800ddea:	81a3      	strh	r3, [r4, #12]
 800ddec:	89a3      	ldrh	r3, [r4, #12]
 800ddee:	431d      	orrs	r5, r3
 800ddf0:	81a5      	strh	r5, [r4, #12]
 800ddf2:	e7cf      	b.n	800dd94 <__smakebuf_r+0x18>

0800ddf4 <memmove>:
 800ddf4:	4288      	cmp	r0, r1
 800ddf6:	b510      	push	{r4, lr}
 800ddf8:	eb01 0402 	add.w	r4, r1, r2
 800ddfc:	d902      	bls.n	800de04 <memmove+0x10>
 800ddfe:	4284      	cmp	r4, r0
 800de00:	4623      	mov	r3, r4
 800de02:	d807      	bhi.n	800de14 <memmove+0x20>
 800de04:	1e43      	subs	r3, r0, #1
 800de06:	42a1      	cmp	r1, r4
 800de08:	d008      	beq.n	800de1c <memmove+0x28>
 800de0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800de0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800de12:	e7f8      	b.n	800de06 <memmove+0x12>
 800de14:	4402      	add	r2, r0
 800de16:	4601      	mov	r1, r0
 800de18:	428a      	cmp	r2, r1
 800de1a:	d100      	bne.n	800de1e <memmove+0x2a>
 800de1c:	bd10      	pop	{r4, pc}
 800de1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800de22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800de26:	e7f7      	b.n	800de18 <memmove+0x24>

0800de28 <_close_r>:
 800de28:	b538      	push	{r3, r4, r5, lr}
 800de2a:	2300      	movs	r3, #0
 800de2c:	4d05      	ldr	r5, [pc, #20]	; (800de44 <_close_r+0x1c>)
 800de2e:	4604      	mov	r4, r0
 800de30:	4608      	mov	r0, r1
 800de32:	602b      	str	r3, [r5, #0]
 800de34:	f7fc fef3 	bl	800ac1e <_close>
 800de38:	1c43      	adds	r3, r0, #1
 800de3a:	d102      	bne.n	800de42 <_close_r+0x1a>
 800de3c:	682b      	ldr	r3, [r5, #0]
 800de3e:	b103      	cbz	r3, 800de42 <_close_r+0x1a>
 800de40:	6023      	str	r3, [r4, #0]
 800de42:	bd38      	pop	{r3, r4, r5, pc}
 800de44:	2000065c 	.word	0x2000065c

0800de48 <_fstat_r>:
 800de48:	b538      	push	{r3, r4, r5, lr}
 800de4a:	2300      	movs	r3, #0
 800de4c:	4d06      	ldr	r5, [pc, #24]	; (800de68 <_fstat_r+0x20>)
 800de4e:	4604      	mov	r4, r0
 800de50:	4608      	mov	r0, r1
 800de52:	4611      	mov	r1, r2
 800de54:	602b      	str	r3, [r5, #0]
 800de56:	f7fc feee 	bl	800ac36 <_fstat>
 800de5a:	1c43      	adds	r3, r0, #1
 800de5c:	d102      	bne.n	800de64 <_fstat_r+0x1c>
 800de5e:	682b      	ldr	r3, [r5, #0]
 800de60:	b103      	cbz	r3, 800de64 <_fstat_r+0x1c>
 800de62:	6023      	str	r3, [r4, #0]
 800de64:	bd38      	pop	{r3, r4, r5, pc}
 800de66:	bf00      	nop
 800de68:	2000065c 	.word	0x2000065c

0800de6c <_isatty_r>:
 800de6c:	b538      	push	{r3, r4, r5, lr}
 800de6e:	2300      	movs	r3, #0
 800de70:	4d05      	ldr	r5, [pc, #20]	; (800de88 <_isatty_r+0x1c>)
 800de72:	4604      	mov	r4, r0
 800de74:	4608      	mov	r0, r1
 800de76:	602b      	str	r3, [r5, #0]
 800de78:	f7fc feed 	bl	800ac56 <_isatty>
 800de7c:	1c43      	adds	r3, r0, #1
 800de7e:	d102      	bne.n	800de86 <_isatty_r+0x1a>
 800de80:	682b      	ldr	r3, [r5, #0]
 800de82:	b103      	cbz	r3, 800de86 <_isatty_r+0x1a>
 800de84:	6023      	str	r3, [r4, #0]
 800de86:	bd38      	pop	{r3, r4, r5, pc}
 800de88:	2000065c 	.word	0x2000065c

0800de8c <_lseek_r>:
 800de8c:	b538      	push	{r3, r4, r5, lr}
 800de8e:	4604      	mov	r4, r0
 800de90:	4d06      	ldr	r5, [pc, #24]	; (800deac <_lseek_r+0x20>)
 800de92:	4608      	mov	r0, r1
 800de94:	4611      	mov	r1, r2
 800de96:	2200      	movs	r2, #0
 800de98:	602a      	str	r2, [r5, #0]
 800de9a:	461a      	mov	r2, r3
 800de9c:	f7fc fee6 	bl	800ac6c <_lseek>
 800dea0:	1c43      	adds	r3, r0, #1
 800dea2:	d102      	bne.n	800deaa <_lseek_r+0x1e>
 800dea4:	682b      	ldr	r3, [r5, #0]
 800dea6:	b103      	cbz	r3, 800deaa <_lseek_r+0x1e>
 800dea8:	6023      	str	r3, [r4, #0]
 800deaa:	bd38      	pop	{r3, r4, r5, pc}
 800deac:	2000065c 	.word	0x2000065c

0800deb0 <_read_r>:
 800deb0:	b538      	push	{r3, r4, r5, lr}
 800deb2:	4604      	mov	r4, r0
 800deb4:	4d06      	ldr	r5, [pc, #24]	; (800ded0 <_read_r+0x20>)
 800deb6:	4608      	mov	r0, r1
 800deb8:	4611      	mov	r1, r2
 800deba:	2200      	movs	r2, #0
 800debc:	602a      	str	r2, [r5, #0]
 800debe:	461a      	mov	r2, r3
 800dec0:	f7fc fe74 	bl	800abac <_read>
 800dec4:	1c43      	adds	r3, r0, #1
 800dec6:	d102      	bne.n	800dece <_read_r+0x1e>
 800dec8:	682b      	ldr	r3, [r5, #0]
 800deca:	b103      	cbz	r3, 800dece <_read_r+0x1e>
 800decc:	6023      	str	r3, [r4, #0]
 800dece:	bd38      	pop	{r3, r4, r5, pc}
 800ded0:	2000065c 	.word	0x2000065c

0800ded4 <_sbrk_r>:
 800ded4:	b538      	push	{r3, r4, r5, lr}
 800ded6:	2300      	movs	r3, #0
 800ded8:	4d05      	ldr	r5, [pc, #20]	; (800def0 <_sbrk_r+0x1c>)
 800deda:	4604      	mov	r4, r0
 800dedc:	4608      	mov	r0, r1
 800dede:	602b      	str	r3, [r5, #0]
 800dee0:	f7fc fed2 	bl	800ac88 <_sbrk>
 800dee4:	1c43      	adds	r3, r0, #1
 800dee6:	d102      	bne.n	800deee <_sbrk_r+0x1a>
 800dee8:	682b      	ldr	r3, [r5, #0]
 800deea:	b103      	cbz	r3, 800deee <_sbrk_r+0x1a>
 800deec:	6023      	str	r3, [r4, #0]
 800deee:	bd38      	pop	{r3, r4, r5, pc}
 800def0:	2000065c 	.word	0x2000065c

0800def4 <_write_r>:
 800def4:	b538      	push	{r3, r4, r5, lr}
 800def6:	4604      	mov	r4, r0
 800def8:	4d06      	ldr	r5, [pc, #24]	; (800df14 <_write_r+0x20>)
 800defa:	4608      	mov	r0, r1
 800defc:	4611      	mov	r1, r2
 800defe:	2200      	movs	r2, #0
 800df00:	602a      	str	r2, [r5, #0]
 800df02:	461a      	mov	r2, r3
 800df04:	f7fc fe6f 	bl	800abe6 <_write>
 800df08:	1c43      	adds	r3, r0, #1
 800df0a:	d102      	bne.n	800df12 <_write_r+0x1e>
 800df0c:	682b      	ldr	r3, [r5, #0]
 800df0e:	b103      	cbz	r3, 800df12 <_write_r+0x1e>
 800df10:	6023      	str	r3, [r4, #0]
 800df12:	bd38      	pop	{r3, r4, r5, pc}
 800df14:	2000065c 	.word	0x2000065c

0800df18 <memchr>:
 800df18:	b2c9      	uxtb	r1, r1
 800df1a:	4402      	add	r2, r0
 800df1c:	b510      	push	{r4, lr}
 800df1e:	4290      	cmp	r0, r2
 800df20:	4603      	mov	r3, r0
 800df22:	d101      	bne.n	800df28 <memchr+0x10>
 800df24:	2300      	movs	r3, #0
 800df26:	e003      	b.n	800df30 <memchr+0x18>
 800df28:	781c      	ldrb	r4, [r3, #0]
 800df2a:	3001      	adds	r0, #1
 800df2c:	428c      	cmp	r4, r1
 800df2e:	d1f6      	bne.n	800df1e <memchr+0x6>
 800df30:	4618      	mov	r0, r3
 800df32:	bd10      	pop	{r4, pc}

0800df34 <abort>:
 800df34:	2006      	movs	r0, #6
 800df36:	b508      	push	{r3, lr}
 800df38:	f000 f896 	bl	800e068 <raise>
 800df3c:	2001      	movs	r0, #1
 800df3e:	f7fc fe2b 	bl	800ab98 <_exit>

0800df42 <_calloc_r>:
 800df42:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800df44:	fba1 2402 	umull	r2, r4, r1, r2
 800df48:	b94c      	cbnz	r4, 800df5e <_calloc_r+0x1c>
 800df4a:	4611      	mov	r1, r2
 800df4c:	9201      	str	r2, [sp, #4]
 800df4e:	f7fe fe35 	bl	800cbbc <_malloc_r>
 800df52:	9a01      	ldr	r2, [sp, #4]
 800df54:	4605      	mov	r5, r0
 800df56:	b930      	cbnz	r0, 800df66 <_calloc_r+0x24>
 800df58:	4628      	mov	r0, r5
 800df5a:	b003      	add	sp, #12
 800df5c:	bd30      	pop	{r4, r5, pc}
 800df5e:	220c      	movs	r2, #12
 800df60:	2500      	movs	r5, #0
 800df62:	6002      	str	r2, [r0, #0]
 800df64:	e7f8      	b.n	800df58 <_calloc_r+0x16>
 800df66:	4621      	mov	r1, r4
 800df68:	f7fd ff96 	bl	800be98 <memset>
 800df6c:	e7f4      	b.n	800df58 <_calloc_r+0x16>
	...

0800df70 <_free_r>:
 800df70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800df72:	2900      	cmp	r1, #0
 800df74:	d043      	beq.n	800dffe <_free_r+0x8e>
 800df76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800df7a:	1f0c      	subs	r4, r1, #4
 800df7c:	9001      	str	r0, [sp, #4]
 800df7e:	2b00      	cmp	r3, #0
 800df80:	bfb8      	it	lt
 800df82:	18e4      	addlt	r4, r4, r3
 800df84:	f7ff f8ea 	bl	800d15c <__malloc_lock>
 800df88:	4a1e      	ldr	r2, [pc, #120]	; (800e004 <_free_r+0x94>)
 800df8a:	9801      	ldr	r0, [sp, #4]
 800df8c:	6813      	ldr	r3, [r2, #0]
 800df8e:	b933      	cbnz	r3, 800df9e <_free_r+0x2e>
 800df90:	6063      	str	r3, [r4, #4]
 800df92:	6014      	str	r4, [r2, #0]
 800df94:	b003      	add	sp, #12
 800df96:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800df9a:	f7ff b8e5 	b.w	800d168 <__malloc_unlock>
 800df9e:	42a3      	cmp	r3, r4
 800dfa0:	d908      	bls.n	800dfb4 <_free_r+0x44>
 800dfa2:	6825      	ldr	r5, [r4, #0]
 800dfa4:	1961      	adds	r1, r4, r5
 800dfa6:	428b      	cmp	r3, r1
 800dfa8:	bf01      	itttt	eq
 800dfaa:	6819      	ldreq	r1, [r3, #0]
 800dfac:	685b      	ldreq	r3, [r3, #4]
 800dfae:	1949      	addeq	r1, r1, r5
 800dfb0:	6021      	streq	r1, [r4, #0]
 800dfb2:	e7ed      	b.n	800df90 <_free_r+0x20>
 800dfb4:	461a      	mov	r2, r3
 800dfb6:	685b      	ldr	r3, [r3, #4]
 800dfb8:	b10b      	cbz	r3, 800dfbe <_free_r+0x4e>
 800dfba:	42a3      	cmp	r3, r4
 800dfbc:	d9fa      	bls.n	800dfb4 <_free_r+0x44>
 800dfbe:	6811      	ldr	r1, [r2, #0]
 800dfc0:	1855      	adds	r5, r2, r1
 800dfc2:	42a5      	cmp	r5, r4
 800dfc4:	d10b      	bne.n	800dfde <_free_r+0x6e>
 800dfc6:	6824      	ldr	r4, [r4, #0]
 800dfc8:	4421      	add	r1, r4
 800dfca:	1854      	adds	r4, r2, r1
 800dfcc:	6011      	str	r1, [r2, #0]
 800dfce:	42a3      	cmp	r3, r4
 800dfd0:	d1e0      	bne.n	800df94 <_free_r+0x24>
 800dfd2:	681c      	ldr	r4, [r3, #0]
 800dfd4:	685b      	ldr	r3, [r3, #4]
 800dfd6:	440c      	add	r4, r1
 800dfd8:	6053      	str	r3, [r2, #4]
 800dfda:	6014      	str	r4, [r2, #0]
 800dfdc:	e7da      	b.n	800df94 <_free_r+0x24>
 800dfde:	d902      	bls.n	800dfe6 <_free_r+0x76>
 800dfe0:	230c      	movs	r3, #12
 800dfe2:	6003      	str	r3, [r0, #0]
 800dfe4:	e7d6      	b.n	800df94 <_free_r+0x24>
 800dfe6:	6825      	ldr	r5, [r4, #0]
 800dfe8:	1961      	adds	r1, r4, r5
 800dfea:	428b      	cmp	r3, r1
 800dfec:	bf02      	ittt	eq
 800dfee:	6819      	ldreq	r1, [r3, #0]
 800dff0:	685b      	ldreq	r3, [r3, #4]
 800dff2:	1949      	addeq	r1, r1, r5
 800dff4:	6063      	str	r3, [r4, #4]
 800dff6:	bf08      	it	eq
 800dff8:	6021      	streq	r1, [r4, #0]
 800dffa:	6054      	str	r4, [r2, #4]
 800dffc:	e7ca      	b.n	800df94 <_free_r+0x24>
 800dffe:	b003      	add	sp, #12
 800e000:	bd30      	pop	{r4, r5, pc}
 800e002:	bf00      	nop
 800e004:	20000654 	.word	0x20000654

0800e008 <_malloc_usable_size_r>:
 800e008:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e00c:	1f18      	subs	r0, r3, #4
 800e00e:	2b00      	cmp	r3, #0
 800e010:	bfbc      	itt	lt
 800e012:	580b      	ldrlt	r3, [r1, r0]
 800e014:	18c0      	addlt	r0, r0, r3
 800e016:	4770      	bx	lr

0800e018 <_raise_r>:
 800e018:	291f      	cmp	r1, #31
 800e01a:	b538      	push	{r3, r4, r5, lr}
 800e01c:	4604      	mov	r4, r0
 800e01e:	460d      	mov	r5, r1
 800e020:	d904      	bls.n	800e02c <_raise_r+0x14>
 800e022:	2316      	movs	r3, #22
 800e024:	6003      	str	r3, [r0, #0]
 800e026:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e02a:	bd38      	pop	{r3, r4, r5, pc}
 800e02c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800e02e:	b112      	cbz	r2, 800e036 <_raise_r+0x1e>
 800e030:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e034:	b94b      	cbnz	r3, 800e04a <_raise_r+0x32>
 800e036:	4620      	mov	r0, r4
 800e038:	f000 f830 	bl	800e09c <_getpid_r>
 800e03c:	462a      	mov	r2, r5
 800e03e:	4601      	mov	r1, r0
 800e040:	4620      	mov	r0, r4
 800e042:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e046:	f000 b817 	b.w	800e078 <_kill_r>
 800e04a:	2b01      	cmp	r3, #1
 800e04c:	d00a      	beq.n	800e064 <_raise_r+0x4c>
 800e04e:	1c59      	adds	r1, r3, #1
 800e050:	d103      	bne.n	800e05a <_raise_r+0x42>
 800e052:	2316      	movs	r3, #22
 800e054:	6003      	str	r3, [r0, #0]
 800e056:	2001      	movs	r0, #1
 800e058:	e7e7      	b.n	800e02a <_raise_r+0x12>
 800e05a:	2400      	movs	r4, #0
 800e05c:	4628      	mov	r0, r5
 800e05e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e062:	4798      	blx	r3
 800e064:	2000      	movs	r0, #0
 800e066:	e7e0      	b.n	800e02a <_raise_r+0x12>

0800e068 <raise>:
 800e068:	4b02      	ldr	r3, [pc, #8]	; (800e074 <raise+0xc>)
 800e06a:	4601      	mov	r1, r0
 800e06c:	6818      	ldr	r0, [r3, #0]
 800e06e:	f7ff bfd3 	b.w	800e018 <_raise_r>
 800e072:	bf00      	nop
 800e074:	200002d8 	.word	0x200002d8

0800e078 <_kill_r>:
 800e078:	b538      	push	{r3, r4, r5, lr}
 800e07a:	2300      	movs	r3, #0
 800e07c:	4d06      	ldr	r5, [pc, #24]	; (800e098 <_kill_r+0x20>)
 800e07e:	4604      	mov	r4, r0
 800e080:	4608      	mov	r0, r1
 800e082:	4611      	mov	r1, r2
 800e084:	602b      	str	r3, [r5, #0]
 800e086:	f7fc fd77 	bl	800ab78 <_kill>
 800e08a:	1c43      	adds	r3, r0, #1
 800e08c:	d102      	bne.n	800e094 <_kill_r+0x1c>
 800e08e:	682b      	ldr	r3, [r5, #0]
 800e090:	b103      	cbz	r3, 800e094 <_kill_r+0x1c>
 800e092:	6023      	str	r3, [r4, #0]
 800e094:	bd38      	pop	{r3, r4, r5, pc}
 800e096:	bf00      	nop
 800e098:	2000065c 	.word	0x2000065c

0800e09c <_getpid_r>:
 800e09c:	f7fc bd64 	b.w	800ab68 <_getpid>

0800e0a0 <_init>:
 800e0a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0a2:	bf00      	nop
 800e0a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e0a6:	bc08      	pop	{r3}
 800e0a8:	469e      	mov	lr, r3
 800e0aa:	4770      	bx	lr

0800e0ac <_fini>:
 800e0ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0ae:	bf00      	nop
 800e0b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e0b2:	bc08      	pop	{r3}
 800e0b4:	469e      	mov	lr, r3
 800e0b6:	4770      	bx	lr
