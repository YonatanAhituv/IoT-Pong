
IOT_HTTP_WebServer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a528  08000238  08000238  00010238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       001739f8  0801a760  0801a760  0002a760  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0818e158  0818e158  001a02e0  2**0
                  CONTENTS
  4 .ARM          00000008  0818e158  0818e158  0019e158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0818e160  0818e160  001a02e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0818e160  0818e160  0019e160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0818e168  0818e168  0019e168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002e0  20000000  0818e170  001a0000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003290  200002e0  0818e450  001a02e0  2**2
                  ALLOC
 10 ._user_heap_stack 00010000  20003570  0818e450  001a3570  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  001a02e0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  001a0316  2**0
                  CONTENTS, READONLY
 13 .debug_info   00044eed  00000000  00000000  001a0359  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007174  00000000  00000000  001e5246  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000031c8  00000000  00000000  001ec3c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000025e8  00000000  00000000  001ef588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00040a95  00000000  00000000  001f1b70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003d815  00000000  00000000  00232605  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0016ae9e  00000000  00000000  0026fe1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000e994  00000000  00000000  003dacb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000b6  00000000  00000000  003e964c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	; (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	; (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	200002e0 	.word	0x200002e0
 8000254:	00000000 	.word	0x00000000
 8000258:	0801a748 	.word	0x0801a748

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	; (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	; (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	; (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	200002e4 	.word	0x200002e4
 8000274:	0801a748 	.word	0x0801a748

08000278 <strlen>:
 8000278:	4603      	mov	r3, r0
 800027a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027e:	2a00      	cmp	r2, #0
 8000280:	d1fb      	bne.n	800027a <strlen+0x2>
 8000282:	1a18      	subs	r0, r3, r0
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr

08000288 <strcmp>:
 8000288:	f810 2b01 	ldrb.w	r2, [r0], #1
 800028c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000290:	2a01      	cmp	r2, #1
 8000292:	bf28      	it	cs
 8000294:	429a      	cmpcs	r2, r3
 8000296:	d0f7      	beq.n	8000288 <strcmp>
 8000298:	1ad0      	subs	r0, r2, r3
 800029a:	4770      	bx	lr

0800029c <__aeabi_drsub>:
 800029c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a0:	e002      	b.n	80002a8 <__adddf3>
 80002a2:	bf00      	nop

080002a4 <__aeabi_dsub>:
 80002a4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002a8 <__adddf3>:
 80002a8:	b530      	push	{r4, r5, lr}
 80002aa:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ae:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b2:	ea94 0f05 	teq	r4, r5
 80002b6:	bf08      	it	eq
 80002b8:	ea90 0f02 	teqeq	r0, r2
 80002bc:	bf1f      	itttt	ne
 80002be:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002c6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ca:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ce:	f000 80e2 	beq.w	8000496 <__adddf3+0x1ee>
 80002d2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002d6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002da:	bfb8      	it	lt
 80002dc:	426d      	neglt	r5, r5
 80002de:	dd0c      	ble.n	80002fa <__adddf3+0x52>
 80002e0:	442c      	add	r4, r5
 80002e2:	ea80 0202 	eor.w	r2, r0, r2
 80002e6:	ea81 0303 	eor.w	r3, r1, r3
 80002ea:	ea82 0000 	eor.w	r0, r2, r0
 80002ee:	ea83 0101 	eor.w	r1, r3, r1
 80002f2:	ea80 0202 	eor.w	r2, r0, r2
 80002f6:	ea81 0303 	eor.w	r3, r1, r3
 80002fa:	2d36      	cmp	r5, #54	; 0x36
 80002fc:	bf88      	it	hi
 80002fe:	bd30      	pophi	{r4, r5, pc}
 8000300:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000304:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000308:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800030c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000310:	d002      	beq.n	8000318 <__adddf3+0x70>
 8000312:	4240      	negs	r0, r0
 8000314:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000318:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800031c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000320:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x84>
 8000326:	4252      	negs	r2, r2
 8000328:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800032c:	ea94 0f05 	teq	r4, r5
 8000330:	f000 80a7 	beq.w	8000482 <__adddf3+0x1da>
 8000334:	f1a4 0401 	sub.w	r4, r4, #1
 8000338:	f1d5 0e20 	rsbs	lr, r5, #32
 800033c:	db0d      	blt.n	800035a <__adddf3+0xb2>
 800033e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000342:	fa22 f205 	lsr.w	r2, r2, r5
 8000346:	1880      	adds	r0, r0, r2
 8000348:	f141 0100 	adc.w	r1, r1, #0
 800034c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000350:	1880      	adds	r0, r0, r2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	4159      	adcs	r1, r3
 8000358:	e00e      	b.n	8000378 <__adddf3+0xd0>
 800035a:	f1a5 0520 	sub.w	r5, r5, #32
 800035e:	f10e 0e20 	add.w	lr, lr, #32
 8000362:	2a01      	cmp	r2, #1
 8000364:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000368:	bf28      	it	cs
 800036a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800036e:	fa43 f305 	asr.w	r3, r3, r5
 8000372:	18c0      	adds	r0, r0, r3
 8000374:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000378:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800037c:	d507      	bpl.n	800038e <__adddf3+0xe6>
 800037e:	f04f 0e00 	mov.w	lr, #0
 8000382:	f1dc 0c00 	rsbs	ip, ip, #0
 8000386:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038a:	eb6e 0101 	sbc.w	r1, lr, r1
 800038e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000392:	d31b      	bcc.n	80003cc <__adddf3+0x124>
 8000394:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000398:	d30c      	bcc.n	80003b4 <__adddf3+0x10c>
 800039a:	0849      	lsrs	r1, r1, #1
 800039c:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a4:	f104 0401 	add.w	r4, r4, #1
 80003a8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003ac:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b0:	f080 809a 	bcs.w	80004e8 <__adddf3+0x240>
 80003b4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003b8:	bf08      	it	eq
 80003ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003be:	f150 0000 	adcs.w	r0, r0, #0
 80003c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003c6:	ea41 0105 	orr.w	r1, r1, r5
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d0:	4140      	adcs	r0, r0
 80003d2:	eb41 0101 	adc.w	r1, r1, r1
 80003d6:	3c01      	subs	r4, #1
 80003d8:	bf28      	it	cs
 80003da:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003de:	d2e9      	bcs.n	80003b4 <__adddf3+0x10c>
 80003e0:	f091 0f00 	teq	r1, #0
 80003e4:	bf04      	itt	eq
 80003e6:	4601      	moveq	r1, r0
 80003e8:	2000      	moveq	r0, #0
 80003ea:	fab1 f381 	clz	r3, r1
 80003ee:	bf08      	it	eq
 80003f0:	3320      	addeq	r3, #32
 80003f2:	f1a3 030b 	sub.w	r3, r3, #11
 80003f6:	f1b3 0220 	subs.w	r2, r3, #32
 80003fa:	da0c      	bge.n	8000416 <__adddf3+0x16e>
 80003fc:	320c      	adds	r2, #12
 80003fe:	dd08      	ble.n	8000412 <__adddf3+0x16a>
 8000400:	f102 0c14 	add.w	ip, r2, #20
 8000404:	f1c2 020c 	rsb	r2, r2, #12
 8000408:	fa01 f00c 	lsl.w	r0, r1, ip
 800040c:	fa21 f102 	lsr.w	r1, r1, r2
 8000410:	e00c      	b.n	800042c <__adddf3+0x184>
 8000412:	f102 0214 	add.w	r2, r2, #20
 8000416:	bfd8      	it	le
 8000418:	f1c2 0c20 	rsble	ip, r2, #32
 800041c:	fa01 f102 	lsl.w	r1, r1, r2
 8000420:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000424:	bfdc      	itt	le
 8000426:	ea41 010c 	orrle.w	r1, r1, ip
 800042a:	4090      	lslle	r0, r2
 800042c:	1ae4      	subs	r4, r4, r3
 800042e:	bfa2      	ittt	ge
 8000430:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000434:	4329      	orrge	r1, r5
 8000436:	bd30      	popge	{r4, r5, pc}
 8000438:	ea6f 0404 	mvn.w	r4, r4
 800043c:	3c1f      	subs	r4, #31
 800043e:	da1c      	bge.n	800047a <__adddf3+0x1d2>
 8000440:	340c      	adds	r4, #12
 8000442:	dc0e      	bgt.n	8000462 <__adddf3+0x1ba>
 8000444:	f104 0414 	add.w	r4, r4, #20
 8000448:	f1c4 0220 	rsb	r2, r4, #32
 800044c:	fa20 f004 	lsr.w	r0, r0, r4
 8000450:	fa01 f302 	lsl.w	r3, r1, r2
 8000454:	ea40 0003 	orr.w	r0, r0, r3
 8000458:	fa21 f304 	lsr.w	r3, r1, r4
 800045c:	ea45 0103 	orr.w	r1, r5, r3
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	f1c4 040c 	rsb	r4, r4, #12
 8000466:	f1c4 0220 	rsb	r2, r4, #32
 800046a:	fa20 f002 	lsr.w	r0, r0, r2
 800046e:	fa01 f304 	lsl.w	r3, r1, r4
 8000472:	ea40 0003 	orr.w	r0, r0, r3
 8000476:	4629      	mov	r1, r5
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	fa21 f004 	lsr.w	r0, r1, r4
 800047e:	4629      	mov	r1, r5
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	f094 0f00 	teq	r4, #0
 8000486:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048a:	bf06      	itte	eq
 800048c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000490:	3401      	addeq	r4, #1
 8000492:	3d01      	subne	r5, #1
 8000494:	e74e      	b.n	8000334 <__adddf3+0x8c>
 8000496:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049a:	bf18      	it	ne
 800049c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a0:	d029      	beq.n	80004f6 <__adddf3+0x24e>
 80004a2:	ea94 0f05 	teq	r4, r5
 80004a6:	bf08      	it	eq
 80004a8:	ea90 0f02 	teqeq	r0, r2
 80004ac:	d005      	beq.n	80004ba <__adddf3+0x212>
 80004ae:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b2:	bf04      	itt	eq
 80004b4:	4619      	moveq	r1, r3
 80004b6:	4610      	moveq	r0, r2
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	ea91 0f03 	teq	r1, r3
 80004be:	bf1e      	ittt	ne
 80004c0:	2100      	movne	r1, #0
 80004c2:	2000      	movne	r0, #0
 80004c4:	bd30      	popne	{r4, r5, pc}
 80004c6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ca:	d105      	bne.n	80004d8 <__adddf3+0x230>
 80004cc:	0040      	lsls	r0, r0, #1
 80004ce:	4149      	adcs	r1, r1
 80004d0:	bf28      	it	cs
 80004d2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004d6:	bd30      	pop	{r4, r5, pc}
 80004d8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004dc:	bf3c      	itt	cc
 80004de:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e2:	bd30      	popcc	{r4, r5, pc}
 80004e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004ec:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f0:	f04f 0000 	mov.w	r0, #0
 80004f4:	bd30      	pop	{r4, r5, pc}
 80004f6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fa:	bf1a      	itte	ne
 80004fc:	4619      	movne	r1, r3
 80004fe:	4610      	movne	r0, r2
 8000500:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000504:	bf1c      	itt	ne
 8000506:	460b      	movne	r3, r1
 8000508:	4602      	movne	r2, r0
 800050a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800050e:	bf06      	itte	eq
 8000510:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000514:	ea91 0f03 	teqeq	r1, r3
 8000518:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800051c:	bd30      	pop	{r4, r5, pc}
 800051e:	bf00      	nop

08000520 <__aeabi_ui2d>:
 8000520:	f090 0f00 	teq	r0, #0
 8000524:	bf04      	itt	eq
 8000526:	2100      	moveq	r1, #0
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000530:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000534:	f04f 0500 	mov.w	r5, #0
 8000538:	f04f 0100 	mov.w	r1, #0
 800053c:	e750      	b.n	80003e0 <__adddf3+0x138>
 800053e:	bf00      	nop

08000540 <__aeabi_i2d>:
 8000540:	f090 0f00 	teq	r0, #0
 8000544:	bf04      	itt	eq
 8000546:	2100      	moveq	r1, #0
 8000548:	4770      	bxeq	lr
 800054a:	b530      	push	{r4, r5, lr}
 800054c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000550:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000554:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000558:	bf48      	it	mi
 800055a:	4240      	negmi	r0, r0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e73e      	b.n	80003e0 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_f2d>:
 8000564:	0042      	lsls	r2, r0, #1
 8000566:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056a:	ea4f 0131 	mov.w	r1, r1, rrx
 800056e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000572:	bf1f      	itttt	ne
 8000574:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000578:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800057c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000580:	4770      	bxne	lr
 8000582:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000586:	bf08      	it	eq
 8000588:	4770      	bxeq	lr
 800058a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800058e:	bf04      	itt	eq
 8000590:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000594:	4770      	bxeq	lr
 8000596:	b530      	push	{r4, r5, lr}
 8000598:	f44f 7460 	mov.w	r4, #896	; 0x380
 800059c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a4:	e71c      	b.n	80003e0 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_ul2d>:
 80005a8:	ea50 0201 	orrs.w	r2, r0, r1
 80005ac:	bf08      	it	eq
 80005ae:	4770      	bxeq	lr
 80005b0:	b530      	push	{r4, r5, lr}
 80005b2:	f04f 0500 	mov.w	r5, #0
 80005b6:	e00a      	b.n	80005ce <__aeabi_l2d+0x16>

080005b8 <__aeabi_l2d>:
 80005b8:	ea50 0201 	orrs.w	r2, r0, r1
 80005bc:	bf08      	it	eq
 80005be:	4770      	bxeq	lr
 80005c0:	b530      	push	{r4, r5, lr}
 80005c2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005c6:	d502      	bpl.n	80005ce <__aeabi_l2d+0x16>
 80005c8:	4240      	negs	r0, r0
 80005ca:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ce:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005d6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005da:	f43f aed8 	beq.w	800038e <__adddf3+0xe6>
 80005de:	f04f 0203 	mov.w	r2, #3
 80005e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e6:	bf18      	it	ne
 80005e8:	3203      	addne	r2, #3
 80005ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ee:	bf18      	it	ne
 80005f0:	3203      	addne	r2, #3
 80005f2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005f6:	f1c2 0320 	rsb	r3, r2, #32
 80005fa:	fa00 fc03 	lsl.w	ip, r0, r3
 80005fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000602:	fa01 fe03 	lsl.w	lr, r1, r3
 8000606:	ea40 000e 	orr.w	r0, r0, lr
 800060a:	fa21 f102 	lsr.w	r1, r1, r2
 800060e:	4414      	add	r4, r2
 8000610:	e6bd      	b.n	800038e <__adddf3+0xe6>
 8000612:	bf00      	nop

08000614 <__aeabi_dmul>:
 8000614:	b570      	push	{r4, r5, r6, lr}
 8000616:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800061e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000622:	bf1d      	ittte	ne
 8000624:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000628:	ea94 0f0c 	teqne	r4, ip
 800062c:	ea95 0f0c 	teqne	r5, ip
 8000630:	f000 f8de 	bleq	80007f0 <__aeabi_dmul+0x1dc>
 8000634:	442c      	add	r4, r5
 8000636:	ea81 0603 	eor.w	r6, r1, r3
 800063a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800063e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000642:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000646:	bf18      	it	ne
 8000648:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800064c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000650:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000654:	d038      	beq.n	80006c8 <__aeabi_dmul+0xb4>
 8000656:	fba0 ce02 	umull	ip, lr, r0, r2
 800065a:	f04f 0500 	mov.w	r5, #0
 800065e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000662:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000666:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066a:	f04f 0600 	mov.w	r6, #0
 800066e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000672:	f09c 0f00 	teq	ip, #0
 8000676:	bf18      	it	ne
 8000678:	f04e 0e01 	orrne.w	lr, lr, #1
 800067c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000680:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000684:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000688:	d204      	bcs.n	8000694 <__aeabi_dmul+0x80>
 800068a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800068e:	416d      	adcs	r5, r5
 8000690:	eb46 0606 	adc.w	r6, r6, r6
 8000694:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000698:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800069c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006a8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006ac:	bf88      	it	hi
 80006ae:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b2:	d81e      	bhi.n	80006f2 <__aeabi_dmul+0xde>
 80006b4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006b8:	bf08      	it	eq
 80006ba:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006be:	f150 0000 	adcs.w	r0, r0, #0
 80006c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006c6:	bd70      	pop	{r4, r5, r6, pc}
 80006c8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006cc:	ea46 0101 	orr.w	r1, r6, r1
 80006d0:	ea40 0002 	orr.w	r0, r0, r2
 80006d4:	ea81 0103 	eor.w	r1, r1, r3
 80006d8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006dc:	bfc2      	ittt	gt
 80006de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006e6:	bd70      	popgt	{r4, r5, r6, pc}
 80006e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006ec:	f04f 0e00 	mov.w	lr, #0
 80006f0:	3c01      	subs	r4, #1
 80006f2:	f300 80ab 	bgt.w	800084c <__aeabi_dmul+0x238>
 80006f6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fa:	bfde      	ittt	le
 80006fc:	2000      	movle	r0, #0
 80006fe:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000702:	bd70      	pople	{r4, r5, r6, pc}
 8000704:	f1c4 0400 	rsb	r4, r4, #0
 8000708:	3c20      	subs	r4, #32
 800070a:	da35      	bge.n	8000778 <__aeabi_dmul+0x164>
 800070c:	340c      	adds	r4, #12
 800070e:	dc1b      	bgt.n	8000748 <__aeabi_dmul+0x134>
 8000710:	f104 0414 	add.w	r4, r4, #20
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f305 	lsl.w	r3, r0, r5
 800071c:	fa20 f004 	lsr.w	r0, r0, r4
 8000720:	fa01 f205 	lsl.w	r2, r1, r5
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800072c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000730:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000734:	fa21 f604 	lsr.w	r6, r1, r4
 8000738:	eb42 0106 	adc.w	r1, r2, r6
 800073c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000740:	bf08      	it	eq
 8000742:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000746:	bd70      	pop	{r4, r5, r6, pc}
 8000748:	f1c4 040c 	rsb	r4, r4, #12
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f304 	lsl.w	r3, r0, r4
 8000754:	fa20 f005 	lsr.w	r0, r0, r5
 8000758:	fa01 f204 	lsl.w	r2, r1, r4
 800075c:	ea40 0002 	orr.w	r0, r0, r2
 8000760:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	f141 0100 	adc.w	r1, r1, #0
 800076c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000770:	bf08      	it	eq
 8000772:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000776:	bd70      	pop	{r4, r5, r6, pc}
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f205 	lsl.w	r2, r0, r5
 8000780:	ea4e 0e02 	orr.w	lr, lr, r2
 8000784:	fa20 f304 	lsr.w	r3, r0, r4
 8000788:	fa01 f205 	lsl.w	r2, r1, r5
 800078c:	ea43 0302 	orr.w	r3, r3, r2
 8000790:	fa21 f004 	lsr.w	r0, r1, r4
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	fa21 f204 	lsr.w	r2, r1, r4
 800079c:	ea20 0002 	bic.w	r0, r0, r2
 80007a0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a8:	bf08      	it	eq
 80007aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ae:	bd70      	pop	{r4, r5, r6, pc}
 80007b0:	f094 0f00 	teq	r4, #0
 80007b4:	d10f      	bne.n	80007d6 <__aeabi_dmul+0x1c2>
 80007b6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ba:	0040      	lsls	r0, r0, #1
 80007bc:	eb41 0101 	adc.w	r1, r1, r1
 80007c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c4:	bf08      	it	eq
 80007c6:	3c01      	subeq	r4, #1
 80007c8:	d0f7      	beq.n	80007ba <__aeabi_dmul+0x1a6>
 80007ca:	ea41 0106 	orr.w	r1, r1, r6
 80007ce:	f095 0f00 	teq	r5, #0
 80007d2:	bf18      	it	ne
 80007d4:	4770      	bxne	lr
 80007d6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007da:	0052      	lsls	r2, r2, #1
 80007dc:	eb43 0303 	adc.w	r3, r3, r3
 80007e0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e4:	bf08      	it	eq
 80007e6:	3d01      	subeq	r5, #1
 80007e8:	d0f7      	beq.n	80007da <__aeabi_dmul+0x1c6>
 80007ea:	ea43 0306 	orr.w	r3, r3, r6
 80007ee:	4770      	bx	lr
 80007f0:	ea94 0f0c 	teq	r4, ip
 80007f4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007f8:	bf18      	it	ne
 80007fa:	ea95 0f0c 	teqne	r5, ip
 80007fe:	d00c      	beq.n	800081a <__aeabi_dmul+0x206>
 8000800:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000804:	bf18      	it	ne
 8000806:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080a:	d1d1      	bne.n	80007b0 <__aeabi_dmul+0x19c>
 800080c:	ea81 0103 	eor.w	r1, r1, r3
 8000810:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000814:	f04f 0000 	mov.w	r0, #0
 8000818:	bd70      	pop	{r4, r5, r6, pc}
 800081a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800081e:	bf06      	itte	eq
 8000820:	4610      	moveq	r0, r2
 8000822:	4619      	moveq	r1, r3
 8000824:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000828:	d019      	beq.n	800085e <__aeabi_dmul+0x24a>
 800082a:	ea94 0f0c 	teq	r4, ip
 800082e:	d102      	bne.n	8000836 <__aeabi_dmul+0x222>
 8000830:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000834:	d113      	bne.n	800085e <__aeabi_dmul+0x24a>
 8000836:	ea95 0f0c 	teq	r5, ip
 800083a:	d105      	bne.n	8000848 <__aeabi_dmul+0x234>
 800083c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000840:	bf1c      	itt	ne
 8000842:	4610      	movne	r0, r2
 8000844:	4619      	movne	r1, r3
 8000846:	d10a      	bne.n	800085e <__aeabi_dmul+0x24a>
 8000848:	ea81 0103 	eor.w	r1, r1, r3
 800084c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000850:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000854:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000862:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000866:	bd70      	pop	{r4, r5, r6, pc}

08000868 <__aeabi_ddiv>:
 8000868:	b570      	push	{r4, r5, r6, lr}
 800086a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800086e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000872:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000876:	bf1d      	ittte	ne
 8000878:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800087c:	ea94 0f0c 	teqne	r4, ip
 8000880:	ea95 0f0c 	teqne	r5, ip
 8000884:	f000 f8a7 	bleq	80009d6 <__aeabi_ddiv+0x16e>
 8000888:	eba4 0405 	sub.w	r4, r4, r5
 800088c:	ea81 0e03 	eor.w	lr, r1, r3
 8000890:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000894:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000898:	f000 8088 	beq.w	80009ac <__aeabi_ddiv+0x144>
 800089c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008a8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008ac:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008b8:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008bc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c0:	429d      	cmp	r5, r3
 80008c2:	bf08      	it	eq
 80008c4:	4296      	cmpeq	r6, r2
 80008c6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ca:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ce:	d202      	bcs.n	80008d6 <__aeabi_ddiv+0x6e>
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	1ab6      	subs	r6, r6, r2
 80008d8:	eb65 0503 	sbc.w	r5, r5, r3
 80008dc:	085b      	lsrs	r3, r3, #1
 80008de:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008e6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ea:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ee:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f2:	bf22      	ittt	cs
 80008f4:	1ab6      	subcs	r6, r6, r2
 80008f6:	4675      	movcs	r5, lr
 80008f8:	ea40 000c 	orrcs.w	r0, r0, ip
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	ebb6 0e02 	subs.w	lr, r6, r2
 8000906:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090a:	bf22      	ittt	cs
 800090c:	1ab6      	subcs	r6, r6, r2
 800090e:	4675      	movcs	r5, lr
 8000910:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	ebb6 0e02 	subs.w	lr, r6, r2
 800091e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000922:	bf22      	ittt	cs
 8000924:	1ab6      	subcs	r6, r6, r2
 8000926:	4675      	movcs	r5, lr
 8000928:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800092c:	085b      	lsrs	r3, r3, #1
 800092e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000932:	ebb6 0e02 	subs.w	lr, r6, r2
 8000936:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093a:	bf22      	ittt	cs
 800093c:	1ab6      	subcs	r6, r6, r2
 800093e:	4675      	movcs	r5, lr
 8000940:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000944:	ea55 0e06 	orrs.w	lr, r5, r6
 8000948:	d018      	beq.n	800097c <__aeabi_ddiv+0x114>
 800094a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800094e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000952:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000956:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800095e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000962:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000966:	d1c0      	bne.n	80008ea <__aeabi_ddiv+0x82>
 8000968:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800096c:	d10b      	bne.n	8000986 <__aeabi_ddiv+0x11e>
 800096e:	ea41 0100 	orr.w	r1, r1, r0
 8000972:	f04f 0000 	mov.w	r0, #0
 8000976:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097a:	e7b6      	b.n	80008ea <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	bf04      	itt	eq
 8000982:	4301      	orreq	r1, r0
 8000984:	2000      	moveq	r0, #0
 8000986:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098a:	bf88      	it	hi
 800098c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000990:	f63f aeaf 	bhi.w	80006f2 <__aeabi_dmul+0xde>
 8000994:	ebb5 0c03 	subs.w	ip, r5, r3
 8000998:	bf04      	itt	eq
 800099a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800099e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a2:	f150 0000 	adcs.w	r0, r0, #0
 80009a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009aa:	bd70      	pop	{r4, r5, r6, pc}
 80009ac:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009b8:	bfc2      	ittt	gt
 80009ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c2:	bd70      	popgt	{r4, r5, r6, pc}
 80009c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009c8:	f04f 0e00 	mov.w	lr, #0
 80009cc:	3c01      	subs	r4, #1
 80009ce:	e690      	b.n	80006f2 <__aeabi_dmul+0xde>
 80009d0:	ea45 0e06 	orr.w	lr, r5, r6
 80009d4:	e68d      	b.n	80006f2 <__aeabi_dmul+0xde>
 80009d6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009da:	ea94 0f0c 	teq	r4, ip
 80009de:	bf08      	it	eq
 80009e0:	ea95 0f0c 	teqeq	r5, ip
 80009e4:	f43f af3b 	beq.w	800085e <__aeabi_dmul+0x24a>
 80009e8:	ea94 0f0c 	teq	r4, ip
 80009ec:	d10a      	bne.n	8000a04 <__aeabi_ddiv+0x19c>
 80009ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f2:	f47f af34 	bne.w	800085e <__aeabi_dmul+0x24a>
 80009f6:	ea95 0f0c 	teq	r5, ip
 80009fa:	f47f af25 	bne.w	8000848 <__aeabi_dmul+0x234>
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	e72c      	b.n	800085e <__aeabi_dmul+0x24a>
 8000a04:	ea95 0f0c 	teq	r5, ip
 8000a08:	d106      	bne.n	8000a18 <__aeabi_ddiv+0x1b0>
 8000a0a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a0e:	f43f aefd 	beq.w	800080c <__aeabi_dmul+0x1f8>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e722      	b.n	800085e <__aeabi_dmul+0x24a>
 8000a18:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a1c:	bf18      	it	ne
 8000a1e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a22:	f47f aec5 	bne.w	80007b0 <__aeabi_dmul+0x19c>
 8000a26:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2a:	f47f af0d 	bne.w	8000848 <__aeabi_dmul+0x234>
 8000a2e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a32:	f47f aeeb 	bne.w	800080c <__aeabi_dmul+0x1f8>
 8000a36:	e712      	b.n	800085e <__aeabi_dmul+0x24a>

08000a38 <__gedf2>:
 8000a38:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a3c:	e006      	b.n	8000a4c <__cmpdf2+0x4>
 8000a3e:	bf00      	nop

08000a40 <__ledf2>:
 8000a40:	f04f 0c01 	mov.w	ip, #1
 8000a44:	e002      	b.n	8000a4c <__cmpdf2+0x4>
 8000a46:	bf00      	nop

08000a48 <__cmpdf2>:
 8000a48:	f04f 0c01 	mov.w	ip, #1
 8000a4c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a5c:	bf18      	it	ne
 8000a5e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a62:	d01b      	beq.n	8000a9c <__cmpdf2+0x54>
 8000a64:	b001      	add	sp, #4
 8000a66:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6a:	bf0c      	ite	eq
 8000a6c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a70:	ea91 0f03 	teqne	r1, r3
 8000a74:	bf02      	ittt	eq
 8000a76:	ea90 0f02 	teqeq	r0, r2
 8000a7a:	2000      	moveq	r0, #0
 8000a7c:	4770      	bxeq	lr
 8000a7e:	f110 0f00 	cmn.w	r0, #0
 8000a82:	ea91 0f03 	teq	r1, r3
 8000a86:	bf58      	it	pl
 8000a88:	4299      	cmppl	r1, r3
 8000a8a:	bf08      	it	eq
 8000a8c:	4290      	cmpeq	r0, r2
 8000a8e:	bf2c      	ite	cs
 8000a90:	17d8      	asrcs	r0, r3, #31
 8000a92:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a96:	f040 0001 	orr.w	r0, r0, #1
 8000a9a:	4770      	bx	lr
 8000a9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__cmpdf2+0x64>
 8000aa6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aaa:	d107      	bne.n	8000abc <__cmpdf2+0x74>
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab4:	d1d6      	bne.n	8000a64 <__cmpdf2+0x1c>
 8000ab6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aba:	d0d3      	beq.n	8000a64 <__cmpdf2+0x1c>
 8000abc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_cdrcmple>:
 8000ac4:	4684      	mov	ip, r0
 8000ac6:	4610      	mov	r0, r2
 8000ac8:	4662      	mov	r2, ip
 8000aca:	468c      	mov	ip, r1
 8000acc:	4619      	mov	r1, r3
 8000ace:	4663      	mov	r3, ip
 8000ad0:	e000      	b.n	8000ad4 <__aeabi_cdcmpeq>
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_cdcmpeq>:
 8000ad4:	b501      	push	{r0, lr}
 8000ad6:	f7ff ffb7 	bl	8000a48 <__cmpdf2>
 8000ada:	2800      	cmp	r0, #0
 8000adc:	bf48      	it	mi
 8000ade:	f110 0f00 	cmnmi.w	r0, #0
 8000ae2:	bd01      	pop	{r0, pc}

08000ae4 <__aeabi_dcmpeq>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff fff4 	bl	8000ad4 <__aeabi_cdcmpeq>
 8000aec:	bf0c      	ite	eq
 8000aee:	2001      	moveq	r0, #1
 8000af0:	2000      	movne	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmplt>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff ffea 	bl	8000ad4 <__aeabi_cdcmpeq>
 8000b00:	bf34      	ite	cc
 8000b02:	2001      	movcc	r0, #1
 8000b04:	2000      	movcs	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmple>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffe0 	bl	8000ad4 <__aeabi_cdcmpeq>
 8000b14:	bf94      	ite	ls
 8000b16:	2001      	movls	r0, #1
 8000b18:	2000      	movhi	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmpge>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffce 	bl	8000ac4 <__aeabi_cdrcmple>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpgt>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffc4 	bl	8000ac4 <__aeabi_cdrcmple>
 8000b3c:	bf34      	ite	cc
 8000b3e:	2001      	movcc	r0, #1
 8000b40:	2000      	movcs	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpun>:
 8000b48:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b50:	d102      	bne.n	8000b58 <__aeabi_dcmpun+0x10>
 8000b52:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b56:	d10a      	bne.n	8000b6e <__aeabi_dcmpun+0x26>
 8000b58:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b5c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b60:	d102      	bne.n	8000b68 <__aeabi_dcmpun+0x20>
 8000b62:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b66:	d102      	bne.n	8000b6e <__aeabi_dcmpun+0x26>
 8000b68:	f04f 0000 	mov.w	r0, #0
 8000b6c:	4770      	bx	lr
 8000b6e:	f04f 0001 	mov.w	r0, #1
 8000b72:	4770      	bx	lr

08000b74 <__aeabi_d2iz>:
 8000b74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b7c:	d215      	bcs.n	8000baa <__aeabi_d2iz+0x36>
 8000b7e:	d511      	bpl.n	8000ba4 <__aeabi_d2iz+0x30>
 8000b80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b88:	d912      	bls.n	8000bb0 <__aeabi_d2iz+0x3c>
 8000b8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b9e:	bf18      	it	ne
 8000ba0:	4240      	negne	r0, r0
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bae:	d105      	bne.n	8000bbc <__aeabi_d2iz+0x48>
 8000bb0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb4:	bf08      	it	eq
 8000bb6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bba:	4770      	bx	lr
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop

08000bc4 <__aeabi_d2uiz>:
 8000bc4:	004a      	lsls	r2, r1, #1
 8000bc6:	d211      	bcs.n	8000bec <__aeabi_d2uiz+0x28>
 8000bc8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bcc:	d211      	bcs.n	8000bf2 <__aeabi_d2uiz+0x2e>
 8000bce:	d50d      	bpl.n	8000bec <__aeabi_d2uiz+0x28>
 8000bd0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bd8:	d40e      	bmi.n	8000bf8 <__aeabi_d2uiz+0x34>
 8000bda:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bde:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000be6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bea:	4770      	bx	lr
 8000bec:	f04f 0000 	mov.w	r0, #0
 8000bf0:	4770      	bx	lr
 8000bf2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf6:	d102      	bne.n	8000bfe <__aeabi_d2uiz+0x3a>
 8000bf8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bfc:	4770      	bx	lr
 8000bfe:	f04f 0000 	mov.w	r0, #0
 8000c02:	4770      	bx	lr

08000c04 <__aeabi_d2f>:
 8000c04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c08:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c0c:	bf24      	itt	cs
 8000c0e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c12:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c16:	d90d      	bls.n	8000c34 <__aeabi_d2f+0x30>
 8000c18:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c1c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c20:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c24:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c28:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c2c:	bf08      	it	eq
 8000c2e:	f020 0001 	biceq.w	r0, r0, #1
 8000c32:	4770      	bx	lr
 8000c34:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c38:	d121      	bne.n	8000c7e <__aeabi_d2f+0x7a>
 8000c3a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c3e:	bfbc      	itt	lt
 8000c40:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c44:	4770      	bxlt	lr
 8000c46:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c4e:	f1c2 0218 	rsb	r2, r2, #24
 8000c52:	f1c2 0c20 	rsb	ip, r2, #32
 8000c56:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5a:	fa20 f002 	lsr.w	r0, r0, r2
 8000c5e:	bf18      	it	ne
 8000c60:	f040 0001 	orrne.w	r0, r0, #1
 8000c64:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c68:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c6c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c70:	ea40 000c 	orr.w	r0, r0, ip
 8000c74:	fa23 f302 	lsr.w	r3, r3, r2
 8000c78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c7c:	e7cc      	b.n	8000c18 <__aeabi_d2f+0x14>
 8000c7e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c82:	d107      	bne.n	8000c94 <__aeabi_d2f+0x90>
 8000c84:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c88:	bf1e      	ittt	ne
 8000c8a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c8e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c92:	4770      	bxne	lr
 8000c94:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop

08000ca4 <__aeabi_uldivmod>:
 8000ca4:	b953      	cbnz	r3, 8000cbc <__aeabi_uldivmod+0x18>
 8000ca6:	b94a      	cbnz	r2, 8000cbc <__aeabi_uldivmod+0x18>
 8000ca8:	2900      	cmp	r1, #0
 8000caa:	bf08      	it	eq
 8000cac:	2800      	cmpeq	r0, #0
 8000cae:	bf1c      	itt	ne
 8000cb0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cb4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cb8:	f000 b9b8 	b.w	800102c <__aeabi_idiv0>
 8000cbc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc4:	f000 f83c 	bl	8000d40 <__udivmoddi4>
 8000cc8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ccc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd0:	b004      	add	sp, #16
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_d2lz>:
 8000cd4:	b538      	push	{r3, r4, r5, lr}
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	2300      	movs	r3, #0
 8000cda:	4604      	mov	r4, r0
 8000cdc:	460d      	mov	r5, r1
 8000cde:	f7ff ff0b 	bl	8000af8 <__aeabi_dcmplt>
 8000ce2:	b928      	cbnz	r0, 8000cf0 <__aeabi_d2lz+0x1c>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	4629      	mov	r1, r5
 8000ce8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cec:	f000 b80a 	b.w	8000d04 <__aeabi_d2ulz>
 8000cf0:	4620      	mov	r0, r4
 8000cf2:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cf6:	f000 f805 	bl	8000d04 <__aeabi_d2ulz>
 8000cfa:	4240      	negs	r0, r0
 8000cfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d00:	bd38      	pop	{r3, r4, r5, pc}
 8000d02:	bf00      	nop

08000d04 <__aeabi_d2ulz>:
 8000d04:	b5d0      	push	{r4, r6, r7, lr}
 8000d06:	2200      	movs	r2, #0
 8000d08:	4b0b      	ldr	r3, [pc, #44]	; (8000d38 <__aeabi_d2ulz+0x34>)
 8000d0a:	4606      	mov	r6, r0
 8000d0c:	460f      	mov	r7, r1
 8000d0e:	f7ff fc81 	bl	8000614 <__aeabi_dmul>
 8000d12:	f7ff ff57 	bl	8000bc4 <__aeabi_d2uiz>
 8000d16:	4604      	mov	r4, r0
 8000d18:	f7ff fc02 	bl	8000520 <__aeabi_ui2d>
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4b07      	ldr	r3, [pc, #28]	; (8000d3c <__aeabi_d2ulz+0x38>)
 8000d20:	f7ff fc78 	bl	8000614 <__aeabi_dmul>
 8000d24:	4602      	mov	r2, r0
 8000d26:	460b      	mov	r3, r1
 8000d28:	4630      	mov	r0, r6
 8000d2a:	4639      	mov	r1, r7
 8000d2c:	f7ff faba 	bl	80002a4 <__aeabi_dsub>
 8000d30:	f7ff ff48 	bl	8000bc4 <__aeabi_d2uiz>
 8000d34:	4621      	mov	r1, r4
 8000d36:	bdd0      	pop	{r4, r6, r7, pc}
 8000d38:	3df00000 	.word	0x3df00000
 8000d3c:	41f00000 	.word	0x41f00000

08000d40 <__udivmoddi4>:
 8000d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d44:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8000d46:	460d      	mov	r5, r1
 8000d48:	4604      	mov	r4, r0
 8000d4a:	460f      	mov	r7, r1
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d146      	bne.n	8000dde <__udivmoddi4+0x9e>
 8000d50:	428a      	cmp	r2, r1
 8000d52:	4694      	mov	ip, r2
 8000d54:	d95e      	bls.n	8000e14 <__udivmoddi4+0xd4>
 8000d56:	fab2 f382 	clz	r3, r2
 8000d5a:	b143      	cbz	r3, 8000d6e <__udivmoddi4+0x2e>
 8000d5c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d60:	f1c3 0220 	rsb	r2, r3, #32
 8000d64:	409f      	lsls	r7, r3
 8000d66:	409c      	lsls	r4, r3
 8000d68:	fa20 f202 	lsr.w	r2, r0, r2
 8000d6c:	4317      	orrs	r7, r2
 8000d6e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d72:	fa1f f58c 	uxth.w	r5, ip
 8000d76:	0c22      	lsrs	r2, r4, #16
 8000d78:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d7c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d80:	fb01 f005 	mul.w	r0, r1, r5
 8000d84:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d88:	4290      	cmp	r0, r2
 8000d8a:	d908      	bls.n	8000d9e <__udivmoddi4+0x5e>
 8000d8c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d90:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000d94:	d202      	bcs.n	8000d9c <__udivmoddi4+0x5c>
 8000d96:	4290      	cmp	r0, r2
 8000d98:	f200 8134 	bhi.w	8001004 <__udivmoddi4+0x2c4>
 8000d9c:	4639      	mov	r1, r7
 8000d9e:	1a12      	subs	r2, r2, r0
 8000da0:	b2a4      	uxth	r4, r4
 8000da2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000da6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000daa:	fb00 f505 	mul.w	r5, r0, r5
 8000dae:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000db2:	42a5      	cmp	r5, r4
 8000db4:	d908      	bls.n	8000dc8 <__udivmoddi4+0x88>
 8000db6:	eb1c 0404 	adds.w	r4, ip, r4
 8000dba:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000dbe:	d202      	bcs.n	8000dc6 <__udivmoddi4+0x86>
 8000dc0:	42a5      	cmp	r5, r4
 8000dc2:	f200 8119 	bhi.w	8000ff8 <__udivmoddi4+0x2b8>
 8000dc6:	4610      	mov	r0, r2
 8000dc8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dcc:	1b64      	subs	r4, r4, r5
 8000dce:	2100      	movs	r1, #0
 8000dd0:	b11e      	cbz	r6, 8000dda <__udivmoddi4+0x9a>
 8000dd2:	40dc      	lsrs	r4, r3
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	e9c6 4300 	strd	r4, r3, [r6]
 8000dda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0xb4>
 8000de2:	2e00      	cmp	r6, #0
 8000de4:	f000 80fc 	beq.w	8000fe0 <__udivmoddi4+0x2a0>
 8000de8:	2100      	movs	r1, #0
 8000dea:	e9c6 0500 	strd	r0, r5, [r6]
 8000dee:	4608      	mov	r0, r1
 8000df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000df4:	fab3 f183 	clz	r1, r3
 8000df8:	2900      	cmp	r1, #0
 8000dfa:	d14c      	bne.n	8000e96 <__udivmoddi4+0x156>
 8000dfc:	42ab      	cmp	r3, r5
 8000dfe:	f0c0 80f2 	bcc.w	8000fe6 <__udivmoddi4+0x2a6>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f240 80ef 	bls.w	8000fe6 <__udivmoddi4+0x2a6>
 8000e08:	4608      	mov	r0, r1
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	d0e5      	beq.n	8000dda <__udivmoddi4+0x9a>
 8000e0e:	e9c6 4700 	strd	r4, r7, [r6]
 8000e12:	e7e2      	b.n	8000dda <__udivmoddi4+0x9a>
 8000e14:	b902      	cbnz	r2, 8000e18 <__udivmoddi4+0xd8>
 8000e16:	deff      	udf	#255	; 0xff
 8000e18:	fab2 f382 	clz	r3, r2
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	f040 809f 	bne.w	8000f60 <__udivmoddi4+0x220>
 8000e22:	1a8a      	subs	r2, r1, r2
 8000e24:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000e28:	fa1f f78c 	uxth.w	r7, ip
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	fbb2 f5fe 	udiv	r5, r2, lr
 8000e32:	fb0e 2015 	mls	r0, lr, r5, r2
 8000e36:	0c22      	lsrs	r2, r4, #16
 8000e38:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e3c:	fb07 f005 	mul.w	r0, r7, r5
 8000e40:	4290      	cmp	r0, r2
 8000e42:	d90f      	bls.n	8000e64 <__udivmoddi4+0x124>
 8000e44:	eb1c 0202 	adds.w	r2, ip, r2
 8000e48:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e4c:	bf2c      	ite	cs
 8000e4e:	f04f 0901 	movcs.w	r9, #1
 8000e52:	f04f 0900 	movcc.w	r9, #0
 8000e56:	4290      	cmp	r0, r2
 8000e58:	d903      	bls.n	8000e62 <__udivmoddi4+0x122>
 8000e5a:	f1b9 0f00 	cmp.w	r9, #0
 8000e5e:	f000 80ce 	beq.w	8000ffe <__udivmoddi4+0x2be>
 8000e62:	4645      	mov	r5, r8
 8000e64:	1a12      	subs	r2, r2, r0
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e6c:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e70:	fb00 f707 	mul.w	r7, r0, r7
 8000e74:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e78:	42a7      	cmp	r7, r4
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x14e>
 8000e7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e80:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000e84:	d202      	bcs.n	8000e8c <__udivmoddi4+0x14c>
 8000e86:	42a7      	cmp	r7, r4
 8000e88:	f200 80b3 	bhi.w	8000ff2 <__udivmoddi4+0x2b2>
 8000e8c:	4610      	mov	r0, r2
 8000e8e:	1be4      	subs	r4, r4, r7
 8000e90:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e94:	e79c      	b.n	8000dd0 <__udivmoddi4+0x90>
 8000e96:	f1c1 0420 	rsb	r4, r1, #32
 8000e9a:	408b      	lsls	r3, r1
 8000e9c:	fa05 fc01 	lsl.w	ip, r5, r1
 8000ea0:	fa22 f704 	lsr.w	r7, r2, r4
 8000ea4:	40e5      	lsrs	r5, r4
 8000ea6:	408a      	lsls	r2, r1
 8000ea8:	431f      	orrs	r7, r3
 8000eaa:	fa20 f304 	lsr.w	r3, r0, r4
 8000eae:	4088      	lsls	r0, r1
 8000eb0:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000eb4:	ea43 030c 	orr.w	r3, r3, ip
 8000eb8:	fa1f fc87 	uxth.w	ip, r7
 8000ebc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ec0:	fbb5 fef8 	udiv	lr, r5, r8
 8000ec4:	fb08 551e 	mls	r5, r8, lr, r5
 8000ec8:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000ecc:	fb0e f90c 	mul.w	r9, lr, ip
 8000ed0:	45a9      	cmp	r9, r5
 8000ed2:	d90e      	bls.n	8000ef2 <__udivmoddi4+0x1b2>
 8000ed4:	197d      	adds	r5, r7, r5
 8000ed6:	f10e 3aff 	add.w	sl, lr, #4294967295	; 0xffffffff
 8000eda:	bf2c      	ite	cs
 8000edc:	f04f 0b01 	movcs.w	fp, #1
 8000ee0:	f04f 0b00 	movcc.w	fp, #0
 8000ee4:	45a9      	cmp	r9, r5
 8000ee6:	d903      	bls.n	8000ef0 <__udivmoddi4+0x1b0>
 8000ee8:	f1bb 0f00 	cmp.w	fp, #0
 8000eec:	f000 808d 	beq.w	800100a <__udivmoddi4+0x2ca>
 8000ef0:	46d6      	mov	lr, sl
 8000ef2:	eba5 0509 	sub.w	r5, r5, r9
 8000ef6:	fa1f f983 	uxth.w	r9, r3
 8000efa:	fbb5 f3f8 	udiv	r3, r5, r8
 8000efe:	fb08 5513 	mls	r5, r8, r3, r5
 8000f02:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f06:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000f0a:	45ac      	cmp	ip, r5
 8000f0c:	d906      	bls.n	8000f1c <__udivmoddi4+0x1dc>
 8000f0e:	197d      	adds	r5, r7, r5
 8000f10:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000f14:	d201      	bcs.n	8000f1a <__udivmoddi4+0x1da>
 8000f16:	45ac      	cmp	ip, r5
 8000f18:	d87e      	bhi.n	8001018 <__udivmoddi4+0x2d8>
 8000f1a:	4643      	mov	r3, r8
 8000f1c:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000f20:	eba5 050c 	sub.w	r5, r5, ip
 8000f24:	fba3 9802 	umull	r9, r8, r3, r2
 8000f28:	4545      	cmp	r5, r8
 8000f2a:	46ce      	mov	lr, r9
 8000f2c:	46c4      	mov	ip, r8
 8000f2e:	d302      	bcc.n	8000f36 <__udivmoddi4+0x1f6>
 8000f30:	d106      	bne.n	8000f40 <__udivmoddi4+0x200>
 8000f32:	4548      	cmp	r0, r9
 8000f34:	d204      	bcs.n	8000f40 <__udivmoddi4+0x200>
 8000f36:	3b01      	subs	r3, #1
 8000f38:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f3c:	eb68 0c07 	sbc.w	ip, r8, r7
 8000f40:	2e00      	cmp	r6, #0
 8000f42:	d06f      	beq.n	8001024 <__udivmoddi4+0x2e4>
 8000f44:	ebb0 020e 	subs.w	r2, r0, lr
 8000f48:	eb65 050c 	sbc.w	r5, r5, ip
 8000f4c:	40ca      	lsrs	r2, r1
 8000f4e:	fa05 f404 	lsl.w	r4, r5, r4
 8000f52:	40cd      	lsrs	r5, r1
 8000f54:	4618      	mov	r0, r3
 8000f56:	4314      	orrs	r4, r2
 8000f58:	2100      	movs	r1, #0
 8000f5a:	e9c6 4500 	strd	r4, r5, [r6]
 8000f5e:	e73c      	b.n	8000dda <__udivmoddi4+0x9a>
 8000f60:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f64:	f1c3 0220 	rsb	r2, r3, #32
 8000f68:	4099      	lsls	r1, r3
 8000f6a:	409c      	lsls	r4, r3
 8000f6c:	40d5      	lsrs	r5, r2
 8000f6e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000f72:	fa20 f202 	lsr.w	r2, r0, r2
 8000f76:	fa1f f78c 	uxth.w	r7, ip
 8000f7a:	fbb5 f0fe 	udiv	r0, r5, lr
 8000f7e:	430a      	orrs	r2, r1
 8000f80:	fb0e 5510 	mls	r5, lr, r0, r5
 8000f84:	0c11      	lsrs	r1, r2, #16
 8000f86:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f8a:	fb00 f507 	mul.w	r5, r0, r7
 8000f8e:	428d      	cmp	r5, r1
 8000f90:	d90e      	bls.n	8000fb0 <__udivmoddi4+0x270>
 8000f92:	eb1c 0101 	adds.w	r1, ip, r1
 8000f96:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f9a:	bf2c      	ite	cs
 8000f9c:	f04f 0901 	movcs.w	r9, #1
 8000fa0:	f04f 0900 	movcc.w	r9, #0
 8000fa4:	428d      	cmp	r5, r1
 8000fa6:	d902      	bls.n	8000fae <__udivmoddi4+0x26e>
 8000fa8:	f1b9 0f00 	cmp.w	r9, #0
 8000fac:	d031      	beq.n	8001012 <__udivmoddi4+0x2d2>
 8000fae:	4640      	mov	r0, r8
 8000fb0:	1b49      	subs	r1, r1, r5
 8000fb2:	b292      	uxth	r2, r2
 8000fb4:	fbb1 f5fe 	udiv	r5, r1, lr
 8000fb8:	fb0e 1115 	mls	r1, lr, r5, r1
 8000fbc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fc0:	fb05 f107 	mul.w	r1, r5, r7
 8000fc4:	4291      	cmp	r1, r2
 8000fc6:	d907      	bls.n	8000fd8 <__udivmoddi4+0x298>
 8000fc8:	eb1c 0202 	adds.w	r2, ip, r2
 8000fcc:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000fd0:	d201      	bcs.n	8000fd6 <__udivmoddi4+0x296>
 8000fd2:	4291      	cmp	r1, r2
 8000fd4:	d823      	bhi.n	800101e <__udivmoddi4+0x2de>
 8000fd6:	4645      	mov	r5, r8
 8000fd8:	1a52      	subs	r2, r2, r1
 8000fda:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fde:	e726      	b.n	8000e2e <__udivmoddi4+0xee>
 8000fe0:	4631      	mov	r1, r6
 8000fe2:	4630      	mov	r0, r6
 8000fe4:	e6f9      	b.n	8000dda <__udivmoddi4+0x9a>
 8000fe6:	1a84      	subs	r4, r0, r2
 8000fe8:	eb65 0203 	sbc.w	r2, r5, r3
 8000fec:	2001      	movs	r0, #1
 8000fee:	4617      	mov	r7, r2
 8000ff0:	e70b      	b.n	8000e0a <__udivmoddi4+0xca>
 8000ff2:	4464      	add	r4, ip
 8000ff4:	3802      	subs	r0, #2
 8000ff6:	e74a      	b.n	8000e8e <__udivmoddi4+0x14e>
 8000ff8:	4464      	add	r4, ip
 8000ffa:	3802      	subs	r0, #2
 8000ffc:	e6e4      	b.n	8000dc8 <__udivmoddi4+0x88>
 8000ffe:	3d02      	subs	r5, #2
 8001000:	4462      	add	r2, ip
 8001002:	e72f      	b.n	8000e64 <__udivmoddi4+0x124>
 8001004:	3902      	subs	r1, #2
 8001006:	4462      	add	r2, ip
 8001008:	e6c9      	b.n	8000d9e <__udivmoddi4+0x5e>
 800100a:	f1ae 0e02 	sub.w	lr, lr, #2
 800100e:	443d      	add	r5, r7
 8001010:	e76f      	b.n	8000ef2 <__udivmoddi4+0x1b2>
 8001012:	3802      	subs	r0, #2
 8001014:	4461      	add	r1, ip
 8001016:	e7cb      	b.n	8000fb0 <__udivmoddi4+0x270>
 8001018:	3b02      	subs	r3, #2
 800101a:	443d      	add	r5, r7
 800101c:	e77e      	b.n	8000f1c <__udivmoddi4+0x1dc>
 800101e:	3d02      	subs	r5, #2
 8001020:	4462      	add	r2, ip
 8001022:	e7d9      	b.n	8000fd8 <__udivmoddi4+0x298>
 8001024:	4618      	mov	r0, r3
 8001026:	4631      	mov	r1, r6
 8001028:	e6d7      	b.n	8000dda <__udivmoddi4+0x9a>
 800102a:	bf00      	nop

0800102c <__aeabi_idiv0>:
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop

08001030 <bsp_init>:
  * @brief  Initialize the bsp modules
  * @param  None
  * @retval Web Server status
  */
int bsp_init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
  int status = BSP_ERROR_NONE;
 8001036:	2300      	movs	r3, #0
 8001038:	607b      	str	r3, [r7, #4]

  /* Initialize GREEN led */
  status |= BSP_LED_Init(LED_GREEN);
 800103a:	2001      	movs	r0, #1
 800103c:	f002 fd02 	bl	8003a44 <BSP_LED_Init>
 8001040:	4602      	mov	r2, r0
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4313      	orrs	r3, r2
 8001046:	607b      	str	r3, [r7, #4]

  /* Initialize RED led */
  status |= BSP_LED_Init(LED_RED);
 8001048:	2000      	movs	r0, #0
 800104a:	f002 fcfb 	bl	8003a44 <BSP_LED_Init>
 800104e:	4602      	mov	r2, r0
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	4313      	orrs	r3, r2
 8001054:	607b      	str	r3, [r7, #4]

  return status;
 8001056:	687b      	ldr	r3, [r7, #4]
}
 8001058:	4618      	mov	r0, r3
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}

08001060 <webserver_console_config>:
  * @brief  Configure the console
  * @param  None
  * @retval Web Server status
  */
WebServer_StatusTypeDef webserver_console_config(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* Set parameter to be configured */
  Console_UARTHandle.Instance                    = USART1;
 8001064:	4b1b      	ldr	r3, [pc, #108]	; (80010d4 <webserver_console_config+0x74>)
 8001066:	4a1c      	ldr	r2, [pc, #112]	; (80010d8 <webserver_console_config+0x78>)
 8001068:	601a      	str	r2, [r3, #0]
  Console_UARTHandle.Init.BaudRate               = 115200;
 800106a:	4b1a      	ldr	r3, [pc, #104]	; (80010d4 <webserver_console_config+0x74>)
 800106c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001070:	605a      	str	r2, [r3, #4]
  Console_UARTHandle.Init.WordLength             = UART_WORDLENGTH_8B;
 8001072:	4b18      	ldr	r3, [pc, #96]	; (80010d4 <webserver_console_config+0x74>)
 8001074:	2200      	movs	r2, #0
 8001076:	609a      	str	r2, [r3, #8]
  Console_UARTHandle.Init.StopBits               = UART_STOPBITS_1;
 8001078:	4b16      	ldr	r3, [pc, #88]	; (80010d4 <webserver_console_config+0x74>)
 800107a:	2200      	movs	r2, #0
 800107c:	60da      	str	r2, [r3, #12]
  Console_UARTHandle.Init.Parity                 = UART_PARITY_NONE;
 800107e:	4b15      	ldr	r3, [pc, #84]	; (80010d4 <webserver_console_config+0x74>)
 8001080:	2200      	movs	r2, #0
 8001082:	611a      	str	r2, [r3, #16]
  Console_UARTHandle.Init.Mode                   = UART_MODE_TX_RX;
 8001084:	4b13      	ldr	r3, [pc, #76]	; (80010d4 <webserver_console_config+0x74>)
 8001086:	220c      	movs	r2, #12
 8001088:	615a      	str	r2, [r3, #20]
  Console_UARTHandle.Init.HwFlowCtl              = UART_HWCONTROL_NONE;
 800108a:	4b12      	ldr	r3, [pc, #72]	; (80010d4 <webserver_console_config+0x74>)
 800108c:	2200      	movs	r2, #0
 800108e:	619a      	str	r2, [r3, #24]
  Console_UARTHandle.Init.OverSampling           = UART_OVERSAMPLING_16;
 8001090:	4b10      	ldr	r3, [pc, #64]	; (80010d4 <webserver_console_config+0x74>)
 8001092:	2200      	movs	r2, #0
 8001094:	61da      	str	r2, [r3, #28]
  Console_UARTHandle.Init.OneBitSampling         = UART_ONE_BIT_SAMPLE_DISABLE;
 8001096:	4b0f      	ldr	r3, [pc, #60]	; (80010d4 <webserver_console_config+0x74>)
 8001098:	2200      	movs	r2, #0
 800109a:	621a      	str	r2, [r3, #32]
  Console_UARTHandle.Init.ClockPrescaler         = UART_PRESCALER_DIV1;
 800109c:	4b0d      	ldr	r3, [pc, #52]	; (80010d4 <webserver_console_config+0x74>)
 800109e:	2200      	movs	r2, #0
 80010a0:	625a      	str	r2, [r3, #36]	; 0x24
  Console_UARTHandle.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010a2:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <webserver_console_config+0x74>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Initialize the UART mode */
  if (HAL_UART_Init(&Console_UARTHandle) != HAL_OK)
 80010a8:	480a      	ldr	r0, [pc, #40]	; (80010d4 <webserver_console_config+0x74>)
 80010aa:	f010 fe94 	bl	8011dd6 <HAL_UART_Init>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d002      	beq.n	80010ba <webserver_console_config+0x5a>
  {
    return CONSOLE_ERROR;
 80010b4:	f06f 0302 	mvn.w	r3, #2
 80010b8:	e009      	b.n	80010ce <webserver_console_config+0x6e>
  }

  /* Disable the UART FIFO mode */
  if (HAL_UARTEx_DisableFifoMode(&Console_UARTHandle) != HAL_OK)
 80010ba:	4806      	ldr	r0, [pc, #24]	; (80010d4 <webserver_console_config+0x74>)
 80010bc:	f011 fc0b 	bl	80128d6 <HAL_UARTEx_DisableFifoMode>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d002      	beq.n	80010cc <webserver_console_config+0x6c>
  {
    return CONSOLE_ERROR;
 80010c6:	f06f 0302 	mvn.w	r3, #2
 80010ca:	e000      	b.n	80010ce <webserver_console_config+0x6e>
  }

  return WEBSERVER_OK;
 80010cc:	2300      	movs	r3, #0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	200002fc 	.word	0x200002fc
 80010d8:	40013800 	.word	0x40013800

080010dc <webserver_console_print_header>:
  * @brief  Print web server application header in hyperterminal
  * @param  None
  * @retval None
  */
void webserver_console_print_header(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  printf("\r\n");
 80010e0:	4806      	ldr	r0, [pc, #24]	; (80010fc <webserver_console_print_header+0x20>)
 80010e2:	f016 f915 	bl	8017310 <puts>
  printf("=======================================================================================================\r\n");
 80010e6:	4806      	ldr	r0, [pc, #24]	; (8001100 <webserver_console_print_header+0x24>)
 80010e8:	f016 f912 	bl	8017310 <puts>
  printf("============================       STM32U5 Webserver Demonstration        =============================\r\n");
 80010ec:	4805      	ldr	r0, [pc, #20]	; (8001104 <webserver_console_print_header+0x28>)
 80010ee:	f016 f90f 	bl	8017310 <puts>
  printf("=======================================================================================================\r\n");
 80010f2:	4803      	ldr	r0, [pc, #12]	; (8001100 <webserver_console_print_header+0x24>)
 80010f4:	f016 f90c 	bl	8017310 <puts>
}
 80010f8:	bf00      	nop
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	0801a760 	.word	0x0801a760
 8001100:	0801a764 	.word	0x0801a764
 8001104:	0801a7d0 	.word	0x0801a7d0

08001108 <webserver_console_get_ssid>:
  * @param  None
  * @retval Web Server status
  */
WebServer_StatusTypeDef webserver_console_get_ssid(ap_t *net_wifi_registred_hotspot,
                                                   char *SSID)
{
 8001108:	b5b0      	push	{r4, r5, r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
 8001110:	6039      	str	r1, [r7, #0]
  char ch;
  uint32_t count = 0;
 8001112:	2300      	movs	r3, #0
 8001114:	60fb      	str	r3, [r7, #12]

  /* Print get SSID message */
  printf("\r\n");
 8001116:	480b      	ldr	r0, [pc, #44]	; (8001144 <webserver_console_get_ssid+0x3c>)
 8001118:	f016 f8fa 	bl	8017310 <puts>
  printf("*** Please enter your wifi ssid : =====================================================================\r\n");
 800111c:	480a      	ldr	r0, [pc, #40]	; (8001148 <webserver_console_get_ssid+0x40>)
 800111e:	f016 f8f7 	bl	8017310 <puts>
//
//  }
//  while((SSID[count] == '\r') || (SSID[count] == '\n'));

  /* Store user SSID */
  net_wifi_registred_hotspot->ssid = "Yonatan's Phone";
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4a09      	ldr	r2, [pc, #36]	; (800114c <webserver_console_get_ssid+0x44>)
 8001126:	601a      	str	r2, [r3, #0]
  strcpy(SSID, "Yonatan's Phone");
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	4a08      	ldr	r2, [pc, #32]	; (800114c <webserver_console_get_ssid+0x44>)
 800112c:	461c      	mov	r4, r3
 800112e:	4615      	mov	r5, r2
 8001130:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001132:	6020      	str	r0, [r4, #0]
 8001134:	6061      	str	r1, [r4, #4]
 8001136:	60a2      	str	r2, [r4, #8]
 8001138:	60e3      	str	r3, [r4, #12]
//  net_wifi_registred_hotspot->ssid = "UCLA_RES_IOT";

  return WEBSERVER_OK;
 800113a:	2300      	movs	r3, #0
}
 800113c:	4618      	mov	r0, r3
 800113e:	3710      	adds	r7, #16
 8001140:	46bd      	mov	sp, r7
 8001142:	bdb0      	pop	{r4, r5, r7, pc}
 8001144:	0801a760 	.word	0x0801a760
 8001148:	0801a83c 	.word	0x0801a83c
 800114c:	0801a8a8 	.word	0x0801a8a8

08001150 <webserver_console_get_password>:
  * @param  None
  * @retval Web Server status
  */
WebServer_StatusTypeDef webserver_console_get_password(ap_t *net_wifi_registred_hotspot,
                                                       char *PassWord)
{
 8001150:	b5b0      	push	{r4, r5, r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	6039      	str	r1, [r7, #0]
//  char ch;
//  uint32_t count = 0;

  /* Print get PWD message */
  printf("\r\n");
 800115a:	480e      	ldr	r0, [pc, #56]	; (8001194 <webserver_console_get_password+0x44>)
 800115c:	f016 f8d8 	bl	8017310 <puts>
  printf("*** Please enter your wifi password : =================================================================\r\n");
 8001160:	480d      	ldr	r0, [pc, #52]	; (8001198 <webserver_console_get_password+0x48>)
 8001162:	f016 f8d5 	bl	8017310 <puts>
//
//  }
//  while ((PassWord[count] == '\n') || (PassWord[count] == ' ') || (PassWord[count] == '\r'));

  /* Store user PWD */
  net_wifi_registred_hotspot->pwd = "ImagineNeedingThis";
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4a0c      	ldr	r2, [pc, #48]	; (800119c <webserver_console_get_password+0x4c>)
 800116a:	605a      	str	r2, [r3, #4]
  strcpy(PassWord,"ImagineNeedingThis");
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	4a0b      	ldr	r2, [pc, #44]	; (800119c <webserver_console_get_password+0x4c>)
 8001170:	461d      	mov	r5, r3
 8001172:	4614      	mov	r4, r2
 8001174:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001176:	6028      	str	r0, [r5, #0]
 8001178:	6069      	str	r1, [r5, #4]
 800117a:	60aa      	str	r2, [r5, #8]
 800117c:	60eb      	str	r3, [r5, #12]
 800117e:	8823      	ldrh	r3, [r4, #0]
 8001180:	78a2      	ldrb	r2, [r4, #2]
 8001182:	822b      	strh	r3, [r5, #16]
 8001184:	4613      	mov	r3, r2
 8001186:	74ab      	strb	r3, [r5, #18]
//  net_wifi_registred_hotspot->pwd = "q~74D>J#";

  return WEBSERVER_OK;
 8001188:	2300      	movs	r3, #0
}
 800118a:	4618      	mov	r0, r3
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bdb0      	pop	{r4, r5, r7, pc}
 8001192:	bf00      	nop
 8001194:	0801a760 	.word	0x0801a760
 8001198:	0801a8b8 	.word	0x0801a8b8
 800119c:	0801a924 	.word	0x0801a924

080011a0 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  while (HAL_OK != HAL_UART_Transmit(&Console_UARTHandle, (uint8_t *) &ch, 1, 30000))
 80011a8:	bf00      	nop
 80011aa:	1d39      	adds	r1, r7, #4
 80011ac:	f247 5330 	movw	r3, #30000	; 0x7530
 80011b0:	2201      	movs	r2, #1
 80011b2:	4805      	ldr	r0, [pc, #20]	; (80011c8 <__io_putchar+0x28>)
 80011b4:	f010 fe5f 	bl	8011e76 <HAL_UART_Transmit>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d1f5      	bne.n	80011aa <__io_putchar+0xa>
  {
    ;
  }
  return ch;
 80011be:	687b      	ldr	r3, [r7, #4]
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3708      	adds	r7, #8
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	200002fc 	.word	0x200002fc

080011cc <__io_getchar>:
  * @brief  Retargets the C library scanf function to the USART.
  * @param  None
  * @retval None
  */
GETCHAR_PROTOTYPE
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
  char ch;

  while (HAL_OK != HAL_UART_Receive(&Console_UARTHandle, (uint8_t *) &ch, 1, HAL_MAX_DELAY))
 80011d2:	bf00      	nop
 80011d4:	1df9      	adds	r1, r7, #7
 80011d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011da:	2201      	movs	r2, #1
 80011dc:	4805      	ldr	r0, [pc, #20]	; (80011f4 <__io_getchar+0x28>)
 80011de:	f010 fee8 	bl	8011fb2 <HAL_UART_Receive>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d1f5      	bne.n	80011d4 <__io_getchar+0x8>
  {
    ;
  }

  return ch;
 80011e8:	79fb      	ldrb	r3, [r7, #7]
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	200002fc 	.word	0x200002fc

080011f8 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
     - Configure the Flash prefetch
     - Configure the Systick to generate an interrupt each 1 msec
     - Set NVIC Group Priority to 3
     - Low Level Initialization
  */
  HAL_Init();
 80011fc:	f009 f9d6 	bl	800a5ac <HAL_Init>

  /* Enable the Instruction Cache */
  instruction_cache_enable();
 8001200:	f000 fabf 	bl	8001782 <instruction_cache_enable>

  /* Configure the System clock to have a frequency of 120 MHz */
  system_clock_config();
 8001204:	f000 fac6 	bl	8001794 <system_clock_config>

  /* Initialize bsp resources */
  bsp_init();
 8001208:	f7ff ff12 	bl	8001030 <bsp_init>

  /* Demonstration entry */
  app_entry();
 800120c:	f001 feb4 	bl	8002f78 <app_entry>

  while (1)
 8001210:	e7fe      	b.n	8001210 <main+0x18>
	...

08001214 <HAL_MspInit>:

/**
  * Initializes the Global MCU Support Package.
  */
void HAL_MspInit(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
  /* Enable VDDIO2 supply */
  __HAL_RCC_PWR_CLK_ENABLE();
 800121a:	4b1a      	ldr	r3, [pc, #104]	; (8001284 <HAL_MspInit+0x70>)
 800121c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001220:	4a18      	ldr	r2, [pc, #96]	; (8001284 <HAL_MspInit+0x70>)
 8001222:	f043 0304 	orr.w	r3, r3, #4
 8001226:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800122a:	4b16      	ldr	r3, [pc, #88]	; (8001284 <HAL_MspInit+0x70>)
 800122c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001230:	f003 0304 	and.w	r3, r3, #4
 8001234:	60fb      	str	r3, [r7, #12]
 8001236:	68fb      	ldr	r3, [r7, #12]
  HAL_PWREx_EnableVddIO2();
 8001238:	f00b fc1e 	bl	800ca78 <HAL_PWREx_EnableVddIO2>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800123c:	4b11      	ldr	r3, [pc, #68]	; (8001284 <HAL_MspInit+0x70>)
 800123e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001242:	4a10      	ldr	r2, [pc, #64]	; (8001284 <HAL_MspInit+0x70>)
 8001244:	f043 0302 	orr.w	r3, r3, #2
 8001248:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 800124c:	4b0d      	ldr	r3, [pc, #52]	; (8001284 <HAL_MspInit+0x70>)
 800124e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001252:	f003 0302 	and.w	r3, r3, #2
 8001256:	60bb      	str	r3, [r7, #8]
 8001258:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800125a:	4b0a      	ldr	r3, [pc, #40]	; (8001284 <HAL_MspInit+0x70>)
 800125c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001260:	4a08      	ldr	r2, [pc, #32]	; (8001284 <HAL_MspInit+0x70>)
 8001262:	f043 0304 	orr.w	r3, r3, #4
 8001266:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800126a:	4b06      	ldr	r3, [pc, #24]	; (8001284 <HAL_MspInit+0x70>)
 800126c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001270:	f003 0304 	and.w	r3, r3, #4
 8001274:	607b      	str	r3, [r7, #4]
 8001276:	687b      	ldr	r3, [r7, #4]

  /* Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001278:	f00b fc0e 	bl	800ca98 <HAL_PWREx_DisableUCPDDeadBattery>
}
 800127c:	bf00      	nop
 800127e:	3710      	adds	r7, #16
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	46020c00 	.word	0x46020c00

08001288 <HAL_SPI_MspInit>:
* @brief  SPI MSP Initialization
* @param  hspi : SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b0be      	sub	sp, #248	; 0xf8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct       = {0};
 8001290:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
 800129a:	609a      	str	r2, [r3, #8]
 800129c:	60da      	str	r2, [r3, #12]
 800129e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012a0:	f107 0318 	add.w	r3, r7, #24
 80012a4:	22c8      	movs	r2, #200	; 0xc8
 80012a6:	2100      	movs	r1, #0
 80012a8:	4618      	mov	r0, r3
 80012aa:	f016 f897 	bl	80173dc <memset>

  /* Check SPI instance */
  if (hspi->Instance == SPI2)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a32      	ldr	r2, [pc, #200]	; (800137c <HAL_SPI_MspInit+0xf4>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d15c      	bne.n	8001372 <HAL_SPI_MspInit+0xea>
  {
    /* Peripherals clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80012b8:	4b31      	ldr	r3, [pc, #196]	; (8001380 <HAL_SPI_MspInit+0xf8>)
 80012ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80012be:	4a30      	ldr	r2, [pc, #192]	; (8001380 <HAL_SPI_MspInit+0xf8>)
 80012c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012c4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80012c8:	4b2d      	ldr	r3, [pc, #180]	; (8001380 <HAL_SPI_MspInit+0xf8>)
 80012ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80012ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012d2:	617b      	str	r3, [r7, #20]
 80012d4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPDMA1_CLK_ENABLE();
 80012d6:	4b2a      	ldr	r3, [pc, #168]	; (8001380 <HAL_SPI_MspInit+0xf8>)
 80012d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012dc:	4a28      	ldr	r2, [pc, #160]	; (8001380 <HAL_SPI_MspInit+0xf8>)
 80012de:	f043 0301 	orr.w	r3, r3, #1
 80012e2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80012e6:	4b26      	ldr	r3, [pc, #152]	; (8001380 <HAL_SPI_MspInit+0xf8>)
 80012e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012ec:	f003 0301 	and.w	r3, r3, #1
 80012f0:	613b      	str	r3, [r7, #16]
 80012f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012f4:	4b22      	ldr	r3, [pc, #136]	; (8001380 <HAL_SPI_MspInit+0xf8>)
 80012f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80012fa:	4a21      	ldr	r2, [pc, #132]	; (8001380 <HAL_SPI_MspInit+0xf8>)
 80012fc:	f043 0308 	orr.w	r3, r3, #8
 8001300:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001304:	4b1e      	ldr	r3, [pc, #120]	; (8001380 <HAL_SPI_MspInit+0xf8>)
 8001306:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800130a:	f003 0308 	and.w	r3, r3, #8
 800130e:	60fb      	str	r3, [r7, #12]
 8001310:	68fb      	ldr	r3, [r7, #12]

    /* Configure peripheral kernel clock */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001312:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001316:	f04f 0300 	mov.w	r3, #0
 800131a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Spi2ClockSelection   = RCC_SPI2CLKSOURCE_PCLK1;
 800131e:	2300      	movs	r3, #0
 8001320:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001324:	f107 0318 	add.w	r3, r7, #24
 8001328:	4618      	mov	r0, r3
 800132a:	f00c fe71 	bl	800e010 <HAL_RCCEx_PeriphCLKConfig>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <HAL_SPI_MspInit+0xb0>
    {
      webserver_process_error();
 8001334:	f001 fe52 	bl	8002fdc <webserver_process_error>
    }

    /* SPI2 GPIO Configuration */
    GPIO_InitStruct.Pin       = GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_1;
 8001338:	231a      	movs	r3, #26
 800133a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800133e:	2302      	movs	r3, #2
 8001340:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8001344:	2300      	movs	r3, #0
 8001346:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
 800134a:	2302      	movs	r3, #2
 800134c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001350:	2305      	movs	r3, #5
 8001352:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001356:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800135a:	4619      	mov	r1, r3
 800135c:	4809      	ldr	r0, [pc, #36]	; (8001384 <HAL_SPI_MspInit+0xfc>)
 800135e:	f009 fb57 	bl	800aa10 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8001362:	2200      	movs	r2, #0
 8001364:	2105      	movs	r1, #5
 8001366:	203c      	movs	r0, #60	; 0x3c
 8001368:	f009 fa9b 	bl	800a8a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800136c:	203c      	movs	r0, #60	; 0x3c
 800136e:	f009 fab2 	bl	800a8d6 <HAL_NVIC_EnableIRQ>
  }
}
 8001372:	bf00      	nop
 8001374:	37f8      	adds	r7, #248	; 0xf8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	40003800 	.word	0x40003800
 8001380:	46020c00 	.word	0x46020c00
 8001384:	42020c00 	.word	0x42020c00

08001388 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b0bc      	sub	sp, #240	; 0xf0
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001390:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	605a      	str	r2, [r3, #4]
 800139a:	609a      	str	r2, [r3, #8]
 800139c:	60da      	str	r2, [r3, #12]
 800139e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013a0:	f107 0310 	add.w	r3, r7, #16
 80013a4:	22c8      	movs	r2, #200	; 0xc8
 80013a6:	2100      	movs	r1, #0
 80013a8:	4618      	mov	r0, r3
 80013aa:	f016 f817 	bl	80173dc <memset>

  /* Initializes the peripherals clock */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80013ae:	f04f 0201 	mov.w	r2, #1
 80013b2:	f04f 0300 	mov.w	r3, #0
 80013b6:	e9c7 2304 	strd	r2, r3, [r7, #16]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80013ba:	2300      	movs	r3, #0
 80013bc:	663b      	str	r3, [r7, #96]	; 0x60
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 80013be:	f107 0310 	add.w	r3, r7, #16
 80013c2:	4618      	mov	r0, r3
 80013c4:	f00c fe24 	bl	800e010 <HAL_RCCEx_PeriphCLKConfig>

  /* Peripheral clock enable */
  __HAL_RCC_USART1_CLK_ENABLE();
 80013c8:	4b1f      	ldr	r3, [pc, #124]	; (8001448 <HAL_UART_MspInit+0xc0>)
 80013ca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80013ce:	4a1e      	ldr	r2, [pc, #120]	; (8001448 <HAL_UART_MspInit+0xc0>)
 80013d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013d4:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 80013d8:	4b1b      	ldr	r3, [pc, #108]	; (8001448 <HAL_UART_MspInit+0xc0>)
 80013da:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80013de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013e2:	60fb      	str	r3, [r7, #12]
 80013e4:	68fb      	ldr	r3, [r7, #12]

  /* USART1 GPIO Configuration */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e6:	4b18      	ldr	r3, [pc, #96]	; (8001448 <HAL_UART_MspInit+0xc0>)
 80013e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013ec:	4a16      	ldr	r2, [pc, #88]	; (8001448 <HAL_UART_MspInit+0xc0>)
 80013ee:	f043 0301 	orr.w	r3, r3, #1
 80013f2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80013f6:	4b14      	ldr	r3, [pc, #80]	; (8001448 <HAL_UART_MspInit+0xc0>)
 80013f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013fc:	f003 0301 	and.w	r3, r3, #1
 8001400:	60bb      	str	r3, [r7, #8]
 8001402:	68bb      	ldr	r3, [r7, #8]
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8001404:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001408:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800140c:	2302      	movs	r3, #2
 800140e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001412:	2300      	movs	r3, #0
 8001414:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001418:	2300      	movs	r3, #0
 800141a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800141e:	2307      	movs	r3, #7
 8001420:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001424:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001428:	4619      	mov	r1, r3
 800142a:	4808      	ldr	r0, [pc, #32]	; (800144c <HAL_UART_MspInit+0xc4>)
 800142c:	f009 faf0 	bl	800aa10 <HAL_GPIO_Init>

  /* USART1 interrupt Init */
  HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001430:	2200      	movs	r2, #0
 8001432:	2105      	movs	r1, #5
 8001434:	203d      	movs	r0, #61	; 0x3d
 8001436:	f009 fa34 	bl	800a8a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 800143a:	203d      	movs	r0, #61	; 0x3d
 800143c:	f009 fa4b 	bl	800a8d6 <HAL_NVIC_EnableIRQ>
}
 8001440:	bf00      	nop
 8001442:	37f0      	adds	r7, #240	; 0xf0
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	46020c00 	.word	0x46020c00
 800144c:	42020000 	.word	0x42020000

08001450 <HAL_LPTIM_MspInit>:
* @brief  LPTIM MSP Init
* @param  hlptim : LPTIM handle
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef *hlptim)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b0ce      	sub	sp, #312	; 0x138
 8001454:	af00      	add	r7, sp, #0
 8001456:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800145a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800145e:	6018      	str	r0, [r3, #0]
  RCC_OscInitTypeDef       RCC_OscInitStruct;
  RCC_PeriphCLKInitTypeDef RCC_PeriphCLKInitStruct;

  /* Enable LSE clock */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE;
 8001460:	2304      	movs	r3, #4
 8001462:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001466:	2381      	movs	r3, #129	; 0x81
 8001468:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800146c:	2300      	movs	r3, #0
 800146e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001472:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001476:	4618      	mov	r0, r3
 8001478:	f00b fb1e 	bl	800cab8 <HAL_RCC_OscConfig>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <HAL_LPTIM_MspInit+0x36>
  {
    webserver_process_error();
 8001482:	f001 fdab 	bl	8002fdc <webserver_process_error>
  }

  /* Select the LSE clock as LPTIM peripheral clock */
  RCC_PeriphCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8001486:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800148a:	f5a3 7194 	sub.w	r1, r3, #296	; 0x128
 800148e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001492:	f04f 0300 	mov.w	r3, #0
 8001496:	e9c1 2300 	strd	r2, r3, [r1]
  RCC_PeriphCLKInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSI;
 800149a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800149e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80014a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014a6:	679a      	str	r2, [r3, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct) != HAL_OK)
 80014a8:	f107 0310 	add.w	r3, r7, #16
 80014ac:	4618      	mov	r0, r3
 80014ae:	f00c fdaf 	bl	800e010 <HAL_RCCEx_PeriphCLKConfig>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <HAL_LPTIM_MspInit+0x6c>
  {
    webserver_process_error();
 80014b8:	f001 fd90 	bl	8002fdc <webserver_process_error>
  }

  /* Enable LPTIM clock */
  __HAL_RCC_LPTIM1_CLK_ENABLE();
 80014bc:	4b19      	ldr	r3, [pc, #100]	; (8001524 <HAL_LPTIM_MspInit+0xd4>)
 80014be:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80014c2:	4a18      	ldr	r2, [pc, #96]	; (8001524 <HAL_LPTIM_MspInit+0xd4>)
 80014c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80014c8:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 80014cc:	4b15      	ldr	r3, [pc, #84]	; (8001524 <HAL_LPTIM_MspInit+0xd4>)
 80014ce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80014d2:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 80014d6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80014da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80014e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80014e8:	681b      	ldr	r3, [r3, #0]

  /* Force the LPTIM Periheral Clock Reset */
  __HAL_RCC_LPTIM1_FORCE_RESET();
 80014ea:	4b0e      	ldr	r3, [pc, #56]	; (8001524 <HAL_LPTIM_MspInit+0xd4>)
 80014ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80014f0:	4a0c      	ldr	r2, [pc, #48]	; (8001524 <HAL_LPTIM_MspInit+0xd4>)
 80014f2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80014f6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Release the LPTIM Periheral Clock Reset */
  __HAL_RCC_LPTIM1_RELEASE_RESET();
 80014fa:	4b0a      	ldr	r3, [pc, #40]	; (8001524 <HAL_LPTIM_MspInit+0xd4>)
 80014fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001500:	4a08      	ldr	r2, [pc, #32]	; (8001524 <HAL_LPTIM_MspInit+0xd4>)
 8001502:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001506:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* USART1 interrupt DeInit */
  HAL_NVIC_SetPriority(LPTIM1_IRQn, 15, 15);
 800150a:	220f      	movs	r2, #15
 800150c:	210f      	movs	r1, #15
 800150e:	2043      	movs	r0, #67	; 0x43
 8001510:	f009 f9c7 	bl	800a8a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8001514:	2043      	movs	r0, #67	; 0x43
 8001516:	f009 f9de 	bl	800a8d6 <HAL_NVIC_EnableIRQ>
}
 800151a:	bf00      	nop
 800151c:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	46020c00 	.word	0x46020c00

08001528 <NMI_Handler>:
/**********************************************************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  while (1)
 800152c:	e7fe      	b.n	800152c <NMI_Handler+0x4>

0800152e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800152e:	b480      	push	{r7}
 8001530:	af00      	add	r7, sp, #0
  while (1)
 8001532:	e7fe      	b.n	8001532 <HardFault_Handler+0x4>

08001534 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  while (1)
 8001538:	e7fe      	b.n	8001538 <MemManage_Handler+0x4>

0800153a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800153a:	b480      	push	{r7}
 800153c:	af00      	add	r7, sp, #0
  while (1)
 800153e:	e7fe      	b.n	800153e <BusFault_Handler+0x4>

08001540 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  while (1)
 8001544:	e7fe      	b.n	8001544 <UsageFault_Handler+0x4>

08001546 <SecureFault_Handler>:

/**
  * @brief This function handles Secure fault.
  */
void SecureFault_Handler(void)
{
 8001546:	b480      	push	{r7}
 8001548:	af00      	add	r7, sp, #0
  while (1)
 800154a:	e7fe      	b.n	800154a <SecureFault_Handler+0x4>

0800154c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
}
 8001550:	bf00      	nop
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr

0800155a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800155a:	b480      	push	{r7}
 800155c:	af00      	add	r7, sp, #0
}
 800155e:	bf00      	nop
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
}
 800156c:	bf00      	nop
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr

08001576 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001576:	b580      	push	{r7, lr}
 8001578:	af00      	add	r7, sp, #0
  HAL_IncTick();
 800157a:	f009 f873 	bl	800a664 <HAL_IncTick>
}
 800157e:	bf00      	nop
 8001580:	bd80      	pop	{r7, pc}
	...

08001584 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  HAL_SPI_IRQHandler(&Wifi_SPIHandle);
 8001588:	4802      	ldr	r0, [pc, #8]	; (8001594 <SPI2_IRQHandler+0x10>)
 800158a:	f010 f943 	bl	8011814 <HAL_SPI_IRQHandler>
}
 800158e:	bf00      	nop
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	20000c8c 	.word	0x20000c8c

08001598 <EXTI14_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI14_IRQHandler(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(MXCHIP_NOTIFY_Pin);
 800159c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80015a0:	f009 fd36 	bl	800b010 <HAL_GPIO_EXTI_IRQHandler>
}
 80015a4:	bf00      	nop
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <EXTI15_IRQHandler>:

/**
  * @brief This function handles EXTI Line15 interrupt.
  */
void EXTI15_IRQHandler(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(MXCHIP_FLOW_Pin);
 80015ac:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80015b0:	f009 fd2e 	bl	800b010 <HAL_GPIO_EXTI_IRQHandler>
}
 80015b4:	bf00      	nop
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  HAL_LPTIM_IRQHandler(&LPTIMHandle);
 80015bc:	4802      	ldr	r0, [pc, #8]	; (80015c8 <LPTIM1_IRQHandler+0x10>)
 80015be:	f00a fdf0 	bl	800c1a2 <HAL_LPTIM_IRQHandler>
}
 80015c2:	bf00      	nop
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	20000394 	.word	0x20000394

080015cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
	return 1;
 80015d0:	2301      	movs	r3, #1
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr

080015dc <_kill>:

int _kill(int pid, int sig)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80015e6:	f015 ff7d 	bl	80174e4 <__errno>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2216      	movs	r2, #22
 80015ee:	601a      	str	r2, [r3, #0]
	return -1;
 80015f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3708      	adds	r7, #8
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}

080015fc <_exit>:

void _exit (int status)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001604:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f7ff ffe7 	bl	80015dc <_kill>
	while (1) {}		/* Make sure we hang here */
 800160e:	e7fe      	b.n	800160e <_exit+0x12>

08001610 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b086      	sub	sp, #24
 8001614:	af00      	add	r7, sp, #0
 8001616:	60f8      	str	r0, [r7, #12]
 8001618:	60b9      	str	r1, [r7, #8]
 800161a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800161c:	2300      	movs	r3, #0
 800161e:	617b      	str	r3, [r7, #20]
 8001620:	e00a      	b.n	8001638 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001622:	f7ff fdd3 	bl	80011cc <__io_getchar>
 8001626:	4601      	mov	r1, r0
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	1c5a      	adds	r2, r3, #1
 800162c:	60ba      	str	r2, [r7, #8]
 800162e:	b2ca      	uxtb	r2, r1
 8001630:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	3301      	adds	r3, #1
 8001636:	617b      	str	r3, [r7, #20]
 8001638:	697a      	ldr	r2, [r7, #20]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	429a      	cmp	r2, r3
 800163e:	dbf0      	blt.n	8001622 <_read+0x12>
	}

return len;
 8001640:	687b      	ldr	r3, [r7, #4]
}
 8001642:	4618      	mov	r0, r3
 8001644:	3718      	adds	r7, #24
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800164a:	b580      	push	{r7, lr}
 800164c:	b086      	sub	sp, #24
 800164e:	af00      	add	r7, sp, #0
 8001650:	60f8      	str	r0, [r7, #12]
 8001652:	60b9      	str	r1, [r7, #8]
 8001654:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001656:	2300      	movs	r3, #0
 8001658:	617b      	str	r3, [r7, #20]
 800165a:	e009      	b.n	8001670 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	1c5a      	adds	r2, r3, #1
 8001660:	60ba      	str	r2, [r7, #8]
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	4618      	mov	r0, r3
 8001666:	f7ff fd9b 	bl	80011a0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	3301      	adds	r3, #1
 800166e:	617b      	str	r3, [r7, #20]
 8001670:	697a      	ldr	r2, [r7, #20]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	429a      	cmp	r2, r3
 8001676:	dbf1      	blt.n	800165c <_write+0x12>
	}
	return len;
 8001678:	687b      	ldr	r3, [r7, #4]
}
 800167a:	4618      	mov	r0, r3
 800167c:	3718      	adds	r7, #24
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <_close>:

int _close(int file)
{
 8001682:	b480      	push	{r7}
 8001684:	b083      	sub	sp, #12
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
	return -1;
 800168a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800168e:	4618      	mov	r0, r3
 8001690:	370c      	adds	r7, #12
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr

0800169a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800169a:	b480      	push	{r7}
 800169c:	b083      	sub	sp, #12
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]
 80016a2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016aa:	605a      	str	r2, [r3, #4]
	return 0;
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr

080016ba <_isatty>:

int _isatty(int file)
{
 80016ba:	b480      	push	{r7}
 80016bc:	b083      	sub	sp, #12
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]
	return 1;
 80016c2:	2301      	movs	r3, #1
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	370c      	adds	r7, #12
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b085      	sub	sp, #20
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	60f8      	str	r0, [r7, #12]
 80016d8:	60b9      	str	r1, [r7, #8]
 80016da:	607a      	str	r2, [r7, #4]
	return 0;
 80016dc:	2300      	movs	r3, #0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3714      	adds	r7, #20
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
	...

080016ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b086      	sub	sp, #24
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016f4:	4a14      	ldr	r2, [pc, #80]	; (8001748 <_sbrk+0x5c>)
 80016f6:	4b15      	ldr	r3, [pc, #84]	; (800174c <_sbrk+0x60>)
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001700:	4b13      	ldr	r3, [pc, #76]	; (8001750 <_sbrk+0x64>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d102      	bne.n	800170e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001708:	4b11      	ldr	r3, [pc, #68]	; (8001750 <_sbrk+0x64>)
 800170a:	4a12      	ldr	r2, [pc, #72]	; (8001754 <_sbrk+0x68>)
 800170c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800170e:	4b10      	ldr	r3, [pc, #64]	; (8001750 <_sbrk+0x64>)
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4413      	add	r3, r2
 8001716:	693a      	ldr	r2, [r7, #16]
 8001718:	429a      	cmp	r2, r3
 800171a:	d207      	bcs.n	800172c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800171c:	f015 fee2 	bl	80174e4 <__errno>
 8001720:	4603      	mov	r3, r0
 8001722:	220c      	movs	r2, #12
 8001724:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001726:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800172a:	e009      	b.n	8001740 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800172c:	4b08      	ldr	r3, [pc, #32]	; (8001750 <_sbrk+0x64>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001732:	4b07      	ldr	r3, [pc, #28]	; (8001750 <_sbrk+0x64>)
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4413      	add	r3, r2
 800173a:	4a05      	ldr	r2, [pc, #20]	; (8001750 <_sbrk+0x64>)
 800173c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800173e:	68fb      	ldr	r3, [r7, #12]
}
 8001740:	4618      	mov	r0, r3
 8001742:	3718      	adds	r7, #24
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	200c0000 	.word	0x200c0000
 800174c:	00008000 	.word	0x00008000
 8001750:	20000390 	.word	0x20000390
 8001754:	20003570 	.word	0x20003570

08001758 <system_init>:
  * @brief  Initialize the system application
  * @param  None
  * @retval Web Server status
  */
WebServer_StatusTypeDef system_init(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* Configure the console */
  if (webserver_console_config() != WEBSERVER_OK)
 800175c:	f7ff fc80 	bl	8001060 <webserver_console_config>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d002      	beq.n	800176c <system_init+0x14>
  {
    return SYSTEM_ERROR;
 8001766:	f06f 0301 	mvn.w	r3, #1
 800176a:	e008      	b.n	800177e <system_init+0x26>
  }

  /* Configure the LPTIM peripheral */
  if (lptim_config() != WEBSERVER_OK)
 800176c:	f000 f87e 	bl	800186c <lptim_config>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d002      	beq.n	800177c <system_init+0x24>
  {
    return SYSTEM_ERROR;
 8001776:	f06f 0301 	mvn.w	r3, #1
 800177a:	e000      	b.n	800177e <system_init+0x26>
  }

  return WEBSERVER_OK;
 800177c:	2300      	movs	r3, #0
}
 800177e:	4618      	mov	r0, r3
 8001780:	bd80      	pop	{r7, pc}

08001782 <instruction_cache_enable>:
  * @brief  Enable ICACHE with 1-way set-associative configuration.
  * @param  None
  * @retval None
  */
void instruction_cache_enable(void)
{
 8001782:	b580      	push	{r7, lr}
 8001784:	af00      	add	r7, sp, #0
  /* Configure ICACHE associativity mode */
  HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY);
 8001786:	2000      	movs	r0, #0
 8001788:	f00a faea 	bl	800bd60 <HAL_ICACHE_ConfigAssociativityMode>

  /* Enable ICACHE */
  HAL_ICACHE_Enable();
 800178c:	f00a fb08 	bl	800bda0 <HAL_ICACHE_Enable>
}
 8001790:	bf00      	nop
 8001792:	bd80      	pop	{r7, pc}

08001794 <system_clock_config>:
  *            Flash Latency(WS)              = 3
  * @param  None
  * @retval Web Server status
  */
WebServer_StatusTypeDef system_clock_config(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b09e      	sub	sp, #120	; 0x78
 8001798:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800179a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800179e:	2200      	movs	r2, #0
 80017a0:	601a      	str	r2, [r3, #0]
 80017a2:	605a      	str	r2, [r3, #4]
 80017a4:	609a      	str	r2, [r3, #8]
 80017a6:	60da      	str	r2, [r3, #12]
 80017a8:	611a      	str	r2, [r3, #16]
 80017aa:	615a      	str	r2, [r3, #20]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017ac:	463b      	mov	r3, r7
 80017ae:	2260      	movs	r2, #96	; 0x60
 80017b0:	2100      	movs	r1, #0
 80017b2:	4618      	mov	r0, r3
 80017b4:	f015 fe12 	bl	80173dc <memset>

  /* Configure the main internal regulator output voltage */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80017b8:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 80017bc:	f00b f8d0 	bl	800c960 <HAL_PWREx_ControlVoltageScaling>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d002      	beq.n	80017cc <system_clock_config+0x38>
  {
    return SYSTEM_ERROR;
 80017c6:	f06f 0301 	mvn.w	r3, #1
 80017ca:	e04a      	b.n	8001862 <system_clock_config+0xce>
  }

  /* Initializes the CPU, AHB and APB busses clocks */
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_HSI48 | RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_MSI;
 80017cc:	2338      	movs	r3, #56	; 0x38
 80017ce:	603b      	str	r3, [r7, #0]
  RCC_OscInitStruct.HSI48State          = RCC_HSI48_ON;
 80017d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSIState            = RCC_LSI_ON;
 80017d6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80017da:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState            = RCC_MSI_ON;
 80017dc:	2301      	movs	r3, #1
 80017de:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80017e0:	2310      	movs	r3, #16
 80017e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIClockRange       = RCC_MSIRANGE_0;
 80017e4:	2300      	movs	r3, #0
 80017e6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIDiv              = RCC_LSI_DIV1;
 80017e8:	2300      	movs	r3, #0
 80017ea:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
 80017ec:	2302      	movs	r3, #2
 80017ee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_MSI;
 80017f0:	2301      	movs	r3, #1
 80017f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMBOOST       = RCC_PLLMBOOST_DIV4;
 80017f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017f8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM            = 3;
 80017fa:	2303      	movs	r3, #3
 80017fc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN            = 15;
 80017fe:	230f      	movs	r3, #15
 8001800:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP            = 2;
 8001802:	2302      	movs	r3, #2
 8001804:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ            = 2;
 8001806:	2302      	movs	r3, #2
 8001808:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR            = 2;
 800180a:	2302      	movs	r3, #2
 800180c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLRGE          = RCC_PLLVCIRANGE_1;
 800180e:	230c      	movs	r3, #12
 8001810:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLFRACN        = 0;
 8001812:	2300      	movs	r3, #0
 8001814:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001816:	463b      	mov	r3, r7
 8001818:	4618      	mov	r0, r3
 800181a:	f00b f94d 	bl	800cab8 <HAL_RCC_OscConfig>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d002      	beq.n	800182a <system_clock_config+0x96>
  {
    return SYSTEM_ERROR;
 8001824:	f06f 0301 	mvn.w	r3, #1
 8001828:	e01b      	b.n	8001862 <system_clock_config+0xce>
  }

  /* Initializes the CPU, AHB and APB busses clocks */
  RCC_ClkInitStruct.ClockType      = RCC_CLOCKTYPE_HCLK  | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 |
 800182a:	231f      	movs	r3, #31
 800182c:	663b      	str	r3, [r7, #96]	; 0x60
                                     RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_PLLCLK;
 800182e:	2303      	movs	r3, #3
 8001830:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
 8001832:	2300      	movs	r3, #0
 8001834:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001836:	2300      	movs	r3, #0
 8001838:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800183a:	2300      	movs	r3, #0
 800183c:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800183e:	2300      	movs	r3, #0
 8001840:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001842:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001846:	2103      	movs	r1, #3
 8001848:	4618      	mov	r0, r3
 800184a:	f00c f811 	bl	800d870 <HAL_RCC_ClockConfig>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d002      	beq.n	800185a <system_clock_config+0xc6>
  {
    return SYSTEM_ERROR;
 8001854:	f06f 0301 	mvn.w	r3, #1
 8001858:	e003      	b.n	8001862 <system_clock_config+0xce>
  }

  /* Configure the Systick */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800185a:	2004      	movs	r0, #4
 800185c:	f009 f856 	bl	800a90c <HAL_SYSTICK_CLKSourceConfig>

  return WEBSERVER_OK;
 8001860:	2300      	movs	r3, #0
}
 8001862:	4618      	mov	r0, r3
 8001864:	3778      	adds	r7, #120	; 0x78
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
	...

0800186c <lptim_config>:
  * @brief  Initialize the LPTIM peripheral
  * @param  None
  * @retval Web Server status
  */
static WebServer_StatusTypeDef lptim_config(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
   *  Counter Trigger = Software trigger
   *  Output Polarity = High
   *  Update mode     = Immediate (Registers are immediately updated after any
   *                    write access)
   */
  LPTIMHandle.Instance = LPTIM1;
 8001872:	4b2a      	ldr	r3, [pc, #168]	; (800191c <lptim_config+0xb0>)
 8001874:	4a2a      	ldr	r2, [pc, #168]	; (8001920 <lptim_config+0xb4>)
 8001876:	601a      	str	r2, [r3, #0]

  LPTIMHandle.Init.Clock.Source                  = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8001878:	4b28      	ldr	r3, [pc, #160]	; (800191c <lptim_config+0xb0>)
 800187a:	2200      	movs	r2, #0
 800187c:	605a      	str	r2, [r3, #4]
  LPTIMHandle.Init.Clock.Prescaler               = LPTIM_PRESCALER_DIV1;
 800187e:	4b27      	ldr	r3, [pc, #156]	; (800191c <lptim_config+0xb0>)
 8001880:	2200      	movs	r2, #0
 8001882:	609a      	str	r2, [r3, #8]
  LPTIMHandle.Init.CounterSource                 = LPTIM_COUNTERSOURCE_INTERNAL;
 8001884:	4b25      	ldr	r3, [pc, #148]	; (800191c <lptim_config+0xb0>)
 8001886:	2200      	movs	r2, #0
 8001888:	629a      	str	r2, [r3, #40]	; 0x28
  LPTIMHandle.Init.UltraLowPowerClock.Polarity   = LPTIM_CLOCKPOLARITY_RISING;
 800188a:	4b24      	ldr	r3, [pc, #144]	; (800191c <lptim_config+0xb0>)
 800188c:	2200      	movs	r2, #0
 800188e:	60da      	str	r2, [r3, #12]
  LPTIMHandle.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION;
 8001890:	4b22      	ldr	r3, [pc, #136]	; (800191c <lptim_config+0xb0>)
 8001892:	2200      	movs	r2, #0
 8001894:	611a      	str	r2, [r3, #16]
  LPTIMHandle.Init.Trigger.Source                = LPTIM_TRIGSOURCE_SOFTWARE;
 8001896:	4b21      	ldr	r3, [pc, #132]	; (800191c <lptim_config+0xb0>)
 8001898:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800189c:	615a      	str	r2, [r3, #20]
  LPTIMHandle.Init.Trigger.ActiveEdge            = LPTIM_ACTIVEEDGE_RISING;
 800189e:	4b1f      	ldr	r3, [pc, #124]	; (800191c <lptim_config+0xb0>)
 80018a0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80018a4:	619a      	str	r2, [r3, #24]
  LPTIMHandle.Init.Period                        = PERIOD_VALUE;
 80018a6:	4b1d      	ldr	r3, [pc, #116]	; (800191c <lptim_config+0xb0>)
 80018a8:	f240 6267 	movw	r2, #1639	; 0x667
 80018ac:	621a      	str	r2, [r3, #32]
  LPTIMHandle.Init.RepetitionCounter             = 0;
 80018ae:	4b1b      	ldr	r3, [pc, #108]	; (800191c <lptim_config+0xb0>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize LPTIM peripheral according to the passed parameters */
  if (HAL_LPTIM_Init(&LPTIMHandle) != HAL_OK)
 80018b4:	4819      	ldr	r0, [pc, #100]	; (800191c <lptim_config+0xb0>)
 80018b6:	f00a fa83 	bl	800bdc0 <HAL_LPTIM_Init>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d002      	beq.n	80018c6 <lptim_config+0x5a>
  {
    return SYSTEM_ERROR;
 80018c0:	f06f 0301 	mvn.w	r3, #1
 80018c4:	e026      	b.n	8001914 <lptim_config+0xa8>
  }

  /* Register LPTIM callback */
  if (HAL_LPTIM_RegisterCallback(&LPTIMHandle, HAL_LPTIM_UPDATE_EVENT_CB_ID, LPTIM_UpdateEventCallback) != HAL_OK)
 80018c6:	4a17      	ldr	r2, [pc, #92]	; (8001924 <lptim_config+0xb8>)
 80018c8:	2109      	movs	r1, #9
 80018ca:	4814      	ldr	r0, [pc, #80]	; (800191c <lptim_config+0xb0>)
 80018cc:	f00a fe6e 	bl	800c5ac <HAL_LPTIM_RegisterCallback>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d002      	beq.n	80018dc <lptim_config+0x70>
  {
    return SYSTEM_ERROR;
 80018d6:	f06f 0301 	mvn.w	r3, #1
 80018da:	e01b      	b.n	8001914 <lptim_config+0xa8>
  /*
  *  Period = 99
  *  Pulse  = 49
  *  According to this configuration, the duty cycle will be equal to 50%
  */
  sConfig.Pulse      = PULSE_VALUE;
 80018dc:	f240 3333 	movw	r3, #819	; 0x333
 80018e0:	603b      	str	r3, [r7, #0]
  sConfig.OCPolarity = LPTIM_OCPOLARITY_LOW;
 80018e2:	2301      	movs	r3, #1
 80018e4:	607b      	str	r3, [r7, #4]
  if (HAL_LPTIM_OC_ConfigChannel(&LPTIMHandle, &sConfig, LPTIM_CHANNEL_1) != HAL_OK)
 80018e6:	463b      	mov	r3, r7
 80018e8:	2200      	movs	r2, #0
 80018ea:	4619      	mov	r1, r3
 80018ec:	480b      	ldr	r0, [pc, #44]	; (800191c <lptim_config+0xb0>)
 80018ee:	f00a fc25 	bl	800c13c <HAL_LPTIM_OC_ConfigChannel>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d002      	beq.n	80018fe <lptim_config+0x92>
  {
    return SYSTEM_ERROR;
 80018f8:	f06f 0301 	mvn.w	r3, #1
 80018fc:	e00a      	b.n	8001914 <lptim_config+0xa8>
  }

  /* Start the LPTIM PWM */
  if (HAL_LPTIM_PWM_Start_IT(&LPTIMHandle, LPTIM_CHANNEL_1) != HAL_OK)
 80018fe:	2100      	movs	r1, #0
 8001900:	4806      	ldr	r0, [pc, #24]	; (800191c <lptim_config+0xb0>)
 8001902:	f00a fb69 	bl	800bfd8 <HAL_LPTIM_PWM_Start_IT>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d002      	beq.n	8001912 <lptim_config+0xa6>
  {
    return SYSTEM_ERROR;
 800190c:	f06f 0301 	mvn.w	r3, #1
 8001910:	e000      	b.n	8001914 <lptim_config+0xa8>
  }

  return WEBSERVER_OK;
 8001912:	2300      	movs	r3, #0
}
 8001914:	4618      	mov	r0, r3
 8001916:	3708      	adds	r7, #8
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	20000394 	.word	0x20000394
 8001920:	46004400 	.word	0x46004400
 8001924:	08001929 	.word	0x08001929

08001928 <LPTIM_UpdateEventCallback>:
  * @brief  Update event callback in non-blocking mode.
  * @param  hlptim : Pointer to LPTIM handle
  * @retval None
  */
static void LPTIM_UpdateEventCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  /* Toggle GREEN led */
  BSP_LED_Toggle(LED_GREEN);
 8001930:	2001      	movs	r0, #1
 8001932:	f002 f923 	bl	8003b7c <BSP_LED_Toggle>
}
 8001936:	bf00      	nop
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
	...

08001940 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001940:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001978 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001944:	f008 fdfa 	bl	800a53c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001948:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800194a:	e003      	b.n	8001954 <LoopCopyDataInit>

0800194c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800194c:	4b0b      	ldr	r3, [pc, #44]	; (800197c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800194e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001950:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001952:	3104      	adds	r1, #4

08001954 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001954:	480a      	ldr	r0, [pc, #40]	; (8001980 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001956:	4b0b      	ldr	r3, [pc, #44]	; (8001984 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001958:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800195a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800195c:	d3f6      	bcc.n	800194c <CopyDataInit>
	ldr	r2, =_sbss
 800195e:	4a0a      	ldr	r2, [pc, #40]	; (8001988 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001960:	e002      	b.n	8001968 <LoopFillZerobss>

08001962 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001962:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001964:	f842 3b04 	str.w	r3, [r2], #4

08001968 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001968:	4b08      	ldr	r3, [pc, #32]	; (800198c <LoopForever+0x16>)
	cmp	r2, r3
 800196a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800196c:	d3f9      	bcc.n	8001962 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800196e:	f015 fdbf 	bl	80174f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001972:	f7ff fc41 	bl	80011f8 <main>

08001976 <LoopForever>:

LoopForever:
    b LoopForever
 8001976:	e7fe      	b.n	8001976 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001978:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 800197c:	0818e170 	.word	0x0818e170
	ldr	r0, =_sdata
 8001980:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001984:	200002e0 	.word	0x200002e0
	ldr	r2, =_sbss
 8001988:	200002e0 	.word	0x200002e0
	ldr	r3, = _ebss
 800198c:	20003570 	.word	0x20003570

08001990 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001990:	e7fe      	b.n	8001990 <ADC1_IRQHandler>
	...

08001994 <webserver_http_encode_html_response>:
  * @param  html_size     : html body size.
  * @retval Web Server status.
  */
WebServer_StatusTypeDef webserver_http_encode_html_response(char *html_response,
                                                            int html_size)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b088      	sub	sp, #32
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	6039      	str	r1, [r7, #0]
  char body_length[20] = {0};
 800199e:	2300      	movs	r3, #0
 80019a0:	60fb      	str	r3, [r7, #12]
 80019a2:	f107 0310 	add.w	r3, r7, #16
 80019a6:	2200      	movs	r2, #0
 80019a8:	601a      	str	r2, [r3, #0]
 80019aa:	605a      	str	r2, [r3, #4]
 80019ac:	609a      	str	r2, [r3, #8]
 80019ae:	60da      	str	r2, [r3, #12]

  /* Clear response buffer from any previous data */
  memset(html_response, 0, strlen((char *)html_response));
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f7fe fc61 	bl	8000278 <strlen>
 80019b6:	4603      	mov	r3, r0
 80019b8:	461a      	mov	r2, r3
 80019ba:	2100      	movs	r1, #0
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f015 fd0d 	bl	80173dc <memset>

  /* Add http accept header */
  strcpy(html_response, http_headers[HTTP_HEADER_ACCEPT]);
 80019c2:	4b30      	ldr	r3, [pc, #192]	; (8001a84 <webserver_http_encode_html_response+0xf0>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4619      	mov	r1, r3
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f015 fdd3 	bl	8017574 <strcpy>

  /* Add http server header */
  strcat(html_response, http_headers[HTTP_HEADER_SERVER]);
 80019ce:	4b2d      	ldr	r3, [pc, #180]	; (8001a84 <webserver_http_encode_html_response+0xf0>)
 80019d0:	69db      	ldr	r3, [r3, #28]
 80019d2:	4619      	mov	r1, r3
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	f015 fca3 	bl	8017320 <strcat>

  /* Add http control headers */
  strcat(html_response, http_headers[HTTP_HEADER_CONTROL_ORIGIN]);
 80019da:	4b2a      	ldr	r3, [pc, #168]	; (8001a84 <webserver_http_encode_html_response+0xf0>)
 80019dc:	6a1b      	ldr	r3, [r3, #32]
 80019de:	4619      	mov	r1, r3
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f015 fc9d 	bl	8017320 <strcat>
  strcat(html_response, http_headers[HTTP_HEADER_CONTROL_METHODS]);
 80019e6:	4b27      	ldr	r3, [pc, #156]	; (8001a84 <webserver_http_encode_html_response+0xf0>)
 80019e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ea:	4619      	mov	r1, r3
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	f015 fc97 	bl	8017320 <strcat>
  strcat(html_response, http_headers[HTTP_HEADER_CONTROL_HEADERS]);
 80019f2:	4b24      	ldr	r3, [pc, #144]	; (8001a84 <webserver_http_encode_html_response+0xf0>)
 80019f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019f6:	4619      	mov	r1, r3
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f015 fc91 	bl	8017320 <strcat>

  /* Add http content type header */
  strcat(html_response, http_headers[HTTP_HEADER_CONTENT_TYPE]);
 80019fe:	4b21      	ldr	r3, [pc, #132]	; (8001a84 <webserver_http_encode_html_response+0xf0>)
 8001a00:	68db      	ldr	r3, [r3, #12]
 8001a02:	4619      	mov	r1, r3
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f015 fc8b 	bl	8017320 <strcat>
  strcat(html_response, http_content_types[HTTP_HEADER_CONTENT_HTML]);
 8001a0a:	4b1f      	ldr	r3, [pc, #124]	; (8001a88 <webserver_http_encode_html_response+0xf4>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4619      	mov	r1, r3
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f015 fc85 	bl	8017320 <strcat>

  /* Add http content range header */
  strcat(html_response, http_headers[HTTP_HEADER_CONTENT_RANGE]);
 8001a16:	4b1b      	ldr	r3, [pc, #108]	; (8001a84 <webserver_http_encode_html_response+0xf0>)
 8001a18:	691b      	ldr	r3, [r3, #16]
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f015 fc7f 	bl	8017320 <strcat>

  /* Add http content length header */
  strcat(html_response, http_headers[HTTP_HEADER_CONTENT_LENGTH]);
 8001a22:	4b18      	ldr	r3, [pc, #96]	; (8001a84 <webserver_http_encode_html_response+0xf0>)
 8001a24:	695b      	ldr	r3, [r3, #20]
 8001a26:	4619      	mov	r1, r3
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f015 fc79 	bl	8017320 <strcat>
  sprintf(body_length, "%d", html_size);
 8001a2e:	f107 030c 	add.w	r3, r7, #12
 8001a32:	683a      	ldr	r2, [r7, #0]
 8001a34:	4915      	ldr	r1, [pc, #84]	; (8001a8c <webserver_http_encode_html_response+0xf8>)
 8001a36:	4618      	mov	r0, r3
 8001a38:	f014 fbac 	bl	8016194 <siprintf>
  strcat(html_response, body_length);
 8001a3c:	f107 030c 	add.w	r3, r7, #12
 8001a40:	4619      	mov	r1, r3
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f015 fc6c 	bl	8017320 <strcat>
  strcat(html_response, "\r\n");
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f7fe fc15 	bl	8000278 <strlen>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	461a      	mov	r2, r3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4413      	add	r3, r2
 8001a56:	4a0e      	ldr	r2, [pc, #56]	; (8001a90 <webserver_http_encode_html_response+0xfc>)
 8001a58:	8811      	ldrh	r1, [r2, #0]
 8001a5a:	7892      	ldrb	r2, [r2, #2]
 8001a5c:	8019      	strh	r1, [r3, #0]
 8001a5e:	709a      	strb	r2, [r3, #2]

  /* Add http close connection header */
  strcat(html_response, http_headers[HTTP_HEADER_CONNECTION_CLOSE]);
 8001a60:	4b08      	ldr	r3, [pc, #32]	; (8001a84 <webserver_http_encode_html_response+0xf0>)
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	4619      	mov	r1, r3
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f015 fc5a 	bl	8017320 <strcat>

  /* Add http end of headers */
  strcat(html_response, http_headers[HTTP_HEADER_HEADERS_END]);
 8001a6c:	4b05      	ldr	r3, [pc, #20]	; (8001a84 <webserver_http_encode_html_response+0xf0>)
 8001a6e:	699b      	ldr	r3, [r3, #24]
 8001a70:	4619      	mov	r1, r3
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f015 fc54 	bl	8017320 <strcat>

  return WEBSERVER_OK;
 8001a78:	2300      	movs	r3, #0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3720      	adds	r7, #32
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	20000000 	.word	0x20000000
 8001a88:	20000030 	.word	0x20000030
 8001a8c:	0801ab04 	.word	0x0801ab04
 8001a90:	0801ab08 	.word	0x0801ab08

08001a94 <webserver_http_encode_css_response>:
  * @param  css_size     : css body size.
  * @retval Web Server status.
  */
WebServer_StatusTypeDef webserver_http_encode_css_response(char *css_response,
                                                           int css_size)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b088      	sub	sp, #32
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	6039      	str	r1, [r7, #0]
  char body_length[20] = {0};
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	60fb      	str	r3, [r7, #12]
 8001aa2:	f107 0310 	add.w	r3, r7, #16
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	601a      	str	r2, [r3, #0]
 8001aaa:	605a      	str	r2, [r3, #4]
 8001aac:	609a      	str	r2, [r3, #8]
 8001aae:	60da      	str	r2, [r3, #12]

  /* Clear response buffer from any previous data */
  memset(css_response, 0, strlen((char *)css_response));
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f7fe fbe1 	bl	8000278 <strlen>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	461a      	mov	r2, r3
 8001aba:	2100      	movs	r1, #0
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f015 fc8d 	bl	80173dc <memset>

  /* Add http accept header */
  strcpy(css_response, http_headers[HTTP_HEADER_ACCEPT]);
 8001ac2:	4b27      	ldr	r3, [pc, #156]	; (8001b60 <webserver_http_encode_css_response+0xcc>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f015 fd53 	bl	8017574 <strcpy>

  /* Add http server header */
  strcat(css_response, http_headers[HTTP_HEADER_SERVER]);
 8001ace:	4b24      	ldr	r3, [pc, #144]	; (8001b60 <webserver_http_encode_css_response+0xcc>)
 8001ad0:	69db      	ldr	r3, [r3, #28]
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f015 fc23 	bl	8017320 <strcat>

  /* Add http content type header */
  strcat(css_response, http_headers[HTTP_HEADER_CONTENT_TYPE]);
 8001ada:	4b21      	ldr	r3, [pc, #132]	; (8001b60 <webserver_http_encode_css_response+0xcc>)
 8001adc:	68db      	ldr	r3, [r3, #12]
 8001ade:	4619      	mov	r1, r3
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f015 fc1d 	bl	8017320 <strcat>
  strcat(css_response, http_content_types[HTTP_HEADER_CONTENT_CSS]);
 8001ae6:	4b1f      	ldr	r3, [pc, #124]	; (8001b64 <webserver_http_encode_css_response+0xd0>)
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	4619      	mov	r1, r3
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f015 fc17 	bl	8017320 <strcat>

  /* Add http content range header */
  strcat(css_response, http_headers[HTTP_HEADER_CONTENT_RANGE]);
 8001af2:	4b1b      	ldr	r3, [pc, #108]	; (8001b60 <webserver_http_encode_css_response+0xcc>)
 8001af4:	691b      	ldr	r3, [r3, #16]
 8001af6:	4619      	mov	r1, r3
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f015 fc11 	bl	8017320 <strcat>

  /* Add http content length header */
  strcat(css_response, http_headers[HTTP_HEADER_CONTENT_LENGTH]);
 8001afe:	4b18      	ldr	r3, [pc, #96]	; (8001b60 <webserver_http_encode_css_response+0xcc>)
 8001b00:	695b      	ldr	r3, [r3, #20]
 8001b02:	4619      	mov	r1, r3
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f015 fc0b 	bl	8017320 <strcat>
  sprintf(body_length, "%d", css_size);
 8001b0a:	f107 030c 	add.w	r3, r7, #12
 8001b0e:	683a      	ldr	r2, [r7, #0]
 8001b10:	4915      	ldr	r1, [pc, #84]	; (8001b68 <webserver_http_encode_css_response+0xd4>)
 8001b12:	4618      	mov	r0, r3
 8001b14:	f014 fb3e 	bl	8016194 <siprintf>
  strcat(css_response, body_length);
 8001b18:	f107 030c 	add.w	r3, r7, #12
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f015 fbfe 	bl	8017320 <strcat>
  strcat(css_response, "\r\n");
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f7fe fba7 	bl	8000278 <strlen>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4413      	add	r3, r2
 8001b32:	4a0e      	ldr	r2, [pc, #56]	; (8001b6c <webserver_http_encode_css_response+0xd8>)
 8001b34:	8811      	ldrh	r1, [r2, #0]
 8001b36:	7892      	ldrb	r2, [r2, #2]
 8001b38:	8019      	strh	r1, [r3, #0]
 8001b3a:	709a      	strb	r2, [r3, #2]

  /* Add http close connection header */
  strcat(css_response, http_headers[HTTP_HEADER_CONNECTION_CLOSE]);
 8001b3c:	4b08      	ldr	r3, [pc, #32]	; (8001b60 <webserver_http_encode_css_response+0xcc>)
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	4619      	mov	r1, r3
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f015 fbec 	bl	8017320 <strcat>

  /* Add http end of headers */
  strcat(css_response, http_headers[HTTP_HEADER_HEADERS_END]);
 8001b48:	4b05      	ldr	r3, [pc, #20]	; (8001b60 <webserver_http_encode_css_response+0xcc>)
 8001b4a:	699b      	ldr	r3, [r3, #24]
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f015 fbe6 	bl	8017320 <strcat>

  return WEBSERVER_OK;
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3720      	adds	r7, #32
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	20000000 	.word	0x20000000
 8001b64:	20000030 	.word	0x20000030
 8001b68:	0801ab04 	.word	0x0801ab04
 8001b6c:	0801ab08 	.word	0x0801ab08

08001b70 <webserver_http_encode_js_response>:
  * @param  js_size     : js body size.
  * @retval Web Server status.
  */
WebServer_StatusTypeDef webserver_http_encode_js_response(char *js_response,
                                                          int js_size)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b088      	sub	sp, #32
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	6039      	str	r1, [r7, #0]
  char body_length[20] = {0};
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	60fb      	str	r3, [r7, #12]
 8001b7e:	f107 0310 	add.w	r3, r7, #16
 8001b82:	2200      	movs	r2, #0
 8001b84:	601a      	str	r2, [r3, #0]
 8001b86:	605a      	str	r2, [r3, #4]
 8001b88:	609a      	str	r2, [r3, #8]
 8001b8a:	60da      	str	r2, [r3, #12]

  /* Clear response buffer from any previous data */
  memset(js_response, 0, strlen((char *)js_response));
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f7fe fb73 	bl	8000278 <strlen>
 8001b92:	4603      	mov	r3, r0
 8001b94:	461a      	mov	r2, r3
 8001b96:	2100      	movs	r1, #0
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f015 fc1f 	bl	80173dc <memset>

  /* Add http accept header */
  strcpy(js_response, http_headers[HTTP_HEADER_ACCEPT]);
 8001b9e:	4b27      	ldr	r3, [pc, #156]	; (8001c3c <webserver_http_encode_js_response+0xcc>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f015 fce5 	bl	8017574 <strcpy>

  /* Add http server header */
  strcat(js_response, http_headers[HTTP_HEADER_SERVER]);
 8001baa:	4b24      	ldr	r3, [pc, #144]	; (8001c3c <webserver_http_encode_js_response+0xcc>)
 8001bac:	69db      	ldr	r3, [r3, #28]
 8001bae:	4619      	mov	r1, r3
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f015 fbb5 	bl	8017320 <strcat>

  /* Add http content type header */
  strcat(js_response, http_headers[HTTP_HEADER_CONTENT_TYPE]);
 8001bb6:	4b21      	ldr	r3, [pc, #132]	; (8001c3c <webserver_http_encode_js_response+0xcc>)
 8001bb8:	68db      	ldr	r3, [r3, #12]
 8001bba:	4619      	mov	r1, r3
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f015 fbaf 	bl	8017320 <strcat>
  strcat(js_response, http_content_types[HTTP_HEADER_CONTENT_JS]);
 8001bc2:	4b1f      	ldr	r3, [pc, #124]	; (8001c40 <webserver_http_encode_js_response+0xd0>)
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f015 fba9 	bl	8017320 <strcat>

  /* Add http content range header */
  strcat(js_response, http_headers[HTTP_HEADER_CONTENT_RANGE]);
 8001bce:	4b1b      	ldr	r3, [pc, #108]	; (8001c3c <webserver_http_encode_js_response+0xcc>)
 8001bd0:	691b      	ldr	r3, [r3, #16]
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f015 fba3 	bl	8017320 <strcat>

  /* Add http content length header */
  strcat(js_response, http_headers[HTTP_HEADER_CONTENT_LENGTH]);
 8001bda:	4b18      	ldr	r3, [pc, #96]	; (8001c3c <webserver_http_encode_js_response+0xcc>)
 8001bdc:	695b      	ldr	r3, [r3, #20]
 8001bde:	4619      	mov	r1, r3
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f015 fb9d 	bl	8017320 <strcat>
  sprintf(body_length, "%d", js_size);
 8001be6:	f107 030c 	add.w	r3, r7, #12
 8001bea:	683a      	ldr	r2, [r7, #0]
 8001bec:	4915      	ldr	r1, [pc, #84]	; (8001c44 <webserver_http_encode_js_response+0xd4>)
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f014 fad0 	bl	8016194 <siprintf>
  strcat(js_response, body_length);
 8001bf4:	f107 030c 	add.w	r3, r7, #12
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f015 fb90 	bl	8017320 <strcat>
  strcat(js_response, "\r\n");
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f7fe fb39 	bl	8000278 <strlen>
 8001c06:	4603      	mov	r3, r0
 8001c08:	461a      	mov	r2, r3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	4a0e      	ldr	r2, [pc, #56]	; (8001c48 <webserver_http_encode_js_response+0xd8>)
 8001c10:	8811      	ldrh	r1, [r2, #0]
 8001c12:	7892      	ldrb	r2, [r2, #2]
 8001c14:	8019      	strh	r1, [r3, #0]
 8001c16:	709a      	strb	r2, [r3, #2]

  /* Add http close connection header */
  strcat(js_response, http_headers[HTTP_HEADER_CONNECTION_CLOSE]);
 8001c18:	4b08      	ldr	r3, [pc, #32]	; (8001c3c <webserver_http_encode_js_response+0xcc>)
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f015 fb7e 	bl	8017320 <strcat>

  /* Add http end of headers */
  strcat(js_response, http_headers[HTTP_HEADER_HEADERS_END]);
 8001c24:	4b05      	ldr	r3, [pc, #20]	; (8001c3c <webserver_http_encode_js_response+0xcc>)
 8001c26:	699b      	ldr	r3, [r3, #24]
 8001c28:	4619      	mov	r1, r3
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f015 fb78 	bl	8017320 <strcat>

  return WEBSERVER_OK;
 8001c30:	2300      	movs	r3, #0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3720      	adds	r7, #32
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	20000000 	.word	0x20000000
 8001c40:	20000030 	.word	0x20000030
 8001c44:	0801ab04 	.word	0x0801ab04
 8001c48:	0801ab08 	.word	0x0801ab08

08001c4c <webserver_http_encode_favicon_response>:
  * @param  favicon_size     : favicon body size.
  * @retval Web Server status.
  */
WebServer_StatusTypeDef webserver_http_encode_favicon_response(char *favicon_response,
                                                               int favicon_size)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b088      	sub	sp, #32
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	6039      	str	r1, [r7, #0]
  char body_length[20] = {0};
 8001c56:	2300      	movs	r3, #0
 8001c58:	60fb      	str	r3, [r7, #12]
 8001c5a:	f107 0310 	add.w	r3, r7, #16
 8001c5e:	2200      	movs	r2, #0
 8001c60:	601a      	str	r2, [r3, #0]
 8001c62:	605a      	str	r2, [r3, #4]
 8001c64:	609a      	str	r2, [r3, #8]
 8001c66:	60da      	str	r2, [r3, #12]

  /* Clear response buffer from any previous data */
  memset(favicon_response, 0, strlen((char *)favicon_response));
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f7fe fb05 	bl	8000278 <strlen>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	461a      	mov	r2, r3
 8001c72:	2100      	movs	r1, #0
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f015 fbb1 	bl	80173dc <memset>

  /* Add http accept header */
  strcpy(favicon_response, http_headers[HTTP_HEADER_ACCEPT]);
 8001c7a:	4b2a      	ldr	r3, [pc, #168]	; (8001d24 <webserver_http_encode_favicon_response+0xd8>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4619      	mov	r1, r3
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f015 fc77 	bl	8017574 <strcpy>

  /* Add http server header */
  strcat(favicon_response, http_headers[HTTP_HEADER_SERVER]);
 8001c86:	4b27      	ldr	r3, [pc, #156]	; (8001d24 <webserver_http_encode_favicon_response+0xd8>)
 8001c88:	69db      	ldr	r3, [r3, #28]
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f015 fb47 	bl	8017320 <strcat>

  /* Add http cache control header */
  strcat(favicon_response, http_headers[HTTP_HEADER_CACHE_CONTROL]);
 8001c92:	4b24      	ldr	r3, [pc, #144]	; (8001d24 <webserver_http_encode_favicon_response+0xd8>)
 8001c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c96:	4619      	mov	r1, r3
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f015 fb41 	bl	8017320 <strcat>

  /* Add http content type header */
  strcat(favicon_response, http_headers[HTTP_HEADER_CONTENT_TYPE]);
 8001c9e:	4b21      	ldr	r3, [pc, #132]	; (8001d24 <webserver_http_encode_favicon_response+0xd8>)
 8001ca0:	68db      	ldr	r3, [r3, #12]
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f015 fb3b 	bl	8017320 <strcat>
  strcat(favicon_response, http_content_types[HTTP_HEADER_CONTENT_FAVICON]);
 8001caa:	4b1f      	ldr	r3, [pc, #124]	; (8001d28 <webserver_http_encode_favicon_response+0xdc>)
 8001cac:	68db      	ldr	r3, [r3, #12]
 8001cae:	4619      	mov	r1, r3
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f015 fb35 	bl	8017320 <strcat>

  /* Add http content range header */
  strcat(favicon_response, http_headers[HTTP_HEADER_CONTENT_RANGE]);
 8001cb6:	4b1b      	ldr	r3, [pc, #108]	; (8001d24 <webserver_http_encode_favicon_response+0xd8>)
 8001cb8:	691b      	ldr	r3, [r3, #16]
 8001cba:	4619      	mov	r1, r3
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f015 fb2f 	bl	8017320 <strcat>

  /* Add http content length header */
  strcat(favicon_response, http_headers[HTTP_HEADER_CONTENT_LENGTH]);
 8001cc2:	4b18      	ldr	r3, [pc, #96]	; (8001d24 <webserver_http_encode_favicon_response+0xd8>)
 8001cc4:	695b      	ldr	r3, [r3, #20]
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f015 fb29 	bl	8017320 <strcat>
  sprintf(body_length, "%d", favicon_size);
 8001cce:	f107 030c 	add.w	r3, r7, #12
 8001cd2:	683a      	ldr	r2, [r7, #0]
 8001cd4:	4915      	ldr	r1, [pc, #84]	; (8001d2c <webserver_http_encode_favicon_response+0xe0>)
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f014 fa5c 	bl	8016194 <siprintf>
  strcat(favicon_response, body_length);
 8001cdc:	f107 030c 	add.w	r3, r7, #12
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f015 fb1c 	bl	8017320 <strcat>
  strcat(favicon_response, "\r\n");
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f7fe fac5 	bl	8000278 <strlen>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4413      	add	r3, r2
 8001cf6:	4a0e      	ldr	r2, [pc, #56]	; (8001d30 <webserver_http_encode_favicon_response+0xe4>)
 8001cf8:	8811      	ldrh	r1, [r2, #0]
 8001cfa:	7892      	ldrb	r2, [r2, #2]
 8001cfc:	8019      	strh	r1, [r3, #0]
 8001cfe:	709a      	strb	r2, [r3, #2]

  /* Add http close connection header */
  strcat(favicon_response, http_headers[HTTP_HEADER_CONNECTION_CLOSE]);
 8001d00:	4b08      	ldr	r3, [pc, #32]	; (8001d24 <webserver_http_encode_favicon_response+0xd8>)
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	4619      	mov	r1, r3
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f015 fb0a 	bl	8017320 <strcat>

  /* Add http end of headers */
  strcat(favicon_response, http_headers[HTTP_HEADER_HEADERS_END]);
 8001d0c:	4b05      	ldr	r3, [pc, #20]	; (8001d24 <webserver_http_encode_favicon_response+0xd8>)
 8001d0e:	699b      	ldr	r3, [r3, #24]
 8001d10:	4619      	mov	r1, r3
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f015 fb04 	bl	8017320 <strcat>

  return WEBSERVER_OK;
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3720      	adds	r7, #32
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	20000000 	.word	0x20000000
 8001d28:	20000030 	.word	0x20000030
 8001d2c:	0801ab04 	.word	0x0801ab04
 8001d30:	0801ab08 	.word	0x0801ab08

08001d34 <webserver_http_encode_sensor_response>:
  * @param  sensor_size     : sensor body size.
  * @retval Web Server status.
  */
WebServer_StatusTypeDef webserver_http_encode_sensor_response(char *sensor_response,
                                                              int sensor_size)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b088      	sub	sp, #32
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	6039      	str	r1, [r7, #0]
  char body_length[20] = {0};
 8001d3e:	2300      	movs	r3, #0
 8001d40:	60fb      	str	r3, [r7, #12]
 8001d42:	f107 0310 	add.w	r3, r7, #16
 8001d46:	2200      	movs	r2, #0
 8001d48:	601a      	str	r2, [r3, #0]
 8001d4a:	605a      	str	r2, [r3, #4]
 8001d4c:	609a      	str	r2, [r3, #8]
 8001d4e:	60da      	str	r2, [r3, #12]

  /* Clear response buffer from any previous response */
  memset(sensor_response, 0, strlen(sensor_response));
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f7fe fa91 	bl	8000278 <strlen>
 8001d56:	4603      	mov	r3, r0
 8001d58:	461a      	mov	r2, r3
 8001d5a:	2100      	movs	r1, #0
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f015 fb3d 	bl	80173dc <memset>

  /* Add http accept header */
  strcpy(sensor_response, http_headers[HTTP_HEADER_ACCEPT]);
 8001d62:	4b21      	ldr	r3, [pc, #132]	; (8001de8 <webserver_http_encode_sensor_response+0xb4>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4619      	mov	r1, r3
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f015 fc03 	bl	8017574 <strcpy>

  /* Add http content type header */
  strcat(sensor_response, http_headers[HTTP_HEADER_CONTENT_TYPE]);
 8001d6e:	4b1e      	ldr	r3, [pc, #120]	; (8001de8 <webserver_http_encode_sensor_response+0xb4>)
 8001d70:	68db      	ldr	r3, [r3, #12]
 8001d72:	4619      	mov	r1, r3
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f015 fad3 	bl	8017320 <strcat>

  /* Add http content range header */
  strcat(sensor_response, http_headers[HTTP_HEADER_CONTENT_RANGE]);
 8001d7a:	4b1b      	ldr	r3, [pc, #108]	; (8001de8 <webserver_http_encode_sensor_response+0xb4>)
 8001d7c:	691b      	ldr	r3, [r3, #16]
 8001d7e:	4619      	mov	r1, r3
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f015 facd 	bl	8017320 <strcat>

  /* Add http content length header */
  strcat(sensor_response, http_headers[HTTP_HEADER_CONTENT_LENGTH]);
 8001d86:	4b18      	ldr	r3, [pc, #96]	; (8001de8 <webserver_http_encode_sensor_response+0xb4>)
 8001d88:	695b      	ldr	r3, [r3, #20]
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f015 fac7 	bl	8017320 <strcat>
  sprintf(body_length, "%d", sensor_size);
 8001d92:	f107 030c 	add.w	r3, r7, #12
 8001d96:	683a      	ldr	r2, [r7, #0]
 8001d98:	4914      	ldr	r1, [pc, #80]	; (8001dec <webserver_http_encode_sensor_response+0xb8>)
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f014 f9fa 	bl	8016194 <siprintf>
  strcat(sensor_response, body_length);
 8001da0:	f107 030c 	add.w	r3, r7, #12
 8001da4:	4619      	mov	r1, r3
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f015 faba 	bl	8017320 <strcat>
  strcat(sensor_response, "\r\n");
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f7fe fa63 	bl	8000278 <strlen>
 8001db2:	4603      	mov	r3, r0
 8001db4:	461a      	mov	r2, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4413      	add	r3, r2
 8001dba:	4a0d      	ldr	r2, [pc, #52]	; (8001df0 <webserver_http_encode_sensor_response+0xbc>)
 8001dbc:	8811      	ldrh	r1, [r2, #0]
 8001dbe:	7892      	ldrb	r2, [r2, #2]
 8001dc0:	8019      	strh	r1, [r3, #0]
 8001dc2:	709a      	strb	r2, [r3, #2]

  /* Add http close connection header */
  strcat(sensor_response, http_headers[HTTP_HEADER_CONNECTION_CLOSE]);
 8001dc4:	4b08      	ldr	r3, [pc, #32]	; (8001de8 <webserver_http_encode_sensor_response+0xb4>)
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	4619      	mov	r1, r3
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f015 faa8 	bl	8017320 <strcat>

  /* Add http end of headers */
  strcat(sensor_response, http_headers[HTTP_HEADER_HEADERS_END]);
 8001dd0:	4b05      	ldr	r3, [pc, #20]	; (8001de8 <webserver_http_encode_sensor_response+0xb4>)
 8001dd2:	699b      	ldr	r3, [r3, #24]
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f015 faa2 	bl	8017320 <strcat>

  return WEBSERVER_OK;
 8001ddc:	2300      	movs	r3, #0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3720      	adds	r7, #32
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	20000000 	.word	0x20000000
 8001dec:	0801ab04 	.word	0x0801ab04
 8001df0:	0801ab08 	.word	0x0801ab08

08001df4 <webserver_http_encode_woff2_response>:
  * @param  woff2_size     : sensor body size.
  * @retval Web Server status.
  */
WebServer_StatusTypeDef webserver_http_encode_woff2_response(char *woff2_response,
                                                             int woff2_size)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b088      	sub	sp, #32
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	6039      	str	r1, [r7, #0]
  char body_length[20] = {0};
 8001dfe:	2300      	movs	r3, #0
 8001e00:	60fb      	str	r3, [r7, #12]
 8001e02:	f107 0310 	add.w	r3, r7, #16
 8001e06:	2200      	movs	r2, #0
 8001e08:	601a      	str	r2, [r3, #0]
 8001e0a:	605a      	str	r2, [r3, #4]
 8001e0c:	609a      	str	r2, [r3, #8]
 8001e0e:	60da      	str	r2, [r3, #12]

  /* Clear response buffer from any previous response */
  memset(woff2_response, 0, strlen(woff2_response));
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f7fe fa31 	bl	8000278 <strlen>
 8001e16:	4603      	mov	r3, r0
 8001e18:	461a      	mov	r2, r3
 8001e1a:	2100      	movs	r1, #0
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f015 fadd 	bl	80173dc <memset>

  /* Add http accept header */
  strcpy(woff2_response, http_headers[HTTP_HEADER_ACCEPT]);
 8001e22:	4b21      	ldr	r3, [pc, #132]	; (8001ea8 <webserver_http_encode_woff2_response+0xb4>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4619      	mov	r1, r3
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f015 fba3 	bl	8017574 <strcpy>

  /* Add http content type header */
  strcat(woff2_response, http_headers[HTTP_HEADER_CONTENT_TYPE]);
 8001e2e:	4b1e      	ldr	r3, [pc, #120]	; (8001ea8 <webserver_http_encode_woff2_response+0xb4>)
 8001e30:	68db      	ldr	r3, [r3, #12]
 8001e32:	4619      	mov	r1, r3
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f015 fa73 	bl	8017320 <strcat>

  /* Add http content range header */
  strcat(woff2_response, http_headers[HTTP_HEADER_CONTENT_RANGE]);
 8001e3a:	4b1b      	ldr	r3, [pc, #108]	; (8001ea8 <webserver_http_encode_woff2_response+0xb4>)
 8001e3c:	691b      	ldr	r3, [r3, #16]
 8001e3e:	4619      	mov	r1, r3
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f015 fa6d 	bl	8017320 <strcat>

  /* Add http content length header */
  strcat(woff2_response, http_headers[HTTP_HEADER_CONTENT_LENGTH]);
 8001e46:	4b18      	ldr	r3, [pc, #96]	; (8001ea8 <webserver_http_encode_woff2_response+0xb4>)
 8001e48:	695b      	ldr	r3, [r3, #20]
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f015 fa67 	bl	8017320 <strcat>
  sprintf(body_length, "%d", woff2_size);
 8001e52:	f107 030c 	add.w	r3, r7, #12
 8001e56:	683a      	ldr	r2, [r7, #0]
 8001e58:	4914      	ldr	r1, [pc, #80]	; (8001eac <webserver_http_encode_woff2_response+0xb8>)
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f014 f99a 	bl	8016194 <siprintf>
  strcat(woff2_response, body_length);
 8001e60:	f107 030c 	add.w	r3, r7, #12
 8001e64:	4619      	mov	r1, r3
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f015 fa5a 	bl	8017320 <strcat>
  strcat(woff2_response, "\r\n");
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f7fe fa03 	bl	8000278 <strlen>
 8001e72:	4603      	mov	r3, r0
 8001e74:	461a      	mov	r2, r3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4413      	add	r3, r2
 8001e7a:	4a0d      	ldr	r2, [pc, #52]	; (8001eb0 <webserver_http_encode_woff2_response+0xbc>)
 8001e7c:	8811      	ldrh	r1, [r2, #0]
 8001e7e:	7892      	ldrb	r2, [r2, #2]
 8001e80:	8019      	strh	r1, [r3, #0]
 8001e82:	709a      	strb	r2, [r3, #2]

  /* Add http close connection header */
  strcat(woff2_response, http_headers[HTTP_HEADER_CONNECTION_CLOSE]);
 8001e84:	4b08      	ldr	r3, [pc, #32]	; (8001ea8 <webserver_http_encode_woff2_response+0xb4>)
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	4619      	mov	r1, r3
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f015 fa48 	bl	8017320 <strcat>

  /* Add http end of headers */
  strcat(woff2_response, http_headers[HTTP_HEADER_HEADERS_END]);
 8001e90:	4b05      	ldr	r3, [pc, #20]	; (8001ea8 <webserver_http_encode_woff2_response+0xb4>)
 8001e92:	699b      	ldr	r3, [r3, #24]
 8001e94:	4619      	mov	r1, r3
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f015 fa42 	bl	8017320 <strcat>

  return WEBSERVER_OK;
 8001e9c:	2300      	movs	r3, #0
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3720      	adds	r7, #32
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	20000000 	.word	0x20000000
 8001eac:	0801ab04 	.word	0x0801ab04
 8001eb0:	0801ab08 	.word	0x0801ab08

08001eb4 <webserver_http_encode_json_response>:
  * @param  json_size     : json body size.
  * @retval Web Server status.
  */
WebServer_StatusTypeDef webserver_http_encode_json_response(char *json_response,
                                                            int json_size)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b088      	sub	sp, #32
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	6039      	str	r1, [r7, #0]
  char body_length[20] = {0};
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	60fb      	str	r3, [r7, #12]
 8001ec2:	f107 0310 	add.w	r3, r7, #16
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	601a      	str	r2, [r3, #0]
 8001eca:	605a      	str	r2, [r3, #4]
 8001ecc:	609a      	str	r2, [r3, #8]
 8001ece:	60da      	str	r2, [r3, #12]

  /* Clear response buffer from any previous response */
  memset(json_response, 0, strlen(json_response));
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f7fe f9d1 	bl	8000278 <strlen>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	461a      	mov	r2, r3
 8001eda:	2100      	movs	r1, #0
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f015 fa7d 	bl	80173dc <memset>

  /* Add http accept header */
  strcpy(json_response, http_headers[HTTP_HEADER_ACCEPT]);
 8001ee2:	4b24      	ldr	r3, [pc, #144]	; (8001f74 <webserver_http_encode_json_response+0xc0>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f015 fb43 	bl	8017574 <strcpy>

  /* Add http content type header */
  strcat(json_response, http_headers[HTTP_HEADER_CONTENT_TYPE]);
 8001eee:	4b21      	ldr	r3, [pc, #132]	; (8001f74 <webserver_http_encode_json_response+0xc0>)
 8001ef0:	68db      	ldr	r3, [r3, #12]
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f015 fa13 	bl	8017320 <strcat>
  strcat(json_response, http_content_types[HTTP_HEADER_CONTENT_JSON]);
 8001efa:	4b1f      	ldr	r3, [pc, #124]	; (8001f78 <webserver_http_encode_json_response+0xc4>)
 8001efc:	695b      	ldr	r3, [r3, #20]
 8001efe:	4619      	mov	r1, r3
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f015 fa0d 	bl	8017320 <strcat>

  /* Add http content range header */
  strcat(json_response, http_headers[HTTP_HEADER_CONTENT_RANGE]);
 8001f06:	4b1b      	ldr	r3, [pc, #108]	; (8001f74 <webserver_http_encode_json_response+0xc0>)
 8001f08:	691b      	ldr	r3, [r3, #16]
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f015 fa07 	bl	8017320 <strcat>

  /* Add http content length header */
  strcat(json_response, http_headers[HTTP_HEADER_CONTENT_LENGTH]);
 8001f12:	4b18      	ldr	r3, [pc, #96]	; (8001f74 <webserver_http_encode_json_response+0xc0>)
 8001f14:	695b      	ldr	r3, [r3, #20]
 8001f16:	4619      	mov	r1, r3
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f015 fa01 	bl	8017320 <strcat>
  sprintf(body_length, "%d", json_size);
 8001f1e:	f107 030c 	add.w	r3, r7, #12
 8001f22:	683a      	ldr	r2, [r7, #0]
 8001f24:	4915      	ldr	r1, [pc, #84]	; (8001f7c <webserver_http_encode_json_response+0xc8>)
 8001f26:	4618      	mov	r0, r3
 8001f28:	f014 f934 	bl	8016194 <siprintf>
  strcat(json_response, body_length);
 8001f2c:	f107 030c 	add.w	r3, r7, #12
 8001f30:	4619      	mov	r1, r3
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f015 f9f4 	bl	8017320 <strcat>
  strcat(json_response, "\r\n");
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f7fe f99d 	bl	8000278 <strlen>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	461a      	mov	r2, r3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4413      	add	r3, r2
 8001f46:	4a0e      	ldr	r2, [pc, #56]	; (8001f80 <webserver_http_encode_json_response+0xcc>)
 8001f48:	8811      	ldrh	r1, [r2, #0]
 8001f4a:	7892      	ldrb	r2, [r2, #2]
 8001f4c:	8019      	strh	r1, [r3, #0]
 8001f4e:	709a      	strb	r2, [r3, #2]

  /* Add http close connection header */
  strcat(json_response, http_headers[HTTP_HEADER_CONNECTION_CLOSE]);
 8001f50:	4b08      	ldr	r3, [pc, #32]	; (8001f74 <webserver_http_encode_json_response+0xc0>)
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	4619      	mov	r1, r3
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f015 f9e2 	bl	8017320 <strcat>

  /* Add http end of headers */
  strcat(json_response, http_headers[HTTP_HEADER_HEADERS_END]);
 8001f5c:	4b05      	ldr	r3, [pc, #20]	; (8001f74 <webserver_http_encode_json_response+0xc0>)
 8001f5e:	699b      	ldr	r3, [r3, #24]
 8001f60:	4619      	mov	r1, r3
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f015 f9dc 	bl	8017320 <strcat>

  return WEBSERVER_OK;
 8001f68:	2300      	movs	r3, #0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3720      	adds	r7, #32
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	20000000 	.word	0x20000000
 8001f78:	20000030 	.word	0x20000030
 8001f7c:	0801ab04 	.word	0x0801ab04
 8001f80:	0801ab08 	.word	0x0801ab08

08001f84 <webserver_http_encode_image_response>:
  * @param  image_size     : image body size.
  * @retval Web Server status.
  */
WebServer_StatusTypeDef webserver_http_encode_image_response(char *image_response,
                                                             int image_size)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b088      	sub	sp, #32
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	6039      	str	r1, [r7, #0]
  char body_length[20] = {0};
 8001f8e:	2300      	movs	r3, #0
 8001f90:	60fb      	str	r3, [r7, #12]
 8001f92:	f107 0310 	add.w	r3, r7, #16
 8001f96:	2200      	movs	r2, #0
 8001f98:	601a      	str	r2, [r3, #0]
 8001f9a:	605a      	str	r2, [r3, #4]
 8001f9c:	609a      	str	r2, [r3, #8]
 8001f9e:	60da      	str	r2, [r3, #12]

  /* Clear response buffer from any previous response */
  memset(image_response, 0, strlen(image_response));
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f7fe f969 	bl	8000278 <strlen>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	461a      	mov	r2, r3
 8001faa:	2100      	movs	r1, #0
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f015 fa15 	bl	80173dc <memset>

  /* Add http accept header */
  strcpy(image_response, http_headers[HTTP_HEADER_ACCEPT]);
 8001fb2:	4b24      	ldr	r3, [pc, #144]	; (8002044 <webserver_http_encode_image_response+0xc0>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f015 fadb 	bl	8017574 <strcpy>

  /* Add http content type header */
  strcat(image_response, http_headers[HTTP_HEADER_CONTENT_TYPE]);
 8001fbe:	4b21      	ldr	r3, [pc, #132]	; (8002044 <webserver_http_encode_image_response+0xc0>)
 8001fc0:	68db      	ldr	r3, [r3, #12]
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f015 f9ab 	bl	8017320 <strcat>
  strcat(image_response, http_content_types[HTTP_HEADER_CONTENT_IMAGE]);
 8001fca:	4b1f      	ldr	r3, [pc, #124]	; (8002048 <webserver_http_encode_image_response+0xc4>)
 8001fcc:	699b      	ldr	r3, [r3, #24]
 8001fce:	4619      	mov	r1, r3
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f015 f9a5 	bl	8017320 <strcat>

  /* Add http content range header */
  strcat(image_response, http_headers[HTTP_HEADER_CONTENT_RANGE]);
 8001fd6:	4b1b      	ldr	r3, [pc, #108]	; (8002044 <webserver_http_encode_image_response+0xc0>)
 8001fd8:	691b      	ldr	r3, [r3, #16]
 8001fda:	4619      	mov	r1, r3
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f015 f99f 	bl	8017320 <strcat>

  /* Add http content length header */
  strcat(image_response, http_headers[HTTP_HEADER_CONTENT_LENGTH]);
 8001fe2:	4b18      	ldr	r3, [pc, #96]	; (8002044 <webserver_http_encode_image_response+0xc0>)
 8001fe4:	695b      	ldr	r3, [r3, #20]
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f015 f999 	bl	8017320 <strcat>
  sprintf(body_length, "%d", image_size);
 8001fee:	f107 030c 	add.w	r3, r7, #12
 8001ff2:	683a      	ldr	r2, [r7, #0]
 8001ff4:	4915      	ldr	r1, [pc, #84]	; (800204c <webserver_http_encode_image_response+0xc8>)
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f014 f8cc 	bl	8016194 <siprintf>
  strcat(image_response, body_length);
 8001ffc:	f107 030c 	add.w	r3, r7, #12
 8002000:	4619      	mov	r1, r3
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f015 f98c 	bl	8017320 <strcat>
  strcat(image_response, "\r\n");
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f7fe f935 	bl	8000278 <strlen>
 800200e:	4603      	mov	r3, r0
 8002010:	461a      	mov	r2, r3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4413      	add	r3, r2
 8002016:	4a0e      	ldr	r2, [pc, #56]	; (8002050 <webserver_http_encode_image_response+0xcc>)
 8002018:	8811      	ldrh	r1, [r2, #0]
 800201a:	7892      	ldrb	r2, [r2, #2]
 800201c:	8019      	strh	r1, [r3, #0]
 800201e:	709a      	strb	r2, [r3, #2]

  /* Add http close connection header */
  strcat(image_response, http_headers[HTTP_HEADER_CONNECTION_CLOSE]);
 8002020:	4b08      	ldr	r3, [pc, #32]	; (8002044 <webserver_http_encode_image_response+0xc0>)
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	4619      	mov	r1, r3
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f015 f97a 	bl	8017320 <strcat>

  /* Add http end of headers */
  strcat(image_response, http_headers[HTTP_HEADER_HEADERS_END]);
 800202c:	4b05      	ldr	r3, [pc, #20]	; (8002044 <webserver_http_encode_image_response+0xc0>)
 800202e:	699b      	ldr	r3, [r3, #24]
 8002030:	4619      	mov	r1, r3
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f015 f974 	bl	8017320 <strcat>

  return WEBSERVER_OK;
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3720      	adds	r7, #32
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	20000000 	.word	0x20000000
 8002048:	20000030 	.word	0x20000030
 800204c:	0801ab04 	.word	0x0801ab04
 8002050:	0801ab08 	.word	0x0801ab08

08002054 <webserver_http_start>:
  * @brief  Start HTTP web server process
  * @param  None
  * @retval Web Server status
  */
WebServer_StatusTypeDef webserver_http_start(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b090      	sub	sp, #64	; 0x40
 8002058:	af02      	add	r7, sp, #8
  /* The IPv4 network socket for this server, to bind with the port to listen to. */
  struct net_sockaddr_in s_addr_in = {0};
 800205a:	f107 0320 	add.w	r3, r7, #32
 800205e:	2200      	movs	r2, #0
 8002060:	601a      	str	r2, [r3, #0]
 8002062:	605a      	str	r2, [r3, #4]
 8002064:	609a      	str	r2, [r3, #8]
 8002066:	60da      	str	r2, [r3, #12]
  net_ip_addr_t ip_addr_in = {0};
 8002068:	2300      	movs	r3, #0
 800206a:	61fb      	str	r3, [r7, #28]
  int32_t timeout = MX_WIFI_CMD_TIMEOUT;
 800206c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002070:	61bb      	str	r3, [r7, #24]
  int32_t sock = 0;
 8002072:	2300      	movs	r3, #0
 8002074:	637b      	str	r3, [r7, #52]	; 0x34

  /* Create a TCP socket. */
  printf("\r\n");
 8002076:	485a      	ldr	r0, [pc, #360]	; (80021e0 <webserver_http_start+0x18c>)
 8002078:	f015 f94a 	bl	8017310 <puts>
  printf("*** Create TCP socket\r\n");
 800207c:	4859      	ldr	r0, [pc, #356]	; (80021e4 <webserver_http_start+0x190>)
 800207e:	f015 f947 	bl	8017310 <puts>
  if ((sock = net_socket(NET_AF_INET, NET_SOCK_STREAM, NET_IPPROTO_TCP)) < 0)
 8002082:	2206      	movs	r2, #6
 8002084:	2101      	movs	r1, #1
 8002086:	2002      	movs	r0, #2
 8002088:	f011 faae 	bl	80135e8 <net_socket>
 800208c:	6378      	str	r0, [r7, #52]	; 0x34
 800208e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002090:	2b00      	cmp	r3, #0
 8002092:	da05      	bge.n	80020a0 <webserver_http_start+0x4c>
  {
    printf("*** Fail : Socket not created !!!!\r\n");
 8002094:	4854      	ldr	r0, [pc, #336]	; (80021e8 <webserver_http_start+0x194>)
 8002096:	f015 f93b 	bl	8017310 <puts>
    return SOCKET_ERROR;
 800209a:	f06f 0307 	mvn.w	r3, #7
 800209e:	e09b      	b.n	80021d8 <webserver_http_start+0x184>
  }
  printf("*** TCP socket created\r\n");
 80020a0:	4852      	ldr	r0, [pc, #328]	; (80021ec <webserver_http_start+0x198>)
 80020a2:	f015 f935 	bl	8017310 <puts>

  printf("*** net_setsockopt ...\r\n");
 80020a6:	4852      	ldr	r0, [pc, #328]	; (80021f0 <webserver_http_start+0x19c>)
 80020a8:	f015 f932 	bl	8017310 <puts>
  net_setsockopt(sock, NET_SOL_SOCKET, NET_SO_BINDTODEVICE, Netif, sizeof(&Netif));
 80020ac:	4b51      	ldr	r3, [pc, #324]	; (80021f4 <webserver_http_start+0x1a0>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2204      	movs	r2, #4
 80020b2:	9200      	str	r2, [sp, #0]
 80020b4:	2203      	movs	r2, #3
 80020b6:	f640 71ff 	movw	r1, #4095	; 0xfff
 80020ba:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80020bc:	f011 fde2 	bl	8013c84 <net_setsockopt>
  net_setsockopt(sock, NET_SOL_SOCKET, NET_SO_RCVTIMEO, &timeout, sizeof(timeout));
 80020c0:	f107 0318 	add.w	r3, r7, #24
 80020c4:	2204      	movs	r2, #4
 80020c6:	9200      	str	r2, [sp, #0]
 80020c8:	f241 0206 	movw	r2, #4102	; 0x1006
 80020cc:	f640 71ff 	movw	r1, #4095	; 0xfff
 80020d0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80020d2:	f011 fdd7 	bl	8013c84 <net_setsockopt>

  /* Bind socket */
  printf("*** Set port and bind socket\r\n");
 80020d6:	4848      	ldr	r0, [pc, #288]	; (80021f8 <webserver_http_start+0x1a4>)
 80020d8:	f015 f91a 	bl	8017310 <puts>
  s_addr_in.sin_family = NET_AF_INET;
 80020dc:	2302      	movs	r3, #2
 80020de:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  s_addr_in.sin_len    = sizeof(s_addr_in);
 80020e2:	2310      	movs	r3, #16
 80020e4:	f887 3020 	strb.w	r3, [r7, #32]

  net_if_get_ip_address(Netif, &ip_addr_in);
 80020e8:	4b42      	ldr	r3, [pc, #264]	; (80021f4 <webserver_http_start+0x1a0>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f107 021c 	add.w	r2, r7, #28
 80020f0:	4611      	mov	r1, r2
 80020f2:	4618      	mov	r0, r3
 80020f4:	f011 f860 	bl	80131b8 <net_if_get_ip_address>
  s_addr_in.sin_addr.s_addr = ip_addr_in.addr;
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	627b      	str	r3, [r7, #36]	; 0x24

  net_set_port((struct net_sockaddr *)&s_addr_in, HTTP_SERVER_PORT);
 80020fc:	f107 0320 	add.w	r3, r7, #32
 8002100:	2150      	movs	r1, #80	; 0x50
 8002102:	4618      	mov	r0, r3
 8002104:	f010 fcb0 	bl	8012a68 <net_set_port>
  if (net_bind(sock, (struct net_sockaddr *)&s_addr_in, sizeof(s_addr_in)) != 0U)
 8002108:	f107 0320 	add.w	r3, r7, #32
 800210c:	2210      	movs	r2, #16
 800210e:	4619      	mov	r1, r3
 8002110:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002112:	f011 faa9 	bl	8013668 <net_bind>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d005      	beq.n	8002128 <webserver_http_start+0xd4>
  {
    printf("*** Fail : Socket not binded !!!!\r\n");
 800211c:	4837      	ldr	r0, [pc, #220]	; (80021fc <webserver_http_start+0x1a8>)
 800211e:	f015 f8f7 	bl	8017310 <puts>
    return SOCKET_ERROR;
 8002122:	f06f 0307 	mvn.w	r3, #7
 8002126:	e057      	b.n	80021d8 <webserver_http_start+0x184>
  }
  printf("*** Port and socket binded\r\n");
 8002128:	4835      	ldr	r0, [pc, #212]	; (8002200 <webserver_http_start+0x1ac>)
 800212a:	f015 f8f1 	bl	8017310 <puts>

  /* listen for incoming connections */
  printf("*** Listen for incoming connections\r\n");
 800212e:	4835      	ldr	r0, [pc, #212]	; (8002204 <webserver_http_start+0x1b0>)
 8002130:	f015 f8ee 	bl	8017310 <puts>
  if (net_listen(sock, 5) != 0U)
 8002134:	2105      	movs	r1, #5
 8002136:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002138:	f011 fba6 	bl	8013888 <net_listen>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d005      	beq.n	800214e <webserver_http_start+0xfa>
  {
    printf("*** Fail : Listening not started !!!!\r\n");
 8002142:	4831      	ldr	r0, [pc, #196]	; (8002208 <webserver_http_start+0x1b4>)
 8002144:	f015 f8e4 	bl	8017310 <puts>
    return SOCKET_ERROR;
 8002148:	f06f 0307 	mvn.w	r3, #7
 800214c:	e044      	b.n	80021d8 <webserver_http_start+0x184>
  }
  printf("*** Listening started \r\n");
 800214e:	482f      	ldr	r0, [pc, #188]	; (800220c <webserver_http_start+0x1b8>)
 8002150:	f015 f8de 	bl	8017310 <puts>

  printf("--> Please connect to %s:%" PRIu32 "\n",
 8002154:	f107 031c 	add.w	r3, r7, #28
 8002158:	4618      	mov	r0, r3
 800215a:	f010 fc6f 	bl	8012a3c <net_ntoa>
 800215e:	4601      	mov	r1, r0
         net_ntoa(&ip_addr_in), (uint32_t)NET_NTOHS(s_addr_in.sin_port));
 8002160:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002162:	ba5b      	rev16	r3, r3
 8002164:	b29b      	uxth	r3, r3
  printf("--> Please connect to %s:%" PRIu32 "\n",
 8002166:	461a      	mov	r2, r3
 8002168:	4829      	ldr	r0, [pc, #164]	; (8002210 <webserver_http_start+0x1bc>)
 800216a:	f015 f863 	bl	8017234 <iprintf>

  /* Infinite loop to serve socket communication */
  while (1)
  {
    struct net_sockaddr_in s_addr_in_remote_host = {0};
 800216e:	f107 0308 	add.w	r3, r7, #8
 8002172:	2200      	movs	r2, #0
 8002174:	601a      	str	r2, [r3, #0]
 8002176:	605a      	str	r2, [r3, #4]
 8002178:	609a      	str	r2, [r3, #8]
 800217a:	60da      	str	r2, [r3, #12]
    uint32_t s_addr_in_remote_host_len = sizeof(s_addr_in_remote_host);
 800217c:	2310      	movs	r3, #16
 800217e:	607b      	str	r3, [r7, #4]

    /* Accept net socket requests */
    const int32_t newconn = net_accept(sock, (struct net_sockaddr *)&s_addr_in_remote_host, (uint32_t *)&s_addr_in_remote_host_len);
 8002180:	1d3a      	adds	r2, r7, #4
 8002182:	f107 0308 	add.w	r3, r7, #8
 8002186:	4619      	mov	r1, r3
 8002188:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800218a:	f011 fae5 	bl	8013758 <net_accept>
 800218e:	6338      	str	r0, [r7, #48]	; 0x30

    /* Check if a valid new connection is requested */
    if (newconn > 0)
 8002190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002192:	2b00      	cmp	r3, #0
 8002194:	dd1b      	ble.n	80021ce <webserver_http_start+0x17a>
    {
      net_ip_addr_t ip_addr_in_remote_host = {0};
 8002196:	2300      	movs	r3, #0
 8002198:	603b      	str	r3, [r7, #0]
      ip_addr_in_remote_host.addr = s_addr_in_remote_host.sin_addr.s_addr;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	603b      	str	r3, [r7, #0]

      printf("Request from %s:%" PRIu32 "\n",
 800219e:	463b      	mov	r3, r7
 80021a0:	4618      	mov	r0, r3
 80021a2:	f010 fc4b 	bl	8012a3c <net_ntoa>
 80021a6:	4601      	mov	r1, r0
             net_ntoa(&ip_addr_in_remote_host), (uint32_t)NET_NTOHS(s_addr_in_remote_host.sin_port));
 80021a8:	897b      	ldrh	r3, [r7, #10]
 80021aa:	ba5b      	rev16	r3, r3
 80021ac:	b29b      	uxth	r3, r3
      printf("Request from %s:%" PRIu32 "\n",
 80021ae:	461a      	mov	r2, r3
 80021b0:	4818      	ldr	r0, [pc, #96]	; (8002214 <webserver_http_start+0x1c0>)
 80021b2:	f015 f83f 	bl	8017234 <iprintf>

      /* Treat net socket requests */
      if (http_treat_request(newconn) != WEBSERVER_OK)
 80021b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80021b8:	f000 f832 	bl	8002220 <http_treat_request>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d0d5      	beq.n	800216e <webserver_http_start+0x11a>
      {
        printf("*** Fail : Invalid HTTP request !!!!\r\n");
 80021c2:	4815      	ldr	r0, [pc, #84]	; (8002218 <webserver_http_start+0x1c4>)
 80021c4:	f015 f8a4 	bl	8017310 <puts>
        return SOCKET_ERROR;
 80021c8:	f06f 0307 	mvn.w	r3, #7
 80021cc:	e004      	b.n	80021d8 <webserver_http_start+0x184>
      }
    }
    else
    {
      printf("*** Fail : Invalid socket connection !!!! \r\n");
 80021ce:	4813      	ldr	r0, [pc, #76]	; (800221c <webserver_http_start+0x1c8>)
 80021d0:	f015 f89e 	bl	8017310 <puts>
      return SOCKET_ERROR;
 80021d4:	f06f 0307 	mvn.w	r3, #7
    }
  }
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3738      	adds	r7, #56	; 0x38
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	0801ab0c 	.word	0x0801ab0c
 80021e4:	0801ab10 	.word	0x0801ab10
 80021e8:	0801ab28 	.word	0x0801ab28
 80021ec:	0801ab4c 	.word	0x0801ab4c
 80021f0:	0801ab64 	.word	0x0801ab64
 80021f4:	20000c88 	.word	0x20000c88
 80021f8:	0801ab7c 	.word	0x0801ab7c
 80021fc:	0801ab9c 	.word	0x0801ab9c
 8002200:	0801abc0 	.word	0x0801abc0
 8002204:	0801abdc 	.word	0x0801abdc
 8002208:	0801ac04 	.word	0x0801ac04
 800220c:	0801ac2c 	.word	0x0801ac2c
 8002210:	0801ac44 	.word	0x0801ac44
 8002214:	0801ac64 	.word	0x0801ac64
 8002218:	0801ac7c 	.word	0x0801ac7c
 800221c:	0801aca4 	.word	0x0801aca4

08002220 <http_treat_request>:
  * @brief  Treat webserver HTTP request
  * @param  socket : connection socket
  * @retval Web Server status
  */
static WebServer_StatusTypeDef http_treat_request(int32_t socket)
{
 8002220:	b5b0      	push	{r4, r5, r7, lr}
 8002222:	b086      	sub	sp, #24
 8002224:	af02      	add	r7, sp, #8
 8002226:	6078      	str	r0, [r7, #4]
  static unsigned char recv_buffer[HTTP_RECEIVE_BUFFER_SIZE];

  /* Clear receive buffer */
  memset((void*)recv_buffer, 0, sizeof(recv_buffer));
 8002228:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800222c:	2100      	movs	r1, #0
 800222e:	4898      	ldr	r0, [pc, #608]	; (8002490 <http_treat_request+0x270>)
 8002230:	f015 f8d4 	bl	80173dc <memset>

  /* Read the http request */
  if (net_recv(socket, recv_buffer, HTTP_RECEIVE_BUFFER_SIZE, 0) < 0)
 8002234:	2300      	movs	r3, #0
 8002236:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800223a:	4995      	ldr	r1, [pc, #596]	; (8002490 <http_treat_request+0x270>)
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	f011 fc11 	bl	8013a64 <net_recv>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	da02      	bge.n	800224e <http_treat_request+0x2e>
  {
    return HTTP_ERROR;
 8002248:	f06f 0306 	mvn.w	r3, #6
 800224c:	e11b      	b.n	8002486 <http_treat_request+0x266>
  }

  /* Treat get cmd */
  if (strncmp((char *)recv_buffer, http_get_cmd, http_get_cmd_size) == 0U)
 800224e:	4b91      	ldr	r3, [pc, #580]	; (8002494 <http_treat_request+0x274>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	461a      	mov	r2, r3
 8002254:	4990      	ldr	r1, [pc, #576]	; (8002498 <http_treat_request+0x278>)
 8002256:	488e      	ldr	r0, [pc, #568]	; (8002490 <http_treat_request+0x270>)
 8002258:	f015 f871 	bl	801733e <strncmp>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	f040 8104 	bne.w	800246c <http_treat_request+0x24c>
  {
    /* Send html */
    if (strncmp((char *)&recv_buffer[http_get_cmd_size], http_html_cmd, http_html_cmd_size) == 0U)
 8002264:	4b8b      	ldr	r3, [pc, #556]	; (8002494 <http_treat_request+0x274>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a89      	ldr	r2, [pc, #548]	; (8002490 <http_treat_request+0x270>)
 800226a:	4413      	add	r3, r2
 800226c:	4a8b      	ldr	r2, [pc, #556]	; (800249c <http_treat_request+0x27c>)
 800226e:	6812      	ldr	r2, [r2, #0]
 8002270:	498b      	ldr	r1, [pc, #556]	; (80024a0 <http_treat_request+0x280>)
 8002272:	4618      	mov	r0, r3
 8002274:	f015 f863 	bl	801733e <strncmp>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d109      	bne.n	8002292 <http_treat_request+0x72>
    {
      http_send_response(socket, HTTP_HEADER_HTML_ID, http_header_response, html_buff, html_buff_size);
 800227e:	4b89      	ldr	r3, [pc, #548]	; (80024a4 <http_treat_request+0x284>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	9300      	str	r3, [sp, #0]
 8002284:	4b88      	ldr	r3, [pc, #544]	; (80024a8 <http_treat_request+0x288>)
 8002286:	4a89      	ldr	r2, [pc, #548]	; (80024ac <http_treat_request+0x28c>)
 8002288:	2100      	movs	r1, #0
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f000 f958 	bl	8002540 <http_send_response>
 8002290:	e0ef      	b.n	8002472 <http_treat_request+0x252>
    }
    /* Send css shunk */
    else if (strncmp((char *)&recv_buffer[http_get_cmd_size], http_css_chunk_cmd, http_css_chunk_cmd_size) == 0U)
 8002292:	4b80      	ldr	r3, [pc, #512]	; (8002494 <http_treat_request+0x274>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a7e      	ldr	r2, [pc, #504]	; (8002490 <http_treat_request+0x270>)
 8002298:	4413      	add	r3, r2
 800229a:	4a85      	ldr	r2, [pc, #532]	; (80024b0 <http_treat_request+0x290>)
 800229c:	6812      	ldr	r2, [r2, #0]
 800229e:	4985      	ldr	r1, [pc, #532]	; (80024b4 <http_treat_request+0x294>)
 80022a0:	4618      	mov	r0, r3
 80022a2:	f015 f84c 	bl	801733e <strncmp>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d109      	bne.n	80022c0 <http_treat_request+0xa0>
    {
      http_send_response(socket, HTTP_HEADER_CSS_ID, http_header_response, css_shunk_buff, css_shunk_buff_size);
 80022ac:	4b82      	ldr	r3, [pc, #520]	; (80024b8 <http_treat_request+0x298>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	9300      	str	r3, [sp, #0]
 80022b2:	4b82      	ldr	r3, [pc, #520]	; (80024bc <http_treat_request+0x29c>)
 80022b4:	4a7d      	ldr	r2, [pc, #500]	; (80024ac <http_treat_request+0x28c>)
 80022b6:	2102      	movs	r1, #2
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f000 f941 	bl	8002540 <http_send_response>
 80022be:	e0d8      	b.n	8002472 <http_treat_request+0x252>
    }
    /* Send main css */
    else if (strncmp((char *)&recv_buffer[http_get_cmd_size], http_css_main_cmd, http_css_main_cmd_size) == 0U)
 80022c0:	4b74      	ldr	r3, [pc, #464]	; (8002494 <http_treat_request+0x274>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a72      	ldr	r2, [pc, #456]	; (8002490 <http_treat_request+0x270>)
 80022c6:	4413      	add	r3, r2
 80022c8:	4a7d      	ldr	r2, [pc, #500]	; (80024c0 <http_treat_request+0x2a0>)
 80022ca:	6812      	ldr	r2, [r2, #0]
 80022cc:	497d      	ldr	r1, [pc, #500]	; (80024c4 <http_treat_request+0x2a4>)
 80022ce:	4618      	mov	r0, r3
 80022d0:	f015 f835 	bl	801733e <strncmp>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d109      	bne.n	80022ee <http_treat_request+0xce>
    {
      http_send_response(socket, HTTP_HEADER_CSS_ID, http_header_response, css_main_buff, css_main_buff_size);
 80022da:	4b7b      	ldr	r3, [pc, #492]	; (80024c8 <http_treat_request+0x2a8>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	9300      	str	r3, [sp, #0]
 80022e0:	4b7a      	ldr	r3, [pc, #488]	; (80024cc <http_treat_request+0x2ac>)
 80022e2:	4a72      	ldr	r2, [pc, #456]	; (80024ac <http_treat_request+0x28c>)
 80022e4:	2102      	movs	r1, #2
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f000 f92a 	bl	8002540 <http_send_response>
 80022ec:	e0c1      	b.n	8002472 <http_treat_request+0x252>
    }
    /* Send js shunk */
    else if (strncmp((char *)&recv_buffer[http_get_cmd_size], http_js_chunk_cmd, http_js_chunk_cmd_size) == 0U)
 80022ee:	4b69      	ldr	r3, [pc, #420]	; (8002494 <http_treat_request+0x274>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a67      	ldr	r2, [pc, #412]	; (8002490 <http_treat_request+0x270>)
 80022f4:	4413      	add	r3, r2
 80022f6:	4a76      	ldr	r2, [pc, #472]	; (80024d0 <http_treat_request+0x2b0>)
 80022f8:	6812      	ldr	r2, [r2, #0]
 80022fa:	4976      	ldr	r1, [pc, #472]	; (80024d4 <http_treat_request+0x2b4>)
 80022fc:	4618      	mov	r0, r3
 80022fe:	f015 f81e 	bl	801733e <strncmp>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d109      	bne.n	800231c <http_treat_request+0xfc>
    {
      http_send_response(socket, HTTP_HEADER_JS_ID, http_header_response, js_shunk_buff, js_shunk_buff_size);
 8002308:	4b73      	ldr	r3, [pc, #460]	; (80024d8 <http_treat_request+0x2b8>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	9300      	str	r3, [sp, #0]
 800230e:	4b73      	ldr	r3, [pc, #460]	; (80024dc <http_treat_request+0x2bc>)
 8002310:	4a66      	ldr	r2, [pc, #408]	; (80024ac <http_treat_request+0x28c>)
 8002312:	2101      	movs	r1, #1
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	f000 f913 	bl	8002540 <http_send_response>
 800231a:	e0aa      	b.n	8002472 <http_treat_request+0x252>
    }
    /* Send main js */
    else if (strncmp((char *)&recv_buffer[http_get_cmd_size], http_js_main_cmd, http_js_main_cmd_size) == 0U)
 800231c:	4b5d      	ldr	r3, [pc, #372]	; (8002494 <http_treat_request+0x274>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a5b      	ldr	r2, [pc, #364]	; (8002490 <http_treat_request+0x270>)
 8002322:	4413      	add	r3, r2
 8002324:	4a6e      	ldr	r2, [pc, #440]	; (80024e0 <http_treat_request+0x2c0>)
 8002326:	6812      	ldr	r2, [r2, #0]
 8002328:	496e      	ldr	r1, [pc, #440]	; (80024e4 <http_treat_request+0x2c4>)
 800232a:	4618      	mov	r0, r3
 800232c:	f015 f807 	bl	801733e <strncmp>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d109      	bne.n	800234a <http_treat_request+0x12a>
    {
      http_send_response(socket, HTTP_HEADER_JS_ID, http_header_response, js_main_buff, js_main_buff_size);
 8002336:	4b6c      	ldr	r3, [pc, #432]	; (80024e8 <http_treat_request+0x2c8>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	9300      	str	r3, [sp, #0]
 800233c:	4b6b      	ldr	r3, [pc, #428]	; (80024ec <http_treat_request+0x2cc>)
 800233e:	4a5b      	ldr	r2, [pc, #364]	; (80024ac <http_treat_request+0x28c>)
 8002340:	2101      	movs	r1, #1
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f000 f8fc 	bl	8002540 <http_send_response>
 8002348:	e093      	b.n	8002472 <http_treat_request+0x252>
    }
    /* Send favicon */
    else if (strncmp((char *)&recv_buffer[http_get_cmd_size], http_favicon_cmd, http_favicon_cmd_size) == 0U)
 800234a:	4b52      	ldr	r3, [pc, #328]	; (8002494 <http_treat_request+0x274>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a50      	ldr	r2, [pc, #320]	; (8002490 <http_treat_request+0x270>)
 8002350:	4413      	add	r3, r2
 8002352:	4a67      	ldr	r2, [pc, #412]	; (80024f0 <http_treat_request+0x2d0>)
 8002354:	6812      	ldr	r2, [r2, #0]
 8002356:	4967      	ldr	r1, [pc, #412]	; (80024f4 <http_treat_request+0x2d4>)
 8002358:	4618      	mov	r0, r3
 800235a:	f014 fff0 	bl	801733e <strncmp>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d109      	bne.n	8002378 <http_treat_request+0x158>
    {
      http_send_response(socket, HTTP_HEADER_FAVICON_ID, http_header_response, favicon_buff, favicon_buff_size);
 8002364:	4b64      	ldr	r3, [pc, #400]	; (80024f8 <http_treat_request+0x2d8>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	9300      	str	r3, [sp, #0]
 800236a:	4b64      	ldr	r3, [pc, #400]	; (80024fc <http_treat_request+0x2dc>)
 800236c:	4a4f      	ldr	r2, [pc, #316]	; (80024ac <http_treat_request+0x28c>)
 800236e:	2103      	movs	r1, #3
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f000 f8e5 	bl	8002540 <http_send_response>
 8002376:	e07c      	b.n	8002472 <http_treat_request+0x252>
    }
    /* Send json */
    else if (strncmp((char *)&recv_buffer[http_get_cmd_size], http_json_cmd, http_json_cmd_size) == 0U)
 8002378:	4b46      	ldr	r3, [pc, #280]	; (8002494 <http_treat_request+0x274>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a44      	ldr	r2, [pc, #272]	; (8002490 <http_treat_request+0x270>)
 800237e:	4413      	add	r3, r2
 8002380:	4a5f      	ldr	r2, [pc, #380]	; (8002500 <http_treat_request+0x2e0>)
 8002382:	6812      	ldr	r2, [r2, #0]
 8002384:	495f      	ldr	r1, [pc, #380]	; (8002504 <http_treat_request+0x2e4>)
 8002386:	4618      	mov	r0, r3
 8002388:	f014 ffd9 	bl	801733e <strncmp>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d109      	bne.n	80023a6 <http_treat_request+0x186>
    {
      http_send_response(socket, HTTP_HEADER_JSON_ID, http_header_response, json_buff, json_buff_size);
 8002392:	4b5d      	ldr	r3, [pc, #372]	; (8002508 <http_treat_request+0x2e8>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	9300      	str	r3, [sp, #0]
 8002398:	4b5c      	ldr	r3, [pc, #368]	; (800250c <http_treat_request+0x2ec>)
 800239a:	4a44      	ldr	r2, [pc, #272]	; (80024ac <http_treat_request+0x28c>)
 800239c:	2109      	movs	r1, #9
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f000 f8ce 	bl	8002540 <http_send_response>
 80023a4:	e065      	b.n	8002472 <http_treat_request+0x252>
    }
    /* Send font */
    else if (strncmp((char *)&recv_buffer[http_get_cmd_size], http_font_cmd, http_font_cmd_size) == 0U)
 80023a6:	4b3b      	ldr	r3, [pc, #236]	; (8002494 <http_treat_request+0x274>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a39      	ldr	r2, [pc, #228]	; (8002490 <http_treat_request+0x270>)
 80023ac:	4413      	add	r3, r2
 80023ae:	4a58      	ldr	r2, [pc, #352]	; (8002510 <http_treat_request+0x2f0>)
 80023b0:	6812      	ldr	r2, [r2, #0]
 80023b2:	4958      	ldr	r1, [pc, #352]	; (8002514 <http_treat_request+0x2f4>)
 80023b4:	4618      	mov	r0, r3
 80023b6:	f014 ffc2 	bl	801733e <strncmp>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d109      	bne.n	80023d4 <http_treat_request+0x1b4>
    {
      http_send_response(socket, HTTP_HEADER_FONT_ID, http_header_response, font_buff, font_buff_size);
 80023c0:	4b55      	ldr	r3, [pc, #340]	; (8002518 <http_treat_request+0x2f8>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	9300      	str	r3, [sp, #0]
 80023c6:	4b55      	ldr	r3, [pc, #340]	; (800251c <http_treat_request+0x2fc>)
 80023c8:	4a38      	ldr	r2, [pc, #224]	; (80024ac <http_treat_request+0x28c>)
 80023ca:	2108      	movs	r1, #8
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f000 f8b7 	bl	8002540 <http_send_response>
 80023d2:	e04e      	b.n	8002472 <http_treat_request+0x252>
    }
    /* Send image */
    else if (strncmp((char *)&recv_buffer[http_get_cmd_size], http_image_cmd, http_image_cmd_size) == 0U)
 80023d4:	4b2f      	ldr	r3, [pc, #188]	; (8002494 <http_treat_request+0x274>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a2d      	ldr	r2, [pc, #180]	; (8002490 <http_treat_request+0x270>)
 80023da:	4413      	add	r3, r2
 80023dc:	4a50      	ldr	r2, [pc, #320]	; (8002520 <http_treat_request+0x300>)
 80023de:	6812      	ldr	r2, [r2, #0]
 80023e0:	4950      	ldr	r1, [pc, #320]	; (8002524 <http_treat_request+0x304>)
 80023e2:	4618      	mov	r0, r3
 80023e4:	f014 ffab 	bl	801733e <strncmp>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d109      	bne.n	8002402 <http_treat_request+0x1e2>
    {
      http_send_response(socket, HTTP_HEADER_IMAGE_ID, http_header_response, image_buff, image_buff_size);
 80023ee:	4b4e      	ldr	r3, [pc, #312]	; (8002528 <http_treat_request+0x308>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	9300      	str	r3, [sp, #0]
 80023f4:	4b4d      	ldr	r3, [pc, #308]	; (800252c <http_treat_request+0x30c>)
 80023f6:	4a2d      	ldr	r2, [pc, #180]	; (80024ac <http_treat_request+0x28c>)
 80023f8:	210a      	movs	r1, #10
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f000 f8a0 	bl	8002540 <http_send_response>
 8002400:	e037      	b.n	8002472 <http_treat_request+0x252>
    }
    else if (strncmp((char *)&recv_buffer[http_get_cmd_size], http_read_offset_cmd, http_read_offset_cmd_size) == 0U)
 8002402:	4b24      	ldr	r3, [pc, #144]	; (8002494 <http_treat_request+0x274>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a22      	ldr	r2, [pc, #136]	; (8002490 <http_treat_request+0x270>)
 8002408:	4413      	add	r3, r2
 800240a:	4a49      	ldr	r2, [pc, #292]	; (8002530 <http_treat_request+0x310>)
 800240c:	6812      	ldr	r2, [r2, #0]
 800240e:	4949      	ldr	r1, [pc, #292]	; (8002534 <http_treat_request+0x314>)
 8002410:	4618      	mov	r0, r3
 8002412:	f014 ff94 	bl	801733e <strncmp>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d12a      	bne.n	8002472 <http_treat_request+0x252>
    	    {
    		  float x, y;
    	      webserver_displacement_read(&x, &y);
 800241c:	f107 0208 	add.w	r2, r7, #8
 8002420:	f107 030c 	add.w	r3, r7, #12
 8002424:	4611      	mov	r1, r2
 8002426:	4618      	mov	r0, r3
 8002428:	f000 fa66 	bl	80028f8 <webserver_displacement_read>
    	      sprintf(http_sensor_value, "%g %g", x, y);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	4618      	mov	r0, r3
 8002430:	f7fe f898 	bl	8000564 <__aeabi_f2d>
 8002434:	4604      	mov	r4, r0
 8002436:	460d      	mov	r5, r1
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	4618      	mov	r0, r3
 800243c:	f7fe f892 	bl	8000564 <__aeabi_f2d>
 8002440:	4602      	mov	r2, r0
 8002442:	460b      	mov	r3, r1
 8002444:	e9cd 2300 	strd	r2, r3, [sp]
 8002448:	4622      	mov	r2, r4
 800244a:	462b      	mov	r3, r5
 800244c:	493a      	ldr	r1, [pc, #232]	; (8002538 <http_treat_request+0x318>)
 800244e:	483b      	ldr	r0, [pc, #236]	; (800253c <http_treat_request+0x31c>)
 8002450:	f013 fea0 	bl	8016194 <siprintf>
    	      http_send_response(socket, HTTP_HEADER_SENSOR_ID, http_header_response, http_sensor_value, strlen(http_sensor_value));
 8002454:	4839      	ldr	r0, [pc, #228]	; (800253c <http_treat_request+0x31c>)
 8002456:	f7fd ff0f 	bl	8000278 <strlen>
 800245a:	4603      	mov	r3, r0
 800245c:	9300      	str	r3, [sp, #0]
 800245e:	4b37      	ldr	r3, [pc, #220]	; (800253c <http_treat_request+0x31c>)
 8002460:	4a12      	ldr	r2, [pc, #72]	; (80024ac <http_treat_request+0x28c>)
 8002462:	2104      	movs	r1, #4
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f000 f86b 	bl	8002540 <http_send_response>
 800246a:	e002      	b.n	8002472 <http_treat_request+0x252>
//      http_send_response(socket, HTTP_HEADER_SENSOR_ID, http_header_response, http_sensor_value, strlen(http_sensor_value));
//    }
  }
  else
  {
    return HTTP_ERROR;
 800246c:	f06f 0306 	mvn.w	r3, #6
 8002470:	e009      	b.n	8002486 <http_treat_request+0x266>
  }

  /* Close connection socket */
  if (net_closesocket(socket) != 0)
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f011 fb82 	bl	8013b7c <net_closesocket>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d002      	beq.n	8002484 <http_treat_request+0x264>
  {
    return HTTP_ERROR;
 800247e:	f06f 0306 	mvn.w	r3, #6
 8002482:	e000      	b.n	8002486 <http_treat_request+0x266>
  }

  return WEBSERVER_OK;
 8002484:	2300      	movs	r3, #0
}
 8002486:	4618      	mov	r0, r3
 8002488:	3710      	adds	r7, #16
 800248a:	46bd      	mov	sp, r7
 800248c:	bdb0      	pop	{r4, r5, r7, pc}
 800248e:	bf00      	nop
 8002490:	2000062c 	.word	0x2000062c
 8002494:	0801c0f0 	.word	0x0801c0f0
 8002498:	0801c0e8 	.word	0x0801c0e8
 800249c:	0801c0f8 	.word	0x0801c0f8
 80024a0:	0801c0f4 	.word	0x0801c0f4
 80024a4:	0808d874 	.word	0x0808d874
 80024a8:	0808d214 	.word	0x0808d214
 80024ac:	20000438 	.word	0x20000438
 80024b0:	0801c114 	.word	0x0801c114
 80024b4:	0801c0fc 	.word	0x0801c0fc
 80024b8:	0807883c 	.word	0x0807883c
 80024bc:	0806a1d0 	.word	0x0806a1d0
 80024c0:	0801c130 	.word	0x0801c130
 80024c4:	0801c118 	.word	0x0801c118
 80024c8:	0806a1cc 	.word	0x0806a1cc
 80024cc:	0801c1e4 	.word	0x0801c1e4
 80024d0:	0801c148 	.word	0x0801c148
 80024d4:	0801c134 	.word	0x0801c134
 80024d8:	0818da18 	.word	0x0818da18
 80024dc:	081174f0 	.word	0x081174f0
 80024e0:	0801c160 	.word	0x0801c160
 80024e4:	0801c14c 	.word	0x0801c14c
 80024e8:	081174ec 	.word	0x081174ec
 80024ec:	0810fc3c 	.word	0x0810fc3c
 80024f0:	0801c1b0 	.word	0x0801c1b0
 80024f4:	0801c1a0 	.word	0x0801c1a0
 80024f8:	08079860 	.word	0x08079860
 80024fc:	08078840 	.word	0x08078840
 8002500:	0801c19c 	.word	0x0801c19c
 8002504:	0801c18c 	.word	0x0801c18c
 8002508:	0818db58 	.word	0x0818db58
 800250c:	0818da1c 	.word	0x0818da1c
 8002510:	0801c188 	.word	0x0801c188
 8002514:	0801c164 	.word	0x0801c164
 8002518:	0808d210 	.word	0x0808d210
 800251c:	08079864 	.word	0x08079864
 8002520:	0801c1d0 	.word	0x0801c1d0
 8002524:	0801c1b4 	.word	0x0801c1b4
 8002528:	0810fc38 	.word	0x0810fc38
 800252c:	0808d878 	.word	0x0808d878
 8002530:	0801c1e0 	.word	0x0801c1e0
 8002534:	0801c1d4 	.word	0x0801c1d4
 8002538:	0801acd0 	.word	0x0801acd0
 800253c:	20000424 	.word	0x20000424

08002540 <http_send_response>:
static WebServer_StatusTypeDef http_send_response(int32_t socket,
                                                  uint32_t headers_id,
                                                  char *headers_buff,
                                                  const char *body_buff,
                                                  uint32_t data_size)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af00      	add	r7, sp, #0
 8002546:	60f8      	str	r0, [r7, #12]
 8002548:	60b9      	str	r1, [r7, #8]
 800254a:	607a      	str	r2, [r7, #4]
 800254c:	603b      	str	r3, [r7, #0]
  /* Send HTTP header response */
  if (http_send_headers_response(socket, headers_id, headers_buff, data_size) != WEBSERVER_OK)
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	68b9      	ldr	r1, [r7, #8]
 8002554:	68f8      	ldr	r0, [r7, #12]
 8002556:	f000 f817 	bl	8002588 <http_send_headers_response>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d002      	beq.n	8002566 <http_send_response+0x26>
  {
    return HTTP_ERROR;
 8002560:	f06f 0306 	mvn.w	r3, #6
 8002564:	e00b      	b.n	800257e <http_send_response+0x3e>
  }

  /* Send HTTP body response */
  if (http_send(socket, (const char *)body_buff, data_size) != WEBSERVER_OK)
 8002566:	69ba      	ldr	r2, [r7, #24]
 8002568:	6839      	ldr	r1, [r7, #0]
 800256a:	68f8      	ldr	r0, [r7, #12]
 800256c:	f000 f8ae 	bl	80026cc <http_send>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d002      	beq.n	800257c <http_send_response+0x3c>
  {
    return HTTP_ERROR;
 8002576:	f06f 0306 	mvn.w	r3, #6
 800257a:	e000      	b.n	800257e <http_send_response+0x3e>
  }

  return WEBSERVER_OK;
 800257c:	2300      	movs	r3, #0
}
 800257e:	4618      	mov	r0, r3
 8002580:	3710      	adds	r7, #16
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
	...

08002588 <http_send_headers_response>:
  */
static WebServer_StatusTypeDef http_send_headers_response(int32_t socket,
                                                          uint32_t headers_id,
                                                          char *headers_buff,
                                                          uint32_t data_size)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	60b9      	str	r1, [r7, #8]
 8002592:	607a      	str	r2, [r7, #4]
 8002594:	603b      	str	r3, [r7, #0]
  /* Check header ID */
  switch(headers_id)
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	2b0a      	cmp	r3, #10
 800259a:	d871      	bhi.n	8002680 <http_send_headers_response+0xf8>
 800259c:	a201      	add	r2, pc, #4	; (adr r2, 80025a4 <http_send_headers_response+0x1c>)
 800259e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025a2:	bf00      	nop
 80025a4:	080025d1 	.word	0x080025d1
 80025a8:	080025fd 	.word	0x080025fd
 80025ac:	080025e7 	.word	0x080025e7
 80025b0:	08002613 	.word	0x08002613
 80025b4:	0800263f 	.word	0x0800263f
 80025b8:	08002681 	.word	0x08002681
 80025bc:	08002681 	.word	0x08002681
 80025c0:	08002681 	.word	0x08002681
 80025c4:	08002629 	.word	0x08002629
 80025c8:	08002655 	.word	0x08002655
 80025cc:	0800266b 	.word	0x0800266b
  {
    /* Send HTML header response */
  case HTTP_HEADER_HTML_ID:
    {
      if (webserver_http_encode_html_response(headers_buff, data_size) != WEBSERVER_OK)
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	4619      	mov	r1, r3
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f7ff f9dd 	bl	8001994 <webserver_http_encode_html_response>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d052      	beq.n	8002686 <http_send_headers_response+0xfe>
      {
        return HTTP_ERROR;
 80025e0:	f06f 0306 	mvn.w	r3, #6
 80025e4:	e06e      	b.n	80026c4 <http_send_headers_response+0x13c>
    }

    /* Send CSS header response */
  case HTTP_HEADER_CSS_ID:
    {
      if (webserver_http_encode_css_response(headers_buff, data_size) != WEBSERVER_OK)
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	4619      	mov	r1, r3
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f7ff fa52 	bl	8001a94 <webserver_http_encode_css_response>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d049      	beq.n	800268a <http_send_headers_response+0x102>
      {
        return HTTP_ERROR;
 80025f6:	f06f 0306 	mvn.w	r3, #6
 80025fa:	e063      	b.n	80026c4 <http_send_headers_response+0x13c>
    }

    /* Send JS header response */
  case HTTP_HEADER_JS_ID:
    {
      if (webserver_http_encode_js_response(headers_buff, data_size) != WEBSERVER_OK)
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	4619      	mov	r1, r3
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f7ff fab5 	bl	8001b70 <webserver_http_encode_js_response>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d040      	beq.n	800268e <http_send_headers_response+0x106>
      {
        return HTTP_ERROR;
 800260c:	f06f 0306 	mvn.w	r3, #6
 8002610:	e058      	b.n	80026c4 <http_send_headers_response+0x13c>
    }

    /* Send favicon header response */
  case HTTP_HEADER_FAVICON_ID:
    {
      if (webserver_http_encode_favicon_response(headers_buff, data_size) != WEBSERVER_OK)
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	4619      	mov	r1, r3
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f7ff fb18 	bl	8001c4c <webserver_http_encode_favicon_response>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d037      	beq.n	8002692 <http_send_headers_response+0x10a>
      {
        return HTTP_ERROR;
 8002622:	f06f 0306 	mvn.w	r3, #6
 8002626:	e04d      	b.n	80026c4 <http_send_headers_response+0x13c>
    }

    /* Send font header response */
  case HTTP_HEADER_FONT_ID:
    {
      if (webserver_http_encode_woff2_response(headers_buff, data_size) != WEBSERVER_OK)
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	4619      	mov	r1, r3
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f7ff fbe1 	bl	8001df4 <webserver_http_encode_woff2_response>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d02e      	beq.n	8002696 <http_send_headers_response+0x10e>
      {
        return HTTP_ERROR;
 8002638:	f06f 0306 	mvn.w	r3, #6
 800263c:	e042      	b.n	80026c4 <http_send_headers_response+0x13c>
    }

    /* Send sensor header response */
  case HTTP_HEADER_SENSOR_ID:
    {
      if (webserver_http_encode_sensor_response(headers_buff, data_size) != WEBSERVER_OK)
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	4619      	mov	r1, r3
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f7ff fb76 	bl	8001d34 <webserver_http_encode_sensor_response>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d025      	beq.n	800269a <http_send_headers_response+0x112>
      {
        return HTTP_ERROR;
 800264e:	f06f 0306 	mvn.w	r3, #6
 8002652:	e037      	b.n	80026c4 <http_send_headers_response+0x13c>
    }

    /* Send JSON header response */
  case HTTP_HEADER_JSON_ID:
    {
      if (webserver_http_encode_json_response(headers_buff, data_size) != WEBSERVER_OK)
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	4619      	mov	r1, r3
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f7ff fc2b 	bl	8001eb4 <webserver_http_encode_json_response>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d01c      	beq.n	800269e <http_send_headers_response+0x116>
      {
        return HTTP_ERROR;
 8002664:	f06f 0306 	mvn.w	r3, #6
 8002668:	e02c      	b.n	80026c4 <http_send_headers_response+0x13c>
    }

    /* Send image header response */
  case HTTP_HEADER_IMAGE_ID:
    {
      if (webserver_http_encode_image_response(headers_buff, data_size) != WEBSERVER_OK)
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	4619      	mov	r1, r3
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f7ff fc88 	bl	8001f84 <webserver_http_encode_image_response>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d013      	beq.n	80026a2 <http_send_headers_response+0x11a>
      {
        return HTTP_ERROR;
 800267a:	f06f 0306 	mvn.w	r3, #6
 800267e:	e021      	b.n	80026c4 <http_send_headers_response+0x13c>
      break;
    }

    /* Invalid header ID */
  default:
    return HTTP_ERROR;
 8002680:	f06f 0306 	mvn.w	r3, #6
 8002684:	e01e      	b.n	80026c4 <http_send_headers_response+0x13c>
      break;
 8002686:	bf00      	nop
 8002688:	e00c      	b.n	80026a4 <http_send_headers_response+0x11c>
      break;
 800268a:	bf00      	nop
 800268c:	e00a      	b.n	80026a4 <http_send_headers_response+0x11c>
      break;
 800268e:	bf00      	nop
 8002690:	e008      	b.n	80026a4 <http_send_headers_response+0x11c>
      break;
 8002692:	bf00      	nop
 8002694:	e006      	b.n	80026a4 <http_send_headers_response+0x11c>
      break;
 8002696:	bf00      	nop
 8002698:	e004      	b.n	80026a4 <http_send_headers_response+0x11c>
      break;
 800269a:	bf00      	nop
 800269c:	e002      	b.n	80026a4 <http_send_headers_response+0x11c>
      break;
 800269e:	bf00      	nop
 80026a0:	e000      	b.n	80026a4 <http_send_headers_response+0x11c>
      break;
 80026a2:	bf00      	nop
    break;
  }

  /* Send HTTP built response */
  if (http_send(socket, (const char *)headers_buff, strlen((char*)headers_buff)) != WEBSERVER_OK)
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f7fd fde7 	bl	8000278 <strlen>
 80026aa:	4603      	mov	r3, r0
 80026ac:	461a      	mov	r2, r3
 80026ae:	6879      	ldr	r1, [r7, #4]
 80026b0:	68f8      	ldr	r0, [r7, #12]
 80026b2:	f000 f80b 	bl	80026cc <http_send>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d002      	beq.n	80026c2 <http_send_headers_response+0x13a>
  {
    return HTTP_ERROR;
 80026bc:	f06f 0306 	mvn.w	r3, #6
 80026c0:	e000      	b.n	80026c4 <http_send_headers_response+0x13c>
  }

  return WEBSERVER_OK;
 80026c2:	2300      	movs	r3, #0
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3710      	adds	r7, #16
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}

080026cc <http_send>:
  * @retval Web Server status
  */
static WebServer_StatusTypeDef http_send(int32_t socket,
                                         const char *frame,
                                         uint32_t frame_size)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b086      	sub	sp, #24
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	60f8      	str	r0, [r7, #12]
 80026d4:	60b9      	str	r1, [r7, #8]
 80026d6:	607a      	str	r2, [r7, #4]
  /* Setup send information */
  uint32_t data_size = frame_size;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	617b      	str	r3, [r7, #20]
  uint32_t data_idx  = 0U;
 80026dc:	2300      	movs	r3, #0
 80026de:	613b      	str	r3, [r7, #16]

  /* Check remaining data */
  while (data_size > 0U)
 80026e0:	e02b      	b.n	800273a <http_send+0x6e>
  {
    if (data_size >= MAX_SOCKET_DATASIZE)
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 80026e8:	d317      	bcc.n	800271a <http_send+0x4e>
    {
      /* Send data */
      if (net_send(socket, (uint8_t*)&frame[data_idx], MAX_SOCKET_DATASIZE, 0) <= 0U)
 80026ea:	68ba      	ldr	r2, [r7, #8]
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	18d1      	adds	r1, r2, r3
 80026f0:	2300      	movs	r3, #0
 80026f2:	f44f 6216 	mov.w	r2, #2400	; 0x960
 80026f6:	68f8      	ldr	r0, [r7, #12]
 80026f8:	f011 f936 	bl	8013968 <net_send>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d102      	bne.n	8002708 <http_send+0x3c>
      {
        return HTTP_ERROR;
 8002702:	f06f 0306 	mvn.w	r3, #6
 8002706:	e01c      	b.n	8002742 <http_send+0x76>
      }

      /* Update send information */
      data_size -= MAX_SOCKET_DATASIZE;
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	f5a3 6316 	sub.w	r3, r3, #2400	; 0x960
 800270e:	617b      	str	r3, [r7, #20]
      data_idx += MAX_SOCKET_DATASIZE;
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	f503 6316 	add.w	r3, r3, #2400	; 0x960
 8002716:	613b      	str	r3, [r7, #16]
 8002718:	e00f      	b.n	800273a <http_send+0x6e>
    }
    else
    {
      /* Send data */
      if (net_send(socket, (uint8_t*)&frame[data_idx], data_size, 0) <= 0U)
 800271a:	68ba      	ldr	r2, [r7, #8]
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	18d1      	adds	r1, r2, r3
 8002720:	2300      	movs	r3, #0
 8002722:	697a      	ldr	r2, [r7, #20]
 8002724:	68f8      	ldr	r0, [r7, #12]
 8002726:	f011 f91f 	bl	8013968 <net_send>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d102      	bne.n	8002736 <http_send+0x6a>
      {
        return HTTP_ERROR;
 8002730:	f06f 0306 	mvn.w	r3, #6
 8002734:	e005      	b.n	8002742 <http_send+0x76>
      }

      /* Update send information */
      data_size = 0U;
 8002736:	2300      	movs	r3, #0
 8002738:	617b      	str	r3, [r7, #20]
  while (data_size > 0U)
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d1d0      	bne.n	80026e2 <http_send+0x16>
    }
  }

  return WEBSERVER_OK;
 8002740:	2300      	movs	r3, #0
}
 8002742:	4618      	mov	r0, r3
 8002744:	3718      	adds	r7, #24
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
	...

0800274c <webserver_acel_sensor_start>:

/* Private function prototypes ---------------------------------------------------------------------------------------*/
/* Functions prototypes ----------------------------------------------------------------------------------------------*/

int webserver_acel_sensor_start()
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b08c      	sub	sp, #48	; 0x30
 8002750:	af00      	add	r7, sp, #0
  int32_t result = 0;
 8002752:	2300      	movs	r3, #0
 8002754:	62fb      	str	r3, [r7, #44]	; 0x2c
  int32_t fullScale;

  /* Initialize function for Microaccelerometer */

  /* Initialize function */
  if (BSP_MOTION_SENSOR_Init(0, MOTION_ACCELERO) != BSP_ERROR_NONE)
 8002756:	2102      	movs	r1, #2
 8002758:	2000      	movs	r0, #0
 800275a:	f001 fe7b 	bl	8004454 <BSP_MOTION_SENSOR_Init>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d002      	beq.n	800276a <webserver_acel_sensor_start+0x1e>
    result--;
 8002764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002766:	3b01      	subs	r3, #1
 8002768:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (BSP_MOTION_SENSOR_GetCapabilities(0, &Capabilities) != BSP_ERROR_NONE)
 800276a:	f107 0310 	add.w	r3, r7, #16
 800276e:	4619      	mov	r1, r3
 8002770:	2000      	movs	r0, #0
 8002772:	f001 febb 	bl	80044ec <BSP_MOTION_SENSOR_GetCapabilities>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d002      	beq.n	8002782 <webserver_acel_sensor_start+0x36>
    result--;
 800277c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800277e:	3b01      	subs	r3, #1
 8002780:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Read id function */
  if (BSP_MOTION_SENSOR_ReadID(0, &chipId) != BSP_ERROR_NONE)
 8002782:	f107 030f 	add.w	r3, r7, #15
 8002786:	4619      	mov	r1, r3
 8002788:	2000      	movs	r0, #0
 800278a:	f001 fee7 	bl	800455c <BSP_MOTION_SENSOR_ReadID>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d002      	beq.n	800279a <webserver_acel_sensor_start+0x4e>
    result--;
 8002794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002796:	3b01      	subs	r3, #1
 8002798:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Enable function */
  if (BSP_MOTION_SENSOR_Enable(0, MOTION_ACCELERO) != BSP_ERROR_NONE)
 800279a:	2102      	movs	r1, #2
 800279c:	2000      	movs	r0, #0
 800279e:	f001 ff15 	bl	80045cc <BSP_MOTION_SENSOR_Enable>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d002      	beq.n	80027ae <webserver_acel_sensor_start+0x62>
    result--;
 80027a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027aa:	3b01      	subs	r3, #1
 80027ac:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* GetFullScale and SetFullScale functions */
  if (BSP_MOTION_SENSOR_SetFullScale(0, MOTION_ACCELERO, 16) != BSP_ERROR_NONE)
 80027ae:	2210      	movs	r2, #16
 80027b0:	2102      	movs	r1, #2
 80027b2:	2000      	movs	r0, #0
 80027b4:	f002 f946 	bl	8004a44 <BSP_MOTION_SENSOR_SetFullScale>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d002      	beq.n	80027c4 <webserver_acel_sensor_start+0x78>
    result--;
 80027be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027c0:	3b01      	subs	r3, #1
 80027c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (BSP_MOTION_SENSOR_GetFullScale(0, MOTION_ACCELERO, &fullScale) != BSP_ERROR_NONE)
 80027c4:	463b      	mov	r3, r7
 80027c6:	461a      	mov	r2, r3
 80027c8:	2102      	movs	r1, #2
 80027ca:	2000      	movs	r0, #0
 80027cc:	f002 f8da 	bl	8004984 <BSP_MOTION_SENSOR_GetFullScale>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d002      	beq.n	80027dc <webserver_acel_sensor_start+0x90>
    result--;
 80027d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027d8:	3b01      	subs	r3, #1
 80027da:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (fullScale != 16)
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	2b10      	cmp	r3, #16
 80027e0:	d002      	beq.n	80027e8 <webserver_acel_sensor_start+0x9c>
    result--;
 80027e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027e4:	3b01      	subs	r3, #1
 80027e6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (BSP_MOTION_SENSOR_SetFullScale(0, MOTION_ACCELERO, 2) != BSP_ERROR_NONE)
 80027e8:	2202      	movs	r2, #2
 80027ea:	2102      	movs	r1, #2
 80027ec:	2000      	movs	r0, #0
 80027ee:	f002 f929 	bl	8004a44 <BSP_MOTION_SENSOR_SetFullScale>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d002      	beq.n	80027fe <webserver_acel_sensor_start+0xb2>
    result--;
 80027f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027fa:	3b01      	subs	r3, #1
 80027fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (BSP_MOTION_SENSOR_GetFullScale(0, MOTION_ACCELERO, &fullScale) != BSP_ERROR_NONE)
 80027fe:	463b      	mov	r3, r7
 8002800:	461a      	mov	r2, r3
 8002802:	2102      	movs	r1, #2
 8002804:	2000      	movs	r0, #0
 8002806:	f002 f8bd 	bl	8004984 <BSP_MOTION_SENSOR_GetFullScale>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d002      	beq.n	8002816 <webserver_acel_sensor_start+0xca>
    result--;
 8002810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002812:	3b01      	subs	r3, #1
 8002814:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (fullScale != 2)
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	2b02      	cmp	r3, #2
 800281a:	d002      	beq.n	8002822 <webserver_acel_sensor_start+0xd6>
    result--;
 800281c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800281e:	3b01      	subs	r3, #1
 8002820:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* GetOutputDataRate and SetOutputDataRate functions */
  if (BSP_MOTION_SENSOR_SetOutputDataRate(0, MOTION_ACCELERO, 3333.0f) != BSP_ERROR_NONE)
 8002822:	ed9f 0a30 	vldr	s0, [pc, #192]	; 80028e4 <webserver_acel_sensor_start+0x198>
 8002826:	2102      	movs	r1, #2
 8002828:	2000      	movs	r0, #0
 800282a:	f002 f84b 	bl	80048c4 <BSP_MOTION_SENSOR_SetOutputDataRate>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d002      	beq.n	800283a <webserver_acel_sensor_start+0xee>
    result--;
 8002834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002836:	3b01      	subs	r3, #1
 8002838:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (BSP_MOTION_SENSOR_GetOutputDataRate(0, MOTION_ACCELERO, &outputDataRate) != BSP_ERROR_NONE)
 800283a:	1d3b      	adds	r3, r7, #4
 800283c:	461a      	mov	r2, r3
 800283e:	2102      	movs	r1, #2
 8002840:	2000      	movs	r0, #0
 8002842:	f001 ffdf 	bl	8004804 <BSP_MOTION_SENSOR_GetOutputDataRate>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d002      	beq.n	8002852 <webserver_acel_sensor_start+0x106>
    result--;
 800284c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800284e:	3b01      	subs	r3, #1
 8002850:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (outputDataRate != 6667.0f)
 8002852:	edd7 7a01 	vldr	s15, [r7, #4]
 8002856:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80028e8 <webserver_acel_sensor_start+0x19c>
 800285a:	eef4 7a47 	vcmp.f32	s15, s14
 800285e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002862:	d002      	beq.n	800286a <webserver_acel_sensor_start+0x11e>
    result--;
 8002864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002866:	3b01      	subs	r3, #1
 8002868:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (BSP_MOTION_SENSOR_SetOutputDataRate(0, MOTION_ACCELERO, 208.0f) != BSP_ERROR_NONE)
 800286a:	ed9f 0a20 	vldr	s0, [pc, #128]	; 80028ec <webserver_acel_sensor_start+0x1a0>
 800286e:	2102      	movs	r1, #2
 8002870:	2000      	movs	r0, #0
 8002872:	f002 f827 	bl	80048c4 <BSP_MOTION_SENSOR_SetOutputDataRate>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d002      	beq.n	8002882 <webserver_acel_sensor_start+0x136>
    result--;
 800287c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800287e:	3b01      	subs	r3, #1
 8002880:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (BSP_MOTION_SENSOR_GetOutputDataRate(0, MOTION_ACCELERO, &outputDataRate) != BSP_ERROR_NONE)
 8002882:	1d3b      	adds	r3, r7, #4
 8002884:	461a      	mov	r2, r3
 8002886:	2102      	movs	r1, #2
 8002888:	2000      	movs	r0, #0
 800288a:	f001 ffbb 	bl	8004804 <BSP_MOTION_SENSOR_GetOutputDataRate>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d002      	beq.n	800289a <webserver_acel_sensor_start+0x14e>
    result--;
 8002894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002896:	3b01      	subs	r3, #1
 8002898:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (outputDataRate != 208.0f)
 800289a:	edd7 7a01 	vldr	s15, [r7, #4]
 800289e:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80028ec <webserver_acel_sensor_start+0x1a0>
 80028a2:	eef4 7a47 	vcmp.f32	s15, s14
 80028a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028aa:	d002      	beq.n	80028b2 <webserver_acel_sensor_start+0x166>
    result--;
 80028ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ae:	3b01      	subs	r3, #1
 80028b0:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* GetSensitivity function */
  if (BSP_MOTION_SENSOR_GetSensitivity(0, MOTION_ACCELERO, &sensitivity) != BSP_ERROR_NONE)
 80028b2:	f107 0308 	add.w	r3, r7, #8
 80028b6:	461a      	mov	r2, r3
 80028b8:	2102      	movs	r1, #2
 80028ba:	2000      	movs	r0, #0
 80028bc:	f001 ff42 	bl	8004744 <BSP_MOTION_SENSOR_GetSensitivity>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d002      	beq.n	80028cc <webserver_acel_sensor_start+0x180>
    result--;
 80028c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028c8:	3b01      	subs	r3, #1
 80028ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (result < 0)
 80028cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	da02      	bge.n	80028d8 <webserver_acel_sensor_start+0x18c>
    printf("ahhh\n");
 80028d2:	4807      	ldr	r0, [pc, #28]	; (80028f0 <webserver_acel_sensor_start+0x1a4>)
 80028d4:	f014 fd1c 	bl	8017310 <puts>
  return result;
 80028d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3730      	adds	r7, #48	; 0x30
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	45505000 	.word	0x45505000
 80028e8:	45d05800 	.word	0x45d05800
 80028ec:	43500000 	.word	0x43500000
 80028f0:	0801acd8 	.word	0x0801acd8
 80028f4:	00000000 	.word	0x00000000

080028f8 <webserver_displacement_read>:

void webserver_displacement_read(float *displacementX, float *displacementY)
{
 80028f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028fc:	b09c      	sub	sp, #112	; 0x70
 80028fe:	af0e      	add	r7, sp, #56	; 0x38
 8002900:	6278      	str	r0, [r7, #36]	; 0x24
 8002902:	6239      	str	r1, [r7, #32]
   * This is summed with sensor data access delay to
   * yield loop delay of 4 msec
   */
//  if (prev_time == 0)
//	  prev_time = HAL_GetTick();
  W_HP = 2 * 3.1416 * HIGH_PASS_FILTER_FREQUENCY_DISP;
 8002904:	4bc8      	ldr	r3, [pc, #800]	; (8002c28 <webserver_displacement_read+0x330>)
 8002906:	4ac9      	ldr	r2, [pc, #804]	; (8002c2c <webserver_displacement_read+0x334>)
 8002908:	601a      	str	r2, [r3, #0]
  I_HP = 2 / (W_HP * (integration_interval));
 800290a:	4bc7      	ldr	r3, [pc, #796]	; (8002c28 <webserver_displacement_read+0x330>)
 800290c:	ed93 7a00 	vldr	s14, [r3]
 8002910:	4bc7      	ldr	r3, [pc, #796]	; (8002c30 <webserver_displacement_read+0x338>)
 8002912:	edd3 7a00 	vldr	s15, [r3]
 8002916:	ee27 7a27 	vmul.f32	s14, s14, s15
 800291a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800291e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002922:	4bc4      	ldr	r3, [pc, #784]	; (8002c34 <webserver_displacement_read+0x33c>)
 8002924:	edc3 7a00 	vstr	s15, [r3]
  if (HP_FILTER_ENABLE_DISP == 1)
  {
    iir_HP_0 = 1 - (1 / (1 + I_HP));
 8002928:	4bc2      	ldr	r3, [pc, #776]	; (8002c34 <webserver_displacement_read+0x33c>)
 800292a:	edd3 7a00 	vldr	s15, [r3]
 800292e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002932:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002936:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800293a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800293e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002942:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002946:	4bbc      	ldr	r3, [pc, #752]	; (8002c38 <webserver_displacement_read+0x340>)
 8002948:	edc3 7a00 	vstr	s15, [r3]
    iir_HP_1 = -iir_HP_0;
 800294c:	4bba      	ldr	r3, [pc, #744]	; (8002c38 <webserver_displacement_read+0x340>)
 800294e:	edd3 7a00 	vldr	s15, [r3]
 8002952:	eef1 7a67 	vneg.f32	s15, s15
 8002956:	4bb9      	ldr	r3, [pc, #740]	; (8002c3c <webserver_displacement_read+0x344>)
 8002958:	edc3 7a00 	vstr	s15, [r3]
    iir_HP_2 = (1 / (1 + I_HP)) * (1 - I_HP);
 800295c:	4bb5      	ldr	r3, [pc, #724]	; (8002c34 <webserver_displacement_read+0x33c>)
 800295e:	edd3 7a00 	vldr	s15, [r3]
 8002962:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002966:	ee77 7a87 	vadd.f32	s15, s15, s14
 800296a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800296e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002972:	4bb0      	ldr	r3, [pc, #704]	; (8002c34 <webserver_displacement_read+0x33c>)
 8002974:	edd3 7a00 	vldr	s15, [r3]
 8002978:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800297c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002980:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002984:	4bae      	ldr	r3, [pc, #696]	; (8002c40 <webserver_displacement_read+0x348>)
 8002986:	edc3 7a00 	vstr	s15, [r3]

  /*
   * Compute low pass filter coefficients
   */

  W_LP = 2 * 3.1416 * LOW_PASS_FILTER_FREQUENCY_DISP;
 800298a:	4bae      	ldr	r3, [pc, #696]	; (8002c44 <webserver_displacement_read+0x34c>)
 800298c:	4aae      	ldr	r2, [pc, #696]	; (8002c48 <webserver_displacement_read+0x350>)
 800298e:	601a      	str	r2, [r3, #0]
  I_LP = 2 / (W_LP * integration_interval);
 8002990:	4bac      	ldr	r3, [pc, #688]	; (8002c44 <webserver_displacement_read+0x34c>)
 8002992:	ed93 7a00 	vldr	s14, [r3]
 8002996:	4ba6      	ldr	r3, [pc, #664]	; (8002c30 <webserver_displacement_read+0x338>)
 8002998:	edd3 7a00 	vldr	s15, [r3]
 800299c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029a0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80029a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029a8:	4ba8      	ldr	r3, [pc, #672]	; (8002c4c <webserver_displacement_read+0x354>)
 80029aa:	edc3 7a00 	vstr	s15, [r3]
  if (LP_FILTER_ENABLE_DISP == 1)
  {
    iir_LP_0 = 1 / (1 + I_LP);
 80029ae:	4ba7      	ldr	r3, [pc, #668]	; (8002c4c <webserver_displacement_read+0x354>)
 80029b0:	edd3 7a00 	vldr	s15, [r3]
 80029b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80029b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80029bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80029c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029c4:	4ba2      	ldr	r3, [pc, #648]	; (8002c50 <webserver_displacement_read+0x358>)
 80029c6:	edc3 7a00 	vstr	s15, [r3]
    iir_LP_1 = iir_LP_0;
 80029ca:	4ba1      	ldr	r3, [pc, #644]	; (8002c50 <webserver_displacement_read+0x358>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4aa1      	ldr	r2, [pc, #644]	; (8002c54 <webserver_displacement_read+0x35c>)
 80029d0:	6013      	str	r3, [r2, #0]
    iir_LP_2 = (1 / (1 + I_LP)) * (1 - I_LP);
 80029d2:	4b9e      	ldr	r3, [pc, #632]	; (8002c4c <webserver_displacement_read+0x354>)
 80029d4:	edd3 7a00 	vldr	s15, [r3]
 80029d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80029dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80029e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80029e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80029e8:	4b98      	ldr	r3, [pc, #608]	; (8002c4c <webserver_displacement_read+0x354>)
 80029ea:	edd3 7a00 	vldr	s15, [r3]
 80029ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80029f2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80029f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029fa:	4b97      	ldr	r3, [pc, #604]	; (8002c58 <webserver_displacement_read+0x360>)
 80029fc:	edc3 7a00 	vstr	s15, [r3]
    iir_LP_0 = 1;
    iir_LP_1 = 0;
    iir_LP_2 = 0;
  }

  HAL_Delay(2);
 8002a00:	2002      	movs	r0, #2
 8002a02:	f007 fe4f 	bl	800a6a4 <HAL_Delay>

  result = 0;
 8002a06:	2300      	movs	r3, #0
 8002a08:	637b      	str	r3, [r7, #52]	; 0x34
  if (BSP_MOTION_SENSOR_GetAxes(0, MOTION_ACCELERO, &axes) != BSP_ERROR_NONE)
 8002a0a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a0e:	461a      	mov	r2, r3
 8002a10:	2102      	movs	r1, #2
 8002a12:	2000      	movs	r0, #0
 8002a14:	f001 fe36 	bl	8004684 <BSP_MOTION_SENSOR_GetAxes>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d002      	beq.n	8002a24 <webserver_displacement_read+0x12c>
    result--;
 8002a1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a20:	3b01      	subs	r3, #1
 8002a22:	637b      	str	r3, [r7, #52]	; 0x34
  if (result < 0)
 8002a24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	da03      	bge.n	8002a32 <webserver_displacement_read+0x13a>
  {
    printf("Sampling Error %i\n", result);
 8002a2a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002a2c:	488b      	ldr	r0, [pc, #556]	; (8002c5c <webserver_displacement_read+0x364>)
 8002a2e:	f014 fc01 	bl	8017234 <iprintf>
  }

  /* Convert acceleration to millimeter/sec/sec units sing 1 milli-g = (9.81 m/s/s)/1000 */

  acc_x = 9.81 * (float)(axes.xval);
 8002a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a34:	ee07 3a90 	vmov	s15, r3
 8002a38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a3c:	ee17 0a90 	vmov	r0, s15
 8002a40:	f7fd fd90 	bl	8000564 <__aeabi_f2d>
 8002a44:	a376      	add	r3, pc, #472	; (adr r3, 8002c20 <webserver_displacement_read+0x328>)
 8002a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a4a:	f7fd fde3 	bl	8000614 <__aeabi_dmul>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	460b      	mov	r3, r1
 8002a52:	4610      	mov	r0, r2
 8002a54:	4619      	mov	r1, r3
 8002a56:	f7fe f8d5 	bl	8000c04 <__aeabi_d2f>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	4a80      	ldr	r2, [pc, #512]	; (8002c60 <webserver_displacement_read+0x368>)
 8002a5e:	6013      	str	r3, [r2, #0]
  acc_y = 9.81 * (float)(axes.yval);
 8002a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a62:	ee07 3a90 	vmov	s15, r3
 8002a66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a6a:	ee17 0a90 	vmov	r0, s15
 8002a6e:	f7fd fd79 	bl	8000564 <__aeabi_f2d>
 8002a72:	a36b      	add	r3, pc, #428	; (adr r3, 8002c20 <webserver_displacement_read+0x328>)
 8002a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a78:	f7fd fdcc 	bl	8000614 <__aeabi_dmul>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	460b      	mov	r3, r1
 8002a80:	4610      	mov	r0, r2
 8002a82:	4619      	mov	r1, r3
 8002a84:	f7fe f8be 	bl	8000c04 <__aeabi_d2f>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	4a76      	ldr	r2, [pc, #472]	; (8002c64 <webserver_displacement_read+0x36c>)
 8002a8c:	6013      	str	r3, [r2, #0]

  /* Apply Low Pass filter to acceleration */
  acc_x_filter_lp = iir_LP_0 * acc_x + iir_LP_1 * acc_x_prev - iir_LP_2 * acc_x_filter_lp_prev;
 8002a8e:	4b70      	ldr	r3, [pc, #448]	; (8002c50 <webserver_displacement_read+0x358>)
 8002a90:	ed93 7a00 	vldr	s14, [r3]
 8002a94:	4b72      	ldr	r3, [pc, #456]	; (8002c60 <webserver_displacement_read+0x368>)
 8002a96:	edd3 7a00 	vldr	s15, [r3]
 8002a9a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a9e:	4b6d      	ldr	r3, [pc, #436]	; (8002c54 <webserver_displacement_read+0x35c>)
 8002aa0:	edd3 6a00 	vldr	s13, [r3]
 8002aa4:	4b70      	ldr	r3, [pc, #448]	; (8002c68 <webserver_displacement_read+0x370>)
 8002aa6:	edd3 7a00 	vldr	s15, [r3]
 8002aaa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002aae:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ab2:	4b69      	ldr	r3, [pc, #420]	; (8002c58 <webserver_displacement_read+0x360>)
 8002ab4:	edd3 6a00 	vldr	s13, [r3]
 8002ab8:	4b6c      	ldr	r3, [pc, #432]	; (8002c6c <webserver_displacement_read+0x374>)
 8002aba:	edd3 7a00 	vldr	s15, [r3]
 8002abe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ac2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ac6:	4b6a      	ldr	r3, [pc, #424]	; (8002c70 <webserver_displacement_read+0x378>)
 8002ac8:	edc3 7a00 	vstr	s15, [r3]
  acc_y_filter_lp = iir_LP_0 * acc_y + iir_LP_1 * acc_y_prev - iir_LP_2 * acc_y_filter_lp_prev;
 8002acc:	4b60      	ldr	r3, [pc, #384]	; (8002c50 <webserver_displacement_read+0x358>)
 8002ace:	ed93 7a00 	vldr	s14, [r3]
 8002ad2:	4b64      	ldr	r3, [pc, #400]	; (8002c64 <webserver_displacement_read+0x36c>)
 8002ad4:	edd3 7a00 	vldr	s15, [r3]
 8002ad8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002adc:	4b5d      	ldr	r3, [pc, #372]	; (8002c54 <webserver_displacement_read+0x35c>)
 8002ade:	edd3 6a00 	vldr	s13, [r3]
 8002ae2:	4b64      	ldr	r3, [pc, #400]	; (8002c74 <webserver_displacement_read+0x37c>)
 8002ae4:	edd3 7a00 	vldr	s15, [r3]
 8002ae8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002aec:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002af0:	4b59      	ldr	r3, [pc, #356]	; (8002c58 <webserver_displacement_read+0x360>)
 8002af2:	edd3 6a00 	vldr	s13, [r3]
 8002af6:	4b60      	ldr	r3, [pc, #384]	; (8002c78 <webserver_displacement_read+0x380>)
 8002af8:	edd3 7a00 	vldr	s15, [r3]
 8002afc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b04:	4b5d      	ldr	r3, [pc, #372]	; (8002c7c <webserver_displacement_read+0x384>)
 8002b06:	edc3 7a00 	vstr	s15, [r3]

  /* Apply High Pass filter to signal of Low Pass filter to acceleration */
  acc_x_filter_hp = iir_HP_0 * acc_x_filter_lp + iir_HP_1 * acc_x_filter_lp_prev - iir_HP_2 * acc_x_filter_hp_prev;
 8002b0a:	4b4b      	ldr	r3, [pc, #300]	; (8002c38 <webserver_displacement_read+0x340>)
 8002b0c:	ed93 7a00 	vldr	s14, [r3]
 8002b10:	4b57      	ldr	r3, [pc, #348]	; (8002c70 <webserver_displacement_read+0x378>)
 8002b12:	edd3 7a00 	vldr	s15, [r3]
 8002b16:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b1a:	4b48      	ldr	r3, [pc, #288]	; (8002c3c <webserver_displacement_read+0x344>)
 8002b1c:	edd3 6a00 	vldr	s13, [r3]
 8002b20:	4b52      	ldr	r3, [pc, #328]	; (8002c6c <webserver_displacement_read+0x374>)
 8002b22:	edd3 7a00 	vldr	s15, [r3]
 8002b26:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b2a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b2e:	4b44      	ldr	r3, [pc, #272]	; (8002c40 <webserver_displacement_read+0x348>)
 8002b30:	edd3 6a00 	vldr	s13, [r3]
 8002b34:	4b52      	ldr	r3, [pc, #328]	; (8002c80 <webserver_displacement_read+0x388>)
 8002b36:	edd3 7a00 	vldr	s15, [r3]
 8002b3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b42:	4b50      	ldr	r3, [pc, #320]	; (8002c84 <webserver_displacement_read+0x38c>)
 8002b44:	edc3 7a00 	vstr	s15, [r3]
  acc_y_filter_hp = iir_HP_0 * acc_y_filter_lp + iir_HP_1 * acc_y_filter_lp_prev - iir_HP_2 * acc_y_filter_hp_prev;
 8002b48:	4b3b      	ldr	r3, [pc, #236]	; (8002c38 <webserver_displacement_read+0x340>)
 8002b4a:	ed93 7a00 	vldr	s14, [r3]
 8002b4e:	4b4b      	ldr	r3, [pc, #300]	; (8002c7c <webserver_displacement_read+0x384>)
 8002b50:	edd3 7a00 	vldr	s15, [r3]
 8002b54:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b58:	4b38      	ldr	r3, [pc, #224]	; (8002c3c <webserver_displacement_read+0x344>)
 8002b5a:	edd3 6a00 	vldr	s13, [r3]
 8002b5e:	4b46      	ldr	r3, [pc, #280]	; (8002c78 <webserver_displacement_read+0x380>)
 8002b60:	edd3 7a00 	vldr	s15, [r3]
 8002b64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b68:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b6c:	4b34      	ldr	r3, [pc, #208]	; (8002c40 <webserver_displacement_read+0x348>)
 8002b6e:	edd3 6a00 	vldr	s13, [r3]
 8002b72:	4b45      	ldr	r3, [pc, #276]	; (8002c88 <webserver_displacement_read+0x390>)
 8002b74:	edd3 7a00 	vldr	s15, [r3]
 8002b78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b80:	4b42      	ldr	r3, [pc, #264]	; (8002c8c <webserver_displacement_read+0x394>)
 8002b82:	edc3 7a00 	vstr	s15, [r3]

  acc_x_prev = acc_x;
 8002b86:	4b36      	ldr	r3, [pc, #216]	; (8002c60 <webserver_displacement_read+0x368>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a37      	ldr	r2, [pc, #220]	; (8002c68 <webserver_displacement_read+0x370>)
 8002b8c:	6013      	str	r3, [r2, #0]
  acc_y_prev = acc_y;
 8002b8e:	4b35      	ldr	r3, [pc, #212]	; (8002c64 <webserver_displacement_read+0x36c>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a38      	ldr	r2, [pc, #224]	; (8002c74 <webserver_displacement_read+0x37c>)
 8002b94:	6013      	str	r3, [r2, #0]

  /*
   * Compute velocity by integration
   */

  if (abs(acc_x_filter_hp) < 10)
 8002b96:	4b3b      	ldr	r3, [pc, #236]	; (8002c84 <webserver_displacement_read+0x38c>)
 8002b98:	edd3 7a00 	vldr	s15, [r3]
 8002b9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ba0:	ee17 3a90 	vmov	r3, s15
 8002ba4:	f113 0f09 	cmn.w	r3, #9
 8002ba8:	db0c      	blt.n	8002bc4 <webserver_displacement_read+0x2cc>
 8002baa:	4b36      	ldr	r3, [pc, #216]	; (8002c84 <webserver_displacement_read+0x38c>)
 8002bac:	edd3 7a00 	vldr	s15, [r3]
 8002bb0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002bb4:	ee17 3a90 	vmov	r3, s15
 8002bb8:	2b09      	cmp	r3, #9
 8002bba:	dc03      	bgt.n	8002bc4 <webserver_displacement_read+0x2cc>
  {
    acc_x_filter_hp = 0;
 8002bbc:	4b31      	ldr	r3, [pc, #196]	; (8002c84 <webserver_displacement_read+0x38c>)
 8002bbe:	f04f 0200 	mov.w	r2, #0
 8002bc2:	601a      	str	r2, [r3, #0]
  }
  if (abs(acc_y_filter_hp) < 10)
 8002bc4:	4b31      	ldr	r3, [pc, #196]	; (8002c8c <webserver_displacement_read+0x394>)
 8002bc6:	edd3 7a00 	vldr	s15, [r3]
 8002bca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002bce:	ee17 3a90 	vmov	r3, s15
 8002bd2:	f113 0f09 	cmn.w	r3, #9
 8002bd6:	db0c      	blt.n	8002bf2 <webserver_displacement_read+0x2fa>
 8002bd8:	4b2c      	ldr	r3, [pc, #176]	; (8002c8c <webserver_displacement_read+0x394>)
 8002bda:	edd3 7a00 	vldr	s15, [r3]
 8002bde:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002be2:	ee17 3a90 	vmov	r3, s15
 8002be6:	2b09      	cmp	r3, #9
 8002be8:	dc03      	bgt.n	8002bf2 <webserver_displacement_read+0x2fa>
  {
    acc_y_filter_hp = 0;
 8002bea:	4b28      	ldr	r3, [pc, #160]	; (8002c8c <webserver_displacement_read+0x394>)
 8002bec:	f04f 0200 	mov.w	r2, #0
 8002bf0:	601a      	str	r2, [r3, #0]
  }

  vel_x = vel_x + (acc_x_filter_hp + acc_x_filter_hp_prev) * integration_interval / 2;
 8002bf2:	4b24      	ldr	r3, [pc, #144]	; (8002c84 <webserver_displacement_read+0x38c>)
 8002bf4:	ed93 7a00 	vldr	s14, [r3]
 8002bf8:	4b21      	ldr	r3, [pc, #132]	; (8002c80 <webserver_displacement_read+0x388>)
 8002bfa:	edd3 7a00 	vldr	s15, [r3]
 8002bfe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c02:	4b0b      	ldr	r3, [pc, #44]	; (8002c30 <webserver_displacement_read+0x338>)
 8002c04:	edd3 7a00 	vldr	s15, [r3]
 8002c08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c0c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002c10:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002c14:	4b1e      	ldr	r3, [pc, #120]	; (8002c90 <webserver_displacement_read+0x398>)
 8002c16:	edd3 7a00 	vldr	s15, [r3]
 8002c1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c1e:	e039      	b.n	8002c94 <webserver_displacement_read+0x39c>
 8002c20:	51eb851f 	.word	0x51eb851f
 8002c24:	40239eb8 	.word	0x40239eb8
 8002c28:	20000c5c 	.word	0x20000c5c
 8002c2c:	41490ff9 	.word	0x41490ff9
 8002c30:	2000004c 	.word	0x2000004c
 8002c34:	20000c60 	.word	0x20000c60
 8002c38:	20000c64 	.word	0x20000c64
 8002c3c:	20000c68 	.word	0x20000c68
 8002c40:	20000c6c 	.word	0x20000c6c
 8002c44:	20000c70 	.word	0x20000c70
 8002c48:	41fb53f8 	.word	0x41fb53f8
 8002c4c:	20000c74 	.word	0x20000c74
 8002c50:	20000c78 	.word	0x20000c78
 8002c54:	20000c7c 	.word	0x20000c7c
 8002c58:	20000c80 	.word	0x20000c80
 8002c5c:	0801ace0 	.word	0x0801ace0
 8002c60:	20000c08 	.word	0x20000c08
 8002c64:	20000c0c 	.word	0x20000c0c
 8002c68:	20000c10 	.word	0x20000c10
 8002c6c:	20000c30 	.word	0x20000c30
 8002c70:	20000c18 	.word	0x20000c18
 8002c74:	20000c14 	.word	0x20000c14
 8002c78:	20000c34 	.word	0x20000c34
 8002c7c:	20000c1c 	.word	0x20000c1c
 8002c80:	20000c28 	.word	0x20000c28
 8002c84:	20000c20 	.word	0x20000c20
 8002c88:	20000c2c 	.word	0x20000c2c
 8002c8c:	20000c24 	.word	0x20000c24
 8002c90:	20000c38 	.word	0x20000c38
 8002c94:	4b9d      	ldr	r3, [pc, #628]	; (8002f0c <webserver_displacement_read+0x614>)
 8002c96:	edc3 7a00 	vstr	s15, [r3]
  vel_y = vel_y + (acc_y_filter_hp + acc_y_filter_hp_prev) * integration_interval / 2;
 8002c9a:	4b9d      	ldr	r3, [pc, #628]	; (8002f10 <webserver_displacement_read+0x618>)
 8002c9c:	ed93 7a00 	vldr	s14, [r3]
 8002ca0:	4b9c      	ldr	r3, [pc, #624]	; (8002f14 <webserver_displacement_read+0x61c>)
 8002ca2:	edd3 7a00 	vldr	s15, [r3]
 8002ca6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002caa:	4b9b      	ldr	r3, [pc, #620]	; (8002f18 <webserver_displacement_read+0x620>)
 8002cac:	edd3 7a00 	vldr	s15, [r3]
 8002cb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cb4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002cb8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002cbc:	4b97      	ldr	r3, [pc, #604]	; (8002f1c <webserver_displacement_read+0x624>)
 8002cbe:	edd3 7a00 	vldr	s15, [r3]
 8002cc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cc6:	4b95      	ldr	r3, [pc, #596]	; (8002f1c <webserver_displacement_read+0x624>)
 8002cc8:	edc3 7a00 	vstr	s15, [r3]
  displacement_x += (vel_x + vel_x_prev) * integration_interval / 2;
 8002ccc:	4b8f      	ldr	r3, [pc, #572]	; (8002f0c <webserver_displacement_read+0x614>)
 8002cce:	ed93 7a00 	vldr	s14, [r3]
 8002cd2:	4b93      	ldr	r3, [pc, #588]	; (8002f20 <webserver_displacement_read+0x628>)
 8002cd4:	edd3 7a00 	vldr	s15, [r3]
 8002cd8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002cdc:	4b8e      	ldr	r3, [pc, #568]	; (8002f18 <webserver_displacement_read+0x620>)
 8002cde:	edd3 7a00 	vldr	s15, [r3]
 8002ce2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ce6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002cea:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002cee:	4b8d      	ldr	r3, [pc, #564]	; (8002f24 <webserver_displacement_read+0x62c>)
 8002cf0:	edd3 7a00 	vldr	s15, [r3]
 8002cf4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cf8:	4b8a      	ldr	r3, [pc, #552]	; (8002f24 <webserver_displacement_read+0x62c>)
 8002cfa:	edc3 7a00 	vstr	s15, [r3]
  displacement_y += (vel_y + vel_y_prev) * integration_interval / 2;
 8002cfe:	4b87      	ldr	r3, [pc, #540]	; (8002f1c <webserver_displacement_read+0x624>)
 8002d00:	ed93 7a00 	vldr	s14, [r3]
 8002d04:	4b88      	ldr	r3, [pc, #544]	; (8002f28 <webserver_displacement_read+0x630>)
 8002d06:	edd3 7a00 	vldr	s15, [r3]
 8002d0a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d0e:	4b82      	ldr	r3, [pc, #520]	; (8002f18 <webserver_displacement_read+0x620>)
 8002d10:	edd3 7a00 	vldr	s15, [r3]
 8002d14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d18:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002d1c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002d20:	4b82      	ldr	r3, [pc, #520]	; (8002f2c <webserver_displacement_read+0x634>)
 8002d22:	edd3 7a00 	vldr	s15, [r3]
 8002d26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d2a:	4b80      	ldr	r3, [pc, #512]	; (8002f2c <webserver_displacement_read+0x634>)
 8002d2c:	edc3 7a00 	vstr	s15, [r3]

  acc_x_filter_lp_prev = acc_x_filter_lp;
 8002d30:	4b7f      	ldr	r3, [pc, #508]	; (8002f30 <webserver_displacement_read+0x638>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a7f      	ldr	r2, [pc, #508]	; (8002f34 <webserver_displacement_read+0x63c>)
 8002d36:	6013      	str	r3, [r2, #0]
  acc_y_filter_lp_prev = acc_y_filter_lp;
 8002d38:	4b7f      	ldr	r3, [pc, #508]	; (8002f38 <webserver_displacement_read+0x640>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a7f      	ldr	r2, [pc, #508]	; (8002f3c <webserver_displacement_read+0x644>)
 8002d3e:	6013      	str	r3, [r2, #0]

  acc_x_filter_hp_prev = acc_x_filter_hp;
 8002d40:	4b7f      	ldr	r3, [pc, #508]	; (8002f40 <webserver_displacement_read+0x648>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a7f      	ldr	r2, [pc, #508]	; (8002f44 <webserver_displacement_read+0x64c>)
 8002d46:	6013      	str	r3, [r2, #0]
  acc_y_filter_hp_prev = acc_y_filter_hp;
 8002d48:	4b71      	ldr	r3, [pc, #452]	; (8002f10 <webserver_displacement_read+0x618>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a71      	ldr	r2, [pc, #452]	; (8002f14 <webserver_displacement_read+0x61c>)
 8002d4e:	6013      	str	r3, [r2, #0]

  /*
   * Detect motion and assign velocities to features
   */

  vel_mag = sqrt((vel_x) * (vel_x) + (vel_y) * (vel_y));
 8002d50:	4b6e      	ldr	r3, [pc, #440]	; (8002f0c <webserver_displacement_read+0x614>)
 8002d52:	ed93 7a00 	vldr	s14, [r3]
 8002d56:	4b6d      	ldr	r3, [pc, #436]	; (8002f0c <webserver_displacement_read+0x614>)
 8002d58:	edd3 7a00 	vldr	s15, [r3]
 8002d5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d60:	4b6e      	ldr	r3, [pc, #440]	; (8002f1c <webserver_displacement_read+0x624>)
 8002d62:	edd3 6a00 	vldr	s13, [r3]
 8002d66:	4b6d      	ldr	r3, [pc, #436]	; (8002f1c <webserver_displacement_read+0x624>)
 8002d68:	edd3 7a00 	vldr	s15, [r3]
 8002d6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d74:	ee17 0a90 	vmov	r0, s15
 8002d78:	f7fd fbf4 	bl	8000564 <__aeabi_f2d>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	460b      	mov	r3, r1
 8002d80:	ec43 2b10 	vmov	d0, r2, r3
 8002d84:	f017 fbd4 	bl	801a530 <sqrt>
 8002d88:	ec53 2b10 	vmov	r2, r3, d0
 8002d8c:	4610      	mov	r0, r2
 8002d8e:	4619      	mov	r1, r3
 8002d90:	f7fd ff38 	bl	8000c04 <__aeabi_d2f>
 8002d94:	4603      	mov	r3, r0
 8002d96:	4a6c      	ldr	r2, [pc, #432]	; (8002f48 <webserver_displacement_read+0x650>)
 8002d98:	6013      	str	r3, [r2, #0]
  if (abs(vel_mag - vel_mag_prev) < 0.01)
 8002d9a:	4b6b      	ldr	r3, [pc, #428]	; (8002f48 <webserver_displacement_read+0x650>)
 8002d9c:	ed93 7a00 	vldr	s14, [r3]
 8002da0:	4b6a      	ldr	r3, [pc, #424]	; (8002f4c <webserver_displacement_read+0x654>)
 8002da2:	edd3 7a00 	vldr	s15, [r3]
 8002da6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002daa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002dae:	ee17 3a90 	vmov	r3, s15
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	db15      	blt.n	8002de2 <webserver_displacement_read+0x4ea>
 8002db6:	4b64      	ldr	r3, [pc, #400]	; (8002f48 <webserver_displacement_read+0x650>)
 8002db8:	ed93 7a00 	vldr	s14, [r3]
 8002dbc:	4b63      	ldr	r3, [pc, #396]	; (8002f4c <webserver_displacement_read+0x654>)
 8002dbe:	edd3 7a00 	vldr	s15, [r3]
 8002dc2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dc6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002dca:	ee17 3a90 	vmov	r3, s15
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	dc07      	bgt.n	8002de2 <webserver_displacement_read+0x4ea>
  {
    vel_x = 0;
 8002dd2:	4b4e      	ldr	r3, [pc, #312]	; (8002f0c <webserver_displacement_read+0x614>)
 8002dd4:	f04f 0200 	mov.w	r2, #0
 8002dd8:	601a      	str	r2, [r3, #0]
    vel_y = 0;
 8002dda:	4b50      	ldr	r3, [pc, #320]	; (8002f1c <webserver_displacement_read+0x624>)
 8002ddc:	f04f 0200 	mov.w	r2, #0
 8002de0:	601a      	str	r2, [r3, #0]
  }
  vel_mag_prev = vel_mag;
 8002de2:	4b59      	ldr	r3, [pc, #356]	; (8002f48 <webserver_displacement_read+0x650>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a59      	ldr	r2, [pc, #356]	; (8002f4c <webserver_displacement_read+0x654>)
 8002de8:	6013      	str	r3, [r2, #0]
  vel_x_prev = vel_x;
 8002dea:	4b48      	ldr	r3, [pc, #288]	; (8002f0c <webserver_displacement_read+0x614>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a4c      	ldr	r2, [pc, #304]	; (8002f20 <webserver_displacement_read+0x628>)
 8002df0:	6013      	str	r3, [r2, #0]
  vel_y_prev = vel_y;
 8002df2:	4b4a      	ldr	r3, [pc, #296]	; (8002f1c <webserver_displacement_read+0x624>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a4c      	ldr	r2, [pc, #304]	; (8002f28 <webserver_displacement_read+0x630>)
 8002df8:	6013      	str	r3, [r2, #0]
  displacement_mag = sqrt((displacement_x) * (displacement_x) + (displacement_y) * (displacement_y));
 8002dfa:	4b4a      	ldr	r3, [pc, #296]	; (8002f24 <webserver_displacement_read+0x62c>)
 8002dfc:	ed93 7a00 	vldr	s14, [r3]
 8002e00:	4b48      	ldr	r3, [pc, #288]	; (8002f24 <webserver_displacement_read+0x62c>)
 8002e02:	edd3 7a00 	vldr	s15, [r3]
 8002e06:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e0a:	4b48      	ldr	r3, [pc, #288]	; (8002f2c <webserver_displacement_read+0x634>)
 8002e0c:	edd3 6a00 	vldr	s13, [r3]
 8002e10:	4b46      	ldr	r3, [pc, #280]	; (8002f2c <webserver_displacement_read+0x634>)
 8002e12:	edd3 7a00 	vldr	s15, [r3]
 8002e16:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e1e:	ee17 0a90 	vmov	r0, s15
 8002e22:	f7fd fb9f 	bl	8000564 <__aeabi_f2d>
 8002e26:	4602      	mov	r2, r0
 8002e28:	460b      	mov	r3, r1
 8002e2a:	ec43 2b10 	vmov	d0, r2, r3
 8002e2e:	f017 fb7f 	bl	801a530 <sqrt>
 8002e32:	ec53 2b10 	vmov	r2, r3, d0
 8002e36:	4610      	mov	r0, r2
 8002e38:	4619      	mov	r1, r3
 8002e3a:	f7fd fee3 	bl	8000c04 <__aeabi_d2f>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	4a43      	ldr	r2, [pc, #268]	; (8002f50 <webserver_displacement_read+0x658>)
 8002e42:	6013      	str	r3, [r2, #0]

  printf("**Acceleration** X: %f, Y: %f | **Velocity** Magnitude: %f, X: %f, Y: %f | **Displacement** Magnitude: %f, X: %f, Y: %f\n ", acc_x_filter_hp, acc_y_filter_hp, vel_mag, vel_x, vel_y, displacement_mag, displacement_x, displacement_y);
 8002e44:	4b3e      	ldr	r3, [pc, #248]	; (8002f40 <webserver_displacement_read+0x648>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f7fd fb8b 	bl	8000564 <__aeabi_f2d>
 8002e4e:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8002e52:	4b2f      	ldr	r3, [pc, #188]	; (8002f10 <webserver_displacement_read+0x618>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7fd fb84 	bl	8000564 <__aeabi_f2d>
 8002e5c:	4682      	mov	sl, r0
 8002e5e:	468b      	mov	fp, r1
 8002e60:	4b39      	ldr	r3, [pc, #228]	; (8002f48 <webserver_displacement_read+0x650>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4618      	mov	r0, r3
 8002e66:	f7fd fb7d 	bl	8000564 <__aeabi_f2d>
 8002e6a:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8002e6e:	4b27      	ldr	r3, [pc, #156]	; (8002f0c <webserver_displacement_read+0x614>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4618      	mov	r0, r3
 8002e74:	f7fd fb76 	bl	8000564 <__aeabi_f2d>
 8002e78:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002e7c:	4b27      	ldr	r3, [pc, #156]	; (8002f1c <webserver_displacement_read+0x624>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4618      	mov	r0, r3
 8002e82:	f7fd fb6f 	bl	8000564 <__aeabi_f2d>
 8002e86:	e9c7 0100 	strd	r0, r1, [r7]
 8002e8a:	4b31      	ldr	r3, [pc, #196]	; (8002f50 <webserver_displacement_read+0x658>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f7fd fb68 	bl	8000564 <__aeabi_f2d>
 8002e94:	4680      	mov	r8, r0
 8002e96:	4689      	mov	r9, r1
 8002e98:	4b22      	ldr	r3, [pc, #136]	; (8002f24 <webserver_displacement_read+0x62c>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f7fd fb61 	bl	8000564 <__aeabi_f2d>
 8002ea2:	4604      	mov	r4, r0
 8002ea4:	460d      	mov	r5, r1
 8002ea6:	4b21      	ldr	r3, [pc, #132]	; (8002f2c <webserver_displacement_read+0x634>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7fd fb5a 	bl	8000564 <__aeabi_f2d>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	460b      	mov	r3, r1
 8002eb4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8002eb8:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 8002ebc:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8002ec0:	ed97 7b00 	vldr	d7, [r7]
 8002ec4:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002ec8:	ed97 7b02 	vldr	d7, [r7, #8]
 8002ecc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8002ed0:	ed97 7b04 	vldr	d7, [r7, #16]
 8002ed4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002ed8:	e9cd ab00 	strd	sl, fp, [sp]
 8002edc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ee0:	481c      	ldr	r0, [pc, #112]	; (8002f54 <webserver_displacement_read+0x65c>)
 8002ee2:	f014 f9a7 	bl	8017234 <iprintf>
  *displacementX = displacement_x;
 8002ee6:	4b0f      	ldr	r3, [pc, #60]	; (8002f24 <webserver_displacement_read+0x62c>)
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eec:	601a      	str	r2, [r3, #0]
  *displacementY = displacement_y;
 8002eee:	4b0f      	ldr	r3, [pc, #60]	; (8002f2c <webserver_displacement_read+0x634>)
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	6a3b      	ldr	r3, [r7, #32]
 8002ef4:	601a      	str	r2, [r3, #0]
  prev_time = HAL_GetTick();
 8002ef6:	f007 fbc9 	bl	800a68c <HAL_GetTick>
 8002efa:	4603      	mov	r3, r0
 8002efc:	461a      	mov	r2, r3
 8002efe:	4b16      	ldr	r3, [pc, #88]	; (8002f58 <webserver_displacement_read+0x660>)
 8002f00:	601a      	str	r2, [r3, #0]
  return;
 8002f02:	bf00      	nop
}
 8002f04:	3738      	adds	r7, #56	; 0x38
 8002f06:	46bd      	mov	sp, r7
 8002f08:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f0c:	20000c38 	.word	0x20000c38
 8002f10:	20000c24 	.word	0x20000c24
 8002f14:	20000c2c 	.word	0x20000c2c
 8002f18:	2000004c 	.word	0x2000004c
 8002f1c:	20000c40 	.word	0x20000c40
 8002f20:	20000c3c 	.word	0x20000c3c
 8002f24:	20000c50 	.word	0x20000c50
 8002f28:	20000c44 	.word	0x20000c44
 8002f2c:	20000c54 	.word	0x20000c54
 8002f30:	20000c18 	.word	0x20000c18
 8002f34:	20000c30 	.word	0x20000c30
 8002f38:	20000c1c 	.word	0x20000c1c
 8002f3c:	20000c34 	.word	0x20000c34
 8002f40:	20000c20 	.word	0x20000c20
 8002f44:	20000c28 	.word	0x20000c28
 8002f48:	20000c48 	.word	0x20000c48
 8002f4c:	20000c4c 	.word	0x20000c4c
 8002f50:	20000c58 	.word	0x20000c58
 8002f54:	0801acf4 	.word	0x0801acf4
 8002f58:	20000c84 	.word	0x20000c84

08002f5c <webserver_sensors_start>:
 * @brief  Start temperature, pressure and humidity sensors acquisition.
 * @param  None
 * @retval BSP status
 */
int webserver_sensors_start(void)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	af00      	add	r7, sp, #0
  int status = BSP_ERROR_NONE;
 8002f62:	2300      	movs	r3, #0
 8002f64:	607b      	str	r3, [r7, #4]

  status = webserver_acel_sensor_start();
 8002f66:	f7ff fbf1 	bl	800274c <webserver_acel_sensor_start>
 8002f6a:	6078      	str	r0, [r7, #4]

  return status;
 8002f6c:	687b      	ldr	r3, [r7, #4]
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3708      	adds	r7, #8
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
	...

08002f78 <app_entry>:
  * @brief  App main program
  * @param  None
  * @retval None
  */
void app_entry(void)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	af00      	add	r7, sp, #0
  /* No buffer for printf usage, just print characters one by one.*/
  setbuf(stdout, NULL);
 8002f7c:	4b16      	ldr	r3, [pc, #88]	; (8002fd8 <app_entry+0x60>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	2100      	movs	r1, #0
 8002f84:	4618      	mov	r0, r3
 8002f86:	f013 f80f 	bl	8015fa8 <setbuf>

  /* Initialize web server system */
  if (system_init() != WEBSERVER_OK)
 8002f8a:	f7fe fbe5 	bl	8001758 <system_init>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d001      	beq.n	8002f98 <app_entry+0x20>
  {
    webserver_process_error();
 8002f94:	f000 f822 	bl	8002fdc <webserver_process_error>
  }

  /* Initialize WiFi connection */
  if (webserver_wifi_init() != WEBSERVER_OK)
 8002f98:	f000 f82b 	bl	8002ff2 <webserver_wifi_init>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d001      	beq.n	8002fa6 <app_entry+0x2e>
  {
    webserver_process_error();
 8002fa2:	f000 f81b 	bl	8002fdc <webserver_process_error>
  }

  /* Print web server header in hyperterminal */
  webserver_console_print_header();
 8002fa6:	f7fe f899 	bl	80010dc <webserver_console_print_header>

  /* Connect to available WiFi */
  if (webserver_wifi_connect() != WEBSERVER_OK)
 8002faa:	f000 f851 	bl	8003050 <webserver_wifi_connect>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d001      	beq.n	8002fb8 <app_entry+0x40>
  {
    webserver_process_error();
 8002fb4:	f000 f812 	bl	8002fdc <webserver_process_error>
  }

  /* Start sensors */
  if (webserver_sensors_start() != BSP_ERROR_NONE)
 8002fb8:	f7ff ffd0 	bl	8002f5c <webserver_sensors_start>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d001      	beq.n	8002fc6 <app_entry+0x4e>
  {
    webserver_process_error();
 8002fc2:	f000 f80b 	bl	8002fdc <webserver_process_error>
  }

  /* Start web server */
  if (webserver_http_start() != WEBSERVER_OK)
 8002fc6:	f7ff f845 	bl	8002054 <webserver_http_start>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d001      	beq.n	8002fd4 <app_entry+0x5c>
  {
    webserver_process_error();
 8002fd0:	f000 f804 	bl	8002fdc <webserver_process_error>
  }
}
 8002fd4:	bf00      	nop
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	200002c8 	.word	0x200002c8

08002fdc <webserver_process_error>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void webserver_process_error(void)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002fe0:	b672      	cpsid	i
}
 8002fe2:	bf00      	nop
  /* Disable all interrupts */
  __disable_irq();

  /* De-Initialize GREEN led */
  BSP_LED_DeInit(LED_GREEN);
 8002fe4:	2001      	movs	r0, #1
 8002fe6:	f000 fd7f 	bl	8003ae8 <BSP_LED_DeInit>

  /* Turn ON RED led */
  BSP_LED_On(LED_RED);
 8002fea:	2000      	movs	r0, #0
 8002fec:	f000 fda8 	bl	8003b40 <BSP_LED_On>

  while(1)
 8002ff0:	e7fe      	b.n	8002ff0 <webserver_process_error+0x14>

08002ff2 <webserver_wifi_init>:
  * @brief  Initialize WiFi interface
  * @param  None
  * @retval Web Server status
  */
WebServer_StatusTypeDef webserver_wifi_init(void)
{
 8002ff2:	b580      	push	{r7, lr}
 8002ff4:	af00      	add	r7, sp, #0
  /* WiFi IO configuration */
  Wifi_IO_Init();
 8002ff6:	f000 f95b 	bl	80032b0 <Wifi_IO_Init>

  /* WiFi SPI initialization and configuration */
  if (Wifi_SPI_Config() != WEBSERVER_OK)
 8002ffa:	f000 f901 	bl	8003200 <Wifi_SPI_Config>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d002      	beq.n	800300a <webserver_wifi_init+0x18>
  {
    return WIFI_ERROR;
 8003004:	f06f 0305 	mvn.w	r3, #5
 8003008:	e000      	b.n	800300c <webserver_wifi_init+0x1a>
  }

  return WEBSERVER_OK;
 800300a:	2300      	movs	r3, #0
}
 800300c:	4618      	mov	r0, r3
 800300e:	bd80      	pop	{r7, pc}

08003010 <wifi_get_credentials>:
  * @brief  Get WiFi credentials
  * @param  None
  * @retval Web Server status
  */
static WebServer_StatusTypeDef wifi_get_credentials(void)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	af00      	add	r7, sp, #0
  /* Get user SSID */
  if (webserver_console_get_ssid(net_wifi_registred_hotspot, SSID) != WEBSERVER_OK)
 8003014:	490b      	ldr	r1, [pc, #44]	; (8003044 <wifi_get_credentials+0x34>)
 8003016:	480c      	ldr	r0, [pc, #48]	; (8003048 <wifi_get_credentials+0x38>)
 8003018:	f7fe f876 	bl	8001108 <webserver_console_get_ssid>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d002      	beq.n	8003028 <wifi_get_credentials+0x18>
  {
    return CONSOLE_ERROR;
 8003022:	f06f 0302 	mvn.w	r3, #2
 8003026:	e00a      	b.n	800303e <wifi_get_credentials+0x2e>
  }

  /* Get user PWD */
  if (webserver_console_get_password(net_wifi_registred_hotspot, PassWord) != WEBSERVER_OK)
 8003028:	4908      	ldr	r1, [pc, #32]	; (800304c <wifi_get_credentials+0x3c>)
 800302a:	4807      	ldr	r0, [pc, #28]	; (8003048 <wifi_get_credentials+0x38>)
 800302c:	f7fe f890 	bl	8001150 <webserver_console_get_password>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d002      	beq.n	800303c <wifi_get_credentials+0x2c>
  {
    return CONSOLE_ERROR;
 8003036:	f06f 0302 	mvn.w	r3, #2
 800303a:	e000      	b.n	800303e <wifi_get_credentials+0x2e>
  }

  return WEBSERVER_OK;
 800303c:	2300      	movs	r3, #0
}
 800303e:	4618      	mov	r0, r3
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	20000d1c 	.word	0x20000d1c
 8003048:	20000d7c 	.word	0x20000d7c
 800304c:	20000d3c 	.word	0x20000d3c

08003050 <webserver_wifi_connect>:
  * @brief  Connect WiFi interface
  * @param  None
  * @retval Web Server status
  */
WebServer_StatusTypeDef webserver_wifi_connect(void)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	af00      	add	r7, sp, #0
  .psk = "q~74D>J#",
  .security_mode = NET_WIFI_SM_WPA2_WPA_PSK
  };

  /* start network interface */
  Netif = NetInterfaceOn(mx_wifi_driver, hnet_notify);
 8003054:	4911      	ldr	r1, [pc, #68]	; (800309c <webserver_wifi_connect+0x4c>)
 8003056:	4812      	ldr	r0, [pc, #72]	; (80030a0 <webserver_wifi_connect+0x50>)
 8003058:	f000 fbfc 	bl	8003854 <NetInterfaceOn>
 800305c:	4603      	mov	r3, r0
 800305e:	4a11      	ldr	r2, [pc, #68]	; (80030a4 <webserver_wifi_connect+0x54>)
 8003060:	6013      	str	r3, [r2, #0]

  /* Check if a valid WIFI interface is initialized */
  if (NET_INTERFACE_IS_WIFI(Netif))
 8003062:	4b10      	ldr	r3, [pc, #64]	; (80030a4 <webserver_wifi_connect+0x54>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4618      	mov	r0, r3
 8003068:	f00f fd21 	bl	8012aae <net_wifi_get_class>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d110      	bne.n	8003094 <webserver_wifi_connect+0x44>
  {
    /* Scan available WIFIs */
    scan_cmd(0, NULL);
 8003072:	2100      	movs	r1, #0
 8003074:	2000      	movs	r0, #0
 8003076:	f000 fb31 	bl	80036dc <scan_cmd>

    /* Get user credentials */
    wifi_get_credentials();
 800307a:	f7ff ffc9 	bl	8003010 <wifi_get_credentials>

    /* Scan available WIFIs */
    NetWifiGetDefaultStation(&WifiCredentials, net_wifi_registred_hotspot);
 800307e:	490a      	ldr	r1, [pc, #40]	; (80030a8 <webserver_wifi_connect+0x58>)
 8003080:	480a      	ldr	r0, [pc, #40]	; (80030ac <webserver_wifi_connect+0x5c>)
 8003082:	f000 fa45 	bl	8003510 <NetWifiGetDefaultStation>

    /* Connect to selected WIFI */
    NetInterfaceConnect(Netif, true, &WifiCredentials, NET_WIFI_MODE_STA);
 8003086:	4b07      	ldr	r3, [pc, #28]	; (80030a4 <webserver_wifi_connect+0x54>)
 8003088:	6818      	ldr	r0, [r3, #0]
 800308a:	2300      	movs	r3, #0
 800308c:	4a07      	ldr	r2, [pc, #28]	; (80030ac <webserver_wifi_connect+0x5c>)
 800308e:	2101      	movs	r1, #1
 8003090:	f000 fc28 	bl	80038e4 <NetInterfaceConnect>
  }

  return WEBSERVER_OK;
 8003094:	2300      	movs	r3, #0
}
 8003096:	4618      	mov	r0, r3
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	080030b1 	.word	0x080030b1
 80030a0:	08014341 	.word	0x08014341
 80030a4:	20000c88 	.word	0x20000c88
 80030a8:	20000d7c 	.word	0x20000d7c
 80030ac:	20000050 	.word	0x20000050

080030b0 <hnet_notify>:
  * @brief  Handles net notifications
  * @param  None
  * @retval None
  */
static void hnet_notify(void *context, uint32_t event_class, uint32_t event_id, void  *event_data)
{
 80030b0:	b5b0      	push	{r4, r5, r7, lr}
 80030b2:	b08a      	sub	sp, #40	; 0x28
 80030b4:	af04      	add	r7, sp, #16
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	60b9      	str	r1, [r7, #8]
 80030ba:	607a      	str	r2, [r7, #4]
 80030bc:	603b      	str	r3, [r7, #0]
  net_if_handle_t *netif = context;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	617b      	str	r3, [r7, #20]
  ((void)event_data);

  if (NET_EVENT_STATE_CHANGE == event_class)
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d17a      	bne.n	80031be <hnet_notify+0x10e>
  {
    net_state_t new_state = (net_state_t) event_id;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	74fb      	strb	r3, [r7, #19]
    switch (new_state)
 80030cc:	7cfb      	ldrb	r3, [r7, #19]
 80030ce:	2b08      	cmp	r3, #8
 80030d0:	d874      	bhi.n	80031bc <hnet_notify+0x10c>
 80030d2:	a201      	add	r2, pc, #4	; (adr r2, 80030d8 <hnet_notify+0x28>)
 80030d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030d8:	080031ad 	.word	0x080031ad
 80030dc:	080030fd 	.word	0x080030fd
 80030e0:	08003105 	.word	0x08003105
 80030e4:	0800310d 	.word	0x0800310d
 80030e8:	08003179 	.word	0x08003179
 80030ec:	08003181 	.word	0x08003181
 80030f0:	080031a5 	.word	0x080031a5
 80030f4:	0800319d 	.word	0x0800319d
 80030f8:	080031b5 	.word	0x080031b5
    {
      /* Initialized state */
    case NET_STATE_INITIALIZED:
      {
        printf("- Network Interface initialized:\r\n");
 80030fc:	4832      	ldr	r0, [pc, #200]	; (80031c8 <hnet_notify+0x118>)
 80030fe:	f014 f907 	bl	8017310 <puts>
        break;
 8003102:	e05c      	b.n	80031be <hnet_notify+0x10e>
      }

      /* Started state */
    case NET_STATE_STARTING:
      {
        printf("- Network Interface starting:\r\n");
 8003104:	4831      	ldr	r0, [pc, #196]	; (80031cc <hnet_notify+0x11c>)
 8003106:	f014 f903 	bl	8017310 <puts>
        break;
 800310a:	e058      	b.n	80031be <hnet_notify+0x10e>
      }

      /* Ready state */
    case NET_STATE_READY:
      {
        printf("- Network Interface ready:\r\n");
 800310c:	4830      	ldr	r0, [pc, #192]	; (80031d0 <hnet_notify+0x120>)
 800310e:	f014 f8ff 	bl	8017310 <puts>
        printf("   - Device Name : %s.\r\n", netif->DeviceName);
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	3325      	adds	r3, #37	; 0x25
 8003116:	4619      	mov	r1, r3
 8003118:	482e      	ldr	r0, [pc, #184]	; (80031d4 <hnet_notify+0x124>)
 800311a:	f014 f88b 	bl	8017234 <iprintf>
        printf("   - Device ID   : %s.\r\n", netif->DeviceID);
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	3365      	adds	r3, #101	; 0x65
 8003122:	4619      	mov	r1, r3
 8003124:	482c      	ldr	r0, [pc, #176]	; (80031d8 <hnet_notify+0x128>)
 8003126:	f014 f885 	bl	8017234 <iprintf>
        printf("   - Device Version : %s.\r\n", netif->DeviceVer);
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	33a5      	adds	r3, #165	; 0xa5
 800312e:	4619      	mov	r1, r3
 8003130:	482a      	ldr	r0, [pc, #168]	; (80031dc <hnet_notify+0x12c>)
 8003132:	f014 f87f 	bl	8017234 <iprintf>
        printf("   - MAC address: %x.%x.%x.%x.%x.%x\r\n",
               netif->macaddr.mac[0], netif->macaddr.mac[1], netif->macaddr.mac[2],
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	f893 30e5 	ldrb.w	r3, [r3, #229]	; 0xe5
        printf("   - MAC address: %x.%x.%x.%x.%x.%x\r\n",
 800313c:	4618      	mov	r0, r3
               netif->macaddr.mac[0], netif->macaddr.mac[1], netif->macaddr.mac[2],
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	f893 30e6 	ldrb.w	r3, [r3, #230]	; 0xe6
        printf("   - MAC address: %x.%x.%x.%x.%x.%x\r\n",
 8003144:	461c      	mov	r4, r3
               netif->macaddr.mac[0], netif->macaddr.mac[1], netif->macaddr.mac[2],
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	f893 30e7 	ldrb.w	r3, [r3, #231]	; 0xe7
        printf("   - MAC address: %x.%x.%x.%x.%x.%x\r\n",
 800314c:	461d      	mov	r5, r3
               netif->macaddr.mac[3], netif->macaddr.mac[4], netif->macaddr.mac[5]);
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
        printf("   - MAC address: %x.%x.%x.%x.%x.%x\r\n",
 8003154:	461a      	mov	r2, r3
               netif->macaddr.mac[3], netif->macaddr.mac[4], netif->macaddr.mac[5]);
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	f893 30e9 	ldrb.w	r3, [r3, #233]	; 0xe9
        printf("   - MAC address: %x.%x.%x.%x.%x.%x\r\n",
 800315c:	4619      	mov	r1, r3
               netif->macaddr.mac[3], netif->macaddr.mac[4], netif->macaddr.mac[5]);
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	f893 30ea 	ldrb.w	r3, [r3, #234]	; 0xea
        printf("   - MAC address: %x.%x.%x.%x.%x.%x\r\n",
 8003164:	9302      	str	r3, [sp, #8]
 8003166:	9101      	str	r1, [sp, #4]
 8003168:	9200      	str	r2, [sp, #0]
 800316a:	462b      	mov	r3, r5
 800316c:	4622      	mov	r2, r4
 800316e:	4601      	mov	r1, r0
 8003170:	481b      	ldr	r0, [pc, #108]	; (80031e0 <hnet_notify+0x130>)
 8003172:	f014 f85f 	bl	8017234 <iprintf>
        break;
 8003176:	e022      	b.n	80031be <hnet_notify+0x10e>
      }

      /* Connecting state */
    case NET_STATE_CONNECTING:
      {
        printf("- Network Interface connecting:\r\n");
 8003178:	481a      	ldr	r0, [pc, #104]	; (80031e4 <hnet_notify+0x134>)
 800317a:	f014 f8c9 	bl	8017310 <puts>
        break;
 800317e:	e01e      	b.n	80031be <hnet_notify+0x10e>
      }

      /* Connected state */
    case NET_STATE_CONNECTED:
      {
        printf("- Network Interface connected:\r\n");
 8003180:	4819      	ldr	r0, [pc, #100]	; (80031e8 <hnet_notify+0x138>)
 8003182:	f014 f8c5 	bl	8017310 <puts>
        printf("   - IP address :  %s. \r\n", NET_NTOA(&netif->ipaddr));
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	3304      	adds	r3, #4
 800318a:	4618      	mov	r0, r3
 800318c:	f00f fc56 	bl	8012a3c <net_ntoa>
 8003190:	4603      	mov	r3, r0
 8003192:	4619      	mov	r1, r3
 8003194:	4815      	ldr	r0, [pc, #84]	; (80031ec <hnet_notify+0x13c>)
 8003196:	f014 f84d 	bl	8017234 <iprintf>
        break;
 800319a:	e010      	b.n	80031be <hnet_notify+0x10e>
      }

      /* Disconnecting state */
    case NET_STATE_DISCONNECTING:
      printf("- Network Interface disconnecting\r\n");
 800319c:	4814      	ldr	r0, [pc, #80]	; (80031f0 <hnet_notify+0x140>)
 800319e:	f014 f8b7 	bl	8017310 <puts>
      break;
 80031a2:	e00c      	b.n	80031be <hnet_notify+0x10e>

      /* Stopping state */
    case NET_STATE_STOPPING:
      {
        printf("- Network Interface stopping\r\n");
 80031a4:	4813      	ldr	r0, [pc, #76]	; (80031f4 <hnet_notify+0x144>)
 80031a6:	f014 f8b3 	bl	8017310 <puts>
        break;
 80031aa:	e008      	b.n	80031be <hnet_notify+0x10e>
      }

      /* De-Initialized state */
    case NET_STATE_DEINITIALIZED:
      {
        printf("- Network Interface de-initialized\r\n");
 80031ac:	4812      	ldr	r0, [pc, #72]	; (80031f8 <hnet_notify+0x148>)
 80031ae:	f014 f8af 	bl	8017310 <puts>
        break;
 80031b2:	e004      	b.n	80031be <hnet_notify+0x10e>
      }

      /* Lost state */
    case NET_STATE_CONNECTION_LOST:
      {
        printf("- Network Interface connection lost\r\n");
 80031b4:	4811      	ldr	r0, [pc, #68]	; (80031fc <hnet_notify+0x14c>)
 80031b6:	f014 f8ab 	bl	8017310 <puts>
        break;
 80031ba:	e000      	b.n	80031be <hnet_notify+0x10e>
      }

    default:
      {
        break;
 80031bc:	bf00      	nop
      }
    }
  }
}
 80031be:	bf00      	nop
 80031c0:	3718      	adds	r7, #24
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bdb0      	pop	{r4, r5, r7, pc}
 80031c6:	bf00      	nop
 80031c8:	0801ad70 	.word	0x0801ad70
 80031cc:	0801ad94 	.word	0x0801ad94
 80031d0:	0801adb4 	.word	0x0801adb4
 80031d4:	0801add0 	.word	0x0801add0
 80031d8:	0801adec 	.word	0x0801adec
 80031dc:	0801ae08 	.word	0x0801ae08
 80031e0:	0801ae24 	.word	0x0801ae24
 80031e4:	0801ae4c 	.word	0x0801ae4c
 80031e8:	0801ae70 	.word	0x0801ae70
 80031ec:	0801ae90 	.word	0x0801ae90
 80031f0:	0801aeac 	.word	0x0801aeac
 80031f4:	0801aed0 	.word	0x0801aed0
 80031f8:	0801aef0 	.word	0x0801aef0
 80031fc:	0801af14 	.word	0x0801af14

08003200 <Wifi_SPI_Config>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static WebServer_StatusTypeDef Wifi_SPI_Config(void)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	af00      	add	r7, sp, #0
  /* Set SPI instance */
  Wifi_SPIHandle.Instance                        = SPI2;
 8003204:	4b28      	ldr	r3, [pc, #160]	; (80032a8 <Wifi_SPI_Config+0xa8>)
 8003206:	4a29      	ldr	r2, [pc, #164]	; (80032ac <Wifi_SPI_Config+0xac>)
 8003208:	601a      	str	r2, [r3, #0]

  /* Set parameter to be configured */
  Wifi_SPIHandle.Init.Mode                       = SPI_MODE_MASTER;
 800320a:	4b27      	ldr	r3, [pc, #156]	; (80032a8 <Wifi_SPI_Config+0xa8>)
 800320c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003210:	605a      	str	r2, [r3, #4]
  Wifi_SPIHandle.Init.Direction                  = SPI_DIRECTION_2LINES;
 8003212:	4b25      	ldr	r3, [pc, #148]	; (80032a8 <Wifi_SPI_Config+0xa8>)
 8003214:	2200      	movs	r2, #0
 8003216:	609a      	str	r2, [r3, #8]
  Wifi_SPIHandle.Init.DataSize                   = SPI_DATASIZE_8BIT;
 8003218:	4b23      	ldr	r3, [pc, #140]	; (80032a8 <Wifi_SPI_Config+0xa8>)
 800321a:	2207      	movs	r2, #7
 800321c:	60da      	str	r2, [r3, #12]
  Wifi_SPIHandle.Init.CLKPolarity                = SPI_POLARITY_LOW;
 800321e:	4b22      	ldr	r3, [pc, #136]	; (80032a8 <Wifi_SPI_Config+0xa8>)
 8003220:	2200      	movs	r2, #0
 8003222:	611a      	str	r2, [r3, #16]
  Wifi_SPIHandle.Init.CLKPhase                   = SPI_PHASE_1EDGE;
 8003224:	4b20      	ldr	r3, [pc, #128]	; (80032a8 <Wifi_SPI_Config+0xa8>)
 8003226:	2200      	movs	r2, #0
 8003228:	615a      	str	r2, [r3, #20]
  Wifi_SPIHandle.Init.NSS                        = SPI_NSS_SOFT;
 800322a:	4b1f      	ldr	r3, [pc, #124]	; (80032a8 <Wifi_SPI_Config+0xa8>)
 800322c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003230:	619a      	str	r2, [r3, #24]
  Wifi_SPIHandle.Init.BaudRatePrescaler          = SPI_BAUDRATEPRESCALER_8;
 8003232:	4b1d      	ldr	r3, [pc, #116]	; (80032a8 <Wifi_SPI_Config+0xa8>)
 8003234:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003238:	61da      	str	r2, [r3, #28]
  Wifi_SPIHandle.Init.FirstBit                   = SPI_FIRSTBIT_MSB;
 800323a:	4b1b      	ldr	r3, [pc, #108]	; (80032a8 <Wifi_SPI_Config+0xa8>)
 800323c:	2200      	movs	r2, #0
 800323e:	621a      	str	r2, [r3, #32]
  Wifi_SPIHandle.Init.TIMode                     = SPI_TIMODE_DISABLE;
 8003240:	4b19      	ldr	r3, [pc, #100]	; (80032a8 <Wifi_SPI_Config+0xa8>)
 8003242:	2200      	movs	r2, #0
 8003244:	625a      	str	r2, [r3, #36]	; 0x24
  Wifi_SPIHandle.Init.CRCCalculation             = SPI_CRCCALCULATION_DISABLE;
 8003246:	4b18      	ldr	r3, [pc, #96]	; (80032a8 <Wifi_SPI_Config+0xa8>)
 8003248:	2200      	movs	r2, #0
 800324a:	629a      	str	r2, [r3, #40]	; 0x28
  Wifi_SPIHandle.Init.CRCPolynomial              = 0x7;
 800324c:	4b16      	ldr	r3, [pc, #88]	; (80032a8 <Wifi_SPI_Config+0xa8>)
 800324e:	2207      	movs	r2, #7
 8003250:	62da      	str	r2, [r3, #44]	; 0x2c
  Wifi_SPIHandle.Init.NSSPMode                   = SPI_NSS_PULSE_DISABLE;
 8003252:	4b15      	ldr	r3, [pc, #84]	; (80032a8 <Wifi_SPI_Config+0xa8>)
 8003254:	2200      	movs	r2, #0
 8003256:	635a      	str	r2, [r3, #52]	; 0x34
  Wifi_SPIHandle.Init.NSSPolarity                = SPI_NSS_POLARITY_LOW;
 8003258:	4b13      	ldr	r3, [pc, #76]	; (80032a8 <Wifi_SPI_Config+0xa8>)
 800325a:	2200      	movs	r2, #0
 800325c:	639a      	str	r2, [r3, #56]	; 0x38
  Wifi_SPIHandle.Init.FifoThreshold              = SPI_FIFO_THRESHOLD_01DATA;
 800325e:	4b12      	ldr	r3, [pc, #72]	; (80032a8 <Wifi_SPI_Config+0xa8>)
 8003260:	2200      	movs	r2, #0
 8003262:	63da      	str	r2, [r3, #60]	; 0x3c
  Wifi_SPIHandle.Init.MasterSSIdleness           = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8003264:	4b10      	ldr	r3, [pc, #64]	; (80032a8 <Wifi_SPI_Config+0xa8>)
 8003266:	2200      	movs	r2, #0
 8003268:	649a      	str	r2, [r3, #72]	; 0x48
  Wifi_SPIHandle.Init.MasterInterDataIdleness    = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800326a:	4b0f      	ldr	r3, [pc, #60]	; (80032a8 <Wifi_SPI_Config+0xa8>)
 800326c:	2200      	movs	r2, #0
 800326e:	64da      	str	r2, [r3, #76]	; 0x4c
  Wifi_SPIHandle.Init.MasterReceiverAutoSusp     = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8003270:	4b0d      	ldr	r3, [pc, #52]	; (80032a8 <Wifi_SPI_Config+0xa8>)
 8003272:	2200      	movs	r2, #0
 8003274:	651a      	str	r2, [r3, #80]	; 0x50
  Wifi_SPIHandle.Init.MasterKeepIOState          = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8003276:	4b0c      	ldr	r3, [pc, #48]	; (80032a8 <Wifi_SPI_Config+0xa8>)
 8003278:	2200      	movs	r2, #0
 800327a:	655a      	str	r2, [r3, #84]	; 0x54
  Wifi_SPIHandle.Init.IOSwap                     = SPI_IO_SWAP_DISABLE;
 800327c:	4b0a      	ldr	r3, [pc, #40]	; (80032a8 <Wifi_SPI_Config+0xa8>)
 800327e:	2200      	movs	r2, #0
 8003280:	659a      	str	r2, [r3, #88]	; 0x58
  Wifi_SPIHandle.Init.ReadyMasterManagement      = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8003282:	4b09      	ldr	r3, [pc, #36]	; (80032a8 <Wifi_SPI_Config+0xa8>)
 8003284:	2200      	movs	r2, #0
 8003286:	65da      	str	r2, [r3, #92]	; 0x5c
  Wifi_SPIHandle.Init.ReadyPolarity              = SPI_RDY_POLARITY_HIGH;
 8003288:	4b07      	ldr	r3, [pc, #28]	; (80032a8 <Wifi_SPI_Config+0xa8>)
 800328a:	2200      	movs	r2, #0
 800328c:	661a      	str	r2, [r3, #96]	; 0x60

  /* SPI initialization */
  if (HAL_SPI_Init(&Wifi_SPIHandle) != HAL_OK)
 800328e:	4806      	ldr	r0, [pc, #24]	; (80032a8 <Wifi_SPI_Config+0xa8>)
 8003290:	f00d fb9e 	bl	80109d0 <HAL_SPI_Init>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d002      	beq.n	80032a0 <Wifi_SPI_Config+0xa0>
  {
    return PERIPH_ERROR;
 800329a:	f06f 0304 	mvn.w	r3, #4
 800329e:	e000      	b.n	80032a2 <Wifi_SPI_Config+0xa2>
  }

  return WEBSERVER_OK;
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	20000c8c 	.word	0x20000c8c
 80032ac:	40003800 	.word	0x40003800

080032b0 <Wifi_IO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void Wifi_IO_Init(void)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b08c      	sub	sp, #48	; 0x30
 80032b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032b6:	f107 031c 	add.w	r3, r7, #28
 80032ba:	2200      	movs	r2, #0
 80032bc:	601a      	str	r2, [r3, #0]
 80032be:	605a      	str	r2, [r3, #4]
 80032c0:	609a      	str	r2, [r3, #8]
 80032c2:	60da      	str	r2, [r3, #12]
 80032c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80032c6:	4b63      	ldr	r3, [pc, #396]	; (8003454 <Wifi_IO_Init+0x1a4>)
 80032c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032cc:	4a61      	ldr	r2, [pc, #388]	; (8003454 <Wifi_IO_Init+0x1a4>)
 80032ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032d2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80032d6:	4b5f      	ldr	r3, [pc, #380]	; (8003454 <Wifi_IO_Init+0x1a4>)
 80032d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032e0:	61bb      	str	r3, [r7, #24]
 80032e2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80032e4:	4b5b      	ldr	r3, [pc, #364]	; (8003454 <Wifi_IO_Init+0x1a4>)
 80032e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032ea:	4a5a      	ldr	r2, [pc, #360]	; (8003454 <Wifi_IO_Init+0x1a4>)
 80032ec:	f043 0304 	orr.w	r3, r3, #4
 80032f0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80032f4:	4b57      	ldr	r3, [pc, #348]	; (8003454 <Wifi_IO_Init+0x1a4>)
 80032f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032fa:	f003 0304 	and.w	r3, r3, #4
 80032fe:	617b      	str	r3, [r7, #20]
 8003300:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003302:	4b54      	ldr	r3, [pc, #336]	; (8003454 <Wifi_IO_Init+0x1a4>)
 8003304:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003308:	4a52      	ldr	r2, [pc, #328]	; (8003454 <Wifi_IO_Init+0x1a4>)
 800330a:	f043 0308 	orr.w	r3, r3, #8
 800330e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003312:	4b50      	ldr	r3, [pc, #320]	; (8003454 <Wifi_IO_Init+0x1a4>)
 8003314:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003318:	f003 0308 	and.w	r3, r3, #8
 800331c:	613b      	str	r3, [r7, #16]
 800331e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003320:	4b4c      	ldr	r3, [pc, #304]	; (8003454 <Wifi_IO_Init+0x1a4>)
 8003322:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003326:	4a4b      	ldr	r2, [pc, #300]	; (8003454 <Wifi_IO_Init+0x1a4>)
 8003328:	f043 0301 	orr.w	r3, r3, #1
 800332c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003330:	4b48      	ldr	r3, [pc, #288]	; (8003454 <Wifi_IO_Init+0x1a4>)
 8003332:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003336:	f003 0301 	and.w	r3, r3, #1
 800333a:	60fb      	str	r3, [r7, #12]
 800333c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800333e:	4b45      	ldr	r3, [pc, #276]	; (8003454 <Wifi_IO_Init+0x1a4>)
 8003340:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003344:	4a43      	ldr	r2, [pc, #268]	; (8003454 <Wifi_IO_Init+0x1a4>)
 8003346:	f043 0302 	orr.w	r3, r3, #2
 800334a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800334e:	4b41      	ldr	r3, [pc, #260]	; (8003454 <Wifi_IO_Init+0x1a4>)
 8003350:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003354:	f003 0302 	and.w	r3, r3, #2
 8003358:	60bb      	str	r3, [r7, #8]
 800335a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800335c:	4b3d      	ldr	r3, [pc, #244]	; (8003454 <Wifi_IO_Init+0x1a4>)
 800335e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003362:	4a3c      	ldr	r2, [pc, #240]	; (8003454 <Wifi_IO_Init+0x1a4>)
 8003364:	f043 0320 	orr.w	r3, r3, #32
 8003368:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800336c:	4b39      	ldr	r3, [pc, #228]	; (8003454 <Wifi_IO_Init+0x1a4>)
 800336e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003372:	f003 0320 	and.w	r3, r3, #32
 8003376:	607b      	str	r3, [r7, #4]
 8003378:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MXCHIP_RESET_GPIO_Port, MXCHIP_RESET_Pin, GPIO_PIN_RESET);
 800337a:	2200      	movs	r2, #0
 800337c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003380:	4835      	ldr	r0, [pc, #212]	; (8003458 <Wifi_IO_Init+0x1a8>)
 8003382:	f007 fe13 	bl	800afac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8003386:	2200      	movs	r2, #0
 8003388:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800338c:	4833      	ldr	r0, [pc, #204]	; (800345c <Wifi_IO_Init+0x1ac>)
 800338e:	f007 fe0d 	bl	800afac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MXCHIP_NSS_GPIO_Port, MXCHIP_NSS_Pin, GPIO_PIN_SET);
 8003392:	2201      	movs	r2, #1
 8003394:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003398:	4831      	ldr	r0, [pc, #196]	; (8003460 <Wifi_IO_Init+0x1b0>)
 800339a:	f007 fe07 	bl	800afac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : MXCHIP_FLOW_Pin */
  GPIO_InitStruct.Pin = MXCHIP_FLOW_Pin;
 800339e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80033a4:	4b2f      	ldr	r3, [pc, #188]	; (8003464 <Wifi_IO_Init+0x1b4>)
 80033a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033a8:	2300      	movs	r3, #0
 80033aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MXCHIP_FLOW_GPIO_Port, &GPIO_InitStruct);
 80033ac:	f107 031c 	add.w	r3, r7, #28
 80033b0:	4619      	mov	r1, r3
 80033b2:	482d      	ldr	r0, [pc, #180]	; (8003468 <Wifi_IO_Init+0x1b8>)
 80033b4:	f007 fb2c 	bl	800aa10 <HAL_GPIO_Init>

  /*Configure GPIO pin : MXCHIP_RESET_Pin */
  GPIO_InitStruct.Pin = MXCHIP_RESET_Pin;
 80033b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033be:	2301      	movs	r3, #1
 80033c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c2:	2300      	movs	r3, #0
 80033c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033c6:	2300      	movs	r3, #0
 80033c8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(MXCHIP_RESET_GPIO_Port, &GPIO_InitStruct);
 80033ca:	f107 031c 	add.w	r3, r7, #28
 80033ce:	4619      	mov	r1, r3
 80033d0:	4821      	ldr	r0, [pc, #132]	; (8003458 <Wifi_IO_Init+0x1a8>)
 80033d2:	f007 fb1d 	bl	800aa10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80033d6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80033da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033dc:	2301      	movs	r3, #1
 80033de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033e0:	2300      	movs	r3, #0
 80033e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033e4:	2300      	movs	r3, #0
 80033e6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80033e8:	f107 031c 	add.w	r3, r7, #28
 80033ec:	4619      	mov	r1, r3
 80033ee:	481b      	ldr	r0, [pc, #108]	; (800345c <Wifi_IO_Init+0x1ac>)
 80033f0:	f007 fb0e 	bl	800aa10 <HAL_GPIO_Init>

  /*Configure GPIO pin : MXCHIP_NSS_Pin */
  GPIO_InitStruct.Pin = MXCHIP_NSS_Pin;
 80033f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80033f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033fa:	2301      	movs	r3, #1
 80033fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033fe:	2300      	movs	r3, #0
 8003400:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003402:	2300      	movs	r3, #0
 8003404:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(MXCHIP_NSS_GPIO_Port, &GPIO_InitStruct);
 8003406:	f107 031c 	add.w	r3, r7, #28
 800340a:	4619      	mov	r1, r3
 800340c:	4814      	ldr	r0, [pc, #80]	; (8003460 <Wifi_IO_Init+0x1b0>)
 800340e:	f007 faff 	bl	800aa10 <HAL_GPIO_Init>

  /*Configure GPIO pin : MXCHIP_NOTIFY_Pin */
  GPIO_InitStruct.Pin = MXCHIP_NOTIFY_Pin;
 8003412:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003416:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003418:	4b12      	ldr	r3, [pc, #72]	; (8003464 <Wifi_IO_Init+0x1b4>)
 800341a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800341c:	2300      	movs	r3, #0
 800341e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MXCHIP_NOTIFY_GPIO_Port, &GPIO_InitStruct);
 8003420:	f107 031c 	add.w	r3, r7, #28
 8003424:	4619      	mov	r1, r3
 8003426:	480d      	ldr	r0, [pc, #52]	; (800345c <Wifi_IO_Init+0x1ac>)
 8003428:	f007 faf2 	bl	800aa10 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI14_IRQn, 5, 0);
 800342c:	2200      	movs	r2, #0
 800342e:	2105      	movs	r1, #5
 8003430:	2019      	movs	r0, #25
 8003432:	f007 fa36 	bl	800a8a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI14_IRQn);
 8003436:	2019      	movs	r0, #25
 8003438:	f007 fa4d 	bl	800a8d6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_IRQn, 5, 0);
 800343c:	2200      	movs	r2, #0
 800343e:	2105      	movs	r1, #5
 8003440:	201a      	movs	r0, #26
 8003442:	f007 fa2e 	bl	800a8a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_IRQn);
 8003446:	201a      	movs	r0, #26
 8003448:	f007 fa45 	bl	800a8d6 <HAL_NVIC_EnableIRQ>
}
 800344c:	bf00      	nop
 800344e:	3730      	adds	r7, #48	; 0x30
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}
 8003454:	46020c00 	.word	0x46020c00
 8003458:	42021400 	.word	0x42021400
 800345c:	42020c00 	.word	0x42020c00
 8003460:	42020400 	.word	0x42020400
 8003464:	10110000 	.word	0x10110000
 8003468:	42021800 	.word	0x42021800

0800346c <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief GPIO EXTI callback function
  * @param None
  * @retval None
  */
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0
 8003472:	4603      	mov	r3, r0
 8003474:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 8003476:	88fb      	ldrh	r3, [r7, #6]
 8003478:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800347c:	d007      	beq.n	800348e <HAL_GPIO_EXTI_Rising_Callback+0x22>
 800347e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003482:	d109      	bne.n	8003498 <HAL_GPIO_EXTI_Rising_Callback+0x2c>
  {
    /* MXCHIP flow pin notification */
    case MXCHIP_FLOW_Pin:
    {
      mxchip_WIFI_ISR(MXCHIP_FLOW_Pin);
 8003484:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003488:	f006 fda4 	bl	8009fd4 <mxchip_WIFI_ISR>
      break;
 800348c:	e005      	b.n	800349a <HAL_GPIO_EXTI_Rising_Callback+0x2e>
    }

    /* MXCHIP notify pin notification */
    case (MXCHIP_NOTIFY_Pin):
    {
      mxchip_WIFI_ISR(MXCHIP_NOTIFY_Pin);
 800348e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003492:	f006 fd9f 	bl	8009fd4 <mxchip_WIFI_ISR>
      break;
 8003496:	e000      	b.n	800349a <HAL_GPIO_EXTI_Rising_Callback+0x2e>
    }

  default:
    {
      break;
 8003498:	bf00      	nop
    }
  }
}
 800349a:	bf00      	nop
 800349c:	3708      	adds	r7, #8
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
	...

080034a4 <HAL_SPI_RxCpltCallback>:
  * @param hspi : pointer to a SPI_HandleTypeDef structure that contains the configuration information for SPI
  *                    module.
  * @retval None
  */
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b082      	sub	sp, #8
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  if (hspi == &Wifi_SPIHandle)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	4a05      	ldr	r2, [pc, #20]	; (80034c4 <HAL_SPI_RxCpltCallback+0x20>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d102      	bne.n	80034ba <HAL_SPI_RxCpltCallback+0x16>
  {
    HAL_SPI_TransferCallback(hspi);
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f006 fd6d 	bl	8009f94 <HAL_SPI_TransferCallback>
  }
}
 80034ba:	bf00      	nop
 80034bc:	3708      	adds	r7, #8
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	20000c8c 	.word	0x20000c8c

080034c8 <HAL_SPI_TxCpltCallback>:
  * @param hspi : pointer to a SPI_HandleTypeDef structure that contains the configuration information for SPI
  *                    module.
  * @retval None
  */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  if (hspi == &Wifi_SPIHandle)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	4a05      	ldr	r2, [pc, #20]	; (80034e8 <HAL_SPI_TxCpltCallback+0x20>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d102      	bne.n	80034de <HAL_SPI_TxCpltCallback+0x16>
  {
    HAL_SPI_TransferCallback(hspi);
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f006 fd5b 	bl	8009f94 <HAL_SPI_TransferCallback>
  }
}
 80034de:	bf00      	nop
 80034e0:	3708      	adds	r7, #8
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	20000c8c 	.word	0x20000c8c

080034ec <HAL_SPI_TxRxCpltCallback>:
  * @param hspi : pointer to a SPI_HandleTypeDef structure that contains the configuration information for SPI
  *                    module.
  * @retval None
  */
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  if (hspi == &Wifi_SPIHandle)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	4a05      	ldr	r2, [pc, #20]	; (800350c <HAL_SPI_TxRxCpltCallback+0x20>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d102      	bne.n	8003502 <HAL_SPI_TxRxCpltCallback+0x16>
  {
    HAL_SPI_TransferCallback(hspi);
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f006 fd49 	bl	8009f94 <HAL_SPI_TransferCallback>
  }
}
 8003502:	bf00      	nop
 8003504:	3708      	adds	r7, #8
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	20000c8c 	.word	0x20000c8c

08003510 <NetWifiGetDefaultStation>:
{
  return NET_TICK();
}

void NetWifiGetDefaultStation(net_wifi_credentials_t *WifiCreds, const ap_t net_wifi_registred_hotspot[])
{
 8003510:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003514:	b093      	sub	sp, #76	; 0x4c
 8003516:	af08      	add	r7, sp, #32
 8003518:	6178      	str	r0, [r7, #20]
 800351a:	6139      	str	r1, [r7, #16]
  int32_t ret;

  ret = net_wifi_scan(0, NET_WIFI_SCAN_PASSIVE, NULL);
 800351c:	2200      	movs	r2, #0
 800351e:	2100      	movs	r1, #0
 8003520:	2000      	movs	r0, #0
 8003522:	f00f fbab 	bl	8012c7c <net_wifi_scan>
 8003526:	6278      	str	r0, [r7, #36]	; 0x24

  if (ret == NET_OK)
 8003528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352a:	2b00      	cmp	r3, #0
 800352c:	d105      	bne.n	800353a <NetWifiGetDefaultStation+0x2a>
  {
    ret = net_wifi_get_scan_results(0, APs, MAX_SCAN_AP);
 800352e:	2264      	movs	r2, #100	; 0x64
 8003530:	4967      	ldr	r1, [pc, #412]	; (80036d0 <NetWifiGetDefaultStation+0x1c0>)
 8003532:	2000      	movs	r0, #0
 8003534:	f00f fc04 	bl	8012d40 <net_wifi_get_scan_results>
 8003538:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (ret > 0)
 800353a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353c:	2b00      	cmp	r3, #0
 800353e:	f340 80c1 	ble.w	80036c4 <NetWifiGetDefaultStation+0x1b4>
  {
    for (uint32_t i = 0; i < (uint32_t)ret; i++)
 8003542:	2300      	movs	r3, #0
 8003544:	623b      	str	r3, [r7, #32]
 8003546:	e0b8      	b.n	80036ba <NetWifiGetDefaultStation+0x1aa>
    {
      for (uint32_t j = 0; net_wifi_registred_hotspot[j].ssid != 0 ; j++)
 8003548:	2300      	movs	r3, #0
 800354a:	61fb      	str	r3, [r7, #28]
 800354c:	e0aa      	b.n	80036a4 <NetWifiGetDefaultStation+0x194>
      {
        if (strcmp((const char *)APs[i].ssid.value, net_wifi_registred_hotspot[j].ssid) == 0)
 800354e:	6a3b      	ldr	r3, [r7, #32]
 8003550:	2234      	movs	r2, #52	; 0x34
 8003552:	fb02 f303 	mul.w	r3, r2, r3
 8003556:	4a5e      	ldr	r2, [pc, #376]	; (80036d0 <NetWifiGetDefaultStation+0x1c0>)
 8003558:	4413      	add	r3, r2
 800355a:	1c58      	adds	r0, r3, #1
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	00db      	lsls	r3, r3, #3
 8003560:	693a      	ldr	r2, [r7, #16]
 8003562:	4413      	add	r3, r2
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4619      	mov	r1, r3
 8003568:	f7fc fe8e 	bl	8000288 <strcmp>
 800356c:	4603      	mov	r3, r0
 800356e:	2b00      	cmp	r3, #0
 8003570:	f040 8095 	bne.w	800369e <NetWifiGetDefaultStation+0x18e>
        {
          WifiCreds->ssid = net_wifi_registred_hotspot[j].ssid;
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	00db      	lsls	r3, r3, #3
 8003578:	693a      	ldr	r2, [r7, #16]
 800357a:	4413      	add	r3, r2
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	601a      	str	r2, [r3, #0]
          WifiCreds->psk = net_wifi_registred_hotspot[j].pwd;
 8003582:	69fb      	ldr	r3, [r7, #28]
 8003584:	00db      	lsls	r3, r3, #3
 8003586:	693a      	ldr	r2, [r7, #16]
 8003588:	4413      	add	r3, r2
 800358a:	685a      	ldr	r2, [r3, #4]
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	605a      	str	r2, [r3, #4]
          WifiCreds->security_mode = APs[i].security;
 8003590:	4a4f      	ldr	r2, [pc, #316]	; (80036d0 <NetWifiGetDefaultStation+0x1c0>)
 8003592:	6a3b      	ldr	r3, [r7, #32]
 8003594:	2134      	movs	r1, #52	; 0x34
 8003596:	fb01 f303 	mul.w	r3, r1, r3
 800359a:	4413      	add	r3, r2
 800359c:	3328      	adds	r3, #40	; 0x28
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	461a      	mov	r2, r3
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	609a      	str	r2, [r3, #8]
          printf("\r\n");
 80035a6:	484b      	ldr	r0, [pc, #300]	; (80036d4 <NetWifiGetDefaultStation+0x1c4>)
 80035a8:	f013 feb2 	bl	8017310 <puts>
          printf("\r\n");
 80035ac:	4849      	ldr	r0, [pc, #292]	; (80036d4 <NetWifiGetDefaultStation+0x1c4>)
 80035ae:	f013 feaf 	bl	8017310 <puts>
          printf("Selected Access Point\t%32s ch %2d rss %d Security %10s country %4s bssid %02x.%02x.%02x.%02x.%02x.%02x\r\n",
                 APs[i].ssid.value, APs[i].channel, APs[i].rssi, net_wifi_security_to_string(APs[i].security), APs[i].country,
 80035b2:	6a3b      	ldr	r3, [r7, #32]
 80035b4:	2234      	movs	r2, #52	; 0x34
 80035b6:	fb02 f303 	mul.w	r3, r2, r3
 80035ba:	4a45      	ldr	r2, [pc, #276]	; (80036d0 <NetWifiGetDefaultStation+0x1c0>)
 80035bc:	4413      	add	r3, r2
 80035be:	1c5c      	adds	r4, r3, #1
 80035c0:	4a43      	ldr	r2, [pc, #268]	; (80036d0 <NetWifiGetDefaultStation+0x1c0>)
 80035c2:	6a3b      	ldr	r3, [r7, #32]
 80035c4:	2134      	movs	r1, #52	; 0x34
 80035c6:	fb01 f303 	mul.w	r3, r1, r3
 80035ca:	4413      	add	r3, r2
 80035cc:	332c      	adds	r3, #44	; 0x2c
 80035ce:	781b      	ldrb	r3, [r3, #0]
          printf("Selected Access Point\t%32s ch %2d rss %d Security %10s country %4s bssid %02x.%02x.%02x.%02x.%02x.%02x\r\n",
 80035d0:	4698      	mov	r8, r3
                 APs[i].ssid.value, APs[i].channel, APs[i].rssi, net_wifi_security_to_string(APs[i].security), APs[i].country,
 80035d2:	4a3f      	ldr	r2, [pc, #252]	; (80036d0 <NetWifiGetDefaultStation+0x1c0>)
 80035d4:	6a3b      	ldr	r3, [r7, #32]
 80035d6:	2134      	movs	r1, #52	; 0x34
 80035d8:	fb01 f303 	mul.w	r3, r1, r3
 80035dc:	4413      	add	r3, r2
 80035de:	3331      	adds	r3, #49	; 0x31
 80035e0:	f993 3000 	ldrsb.w	r3, [r3]
          printf("Selected Access Point\t%32s ch %2d rss %d Security %10s country %4s bssid %02x.%02x.%02x.%02x.%02x.%02x\r\n",
 80035e4:	4699      	mov	r9, r3
 80035e6:	4a3a      	ldr	r2, [pc, #232]	; (80036d0 <NetWifiGetDefaultStation+0x1c0>)
 80035e8:	6a3b      	ldr	r3, [r7, #32]
 80035ea:	2134      	movs	r1, #52	; 0x34
 80035ec:	fb01 f303 	mul.w	r3, r1, r3
 80035f0:	4413      	add	r3, r2
 80035f2:	3328      	adds	r3, #40	; 0x28
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4618      	mov	r0, r3
 80035f8:	f00f fa68 	bl	8012acc <net_wifi_security_to_string>
 80035fc:	4601      	mov	r1, r0
                 APs[i].ssid.value, APs[i].channel, APs[i].rssi, net_wifi_security_to_string(APs[i].security), APs[i].country,
 80035fe:	6a3b      	ldr	r3, [r7, #32]
 8003600:	2234      	movs	r2, #52	; 0x34
 8003602:	fb02 f303 	mul.w	r3, r2, r3
 8003606:	3328      	adds	r3, #40	; 0x28
 8003608:	4a31      	ldr	r2, [pc, #196]	; (80036d0 <NetWifiGetDefaultStation+0x1c0>)
 800360a:	4413      	add	r3, r2
 800360c:	3305      	adds	r3, #5
                 APs[i].bssid[0], APs[i].bssid[1], APs[i].bssid[2], APs[i].bssid[3], APs[i].bssid[4], APs[i].bssid[5]);
 800360e:	4830      	ldr	r0, [pc, #192]	; (80036d0 <NetWifiGetDefaultStation+0x1c0>)
 8003610:	6a3a      	ldr	r2, [r7, #32]
 8003612:	2534      	movs	r5, #52	; 0x34
 8003614:	fb05 f202 	mul.w	r2, r5, r2
 8003618:	4402      	add	r2, r0
 800361a:	3221      	adds	r2, #33	; 0x21
 800361c:	7812      	ldrb	r2, [r2, #0]
          printf("Selected Access Point\t%32s ch %2d rss %d Security %10s country %4s bssid %02x.%02x.%02x.%02x.%02x.%02x\r\n",
 800361e:	4616      	mov	r6, r2
                 APs[i].bssid[0], APs[i].bssid[1], APs[i].bssid[2], APs[i].bssid[3], APs[i].bssid[4], APs[i].bssid[5]);
 8003620:	482b      	ldr	r0, [pc, #172]	; (80036d0 <NetWifiGetDefaultStation+0x1c0>)
 8003622:	6a3a      	ldr	r2, [r7, #32]
 8003624:	2534      	movs	r5, #52	; 0x34
 8003626:	fb05 f202 	mul.w	r2, r5, r2
 800362a:	4402      	add	r2, r0
 800362c:	3222      	adds	r2, #34	; 0x22
 800362e:	7812      	ldrb	r2, [r2, #0]
          printf("Selected Access Point\t%32s ch %2d rss %d Security %10s country %4s bssid %02x.%02x.%02x.%02x.%02x.%02x\r\n",
 8003630:	60fa      	str	r2, [r7, #12]
                 APs[i].bssid[0], APs[i].bssid[1], APs[i].bssid[2], APs[i].bssid[3], APs[i].bssid[4], APs[i].bssid[5]);
 8003632:	4827      	ldr	r0, [pc, #156]	; (80036d0 <NetWifiGetDefaultStation+0x1c0>)
 8003634:	6a3a      	ldr	r2, [r7, #32]
 8003636:	2534      	movs	r5, #52	; 0x34
 8003638:	fb05 f202 	mul.w	r2, r5, r2
 800363c:	4402      	add	r2, r0
 800363e:	3223      	adds	r2, #35	; 0x23
 8003640:	7812      	ldrb	r2, [r2, #0]
          printf("Selected Access Point\t%32s ch %2d rss %d Security %10s country %4s bssid %02x.%02x.%02x.%02x.%02x.%02x\r\n",
 8003642:	60ba      	str	r2, [r7, #8]
                 APs[i].bssid[0], APs[i].bssid[1], APs[i].bssid[2], APs[i].bssid[3], APs[i].bssid[4], APs[i].bssid[5]);
 8003644:	4822      	ldr	r0, [pc, #136]	; (80036d0 <NetWifiGetDefaultStation+0x1c0>)
 8003646:	6a3a      	ldr	r2, [r7, #32]
 8003648:	2534      	movs	r5, #52	; 0x34
 800364a:	fb05 f202 	mul.w	r2, r5, r2
 800364e:	4402      	add	r2, r0
 8003650:	3224      	adds	r2, #36	; 0x24
 8003652:	7812      	ldrb	r2, [r2, #0]
          printf("Selected Access Point\t%32s ch %2d rss %d Security %10s country %4s bssid %02x.%02x.%02x.%02x.%02x.%02x\r\n",
 8003654:	607a      	str	r2, [r7, #4]
                 APs[i].bssid[0], APs[i].bssid[1], APs[i].bssid[2], APs[i].bssid[3], APs[i].bssid[4], APs[i].bssid[5]);
 8003656:	481e      	ldr	r0, [pc, #120]	; (80036d0 <NetWifiGetDefaultStation+0x1c0>)
 8003658:	6a3a      	ldr	r2, [r7, #32]
 800365a:	2534      	movs	r5, #52	; 0x34
 800365c:	fb05 f202 	mul.w	r2, r5, r2
 8003660:	4402      	add	r2, r0
 8003662:	3225      	adds	r2, #37	; 0x25
 8003664:	7812      	ldrb	r2, [r2, #0]
          printf("Selected Access Point\t%32s ch %2d rss %d Security %10s country %4s bssid %02x.%02x.%02x.%02x.%02x.%02x\r\n",
 8003666:	603a      	str	r2, [r7, #0]
                 APs[i].bssid[0], APs[i].bssid[1], APs[i].bssid[2], APs[i].bssid[3], APs[i].bssid[4], APs[i].bssid[5]);
 8003668:	4819      	ldr	r0, [pc, #100]	; (80036d0 <NetWifiGetDefaultStation+0x1c0>)
 800366a:	6a3a      	ldr	r2, [r7, #32]
 800366c:	2534      	movs	r5, #52	; 0x34
 800366e:	fb05 f202 	mul.w	r2, r5, r2
 8003672:	4402      	add	r2, r0
 8003674:	3226      	adds	r2, #38	; 0x26
 8003676:	7812      	ldrb	r2, [r2, #0]
          printf("Selected Access Point\t%32s ch %2d rss %d Security %10s country %4s bssid %02x.%02x.%02x.%02x.%02x.%02x\r\n",
 8003678:	9207      	str	r2, [sp, #28]
 800367a:	6838      	ldr	r0, [r7, #0]
 800367c:	9006      	str	r0, [sp, #24]
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	9005      	str	r0, [sp, #20]
 8003682:	68b8      	ldr	r0, [r7, #8]
 8003684:	9004      	str	r0, [sp, #16]
 8003686:	68fa      	ldr	r2, [r7, #12]
 8003688:	9203      	str	r2, [sp, #12]
 800368a:	9602      	str	r6, [sp, #8]
 800368c:	9301      	str	r3, [sp, #4]
 800368e:	9100      	str	r1, [sp, #0]
 8003690:	464b      	mov	r3, r9
 8003692:	4642      	mov	r2, r8
 8003694:	4621      	mov	r1, r4
 8003696:	4810      	ldr	r0, [pc, #64]	; (80036d8 <NetWifiGetDefaultStation+0x1c8>)
 8003698:	f013 fdcc 	bl	8017234 <iprintf>
          return;
 800369c:	e013      	b.n	80036c6 <NetWifiGetDefaultStation+0x1b6>
      for (uint32_t j = 0; net_wifi_registred_hotspot[j].ssid != 0 ; j++)
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	3301      	adds	r3, #1
 80036a2:	61fb      	str	r3, [r7, #28]
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	00db      	lsls	r3, r3, #3
 80036a8:	693a      	ldr	r2, [r7, #16]
 80036aa:	4413      	add	r3, r2
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	f47f af4d 	bne.w	800354e <NetWifiGetDefaultStation+0x3e>
    for (uint32_t i = 0; i < (uint32_t)ret; i++)
 80036b4:	6a3b      	ldr	r3, [r7, #32]
 80036b6:	3301      	adds	r3, #1
 80036b8:	623b      	str	r3, [r7, #32]
 80036ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036bc:	6a3a      	ldr	r2, [r7, #32]
 80036be:	429a      	cmp	r2, r3
 80036c0:	f4ff af42 	bcc.w	8003548 <NetWifiGetDefaultStation+0x38>
        }
      }
    }
  }
  return;
 80036c4:	bf00      	nop
}
 80036c6:	372c      	adds	r7, #44	; 0x2c
 80036c8:	46bd      	mov	sp, r7
 80036ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80036ce:	bf00      	nop
 80036d0:	20000d8c 	.word	0x20000d8c
 80036d4:	0801af58 	.word	0x0801af58
 80036d8:	0801af5c 	.word	0x0801af5c

080036dc <scan_cmd>:

int32_t scan_cmd(int32_t argc, char **argv)
{
 80036dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036e0:	b094      	sub	sp, #80	; 0x50
 80036e2:	af0a      	add	r7, sp, #40	; 0x28
 80036e4:	61f8      	str	r0, [r7, #28]
 80036e6:	61b9      	str	r1, [r7, #24]
  int32_t ret;
  ((void)argc);
  ((void)argv);

  ret = net_wifi_scan(0, NET_WIFI_SCAN_PASSIVE, NULL);
 80036e8:	2200      	movs	r2, #0
 80036ea:	2100      	movs	r1, #0
 80036ec:	2000      	movs	r0, #0
 80036ee:	f00f fac5 	bl	8012c7c <net_wifi_scan>
 80036f2:	6278      	str	r0, [r7, #36]	; 0x24

  if (ret == NET_OK)
 80036f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d105      	bne.n	8003706 <scan_cmd+0x2a>
  {
    ret = net_wifi_get_scan_results(0, APs, MAX_SCAN_AP);
 80036fa:	2264      	movs	r2, #100	; 0x64
 80036fc:	4950      	ldr	r1, [pc, #320]	; (8003840 <scan_cmd+0x164>)
 80036fe:	2000      	movs	r0, #0
 8003700:	f00f fb1e 	bl	8012d40 <net_wifi_get_scan_results>
 8003704:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (ret > 0)
 8003706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003708:	2b00      	cmp	r3, #0
 800370a:	f340 8093 	ble.w	8003834 <scan_cmd+0x158>
  {
    printf("\r\n");
 800370e:	484d      	ldr	r0, [pc, #308]	; (8003844 <scan_cmd+0x168>)
 8003710:	f013 fdfe 	bl	8017310 <puts>
    printf("*** Start wifi scan \r\n");
 8003714:	484c      	ldr	r0, [pc, #304]	; (8003848 <scan_cmd+0x16c>)
 8003716:	f013 fdfb 	bl	8017310 <puts>
    printf("\r\n");
 800371a:	484a      	ldr	r0, [pc, #296]	; (8003844 <scan_cmd+0x168>)
 800371c:	f013 fdf8 	bl	8017310 <puts>
    for (int i = 0; i < ret; i++)
 8003720:	2300      	movs	r3, #0
 8003722:	623b      	str	r3, [r7, #32]
 8003724:	e079      	b.n	800381a <scan_cmd+0x13e>
    {
      printf("\t%d\t%32s ch %2d rss %d Security %10s country %4s bssid %02x.%02x.%02x.%02x.%02x.%02x\r\n",
             i, APs[i].ssid.value, APs[i].channel, APs[i].rssi, net_wifi_security_to_string(APs[i].security), APs[i].country,
 8003726:	6a3b      	ldr	r3, [r7, #32]
 8003728:	2234      	movs	r2, #52	; 0x34
 800372a:	fb02 f303 	mul.w	r3, r2, r3
 800372e:	4a44      	ldr	r2, [pc, #272]	; (8003840 <scan_cmd+0x164>)
 8003730:	4413      	add	r3, r2
 8003732:	1c5c      	adds	r4, r3, #1
 8003734:	4a42      	ldr	r2, [pc, #264]	; (8003840 <scan_cmd+0x164>)
 8003736:	6a3b      	ldr	r3, [r7, #32]
 8003738:	2134      	movs	r1, #52	; 0x34
 800373a:	fb01 f303 	mul.w	r3, r1, r3
 800373e:	4413      	add	r3, r2
 8003740:	332c      	adds	r3, #44	; 0x2c
 8003742:	781b      	ldrb	r3, [r3, #0]
      printf("\t%d\t%32s ch %2d rss %d Security %10s country %4s bssid %02x.%02x.%02x.%02x.%02x.%02x\r\n",
 8003744:	4698      	mov	r8, r3
             i, APs[i].ssid.value, APs[i].channel, APs[i].rssi, net_wifi_security_to_string(APs[i].security), APs[i].country,
 8003746:	4a3e      	ldr	r2, [pc, #248]	; (8003840 <scan_cmd+0x164>)
 8003748:	6a3b      	ldr	r3, [r7, #32]
 800374a:	2134      	movs	r1, #52	; 0x34
 800374c:	fb01 f303 	mul.w	r3, r1, r3
 8003750:	4413      	add	r3, r2
 8003752:	3331      	adds	r3, #49	; 0x31
 8003754:	f993 3000 	ldrsb.w	r3, [r3]
      printf("\t%d\t%32s ch %2d rss %d Security %10s country %4s bssid %02x.%02x.%02x.%02x.%02x.%02x\r\n",
 8003758:	461e      	mov	r6, r3
 800375a:	4a39      	ldr	r2, [pc, #228]	; (8003840 <scan_cmd+0x164>)
 800375c:	6a3b      	ldr	r3, [r7, #32]
 800375e:	2134      	movs	r1, #52	; 0x34
 8003760:	fb01 f303 	mul.w	r3, r1, r3
 8003764:	4413      	add	r3, r2
 8003766:	3328      	adds	r3, #40	; 0x28
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4618      	mov	r0, r3
 800376c:	f00f f9ae 	bl	8012acc <net_wifi_security_to_string>
 8003770:	4601      	mov	r1, r0
             i, APs[i].ssid.value, APs[i].channel, APs[i].rssi, net_wifi_security_to_string(APs[i].security), APs[i].country,
 8003772:	6a3b      	ldr	r3, [r7, #32]
 8003774:	2234      	movs	r2, #52	; 0x34
 8003776:	fb02 f303 	mul.w	r3, r2, r3
 800377a:	3328      	adds	r3, #40	; 0x28
 800377c:	4a30      	ldr	r2, [pc, #192]	; (8003840 <scan_cmd+0x164>)
 800377e:	4413      	add	r3, r2
 8003780:	3305      	adds	r3, #5
             APs[i].bssid[0], APs[i].bssid[1], APs[i].bssid[2], APs[i].bssid[3], APs[i].bssid[4], APs[i].bssid[5]);
 8003782:	482f      	ldr	r0, [pc, #188]	; (8003840 <scan_cmd+0x164>)
 8003784:	6a3a      	ldr	r2, [r7, #32]
 8003786:	2534      	movs	r5, #52	; 0x34
 8003788:	fb05 f202 	mul.w	r2, r5, r2
 800378c:	4402      	add	r2, r0
 800378e:	3221      	adds	r2, #33	; 0x21
 8003790:	7812      	ldrb	r2, [r2, #0]
      printf("\t%d\t%32s ch %2d rss %d Security %10s country %4s bssid %02x.%02x.%02x.%02x.%02x.%02x\r\n",
 8003792:	617a      	str	r2, [r7, #20]
             APs[i].bssid[0], APs[i].bssid[1], APs[i].bssid[2], APs[i].bssid[3], APs[i].bssid[4], APs[i].bssid[5]);
 8003794:	482a      	ldr	r0, [pc, #168]	; (8003840 <scan_cmd+0x164>)
 8003796:	6a3a      	ldr	r2, [r7, #32]
 8003798:	2534      	movs	r5, #52	; 0x34
 800379a:	fb05 f202 	mul.w	r2, r5, r2
 800379e:	4402      	add	r2, r0
 80037a0:	3222      	adds	r2, #34	; 0x22
 80037a2:	7812      	ldrb	r2, [r2, #0]
      printf("\t%d\t%32s ch %2d rss %d Security %10s country %4s bssid %02x.%02x.%02x.%02x.%02x.%02x\r\n",
 80037a4:	613a      	str	r2, [r7, #16]
             APs[i].bssid[0], APs[i].bssid[1], APs[i].bssid[2], APs[i].bssid[3], APs[i].bssid[4], APs[i].bssid[5]);
 80037a6:	4826      	ldr	r0, [pc, #152]	; (8003840 <scan_cmd+0x164>)
 80037a8:	6a3a      	ldr	r2, [r7, #32]
 80037aa:	2534      	movs	r5, #52	; 0x34
 80037ac:	fb05 f202 	mul.w	r2, r5, r2
 80037b0:	4402      	add	r2, r0
 80037b2:	3223      	adds	r2, #35	; 0x23
 80037b4:	7812      	ldrb	r2, [r2, #0]
      printf("\t%d\t%32s ch %2d rss %d Security %10s country %4s bssid %02x.%02x.%02x.%02x.%02x.%02x\r\n",
 80037b6:	60fa      	str	r2, [r7, #12]
             APs[i].bssid[0], APs[i].bssid[1], APs[i].bssid[2], APs[i].bssid[3], APs[i].bssid[4], APs[i].bssid[5]);
 80037b8:	4821      	ldr	r0, [pc, #132]	; (8003840 <scan_cmd+0x164>)
 80037ba:	6a3a      	ldr	r2, [r7, #32]
 80037bc:	2534      	movs	r5, #52	; 0x34
 80037be:	fb05 f202 	mul.w	r2, r5, r2
 80037c2:	4402      	add	r2, r0
 80037c4:	3224      	adds	r2, #36	; 0x24
 80037c6:	7812      	ldrb	r2, [r2, #0]
      printf("\t%d\t%32s ch %2d rss %d Security %10s country %4s bssid %02x.%02x.%02x.%02x.%02x.%02x\r\n",
 80037c8:	60ba      	str	r2, [r7, #8]
             APs[i].bssid[0], APs[i].bssid[1], APs[i].bssid[2], APs[i].bssid[3], APs[i].bssid[4], APs[i].bssid[5]);
 80037ca:	481d      	ldr	r0, [pc, #116]	; (8003840 <scan_cmd+0x164>)
 80037cc:	6a3a      	ldr	r2, [r7, #32]
 80037ce:	2534      	movs	r5, #52	; 0x34
 80037d0:	fb05 f202 	mul.w	r2, r5, r2
 80037d4:	4402      	add	r2, r0
 80037d6:	3225      	adds	r2, #37	; 0x25
 80037d8:	7812      	ldrb	r2, [r2, #0]
      printf("\t%d\t%32s ch %2d rss %d Security %10s country %4s bssid %02x.%02x.%02x.%02x.%02x.%02x\r\n",
 80037da:	607a      	str	r2, [r7, #4]
             APs[i].bssid[0], APs[i].bssid[1], APs[i].bssid[2], APs[i].bssid[3], APs[i].bssid[4], APs[i].bssid[5]);
 80037dc:	4818      	ldr	r0, [pc, #96]	; (8003840 <scan_cmd+0x164>)
 80037de:	6a3a      	ldr	r2, [r7, #32]
 80037e0:	2534      	movs	r5, #52	; 0x34
 80037e2:	fb05 f202 	mul.w	r2, r5, r2
 80037e6:	4402      	add	r2, r0
 80037e8:	3226      	adds	r2, #38	; 0x26
 80037ea:	7812      	ldrb	r2, [r2, #0]
      printf("\t%d\t%32s ch %2d rss %d Security %10s country %4s bssid %02x.%02x.%02x.%02x.%02x.%02x\r\n",
 80037ec:	9208      	str	r2, [sp, #32]
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	9007      	str	r0, [sp, #28]
 80037f2:	68b8      	ldr	r0, [r7, #8]
 80037f4:	9006      	str	r0, [sp, #24]
 80037f6:	68f8      	ldr	r0, [r7, #12]
 80037f8:	9005      	str	r0, [sp, #20]
 80037fa:	6938      	ldr	r0, [r7, #16]
 80037fc:	9004      	str	r0, [sp, #16]
 80037fe:	697a      	ldr	r2, [r7, #20]
 8003800:	9203      	str	r2, [sp, #12]
 8003802:	9302      	str	r3, [sp, #8]
 8003804:	9101      	str	r1, [sp, #4]
 8003806:	9600      	str	r6, [sp, #0]
 8003808:	4643      	mov	r3, r8
 800380a:	4622      	mov	r2, r4
 800380c:	6a39      	ldr	r1, [r7, #32]
 800380e:	480f      	ldr	r0, [pc, #60]	; (800384c <scan_cmd+0x170>)
 8003810:	f013 fd10 	bl	8017234 <iprintf>
    for (int i = 0; i < ret; i++)
 8003814:	6a3b      	ldr	r3, [r7, #32]
 8003816:	3301      	adds	r3, #1
 8003818:	623b      	str	r3, [r7, #32]
 800381a:	6a3a      	ldr	r2, [r7, #32]
 800381c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381e:	429a      	cmp	r2, r3
 8003820:	db81      	blt.n	8003726 <scan_cmd+0x4a>
    }
    printf("\r\n");
 8003822:	4808      	ldr	r0, [pc, #32]	; (8003844 <scan_cmd+0x168>)
 8003824:	f013 fd74 	bl	8017310 <puts>
    printf("*** End of wifi scan \r\n");
 8003828:	4809      	ldr	r0, [pc, #36]	; (8003850 <scan_cmd+0x174>)
 800382a:	f013 fd71 	bl	8017310 <puts>
    printf("\r\n");
 800382e:	4805      	ldr	r0, [pc, #20]	; (8003844 <scan_cmd+0x168>)
 8003830:	f013 fd6e 	bl	8017310 <puts>
  }

  return 0;
 8003834:	2300      	movs	r3, #0
}
 8003836:	4618      	mov	r0, r3
 8003838:	3728      	adds	r7, #40	; 0x28
 800383a:	46bd      	mov	sp, r7
 800383c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003840:	20000d8c 	.word	0x20000d8c
 8003844:	0801af58 	.word	0x0801af58
 8003848:	0801afc8 	.word	0x0801afc8
 800384c:	0801afe0 	.word	0x0801afe0
 8003850:	0801b038 	.word	0x0801b038

08003854 <NetInterfaceOn>:

net_if_handle_t *NetInterfaceOn(net_if_driver_init_func registred_driver, net_if_notify_func hnet_notify)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b086      	sub	sp, #24
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
  net_if_handle_t *netif;
  net_event_handler_t *net_handler;
  int32_t ret = NET_ERROR_PARAMETER;
 800385e:	f06f 0303 	mvn.w	r3, #3
 8003862:	617b      	str	r3, [r7, #20]

  netif = NET_MALLOC(sizeof(net_if_handle_t));
 8003864:	20f8      	movs	r0, #248	; 0xf8
 8003866:	f011 ff4d 	bl	8015704 <malloc>
 800386a:	4603      	mov	r3, r0
 800386c:	613b      	str	r3, [r7, #16]

  if (netif == NULL)
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d102      	bne.n	800387a <NetInterfaceOn+0x26>
  {
    printf("Unable to allocate network interface\r\n");
 8003874:	4818      	ldr	r0, [pc, #96]	; (80038d8 <NetInterfaceOn+0x84>)
 8003876:	f013 fd4b 	bl	8017310 <puts>
  }
  memset(netif, 0, sizeof(*netif));
 800387a:	22f8      	movs	r2, #248	; 0xf8
 800387c:	2100      	movs	r1, #0
 800387e:	6938      	ldr	r0, [r7, #16]
 8003880:	f013 fdac 	bl	80173dc <memset>

  net_handler = NET_MALLOC(sizeof(*net_handler));
 8003884:	2008      	movs	r0, #8
 8003886:	f011 ff3d 	bl	8015704 <malloc>
 800388a:	4603      	mov	r3, r0
 800388c:	60fb      	str	r3, [r7, #12]
  if (net_handler == NULL)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d102      	bne.n	800389a <NetInterfaceOn+0x46>
  {
    printf("Unable to allocate net_handler\r\n");
 8003894:	4811      	ldr	r0, [pc, #68]	; (80038dc <NetInterfaceOn+0x88>)
 8003896:	f013 fd3b 	bl	8017310 <puts>
  }

  net_handler->callback = hnet_notify;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	683a      	ldr	r2, [r7, #0]
 800389e:	601a      	str	r2, [r3, #0]
  net_handler->context = netif;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	693a      	ldr	r2, [r7, #16]
 80038a4:	605a      	str	r2, [r3, #4]

  /* Initialize the network stack. */
  ret = net_if_init(netif, registred_driver, net_handler);
 80038a6:	68fa      	ldr	r2, [r7, #12]
 80038a8:	6879      	ldr	r1, [r7, #4]
 80038aa:	6938      	ldr	r0, [r7, #16]
 80038ac:	f00f fbea 	bl	8013084 <net_if_init>
 80038b0:	6178      	str	r0, [r7, #20]

  if (NET_OK == ret)
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d107      	bne.n	80038c8 <NetInterfaceOn+0x74>
  {
    ret = net_if_wait_state(netif, NET_STATE_INITIALIZED, NET_STATE_TRANSITION_TIMEOUT);
 80038b8:	f64e 2260 	movw	r2, #60000	; 0xea60
 80038bc:	2101      	movs	r1, #1
 80038be:	6938      	ldr	r0, [r7, #16]
 80038c0:	f00f fb88 	bl	8012fd4 <net_if_wait_state>
 80038c4:	6178      	str	r0, [r7, #20]
 80038c6:	e002      	b.n	80038ce <NetInterfaceOn+0x7a>
  }
  else

  {
    printf("Network interface initialization failed\r\n");
 80038c8:	4805      	ldr	r0, [pc, #20]	; (80038e0 <NetInterfaceOn+0x8c>)
 80038ca:	f013 fd21 	bl	8017310 <puts>
  }
  return netif;
 80038ce:	693b      	ldr	r3, [r7, #16]
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3718      	adds	r7, #24
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	0801b050 	.word	0x0801b050
 80038dc:	0801b078 	.word	0x0801b078
 80038e0:	0801b098 	.word	0x0801b098

080038e4 <NetInterfaceConnect>:
  }
  return;
}

void NetInterfaceConnect(net_if_handle_t *netif, bool dhcp_mode, void *credential, net_wifi_mode_t mode)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b08a      	sub	sp, #40	; 0x28
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	60f8      	str	r0, [r7, #12]
 80038ec:	607a      	str	r2, [r7, #4]
 80038ee:	461a      	mov	r2, r3
 80038f0:	460b      	mov	r3, r1
 80038f2:	72fb      	strb	r3, [r7, #11]
 80038f4:	4613      	mov	r3, r2
 80038f6:	72bb      	strb	r3, [r7, #10]
  int32_t ret = NET_ERROR_GENERIC;
 80038f8:	f06f 031c 	mvn.w	r3, #28
 80038fc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set credentials for WiFi modules. */
  if (NET_INTERFACE_IS_WIFI(netif))
 80038fe:	68f8      	ldr	r0, [r7, #12]
 8003900:	f00f f8d5 	bl	8012aae <net_wifi_get_class>
 8003904:	4603      	mov	r3, r0
 8003906:	2b00      	cmp	r3, #0
 8003908:	d137      	bne.n	800397a <NetInterfaceConnect+0x96>
  {
    net_wifi_credentials_t *wifi_credential = (net_wifi_credentials_t *) credential;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	623b      	str	r3, [r7, #32]
    if (wifi_credential->psk == NULL)
 800390e:	6a3b      	ldr	r3, [r7, #32]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d102      	bne.n	800391c <NetInterfaceConnect+0x38>
    {
      wifi_credential->security_mode = NET_WIFI_SM_OPEN;
 8003916:	6a3b      	ldr	r3, [r7, #32]
 8003918:	2200      	movs	r2, #0
 800391a:	609a      	str	r2, [r3, #8]
    }
    if (NET_WIFI_MODE_AP == mode)
 800391c:	7abb      	ldrb	r3, [r7, #10]
 800391e:	2b01      	cmp	r3, #1
 8003920:	d10a      	bne.n	8003938 <NetInterfaceConnect+0x54>
    {
      dhcp_mode = false;
 8003922:	2300      	movs	r3, #0
 8003924:	72fb      	strb	r3, [r7, #11]
      wifi_credential->ssid = "MyHotSpot";
 8003926:	6a3b      	ldr	r3, [r7, #32]
 8003928:	4a3c      	ldr	r2, [pc, #240]	; (8003a1c <NetInterfaceConnect+0x138>)
 800392a:	601a      	str	r2, [r3, #0]
      wifi_credential->psk = " ";
 800392c:	6a3b      	ldr	r3, [r7, #32]
 800392e:	4a3c      	ldr	r2, [pc, #240]	; (8003a20 <NetInterfaceConnect+0x13c>)
 8003930:	605a      	str	r2, [r3, #4]
      wifi_credential->security_mode = NET_WIFI_SM_OPEN;
 8003932:	6a3b      	ldr	r3, [r7, #32]
 8003934:	2200      	movs	r2, #0
 8003936:	609a      	str	r2, [r3, #8]
    }

    net_wifi_set_credentials(netif, wifi_credential);
 8003938:	6a39      	ldr	r1, [r7, #32]
 800393a:	68f8      	ldr	r0, [r7, #12]
 800393c:	f00f fa50 	bl	8012de0 <net_wifi_set_credentials>
    net_wifi_set_access_mode(netif, mode);
 8003940:	7abb      	ldrb	r3, [r7, #10]
 8003942:	4619      	mov	r1, r3
 8003944:	68f8      	ldr	r0, [r7, #12]
 8003946:	f00f fa5d 	bl	8012e04 <net_wifi_set_access_mode>
    net_wifi_set_access_channel(netif, 8u);
 800394a:	2108      	movs	r1, #8
 800394c:	68f8      	ldr	r0, [r7, #12]
 800394e:	f00f fa6c 	bl	8012e2a <net_wifi_set_access_channel>
    net_wifi_set_ap_max_connections(netif, 4u);
 8003952:	2104      	movs	r1, #4
 8003954:	68f8      	ldr	r0, [r7, #12]
 8003956:	f00f fa7b 	bl	8012e50 <net_wifi_set_ap_max_connections>
    NET_DBG_PRINT("main ... %p %p \"%s\"\r\n", wifi_credential, wifi_credential->ssid, wifi_credential->ssid);
 800395a:	22bf      	movs	r2, #191	; 0xbf
 800395c:	4931      	ldr	r1, [pc, #196]	; (8003a24 <NetInterfaceConnect+0x140>)
 800395e:	4832      	ldr	r0, [pc, #200]	; (8003a28 <NetInterfaceConnect+0x144>)
 8003960:	f013 fc68 	bl	8017234 <iprintf>
 8003964:	6a3b      	ldr	r3, [r7, #32]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	6a3b      	ldr	r3, [r7, #32]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	6a39      	ldr	r1, [r7, #32]
 800396e:	482f      	ldr	r0, [pc, #188]	; (8003a2c <NetInterfaceConnect+0x148>)
 8003970:	f013 fc60 	bl	8017234 <iprintf>
 8003974:	200a      	movs	r0, #10
 8003976:	f013 fc6f 	bl	8017258 <putchar>
  }


  ret = net_if_start(netif);
 800397a:	68f8      	ldr	r0, [r7, #12]
 800397c:	f00f fbd0 	bl	8013120 <net_if_start>
 8003980:	6278      	str	r0, [r7, #36]	; 0x24
  if (NET_OK == ret)
 8003982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003984:	2b00      	cmp	r3, #0
 8003986:	d13c      	bne.n	8003a02 <NetInterfaceConnect+0x11e>
  {
    ret = net_if_wait_state(netif, NET_STATE_READY, NET_STATE_TRANSITION_TIMEOUT);
 8003988:	f64e 2260 	movw	r2, #60000	; 0xea60
 800398c:	2103      	movs	r1, #3
 800398e:	68f8      	ldr	r0, [r7, #12]
 8003990:	f00f fb20 	bl	8012fd4 <net_if_wait_state>
 8003994:	6278      	str	r0, [r7, #36]	; 0x24
    if (NET_OK == ret)
 8003996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003998:	2b00      	cmp	r3, #0
 800399a:	d129      	bne.n	80039f0 <NetInterfaceConnect+0x10c>
    {
      if (dhcp_mode)
 800399c:	7afb      	ldrb	r3, [r7, #11]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d004      	beq.n	80039ac <NetInterfaceConnect+0xc8>
      {
        net_if_set_dhcp_mode(netif, true);
 80039a2:	2101      	movs	r1, #1
 80039a4:	68f8      	ldr	r0, [r7, #12]
 80039a6:	f00f fc4f 	bl	8013248 <net_if_set_dhcp_mode>
 80039aa:	e013      	b.n	80039d4 <NetInterfaceConnect+0xf0>
      }
      else
      {
        net_ip_addr_t ip = NET_IPADDR4_INIT_BYTES(192, 168, 1, 1);
 80039ac:	4b20      	ldr	r3, [pc, #128]	; (8003a30 <NetInterfaceConnect+0x14c>)
 80039ae:	61fb      	str	r3, [r7, #28]
        net_ip_addr_t gw = NET_IPADDR4_INIT_BYTES(192, 168, 1, 1);
 80039b0:	4b1f      	ldr	r3, [pc, #124]	; (8003a30 <NetInterfaceConnect+0x14c>)
 80039b2:	61bb      	str	r3, [r7, #24]
        net_ip_addr_t msk = NET_IPADDR4_INIT_BYTES(255, 255, 254, 0);
 80039b4:	4b1f      	ldr	r3, [pc, #124]	; (8003a34 <NetInterfaceConnect+0x150>)
 80039b6:	617b      	str	r3, [r7, #20]
        net_if_set_dhcp_mode(netif, false);
 80039b8:	2100      	movs	r1, #0
 80039ba:	68f8      	ldr	r0, [r7, #12]
 80039bc:	f00f fc44 	bl	8013248 <net_if_set_dhcp_mode>
        net_if_set_dhcp_server_mode(netif, true);
 80039c0:	2101      	movs	r1, #1
 80039c2:	68f8      	ldr	r0, [r7, #12]
 80039c4:	f00f fc5b 	bl	801327e <net_if_set_dhcp_server_mode>
        net_if_set_ipaddr(netif, ip, gw, msk);
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	69ba      	ldr	r2, [r7, #24]
 80039cc:	69f9      	ldr	r1, [r7, #28]
 80039ce:	68f8      	ldr	r0, [r7, #12]
 80039d0:	f00f fc70 	bl	80132b4 <net_if_set_ipaddr>
      }

      ret = net_if_connect(netif);
 80039d4:	68f8      	ldr	r0, [r7, #12]
 80039d6:	f00f fbb0 	bl	801313a <net_if_connect>
 80039da:	6278      	str	r0, [r7, #36]	; 0x24
      if (NET_OK == ret)
 80039dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d106      	bne.n	80039f0 <NetInterfaceConnect+0x10c>
      {
        ret = net_if_wait_state(netif, NET_STATE_CONNECTED, NET_STATE_TRANSITION_TIMEOUT);
 80039e2:	f64e 2260 	movw	r2, #60000	; 0xea60
 80039e6:	2105      	movs	r1, #5
 80039e8:	68f8      	ldr	r0, [r7, #12]
 80039ea:	f00f faf3 	bl	8012fd4 <net_if_wait_state>
 80039ee:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }
    if (NET_OK != ret)
 80039f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d005      	beq.n	8003a02 <NetInterfaceConnect+0x11e>
    {
      printf("ERROR: Cannot connect WiFi interface!\r\n");
 80039f6:	4810      	ldr	r0, [pc, #64]	; (8003a38 <NetInterfaceConnect+0x154>)
 80039f8:	f013 fc8a 	bl	8017310 <puts>
      printf("  If not done, Please set your connection parameter in main_app.c (net_wifi_net_wifi_registred_hotspot)!\r\n");
 80039fc:	480f      	ldr	r0, [pc, #60]	; (8003a3c <NetInterfaceConnect+0x158>)
 80039fe:	f013 fc87 	bl	8017310 <puts>
    }
  }
  if (NET_OK != ret)
 8003a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d005      	beq.n	8003a14 <NetInterfaceConnect+0x130>
  {
    printf("ERROR: Cannot connect interface !\r\n");
 8003a08:	480d      	ldr	r0, [pc, #52]	; (8003a40 <NetInterfaceConnect+0x15c>)
 8003a0a:	f013 fc81 	bl	8017310 <puts>
    printf("  If not done, Please set your connection parameter in main_app.c (net_wifi_net_wifi_registred_hotspot)!\r\n");
 8003a0e:	480b      	ldr	r0, [pc, #44]	; (8003a3c <NetInterfaceConnect+0x158>)
 8003a10:	f013 fc7e 	bl	8017310 <puts>
  }
}
 8003a14:	bf00      	nop
 8003a16:	3728      	adds	r7, #40	; 0x28
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	0801b0f8 	.word	0x0801b0f8
 8003a20:	0801b104 	.word	0x0801b104
 8003a24:	0801b108 	.word	0x0801b108
 8003a28:	0801b198 	.word	0x0801b198
 8003a2c:	0801b1a0 	.word	0x0801b1a0
 8003a30:	0101a8c0 	.word	0x0101a8c0
 8003a34:	00feffff 	.word	0x00feffff
 8003a38:	0801b1b8 	.word	0x0801b1b8
 8003a3c:	0801b1e0 	.word	0x0801b1e0
 8003a40:	0801b24c 	.word	0x0801b24c

08003a44 <BSP_LED_Init>:
  *            @arg  LED6
  *            @arg  LED7
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b08a      	sub	sp, #40	; 0x28
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO_LED clock */
  LED6_GPIO_CLK_ENABLE();
 8003a52:	4b22      	ldr	r3, [pc, #136]	; (8003adc <BSP_LED_Init+0x98>)
 8003a54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a58:	4a20      	ldr	r2, [pc, #128]	; (8003adc <BSP_LED_Init+0x98>)
 8003a5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a5e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003a62:	4b1e      	ldr	r3, [pc, #120]	; (8003adc <BSP_LED_Init+0x98>)
 8003a64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a6c:	60fb      	str	r3, [r7, #12]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
  LED7_GPIO_CLK_ENABLE();
 8003a70:	4b1a      	ldr	r3, [pc, #104]	; (8003adc <BSP_LED_Init+0x98>)
 8003a72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a76:	4a19      	ldr	r2, [pc, #100]	; (8003adc <BSP_LED_Init+0x98>)
 8003a78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a7c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003a80:	4b16      	ldr	r3, [pc, #88]	; (8003adc <BSP_LED_Init+0x98>)
 8003a82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a8a:	60bb      	str	r3, [r7, #8]
 8003a8c:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8003a92:	2300      	movs	r3, #0
 8003a94:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8003a96:	2302      	movs	r3, #2
 8003a98:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Pin = LED_PIN [Led];
 8003a9a:	79fb      	ldrb	r3, [r7, #7]
 8003a9c:	4a10      	ldr	r2, [pc, #64]	; (8003ae0 <BSP_LED_Init+0x9c>)
 8003a9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003aa2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8003aa4:	79fb      	ldrb	r3, [r7, #7]
 8003aa6:	4a0f      	ldr	r2, [pc, #60]	; (8003ae4 <BSP_LED_Init+0xa0>)
 8003aa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003aac:	f107 0210 	add.w	r2, r7, #16
 8003ab0:	4611      	mov	r1, r2
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f006 ffac 	bl	800aa10 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT [Led], (uint16_t)LED_PIN[Led], GPIO_PIN_SET);
 8003ab8:	79fb      	ldrb	r3, [r7, #7]
 8003aba:	4a0a      	ldr	r2, [pc, #40]	; (8003ae4 <BSP_LED_Init+0xa0>)
 8003abc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003ac0:	79fb      	ldrb	r3, [r7, #7]
 8003ac2:	4a07      	ldr	r2, [pc, #28]	; (8003ae0 <BSP_LED_Init+0x9c>)
 8003ac4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	2201      	movs	r2, #1
 8003acc:	4619      	mov	r1, r3
 8003ace:	f007 fa6d 	bl	800afac <HAL_GPIO_WritePin>

  return ret;
 8003ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3728      	adds	r7, #40	; 0x28
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	46020c00 	.word	0x46020c00
 8003ae0:	0818db5c 	.word	0x0818db5c
 8003ae4:	2000005c 	.word	0x2000005c

08003ae8 <BSP_LED_DeInit>:
  *            @arg  LED6
  *            @arg  LED7
  * @retval BSP status
  */
int32_t BSP_LED_DeInit(Led_TypeDef Led)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b088      	sub	sp, #32
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	4603      	mov	r3, r0
 8003af0:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8003af2:	2300      	movs	r3, #0
 8003af4:	61fb      	str	r3, [r7, #28]
  GPIO_InitTypeDef  gpio_init_structure;

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin = LED_PIN [Led];
 8003af6:	79fb      	ldrb	r3, [r7, #7]
 8003af8:	4a0f      	ldr	r2, [pc, #60]	; (8003b38 <BSP_LED_DeInit+0x50>)
 8003afa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003afe:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_WritePin(LED_PORT[Led], (uint16_t)LED_PIN[Led], GPIO_PIN_RESET);
 8003b00:	79fb      	ldrb	r3, [r7, #7]
 8003b02:	4a0e      	ldr	r2, [pc, #56]	; (8003b3c <BSP_LED_DeInit+0x54>)
 8003b04:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003b08:	79fb      	ldrb	r3, [r7, #7]
 8003b0a:	4a0b      	ldr	r2, [pc, #44]	; (8003b38 <BSP_LED_DeInit+0x50>)
 8003b0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	2200      	movs	r2, #0
 8003b14:	4619      	mov	r1, r3
 8003b16:	f007 fa49 	bl	800afac <HAL_GPIO_WritePin>
  HAL_GPIO_DeInit(LED_PORT[Led], gpio_init_structure.Pin);
 8003b1a:	79fb      	ldrb	r3, [r7, #7]
 8003b1c:	4a07      	ldr	r2, [pc, #28]	; (8003b3c <BSP_LED_DeInit+0x54>)
 8003b1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b22:	68ba      	ldr	r2, [r7, #8]
 8003b24:	4611      	mov	r1, r2
 8003b26:	4618      	mov	r0, r3
 8003b28:	f007 f94a 	bl	800adc0 <HAL_GPIO_DeInit>

  return ret;
 8003b2c:	69fb      	ldr	r3, [r7, #28]
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3720      	adds	r7, #32
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	0818db5c 	.word	0x0818db5c
 8003b3c:	2000005c 	.word	0x2000005c

08003b40 <BSP_LED_On>:
  *            @arg  LED6
  *            @arg  LED7
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b084      	sub	sp, #16
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	4603      	mov	r3, r0
 8003b48:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  HAL_GPIO_WritePin(LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_RESET);
 8003b4a:	79fb      	ldrb	r3, [r7, #7]
 8003b4c:	4a09      	ldr	r2, [pc, #36]	; (8003b74 <BSP_LED_On+0x34>)
 8003b4e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003b52:	79fb      	ldrb	r3, [r7, #7]
 8003b54:	4a08      	ldr	r2, [pc, #32]	; (8003b78 <BSP_LED_On+0x38>)
 8003b56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	4619      	mov	r1, r3
 8003b60:	f007 fa24 	bl	800afac <HAL_GPIO_WritePin>
  ret = BSP_ERROR_NONE;
 8003b64:	2300      	movs	r3, #0
 8003b66:	60fb      	str	r3, [r7, #12]

  return ret;
 8003b68:	68fb      	ldr	r3, [r7, #12]
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3710      	adds	r7, #16
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	2000005c 	.word	0x2000005c
 8003b78:	0818db5c 	.word	0x0818db5c

08003b7c <BSP_LED_Toggle>:
  *            @arg  LED5
  *            @arg  LED7
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b084      	sub	sp, #16
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	4603      	mov	r3, r0
 8003b84:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  HAL_GPIO_TogglePin(LED_PORT[Led], (uint16_t)LED_PIN[Led]);
 8003b86:	79fb      	ldrb	r3, [r7, #7]
 8003b88:	4a09      	ldr	r2, [pc, #36]	; (8003bb0 <BSP_LED_Toggle+0x34>)
 8003b8a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003b8e:	79fb      	ldrb	r3, [r7, #7]
 8003b90:	4908      	ldr	r1, [pc, #32]	; (8003bb4 <BSP_LED_Toggle+0x38>)
 8003b92:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	4619      	mov	r1, r3
 8003b9a:	4610      	mov	r0, r2
 8003b9c:	f007 fa1e 	bl	800afdc <HAL_GPIO_TogglePin>
  ret = BSP_ERROR_NONE;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	60fb      	str	r3, [r7, #12]

  return ret;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3710      	adds	r7, #16
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	2000005c 	.word	0x2000005c
 8003bb4:	0818db5c 	.word	0x0818db5c

08003bb8 <BSP_I2C2_Init>:
/**
  * @brief  Initializes I2C2 HAL.
  * @retval BSP status
  */
int32_t BSP_I2C2_Init(void)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b082      	sub	sp, #8
 8003bbc:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	607b      	str	r3, [r7, #4]

  hbus_i2c2.Instance = BUS_I2C2;
 8003bc2:	4b16      	ldr	r3, [pc, #88]	; (8003c1c <BSP_I2C2_Init+0x64>)
 8003bc4:	4a16      	ldr	r2, [pc, #88]	; (8003c20 <BSP_I2C2_Init+0x68>)
 8003bc6:	601a      	str	r2, [r3, #0]

  if (I2c2InitCounter == 0U)
 8003bc8:	4b16      	ldr	r3, [pc, #88]	; (8003c24 <BSP_I2C2_Init+0x6c>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d11f      	bne.n	8003c10 <BSP_I2C2_Init+0x58>
  {
    I2c2InitCounter++;
 8003bd0:	4b14      	ldr	r3, [pc, #80]	; (8003c24 <BSP_I2C2_Init+0x6c>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	3301      	adds	r3, #1
 8003bd6:	4a13      	ldr	r2, [pc, #76]	; (8003c24 <BSP_I2C2_Init+0x6c>)
 8003bd8:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c2) == HAL_I2C_STATE_RESET)
 8003bda:	4810      	ldr	r0, [pc, #64]	; (8003c1c <BSP_I2C2_Init+0x64>)
 8003bdc:	f007 fd56 	bl	800b68c <HAL_I2C_GetState>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d114      	bne.n	8003c10 <BSP_I2C2_Init+0x58>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif /* BSP_USE_CMSIS_OS */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C2 Msp */
      I2C2_MspInit(&hbus_i2c2);
 8003be6:	480d      	ldr	r0, [pc, #52]	; (8003c1c <BSP_I2C2_Init+0x64>)
 8003be8:	f000 fb60 	bl	80042ac <I2C2_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      if (MX_I2C2_Init(&hbus_i2c2, I2C_GetTiming(HAL_RCC_GetPCLK1Freq(), BUS_I2C2_FREQUENCY)) != HAL_OK)
 8003bec:	f00a f94e 	bl	800de8c <HAL_RCC_GetPCLK1Freq>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	490d      	ldr	r1, [pc, #52]	; (8003c28 <BSP_I2C2_Init+0x70>)
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f000 f8e3 	bl	8003dc0 <I2C_GetTiming>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	4619      	mov	r1, r3
 8003bfe:	4807      	ldr	r0, [pc, #28]	; (8003c1c <BSP_I2C2_Init+0x64>)
 8003c00:	f000 f838 	bl	8003c74 <MX_I2C2_Init>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d002      	beq.n	8003c10 <BSP_I2C2_Init+0x58>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8003c0a:	f06f 0307 	mvn.w	r3, #7
 8003c0e:	607b      	str	r3, [r7, #4]
#if (USE_HAL_I2C_REGISTER_CALLBACKS > 0)
    }
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
return ret;
 8003c10:	687b      	ldr	r3, [r7, #4]
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3708      	adds	r7, #8
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	20002be4 	.word	0x20002be4
 8003c20:	40005800 	.word	0x40005800
 8003c24:	200021dc 	.word	0x200021dc
 8003c28:	000186a0 	.word	0x000186a0

08003c2c <BSP_I2C2_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C2_DeInit(void)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b082      	sub	sp, #8
 8003c30:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
 8003c32:	2300      	movs	r3, #0
 8003c34:	607b      	str	r3, [r7, #4]

  I2c2InitCounter--;
 8003c36:	4b0d      	ldr	r3, [pc, #52]	; (8003c6c <BSP_I2C2_DeInit+0x40>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	3b01      	subs	r3, #1
 8003c3c:	4a0b      	ldr	r2, [pc, #44]	; (8003c6c <BSP_I2C2_DeInit+0x40>)
 8003c3e:	6013      	str	r3, [r2, #0]

  if (I2c2InitCounter == 0U)
 8003c40:	4b0a      	ldr	r3, [pc, #40]	; (8003c6c <BSP_I2C2_DeInit+0x40>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d10b      	bne.n	8003c60 <BSP_I2C2_DeInit+0x34>
  {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    I2C2_MspDeInit(&hbus_i2c2);
 8003c48:	4809      	ldr	r0, [pc, #36]	; (8003c70 <BSP_I2C2_DeInit+0x44>)
 8003c4a:	f000 fb95 	bl	8004378 <I2C2_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

    /* Init the I2C */
    if (HAL_I2C_DeInit(&hbus_i2c2) != HAL_OK)
 8003c4e:	4808      	ldr	r0, [pc, #32]	; (8003c70 <BSP_I2C2_DeInit+0x44>)
 8003c50:	f007 faaa 	bl	800b1a8 <HAL_I2C_DeInit>
 8003c54:	4603      	mov	r3, r0
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d002      	beq.n	8003c60 <BSP_I2C2_DeInit+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8003c5a:	f06f 0307 	mvn.w	r3, #7
 8003c5e:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 8003c60:	687b      	ldr	r3, [r7, #4]
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3708      	adds	r7, #8
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	200021dc 	.word	0x200021dc
 8003c70:	20002be4 	.word	0x20002be4

08003c74 <MX_I2C2_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C2_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	683a      	ldr	r2, [r7, #0]
 8003c86:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2201      	movs	r2, #1
 8003c92:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f007 f9dd 	bl	800b072 <HAL_I2C_Init>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d002      	beq.n	8003cc4 <MX_I2C2_Init+0x50>
  {
    status = HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	73fb      	strb	r3, [r7, #15]
 8003cc2:	e014      	b.n	8003cee <MX_I2C2_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 8003cc8:	68b9      	ldr	r1, [r7, #8]
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f007 ffb0 	bl	800bc30 <HAL_I2CEx_ConfigAnalogFilter>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d002      	beq.n	8003cdc <MX_I2C2_Init+0x68>
    {
      status = HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	73fb      	strb	r3, [r7, #15]
 8003cda:	e008      	b.n	8003cee <MX_I2C2_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 8003cdc:	2100      	movs	r1, #0
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f007 fff1 	bl	800bcc6 <HAL_I2CEx_ConfigDigitalFilter>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d001      	beq.n	8003cee <MX_I2C2_Init+0x7a>
      {
        status = HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 8003cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3710      	adds	r7, #16
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}

08003cf8 <BSP_I2C2_WriteReg>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C2_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b088      	sub	sp, #32
 8003cfc:	af02      	add	r7, sp, #8
 8003cfe:	60ba      	str	r2, [r7, #8]
 8003d00:	461a      	mov	r2, r3
 8003d02:	4603      	mov	r3, r0
 8003d04:	81fb      	strh	r3, [r7, #14]
 8003d06:	460b      	mov	r3, r1
 8003d08:	81bb      	strh	r3, [r7, #12]
 8003d0a:	4613      	mov	r3, r2
 8003d0c:	80fb      	strh	r3, [r7, #6]

#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif /* BSP_USE_CMSIS_OS */
  if (I2C2_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 8003d0e:	89b9      	ldrh	r1, [r7, #12]
 8003d10:	89f8      	ldrh	r0, [r7, #14]
 8003d12:	88fb      	ldrh	r3, [r7, #6]
 8003d14:	9300      	str	r3, [sp, #0]
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	2201      	movs	r2, #1
 8003d1a:	f000 fb4f 	bl	80043bc <I2C2_WriteReg>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d102      	bne.n	8003d2a <BSP_I2C2_WriteReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 8003d24:	2300      	movs	r3, #0
 8003d26:	617b      	str	r3, [r7, #20]
 8003d28:	e00c      	b.n	8003d44 <BSP_I2C2_WriteReg+0x4c>
  }
  else
  {
    if (HAL_I2C_GetError(&hbus_i2c2) == HAL_I2C_ERROR_AF)
 8003d2a:	4809      	ldr	r0, [pc, #36]	; (8003d50 <BSP_I2C2_WriteReg+0x58>)
 8003d2c:	f007 fcbc 	bl	800b6a8 <HAL_I2C_GetError>
 8003d30:	4603      	mov	r3, r0
 8003d32:	2b04      	cmp	r3, #4
 8003d34:	d103      	bne.n	8003d3e <BSP_I2C2_WriteReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8003d36:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8003d3a:	617b      	str	r3, [r7, #20]
 8003d3c:	e002      	b.n	8003d44 <BSP_I2C2_WriteReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8003d3e:	f06f 0303 	mvn.w	r3, #3
 8003d42:	617b      	str	r3, [r7, #20]
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif /* BSP_USE_CMSIS_OS */

  return ret;
 8003d44:	697b      	ldr	r3, [r7, #20]
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3718      	adds	r7, #24
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	20002be4 	.word	0x20002be4

08003d54 <BSP_I2C2_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C2_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b088      	sub	sp, #32
 8003d58:	af02      	add	r7, sp, #8
 8003d5a:	60ba      	str	r2, [r7, #8]
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	4603      	mov	r3, r0
 8003d60:	81fb      	strh	r3, [r7, #14]
 8003d62:	460b      	mov	r3, r1
 8003d64:	81bb      	strh	r3, [r7, #12]
 8003d66:	4613      	mov	r3, r2
 8003d68:	80fb      	strh	r3, [r7, #6]

#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif /* BSP_USE_CMSIS_OS */
  if (I2C2_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 8003d6a:	89b9      	ldrh	r1, [r7, #12]
 8003d6c:	89f8      	ldrh	r0, [r7, #14]
 8003d6e:	88fb      	ldrh	r3, [r7, #6]
 8003d70:	9300      	str	r3, [sp, #0]
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	2201      	movs	r2, #1
 8003d76:	f000 fb47 	bl	8004408 <I2C2_ReadReg>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d102      	bne.n	8003d86 <BSP_I2C2_ReadReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 8003d80:	2300      	movs	r3, #0
 8003d82:	617b      	str	r3, [r7, #20]
 8003d84:	e00c      	b.n	8003da0 <BSP_I2C2_ReadReg+0x4c>
  }
  else
  {
    if (HAL_I2C_GetError(&hbus_i2c2) == HAL_I2C_ERROR_AF)
 8003d86:	4809      	ldr	r0, [pc, #36]	; (8003dac <BSP_I2C2_ReadReg+0x58>)
 8003d88:	f007 fc8e 	bl	800b6a8 <HAL_I2C_GetError>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b04      	cmp	r3, #4
 8003d90:	d103      	bne.n	8003d9a <BSP_I2C2_ReadReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8003d92:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8003d96:	617b      	str	r3, [r7, #20]
 8003d98:	e002      	b.n	8003da0 <BSP_I2C2_ReadReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8003d9a:	f06f 0303 	mvn.w	r3, #3
 8003d9e:	617b      	str	r3, [r7, #20]
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif /* BSP_USE_CMSIS_OS */

  return ret;
 8003da0:	697b      	ldr	r3, [r7, #20]
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3718      	adds	r7, #24
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}
 8003daa:	bf00      	nop
 8003dac:	20002be4 	.word	0x20002be4

08003db0 <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 8003db4:	f006 fc6a 	bl	800a68c <HAL_GetTick>
 8003db8:	4603      	mov	r3, r0
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	bd80      	pop	{r7, pc}
	...

08003dc0 <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b086      	sub	sp, #24
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if ((clock_src_freq != 0U) && (i2c_freq != 0U))
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d06b      	beq.n	8003eac <I2C_GetTiming+0xec>
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d068      	beq.n	8003eac <I2C_GetTiming+0xec>
  {
    for (speed = 0 ; speed <= (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8003dda:	2300      	movs	r3, #0
 8003ddc:	613b      	str	r3, [r7, #16]
 8003dde:	e060      	b.n	8003ea2 <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8003de0:	4a35      	ldr	r2, [pc, #212]	; (8003eb8 <I2C_GetTiming+0xf8>)
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	212c      	movs	r1, #44	; 0x2c
 8003de6:	fb01 f303 	mul.w	r3, r1, r3
 8003dea:	4413      	add	r3, r2
 8003dec:	3304      	adds	r3, #4
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	683a      	ldr	r2, [r7, #0]
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d352      	bcc.n	8003e9c <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 8003df6:	4a30      	ldr	r2, [pc, #192]	; (8003eb8 <I2C_GetTiming+0xf8>)
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	212c      	movs	r1, #44	; 0x2c
 8003dfc:	fb01 f303 	mul.w	r3, r1, r3
 8003e00:	4413      	add	r3, r2
 8003e02:	3308      	adds	r3, #8
 8003e04:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8003e06:	683a      	ldr	r2, [r7, #0]
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d847      	bhi.n	8003e9c <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 8003e0c:	6939      	ldr	r1, [r7, #16]
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f000 f856 	bl	8003ec0 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 8003e14:	6939      	ldr	r1, [r7, #16]
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f000 f940 	bl	800409c <I2C_Compute_SCLL_SCLH>
 8003e1c:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2b7f      	cmp	r3, #127	; 0x7f
 8003e22:	d842      	bhi.n	8003eaa <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) | \
 8003e24:	4925      	ldr	r1, [pc, #148]	; (8003ebc <I2C_GetTiming+0xfc>)
 8003e26:	68fa      	ldr	r2, [r7, #12]
 8003e28:	4613      	mov	r3, r2
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	4413      	add	r3, r2
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	440b      	add	r3, r1
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) | \
 8003e36:	4821      	ldr	r0, [pc, #132]	; (8003ebc <I2C_GetTiming+0xfc>)
 8003e38:	68fa      	ldr	r2, [r7, #12]
 8003e3a:	4613      	mov	r3, r2
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	4413      	add	r3, r2
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	4403      	add	r3, r0
 8003e44:	3304      	adds	r3, #4
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	051b      	lsls	r3, r3, #20
 8003e4a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) | \
 8003e4e:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) | \
 8003e50:	481a      	ldr	r0, [pc, #104]	; (8003ebc <I2C_GetTiming+0xfc>)
 8003e52:	68fa      	ldr	r2, [r7, #12]
 8003e54:	4613      	mov	r3, r2
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	4413      	add	r3, r2
 8003e5a:	009b      	lsls	r3, r3, #2
 8003e5c:	4403      	add	r3, r0
 8003e5e:	3308      	adds	r3, #8
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	041b      	lsls	r3, r3, #16
 8003e64:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) | \
 8003e68:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) | \
 8003e6a:	4814      	ldr	r0, [pc, #80]	; (8003ebc <I2C_GetTiming+0xfc>)
 8003e6c:	68fa      	ldr	r2, [r7, #12]
 8003e6e:	4613      	mov	r3, r2
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	4413      	add	r3, r2
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	4403      	add	r3, r0
 8003e78:	330c      	adds	r3, #12
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	021b      	lsls	r3, r3, #8
 8003e7e:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) | \
 8003e80:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 8003e82:	480e      	ldr	r0, [pc, #56]	; (8003ebc <I2C_GetTiming+0xfc>)
 8003e84:	68fa      	ldr	r2, [r7, #12]
 8003e86:	4613      	mov	r3, r2
 8003e88:	009b      	lsls	r3, r3, #2
 8003e8a:	4413      	add	r3, r2
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	4403      	add	r3, r0
 8003e90:	3310      	adds	r3, #16
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) | \
 8003e96:	430b      	orrs	r3, r1
 8003e98:	617b      	str	r3, [r7, #20]
        }
        break;
 8003e9a:	e006      	b.n	8003eaa <I2C_GetTiming+0xea>
    for (speed = 0 ; speed <= (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	3301      	adds	r3, #1
 8003ea0:	613b      	str	r3, [r7, #16]
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	2b02      	cmp	r3, #2
 8003ea6:	d99b      	bls.n	8003de0 <I2C_GetTiming+0x20>
 8003ea8:	e000      	b.n	8003eac <I2C_GetTiming+0xec>
        break;
 8003eaa:	bf00      	nop
      }
    }
  }

  return ret;
 8003eac:	697b      	ldr	r3, [r7, #20]
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3718      	adds	r7, #24
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	0818db64 	.word	0x0818db64
 8003ebc:	200021e0 	.word	0x200021e0

08003ec0 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b08f      	sub	sp, #60	; 0x3c
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 8003eca:	2310      	movs	r3, #16
 8003ecc:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t scldel;
  uint32_t sdadel;
  uint32_t tafdel_min;
  uint32_t tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U)) / clock_src_freq;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	085a      	lsrs	r2, r3, #1
 8003ed2:	4b6e      	ldr	r3, [pc, #440]	; (800408c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 8003ed4:	4413      	add	r3, r2
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	fbb3 f3f2 	udiv	r3, r3, r2
 8003edc:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 8003ede:	2332      	movs	r3, #50	; 0x32
 8003ee0:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
 8003ee2:	f44f 7382 	mov.w	r3, #260	; 0x104
 8003ee6:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / tPRESC
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / tPRESC */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8003ee8:	4a69      	ldr	r2, [pc, #420]	; (8004090 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	212c      	movs	r1, #44	; 0x2c
 8003eee:	fb01 f303 	mul.w	r3, r1, r3
 8003ef2:	4413      	add	r3, r2
 8003ef4:	3324      	adds	r3, #36	; 0x24
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4618      	mov	r0, r3
 8003efa:	4a65      	ldr	r2, [pc, #404]	; (8004090 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	212c      	movs	r1, #44	; 0x2c
 8003f00:	fb01 f303 	mul.w	r3, r1, r3
 8003f04:	4413      	add	r3, r2
 8003f06:	330c      	adds	r3, #12
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	18c2      	adds	r2, r0, r3
                (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8003f0c:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8003f0e:	1ad2      	subs	r2, r2, r3
                (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8003f10:	495f      	ldr	r1, [pc, #380]	; (8004090 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	202c      	movs	r0, #44	; 0x2c
 8003f16:	fb00 f303 	mul.w	r3, r0, r3
 8003f1a:	440b      	add	r3, r1
 8003f1c:	3328      	adds	r3, #40	; 0x28
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	3303      	adds	r3, #3
 8003f22:	69f9      	ldr	r1, [r7, #28]
 8003f24:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	633b      	str	r3, [r7, #48]	; 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8003f2c:	4a58      	ldr	r2, [pc, #352]	; (8004090 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	212c      	movs	r1, #44	; 0x2c
 8003f32:	fb01 f303 	mul.w	r3, r1, r3
 8003f36:	4413      	add	r3, r2
 8003f38:	3310      	adds	r3, #16
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	4a54      	ldr	r2, [pc, #336]	; (8004090 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	212c      	movs	r1, #44	; 0x2c
 8003f44:	fb01 f303 	mul.w	r3, r1, r3
 8003f48:	4413      	add	r3, r2
 8003f4a:	3320      	adds	r3, #32
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	1ac2      	subs	r2, r0, r3
                (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8003f50:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8003f52:	1ad2      	subs	r2, r2, r3
                (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8003f54:	494e      	ldr	r1, [pc, #312]	; (8004090 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	202c      	movs	r0, #44	; 0x2c
 8003f5a:	fb00 f303 	mul.w	r3, r0, r3
 8003f5e:	440b      	add	r3, r1
 8003f60:	3328      	adds	r3, #40	; 0x28
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	3304      	adds	r3, #4
 8003f66:	69f9      	ldr	r1, [r7, #28]
 8003f68:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	62fb      	str	r3, [r7, #44]	; 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 8003f70:	4a47      	ldr	r2, [pc, #284]	; (8004090 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	212c      	movs	r1, #44	; 0x2c
 8003f76:	fb01 f303 	mul.w	r3, r1, r3
 8003f7a:	4413      	add	r3, r2
 8003f7c:	3320      	adds	r3, #32
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4618      	mov	r0, r3
 8003f82:	4a43      	ldr	r2, [pc, #268]	; (8004090 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	212c      	movs	r1, #44	; 0x2c
 8003f88:	fb01 f303 	mul.w	r3, r1, r3
 8003f8c:	4413      	add	r3, r2
 8003f8e:	3314      	adds	r3, #20
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4403      	add	r3, r0
 8003f94:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 8003f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	dc01      	bgt.n	8003fa0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	633b      	str	r3, [r7, #48]	; 0x30
  }

  if (tsdadel_max <= 0)
 8003fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	dc01      	bgt.n	8003faa <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8003faa:	2300      	movs	r3, #0
 8003fac:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fae:	e062      	b.n	8004076 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	627b      	str	r3, [r7, #36]	; 0x24
 8003fb4:	e059      	b.n	800406a <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 8003fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb8:	3301      	adds	r3, #1
 8003fba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fbc:	3201      	adds	r2, #1
 8003fbe:	fb03 f202 	mul.w	r2, r3, r2
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	fb02 f303 	mul.w	r3, r2, r3
 8003fc8:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	68fa      	ldr	r2, [r7, #12]
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d348      	bcc.n	8004064 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	623b      	str	r3, [r7, #32]
 8003fd6:	e042      	b.n	800405e <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 8003fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fda:	3301      	adds	r3, #1
 8003fdc:	6a3a      	ldr	r2, [r7, #32]
 8003fde:	fb03 f202 	mul.w	r2, r3, r2
 8003fe2:	69fb      	ldr	r3, [r7, #28]
 8003fe4:	fb02 f303 	mul.w	r3, r2, r3
 8003fe8:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 8003fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fec:	68ba      	ldr	r2, [r7, #8]
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	d332      	bcc.n	8004058 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 8003ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ff4:	68ba      	ldr	r2, [r7, #8]
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d82e      	bhi.n	8004058 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if (presc != prev_presc)
 8003ffa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d02a      	beq.n	8004058 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8004002:	4b24      	ldr	r3, [pc, #144]	; (8004094 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	4924      	ldr	r1, [pc, #144]	; (8004098 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8004008:	4613      	mov	r3, r2
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	4413      	add	r3, r2
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	440b      	add	r3, r1
 8004012:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004014:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8004016:	4b1f      	ldr	r3, [pc, #124]	; (8004094 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	491f      	ldr	r1, [pc, #124]	; (8004098 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 800401c:	4613      	mov	r3, r2
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	4413      	add	r3, r2
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	440b      	add	r3, r1
 8004026:	3304      	adds	r3, #4
 8004028:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800402a:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800402c:	4b19      	ldr	r3, [pc, #100]	; (8004094 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	4919      	ldr	r1, [pc, #100]	; (8004098 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8004032:	4613      	mov	r3, r2
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	4413      	add	r3, r2
 8004038:	009b      	lsls	r3, r3, #2
 800403a:	440b      	add	r3, r1
 800403c:	3308      	adds	r3, #8
 800403e:	6a3a      	ldr	r2, [r7, #32]
 8004040:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 8004042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004044:	637b      	str	r3, [r7, #52]	; 0x34
              I2c_valid_timing_nbr ++;
 8004046:	4b13      	ldr	r3, [pc, #76]	; (8004094 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	3301      	adds	r3, #1
 800404c:	4a11      	ldr	r2, [pc, #68]	; (8004094 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800404e:	6013      	str	r3, [r2, #0]

              if (I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8004050:	4b10      	ldr	r3, [pc, #64]	; (8004094 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	2b7f      	cmp	r3, #127	; 0x7f
 8004056:	d812      	bhi.n	800407e <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8004058:	6a3b      	ldr	r3, [r7, #32]
 800405a:	3301      	adds	r3, #1
 800405c:	623b      	str	r3, [r7, #32]
 800405e:	6a3b      	ldr	r3, [r7, #32]
 8004060:	2b0f      	cmp	r3, #15
 8004062:	d9b9      	bls.n	8003fd8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8004064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004066:	3301      	adds	r3, #1
 8004068:	627b      	str	r3, [r7, #36]	; 0x24
 800406a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406c:	2b0f      	cmp	r3, #15
 800406e:	d9a2      	bls.n	8003fb6 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8004070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004072:	3301      	adds	r3, #1
 8004074:	62bb      	str	r3, [r7, #40]	; 0x28
 8004076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004078:	2b0f      	cmp	r3, #15
 800407a:	d999      	bls.n	8003fb0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 800407c:	e000      	b.n	8004080 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 800407e:	bf00      	nop
          }
        }
      }
    }
  }
}
 8004080:	373c      	adds	r7, #60	; 0x3c
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr
 800408a:	bf00      	nop
 800408c:	3b9aca00 	.word	0x3b9aca00
 8004090:	0818db64 	.word	0x0818db64
 8004094:	20002be0 	.word	0x20002be0
 8004098:	200021e0 	.word	0x200021e0

0800409c <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 800409c:	b480      	push	{r7}
 800409e:	b093      	sub	sp, #76	; 0x4c
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0xFFFFFFFFU;
 80040a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80040aa:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t clk_max;
  uint32_t scll;
  uint32_t sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U)) / clock_src_freq;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	085a      	lsrs	r2, r3, #1
 80040b0:	4b7a      	ldr	r3, [pc, #488]	; (800429c <I2C_Compute_SCLL_SCLH+0x200>)
 80040b2:	4413      	add	r3, r2
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80040ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U)) / I2C_Charac[I2C_speed].freq;
 80040bc:	4a78      	ldr	r2, [pc, #480]	; (80042a0 <I2C_Compute_SCLL_SCLH+0x204>)
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	212c      	movs	r1, #44	; 0x2c
 80040c2:	fb01 f303 	mul.w	r3, r1, r3
 80040c6:	4413      	add	r3, r2
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	085a      	lsrs	r2, r3, #1
 80040cc:	4b73      	ldr	r3, [pc, #460]	; (800429c <I2C_Compute_SCLL_SCLH+0x200>)
 80040ce:	4413      	add	r3, r2
 80040d0:	4973      	ldr	r1, [pc, #460]	; (80042a0 <I2C_Compute_SCLL_SCLH+0x204>)
 80040d2:	683a      	ldr	r2, [r7, #0]
 80040d4:	202c      	movs	r0, #44	; 0x2c
 80040d6:	fb00 f202 	mul.w	r2, r0, r2
 80040da:	440a      	add	r2, r1
 80040dc:	6812      	ldr	r2, [r2, #0]
 80040de:	fbb3 f3f2 	udiv	r3, r3, r2
 80040e2:	62bb      	str	r3, [r7, #40]	; 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 80040e4:	2332      	movs	r3, #50	; 0x32
 80040e6:	627b      	str	r3, [r7, #36]	; 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 80040e8:	4a6d      	ldr	r2, [pc, #436]	; (80042a0 <I2C_Compute_SCLL_SCLH+0x204>)
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	212c      	movs	r1, #44	; 0x2c
 80040ee:	fb01 f303 	mul.w	r3, r1, r3
 80040f2:	4413      	add	r3, r2
 80040f4:	3328      	adds	r3, #40	; 0x28
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040fa:	fb02 f303 	mul.w	r3, r2, r3
 80040fe:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 8004100:	4a67      	ldr	r2, [pc, #412]	; (80042a0 <I2C_Compute_SCLL_SCLH+0x204>)
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	212c      	movs	r1, #44	; 0x2c
 8004106:	fb01 f303 	mul.w	r3, r1, r3
 800410a:	4413      	add	r3, r2
 800410c:	3304      	adds	r3, #4
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a62      	ldr	r2, [pc, #392]	; (800429c <I2C_Compute_SCLL_SCLH+0x200>)
 8004112:	fbb2 f3f3 	udiv	r3, r2, r3
 8004116:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 8004118:	4a61      	ldr	r2, [pc, #388]	; (80042a0 <I2C_Compute_SCLL_SCLH+0x204>)
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	212c      	movs	r1, #44	; 0x2c
 800411e:	fb01 f303 	mul.w	r3, r1, r3
 8004122:	4413      	add	r3, r2
 8004124:	3308      	adds	r3, #8
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a5c      	ldr	r2, [pc, #368]	; (800429c <I2C_Compute_SCLL_SCLH+0x200>)
 800412a:	fbb2 f3f3 	udiv	r3, r2, r3
 800412e:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 8004130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004132:	643b      	str	r3, [r7, #64]	; 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8004134:	2300      	movs	r3, #0
 8004136:	637b      	str	r3, [r7, #52]	; 0x34
 8004138:	e0a3      	b.n	8004282 <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 800413a:	495a      	ldr	r1, [pc, #360]	; (80042a4 <I2C_Compute_SCLL_SCLH+0x208>)
 800413c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800413e:	4613      	mov	r3, r2
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	4413      	add	r3, r2
 8004144:	009b      	lsls	r3, r3, #2
 8004146:	440b      	add	r3, r1
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	1c5a      	adds	r2, r3, #1
 800414c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800414e:	fb02 f303 	mul.w	r3, r2, r3
 8004152:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8004154:	2300      	movs	r3, #0
 8004156:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004158:	e08c      	b.n	8004274 <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800415a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800415c:	6a3b      	ldr	r3, [r7, #32]
 800415e:	441a      	add	r2, r3
 8004160:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004162:	3301      	adds	r3, #1
 8004164:	6979      	ldr	r1, [r7, #20]
 8004166:	fb03 f101 	mul.w	r1, r3, r1
 800416a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800416c:	005b      	lsls	r3, r3, #1
 800416e:	440b      	add	r3, r1
 8004170:	4413      	add	r3, r2
 8004172:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8004174:	4a4a      	ldr	r2, [pc, #296]	; (80042a0 <I2C_Compute_SCLL_SCLH+0x204>)
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	212c      	movs	r1, #44	; 0x2c
 800417a:	fb01 f303 	mul.w	r3, r1, r3
 800417e:	4413      	add	r3, r2
 8004180:	3318      	adds	r3, #24
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	693a      	ldr	r2, [r7, #16]
 8004186:	429a      	cmp	r2, r3
 8004188:	d971      	bls.n	800426e <I2C_Compute_SCLL_SCLH+0x1d2>
 800418a:	693a      	ldr	r2, [r7, #16]
 800418c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418e:	1ad2      	subs	r2, r2, r3
 8004190:	6a3b      	ldr	r3, [r7, #32]
 8004192:	1ad3      	subs	r3, r2, r3
 8004194:	089b      	lsrs	r3, r3, #2
 8004196:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004198:	429a      	cmp	r2, r3
 800419a:	d268      	bcs.n	800426e <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800419c:	2300      	movs	r3, #0
 800419e:	63bb      	str	r3, [r7, #56]	; 0x38
 80041a0:	e062      	b.n	8004268 <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 80041a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041a4:	6a3b      	ldr	r3, [r7, #32]
 80041a6:	441a      	add	r2, r3
 80041a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041aa:	3301      	adds	r3, #1
 80041ac:	6979      	ldr	r1, [r7, #20]
 80041ae:	fb03 f101 	mul.w	r1, r3, r1
 80041b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041b4:	005b      	lsls	r3, r3, #1
 80041b6:	440b      	add	r3, r1
 80041b8:	4413      	add	r3, r2
 80041ba:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 80041bc:	693a      	ldr	r2, [r7, #16]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	441a      	add	r2, r3
 80041c2:	4937      	ldr	r1, [pc, #220]	; (80042a0 <I2C_Compute_SCLL_SCLH+0x204>)
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	202c      	movs	r0, #44	; 0x2c
 80041c8:	fb00 f303 	mul.w	r3, r0, r3
 80041cc:	440b      	add	r3, r1
 80041ce:	3320      	adds	r3, #32
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	441a      	add	r2, r3
 80041d4:	4932      	ldr	r1, [pc, #200]	; (80042a0 <I2C_Compute_SCLL_SCLH+0x204>)
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	202c      	movs	r0, #44	; 0x2c
 80041da:	fb00 f303 	mul.w	r3, r0, r3
 80041de:	440b      	add	r3, r1
 80041e0:	3324      	adds	r3, #36	; 0x24
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4413      	add	r3, r2
 80041e6:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min)
 80041e8:	68ba      	ldr	r2, [r7, #8]
 80041ea:	69bb      	ldr	r3, [r7, #24]
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d338      	bcc.n	8004262 <I2C_Compute_SCLL_SCLH+0x1c6>
 80041f0:	68ba      	ldr	r2, [r7, #8]
 80041f2:	69fb      	ldr	r3, [r7, #28]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d834      	bhi.n	8004262 <I2C_Compute_SCLL_SCLH+0x1c6>
 80041f8:	4a29      	ldr	r2, [pc, #164]	; (80042a0 <I2C_Compute_SCLL_SCLH+0x204>)
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	212c      	movs	r1, #44	; 0x2c
 80041fe:	fb01 f303 	mul.w	r3, r1, r3
 8004202:	4413      	add	r3, r2
 8004204:	331c      	adds	r3, #28
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	68fa      	ldr	r2, [r7, #12]
 800420a:	429a      	cmp	r2, r3
 800420c:	d329      	bcc.n	8004262 <I2C_Compute_SCLL_SCLH+0x1c6>
              && (ti2cclk < tscl_h))
 800420e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	429a      	cmp	r2, r3
 8004214:	d225      	bcs.n	8004262 <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 8004216:	68ba      	ldr	r2, [r7, #8]
 8004218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800421a:	1ad3      	subs	r3, r2, r3
 800421c:	633b      	str	r3, [r7, #48]	; 0x30

            if (error < 0)
 800421e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004220:	2b00      	cmp	r3, #0
 8004222:	da02      	bge.n	800422a <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 8004224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004226:	425b      	negs	r3, r3
 8004228:	633b      	str	r3, [r7, #48]	; 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 800422a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800422c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800422e:	429a      	cmp	r2, r3
 8004230:	d917      	bls.n	8004262 <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 8004232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004234:	643b      	str	r3, [r7, #64]	; 0x40
              I2c_valid_timing[count].scll = scll;
 8004236:	491b      	ldr	r1, [pc, #108]	; (80042a4 <I2C_Compute_SCLL_SCLH+0x208>)
 8004238:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800423a:	4613      	mov	r3, r2
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	4413      	add	r3, r2
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	440b      	add	r3, r1
 8004244:	3310      	adds	r3, #16
 8004246:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004248:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 800424a:	4916      	ldr	r1, [pc, #88]	; (80042a4 <I2C_Compute_SCLL_SCLH+0x208>)
 800424c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800424e:	4613      	mov	r3, r2
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	4413      	add	r3, r2
 8004254:	009b      	lsls	r3, r3, #2
 8004256:	440b      	add	r3, r1
 8004258:	330c      	adds	r3, #12
 800425a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800425c:	601a      	str	r2, [r3, #0]
              ret = count;
 800425e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004260:	647b      	str	r3, [r7, #68]	; 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8004262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004264:	3301      	adds	r3, #1
 8004266:	63bb      	str	r3, [r7, #56]	; 0x38
 8004268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800426a:	2bff      	cmp	r3, #255	; 0xff
 800426c:	d999      	bls.n	80041a2 <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800426e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004270:	3301      	adds	r3, #1
 8004272:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004274:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004276:	2bff      	cmp	r3, #255	; 0xff
 8004278:	f67f af6f 	bls.w	800415a <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800427c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800427e:	3301      	adds	r3, #1
 8004280:	637b      	str	r3, [r7, #52]	; 0x34
 8004282:	4b09      	ldr	r3, [pc, #36]	; (80042a8 <I2C_Compute_SCLL_SCLH+0x20c>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004288:	429a      	cmp	r2, r3
 800428a:	f4ff af56 	bcc.w	800413a <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 800428e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8004290:	4618      	mov	r0, r3
 8004292:	374c      	adds	r7, #76	; 0x4c
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr
 800429c:	3b9aca00 	.word	0x3b9aca00
 80042a0:	0818db64 	.word	0x0818db64
 80042a4:	200021e0 	.word	0x200021e0
 80042a8:	20002be0 	.word	0x20002be0

080042ac <I2C2_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  hI2c  I2C handler
  * @retval None
  */
static void I2C2_MspInit(const I2C_HandleTypeDef *hI2c)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b08a      	sub	sp, #40	; 0x28
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hI2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C2_SCL_GPIO_CLK_ENABLE();
 80042b4:	4b2e      	ldr	r3, [pc, #184]	; (8004370 <I2C2_MspInit+0xc4>)
 80042b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042ba:	4a2d      	ldr	r2, [pc, #180]	; (8004370 <I2C2_MspInit+0xc4>)
 80042bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042c0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80042c4:	4b2a      	ldr	r3, [pc, #168]	; (8004370 <I2C2_MspInit+0xc4>)
 80042c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ce:	613b      	str	r3, [r7, #16]
 80042d0:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C2_SDA_GPIO_CLK_ENABLE();
 80042d2:	4b27      	ldr	r3, [pc, #156]	; (8004370 <I2C2_MspInit+0xc4>)
 80042d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042d8:	4a25      	ldr	r2, [pc, #148]	; (8004370 <I2C2_MspInit+0xc4>)
 80042da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042de:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80042e2:	4b23      	ldr	r3, [pc, #140]	; (8004370 <I2C2_MspInit+0xc4>)
 80042e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ec:	60fb      	str	r3, [r7, #12]
 80042ee:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin     = BUS_I2C2_SCL_PIN;
 80042f0:	2310      	movs	r3, #16
 80042f2:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode    = GPIO_MODE_AF_OD;
 80042f4:	2312      	movs	r3, #18
 80042f6:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull    = GPIO_PULLUP;
 80042f8:	2301      	movs	r3, #1
 80042fa:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed             = GPIO_SPEED_FREQ_HIGH;
 80042fc:	2302      	movs	r3, #2
 80042fe:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate         = BUS_I2C2_SCL_AF;
 8004300:	2304      	movs	r3, #4
 8004302:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C2_SCL_GPIO_PORT, &gpio_init_structure);
 8004304:	f107 0314 	add.w	r3, r7, #20
 8004308:	4619      	mov	r1, r3
 800430a:	481a      	ldr	r0, [pc, #104]	; (8004374 <I2C2_MspInit+0xc8>)
 800430c:	f006 fb80 	bl	800aa10 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin     = BUS_I2C2_SDA_PIN;
 8004310:	2320      	movs	r3, #32
 8004312:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode    = GPIO_MODE_AF_OD;
 8004314:	2312      	movs	r3, #18
 8004316:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull    = GPIO_PULLUP;
 8004318:	2301      	movs	r3, #1
 800431a:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed             = GPIO_SPEED_FREQ_HIGH;
 800431c:	2302      	movs	r3, #2
 800431e:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate         = BUS_I2C2_SDA_AF;
 8004320:	2304      	movs	r3, #4
 8004322:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C2_SDA_GPIO_PORT, &gpio_init_structure);
 8004324:	f107 0314 	add.w	r3, r7, #20
 8004328:	4619      	mov	r1, r3
 800432a:	4812      	ldr	r0, [pc, #72]	; (8004374 <I2C2_MspInit+0xc8>)
 800432c:	f006 fb70 	bl	800aa10 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C2_CLK_ENABLE();
 8004330:	4b0f      	ldr	r3, [pc, #60]	; (8004370 <I2C2_MspInit+0xc4>)
 8004332:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004336:	4a0e      	ldr	r2, [pc, #56]	; (8004370 <I2C2_MspInit+0xc4>)
 8004338:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800433c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004340:	4b0b      	ldr	r3, [pc, #44]	; (8004370 <I2C2_MspInit+0xc4>)
 8004342:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004346:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800434a:	60bb      	str	r3, [r7, #8]
 800434c:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C2_FORCE_RESET();
 800434e:	4b08      	ldr	r3, [pc, #32]	; (8004370 <I2C2_MspInit+0xc4>)
 8004350:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004352:	4a07      	ldr	r2, [pc, #28]	; (8004370 <I2C2_MspInit+0xc4>)
 8004354:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004358:	6753      	str	r3, [r2, #116]	; 0x74

  /* Release the I2C peripheral clock reset */
  BUS_I2C2_RELEASE_RESET();
 800435a:	4b05      	ldr	r3, [pc, #20]	; (8004370 <I2C2_MspInit+0xc4>)
 800435c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800435e:	4a04      	ldr	r2, [pc, #16]	; (8004370 <I2C2_MspInit+0xc4>)
 8004360:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8004364:	6753      	str	r3, [r2, #116]	; 0x74
}
 8004366:	bf00      	nop
 8004368:	3728      	adds	r7, #40	; 0x28
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
 800436e:	bf00      	nop
 8004370:	46020c00 	.word	0x46020c00
 8004374:	42021c00 	.word	0x42021c00

08004378 <I2C2_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  hI2c  I2C handler
  * @retval None
  */
static void I2C2_MspDeInit(const I2C_HandleTypeDef *hI2c)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b088      	sub	sp, #32
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hI2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C2_SCL_PIN;
 8004380:	2310      	movs	r3, #16
 8004382:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C2_SCL_GPIO_PORT, gpio_init_structure.Pin);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	4619      	mov	r1, r3
 8004388:	480a      	ldr	r0, [pc, #40]	; (80043b4 <I2C2_MspDeInit+0x3c>)
 800438a:	f006 fd19 	bl	800adc0 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C2_SDA_PIN;
 800438e:	2320      	movs	r3, #32
 8004390:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C2_SDA_GPIO_PORT, gpio_init_structure.Pin);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	4619      	mov	r1, r3
 8004396:	4807      	ldr	r0, [pc, #28]	; (80043b4 <I2C2_MspDeInit+0x3c>)
 8004398:	f006 fd12 	bl	800adc0 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C2_CLK_DISABLE();
 800439c:	4b06      	ldr	r3, [pc, #24]	; (80043b8 <I2C2_MspDeInit+0x40>)
 800439e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80043a2:	4a05      	ldr	r2, [pc, #20]	; (80043b8 <I2C2_MspDeInit+0x40>)
 80043a4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80043a8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
}
 80043ac:	bf00      	nop
 80043ae:	3720      	adds	r7, #32
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}
 80043b4:	42021c00 	.word	0x42021c00
 80043b8:	46020c00 	.word	0x46020c00

080043bc <I2C2_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C2_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b088      	sub	sp, #32
 80043c0:	af04      	add	r7, sp, #16
 80043c2:	607b      	str	r3, [r7, #4]
 80043c4:	4603      	mov	r3, r0
 80043c6:	81fb      	strh	r3, [r7, #14]
 80043c8:	460b      	mov	r3, r1
 80043ca:	81bb      	strh	r3, [r7, #12]
 80043cc:	4613      	mov	r3, r2
 80043ce:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Write(&hbus_i2c2, DevAddr, Reg, MemAddSize, pData, Length, 10000) == HAL_OK)
 80043d0:	8978      	ldrh	r0, [r7, #10]
 80043d2:	89ba      	ldrh	r2, [r7, #12]
 80043d4:	89f9      	ldrh	r1, [r7, #14]
 80043d6:	f242 7310 	movw	r3, #10000	; 0x2710
 80043da:	9302      	str	r3, [sp, #8]
 80043dc:	8b3b      	ldrh	r3, [r7, #24]
 80043de:	9301      	str	r3, [sp, #4]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	9300      	str	r3, [sp, #0]
 80043e4:	4603      	mov	r3, r0
 80043e6:	4807      	ldr	r0, [pc, #28]	; (8004404 <I2C2_WriteReg+0x48>)
 80043e8:	f006 ff22 	bl	800b230 <HAL_I2C_Mem_Write>
 80043ec:	4603      	mov	r3, r0
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d101      	bne.n	80043f6 <I2C2_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
 80043f2:	2300      	movs	r3, #0
 80043f4:	e001      	b.n	80043fa <I2C2_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 80043f6:	f06f 0307 	mvn.w	r3, #7
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3710      	adds	r7, #16
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
 8004402:	bf00      	nop
 8004404:	20002be4 	.word	0x20002be4

08004408 <I2C2_ReadReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C2_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b088      	sub	sp, #32
 800440c:	af04      	add	r7, sp, #16
 800440e:	607b      	str	r3, [r7, #4]
 8004410:	4603      	mov	r3, r0
 8004412:	81fb      	strh	r3, [r7, #14]
 8004414:	460b      	mov	r3, r1
 8004416:	81bb      	strh	r3, [r7, #12]
 8004418:	4613      	mov	r3, r2
 800441a:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c2, DevAddr, Reg, MemAddSize, pData, Length, 10000) == HAL_OK)
 800441c:	8978      	ldrh	r0, [r7, #10]
 800441e:	89ba      	ldrh	r2, [r7, #12]
 8004420:	89f9      	ldrh	r1, [r7, #14]
 8004422:	f242 7310 	movw	r3, #10000	; 0x2710
 8004426:	9302      	str	r3, [sp, #8]
 8004428:	8b3b      	ldrh	r3, [r7, #24]
 800442a:	9301      	str	r3, [sp, #4]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	9300      	str	r3, [sp, #0]
 8004430:	4603      	mov	r3, r0
 8004432:	4807      	ldr	r0, [pc, #28]	; (8004450 <I2C2_ReadReg+0x48>)
 8004434:	f007 f810 	bl	800b458 <HAL_I2C_Mem_Read>
 8004438:	4603      	mov	r3, r0
 800443a:	2b00      	cmp	r3, #0
 800443c:	d101      	bne.n	8004442 <I2C2_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 800443e:	2300      	movs	r3, #0
 8004440:	e001      	b.n	8004446 <I2C2_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 8004442:	f06f 0307 	mvn.w	r3, #7
}
 8004446:	4618      	mov	r0, r3
 8004448:	3710      	adds	r7, #16
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
 800444e:	bf00      	nop
 8004450:	20002be4 	.word	0x20002be4

08004454 <BSP_MOTION_SENSOR_Init>:
  *         - MOTION_GYRO and/or MOTION_ACCELERO for instance 0
  *         - MOTION_MAGNETO for instance 1
  * @retval BSP status.
  */
int32_t BSP_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b084      	sub	sp, #16
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	6039      	str	r1, [r7, #0]
  int32_t status = BSP_ERROR_NONE;
 800445e:	2300      	movs	r3, #0
 8004460:	60fb      	str	r3, [r7, #12]

  if (Instance >= MOTION_SENSOR_INSTANCES_NBR)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2b01      	cmp	r3, #1
 8004466:	d903      	bls.n	8004470 <BSP_MOTION_SENSOR_Init+0x1c>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8004468:	f06f 0301 	mvn.w	r3, #1
 800446c:	60fb      	str	r3, [r7, #12]
 800446e:	e036      	b.n	80044de <BSP_MOTION_SENSOR_Init+0x8a>
  }
  else if (((Instance == 0U) && ((Functions & MOTION_MAGNETO) != 0U))
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d104      	bne.n	8004480 <BSP_MOTION_SENSOR_Init+0x2c>
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	f003 0304 	and.w	r3, r3, #4
 800447c:	2b00      	cmp	r3, #0
 800447e:	d107      	bne.n	8004490 <BSP_MOTION_SENSOR_Init+0x3c>
           || ((Instance == 1U) && ((Functions & (MOTION_GYRO | MOTION_ACCELERO)) != 0U)))
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2b01      	cmp	r3, #1
 8004484:	d108      	bne.n	8004498 <BSP_MOTION_SENSOR_Init+0x44>
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	f003 0303 	and.w	r3, r3, #3
 800448c:	2b00      	cmp	r3, #0
 800448e:	d003      	beq.n	8004498 <BSP_MOTION_SENSOR_Init+0x44>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8004490:	f06f 030a 	mvn.w	r3, #10
 8004494:	60fb      	str	r3, [r7, #12]
 8004496:	e022      	b.n	80044de <BSP_MOTION_SENSOR_Init+0x8a>
  }
  else
  {
    /* Probe the motion sensor */
    if (Instance == 0U)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d109      	bne.n	80044b2 <BSP_MOTION_SENSOR_Init+0x5e>
    {
      /* Probe the ISM330DHCX sensor */
      if (ISM330DHCX_Probe(Functions) != BSP_ERROR_NONE)
 800449e:	6838      	ldr	r0, [r7, #0]
 80044a0:	f000 fb34 	bl	8004b0c <ISM330DHCX_Probe>
 80044a4:	4603      	mov	r3, r0
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d00c      	beq.n	80044c4 <BSP_MOTION_SENSOR_Init+0x70>
      {
        status = BSP_ERROR_COMPONENT_FAILURE;
 80044aa:	f06f 0304 	mvn.w	r3, #4
 80044ae:	60fb      	str	r3, [r7, #12]
 80044b0:	e008      	b.n	80044c4 <BSP_MOTION_SENSOR_Init+0x70>
      }
    }
    else /* Instance = 1 */
    {
      /* Probe the IIS2MDC sensor */
      if (IIS2MDC_Probe(Functions) != BSP_ERROR_NONE)
 80044b2:	6838      	ldr	r0, [r7, #0]
 80044b4:	f000 fba0 	bl	8004bf8 <IIS2MDC_Probe>
 80044b8:	4603      	mov	r3, r0
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d002      	beq.n	80044c4 <BSP_MOTION_SENSOR_Init+0x70>
      {
        status = BSP_ERROR_COMPONENT_FAILURE;
 80044be:	f06f 0304 	mvn.w	r3, #4
 80044c2:	60fb      	str	r3, [r7, #12]
      }
    }

    if (status == BSP_ERROR_NONE)
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d109      	bne.n	80044de <BSP_MOTION_SENSOR_Init+0x8a>
    {
      /* Store current initialized functions */
      Motion_Sensor_Ctx[Instance].Functions |= Functions;
 80044ca:	4a07      	ldr	r2, [pc, #28]	; (80044e8 <BSP_MOTION_SENSOR_Init+0x94>)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	431a      	orrs	r2, r3
 80044d6:	4904      	ldr	r1, [pc, #16]	; (80044e8 <BSP_MOTION_SENSOR_Init+0x94>)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
  }
  return status;
 80044de:	68fb      	ldr	r3, [r7, #12]
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3710      	adds	r7, #16
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}
 80044e8:	20002c38 	.word	0x20002c38

080044ec <BSP_MOTION_SENSOR_GetCapabilities>:
  * @param  Instance Motion sensor instance.
  * @param  Capabilities Pointer to motion sensor capabilities.
  * @retval BSP status.
  */
int32_t BSP_MOTION_SENSOR_GetCapabilities(const uint32_t Instance, MOTION_SENSOR_Capabilities_t *Capabilities)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b084      	sub	sp, #16
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	6039      	str	r1, [r7, #0]
  int32_t status = BSP_ERROR_NONE;
 80044f6:	2300      	movs	r3, #0
 80044f8:	60fb      	str	r3, [r7, #12]

  if ((Instance >= MOTION_SENSOR_INSTANCES_NBR) || (Capabilities == NULL))
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d802      	bhi.n	8004506 <BSP_MOTION_SENSOR_GetCapabilities+0x1a>
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d103      	bne.n	800450e <BSP_MOTION_SENSOR_GetCapabilities+0x22>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8004506:	f06f 0301 	mvn.w	r3, #1
 800450a:	60fb      	str	r3, [r7, #12]
 800450c:	e01b      	b.n	8004546 <BSP_MOTION_SENSOR_GetCapabilities+0x5a>
  }
  else if (Motion_Sensor_Ctx[Instance].Functions == 0U)
 800450e:	4a10      	ldr	r2, [pc, #64]	; (8004550 <BSP_MOTION_SENSOR_GetCapabilities+0x64>)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d103      	bne.n	8004522 <BSP_MOTION_SENSOR_GetCapabilities+0x36>
  {
    /* Driver not initialized */
    status = BSP_ERROR_NO_INIT;
 800451a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800451e:	60fb      	str	r3, [r7, #12]
 8004520:	e011      	b.n	8004546 <BSP_MOTION_SENSOR_GetCapabilities+0x5a>
  }
  else
  {
    /* Get the capabilities of the motion sensor */
    if (Motion_Sensor_Drv[Instance]->GetCapabilities(Motion_Sensor_CompObj[Instance], Capabilities) < 0)
 8004522:	4a0c      	ldr	r2, [pc, #48]	; (8004554 <BSP_MOTION_SENSOR_GetCapabilities+0x68>)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	490a      	ldr	r1, [pc, #40]	; (8004558 <BSP_MOTION_SENSOR_GetCapabilities+0x6c>)
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004534:	6839      	ldr	r1, [r7, #0]
 8004536:	4610      	mov	r0, r2
 8004538:	4798      	blx	r3
 800453a:	4603      	mov	r3, r0
 800453c:	2b00      	cmp	r3, #0
 800453e:	da02      	bge.n	8004546 <BSP_MOTION_SENSOR_GetCapabilities+0x5a>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8004540:	f06f 0304 	mvn.w	r3, #4
 8004544:	60fb      	str	r3, [r7, #12]
    }
  }

  return status;
 8004546:	68fb      	ldr	r3, [r7, #12]
}
 8004548:	4618      	mov	r0, r3
 800454a:	3710      	adds	r7, #16
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}
 8004550:	20002c38 	.word	0x20002c38
 8004554:	20002c48 	.word	0x20002c48
 8004558:	20002c40 	.word	0x20002c40

0800455c <BSP_MOTION_SENSOR_ReadID>:
  * @param  Instance Motion sensor instance.
  * @param  Id Pointer to motion sensor ID.
  * @retval BSP status.
  */
int32_t BSP_MOTION_SENSOR_ReadID(const uint32_t Instance, uint8_t *Id)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b084      	sub	sp, #16
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	6039      	str	r1, [r7, #0]
  int32_t status = BSP_ERROR_NONE;
 8004566:	2300      	movs	r3, #0
 8004568:	60fb      	str	r3, [r7, #12]

  if ((Instance >= MOTION_SENSOR_INSTANCES_NBR) || (Id == NULL))
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2b01      	cmp	r3, #1
 800456e:	d802      	bhi.n	8004576 <BSP_MOTION_SENSOR_ReadID+0x1a>
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d103      	bne.n	800457e <BSP_MOTION_SENSOR_ReadID+0x22>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8004576:	f06f 0301 	mvn.w	r3, #1
 800457a:	60fb      	str	r3, [r7, #12]
 800457c:	e01b      	b.n	80045b6 <BSP_MOTION_SENSOR_ReadID+0x5a>
  }
  else if (Motion_Sensor_Ctx[Instance].Functions == 0U)
 800457e:	4a10      	ldr	r2, [pc, #64]	; (80045c0 <BSP_MOTION_SENSOR_ReadID+0x64>)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d103      	bne.n	8004592 <BSP_MOTION_SENSOR_ReadID+0x36>
  {
    /* Driver not initialized */
    status = BSP_ERROR_NO_INIT;
 800458a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800458e:	60fb      	str	r3, [r7, #12]
 8004590:	e011      	b.n	80045b6 <BSP_MOTION_SENSOR_ReadID+0x5a>
  }
  else
  {
    /* Read the motion sensor ID */
    if (Motion_Sensor_Drv[Instance]->ReadID(Motion_Sensor_CompObj[Instance], Id) < 0)
 8004592:	4a0c      	ldr	r2, [pc, #48]	; (80045c4 <BSP_MOTION_SENSOR_ReadID+0x68>)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	490a      	ldr	r1, [pc, #40]	; (80045c8 <BSP_MOTION_SENSOR_ReadID+0x6c>)
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80045a4:	6839      	ldr	r1, [r7, #0]
 80045a6:	4610      	mov	r0, r2
 80045a8:	4798      	blx	r3
 80045aa:	4603      	mov	r3, r0
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	da02      	bge.n	80045b6 <BSP_MOTION_SENSOR_ReadID+0x5a>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 80045b0:	f06f 0304 	mvn.w	r3, #4
 80045b4:	60fb      	str	r3, [r7, #12]
    }
  }

  return status;
 80045b6:	68fb      	ldr	r3, [r7, #12]
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3710      	adds	r7, #16
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}
 80045c0:	20002c38 	.word	0x20002c38
 80045c4:	20002c48 	.word	0x20002c48
 80045c8:	20002c40 	.word	0x20002c40

080045cc <BSP_MOTION_SENSOR_Enable>:
  *         - MOTION_GYRO or MOTION_ACCELERO for instance 0
  *         - MOTION_MAGNETO for instance 1
  * @retval BSP status.
  */
int32_t BSP_MOTION_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b084      	sub	sp, #16
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	6039      	str	r1, [r7, #0]
  int32_t status = BSP_ERROR_NONE;
 80045d6:	2300      	movs	r3, #0
 80045d8:	60fb      	str	r3, [r7, #12]
  uint8_t index;

  if (Instance >= MOTION_SENSOR_INSTANCES_NBR)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d903      	bls.n	80045e8 <BSP_MOTION_SENSOR_Enable+0x1c>
  {
    status = BSP_ERROR_WRONG_PARAM;
 80045e0:	f06f 0301 	mvn.w	r3, #1
 80045e4:	60fb      	str	r3, [r7, #12]
 80045e6:	e041      	b.n	800466c <BSP_MOTION_SENSOR_Enable+0xa0>
  }
  else if (((Instance == 0U) && ((Function & MOTION_MAGNETO) != 0U))
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d104      	bne.n	80045f8 <BSP_MOTION_SENSOR_Enable+0x2c>
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	f003 0304 	and.w	r3, r3, #4
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d107      	bne.n	8004608 <BSP_MOTION_SENSOR_Enable+0x3c>
           || ((Instance == 1U) && ((Function & (MOTION_GYRO | MOTION_ACCELERO)) != 0U)))
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d108      	bne.n	8004610 <BSP_MOTION_SENSOR_Enable+0x44>
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	f003 0303 	and.w	r3, r3, #3
 8004604:	2b00      	cmp	r3, #0
 8004606:	d003      	beq.n	8004610 <BSP_MOTION_SENSOR_Enable+0x44>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8004608:	f06f 030a 	mvn.w	r3, #10
 800460c:	60fb      	str	r3, [r7, #12]
 800460e:	e02d      	b.n	800466c <BSP_MOTION_SENSOR_Enable+0xa0>
  }
  else if ((Motion_Sensor_Ctx[Instance].Functions & Function) == 0U)
 8004610:	4a19      	ldr	r2, [pc, #100]	; (8004678 <BSP_MOTION_SENSOR_Enable+0xac>)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	4013      	ands	r3, r2
 800461c:	2b00      	cmp	r3, #0
 800461e:	d103      	bne.n	8004628 <BSP_MOTION_SENSOR_Enable+0x5c>
  {
    /* Driver not initialized */
    status = BSP_ERROR_NO_INIT;
 8004620:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004624:	60fb      	str	r3, [r7, #12]
 8004626:	e021      	b.n	800466c <BSP_MOTION_SENSOR_Enable+0xa0>
  }
  else
  {
    /* Enable the motion sensor function */
    index = (Function == MOTION_GYRO) ? GYRO_ID : ((Function == MOTION_ACCELERO) ? ACCELERO_ID : MAGNETO_ID);
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	2b01      	cmp	r3, #1
 800462c:	d006      	beq.n	800463c <BSP_MOTION_SENSOR_Enable+0x70>
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	2b02      	cmp	r3, #2
 8004632:	d101      	bne.n	8004638 <BSP_MOTION_SENSOR_Enable+0x6c>
 8004634:	2301      	movs	r3, #1
 8004636:	e002      	b.n	800463e <BSP_MOTION_SENSOR_Enable+0x72>
 8004638:	2302      	movs	r3, #2
 800463a:	e000      	b.n	800463e <BSP_MOTION_SENSOR_Enable+0x72>
 800463c:	2300      	movs	r3, #0
 800463e:	72fb      	strb	r3, [r7, #11]
    if (Motion_Sensor_FuncDrv[Instance][index]->Enable(Motion_Sensor_CompObj[Instance]) < 0)
 8004640:	7af9      	ldrb	r1, [r7, #11]
 8004642:	480e      	ldr	r0, [pc, #56]	; (800467c <BSP_MOTION_SENSOR_Enable+0xb0>)
 8004644:	687a      	ldr	r2, [r7, #4]
 8004646:	4613      	mov	r3, r2
 8004648:	005b      	lsls	r3, r3, #1
 800464a:	4413      	add	r3, r2
 800464c:	440b      	add	r3, r1
 800464e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	490a      	ldr	r1, [pc, #40]	; (8004680 <BSP_MOTION_SENSOR_Enable+0xb4>)
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800465c:	4610      	mov	r0, r2
 800465e:	4798      	blx	r3
 8004660:	4603      	mov	r3, r0
 8004662:	2b00      	cmp	r3, #0
 8004664:	da02      	bge.n	800466c <BSP_MOTION_SENSOR_Enable+0xa0>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8004666:	f06f 0304 	mvn.w	r3, #4
 800466a:	60fb      	str	r3, [r7, #12]
    }
  }

  return status;
 800466c:	68fb      	ldr	r3, [r7, #12]
}
 800466e:	4618      	mov	r0, r3
 8004670:	3710      	adds	r7, #16
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop
 8004678:	20002c38 	.word	0x20002c38
 800467c:	20002c50 	.word	0x20002c50
 8004680:	20002c40 	.word	0x20002c40

08004684 <BSP_MOTION_SENSOR_GetAxes>:
  *         - MOTION_MAGNETO for instance 1
  * @param  Axes Pointer to motion sensor axes.
  * @retval BSP status.
  */
int32_t BSP_MOTION_SENSOR_GetAxes(const uint32_t Instance, uint32_t Function, BSP_MOTION_SENSOR_Axes_t *Axes)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b086      	sub	sp, #24
 8004688:	af00      	add	r7, sp, #0
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	60b9      	str	r1, [r7, #8]
 800468e:	607a      	str	r2, [r7, #4]
  int32_t status = BSP_ERROR_NONE;
 8004690:	2300      	movs	r3, #0
 8004692:	617b      	str	r3, [r7, #20]
  uint8_t index;

  if ((Instance >= MOTION_SENSOR_INSTANCES_NBR) || (Axes == NULL))
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2b01      	cmp	r3, #1
 8004698:	d802      	bhi.n	80046a0 <BSP_MOTION_SENSOR_GetAxes+0x1c>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d103      	bne.n	80046a8 <BSP_MOTION_SENSOR_GetAxes+0x24>
  {
    status = BSP_ERROR_WRONG_PARAM;
 80046a0:	f06f 0301 	mvn.w	r3, #1
 80046a4:	617b      	str	r3, [r7, #20]
 80046a6:	e042      	b.n	800472e <BSP_MOTION_SENSOR_GetAxes+0xaa>
  }
  else if (((Instance == 0U) && ((Function & MOTION_MAGNETO) != 0U))
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d104      	bne.n	80046b8 <BSP_MOTION_SENSOR_GetAxes+0x34>
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	f003 0304 	and.w	r3, r3, #4
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d107      	bne.n	80046c8 <BSP_MOTION_SENSOR_GetAxes+0x44>
           || ((Instance == 1U) && ((Function & (MOTION_GYRO | MOTION_ACCELERO)) != 0U)))
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d108      	bne.n	80046d0 <BSP_MOTION_SENSOR_GetAxes+0x4c>
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	f003 0303 	and.w	r3, r3, #3
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d003      	beq.n	80046d0 <BSP_MOTION_SENSOR_GetAxes+0x4c>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 80046c8:	f06f 030a 	mvn.w	r3, #10
 80046cc:	617b      	str	r3, [r7, #20]
 80046ce:	e02e      	b.n	800472e <BSP_MOTION_SENSOR_GetAxes+0xaa>
  }
  else if ((Motion_Sensor_Ctx[Instance].Functions & Function) == 0U)
 80046d0:	4a19      	ldr	r2, [pc, #100]	; (8004738 <BSP_MOTION_SENSOR_GetAxes+0xb4>)
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	4013      	ands	r3, r2
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d103      	bne.n	80046e8 <BSP_MOTION_SENSOR_GetAxes+0x64>
  {
    status = BSP_ERROR_NO_INIT;
 80046e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80046e4:	617b      	str	r3, [r7, #20]
 80046e6:	e022      	b.n	800472e <BSP_MOTION_SENSOR_GetAxes+0xaa>
  }
  else
  {
    /* Get the motion sensor axes */
    index = (Function == MOTION_GYRO) ? GYRO_ID : ((Function == MOTION_ACCELERO) ? ACCELERO_ID : MAGNETO_ID);
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d006      	beq.n	80046fc <BSP_MOTION_SENSOR_GetAxes+0x78>
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	2b02      	cmp	r3, #2
 80046f2:	d101      	bne.n	80046f8 <BSP_MOTION_SENSOR_GetAxes+0x74>
 80046f4:	2301      	movs	r3, #1
 80046f6:	e002      	b.n	80046fe <BSP_MOTION_SENSOR_GetAxes+0x7a>
 80046f8:	2302      	movs	r3, #2
 80046fa:	e000      	b.n	80046fe <BSP_MOTION_SENSOR_GetAxes+0x7a>
 80046fc:	2300      	movs	r3, #0
 80046fe:	74fb      	strb	r3, [r7, #19]
    if (Motion_Sensor_FuncDrv[Instance][index]->GetAxes(Motion_Sensor_CompObj[Instance], Axes) < 0)
 8004700:	7cf9      	ldrb	r1, [r7, #19]
 8004702:	480e      	ldr	r0, [pc, #56]	; (800473c <BSP_MOTION_SENSOR_GetAxes+0xb8>)
 8004704:	68fa      	ldr	r2, [r7, #12]
 8004706:	4613      	mov	r3, r2
 8004708:	005b      	lsls	r3, r3, #1
 800470a:	4413      	add	r3, r2
 800470c:	440b      	add	r3, r1
 800470e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004712:	69db      	ldr	r3, [r3, #28]
 8004714:	490a      	ldr	r1, [pc, #40]	; (8004740 <BSP_MOTION_SENSOR_GetAxes+0xbc>)
 8004716:	68fa      	ldr	r2, [r7, #12]
 8004718:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800471c:	6879      	ldr	r1, [r7, #4]
 800471e:	4610      	mov	r0, r2
 8004720:	4798      	blx	r3
 8004722:	4603      	mov	r3, r0
 8004724:	2b00      	cmp	r3, #0
 8004726:	da02      	bge.n	800472e <BSP_MOTION_SENSOR_GetAxes+0xaa>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8004728:	f06f 0304 	mvn.w	r3, #4
 800472c:	617b      	str	r3, [r7, #20]
    }
  }

  return status;
 800472e:	697b      	ldr	r3, [r7, #20]
}
 8004730:	4618      	mov	r0, r3
 8004732:	3718      	adds	r7, #24
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}
 8004738:	20002c38 	.word	0x20002c38
 800473c:	20002c50 	.word	0x20002c50
 8004740:	20002c40 	.word	0x20002c40

08004744 <BSP_MOTION_SENSOR_GetSensitivity>:
  *         - MOTION_MAGNETO for instance 1
  * @param  Sensitivity Pointer to sensitivity.
  * @retval BSP status.
  */
int32_t BSP_MOTION_SENSOR_GetSensitivity(const uint32_t Instance, uint32_t Function, float_t *Sensitivity)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b086      	sub	sp, #24
 8004748:	af00      	add	r7, sp, #0
 800474a:	60f8      	str	r0, [r7, #12]
 800474c:	60b9      	str	r1, [r7, #8]
 800474e:	607a      	str	r2, [r7, #4]
  int32_t status = BSP_ERROR_NONE;
 8004750:	2300      	movs	r3, #0
 8004752:	617b      	str	r3, [r7, #20]
  uint8_t index;

  if ((Instance >= MOTION_SENSOR_INSTANCES_NBR) || (Sensitivity == NULL))
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2b01      	cmp	r3, #1
 8004758:	d802      	bhi.n	8004760 <BSP_MOTION_SENSOR_GetSensitivity+0x1c>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d103      	bne.n	8004768 <BSP_MOTION_SENSOR_GetSensitivity+0x24>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8004760:	f06f 0301 	mvn.w	r3, #1
 8004764:	617b      	str	r3, [r7, #20]
 8004766:	e042      	b.n	80047ee <BSP_MOTION_SENSOR_GetSensitivity+0xaa>
  }
  else if (((Instance == 0U) && ((Function & MOTION_MAGNETO) != 0U))
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d104      	bne.n	8004778 <BSP_MOTION_SENSOR_GetSensitivity+0x34>
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	f003 0304 	and.w	r3, r3, #4
 8004774:	2b00      	cmp	r3, #0
 8004776:	d107      	bne.n	8004788 <BSP_MOTION_SENSOR_GetSensitivity+0x44>
           || ((Instance == 1U) && ((Function & (MOTION_GYRO | MOTION_ACCELERO)) != 0U)))
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2b01      	cmp	r3, #1
 800477c:	d108      	bne.n	8004790 <BSP_MOTION_SENSOR_GetSensitivity+0x4c>
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	f003 0303 	and.w	r3, r3, #3
 8004784:	2b00      	cmp	r3, #0
 8004786:	d003      	beq.n	8004790 <BSP_MOTION_SENSOR_GetSensitivity+0x4c>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8004788:	f06f 030a 	mvn.w	r3, #10
 800478c:	617b      	str	r3, [r7, #20]
 800478e:	e02e      	b.n	80047ee <BSP_MOTION_SENSOR_GetSensitivity+0xaa>
  }
  else if ((Motion_Sensor_Ctx[Instance].Functions & Function) == 0U)
 8004790:	4a19      	ldr	r2, [pc, #100]	; (80047f8 <BSP_MOTION_SENSOR_GetSensitivity+0xb4>)
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	4013      	ands	r3, r2
 800479c:	2b00      	cmp	r3, #0
 800479e:	d103      	bne.n	80047a8 <BSP_MOTION_SENSOR_GetSensitivity+0x64>
  {
    status = BSP_ERROR_NO_INIT;
 80047a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80047a4:	617b      	str	r3, [r7, #20]
 80047a6:	e022      	b.n	80047ee <BSP_MOTION_SENSOR_GetSensitivity+0xaa>
  }
  else
  {
    /* Get the motion sensor sensitivity */
    index = (Function == MOTION_GYRO) ? GYRO_ID : ((Function == MOTION_ACCELERO) ? ACCELERO_ID : MAGNETO_ID);
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d006      	beq.n	80047bc <BSP_MOTION_SENSOR_GetSensitivity+0x78>
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	2b02      	cmp	r3, #2
 80047b2:	d101      	bne.n	80047b8 <BSP_MOTION_SENSOR_GetSensitivity+0x74>
 80047b4:	2301      	movs	r3, #1
 80047b6:	e002      	b.n	80047be <BSP_MOTION_SENSOR_GetSensitivity+0x7a>
 80047b8:	2302      	movs	r3, #2
 80047ba:	e000      	b.n	80047be <BSP_MOTION_SENSOR_GetSensitivity+0x7a>
 80047bc:	2300      	movs	r3, #0
 80047be:	74fb      	strb	r3, [r7, #19]
    if (Motion_Sensor_FuncDrv[Instance][index]->GetSensitivity(Motion_Sensor_CompObj[Instance], Sensitivity) < 0)
 80047c0:	7cf9      	ldrb	r1, [r7, #19]
 80047c2:	480e      	ldr	r0, [pc, #56]	; (80047fc <BSP_MOTION_SENSOR_GetSensitivity+0xb8>)
 80047c4:	68fa      	ldr	r2, [r7, #12]
 80047c6:	4613      	mov	r3, r2
 80047c8:	005b      	lsls	r3, r3, #1
 80047ca:	4413      	add	r3, r2
 80047cc:	440b      	add	r3, r1
 80047ce:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	490a      	ldr	r1, [pc, #40]	; (8004800 <BSP_MOTION_SENSOR_GetSensitivity+0xbc>)
 80047d6:	68fa      	ldr	r2, [r7, #12]
 80047d8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80047dc:	6879      	ldr	r1, [r7, #4]
 80047de:	4610      	mov	r0, r2
 80047e0:	4798      	blx	r3
 80047e2:	4603      	mov	r3, r0
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	da02      	bge.n	80047ee <BSP_MOTION_SENSOR_GetSensitivity+0xaa>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 80047e8:	f06f 0304 	mvn.w	r3, #4
 80047ec:	617b      	str	r3, [r7, #20]
    }
  }

  return status;
 80047ee:	697b      	ldr	r3, [r7, #20]
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3718      	adds	r7, #24
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}
 80047f8:	20002c38 	.word	0x20002c38
 80047fc:	20002c50 	.word	0x20002c50
 8004800:	20002c40 	.word	0x20002c40

08004804 <BSP_MOTION_SENSOR_GetOutputDataRate>:
  *         - MOTION_MAGNETO for instance 1
  * @param  Odr Pointer to output data rate.
  * @retval BSP status.
  */
int32_t BSP_MOTION_SENSOR_GetOutputDataRate(const uint32_t Instance, uint32_t Function, float_t *Odr)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b086      	sub	sp, #24
 8004808:	af00      	add	r7, sp, #0
 800480a:	60f8      	str	r0, [r7, #12]
 800480c:	60b9      	str	r1, [r7, #8]
 800480e:	607a      	str	r2, [r7, #4]
  int32_t status = BSP_ERROR_NONE;
 8004810:	2300      	movs	r3, #0
 8004812:	617b      	str	r3, [r7, #20]
  uint8_t index;

  if ((Instance >= MOTION_SENSOR_INSTANCES_NBR) || (Odr == NULL))
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2b01      	cmp	r3, #1
 8004818:	d802      	bhi.n	8004820 <BSP_MOTION_SENSOR_GetOutputDataRate+0x1c>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d103      	bne.n	8004828 <BSP_MOTION_SENSOR_GetOutputDataRate+0x24>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8004820:	f06f 0301 	mvn.w	r3, #1
 8004824:	617b      	str	r3, [r7, #20]
 8004826:	e042      	b.n	80048ae <BSP_MOTION_SENSOR_GetOutputDataRate+0xaa>
  }
  else if (((Instance == 0U) && ((Function & MOTION_MAGNETO) != 0U))
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d104      	bne.n	8004838 <BSP_MOTION_SENSOR_GetOutputDataRate+0x34>
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	f003 0304 	and.w	r3, r3, #4
 8004834:	2b00      	cmp	r3, #0
 8004836:	d107      	bne.n	8004848 <BSP_MOTION_SENSOR_GetOutputDataRate+0x44>
           || ((Instance == 1U) && ((Function & (MOTION_GYRO | MOTION_ACCELERO)) != 0U)))
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2b01      	cmp	r3, #1
 800483c:	d108      	bne.n	8004850 <BSP_MOTION_SENSOR_GetOutputDataRate+0x4c>
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	f003 0303 	and.w	r3, r3, #3
 8004844:	2b00      	cmp	r3, #0
 8004846:	d003      	beq.n	8004850 <BSP_MOTION_SENSOR_GetOutputDataRate+0x4c>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8004848:	f06f 030a 	mvn.w	r3, #10
 800484c:	617b      	str	r3, [r7, #20]
 800484e:	e02e      	b.n	80048ae <BSP_MOTION_SENSOR_GetOutputDataRate+0xaa>
  }
  else if ((Motion_Sensor_Ctx[Instance].Functions & Function) == 0U)
 8004850:	4a19      	ldr	r2, [pc, #100]	; (80048b8 <BSP_MOTION_SENSOR_GetOutputDataRate+0xb4>)
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	4013      	ands	r3, r2
 800485c:	2b00      	cmp	r3, #0
 800485e:	d103      	bne.n	8004868 <BSP_MOTION_SENSOR_GetOutputDataRate+0x64>
  {
    status = BSP_ERROR_NO_INIT;
 8004860:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004864:	617b      	str	r3, [r7, #20]
 8004866:	e022      	b.n	80048ae <BSP_MOTION_SENSOR_GetOutputDataRate+0xaa>
  }
  else
  {
    /* Get the motion sensor output data rate */
    index = (Function == MOTION_GYRO) ? GYRO_ID : ((Function == MOTION_ACCELERO) ? ACCELERO_ID : MAGNETO_ID);
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	2b01      	cmp	r3, #1
 800486c:	d006      	beq.n	800487c <BSP_MOTION_SENSOR_GetOutputDataRate+0x78>
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	2b02      	cmp	r3, #2
 8004872:	d101      	bne.n	8004878 <BSP_MOTION_SENSOR_GetOutputDataRate+0x74>
 8004874:	2301      	movs	r3, #1
 8004876:	e002      	b.n	800487e <BSP_MOTION_SENSOR_GetOutputDataRate+0x7a>
 8004878:	2302      	movs	r3, #2
 800487a:	e000      	b.n	800487e <BSP_MOTION_SENSOR_GetOutputDataRate+0x7a>
 800487c:	2300      	movs	r3, #0
 800487e:	74fb      	strb	r3, [r7, #19]
    if (Motion_Sensor_FuncDrv[Instance][index]->GetOutputDataRate(Motion_Sensor_CompObj[Instance], Odr) < 0)
 8004880:	7cf9      	ldrb	r1, [r7, #19]
 8004882:	480e      	ldr	r0, [pc, #56]	; (80048bc <BSP_MOTION_SENSOR_GetOutputDataRate+0xb8>)
 8004884:	68fa      	ldr	r2, [r7, #12]
 8004886:	4613      	mov	r3, r2
 8004888:	005b      	lsls	r3, r3, #1
 800488a:	4413      	add	r3, r2
 800488c:	440b      	add	r3, r1
 800488e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	490a      	ldr	r1, [pc, #40]	; (80048c0 <BSP_MOTION_SENSOR_GetOutputDataRate+0xbc>)
 8004896:	68fa      	ldr	r2, [r7, #12]
 8004898:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800489c:	6879      	ldr	r1, [r7, #4]
 800489e:	4610      	mov	r0, r2
 80048a0:	4798      	blx	r3
 80048a2:	4603      	mov	r3, r0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	da02      	bge.n	80048ae <BSP_MOTION_SENSOR_GetOutputDataRate+0xaa>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 80048a8:	f06f 0304 	mvn.w	r3, #4
 80048ac:	617b      	str	r3, [r7, #20]
    }
  }

  return status;
 80048ae:	697b      	ldr	r3, [r7, #20]
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3718      	adds	r7, #24
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}
 80048b8:	20002c38 	.word	0x20002c38
 80048bc:	20002c50 	.word	0x20002c50
 80048c0:	20002c40 	.word	0x20002c40

080048c4 <BSP_MOTION_SENSOR_SetOutputDataRate>:
  *         - MOTION_MAGNETO for instance 1
  * @param  Odr Output data rate.
  * @retval BSP status.
  */
int32_t BSP_MOTION_SENSOR_SetOutputDataRate(uint32_t Instance, uint32_t Function, float_t Odr)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b086      	sub	sp, #24
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	60f8      	str	r0, [r7, #12]
 80048cc:	60b9      	str	r1, [r7, #8]
 80048ce:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t status = BSP_ERROR_NONE;
 80048d2:	2300      	movs	r3, #0
 80048d4:	617b      	str	r3, [r7, #20]
  uint8_t index;

  if (Instance >= MOTION_SENSOR_INSTANCES_NBR)
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d903      	bls.n	80048e4 <BSP_MOTION_SENSOR_SetOutputDataRate+0x20>
  {
    status = BSP_ERROR_WRONG_PARAM;
 80048dc:	f06f 0301 	mvn.w	r3, #1
 80048e0:	617b      	str	r3, [r7, #20]
 80048e2:	e043      	b.n	800496c <BSP_MOTION_SENSOR_SetOutputDataRate+0xa8>
  }
  else if (((Instance == 0U) && ((Function & MOTION_MAGNETO) != 0U))
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d104      	bne.n	80048f4 <BSP_MOTION_SENSOR_SetOutputDataRate+0x30>
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	f003 0304 	and.w	r3, r3, #4
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d107      	bne.n	8004904 <BSP_MOTION_SENSOR_SetOutputDataRate+0x40>
           || ((Instance == 1U) && ((Function & (MOTION_GYRO | MOTION_ACCELERO)) != 0U)))
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d108      	bne.n	800490c <BSP_MOTION_SENSOR_SetOutputDataRate+0x48>
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	f003 0303 	and.w	r3, r3, #3
 8004900:	2b00      	cmp	r3, #0
 8004902:	d003      	beq.n	800490c <BSP_MOTION_SENSOR_SetOutputDataRate+0x48>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8004904:	f06f 030a 	mvn.w	r3, #10
 8004908:	617b      	str	r3, [r7, #20]
 800490a:	e02f      	b.n	800496c <BSP_MOTION_SENSOR_SetOutputDataRate+0xa8>
  }
  else if ((Motion_Sensor_Ctx[Instance].Functions & Function) == 0U)
 800490c:	4a1a      	ldr	r2, [pc, #104]	; (8004978 <BSP_MOTION_SENSOR_SetOutputDataRate+0xb4>)
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	4013      	ands	r3, r2
 8004918:	2b00      	cmp	r3, #0
 800491a:	d103      	bne.n	8004924 <BSP_MOTION_SENSOR_SetOutputDataRate+0x60>
  {
    status = BSP_ERROR_NO_INIT;
 800491c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004920:	617b      	str	r3, [r7, #20]
 8004922:	e023      	b.n	800496c <BSP_MOTION_SENSOR_SetOutputDataRate+0xa8>
  }
  else
  {
    /* Set the motion sensor output data rate */
    index = (Function == MOTION_GYRO) ? GYRO_ID : ((Function == MOTION_ACCELERO) ? ACCELERO_ID : MAGNETO_ID);
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	2b01      	cmp	r3, #1
 8004928:	d006      	beq.n	8004938 <BSP_MOTION_SENSOR_SetOutputDataRate+0x74>
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	2b02      	cmp	r3, #2
 800492e:	d101      	bne.n	8004934 <BSP_MOTION_SENSOR_SetOutputDataRate+0x70>
 8004930:	2301      	movs	r3, #1
 8004932:	e002      	b.n	800493a <BSP_MOTION_SENSOR_SetOutputDataRate+0x76>
 8004934:	2302      	movs	r3, #2
 8004936:	e000      	b.n	800493a <BSP_MOTION_SENSOR_SetOutputDataRate+0x76>
 8004938:	2300      	movs	r3, #0
 800493a:	74fb      	strb	r3, [r7, #19]
    if (Motion_Sensor_FuncDrv[Instance][index]->SetOutputDataRate(Motion_Sensor_CompObj[Instance], Odr) < 0)
 800493c:	7cf9      	ldrb	r1, [r7, #19]
 800493e:	480f      	ldr	r0, [pc, #60]	; (800497c <BSP_MOTION_SENSOR_SetOutputDataRate+0xb8>)
 8004940:	68fa      	ldr	r2, [r7, #12]
 8004942:	4613      	mov	r3, r2
 8004944:	005b      	lsls	r3, r3, #1
 8004946:	4413      	add	r3, r2
 8004948:	440b      	add	r3, r1
 800494a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800494e:	691b      	ldr	r3, [r3, #16]
 8004950:	490b      	ldr	r1, [pc, #44]	; (8004980 <BSP_MOTION_SENSOR_SetOutputDataRate+0xbc>)
 8004952:	68fa      	ldr	r2, [r7, #12]
 8004954:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004958:	ed97 0a01 	vldr	s0, [r7, #4]
 800495c:	4610      	mov	r0, r2
 800495e:	4798      	blx	r3
 8004960:	4603      	mov	r3, r0
 8004962:	2b00      	cmp	r3, #0
 8004964:	da02      	bge.n	800496c <BSP_MOTION_SENSOR_SetOutputDataRate+0xa8>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8004966:	f06f 0304 	mvn.w	r3, #4
 800496a:	617b      	str	r3, [r7, #20]
    }
  }

  return status;
 800496c:	697b      	ldr	r3, [r7, #20]
}
 800496e:	4618      	mov	r0, r3
 8004970:	3718      	adds	r7, #24
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
 8004976:	bf00      	nop
 8004978:	20002c38 	.word	0x20002c38
 800497c:	20002c50 	.word	0x20002c50
 8004980:	20002c40 	.word	0x20002c40

08004984 <BSP_MOTION_SENSOR_GetFullScale>:
  *         - MOTION_MAGNETO for instance 1
  * @param  Fullscale Pointer to full scale value.
  * @retval BSP status.
  */
int32_t BSP_MOTION_SENSOR_GetFullScale(const uint32_t Instance, uint32_t Function, int32_t *Fullscale)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b086      	sub	sp, #24
 8004988:	af00      	add	r7, sp, #0
 800498a:	60f8      	str	r0, [r7, #12]
 800498c:	60b9      	str	r1, [r7, #8]
 800498e:	607a      	str	r2, [r7, #4]
  int32_t status = BSP_ERROR_NONE;
 8004990:	2300      	movs	r3, #0
 8004992:	617b      	str	r3, [r7, #20]
  uint8_t index;

  if ((Instance >= MOTION_SENSOR_INSTANCES_NBR) || (Fullscale == NULL))
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2b01      	cmp	r3, #1
 8004998:	d802      	bhi.n	80049a0 <BSP_MOTION_SENSOR_GetFullScale+0x1c>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d103      	bne.n	80049a8 <BSP_MOTION_SENSOR_GetFullScale+0x24>
  {
    status = BSP_ERROR_WRONG_PARAM;
 80049a0:	f06f 0301 	mvn.w	r3, #1
 80049a4:	617b      	str	r3, [r7, #20]
 80049a6:	e042      	b.n	8004a2e <BSP_MOTION_SENSOR_GetFullScale+0xaa>
  }
  else if (((Instance == 0U) && ((Function & MOTION_MAGNETO) != 0U))
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d104      	bne.n	80049b8 <BSP_MOTION_SENSOR_GetFullScale+0x34>
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	f003 0304 	and.w	r3, r3, #4
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d107      	bne.n	80049c8 <BSP_MOTION_SENSOR_GetFullScale+0x44>
           || ((Instance == 1U) && ((Function & (MOTION_GYRO | MOTION_ACCELERO)) != 0U)))
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d108      	bne.n	80049d0 <BSP_MOTION_SENSOR_GetFullScale+0x4c>
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	f003 0303 	and.w	r3, r3, #3
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d003      	beq.n	80049d0 <BSP_MOTION_SENSOR_GetFullScale+0x4c>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 80049c8:	f06f 030a 	mvn.w	r3, #10
 80049cc:	617b      	str	r3, [r7, #20]
 80049ce:	e02e      	b.n	8004a2e <BSP_MOTION_SENSOR_GetFullScale+0xaa>
  }
  else if ((Motion_Sensor_Ctx[Instance].Functions & Function) == 0U)
 80049d0:	4a19      	ldr	r2, [pc, #100]	; (8004a38 <BSP_MOTION_SENSOR_GetFullScale+0xb4>)
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	4013      	ands	r3, r2
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d103      	bne.n	80049e8 <BSP_MOTION_SENSOR_GetFullScale+0x64>
  {
    status = BSP_ERROR_NO_INIT;
 80049e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80049e4:	617b      	str	r3, [r7, #20]
 80049e6:	e022      	b.n	8004a2e <BSP_MOTION_SENSOR_GetFullScale+0xaa>
  }
  else
  {
    /* Get the motion sensor full scale */
    index = (Function == MOTION_GYRO) ? GYRO_ID : ((Function == MOTION_ACCELERO) ? ACCELERO_ID : MAGNETO_ID);
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d006      	beq.n	80049fc <BSP_MOTION_SENSOR_GetFullScale+0x78>
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	2b02      	cmp	r3, #2
 80049f2:	d101      	bne.n	80049f8 <BSP_MOTION_SENSOR_GetFullScale+0x74>
 80049f4:	2301      	movs	r3, #1
 80049f6:	e002      	b.n	80049fe <BSP_MOTION_SENSOR_GetFullScale+0x7a>
 80049f8:	2302      	movs	r3, #2
 80049fa:	e000      	b.n	80049fe <BSP_MOTION_SENSOR_GetFullScale+0x7a>
 80049fc:	2300      	movs	r3, #0
 80049fe:	74fb      	strb	r3, [r7, #19]
    if (Motion_Sensor_FuncDrv[Instance][index]->GetFullScale(Motion_Sensor_CompObj[Instance], Fullscale) < 0)
 8004a00:	7cf9      	ldrb	r1, [r7, #19]
 8004a02:	480e      	ldr	r0, [pc, #56]	; (8004a3c <BSP_MOTION_SENSOR_GetFullScale+0xb8>)
 8004a04:	68fa      	ldr	r2, [r7, #12]
 8004a06:	4613      	mov	r3, r2
 8004a08:	005b      	lsls	r3, r3, #1
 8004a0a:	4413      	add	r3, r2
 8004a0c:	440b      	add	r3, r1
 8004a0e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004a12:	695b      	ldr	r3, [r3, #20]
 8004a14:	490a      	ldr	r1, [pc, #40]	; (8004a40 <BSP_MOTION_SENSOR_GetFullScale+0xbc>)
 8004a16:	68fa      	ldr	r2, [r7, #12]
 8004a18:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004a1c:	6879      	ldr	r1, [r7, #4]
 8004a1e:	4610      	mov	r0, r2
 8004a20:	4798      	blx	r3
 8004a22:	4603      	mov	r3, r0
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	da02      	bge.n	8004a2e <BSP_MOTION_SENSOR_GetFullScale+0xaa>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8004a28:	f06f 0304 	mvn.w	r3, #4
 8004a2c:	617b      	str	r3, [r7, #20]
    }
  }

  return status;
 8004a2e:	697b      	ldr	r3, [r7, #20]
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3718      	adds	r7, #24
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}
 8004a38:	20002c38 	.word	0x20002c38
 8004a3c:	20002c50 	.word	0x20002c50
 8004a40:	20002c40 	.word	0x20002c40

08004a44 <BSP_MOTION_SENSOR_SetFullScale>:
  *         - MOTION_MAGNETO for instance 1
  * @param  Fullscale Full scale value.
  * @retval BSP status.
  */
int32_t BSP_MOTION_SENSOR_SetFullScale(uint32_t Instance, uint32_t Function, int32_t Fullscale)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b086      	sub	sp, #24
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	60f8      	str	r0, [r7, #12]
 8004a4c:	60b9      	str	r1, [r7, #8]
 8004a4e:	607a      	str	r2, [r7, #4]
  int32_t status = BSP_ERROR_NONE;
 8004a50:	2300      	movs	r3, #0
 8004a52:	617b      	str	r3, [r7, #20]
  uint8_t index;

  if (Instance >= MOTION_SENSOR_INSTANCES_NBR)
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d903      	bls.n	8004a62 <BSP_MOTION_SENSOR_SetFullScale+0x1e>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8004a5a:	f06f 0301 	mvn.w	r3, #1
 8004a5e:	617b      	str	r3, [r7, #20]
 8004a60:	e049      	b.n	8004af6 <BSP_MOTION_SENSOR_SetFullScale+0xb2>
  }
  else if (((Instance == 0U) && ((Function & MOTION_MAGNETO) != 0U))
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d104      	bne.n	8004a72 <BSP_MOTION_SENSOR_SetFullScale+0x2e>
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	f003 0304 	and.w	r3, r3, #4
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d107      	bne.n	8004a82 <BSP_MOTION_SENSOR_SetFullScale+0x3e>
           || ((Instance == 1U) && ((Function & (MOTION_GYRO | MOTION_ACCELERO)) != 0U)))
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d108      	bne.n	8004a8a <BSP_MOTION_SENSOR_SetFullScale+0x46>
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	f003 0303 	and.w	r3, r3, #3
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d003      	beq.n	8004a8a <BSP_MOTION_SENSOR_SetFullScale+0x46>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8004a82:	f06f 030a 	mvn.w	r3, #10
 8004a86:	617b      	str	r3, [r7, #20]
 8004a88:	e035      	b.n	8004af6 <BSP_MOTION_SENSOR_SetFullScale+0xb2>
  }
  else if ((Motion_Sensor_Ctx[Instance].Functions & Function) == 0U)
 8004a8a:	4a1d      	ldr	r2, [pc, #116]	; (8004b00 <BSP_MOTION_SENSOR_SetFullScale+0xbc>)
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	4013      	ands	r3, r2
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d103      	bne.n	8004aa2 <BSP_MOTION_SENSOR_SetFullScale+0x5e>
  {
    status = BSP_ERROR_NO_INIT;
 8004a9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004a9e:	617b      	str	r3, [r7, #20]
 8004aa0:	e029      	b.n	8004af6 <BSP_MOTION_SENSOR_SetFullScale+0xb2>
  }
  else
  {
    /* Set the motion sensor full scale */
    index = (Function == MOTION_GYRO) ? GYRO_ID : ((Function == MOTION_ACCELERO) ? ACCELERO_ID : MAGNETO_ID);
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d006      	beq.n	8004ab6 <BSP_MOTION_SENSOR_SetFullScale+0x72>
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	2b02      	cmp	r3, #2
 8004aac:	d101      	bne.n	8004ab2 <BSP_MOTION_SENSOR_SetFullScale+0x6e>
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e002      	b.n	8004ab8 <BSP_MOTION_SENSOR_SetFullScale+0x74>
 8004ab2:	2302      	movs	r3, #2
 8004ab4:	e000      	b.n	8004ab8 <BSP_MOTION_SENSOR_SetFullScale+0x74>
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	74fb      	strb	r3, [r7, #19]
    if (index == MAGNETO_ID)
 8004aba:	7cfb      	ldrb	r3, [r7, #19]
 8004abc:	2b02      	cmp	r3, #2
 8004abe:	d103      	bne.n	8004ac8 <BSP_MOTION_SENSOR_SetFullScale+0x84>
    {
      /* Feature not supported for Magneto */
      status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8004ac0:	f06f 030a 	mvn.w	r3, #10
 8004ac4:	617b      	str	r3, [r7, #20]
 8004ac6:	e016      	b.n	8004af6 <BSP_MOTION_SENSOR_SetFullScale+0xb2>
    }
    else
    {
      if (Motion_Sensor_FuncDrv[Instance][index]->SetFullScale(Motion_Sensor_CompObj[Instance], Fullscale) < 0)
 8004ac8:	7cf9      	ldrb	r1, [r7, #19]
 8004aca:	480e      	ldr	r0, [pc, #56]	; (8004b04 <BSP_MOTION_SENSOR_SetFullScale+0xc0>)
 8004acc:	68fa      	ldr	r2, [r7, #12]
 8004ace:	4613      	mov	r3, r2
 8004ad0:	005b      	lsls	r3, r3, #1
 8004ad2:	4413      	add	r3, r2
 8004ad4:	440b      	add	r3, r1
 8004ad6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004ada:	699b      	ldr	r3, [r3, #24]
 8004adc:	490a      	ldr	r1, [pc, #40]	; (8004b08 <BSP_MOTION_SENSOR_SetFullScale+0xc4>)
 8004ade:	68fa      	ldr	r2, [r7, #12]
 8004ae0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004ae4:	6879      	ldr	r1, [r7, #4]
 8004ae6:	4610      	mov	r0, r2
 8004ae8:	4798      	blx	r3
 8004aea:	4603      	mov	r3, r0
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	da02      	bge.n	8004af6 <BSP_MOTION_SENSOR_SetFullScale+0xb2>
      {
        status = BSP_ERROR_COMPONENT_FAILURE;
 8004af0:	f06f 0304 	mvn.w	r3, #4
 8004af4:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return status;
 8004af6:	697b      	ldr	r3, [r7, #20]
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3718      	adds	r7, #24
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	20002c38 	.word	0x20002c38
 8004b04:	20002c50 	.word	0x20002c50
 8004b08:	20002c40 	.word	0x20002c40

08004b0c <ISM330DHCX_Probe>:
  * @param  Functions Motion sensor functions. Could be :
  *         - MOTION_GYRO and/or MOTION_ACCELERO
  * @retval BSP status.
  */
static int32_t ISM330DHCX_Probe(uint32_t Functions)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b08c      	sub	sp, #48	; 0x30
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  int32_t                 status = BSP_ERROR_NONE;
 8004b14:	2300      	movs	r3, #0
 8004b16:	62fb      	str	r3, [r7, #44]	; 0x2c
  ISM330DHCX_IO_t            IOCtx;
  uint8_t                 ism330dlc_id;
  static ISM330DHCX_Object_t ISM330DHCX_Obj;

  /* Configure the motion sensor driver */
  IOCtx.BusType     = ISM330DHCX_I2C_BUS;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	617b      	str	r3, [r7, #20]
  IOCtx.Address     = ISM330DHCX_I2C_ADD_H;
 8004b1c:	23d7      	movs	r3, #215	; 0xd7
 8004b1e:	763b      	strb	r3, [r7, #24]
  IOCtx.Init        = BSP_I2C2_Init;
 8004b20:	4b29      	ldr	r3, [pc, #164]	; (8004bc8 <ISM330DHCX_Probe+0xbc>)
 8004b22:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = BSP_I2C2_DeInit;
 8004b24:	4b29      	ldr	r3, [pc, #164]	; (8004bcc <ISM330DHCX_Probe+0xc0>)
 8004b26:	613b      	str	r3, [r7, #16]
  IOCtx.ReadReg     = BSP_I2C2_ReadReg;
 8004b28:	4b29      	ldr	r3, [pc, #164]	; (8004bd0 <ISM330DHCX_Probe+0xc4>)
 8004b2a:	623b      	str	r3, [r7, #32]
  IOCtx.WriteReg    = BSP_I2C2_WriteReg;
 8004b2c:	4b29      	ldr	r3, [pc, #164]	; (8004bd4 <ISM330DHCX_Probe+0xc8>)
 8004b2e:	61fb      	str	r3, [r7, #28]
  IOCtx.GetTick     = BSP_GetTick;
 8004b30:	4b29      	ldr	r3, [pc, #164]	; (8004bd8 <ISM330DHCX_Probe+0xcc>)
 8004b32:	627b      	str	r3, [r7, #36]	; 0x24

  /* Register Component Bus IO operations */
  if (ISM330DHCX_RegisterBusIO(&ISM330DHCX_Obj, &IOCtx) != ISM330DHCX_OK)
 8004b34:	f107 030c 	add.w	r3, r7, #12
 8004b38:	4619      	mov	r1, r3
 8004b3a:	4828      	ldr	r0, [pc, #160]	; (8004bdc <ISM330DHCX_Probe+0xd0>)
 8004b3c:	f000 f8c8 	bl	8004cd0 <ISM330DHCX_RegisterBusIO>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d003      	beq.n	8004b4e <ISM330DHCX_Probe+0x42>
  {
    status = BSP_ERROR_BUS_FAILURE;
 8004b46:	f06f 0307 	mvn.w	r3, #7
 8004b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b4c:	e037      	b.n	8004bbe <ISM330DHCX_Probe+0xb2>
  }
  /* Read the sensor ID */
  else if (ISM330DHCX_ReadID(&ISM330DHCX_Obj, &ism330dlc_id) != ISM330DHCX_OK)
 8004b4e:	f107 030b 	add.w	r3, r7, #11
 8004b52:	4619      	mov	r1, r3
 8004b54:	4821      	ldr	r0, [pc, #132]	; (8004bdc <ISM330DHCX_Probe+0xd0>)
 8004b56:	f000 f9d9 	bl	8004f0c <ISM330DHCX_ReadID>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d003      	beq.n	8004b68 <ISM330DHCX_Probe+0x5c>
  {
    status = BSP_ERROR_COMPONENT_FAILURE;
 8004b60:	f06f 0304 	mvn.w	r3, #4
 8004b64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b66:	e02a      	b.n	8004bbe <ISM330DHCX_Probe+0xb2>
  }
  /* Check if the returned sensor ID is correct */
  else if (ism330dlc_id != ISM330DHCX_ID)
 8004b68:	7afb      	ldrb	r3, [r7, #11]
 8004b6a:	2b6b      	cmp	r3, #107	; 0x6b
 8004b6c:	d003      	beq.n	8004b76 <ISM330DHCX_Probe+0x6a>
  {
    status = BSP_ERROR_UNKNOWN_COMPONENT;
 8004b6e:	f06f 0306 	mvn.w	r3, #6
 8004b72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b74:	e023      	b.n	8004bbe <ISM330DHCX_Probe+0xb2>
  }
  else
  {
    Motion_Sensor_CompObj[0] = &ISM330DHCX_Obj;
 8004b76:	4b1a      	ldr	r3, [pc, #104]	; (8004be0 <ISM330DHCX_Probe+0xd4>)
 8004b78:	4a18      	ldr	r2, [pc, #96]	; (8004bdc <ISM330DHCX_Probe+0xd0>)
 8004b7a:	601a      	str	r2, [r3, #0]
    Motion_Sensor_Drv[0]     = (MOTION_SENSOR_CommonDrv_t *) &ISM330DHCX_COMMON_Driver;
 8004b7c:	4b19      	ldr	r3, [pc, #100]	; (8004be4 <ISM330DHCX_Probe+0xd8>)
 8004b7e:	4a1a      	ldr	r2, [pc, #104]	; (8004be8 <ISM330DHCX_Probe+0xdc>)
 8004b80:	601a      	str	r2, [r3, #0]
    /* Initialize the component */
    if (Motion_Sensor_Drv[0]->Init(Motion_Sensor_CompObj[0]) < 0)
 8004b82:	4b18      	ldr	r3, [pc, #96]	; (8004be4 <ISM330DHCX_Probe+0xd8>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a15      	ldr	r2, [pc, #84]	; (8004be0 <ISM330DHCX_Probe+0xd4>)
 8004b8a:	6812      	ldr	r2, [r2, #0]
 8004b8c:	4610      	mov	r0, r2
 8004b8e:	4798      	blx	r3
 8004b90:	4603      	mov	r3, r0
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	da03      	bge.n	8004b9e <ISM330DHCX_Probe+0x92>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8004b96:	f06f 0304 	mvn.w	r3, #4
 8004b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b9c:	e00f      	b.n	8004bbe <ISM330DHCX_Probe+0xb2>
    }
    else
    {
      /* Link the MS driver with the component driver */
      if ((Functions & MOTION_GYRO) != 0U)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	f003 0301 	and.w	r3, r3, #1
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d002      	beq.n	8004bae <ISM330DHCX_Probe+0xa2>
      {
        Motion_Sensor_FuncDrv[0][GYRO_ID] = (MOTION_SENSOR_FuncDrv_t *) &ISM330DHCX_GYRO_Driver;
 8004ba8:	4b10      	ldr	r3, [pc, #64]	; (8004bec <ISM330DHCX_Probe+0xe0>)
 8004baa:	4a11      	ldr	r2, [pc, #68]	; (8004bf0 <ISM330DHCX_Probe+0xe4>)
 8004bac:	601a      	str	r2, [r3, #0]
      }
      if ((Functions & MOTION_ACCELERO) != 0U)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f003 0302 	and.w	r3, r3, #2
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d002      	beq.n	8004bbe <ISM330DHCX_Probe+0xb2>
      {
        Motion_Sensor_FuncDrv[0][ACCELERO_ID] = (MOTION_SENSOR_FuncDrv_t *) &ISM330DHCX_ACC_Driver;
 8004bb8:	4b0c      	ldr	r3, [pc, #48]	; (8004bec <ISM330DHCX_Probe+0xe0>)
 8004bba:	4a0e      	ldr	r2, [pc, #56]	; (8004bf4 <ISM330DHCX_Probe+0xe8>)
 8004bbc:	605a      	str	r2, [r3, #4]
      }
    }
  }

  return status;
 8004bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3730      	adds	r7, #48	; 0x30
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}
 8004bc8:	08003bb9 	.word	0x08003bb9
 8004bcc:	08003c2d 	.word	0x08003c2d
 8004bd0:	08003d55 	.word	0x08003d55
 8004bd4:	08003cf9 	.word	0x08003cf9
 8004bd8:	08003db1 	.word	0x08003db1
 8004bdc:	20002c68 	.word	0x20002c68
 8004be0:	20002c40 	.word	0x20002c40
 8004be4:	20002c48 	.word	0x20002c48
 8004be8:	20000064 	.word	0x20000064
 8004bec:	20002c50 	.word	0x20002c50
 8004bf0:	20000098 	.word	0x20000098
 8004bf4:	20000074 	.word	0x20000074

08004bf8 <IIS2MDC_Probe>:
  * @param  Functions Motion sensor functions. Could be :
  *         - MOTION_MAGNETO
  * @retval BSP status.
  */
static int32_t IIS2MDC_Probe(uint32_t Functions)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b08c      	sub	sp, #48	; 0x30
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  int32_t                 status = BSP_ERROR_NONE;
 8004c00:	2300      	movs	r3, #0
 8004c02:	62fb      	str	r3, [r7, #44]	; 0x2c
  IIS2MDC_IO_t            IOCtx;
  uint8_t                 iis2mdc_id;
  static IIS2MDC_Object_t IIS2MDC_Obj;

  /* Configure the motion sensor driver */
  IOCtx.BusType     = IIS2MDC_I2C_BUS;
 8004c04:	2300      	movs	r3, #0
 8004c06:	617b      	str	r3, [r7, #20]
  IOCtx.Address     = IIS2MDC_I2C_ADD;
 8004c08:	233d      	movs	r3, #61	; 0x3d
 8004c0a:	763b      	strb	r3, [r7, #24]
  IOCtx.Init        = BSP_I2C2_Init;
 8004c0c:	4b25      	ldr	r3, [pc, #148]	; (8004ca4 <IIS2MDC_Probe+0xac>)
 8004c0e:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = BSP_I2C2_DeInit;
 8004c10:	4b25      	ldr	r3, [pc, #148]	; (8004ca8 <IIS2MDC_Probe+0xb0>)
 8004c12:	613b      	str	r3, [r7, #16]
  IOCtx.ReadReg     = BSP_I2C2_ReadReg;
 8004c14:	4b25      	ldr	r3, [pc, #148]	; (8004cac <IIS2MDC_Probe+0xb4>)
 8004c16:	623b      	str	r3, [r7, #32]
  IOCtx.WriteReg    = BSP_I2C2_WriteReg;
 8004c18:	4b25      	ldr	r3, [pc, #148]	; (8004cb0 <IIS2MDC_Probe+0xb8>)
 8004c1a:	61fb      	str	r3, [r7, #28]
  IOCtx.GetTick     = BSP_GetTick;
 8004c1c:	4b25      	ldr	r3, [pc, #148]	; (8004cb4 <IIS2MDC_Probe+0xbc>)
 8004c1e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Register Component Bus IO operations */
  if (IIS2MDC_RegisterBusIO(&IIS2MDC_Obj, &IOCtx) != IIS2MDC_OK)
 8004c20:	f107 030c 	add.w	r3, r7, #12
 8004c24:	4619      	mov	r1, r3
 8004c26:	4824      	ldr	r0, [pc, #144]	; (8004cb8 <IIS2MDC_Probe+0xc0>)
 8004c28:	f001 ffa6 	bl	8006b78 <IIS2MDC_RegisterBusIO>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d003      	beq.n	8004c3a <IIS2MDC_Probe+0x42>
  {
    status = BSP_ERROR_BUS_FAILURE;
 8004c32:	f06f 0307 	mvn.w	r3, #7
 8004c36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c38:	e02f      	b.n	8004c9a <IIS2MDC_Probe+0xa2>
  }
  /* Read the sensor ID */
  else if (IIS2MDC_ReadID(&IIS2MDC_Obj, &iis2mdc_id) != IIS2MDC_OK)
 8004c3a:	f107 030b 	add.w	r3, r7, #11
 8004c3e:	4619      	mov	r1, r3
 8004c40:	481d      	ldr	r0, [pc, #116]	; (8004cb8 <IIS2MDC_Probe+0xc0>)
 8004c42:	f002 f854 	bl	8006cee <IIS2MDC_ReadID>
 8004c46:	4603      	mov	r3, r0
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d003      	beq.n	8004c54 <IIS2MDC_Probe+0x5c>
  {
    status = BSP_ERROR_COMPONENT_FAILURE;
 8004c4c:	f06f 0304 	mvn.w	r3, #4
 8004c50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c52:	e022      	b.n	8004c9a <IIS2MDC_Probe+0xa2>
  }
  /* Check if the returned sensor ID is correct */
  else if (iis2mdc_id != IIS2MDC_ID)
 8004c54:	7afb      	ldrb	r3, [r7, #11]
 8004c56:	2b40      	cmp	r3, #64	; 0x40
 8004c58:	d003      	beq.n	8004c62 <IIS2MDC_Probe+0x6a>
  {
    status = BSP_ERROR_UNKNOWN_COMPONENT;
 8004c5a:	f06f 0306 	mvn.w	r3, #6
 8004c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c60:	e01b      	b.n	8004c9a <IIS2MDC_Probe+0xa2>
  }
  else
  {
    Motion_Sensor_CompObj[1] = &IIS2MDC_Obj;
 8004c62:	4b16      	ldr	r3, [pc, #88]	; (8004cbc <IIS2MDC_Probe+0xc4>)
 8004c64:	4a14      	ldr	r2, [pc, #80]	; (8004cb8 <IIS2MDC_Probe+0xc0>)
 8004c66:	605a      	str	r2, [r3, #4]
    Motion_Sensor_Drv[1]     = (MOTION_SENSOR_CommonDrv_t *) &IIS2MDC_COMMON_Driver;
 8004c68:	4b15      	ldr	r3, [pc, #84]	; (8004cc0 <IIS2MDC_Probe+0xc8>)
 8004c6a:	4a16      	ldr	r2, [pc, #88]	; (8004cc4 <IIS2MDC_Probe+0xcc>)
 8004c6c:	605a      	str	r2, [r3, #4]
    /* Initialize the component */
    if (Motion_Sensor_Drv[1]->Init(Motion_Sensor_CompObj[1]) < 0)
 8004c6e:	4b14      	ldr	r3, [pc, #80]	; (8004cc0 <IIS2MDC_Probe+0xc8>)
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a11      	ldr	r2, [pc, #68]	; (8004cbc <IIS2MDC_Probe+0xc4>)
 8004c76:	6852      	ldr	r2, [r2, #4]
 8004c78:	4610      	mov	r0, r2
 8004c7a:	4798      	blx	r3
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	da03      	bge.n	8004c8a <IIS2MDC_Probe+0x92>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8004c82:	f06f 0304 	mvn.w	r3, #4
 8004c86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c88:	e007      	b.n	8004c9a <IIS2MDC_Probe+0xa2>
    }
    else
    {
      /* Link the MS driver with the component driver */
      if ((Functions & MOTION_MAGNETO) != 0U)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f003 0304 	and.w	r3, r3, #4
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d002      	beq.n	8004c9a <IIS2MDC_Probe+0xa2>
      {
        Motion_Sensor_FuncDrv[1][MAGNETO_ID] = (MOTION_SENSOR_FuncDrv_t *) &IIS2MDC_MAG_Driver;
 8004c94:	4b0c      	ldr	r3, [pc, #48]	; (8004cc8 <IIS2MDC_Probe+0xd0>)
 8004c96:	4a0d      	ldr	r2, [pc, #52]	; (8004ccc <IIS2MDC_Probe+0xd4>)
 8004c98:	615a      	str	r2, [r3, #20]
      }
    }
  }

  return status;
 8004c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3730      	adds	r7, #48	; 0x30
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	08003bb9 	.word	0x08003bb9
 8004ca8:	08003c2d 	.word	0x08003c2d
 8004cac:	08003d55 	.word	0x08003d55
 8004cb0:	08003cf9 	.word	0x08003cf9
 8004cb4:	08003db1 	.word	0x08003db1
 8004cb8:	20002ca0 	.word	0x20002ca0
 8004cbc:	20002c40 	.word	0x20002c40
 8004cc0:	20002c48 	.word	0x20002c48
 8004cc4:	200000bc 	.word	0x200000bc
 8004cc8:	20002c50 	.word	0x20002c50
 8004ccc:	200000cc 	.word	0x200000cc

08004cd0 <ISM330DHCX_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_RegisterBusIO(ISM330DHCX_Object_t *pObj, ISM330DHCX_IO_t *pIO)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b084      	sub	sp, #16
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d103      	bne.n	8004cec <ISM330DHCX_RegisterBusIO+0x1c>
  {
    ret = ISM330DHCX_ERROR;
 8004ce4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004ce8:	60fb      	str	r3, [r7, #12]
 8004cea:	e051      	b.n	8004d90 <ISM330DHCX_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	685a      	ldr	r2, [r3, #4]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	689a      	ldr	r2, [r3, #8]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	7b1a      	ldrb	r2, [r3, #12]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	691a      	ldr	r2, [r3, #16]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	695a      	ldr	r2, [r3, #20]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	699a      	ldr	r2, [r3, #24]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	4a1d      	ldr	r2, [pc, #116]	; (8004d9c <ISM330DHCX_RegisterBusIO+0xcc>)
 8004d28:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	4a1c      	ldr	r2, [pc, #112]	; (8004da0 <ISM330DHCX_RegisterBusIO+0xd0>)
 8004d2e:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	69da      	ldr	r2, [r3, #28]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d103      	bne.n	8004d4e <ISM330DHCX_RegisterBusIO+0x7e>
    {
      ret = ISM330DHCX_ERROR;
 8004d46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d4a:	60fb      	str	r3, [r7, #12]
 8004d4c:	e020      	b.n	8004d90 <ISM330DHCX_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != ISM330DHCX_OK)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4798      	blx	r3
 8004d54:	4603      	mov	r3, r0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d003      	beq.n	8004d62 <ISM330DHCX_RegisterBusIO+0x92>
    {
      ret = ISM330DHCX_ERROR;
 8004d5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d5e:	60fb      	str	r3, [r7, #12]
 8004d60:	e016      	b.n	8004d90 <ISM330DHCX_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == ISM330DHCX_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	2b02      	cmp	r3, #2
 8004d68:	d112      	bne.n	8004d90 <ISM330DHCX_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d10d      	bne.n	8004d90 <ISM330DHCX_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8004d74:	230c      	movs	r3, #12
 8004d76:	72fb      	strb	r3, [r7, #11]

          if (ISM330DHCX_Write_Reg(pObj, ISM330DHCX_CTRL3_C, data) != ISM330DHCX_OK)
 8004d78:	7afb      	ldrb	r3, [r7, #11]
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	2112      	movs	r1, #18
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f000 fd73 	bl	800586a <ISM330DHCX_Write_Reg>
 8004d84:	4603      	mov	r3, r0
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d002      	beq.n	8004d90 <ISM330DHCX_RegisterBusIO+0xc0>
          {
            ret = ISM330DHCX_ERROR;
 8004d8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d8e:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8004d90:	68fb      	ldr	r3, [r7, #12]
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3710      	adds	r7, #16
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}
 8004d9a:	bf00      	nop
 8004d9c:	08005cd9 	.word	0x08005cd9
 8004da0:	08005d0f 	.word	0x08005d0f

08004da4 <ISM330DHCX_Init>:
  * @brief  Initialize the ISM330DHCX sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_Init(ISM330DHCX_Object_t *pObj)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b082      	sub	sp, #8
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  /* Set DEVICE_CONF bit */
  if (ism330dhcx_device_conf_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	3320      	adds	r3, #32
 8004db0:	2101      	movs	r1, #1
 8004db2:	4618      	mov	r0, r3
 8004db4:	f001 fd2a 	bl	800680c <ism330dhcx_device_conf_set>
 8004db8:	4603      	mov	r3, r0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d002      	beq.n	8004dc4 <ISM330DHCX_Init+0x20>
  {
    return ISM330DHCX_ERROR;
 8004dbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004dc2:	e078      	b.n	8004eb6 <ISM330DHCX_Init+0x112>
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (ism330dhcx_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	3320      	adds	r3, #32
 8004dc8:	2101      	movs	r1, #1
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f001 fda1 	bl	8006912 <ism330dhcx_auto_increment_set>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d002      	beq.n	8004ddc <ISM330DHCX_Init+0x38>
  {
    return ISM330DHCX_ERROR;
 8004dd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004dda:	e06c      	b.n	8004eb6 <ISM330DHCX_Init+0x112>
  }

  /* SW reset */
  if (ism330dhcx_reset_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	3320      	adds	r3, #32
 8004de0:	2101      	movs	r1, #1
 8004de2:	4618      	mov	r0, r3
 8004de4:	f001 fd6f 	bl	80068c6 <ism330dhcx_reset_set>
 8004de8:	4603      	mov	r3, r0
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d002      	beq.n	8004df4 <ISM330DHCX_Init+0x50>
  {
    return ISM330DHCX_ERROR;
 8004dee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004df2:	e060      	b.n	8004eb6 <ISM330DHCX_Init+0x112>
  }

  /* Enable register address automatically incremented during a multiple byte
     access with a serial interface. */
  if (ism330dhcx_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	3320      	adds	r3, #32
 8004df8:	2101      	movs	r1, #1
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f001 fd89 	bl	8006912 <ism330dhcx_auto_increment_set>
 8004e00:	4603      	mov	r3, r0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d002      	beq.n	8004e0c <ISM330DHCX_Init+0x68>
  {
    return ISM330DHCX_ERROR;
 8004e06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004e0a:	e054      	b.n	8004eb6 <ISM330DHCX_Init+0x112>
  }

  /* Enable BDU */
  if (ism330dhcx_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	3320      	adds	r3, #32
 8004e10:	2101      	movs	r1, #1
 8004e12:	4618      	mov	r0, r3
 8004e14:	f001 fc3e 	bl	8006694 <ism330dhcx_block_data_update_set>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d002      	beq.n	8004e24 <ISM330DHCX_Init+0x80>
  {
    return ISM330DHCX_ERROR;
 8004e1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004e22:	e048      	b.n	8004eb6 <ISM330DHCX_Init+0x112>
  }

  /* FIFO mode selection */
  if (ism330dhcx_fifo_mode_set(&(pObj->Ctx), ISM330DHCX_BYPASS_MODE) != ISM330DHCX_OK)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	3320      	adds	r3, #32
 8004e28:	2100      	movs	r1, #0
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f001 fd97 	bl	800695e <ism330dhcx_fifo_mode_set>
 8004e30:	4603      	mov	r3, r0
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d002      	beq.n	8004e3c <ISM330DHCX_Init+0x98>
  {
    return ISM330DHCX_ERROR;
 8004e36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004e3a:	e03c      	b.n	8004eb6 <ISM330DHCX_Init+0x112>
  }

  /* Select default output data rate. */
  pObj->acc_odr = ISM330DHCX_XL_ODR_104Hz;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2204      	movs	r2, #4
 8004e40:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  /* Output data rate selection - power down. */
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), ISM330DHCX_XL_ODR_OFF) != ISM330DHCX_OK)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	3320      	adds	r3, #32
 8004e48:	2100      	movs	r1, #0
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f001 f808 	bl	8005e60 <ism330dhcx_xl_data_rate_set>
 8004e50:	4603      	mov	r3, r0
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d002      	beq.n	8004e5c <ISM330DHCX_Init+0xb8>
  {
    return ISM330DHCX_ERROR;
 8004e56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004e5a:	e02c      	b.n	8004eb6 <ISM330DHCX_Init+0x112>
  }

  /* Full scale selection. */
  if (ism330dhcx_xl_full_scale_set(&(pObj->Ctx), ISM330DHCX_2g) != ISM330DHCX_OK)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	3320      	adds	r3, #32
 8004e60:	2100      	movs	r1, #0
 8004e62:	4618      	mov	r0, r3
 8004e64:	f000 ff9e 	bl	8005da4 <ism330dhcx_xl_full_scale_set>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d002      	beq.n	8004e74 <ISM330DHCX_Init+0xd0>
  {
    return ISM330DHCX_ERROR;
 8004e6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004e72:	e020      	b.n	8004eb6 <ISM330DHCX_Init+0x112>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = ISM330DHCX_GY_ODR_104Hz;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2204      	movs	r2, #4
 8004e78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Output data rate selection - power down. */
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), ISM330DHCX_GY_ODR_OFF) != ISM330DHCX_OK)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	3320      	adds	r3, #32
 8004e80:	2100      	movs	r1, #0
 8004e82:	4618      	mov	r0, r3
 8004e84:	f001 fa38 	bl	80062f8 <ism330dhcx_gy_data_rate_set>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d002      	beq.n	8004e94 <ISM330DHCX_Init+0xf0>
  {
    return ISM330DHCX_ERROR;
 8004e8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004e92:	e010      	b.n	8004eb6 <ISM330DHCX_Init+0x112>
  }

  /* Full scale selection. */
  if (ism330dhcx_gy_full_scale_set(&(pObj->Ctx), ISM330DHCX_2000dps) != ISM330DHCX_OK)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	3320      	adds	r3, #32
 8004e98:	210c      	movs	r1, #12
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f001 f9b4 	bl	8006208 <ism330dhcx_gy_full_scale_set>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d002      	beq.n	8004eac <ISM330DHCX_Init+0x108>
  {
    return ISM330DHCX_ERROR;
 8004ea6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004eaa:	e004      	b.n	8004eb6 <ISM330DHCX_Init+0x112>
  }

  pObj->is_initialized = 1;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return ISM330DHCX_OK;
 8004eb4:	2300      	movs	r3, #0
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3708      	adds	r7, #8
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}

08004ebe <ISM330DHCX_DeInit>:
  * @brief  Deinitialize the ISM330DHCX sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_DeInit(ISM330DHCX_Object_t *pObj)
{
 8004ebe:	b580      	push	{r7, lr}
 8004ec0:	b082      	sub	sp, #8
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (ISM330DHCX_ACC_Disable(pObj) != ISM330DHCX_OK)
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f000 f888 	bl	8004fdc <ISM330DHCX_ACC_Disable>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d002      	beq.n	8004ed8 <ISM330DHCX_DeInit+0x1a>
  {
    return ISM330DHCX_ERROR;
 8004ed2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004ed6:	e015      	b.n	8004f04 <ISM330DHCX_DeInit+0x46>
  }

  if (ISM330DHCX_GYRO_Disable(pObj) != ISM330DHCX_OK)
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f000 fa92 	bl	8005402 <ISM330DHCX_GYRO_Disable>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d002      	beq.n	8004eea <ISM330DHCX_DeInit+0x2c>
  {
    return ISM330DHCX_ERROR;
 8004ee4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004ee8:	e00c      	b.n	8004f04 <ISM330DHCX_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = ISM330DHCX_XL_ODR_OFF;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2200      	movs	r2, #0
 8004eee:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  pObj->gyro_odr = ISM330DHCX_GY_ODR_OFF;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  pObj->is_initialized = 0;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2200      	movs	r2, #0
 8004efe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return ISM330DHCX_OK;
 8004f02:	2300      	movs	r3, #0
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3708      	adds	r7, #8
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}

08004f0c <ISM330DHCX_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ReadID(ISM330DHCX_Object_t *pObj, uint8_t *Id)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b082      	sub	sp, #8
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	6039      	str	r1, [r7, #0]
  if (ism330dhcx_device_id_get(&(pObj->Ctx), Id) != ISM330DHCX_OK)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	3320      	adds	r3, #32
 8004f1a:	6839      	ldr	r1, [r7, #0]
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f001 fcc1 	bl	80068a4 <ism330dhcx_device_id_get>
 8004f22:	4603      	mov	r3, r0
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d002      	beq.n	8004f2e <ISM330DHCX_ReadID+0x22>
  {
    return ISM330DHCX_ERROR;
 8004f28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004f2c:	e000      	b.n	8004f30 <ISM330DHCX_ReadID+0x24>
  }

  return ISM330DHCX_OK;
 8004f2e:	2300      	movs	r3, #0
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3708      	adds	r7, #8
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}

08004f38 <ISM330DHCX_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to ISM330DHCX sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GetCapabilities(ISM330DHCX_Object_t *pObj, ISM330DHCX_Capabilities_t *Capabilities)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b083      	sub	sp, #12
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	2201      	movs	r2, #1
 8004f46:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	2200      	movs	r2, #0
 8004f52:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	2200      	movs	r2, #0
 8004f58:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 4000;
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8004f60:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	2210      	movs	r2, #16
 8004f66:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6667.0f;
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	4a07      	ldr	r2, [pc, #28]	; (8004f90 <ISM330DHCX_GetCapabilities+0x58>)
 8004f72:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6667.0f;
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	4a06      	ldr	r2, [pc, #24]	; (8004f90 <ISM330DHCX_GetCapabilities+0x58>)
 8004f78:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	f04f 0200 	mov.w	r2, #0
 8004f80:	619a      	str	r2, [r3, #24]
  return ISM330DHCX_OK;
 8004f82:	2300      	movs	r3, #0
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	370c      	adds	r7, #12
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8e:	4770      	bx	lr
 8004f90:	45d05800 	.word	0x45d05800

08004f94 <ISM330DHCX_ACC_Enable>:
  * @brief  Enable the ISM330DHCX accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_Enable(ISM330DHCX_Object_t *pObj)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b082      	sub	sp, #8
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004fa2:	2b01      	cmp	r3, #1
 8004fa4:	d101      	bne.n	8004faa <ISM330DHCX_ACC_Enable+0x16>
  {
    return ISM330DHCX_OK;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	e014      	b.n	8004fd4 <ISM330DHCX_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != ISM330DHCX_OK)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f103 0220 	add.w	r2, r3, #32
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8004fb6:	4619      	mov	r1, r3
 8004fb8:	4610      	mov	r0, r2
 8004fba:	f000 ff51 	bl	8005e60 <ism330dhcx_xl_data_rate_set>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d002      	beq.n	8004fca <ISM330DHCX_ACC_Enable+0x36>
  {
    return ISM330DHCX_ERROR;
 8004fc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004fc8:	e004      	b.n	8004fd4 <ISM330DHCX_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2201      	movs	r2, #1
 8004fce:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return ISM330DHCX_OK;
 8004fd2:	2300      	movs	r3, #0
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3708      	adds	r7, #8
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}

08004fdc <ISM330DHCX_ACC_Disable>:
  * @brief  Disable the ISM330DHCX accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_Disable(ISM330DHCX_Object_t *pObj)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b082      	sub	sp, #8
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d101      	bne.n	8004ff2 <ISM330DHCX_ACC_Disable+0x16>
  {
    return ISM330DHCX_OK;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	e01f      	b.n	8005032 <ISM330DHCX_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (ism330dhcx_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != ISM330DHCX_OK)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f103 0220 	add.w	r2, r3, #32
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	3333      	adds	r3, #51	; 0x33
 8004ffc:	4619      	mov	r1, r3
 8004ffe:	4610      	mov	r0, r2
 8005000:	f001 f89a 	bl	8006138 <ism330dhcx_xl_data_rate_get>
 8005004:	4603      	mov	r3, r0
 8005006:	2b00      	cmp	r3, #0
 8005008:	d002      	beq.n	8005010 <ISM330DHCX_ACC_Disable+0x34>
  {
    return ISM330DHCX_ERROR;
 800500a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800500e:	e010      	b.n	8005032 <ISM330DHCX_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), ISM330DHCX_XL_ODR_OFF) != ISM330DHCX_OK)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	3320      	adds	r3, #32
 8005014:	2100      	movs	r1, #0
 8005016:	4618      	mov	r0, r3
 8005018:	f000 ff22 	bl	8005e60 <ism330dhcx_xl_data_rate_set>
 800501c:	4603      	mov	r3, r0
 800501e:	2b00      	cmp	r3, #0
 8005020:	d002      	beq.n	8005028 <ISM330DHCX_ACC_Disable+0x4c>
  {
    return ISM330DHCX_ERROR;
 8005022:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005026:	e004      	b.n	8005032 <ISM330DHCX_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2200      	movs	r2, #0
 800502c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return ISM330DHCX_OK;
 8005030:	2300      	movs	r3, #0
}
 8005032:	4618      	mov	r0, r3
 8005034:	3708      	adds	r7, #8
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}
	...

0800503c <ISM330DHCX_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_GetSensitivity(ISM330DHCX_Object_t *pObj, float *Sensitivity)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b084      	sub	sp, #16
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 8005046:	2300      	movs	r3, #0
 8005048:	60fb      	str	r3, [r7, #12]
  ism330dhcx_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (ism330dhcx_xl_full_scale_get(&(pObj->Ctx), &full_scale) != ISM330DHCX_OK)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	3320      	adds	r3, #32
 800504e:	f107 020b 	add.w	r2, r7, #11
 8005052:	4611      	mov	r1, r2
 8005054:	4618      	mov	r0, r3
 8005056:	f000 fecb 	bl	8005df0 <ism330dhcx_xl_full_scale_get>
 800505a:	4603      	mov	r3, r0
 800505c:	2b00      	cmp	r3, #0
 800505e:	d002      	beq.n	8005066 <ISM330DHCX_ACC_GetSensitivity+0x2a>
  {
    return ISM330DHCX_ERROR;
 8005060:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005064:	e023      	b.n	80050ae <ISM330DHCX_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8005066:	7afb      	ldrb	r3, [r7, #11]
 8005068:	2b03      	cmp	r3, #3
 800506a:	d81b      	bhi.n	80050a4 <ISM330DHCX_ACC_GetSensitivity+0x68>
 800506c:	a201      	add	r2, pc, #4	; (adr r2, 8005074 <ISM330DHCX_ACC_GetSensitivity+0x38>)
 800506e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005072:	bf00      	nop
 8005074:	08005085 	.word	0x08005085
 8005078:	0800509d 	.word	0x0800509d
 800507c:	0800508d 	.word	0x0800508d
 8005080:	08005095 	.word	0x08005095
  {
    case ISM330DHCX_2g:
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_2G;
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	4a0c      	ldr	r2, [pc, #48]	; (80050b8 <ISM330DHCX_ACC_GetSensitivity+0x7c>)
 8005088:	601a      	str	r2, [r3, #0]
      break;
 800508a:	e00f      	b.n	80050ac <ISM330DHCX_ACC_GetSensitivity+0x70>

    case ISM330DHCX_4g:
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_4G;
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	4a0b      	ldr	r2, [pc, #44]	; (80050bc <ISM330DHCX_ACC_GetSensitivity+0x80>)
 8005090:	601a      	str	r2, [r3, #0]
      break;
 8005092:	e00b      	b.n	80050ac <ISM330DHCX_ACC_GetSensitivity+0x70>

    case ISM330DHCX_8g:
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_8G;
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	4a0a      	ldr	r2, [pc, #40]	; (80050c0 <ISM330DHCX_ACC_GetSensitivity+0x84>)
 8005098:	601a      	str	r2, [r3, #0]
      break;
 800509a:	e007      	b.n	80050ac <ISM330DHCX_ACC_GetSensitivity+0x70>

    case ISM330DHCX_16g:
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_16G;
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	4a09      	ldr	r2, [pc, #36]	; (80050c4 <ISM330DHCX_ACC_GetSensitivity+0x88>)
 80050a0:	601a      	str	r2, [r3, #0]
      break;
 80050a2:	e003      	b.n	80050ac <ISM330DHCX_ACC_GetSensitivity+0x70>

    default:
      ret = ISM330DHCX_ERROR;
 80050a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80050a8:	60fb      	str	r3, [r7, #12]
      break;
 80050aa:	bf00      	nop
  }

  return ret;
 80050ac:	68fb      	ldr	r3, [r7, #12]
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3710      	adds	r7, #16
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}
 80050b6:	bf00      	nop
 80050b8:	3d79db23 	.word	0x3d79db23
 80050bc:	3df9db23 	.word	0x3df9db23
 80050c0:	3e79db23 	.word	0x3e79db23
 80050c4:	3ef9db23 	.word	0x3ef9db23

080050c8 <ISM330DHCX_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_GetOutputDataRate(ISM330DHCX_Object_t *pObj, float *Odr)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b084      	sub	sp, #16
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 80050d2:	2300      	movs	r3, #0
 80050d4:	60fb      	str	r3, [r7, #12]
  ism330dhcx_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (ism330dhcx_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != ISM330DHCX_OK)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	3320      	adds	r3, #32
 80050da:	f107 020b 	add.w	r2, r7, #11
 80050de:	4611      	mov	r1, r2
 80050e0:	4618      	mov	r0, r3
 80050e2:	f001 f829 	bl	8006138 <ism330dhcx_xl_data_rate_get>
 80050e6:	4603      	mov	r3, r0
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d002      	beq.n	80050f2 <ISM330DHCX_ACC_GetOutputDataRate+0x2a>
  {
    return ISM330DHCX_ERROR;
 80050ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80050f0:	e04e      	b.n	8005190 <ISM330DHCX_ACC_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 80050f2:	7afb      	ldrb	r3, [r7, #11]
 80050f4:	2b0a      	cmp	r3, #10
 80050f6:	d846      	bhi.n	8005186 <ISM330DHCX_ACC_GetOutputDataRate+0xbe>
 80050f8:	a201      	add	r2, pc, #4	; (adr r2, 8005100 <ISM330DHCX_ACC_GetOutputDataRate+0x38>)
 80050fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050fe:	bf00      	nop
 8005100:	0800512d 	.word	0x0800512d
 8005104:	08005137 	.word	0x08005137
 8005108:	0800513f 	.word	0x0800513f
 800510c:	08005147 	.word	0x08005147
 8005110:	0800514f 	.word	0x0800514f
 8005114:	08005157 	.word	0x08005157
 8005118:	0800515f 	.word	0x0800515f
 800511c:	08005167 	.word	0x08005167
 8005120:	0800516f 	.word	0x0800516f
 8005124:	08005177 	.word	0x08005177
 8005128:	0800517f 	.word	0x0800517f
  {
    case ISM330DHCX_XL_ODR_OFF:
      *Odr = 0.0f;
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	f04f 0200 	mov.w	r2, #0
 8005132:	601a      	str	r2, [r3, #0]
      break;
 8005134:	e02b      	b.n	800518e <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	4a17      	ldr	r2, [pc, #92]	; (8005198 <ISM330DHCX_ACC_GetOutputDataRate+0xd0>)
 800513a:	601a      	str	r2, [r3, #0]
      break;
 800513c:	e027      	b.n	800518e <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_26Hz:
      *Odr = 26.0f;
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	4a16      	ldr	r2, [pc, #88]	; (800519c <ISM330DHCX_ACC_GetOutputDataRate+0xd4>)
 8005142:	601a      	str	r2, [r3, #0]
      break;
 8005144:	e023      	b.n	800518e <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_52Hz:
      *Odr = 52.0f;
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	4a15      	ldr	r2, [pc, #84]	; (80051a0 <ISM330DHCX_ACC_GetOutputDataRate+0xd8>)
 800514a:	601a      	str	r2, [r3, #0]
      break;
 800514c:	e01f      	b.n	800518e <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_104Hz:
      *Odr = 104.0f;
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	4a14      	ldr	r2, [pc, #80]	; (80051a4 <ISM330DHCX_ACC_GetOutputDataRate+0xdc>)
 8005152:	601a      	str	r2, [r3, #0]
      break;
 8005154:	e01b      	b.n	800518e <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_208Hz:
      *Odr = 208.0f;
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	4a13      	ldr	r2, [pc, #76]	; (80051a8 <ISM330DHCX_ACC_GetOutputDataRate+0xe0>)
 800515a:	601a      	str	r2, [r3, #0]
      break;
 800515c:	e017      	b.n	800518e <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_416Hz:
      *Odr = 416.0f;
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	4a12      	ldr	r2, [pc, #72]	; (80051ac <ISM330DHCX_ACC_GetOutputDataRate+0xe4>)
 8005162:	601a      	str	r2, [r3, #0]
      break;
 8005164:	e013      	b.n	800518e <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_833Hz:
      *Odr = 833.0f;
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	4a11      	ldr	r2, [pc, #68]	; (80051b0 <ISM330DHCX_ACC_GetOutputDataRate+0xe8>)
 800516a:	601a      	str	r2, [r3, #0]
      break;
 800516c:	e00f      	b.n	800518e <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_1666Hz:
      *Odr = 1666.0f;
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	4a10      	ldr	r2, [pc, #64]	; (80051b4 <ISM330DHCX_ACC_GetOutputDataRate+0xec>)
 8005172:	601a      	str	r2, [r3, #0]
      break;
 8005174:	e00b      	b.n	800518e <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_3332Hz:
      *Odr = 3332.0f;
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	4a0f      	ldr	r2, [pc, #60]	; (80051b8 <ISM330DHCX_ACC_GetOutputDataRate+0xf0>)
 800517a:	601a      	str	r2, [r3, #0]
      break;
 800517c:	e007      	b.n	800518e <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_6667Hz:
      *Odr = 6667.0f;
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	4a0e      	ldr	r2, [pc, #56]	; (80051bc <ISM330DHCX_ACC_GetOutputDataRate+0xf4>)
 8005182:	601a      	str	r2, [r3, #0]
      break;
 8005184:	e003      	b.n	800518e <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    default:
      ret = ISM330DHCX_ERROR;
 8005186:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800518a:	60fb      	str	r3, [r7, #12]
      break;
 800518c:	bf00      	nop
  }

  return ret;
 800518e:	68fb      	ldr	r3, [r7, #12]
}
 8005190:	4618      	mov	r0, r3
 8005192:	3710      	adds	r7, #16
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}
 8005198:	41480000 	.word	0x41480000
 800519c:	41d00000 	.word	0x41d00000
 80051a0:	42500000 	.word	0x42500000
 80051a4:	42d00000 	.word	0x42d00000
 80051a8:	43500000 	.word	0x43500000
 80051ac:	43d00000 	.word	0x43d00000
 80051b0:	44504000 	.word	0x44504000
 80051b4:	44d04000 	.word	0x44d04000
 80051b8:	45504000 	.word	0x45504000
 80051bc:	45d05800 	.word	0x45d05800

080051c0 <ISM330DHCX_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_SetOutputDataRate(ISM330DHCX_Object_t *pObj, float Odr)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b082      	sub	sp, #8
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
 80051c8:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d106      	bne.n	80051e4 <ISM330DHCX_ACC_SetOutputDataRate+0x24>
  {
    return ISM330DHCX_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 80051d6:	ed97 0a00 	vldr	s0, [r7]
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f000 fb60 	bl	80058a0 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled>
 80051e0:	4603      	mov	r3, r0
 80051e2:	e005      	b.n	80051f0 <ISM330DHCX_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return ISM330DHCX_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 80051e4:	ed97 0a00 	vldr	s0, [r7]
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f000 fbe5 	bl	80059b8 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled>
 80051ee:	4603      	mov	r3, r0
  }
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3708      	adds	r7, #8
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}

080051f8 <ISM330DHCX_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_GetFullScale(ISM330DHCX_Object_t *pObj, int32_t *FullScale)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b084      	sub	sp, #16
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 8005202:	2300      	movs	r3, #0
 8005204:	60fb      	str	r3, [r7, #12]
  ism330dhcx_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (ism330dhcx_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != ISM330DHCX_OK)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	3320      	adds	r3, #32
 800520a:	f107 020b 	add.w	r2, r7, #11
 800520e:	4611      	mov	r1, r2
 8005210:	4618      	mov	r0, r3
 8005212:	f000 fded 	bl	8005df0 <ism330dhcx_xl_full_scale_get>
 8005216:	4603      	mov	r3, r0
 8005218:	2b00      	cmp	r3, #0
 800521a:	d002      	beq.n	8005222 <ISM330DHCX_ACC_GetFullScale+0x2a>
  {
    return ISM330DHCX_ERROR;
 800521c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005220:	e023      	b.n	800526a <ISM330DHCX_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8005222:	7afb      	ldrb	r3, [r7, #11]
 8005224:	2b03      	cmp	r3, #3
 8005226:	d81b      	bhi.n	8005260 <ISM330DHCX_ACC_GetFullScale+0x68>
 8005228:	a201      	add	r2, pc, #4	; (adr r2, 8005230 <ISM330DHCX_ACC_GetFullScale+0x38>)
 800522a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800522e:	bf00      	nop
 8005230:	08005241 	.word	0x08005241
 8005234:	08005259 	.word	0x08005259
 8005238:	08005249 	.word	0x08005249
 800523c:	08005251 	.word	0x08005251
  {
    case ISM330DHCX_2g:
      *FullScale =  2;
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	2202      	movs	r2, #2
 8005244:	601a      	str	r2, [r3, #0]
      break;
 8005246:	e00f      	b.n	8005268 <ISM330DHCX_ACC_GetFullScale+0x70>

    case ISM330DHCX_4g:
      *FullScale =  4;
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	2204      	movs	r2, #4
 800524c:	601a      	str	r2, [r3, #0]
      break;
 800524e:	e00b      	b.n	8005268 <ISM330DHCX_ACC_GetFullScale+0x70>

    case ISM330DHCX_8g:
      *FullScale =  8;
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	2208      	movs	r2, #8
 8005254:	601a      	str	r2, [r3, #0]
      break;
 8005256:	e007      	b.n	8005268 <ISM330DHCX_ACC_GetFullScale+0x70>

    case ISM330DHCX_16g:
      *FullScale = 16;
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	2210      	movs	r2, #16
 800525c:	601a      	str	r2, [r3, #0]
      break;
 800525e:	e003      	b.n	8005268 <ISM330DHCX_ACC_GetFullScale+0x70>

    default:
      ret = ISM330DHCX_ERROR;
 8005260:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005264:	60fb      	str	r3, [r7, #12]
      break;
 8005266:	bf00      	nop
  }

  return ret;
 8005268:	68fb      	ldr	r3, [r7, #12]
}
 800526a:	4618      	mov	r0, r3
 800526c:	3710      	adds	r7, #16
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}
 8005272:	bf00      	nop

08005274 <ISM330DHCX_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_SetFullScale(ISM330DHCX_Object_t *pObj, int32_t FullScale)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b084      	sub	sp, #16
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
 800527c:	6039      	str	r1, [r7, #0]
  ism330dhcx_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? ISM330DHCX_2g
           : (FullScale <= 4) ? ISM330DHCX_4g
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	2b02      	cmp	r3, #2
 8005282:	dd0b      	ble.n	800529c <ISM330DHCX_ACC_SetFullScale+0x28>
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	2b04      	cmp	r3, #4
 8005288:	dd06      	ble.n	8005298 <ISM330DHCX_ACC_SetFullScale+0x24>
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	2b08      	cmp	r3, #8
 800528e:	dc01      	bgt.n	8005294 <ISM330DHCX_ACC_SetFullScale+0x20>
 8005290:	2303      	movs	r3, #3
 8005292:	e004      	b.n	800529e <ISM330DHCX_ACC_SetFullScale+0x2a>
 8005294:	2301      	movs	r3, #1
 8005296:	e002      	b.n	800529e <ISM330DHCX_ACC_SetFullScale+0x2a>
 8005298:	2302      	movs	r3, #2
 800529a:	e000      	b.n	800529e <ISM330DHCX_ACC_SetFullScale+0x2a>
 800529c:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? ISM330DHCX_2g
 800529e:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? ISM330DHCX_8g
           :                    ISM330DHCX_16g;

  if (ism330dhcx_xl_full_scale_set(&(pObj->Ctx), new_fs) != ISM330DHCX_OK)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	3320      	adds	r3, #32
 80052a4:	7bfa      	ldrb	r2, [r7, #15]
 80052a6:	4611      	mov	r1, r2
 80052a8:	4618      	mov	r0, r3
 80052aa:	f000 fd7b 	bl	8005da4 <ism330dhcx_xl_full_scale_set>
 80052ae:	4603      	mov	r3, r0
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d002      	beq.n	80052ba <ISM330DHCX_ACC_SetFullScale+0x46>
  {
    return ISM330DHCX_ERROR;
 80052b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80052b8:	e000      	b.n	80052bc <ISM330DHCX_ACC_SetFullScale+0x48>
  }

  return ISM330DHCX_OK;
 80052ba:	2300      	movs	r3, #0
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3710      	adds	r7, #16
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}

080052c4 <ISM330DHCX_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_GetAxesRaw(ISM330DHCX_Object_t *pObj, ISM330DHCX_AxesRaw_t *Value)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b084      	sub	sp, #16
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	6039      	str	r1, [r7, #0]
  ism330dhcx_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (ism330dhcx_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	3320      	adds	r3, #32
 80052d2:	f107 0208 	add.w	r2, r7, #8
 80052d6:	4611      	mov	r1, r2
 80052d8:	4618      	mov	r0, r3
 80052da:	f001 fa4c 	bl	8006776 <ism330dhcx_acceleration_raw_get>
 80052de:	4603      	mov	r3, r0
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d002      	beq.n	80052ea <ISM330DHCX_ACC_GetAxesRaw+0x26>
  {
    return ISM330DHCX_ERROR;
 80052e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80052e8:	e00c      	b.n	8005304 <ISM330DHCX_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 80052ea:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80052f2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 80052fa:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	809a      	strh	r2, [r3, #4]

  return ISM330DHCX_OK;
 8005302:	2300      	movs	r3, #0
}
 8005304:	4618      	mov	r0, r3
 8005306:	3710      	adds	r7, #16
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}

0800530c <ISM330DHCX_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_GetAxes(ISM330DHCX_Object_t *pObj, ISM330DHCX_Axes_t *Acceleration)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b086      	sub	sp, #24
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
 8005314:	6039      	str	r1, [r7, #0]
  ism330dhcx_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 8005316:	f04f 0300 	mov.w	r3, #0
 800531a:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (ism330dhcx_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	3320      	adds	r3, #32
 8005320:	f107 0210 	add.w	r2, r7, #16
 8005324:	4611      	mov	r1, r2
 8005326:	4618      	mov	r0, r3
 8005328:	f001 fa25 	bl	8006776 <ism330dhcx_acceleration_raw_get>
 800532c:	4603      	mov	r3, r0
 800532e:	2b00      	cmp	r3, #0
 8005330:	d002      	beq.n	8005338 <ISM330DHCX_ACC_GetAxes+0x2c>
  {
    return ISM330DHCX_ERROR;
 8005332:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005336:	e03c      	b.n	80053b2 <ISM330DHCX_ACC_GetAxes+0xa6>
  }

  /* Get ISM330DHCX actual sensitivity. */
  if (ISM330DHCX_ACC_GetSensitivity(pObj, &sensitivity) != ISM330DHCX_OK)
 8005338:	f107 030c 	add.w	r3, r7, #12
 800533c:	4619      	mov	r1, r3
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f7ff fe7c 	bl	800503c <ISM330DHCX_ACC_GetSensitivity>
 8005344:	4603      	mov	r3, r0
 8005346:	2b00      	cmp	r3, #0
 8005348:	d002      	beq.n	8005350 <ISM330DHCX_ACC_GetAxes+0x44>
  {
    return ISM330DHCX_ERROR;
 800534a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800534e:	e030      	b.n	80053b2 <ISM330DHCX_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8005350:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005354:	ee07 3a90 	vmov	s15, r3
 8005358:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800535c:	edd7 7a03 	vldr	s15, [r7, #12]
 8005360:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005364:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005368:	ee17 2a90 	vmov	r2, s15
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8005370:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005374:	ee07 3a90 	vmov	s15, r3
 8005378:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800537c:	edd7 7a03 	vldr	s15, [r7, #12]
 8005380:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005384:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005388:	ee17 2a90 	vmov	r2, s15
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8005390:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005394:	ee07 3a90 	vmov	s15, r3
 8005398:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800539c:	edd7 7a03 	vldr	s15, [r7, #12]
 80053a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80053a8:	ee17 2a90 	vmov	r2, s15
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	609a      	str	r2, [r3, #8]

  return ISM330DHCX_OK;
 80053b0:	2300      	movs	r3, #0
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3718      	adds	r7, #24
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}

080053ba <ISM330DHCX_GYRO_Enable>:
  * @brief  Enable the ISM330DHCX gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_Enable(ISM330DHCX_Object_t *pObj)
{
 80053ba:	b580      	push	{r7, lr}
 80053bc:	b082      	sub	sp, #8
 80053be:	af00      	add	r7, sp, #0
 80053c0:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d101      	bne.n	80053d0 <ISM330DHCX_GYRO_Enable+0x16>
  {
    return ISM330DHCX_OK;
 80053cc:	2300      	movs	r3, #0
 80053ce:	e014      	b.n	80053fa <ISM330DHCX_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != ISM330DHCX_OK)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	f103 0220 	add.w	r2, r3, #32
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80053dc:	4619      	mov	r1, r3
 80053de:	4610      	mov	r0, r2
 80053e0:	f000 ff8a 	bl	80062f8 <ism330dhcx_gy_data_rate_set>
 80053e4:	4603      	mov	r3, r0
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d002      	beq.n	80053f0 <ISM330DHCX_GYRO_Enable+0x36>
  {
    return ISM330DHCX_ERROR;
 80053ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80053ee:	e004      	b.n	80053fa <ISM330DHCX_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2201      	movs	r2, #1
 80053f4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return ISM330DHCX_OK;
 80053f8:	2300      	movs	r3, #0
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3708      	adds	r7, #8
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}

08005402 <ISM330DHCX_GYRO_Disable>:
  * @brief  Disable the ISM330DHCX gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_Disable(ISM330DHCX_Object_t *pObj)
{
 8005402:	b580      	push	{r7, lr}
 8005404:	b082      	sub	sp, #8
 8005406:	af00      	add	r7, sp, #0
 8005408:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005410:	2b00      	cmp	r3, #0
 8005412:	d101      	bne.n	8005418 <ISM330DHCX_GYRO_Disable+0x16>
  {
    return ISM330DHCX_OK;
 8005414:	2300      	movs	r3, #0
 8005416:	e01f      	b.n	8005458 <ISM330DHCX_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (ism330dhcx_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != ISM330DHCX_OK)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f103 0220 	add.w	r2, r3, #32
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	3334      	adds	r3, #52	; 0x34
 8005422:	4619      	mov	r1, r3
 8005424:	4610      	mov	r0, r2
 8005426:	f001 f8d3 	bl	80065d0 <ism330dhcx_gy_data_rate_get>
 800542a:	4603      	mov	r3, r0
 800542c:	2b00      	cmp	r3, #0
 800542e:	d002      	beq.n	8005436 <ISM330DHCX_GYRO_Disable+0x34>
  {
    return ISM330DHCX_ERROR;
 8005430:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005434:	e010      	b.n	8005458 <ISM330DHCX_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), ISM330DHCX_GY_ODR_OFF) != ISM330DHCX_OK)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	3320      	adds	r3, #32
 800543a:	2100      	movs	r1, #0
 800543c:	4618      	mov	r0, r3
 800543e:	f000 ff5b 	bl	80062f8 <ism330dhcx_gy_data_rate_set>
 8005442:	4603      	mov	r3, r0
 8005444:	2b00      	cmp	r3, #0
 8005446:	d002      	beq.n	800544e <ISM330DHCX_GYRO_Disable+0x4c>
  {
    return ISM330DHCX_ERROR;
 8005448:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800544c:	e004      	b.n	8005458 <ISM330DHCX_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2200      	movs	r2, #0
 8005452:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return ISM330DHCX_OK;
 8005456:	2300      	movs	r3, #0
}
 8005458:	4618      	mov	r0, r3
 800545a:	3708      	adds	r7, #8
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}

08005460 <ISM330DHCX_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_GetSensitivity(ISM330DHCX_Object_t *pObj, float *Sensitivity)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b084      	sub	sp, #16
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 800546a:	2300      	movs	r3, #0
 800546c:	60fb      	str	r3, [r7, #12]
  ism330dhcx_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (ism330dhcx_gy_full_scale_get(&(pObj->Ctx), &full_scale) != ISM330DHCX_OK)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	3320      	adds	r3, #32
 8005472:	f107 020b 	add.w	r2, r7, #11
 8005476:	4611      	mov	r1, r2
 8005478:	4618      	mov	r0, r3
 800547a:	f000 feeb 	bl	8006254 <ism330dhcx_gy_full_scale_get>
 800547e:	4603      	mov	r3, r0
 8005480:	2b00      	cmp	r3, #0
 8005482:	d002      	beq.n	800548a <ISM330DHCX_GYRO_GetSensitivity+0x2a>
  {
    return ISM330DHCX_ERROR;
 8005484:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005488:	e03d      	b.n	8005506 <ISM330DHCX_GYRO_GetSensitivity+0xa6>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 800548a:	7afb      	ldrb	r3, [r7, #11]
 800548c:	2b0c      	cmp	r3, #12
 800548e:	d835      	bhi.n	80054fc <ISM330DHCX_GYRO_GetSensitivity+0x9c>
 8005490:	a201      	add	r2, pc, #4	; (adr r2, 8005498 <ISM330DHCX_GYRO_GetSensitivity+0x38>)
 8005492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005496:	bf00      	nop
 8005498:	080054d5 	.word	0x080054d5
 800549c:	080054f5 	.word	0x080054f5
 80054a0:	080054cd 	.word	0x080054cd
 80054a4:	080054fd 	.word	0x080054fd
 80054a8:	080054dd 	.word	0x080054dd
 80054ac:	080054fd 	.word	0x080054fd
 80054b0:	080054fd 	.word	0x080054fd
 80054b4:	080054fd 	.word	0x080054fd
 80054b8:	080054e5 	.word	0x080054e5
 80054bc:	080054fd 	.word	0x080054fd
 80054c0:	080054fd 	.word	0x080054fd
 80054c4:	080054fd 	.word	0x080054fd
 80054c8:	080054ed 	.word	0x080054ed
  {
    case ISM330DHCX_125dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_125DPS;
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	4a10      	ldr	r2, [pc, #64]	; (8005510 <ISM330DHCX_GYRO_GetSensitivity+0xb0>)
 80054d0:	601a      	str	r2, [r3, #0]
      break;
 80054d2:	e017      	b.n	8005504 <ISM330DHCX_GYRO_GetSensitivity+0xa4>

    case ISM330DHCX_250dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_250DPS;
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	4a0f      	ldr	r2, [pc, #60]	; (8005514 <ISM330DHCX_GYRO_GetSensitivity+0xb4>)
 80054d8:	601a      	str	r2, [r3, #0]
      break;
 80054da:	e013      	b.n	8005504 <ISM330DHCX_GYRO_GetSensitivity+0xa4>

    case ISM330DHCX_500dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_500DPS;
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	4a0e      	ldr	r2, [pc, #56]	; (8005518 <ISM330DHCX_GYRO_GetSensitivity+0xb8>)
 80054e0:	601a      	str	r2, [r3, #0]
      break;
 80054e2:	e00f      	b.n	8005504 <ISM330DHCX_GYRO_GetSensitivity+0xa4>

    case ISM330DHCX_1000dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_1000DPS;
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	4a0d      	ldr	r2, [pc, #52]	; (800551c <ISM330DHCX_GYRO_GetSensitivity+0xbc>)
 80054e8:	601a      	str	r2, [r3, #0]
      break;
 80054ea:	e00b      	b.n	8005504 <ISM330DHCX_GYRO_GetSensitivity+0xa4>

    case ISM330DHCX_2000dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_2000DPS;
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	4a0c      	ldr	r2, [pc, #48]	; (8005520 <ISM330DHCX_GYRO_GetSensitivity+0xc0>)
 80054f0:	601a      	str	r2, [r3, #0]
      break;
 80054f2:	e007      	b.n	8005504 <ISM330DHCX_GYRO_GetSensitivity+0xa4>

    case ISM330DHCX_4000dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_4000DPS;
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	4a0b      	ldr	r2, [pc, #44]	; (8005524 <ISM330DHCX_GYRO_GetSensitivity+0xc4>)
 80054f8:	601a      	str	r2, [r3, #0]
      break;
 80054fa:	e003      	b.n	8005504 <ISM330DHCX_GYRO_GetSensitivity+0xa4>

    default:
      ret = ISM330DHCX_ERROR;
 80054fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005500:	60fb      	str	r3, [r7, #12]
      break;
 8005502:	bf00      	nop
  }

  return ret;
 8005504:	68fb      	ldr	r3, [r7, #12]
}
 8005506:	4618      	mov	r0, r3
 8005508:	3710      	adds	r7, #16
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}
 800550e:	bf00      	nop
 8005510:	408c0000 	.word	0x408c0000
 8005514:	410c0000 	.word	0x410c0000
 8005518:	418c0000 	.word	0x418c0000
 800551c:	420c0000 	.word	0x420c0000
 8005520:	428c0000 	.word	0x428c0000
 8005524:	430c0000 	.word	0x430c0000

08005528 <ISM330DHCX_GYRO_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_GetOutputDataRate(ISM330DHCX_Object_t *pObj, float *Odr)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b084      	sub	sp, #16
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 8005532:	2300      	movs	r3, #0
 8005534:	60fb      	str	r3, [r7, #12]
  ism330dhcx_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (ism330dhcx_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != ISM330DHCX_OK)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	3320      	adds	r3, #32
 800553a:	f107 020b 	add.w	r2, r7, #11
 800553e:	4611      	mov	r1, r2
 8005540:	4618      	mov	r0, r3
 8005542:	f001 f845 	bl	80065d0 <ism330dhcx_gy_data_rate_get>
 8005546:	4603      	mov	r3, r0
 8005548:	2b00      	cmp	r3, #0
 800554a:	d002      	beq.n	8005552 <ISM330DHCX_GYRO_GetOutputDataRate+0x2a>
  {
    return ISM330DHCX_ERROR;
 800554c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005550:	e04e      	b.n	80055f0 <ISM330DHCX_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 8005552:	7afb      	ldrb	r3, [r7, #11]
 8005554:	2b0a      	cmp	r3, #10
 8005556:	d846      	bhi.n	80055e6 <ISM330DHCX_GYRO_GetOutputDataRate+0xbe>
 8005558:	a201      	add	r2, pc, #4	; (adr r2, 8005560 <ISM330DHCX_GYRO_GetOutputDataRate+0x38>)
 800555a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800555e:	bf00      	nop
 8005560:	0800558d 	.word	0x0800558d
 8005564:	08005597 	.word	0x08005597
 8005568:	0800559f 	.word	0x0800559f
 800556c:	080055a7 	.word	0x080055a7
 8005570:	080055af 	.word	0x080055af
 8005574:	080055b7 	.word	0x080055b7
 8005578:	080055bf 	.word	0x080055bf
 800557c:	080055c7 	.word	0x080055c7
 8005580:	080055cf 	.word	0x080055cf
 8005584:	080055d7 	.word	0x080055d7
 8005588:	080055df 	.word	0x080055df
  {
    case ISM330DHCX_GY_ODR_OFF:
      *Odr = 0.0f;
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	f04f 0200 	mov.w	r2, #0
 8005592:	601a      	str	r2, [r3, #0]
      break;
 8005594:	e02b      	b.n	80055ee <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_12Hz5:
      *Odr = 12.5f;
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	4a17      	ldr	r2, [pc, #92]	; (80055f8 <ISM330DHCX_GYRO_GetOutputDataRate+0xd0>)
 800559a:	601a      	str	r2, [r3, #0]
      break;
 800559c:	e027      	b.n	80055ee <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_26Hz:
      *Odr = 26.0f;
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	4a16      	ldr	r2, [pc, #88]	; (80055fc <ISM330DHCX_GYRO_GetOutputDataRate+0xd4>)
 80055a2:	601a      	str	r2, [r3, #0]
      break;
 80055a4:	e023      	b.n	80055ee <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_52Hz:
      *Odr = 52.0f;
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	4a15      	ldr	r2, [pc, #84]	; (8005600 <ISM330DHCX_GYRO_GetOutputDataRate+0xd8>)
 80055aa:	601a      	str	r2, [r3, #0]
      break;
 80055ac:	e01f      	b.n	80055ee <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_104Hz:
      *Odr = 104.0f;
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	4a14      	ldr	r2, [pc, #80]	; (8005604 <ISM330DHCX_GYRO_GetOutputDataRate+0xdc>)
 80055b2:	601a      	str	r2, [r3, #0]
      break;
 80055b4:	e01b      	b.n	80055ee <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_208Hz:
      *Odr = 208.0f;
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	4a13      	ldr	r2, [pc, #76]	; (8005608 <ISM330DHCX_GYRO_GetOutputDataRate+0xe0>)
 80055ba:	601a      	str	r2, [r3, #0]
      break;
 80055bc:	e017      	b.n	80055ee <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_416Hz:
      *Odr = 416.0f;
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	4a12      	ldr	r2, [pc, #72]	; (800560c <ISM330DHCX_GYRO_GetOutputDataRate+0xe4>)
 80055c2:	601a      	str	r2, [r3, #0]
      break;
 80055c4:	e013      	b.n	80055ee <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_833Hz:
      *Odr = 833.0f;
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	4a11      	ldr	r2, [pc, #68]	; (8005610 <ISM330DHCX_GYRO_GetOutputDataRate+0xe8>)
 80055ca:	601a      	str	r2, [r3, #0]
      break;
 80055cc:	e00f      	b.n	80055ee <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_1666Hz:
      *Odr =  1666.0f;
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	4a10      	ldr	r2, [pc, #64]	; (8005614 <ISM330DHCX_GYRO_GetOutputDataRate+0xec>)
 80055d2:	601a      	str	r2, [r3, #0]
      break;
 80055d4:	e00b      	b.n	80055ee <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_3332Hz:
      *Odr =  3332.0f;
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	4a0f      	ldr	r2, [pc, #60]	; (8005618 <ISM330DHCX_GYRO_GetOutputDataRate+0xf0>)
 80055da:	601a      	str	r2, [r3, #0]
      break;
 80055dc:	e007      	b.n	80055ee <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_6667Hz:
      *Odr =  6667.0f;
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	4a0e      	ldr	r2, [pc, #56]	; (800561c <ISM330DHCX_GYRO_GetOutputDataRate+0xf4>)
 80055e2:	601a      	str	r2, [r3, #0]
      break;
 80055e4:	e003      	b.n	80055ee <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = ISM330DHCX_ERROR;
 80055e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80055ea:	60fb      	str	r3, [r7, #12]
      break;
 80055ec:	bf00      	nop
  }

  return ret;
 80055ee:	68fb      	ldr	r3, [r7, #12]
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	3710      	adds	r7, #16
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}
 80055f8:	41480000 	.word	0x41480000
 80055fc:	41d00000 	.word	0x41d00000
 8005600:	42500000 	.word	0x42500000
 8005604:	42d00000 	.word	0x42d00000
 8005608:	43500000 	.word	0x43500000
 800560c:	43d00000 	.word	0x43d00000
 8005610:	44504000 	.word	0x44504000
 8005614:	44d04000 	.word	0x44d04000
 8005618:	45504000 	.word	0x45504000
 800561c:	45d05800 	.word	0x45d05800

08005620 <ISM330DHCX_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_SetOutputDataRate(ISM330DHCX_Object_t *pObj, float Odr)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b082      	sub	sp, #8
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->gyro_is_enabled == 1U)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005632:	2b01      	cmp	r3, #1
 8005634:	d106      	bne.n	8005644 <ISM330DHCX_GYRO_SetOutputDataRate+0x24>
  {
    return ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 8005636:	ed97 0a00 	vldr	s0, [r7]
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f000 fa3e 	bl	8005abc <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled>
 8005640:	4603      	mov	r3, r0
 8005642:	e005      	b.n	8005650 <ISM330DHCX_GYRO_SetOutputDataRate+0x30>
  }
  else
  {
    return ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 8005644:	ed97 0a00 	vldr	s0, [r7]
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f000 fac3 	bl	8005bd4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled>
 800564e:	4603      	mov	r3, r0
  }
}
 8005650:	4618      	mov	r0, r3
 8005652:	3708      	adds	r7, #8
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}

08005658 <ISM330DHCX_GYRO_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_GetFullScale(ISM330DHCX_Object_t *pObj, int32_t  *FullScale)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b084      	sub	sp, #16
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
 8005660:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 8005662:	2300      	movs	r3, #0
 8005664:	60fb      	str	r3, [r7, #12]
  ism330dhcx_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (ism330dhcx_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != ISM330DHCX_OK)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	3320      	adds	r3, #32
 800566a:	f107 020b 	add.w	r2, r7, #11
 800566e:	4611      	mov	r1, r2
 8005670:	4618      	mov	r0, r3
 8005672:	f000 fdef 	bl	8006254 <ism330dhcx_gy_full_scale_get>
 8005676:	4603      	mov	r3, r0
 8005678:	2b00      	cmp	r3, #0
 800567a:	d002      	beq.n	8005682 <ISM330DHCX_GYRO_GetFullScale+0x2a>
  {
    return ISM330DHCX_ERROR;
 800567c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005680:	e041      	b.n	8005706 <ISM330DHCX_GYRO_GetFullScale+0xae>
  }

  switch (fs_low_level)
 8005682:	7afb      	ldrb	r3, [r7, #11]
 8005684:	2b0c      	cmp	r3, #12
 8005686:	d839      	bhi.n	80056fc <ISM330DHCX_GYRO_GetFullScale+0xa4>
 8005688:	a201      	add	r2, pc, #4	; (adr r2, 8005690 <ISM330DHCX_GYRO_GetFullScale+0x38>)
 800568a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800568e:	bf00      	nop
 8005690:	080056cd 	.word	0x080056cd
 8005694:	080056f3 	.word	0x080056f3
 8005698:	080056c5 	.word	0x080056c5
 800569c:	080056fd 	.word	0x080056fd
 80056a0:	080056d5 	.word	0x080056d5
 80056a4:	080056fd 	.word	0x080056fd
 80056a8:	080056fd 	.word	0x080056fd
 80056ac:	080056fd 	.word	0x080056fd
 80056b0:	080056df 	.word	0x080056df
 80056b4:	080056fd 	.word	0x080056fd
 80056b8:	080056fd 	.word	0x080056fd
 80056bc:	080056fd 	.word	0x080056fd
 80056c0:	080056e9 	.word	0x080056e9
  {
    case ISM330DHCX_125dps:
      *FullScale =  125;
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	227d      	movs	r2, #125	; 0x7d
 80056c8:	601a      	str	r2, [r3, #0]
      break;
 80056ca:	e01b      	b.n	8005704 <ISM330DHCX_GYRO_GetFullScale+0xac>

    case ISM330DHCX_250dps:
      *FullScale =  250;
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	22fa      	movs	r2, #250	; 0xfa
 80056d0:	601a      	str	r2, [r3, #0]
      break;
 80056d2:	e017      	b.n	8005704 <ISM330DHCX_GYRO_GetFullScale+0xac>

    case ISM330DHCX_500dps:
      *FullScale =  500;
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80056da:	601a      	str	r2, [r3, #0]
      break;
 80056dc:	e012      	b.n	8005704 <ISM330DHCX_GYRO_GetFullScale+0xac>

    case ISM330DHCX_1000dps:
      *FullScale = 1000;
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80056e4:	601a      	str	r2, [r3, #0]
      break;
 80056e6:	e00d      	b.n	8005704 <ISM330DHCX_GYRO_GetFullScale+0xac>

    case ISM330DHCX_2000dps:
      *FullScale = 2000;
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80056ee:	601a      	str	r2, [r3, #0]
      break;
 80056f0:	e008      	b.n	8005704 <ISM330DHCX_GYRO_GetFullScale+0xac>

    case ISM330DHCX_4000dps:
      *FullScale = 4000;
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80056f8:	601a      	str	r2, [r3, #0]
      break;
 80056fa:	e003      	b.n	8005704 <ISM330DHCX_GYRO_GetFullScale+0xac>

    default:
      ret = ISM330DHCX_ERROR;
 80056fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005700:	60fb      	str	r3, [r7, #12]
      break;
 8005702:	bf00      	nop
  }

  return ret;
 8005704:	68fb      	ldr	r3, [r7, #12]
}
 8005706:	4618      	mov	r0, r3
 8005708:	3710      	adds	r7, #16
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}
 800570e:	bf00      	nop

08005710 <ISM330DHCX_GYRO_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_SetFullScale(ISM330DHCX_Object_t *pObj, int32_t FullScale)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b084      	sub	sp, #16
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	6039      	str	r1, [r7, #0]
  ism330dhcx_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? ISM330DHCX_125dps
           : (FullScale <= 250)  ? ISM330DHCX_250dps
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	2b7d      	cmp	r3, #125	; 0x7d
 800571e:	dd18      	ble.n	8005752 <ISM330DHCX_GYRO_SetFullScale+0x42>
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	2bfa      	cmp	r3, #250	; 0xfa
 8005724:	dd13      	ble.n	800574e <ISM330DHCX_GYRO_SetFullScale+0x3e>
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800572c:	dd0d      	ble.n	800574a <ISM330DHCX_GYRO_SetFullScale+0x3a>
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005734:	dd07      	ble.n	8005746 <ISM330DHCX_GYRO_SetFullScale+0x36>
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800573c:	dc01      	bgt.n	8005742 <ISM330DHCX_GYRO_SetFullScale+0x32>
 800573e:	230c      	movs	r3, #12
 8005740:	e008      	b.n	8005754 <ISM330DHCX_GYRO_SetFullScale+0x44>
 8005742:	2301      	movs	r3, #1
 8005744:	e006      	b.n	8005754 <ISM330DHCX_GYRO_SetFullScale+0x44>
 8005746:	2308      	movs	r3, #8
 8005748:	e004      	b.n	8005754 <ISM330DHCX_GYRO_SetFullScale+0x44>
 800574a:	2304      	movs	r3, #4
 800574c:	e002      	b.n	8005754 <ISM330DHCX_GYRO_SetFullScale+0x44>
 800574e:	2300      	movs	r3, #0
 8005750:	e000      	b.n	8005754 <ISM330DHCX_GYRO_SetFullScale+0x44>
 8005752:	2302      	movs	r3, #2
  new_fs = (FullScale <= 125)  ? ISM330DHCX_125dps
 8005754:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? ISM330DHCX_500dps
           : (FullScale <= 1000) ? ISM330DHCX_1000dps
           : (FullScale <= 2000) ? ISM330DHCX_2000dps
           :                       ISM330DHCX_4000dps;

  if (ism330dhcx_gy_full_scale_set(&(pObj->Ctx), new_fs) != ISM330DHCX_OK)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	3320      	adds	r3, #32
 800575a:	7bfa      	ldrb	r2, [r7, #15]
 800575c:	4611      	mov	r1, r2
 800575e:	4618      	mov	r0, r3
 8005760:	f000 fd52 	bl	8006208 <ism330dhcx_gy_full_scale_set>
 8005764:	4603      	mov	r3, r0
 8005766:	2b00      	cmp	r3, #0
 8005768:	d002      	beq.n	8005770 <ISM330DHCX_GYRO_SetFullScale+0x60>
  {
    return ISM330DHCX_ERROR;
 800576a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800576e:	e000      	b.n	8005772 <ISM330DHCX_GYRO_SetFullScale+0x62>
  }

  return ISM330DHCX_OK;
 8005770:	2300      	movs	r3, #0
}
 8005772:	4618      	mov	r0, r3
 8005774:	3710      	adds	r7, #16
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}

0800577a <ISM330DHCX_GYRO_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_GetAxesRaw(ISM330DHCX_Object_t *pObj, ISM330DHCX_AxesRaw_t *Value)
{
 800577a:	b580      	push	{r7, lr}
 800577c:	b084      	sub	sp, #16
 800577e:	af00      	add	r7, sp, #0
 8005780:	6078      	str	r0, [r7, #4]
 8005782:	6039      	str	r1, [r7, #0]
  ism330dhcx_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (ism330dhcx_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	3320      	adds	r3, #32
 8005788:	f107 0208 	add.w	r2, r7, #8
 800578c:	4611      	mov	r1, r2
 800578e:	4618      	mov	r0, r3
 8005790:	f000 ffa6 	bl	80066e0 <ism330dhcx_angular_rate_raw_get>
 8005794:	4603      	mov	r3, r0
 8005796:	2b00      	cmp	r3, #0
 8005798:	d002      	beq.n	80057a0 <ISM330DHCX_GYRO_GetAxesRaw+0x26>
  {
    return ISM330DHCX_ERROR;
 800579a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800579e:	e00c      	b.n	80057ba <ISM330DHCX_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 80057a0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80057a8:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 80057b0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	809a      	strh	r2, [r3, #4]

  return ISM330DHCX_OK;
 80057b8:	2300      	movs	r3, #0
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3710      	adds	r7, #16
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}

080057c2 <ISM330DHCX_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_GetAxes(ISM330DHCX_Object_t *pObj, ISM330DHCX_Axes_t *AngularRate)
{
 80057c2:	b580      	push	{r7, lr}
 80057c4:	b086      	sub	sp, #24
 80057c6:	af00      	add	r7, sp, #0
 80057c8:	6078      	str	r0, [r7, #4]
 80057ca:	6039      	str	r1, [r7, #0]
  ism330dhcx_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (ism330dhcx_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	3320      	adds	r3, #32
 80057d0:	f107 0210 	add.w	r2, r7, #16
 80057d4:	4611      	mov	r1, r2
 80057d6:	4618      	mov	r0, r3
 80057d8:	f000 ff82 	bl	80066e0 <ism330dhcx_angular_rate_raw_get>
 80057dc:	4603      	mov	r3, r0
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d002      	beq.n	80057e8 <ISM330DHCX_GYRO_GetAxes+0x26>
  {
    return ISM330DHCX_ERROR;
 80057e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80057e6:	e03c      	b.n	8005862 <ISM330DHCX_GYRO_GetAxes+0xa0>
  }

  /* Get ISM330DHCX actual sensitivity. */
  if (ISM330DHCX_GYRO_GetSensitivity(pObj, &sensitivity) != ISM330DHCX_OK)
 80057e8:	f107 030c 	add.w	r3, r7, #12
 80057ec:	4619      	mov	r1, r3
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f7ff fe36 	bl	8005460 <ISM330DHCX_GYRO_GetSensitivity>
 80057f4:	4603      	mov	r3, r0
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d002      	beq.n	8005800 <ISM330DHCX_GYRO_GetAxes+0x3e>
  {
    return ISM330DHCX_ERROR;
 80057fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80057fe:	e030      	b.n	8005862 <ISM330DHCX_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8005800:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005804:	ee07 3a90 	vmov	s15, r3
 8005808:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800580c:	edd7 7a03 	vldr	s15, [r7, #12]
 8005810:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005814:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005818:	ee17 2a90 	vmov	r2, s15
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8005820:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005824:	ee07 3a90 	vmov	s15, r3
 8005828:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800582c:	edd7 7a03 	vldr	s15, [r7, #12]
 8005830:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005834:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005838:	ee17 2a90 	vmov	r2, s15
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8005840:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005844:	ee07 3a90 	vmov	s15, r3
 8005848:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800584c:	edd7 7a03 	vldr	s15, [r7, #12]
 8005850:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005854:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005858:	ee17 2a90 	vmov	r2, s15
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	609a      	str	r2, [r3, #8]

  return ISM330DHCX_OK;
 8005860:	2300      	movs	r3, #0
}
 8005862:	4618      	mov	r0, r3
 8005864:	3718      	adds	r7, #24
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}

0800586a <ISM330DHCX_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_Write_Reg(ISM330DHCX_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 800586a:	b580      	push	{r7, lr}
 800586c:	b082      	sub	sp, #8
 800586e:	af00      	add	r7, sp, #0
 8005870:	6078      	str	r0, [r7, #4]
 8005872:	460b      	mov	r3, r1
 8005874:	70fb      	strb	r3, [r7, #3]
 8005876:	4613      	mov	r3, r2
 8005878:	70bb      	strb	r3, [r7, #2]
  if (ism330dhcx_write_reg(&(pObj->Ctx), Reg, &Data, 1) != ISM330DHCX_OK)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f103 0020 	add.w	r0, r3, #32
 8005880:	1cba      	adds	r2, r7, #2
 8005882:	78f9      	ldrb	r1, [r7, #3]
 8005884:	2301      	movs	r3, #1
 8005886:	f000 fa75 	bl	8005d74 <ism330dhcx_write_reg>
 800588a:	4603      	mov	r3, r0
 800588c:	2b00      	cmp	r3, #0
 800588e:	d002      	beq.n	8005896 <ISM330DHCX_Write_Reg+0x2c>
  {
    return ISM330DHCX_ERROR;
 8005890:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005894:	e000      	b.n	8005898 <ISM330DHCX_Write_Reg+0x2e>
  }

  return ISM330DHCX_OK;
 8005896:	2300      	movs	r3, #0
}
 8005898:	4618      	mov	r0, r3
 800589a:	3708      	adds	r7, #8
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}

080058a0 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ISM330DHCX_ACC_SetOutputDataRate_When_Enabled(ISM330DHCX_Object_t *pObj, float Odr)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b084      	sub	sp, #16
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
 80058a8:	ed87 0a00 	vstr	s0, [r7]
  ism330dhcx_odr_xl_t new_odr;

  new_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
            : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 80058ac:	edd7 7a00 	vldr	s15, [r7]
 80058b0:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80058b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80058b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058bc:	d801      	bhi.n	80058c2 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x22>
 80058be:	2301      	movs	r3, #1
 80058c0:	e058      	b.n	8005974 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80058c2:	edd7 7a00 	vldr	s15, [r7]
 80058c6:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80058ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80058ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058d2:	d801      	bhi.n	80058d8 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x38>
 80058d4:	2302      	movs	r3, #2
 80058d6:	e04d      	b.n	8005974 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80058d8:	edd7 7a00 	vldr	s15, [r7]
 80058dc:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800599c <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xfc>
 80058e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80058e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058e8:	d801      	bhi.n	80058ee <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x4e>
 80058ea:	2303      	movs	r3, #3
 80058ec:	e042      	b.n	8005974 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80058ee:	edd7 7a00 	vldr	s15, [r7]
 80058f2:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80059a0 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x100>
 80058f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80058fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058fe:	d801      	bhi.n	8005904 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x64>
 8005900:	2304      	movs	r3, #4
 8005902:	e037      	b.n	8005974 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8005904:	edd7 7a00 	vldr	s15, [r7]
 8005908:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80059a4 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x104>
 800590c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005914:	d801      	bhi.n	800591a <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8005916:	2305      	movs	r3, #5
 8005918:	e02c      	b.n	8005974 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800591a:	edd7 7a00 	vldr	s15, [r7]
 800591e:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80059a8 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x108>
 8005922:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005926:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800592a:	d801      	bhi.n	8005930 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x90>
 800592c:	2306      	movs	r3, #6
 800592e:	e021      	b.n	8005974 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8005930:	edd7 7a00 	vldr	s15, [r7]
 8005934:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80059ac <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x10c>
 8005938:	eef4 7ac7 	vcmpe.f32	s15, s14
 800593c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005940:	d801      	bhi.n	8005946 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xa6>
 8005942:	2307      	movs	r3, #7
 8005944:	e016      	b.n	8005974 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8005946:	edd7 7a00 	vldr	s15, [r7]
 800594a:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80059b0 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x110>
 800594e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005956:	d801      	bhi.n	800595c <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8005958:	2308      	movs	r3, #8
 800595a:	e00b      	b.n	8005974 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800595c:	edd7 7a00 	vldr	s15, [r7]
 8005960:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80059b4 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x114>
 8005964:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005968:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800596c:	d801      	bhi.n	8005972 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd2>
 800596e:	2309      	movs	r3, #9
 8005970:	e000      	b.n	8005974 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8005972:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
 8005974:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1666.0f) ? ISM330DHCX_XL_ODR_1666Hz
            : (Odr <= 3332.0f) ? ISM330DHCX_XL_ODR_3332Hz
            :                    ISM330DHCX_XL_ODR_6667Hz;

  /* Output data rate selection. */
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), new_odr) != ISM330DHCX_OK)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	3320      	adds	r3, #32
 800597a:	7bfa      	ldrb	r2, [r7, #15]
 800597c:	4611      	mov	r1, r2
 800597e:	4618      	mov	r0, r3
 8005980:	f000 fa6e 	bl	8005e60 <ism330dhcx_xl_data_rate_set>
 8005984:	4603      	mov	r3, r0
 8005986:	2b00      	cmp	r3, #0
 8005988:	d002      	beq.n	8005990 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xf0>
  {
    return ISM330DHCX_ERROR;
 800598a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800598e:	e000      	b.n	8005992 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xf2>
  }

  return ISM330DHCX_OK;
 8005990:	2300      	movs	r3, #0
}
 8005992:	4618      	mov	r0, r3
 8005994:	3710      	adds	r7, #16
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}
 800599a:	bf00      	nop
 800599c:	42500000 	.word	0x42500000
 80059a0:	42d00000 	.word	0x42d00000
 80059a4:	43500000 	.word	0x43500000
 80059a8:	43d00000 	.word	0x43d00000
 80059ac:	44504000 	.word	0x44504000
 80059b0:	44d04000 	.word	0x44d04000
 80059b4:	45504000 	.word	0x45504000

080059b8 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ISM330DHCX_ACC_SetOutputDataRate_When_Disabled(ISM330DHCX_Object_t *pObj, float Odr)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b083      	sub	sp, #12
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
                  : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 80059c4:	edd7 7a00 	vldr	s15, [r7]
 80059c8:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80059cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80059d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059d4:	d801      	bhi.n	80059da <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x22>
 80059d6:	2301      	movs	r3, #1
 80059d8:	e058      	b.n	8005a8c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80059da:	edd7 7a00 	vldr	s15, [r7]
 80059de:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80059e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80059e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059ea:	d801      	bhi.n	80059f0 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x38>
 80059ec:	2302      	movs	r3, #2
 80059ee:	e04d      	b.n	8005a8c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80059f0:	edd7 7a00 	vldr	s15, [r7]
 80059f4:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8005aa0 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xe8>
 80059f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80059fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a00:	d801      	bhi.n	8005a06 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8005a02:	2303      	movs	r3, #3
 8005a04:	e042      	b.n	8005a8c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8005a06:	edd7 7a00 	vldr	s15, [r7]
 8005a0a:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8005aa4 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xec>
 8005a0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a16:	d801      	bhi.n	8005a1c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x64>
 8005a18:	2304      	movs	r3, #4
 8005a1a:	e037      	b.n	8005a8c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8005a1c:	edd7 7a00 	vldr	s15, [r7]
 8005a20:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8005aa8 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xf0>
 8005a24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a2c:	d801      	bhi.n	8005a32 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8005a2e:	2305      	movs	r3, #5
 8005a30:	e02c      	b.n	8005a8c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8005a32:	edd7 7a00 	vldr	s15, [r7]
 8005a36:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8005aac <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xf4>
 8005a3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a42:	d801      	bhi.n	8005a48 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x90>
 8005a44:	2306      	movs	r3, #6
 8005a46:	e021      	b.n	8005a8c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8005a48:	edd7 7a00 	vldr	s15, [r7]
 8005a4c:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8005ab0 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xf8>
 8005a50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a58:	d801      	bhi.n	8005a5e <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xa6>
 8005a5a:	2307      	movs	r3, #7
 8005a5c:	e016      	b.n	8005a8c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8005a5e:	edd7 7a00 	vldr	s15, [r7]
 8005a62:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8005ab4 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xfc>
 8005a66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a6e:	d801      	bhi.n	8005a74 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8005a70:	2308      	movs	r3, #8
 8005a72:	e00b      	b.n	8005a8c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8005a74:	edd7 7a00 	vldr	s15, [r7]
 8005a78:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8005ab8 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x100>
 8005a7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a84:	d801      	bhi.n	8005a8a <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd2>
 8005a86:	2309      	movs	r3, #9
 8005a88:	e000      	b.n	8005a8c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8005a8a:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
 8005a8c:	687a      	ldr	r2, [r7, #4]
 8005a8e:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
                  : (Odr <=  833.0f) ? ISM330DHCX_XL_ODR_833Hz
                  : (Odr <= 1666.0f) ? ISM330DHCX_XL_ODR_1666Hz
                  : (Odr <= 3332.0f) ? ISM330DHCX_XL_ODR_3332Hz
                  :                    ISM330DHCX_XL_ODR_6667Hz;

  return ISM330DHCX_OK;
 8005a92:	2300      	movs	r3, #0
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	370c      	adds	r7, #12
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr
 8005aa0:	42500000 	.word	0x42500000
 8005aa4:	42d00000 	.word	0x42d00000
 8005aa8:	43500000 	.word	0x43500000
 8005aac:	43d00000 	.word	0x43d00000
 8005ab0:	44504000 	.word	0x44504000
 8005ab4:	44d04000 	.word	0x44d04000
 8005ab8:	45504000 	.word	0x45504000

08005abc <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled(ISM330DHCX_Object_t *pObj, float Odr)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b084      	sub	sp, #16
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	ed87 0a00 	vstr	s0, [r7]
  ism330dhcx_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
            : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 8005ac8:	edd7 7a00 	vldr	s15, [r7]
 8005acc:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8005ad0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ad8:	d801      	bhi.n	8005ade <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x22>
 8005ada:	2301      	movs	r3, #1
 8005adc:	e058      	b.n	8005b90 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005ade:	edd7 7a00 	vldr	s15, [r7]
 8005ae2:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8005ae6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005aea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005aee:	d801      	bhi.n	8005af4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x38>
 8005af0:	2302      	movs	r3, #2
 8005af2:	e04d      	b.n	8005b90 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005af4:	edd7 7a00 	vldr	s15, [r7]
 8005af8:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8005bb8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 8005afc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b04:	d801      	bhi.n	8005b0a <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 8005b06:	2303      	movs	r3, #3
 8005b08:	e042      	b.n	8005b90 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005b0a:	edd7 7a00 	vldr	s15, [r7]
 8005b0e:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8005bbc <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x100>
 8005b12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b1a:	d801      	bhi.n	8005b20 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x64>
 8005b1c:	2304      	movs	r3, #4
 8005b1e:	e037      	b.n	8005b90 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005b20:	edd7 7a00 	vldr	s15, [r7]
 8005b24:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8005bc0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x104>
 8005b28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b30:	d801      	bhi.n	8005b36 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 8005b32:	2305      	movs	r3, #5
 8005b34:	e02c      	b.n	8005b90 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005b36:	edd7 7a00 	vldr	s15, [r7]
 8005b3a:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8005bc4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x108>
 8005b3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b46:	d801      	bhi.n	8005b4c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x90>
 8005b48:	2306      	movs	r3, #6
 8005b4a:	e021      	b.n	8005b90 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005b4c:	edd7 7a00 	vldr	s15, [r7]
 8005b50:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8005bc8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 8005b54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b5c:	d801      	bhi.n	8005b62 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 8005b5e:	2307      	movs	r3, #7
 8005b60:	e016      	b.n	8005b90 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005b62:	edd7 7a00 	vldr	s15, [r7]
 8005b66:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8005bcc <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x110>
 8005b6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b72:	d801      	bhi.n	8005b78 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 8005b74:	2308      	movs	r3, #8
 8005b76:	e00b      	b.n	8005b90 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005b78:	edd7 7a00 	vldr	s15, [r7]
 8005b7c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8005bd0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x114>
 8005b80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b88:	d801      	bhi.n	8005b8e <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 8005b8a:	2309      	movs	r3, #9
 8005b8c:	e000      	b.n	8005b90 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005b8e:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
 8005b90:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1666.0f) ? ISM330DHCX_GY_ODR_1666Hz
            : (Odr <= 3332.0f) ? ISM330DHCX_GY_ODR_3332Hz
            :                    ISM330DHCX_GY_ODR_6667Hz;

  /* Output data rate selection. */
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), new_odr) != ISM330DHCX_OK)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	3320      	adds	r3, #32
 8005b96:	7bfa      	ldrb	r2, [r7, #15]
 8005b98:	4611      	mov	r1, r2
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f000 fbac 	bl	80062f8 <ism330dhcx_gy_data_rate_set>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d002      	beq.n	8005bac <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return ISM330DHCX_ERROR;
 8005ba6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005baa:	e000      	b.n	8005bae <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return ISM330DHCX_OK;
 8005bac:	2300      	movs	r3, #0
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3710      	adds	r7, #16
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}
 8005bb6:	bf00      	nop
 8005bb8:	42500000 	.word	0x42500000
 8005bbc:	42d00000 	.word	0x42d00000
 8005bc0:	43500000 	.word	0x43500000
 8005bc4:	43d00000 	.word	0x43d00000
 8005bc8:	44504000 	.word	0x44504000
 8005bcc:	44d04000 	.word	0x44d04000
 8005bd0:	45504000 	.word	0x45504000

08005bd4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled(ISM330DHCX_Object_t *pObj, float Odr)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b083      	sub	sp, #12
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
                   : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 8005be0:	edd7 7a00 	vldr	s15, [r7]
 8005be4:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8005be8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005bec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bf0:	d801      	bhi.n	8005bf6 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x22>
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e058      	b.n	8005ca8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005bf6:	edd7 7a00 	vldr	s15, [r7]
 8005bfa:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8005bfe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005c02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c06:	d801      	bhi.n	8005c0c <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x38>
 8005c08:	2302      	movs	r3, #2
 8005c0a:	e04d      	b.n	8005ca8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005c0c:	edd7 7a00 	vldr	s15, [r7]
 8005c10:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8005cbc <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 8005c14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005c18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c1c:	d801      	bhi.n	8005c22 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 8005c1e:	2303      	movs	r3, #3
 8005c20:	e042      	b.n	8005ca8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005c22:	edd7 7a00 	vldr	s15, [r7]
 8005c26:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8005cc0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xec>
 8005c2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005c2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c32:	d801      	bhi.n	8005c38 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8005c34:	2304      	movs	r3, #4
 8005c36:	e037      	b.n	8005ca8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005c38:	edd7 7a00 	vldr	s15, [r7]
 8005c3c:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8005cc4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 8005c40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005c44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c48:	d801      	bhi.n	8005c4e <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 8005c4a:	2305      	movs	r3, #5
 8005c4c:	e02c      	b.n	8005ca8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005c4e:	edd7 7a00 	vldr	s15, [r7]
 8005c52:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8005cc8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 8005c56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c5e:	d801      	bhi.n	8005c64 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x90>
 8005c60:	2306      	movs	r3, #6
 8005c62:	e021      	b.n	8005ca8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005c64:	edd7 7a00 	vldr	s15, [r7]
 8005c68:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8005ccc <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 8005c6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005c70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c74:	d801      	bhi.n	8005c7a <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 8005c76:	2307      	movs	r3, #7
 8005c78:	e016      	b.n	8005ca8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005c7a:	edd7 7a00 	vldr	s15, [r7]
 8005c7e:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8005cd0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 8005c82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005c86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c8a:	d801      	bhi.n	8005c90 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8005c8c:	2308      	movs	r3, #8
 8005c8e:	e00b      	b.n	8005ca8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005c90:	edd7 7a00 	vldr	s15, [r7]
 8005c94:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8005cd4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x100>
 8005c98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005c9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ca0:	d801      	bhi.n	8005ca6 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 8005ca2:	2309      	movs	r3, #9
 8005ca4:	e000      	b.n	8005ca8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005ca6:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
 8005ca8:	687a      	ldr	r2, [r7, #4]
 8005caa:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
                   : (Odr <=  833.0f) ? ISM330DHCX_GY_ODR_833Hz
                   : (Odr <= 1666.0f) ? ISM330DHCX_GY_ODR_1666Hz
                   : (Odr <= 3332.0f) ? ISM330DHCX_GY_ODR_3332Hz
                   :                    ISM330DHCX_GY_ODR_6667Hz;

  return ISM330DHCX_OK;
 8005cae:	2300      	movs	r3, #0
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	370c      	adds	r7, #12
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr
 8005cbc:	42500000 	.word	0x42500000
 8005cc0:	42d00000 	.word	0x42d00000
 8005cc4:	43500000 	.word	0x43500000
 8005cc8:	43d00000 	.word	0x43d00000
 8005ccc:	44504000 	.word	0x44504000
 8005cd0:	44d04000 	.word	0x44d04000
 8005cd4:	45504000 	.word	0x45504000

08005cd8 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005cd8:	b590      	push	{r4, r7, lr}
 8005cda:	b087      	sub	sp, #28
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	60f8      	str	r0, [r7, #12]
 8005ce0:	607a      	str	r2, [r7, #4]
 8005ce2:	461a      	mov	r2, r3
 8005ce4:	460b      	mov	r3, r1
 8005ce6:	72fb      	strb	r3, [r7, #11]
 8005ce8:	4613      	mov	r3, r2
 8005cea:	813b      	strh	r3, [r7, #8]
  ISM330DHCX_Object_t *pObj = (ISM330DHCX_Object_t *)Handle;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	695c      	ldr	r4, [r3, #20]
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	7b1b      	ldrb	r3, [r3, #12]
 8005cf8:	b298      	uxth	r0, r3
 8005cfa:	7afb      	ldrb	r3, [r7, #11]
 8005cfc:	b299      	uxth	r1, r3
 8005cfe:	893b      	ldrh	r3, [r7, #8]
 8005d00:	687a      	ldr	r2, [r7, #4]
 8005d02:	47a0      	blx	r4
 8005d04:	4603      	mov	r3, r0
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	371c      	adds	r7, #28
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd90      	pop	{r4, r7, pc}

08005d0e <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005d0e:	b590      	push	{r4, r7, lr}
 8005d10:	b087      	sub	sp, #28
 8005d12:	af00      	add	r7, sp, #0
 8005d14:	60f8      	str	r0, [r7, #12]
 8005d16:	607a      	str	r2, [r7, #4]
 8005d18:	461a      	mov	r2, r3
 8005d1a:	460b      	mov	r3, r1
 8005d1c:	72fb      	strb	r3, [r7, #11]
 8005d1e:	4613      	mov	r3, r2
 8005d20:	813b      	strh	r3, [r7, #8]
  ISM330DHCX_Object_t *pObj = (ISM330DHCX_Object_t *)Handle;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	691c      	ldr	r4, [r3, #16]
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	7b1b      	ldrb	r3, [r3, #12]
 8005d2e:	b298      	uxth	r0, r3
 8005d30:	7afb      	ldrb	r3, [r7, #11]
 8005d32:	b299      	uxth	r1, r3
 8005d34:	893b      	ldrh	r3, [r7, #8]
 8005d36:	687a      	ldr	r2, [r7, #4]
 8005d38:	47a0      	blx	r4
 8005d3a:	4603      	mov	r3, r0
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	371c      	adds	r7, #28
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd90      	pop	{r4, r7, pc}

08005d44 <ism330dhcx_read_reg>:
  *
  */
int32_t __weak ism330dhcx_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                   uint8_t *data,
                                   uint16_t len)
{
 8005d44:	b590      	push	{r4, r7, lr}
 8005d46:	b087      	sub	sp, #28
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	60f8      	str	r0, [r7, #12]
 8005d4c:	607a      	str	r2, [r7, #4]
 8005d4e:	461a      	mov	r2, r3
 8005d50:	460b      	mov	r3, r1
 8005d52:	72fb      	strb	r3, [r7, #11]
 8005d54:	4613      	mov	r3, r2
 8005d56:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	685c      	ldr	r4, [r3, #4]
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	68d8      	ldr	r0, [r3, #12]
 8005d60:	893b      	ldrh	r3, [r7, #8]
 8005d62:	7af9      	ldrb	r1, [r7, #11]
 8005d64:	687a      	ldr	r2, [r7, #4]
 8005d66:	47a0      	blx	r4
 8005d68:	6178      	str	r0, [r7, #20]

  return ret;
 8005d6a:	697b      	ldr	r3, [r7, #20]
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	371c      	adds	r7, #28
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd90      	pop	{r4, r7, pc}

08005d74 <ism330dhcx_write_reg>:
  *
  */
int32_t __weak ism330dhcx_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                    uint8_t *data,
                                    uint16_t len)
{
 8005d74:	b590      	push	{r4, r7, lr}
 8005d76:	b087      	sub	sp, #28
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	60f8      	str	r0, [r7, #12]
 8005d7c:	607a      	str	r2, [r7, #4]
 8005d7e:	461a      	mov	r2, r3
 8005d80:	460b      	mov	r3, r1
 8005d82:	72fb      	strb	r3, [r7, #11]
 8005d84:	4613      	mov	r3, r2
 8005d86:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681c      	ldr	r4, [r3, #0]
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	68d8      	ldr	r0, [r3, #12]
 8005d90:	893b      	ldrh	r3, [r7, #8]
 8005d92:	7af9      	ldrb	r1, [r7, #11]
 8005d94:	687a      	ldr	r2, [r7, #4]
 8005d96:	47a0      	blx	r4
 8005d98:	6178      	str	r0, [r7, #20]

  return ret;
 8005d9a:	697b      	ldr	r3, [r7, #20]
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	371c      	adds	r7, #28
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd90      	pop	{r4, r7, pc}

08005da4 <ism330dhcx_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_full_scale_set(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_xl_t val)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b084      	sub	sp, #16
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
 8005dac:	460b      	mov	r3, r1
 8005dae:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 8005db0:	f107 0208 	add.w	r2, r7, #8
 8005db4:	2301      	movs	r3, #1
 8005db6:	2110      	movs	r1, #16
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f7ff ffc3 	bl	8005d44 <ism330dhcx_read_reg>
 8005dbe:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);

  if (ret == 0)
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d10f      	bne.n	8005de6 <ism330dhcx_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t)val;
 8005dc6:	78fb      	ldrb	r3, [r7, #3]
 8005dc8:	f003 0303 	and.w	r3, r3, #3
 8005dcc:	b2da      	uxtb	r2, r3
 8005dce:	7a3b      	ldrb	r3, [r7, #8]
 8005dd0:	f362 0383 	bfi	r3, r2, #2, #2
 8005dd4:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL1_XL,
 8005dd6:	f107 0208 	add.w	r2, r7, #8
 8005dda:	2301      	movs	r3, #1
 8005ddc:	2110      	movs	r1, #16
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f7ff ffc8 	bl	8005d74 <ism330dhcx_write_reg>
 8005de4:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8005de6:	68fb      	ldr	r3, [r7, #12]
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3710      	adds	r7, #16
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}

08005df0 <ism330dhcx_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_full_scale_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_xl_t *val)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b084      	sub	sp, #16
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 8005dfa:	f107 0208 	add.w	r2, r7, #8
 8005dfe:	2301      	movs	r3, #1
 8005e00:	2110      	movs	r1, #16
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f7ff ff9e 	bl	8005d44 <ism330dhcx_read_reg>
 8005e08:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);

  switch (ctrl1_xl.fs_xl)
 8005e0a:	7a3b      	ldrb	r3, [r7, #8]
 8005e0c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8005e10:	b2db      	uxtb	r3, r3
 8005e12:	2b03      	cmp	r3, #3
 8005e14:	d81a      	bhi.n	8005e4c <ism330dhcx_xl_full_scale_get+0x5c>
 8005e16:	a201      	add	r2, pc, #4	; (adr r2, 8005e1c <ism330dhcx_xl_full_scale_get+0x2c>)
 8005e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e1c:	08005e2d 	.word	0x08005e2d
 8005e20:	08005e35 	.word	0x08005e35
 8005e24:	08005e3d 	.word	0x08005e3d
 8005e28:	08005e45 	.word	0x08005e45
  {
    case ISM330DHCX_2g:
      *val = ISM330DHCX_2g;
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	701a      	strb	r2, [r3, #0]
      break;
 8005e32:	e00f      	b.n	8005e54 <ism330dhcx_xl_full_scale_get+0x64>

    case ISM330DHCX_16g:
      *val = ISM330DHCX_16g;
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	2201      	movs	r2, #1
 8005e38:	701a      	strb	r2, [r3, #0]
      break;
 8005e3a:	e00b      	b.n	8005e54 <ism330dhcx_xl_full_scale_get+0x64>

    case ISM330DHCX_4g:
      *val = ISM330DHCX_4g;
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	2202      	movs	r2, #2
 8005e40:	701a      	strb	r2, [r3, #0]
      break;
 8005e42:	e007      	b.n	8005e54 <ism330dhcx_xl_full_scale_get+0x64>

    case ISM330DHCX_8g:
      *val = ISM330DHCX_8g;
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	2203      	movs	r2, #3
 8005e48:	701a      	strb	r2, [r3, #0]
      break;
 8005e4a:	e003      	b.n	8005e54 <ism330dhcx_xl_full_scale_get+0x64>

    default:
      *val = ISM330DHCX_2g;
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	701a      	strb	r2, [r3, #0]
      break;
 8005e52:	bf00      	nop
  }

  return ret;
 8005e54:	68fb      	ldr	r3, [r7, #12]
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3710      	adds	r7, #16
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}
 8005e5e:	bf00      	nop

08005e60 <ism330dhcx_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_data_rate_set(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_xl_t val)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b086      	sub	sp, #24
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	460b      	mov	r3, r1
 8005e6a:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_odr_xl_t odr_xl =  val;
 8005e6c:	78fb      	ldrb	r3, [r7, #3]
 8005e6e:	75fb      	strb	r3, [r7, #23]
  uint8_t mlc_enable;
  ism330dhcx_mlc_odr_t mlc_odr;
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  /* Check the Finite State Machine data rate constraints */
  ret =  ism330dhcx_fsm_enable_get(ctx, &fsm_enable);
 8005e70:	f107 030c 	add.w	r3, r7, #12
 8005e74:	4619      	mov	r1, r3
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f000 fd97 	bl	80069aa <ism330dhcx_fsm_enable_get>
 8005e7c:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	f040 80c4 	bne.w	800600e <ism330dhcx_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005e86:	7b3b      	ldrb	r3, [r7, #12]
 8005e88:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005e8c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8005e8e:	7b3b      	ldrb	r3, [r7, #12]
 8005e90:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005e94:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005e96:	4313      	orrs	r3, r2
 8005e98:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8005e9a:	7b3b      	ldrb	r3, [r7, #12]
 8005e9c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005ea0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8005ea6:	7b3b      	ldrb	r3, [r7, #12]
 8005ea8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005eac:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8005eb2:	7b3b      	ldrb	r3, [r7, #12]
 8005eb4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005eb8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8005ebe:	7b3b      	ldrb	r3, [r7, #12]
 8005ec0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005ec4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8005eca:	7b3b      	ldrb	r3, [r7, #12]
 8005ecc:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005ed0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8005ed6:	7b3b      	ldrb	r3, [r7, #12]
 8005ed8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005edc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8005ee2:	7b7b      	ldrb	r3, [r7, #13]
 8005ee4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005ee8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8005eea:	4313      	orrs	r3, r2
 8005eec:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8005eee:	7b7b      	ldrb	r3, [r7, #13]
 8005ef0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005ef4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8005efa:	7b7b      	ldrb	r3, [r7, #13]
 8005efc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005f00:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8005f02:	4313      	orrs	r3, r2
 8005f04:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8005f06:	7b7b      	ldrb	r3, [r7, #13]
 8005f08:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005f0c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8005f12:	7b7b      	ldrb	r3, [r7, #13]
 8005f14:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005f18:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8005f1e:	7b7b      	ldrb	r3, [r7, #13]
 8005f20:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005f24:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8005f26:	4313      	orrs	r3, r2
 8005f28:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8005f2a:	7b7b      	ldrb	r3, [r7, #13]
 8005f2c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005f30:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8005f32:	4313      	orrs	r3, r2
 8005f34:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8005f36:	7b7b      	ldrb	r3, [r7, #13]
 8005f38:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005f3c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d163      	bne.n	800600e <ism330dhcx_xl_data_rate_set+0x1ae>
    {
      ret =  ism330dhcx_fsm_data_rate_get(ctx, &fsm_odr);
 8005f46:	f107 030b 	add.w	r3, r7, #11
 8005f4a:	4619      	mov	r1, r3
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f000 fd59 	bl	8006a04 <ism330dhcx_fsm_data_rate_get>
 8005f52:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d159      	bne.n	800600e <ism330dhcx_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8005f5a:	7afb      	ldrb	r3, [r7, #11]
 8005f5c:	2b03      	cmp	r3, #3
 8005f5e:	d853      	bhi.n	8006008 <ism330dhcx_xl_data_rate_set+0x1a8>
 8005f60:	a201      	add	r2, pc, #4	; (adr r2, 8005f68 <ism330dhcx_xl_data_rate_set+0x108>)
 8005f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f66:	bf00      	nop
 8005f68:	08005f79 	.word	0x08005f79
 8005f6c:	08005f8b 	.word	0x08005f8b
 8005f70:	08005fa9 	.word	0x08005fa9
 8005f74:	08005fd3 	.word	0x08005fd3
        {
          case ISM330DHCX_ODR_FSM_12Hz5:
            if (val == ISM330DHCX_XL_ODR_OFF)
 8005f78:	78fb      	ldrb	r3, [r7, #3]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d102      	bne.n	8005f84 <ism330dhcx_xl_data_rate_set+0x124>
            {
              odr_xl = ISM330DHCX_XL_ODR_12Hz5;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8005f82:	e044      	b.n	800600e <ism330dhcx_xl_data_rate_set+0x1ae>
              odr_xl = val;
 8005f84:	78fb      	ldrb	r3, [r7, #3]
 8005f86:	75fb      	strb	r3, [r7, #23]
            break;
 8005f88:	e041      	b.n	800600e <ism330dhcx_xl_data_rate_set+0x1ae>

          case ISM330DHCX_ODR_FSM_26Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 8005f8a:	78fb      	ldrb	r3, [r7, #3]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d102      	bne.n	8005f96 <ism330dhcx_xl_data_rate_set+0x136>
            {
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 8005f90:	2302      	movs	r3, #2
 8005f92:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8005f94:	e03b      	b.n	800600e <ism330dhcx_xl_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 8005f96:	78fb      	ldrb	r3, [r7, #3]
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	d102      	bne.n	8005fa2 <ism330dhcx_xl_data_rate_set+0x142>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 8005f9c:	2302      	movs	r3, #2
 8005f9e:	75fb      	strb	r3, [r7, #23]
            break;
 8005fa0:	e035      	b.n	800600e <ism330dhcx_xl_data_rate_set+0x1ae>
              odr_xl = val;
 8005fa2:	78fb      	ldrb	r3, [r7, #3]
 8005fa4:	75fb      	strb	r3, [r7, #23]
            break;
 8005fa6:	e032      	b.n	800600e <ism330dhcx_xl_data_rate_set+0x1ae>

          case ISM330DHCX_ODR_FSM_52Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 8005fa8:	78fb      	ldrb	r3, [r7, #3]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d102      	bne.n	8005fb4 <ism330dhcx_xl_data_rate_set+0x154>
            {
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8005fae:	2303      	movs	r3, #3
 8005fb0:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8005fb2:	e02c      	b.n	800600e <ism330dhcx_xl_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 8005fb4:	78fb      	ldrb	r3, [r7, #3]
 8005fb6:	2b01      	cmp	r3, #1
 8005fb8:	d102      	bne.n	8005fc0 <ism330dhcx_xl_data_rate_set+0x160>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8005fba:	2303      	movs	r3, #3
 8005fbc:	75fb      	strb	r3, [r7, #23]
            break;
 8005fbe:	e026      	b.n	800600e <ism330dhcx_xl_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_XL_ODR_26Hz)
 8005fc0:	78fb      	ldrb	r3, [r7, #3]
 8005fc2:	2b02      	cmp	r3, #2
 8005fc4:	d102      	bne.n	8005fcc <ism330dhcx_xl_data_rate_set+0x16c>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8005fc6:	2303      	movs	r3, #3
 8005fc8:	75fb      	strb	r3, [r7, #23]
            break;
 8005fca:	e020      	b.n	800600e <ism330dhcx_xl_data_rate_set+0x1ae>
              odr_xl = val;
 8005fcc:	78fb      	ldrb	r3, [r7, #3]
 8005fce:	75fb      	strb	r3, [r7, #23]
            break;
 8005fd0:	e01d      	b.n	800600e <ism330dhcx_xl_data_rate_set+0x1ae>

          case ISM330DHCX_ODR_FSM_104Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 8005fd2:	78fb      	ldrb	r3, [r7, #3]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d102      	bne.n	8005fde <ism330dhcx_xl_data_rate_set+0x17e>
            {
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8005fd8:	2304      	movs	r3, #4
 8005fda:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8005fdc:	e017      	b.n	800600e <ism330dhcx_xl_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 8005fde:	78fb      	ldrb	r3, [r7, #3]
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d102      	bne.n	8005fea <ism330dhcx_xl_data_rate_set+0x18a>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8005fe4:	2304      	movs	r3, #4
 8005fe6:	75fb      	strb	r3, [r7, #23]
            break;
 8005fe8:	e011      	b.n	800600e <ism330dhcx_xl_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_XL_ODR_26Hz)
 8005fea:	78fb      	ldrb	r3, [r7, #3]
 8005fec:	2b02      	cmp	r3, #2
 8005fee:	d102      	bne.n	8005ff6 <ism330dhcx_xl_data_rate_set+0x196>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8005ff0:	2304      	movs	r3, #4
 8005ff2:	75fb      	strb	r3, [r7, #23]
            break;
 8005ff4:	e00b      	b.n	800600e <ism330dhcx_xl_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_XL_ODR_52Hz)
 8005ff6:	78fb      	ldrb	r3, [r7, #3]
 8005ff8:	2b03      	cmp	r3, #3
 8005ffa:	d102      	bne.n	8006002 <ism330dhcx_xl_data_rate_set+0x1a2>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8005ffc:	2304      	movs	r3, #4
 8005ffe:	75fb      	strb	r3, [r7, #23]
            break;
 8006000:	e005      	b.n	800600e <ism330dhcx_xl_data_rate_set+0x1ae>
              odr_xl = val;
 8006002:	78fb      	ldrb	r3, [r7, #3]
 8006004:	75fb      	strb	r3, [r7, #23]
            break;
 8006006:	e002      	b.n	800600e <ism330dhcx_xl_data_rate_set+0x1ae>

          default:
            odr_xl = val;
 8006008:	78fb      	ldrb	r3, [r7, #3]
 800600a:	75fb      	strb	r3, [r7, #23]
            break;
 800600c:	bf00      	nop
      }
    }
  }

  /* Check the Machine Learning Core data rate constraints */
  mlc_enable = PROPERTY_DISABLE;
 800600e:	2300      	movs	r3, #0
 8006010:	72bb      	strb	r3, [r7, #10]

  if (ret == 0)
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d16c      	bne.n	80060f2 <ism330dhcx_xl_data_rate_set+0x292>
  {
    ret =  ism330dhcx_mlc_get(ctx, &mlc_enable);
 8006018:	f107 030a 	add.w	r3, r7, #10
 800601c:	4619      	mov	r1, r3
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f000 fd38 	bl	8006a94 <ism330dhcx_mlc_get>
 8006024:	6138      	str	r0, [r7, #16]

    if (mlc_enable == PROPERTY_ENABLE)
 8006026:	7abb      	ldrb	r3, [r7, #10]
 8006028:	2b01      	cmp	r3, #1
 800602a:	d162      	bne.n	80060f2 <ism330dhcx_xl_data_rate_set+0x292>
    {
      ret =  ism330dhcx_mlc_data_rate_get(ctx, &mlc_odr);
 800602c:	f107 0309 	add.w	r3, r7, #9
 8006030:	4619      	mov	r1, r3
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f000 fd58 	bl	8006ae8 <ism330dhcx_mlc_data_rate_get>
 8006038:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d158      	bne.n	80060f2 <ism330dhcx_xl_data_rate_set+0x292>
      {
        switch (mlc_odr)
 8006040:	7a7b      	ldrb	r3, [r7, #9]
 8006042:	2b03      	cmp	r3, #3
 8006044:	d852      	bhi.n	80060ec <ism330dhcx_xl_data_rate_set+0x28c>
 8006046:	a201      	add	r2, pc, #4	; (adr r2, 800604c <ism330dhcx_xl_data_rate_set+0x1ec>)
 8006048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800604c:	0800605d 	.word	0x0800605d
 8006050:	0800606f 	.word	0x0800606f
 8006054:	0800608d 	.word	0x0800608d
 8006058:	080060b7 	.word	0x080060b7
        {
          case ISM330DHCX_ODR_PRGS_12Hz5:
            if (val == ISM330DHCX_XL_ODR_OFF)
 800605c:	78fb      	ldrb	r3, [r7, #3]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d102      	bne.n	8006068 <ism330dhcx_xl_data_rate_set+0x208>
            {
              odr_xl = ISM330DHCX_XL_ODR_12Hz5;
 8006062:	2301      	movs	r3, #1
 8006064:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8006066:	e044      	b.n	80060f2 <ism330dhcx_xl_data_rate_set+0x292>
              odr_xl = val;
 8006068:	78fb      	ldrb	r3, [r7, #3]
 800606a:	75fb      	strb	r3, [r7, #23]
            break;
 800606c:	e041      	b.n	80060f2 <ism330dhcx_xl_data_rate_set+0x292>

          case ISM330DHCX_ODR_PRGS_26Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 800606e:	78fb      	ldrb	r3, [r7, #3]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d102      	bne.n	800607a <ism330dhcx_xl_data_rate_set+0x21a>
            {
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 8006074:	2302      	movs	r3, #2
 8006076:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8006078:	e03b      	b.n	80060f2 <ism330dhcx_xl_data_rate_set+0x292>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 800607a:	78fb      	ldrb	r3, [r7, #3]
 800607c:	2b01      	cmp	r3, #1
 800607e:	d102      	bne.n	8006086 <ism330dhcx_xl_data_rate_set+0x226>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 8006080:	2302      	movs	r3, #2
 8006082:	75fb      	strb	r3, [r7, #23]
            break;
 8006084:	e035      	b.n	80060f2 <ism330dhcx_xl_data_rate_set+0x292>
              odr_xl = val;
 8006086:	78fb      	ldrb	r3, [r7, #3]
 8006088:	75fb      	strb	r3, [r7, #23]
            break;
 800608a:	e032      	b.n	80060f2 <ism330dhcx_xl_data_rate_set+0x292>

          case ISM330DHCX_ODR_PRGS_52Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 800608c:	78fb      	ldrb	r3, [r7, #3]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d102      	bne.n	8006098 <ism330dhcx_xl_data_rate_set+0x238>
            {
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8006092:	2303      	movs	r3, #3
 8006094:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8006096:	e02c      	b.n	80060f2 <ism330dhcx_xl_data_rate_set+0x292>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 8006098:	78fb      	ldrb	r3, [r7, #3]
 800609a:	2b01      	cmp	r3, #1
 800609c:	d102      	bne.n	80060a4 <ism330dhcx_xl_data_rate_set+0x244>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 800609e:	2303      	movs	r3, #3
 80060a0:	75fb      	strb	r3, [r7, #23]
            break;
 80060a2:	e026      	b.n	80060f2 <ism330dhcx_xl_data_rate_set+0x292>
            else if (val == ISM330DHCX_XL_ODR_26Hz)
 80060a4:	78fb      	ldrb	r3, [r7, #3]
 80060a6:	2b02      	cmp	r3, #2
 80060a8:	d102      	bne.n	80060b0 <ism330dhcx_xl_data_rate_set+0x250>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 80060aa:	2303      	movs	r3, #3
 80060ac:	75fb      	strb	r3, [r7, #23]
            break;
 80060ae:	e020      	b.n	80060f2 <ism330dhcx_xl_data_rate_set+0x292>
              odr_xl = val;
 80060b0:	78fb      	ldrb	r3, [r7, #3]
 80060b2:	75fb      	strb	r3, [r7, #23]
            break;
 80060b4:	e01d      	b.n	80060f2 <ism330dhcx_xl_data_rate_set+0x292>

          case ISM330DHCX_ODR_PRGS_104Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 80060b6:	78fb      	ldrb	r3, [r7, #3]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d102      	bne.n	80060c2 <ism330dhcx_xl_data_rate_set+0x262>
            {
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 80060bc:	2304      	movs	r3, #4
 80060be:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 80060c0:	e017      	b.n	80060f2 <ism330dhcx_xl_data_rate_set+0x292>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 80060c2:	78fb      	ldrb	r3, [r7, #3]
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	d102      	bne.n	80060ce <ism330dhcx_xl_data_rate_set+0x26e>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 80060c8:	2304      	movs	r3, #4
 80060ca:	75fb      	strb	r3, [r7, #23]
            break;
 80060cc:	e011      	b.n	80060f2 <ism330dhcx_xl_data_rate_set+0x292>
            else if (val == ISM330DHCX_XL_ODR_26Hz)
 80060ce:	78fb      	ldrb	r3, [r7, #3]
 80060d0:	2b02      	cmp	r3, #2
 80060d2:	d102      	bne.n	80060da <ism330dhcx_xl_data_rate_set+0x27a>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 80060d4:	2304      	movs	r3, #4
 80060d6:	75fb      	strb	r3, [r7, #23]
            break;
 80060d8:	e00b      	b.n	80060f2 <ism330dhcx_xl_data_rate_set+0x292>
            else if (val == ISM330DHCX_XL_ODR_52Hz)
 80060da:	78fb      	ldrb	r3, [r7, #3]
 80060dc:	2b03      	cmp	r3, #3
 80060de:	d102      	bne.n	80060e6 <ism330dhcx_xl_data_rate_set+0x286>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 80060e0:	2304      	movs	r3, #4
 80060e2:	75fb      	strb	r3, [r7, #23]
            break;
 80060e4:	e005      	b.n	80060f2 <ism330dhcx_xl_data_rate_set+0x292>
              odr_xl = val;
 80060e6:	78fb      	ldrb	r3, [r7, #3]
 80060e8:	75fb      	strb	r3, [r7, #23]
            break;
 80060ea:	e002      	b.n	80060f2 <ism330dhcx_xl_data_rate_set+0x292>

          default:
            odr_xl = val;
 80060ec:	78fb      	ldrb	r3, [r7, #3]
 80060ee:	75fb      	strb	r3, [r7, #23]
            break;
 80060f0:	bf00      	nop
        }
      }
    }
  }

  if (ret == 0)
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d107      	bne.n	8006108 <ism330dhcx_xl_data_rate_set+0x2a8>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 80060f8:	f107 0208 	add.w	r2, r7, #8
 80060fc:	2301      	movs	r3, #1
 80060fe:	2110      	movs	r1, #16
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f7ff fe1f 	bl	8005d44 <ism330dhcx_read_reg>
 8006106:	6138      	str	r0, [r7, #16]
                              (uint8_t *)&ctrl1_xl, 1);
  }

  if (ret == 0)
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d10f      	bne.n	800612e <ism330dhcx_xl_data_rate_set+0x2ce>
  {
    ctrl1_xl.odr_xl = (uint8_t)odr_xl;
 800610e:	7dfb      	ldrb	r3, [r7, #23]
 8006110:	f003 030f 	and.w	r3, r3, #15
 8006114:	b2da      	uxtb	r2, r3
 8006116:	7a3b      	ldrb	r3, [r7, #8]
 8006118:	f362 1307 	bfi	r3, r2, #4, #4
 800611c:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL1_XL,
 800611e:	f107 0208 	add.w	r2, r7, #8
 8006122:	2301      	movs	r3, #1
 8006124:	2110      	movs	r1, #16
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f7ff fe24 	bl	8005d74 <ism330dhcx_write_reg>
 800612c:	6138      	str	r0, [r7, #16]
                               (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 800612e:	693b      	ldr	r3, [r7, #16]
}
 8006130:	4618      	mov	r0, r3
 8006132:	3718      	adds	r7, #24
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}

08006138 <ism330dhcx_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_data_rate_get(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_xl_t *val)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b084      	sub	sp, #16
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
 8006140:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 8006142:	f107 0208 	add.w	r2, r7, #8
 8006146:	2301      	movs	r3, #1
 8006148:	2110      	movs	r1, #16
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f7ff fdfa 	bl	8005d44 <ism330dhcx_read_reg>
 8006150:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);

  switch (ctrl1_xl.odr_xl)
 8006152:	7a3b      	ldrb	r3, [r7, #8]
 8006154:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8006158:	b2db      	uxtb	r3, r3
 800615a:	2b0b      	cmp	r3, #11
 800615c:	d84a      	bhi.n	80061f4 <ism330dhcx_xl_data_rate_get+0xbc>
 800615e:	a201      	add	r2, pc, #4	; (adr r2, 8006164 <ism330dhcx_xl_data_rate_get+0x2c>)
 8006160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006164:	08006195 	.word	0x08006195
 8006168:	0800619d 	.word	0x0800619d
 800616c:	080061a5 	.word	0x080061a5
 8006170:	080061ad 	.word	0x080061ad
 8006174:	080061b5 	.word	0x080061b5
 8006178:	080061bd 	.word	0x080061bd
 800617c:	080061c5 	.word	0x080061c5
 8006180:	080061cd 	.word	0x080061cd
 8006184:	080061d5 	.word	0x080061d5
 8006188:	080061dd 	.word	0x080061dd
 800618c:	080061e5 	.word	0x080061e5
 8006190:	080061ed 	.word	0x080061ed
  {
    case ISM330DHCX_XL_ODR_OFF:
      *val = ISM330DHCX_XL_ODR_OFF;
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	2200      	movs	r2, #0
 8006198:	701a      	strb	r2, [r3, #0]
      break;
 800619a:	e02f      	b.n	80061fc <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_12Hz5:
      *val = ISM330DHCX_XL_ODR_12Hz5;
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	2201      	movs	r2, #1
 80061a0:	701a      	strb	r2, [r3, #0]
      break;
 80061a2:	e02b      	b.n	80061fc <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_26Hz:
      *val = ISM330DHCX_XL_ODR_26Hz;
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	2202      	movs	r2, #2
 80061a8:	701a      	strb	r2, [r3, #0]
      break;
 80061aa:	e027      	b.n	80061fc <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_52Hz:
      *val = ISM330DHCX_XL_ODR_52Hz;
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	2203      	movs	r2, #3
 80061b0:	701a      	strb	r2, [r3, #0]
      break;
 80061b2:	e023      	b.n	80061fc <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_104Hz:
      *val = ISM330DHCX_XL_ODR_104Hz;
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	2204      	movs	r2, #4
 80061b8:	701a      	strb	r2, [r3, #0]
      break;
 80061ba:	e01f      	b.n	80061fc <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_208Hz:
      *val = ISM330DHCX_XL_ODR_208Hz;
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	2205      	movs	r2, #5
 80061c0:	701a      	strb	r2, [r3, #0]
      break;
 80061c2:	e01b      	b.n	80061fc <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_416Hz:
      *val = ISM330DHCX_XL_ODR_416Hz;
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	2206      	movs	r2, #6
 80061c8:	701a      	strb	r2, [r3, #0]
      break;
 80061ca:	e017      	b.n	80061fc <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_833Hz:
      *val = ISM330DHCX_XL_ODR_833Hz;
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	2207      	movs	r2, #7
 80061d0:	701a      	strb	r2, [r3, #0]
      break;
 80061d2:	e013      	b.n	80061fc <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_1666Hz:
      *val = ISM330DHCX_XL_ODR_1666Hz;
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	2208      	movs	r2, #8
 80061d8:	701a      	strb	r2, [r3, #0]
      break;
 80061da:	e00f      	b.n	80061fc <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_3332Hz:
      *val = ISM330DHCX_XL_ODR_3332Hz;
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	2209      	movs	r2, #9
 80061e0:	701a      	strb	r2, [r3, #0]
      break;
 80061e2:	e00b      	b.n	80061fc <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_6667Hz:
      *val = ISM330DHCX_XL_ODR_6667Hz;
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	220a      	movs	r2, #10
 80061e8:	701a      	strb	r2, [r3, #0]
      break;
 80061ea:	e007      	b.n	80061fc <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_1Hz6:
      *val = ISM330DHCX_XL_ODR_1Hz6;
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	220b      	movs	r2, #11
 80061f0:	701a      	strb	r2, [r3, #0]
      break;
 80061f2:	e003      	b.n	80061fc <ism330dhcx_xl_data_rate_get+0xc4>

    default:
      *val = ISM330DHCX_XL_ODR_OFF;
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	2200      	movs	r2, #0
 80061f8:	701a      	strb	r2, [r3, #0]
      break;
 80061fa:	bf00      	nop
  }

  return ret;
 80061fc:	68fb      	ldr	r3, [r7, #12]
}
 80061fe:	4618      	mov	r0, r3
 8006200:	3710      	adds	r7, #16
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}
 8006206:	bf00      	nop

08006208 <ism330dhcx_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_full_scale_set(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_g_t val)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b084      	sub	sp, #16
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	460b      	mov	r3, r1
 8006212:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 8006214:	f107 0208 	add.w	r2, r7, #8
 8006218:	2301      	movs	r3, #1
 800621a:	2111      	movs	r1, #17
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f7ff fd91 	bl	8005d44 <ism330dhcx_read_reg>
 8006222:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl2_g, 1);

  if (ret == 0)
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d10f      	bne.n	800624a <ism330dhcx_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t)val;
 800622a:	78fb      	ldrb	r3, [r7, #3]
 800622c:	f003 030f 	and.w	r3, r3, #15
 8006230:	b2da      	uxtb	r2, r3
 8006232:	7a3b      	ldrb	r3, [r7, #8]
 8006234:	f362 0303 	bfi	r3, r2, #0, #4
 8006238:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL2_G,
 800623a:	f107 0208 	add.w	r2, r7, #8
 800623e:	2301      	movs	r3, #1
 8006240:	2111      	movs	r1, #17
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f7ff fd96 	bl	8005d74 <ism330dhcx_write_reg>
 8006248:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl2_g, 1);
  }

  return ret;
 800624a:	68fb      	ldr	r3, [r7, #12]
}
 800624c:	4618      	mov	r0, r3
 800624e:	3710      	adds	r7, #16
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}

08006254 <ism330dhcx_gy_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_full_scale_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_g_t *val)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b084      	sub	sp, #16
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 800625e:	f107 0208 	add.w	r2, r7, #8
 8006262:	2301      	movs	r3, #1
 8006264:	2111      	movs	r1, #17
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f7ff fd6c 	bl	8005d44 <ism330dhcx_read_reg>
 800626c:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl2_g, 1);

  switch (ctrl2_g.fs_g)
 800626e:	7a3b      	ldrb	r3, [r7, #8]
 8006270:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8006274:	b2db      	uxtb	r3, r3
 8006276:	2b0c      	cmp	r3, #12
 8006278:	d834      	bhi.n	80062e4 <ism330dhcx_gy_full_scale_get+0x90>
 800627a:	a201      	add	r2, pc, #4	; (adr r2, 8006280 <ism330dhcx_gy_full_scale_get+0x2c>)
 800627c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006280:	080062bd 	.word	0x080062bd
 8006284:	080062dd 	.word	0x080062dd
 8006288:	080062b5 	.word	0x080062b5
 800628c:	080062e5 	.word	0x080062e5
 8006290:	080062c5 	.word	0x080062c5
 8006294:	080062e5 	.word	0x080062e5
 8006298:	080062e5 	.word	0x080062e5
 800629c:	080062e5 	.word	0x080062e5
 80062a0:	080062cd 	.word	0x080062cd
 80062a4:	080062e5 	.word	0x080062e5
 80062a8:	080062e5 	.word	0x080062e5
 80062ac:	080062e5 	.word	0x080062e5
 80062b0:	080062d5 	.word	0x080062d5
  {
    case ISM330DHCX_125dps:
      *val = ISM330DHCX_125dps;
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	2202      	movs	r2, #2
 80062b8:	701a      	strb	r2, [r3, #0]
      break;
 80062ba:	e017      	b.n	80062ec <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_250dps:
      *val = ISM330DHCX_250dps;
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	2200      	movs	r2, #0
 80062c0:	701a      	strb	r2, [r3, #0]
      break;
 80062c2:	e013      	b.n	80062ec <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_500dps:
      *val = ISM330DHCX_500dps;
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	2204      	movs	r2, #4
 80062c8:	701a      	strb	r2, [r3, #0]
      break;
 80062ca:	e00f      	b.n	80062ec <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_1000dps:
      *val = ISM330DHCX_1000dps;
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	2208      	movs	r2, #8
 80062d0:	701a      	strb	r2, [r3, #0]
      break;
 80062d2:	e00b      	b.n	80062ec <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_2000dps:
      *val = ISM330DHCX_2000dps;
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	220c      	movs	r2, #12
 80062d8:	701a      	strb	r2, [r3, #0]
      break;
 80062da:	e007      	b.n	80062ec <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_4000dps:
      *val = ISM330DHCX_4000dps;
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	2201      	movs	r2, #1
 80062e0:	701a      	strb	r2, [r3, #0]
      break;
 80062e2:	e003      	b.n	80062ec <ism330dhcx_gy_full_scale_get+0x98>

    default:
      *val = ISM330DHCX_125dps;
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	2202      	movs	r2, #2
 80062e8:	701a      	strb	r2, [r3, #0]
      break;
 80062ea:	bf00      	nop
  }

  return ret;
 80062ec:	68fb      	ldr	r3, [r7, #12]
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3710      	adds	r7, #16
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}
 80062f6:	bf00      	nop

080062f8 <ism330dhcx_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_data_rate_set(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_g_t val)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b086      	sub	sp, #24
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
 8006300:	460b      	mov	r3, r1
 8006302:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_odr_g_t odr_gy =  val;
 8006304:	78fb      	ldrb	r3, [r7, #3]
 8006306:	75fb      	strb	r3, [r7, #23]
  uint8_t mlc_enable;
  ism330dhcx_mlc_odr_t mlc_odr;
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  /* Check the Finite State Machine data rate constraints */
  ret =  ism330dhcx_fsm_enable_get(ctx, &fsm_enable);
 8006308:	f107 030c 	add.w	r3, r7, #12
 800630c:	4619      	mov	r1, r3
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f000 fb4b 	bl	80069aa <ism330dhcx_fsm_enable_get>
 8006314:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	2b00      	cmp	r3, #0
 800631a:	f040 80c4 	bne.w	80064a6 <ism330dhcx_gy_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800631e:	7b3b      	ldrb	r3, [r7, #12]
 8006320:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006324:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8006326:	7b3b      	ldrb	r3, [r7, #12]
 8006328:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800632c:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800632e:	4313      	orrs	r3, r2
 8006330:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8006332:	7b3b      	ldrb	r3, [r7, #12]
 8006334:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006338:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 800633a:	4313      	orrs	r3, r2
 800633c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 800633e:	7b3b      	ldrb	r3, [r7, #12]
 8006340:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006344:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8006346:	4313      	orrs	r3, r2
 8006348:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 800634a:	7b3b      	ldrb	r3, [r7, #12]
 800634c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006350:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8006352:	4313      	orrs	r3, r2
 8006354:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8006356:	7b3b      	ldrb	r3, [r7, #12]
 8006358:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800635c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 800635e:	4313      	orrs	r3, r2
 8006360:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8006362:	7b3b      	ldrb	r3, [r7, #12]
 8006364:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006368:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 800636a:	4313      	orrs	r3, r2
 800636c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 800636e:	7b3b      	ldrb	r3, [r7, #12]
 8006370:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006374:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8006376:	4313      	orrs	r3, r2
 8006378:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800637a:	7b7b      	ldrb	r3, [r7, #13]
 800637c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006380:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8006382:	4313      	orrs	r3, r2
 8006384:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8006386:	7b7b      	ldrb	r3, [r7, #13]
 8006388:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800638c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800638e:	4313      	orrs	r3, r2
 8006390:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8006392:	7b7b      	ldrb	r3, [r7, #13]
 8006394:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006398:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800639a:	4313      	orrs	r3, r2
 800639c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800639e:	7b7b      	ldrb	r3, [r7, #13]
 80063a0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80063a4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 80063a6:	4313      	orrs	r3, r2
 80063a8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 80063aa:	7b7b      	ldrb	r3, [r7, #13]
 80063ac:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80063b0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 80063b2:	4313      	orrs	r3, r2
 80063b4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 80063b6:	7b7b      	ldrb	r3, [r7, #13]
 80063b8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80063bc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 80063be:	4313      	orrs	r3, r2
 80063c0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80063c2:	7b7b      	ldrb	r3, [r7, #13]
 80063c4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80063c8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 80063ca:	4313      	orrs	r3, r2
 80063cc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 80063ce:	7b7b      	ldrb	r3, [r7, #13]
 80063d0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80063d4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80063d6:	4313      	orrs	r3, r2
 80063d8:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80063da:	2b01      	cmp	r3, #1
 80063dc:	d163      	bne.n	80064a6 <ism330dhcx_gy_data_rate_set+0x1ae>
    {
      ret =  ism330dhcx_fsm_data_rate_get(ctx, &fsm_odr);
 80063de:	f107 030b 	add.w	r3, r7, #11
 80063e2:	4619      	mov	r1, r3
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f000 fb0d 	bl	8006a04 <ism330dhcx_fsm_data_rate_get>
 80063ea:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d159      	bne.n	80064a6 <ism330dhcx_gy_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 80063f2:	7afb      	ldrb	r3, [r7, #11]
 80063f4:	2b03      	cmp	r3, #3
 80063f6:	d853      	bhi.n	80064a0 <ism330dhcx_gy_data_rate_set+0x1a8>
 80063f8:	a201      	add	r2, pc, #4	; (adr r2, 8006400 <ism330dhcx_gy_data_rate_set+0x108>)
 80063fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063fe:	bf00      	nop
 8006400:	08006411 	.word	0x08006411
 8006404:	08006423 	.word	0x08006423
 8006408:	08006441 	.word	0x08006441
 800640c:	0800646b 	.word	0x0800646b
        {
          case ISM330DHCX_ODR_FSM_12Hz5:
            if (val == ISM330DHCX_GY_ODR_OFF)
 8006410:	78fb      	ldrb	r3, [r7, #3]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d102      	bne.n	800641c <ism330dhcx_gy_data_rate_set+0x124>
            {
              odr_gy = ISM330DHCX_GY_ODR_12Hz5;
 8006416:	2301      	movs	r3, #1
 8006418:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 800641a:	e044      	b.n	80064a6 <ism330dhcx_gy_data_rate_set+0x1ae>
              odr_gy = val;
 800641c:	78fb      	ldrb	r3, [r7, #3]
 800641e:	75fb      	strb	r3, [r7, #23]
            break;
 8006420:	e041      	b.n	80064a6 <ism330dhcx_gy_data_rate_set+0x1ae>

          case ISM330DHCX_ODR_FSM_26Hz:
            if (val == ISM330DHCX_GY_ODR_OFF)
 8006422:	78fb      	ldrb	r3, [r7, #3]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d102      	bne.n	800642e <ism330dhcx_gy_data_rate_set+0x136>
            {
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 8006428:	2302      	movs	r3, #2
 800642a:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 800642c:	e03b      	b.n	80064a6 <ism330dhcx_gy_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 800642e:	78fb      	ldrb	r3, [r7, #3]
 8006430:	2b01      	cmp	r3, #1
 8006432:	d102      	bne.n	800643a <ism330dhcx_gy_data_rate_set+0x142>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 8006434:	2302      	movs	r3, #2
 8006436:	75fb      	strb	r3, [r7, #23]
            break;
 8006438:	e035      	b.n	80064a6 <ism330dhcx_gy_data_rate_set+0x1ae>
              odr_gy = val;
 800643a:	78fb      	ldrb	r3, [r7, #3]
 800643c:	75fb      	strb	r3, [r7, #23]
            break;
 800643e:	e032      	b.n	80064a6 <ism330dhcx_gy_data_rate_set+0x1ae>

          case ISM330DHCX_ODR_FSM_52Hz:
            if (val == ISM330DHCX_GY_ODR_OFF)
 8006440:	78fb      	ldrb	r3, [r7, #3]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d102      	bne.n	800644c <ism330dhcx_gy_data_rate_set+0x154>
            {
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8006446:	2303      	movs	r3, #3
 8006448:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 800644a:	e02c      	b.n	80064a6 <ism330dhcx_gy_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 800644c:	78fb      	ldrb	r3, [r7, #3]
 800644e:	2b01      	cmp	r3, #1
 8006450:	d102      	bne.n	8006458 <ism330dhcx_gy_data_rate_set+0x160>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8006452:	2303      	movs	r3, #3
 8006454:	75fb      	strb	r3, [r7, #23]
            break;
 8006456:	e026      	b.n	80064a6 <ism330dhcx_gy_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_GY_ODR_26Hz)
 8006458:	78fb      	ldrb	r3, [r7, #3]
 800645a:	2b02      	cmp	r3, #2
 800645c:	d102      	bne.n	8006464 <ism330dhcx_gy_data_rate_set+0x16c>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 800645e:	2303      	movs	r3, #3
 8006460:	75fb      	strb	r3, [r7, #23]
            break;
 8006462:	e020      	b.n	80064a6 <ism330dhcx_gy_data_rate_set+0x1ae>
              odr_gy = val;
 8006464:	78fb      	ldrb	r3, [r7, #3]
 8006466:	75fb      	strb	r3, [r7, #23]
            break;
 8006468:	e01d      	b.n	80064a6 <ism330dhcx_gy_data_rate_set+0x1ae>

          case ISM330DHCX_ODR_FSM_104Hz:
            if (val == ISM330DHCX_GY_ODR_OFF)
 800646a:	78fb      	ldrb	r3, [r7, #3]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d102      	bne.n	8006476 <ism330dhcx_gy_data_rate_set+0x17e>
            {
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8006470:	2304      	movs	r3, #4
 8006472:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8006474:	e017      	b.n	80064a6 <ism330dhcx_gy_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 8006476:	78fb      	ldrb	r3, [r7, #3]
 8006478:	2b01      	cmp	r3, #1
 800647a:	d102      	bne.n	8006482 <ism330dhcx_gy_data_rate_set+0x18a>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 800647c:	2304      	movs	r3, #4
 800647e:	75fb      	strb	r3, [r7, #23]
            break;
 8006480:	e011      	b.n	80064a6 <ism330dhcx_gy_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_GY_ODR_26Hz)
 8006482:	78fb      	ldrb	r3, [r7, #3]
 8006484:	2b02      	cmp	r3, #2
 8006486:	d102      	bne.n	800648e <ism330dhcx_gy_data_rate_set+0x196>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8006488:	2304      	movs	r3, #4
 800648a:	75fb      	strb	r3, [r7, #23]
            break;
 800648c:	e00b      	b.n	80064a6 <ism330dhcx_gy_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_GY_ODR_52Hz)
 800648e:	78fb      	ldrb	r3, [r7, #3]
 8006490:	2b03      	cmp	r3, #3
 8006492:	d102      	bne.n	800649a <ism330dhcx_gy_data_rate_set+0x1a2>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8006494:	2304      	movs	r3, #4
 8006496:	75fb      	strb	r3, [r7, #23]
            break;
 8006498:	e005      	b.n	80064a6 <ism330dhcx_gy_data_rate_set+0x1ae>
              odr_gy = val;
 800649a:	78fb      	ldrb	r3, [r7, #3]
 800649c:	75fb      	strb	r3, [r7, #23]
            break;
 800649e:	e002      	b.n	80064a6 <ism330dhcx_gy_data_rate_set+0x1ae>

          default:
            odr_gy = val;
 80064a0:	78fb      	ldrb	r3, [r7, #3]
 80064a2:	75fb      	strb	r3, [r7, #23]
            break;
 80064a4:	bf00      	nop
      }
    }
  }

  /* Check the Machine Learning Core data rate constraints */
  mlc_enable = PROPERTY_DISABLE;
 80064a6:	2300      	movs	r3, #0
 80064a8:	72bb      	strb	r3, [r7, #10]

  if (ret == 0)
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d16c      	bne.n	800658a <ism330dhcx_gy_data_rate_set+0x292>
  {
    ret =  ism330dhcx_mlc_get(ctx, &mlc_enable);
 80064b0:	f107 030a 	add.w	r3, r7, #10
 80064b4:	4619      	mov	r1, r3
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f000 faec 	bl	8006a94 <ism330dhcx_mlc_get>
 80064bc:	6138      	str	r0, [r7, #16]

    if (mlc_enable == PROPERTY_ENABLE)
 80064be:	7abb      	ldrb	r3, [r7, #10]
 80064c0:	2b01      	cmp	r3, #1
 80064c2:	d162      	bne.n	800658a <ism330dhcx_gy_data_rate_set+0x292>
    {
      ret =  ism330dhcx_mlc_data_rate_get(ctx, &mlc_odr);
 80064c4:	f107 0309 	add.w	r3, r7, #9
 80064c8:	4619      	mov	r1, r3
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f000 fb0c 	bl	8006ae8 <ism330dhcx_mlc_data_rate_get>
 80064d0:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d158      	bne.n	800658a <ism330dhcx_gy_data_rate_set+0x292>
      {
        switch (mlc_odr)
 80064d8:	7a7b      	ldrb	r3, [r7, #9]
 80064da:	2b03      	cmp	r3, #3
 80064dc:	d852      	bhi.n	8006584 <ism330dhcx_gy_data_rate_set+0x28c>
 80064de:	a201      	add	r2, pc, #4	; (adr r2, 80064e4 <ism330dhcx_gy_data_rate_set+0x1ec>)
 80064e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064e4:	080064f5 	.word	0x080064f5
 80064e8:	08006507 	.word	0x08006507
 80064ec:	08006525 	.word	0x08006525
 80064f0:	0800654f 	.word	0x0800654f
        {
          case ISM330DHCX_ODR_PRGS_12Hz5:
            if (val == ISM330DHCX_GY_ODR_OFF)
 80064f4:	78fb      	ldrb	r3, [r7, #3]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d102      	bne.n	8006500 <ism330dhcx_gy_data_rate_set+0x208>
            {
              odr_gy = ISM330DHCX_GY_ODR_12Hz5;
 80064fa:	2301      	movs	r3, #1
 80064fc:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 80064fe:	e044      	b.n	800658a <ism330dhcx_gy_data_rate_set+0x292>
              odr_gy = val;
 8006500:	78fb      	ldrb	r3, [r7, #3]
 8006502:	75fb      	strb	r3, [r7, #23]
            break;
 8006504:	e041      	b.n	800658a <ism330dhcx_gy_data_rate_set+0x292>

          case ISM330DHCX_ODR_PRGS_26Hz:
            if (val == ISM330DHCX_GY_ODR_OFF)
 8006506:	78fb      	ldrb	r3, [r7, #3]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d102      	bne.n	8006512 <ism330dhcx_gy_data_rate_set+0x21a>
            {
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 800650c:	2302      	movs	r3, #2
 800650e:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8006510:	e03b      	b.n	800658a <ism330dhcx_gy_data_rate_set+0x292>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 8006512:	78fb      	ldrb	r3, [r7, #3]
 8006514:	2b01      	cmp	r3, #1
 8006516:	d102      	bne.n	800651e <ism330dhcx_gy_data_rate_set+0x226>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 8006518:	2302      	movs	r3, #2
 800651a:	75fb      	strb	r3, [r7, #23]
            break;
 800651c:	e035      	b.n	800658a <ism330dhcx_gy_data_rate_set+0x292>
              odr_gy = val;
 800651e:	78fb      	ldrb	r3, [r7, #3]
 8006520:	75fb      	strb	r3, [r7, #23]
            break;
 8006522:	e032      	b.n	800658a <ism330dhcx_gy_data_rate_set+0x292>

          case ISM330DHCX_ODR_PRGS_52Hz:
            if (val == ISM330DHCX_GY_ODR_OFF)
 8006524:	78fb      	ldrb	r3, [r7, #3]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d102      	bne.n	8006530 <ism330dhcx_gy_data_rate_set+0x238>
            {
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 800652a:	2303      	movs	r3, #3
 800652c:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 800652e:	e02c      	b.n	800658a <ism330dhcx_gy_data_rate_set+0x292>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 8006530:	78fb      	ldrb	r3, [r7, #3]
 8006532:	2b01      	cmp	r3, #1
 8006534:	d102      	bne.n	800653c <ism330dhcx_gy_data_rate_set+0x244>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8006536:	2303      	movs	r3, #3
 8006538:	75fb      	strb	r3, [r7, #23]
            break;
 800653a:	e026      	b.n	800658a <ism330dhcx_gy_data_rate_set+0x292>
            else if (val == ISM330DHCX_GY_ODR_26Hz)
 800653c:	78fb      	ldrb	r3, [r7, #3]
 800653e:	2b02      	cmp	r3, #2
 8006540:	d102      	bne.n	8006548 <ism330dhcx_gy_data_rate_set+0x250>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8006542:	2303      	movs	r3, #3
 8006544:	75fb      	strb	r3, [r7, #23]
            break;
 8006546:	e020      	b.n	800658a <ism330dhcx_gy_data_rate_set+0x292>
              odr_gy = val;
 8006548:	78fb      	ldrb	r3, [r7, #3]
 800654a:	75fb      	strb	r3, [r7, #23]
            break;
 800654c:	e01d      	b.n	800658a <ism330dhcx_gy_data_rate_set+0x292>

          case ISM330DHCX_ODR_PRGS_104Hz:
            if (val == ISM330DHCX_GY_ODR_OFF)
 800654e:	78fb      	ldrb	r3, [r7, #3]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d102      	bne.n	800655a <ism330dhcx_gy_data_rate_set+0x262>
            {
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8006554:	2304      	movs	r3, #4
 8006556:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8006558:	e017      	b.n	800658a <ism330dhcx_gy_data_rate_set+0x292>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 800655a:	78fb      	ldrb	r3, [r7, #3]
 800655c:	2b01      	cmp	r3, #1
 800655e:	d102      	bne.n	8006566 <ism330dhcx_gy_data_rate_set+0x26e>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8006560:	2304      	movs	r3, #4
 8006562:	75fb      	strb	r3, [r7, #23]
            break;
 8006564:	e011      	b.n	800658a <ism330dhcx_gy_data_rate_set+0x292>
            else if (val == ISM330DHCX_GY_ODR_26Hz)
 8006566:	78fb      	ldrb	r3, [r7, #3]
 8006568:	2b02      	cmp	r3, #2
 800656a:	d102      	bne.n	8006572 <ism330dhcx_gy_data_rate_set+0x27a>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 800656c:	2304      	movs	r3, #4
 800656e:	75fb      	strb	r3, [r7, #23]
            break;
 8006570:	e00b      	b.n	800658a <ism330dhcx_gy_data_rate_set+0x292>
            else if (val == ISM330DHCX_GY_ODR_52Hz)
 8006572:	78fb      	ldrb	r3, [r7, #3]
 8006574:	2b03      	cmp	r3, #3
 8006576:	d102      	bne.n	800657e <ism330dhcx_gy_data_rate_set+0x286>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8006578:	2304      	movs	r3, #4
 800657a:	75fb      	strb	r3, [r7, #23]
            break;
 800657c:	e005      	b.n	800658a <ism330dhcx_gy_data_rate_set+0x292>
              odr_gy = val;
 800657e:	78fb      	ldrb	r3, [r7, #3]
 8006580:	75fb      	strb	r3, [r7, #23]
            break;
 8006582:	e002      	b.n	800658a <ism330dhcx_gy_data_rate_set+0x292>

          default:
            odr_gy = val;
 8006584:	78fb      	ldrb	r3, [r7, #3]
 8006586:	75fb      	strb	r3, [r7, #23]
            break;
 8006588:	bf00      	nop
        }
      }
    }
  }

  if (ret == 0)
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d107      	bne.n	80065a0 <ism330dhcx_gy_data_rate_set+0x2a8>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 8006590:	f107 0208 	add.w	r2, r7, #8
 8006594:	2301      	movs	r3, #1
 8006596:	2111      	movs	r1, #17
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f7ff fbd3 	bl	8005d44 <ism330dhcx_read_reg>
 800659e:	6138      	str	r0, [r7, #16]
                              (uint8_t *)&ctrl2_g, 1);
  }

  if (ret == 0)
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d10f      	bne.n	80065c6 <ism330dhcx_gy_data_rate_set+0x2ce>
  {
    ctrl2_g.odr_g = (uint8_t)odr_gy;
 80065a6:	7dfb      	ldrb	r3, [r7, #23]
 80065a8:	f003 030f 	and.w	r3, r3, #15
 80065ac:	b2da      	uxtb	r2, r3
 80065ae:	7a3b      	ldrb	r3, [r7, #8]
 80065b0:	f362 1307 	bfi	r3, r2, #4, #4
 80065b4:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL2_G,
 80065b6:	f107 0208 	add.w	r2, r7, #8
 80065ba:	2301      	movs	r3, #1
 80065bc:	2111      	movs	r1, #17
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f7ff fbd8 	bl	8005d74 <ism330dhcx_write_reg>
 80065c4:	6138      	str	r0, [r7, #16]
                               (uint8_t *)&ctrl2_g, 1);
  }

  return ret;
 80065c6:	693b      	ldr	r3, [r7, #16]
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	3718      	adds	r7, #24
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}

080065d0 <ism330dhcx_gy_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_data_rate_get(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_g_t *val)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b084      	sub	sp, #16
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
 80065d8:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 80065da:	f107 0208 	add.w	r2, r7, #8
 80065de:	2301      	movs	r3, #1
 80065e0:	2111      	movs	r1, #17
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f7ff fbae 	bl	8005d44 <ism330dhcx_read_reg>
 80065e8:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl2_g, 1);

  switch (ctrl2_g.odr_g)
 80065ea:	7a3b      	ldrb	r3, [r7, #8]
 80065ec:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80065f0:	b2db      	uxtb	r3, r3
 80065f2:	2b0a      	cmp	r3, #10
 80065f4:	d844      	bhi.n	8006680 <ism330dhcx_gy_data_rate_get+0xb0>
 80065f6:	a201      	add	r2, pc, #4	; (adr r2, 80065fc <ism330dhcx_gy_data_rate_get+0x2c>)
 80065f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065fc:	08006629 	.word	0x08006629
 8006600:	08006631 	.word	0x08006631
 8006604:	08006639 	.word	0x08006639
 8006608:	08006641 	.word	0x08006641
 800660c:	08006649 	.word	0x08006649
 8006610:	08006651 	.word	0x08006651
 8006614:	08006659 	.word	0x08006659
 8006618:	08006661 	.word	0x08006661
 800661c:	08006669 	.word	0x08006669
 8006620:	08006671 	.word	0x08006671
 8006624:	08006679 	.word	0x08006679
  {
    case ISM330DHCX_GY_ODR_OFF:
      *val = ISM330DHCX_GY_ODR_OFF;
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	2200      	movs	r2, #0
 800662c:	701a      	strb	r2, [r3, #0]
      break;
 800662e:	e02b      	b.n	8006688 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_12Hz5:
      *val = ISM330DHCX_GY_ODR_12Hz5;
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	2201      	movs	r2, #1
 8006634:	701a      	strb	r2, [r3, #0]
      break;
 8006636:	e027      	b.n	8006688 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_26Hz:
      *val = ISM330DHCX_GY_ODR_26Hz;
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	2202      	movs	r2, #2
 800663c:	701a      	strb	r2, [r3, #0]
      break;
 800663e:	e023      	b.n	8006688 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_52Hz:
      *val = ISM330DHCX_GY_ODR_52Hz;
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	2203      	movs	r2, #3
 8006644:	701a      	strb	r2, [r3, #0]
      break;
 8006646:	e01f      	b.n	8006688 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_104Hz:
      *val = ISM330DHCX_GY_ODR_104Hz;
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	2204      	movs	r2, #4
 800664c:	701a      	strb	r2, [r3, #0]
      break;
 800664e:	e01b      	b.n	8006688 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_208Hz:
      *val = ISM330DHCX_GY_ODR_208Hz;
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	2205      	movs	r2, #5
 8006654:	701a      	strb	r2, [r3, #0]
      break;
 8006656:	e017      	b.n	8006688 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_416Hz:
      *val = ISM330DHCX_GY_ODR_416Hz;
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	2206      	movs	r2, #6
 800665c:	701a      	strb	r2, [r3, #0]
      break;
 800665e:	e013      	b.n	8006688 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_833Hz:
      *val = ISM330DHCX_GY_ODR_833Hz;
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	2207      	movs	r2, #7
 8006664:	701a      	strb	r2, [r3, #0]
      break;
 8006666:	e00f      	b.n	8006688 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_1666Hz:
      *val = ISM330DHCX_GY_ODR_1666Hz;
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	2208      	movs	r2, #8
 800666c:	701a      	strb	r2, [r3, #0]
      break;
 800666e:	e00b      	b.n	8006688 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_3332Hz:
      *val = ISM330DHCX_GY_ODR_3332Hz;
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	2209      	movs	r2, #9
 8006674:	701a      	strb	r2, [r3, #0]
      break;
 8006676:	e007      	b.n	8006688 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_6667Hz:
      *val = ISM330DHCX_GY_ODR_6667Hz;
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	220a      	movs	r2, #10
 800667c:	701a      	strb	r2, [r3, #0]
      break;
 800667e:	e003      	b.n	8006688 <ism330dhcx_gy_data_rate_get+0xb8>

    default:
      *val = ISM330DHCX_GY_ODR_OFF;
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	2200      	movs	r2, #0
 8006684:	701a      	strb	r2, [r3, #0]
      break;
 8006686:	bf00      	nop
  }

  return ret;
 8006688:	68fb      	ldr	r3, [r7, #12]
}
 800668a:	4618      	mov	r0, r3
 800668c:	3710      	adds	r7, #16
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}
 8006692:	bf00      	nop

08006694 <ism330dhcx_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_block_data_update_set(stmdev_ctx_t *ctx,
                                         uint8_t val)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b084      	sub	sp, #16
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
 800669c:	460b      	mov	r3, r1
 800669e:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
 80066a0:	f107 0208 	add.w	r2, r7, #8
 80066a4:	2301      	movs	r3, #1
 80066a6:	2112      	movs	r1, #18
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f7ff fb4b 	bl	8005d44 <ism330dhcx_read_reg>
 80066ae:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl3_c, 1);

  if (ret == 0)
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d10f      	bne.n	80066d6 <ism330dhcx_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = (uint8_t)val;
 80066b6:	78fb      	ldrb	r3, [r7, #3]
 80066b8:	f003 0301 	and.w	r3, r3, #1
 80066bc:	b2da      	uxtb	r2, r3
 80066be:	7a3b      	ldrb	r3, [r7, #8]
 80066c0:	f362 1386 	bfi	r3, r2, #6, #1
 80066c4:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
 80066c6:	f107 0208 	add.w	r2, r7, #8
 80066ca:	2301      	movs	r3, #1
 80066cc:	2112      	movs	r1, #18
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f7ff fb50 	bl	8005d74 <ism330dhcx_write_reg>
 80066d4:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
 80066d6:	68fb      	ldr	r3, [r7, #12]
}
 80066d8:	4618      	mov	r0, r3
 80066da:	3710      	adds	r7, #16
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}

080066e0 <ism330dhcx_angular_rate_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_angular_rate_raw_get(stmdev_ctx_t *ctx,
                                        int16_t *val)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b086      	sub	sp, #24
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
 80066e8:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_OUTX_L_G, buff, 6);
 80066ea:	f107 020c 	add.w	r2, r7, #12
 80066ee:	2306      	movs	r3, #6
 80066f0:	2122      	movs	r1, #34	; 0x22
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f7ff fb26 	bl	8005d44 <ism330dhcx_read_reg>
 80066f8:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80066fa:	7b7b      	ldrb	r3, [r7, #13]
 80066fc:	b21a      	sxth	r2, r3
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006708:	b29b      	uxth	r3, r3
 800670a:	021b      	lsls	r3, r3, #8
 800670c:	b29a      	uxth	r2, r3
 800670e:	7b3b      	ldrb	r3, [r7, #12]
 8006710:	b29b      	uxth	r3, r3
 8006712:	4413      	add	r3, r2
 8006714:	b29b      	uxth	r3, r3
 8006716:	b21a      	sxth	r2, r3
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800671c:	7bfa      	ldrb	r2, [r7, #15]
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	3302      	adds	r3, #2
 8006722:	b212      	sxth	r2, r2
 8006724:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	3302      	adds	r3, #2
 800672a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800672e:	b29b      	uxth	r3, r3
 8006730:	021b      	lsls	r3, r3, #8
 8006732:	b29a      	uxth	r2, r3
 8006734:	7bbb      	ldrb	r3, [r7, #14]
 8006736:	b29b      	uxth	r3, r3
 8006738:	4413      	add	r3, r2
 800673a:	b29a      	uxth	r2, r3
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	3302      	adds	r3, #2
 8006740:	b212      	sxth	r2, r2
 8006742:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8006744:	7c7a      	ldrb	r2, [r7, #17]
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	3304      	adds	r3, #4
 800674a:	b212      	sxth	r2, r2
 800674c:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	3304      	adds	r3, #4
 8006752:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006756:	b29b      	uxth	r3, r3
 8006758:	021b      	lsls	r3, r3, #8
 800675a:	b29a      	uxth	r2, r3
 800675c:	7c3b      	ldrb	r3, [r7, #16]
 800675e:	b29b      	uxth	r3, r3
 8006760:	4413      	add	r3, r2
 8006762:	b29a      	uxth	r2, r3
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	3304      	adds	r3, #4
 8006768:	b212      	sxth	r2, r2
 800676a:	801a      	strh	r2, [r3, #0]

  return ret;
 800676c:	697b      	ldr	r3, [r7, #20]
}
 800676e:	4618      	mov	r0, r3
 8006770:	3718      	adds	r7, #24
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}

08006776 <ism330dhcx_acceleration_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_acceleration_raw_get(stmdev_ctx_t *ctx,
                                        int16_t *val)
{
 8006776:	b580      	push	{r7, lr}
 8006778:	b086      	sub	sp, #24
 800677a:	af00      	add	r7, sp, #0
 800677c:	6078      	str	r0, [r7, #4]
 800677e:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_OUTX_L_A, buff, 6);
 8006780:	f107 020c 	add.w	r2, r7, #12
 8006784:	2306      	movs	r3, #6
 8006786:	2128      	movs	r1, #40	; 0x28
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f7ff fadb 	bl	8005d44 <ism330dhcx_read_reg>
 800678e:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8006790:	7b7b      	ldrb	r3, [r7, #13]
 8006792:	b21a      	sxth	r2, r3
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800679e:	b29b      	uxth	r3, r3
 80067a0:	021b      	lsls	r3, r3, #8
 80067a2:	b29a      	uxth	r2, r3
 80067a4:	7b3b      	ldrb	r3, [r7, #12]
 80067a6:	b29b      	uxth	r3, r3
 80067a8:	4413      	add	r3, r2
 80067aa:	b29b      	uxth	r3, r3
 80067ac:	b21a      	sxth	r2, r3
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80067b2:	7bfa      	ldrb	r2, [r7, #15]
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	3302      	adds	r3, #2
 80067b8:	b212      	sxth	r2, r2
 80067ba:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	3302      	adds	r3, #2
 80067c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80067c4:	b29b      	uxth	r3, r3
 80067c6:	021b      	lsls	r3, r3, #8
 80067c8:	b29a      	uxth	r2, r3
 80067ca:	7bbb      	ldrb	r3, [r7, #14]
 80067cc:	b29b      	uxth	r3, r3
 80067ce:	4413      	add	r3, r2
 80067d0:	b29a      	uxth	r2, r3
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	3302      	adds	r3, #2
 80067d6:	b212      	sxth	r2, r2
 80067d8:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80067da:	7c7a      	ldrb	r2, [r7, #17]
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	3304      	adds	r3, #4
 80067e0:	b212      	sxth	r2, r2
 80067e2:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	3304      	adds	r3, #4
 80067e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80067ec:	b29b      	uxth	r3, r3
 80067ee:	021b      	lsls	r3, r3, #8
 80067f0:	b29a      	uxth	r2, r3
 80067f2:	7c3b      	ldrb	r3, [r7, #16]
 80067f4:	b29b      	uxth	r3, r3
 80067f6:	4413      	add	r3, r2
 80067f8:	b29a      	uxth	r2, r3
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	3304      	adds	r3, #4
 80067fe:	b212      	sxth	r2, r2
 8006800:	801a      	strh	r2, [r3, #0]

  return ret;
 8006802:	697b      	ldr	r3, [r7, #20]
}
 8006804:	4618      	mov	r0, r3
 8006806:	3718      	adds	r7, #24
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}

0800680c <ism330dhcx_device_conf_set>:
  * @param  val    Change the values of device_conf in reg CTRL9_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_device_conf_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b084      	sub	sp, #16
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
 8006814:	460b      	mov	r3, r1
 8006816:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl9_xl_t ctrl9_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL9_XL,
 8006818:	f107 0208 	add.w	r2, r7, #8
 800681c:	2301      	movs	r3, #1
 800681e:	2118      	movs	r1, #24
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f7ff fa8f 	bl	8005d44 <ism330dhcx_read_reg>
 8006826:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl9_xl, 1);

  if (ret == 0)
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d10f      	bne.n	800684e <ism330dhcx_device_conf_set+0x42>
  {
    ctrl9_xl.device_conf = (uint8_t)val;
 800682e:	78fb      	ldrb	r3, [r7, #3]
 8006830:	f003 0301 	and.w	r3, r3, #1
 8006834:	b2da      	uxtb	r2, r3
 8006836:	7a3b      	ldrb	r3, [r7, #8]
 8006838:	f362 0341 	bfi	r3, r2, #1, #1
 800683c:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL9_XL,
 800683e:	f107 0208 	add.w	r2, r7, #8
 8006842:	2301      	movs	r3, #1
 8006844:	2118      	movs	r1, #24
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f7ff fa94 	bl	8005d74 <ism330dhcx_write_reg>
 800684c:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl9_xl, 1);
  }

  return ret;
 800684e:	68fb      	ldr	r3, [r7, #12]
}
 8006850:	4618      	mov	r0, r3
 8006852:	3710      	adds	r7, #16
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}

08006858 <ism330dhcx_mem_bank_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_mem_bank_set(stmdev_ctx_t *ctx,
                                ism330dhcx_reg_access_t val)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b084      	sub	sp, #16
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
 8006860:	460b      	mov	r3, r1
 8006862:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_func_cfg_access_t func_cfg_access;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FUNC_CFG_ACCESS,
 8006864:	f107 0208 	add.w	r2, r7, #8
 8006868:	2301      	movs	r3, #1
 800686a:	2101      	movs	r1, #1
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f7ff fa69 	bl	8005d44 <ism330dhcx_read_reg>
 8006872:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&func_cfg_access, 1);

  if (ret == 0)
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d10f      	bne.n	800689a <ism330dhcx_mem_bank_set+0x42>
  {
    func_cfg_access.reg_access = (uint8_t)val;
 800687a:	78fb      	ldrb	r3, [r7, #3]
 800687c:	f003 0303 	and.w	r3, r3, #3
 8006880:	b2da      	uxtb	r2, r3
 8006882:	7a3b      	ldrb	r3, [r7, #8]
 8006884:	f362 1387 	bfi	r3, r2, #6, #2
 8006888:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FUNC_CFG_ACCESS,
 800688a:	f107 0208 	add.w	r2, r7, #8
 800688e:	2301      	movs	r3, #1
 8006890:	2101      	movs	r1, #1
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f7ff fa6e 	bl	8005d74 <ism330dhcx_write_reg>
 8006898:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&func_cfg_access, 1);
  }

  return ret;
 800689a:	68fb      	ldr	r3, [r7, #12]
}
 800689c:	4618      	mov	r0, r3
 800689e:	3710      	adds	r7, #16
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}

080068a4 <ism330dhcx_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b084      	sub	sp, #16
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
 80068ac:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_WHO_AM_I, buff, 1);
 80068ae:	2301      	movs	r3, #1
 80068b0:	683a      	ldr	r2, [r7, #0]
 80068b2:	210f      	movs	r1, #15
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f7ff fa45 	bl	8005d44 <ism330dhcx_read_reg>
 80068ba:	60f8      	str	r0, [r7, #12]

  return ret;
 80068bc:	68fb      	ldr	r3, [r7, #12]
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3710      	adds	r7, #16
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}

080068c6 <ism330dhcx_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80068c6:	b580      	push	{r7, lr}
 80068c8:	b084      	sub	sp, #16
 80068ca:	af00      	add	r7, sp, #0
 80068cc:	6078      	str	r0, [r7, #4]
 80068ce:	460b      	mov	r3, r1
 80068d0:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
 80068d2:	f107 0208 	add.w	r2, r7, #8
 80068d6:	2301      	movs	r3, #1
 80068d8:	2112      	movs	r1, #18
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f7ff fa32 	bl	8005d44 <ism330dhcx_read_reg>
 80068e0:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl3_c, 1);

  if (ret == 0)
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d10f      	bne.n	8006908 <ism330dhcx_reset_set+0x42>
  {
    ctrl3_c.sw_reset = (uint8_t)val;
 80068e8:	78fb      	ldrb	r3, [r7, #3]
 80068ea:	f003 0301 	and.w	r3, r3, #1
 80068ee:	b2da      	uxtb	r2, r3
 80068f0:	7a3b      	ldrb	r3, [r7, #8]
 80068f2:	f362 0300 	bfi	r3, r2, #0, #1
 80068f6:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
 80068f8:	f107 0208 	add.w	r2, r7, #8
 80068fc:	2301      	movs	r3, #1
 80068fe:	2112      	movs	r1, #18
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f7ff fa37 	bl	8005d74 <ism330dhcx_write_reg>
 8006906:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
 8006908:	68fb      	ldr	r3, [r7, #12]
}
 800690a:	4618      	mov	r0, r3
 800690c:	3710      	adds	r7, #16
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}

08006912 <ism330dhcx_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006912:	b580      	push	{r7, lr}
 8006914:	b084      	sub	sp, #16
 8006916:	af00      	add	r7, sp, #0
 8006918:	6078      	str	r0, [r7, #4]
 800691a:	460b      	mov	r3, r1
 800691c:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
 800691e:	f107 0208 	add.w	r2, r7, #8
 8006922:	2301      	movs	r3, #1
 8006924:	2112      	movs	r1, #18
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f7ff fa0c 	bl	8005d44 <ism330dhcx_read_reg>
 800692c:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl3_c, 1);

  if (ret == 0)
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d10f      	bne.n	8006954 <ism330dhcx_auto_increment_set+0x42>
  {
    ctrl3_c.if_inc = (uint8_t)val;
 8006934:	78fb      	ldrb	r3, [r7, #3]
 8006936:	f003 0301 	and.w	r3, r3, #1
 800693a:	b2da      	uxtb	r2, r3
 800693c:	7a3b      	ldrb	r3, [r7, #8]
 800693e:	f362 0382 	bfi	r3, r2, #2, #1
 8006942:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
 8006944:	f107 0208 	add.w	r2, r7, #8
 8006948:	2301      	movs	r3, #1
 800694a:	2112      	movs	r1, #18
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f7ff fa11 	bl	8005d74 <ism330dhcx_write_reg>
 8006952:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
 8006954:	68fb      	ldr	r3, [r7, #12]
}
 8006956:	4618      	mov	r0, r3
 8006958:	3710      	adds	r7, #16
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}

0800695e <ism330dhcx_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fifo_mode_set(stmdev_ctx_t *ctx,
                                 ism330dhcx_fifo_mode_t val)
{
 800695e:	b580      	push	{r7, lr}
 8006960:	b084      	sub	sp, #16
 8006962:	af00      	add	r7, sp, #0
 8006964:	6078      	str	r0, [r7, #4]
 8006966:	460b      	mov	r3, r1
 8006968:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_fifo_ctrl4_t fifo_ctrl4;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_CTRL4,
 800696a:	f107 0208 	add.w	r2, r7, #8
 800696e:	2301      	movs	r3, #1
 8006970:	210a      	movs	r1, #10
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f7ff f9e6 	bl	8005d44 <ism330dhcx_read_reg>
 8006978:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl4, 1);

  if (ret == 0)
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d10f      	bne.n	80069a0 <ism330dhcx_fifo_mode_set+0x42>
  {
    fifo_ctrl4.fifo_mode = (uint8_t)val;
 8006980:	78fb      	ldrb	r3, [r7, #3]
 8006982:	f003 0307 	and.w	r3, r3, #7
 8006986:	b2da      	uxtb	r2, r3
 8006988:	7a3b      	ldrb	r3, [r7, #8]
 800698a:	f362 0302 	bfi	r3, r2, #0, #3
 800698e:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FIFO_CTRL4,
 8006990:	f107 0208 	add.w	r2, r7, #8
 8006994:	2301      	movs	r3, #1
 8006996:	210a      	movs	r1, #10
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f7ff f9eb 	bl	8005d74 <ism330dhcx_write_reg>
 800699e:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&fifo_ctrl4, 1);
  }

  return ret;
 80069a0:	68fb      	ldr	r3, [r7, #12]
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	3710      	adds	r7, #16
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}

080069aa <ism330dhcx_fsm_enable_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fsm_enable_get(stmdev_ctx_t *ctx,
                                  ism330dhcx_emb_fsm_enable_t *val)
{
 80069aa:	b580      	push	{r7, lr}
 80069ac:	b084      	sub	sp, #16
 80069ae:	af00      	add	r7, sp, #0
 80069b0:	6078      	str	r0, [r7, #4]
 80069b2:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 80069b4:	2102      	movs	r1, #2
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f7ff ff4e 	bl	8006858 <ism330dhcx_mem_bank_set>
 80069bc:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d106      	bne.n	80069d2 <ism330dhcx_fsm_enable_get+0x28>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_A,
                              (uint8_t *)&val->fsm_enable_a, 1);
 80069c4:	683a      	ldr	r2, [r7, #0]
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_A,
 80069c6:	2301      	movs	r3, #1
 80069c8:	2146      	movs	r1, #70	; 0x46
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f7ff f9ba 	bl	8005d44 <ism330dhcx_read_reg>
 80069d0:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d107      	bne.n	80069e8 <ism330dhcx_fsm_enable_get+0x3e>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_B,
                              (uint8_t *)&val->fsm_enable_b, 1);
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	1c5a      	adds	r2, r3, #1
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_B,
 80069dc:	2301      	movs	r3, #1
 80069de:	2147      	movs	r1, #71	; 0x47
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f7ff f9af 	bl	8005d44 <ism330dhcx_read_reg>
 80069e6:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d104      	bne.n	80069f8 <ism330dhcx_fsm_enable_get+0x4e>
  {
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 80069ee:	2100      	movs	r1, #0
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f7ff ff31 	bl	8006858 <ism330dhcx_mem_bank_set>
 80069f6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80069f8:	68fb      	ldr	r3, [r7, #12]
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	3710      	adds	r7, #16
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}
	...

08006a04 <ism330dhcx_fsm_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_fsm_odr_t *val)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b084      	sub	sp, #16
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	6039      	str	r1, [r7, #0]
  ism330dhcx_emb_func_odr_cfg_b_t emb_func_odr_cfg_b;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 8006a0e:	2102      	movs	r1, #2
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f7ff ff21 	bl	8006858 <ism330dhcx_mem_bank_set>
 8006a16:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d107      	bne.n	8006a2e <ism330dhcx_fsm_data_rate_get+0x2a>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_ODR_CFG_B,
 8006a1e:	f107 0208 	add.w	r2, r7, #8
 8006a22:	2301      	movs	r3, #1
 8006a24:	215f      	movs	r1, #95	; 0x5f
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f7ff f98c 	bl	8005d44 <ism330dhcx_read_reg>
 8006a2c:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&emb_func_odr_cfg_b, 1);
  }

  if (ret == 0)
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d104      	bne.n	8006a3e <ism330dhcx_fsm_data_rate_get+0x3a>
  {
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 8006a34:	2100      	movs	r1, #0
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f7ff ff0e 	bl	8006858 <ism330dhcx_mem_bank_set>
 8006a3c:	60f8      	str	r0, [r7, #12]
  }

  switch (emb_func_odr_cfg_b.fsm_odr)
 8006a3e:	7a3b      	ldrb	r3, [r7, #8]
 8006a40:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8006a44:	b2db      	uxtb	r3, r3
 8006a46:	2b03      	cmp	r3, #3
 8006a48:	d81a      	bhi.n	8006a80 <ism330dhcx_fsm_data_rate_get+0x7c>
 8006a4a:	a201      	add	r2, pc, #4	; (adr r2, 8006a50 <ism330dhcx_fsm_data_rate_get+0x4c>)
 8006a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a50:	08006a61 	.word	0x08006a61
 8006a54:	08006a69 	.word	0x08006a69
 8006a58:	08006a71 	.word	0x08006a71
 8006a5c:	08006a79 	.word	0x08006a79
  {
    case ISM330DHCX_ODR_FSM_12Hz5:
      *val = ISM330DHCX_ODR_FSM_12Hz5;
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	2200      	movs	r2, #0
 8006a64:	701a      	strb	r2, [r3, #0]
      break;
 8006a66:	e00f      	b.n	8006a88 <ism330dhcx_fsm_data_rate_get+0x84>

    case ISM330DHCX_ODR_FSM_26Hz:
      *val = ISM330DHCX_ODR_FSM_26Hz;
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	701a      	strb	r2, [r3, #0]
      break;
 8006a6e:	e00b      	b.n	8006a88 <ism330dhcx_fsm_data_rate_get+0x84>

    case ISM330DHCX_ODR_FSM_52Hz:
      *val = ISM330DHCX_ODR_FSM_52Hz;
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	2202      	movs	r2, #2
 8006a74:	701a      	strb	r2, [r3, #0]
      break;
 8006a76:	e007      	b.n	8006a88 <ism330dhcx_fsm_data_rate_get+0x84>

    case ISM330DHCX_ODR_FSM_104Hz:
      *val = ISM330DHCX_ODR_FSM_104Hz;
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	2203      	movs	r2, #3
 8006a7c:	701a      	strb	r2, [r3, #0]
      break;
 8006a7e:	e003      	b.n	8006a88 <ism330dhcx_fsm_data_rate_get+0x84>

    default:
      *val = ISM330DHCX_ODR_FSM_12Hz5;
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	2200      	movs	r2, #0
 8006a84:	701a      	strb	r2, [r3, #0]
      break;
 8006a86:	bf00      	nop
  }

  return ret;
 8006a88:	68fb      	ldr	r3, [r7, #12]
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	3710      	adds	r7, #16
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}
 8006a92:	bf00      	nop

08006a94 <ism330dhcx_mlc_get>:
  * @param  val      Get the values of mlc_en in
  *                  reg EMB_FUNC_EN_B
  *
  */
int32_t ism330dhcx_mlc_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b084      	sub	sp, #16
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
 8006a9c:	6039      	str	r1, [r7, #0]
  ism330dhcx_emb_func_en_b_t reg;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 8006a9e:	2102      	movs	r1, #2
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f7ff fed9 	bl	8006858 <ism330dhcx_mem_bank_set>
 8006aa6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d107      	bne.n	8006abe <ism330dhcx_mlc_get+0x2a>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_EN_B,
 8006aae:	f107 0208 	add.w	r2, r7, #8
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	2105      	movs	r1, #5
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f7ff f944 	bl	8005d44 <ism330dhcx_read_reg>
 8006abc:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&reg, 1);
  }

  if (ret == 0)
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d10b      	bne.n	8006adc <ism330dhcx_mlc_get+0x48>
  {
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 8006ac4:	2100      	movs	r1, #0
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f7ff fec6 	bl	8006858 <ism330dhcx_mem_bank_set>
 8006acc:	60f8      	str	r0, [r7, #12]
    *val  = reg.mlc_en;
 8006ace:	7a3b      	ldrb	r3, [r7, #8]
 8006ad0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006ad4:	b2db      	uxtb	r3, r3
 8006ad6:	461a      	mov	r2, r3
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8006adc:	68fb      	ldr	r3, [r7, #12]
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3710      	adds	r7, #16
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}
	...

08006ae8 <ism330dhcx_mlc_data_rate_get>:
  *                  reg EMB_FUNC_ODR_CFG_C
  *
  */
int32_t ism330dhcx_mlc_data_rate_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_mlc_odr_t *val)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b084      	sub	sp, #16
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
 8006af0:	6039      	str	r1, [r7, #0]
  ism330dhcx_emb_func_odr_cfg_c_t reg;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 8006af2:	2102      	movs	r1, #2
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f7ff feaf 	bl	8006858 <ism330dhcx_mem_bank_set>
 8006afa:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d107      	bne.n	8006b12 <ism330dhcx_mlc_data_rate_get+0x2a>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_ODR_CFG_C,
 8006b02:	f107 0208 	add.w	r2, r7, #8
 8006b06:	2301      	movs	r3, #1
 8006b08:	2160      	movs	r1, #96	; 0x60
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f7ff f91a 	bl	8005d44 <ism330dhcx_read_reg>
 8006b10:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&reg, 1);
  }

  if (ret == 0)
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d12a      	bne.n	8006b6e <ism330dhcx_mlc_data_rate_get+0x86>
  {
    switch (reg.mlc_odr)
 8006b18:	7a3b      	ldrb	r3, [r7, #8]
 8006b1a:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8006b1e:	b2db      	uxtb	r3, r3
 8006b20:	2b03      	cmp	r3, #3
 8006b22:	d81b      	bhi.n	8006b5c <ism330dhcx_mlc_data_rate_get+0x74>
 8006b24:	a201      	add	r2, pc, #4	; (adr r2, 8006b2c <ism330dhcx_mlc_data_rate_get+0x44>)
 8006b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b2a:	bf00      	nop
 8006b2c:	08006b3d 	.word	0x08006b3d
 8006b30:	08006b45 	.word	0x08006b45
 8006b34:	08006b4d 	.word	0x08006b4d
 8006b38:	08006b55 	.word	0x08006b55
    {
      case ISM330DHCX_ODR_PRGS_12Hz5:
        *val = ISM330DHCX_ODR_PRGS_12Hz5;
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	701a      	strb	r2, [r3, #0]
        break;
 8006b42:	e00f      	b.n	8006b64 <ism330dhcx_mlc_data_rate_get+0x7c>

      case ISM330DHCX_ODR_PRGS_26Hz:
        *val = ISM330DHCX_ODR_PRGS_26Hz;
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	2201      	movs	r2, #1
 8006b48:	701a      	strb	r2, [r3, #0]
        break;
 8006b4a:	e00b      	b.n	8006b64 <ism330dhcx_mlc_data_rate_get+0x7c>

      case ISM330DHCX_ODR_PRGS_52Hz:
        *val = ISM330DHCX_ODR_PRGS_52Hz;
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	2202      	movs	r2, #2
 8006b50:	701a      	strb	r2, [r3, #0]
        break;
 8006b52:	e007      	b.n	8006b64 <ism330dhcx_mlc_data_rate_get+0x7c>

      case ISM330DHCX_ODR_PRGS_104Hz:
        *val = ISM330DHCX_ODR_PRGS_104Hz;
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	2203      	movs	r2, #3
 8006b58:	701a      	strb	r2, [r3, #0]
        break;
 8006b5a:	e003      	b.n	8006b64 <ism330dhcx_mlc_data_rate_get+0x7c>

      default:
        *val = ISM330DHCX_ODR_PRGS_12Hz5;
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	701a      	strb	r2, [r3, #0]
        break;
 8006b62:	bf00      	nop
    }

    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 8006b64:	2100      	movs	r1, #0
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f7ff fe76 	bl	8006858 <ism330dhcx_mem_bank_set>
 8006b6c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	3710      	adds	r7, #16
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}

08006b78 <IIS2MDC_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2MDC_RegisterBusIO(IIS2MDC_Object_t *pObj, IIS2MDC_IO_t *pIO)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b084      	sub	sp, #16
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
 8006b80:	6039      	str	r1, [r7, #0]
  int32_t ret = IIS2MDC_OK;
 8006b82:	2300      	movs	r3, #0
 8006b84:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d103      	bne.n	8006b94 <IIS2MDC_RegisterBusIO+0x1c>
  {
    ret = IIS2MDC_ERROR;
 8006b8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006b90:	60fb      	str	r3, [r7, #12]
 8006b92:	e04f      	b.n	8006c34 <IIS2MDC_RegisterBusIO+0xbc>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	681a      	ldr	r2, [r3, #0]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	685a      	ldr	r2, [r3, #4]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	689a      	ldr	r2, [r3, #8]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	7b1a      	ldrb	r2, [r3, #12]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	691a      	ldr	r2, [r3, #16]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	695a      	ldr	r2, [r3, #20]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	699a      	ldr	r2, [r3, #24]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	4a1c      	ldr	r2, [pc, #112]	; (8006c40 <IIS2MDC_RegisterBusIO+0xc8>)
 8006bd0:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteMagRegWrap;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	4a1b      	ldr	r2, [pc, #108]	; (8006c44 <IIS2MDC_RegisterBusIO+0xcc>)
 8006bd6:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	69da      	ldr	r2, [r3, #28]
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle    = pObj;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	687a      	ldr	r2, [r7, #4]
 8006be4:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d103      	bne.n	8006bf6 <IIS2MDC_RegisterBusIO+0x7e>
    {
      ret = IIS2MDC_ERROR;
 8006bee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006bf2:	60fb      	str	r3, [r7, #12]
 8006bf4:	e01e      	b.n	8006c34 <IIS2MDC_RegisterBusIO+0xbc>
    }
    else if (pObj->IO.Init() != IIS2MDC_OK)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4798      	blx	r3
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d003      	beq.n	8006c0a <IIS2MDC_RegisterBusIO+0x92>
    {
      ret = IIS2MDC_ERROR;
 8006c02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006c06:	60fb      	str	r3, [r7, #12]
 8006c08:	e014      	b.n	8006c34 <IIS2MDC_RegisterBusIO+0xbc>
    }
    else
    {
      if (pObj->IO.BusType != IIS2MDC_I2C_BUS) /* If the bus type is not I2C */
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	689b      	ldr	r3, [r3, #8]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d010      	beq.n	8006c34 <IIS2MDC_RegisterBusIO+0xbc>
      {
        /* Disable I2C interface support only the first time */
        if (pObj->is_initialized == 0U)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d10b      	bne.n	8006c34 <IIS2MDC_RegisterBusIO+0xbc>
        {
          /* Disable I2C interface on the component */
          if (iis2mdc_i2c_interface_set(&(pObj->Ctx), IIS2MDC_I2C_DISABLE) != IIS2MDC_OK)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	3320      	adds	r3, #32
 8006c20:	2101      	movs	r1, #1
 8006c22:	4618      	mov	r0, r3
 8006c24:	f000 fbc8 	bl	80073b8 <iis2mdc_i2c_interface_set>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d002      	beq.n	8006c34 <IIS2MDC_RegisterBusIO+0xbc>
          {
            ret = IIS2MDC_ERROR;
 8006c2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006c32:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8006c34:	68fb      	ldr	r3, [r7, #12]
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	3710      	adds	r7, #16
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}
 8006c3e:	bf00      	nop
 8006c40:	0800703b 	.word	0x0800703b
 8006c44:	0800709d 	.word	0x0800709d

08006c48 <IIS2MDC_Init>:
  * @brief  Initialize the IIS2MDC sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2MDC_Init(IIS2MDC_Object_t *pObj)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b082      	sub	sp, #8
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (iis2mdc_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != IIS2MDC_OK)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	3320      	adds	r3, #32
 8006c54:	2101      	movs	r1, #1
 8006c56:	4618      	mov	r0, r3
 8006c58:	f000 fb06 	bl	8007268 <iis2mdc_block_data_update_set>
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d002      	beq.n	8006c68 <IIS2MDC_Init+0x20>
  {
    return IIS2MDC_ERROR;
 8006c62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006c66:	e028      	b.n	8006cba <IIS2MDC_Init+0x72>
  }

  /* Operating mode selection - power down */
  if (iis2mdc_operating_mode_set(&(pObj->Ctx), IIS2MDC_POWER_DOWN) != IIS2MDC_OK)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	3320      	adds	r3, #32
 8006c6c:	2102      	movs	r1, #2
 8006c6e:	4618      	mov	r0, r3
 8006c70:	f000 fa75 	bl	800715e <iis2mdc_operating_mode_set>
 8006c74:	4603      	mov	r3, r0
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d002      	beq.n	8006c80 <IIS2MDC_Init+0x38>
  {
    return IIS2MDC_ERROR;
 8006c7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006c7e:	e01c      	b.n	8006cba <IIS2MDC_Init+0x72>
  }

  /* Output data rate selection */
  if (iis2mdc_data_rate_set(&(pObj->Ctx), IIS2MDC_ODR_100Hz) != IIS2MDC_OK)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	3320      	adds	r3, #32
 8006c84:	2103      	movs	r1, #3
 8006c86:	4618      	mov	r0, r3
 8006c88:	f000 fa8f 	bl	80071aa <iis2mdc_data_rate_set>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d002      	beq.n	8006c98 <IIS2MDC_Init+0x50>
  {
    return IIS2MDC_ERROR;
 8006c92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006c96:	e010      	b.n	8006cba <IIS2MDC_Init+0x72>
  }

  /* Self Test disabled. */
  if (iis2mdc_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != IIS2MDC_OK)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	3320      	adds	r3, #32
 8006c9c:	2100      	movs	r1, #0
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f000 fb64 	bl	800736c <iis2mdc_self_test_set>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d002      	beq.n	8006cb0 <IIS2MDC_Init+0x68>
  {
    return IIS2MDC_ERROR;
 8006caa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006cae:	e004      	b.n	8006cba <IIS2MDC_Init+0x72>
  }

  pObj->is_initialized = 1;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return IIS2MDC_OK;
 8006cb8:	2300      	movs	r3, #0
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3708      	adds	r7, #8
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}

08006cc2 <IIS2MDC_DeInit>:
  * @brief  Deinitialize the IIS2MDC magnetometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2MDC_DeInit(IIS2MDC_Object_t *pObj)
{
 8006cc2:	b580      	push	{r7, lr}
 8006cc4:	b082      	sub	sp, #8
 8006cc6:	af00      	add	r7, sp, #0
 8006cc8:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (IIS2MDC_MAG_Disable(pObj) != IIS2MDC_OK)
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f000 f874 	bl	8006db8 <IIS2MDC_MAG_Disable>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d002      	beq.n	8006cdc <IIS2MDC_DeInit+0x1a>
  {
    return IIS2MDC_ERROR;
 8006cd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006cda:	e004      	b.n	8006ce6 <IIS2MDC_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return IIS2MDC_OK;
 8006ce4:	2300      	movs	r3, #0
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3708      	adds	r7, #8
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}

08006cee <IIS2MDC_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2MDC_ReadID(IIS2MDC_Object_t *pObj, uint8_t *Id)
{
 8006cee:	b580      	push	{r7, lr}
 8006cf0:	b082      	sub	sp, #8
 8006cf2:	af00      	add	r7, sp, #0
 8006cf4:	6078      	str	r0, [r7, #4]
 8006cf6:	6039      	str	r1, [r7, #0]
  if (iis2mdc_device_id_get(&(pObj->Ctx), Id) != IIS2MDC_OK)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	3320      	adds	r3, #32
 8006cfc:	6839      	ldr	r1, [r7, #0]
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f000 fb23 	bl	800734a <iis2mdc_device_id_get>
 8006d04:	4603      	mov	r3, r0
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d002      	beq.n	8006d10 <IIS2MDC_ReadID+0x22>
  {
    return IIS2MDC_ERROR;
 8006d0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006d0e:	e000      	b.n	8006d12 <IIS2MDC_ReadID+0x24>
  }

  return IIS2MDC_OK;
 8006d10:	2300      	movs	r3, #0
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3708      	adds	r7, #8
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}
	...

08006d1c <IIS2MDC_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to IIS2MDC magnetometer sensor capabilities
  * @retval Component status
  */
int32_t IIS2MDC_GetCapabilities(IIS2MDC_Object_t *pObj, IIS2MDC_Capabilities_t *Capabilities)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b083      	sub	sp, #12
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
 8006d24:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	2201      	movs	r2, #1
 8006d36:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	2200      	movs	r2, #0
 8006d42:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	2200      	movs	r2, #0
 8006d48:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	2232      	movs	r2, #50	; 0x32
 8006d4e:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	f04f 0200 	mov.w	r2, #0
 8006d56:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	f04f 0200 	mov.w	r2, #0
 8006d5e:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	4a04      	ldr	r2, [pc, #16]	; (8006d74 <IIS2MDC_GetCapabilities+0x58>)
 8006d64:	619a      	str	r2, [r3, #24]
  return IIS2MDC_OK;
 8006d66:	2300      	movs	r3, #0
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	370c      	adds	r7, #12
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d72:	4770      	bx	lr
 8006d74:	42c80000 	.word	0x42c80000

08006d78 <IIS2MDC_MAG_Enable>:
  * @brief Enable the IIS2MDC magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2MDC_MAG_Enable(IIS2MDC_Object_t *pObj)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b082      	sub	sp, #8
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006d86:	2b01      	cmp	r3, #1
 8006d88:	d101      	bne.n	8006d8e <IIS2MDC_MAG_Enable+0x16>
  {
    return IIS2MDC_OK;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	e010      	b.n	8006db0 <IIS2MDC_MAG_Enable+0x38>
  }

  /* Output data rate selection. */
  if (iis2mdc_operating_mode_set(&(pObj->Ctx), IIS2MDC_CONTINUOUS_MODE) != IIS2MDC_OK)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	3320      	adds	r3, #32
 8006d92:	2100      	movs	r1, #0
 8006d94:	4618      	mov	r0, r3
 8006d96:	f000 f9e2 	bl	800715e <iis2mdc_operating_mode_set>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d002      	beq.n	8006da6 <IIS2MDC_MAG_Enable+0x2e>
  {
    return IIS2MDC_ERROR;
 8006da0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006da4:	e004      	b.n	8006db0 <IIS2MDC_MAG_Enable+0x38>
  }

  pObj->mag_is_enabled = 1;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2201      	movs	r2, #1
 8006daa:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return IIS2MDC_OK;
 8006dae:	2300      	movs	r3, #0
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	3708      	adds	r7, #8
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}

08006db8 <IIS2MDC_MAG_Disable>:
  * @brief Disable the IIS2MDC magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2MDC_MAG_Disable(IIS2MDC_Object_t *pObj)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b082      	sub	sp, #8
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d101      	bne.n	8006dce <IIS2MDC_MAG_Disable+0x16>
  {
    return IIS2MDC_OK;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	e010      	b.n	8006df0 <IIS2MDC_MAG_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (iis2mdc_operating_mode_set(&(pObj->Ctx), IIS2MDC_POWER_DOWN) != IIS2MDC_OK)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	3320      	adds	r3, #32
 8006dd2:	2102      	movs	r1, #2
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	f000 f9c2 	bl	800715e <iis2mdc_operating_mode_set>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d002      	beq.n	8006de6 <IIS2MDC_MAG_Disable+0x2e>
  {
    return IIS2MDC_ERROR;
 8006de0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006de4:	e004      	b.n	8006df0 <IIS2MDC_MAG_Disable+0x38>
  }

  pObj->mag_is_enabled = 0;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2200      	movs	r2, #0
 8006dea:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return IIS2MDC_OK;
 8006dee:	2300      	movs	r3, #0
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	3708      	adds	r7, #8
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}

08006df8 <IIS2MDC_MAG_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2MDC_MAG_GetSensitivity(IIS2MDC_Object_t *pObj, float *Sensitivity)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b083      	sub	sp, #12
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
 8006e00:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  *Sensitivity = IIS2MDC_MAG_SENSITIVITY_FS_50GAUSS;
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8006e08:	601a      	str	r2, [r3, #0]

  return IIS2MDC_OK;
 8006e0a:	2300      	movs	r3, #0
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	370c      	adds	r7, #12
 8006e10:	46bd      	mov	sp, r7
 8006e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e16:	4770      	bx	lr

08006e18 <IIS2MDC_MAG_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2MDC_MAG_GetOutputDataRate(IIS2MDC_Object_t *pObj, float *Odr)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b084      	sub	sp, #16
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
 8006e20:	6039      	str	r1, [r7, #0]
  int32_t ret = IIS2MDC_OK;
 8006e22:	2300      	movs	r3, #0
 8006e24:	60fb      	str	r3, [r7, #12]
  iis2mdc_odr_t odr_low_level;

  /* Get current output data rate. */
  if (iis2mdc_data_rate_get(&(pObj->Ctx), &odr_low_level) != IIS2MDC_OK)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	3320      	adds	r3, #32
 8006e2a:	f107 020b 	add.w	r2, r7, #11
 8006e2e:	4611      	mov	r1, r2
 8006e30:	4618      	mov	r0, r3
 8006e32:	f000 f9e1 	bl	80071f8 <iis2mdc_data_rate_get>
 8006e36:	4603      	mov	r3, r0
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d002      	beq.n	8006e42 <IIS2MDC_MAG_GetOutputDataRate+0x2a>
  {
    return IIS2MDC_ERROR;
 8006e3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006e40:	e023      	b.n	8006e8a <IIS2MDC_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 8006e42:	7afb      	ldrb	r3, [r7, #11]
 8006e44:	2b03      	cmp	r3, #3
 8006e46:	d81b      	bhi.n	8006e80 <IIS2MDC_MAG_GetOutputDataRate+0x68>
 8006e48:	a201      	add	r2, pc, #4	; (adr r2, 8006e50 <IIS2MDC_MAG_GetOutputDataRate+0x38>)
 8006e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e4e:	bf00      	nop
 8006e50:	08006e61 	.word	0x08006e61
 8006e54:	08006e69 	.word	0x08006e69
 8006e58:	08006e71 	.word	0x08006e71
 8006e5c:	08006e79 	.word	0x08006e79
  {
    case IIS2MDC_ODR_10Hz:
      *Odr = 10.0f;
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	4a0c      	ldr	r2, [pc, #48]	; (8006e94 <IIS2MDC_MAG_GetOutputDataRate+0x7c>)
 8006e64:	601a      	str	r2, [r3, #0]
      break;
 8006e66:	e00f      	b.n	8006e88 <IIS2MDC_MAG_GetOutputDataRate+0x70>

    case IIS2MDC_ODR_20Hz:
      *Odr = 20.0f;
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	4a0b      	ldr	r2, [pc, #44]	; (8006e98 <IIS2MDC_MAG_GetOutputDataRate+0x80>)
 8006e6c:	601a      	str	r2, [r3, #0]
      break;
 8006e6e:	e00b      	b.n	8006e88 <IIS2MDC_MAG_GetOutputDataRate+0x70>

    case IIS2MDC_ODR_50Hz:
      *Odr = 50.0f;
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	4a0a      	ldr	r2, [pc, #40]	; (8006e9c <IIS2MDC_MAG_GetOutputDataRate+0x84>)
 8006e74:	601a      	str	r2, [r3, #0]
      break;
 8006e76:	e007      	b.n	8006e88 <IIS2MDC_MAG_GetOutputDataRate+0x70>

    case IIS2MDC_ODR_100Hz:
      *Odr = 100.0f;
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	4a09      	ldr	r2, [pc, #36]	; (8006ea0 <IIS2MDC_MAG_GetOutputDataRate+0x88>)
 8006e7c:	601a      	str	r2, [r3, #0]
      break;
 8006e7e:	e003      	b.n	8006e88 <IIS2MDC_MAG_GetOutputDataRate+0x70>

    default:
      ret = IIS2MDC_ERROR;
 8006e80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006e84:	60fb      	str	r3, [r7, #12]
      break;
 8006e86:	bf00      	nop
  }

  return ret;
 8006e88:	68fb      	ldr	r3, [r7, #12]
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	3710      	adds	r7, #16
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}
 8006e92:	bf00      	nop
 8006e94:	41200000 	.word	0x41200000
 8006e98:	41a00000 	.word	0x41a00000
 8006e9c:	42480000 	.word	0x42480000
 8006ea0:	42c80000 	.word	0x42c80000

08006ea4 <IIS2MDC_MAG_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2MDC_MAG_SetOutputDataRate(IIS2MDC_Object_t *pObj, float Odr)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b084      	sub	sp, #16
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
 8006eac:	ed87 0a00 	vstr	s0, [r7]
  iis2mdc_odr_t new_odr;

  new_odr = (Odr <= 10.000f) ? IIS2MDC_ODR_10Hz
            : (Odr <= 20.000f) ? IIS2MDC_ODR_20Hz
 8006eb0:	edd7 7a00 	vldr	s15, [r7]
 8006eb4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8006eb8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006ebc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ec0:	d801      	bhi.n	8006ec6 <IIS2MDC_MAG_SetOutputDataRate+0x22>
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	e016      	b.n	8006ef4 <IIS2MDC_MAG_SetOutputDataRate+0x50>
 8006ec6:	edd7 7a00 	vldr	s15, [r7]
 8006eca:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8006ece:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006ed2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ed6:	d801      	bhi.n	8006edc <IIS2MDC_MAG_SetOutputDataRate+0x38>
 8006ed8:	2301      	movs	r3, #1
 8006eda:	e00b      	b.n	8006ef4 <IIS2MDC_MAG_SetOutputDataRate+0x50>
 8006edc:	edd7 7a00 	vldr	s15, [r7]
 8006ee0:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8006f1c <IIS2MDC_MAG_SetOutputDataRate+0x78>
 8006ee4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006ee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006eec:	d801      	bhi.n	8006ef2 <IIS2MDC_MAG_SetOutputDataRate+0x4e>
 8006eee:	2302      	movs	r3, #2
 8006ef0:	e000      	b.n	8006ef4 <IIS2MDC_MAG_SetOutputDataRate+0x50>
 8006ef2:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? IIS2MDC_ODR_10Hz
 8006ef4:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? IIS2MDC_ODR_50Hz
            :                    IIS2MDC_ODR_100Hz;

  if (iis2mdc_data_rate_set(&(pObj->Ctx), new_odr) != IIS2MDC_OK)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	3320      	adds	r3, #32
 8006efa:	7bfa      	ldrb	r2, [r7, #15]
 8006efc:	4611      	mov	r1, r2
 8006efe:	4618      	mov	r0, r3
 8006f00:	f000 f953 	bl	80071aa <iis2mdc_data_rate_set>
 8006f04:	4603      	mov	r3, r0
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d002      	beq.n	8006f10 <IIS2MDC_MAG_SetOutputDataRate+0x6c>
  {
    return IIS2MDC_ERROR;
 8006f0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006f0e:	e000      	b.n	8006f12 <IIS2MDC_MAG_SetOutputDataRate+0x6e>
  }

  return IIS2MDC_OK;
 8006f10:	2300      	movs	r3, #0
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3710      	adds	r7, #16
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}
 8006f1a:	bf00      	nop
 8006f1c:	42480000 	.word	0x42480000

08006f20 <IIS2MDC_MAG_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2MDC_MAG_GetFullScale(IIS2MDC_Object_t *pObj, int32_t *FullScale)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b083      	sub	sp, #12
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
 8006f28:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  *FullScale = 50;
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	2232      	movs	r2, #50	; 0x32
 8006f2e:	601a      	str	r2, [r3, #0]

  return IIS2MDC_OK;
 8006f30:	2300      	movs	r3, #0
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	370c      	adds	r7, #12
 8006f36:	46bd      	mov	sp, r7
 8006f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3c:	4770      	bx	lr

08006f3e <IIS2MDC_MAG_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2MDC_MAG_SetFullScale(IIS2MDC_Object_t *pObj, int32_t FullScale)
{
 8006f3e:	b480      	push	{r7}
 8006f40:	b083      	sub	sp, #12
 8006f42:	af00      	add	r7, sp, #0
 8006f44:	6078      	str	r0, [r7, #4]
 8006f46:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(FullScale);
  return IIS2MDC_OK;
 8006f48:	2300      	movs	r3, #0
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	370c      	adds	r7, #12
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f54:	4770      	bx	lr

08006f56 <IIS2MDC_MAG_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2MDC_MAG_GetAxesRaw(IIS2MDC_Object_t *pObj, IIS2MDC_AxesRaw_t *Value)
{
 8006f56:	b580      	push	{r7, lr}
 8006f58:	b084      	sub	sp, #16
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	6078      	str	r0, [r7, #4]
 8006f5e:	6039      	str	r1, [r7, #0]
  iis2mdc_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (iis2mdc_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != IIS2MDC_OK)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	3320      	adds	r3, #32
 8006f64:	f107 0208 	add.w	r2, r7, #8
 8006f68:	4611      	mov	r1, r2
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f000 f9a2 	bl	80072b4 <iis2mdc_magnetic_raw_get>
 8006f70:	4603      	mov	r3, r0
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d002      	beq.n	8006f7c <IIS2MDC_MAG_GetAxesRaw+0x26>
  {
    return IIS2MDC_ERROR;
 8006f76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006f7a:	e00c      	b.n	8006f96 <IIS2MDC_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8006f7c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8006f84:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8006f8c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	809a      	strh	r2, [r3, #4]

  return IIS2MDC_OK;
 8006f94:	2300      	movs	r3, #0
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3710      	adds	r7, #16
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}

08006f9e <IIS2MDC_MAG_GetAxes>:
  * @param  pObj the device pObj
  * @param  MagneticField pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2MDC_MAG_GetAxes(IIS2MDC_Object_t *pObj, IIS2MDC_Axes_t *MagneticField)
{
 8006f9e:	b580      	push	{r7, lr}
 8006fa0:	b086      	sub	sp, #24
 8006fa2:	af00      	add	r7, sp, #0
 8006fa4:	6078      	str	r0, [r7, #4]
 8006fa6:	6039      	str	r1, [r7, #0]
  iis2mdc_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (iis2mdc_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != IIS2MDC_OK)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	3320      	adds	r3, #32
 8006fac:	f107 0210 	add.w	r2, r7, #16
 8006fb0:	4611      	mov	r1, r2
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	f000 f97e 	bl	80072b4 <iis2mdc_magnetic_raw_get>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d002      	beq.n	8006fc4 <IIS2MDC_MAG_GetAxes+0x26>
  {
    return IIS2MDC_ERROR;
 8006fbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006fc2:	e036      	b.n	8007032 <IIS2MDC_MAG_GetAxes+0x94>
  }

  /* Get IIS2MDC actual sensitivity. */
  (void)IIS2MDC_MAG_GetSensitivity(pObj, &sensitivity);
 8006fc4:	f107 030c 	add.w	r3, r7, #12
 8006fc8:	4619      	mov	r1, r3
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f7ff ff14 	bl	8006df8 <IIS2MDC_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8006fd0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006fd4:	ee07 3a90 	vmov	s15, r3
 8006fd8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006fdc:	edd7 7a03 	vldr	s15, [r7, #12]
 8006fe0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fe4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006fe8:	ee17 2a90 	vmov	r2, s15
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8006ff0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006ff4:	ee07 3a90 	vmov	s15, r3
 8006ff8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006ffc:	edd7 7a03 	vldr	s15, [r7, #12]
 8007000:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007004:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007008:	ee17 2a90 	vmov	r2, s15
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8007010:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007014:	ee07 3a90 	vmov	s15, r3
 8007018:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800701c:	edd7 7a03 	vldr	s15, [r7, #12]
 8007020:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007024:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007028:	ee17 2a90 	vmov	r2, s15
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	609a      	str	r2, [r3, #8]

  return IIS2MDC_OK;
 8007030:	2300      	movs	r3, #0
}
 8007032:	4618      	mov	r0, r3
 8007034:	3718      	adds	r7, #24
 8007036:	46bd      	mov	sp, r7
 8007038:	bd80      	pop	{r7, pc}

0800703a <ReadMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800703a:	b590      	push	{r4, r7, lr}
 800703c:	b087      	sub	sp, #28
 800703e:	af00      	add	r7, sp, #0
 8007040:	60f8      	str	r0, [r7, #12]
 8007042:	607a      	str	r2, [r7, #4]
 8007044:	461a      	mov	r2, r3
 8007046:	460b      	mov	r3, r1
 8007048:	72fb      	strb	r3, [r7, #11]
 800704a:	4613      	mov	r3, r2
 800704c:	813b      	strh	r3, [r7, #8]
  IIS2MDC_Object_t *pObj = (IIS2MDC_Object_t *)Handle;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == IIS2MDC_I2C_BUS) /* I2C */
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	689b      	ldr	r3, [r3, #8]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d10e      	bne.n	8007078 <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	695c      	ldr	r4, [r3, #20]
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	7b1b      	ldrb	r3, [r3, #12]
 8007062:	b298      	uxth	r0, r3
 8007064:	7afb      	ldrb	r3, [r7, #11]
 8007066:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800706a:	b2db      	uxtb	r3, r3
 800706c:	b299      	uxth	r1, r3
 800706e:	893b      	ldrh	r3, [r7, #8]
 8007070:	687a      	ldr	r2, [r7, #4]
 8007072:	47a0      	blx	r4
 8007074:	4603      	mov	r3, r0
 8007076:	e00d      	b.n	8007094 <ReadMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	695c      	ldr	r4, [r3, #20]
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	7b1b      	ldrb	r3, [r3, #12]
 8007080:	b298      	uxth	r0, r3
 8007082:	7afb      	ldrb	r3, [r7, #11]
 8007084:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007088:	b2db      	uxtb	r3, r3
 800708a:	b299      	uxth	r1, r3
 800708c:	893b      	ldrh	r3, [r7, #8]
 800708e:	687a      	ldr	r2, [r7, #4]
 8007090:	47a0      	blx	r4
 8007092:	4603      	mov	r3, r0
  }
}
 8007094:	4618      	mov	r0, r3
 8007096:	371c      	adds	r7, #28
 8007098:	46bd      	mov	sp, r7
 800709a:	bd90      	pop	{r4, r7, pc}

0800709c <WriteMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800709c:	b590      	push	{r4, r7, lr}
 800709e:	b087      	sub	sp, #28
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	60f8      	str	r0, [r7, #12]
 80070a4:	607a      	str	r2, [r7, #4]
 80070a6:	461a      	mov	r2, r3
 80070a8:	460b      	mov	r3, r1
 80070aa:	72fb      	strb	r3, [r7, #11]
 80070ac:	4613      	mov	r3, r2
 80070ae:	813b      	strh	r3, [r7, #8]
  IIS2MDC_Object_t *pObj = (IIS2MDC_Object_t *)Handle;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == IIS2MDC_I2C_BUS) /* I2C */
 80070b4:	697b      	ldr	r3, [r7, #20]
 80070b6:	689b      	ldr	r3, [r3, #8]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d10e      	bne.n	80070da <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	691c      	ldr	r4, [r3, #16]
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	7b1b      	ldrb	r3, [r3, #12]
 80070c4:	b298      	uxth	r0, r3
 80070c6:	7afb      	ldrb	r3, [r7, #11]
 80070c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80070cc:	b2db      	uxtb	r3, r3
 80070ce:	b299      	uxth	r1, r3
 80070d0:	893b      	ldrh	r3, [r7, #8]
 80070d2:	687a      	ldr	r2, [r7, #4]
 80070d4:	47a0      	blx	r4
 80070d6:	4603      	mov	r3, r0
 80070d8:	e00d      	b.n	80070f6 <WriteMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	691c      	ldr	r4, [r3, #16]
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	7b1b      	ldrb	r3, [r3, #12]
 80070e2:	b298      	uxth	r0, r3
 80070e4:	7afb      	ldrb	r3, [r7, #11]
 80070e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070ea:	b2db      	uxtb	r3, r3
 80070ec:	b299      	uxth	r1, r3
 80070ee:	893b      	ldrh	r3, [r7, #8]
 80070f0:	687a      	ldr	r2, [r7, #4]
 80070f2:	47a0      	blx	r4
 80070f4:	4603      	mov	r3, r0
  }
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	371c      	adds	r7, #28
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd90      	pop	{r4, r7, pc}

080070fe <iis2mdc_read_reg>:
  *
  */
int32_t __weak iis2mdc_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 80070fe:	b590      	push	{r4, r7, lr}
 8007100:	b087      	sub	sp, #28
 8007102:	af00      	add	r7, sp, #0
 8007104:	60f8      	str	r0, [r7, #12]
 8007106:	607a      	str	r2, [r7, #4]
 8007108:	461a      	mov	r2, r3
 800710a:	460b      	mov	r3, r1
 800710c:	72fb      	strb	r3, [r7, #11]
 800710e:	4613      	mov	r3, r2
 8007110:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	685c      	ldr	r4, [r3, #4]
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	68d8      	ldr	r0, [r3, #12]
 800711a:	893b      	ldrh	r3, [r7, #8]
 800711c:	7af9      	ldrb	r1, [r7, #11]
 800711e:	687a      	ldr	r2, [r7, #4]
 8007120:	47a0      	blx	r4
 8007122:	6178      	str	r0, [r7, #20]

  return ret;
 8007124:	697b      	ldr	r3, [r7, #20]
}
 8007126:	4618      	mov	r0, r3
 8007128:	371c      	adds	r7, #28
 800712a:	46bd      	mov	sp, r7
 800712c:	bd90      	pop	{r4, r7, pc}

0800712e <iis2mdc_write_reg>:
  *
  */
int32_t __weak iis2mdc_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 800712e:	b590      	push	{r4, r7, lr}
 8007130:	b087      	sub	sp, #28
 8007132:	af00      	add	r7, sp, #0
 8007134:	60f8      	str	r0, [r7, #12]
 8007136:	607a      	str	r2, [r7, #4]
 8007138:	461a      	mov	r2, r3
 800713a:	460b      	mov	r3, r1
 800713c:	72fb      	strb	r3, [r7, #11]
 800713e:	4613      	mov	r3, r2
 8007140:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681c      	ldr	r4, [r3, #0]
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	68d8      	ldr	r0, [r3, #12]
 800714a:	893b      	ldrh	r3, [r7, #8]
 800714c:	7af9      	ldrb	r1, [r7, #11]
 800714e:	687a      	ldr	r2, [r7, #4]
 8007150:	47a0      	blx	r4
 8007152:	6178      	str	r0, [r7, #20]

  return ret;
 8007154:	697b      	ldr	r3, [r7, #20]
}
 8007156:	4618      	mov	r0, r3
 8007158:	371c      	adds	r7, #28
 800715a:	46bd      	mov	sp, r7
 800715c:	bd90      	pop	{r4, r7, pc}

0800715e <iis2mdc_operating_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_operating_mode_set(stmdev_ctx_t *ctx,
                                   iis2mdc_md_t val)
{
 800715e:	b580      	push	{r7, lr}
 8007160:	b084      	sub	sp, #16
 8007162:	af00      	add	r7, sp, #0
 8007164:	6078      	str	r0, [r7, #4]
 8007166:	460b      	mov	r3, r1
 8007168:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_a_t reg;
  int32_t ret;

  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 800716a:	f107 0208 	add.w	r2, r7, #8
 800716e:	2301      	movs	r3, #1
 8007170:	2160      	movs	r1, #96	; 0x60
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f7ff ffc3 	bl	80070fe <iis2mdc_read_reg>
 8007178:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d10f      	bne.n	80071a0 <iis2mdc_operating_mode_set+0x42>
  {
    reg.md = (uint8_t)val;
 8007180:	78fb      	ldrb	r3, [r7, #3]
 8007182:	f003 0303 	and.w	r3, r3, #3
 8007186:	b2da      	uxtb	r2, r3
 8007188:	7a3b      	ldrb	r3, [r7, #8]
 800718a:	f362 0301 	bfi	r3, r2, #0, #2
 800718e:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 8007190:	f107 0208 	add.w	r2, r7, #8
 8007194:	2301      	movs	r3, #1
 8007196:	2160      	movs	r1, #96	; 0x60
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f7ff ffc8 	bl	800712e <iis2mdc_write_reg>
 800719e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80071a0:	68fb      	ldr	r3, [r7, #12]
}
 80071a2:	4618      	mov	r0, r3
 80071a4:	3710      	adds	r7, #16
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}

080071aa <iis2mdc_data_rate_set>:
  * @param  val      change the values of odr in reg CFG_REG_A
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_data_rate_set(stmdev_ctx_t *ctx, iis2mdc_odr_t val)
{
 80071aa:	b580      	push	{r7, lr}
 80071ac:	b084      	sub	sp, #16
 80071ae:	af00      	add	r7, sp, #0
 80071b0:	6078      	str	r0, [r7, #4]
 80071b2:	460b      	mov	r3, r1
 80071b4:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_a_t reg;
  int32_t ret;

  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 80071b6:	f107 0208 	add.w	r2, r7, #8
 80071ba:	2301      	movs	r3, #1
 80071bc:	2160      	movs	r1, #96	; 0x60
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f7ff ff9d 	bl	80070fe <iis2mdc_read_reg>
 80071c4:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d10f      	bne.n	80071ec <iis2mdc_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 80071cc:	78fb      	ldrb	r3, [r7, #3]
 80071ce:	f003 0303 	and.w	r3, r3, #3
 80071d2:	b2da      	uxtb	r2, r3
 80071d4:	7a3b      	ldrb	r3, [r7, #8]
 80071d6:	f362 0383 	bfi	r3, r2, #2, #2
 80071da:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 80071dc:	f107 0208 	add.w	r2, r7, #8
 80071e0:	2301      	movs	r3, #1
 80071e2:	2160      	movs	r1, #96	; 0x60
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f7ff ffa2 	bl	800712e <iis2mdc_write_reg>
 80071ea:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80071ec:	68fb      	ldr	r3, [r7, #12]
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	3710      	adds	r7, #16
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}
	...

080071f8 <iis2mdc_data_rate_get>:
  * @param  val      Get the values of odr in reg CFG_REG_A
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_data_rate_get(stmdev_ctx_t *ctx, iis2mdc_odr_t *val)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b084      	sub	sp, #16
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
 8007200:	6039      	str	r1, [r7, #0]
  iis2mdc_cfg_reg_a_t reg;
  int32_t ret;

  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 8007202:	f107 0208 	add.w	r2, r7, #8
 8007206:	2301      	movs	r3, #1
 8007208:	2160      	movs	r1, #96	; 0x60
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f7ff ff77 	bl	80070fe <iis2mdc_read_reg>
 8007210:	60f8      	str	r0, [r7, #12]

  switch (reg.odr)
 8007212:	7a3b      	ldrb	r3, [r7, #8]
 8007214:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8007218:	b2db      	uxtb	r3, r3
 800721a:	2b03      	cmp	r3, #3
 800721c:	d81a      	bhi.n	8007254 <iis2mdc_data_rate_get+0x5c>
 800721e:	a201      	add	r2, pc, #4	; (adr r2, 8007224 <iis2mdc_data_rate_get+0x2c>)
 8007220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007224:	08007235 	.word	0x08007235
 8007228:	0800723d 	.word	0x0800723d
 800722c:	08007245 	.word	0x08007245
 8007230:	0800724d 	.word	0x0800724d
  {
    case IIS2MDC_ODR_10Hz:
      *val = IIS2MDC_ODR_10Hz;
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	2200      	movs	r2, #0
 8007238:	701a      	strb	r2, [r3, #0]
      break;
 800723a:	e00f      	b.n	800725c <iis2mdc_data_rate_get+0x64>

    case IIS2MDC_ODR_20Hz:
      *val = IIS2MDC_ODR_20Hz;
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	2201      	movs	r2, #1
 8007240:	701a      	strb	r2, [r3, #0]
      break;
 8007242:	e00b      	b.n	800725c <iis2mdc_data_rate_get+0x64>

    case IIS2MDC_ODR_50Hz:
      *val = IIS2MDC_ODR_50Hz;
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	2202      	movs	r2, #2
 8007248:	701a      	strb	r2, [r3, #0]
      break;
 800724a:	e007      	b.n	800725c <iis2mdc_data_rate_get+0x64>

    case IIS2MDC_ODR_100Hz:
      *val = IIS2MDC_ODR_100Hz;
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	2203      	movs	r2, #3
 8007250:	701a      	strb	r2, [r3, #0]
      break;
 8007252:	e003      	b.n	800725c <iis2mdc_data_rate_get+0x64>

    default:
      *val = IIS2MDC_ODR_10Hz;
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	2200      	movs	r2, #0
 8007258:	701a      	strb	r2, [r3, #0]
      break;
 800725a:	bf00      	nop
  }

  return ret;
 800725c:	68fb      	ldr	r3, [r7, #12]
}
 800725e:	4618      	mov	r0, r3
 8007260:	3710      	adds	r7, #16
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}
 8007266:	bf00      	nop

08007268 <iis2mdc_block_data_update_set>:
  * @param  val      change the values of bdu in reg CFG_REG_C
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b084      	sub	sp, #16
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
 8007270:	460b      	mov	r3, r1
 8007272:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_c_t reg;
  int32_t ret;

  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 8007274:	f107 0208 	add.w	r2, r7, #8
 8007278:	2301      	movs	r3, #1
 800727a:	2162      	movs	r1, #98	; 0x62
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f7ff ff3e 	bl	80070fe <iis2mdc_read_reg>
 8007282:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d10f      	bne.n	80072aa <iis2mdc_block_data_update_set+0x42>
  {
    reg.bdu = val;
 800728a:	78fb      	ldrb	r3, [r7, #3]
 800728c:	f003 0301 	and.w	r3, r3, #1
 8007290:	b2da      	uxtb	r2, r3
 8007292:	7a3b      	ldrb	r3, [r7, #8]
 8007294:	f362 1304 	bfi	r3, r2, #4, #1
 8007298:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 800729a:	f107 0208 	add.w	r2, r7, #8
 800729e:	2301      	movs	r3, #1
 80072a0:	2162      	movs	r1, #98	; 0x62
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f7ff ff43 	bl	800712e <iis2mdc_write_reg>
 80072a8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80072aa:	68fb      	ldr	r3, [r7, #12]
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	3710      	adds	r7, #16
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}

080072b4 <iis2mdc_magnetic_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b086      	sub	sp, #24
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
 80072bc:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret =  iis2mdc_read_reg(ctx, IIS2MDC_OUTX_L_REG, buff, 6);
 80072be:	f107 020c 	add.w	r2, r7, #12
 80072c2:	2306      	movs	r3, #6
 80072c4:	2168      	movs	r1, #104	; 0x68
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f7ff ff19 	bl	80070fe <iis2mdc_read_reg>
 80072cc:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80072ce:	7b7b      	ldrb	r3, [r7, #13]
 80072d0:	b21a      	sxth	r2, r3
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80072dc:	b29b      	uxth	r3, r3
 80072de:	021b      	lsls	r3, r3, #8
 80072e0:	b29a      	uxth	r2, r3
 80072e2:	7b3b      	ldrb	r3, [r7, #12]
 80072e4:	b29b      	uxth	r3, r3
 80072e6:	4413      	add	r3, r2
 80072e8:	b29b      	uxth	r3, r3
 80072ea:	b21a      	sxth	r2, r3
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80072f0:	7bfa      	ldrb	r2, [r7, #15]
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	3302      	adds	r3, #2
 80072f6:	b212      	sxth	r2, r2
 80072f8:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	3302      	adds	r3, #2
 80072fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007302:	b29b      	uxth	r3, r3
 8007304:	021b      	lsls	r3, r3, #8
 8007306:	b29a      	uxth	r2, r3
 8007308:	7bbb      	ldrb	r3, [r7, #14]
 800730a:	b29b      	uxth	r3, r3
 800730c:	4413      	add	r3, r2
 800730e:	b29a      	uxth	r2, r3
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	3302      	adds	r3, #2
 8007314:	b212      	sxth	r2, r2
 8007316:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8007318:	7c7a      	ldrb	r2, [r7, #17]
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	3304      	adds	r3, #4
 800731e:	b212      	sxth	r2, r2
 8007320:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	3304      	adds	r3, #4
 8007326:	f9b3 3000 	ldrsh.w	r3, [r3]
 800732a:	b29b      	uxth	r3, r3
 800732c:	021b      	lsls	r3, r3, #8
 800732e:	b29a      	uxth	r2, r3
 8007330:	7c3b      	ldrb	r3, [r7, #16]
 8007332:	b29b      	uxth	r3, r3
 8007334:	4413      	add	r3, r2
 8007336:	b29a      	uxth	r2, r3
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	3304      	adds	r3, #4
 800733c:	b212      	sxth	r2, r2
 800733e:	801a      	strh	r2, [r3, #0]

  return ret;
 8007340:	697b      	ldr	r3, [r7, #20]
}
 8007342:	4618      	mov	r0, r3
 8007344:	3718      	adds	r7, #24
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}

0800734a <iis2mdc_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800734a:	b580      	push	{r7, lr}
 800734c:	b084      	sub	sp, #16
 800734e:	af00      	add	r7, sp, #0
 8007350:	6078      	str	r0, [r7, #4]
 8007352:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  iis2mdc_read_reg(ctx, IIS2MDC_WHO_AM_I, buff, 1);
 8007354:	2301      	movs	r3, #1
 8007356:	683a      	ldr	r2, [r7, #0]
 8007358:	214f      	movs	r1, #79	; 0x4f
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f7ff fecf 	bl	80070fe <iis2mdc_read_reg>
 8007360:	60f8      	str	r0, [r7, #12]

  return ret;
 8007362:	68fb      	ldr	r3, [r7, #12]
}
 8007364:	4618      	mov	r0, r3
 8007366:	3710      	adds	r7, #16
 8007368:	46bd      	mov	sp, r7
 800736a:	bd80      	pop	{r7, pc}

0800736c <iis2mdc_self_test_set>:
  * @param  val      change the values of self_test in reg CFG_REG_C
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b084      	sub	sp, #16
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
 8007374:	460b      	mov	r3, r1
 8007376:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_c_t reg;
  int32_t ret;

  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 8007378:	f107 0208 	add.w	r2, r7, #8
 800737c:	2301      	movs	r3, #1
 800737e:	2162      	movs	r1, #98	; 0x62
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f7ff febc 	bl	80070fe <iis2mdc_read_reg>
 8007386:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d10f      	bne.n	80073ae <iis2mdc_self_test_set+0x42>
  {
    reg.self_test = val;
 800738e:	78fb      	ldrb	r3, [r7, #3]
 8007390:	f003 0301 	and.w	r3, r3, #1
 8007394:	b2da      	uxtb	r2, r3
 8007396:	7a3b      	ldrb	r3, [r7, #8]
 8007398:	f362 0341 	bfi	r3, r2, #1, #1
 800739c:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 800739e:	f107 0208 	add.w	r2, r7, #8
 80073a2:	2301      	movs	r3, #1
 80073a4:	2162      	movs	r1, #98	; 0x62
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f7ff fec1 	bl	800712e <iis2mdc_write_reg>
 80073ac:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80073ae:	68fb      	ldr	r3, [r7, #12]
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	3710      	adds	r7, #16
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}

080073b8 <iis2mdc_i2c_interface_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_i2c_interface_set(stmdev_ctx_t *ctx,
                                  iis2mdc_i2c_dis_t val)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b084      	sub	sp, #16
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
 80073c0:	460b      	mov	r3, r1
 80073c2:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_c_t reg;
  int32_t ret;

  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 80073c4:	f107 0208 	add.w	r2, r7, #8
 80073c8:	2301      	movs	r3, #1
 80073ca:	2162      	movs	r1, #98	; 0x62
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f7ff fe96 	bl	80070fe <iis2mdc_read_reg>
 80073d2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d10f      	bne.n	80073fa <iis2mdc_i2c_interface_set+0x42>
  {
    reg.i2c_dis = (uint8_t)val;
 80073da:	78fb      	ldrb	r3, [r7, #3]
 80073dc:	f003 0301 	and.w	r3, r3, #1
 80073e0:	b2da      	uxtb	r2, r3
 80073e2:	7a3b      	ldrb	r3, [r7, #8]
 80073e4:	f362 1345 	bfi	r3, r2, #5, #1
 80073e8:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 80073ea:	f107 0208 	add.w	r2, r7, #8
 80073ee:	2301      	movs	r3, #1
 80073f0:	2162      	movs	r1, #98	; 0x62
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f7ff fe9b 	bl	800712e <iis2mdc_write_reg>
 80073f8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80073fa:	68fb      	ldr	r3, [r7, #12]
}
 80073fc:	4618      	mov	r0, r3
 80073fe:	3710      	adds	r7, #16
 8007400:	46bd      	mov	sp, r7
 8007402:	bd80      	pop	{r7, pc}

08007404 <mx_aton>:
  * @param  ptr: IP string buffer
  * @param  addr: IP address structure
  * @retval status 1 success, otherwise failed
  */
static int32_t mx_aton(const mx_char_t *ptr, mx_ip_addr_t *addr)
{
 8007404:	b480      	push	{r7}
 8007406:	b08f      	sub	sp, #60	; 0x3c
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
 800740c:	6039      	str	r1, [r7, #0]
  uint32_t val = 0;
 800740e:	2300      	movs	r3, #0
 8007410:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t base;
  mx_char_t c0;
  const mx_char_t *cp = ptr;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t parts[4];
  uint32_t *pp = parts;
 8007416:	f107 030c 	add.w	r3, r7, #12
 800741a:	627b      	str	r3, [r7, #36]	; 0x24
  int32_t ret = 1;
 800741c:	2301      	movs	r3, #1
 800741e:	623b      	str	r3, [r7, #32]
  int32_t done = 0;
 8007420:	2300      	movs	r3, #0
 8007422:	61fb      	str	r3, [r7, #28]

  c0 = *cp;
 8007424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007426:	781b      	ldrb	r3, [r3, #0]
 8007428:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (done == 1)
 800742c:	69fb      	ldr	r3, [r7, #28]
 800742e:	2b01      	cmp	r3, #1
 8007430:	f000 809f 	beq.w	8007572 <mx_aton+0x16e>
    {
      break;
    }

    if (!BYTE_ISDIGIT(c0))
 8007434:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007438:	2b2f      	cmp	r3, #47	; 0x2f
 800743a:	d903      	bls.n	8007444 <mx_aton+0x40>
 800743c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007440:	2b39      	cmp	r3, #57	; 0x39
 8007442:	d904      	bls.n	800744e <mx_aton+0x4a>
    {
      ret = 0;
 8007444:	2300      	movs	r3, #0
 8007446:	623b      	str	r3, [r7, #32]
      done = 1;
 8007448:	2301      	movs	r3, #1
 800744a:	61fb      	str	r3, [r7, #28]
 800744c:	e090      	b.n	8007570 <mx_aton+0x16c>
    }
    else
    {
      val = 0;
 800744e:	2300      	movs	r3, #0
 8007450:	637b      	str	r3, [r7, #52]	; 0x34
      base = 10;
 8007452:	230a      	movs	r3, #10
 8007454:	633b      	str	r3, [r7, #48]	; 0x30
      if (c0 == '0')
 8007456:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800745a:	2b30      	cmp	r3, #48	; 0x30
 800745c:	d11a      	bne.n	8007494 <mx_aton+0x90>
      {
        ++cp;
 800745e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007460:	3301      	adds	r3, #1
 8007462:	62bb      	str	r3, [r7, #40]	; 0x28
        c0 = (mx_char_t) * cp;
 8007464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007466:	781b      	ldrb	r3, [r3, #0]
 8007468:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if ((c0 == (mx_char_t)'x') || (c0 == (mx_char_t)'X'))
 800746c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007470:	2b78      	cmp	r3, #120	; 0x78
 8007472:	d003      	beq.n	800747c <mx_aton+0x78>
 8007474:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007478:	2b58      	cmp	r3, #88	; 0x58
 800747a:	d109      	bne.n	8007490 <mx_aton+0x8c>
        {
          base = 16;
 800747c:	2310      	movs	r3, #16
 800747e:	633b      	str	r3, [r7, #48]	; 0x30
          ++cp;
 8007480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007482:	3301      	adds	r3, #1
 8007484:	62bb      	str	r3, [r7, #40]	; 0x28
          c0 = (mx_char_t) * cp;
 8007486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007488:	781b      	ldrb	r3, [r3, #0]
 800748a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800748e:	e001      	b.n	8007494 <mx_aton+0x90>
        }
        else
        {
          base = 8;
 8007490:	2308      	movs	r3, #8
 8007492:	633b      	str	r3, [r7, #48]	; 0x30
        }
      }

      for (;;)
      {
        if (BYTE_ISDIGIT(c0))
 8007494:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007498:	2b2f      	cmp	r3, #47	; 0x2f
 800749a:	d914      	bls.n	80074c6 <mx_aton+0xc2>
 800749c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80074a0:	2b39      	cmp	r3, #57	; 0x39
 80074a2:	d810      	bhi.n	80074c6 <mx_aton+0xc2>
        {
          val = (val * base) + (uint32_t)c0 - (uint32_t)'0';
 80074a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074a8:	fb03 f202 	mul.w	r2, r3, r2
 80074ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80074b0:	4413      	add	r3, r2
 80074b2:	3b30      	subs	r3, #48	; 0x30
 80074b4:	637b      	str	r3, [r7, #52]	; 0x34
          ++cp;
 80074b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074b8:	3301      	adds	r3, #1
 80074ba:	62bb      	str	r3, [r7, #40]	; 0x28
          c0 = (mx_char_t) * cp;
 80074bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074be:	781b      	ldrb	r3, [r3, #0]
 80074c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80074c4:	e034      	b.n	8007530 <mx_aton+0x12c>
        }
        else if ((base == 16U) && BYTE_ISXDIGIT(c0))
 80074c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074c8:	2b10      	cmp	r3, #16
 80074ca:	d132      	bne.n	8007532 <mx_aton+0x12e>
 80074cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80074d0:	2b2f      	cmp	r3, #47	; 0x2f
 80074d2:	d903      	bls.n	80074dc <mx_aton+0xd8>
 80074d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80074d8:	2b39      	cmp	r3, #57	; 0x39
 80074da:	d90f      	bls.n	80074fc <mx_aton+0xf8>
 80074dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80074e0:	2b60      	cmp	r3, #96	; 0x60
 80074e2:	d903      	bls.n	80074ec <mx_aton+0xe8>
 80074e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80074e8:	2b66      	cmp	r3, #102	; 0x66
 80074ea:	d907      	bls.n	80074fc <mx_aton+0xf8>
 80074ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80074f0:	2b40      	cmp	r3, #64	; 0x40
 80074f2:	d91e      	bls.n	8007532 <mx_aton+0x12e>
 80074f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80074f8:	2b46      	cmp	r3, #70	; 0x46
 80074fa:	d81a      	bhi.n	8007532 <mx_aton+0x12e>
        {
          val = (val << 4) | ((uint32_t)c0 + 10U - (BYTE_ISLOWER(c0) ? (uint32_t)'a' : (uint32_t)'A'));
 80074fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074fe:	011a      	lsls	r2, r3, #4
 8007500:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8007504:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007508:	2b60      	cmp	r3, #96	; 0x60
 800750a:	d905      	bls.n	8007518 <mx_aton+0x114>
 800750c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007510:	2b7a      	cmp	r3, #122	; 0x7a
 8007512:	d801      	bhi.n	8007518 <mx_aton+0x114>
 8007514:	2361      	movs	r3, #97	; 0x61
 8007516:	e000      	b.n	800751a <mx_aton+0x116>
 8007518:	2341      	movs	r3, #65	; 0x41
 800751a:	1acb      	subs	r3, r1, r3
 800751c:	330a      	adds	r3, #10
 800751e:	4313      	orrs	r3, r2
 8007520:	637b      	str	r3, [r7, #52]	; 0x34
          ++cp;
 8007522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007524:	3301      	adds	r3, #1
 8007526:	62bb      	str	r3, [r7, #40]	; 0x28
          c0 = (mx_char_t) * cp;
 8007528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800752a:	781b      	ldrb	r3, [r3, #0]
 800752c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (BYTE_ISDIGIT(c0))
 8007530:	e7b0      	b.n	8007494 <mx_aton+0x90>
        {
          break;
        }
      }

      if (c0 == '.')
 8007532:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007536:	2b2e      	cmp	r3, #46	; 0x2e
 8007538:	d118      	bne.n	800756c <mx_aton+0x168>
         * Internet format:
         *  a.b.c.d
         *  a.b.c   (with c treated as 16 bits)
         *  a.b (with b treated as 24 bits)
         */
        if (pp >= (parts + 3))
 800753a:	f107 030c 	add.w	r3, r7, #12
 800753e:	330c      	adds	r3, #12
 8007540:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007542:	429a      	cmp	r2, r3
 8007544:	d304      	bcc.n	8007550 <mx_aton+0x14c>
        {
          ret = 0;
 8007546:	2300      	movs	r3, #0
 8007548:	623b      	str	r3, [r7, #32]
          done = 1;
 800754a:	2301      	movs	r3, #1
 800754c:	61fb      	str	r3, [r7, #28]
 800754e:	e76d      	b.n	800742c <mx_aton+0x28>
        }
        else
        {
          *pp = val;
 8007550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007552:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007554:	601a      	str	r2, [r3, #0]
          pp++;
 8007556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007558:	3304      	adds	r3, #4
 800755a:	627b      	str	r3, [r7, #36]	; 0x24
          ++cp;
 800755c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800755e:	3301      	adds	r3, #1
 8007560:	62bb      	str	r3, [r7, #40]	; 0x28
          c0 = (mx_char_t) * cp;
 8007562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007564:	781b      	ldrb	r3, [r3, #0]
 8007566:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800756a:	e75f      	b.n	800742c <mx_aton+0x28>
        }
      }
      else
      {
        done = 1;
 800756c:	2301      	movs	r3, #1
 800756e:	61fb      	str	r3, [r7, #28]
    if (done == 1)
 8007570:	e75c      	b.n	800742c <mx_aton+0x28>
      break;
 8007572:	bf00      	nop
    }
  }
  /*
   * Check for trailing characters.
   */
  if ((c0 != (mx_char_t)'\0') && (BYTE_ISSPACE((c0)) == false))
 8007574:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007578:	2b00      	cmp	r3, #0
 800757a:	d01f      	beq.n	80075bc <mx_aton+0x1b8>
 800757c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007580:	2b20      	cmp	r3, #32
 8007582:	d013      	beq.n	80075ac <mx_aton+0x1a8>
 8007584:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007588:	2b0c      	cmp	r3, #12
 800758a:	d00f      	beq.n	80075ac <mx_aton+0x1a8>
 800758c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007590:	2b0a      	cmp	r3, #10
 8007592:	d00b      	beq.n	80075ac <mx_aton+0x1a8>
 8007594:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007598:	2b0d      	cmp	r3, #13
 800759a:	d007      	beq.n	80075ac <mx_aton+0x1a8>
 800759c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80075a0:	2b09      	cmp	r3, #9
 80075a2:	d003      	beq.n	80075ac <mx_aton+0x1a8>
 80075a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80075a8:	2b0b      	cmp	r3, #11
 80075aa:	d101      	bne.n	80075b0 <mx_aton+0x1ac>
 80075ac:	2301      	movs	r3, #1
 80075ae:	e000      	b.n	80075b2 <mx_aton+0x1ae>
 80075b0:	2300      	movs	r3, #0
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d102      	bne.n	80075bc <mx_aton+0x1b8>
  {
    ret = 0;
 80075b6:	2300      	movs	r3, #0
 80075b8:	623b      	str	r3, [r7, #32]
 80075ba:	e04a      	b.n	8007652 <mx_aton+0x24e>
    /*
     * Concoct the address according to
     * the number of parts specified.
     */
  {
    switch (pp - parts + 1)
 80075bc:	f107 030c 	add.w	r3, r7, #12
 80075c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075c2:	1ad3      	subs	r3, r2, r3
 80075c4:	109b      	asrs	r3, r3, #2
 80075c6:	3301      	adds	r3, #1
 80075c8:	2b04      	cmp	r3, #4
 80075ca:	d83e      	bhi.n	800764a <mx_aton+0x246>
 80075cc:	a201      	add	r2, pc, #4	; (adr r2, 80075d4 <mx_aton+0x1d0>)
 80075ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075d2:	bf00      	nop
 80075d4:	080075e9 	.word	0x080075e9
 80075d8:	08007651 	.word	0x08007651
 80075dc:	080075ef 	.word	0x080075ef
 80075e0:	08007607 	.word	0x08007607
 80075e4:	08007627 	.word	0x08007627
    {

      case 0:
        ret = 0;          /* initial non digit */
 80075e8:	2300      	movs	r3, #0
 80075ea:	623b      	str	r3, [r7, #32]
        break;
 80075ec:	e031      	b.n	8007652 <mx_aton+0x24e>

      case 1:             /* a -- 32 bits */
        break;

      case 2:             /* a.b -- 8.24 bits */
        if (val > 0xffffffUL)
 80075ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80075f4:	d301      	bcc.n	80075fa <mx_aton+0x1f6>
        {
          ret = 0;
 80075f6:	2300      	movs	r3, #0
 80075f8:	623b      	str	r3, [r7, #32]
        }
        val |= parts[0] << 24;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	061b      	lsls	r3, r3, #24
 80075fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007600:	4313      	orrs	r3, r2
 8007602:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007604:	e025      	b.n	8007652 <mx_aton+0x24e>

      case 3:             /* a.b.c -- 8.8.16 bits */
        if (val > 0xffffU)
 8007606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007608:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800760c:	d302      	bcc.n	8007614 <mx_aton+0x210>
        {
          ret = 0;
 800760e:	2300      	movs	r3, #0
 8007610:	623b      	str	r3, [r7, #32]
          break;
 8007612:	e01e      	b.n	8007652 <mx_aton+0x24e>
        }
        val |= (parts[0] << 24) | (parts[1] << 16);
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	061a      	lsls	r2, r3, #24
 8007618:	693b      	ldr	r3, [r7, #16]
 800761a:	041b      	lsls	r3, r3, #16
 800761c:	4313      	orrs	r3, r2
 800761e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007620:	4313      	orrs	r3, r2
 8007622:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007624:	e015      	b.n	8007652 <mx_aton+0x24e>

      case 4:             /* a.b.c.d -- 8.8.8.8 bits */
        if (val > 0xffU)
 8007626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007628:	2bff      	cmp	r3, #255	; 0xff
 800762a:	d902      	bls.n	8007632 <mx_aton+0x22e>
        {
          ret = 0;
 800762c:	2300      	movs	r3, #0
 800762e:	623b      	str	r3, [r7, #32]
          break;
 8007630:	e00f      	b.n	8007652 <mx_aton+0x24e>
        }
        val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	061a      	lsls	r2, r3, #24
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	041b      	lsls	r3, r3, #16
 800763a:	431a      	orrs	r2, r3
 800763c:	697b      	ldr	r3, [r7, #20]
 800763e:	021b      	lsls	r3, r3, #8
 8007640:	4313      	orrs	r3, r2
 8007642:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007644:	4313      	orrs	r3, r2
 8007646:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007648:	e003      	b.n	8007652 <mx_aton+0x24e>
      default:
        ret = 0;
 800764a:	2300      	movs	r3, #0
 800764c:	623b      	str	r3, [r7, #32]
        break;
 800764e:	e000      	b.n	8007652 <mx_aton+0x24e>
        break;
 8007650:	bf00      	nop
    }
  }

  if (ret == 1)
 8007652:	6a3b      	ldr	r3, [r7, #32]
 8007654:	2b01      	cmp	r3, #1
 8007656:	d113      	bne.n	8007680 <mx_aton+0x27c>
  {
    if (addr != NULL)
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d010      	beq.n	8007680 <mx_aton+0x27c>
    {
      addr->addr = MX_NET_HTONL(val);
 800765e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007660:	0e1a      	lsrs	r2, r3, #24
 8007662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007664:	0a1b      	lsrs	r3, r3, #8
 8007666:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800766a:	431a      	orrs	r2, r3
 800766c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800766e:	021b      	lsls	r3, r3, #8
 8007670:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007674:	431a      	orrs	r2, r3
 8007676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007678:	061b      	lsls	r3, r3, #24
 800767a:	431a      	orrs	r2, r3
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	601a      	str	r2, [r3, #0]
    }
  }
  return ret;
 8007680:	6a3b      	ldr	r3, [r7, #32]
}
 8007682:	4618      	mov	r0, r3
 8007684:	373c      	adds	r7, #60	; 0x3c
 8007686:	46bd      	mov	sp, r7
 8007688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768c:	4770      	bx	lr
 800768e:	bf00      	nop

08007690 <mx_aton_r>:


int32_t mx_aton_r(const mx_char_t *cp)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b084      	sub	sp, #16
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
  mx_ip_addr_t val = {0};
 8007698:	2300      	movs	r3, #0
 800769a:	60bb      	str	r3, [r7, #8]
  int32_t ret = 0;
 800769c:	2300      	movs	r3, #0
 800769e:	60fb      	str	r3, [r7, #12]

  if (mx_aton(cp, &val) != 0)
 80076a0:	f107 0308 	add.w	r3, r7, #8
 80076a4:	4619      	mov	r1, r3
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f7ff feac 	bl	8007404 <mx_aton>
 80076ac:	4603      	mov	r3, r0
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d001      	beq.n	80076b6 <mx_aton_r+0x26>
  {
    ret = (int32_t) val.addr;
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80076b6:	68fb      	ldr	r3, [r7, #12]
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	3710      	adds	r7, #16
 80076bc:	46bd      	mov	sp, r7
 80076be:	bd80      	pop	{r7, pc}

080076c0 <mx_ntoa>:


mx_char_t *mx_ntoa(const mx_ip_addr_t *addr)
{
 80076c0:	b480      	push	{r7}
 80076c2:	b08b      	sub	sp, #44	; 0x2c
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
  int32_t len = 0;
 80076c8:	2300      	movs	r3, #0
 80076ca:	627b      	str	r3, [r7, #36]	; 0x24
  static mx_char_t buf[MX_MAX_IP_LEN];
  const int32_t buf_size = (int32_t)sizeof(buf);
 80076cc:	2310      	movs	r3, #16
 80076ce:	61fb      	str	r3, [r7, #28]

  const uint32_t ip_addr = addr->addr;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	613b      	str	r3, [r7, #16]
  const uint8_t *const ap = (const uint8_t *)&ip_addr;
 80076d6:	f107 0310 	add.w	r3, r7, #16
 80076da:	61bb      	str	r3, [r7, #24]

  for (uint8_t n = 0; n < (uint8_t) 4; n++)
 80076dc:	2300      	movs	r3, #0
 80076de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076e2:	e060      	b.n	80077a6 <mx_ntoa+0xe6>
  {
    mx_char_t inv[3];
    uint8_t i = 0;
 80076e4:	2300      	movs	r3, #0
 80076e6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    uint8_t val = ap[n];
 80076ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80076ee:	69ba      	ldr	r2, [r7, #24]
 80076f0:	4413      	add	r3, r2
 80076f2:	781b      	ldrb	r3, [r3, #0]
 80076f4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    do
    {
      const uint8_t rem = val % 10U;
 80076f8:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80076fc:	4b34      	ldr	r3, [pc, #208]	; (80077d0 <mx_ntoa+0x110>)
 80076fe:	fba3 1302 	umull	r1, r3, r3, r2
 8007702:	08d9      	lsrs	r1, r3, #3
 8007704:	460b      	mov	r3, r1
 8007706:	009b      	lsls	r3, r3, #2
 8007708:	440b      	add	r3, r1
 800770a:	005b      	lsls	r3, r3, #1
 800770c:	1ad3      	subs	r3, r2, r3
 800770e:	75fb      	strb	r3, [r7, #23]
      val /=  10U;
 8007710:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8007714:	4a2e      	ldr	r2, [pc, #184]	; (80077d0 <mx_ntoa+0x110>)
 8007716:	fba2 2303 	umull	r2, r3, r2, r3
 800771a:	08db      	lsrs	r3, r3, #3
 800771c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      inv[i] = (mx_char_t)'0' + rem;
 8007720:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007724:	7dfa      	ldrb	r2, [r7, #23]
 8007726:	3230      	adds	r2, #48	; 0x30
 8007728:	b2d2      	uxtb	r2, r2
 800772a:	3328      	adds	r3, #40	; 0x28
 800772c:	443b      	add	r3, r7
 800772e:	f803 2c1c 	strb.w	r2, [r3, #-28]
      i++;
 8007732:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007736:	3301      	adds	r3, #1
 8007738:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    } while (val != 0U);
 800773c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8007740:	2b00      	cmp	r3, #0
 8007742:	d1d9      	bne.n	80076f8 <mx_ntoa+0x38>

    while (i != 0U)
 8007744:	e016      	b.n	8007774 <mx_ntoa+0xb4>
    {
      i--;
 8007746:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800774a:	3b01      	subs	r3, #1
 800774c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (len < buf_size)
 8007750:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007752:	69fb      	ldr	r3, [r7, #28]
 8007754:	429a      	cmp	r2, r3
 8007756:	da0d      	bge.n	8007774 <mx_ntoa+0xb4>
      {
        buf[len] = inv[i];
 8007758:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800775c:	3328      	adds	r3, #40	; 0x28
 800775e:	443b      	add	r3, r7
 8007760:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8007764:	4a1b      	ldr	r2, [pc, #108]	; (80077d4 <mx_ntoa+0x114>)
 8007766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007768:	4413      	add	r3, r2
 800776a:	460a      	mov	r2, r1
 800776c:	701a      	strb	r2, [r3, #0]
        len++;
 800776e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007770:	3301      	adds	r3, #1
 8007772:	627b      	str	r3, [r7, #36]	; 0x24
    while (i != 0U)
 8007774:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007778:	2b00      	cmp	r3, #0
 800777a:	d1e4      	bne.n	8007746 <mx_ntoa+0x86>
      }
    }

    if ((n < 3U) && (len < buf_size))
 800777c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007780:	2b02      	cmp	r3, #2
 8007782:	d80b      	bhi.n	800779c <mx_ntoa+0xdc>
 8007784:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007786:	69fb      	ldr	r3, [r7, #28]
 8007788:	429a      	cmp	r2, r3
 800778a:	da07      	bge.n	800779c <mx_ntoa+0xdc>
    {
      buf[len] = (mx_char_t) '.';
 800778c:	4a11      	ldr	r2, [pc, #68]	; (80077d4 <mx_ntoa+0x114>)
 800778e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007790:	4413      	add	r3, r2
 8007792:	222e      	movs	r2, #46	; 0x2e
 8007794:	701a      	strb	r2, [r3, #0]
      len++;
 8007796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007798:	3301      	adds	r3, #1
 800779a:	627b      	str	r3, [r7, #36]	; 0x24
  for (uint8_t n = 0; n < (uint8_t) 4; n++)
 800779c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80077a0:	3301      	adds	r3, #1
 80077a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80077aa:	2b03      	cmp	r3, #3
 80077ac:	d99a      	bls.n	80076e4 <mx_ntoa+0x24>
    }
  }

  MX_ASSERT(len < buf_size);
 80077ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077b0:	69fb      	ldr	r3, [r7, #28]
 80077b2:	429a      	cmp	r2, r3
 80077b4:	dafb      	bge.n	80077ae <mx_ntoa+0xee>

  buf[len] = (mx_char_t) '\0';
 80077b6:	4a07      	ldr	r2, [pc, #28]	; (80077d4 <mx_ntoa+0x114>)
 80077b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ba:	4413      	add	r3, r2
 80077bc:	2200      	movs	r2, #0
 80077be:	701a      	strb	r2, [r3, #0]

  return buf;
 80077c0:	4b04      	ldr	r3, [pc, #16]	; (80077d4 <mx_ntoa+0x114>)
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	372c      	adds	r7, #44	; 0x2c
 80077c6:	46bd      	mov	sp, r7
 80077c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077cc:	4770      	bx	lr
 80077ce:	bf00      	nop
 80077d0:	cccccccd 	.word	0xcccccccd
 80077d4:	20002cd4 	.word	0x20002cd4

080077d8 <noos_sem_signal>:

#else  /* MX_WIFI_USE_CMSIS_OS */
/* No OS implementation. */

int32_t noos_sem_signal(volatile uint32_t *sem)
{
 80077d8:	b480      	push	{r7}
 80077da:	b085      	sub	sp, #20
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
  int32_t rc = 0;
 80077e0:	2300      	movs	r3, #0
 80077e2:	60fb      	str	r3, [r7, #12]

  if (sem != NULL)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d005      	beq.n	80077f6 <noos_sem_signal+0x1e>
  {
    *sem = *sem + 1U;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	1c5a      	adds	r2, r3, #1
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	601a      	str	r2, [r3, #0]
 80077f4:	e002      	b.n	80077fc <noos_sem_signal+0x24>
  }
  else
  {
    rc = -1;
 80077f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80077fa:	60fb      	str	r3, [r7, #12]
  }

  return rc;
 80077fc:	68fb      	ldr	r3, [r7, #12]
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3714      	adds	r7, #20
 8007802:	46bd      	mov	sp, r7
 8007804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007808:	4770      	bx	lr

0800780a <noos_sem_wait>:


int32_t noos_sem_wait(__IO uint32_t *sem, uint32_t timeout, void (*idle_func)(uint32_t duration))
{
 800780a:	b580      	push	{r7, lr}
 800780c:	b086      	sub	sp, #24
 800780e:	af00      	add	r7, sp, #0
 8007810:	60f8      	str	r0, [r7, #12]
 8007812:	60b9      	str	r1, [r7, #8]
 8007814:	607a      	str	r2, [r7, #4]
  int32_t rc = 0;
 8007816:	2300      	movs	r3, #0
 8007818:	617b      	str	r3, [r7, #20]
  const uint32_t tickstart = HAL_GetTick();
 800781a:	f002 ff37 	bl	800a68c <HAL_GetTick>
 800781e:	6138      	str	r0, [r7, #16]

  while ((*sem < 1U))
 8007820:	e018      	b.n	8007854 <noos_sem_wait+0x4a>
  {
    if ((HAL_GetTick() - tickstart) > timeout)
 8007822:	f002 ff33 	bl	800a68c <HAL_GetTick>
 8007826:	4602      	mov	r2, r0
 8007828:	693b      	ldr	r3, [r7, #16]
 800782a:	1ad3      	subs	r3, r2, r3
 800782c:	68ba      	ldr	r2, [r7, #8]
 800782e:	429a      	cmp	r2, r3
 8007830:	d203      	bcs.n	800783a <noos_sem_wait+0x30>
    {
      rc = -1;
 8007832:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007836:	617b      	str	r3, [r7, #20]
      break;
 8007838:	e010      	b.n	800785c <noos_sem_wait+0x52>
    }
    if (idle_func != NULL)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d009      	beq.n	8007854 <noos_sem_wait+0x4a>
    {
      (*idle_func)(timeout - (HAL_GetTick() - tickstart));
 8007840:	f002 ff24 	bl	800a68c <HAL_GetTick>
 8007844:	4602      	mov	r2, r0
 8007846:	693b      	ldr	r3, [r7, #16]
 8007848:	1a9a      	subs	r2, r3, r2
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	441a      	add	r2, r3
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	4610      	mov	r0, r2
 8007852:	4798      	blx	r3
  while ((*sem < 1U))
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d0e2      	beq.n	8007822 <noos_sem_wait+0x18>
    }
  }
  /* no timeout */
  if (rc == 0)
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d104      	bne.n	800786c <noos_sem_wait+0x62>
  {
    *sem = *sem - 1U;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	1e5a      	subs	r2, r3, #1
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	601a      	str	r2, [r3, #0]
  }
  return rc;
 800786c:	697b      	ldr	r3, [r7, #20]
}
 800786e:	4618      	mov	r0, r3
 8007870:	3718      	adds	r7, #24
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}

08007876 <noos_fifo_init>:


int32_t noos_fifo_init(noos_queue_t **qret, uint16_t len)
{
 8007876:	b580      	push	{r7, lr}
 8007878:	b084      	sub	sp, #16
 800787a:	af00      	add	r7, sp, #0
 800787c:	6078      	str	r0, [r7, #4]
 800787e:	460b      	mov	r3, r1
 8007880:	807b      	strh	r3, [r7, #2]
  int32_t rc = -1;
 8007882:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007886:	60fb      	str	r3, [r7, #12]
  noos_queue_t *q;

  if (len > 0U)
 8007888:	887b      	ldrh	r3, [r7, #2]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d030      	beq.n	80078f0 <noos_fifo_init+0x7a>
  {
    q = (noos_queue_t *)MX_WIFI_MALLOC(sizeof(noos_queue_t));
 800788e:	2014      	movs	r0, #20
 8007890:	f00d ff38 	bl	8015704 <malloc>
 8007894:	4603      	mov	r3, r0
 8007896:	60bb      	str	r3, [r7, #8]
    if (q != NULL)
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d028      	beq.n	80078f0 <noos_fifo_init+0x7a>
    {
      q->in = 0U;
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	2200      	movs	r2, #0
 80078a2:	805a      	strh	r2, [r3, #2]
      q->len = len;
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	887a      	ldrh	r2, [r7, #2]
 80078a8:	801a      	strh	r2, [r3, #0]
      q->idx = 0;
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	2200      	movs	r2, #0
 80078ae:	609a      	str	r2, [r3, #8]
      q->rd = 0;
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	2200      	movs	r2, #0
 80078b4:	60da      	str	r2, [r3, #12]
      q->wr = 0;
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	2200      	movs	r2, #0
 80078ba:	611a      	str	r2, [r3, #16]
      q->fifo = (void **) MX_WIFI_MALLOC(sizeof(void *) * (len + 1U));
 80078bc:	887b      	ldrh	r3, [r7, #2]
 80078be:	3301      	adds	r3, #1
 80078c0:	009b      	lsls	r3, r3, #2
 80078c2:	4618      	mov	r0, r3
 80078c4:	f00d ff1e 	bl	8015704 <malloc>
 80078c8:	4603      	mov	r3, r0
 80078ca:	461a      	mov	r2, r3
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	605a      	str	r2, [r3, #4]
      if (q->fifo != NULL)
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	685b      	ldr	r3, [r3, #4]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d005      	beq.n	80078e4 <noos_fifo_init+0x6e>
      {
        rc = 0;
 80078d8:	2300      	movs	r3, #0
 80078da:	60fb      	str	r3, [r7, #12]
        *qret = q;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	68ba      	ldr	r2, [r7, #8]
 80078e0:	601a      	str	r2, [r3, #0]
 80078e2:	e005      	b.n	80078f0 <noos_fifo_init+0x7a>
      }
      else
      {
        MX_WIFI_FREE(q);
 80078e4:	68b8      	ldr	r0, [r7, #8]
 80078e6:	f00d ff15 	bl	8015714 <free>
        *qret = NULL;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2200      	movs	r2, #0
 80078ee:	601a      	str	r2, [r3, #0]
      }
    }
  }
  return rc;
 80078f0:	68fb      	ldr	r3, [r7, #12]
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	3710      	adds	r7, #16
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}

080078fa <noos_fifo_deinit>:


void noos_fifo_deinit(noos_queue_t *q)
{
 80078fa:	b580      	push	{r7, lr}
 80078fc:	b082      	sub	sp, #8
 80078fe:	af00      	add	r7, sp, #0
 8007900:	6078      	str	r0, [r7, #4]
  if (q != NULL)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d007      	beq.n	8007918 <noos_fifo_deinit+0x1e>
  {
    MX_WIFI_FREE(q->fifo);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	685b      	ldr	r3, [r3, #4]
 800790c:	4618      	mov	r0, r3
 800790e:	f00d ff01 	bl	8015714 <free>
    MX_WIFI_FREE(q);
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f00d fefe 	bl	8015714 <free>
  }
}
 8007918:	bf00      	nop
 800791a:	3708      	adds	r7, #8
 800791c:	46bd      	mov	sp, r7
 800791e:	bd80      	pop	{r7, pc}

08007920 <noos_fifo_push>:

int32_t noos_fifo_push(noos_queue_t *queue, void *p, uint32_t timeout, void (*idle_func)(uint32_t duration))
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b086      	sub	sp, #24
 8007924:	af00      	add	r7, sp, #0
 8007926:	60f8      	str	r0, [r7, #12]
 8007928:	60b9      	str	r1, [r7, #8]
 800792a:	607a      	str	r2, [r7, #4]
 800792c:	603b      	str	r3, [r7, #0]
  int32_t rc = 0;
 800792e:	2300      	movs	r3, #0
 8007930:	617b      	str	r3, [r7, #20]
  const uint32_t tickstart = HAL_GetTick();
 8007932:	f002 feab 	bl	800a68c <HAL_GetTick>
 8007936:	6138      	str	r0, [r7, #16]

  while (queue->in == queue->len)
 8007938:	e018      	b.n	800796c <noos_fifo_push+0x4c>
  {
    if ((HAL_GetTick() - tickstart) > timeout)
 800793a:	f002 fea7 	bl	800a68c <HAL_GetTick>
 800793e:	4602      	mov	r2, r0
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	1ad3      	subs	r3, r2, r3
 8007944:	687a      	ldr	r2, [r7, #4]
 8007946:	429a      	cmp	r2, r3
 8007948:	d203      	bcs.n	8007952 <noos_fifo_push+0x32>
    {
      rc = -1;
 800794a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800794e:	617b      	str	r3, [r7, #20]
      break;
 8007950:	e012      	b.n	8007978 <noos_fifo_push+0x58>
    }
    if (NULL != idle_func)
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d009      	beq.n	800796c <noos_fifo_push+0x4c>
    {
      (*idle_func)(timeout - (HAL_GetTick() - tickstart));
 8007958:	f002 fe98 	bl	800a68c <HAL_GetTick>
 800795c:	4602      	mov	r2, r0
 800795e:	693b      	ldr	r3, [r7, #16]
 8007960:	1a9a      	subs	r2, r3, r2
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	441a      	add	r2, r3
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	4610      	mov	r0, r2
 800796a:	4798      	blx	r3
  while (queue->in == queue->len)
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	885a      	ldrh	r2, [r3, #2]
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	881b      	ldrh	r3, [r3, #0]
 8007974:	429a      	cmp	r2, r3
 8007976:	d0e0      	beq.n	800793a <noos_fifo_push+0x1a>
    }
  }
  if (0 == rc)
 8007978:	697b      	ldr	r3, [r7, #20]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d119      	bne.n	80079b2 <noos_fifo_push+0x92>
  {
    queue->in++;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	885b      	ldrh	r3, [r3, #2]
 8007982:	3301      	adds	r3, #1
 8007984:	b29a      	uxth	r2, r3
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	805a      	strh	r2, [r3, #2]
    queue->fifo[queue->wr] = p;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	685a      	ldr	r2, [r3, #4]
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	691b      	ldr	r3, [r3, #16]
 8007992:	009b      	lsls	r3, r3, #2
 8007994:	4413      	add	r3, r2
 8007996:	68ba      	ldr	r2, [r7, #8]
 8007998:	601a      	str	r2, [r3, #0]
    queue->wr = (queue->wr + 1U) % queue->len;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	691b      	ldr	r3, [r3, #16]
 800799e:	3301      	adds	r3, #1
 80079a0:	68fa      	ldr	r2, [r7, #12]
 80079a2:	8812      	ldrh	r2, [r2, #0]
 80079a4:	fbb3 f1f2 	udiv	r1, r3, r2
 80079a8:	fb01 f202 	mul.w	r2, r1, r2
 80079ac:	1a9a      	subs	r2, r3, r2
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	611a      	str	r2, [r3, #16]
  }
  return rc;
 80079b2:	697b      	ldr	r3, [r7, #20]
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	3718      	adds	r7, #24
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}

080079bc <noos_fifo_pop>:


void *noos_fifo_pop(noos_queue_t *queue, uint32_t timeout, void (*idle_func)(uint32_t duration))
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b088      	sub	sp, #32
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	60f8      	str	r0, [r7, #12]
 80079c4:	60b9      	str	r1, [r7, #8]
 80079c6:	607a      	str	r2, [r7, #4]
  int32_t rc = 0;
 80079c8:	2300      	movs	r3, #0
 80079ca:	61fb      	str	r3, [r7, #28]
  const uint32_t tickstart = HAL_GetTick();
 80079cc:	f002 fe5e 	bl	800a68c <HAL_GetTick>
 80079d0:	6178      	str	r0, [r7, #20]
  void *p = NULL;
 80079d2:	2300      	movs	r3, #0
 80079d4:	61bb      	str	r3, [r7, #24]

  while (0U == queue->in)
 80079d6:	e018      	b.n	8007a0a <noos_fifo_pop+0x4e>
  {
    if ((HAL_GetTick() - tickstart) > timeout)
 80079d8:	f002 fe58 	bl	800a68c <HAL_GetTick>
 80079dc:	4602      	mov	r2, r0
 80079de:	697b      	ldr	r3, [r7, #20]
 80079e0:	1ad3      	subs	r3, r2, r3
 80079e2:	68ba      	ldr	r2, [r7, #8]
 80079e4:	429a      	cmp	r2, r3
 80079e6:	d203      	bcs.n	80079f0 <noos_fifo_pop+0x34>
    {
      rc = -1;
 80079e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80079ec:	61fb      	str	r3, [r7, #28]
      break;
 80079ee:	e010      	b.n	8007a12 <noos_fifo_pop+0x56>
    }
    if (NULL != idle_func)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d009      	beq.n	8007a0a <noos_fifo_pop+0x4e>
    {
      (*idle_func)(timeout - (HAL_GetTick() - tickstart));
 80079f6:	f002 fe49 	bl	800a68c <HAL_GetTick>
 80079fa:	4602      	mov	r2, r0
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	1a9a      	subs	r2, r3, r2
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	441a      	add	r2, r3
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	4610      	mov	r0, r2
 8007a08:	4798      	blx	r3
  while (0U == queue->in)
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	885b      	ldrh	r3, [r3, #2]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d0e2      	beq.n	80079d8 <noos_fifo_pop+0x1c>
    }
  }

  if (0 == rc)
 8007a12:	69fb      	ldr	r3, [r7, #28]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d119      	bne.n	8007a4c <noos_fifo_pop+0x90>
  {
    p = queue->fifo[queue->rd];
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	685a      	ldr	r2, [r3, #4]
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	68db      	ldr	r3, [r3, #12]
 8007a20:	009b      	lsls	r3, r3, #2
 8007a22:	4413      	add	r3, r2
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	61bb      	str	r3, [r7, #24]
    queue->rd = (queue->rd + 1U) % queue->len;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	68db      	ldr	r3, [r3, #12]
 8007a2c:	3301      	adds	r3, #1
 8007a2e:	68fa      	ldr	r2, [r7, #12]
 8007a30:	8812      	ldrh	r2, [r2, #0]
 8007a32:	fbb3 f1f2 	udiv	r1, r3, r2
 8007a36:	fb01 f202 	mul.w	r2, r1, r2
 8007a3a:	1a9a      	subs	r2, r3, r2
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	60da      	str	r2, [r3, #12]
    queue->in--;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	885b      	ldrh	r3, [r3, #2]
 8007a44:	3b01      	subs	r3, #1
 8007a46:	b29a      	uxth	r2, r3
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	805a      	strh	r2, [r3, #2]
  }

  return p;
 8007a4c:	69bb      	ldr	r3, [r7, #24]
}
 8007a4e:	4618      	mov	r0, r3
 8007a50:	3720      	adds	r7, #32
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bd80      	pop	{r7, pc}

08007a56 <mx_wifi_hci_pkt_verify>:
static bool mx_wifi_hci_pkt_verify(const uint8_t *data, uint32_t len);


/* Private functions ---------------------------------------------------------*/
static bool mx_wifi_hci_pkt_verify(const uint8_t *data, uint32_t len)
{
 8007a56:	b480      	push	{r7}
 8007a58:	b083      	sub	sp, #12
 8007a5a:	af00      	add	r7, sp, #0
 8007a5c:	6078      	str	r0, [r7, #4]
 8007a5e:	6039      	str	r1, [r7, #0]
  (void)data;
  (void)len;
  /* Here each UART slip frame or SPI frame as a HCI packet. */
  return true;
 8007a60:	2301      	movs	r3, #1
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	370c      	adds	r7, #12
 8007a66:	46bd      	mov	sp, r7
 8007a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6c:	4770      	bx	lr
	...

08007a70 <mx_wifi_hci_init>:


/* Global functions ----------------------------------------------------------*/
int32_t mx_wifi_hci_init(hci_send_func_t low_level_send)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b082      	sub	sp, #8
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
  TclOutputFunc = low_level_send;
 8007a78:	4a05      	ldr	r2, [pc, #20]	; (8007a90 <mx_wifi_hci_init+0x20>)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6013      	str	r3, [r2, #0]
  FIFO_INIT(HciPacketFifo, MX_WIFI_MAX_RX_BUFFER_COUNT);
 8007a7e:	2102      	movs	r1, #2
 8007a80:	4804      	ldr	r0, [pc, #16]	; (8007a94 <mx_wifi_hci_init+0x24>)
 8007a82:	f7ff fef8 	bl	8007876 <noos_fifo_init>

  return 0;
 8007a86:	2300      	movs	r3, #0
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	3708      	adds	r7, #8
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd80      	pop	{r7, pc}
 8007a90:	20002ce4 	.word	0x20002ce4
 8007a94:	20002ce8 	.word	0x20002ce8

08007a98 <mx_wifi_hci_deinit>:


int32_t mx_wifi_hci_deinit(void)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	af00      	add	r7, sp, #0
  FIFO_DEINIT(HciPacketFifo);
 8007a9c:	4b03      	ldr	r3, [pc, #12]	; (8007aac <mx_wifi_hci_deinit+0x14>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	f7ff ff2a 	bl	80078fa <noos_fifo_deinit>
  return 0;
 8007aa6:	2300      	movs	r3, #0
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	bd80      	pop	{r7, pc}
 8007aac:	20002ce8 	.word	0x20002ce8

08007ab0 <mx_wifi_hci_send>:


int32_t mx_wifi_hci_send(uint8_t *payload, uint16_t len)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b084      	sub	sp, #16
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
 8007ab8:	460b      	mov	r3, r1
 8007aba:	807b      	strh	r3, [r7, #2]
  int32_t ret = 0;
 8007abc:	2300      	movs	r3, #0
 8007abe:	60fb      	str	r3, [r7, #12]
  uint16_t sent = 0;
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	817b      	strh	r3, [r7, #10]

#if (MX_WIFI_USE_SPI == 1)
  sent = TclOutputFunc(payload, len);
 8007ac4:	4b0c      	ldr	r3, [pc, #48]	; (8007af8 <mx_wifi_hci_send+0x48>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	887a      	ldrh	r2, [r7, #2]
 8007aca:	4611      	mov	r1, r2
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	4798      	blx	r3
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	817b      	strh	r3, [r7, #10]
  if (len != sent)
 8007ad4:	887a      	ldrh	r2, [r7, #2]
 8007ad6:	897b      	ldrh	r3, [r7, #10]
 8007ad8:	429a      	cmp	r2, r3
 8007ada:	d007      	beq.n	8007aec <mx_wifi_hci_send+0x3c>
  {
    DEBUG_ERROR("tcl_output(spi) error sent=%d !\n", sent);
 8007adc:	897b      	ldrh	r3, [r7, #10]
 8007ade:	4619      	mov	r1, r3
 8007ae0:	4806      	ldr	r0, [pc, #24]	; (8007afc <mx_wifi_hci_send+0x4c>)
 8007ae2:	f00f fba7 	bl	8017234 <iprintf>
    ret = -1;
 8007ae6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007aea:	60fb      	str	r3, [r7, #12]
    DEBUG_ERROR("Create slip frame error!\n");
    ret = -2;
  }
#endif /* (MX_WIFI_USE_SPI == 1) */

  return ret;
 8007aec:	68fb      	ldr	r3, [r7, #12]
}
 8007aee:	4618      	mov	r0, r3
 8007af0:	3710      	adds	r7, #16
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}
 8007af6:	bf00      	nop
 8007af8:	20002ce4 	.word	0x20002ce4
 8007afc:	0801b298 	.word	0x0801b298

08007b00 <mx_wifi_hci_recv>:


mx_buf_t *mx_wifi_hci_recv(uint32_t timeout)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b084      	sub	sp, #16
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
  mx_buf_t *const nbuf = (mx_buf_t *)FIFO_POP(HciPacketFifo, timeout, process_txrx_poll);
 8007b08:	4b06      	ldr	r3, [pc, #24]	; (8007b24 <mx_wifi_hci_recv+0x24>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	4a06      	ldr	r2, [pc, #24]	; (8007b28 <mx_wifi_hci_recv+0x28>)
 8007b0e:	6879      	ldr	r1, [r7, #4]
 8007b10:	4618      	mov	r0, r3
 8007b12:	f7ff ff53 	bl	80079bc <noos_fifo_pop>
 8007b16:	60f8      	str	r0, [r7, #12]
#endif /* 0 */

    MX_STAT(out_fifo);
  }

  return nbuf;
 8007b18:	68fb      	ldr	r3, [r7, #12]
}
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	3710      	adds	r7, #16
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}
 8007b22:	bf00      	nop
 8007b24:	20002ce8 	.word	0x20002ce8
 8007b28:	0800a191 	.word	0x0800a191

08007b2c <mx_wifi_hci_free>:


void mx_wifi_hci_free(mx_buf_t *nbuf)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b082      	sub	sp, #8
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
  if (NULL != nbuf)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d002      	beq.n	8007b40 <mx_wifi_hci_free+0x14>
  {
    (void) MX_NET_BUFFER_FREE(nbuf);
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f00d fdea 	bl	8015714 <free>

    MX_STAT(free);
  }
}
 8007b40:	bf00      	nop
 8007b42:	3708      	adds	r7, #8
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bd80      	pop	{r7, pc}

08007b48 <mx_wifi_hci_input>:

/**
  * @brief LOW LEVEL INTERFACE
  */
void mx_wifi_hci_input(mx_buf_t *netbuf)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b084      	sub	sp, #16
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
  if (NULL != netbuf)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d02a      	beq.n	8007bac <mx_wifi_hci_input+0x64>
  {
    uint8_t *data = MX_NET_BUFFER_PAYLOAD(netbuf);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	685b      	ldr	r3, [r3, #4]
 8007b5a:	3308      	adds	r3, #8
 8007b5c:	687a      	ldr	r2, [r7, #4]
 8007b5e:	4413      	add	r3, r2
 8007b60:	60fb      	str	r3, [r7, #12]
    uint32_t len  = MX_NET_BUFFER_GET_PAYLOAD_SIZE(netbuf);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	60bb      	str	r3, [r7, #8]
    {
      DEBUG_LOG("%02" PRIx32 " ", (uint32_t)data[i]);
    }
#endif /* 0 */

    if ((NULL != data) && (len > 0))
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d01e      	beq.n	8007bac <mx_wifi_hci_input+0x64>
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d01b      	beq.n	8007bac <mx_wifi_hci_input+0x64>
    {
      if (mx_wifi_hci_pkt_verify(data, len))
 8007b74:	68b9      	ldr	r1, [r7, #8]
 8007b76:	68f8      	ldr	r0, [r7, #12]
 8007b78:	f7ff ff6d 	bl	8007a56 <mx_wifi_hci_pkt_verify>
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d011      	beq.n	8007ba6 <mx_wifi_hci_input+0x5e>
      {
        if (FIFO_OK != FIFO_PUSH(HciPacketFifo, netbuf, WAIT_FOREVER, NULL))
 8007b82:	4b0c      	ldr	r3, [pc, #48]	; (8007bb4 <mx_wifi_hci_input+0x6c>)
 8007b84:	6818      	ldr	r0, [r3, #0]
 8007b86:	2300      	movs	r3, #0
 8007b88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007b8c:	6879      	ldr	r1, [r7, #4]
 8007b8e:	f7ff fec7 	bl	8007920 <noos_fifo_push>
 8007b92:	4603      	mov	r3, r0
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d009      	beq.n	8007bac <mx_wifi_hci_input+0x64>
        {
          DEBUG_ERROR("push tcl input queue err!\n");
 8007b98:	4807      	ldr	r0, [pc, #28]	; (8007bb8 <mx_wifi_hci_input+0x70>)
 8007b9a:	f00f fbb9 	bl	8017310 <puts>
          MX_NET_BUFFER_FREE(netbuf);
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f00d fdb8 	bl	8015714 <free>

        MX_STAT(free);
      }
    }
  }
}
 8007ba4:	e002      	b.n	8007bac <mx_wifi_hci_input+0x64>
        MX_NET_BUFFER_FREE(netbuf);
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f00d fdb4 	bl	8015714 <free>
}
 8007bac:	bf00      	nop
 8007bae:	3710      	adds	r7, #16
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	bd80      	pop	{r7, pc}
 8007bb4:	20002ce8 	.word	0x20002ce8
 8007bb8:	0801b2bc 	.word	0x0801b2bc

08007bbc <byte_pointer_add_signed_offset>:
static uint16_t mpic_get_api_id(const uint8_t Buffer[]);
static void mipc_event(mx_buf_t *netbuf);


static uint8_t *byte_pointer_add_signed_offset(uint8_t *BytePointer, int32_t Offset)
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b083      	sub	sp, #12
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
 8007bc4:	6039      	str	r1, [r7, #0]
  return BytePointer + Offset;
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	687a      	ldr	r2, [r7, #4]
 8007bca:	4413      	add	r3, r2
}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	370c      	adds	r7, #12
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd6:	4770      	bx	lr

08007bd8 <get_new_req_id>:


/* unique sequence number */
static uint32_t get_new_req_id(void)
{
 8007bd8:	b480      	push	{r7}
 8007bda:	af00      	add	r7, sp, #0
  static uint32_t id = 1;
  return id++;
 8007bdc:	4b04      	ldr	r3, [pc, #16]	; (8007bf0 <get_new_req_id+0x18>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	1c5a      	adds	r2, r3, #1
 8007be2:	4903      	ldr	r1, [pc, #12]	; (8007bf0 <get_new_req_id+0x18>)
 8007be4:	600a      	str	r2, [r1, #0]
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	46bd      	mov	sp, r7
 8007bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bee:	4770      	bx	lr
 8007bf0:	200000f0 	.word	0x200000f0

08007bf4 <mpic_get_req_id>:


static uint32_t mpic_get_req_id(const uint8_t Buffer[])
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	b083      	sub	sp, #12
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
  return *((const uint32_t *) &Buffer[MIPC_PKT_REQ_ID_OFFSET]);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	370c      	adds	r7, #12
 8007c04:	46bd      	mov	sp, r7
 8007c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0a:	4770      	bx	lr

08007c0c <mpic_get_api_id>:


static uint16_t mpic_get_api_id(const uint8_t Buffer[])
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b083      	sub	sp, #12
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
  return *((const uint16_t *) &Buffer[MIPC_PKT_API_ID_OFFSET]);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	3304      	adds	r3, #4
 8007c18:	881b      	ldrh	r3, [r3, #0]
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	370c      	adds	r7, #12
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c24:	4770      	bx	lr
	...

08007c28 <mipc_event>:


static void mipc_event(mx_buf_t *netbuf)
{
 8007c28:	b590      	push	{r4, r7, lr}
 8007c2a:	b08b      	sub	sp, #44	; 0x2c
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
    /* WiFi */
    {MIPC_API_WIFI_STATUS_EVENT,        mapi_wifi_status_event_callback},
    {MIPC_API_WIFI_BYPASS_INPUT_EVENT,  mapi_wifi_netlink_input_callback}
  };

  if (NULL != netbuf)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	f000 8098 	beq.w	8007d68 <mipc_event+0x140>
  {
    uint8_t *const buffer_in = MX_NET_BUFFER_PAYLOAD(netbuf);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	685b      	ldr	r3, [r3, #4]
 8007c3c:	3308      	adds	r3, #8
 8007c3e:	687a      	ldr	r2, [r7, #4]
 8007c40:	4413      	add	r3, r2
 8007c42:	623b      	str	r3, [r7, #32]
    const uint32_t buffer_in_size = MX_NET_BUFFER_GET_PAYLOAD_SIZE(netbuf);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	61fb      	str	r3, [r7, #28]

    if ((NULL != buffer_in) && (buffer_in_size >= MIPC_PKT_MIN_SIZE))
 8007c4a:	6a3b      	ldr	r3, [r7, #32]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	f000 8086 	beq.w	8007d5e <mipc_event+0x136>
 8007c52:	69fb      	ldr	r3, [r7, #28]
 8007c54:	2b05      	cmp	r3, #5
 8007c56:	f240 8082 	bls.w	8007d5e <mipc_event+0x136>
    {
      const uint32_t req_id = mpic_get_req_id(buffer_in);
 8007c5a:	6a38      	ldr	r0, [r7, #32]
 8007c5c:	f7ff ffca 	bl	8007bf4 <mpic_get_req_id>
 8007c60:	61b8      	str	r0, [r7, #24]
      const uint16_t api_id = mpic_get_api_id(buffer_in);
 8007c62:	6a38      	ldr	r0, [r7, #32]
 8007c64:	f7ff ffd2 	bl	8007c0c <mpic_get_api_id>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	82fb      	strh	r3, [r7, #22]

      DEBUG_LOG("%-15s(): req_id: 0x%08" PRIx32 ", api_id: 0x%04" PRIx32 "\n",
                __FUNCTION__, req_id, (uint32_t)api_id);

      if ((0 == (api_id & MIPC_API_EVENT_BASE)) && (MIPC_REQ_ID_NONE != req_id))
 8007c6c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	db47      	blt.n	8007d04 <mipc_event+0xdc>
 8007c74:	69bb      	ldr	r3, [r7, #24]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d044      	beq.n	8007d04 <mipc_event+0xdc>
      {
        /* The command response must match pending req id. */
        if (PendingRequest.req_id == req_id)
 8007c7a:	4b3d      	ldr	r3, [pc, #244]	; (8007d70 <mipc_event+0x148>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	69ba      	ldr	r2, [r7, #24]
 8007c80:	429a      	cmp	r2, r3
 8007c82:	d13b      	bne.n	8007cfc <mipc_event+0xd4>
        {
          /* return params */
          if ((PendingRequest.rbuffer_size != NULL) && (*PendingRequest.rbuffer_size > 0) &&
 8007c84:	4b3a      	ldr	r3, [pc, #232]	; (8007d70 <mipc_event+0x148>)
 8007c86:	689b      	ldr	r3, [r3, #8]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d029      	beq.n	8007ce0 <mipc_event+0xb8>
 8007c8c:	4b38      	ldr	r3, [pc, #224]	; (8007d70 <mipc_event+0x148>)
 8007c8e:	689b      	ldr	r3, [r3, #8]
 8007c90:	881b      	ldrh	r3, [r3, #0]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d024      	beq.n	8007ce0 <mipc_event+0xb8>
              (NULL != PendingRequest.rbuffer))
 8007c96:	4b36      	ldr	r3, [pc, #216]	; (8007d70 <mipc_event+0x148>)
 8007c98:	68db      	ldr	r3, [r3, #12]
          if ((PendingRequest.rbuffer_size != NULL) && (*PendingRequest.rbuffer_size > 0) &&
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d020      	beq.n	8007ce0 <mipc_event+0xb8>
          {
            *(PendingRequest.rbuffer_size) = *PendingRequest.rbuffer_size < (buffer_in_size - MIPC_PKT_MIN_SIZE) ? \
 8007c9e:	4b34      	ldr	r3, [pc, #208]	; (8007d70 <mipc_event+0x148>)
 8007ca0:	689b      	ldr	r3, [r3, #8]
 8007ca2:	881b      	ldrh	r3, [r3, #0]
 8007ca4:	461a      	mov	r2, r3
 8007ca6:	69fb      	ldr	r3, [r7, #28]
 8007ca8:	3b06      	subs	r3, #6
 8007caa:	429a      	cmp	r2, r3
 8007cac:	d203      	bcs.n	8007cb6 <mipc_event+0x8e>
                                             *PendingRequest.rbuffer_size : (uint16_t)(buffer_in_size - MIPC_PKT_MIN_SIZE);
 8007cae:	4b30      	ldr	r3, [pc, #192]	; (8007d70 <mipc_event+0x148>)
 8007cb0:	689b      	ldr	r3, [r3, #8]
            *(PendingRequest.rbuffer_size) = *PendingRequest.rbuffer_size < (buffer_in_size - MIPC_PKT_MIN_SIZE) ? \
 8007cb2:	881b      	ldrh	r3, [r3, #0]
 8007cb4:	e003      	b.n	8007cbe <mipc_event+0x96>
                                             *PendingRequest.rbuffer_size : (uint16_t)(buffer_in_size - MIPC_PKT_MIN_SIZE);
 8007cb6:	69fb      	ldr	r3, [r7, #28]
 8007cb8:	b29b      	uxth	r3, r3
            *(PendingRequest.rbuffer_size) = *PendingRequest.rbuffer_size < (buffer_in_size - MIPC_PKT_MIN_SIZE) ? \
 8007cba:	3b06      	subs	r3, #6
 8007cbc:	b29b      	uxth	r3, r3
 8007cbe:	4a2c      	ldr	r2, [pc, #176]	; (8007d70 <mipc_event+0x148>)
 8007cc0:	6892      	ldr	r2, [r2, #8]
 8007cc2:	8013      	strh	r3, [r2, #0]
            (void)memcpy(PendingRequest.rbuffer, byte_pointer_add_signed_offset(buffer_in, MIPC_PKT_PARAMS_OFFSET),
 8007cc4:	4b2a      	ldr	r3, [pc, #168]	; (8007d70 <mipc_event+0x148>)
 8007cc6:	68dc      	ldr	r4, [r3, #12]
 8007cc8:	2106      	movs	r1, #6
 8007cca:	6a38      	ldr	r0, [r7, #32]
 8007ccc:	f7ff ff76 	bl	8007bbc <byte_pointer_add_signed_offset>
 8007cd0:	4601      	mov	r1, r0
                         *PendingRequest.rbuffer_size);
 8007cd2:	4b27      	ldr	r3, [pc, #156]	; (8007d70 <mipc_event+0x148>)
 8007cd4:	689b      	ldr	r3, [r3, #8]
 8007cd6:	881b      	ldrh	r3, [r3, #0]
            (void)memcpy(PendingRequest.rbuffer, byte_pointer_add_signed_offset(buffer_in, MIPC_PKT_PARAMS_OFFSET),
 8007cd8:	461a      	mov	r2, r3
 8007cda:	4620      	mov	r0, r4
 8007cdc:	f00f fc3d 	bl	801755a <memcpy>
          }
          /* printf("Signal for %d\n",pending_request.req_id); */
          PendingRequest.req_id = MIPC_REQ_ID_RESET_VAL;
 8007ce0:	4b23      	ldr	r3, [pc, #140]	; (8007d70 <mipc_event+0x148>)
 8007ce2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007ce6:	601a      	str	r2, [r3, #0]
          if (SEM_OK != SEM_SIGNAL(PendingRequest.resp_flag))
 8007ce8:	4822      	ldr	r0, [pc, #136]	; (8007d74 <mipc_event+0x14c>)
 8007cea:	f7ff fd75 	bl	80077d8 <noos_sem_signal>
 8007cee:	4603      	mov	r3, r0
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d003      	beq.n	8007cfc <mipc_event+0xd4>
          {
            DEBUG_ERROR("Failed to signal command response\n");
 8007cf4:	4820      	ldr	r0, [pc, #128]	; (8007d78 <mipc_event+0x150>)
 8007cf6:	f00f fb0b 	bl	8017310 <puts>
            MX_ASSERT(false);
 8007cfa:	e7fe      	b.n	8007cfa <mipc_event+0xd2>
        else
        {
          DEBUG_LOG("response req_id: 0x%08"PRIx32" not match pending req_id: 0x%08" PRIx32 "!\n",
                    req_id, PendingRequest.req_id);
        }
        mx_wifi_hci_free(netbuf);
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f7ff ff15 	bl	8007b2c <mx_wifi_hci_free>
    {
 8007d02:	e030      	b.n	8007d66 <mipc_event+0x13e>
      }
      else /* event callback */
      {
        const uint32_t event_table_count = sizeof(event_table) / sizeof(event_table[0]);
 8007d04:	2304      	movs	r3, #4
 8007d06:	613b      	str	r3, [r7, #16]
        uint32_t i;

        for (i = 0; i < event_table_count; i++)
 8007d08:	2300      	movs	r3, #0
 8007d0a:	627b      	str	r3, [r7, #36]	; 0x24
 8007d0c:	e016      	b.n	8007d3c <mipc_event+0x114>
        {
          if (event_table[i].api_id == api_id)
 8007d0e:	4a1b      	ldr	r2, [pc, #108]	; (8007d7c <mipc_event+0x154>)
 8007d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d12:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 8007d16:	8afa      	ldrh	r2, [r7, #22]
 8007d18:	429a      	cmp	r2, r3
 8007d1a:	d10c      	bne.n	8007d36 <mipc_event+0x10e>
          {
            const event_callback_t callback = event_table[i].callback;
 8007d1c:	4a17      	ldr	r2, [pc, #92]	; (8007d7c <mipc_event+0x154>)
 8007d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d20:	00db      	lsls	r3, r3, #3
 8007d22:	4413      	add	r3, r2
 8007d24:	685b      	ldr	r3, [r3, #4]
 8007d26:	60fb      	str	r3, [r7, #12]
            if (NULL != callback)
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d003      	beq.n	8007d36 <mipc_event+0x10e>
            {
              /* DEBUG_LOG("callback with %p\n", buffer_in); */
              callback(netbuf);
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	4798      	blx	r3
              break;
 8007d34:	e006      	b.n	8007d44 <mipc_event+0x11c>
        for (i = 0; i < event_table_count; i++)
 8007d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d38:	3301      	adds	r3, #1
 8007d3a:	627b      	str	r3, [r7, #36]	; 0x24
 8007d3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d3e:	693b      	ldr	r3, [r7, #16]
 8007d40:	429a      	cmp	r2, r3
 8007d42:	d3e4      	bcc.n	8007d0e <mipc_event+0xe6>
            }
          }
        }
        if (i == event_table_count)
 8007d44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d46:	693b      	ldr	r3, [r7, #16]
 8007d48:	429a      	cmp	r2, r3
 8007d4a:	d10c      	bne.n	8007d66 <mipc_event+0x13e>
        {
          DEBUG_ERROR("Unknown event: 0x%04" PRIx32 "!\n", (uint32_t)api_id);
 8007d4c:	8afb      	ldrh	r3, [r7, #22]
 8007d4e:	4619      	mov	r1, r3
 8007d50:	480b      	ldr	r0, [pc, #44]	; (8007d80 <mipc_event+0x158>)
 8007d52:	f00f fa6f 	bl	8017234 <iprintf>
          mx_wifi_hci_free(netbuf);
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f7ff fee8 	bl	8007b2c <mx_wifi_hci_free>
    {
 8007d5c:	e003      	b.n	8007d66 <mipc_event+0x13e>
      }
    }
    else
    {
      DEBUG_LOG("Unknown buffer content\n");
      mx_wifi_hci_free(netbuf);
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f7ff fee4 	bl	8007b2c <mx_wifi_hci_free>
    }
  }
}
 8007d64:	e000      	b.n	8007d68 <mipc_event+0x140>
    {
 8007d66:	bf00      	nop
}
 8007d68:	bf00      	nop
 8007d6a:	372c      	adds	r7, #44	; 0x2c
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd90      	pop	{r4, r7, pc}
 8007d70:	20002cec 	.word	0x20002cec
 8007d74:	20002cf0 	.word	0x20002cf0
 8007d78:	0801b2d8 	.word	0x0801b2d8
 8007d7c:	0818dbe8 	.word	0x0818dbe8
 8007d80:	0801b2fc 	.word	0x0801b2fc

08007d84 <mipc_init>:
/*******************************************************************************
  * IPC API implementations for mx_wifi over HCI
  ******************************************************************************/

int32_t mipc_init(mipc_send_func_t ipc_send)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b084      	sub	sp, #16
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
  int32_t ret;

  PendingRequest.req_id = MIPC_REQ_ID_RESET_VAL;
 8007d8c:	4b07      	ldr	r3, [pc, #28]	; (8007dac <mipc_init+0x28>)
 8007d8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007d92:	601a      	str	r2, [r3, #0]
  SEM_INIT(PendingRequest.resp_flag, 1);
 8007d94:	4b05      	ldr	r3, [pc, #20]	; (8007dac <mipc_init+0x28>)
 8007d96:	2200      	movs	r2, #0
 8007d98:	605a      	str	r2, [r3, #4]

  ret = mx_wifi_hci_init(ipc_send);
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f7ff fe68 	bl	8007a70 <mx_wifi_hci_init>
 8007da0:	60f8      	str	r0, [r7, #12]

  return ret;
 8007da2:	68fb      	ldr	r3, [r7, #12]
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	3710      	adds	r7, #16
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bd80      	pop	{r7, pc}
 8007dac:	20002cec 	.word	0x20002cec

08007db0 <mipc_deinit>:


int32_t mipc_deinit(void)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b082      	sub	sp, #8
 8007db4:	af00      	add	r7, sp, #0
  int32_t ret;

  SEM_DEINIT(PendingRequest.resp_flag);

  ret = mx_wifi_hci_deinit();
 8007db6:	f7ff fe6f 	bl	8007a98 <mx_wifi_hci_deinit>
 8007dba:	6078      	str	r0, [r7, #4]

  return ret;
 8007dbc:	687b      	ldr	r3, [r7, #4]
}
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	3708      	adds	r7, #8
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}
	...

08007dc8 <mipc_request>:

int32_t mipc_request(uint16_t api_id,
                     uint8_t *cparams, uint16_t cparams_size,
                     uint8_t *rbuffer, uint16_t *rbuffer_size,
                     uint32_t timeout_ms)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b088      	sub	sp, #32
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	60b9      	str	r1, [r7, #8]
 8007dd0:	607b      	str	r3, [r7, #4]
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	81fb      	strh	r3, [r7, #14]
 8007dd6:	4613      	mov	r3, r2
 8007dd8:	81bb      	strh	r3, [r7, #12]
  int32_t ret = MIPC_CODE_ERROR;
 8007dda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007dde:	61fb      	str	r3, [r7, #28]
  uint8_t *cbuf;
  bool copy_buffer = true;
 8007de0:	2301      	movs	r3, #1
 8007de2:	75fb      	strb	r3, [r7, #23]

  LOCK(wifi_obj_get()->lockcmd);
 8007de4:	f002 fba0 	bl	800a528 <wifi_obj_get>
 8007de8:	4603      	mov	r3, r0
 8007dea:	f893 3610 	ldrb.w	r3, [r3, #1552]	; 0x610
 8007dee:	b2db      	uxtb	r3, r3
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d1f7      	bne.n	8007de4 <mipc_request+0x1c>
 8007df4:	f002 fb98 	bl	800a528 <wifi_obj_get>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	2201      	movs	r2, #1
 8007dfc:	f883 2610 	strb.w	r2, [r3, #1552]	; 0x610

  /* DEBUG_LOG("\n%s()>  %" PRIu32 "\n", __FUNCTION__, (uint32_t)cparams_size); */

  if (cparams_size <= MX_WIFI_IPC_PAYLOAD_SIZE)
 8007e00:	89bb      	ldrh	r3, [r7, #12]
 8007e02:	f640 12be 	movw	r2, #2494	; 0x9be
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d873      	bhi.n	8007ef2 <mipc_request+0x12a>
  {
    /* Create the command data. */
    const uint16_t cbuf_size = MIPC_PKT_REQ_ID_SIZE + MIPC_PKT_API_ID_SIZE + cparams_size;
 8007e0a:	89bb      	ldrh	r3, [r7, #12]
 8007e0c:	3306      	adds	r3, #6
 8007e0e:	82bb      	strh	r3, [r7, #20]

#if MX_WIFI_TX_BUFFER_NO_COPY
    if (api_id == MIPC_API_WIFI_BYPASS_OUT_CMD)
 8007e10:	89fb      	ldrh	r3, [r7, #14]
 8007e12:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8007e16:	d108      	bne.n	8007e2a <mipc_request+0x62>
    {
      cbuf = byte_pointer_add_signed_offset(cparams, - (MIPC_PKT_REQ_ID_SIZE + MIPC_PKT_API_ID_SIZE));
 8007e18:	f06f 0105 	mvn.w	r1, #5
 8007e1c:	68b8      	ldr	r0, [r7, #8]
 8007e1e:	f7ff fecd 	bl	8007bbc <byte_pointer_add_signed_offset>
 8007e22:	61b8      	str	r0, [r7, #24]
      copy_buffer = false;
 8007e24:	2300      	movs	r3, #0
 8007e26:	75fb      	strb	r3, [r7, #23]
 8007e28:	e005      	b.n	8007e36 <mipc_request+0x6e>
    else
#endif /* MX_WIFI_TX_BUFFER_NO_COPY */
    {
      DEBUG_LOG("\n%-15s(): Allocate %" PRIu32 " bytes\n", __FUNCTION__, (uint32_t)cbuf_size);

      cbuf = (uint8_t *)MX_WIFI_MALLOC(cbuf_size);
 8007e2a:	8abb      	ldrh	r3, [r7, #20]
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	f00d fc69 	bl	8015704 <malloc>
 8007e32:	4603      	mov	r3, r0
 8007e34:	61bb      	str	r3, [r7, #24]

      MX_STAT(alloc);
    }

    if (NULL != cbuf)
 8007e36:	69bb      	ldr	r3, [r7, #24]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d05a      	beq.n	8007ef2 <mipc_request+0x12a>
    {
      /* Get an unique identifier. */
      const uint32_t req_id = get_new_req_id();
 8007e3c:	f7ff fecc 	bl	8007bd8 <get_new_req_id>
 8007e40:	4603      	mov	r3, r0
 8007e42:	613b      	str	r3, [r7, #16]

      /* Copy the protocol parameter to the head part of the buffer. */
      (void)memcpy(byte_pointer_add_signed_offset(cbuf, MIPC_PKT_REQ_ID_OFFSET), &req_id, sizeof(req_id));
 8007e44:	2100      	movs	r1, #0
 8007e46:	69b8      	ldr	r0, [r7, #24]
 8007e48:	f7ff feb8 	bl	8007bbc <byte_pointer_add_signed_offset>
 8007e4c:	4602      	mov	r2, r0
 8007e4e:	693b      	ldr	r3, [r7, #16]
 8007e50:	6013      	str	r3, [r2, #0]
      (void)memcpy(byte_pointer_add_signed_offset(cbuf, MIPC_PKT_API_ID_OFFSET), &api_id, sizeof(api_id));
 8007e52:	2104      	movs	r1, #4
 8007e54:	69b8      	ldr	r0, [r7, #24]
 8007e56:	f7ff feb1 	bl	8007bbc <byte_pointer_add_signed_offset>
 8007e5a:	4602      	mov	r2, r0
 8007e5c:	89fb      	ldrh	r3, [r7, #14]
 8007e5e:	8013      	strh	r3, [r2, #0]

      if ((true == copy_buffer) && (cparams_size > 0))
 8007e60:	7dfb      	ldrb	r3, [r7, #23]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d00b      	beq.n	8007e7e <mipc_request+0xb6>
 8007e66:	89bb      	ldrh	r3, [r7, #12]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d008      	beq.n	8007e7e <mipc_request+0xb6>
      {
        (void)memcpy(byte_pointer_add_signed_offset(cbuf, MIPC_PKT_PARAMS_OFFSET), cparams, cparams_size);
 8007e6c:	2106      	movs	r1, #6
 8007e6e:	69b8      	ldr	r0, [r7, #24]
 8007e70:	f7ff fea4 	bl	8007bbc <byte_pointer_add_signed_offset>
 8007e74:	89bb      	ldrh	r3, [r7, #12]
 8007e76:	461a      	mov	r2, r3
 8007e78:	68b9      	ldr	r1, [r7, #8]
 8007e7a:	f00f fb6e 	bl	801755a <memcpy>
      }

      /* A single pending request due to LOCK usage on command. */
      if (PendingRequest.req_id != MIPC_REQ_ID_RESET_VAL)
 8007e7e:	4b22      	ldr	r3, [pc, #136]	; (8007f08 <mipc_request+0x140>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e86:	d000      	beq.n	8007e8a <mipc_request+0xc2>
      {
        DEBUG_LOG("Error req_id must be 0xffffffff here %" PRIu32 "\n", PendingRequest.req_id);
        MX_ASSERT(false);
 8007e88:	e7fe      	b.n	8007e88 <mipc_request+0xc0>
      }

      PendingRequest.req_id = req_id;
 8007e8a:	693b      	ldr	r3, [r7, #16]
 8007e8c:	4a1e      	ldr	r2, [pc, #120]	; (8007f08 <mipc_request+0x140>)
 8007e8e:	6013      	str	r3, [r2, #0]
      PendingRequest.rbuffer = rbuffer;
 8007e90:	4a1d      	ldr	r2, [pc, #116]	; (8007f08 <mipc_request+0x140>)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	60d3      	str	r3, [r2, #12]
      PendingRequest.rbuffer_size = rbuffer_size;
 8007e96:	4a1c      	ldr	r2, [pc, #112]	; (8007f08 <mipc_request+0x140>)
 8007e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e9a:	6093      	str	r3, [r2, #8]
      /* printf("%d push %d\n",iter++,cbuf_size); */

      /* Send the command. */
      DEBUG_LOG("%-15s(): req_id: 0x%08" PRIx32 " : %" PRIu32 "\n", __FUNCTION__, req_id, (uint32_t)cbuf_size);

      ret = mx_wifi_hci_send(cbuf, cbuf_size);
 8007e9c:	8abb      	ldrh	r3, [r7, #20]
 8007e9e:	4619      	mov	r1, r3
 8007ea0:	69b8      	ldr	r0, [r7, #24]
 8007ea2:	f7ff fe05 	bl	8007ab0 <mx_wifi_hci_send>
 8007ea6:	61f8      	str	r0, [r7, #28]
      if (ret == 0)
 8007ea8:	69fb      	ldr	r3, [r7, #28]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d117      	bne.n	8007ede <mipc_request+0x116>
      {
        /* Wait for the command answer. */
        if (SEM_WAIT(PendingRequest.resp_flag, timeout_ms, mipc_poll) != SEM_OK)
 8007eae:	4a17      	ldr	r2, [pc, #92]	; (8007f0c <mipc_request+0x144>)
 8007eb0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007eb2:	4817      	ldr	r0, [pc, #92]	; (8007f10 <mipc_request+0x148>)
 8007eb4:	f7ff fca9 	bl	800780a <noos_sem_wait>
 8007eb8:	4603      	mov	r3, r0
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d013      	beq.n	8007ee6 <mipc_request+0x11e>
        {
          DEBUG_ERROR("Error: command 0x%04" PRIx32 " timeout(%" PRIu32 " ms) waiting answer %" PRIu32 "\n",
 8007ebe:	89fb      	ldrh	r3, [r7, #14]
 8007ec0:	4619      	mov	r1, r3
 8007ec2:	4b11      	ldr	r3, [pc, #68]	; (8007f08 <mipc_request+0x140>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ec8:	4812      	ldr	r0, [pc, #72]	; (8007f14 <mipc_request+0x14c>)
 8007eca:	f00f f9b3 	bl	8017234 <iprintf>
                      (uint32_t)api_id, timeout_ms, PendingRequest.req_id);
          PendingRequest.req_id = MIPC_REQ_ID_RESET_VAL;
 8007ece:	4b0e      	ldr	r3, [pc, #56]	; (8007f08 <mipc_request+0x140>)
 8007ed0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007ed4:	601a      	str	r2, [r3, #0]
          ret = MIPC_CODE_ERROR;
 8007ed6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007eda:	61fb      	str	r3, [r7, #28]
 8007edc:	e003      	b.n	8007ee6 <mipc_request+0x11e>
        }
      }
      else
      {
        DEBUG_ERROR("Failed to send command to HCI\n");
 8007ede:	480e      	ldr	r0, [pc, #56]	; (8007f18 <mipc_request+0x150>)
 8007ee0:	f00f fa16 	bl	8017310 <puts>
        MX_ASSERT(false);
 8007ee4:	e7fe      	b.n	8007ee4 <mipc_request+0x11c>
      }

      DEBUG_LOG("%-15s()< req_id: 0x%08" PRIx32 " done (%" PRId32 ")\n\n", __FUNCTION__, req_id, ret);

      if (true == copy_buffer)
 8007ee6:	7dfb      	ldrb	r3, [r7, #23]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d002      	beq.n	8007ef2 <mipc_request+0x12a>
      {
        MX_WIFI_FREE(cbuf);
 8007eec:	69b8      	ldr	r0, [r7, #24]
 8007eee:	f00d fc11 	bl	8015714 <free>
        MX_STAT(free);
      }
    }
  }

  UNLOCK(wifi_obj_get()->lockcmd);
 8007ef2:	f002 fb19 	bl	800a528 <wifi_obj_get>
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	2200      	movs	r2, #0
 8007efa:	f883 2610 	strb.w	r2, [r3, #1552]	; 0x610

  return ret;
 8007efe:	69fb      	ldr	r3, [r7, #28]
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	3720      	adds	r7, #32
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}
 8007f08:	20002cec 	.word	0x20002cec
 8007f0c:	08007f1d 	.word	0x08007f1d
 8007f10:	20002cf0 	.word	0x20002cf0
 8007f14:	0801b318 	.word	0x0801b318
 8007f18:	0801b354 	.word	0x0801b354

08007f1c <mipc_poll>:


void mipc_poll(uint32_t timeout)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b084      	sub	sp, #16
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
  mx_buf_t *nbuf;

  /* Process the received data inside the RX buffer. */
  nbuf = mx_wifi_hci_recv(timeout);
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	f7ff fdeb 	bl	8007b00 <mx_wifi_hci_recv>
 8007f2a:	60f8      	str	r0, [r7, #12]

  if (NULL != nbuf)
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d00c      	beq.n	8007f4c <mipc_poll+0x30>
  {
    const uint32_t len = MX_NET_BUFFER_GET_PAYLOAD_SIZE(nbuf);
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	60bb      	str	r3, [r7, #8]

    DEBUG_LOG("%-15s(): %p HCI recv len %" PRIu32 "\n", __FUNCTION__, nbuf, len);

    if (len > 0U)
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d003      	beq.n	8007f46 <mipc_poll+0x2a>
    {
      mipc_event(nbuf);
 8007f3e:	68f8      	ldr	r0, [r7, #12]
 8007f40:	f7ff fe72 	bl	8007c28 <mipc_event>
      MX_NET_BUFFER_FREE(nbuf);

      MX_STAT(free);
    }
  }
}
 8007f44:	e002      	b.n	8007f4c <mipc_poll+0x30>
      MX_NET_BUFFER_FREE(nbuf);
 8007f46:	68f8      	ldr	r0, [r7, #12]
 8007f48:	f00d fbe4 	bl	8015714 <free>
}
 8007f4c:	bf00      	nop
 8007f4e:	3710      	adds	r7, #16
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}

08007f54 <mapi_reboot_event_callback>:
  ******************************************************************************/

/* System */

void mapi_reboot_event_callback(mx_buf_t *mxbuff)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b082      	sub	sp, #8
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
  if (mxbuff != NULL)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d002      	beq.n	8007f68 <mapi_reboot_event_callback+0x14>
  {
    mx_wifi_hci_free(mxbuff);
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f7ff fde2 	bl	8007b2c <mx_wifi_hci_free>
  }
  DEBUG_LOG("\nEVENT: reboot done.\n");
}
 8007f68:	bf00      	nop
 8007f6a:	3708      	adds	r7, #8
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd80      	pop	{r7, pc}

08007f70 <mapi_fota_status_event_callback>:


void mapi_fota_status_event_callback(mx_buf_t *nbuf)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b086      	sub	sp, #24
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
  if (NULL != nbuf)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d026      	beq.n	8007fcc <mapi_fota_status_event_callback+0x5c>
  {
    uint8_t *payload = MX_NET_BUFFER_PAYLOAD(nbuf);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	685b      	ldr	r3, [r3, #4]
 8007f82:	3308      	adds	r3, #8
 8007f84:	687a      	ldr	r2, [r7, #4]
 8007f86:	4413      	add	r3, r2
 8007f88:	617b      	str	r3, [r7, #20]
    if (NULL != payload)
 8007f8a:	697b      	ldr	r3, [r7, #20]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d01d      	beq.n	8007fcc <mapi_fota_status_event_callback+0x5c>
    {
      mx_wifi_fota_status_e status = *((mx_wifi_fota_status_e *)(byte_pointer_add_signed_offset(payload, MIPC_PKT_PARAMS_OFFSET)));
 8007f90:	2106      	movs	r1, #6
 8007f92:	6978      	ldr	r0, [r7, #20]
 8007f94:	f7ff fe12 	bl	8007bbc <byte_pointer_add_signed_offset>
 8007f98:	4603      	mov	r3, r0
 8007f9a:	781b      	ldrb	r3, [r3, #0]
 8007f9c:	74fb      	strb	r3, [r7, #19]

      DEBUG_LOG("\nEVENT: FOTA status: %02x\n", status);

      mx_wifi_hci_free(nbuf);
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f7ff fdc4 	bl	8007b2c <mx_wifi_hci_free>

      {
        mx_wifi_fota_status_cb_t const status_cb = wifi_obj_get()->Runtime.fota_status_cb;
 8007fa4:	f002 fac0 	bl	800a528 <wifi_obj_get>
 8007fa8:	4603      	mov	r3, r0
 8007faa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007fae:	60fb      	str	r3, [r7, #12]
        const uint32_t cb_args = wifi_obj_get()->Runtime.fota_user_args;
 8007fb0:	f002 faba 	bl	800a528 <wifi_obj_get>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007fba:	60bb      	str	r3, [r7, #8]
        if (NULL != status_cb)
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d004      	beq.n	8007fcc <mapi_fota_status_event_callback+0x5c>
        {
          status_cb(status, cb_args);
 8007fc2:	7cfa      	ldrb	r2, [r7, #19]
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	68b9      	ldr	r1, [r7, #8]
 8007fc8:	4610      	mov	r0, r2
 8007fca:	4798      	blx	r3
        }
      }
    }
  }
}
 8007fcc:	bf00      	nop
 8007fce:	3718      	adds	r7, #24
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}

08007fd4 <mapi_wifi_status_event_callback>:


/* WiFi */

void mapi_wifi_status_event_callback(mx_buf_t *netbuf)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b088      	sub	sp, #32
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
  uint8_t cate;
  mx_wifi_status_callback_t status_cb = NULL;
 8007fdc:	2300      	movs	r3, #0
 8007fde:	61bb      	str	r3, [r7, #24]
  void *cb_args = NULL;
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	617b      	str	r3, [r7, #20]

  if (NULL != netbuf)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d042      	beq.n	8008070 <mapi_wifi_status_event_callback+0x9c>
  {
    uint8_t *payload = MX_NET_BUFFER_PAYLOAD(netbuf);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	685b      	ldr	r3, [r3, #4]
 8007fee:	3308      	adds	r3, #8
 8007ff0:	687a      	ldr	r2, [r7, #4]
 8007ff2:	4413      	add	r3, r2
 8007ff4:	613b      	str	r3, [r7, #16]
    mwifi_status_t status = *((mwifi_status_t *)(byte_pointer_add_signed_offset(payload, MIPC_PKT_PARAMS_OFFSET)));
 8007ff6:	2106      	movs	r1, #6
 8007ff8:	6938      	ldr	r0, [r7, #16]
 8007ffa:	f7ff fddf 	bl	8007bbc <byte_pointer_add_signed_offset>
 8007ffe:	4603      	mov	r3, r0
 8008000:	781b      	ldrb	r3, [r3, #0]
 8008002:	73fb      	strb	r3, [r7, #15]

    DEBUG_LOG("\nEVENT: wifi status: %02x\n", status);

    mx_wifi_hci_free(netbuf);
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f7ff fd91 	bl	8007b2c <mx_wifi_hci_free>

    switch (status)
 800800a:	7bfb      	ldrb	r3, [r7, #15]
 800800c:	2b03      	cmp	r3, #3
 800800e:	dc02      	bgt.n	8008016 <mapi_wifi_status_event_callback+0x42>
 8008010:	2b00      	cmp	r3, #0
 8008012:	dc04      	bgt.n	800801e <mapi_wifi_status_event_callback+0x4a>
 8008014:	e021      	b.n	800805a <mapi_wifi_status_event_callback+0x86>
 8008016:	3b04      	subs	r3, #4
 8008018:	2b01      	cmp	r3, #1
 800801a:	d81e      	bhi.n	800805a <mapi_wifi_status_event_callback+0x86>
 800801c:	e00e      	b.n	800803c <mapi_wifi_status_event_callback+0x68>
    {
      case MWIFI_EVENT_STA_UP:
      case MWIFI_EVENT_STA_DOWN:
      case MWIFI_EVENT_STA_GOT_IP:
        cate = MC_STATION;
 800801e:	2301      	movs	r3, #1
 8008020:	77fb      	strb	r3, [r7, #31]
        status_cb = wifi_obj_get()->Runtime.status_cb[0];
 8008022:	f002 fa81 	bl	800a528 <wifi_obj_get>
 8008026:	4603      	mov	r3, r0
 8008028:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800802c:	61bb      	str	r3, [r7, #24]
        cb_args = wifi_obj_get()->Runtime.callback_arg[0];
 800802e:	f002 fa7b 	bl	800a528 <wifi_obj_get>
 8008032:	4603      	mov	r3, r0
 8008034:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8008038:	617b      	str	r3, [r7, #20]
        break;
 800803a:	e011      	b.n	8008060 <mapi_wifi_status_event_callback+0x8c>

      case MWIFI_EVENT_AP_UP:
      case MWIFI_EVENT_AP_DOWN:
        cate = MC_SOFTAP;
 800803c:	2300      	movs	r3, #0
 800803e:	77fb      	strb	r3, [r7, #31]
        status_cb = wifi_obj_get()->Runtime.status_cb[1];
 8008040:	f002 fa72 	bl	800a528 <wifi_obj_get>
 8008044:	4603      	mov	r3, r0
 8008046:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800804a:	61bb      	str	r3, [r7, #24]
        cb_args = wifi_obj_get()->Runtime.callback_arg[1];
 800804c:	f002 fa6c 	bl	800a528 <wifi_obj_get>
 8008050:	4603      	mov	r3, r0
 8008052:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008056:	617b      	str	r3, [r7, #20]
        break;
 8008058:	e002      	b.n	8008060 <mapi_wifi_status_event_callback+0x8c>

      default:
        cate = MC_SOFTAP;
 800805a:	2300      	movs	r3, #0
 800805c:	77fb      	strb	r3, [r7, #31]
        MX_ASSERT(false);
 800805e:	e7fe      	b.n	800805e <mapi_wifi_status_event_callback+0x8a>
        /* break; */
    }

    if (NULL != status_cb)
 8008060:	69bb      	ldr	r3, [r7, #24]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d004      	beq.n	8008070 <mapi_wifi_status_event_callback+0x9c>
    {
      status_cb(cate, status, cb_args);
 8008066:	7bf9      	ldrb	r1, [r7, #15]
 8008068:	7ff8      	ldrb	r0, [r7, #31]
 800806a:	69bb      	ldr	r3, [r7, #24]
 800806c:	697a      	ldr	r2, [r7, #20]
 800806e:	4798      	blx	r3
    }
  }
}
 8008070:	bf00      	nop
 8008072:	3720      	adds	r7, #32
 8008074:	46bd      	mov	sp, r7
 8008076:	bd80      	pop	{r7, pc}

08008078 <mapi_wifi_netlink_input_callback>:


void mapi_wifi_netlink_input_callback(mx_buf_t *netbuf)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b086      	sub	sp, #24
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
  if (NULL != netbuf)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d02e      	beq.n	80080e4 <mapi_wifi_netlink_input_callback+0x6c>
  {
    uint8_t *const buffer_in = MX_NET_BUFFER_PAYLOAD(netbuf);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	685b      	ldr	r3, [r3, #4]
 800808a:	3308      	adds	r3, #8
 800808c:	687a      	ldr	r2, [r7, #4]
 800808e:	4413      	add	r3, r2
 8008090:	617b      	str	r3, [r7, #20]
    wifi_bypass_in_rparams_t *const in_rprarams = (wifi_bypass_in_rparams_t *)(byte_pointer_add_signed_offset(buffer_in, MIPC_PKT_PARAMS_OFFSET));
 8008092:	2106      	movs	r1, #6
 8008094:	6978      	ldr	r0, [r7, #20]
 8008096:	f7ff fd91 	bl	8007bbc <byte_pointer_add_signed_offset>
 800809a:	6138      	str	r0, [r7, #16]

    MX_STAT(callback);

    if ((NULL != wifi_obj_get()->Runtime.netlink_input_cb) && \
 800809c:	f002 fa44 	bl	800a528 <wifi_obj_get>
 80080a0:	4603      	mov	r3, r0
 80080a2:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d019      	beq.n	80080de <mapi_wifi_netlink_input_callback+0x66>
        (in_rprarams->tot_len > 0))
 80080aa:	693b      	ldr	r3, [r7, #16]
 80080ac:	8a9b      	ldrh	r3, [r3, #20]
 80080ae:	b29b      	uxth	r3, r3
    if ((NULL != wifi_obj_get()->Runtime.netlink_input_cb) && \
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d014      	beq.n	80080de <mapi_wifi_netlink_input_callback+0x66>
    {
      uint32_t low_level_netif_idx = (uint32_t)in_rprarams->idx;
 80080b4:	693b      	ldr	r3, [r7, #16]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	60fb      	str	r3, [r7, #12]

      MX_NET_BUFFER_HIDE_HEADER(netbuf, MIPC_PKT_PARAMS_OFFSET + sizeof(wifi_bypass_in_rparams_t));
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	685b      	ldr	r3, [r3, #4]
 80080be:	f103 021c 	add.w	r2, r3, #28
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	605a      	str	r2, [r3, #4]
      wifi_obj_get()->Runtime.netlink_input_cb(netbuf, (void *)&low_level_netif_idx);
 80080c6:	f002 fa2f 	bl	800a528 <wifi_obj_get>
 80080ca:	4603      	mov	r3, r0
 80080cc:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80080d0:	f107 020c 	add.w	r2, r7, #12
 80080d4:	4611      	mov	r1, r2
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	4798      	blx	r3
    {
 80080da:	bf00      	nop
      MX_NET_BUFFER_FREE(netbuf);

      MX_STAT(free);
    }
  }
}
 80080dc:	e002      	b.n	80080e4 <mapi_wifi_netlink_input_callback+0x6c>
      MX_NET_BUFFER_FREE(netbuf);
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f00d fb18 	bl	8015714 <free>
}
 80080e4:	bf00      	nop
 80080e6:	3718      	adds	r7, #24
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd80      	pop	{r7, pc}

080080ec <MX_WIFI_RegisterBusIO>:
                                       IO_Init_Func IO_Init,
                                       IO_DeInit_Func IO_DeInit,
                                       IO_Delay_Func IO_Delay,
                                       IO_Send_Func IO_Send,
                                       IO_Receive_Func IO_Receive)
{
 80080ec:	b480      	push	{r7}
 80080ee:	b087      	sub	sp, #28
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	60f8      	str	r0, [r7, #12]
 80080f4:	60b9      	str	r1, [r7, #8]
 80080f6:	607a      	str	r2, [r7, #4]
 80080f8:	603b      	str	r3, [r7, #0]
  MX_WIFI_STATUS_T rc;

  if ((NULL == Obj) || (NULL == IO_Init) || (NULL == IO_DeInit) || (NULL == IO_Send) || \
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d00e      	beq.n	800811e <MX_WIFI_RegisterBusIO+0x32>
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d00b      	beq.n	800811e <MX_WIFI_RegisterBusIO+0x32>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d008      	beq.n	800811e <MX_WIFI_RegisterBusIO+0x32>
 800810c:	6a3b      	ldr	r3, [r7, #32]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d005      	beq.n	800811e <MX_WIFI_RegisterBusIO+0x32>
 8008112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008114:	2b00      	cmp	r3, #0
 8008116:	d002      	beq.n	800811e <MX_WIFI_RegisterBusIO+0x32>
      (NULL == IO_Receive) || (NULL == IO_Delay))
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d102      	bne.n	8008124 <MX_WIFI_RegisterBusIO+0x38>
  {
    rc = MX_WIFI_STATUS_ERROR;
 800811e:	23ff      	movs	r3, #255	; 0xff
 8008120:	75fb      	strb	r3, [r7, #23]
 8008122:	e010      	b.n	8008146 <MX_WIFI_RegisterBusIO+0x5a>
  }
  else
  {
    Obj->fops.IO_Init = IO_Init;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	68ba      	ldr	r2, [r7, #8]
 8008128:	601a      	str	r2, [r3, #0]
    Obj->fops.IO_DeInit = IO_DeInit;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	687a      	ldr	r2, [r7, #4]
 800812e:	605a      	str	r2, [r3, #4]
    Obj->fops.IO_Send = IO_Send;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	6a3a      	ldr	r2, [r7, #32]
 8008134:	60da      	str	r2, [r3, #12]
    Obj->fops.IO_Receive = IO_Receive;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800813a:	611a      	str	r2, [r3, #16]
    Obj->fops.IO_Delay = IO_Delay;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	683a      	ldr	r2, [r7, #0]
 8008140:	609a      	str	r2, [r3, #8]
    rc = MX_WIFI_STATUS_OK;
 8008142:	2300      	movs	r3, #0
 8008144:	75fb      	strb	r3, [r7, #23]
  }
  return rc;
 8008146:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800814a:	4618      	mov	r0, r3
 800814c:	371c      	adds	r7, #28
 800814e:	46bd      	mov	sp, r7
 8008150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008154:	4770      	bx	lr

08008156 <MX_WIFI_HardResetModule>:


MX_WIFI_STATUS_T MX_WIFI_HardResetModule(MX_WIFIObject_t *Obj)
{
 8008156:	b580      	push	{r7, lr}
 8008158:	b084      	sub	sp, #16
 800815a:	af00      	add	r7, sp, #0
 800815c:	6078      	str	r0, [r7, #4]
  MX_WIFI_STATUS_T rc = MX_WIFI_STATUS_ERROR;
 800815e:	23ff      	movs	r3, #255	; 0xff
 8008160:	73fb      	strb	r3, [r7, #15]

  MX_STAT_INIT();

  if (NULL != Obj)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d00e      	beq.n	8008186 <MX_WIFI_HardResetModule+0x30>
  {
    /* reset Wi-Fi by reset pin */
    const int8_t ret = Obj->fops.IO_Init(MX_WIFI_RESET);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	2001      	movs	r0, #1
 800816e:	4798      	blx	r3
 8008170:	4603      	mov	r3, r0
 8008172:	73bb      	strb	r3, [r7, #14]
    if ((int8_t)0 == ret)
 8008174:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d102      	bne.n	8008182 <MX_WIFI_HardResetModule+0x2c>
    {
      rc = MX_WIFI_STATUS_OK;
 800817c:	2300      	movs	r3, #0
 800817e:	73fb      	strb	r3, [r7, #15]
 8008180:	e001      	b.n	8008186 <MX_WIFI_HardResetModule+0x30>
    }
    else
    {
      rc = MX_WIFI_STATUS_ERROR;
 8008182:	23ff      	movs	r3, #255	; 0xff
 8008184:	73fb      	strb	r3, [r7, #15]
    }
  }

  return rc;
 8008186:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800818a:	4618      	mov	r0, r3
 800818c:	3710      	adds	r7, #16
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}
	...

08008194 <MX_WIFI_Init>:
}
#endif /* MX_WIFI_BARE_OS_H */


MX_WIFI_STATUS_T MX_WIFI_Init(MX_WIFIObject_t *Obj)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b08e      	sub	sp, #56	; 0x38
 8008198:	af02      	add	r7, sp, #8
 800819a:	6078      	str	r0, [r7, #4]
  MX_WIFI_STATUS_T ret = MX_WIFI_STATUS_ERROR;
 800819c:	23ff      	movs	r3, #255	; 0xff
 800819e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  if (NULL == Obj)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d103      	bne.n	80081b0 <MX_WIFI_Init+0x1c>
  {
    ret = MX_WIFI_STATUS_PARAM_ERROR;
 80081a8:	23fc      	movs	r3, #252	; 0xfc
 80081aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80081ae:	e0cf      	b.n	8008350 <MX_WIFI_Init+0x1bc>
  }
  else
  {
    if (Obj->Runtime.interfaces == 0u)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f893 360e 	ldrb.w	r3, [r3, #1550]	; 0x60e
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	f040 80bf 	bne.w	800833a <MX_WIFI_Init+0x1a6>
    {
      LOCK_INIT(Obj->lockcmd);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2200      	movs	r2, #0
 80081c0:	f883 2610 	strb.w	r2, [r3, #1552]	; 0x610

      /* 0. Set command timeout. */
      Obj->Runtime.Timeout = MX_WIFI_CMD_TIMEOUT;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80081ca:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

      /* 1. Initialize the WiFi low level IO (UART/SPI). */
      (void)(Obj->fops.IO_Init(MX_WIFI_INIT));
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	2000      	movs	r0, #0
 80081d4:	4798      	blx	r3
      {
        /* 2. Initialize the WiFi IPC. */
        if (MIPC_CODE_SUCCESS == mipc_init(Obj->fops.IO_Send))
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	68db      	ldr	r3, [r3, #12]
 80081da:	4618      	mov	r0, r3
 80081dc:	f7ff fdd2 	bl	8007d84 <mipc_init>
 80081e0:	4603      	mov	r3, r0
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	f040 80b4 	bne.w	8008350 <MX_WIFI_Init+0x1bc>
                                       MX_WIFI_RECEIVED_THREAD_PRIORITY))
          {
            uint16_t rparams_size;

            /* 3. Get the version of the WiFi module firmware. */
            (void)MX_WIFI_MEMSET(Obj->SysInfo.FW_Rev, 0);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	3354      	adds	r3, #84	; 0x54
 80081ec:	2218      	movs	r2, #24
 80081ee:	2100      	movs	r1, #0
 80081f0:	4618      	mov	r0, r3
 80081f2:	f00f f8f3 	bl	80173dc <memset>
            rparams_size = (uint16_t)sizeof(Obj->SysInfo.FW_Rev);
 80081f6:	2318      	movs	r3, #24
 80081f8:	84fb      	strh	r3, [r7, #38]	; 0x26

            if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_SYS_VERSION_CMD,
                                                  NULL, 0,
                                                  Obj->SysInfo.FW_Rev, &rparams_size,
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	f103 0254 	add.w	r2, r3, #84	; 0x54
            if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_SYS_VERSION_CMD,
 8008200:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008204:	9301      	str	r3, [sp, #4]
 8008206:	f107 0326 	add.w	r3, r7, #38	; 0x26
 800820a:	9300      	str	r3, [sp, #0]
 800820c:	4613      	mov	r3, r2
 800820e:	2200      	movs	r2, #0
 8008210:	2100      	movs	r1, #0
 8008212:	2003      	movs	r0, #3
 8008214:	f7ff fdd8 	bl	8007dc8 <mipc_request>
 8008218:	4603      	mov	r3, r0
 800821a:	2b00      	cmp	r3, #0
 800821c:	f040 8098 	bne.w	8008350 <MX_WIFI_Init+0x1bc>
                                                  MX_WIFI_CMD_TIMEOUT))
            {
              /* Check if WiFi module firmware is correctly managed by the current version of the host driver. */
              {
                uint32_t firmware_rev[3] = {0};
 8008220:	f107 0318 	add.w	r3, r7, #24
 8008224:	2200      	movs	r2, #0
 8008226:	601a      	str	r2, [r3, #0]
 8008228:	605a      	str	r2, [r3, #4]
 800822a:	609a      	str	r2, [r3, #8]
                const uint32_t firmware_rev_required[3] = {2, 3, 4};
 800822c:	4a4b      	ldr	r2, [pc, #300]	; (800835c <MX_WIFI_Init+0x1c8>)
 800822e:	f107 030c 	add.w	r3, r7, #12
 8008232:	ca07      	ldmia	r2, {r0, r1, r2}
 8008234:	e883 0007 	stmia.w	r3, {r0, r1, r2}

                int status = sscanf((const char *)Obj->SysInfo.FW_Rev,
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f103 0054 	add.w	r0, r3, #84	; 0x54
 800823e:	f107 0318 	add.w	r3, r7, #24
 8008242:	1d19      	adds	r1, r3, #4
 8008244:	f107 0218 	add.w	r2, r7, #24
 8008248:	f107 0318 	add.w	r3, r7, #24
 800824c:	3308      	adds	r3, #8
 800824e:	9300      	str	r3, [sp, #0]
 8008250:	460b      	mov	r3, r1
 8008252:	4943      	ldr	r1, [pc, #268]	; (8008360 <MX_WIFI_Init+0x1cc>)
 8008254:	f00d ffbe 	bl	80161d4 <siscanf>
 8008258:	62b8      	str	r0, [r7, #40]	; 0x28
                                    "V%" PRIu32 ".%" PRIu32 ".%" PRIu32 "", &firmware_rev[0], &firmware_rev[1], &firmware_rev[2]);
                if (status <= 0)
 800825a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800825c:	2b00      	cmp	r3, #0
 800825e:	dc03      	bgt.n	8008268 <MX_WIFI_Init+0xd4>
                {
                  DEBUG_ERROR("ERROR: Unable to decode WiFi firmware version\n");
 8008260:	4840      	ldr	r0, [pc, #256]	; (8008364 <MX_WIFI_Init+0x1d0>)
 8008262:	f00f f855 	bl	8017310 <puts>
                  MX_ASSERT(false);
 8008266:	e7fe      	b.n	8008266 <MX_WIFI_Init+0xd2>
                }

                for (uint8_t i = 0; i < sizeof(firmware_rev) / sizeof(firmware_rev[0]); ++i)
 8008268:	2300      	movs	r3, #0
 800826a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800826e:	e028      	b.n	80082c2 <MX_WIFI_Init+0x12e>
                {
                  if (firmware_rev[i] > firmware_rev_required[i])
 8008270:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8008274:	009b      	lsls	r3, r3, #2
 8008276:	3330      	adds	r3, #48	; 0x30
 8008278:	443b      	add	r3, r7
 800827a:	f853 2c18 	ldr.w	r2, [r3, #-24]
 800827e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8008282:	009b      	lsls	r3, r3, #2
 8008284:	3330      	adds	r3, #48	; 0x30
 8008286:	443b      	add	r3, r7
 8008288:	f853 3c24 	ldr.w	r3, [r3, #-36]
 800828c:	429a      	cmp	r2, r3
 800828e:	d81d      	bhi.n	80082cc <MX_WIFI_Init+0x138>
                  {
                    break;
                  }
                  else if (firmware_rev[i] < firmware_rev_required[i])
 8008290:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8008294:	009b      	lsls	r3, r3, #2
 8008296:	3330      	adds	r3, #48	; 0x30
 8008298:	443b      	add	r3, r7
 800829a:	f853 2c18 	ldr.w	r2, [r3, #-24]
 800829e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80082a2:	009b      	lsls	r3, r3, #2
 80082a4:	3330      	adds	r3, #48	; 0x30
 80082a6:	443b      	add	r3, r7
 80082a8:	f853 3c24 	ldr.w	r3, [r3, #-36]
 80082ac:	429a      	cmp	r2, r3
 80082ae:	d203      	bcs.n	80082b8 <MX_WIFI_Init+0x124>
                  {
                    DEBUG_ERROR("ERROR: The WiFi firmware is out of date\n");
 80082b0:	482d      	ldr	r0, [pc, #180]	; (8008368 <MX_WIFI_Init+0x1d4>)
 80082b2:	f00f f82d 	bl	8017310 <puts>
                    MX_ASSERT(false);
 80082b6:	e7fe      	b.n	80082b6 <MX_WIFI_Init+0x122>
                for (uint8_t i = 0; i < sizeof(firmware_rev) / sizeof(firmware_rev[0]); ++i)
 80082b8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80082bc:	3301      	adds	r3, #1
 80082be:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80082c2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80082c6:	2b02      	cmp	r3, #2
 80082c8:	d9d2      	bls.n	8008270 <MX_WIFI_Init+0xdc>
 80082ca:	e000      	b.n	80082ce <MX_WIFI_Init+0x13a>
                    break;
 80082cc:	bf00      	nop
                    /* Going on with the next revision digit. */
                  }
                }
              }

              MX_WIFI_STRNCPY(Obj->SysInfo.Product_Name, MX_WIFI_PRODUCT_NAME);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	3314      	adds	r3, #20
 80082d2:	221f      	movs	r2, #31
 80082d4:	4925      	ldr	r1, [pc, #148]	; (800836c <MX_WIFI_Init+0x1d8>)
 80082d6:	4618      	mov	r0, r3
 80082d8:	f001 fdf7 	bl	8009eca <void_strncpy>
              MX_WIFI_STRNCPY(Obj->SysInfo.Product_ID, MX_WIFI_PRODUCT_ID);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	3334      	adds	r3, #52	; 0x34
 80082e0:	221f      	movs	r2, #31
 80082e2:	4923      	ldr	r1, [pc, #140]	; (8008370 <MX_WIFI_Init+0x1dc>)
 80082e4:	4618      	mov	r0, r3
 80082e6:	f001 fdf0 	bl	8009eca <void_strncpy>

              /* 4. Get MAC address. */
              (void)MX_WIFI_MEMSET(Obj->SysInfo.MAC, 0);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	336c      	adds	r3, #108	; 0x6c
 80082ee:	2206      	movs	r2, #6
 80082f0:	2100      	movs	r1, #0
 80082f2:	4618      	mov	r0, r3
 80082f4:	f00f f872 	bl	80173dc <memset>
              rparams_size = (uint16_t)sizeof(Obj->SysInfo.MAC);
 80082f8:	2306      	movs	r3, #6
 80082fa:	84fb      	strh	r3, [r7, #38]	; 0x26
              if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_WIFI_GET_MAC_CMD,
                                                    NULL, 0,
                                                    Obj->SysInfo.MAC, &rparams_size,
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	f103 026c 	add.w	r2, r3, #108	; 0x6c
              if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_WIFI_GET_MAC_CMD,
 8008302:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008306:	9301      	str	r3, [sp, #4]
 8008308:	f107 0326 	add.w	r3, r7, #38	; 0x26
 800830c:	9300      	str	r3, [sp, #0]
 800830e:	4613      	mov	r3, r2
 8008310:	2200      	movs	r2, #0
 8008312:	2100      	movs	r1, #0
 8008314:	f240 1001 	movw	r0, #257	; 0x101
 8008318:	f7ff fd56 	bl	8007dc8 <mipc_request>
 800831c:	4603      	mov	r3, r0
 800831e:	2b00      	cmp	r3, #0
 8008320:	d116      	bne.n	8008350 <MX_WIFI_Init+0x1bc>
                                                    MX_WIFI_CMD_TIMEOUT))
              {
                ret = MX_WIFI_STATUS_OK;
 8008322:	2300      	movs	r3, #0
 8008324:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                Obj->Runtime.interfaces++;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f893 360e 	ldrb.w	r3, [r3, #1550]	; 0x60e
 800832e:	3301      	adds	r3, #1
 8008330:	b2da      	uxtb	r2, r3
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	f883 260e 	strb.w	r2, [r3, #1550]	; 0x60e
 8008338:	e00a      	b.n	8008350 <MX_WIFI_Init+0x1bc>
        }
      }
    }
    else
    {
      Obj->Runtime.interfaces++;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f893 360e 	ldrb.w	r3, [r3, #1550]	; 0x60e
 8008340:	3301      	adds	r3, #1
 8008342:	b2da      	uxtb	r2, r3
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f883 260e 	strb.w	r2, [r3, #1550]	; 0x60e
      ret = MX_WIFI_STATUS_OK;
 800834a:	2300      	movs	r3, #0
 800834c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  return ret;
 8008350:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8008354:	4618      	mov	r0, r3
 8008356:	3730      	adds	r7, #48	; 0x30
 8008358:	46bd      	mov	sp, r7
 800835a:	bd80      	pop	{r7, pc}
 800835c:	0801b3f4 	.word	0x0801b3f4
 8008360:	0801b374 	.word	0x0801b374
 8008364:	0801b384 	.word	0x0801b384
 8008368:	0801b3b4 	.word	0x0801b3b4
 800836c:	0801b3dc 	.word	0x0801b3dc
 8008370:	0801b3e8 	.word	0x0801b3e8

08008374 <MX_WIFI_DeInit>:


MX_WIFI_STATUS_T MX_WIFI_DeInit(MX_WIFIObject_t *Obj)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b084      	sub	sp, #16
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
  MX_WIFI_STATUS_T ret = MX_WIFI_STATUS_PARAM_ERROR;
 800837c:	23fc      	movs	r3, #252	; 0xfc
 800837e:	73fb      	strb	r3, [r7, #15]

  if (NULL != Obj)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d023      	beq.n	80083ce <MX_WIFI_DeInit+0x5a>
  {
    if (Obj->Runtime.interfaces == 1u)
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	f893 360e 	ldrb.w	r3, [r3, #1550]	; 0x60e
 800838c:	2b01      	cmp	r3, #1
 800838e:	d10f      	bne.n	80083b0 <MX_WIFI_DeInit+0x3c>
#endif /* MX_WIFI_BARE_OS_H */

      /* Delete the thread (depends on implementation). */
      THREAD_DEINIT(MX_WIFI_RecvThreadId);

      (void)mipc_deinit();
 8008390:	f7ff fd0e 	bl	8007db0 <mipc_deinit>
      Obj->fops.IO_DeInit();
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	685b      	ldr	r3, [r3, #4]
 8008398:	4798      	blx	r3
      ret = MX_WIFI_STATUS_OK;
 800839a:	2300      	movs	r3, #0
 800839c:	73fb      	strb	r3, [r7, #15]
      Obj->Runtime.interfaces--;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	f893 360e 	ldrb.w	r3, [r3, #1550]	; 0x60e
 80083a4:	3b01      	subs	r3, #1
 80083a6:	b2da      	uxtb	r2, r3
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f883 260e 	strb.w	r2, [r3, #1550]	; 0x60e
 80083ae:	e00e      	b.n	80083ce <MX_WIFI_DeInit+0x5a>
    }
    else
    {
      ret = MX_WIFI_STATUS_OK;
 80083b0:	2300      	movs	r3, #0
 80083b2:	73fb      	strb	r3, [r7, #15]
      if (Obj->Runtime.interfaces > 0u)
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f893 360e 	ldrb.w	r3, [r3, #1550]	; 0x60e
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d007      	beq.n	80083ce <MX_WIFI_DeInit+0x5a>
      {
        Obj->Runtime.interfaces--;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	f893 360e 	ldrb.w	r3, [r3, #1550]	; 0x60e
 80083c4:	3b01      	subs	r3, #1
 80083c6:	b2da      	uxtb	r2, r3
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f883 260e 	strb.w	r2, [r3, #1550]	; 0x60e
    }
  }

  MX_STAT_LOG();

  return ret;
 80083ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	3710      	adds	r7, #16
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd80      	pop	{r7, pc}

080083da <MX_WIFI_IO_YIELD>:


MX_WIFI_STATUS_T MX_WIFI_IO_YIELD(MX_WIFIObject_t *Obj, uint32_t timeout)
{
 80083da:	b580      	push	{r7, lr}
 80083dc:	b084      	sub	sp, #16
 80083de:	af00      	add	r7, sp, #0
 80083e0:	6078      	str	r0, [r7, #4]
 80083e2:	6039      	str	r1, [r7, #0]
  MX_WIFI_STATUS_T ret = MX_WIFI_STATUS_OK;
 80083e4:	2300      	movs	r3, #0
 80083e6:	73fb      	strb	r3, [r7, #15]
  if (NULL != Obj)
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d002      	beq.n	80083f4 <MX_WIFI_IO_YIELD+0x1a>
  {
    mipc_poll(timeout);
 80083ee:	6838      	ldr	r0, [r7, #0]
 80083f0:	f7ff fd94 	bl	8007f1c <mipc_poll>
  }
  return ret;
 80083f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80083f8:	4618      	mov	r0, r3
 80083fa:	3710      	adds	r7, #16
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bd80      	pop	{r7, pc}

08008400 <MX_WIFI_GetMACAddress>:
  return ret;
}


MX_WIFI_STATUS_T MX_WIFI_GetMACAddress(MX_WIFIObject_t *Obj, uint8_t *Mac)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b084      	sub	sp, #16
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
 8008408:	6039      	str	r1, [r7, #0]
  MX_WIFI_STATUS_T ret = MX_WIFI_STATUS_ERROR;
 800840a:	23ff      	movs	r3, #255	; 0xff
 800840c:	73fb      	strb	r3, [r7, #15]

  if ((NULL != Obj) && (NULL != Mac))
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d00b      	beq.n	800842c <MX_WIFI_GetMACAddress+0x2c>
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d008      	beq.n	800842c <MX_WIFI_GetMACAddress+0x2c>
  {
    (void)memcpy(Mac, Obj->SysInfo.MAC, MX_WIFI_MAC_SIZE);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	336c      	adds	r3, #108	; 0x6c
 800841e:	2206      	movs	r2, #6
 8008420:	4619      	mov	r1, r3
 8008422:	6838      	ldr	r0, [r7, #0]
 8008424:	f00f f899 	bl	801755a <memcpy>
    ret = MX_WIFI_STATUS_OK;
 8008428:	2300      	movs	r3, #0
 800842a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800842c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008430:	4618      	mov	r0, r3
 8008432:	3710      	adds	r7, #16
 8008434:	46bd      	mov	sp, r7
 8008436:	bd80      	pop	{r7, pc}

08008438 <MX_WIFI_GetsoftapMACAddress>:


MX_WIFI_STATUS_T MX_WIFI_GetsoftapMACAddress(MX_WIFIObject_t *Obj, uint8_t *Mac)
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b086      	sub	sp, #24
 800843c:	af02      	add	r7, sp, #8
 800843e:	6078      	str	r0, [r7, #4]
 8008440:	6039      	str	r1, [r7, #0]
  MX_WIFI_STATUS_T ret = MX_WIFI_STATUS_ERROR;
 8008442:	23ff      	movs	r3, #255	; 0xff
 8008444:	73fb      	strb	r3, [r7, #15]

  if ((NULL != Obj) && (NULL != Mac))
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d027      	beq.n	800849c <MX_WIFI_GetsoftapMACAddress+0x64>
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d024      	beq.n	800849c <MX_WIFI_GetsoftapMACAddress+0x64>
  {
    uint16_t rparams_size = MX_WIFI_MAC_SIZE;
 8008452:	2306      	movs	r3, #6
 8008454:	81bb      	strh	r3, [r7, #12]

    (void)memset(&Obj->SysInfo.apMAC[0], 0, MX_WIFI_MAC_SIZE);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	3372      	adds	r3, #114	; 0x72
 800845a:	2206      	movs	r2, #6
 800845c:	2100      	movs	r1, #0
 800845e:	4618      	mov	r0, r3
 8008460:	f00e ffbc 	bl	80173dc <memset>

    if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_WIFI_GET_SOFT_MAC_CMD,
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f103 0272 	add.w	r2, r3, #114	; 0x72
 800846a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800846e:	9301      	str	r3, [sp, #4]
 8008470:	f107 030c 	add.w	r3, r7, #12
 8008474:	9300      	str	r3, [sp, #0]
 8008476:	4613      	mov	r3, r2
 8008478:	2200      	movs	r2, #0
 800847a:	2100      	movs	r1, #0
 800847c:	f240 1015 	movw	r0, #277	; 0x115
 8008480:	f7ff fca2 	bl	8007dc8 <mipc_request>
 8008484:	4603      	mov	r3, r0
 8008486:	2b00      	cmp	r3, #0
 8008488:	d108      	bne.n	800849c <MX_WIFI_GetsoftapMACAddress+0x64>
                                          NULL, 0,
                                          &Obj->SysInfo.apMAC[0],
                                          &rparams_size,
                                          MX_WIFI_CMD_TIMEOUT))
    {
      (void)memcpy(Mac, &Obj->SysInfo.apMAC[0], MX_WIFI_MAC_SIZE);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	3372      	adds	r3, #114	; 0x72
 800848e:	2206      	movs	r2, #6
 8008490:	4619      	mov	r1, r3
 8008492:	6838      	ldr	r0, [r7, #0]
 8008494:	f00f f861 	bl	801755a <memcpy>
      ret = MX_WIFI_STATUS_OK;
 8008498:	2300      	movs	r3, #0
 800849a:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 800849c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80084a0:	4618      	mov	r0, r3
 80084a2:	3710      	adds	r7, #16
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bd80      	pop	{r7, pc}

080084a8 <MX_WIFI_Scan>:


MX_WIFI_STATUS_T MX_WIFI_Scan(MX_WIFIObject_t *Obj, mc_wifi_scan_mode_t ScanMode,
                              char *SSID, int32_t Len)
{
 80084a8:	b5b0      	push	{r4, r5, r7, lr}
 80084aa:	b092      	sub	sp, #72	; 0x48
 80084ac:	af02      	add	r7, sp, #8
 80084ae:	60f8      	str	r0, [r7, #12]
 80084b0:	607a      	str	r2, [r7, #4]
 80084b2:	603b      	str	r3, [r7, #0]
 80084b4:	460b      	mov	r3, r1
 80084b6:	72fb      	strb	r3, [r7, #11]
  MX_WIFI_STATUS_T ret = MX_WIFI_STATUS_ERROR;
 80084b8:	23ff      	movs	r3, #255	; 0xff
 80084ba:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if ((NULL == Obj) ||
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d00b      	beq.n	80084dc <MX_WIFI_Scan+0x34>
 80084c4:	7afb      	ldrb	r3, [r7, #11]
 80084c6:	2b01      	cmp	r3, #1
 80084c8:	d10c      	bne.n	80084e4 <MX_WIFI_Scan+0x3c>
      (((mc_wifi_scan_mode_t)MC_SCAN_ACTIVE == ScanMode) && ((NULL == SSID) || (Len <= 0) || (Len > 32))))
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d005      	beq.n	80084dc <MX_WIFI_Scan+0x34>
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	dd02      	ble.n	80084dc <MX_WIFI_Scan+0x34>
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	2b20      	cmp	r3, #32
 80084da:	dd03      	ble.n	80084e4 <MX_WIFI_Scan+0x3c>
  {
    ret = MX_WIFI_STATUS_PARAM_ERROR;
 80084dc:	23fc      	movs	r3, #252	; 0xfc
 80084de:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80084e2:	e049      	b.n	8008578 <MX_WIFI_Scan+0xd0>
  }
  else
  {
    wifi_scan_cparams_t cparams = {0};
 80084e4:	4b27      	ldr	r3, [pc, #156]	; (8008584 <MX_WIFI_Scan+0xdc>)
 80084e6:	f107 0410 	add.w	r4, r7, #16
 80084ea:	461d      	mov	r5, r3
 80084ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80084ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80084f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80084f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80084f4:	682b      	ldr	r3, [r5, #0]
 80084f6:	7023      	strb	r3, [r4, #0]
    const uint16_t cparams_size = (uint16_t)(sizeof(cparams));
 80084f8:	2321      	movs	r3, #33	; 0x21
 80084fa:	87bb      	strh	r3, [r7, #60]	; 0x3c
    wifi_scan_rparams_t *rparams_p = (wifi_scan_rparams_t *)&Obj->Runtime.scan_result[0];
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8008502:	63bb      	str	r3, [r7, #56]	; 0x38
    uint16_t rparams_p_size = (uint16_t)sizeof(Obj->Runtime.scan_result);
 8008504:	f240 33e9 	movw	r3, #1001	; 0x3e9
 8008508:	86bb      	strh	r3, [r7, #52]	; 0x34

    (void)memcpy(&cparams.ssid[0], SSID, (size_t)MIN(Len, (int32_t)(sizeof(cparams.ssid) - 1)));
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	2b1f      	cmp	r3, #31
 800850e:	dc01      	bgt.n	8008514 <MX_WIFI_Scan+0x6c>
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	e000      	b.n	8008516 <MX_WIFI_Scan+0x6e>
 8008514:	2320      	movs	r3, #32
 8008516:	f107 0010 	add.w	r0, r7, #16
 800851a:	461a      	mov	r2, r3
 800851c:	6879      	ldr	r1, [r7, #4]
 800851e:	f00f f81c 	bl	801755a <memcpy>

    if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_WIFI_SCAN_CMD,
 8008522:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8008524:	f107 0110 	add.w	r1, r7, #16
 8008528:	f241 3388 	movw	r3, #5000	; 0x1388
 800852c:	9301      	str	r3, [sp, #4]
 800852e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008532:	9300      	str	r3, [sp, #0]
 8008534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008536:	f44f 7081 	mov.w	r0, #258	; 0x102
 800853a:	f7ff fc45 	bl	8007dc8 <mipc_request>
 800853e:	4603      	mov	r3, r0
 8008540:	2b00      	cmp	r3, #0
 8008542:	d119      	bne.n	8008578 <MX_WIFI_Scan+0xd0>
                                          (uint8_t *)&cparams, cparams_size,
                                          (uint8_t *)rparams_p, &rparams_p_size,
                                          MX_WIFI_SCAN_TIMEOUT))
    {
      const uint8_t ap_count = rparams_p->num;
 8008544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008546:	781b      	ldrb	r3, [r3, #0]
 8008548:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      memmove(Obj->Runtime.scan_result, &rparams_p->ap[0],
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	f503 7009 	add.w	r0, r3, #548	; 0x224
 8008552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008554:	1c59      	adds	r1, r3, #1
 8008556:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800855a:	4613      	mov	r3, r2
 800855c:	005b      	lsls	r3, r3, #1
 800855e:	4413      	add	r3, r2
 8008560:	011b      	lsls	r3, r3, #4
 8008562:	461a      	mov	r2, r3
 8008564:	f00e ff20 	bl	80173a8 <memmove>
              ap_count * sizeof(mwifi_ap_info_t));

      Obj->Runtime.scan_number = ap_count;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800856e:	f883 260d 	strb.w	r2, [r3, #1549]	; 0x60d

      ret = MX_WIFI_STATUS_OK;
 8008572:	2300      	movs	r3, #0
 8008574:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
  }

  return ret;
 8008578:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800857c:	4618      	mov	r0, r3
 800857e:	3740      	adds	r7, #64	; 0x40
 8008580:	46bd      	mov	sp, r7
 8008582:	bdb0      	pop	{r4, r5, r7, pc}
 8008584:	0801b400 	.word	0x0801b400

08008588 <MX_WIFI_Get_scan_result>:


int8_t MX_WIFI_Get_scan_result(MX_WIFIObject_t *Obj, uint8_t *Results, uint8_t Number)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b086      	sub	sp, #24
 800858c:	af00      	add	r7, sp, #0
 800858e:	60f8      	str	r0, [r7, #12]
 8008590:	60b9      	str	r1, [r7, #8]
 8008592:	4613      	mov	r3, r2
 8008594:	71fb      	strb	r3, [r7, #7]
  uint8_t copy_number = 0;
 8008596:	2300      	movs	r3, #0
 8008598:	75fb      	strb	r3, [r7, #23]

  if ((NULL != Obj) && (NULL != Results) && (0U != Number))
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d019      	beq.n	80085d4 <MX_WIFI_Get_scan_result+0x4c>
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d016      	beq.n	80085d4 <MX_WIFI_Get_scan_result+0x4c>
 80085a6:	79fb      	ldrb	r3, [r7, #7]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d013      	beq.n	80085d4 <MX_WIFI_Get_scan_result+0x4c>
  {
    copy_number = MIN(Obj->Runtime.scan_number, Number);
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	f893 360d 	ldrb.w	r3, [r3, #1549]	; 0x60d
 80085b2:	79fa      	ldrb	r2, [r7, #7]
 80085b4:	4293      	cmp	r3, r2
 80085b6:	bf28      	it	cs
 80085b8:	4613      	movcs	r3, r2
 80085ba:	75fb      	strb	r3, [r7, #23]
    (void)memcpy(Results, Obj->Runtime.scan_result, (size_t)copy_number * sizeof(mwifi_ap_info_t));
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	f503 7109 	add.w	r1, r3, #548	; 0x224
 80085c2:	7dfa      	ldrb	r2, [r7, #23]
 80085c4:	4613      	mov	r3, r2
 80085c6:	005b      	lsls	r3, r3, #1
 80085c8:	4413      	add	r3, r2
 80085ca:	011b      	lsls	r3, r3, #4
 80085cc:	461a      	mov	r2, r3
 80085ce:	68b8      	ldr	r0, [r7, #8]
 80085d0:	f00e ffc3 	bl	801755a <memcpy>
  }

  return (int8_t)copy_number;
 80085d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80085d8:	4618      	mov	r0, r3
 80085da:	3718      	adds	r7, #24
 80085dc:	46bd      	mov	sp, r7
 80085de:	bd80      	pop	{r7, pc}

080085e0 <MX_WIFI_RegisterStatusCallback_if>:

MX_WIFI_STATUS_T MX_WIFI_RegisterStatusCallback_if(MX_WIFIObject_t *Obj,
                                                   mx_wifi_status_callback_t Cb,
                                                   void *Arg,
                                                   mwifi_if_t Interface)
{
 80085e0:	b480      	push	{r7}
 80085e2:	b087      	sub	sp, #28
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	60f8      	str	r0, [r7, #12]
 80085e8:	60b9      	str	r1, [r7, #8]
 80085ea:	607a      	str	r2, [r7, #4]
 80085ec:	70fb      	strb	r3, [r7, #3]
  MX_WIFI_STATUS_T rc = MX_WIFI_STATUS_ERROR;
 80085ee:	23ff      	movs	r3, #255	; 0xff
 80085f0:	75fb      	strb	r3, [r7, #23]

  if (NULL != Obj)
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d016      	beq.n	8008626 <MX_WIFI_RegisterStatusCallback_if+0x46>
  {
    const uint8_t interface_num = ((mwifi_if_t)MC_SOFTAP == Interface) ? 1 : 0;
 80085f8:	78fb      	ldrb	r3, [r7, #3]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	bf0c      	ite	eq
 80085fe:	2301      	moveq	r3, #1
 8008600:	2300      	movne	r3, #0
 8008602:	b2db      	uxtb	r3, r3
 8008604:	75bb      	strb	r3, [r7, #22]

    Obj->Runtime.status_cb[interface_num] = Cb;
 8008606:	7dbb      	ldrb	r3, [r7, #22]
 8008608:	68fa      	ldr	r2, [r7, #12]
 800860a:	3380      	adds	r3, #128	; 0x80
 800860c:	009b      	lsls	r3, r3, #2
 800860e:	4413      	add	r3, r2
 8008610:	68ba      	ldr	r2, [r7, #8]
 8008612:	605a      	str	r2, [r3, #4]
    Obj->Runtime.callback_arg[interface_num] = Arg;
 8008614:	7dbb      	ldrb	r3, [r7, #22]
 8008616:	68fa      	ldr	r2, [r7, #12]
 8008618:	3382      	adds	r3, #130	; 0x82
 800861a:	009b      	lsls	r3, r3, #2
 800861c:	4413      	add	r3, r2
 800861e:	687a      	ldr	r2, [r7, #4]
 8008620:	605a      	str	r2, [r3, #4]
    rc = MX_WIFI_STATUS_OK;
 8008622:	2300      	movs	r3, #0
 8008624:	75fb      	strb	r3, [r7, #23]
  }

  return rc;
 8008626:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800862a:	4618      	mov	r0, r3
 800862c:	371c      	adds	r7, #28
 800862e:	46bd      	mov	sp, r7
 8008630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008634:	4770      	bx	lr

08008636 <MX_WIFI_Connect>:
}


MX_WIFI_STATUS_T MX_WIFI_Connect(MX_WIFIObject_t *Obj, const mx_char_t *SSID,
                                 const mx_char_t *Password, MX_WIFI_SecurityType_t SecType)
{
 8008636:	b5b0      	push	{r4, r5, r7, lr}
 8008638:	b0cc      	sub	sp, #304	; 0x130
 800863a:	af02      	add	r7, sp, #8
 800863c:	f507 7494 	add.w	r4, r7, #296	; 0x128
 8008640:	f5a4 748e 	sub.w	r4, r4, #284	; 0x11c
 8008644:	6020      	str	r0, [r4, #0]
 8008646:	f507 7094 	add.w	r0, r7, #296	; 0x128
 800864a:	f5a0 7090 	sub.w	r0, r0, #288	; 0x120
 800864e:	6001      	str	r1, [r0, #0]
 8008650:	f507 7194 	add.w	r1, r7, #296	; 0x128
 8008654:	f5a1 7192 	sub.w	r1, r1, #292	; 0x124
 8008658:	600a      	str	r2, [r1, #0]
 800865a:	461a      	mov	r2, r3
 800865c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8008660:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8008664:	701a      	strb	r2, [r3, #0]
  MX_WIFI_STATUS_T ret = MX_WIFI_STATUS_ERROR;
 8008666:	23ff      	movs	r3, #255	; 0xff
 8008668:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

  (void)SecType;

  if ((NULL != Obj) && (NULL != SSID) && (NULL != Password))
 800866c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8008670:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	2b00      	cmp	r3, #0
 8008678:	f000 80ff 	beq.w	800887a <MX_WIFI_Connect+0x244>
 800867c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8008680:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	2b00      	cmp	r3, #0
 8008688:	f000 80f7 	beq.w	800887a <MX_WIFI_Connect+0x244>
 800868c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8008690:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	2b00      	cmp	r3, #0
 8008698:	f000 80ef 	beq.w	800887a <MX_WIFI_Connect+0x244>
  {
    const size_t ssid_len = strlen(SSID);
 800869c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80086a0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80086a4:	6818      	ldr	r0, [r3, #0]
 80086a6:	f7f7 fde7 	bl	8000278 <strlen>
 80086aa:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
    const size_t password_len = strlen(Password);
 80086ae:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80086b2:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80086b6:	6818      	ldr	r0, [r3, #0]
 80086b8:	f7f7 fdde 	bl	8000278 <strlen>
 80086bc:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c

    if ((ssid_len > (uint32_t)MX_MAX_SSID_LEN) || (password_len > (uint32_t)MX_MAX_KEY_LEN))
 80086c0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80086c4:	2b20      	cmp	r3, #32
 80086c6:	d803      	bhi.n	80086d0 <MX_WIFI_Connect+0x9a>
 80086c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80086cc:	2b40      	cmp	r3, #64	; 0x40
 80086ce:	d903      	bls.n	80086d8 <MX_WIFI_Connect+0xa2>
    {
      ret = MX_WIFI_STATUS_PARAM_ERROR;
 80086d0:	23fc      	movs	r3, #252	; 0xfc
 80086d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
 80086d6:	e0d0      	b.n	800887a <MX_WIFI_Connect+0x244>
    }
    else
    {
      wifi_connect_cparams_t cp = {0};
 80086d8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80086dc:	22b0      	movs	r2, #176	; 0xb0
 80086de:	2100      	movs	r1, #0
 80086e0:	4618      	mov	r0, r3
 80086e2:	f00e fe7b 	bl	80173dc <memset>
      const uint16_t cp_size = (uint16_t)(sizeof(cp));
 80086e6:	23b0      	movs	r3, #176	; 0xb0
 80086e8:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
      int32_t status = MIPC_CODE_ERROR;
 80086ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80086f0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
      uint16_t status_size = (uint16_t)sizeof(status);
 80086f4:	2304      	movs	r3, #4
 80086f6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112

      MX_WIFI_STRNCPY(cp.ssid, SSID);
 80086fa:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80086fe:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8008702:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8008706:	2220      	movs	r2, #32
 8008708:	6819      	ldr	r1, [r3, #0]
 800870a:	f001 fbde 	bl	8009eca <void_strncpy>
      MX_WIFI_STRNCPY(cp.key, Password);
 800870e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8008712:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8008716:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800871a:	f102 0021 	add.w	r0, r2, #33	; 0x21
 800871e:	2240      	movs	r2, #64	; 0x40
 8008720:	6819      	ldr	r1, [r3, #0]
 8008722:	f001 fbd2 	bl	8009eca <void_strncpy>
      cp.key_len = (int32_t)password_len;
 8008726:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800872a:	f8c7 30b2 	str.w	r3, [r7, #178]	; 0xb2

      if ((uint8_t)0 == Obj->NetSettings.DHCP_IsEnabled)
 800872e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8008732:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f893 30db 	ldrb.w	r3, [r3, #219]	; 0xdb
 800873c:	2b00      	cmp	r3, #0
 800873e:	f040 8081 	bne.w	8008844 <MX_WIFI_Connect+0x20e>
      {
        mwifi_ip_attr_t ip_attr = {0};
 8008742:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8008746:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800874a:	4618      	mov	r0, r3
 800874c:	2340      	movs	r3, #64	; 0x40
 800874e:	461a      	mov	r2, r3
 8008750:	2100      	movs	r1, #0
 8008752:	f00e fe43 	bl	80173dc <memset>
        {
          mx_ip_addr_t ip_addr = {0};
 8008756:	2300      	movs	r3, #0
 8008758:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          (void)memcpy(&ip_addr, Obj->NetSettings.IP_Addr, sizeof(ip_addr));
 800875c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8008760:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	33dd      	adds	r3, #221	; 0xdd
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          MX_WIFI_STRNCPY(ip_attr.localip, mx_ntoa(&ip_addr));
 800876e:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8008772:	4618      	mov	r0, r3
 8008774:	f7fe ffa4 	bl	80076c0 <mx_ntoa>
 8008778:	4601      	mov	r1, r0
 800877a:	f107 0310 	add.w	r3, r7, #16
 800877e:	220f      	movs	r2, #15
 8008780:	4618      	mov	r0, r3
 8008782:	f001 fba2 	bl	8009eca <void_strncpy>
        }
        {
          mx_ip_addr_t ip_mask = {0};
 8008786:	2300      	movs	r3, #0
 8008788:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          (void)memcpy(&ip_mask, Obj->NetSettings.IP_Mask, sizeof(ip_mask));
 800878c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8008790:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	33e1      	adds	r3, #225	; 0xe1
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          MX_WIFI_STRNCPY(ip_attr.netmask, mx_ntoa(&ip_mask));
 800879e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087a2:	4618      	mov	r0, r3
 80087a4:	f7fe ff8c 	bl	80076c0 <mx_ntoa>
 80087a8:	4601      	mov	r1, r0
 80087aa:	f107 0310 	add.w	r3, r7, #16
 80087ae:	3310      	adds	r3, #16
 80087b0:	220f      	movs	r2, #15
 80087b2:	4618      	mov	r0, r3
 80087b4:	f001 fb89 	bl	8009eca <void_strncpy>
        }
        {
          mx_ip_addr_t gateway_ip_addr = {0};
 80087b8:	2300      	movs	r3, #0
 80087ba:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          (void)memcpy(&gateway_ip_addr, Obj->NetSettings.Gateway_Addr, sizeof(gateway_ip_addr));
 80087be:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80087c2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	33e5      	adds	r3, #229	; 0xe5
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          MX_WIFI_STRNCPY(ip_attr.gateway, mx_ntoa(&gateway_ip_addr));
 80087d0:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80087d4:	4618      	mov	r0, r3
 80087d6:	f7fe ff73 	bl	80076c0 <mx_ntoa>
 80087da:	4601      	mov	r1, r0
 80087dc:	f107 0310 	add.w	r3, r7, #16
 80087e0:	3320      	adds	r3, #32
 80087e2:	220f      	movs	r2, #15
 80087e4:	4618      	mov	r0, r3
 80087e6:	f001 fb70 	bl	8009eca <void_strncpy>
        }
        {
          mx_ip_addr_t dns_ip_addr = {0};
 80087ea:	2300      	movs	r3, #0
 80087ec:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
          (void)memcpy(&dns_ip_addr, Obj->NetSettings.DNS1, sizeof(dns_ip_addr));
 80087f0:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80087f4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	33e9      	adds	r3, #233	; 0xe9
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
          MX_WIFI_STRNCPY(ip_attr.dnserver, mx_ntoa(&dns_ip_addr));
 8008802:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8008806:	4618      	mov	r0, r3
 8008808:	f7fe ff5a 	bl	80076c0 <mx_ntoa>
 800880c:	4601      	mov	r1, r0
 800880e:	f107 0310 	add.w	r3, r7, #16
 8008812:	3330      	adds	r3, #48	; 0x30
 8008814:	220f      	movs	r2, #15
 8008816:	4618      	mov	r0, r3
 8008818:	f001 fb57 	bl	8009eca <void_strncpy>
        }

        cp.use_ip = 1;
 800881c:	2301      	movs	r3, #1
 800881e:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
        cp.ip = ip_attr;
 8008822:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8008826:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800882a:	f107 04c0 	add.w	r4, r7, #192	; 0xc0
 800882e:	461d      	mov	r5, r3
 8008830:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008832:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008834:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008836:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008838:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800883a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800883c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8008840:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      }

      if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_WIFI_CONNECT_CMD,
 8008844:	f507 708a 	add.w	r0, r7, #276	; 0x114
 8008848:	f8b7 211a 	ldrh.w	r2, [r7, #282]	; 0x11a
 800884c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8008850:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008854:	9301      	str	r3, [sp, #4]
 8008856:	f507 7389 	add.w	r3, r7, #274	; 0x112
 800885a:	9300      	str	r3, [sp, #0]
 800885c:	4603      	mov	r3, r0
 800885e:	f240 1003 	movw	r0, #259	; 0x103
 8008862:	f7ff fab1 	bl	8007dc8 <mipc_request>
 8008866:	4603      	mov	r3, r0
 8008868:	2b00      	cmp	r3, #0
 800886a:	d106      	bne.n	800887a <MX_WIFI_Connect+0x244>
                                            (uint8_t *)&cp, cp_size,
                                            (uint8_t *)&status, &status_size,
                                            MX_WIFI_CMD_TIMEOUT))
      {
        if (MIPC_CODE_SUCCESS == status)
 800886c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008870:	2b00      	cmp	r3, #0
 8008872:	d102      	bne.n	800887a <MX_WIFI_Connect+0x244>
        {
          ret = MX_WIFI_STATUS_OK;
 8008874:	2300      	movs	r3, #0
 8008876:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        }
      }
    }
  }

  return ret;
 800887a:	f997 3127 	ldrsb.w	r3, [r7, #295]	; 0x127
}
 800887e:	4618      	mov	r0, r3
 8008880:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8008884:	46bd      	mov	sp, r7
 8008886:	bdb0      	pop	{r4, r5, r7, pc}

08008888 <MX_WIFI_Disconnect>:
  return ret;
}


MX_WIFI_STATUS_T MX_WIFI_Disconnect(MX_WIFIObject_t *Obj)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b088      	sub	sp, #32
 800888c:	af02      	add	r7, sp, #8
 800888e:	6078      	str	r0, [r7, #4]
  MX_WIFI_STATUS_T ret = MX_WIFI_STATUS_ERROR;
 8008890:	23ff      	movs	r3, #255	; 0xff
 8008892:	75fb      	strb	r3, [r7, #23]

  if (NULL != Obj)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d01b      	beq.n	80088d2 <MX_WIFI_Disconnect+0x4a>
  {
    int32_t status = MIPC_CODE_ERROR;
 800889a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800889e:	613b      	str	r3, [r7, #16]
    uint16_t status_size = (uint16_t)sizeof(status);
 80088a0:	2304      	movs	r3, #4
 80088a2:	81fb      	strh	r3, [r7, #14]
    if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_WIFI_DISCONNECT_CMD, NULL, 0,
 80088a4:	f107 0210 	add.w	r2, r7, #16
 80088a8:	f643 2398 	movw	r3, #15000	; 0x3a98
 80088ac:	9301      	str	r3, [sp, #4]
 80088ae:	f107 030e 	add.w	r3, r7, #14
 80088b2:	9300      	str	r3, [sp, #0]
 80088b4:	4613      	mov	r3, r2
 80088b6:	2200      	movs	r2, #0
 80088b8:	2100      	movs	r1, #0
 80088ba:	f44f 7082 	mov.w	r0, #260	; 0x104
 80088be:	f7ff fa83 	bl	8007dc8 <mipc_request>
 80088c2:	4603      	mov	r3, r0
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d104      	bne.n	80088d2 <MX_WIFI_Disconnect+0x4a>
                                          (uint8_t *)&status, &status_size,
                                          15000))  /* disconnect max timeout 15s */
    {
      if (MIPC_CODE_SUCCESS == status)
 80088c8:	693b      	ldr	r3, [r7, #16]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d101      	bne.n	80088d2 <MX_WIFI_Disconnect+0x4a>
      {
        ret = MX_WIFI_STATUS_OK;
 80088ce:	2300      	movs	r3, #0
 80088d0:	75fb      	strb	r3, [r7, #23]
      }
    }
  }
  return ret;
 80088d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80088d6:	4618      	mov	r0, r3
 80088d8:	3718      	adds	r7, #24
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd80      	pop	{r7, pc}

080088de <MX_WIFI_WPS_Connect>:


MX_WIFI_STATUS_T MX_WIFI_WPS_Connect(MX_WIFIObject_t *Obj)
{
 80088de:	b580      	push	{r7, lr}
 80088e0:	b088      	sub	sp, #32
 80088e2:	af02      	add	r7, sp, #8
 80088e4:	6078      	str	r0, [r7, #4]
  MX_WIFI_STATUS_T ret = MX_WIFI_STATUS_ERROR;
 80088e6:	23ff      	movs	r3, #255	; 0xff
 80088e8:	75fb      	strb	r3, [r7, #23]

  if (NULL != Obj)
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d01b      	beq.n	8008928 <MX_WIFI_WPS_Connect+0x4a>
  {
    int32_t status = MIPC_CODE_ERROR;
 80088f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80088f4:	613b      	str	r3, [r7, #16]
    uint16_t status_size = (uint16_t)sizeof(status);
 80088f6:	2304      	movs	r3, #4
 80088f8:	81fb      	strh	r3, [r7, #14]

    if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_WIFI_WPS_CONNECT_CMD, NULL, 0,
 80088fa:	f107 0210 	add.w	r2, r7, #16
 80088fe:	f643 2398 	movw	r3, #15000	; 0x3a98
 8008902:	9301      	str	r3, [sp, #4]
 8008904:	f107 030e 	add.w	r3, r7, #14
 8008908:	9300      	str	r3, [sp, #0]
 800890a:	4613      	mov	r3, r2
 800890c:	2200      	movs	r2, #0
 800890e:	2100      	movs	r1, #0
 8008910:	f240 1011 	movw	r0, #273	; 0x111
 8008914:	f7ff fa58 	bl	8007dc8 <mipc_request>
 8008918:	4603      	mov	r3, r0
 800891a:	2b00      	cmp	r3, #0
 800891c:	d104      	bne.n	8008928 <MX_WIFI_WPS_Connect+0x4a>
                                          (uint8_t *)&status, &status_size,
                                          15000))
    {
      if (MIPC_CODE_SUCCESS == status)
 800891e:	693b      	ldr	r3, [r7, #16]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d101      	bne.n	8008928 <MX_WIFI_WPS_Connect+0x4a>
      {
        ret = MX_WIFI_STATUS_OK;
 8008924:	2300      	movs	r3, #0
 8008926:	75fb      	strb	r3, [r7, #23]
      }
    }
  }

  return ret;
 8008928:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800892c:	4618      	mov	r0, r3
 800892e:	3718      	adds	r7, #24
 8008930:	46bd      	mov	sp, r7
 8008932:	bd80      	pop	{r7, pc}

08008934 <MX_WIFI_WPS_Stop>:


MX_WIFI_STATUS_T MX_WIFI_WPS_Stop(MX_WIFIObject_t *Obj)
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b088      	sub	sp, #32
 8008938:	af02      	add	r7, sp, #8
 800893a:	6078      	str	r0, [r7, #4]
  MX_WIFI_STATUS_T ret = MX_WIFI_STATUS_ERROR;
 800893c:	23ff      	movs	r3, #255	; 0xff
 800893e:	75fb      	strb	r3, [r7, #23]

  if (NULL != Obj)
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d01b      	beq.n	800897e <MX_WIFI_WPS_Stop+0x4a>
  {
    int32_t status = MIPC_CODE_ERROR;
 8008946:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800894a:	613b      	str	r3, [r7, #16]
    uint16_t status_size = (uint16_t)sizeof(status);
 800894c:	2304      	movs	r3, #4
 800894e:	81fb      	strh	r3, [r7, #14]
    if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_WIFI_WPS_STOP_CMD, NULL, 0,
 8008950:	f107 0210 	add.w	r2, r7, #16
 8008954:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008958:	9301      	str	r3, [sp, #4]
 800895a:	f107 030e 	add.w	r3, r7, #14
 800895e:	9300      	str	r3, [sp, #0]
 8008960:	4613      	mov	r3, r2
 8008962:	2200      	movs	r2, #0
 8008964:	2100      	movs	r1, #0
 8008966:	f44f 7089 	mov.w	r0, #274	; 0x112
 800896a:	f7ff fa2d 	bl	8007dc8 <mipc_request>
 800896e:	4603      	mov	r3, r0
 8008970:	2b00      	cmp	r3, #0
 8008972:	d104      	bne.n	800897e <MX_WIFI_WPS_Stop+0x4a>
                                          (uint8_t *)&status, &status_size,
                                          MX_WIFI_CMD_TIMEOUT))
    {
      if (MIPC_CODE_SUCCESS == status)
 8008974:	693b      	ldr	r3, [r7, #16]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d101      	bne.n	800897e <MX_WIFI_WPS_Stop+0x4a>
      {
        ret = MX_WIFI_STATUS_OK;
 800897a:	2300      	movs	r3, #0
 800897c:	75fb      	strb	r3, [r7, #23]
      }
    }
  }

  return ret;
 800897e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008982:	4618      	mov	r0, r3
 8008984:	3718      	adds	r7, #24
 8008986:	46bd      	mov	sp, r7
 8008988:	bd80      	pop	{r7, pc}

0800898a <MX_WIFI_GetIPAddress>:
  return ret;
}


MX_WIFI_STATUS_T MX_WIFI_GetIPAddress(MX_WIFIObject_t *Obj, uint8_t *IpAddr, mwifi_if_t WifiMode)
{
 800898a:	b580      	push	{r7, lr}
 800898c:	b09e      	sub	sp, #120	; 0x78
 800898e:	af02      	add	r7, sp, #8
 8008990:	60f8      	str	r0, [r7, #12]
 8008992:	60b9      	str	r1, [r7, #8]
 8008994:	4613      	mov	r3, r2
 8008996:	71fb      	strb	r3, [r7, #7]
  MX_WIFI_STATUS_T ret = MX_WIFI_STATUS_ERROR;
 8008998:	23ff      	movs	r3, #255	; 0xff
 800899a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

  if (NULL != Obj)
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d067      	beq.n	8008a74 <MX_WIFI_GetIPAddress+0xea>
  {
    wifi_get_ip_rparams_t rp = {0};
 80089a4:	f107 0314 	add.w	r3, r7, #20
 80089a8:	2244      	movs	r2, #68	; 0x44
 80089aa:	2100      	movs	r1, #0
 80089ac:	4618      	mov	r0, r3
 80089ae:	f00e fd15 	bl	80173dc <memset>
    uint16_t rp_size = (uint16_t)sizeof(rp);
 80089b2:	2344      	movs	r3, #68	; 0x44
 80089b4:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
    uint8_t interface_num = ((mwifi_if_t)MC_SOFTAP == WifiMode) ? 0 : 1;
 80089b8:	79fb      	ldrb	r3, [r7, #7]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	bf14      	ite	ne
 80089be:	2301      	movne	r3, #1
 80089c0:	2300      	moveq	r3, #0
 80089c2:	b2db      	uxtb	r3, r3
 80089c4:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
    const uint16_t interface_num_size = (uint16_t)(sizeof(interface_num));
 80089c8:	2301      	movs	r3, #1
 80089ca:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

    rp.status = MIPC_CODE_ERROR;
 80089ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80089d2:	617b      	str	r3, [r7, #20]

    if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_WIFI_GET_IP_CMD,
 80089d4:	f107 0014 	add.w	r0, r7, #20
 80089d8:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80089dc:	f107 0169 	add.w	r1, r7, #105	; 0x69
 80089e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80089e4:	9301      	str	r3, [sp, #4]
 80089e6:	f107 036a 	add.w	r3, r7, #106	; 0x6a
 80089ea:	9300      	str	r3, [sp, #0]
 80089ec:	4603      	mov	r3, r0
 80089ee:	f240 1007 	movw	r0, #263	; 0x107
 80089f2:	f7ff f9e9 	bl	8007dc8 <mipc_request>
 80089f6:	4603      	mov	r3, r0
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d13b      	bne.n	8008a74 <MX_WIFI_GetIPAddress+0xea>
                                          &interface_num, interface_num_size,
                                          (uint8_t *)&rp, &rp_size,
                                          1000))
    {
      if (MIPC_CODE_SUCCESS == rp.status)
 80089fc:	697b      	ldr	r3, [r7, #20]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d138      	bne.n	8008a74 <MX_WIFI_GetIPAddress+0xea>
      {
        {
          int32_t ip = mx_aton_r(&rp.ip.localip[0]);
 8008a02:	f107 0314 	add.w	r3, r7, #20
 8008a06:	3304      	adds	r3, #4
 8008a08:	4618      	mov	r0, r3
 8008a0a:	f7fe fe41 	bl	8007690 <mx_aton_r>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	667b      	str	r3, [r7, #100]	; 0x64
          (void)memcpy(&Obj->NetSettings.IP_Addr[0], &ip, sizeof(Obj->NetSettings.IP_Addr));
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	33dd      	adds	r3, #221	; 0xdd
 8008a16:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008a18:	601a      	str	r2, [r3, #0]
        }
        {
          int32_t netmask = mx_aton_r(&rp.ip.netmask[0]);
 8008a1a:	f107 0314 	add.w	r3, r7, #20
 8008a1e:	3314      	adds	r3, #20
 8008a20:	4618      	mov	r0, r3
 8008a22:	f7fe fe35 	bl	8007690 <mx_aton_r>
 8008a26:	4603      	mov	r3, r0
 8008a28:	663b      	str	r3, [r7, #96]	; 0x60
          (void)memcpy(&Obj->NetSettings.IP_Mask[0], &netmask, sizeof(Obj->NetSettings.IP_Mask));
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	33e1      	adds	r3, #225	; 0xe1
 8008a2e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008a30:	601a      	str	r2, [r3, #0]
        }
        {
          int32_t gw = mx_aton_r(&rp.ip.gateway[0]);
 8008a32:	f107 0314 	add.w	r3, r7, #20
 8008a36:	3324      	adds	r3, #36	; 0x24
 8008a38:	4618      	mov	r0, r3
 8008a3a:	f7fe fe29 	bl	8007690 <mx_aton_r>
 8008a3e:	4603      	mov	r3, r0
 8008a40:	65fb      	str	r3, [r7, #92]	; 0x5c
          (void)memcpy(&Obj->NetSettings.Gateway_Addr[0], &gw, sizeof(Obj->NetSettings.Gateway_Addr));
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	33e5      	adds	r3, #229	; 0xe5
 8008a46:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008a48:	601a      	str	r2, [r3, #0]
        }
        {
          int32_t dns = mx_aton_r(&rp.ip.dnserver[0]);
 8008a4a:	f107 0314 	add.w	r3, r7, #20
 8008a4e:	3334      	adds	r3, #52	; 0x34
 8008a50:	4618      	mov	r0, r3
 8008a52:	f7fe fe1d 	bl	8007690 <mx_aton_r>
 8008a56:	4603      	mov	r3, r0
 8008a58:	65bb      	str	r3, [r7, #88]	; 0x58
          (void)memcpy(&Obj->NetSettings.DNS1[0], &dns, sizeof(Obj->NetSettings.DNS1));
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	33e9      	adds	r3, #233	; 0xe9
 8008a5e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008a60:	601a      	str	r2, [r3, #0]
        }
        (void)memcpy(IpAddr, Obj->NetSettings.IP_Addr, sizeof(Obj->NetSettings.IP_Addr));
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	33dd      	adds	r3, #221	; 0xdd
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	461a      	mov	r2, r3
 8008a6a:	68bb      	ldr	r3, [r7, #8]
 8008a6c:	601a      	str	r2, [r3, #0]
        ret = MX_WIFI_STATUS_OK;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      }
    }
  }

  return ret;
 8008a74:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 8008a78:	4618      	mov	r0, r3
 8008a7a:	3770      	adds	r7, #112	; 0x70
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bd80      	pop	{r7, pc}

08008a80 <MX_WIFI_StartAP>:
  * SoftAP
  */


MX_WIFI_STATUS_T MX_WIFI_StartAP(MX_WIFIObject_t *Obj, MX_WIFI_APSettings_t *ApSettings)
{
 8008a80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a82:	b0b1      	sub	sp, #196	; 0xc4
 8008a84:	af02      	add	r7, sp, #8
 8008a86:	6078      	str	r0, [r7, #4]
 8008a88:	6039      	str	r1, [r7, #0]
  MX_WIFI_STATUS_T ret = MX_WIFI_STATUS_ERROR;
 8008a8a:	23ff      	movs	r3, #255	; 0xff
 8008a8c:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7

  if ((NULL != Obj) && (NULL != ApSettings))
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d064      	beq.n	8008b60 <MX_WIFI_StartAP+0xe0>
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d061      	beq.n	8008b60 <MX_WIFI_StartAP+0xe0>
  {
    wifi_softap_start_cparams_t cp = {0};
 8008a9c:	f107 0308 	add.w	r3, r7, #8
 8008aa0:	22a4      	movs	r2, #164	; 0xa4
 8008aa2:	2100      	movs	r1, #0
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	f00e fc99 	bl	80173dc <memset>
    const uint16_t cp_size = (uint16_t)(sizeof(cp));
 8008aaa:	23a4      	movs	r3, #164	; 0xa4
 8008aac:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
    int32_t status = MIPC_CODE_ERROR;
 8008ab0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008ab4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    uint16_t status_size = (uint16_t)sizeof(status);
 8008ab8:	2304      	movs	r3, #4
 8008aba:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae

    (void)memcpy((char *)cp.ssid, ApSettings->SSID, sizeof(cp.ssid));
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	f107 0408 	add.w	r4, r7, #8
 8008ac4:	461d      	mov	r5, r3
 8008ac6:	6828      	ldr	r0, [r5, #0]
 8008ac8:	6869      	ldr	r1, [r5, #4]
 8008aca:	68aa      	ldr	r2, [r5, #8]
 8008acc:	68eb      	ldr	r3, [r5, #12]
 8008ace:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008ad0:	6928      	ldr	r0, [r5, #16]
 8008ad2:	6969      	ldr	r1, [r5, #20]
 8008ad4:	69aa      	ldr	r2, [r5, #24]
 8008ad6:	69eb      	ldr	r3, [r5, #28]
 8008ad8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    (void)memcpy((char *)cp.key, ApSettings->pswd, sizeof(cp.key));
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	3321      	adds	r3, #33	; 0x21
 8008ade:	461c      	mov	r4, r3
 8008ae0:	f107 0628 	add.w	r6, r7, #40	; 0x28
 8008ae4:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 8008ae8:	4635      	mov	r5, r6
 8008aea:	4623      	mov	r3, r4
 8008aec:	6818      	ldr	r0, [r3, #0]
 8008aee:	6859      	ldr	r1, [r3, #4]
 8008af0:	689a      	ldr	r2, [r3, #8]
 8008af2:	68db      	ldr	r3, [r3, #12]
 8008af4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008af6:	3410      	adds	r4, #16
 8008af8:	3610      	adds	r6, #16
 8008afa:	4564      	cmp	r4, ip
 8008afc:	d1f4      	bne.n	8008ae8 <MX_WIFI_StartAP+0x68>
    cp.channel = (int32_t)ApSettings->channel;
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8008b04:	66bb      	str	r3, [r7, #104]	; 0x68
    (void)memcpy(&cp.ip, &ApSettings->ip, sizeof(cp.ip));
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	3363      	adds	r3, #99	; 0x63
 8008b0a:	461c      	mov	r4, r3
 8008b0c:	f107 066c 	add.w	r6, r7, #108	; 0x6c
 8008b10:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 8008b14:	4635      	mov	r5, r6
 8008b16:	4623      	mov	r3, r4
 8008b18:	6818      	ldr	r0, [r3, #0]
 8008b1a:	6859      	ldr	r1, [r3, #4]
 8008b1c:	689a      	ldr	r2, [r3, #8]
 8008b1e:	68db      	ldr	r3, [r3, #12]
 8008b20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008b22:	3410      	adds	r4, #16
 8008b24:	3610      	adds	r6, #16
 8008b26:	4564      	cmp	r4, ip
 8008b28:	d1f4      	bne.n	8008b14 <MX_WIFI_StartAP+0x94>

    if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_WIFI_SOFTAP_START_CMD,
 8008b2a:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8008b2e:	f8b7 20b4 	ldrh.w	r2, [r7, #180]	; 0xb4
 8008b32:	f107 0108 	add.w	r1, r7, #8
 8008b36:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8008b3a:	9301      	str	r3, [sp, #4]
 8008b3c:	f107 03ae 	add.w	r3, r7, #174	; 0xae
 8008b40:	9300      	str	r3, [sp, #0]
 8008b42:	4603      	mov	r3, r0
 8008b44:	f240 1005 	movw	r0, #261	; 0x105
 8008b48:	f7ff f93e 	bl	8007dc8 <mipc_request>
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d106      	bne.n	8008b60 <MX_WIFI_StartAP+0xe0>
                                          (uint8_t *)&cp, cp_size,
                                          (uint8_t *)&status, &status_size,
                                          3000))
    {
      if (MIPC_CODE_SUCCESS == status)
 8008b52:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d102      	bne.n	8008b60 <MX_WIFI_StartAP+0xe0>
      {
        ret = MX_WIFI_STATUS_OK;
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
      }
    }
  }

  return ret;
 8008b60:	f997 30b7 	ldrsb.w	r3, [r7, #183]	; 0xb7
}
 8008b64:	4618      	mov	r0, r3
 8008b66:	37bc      	adds	r7, #188	; 0xbc
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008b6c <MX_WIFI_StopAP>:


MX_WIFI_STATUS_T MX_WIFI_StopAP(MX_WIFIObject_t *Obj)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b088      	sub	sp, #32
 8008b70:	af02      	add	r7, sp, #8
 8008b72:	6078      	str	r0, [r7, #4]
  MX_WIFI_STATUS_T ret = MX_WIFI_STATUS_ERROR;
 8008b74:	23ff      	movs	r3, #255	; 0xff
 8008b76:	75fb      	strb	r3, [r7, #23]

  if (NULL != Obj)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d01b      	beq.n	8008bb6 <MX_WIFI_StopAP+0x4a>
  {
    int32_t status = MIPC_CODE_ERROR;
 8008b7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008b82:	613b      	str	r3, [r7, #16]
    uint16_t status_size = (uint16_t)sizeof(status);
 8008b84:	2304      	movs	r3, #4
 8008b86:	81fb      	strh	r3, [r7, #14]

    if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_WIFI_SOFTAP_STOP_CMD, NULL, 0,
 8008b88:	f107 0210 	add.w	r2, r7, #16
 8008b8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008b90:	9301      	str	r3, [sp, #4]
 8008b92:	f107 030e 	add.w	r3, r7, #14
 8008b96:	9300      	str	r3, [sp, #0]
 8008b98:	4613      	mov	r3, r2
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	2100      	movs	r1, #0
 8008b9e:	f44f 7083 	mov.w	r0, #262	; 0x106
 8008ba2:	f7ff f911 	bl	8007dc8 <mipc_request>
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d104      	bne.n	8008bb6 <MX_WIFI_StopAP+0x4a>
                                          (uint8_t *)&status, &status_size,
                                          MX_WIFI_CMD_TIMEOUT))
    {
      if (MIPC_CODE_SUCCESS == status)
 8008bac:	693b      	ldr	r3, [r7, #16]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d101      	bne.n	8008bb6 <MX_WIFI_StopAP+0x4a>
      {
        ret = MX_WIFI_STATUS_OK;
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	75fb      	strb	r3, [r7, #23]
      }
    }
  }

  return ret;
 8008bb6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008bba:	4618      	mov	r0, r3
 8008bbc:	3718      	adds	r7, #24
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	bd80      	pop	{r7, pc}

08008bc2 <MX_WIFI_Socket_create>:


#if (MX_WIFI_NETWORK_BYPASS_MODE == 0)

int32_t MX_WIFI_Socket_create(MX_WIFIObject_t *Obj, int32_t Domain, int32_t Type, int32_t Protocol)
{
 8008bc2:	b580      	push	{r7, lr}
 8008bc4:	b08e      	sub	sp, #56	; 0x38
 8008bc6:	af02      	add	r7, sp, #8
 8008bc8:	60f8      	str	r0, [r7, #12]
 8008bca:	60b9      	str	r1, [r7, #8]
 8008bcc:	607a      	str	r2, [r7, #4]
 8008bce:	603b      	str	r3, [r7, #0]
  int32_t ret_fd = -1;
 8008bd0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008bd4:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (NULL != Obj)
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d026      	beq.n	8008c2a <MX_WIFI_Socket_create+0x68>
  {
    socket_create_cparams_t cp = {0};
 8008bdc:	f107 031c 	add.w	r3, r7, #28
 8008be0:	2200      	movs	r2, #0
 8008be2:	601a      	str	r2, [r3, #0]
 8008be4:	605a      	str	r2, [r3, #4]
 8008be6:	609a      	str	r2, [r3, #8]
    const uint16_t cp_size = (uint16_t)(sizeof(cp));
 8008be8:	230c      	movs	r3, #12
 8008bea:	857b      	strh	r3, [r7, #42]	; 0x2a
    socket_create_rparams_t rp = {0};
 8008bec:	2300      	movs	r3, #0
 8008bee:	61bb      	str	r3, [r7, #24]
    uint16_t rp_size = (uint16_t)sizeof(rp);
 8008bf0:	2304      	movs	r3, #4
 8008bf2:	82fb      	strh	r3, [r7, #22]

    cp.domain = Domain;
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	61fb      	str	r3, [r7, #28]
    cp.type = Type;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	623b      	str	r3, [r7, #32]
    cp.protocol = Protocol;
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	627b      	str	r3, [r7, #36]	; 0x24

    if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_SOCKET_CREATE_CMD,
 8008c00:	f107 0018 	add.w	r0, r7, #24
 8008c04:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8008c06:	f107 011c 	add.w	r1, r7, #28
 8008c0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008c0e:	9301      	str	r3, [sp, #4]
 8008c10:	f107 0316 	add.w	r3, r7, #22
 8008c14:	9300      	str	r3, [sp, #0]
 8008c16:	4603      	mov	r3, r0
 8008c18:	f240 2001 	movw	r0, #513	; 0x201
 8008c1c:	f7ff f8d4 	bl	8007dc8 <mipc_request>
 8008c20:	4603      	mov	r3, r0
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d101      	bne.n	8008c2a <MX_WIFI_Socket_create+0x68>
                                          (uint8_t *)&cp, cp_size,
                                          (uint8_t *)&rp, &rp_size,
                                          MX_WIFI_CMD_TIMEOUT))
    {
      ret_fd = rp.fd;
 8008c26:	69bb      	ldr	r3, [r7, #24]
 8008c28:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }

  return ret_fd;
 8008c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	3730      	adds	r7, #48	; 0x30
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bd80      	pop	{r7, pc}

08008c34 <MX_WIFI_Socket_setsockopt>:


int32_t MX_WIFI_Socket_setsockopt(MX_WIFIObject_t *Obj, int32_t SockFd, int32_t Level,
                                  int32_t OptName, const void *OptValue, int32_t OptLen)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b092      	sub	sp, #72	; 0x48
 8008c38:	af02      	add	r7, sp, #8
 8008c3a:	60f8      	str	r0, [r7, #12]
 8008c3c:	60b9      	str	r1, [r7, #8]
 8008c3e:	607a      	str	r2, [r7, #4]
 8008c40:	603b      	str	r3, [r7, #0]
  MX_WIFI_STATUS_T ret = MX_WIFI_STATUS_ERROR;
 8008c42:	23ff      	movs	r3, #255	; 0xff
 8008c44:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if ((NULL != Obj) && (0 <= SockFd) && (NULL != OptValue) && (0 < OptLen))
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d044      	beq.n	8008cd8 <MX_WIFI_Socket_setsockopt+0xa4>
 8008c4e:	68bb      	ldr	r3, [r7, #8]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	db41      	blt.n	8008cd8 <MX_WIFI_Socket_setsockopt+0xa4>
 8008c54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d03e      	beq.n	8008cd8 <MX_WIFI_Socket_setsockopt+0xa4>
 8008c5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	dd3b      	ble.n	8008cd8 <MX_WIFI_Socket_setsockopt+0xa4>
  {
    socket_setsockopt_cparams_t cp = {0};
 8008c60:	f107 0314 	add.w	r3, r7, #20
 8008c64:	2220      	movs	r2, #32
 8008c66:	2100      	movs	r1, #0
 8008c68:	4618      	mov	r0, r3
 8008c6a:	f00e fbb7 	bl	80173dc <memset>
    const uint16_t cp_size = (uint16_t)(sizeof(cp));
 8008c6e:	2320      	movs	r3, #32
 8008c70:	87bb      	strh	r3, [r7, #60]	; 0x3c
    socket_setsockopt_rparams_t rp = {0};
 8008c72:	2300      	movs	r3, #0
 8008c74:	63bb      	str	r3, [r7, #56]	; 0x38
    uint16_t rp_size = (uint16_t)sizeof(rp);
 8008c76:	2304      	movs	r3, #4
 8008c78:	86fb      	strh	r3, [r7, #54]	; 0x36

    rp.status = MIPC_CODE_ERROR;
 8008c7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008c7e:	63bb      	str	r3, [r7, #56]	; 0x38

    cp.socket = SockFd;
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	617b      	str	r3, [r7, #20]
    cp.level = Level;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	61bb      	str	r3, [r7, #24]
    cp.optname = OptName;
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	61fb      	str	r3, [r7, #28]
    cp.optlen = OptLen > (int32_t)sizeof(cp.optval) ? (mx_socklen_t)sizeof(cp.optval) : (mx_socklen_t)OptLen;
 8008c8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c8e:	2b10      	cmp	r3, #16
 8008c90:	bfa8      	it	ge
 8008c92:	2310      	movge	r3, #16
 8008c94:	623b      	str	r3, [r7, #32]

    (void)memcpy(&cp.optval[0], OptValue, cp.optlen);
 8008c96:	6a3a      	ldr	r2, [r7, #32]
 8008c98:	f107 0314 	add.w	r3, r7, #20
 8008c9c:	3310      	adds	r3, #16
 8008c9e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	f00e fc5a 	bl	801755a <memcpy>

    if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_SOCKET_SETSOCKOPT_CMD,
 8008ca6:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8008caa:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8008cac:	f107 0114 	add.w	r1, r7, #20
 8008cb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008cb4:	9301      	str	r3, [sp, #4]
 8008cb6:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8008cba:	9300      	str	r3, [sp, #0]
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	f240 200a 	movw	r0, #522	; 0x20a
 8008cc2:	f7ff f881 	bl	8007dc8 <mipc_request>
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d105      	bne.n	8008cd8 <MX_WIFI_Socket_setsockopt+0xa4>
                                          (uint8_t *)&cp, cp_size,
                                          (uint8_t *)&rp, &rp_size,
                                          MX_WIFI_CMD_TIMEOUT))
    {
      if (rp.status == MIPC_CODE_SUCCESS)
 8008ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d102      	bne.n	8008cd8 <MX_WIFI_Socket_setsockopt+0xa4>
      {
        ret = MX_WIFI_STATUS_OK;
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      }
    }
  }

  return (int32_t)ret;
 8008cd8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8008cdc:	4618      	mov	r0, r3
 8008cde:	3740      	adds	r7, #64	; 0x40
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	bd80      	pop	{r7, pc}

08008ce4 <MX_WIFI_Socket_getsockopt>:


int32_t MX_WIFI_Socket_getsockopt(MX_WIFIObject_t *Obj, int32_t SockFd, int32_t Level,
                                  int32_t OptName, void *OptValue, uint32_t *OptLen)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b092      	sub	sp, #72	; 0x48
 8008ce8:	af02      	add	r7, sp, #8
 8008cea:	60f8      	str	r0, [r7, #12]
 8008cec:	60b9      	str	r1, [r7, #8]
 8008cee:	607a      	str	r2, [r7, #4]
 8008cf0:	603b      	str	r3, [r7, #0]
  MX_WIFI_STATUS_T ret = MX_WIFI_STATUS_ERROR;
 8008cf2:	23ff      	movs	r3, #255	; 0xff
 8008cf4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if ((NULL != Obj) && (0 <= SockFd) && (NULL != OptValue) && (NULL != OptLen))
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d04e      	beq.n	8008d9c <MX_WIFI_Socket_getsockopt+0xb8>
 8008cfe:	68bb      	ldr	r3, [r7, #8]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	db4b      	blt.n	8008d9c <MX_WIFI_Socket_getsockopt+0xb8>
 8008d04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d048      	beq.n	8008d9c <MX_WIFI_Socket_getsockopt+0xb8>
 8008d0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d045      	beq.n	8008d9c <MX_WIFI_Socket_getsockopt+0xb8>
  {
    socket_getsockopt_cparams_t cp = {0};
 8008d10:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008d14:	2200      	movs	r2, #0
 8008d16:	601a      	str	r2, [r3, #0]
 8008d18:	605a      	str	r2, [r3, #4]
 8008d1a:	609a      	str	r2, [r3, #8]
    const uint16_t cp_size = (uint16_t)(sizeof(cp));
 8008d1c:	230c      	movs	r3, #12
 8008d1e:	87bb      	strh	r3, [r7, #60]	; 0x3c
    socket_getsockopt_rparams_t rp = {0};
 8008d20:	f107 0318 	add.w	r3, r7, #24
 8008d24:	2200      	movs	r2, #0
 8008d26:	601a      	str	r2, [r3, #0]
 8008d28:	605a      	str	r2, [r3, #4]
 8008d2a:	609a      	str	r2, [r3, #8]
 8008d2c:	60da      	str	r2, [r3, #12]
 8008d2e:	611a      	str	r2, [r3, #16]
 8008d30:	615a      	str	r2, [r3, #20]
    uint16_t rp_size = (uint16_t)sizeof(rp);
 8008d32:	2318      	movs	r3, #24
 8008d34:	82fb      	strh	r3, [r7, #22]

    rp.status = MIPC_CODE_ERROR;
 8008d36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008d3a:	61bb      	str	r3, [r7, #24]

    cp.socket = SockFd;
 8008d3c:	68bb      	ldr	r3, [r7, #8]
 8008d3e:	633b      	str	r3, [r7, #48]	; 0x30
    cp.level = Level;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	637b      	str	r3, [r7, #52]	; 0x34
    cp.optname = OptName;
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	63bb      	str	r3, [r7, #56]	; 0x38

    if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_SOCKET_GETSOCKOPT_CMD,
 8008d48:	f107 0018 	add.w	r0, r7, #24
 8008d4c:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8008d4e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8008d52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008d56:	9301      	str	r3, [sp, #4]
 8008d58:	f107 0316 	add.w	r3, r7, #22
 8008d5c:	9300      	str	r3, [sp, #0]
 8008d5e:	4603      	mov	r3, r0
 8008d60:	f240 2009 	movw	r0, #521	; 0x209
 8008d64:	f7ff f830 	bl	8007dc8 <mipc_request>
 8008d68:	4603      	mov	r3, r0
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d116      	bne.n	8008d9c <MX_WIFI_Socket_getsockopt+0xb8>
                                          (uint8_t *)&cp, cp_size,
                                          (uint8_t *)&rp, &rp_size,
                                          MX_WIFI_CMD_TIMEOUT))
    {
      if (rp.status == MIPC_CODE_SUCCESS)
 8008d6e:	69bb      	ldr	r3, [r7, #24]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d113      	bne.n	8008d9c <MX_WIFI_Socket_getsockopt+0xb8>
      {
        *OptLen = (rp.optlen > *OptLen) ? *OptLen : rp.optlen;
 8008d74:	69fa      	ldr	r2, [r7, #28]
 8008d76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	429a      	cmp	r2, r3
 8008d7c:	bf28      	it	cs
 8008d7e:	461a      	movcs	r2, r3
 8008d80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d82:	601a      	str	r2, [r3, #0]
        (void)memcpy(OptValue, &rp.optval[0], *OptLen);
 8008d84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d86:	681a      	ldr	r2, [r3, #0]
 8008d88:	f107 0318 	add.w	r3, r7, #24
 8008d8c:	3308      	adds	r3, #8
 8008d8e:	4619      	mov	r1, r3
 8008d90:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8008d92:	f00e fbe2 	bl	801755a <memcpy>
        ret = MX_WIFI_STATUS_OK;
 8008d96:	2300      	movs	r3, #0
 8008d98:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      }
    }
  }

  return (int32_t)ret;
 8008d9c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8008da0:	4618      	mov	r0, r3
 8008da2:	3740      	adds	r7, #64	; 0x40
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bd80      	pop	{r7, pc}

08008da8 <MX_WIFI_Socket_bind>:


int32_t MX_WIFI_Socket_bind(MX_WIFIObject_t *Obj, int32_t SockFd,
                            const struct mx_sockaddr *Addr, int32_t AddrLen)
{
 8008da8:	b5b0      	push	{r4, r5, r7, lr}
 8008daa:	b09a      	sub	sp, #104	; 0x68
 8008dac:	af02      	add	r7, sp, #8
 8008dae:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008db0:	62b9      	str	r1, [r7, #40]	; 0x28
 8008db2:	627a      	str	r2, [r7, #36]	; 0x24
 8008db4:	623b      	str	r3, [r7, #32]
  MX_WIFI_STATUS_T ret = MX_WIFI_STATUS_PARAM_ERROR;
 8008db6:	23fc      	movs	r3, #252	; 0xfc
 8008db8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

  if ((NULL != Obj) && (0 <= SockFd) && (NULL != Addr) && (0 < AddrLen))
 8008dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d077      	beq.n	8008eb2 <MX_WIFI_Socket_bind+0x10a>
 8008dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	db74      	blt.n	8008eb2 <MX_WIFI_Socket_bind+0x10a>
 8008dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d071      	beq.n	8008eb2 <MX_WIFI_Socket_bind+0x10a>
 8008dce:	6a3b      	ldr	r3, [r7, #32]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	dd6e      	ble.n	8008eb2 <MX_WIFI_Socket_bind+0x10a>
  {
    socket_bind_cparams_t cp = {0};
 8008dd4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008dd8:	2224      	movs	r2, #36	; 0x24
 8008dda:	2100      	movs	r1, #0
 8008ddc:	4618      	mov	r0, r3
 8008dde:	f00e fafd 	bl	80173dc <memset>
    const uint16_t cp_size = (uint16_t)(sizeof(cp));
 8008de2:	2324      	movs	r3, #36	; 0x24
 8008de4:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
    bool is_to_do_mipc_request = true;
 8008de8:	2301      	movs	r3, #1
 8008dea:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e

    ret = MX_WIFI_STATUS_ERROR;
 8008dee:	23ff      	movs	r3, #255	; 0xff
 8008df0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

    if ((Addr->sa_family == MX_AF_INET) && (AddrLen == sizeof(struct mx_sockaddr_in)))
 8008df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008df6:	785b      	ldrb	r3, [r3, #1]
 8008df8:	2b02      	cmp	r3, #2
 8008dfa:	d114      	bne.n	8008e26 <MX_WIFI_Socket_bind+0x7e>
 8008dfc:	6a3b      	ldr	r3, [r7, #32]
 8008dfe:	2b10      	cmp	r3, #16
 8008e00:	d111      	bne.n	8008e26 <MX_WIFI_Socket_bind+0x7e>
    {
      cp.addr = mx_s_addr_in_to_packed(Addr);
 8008e02:	463b      	mov	r3, r7
 8008e04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008e06:	4618      	mov	r0, r3
 8008e08:	f000 ff73 	bl	8009cf2 <mx_s_addr_in_to_packed>
 8008e0c:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8008e10:	463d      	mov	r5, r7
 8008e12:	6828      	ldr	r0, [r5, #0]
 8008e14:	6869      	ldr	r1, [r5, #4]
 8008e16:	68aa      	ldr	r2, [r5, #8]
 8008e18:	68eb      	ldr	r3, [r5, #12]
 8008e1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008e1c:	6928      	ldr	r0, [r5, #16]
 8008e1e:	6969      	ldr	r1, [r5, #20]
 8008e20:	69aa      	ldr	r2, [r5, #24]
 8008e22:	c407      	stmia	r4!, {r0, r1, r2}
 8008e24:	e01b      	b.n	8008e5e <MX_WIFI_Socket_bind+0xb6>
    }
    else if ((Addr->sa_family == MX_AF_INET6) && (AddrLen == sizeof(struct mx_sockaddr_in6)))
 8008e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e28:	785b      	ldrb	r3, [r3, #1]
 8008e2a:	2b0a      	cmp	r3, #10
 8008e2c:	d114      	bne.n	8008e58 <MX_WIFI_Socket_bind+0xb0>
 8008e2e:	6a3b      	ldr	r3, [r7, #32]
 8008e30:	2b1c      	cmp	r3, #28
 8008e32:	d111      	bne.n	8008e58 <MX_WIFI_Socket_bind+0xb0>
    {
      cp.addr = mx_s_addr_in6_to_packed(Addr);
 8008e34:	463b      	mov	r3, r7
 8008e36:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008e38:	4618      	mov	r0, r3
 8008e3a:	f000 ffbe 	bl	8009dba <mx_s_addr_in6_to_packed>
 8008e3e:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8008e42:	463d      	mov	r5, r7
 8008e44:	6828      	ldr	r0, [r5, #0]
 8008e46:	6869      	ldr	r1, [r5, #4]
 8008e48:	68aa      	ldr	r2, [r5, #8]
 8008e4a:	68eb      	ldr	r3, [r5, #12]
 8008e4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008e4e:	6928      	ldr	r0, [r5, #16]
 8008e50:	6969      	ldr	r1, [r5, #20]
 8008e52:	69aa      	ldr	r2, [r5, #24]
 8008e54:	c407      	stmia	r4!, {r0, r1, r2}
 8008e56:	e002      	b.n	8008e5e <MX_WIFI_Socket_bind+0xb6>
    }
    else
    {
      is_to_do_mipc_request = false;
 8008e58:	2300      	movs	r3, #0
 8008e5a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    }

    if (is_to_do_mipc_request)
 8008e5e:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d025      	beq.n	8008eb2 <MX_WIFI_Socket_bind+0x10a>
    {
      socket_bind_rparams_t rp = {0};
 8008e66:	2300      	movs	r3, #0
 8008e68:	65bb      	str	r3, [r7, #88]	; 0x58
      uint16_t rp_size = (uint16_t)sizeof(rp);
 8008e6a:	2304      	movs	r3, #4
 8008e6c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

      rp.status =  MIPC_CODE_ERROR;
 8008e70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008e74:	65bb      	str	r3, [r7, #88]	; 0x58

      cp.socket = SockFd;
 8008e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e78:	633b      	str	r3, [r7, #48]	; 0x30
      cp.length = (mx_socklen_t)AddrLen;
 8008e7a:	6a3b      	ldr	r3, [r7, #32]
 8008e7c:	653b      	str	r3, [r7, #80]	; 0x50

      if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_SOCKET_BIND_CMD,
 8008e7e:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8008e82:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8008e86:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8008e8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008e8e:	9301      	str	r3, [sp, #4]
 8008e90:	f107 0356 	add.w	r3, r7, #86	; 0x56
 8008e94:	9300      	str	r3, [sp, #0]
 8008e96:	4603      	mov	r3, r0
 8008e98:	f240 200b 	movw	r0, #523	; 0x20b
 8008e9c:	f7fe ff94 	bl	8007dc8 <mipc_request>
 8008ea0:	4603      	mov	r3, r0
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d105      	bne.n	8008eb2 <MX_WIFI_Socket_bind+0x10a>
                                            (uint8_t *)&cp, cp_size,
                                            (uint8_t *)&rp, &rp_size,
                                            MX_WIFI_CMD_TIMEOUT))
      {
        if (rp.status == MIPC_CODE_SUCCESS)
 8008ea6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d102      	bne.n	8008eb2 <MX_WIFI_Socket_bind+0x10a>
        {
          ret = MX_WIFI_STATUS_OK;
 8008eac:	2300      	movs	r3, #0
 8008eae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        }
      }
    }
  }

  return (int32_t)ret;
 8008eb2:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	3760      	adds	r7, #96	; 0x60
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	bdb0      	pop	{r4, r5, r7, pc}

08008ebe <MX_WIFI_Socket_listen>:


int32_t MX_WIFI_Socket_listen(MX_WIFIObject_t *Obj, int32_t sockfd, int32_t backlog)
{
 8008ebe:	b580      	push	{r7, lr}
 8008ec0:	b08c      	sub	sp, #48	; 0x30
 8008ec2:	af02      	add	r7, sp, #8
 8008ec4:	60f8      	str	r0, [r7, #12]
 8008ec6:	60b9      	str	r1, [r7, #8]
 8008ec8:	607a      	str	r2, [r7, #4]
  MX_WIFI_STATUS_T ret = MX_WIFI_STATUS_ERROR;
 8008eca:	23ff      	movs	r3, #255	; 0xff
 8008ecc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if ((NULL == Obj) || (sockfd < 0))
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d002      	beq.n	8008edc <MX_WIFI_Socket_listen+0x1e>
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	da03      	bge.n	8008ee4 <MX_WIFI_Socket_listen+0x26>
  {
    ret = MX_WIFI_STATUS_PARAM_ERROR;
 8008edc:	23fc      	movs	r3, #252	; 0xfc
 8008ede:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008ee2:	e02a      	b.n	8008f3a <MX_WIFI_Socket_listen+0x7c>
  }
  else
  {
    socket_listen_cparams_t cp = {0};
 8008ee4:	f107 031c 	add.w	r3, r7, #28
 8008ee8:	2200      	movs	r2, #0
 8008eea:	601a      	str	r2, [r3, #0]
 8008eec:	605a      	str	r2, [r3, #4]
    const uint16_t cp_size = (uint16_t)(sizeof(cp));
 8008eee:	2308      	movs	r3, #8
 8008ef0:	84bb      	strh	r3, [r7, #36]	; 0x24
    socket_listen_rparams_t rp = {0};
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	61bb      	str	r3, [r7, #24]
    uint16_t rp_size = (uint16_t)sizeof(rp);
 8008ef6:	2304      	movs	r3, #4
 8008ef8:	82fb      	strh	r3, [r7, #22]

    rp.status =  MIPC_CODE_ERROR;
 8008efa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008efe:	61bb      	str	r3, [r7, #24]

    cp.socket = sockfd;
 8008f00:	68bb      	ldr	r3, [r7, #8]
 8008f02:	61fb      	str	r3, [r7, #28]
    cp.backlog = backlog;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	623b      	str	r3, [r7, #32]

    if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_SOCKET_LISTEN_CMD,
 8008f08:	f107 0018 	add.w	r0, r7, #24
 8008f0c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008f0e:	f107 011c 	add.w	r1, r7, #28
 8008f12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008f16:	9301      	str	r3, [sp, #4]
 8008f18:	f107 0316 	add.w	r3, r7, #22
 8008f1c:	9300      	str	r3, [sp, #0]
 8008f1e:	4603      	mov	r3, r0
 8008f20:	f44f 7003 	mov.w	r0, #524	; 0x20c
 8008f24:	f7fe ff50 	bl	8007dc8 <mipc_request>
 8008f28:	4603      	mov	r3, r0
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d105      	bne.n	8008f3a <MX_WIFI_Socket_listen+0x7c>
                                          (uint8_t *)&cp, cp_size,
                                          (uint8_t *)&rp, &rp_size,
                                          MX_WIFI_CMD_TIMEOUT))
    {
      if (rp.status == MIPC_CODE_SUCCESS)
 8008f2e:	69bb      	ldr	r3, [r7, #24]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d102      	bne.n	8008f3a <MX_WIFI_Socket_listen+0x7c>
      {
        ret = MX_WIFI_STATUS_OK;
 8008f34:	2300      	movs	r3, #0
 8008f36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
    }
  }

  return (int32_t)ret;
 8008f3a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8008f3e:	4618      	mov	r0, r3
 8008f40:	3728      	adds	r7, #40	; 0x28
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}

08008f46 <MX_WIFI_Socket_accept>:


int32_t MX_WIFI_Socket_accept(MX_WIFIObject_t *Obj, int32_t SockFd,
                              struct mx_sockaddr *Addr, uint32_t *AddrLen)
{
 8008f46:	b5b0      	push	{r4, r5, r7, lr}
 8008f48:	b0a0      	sub	sp, #128	; 0x80
 8008f4a:	af02      	add	r7, sp, #8
 8008f4c:	63f8      	str	r0, [r7, #60]	; 0x3c
 8008f4e:	63b9      	str	r1, [r7, #56]	; 0x38
 8008f50:	637a      	str	r2, [r7, #52]	; 0x34
 8008f52:	633b      	str	r3, [r7, #48]	; 0x30
  int32_t ret_fd = (int32_t)MX_WIFI_STATUS_PARAM_ERROR;
 8008f54:	f06f 0303 	mvn.w	r3, #3
 8008f58:	677b      	str	r3, [r7, #116]	; 0x74

  if ((NULL != Obj) && (0 <= SockFd) && (NULL != Addr) && (NULL != AddrLen))
 8008f5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d075      	beq.n	800904c <MX_WIFI_Socket_accept+0x106>
 8008f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	db72      	blt.n	800904c <MX_WIFI_Socket_accept+0x106>
 8008f66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d06f      	beq.n	800904c <MX_WIFI_Socket_accept+0x106>
 8008f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d06c      	beq.n	800904c <MX_WIFI_Socket_accept+0x106>
  {
    socket_accept_cparams_t cp = {0};
 8008f72:	2300      	movs	r3, #0
 8008f74:	66fb      	str	r3, [r7, #108]	; 0x6c
    const uint16_t cp_size = (uint16_t)(sizeof(cp));
 8008f76:	2304      	movs	r3, #4
 8008f78:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
    socket_accept_rparams_t rp = {0};
 8008f7c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008f80:	2224      	movs	r2, #36	; 0x24
 8008f82:	2100      	movs	r1, #0
 8008f84:	4618      	mov	r0, r3
 8008f86:	f00e fa29 	bl	80173dc <memset>
    uint16_t rp_size = (uint16_t)sizeof(rp);
 8008f8a:	2324      	movs	r3, #36	; 0x24
 8008f8c:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a

    rp.socket = -1;
 8008f90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008f94:	647b      	str	r3, [r7, #68]	; 0x44
    ret_fd = -1;
 8008f96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008f9a:	677b      	str	r3, [r7, #116]	; 0x74
    cp.socket = SockFd;
 8008f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f9e:	66fb      	str	r3, [r7, #108]	; 0x6c

    if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_SOCKET_ACCEPT_CMD,
 8008fa0:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8008fa4:	f8b7 2072 	ldrh.w	r2, [r7, #114]	; 0x72
 8008fa8:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8008fac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008fb0:	9301      	str	r3, [sp, #4]
 8008fb2:	f107 036a 	add.w	r3, r7, #106	; 0x6a
 8008fb6:	9300      	str	r3, [sp, #0]
 8008fb8:	4603      	mov	r3, r0
 8008fba:	f240 200d 	movw	r0, #525	; 0x20d
 8008fbe:	f7fe ff03 	bl	8007dc8 <mipc_request>
 8008fc2:	4603      	mov	r3, r0
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d141      	bne.n	800904c <MX_WIFI_Socket_accept+0x106>
                                          (uint8_t *)&cp, cp_size,
                                          (uint8_t *)&rp, &rp_size,
                                          MX_WIFI_CMD_TIMEOUT))
    {
      if (rp.socket >= 0)
 8008fc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	db3e      	blt.n	800904c <MX_WIFI_Socket_accept+0x106>
      {
        ret_fd = rp.socket;
 8008fce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008fd0:	677b      	str	r3, [r7, #116]	; 0x74

        if ((rp.addr.ss_family == MX_AF_INET) && (rp.addr.s2_len == 16) && (*AddrLen == sizeof(struct mx_sockaddr_in)))
 8008fd2:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8008fd6:	2b02      	cmp	r3, #2
 8008fd8:	d117      	bne.n	800900a <MX_WIFI_Socket_accept+0xc4>
 8008fda:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8008fde:	2b10      	cmp	r3, #16
 8008fe0:	d113      	bne.n	800900a <MX_WIFI_Socket_accept+0xc4>
 8008fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	2b10      	cmp	r3, #16
 8008fe8:	d10f      	bne.n	800900a <MX_WIFI_Socket_accept+0xc4>
        {
          *((struct mx_sockaddr_in *)((void *)Addr)) = mx_s_addr_in_from_packed(&rp.addr);
 8008fea:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 8008fec:	f107 0220 	add.w	r2, r7, #32
 8008ff0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008ff4:	3304      	adds	r3, #4
 8008ff6:	4619      	mov	r1, r3
 8008ff8:	4610      	mov	r0, r2
 8008ffa:	f000 feb0 	bl	8009d5e <mx_s_addr_in_from_packed>
 8008ffe:	f107 0320 	add.w	r3, r7, #32
 8009002:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009004:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8009008:	e020      	b.n	800904c <MX_WIFI_Socket_accept+0x106>
        }
        else if ((rp.addr.ss_family == MX_AF_INET6) && (rp.addr.s2_len == sizeof(struct mx_sockaddr_storage)) && \
 800900a:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800900e:	2b0a      	cmp	r3, #10
 8009010:	d119      	bne.n	8009046 <MX_WIFI_Socket_accept+0x100>
 8009012:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8009016:	2b1c      	cmp	r3, #28
 8009018:	d115      	bne.n	8009046 <MX_WIFI_Socket_accept+0x100>
                 (*AddrLen == sizeof(struct mx_sockaddr_in6)))
 800901a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800901c:	681b      	ldr	r3, [r3, #0]
        else if ((rp.addr.ss_family == MX_AF_INET6) && (rp.addr.s2_len == sizeof(struct mx_sockaddr_storage)) && \
 800901e:	2b1c      	cmp	r3, #28
 8009020:	d111      	bne.n	8009046 <MX_WIFI_Socket_accept+0x100>
        {
          *((struct mx_sockaddr_in6 *)((void *)Addr)) = mx_s_addr_in6_from_packed(&rp.addr);
 8009022:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 8009024:	463a      	mov	r2, r7
 8009026:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800902a:	3304      	adds	r3, #4
 800902c:	4619      	mov	r1, r3
 800902e:	4610      	mov	r0, r2
 8009030:	f000 ff08 	bl	8009e44 <mx_s_addr_in6_from_packed>
 8009034:	4625      	mov	r5, r4
 8009036:	463c      	mov	r4, r7
 8009038:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800903a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800903c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8009040:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8009044:	e002      	b.n	800904c <MX_WIFI_Socket_accept+0x106>
        }
        else
        {
          ret_fd = -1;
 8009046:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800904a:	677b      	str	r3, [r7, #116]	; 0x74
        }
      }
    }
  }

  return ret_fd;
 800904c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
 800904e:	4618      	mov	r0, r3
 8009050:	3778      	adds	r7, #120	; 0x78
 8009052:	46bd      	mov	sp, r7
 8009054:	bdb0      	pop	{r4, r5, r7, pc}

08009056 <MX_WIFI_Socket_connect>:


int32_t MX_WIFI_Socket_connect(MX_WIFIObject_t *Obj, int32_t SockFd,
                               const struct mx_sockaddr *Addr, int32_t AddrLen)
{
 8009056:	b5b0      	push	{r4, r5, r7, lr}
 8009058:	b09a      	sub	sp, #104	; 0x68
 800905a:	af02      	add	r7, sp, #8
 800905c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800905e:	62b9      	str	r1, [r7, #40]	; 0x28
 8009060:	627a      	str	r2, [r7, #36]	; 0x24
 8009062:	623b      	str	r3, [r7, #32]
  MX_WIFI_STATUS_T ret = MX_WIFI_STATUS_PARAM_ERROR;
 8009064:	23fc      	movs	r3, #252	; 0xfc
 8009066:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

  if ((NULL != Obj) && (0 <= SockFd) && (NULL != Addr) && (0 < AddrLen))
 800906a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800906c:	2b00      	cmp	r3, #0
 800906e:	d074      	beq.n	800915a <MX_WIFI_Socket_connect+0x104>
 8009070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009072:	2b00      	cmp	r3, #0
 8009074:	db71      	blt.n	800915a <MX_WIFI_Socket_connect+0x104>
 8009076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009078:	2b00      	cmp	r3, #0
 800907a:	d06e      	beq.n	800915a <MX_WIFI_Socket_connect+0x104>
 800907c:	6a3b      	ldr	r3, [r7, #32]
 800907e:	2b00      	cmp	r3, #0
 8009080:	dd6b      	ble.n	800915a <MX_WIFI_Socket_connect+0x104>
  {
    socket_connect_cparams_t cp = {0};
 8009082:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009086:	2224      	movs	r2, #36	; 0x24
 8009088:	2100      	movs	r1, #0
 800908a:	4618      	mov	r0, r3
 800908c:	f00e f9a6 	bl	80173dc <memset>
    const uint16_t cp_size = (uint16_t)(sizeof(cp));
 8009090:	2324      	movs	r3, #36	; 0x24
 8009092:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
    bool is_to_do_mipc_request = true;
 8009096:	2301      	movs	r3, #1
 8009098:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e

    if ((Addr->sa_family == MX_AF_INET) && (AddrLen == sizeof(struct mx_sockaddr_in)))
 800909c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800909e:	785b      	ldrb	r3, [r3, #1]
 80090a0:	2b02      	cmp	r3, #2
 80090a2:	d114      	bne.n	80090ce <MX_WIFI_Socket_connect+0x78>
 80090a4:	6a3b      	ldr	r3, [r7, #32]
 80090a6:	2b10      	cmp	r3, #16
 80090a8:	d111      	bne.n	80090ce <MX_WIFI_Socket_connect+0x78>
    {
      cp.addr = mx_s_addr_in_to_packed(Addr);
 80090aa:	463b      	mov	r3, r7
 80090ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80090ae:	4618      	mov	r0, r3
 80090b0:	f000 fe1f 	bl	8009cf2 <mx_s_addr_in_to_packed>
 80090b4:	f107 0434 	add.w	r4, r7, #52	; 0x34
 80090b8:	463d      	mov	r5, r7
 80090ba:	6828      	ldr	r0, [r5, #0]
 80090bc:	6869      	ldr	r1, [r5, #4]
 80090be:	68aa      	ldr	r2, [r5, #8]
 80090c0:	68eb      	ldr	r3, [r5, #12]
 80090c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80090c4:	6928      	ldr	r0, [r5, #16]
 80090c6:	6969      	ldr	r1, [r5, #20]
 80090c8:	69aa      	ldr	r2, [r5, #24]
 80090ca:	c407      	stmia	r4!, {r0, r1, r2}
 80090cc:	e01b      	b.n	8009106 <MX_WIFI_Socket_connect+0xb0>
    }
    else if ((Addr->sa_family == MX_AF_INET6) && (AddrLen == sizeof(struct mx_sockaddr_in6)))
 80090ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090d0:	785b      	ldrb	r3, [r3, #1]
 80090d2:	2b0a      	cmp	r3, #10
 80090d4:	d114      	bne.n	8009100 <MX_WIFI_Socket_connect+0xaa>
 80090d6:	6a3b      	ldr	r3, [r7, #32]
 80090d8:	2b1c      	cmp	r3, #28
 80090da:	d111      	bne.n	8009100 <MX_WIFI_Socket_connect+0xaa>
    {
      cp.addr = mx_s_addr_in6_to_packed(Addr);
 80090dc:	463b      	mov	r3, r7
 80090de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80090e0:	4618      	mov	r0, r3
 80090e2:	f000 fe6a 	bl	8009dba <mx_s_addr_in6_to_packed>
 80090e6:	f107 0434 	add.w	r4, r7, #52	; 0x34
 80090ea:	463d      	mov	r5, r7
 80090ec:	6828      	ldr	r0, [r5, #0]
 80090ee:	6869      	ldr	r1, [r5, #4]
 80090f0:	68aa      	ldr	r2, [r5, #8]
 80090f2:	68eb      	ldr	r3, [r5, #12]
 80090f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80090f6:	6928      	ldr	r0, [r5, #16]
 80090f8:	6969      	ldr	r1, [r5, #20]
 80090fa:	69aa      	ldr	r2, [r5, #24]
 80090fc:	c407      	stmia	r4!, {r0, r1, r2}
 80090fe:	e002      	b.n	8009106 <MX_WIFI_Socket_connect+0xb0>
    }
    else
    {
      is_to_do_mipc_request = false;
 8009100:	2300      	movs	r3, #0
 8009102:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    }

    if (is_to_do_mipc_request)
 8009106:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800910a:	2b00      	cmp	r3, #0
 800910c:	d025      	beq.n	800915a <MX_WIFI_Socket_connect+0x104>
    {
      socket_connect_rparams_t rp = {0};
 800910e:	2300      	movs	r3, #0
 8009110:	65bb      	str	r3, [r7, #88]	; 0x58
      uint16_t rp_size = (uint16_t)sizeof(rp);
 8009112:	2304      	movs	r3, #4
 8009114:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

      rp.status = MIPC_CODE_ERROR;
 8009118:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800911c:	65bb      	str	r3, [r7, #88]	; 0x58

      cp.socket = SockFd;
 800911e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009120:	633b      	str	r3, [r7, #48]	; 0x30
      cp.length = (mx_socklen_t)AddrLen;
 8009122:	6a3b      	ldr	r3, [r7, #32]
 8009124:	653b      	str	r3, [r7, #80]	; 0x50

      if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_SOCKET_CONNECT_CMD,
 8009126:	f107 0058 	add.w	r0, r7, #88	; 0x58
 800912a:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 800912e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8009132:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009136:	9301      	str	r3, [sp, #4]
 8009138:	f107 0356 	add.w	r3, r7, #86	; 0x56
 800913c:	9300      	str	r3, [sp, #0]
 800913e:	4603      	mov	r3, r0
 8009140:	f240 2002 	movw	r0, #514	; 0x202
 8009144:	f7fe fe40 	bl	8007dc8 <mipc_request>
 8009148:	4603      	mov	r3, r0
 800914a:	2b00      	cmp	r3, #0
 800914c:	d105      	bne.n	800915a <MX_WIFI_Socket_connect+0x104>
                                            (uint8_t *)&cp, cp_size,
                                            (uint8_t *)&rp, &rp_size,
                                            MX_WIFI_CMD_TIMEOUT))
      {
        if (rp.status == MIPC_CODE_SUCCESS)
 800914e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009150:	2b00      	cmp	r3, #0
 8009152:	d102      	bne.n	800915a <MX_WIFI_Socket_connect+0x104>
        {
          ret = MX_WIFI_STATUS_OK;
 8009154:	2300      	movs	r3, #0
 8009156:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        }
      }
    }
  }

  return (int32_t)ret;
 800915a:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 800915e:	4618      	mov	r0, r3
 8009160:	3760      	adds	r7, #96	; 0x60
 8009162:	46bd      	mov	sp, r7
 8009164:	bdb0      	pop	{r4, r5, r7, pc}

08009166 <MX_WIFI_Socket_shutdown>:


int32_t MX_WIFI_Socket_shutdown(MX_WIFIObject_t *Obj, int32_t SockFd, int32_t Mode)
{
 8009166:	b580      	push	{r7, lr}
 8009168:	b08c      	sub	sp, #48	; 0x30
 800916a:	af02      	add	r7, sp, #8
 800916c:	60f8      	str	r0, [r7, #12]
 800916e:	60b9      	str	r1, [r7, #8]
 8009170:	607a      	str	r2, [r7, #4]
  MX_WIFI_STATUS_T ret = MX_WIFI_STATUS_PARAM_ERROR;
 8009172:	23fc      	movs	r3, #252	; 0xfc
 8009174:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if ((NULL != Obj) && (0 <= SockFd))
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d02d      	beq.n	80091da <MX_WIFI_Socket_shutdown+0x74>
 800917e:	68bb      	ldr	r3, [r7, #8]
 8009180:	2b00      	cmp	r3, #0
 8009182:	db2a      	blt.n	80091da <MX_WIFI_Socket_shutdown+0x74>
  {
    socket_shutdown_cparams_t cp = {0};
 8009184:	f107 031c 	add.w	r3, r7, #28
 8009188:	2200      	movs	r2, #0
 800918a:	601a      	str	r2, [r3, #0]
 800918c:	605a      	str	r2, [r3, #4]
    const uint16_t cp_size = (uint16_t)(sizeof(cp));
 800918e:	2308      	movs	r3, #8
 8009190:	84bb      	strh	r3, [r7, #36]	; 0x24
    socket_shutdown_rparams_t rp = {0};
 8009192:	2300      	movs	r3, #0
 8009194:	61bb      	str	r3, [r7, #24]
    uint16_t rp_size = (uint16_t)sizeof(rp);
 8009196:	2304      	movs	r3, #4
 8009198:	82fb      	strh	r3, [r7, #22]

    rp.status = MIPC_CODE_ERROR;
 800919a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800919e:	61bb      	str	r3, [r7, #24]
    cp.filedes = SockFd;
 80091a0:	68bb      	ldr	r3, [r7, #8]
 80091a2:	61fb      	str	r3, [r7, #28]
    cp.how = Mode;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	623b      	str	r3, [r7, #32]

    if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_SOCKET_SHUTDOWN_CMD,
 80091a8:	f107 0018 	add.w	r0, r7, #24
 80091ac:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80091ae:	f107 011c 	add.w	r1, r7, #28
 80091b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80091b6:	9301      	str	r3, [sp, #4]
 80091b8:	f107 0316 	add.w	r3, r7, #22
 80091bc:	9300      	str	r3, [sp, #0]
 80091be:	4603      	mov	r3, r0
 80091c0:	f240 2007 	movw	r0, #519	; 0x207
 80091c4:	f7fe fe00 	bl	8007dc8 <mipc_request>
 80091c8:	4603      	mov	r3, r0
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d105      	bne.n	80091da <MX_WIFI_Socket_shutdown+0x74>
                                          (uint8_t *)&cp, cp_size,
                                          (uint8_t *)&rp, &rp_size,
                                          MX_WIFI_CMD_TIMEOUT))
    {
      if (rp.status == MIPC_CODE_SUCCESS)
 80091ce:	69bb      	ldr	r3, [r7, #24]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d102      	bne.n	80091da <MX_WIFI_Socket_shutdown+0x74>
      {
        ret = MX_WIFI_STATUS_OK;
 80091d4:	2300      	movs	r3, #0
 80091d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
    }
  }

  return (int32_t)ret;
 80091da:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80091de:	4618      	mov	r0, r3
 80091e0:	3728      	adds	r7, #40	; 0x28
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}

080091e6 <MX_WIFI_Socket_close>:


int32_t MX_WIFI_Socket_close(MX_WIFIObject_t *Obj, int32_t SockFd)
{
 80091e6:	b580      	push	{r7, lr}
 80091e8:	b088      	sub	sp, #32
 80091ea:	af02      	add	r7, sp, #8
 80091ec:	6078      	str	r0, [r7, #4]
 80091ee:	6039      	str	r1, [r7, #0]
  MX_WIFI_STATUS_T ret = MX_WIFI_STATUS_PARAM_ERROR;
 80091f0:	23fc      	movs	r3, #252	; 0xfc
 80091f2:	75fb      	strb	r3, [r7, #23]

  if ((NULL != Obj) && (0 <= SockFd))
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d027      	beq.n	800924a <MX_WIFI_Socket_close+0x64>
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	db24      	blt.n	800924a <MX_WIFI_Socket_close+0x64>
  {
    socket_close_cparams_t cp = {0};
 8009200:	2300      	movs	r3, #0
 8009202:	613b      	str	r3, [r7, #16]
    const uint16_t cp_size = (uint16_t)(sizeof(cp));
 8009204:	2304      	movs	r3, #4
 8009206:	82bb      	strh	r3, [r7, #20]
    socket_close_rparams_t rp = {0};
 8009208:	2300      	movs	r3, #0
 800920a:	60fb      	str	r3, [r7, #12]
    uint16_t rp_size = (uint16_t)sizeof(rp);
 800920c:	2304      	movs	r3, #4
 800920e:	817b      	strh	r3, [r7, #10]

    rp.status = MIPC_CODE_ERROR;
 8009210:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009214:	60fb      	str	r3, [r7, #12]
    cp.filedes = SockFd;
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	613b      	str	r3, [r7, #16]

    if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_SOCKET_CLOSE_CMD,
 800921a:	f107 000c 	add.w	r0, r7, #12
 800921e:	8aba      	ldrh	r2, [r7, #20]
 8009220:	f107 0110 	add.w	r1, r7, #16
 8009224:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009228:	9301      	str	r3, [sp, #4]
 800922a:	f107 030a 	add.w	r3, r7, #10
 800922e:	9300      	str	r3, [sp, #0]
 8009230:	4603      	mov	r3, r0
 8009232:	f44f 7002 	mov.w	r0, #520	; 0x208
 8009236:	f7fe fdc7 	bl	8007dc8 <mipc_request>
 800923a:	4603      	mov	r3, r0
 800923c:	2b00      	cmp	r3, #0
 800923e:	d104      	bne.n	800924a <MX_WIFI_Socket_close+0x64>
                                          (uint8_t *)&cp, cp_size,
                                          (uint8_t *)&rp, &rp_size,
                                          MX_WIFI_CMD_TIMEOUT))
    {
      if (rp.status == MIPC_CODE_SUCCESS)
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d101      	bne.n	800924a <MX_WIFI_Socket_close+0x64>
      {
        ret = MX_WIFI_STATUS_OK;
 8009246:	2300      	movs	r3, #0
 8009248:	75fb      	strb	r3, [r7, #23]
      }
    }
  }

  return (int32_t)ret;
 800924a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800924e:	4618      	mov	r0, r3
 8009250:	3718      	adds	r7, #24
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}

08009256 <MX_WIFI_Socket_send>:


int32_t MX_WIFI_Socket_send(MX_WIFIObject_t *Obj, int32_t SockFd, const uint8_t *Buf,
                            int32_t Len, int32_t flags)
{
 8009256:	b580      	push	{r7, lr}
 8009258:	b08c      	sub	sp, #48	; 0x30
 800925a:	af02      	add	r7, sp, #8
 800925c:	60f8      	str	r0, [r7, #12]
 800925e:	60b9      	str	r1, [r7, #8]
 8009260:	607a      	str	r2, [r7, #4]
 8009262:	603b      	str	r3, [r7, #0]
  int32_t ret = (int32_t)MX_WIFI_STATUS_PARAM_ERROR;
 8009264:	f06f 0303 	mvn.w	r3, #3
 8009268:	627b      	str	r3, [r7, #36]	; 0x24

  if ((NULL != Obj) && (0 <= SockFd) && (NULL != Buf) && (0 < Len))
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d050      	beq.n	8009312 <MX_WIFI_Socket_send+0xbc>
 8009270:	68bb      	ldr	r3, [r7, #8]
 8009272:	2b00      	cmp	r3, #0
 8009274:	db4d      	blt.n	8009312 <MX_WIFI_Socket_send+0xbc>
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d04a      	beq.n	8009312 <MX_WIFI_Socket_send+0xbc>
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	2b00      	cmp	r3, #0
 8009280:	dd47      	ble.n	8009312 <MX_WIFI_Socket_send+0xbc>
  {
    socket_send_cparams_t *cp = NULL;
 8009282:	2300      	movs	r3, #0
 8009284:	61fb      	str	r3, [r7, #28]
    socket_send_rparams_t rp = {0};
 8009286:	2300      	movs	r3, #0
 8009288:	617b      	str	r3, [r7, #20]
    uint16_t rp_size = (uint16_t)sizeof(rp);
 800928a:	2304      	movs	r3, #4
 800928c:	827b      	strh	r3, [r7, #18]
    size_t data_len = (size_t)Len;
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	623b      	str	r3, [r7, #32]

    ret = (int32_t)MX_WIFI_STATUS_ERROR;
 8009292:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009296:	627b      	str	r3, [r7, #36]	; 0x24

    if ((data_len + sizeof(socket_send_cparams_t) - 1) > MX_WIFI_IPC_PAYLOAD_SIZE)
 8009298:	6a3b      	ldr	r3, [r7, #32]
 800929a:	330c      	adds	r3, #12
 800929c:	f640 12be 	movw	r2, #2494	; 0x9be
 80092a0:	4293      	cmp	r3, r2
 80092a2:	d902      	bls.n	80092aa <MX_WIFI_Socket_send+0x54>
    {
      /* Restrict to the length which corresponds to the maximum size of the IPC transfer. */
      data_len = MX_WIFI_IPC_PAYLOAD_SIZE - (sizeof(socket_send_cparams_t) - 1);
 80092a4:	f640 13b2 	movw	r3, #2482	; 0x9b2
 80092a8:	623b      	str	r3, [r7, #32]
    }

    /* useless: rp.sent = 0; */

    const uint16_t cp_size = (uint16_t)(sizeof(socket_send_cparams_t) - 1 + data_len);
 80092aa:	6a3b      	ldr	r3, [r7, #32]
 80092ac:	b29b      	uxth	r3, r3
 80092ae:	330c      	adds	r3, #12
 80092b0:	837b      	strh	r3, [r7, #26]
    cp = (socket_send_cparams_t *)MX_WIFI_MALLOC(cp_size);
 80092b2:	8b7b      	ldrh	r3, [r7, #26]
 80092b4:	4618      	mov	r0, r3
 80092b6:	f00c fa25 	bl	8015704 <malloc>
 80092ba:	4603      	mov	r3, r0
 80092bc:	61fb      	str	r3, [r7, #28]
    if (NULL != cp)
 80092be:	69fb      	ldr	r3, [r7, #28]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d026      	beq.n	8009312 <MX_WIFI_Socket_send+0xbc>
    {
      cp->socket = SockFd;
 80092c4:	69fb      	ldr	r3, [r7, #28]
 80092c6:	68ba      	ldr	r2, [r7, #8]
 80092c8:	601a      	str	r2, [r3, #0]
      (void)memcpy(&cp->buffer[0], Buf, data_len);
 80092ca:	69fb      	ldr	r3, [r7, #28]
 80092cc:	330c      	adds	r3, #12
 80092ce:	6a3a      	ldr	r2, [r7, #32]
 80092d0:	6879      	ldr	r1, [r7, #4]
 80092d2:	4618      	mov	r0, r3
 80092d4:	f00e f941 	bl	801755a <memcpy>
      cp->size = data_len;
 80092d8:	69fb      	ldr	r3, [r7, #28]
 80092da:	6a3a      	ldr	r2, [r7, #32]
 80092dc:	605a      	str	r2, [r3, #4]
      cp->flags = flags;
 80092de:	69fb      	ldr	r3, [r7, #28]
 80092e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092e2:	609a      	str	r2, [r3, #8]
      if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_SOCKET_SEND_CMD,
 80092e4:	f107 0114 	add.w	r1, r7, #20
 80092e8:	8b7a      	ldrh	r2, [r7, #26]
 80092ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80092ee:	9301      	str	r3, [sp, #4]
 80092f0:	f107 0312 	add.w	r3, r7, #18
 80092f4:	9300      	str	r3, [sp, #0]
 80092f6:	460b      	mov	r3, r1
 80092f8:	69f9      	ldr	r1, [r7, #28]
 80092fa:	f240 2003 	movw	r0, #515	; 0x203
 80092fe:	f7fe fd63 	bl	8007dc8 <mipc_request>
 8009302:	4603      	mov	r3, r0
 8009304:	2b00      	cmp	r3, #0
 8009306:	d101      	bne.n	800930c <MX_WIFI_Socket_send+0xb6>
                                            (uint8_t *)cp, cp_size,
                                            (uint8_t *)&rp, &rp_size,
                                            MX_WIFI_CMD_TIMEOUT))
      {
        ret = rp.sent;
 8009308:	697b      	ldr	r3, [r7, #20]
 800930a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      MX_WIFI_FREE(cp);
 800930c:	69f8      	ldr	r0, [r7, #28]
 800930e:	f00c fa01 	bl	8015714 <free>
    }
  }

  return ret;
 8009312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009314:	4618      	mov	r0, r3
 8009316:	3728      	adds	r7, #40	; 0x28
 8009318:	46bd      	mov	sp, r7
 800931a:	bd80      	pop	{r7, pc}

0800931c <MX_WIFI_Socket_sendto>:


int32_t MX_WIFI_Socket_sendto(MX_WIFIObject_t *Obj, int32_t SockFd, const uint8_t *Buf,
                              int32_t Len, int32_t Flags,
                              struct mx_sockaddr *ToAddr, int32_t ToAddrLen)
{
 800931c:	b5b0      	push	{r4, r5, r7, lr}
 800931e:	b096      	sub	sp, #88	; 0x58
 8009320:	af02      	add	r7, sp, #8
 8009322:	62f8      	str	r0, [r7, #44]	; 0x2c
 8009324:	62b9      	str	r1, [r7, #40]	; 0x28
 8009326:	627a      	str	r2, [r7, #36]	; 0x24
 8009328:	623b      	str	r3, [r7, #32]
  int32_t ret = (int32_t)MX_WIFI_STATUS_PARAM_ERROR;
 800932a:	f06f 0303 	mvn.w	r3, #3
 800932e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if ((NULL != Obj) && (0 <= SockFd) && (NULL != Buf) && (0 < Len) && (NULL != ToAddr) && (0 < ToAddrLen))
 8009330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009332:	2b00      	cmp	r3, #0
 8009334:	f000 80a7 	beq.w	8009486 <MX_WIFI_Socket_sendto+0x16a>
 8009338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800933a:	2b00      	cmp	r3, #0
 800933c:	f2c0 80a3 	blt.w	8009486 <MX_WIFI_Socket_sendto+0x16a>
 8009340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009342:	2b00      	cmp	r3, #0
 8009344:	f000 809f 	beq.w	8009486 <MX_WIFI_Socket_sendto+0x16a>
 8009348:	6a3b      	ldr	r3, [r7, #32]
 800934a:	2b00      	cmp	r3, #0
 800934c:	f340 809b 	ble.w	8009486 <MX_WIFI_Socket_sendto+0x16a>
 8009350:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009352:	2b00      	cmp	r3, #0
 8009354:	f000 8097 	beq.w	8009486 <MX_WIFI_Socket_sendto+0x16a>
 8009358:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800935a:	2b00      	cmp	r3, #0
 800935c:	f340 8093 	ble.w	8009486 <MX_WIFI_Socket_sendto+0x16a>
  {
    socket_sendto_cparams_t *cp = NULL;
 8009360:	2300      	movs	r3, #0
 8009362:	643b      	str	r3, [r7, #64]	; 0x40
    size_t data_len = (size_t)Len;
 8009364:	6a3b      	ldr	r3, [r7, #32]
 8009366:	64bb      	str	r3, [r7, #72]	; 0x48

    ret = (int32_t)MX_WIFI_STATUS_ERROR;
 8009368:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800936c:	64fb      	str	r3, [r7, #76]	; 0x4c

    if ((data_len + sizeof(socket_sendto_cparams_t) - 1) > MX_WIFI_IPC_PAYLOAD_SIZE)
 800936e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009370:	332c      	adds	r3, #44	; 0x2c
 8009372:	f640 12be 	movw	r2, #2494	; 0x9be
 8009376:	4293      	cmp	r3, r2
 8009378:	d902      	bls.n	8009380 <MX_WIFI_Socket_sendto+0x64>
    {
      /* Restrict to the length which corresponds to the maximum size of the IPC transfer. */
      data_len = MX_WIFI_IPC_PAYLOAD_SIZE - (sizeof(socket_sendto_cparams_t) - 1);
 800937a:	f640 1392 	movw	r3, #2450	; 0x992
 800937e:	64bb      	str	r3, [r7, #72]	; 0x48
    }

    const uint16_t cp_size = (uint16_t)(sizeof(socket_sendto_cparams_t) - 1 + data_len);
 8009380:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009382:	b29b      	uxth	r3, r3
 8009384:	332c      	adds	r3, #44	; 0x2c
 8009386:	87fb      	strh	r3, [r7, #62]	; 0x3e

    cp = (socket_sendto_cparams_t *)MX_WIFI_MALLOC(cp_size);
 8009388:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800938a:	4618      	mov	r0, r3
 800938c:	f00c f9ba 	bl	8015704 <malloc>
 8009390:	4603      	mov	r3, r0
 8009392:	643b      	str	r3, [r7, #64]	; 0x40

    if (NULL != cp)
 8009394:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009396:	2b00      	cmp	r3, #0
 8009398:	d075      	beq.n	8009486 <MX_WIFI_Socket_sendto+0x16a>
    {
      bool is_to_do_mipc_request = true;
 800939a:	2301      	movs	r3, #1
 800939c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      socket_sendto_rparams_t rp = {0};
 80093a0:	2300      	movs	r3, #0
 80093a2:	63bb      	str	r3, [r7, #56]	; 0x38
      uint16_t rp_size = (uint16_t)sizeof(rp);
 80093a4:	2304      	movs	r3, #4
 80093a6:	86fb      	strh	r3, [r7, #54]	; 0x36

      /* useless: rp.sent = 0; */
      cp->socket = SockFd;
 80093a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80093aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80093ac:	601a      	str	r2, [r3, #0]
      (void)memcpy(&cp->buffer[0], Buf, data_len);
 80093ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80093b0:	332c      	adds	r3, #44	; 0x2c
 80093b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80093b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80093b6:	4618      	mov	r0, r3
 80093b8:	f00e f8cf 	bl	801755a <memcpy>
      cp->size = data_len;
 80093bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80093be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80093c0:	605a      	str	r2, [r3, #4]
      cp->flags = Flags;
 80093c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80093c4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80093c6:	609a      	str	r2, [r3, #8]

      if ((ToAddr->sa_family == MX_AF_INET) && (ToAddrLen == sizeof(struct mx_sockaddr_in)))
 80093c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80093ca:	785b      	ldrb	r3, [r3, #1]
 80093cc:	2b02      	cmp	r3, #2
 80093ce:	d11a      	bne.n	8009406 <MX_WIFI_Socket_sendto+0xea>
 80093d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80093d2:	2b10      	cmp	r3, #16
 80093d4:	d117      	bne.n	8009406 <MX_WIFI_Socket_sendto+0xea>
      {
        cp->addr = mx_s_addr_in_to_packed(ToAddr);
 80093d6:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 80093d8:	463b      	mov	r3, r7
 80093da:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80093dc:	4618      	mov	r0, r3
 80093de:	f000 fc88 	bl	8009cf2 <mx_s_addr_in_to_packed>
 80093e2:	f104 030c 	add.w	r3, r4, #12
 80093e6:	463a      	mov	r2, r7
 80093e8:	6814      	ldr	r4, [r2, #0]
 80093ea:	6850      	ldr	r0, [r2, #4]
 80093ec:	6891      	ldr	r1, [r2, #8]
 80093ee:	68d5      	ldr	r5, [r2, #12]
 80093f0:	601c      	str	r4, [r3, #0]
 80093f2:	6058      	str	r0, [r3, #4]
 80093f4:	6099      	str	r1, [r3, #8]
 80093f6:	60dd      	str	r5, [r3, #12]
 80093f8:	6914      	ldr	r4, [r2, #16]
 80093fa:	6950      	ldr	r0, [r2, #20]
 80093fc:	6991      	ldr	r1, [r2, #24]
 80093fe:	611c      	str	r4, [r3, #16]
 8009400:	6158      	str	r0, [r3, #20]
 8009402:	6199      	str	r1, [r3, #24]
 8009404:	e021      	b.n	800944a <MX_WIFI_Socket_sendto+0x12e>
      }
      else if ((ToAddr->sa_family == MX_AF_INET6) && (ToAddrLen == sizeof(struct mx_sockaddr_in6)))
 8009406:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009408:	785b      	ldrb	r3, [r3, #1]
 800940a:	2b0a      	cmp	r3, #10
 800940c:	d11a      	bne.n	8009444 <MX_WIFI_Socket_sendto+0x128>
 800940e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009410:	2b1c      	cmp	r3, #28
 8009412:	d117      	bne.n	8009444 <MX_WIFI_Socket_sendto+0x128>
      {
        cp->addr = mx_s_addr_in6_to_packed(ToAddr);
 8009414:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 8009416:	463b      	mov	r3, r7
 8009418:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800941a:	4618      	mov	r0, r3
 800941c:	f000 fccd 	bl	8009dba <mx_s_addr_in6_to_packed>
 8009420:	f104 030c 	add.w	r3, r4, #12
 8009424:	463a      	mov	r2, r7
 8009426:	6814      	ldr	r4, [r2, #0]
 8009428:	6850      	ldr	r0, [r2, #4]
 800942a:	6891      	ldr	r1, [r2, #8]
 800942c:	68d5      	ldr	r5, [r2, #12]
 800942e:	601c      	str	r4, [r3, #0]
 8009430:	6058      	str	r0, [r3, #4]
 8009432:	6099      	str	r1, [r3, #8]
 8009434:	60dd      	str	r5, [r3, #12]
 8009436:	6914      	ldr	r4, [r2, #16]
 8009438:	6950      	ldr	r0, [r2, #20]
 800943a:	6991      	ldr	r1, [r2, #24]
 800943c:	611c      	str	r4, [r3, #16]
 800943e:	6158      	str	r0, [r3, #20]
 8009440:	6199      	str	r1, [r3, #24]
 8009442:	e002      	b.n	800944a <MX_WIFI_Socket_sendto+0x12e>
      }
      else
      {
        is_to_do_mipc_request = false;
 8009444:	2300      	movs	r3, #0
 8009446:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }

      if (is_to_do_mipc_request)
 800944a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800944e:	2b00      	cmp	r3, #0
 8009450:	d016      	beq.n	8009480 <MX_WIFI_Socket_sendto+0x164>
      {
        cp->length = (mx_socklen_t)ToAddrLen;
 8009452:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009454:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009456:	629a      	str	r2, [r3, #40]	; 0x28

        if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_SOCKET_SENDTO_CMD,
 8009458:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800945c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800945e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009462:	9301      	str	r3, [sp, #4]
 8009464:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8009468:	9300      	str	r3, [sp, #0]
 800946a:	460b      	mov	r3, r1
 800946c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800946e:	f44f 7001 	mov.w	r0, #516	; 0x204
 8009472:	f7fe fca9 	bl	8007dc8 <mipc_request>
 8009476:	4603      	mov	r3, r0
 8009478:	2b00      	cmp	r3, #0
 800947a:	d101      	bne.n	8009480 <MX_WIFI_Socket_sendto+0x164>
                                              (uint8_t *)cp, cp_size,
                                              (uint8_t *)&rp, &rp_size,
                                              MX_WIFI_CMD_TIMEOUT))
        {
          ret = rp.sent;
 800947c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800947e:	64fb      	str	r3, [r7, #76]	; 0x4c
        }
      }
      MX_WIFI_FREE(cp);
 8009480:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8009482:	f00c f947 	bl	8015714 <free>
    }
  }

  return ret;
 8009486:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8009488:	4618      	mov	r0, r3
 800948a:	3750      	adds	r7, #80	; 0x50
 800948c:	46bd      	mov	sp, r7
 800948e:	bdb0      	pop	{r4, r5, r7, pc}

08009490 <MX_WIFI_Socket_recv>:


int32_t MX_WIFI_Socket_recv(MX_WIFIObject_t *Obj, int32_t SockFd, uint8_t *Buf,
                            int32_t Len, int32_t flags)
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b090      	sub	sp, #64	; 0x40
 8009494:	af02      	add	r7, sp, #8
 8009496:	60f8      	str	r0, [r7, #12]
 8009498:	60b9      	str	r1, [r7, #8]
 800949a:	607a      	str	r2, [r7, #4]
 800949c:	603b      	str	r3, [r7, #0]
  int32_t ret = (int32_t)MX_WIFI_STATUS_PARAM_ERROR;
 800949e:	f06f 0303 	mvn.w	r3, #3
 80094a2:	637b      	str	r3, [r7, #52]	; 0x34

  if ((NULL != Obj) && (0 <= SockFd) && (NULL != Buf) && (0 < Len))
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d066      	beq.n	8009578 <MX_WIFI_Socket_recv+0xe8>
 80094aa:	68bb      	ldr	r3, [r7, #8]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	db63      	blt.n	8009578 <MX_WIFI_Socket_recv+0xe8>
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d060      	beq.n	8009578 <MX_WIFI_Socket_recv+0xe8>
 80094b6:	683b      	ldr	r3, [r7, #0]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	dd5d      	ble.n	8009578 <MX_WIFI_Socket_recv+0xe8>
  {
    socket_recv_cparams_t cp = {0};
 80094bc:	f107 0318 	add.w	r3, r7, #24
 80094c0:	2200      	movs	r2, #0
 80094c2:	601a      	str	r2, [r3, #0]
 80094c4:	605a      	str	r2, [r3, #4]
 80094c6:	609a      	str	r2, [r3, #8]
    const uint16_t cp_size = (uint16_t)(sizeof(cp));
 80094c8:	230c      	movs	r3, #12
 80094ca:	85fb      	strh	r3, [r7, #46]	; 0x2e
    socket_recv_rparams_t *rp = NULL;
 80094cc:	2300      	movs	r3, #0
 80094ce:	62bb      	str	r3, [r7, #40]	; 0x28
    size_t data_len = (size_t)Len;
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	633b      	str	r3, [r7, #48]	; 0x30
    uint16_t rp_size;

    ret = (int32_t)MX_WIFI_STATUS_ERROR;
 80094d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80094d8:	637b      	str	r3, [r7, #52]	; 0x34

    if ((data_len + sizeof(socket_recv_rparams_t) - 1) > MX_WIFI_IPC_PAYLOAD_SIZE)
 80094da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094dc:	3304      	adds	r3, #4
 80094de:	f640 12be 	movw	r2, #2494	; 0x9be
 80094e2:	4293      	cmp	r3, r2
 80094e4:	d902      	bls.n	80094ec <MX_WIFI_Socket_recv+0x5c>
    {
      /* Restrict to the length which corresponds to the maximum size of the IPC transfer. */
      data_len = MX_WIFI_IPC_PAYLOAD_SIZE - (sizeof(socket_recv_rparams_t) - 1);
 80094e6:	f640 13ba 	movw	r3, #2490	; 0x9ba
 80094ea:	633b      	str	r3, [r7, #48]	; 0x30
    }

    rp_size = (uint16_t)(sizeof(socket_recv_rparams_t) - 1 + data_len);
 80094ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094ee:	b29b      	uxth	r3, r3
 80094f0:	3304      	adds	r3, #4
 80094f2:	b29b      	uxth	r3, r3
 80094f4:	82fb      	strh	r3, [r7, #22]
    rp = (socket_recv_rparams_t *)MX_WIFI_MALLOC(rp_size);
 80094f6:	8afb      	ldrh	r3, [r7, #22]
 80094f8:	4618      	mov	r0, r3
 80094fa:	f00c f903 	bl	8015704 <malloc>
 80094fe:	4603      	mov	r3, r0
 8009500:	62bb      	str	r3, [r7, #40]	; 0x28
    if (NULL != rp)
 8009502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009504:	2b00      	cmp	r3, #0
 8009506:	d037      	beq.n	8009578 <MX_WIFI_Socket_recv+0xe8>
    {
      rp->received = 0;
 8009508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800950a:	2200      	movs	r2, #0
 800950c:	701a      	strb	r2, [r3, #0]
 800950e:	2200      	movs	r2, #0
 8009510:	705a      	strb	r2, [r3, #1]
 8009512:	2200      	movs	r2, #0
 8009514:	709a      	strb	r2, [r3, #2]
 8009516:	2200      	movs	r2, #0
 8009518:	70da      	strb	r2, [r3, #3]
      cp.socket = SockFd;
 800951a:	68bb      	ldr	r3, [r7, #8]
 800951c:	61bb      	str	r3, [r7, #24]
      cp.size = data_len;
 800951e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009520:	61fb      	str	r3, [r7, #28]
      cp.flags = flags;
 8009522:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009524:	623b      	str	r3, [r7, #32]
      if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_SOCKET_RECV_CMD,
 8009526:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009528:	f107 0118 	add.w	r1, r7, #24
 800952c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009530:	9301      	str	r3, [sp, #4]
 8009532:	f107 0316 	add.w	r3, r7, #22
 8009536:	9300      	str	r3, [sp, #0]
 8009538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800953a:	f240 2005 	movw	r0, #517	; 0x205
 800953e:	f7fe fc43 	bl	8007dc8 <mipc_request>
 8009542:	4603      	mov	r3, r0
 8009544:	2b00      	cmp	r3, #0
 8009546:	d114      	bne.n	8009572 <MX_WIFI_Socket_recv+0xe2>
                                            (uint8_t *)&cp, cp_size,
                                            (uint8_t *)rp, &rp_size,
                                            MX_WIFI_CMD_TIMEOUT))
      {
        if (rp->received > 0)
 8009548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	2b00      	cmp	r3, #0
 800954e:	dd0d      	ble.n	800956c <MX_WIFI_Socket_recv+0xdc>
        {
          const size_t received_len = (size_t)rp->received;
 8009550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	627b      	str	r3, [r7, #36]	; 0x24
          if (received_len <= data_len)
 8009556:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800955a:	429a      	cmp	r2, r3
 800955c:	d806      	bhi.n	800956c <MX_WIFI_Socket_recv+0xdc>
          {
            (void)memcpy(Buf, &rp->buffer[0], received_len);
 800955e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009560:	3304      	adds	r3, #4
 8009562:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009564:	4619      	mov	r1, r3
 8009566:	6878      	ldr	r0, [r7, #4]
 8009568:	f00d fff7 	bl	801755a <memcpy>
          }
        }
        ret = rp->received;
 800956c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	637b      	str	r3, [r7, #52]	; 0x34
      }
      MX_WIFI_FREE(rp);
 8009572:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009574:	f00c f8ce 	bl	8015714 <free>
    }
  }

  return ret;
 8009578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800957a:	4618      	mov	r0, r3
 800957c:	3738      	adds	r7, #56	; 0x38
 800957e:	46bd      	mov	sp, r7
 8009580:	bd80      	pop	{r7, pc}

08009582 <MX_WIFI_Socket_recvfrom>:


int32_t MX_WIFI_Socket_recvfrom(MX_WIFIObject_t *Obj, int32_t SockFd, uint8_t *Buf,
                                int32_t Len, int32_t Flags,
                                struct mx_sockaddr *FromAddr, uint32_t *FromAddrLen)
{
 8009582:	b5b0      	push	{r4, r5, r7, lr}
 8009584:	b09e      	sub	sp, #120	; 0x78
 8009586:	af02      	add	r7, sp, #8
 8009588:	63f8      	str	r0, [r7, #60]	; 0x3c
 800958a:	63b9      	str	r1, [r7, #56]	; 0x38
 800958c:	637a      	str	r2, [r7, #52]	; 0x34
 800958e:	633b      	str	r3, [r7, #48]	; 0x30
  int32_t ret = (int32_t)MX_WIFI_STATUS_PARAM_ERROR;
 8009590:	f06f 0303 	mvn.w	r3, #3
 8009594:	66fb      	str	r3, [r7, #108]	; 0x6c

  if ((NULL != Obj) && (0 <= SockFd) && (NULL != Buf) && (0 < Len) && (NULL != FromAddr) && (NULL != FromAddrLen))
 8009596:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009598:	2b00      	cmp	r3, #0
 800959a:	f000 80c5 	beq.w	8009728 <MX_WIFI_Socket_recvfrom+0x1a6>
 800959e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	f2c0 80c1 	blt.w	8009728 <MX_WIFI_Socket_recvfrom+0x1a6>
 80095a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	f000 80bd 	beq.w	8009728 <MX_WIFI_Socket_recvfrom+0x1a6>
 80095ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	f340 80b9 	ble.w	8009728 <MX_WIFI_Socket_recvfrom+0x1a6>
 80095b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	f000 80b4 	beq.w	8009728 <MX_WIFI_Socket_recvfrom+0x1a6>
 80095c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	f000 80af 	beq.w	8009728 <MX_WIFI_Socket_recvfrom+0x1a6>
  {
    socket_recvfrom_cparams_t cp = {0};
 80095ca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80095ce:	2200      	movs	r2, #0
 80095d0:	601a      	str	r2, [r3, #0]
 80095d2:	605a      	str	r2, [r3, #4]
 80095d4:	609a      	str	r2, [r3, #8]
    const uint16_t cp_size = (uint16_t)(sizeof(cp));
 80095d6:	230c      	movs	r3, #12
 80095d8:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    socket_recvfrom_rparams_t *rp = NULL;
 80095dc:	2300      	movs	r3, #0
 80095de:	663b      	str	r3, [r7, #96]	; 0x60
    size_t data_len = (size_t)Len;
 80095e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095e2:	66bb      	str	r3, [r7, #104]	; 0x68

    ret = (int32_t)MX_WIFI_STATUS_OK;
 80095e4:	2300      	movs	r3, #0
 80095e6:	66fb      	str	r3, [r7, #108]	; 0x6c

    if ((data_len + sizeof(socket_recvfrom_rparams_t) - 1) > MX_WIFI_IPC_PAYLOAD_SIZE)
 80095e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80095ea:	3324      	adds	r3, #36	; 0x24
 80095ec:	f640 12be 	movw	r2, #2494	; 0x9be
 80095f0:	4293      	cmp	r3, r2
 80095f2:	d902      	bls.n	80095fa <MX_WIFI_Socket_recvfrom+0x78>
    {
      /* Restrict to the length which corresponds to the maximum size of the IPC transfer. */
      data_len = MX_WIFI_IPC_PAYLOAD_SIZE - (sizeof(socket_recvfrom_rparams_t) - 1);
 80095f4:	f640 139a 	movw	r3, #2458	; 0x99a
 80095f8:	66bb      	str	r3, [r7, #104]	; 0x68
    }

    uint16_t rp_size = (uint16_t)(sizeof(socket_recvfrom_rparams_t) - 1 + data_len);
 80095fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80095fc:	b29b      	uxth	r3, r3
 80095fe:	3324      	adds	r3, #36	; 0x24
 8009600:	b29b      	uxth	r3, r3
 8009602:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

    rp = (socket_recvfrom_rparams_t *)MX_WIFI_MALLOC(rp_size);
 8009606:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800960a:	4618      	mov	r0, r3
 800960c:	f00c f87a 	bl	8015704 <malloc>
 8009610:	4603      	mov	r3, r0
 8009612:	663b      	str	r3, [r7, #96]	; 0x60

    if (NULL != rp)
 8009614:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009616:	2b00      	cmp	r3, #0
 8009618:	f000 8086 	beq.w	8009728 <MX_WIFI_Socket_recvfrom+0x1a6>
    {
      rp->received = 0;
 800961c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800961e:	2200      	movs	r2, #0
 8009620:	701a      	strb	r2, [r3, #0]
 8009622:	2200      	movs	r2, #0
 8009624:	705a      	strb	r2, [r3, #1]
 8009626:	2200      	movs	r2, #0
 8009628:	709a      	strb	r2, [r3, #2]
 800962a:	2200      	movs	r2, #0
 800962c:	70da      	strb	r2, [r3, #3]
      cp.socket = SockFd;
 800962e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009630:	64bb      	str	r3, [r7, #72]	; 0x48
      cp.size = data_len;
 8009632:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009634:	64fb      	str	r3, [r7, #76]	; 0x4c
      cp.flags = Flags;
 8009636:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800963a:	653b      	str	r3, [r7, #80]	; 0x50
      if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_SOCKET_RECVFROM_CMD,
 800963c:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8009640:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8009644:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009648:	9301      	str	r3, [sp, #4]
 800964a:	f107 0346 	add.w	r3, r7, #70	; 0x46
 800964e:	9300      	str	r3, [sp, #0]
 8009650:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009652:	f240 2006 	movw	r0, #518	; 0x206
 8009656:	f7fe fbb7 	bl	8007dc8 <mipc_request>
 800965a:	4603      	mov	r3, r0
 800965c:	2b00      	cmp	r3, #0
 800965e:	d160      	bne.n	8009722 <MX_WIFI_Socket_recvfrom+0x1a0>
                                            (uint8_t *)&cp, cp_size,
                                            (uint8_t *)rp, &rp_size,
                                            MX_WIFI_CMD_TIMEOUT))
      {
        if (rp->received > 0)
 8009660:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	2b00      	cmp	r3, #0
 8009666:	dd5c      	ble.n	8009722 <MX_WIFI_Socket_recvfrom+0x1a0>
        {
          const size_t received_len = (size_t)rp->received;
 8009668:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	65fb      	str	r3, [r7, #92]	; 0x5c

          if (received_len <= data_len)
 800966e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009670:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009672:	429a      	cmp	r2, r3
 8009674:	d855      	bhi.n	8009722 <MX_WIFI_Socket_recvfrom+0x1a0>
          {
            const int32_t buf_size = MIN(Len, rp->received);
 8009676:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800967c:	4293      	cmp	r3, r2
 800967e:	bfa8      	it	ge
 8009680:	4613      	movge	r3, r2
 8009682:	65bb      	str	r3, [r7, #88]	; 0x58
            const size_t rp_addr_size = MIN(sizeof(rp->addr), *FromAddrLen);
 8009684:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	2b1c      	cmp	r3, #28
 800968c:	bf28      	it	cs
 800968e:	231c      	movcs	r3, #28
 8009690:	657b      	str	r3, [r7, #84]	; 0x54

            (void)memcpy(Buf, rp->buffer, (size_t)buf_size);
 8009692:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009694:	3324      	adds	r3, #36	; 0x24
 8009696:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009698:	4619      	mov	r1, r3
 800969a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800969c:	f00d ff5d 	bl	801755a <memcpy>

            if ((rp->addr.ss_family == MX_AF_INET) && (rp->addr.s2_len == 16) && (*FromAddrLen == sizeof(struct mx_sockaddr_in)))
 80096a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80096a2:	795b      	ldrb	r3, [r3, #5]
 80096a4:	2b02      	cmp	r3, #2
 80096a6:	d118      	bne.n	80096da <MX_WIFI_Socket_recvfrom+0x158>
 80096a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80096aa:	791b      	ldrb	r3, [r3, #4]
 80096ac:	2b10      	cmp	r3, #16
 80096ae:	d114      	bne.n	80096da <MX_WIFI_Socket_recvfrom+0x158>
 80096b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	2b10      	cmp	r3, #16
 80096b8:	d10f      	bne.n	80096da <MX_WIFI_Socket_recvfrom+0x158>
            {
              *((struct mx_sockaddr_in *)((void *)FromAddr)) = mx_s_addr_in_from_packed(&rp->addr);
 80096ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80096bc:	1d1a      	adds	r2, r3, #4
 80096be:	f8d7 4084 	ldr.w	r4, [r7, #132]	; 0x84
 80096c2:	f107 0320 	add.w	r3, r7, #32
 80096c6:	4611      	mov	r1, r2
 80096c8:	4618      	mov	r0, r3
 80096ca:	f000 fb48 	bl	8009d5e <mx_s_addr_in_from_packed>
 80096ce:	f107 0320 	add.w	r3, r7, #32
 80096d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80096d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80096d8:	e01d      	b.n	8009716 <MX_WIFI_Socket_recvfrom+0x194>
            }
            else if ((rp->addr.ss_family == MX_AF_INET6) && (rp->addr.s2_len == sizeof(struct mx_sockaddr_storage)) && \
 80096da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80096dc:	795b      	ldrb	r3, [r3, #5]
 80096de:	2b0a      	cmp	r3, #10
 80096e0:	d119      	bne.n	8009716 <MX_WIFI_Socket_recvfrom+0x194>
 80096e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80096e4:	791b      	ldrb	r3, [r3, #4]
 80096e6:	2b1c      	cmp	r3, #28
 80096e8:	d115      	bne.n	8009716 <MX_WIFI_Socket_recvfrom+0x194>
                     (*FromAddrLen == sizeof(struct mx_sockaddr_in6)))
 80096ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80096ee:	681b      	ldr	r3, [r3, #0]
            else if ((rp->addr.ss_family == MX_AF_INET6) && (rp->addr.s2_len == sizeof(struct mx_sockaddr_storage)) && \
 80096f0:	2b1c      	cmp	r3, #28
 80096f2:	d110      	bne.n	8009716 <MX_WIFI_Socket_recvfrom+0x194>
            {
              *((struct mx_sockaddr_in6 *)((void *)FromAddr)) = mx_s_addr_in6_from_packed(&rp->addr);
 80096f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80096f6:	1d1a      	adds	r2, r3, #4
 80096f8:	f8d7 4084 	ldr.w	r4, [r7, #132]	; 0x84
 80096fc:	463b      	mov	r3, r7
 80096fe:	4611      	mov	r1, r2
 8009700:	4618      	mov	r0, r3
 8009702:	f000 fb9f 	bl	8009e44 <mx_s_addr_in6_from_packed>
 8009706:	4625      	mov	r5, r4
 8009708:	463c      	mov	r4, r7
 800970a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800970c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800970e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8009712:	e885 0007 	stmia.w	r5, {r0, r1, r2}
            }

            *FromAddrLen = rp_addr_size;
 8009716:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800971a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800971c:	601a      	str	r2, [r3, #0]
            ret = buf_size;
 800971e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009720:	66fb      	str	r3, [r7, #108]	; 0x6c
          }
        }
      }
      MX_WIFI_FREE(rp);
 8009722:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8009724:	f00b fff6 	bl	8015714 <free>
    }
  }

  return ret;
 8009728:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
 800972a:	4618      	mov	r0, r3
 800972c:	3770      	adds	r7, #112	; 0x70
 800972e:	46bd      	mov	sp, r7
 8009730:	bdb0      	pop	{r4, r5, r7, pc}
	...

08009734 <MX_WIFI_Socket_gethostbyname>:


int32_t MX_WIFI_Socket_gethostbyname(MX_WIFIObject_t *Obj, struct mx_sockaddr *Addr, const mx_char_t *Name)
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b0ca      	sub	sp, #296	; 0x128
 8009738:	af02      	add	r7, sp, #8
 800973a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800973e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8009742:	6018      	str	r0, [r3, #0]
 8009744:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8009748:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800974c:	6019      	str	r1, [r3, #0]
 800974e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8009752:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8009756:	601a      	str	r2, [r3, #0]
  MX_WIFI_STATUS_T ret = MX_WIFI_STATUS_PARAM_ERROR;
 8009758:	23fc      	movs	r3, #252	; 0xfc
 800975a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

  if ((NULL != Obj) && (NULL != Addr) && (NULL != Name) && (strlen(Name) < (size_t)MX_MAX_DNSNAME_LEN))
 800975e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8009762:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	2b00      	cmp	r3, #0
 800976a:	f000 808a 	beq.w	8009882 <MX_WIFI_Socket_gethostbyname+0x14e>
 800976e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8009772:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	2b00      	cmp	r3, #0
 800977a:	f000 8082 	beq.w	8009882 <MX_WIFI_Socket_gethostbyname+0x14e>
 800977e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8009782:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d07a      	beq.n	8009882 <MX_WIFI_Socket_gethostbyname+0x14e>
 800978c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8009790:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8009794:	6818      	ldr	r0, [r3, #0]
 8009796:	f7f6 fd6f 	bl	8000278 <strlen>
 800979a:	4603      	mov	r3, r0
 800979c:	2bfc      	cmp	r3, #252	; 0xfc
 800979e:	d870      	bhi.n	8009882 <MX_WIFI_Socket_gethostbyname+0x14e>
  {
    socket_gethostbyname_cparams_t cp = {0};
 80097a0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80097a4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80097a8:	4a39      	ldr	r2, [pc, #228]	; (8009890 <MX_WIFI_Socket_gethostbyname+0x15c>)
 80097aa:	4618      	mov	r0, r3
 80097ac:	4611      	mov	r1, r2
 80097ae:	23fd      	movs	r3, #253	; 0xfd
 80097b0:	461a      	mov	r2, r3
 80097b2:	f00d fed2 	bl	801755a <memcpy>
    const uint16_t cp_size = (uint16_t)(sizeof(cp));
 80097b6:	23fd      	movs	r3, #253	; 0xfd
 80097b8:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
    socket_gethostbyname_rparams_t rp = {0};
 80097bc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80097c0:	2200      	movs	r2, #0
 80097c2:	601a      	str	r2, [r3, #0]
 80097c4:	605a      	str	r2, [r3, #4]
    uint16_t rp_size = (uint16_t)sizeof(rp);
 80097c6:	2308      	movs	r3, #8
 80097c8:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

    const size_t msize = MIN(sizeof(cp.name), strlen(Name) + 1);
 80097cc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80097d0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80097d4:	6818      	ldr	r0, [r3, #0]
 80097d6:	f7f6 fd4f 	bl	8000278 <strlen>
 80097da:	4603      	mov	r3, r0
 80097dc:	3301      	adds	r3, #1
 80097de:	2bfd      	cmp	r3, #253	; 0xfd
 80097e0:	d809      	bhi.n	80097f6 <MX_WIFI_Socket_gethostbyname+0xc2>
 80097e2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80097e6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80097ea:	6818      	ldr	r0, [r3, #0]
 80097ec:	f7f6 fd44 	bl	8000278 <strlen>
 80097f0:	4603      	mov	r3, r0
 80097f2:	3301      	adds	r3, #1
 80097f4:	e000      	b.n	80097f8 <MX_WIFI_Socket_gethostbyname+0xc4>
 80097f6:	23fd      	movs	r3, #253	; 0xfd
 80097f8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

    ret = MX_WIFI_STATUS_ERROR;
 80097fc:	23ff      	movs	r3, #255	; 0xff
 80097fe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    rp.status =  MIPC_CODE_ERROR;
 8009802:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009806:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

    (void)memcpy(&cp.name[0], Name, msize);
 800980a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800980e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8009812:	f107 0010 	add.w	r0, r7, #16
 8009816:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800981a:	6819      	ldr	r1, [r3, #0]
 800981c:	f00d fe9d 	bl	801755a <memcpy>

    if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_SOCKET_GETHOSTBYNAME_CMD,
 8009820:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8009824:	f8b7 211c 	ldrh.w	r2, [r7, #284]	; 0x11c
 8009828:	f107 0110 	add.w	r1, r7, #16
 800982c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009830:	9301      	str	r3, [sp, #4]
 8009832:	f507 7387 	add.w	r3, r7, #270	; 0x10e
 8009836:	9300      	str	r3, [sp, #0]
 8009838:	4603      	mov	r3, r0
 800983a:	f240 2011 	movw	r0, #529	; 0x211
 800983e:	f7fe fac3 	bl	8007dc8 <mipc_request>
 8009842:	4603      	mov	r3, r0
 8009844:	2b00      	cmp	r3, #0
 8009846:	d11c      	bne.n	8009882 <MX_WIFI_Socket_gethostbyname+0x14e>
                                          (uint8_t *)&cp, cp_size,
                                          (uint8_t *)&rp, &rp_size,
                                          MX_WIFI_CMD_TIMEOUT))
    {
      if (rp.status == MIPC_CODE_SUCCESS)
 8009848:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800984c:	2b00      	cmp	r3, #0
 800984e:	d118      	bne.n	8009882 <MX_WIFI_Socket_gethostbyname+0x14e>
      {
        /* Only for IPv4 address. */
        ((mx_sockaddr_in_t *)Addr)->sin_family = MX_AF_INET;
 8009850:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8009854:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	2202      	movs	r2, #2
 800985c:	705a      	strb	r2, [r3, #1]
        ((mx_sockaddr_in_t *)Addr)->sin_addr.s_addr = rp.s_addr;
 800985e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8009862:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8009866:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	605a      	str	r2, [r3, #4]
        ((mx_sockaddr_in_t *)Addr)->sin_len = sizeof(mx_sockaddr_in_t);
 800986e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8009872:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	2210      	movs	r2, #16
 800987a:	701a      	strb	r2, [r3, #0]
        ret = MX_WIFI_STATUS_OK;
 800987c:	2300      	movs	r3, #0
 800987e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
      }
    }
  }

  return (int32_t)ret;
 8009882:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
}
 8009886:	4618      	mov	r0, r3
 8009888:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}
 8009890:	0801b424 	.word	0x0801b424

08009894 <MX_WIFI_Socket_ping>:


int32_t MX_WIFI_Socket_ping(MX_WIFIObject_t *Obj, const char *hostname,
                            int32_t count, int32_t delay, int32_t response[])
{
 8009894:	b590      	push	{r4, r7, lr}
 8009896:	b0d9      	sub	sp, #356	; 0x164
 8009898:	af02      	add	r7, sp, #8
 800989a:	f507 74ac 	add.w	r4, r7, #344	; 0x158
 800989e:	f5a4 74a6 	sub.w	r4, r4, #332	; 0x14c
 80098a2:	6020      	str	r0, [r4, #0]
 80098a4:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 80098a8:	f5a0 70a8 	sub.w	r0, r0, #336	; 0x150
 80098ac:	6001      	str	r1, [r0, #0]
 80098ae:	f507 71ac 	add.w	r1, r7, #344	; 0x158
 80098b2:	f5a1 71aa 	sub.w	r1, r1, #340	; 0x154
 80098b6:	600a      	str	r2, [r1, #0]
 80098b8:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 80098bc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80098c0:	6013      	str	r3, [r2, #0]
  MX_WIFI_STATUS_T ret = MX_WIFI_STATUS_PARAM_ERROR;
 80098c2:	23fc      	movs	r3, #252	; 0xfc
 80098c4:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157

  if ((NULL != Obj) && (NULL != hostname) && (0 < count))
 80098c8:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80098cc:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	f000 808e 	beq.w	80099f4 <MX_WIFI_Socket_ping+0x160>
 80098d8:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80098dc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	f000 8086 	beq.w	80099f4 <MX_WIFI_Socket_ping+0x160>
 80098e8:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80098ec:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	dd7e      	ble.n	80099f4 <MX_WIFI_Socket_ping+0x160>
  {
    wifi_ping_cparams_t cp = {0};
 80098f6:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80098fa:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80098fe:	4618      	mov	r0, r3
 8009900:	f240 1307 	movw	r3, #263	; 0x107
 8009904:	461a      	mov	r2, r3
 8009906:	2100      	movs	r1, #0
 8009908:	f00d fd68 	bl	80173dc <memset>
    const uint16_t cp_size = (uint16_t)(sizeof(cp));
 800990c:	f240 1307 	movw	r3, #263	; 0x107
 8009910:	f8a7 314e 	strh.w	r3, [r7, #334]	; 0x14e
    int32_t ping_resp[1 + MX_WIFI_PING_MAX] = {0};
 8009914:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8009918:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800991c:	4618      	mov	r0, r3
 800991e:	232c      	movs	r3, #44	; 0x2c
 8009920:	461a      	mov	r2, r3
 8009922:	2100      	movs	r1, #0
 8009924:	f00d fd5a 	bl	80173dc <memset>
    wifi_ping_rparams_t *rp = NULL;
 8009928:	2300      	movs	r3, #0
 800992a:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
    uint16_t rp_size = sizeof(ping_resp);
 800992e:	232c      	movs	r3, #44	; 0x2c
 8009930:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146

    ret = MX_WIFI_STATUS_ERROR;
 8009934:	23ff      	movs	r3, #255	; 0xff
 8009936:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157

    MX_WIFI_STRNCPY(cp.hostname, hostname);
 800993a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800993e:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8009942:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8009946:	22fe      	movs	r2, #254	; 0xfe
 8009948:	6819      	ldr	r1, [r3, #0]
 800994a:	f000 fabe 	bl	8009eca <void_strncpy>
    cp.count = count;
 800994e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8009952:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8009956:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800995a:	f5a2 72aa 	sub.w	r2, r2, #340	; 0x154
 800995e:	6812      	ldr	r2, [r2, #0]
 8009960:	f8c3 20ff 	str.w	r2, [r3, #255]	; 0xff
    cp.delay_ms = delay;
 8009964:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8009968:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800996c:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8009970:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8009974:	6812      	ldr	r2, [r2, #0]
 8009976:	f8c3 2103 	str.w	r2, [r3, #259]	; 0x103

    rp = (wifi_ping_rparams_t *)&ping_resp;
 800997a:	f107 0310 	add.w	r3, r7, #16
 800997e:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
    if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_WIFI_PING_CMD,
 8009982:	f8b7 214e 	ldrh.w	r2, [r7, #334]	; 0x14e
 8009986:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800998a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800998e:	9301      	str	r3, [sp, #4]
 8009990:	f507 73a3 	add.w	r3, r7, #326	; 0x146
 8009994:	9300      	str	r3, [sp, #0]
 8009996:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800999a:	f240 100b 	movw	r0, #267	; 0x10b
 800999e:	f7fe fa13 	bl	8007dc8 <mipc_request>
 80099a2:	4603      	mov	r3, r0
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d125      	bne.n	80099f4 <MX_WIFI_Socket_ping+0x160>
                                          (uint8_t *)&cp, cp_size,
                                          (uint8_t *)rp, &rp_size,
                                          MX_WIFI_CMD_TIMEOUT))
    {
      if (rp->num > 0)
 80099a8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	dd20      	ble.n	80099f4 <MX_WIFI_Socket_ping+0x160>
      {
        for (int32_t i = 0; i < rp->num; i++)
 80099b2:	2300      	movs	r3, #0
 80099b4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80099b8:	e012      	b.n	80099e0 <MX_WIFI_Socket_ping+0x14c>
        {
          response[i] = rp->delay_ms[i];
 80099ba:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80099be:	009b      	lsls	r3, r3, #2
 80099c0:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 80099c4:	441a      	add	r2, r3
 80099c6:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 80099ca:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80099ce:	009b      	lsls	r3, r3, #2
 80099d0:	440b      	add	r3, r1
 80099d2:	685b      	ldr	r3, [r3, #4]
 80099d4:	6013      	str	r3, [r2, #0]
        for (int32_t i = 0; i < rp->num; i++)
 80099d6:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80099da:	3301      	adds	r3, #1
 80099dc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80099e0:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 80099ea:	429a      	cmp	r2, r3
 80099ec:	dbe5      	blt.n	80099ba <MX_WIFI_Socket_ping+0x126>
        }
        ret = MX_WIFI_STATUS_OK;
 80099ee:	2300      	movs	r3, #0
 80099f0:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
      }
    }
  }

  return (int32_t)ret;
 80099f4:	f997 3157 	ldrsb.w	r3, [r7, #343]	; 0x157
}
 80099f8:	4618      	mov	r0, r3
 80099fa:	f507 77ae 	add.w	r7, r7, #348	; 0x15c
 80099fe:	46bd      	mov	sp, r7
 8009a00:	bd90      	pop	{r4, r7, pc}

08009a02 <MX_WIFI_Socket_ping6>:


int32_t MX_WIFI_Socket_ping6(MX_WIFIObject_t *Obj, const mx_char_t *hostname,
                             int32_t count, int32_t delay, int32_t response[])
{
 8009a02:	b590      	push	{r4, r7, lr}
 8009a04:	b0d9      	sub	sp, #356	; 0x164
 8009a06:	af02      	add	r7, sp, #8
 8009a08:	f507 74ac 	add.w	r4, r7, #344	; 0x158
 8009a0c:	f5a4 74a6 	sub.w	r4, r4, #332	; 0x14c
 8009a10:	6020      	str	r0, [r4, #0]
 8009a12:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 8009a16:	f5a0 70a8 	sub.w	r0, r0, #336	; 0x150
 8009a1a:	6001      	str	r1, [r0, #0]
 8009a1c:	f507 71ac 	add.w	r1, r7, #344	; 0x158
 8009a20:	f5a1 71aa 	sub.w	r1, r1, #340	; 0x154
 8009a24:	600a      	str	r2, [r1, #0]
 8009a26:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8009a2a:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8009a2e:	6013      	str	r3, [r2, #0]
  MX_WIFI_STATUS_T ret = MX_WIFI_STATUS_PARAM_ERROR;
 8009a30:	23fc      	movs	r3, #252	; 0xfc
 8009a32:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157

  if ((NULL != Obj) && (NULL != hostname) && (0 < count))
 8009a36:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8009a3a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	f000 808e 	beq.w	8009b62 <MX_WIFI_Socket_ping6+0x160>
 8009a46:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8009a4a:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	f000 8086 	beq.w	8009b62 <MX_WIFI_Socket_ping6+0x160>
 8009a56:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8009a5a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	dd7e      	ble.n	8009b62 <MX_WIFI_Socket_ping6+0x160>
  {
    wifi_ping_cparams_t cp = {0};
 8009a64:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8009a68:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	f240 1307 	movw	r3, #263	; 0x107
 8009a72:	461a      	mov	r2, r3
 8009a74:	2100      	movs	r1, #0
 8009a76:	f00d fcb1 	bl	80173dc <memset>
    const uint16_t cp_size = (uint16_t)(sizeof(cp));
 8009a7a:	f240 1307 	movw	r3, #263	; 0x107
 8009a7e:	f8a7 314e 	strh.w	r3, [r7, #334]	; 0x14e
    int32_t ping_resp[1 + MX_WIFI_PING_MAX] = {0};
 8009a82:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8009a86:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	232c      	movs	r3, #44	; 0x2c
 8009a8e:	461a      	mov	r2, r3
 8009a90:	2100      	movs	r1, #0
 8009a92:	f00d fca3 	bl	80173dc <memset>
    wifi_ping_rparams_t *rp = NULL;
 8009a96:	2300      	movs	r3, #0
 8009a98:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
    uint16_t rp_size = (uint16_t)sizeof(ping_resp);
 8009a9c:	232c      	movs	r3, #44	; 0x2c
 8009a9e:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146

    ret = MX_WIFI_STATUS_ERROR;
 8009aa2:	23ff      	movs	r3, #255	; 0xff
 8009aa4:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157

    MX_WIFI_STRNCPY(cp.hostname, hostname);
 8009aa8:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8009aac:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8009ab0:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8009ab4:	22fe      	movs	r2, #254	; 0xfe
 8009ab6:	6819      	ldr	r1, [r3, #0]
 8009ab8:	f000 fa07 	bl	8009eca <void_strncpy>
    cp.count = count;
 8009abc:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8009ac0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8009ac4:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8009ac8:	f5a2 72aa 	sub.w	r2, r2, #340	; 0x154
 8009acc:	6812      	ldr	r2, [r2, #0]
 8009ace:	f8c3 20ff 	str.w	r2, [r3, #255]	; 0xff
    cp.delay_ms = delay;
 8009ad2:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8009ad6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8009ada:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8009ade:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8009ae2:	6812      	ldr	r2, [r2, #0]
 8009ae4:	f8c3 2103 	str.w	r2, [r3, #259]	; 0x103

    rp = (wifi_ping_rparams_t *)&ping_resp;
 8009ae8:	f107 0310 	add.w	r3, r7, #16
 8009aec:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
    if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_WIFI_PING6_CMD,
 8009af0:	f8b7 214e 	ldrh.w	r2, [r7, #334]	; 0x14e
 8009af4:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8009af8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009afc:	9301      	str	r3, [sp, #4]
 8009afe:	f507 73a3 	add.w	r3, r7, #326	; 0x146
 8009b02:	9300      	str	r3, [sp, #0]
 8009b04:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8009b08:	f44f 708b 	mov.w	r0, #278	; 0x116
 8009b0c:	f7fe f95c 	bl	8007dc8 <mipc_request>
 8009b10:	4603      	mov	r3, r0
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d125      	bne.n	8009b62 <MX_WIFI_Socket_ping6+0x160>
                                          (uint8_t *)&cp, cp_size,
                                          (uint8_t *)rp, &rp_size,
                                          MX_WIFI_CMD_TIMEOUT))
    {
      if (rp->num > 0)
 8009b16:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	dd20      	ble.n	8009b62 <MX_WIFI_Socket_ping6+0x160>
      {
        for (int32_t i = 0; i < rp->num; i++)
 8009b20:	2300      	movs	r3, #0
 8009b22:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8009b26:	e012      	b.n	8009b4e <MX_WIFI_Socket_ping6+0x14c>
        {
          response[i] = rp->delay_ms[i];
 8009b28:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8009b2c:	009b      	lsls	r3, r3, #2
 8009b2e:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 8009b32:	441a      	add	r2, r3
 8009b34:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 8009b38:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8009b3c:	009b      	lsls	r3, r3, #2
 8009b3e:	440b      	add	r3, r1
 8009b40:	685b      	ldr	r3, [r3, #4]
 8009b42:	6013      	str	r3, [r2, #0]
        for (int32_t i = 0; i < rp->num; i++)
 8009b44:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8009b48:	3301      	adds	r3, #1
 8009b4a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8009b4e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8009b58:	429a      	cmp	r2, r3
 8009b5a:	dbe5      	blt.n	8009b28 <MX_WIFI_Socket_ping6+0x126>
        }
        ret = MX_WIFI_STATUS_OK;
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
      }
    }
  }

  return (int32_t)ret;
 8009b62:	f997 3157 	ldrsb.w	r3, [r7, #343]	; 0x157
}
 8009b66:	4618      	mov	r0, r3
 8009b68:	f507 77ae 	add.w	r7, r7, #348	; 0x15c
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	bd90      	pop	{r4, r7, pc}

08009b70 <MX_WIFI_Socket_getpeername>:
  return ret;
}


int32_t MX_WIFI_Socket_getpeername(MX_WIFIObject_t *Obj, int32_t SockFd, struct mx_sockaddr *Addr, uint32_t *AddrLen)
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b094      	sub	sp, #80	; 0x50
 8009b74:	af02      	add	r7, sp, #8
 8009b76:	60f8      	str	r0, [r7, #12]
 8009b78:	60b9      	str	r1, [r7, #8]
 8009b7a:	607a      	str	r2, [r7, #4]
 8009b7c:	603b      	str	r3, [r7, #0]
  MX_WIFI_STATUS_T ret = MX_WIFI_STATUS_PARAM_ERROR;
 8009b7e:	23fc      	movs	r3, #252	; 0xfc
 8009b80:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

  if ((NULL != Obj) && (0 <= SockFd) && (NULL != Addr) && (NULL != AddrLen) && (0 < *AddrLen))
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d04b      	beq.n	8009c22 <MX_WIFI_Socket_getpeername+0xb2>
 8009b8a:	68bb      	ldr	r3, [r7, #8]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	db48      	blt.n	8009c22 <MX_WIFI_Socket_getpeername+0xb2>
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d045      	beq.n	8009c22 <MX_WIFI_Socket_getpeername+0xb2>
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d042      	beq.n	8009c22 <MX_WIFI_Socket_getpeername+0xb2>
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d03e      	beq.n	8009c22 <MX_WIFI_Socket_getpeername+0xb2>
  {
    socket_getpeername_cparams_t cp = {0};
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
    const uint16_t cp_size = (uint16_t)(sizeof(cp));
 8009ba8:	2304      	movs	r3, #4
 8009baa:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    socket_getpeername_rparams_t rp = {0};
 8009bae:	f107 0314 	add.w	r3, r7, #20
 8009bb2:	2224      	movs	r2, #36	; 0x24
 8009bb4:	2100      	movs	r1, #0
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	f00d fc10 	bl	80173dc <memset>
    uint16_t rp_size = (uint16_t)sizeof(rp);
 8009bbc:	2324      	movs	r3, #36	; 0x24
 8009bbe:	877b      	strh	r3, [r7, #58]	; 0x3a

    ret = MX_WIFI_STATUS_ERROR;
 8009bc0:	23ff      	movs	r3, #255	; 0xff
 8009bc2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    cp.sockfd = SockFd;
 8009bc6:	68bb      	ldr	r3, [r7, #8]
 8009bc8:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_SOCKET_GETPEERNAME_CMD,
 8009bca:	f107 0014 	add.w	r0, r7, #20
 8009bce:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8009bd2:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8009bd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009bda:	9301      	str	r3, [sp, #4]
 8009bdc:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 8009be0:	9300      	str	r3, [sp, #0]
 8009be2:	4603      	mov	r3, r0
 8009be4:	f44f 7004 	mov.w	r0, #528	; 0x210
 8009be8:	f7fe f8ee 	bl	8007dc8 <mipc_request>
 8009bec:	4603      	mov	r3, r0
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d117      	bne.n	8009c22 <MX_WIFI_Socket_getpeername+0xb2>
                                          (uint8_t *)&cp, cp_size,
                                          (uint8_t *)&rp, &rp_size,
                                          MX_WIFI_CMD_TIMEOUT))
    {
      if (MIPC_CODE_SUCCESS == rp.status)
 8009bf2:	697b      	ldr	r3, [r7, #20]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d114      	bne.n	8009c22 <MX_WIFI_Socket_getpeername+0xb2>
      {
        const size_t msize = MIN(rp.namelen, *AddrLen);
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	681a      	ldr	r2, [r3, #0]
 8009bfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bfe:	4293      	cmp	r3, r2
 8009c00:	bf28      	it	cs
 8009c02:	4613      	movcs	r3, r2
 8009c04:	643b      	str	r3, [r7, #64]	; 0x40

        (void)memcpy(Addr, &rp.name, msize);
 8009c06:	f107 0314 	add.w	r3, r7, #20
 8009c0a:	3304      	adds	r3, #4
 8009c0c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009c0e:	4619      	mov	r1, r3
 8009c10:	6878      	ldr	r0, [r7, #4]
 8009c12:	f00d fca2 	bl	801755a <memcpy>
        *AddrLen = msize;
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009c1a:	601a      	str	r2, [r3, #0]
        ret = MX_WIFI_STATUS_OK;
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  return (int32_t)ret;
 8009c22:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8009c26:	4618      	mov	r0, r3
 8009c28:	3748      	adds	r7, #72	; 0x48
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	bd80      	pop	{r7, pc}

08009c2e <MX_WIFI_Socket_getsockname>:


int32_t MX_WIFI_Socket_getsockname(MX_WIFIObject_t *Obj, int32_t SockFd, struct mx_sockaddr *Addr, uint32_t *AddrLen)
{
 8009c2e:	b580      	push	{r7, lr}
 8009c30:	b094      	sub	sp, #80	; 0x50
 8009c32:	af02      	add	r7, sp, #8
 8009c34:	60f8      	str	r0, [r7, #12]
 8009c36:	60b9      	str	r1, [r7, #8]
 8009c38:	607a      	str	r2, [r7, #4]
 8009c3a:	603b      	str	r3, [r7, #0]
  MX_WIFI_STATUS_T ret = MX_WIFI_STATUS_PARAM_ERROR;
 8009c3c:	23fc      	movs	r3, #252	; 0xfc
 8009c3e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

  if ((NULL != Obj) && (0 <= SockFd) && (NULL != Addr) && (NULL != AddrLen) && (0 < *AddrLen))
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d04e      	beq.n	8009ce6 <MX_WIFI_Socket_getsockname+0xb8>
 8009c48:	68bb      	ldr	r3, [r7, #8]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	db4b      	blt.n	8009ce6 <MX_WIFI_Socket_getsockname+0xb8>
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d048      	beq.n	8009ce6 <MX_WIFI_Socket_getsockname+0xb8>
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d045      	beq.n	8009ce6 <MX_WIFI_Socket_getsockname+0xb8>
 8009c5a:	683b      	ldr	r3, [r7, #0]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d041      	beq.n	8009ce6 <MX_WIFI_Socket_getsockname+0xb8>
  {
    socket_getsockname_cparams_t cp = {0};
 8009c62:	2300      	movs	r3, #0
 8009c64:	63fb      	str	r3, [r7, #60]	; 0x3c
    const uint16_t cp_size = (uint16_t)(sizeof(cp));
 8009c66:	2304      	movs	r3, #4
 8009c68:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    socket_getsockname_rparams_t rp = {0};
 8009c6c:	f107 0314 	add.w	r3, r7, #20
 8009c70:	2224      	movs	r2, #36	; 0x24
 8009c72:	2100      	movs	r1, #0
 8009c74:	4618      	mov	r0, r3
 8009c76:	f00d fbb1 	bl	80173dc <memset>
    uint16_t rp_size = (uint16_t)sizeof(rp);
 8009c7a:	2324      	movs	r3, #36	; 0x24
 8009c7c:	877b      	strh	r3, [r7, #58]	; 0x3a

    ret = MX_WIFI_STATUS_ERROR;
 8009c7e:	23ff      	movs	r3, #255	; 0xff
 8009c80:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    rp.status = MIPC_CODE_ERROR;
 8009c84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009c88:	617b      	str	r3, [r7, #20]
    cp.sockfd = SockFd;
 8009c8a:	68bb      	ldr	r3, [r7, #8]
 8009c8c:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_SOCKET_GETSOCKNAME_CMD,
 8009c8e:	f107 0014 	add.w	r0, r7, #20
 8009c92:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8009c96:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8009c9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009c9e:	9301      	str	r3, [sp, #4]
 8009ca0:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 8009ca4:	9300      	str	r3, [sp, #0]
 8009ca6:	4603      	mov	r3, r0
 8009ca8:	f240 200f 	movw	r0, #527	; 0x20f
 8009cac:	f7fe f88c 	bl	8007dc8 <mipc_request>
 8009cb0:	4603      	mov	r3, r0
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d117      	bne.n	8009ce6 <MX_WIFI_Socket_getsockname+0xb8>
                                          (uint8_t *)&cp, cp_size,
                                          (uint8_t *)&rp, &rp_size,
                                          MX_WIFI_CMD_TIMEOUT))
    {
      if (MIPC_CODE_SUCCESS == rp.status)
 8009cb6:	697b      	ldr	r3, [r7, #20]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d114      	bne.n	8009ce6 <MX_WIFI_Socket_getsockname+0xb8>
      {
        const size_t msize = MIN(rp.namelen, *AddrLen);
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	681a      	ldr	r2, [r3, #0]
 8009cc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cc2:	4293      	cmp	r3, r2
 8009cc4:	bf28      	it	cs
 8009cc6:	4613      	movcs	r3, r2
 8009cc8:	643b      	str	r3, [r7, #64]	; 0x40

        (void)memcpy(Addr, &rp.name, msize);
 8009cca:	f107 0314 	add.w	r3, r7, #20
 8009cce:	3304      	adds	r3, #4
 8009cd0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009cd2:	4619      	mov	r1, r3
 8009cd4:	6878      	ldr	r0, [r7, #4]
 8009cd6:	f00d fc40 	bl	801755a <memcpy>
        *AddrLen = msize;
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009cde:	601a      	str	r2, [r3, #0]
        ret = MX_WIFI_STATUS_OK;
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }
  return (int32_t)ret;
 8009ce6:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8009cea:	4618      	mov	r0, r3
 8009cec:	3748      	adds	r7, #72	; 0x48
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	bd80      	pop	{r7, pc}

08009cf2 <mx_s_addr_in_to_packed>:
}


#if (MX_WIFI_NETWORK_BYPASS_MODE == 0)
static struct mx_sockaddr_storage mx_s_addr_in_to_packed(const struct mx_sockaddr *Addr)
{
 8009cf2:	b4b0      	push	{r4, r5, r7}
 8009cf4:	b08b      	sub	sp, #44	; 0x2c
 8009cf6:	af00      	add	r7, sp, #0
 8009cf8:	6078      	str	r0, [r7, #4]
 8009cfa:	6039      	str	r1, [r7, #0]
  struct mx_sockaddr_storage s_addr_storage = {0};
 8009cfc:	f107 0308 	add.w	r3, r7, #8
 8009d00:	2200      	movs	r2, #0
 8009d02:	601a      	str	r2, [r3, #0]
 8009d04:	605a      	str	r2, [r3, #4]
 8009d06:	609a      	str	r2, [r3, #8]
 8009d08:	60da      	str	r2, [r3, #12]
 8009d0a:	611a      	str	r2, [r3, #16]
 8009d0c:	615a      	str	r2, [r3, #20]
 8009d0e:	619a      	str	r2, [r3, #24]
  const struct mx_sockaddr_in *const p_s_addr_in = (const struct mx_sockaddr_in *) Addr;
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	627b      	str	r3, [r7, #36]	; 0x24

  s_addr_storage.s2_len = p_s_addr_in->sin_len;
 8009d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d16:	781b      	ldrb	r3, [r3, #0]
 8009d18:	723b      	strb	r3, [r7, #8]
  s_addr_storage.ss_family = p_s_addr_in->sin_family;
 8009d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d1c:	785b      	ldrb	r3, [r3, #1]
 8009d1e:	727b      	strb	r3, [r7, #9]
  s_addr_storage.s2_data1[0] = (uint8_t)(p_s_addr_in->sin_port);
 8009d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d22:	885b      	ldrh	r3, [r3, #2]
 8009d24:	b2db      	uxtb	r3, r3
 8009d26:	72bb      	strb	r3, [r7, #10]
  s_addr_storage.s2_data1[1] = (uint8_t)(p_s_addr_in->sin_port >> 8);
 8009d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d2a:	885b      	ldrh	r3, [r3, #2]
 8009d2c:	0a1b      	lsrs	r3, r3, #8
 8009d2e:	b29b      	uxth	r3, r3
 8009d30:	b2db      	uxtb	r3, r3
 8009d32:	72fb      	strb	r3, [r7, #11]
  s_addr_storage.s2_data2[0] = p_s_addr_in->sin_addr.s_addr;
 8009d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d36:	685b      	ldr	r3, [r3, #4]
 8009d38:	60fb      	str	r3, [r7, #12]
  /* useless: s_addr_storage.s2_data2[2] = 0; */
  /* useless: s_addr_storage.s2_data3[0] = 0; */
  /* useless: s_addr_storage.s2_data3[1] = 0; */
  /* useless: s_addr_storage.s2_data3[2] = 0; */

  return s_addr_storage;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	461d      	mov	r5, r3
 8009d3e:	f107 0408 	add.w	r4, r7, #8
 8009d42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009d44:	6028      	str	r0, [r5, #0]
 8009d46:	6069      	str	r1, [r5, #4]
 8009d48:	60aa      	str	r2, [r5, #8]
 8009d4a:	60eb      	str	r3, [r5, #12]
 8009d4c:	cc07      	ldmia	r4!, {r0, r1, r2}
 8009d4e:	6128      	str	r0, [r5, #16]
 8009d50:	6169      	str	r1, [r5, #20]
 8009d52:	61aa      	str	r2, [r5, #24]
}
 8009d54:	6878      	ldr	r0, [r7, #4]
 8009d56:	372c      	adds	r7, #44	; 0x2c
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	bcb0      	pop	{r4, r5, r7}
 8009d5c:	4770      	bx	lr

08009d5e <mx_s_addr_in_from_packed>:

static struct mx_sockaddr_in mx_s_addr_in_from_packed(const struct mx_sockaddr_storage *Addr)
{
 8009d5e:	b490      	push	{r4, r7}
 8009d60:	b088      	sub	sp, #32
 8009d62:	af00      	add	r7, sp, #0
 8009d64:	6078      	str	r0, [r7, #4]
 8009d66:	6039      	str	r1, [r7, #0]
  struct mx_sockaddr_in s_addr_in = {0};
 8009d68:	f107 030c 	add.w	r3, r7, #12
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	601a      	str	r2, [r3, #0]
 8009d70:	605a      	str	r2, [r3, #4]
 8009d72:	609a      	str	r2, [r3, #8]
 8009d74:	60da      	str	r2, [r3, #12]

  s_addr_in.sin_len = Addr->s2_len;
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	781b      	ldrb	r3, [r3, #0]
 8009d7a:	733b      	strb	r3, [r7, #12]
  s_addr_in.sin_family = Addr->ss_family;
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	785b      	ldrb	r3, [r3, #1]
 8009d80:	737b      	strb	r3, [r7, #13]
  {
    uint16_t port_in = (uint16_t)Addr->s2_data1[0];
 8009d82:	683b      	ldr	r3, [r7, #0]
 8009d84:	789b      	ldrb	r3, [r3, #2]
 8009d86:	83fb      	strh	r3, [r7, #30]
    port_in |= (uint16_t)((uint16_t)Addr->s2_data1[1] << 8);
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	78db      	ldrb	r3, [r3, #3]
 8009d8c:	b29b      	uxth	r3, r3
 8009d8e:	021b      	lsls	r3, r3, #8
 8009d90:	b29a      	uxth	r2, r3
 8009d92:	8bfb      	ldrh	r3, [r7, #30]
 8009d94:	4313      	orrs	r3, r2
 8009d96:	83fb      	strh	r3, [r7, #30]
    s_addr_in.sin_port = port_in;
 8009d98:	8bfb      	ldrh	r3, [r7, #30]
 8009d9a:	81fb      	strh	r3, [r7, #14]
  }
  s_addr_in.sin_addr.s_addr = Addr->s2_data2[0];
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	685b      	ldr	r3, [r3, #4]
 8009da0:	613b      	str	r3, [r7, #16]
  /* useless: s_addr_in.sin_zero[4] = 0; */
  /* useless: s_addr_in.sin_zero[5] = 0; */
  /* useless: s_addr_in.sin_zero[6] = 0; */
  /* useless: s_addr_in.sin_zero[7] = 0; */

  return s_addr_in;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	461c      	mov	r4, r3
 8009da6:	f107 030c 	add.w	r3, r7, #12
 8009daa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009dac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8009db0:	6878      	ldr	r0, [r7, #4]
 8009db2:	3720      	adds	r7, #32
 8009db4:	46bd      	mov	sp, r7
 8009db6:	bc90      	pop	{r4, r7}
 8009db8:	4770      	bx	lr

08009dba <mx_s_addr_in6_to_packed>:

static struct mx_sockaddr_storage mx_s_addr_in6_to_packed(const struct mx_sockaddr *Addr)
{
 8009dba:	b4b0      	push	{r4, r5, r7}
 8009dbc:	b08b      	sub	sp, #44	; 0x2c
 8009dbe:	af00      	add	r7, sp, #0
 8009dc0:	6078      	str	r0, [r7, #4]
 8009dc2:	6039      	str	r1, [r7, #0]
  struct mx_sockaddr_storage s_addr_storage = {0};
 8009dc4:	f107 0308 	add.w	r3, r7, #8
 8009dc8:	2200      	movs	r2, #0
 8009dca:	601a      	str	r2, [r3, #0]
 8009dcc:	605a      	str	r2, [r3, #4]
 8009dce:	609a      	str	r2, [r3, #8]
 8009dd0:	60da      	str	r2, [r3, #12]
 8009dd2:	611a      	str	r2, [r3, #16]
 8009dd4:	615a      	str	r2, [r3, #20]
 8009dd6:	619a      	str	r2, [r3, #24]
  const struct mx_sockaddr_in6 *const p_s_addr_in6 = (const struct mx_sockaddr_in6 *) Addr;
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	627b      	str	r3, [r7, #36]	; 0x24

  s_addr_storage.s2_len = p_s_addr_in6->sin6_len;
 8009ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dde:	781b      	ldrb	r3, [r3, #0]
 8009de0:	723b      	strb	r3, [r7, #8]
  s_addr_storage.ss_family = p_s_addr_in6->sin6_family;
 8009de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009de4:	785b      	ldrb	r3, [r3, #1]
 8009de6:	727b      	strb	r3, [r7, #9]
  s_addr_storage.s2_data1[0] = (uint8_t)(p_s_addr_in6->sin6_port);
 8009de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dea:	885b      	ldrh	r3, [r3, #2]
 8009dec:	b2db      	uxtb	r3, r3
 8009dee:	72bb      	strb	r3, [r7, #10]
  s_addr_storage.s2_data1[1] = (uint8_t)(p_s_addr_in6->sin6_port >> 8);
 8009df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009df2:	885b      	ldrh	r3, [r3, #2]
 8009df4:	0a1b      	lsrs	r3, r3, #8
 8009df6:	b29b      	uxth	r3, r3
 8009df8:	b2db      	uxtb	r3, r3
 8009dfa:	72fb      	strb	r3, [r7, #11]
  s_addr_storage.s2_data2[0] = p_s_addr_in6->sin6_flowinfo;
 8009dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dfe:	685b      	ldr	r3, [r3, #4]
 8009e00:	60fb      	str	r3, [r7, #12]
  s_addr_storage.s2_data2[1] = p_s_addr_in6->sin6_addr.un.u32_addr[0];
 8009e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e04:	689b      	ldr	r3, [r3, #8]
 8009e06:	613b      	str	r3, [r7, #16]
  s_addr_storage.s2_data2[2] = p_s_addr_in6->sin6_addr.un.u32_addr[1];
 8009e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e0a:	68db      	ldr	r3, [r3, #12]
 8009e0c:	617b      	str	r3, [r7, #20]
  s_addr_storage.s2_data3[0] = p_s_addr_in6->sin6_addr.un.u32_addr[2];
 8009e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e10:	691b      	ldr	r3, [r3, #16]
 8009e12:	61bb      	str	r3, [r7, #24]
  s_addr_storage.s2_data3[1] = p_s_addr_in6->sin6_addr.un.u32_addr[3];
 8009e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e16:	695b      	ldr	r3, [r3, #20]
 8009e18:	61fb      	str	r3, [r7, #28]
  s_addr_storage.s2_data3[2] = p_s_addr_in6->sin6_scope_id;
 8009e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e1c:	699b      	ldr	r3, [r3, #24]
 8009e1e:	623b      	str	r3, [r7, #32]

  return s_addr_storage;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	461d      	mov	r5, r3
 8009e24:	f107 0408 	add.w	r4, r7, #8
 8009e28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009e2a:	6028      	str	r0, [r5, #0]
 8009e2c:	6069      	str	r1, [r5, #4]
 8009e2e:	60aa      	str	r2, [r5, #8]
 8009e30:	60eb      	str	r3, [r5, #12]
 8009e32:	cc07      	ldmia	r4!, {r0, r1, r2}
 8009e34:	6128      	str	r0, [r5, #16]
 8009e36:	6169      	str	r1, [r5, #20]
 8009e38:	61aa      	str	r2, [r5, #24]
}
 8009e3a:	6878      	ldr	r0, [r7, #4]
 8009e3c:	372c      	adds	r7, #44	; 0x2c
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	bcb0      	pop	{r4, r5, r7}
 8009e42:	4770      	bx	lr

08009e44 <mx_s_addr_in6_from_packed>:

static struct mx_sockaddr_in6 mx_s_addr_in6_from_packed(const struct mx_sockaddr_storage *Addr)
{
 8009e44:	b4b0      	push	{r4, r5, r7}
 8009e46:	b08b      	sub	sp, #44	; 0x2c
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
 8009e4c:	6039      	str	r1, [r7, #0]
  struct mx_sockaddr_in6 s_addr_in6 = {0};
 8009e4e:	f107 0308 	add.w	r3, r7, #8
 8009e52:	2200      	movs	r2, #0
 8009e54:	601a      	str	r2, [r3, #0]
 8009e56:	605a      	str	r2, [r3, #4]
 8009e58:	609a      	str	r2, [r3, #8]
 8009e5a:	60da      	str	r2, [r3, #12]
 8009e5c:	611a      	str	r2, [r3, #16]
 8009e5e:	615a      	str	r2, [r3, #20]
 8009e60:	619a      	str	r2, [r3, #24]

  s_addr_in6.sin6_len = Addr->s2_len;
 8009e62:	683b      	ldr	r3, [r7, #0]
 8009e64:	781b      	ldrb	r3, [r3, #0]
 8009e66:	723b      	strb	r3, [r7, #8]
  s_addr_in6.sin6_family = Addr->ss_family;
 8009e68:	683b      	ldr	r3, [r7, #0]
 8009e6a:	785b      	ldrb	r3, [r3, #1]
 8009e6c:	727b      	strb	r3, [r7, #9]
  {
    uint16_t port_in = (uint16_t)Addr->s2_data1[0];
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	789b      	ldrb	r3, [r3, #2]
 8009e72:	84fb      	strh	r3, [r7, #38]	; 0x26
    port_in |= (uint16_t)((uint16_t)Addr->s2_data1[1] << 8);
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	78db      	ldrb	r3, [r3, #3]
 8009e78:	b29b      	uxth	r3, r3
 8009e7a:	021b      	lsls	r3, r3, #8
 8009e7c:	b29a      	uxth	r2, r3
 8009e7e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009e80:	4313      	orrs	r3, r2
 8009e82:	84fb      	strh	r3, [r7, #38]	; 0x26
    s_addr_in6.sin6_port = port_in;
 8009e84:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009e86:	817b      	strh	r3, [r7, #10]
  }
  s_addr_in6.sin6_flowinfo = Addr->s2_data2[0];
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	685b      	ldr	r3, [r3, #4]
 8009e8c:	60fb      	str	r3, [r7, #12]
  s_addr_in6.sin6_addr.un.u32_addr[0] = Addr->s2_data2[1];
 8009e8e:	683b      	ldr	r3, [r7, #0]
 8009e90:	689b      	ldr	r3, [r3, #8]
 8009e92:	613b      	str	r3, [r7, #16]
  s_addr_in6.sin6_addr.un.u32_addr[1] = Addr->s2_data2[2];
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	68db      	ldr	r3, [r3, #12]
 8009e98:	617b      	str	r3, [r7, #20]
  s_addr_in6.sin6_addr.un.u32_addr[2] = Addr->s2_data3[0];
 8009e9a:	683b      	ldr	r3, [r7, #0]
 8009e9c:	691b      	ldr	r3, [r3, #16]
 8009e9e:	61bb      	str	r3, [r7, #24]
  s_addr_in6.sin6_addr.un.u32_addr[3] = Addr->s2_data3[1];
 8009ea0:	683b      	ldr	r3, [r7, #0]
 8009ea2:	695b      	ldr	r3, [r3, #20]
 8009ea4:	61fb      	str	r3, [r7, #28]
  s_addr_in6.sin6_scope_id = Addr->s2_data3[2];
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	699b      	ldr	r3, [r3, #24]
 8009eaa:	623b      	str	r3, [r7, #32]

  return s_addr_in6;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	461d      	mov	r5, r3
 8009eb0:	f107 0408 	add.w	r4, r7, #8
 8009eb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009eb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009eb8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8009ebc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8009ec0:	6878      	ldr	r0, [r7, #4]
 8009ec2:	372c      	adds	r7, #44	; 0x2c
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	bcb0      	pop	{r4, r5, r7}
 8009ec8:	4770      	bx	lr

08009eca <void_strncpy>:
#endif /* (MX_WIFI_NETWORK_BYPASS_MODE == 0) */

static void void_strncpy(char *Destination, const char *Source, size_t Num)
{
 8009eca:	b580      	push	{r7, lr}
 8009ecc:	b084      	sub	sp, #16
 8009ece:	af00      	add	r7, sp, #0
 8009ed0:	60f8      	str	r0, [r7, #12]
 8009ed2:	60b9      	str	r1, [r7, #8]
 8009ed4:	607a      	str	r2, [r7, #4]
  (void)strncpy(Destination, Source, Num);
 8009ed6:	687a      	ldr	r2, [r7, #4]
 8009ed8:	68b9      	ldr	r1, [r7, #8]
 8009eda:	68f8      	ldr	r0, [r7, #12]
 8009edc:	f00d fa41 	bl	8017362 <strncpy>
}
 8009ee0:	bf00      	nop
 8009ee2:	3710      	adds	r7, #16
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	bd80      	pop	{r7, pc}

08009ee8 <mx_buf_alloc>:
  uint32_t header_len;
  uint8_t  data[1];
} mx_buf_t;

static inline mx_buf_t *mx_buf_alloc(uint32_t len)
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b084      	sub	sp, #16
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
  mx_buf_t *p = (mx_buf_t *) MX_WIFI_MALLOC(len + sizeof(mx_buf_t) -1U);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	330b      	adds	r3, #11
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	f00b fc05 	bl	8015704 <malloc>
 8009efa:	4603      	mov	r3, r0
 8009efc:	60fb      	str	r3, [r7, #12]
  if (NULL != p)
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d005      	beq.n	8009f10 <mx_buf_alloc+0x28>
  {
    p->len = len;
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	687a      	ldr	r2, [r7, #4]
 8009f08:	601a      	str	r2, [r3, #0]
    p->header_len = 0;
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	605a      	str	r2, [r3, #4]
  }
  return p;
 8009f10:	68fb      	ldr	r3, [r7, #12]
}
 8009f12:	4618      	mov	r0, r3
 8009f14:	3710      	adds	r7, #16
 8009f16:	46bd      	mov	sp, r7
 8009f18:	bd80      	pop	{r7, pc}

08009f1a <MX_WIFI_IO_DELAY>:
static void mx_wifi_spi_txrx_task(THREAD_CONTEXT_TYPE argument);
#endif /* MX_WIFI_BARE_OS_H */


static void MX_WIFI_IO_DELAY(uint32_t ms)
{
 8009f1a:	b580      	push	{r7, lr}
 8009f1c:	b082      	sub	sp, #8
 8009f1e:	af00      	add	r7, sp, #0
 8009f20:	6078      	str	r0, [r7, #4]
  DELAY_MS(ms);
 8009f22:	6878      	ldr	r0, [r7, #4]
 8009f24:	f000 fbbe 	bl	800a6a4 <HAL_Delay>
}
 8009f28:	bf00      	nop
 8009f2a:	3708      	adds	r7, #8
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	bd80      	pop	{r7, pc}

08009f30 <MX_WIFI_SPI_Init>:
  * @brief  Initialize the SPI
  * @param  mode
  * @retval status
  */
static int8_t MX_WIFI_SPI_Init(uint16_t mode)
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b084      	sub	sp, #16
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	4603      	mov	r3, r0
 8009f38:	80fb      	strh	r3, [r7, #6]
  int8_t ret = 0;
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	73fb      	strb	r3, [r7, #15]

  if (MX_WIFI_RESET == mode)
 8009f3e:	88fb      	ldrh	r3, [r7, #6]
 8009f40:	2b01      	cmp	r3, #1
 8009f42:	d113      	bne.n	8009f6c <MX_WIFI_SPI_Init+0x3c>
  {
    MX_WIFI_HW_RESET();
 8009f44:	2200      	movs	r2, #0
 8009f46:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009f4a:	480d      	ldr	r0, [pc, #52]	; (8009f80 <MX_WIFI_SPI_Init+0x50>)
 8009f4c:	f001 f82e 	bl	800afac <HAL_GPIO_WritePin>
 8009f50:	2064      	movs	r0, #100	; 0x64
 8009f52:	f000 fba7 	bl	800a6a4 <HAL_Delay>
 8009f56:	2201      	movs	r2, #1
 8009f58:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009f5c:	4808      	ldr	r0, [pc, #32]	; (8009f80 <MX_WIFI_SPI_Init+0x50>)
 8009f5e:	f001 f825 	bl	800afac <HAL_GPIO_WritePin>
 8009f62:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8009f66:	f000 fb9d 	bl	800a6a4 <HAL_Delay>
 8009f6a:	e003      	b.n	8009f74 <MX_WIFI_SPI_Init+0x44>
  }
  else
  {
    ret = mx_wifi_spi_txrx_start();
 8009f6c:	f000 fa7c 	bl	800a468 <mx_wifi_spi_txrx_start>
 8009f70:	4603      	mov	r3, r0
 8009f72:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009f74:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009f78:	4618      	mov	r0, r3
 8009f7a:	3710      	adds	r7, #16
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	bd80      	pop	{r7, pc}
 8009f80:	42021400 	.word	0x42021400

08009f84 <MX_WIFI_SPI_DeInit>:
  * @brief  De-Initialize the SPI
  * @param  None
  * @retval status
  */
static int8_t MX_WIFI_SPI_DeInit(void)
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	af00      	add	r7, sp, #0
  mx_wifi_spi_txrx_stop();
 8009f88:	f000 fa96 	bl	800a4b8 <mx_wifi_spi_txrx_stop>
  return 0;
 8009f8c:	2300      	movs	r3, #0
}
 8009f8e:	4618      	mov	r0, r3
 8009f90:	bd80      	pop	{r7, pc}
	...

08009f94 <HAL_SPI_TransferCallback>:


void HAL_SPI_TransferCallback(void *hspi)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b082      	sub	sp, #8
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
  (void)hspi;
  SEM_SIGNAL(SpiTransferDoneSem);
 8009f9c:	4803      	ldr	r0, [pc, #12]	; (8009fac <HAL_SPI_TransferCallback+0x18>)
 8009f9e:	f7fd fc1b 	bl	80077d8 <noos_sem_signal>
}
 8009fa2:	bf00      	nop
 8009fa4:	3708      	adds	r7, #8
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	bd80      	pop	{r7, pc}
 8009faa:	bf00      	nop
 8009fac:	2000331c 	.word	0x2000331c

08009fb0 <HAL_SPI_ErrorCallback>:


void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8009fb0:	b480      	push	{r7}
 8009fb2:	b083      	sub	sp, #12
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
  if (hspi == HSpiMX)
 8009fb8:	4a05      	ldr	r2, [pc, #20]	; (8009fd0 <HAL_SPI_ErrorCallback+0x20>)
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	4293      	cmp	r3, r2
 8009fbe:	d100      	bne.n	8009fc2 <HAL_SPI_ErrorCallback+0x12>
  {
    MX_ASSERT(false);
 8009fc0:	e7fe      	b.n	8009fc0 <HAL_SPI_ErrorCallback+0x10>
  }
}
 8009fc2:	bf00      	nop
 8009fc4:	370c      	adds	r7, #12
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fcc:	4770      	bx	lr
 8009fce:	bf00      	nop
 8009fd0:	20000c8c 	.word	0x20000c8c

08009fd4 <mxchip_WIFI_ISR>:
  * @brief  Interrupt handler for IRQ and FLOW pin
  * @param  isr_source
  * @retval None
  */
void mxchip_WIFI_ISR(uint16_t isr_source)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b082      	sub	sp, #8
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	4603      	mov	r3, r0
 8009fdc:	80fb      	strh	r3, [r7, #6]
  /*DEBUG_LOG("\n[%"PRIu32"] %s()> %" PRIx32 "\n\n", HAL_GetTick(), __FUNCTION__, (uint32_t)isr_source);*/

  if (MX_WIFI_SPI_IRQ_PIN == isr_source)
 8009fde:	88fb      	ldrh	r3, [r7, #6]
 8009fe0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009fe4:	d102      	bne.n	8009fec <mxchip_WIFI_ISR+0x18>
  {
    SEM_SIGNAL(SpiTxRxSem);
 8009fe6:	4807      	ldr	r0, [pc, #28]	; (800a004 <mxchip_WIFI_ISR+0x30>)
 8009fe8:	f7fd fbf6 	bl	80077d8 <noos_sem_signal>
  }
  if (MX_WIFI_SPI_FLOW_PIN == isr_source)
 8009fec:	88fb      	ldrh	r3, [r7, #6]
 8009fee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009ff2:	d102      	bne.n	8009ffa <mxchip_WIFI_ISR+0x26>
  {
    SEM_SIGNAL(SpiFlowRiseSem);
 8009ff4:	4804      	ldr	r0, [pc, #16]	; (800a008 <mxchip_WIFI_ISR+0x34>)
 8009ff6:	f7fd fbef 	bl	80077d8 <noos_sem_signal>
  }
}
 8009ffa:	bf00      	nop
 8009ffc:	3708      	adds	r7, #8
 8009ffe:	46bd      	mov	sp, r7
 800a000:	bd80      	pop	{r7, pc}
 800a002:	bf00      	nop
 800a004:	20003314 	.word	0x20003314
 800a008:	20003318 	.word	0x20003318

0800a00c <wait_flow_high>:


static int8_t wait_flow_high(uint32_t timeout)
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b084      	sub	sp, #16
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
  int8_t ret = 0;
 800a014:	2300      	movs	r3, #0
 800a016:	73fb      	strb	r3, [r7, #15]
  if (SEM_WAIT(SpiFlowRiseSem, timeout, NULL) != SEM_OK)
 800a018:	2200      	movs	r2, #0
 800a01a:	6879      	ldr	r1, [r7, #4]
 800a01c:	480d      	ldr	r0, [pc, #52]	; (800a054 <wait_flow_high+0x48>)
 800a01e:	f7fd fbf4 	bl	800780a <noos_sem_wait>
 800a022:	4603      	mov	r3, r0
 800a024:	2b00      	cmp	r3, #0
 800a026:	d001      	beq.n	800a02c <wait_flow_high+0x20>
  {
    ret = -1;
 800a028:	23ff      	movs	r3, #255	; 0xff
 800a02a:	73fb      	strb	r3, [r7, #15]
  }
  if (MX_WIFI_SPI_FLOW_IS_LOW())
 800a02c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a030:	4809      	ldr	r0, [pc, #36]	; (800a058 <wait_flow_high+0x4c>)
 800a032:	f000 ffa3 	bl	800af7c <HAL_GPIO_ReadPin>
 800a036:	4603      	mov	r3, r0
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d104      	bne.n	800a046 <wait_flow_high+0x3a>
  {
    DEBUG_ERROR("FLOW is low\n");
 800a03c:	4807      	ldr	r0, [pc, #28]	; (800a05c <wait_flow_high+0x50>)
 800a03e:	f00d f967 	bl	8017310 <puts>
    ret = -1;
 800a042:	23ff      	movs	r3, #255	; 0xff
 800a044:	73fb      	strb	r3, [r7, #15]
  }

  DEBUG_LOG("\n%s()< %" PRIi32 "\n\n", __FUNCTION__, (int32_t)ret);

  return ret;
 800a046:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a04a:	4618      	mov	r0, r3
 800a04c:	3710      	adds	r7, #16
 800a04e:	46bd      	mov	sp, r7
 800a050:	bd80      	pop	{r7, pc}
 800a052:	bf00      	nop
 800a054:	20003318 	.word	0x20003318
 800a058:	42021800 	.word	0x42021800
 800a05c:	0801b564 	.word	0x0801b564

0800a060 <MX_WIFI_SPI_Write>:


static uint16_t MX_WIFI_SPI_Write(uint8_t *data, uint16_t len)
{
 800a060:	b580      	push	{r7, lr}
 800a062:	b084      	sub	sp, #16
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
 800a068:	460b      	mov	r3, r1
 800a06a:	807b      	strh	r3, [r7, #2]
  uint16_t sent;

  DEBUG_LOG("\n%s()> %" PRIu32 "\n\n", __FUNCTION__, (uint32_t)len);

  LOCK(SpiTxLock);
 800a06c:	4b1b      	ldr	r3, [pc, #108]	; (800a0dc <MX_WIFI_SPI_Write+0x7c>)
 800a06e:	781b      	ldrb	r3, [r3, #0]
 800a070:	b2db      	uxtb	r3, r3
 800a072:	2b00      	cmp	r3, #0
 800a074:	d1fa      	bne.n	800a06c <MX_WIFI_SPI_Write+0xc>
 800a076:	4b19      	ldr	r3, [pc, #100]	; (800a0dc <MX_WIFI_SPI_Write+0x7c>)
 800a078:	2201      	movs	r2, #1
 800a07a:	701a      	strb	r2, [r3, #0]

  if ((NULL == data) || (0 == len) || (len > SPI_DATA_SIZE))
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d007      	beq.n	800a092 <MX_WIFI_SPI_Write+0x32>
 800a082:	887b      	ldrh	r3, [r7, #2]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d004      	beq.n	800a092 <MX_WIFI_SPI_Write+0x32>
 800a088:	887b      	ldrh	r3, [r7, #2]
 800a08a:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800a08e:	4293      	cmp	r3, r2
 800a090:	d90a      	bls.n	800a0a8 <MX_WIFI_SPI_Write+0x48>
  {
    DEBUG_ERROR("Warning, SPI send null or size overflow! len=%" PRIu32 "\n", (uint32_t)len);
 800a092:	887b      	ldrh	r3, [r7, #2]
 800a094:	4619      	mov	r1, r3
 800a096:	4812      	ldr	r0, [pc, #72]	; (800a0e0 <MX_WIFI_SPI_Write+0x80>)
 800a098:	f00d f8cc 	bl	8017234 <iprintf>
    SpiTxLen = 0;
 800a09c:	4b11      	ldr	r3, [pc, #68]	; (800a0e4 <MX_WIFI_SPI_Write+0x84>)
 800a09e:	2200      	movs	r2, #0
 800a0a0:	801a      	strh	r2, [r3, #0]
    sent = 0;
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	81fb      	strh	r3, [r7, #14]
 800a0a6:	e010      	b.n	800a0ca <MX_WIFI_SPI_Write+0x6a>
  }
  else
  {
    SpiTxData = data;
 800a0a8:	4a0f      	ldr	r2, [pc, #60]	; (800a0e8 <MX_WIFI_SPI_Write+0x88>)
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	6013      	str	r3, [r2, #0]
    SpiTxLen  = len;
 800a0ae:	4a0d      	ldr	r2, [pc, #52]	; (800a0e4 <MX_WIFI_SPI_Write+0x84>)
 800a0b0:	887b      	ldrh	r3, [r7, #2]
 800a0b2:	8013      	strh	r3, [r2, #0]

    if (SEM_SIGNAL(SpiTxRxSem) != SEM_OK)
 800a0b4:	480d      	ldr	r0, [pc, #52]	; (800a0ec <MX_WIFI_SPI_Write+0x8c>)
 800a0b6:	f7fd fb8f 	bl	80077d8 <noos_sem_signal>
 800a0ba:	4603      	mov	r3, r0
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d002      	beq.n	800a0c6 <MX_WIFI_SPI_Write+0x66>
    {
      /* Happen if received thread did not have a chance to run on time, need to increase priority */
      DEBUG_ERROR("Warning, SPI semaphore has been already notified\n");
 800a0c0:	480b      	ldr	r0, [pc, #44]	; (800a0f0 <MX_WIFI_SPI_Write+0x90>)
 800a0c2:	f00d f925 	bl	8017310 <puts>
    }
    sent = len;
 800a0c6:	887b      	ldrh	r3, [r7, #2]
 800a0c8:	81fb      	strh	r3, [r7, #14]
  }

  UNLOCK(SpiTxLock);
 800a0ca:	4b04      	ldr	r3, [pc, #16]	; (800a0dc <MX_WIFI_SPI_Write+0x7c>)
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	701a      	strb	r2, [r3, #0]

  DEBUG_LOG("\n%s()< %" PRIi32 "\n\n", __FUNCTION__, (int32_t)sent);

  return sent;
 800a0d0:	89fb      	ldrh	r3, [r7, #14]
}
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	3710      	adds	r7, #16
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	bd80      	pop	{r7, pc}
 800a0da:	bf00      	nop
 800a0dc:	20003310 	.word	0x20003310
 800a0e0:	0801b570 	.word	0x0801b570
 800a0e4:	20003324 	.word	0x20003324
 800a0e8:	20003320 	.word	0x20003320
 800a0ec:	20003314 	.word	0x20003314
 800a0f0:	0801b5a4 	.word	0x0801b5a4

0800a0f4 <MX_WIFI_SPI_Read>:


static uint16_t MX_WIFI_SPI_Read(uint8_t *buffer, uint16_t buff_size)
{
 800a0f4:	b480      	push	{r7}
 800a0f6:	b083      	sub	sp, #12
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
 800a0fc:	460b      	mov	r3, r1
 800a0fe:	807b      	strh	r3, [r7, #2]
  (void)buffer;
  (void)buff_size;
  return 0;
 800a100:	2300      	movs	r3, #0
}
 800a102:	4618      	mov	r0, r3
 800a104:	370c      	adds	r7, #12
 800a106:	46bd      	mov	sp, r7
 800a108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10c:	4770      	bx	lr

0800a10e <TransmitReceive>:


static HAL_StatusTypeDef TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *txdata, uint8_t *rxdata, uint16_t datalen,
                                         uint32_t timeout)
{
 800a10e:	b580      	push	{r7, lr}
 800a110:	b088      	sub	sp, #32
 800a112:	af02      	add	r7, sp, #8
 800a114:	60f8      	str	r0, [r7, #12]
 800a116:	60b9      	str	r1, [r7, #8]
 800a118:	607a      	str	r2, [r7, #4]
 800a11a:	807b      	strh	r3, [r7, #2]
#if (defined(DMA_ON_USE) && (DMA_ON_USE == 1))
  ret = HAL_SPI_TransmitReceive_DMA(hspi, txdata, rxdata, datalen);
  SEM_WAIT(SpiTransferDoneSem, timeout, NULL);

#else
  ret = HAL_SPI_TransmitReceive(hspi, txdata, rxdata, datalen, timeout);
 800a11c:	887a      	ldrh	r2, [r7, #2]
 800a11e:	6a3b      	ldr	r3, [r7, #32]
 800a120:	9300      	str	r3, [sp, #0]
 800a122:	4613      	mov	r3, r2
 800a124:	687a      	ldr	r2, [r7, #4]
 800a126:	68b9      	ldr	r1, [r7, #8]
 800a128:	68f8      	ldr	r0, [r7, #12]
 800a12a:	f007 f935 	bl	8011398 <HAL_SPI_TransmitReceive>
 800a12e:	4603      	mov	r3, r0
 800a130:	75fb      	strb	r3, [r7, #23]
#endif /* (DMA_ON_USE == 1) */

  DEBUG_LOG("\n%s()< %" PRIi32 "\n\n", __FUNCTION__, (int32_t)ret);

  return ret;
 800a132:	7dfb      	ldrb	r3, [r7, #23]
}
 800a134:	4618      	mov	r0, r3
 800a136:	3718      	adds	r7, #24
 800a138:	46bd      	mov	sp, r7
 800a13a:	bd80      	pop	{r7, pc}

0800a13c <Transmit>:


static HAL_StatusTypeDef Transmit(SPI_HandleTypeDef *hspi, uint8_t *txdata, uint16_t datalen, uint32_t timeout)
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b086      	sub	sp, #24
 800a140:	af00      	add	r7, sp, #0
 800a142:	60f8      	str	r0, [r7, #12]
 800a144:	60b9      	str	r1, [r7, #8]
 800a146:	603b      	str	r3, [r7, #0]
 800a148:	4613      	mov	r3, r2
 800a14a:	80fb      	strh	r3, [r7, #6]
#if (defined(DMA_ON_USE) && (DMA_ON_USE == 1))
  ret = HAL_SPI_Transmit_DMA(hspi, txdata, datalen);
  SEM_WAIT(SpiTransferDoneSem, timeout, NULL);

#else
  ret = HAL_SPI_Transmit(hspi, txdata, datalen, timeout);
 800a14c:	88fa      	ldrh	r2, [r7, #6]
 800a14e:	683b      	ldr	r3, [r7, #0]
 800a150:	68b9      	ldr	r1, [r7, #8]
 800a152:	68f8      	ldr	r0, [r7, #12]
 800a154:	f006 fd52 	bl	8010bfc <HAL_SPI_Transmit>
 800a158:	4603      	mov	r3, r0
 800a15a:	75fb      	strb	r3, [r7, #23]
#endif /* (DMA_ON_USE == 1) */

  DEBUG_LOG("\n%s() <%" PRIi32 "\n\n", __FUNCTION__, (int32_t)ret);

  return ret;
 800a15c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a15e:	4618      	mov	r0, r3
 800a160:	3718      	adds	r7, #24
 800a162:	46bd      	mov	sp, r7
 800a164:	bd80      	pop	{r7, pc}

0800a166 <Receive>:


static HAL_StatusTypeDef Receive(SPI_HandleTypeDef *hspi, uint8_t *rxdata, uint16_t datalen, uint32_t timeout)
{
 800a166:	b580      	push	{r7, lr}
 800a168:	b086      	sub	sp, #24
 800a16a:	af00      	add	r7, sp, #0
 800a16c:	60f8      	str	r0, [r7, #12]
 800a16e:	60b9      	str	r1, [r7, #8]
 800a170:	603b      	str	r3, [r7, #0]
 800a172:	4613      	mov	r3, r2
 800a174:	80fb      	strh	r3, [r7, #6]
#if (defined(DMA_ON_USE) && (DMA_ON_USE == 1))
  ret = HAL_SPI_Receive_DMA(hspi, rxdata, datalen);
  SEM_WAIT(SpiTransferDoneSem, timeout, NULL);

#else
  ret = HAL_SPI_Receive(hspi, rxdata, datalen, timeout);
 800a176:	88fa      	ldrh	r2, [r7, #6]
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	68b9      	ldr	r1, [r7, #8]
 800a17c:	68f8      	ldr	r0, [r7, #12]
 800a17e:	f006 ff5b 	bl	8011038 <HAL_SPI_Receive>
 800a182:	4603      	mov	r3, r0
 800a184:	75fb      	strb	r3, [r7, #23]
  }
#endif /* 0 */

  DEBUG_LOG("\n%s()< %" PRIi32 "\n\n", __FUNCTION__, (int32_t)ret);

  return ret;
 800a186:	7dfb      	ldrb	r3, [r7, #23]
}
 800a188:	4618      	mov	r0, r3
 800a18a:	3718      	adds	r7, #24
 800a18c:	46bd      	mov	sp, r7
 800a18e:	bd80      	pop	{r7, pc}

0800a190 <process_txrx_poll>:


void process_txrx_poll(uint32_t timeout)
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b08e      	sub	sp, #56	; 0x38
 800a194:	af02      	add	r7, sp, #8
 800a196:	6078      	str	r0, [r7, #4]
  static mx_buf_t *netb = NULL;
  bool first_miss = true;
 800a198:	2301      	movs	r3, #1
 800a19a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  MX_WIFI_SPI_CS_HIGH();
 800a19e:	2201      	movs	r2, #1
 800a1a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a1a4:	48a1      	ldr	r0, [pc, #644]	; (800a42c <process_txrx_poll+0x29c>)
 800a1a6:	f000 ff01 	bl	800afac <HAL_GPIO_WritePin>

  while (netb == NULL)
 800a1aa:	e014      	b.n	800a1d6 <process_txrx_poll+0x46>
  {
    netb = MX_NET_BUFFER_ALLOC(MX_WIFI_BUFFER_SIZE);
 800a1ac:	f640 10c4 	movw	r0, #2500	; 0x9c4
 800a1b0:	f7ff fe9a 	bl	8009ee8 <mx_buf_alloc>
 800a1b4:	4603      	mov	r3, r0
 800a1b6:	4a9e      	ldr	r2, [pc, #632]	; (800a430 <process_txrx_poll+0x2a0>)
 800a1b8:	6013      	str	r3, [r2, #0]

    MX_STAT(alloc);

    if (netb == NULL)
 800a1ba:	4b9d      	ldr	r3, [pc, #628]	; (800a430 <process_txrx_poll+0x2a0>)
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d109      	bne.n	800a1d6 <process_txrx_poll+0x46>
    {
      DELAY_MS(1);
 800a1c2:	2001      	movs	r0, #1
 800a1c4:	f000 fa6e 	bl	800a6a4 <HAL_Delay>
      if (true == first_miss)
 800a1c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d002      	beq.n	800a1d6 <process_txrx_poll+0x46>
      {
        first_miss = false;
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  while (netb == NULL)
 800a1d6:	4b96      	ldr	r3, [pc, #600]	; (800a430 <process_txrx_poll+0x2a0>)
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d0e6      	beq.n	800a1ac <process_txrx_poll+0x1c>
      }
    }
  }

  /* Waiting for data to be sent or to be received. */
  if (SEM_WAIT(SpiTxRxSem, timeout, NULL) == SEM_OK)
 800a1de:	2200      	movs	r2, #0
 800a1e0:	6879      	ldr	r1, [r7, #4]
 800a1e2:	4894      	ldr	r0, [pc, #592]	; (800a434 <process_txrx_poll+0x2a4>)
 800a1e4:	f7fd fb11 	bl	800780a <noos_sem_wait>
 800a1e8:	4603      	mov	r3, r0
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	f040 8119 	bne.w	800a422 <process_txrx_poll+0x292>
  {
    NET_PERF_TASK_TAG(0);

    LOCK(SpiTxLock);
 800a1f0:	4b91      	ldr	r3, [pc, #580]	; (800a438 <process_txrx_poll+0x2a8>)
 800a1f2:	781b      	ldrb	r3, [r3, #0]
 800a1f4:	b2db      	uxtb	r3, r3
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d1fa      	bne.n	800a1f0 <process_txrx_poll+0x60>
 800a1fa:	4b8f      	ldr	r3, [pc, #572]	; (800a438 <process_txrx_poll+0x2a8>)
 800a1fc:	2201      	movs	r2, #1
 800a1fe:	701a      	strb	r2, [r3, #0]
    {
      spi_header_t mheader = {0};
 800a200:	f107 0314 	add.w	r3, r7, #20
 800a204:	2200      	movs	r2, #0
 800a206:	601a      	str	r2, [r3, #0]
 800a208:	605a      	str	r2, [r3, #4]
      spi_header_t sheader = {0};
 800a20a:	f107 030c 	add.w	r3, r7, #12
 800a20e:	2200      	movs	r2, #0
 800a210:	601a      	str	r2, [r3, #0]
 800a212:	605a      	str	r2, [r3, #4]
      uint8_t *txdata = NULL;
 800a214:	2300      	movs	r3, #0
 800a216:	62bb      	str	r3, [r7, #40]	; 0x28
      bool is_continue = true;
 800a218:	2301      	movs	r3, #1
 800a21a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

      DEBUG_LOG("\n%s(): %p\n", __FUNCTION__, SpiTxData);

      if (SpiTxData == NULL)
 800a21e:	4b87      	ldr	r3, [pc, #540]	; (800a43c <process_txrx_poll+0x2ac>)
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d10b      	bne.n	800a23e <process_txrx_poll+0xae>
      {
        if (!MX_WIFI_SPI_IRQ_IS_HIGH())
 800a226:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a22a:	4885      	ldr	r0, [pc, #532]	; (800a440 <process_txrx_poll+0x2b0>)
 800a22c:	f000 fea6 	bl	800af7c <HAL_GPIO_ReadPin>
 800a230:	4603      	mov	r3, r0
 800a232:	2b01      	cmp	r3, #1
 800a234:	d00a      	beq.n	800a24c <process_txrx_poll+0xbc>
        {
          /* TX data null means no data to send, IRQ low means no data to be received. */
          is_continue = false;
 800a236:	2300      	movs	r3, #0
 800a238:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a23c:	e006      	b.n	800a24c <process_txrx_poll+0xbc>
#endif /* MX_WIFI_BARE_OS_H */
        }
      }
      else
      {
        mheader.len = SpiTxLen;
 800a23e:	4b81      	ldr	r3, [pc, #516]	; (800a444 <process_txrx_poll+0x2b4>)
 800a240:	881b      	ldrh	r3, [r3, #0]
 800a242:	f8a7 3015 	strh.w	r3, [r7, #21]
        txdata = SpiTxData;
 800a246:	4b7d      	ldr	r3, [pc, #500]	; (800a43c <process_txrx_poll+0x2ac>)
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if (is_continue)
 800a24c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a250:	2b00      	cmp	r3, #0
 800a252:	f000 80e3 	beq.w	800a41c <process_txrx_poll+0x28c>
      {
        mheader.type = SPI_WRITE;
 800a256:	230a      	movs	r3, #10
 800a258:	753b      	strb	r3, [r7, #20]
        mheader.lenx = ~mheader.len;
 800a25a:	f8b7 3015 	ldrh.w	r3, [r7, #21]
 800a25e:	b29b      	uxth	r3, r3
 800a260:	43db      	mvns	r3, r3
 800a262:	b29b      	uxth	r3, r3
 800a264:	f8a7 3017 	strh.w	r3, [r7, #23]

        MX_WIFI_SPI_CS_LOW();
 800a268:	2200      	movs	r2, #0
 800a26a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a26e:	486f      	ldr	r0, [pc, #444]	; (800a42c <process_txrx_poll+0x29c>)
 800a270:	f000 fe9c 	bl	800afac <HAL_GPIO_WritePin>

        {
          /* Wait for the EMW to be ready. */
          if (wait_flow_high(timeout) != 0)
 800a274:	6878      	ldr	r0, [r7, #4]
 800a276:	f7ff fec9 	bl	800a00c <wait_flow_high>
 800a27a:	4603      	mov	r3, r0
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d003      	beq.n	800a288 <process_txrx_poll+0xf8>
          {
            DEBUG_ERROR("Wait FLOW timeout 0\n");
 800a280:	4871      	ldr	r0, [pc, #452]	; (800a448 <process_txrx_poll+0x2b8>)
 800a282:	f00d f845 	bl	8017310 <puts>
 800a286:	e0c3      	b.n	800a410 <process_txrx_poll+0x280>
          }
          else
          {
            /* Transmit only the header part. */
            if (HAL_OK != TransmitReceive(HSpiMX, (uint8_t *)&mheader, (uint8_t *)&sheader, sizeof(mheader), timeout))
 800a288:	4870      	ldr	r0, [pc, #448]	; (800a44c <process_txrx_poll+0x2bc>)
 800a28a:	f107 020c 	add.w	r2, r7, #12
 800a28e:	f107 0114 	add.w	r1, r7, #20
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	9300      	str	r3, [sp, #0]
 800a296:	2308      	movs	r3, #8
 800a298:	f7ff ff39 	bl	800a10e <TransmitReceive>
 800a29c:	4603      	mov	r3, r0
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d003      	beq.n	800a2aa <process_txrx_poll+0x11a>
            {
              DEBUG_ERROR("Send mheader error\n");
 800a2a2:	486b      	ldr	r0, [pc, #428]	; (800a450 <process_txrx_poll+0x2c0>)
 800a2a4:	f00d f834 	bl	8017310 <puts>
 800a2a8:	e0b2      	b.n	800a410 <process_txrx_poll+0x280>
            }
            else
            {
              if (sheader.type != SPI_READ)
 800a2aa:	7b3b      	ldrb	r3, [r7, #12]
 800a2ac:	2b0b      	cmp	r3, #11
 800a2ae:	d005      	beq.n	800a2bc <process_txrx_poll+0x12c>
              {
                DEBUG_ERROR("Invalid SPI type %02x\n", sheader.type);
 800a2b0:	7b3b      	ldrb	r3, [r7, #12]
 800a2b2:	4619      	mov	r1, r3
 800a2b4:	4867      	ldr	r0, [pc, #412]	; (800a454 <process_txrx_poll+0x2c4>)
 800a2b6:	f00c ffbd 	bl	8017234 <iprintf>
 800a2ba:	e0a9      	b.n	800a410 <process_txrx_poll+0x280>
              }
              else
              {
                if ((sheader.len ^ sheader.lenx) != 0xFFFF)
 800a2bc:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 800a2c0:	b29a      	uxth	r2, r3
 800a2c2:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 800a2c6:	b29b      	uxth	r3, r3
 800a2c8:	4053      	eors	r3, r2
 800a2ca:	b29b      	uxth	r3, r3
 800a2cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a2d0:	4293      	cmp	r3, r2
 800a2d2:	d00b      	beq.n	800a2ec <process_txrx_poll+0x15c>
                {
                  DEBUG_ERROR("Invalid length %04x-%04x\n", sheader.len, sheader.lenx);
 800a2d4:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 800a2d8:	b29b      	uxth	r3, r3
 800a2da:	4619      	mov	r1, r3
 800a2dc:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 800a2e0:	b29b      	uxth	r3, r3
 800a2e2:	461a      	mov	r2, r3
 800a2e4:	485c      	ldr	r0, [pc, #368]	; (800a458 <process_txrx_poll+0x2c8>)
 800a2e6:	f00c ffa5 	bl	8017234 <iprintf>
 800a2ea:	e091      	b.n	800a410 <process_txrx_poll+0x280>
                }
                else
                {
                  /* Send or received header must be not null */
                  if ((sheader.len == 0) && (mheader.len == 0))
 800a2ec:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 800a2f0:	b29b      	uxth	r3, r3
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d105      	bne.n	800a302 <process_txrx_poll+0x172>
 800a2f6:	f8b7 3015 	ldrh.w	r3, [r7, #21]
 800a2fa:	b29b      	uxth	r3, r3
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	f000 8087 	beq.w	800a410 <process_txrx_poll+0x280>
                  {
                  }
                  else
                  {
                    if ((sheader.len > SPI_DATA_SIZE) || (mheader.len > SPI_DATA_SIZE))
 800a302:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 800a306:	b29b      	uxth	r3, r3
 800a308:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800a30c:	4293      	cmp	r3, r2
 800a30e:	d806      	bhi.n	800a31e <process_txrx_poll+0x18e>
 800a310:	f8b7 3015 	ldrh.w	r3, [r7, #21]
 800a314:	b29b      	uxth	r3, r3
 800a316:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800a31a:	4293      	cmp	r3, r2
 800a31c:	d90b      	bls.n	800a336 <process_txrx_poll+0x1a6>
                    {
                      DEBUG_ERROR("SPI length invalid: %d-%d\n", sheader.len, mheader.len);
 800a31e:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 800a322:	b29b      	uxth	r3, r3
 800a324:	4619      	mov	r1, r3
 800a326:	f8b7 3015 	ldrh.w	r3, [r7, #21]
 800a32a:	b29b      	uxth	r3, r3
 800a32c:	461a      	mov	r2, r3
 800a32e:	484b      	ldr	r0, [pc, #300]	; (800a45c <process_txrx_poll+0x2cc>)
 800a330:	f00c ff80 	bl	8017234 <iprintf>
 800a334:	e06c      	b.n	800a410 <process_txrx_poll+0x280>
                    }
                    else
                    {
                      uint16_t datalen;
                      uint8_t *rxdata = NULL;
 800a336:	2300      	movs	r3, #0
 800a338:	623b      	str	r3, [r7, #32]

                      /* Keep the max length between TX and RX. */
                      if (mheader.len > sheader.len)
 800a33a:	f8b7 3015 	ldrh.w	r3, [r7, #21]
 800a33e:	b29a      	uxth	r2, r3
 800a340:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 800a344:	b29b      	uxth	r3, r3
 800a346:	429a      	cmp	r2, r3
 800a348:	d904      	bls.n	800a354 <process_txrx_poll+0x1c4>
                      {
                        datalen = mheader.len;
 800a34a:	697b      	ldr	r3, [r7, #20]
 800a34c:	f3c3 230f 	ubfx	r3, r3, #8, #16
 800a350:	84bb      	strh	r3, [r7, #36]	; 0x24
 800a352:	e003      	b.n	800a35c <process_txrx_poll+0x1cc>
                      }
                      else
                      {
                        datalen = sheader.len;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	f3c3 230f 	ubfx	r3, r3, #8, #16
 800a35a:	84bb      	strh	r3, [r7, #36]	; 0x24
                      }

                      /* Allocate a buffer for data to be received. */
                      if (sheader.len > 0)
 800a35c:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 800a360:	b29b      	uxth	r3, r3
 800a362:	2b00      	cmp	r3, #0
 800a364:	d007      	beq.n	800a376 <process_txrx_poll+0x1e6>
                      {
                        /* Get start of the buffer payload. */
                        rxdata = MX_NET_BUFFER_PAYLOAD(netb);
 800a366:	4b32      	ldr	r3, [pc, #200]	; (800a430 <process_txrx_poll+0x2a0>)
 800a368:	681a      	ldr	r2, [r3, #0]
 800a36a:	4b31      	ldr	r3, [pc, #196]	; (800a430 <process_txrx_poll+0x2a0>)
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	685b      	ldr	r3, [r3, #4]
 800a370:	3308      	adds	r3, #8
 800a372:	4413      	add	r3, r2
 800a374:	623b      	str	r3, [r7, #32]
                      }

                      /* FLOW must be high. */
                      if (wait_flow_high(timeout) != 0)
 800a376:	6878      	ldr	r0, [r7, #4]
 800a378:	f7ff fe48 	bl	800a00c <wait_flow_high>
 800a37c:	4603      	mov	r3, r0
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d003      	beq.n	800a38a <process_txrx_poll+0x1fa>
                      {
                        DEBUG_ERROR("Wait FLOW timeout 1\n");
 800a382:	4837      	ldr	r0, [pc, #220]	; (800a460 <process_txrx_poll+0x2d0>)
 800a384:	f00c ffc4 	bl	8017310 <puts>
 800a388:	e042      	b.n	800a410 <process_txrx_poll+0x280>
                      else
                      {
                        HAL_StatusTypeDef ret;

                        /* TX with possible RX. */
                        if (NULL != txdata)
 800a38a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d01d      	beq.n	800a3cc <process_txrx_poll+0x23c>
                        {
                          SpiTxData = NULL;
 800a390:	4b2a      	ldr	r3, [pc, #168]	; (800a43c <process_txrx_poll+0x2ac>)
 800a392:	2200      	movs	r2, #0
 800a394:	601a      	str	r2, [r3, #0]
                          SpiTxLen = 0;
 800a396:	4b2b      	ldr	r3, [pc, #172]	; (800a444 <process_txrx_poll+0x2b4>)
 800a398:	2200      	movs	r2, #0
 800a39a:	801a      	strh	r2, [r3, #0]
                          if (NULL != rxdata)
 800a39c:	6a3b      	ldr	r3, [r7, #32]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d00b      	beq.n	800a3ba <process_txrx_poll+0x22a>
                          {
                            ret = TransmitReceive(HSpiMX, txdata, rxdata, datalen, timeout);
 800a3a2:	482a      	ldr	r0, [pc, #168]	; (800a44c <process_txrx_poll+0x2bc>)
 800a3a4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	9300      	str	r3, [sp, #0]
 800a3aa:	4613      	mov	r3, r2
 800a3ac:	6a3a      	ldr	r2, [r7, #32]
 800a3ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a3b0:	f7ff fead 	bl	800a10e <TransmitReceive>
 800a3b4:	4603      	mov	r3, r0
 800a3b6:	77fb      	strb	r3, [r7, #31]
 800a3b8:	e010      	b.n	800a3dc <process_txrx_poll+0x24c>
                          }
                          else
                          {
                            ret = Transmit(HSpiMX, txdata, datalen, timeout);
 800a3ba:	4824      	ldr	r0, [pc, #144]	; (800a44c <process_txrx_poll+0x2bc>)
 800a3bc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a3c2:	f7ff febb 	bl	800a13c <Transmit>
 800a3c6:	4603      	mov	r3, r0
 800a3c8:	77fb      	strb	r3, [r7, #31]
 800a3ca:	e007      	b.n	800a3dc <process_txrx_poll+0x24c>
                          }
                        }
                        else
                        {
                          ret = Receive(HSpiMX, rxdata, datalen, timeout);
 800a3cc:	481f      	ldr	r0, [pc, #124]	; (800a44c <process_txrx_poll+0x2bc>)
 800a3ce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	6a39      	ldr	r1, [r7, #32]
 800a3d4:	f7ff fec7 	bl	800a166 <Receive>
 800a3d8:	4603      	mov	r3, r0
 800a3da:	77fb      	strb	r3, [r7, #31]
                        }

                        if (HAL_OK != ret)
 800a3dc:	7ffb      	ldrb	r3, [r7, #31]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d003      	beq.n	800a3ea <process_txrx_poll+0x25a>
                        {
                          DEBUG_ERROR("Transmit/Receive data timeout\n");
 800a3e2:	4820      	ldr	r0, [pc, #128]	; (800a464 <process_txrx_poll+0x2d4>)
 800a3e4:	f00c ff94 	bl	8017310 <puts>
 800a3e8:	e012      	b.n	800a410 <process_txrx_poll+0x280>
                        }
                        else
                        {
                          /* Resize the input buffer and send it back to the processing thread. */
                          if (sheader.len > 0)
 800a3ea:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 800a3ee:	b29b      	uxth	r3, r3
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d00d      	beq.n	800a410 <process_txrx_poll+0x280>
                          {
                            NET_PERF_TASK_TAG(1);
                            MX_NET_BUFFER_SET_PAYLOAD_SIZE(netb, sheader.len);
 800a3f4:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 800a3f8:	b29a      	uxth	r2, r3
 800a3fa:	4b0d      	ldr	r3, [pc, #52]	; (800a430 <process_txrx_poll+0x2a0>)
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	601a      	str	r2, [r3, #0]
                            mx_wifi_hci_input(netb);
 800a400:	4b0b      	ldr	r3, [pc, #44]	; (800a430 <process_txrx_poll+0x2a0>)
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	4618      	mov	r0, r3
 800a406:	f7fd fb9f 	bl	8007b48 <mx_wifi_hci_input>
                            netb = NULL;
 800a40a:	4b09      	ldr	r3, [pc, #36]	; (800a430 <process_txrx_poll+0x2a0>)
 800a40c:	2200      	movs	r2, #0
 800a40e:	601a      	str	r2, [r3, #0]
                }
              }
            }
          }
          /* Notify transfer done. */
          MX_WIFI_SPI_CS_HIGH();
 800a410:	2201      	movs	r2, #1
 800a412:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a416:	4805      	ldr	r0, [pc, #20]	; (800a42c <process_txrx_poll+0x29c>)
 800a418:	f000 fdc8 	bl	800afac <HAL_GPIO_WritePin>
        }
      }
    }
    UNLOCK(SpiTxLock);
 800a41c:	4b06      	ldr	r3, [pc, #24]	; (800a438 <process_txrx_poll+0x2a8>)
 800a41e:	2200      	movs	r2, #0
 800a420:	701a      	strb	r2, [r3, #0]
  }
}
 800a422:	bf00      	nop
 800a424:	3730      	adds	r7, #48	; 0x30
 800a426:	46bd      	mov	sp, r7
 800a428:	bd80      	pop	{r7, pc}
 800a42a:	bf00      	nop
 800a42c:	42020400 	.word	0x42020400
 800a430:	20003328 	.word	0x20003328
 800a434:	20003314 	.word	0x20003314
 800a438:	20003310 	.word	0x20003310
 800a43c:	20003320 	.word	0x20003320
 800a440:	42020c00 	.word	0x42020c00
 800a444:	20003324 	.word	0x20003324
 800a448:	0801b5d8 	.word	0x0801b5d8
 800a44c:	20000c8c 	.word	0x20000c8c
 800a450:	0801b5ec 	.word	0x0801b5ec
 800a454:	0801b600 	.word	0x0801b600
 800a458:	0801b618 	.word	0x0801b618
 800a45c:	0801b634 	.word	0x0801b634
 800a460:	0801b650 	.word	0x0801b650
 800a464:	0801b664 	.word	0x0801b664

0800a468 <mx_wifi_spi_txrx_start>:
}
#endif /* MX_WIFI_BARE_OS_H */


static int8_t mx_wifi_spi_txrx_start(void)
{
 800a468:	b580      	push	{r7, lr}
 800a46a:	b082      	sub	sp, #8
 800a46c:	af00      	add	r7, sp, #0
  int8_t ret = 0;
 800a46e:	2300      	movs	r3, #0
 800a470:	71fb      	strb	r3, [r7, #7]

  LOCK_INIT(SpiTxLock);
 800a472:	4b0c      	ldr	r3, [pc, #48]	; (800a4a4 <mx_wifi_spi_txrx_start+0x3c>)
 800a474:	2200      	movs	r2, #0
 800a476:	701a      	strb	r2, [r3, #0]
  SEM_INIT(SpiTxRxSem, 2);
 800a478:	4b0b      	ldr	r3, [pc, #44]	; (800a4a8 <mx_wifi_spi_txrx_start+0x40>)
 800a47a:	2200      	movs	r2, #0
 800a47c:	601a      	str	r2, [r3, #0]
  SEM_INIT(SpiFlowRiseSem, 1);
 800a47e:	4b0b      	ldr	r3, [pc, #44]	; (800a4ac <mx_wifi_spi_txrx_start+0x44>)
 800a480:	2200      	movs	r2, #0
 800a482:	601a      	str	r2, [r3, #0]
  SEM_INIT(SpiTransferDoneSem, 1);
 800a484:	4b0a      	ldr	r3, [pc, #40]	; (800a4b0 <mx_wifi_spi_txrx_start+0x48>)
 800a486:	2200      	movs	r2, #0
 800a488:	601a      	str	r2, [r3, #0]
  }
  else
  {
    /* Notify SPI ready. */
    /* De-select the SPI slave. */
    MX_WIFI_SPI_CS_HIGH();
 800a48a:	2201      	movs	r2, #1
 800a48c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a490:	4808      	ldr	r0, [pc, #32]	; (800a4b4 <mx_wifi_spi_txrx_start+0x4c>)
 800a492:	f000 fd8b 	bl	800afac <HAL_GPIO_WritePin>
  }
  return ret;
 800a496:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800a49a:	4618      	mov	r0, r3
 800a49c:	3708      	adds	r7, #8
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	bd80      	pop	{r7, pc}
 800a4a2:	bf00      	nop
 800a4a4:	20003310 	.word	0x20003310
 800a4a8:	20003314 	.word	0x20003314
 800a4ac:	20003318 	.word	0x20003318
 800a4b0:	2000331c 	.word	0x2000331c
 800a4b4:	42020400 	.word	0x42020400

0800a4b8 <mx_wifi_spi_txrx_stop>:


static int8_t mx_wifi_spi_txrx_stop(void)
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	af00      	add	r7, sp, #0
  /* Set thread quit flag to TRUE. */
  SPITxRxTaskQuitFlag = true;
#endif /* MX_WIFI_BARE_OS_H */

  /* Wake up the thread if it's sleeping. */
  SEM_SIGNAL(SpiTxRxSem);
 800a4bc:	4802      	ldr	r0, [pc, #8]	; (800a4c8 <mx_wifi_spi_txrx_stop+0x10>)
 800a4be:	f7fd f98b 	bl	80077d8 <noos_sem_signal>
  THREAD_DEINIT(MX_WIFI_TxRxThreadId);
  SEM_DEINIT(SpiTxRxSem);
  SEM_DEINIT(SpiFlowRiseSem);
  LOCK_DEINIT(SpiTxLock);

  return 0;
 800a4c2:	2300      	movs	r3, #0
}
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	bd80      	pop	{r7, pc}
 800a4c8:	20003314 	.word	0x20003314

0800a4cc <mxwifi_probe>:


int32_t mxwifi_probe(void **ll_drv_context)
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b086      	sub	sp, #24
 800a4d0:	af02      	add	r7, sp, #8
 800a4d2:	6078      	str	r0, [r7, #4]
  int32_t ret = -1;
 800a4d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a4d8:	60fb      	str	r3, [r7, #12]

  if (MX_WIFI_RegisterBusIO(&MxWifiObj,
 800a4da:	4b0d      	ldr	r3, [pc, #52]	; (800a510 <mxwifi_probe+0x44>)
 800a4dc:	9301      	str	r3, [sp, #4]
 800a4de:	4b0d      	ldr	r3, [pc, #52]	; (800a514 <mxwifi_probe+0x48>)
 800a4e0:	9300      	str	r3, [sp, #0]
 800a4e2:	4b0d      	ldr	r3, [pc, #52]	; (800a518 <mxwifi_probe+0x4c>)
 800a4e4:	4a0d      	ldr	r2, [pc, #52]	; (800a51c <mxwifi_probe+0x50>)
 800a4e6:	490e      	ldr	r1, [pc, #56]	; (800a520 <mxwifi_probe+0x54>)
 800a4e8:	480e      	ldr	r0, [pc, #56]	; (800a524 <mxwifi_probe+0x58>)
 800a4ea:	f7fd fdff 	bl	80080ec <MX_WIFI_RegisterBusIO>
 800a4ee:	4603      	mov	r3, r0
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d107      	bne.n	800a504 <mxwifi_probe+0x38>
                            MX_WIFI_SPI_DeInit,
                            MX_WIFI_IO_DELAY,
                            MX_WIFI_SPI_Write,
                            MX_WIFI_SPI_Read) == MX_WIFI_STATUS_OK)
  {
    if (NULL != ll_drv_context)
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d002      	beq.n	800a500 <mxwifi_probe+0x34>
    {
      *ll_drv_context = &MxWifiObj;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	4a09      	ldr	r2, [pc, #36]	; (800a524 <mxwifi_probe+0x58>)
 800a4fe:	601a      	str	r2, [r3, #0]
    }
    ret = 0;
 800a500:	2300      	movs	r3, #0
 800a502:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800a504:	68fb      	ldr	r3, [r7, #12]
}
 800a506:	4618      	mov	r0, r3
 800a508:	3710      	adds	r7, #16
 800a50a:	46bd      	mov	sp, r7
 800a50c:	bd80      	pop	{r7, pc}
 800a50e:	bf00      	nop
 800a510:	0800a0f5 	.word	0x0800a0f5
 800a514:	0800a061 	.word	0x0800a061
 800a518:	08009f1b 	.word	0x08009f1b
 800a51c:	08009f85 	.word	0x08009f85
 800a520:	08009f31 	.word	0x08009f31
 800a524:	20002cfc 	.word	0x20002cfc

0800a528 <wifi_obj_get>:


MX_WIFIObject_t *wifi_obj_get(void)
{
 800a528:	b480      	push	{r7}
 800a52a:	af00      	add	r7, sp, #0
  return &MxWifiObj;
 800a52c:	4b02      	ldr	r3, [pc, #8]	; (800a538 <wifi_obj_get+0x10>)
}
 800a52e:	4618      	mov	r0, r3
 800a530:	46bd      	mov	sp, r7
 800a532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a536:	4770      	bx	lr
 800a538:	20002cfc 	.word	0x20002cfc

0800a53c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800a53c:	b480      	push	{r7}
 800a53e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800a540:	4b18      	ldr	r3, [pc, #96]	; (800a5a4 <SystemInit+0x68>)
 800a542:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a546:	4a17      	ldr	r2, [pc, #92]	; (800a5a4 <SystemInit+0x68>)
 800a548:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a54c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 800a550:	4b15      	ldr	r3, [pc, #84]	; (800a5a8 <SystemInit+0x6c>)
 800a552:	2201      	movs	r2, #1
 800a554:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 800a556:	4b14      	ldr	r3, [pc, #80]	; (800a5a8 <SystemInit+0x6c>)
 800a558:	2200      	movs	r2, #0
 800a55a:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 800a55c:	4b12      	ldr	r3, [pc, #72]	; (800a5a8 <SystemInit+0x6c>)
 800a55e:	2200      	movs	r2, #0
 800a560:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 800a562:	4b11      	ldr	r3, [pc, #68]	; (800a5a8 <SystemInit+0x6c>)
 800a564:	2200      	movs	r2, #0
 800a566:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 800a568:	4b0f      	ldr	r3, [pc, #60]	; (800a5a8 <SystemInit+0x6c>)
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	4a0e      	ldr	r2, [pc, #56]	; (800a5a8 <SystemInit+0x6c>)
 800a56e:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800a572:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800a576:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 800a578:	4b0b      	ldr	r3, [pc, #44]	; (800a5a8 <SystemInit+0x6c>)
 800a57a:	2200      	movs	r2, #0
 800a57c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800a57e:	4b0a      	ldr	r3, [pc, #40]	; (800a5a8 <SystemInit+0x6c>)
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	4a09      	ldr	r2, [pc, #36]	; (800a5a8 <SystemInit+0x6c>)
 800a584:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a588:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800a58a:	4b07      	ldr	r3, [pc, #28]	; (800a5a8 <SystemInit+0x6c>)
 800a58c:	2200      	movs	r2, #0
 800a58e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800a590:	4b04      	ldr	r3, [pc, #16]	; (800a5a4 <SystemInit+0x68>)
 800a592:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a596:	609a      	str	r2, [r3, #8]
  #endif
}
 800a598:	bf00      	nop
 800a59a:	46bd      	mov	sp, r7
 800a59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a0:	4770      	bx	lr
 800a5a2:	bf00      	nop
 800a5a4:	e000ed00 	.word	0xe000ed00
 800a5a8:	46020c00 	.word	0x46020c00

0800a5ac <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a5b0:	2003      	movs	r0, #3
 800a5b2:	f000 f96b 	bl	800a88c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800a5b6:	f003 fb4d 	bl	800dc54 <HAL_RCC_GetSysClockFreq>
 800a5ba:	4602      	mov	r2, r0
 800a5bc:	4b0b      	ldr	r3, [pc, #44]	; (800a5ec <HAL_Init+0x40>)
 800a5be:	6a1b      	ldr	r3, [r3, #32]
 800a5c0:	f003 030f 	and.w	r3, r3, #15
 800a5c4:	490a      	ldr	r1, [pc, #40]	; (800a5f0 <HAL_Init+0x44>)
 800a5c6:	5ccb      	ldrb	r3, [r1, r3]
 800a5c8:	fa22 f303 	lsr.w	r3, r2, r3
 800a5cc:	4a09      	ldr	r2, [pc, #36]	; (800a5f4 <HAL_Init+0x48>)
 800a5ce:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800a5d0:	2000      	movs	r0, #0
 800a5d2:	f000 f811 	bl	800a5f8 <HAL_InitTick>
 800a5d6:	4603      	mov	r3, r0
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d001      	beq.n	800a5e0 <HAL_Init+0x34>
  {
    return HAL_ERROR;
 800a5dc:	2301      	movs	r3, #1
 800a5de:	e002      	b.n	800a5e6 <HAL_Init+0x3a>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800a5e0:	f7f6 fe18 	bl	8001214 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800a5e4:	2300      	movs	r3, #0
}
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	bd80      	pop	{r7, pc}
 800a5ea:	bf00      	nop
 800a5ec:	46020c00 	.word	0x46020c00
 800a5f0:	0818dc08 	.word	0x0818dc08
 800a5f4:	200000f4 	.word	0x200000f4

0800a5f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b082      	sub	sp, #8
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 800a600:	4b15      	ldr	r3, [pc, #84]	; (800a658 <HAL_InitTick+0x60>)
 800a602:	781b      	ldrb	r3, [r3, #0]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d101      	bne.n	800a60c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800a608:	2301      	movs	r3, #1
 800a60a:	e021      	b.n	800a650 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800a60c:	4b13      	ldr	r3, [pc, #76]	; (800a65c <HAL_InitTick+0x64>)
 800a60e:	681a      	ldr	r2, [r3, #0]
 800a610:	4b11      	ldr	r3, [pc, #68]	; (800a658 <HAL_InitTick+0x60>)
 800a612:	781b      	ldrb	r3, [r3, #0]
 800a614:	4619      	mov	r1, r3
 800a616:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a61a:	fbb3 f3f1 	udiv	r3, r3, r1
 800a61e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a622:	4618      	mov	r0, r3
 800a624:	f000 f965 	bl	800a8f2 <HAL_SYSTICK_Config>
 800a628:	4603      	mov	r3, r0
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d001      	beq.n	800a632 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 800a62e:	2301      	movs	r3, #1
 800a630:	e00e      	b.n	800a650 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	2b0f      	cmp	r3, #15
 800a636:	d80a      	bhi.n	800a64e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800a638:	2200      	movs	r2, #0
 800a63a:	6879      	ldr	r1, [r7, #4]
 800a63c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a640:	f000 f92f 	bl	800a8a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800a644:	4a06      	ldr	r2, [pc, #24]	; (800a660 <HAL_InitTick+0x68>)
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800a64a:	2300      	movs	r3, #0
 800a64c:	e000      	b.n	800a650 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800a64e:	2301      	movs	r3, #1
}
 800a650:	4618      	mov	r0, r3
 800a652:	3708      	adds	r7, #8
 800a654:	46bd      	mov	sp, r7
 800a656:	bd80      	pop	{r7, pc}
 800a658:	200000fc 	.word	0x200000fc
 800a65c:	200000f4 	.word	0x200000f4
 800a660:	200000f8 	.word	0x200000f8

0800a664 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800a664:	b480      	push	{r7}
 800a666:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800a668:	4b06      	ldr	r3, [pc, #24]	; (800a684 <HAL_IncTick+0x20>)
 800a66a:	781b      	ldrb	r3, [r3, #0]
 800a66c:	461a      	mov	r2, r3
 800a66e:	4b06      	ldr	r3, [pc, #24]	; (800a688 <HAL_IncTick+0x24>)
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	4413      	add	r3, r2
 800a674:	4a04      	ldr	r2, [pc, #16]	; (800a688 <HAL_IncTick+0x24>)
 800a676:	6013      	str	r3, [r2, #0]
}
 800a678:	bf00      	nop
 800a67a:	46bd      	mov	sp, r7
 800a67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a680:	4770      	bx	lr
 800a682:	bf00      	nop
 800a684:	200000fc 	.word	0x200000fc
 800a688:	2000332c 	.word	0x2000332c

0800a68c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800a68c:	b480      	push	{r7}
 800a68e:	af00      	add	r7, sp, #0
  return uwTick;
 800a690:	4b03      	ldr	r3, [pc, #12]	; (800a6a0 <HAL_GetTick+0x14>)
 800a692:	681b      	ldr	r3, [r3, #0]
}
 800a694:	4618      	mov	r0, r3
 800a696:	46bd      	mov	sp, r7
 800a698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69c:	4770      	bx	lr
 800a69e:	bf00      	nop
 800a6a0:	2000332c 	.word	0x2000332c

0800a6a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b084      	sub	sp, #16
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800a6ac:	f7ff ffee 	bl	800a68c <HAL_GetTick>
 800a6b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a6bc:	d005      	beq.n	800a6ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800a6be:	4b0a      	ldr	r3, [pc, #40]	; (800a6e8 <HAL_Delay+0x44>)
 800a6c0:	781b      	ldrb	r3, [r3, #0]
 800a6c2:	461a      	mov	r2, r3
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	4413      	add	r3, r2
 800a6c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800a6ca:	bf00      	nop
 800a6cc:	f7ff ffde 	bl	800a68c <HAL_GetTick>
 800a6d0:	4602      	mov	r2, r0
 800a6d2:	68bb      	ldr	r3, [r7, #8]
 800a6d4:	1ad3      	subs	r3, r2, r3
 800a6d6:	68fa      	ldr	r2, [r7, #12]
 800a6d8:	429a      	cmp	r2, r3
 800a6da:	d8f7      	bhi.n	800a6cc <HAL_Delay+0x28>
  {
  }
}
 800a6dc:	bf00      	nop
 800a6de:	bf00      	nop
 800a6e0:	3710      	adds	r7, #16
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	bd80      	pop	{r7, pc}
 800a6e6:	bf00      	nop
 800a6e8:	200000fc 	.word	0x200000fc

0800a6ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a6ec:	b480      	push	{r7}
 800a6ee:	b085      	sub	sp, #20
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	f003 0307 	and.w	r3, r3, #7
 800a6fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a6fc:	4b0c      	ldr	r3, [pc, #48]	; (800a730 <__NVIC_SetPriorityGrouping+0x44>)
 800a6fe:	68db      	ldr	r3, [r3, #12]
 800a700:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a702:	68ba      	ldr	r2, [r7, #8]
 800a704:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800a708:	4013      	ands	r3, r2
 800a70a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a710:	68bb      	ldr	r3, [r7, #8]
 800a712:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a714:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800a718:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a71c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a71e:	4a04      	ldr	r2, [pc, #16]	; (800a730 <__NVIC_SetPriorityGrouping+0x44>)
 800a720:	68bb      	ldr	r3, [r7, #8]
 800a722:	60d3      	str	r3, [r2, #12]
}
 800a724:	bf00      	nop
 800a726:	3714      	adds	r7, #20
 800a728:	46bd      	mov	sp, r7
 800a72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72e:	4770      	bx	lr
 800a730:	e000ed00 	.word	0xe000ed00

0800a734 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800a734:	b480      	push	{r7}
 800a736:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a738:	4b04      	ldr	r3, [pc, #16]	; (800a74c <__NVIC_GetPriorityGrouping+0x18>)
 800a73a:	68db      	ldr	r3, [r3, #12]
 800a73c:	0a1b      	lsrs	r3, r3, #8
 800a73e:	f003 0307 	and.w	r3, r3, #7
}
 800a742:	4618      	mov	r0, r3
 800a744:	46bd      	mov	sp, r7
 800a746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74a:	4770      	bx	lr
 800a74c:	e000ed00 	.word	0xe000ed00

0800a750 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a750:	b480      	push	{r7}
 800a752:	b083      	sub	sp, #12
 800a754:	af00      	add	r7, sp, #0
 800a756:	4603      	mov	r3, r0
 800a758:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a75a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	db0b      	blt.n	800a77a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a762:	79fb      	ldrb	r3, [r7, #7]
 800a764:	f003 021f 	and.w	r2, r3, #31
 800a768:	4907      	ldr	r1, [pc, #28]	; (800a788 <__NVIC_EnableIRQ+0x38>)
 800a76a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a76e:	095b      	lsrs	r3, r3, #5
 800a770:	2001      	movs	r0, #1
 800a772:	fa00 f202 	lsl.w	r2, r0, r2
 800a776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800a77a:	bf00      	nop
 800a77c:	370c      	adds	r7, #12
 800a77e:	46bd      	mov	sp, r7
 800a780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a784:	4770      	bx	lr
 800a786:	bf00      	nop
 800a788:	e000e100 	.word	0xe000e100

0800a78c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a78c:	b480      	push	{r7}
 800a78e:	b083      	sub	sp, #12
 800a790:	af00      	add	r7, sp, #0
 800a792:	4603      	mov	r3, r0
 800a794:	6039      	str	r1, [r7, #0]
 800a796:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a798:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	db0a      	blt.n	800a7b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	b2da      	uxtb	r2, r3
 800a7a4:	490c      	ldr	r1, [pc, #48]	; (800a7d8 <__NVIC_SetPriority+0x4c>)
 800a7a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a7aa:	0112      	lsls	r2, r2, #4
 800a7ac:	b2d2      	uxtb	r2, r2
 800a7ae:	440b      	add	r3, r1
 800a7b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a7b4:	e00a      	b.n	800a7cc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a7b6:	683b      	ldr	r3, [r7, #0]
 800a7b8:	b2da      	uxtb	r2, r3
 800a7ba:	4908      	ldr	r1, [pc, #32]	; (800a7dc <__NVIC_SetPriority+0x50>)
 800a7bc:	79fb      	ldrb	r3, [r7, #7]
 800a7be:	f003 030f 	and.w	r3, r3, #15
 800a7c2:	3b04      	subs	r3, #4
 800a7c4:	0112      	lsls	r2, r2, #4
 800a7c6:	b2d2      	uxtb	r2, r2
 800a7c8:	440b      	add	r3, r1
 800a7ca:	761a      	strb	r2, [r3, #24]
}
 800a7cc:	bf00      	nop
 800a7ce:	370c      	adds	r7, #12
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d6:	4770      	bx	lr
 800a7d8:	e000e100 	.word	0xe000e100
 800a7dc:	e000ed00 	.word	0xe000ed00

0800a7e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a7e0:	b480      	push	{r7}
 800a7e2:	b089      	sub	sp, #36	; 0x24
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	60f8      	str	r0, [r7, #12]
 800a7e8:	60b9      	str	r1, [r7, #8]
 800a7ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	f003 0307 	and.w	r3, r3, #7
 800a7f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a7f4:	69fb      	ldr	r3, [r7, #28]
 800a7f6:	f1c3 0307 	rsb	r3, r3, #7
 800a7fa:	2b04      	cmp	r3, #4
 800a7fc:	bf28      	it	cs
 800a7fe:	2304      	movcs	r3, #4
 800a800:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a802:	69fb      	ldr	r3, [r7, #28]
 800a804:	3304      	adds	r3, #4
 800a806:	2b06      	cmp	r3, #6
 800a808:	d902      	bls.n	800a810 <NVIC_EncodePriority+0x30>
 800a80a:	69fb      	ldr	r3, [r7, #28]
 800a80c:	3b03      	subs	r3, #3
 800a80e:	e000      	b.n	800a812 <NVIC_EncodePriority+0x32>
 800a810:	2300      	movs	r3, #0
 800a812:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a814:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a818:	69bb      	ldr	r3, [r7, #24]
 800a81a:	fa02 f303 	lsl.w	r3, r2, r3
 800a81e:	43da      	mvns	r2, r3
 800a820:	68bb      	ldr	r3, [r7, #8]
 800a822:	401a      	ands	r2, r3
 800a824:	697b      	ldr	r3, [r7, #20]
 800a826:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a828:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800a82c:	697b      	ldr	r3, [r7, #20]
 800a82e:	fa01 f303 	lsl.w	r3, r1, r3
 800a832:	43d9      	mvns	r1, r3
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a838:	4313      	orrs	r3, r2
         );
}
 800a83a:	4618      	mov	r0, r3
 800a83c:	3724      	adds	r7, #36	; 0x24
 800a83e:	46bd      	mov	sp, r7
 800a840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a844:	4770      	bx	lr
	...

0800a848 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b082      	sub	sp, #8
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	3b01      	subs	r3, #1
 800a854:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a858:	d301      	bcc.n	800a85e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a85a:	2301      	movs	r3, #1
 800a85c:	e00f      	b.n	800a87e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a85e:	4a0a      	ldr	r2, [pc, #40]	; (800a888 <SysTick_Config+0x40>)
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	3b01      	subs	r3, #1
 800a864:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a866:	210f      	movs	r1, #15
 800a868:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a86c:	f7ff ff8e 	bl	800a78c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a870:	4b05      	ldr	r3, [pc, #20]	; (800a888 <SysTick_Config+0x40>)
 800a872:	2200      	movs	r2, #0
 800a874:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a876:	4b04      	ldr	r3, [pc, #16]	; (800a888 <SysTick_Config+0x40>)
 800a878:	2207      	movs	r2, #7
 800a87a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a87c:	2300      	movs	r3, #0
}
 800a87e:	4618      	mov	r0, r3
 800a880:	3708      	adds	r7, #8
 800a882:	46bd      	mov	sp, r7
 800a884:	bd80      	pop	{r7, pc}
 800a886:	bf00      	nop
 800a888:	e000e010 	.word	0xe000e010

0800a88c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b082      	sub	sp, #8
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a894:	6878      	ldr	r0, [r7, #4]
 800a896:	f7ff ff29 	bl	800a6ec <__NVIC_SetPriorityGrouping>
}
 800a89a:	bf00      	nop
 800a89c:	3708      	adds	r7, #8
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	bd80      	pop	{r7, pc}

0800a8a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a8a2:	b580      	push	{r7, lr}
 800a8a4:	b086      	sub	sp, #24
 800a8a6:	af00      	add	r7, sp, #0
 800a8a8:	4603      	mov	r3, r0
 800a8aa:	60b9      	str	r1, [r7, #8]
 800a8ac:	607a      	str	r2, [r7, #4]
 800a8ae:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800a8b0:	f7ff ff40 	bl	800a734 <__NVIC_GetPriorityGrouping>
 800a8b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a8b6:	687a      	ldr	r2, [r7, #4]
 800a8b8:	68b9      	ldr	r1, [r7, #8]
 800a8ba:	6978      	ldr	r0, [r7, #20]
 800a8bc:	f7ff ff90 	bl	800a7e0 <NVIC_EncodePriority>
 800a8c0:	4602      	mov	r2, r0
 800a8c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a8c6:	4611      	mov	r1, r2
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	f7ff ff5f 	bl	800a78c <__NVIC_SetPriority>
}
 800a8ce:	bf00      	nop
 800a8d0:	3718      	adds	r7, #24
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	bd80      	pop	{r7, pc}

0800a8d6 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a8d6:	b580      	push	{r7, lr}
 800a8d8:	b082      	sub	sp, #8
 800a8da:	af00      	add	r7, sp, #0
 800a8dc:	4603      	mov	r3, r0
 800a8de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a8e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	f7ff ff33 	bl	800a750 <__NVIC_EnableIRQ>
}
 800a8ea:	bf00      	nop
 800a8ec:	3708      	adds	r7, #8
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	bd80      	pop	{r7, pc}

0800a8f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a8f2:	b580      	push	{r7, lr}
 800a8f4:	b082      	sub	sp, #8
 800a8f6:	af00      	add	r7, sp, #0
 800a8f8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800a8fa:	6878      	ldr	r0, [r7, #4]
 800a8fc:	f7ff ffa4 	bl	800a848 <SysTick_Config>
 800a900:	4603      	mov	r3, r0
}
 800a902:	4618      	mov	r0, r3
 800a904:	3708      	adds	r7, #8
 800a906:	46bd      	mov	sp, r7
 800a908:	bd80      	pop	{r7, pc}
	...

0800a90c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800a90c:	b480      	push	{r7}
 800a90e:	b083      	sub	sp, #12
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	2b04      	cmp	r3, #4
 800a918:	d844      	bhi.n	800a9a4 <HAL_SYSTICK_CLKSourceConfig+0x98>
 800a91a:	a201      	add	r2, pc, #4	; (adr r2, 800a920 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 800a91c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a920:	0800a943 	.word	0x0800a943
 800a924:	0800a961 	.word	0x0800a961
 800a928:	0800a983 	.word	0x0800a983
 800a92c:	0800a9a5 	.word	0x0800a9a5
 800a930:	0800a935 	.word	0x0800a935
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800a934:	4b1f      	ldr	r3, [pc, #124]	; (800a9b4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	4a1e      	ldr	r2, [pc, #120]	; (800a9b4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800a93a:	f043 0304 	orr.w	r3, r3, #4
 800a93e:	6013      	str	r3, [r2, #0]
      break;
 800a940:	e031      	b.n	800a9a6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800a942:	4b1c      	ldr	r3, [pc, #112]	; (800a9b4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	4a1b      	ldr	r2, [pc, #108]	; (800a9b4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800a948:	f023 0304 	bic.w	r3, r3, #4
 800a94c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 800a94e:	4b1a      	ldr	r3, [pc, #104]	; (800a9b8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800a950:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a954:	4a18      	ldr	r2, [pc, #96]	; (800a9b8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800a956:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800a95a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
      break;
 800a95e:	e022      	b.n	800a9a6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800a960:	4b14      	ldr	r3, [pc, #80]	; (800a9b4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	4a13      	ldr	r2, [pc, #76]	; (800a9b4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800a966:	f023 0304 	bic.w	r3, r3, #4
 800a96a:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 800a96c:	4b12      	ldr	r3, [pc, #72]	; (800a9b8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800a96e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a972:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800a976:	4a10      	ldr	r2, [pc, #64]	; (800a9b8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800a978:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a97c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
      break;
 800a980:	e011      	b.n	800a9a6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800a982:	4b0c      	ldr	r3, [pc, #48]	; (800a9b4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	4a0b      	ldr	r2, [pc, #44]	; (800a9b4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800a988:	f023 0304 	bic.w	r3, r3, #4
 800a98c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 800a98e:	4b0a      	ldr	r3, [pc, #40]	; (800a9b8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800a990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a994:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800a998:	4a07      	ldr	r2, [pc, #28]	; (800a9b8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800a99a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a99e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
      break;
 800a9a2:	e000      	b.n	800a9a6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 800a9a4:	bf00      	nop
  }
}
 800a9a6:	bf00      	nop
 800a9a8:	370c      	adds	r7, #12
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b0:	4770      	bx	lr
 800a9b2:	bf00      	nop
 800a9b4:	e000e010 	.word	0xe000e010
 800a9b8:	46020c00 	.word	0x46020c00

0800a9bc <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 800a9bc:	b480      	push	{r7}
 800a9be:	b083      	sub	sp, #12
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d101      	bne.n	800a9ce <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800a9ca:	2301      	movs	r3, #1
 800a9cc:	e019      	b.n	800aa02 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800a9d4:	b2db      	uxtb	r3, r3
 800a9d6:	2b02      	cmp	r3, #2
 800a9d8:	d004      	beq.n	800a9e4 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	2220      	movs	r2, #32
 800a9de:	659a      	str	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 800a9e0:	2301      	movs	r3, #1
 800a9e2:	e00e      	b.n	800aa02 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	2204      	movs	r2, #4
 800a9e8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	695b      	ldr	r3, [r3, #20]
 800a9f2:	687a      	ldr	r2, [r7, #4]
 800a9f4:	6812      	ldr	r2, [r2, #0]
 800a9f6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a9fa:	f043 0304 	orr.w	r3, r3, #4
 800a9fe:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 800aa00:	2300      	movs	r3, #0
}
 800aa02:	4618      	mov	r0, r3
 800aa04:	370c      	adds	r7, #12
 800aa06:	46bd      	mov	sp, r7
 800aa08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0c:	4770      	bx	lr
	...

0800aa10 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 800aa10:	b480      	push	{r7}
 800aa12:	b089      	sub	sp, #36	; 0x24
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
 800aa18:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800aa22:	e1ba      	b.n	800ad9a <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	681a      	ldr	r2, [r3, #0]
 800aa28:	2101      	movs	r1, #1
 800aa2a:	697b      	ldr	r3, [r7, #20]
 800aa2c:	fa01 f303 	lsl.w	r3, r1, r3
 800aa30:	4013      	ands	r3, r2
 800aa32:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 800aa34:	697b      	ldr	r3, [r7, #20]
 800aa36:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	f000 81aa 	beq.w	800ad94 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	4a55      	ldr	r2, [pc, #340]	; (800ab98 <HAL_GPIO_Init+0x188>)
 800aa44:	4293      	cmp	r3, r2
 800aa46:	d15d      	bne.n	800ab04 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 800aa4e:	2201      	movs	r2, #1
 800aa50:	697b      	ldr	r3, [r7, #20]
 800aa52:	fa02 f303 	lsl.w	r3, r2, r3
 800aa56:	43db      	mvns	r3, r3
 800aa58:	69fa      	ldr	r2, [r7, #28]
 800aa5a:	4013      	ands	r3, r2
 800aa5c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 800aa5e:	683b      	ldr	r3, [r7, #0]
 800aa60:	685b      	ldr	r3, [r3, #4]
 800aa62:	f003 0201 	and.w	r2, r3, #1
 800aa66:	697b      	ldr	r3, [r7, #20]
 800aa68:	fa02 f303 	lsl.w	r3, r2, r3
 800aa6c:	69fa      	ldr	r2, [r7, #28]
 800aa6e:	4313      	orrs	r3, r2
 800aa70:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	69fa      	ldr	r2, [r7, #28]
 800aa76:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 800aa78:	4a48      	ldr	r2, [pc, #288]	; (800ab9c <HAL_GPIO_Init+0x18c>)
 800aa7a:	697b      	ldr	r3, [r7, #20]
 800aa7c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800aa80:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800aa82:	4a46      	ldr	r2, [pc, #280]	; (800ab9c <HAL_GPIO_Init+0x18c>)
 800aa84:	697b      	ldr	r3, [r7, #20]
 800aa86:	00db      	lsls	r3, r3, #3
 800aa88:	4413      	add	r3, r2
 800aa8a:	685b      	ldr	r3, [r3, #4]
 800aa8c:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 800aa8e:	69bb      	ldr	r3, [r7, #24]
 800aa90:	08da      	lsrs	r2, r3, #3
 800aa92:	693b      	ldr	r3, [r7, #16]
 800aa94:	3208      	adds	r2, #8
 800aa96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa9a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 800aa9c:	69bb      	ldr	r3, [r7, #24]
 800aa9e:	f003 0307 	and.w	r3, r3, #7
 800aaa2:	009b      	lsls	r3, r3, #2
 800aaa4:	220f      	movs	r2, #15
 800aaa6:	fa02 f303 	lsl.w	r3, r2, r3
 800aaaa:	43db      	mvns	r3, r3
 800aaac:	69fa      	ldr	r2, [r7, #28]
 800aaae:	4013      	ands	r3, r2
 800aab0:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 800aab2:	69bb      	ldr	r3, [r7, #24]
 800aab4:	f003 0307 	and.w	r3, r3, #7
 800aab8:	009b      	lsls	r3, r3, #2
 800aaba:	220b      	movs	r2, #11
 800aabc:	fa02 f303 	lsl.w	r3, r2, r3
 800aac0:	69fa      	ldr	r2, [r7, #28]
 800aac2:	4313      	orrs	r3, r2
 800aac4:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 800aac6:	69bb      	ldr	r3, [r7, #24]
 800aac8:	08da      	lsrs	r2, r3, #3
 800aaca:	693b      	ldr	r3, [r7, #16]
 800aacc:	3208      	adds	r2, #8
 800aace:	69f9      	ldr	r1, [r7, #28]
 800aad0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800aad4:	693b      	ldr	r3, [r7, #16]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800aada:	69bb      	ldr	r3, [r7, #24]
 800aadc:	005b      	lsls	r3, r3, #1
 800aade:	2203      	movs	r2, #3
 800aae0:	fa02 f303 	lsl.w	r3, r2, r3
 800aae4:	43db      	mvns	r3, r3
 800aae6:	69fa      	ldr	r2, [r7, #28]
 800aae8:	4013      	ands	r3, r2
 800aaea:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 800aaec:	69bb      	ldr	r3, [r7, #24]
 800aaee:	005b      	lsls	r3, r3, #1
 800aaf0:	2202      	movs	r2, #2
 800aaf2:	fa02 f303 	lsl.w	r3, r2, r3
 800aaf6:	69fa      	ldr	r2, [r7, #28]
 800aaf8:	4313      	orrs	r3, r2
 800aafa:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800aafc:	693b      	ldr	r3, [r7, #16]
 800aafe:	69fa      	ldr	r2, [r7, #28]
 800ab00:	601a      	str	r2, [r3, #0]
 800ab02:	e067      	b.n	800abd4 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800ab04:	683b      	ldr	r3, [r7, #0]
 800ab06:	685b      	ldr	r3, [r3, #4]
 800ab08:	2b02      	cmp	r3, #2
 800ab0a:	d003      	beq.n	800ab14 <HAL_GPIO_Init+0x104>
 800ab0c:	683b      	ldr	r3, [r7, #0]
 800ab0e:	685b      	ldr	r3, [r3, #4]
 800ab10:	2b12      	cmp	r3, #18
 800ab12:	d145      	bne.n	800aba0 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 800ab14:	697b      	ldr	r3, [r7, #20]
 800ab16:	08da      	lsrs	r2, r3, #3
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	3208      	adds	r2, #8
 800ab1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab20:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 800ab22:	697b      	ldr	r3, [r7, #20]
 800ab24:	f003 0307 	and.w	r3, r3, #7
 800ab28:	009b      	lsls	r3, r3, #2
 800ab2a:	220f      	movs	r2, #15
 800ab2c:	fa02 f303 	lsl.w	r3, r2, r3
 800ab30:	43db      	mvns	r3, r3
 800ab32:	69fa      	ldr	r2, [r7, #28]
 800ab34:	4013      	ands	r3, r2
 800ab36:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 800ab38:	683b      	ldr	r3, [r7, #0]
 800ab3a:	691b      	ldr	r3, [r3, #16]
 800ab3c:	f003 020f 	and.w	r2, r3, #15
 800ab40:	697b      	ldr	r3, [r7, #20]
 800ab42:	f003 0307 	and.w	r3, r3, #7
 800ab46:	009b      	lsls	r3, r3, #2
 800ab48:	fa02 f303 	lsl.w	r3, r2, r3
 800ab4c:	69fa      	ldr	r2, [r7, #28]
 800ab4e:	4313      	orrs	r3, r2
 800ab50:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 800ab52:	697b      	ldr	r3, [r7, #20]
 800ab54:	08da      	lsrs	r2, r3, #3
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	3208      	adds	r2, #8
 800ab5a:	69f9      	ldr	r1, [r7, #28]
 800ab5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800ab60:	693b      	ldr	r3, [r7, #16]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800ab66:	69bb      	ldr	r3, [r7, #24]
 800ab68:	005b      	lsls	r3, r3, #1
 800ab6a:	2203      	movs	r2, #3
 800ab6c:	fa02 f303 	lsl.w	r3, r2, r3
 800ab70:	43db      	mvns	r3, r3
 800ab72:	69fa      	ldr	r2, [r7, #28]
 800ab74:	4013      	ands	r3, r2
 800ab76:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 800ab78:	683b      	ldr	r3, [r7, #0]
 800ab7a:	685b      	ldr	r3, [r3, #4]
 800ab7c:	f003 0203 	and.w	r2, r3, #3
 800ab80:	69bb      	ldr	r3, [r7, #24]
 800ab82:	005b      	lsls	r3, r3, #1
 800ab84:	fa02 f303 	lsl.w	r3, r2, r3
 800ab88:	69fa      	ldr	r2, [r7, #28]
 800ab8a:	4313      	orrs	r3, r2
 800ab8c:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800ab8e:	693b      	ldr	r3, [r7, #16]
 800ab90:	69fa      	ldr	r2, [r7, #28]
 800ab92:	601a      	str	r2, [r3, #0]
 800ab94:	e01e      	b.n	800abd4 <HAL_GPIO_Init+0x1c4>
 800ab96:	bf00      	nop
 800ab98:	46020000 	.word	0x46020000
 800ab9c:	0818dc60 	.word	0x0818dc60
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 800aba0:	693b      	ldr	r3, [r7, #16]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800aba6:	69bb      	ldr	r3, [r7, #24]
 800aba8:	005b      	lsls	r3, r3, #1
 800abaa:	2203      	movs	r2, #3
 800abac:	fa02 f303 	lsl.w	r3, r2, r3
 800abb0:	43db      	mvns	r3, r3
 800abb2:	69fa      	ldr	r2, [r7, #28]
 800abb4:	4013      	ands	r3, r2
 800abb6:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	685b      	ldr	r3, [r3, #4]
 800abbc:	f003 0203 	and.w	r2, r3, #3
 800abc0:	69bb      	ldr	r3, [r7, #24]
 800abc2:	005b      	lsls	r3, r3, #1
 800abc4:	fa02 f303 	lsl.w	r3, r2, r3
 800abc8:	69fa      	ldr	r2, [r7, #28]
 800abca:	4313      	orrs	r3, r2
 800abcc:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800abce:	693b      	ldr	r3, [r7, #16]
 800abd0:	69fa      	ldr	r2, [r7, #28]
 800abd2:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800abd4:	683b      	ldr	r3, [r7, #0]
 800abd6:	685b      	ldr	r3, [r3, #4]
 800abd8:	2b01      	cmp	r3, #1
 800abda:	d00b      	beq.n	800abf4 <HAL_GPIO_Init+0x1e4>
 800abdc:	683b      	ldr	r3, [r7, #0]
 800abde:	685b      	ldr	r3, [r3, #4]
 800abe0:	2b02      	cmp	r3, #2
 800abe2:	d007      	beq.n	800abf4 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800abe4:	683b      	ldr	r3, [r7, #0]
 800abe6:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800abe8:	2b11      	cmp	r3, #17
 800abea:	d003      	beq.n	800abf4 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800abec:	683b      	ldr	r3, [r7, #0]
 800abee:	685b      	ldr	r3, [r3, #4]
 800abf0:	2b12      	cmp	r3, #18
 800abf2:	d130      	bne.n	800ac56 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 800abf4:	693b      	ldr	r3, [r7, #16]
 800abf6:	689b      	ldr	r3, [r3, #8]
 800abf8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 800abfa:	69bb      	ldr	r3, [r7, #24]
 800abfc:	005b      	lsls	r3, r3, #1
 800abfe:	2203      	movs	r2, #3
 800ac00:	fa02 f303 	lsl.w	r3, r2, r3
 800ac04:	43db      	mvns	r3, r3
 800ac06:	69fa      	ldr	r2, [r7, #28]
 800ac08:	4013      	ands	r3, r2
 800ac0a:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 800ac0c:	683b      	ldr	r3, [r7, #0]
 800ac0e:	68da      	ldr	r2, [r3, #12]
 800ac10:	69bb      	ldr	r3, [r7, #24]
 800ac12:	005b      	lsls	r3, r3, #1
 800ac14:	fa02 f303 	lsl.w	r3, r2, r3
 800ac18:	69fa      	ldr	r2, [r7, #28]
 800ac1a:	4313      	orrs	r3, r2
 800ac1c:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 800ac1e:	693b      	ldr	r3, [r7, #16]
 800ac20:	69fa      	ldr	r2, [r7, #28]
 800ac22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 800ac24:	693b      	ldr	r3, [r7, #16]
 800ac26:	685b      	ldr	r3, [r3, #4]
 800ac28:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 800ac2a:	2201      	movs	r2, #1
 800ac2c:	69bb      	ldr	r3, [r7, #24]
 800ac2e:	fa02 f303 	lsl.w	r3, r2, r3
 800ac32:	43db      	mvns	r3, r3
 800ac34:	69fa      	ldr	r2, [r7, #28]
 800ac36:	4013      	ands	r3, r2
 800ac38:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 800ac3a:	683b      	ldr	r3, [r7, #0]
 800ac3c:	685b      	ldr	r3, [r3, #4]
 800ac3e:	091b      	lsrs	r3, r3, #4
 800ac40:	f003 0201 	and.w	r2, r3, #1
 800ac44:	69bb      	ldr	r3, [r7, #24]
 800ac46:	fa02 f303 	lsl.w	r3, r2, r3
 800ac4a:	69fa      	ldr	r2, [r7, #28]
 800ac4c:	4313      	orrs	r3, r2
 800ac4e:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 800ac50:	693b      	ldr	r3, [r7, #16]
 800ac52:	69fa      	ldr	r2, [r7, #28]
 800ac54:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800ac56:	683b      	ldr	r3, [r7, #0]
 800ac58:	685b      	ldr	r3, [r3, #4]
 800ac5a:	2b03      	cmp	r3, #3
 800ac5c:	d017      	beq.n	800ac8e <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 800ac5e:	693b      	ldr	r3, [r7, #16]
 800ac60:	68db      	ldr	r3, [r3, #12]
 800ac62:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 800ac64:	69bb      	ldr	r3, [r7, #24]
 800ac66:	005b      	lsls	r3, r3, #1
 800ac68:	2203      	movs	r2, #3
 800ac6a:	fa02 f303 	lsl.w	r3, r2, r3
 800ac6e:	43db      	mvns	r3, r3
 800ac70:	69fa      	ldr	r2, [r7, #28]
 800ac72:	4013      	ands	r3, r2
 800ac74:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	689a      	ldr	r2, [r3, #8]
 800ac7a:	69bb      	ldr	r3, [r7, #24]
 800ac7c:	005b      	lsls	r3, r3, #1
 800ac7e:	fa02 f303 	lsl.w	r3, r2, r3
 800ac82:	69fa      	ldr	r2, [r7, #28]
 800ac84:	4313      	orrs	r3, r2
 800ac86:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 800ac88:	693b      	ldr	r3, [r7, #16]
 800ac8a:	69fa      	ldr	r2, [r7, #28]
 800ac8c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800ac8e:	683b      	ldr	r3, [r7, #0]
 800ac90:	685b      	ldr	r3, [r3, #4]
 800ac92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d07c      	beq.n	800ad94 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800ac9a:	4a47      	ldr	r2, [pc, #284]	; (800adb8 <HAL_GPIO_Init+0x3a8>)
 800ac9c:	697b      	ldr	r3, [r7, #20]
 800ac9e:	089b      	lsrs	r3, r3, #2
 800aca0:	3318      	adds	r3, #24
 800aca2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aca6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 800aca8:	697b      	ldr	r3, [r7, #20]
 800acaa:	f003 0303 	and.w	r3, r3, #3
 800acae:	00db      	lsls	r3, r3, #3
 800acb0:	220f      	movs	r2, #15
 800acb2:	fa02 f303 	lsl.w	r3, r2, r3
 800acb6:	43db      	mvns	r3, r3
 800acb8:	69fa      	ldr	r2, [r7, #28]
 800acba:	4013      	ands	r3, r2
 800acbc:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	0a9a      	lsrs	r2, r3, #10
 800acc2:	4b3e      	ldr	r3, [pc, #248]	; (800adbc <HAL_GPIO_Init+0x3ac>)
 800acc4:	4013      	ands	r3, r2
 800acc6:	697a      	ldr	r2, [r7, #20]
 800acc8:	f002 0203 	and.w	r2, r2, #3
 800accc:	00d2      	lsls	r2, r2, #3
 800acce:	4093      	lsls	r3, r2
 800acd0:	69fa      	ldr	r2, [r7, #28]
 800acd2:	4313      	orrs	r3, r2
 800acd4:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 800acd6:	4938      	ldr	r1, [pc, #224]	; (800adb8 <HAL_GPIO_Init+0x3a8>)
 800acd8:	697b      	ldr	r3, [r7, #20]
 800acda:	089b      	lsrs	r3, r3, #2
 800acdc:	3318      	adds	r3, #24
 800acde:	69fa      	ldr	r2, [r7, #28]
 800ace0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800ace4:	4b34      	ldr	r3, [pc, #208]	; (800adb8 <HAL_GPIO_Init+0x3a8>)
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	43db      	mvns	r3, r3
 800acee:	69fa      	ldr	r2, [r7, #28]
 800acf0:	4013      	ands	r3, r2
 800acf2:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800acf4:	683b      	ldr	r3, [r7, #0]
 800acf6:	685b      	ldr	r3, [r3, #4]
 800acf8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d003      	beq.n	800ad08 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 800ad00:	69fa      	ldr	r2, [r7, #28]
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	4313      	orrs	r3, r2
 800ad06:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 800ad08:	4a2b      	ldr	r2, [pc, #172]	; (800adb8 <HAL_GPIO_Init+0x3a8>)
 800ad0a:	69fb      	ldr	r3, [r7, #28]
 800ad0c:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800ad0e:	4b2a      	ldr	r3, [pc, #168]	; (800adb8 <HAL_GPIO_Init+0x3a8>)
 800ad10:	685b      	ldr	r3, [r3, #4]
 800ad12:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	43db      	mvns	r3, r3
 800ad18:	69fa      	ldr	r2, [r7, #28]
 800ad1a:	4013      	ands	r3, r2
 800ad1c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800ad1e:	683b      	ldr	r3, [r7, #0]
 800ad20:	685b      	ldr	r3, [r3, #4]
 800ad22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d003      	beq.n	800ad32 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 800ad2a:	69fa      	ldr	r2, [r7, #28]
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	4313      	orrs	r3, r2
 800ad30:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 800ad32:	4a21      	ldr	r2, [pc, #132]	; (800adb8 <HAL_GPIO_Init+0x3a8>)
 800ad34:	69fb      	ldr	r3, [r7, #28]
 800ad36:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 800ad38:	4b1f      	ldr	r3, [pc, #124]	; (800adb8 <HAL_GPIO_Init+0x3a8>)
 800ad3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ad3e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	43db      	mvns	r3, r3
 800ad44:	69fa      	ldr	r2, [r7, #28]
 800ad46:	4013      	ands	r3, r2
 800ad48:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800ad4a:	683b      	ldr	r3, [r7, #0]
 800ad4c:	685b      	ldr	r3, [r3, #4]
 800ad4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d003      	beq.n	800ad5e <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 800ad56:	69fa      	ldr	r2, [r7, #28]
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	4313      	orrs	r3, r2
 800ad5c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 800ad5e:	4a16      	ldr	r2, [pc, #88]	; (800adb8 <HAL_GPIO_Init+0x3a8>)
 800ad60:	69fb      	ldr	r3, [r7, #28]
 800ad62:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 800ad66:	4b14      	ldr	r3, [pc, #80]	; (800adb8 <HAL_GPIO_Init+0x3a8>)
 800ad68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ad6c:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	43db      	mvns	r3, r3
 800ad72:	69fa      	ldr	r2, [r7, #28]
 800ad74:	4013      	ands	r3, r2
 800ad76:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800ad78:	683b      	ldr	r3, [r7, #0]
 800ad7a:	685b      	ldr	r3, [r3, #4]
 800ad7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d003      	beq.n	800ad8c <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 800ad84:	69fa      	ldr	r2, [r7, #28]
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	4313      	orrs	r3, r2
 800ad8a:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 800ad8c:	4a0a      	ldr	r2, [pc, #40]	; (800adb8 <HAL_GPIO_Init+0x3a8>)
 800ad8e:	69fb      	ldr	r3, [r7, #28]
 800ad90:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 800ad94:	697b      	ldr	r3, [r7, #20]
 800ad96:	3301      	adds	r3, #1
 800ad98:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800ad9a:	683b      	ldr	r3, [r7, #0]
 800ad9c:	681a      	ldr	r2, [r3, #0]
 800ad9e:	697b      	ldr	r3, [r7, #20]
 800ada0:	fa22 f303 	lsr.w	r3, r2, r3
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	f47f ae3d 	bne.w	800aa24 <HAL_GPIO_Init+0x14>
  }
}
 800adaa:	bf00      	nop
 800adac:	bf00      	nop
 800adae:	3724      	adds	r7, #36	; 0x24
 800adb0:	46bd      	mov	sp, r7
 800adb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb6:	4770      	bx	lr
 800adb8:	46022000 	.word	0x46022000
 800adbc:	002f7f7f 	.word	0x002f7f7f

0800adc0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800adc0:	b480      	push	{r7}
 800adc2:	b089      	sub	sp, #36	; 0x24
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
 800adc8:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 800adca:	2300      	movs	r3, #0
 800adcc:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 800add2:	e0bc      	b.n	800af4e <HAL_GPIO_DeInit+0x18e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 800add4:	2201      	movs	r2, #1
 800add6:	69bb      	ldr	r3, [r7, #24]
 800add8:	fa02 f303 	lsl.w	r3, r2, r3
 800addc:	683a      	ldr	r2, [r7, #0]
 800adde:	4013      	ands	r3, r2
 800ade0:	613b      	str	r3, [r7, #16]

    /*Save Pin Position */
    pin_position = position;
 800ade2:	69bb      	ldr	r3, [r7, #24]
 800ade4:	61fb      	str	r3, [r7, #28]

    if (iocurrent != 0U)
 800ade6:	693b      	ldr	r3, [r7, #16]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	f000 80ad 	beq.w	800af48 <HAL_GPIO_DeInit+0x188>
    {
      /* In case of LPGPIO port selected */
      if (GPIOx == LPGPIO1)
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	4a5e      	ldr	r2, [pc, #376]	; (800af6c <HAL_GPIO_DeInit+0x1ac>)
 800adf2:	4293      	cmp	r3, r2
 800adf4:	d115      	bne.n	800ae22 <HAL_GPIO_DeInit+0x62>
      {
        /* Configure LP/IO in Input Mode */
        p_gpio  = LPGPIO_Map[pin_position].GPIO_PORT;
 800adf6:	4a5e      	ldr	r2, [pc, #376]	; (800af70 <HAL_GPIO_DeInit+0x1b0>)
 800adf8:	69fb      	ldr	r3, [r7, #28]
 800adfa:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800adfe:	617b      	str	r3, [r7, #20]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800ae00:	4a5b      	ldr	r2, [pc, #364]	; (800af70 <HAL_GPIO_DeInit+0x1b0>)
 800ae02:	69bb      	ldr	r3, [r7, #24]
 800ae04:	00db      	lsls	r3, r3, #3
 800ae06:	4413      	add	r3, r2
 800ae08:	685b      	ldr	r3, [r3, #4]
 800ae0a:	61fb      	str	r3, [r7, #28]
        LPGPIO1->MODER &= ~(1U << pin_position);
 800ae0c:	4b57      	ldr	r3, [pc, #348]	; (800af6c <HAL_GPIO_DeInit+0x1ac>)
 800ae0e:	681a      	ldr	r2, [r3, #0]
 800ae10:	2101      	movs	r1, #1
 800ae12:	69fb      	ldr	r3, [r7, #28]
 800ae14:	fa01 f303 	lsl.w	r3, r1, r3
 800ae18:	43db      	mvns	r3, r3
 800ae1a:	4954      	ldr	r1, [pc, #336]	; (800af6c <HAL_GPIO_DeInit+0x1ac>)
 800ae1c:	4013      	ands	r3, r2
 800ae1e:	600b      	str	r3, [r1, #0]
 800ae20:	e053      	b.n	800aeca <HAL_GPIO_DeInit+0x10a>
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /*------------------------- EXTI Mode Configuration --------------------*/
        /* Clear the External Interrupt or Event for the current IO */
        tmp = EXTI->EXTICR[position >> 2U];
 800ae22:	4a54      	ldr	r2, [pc, #336]	; (800af74 <HAL_GPIO_DeInit+0x1b4>)
 800ae24:	69bb      	ldr	r3, [r7, #24]
 800ae26:	089b      	lsrs	r3, r3, #2
 800ae28:	3318      	adds	r3, #24
 800ae2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ae2e:	60fb      	str	r3, [r7, #12]
        tmp &= ((0x0FUL) << (8U * (position & 0x03U)));
 800ae30:	69bb      	ldr	r3, [r7, #24]
 800ae32:	f003 0303 	and.w	r3, r3, #3
 800ae36:	00db      	lsls	r3, r3, #3
 800ae38:	220f      	movs	r2, #15
 800ae3a:	fa02 f303 	lsl.w	r3, r2, r3
 800ae3e:	68fa      	ldr	r2, [r7, #12]
 800ae40:	4013      	ands	r3, r2
 800ae42:	60fb      	str	r3, [r7, #12]
        if (tmp == (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U))))
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	0a9a      	lsrs	r2, r3, #10
 800ae48:	4b4b      	ldr	r3, [pc, #300]	; (800af78 <HAL_GPIO_DeInit+0x1b8>)
 800ae4a:	4013      	ands	r3, r2
 800ae4c:	69ba      	ldr	r2, [r7, #24]
 800ae4e:	f002 0203 	and.w	r2, r2, #3
 800ae52:	00d2      	lsls	r2, r2, #3
 800ae54:	4093      	lsls	r3, r2
 800ae56:	68fa      	ldr	r2, [r7, #12]
 800ae58:	429a      	cmp	r2, r3
 800ae5a:	d136      	bne.n	800aeca <HAL_GPIO_DeInit+0x10a>
        {
          /* Clear EXTI line configuration */
          EXTI->IMR1 &= ~(iocurrent);
 800ae5c:	4b45      	ldr	r3, [pc, #276]	; (800af74 <HAL_GPIO_DeInit+0x1b4>)
 800ae5e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800ae62:	693b      	ldr	r3, [r7, #16]
 800ae64:	43db      	mvns	r3, r3
 800ae66:	4943      	ldr	r1, [pc, #268]	; (800af74 <HAL_GPIO_DeInit+0x1b4>)
 800ae68:	4013      	ands	r3, r2
 800ae6a:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
          EXTI->EMR1 &= ~(iocurrent);
 800ae6e:	4b41      	ldr	r3, [pc, #260]	; (800af74 <HAL_GPIO_DeInit+0x1b4>)
 800ae70:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800ae74:	693b      	ldr	r3, [r7, #16]
 800ae76:	43db      	mvns	r3, r3
 800ae78:	493e      	ldr	r1, [pc, #248]	; (800af74 <HAL_GPIO_DeInit+0x1b4>)
 800ae7a:	4013      	ands	r3, r2
 800ae7c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

          /* Clear Rising Falling edge configuration */
          EXTI->RTSR1 &= ~(iocurrent);
 800ae80:	4b3c      	ldr	r3, [pc, #240]	; (800af74 <HAL_GPIO_DeInit+0x1b4>)
 800ae82:	681a      	ldr	r2, [r3, #0]
 800ae84:	693b      	ldr	r3, [r7, #16]
 800ae86:	43db      	mvns	r3, r3
 800ae88:	493a      	ldr	r1, [pc, #232]	; (800af74 <HAL_GPIO_DeInit+0x1b4>)
 800ae8a:	4013      	ands	r3, r2
 800ae8c:	600b      	str	r3, [r1, #0]
          EXTI->FTSR1 &= ~(iocurrent);
 800ae8e:	4b39      	ldr	r3, [pc, #228]	; (800af74 <HAL_GPIO_DeInit+0x1b4>)
 800ae90:	685a      	ldr	r2, [r3, #4]
 800ae92:	693b      	ldr	r3, [r7, #16]
 800ae94:	43db      	mvns	r3, r3
 800ae96:	4937      	ldr	r1, [pc, #220]	; (800af74 <HAL_GPIO_DeInit+0x1b4>)
 800ae98:	4013      	ands	r3, r2
 800ae9a:	604b      	str	r3, [r1, #4]

          tmp = (0x0FUL) << (8U * (position & 0x03U));
 800ae9c:	69bb      	ldr	r3, [r7, #24]
 800ae9e:	f003 0303 	and.w	r3, r3, #3
 800aea2:	00db      	lsls	r3, r3, #3
 800aea4:	220f      	movs	r2, #15
 800aea6:	fa02 f303 	lsl.w	r3, r2, r3
 800aeaa:	60fb      	str	r3, [r7, #12]
          EXTI->EXTICR[position >> 2U] &= ~tmp;
 800aeac:	4a31      	ldr	r2, [pc, #196]	; (800af74 <HAL_GPIO_DeInit+0x1b4>)
 800aeae:	69bb      	ldr	r3, [r7, #24]
 800aeb0:	089b      	lsrs	r3, r3, #2
 800aeb2:	3318      	adds	r3, #24
 800aeb4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	43da      	mvns	r2, r3
 800aebc:	482d      	ldr	r0, [pc, #180]	; (800af74 <HAL_GPIO_DeInit+0x1b4>)
 800aebe:	69bb      	ldr	r3, [r7, #24]
 800aec0:	089b      	lsrs	r3, r3, #2
 800aec2:	400a      	ands	r2, r1
 800aec4:	3318      	adds	r3, #24
 800aec6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        }
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      p_gpio->MODER |= (GPIO_MODER_MODE0 << (pin_position * 2U));
 800aeca:	697b      	ldr	r3, [r7, #20]
 800aecc:	681a      	ldr	r2, [r3, #0]
 800aece:	69fb      	ldr	r3, [r7, #28]
 800aed0:	005b      	lsls	r3, r3, #1
 800aed2:	2103      	movs	r1, #3
 800aed4:	fa01 f303 	lsl.w	r3, r1, r3
 800aed8:	431a      	orrs	r2, r3
 800aeda:	697b      	ldr	r3, [r7, #20]
 800aedc:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      p_gpio->AFR[pin_position >> 3U] &= ~(0x0FUL << ((pin_position & 0x07U) * 4U));
 800aede:	69fb      	ldr	r3, [r7, #28]
 800aee0:	08da      	lsrs	r2, r3, #3
 800aee2:	697b      	ldr	r3, [r7, #20]
 800aee4:	3208      	adds	r2, #8
 800aee6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800aeea:	69fb      	ldr	r3, [r7, #28]
 800aeec:	f003 0307 	and.w	r3, r3, #7
 800aef0:	009b      	lsls	r3, r3, #2
 800aef2:	220f      	movs	r2, #15
 800aef4:	fa02 f303 	lsl.w	r3, r2, r3
 800aef8:	43db      	mvns	r3, r3
 800aefa:	69fa      	ldr	r2, [r7, #28]
 800aefc:	08d2      	lsrs	r2, r2, #3
 800aefe:	4019      	ands	r1, r3
 800af00:	697b      	ldr	r3, [r7, #20]
 800af02:	3208      	adds	r2, #8
 800af04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      p_gpio->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 800af08:	697b      	ldr	r3, [r7, #20]
 800af0a:	689a      	ldr	r2, [r3, #8]
 800af0c:	69fb      	ldr	r3, [r7, #28]
 800af0e:	005b      	lsls	r3, r3, #1
 800af10:	2103      	movs	r1, #3
 800af12:	fa01 f303 	lsl.w	r3, r1, r3
 800af16:	43db      	mvns	r3, r3
 800af18:	401a      	ands	r2, r3
 800af1a:	697b      	ldr	r3, [r7, #20]
 800af1c:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      p_gpio->OTYPER  &= ~(GPIO_OTYPER_OT0 << pin_position);
 800af1e:	697b      	ldr	r3, [r7, #20]
 800af20:	685a      	ldr	r2, [r3, #4]
 800af22:	2101      	movs	r1, #1
 800af24:	69fb      	ldr	r3, [r7, #28]
 800af26:	fa01 f303 	lsl.w	r3, r1, r3
 800af2a:	43db      	mvns	r3, r3
 800af2c:	401a      	ands	r2, r3
 800af2e:	697b      	ldr	r3, [r7, #20]
 800af30:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      p_gpio->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 800af32:	697b      	ldr	r3, [r7, #20]
 800af34:	68da      	ldr	r2, [r3, #12]
 800af36:	69fb      	ldr	r3, [r7, #28]
 800af38:	005b      	lsls	r3, r3, #1
 800af3a:	2103      	movs	r1, #3
 800af3c:	fa01 f303 	lsl.w	r3, r1, r3
 800af40:	43db      	mvns	r3, r3
 800af42:	401a      	ands	r2, r3
 800af44:	697b      	ldr	r3, [r7, #20]
 800af46:	60da      	str	r2, [r3, #12]
    }

    position++;
 800af48:	69bb      	ldr	r3, [r7, #24]
 800af4a:	3301      	adds	r3, #1
 800af4c:	61bb      	str	r3, [r7, #24]
  while ((GPIO_Pin >> position) != 0U)
 800af4e:	683a      	ldr	r2, [r7, #0]
 800af50:	69bb      	ldr	r3, [r7, #24]
 800af52:	fa22 f303 	lsr.w	r3, r2, r3
 800af56:	2b00      	cmp	r3, #0
 800af58:	f47f af3c 	bne.w	800add4 <HAL_GPIO_DeInit+0x14>
  }
}
 800af5c:	bf00      	nop
 800af5e:	bf00      	nop
 800af60:	3724      	adds	r7, #36	; 0x24
 800af62:	46bd      	mov	sp, r7
 800af64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af68:	4770      	bx	lr
 800af6a:	bf00      	nop
 800af6c:	46020000 	.word	0x46020000
 800af70:	0818dc60 	.word	0x0818dc60
 800af74:	46022000 	.word	0x46022000
 800af78:	002f7f7f 	.word	0x002f7f7f

0800af7c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800af7c:	b480      	push	{r7}
 800af7e:	b085      	sub	sp, #20
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
 800af84:	460b      	mov	r3, r1
 800af86:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	691a      	ldr	r2, [r3, #16]
 800af8c:	887b      	ldrh	r3, [r7, #2]
 800af8e:	4013      	ands	r3, r2
 800af90:	2b00      	cmp	r3, #0
 800af92:	d002      	beq.n	800af9a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800af94:	2301      	movs	r3, #1
 800af96:	73fb      	strb	r3, [r7, #15]
 800af98:	e001      	b.n	800af9e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800af9a:	2300      	movs	r3, #0
 800af9c:	73fb      	strb	r3, [r7, #15]
  }

  return bitstatus;
 800af9e:	7bfb      	ldrb	r3, [r7, #15]
}
 800afa0:	4618      	mov	r0, r3
 800afa2:	3714      	adds	r7, #20
 800afa4:	46bd      	mov	sp, r7
 800afa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afaa:	4770      	bx	lr

0800afac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800afac:	b480      	push	{r7}
 800afae:	b083      	sub	sp, #12
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
 800afb4:	460b      	mov	r3, r1
 800afb6:	807b      	strh	r3, [r7, #2]
 800afb8:	4613      	mov	r3, r2
 800afba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800afbc:	787b      	ldrb	r3, [r7, #1]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d003      	beq.n	800afca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800afc2:	887a      	ldrh	r2, [r7, #2]
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 800afc8:	e002      	b.n	800afd0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 800afca:	887a      	ldrh	r2, [r7, #2]
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	629a      	str	r2, [r3, #40]	; 0x28
}
 800afd0:	bf00      	nop
 800afd2:	370c      	adds	r7, #12
 800afd4:	46bd      	mov	sp, r7
 800afd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afda:	4770      	bx	lr

0800afdc <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800afdc:	b480      	push	{r7}
 800afde:	b085      	sub	sp, #20
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
 800afe4:	460b      	mov	r3, r1
 800afe6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	695b      	ldr	r3, [r3, #20]
 800afec:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800afee:	887a      	ldrh	r2, [r7, #2]
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	4013      	ands	r3, r2
 800aff4:	041a      	lsls	r2, r3, #16
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	43d9      	mvns	r1, r3
 800affa:	887b      	ldrh	r3, [r7, #2]
 800affc:	400b      	ands	r3, r1
 800affe:	431a      	orrs	r2, r3
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	619a      	str	r2, [r3, #24]
}
 800b004:	bf00      	nop
 800b006:	3714      	adds	r7, #20
 800b008:	46bd      	mov	sp, r7
 800b00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00e:	4770      	bx	lr

0800b010 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800b010:	b580      	push	{r7, lr}
 800b012:	b082      	sub	sp, #8
 800b014:	af00      	add	r7, sp, #0
 800b016:	4603      	mov	r3, r0
 800b018:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 800b01a:	4b0f      	ldr	r3, [pc, #60]	; (800b058 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800b01c:	68da      	ldr	r2, [r3, #12]
 800b01e:	88fb      	ldrh	r3, [r7, #6]
 800b020:	4013      	ands	r3, r2
 800b022:	2b00      	cmp	r3, #0
 800b024:	d006      	beq.n	800b034 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 800b026:	4a0c      	ldr	r2, [pc, #48]	; (800b058 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800b028:	88fb      	ldrh	r3, [r7, #6]
 800b02a:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 800b02c:	88fb      	ldrh	r3, [r7, #6]
 800b02e:	4618      	mov	r0, r3
 800b030:	f7f8 fa1c 	bl	800346c <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 800b034:	4b08      	ldr	r3, [pc, #32]	; (800b058 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800b036:	691a      	ldr	r2, [r3, #16]
 800b038:	88fb      	ldrh	r3, [r7, #6]
 800b03a:	4013      	ands	r3, r2
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d006      	beq.n	800b04e <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800b040:	4a05      	ldr	r2, [pc, #20]	; (800b058 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800b042:	88fb      	ldrh	r3, [r7, #6]
 800b044:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800b046:	88fb      	ldrh	r3, [r7, #6]
 800b048:	4618      	mov	r0, r3
 800b04a:	f000 f807 	bl	800b05c <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 800b04e:	bf00      	nop
 800b050:	3708      	adds	r7, #8
 800b052:	46bd      	mov	sp, r7
 800b054:	bd80      	pop	{r7, pc}
 800b056:	bf00      	nop
 800b058:	46022000 	.word	0x46022000

0800b05c <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 800b05c:	b480      	push	{r7}
 800b05e:	b083      	sub	sp, #12
 800b060:	af00      	add	r7, sp, #0
 800b062:	4603      	mov	r3, r0
 800b064:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 800b066:	bf00      	nop
 800b068:	370c      	adds	r7, #12
 800b06a:	46bd      	mov	sp, r7
 800b06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b070:	4770      	bx	lr

0800b072 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b072:	b580      	push	{r7, lr}
 800b074:	b082      	sub	sp, #8
 800b076:	af00      	add	r7, sp, #0
 800b078:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d101      	bne.n	800b084 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b080:	2301      	movs	r3, #1
 800b082:	e08d      	b.n	800b1a0 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b08a:	b2db      	uxtb	r3, r3
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d106      	bne.n	800b09e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	2200      	movs	r2, #0
 800b094:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800b098:	6878      	ldr	r0, [r7, #4]
 800b09a:	f000 f8b4 	bl	800b206 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	2224      	movs	r2, #36	; 0x24
 800b0a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	681a      	ldr	r2, [r3, #0]
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	f022 0201 	bic.w	r2, r2, #1
 800b0b4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	685a      	ldr	r2, [r3, #4]
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800b0c2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	689a      	ldr	r2, [r3, #8]
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b0d2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	68db      	ldr	r3, [r3, #12]
 800b0d8:	2b01      	cmp	r3, #1
 800b0da:	d107      	bne.n	800b0ec <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	689a      	ldr	r2, [r3, #8]
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b0e8:	609a      	str	r2, [r3, #8]
 800b0ea:	e006      	b.n	800b0fa <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	689a      	ldr	r2, [r3, #8]
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800b0f8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	68db      	ldr	r3, [r3, #12]
 800b0fe:	2b02      	cmp	r3, #2
 800b100:	d108      	bne.n	800b114 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	685a      	ldr	r2, [r3, #4]
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b110:	605a      	str	r2, [r3, #4]
 800b112:	e007      	b.n	800b124 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	685a      	ldr	r2, [r3, #4]
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b122:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	685b      	ldr	r3, [r3, #4]
 800b12a:	687a      	ldr	r2, [r7, #4]
 800b12c:	6812      	ldr	r2, [r2, #0]
 800b12e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800b132:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b136:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	68da      	ldr	r2, [r3, #12]
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b146:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	691a      	ldr	r2, [r3, #16]
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	695b      	ldr	r3, [r3, #20]
 800b150:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	699b      	ldr	r3, [r3, #24]
 800b158:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	430a      	orrs	r2, r1
 800b160:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	69d9      	ldr	r1, [r3, #28]
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	6a1a      	ldr	r2, [r3, #32]
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	430a      	orrs	r2, r1
 800b170:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	681a      	ldr	r2, [r3, #0]
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	f042 0201 	orr.w	r2, r2, #1
 800b180:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	2200      	movs	r2, #0
 800b186:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	2220      	movs	r2, #32
 800b18c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	2200      	movs	r2, #0
 800b194:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	2200      	movs	r2, #0
 800b19a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800b19e:	2300      	movs	r3, #0
}
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	3708      	adds	r7, #8
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	bd80      	pop	{r7, pc}

0800b1a8 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b082      	sub	sp, #8
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d101      	bne.n	800b1ba <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800b1b6:	2301      	movs	r3, #1
 800b1b8:	e021      	b.n	800b1fe <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	2224      	movs	r2, #36	; 0x24
 800b1be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	681a      	ldr	r2, [r3, #0]
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	f022 0201 	bic.w	r2, r2, #1
 800b1d0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800b1d2:	6878      	ldr	r0, [r7, #4]
 800b1d4:	f000 f821 	bl	800b21a <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	2200      	movs	r2, #0
 800b1dc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	2200      	movs	r2, #0
 800b1ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	2200      	movs	r2, #0
 800b1f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800b1fc:	2300      	movs	r3, #0
}
 800b1fe:	4618      	mov	r0, r3
 800b200:	3708      	adds	r7, #8
 800b202:	46bd      	mov	sp, r7
 800b204:	bd80      	pop	{r7, pc}

0800b206 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800b206:	b480      	push	{r7}
 800b208:	b083      	sub	sp, #12
 800b20a:	af00      	add	r7, sp, #0
 800b20c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800b20e:	bf00      	nop
 800b210:	370c      	adds	r7, #12
 800b212:	46bd      	mov	sp, r7
 800b214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b218:	4770      	bx	lr

0800b21a <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800b21a:	b480      	push	{r7}
 800b21c:	b083      	sub	sp, #12
 800b21e:	af00      	add	r7, sp, #0
 800b220:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800b222:	bf00      	nop
 800b224:	370c      	adds	r7, #12
 800b226:	46bd      	mov	sp, r7
 800b228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22c:	4770      	bx	lr
	...

0800b230 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b230:	b580      	push	{r7, lr}
 800b232:	b088      	sub	sp, #32
 800b234:	af02      	add	r7, sp, #8
 800b236:	60f8      	str	r0, [r7, #12]
 800b238:	4608      	mov	r0, r1
 800b23a:	4611      	mov	r1, r2
 800b23c:	461a      	mov	r2, r3
 800b23e:	4603      	mov	r3, r0
 800b240:	817b      	strh	r3, [r7, #10]
 800b242:	460b      	mov	r3, r1
 800b244:	813b      	strh	r3, [r7, #8]
 800b246:	4613      	mov	r3, r2
 800b248:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b250:	b2db      	uxtb	r3, r3
 800b252:	2b20      	cmp	r3, #32
 800b254:	f040 80f9 	bne.w	800b44a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800b258:	6a3b      	ldr	r3, [r7, #32]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d002      	beq.n	800b264 <HAL_I2C_Mem_Write+0x34>
 800b25e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b260:	2b00      	cmp	r3, #0
 800b262:	d105      	bne.n	800b270 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b26a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800b26c:	2301      	movs	r3, #1
 800b26e:	e0ed      	b.n	800b44c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b276:	2b01      	cmp	r3, #1
 800b278:	d101      	bne.n	800b27e <HAL_I2C_Mem_Write+0x4e>
 800b27a:	2302      	movs	r3, #2
 800b27c:	e0e6      	b.n	800b44c <HAL_I2C_Mem_Write+0x21c>
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	2201      	movs	r2, #1
 800b282:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800b286:	f7ff fa01 	bl	800a68c <HAL_GetTick>
 800b28a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b28c:	697b      	ldr	r3, [r7, #20]
 800b28e:	9300      	str	r3, [sp, #0]
 800b290:	2319      	movs	r3, #25
 800b292:	2201      	movs	r2, #1
 800b294:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b298:	68f8      	ldr	r0, [r7, #12]
 800b29a:	f000 fadd 	bl	800b858 <I2C_WaitOnFlagUntilTimeout>
 800b29e:	4603      	mov	r3, r0
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d001      	beq.n	800b2a8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800b2a4:	2301      	movs	r3, #1
 800b2a6:	e0d1      	b.n	800b44c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	2221      	movs	r2, #33	; 0x21
 800b2ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	2240      	movs	r2, #64	; 0x40
 800b2b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	6a3a      	ldr	r2, [r7, #32]
 800b2c2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b2c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	2200      	movs	r2, #0
 800b2ce:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b2d0:	88f8      	ldrh	r0, [r7, #6]
 800b2d2:	893a      	ldrh	r2, [r7, #8]
 800b2d4:	8979      	ldrh	r1, [r7, #10]
 800b2d6:	697b      	ldr	r3, [r7, #20]
 800b2d8:	9301      	str	r3, [sp, #4]
 800b2da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2dc:	9300      	str	r3, [sp, #0]
 800b2de:	4603      	mov	r3, r0
 800b2e0:	68f8      	ldr	r0, [r7, #12]
 800b2e2:	f000 f9ed 	bl	800b6c0 <I2C_RequestMemoryWrite>
 800b2e6:	4603      	mov	r3, r0
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d005      	beq.n	800b2f8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	2200      	movs	r2, #0
 800b2f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800b2f4:	2301      	movs	r3, #1
 800b2f6:	e0a9      	b.n	800b44c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b2fc:	b29b      	uxth	r3, r3
 800b2fe:	2bff      	cmp	r3, #255	; 0xff
 800b300:	d90e      	bls.n	800b320 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	22ff      	movs	r2, #255	; 0xff
 800b306:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b30c:	b2da      	uxtb	r2, r3
 800b30e:	8979      	ldrh	r1, [r7, #10]
 800b310:	2300      	movs	r3, #0
 800b312:	9300      	str	r3, [sp, #0]
 800b314:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b318:	68f8      	ldr	r0, [r7, #12]
 800b31a:	f000 fc57 	bl	800bbcc <I2C_TransferConfig>
 800b31e:	e00f      	b.n	800b340 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b324:	b29a      	uxth	r2, r3
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b32e:	b2da      	uxtb	r2, r3
 800b330:	8979      	ldrh	r1, [r7, #10]
 800b332:	2300      	movs	r3, #0
 800b334:	9300      	str	r3, [sp, #0]
 800b336:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b33a:	68f8      	ldr	r0, [r7, #12]
 800b33c:	f000 fc46 	bl	800bbcc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b340:	697a      	ldr	r2, [r7, #20]
 800b342:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b344:	68f8      	ldr	r0, [r7, #12]
 800b346:	f000 fad6 	bl	800b8f6 <I2C_WaitOnTXISFlagUntilTimeout>
 800b34a:	4603      	mov	r3, r0
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d001      	beq.n	800b354 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800b350:	2301      	movs	r3, #1
 800b352:	e07b      	b.n	800b44c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b358:	781a      	ldrb	r2, [r3, #0]
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b364:	1c5a      	adds	r2, r3, #1
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b36e:	b29b      	uxth	r3, r3
 800b370:	3b01      	subs	r3, #1
 800b372:	b29a      	uxth	r2, r3
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b37c:	3b01      	subs	r3, #1
 800b37e:	b29a      	uxth	r2, r3
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b388:	b29b      	uxth	r3, r3
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d034      	beq.n	800b3f8 <HAL_I2C_Mem_Write+0x1c8>
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b392:	2b00      	cmp	r3, #0
 800b394:	d130      	bne.n	800b3f8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b396:	697b      	ldr	r3, [r7, #20]
 800b398:	9300      	str	r3, [sp, #0]
 800b39a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b39c:	2200      	movs	r2, #0
 800b39e:	2180      	movs	r1, #128	; 0x80
 800b3a0:	68f8      	ldr	r0, [r7, #12]
 800b3a2:	f000 fa59 	bl	800b858 <I2C_WaitOnFlagUntilTimeout>
 800b3a6:	4603      	mov	r3, r0
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d001      	beq.n	800b3b0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800b3ac:	2301      	movs	r3, #1
 800b3ae:	e04d      	b.n	800b44c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b3b4:	b29b      	uxth	r3, r3
 800b3b6:	2bff      	cmp	r3, #255	; 0xff
 800b3b8:	d90e      	bls.n	800b3d8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	22ff      	movs	r2, #255	; 0xff
 800b3be:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b3c4:	b2da      	uxtb	r2, r3
 800b3c6:	8979      	ldrh	r1, [r7, #10]
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	9300      	str	r3, [sp, #0]
 800b3cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b3d0:	68f8      	ldr	r0, [r7, #12]
 800b3d2:	f000 fbfb 	bl	800bbcc <I2C_TransferConfig>
 800b3d6:	e00f      	b.n	800b3f8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b3dc:	b29a      	uxth	r2, r3
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b3e6:	b2da      	uxtb	r2, r3
 800b3e8:	8979      	ldrh	r1, [r7, #10]
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	9300      	str	r3, [sp, #0]
 800b3ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b3f2:	68f8      	ldr	r0, [r7, #12]
 800b3f4:	f000 fbea 	bl	800bbcc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b3fc:	b29b      	uxth	r3, r3
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d19e      	bne.n	800b340 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b402:	697a      	ldr	r2, [r7, #20]
 800b404:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b406:	68f8      	ldr	r0, [r7, #12]
 800b408:	f000 fabc 	bl	800b984 <I2C_WaitOnSTOPFlagUntilTimeout>
 800b40c:	4603      	mov	r3, r0
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d001      	beq.n	800b416 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800b412:	2301      	movs	r3, #1
 800b414:	e01a      	b.n	800b44c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	2220      	movs	r2, #32
 800b41c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	6859      	ldr	r1, [r3, #4]
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	681a      	ldr	r2, [r3, #0]
 800b428:	4b0a      	ldr	r3, [pc, #40]	; (800b454 <HAL_I2C_Mem_Write+0x224>)
 800b42a:	400b      	ands	r3, r1
 800b42c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	2220      	movs	r2, #32
 800b432:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	2200      	movs	r2, #0
 800b43a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	2200      	movs	r2, #0
 800b442:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b446:	2300      	movs	r3, #0
 800b448:	e000      	b.n	800b44c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800b44a:	2302      	movs	r3, #2
  }
}
 800b44c:	4618      	mov	r0, r3
 800b44e:	3718      	adds	r7, #24
 800b450:	46bd      	mov	sp, r7
 800b452:	bd80      	pop	{r7, pc}
 800b454:	fe00e800 	.word	0xfe00e800

0800b458 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b088      	sub	sp, #32
 800b45c:	af02      	add	r7, sp, #8
 800b45e:	60f8      	str	r0, [r7, #12]
 800b460:	4608      	mov	r0, r1
 800b462:	4611      	mov	r1, r2
 800b464:	461a      	mov	r2, r3
 800b466:	4603      	mov	r3, r0
 800b468:	817b      	strh	r3, [r7, #10]
 800b46a:	460b      	mov	r3, r1
 800b46c:	813b      	strh	r3, [r7, #8]
 800b46e:	4613      	mov	r3, r2
 800b470:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b478:	b2db      	uxtb	r3, r3
 800b47a:	2b20      	cmp	r3, #32
 800b47c:	f040 80fd 	bne.w	800b67a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800b480:	6a3b      	ldr	r3, [r7, #32]
 800b482:	2b00      	cmp	r3, #0
 800b484:	d002      	beq.n	800b48c <HAL_I2C_Mem_Read+0x34>
 800b486:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d105      	bne.n	800b498 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b492:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800b494:	2301      	movs	r3, #1
 800b496:	e0f1      	b.n	800b67c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b49e:	2b01      	cmp	r3, #1
 800b4a0:	d101      	bne.n	800b4a6 <HAL_I2C_Mem_Read+0x4e>
 800b4a2:	2302      	movs	r3, #2
 800b4a4:	e0ea      	b.n	800b67c <HAL_I2C_Mem_Read+0x224>
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	2201      	movs	r2, #1
 800b4aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800b4ae:	f7ff f8ed 	bl	800a68c <HAL_GetTick>
 800b4b2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b4b4:	697b      	ldr	r3, [r7, #20]
 800b4b6:	9300      	str	r3, [sp, #0]
 800b4b8:	2319      	movs	r3, #25
 800b4ba:	2201      	movs	r2, #1
 800b4bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b4c0:	68f8      	ldr	r0, [r7, #12]
 800b4c2:	f000 f9c9 	bl	800b858 <I2C_WaitOnFlagUntilTimeout>
 800b4c6:	4603      	mov	r3, r0
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d001      	beq.n	800b4d0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800b4cc:	2301      	movs	r3, #1
 800b4ce:	e0d5      	b.n	800b67c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	2222      	movs	r2, #34	; 0x22
 800b4d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	2240      	movs	r2, #64	; 0x40
 800b4dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	6a3a      	ldr	r2, [r7, #32]
 800b4ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b4f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	2200      	movs	r2, #0
 800b4f6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b4f8:	88f8      	ldrh	r0, [r7, #6]
 800b4fa:	893a      	ldrh	r2, [r7, #8]
 800b4fc:	8979      	ldrh	r1, [r7, #10]
 800b4fe:	697b      	ldr	r3, [r7, #20]
 800b500:	9301      	str	r3, [sp, #4]
 800b502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b504:	9300      	str	r3, [sp, #0]
 800b506:	4603      	mov	r3, r0
 800b508:	68f8      	ldr	r0, [r7, #12]
 800b50a:	f000 f92d 	bl	800b768 <I2C_RequestMemoryRead>
 800b50e:	4603      	mov	r3, r0
 800b510:	2b00      	cmp	r3, #0
 800b512:	d005      	beq.n	800b520 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	2200      	movs	r2, #0
 800b518:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800b51c:	2301      	movs	r3, #1
 800b51e:	e0ad      	b.n	800b67c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b524:	b29b      	uxth	r3, r3
 800b526:	2bff      	cmp	r3, #255	; 0xff
 800b528:	d90e      	bls.n	800b548 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	22ff      	movs	r2, #255	; 0xff
 800b52e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b534:	b2da      	uxtb	r2, r3
 800b536:	8979      	ldrh	r1, [r7, #10]
 800b538:	4b52      	ldr	r3, [pc, #328]	; (800b684 <HAL_I2C_Mem_Read+0x22c>)
 800b53a:	9300      	str	r3, [sp, #0]
 800b53c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b540:	68f8      	ldr	r0, [r7, #12]
 800b542:	f000 fb43 	bl	800bbcc <I2C_TransferConfig>
 800b546:	e00f      	b.n	800b568 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b54c:	b29a      	uxth	r2, r3
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b556:	b2da      	uxtb	r2, r3
 800b558:	8979      	ldrh	r1, [r7, #10]
 800b55a:	4b4a      	ldr	r3, [pc, #296]	; (800b684 <HAL_I2C_Mem_Read+0x22c>)
 800b55c:	9300      	str	r3, [sp, #0]
 800b55e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b562:	68f8      	ldr	r0, [r7, #12]
 800b564:	f000 fb32 	bl	800bbcc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800b568:	697b      	ldr	r3, [r7, #20]
 800b56a:	9300      	str	r3, [sp, #0]
 800b56c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b56e:	2200      	movs	r2, #0
 800b570:	2104      	movs	r1, #4
 800b572:	68f8      	ldr	r0, [r7, #12]
 800b574:	f000 f970 	bl	800b858 <I2C_WaitOnFlagUntilTimeout>
 800b578:	4603      	mov	r3, r0
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d001      	beq.n	800b582 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800b57e:	2301      	movs	r3, #1
 800b580:	e07c      	b.n	800b67c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b58c:	b2d2      	uxtb	r2, r2
 800b58e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b594:	1c5a      	adds	r2, r3, #1
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b59e:	3b01      	subs	r3, #1
 800b5a0:	b29a      	uxth	r2, r3
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b5aa:	b29b      	uxth	r3, r3
 800b5ac:	3b01      	subs	r3, #1
 800b5ae:	b29a      	uxth	r2, r3
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b5b8:	b29b      	uxth	r3, r3
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d034      	beq.n	800b628 <HAL_I2C_Mem_Read+0x1d0>
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d130      	bne.n	800b628 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b5c6:	697b      	ldr	r3, [r7, #20]
 800b5c8:	9300      	str	r3, [sp, #0]
 800b5ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	2180      	movs	r1, #128	; 0x80
 800b5d0:	68f8      	ldr	r0, [r7, #12]
 800b5d2:	f000 f941 	bl	800b858 <I2C_WaitOnFlagUntilTimeout>
 800b5d6:	4603      	mov	r3, r0
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d001      	beq.n	800b5e0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800b5dc:	2301      	movs	r3, #1
 800b5de:	e04d      	b.n	800b67c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b5e4:	b29b      	uxth	r3, r3
 800b5e6:	2bff      	cmp	r3, #255	; 0xff
 800b5e8:	d90e      	bls.n	800b608 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	22ff      	movs	r2, #255	; 0xff
 800b5ee:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b5f4:	b2da      	uxtb	r2, r3
 800b5f6:	8979      	ldrh	r1, [r7, #10]
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	9300      	str	r3, [sp, #0]
 800b5fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b600:	68f8      	ldr	r0, [r7, #12]
 800b602:	f000 fae3 	bl	800bbcc <I2C_TransferConfig>
 800b606:	e00f      	b.n	800b628 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b60c:	b29a      	uxth	r2, r3
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b616:	b2da      	uxtb	r2, r3
 800b618:	8979      	ldrh	r1, [r7, #10]
 800b61a:	2300      	movs	r3, #0
 800b61c:	9300      	str	r3, [sp, #0]
 800b61e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b622:	68f8      	ldr	r0, [r7, #12]
 800b624:	f000 fad2 	bl	800bbcc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b62c:	b29b      	uxth	r3, r3
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d19a      	bne.n	800b568 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b632:	697a      	ldr	r2, [r7, #20]
 800b634:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b636:	68f8      	ldr	r0, [r7, #12]
 800b638:	f000 f9a4 	bl	800b984 <I2C_WaitOnSTOPFlagUntilTimeout>
 800b63c:	4603      	mov	r3, r0
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d001      	beq.n	800b646 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800b642:	2301      	movs	r3, #1
 800b644:	e01a      	b.n	800b67c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	2220      	movs	r2, #32
 800b64c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	6859      	ldr	r1, [r3, #4]
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	681a      	ldr	r2, [r3, #0]
 800b658:	4b0b      	ldr	r3, [pc, #44]	; (800b688 <HAL_I2C_Mem_Read+0x230>)
 800b65a:	400b      	ands	r3, r1
 800b65c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	2220      	movs	r2, #32
 800b662:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	2200      	movs	r2, #0
 800b66a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	2200      	movs	r2, #0
 800b672:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b676:	2300      	movs	r3, #0
 800b678:	e000      	b.n	800b67c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800b67a:	2302      	movs	r3, #2
  }
}
 800b67c:	4618      	mov	r0, r3
 800b67e:	3718      	adds	r7, #24
 800b680:	46bd      	mov	sp, r7
 800b682:	bd80      	pop	{r7, pc}
 800b684:	80002400 	.word	0x80002400
 800b688:	fe00e800 	.word	0xfe00e800

0800b68c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 800b68c:	b480      	push	{r7}
 800b68e:	b083      	sub	sp, #12
 800b690:	af00      	add	r7, sp, #0
 800b692:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b69a:	b2db      	uxtb	r3, r3
}
 800b69c:	4618      	mov	r0, r3
 800b69e:	370c      	adds	r7, #12
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a6:	4770      	bx	lr

0800b6a8 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 800b6a8:	b480      	push	{r7}
 800b6aa:	b083      	sub	sp, #12
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	370c      	adds	r7, #12
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6be:	4770      	bx	lr

0800b6c0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	b086      	sub	sp, #24
 800b6c4:	af02      	add	r7, sp, #8
 800b6c6:	60f8      	str	r0, [r7, #12]
 800b6c8:	4608      	mov	r0, r1
 800b6ca:	4611      	mov	r1, r2
 800b6cc:	461a      	mov	r2, r3
 800b6ce:	4603      	mov	r3, r0
 800b6d0:	817b      	strh	r3, [r7, #10]
 800b6d2:	460b      	mov	r3, r1
 800b6d4:	813b      	strh	r3, [r7, #8]
 800b6d6:	4613      	mov	r3, r2
 800b6d8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800b6da:	88fb      	ldrh	r3, [r7, #6]
 800b6dc:	b2da      	uxtb	r2, r3
 800b6de:	8979      	ldrh	r1, [r7, #10]
 800b6e0:	4b20      	ldr	r3, [pc, #128]	; (800b764 <I2C_RequestMemoryWrite+0xa4>)
 800b6e2:	9300      	str	r3, [sp, #0]
 800b6e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b6e8:	68f8      	ldr	r0, [r7, #12]
 800b6ea:	f000 fa6f 	bl	800bbcc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b6ee:	69fa      	ldr	r2, [r7, #28]
 800b6f0:	69b9      	ldr	r1, [r7, #24]
 800b6f2:	68f8      	ldr	r0, [r7, #12]
 800b6f4:	f000 f8ff 	bl	800b8f6 <I2C_WaitOnTXISFlagUntilTimeout>
 800b6f8:	4603      	mov	r3, r0
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d001      	beq.n	800b702 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800b6fe:	2301      	movs	r3, #1
 800b700:	e02c      	b.n	800b75c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b702:	88fb      	ldrh	r3, [r7, #6]
 800b704:	2b01      	cmp	r3, #1
 800b706:	d105      	bne.n	800b714 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b708:	893b      	ldrh	r3, [r7, #8]
 800b70a:	b2da      	uxtb	r2, r3
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	629a      	str	r2, [r3, #40]	; 0x28
 800b712:	e015      	b.n	800b740 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800b714:	893b      	ldrh	r3, [r7, #8]
 800b716:	0a1b      	lsrs	r3, r3, #8
 800b718:	b29b      	uxth	r3, r3
 800b71a:	b2da      	uxtb	r2, r3
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b722:	69fa      	ldr	r2, [r7, #28]
 800b724:	69b9      	ldr	r1, [r7, #24]
 800b726:	68f8      	ldr	r0, [r7, #12]
 800b728:	f000 f8e5 	bl	800b8f6 <I2C_WaitOnTXISFlagUntilTimeout>
 800b72c:	4603      	mov	r3, r0
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d001      	beq.n	800b736 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800b732:	2301      	movs	r3, #1
 800b734:	e012      	b.n	800b75c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b736:	893b      	ldrh	r3, [r7, #8]
 800b738:	b2da      	uxtb	r2, r3
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800b740:	69fb      	ldr	r3, [r7, #28]
 800b742:	9300      	str	r3, [sp, #0]
 800b744:	69bb      	ldr	r3, [r7, #24]
 800b746:	2200      	movs	r2, #0
 800b748:	2180      	movs	r1, #128	; 0x80
 800b74a:	68f8      	ldr	r0, [r7, #12]
 800b74c:	f000 f884 	bl	800b858 <I2C_WaitOnFlagUntilTimeout>
 800b750:	4603      	mov	r3, r0
 800b752:	2b00      	cmp	r3, #0
 800b754:	d001      	beq.n	800b75a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800b756:	2301      	movs	r3, #1
 800b758:	e000      	b.n	800b75c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800b75a:	2300      	movs	r3, #0
}
 800b75c:	4618      	mov	r0, r3
 800b75e:	3710      	adds	r7, #16
 800b760:	46bd      	mov	sp, r7
 800b762:	bd80      	pop	{r7, pc}
 800b764:	80002000 	.word	0x80002000

0800b768 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800b768:	b580      	push	{r7, lr}
 800b76a:	b086      	sub	sp, #24
 800b76c:	af02      	add	r7, sp, #8
 800b76e:	60f8      	str	r0, [r7, #12]
 800b770:	4608      	mov	r0, r1
 800b772:	4611      	mov	r1, r2
 800b774:	461a      	mov	r2, r3
 800b776:	4603      	mov	r3, r0
 800b778:	817b      	strh	r3, [r7, #10]
 800b77a:	460b      	mov	r3, r1
 800b77c:	813b      	strh	r3, [r7, #8]
 800b77e:	4613      	mov	r3, r2
 800b780:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800b782:	88fb      	ldrh	r3, [r7, #6]
 800b784:	b2da      	uxtb	r2, r3
 800b786:	8979      	ldrh	r1, [r7, #10]
 800b788:	4b20      	ldr	r3, [pc, #128]	; (800b80c <I2C_RequestMemoryRead+0xa4>)
 800b78a:	9300      	str	r3, [sp, #0]
 800b78c:	2300      	movs	r3, #0
 800b78e:	68f8      	ldr	r0, [r7, #12]
 800b790:	f000 fa1c 	bl	800bbcc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b794:	69fa      	ldr	r2, [r7, #28]
 800b796:	69b9      	ldr	r1, [r7, #24]
 800b798:	68f8      	ldr	r0, [r7, #12]
 800b79a:	f000 f8ac 	bl	800b8f6 <I2C_WaitOnTXISFlagUntilTimeout>
 800b79e:	4603      	mov	r3, r0
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d001      	beq.n	800b7a8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800b7a4:	2301      	movs	r3, #1
 800b7a6:	e02c      	b.n	800b802 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b7a8:	88fb      	ldrh	r3, [r7, #6]
 800b7aa:	2b01      	cmp	r3, #1
 800b7ac:	d105      	bne.n	800b7ba <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b7ae:	893b      	ldrh	r3, [r7, #8]
 800b7b0:	b2da      	uxtb	r2, r3
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	629a      	str	r2, [r3, #40]	; 0x28
 800b7b8:	e015      	b.n	800b7e6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800b7ba:	893b      	ldrh	r3, [r7, #8]
 800b7bc:	0a1b      	lsrs	r3, r3, #8
 800b7be:	b29b      	uxth	r3, r3
 800b7c0:	b2da      	uxtb	r2, r3
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b7c8:	69fa      	ldr	r2, [r7, #28]
 800b7ca:	69b9      	ldr	r1, [r7, #24]
 800b7cc:	68f8      	ldr	r0, [r7, #12]
 800b7ce:	f000 f892 	bl	800b8f6 <I2C_WaitOnTXISFlagUntilTimeout>
 800b7d2:	4603      	mov	r3, r0
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d001      	beq.n	800b7dc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800b7d8:	2301      	movs	r3, #1
 800b7da:	e012      	b.n	800b802 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b7dc:	893b      	ldrh	r3, [r7, #8]
 800b7de:	b2da      	uxtb	r2, r3
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800b7e6:	69fb      	ldr	r3, [r7, #28]
 800b7e8:	9300      	str	r3, [sp, #0]
 800b7ea:	69bb      	ldr	r3, [r7, #24]
 800b7ec:	2200      	movs	r2, #0
 800b7ee:	2140      	movs	r1, #64	; 0x40
 800b7f0:	68f8      	ldr	r0, [r7, #12]
 800b7f2:	f000 f831 	bl	800b858 <I2C_WaitOnFlagUntilTimeout>
 800b7f6:	4603      	mov	r3, r0
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d001      	beq.n	800b800 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800b7fc:	2301      	movs	r3, #1
 800b7fe:	e000      	b.n	800b802 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800b800:	2300      	movs	r3, #0
}
 800b802:	4618      	mov	r0, r3
 800b804:	3710      	adds	r7, #16
 800b806:	46bd      	mov	sp, r7
 800b808:	bd80      	pop	{r7, pc}
 800b80a:	bf00      	nop
 800b80c:	80002000 	.word	0x80002000

0800b810 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800b810:	b480      	push	{r7}
 800b812:	b083      	sub	sp, #12
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	699b      	ldr	r3, [r3, #24]
 800b81e:	f003 0302 	and.w	r3, r3, #2
 800b822:	2b02      	cmp	r3, #2
 800b824:	d103      	bne.n	800b82e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	2200      	movs	r2, #0
 800b82c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	699b      	ldr	r3, [r3, #24]
 800b834:	f003 0301 	and.w	r3, r3, #1
 800b838:	2b01      	cmp	r3, #1
 800b83a:	d007      	beq.n	800b84c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	699a      	ldr	r2, [r3, #24]
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	f042 0201 	orr.w	r2, r2, #1
 800b84a:	619a      	str	r2, [r3, #24]
  }
}
 800b84c:	bf00      	nop
 800b84e:	370c      	adds	r7, #12
 800b850:	46bd      	mov	sp, r7
 800b852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b856:	4770      	bx	lr

0800b858 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800b858:	b580      	push	{r7, lr}
 800b85a:	b084      	sub	sp, #16
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	60f8      	str	r0, [r7, #12]
 800b860:	60b9      	str	r1, [r7, #8]
 800b862:	603b      	str	r3, [r7, #0]
 800b864:	4613      	mov	r3, r2
 800b866:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b868:	e031      	b.n	800b8ce <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b86a:	683b      	ldr	r3, [r7, #0]
 800b86c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b870:	d02d      	beq.n	800b8ce <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b872:	f7fe ff0b 	bl	800a68c <HAL_GetTick>
 800b876:	4602      	mov	r2, r0
 800b878:	69bb      	ldr	r3, [r7, #24]
 800b87a:	1ad3      	subs	r3, r2, r3
 800b87c:	683a      	ldr	r2, [r7, #0]
 800b87e:	429a      	cmp	r2, r3
 800b880:	d302      	bcc.n	800b888 <I2C_WaitOnFlagUntilTimeout+0x30>
 800b882:	683b      	ldr	r3, [r7, #0]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d122      	bne.n	800b8ce <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	699a      	ldr	r2, [r3, #24]
 800b88e:	68bb      	ldr	r3, [r7, #8]
 800b890:	4013      	ands	r3, r2
 800b892:	68ba      	ldr	r2, [r7, #8]
 800b894:	429a      	cmp	r2, r3
 800b896:	bf0c      	ite	eq
 800b898:	2301      	moveq	r3, #1
 800b89a:	2300      	movne	r3, #0
 800b89c:	b2db      	uxtb	r3, r3
 800b89e:	461a      	mov	r2, r3
 800b8a0:	79fb      	ldrb	r3, [r7, #7]
 800b8a2:	429a      	cmp	r2, r3
 800b8a4:	d113      	bne.n	800b8ce <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8aa:	f043 0220 	orr.w	r2, r3, #32
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	2220      	movs	r2, #32
 800b8b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	2200      	movs	r2, #0
 800b8be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	2200      	movs	r2, #0
 800b8c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800b8ca:	2301      	movs	r3, #1
 800b8cc:	e00f      	b.n	800b8ee <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	699a      	ldr	r2, [r3, #24]
 800b8d4:	68bb      	ldr	r3, [r7, #8]
 800b8d6:	4013      	ands	r3, r2
 800b8d8:	68ba      	ldr	r2, [r7, #8]
 800b8da:	429a      	cmp	r2, r3
 800b8dc:	bf0c      	ite	eq
 800b8de:	2301      	moveq	r3, #1
 800b8e0:	2300      	movne	r3, #0
 800b8e2:	b2db      	uxtb	r3, r3
 800b8e4:	461a      	mov	r2, r3
 800b8e6:	79fb      	ldrb	r3, [r7, #7]
 800b8e8:	429a      	cmp	r2, r3
 800b8ea:	d0be      	beq.n	800b86a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b8ec:	2300      	movs	r3, #0
}
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	3710      	adds	r7, #16
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	bd80      	pop	{r7, pc}

0800b8f6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800b8f6:	b580      	push	{r7, lr}
 800b8f8:	b084      	sub	sp, #16
 800b8fa:	af00      	add	r7, sp, #0
 800b8fc:	60f8      	str	r0, [r7, #12]
 800b8fe:	60b9      	str	r1, [r7, #8]
 800b900:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b902:	e033      	b.n	800b96c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b904:	687a      	ldr	r2, [r7, #4]
 800b906:	68b9      	ldr	r1, [r7, #8]
 800b908:	68f8      	ldr	r0, [r7, #12]
 800b90a:	f000 f87f 	bl	800ba0c <I2C_IsErrorOccurred>
 800b90e:	4603      	mov	r3, r0
 800b910:	2b00      	cmp	r3, #0
 800b912:	d001      	beq.n	800b918 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b914:	2301      	movs	r3, #1
 800b916:	e031      	b.n	800b97c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b918:	68bb      	ldr	r3, [r7, #8]
 800b91a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b91e:	d025      	beq.n	800b96c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b920:	f7fe feb4 	bl	800a68c <HAL_GetTick>
 800b924:	4602      	mov	r2, r0
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	1ad3      	subs	r3, r2, r3
 800b92a:	68ba      	ldr	r2, [r7, #8]
 800b92c:	429a      	cmp	r2, r3
 800b92e:	d302      	bcc.n	800b936 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800b930:	68bb      	ldr	r3, [r7, #8]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d11a      	bne.n	800b96c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	699b      	ldr	r3, [r3, #24]
 800b93c:	f003 0302 	and.w	r3, r3, #2
 800b940:	2b02      	cmp	r3, #2
 800b942:	d013      	beq.n	800b96c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b948:	f043 0220 	orr.w	r2, r3, #32
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	2220      	movs	r2, #32
 800b954:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	2200      	movs	r2, #0
 800b95c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	2200      	movs	r2, #0
 800b964:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800b968:	2301      	movs	r3, #1
 800b96a:	e007      	b.n	800b97c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	699b      	ldr	r3, [r3, #24]
 800b972:	f003 0302 	and.w	r3, r3, #2
 800b976:	2b02      	cmp	r3, #2
 800b978:	d1c4      	bne.n	800b904 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800b97a:	2300      	movs	r3, #0
}
 800b97c:	4618      	mov	r0, r3
 800b97e:	3710      	adds	r7, #16
 800b980:	46bd      	mov	sp, r7
 800b982:	bd80      	pop	{r7, pc}

0800b984 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800b984:	b580      	push	{r7, lr}
 800b986:	b084      	sub	sp, #16
 800b988:	af00      	add	r7, sp, #0
 800b98a:	60f8      	str	r0, [r7, #12]
 800b98c:	60b9      	str	r1, [r7, #8]
 800b98e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b990:	e02f      	b.n	800b9f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b992:	687a      	ldr	r2, [r7, #4]
 800b994:	68b9      	ldr	r1, [r7, #8]
 800b996:	68f8      	ldr	r0, [r7, #12]
 800b998:	f000 f838 	bl	800ba0c <I2C_IsErrorOccurred>
 800b99c:	4603      	mov	r3, r0
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d001      	beq.n	800b9a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b9a2:	2301      	movs	r3, #1
 800b9a4:	e02d      	b.n	800ba02 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b9a6:	f7fe fe71 	bl	800a68c <HAL_GetTick>
 800b9aa:	4602      	mov	r2, r0
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	1ad3      	subs	r3, r2, r3
 800b9b0:	68ba      	ldr	r2, [r7, #8]
 800b9b2:	429a      	cmp	r2, r3
 800b9b4:	d302      	bcc.n	800b9bc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800b9b6:	68bb      	ldr	r3, [r7, #8]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d11a      	bne.n	800b9f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	699b      	ldr	r3, [r3, #24]
 800b9c2:	f003 0320 	and.w	r3, r3, #32
 800b9c6:	2b20      	cmp	r3, #32
 800b9c8:	d013      	beq.n	800b9f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9ce:	f043 0220 	orr.w	r2, r3, #32
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	2220      	movs	r2, #32
 800b9da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	2200      	movs	r2, #0
 800b9e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	2200      	movs	r2, #0
 800b9ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800b9ee:	2301      	movs	r3, #1
 800b9f0:	e007      	b.n	800ba02 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	699b      	ldr	r3, [r3, #24]
 800b9f8:	f003 0320 	and.w	r3, r3, #32
 800b9fc:	2b20      	cmp	r3, #32
 800b9fe:	d1c8      	bne.n	800b992 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800ba00:	2300      	movs	r3, #0
}
 800ba02:	4618      	mov	r0, r3
 800ba04:	3710      	adds	r7, #16
 800ba06:	46bd      	mov	sp, r7
 800ba08:	bd80      	pop	{r7, pc}
	...

0800ba0c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ba0c:	b580      	push	{r7, lr}
 800ba0e:	b08a      	sub	sp, #40	; 0x28
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	60f8      	str	r0, [r7, #12]
 800ba14:	60b9      	str	r1, [r7, #8]
 800ba16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ba18:	2300      	movs	r3, #0
 800ba1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	699b      	ldr	r3, [r3, #24]
 800ba24:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800ba26:	2300      	movs	r3, #0
 800ba28:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800ba2e:	69bb      	ldr	r3, [r7, #24]
 800ba30:	f003 0310 	and.w	r3, r3, #16
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d068      	beq.n	800bb0a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	2210      	movs	r2, #16
 800ba3e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800ba40:	e049      	b.n	800bad6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800ba42:	68bb      	ldr	r3, [r7, #8]
 800ba44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ba48:	d045      	beq.n	800bad6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800ba4a:	f7fe fe1f 	bl	800a68c <HAL_GetTick>
 800ba4e:	4602      	mov	r2, r0
 800ba50:	69fb      	ldr	r3, [r7, #28]
 800ba52:	1ad3      	subs	r3, r2, r3
 800ba54:	68ba      	ldr	r2, [r7, #8]
 800ba56:	429a      	cmp	r2, r3
 800ba58:	d302      	bcc.n	800ba60 <I2C_IsErrorOccurred+0x54>
 800ba5a:	68bb      	ldr	r3, [r7, #8]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d13a      	bne.n	800bad6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	685b      	ldr	r3, [r3, #4]
 800ba66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ba6a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ba72:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	699b      	ldr	r3, [r3, #24]
 800ba7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ba7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ba82:	d121      	bne.n	800bac8 <I2C_IsErrorOccurred+0xbc>
 800ba84:	697b      	ldr	r3, [r7, #20]
 800ba86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ba8a:	d01d      	beq.n	800bac8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800ba8c:	7cfb      	ldrb	r3, [r7, #19]
 800ba8e:	2b20      	cmp	r3, #32
 800ba90:	d01a      	beq.n	800bac8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	685a      	ldr	r2, [r3, #4]
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800baa0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800baa2:	f7fe fdf3 	bl	800a68c <HAL_GetTick>
 800baa6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800baa8:	e00e      	b.n	800bac8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800baaa:	f7fe fdef 	bl	800a68c <HAL_GetTick>
 800baae:	4602      	mov	r2, r0
 800bab0:	69fb      	ldr	r3, [r7, #28]
 800bab2:	1ad3      	subs	r3, r2, r3
 800bab4:	2b19      	cmp	r3, #25
 800bab6:	d907      	bls.n	800bac8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800bab8:	6a3b      	ldr	r3, [r7, #32]
 800baba:	f043 0320 	orr.w	r3, r3, #32
 800babe:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800bac0:	2301      	movs	r3, #1
 800bac2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800bac6:	e006      	b.n	800bad6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	699b      	ldr	r3, [r3, #24]
 800bace:	f003 0320 	and.w	r3, r3, #32
 800bad2:	2b20      	cmp	r3, #32
 800bad4:	d1e9      	bne.n	800baaa <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	699b      	ldr	r3, [r3, #24]
 800badc:	f003 0320 	and.w	r3, r3, #32
 800bae0:	2b20      	cmp	r3, #32
 800bae2:	d003      	beq.n	800baec <I2C_IsErrorOccurred+0xe0>
 800bae4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d0aa      	beq.n	800ba42 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800baec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d103      	bne.n	800bafc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	2220      	movs	r2, #32
 800bafa:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800bafc:	6a3b      	ldr	r3, [r7, #32]
 800bafe:	f043 0304 	orr.w	r3, r3, #4
 800bb02:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800bb04:	2301      	movs	r3, #1
 800bb06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	699b      	ldr	r3, [r3, #24]
 800bb10:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800bb12:	69bb      	ldr	r3, [r7, #24]
 800bb14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d00b      	beq.n	800bb34 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800bb1c:	6a3b      	ldr	r3, [r7, #32]
 800bb1e:	f043 0301 	orr.w	r3, r3, #1
 800bb22:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bb2c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800bb2e:	2301      	movs	r3, #1
 800bb30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800bb34:	69bb      	ldr	r3, [r7, #24]
 800bb36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d00b      	beq.n	800bb56 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800bb3e:	6a3b      	ldr	r3, [r7, #32]
 800bb40:	f043 0308 	orr.w	r3, r3, #8
 800bb44:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800bb4e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800bb50:	2301      	movs	r3, #1
 800bb52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800bb56:	69bb      	ldr	r3, [r7, #24]
 800bb58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d00b      	beq.n	800bb78 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800bb60:	6a3b      	ldr	r3, [r7, #32]
 800bb62:	f043 0302 	orr.w	r3, r3, #2
 800bb66:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bb70:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800bb72:	2301      	movs	r3, #1
 800bb74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800bb78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d01c      	beq.n	800bbba <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800bb80:	68f8      	ldr	r0, [r7, #12]
 800bb82:	f7ff fe45 	bl	800b810 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	6859      	ldr	r1, [r3, #4]
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	681a      	ldr	r2, [r3, #0]
 800bb90:	4b0d      	ldr	r3, [pc, #52]	; (800bbc8 <I2C_IsErrorOccurred+0x1bc>)
 800bb92:	400b      	ands	r3, r1
 800bb94:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bb9a:	6a3b      	ldr	r3, [r7, #32]
 800bb9c:	431a      	orrs	r2, r3
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	2220      	movs	r2, #32
 800bba6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	2200      	movs	r2, #0
 800bbae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	2200      	movs	r2, #0
 800bbb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800bbba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	3728      	adds	r7, #40	; 0x28
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	bd80      	pop	{r7, pc}
 800bbc6:	bf00      	nop
 800bbc8:	fe00e800 	.word	0xfe00e800

0800bbcc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800bbcc:	b480      	push	{r7}
 800bbce:	b087      	sub	sp, #28
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	60f8      	str	r0, [r7, #12]
 800bbd4:	607b      	str	r3, [r7, #4]
 800bbd6:	460b      	mov	r3, r1
 800bbd8:	817b      	strh	r3, [r7, #10]
 800bbda:	4613      	mov	r3, r2
 800bbdc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800bbde:	897b      	ldrh	r3, [r7, #10]
 800bbe0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800bbe4:	7a7b      	ldrb	r3, [r7, #9]
 800bbe6:	041b      	lsls	r3, r3, #16
 800bbe8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800bbec:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800bbf2:	6a3b      	ldr	r3, [r7, #32]
 800bbf4:	4313      	orrs	r3, r2
 800bbf6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bbfa:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	685a      	ldr	r2, [r3, #4]
 800bc02:	6a3b      	ldr	r3, [r7, #32]
 800bc04:	0d5b      	lsrs	r3, r3, #21
 800bc06:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800bc0a:	4b08      	ldr	r3, [pc, #32]	; (800bc2c <I2C_TransferConfig+0x60>)
 800bc0c:	430b      	orrs	r3, r1
 800bc0e:	43db      	mvns	r3, r3
 800bc10:	ea02 0103 	and.w	r1, r2, r3
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	697a      	ldr	r2, [r7, #20]
 800bc1a:	430a      	orrs	r2, r1
 800bc1c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800bc1e:	bf00      	nop
 800bc20:	371c      	adds	r7, #28
 800bc22:	46bd      	mov	sp, r7
 800bc24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc28:	4770      	bx	lr
 800bc2a:	bf00      	nop
 800bc2c:	03ff63ff 	.word	0x03ff63ff

0800bc30 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800bc30:	b480      	push	{r7}
 800bc32:	b083      	sub	sp, #12
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
 800bc38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bc40:	b2db      	uxtb	r3, r3
 800bc42:	2b20      	cmp	r3, #32
 800bc44:	d138      	bne.n	800bcb8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bc4c:	2b01      	cmp	r3, #1
 800bc4e:	d101      	bne.n	800bc54 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800bc50:	2302      	movs	r3, #2
 800bc52:	e032      	b.n	800bcba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	2201      	movs	r2, #1
 800bc58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	2224      	movs	r2, #36	; 0x24
 800bc60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	681a      	ldr	r2, [r3, #0]
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	f022 0201 	bic.w	r2, r2, #1
 800bc72:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	681a      	ldr	r2, [r3, #0]
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800bc82:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	6819      	ldr	r1, [r3, #0]
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	683a      	ldr	r2, [r7, #0]
 800bc90:	430a      	orrs	r2, r1
 800bc92:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	681a      	ldr	r2, [r3, #0]
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	f042 0201 	orr.w	r2, r2, #1
 800bca2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	2220      	movs	r2, #32
 800bca8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	2200      	movs	r2, #0
 800bcb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	e000      	b.n	800bcba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800bcb8:	2302      	movs	r3, #2
  }
}
 800bcba:	4618      	mov	r0, r3
 800bcbc:	370c      	adds	r7, #12
 800bcbe:	46bd      	mov	sp, r7
 800bcc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc4:	4770      	bx	lr

0800bcc6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800bcc6:	b480      	push	{r7}
 800bcc8:	b085      	sub	sp, #20
 800bcca:	af00      	add	r7, sp, #0
 800bccc:	6078      	str	r0, [r7, #4]
 800bcce:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bcd6:	b2db      	uxtb	r3, r3
 800bcd8:	2b20      	cmp	r3, #32
 800bcda:	d139      	bne.n	800bd50 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bce2:	2b01      	cmp	r3, #1
 800bce4:	d101      	bne.n	800bcea <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800bce6:	2302      	movs	r3, #2
 800bce8:	e033      	b.n	800bd52 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	2201      	movs	r2, #1
 800bcee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	2224      	movs	r2, #36	; 0x24
 800bcf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	681a      	ldr	r2, [r3, #0]
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	f022 0201 	bic.w	r2, r2, #1
 800bd08:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800bd18:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800bd1a:	683b      	ldr	r3, [r7, #0]
 800bd1c:	021b      	lsls	r3, r3, #8
 800bd1e:	68fa      	ldr	r2, [r7, #12]
 800bd20:	4313      	orrs	r3, r2
 800bd22:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	68fa      	ldr	r2, [r7, #12]
 800bd2a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	681a      	ldr	r2, [r3, #0]
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	f042 0201 	orr.w	r2, r2, #1
 800bd3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	2220      	movs	r2, #32
 800bd40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	2200      	movs	r2, #0
 800bd48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	e000      	b.n	800bd52 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800bd50:	2302      	movs	r3, #2
  }
}
 800bd52:	4618      	mov	r0, r3
 800bd54:	3714      	adds	r7, #20
 800bd56:	46bd      	mov	sp, r7
 800bd58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5c:	4770      	bx	lr
	...

0800bd60 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 800bd60:	b480      	push	{r7}
 800bd62:	b085      	sub	sp, #20
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bd68:	2300      	movs	r3, #0
 800bd6a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 800bd6c:	4b0b      	ldr	r3, [pc, #44]	; (800bd9c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	f003 0301 	and.w	r3, r3, #1
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d002      	beq.n	800bd7e <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 800bd78:	2301      	movs	r3, #1
 800bd7a:	73fb      	strb	r3, [r7, #15]
 800bd7c:	e007      	b.n	800bd8e <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 800bd7e:	4b07      	ldr	r3, [pc, #28]	; (800bd9c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	f023 0204 	bic.w	r2, r3, #4
 800bd86:	4905      	ldr	r1, [pc, #20]	; (800bd9c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	4313      	orrs	r3, r2
 800bd8c:	600b      	str	r3, [r1, #0]
  }

  return status;
 800bd8e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd90:	4618      	mov	r0, r3
 800bd92:	3714      	adds	r7, #20
 800bd94:	46bd      	mov	sp, r7
 800bd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9a:	4770      	bx	lr
 800bd9c:	40030400 	.word	0x40030400

0800bda0 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 800bda0:	b480      	push	{r7}
 800bda2:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 800bda4:	4b05      	ldr	r3, [pc, #20]	; (800bdbc <HAL_ICACHE_Enable+0x1c>)
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	4a04      	ldr	r2, [pc, #16]	; (800bdbc <HAL_ICACHE_Enable+0x1c>)
 800bdaa:	f043 0301 	orr.w	r3, r3, #1
 800bdae:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800bdb0:	2300      	movs	r3, #0
}
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	46bd      	mov	sp, r7
 800bdb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdba:	4770      	bx	lr
 800bdbc:	40030400 	.word	0x40030400

0800bdc0 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 800bdc0:	b580      	push	{r7, lr}
 800bdc2:	b084      	sub	sp, #16
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d101      	bne.n	800bdd2 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 800bdce:	2301      	movs	r3, #1
 800bdd0:	e0f2      	b.n	800bfb8 <HAL_LPTIM_Init+0x1f8>
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(hlptim->Init.Period));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	685b      	ldr	r3, [r3, #4]
 800bdd6:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800bdde:	b2db      	uxtb	r3, r3
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d111      	bne.n	800be08 <HAL_LPTIM_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	2200      	movs	r2, #0
 800bde8:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    LPTIM_ResetCallback(hlptim);
 800bdec:	6878      	ldr	r0, [r7, #4]
 800bdee:	f000 fc7f 	bl	800c6f0 <LPTIM_ResetCallback>

    if (hlptim->MspInitCallback == NULL)
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d102      	bne.n	800be00 <HAL_LPTIM_Init+0x40>
    {
      hlptim->MspInitCallback = HAL_LPTIM_MspInit;
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	4a70      	ldr	r2, [pc, #448]	; (800bfc0 <HAL_LPTIM_Init+0x200>)
 800bdfe:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be04:	6878      	ldr	r0, [r7, #4]
 800be06:	4798      	blx	r3
    HAL_LPTIM_MspInit(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	2202      	movs	r2, #2
 800be0c:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	691a      	ldr	r2, [r3, #16]
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	f042 0201 	orr.w	r2, r2, #1
 800be1e:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	f44f 7280 	mov.w	r2, #256	; 0x100
 800be28:	605a      	str	r2, [r3, #4]

  /* Set the repetition counter */
  __HAL_LPTIM_REPETITIONCOUNTER_SET(hlptim, hlptim->Init.RepetitionCounter);
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	687a      	ldr	r2, [r7, #4]
 800be30:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800be32:	629a      	str	r2, [r3, #40]	; 0x28

  /* Wait for the completion of the write operation to the LPTIM_RCR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_REPOK) == HAL_TIMEOUT)
 800be34:	f44f 7180 	mov.w	r1, #256	; 0x100
 800be38:	6878      	ldr	r0, [r7, #4]
 800be3a:	f000 fcad 	bl	800c798 <LPTIM_WaitForFlag>
 800be3e:	4603      	mov	r3, r0
 800be40:	2b03      	cmp	r3, #3
 800be42:	d101      	bne.n	800be48 <HAL_LPTIM_Init+0x88>
  {
    return HAL_TIMEOUT;
 800be44:	2303      	movs	r3, #3
 800be46:	e0b7      	b.n	800bfb8 <HAL_LPTIM_Init+0x1f8>
  }


  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	2210      	movs	r2, #16
 800be4e:	605a      	str	r2, [r3, #4]

  /* Set LPTIM Period */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, hlptim->Init.Period);
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	687a      	ldr	r2, [r7, #4]
 800be56:	6a12      	ldr	r2, [r2, #32]
 800be58:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 800be5a:	2110      	movs	r1, #16
 800be5c:	6878      	ldr	r0, [r7, #4]
 800be5e:	f000 fc9b 	bl	800c798 <LPTIM_WaitForFlag>
 800be62:	4603      	mov	r3, r0
 800be64:	2b03      	cmp	r3, #3
 800be66:	d101      	bne.n	800be6c <HAL_LPTIM_Init+0xac>
  {
    return HAL_TIMEOUT;
 800be68:	2303      	movs	r3, #3
 800be6a:	e0a5      	b.n	800bfb8 <HAL_LPTIM_Init+0x1f8>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be72:	f003 0302 	and.w	r3, r3, #2
 800be76:	2b00      	cmp	r3, #0
 800be78:	d10e      	bne.n	800be98 <HAL_LPTIM_Init+0xd8>
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800be84:	2b00      	cmp	r3, #0
 800be86:	d107      	bne.n	800be98 <HAL_LPTIM_Init+0xd8>
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	691a      	ldr	r2, [r3, #16]
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	f022 0201 	bic.w	r2, r2, #1
 800be96:	611a      	str	r2, [r3, #16]

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	68db      	ldr	r3, [r3, #12]
 800be9e:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	685b      	ldr	r3, [r3, #4]
 800bea4:	2b01      	cmp	r3, #1
 800bea6:	d004      	beq.n	800beb2 <HAL_LPTIM_Init+0xf2>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800beac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800beb0:	d103      	bne.n	800beba <HAL_LPTIM_Init+0xfa>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	f023 031e 	bic.w	r3, r3, #30
 800beb8:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	695b      	ldr	r3, [r3, #20]
 800bebe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bec2:	4293      	cmp	r3, r2
 800bec4:	d005      	beq.n	800bed2 <HAL_LPTIM_Init+0x112>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800becc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800bed0:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 800bed2:	68fa      	ldr	r2, [r7, #12]
 800bed4:	4b3b      	ldr	r3, [pc, #236]	; (800bfc4 <HAL_LPTIM_Init+0x204>)
 800bed6:	4013      	ands	r3, r2
 800bed8:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800bee2:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.Clock.Prescaler |
 800bee8:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 800beee:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800bef0:	68fa      	ldr	r2, [r7, #12]
 800bef2:	4313      	orrs	r3, r2
 800bef4:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	685b      	ldr	r3, [r3, #4]
 800befa:	2b00      	cmp	r3, #0
 800befc:	d107      	bne.n	800bf0e <HAL_LPTIM_Init+0x14e>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800bf06:	4313      	orrs	r3, r2
 800bf08:	68fa      	ldr	r2, [r7, #12]
 800bf0a:	4313      	orrs	r3, r2
 800bf0c:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	685b      	ldr	r3, [r3, #4]
 800bf12:	2b01      	cmp	r3, #1
 800bf14:	d004      	beq.n	800bf20 <HAL_LPTIM_Init+0x160>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf1a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bf1e:	d107      	bne.n	800bf30 <HAL_LPTIM_Init+0x170>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 800bf28:	4313      	orrs	r3, r2
 800bf2a:	68fa      	ldr	r2, [r7, #12]
 800bf2c:	4313      	orrs	r3, r2
 800bf2e:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	695b      	ldr	r3, [r3, #20]
 800bf34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bf38:	4293      	cmp	r3, r2
 800bf3a:	d00a      	beq.n	800bf52 <HAL_LPTIM_Init+0x192>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800bf44:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 800bf4a:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800bf4c:	68fa      	ldr	r2, [r7, #12]
 800bf4e:	4313      	orrs	r3, r2
 800bf50:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	68fa      	ldr	r2, [r7, #12]
 800bf58:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	4a1a      	ldr	r2, [pc, #104]	; (800bfc8 <HAL_LPTIM_Init+0x208>)
 800bf60:	4293      	cmp	r3, r2
 800bf62:	d004      	beq.n	800bf6e <HAL_LPTIM_Init+0x1ae>
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	4a18      	ldr	r2, [pc, #96]	; (800bfcc <HAL_LPTIM_Init+0x20c>)
 800bf6a:	4293      	cmp	r3, r2
 800bf6c:	d108      	bne.n	800bf80 <HAL_LPTIM_Init+0x1c0>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	430a      	orrs	r2, r1
 800bf7c:	625a      	str	r2, [r3, #36]	; 0x24
 800bf7e:	e00e      	b.n	800bf9e <HAL_LPTIM_Init+0x1de>
  }
  else
  {
    if ((hlptim->Instance == LPTIM3) || (hlptim->Instance == LPTIM4))
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	4a12      	ldr	r2, [pc, #72]	; (800bfd0 <HAL_LPTIM_Init+0x210>)
 800bf86:	4293      	cmp	r3, r2
 800bf88:	d004      	beq.n	800bf94 <HAL_LPTIM_Init+0x1d4>
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	4a11      	ldr	r2, [pc, #68]	; (800bfd4 <HAL_LPTIM_Init+0x214>)
 800bf90:	4293      	cmp	r3, r2
 800bf92:	d104      	bne.n	800bf9e <HAL_LPTIM_Init+0x1de>
    {
      /* Check LPTIM3 Input1 source */
      assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

      /* Configure LPTIM3 Input1 source */
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	687a      	ldr	r2, [r7, #4]
 800bf9a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800bf9c:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }

  /* Initialize the LPTIM channels state */
  LPTIM_CHANNEL_STATE_SET_ALL(hlptim, HAL_LPTIM_CHANNEL_STATE_READY);
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	2201      	movs	r2, #1
 800bfa2:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	2201      	movs	r2, #1
 800bfaa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	2201      	movs	r2, #1
 800bfb2:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

  /* Return function status */
  return HAL_OK;
 800bfb6:	2300      	movs	r3, #0
}
 800bfb8:	4618      	mov	r0, r3
 800bfba:	3710      	adds	r7, #16
 800bfbc:	46bd      	mov	sp, r7
 800bfbe:	bd80      	pop	{r7, pc}
 800bfc0:	08001451 	.word	0x08001451
 800bfc4:	ff39f1fe 	.word	0xff39f1fe
 800bfc8:	46004400 	.word	0x46004400
 800bfcc:	40009400 	.word	0x40009400
 800bfd0:	46004800 	.word	0x46004800
 800bfd4:	46004c00 	.word	0x46004c00

0800bfd8 <HAL_LPTIM_PWM_Start_IT>:
  *            @arg LPTIM_CHANNEL_1: LPTIM Channel 1 selected
  *            @arg LPTIM_CHANNEL_2: LPTIM Channel 2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_PWM_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Channel)
{
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b082      	sub	sp, #8
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	6078      	str	r0, [r7, #4]
 800bfe0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_CCX_INSTANCE(hlptim->Instance, Channel));

  /* Check LPTIM channel state */
  if (LPTIM_CHANNEL_STATE_GET(hlptim, Channel) != HAL_LPTIM_CHANNEL_STATE_READY)
 800bfe2:	683b      	ldr	r3, [r7, #0]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d109      	bne.n	800bffc <HAL_LPTIM_PWM_Start_IT+0x24>
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800bfee:	b2db      	uxtb	r3, r3
 800bff0:	2b01      	cmp	r3, #1
 800bff2:	bf14      	ite	ne
 800bff4:	2301      	movne	r3, #1
 800bff6:	2300      	moveq	r3, #0
 800bff8:	b2db      	uxtb	r3, r3
 800bffa:	e008      	b.n	800c00e <HAL_LPTIM_PWM_Start_IT+0x36>
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800c002:	b2db      	uxtb	r3, r3
 800c004:	2b01      	cmp	r3, #1
 800c006:	bf14      	ite	ne
 800c008:	2301      	movne	r3, #1
 800c00a:	2300      	moveq	r3, #0
 800c00c:	b2db      	uxtb	r3, r3
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d001      	beq.n	800c016 <HAL_LPTIM_PWM_Start_IT+0x3e>
  {
    return HAL_ERROR;
 800c012:	2301      	movs	r3, #1
 800c014:	e08b      	b.n	800c12e <HAL_LPTIM_PWM_Start_IT+0x156>
  }

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	2202      	movs	r2, #2
 800c01a:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

  /* Set the LPTIM channel state */
  LPTIM_CHANNEL_STATE_SET(hlptim, Channel, HAL_LPTIM_CHANNEL_STATE_BUSY);
 800c01e:	683b      	ldr	r3, [r7, #0]
 800c020:	2b00      	cmp	r3, #0
 800c022:	d104      	bne.n	800c02e <HAL_LPTIM_PWM_Start_IT+0x56>
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	2202      	movs	r2, #2
 800c028:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 800c02c:	e003      	b.n	800c036 <HAL_LPTIM_PWM_Start_IT+0x5e>
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	2202      	movs	r2, #2
 800c032:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Reset WAVE bit to set PWM mode */
  hlptim->Instance->CFGR &= ~LPTIM_CFGR_WAVE;
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	68da      	ldr	r2, [r3, #12]
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800c044:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	691a      	ldr	r2, [r3, #16]
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	f042 0201 	orr.w	r2, r2, #1
 800c054:	611a      	str	r2, [r3, #16]
  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DIEROK);
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c05e:	605a      	str	r2, [r3, #4]

  switch (Channel)
 800c060:	683b      	ldr	r3, [r7, #0]
 800c062:	2b00      	cmp	r3, #0
 800c064:	d003      	beq.n	800c06e <HAL_LPTIM_PWM_Start_IT+0x96>
 800c066:	683b      	ldr	r3, [r7, #0]
 800c068:	2b01      	cmp	r3, #1
 800c06a:	d00b      	beq.n	800c084 <HAL_LPTIM_PWM_Start_IT+0xac>
      /* Enable interrupt */
      __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_CMP2OK | LPTIM_IT_CC2 | LPTIM_IT_ARROK | LPTIM_IT_ARRM | LPTIM_IT_REPOK |
                            LPTIM_IT_UPDATE);
      break;
    default:
      break;
 800c06c:	e013      	b.n	800c096 <HAL_LPTIM_PWM_Start_IT+0xbe>
      __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_CMP1OK | LPTIM_IT_CC1 | LPTIM_IT_ARROK | LPTIM_IT_ARRM | LPTIM_IT_REPOK |
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	689b      	ldr	r3, [r3, #8]
 800c074:	687a      	ldr	r2, [r7, #4]
 800c076:	6812      	ldr	r2, [r2, #0]
 800c078:	f443 73cd 	orr.w	r3, r3, #410	; 0x19a
 800c07c:	f043 0301 	orr.w	r3, r3, #1
 800c080:	6093      	str	r3, [r2, #8]
      break;
 800c082:	e008      	b.n	800c096 <HAL_LPTIM_PWM_Start_IT+0xbe>
      __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_CMP2OK | LPTIM_IT_CC2 | LPTIM_IT_ARROK | LPTIM_IT_ARRM | LPTIM_IT_REPOK |
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	6899      	ldr	r1, [r3, #8]
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	681a      	ldr	r2, [r3, #0]
 800c08e:	4b2a      	ldr	r3, [pc, #168]	; (800c138 <HAL_LPTIM_PWM_Start_IT+0x160>)
 800c090:	430b      	orrs	r3, r1
 800c092:	6093      	str	r3, [r2, #8]
      break;
 800c094:	bf00      	nop
  }

  /* Wait for the completion of the write operation to the LPTIM_DIER register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_DIEROK) == HAL_TIMEOUT)
 800c096:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 800c09a:	6878      	ldr	r0, [r7, #4]
 800c09c:	f000 fb7c 	bl	800c798 <LPTIM_WaitForFlag>
 800c0a0:	4603      	mov	r3, r0
 800c0a2:	2b03      	cmp	r3, #3
 800c0a4:	d101      	bne.n	800c0aa <HAL_LPTIM_PWM_Start_IT+0xd2>
  {
    return HAL_TIMEOUT;
 800c0a6:	2303      	movs	r3, #3
 800c0a8:	e041      	b.n	800c12e <HAL_LPTIM_PWM_Start_IT+0x156>
  }

  /* If external trigger source is used, then enable external trigger interrupt */
  if ((hlptim->Init.Trigger.Source) != LPTIM_TRIGSOURCE_SOFTWARE)
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	695b      	ldr	r3, [r3, #20]
 800c0ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c0b2:	4293      	cmp	r3, r2
 800c0b4:	d016      	beq.n	800c0e4 <HAL_LPTIM_PWM_Start_IT+0x10c>
  {
    /* Clear flag */
    __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DIEROK);
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c0be:	605a      	str	r2, [r3, #4]

    /* Enable external trigger interrupt */
    __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_EXTTRIG);
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	689a      	ldr	r2, [r3, #8]
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	f042 0204 	orr.w	r2, r2, #4
 800c0ce:	609a      	str	r2, [r3, #8]

    /* Wait for the completion of the write operation to the LPTIM_DIER register */
    if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_DIEROK) == HAL_TIMEOUT)
 800c0d0:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 800c0d4:	6878      	ldr	r0, [r7, #4]
 800c0d6:	f000 fb5f 	bl	800c798 <LPTIM_WaitForFlag>
 800c0da:	4603      	mov	r3, r0
 800c0dc:	2b03      	cmp	r3, #3
 800c0de:	d101      	bne.n	800c0e4 <HAL_LPTIM_PWM_Start_IT+0x10c>
    {
      return HAL_TIMEOUT;
 800c0e0:	2303      	movs	r3, #3
 800c0e2:	e024      	b.n	800c12e <HAL_LPTIM_PWM_Start_IT+0x156>
    }
  }

  __HAL_LPTIM_CAPTURE_COMPARE_ENABLE(hlptim, Channel);
 800c0e4:	683b      	ldr	r3, [r7, #0]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d003      	beq.n	800c0f2 <HAL_LPTIM_PWM_Start_IT+0x11a>
 800c0ea:	683b      	ldr	r3, [r7, #0]
 800c0ec:	2b01      	cmp	r3, #1
 800c0ee:	d009      	beq.n	800c104 <HAL_LPTIM_PWM_Start_IT+0x12c>
 800c0f0:	e010      	b.n	800c114 <HAL_LPTIM_PWM_Start_IT+0x13c>
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	f042 0202 	orr.w	r2, r2, #2
 800c100:	62da      	str	r2, [r3, #44]	; 0x2c
 800c102:	e007      	b.n	800c114 <HAL_LPTIM_PWM_Start_IT+0x13c>
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800c112:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	691a      	ldr	r2, [r3, #16]
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	f042 0204 	orr.w	r2, r2, #4
 800c122:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	2201      	movs	r2, #1
 800c128:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

  /* Return function status */
  return HAL_OK;
 800c12c:	2300      	movs	r3, #0
}
 800c12e:	4618      	mov	r0, r3
 800c130:	3708      	adds	r7, #8
 800c132:	46bd      	mov	sp, r7
 800c134:	bd80      	pop	{r7, pc}
 800c136:	bf00      	nop
 800c138:	00080392 	.word	0x00080392

0800c13c <HAL_LPTIM_OC_ConfigChannel>:
  *         this delay, leads to unpredictable results.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_OC_ConfigChannel(LPTIM_HandleTypeDef *hlptim, const LPTIM_OC_ConfigTypeDef *sConfig,
                                             uint32_t Channel)
{
 800c13c:	b580      	push	{r7, lr}
 800c13e:	b086      	sub	sp, #24
 800c140:	af00      	add	r7, sp, #0
 800c142:	60f8      	str	r0, [r7, #12]
 800c144:	60b9      	str	r1, [r7, #8]
 800c146:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LPTIM_CCX_INSTANCE(hlptim->Instance, Channel));
  assert_param(IS_LPTIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_LPTIM_PULSE(sConfig->Pulse));

  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	2202      	movs	r2, #2
 800c14c:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

  switch (Channel)
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	2b00      	cmp	r3, #0
 800c154:	d003      	beq.n	800c15e <HAL_LPTIM_OC_ConfigChannel+0x22>
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	2b01      	cmp	r3, #1
 800c15a:	d00b      	beq.n	800c174 <HAL_LPTIM_OC_ConfigChannel+0x38>
        return status;
      }
      break;
    }
    default:
      break;
 800c15c:	e018      	b.n	800c190 <HAL_LPTIM_OC_ConfigChannel+0x54>
      status = LPTIM_OC1_SetConfig(hlptim, sConfig);
 800c15e:	68b9      	ldr	r1, [r7, #8]
 800c160:	68f8      	ldr	r0, [r7, #12]
 800c162:	f000 fb49 	bl	800c7f8 <LPTIM_OC1_SetConfig>
 800c166:	4603      	mov	r3, r0
 800c168:	75fb      	strb	r3, [r7, #23]
      if (status != HAL_OK)
 800c16a:	7dfb      	ldrb	r3, [r7, #23]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d00c      	beq.n	800c18a <HAL_LPTIM_OC_ConfigChannel+0x4e>
        return status;
 800c170:	7dfb      	ldrb	r3, [r7, #23]
 800c172:	e012      	b.n	800c19a <HAL_LPTIM_OC_ConfigChannel+0x5e>
      status = LPTIM_OC2_SetConfig(hlptim, sConfig);
 800c174:	68b9      	ldr	r1, [r7, #8]
 800c176:	68f8      	ldr	r0, [r7, #12]
 800c178:	f000 fba4 	bl	800c8c4 <LPTIM_OC2_SetConfig>
 800c17c:	4603      	mov	r3, r0
 800c17e:	75fb      	strb	r3, [r7, #23]
      if (status != HAL_OK)
 800c180:	7dfb      	ldrb	r3, [r7, #23]
 800c182:	2b00      	cmp	r3, #0
 800c184:	d003      	beq.n	800c18e <HAL_LPTIM_OC_ConfigChannel+0x52>
        return status;
 800c186:	7dfb      	ldrb	r3, [r7, #23]
 800c188:	e007      	b.n	800c19a <HAL_LPTIM_OC_ConfigChannel+0x5e>
      break;
 800c18a:	bf00      	nop
 800c18c:	e000      	b.n	800c190 <HAL_LPTIM_OC_ConfigChannel+0x54>
      break;
 800c18e:	bf00      	nop
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	2201      	movs	r2, #1
 800c194:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

  /* Return function status */
  return HAL_OK;
 800c198:	2300      	movs	r3, #0
}
 800c19a:	4618      	mov	r0, r3
 800c19c:	3718      	adds	r7, #24
 800c19e:	46bd      	mov	sp, r7
 800c1a0:	bd80      	pop	{r7, pc}

0800c1a2 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 800c1a2:	b580      	push	{r7, lr}
 800c1a4:	b082      	sub	sp, #8
 800c1a6:	af00      	add	r7, sp, #0
 800c1a8:	6078      	str	r0, [r7, #4]
  /* Capture Compare 1 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC1) != RESET)
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	f003 0301 	and.w	r3, r3, #1
 800c1b4:	2b01      	cmp	r3, #1
 800c1b6:	d123      	bne.n	800c200 <HAL_LPTIM_IRQHandler+0x5e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC1) != RESET)
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	689b      	ldr	r3, [r3, #8]
 800c1be:	f003 0301 	and.w	r3, r3, #1
 800c1c2:	2b01      	cmp	r3, #1
 800c1c4:	d11c      	bne.n	800c200 <HAL_LPTIM_IRQHandler+0x5e>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC1);
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	2201      	movs	r2, #1
 800c1cc:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_1;
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	2201      	movs	r2, #1
 800c1d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* Input capture event */
      if ((hlptim->Instance->CCMR1 & LPTIM_CCMR1_CC1SEL) != 0x00U)
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1dc:	f003 0301 	and.w	r3, r3, #1
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d005      	beq.n	800c1f0 <HAL_LPTIM_IRQHandler+0x4e>
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->IC_CaptureCallback(hlptim);
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c1ea:	6878      	ldr	r0, [r7, #4]
 800c1ec:	4798      	blx	r3
 800c1ee:	e003      	b.n	800c1f8 <HAL_LPTIM_IRQHandler+0x56>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->CompareMatchCallback(hlptim);
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c1f4:	6878      	ldr	r0, [r7, #4]
 800c1f6:	4798      	blx	r3
#else
        HAL_LPTIM_CompareMatchCallback(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      }
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	2200      	movs	r2, #0
 800c1fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
  }

  /* Capture Compare 2 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC2) != RESET)
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c20a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c20e:	d125      	bne.n	800c25c <HAL_LPTIM_IRQHandler+0xba>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC2) != RESET)
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	689b      	ldr	r3, [r3, #8]
 800c216:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c21a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c21e:	d11d      	bne.n	800c25c <HAL_LPTIM_IRQHandler+0xba>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC2);
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c228:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_2;
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	2202      	movs	r2, #2
 800c22e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* Input capture event */
      if ((hlptim->Instance->CCMR1 & LPTIM_CCMR1_CC2SEL) != 0x00U)
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c238:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d005      	beq.n	800c24c <HAL_LPTIM_IRQHandler+0xaa>
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->IC_CaptureCallback(hlptim);
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c246:	6878      	ldr	r0, [r7, #4]
 800c248:	4798      	blx	r3
 800c24a:	e003      	b.n	800c254 <HAL_LPTIM_IRQHandler+0xb2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->CompareMatchCallback(hlptim);
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c250:	6878      	ldr	r0, [r7, #4]
 800c252:	4798      	blx	r3
#else
        HAL_LPTIM_CompareMatchCallback(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      }
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	2200      	movs	r2, #0
 800c258:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
  }

  /* Over Capture 1 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC1O) != RESET)
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c266:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c26a:	d119      	bne.n	800c2a0 <HAL_LPTIM_IRQHandler+0xfe>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC1O) != RESET)
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	689b      	ldr	r3, [r3, #8]
 800c272:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c276:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c27a:	d111      	bne.n	800c2a0 <HAL_LPTIM_IRQHandler+0xfe>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC1O);
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c284:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_1;
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	2201      	movs	r2, #1
 800c28a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* Over capture event */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->IC_OverCaptureCallback(hlptim);
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c294:	6878      	ldr	r0, [r7, #4]
 800c296:	4798      	blx	r3
#else
      HAL_LPTIM_IC_OverCaptureCallback(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	2200      	movs	r2, #0
 800c29c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
  }

  /* Over Capture 2 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC2O) != RESET)
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c2aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c2ae:	d119      	bne.n	800c2e4 <HAL_LPTIM_IRQHandler+0x142>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC2O) != RESET)
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	689b      	ldr	r3, [r3, #8]
 800c2b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c2ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c2be:	d111      	bne.n	800c2e4 <HAL_LPTIM_IRQHandler+0x142>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC2O);
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800c2c8:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_2;
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	2202      	movs	r2, #2
 800c2ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* Over capture event */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->IC_OverCaptureCallback(hlptim);
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c2d8:	6878      	ldr	r0, [r7, #4]
 800c2da:	4798      	blx	r3
#else
      HAL_LPTIM_IC_OverCaptureCallback(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	2200      	movs	r2, #0
 800c2e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	f003 0302 	and.w	r3, r3, #2
 800c2ee:	2b02      	cmp	r3, #2
 800c2f0:	d10e      	bne.n	800c310 <HAL_LPTIM_IRQHandler+0x16e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	689b      	ldr	r3, [r3, #8]
 800c2f8:	f003 0302 	and.w	r3, r3, #2
 800c2fc:	2b02      	cmp	r3, #2
 800c2fe:	d107      	bne.n	800c310 <HAL_LPTIM_IRQHandler+0x16e>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	2202      	movs	r2, #2
 800c306:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c30c:	6878      	ldr	r0, [r7, #4]
 800c30e:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	f003 0304 	and.w	r3, r3, #4
 800c31a:	2b04      	cmp	r3, #4
 800c31c:	d10e      	bne.n	800c33c <HAL_LPTIM_IRQHandler+0x19a>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	689b      	ldr	r3, [r3, #8]
 800c324:	f003 0304 	and.w	r3, r3, #4
 800c328:	2b04      	cmp	r3, #4
 800c32a:	d107      	bne.n	800c33c <HAL_LPTIM_IRQHandler+0x19a>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	2204      	movs	r2, #4
 800c332:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c338:	6878      	ldr	r0, [r7, #4]
 800c33a:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMP1OK) != RESET)
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	f003 0308 	and.w	r3, r3, #8
 800c346:	2b08      	cmp	r3, #8
 800c348:	d112      	bne.n	800c370 <HAL_LPTIM_IRQHandler+0x1ce>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMP1OK) != RESET)
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	689b      	ldr	r3, [r3, #8]
 800c350:	f003 0308 	and.w	r3, r3, #8
 800c354:	2b08      	cmp	r3, #8
 800c356:	d10b      	bne.n	800c370 <HAL_LPTIM_IRQHandler+0x1ce>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMP1OK);
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	2208      	movs	r2, #8
 800c35e:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_1;
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	2201      	movs	r2, #1
 800c364:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c36c:	6878      	ldr	r0, [r7, #4]
 800c36e:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMP2OK) != RESET)
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c37a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800c37e:	d114      	bne.n	800c3aa <HAL_LPTIM_IRQHandler+0x208>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMP2OK) != RESET)
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	689b      	ldr	r3, [r3, #8]
 800c386:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c38a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800c38e:	d10c      	bne.n	800c3aa <HAL_LPTIM_IRQHandler+0x208>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMP2OK);
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800c398:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_2;
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	2202      	movs	r2, #2
 800c39e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c3a6:	6878      	ldr	r0, [r7, #4]
 800c3a8:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	f003 0310 	and.w	r3, r3, #16
 800c3b4:	2b10      	cmp	r3, #16
 800c3b6:	d10e      	bne.n	800c3d6 <HAL_LPTIM_IRQHandler+0x234>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	689b      	ldr	r3, [r3, #8]
 800c3be:	f003 0310 	and.w	r3, r3, #16
 800c3c2:	2b10      	cmp	r3, #16
 800c3c4:	d107      	bne.n	800c3d6 <HAL_LPTIM_IRQHandler+0x234>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	2210      	movs	r2, #16
 800c3cc:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c3d2:	6878      	ldr	r0, [r7, #4]
 800c3d4:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	f003 0320 	and.w	r3, r3, #32
 800c3e0:	2b20      	cmp	r3, #32
 800c3e2:	d10e      	bne.n	800c402 <HAL_LPTIM_IRQHandler+0x260>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	689b      	ldr	r3, [r3, #8]
 800c3ea:	f003 0320 	and.w	r3, r3, #32
 800c3ee:	2b20      	cmp	r3, #32
 800c3f0:	d107      	bne.n	800c402 <HAL_LPTIM_IRQHandler+0x260>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	2220      	movs	r2, #32
 800c3f8:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c3fe:	6878      	ldr	r0, [r7, #4]
 800c400:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c40c:	2b40      	cmp	r3, #64	; 0x40
 800c40e:	d10e      	bne.n	800c42e <HAL_LPTIM_IRQHandler+0x28c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	689b      	ldr	r3, [r3, #8]
 800c416:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c41a:	2b40      	cmp	r3, #64	; 0x40
 800c41c:	d107      	bne.n	800c42e <HAL_LPTIM_IRQHandler+0x28c>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	2240      	movs	r2, #64	; 0x40
 800c424:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c42a:	6878      	ldr	r0, [r7, #4]
 800c42c:	4798      	blx	r3
    }
  }

  /* Repetition counter underflowed (or contains zero) and the LPTIM counter
     overflowed */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UPDATE) != RESET)
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c438:	2b80      	cmp	r3, #128	; 0x80
 800c43a:	d10e      	bne.n	800c45a <HAL_LPTIM_IRQHandler+0x2b8>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UPDATE) != RESET)
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	689b      	ldr	r3, [r3, #8]
 800c442:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c446:	2b80      	cmp	r3, #128	; 0x80
 800c448:	d107      	bne.n	800c45a <HAL_LPTIM_IRQHandler+0x2b8>
    {
      /* Clear update event flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UPDATE);
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	2280      	movs	r2, #128	; 0x80
 800c450:	605a      	str	r2, [r3, #4]

      /* Update event Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->UpdateEventCallback(hlptim);
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c456:	6878      	ldr	r0, [r7, #4]
 800c458:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Successful APB bus write to repetition counter register */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_REPOK) != RESET)
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c464:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c468:	d110      	bne.n	800c48c <HAL_LPTIM_IRQHandler+0x2ea>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_REPOK) != RESET)
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	689b      	ldr	r3, [r3, #8]
 800c470:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c474:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c478:	d108      	bne.n	800c48c <HAL_LPTIM_IRQHandler+0x2ea>
    {
      /* Clear successful APB bus write to repetition counter flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c482:	605a      	str	r2, [r3, #4]

      /* Successful APB bus write to repetition counter Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->RepCounterWriteCallback(hlptim);
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c488:	6878      	ldr	r0, [r7, #4]
 800c48a:	4798      	blx	r3
#else
      HAL_LPTIM_RepCounterWriteCallback(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 800c48c:	bf00      	nop
 800c48e:	3708      	adds	r7, #8
 800c490:	46bd      	mov	sp, r7
 800c492:	bd80      	pop	{r7, pc}

0800c494 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 800c494:	b480      	push	{r7}
 800c496:	b083      	sub	sp, #12
 800c498:	af00      	add	r7, sp, #0
 800c49a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 800c49c:	bf00      	nop
 800c49e:	370c      	adds	r7, #12
 800c4a0:	46bd      	mov	sp, r7
 800c4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a6:	4770      	bx	lr

0800c4a8 <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 800c4a8:	b480      	push	{r7}
 800c4aa:	b083      	sub	sp, #12
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 800c4b0:	bf00      	nop
 800c4b2:	370c      	adds	r7, #12
 800c4b4:	46bd      	mov	sp, r7
 800c4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ba:	4770      	bx	lr

0800c4bc <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 800c4bc:	b480      	push	{r7}
 800c4be:	b083      	sub	sp, #12
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 800c4c4:	bf00      	nop
 800c4c6:	370c      	adds	r7, #12
 800c4c8:	46bd      	mov	sp, r7
 800c4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ce:	4770      	bx	lr

0800c4d0 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 800c4d0:	b480      	push	{r7}
 800c4d2:	b083      	sub	sp, #12
 800c4d4:	af00      	add	r7, sp, #0
 800c4d6:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 800c4d8:	bf00      	nop
 800c4da:	370c      	adds	r7, #12
 800c4dc:	46bd      	mov	sp, r7
 800c4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e2:	4770      	bx	lr

0800c4e4 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 800c4e4:	b480      	push	{r7}
 800c4e6:	b083      	sub	sp, #12
 800c4e8:	af00      	add	r7, sp, #0
 800c4ea:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 800c4ec:	bf00      	nop
 800c4ee:	370c      	adds	r7, #12
 800c4f0:	46bd      	mov	sp, r7
 800c4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f6:	4770      	bx	lr

0800c4f8 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 800c4f8:	b480      	push	{r7}
 800c4fa:	b083      	sub	sp, #12
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 800c500:	bf00      	nop
 800c502:	370c      	adds	r7, #12
 800c504:	46bd      	mov	sp, r7
 800c506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c50a:	4770      	bx	lr

0800c50c <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 800c50c:	b480      	push	{r7}
 800c50e:	b083      	sub	sp, #12
 800c510:	af00      	add	r7, sp, #0
 800c512:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 800c514:	bf00      	nop
 800c516:	370c      	adds	r7, #12
 800c518:	46bd      	mov	sp, r7
 800c51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c51e:	4770      	bx	lr

0800c520 <HAL_LPTIM_UpdateEventCallback>:
  * @brief Repetition counter underflowed (or contains zero) and LPTIM counter overflowed callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_UpdateEventCallback(LPTIM_HandleTypeDef *hlptim)
{
 800c520:	b480      	push	{r7}
 800c522:	b083      	sub	sp, #12
 800c524:	af00      	add	r7, sp, #0
 800c526:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_UpdateEventCallback could be implemented in the user file
   */
}
 800c528:	bf00      	nop
 800c52a:	370c      	adds	r7, #12
 800c52c:	46bd      	mov	sp, r7
 800c52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c532:	4770      	bx	lr

0800c534 <HAL_LPTIM_RepCounterWriteCallback>:
  * @brief  Successful APB bus write to repetition counter register callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_RepCounterWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 800c534:	b480      	push	{r7}
 800c536:	b083      	sub	sp, #12
 800c538:	af00      	add	r7, sp, #0
 800c53a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_RepCounterWriteCallback could be implemented in the user file
   */
}
 800c53c:	bf00      	nop
 800c53e:	370c      	adds	r7, #12
 800c540:	46bd      	mov	sp, r7
 800c542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c546:	4770      	bx	lr

0800c548 <HAL_LPTIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_IC_CaptureCallback(LPTIM_HandleTypeDef *hlptim)
{
 800c548:	b480      	push	{r7}
 800c54a:	b083      	sub	sp, #12
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c550:	bf00      	nop
 800c552:	370c      	adds	r7, #12
 800c554:	46bd      	mov	sp, r7
 800c556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c55a:	4770      	bx	lr

0800c55c <HAL_LPTIM_IC_OverCaptureCallback>:
  * @brief  Over Capture callback in non-blocking mode
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_IC_OverCaptureCallback(LPTIM_HandleTypeDef *hlptim)
{
 800c55c:	b480      	push	{r7}
 800c55e:	b083      	sub	sp, #12
 800c560:	af00      	add	r7, sp, #0
 800c562:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_IC_OverCaptureCallback could be implemented in the user file
   */
}
 800c564:	bf00      	nop
 800c566:	370c      	adds	r7, #12
 800c568:	46bd      	mov	sp, r7
 800c56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56e:	4770      	bx	lr

0800c570 <HAL_LPTIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  hlptim LPTIM IC handle
  * @retval None
  */
__weak void HAL_LPTIM_IC_CaptureHalfCpltCallback(LPTIM_HandleTypeDef *hlptim)
{
 800c570:	b480      	push	{r7}
 800c572:	b083      	sub	sp, #12
 800c574:	af00      	add	r7, sp, #0
 800c576:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800c578:	bf00      	nop
 800c57a:	370c      	adds	r7, #12
 800c57c:	46bd      	mov	sp, r7
 800c57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c582:	4770      	bx	lr

0800c584 <HAL_LPTIM_UpdateEventHalfCpltCallback>:
  * @brief  Update event half complete callback in non-blocking mode
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_UpdateEventHalfCpltCallback(LPTIM_HandleTypeDef *hlptim)
{
 800c584:	b480      	push	{r7}
 800c586:	b083      	sub	sp, #12
 800c588:	af00      	add	r7, sp, #0
 800c58a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_UpdateEventHalfCpltCallback could be implemented in the user file
   */
}
 800c58c:	bf00      	nop
 800c58e:	370c      	adds	r7, #12
 800c590:	46bd      	mov	sp, r7
 800c592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c596:	4770      	bx	lr

0800c598 <HAL_LPTIM_ErrorCallback>:
  * @brief  Error callback in non-blocking mode
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_ErrorCallback(LPTIM_HandleTypeDef *hlptim)
{
 800c598:	b480      	push	{r7}
 800c59a:	b083      	sub	sp, #12
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_ErrorCallback could be implemented in the user file
   */
}
 800c5a0:	bf00      	nop
 800c5a2:	370c      	adds	r7, #12
 800c5a4:	46bd      	mov	sp, r7
 800c5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5aa:	4770      	bx	lr

0800c5ac <HAL_LPTIM_RegisterCallback>:
  * @retval status
  */
HAL_StatusTypeDef HAL_LPTIM_RegisterCallback(LPTIM_HandleTypeDef        *hlptim,
                                             HAL_LPTIM_CallbackIDTypeDef CallbackID,
                                             pLPTIM_CallbackTypeDef      pCallback)
{
 800c5ac:	b480      	push	{r7}
 800c5ae:	b087      	sub	sp, #28
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	60f8      	str	r0, [r7, #12]
 800c5b4:	460b      	mov	r3, r1
 800c5b6:	607a      	str	r2, [r7, #4]
 800c5b8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800c5ba:	2300      	movs	r3, #0
 800c5bc:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d101      	bne.n	800c5c8 <HAL_LPTIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 800c5c4:	2301      	movs	r3, #1
 800c5c6:	e08c      	b.n	800c6e2 <HAL_LPTIM_RegisterCallback+0x136>
  }

  if (hlptim->State == HAL_LPTIM_STATE_READY)
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800c5ce:	b2db      	uxtb	r3, r3
 800c5d0:	2b01      	cmp	r3, #1
 800c5d2:	d16c      	bne.n	800c6ae <HAL_LPTIM_RegisterCallback+0x102>
  {
    switch (CallbackID)
 800c5d4:	7afb      	ldrb	r3, [r7, #11]
 800c5d6:	2b0f      	cmp	r3, #15
 800c5d8:	d866      	bhi.n	800c6a8 <HAL_LPTIM_RegisterCallback+0xfc>
 800c5da:	a201      	add	r2, pc, #4	; (adr r2, 800c5e0 <HAL_LPTIM_RegisterCallback+0x34>)
 800c5dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5e0:	0800c621 	.word	0x0800c621
 800c5e4:	0800c629 	.word	0x0800c629
 800c5e8:	0800c631 	.word	0x0800c631
 800c5ec:	0800c639 	.word	0x0800c639
 800c5f0:	0800c641 	.word	0x0800c641
 800c5f4:	0800c649 	.word	0x0800c649
 800c5f8:	0800c651 	.word	0x0800c651
 800c5fc:	0800c659 	.word	0x0800c659
 800c600:	0800c661 	.word	0x0800c661
 800c604:	0800c669 	.word	0x0800c669
 800c608:	0800c671 	.word	0x0800c671
 800c60c:	0800c679 	.word	0x0800c679
 800c610:	0800c681 	.word	0x0800c681
 800c614:	0800c68b 	.word	0x0800c68b
 800c618:	0800c695 	.word	0x0800c695
 800c61c:	0800c69f 	.word	0x0800c69f
    {
      case HAL_LPTIM_MSPINIT_CB_ID :
        hlptim->MspInitCallback = pCallback;
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	687a      	ldr	r2, [r7, #4]
 800c624:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800c626:	e05b      	b.n	800c6e0 <HAL_LPTIM_RegisterCallback+0x134>

      case HAL_LPTIM_MSPDEINIT_CB_ID :
        hlptim->MspDeInitCallback = pCallback;
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	687a      	ldr	r2, [r7, #4]
 800c62c:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800c62e:	e057      	b.n	800c6e0 <HAL_LPTIM_RegisterCallback+0x134>

      case HAL_LPTIM_COMPARE_MATCH_CB_ID :
        hlptim->CompareMatchCallback = pCallback;
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	687a      	ldr	r2, [r7, #4]
 800c634:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 800c636:	e053      	b.n	800c6e0 <HAL_LPTIM_RegisterCallback+0x134>

      case HAL_LPTIM_AUTORELOAD_MATCH_CB_ID :
        hlptim->AutoReloadMatchCallback = pCallback;
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	687a      	ldr	r2, [r7, #4]
 800c63c:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 800c63e:	e04f      	b.n	800c6e0 <HAL_LPTIM_RegisterCallback+0x134>

      case HAL_LPTIM_TRIGGER_CB_ID :
        hlptim->TriggerCallback = pCallback;
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	687a      	ldr	r2, [r7, #4]
 800c644:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800c646:	e04b      	b.n	800c6e0 <HAL_LPTIM_RegisterCallback+0x134>

      case HAL_LPTIM_COMPARE_WRITE_CB_ID :
        hlptim->CompareWriteCallback = pCallback;
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	687a      	ldr	r2, [r7, #4]
 800c64c:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 800c64e:	e047      	b.n	800c6e0 <HAL_LPTIM_RegisterCallback+0x134>

      case HAL_LPTIM_AUTORELOAD_WRITE_CB_ID :
        hlptim->AutoReloadWriteCallback = pCallback;
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	687a      	ldr	r2, [r7, #4]
 800c654:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 800c656:	e043      	b.n	800c6e0 <HAL_LPTIM_RegisterCallback+0x134>

      case HAL_LPTIM_DIRECTION_UP_CB_ID :
        hlptim->DirectionUpCallback = pCallback;
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	687a      	ldr	r2, [r7, #4]
 800c65c:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800c65e:	e03f      	b.n	800c6e0 <HAL_LPTIM_RegisterCallback+0x134>

      case HAL_LPTIM_DIRECTION_DOWN_CB_ID :
        hlptim->DirectionDownCallback = pCallback;
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	687a      	ldr	r2, [r7, #4]
 800c664:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800c666:	e03b      	b.n	800c6e0 <HAL_LPTIM_RegisterCallback+0x134>

      case HAL_LPTIM_UPDATE_EVENT_CB_ID :
        hlptim->UpdateEventCallback = pCallback;
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	687a      	ldr	r2, [r7, #4]
 800c66c:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 800c66e:	e037      	b.n	800c6e0 <HAL_LPTIM_RegisterCallback+0x134>

      case HAL_LPTIM_REP_COUNTER_WRITE_CB_ID :
        hlptim->RepCounterWriteCallback = pCallback;
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	687a      	ldr	r2, [r7, #4]
 800c674:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 800c676:	e033      	b.n	800c6e0 <HAL_LPTIM_RegisterCallback+0x134>

      case HAL_LPTIM_UPDATE_EVENT_HALF_CB_ID :
        hlptim->UpdateEventHalfCpltCallback = pCallback;
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	687a      	ldr	r2, [r7, #4]
 800c67c:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 800c67e:	e02f      	b.n	800c6e0 <HAL_LPTIM_RegisterCallback+0x134>

      case HAL_LPTIM_ERROR_CB_ID :
        hlptim->ErrorCallback = pCallback;
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	687a      	ldr	r2, [r7, #4]
 800c684:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 800c688:	e02a      	b.n	800c6e0 <HAL_LPTIM_RegisterCallback+0x134>

      case HAL_LPTIM_IC_CAPTURE_CB_ID :
        hlptim->IC_CaptureCallback = pCallback;
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	687a      	ldr	r2, [r7, #4]
 800c68e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 800c692:	e025      	b.n	800c6e0 <HAL_LPTIM_RegisterCallback+0x134>

      case HAL_LPTIM_IC_CAPTURE_HALF_CB_ID :
        hlptim->IC_CaptureHalfCpltCallback = pCallback;
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	687a      	ldr	r2, [r7, #4]
 800c698:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 800c69c:	e020      	b.n	800c6e0 <HAL_LPTIM_RegisterCallback+0x134>

      case HAL_LPTIM_OVER_CAPTURE_CB_ID :
        hlptim->IC_OverCaptureCallback = pCallback;
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	687a      	ldr	r2, [r7, #4]
 800c6a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 800c6a6:	e01b      	b.n	800c6e0 <HAL_LPTIM_RegisterCallback+0x134>

      default :
        /* Return error status */
        status =  HAL_ERROR;
 800c6a8:	2301      	movs	r3, #1
 800c6aa:	75fb      	strb	r3, [r7, #23]
        break;
 800c6ac:	e018      	b.n	800c6e0 <HAL_LPTIM_RegisterCallback+0x134>
    }
  }
  else if (hlptim->State == HAL_LPTIM_STATE_RESET)
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800c6b4:	b2db      	uxtb	r3, r3
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d110      	bne.n	800c6dc <HAL_LPTIM_RegisterCallback+0x130>
  {
    switch (CallbackID)
 800c6ba:	7afb      	ldrb	r3, [r7, #11]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d002      	beq.n	800c6c6 <HAL_LPTIM_RegisterCallback+0x11a>
 800c6c0:	2b01      	cmp	r3, #1
 800c6c2:	d004      	beq.n	800c6ce <HAL_LPTIM_RegisterCallback+0x122>
 800c6c4:	e007      	b.n	800c6d6 <HAL_LPTIM_RegisterCallback+0x12a>
    {
      case HAL_LPTIM_MSPINIT_CB_ID :
        hlptim->MspInitCallback = pCallback;
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	687a      	ldr	r2, [r7, #4]
 800c6ca:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800c6cc:	e008      	b.n	800c6e0 <HAL_LPTIM_RegisterCallback+0x134>

      case HAL_LPTIM_MSPDEINIT_CB_ID :
        hlptim->MspDeInitCallback = pCallback;
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	687a      	ldr	r2, [r7, #4]
 800c6d2:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800c6d4:	e004      	b.n	800c6e0 <HAL_LPTIM_RegisterCallback+0x134>

      default :
        /* Return error status */
        status =  HAL_ERROR;
 800c6d6:	2301      	movs	r3, #1
 800c6d8:	75fb      	strb	r3, [r7, #23]
        break;
 800c6da:	e001      	b.n	800c6e0 <HAL_LPTIM_RegisterCallback+0x134>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 800c6dc:	2301      	movs	r3, #1
 800c6de:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800c6e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c6e2:	4618      	mov	r0, r3
 800c6e4:	371c      	adds	r7, #28
 800c6e6:	46bd      	mov	sp, r7
 800c6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ec:	4770      	bx	lr
 800c6ee:	bf00      	nop

0800c6f0 <LPTIM_ResetCallback>:
  * @param  lptim pointer to a LPTIM_HandleTypeDef structure that contains
  *                the configuration information for LPTIM module.
  * @retval None
  */
static void LPTIM_ResetCallback(LPTIM_HandleTypeDef *lptim)
{
 800c6f0:	b480      	push	{r7}
 800c6f2:	b083      	sub	sp, #12
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	6078      	str	r0, [r7, #4]
  /* Reset the LPTIM callback to the legacy weak callbacks */
  lptim->CompareMatchCallback    = HAL_LPTIM_CompareMatchCallback;
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	4a19      	ldr	r2, [pc, #100]	; (800c760 <LPTIM_ResetCallback+0x70>)
 800c6fc:	659a      	str	r2, [r3, #88]	; 0x58
  lptim->AutoReloadMatchCallback = HAL_LPTIM_AutoReloadMatchCallback;
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	4a18      	ldr	r2, [pc, #96]	; (800c764 <LPTIM_ResetCallback+0x74>)
 800c702:	65da      	str	r2, [r3, #92]	; 0x5c
  lptim->TriggerCallback         = HAL_LPTIM_TriggerCallback;
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	4a18      	ldr	r2, [pc, #96]	; (800c768 <LPTIM_ResetCallback+0x78>)
 800c708:	661a      	str	r2, [r3, #96]	; 0x60
  lptim->CompareWriteCallback    = HAL_LPTIM_CompareWriteCallback;
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	4a17      	ldr	r2, [pc, #92]	; (800c76c <LPTIM_ResetCallback+0x7c>)
 800c70e:	665a      	str	r2, [r3, #100]	; 0x64
  lptim->AutoReloadWriteCallback = HAL_LPTIM_AutoReloadWriteCallback;
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	4a17      	ldr	r2, [pc, #92]	; (800c770 <LPTIM_ResetCallback+0x80>)
 800c714:	669a      	str	r2, [r3, #104]	; 0x68
  lptim->DirectionUpCallback     = HAL_LPTIM_DirectionUpCallback;
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	4a16      	ldr	r2, [pc, #88]	; (800c774 <LPTIM_ResetCallback+0x84>)
 800c71a:	66da      	str	r2, [r3, #108]	; 0x6c
  lptim->DirectionDownCallback   = HAL_LPTIM_DirectionDownCallback;
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	4a16      	ldr	r2, [pc, #88]	; (800c778 <LPTIM_ResetCallback+0x88>)
 800c720:	671a      	str	r2, [r3, #112]	; 0x70
  lptim->UpdateEventCallback = HAL_LPTIM_UpdateEventCallback;
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	4a15      	ldr	r2, [pc, #84]	; (800c77c <LPTIM_ResetCallback+0x8c>)
 800c726:	675a      	str	r2, [r3, #116]	; 0x74
  lptim->RepCounterWriteCallback = HAL_LPTIM_RepCounterWriteCallback;
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	4a15      	ldr	r2, [pc, #84]	; (800c780 <LPTIM_ResetCallback+0x90>)
 800c72c:	679a      	str	r2, [r3, #120]	; 0x78
  lptim->UpdateEventHalfCpltCallback = HAL_LPTIM_UpdateEventHalfCpltCallback;
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	4a14      	ldr	r2, [pc, #80]	; (800c784 <LPTIM_ResetCallback+0x94>)
 800c732:	67da      	str	r2, [r3, #124]	; 0x7c
  lptim->IC_CaptureCallback      = HAL_LPTIM_IC_CaptureCallback;
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	4a14      	ldr	r2, [pc, #80]	; (800c788 <LPTIM_ResetCallback+0x98>)
 800c738:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  lptim->IC_CaptureHalfCpltCallback = HAL_LPTIM_IC_CaptureHalfCpltCallback;
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	4a13      	ldr	r2, [pc, #76]	; (800c78c <LPTIM_ResetCallback+0x9c>)
 800c740:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  lptim->IC_OverCaptureCallback  = HAL_LPTIM_IC_OverCaptureCallback;
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	4a12      	ldr	r2, [pc, #72]	; (800c790 <LPTIM_ResetCallback+0xa0>)
 800c748:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  lptim->ErrorCallback           = HAL_LPTIM_ErrorCallback;
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	4a11      	ldr	r2, [pc, #68]	; (800c794 <LPTIM_ResetCallback+0xa4>)
 800c750:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 800c754:	bf00      	nop
 800c756:	370c      	adds	r7, #12
 800c758:	46bd      	mov	sp, r7
 800c75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c75e:	4770      	bx	lr
 800c760:	0800c495 	.word	0x0800c495
 800c764:	0800c4a9 	.word	0x0800c4a9
 800c768:	0800c4bd 	.word	0x0800c4bd
 800c76c:	0800c4d1 	.word	0x0800c4d1
 800c770:	0800c4e5 	.word	0x0800c4e5
 800c774:	0800c4f9 	.word	0x0800c4f9
 800c778:	0800c50d 	.word	0x0800c50d
 800c77c:	0800c521 	.word	0x0800c521
 800c780:	0800c535 	.word	0x0800c535
 800c784:	0800c585 	.word	0x0800c585
 800c788:	0800c549 	.word	0x0800c549
 800c78c:	0800c571 	.word	0x0800c571
 800c790:	0800c55d 	.word	0x0800c55d
 800c794:	0800c599 	.word	0x0800c599

0800c798 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(const LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 800c798:	b480      	push	{r7}
 800c79a:	b085      	sub	sp, #20
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	6078      	str	r0, [r7, #4]
 800c7a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 800c7a2:	2300      	movs	r3, #0
 800c7a4:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 800c7a6:	4b12      	ldr	r3, [pc, #72]	; (800c7f0 <LPTIM_WaitForFlag+0x58>)
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	4a12      	ldr	r2, [pc, #72]	; (800c7f4 <LPTIM_WaitForFlag+0x5c>)
 800c7ac:	fba2 2303 	umull	r2, r3, r2, r3
 800c7b0:	0b9b      	lsrs	r3, r3, #14
 800c7b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c7b6:	fb02 f303 	mul.w	r3, r2, r3
 800c7ba:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 800c7bc:	68bb      	ldr	r3, [r7, #8]
 800c7be:	3b01      	subs	r3, #1
 800c7c0:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 800c7c2:	68bb      	ldr	r3, [r7, #8]
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d101      	bne.n	800c7cc <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 800c7c8:	2303      	movs	r3, #3
 800c7ca:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	681a      	ldr	r2, [r3, #0]
 800c7d2:	683b      	ldr	r3, [r7, #0]
 800c7d4:	4013      	ands	r3, r2
 800c7d6:	683a      	ldr	r2, [r7, #0]
 800c7d8:	429a      	cmp	r2, r3
 800c7da:	d002      	beq.n	800c7e2 <LPTIM_WaitForFlag+0x4a>
 800c7dc:	68bb      	ldr	r3, [r7, #8]
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d1ec      	bne.n	800c7bc <LPTIM_WaitForFlag+0x24>

  return result;
 800c7e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7e4:	4618      	mov	r0, r3
 800c7e6:	3714      	adds	r7, #20
 800c7e8:	46bd      	mov	sp, r7
 800c7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ee:	4770      	bx	lr
 800c7f0:	200000f4 	.word	0x200000f4
 800c7f4:	d1b71759 	.word	0xd1b71759

0800c7f8 <LPTIM_OC1_SetConfig>:
  *                the configuration information for LPTIM module.
  * @param  sConfig The output configuration structure
  * @retval None
  */
static HAL_StatusTypeDef LPTIM_OC1_SetConfig(LPTIM_HandleTypeDef *hlptim, const LPTIM_OC_ConfigTypeDef *sConfig)
{
 800c7f8:	b580      	push	{r7, lr}
 800c7fa:	b084      	sub	sp, #16
 800c7fc:	af00      	add	r7, sp, #0
 800c7fe:	6078      	str	r0, [r7, #4]
 800c800:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpcfgr;

  tmpccmr1 = hlptim->Instance->CCMR1;
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c808:	60fb      	str	r3, [r7, #12]
  tmpccmr1 &= ~(LPTIM_CCMR1_CC1P_Msk | LPTIM_CCMR1_CC1SEL_Msk);
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	f023 030d 	bic.w	r3, r3, #13
 800c810:	60fb      	str	r3, [r7, #12]

  if (hlptim->Instance == LPTIM4)
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	4a2a      	ldr	r2, [pc, #168]	; (800c8c0 <LPTIM_OC1_SetConfig+0xc8>)
 800c818:	4293      	cmp	r3, r2
 800c81a:	d112      	bne.n	800c842 <LPTIM_OC1_SetConfig+0x4a>
  {
    tmpcfgr = hlptim->Instance->CFGR;
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	68db      	ldr	r3, [r3, #12]
 800c822:	60bb      	str	r3, [r7, #8]
    tmpcfgr &= ~LPTIM_CFGR_WAVPOL_Msk;
 800c824:	68bb      	ldr	r3, [r7, #8]
 800c826:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c82a:	60bb      	str	r3, [r7, #8]
    tmpcfgr |= sConfig->OCPolarity << LPTIM_CFGR_WAVPOL_Pos;
 800c82c:	683b      	ldr	r3, [r7, #0]
 800c82e:	685b      	ldr	r3, [r3, #4]
 800c830:	055b      	lsls	r3, r3, #21
 800c832:	68ba      	ldr	r2, [r7, #8]
 800c834:	4313      	orrs	r3, r2
 800c836:	60bb      	str	r3, [r7, #8]

    /* Write to CFGR register */
    hlptim->Instance->CFGR = tmpcfgr;
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	68ba      	ldr	r2, [r7, #8]
 800c83e:	60da      	str	r2, [r3, #12]
 800c840:	e005      	b.n	800c84e <LPTIM_OC1_SetConfig+0x56>
  }
  else
  {
    tmpccmr1 |= sConfig->OCPolarity << LPTIM_CCMR1_CC1P_Pos;
 800c842:	683b      	ldr	r3, [r7, #0]
 800c844:	685b      	ldr	r3, [r3, #4]
 800c846:	009b      	lsls	r3, r3, #2
 800c848:	68fa      	ldr	r2, [r7, #12]
 800c84a:	4313      	orrs	r3, r2
 800c84c:	60fb      	str	r3, [r7, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	691a      	ldr	r2, [r3, #16]
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	f042 0201 	orr.w	r2, r2, #1
 800c85c:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMP1OK);
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	2208      	movs	r2, #8
 800c864:	605a      	str	r2, [r3, #4]

  /* Write to CCR1 register */
  __HAL_LPTIM_COMPARE_SET(hlptim, LPTIM_CHANNEL_1, sConfig->Pulse);
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	683a      	ldr	r2, [r7, #0]
 800c86c:	6812      	ldr	r2, [r2, #0]
 800c86e:	615a      	str	r2, [r3, #20]

  /* Wait for the completion of the write operation to the LPTIM_CCR1 register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMP1OK) == HAL_TIMEOUT)
 800c870:	2108      	movs	r1, #8
 800c872:	6878      	ldr	r0, [r7, #4]
 800c874:	f7ff ff90 	bl	800c798 <LPTIM_WaitForFlag>
 800c878:	4603      	mov	r3, r0
 800c87a:	2b03      	cmp	r3, #3
 800c87c:	d101      	bne.n	800c882 <LPTIM_OC1_SetConfig+0x8a>
  {
    return HAL_TIMEOUT;
 800c87e:	2303      	movs	r3, #3
 800c880:	e01a      	b.n	800c8b8 <LPTIM_OC1_SetConfig+0xc0>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c888:	f003 0302 	and.w	r3, r3, #2
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d10e      	bne.n	800c8ae <LPTIM_OC1_SetConfig+0xb6>
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d107      	bne.n	800c8ae <LPTIM_OC1_SetConfig+0xb6>
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	691a      	ldr	r2, [r3, #16]
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	f022 0201 	bic.w	r2, r2, #1
 800c8ac:	611a      	str	r2, [r3, #16]

  /* Write to CCMR1 register */
  hlptim->Instance->CCMR1 = tmpccmr1;
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	68fa      	ldr	r2, [r7, #12]
 800c8b4:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800c8b6:	2300      	movs	r3, #0
}
 800c8b8:	4618      	mov	r0, r3
 800c8ba:	3710      	adds	r7, #16
 800c8bc:	46bd      	mov	sp, r7
 800c8be:	bd80      	pop	{r7, pc}
 800c8c0:	46004c00 	.word	0x46004c00

0800c8c4 <LPTIM_OC2_SetConfig>:
  *                the configuration information for LPTIM module.
  * @param  sConfig The output configuration structure
  * @retval None
  */
static HAL_StatusTypeDef LPTIM_OC2_SetConfig(LPTIM_HandleTypeDef *hlptim, const LPTIM_OC_ConfigTypeDef *sConfig)
{
 800c8c4:	b580      	push	{r7, lr}
 800c8c6:	b084      	sub	sp, #16
 800c8c8:	af00      	add	r7, sp, #0
 800c8ca:	6078      	str	r0, [r7, #4]
 800c8cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr1;

  tmpccmr1 = hlptim->Instance->CCMR1;
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8d4:	60fb      	str	r3, [r7, #12]
  tmpccmr1 &= ~(LPTIM_CCMR1_CC2P_Msk | LPTIM_CCMR1_CC2SEL_Msk);
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 800c8dc:	60fb      	str	r3, [r7, #12]
  tmpccmr1 |= sConfig->OCPolarity << LPTIM_CCMR1_CC2P_Pos;
 800c8de:	683b      	ldr	r3, [r7, #0]
 800c8e0:	685b      	ldr	r3, [r3, #4]
 800c8e2:	049b      	lsls	r3, r3, #18
 800c8e4:	68fa      	ldr	r2, [r7, #12]
 800c8e6:	4313      	orrs	r3, r2
 800c8e8:	60fb      	str	r3, [r7, #12]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	691a      	ldr	r2, [r3, #16]
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	f042 0201 	orr.w	r2, r2, #1
 800c8f8:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMP2OK);
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800c902:	605a      	str	r2, [r3, #4]

  /* Write to CCR2 register */
  __HAL_LPTIM_COMPARE_SET(hlptim, LPTIM_CHANNEL_2, sConfig->Pulse);
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	683a      	ldr	r2, [r7, #0]
 800c90a:	6812      	ldr	r2, [r2, #0]
 800c90c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Wait for the completion of the write operation to the LPTIM_CCR2 register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMP2OK) != HAL_OK)
 800c90e:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800c912:	6878      	ldr	r0, [r7, #4]
 800c914:	f7ff ff40 	bl	800c798 <LPTIM_WaitForFlag>
 800c918:	4603      	mov	r3, r0
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d001      	beq.n	800c922 <LPTIM_OC2_SetConfig+0x5e>
  {
    return HAL_TIMEOUT;
 800c91e:	2303      	movs	r3, #3
 800c920:	e01a      	b.n	800c958 <LPTIM_OC2_SetConfig+0x94>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c928:	f003 0302 	and.w	r3, r3, #2
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d10e      	bne.n	800c94e <LPTIM_OC2_SetConfig+0x8a>
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d107      	bne.n	800c94e <LPTIM_OC2_SetConfig+0x8a>
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	691a      	ldr	r2, [r3, #16]
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	f022 0201 	bic.w	r2, r2, #1
 800c94c:	611a      	str	r2, [r3, #16]

  /* Write to CCMR1 register */
  hlptim->Instance->CCMR1 = tmpccmr1;
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	68fa      	ldr	r2, [r7, #12]
 800c954:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800c956:	2300      	movs	r3, #0
}
 800c958:	4618      	mov	r0, r3
 800c95a:	3710      	adds	r7, #16
 800c95c:	46bd      	mov	sp, r7
 800c95e:	bd80      	pop	{r7, pc}

0800c960 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800c960:	b480      	push	{r7}
 800c962:	b085      	sub	sp, #20
 800c964:	af00      	add	r7, sp, #0
 800c966:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 800c968:	4b39      	ldr	r3, [pc, #228]	; (800ca50 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800c96a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c96c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c970:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800c972:	68ba      	ldr	r2, [r7, #8]
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	429a      	cmp	r2, r3
 800c978:	d10b      	bne.n	800c992 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c980:	d905      	bls.n	800c98e <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800c982:	4b33      	ldr	r3, [pc, #204]	; (800ca50 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800c984:	68db      	ldr	r3, [r3, #12]
 800c986:	4a32      	ldr	r2, [pc, #200]	; (800ca50 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800c988:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c98c:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 800c98e:	2300      	movs	r3, #0
 800c990:	e057      	b.n	800ca42 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c998:	d90a      	bls.n	800c9b0 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 800c99a:	4b2d      	ldr	r3, [pc, #180]	; (800ca50 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800c99c:	68db      	ldr	r3, [r3, #12]
 800c99e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	4313      	orrs	r3, r2
 800c9a6:	4a2a      	ldr	r2, [pc, #168]	; (800ca50 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800c9a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c9ac:	60d3      	str	r3, [r2, #12]
 800c9ae:	e007      	b.n	800c9c0 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 800c9b0:	4b27      	ldr	r3, [pc, #156]	; (800ca50 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800c9b2:	68db      	ldr	r3, [r3, #12]
 800c9b4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800c9b8:	4925      	ldr	r1, [pc, #148]	; (800ca50 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	4313      	orrs	r3, r2
 800c9be:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800c9c0:	4b24      	ldr	r3, [pc, #144]	; (800ca54 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	4a24      	ldr	r2, [pc, #144]	; (800ca58 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800c9c6:	fba2 2303 	umull	r2, r3, r2, r3
 800c9ca:	099b      	lsrs	r3, r3, #6
 800c9cc:	2232      	movs	r2, #50	; 0x32
 800c9ce:	fb02 f303 	mul.w	r3, r2, r3
 800c9d2:	4a21      	ldr	r2, [pc, #132]	; (800ca58 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800c9d4:	fba2 2303 	umull	r2, r3, r2, r3
 800c9d8:	099b      	lsrs	r3, r3, #6
 800c9da:	3301      	adds	r3, #1
 800c9dc:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800c9de:	e002      	b.n	800c9e6 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	3b01      	subs	r3, #1
 800c9e4:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800c9e6:	4b1a      	ldr	r3, [pc, #104]	; (800ca50 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800c9e8:	68db      	ldr	r3, [r3, #12]
 800c9ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d102      	bne.n	800c9f8 <HAL_PWREx_ControlVoltageScaling+0x98>
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d1f3      	bne.n	800c9e0 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d01b      	beq.n	800ca36 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800c9fe:	4b15      	ldr	r3, [pc, #84]	; (800ca54 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	4a15      	ldr	r2, [pc, #84]	; (800ca58 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800ca04:	fba2 2303 	umull	r2, r3, r2, r3
 800ca08:	099b      	lsrs	r3, r3, #6
 800ca0a:	2232      	movs	r2, #50	; 0x32
 800ca0c:	fb02 f303 	mul.w	r3, r2, r3
 800ca10:	4a11      	ldr	r2, [pc, #68]	; (800ca58 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800ca12:	fba2 2303 	umull	r2, r3, r2, r3
 800ca16:	099b      	lsrs	r3, r3, #6
 800ca18:	3301      	adds	r3, #1
 800ca1a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800ca1c:	e002      	b.n	800ca24 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	3b01      	subs	r3, #1
 800ca22:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800ca24:	4b0a      	ldr	r3, [pc, #40]	; (800ca50 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800ca26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d102      	bne.n	800ca36 <HAL_PWREx_ControlVoltageScaling+0xd6>
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d1f3      	bne.n	800ca1e <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d101      	bne.n	800ca40 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 800ca3c:	2303      	movs	r3, #3
 800ca3e:	e000      	b.n	800ca42 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 800ca40:	2300      	movs	r3, #0
}
 800ca42:	4618      	mov	r0, r3
 800ca44:	3714      	adds	r7, #20
 800ca46:	46bd      	mov	sp, r7
 800ca48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca4c:	4770      	bx	lr
 800ca4e:	bf00      	nop
 800ca50:	46020800 	.word	0x46020800
 800ca54:	200000f4 	.word	0x200000f4
 800ca58:	10624dd3 	.word	0x10624dd3

0800ca5c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800ca5c:	b480      	push	{r7}
 800ca5e:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 800ca60:	4b04      	ldr	r3, [pc, #16]	; (800ca74 <HAL_PWREx_GetVoltageRange+0x18>)
 800ca62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca64:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 800ca68:	4618      	mov	r0, r3
 800ca6a:	46bd      	mov	sp, r7
 800ca6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca70:	4770      	bx	lr
 800ca72:	bf00      	nop
 800ca74:	46020800 	.word	0x46020800

0800ca78 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800ca78:	b480      	push	{r7}
 800ca7a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 800ca7c:	4b05      	ldr	r3, [pc, #20]	; (800ca94 <HAL_PWREx_EnableVddIO2+0x1c>)
 800ca7e:	691b      	ldr	r3, [r3, #16]
 800ca80:	4a04      	ldr	r2, [pc, #16]	; (800ca94 <HAL_PWREx_EnableVddIO2+0x1c>)
 800ca82:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ca86:	6113      	str	r3, [r2, #16]
}
 800ca88:	bf00      	nop
 800ca8a:	46bd      	mov	sp, r7
 800ca8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca90:	4770      	bx	lr
 800ca92:	bf00      	nop
 800ca94:	46020800 	.word	0x46020800

0800ca98 <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800ca98:	b480      	push	{r7}
 800ca9a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 800ca9c:	4b05      	ldr	r3, [pc, #20]	; (800cab4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800ca9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800caa0:	4a04      	ldr	r2, [pc, #16]	; (800cab4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800caa2:	f043 0301 	orr.w	r3, r3, #1
 800caa6:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 800caa8:	bf00      	nop
 800caaa:	46bd      	mov	sp, r7
 800caac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab0:	4770      	bx	lr
 800cab2:	bf00      	nop
 800cab4:	46020800 	.word	0x46020800

0800cab8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 800cab8:	b580      	push	{r7, lr}
 800caba:	b08e      	sub	sp, #56	; 0x38
 800cabc:	af00      	add	r7, sp, #0
 800cabe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 800cac0:	2300      	movs	r3, #0
 800cac2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d102      	bne.n	800cad2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800cacc:	2301      	movs	r3, #1
 800cace:	f000 bec8 	b.w	800d862 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800cad2:	4b99      	ldr	r3, [pc, #612]	; (800cd38 <HAL_RCC_OscConfig+0x280>)
 800cad4:	69db      	ldr	r3, [r3, #28]
 800cad6:	f003 030c 	and.w	r3, r3, #12
 800cada:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800cadc:	4b96      	ldr	r3, [pc, #600]	; (800cd38 <HAL_RCC_OscConfig+0x280>)
 800cade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cae0:	f003 0303 	and.w	r3, r3, #3
 800cae4:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	f003 0310 	and.w	r3, r3, #16
 800caee:	2b00      	cmp	r3, #0
 800caf0:	f000 816c 	beq.w	800cdcc <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800caf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d007      	beq.n	800cb0a <HAL_RCC_OscConfig+0x52>
 800cafa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cafc:	2b0c      	cmp	r3, #12
 800cafe:	f040 80de 	bne.w	800ccbe <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800cb02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb04:	2b01      	cmp	r3, #1
 800cb06:	f040 80da 	bne.w	800ccbe <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	69db      	ldr	r3, [r3, #28]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d102      	bne.n	800cb18 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 800cb12:	2301      	movs	r3, #1
 800cb14:	f000 bea5 	b.w	800d862 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cb1c:	4b86      	ldr	r3, [pc, #536]	; (800cd38 <HAL_RCC_OscConfig+0x280>)
 800cb1e:	689b      	ldr	r3, [r3, #8]
 800cb20:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d004      	beq.n	800cb32 <HAL_RCC_OscConfig+0x7a>
 800cb28:	4b83      	ldr	r3, [pc, #524]	; (800cd38 <HAL_RCC_OscConfig+0x280>)
 800cb2a:	689b      	ldr	r3, [r3, #8]
 800cb2c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800cb30:	e005      	b.n	800cb3e <HAL_RCC_OscConfig+0x86>
 800cb32:	4b81      	ldr	r3, [pc, #516]	; (800cd38 <HAL_RCC_OscConfig+0x280>)
 800cb34:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800cb38:	041b      	lsls	r3, r3, #16
 800cb3a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800cb3e:	4293      	cmp	r3, r2
 800cb40:	d255      	bcs.n	800cbee <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800cb42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d10a      	bne.n	800cb5e <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb4c:	4618      	mov	r0, r3
 800cb4e:	f001 f9d9 	bl	800df04 <RCC_SetFlashLatencyFromMSIRange>
 800cb52:	4603      	mov	r3, r0
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d002      	beq.n	800cb5e <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 800cb58:	2301      	movs	r3, #1
 800cb5a:	f000 be82 	b.w	800d862 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800cb5e:	4b76      	ldr	r3, [pc, #472]	; (800cd38 <HAL_RCC_OscConfig+0x280>)
 800cb60:	689b      	ldr	r3, [r3, #8]
 800cb62:	4a75      	ldr	r2, [pc, #468]	; (800cd38 <HAL_RCC_OscConfig+0x280>)
 800cb64:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800cb68:	6093      	str	r3, [r2, #8]
 800cb6a:	4b73      	ldr	r3, [pc, #460]	; (800cd38 <HAL_RCC_OscConfig+0x280>)
 800cb6c:	689b      	ldr	r3, [r3, #8]
 800cb6e:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb76:	4970      	ldr	r1, [pc, #448]	; (800cd38 <HAL_RCC_OscConfig+0x280>)
 800cb78:	4313      	orrs	r3, r2
 800cb7a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb80:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800cb84:	d309      	bcc.n	800cb9a <HAL_RCC_OscConfig+0xe2>
 800cb86:	4b6c      	ldr	r3, [pc, #432]	; (800cd38 <HAL_RCC_OscConfig+0x280>)
 800cb88:	68db      	ldr	r3, [r3, #12]
 800cb8a:	f023 021f 	bic.w	r2, r3, #31
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	6a1b      	ldr	r3, [r3, #32]
 800cb92:	4969      	ldr	r1, [pc, #420]	; (800cd38 <HAL_RCC_OscConfig+0x280>)
 800cb94:	4313      	orrs	r3, r2
 800cb96:	60cb      	str	r3, [r1, #12]
 800cb98:	e07e      	b.n	800cc98 <HAL_RCC_OscConfig+0x1e0>
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	da0a      	bge.n	800cbb8 <HAL_RCC_OscConfig+0x100>
 800cba2:	4b65      	ldr	r3, [pc, #404]	; (800cd38 <HAL_RCC_OscConfig+0x280>)
 800cba4:	68db      	ldr	r3, [r3, #12]
 800cba6:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	6a1b      	ldr	r3, [r3, #32]
 800cbae:	015b      	lsls	r3, r3, #5
 800cbb0:	4961      	ldr	r1, [pc, #388]	; (800cd38 <HAL_RCC_OscConfig+0x280>)
 800cbb2:	4313      	orrs	r3, r2
 800cbb4:	60cb      	str	r3, [r1, #12]
 800cbb6:	e06f      	b.n	800cc98 <HAL_RCC_OscConfig+0x1e0>
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cbc0:	d30a      	bcc.n	800cbd8 <HAL_RCC_OscConfig+0x120>
 800cbc2:	4b5d      	ldr	r3, [pc, #372]	; (800cd38 <HAL_RCC_OscConfig+0x280>)
 800cbc4:	68db      	ldr	r3, [r3, #12]
 800cbc6:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	6a1b      	ldr	r3, [r3, #32]
 800cbce:	029b      	lsls	r3, r3, #10
 800cbd0:	4959      	ldr	r1, [pc, #356]	; (800cd38 <HAL_RCC_OscConfig+0x280>)
 800cbd2:	4313      	orrs	r3, r2
 800cbd4:	60cb      	str	r3, [r1, #12]
 800cbd6:	e05f      	b.n	800cc98 <HAL_RCC_OscConfig+0x1e0>
 800cbd8:	4b57      	ldr	r3, [pc, #348]	; (800cd38 <HAL_RCC_OscConfig+0x280>)
 800cbda:	68db      	ldr	r3, [r3, #12]
 800cbdc:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	6a1b      	ldr	r3, [r3, #32]
 800cbe4:	03db      	lsls	r3, r3, #15
 800cbe6:	4954      	ldr	r1, [pc, #336]	; (800cd38 <HAL_RCC_OscConfig+0x280>)
 800cbe8:	4313      	orrs	r3, r2
 800cbea:	60cb      	str	r3, [r1, #12]
 800cbec:	e054      	b.n	800cc98 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800cbee:	4b52      	ldr	r3, [pc, #328]	; (800cd38 <HAL_RCC_OscConfig+0x280>)
 800cbf0:	689b      	ldr	r3, [r3, #8]
 800cbf2:	4a51      	ldr	r2, [pc, #324]	; (800cd38 <HAL_RCC_OscConfig+0x280>)
 800cbf4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800cbf8:	6093      	str	r3, [r2, #8]
 800cbfa:	4b4f      	ldr	r3, [pc, #316]	; (800cd38 <HAL_RCC_OscConfig+0x280>)
 800cbfc:	689b      	ldr	r3, [r3, #8]
 800cbfe:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc06:	494c      	ldr	r1, [pc, #304]	; (800cd38 <HAL_RCC_OscConfig+0x280>)
 800cc08:	4313      	orrs	r3, r2
 800cc0a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc10:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800cc14:	d309      	bcc.n	800cc2a <HAL_RCC_OscConfig+0x172>
 800cc16:	4b48      	ldr	r3, [pc, #288]	; (800cd38 <HAL_RCC_OscConfig+0x280>)
 800cc18:	68db      	ldr	r3, [r3, #12]
 800cc1a:	f023 021f 	bic.w	r2, r3, #31
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	6a1b      	ldr	r3, [r3, #32]
 800cc22:	4945      	ldr	r1, [pc, #276]	; (800cd38 <HAL_RCC_OscConfig+0x280>)
 800cc24:	4313      	orrs	r3, r2
 800cc26:	60cb      	str	r3, [r1, #12]
 800cc28:	e028      	b.n	800cc7c <HAL_RCC_OscConfig+0x1c4>
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	da0a      	bge.n	800cc48 <HAL_RCC_OscConfig+0x190>
 800cc32:	4b41      	ldr	r3, [pc, #260]	; (800cd38 <HAL_RCC_OscConfig+0x280>)
 800cc34:	68db      	ldr	r3, [r3, #12]
 800cc36:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	6a1b      	ldr	r3, [r3, #32]
 800cc3e:	015b      	lsls	r3, r3, #5
 800cc40:	493d      	ldr	r1, [pc, #244]	; (800cd38 <HAL_RCC_OscConfig+0x280>)
 800cc42:	4313      	orrs	r3, r2
 800cc44:	60cb      	str	r3, [r1, #12]
 800cc46:	e019      	b.n	800cc7c <HAL_RCC_OscConfig+0x1c4>
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cc50:	d30a      	bcc.n	800cc68 <HAL_RCC_OscConfig+0x1b0>
 800cc52:	4b39      	ldr	r3, [pc, #228]	; (800cd38 <HAL_RCC_OscConfig+0x280>)
 800cc54:	68db      	ldr	r3, [r3, #12]
 800cc56:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	6a1b      	ldr	r3, [r3, #32]
 800cc5e:	029b      	lsls	r3, r3, #10
 800cc60:	4935      	ldr	r1, [pc, #212]	; (800cd38 <HAL_RCC_OscConfig+0x280>)
 800cc62:	4313      	orrs	r3, r2
 800cc64:	60cb      	str	r3, [r1, #12]
 800cc66:	e009      	b.n	800cc7c <HAL_RCC_OscConfig+0x1c4>
 800cc68:	4b33      	ldr	r3, [pc, #204]	; (800cd38 <HAL_RCC_OscConfig+0x280>)
 800cc6a:	68db      	ldr	r3, [r3, #12]
 800cc6c:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	6a1b      	ldr	r3, [r3, #32]
 800cc74:	03db      	lsls	r3, r3, #15
 800cc76:	4930      	ldr	r1, [pc, #192]	; (800cd38 <HAL_RCC_OscConfig+0x280>)
 800cc78:	4313      	orrs	r3, r2
 800cc7a:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800cc7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d10a      	bne.n	800cc98 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc86:	4618      	mov	r0, r3
 800cc88:	f001 f93c 	bl	800df04 <RCC_SetFlashLatencyFromMSIRange>
 800cc8c:	4603      	mov	r3, r0
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d002      	beq.n	800cc98 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 800cc92:	2301      	movs	r3, #1
 800cc94:	f000 bde5 	b.w	800d862 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 800cc98:	f001 f8de 	bl	800de58 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800cc9c:	4b27      	ldr	r3, [pc, #156]	; (800cd3c <HAL_RCC_OscConfig+0x284>)
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	4618      	mov	r0, r3
 800cca2:	f7fd fca9 	bl	800a5f8 <HAL_InitTick>
 800cca6:	4603      	mov	r3, r0
 800cca8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 800ccac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	f000 808a 	beq.w	800cdca <HAL_RCC_OscConfig+0x312>
        {
          return status;
 800ccb6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ccba:	f000 bdd2 	b.w	800d862 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	69db      	ldr	r3, [r3, #28]
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d066      	beq.n	800cd94 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 800ccc6:	4b1c      	ldr	r3, [pc, #112]	; (800cd38 <HAL_RCC_OscConfig+0x280>)
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	4a1b      	ldr	r2, [pc, #108]	; (800cd38 <HAL_RCC_OscConfig+0x280>)
 800cccc:	f043 0301 	orr.w	r3, r3, #1
 800ccd0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800ccd2:	f7fd fcdb 	bl	800a68c <HAL_GetTick>
 800ccd6:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800ccd8:	e009      	b.n	800ccee <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800ccda:	f7fd fcd7 	bl	800a68c <HAL_GetTick>
 800ccde:	4602      	mov	r2, r0
 800cce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cce2:	1ad3      	subs	r3, r2, r3
 800cce4:	2b02      	cmp	r3, #2
 800cce6:	d902      	bls.n	800ccee <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 800cce8:	2303      	movs	r3, #3
 800ccea:	f000 bdba 	b.w	800d862 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800ccee:	4b12      	ldr	r3, [pc, #72]	; (800cd38 <HAL_RCC_OscConfig+0x280>)
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	f003 0304 	and.w	r3, r3, #4
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d0ef      	beq.n	800ccda <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800ccfa:	4b0f      	ldr	r3, [pc, #60]	; (800cd38 <HAL_RCC_OscConfig+0x280>)
 800ccfc:	689b      	ldr	r3, [r3, #8]
 800ccfe:	4a0e      	ldr	r2, [pc, #56]	; (800cd38 <HAL_RCC_OscConfig+0x280>)
 800cd00:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800cd04:	6093      	str	r3, [r2, #8]
 800cd06:	4b0c      	ldr	r3, [pc, #48]	; (800cd38 <HAL_RCC_OscConfig+0x280>)
 800cd08:	689b      	ldr	r3, [r3, #8]
 800cd0a:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd12:	4909      	ldr	r1, [pc, #36]	; (800cd38 <HAL_RCC_OscConfig+0x280>)
 800cd14:	4313      	orrs	r3, r2
 800cd16:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd1c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800cd20:	d30e      	bcc.n	800cd40 <HAL_RCC_OscConfig+0x288>
 800cd22:	4b05      	ldr	r3, [pc, #20]	; (800cd38 <HAL_RCC_OscConfig+0x280>)
 800cd24:	68db      	ldr	r3, [r3, #12]
 800cd26:	f023 021f 	bic.w	r2, r3, #31
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	6a1b      	ldr	r3, [r3, #32]
 800cd2e:	4902      	ldr	r1, [pc, #8]	; (800cd38 <HAL_RCC_OscConfig+0x280>)
 800cd30:	4313      	orrs	r3, r2
 800cd32:	60cb      	str	r3, [r1, #12]
 800cd34:	e04a      	b.n	800cdcc <HAL_RCC_OscConfig+0x314>
 800cd36:	bf00      	nop
 800cd38:	46020c00 	.word	0x46020c00
 800cd3c:	200000f8 	.word	0x200000f8
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	da0a      	bge.n	800cd5e <HAL_RCC_OscConfig+0x2a6>
 800cd48:	4b98      	ldr	r3, [pc, #608]	; (800cfac <HAL_RCC_OscConfig+0x4f4>)
 800cd4a:	68db      	ldr	r3, [r3, #12]
 800cd4c:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	6a1b      	ldr	r3, [r3, #32]
 800cd54:	015b      	lsls	r3, r3, #5
 800cd56:	4995      	ldr	r1, [pc, #596]	; (800cfac <HAL_RCC_OscConfig+0x4f4>)
 800cd58:	4313      	orrs	r3, r2
 800cd5a:	60cb      	str	r3, [r1, #12]
 800cd5c:	e036      	b.n	800cdcc <HAL_RCC_OscConfig+0x314>
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cd66:	d30a      	bcc.n	800cd7e <HAL_RCC_OscConfig+0x2c6>
 800cd68:	4b90      	ldr	r3, [pc, #576]	; (800cfac <HAL_RCC_OscConfig+0x4f4>)
 800cd6a:	68db      	ldr	r3, [r3, #12]
 800cd6c:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	6a1b      	ldr	r3, [r3, #32]
 800cd74:	029b      	lsls	r3, r3, #10
 800cd76:	498d      	ldr	r1, [pc, #564]	; (800cfac <HAL_RCC_OscConfig+0x4f4>)
 800cd78:	4313      	orrs	r3, r2
 800cd7a:	60cb      	str	r3, [r1, #12]
 800cd7c:	e026      	b.n	800cdcc <HAL_RCC_OscConfig+0x314>
 800cd7e:	4b8b      	ldr	r3, [pc, #556]	; (800cfac <HAL_RCC_OscConfig+0x4f4>)
 800cd80:	68db      	ldr	r3, [r3, #12]
 800cd82:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	6a1b      	ldr	r3, [r3, #32]
 800cd8a:	03db      	lsls	r3, r3, #15
 800cd8c:	4987      	ldr	r1, [pc, #540]	; (800cfac <HAL_RCC_OscConfig+0x4f4>)
 800cd8e:	4313      	orrs	r3, r2
 800cd90:	60cb      	str	r3, [r1, #12]
 800cd92:	e01b      	b.n	800cdcc <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 800cd94:	4b85      	ldr	r3, [pc, #532]	; (800cfac <HAL_RCC_OscConfig+0x4f4>)
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	4a84      	ldr	r2, [pc, #528]	; (800cfac <HAL_RCC_OscConfig+0x4f4>)
 800cd9a:	f023 0301 	bic.w	r3, r3, #1
 800cd9e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800cda0:	f7fd fc74 	bl	800a68c <HAL_GetTick>
 800cda4:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800cda6:	e009      	b.n	800cdbc <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800cda8:	f7fd fc70 	bl	800a68c <HAL_GetTick>
 800cdac:	4602      	mov	r2, r0
 800cdae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdb0:	1ad3      	subs	r3, r2, r3
 800cdb2:	2b02      	cmp	r3, #2
 800cdb4:	d902      	bls.n	800cdbc <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 800cdb6:	2303      	movs	r3, #3
 800cdb8:	f000 bd53 	b.w	800d862 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800cdbc:	4b7b      	ldr	r3, [pc, #492]	; (800cfac <HAL_RCC_OscConfig+0x4f4>)
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	f003 0304 	and.w	r3, r3, #4
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d1ef      	bne.n	800cda8 <HAL_RCC_OscConfig+0x2f0>
 800cdc8:	e000      	b.n	800cdcc <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800cdca:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	f003 0301 	and.w	r3, r3, #1
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	f000 808b 	beq.w	800cef0 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800cdda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cddc:	2b08      	cmp	r3, #8
 800cdde:	d005      	beq.n	800cdec <HAL_RCC_OscConfig+0x334>
 800cde0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cde2:	2b0c      	cmp	r3, #12
 800cde4:	d109      	bne.n	800cdfa <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800cde6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cde8:	2b03      	cmp	r3, #3
 800cdea:	d106      	bne.n	800cdfa <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	685b      	ldr	r3, [r3, #4]
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d17d      	bne.n	800cef0 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 800cdf4:	2301      	movs	r3, #1
 800cdf6:	f000 bd34 	b.w	800d862 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	685b      	ldr	r3, [r3, #4]
 800cdfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ce02:	d106      	bne.n	800ce12 <HAL_RCC_OscConfig+0x35a>
 800ce04:	4b69      	ldr	r3, [pc, #420]	; (800cfac <HAL_RCC_OscConfig+0x4f4>)
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	4a68      	ldr	r2, [pc, #416]	; (800cfac <HAL_RCC_OscConfig+0x4f4>)
 800ce0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ce0e:	6013      	str	r3, [r2, #0]
 800ce10:	e041      	b.n	800ce96 <HAL_RCC_OscConfig+0x3de>
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	685b      	ldr	r3, [r3, #4]
 800ce16:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ce1a:	d112      	bne.n	800ce42 <HAL_RCC_OscConfig+0x38a>
 800ce1c:	4b63      	ldr	r3, [pc, #396]	; (800cfac <HAL_RCC_OscConfig+0x4f4>)
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	4a62      	ldr	r2, [pc, #392]	; (800cfac <HAL_RCC_OscConfig+0x4f4>)
 800ce22:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ce26:	6013      	str	r3, [r2, #0]
 800ce28:	4b60      	ldr	r3, [pc, #384]	; (800cfac <HAL_RCC_OscConfig+0x4f4>)
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	4a5f      	ldr	r2, [pc, #380]	; (800cfac <HAL_RCC_OscConfig+0x4f4>)
 800ce2e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800ce32:	6013      	str	r3, [r2, #0]
 800ce34:	4b5d      	ldr	r3, [pc, #372]	; (800cfac <HAL_RCC_OscConfig+0x4f4>)
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	4a5c      	ldr	r2, [pc, #368]	; (800cfac <HAL_RCC_OscConfig+0x4f4>)
 800ce3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ce3e:	6013      	str	r3, [r2, #0]
 800ce40:	e029      	b.n	800ce96 <HAL_RCC_OscConfig+0x3de>
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	685b      	ldr	r3, [r3, #4]
 800ce46:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800ce4a:	d112      	bne.n	800ce72 <HAL_RCC_OscConfig+0x3ba>
 800ce4c:	4b57      	ldr	r3, [pc, #348]	; (800cfac <HAL_RCC_OscConfig+0x4f4>)
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	4a56      	ldr	r2, [pc, #344]	; (800cfac <HAL_RCC_OscConfig+0x4f4>)
 800ce52:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ce56:	6013      	str	r3, [r2, #0]
 800ce58:	4b54      	ldr	r3, [pc, #336]	; (800cfac <HAL_RCC_OscConfig+0x4f4>)
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	4a53      	ldr	r2, [pc, #332]	; (800cfac <HAL_RCC_OscConfig+0x4f4>)
 800ce5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ce62:	6013      	str	r3, [r2, #0]
 800ce64:	4b51      	ldr	r3, [pc, #324]	; (800cfac <HAL_RCC_OscConfig+0x4f4>)
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	4a50      	ldr	r2, [pc, #320]	; (800cfac <HAL_RCC_OscConfig+0x4f4>)
 800ce6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ce6e:	6013      	str	r3, [r2, #0]
 800ce70:	e011      	b.n	800ce96 <HAL_RCC_OscConfig+0x3de>
 800ce72:	4b4e      	ldr	r3, [pc, #312]	; (800cfac <HAL_RCC_OscConfig+0x4f4>)
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	4a4d      	ldr	r2, [pc, #308]	; (800cfac <HAL_RCC_OscConfig+0x4f4>)
 800ce78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ce7c:	6013      	str	r3, [r2, #0]
 800ce7e:	4b4b      	ldr	r3, [pc, #300]	; (800cfac <HAL_RCC_OscConfig+0x4f4>)
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	4a4a      	ldr	r2, [pc, #296]	; (800cfac <HAL_RCC_OscConfig+0x4f4>)
 800ce84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ce88:	6013      	str	r3, [r2, #0]
 800ce8a:	4b48      	ldr	r3, [pc, #288]	; (800cfac <HAL_RCC_OscConfig+0x4f4>)
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	4a47      	ldr	r2, [pc, #284]	; (800cfac <HAL_RCC_OscConfig+0x4f4>)
 800ce90:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800ce94:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	685b      	ldr	r3, [r3, #4]
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d014      	beq.n	800cec8 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 800ce9e:	f7fd fbf5 	bl	800a68c <HAL_GetTick>
 800cea2:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800cea4:	e009      	b.n	800ceba <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800cea6:	f7fd fbf1 	bl	800a68c <HAL_GetTick>
 800ceaa:	4602      	mov	r2, r0
 800ceac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceae:	1ad3      	subs	r3, r2, r3
 800ceb0:	2b64      	cmp	r3, #100	; 0x64
 800ceb2:	d902      	bls.n	800ceba <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 800ceb4:	2303      	movs	r3, #3
 800ceb6:	f000 bcd4 	b.w	800d862 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800ceba:	4b3c      	ldr	r3, [pc, #240]	; (800cfac <HAL_RCC_OscConfig+0x4f4>)
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d0ef      	beq.n	800cea6 <HAL_RCC_OscConfig+0x3ee>
 800cec6:	e013      	b.n	800cef0 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 800cec8:	f7fd fbe0 	bl	800a68c <HAL_GetTick>
 800cecc:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800cece:	e009      	b.n	800cee4 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ced0:	f7fd fbdc 	bl	800a68c <HAL_GetTick>
 800ced4:	4602      	mov	r2, r0
 800ced6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ced8:	1ad3      	subs	r3, r2, r3
 800ceda:	2b64      	cmp	r3, #100	; 0x64
 800cedc:	d902      	bls.n	800cee4 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800cede:	2303      	movs	r3, #3
 800cee0:	f000 bcbf 	b.w	800d862 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800cee4:	4b31      	ldr	r3, [pc, #196]	; (800cfac <HAL_RCC_OscConfig+0x4f4>)
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d1ef      	bne.n	800ced0 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	f003 0302 	and.w	r3, r3, #2
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d05f      	beq.n	800cfbc <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800cefc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cefe:	2b04      	cmp	r3, #4
 800cf00:	d005      	beq.n	800cf0e <HAL_RCC_OscConfig+0x456>
 800cf02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf04:	2b0c      	cmp	r3, #12
 800cf06:	d114      	bne.n	800cf32 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800cf08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf0a:	2b02      	cmp	r3, #2
 800cf0c:	d111      	bne.n	800cf32 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	68db      	ldr	r3, [r3, #12]
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d102      	bne.n	800cf1c <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 800cf16:	2301      	movs	r3, #1
 800cf18:	f000 bca3 	b.w	800d862 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800cf1c:	4b23      	ldr	r3, [pc, #140]	; (800cfac <HAL_RCC_OscConfig+0x4f4>)
 800cf1e:	691b      	ldr	r3, [r3, #16]
 800cf20:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	691b      	ldr	r3, [r3, #16]
 800cf28:	041b      	lsls	r3, r3, #16
 800cf2a:	4920      	ldr	r1, [pc, #128]	; (800cfac <HAL_RCC_OscConfig+0x4f4>)
 800cf2c:	4313      	orrs	r3, r2
 800cf2e:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800cf30:	e044      	b.n	800cfbc <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	68db      	ldr	r3, [r3, #12]
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d024      	beq.n	800cf84 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 800cf3a:	4b1c      	ldr	r3, [pc, #112]	; (800cfac <HAL_RCC_OscConfig+0x4f4>)
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	4a1b      	ldr	r2, [pc, #108]	; (800cfac <HAL_RCC_OscConfig+0x4f4>)
 800cf40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cf44:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800cf46:	f7fd fba1 	bl	800a68c <HAL_GetTick>
 800cf4a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800cf4c:	e009      	b.n	800cf62 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800cf4e:	f7fd fb9d 	bl	800a68c <HAL_GetTick>
 800cf52:	4602      	mov	r2, r0
 800cf54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf56:	1ad3      	subs	r3, r2, r3
 800cf58:	2b02      	cmp	r3, #2
 800cf5a:	d902      	bls.n	800cf62 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800cf5c:	2303      	movs	r3, #3
 800cf5e:	f000 bc80 	b.w	800d862 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800cf62:	4b12      	ldr	r3, [pc, #72]	; (800cfac <HAL_RCC_OscConfig+0x4f4>)
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d0ef      	beq.n	800cf4e <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800cf6e:	4b0f      	ldr	r3, [pc, #60]	; (800cfac <HAL_RCC_OscConfig+0x4f4>)
 800cf70:	691b      	ldr	r3, [r3, #16]
 800cf72:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	691b      	ldr	r3, [r3, #16]
 800cf7a:	041b      	lsls	r3, r3, #16
 800cf7c:	490b      	ldr	r1, [pc, #44]	; (800cfac <HAL_RCC_OscConfig+0x4f4>)
 800cf7e:	4313      	orrs	r3, r2
 800cf80:	610b      	str	r3, [r1, #16]
 800cf82:	e01b      	b.n	800cfbc <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 800cf84:	4b09      	ldr	r3, [pc, #36]	; (800cfac <HAL_RCC_OscConfig+0x4f4>)
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	4a08      	ldr	r2, [pc, #32]	; (800cfac <HAL_RCC_OscConfig+0x4f4>)
 800cf8a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cf8e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800cf90:	f7fd fb7c 	bl	800a68c <HAL_GetTick>
 800cf94:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800cf96:	e00b      	b.n	800cfb0 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800cf98:	f7fd fb78 	bl	800a68c <HAL_GetTick>
 800cf9c:	4602      	mov	r2, r0
 800cf9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfa0:	1ad3      	subs	r3, r2, r3
 800cfa2:	2b02      	cmp	r3, #2
 800cfa4:	d904      	bls.n	800cfb0 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 800cfa6:	2303      	movs	r3, #3
 800cfa8:	f000 bc5b 	b.w	800d862 <HAL_RCC_OscConfig+0xdaa>
 800cfac:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800cfb0:	4baf      	ldr	r3, [pc, #700]	; (800d270 <HAL_RCC_OscConfig+0x7b8>)
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d1ed      	bne.n	800cf98 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	f003 0308 	and.w	r3, r3, #8
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	f000 80c8 	beq.w	800d15a <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 800cfca:	2300      	movs	r3, #0
 800cfcc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800cfd0:	4ba7      	ldr	r3, [pc, #668]	; (800d270 <HAL_RCC_OscConfig+0x7b8>)
 800cfd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cfd6:	f003 0304 	and.w	r3, r3, #4
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d111      	bne.n	800d002 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800cfde:	4ba4      	ldr	r3, [pc, #656]	; (800d270 <HAL_RCC_OscConfig+0x7b8>)
 800cfe0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cfe4:	4aa2      	ldr	r2, [pc, #648]	; (800d270 <HAL_RCC_OscConfig+0x7b8>)
 800cfe6:	f043 0304 	orr.w	r3, r3, #4
 800cfea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800cfee:	4ba0      	ldr	r3, [pc, #640]	; (800d270 <HAL_RCC_OscConfig+0x7b8>)
 800cff0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cff4:	f003 0304 	and.w	r3, r3, #4
 800cff8:	617b      	str	r3, [r7, #20]
 800cffa:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 800cffc:	2301      	movs	r3, #1
 800cffe:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800d002:	4b9c      	ldr	r3, [pc, #624]	; (800d274 <HAL_RCC_OscConfig+0x7bc>)
 800d004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d006:	f003 0301 	and.w	r3, r3, #1
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d119      	bne.n	800d042 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800d00e:	4b99      	ldr	r3, [pc, #612]	; (800d274 <HAL_RCC_OscConfig+0x7bc>)
 800d010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d012:	4a98      	ldr	r2, [pc, #608]	; (800d274 <HAL_RCC_OscConfig+0x7bc>)
 800d014:	f043 0301 	orr.w	r3, r3, #1
 800d018:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800d01a:	f7fd fb37 	bl	800a68c <HAL_GetTick>
 800d01e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800d020:	e009      	b.n	800d036 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d022:	f7fd fb33 	bl	800a68c <HAL_GetTick>
 800d026:	4602      	mov	r2, r0
 800d028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d02a:	1ad3      	subs	r3, r2, r3
 800d02c:	2b02      	cmp	r3, #2
 800d02e:	d902      	bls.n	800d036 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 800d030:	2303      	movs	r3, #3
 800d032:	f000 bc16 	b.w	800d862 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800d036:	4b8f      	ldr	r3, [pc, #572]	; (800d274 <HAL_RCC_OscConfig+0x7bc>)
 800d038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d03a:	f003 0301 	and.w	r3, r3, #1
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d0ef      	beq.n	800d022 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	695b      	ldr	r3, [r3, #20]
 800d046:	2b00      	cmp	r3, #0
 800d048:	d05f      	beq.n	800d10a <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 800d04a:	4b89      	ldr	r3, [pc, #548]	; (800d270 <HAL_RCC_OscConfig+0x7b8>)
 800d04c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d050:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	699a      	ldr	r2, [r3, #24]
 800d056:	6a3b      	ldr	r3, [r7, #32]
 800d058:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d05c:	429a      	cmp	r2, r3
 800d05e:	d037      	beq.n	800d0d0 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800d060:	6a3b      	ldr	r3, [r7, #32]
 800d062:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d066:	2b00      	cmp	r3, #0
 800d068:	d006      	beq.n	800d078 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 800d06a:	6a3b      	ldr	r3, [r7, #32]
 800d06c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800d070:	2b00      	cmp	r3, #0
 800d072:	d101      	bne.n	800d078 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 800d074:	2301      	movs	r3, #1
 800d076:	e3f4      	b.n	800d862 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 800d078:	6a3b      	ldr	r3, [r7, #32]
 800d07a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d01b      	beq.n	800d0ba <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 800d082:	4b7b      	ldr	r3, [pc, #492]	; (800d270 <HAL_RCC_OscConfig+0x7b8>)
 800d084:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d088:	4a79      	ldr	r2, [pc, #484]	; (800d270 <HAL_RCC_OscConfig+0x7b8>)
 800d08a:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 800d08e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 800d092:	f7fd fafb 	bl	800a68c <HAL_GetTick>
 800d096:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800d098:	e008      	b.n	800d0ac <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d09a:	f7fd faf7 	bl	800a68c <HAL_GetTick>
 800d09e:	4602      	mov	r2, r0
 800d0a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0a2:	1ad3      	subs	r3, r2, r3
 800d0a4:	2b05      	cmp	r3, #5
 800d0a6:	d901      	bls.n	800d0ac <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 800d0a8:	2303      	movs	r3, #3
 800d0aa:	e3da      	b.n	800d862 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800d0ac:	4b70      	ldr	r3, [pc, #448]	; (800d270 <HAL_RCC_OscConfig+0x7b8>)
 800d0ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d0b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d1ef      	bne.n	800d09a <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 800d0ba:	4b6d      	ldr	r3, [pc, #436]	; (800d270 <HAL_RCC_OscConfig+0x7b8>)
 800d0bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d0c0:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	699b      	ldr	r3, [r3, #24]
 800d0c8:	4969      	ldr	r1, [pc, #420]	; (800d270 <HAL_RCC_OscConfig+0x7b8>)
 800d0ca:	4313      	orrs	r3, r2
 800d0cc:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 800d0d0:	4b67      	ldr	r3, [pc, #412]	; (800d270 <HAL_RCC_OscConfig+0x7b8>)
 800d0d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d0d6:	4a66      	ldr	r2, [pc, #408]	; (800d270 <HAL_RCC_OscConfig+0x7b8>)
 800d0d8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d0dc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 800d0e0:	f7fd fad4 	bl	800a68c <HAL_GetTick>
 800d0e4:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800d0e6:	e008      	b.n	800d0fa <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d0e8:	f7fd fad0 	bl	800a68c <HAL_GetTick>
 800d0ec:	4602      	mov	r2, r0
 800d0ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0f0:	1ad3      	subs	r3, r2, r3
 800d0f2:	2b05      	cmp	r3, #5
 800d0f4:	d901      	bls.n	800d0fa <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 800d0f6:	2303      	movs	r3, #3
 800d0f8:	e3b3      	b.n	800d862 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800d0fa:	4b5d      	ldr	r3, [pc, #372]	; (800d270 <HAL_RCC_OscConfig+0x7b8>)
 800d0fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d100:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d104:	2b00      	cmp	r3, #0
 800d106:	d0ef      	beq.n	800d0e8 <HAL_RCC_OscConfig+0x630>
 800d108:	e01b      	b.n	800d142 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 800d10a:	4b59      	ldr	r3, [pc, #356]	; (800d270 <HAL_RCC_OscConfig+0x7b8>)
 800d10c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d110:	4a57      	ldr	r2, [pc, #348]	; (800d270 <HAL_RCC_OscConfig+0x7b8>)
 800d112:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 800d116:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 800d11a:	f7fd fab7 	bl	800a68c <HAL_GetTick>
 800d11e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800d120:	e008      	b.n	800d134 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d122:	f7fd fab3 	bl	800a68c <HAL_GetTick>
 800d126:	4602      	mov	r2, r0
 800d128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d12a:	1ad3      	subs	r3, r2, r3
 800d12c:	2b05      	cmp	r3, #5
 800d12e:	d901      	bls.n	800d134 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 800d130:	2303      	movs	r3, #3
 800d132:	e396      	b.n	800d862 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800d134:	4b4e      	ldr	r3, [pc, #312]	; (800d270 <HAL_RCC_OscConfig+0x7b8>)
 800d136:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d13a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d1ef      	bne.n	800d122 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800d142:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800d146:	2b01      	cmp	r3, #1
 800d148:	d107      	bne.n	800d15a <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d14a:	4b49      	ldr	r3, [pc, #292]	; (800d270 <HAL_RCC_OscConfig+0x7b8>)
 800d14c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d150:	4a47      	ldr	r2, [pc, #284]	; (800d270 <HAL_RCC_OscConfig+0x7b8>)
 800d152:	f023 0304 	bic.w	r3, r3, #4
 800d156:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	f003 0304 	and.w	r3, r3, #4
 800d162:	2b00      	cmp	r3, #0
 800d164:	f000 8111 	beq.w	800d38a <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 800d168:	2300      	movs	r3, #0
 800d16a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d16e:	4b40      	ldr	r3, [pc, #256]	; (800d270 <HAL_RCC_OscConfig+0x7b8>)
 800d170:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d174:	f003 0304 	and.w	r3, r3, #4
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d111      	bne.n	800d1a0 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d17c:	4b3c      	ldr	r3, [pc, #240]	; (800d270 <HAL_RCC_OscConfig+0x7b8>)
 800d17e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d182:	4a3b      	ldr	r2, [pc, #236]	; (800d270 <HAL_RCC_OscConfig+0x7b8>)
 800d184:	f043 0304 	orr.w	r3, r3, #4
 800d188:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800d18c:	4b38      	ldr	r3, [pc, #224]	; (800d270 <HAL_RCC_OscConfig+0x7b8>)
 800d18e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d192:	f003 0304 	and.w	r3, r3, #4
 800d196:	613b      	str	r3, [r7, #16]
 800d198:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 800d19a:	2301      	movs	r3, #1
 800d19c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800d1a0:	4b34      	ldr	r3, [pc, #208]	; (800d274 <HAL_RCC_OscConfig+0x7bc>)
 800d1a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1a4:	f003 0301 	and.w	r3, r3, #1
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d118      	bne.n	800d1de <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800d1ac:	4b31      	ldr	r3, [pc, #196]	; (800d274 <HAL_RCC_OscConfig+0x7bc>)
 800d1ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1b0:	4a30      	ldr	r2, [pc, #192]	; (800d274 <HAL_RCC_OscConfig+0x7bc>)
 800d1b2:	f043 0301 	orr.w	r3, r3, #1
 800d1b6:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800d1b8:	f7fd fa68 	bl	800a68c <HAL_GetTick>
 800d1bc:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800d1be:	e008      	b.n	800d1d2 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d1c0:	f7fd fa64 	bl	800a68c <HAL_GetTick>
 800d1c4:	4602      	mov	r2, r0
 800d1c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1c8:	1ad3      	subs	r3, r2, r3
 800d1ca:	2b02      	cmp	r3, #2
 800d1cc:	d901      	bls.n	800d1d2 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 800d1ce:	2303      	movs	r3, #3
 800d1d0:	e347      	b.n	800d862 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800d1d2:	4b28      	ldr	r3, [pc, #160]	; (800d274 <HAL_RCC_OscConfig+0x7bc>)
 800d1d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1d6:	f003 0301 	and.w	r3, r3, #1
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d0f0      	beq.n	800d1c0 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	689b      	ldr	r3, [r3, #8]
 800d1e2:	f003 0301 	and.w	r3, r3, #1
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d01f      	beq.n	800d22a <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	689b      	ldr	r3, [r3, #8]
 800d1ee:	f003 0304 	and.w	r3, r3, #4
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d010      	beq.n	800d218 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800d1f6:	4b1e      	ldr	r3, [pc, #120]	; (800d270 <HAL_RCC_OscConfig+0x7b8>)
 800d1f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d1fc:	4a1c      	ldr	r2, [pc, #112]	; (800d270 <HAL_RCC_OscConfig+0x7b8>)
 800d1fe:	f043 0304 	orr.w	r3, r3, #4
 800d202:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800d206:	4b1a      	ldr	r3, [pc, #104]	; (800d270 <HAL_RCC_OscConfig+0x7b8>)
 800d208:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d20c:	4a18      	ldr	r2, [pc, #96]	; (800d270 <HAL_RCC_OscConfig+0x7b8>)
 800d20e:	f043 0301 	orr.w	r3, r3, #1
 800d212:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800d216:	e018      	b.n	800d24a <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800d218:	4b15      	ldr	r3, [pc, #84]	; (800d270 <HAL_RCC_OscConfig+0x7b8>)
 800d21a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d21e:	4a14      	ldr	r2, [pc, #80]	; (800d270 <HAL_RCC_OscConfig+0x7b8>)
 800d220:	f043 0301 	orr.w	r3, r3, #1
 800d224:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800d228:	e00f      	b.n	800d24a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800d22a:	4b11      	ldr	r3, [pc, #68]	; (800d270 <HAL_RCC_OscConfig+0x7b8>)
 800d22c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d230:	4a0f      	ldr	r2, [pc, #60]	; (800d270 <HAL_RCC_OscConfig+0x7b8>)
 800d232:	f023 0301 	bic.w	r3, r3, #1
 800d236:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800d23a:	4b0d      	ldr	r3, [pc, #52]	; (800d270 <HAL_RCC_OscConfig+0x7b8>)
 800d23c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d240:	4a0b      	ldr	r2, [pc, #44]	; (800d270 <HAL_RCC_OscConfig+0x7b8>)
 800d242:	f023 0304 	bic.w	r3, r3, #4
 800d246:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	689b      	ldr	r3, [r3, #8]
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d057      	beq.n	800d302 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 800d252:	f7fd fa1b 	bl	800a68c <HAL_GetTick>
 800d256:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d258:	e00e      	b.n	800d278 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d25a:	f7fd fa17 	bl	800a68c <HAL_GetTick>
 800d25e:	4602      	mov	r2, r0
 800d260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d262:	1ad3      	subs	r3, r2, r3
 800d264:	f241 3288 	movw	r2, #5000	; 0x1388
 800d268:	4293      	cmp	r3, r2
 800d26a:	d905      	bls.n	800d278 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 800d26c:	2303      	movs	r3, #3
 800d26e:	e2f8      	b.n	800d862 <HAL_RCC_OscConfig+0xdaa>
 800d270:	46020c00 	.word	0x46020c00
 800d274:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d278:	4b9c      	ldr	r3, [pc, #624]	; (800d4ec <HAL_RCC_OscConfig+0xa34>)
 800d27a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d27e:	f003 0302 	and.w	r3, r3, #2
 800d282:	2b00      	cmp	r3, #0
 800d284:	d0e9      	beq.n	800d25a <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	689b      	ldr	r3, [r3, #8]
 800d28a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d01b      	beq.n	800d2ca <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800d292:	4b96      	ldr	r3, [pc, #600]	; (800d4ec <HAL_RCC_OscConfig+0xa34>)
 800d294:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d298:	4a94      	ldr	r2, [pc, #592]	; (800d4ec <HAL_RCC_OscConfig+0xa34>)
 800d29a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d29e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800d2a2:	e00a      	b.n	800d2ba <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d2a4:	f7fd f9f2 	bl	800a68c <HAL_GetTick>
 800d2a8:	4602      	mov	r2, r0
 800d2aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2ac:	1ad3      	subs	r3, r2, r3
 800d2ae:	f241 3288 	movw	r2, #5000	; 0x1388
 800d2b2:	4293      	cmp	r3, r2
 800d2b4:	d901      	bls.n	800d2ba <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 800d2b6:	2303      	movs	r3, #3
 800d2b8:	e2d3      	b.n	800d862 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800d2ba:	4b8c      	ldr	r3, [pc, #560]	; (800d4ec <HAL_RCC_OscConfig+0xa34>)
 800d2bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d2c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d0ed      	beq.n	800d2a4 <HAL_RCC_OscConfig+0x7ec>
 800d2c8:	e053      	b.n	800d372 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800d2ca:	4b88      	ldr	r3, [pc, #544]	; (800d4ec <HAL_RCC_OscConfig+0xa34>)
 800d2cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d2d0:	4a86      	ldr	r2, [pc, #536]	; (800d4ec <HAL_RCC_OscConfig+0xa34>)
 800d2d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d2d6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800d2da:	e00a      	b.n	800d2f2 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d2dc:	f7fd f9d6 	bl	800a68c <HAL_GetTick>
 800d2e0:	4602      	mov	r2, r0
 800d2e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2e4:	1ad3      	subs	r3, r2, r3
 800d2e6:	f241 3288 	movw	r2, #5000	; 0x1388
 800d2ea:	4293      	cmp	r3, r2
 800d2ec:	d901      	bls.n	800d2f2 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 800d2ee:	2303      	movs	r3, #3
 800d2f0:	e2b7      	b.n	800d862 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800d2f2:	4b7e      	ldr	r3, [pc, #504]	; (800d4ec <HAL_RCC_OscConfig+0xa34>)
 800d2f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d2f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d1ed      	bne.n	800d2dc <HAL_RCC_OscConfig+0x824>
 800d300:	e037      	b.n	800d372 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 800d302:	f7fd f9c3 	bl	800a68c <HAL_GetTick>
 800d306:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800d308:	e00a      	b.n	800d320 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d30a:	f7fd f9bf 	bl	800a68c <HAL_GetTick>
 800d30e:	4602      	mov	r2, r0
 800d310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d312:	1ad3      	subs	r3, r2, r3
 800d314:	f241 3288 	movw	r2, #5000	; 0x1388
 800d318:	4293      	cmp	r3, r2
 800d31a:	d901      	bls.n	800d320 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 800d31c:	2303      	movs	r3, #3
 800d31e:	e2a0      	b.n	800d862 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800d320:	4b72      	ldr	r3, [pc, #456]	; (800d4ec <HAL_RCC_OscConfig+0xa34>)
 800d322:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d326:	f003 0302 	and.w	r3, r3, #2
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d1ed      	bne.n	800d30a <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800d32e:	4b6f      	ldr	r3, [pc, #444]	; (800d4ec <HAL_RCC_OscConfig+0xa34>)
 800d330:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d334:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d01a      	beq.n	800d372 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800d33c:	4b6b      	ldr	r3, [pc, #428]	; (800d4ec <HAL_RCC_OscConfig+0xa34>)
 800d33e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d342:	4a6a      	ldr	r2, [pc, #424]	; (800d4ec <HAL_RCC_OscConfig+0xa34>)
 800d344:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d348:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800d34c:	e00a      	b.n	800d364 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d34e:	f7fd f99d 	bl	800a68c <HAL_GetTick>
 800d352:	4602      	mov	r2, r0
 800d354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d356:	1ad3      	subs	r3, r2, r3
 800d358:	f241 3288 	movw	r2, #5000	; 0x1388
 800d35c:	4293      	cmp	r3, r2
 800d35e:	d901      	bls.n	800d364 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 800d360:	2303      	movs	r3, #3
 800d362:	e27e      	b.n	800d862 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800d364:	4b61      	ldr	r3, [pc, #388]	; (800d4ec <HAL_RCC_OscConfig+0xa34>)
 800d366:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d36a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d1ed      	bne.n	800d34e <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800d372:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800d376:	2b01      	cmp	r3, #1
 800d378:	d107      	bne.n	800d38a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d37a:	4b5c      	ldr	r3, [pc, #368]	; (800d4ec <HAL_RCC_OscConfig+0xa34>)
 800d37c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d380:	4a5a      	ldr	r2, [pc, #360]	; (800d4ec <HAL_RCC_OscConfig+0xa34>)
 800d382:	f023 0304 	bic.w	r3, r3, #4
 800d386:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	f003 0320 	and.w	r3, r3, #32
 800d392:	2b00      	cmp	r3, #0
 800d394:	d036      	beq.n	800d404 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d019      	beq.n	800d3d2 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 800d39e:	4b53      	ldr	r3, [pc, #332]	; (800d4ec <HAL_RCC_OscConfig+0xa34>)
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	4a52      	ldr	r2, [pc, #328]	; (800d4ec <HAL_RCC_OscConfig+0xa34>)
 800d3a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d3a8:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800d3aa:	f7fd f96f 	bl	800a68c <HAL_GetTick>
 800d3ae:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800d3b0:	e008      	b.n	800d3c4 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800d3b2:	f7fd f96b 	bl	800a68c <HAL_GetTick>
 800d3b6:	4602      	mov	r2, r0
 800d3b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3ba:	1ad3      	subs	r3, r2, r3
 800d3bc:	2b02      	cmp	r3, #2
 800d3be:	d901      	bls.n	800d3c4 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 800d3c0:	2303      	movs	r3, #3
 800d3c2:	e24e      	b.n	800d862 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800d3c4:	4b49      	ldr	r3, [pc, #292]	; (800d4ec <HAL_RCC_OscConfig+0xa34>)
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d0f0      	beq.n	800d3b2 <HAL_RCC_OscConfig+0x8fa>
 800d3d0:	e018      	b.n	800d404 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 800d3d2:	4b46      	ldr	r3, [pc, #280]	; (800d4ec <HAL_RCC_OscConfig+0xa34>)
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	4a45      	ldr	r2, [pc, #276]	; (800d4ec <HAL_RCC_OscConfig+0xa34>)
 800d3d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d3dc:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800d3de:	f7fd f955 	bl	800a68c <HAL_GetTick>
 800d3e2:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800d3e4:	e008      	b.n	800d3f8 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800d3e6:	f7fd f951 	bl	800a68c <HAL_GetTick>
 800d3ea:	4602      	mov	r2, r0
 800d3ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3ee:	1ad3      	subs	r3, r2, r3
 800d3f0:	2b02      	cmp	r3, #2
 800d3f2:	d901      	bls.n	800d3f8 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 800d3f4:	2303      	movs	r3, #3
 800d3f6:	e234      	b.n	800d862 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800d3f8:	4b3c      	ldr	r3, [pc, #240]	; (800d4ec <HAL_RCC_OscConfig+0xa34>)
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d400:	2b00      	cmp	r3, #0
 800d402:	d1f0      	bne.n	800d3e6 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d036      	beq.n	800d47e <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d414:	2b00      	cmp	r3, #0
 800d416:	d019      	beq.n	800d44c <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 800d418:	4b34      	ldr	r3, [pc, #208]	; (800d4ec <HAL_RCC_OscConfig+0xa34>)
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	4a33      	ldr	r2, [pc, #204]	; (800d4ec <HAL_RCC_OscConfig+0xa34>)
 800d41e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d422:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800d424:	f7fd f932 	bl	800a68c <HAL_GetTick>
 800d428:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800d42a:	e008      	b.n	800d43e <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800d42c:	f7fd f92e 	bl	800a68c <HAL_GetTick>
 800d430:	4602      	mov	r2, r0
 800d432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d434:	1ad3      	subs	r3, r2, r3
 800d436:	2b02      	cmp	r3, #2
 800d438:	d901      	bls.n	800d43e <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 800d43a:	2303      	movs	r3, #3
 800d43c:	e211      	b.n	800d862 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800d43e:	4b2b      	ldr	r3, [pc, #172]	; (800d4ec <HAL_RCC_OscConfig+0xa34>)
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d446:	2b00      	cmp	r3, #0
 800d448:	d0f0      	beq.n	800d42c <HAL_RCC_OscConfig+0x974>
 800d44a:	e018      	b.n	800d47e <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 800d44c:	4b27      	ldr	r3, [pc, #156]	; (800d4ec <HAL_RCC_OscConfig+0xa34>)
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	4a26      	ldr	r2, [pc, #152]	; (800d4ec <HAL_RCC_OscConfig+0xa34>)
 800d452:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d456:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800d458:	f7fd f918 	bl	800a68c <HAL_GetTick>
 800d45c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800d45e:	e008      	b.n	800d472 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800d460:	f7fd f914 	bl	800a68c <HAL_GetTick>
 800d464:	4602      	mov	r2, r0
 800d466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d468:	1ad3      	subs	r3, r2, r3
 800d46a:	2b02      	cmp	r3, #2
 800d46c:	d901      	bls.n	800d472 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 800d46e:	2303      	movs	r3, #3
 800d470:	e1f7      	b.n	800d862 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800d472:	4b1e      	ldr	r3, [pc, #120]	; (800d4ec <HAL_RCC_OscConfig+0xa34>)
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d1f0      	bne.n	800d460 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d486:	2b00      	cmp	r3, #0
 800d488:	d07f      	beq.n	800d58a <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d062      	beq.n	800d558 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 800d492:	4b16      	ldr	r3, [pc, #88]	; (800d4ec <HAL_RCC_OscConfig+0xa34>)
 800d494:	689b      	ldr	r3, [r3, #8]
 800d496:	4a15      	ldr	r2, [pc, #84]	; (800d4ec <HAL_RCC_OscConfig+0xa34>)
 800d498:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d49c:	6093      	str	r3, [r2, #8]
 800d49e:	4b13      	ldr	r3, [pc, #76]	; (800d4ec <HAL_RCC_OscConfig+0xa34>)
 800d4a0:	689b      	ldr	r3, [r3, #8]
 800d4a2:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4aa:	4910      	ldr	r1, [pc, #64]	; (800d4ec <HAL_RCC_OscConfig+0xa34>)
 800d4ac:	4313      	orrs	r3, r2
 800d4ae:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4b4:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800d4b8:	d309      	bcc.n	800d4ce <HAL_RCC_OscConfig+0xa16>
 800d4ba:	4b0c      	ldr	r3, [pc, #48]	; (800d4ec <HAL_RCC_OscConfig+0xa34>)
 800d4bc:	68db      	ldr	r3, [r3, #12]
 800d4be:	f023 021f 	bic.w	r2, r3, #31
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	6a1b      	ldr	r3, [r3, #32]
 800d4c6:	4909      	ldr	r1, [pc, #36]	; (800d4ec <HAL_RCC_OscConfig+0xa34>)
 800d4c8:	4313      	orrs	r3, r2
 800d4ca:	60cb      	str	r3, [r1, #12]
 800d4cc:	e02a      	b.n	800d524 <HAL_RCC_OscConfig+0xa6c>
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	da0c      	bge.n	800d4f0 <HAL_RCC_OscConfig+0xa38>
 800d4d6:	4b05      	ldr	r3, [pc, #20]	; (800d4ec <HAL_RCC_OscConfig+0xa34>)
 800d4d8:	68db      	ldr	r3, [r3, #12]
 800d4da:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	6a1b      	ldr	r3, [r3, #32]
 800d4e2:	015b      	lsls	r3, r3, #5
 800d4e4:	4901      	ldr	r1, [pc, #4]	; (800d4ec <HAL_RCC_OscConfig+0xa34>)
 800d4e6:	4313      	orrs	r3, r2
 800d4e8:	60cb      	str	r3, [r1, #12]
 800d4ea:	e01b      	b.n	800d524 <HAL_RCC_OscConfig+0xa6c>
 800d4ec:	46020c00 	.word	0x46020c00
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d4f8:	d30a      	bcc.n	800d510 <HAL_RCC_OscConfig+0xa58>
 800d4fa:	4ba1      	ldr	r3, [pc, #644]	; (800d780 <HAL_RCC_OscConfig+0xcc8>)
 800d4fc:	68db      	ldr	r3, [r3, #12]
 800d4fe:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	6a1b      	ldr	r3, [r3, #32]
 800d506:	029b      	lsls	r3, r3, #10
 800d508:	499d      	ldr	r1, [pc, #628]	; (800d780 <HAL_RCC_OscConfig+0xcc8>)
 800d50a:	4313      	orrs	r3, r2
 800d50c:	60cb      	str	r3, [r1, #12]
 800d50e:	e009      	b.n	800d524 <HAL_RCC_OscConfig+0xa6c>
 800d510:	4b9b      	ldr	r3, [pc, #620]	; (800d780 <HAL_RCC_OscConfig+0xcc8>)
 800d512:	68db      	ldr	r3, [r3, #12]
 800d514:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	6a1b      	ldr	r3, [r3, #32]
 800d51c:	03db      	lsls	r3, r3, #15
 800d51e:	4998      	ldr	r1, [pc, #608]	; (800d780 <HAL_RCC_OscConfig+0xcc8>)
 800d520:	4313      	orrs	r3, r2
 800d522:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 800d524:	4b96      	ldr	r3, [pc, #600]	; (800d780 <HAL_RCC_OscConfig+0xcc8>)
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	4a95      	ldr	r2, [pc, #596]	; (800d780 <HAL_RCC_OscConfig+0xcc8>)
 800d52a:	f043 0310 	orr.w	r3, r3, #16
 800d52e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800d530:	f7fd f8ac 	bl	800a68c <HAL_GetTick>
 800d534:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800d536:	e008      	b.n	800d54a <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800d538:	f7fd f8a8 	bl	800a68c <HAL_GetTick>
 800d53c:	4602      	mov	r2, r0
 800d53e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d540:	1ad3      	subs	r3, r2, r3
 800d542:	2b02      	cmp	r3, #2
 800d544:	d901      	bls.n	800d54a <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 800d546:	2303      	movs	r3, #3
 800d548:	e18b      	b.n	800d862 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800d54a:	4b8d      	ldr	r3, [pc, #564]	; (800d780 <HAL_RCC_OscConfig+0xcc8>)
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	f003 0320 	and.w	r3, r3, #32
 800d552:	2b00      	cmp	r3, #0
 800d554:	d0f0      	beq.n	800d538 <HAL_RCC_OscConfig+0xa80>
 800d556:	e018      	b.n	800d58a <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 800d558:	4b89      	ldr	r3, [pc, #548]	; (800d780 <HAL_RCC_OscConfig+0xcc8>)
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	4a88      	ldr	r2, [pc, #544]	; (800d780 <HAL_RCC_OscConfig+0xcc8>)
 800d55e:	f023 0310 	bic.w	r3, r3, #16
 800d562:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800d564:	f7fd f892 	bl	800a68c <HAL_GetTick>
 800d568:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800d56a:	e008      	b.n	800d57e <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800d56c:	f7fd f88e 	bl	800a68c <HAL_GetTick>
 800d570:	4602      	mov	r2, r0
 800d572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d574:	1ad3      	subs	r3, r2, r3
 800d576:	2b02      	cmp	r3, #2
 800d578:	d901      	bls.n	800d57e <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 800d57a:	2303      	movs	r3, #3
 800d57c:	e171      	b.n	800d862 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800d57e:	4b80      	ldr	r3, [pc, #512]	; (800d780 <HAL_RCC_OscConfig+0xcc8>)
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	f003 0320 	and.w	r3, r3, #32
 800d586:	2b00      	cmp	r3, #0
 800d588:	d1f0      	bne.n	800d56c <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d58e:	2b00      	cmp	r3, #0
 800d590:	f000 8166 	beq.w	800d860 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 800d594:	2300      	movs	r3, #0
 800d596:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800d59a:	4b79      	ldr	r3, [pc, #484]	; (800d780 <HAL_RCC_OscConfig+0xcc8>)
 800d59c:	69db      	ldr	r3, [r3, #28]
 800d59e:	f003 030c 	and.w	r3, r3, #12
 800d5a2:	2b0c      	cmp	r3, #12
 800d5a4:	f000 80f2 	beq.w	800d78c <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5ac:	2b02      	cmp	r3, #2
 800d5ae:	f040 80c5 	bne.w	800d73c <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800d5b2:	4b73      	ldr	r3, [pc, #460]	; (800d780 <HAL_RCC_OscConfig+0xcc8>)
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	4a72      	ldr	r2, [pc, #456]	; (800d780 <HAL_RCC_OscConfig+0xcc8>)
 800d5b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d5bc:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800d5be:	f7fd f865 	bl	800a68c <HAL_GetTick>
 800d5c2:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800d5c4:	e008      	b.n	800d5d8 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d5c6:	f7fd f861 	bl	800a68c <HAL_GetTick>
 800d5ca:	4602      	mov	r2, r0
 800d5cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5ce:	1ad3      	subs	r3, r2, r3
 800d5d0:	2b02      	cmp	r3, #2
 800d5d2:	d901      	bls.n	800d5d8 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 800d5d4:	2303      	movs	r3, #3
 800d5d6:	e144      	b.n	800d862 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800d5d8:	4b69      	ldr	r3, [pc, #420]	; (800d780 <HAL_RCC_OscConfig+0xcc8>)
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d1f0      	bne.n	800d5c6 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d5e4:	4b66      	ldr	r3, [pc, #408]	; (800d780 <HAL_RCC_OscConfig+0xcc8>)
 800d5e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d5ea:	f003 0304 	and.w	r3, r3, #4
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d111      	bne.n	800d616 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 800d5f2:	4b63      	ldr	r3, [pc, #396]	; (800d780 <HAL_RCC_OscConfig+0xcc8>)
 800d5f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d5f8:	4a61      	ldr	r2, [pc, #388]	; (800d780 <HAL_RCC_OscConfig+0xcc8>)
 800d5fa:	f043 0304 	orr.w	r3, r3, #4
 800d5fe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800d602:	4b5f      	ldr	r3, [pc, #380]	; (800d780 <HAL_RCC_OscConfig+0xcc8>)
 800d604:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d608:	f003 0304 	and.w	r3, r3, #4
 800d60c:	60fb      	str	r3, [r7, #12]
 800d60e:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 800d610:	2301      	movs	r3, #1
 800d612:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 800d616:	4b5b      	ldr	r3, [pc, #364]	; (800d784 <HAL_RCC_OscConfig+0xccc>)
 800d618:	68db      	ldr	r3, [r3, #12]
 800d61a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d61e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800d622:	d102      	bne.n	800d62a <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 800d624:	2301      	movs	r3, #1
 800d626:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800d62a:	4b56      	ldr	r3, [pc, #344]	; (800d784 <HAL_RCC_OscConfig+0xccc>)
 800d62c:	68db      	ldr	r3, [r3, #12]
 800d62e:	4a55      	ldr	r2, [pc, #340]	; (800d784 <HAL_RCC_OscConfig+0xccc>)
 800d630:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d634:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 800d636:	4b52      	ldr	r3, [pc, #328]	; (800d780 <HAL_RCC_OscConfig+0xcc8>)
 800d638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d63a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d63e:	f023 0303 	bic.w	r3, r3, #3
 800d642:	687a      	ldr	r2, [r7, #4]
 800d644:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800d646:	687a      	ldr	r2, [r7, #4]
 800d648:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800d64a:	3a01      	subs	r2, #1
 800d64c:	0212      	lsls	r2, r2, #8
 800d64e:	4311      	orrs	r1, r2
 800d650:	687a      	ldr	r2, [r7, #4]
 800d652:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800d654:	430a      	orrs	r2, r1
 800d656:	494a      	ldr	r1, [pc, #296]	; (800d780 <HAL_RCC_OscConfig+0xcc8>)
 800d658:	4313      	orrs	r3, r2
 800d65a:	628b      	str	r3, [r1, #40]	; 0x28
 800d65c:	4b48      	ldr	r3, [pc, #288]	; (800d780 <HAL_RCC_OscConfig+0xcc8>)
 800d65e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d660:	4b49      	ldr	r3, [pc, #292]	; (800d788 <HAL_RCC_OscConfig+0xcd0>)
 800d662:	4013      	ands	r3, r2
 800d664:	687a      	ldr	r2, [r7, #4]
 800d666:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800d668:	3a01      	subs	r2, #1
 800d66a:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800d66e:	687a      	ldr	r2, [r7, #4]
 800d670:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800d672:	3a01      	subs	r2, #1
 800d674:	0252      	lsls	r2, r2, #9
 800d676:	b292      	uxth	r2, r2
 800d678:	4311      	orrs	r1, r2
 800d67a:	687a      	ldr	r2, [r7, #4]
 800d67c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800d67e:	3a01      	subs	r2, #1
 800d680:	0412      	lsls	r2, r2, #16
 800d682:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800d686:	4311      	orrs	r1, r2
 800d688:	687a      	ldr	r2, [r7, #4]
 800d68a:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800d68c:	3a01      	subs	r2, #1
 800d68e:	0612      	lsls	r2, r2, #24
 800d690:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800d694:	430a      	orrs	r2, r1
 800d696:	493a      	ldr	r1, [pc, #232]	; (800d780 <HAL_RCC_OscConfig+0xcc8>)
 800d698:	4313      	orrs	r3, r2
 800d69a:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800d69c:	4b38      	ldr	r3, [pc, #224]	; (800d780 <HAL_RCC_OscConfig+0xcc8>)
 800d69e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6a0:	4a37      	ldr	r2, [pc, #220]	; (800d780 <HAL_RCC_OscConfig+0xcc8>)
 800d6a2:	f023 0310 	bic.w	r3, r3, #16
 800d6a6:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d6ac:	4a34      	ldr	r2, [pc, #208]	; (800d780 <HAL_RCC_OscConfig+0xcc8>)
 800d6ae:	00db      	lsls	r3, r3, #3
 800d6b0:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800d6b2:	4b33      	ldr	r3, [pc, #204]	; (800d780 <HAL_RCC_OscConfig+0xcc8>)
 800d6b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6b6:	4a32      	ldr	r2, [pc, #200]	; (800d780 <HAL_RCC_OscConfig+0xcc8>)
 800d6b8:	f043 0310 	orr.w	r3, r3, #16
 800d6bc:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 800d6be:	4b30      	ldr	r3, [pc, #192]	; (800d780 <HAL_RCC_OscConfig+0xcc8>)
 800d6c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6c2:	f023 020c 	bic.w	r2, r3, #12
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d6ca:	492d      	ldr	r1, [pc, #180]	; (800d780 <HAL_RCC_OscConfig+0xcc8>)
 800d6cc:	4313      	orrs	r3, r2
 800d6ce:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 800d6d0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d6d4:	2b01      	cmp	r3, #1
 800d6d6:	d105      	bne.n	800d6e4 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800d6d8:	4b2a      	ldr	r3, [pc, #168]	; (800d784 <HAL_RCC_OscConfig+0xccc>)
 800d6da:	68db      	ldr	r3, [r3, #12]
 800d6dc:	4a29      	ldr	r2, [pc, #164]	; (800d784 <HAL_RCC_OscConfig+0xccc>)
 800d6de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d6e2:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 800d6e4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800d6e8:	2b01      	cmp	r3, #1
 800d6ea:	d107      	bne.n	800d6fc <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 800d6ec:	4b24      	ldr	r3, [pc, #144]	; (800d780 <HAL_RCC_OscConfig+0xcc8>)
 800d6ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d6f2:	4a23      	ldr	r2, [pc, #140]	; (800d780 <HAL_RCC_OscConfig+0xcc8>)
 800d6f4:	f023 0304 	bic.w	r3, r3, #4
 800d6f8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800d6fc:	4b20      	ldr	r3, [pc, #128]	; (800d780 <HAL_RCC_OscConfig+0xcc8>)
 800d6fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d700:	4a1f      	ldr	r2, [pc, #124]	; (800d780 <HAL_RCC_OscConfig+0xcc8>)
 800d702:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d706:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 800d708:	4b1d      	ldr	r3, [pc, #116]	; (800d780 <HAL_RCC_OscConfig+0xcc8>)
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	4a1c      	ldr	r2, [pc, #112]	; (800d780 <HAL_RCC_OscConfig+0xcc8>)
 800d70e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d712:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800d714:	f7fc ffba 	bl	800a68c <HAL_GetTick>
 800d718:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800d71a:	e008      	b.n	800d72e <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d71c:	f7fc ffb6 	bl	800a68c <HAL_GetTick>
 800d720:	4602      	mov	r2, r0
 800d722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d724:	1ad3      	subs	r3, r2, r3
 800d726:	2b02      	cmp	r3, #2
 800d728:	d901      	bls.n	800d72e <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 800d72a:	2303      	movs	r3, #3
 800d72c:	e099      	b.n	800d862 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800d72e:	4b14      	ldr	r3, [pc, #80]	; (800d780 <HAL_RCC_OscConfig+0xcc8>)
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d736:	2b00      	cmp	r3, #0
 800d738:	d0f0      	beq.n	800d71c <HAL_RCC_OscConfig+0xc64>
 800d73a:	e091      	b.n	800d860 <HAL_RCC_OscConfig+0xda8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800d73c:	4b10      	ldr	r3, [pc, #64]	; (800d780 <HAL_RCC_OscConfig+0xcc8>)
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	4a0f      	ldr	r2, [pc, #60]	; (800d780 <HAL_RCC_OscConfig+0xcc8>)
 800d742:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d746:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800d748:	f7fc ffa0 	bl	800a68c <HAL_GetTick>
 800d74c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800d74e:	e008      	b.n	800d762 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d750:	f7fc ff9c 	bl	800a68c <HAL_GetTick>
 800d754:	4602      	mov	r2, r0
 800d756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d758:	1ad3      	subs	r3, r2, r3
 800d75a:	2b02      	cmp	r3, #2
 800d75c:	d901      	bls.n	800d762 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 800d75e:	2303      	movs	r3, #3
 800d760:	e07f      	b.n	800d862 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800d762:	4b07      	ldr	r3, [pc, #28]	; (800d780 <HAL_RCC_OscConfig+0xcc8>)
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d1f0      	bne.n	800d750 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800d76e:	4b04      	ldr	r3, [pc, #16]	; (800d780 <HAL_RCC_OscConfig+0xcc8>)
 800d770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d772:	4a03      	ldr	r2, [pc, #12]	; (800d780 <HAL_RCC_OscConfig+0xcc8>)
 800d774:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800d778:	f023 0303 	bic.w	r3, r3, #3
 800d77c:	6293      	str	r3, [r2, #40]	; 0x28
 800d77e:	e06f      	b.n	800d860 <HAL_RCC_OscConfig+0xda8>
 800d780:	46020c00 	.word	0x46020c00
 800d784:	46020800 	.word	0x46020800
 800d788:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800d78c:	4b37      	ldr	r3, [pc, #220]	; (800d86c <HAL_RCC_OscConfig+0xdb4>)
 800d78e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d790:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800d792:	4b36      	ldr	r3, [pc, #216]	; (800d86c <HAL_RCC_OscConfig+0xdb4>)
 800d794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d796:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d79c:	2b01      	cmp	r3, #1
 800d79e:	d039      	beq.n	800d814 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800d7a0:	69fb      	ldr	r3, [r7, #28]
 800d7a2:	f003 0203 	and.w	r2, r3, #3
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d7aa:	429a      	cmp	r2, r3
 800d7ac:	d132      	bne.n	800d814 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800d7ae:	69fb      	ldr	r3, [r7, #28]
 800d7b0:	0a1b      	lsrs	r3, r3, #8
 800d7b2:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7ba:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800d7bc:	429a      	cmp	r2, r3
 800d7be:	d129      	bne.n	800d814 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800d7c0:	69fb      	ldr	r3, [r7, #28]
 800d7c2:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800d7ca:	429a      	cmp	r2, r3
 800d7cc:	d122      	bne.n	800d814 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800d7ce:	69bb      	ldr	r3, [r7, #24]
 800d7d0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d7d8:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800d7da:	429a      	cmp	r2, r3
 800d7dc:	d11a      	bne.n	800d814 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800d7de:	69bb      	ldr	r3, [r7, #24]
 800d7e0:	0a5b      	lsrs	r3, r3, #9
 800d7e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d7ea:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800d7ec:	429a      	cmp	r2, r3
 800d7ee:	d111      	bne.n	800d814 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800d7f0:	69bb      	ldr	r3, [r7, #24]
 800d7f2:	0c1b      	lsrs	r3, r3, #16
 800d7f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d7fc:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800d7fe:	429a      	cmp	r2, r3
 800d800:	d108      	bne.n	800d814 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800d802:	69bb      	ldr	r3, [r7, #24]
 800d804:	0e1b      	lsrs	r3, r3, #24
 800d806:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d80e:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800d810:	429a      	cmp	r2, r3
 800d812:	d001      	beq.n	800d818 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 800d814:	2301      	movs	r3, #1
 800d816:	e024      	b.n	800d862 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800d818:	4b14      	ldr	r3, [pc, #80]	; (800d86c <HAL_RCC_OscConfig+0xdb4>)
 800d81a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d81c:	08db      	lsrs	r3, r3, #3
 800d81e:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800d826:	429a      	cmp	r2, r3
 800d828:	d01a      	beq.n	800d860 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800d82a:	4b10      	ldr	r3, [pc, #64]	; (800d86c <HAL_RCC_OscConfig+0xdb4>)
 800d82c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d82e:	4a0f      	ldr	r2, [pc, #60]	; (800d86c <HAL_RCC_OscConfig+0xdb4>)
 800d830:	f023 0310 	bic.w	r3, r3, #16
 800d834:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d836:	f7fc ff29 	bl	800a68c <HAL_GetTick>
 800d83a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 800d83c:	bf00      	nop
 800d83e:	f7fc ff25 	bl	800a68c <HAL_GetTick>
 800d842:	4602      	mov	r2, r0
 800d844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d846:	4293      	cmp	r3, r2
 800d848:	d0f9      	beq.n	800d83e <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d84e:	4a07      	ldr	r2, [pc, #28]	; (800d86c <HAL_RCC_OscConfig+0xdb4>)
 800d850:	00db      	lsls	r3, r3, #3
 800d852:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800d854:	4b05      	ldr	r3, [pc, #20]	; (800d86c <HAL_RCC_OscConfig+0xdb4>)
 800d856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d858:	4a04      	ldr	r2, [pc, #16]	; (800d86c <HAL_RCC_OscConfig+0xdb4>)
 800d85a:	f043 0310 	orr.w	r3, r3, #16
 800d85e:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }
  }
  return HAL_OK;
 800d860:	2300      	movs	r3, #0
}
 800d862:	4618      	mov	r0, r3
 800d864:	3738      	adds	r7, #56	; 0x38
 800d866:	46bd      	mov	sp, r7
 800d868:	bd80      	pop	{r7, pc}
 800d86a:	bf00      	nop
 800d86c:	46020c00 	.word	0x46020c00

0800d870 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 800d870:	b580      	push	{r7, lr}
 800d872:	b086      	sub	sp, #24
 800d874:	af00      	add	r7, sp, #0
 800d876:	6078      	str	r0, [r7, #4]
 800d878:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d101      	bne.n	800d884 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800d880:	2301      	movs	r3, #1
 800d882:	e1d9      	b.n	800dc38 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800d884:	4b9b      	ldr	r3, [pc, #620]	; (800daf4 <HAL_RCC_ClockConfig+0x284>)
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	f003 030f 	and.w	r3, r3, #15
 800d88c:	683a      	ldr	r2, [r7, #0]
 800d88e:	429a      	cmp	r2, r3
 800d890:	d910      	bls.n	800d8b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d892:	4b98      	ldr	r3, [pc, #608]	; (800daf4 <HAL_RCC_ClockConfig+0x284>)
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	f023 020f 	bic.w	r2, r3, #15
 800d89a:	4996      	ldr	r1, [pc, #600]	; (800daf4 <HAL_RCC_ClockConfig+0x284>)
 800d89c:	683b      	ldr	r3, [r7, #0]
 800d89e:	4313      	orrs	r3, r2
 800d8a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d8a2:	4b94      	ldr	r3, [pc, #592]	; (800daf4 <HAL_RCC_ClockConfig+0x284>)
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	f003 030f 	and.w	r3, r3, #15
 800d8aa:	683a      	ldr	r2, [r7, #0]
 800d8ac:	429a      	cmp	r2, r3
 800d8ae:	d001      	beq.n	800d8b4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800d8b0:	2301      	movs	r3, #1
 800d8b2:	e1c1      	b.n	800dc38 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	f003 0310 	and.w	r3, r3, #16
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d010      	beq.n	800d8e2 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	695a      	ldr	r2, [r3, #20]
 800d8c4:	4b8c      	ldr	r3, [pc, #560]	; (800daf8 <HAL_RCC_ClockConfig+0x288>)
 800d8c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8c8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d8cc:	429a      	cmp	r2, r3
 800d8ce:	d908      	bls.n	800d8e2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 800d8d0:	4b89      	ldr	r3, [pc, #548]	; (800daf8 <HAL_RCC_ClockConfig+0x288>)
 800d8d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8d4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	695b      	ldr	r3, [r3, #20]
 800d8dc:	4986      	ldr	r1, [pc, #536]	; (800daf8 <HAL_RCC_ClockConfig+0x288>)
 800d8de:	4313      	orrs	r3, r2
 800d8e0:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	f003 0308 	and.w	r3, r3, #8
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d012      	beq.n	800d914 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	691a      	ldr	r2, [r3, #16]
 800d8f2:	4b81      	ldr	r3, [pc, #516]	; (800daf8 <HAL_RCC_ClockConfig+0x288>)
 800d8f4:	6a1b      	ldr	r3, [r3, #32]
 800d8f6:	091b      	lsrs	r3, r3, #4
 800d8f8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d8fc:	429a      	cmp	r2, r3
 800d8fe:	d909      	bls.n	800d914 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800d900:	4b7d      	ldr	r3, [pc, #500]	; (800daf8 <HAL_RCC_ClockConfig+0x288>)
 800d902:	6a1b      	ldr	r3, [r3, #32]
 800d904:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	691b      	ldr	r3, [r3, #16]
 800d90c:	011b      	lsls	r3, r3, #4
 800d90e:	497a      	ldr	r1, [pc, #488]	; (800daf8 <HAL_RCC_ClockConfig+0x288>)
 800d910:	4313      	orrs	r3, r2
 800d912:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	f003 0304 	and.w	r3, r3, #4
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d010      	beq.n	800d942 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	68da      	ldr	r2, [r3, #12]
 800d924:	4b74      	ldr	r3, [pc, #464]	; (800daf8 <HAL_RCC_ClockConfig+0x288>)
 800d926:	6a1b      	ldr	r3, [r3, #32]
 800d928:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d92c:	429a      	cmp	r2, r3
 800d92e:	d908      	bls.n	800d942 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800d930:	4b71      	ldr	r3, [pc, #452]	; (800daf8 <HAL_RCC_ClockConfig+0x288>)
 800d932:	6a1b      	ldr	r3, [r3, #32]
 800d934:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	68db      	ldr	r3, [r3, #12]
 800d93c:	496e      	ldr	r1, [pc, #440]	; (800daf8 <HAL_RCC_ClockConfig+0x288>)
 800d93e:	4313      	orrs	r3, r2
 800d940:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	f003 0302 	and.w	r3, r3, #2
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d010      	beq.n	800d970 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	689a      	ldr	r2, [r3, #8]
 800d952:	4b69      	ldr	r3, [pc, #420]	; (800daf8 <HAL_RCC_ClockConfig+0x288>)
 800d954:	6a1b      	ldr	r3, [r3, #32]
 800d956:	f003 030f 	and.w	r3, r3, #15
 800d95a:	429a      	cmp	r2, r3
 800d95c:	d908      	bls.n	800d970 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800d95e:	4b66      	ldr	r3, [pc, #408]	; (800daf8 <HAL_RCC_ClockConfig+0x288>)
 800d960:	6a1b      	ldr	r3, [r3, #32]
 800d962:	f023 020f 	bic.w	r2, r3, #15
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	689b      	ldr	r3, [r3, #8]
 800d96a:	4963      	ldr	r1, [pc, #396]	; (800daf8 <HAL_RCC_ClockConfig+0x288>)
 800d96c:	4313      	orrs	r3, r2
 800d96e:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	f003 0301 	and.w	r3, r3, #1
 800d978:	2b00      	cmp	r3, #0
 800d97a:	f000 80d2 	beq.w	800db22 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800d97e:	2300      	movs	r3, #0
 800d980:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	685b      	ldr	r3, [r3, #4]
 800d986:	2b03      	cmp	r3, #3
 800d988:	d143      	bne.n	800da12 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d98a:	4b5b      	ldr	r3, [pc, #364]	; (800daf8 <HAL_RCC_ClockConfig+0x288>)
 800d98c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d990:	f003 0304 	and.w	r3, r3, #4
 800d994:	2b00      	cmp	r3, #0
 800d996:	d110      	bne.n	800d9ba <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800d998:	4b57      	ldr	r3, [pc, #348]	; (800daf8 <HAL_RCC_ClockConfig+0x288>)
 800d99a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d99e:	4a56      	ldr	r2, [pc, #344]	; (800daf8 <HAL_RCC_ClockConfig+0x288>)
 800d9a0:	f043 0304 	orr.w	r3, r3, #4
 800d9a4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800d9a8:	4b53      	ldr	r3, [pc, #332]	; (800daf8 <HAL_RCC_ClockConfig+0x288>)
 800d9aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d9ae:	f003 0304 	and.w	r3, r3, #4
 800d9b2:	60bb      	str	r3, [r7, #8]
 800d9b4:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800d9b6:	2301      	movs	r3, #1
 800d9b8:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800d9ba:	f7fc fe67 	bl	800a68c <HAL_GetTick>
 800d9be:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 800d9c0:	4b4e      	ldr	r3, [pc, #312]	; (800dafc <HAL_RCC_ClockConfig+0x28c>)
 800d9c2:	68db      	ldr	r3, [r3, #12]
 800d9c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d00f      	beq.n	800d9ec <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800d9cc:	e008      	b.n	800d9e0 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800d9ce:	f7fc fe5d 	bl	800a68c <HAL_GetTick>
 800d9d2:	4602      	mov	r2, r0
 800d9d4:	693b      	ldr	r3, [r7, #16]
 800d9d6:	1ad3      	subs	r3, r2, r3
 800d9d8:	2b02      	cmp	r3, #2
 800d9da:	d901      	bls.n	800d9e0 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 800d9dc:	2303      	movs	r3, #3
 800d9de:	e12b      	b.n	800dc38 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800d9e0:	4b46      	ldr	r3, [pc, #280]	; (800dafc <HAL_RCC_ClockConfig+0x28c>)
 800d9e2:	68db      	ldr	r3, [r3, #12]
 800d9e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d0f0      	beq.n	800d9ce <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800d9ec:	7dfb      	ldrb	r3, [r7, #23]
 800d9ee:	2b01      	cmp	r3, #1
 800d9f0:	d107      	bne.n	800da02 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800d9f2:	4b41      	ldr	r3, [pc, #260]	; (800daf8 <HAL_RCC_ClockConfig+0x288>)
 800d9f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d9f8:	4a3f      	ldr	r2, [pc, #252]	; (800daf8 <HAL_RCC_ClockConfig+0x288>)
 800d9fa:	f023 0304 	bic.w	r3, r3, #4
 800d9fe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800da02:	4b3d      	ldr	r3, [pc, #244]	; (800daf8 <HAL_RCC_ClockConfig+0x288>)
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d121      	bne.n	800da52 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800da0e:	2301      	movs	r3, #1
 800da10:	e112      	b.n	800dc38 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	685b      	ldr	r3, [r3, #4]
 800da16:	2b02      	cmp	r3, #2
 800da18:	d107      	bne.n	800da2a <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800da1a:	4b37      	ldr	r3, [pc, #220]	; (800daf8 <HAL_RCC_ClockConfig+0x288>)
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800da22:	2b00      	cmp	r3, #0
 800da24:	d115      	bne.n	800da52 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800da26:	2301      	movs	r3, #1
 800da28:	e106      	b.n	800dc38 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	685b      	ldr	r3, [r3, #4]
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d107      	bne.n	800da42 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800da32:	4b31      	ldr	r3, [pc, #196]	; (800daf8 <HAL_RCC_ClockConfig+0x288>)
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	f003 0304 	and.w	r3, r3, #4
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d109      	bne.n	800da52 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800da3e:	2301      	movs	r3, #1
 800da40:	e0fa      	b.n	800dc38 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800da42:	4b2d      	ldr	r3, [pc, #180]	; (800daf8 <HAL_RCC_ClockConfig+0x288>)
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d101      	bne.n	800da52 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800da4e:	2301      	movs	r3, #1
 800da50:	e0f2      	b.n	800dc38 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800da52:	4b29      	ldr	r3, [pc, #164]	; (800daf8 <HAL_RCC_ClockConfig+0x288>)
 800da54:	69db      	ldr	r3, [r3, #28]
 800da56:	f023 0203 	bic.w	r2, r3, #3
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	685b      	ldr	r3, [r3, #4]
 800da5e:	4926      	ldr	r1, [pc, #152]	; (800daf8 <HAL_RCC_ClockConfig+0x288>)
 800da60:	4313      	orrs	r3, r2
 800da62:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 800da64:	f7fc fe12 	bl	800a68c <HAL_GetTick>
 800da68:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	685b      	ldr	r3, [r3, #4]
 800da6e:	2b03      	cmp	r3, #3
 800da70:	d112      	bne.n	800da98 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800da72:	e00a      	b.n	800da8a <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800da74:	f7fc fe0a 	bl	800a68c <HAL_GetTick>
 800da78:	4602      	mov	r2, r0
 800da7a:	693b      	ldr	r3, [r7, #16]
 800da7c:	1ad3      	subs	r3, r2, r3
 800da7e:	f241 3288 	movw	r2, #5000	; 0x1388
 800da82:	4293      	cmp	r3, r2
 800da84:	d901      	bls.n	800da8a <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800da86:	2303      	movs	r3, #3
 800da88:	e0d6      	b.n	800dc38 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800da8a:	4b1b      	ldr	r3, [pc, #108]	; (800daf8 <HAL_RCC_ClockConfig+0x288>)
 800da8c:	69db      	ldr	r3, [r3, #28]
 800da8e:	f003 030c 	and.w	r3, r3, #12
 800da92:	2b0c      	cmp	r3, #12
 800da94:	d1ee      	bne.n	800da74 <HAL_RCC_ClockConfig+0x204>
 800da96:	e044      	b.n	800db22 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	685b      	ldr	r3, [r3, #4]
 800da9c:	2b02      	cmp	r3, #2
 800da9e:	d112      	bne.n	800dac6 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800daa0:	e00a      	b.n	800dab8 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800daa2:	f7fc fdf3 	bl	800a68c <HAL_GetTick>
 800daa6:	4602      	mov	r2, r0
 800daa8:	693b      	ldr	r3, [r7, #16]
 800daaa:	1ad3      	subs	r3, r2, r3
 800daac:	f241 3288 	movw	r2, #5000	; 0x1388
 800dab0:	4293      	cmp	r3, r2
 800dab2:	d901      	bls.n	800dab8 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 800dab4:	2303      	movs	r3, #3
 800dab6:	e0bf      	b.n	800dc38 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800dab8:	4b0f      	ldr	r3, [pc, #60]	; (800daf8 <HAL_RCC_ClockConfig+0x288>)
 800daba:	69db      	ldr	r3, [r3, #28]
 800dabc:	f003 030c 	and.w	r3, r3, #12
 800dac0:	2b08      	cmp	r3, #8
 800dac2:	d1ee      	bne.n	800daa2 <HAL_RCC_ClockConfig+0x232>
 800dac4:	e02d      	b.n	800db22 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	685b      	ldr	r3, [r3, #4]
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d123      	bne.n	800db16 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800dace:	e00a      	b.n	800dae6 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800dad0:	f7fc fddc 	bl	800a68c <HAL_GetTick>
 800dad4:	4602      	mov	r2, r0
 800dad6:	693b      	ldr	r3, [r7, #16]
 800dad8:	1ad3      	subs	r3, r2, r3
 800dada:	f241 3288 	movw	r2, #5000	; 0x1388
 800dade:	4293      	cmp	r3, r2
 800dae0:	d901      	bls.n	800dae6 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800dae2:	2303      	movs	r3, #3
 800dae4:	e0a8      	b.n	800dc38 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800dae6:	4b04      	ldr	r3, [pc, #16]	; (800daf8 <HAL_RCC_ClockConfig+0x288>)
 800dae8:	69db      	ldr	r3, [r3, #28]
 800daea:	f003 030c 	and.w	r3, r3, #12
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d1ee      	bne.n	800dad0 <HAL_RCC_ClockConfig+0x260>
 800daf2:	e016      	b.n	800db22 <HAL_RCC_ClockConfig+0x2b2>
 800daf4:	40022000 	.word	0x40022000
 800daf8:	46020c00 	.word	0x46020c00
 800dafc:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800db00:	f7fc fdc4 	bl	800a68c <HAL_GetTick>
 800db04:	4602      	mov	r2, r0
 800db06:	693b      	ldr	r3, [r7, #16]
 800db08:	1ad3      	subs	r3, r2, r3
 800db0a:	f241 3288 	movw	r2, #5000	; 0x1388
 800db0e:	4293      	cmp	r3, r2
 800db10:	d901      	bls.n	800db16 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800db12:	2303      	movs	r3, #3
 800db14:	e090      	b.n	800dc38 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800db16:	4b4a      	ldr	r3, [pc, #296]	; (800dc40 <HAL_RCC_ClockConfig+0x3d0>)
 800db18:	69db      	ldr	r3, [r3, #28]
 800db1a:	f003 030c 	and.w	r3, r3, #12
 800db1e:	2b04      	cmp	r3, #4
 800db20:	d1ee      	bne.n	800db00 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	f003 0302 	and.w	r3, r3, #2
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d010      	beq.n	800db50 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	689a      	ldr	r2, [r3, #8]
 800db32:	4b43      	ldr	r3, [pc, #268]	; (800dc40 <HAL_RCC_ClockConfig+0x3d0>)
 800db34:	6a1b      	ldr	r3, [r3, #32]
 800db36:	f003 030f 	and.w	r3, r3, #15
 800db3a:	429a      	cmp	r2, r3
 800db3c:	d208      	bcs.n	800db50 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800db3e:	4b40      	ldr	r3, [pc, #256]	; (800dc40 <HAL_RCC_ClockConfig+0x3d0>)
 800db40:	6a1b      	ldr	r3, [r3, #32]
 800db42:	f023 020f 	bic.w	r2, r3, #15
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	689b      	ldr	r3, [r3, #8]
 800db4a:	493d      	ldr	r1, [pc, #244]	; (800dc40 <HAL_RCC_ClockConfig+0x3d0>)
 800db4c:	4313      	orrs	r3, r2
 800db4e:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800db50:	4b3c      	ldr	r3, [pc, #240]	; (800dc44 <HAL_RCC_ClockConfig+0x3d4>)
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	f003 030f 	and.w	r3, r3, #15
 800db58:	683a      	ldr	r2, [r7, #0]
 800db5a:	429a      	cmp	r2, r3
 800db5c:	d210      	bcs.n	800db80 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800db5e:	4b39      	ldr	r3, [pc, #228]	; (800dc44 <HAL_RCC_ClockConfig+0x3d4>)
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	f023 020f 	bic.w	r2, r3, #15
 800db66:	4937      	ldr	r1, [pc, #220]	; (800dc44 <HAL_RCC_ClockConfig+0x3d4>)
 800db68:	683b      	ldr	r3, [r7, #0]
 800db6a:	4313      	orrs	r3, r2
 800db6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800db6e:	4b35      	ldr	r3, [pc, #212]	; (800dc44 <HAL_RCC_ClockConfig+0x3d4>)
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	f003 030f 	and.w	r3, r3, #15
 800db76:	683a      	ldr	r2, [r7, #0]
 800db78:	429a      	cmp	r2, r3
 800db7a:	d001      	beq.n	800db80 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 800db7c:	2301      	movs	r3, #1
 800db7e:	e05b      	b.n	800dc38 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	f003 0304 	and.w	r3, r3, #4
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d010      	beq.n	800dbae <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	68da      	ldr	r2, [r3, #12]
 800db90:	4b2b      	ldr	r3, [pc, #172]	; (800dc40 <HAL_RCC_ClockConfig+0x3d0>)
 800db92:	6a1b      	ldr	r3, [r3, #32]
 800db94:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800db98:	429a      	cmp	r2, r3
 800db9a:	d208      	bcs.n	800dbae <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800db9c:	4b28      	ldr	r3, [pc, #160]	; (800dc40 <HAL_RCC_ClockConfig+0x3d0>)
 800db9e:	6a1b      	ldr	r3, [r3, #32]
 800dba0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	68db      	ldr	r3, [r3, #12]
 800dba8:	4925      	ldr	r1, [pc, #148]	; (800dc40 <HAL_RCC_ClockConfig+0x3d0>)
 800dbaa:	4313      	orrs	r3, r2
 800dbac:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	f003 0308 	and.w	r3, r3, #8
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d012      	beq.n	800dbe0 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	691a      	ldr	r2, [r3, #16]
 800dbbe:	4b20      	ldr	r3, [pc, #128]	; (800dc40 <HAL_RCC_ClockConfig+0x3d0>)
 800dbc0:	6a1b      	ldr	r3, [r3, #32]
 800dbc2:	091b      	lsrs	r3, r3, #4
 800dbc4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800dbc8:	429a      	cmp	r2, r3
 800dbca:	d209      	bcs.n	800dbe0 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800dbcc:	4b1c      	ldr	r3, [pc, #112]	; (800dc40 <HAL_RCC_ClockConfig+0x3d0>)
 800dbce:	6a1b      	ldr	r3, [r3, #32]
 800dbd0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	691b      	ldr	r3, [r3, #16]
 800dbd8:	011b      	lsls	r3, r3, #4
 800dbda:	4919      	ldr	r1, [pc, #100]	; (800dc40 <HAL_RCC_ClockConfig+0x3d0>)
 800dbdc:	4313      	orrs	r3, r2
 800dbde:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	f003 0310 	and.w	r3, r3, #16
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d010      	beq.n	800dc0e <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	695a      	ldr	r2, [r3, #20]
 800dbf0:	4b13      	ldr	r3, [pc, #76]	; (800dc40 <HAL_RCC_ClockConfig+0x3d0>)
 800dbf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbf4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800dbf8:	429a      	cmp	r2, r3
 800dbfa:	d208      	bcs.n	800dc0e <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 800dbfc:	4b10      	ldr	r3, [pc, #64]	; (800dc40 <HAL_RCC_ClockConfig+0x3d0>)
 800dbfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc00:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	695b      	ldr	r3, [r3, #20]
 800dc08:	490d      	ldr	r1, [pc, #52]	; (800dc40 <HAL_RCC_ClockConfig+0x3d0>)
 800dc0a:	4313      	orrs	r3, r2
 800dc0c:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800dc0e:	f000 f821 	bl	800dc54 <HAL_RCC_GetSysClockFreq>
 800dc12:	4602      	mov	r2, r0
 800dc14:	4b0a      	ldr	r3, [pc, #40]	; (800dc40 <HAL_RCC_ClockConfig+0x3d0>)
 800dc16:	6a1b      	ldr	r3, [r3, #32]
 800dc18:	f003 030f 	and.w	r3, r3, #15
 800dc1c:	490a      	ldr	r1, [pc, #40]	; (800dc48 <HAL_RCC_ClockConfig+0x3d8>)
 800dc1e:	5ccb      	ldrb	r3, [r1, r3]
 800dc20:	fa22 f303 	lsr.w	r3, r2, r3
 800dc24:	4a09      	ldr	r2, [pc, #36]	; (800dc4c <HAL_RCC_ClockConfig+0x3dc>)
 800dc26:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800dc28:	4b09      	ldr	r3, [pc, #36]	; (800dc50 <HAL_RCC_ClockConfig+0x3e0>)
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	4618      	mov	r0, r3
 800dc2e:	f7fc fce3 	bl	800a5f8 <HAL_InitTick>
 800dc32:	4603      	mov	r3, r0
 800dc34:	73fb      	strb	r3, [r7, #15]

  return status;
 800dc36:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc38:	4618      	mov	r0, r3
 800dc3a:	3718      	adds	r7, #24
 800dc3c:	46bd      	mov	sp, r7
 800dc3e:	bd80      	pop	{r7, pc}
 800dc40:	46020c00 	.word	0x46020c00
 800dc44:	40022000 	.word	0x40022000
 800dc48:	0818dc08 	.word	0x0818dc08
 800dc4c:	200000f4 	.word	0x200000f4
 800dc50:	200000f8 	.word	0x200000f8

0800dc54 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800dc54:	b480      	push	{r7}
 800dc56:	b08b      	sub	sp, #44	; 0x2c
 800dc58:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800dc5a:	2300      	movs	r3, #0
 800dc5c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800dc5e:	2300      	movs	r3, #0
 800dc60:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800dc62:	4b78      	ldr	r3, [pc, #480]	; (800de44 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800dc64:	69db      	ldr	r3, [r3, #28]
 800dc66:	f003 030c 	and.w	r3, r3, #12
 800dc6a:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800dc6c:	4b75      	ldr	r3, [pc, #468]	; (800de44 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800dc6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc70:	f003 0303 	and.w	r3, r3, #3
 800dc74:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800dc76:	69bb      	ldr	r3, [r7, #24]
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d005      	beq.n	800dc88 <HAL_RCC_GetSysClockFreq+0x34>
 800dc7c:	69bb      	ldr	r3, [r7, #24]
 800dc7e:	2b0c      	cmp	r3, #12
 800dc80:	d121      	bne.n	800dcc6 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800dc82:	697b      	ldr	r3, [r7, #20]
 800dc84:	2b01      	cmp	r3, #1
 800dc86:	d11e      	bne.n	800dcc6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 800dc88:	4b6e      	ldr	r3, [pc, #440]	; (800de44 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800dc8a:	689b      	ldr	r3, [r3, #8]
 800dc8c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d107      	bne.n	800dca4 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 800dc94:	4b6b      	ldr	r3, [pc, #428]	; (800de44 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800dc96:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800dc9a:	0b1b      	lsrs	r3, r3, #12
 800dc9c:	f003 030f 	and.w	r3, r3, #15
 800dca0:	627b      	str	r3, [r7, #36]	; 0x24
 800dca2:	e005      	b.n	800dcb0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 800dca4:	4b67      	ldr	r3, [pc, #412]	; (800de44 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800dca6:	689b      	ldr	r3, [r3, #8]
 800dca8:	0f1b      	lsrs	r3, r3, #28
 800dcaa:	f003 030f 	and.w	r3, r3, #15
 800dcae:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800dcb0:	4a65      	ldr	r2, [pc, #404]	; (800de48 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800dcb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dcb8:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800dcba:	69bb      	ldr	r3, [r7, #24]
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d110      	bne.n	800dce2 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800dcc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcc2:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800dcc4:	e00d      	b.n	800dce2 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800dcc6:	4b5f      	ldr	r3, [pc, #380]	; (800de44 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800dcc8:	69db      	ldr	r3, [r3, #28]
 800dcca:	f003 030c 	and.w	r3, r3, #12
 800dcce:	2b04      	cmp	r3, #4
 800dcd0:	d102      	bne.n	800dcd8 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800dcd2:	4b5e      	ldr	r3, [pc, #376]	; (800de4c <HAL_RCC_GetSysClockFreq+0x1f8>)
 800dcd4:	623b      	str	r3, [r7, #32]
 800dcd6:	e004      	b.n	800dce2 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800dcd8:	69bb      	ldr	r3, [r7, #24]
 800dcda:	2b08      	cmp	r3, #8
 800dcdc:	d101      	bne.n	800dce2 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800dcde:	4b5b      	ldr	r3, [pc, #364]	; (800de4c <HAL_RCC_GetSysClockFreq+0x1f8>)
 800dce0:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800dce2:	69bb      	ldr	r3, [r7, #24]
 800dce4:	2b0c      	cmp	r3, #12
 800dce6:	f040 80a5 	bne.w	800de34 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800dcea:	4b56      	ldr	r3, [pc, #344]	; (800de44 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800dcec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dcee:	f003 0303 	and.w	r3, r3, #3
 800dcf2:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800dcf4:	4b53      	ldr	r3, [pc, #332]	; (800de44 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800dcf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dcf8:	0a1b      	lsrs	r3, r3, #8
 800dcfa:	f003 030f 	and.w	r3, r3, #15
 800dcfe:	3301      	adds	r3, #1
 800dd00:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800dd02:	4b50      	ldr	r3, [pc, #320]	; (800de44 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800dd04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd06:	091b      	lsrs	r3, r3, #4
 800dd08:	f003 0301 	and.w	r3, r3, #1
 800dd0c:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800dd0e:	4b4d      	ldr	r3, [pc, #308]	; (800de44 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800dd10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd12:	08db      	lsrs	r3, r3, #3
 800dd14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800dd18:	68ba      	ldr	r2, [r7, #8]
 800dd1a:	fb02 f303 	mul.w	r3, r2, r3
 800dd1e:	ee07 3a90 	vmov	s15, r3
 800dd22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dd26:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 800dd2a:	693b      	ldr	r3, [r7, #16]
 800dd2c:	2b02      	cmp	r3, #2
 800dd2e:	d003      	beq.n	800dd38 <HAL_RCC_GetSysClockFreq+0xe4>
 800dd30:	693b      	ldr	r3, [r7, #16]
 800dd32:	2b03      	cmp	r3, #3
 800dd34:	d022      	beq.n	800dd7c <HAL_RCC_GetSysClockFreq+0x128>
 800dd36:	e043      	b.n	800ddc0 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	ee07 3a90 	vmov	s15, r3
 800dd3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dd42:	eddf 6a43 	vldr	s13, [pc, #268]	; 800de50 <HAL_RCC_GetSysClockFreq+0x1fc>
 800dd46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dd4a:	4b3e      	ldr	r3, [pc, #248]	; (800de44 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800dd4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dd52:	ee07 3a90 	vmov	s15, r3
 800dd56:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800dd5a:	ed97 6a01 	vldr	s12, [r7, #4]
 800dd5e:	eddf 5a3d 	vldr	s11, [pc, #244]	; 800de54 <HAL_RCC_GetSysClockFreq+0x200>
 800dd62:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800dd66:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800dd6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dd6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800dd72:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dd76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dd7a:	e046      	b.n	800de0a <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	ee07 3a90 	vmov	s15, r3
 800dd82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dd86:	eddf 6a32 	vldr	s13, [pc, #200]	; 800de50 <HAL_RCC_GetSysClockFreq+0x1fc>
 800dd8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dd8e:	4b2d      	ldr	r3, [pc, #180]	; (800de44 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800dd90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dd96:	ee07 3a90 	vmov	s15, r3
 800dd9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800dd9e:	ed97 6a01 	vldr	s12, [r7, #4]
 800dda2:	eddf 5a2c 	vldr	s11, [pc, #176]	; 800de54 <HAL_RCC_GetSysClockFreq+0x200>
 800dda6:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ddaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800ddae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ddb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ddb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ddba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ddbe:	e024      	b.n	800de0a <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ddc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddc2:	ee07 3a90 	vmov	s15, r3
 800ddc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	ee07 3a90 	vmov	s15, r3
 800ddd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ddd4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ddd8:	4b1a      	ldr	r3, [pc, #104]	; (800de44 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800ddda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dddc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dde0:	ee07 3a90 	vmov	s15, r3
 800dde4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800dde8:	ed97 6a01 	vldr	s12, [r7, #4]
 800ddec:	eddf 5a19 	vldr	s11, [pc, #100]	; 800de54 <HAL_RCC_GetSysClockFreq+0x200>
 800ddf0:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ddf4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800ddf8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ddfc:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800de00:	ee67 7a27 	vmul.f32	s15, s14, s15
 800de04:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800de08:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800de0a:	4b0e      	ldr	r3, [pc, #56]	; (800de44 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800de0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de0e:	0e1b      	lsrs	r3, r3, #24
 800de10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800de14:	3301      	adds	r3, #1
 800de16:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 800de18:	683b      	ldr	r3, [r7, #0]
 800de1a:	ee07 3a90 	vmov	s15, r3
 800de1e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800de22:	edd7 6a07 	vldr	s13, [r7, #28]
 800de26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800de2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800de2e:	ee17 3a90 	vmov	r3, s15
 800de32:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 800de34:	6a3b      	ldr	r3, [r7, #32]
}
 800de36:	4618      	mov	r0, r3
 800de38:	372c      	adds	r7, #44	; 0x2c
 800de3a:	46bd      	mov	sp, r7
 800de3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de40:	4770      	bx	lr
 800de42:	bf00      	nop
 800de44:	46020c00 	.word	0x46020c00
 800de48:	0818dc20 	.word	0x0818dc20
 800de4c:	00f42400 	.word	0x00f42400
 800de50:	4b742400 	.word	0x4b742400
 800de54:	46000000 	.word	0x46000000

0800de58 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800de58:	b580      	push	{r7, lr}
 800de5a:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800de5c:	f7ff fefa 	bl	800dc54 <HAL_RCC_GetSysClockFreq>
 800de60:	4602      	mov	r2, r0
 800de62:	4b07      	ldr	r3, [pc, #28]	; (800de80 <HAL_RCC_GetHCLKFreq+0x28>)
 800de64:	6a1b      	ldr	r3, [r3, #32]
 800de66:	f003 030f 	and.w	r3, r3, #15
 800de6a:	4906      	ldr	r1, [pc, #24]	; (800de84 <HAL_RCC_GetHCLKFreq+0x2c>)
 800de6c:	5ccb      	ldrb	r3, [r1, r3]
 800de6e:	fa22 f303 	lsr.w	r3, r2, r3
 800de72:	4a05      	ldr	r2, [pc, #20]	; (800de88 <HAL_RCC_GetHCLKFreq+0x30>)
 800de74:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800de76:	4b04      	ldr	r3, [pc, #16]	; (800de88 <HAL_RCC_GetHCLKFreq+0x30>)
 800de78:	681b      	ldr	r3, [r3, #0]
}
 800de7a:	4618      	mov	r0, r3
 800de7c:	bd80      	pop	{r7, pc}
 800de7e:	bf00      	nop
 800de80:	46020c00 	.word	0x46020c00
 800de84:	0818dc08 	.word	0x0818dc08
 800de88:	200000f4 	.word	0x200000f4

0800de8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800de8c:	b580      	push	{r7, lr}
 800de8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 800de90:	f7ff ffe2 	bl	800de58 <HAL_RCC_GetHCLKFreq>
 800de94:	4602      	mov	r2, r0
 800de96:	4b05      	ldr	r3, [pc, #20]	; (800deac <HAL_RCC_GetPCLK1Freq+0x20>)
 800de98:	6a1b      	ldr	r3, [r3, #32]
 800de9a:	091b      	lsrs	r3, r3, #4
 800de9c:	f003 0307 	and.w	r3, r3, #7
 800dea0:	4903      	ldr	r1, [pc, #12]	; (800deb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800dea2:	5ccb      	ldrb	r3, [r1, r3]
 800dea4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800dea8:	4618      	mov	r0, r3
 800deaa:	bd80      	pop	{r7, pc}
 800deac:	46020c00 	.word	0x46020c00
 800deb0:	0818dc18 	.word	0x0818dc18

0800deb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800deb4:	b580      	push	{r7, lr}
 800deb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 800deb8:	f7ff ffce 	bl	800de58 <HAL_RCC_GetHCLKFreq>
 800debc:	4602      	mov	r2, r0
 800debe:	4b05      	ldr	r3, [pc, #20]	; (800ded4 <HAL_RCC_GetPCLK2Freq+0x20>)
 800dec0:	6a1b      	ldr	r3, [r3, #32]
 800dec2:	0a1b      	lsrs	r3, r3, #8
 800dec4:	f003 0307 	and.w	r3, r3, #7
 800dec8:	4903      	ldr	r1, [pc, #12]	; (800ded8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800deca:	5ccb      	ldrb	r3, [r1, r3]
 800decc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ded0:	4618      	mov	r0, r3
 800ded2:	bd80      	pop	{r7, pc}
 800ded4:	46020c00 	.word	0x46020c00
 800ded8:	0818dc18 	.word	0x0818dc18

0800dedc <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 800dedc:	b580      	push	{r7, lr}
 800dede:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 800dee0:	f7ff ffba 	bl	800de58 <HAL_RCC_GetHCLKFreq>
 800dee4:	4602      	mov	r2, r0
 800dee6:	4b05      	ldr	r3, [pc, #20]	; (800defc <HAL_RCC_GetPCLK3Freq+0x20>)
 800dee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800deea:	091b      	lsrs	r3, r3, #4
 800deec:	f003 0307 	and.w	r3, r3, #7
 800def0:	4903      	ldr	r1, [pc, #12]	; (800df00 <HAL_RCC_GetPCLK3Freq+0x24>)
 800def2:	5ccb      	ldrb	r3, [r1, r3]
 800def4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800def8:	4618      	mov	r0, r3
 800defa:	bd80      	pop	{r7, pc}
 800defc:	46020c00 	.word	0x46020c00
 800df00:	0818dc18 	.word	0x0818dc18

0800df04 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800df04:	b580      	push	{r7, lr}
 800df06:	b086      	sub	sp, #24
 800df08:	af00      	add	r7, sp, #0
 800df0a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800df0c:	4b3e      	ldr	r3, [pc, #248]	; (800e008 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800df0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800df12:	f003 0304 	and.w	r3, r3, #4
 800df16:	2b00      	cmp	r3, #0
 800df18:	d003      	beq.n	800df22 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800df1a:	f7fe fd9f 	bl	800ca5c <HAL_PWREx_GetVoltageRange>
 800df1e:	6178      	str	r0, [r7, #20]
 800df20:	e019      	b.n	800df56 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800df22:	4b39      	ldr	r3, [pc, #228]	; (800e008 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800df24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800df28:	4a37      	ldr	r2, [pc, #220]	; (800e008 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800df2a:	f043 0304 	orr.w	r3, r3, #4
 800df2e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800df32:	4b35      	ldr	r3, [pc, #212]	; (800e008 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800df34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800df38:	f003 0304 	and.w	r3, r3, #4
 800df3c:	60fb      	str	r3, [r7, #12]
 800df3e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800df40:	f7fe fd8c 	bl	800ca5c <HAL_PWREx_GetVoltageRange>
 800df44:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800df46:	4b30      	ldr	r3, [pc, #192]	; (800e008 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800df48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800df4c:	4a2e      	ldr	r2, [pc, #184]	; (800e008 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800df4e:	f023 0304 	bic.w	r3, r3, #4
 800df52:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800df56:	697b      	ldr	r3, [r7, #20]
 800df58:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800df5c:	d003      	beq.n	800df66 <RCC_SetFlashLatencyFromMSIRange+0x62>
 800df5e:	697b      	ldr	r3, [r7, #20]
 800df60:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800df64:	d109      	bne.n	800df7a <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800df6c:	d202      	bcs.n	800df74 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800df6e:	2301      	movs	r3, #1
 800df70:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800df72:	e033      	b.n	800dfdc <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 800df74:	2300      	movs	r3, #0
 800df76:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800df78:	e030      	b.n	800dfdc <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800df80:	d208      	bcs.n	800df94 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800df82:	697b      	ldr	r3, [r7, #20]
 800df84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800df88:	d102      	bne.n	800df90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800df8a:	2303      	movs	r3, #3
 800df8c:	613b      	str	r3, [r7, #16]
 800df8e:	e025      	b.n	800dfdc <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 800df90:	2301      	movs	r3, #1
 800df92:	e035      	b.n	800e000 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800df9a:	d90f      	bls.n	800dfbc <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 800df9c:	697b      	ldr	r3, [r7, #20]
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d109      	bne.n	800dfb6 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800dfa8:	d902      	bls.n	800dfb0 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800dfaa:	2300      	movs	r3, #0
 800dfac:	613b      	str	r3, [r7, #16]
 800dfae:	e015      	b.n	800dfdc <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 800dfb0:	2301      	movs	r3, #1
 800dfb2:	613b      	str	r3, [r7, #16]
 800dfb4:	e012      	b.n	800dfdc <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800dfb6:	2300      	movs	r3, #0
 800dfb8:	613b      	str	r3, [r7, #16]
 800dfba:	e00f      	b.n	800dfdc <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800dfc2:	d109      	bne.n	800dfd8 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800dfc4:	697b      	ldr	r3, [r7, #20]
 800dfc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dfca:	d102      	bne.n	800dfd2 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 800dfcc:	2301      	movs	r3, #1
 800dfce:	613b      	str	r3, [r7, #16]
 800dfd0:	e004      	b.n	800dfdc <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 800dfd2:	2302      	movs	r3, #2
 800dfd4:	613b      	str	r3, [r7, #16]
 800dfd6:	e001      	b.n	800dfdc <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 800dfd8:	2301      	movs	r3, #1
 800dfda:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800dfdc:	4b0b      	ldr	r3, [pc, #44]	; (800e00c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	f023 020f 	bic.w	r2, r3, #15
 800dfe4:	4909      	ldr	r1, [pc, #36]	; (800e00c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800dfe6:	693b      	ldr	r3, [r7, #16]
 800dfe8:	4313      	orrs	r3, r2
 800dfea:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800dfec:	4b07      	ldr	r3, [pc, #28]	; (800e00c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	f003 030f 	and.w	r3, r3, #15
 800dff4:	693a      	ldr	r2, [r7, #16]
 800dff6:	429a      	cmp	r2, r3
 800dff8:	d001      	beq.n	800dffe <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800dffa:	2301      	movs	r3, #1
 800dffc:	e000      	b.n	800e000 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800dffe:	2300      	movs	r3, #0
}
 800e000:	4618      	mov	r0, r3
 800e002:	3718      	adds	r7, #24
 800e004:	46bd      	mov	sp, r7
 800e006:	bd80      	pop	{r7, pc}
 800e008:	46020c00 	.word	0x46020c00
 800e00c:	40022000 	.word	0x40022000

0800e010 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800e010:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e014:	b0ba      	sub	sp, #232	; 0xe8
 800e016:	af00      	add	r7, sp, #0
 800e018:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800e01c:	2300      	movs	r3, #0
 800e01e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800e022:	2300      	movs	r3, #0
 800e024:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800e028:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e02c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e030:	f002 0401 	and.w	r4, r2, #1
 800e034:	2500      	movs	r5, #0
 800e036:	ea54 0305 	orrs.w	r3, r4, r5
 800e03a:	d00b      	beq.n	800e054 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800e03c:	4bcb      	ldr	r3, [pc, #812]	; (800e36c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800e03e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e042:	f023 0103 	bic.w	r1, r3, #3
 800e046:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e04a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e04c:	4ac7      	ldr	r2, [pc, #796]	; (800e36c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800e04e:	430b      	orrs	r3, r1
 800e050:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800e054:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e05c:	f002 0802 	and.w	r8, r2, #2
 800e060:	f04f 0900 	mov.w	r9, #0
 800e064:	ea58 0309 	orrs.w	r3, r8, r9
 800e068:	d00b      	beq.n	800e082 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800e06a:	4bc0      	ldr	r3, [pc, #768]	; (800e36c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800e06c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e070:	f023 010c 	bic.w	r1, r3, #12
 800e074:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e07a:	4abc      	ldr	r2, [pc, #752]	; (800e36c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800e07c:	430b      	orrs	r3, r1
 800e07e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800e082:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e08a:	f002 0a04 	and.w	sl, r2, #4
 800e08e:	f04f 0b00 	mov.w	fp, #0
 800e092:	ea5a 030b 	orrs.w	r3, sl, fp
 800e096:	d00b      	beq.n	800e0b0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800e098:	4bb4      	ldr	r3, [pc, #720]	; (800e36c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800e09a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e09e:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800e0a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e0a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e0a8:	4ab0      	ldr	r2, [pc, #704]	; (800e36c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800e0aa:	430b      	orrs	r3, r1
 800e0ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800e0b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e0b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0b8:	f002 0308 	and.w	r3, r2, #8
 800e0bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e0c0:	2300      	movs	r3, #0
 800e0c2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800e0c6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800e0ca:	460b      	mov	r3, r1
 800e0cc:	4313      	orrs	r3, r2
 800e0ce:	d00b      	beq.n	800e0e8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800e0d0:	4ba6      	ldr	r3, [pc, #664]	; (800e36c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800e0d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e0d6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800e0da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e0de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e0e0:	4aa2      	ldr	r2, [pc, #648]	; (800e36c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800e0e2:	430b      	orrs	r3, r1
 800e0e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800e0e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e0ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0f0:	f002 0310 	and.w	r3, r2, #16
 800e0f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e0f8:	2300      	movs	r3, #0
 800e0fa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e0fe:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800e102:	460b      	mov	r3, r1
 800e104:	4313      	orrs	r3, r2
 800e106:	d00b      	beq.n	800e120 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800e108:	4b98      	ldr	r3, [pc, #608]	; (800e36c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800e10a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e10e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800e112:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e116:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e118:	4a94      	ldr	r2, [pc, #592]	; (800e36c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800e11a:	430b      	orrs	r3, r1
 800e11c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800e120:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e124:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e128:	f002 0320 	and.w	r3, r2, #32
 800e12c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e130:	2300      	movs	r3, #0
 800e132:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800e136:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800e13a:	460b      	mov	r3, r1
 800e13c:	4313      	orrs	r3, r2
 800e13e:	d00b      	beq.n	800e158 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800e140:	4b8a      	ldr	r3, [pc, #552]	; (800e36c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800e142:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800e146:	f023 0107 	bic.w	r1, r3, #7
 800e14a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e14e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e150:	4a86      	ldr	r2, [pc, #536]	; (800e36c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800e152:	430b      	orrs	r3, r1
 800e154:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800e158:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e15c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e160:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800e164:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e168:	2300      	movs	r3, #0
 800e16a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e16e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800e172:	460b      	mov	r3, r1
 800e174:	4313      	orrs	r3, r2
 800e176:	d00b      	beq.n	800e190 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800e178:	4b7c      	ldr	r3, [pc, #496]	; (800e36c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800e17a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e17e:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 800e182:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e186:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e188:	4a78      	ldr	r2, [pc, #480]	; (800e36c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800e18a:	430b      	orrs	r3, r1
 800e18c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800e190:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e194:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e198:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800e19c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800e1a0:	2300      	movs	r3, #0
 800e1a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e1a6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800e1aa:	460b      	mov	r3, r1
 800e1ac:	4313      	orrs	r3, r2
 800e1ae:	d00b      	beq.n	800e1c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800e1b0:	4b6e      	ldr	r3, [pc, #440]	; (800e36c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800e1b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e1b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e1ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e1be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e1c0:	4a6a      	ldr	r2, [pc, #424]	; (800e36c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800e1c2:	430b      	orrs	r3, r1
 800e1c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800e1c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e1cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1d0:	f402 7380 	and.w	r3, r2, #256	; 0x100
 800e1d4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800e1d8:	2300      	movs	r3, #0
 800e1da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800e1de:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800e1e2:	460b      	mov	r3, r1
 800e1e4:	4313      	orrs	r3, r2
 800e1e6:	d00b      	beq.n	800e200 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800e1e8:	4b60      	ldr	r3, [pc, #384]	; (800e36c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800e1ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800e1ee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800e1f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e1f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e1f8:	4a5c      	ldr	r2, [pc, #368]	; (800e36c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800e1fa:	430b      	orrs	r3, r1
 800e1fc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800e200:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e204:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e208:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800e20c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800e210:	2300      	movs	r3, #0
 800e212:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800e216:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800e21a:	460b      	mov	r3, r1
 800e21c:	4313      	orrs	r3, r2
 800e21e:	d00b      	beq.n	800e238 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 800e220:	4b52      	ldr	r3, [pc, #328]	; (800e36c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800e222:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e226:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 800e22a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e22e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e230:	4a4e      	ldr	r2, [pc, #312]	; (800e36c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800e232:	430b      	orrs	r3, r1
 800e234:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800e238:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e23c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e240:	f402 7300 	and.w	r3, r2, #512	; 0x200
 800e244:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800e248:	2300      	movs	r3, #0
 800e24a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e24e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800e252:	460b      	mov	r3, r1
 800e254:	4313      	orrs	r3, r2
 800e256:	d00b      	beq.n	800e270 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800e258:	4b44      	ldr	r3, [pc, #272]	; (800e36c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800e25a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800e25e:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 800e262:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e266:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e268:	4a40      	ldr	r2, [pc, #256]	; (800e36c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800e26a:	430b      	orrs	r3, r1
 800e26c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800e270:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e274:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e278:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800e27c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800e280:	2300      	movs	r3, #0
 800e282:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800e286:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800e28a:	460b      	mov	r3, r1
 800e28c:	4313      	orrs	r3, r2
 800e28e:	d00b      	beq.n	800e2a8 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800e290:	4b36      	ldr	r3, [pc, #216]	; (800e36c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800e292:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e296:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 800e29a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e29e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e2a0:	4a32      	ldr	r2, [pc, #200]	; (800e36c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800e2a2:	430b      	orrs	r3, r1
 800e2a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 800e2a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e2ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2b0:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800e2b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800e2b8:	2300      	movs	r3, #0
 800e2ba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800e2be:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800e2c2:	460b      	mov	r3, r1
 800e2c4:	4313      	orrs	r3, r2
 800e2c6:	d00c      	beq.n	800e2e2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 800e2c8:	4b28      	ldr	r3, [pc, #160]	; (800e36c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800e2ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800e2ce:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800e2d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e2d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e2da:	4a24      	ldr	r2, [pc, #144]	; (800e36c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800e2dc:	430b      	orrs	r3, r1
 800e2de:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800e2e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e2e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2ea:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800e2ee:	67bb      	str	r3, [r7, #120]	; 0x78
 800e2f0:	2300      	movs	r3, #0
 800e2f2:	67fb      	str	r3, [r7, #124]	; 0x7c
 800e2f4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800e2f8:	460b      	mov	r3, r1
 800e2fa:	4313      	orrs	r3, r2
 800e2fc:	d04f      	beq.n	800e39e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800e2fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e302:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e306:	2b80      	cmp	r3, #128	; 0x80
 800e308:	d02d      	beq.n	800e366 <HAL_RCCEx_PeriphCLKConfig+0x356>
 800e30a:	2b80      	cmp	r3, #128	; 0x80
 800e30c:	d827      	bhi.n	800e35e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800e30e:	2b60      	cmp	r3, #96	; 0x60
 800e310:	d02e      	beq.n	800e370 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800e312:	2b60      	cmp	r3, #96	; 0x60
 800e314:	d823      	bhi.n	800e35e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800e316:	2b40      	cmp	r3, #64	; 0x40
 800e318:	d006      	beq.n	800e328 <HAL_RCCEx_PeriphCLKConfig+0x318>
 800e31a:	2b40      	cmp	r3, #64	; 0x40
 800e31c:	d81f      	bhi.n	800e35e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d009      	beq.n	800e336 <HAL_RCCEx_PeriphCLKConfig+0x326>
 800e322:	2b20      	cmp	r3, #32
 800e324:	d011      	beq.n	800e34a <HAL_RCCEx_PeriphCLKConfig+0x33a>
 800e326:	e01a      	b.n	800e35e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800e328:	4b10      	ldr	r3, [pc, #64]	; (800e36c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800e32a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e32c:	4a0f      	ldr	r2, [pc, #60]	; (800e36c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800e32e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e332:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800e334:	e01d      	b.n	800e372 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800e336:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e33a:	3308      	adds	r3, #8
 800e33c:	4618      	mov	r0, r3
 800e33e:	f002 fa17 	bl	8010770 <RCCEx_PLL2_Config>
 800e342:	4603      	mov	r3, r0
 800e344:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 800e348:	e013      	b.n	800e372 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800e34a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e34e:	332c      	adds	r3, #44	; 0x2c
 800e350:	4618      	mov	r0, r3
 800e352:	f002 faa5 	bl	80108a0 <RCCEx_PLL3_Config>
 800e356:	4603      	mov	r3, r0
 800e358:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 800e35c:	e009      	b.n	800e372 <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e35e:	2301      	movs	r3, #1
 800e360:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800e364:	e005      	b.n	800e372 <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 800e366:	bf00      	nop
 800e368:	e003      	b.n	800e372 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800e36a:	bf00      	nop
 800e36c:	46020c00 	.word	0x46020c00
        break;
 800e370:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e372:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800e376:	2b00      	cmp	r3, #0
 800e378:	d10d      	bne.n	800e396 <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800e37a:	4bb6      	ldr	r3, [pc, #728]	; (800e654 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800e37c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800e380:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 800e384:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e388:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e38c:	4ab1      	ldr	r2, [pc, #708]	; (800e654 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800e38e:	430b      	orrs	r3, r1
 800e390:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800e394:	e003      	b.n	800e39e <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e396:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800e39a:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800e39e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e3a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3a6:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800e3aa:	673b      	str	r3, [r7, #112]	; 0x70
 800e3ac:	2300      	movs	r3, #0
 800e3ae:	677b      	str	r3, [r7, #116]	; 0x74
 800e3b0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800e3b4:	460b      	mov	r3, r1
 800e3b6:	4313      	orrs	r3, r2
 800e3b8:	d053      	beq.n	800e462 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800e3ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e3be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e3c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e3c6:	d033      	beq.n	800e430 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800e3c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e3cc:	d82c      	bhi.n	800e428 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800e3ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e3d2:	d02f      	beq.n	800e434 <HAL_RCCEx_PeriphCLKConfig+0x424>
 800e3d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e3d8:	d826      	bhi.n	800e428 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800e3da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e3de:	d008      	beq.n	800e3f2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 800e3e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e3e4:	d820      	bhi.n	800e428 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d00a      	beq.n	800e400 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 800e3ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e3ee:	d011      	beq.n	800e414 <HAL_RCCEx_PeriphCLKConfig+0x404>
 800e3f0:	e01a      	b.n	800e428 <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800e3f2:	4b98      	ldr	r3, [pc, #608]	; (800e654 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800e3f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e3f6:	4a97      	ldr	r2, [pc, #604]	; (800e654 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800e3f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e3fc:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800e3fe:	e01a      	b.n	800e436 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800e400:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e404:	3308      	adds	r3, #8
 800e406:	4618      	mov	r0, r3
 800e408:	f002 f9b2 	bl	8010770 <RCCEx_PLL2_Config>
 800e40c:	4603      	mov	r3, r0
 800e40e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 800e412:	e010      	b.n	800e436 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800e414:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e418:	332c      	adds	r3, #44	; 0x2c
 800e41a:	4618      	mov	r0, r3
 800e41c:	f002 fa40 	bl	80108a0 <RCCEx_PLL3_Config>
 800e420:	4603      	mov	r3, r0
 800e422:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 800e426:	e006      	b.n	800e436 <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e428:	2301      	movs	r3, #1
 800e42a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800e42e:	e002      	b.n	800e436 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 800e430:	bf00      	nop
 800e432:	e000      	b.n	800e436 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 800e434:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e436:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d10d      	bne.n	800e45a <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800e43e:	4b85      	ldr	r3, [pc, #532]	; (800e654 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800e440:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800e444:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 800e448:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e44c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e450:	4a80      	ldr	r2, [pc, #512]	; (800e654 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800e452:	430b      	orrs	r3, r1
 800e454:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800e458:	e003      	b.n	800e462 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e45a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800e45e:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800e462:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e46a:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800e46e:	66bb      	str	r3, [r7, #104]	; 0x68
 800e470:	2300      	movs	r3, #0
 800e472:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e474:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800e478:	460b      	mov	r3, r1
 800e47a:	4313      	orrs	r3, r2
 800e47c:	d046      	beq.n	800e50c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800e47e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e482:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800e486:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800e48a:	d028      	beq.n	800e4de <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800e48c:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800e490:	d821      	bhi.n	800e4d6 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800e492:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e496:	d022      	beq.n	800e4de <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800e498:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e49c:	d81b      	bhi.n	800e4d6 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800e49e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800e4a2:	d01c      	beq.n	800e4de <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800e4a4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800e4a8:	d815      	bhi.n	800e4d6 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800e4aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e4ae:	d008      	beq.n	800e4c2 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 800e4b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e4b4:	d80f      	bhi.n	800e4d6 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d011      	beq.n	800e4de <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800e4ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e4be:	d00e      	beq.n	800e4de <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800e4c0:	e009      	b.n	800e4d6 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800e4c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e4c6:	3308      	adds	r3, #8
 800e4c8:	4618      	mov	r0, r3
 800e4ca:	f002 f951 	bl	8010770 <RCCEx_PLL2_Config>
 800e4ce:	4603      	mov	r3, r0
 800e4d0:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800e4d4:	e004      	b.n	800e4e0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800e4d6:	2301      	movs	r3, #1
 800e4d8:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800e4dc:	e000      	b.n	800e4e0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 800e4de:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e4e0:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d10d      	bne.n	800e504 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800e4e8:	4b5a      	ldr	r3, [pc, #360]	; (800e654 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800e4ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800e4ee:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800e4f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e4f6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800e4fa:	4a56      	ldr	r2, [pc, #344]	; (800e654 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800e4fc:	430b      	orrs	r3, r1
 800e4fe:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800e502:	e003      	b.n	800e50c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e504:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800e508:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 800e50c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e510:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e514:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800e518:	663b      	str	r3, [r7, #96]	; 0x60
 800e51a:	2300      	movs	r3, #0
 800e51c:	667b      	str	r3, [r7, #100]	; 0x64
 800e51e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800e522:	460b      	mov	r3, r1
 800e524:	4313      	orrs	r3, r2
 800e526:	d03f      	beq.n	800e5a8 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 800e528:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e52c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e530:	2b04      	cmp	r3, #4
 800e532:	d81e      	bhi.n	800e572 <HAL_RCCEx_PeriphCLKConfig+0x562>
 800e534:	a201      	add	r2, pc, #4	; (adr r2, 800e53c <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 800e536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e53a:	bf00      	nop
 800e53c:	0800e57b 	.word	0x0800e57b
 800e540:	0800e551 	.word	0x0800e551
 800e544:	0800e55f 	.word	0x0800e55f
 800e548:	0800e57b 	.word	0x0800e57b
 800e54c:	0800e57b 	.word	0x0800e57b
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800e550:	4b40      	ldr	r3, [pc, #256]	; (800e654 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800e552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e554:	4a3f      	ldr	r2, [pc, #252]	; (800e654 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800e556:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e55a:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800e55c:	e00e      	b.n	800e57c <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800e55e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e562:	332c      	adds	r3, #44	; 0x2c
 800e564:	4618      	mov	r0, r3
 800e566:	f002 f99b 	bl	80108a0 <RCCEx_PLL3_Config>
 800e56a:	4603      	mov	r3, r0
 800e56c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800e570:	e004      	b.n	800e57c <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800e572:	2301      	movs	r3, #1
 800e574:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800e578:	e000      	b.n	800e57c <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 800e57a:	bf00      	nop
    }
    if (ret == HAL_OK)
 800e57c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800e580:	2b00      	cmp	r3, #0
 800e582:	d10d      	bne.n	800e5a0 <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 800e584:	4b33      	ldr	r3, [pc, #204]	; (800e654 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800e586:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800e58a:	f023 0107 	bic.w	r1, r3, #7
 800e58e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e596:	4a2f      	ldr	r2, [pc, #188]	; (800e654 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800e598:	430b      	orrs	r3, r1
 800e59a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800e59e:	e003      	b.n	800e5a8 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e5a0:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800e5a4:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 800e5a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e5ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5b0:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800e5b4:	65bb      	str	r3, [r7, #88]	; 0x58
 800e5b6:	2300      	movs	r3, #0
 800e5b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e5ba:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800e5be:	460b      	mov	r3, r1
 800e5c0:	4313      	orrs	r3, r2
 800e5c2:	d04d      	beq.n	800e660 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 800e5c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e5c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e5cc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e5d0:	d028      	beq.n	800e624 <HAL_RCCEx_PeriphCLKConfig+0x614>
 800e5d2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e5d6:	d821      	bhi.n	800e61c <HAL_RCCEx_PeriphCLKConfig+0x60c>
 800e5d8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800e5dc:	d024      	beq.n	800e628 <HAL_RCCEx_PeriphCLKConfig+0x618>
 800e5de:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800e5e2:	d81b      	bhi.n	800e61c <HAL_RCCEx_PeriphCLKConfig+0x60c>
 800e5e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e5e8:	d00e      	beq.n	800e608 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 800e5ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e5ee:	d815      	bhi.n	800e61c <HAL_RCCEx_PeriphCLKConfig+0x60c>
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d01b      	beq.n	800e62c <HAL_RCCEx_PeriphCLKConfig+0x61c>
 800e5f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e5f8:	d110      	bne.n	800e61c <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800e5fa:	4b16      	ldr	r3, [pc, #88]	; (800e654 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800e5fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e5fe:	4a15      	ldr	r2, [pc, #84]	; (800e654 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800e600:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e604:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800e606:	e012      	b.n	800e62e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800e608:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e60c:	332c      	adds	r3, #44	; 0x2c
 800e60e:	4618      	mov	r0, r3
 800e610:	f002 f946 	bl	80108a0 <RCCEx_PLL3_Config>
 800e614:	4603      	mov	r3, r0
 800e616:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800e61a:	e008      	b.n	800e62e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800e61c:	2301      	movs	r3, #1
 800e61e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800e622:	e004      	b.n	800e62e <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 800e624:	bf00      	nop
 800e626:	e002      	b.n	800e62e <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 800e628:	bf00      	nop
 800e62a:	e000      	b.n	800e62e <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 800e62c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800e62e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800e632:	2b00      	cmp	r3, #0
 800e634:	d110      	bne.n	800e658 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800e636:	4b07      	ldr	r3, [pc, #28]	; (800e654 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800e638:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800e63c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800e640:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e644:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e648:	4a02      	ldr	r2, [pc, #8]	; (800e654 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800e64a:	430b      	orrs	r3, r1
 800e64c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800e650:	e006      	b.n	800e660 <HAL_RCCEx_PeriphCLKConfig+0x650>
 800e652:	bf00      	nop
 800e654:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e658:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800e65c:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800e660:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e664:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e668:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800e66c:	653b      	str	r3, [r7, #80]	; 0x50
 800e66e:	2300      	movs	r3, #0
 800e670:	657b      	str	r3, [r7, #84]	; 0x54
 800e672:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800e676:	460b      	mov	r3, r1
 800e678:	4313      	orrs	r3, r2
 800e67a:	f000 80b5 	beq.w	800e7e8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800e67e:	2300      	movs	r3, #0
 800e680:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800e684:	4b9d      	ldr	r3, [pc, #628]	; (800e8fc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800e686:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e68a:	f003 0304 	and.w	r3, r3, #4
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d113      	bne.n	800e6ba <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800e692:	4b9a      	ldr	r3, [pc, #616]	; (800e8fc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800e694:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e698:	4a98      	ldr	r2, [pc, #608]	; (800e8fc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800e69a:	f043 0304 	orr.w	r3, r3, #4
 800e69e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800e6a2:	4b96      	ldr	r3, [pc, #600]	; (800e8fc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800e6a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e6a8:	f003 0304 	and.w	r3, r3, #4
 800e6ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800e6b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
      pwrclkchanged = SET;
 800e6b4:	2301      	movs	r3, #1
 800e6b6:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800e6ba:	4b91      	ldr	r3, [pc, #580]	; (800e900 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 800e6bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e6be:	4a90      	ldr	r2, [pc, #576]	; (800e900 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 800e6c0:	f043 0301 	orr.w	r3, r3, #1
 800e6c4:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800e6c6:	f7fb ffe1 	bl	800a68c <HAL_GetTick>
 800e6ca:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800e6ce:	e00b      	b.n	800e6e8 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e6d0:	f7fb ffdc 	bl	800a68c <HAL_GetTick>
 800e6d4:	4602      	mov	r2, r0
 800e6d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e6da:	1ad3      	subs	r3, r2, r3
 800e6dc:	2b02      	cmp	r3, #2
 800e6de:	d903      	bls.n	800e6e8 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 800e6e0:	2303      	movs	r3, #3
 800e6e2:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800e6e6:	e005      	b.n	800e6f4 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800e6e8:	4b85      	ldr	r3, [pc, #532]	; (800e900 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 800e6ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e6ec:	f003 0301 	and.w	r3, r3, #1
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d0ed      	beq.n	800e6d0 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 800e6f4:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d165      	bne.n	800e7c8 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800e6fc:	4b7f      	ldr	r3, [pc, #508]	; (800e8fc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800e6fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800e702:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e706:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800e70a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d023      	beq.n	800e75a <HAL_RCCEx_PeriphCLKConfig+0x74a>
 800e712:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e716:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800e71a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e71e:	4293      	cmp	r3, r2
 800e720:	d01b      	beq.n	800e75a <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800e722:	4b76      	ldr	r3, [pc, #472]	; (800e8fc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800e724:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800e728:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e72c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800e730:	4b72      	ldr	r3, [pc, #456]	; (800e8fc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800e732:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800e736:	4a71      	ldr	r2, [pc, #452]	; (800e8fc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800e738:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e73c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800e740:	4b6e      	ldr	r3, [pc, #440]	; (800e8fc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800e742:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800e746:	4a6d      	ldr	r2, [pc, #436]	; (800e8fc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800e748:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e74c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800e750:	4a6a      	ldr	r2, [pc, #424]	; (800e8fc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800e752:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e756:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800e75a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e75e:	f003 0301 	and.w	r3, r3, #1
 800e762:	2b00      	cmp	r3, #0
 800e764:	d019      	beq.n	800e79a <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e766:	f7fb ff91 	bl	800a68c <HAL_GetTick>
 800e76a:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800e76e:	e00d      	b.n	800e78c <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e770:	f7fb ff8c 	bl	800a68c <HAL_GetTick>
 800e774:	4602      	mov	r2, r0
 800e776:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e77a:	1ad2      	subs	r2, r2, r3
 800e77c:	f241 3388 	movw	r3, #5000	; 0x1388
 800e780:	429a      	cmp	r2, r3
 800e782:	d903      	bls.n	800e78c <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 800e784:	2303      	movs	r3, #3
 800e786:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
            break;
 800e78a:	e006      	b.n	800e79a <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800e78c:	4b5b      	ldr	r3, [pc, #364]	; (800e8fc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800e78e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800e792:	f003 0302 	and.w	r3, r3, #2
 800e796:	2b00      	cmp	r3, #0
 800e798:	d0ea      	beq.n	800e770 <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 800e79a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d10d      	bne.n	800e7be <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800e7a2:	4b56      	ldr	r3, [pc, #344]	; (800e8fc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800e7a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800e7a8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800e7ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e7b0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800e7b4:	4a51      	ldr	r2, [pc, #324]	; (800e8fc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800e7b6:	430b      	orrs	r3, r1
 800e7b8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800e7bc:	e008      	b.n	800e7d0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800e7be:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800e7c2:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
 800e7c6:	e003      	b.n	800e7d0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e7c8:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800e7cc:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800e7d0:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
 800e7d4:	2b01      	cmp	r3, #1
 800e7d6:	d107      	bne.n	800e7e8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800e7d8:	4b48      	ldr	r3, [pc, #288]	; (800e8fc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800e7da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e7de:	4a47      	ldr	r2, [pc, #284]	; (800e8fc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800e7e0:	f023 0304 	bic.w	r3, r3, #4
 800e7e4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 800e7e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e7ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7f0:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800e7f4:	64bb      	str	r3, [r7, #72]	; 0x48
 800e7f6:	2300      	movs	r3, #0
 800e7f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e7fa:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800e7fe:	460b      	mov	r3, r1
 800e800:	4313      	orrs	r3, r2
 800e802:	d042      	beq.n	800e88a <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 800e804:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e808:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800e80c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800e810:	d022      	beq.n	800e858 <HAL_RCCEx_PeriphCLKConfig+0x848>
 800e812:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800e816:	d81b      	bhi.n	800e850 <HAL_RCCEx_PeriphCLKConfig+0x840>
 800e818:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e81c:	d011      	beq.n	800e842 <HAL_RCCEx_PeriphCLKConfig+0x832>
 800e81e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e822:	d815      	bhi.n	800e850 <HAL_RCCEx_PeriphCLKConfig+0x840>
 800e824:	2b00      	cmp	r3, #0
 800e826:	d019      	beq.n	800e85c <HAL_RCCEx_PeriphCLKConfig+0x84c>
 800e828:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e82c:	d110      	bne.n	800e850 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800e82e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e832:	3308      	adds	r3, #8
 800e834:	4618      	mov	r0, r3
 800e836:	f001 ff9b 	bl	8010770 <RCCEx_PLL2_Config>
 800e83a:	4603      	mov	r3, r0
 800e83c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800e840:	e00d      	b.n	800e85e <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e842:	4b2e      	ldr	r3, [pc, #184]	; (800e8fc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800e844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e846:	4a2d      	ldr	r2, [pc, #180]	; (800e8fc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800e848:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e84c:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800e84e:	e006      	b.n	800e85e <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800e850:	2301      	movs	r3, #1
 800e852:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800e856:	e002      	b.n	800e85e <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 800e858:	bf00      	nop
 800e85a:	e000      	b.n	800e85e <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 800e85c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800e85e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800e862:	2b00      	cmp	r3, #0
 800e864:	d10d      	bne.n	800e882 <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800e866:	4b25      	ldr	r3, [pc, #148]	; (800e8fc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800e868:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e86c:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800e870:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e874:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800e878:	4a20      	ldr	r2, [pc, #128]	; (800e8fc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800e87a:	430b      	orrs	r3, r1
 800e87c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800e880:	e003      	b.n	800e88a <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e882:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800e886:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800e88a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e88e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e892:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800e896:	643b      	str	r3, [r7, #64]	; 0x40
 800e898:	2300      	movs	r3, #0
 800e89a:	647b      	str	r3, [r7, #68]	; 0x44
 800e89c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800e8a0:	460b      	mov	r3, r1
 800e8a2:	4313      	orrs	r3, r2
 800e8a4:	d032      	beq.n	800e90c <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800e8a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e8aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800e8ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e8b2:	d00b      	beq.n	800e8cc <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 800e8b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e8b8:	d804      	bhi.n	800e8c4 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d008      	beq.n	800e8d0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 800e8be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e8c2:	d007      	beq.n	800e8d4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 800e8c4:	2301      	movs	r3, #1
 800e8c6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800e8ca:	e004      	b.n	800e8d6 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 800e8cc:	bf00      	nop
 800e8ce:	e002      	b.n	800e8d6 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 800e8d0:	bf00      	nop
 800e8d2:	e000      	b.n	800e8d6 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 800e8d4:	bf00      	nop
    }
    if (ret == HAL_OK)
 800e8d6:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d112      	bne.n	800e904 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800e8de:	4b07      	ldr	r3, [pc, #28]	; (800e8fc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800e8e0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800e8e4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e8e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e8ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800e8f0:	4a02      	ldr	r2, [pc, #8]	; (800e8fc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800e8f2:	430b      	orrs	r3, r1
 800e8f4:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800e8f8:	e008      	b.n	800e90c <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 800e8fa:	bf00      	nop
 800e8fc:	46020c00 	.word	0x46020c00
 800e900:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e904:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800e908:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 800e90c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e910:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e914:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800e918:	63bb      	str	r3, [r7, #56]	; 0x38
 800e91a:	2300      	movs	r3, #0
 800e91c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e91e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800e922:	460b      	mov	r3, r1
 800e924:	4313      	orrs	r3, r2
 800e926:	d00c      	beq.n	800e942 <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 800e928:	4b98      	ldr	r3, [pc, #608]	; (800eb8c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e92a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800e92e:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 800e932:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e936:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800e93a:	4a94      	ldr	r2, [pc, #592]	; (800eb8c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e93c:	430b      	orrs	r3, r1
 800e93e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800e942:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e94a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800e94e:	633b      	str	r3, [r7, #48]	; 0x30
 800e950:	2300      	movs	r3, #0
 800e952:	637b      	str	r3, [r7, #52]	; 0x34
 800e954:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800e958:	460b      	mov	r3, r1
 800e95a:	4313      	orrs	r3, r2
 800e95c:	d019      	beq.n	800e992 <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 800e95e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e962:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800e966:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e96a:	d105      	bne.n	800e978 <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800e96c:	4b87      	ldr	r3, [pc, #540]	; (800eb8c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e96e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e970:	4a86      	ldr	r2, [pc, #536]	; (800eb8c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e972:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e976:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 800e978:	4b84      	ldr	r3, [pc, #528]	; (800eb8c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e97a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800e97e:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800e982:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e986:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800e98a:	4a80      	ldr	r2, [pc, #512]	; (800eb8c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e98c:	430b      	orrs	r3, r1
 800e98e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800e992:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e99a:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800e99e:	62bb      	str	r3, [r7, #40]	; 0x28
 800e9a0:	2300      	movs	r3, #0
 800e9a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e9a4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800e9a8:	460b      	mov	r3, r1
 800e9aa:	4313      	orrs	r3, r2
 800e9ac:	d00c      	beq.n	800e9c8 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800e9ae:	4b77      	ldr	r3, [pc, #476]	; (800eb8c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e9b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e9b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800e9b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e9bc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800e9c0:	4972      	ldr	r1, [pc, #456]	; (800eb8c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e9c2:	4313      	orrs	r3, r2
 800e9c4:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800e9c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e9cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9d0:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800e9d4:	623b      	str	r3, [r7, #32]
 800e9d6:	2300      	movs	r3, #0
 800e9d8:	627b      	str	r3, [r7, #36]	; 0x24
 800e9da:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800e9de:	460b      	mov	r3, r1
 800e9e0:	4313      	orrs	r3, r2
 800e9e2:	d00c      	beq.n	800e9fe <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800e9e4:	4b69      	ldr	r3, [pc, #420]	; (800eb8c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e9e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e9ea:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800e9ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e9f2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800e9f6:	4965      	ldr	r1, [pc, #404]	; (800eb8c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e9f8:	4313      	orrs	r3, r2
 800e9fa:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800e9fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ea02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea06:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800ea0a:	61bb      	str	r3, [r7, #24]
 800ea0c:	2300      	movs	r3, #0
 800ea0e:	61fb      	str	r3, [r7, #28]
 800ea10:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800ea14:	460b      	mov	r3, r1
 800ea16:	4313      	orrs	r3, r2
 800ea18:	d00c      	beq.n	800ea34 <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800ea1a:	4b5c      	ldr	r3, [pc, #368]	; (800eb8c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800ea1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800ea20:	f023 0218 	bic.w	r2, r3, #24
 800ea24:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ea28:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800ea2c:	4957      	ldr	r1, [pc, #348]	; (800eb8c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800ea2e:	4313      	orrs	r3, r2
 800ea30:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800ea34:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ea38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea3c:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 800ea40:	613b      	str	r3, [r7, #16]
 800ea42:	2300      	movs	r3, #0
 800ea44:	617b      	str	r3, [r7, #20]
 800ea46:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800ea4a:	460b      	mov	r3, r1
 800ea4c:	4313      	orrs	r3, r2
 800ea4e:	d032      	beq.n	800eab6 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 800ea50:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ea54:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ea58:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ea5c:	d105      	bne.n	800ea6a <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ea5e:	4b4b      	ldr	r3, [pc, #300]	; (800eb8c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800ea60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea62:	4a4a      	ldr	r2, [pc, #296]	; (800eb8c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800ea64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ea68:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800ea6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ea6e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ea72:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ea76:	d108      	bne.n	800ea8a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800ea78:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ea7c:	3308      	adds	r3, #8
 800ea7e:	4618      	mov	r0, r3
 800ea80:	f001 fe76 	bl	8010770 <RCCEx_PLL2_Config>
 800ea84:	4603      	mov	r3, r0
 800ea86:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
    }
    if (ret == HAL_OK)
 800ea8a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d10d      	bne.n	800eaae <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800ea92:	4b3e      	ldr	r3, [pc, #248]	; (800eb8c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800ea94:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800ea98:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ea9c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800eaa0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800eaa4:	4939      	ldr	r1, [pc, #228]	; (800eb8c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800eaa6:	4313      	orrs	r3, r2
 800eaa8:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800eaac:	e003      	b.n	800eab6 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eaae:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800eab2:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 800eab6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800eaba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eabe:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 800eac2:	60bb      	str	r3, [r7, #8]
 800eac4:	2300      	movs	r3, #0
 800eac6:	60fb      	str	r3, [r7, #12]
 800eac8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800eacc:	460b      	mov	r3, r1
 800eace:	4313      	orrs	r3, r2
 800ead0:	d03a      	beq.n	800eb48 <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 800ead2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ead6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eada:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800eade:	d00e      	beq.n	800eafe <HAL_RCCEx_PeriphCLKConfig+0xaee>
 800eae0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800eae4:	d815      	bhi.n	800eb12 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d017      	beq.n	800eb1a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800eaea:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800eaee:	d110      	bne.n	800eb12 <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800eaf0:	4b26      	ldr	r3, [pc, #152]	; (800eb8c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800eaf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eaf4:	4a25      	ldr	r2, [pc, #148]	; (800eb8c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800eaf6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800eafa:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800eafc:	e00e      	b.n	800eb1c <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800eafe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800eb02:	3308      	adds	r3, #8
 800eb04:	4618      	mov	r0, r3
 800eb06:	f001 fe33 	bl	8010770 <RCCEx_PLL2_Config>
 800eb0a:	4603      	mov	r3, r0
 800eb0c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800eb10:	e004      	b.n	800eb1c <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 800eb12:	2301      	movs	r3, #1
 800eb14:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800eb18:	e000      	b.n	800eb1c <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 800eb1a:	bf00      	nop
    }
    if (ret == HAL_OK)
 800eb1c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d10d      	bne.n	800eb40 <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800eb24:	4b19      	ldr	r3, [pc, #100]	; (800eb8c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800eb26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800eb2a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800eb2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800eb32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eb36:	4915      	ldr	r1, [pc, #84]	; (800eb8c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800eb38:	4313      	orrs	r3, r2
 800eb3a:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 800eb3e:	e003      	b.n	800eb48 <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eb40:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800eb44:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800eb48:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800eb4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb50:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800eb54:	603b      	str	r3, [r7, #0]
 800eb56:	2300      	movs	r3, #0
 800eb58:	607b      	str	r3, [r7, #4]
 800eb5a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800eb5e:	460b      	mov	r3, r1
 800eb60:	4313      	orrs	r3, r2
 800eb62:	d00c      	beq.n	800eb7e <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800eb64:	4b09      	ldr	r3, [pc, #36]	; (800eb8c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800eb66:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800eb6a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800eb6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800eb72:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800eb76:	4905      	ldr	r1, [pc, #20]	; (800eb8c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800eb78:	4313      	orrs	r3, r2
 800eb7a:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 800eb7e:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
}
 800eb82:	4618      	mov	r0, r3
 800eb84:	37e8      	adds	r7, #232	; 0xe8
 800eb86:	46bd      	mov	sp, r7
 800eb88:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800eb8c:	46020c00 	.word	0x46020c00

0800eb90 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800eb90:	b480      	push	{r7}
 800eb92:	b089      	sub	sp, #36	; 0x24
 800eb94:	af00      	add	r7, sp, #0
 800eb96:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800eb98:	4ba6      	ldr	r3, [pc, #664]	; (800ee34 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800eb9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eba0:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800eba2:	4ba4      	ldr	r3, [pc, #656]	; (800ee34 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800eba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eba6:	f003 0303 	and.w	r3, r3, #3
 800ebaa:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800ebac:	4ba1      	ldr	r3, [pc, #644]	; (800ee34 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800ebae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebb0:	0a1b      	lsrs	r3, r3, #8
 800ebb2:	f003 030f 	and.w	r3, r3, #15
 800ebb6:	3301      	adds	r3, #1
 800ebb8:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800ebba:	4b9e      	ldr	r3, [pc, #632]	; (800ee34 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800ebbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebbe:	091b      	lsrs	r3, r3, #4
 800ebc0:	f003 0301 	and.w	r3, r3, #1
 800ebc4:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800ebc6:	4b9b      	ldr	r3, [pc, #620]	; (800ee34 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800ebc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebca:	08db      	lsrs	r3, r3, #3
 800ebcc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ebd0:	68fa      	ldr	r2, [r7, #12]
 800ebd2:	fb02 f303 	mul.w	r3, r2, r3
 800ebd6:	ee07 3a90 	vmov	s15, r3
 800ebda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ebde:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 800ebe2:	697b      	ldr	r3, [r7, #20]
 800ebe4:	2b03      	cmp	r3, #3
 800ebe6:	d062      	beq.n	800ecae <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 800ebe8:	697b      	ldr	r3, [r7, #20]
 800ebea:	2b03      	cmp	r3, #3
 800ebec:	f200 8081 	bhi.w	800ecf2 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 800ebf0:	697b      	ldr	r3, [r7, #20]
 800ebf2:	2b01      	cmp	r3, #1
 800ebf4:	d024      	beq.n	800ec40 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 800ebf6:	697b      	ldr	r3, [r7, #20]
 800ebf8:	2b02      	cmp	r3, #2
 800ebfa:	d17a      	bne.n	800ecf2 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ebfc:	693b      	ldr	r3, [r7, #16]
 800ebfe:	ee07 3a90 	vmov	s15, r3
 800ec02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ec06:	eddf 6a8c 	vldr	s13, [pc, #560]	; 800ee38 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800ec0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ec0e:	4b89      	ldr	r3, [pc, #548]	; (800ee34 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800ec10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ec16:	ee07 3a90 	vmov	s15, r3
 800ec1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800ec1e:	ed97 6a02 	vldr	s12, [r7, #8]
 800ec22:	eddf 5a86 	vldr	s11, [pc, #536]	; 800ee3c <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800ec26:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ec2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800ec2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ec32:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ec36:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ec3a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ec3e:	e08f      	b.n	800ed60 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800ec40:	4b7c      	ldr	r3, [pc, #496]	; (800ee34 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800ec42:	689b      	ldr	r3, [r3, #8]
 800ec44:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d005      	beq.n	800ec58 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 800ec4c:	4b79      	ldr	r3, [pc, #484]	; (800ee34 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800ec4e:	689b      	ldr	r3, [r3, #8]
 800ec50:	0f1b      	lsrs	r3, r3, #28
 800ec52:	f003 030f 	and.w	r3, r3, #15
 800ec56:	e006      	b.n	800ec66 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 800ec58:	4b76      	ldr	r3, [pc, #472]	; (800ee34 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800ec5a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ec5e:	041b      	lsls	r3, r3, #16
 800ec60:	0f1b      	lsrs	r3, r3, #28
 800ec62:	f003 030f 	and.w	r3, r3, #15
 800ec66:	4a76      	ldr	r2, [pc, #472]	; (800ee40 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800ec68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ec6c:	ee07 3a90 	vmov	s15, r3
 800ec70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ec74:	693b      	ldr	r3, [r7, #16]
 800ec76:	ee07 3a90 	vmov	s15, r3
 800ec7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ec7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ec82:	69bb      	ldr	r3, [r7, #24]
 800ec84:	ee07 3a90 	vmov	s15, r3
 800ec88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ec8c:	ed97 6a02 	vldr	s12, [r7, #8]
 800ec90:	eddf 5a6a 	vldr	s11, [pc, #424]	; 800ee3c <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800ec94:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ec98:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ec9c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800eca0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800eca4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eca8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ecac:	e058      	b.n	800ed60 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ecae:	693b      	ldr	r3, [r7, #16]
 800ecb0:	ee07 3a90 	vmov	s15, r3
 800ecb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ecb8:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ee38 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800ecbc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ecc0:	4b5c      	ldr	r3, [pc, #368]	; (800ee34 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800ecc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ecc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ecc8:	ee07 3a90 	vmov	s15, r3
 800eccc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800ecd0:	ed97 6a02 	vldr	s12, [r7, #8]
 800ecd4:	eddf 5a59 	vldr	s11, [pc, #356]	; 800ee3c <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800ecd8:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ecdc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800ece0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ece4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ece8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ecec:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ecf0:	e036      	b.n	800ed60 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800ecf2:	4b50      	ldr	r3, [pc, #320]	; (800ee34 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800ecf4:	689b      	ldr	r3, [r3, #8]
 800ecf6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d005      	beq.n	800ed0a <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 800ecfe:	4b4d      	ldr	r3, [pc, #308]	; (800ee34 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800ed00:	689b      	ldr	r3, [r3, #8]
 800ed02:	0f1b      	lsrs	r3, r3, #28
 800ed04:	f003 030f 	and.w	r3, r3, #15
 800ed08:	e006      	b.n	800ed18 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 800ed0a:	4b4a      	ldr	r3, [pc, #296]	; (800ee34 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800ed0c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ed10:	041b      	lsls	r3, r3, #16
 800ed12:	0f1b      	lsrs	r3, r3, #28
 800ed14:	f003 030f 	and.w	r3, r3, #15
 800ed18:	4a49      	ldr	r2, [pc, #292]	; (800ee40 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800ed1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ed1e:	ee07 3a90 	vmov	s15, r3
 800ed22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ed26:	693b      	ldr	r3, [r7, #16]
 800ed28:	ee07 3a90 	vmov	s15, r3
 800ed2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ed30:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ed34:	69bb      	ldr	r3, [r7, #24]
 800ed36:	ee07 3a90 	vmov	s15, r3
 800ed3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ed3e:	ed97 6a02 	vldr	s12, [r7, #8]
 800ed42:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800ee3c <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800ed46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ed4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ed4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ed52:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800ed56:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ed5a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ed5e:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800ed60:	4b34      	ldr	r3, [pc, #208]	; (800ee34 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800ed62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d017      	beq.n	800ed9c <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800ed6c:	4b31      	ldr	r3, [pc, #196]	; (800ee34 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800ed6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ed70:	0a5b      	lsrs	r3, r3, #9
 800ed72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ed76:	ee07 3a90 	vmov	s15, r3
 800ed7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800ed7e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ed82:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800ed86:	edd7 6a07 	vldr	s13, [r7, #28]
 800ed8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ed8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ed92:	ee17 2a90 	vmov	r2, s15
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	601a      	str	r2, [r3, #0]
 800ed9a:	e002      	b.n	800eda2 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	2200      	movs	r2, #0
 800eda0:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800eda2:	4b24      	ldr	r3, [pc, #144]	; (800ee34 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800eda4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eda6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d017      	beq.n	800edde <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800edae:	4b21      	ldr	r3, [pc, #132]	; (800ee34 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800edb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800edb2:	0c1b      	lsrs	r3, r3, #16
 800edb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800edb8:	ee07 3a90 	vmov	s15, r3
 800edbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 800edc0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800edc4:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800edc8:	edd7 6a07 	vldr	s13, [r7, #28]
 800edcc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800edd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800edd4:	ee17 2a90 	vmov	r2, s15
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	605a      	str	r2, [r3, #4]
 800eddc:	e002      	b.n	800ede4 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	2200      	movs	r2, #0
 800ede2:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800ede4:	4b13      	ldr	r3, [pc, #76]	; (800ee34 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800ede6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ede8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800edec:	2b00      	cmp	r3, #0
 800edee:	d017      	beq.n	800ee20 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800edf0:	4b10      	ldr	r3, [pc, #64]	; (800ee34 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800edf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800edf4:	0e1b      	lsrs	r3, r3, #24
 800edf6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800edfa:	ee07 3a90 	vmov	s15, r3
 800edfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800ee02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ee06:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800ee0a:	edd7 6a07 	vldr	s13, [r7, #28]
 800ee0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ee12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ee16:	ee17 2a90 	vmov	r2, s15
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800ee1e:	e002      	b.n	800ee26 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	2200      	movs	r2, #0
 800ee24:	609a      	str	r2, [r3, #8]
}
 800ee26:	bf00      	nop
 800ee28:	3724      	adds	r7, #36	; 0x24
 800ee2a:	46bd      	mov	sp, r7
 800ee2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee30:	4770      	bx	lr
 800ee32:	bf00      	nop
 800ee34:	46020c00 	.word	0x46020c00
 800ee38:	4b742400 	.word	0x4b742400
 800ee3c:	46000000 	.word	0x46000000
 800ee40:	0818dc20 	.word	0x0818dc20

0800ee44 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800ee44:	b480      	push	{r7}
 800ee46:	b089      	sub	sp, #36	; 0x24
 800ee48:	af00      	add	r7, sp, #0
 800ee4a:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800ee4c:	4ba6      	ldr	r3, [pc, #664]	; (800f0e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ee4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ee54:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800ee56:	4ba4      	ldr	r3, [pc, #656]	; (800f0e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ee58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee5a:	f003 0303 	and.w	r3, r3, #3
 800ee5e:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 800ee60:	4ba1      	ldr	r3, [pc, #644]	; (800f0e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ee62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee64:	0a1b      	lsrs	r3, r3, #8
 800ee66:	f003 030f 	and.w	r3, r3, #15
 800ee6a:	3301      	adds	r3, #1
 800ee6c:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 800ee6e:	4b9e      	ldr	r3, [pc, #632]	; (800f0e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ee70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee72:	091b      	lsrs	r3, r3, #4
 800ee74:	f003 0301 	and.w	r3, r3, #1
 800ee78:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800ee7a:	4b9b      	ldr	r3, [pc, #620]	; (800f0e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ee7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee7e:	08db      	lsrs	r3, r3, #3
 800ee80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ee84:	68fa      	ldr	r2, [r7, #12]
 800ee86:	fb02 f303 	mul.w	r3, r2, r3
 800ee8a:	ee07 3a90 	vmov	s15, r3
 800ee8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ee92:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 800ee96:	697b      	ldr	r3, [r7, #20]
 800ee98:	2b03      	cmp	r3, #3
 800ee9a:	d062      	beq.n	800ef62 <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 800ee9c:	697b      	ldr	r3, [r7, #20]
 800ee9e:	2b03      	cmp	r3, #3
 800eea0:	f200 8081 	bhi.w	800efa6 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 800eea4:	697b      	ldr	r3, [r7, #20]
 800eea6:	2b01      	cmp	r3, #1
 800eea8:	d024      	beq.n	800eef4 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 800eeaa:	697b      	ldr	r3, [r7, #20]
 800eeac:	2b02      	cmp	r3, #2
 800eeae:	d17a      	bne.n	800efa6 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800eeb0:	693b      	ldr	r3, [r7, #16]
 800eeb2:	ee07 3a90 	vmov	s15, r3
 800eeb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eeba:	eddf 6a8c 	vldr	s13, [pc, #560]	; 800f0ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800eebe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800eec2:	4b89      	ldr	r3, [pc, #548]	; (800f0e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800eec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eec6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eeca:	ee07 3a90 	vmov	s15, r3
 800eece:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800eed2:	ed97 6a02 	vldr	s12, [r7, #8]
 800eed6:	eddf 5a86 	vldr	s11, [pc, #536]	; 800f0f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800eeda:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800eede:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800eee2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800eee6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800eeea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eeee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800eef2:	e08f      	b.n	800f014 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800eef4:	4b7c      	ldr	r3, [pc, #496]	; (800f0e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800eef6:	689b      	ldr	r3, [r3, #8]
 800eef8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d005      	beq.n	800ef0c <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 800ef00:	4b79      	ldr	r3, [pc, #484]	; (800f0e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ef02:	689b      	ldr	r3, [r3, #8]
 800ef04:	0f1b      	lsrs	r3, r3, #28
 800ef06:	f003 030f 	and.w	r3, r3, #15
 800ef0a:	e006      	b.n	800ef1a <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 800ef0c:	4b76      	ldr	r3, [pc, #472]	; (800f0e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ef0e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ef12:	041b      	lsls	r3, r3, #16
 800ef14:	0f1b      	lsrs	r3, r3, #28
 800ef16:	f003 030f 	and.w	r3, r3, #15
 800ef1a:	4a76      	ldr	r2, [pc, #472]	; (800f0f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800ef1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ef20:	ee07 3a90 	vmov	s15, r3
 800ef24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ef28:	693b      	ldr	r3, [r7, #16]
 800ef2a:	ee07 3a90 	vmov	s15, r3
 800ef2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ef32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ef36:	69bb      	ldr	r3, [r7, #24]
 800ef38:	ee07 3a90 	vmov	s15, r3
 800ef3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ef40:	ed97 6a02 	vldr	s12, [r7, #8]
 800ef44:	eddf 5a6a 	vldr	s11, [pc, #424]	; 800f0f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800ef48:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ef4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ef50:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ef54:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800ef58:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ef5c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ef60:	e058      	b.n	800f014 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800ef62:	693b      	ldr	r3, [r7, #16]
 800ef64:	ee07 3a90 	vmov	s15, r3
 800ef68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ef6c:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800f0ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800ef70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ef74:	4b5c      	ldr	r3, [pc, #368]	; (800f0e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ef76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ef78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ef7c:	ee07 3a90 	vmov	s15, r3
 800ef80:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800ef84:	ed97 6a02 	vldr	s12, [r7, #8]
 800ef88:	eddf 5a59 	vldr	s11, [pc, #356]	; 800f0f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800ef8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800ef90:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800ef94:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ef98:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800ef9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800efa0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800efa4:	e036      	b.n	800f014 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800efa6:	4b50      	ldr	r3, [pc, #320]	; (800f0e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800efa8:	689b      	ldr	r3, [r3, #8]
 800efaa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d005      	beq.n	800efbe <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 800efb2:	4b4d      	ldr	r3, [pc, #308]	; (800f0e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800efb4:	689b      	ldr	r3, [r3, #8]
 800efb6:	0f1b      	lsrs	r3, r3, #28
 800efb8:	f003 030f 	and.w	r3, r3, #15
 800efbc:	e006      	b.n	800efcc <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 800efbe:	4b4a      	ldr	r3, [pc, #296]	; (800f0e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800efc0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800efc4:	041b      	lsls	r3, r3, #16
 800efc6:	0f1b      	lsrs	r3, r3, #28
 800efc8:	f003 030f 	and.w	r3, r3, #15
 800efcc:	4a49      	ldr	r2, [pc, #292]	; (800f0f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800efce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800efd2:	ee07 3a90 	vmov	s15, r3
 800efd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800efda:	693b      	ldr	r3, [r7, #16]
 800efdc:	ee07 3a90 	vmov	s15, r3
 800efe0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800efe4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800efe8:	69bb      	ldr	r3, [r7, #24]
 800efea:	ee07 3a90 	vmov	s15, r3
 800efee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800eff2:	ed97 6a02 	vldr	s12, [r7, #8]
 800eff6:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800f0f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800effa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800effe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f002:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f006:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800f00a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f00e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800f012:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800f014:	4b34      	ldr	r3, [pc, #208]	; (800f0e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800f016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f018:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d017      	beq.n	800f050 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800f020:	4b31      	ldr	r3, [pc, #196]	; (800f0e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800f022:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f024:	0a5b      	lsrs	r3, r3, #9
 800f026:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f02a:	ee07 3a90 	vmov	s15, r3
 800f02e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 800f032:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f036:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800f03a:	edd7 6a07 	vldr	s13, [r7, #28]
 800f03e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f042:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f046:	ee17 2a90 	vmov	r2, s15
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	601a      	str	r2, [r3, #0]
 800f04e:	e002      	b.n	800f056 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	2200      	movs	r2, #0
 800f054:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800f056:	4b24      	ldr	r3, [pc, #144]	; (800f0e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800f058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f05a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d017      	beq.n	800f092 <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800f062:	4b21      	ldr	r3, [pc, #132]	; (800f0e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800f064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f066:	0c1b      	lsrs	r3, r3, #16
 800f068:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f06c:	ee07 3a90 	vmov	s15, r3
 800f070:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 800f074:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f078:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800f07c:	edd7 6a07 	vldr	s13, [r7, #28]
 800f080:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f084:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f088:	ee17 2a90 	vmov	r2, s15
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	605a      	str	r2, [r3, #4]
 800f090:	e002      	b.n	800f098 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	2200      	movs	r2, #0
 800f096:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800f098:	4b13      	ldr	r3, [pc, #76]	; (800f0e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800f09a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f09c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d017      	beq.n	800f0d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800f0a4:	4b10      	ldr	r3, [pc, #64]	; (800f0e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800f0a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f0a8:	0e1b      	lsrs	r3, r3, #24
 800f0aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f0ae:	ee07 3a90 	vmov	s15, r3
 800f0b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800f0b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f0ba:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800f0be:	edd7 6a07 	vldr	s13, [r7, #28]
 800f0c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f0c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f0ca:	ee17 2a90 	vmov	r2, s15
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800f0d2:	e002      	b.n	800f0da <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	2200      	movs	r2, #0
 800f0d8:	609a      	str	r2, [r3, #8]
}
 800f0da:	bf00      	nop
 800f0dc:	3724      	adds	r7, #36	; 0x24
 800f0de:	46bd      	mov	sp, r7
 800f0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0e4:	4770      	bx	lr
 800f0e6:	bf00      	nop
 800f0e8:	46020c00 	.word	0x46020c00
 800f0ec:	4b742400 	.word	0x4b742400
 800f0f0:	46000000 	.word	0x46000000
 800f0f4:	0818dc20 	.word	0x0818dc20

0800f0f8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800f0f8:	b480      	push	{r7}
 800f0fa:	b089      	sub	sp, #36	; 0x24
 800f0fc:	af00      	add	r7, sp, #0
 800f0fe:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800f100:	4ba6      	ldr	r3, [pc, #664]	; (800f39c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800f102:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f104:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f108:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800f10a:	4ba4      	ldr	r3, [pc, #656]	; (800f39c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800f10c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f10e:	f003 0303 	and.w	r3, r3, #3
 800f112:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 800f114:	4ba1      	ldr	r3, [pc, #644]	; (800f39c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800f116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f118:	0a1b      	lsrs	r3, r3, #8
 800f11a:	f003 030f 	and.w	r3, r3, #15
 800f11e:	3301      	adds	r3, #1
 800f120:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 800f122:	4b9e      	ldr	r3, [pc, #632]	; (800f39c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800f124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f126:	091b      	lsrs	r3, r3, #4
 800f128:	f003 0301 	and.w	r3, r3, #1
 800f12c:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800f12e:	4b9b      	ldr	r3, [pc, #620]	; (800f39c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800f130:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f132:	08db      	lsrs	r3, r3, #3
 800f134:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f138:	68fa      	ldr	r2, [r7, #12]
 800f13a:	fb02 f303 	mul.w	r3, r2, r3
 800f13e:	ee07 3a90 	vmov	s15, r3
 800f142:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f146:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 800f14a:	697b      	ldr	r3, [r7, #20]
 800f14c:	2b03      	cmp	r3, #3
 800f14e:	d062      	beq.n	800f216 <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 800f150:	697b      	ldr	r3, [r7, #20]
 800f152:	2b03      	cmp	r3, #3
 800f154:	f200 8081 	bhi.w	800f25a <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 800f158:	697b      	ldr	r3, [r7, #20]
 800f15a:	2b01      	cmp	r3, #1
 800f15c:	d024      	beq.n	800f1a8 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 800f15e:	697b      	ldr	r3, [r7, #20]
 800f160:	2b02      	cmp	r3, #2
 800f162:	d17a      	bne.n	800f25a <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800f164:	693b      	ldr	r3, [r7, #16]
 800f166:	ee07 3a90 	vmov	s15, r3
 800f16a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f16e:	eddf 6a8c 	vldr	s13, [pc, #560]	; 800f3a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800f172:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f176:	4b89      	ldr	r3, [pc, #548]	; (800f39c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800f178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f17a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f17e:	ee07 3a90 	vmov	s15, r3
 800f182:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800f186:	ed97 6a02 	vldr	s12, [r7, #8]
 800f18a:	eddf 5a86 	vldr	s11, [pc, #536]	; 800f3a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800f18e:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800f192:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800f196:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f19a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800f19e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f1a2:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 800f1a6:	e08f      	b.n	800f2c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800f1a8:	4b7c      	ldr	r3, [pc, #496]	; (800f39c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800f1aa:	689b      	ldr	r3, [r3, #8]
 800f1ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d005      	beq.n	800f1c0 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 800f1b4:	4b79      	ldr	r3, [pc, #484]	; (800f39c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800f1b6:	689b      	ldr	r3, [r3, #8]
 800f1b8:	0f1b      	lsrs	r3, r3, #28
 800f1ba:	f003 030f 	and.w	r3, r3, #15
 800f1be:	e006      	b.n	800f1ce <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 800f1c0:	4b76      	ldr	r3, [pc, #472]	; (800f39c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800f1c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f1c6:	041b      	lsls	r3, r3, #16
 800f1c8:	0f1b      	lsrs	r3, r3, #28
 800f1ca:	f003 030f 	and.w	r3, r3, #15
 800f1ce:	4a76      	ldr	r2, [pc, #472]	; (800f3a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800f1d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f1d4:	ee07 3a90 	vmov	s15, r3
 800f1d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f1dc:	693b      	ldr	r3, [r7, #16]
 800f1de:	ee07 3a90 	vmov	s15, r3
 800f1e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f1e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f1ea:	69bb      	ldr	r3, [r7, #24]
 800f1ec:	ee07 3a90 	vmov	s15, r3
 800f1f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f1f4:	ed97 6a02 	vldr	s12, [r7, #8]
 800f1f8:	eddf 5a6a 	vldr	s11, [pc, #424]	; 800f3a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800f1fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f200:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f204:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f208:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800f20c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f210:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800f214:	e058      	b.n	800f2c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800f216:	693b      	ldr	r3, [r7, #16]
 800f218:	ee07 3a90 	vmov	s15, r3
 800f21c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f220:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800f3a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800f224:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f228:	4b5c      	ldr	r3, [pc, #368]	; (800f39c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800f22a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f22c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f230:	ee07 3a90 	vmov	s15, r3
 800f234:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800f238:	ed97 6a02 	vldr	s12, [r7, #8]
 800f23c:	eddf 5a59 	vldr	s11, [pc, #356]	; 800f3a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800f240:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800f244:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800f248:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f24c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800f250:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f254:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800f258:	e036      	b.n	800f2c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800f25a:	4b50      	ldr	r3, [pc, #320]	; (800f39c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800f25c:	689b      	ldr	r3, [r3, #8]
 800f25e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f262:	2b00      	cmp	r3, #0
 800f264:	d005      	beq.n	800f272 <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 800f266:	4b4d      	ldr	r3, [pc, #308]	; (800f39c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800f268:	689b      	ldr	r3, [r3, #8]
 800f26a:	0f1b      	lsrs	r3, r3, #28
 800f26c:	f003 030f 	and.w	r3, r3, #15
 800f270:	e006      	b.n	800f280 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 800f272:	4b4a      	ldr	r3, [pc, #296]	; (800f39c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800f274:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f278:	041b      	lsls	r3, r3, #16
 800f27a:	0f1b      	lsrs	r3, r3, #28
 800f27c:	f003 030f 	and.w	r3, r3, #15
 800f280:	4a49      	ldr	r2, [pc, #292]	; (800f3a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800f282:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f286:	ee07 3a90 	vmov	s15, r3
 800f28a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f28e:	693b      	ldr	r3, [r7, #16]
 800f290:	ee07 3a90 	vmov	s15, r3
 800f294:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f298:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f29c:	69bb      	ldr	r3, [r7, #24]
 800f29e:	ee07 3a90 	vmov	s15, r3
 800f2a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f2a6:	ed97 6a02 	vldr	s12, [r7, #8]
 800f2aa:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800f3a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800f2ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f2b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f2b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f2ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800f2be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f2c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800f2c6:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800f2c8:	4b34      	ldr	r3, [pc, #208]	; (800f39c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800f2ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f2cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d017      	beq.n	800f304 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800f2d4:	4b31      	ldr	r3, [pc, #196]	; (800f39c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800f2d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f2d8:	0a5b      	lsrs	r3, r3, #9
 800f2da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f2de:	ee07 3a90 	vmov	s15, r3
 800f2e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800f2e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f2ea:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800f2ee:	edd7 6a07 	vldr	s13, [r7, #28]
 800f2f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f2f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f2fa:	ee17 2a90 	vmov	r2, s15
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	601a      	str	r2, [r3, #0]
 800f302:	e002      	b.n	800f30a <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	2200      	movs	r2, #0
 800f308:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800f30a:	4b24      	ldr	r3, [pc, #144]	; (800f39c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800f30c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f30e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f312:	2b00      	cmp	r3, #0
 800f314:	d017      	beq.n	800f346 <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800f316:	4b21      	ldr	r3, [pc, #132]	; (800f39c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800f318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f31a:	0c1b      	lsrs	r3, r3, #16
 800f31c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f320:	ee07 3a90 	vmov	s15, r3
 800f324:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 800f328:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f32c:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800f330:	edd7 6a07 	vldr	s13, [r7, #28]
 800f334:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f338:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f33c:	ee17 2a90 	vmov	r2, s15
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	605a      	str	r2, [r3, #4]
 800f344:	e002      	b.n	800f34c <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	2200      	movs	r2, #0
 800f34a:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800f34c:	4b13      	ldr	r3, [pc, #76]	; (800f39c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800f34e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f350:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f354:	2b00      	cmp	r3, #0
 800f356:	d017      	beq.n	800f388 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800f358:	4b10      	ldr	r3, [pc, #64]	; (800f39c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800f35a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f35c:	0e1b      	lsrs	r3, r3, #24
 800f35e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f362:	ee07 3a90 	vmov	s15, r3
 800f366:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800f36a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f36e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800f372:	edd7 6a07 	vldr	s13, [r7, #28]
 800f376:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f37a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f37e:	ee17 2a90 	vmov	r2, s15
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800f386:	e002      	b.n	800f38e <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	2200      	movs	r2, #0
 800f38c:	609a      	str	r2, [r3, #8]
}
 800f38e:	bf00      	nop
 800f390:	3724      	adds	r7, #36	; 0x24
 800f392:	46bd      	mov	sp, r7
 800f394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f398:	4770      	bx	lr
 800f39a:	bf00      	nop
 800f39c:	46020c00 	.word	0x46020c00
 800f3a0:	4b742400 	.word	0x4b742400
 800f3a4:	46000000 	.word	0x46000000
 800f3a8:	0818dc20 	.word	0x0818dc20

0800f3ac <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800f3ac:	b580      	push	{r7, lr}
 800f3ae:	b08e      	sub	sp, #56	; 0x38
 800f3b0:	af00      	add	r7, sp, #0
 800f3b2:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800f3b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f3ba:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 800f3be:	430b      	orrs	r3, r1
 800f3c0:	d145      	bne.n	800f44e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800f3c2:	4ba7      	ldr	r3, [pc, #668]	; (800f660 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800f3c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f3c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f3cc:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800f3ce:	4ba4      	ldr	r3, [pc, #656]	; (800f660 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800f3d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f3d4:	f003 0302 	and.w	r3, r3, #2
 800f3d8:	2b02      	cmp	r3, #2
 800f3da:	d108      	bne.n	800f3ee <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800f3dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f3e2:	d104      	bne.n	800f3ee <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800f3e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f3e8:	637b      	str	r3, [r7, #52]	; 0x34
 800f3ea:	f001 b9b3 	b.w	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800f3ee:	4b9c      	ldr	r3, [pc, #624]	; (800f660 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800f3f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f3f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f3f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f3fc:	d114      	bne.n	800f428 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800f3fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f400:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f404:	d110      	bne.n	800f428 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800f406:	4b96      	ldr	r3, [pc, #600]	; (800f660 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800f408:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f40c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f410:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f414:	d103      	bne.n	800f41e <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800f416:	23fa      	movs	r3, #250	; 0xfa
 800f418:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800f41a:	f001 b99b 	b.w	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 800f41e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800f422:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800f424:	f001 b996 	b.w	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800f428:	4b8d      	ldr	r3, [pc, #564]	; (800f660 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800f42a:	681b      	ldr	r3, [r3, #0]
 800f42c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f430:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f434:	d107      	bne.n	800f446 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800f436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f438:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f43c:	d103      	bne.n	800f446 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800f43e:	4b89      	ldr	r3, [pc, #548]	; (800f664 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800f440:	637b      	str	r3, [r7, #52]	; 0x34
 800f442:	f001 b987 	b.w	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800f446:	2300      	movs	r3, #0
 800f448:	637b      	str	r3, [r7, #52]	; 0x34
 800f44a:	f001 b983 	b.w	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800f44e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f452:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800f456:	430b      	orrs	r3, r1
 800f458:	d151      	bne.n	800f4fe <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800f45a:	4b81      	ldr	r3, [pc, #516]	; (800f660 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800f45c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800f460:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800f464:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800f466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f468:	2b80      	cmp	r3, #128	; 0x80
 800f46a:	d035      	beq.n	800f4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 800f46c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f46e:	2b80      	cmp	r3, #128	; 0x80
 800f470:	d841      	bhi.n	800f4f6 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800f472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f474:	2b60      	cmp	r3, #96	; 0x60
 800f476:	d02a      	beq.n	800f4ce <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 800f478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f47a:	2b60      	cmp	r3, #96	; 0x60
 800f47c:	d83b      	bhi.n	800f4f6 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800f47e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f480:	2b40      	cmp	r3, #64	; 0x40
 800f482:	d009      	beq.n	800f498 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800f484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f486:	2b40      	cmp	r3, #64	; 0x40
 800f488:	d835      	bhi.n	800f4f6 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800f48a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d00c      	beq.n	800f4aa <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 800f490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f492:	2b20      	cmp	r3, #32
 800f494:	d012      	beq.n	800f4bc <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800f496:	e02e      	b.n	800f4f6 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f498:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f49c:	4618      	mov	r0, r3
 800f49e:	f7ff fb77 	bl	800eb90 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800f4a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4a4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f4a6:	f001 b955 	b.w	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f4aa:	f107 0318 	add.w	r3, r7, #24
 800f4ae:	4618      	mov	r0, r3
 800f4b0:	f7ff fcc8 	bl	800ee44 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800f4b4:	69bb      	ldr	r3, [r7, #24]
 800f4b6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f4b8:	f001 b94c 	b.w	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f4bc:	f107 030c 	add.w	r3, r7, #12
 800f4c0:	4618      	mov	r0, r3
 800f4c2:	f7ff fe19 	bl	800f0f8 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800f4c6:	68fb      	ldr	r3, [r7, #12]
 800f4c8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f4ca:	f001 b943 	b.w	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800f4ce:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800f4d2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f4d4:	f001 b93e 	b.w	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800f4d8:	4b61      	ldr	r3, [pc, #388]	; (800f660 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800f4da:	681b      	ldr	r3, [r3, #0]
 800f4dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f4e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f4e4:	d103      	bne.n	800f4ee <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800f4e6:	4b60      	ldr	r3, [pc, #384]	; (800f668 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800f4e8:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800f4ea:	f001 b933 	b.w	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800f4ee:	2300      	movs	r3, #0
 800f4f0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f4f2:	f001 b92f 	b.w	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :
      {
        frequency = 0U;
 800f4f6:	2300      	movs	r3, #0
 800f4f8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f4fa:	f001 b92b 	b.w	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800f4fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f502:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800f506:	430b      	orrs	r3, r1
 800f508:	d158      	bne.n	800f5bc <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800f50a:	4b55      	ldr	r3, [pc, #340]	; (800f660 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800f50c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800f510:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f514:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800f516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f518:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f51c:	d03b      	beq.n	800f596 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800f51e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f520:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f524:	d846      	bhi.n	800f5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800f526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f528:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f52c:	d02e      	beq.n	800f58c <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800f52e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f530:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f534:	d83e      	bhi.n	800f5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800f536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f538:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f53c:	d00b      	beq.n	800f556 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800f53e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f540:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f544:	d836      	bhi.n	800f5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800f546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d00d      	beq.n	800f568 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800f54c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f54e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f552:	d012      	beq.n	800f57a <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 800f554:	e02e      	b.n	800f5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f556:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f55a:	4618      	mov	r0, r3
 800f55c:	f7ff fb18 	bl	800eb90 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800f560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f562:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f564:	f001 b8f6 	b.w	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f568:	f107 0318 	add.w	r3, r7, #24
 800f56c:	4618      	mov	r0, r3
 800f56e:	f7ff fc69 	bl	800ee44 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800f572:	69bb      	ldr	r3, [r7, #24]
 800f574:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f576:	f001 b8ed 	b.w	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f57a:	f107 030c 	add.w	r3, r7, #12
 800f57e:	4618      	mov	r0, r3
 800f580:	f7ff fdba 	bl	800f0f8 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800f584:	68fb      	ldr	r3, [r7, #12]
 800f586:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f588:	f001 b8e4 	b.w	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800f58c:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800f590:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f592:	f001 b8df 	b.w	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800f596:	4b32      	ldr	r3, [pc, #200]	; (800f660 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800f598:	681b      	ldr	r3, [r3, #0]
 800f59a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f59e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f5a2:	d103      	bne.n	800f5ac <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 800f5a4:	4b30      	ldr	r3, [pc, #192]	; (800f668 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800f5a6:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800f5a8:	f001 b8d4 	b.w	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800f5ac:	2300      	movs	r3, #0
 800f5ae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f5b0:	f001 b8d0 	b.w	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :

        frequency = 0U;
 800f5b4:	2300      	movs	r3, #0
 800f5b6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f5b8:	f001 b8cc 	b.w	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 800f5bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f5c0:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800f5c4:	430b      	orrs	r3, r1
 800f5c6:	d126      	bne.n	800f616 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 800f5c8:	4b25      	ldr	r3, [pc, #148]	; (800f660 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800f5ca:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800f5ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f5d2:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 800f5d4:	4b22      	ldr	r3, [pc, #136]	; (800f660 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800f5d6:	681b      	ldr	r3, [r3, #0]
 800f5d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f5dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f5e0:	d106      	bne.n	800f5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800f5e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	d103      	bne.n	800f5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 800f5e8:	4b1f      	ldr	r3, [pc, #124]	; (800f668 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800f5ea:	637b      	str	r3, [r7, #52]	; 0x34
 800f5ec:	f001 b8b2 	b.w	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 800f5f0:	4b1b      	ldr	r3, [pc, #108]	; (800f660 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f5f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f5fc:	d107      	bne.n	800f60e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 800f5fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f600:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f604:	d103      	bne.n	800f60e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 800f606:	4b19      	ldr	r3, [pc, #100]	; (800f66c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800f608:	637b      	str	r3, [r7, #52]	; 0x34
 800f60a:	f001 b8a3 	b.w	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 800f60e:	2300      	movs	r3, #0
 800f610:	637b      	str	r3, [r7, #52]	; 0x34
 800f612:	f001 b89f 	b.w	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 800f616:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f61a:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 800f61e:	430b      	orrs	r3, r1
 800f620:	d16e      	bne.n	800f700 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800f622:	4b0f      	ldr	r3, [pc, #60]	; (800f660 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800f624:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f628:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800f62c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800f62e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f630:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800f634:	d03d      	beq.n	800f6b2 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800f636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f638:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800f63c:	d85c      	bhi.n	800f6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800f63e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f640:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f644:	d014      	beq.n	800f670 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 800f646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f648:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f64c:	d854      	bhi.n	800f6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800f64e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f650:	2b00      	cmp	r3, #0
 800f652:	d01f      	beq.n	800f694 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 800f654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f656:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f65a:	d012      	beq.n	800f682 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800f65c:	e04c      	b.n	800f6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800f65e:	bf00      	nop
 800f660:	46020c00 	.word	0x46020c00
 800f664:	0007a120 	.word	0x0007a120
 800f668:	00f42400 	.word	0x00f42400
 800f66c:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f670:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f674:	4618      	mov	r0, r3
 800f676:	f7ff fa8b 	bl	800eb90 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800f67a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f67c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f67e:	f001 b869 	b.w	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f682:	f107 0318 	add.w	r3, r7, #24
 800f686:	4618      	mov	r0, r3
 800f688:	f7ff fbdc 	bl	800ee44 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800f68c:	69fb      	ldr	r3, [r7, #28]
 800f68e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f690:	f001 b860 	b.w	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800f694:	4ba7      	ldr	r3, [pc, #668]	; (800f934 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f69c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f6a0:	d103      	bne.n	800f6aa <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 800f6a2:	4ba5      	ldr	r3, [pc, #660]	; (800f938 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800f6a4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800f6a6:	f001 b855 	b.w	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800f6aa:	2300      	movs	r3, #0
 800f6ac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f6ae:	f001 b851 	b.w	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800f6b2:	4ba0      	ldr	r3, [pc, #640]	; (800f934 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	f003 0320 	and.w	r3, r3, #32
 800f6ba:	2b20      	cmp	r3, #32
 800f6bc:	d118      	bne.n	800f6f0 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f6be:	4b9d      	ldr	r3, [pc, #628]	; (800f934 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800f6c0:	689b      	ldr	r3, [r3, #8]
 800f6c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d005      	beq.n	800f6d6 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800f6ca:	4b9a      	ldr	r3, [pc, #616]	; (800f934 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800f6cc:	689b      	ldr	r3, [r3, #8]
 800f6ce:	0e1b      	lsrs	r3, r3, #24
 800f6d0:	f003 030f 	and.w	r3, r3, #15
 800f6d4:	e006      	b.n	800f6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800f6d6:	4b97      	ldr	r3, [pc, #604]	; (800f934 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800f6d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f6dc:	041b      	lsls	r3, r3, #16
 800f6de:	0e1b      	lsrs	r3, r3, #24
 800f6e0:	f003 030f 	and.w	r3, r3, #15
 800f6e4:	4a95      	ldr	r2, [pc, #596]	; (800f93c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800f6e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f6ea:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800f6ec:	f001 b832 	b.w	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800f6f0:	2300      	movs	r3, #0
 800f6f2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f6f4:	f001 b82e 	b.w	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :

        frequency = 0U;
 800f6f8:	2300      	movs	r3, #0
 800f6fa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f6fc:	f001 b82a 	b.w	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800f700:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f704:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 800f708:	430b      	orrs	r3, r1
 800f70a:	d17f      	bne.n	800f80c <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800f70c:	4b89      	ldr	r3, [pc, #548]	; (800f934 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800f70e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800f712:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f716:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 800f718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d165      	bne.n	800f7ea <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800f71e:	4b85      	ldr	r3, [pc, #532]	; (800f934 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800f720:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f724:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800f728:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 800f72a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f72c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800f730:	d034      	beq.n	800f79c <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 800f732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f734:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800f738:	d853      	bhi.n	800f7e2 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800f73a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f73c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f740:	d00b      	beq.n	800f75a <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 800f742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f744:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f748:	d84b      	bhi.n	800f7e2 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800f74a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d016      	beq.n	800f77e <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 800f750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f752:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f756:	d009      	beq.n	800f76c <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800f758:	e043      	b.n	800f7e2 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f75a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f75e:	4618      	mov	r0, r3
 800f760:	f7ff fa16 	bl	800eb90 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f766:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800f768:	f000 bff4 	b.w	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f76c:	f107 0318 	add.w	r3, r7, #24
 800f770:	4618      	mov	r0, r3
 800f772:	f7ff fb67 	bl	800ee44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800f776:	69fb      	ldr	r3, [r7, #28]
 800f778:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800f77a:	f000 bfeb 	b.w	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800f77e:	4b6d      	ldr	r3, [pc, #436]	; (800f934 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800f780:	681b      	ldr	r3, [r3, #0]
 800f782:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f786:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f78a:	d103      	bne.n	800f794 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 800f78c:	4b6a      	ldr	r3, [pc, #424]	; (800f938 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800f78e:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800f790:	f000 bfe0 	b.w	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = 0U;
 800f794:	2300      	movs	r3, #0
 800f796:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800f798:	f000 bfdc 	b.w	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800f79c:	4b65      	ldr	r3, [pc, #404]	; (800f934 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	f003 0320 	and.w	r3, r3, #32
 800f7a4:	2b20      	cmp	r3, #32
 800f7a6:	d118      	bne.n	800f7da <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f7a8:	4b62      	ldr	r3, [pc, #392]	; (800f934 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800f7aa:	689b      	ldr	r3, [r3, #8]
 800f7ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d005      	beq.n	800f7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 800f7b4:	4b5f      	ldr	r3, [pc, #380]	; (800f934 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800f7b6:	689b      	ldr	r3, [r3, #8]
 800f7b8:	0e1b      	lsrs	r3, r3, #24
 800f7ba:	f003 030f 	and.w	r3, r3, #15
 800f7be:	e006      	b.n	800f7ce <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800f7c0:	4b5c      	ldr	r3, [pc, #368]	; (800f934 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800f7c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f7c6:	041b      	lsls	r3, r3, #16
 800f7c8:	0e1b      	lsrs	r3, r3, #24
 800f7ca:	f003 030f 	and.w	r3, r3, #15
 800f7ce:	4a5b      	ldr	r2, [pc, #364]	; (800f93c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800f7d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f7d4:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800f7d6:	f000 bfbd 	b.w	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = 0U;
 800f7da:	2300      	movs	r3, #0
 800f7dc:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800f7de:	f000 bfb9 	b.w	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        default :
        {
          frequency = 0U;
 800f7e2:	2300      	movs	r3, #0
 800f7e4:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800f7e6:	f000 bfb5 	b.w	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800f7ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f7f0:	d108      	bne.n	800f804 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f7f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f7f6:	4618      	mov	r0, r3
 800f7f8:	f7ff f9ca 	bl	800eb90 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800f7fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7fe:	637b      	str	r3, [r7, #52]	; 0x34
 800f800:	f000 bfa8 	b.w	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else
    {
      frequency = 0U;
 800f804:	2300      	movs	r3, #0
 800f806:	637b      	str	r3, [r7, #52]	; 0x34
 800f808:	f000 bfa4 	b.w	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 800f80c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f810:	1e51      	subs	r1, r2, #1
 800f812:	430b      	orrs	r3, r1
 800f814:	d136      	bne.n	800f884 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800f816:	4b47      	ldr	r3, [pc, #284]	; (800f934 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800f818:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f81c:	f003 0303 	and.w	r3, r3, #3
 800f820:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800f822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f824:	2b00      	cmp	r3, #0
 800f826:	d104      	bne.n	800f832 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 800f828:	f7fe fb44 	bl	800deb4 <HAL_RCC_GetPCLK2Freq>
 800f82c:	6378      	str	r0, [r7, #52]	; 0x34
 800f82e:	f000 bf91 	b.w	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800f832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f834:	2b01      	cmp	r3, #1
 800f836:	d104      	bne.n	800f842 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800f838:	f7fe fa0c 	bl	800dc54 <HAL_RCC_GetSysClockFreq>
 800f83c:	6378      	str	r0, [r7, #52]	; 0x34
 800f83e:	f000 bf89 	b.w	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800f842:	4b3c      	ldr	r3, [pc, #240]	; (800f934 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f84a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f84e:	d106      	bne.n	800f85e <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 800f850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f852:	2b02      	cmp	r3, #2
 800f854:	d103      	bne.n	800f85e <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 800f856:	4b3a      	ldr	r3, [pc, #232]	; (800f940 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800f858:	637b      	str	r3, [r7, #52]	; 0x34
 800f85a:	f000 bf7b 	b.w	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800f85e:	4b35      	ldr	r3, [pc, #212]	; (800f934 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800f860:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f864:	f003 0302 	and.w	r3, r3, #2
 800f868:	2b02      	cmp	r3, #2
 800f86a:	d107      	bne.n	800f87c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800f86c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f86e:	2b03      	cmp	r3, #3
 800f870:	d104      	bne.n	800f87c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 800f872:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f876:	637b      	str	r3, [r7, #52]	; 0x34
 800f878:	f000 bf6c 	b.w	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 800f87c:	2300      	movs	r3, #0
 800f87e:	637b      	str	r3, [r7, #52]	; 0x34
 800f880:	f000 bf68 	b.w	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 800f884:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f888:	1e91      	subs	r1, r2, #2
 800f88a:	430b      	orrs	r3, r1
 800f88c:	d136      	bne.n	800f8fc <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800f88e:	4b29      	ldr	r3, [pc, #164]	; (800f934 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800f890:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f894:	f003 030c 	and.w	r3, r3, #12
 800f898:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800f89a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d104      	bne.n	800f8aa <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800f8a0:	f7fe faf4 	bl	800de8c <HAL_RCC_GetPCLK1Freq>
 800f8a4:	6378      	str	r0, [r7, #52]	; 0x34
 800f8a6:	f000 bf55 	b.w	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800f8aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8ac:	2b04      	cmp	r3, #4
 800f8ae:	d104      	bne.n	800f8ba <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800f8b0:	f7fe f9d0 	bl	800dc54 <HAL_RCC_GetSysClockFreq>
 800f8b4:	6378      	str	r0, [r7, #52]	; 0x34
 800f8b6:	f000 bf4d 	b.w	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800f8ba:	4b1e      	ldr	r3, [pc, #120]	; (800f934 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800f8bc:	681b      	ldr	r3, [r3, #0]
 800f8be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f8c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f8c6:	d106      	bne.n	800f8d6 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800f8c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8ca:	2b08      	cmp	r3, #8
 800f8cc:	d103      	bne.n	800f8d6 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 800f8ce:	4b1c      	ldr	r3, [pc, #112]	; (800f940 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800f8d0:	637b      	str	r3, [r7, #52]	; 0x34
 800f8d2:	f000 bf3f 	b.w	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800f8d6:	4b17      	ldr	r3, [pc, #92]	; (800f934 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800f8d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f8dc:	f003 0302 	and.w	r3, r3, #2
 800f8e0:	2b02      	cmp	r3, #2
 800f8e2:	d107      	bne.n	800f8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 800f8e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8e6:	2b0c      	cmp	r3, #12
 800f8e8:	d104      	bne.n	800f8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 800f8ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f8ee:	637b      	str	r3, [r7, #52]	; 0x34
 800f8f0:	f000 bf30 	b.w	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 800f8f4:	2300      	movs	r3, #0
 800f8f6:	637b      	str	r3, [r7, #52]	; 0x34
 800f8f8:	f000 bf2c 	b.w	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 800f8fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f900:	1f11      	subs	r1, r2, #4
 800f902:	430b      	orrs	r3, r1
 800f904:	d13f      	bne.n	800f986 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800f906:	4b0b      	ldr	r3, [pc, #44]	; (800f934 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800f908:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f90c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800f910:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800f912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f914:	2b00      	cmp	r3, #0
 800f916:	d104      	bne.n	800f922 <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800f918:	f7fe fab8 	bl	800de8c <HAL_RCC_GetPCLK1Freq>
 800f91c:	6378      	str	r0, [r7, #52]	; 0x34
 800f91e:	f000 bf19 	b.w	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800f922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f924:	2b10      	cmp	r3, #16
 800f926:	d10d      	bne.n	800f944 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800f928:	f7fe f994 	bl	800dc54 <HAL_RCC_GetSysClockFreq>
 800f92c:	6378      	str	r0, [r7, #52]	; 0x34
 800f92e:	f000 bf11 	b.w	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 800f932:	bf00      	nop
 800f934:	46020c00 	.word	0x46020c00
 800f938:	02dc6c00 	.word	0x02dc6c00
 800f93c:	0818dc20 	.word	0x0818dc20
 800f940:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800f944:	4ba6      	ldr	r3, [pc, #664]	; (800fbe0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800f946:	681b      	ldr	r3, [r3, #0]
 800f948:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f94c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f950:	d106      	bne.n	800f960 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 800f952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f954:	2b20      	cmp	r3, #32
 800f956:	d103      	bne.n	800f960 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 800f958:	4ba2      	ldr	r3, [pc, #648]	; (800fbe4 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800f95a:	637b      	str	r3, [r7, #52]	; 0x34
 800f95c:	f000 befa 	b.w	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800f960:	4b9f      	ldr	r3, [pc, #636]	; (800fbe0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800f962:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f966:	f003 0302 	and.w	r3, r3, #2
 800f96a:	2b02      	cmp	r3, #2
 800f96c:	d107      	bne.n	800f97e <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800f96e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f970:	2b30      	cmp	r3, #48	; 0x30
 800f972:	d104      	bne.n	800f97e <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 800f974:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f978:	637b      	str	r3, [r7, #52]	; 0x34
 800f97a:	f000 beeb 	b.w	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 800f97e:	2300      	movs	r3, #0
 800f980:	637b      	str	r3, [r7, #52]	; 0x34
 800f982:	f000 bee7 	b.w	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 800f986:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f98a:	f1a2 0108 	sub.w	r1, r2, #8
 800f98e:	430b      	orrs	r3, r1
 800f990:	d136      	bne.n	800fa00 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800f992:	4b93      	ldr	r3, [pc, #588]	; (800fbe0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800f994:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f998:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800f99c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800f99e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	d104      	bne.n	800f9ae <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800f9a4:	f7fe fa72 	bl	800de8c <HAL_RCC_GetPCLK1Freq>
 800f9a8:	6378      	str	r0, [r7, #52]	; 0x34
 800f9aa:	f000 bed3 	b.w	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800f9ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9b0:	2b40      	cmp	r3, #64	; 0x40
 800f9b2:	d104      	bne.n	800f9be <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800f9b4:	f7fe f94e 	bl	800dc54 <HAL_RCC_GetSysClockFreq>
 800f9b8:	6378      	str	r0, [r7, #52]	; 0x34
 800f9ba:	f000 becb 	b.w	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800f9be:	4b88      	ldr	r3, [pc, #544]	; (800fbe0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800f9c0:	681b      	ldr	r3, [r3, #0]
 800f9c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f9c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f9ca:	d106      	bne.n	800f9da <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 800f9cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9ce:	2b80      	cmp	r3, #128	; 0x80
 800f9d0:	d103      	bne.n	800f9da <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 800f9d2:	4b84      	ldr	r3, [pc, #528]	; (800fbe4 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800f9d4:	637b      	str	r3, [r7, #52]	; 0x34
 800f9d6:	f000 bebd 	b.w	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800f9da:	4b81      	ldr	r3, [pc, #516]	; (800fbe0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800f9dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f9e0:	f003 0302 	and.w	r3, r3, #2
 800f9e4:	2b02      	cmp	r3, #2
 800f9e6:	d107      	bne.n	800f9f8 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800f9e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9ea:	2bc0      	cmp	r3, #192	; 0xc0
 800f9ec:	d104      	bne.n	800f9f8 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 800f9ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f9f2:	637b      	str	r3, [r7, #52]	; 0x34
 800f9f4:	f000 beae 	b.w	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800f9f8:	2300      	movs	r3, #0
 800f9fa:	637b      	str	r3, [r7, #52]	; 0x34
 800f9fc:	f000 beaa 	b.w	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 800fa00:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fa04:	f1a2 0110 	sub.w	r1, r2, #16
 800fa08:	430b      	orrs	r3, r1
 800fa0a:	d139      	bne.n	800fa80 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800fa0c:	4b74      	ldr	r3, [pc, #464]	; (800fbe0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800fa0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fa12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fa16:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800fa18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d104      	bne.n	800fa28 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800fa1e:	f7fe fa35 	bl	800de8c <HAL_RCC_GetPCLK1Freq>
 800fa22:	6378      	str	r0, [r7, #52]	; 0x34
 800fa24:	f000 be96 	b.w	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800fa28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fa2e:	d104      	bne.n	800fa3a <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800fa30:	f7fe f910 	bl	800dc54 <HAL_RCC_GetSysClockFreq>
 800fa34:	6378      	str	r0, [r7, #52]	; 0x34
 800fa36:	f000 be8d 	b.w	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800fa3a:	4b69      	ldr	r3, [pc, #420]	; (800fbe0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800fa3c:	681b      	ldr	r3, [r3, #0]
 800fa3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fa42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fa46:	d107      	bne.n	800fa58 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 800fa48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fa4e:	d103      	bne.n	800fa58 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 800fa50:	4b64      	ldr	r3, [pc, #400]	; (800fbe4 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800fa52:	637b      	str	r3, [r7, #52]	; 0x34
 800fa54:	f000 be7e 	b.w	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800fa58:	4b61      	ldr	r3, [pc, #388]	; (800fbe0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800fa5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800fa5e:	f003 0302 	and.w	r3, r3, #2
 800fa62:	2b02      	cmp	r3, #2
 800fa64:	d108      	bne.n	800fa78 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 800fa66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa68:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800fa6c:	d104      	bne.n	800fa78 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 800fa6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fa72:	637b      	str	r3, [r7, #52]	; 0x34
 800fa74:	f000 be6e 	b.w	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800fa78:	2300      	movs	r3, #0
 800fa7a:	637b      	str	r3, [r7, #52]	; 0x34
 800fa7c:	f000 be6a 	b.w	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800fa80:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fa84:	f1a2 0120 	sub.w	r1, r2, #32
 800fa88:	430b      	orrs	r3, r1
 800fa8a:	d158      	bne.n	800fb3e <HAL_RCCEx_GetPeriphCLKFreq+0x792>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800fa8c:	4b54      	ldr	r3, [pc, #336]	; (800fbe0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800fa8e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800fa92:	f003 0307 	and.w	r3, r3, #7
 800fa96:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800fa98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d104      	bne.n	800faa8 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 800fa9e:	f7fe fa1d 	bl	800dedc <HAL_RCC_GetPCLK3Freq>
 800faa2:	6378      	str	r0, [r7, #52]	; 0x34
 800faa4:	f000 be56 	b.w	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800faa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800faaa:	2b01      	cmp	r3, #1
 800faac:	d104      	bne.n	800fab8 <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800faae:	f7fe f8d1 	bl	800dc54 <HAL_RCC_GetSysClockFreq>
 800fab2:	6378      	str	r0, [r7, #52]	; 0x34
 800fab4:	f000 be4e 	b.w	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800fab8:	4b49      	ldr	r3, [pc, #292]	; (800fbe0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fac0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fac4:	d106      	bne.n	800fad4 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 800fac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fac8:	2b02      	cmp	r3, #2
 800faca:	d103      	bne.n	800fad4 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
    {
      frequency = HSI_VALUE;
 800facc:	4b45      	ldr	r3, [pc, #276]	; (800fbe4 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800face:	637b      	str	r3, [r7, #52]	; 0x34
 800fad0:	f000 be40 	b.w	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800fad4:	4b42      	ldr	r3, [pc, #264]	; (800fbe0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800fad6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800fada:	f003 0302 	and.w	r3, r3, #2
 800fade:	2b02      	cmp	r3, #2
 800fae0:	d107      	bne.n	800faf2 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 800fae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fae4:	2b03      	cmp	r3, #3
 800fae6:	d104      	bne.n	800faf2 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
    {
      frequency = LSE_VALUE;
 800fae8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800faec:	637b      	str	r3, [r7, #52]	; 0x34
 800faee:	f000 be31 	b.w	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800faf2:	4b3b      	ldr	r3, [pc, #236]	; (800fbe0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800faf4:	681b      	ldr	r3, [r3, #0]
 800faf6:	f003 0320 	and.w	r3, r3, #32
 800fafa:	2b20      	cmp	r3, #32
 800fafc:	d11b      	bne.n	800fb36 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
 800fafe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb00:	2b04      	cmp	r3, #4
 800fb02:	d118      	bne.n	800fb36 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800fb04:	4b36      	ldr	r3, [pc, #216]	; (800fbe0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800fb06:	689b      	ldr	r3, [r3, #8]
 800fb08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d005      	beq.n	800fb1c <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800fb10:	4b33      	ldr	r3, [pc, #204]	; (800fbe0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800fb12:	689b      	ldr	r3, [r3, #8]
 800fb14:	0e1b      	lsrs	r3, r3, #24
 800fb16:	f003 030f 	and.w	r3, r3, #15
 800fb1a:	e006      	b.n	800fb2a <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
 800fb1c:	4b30      	ldr	r3, [pc, #192]	; (800fbe0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800fb1e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800fb22:	041b      	lsls	r3, r3, #16
 800fb24:	0e1b      	lsrs	r3, r3, #24
 800fb26:	f003 030f 	and.w	r3, r3, #15
 800fb2a:	4a2f      	ldr	r2, [pc, #188]	; (800fbe8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800fb2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fb30:	637b      	str	r3, [r7, #52]	; 0x34
 800fb32:	f000 be0f 	b.w	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800fb36:	2300      	movs	r3, #0
 800fb38:	637b      	str	r3, [r7, #52]	; 0x34
 800fb3a:	f000 be0b 	b.w	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 800fb3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fb42:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800fb46:	430b      	orrs	r3, r1
 800fb48:	d172      	bne.n	800fc30 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800fb4a:	4b25      	ldr	r3, [pc, #148]	; (800fbe0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800fb4c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800fb50:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800fb54:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800fb56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fb5c:	d104      	bne.n	800fb68 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800fb5e:	f7fe f879 	bl	800dc54 <HAL_RCC_GetSysClockFreq>
 800fb62:	6378      	str	r0, [r7, #52]	; 0x34
 800fb64:	f000 bdf6 	b.w	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800fb68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fb6e:	d108      	bne.n	800fb82 <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fb70:	f107 0318 	add.w	r3, r7, #24
 800fb74:	4618      	mov	r0, r3
 800fb76:	f7ff f965 	bl	800ee44 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800fb7a:	6a3b      	ldr	r3, [r7, #32]
 800fb7c:	637b      	str	r3, [r7, #52]	; 0x34
 800fb7e:	f000 bde9 	b.w	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800fb82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d104      	bne.n	800fb92 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800fb88:	f7fe f966 	bl	800de58 <HAL_RCC_GetHCLKFreq>
 800fb8c:	6378      	str	r0, [r7, #52]	; 0x34
 800fb8e:	f000 bde1 	b.w	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800fb92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb94:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800fb98:	d128      	bne.n	800fbec <HAL_RCCEx_GetPeriphCLKFreq+0x840>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800fb9a:	4b11      	ldr	r3, [pc, #68]	; (800fbe0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800fb9c:	681b      	ldr	r3, [r3, #0]
 800fb9e:	f003 0320 	and.w	r3, r3, #32
 800fba2:	2b20      	cmp	r3, #32
 800fba4:	d118      	bne.n	800fbd8 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800fba6:	4b0e      	ldr	r3, [pc, #56]	; (800fbe0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800fba8:	689b      	ldr	r3, [r3, #8]
 800fbaa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d005      	beq.n	800fbbe <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 800fbb2:	4b0b      	ldr	r3, [pc, #44]	; (800fbe0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800fbb4:	689b      	ldr	r3, [r3, #8]
 800fbb6:	0e1b      	lsrs	r3, r3, #24
 800fbb8:	f003 030f 	and.w	r3, r3, #15
 800fbbc:	e006      	b.n	800fbcc <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 800fbbe:	4b08      	ldr	r3, [pc, #32]	; (800fbe0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800fbc0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800fbc4:	041b      	lsls	r3, r3, #16
 800fbc6:	0e1b      	lsrs	r3, r3, #24
 800fbc8:	f003 030f 	and.w	r3, r3, #15
 800fbcc:	4a06      	ldr	r2, [pc, #24]	; (800fbe8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800fbce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fbd2:	637b      	str	r3, [r7, #52]	; 0x34
 800fbd4:	f000 bdbe 	b.w	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 800fbd8:	2300      	movs	r3, #0
 800fbda:	637b      	str	r3, [r7, #52]	; 0x34
 800fbdc:	f000 bdba 	b.w	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 800fbe0:	46020c00 	.word	0x46020c00
 800fbe4:	00f42400 	.word	0x00f42400
 800fbe8:	0818dc20 	.word	0x0818dc20
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800fbec:	4baf      	ldr	r3, [pc, #700]	; (800feac <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fbf4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800fbf8:	d107      	bne.n	800fc0a <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
 800fbfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbfc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800fc00:	d103      	bne.n	800fc0a <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
    {
      frequency = HSE_VALUE;
 800fc02:	4bab      	ldr	r3, [pc, #684]	; (800feb0 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 800fc04:	637b      	str	r3, [r7, #52]	; 0x34
 800fc06:	f000 bda5 	b.w	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800fc0a:	4ba8      	ldr	r3, [pc, #672]	; (800feac <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800fc0c:	681b      	ldr	r3, [r3, #0]
 800fc0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fc12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fc16:	d107      	bne.n	800fc28 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
 800fc18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc1a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800fc1e:	d103      	bne.n	800fc28 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
    {
      frequency = HSI_VALUE;
 800fc20:	4ba3      	ldr	r3, [pc, #652]	; (800feb0 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 800fc22:	637b      	str	r3, [r7, #52]	; 0x34
 800fc24:	f000 bd96 	b.w	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800fc28:	2300      	movs	r3, #0
 800fc2a:	637b      	str	r3, [r7, #52]	; 0x34
 800fc2c:	f000 bd92 	b.w	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800fc30:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fc34:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800fc38:	430b      	orrs	r3, r1
 800fc3a:	d158      	bne.n	800fcee <HAL_RCCEx_GetPeriphCLKFreq+0x942>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 800fc3c:	4b9b      	ldr	r3, [pc, #620]	; (800feac <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800fc3e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800fc42:	f003 0307 	and.w	r3, r3, #7
 800fc46:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800fc48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc4a:	2b04      	cmp	r3, #4
 800fc4c:	d84b      	bhi.n	800fce6 <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
 800fc4e:	a201      	add	r2, pc, #4	; (adr r2, 800fc54 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 800fc50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc54:	0800fc8d 	.word	0x0800fc8d
 800fc58:	0800fc69 	.word	0x0800fc69
 800fc5c:	0800fc7b 	.word	0x0800fc7b
 800fc60:	0800fc97 	.word	0x0800fc97
 800fc64:	0800fca1 	.word	0x0800fca1
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800fc68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fc6c:	4618      	mov	r0, r3
 800fc6e:	f7fe ff8f 	bl	800eb90 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800fc72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc74:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fc76:	f000 bd6d 	b.w	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fc7a:	f107 030c 	add.w	r3, r7, #12
 800fc7e:	4618      	mov	r0, r3
 800fc80:	f7ff fa3a 	bl	800f0f8 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800fc84:	693b      	ldr	r3, [r7, #16]
 800fc86:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fc88:	f000 bd64 	b.w	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800fc8c:	f7fe f8e4 	bl	800de58 <HAL_RCC_GetHCLKFreq>
 800fc90:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800fc92:	f000 bd5f 	b.w	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800fc96:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800fc9a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fc9c:	f000 bd5a 	b.w	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800fca0:	4b82      	ldr	r3, [pc, #520]	; (800feac <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800fca2:	681b      	ldr	r3, [r3, #0]
 800fca4:	f003 0320 	and.w	r3, r3, #32
 800fca8:	2b20      	cmp	r3, #32
 800fcaa:	d118      	bne.n	800fcde <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800fcac:	4b7f      	ldr	r3, [pc, #508]	; (800feac <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800fcae:	689b      	ldr	r3, [r3, #8]
 800fcb0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	d005      	beq.n	800fcc4 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 800fcb8:	4b7c      	ldr	r3, [pc, #496]	; (800feac <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800fcba:	689b      	ldr	r3, [r3, #8]
 800fcbc:	0e1b      	lsrs	r3, r3, #24
 800fcbe:	f003 030f 	and.w	r3, r3, #15
 800fcc2:	e006      	b.n	800fcd2 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 800fcc4:	4b79      	ldr	r3, [pc, #484]	; (800feac <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800fcc6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800fcca:	041b      	lsls	r3, r3, #16
 800fccc:	0e1b      	lsrs	r3, r3, #24
 800fcce:	f003 030f 	and.w	r3, r3, #15
 800fcd2:	4a78      	ldr	r2, [pc, #480]	; (800feb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 800fcd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fcd8:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800fcda:	f000 bd3b 	b.w	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800fcde:	2300      	movs	r3, #0
 800fce0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fce2:	f000 bd37 	b.w	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 800fce6:	2300      	movs	r3, #0
 800fce8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fcea:	f000 bd33 	b.w	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800fcee:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fcf2:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 800fcf6:	430b      	orrs	r3, r1
 800fcf8:	d167      	bne.n	800fdca <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800fcfa:	4b6c      	ldr	r3, [pc, #432]	; (800feac <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800fcfc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800fd00:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800fd04:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800fd06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd08:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800fd0c:	d036      	beq.n	800fd7c <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
 800fd0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd10:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800fd14:	d855      	bhi.n	800fdc2 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 800fd16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd18:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800fd1c:	d029      	beq.n	800fd72 <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
 800fd1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd20:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800fd24:	d84d      	bhi.n	800fdc2 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 800fd26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd28:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800fd2c:	d013      	beq.n	800fd56 <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 800fd2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd30:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800fd34:	d845      	bhi.n	800fdc2 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 800fd36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	d015      	beq.n	800fd68 <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
 800fd3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fd42:	d13e      	bne.n	800fdc2 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800fd44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fd48:	4618      	mov	r0, r3
 800fd4a:	f7fe ff21 	bl	800eb90 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800fd4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd50:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fd52:	f000 bcff 	b.w	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fd56:	f107 030c 	add.w	r3, r7, #12
 800fd5a:	4618      	mov	r0, r3
 800fd5c:	f7ff f9cc 	bl	800f0f8 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800fd60:	693b      	ldr	r3, [r7, #16]
 800fd62:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fd64:	f000 bcf6 	b.w	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800fd68:	f7fe f876 	bl	800de58 <HAL_RCC_GetHCLKFreq>
 800fd6c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800fd6e:	f000 bcf1 	b.w	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800fd72:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800fd76:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fd78:	f000 bcec 	b.w	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800fd7c:	4b4b      	ldr	r3, [pc, #300]	; (800feac <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800fd7e:	681b      	ldr	r3, [r3, #0]
 800fd80:	f003 0320 	and.w	r3, r3, #32
 800fd84:	2b20      	cmp	r3, #32
 800fd86:	d118      	bne.n	800fdba <HAL_RCCEx_GetPeriphCLKFreq+0xa0e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800fd88:	4b48      	ldr	r3, [pc, #288]	; (800feac <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800fd8a:	689b      	ldr	r3, [r3, #8]
 800fd8c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d005      	beq.n	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
 800fd94:	4b45      	ldr	r3, [pc, #276]	; (800feac <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800fd96:	689b      	ldr	r3, [r3, #8]
 800fd98:	0e1b      	lsrs	r3, r3, #24
 800fd9a:	f003 030f 	and.w	r3, r3, #15
 800fd9e:	e006      	b.n	800fdae <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800fda0:	4b42      	ldr	r3, [pc, #264]	; (800feac <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800fda2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800fda6:	041b      	lsls	r3, r3, #16
 800fda8:	0e1b      	lsrs	r3, r3, #24
 800fdaa:	f003 030f 	and.w	r3, r3, #15
 800fdae:	4a41      	ldr	r2, [pc, #260]	; (800feb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 800fdb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fdb4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800fdb6:	f000 bccd 	b.w	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800fdba:	2300      	movs	r3, #0
 800fdbc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fdbe:	f000 bcc9 	b.w	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 800fdc2:	2300      	movs	r3, #0
 800fdc4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fdc6:	f000 bcc5 	b.w	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800fdca:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fdce:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 800fdd2:	430b      	orrs	r3, r1
 800fdd4:	d14c      	bne.n	800fe70 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800fdd6:	4b35      	ldr	r3, [pc, #212]	; (800feac <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800fdd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fddc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800fde0:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800fde2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	d104      	bne.n	800fdf2 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800fde8:	f7fe f850 	bl	800de8c <HAL_RCC_GetPCLK1Freq>
 800fdec:	6378      	str	r0, [r7, #52]	; 0x34
 800fdee:	f000 bcb1 	b.w	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800fdf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fdf8:	d104      	bne.n	800fe04 <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800fdfa:	f7fd ff2b 	bl	800dc54 <HAL_RCC_GetSysClockFreq>
 800fdfe:	6378      	str	r0, [r7, #52]	; 0x34
 800fe00:	f000 bca8 	b.w	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800fe04:	4b29      	ldr	r3, [pc, #164]	; (800feac <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800fe06:	681b      	ldr	r3, [r3, #0]
 800fe08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fe0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fe10:	d107      	bne.n	800fe22 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 800fe12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fe18:	d103      	bne.n	800fe22 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
    {
      frequency = HSI_VALUE;
 800fe1a:	4b25      	ldr	r3, [pc, #148]	; (800feb0 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 800fe1c:	637b      	str	r3, [r7, #52]	; 0x34
 800fe1e:	f000 bc99 	b.w	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800fe22:	4b22      	ldr	r3, [pc, #136]	; (800feac <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800fe24:	681b      	ldr	r3, [r3, #0]
 800fe26:	f003 0320 	and.w	r3, r3, #32
 800fe2a:	2b20      	cmp	r3, #32
 800fe2c:	d11c      	bne.n	800fe68 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
 800fe2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe30:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800fe34:	d118      	bne.n	800fe68 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800fe36:	4b1d      	ldr	r3, [pc, #116]	; (800feac <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800fe38:	689b      	ldr	r3, [r3, #8]
 800fe3a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d005      	beq.n	800fe4e <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 800fe42:	4b1a      	ldr	r3, [pc, #104]	; (800feac <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800fe44:	689b      	ldr	r3, [r3, #8]
 800fe46:	0e1b      	lsrs	r3, r3, #24
 800fe48:	f003 030f 	and.w	r3, r3, #15
 800fe4c:	e006      	b.n	800fe5c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>
 800fe4e:	4b17      	ldr	r3, [pc, #92]	; (800feac <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800fe50:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800fe54:	041b      	lsls	r3, r3, #16
 800fe56:	0e1b      	lsrs	r3, r3, #24
 800fe58:	f003 030f 	and.w	r3, r3, #15
 800fe5c:	4a15      	ldr	r2, [pc, #84]	; (800feb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 800fe5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe62:	637b      	str	r3, [r7, #52]	; 0x34
 800fe64:	f000 bc76 	b.w	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 800fe68:	2300      	movs	r3, #0
 800fe6a:	637b      	str	r3, [r7, #52]	; 0x34
 800fe6c:	f000 bc72 	b.w	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 800fe70:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fe74:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 800fe78:	430b      	orrs	r3, r1
 800fe7a:	d153      	bne.n	800ff24 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800fe7c:	4b0b      	ldr	r3, [pc, #44]	; (800feac <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800fe7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fe82:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800fe86:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800fe88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe8a:	2b00      	cmp	r3, #0
 800fe8c:	d104      	bne.n	800fe98 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800fe8e:	f7fd fffd 	bl	800de8c <HAL_RCC_GetPCLK1Freq>
 800fe92:	6378      	str	r0, [r7, #52]	; 0x34
 800fe94:	f000 bc5e 	b.w	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800fe98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fe9e:	d10b      	bne.n	800feb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800fea0:	f7fd fed8 	bl	800dc54 <HAL_RCC_GetSysClockFreq>
 800fea4:	6378      	str	r0, [r7, #52]	; 0x34
 800fea6:	f000 bc55 	b.w	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 800feaa:	bf00      	nop
 800feac:	46020c00 	.word	0x46020c00
 800feb0:	00f42400 	.word	0x00f42400
 800feb4:	0818dc20 	.word	0x0818dc20
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800feb8:	4ba1      	ldr	r3, [pc, #644]	; (8010140 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800feba:	681b      	ldr	r3, [r3, #0]
 800febc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fec0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fec4:	d107      	bne.n	800fed6 <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
 800fec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fec8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fecc:	d103      	bne.n	800fed6 <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
    {
      frequency = HSI_VALUE;
 800fece:	4b9d      	ldr	r3, [pc, #628]	; (8010144 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 800fed0:	637b      	str	r3, [r7, #52]	; 0x34
 800fed2:	f000 bc3f 	b.w	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800fed6:	4b9a      	ldr	r3, [pc, #616]	; (8010140 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800fed8:	681b      	ldr	r3, [r3, #0]
 800feda:	f003 0320 	and.w	r3, r3, #32
 800fede:	2b20      	cmp	r3, #32
 800fee0:	d11c      	bne.n	800ff1c <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
 800fee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fee4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800fee8:	d118      	bne.n	800ff1c <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800feea:	4b95      	ldr	r3, [pc, #596]	; (8010140 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800feec:	689b      	ldr	r3, [r3, #8]
 800feee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	d005      	beq.n	800ff02 <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
 800fef6:	4b92      	ldr	r3, [pc, #584]	; (8010140 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800fef8:	689b      	ldr	r3, [r3, #8]
 800fefa:	0e1b      	lsrs	r3, r3, #24
 800fefc:	f003 030f 	and.w	r3, r3, #15
 800ff00:	e006      	b.n	800ff10 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 800ff02:	4b8f      	ldr	r3, [pc, #572]	; (8010140 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800ff04:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ff08:	041b      	lsls	r3, r3, #16
 800ff0a:	0e1b      	lsrs	r3, r3, #24
 800ff0c:	f003 030f 	and.w	r3, r3, #15
 800ff10:	4a8d      	ldr	r2, [pc, #564]	; (8010148 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 800ff12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ff16:	637b      	str	r3, [r7, #52]	; 0x34
 800ff18:	f000 bc1c 	b.w	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800ff1c:	2300      	movs	r3, #0
 800ff1e:	637b      	str	r3, [r7, #52]	; 0x34
 800ff20:	f000 bc18 	b.w	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800ff24:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ff28:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800ff2c:	430b      	orrs	r3, r1
 800ff2e:	d151      	bne.n	800ffd4 <HAL_RCCEx_GetPeriphCLKFreq+0xc28>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800ff30:	4b83      	ldr	r3, [pc, #524]	; (8010140 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800ff32:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800ff36:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800ff3a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800ff3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff3e:	2bc0      	cmp	r3, #192	; 0xc0
 800ff40:	d024      	beq.n	800ff8c <HAL_RCCEx_GetPeriphCLKFreq+0xbe0>
 800ff42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff44:	2bc0      	cmp	r3, #192	; 0xc0
 800ff46:	d842      	bhi.n	800ffce <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 800ff48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff4a:	2b80      	cmp	r3, #128	; 0x80
 800ff4c:	d00d      	beq.n	800ff6a <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
 800ff4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff50:	2b80      	cmp	r3, #128	; 0x80
 800ff52:	d83c      	bhi.n	800ffce <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 800ff54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	d003      	beq.n	800ff62 <HAL_RCCEx_GetPeriphCLKFreq+0xbb6>
 800ff5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff5c:	2b40      	cmp	r3, #64	; 0x40
 800ff5e:	d011      	beq.n	800ff84 <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
 800ff60:	e035      	b.n	800ffce <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800ff62:	f7fd ffbb 	bl	800dedc <HAL_RCC_GetPCLK3Freq>
 800ff66:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800ff68:	e3f4      	b.n	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ff6a:	4b75      	ldr	r3, [pc, #468]	; (8010140 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800ff6c:	681b      	ldr	r3, [r3, #0]
 800ff6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ff72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ff76:	d102      	bne.n	800ff7e <HAL_RCCEx_GetPeriphCLKFreq+0xbd2>
        {
          frequency = HSI_VALUE;
 800ff78:	4b72      	ldr	r3, [pc, #456]	; (8010144 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 800ff7a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800ff7c:	e3ea      	b.n	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800ff7e:	2300      	movs	r3, #0
 800ff80:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ff82:	e3e7      	b.n	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 800ff84:	f7fd fe66 	bl	800dc54 <HAL_RCC_GetSysClockFreq>
 800ff88:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800ff8a:	e3e3      	b.n	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800ff8c:	4b6c      	ldr	r3, [pc, #432]	; (8010140 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	f003 0320 	and.w	r3, r3, #32
 800ff94:	2b20      	cmp	r3, #32
 800ff96:	d117      	bne.n	800ffc8 <HAL_RCCEx_GetPeriphCLKFreq+0xc1c>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ff98:	4b69      	ldr	r3, [pc, #420]	; (8010140 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800ff9a:	689b      	ldr	r3, [r3, #8]
 800ff9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	d005      	beq.n	800ffb0 <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
 800ffa4:	4b66      	ldr	r3, [pc, #408]	; (8010140 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800ffa6:	689b      	ldr	r3, [r3, #8]
 800ffa8:	0e1b      	lsrs	r3, r3, #24
 800ffaa:	f003 030f 	and.w	r3, r3, #15
 800ffae:	e006      	b.n	800ffbe <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 800ffb0:	4b63      	ldr	r3, [pc, #396]	; (8010140 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800ffb2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ffb6:	041b      	lsls	r3, r3, #16
 800ffb8:	0e1b      	lsrs	r3, r3, #24
 800ffba:	f003 030f 	and.w	r3, r3, #15
 800ffbe:	4a62      	ldr	r2, [pc, #392]	; (8010148 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 800ffc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ffc4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800ffc6:	e3c5      	b.n	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800ffc8:	2300      	movs	r3, #0
 800ffca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ffcc:	e3c2      	b.n	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      default:
      {
        frequency = 0U;
 800ffce:	2300      	movs	r3, #0
 800ffd0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ffd2:	e3bf      	b.n	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800ffd4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ffd8:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 800ffdc:	430b      	orrs	r3, r1
 800ffde:	d147      	bne.n	8010070 <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800ffe0:	4b57      	ldr	r3, [pc, #348]	; (8010140 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800ffe2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ffe6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800ffea:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800ffec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	d103      	bne.n	800fffa <HAL_RCCEx_GetPeriphCLKFreq+0xc4e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800fff2:	f7fd ff4b 	bl	800de8c <HAL_RCC_GetPCLK1Freq>
 800fff6:	6378      	str	r0, [r7, #52]	; 0x34
 800fff8:	e3ac      	b.n	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800fffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fffc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010000:	d103      	bne.n	801000a <HAL_RCCEx_GetPeriphCLKFreq+0xc5e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8010002:	f7fd fe27 	bl	800dc54 <HAL_RCC_GetSysClockFreq>
 8010006:	6378      	str	r0, [r7, #52]	; 0x34
 8010008:	e3a4      	b.n	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 801000a:	4b4d      	ldr	r3, [pc, #308]	; (8010140 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 801000c:	681b      	ldr	r3, [r3, #0]
 801000e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010012:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010016:	d106      	bne.n	8010026 <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
 8010018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801001a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801001e:	d102      	bne.n	8010026 <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
    {
      frequency = HSI_VALUE;
 8010020:	4b48      	ldr	r3, [pc, #288]	; (8010144 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8010022:	637b      	str	r3, [r7, #52]	; 0x34
 8010024:	e396      	b.n	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8010026:	4b46      	ldr	r3, [pc, #280]	; (8010140 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	f003 0320 	and.w	r3, r3, #32
 801002e:	2b20      	cmp	r3, #32
 8010030:	d11b      	bne.n	801006a <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
 8010032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010034:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8010038:	d117      	bne.n	801006a <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 801003a:	4b41      	ldr	r3, [pc, #260]	; (8010140 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 801003c:	689b      	ldr	r3, [r3, #8]
 801003e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010042:	2b00      	cmp	r3, #0
 8010044:	d005      	beq.n	8010052 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
 8010046:	4b3e      	ldr	r3, [pc, #248]	; (8010140 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8010048:	689b      	ldr	r3, [r3, #8]
 801004a:	0e1b      	lsrs	r3, r3, #24
 801004c:	f003 030f 	and.w	r3, r3, #15
 8010050:	e006      	b.n	8010060 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
 8010052:	4b3b      	ldr	r3, [pc, #236]	; (8010140 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8010054:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8010058:	041b      	lsls	r3, r3, #16
 801005a:	0e1b      	lsrs	r3, r3, #24
 801005c:	f003 030f 	and.w	r3, r3, #15
 8010060:	4a39      	ldr	r2, [pc, #228]	; (8010148 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 8010062:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010066:	637b      	str	r3, [r7, #52]	; 0x34
 8010068:	e374      	b.n	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 801006a:	2300      	movs	r3, #0
 801006c:	637b      	str	r3, [r7, #52]	; 0x34
 801006e:	e371      	b.n	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8010070:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010074:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8010078:	430b      	orrs	r3, r1
 801007a:	d16a      	bne.n	8010152 <HAL_RCCEx_GetPeriphCLKFreq+0xda6>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 801007c:	4b30      	ldr	r3, [pc, #192]	; (8010140 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 801007e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8010082:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010086:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8010088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801008a:	2b00      	cmp	r3, #0
 801008c:	d120      	bne.n	80100d0 <HAL_RCCEx_GetPeriphCLKFreq+0xd24>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 801008e:	4b2c      	ldr	r3, [pc, #176]	; (8010140 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8010090:	681b      	ldr	r3, [r3, #0]
 8010092:	f003 0320 	and.w	r3, r3, #32
 8010096:	2b20      	cmp	r3, #32
 8010098:	d117      	bne.n	80100ca <HAL_RCCEx_GetPeriphCLKFreq+0xd1e>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 801009a:	4b29      	ldr	r3, [pc, #164]	; (8010140 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 801009c:	689b      	ldr	r3, [r3, #8]
 801009e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d005      	beq.n	80100b2 <HAL_RCCEx_GetPeriphCLKFreq+0xd06>
 80100a6:	4b26      	ldr	r3, [pc, #152]	; (8010140 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80100a8:	689b      	ldr	r3, [r3, #8]
 80100aa:	0e1b      	lsrs	r3, r3, #24
 80100ac:	f003 030f 	and.w	r3, r3, #15
 80100b0:	e006      	b.n	80100c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 80100b2:	4b23      	ldr	r3, [pc, #140]	; (8010140 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80100b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80100b8:	041b      	lsls	r3, r3, #16
 80100ba:	0e1b      	lsrs	r3, r3, #24
 80100bc:	f003 030f 	and.w	r3, r3, #15
 80100c0:	4a21      	ldr	r2, [pc, #132]	; (8010148 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 80100c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80100c6:	637b      	str	r3, [r7, #52]	; 0x34
 80100c8:	e344      	b.n	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 80100ca:	2300      	movs	r3, #0
 80100cc:	637b      	str	r3, [r7, #52]	; 0x34
 80100ce:	e341      	b.n	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 80100d0:	4b1b      	ldr	r3, [pc, #108]	; (8010140 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80100d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80100d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80100da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80100de:	d112      	bne.n	8010106 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 80100e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80100e6:	d10e      	bne.n	8010106 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80100e8:	4b15      	ldr	r3, [pc, #84]	; (8010140 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80100ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80100ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80100f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80100f6:	d102      	bne.n	80100fe <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
      {
        frequency = LSI_VALUE / 128U;
 80100f8:	23fa      	movs	r3, #250	; 0xfa
 80100fa:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80100fc:	e32a      	b.n	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 80100fe:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8010102:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8010104:	e326      	b.n	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8010106:	4b0e      	ldr	r3, [pc, #56]	; (8010140 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8010108:	681b      	ldr	r3, [r3, #0]
 801010a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801010e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010112:	d106      	bne.n	8010122 <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
 8010114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010116:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801011a:	d102      	bne.n	8010122 <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
    {
      frequency = HSI_VALUE;
 801011c:	4b09      	ldr	r3, [pc, #36]	; (8010144 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 801011e:	637b      	str	r3, [r7, #52]	; 0x34
 8010120:	e318      	b.n	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8010122:	4b07      	ldr	r3, [pc, #28]	; (8010140 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8010124:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8010128:	f003 0302 	and.w	r3, r3, #2
 801012c:	2b02      	cmp	r3, #2
 801012e:	d10d      	bne.n	801014c <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
 8010130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010132:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010136:	d109      	bne.n	801014c <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
    {
      frequency = LSE_VALUE;
 8010138:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801013c:	637b      	str	r3, [r7, #52]	; 0x34
 801013e:	e309      	b.n	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8010140:	46020c00 	.word	0x46020c00
 8010144:	00f42400 	.word	0x00f42400
 8010148:	0818dc20 	.word	0x0818dc20
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 801014c:	2300      	movs	r3, #0
 801014e:	637b      	str	r3, [r7, #52]	; 0x34
 8010150:	e300      	b.n	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8010152:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010156:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 801015a:	430b      	orrs	r3, r1
 801015c:	d164      	bne.n	8010228 <HAL_RCCEx_GetPeriphCLKFreq+0xe7c>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 801015e:	4ba2      	ldr	r3, [pc, #648]	; (80103e8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8010160:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8010164:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8010168:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 801016a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801016c:	2b00      	cmp	r3, #0
 801016e:	d120      	bne.n	80101b2 <HAL_RCCEx_GetPeriphCLKFreq+0xe06>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8010170:	4b9d      	ldr	r3, [pc, #628]	; (80103e8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8010172:	681b      	ldr	r3, [r3, #0]
 8010174:	f003 0320 	and.w	r3, r3, #32
 8010178:	2b20      	cmp	r3, #32
 801017a:	d117      	bne.n	80101ac <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 801017c:	4b9a      	ldr	r3, [pc, #616]	; (80103e8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 801017e:	689b      	ldr	r3, [r3, #8]
 8010180:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010184:	2b00      	cmp	r3, #0
 8010186:	d005      	beq.n	8010194 <HAL_RCCEx_GetPeriphCLKFreq+0xde8>
 8010188:	4b97      	ldr	r3, [pc, #604]	; (80103e8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 801018a:	689b      	ldr	r3, [r3, #8]
 801018c:	0e1b      	lsrs	r3, r3, #24
 801018e:	f003 030f 	and.w	r3, r3, #15
 8010192:	e006      	b.n	80101a2 <HAL_RCCEx_GetPeriphCLKFreq+0xdf6>
 8010194:	4b94      	ldr	r3, [pc, #592]	; (80103e8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8010196:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 801019a:	041b      	lsls	r3, r3, #16
 801019c:	0e1b      	lsrs	r3, r3, #24
 801019e:	f003 030f 	and.w	r3, r3, #15
 80101a2:	4a92      	ldr	r2, [pc, #584]	; (80103ec <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 80101a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80101a8:	637b      	str	r3, [r7, #52]	; 0x34
 80101aa:	e2d3      	b.n	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 80101ac:	2300      	movs	r3, #0
 80101ae:	637b      	str	r3, [r7, #52]	; 0x34
 80101b0:	e2d0      	b.n	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 80101b2:	4b8d      	ldr	r3, [pc, #564]	; (80103e8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80101b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80101b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80101bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80101c0:	d112      	bne.n	80101e8 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
 80101c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80101c8:	d10e      	bne.n	80101e8 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80101ca:	4b87      	ldr	r3, [pc, #540]	; (80103e8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80101cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80101d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80101d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80101d8:	d102      	bne.n	80101e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
      {
        frequency = LSI_VALUE / 128U;
 80101da:	23fa      	movs	r3, #250	; 0xfa
 80101dc:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80101de:	e2b9      	b.n	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 80101e0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80101e4:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80101e6:	e2b5      	b.n	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 80101e8:	4b7f      	ldr	r3, [pc, #508]	; (80103e8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80101ea:	681b      	ldr	r3, [r3, #0]
 80101ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80101f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80101f4:	d106      	bne.n	8010204 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
 80101f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80101fc:	d102      	bne.n	8010204 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
    {
      frequency = HSI_VALUE;
 80101fe:	4b7c      	ldr	r3, [pc, #496]	; (80103f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8010200:	637b      	str	r3, [r7, #52]	; 0x34
 8010202:	e2a7      	b.n	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8010204:	4b78      	ldr	r3, [pc, #480]	; (80103e8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8010206:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 801020a:	f003 0302 	and.w	r3, r3, #2
 801020e:	2b02      	cmp	r3, #2
 8010210:	d107      	bne.n	8010222 <HAL_RCCEx_GetPeriphCLKFreq+0xe76>
 8010212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010214:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8010218:	d103      	bne.n	8010222 <HAL_RCCEx_GetPeriphCLKFreq+0xe76>
    {
      frequency = LSE_VALUE;
 801021a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801021e:	637b      	str	r3, [r7, #52]	; 0x34
 8010220:	e298      	b.n	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8010222:	2300      	movs	r3, #0
 8010224:	637b      	str	r3, [r7, #52]	; 0x34
 8010226:	e295      	b.n	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8010228:	e9d7 2300 	ldrd	r2, r3, [r7]
 801022c:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8010230:	430b      	orrs	r3, r1
 8010232:	d147      	bne.n	80102c4 <HAL_RCCEx_GetPeriphCLKFreq+0xf18>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8010234:	4b6c      	ldr	r3, [pc, #432]	; (80103e8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8010236:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801023a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 801023e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8010240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010242:	2b00      	cmp	r3, #0
 8010244:	d103      	bne.n	801024e <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8010246:	f7fd fe21 	bl	800de8c <HAL_RCC_GetPCLK1Freq>
 801024a:	6378      	str	r0, [r7, #52]	; 0x34
 801024c:	e282      	b.n	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 801024e:	4b66      	ldr	r3, [pc, #408]	; (80103e8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8010250:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8010254:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010258:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801025c:	d112      	bne.n	8010284 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
 801025e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010260:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8010264:	d10e      	bne.n	8010284 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8010266:	4b60      	ldr	r3, [pc, #384]	; (80103e8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8010268:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 801026c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010270:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010274:	d102      	bne.n	801027c <HAL_RCCEx_GetPeriphCLKFreq+0xed0>
      {
        frequency = LSI_VALUE / 128U;
 8010276:	23fa      	movs	r3, #250	; 0xfa
 8010278:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 801027a:	e26b      	b.n	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 801027c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8010280:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8010282:	e267      	b.n	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8010284:	4b58      	ldr	r3, [pc, #352]	; (80103e8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8010286:	681b      	ldr	r3, [r3, #0]
 8010288:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801028c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010290:	d106      	bne.n	80102a0 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 8010292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010294:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8010298:	d102      	bne.n	80102a0 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
    {
      frequency = HSI_VALUE;
 801029a:	4b55      	ldr	r3, [pc, #340]	; (80103f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 801029c:	637b      	str	r3, [r7, #52]	; 0x34
 801029e:	e259      	b.n	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 80102a0:	4b51      	ldr	r3, [pc, #324]	; (80103e8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80102a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80102a6:	f003 0302 	and.w	r3, r3, #2
 80102aa:	2b02      	cmp	r3, #2
 80102ac:	d107      	bne.n	80102be <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
 80102ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102b0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80102b4:	d103      	bne.n	80102be <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      frequency = LSE_VALUE;
 80102b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80102ba:	637b      	str	r3, [r7, #52]	; 0x34
 80102bc:	e24a      	b.n	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 80102be:	2300      	movs	r3, #0
 80102c0:	637b      	str	r3, [r7, #52]	; 0x34
 80102c2:	e247      	b.n	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 80102c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80102c8:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 80102cc:	430b      	orrs	r3, r1
 80102ce:	d12d      	bne.n	801032c <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 80102d0:	4b45      	ldr	r3, [pc, #276]	; (80103e8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80102d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80102d6:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 80102da:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 80102dc:	4b42      	ldr	r3, [pc, #264]	; (80103e8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80102e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80102e8:	d105      	bne.n	80102f6 <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 80102ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	d102      	bne.n	80102f6 <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
    {
      frequency = HSE_VALUE;
 80102f0:	4b3f      	ldr	r3, [pc, #252]	; (80103f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 80102f2:	637b      	str	r3, [r7, #52]	; 0x34
 80102f4:	e22e      	b.n	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 80102f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80102fc:	d107      	bne.n	801030e <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80102fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010302:	4618      	mov	r0, r3
 8010304:	f7fe fc44 	bl	800eb90 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8010308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801030a:	637b      	str	r3, [r7, #52]	; 0x34
 801030c:	e222      	b.n	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 801030e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010310:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010314:	d107      	bne.n	8010326 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010316:	f107 0318 	add.w	r3, r7, #24
 801031a:	4618      	mov	r0, r3
 801031c:	f7fe fd92 	bl	800ee44 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8010320:	69bb      	ldr	r3, [r7, #24]
 8010322:	637b      	str	r3, [r7, #52]	; 0x34
 8010324:	e216      	b.n	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8010326:	2300      	movs	r3, #0
 8010328:	637b      	str	r3, [r7, #52]	; 0x34
 801032a:	e213      	b.n	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 801032c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010330:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 8010334:	430b      	orrs	r3, r1
 8010336:	d15d      	bne.n	80103f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8010338:	4b2b      	ldr	r3, [pc, #172]	; (80103e8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 801033a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801033e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8010342:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8010344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010346:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 801034a:	d028      	beq.n	801039e <HAL_RCCEx_GetPeriphCLKFreq+0xff2>
 801034c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801034e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8010352:	d845      	bhi.n	80103e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 8010354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010356:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801035a:	d013      	beq.n	8010384 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 801035c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801035e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010362:	d83d      	bhi.n	80103e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 8010364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010366:	2b00      	cmp	r3, #0
 8010368:	d004      	beq.n	8010374 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>
 801036a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801036c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010370:	d004      	beq.n	801037c <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
 8010372:	e035      	b.n	80103e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8010374:	f7fd fd9e 	bl	800deb4 <HAL_RCC_GetPCLK2Freq>
 8010378:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 801037a:	e1eb      	b.n	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 801037c:	f7fd fc6a 	bl	800dc54 <HAL_RCC_GetSysClockFreq>
 8010380:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8010382:	e1e7      	b.n	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8010384:	4b18      	ldr	r3, [pc, #96]	; (80103e8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8010386:	681b      	ldr	r3, [r3, #0]
 8010388:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801038c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010390:	d102      	bne.n	8010398 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>
        {
          frequency = HSI_VALUE;
 8010392:	4b17      	ldr	r3, [pc, #92]	; (80103f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8010394:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8010396:	e1dd      	b.n	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8010398:	2300      	movs	r3, #0
 801039a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 801039c:	e1da      	b.n	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 801039e:	4b12      	ldr	r3, [pc, #72]	; (80103e8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80103a0:	681b      	ldr	r3, [r3, #0]
 80103a2:	f003 0320 	and.w	r3, r3, #32
 80103a6:	2b20      	cmp	r3, #32
 80103a8:	d117      	bne.n	80103da <HAL_RCCEx_GetPeriphCLKFreq+0x102e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80103aa:	4b0f      	ldr	r3, [pc, #60]	; (80103e8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80103ac:	689b      	ldr	r3, [r3, #8]
 80103ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	d005      	beq.n	80103c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
 80103b6:	4b0c      	ldr	r3, [pc, #48]	; (80103e8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80103b8:	689b      	ldr	r3, [r3, #8]
 80103ba:	0e1b      	lsrs	r3, r3, #24
 80103bc:	f003 030f 	and.w	r3, r3, #15
 80103c0:	e006      	b.n	80103d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1024>
 80103c2:	4b09      	ldr	r3, [pc, #36]	; (80103e8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80103c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80103c8:	041b      	lsls	r3, r3, #16
 80103ca:	0e1b      	lsrs	r3, r3, #24
 80103cc:	f003 030f 	and.w	r3, r3, #15
 80103d0:	4a06      	ldr	r2, [pc, #24]	; (80103ec <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 80103d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80103d6:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80103d8:	e1bc      	b.n	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80103da:	2300      	movs	r3, #0
 80103dc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80103de:	e1b9      	b.n	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 80103e0:	2300      	movs	r3, #0
 80103e2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80103e4:	e1b6      	b.n	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 80103e6:	bf00      	nop
 80103e8:	46020c00 	.word	0x46020c00
 80103ec:	0818dc20 	.word	0x0818dc20
 80103f0:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 80103f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80103f8:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 80103fc:	430b      	orrs	r3, r1
 80103fe:	d156      	bne.n	80104ae <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8010400:	4ba5      	ldr	r3, [pc, #660]	; (8010698 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8010402:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010406:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 801040a:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 801040c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801040e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8010412:	d028      	beq.n	8010466 <HAL_RCCEx_GetPeriphCLKFreq+0x10ba>
 8010414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010416:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 801041a:	d845      	bhi.n	80104a8 <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
 801041c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801041e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010422:	d013      	beq.n	801044c <HAL_RCCEx_GetPeriphCLKFreq+0x10a0>
 8010424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010426:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801042a:	d83d      	bhi.n	80104a8 <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
 801042c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801042e:	2b00      	cmp	r3, #0
 8010430:	d004      	beq.n	801043c <HAL_RCCEx_GetPeriphCLKFreq+0x1090>
 8010432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010434:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010438:	d004      	beq.n	8010444 <HAL_RCCEx_GetPeriphCLKFreq+0x1098>
 801043a:	e035      	b.n	80104a8 <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 801043c:	f7fd fd26 	bl	800de8c <HAL_RCC_GetPCLK1Freq>
 8010440:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8010442:	e187      	b.n	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8010444:	f7fd fc06 	bl	800dc54 <HAL_RCC_GetSysClockFreq>
 8010448:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 801044a:	e183      	b.n	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 801044c:	4b92      	ldr	r3, [pc, #584]	; (8010698 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 801044e:	681b      	ldr	r3, [r3, #0]
 8010450:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010454:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010458:	d102      	bne.n	8010460 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>
        {
          frequency = HSI_VALUE;
 801045a:	4b90      	ldr	r3, [pc, #576]	; (801069c <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 801045c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 801045e:	e179      	b.n	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8010460:	2300      	movs	r3, #0
 8010462:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8010464:	e176      	b.n	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8010466:	4b8c      	ldr	r3, [pc, #560]	; (8010698 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8010468:	681b      	ldr	r3, [r3, #0]
 801046a:	f003 0320 	and.w	r3, r3, #32
 801046e:	2b20      	cmp	r3, #32
 8010470:	d117      	bne.n	80104a2 <HAL_RCCEx_GetPeriphCLKFreq+0x10f6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8010472:	4b89      	ldr	r3, [pc, #548]	; (8010698 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8010474:	689b      	ldr	r3, [r3, #8]
 8010476:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801047a:	2b00      	cmp	r3, #0
 801047c:	d005      	beq.n	801048a <HAL_RCCEx_GetPeriphCLKFreq+0x10de>
 801047e:	4b86      	ldr	r3, [pc, #536]	; (8010698 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8010480:	689b      	ldr	r3, [r3, #8]
 8010482:	0e1b      	lsrs	r3, r3, #24
 8010484:	f003 030f 	and.w	r3, r3, #15
 8010488:	e006      	b.n	8010498 <HAL_RCCEx_GetPeriphCLKFreq+0x10ec>
 801048a:	4b83      	ldr	r3, [pc, #524]	; (8010698 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 801048c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8010490:	041b      	lsls	r3, r3, #16
 8010492:	0e1b      	lsrs	r3, r3, #24
 8010494:	f003 030f 	and.w	r3, r3, #15
 8010498:	4a81      	ldr	r2, [pc, #516]	; (80106a0 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 801049a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801049e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80104a0:	e158      	b.n	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80104a2:	2300      	movs	r3, #0
 80104a4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80104a6:	e155      	b.n	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 80104a8:	2300      	movs	r3, #0
 80104aa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80104ac:	e152      	b.n	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 80104ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80104b2:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 80104b6:	430b      	orrs	r3, r1
 80104b8:	d177      	bne.n	80105aa <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 80104ba:	4b77      	ldr	r3, [pc, #476]	; (8010698 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80104bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80104c0:	f003 0318 	and.w	r3, r3, #24
 80104c4:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 80104c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104c8:	2b18      	cmp	r3, #24
 80104ca:	d86b      	bhi.n	80105a4 <HAL_RCCEx_GetPeriphCLKFreq+0x11f8>
 80104cc:	a201      	add	r2, pc, #4	; (adr r2, 80104d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1128>)
 80104ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80104d2:	bf00      	nop
 80104d4:	08010539 	.word	0x08010539
 80104d8:	080105a5 	.word	0x080105a5
 80104dc:	080105a5 	.word	0x080105a5
 80104e0:	080105a5 	.word	0x080105a5
 80104e4:	080105a5 	.word	0x080105a5
 80104e8:	080105a5 	.word	0x080105a5
 80104ec:	080105a5 	.word	0x080105a5
 80104f0:	080105a5 	.word	0x080105a5
 80104f4:	08010541 	.word	0x08010541
 80104f8:	080105a5 	.word	0x080105a5
 80104fc:	080105a5 	.word	0x080105a5
 8010500:	080105a5 	.word	0x080105a5
 8010504:	080105a5 	.word	0x080105a5
 8010508:	080105a5 	.word	0x080105a5
 801050c:	080105a5 	.word	0x080105a5
 8010510:	080105a5 	.word	0x080105a5
 8010514:	08010549 	.word	0x08010549
 8010518:	080105a5 	.word	0x080105a5
 801051c:	080105a5 	.word	0x080105a5
 8010520:	080105a5 	.word	0x080105a5
 8010524:	080105a5 	.word	0x080105a5
 8010528:	080105a5 	.word	0x080105a5
 801052c:	080105a5 	.word	0x080105a5
 8010530:	080105a5 	.word	0x080105a5
 8010534:	08010563 	.word	0x08010563
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8010538:	f7fd fcd0 	bl	800dedc <HAL_RCC_GetPCLK3Freq>
 801053c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 801053e:	e109      	b.n	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8010540:	f7fd fb88 	bl	800dc54 <HAL_RCC_GetSysClockFreq>
 8010544:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8010546:	e105      	b.n	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8010548:	4b53      	ldr	r3, [pc, #332]	; (8010698 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 801054a:	681b      	ldr	r3, [r3, #0]
 801054c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010550:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010554:	d102      	bne.n	801055c <HAL_RCCEx_GetPeriphCLKFreq+0x11b0>
        {
          frequency = HSI_VALUE;
 8010556:	4b51      	ldr	r3, [pc, #324]	; (801069c <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 8010558:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 801055a:	e0fb      	b.n	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 801055c:	2300      	movs	r3, #0
 801055e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8010560:	e0f8      	b.n	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8010562:	4b4d      	ldr	r3, [pc, #308]	; (8010698 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8010564:	681b      	ldr	r3, [r3, #0]
 8010566:	f003 0320 	and.w	r3, r3, #32
 801056a:	2b20      	cmp	r3, #32
 801056c:	d117      	bne.n	801059e <HAL_RCCEx_GetPeriphCLKFreq+0x11f2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 801056e:	4b4a      	ldr	r3, [pc, #296]	; (8010698 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8010570:	689b      	ldr	r3, [r3, #8]
 8010572:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010576:	2b00      	cmp	r3, #0
 8010578:	d005      	beq.n	8010586 <HAL_RCCEx_GetPeriphCLKFreq+0x11da>
 801057a:	4b47      	ldr	r3, [pc, #284]	; (8010698 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 801057c:	689b      	ldr	r3, [r3, #8]
 801057e:	0e1b      	lsrs	r3, r3, #24
 8010580:	f003 030f 	and.w	r3, r3, #15
 8010584:	e006      	b.n	8010594 <HAL_RCCEx_GetPeriphCLKFreq+0x11e8>
 8010586:	4b44      	ldr	r3, [pc, #272]	; (8010698 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8010588:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 801058c:	041b      	lsls	r3, r3, #16
 801058e:	0e1b      	lsrs	r3, r3, #24
 8010590:	f003 030f 	and.w	r3, r3, #15
 8010594:	4a42      	ldr	r2, [pc, #264]	; (80106a0 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 8010596:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801059a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 801059c:	e0da      	b.n	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 801059e:	2300      	movs	r3, #0
 80105a0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80105a2:	e0d7      	b.n	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 80105a4:	2300      	movs	r3, #0
 80105a6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80105a8:	e0d4      	b.n	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 80105aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80105ae:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 80105b2:	430b      	orrs	r3, r1
 80105b4:	d155      	bne.n	8010662 <HAL_RCCEx_GetPeriphCLKFreq+0x12b6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 80105b6:	4b38      	ldr	r3, [pc, #224]	; (8010698 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80105b8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80105bc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80105c0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80105c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105c4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80105c8:	d013      	beq.n	80105f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
 80105ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105cc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80105d0:	d844      	bhi.n	801065c <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
 80105d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80105d8:	d013      	beq.n	8010602 <HAL_RCCEx_GetPeriphCLKFreq+0x1256>
 80105da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80105e0:	d83c      	bhi.n	801065c <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
 80105e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	d014      	beq.n	8010612 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 80105e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80105ee:	d014      	beq.n	801061a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
 80105f0:	e034      	b.n	801065c <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80105f2:	f107 0318 	add.w	r3, r7, #24
 80105f6:	4618      	mov	r0, r3
 80105f8:	f7fe fc24 	bl	800ee44 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 80105fc:	69fb      	ldr	r3, [r7, #28]
 80105fe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8010600:	e0a8      	b.n	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010602:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010606:	4618      	mov	r0, r3
 8010608:	f7fe fac2 	bl	800eb90 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 801060c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801060e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8010610:	e0a0      	b.n	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8010612:	f7fd fb1f 	bl	800dc54 <HAL_RCC_GetSysClockFreq>
 8010616:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8010618:	e09c      	b.n	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 801061a:	4b1f      	ldr	r3, [pc, #124]	; (8010698 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 801061c:	681b      	ldr	r3, [r3, #0]
 801061e:	f003 0320 	and.w	r3, r3, #32
 8010622:	2b20      	cmp	r3, #32
 8010624:	d117      	bne.n	8010656 <HAL_RCCEx_GetPeriphCLKFreq+0x12aa>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8010626:	4b1c      	ldr	r3, [pc, #112]	; (8010698 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8010628:	689b      	ldr	r3, [r3, #8]
 801062a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801062e:	2b00      	cmp	r3, #0
 8010630:	d005      	beq.n	801063e <HAL_RCCEx_GetPeriphCLKFreq+0x1292>
 8010632:	4b19      	ldr	r3, [pc, #100]	; (8010698 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8010634:	689b      	ldr	r3, [r3, #8]
 8010636:	0e1b      	lsrs	r3, r3, #24
 8010638:	f003 030f 	and.w	r3, r3, #15
 801063c:	e006      	b.n	801064c <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 801063e:	4b16      	ldr	r3, [pc, #88]	; (8010698 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8010640:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8010644:	041b      	lsls	r3, r3, #16
 8010646:	0e1b      	lsrs	r3, r3, #24
 8010648:	f003 030f 	and.w	r3, r3, #15
 801064c:	4a14      	ldr	r2, [pc, #80]	; (80106a0 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 801064e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010652:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8010654:	e07e      	b.n	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8010656:	2300      	movs	r3, #0
 8010658:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 801065a:	e07b      	b.n	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 801065c:	2300      	movs	r3, #0
 801065e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8010660:	e078      	b.n	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8010662:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010666:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 801066a:	430b      	orrs	r3, r1
 801066c:	d138      	bne.n	80106e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1334>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 801066e:	4b0a      	ldr	r3, [pc, #40]	; (8010698 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8010670:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8010674:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010678:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 801067a:	4b07      	ldr	r3, [pc, #28]	; (8010698 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 801067c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8010680:	f003 0302 	and.w	r3, r3, #2
 8010684:	2b02      	cmp	r3, #2
 8010686:	d10d      	bne.n	80106a4 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
 8010688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801068a:	2b00      	cmp	r3, #0
 801068c:	d10a      	bne.n	80106a4 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
    {
      frequency = LSE_VALUE;
 801068e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010692:	637b      	str	r3, [r7, #52]	; 0x34
 8010694:	e05e      	b.n	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8010696:	bf00      	nop
 8010698:	46020c00 	.word	0x46020c00
 801069c:	00f42400 	.word	0x00f42400
 80106a0:	0818dc20 	.word	0x0818dc20
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 80106a4:	4b2e      	ldr	r3, [pc, #184]	; (8010760 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 80106a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80106aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80106ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80106b2:	d112      	bne.n	80106da <HAL_RCCEx_GetPeriphCLKFreq+0x132e>
 80106b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80106ba:	d10e      	bne.n	80106da <HAL_RCCEx_GetPeriphCLKFreq+0x132e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80106bc:	4b28      	ldr	r3, [pc, #160]	; (8010760 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 80106be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80106c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80106c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80106ca:	d102      	bne.n	80106d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1326>
      {
        frequency = LSI_VALUE / 128U;
 80106cc:	23fa      	movs	r3, #250	; 0xfa
 80106ce:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80106d0:	e040      	b.n	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 80106d2:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80106d6:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80106d8:	e03c      	b.n	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 80106da:	2300      	movs	r3, #0
 80106dc:	637b      	str	r3, [r7, #52]	; 0x34
 80106de:	e039      	b.n	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 80106e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80106e4:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 80106e8:	430b      	orrs	r3, r1
 80106ea:	d131      	bne.n	8010750 <HAL_RCCEx_GetPeriphCLKFreq+0x13a4>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 80106ec:	4b1c      	ldr	r3, [pc, #112]	; (8010760 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 80106ee:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80106f2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80106f6:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 80106f8:	4b19      	ldr	r3, [pc, #100]	; (8010760 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 80106fa:	681b      	ldr	r3, [r3, #0]
 80106fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010700:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010704:	d105      	bne.n	8010712 <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
 8010706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010708:	2b00      	cmp	r3, #0
 801070a:	d102      	bne.n	8010712 <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
    {
      frequency = HSI48_VALUE;
 801070c:	4b15      	ldr	r3, [pc, #84]	; (8010764 <HAL_RCCEx_GetPeriphCLKFreq+0x13b8>)
 801070e:	637b      	str	r3, [r7, #52]	; 0x34
 8010710:	e020      	b.n	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8010712:	4b13      	ldr	r3, [pc, #76]	; (8010760 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8010714:	681b      	ldr	r3, [r3, #0]
 8010716:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801071a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801071e:	d106      	bne.n	801072e <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
 8010720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010722:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010726:	d102      	bne.n	801072e <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
    {
      frequency = HSI48_VALUE >> 1U ;
 8010728:	4b0f      	ldr	r3, [pc, #60]	; (8010768 <HAL_RCCEx_GetPeriphCLKFreq+0x13bc>)
 801072a:	637b      	str	r3, [r7, #52]	; 0x34
 801072c:	e012      	b.n	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 801072e:	4b0c      	ldr	r3, [pc, #48]	; (8010760 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8010730:	681b      	ldr	r3, [r3, #0]
 8010732:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010736:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801073a:	d106      	bne.n	801074a <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
 801073c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801073e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010742:	d102      	bne.n	801074a <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
    {
      frequency = HSI_VALUE;
 8010744:	4b09      	ldr	r3, [pc, #36]	; (801076c <HAL_RCCEx_GetPeriphCLKFreq+0x13c0>)
 8010746:	637b      	str	r3, [r7, #52]	; 0x34
 8010748:	e004      	b.n	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 801074a:	2300      	movs	r3, #0
 801074c:	637b      	str	r3, [r7, #52]	; 0x34
 801074e:	e001      	b.n	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8010750:	2300      	movs	r3, #0
 8010752:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 8010754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010756:	4618      	mov	r0, r3
 8010758:	3738      	adds	r7, #56	; 0x38
 801075a:	46bd      	mov	sp, r7
 801075c:	bd80      	pop	{r7, pc}
 801075e:	bf00      	nop
 8010760:	46020c00 	.word	0x46020c00
 8010764:	02dc6c00 	.word	0x02dc6c00
 8010768:	016e3600 	.word	0x016e3600
 801076c:	00f42400 	.word	0x00f42400

08010770 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8010770:	b580      	push	{r7, lr}
 8010772:	b084      	sub	sp, #16
 8010774:	af00      	add	r7, sp, #0
 8010776:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8010778:	4b47      	ldr	r3, [pc, #284]	; (8010898 <RCCEx_PLL2_Config+0x128>)
 801077a:	681b      	ldr	r3, [r3, #0]
 801077c:	4a46      	ldr	r2, [pc, #280]	; (8010898 <RCCEx_PLL2_Config+0x128>)
 801077e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8010782:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8010784:	f7f9 ff82 	bl	800a68c <HAL_GetTick>
 8010788:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801078a:	e008      	b.n	801079e <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801078c:	f7f9 ff7e 	bl	800a68c <HAL_GetTick>
 8010790:	4602      	mov	r2, r0
 8010792:	68fb      	ldr	r3, [r7, #12]
 8010794:	1ad3      	subs	r3, r2, r3
 8010796:	2b02      	cmp	r3, #2
 8010798:	d901      	bls.n	801079e <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 801079a:	2303      	movs	r3, #3
 801079c:	e077      	b.n	801088e <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801079e:	4b3e      	ldr	r3, [pc, #248]	; (8010898 <RCCEx_PLL2_Config+0x128>)
 80107a0:	681b      	ldr	r3, [r3, #0]
 80107a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	d1f0      	bne.n	801078c <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 80107aa:	4b3b      	ldr	r3, [pc, #236]	; (8010898 <RCCEx_PLL2_Config+0x128>)
 80107ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107ae:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80107b2:	f023 0303 	bic.w	r3, r3, #3
 80107b6:	687a      	ldr	r2, [r7, #4]
 80107b8:	6811      	ldr	r1, [r2, #0]
 80107ba:	687a      	ldr	r2, [r7, #4]
 80107bc:	6852      	ldr	r2, [r2, #4]
 80107be:	3a01      	subs	r2, #1
 80107c0:	0212      	lsls	r2, r2, #8
 80107c2:	430a      	orrs	r2, r1
 80107c4:	4934      	ldr	r1, [pc, #208]	; (8010898 <RCCEx_PLL2_Config+0x128>)
 80107c6:	4313      	orrs	r3, r2
 80107c8:	62cb      	str	r3, [r1, #44]	; 0x2c
 80107ca:	4b33      	ldr	r3, [pc, #204]	; (8010898 <RCCEx_PLL2_Config+0x128>)
 80107cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80107ce:	4b33      	ldr	r3, [pc, #204]	; (801089c <RCCEx_PLL2_Config+0x12c>)
 80107d0:	4013      	ands	r3, r2
 80107d2:	687a      	ldr	r2, [r7, #4]
 80107d4:	6892      	ldr	r2, [r2, #8]
 80107d6:	3a01      	subs	r2, #1
 80107d8:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80107dc:	687a      	ldr	r2, [r7, #4]
 80107de:	68d2      	ldr	r2, [r2, #12]
 80107e0:	3a01      	subs	r2, #1
 80107e2:	0252      	lsls	r2, r2, #9
 80107e4:	b292      	uxth	r2, r2
 80107e6:	4311      	orrs	r1, r2
 80107e8:	687a      	ldr	r2, [r7, #4]
 80107ea:	6912      	ldr	r2, [r2, #16]
 80107ec:	3a01      	subs	r2, #1
 80107ee:	0412      	lsls	r2, r2, #16
 80107f0:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80107f4:	4311      	orrs	r1, r2
 80107f6:	687a      	ldr	r2, [r7, #4]
 80107f8:	6952      	ldr	r2, [r2, #20]
 80107fa:	3a01      	subs	r2, #1
 80107fc:	0612      	lsls	r2, r2, #24
 80107fe:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8010802:	430a      	orrs	r2, r1
 8010804:	4924      	ldr	r1, [pc, #144]	; (8010898 <RCCEx_PLL2_Config+0x128>)
 8010806:	4313      	orrs	r3, r2
 8010808:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 801080a:	4b23      	ldr	r3, [pc, #140]	; (8010898 <RCCEx_PLL2_Config+0x128>)
 801080c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801080e:	f023 020c 	bic.w	r2, r3, #12
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	699b      	ldr	r3, [r3, #24]
 8010816:	4920      	ldr	r1, [pc, #128]	; (8010898 <RCCEx_PLL2_Config+0x128>)
 8010818:	4313      	orrs	r3, r2
 801081a:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 801081c:	4b1e      	ldr	r3, [pc, #120]	; (8010898 <RCCEx_PLL2_Config+0x128>)
 801081e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	6a1b      	ldr	r3, [r3, #32]
 8010824:	491c      	ldr	r1, [pc, #112]	; (8010898 <RCCEx_PLL2_Config+0x128>)
 8010826:	4313      	orrs	r3, r2
 8010828:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 801082a:	4b1b      	ldr	r3, [pc, #108]	; (8010898 <RCCEx_PLL2_Config+0x128>)
 801082c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801082e:	4a1a      	ldr	r2, [pc, #104]	; (8010898 <RCCEx_PLL2_Config+0x128>)
 8010830:	f023 0310 	bic.w	r3, r3, #16
 8010834:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8010836:	4b18      	ldr	r3, [pc, #96]	; (8010898 <RCCEx_PLL2_Config+0x128>)
 8010838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801083a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801083e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8010842:	687a      	ldr	r2, [r7, #4]
 8010844:	69d2      	ldr	r2, [r2, #28]
 8010846:	00d2      	lsls	r2, r2, #3
 8010848:	4913      	ldr	r1, [pc, #76]	; (8010898 <RCCEx_PLL2_Config+0x128>)
 801084a:	4313      	orrs	r3, r2
 801084c:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 801084e:	4b12      	ldr	r3, [pc, #72]	; (8010898 <RCCEx_PLL2_Config+0x128>)
 8010850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010852:	4a11      	ldr	r2, [pc, #68]	; (8010898 <RCCEx_PLL2_Config+0x128>)
 8010854:	f043 0310 	orr.w	r3, r3, #16
 8010858:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 801085a:	4b0f      	ldr	r3, [pc, #60]	; (8010898 <RCCEx_PLL2_Config+0x128>)
 801085c:	681b      	ldr	r3, [r3, #0]
 801085e:	4a0e      	ldr	r2, [pc, #56]	; (8010898 <RCCEx_PLL2_Config+0x128>)
 8010860:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8010864:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8010866:	f7f9 ff11 	bl	800a68c <HAL_GetTick>
 801086a:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 801086c:	e008      	b.n	8010880 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801086e:	f7f9 ff0d 	bl	800a68c <HAL_GetTick>
 8010872:	4602      	mov	r2, r0
 8010874:	68fb      	ldr	r3, [r7, #12]
 8010876:	1ad3      	subs	r3, r2, r3
 8010878:	2b02      	cmp	r3, #2
 801087a:	d901      	bls.n	8010880 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 801087c:	2303      	movs	r3, #3
 801087e:	e006      	b.n	801088e <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8010880:	4b05      	ldr	r3, [pc, #20]	; (8010898 <RCCEx_PLL2_Config+0x128>)
 8010882:	681b      	ldr	r3, [r3, #0]
 8010884:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010888:	2b00      	cmp	r3, #0
 801088a:	d0f0      	beq.n	801086e <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 801088c:	2300      	movs	r3, #0

}
 801088e:	4618      	mov	r0, r3
 8010890:	3710      	adds	r7, #16
 8010892:	46bd      	mov	sp, r7
 8010894:	bd80      	pop	{r7, pc}
 8010896:	bf00      	nop
 8010898:	46020c00 	.word	0x46020c00
 801089c:	80800000 	.word	0x80800000

080108a0 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 80108a0:	b580      	push	{r7, lr}
 80108a2:	b084      	sub	sp, #16
 80108a4:	af00      	add	r7, sp, #0
 80108a6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 80108a8:	4b47      	ldr	r3, [pc, #284]	; (80109c8 <RCCEx_PLL3_Config+0x128>)
 80108aa:	681b      	ldr	r3, [r3, #0]
 80108ac:	4a46      	ldr	r2, [pc, #280]	; (80109c8 <RCCEx_PLL3_Config+0x128>)
 80108ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80108b2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80108b4:	f7f9 feea 	bl	800a68c <HAL_GetTick>
 80108b8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80108ba:	e008      	b.n	80108ce <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80108bc:	f7f9 fee6 	bl	800a68c <HAL_GetTick>
 80108c0:	4602      	mov	r2, r0
 80108c2:	68fb      	ldr	r3, [r7, #12]
 80108c4:	1ad3      	subs	r3, r2, r3
 80108c6:	2b02      	cmp	r3, #2
 80108c8:	d901      	bls.n	80108ce <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80108ca:	2303      	movs	r3, #3
 80108cc:	e077      	b.n	80109be <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80108ce:	4b3e      	ldr	r3, [pc, #248]	; (80109c8 <RCCEx_PLL3_Config+0x128>)
 80108d0:	681b      	ldr	r3, [r3, #0]
 80108d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	d1f0      	bne.n	80108bc <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 80108da:	4b3b      	ldr	r3, [pc, #236]	; (80109c8 <RCCEx_PLL3_Config+0x128>)
 80108dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80108de:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80108e2:	f023 0303 	bic.w	r3, r3, #3
 80108e6:	687a      	ldr	r2, [r7, #4]
 80108e8:	6811      	ldr	r1, [r2, #0]
 80108ea:	687a      	ldr	r2, [r7, #4]
 80108ec:	6852      	ldr	r2, [r2, #4]
 80108ee:	3a01      	subs	r2, #1
 80108f0:	0212      	lsls	r2, r2, #8
 80108f2:	430a      	orrs	r2, r1
 80108f4:	4934      	ldr	r1, [pc, #208]	; (80109c8 <RCCEx_PLL3_Config+0x128>)
 80108f6:	4313      	orrs	r3, r2
 80108f8:	630b      	str	r3, [r1, #48]	; 0x30
 80108fa:	4b33      	ldr	r3, [pc, #204]	; (80109c8 <RCCEx_PLL3_Config+0x128>)
 80108fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80108fe:	4b33      	ldr	r3, [pc, #204]	; (80109cc <RCCEx_PLL3_Config+0x12c>)
 8010900:	4013      	ands	r3, r2
 8010902:	687a      	ldr	r2, [r7, #4]
 8010904:	6892      	ldr	r2, [r2, #8]
 8010906:	3a01      	subs	r2, #1
 8010908:	f3c2 0108 	ubfx	r1, r2, #0, #9
 801090c:	687a      	ldr	r2, [r7, #4]
 801090e:	68d2      	ldr	r2, [r2, #12]
 8010910:	3a01      	subs	r2, #1
 8010912:	0252      	lsls	r2, r2, #9
 8010914:	b292      	uxth	r2, r2
 8010916:	4311      	orrs	r1, r2
 8010918:	687a      	ldr	r2, [r7, #4]
 801091a:	6912      	ldr	r2, [r2, #16]
 801091c:	3a01      	subs	r2, #1
 801091e:	0412      	lsls	r2, r2, #16
 8010920:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8010924:	4311      	orrs	r1, r2
 8010926:	687a      	ldr	r2, [r7, #4]
 8010928:	6952      	ldr	r2, [r2, #20]
 801092a:	3a01      	subs	r2, #1
 801092c:	0612      	lsls	r2, r2, #24
 801092e:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8010932:	430a      	orrs	r2, r1
 8010934:	4924      	ldr	r1, [pc, #144]	; (80109c8 <RCCEx_PLL3_Config+0x128>)
 8010936:	4313      	orrs	r3, r2
 8010938:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 801093a:	4b23      	ldr	r3, [pc, #140]	; (80109c8 <RCCEx_PLL3_Config+0x128>)
 801093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801093e:	f023 020c 	bic.w	r2, r3, #12
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	699b      	ldr	r3, [r3, #24]
 8010946:	4920      	ldr	r1, [pc, #128]	; (80109c8 <RCCEx_PLL3_Config+0x128>)
 8010948:	4313      	orrs	r3, r2
 801094a:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 801094c:	4b1e      	ldr	r3, [pc, #120]	; (80109c8 <RCCEx_PLL3_Config+0x128>)
 801094e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	6a1b      	ldr	r3, [r3, #32]
 8010954:	491c      	ldr	r1, [pc, #112]	; (80109c8 <RCCEx_PLL3_Config+0x128>)
 8010956:	4313      	orrs	r3, r2
 8010958:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 801095a:	4b1b      	ldr	r3, [pc, #108]	; (80109c8 <RCCEx_PLL3_Config+0x128>)
 801095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801095e:	4a1a      	ldr	r2, [pc, #104]	; (80109c8 <RCCEx_PLL3_Config+0x128>)
 8010960:	f023 0310 	bic.w	r3, r3, #16
 8010964:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8010966:	4b18      	ldr	r3, [pc, #96]	; (80109c8 <RCCEx_PLL3_Config+0x128>)
 8010968:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801096a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801096e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8010972:	687a      	ldr	r2, [r7, #4]
 8010974:	69d2      	ldr	r2, [r2, #28]
 8010976:	00d2      	lsls	r2, r2, #3
 8010978:	4913      	ldr	r1, [pc, #76]	; (80109c8 <RCCEx_PLL3_Config+0x128>)
 801097a:	4313      	orrs	r3, r2
 801097c:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 801097e:	4b12      	ldr	r3, [pc, #72]	; (80109c8 <RCCEx_PLL3_Config+0x128>)
 8010980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010982:	4a11      	ldr	r2, [pc, #68]	; (80109c8 <RCCEx_PLL3_Config+0x128>)
 8010984:	f043 0310 	orr.w	r3, r3, #16
 8010988:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 801098a:	4b0f      	ldr	r3, [pc, #60]	; (80109c8 <RCCEx_PLL3_Config+0x128>)
 801098c:	681b      	ldr	r3, [r3, #0]
 801098e:	4a0e      	ldr	r2, [pc, #56]	; (80109c8 <RCCEx_PLL3_Config+0x128>)
 8010990:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010994:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8010996:	f7f9 fe79 	bl	800a68c <HAL_GetTick>
 801099a:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 801099c:	e008      	b.n	80109b0 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 801099e:	f7f9 fe75 	bl	800a68c <HAL_GetTick>
 80109a2:	4602      	mov	r2, r0
 80109a4:	68fb      	ldr	r3, [r7, #12]
 80109a6:	1ad3      	subs	r3, r2, r3
 80109a8:	2b02      	cmp	r3, #2
 80109aa:	d901      	bls.n	80109b0 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 80109ac:	2303      	movs	r3, #3
 80109ae:	e006      	b.n	80109be <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80109b0:	4b05      	ldr	r3, [pc, #20]	; (80109c8 <RCCEx_PLL3_Config+0x128>)
 80109b2:	681b      	ldr	r3, [r3, #0]
 80109b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	d0f0      	beq.n	801099e <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 80109bc:	2300      	movs	r3, #0
}
 80109be:	4618      	mov	r0, r3
 80109c0:	3710      	adds	r7, #16
 80109c2:	46bd      	mov	sp, r7
 80109c4:	bd80      	pop	{r7, pc}
 80109c6:	bf00      	nop
 80109c8:	46020c00 	.word	0x46020c00
 80109cc:	80800000 	.word	0x80800000

080109d0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80109d0:	b580      	push	{r7, lr}
 80109d2:	b084      	sub	sp, #16
 80109d4:	af00      	add	r7, sp, #0
 80109d6:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	2b00      	cmp	r3, #0
 80109dc:	d101      	bne.n	80109e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80109de:	2301      	movs	r3, #1
 80109e0:	e0fb      	b.n	8010bda <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	681b      	ldr	r3, [r3, #0]
 80109e6:	4a7f      	ldr	r2, [pc, #508]	; (8010be4 <HAL_SPI_Init+0x214>)
 80109e8:	4293      	cmp	r3, r2
 80109ea:	d004      	beq.n	80109f6 <HAL_SPI_Init+0x26>
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	681b      	ldr	r3, [r3, #0]
 80109f0:	4a7d      	ldr	r2, [pc, #500]	; (8010be8 <HAL_SPI_Init+0x218>)
 80109f2:	4293      	cmp	r3, r2
 80109f4:	e000      	b.n	80109f8 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 80109f6:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	2200      	movs	r2, #0
 80109fc:	629a      	str	r2, [r3, #40]	; 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	681b      	ldr	r3, [r3, #0]
 8010a02:	4a78      	ldr	r2, [pc, #480]	; (8010be4 <HAL_SPI_Init+0x214>)
 8010a04:	4293      	cmp	r3, r2
 8010a06:	d004      	beq.n	8010a12 <HAL_SPI_Init+0x42>
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	681b      	ldr	r3, [r3, #0]
 8010a0c:	4a76      	ldr	r2, [pc, #472]	; (8010be8 <HAL_SPI_Init+0x218>)
 8010a0e:	4293      	cmp	r3, r2
 8010a10:	d105      	bne.n	8010a1e <HAL_SPI_Init+0x4e>
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	68db      	ldr	r3, [r3, #12]
 8010a16:	2b0f      	cmp	r3, #15
 8010a18:	d901      	bls.n	8010a1e <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 8010a1a:	2301      	movs	r3, #1
 8010a1c:	e0dd      	b.n	8010bda <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8010a1e:	6878      	ldr	r0, [r7, #4]
 8010a20:	f001 f9be 	bl	8011da0 <SPI_GetPacketSize>
 8010a24:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	681b      	ldr	r3, [r3, #0]
 8010a2a:	4a6e      	ldr	r2, [pc, #440]	; (8010be4 <HAL_SPI_Init+0x214>)
 8010a2c:	4293      	cmp	r3, r2
 8010a2e:	d004      	beq.n	8010a3a <HAL_SPI_Init+0x6a>
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	681b      	ldr	r3, [r3, #0]
 8010a34:	4a6c      	ldr	r2, [pc, #432]	; (8010be8 <HAL_SPI_Init+0x218>)
 8010a36:	4293      	cmp	r3, r2
 8010a38:	d102      	bne.n	8010a40 <HAL_SPI_Init+0x70>
 8010a3a:	68fb      	ldr	r3, [r7, #12]
 8010a3c:	2b08      	cmp	r3, #8
 8010a3e:	d816      	bhi.n	8010a6e <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8010a44:	4a69      	ldr	r2, [pc, #420]	; (8010bec <HAL_SPI_Init+0x21c>)
 8010a46:	4293      	cmp	r3, r2
 8010a48:	d00e      	beq.n	8010a68 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	681b      	ldr	r3, [r3, #0]
 8010a4e:	4a68      	ldr	r2, [pc, #416]	; (8010bf0 <HAL_SPI_Init+0x220>)
 8010a50:	4293      	cmp	r3, r2
 8010a52:	d009      	beq.n	8010a68 <HAL_SPI_Init+0x98>
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	4a66      	ldr	r2, [pc, #408]	; (8010bf4 <HAL_SPI_Init+0x224>)
 8010a5a:	4293      	cmp	r3, r2
 8010a5c:	d004      	beq.n	8010a68 <HAL_SPI_Init+0x98>
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	681b      	ldr	r3, [r3, #0]
 8010a62:	4a65      	ldr	r2, [pc, #404]	; (8010bf8 <HAL_SPI_Init+0x228>)
 8010a64:	4293      	cmp	r3, r2
 8010a66:	d104      	bne.n	8010a72 <HAL_SPI_Init+0xa2>
 8010a68:	68fb      	ldr	r3, [r7, #12]
 8010a6a:	2b10      	cmp	r3, #16
 8010a6c:	d901      	bls.n	8010a72 <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 8010a6e:	2301      	movs	r3, #1
 8010a70:	e0b3      	b.n	8010bda <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8010a78:	b2db      	uxtb	r3, r3
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	d106      	bne.n	8010a8c <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	2200      	movs	r2, #0
 8010a82:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8010a86:	6878      	ldr	r0, [r7, #4]
 8010a88:	f7f0 fbfe 	bl	8001288 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	2202      	movs	r2, #2
 8010a90:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	681b      	ldr	r3, [r3, #0]
 8010a98:	681a      	ldr	r2, [r3, #0]
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	681b      	ldr	r3, [r3, #0]
 8010a9e:	f022 0201 	bic.w	r2, r2, #1
 8010aa2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	681b      	ldr	r3, [r3, #0]
 8010aa8:	689b      	ldr	r3, [r3, #8]
 8010aaa:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8010aae:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	699b      	ldr	r3, [r3, #24]
 8010ab4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8010ab8:	d119      	bne.n	8010aee <HAL_SPI_Init+0x11e>
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	685b      	ldr	r3, [r3, #4]
 8010abe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010ac2:	d103      	bne.n	8010acc <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	d008      	beq.n	8010ade <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	d10c      	bne.n	8010aee <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8010ad8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010adc:	d107      	bne.n	8010aee <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	681b      	ldr	r3, [r3, #0]
 8010ae2:	681a      	ldr	r2, [r3, #0]
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	681b      	ldr	r3, [r3, #0]
 8010ae8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8010aec:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	685b      	ldr	r3, [r3, #4]
 8010af2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	d00f      	beq.n	8010b1a <HAL_SPI_Init+0x14a>
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	68db      	ldr	r3, [r3, #12]
 8010afe:	2b06      	cmp	r3, #6
 8010b00:	d90b      	bls.n	8010b1a <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	681b      	ldr	r3, [r3, #0]
 8010b06:	681b      	ldr	r3, [r3, #0]
 8010b08:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	681b      	ldr	r3, [r3, #0]
 8010b14:	430a      	orrs	r2, r1
 8010b16:	601a      	str	r2, [r3, #0]
 8010b18:	e007      	b.n	8010b2a <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	681b      	ldr	r3, [r3, #0]
 8010b1e:	681a      	ldr	r2, [r3, #0]
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	681b      	ldr	r3, [r3, #0]
 8010b24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8010b28:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	69da      	ldr	r2, [r3, #28]
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010b32:	431a      	orrs	r2, r3
 8010b34:	68bb      	ldr	r3, [r7, #8]
 8010b36:	431a      	orrs	r2, r3
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010b3c:	ea42 0103 	orr.w	r1, r2, r3
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	68da      	ldr	r2, [r3, #12]
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	681b      	ldr	r3, [r3, #0]
 8010b48:	430a      	orrs	r2, r1
 8010b4a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b54:	431a      	orrs	r2, r3
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b5a:	431a      	orrs	r2, r3
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	699b      	ldr	r3, [r3, #24]
 8010b60:	431a      	orrs	r2, r3
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	691b      	ldr	r3, [r3, #16]
 8010b66:	431a      	orrs	r2, r3
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	695b      	ldr	r3, [r3, #20]
 8010b6c:	431a      	orrs	r2, r3
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	6a1b      	ldr	r3, [r3, #32]
 8010b72:	431a      	orrs	r2, r3
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	685b      	ldr	r3, [r3, #4]
 8010b78:	431a      	orrs	r2, r3
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010b7e:	431a      	orrs	r2, r3
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	689b      	ldr	r3, [r3, #8]
 8010b84:	431a      	orrs	r2, r3
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010b8a:	431a      	orrs	r2, r3
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010b90:	431a      	orrs	r2, r3
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010b96:	ea42 0103 	orr.w	r1, r2, r3
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	681b      	ldr	r3, [r3, #0]
 8010ba2:	430a      	orrs	r2, r1
 8010ba4:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	685b      	ldr	r3, [r3, #4]
 8010baa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	d00a      	beq.n	8010bc8 <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	681b      	ldr	r3, [r3, #0]
 8010bb6:	68db      	ldr	r3, [r3, #12]
 8010bb8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	681b      	ldr	r3, [r3, #0]
 8010bc4:	430a      	orrs	r2, r1
 8010bc6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	2200      	movs	r2, #0
 8010bcc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	2201      	movs	r2, #1
 8010bd4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  return HAL_OK;
 8010bd8:	2300      	movs	r3, #0
}
 8010bda:	4618      	mov	r0, r3
 8010bdc:	3710      	adds	r7, #16
 8010bde:	46bd      	mov	sp, r7
 8010be0:	bd80      	pop	{r7, pc}
 8010be2:	bf00      	nop
 8010be4:	46002000 	.word	0x46002000
 8010be8:	56002000 	.word	0x56002000
 8010bec:	40013000 	.word	0x40013000
 8010bf0:	50013000 	.word	0x50013000
 8010bf4:	40003800 	.word	0x40003800
 8010bf8:	50003800 	.word	0x50003800

08010bfc <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010bfc:	b580      	push	{r7, lr}
 8010bfe:	b08a      	sub	sp, #40	; 0x28
 8010c00:	af02      	add	r7, sp, #8
 8010c02:	60f8      	str	r0, [r7, #12]
 8010c04:	60b9      	str	r1, [r7, #8]
 8010c06:	603b      	str	r3, [r7, #0]
 8010c08:	4613      	mov	r3, r2
 8010c0a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8010c0c:	68fb      	ldr	r3, [r7, #12]
 8010c0e:	681b      	ldr	r3, [r3, #0]
 8010c10:	3320      	adds	r3, #32
 8010c12:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8010c14:	2300      	movs	r3, #0
 8010c16:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8010c18:	68fb      	ldr	r3, [r7, #12]
 8010c1a:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8010c1e:	2b01      	cmp	r3, #1
 8010c20:	d101      	bne.n	8010c26 <HAL_SPI_Transmit+0x2a>
 8010c22:	2302      	movs	r3, #2
 8010c24:	e203      	b.n	801102e <HAL_SPI_Transmit+0x432>
 8010c26:	68fb      	ldr	r3, [r7, #12]
 8010c28:	2201      	movs	r2, #1
 8010c2a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8010c2e:	f7f9 fd2d 	bl	800a68c <HAL_GetTick>
 8010c32:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8010c34:	68fb      	ldr	r3, [r7, #12]
 8010c36:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8010c3a:	b2db      	uxtb	r3, r3
 8010c3c:	2b01      	cmp	r3, #1
 8010c3e:	d007      	beq.n	8010c50 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8010c40:	2302      	movs	r3, #2
 8010c42:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8010c44:	68fb      	ldr	r3, [r7, #12]
 8010c46:	2200      	movs	r2, #0
 8010c48:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 8010c4c:	7efb      	ldrb	r3, [r7, #27]
 8010c4e:	e1ee      	b.n	801102e <HAL_SPI_Transmit+0x432>
  }

  if ((pData == NULL) || (Size == 0UL))
 8010c50:	68bb      	ldr	r3, [r7, #8]
 8010c52:	2b00      	cmp	r3, #0
 8010c54:	d002      	beq.n	8010c5c <HAL_SPI_Transmit+0x60>
 8010c56:	88fb      	ldrh	r3, [r7, #6]
 8010c58:	2b00      	cmp	r3, #0
 8010c5a:	d107      	bne.n	8010c6c <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8010c5c:	2301      	movs	r3, #1
 8010c5e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8010c60:	68fb      	ldr	r3, [r7, #12]
 8010c62:	2200      	movs	r2, #0
 8010c64:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 8010c68:	7efb      	ldrb	r3, [r7, #27]
 8010c6a:	e1e0      	b.n	801102e <HAL_SPI_Transmit+0x432>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8010c6c:	68fb      	ldr	r3, [r7, #12]
 8010c6e:	2203      	movs	r2, #3
 8010c70:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8010c74:	68fb      	ldr	r3, [r7, #12]
 8010c76:	2200      	movs	r2, #0
 8010c78:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8010c7c:	68fb      	ldr	r3, [r7, #12]
 8010c7e:	68ba      	ldr	r2, [r7, #8]
 8010c80:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxXferSize  = Size;
 8010c82:	68fb      	ldr	r3, [r7, #12]
 8010c84:	88fa      	ldrh	r2, [r7, #6]
 8010c86:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->TxXferCount = Size;
 8010c8a:	68fb      	ldr	r3, [r7, #12]
 8010c8c:	88fa      	ldrh	r2, [r7, #6]
 8010c8e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8010c92:	68fb      	ldr	r3, [r7, #12]
 8010c94:	2200      	movs	r2, #0
 8010c96:	66da      	str	r2, [r3, #108]	; 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 8010c98:	68fb      	ldr	r3, [r7, #12]
 8010c9a:	2200      	movs	r2, #0
 8010c9c:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 8010ca0:	68fb      	ldr	r3, [r7, #12]
 8010ca2:	2200      	movs	r2, #0
 8010ca4:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
  hspi->TxISR       = NULL;
 8010ca8:	68fb      	ldr	r3, [r7, #12]
 8010caa:	2200      	movs	r2, #0
 8010cac:	67da      	str	r2, [r3, #124]	; 0x7c
  hspi->RxISR       = NULL;
 8010cae:	68fb      	ldr	r3, [r7, #12]
 8010cb0:	2200      	movs	r2, #0
 8010cb2:	679a      	str	r2, [r3, #120]	; 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010cb4:	68fb      	ldr	r3, [r7, #12]
 8010cb6:	689b      	ldr	r3, [r3, #8]
 8010cb8:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8010cbc:	d108      	bne.n	8010cd0 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 8010cbe:	68fb      	ldr	r3, [r7, #12]
 8010cc0:	681b      	ldr	r3, [r3, #0]
 8010cc2:	681a      	ldr	r2, [r3, #0]
 8010cc4:	68fb      	ldr	r3, [r7, #12]
 8010cc6:	681b      	ldr	r3, [r3, #0]
 8010cc8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010ccc:	601a      	str	r2, [r3, #0]
 8010cce:	e009      	b.n	8010ce4 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8010cd0:	68fb      	ldr	r3, [r7, #12]
 8010cd2:	681b      	ldr	r3, [r3, #0]
 8010cd4:	68db      	ldr	r3, [r3, #12]
 8010cd6:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8010cda:	68fb      	ldr	r3, [r7, #12]
 8010cdc:	681b      	ldr	r3, [r3, #0]
 8010cde:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8010ce2:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8010ce4:	68fb      	ldr	r3, [r7, #12]
 8010ce6:	681b      	ldr	r3, [r3, #0]
 8010ce8:	685b      	ldr	r3, [r3, #4]
 8010cea:	0c1b      	lsrs	r3, r3, #16
 8010cec:	041b      	lsls	r3, r3, #16
 8010cee:	88f9      	ldrh	r1, [r7, #6]
 8010cf0:	68fa      	ldr	r2, [r7, #12]
 8010cf2:	6812      	ldr	r2, [r2, #0]
 8010cf4:	430b      	orrs	r3, r1
 8010cf6:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8010cf8:	68fb      	ldr	r3, [r7, #12]
 8010cfa:	681b      	ldr	r3, [r3, #0]
 8010cfc:	681a      	ldr	r2, [r3, #0]
 8010cfe:	68fb      	ldr	r3, [r7, #12]
 8010d00:	681b      	ldr	r3, [r3, #0]
 8010d02:	f042 0201 	orr.w	r2, r2, #1
 8010d06:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8010d08:	68fb      	ldr	r3, [r7, #12]
 8010d0a:	681b      	ldr	r3, [r3, #0]
 8010d0c:	69db      	ldr	r3, [r3, #28]
 8010d0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	d10c      	bne.n	8010d30 <HAL_SPI_Transmit+0x134>
 8010d16:	68fb      	ldr	r3, [r7, #12]
 8010d18:	685b      	ldr	r3, [r3, #4]
 8010d1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010d1e:	d107      	bne.n	8010d30 <HAL_SPI_Transmit+0x134>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8010d20:	68fb      	ldr	r3, [r7, #12]
 8010d22:	681b      	ldr	r3, [r3, #0]
 8010d24:	681a      	ldr	r2, [r3, #0]
 8010d26:	68fb      	ldr	r3, [r7, #12]
 8010d28:	681b      	ldr	r3, [r3, #0]
 8010d2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010d2e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8010d30:	68fb      	ldr	r3, [r7, #12]
 8010d32:	68db      	ldr	r3, [r3, #12]
 8010d34:	2b0f      	cmp	r3, #15
 8010d36:	d95b      	bls.n	8010df0 <HAL_SPI_Transmit+0x1f4>
 8010d38:	68fb      	ldr	r3, [r7, #12]
 8010d3a:	681b      	ldr	r3, [r3, #0]
 8010d3c:	4a8f      	ldr	r2, [pc, #572]	; (8010f7c <HAL_SPI_Transmit+0x380>)
 8010d3e:	4293      	cmp	r3, r2
 8010d40:	d04f      	beq.n	8010de2 <HAL_SPI_Transmit+0x1e6>
 8010d42:	68fb      	ldr	r3, [r7, #12]
 8010d44:	681b      	ldr	r3, [r3, #0]
 8010d46:	4a8e      	ldr	r2, [pc, #568]	; (8010f80 <HAL_SPI_Transmit+0x384>)
 8010d48:	4293      	cmp	r3, r2
 8010d4a:	d04a      	beq.n	8010de2 <HAL_SPI_Transmit+0x1e6>
 8010d4c:	68fb      	ldr	r3, [r7, #12]
 8010d4e:	681b      	ldr	r3, [r3, #0]
 8010d50:	4a8c      	ldr	r2, [pc, #560]	; (8010f84 <HAL_SPI_Transmit+0x388>)
 8010d52:	4293      	cmp	r3, r2
 8010d54:	d045      	beq.n	8010de2 <HAL_SPI_Transmit+0x1e6>
 8010d56:	68fb      	ldr	r3, [r7, #12]
 8010d58:	681b      	ldr	r3, [r3, #0]
 8010d5a:	4a8b      	ldr	r2, [pc, #556]	; (8010f88 <HAL_SPI_Transmit+0x38c>)
 8010d5c:	4293      	cmp	r3, r2
 8010d5e:	d147      	bne.n	8010df0 <HAL_SPI_Transmit+0x1f4>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8010d60:	e03f      	b.n	8010de2 <HAL_SPI_Transmit+0x1e6>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8010d62:	68fb      	ldr	r3, [r7, #12]
 8010d64:	681b      	ldr	r3, [r3, #0]
 8010d66:	695b      	ldr	r3, [r3, #20]
 8010d68:	f003 0302 	and.w	r3, r3, #2
 8010d6c:	2b02      	cmp	r3, #2
 8010d6e:	d114      	bne.n	8010d9a <HAL_SPI_Transmit+0x19e>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8010d70:	68fb      	ldr	r3, [r7, #12]
 8010d72:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8010d74:	68fb      	ldr	r3, [r7, #12]
 8010d76:	681b      	ldr	r3, [r3, #0]
 8010d78:	6812      	ldr	r2, [r2, #0]
 8010d7a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8010d7c:	68fb      	ldr	r3, [r7, #12]
 8010d7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010d80:	1d1a      	adds	r2, r3, #4
 8010d82:	68fb      	ldr	r3, [r7, #12]
 8010d84:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount--;
 8010d86:	68fb      	ldr	r3, [r7, #12]
 8010d88:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010d8c:	b29b      	uxth	r3, r3
 8010d8e:	3b01      	subs	r3, #1
 8010d90:	b29a      	uxth	r2, r3
 8010d92:	68fb      	ldr	r3, [r7, #12]
 8010d94:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8010d98:	e023      	b.n	8010de2 <HAL_SPI_Transmit+0x1e6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010d9a:	f7f9 fc77 	bl	800a68c <HAL_GetTick>
 8010d9e:	4602      	mov	r2, r0
 8010da0:	697b      	ldr	r3, [r7, #20]
 8010da2:	1ad3      	subs	r3, r2, r3
 8010da4:	683a      	ldr	r2, [r7, #0]
 8010da6:	429a      	cmp	r2, r3
 8010da8:	d803      	bhi.n	8010db2 <HAL_SPI_Transmit+0x1b6>
 8010daa:	683b      	ldr	r3, [r7, #0]
 8010dac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010db0:	d102      	bne.n	8010db8 <HAL_SPI_Transmit+0x1bc>
 8010db2:	683b      	ldr	r3, [r7, #0]
 8010db4:	2b00      	cmp	r3, #0
 8010db6:	d114      	bne.n	8010de2 <HAL_SPI_Transmit+0x1e6>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8010db8:	68f8      	ldr	r0, [r7, #12]
 8010dba:	f000 ff23 	bl	8011c04 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8010dbe:	68fb      	ldr	r3, [r7, #12]
 8010dc0:	2200      	movs	r2, #0
 8010dc2:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010dc6:	68fb      	ldr	r3, [r7, #12]
 8010dc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010dcc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8010dd0:	68fb      	ldr	r3, [r7, #12]
 8010dd2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8010dd6:	68fb      	ldr	r3, [r7, #12]
 8010dd8:	2201      	movs	r2, #1
 8010dda:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 8010dde:	2303      	movs	r3, #3
 8010de0:	e125      	b.n	801102e <HAL_SPI_Transmit+0x432>
    while (hspi->TxXferCount > 0UL)
 8010de2:	68fb      	ldr	r3, [r7, #12]
 8010de4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010de8:	b29b      	uxth	r3, r3
 8010dea:	2b00      	cmp	r3, #0
 8010dec:	d1b9      	bne.n	8010d62 <HAL_SPI_Transmit+0x166>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8010dee:	e0f8      	b.n	8010fe2 <HAL_SPI_Transmit+0x3e6>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8010df0:	68fb      	ldr	r3, [r7, #12]
 8010df2:	68db      	ldr	r3, [r3, #12]
 8010df4:	2b07      	cmp	r3, #7
 8010df6:	f240 80ed 	bls.w	8010fd4 <HAL_SPI_Transmit+0x3d8>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8010dfa:	e05d      	b.n	8010eb8 <HAL_SPI_Transmit+0x2bc>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8010dfc:	68fb      	ldr	r3, [r7, #12]
 8010dfe:	681b      	ldr	r3, [r3, #0]
 8010e00:	695b      	ldr	r3, [r3, #20]
 8010e02:	f003 0302 	and.w	r3, r3, #2
 8010e06:	2b02      	cmp	r3, #2
 8010e08:	d132      	bne.n	8010e70 <HAL_SPI_Transmit+0x274>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8010e0a:	68fb      	ldr	r3, [r7, #12]
 8010e0c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010e10:	b29b      	uxth	r3, r3
 8010e12:	2b01      	cmp	r3, #1
 8010e14:	d918      	bls.n	8010e48 <HAL_SPI_Transmit+0x24c>
 8010e16:	68fb      	ldr	r3, [r7, #12]
 8010e18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	d014      	beq.n	8010e48 <HAL_SPI_Transmit+0x24c>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8010e1e:	68fb      	ldr	r3, [r7, #12]
 8010e20:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8010e22:	68fb      	ldr	r3, [r7, #12]
 8010e24:	681b      	ldr	r3, [r3, #0]
 8010e26:	6812      	ldr	r2, [r2, #0]
 8010e28:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8010e2a:	68fb      	ldr	r3, [r7, #12]
 8010e2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010e2e:	1d1a      	adds	r2, r3, #4
 8010e30:	68fb      	ldr	r3, [r7, #12]
 8010e32:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8010e34:	68fb      	ldr	r3, [r7, #12]
 8010e36:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010e3a:	b29b      	uxth	r3, r3
 8010e3c:	3b02      	subs	r3, #2
 8010e3e:	b29a      	uxth	r2, r3
 8010e40:	68fb      	ldr	r3, [r7, #12]
 8010e42:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8010e46:	e037      	b.n	8010eb8 <HAL_SPI_Transmit+0x2bc>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8010e48:	68fb      	ldr	r3, [r7, #12]
 8010e4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010e4c:	881a      	ldrh	r2, [r3, #0]
 8010e4e:	69fb      	ldr	r3, [r7, #28]
 8010e50:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8010e52:	68fb      	ldr	r3, [r7, #12]
 8010e54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010e56:	1c9a      	adds	r2, r3, #2
 8010e58:	68fb      	ldr	r3, [r7, #12]
 8010e5a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount--;
 8010e5c:	68fb      	ldr	r3, [r7, #12]
 8010e5e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010e62:	b29b      	uxth	r3, r3
 8010e64:	3b01      	subs	r3, #1
 8010e66:	b29a      	uxth	r2, r3
 8010e68:	68fb      	ldr	r3, [r7, #12]
 8010e6a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8010e6e:	e023      	b.n	8010eb8 <HAL_SPI_Transmit+0x2bc>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010e70:	f7f9 fc0c 	bl	800a68c <HAL_GetTick>
 8010e74:	4602      	mov	r2, r0
 8010e76:	697b      	ldr	r3, [r7, #20]
 8010e78:	1ad3      	subs	r3, r2, r3
 8010e7a:	683a      	ldr	r2, [r7, #0]
 8010e7c:	429a      	cmp	r2, r3
 8010e7e:	d803      	bhi.n	8010e88 <HAL_SPI_Transmit+0x28c>
 8010e80:	683b      	ldr	r3, [r7, #0]
 8010e82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010e86:	d102      	bne.n	8010e8e <HAL_SPI_Transmit+0x292>
 8010e88:	683b      	ldr	r3, [r7, #0]
 8010e8a:	2b00      	cmp	r3, #0
 8010e8c:	d114      	bne.n	8010eb8 <HAL_SPI_Transmit+0x2bc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8010e8e:	68f8      	ldr	r0, [r7, #12]
 8010e90:	f000 feb8 	bl	8011c04 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8010e94:	68fb      	ldr	r3, [r7, #12]
 8010e96:	2200      	movs	r2, #0
 8010e98:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010e9c:	68fb      	ldr	r3, [r7, #12]
 8010e9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010ea2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8010ea6:	68fb      	ldr	r3, [r7, #12]
 8010ea8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8010eac:	68fb      	ldr	r3, [r7, #12]
 8010eae:	2201      	movs	r2, #1
 8010eb0:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 8010eb4:	2303      	movs	r3, #3
 8010eb6:	e0ba      	b.n	801102e <HAL_SPI_Transmit+0x432>
    while (hspi->TxXferCount > 0UL)
 8010eb8:	68fb      	ldr	r3, [r7, #12]
 8010eba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010ebe:	b29b      	uxth	r3, r3
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	d19b      	bne.n	8010dfc <HAL_SPI_Transmit+0x200>
 8010ec4:	e08d      	b.n	8010fe2 <HAL_SPI_Transmit+0x3e6>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8010ec6:	68fb      	ldr	r3, [r7, #12]
 8010ec8:	681b      	ldr	r3, [r3, #0]
 8010eca:	695b      	ldr	r3, [r3, #20]
 8010ecc:	f003 0302 	and.w	r3, r3, #2
 8010ed0:	2b02      	cmp	r3, #2
 8010ed2:	d15b      	bne.n	8010f8c <HAL_SPI_Transmit+0x390>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8010ed4:	68fb      	ldr	r3, [r7, #12]
 8010ed6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010eda:	b29b      	uxth	r3, r3
 8010edc:	2b03      	cmp	r3, #3
 8010ede:	d918      	bls.n	8010f12 <HAL_SPI_Transmit+0x316>
 8010ee0:	68fb      	ldr	r3, [r7, #12]
 8010ee2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010ee4:	2b40      	cmp	r3, #64	; 0x40
 8010ee6:	d914      	bls.n	8010f12 <HAL_SPI_Transmit+0x316>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8010ee8:	68fb      	ldr	r3, [r7, #12]
 8010eea:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8010eec:	68fb      	ldr	r3, [r7, #12]
 8010eee:	681b      	ldr	r3, [r3, #0]
 8010ef0:	6812      	ldr	r2, [r2, #0]
 8010ef2:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8010ef4:	68fb      	ldr	r3, [r7, #12]
 8010ef6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010ef8:	1d1a      	adds	r2, r3, #4
 8010efa:	68fb      	ldr	r3, [r7, #12]
 8010efc:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 8010efe:	68fb      	ldr	r3, [r7, #12]
 8010f00:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010f04:	b29b      	uxth	r3, r3
 8010f06:	3b04      	subs	r3, #4
 8010f08:	b29a      	uxth	r2, r3
 8010f0a:	68fb      	ldr	r3, [r7, #12]
 8010f0c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8010f10:	e060      	b.n	8010fd4 <HAL_SPI_Transmit+0x3d8>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8010f12:	68fb      	ldr	r3, [r7, #12]
 8010f14:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010f18:	b29b      	uxth	r3, r3
 8010f1a:	2b01      	cmp	r3, #1
 8010f1c:	d917      	bls.n	8010f4e <HAL_SPI_Transmit+0x352>
 8010f1e:	68fb      	ldr	r3, [r7, #12]
 8010f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	d013      	beq.n	8010f4e <HAL_SPI_Transmit+0x352>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8010f26:	68fb      	ldr	r3, [r7, #12]
 8010f28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010f2a:	881a      	ldrh	r2, [r3, #0]
 8010f2c:	69fb      	ldr	r3, [r7, #28]
 8010f2e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8010f30:	68fb      	ldr	r3, [r7, #12]
 8010f32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010f34:	1c9a      	adds	r2, r3, #2
 8010f36:	68fb      	ldr	r3, [r7, #12]
 8010f38:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8010f3a:	68fb      	ldr	r3, [r7, #12]
 8010f3c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010f40:	b29b      	uxth	r3, r3
 8010f42:	3b02      	subs	r3, #2
 8010f44:	b29a      	uxth	r2, r3
 8010f46:	68fb      	ldr	r3, [r7, #12]
 8010f48:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8010f4c:	e042      	b.n	8010fd4 <HAL_SPI_Transmit+0x3d8>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8010f4e:	68fb      	ldr	r3, [r7, #12]
 8010f50:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8010f52:	68fb      	ldr	r3, [r7, #12]
 8010f54:	681b      	ldr	r3, [r3, #0]
 8010f56:	3320      	adds	r3, #32
 8010f58:	7812      	ldrb	r2, [r2, #0]
 8010f5a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8010f5c:	68fb      	ldr	r3, [r7, #12]
 8010f5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010f60:	1c5a      	adds	r2, r3, #1
 8010f62:	68fb      	ldr	r3, [r7, #12]
 8010f64:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount--;
 8010f66:	68fb      	ldr	r3, [r7, #12]
 8010f68:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010f6c:	b29b      	uxth	r3, r3
 8010f6e:	3b01      	subs	r3, #1
 8010f70:	b29a      	uxth	r2, r3
 8010f72:	68fb      	ldr	r3, [r7, #12]
 8010f74:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8010f78:	e02c      	b.n	8010fd4 <HAL_SPI_Transmit+0x3d8>
 8010f7a:	bf00      	nop
 8010f7c:	40013000 	.word	0x40013000
 8010f80:	50013000 	.word	0x50013000
 8010f84:	40003800 	.word	0x40003800
 8010f88:	50003800 	.word	0x50003800
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010f8c:	f7f9 fb7e 	bl	800a68c <HAL_GetTick>
 8010f90:	4602      	mov	r2, r0
 8010f92:	697b      	ldr	r3, [r7, #20]
 8010f94:	1ad3      	subs	r3, r2, r3
 8010f96:	683a      	ldr	r2, [r7, #0]
 8010f98:	429a      	cmp	r2, r3
 8010f9a:	d803      	bhi.n	8010fa4 <HAL_SPI_Transmit+0x3a8>
 8010f9c:	683b      	ldr	r3, [r7, #0]
 8010f9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010fa2:	d102      	bne.n	8010faa <HAL_SPI_Transmit+0x3ae>
 8010fa4:	683b      	ldr	r3, [r7, #0]
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	d114      	bne.n	8010fd4 <HAL_SPI_Transmit+0x3d8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8010faa:	68f8      	ldr	r0, [r7, #12]
 8010fac:	f000 fe2a 	bl	8011c04 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8010fb0:	68fb      	ldr	r3, [r7, #12]
 8010fb2:	2200      	movs	r2, #0
 8010fb4:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010fb8:	68fb      	ldr	r3, [r7, #12]
 8010fba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010fbe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8010fc2:	68fb      	ldr	r3, [r7, #12]
 8010fc4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8010fc8:	68fb      	ldr	r3, [r7, #12]
 8010fca:	2201      	movs	r2, #1
 8010fcc:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 8010fd0:	2303      	movs	r3, #3
 8010fd2:	e02c      	b.n	801102e <HAL_SPI_Transmit+0x432>
    while (hspi->TxXferCount > 0UL)
 8010fd4:	68fb      	ldr	r3, [r7, #12]
 8010fd6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010fda:	b29b      	uxth	r3, r3
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	f47f af72 	bne.w	8010ec6 <HAL_SPI_Transmit+0x2ca>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8010fe2:	697b      	ldr	r3, [r7, #20]
 8010fe4:	9300      	str	r3, [sp, #0]
 8010fe6:	683b      	ldr	r3, [r7, #0]
 8010fe8:	2200      	movs	r2, #0
 8010fea:	2108      	movs	r1, #8
 8010fec:	68f8      	ldr	r0, [r7, #12]
 8010fee:	f000 fea9 	bl	8011d44 <SPI_WaitOnFlagUntilTimeout>
 8010ff2:	4603      	mov	r3, r0
 8010ff4:	2b00      	cmp	r3, #0
 8010ff6:	d007      	beq.n	8011008 <HAL_SPI_Transmit+0x40c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010ff8:	68fb      	ldr	r3, [r7, #12]
 8010ffa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010ffe:	f043 0220 	orr.w	r2, r3, #32
 8011002:	68fb      	ldr	r3, [r7, #12]
 8011004:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8011008:	68f8      	ldr	r0, [r7, #12]
 801100a:	f000 fdfb 	bl	8011c04 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 801100e:	68fb      	ldr	r3, [r7, #12]
 8011010:	2200      	movs	r2, #0
 8011012:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  hspi->State = HAL_SPI_STATE_READY;
 8011016:	68fb      	ldr	r3, [r7, #12]
 8011018:	2201      	movs	r2, #1
 801101a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801101e:	68fb      	ldr	r3, [r7, #12]
 8011020:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011024:	2b00      	cmp	r3, #0
 8011026:	d001      	beq.n	801102c <HAL_SPI_Transmit+0x430>
  {
    return HAL_ERROR;
 8011028:	2301      	movs	r3, #1
 801102a:	e000      	b.n	801102e <HAL_SPI_Transmit+0x432>
  }
  return errorcode;
 801102c:	7efb      	ldrb	r3, [r7, #27]
}
 801102e:	4618      	mov	r0, r3
 8011030:	3720      	adds	r7, #32
 8011032:	46bd      	mov	sp, r7
 8011034:	bd80      	pop	{r7, pc}
 8011036:	bf00      	nop

08011038 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011038:	b580      	push	{r7, lr}
 801103a:	b088      	sub	sp, #32
 801103c:	af00      	add	r7, sp, #0
 801103e:	60f8      	str	r0, [r7, #12]
 8011040:	60b9      	str	r1, [r7, #8]
 8011042:	603b      	str	r3, [r7, #0]
 8011044:	4613      	mov	r3, r2
 8011046:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8011048:	2300      	movs	r3, #0
 801104a:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 801104c:	68fb      	ldr	r3, [r7, #12]
 801104e:	681b      	ldr	r3, [r3, #0]
 8011050:	3330      	adds	r3, #48	; 0x30
 8011052:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8011054:	68fb      	ldr	r3, [r7, #12]
 8011056:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 801105a:	2b01      	cmp	r3, #1
 801105c:	d101      	bne.n	8011062 <HAL_SPI_Receive+0x2a>
 801105e:	2302      	movs	r3, #2
 8011060:	e18e      	b.n	8011380 <HAL_SPI_Receive+0x348>
 8011062:	68fb      	ldr	r3, [r7, #12]
 8011064:	2201      	movs	r2, #1
 8011066:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801106a:	f7f9 fb0f 	bl	800a68c <HAL_GetTick>
 801106e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8011070:	68fb      	ldr	r3, [r7, #12]
 8011072:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8011076:	b2db      	uxtb	r3, r3
 8011078:	2b01      	cmp	r3, #1
 801107a:	d007      	beq.n	801108c <HAL_SPI_Receive+0x54>
  {
    errorcode = HAL_BUSY;
 801107c:	2302      	movs	r3, #2
 801107e:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8011080:	68fb      	ldr	r3, [r7, #12]
 8011082:	2200      	movs	r2, #0
 8011084:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 8011088:	7ffb      	ldrb	r3, [r7, #31]
 801108a:	e179      	b.n	8011380 <HAL_SPI_Receive+0x348>
  }

  if ((pData == NULL) || (Size == 0UL))
 801108c:	68bb      	ldr	r3, [r7, #8]
 801108e:	2b00      	cmp	r3, #0
 8011090:	d002      	beq.n	8011098 <HAL_SPI_Receive+0x60>
 8011092:	88fb      	ldrh	r3, [r7, #6]
 8011094:	2b00      	cmp	r3, #0
 8011096:	d107      	bne.n	80110a8 <HAL_SPI_Receive+0x70>
  {
    errorcode = HAL_ERROR;
 8011098:	2301      	movs	r3, #1
 801109a:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 801109c:	68fb      	ldr	r3, [r7, #12]
 801109e:	2200      	movs	r2, #0
 80110a0:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 80110a4:	7ffb      	ldrb	r3, [r7, #31]
 80110a6:	e16b      	b.n	8011380 <HAL_SPI_Receive+0x348>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80110a8:	68fb      	ldr	r3, [r7, #12]
 80110aa:	2204      	movs	r2, #4
 80110ac:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80110b0:	68fb      	ldr	r3, [r7, #12]
 80110b2:	2200      	movs	r2, #0
 80110b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80110b8:	68fb      	ldr	r3, [r7, #12]
 80110ba:	68ba      	ldr	r2, [r7, #8]
 80110bc:	66da      	str	r2, [r3, #108]	; 0x6c
  hspi->RxXferSize  = Size;
 80110be:	68fb      	ldr	r3, [r7, #12]
 80110c0:	88fa      	ldrh	r2, [r7, #6]
 80110c2:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  hspi->RxXferCount = Size;
 80110c6:	68fb      	ldr	r3, [r7, #12]
 80110c8:	88fa      	ldrh	r2, [r7, #6]
 80110ca:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 80110ce:	68fb      	ldr	r3, [r7, #12]
 80110d0:	2200      	movs	r2, #0
 80110d2:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxXferSize  = (uint16_t) 0UL;
 80110d4:	68fb      	ldr	r3, [r7, #12]
 80110d6:	2200      	movs	r2, #0
 80110d8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->TxXferCount = (uint16_t) 0UL;
 80110dc:	68fb      	ldr	r3, [r7, #12]
 80110de:	2200      	movs	r2, #0
 80110e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxISR       = NULL;
 80110e4:	68fb      	ldr	r3, [r7, #12]
 80110e6:	2200      	movs	r2, #0
 80110e8:	679a      	str	r2, [r3, #120]	; 0x78
  hspi->TxISR       = NULL;
 80110ea:	68fb      	ldr	r3, [r7, #12]
 80110ec:	2200      	movs	r2, #0
 80110ee:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80110f0:	68fb      	ldr	r3, [r7, #12]
 80110f2:	689b      	ldr	r3, [r3, #8]
 80110f4:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80110f8:	d108      	bne.n	801110c <HAL_SPI_Receive+0xd4>
  {
    SPI_1LINE_RX(hspi);
 80110fa:	68fb      	ldr	r3, [r7, #12]
 80110fc:	681b      	ldr	r3, [r3, #0]
 80110fe:	681a      	ldr	r2, [r3, #0]
 8011100:	68fb      	ldr	r3, [r7, #12]
 8011102:	681b      	ldr	r3, [r3, #0]
 8011104:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8011108:	601a      	str	r2, [r3, #0]
 801110a:	e009      	b.n	8011120 <HAL_SPI_Receive+0xe8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 801110c:	68fb      	ldr	r3, [r7, #12]
 801110e:	681b      	ldr	r3, [r3, #0]
 8011110:	68db      	ldr	r3, [r3, #12]
 8011112:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8011116:	68fb      	ldr	r3, [r7, #12]
 8011118:	681b      	ldr	r3, [r3, #0]
 801111a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 801111e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8011120:	68fb      	ldr	r3, [r7, #12]
 8011122:	681b      	ldr	r3, [r3, #0]
 8011124:	685b      	ldr	r3, [r3, #4]
 8011126:	0c1b      	lsrs	r3, r3, #16
 8011128:	041b      	lsls	r3, r3, #16
 801112a:	88f9      	ldrh	r1, [r7, #6]
 801112c:	68fa      	ldr	r2, [r7, #12]
 801112e:	6812      	ldr	r2, [r2, #0]
 8011130:	430b      	orrs	r3, r1
 8011132:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8011134:	68fb      	ldr	r3, [r7, #12]
 8011136:	681b      	ldr	r3, [r3, #0]
 8011138:	681a      	ldr	r2, [r3, #0]
 801113a:	68fb      	ldr	r3, [r7, #12]
 801113c:	681b      	ldr	r3, [r3, #0]
 801113e:	f042 0201 	orr.w	r2, r2, #1
 8011142:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8011144:	68fb      	ldr	r3, [r7, #12]
 8011146:	681b      	ldr	r3, [r3, #0]
 8011148:	69db      	ldr	r3, [r3, #28]
 801114a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801114e:	2b00      	cmp	r3, #0
 8011150:	d10c      	bne.n	801116c <HAL_SPI_Receive+0x134>
 8011152:	68fb      	ldr	r3, [r7, #12]
 8011154:	685b      	ldr	r3, [r3, #4]
 8011156:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801115a:	d107      	bne.n	801116c <HAL_SPI_Receive+0x134>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 801115c:	68fb      	ldr	r3, [r7, #12]
 801115e:	681b      	ldr	r3, [r3, #0]
 8011160:	681a      	ldr	r2, [r3, #0]
 8011162:	68fb      	ldr	r3, [r7, #12]
 8011164:	681b      	ldr	r3, [r3, #0]
 8011166:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801116a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 801116c:	68fb      	ldr	r3, [r7, #12]
 801116e:	68db      	ldr	r3, [r3, #12]
 8011170:	2b0f      	cmp	r3, #15
 8011172:	d95c      	bls.n	801122e <HAL_SPI_Receive+0x1f6>
 8011174:	68fb      	ldr	r3, [r7, #12]
 8011176:	681b      	ldr	r3, [r3, #0]
 8011178:	4a83      	ldr	r2, [pc, #524]	; (8011388 <HAL_SPI_Receive+0x350>)
 801117a:	4293      	cmp	r3, r2
 801117c:	d050      	beq.n	8011220 <HAL_SPI_Receive+0x1e8>
 801117e:	68fb      	ldr	r3, [r7, #12]
 8011180:	681b      	ldr	r3, [r3, #0]
 8011182:	4a82      	ldr	r2, [pc, #520]	; (801138c <HAL_SPI_Receive+0x354>)
 8011184:	4293      	cmp	r3, r2
 8011186:	d04b      	beq.n	8011220 <HAL_SPI_Receive+0x1e8>
 8011188:	68fb      	ldr	r3, [r7, #12]
 801118a:	681b      	ldr	r3, [r3, #0]
 801118c:	4a80      	ldr	r2, [pc, #512]	; (8011390 <HAL_SPI_Receive+0x358>)
 801118e:	4293      	cmp	r3, r2
 8011190:	d046      	beq.n	8011220 <HAL_SPI_Receive+0x1e8>
 8011192:	68fb      	ldr	r3, [r7, #12]
 8011194:	681b      	ldr	r3, [r3, #0]
 8011196:	4a7f      	ldr	r2, [pc, #508]	; (8011394 <HAL_SPI_Receive+0x35c>)
 8011198:	4293      	cmp	r3, r2
 801119a:	d148      	bne.n	801122e <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 801119c:	e040      	b.n	8011220 <HAL_SPI_Receive+0x1e8>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 801119e:	68fb      	ldr	r3, [r7, #12]
 80111a0:	681b      	ldr	r3, [r3, #0]
 80111a2:	695a      	ldr	r2, [r3, #20]
 80111a4:	f248 0308 	movw	r3, #32776	; 0x8008
 80111a8:	4013      	ands	r3, r2
 80111aa:	2b00      	cmp	r3, #0
 80111ac:	d014      	beq.n	80111d8 <HAL_SPI_Receive+0x1a0>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80111ae:	68fb      	ldr	r3, [r7, #12]
 80111b0:	681a      	ldr	r2, [r3, #0]
 80111b2:	68fb      	ldr	r3, [r7, #12]
 80111b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80111b6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80111b8:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80111ba:	68fb      	ldr	r3, [r7, #12]
 80111bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80111be:	1d1a      	adds	r2, r3, #4
 80111c0:	68fb      	ldr	r3, [r7, #12]
 80111c2:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount--;
 80111c4:	68fb      	ldr	r3, [r7, #12]
 80111c6:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 80111ca:	b29b      	uxth	r3, r3
 80111cc:	3b01      	subs	r3, #1
 80111ce:	b29a      	uxth	r2, r3
 80111d0:	68fb      	ldr	r3, [r7, #12]
 80111d2:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 80111d6:	e023      	b.n	8011220 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80111d8:	f7f9 fa58 	bl	800a68c <HAL_GetTick>
 80111dc:	4602      	mov	r2, r0
 80111de:	697b      	ldr	r3, [r7, #20]
 80111e0:	1ad3      	subs	r3, r2, r3
 80111e2:	683a      	ldr	r2, [r7, #0]
 80111e4:	429a      	cmp	r2, r3
 80111e6:	d803      	bhi.n	80111f0 <HAL_SPI_Receive+0x1b8>
 80111e8:	683b      	ldr	r3, [r7, #0]
 80111ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80111ee:	d102      	bne.n	80111f6 <HAL_SPI_Receive+0x1be>
 80111f0:	683b      	ldr	r3, [r7, #0]
 80111f2:	2b00      	cmp	r3, #0
 80111f4:	d114      	bne.n	8011220 <HAL_SPI_Receive+0x1e8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80111f6:	68f8      	ldr	r0, [r7, #12]
 80111f8:	f000 fd04 	bl	8011c04 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80111fc:	68fb      	ldr	r3, [r7, #12]
 80111fe:	2200      	movs	r2, #0
 8011200:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8011204:	68fb      	ldr	r3, [r7, #12]
 8011206:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801120a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 801120e:	68fb      	ldr	r3, [r7, #12]
 8011210:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8011214:	68fb      	ldr	r3, [r7, #12]
 8011216:	2201      	movs	r2, #1
 8011218:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 801121c:	2303      	movs	r3, #3
 801121e:	e0af      	b.n	8011380 <HAL_SPI_Receive+0x348>
    while (hspi->RxXferCount > 0UL)
 8011220:	68fb      	ldr	r3, [r7, #12]
 8011222:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8011226:	b29b      	uxth	r3, r3
 8011228:	2b00      	cmp	r3, #0
 801122a:	d1b8      	bne.n	801119e <HAL_SPI_Receive+0x166>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 801122c:	e095      	b.n	801135a <HAL_SPI_Receive+0x322>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801122e:	68fb      	ldr	r3, [r7, #12]
 8011230:	68db      	ldr	r3, [r3, #12]
 8011232:	2b07      	cmp	r3, #7
 8011234:	f240 808b 	bls.w	801134e <HAL_SPI_Receive+0x316>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8011238:	e03f      	b.n	80112ba <HAL_SPI_Receive+0x282>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 801123a:	68fb      	ldr	r3, [r7, #12]
 801123c:	681b      	ldr	r3, [r3, #0]
 801123e:	695b      	ldr	r3, [r3, #20]
 8011240:	f003 0301 	and.w	r3, r3, #1
 8011244:	2b01      	cmp	r3, #1
 8011246:	d114      	bne.n	8011272 <HAL_SPI_Receive+0x23a>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8011248:	68fb      	ldr	r3, [r7, #12]
 801124a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801124c:	69ba      	ldr	r2, [r7, #24]
 801124e:	8812      	ldrh	r2, [r2, #0]
 8011250:	b292      	uxth	r2, r2
 8011252:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8011254:	68fb      	ldr	r3, [r7, #12]
 8011256:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011258:	1c9a      	adds	r2, r3, #2
 801125a:	68fb      	ldr	r3, [r7, #12]
 801125c:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount--;
 801125e:	68fb      	ldr	r3, [r7, #12]
 8011260:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8011264:	b29b      	uxth	r3, r3
 8011266:	3b01      	subs	r3, #1
 8011268:	b29a      	uxth	r2, r3
 801126a:	68fb      	ldr	r3, [r7, #12]
 801126c:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 8011270:	e023      	b.n	80112ba <HAL_SPI_Receive+0x282>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011272:	f7f9 fa0b 	bl	800a68c <HAL_GetTick>
 8011276:	4602      	mov	r2, r0
 8011278:	697b      	ldr	r3, [r7, #20]
 801127a:	1ad3      	subs	r3, r2, r3
 801127c:	683a      	ldr	r2, [r7, #0]
 801127e:	429a      	cmp	r2, r3
 8011280:	d803      	bhi.n	801128a <HAL_SPI_Receive+0x252>
 8011282:	683b      	ldr	r3, [r7, #0]
 8011284:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011288:	d102      	bne.n	8011290 <HAL_SPI_Receive+0x258>
 801128a:	683b      	ldr	r3, [r7, #0]
 801128c:	2b00      	cmp	r3, #0
 801128e:	d114      	bne.n	80112ba <HAL_SPI_Receive+0x282>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8011290:	68f8      	ldr	r0, [r7, #12]
 8011292:	f000 fcb7 	bl	8011c04 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8011296:	68fb      	ldr	r3, [r7, #12]
 8011298:	2200      	movs	r2, #0
 801129a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 801129e:	68fb      	ldr	r3, [r7, #12]
 80112a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80112a4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80112a8:	68fb      	ldr	r3, [r7, #12]
 80112aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 80112ae:	68fb      	ldr	r3, [r7, #12]
 80112b0:	2201      	movs	r2, #1
 80112b2:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 80112b6:	2303      	movs	r3, #3
 80112b8:	e062      	b.n	8011380 <HAL_SPI_Receive+0x348>
    while (hspi->RxXferCount > 0UL)
 80112ba:	68fb      	ldr	r3, [r7, #12]
 80112bc:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 80112c0:	b29b      	uxth	r3, r3
 80112c2:	2b00      	cmp	r3, #0
 80112c4:	d1b9      	bne.n	801123a <HAL_SPI_Receive+0x202>
 80112c6:	e048      	b.n	801135a <HAL_SPI_Receive+0x322>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80112c8:	68fb      	ldr	r3, [r7, #12]
 80112ca:	681b      	ldr	r3, [r3, #0]
 80112cc:	695b      	ldr	r3, [r3, #20]
 80112ce:	f003 0301 	and.w	r3, r3, #1
 80112d2:	2b01      	cmp	r3, #1
 80112d4:	d117      	bne.n	8011306 <HAL_SPI_Receive+0x2ce>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80112d6:	68fb      	ldr	r3, [r7, #12]
 80112d8:	681b      	ldr	r3, [r3, #0]
 80112da:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80112de:	68fb      	ldr	r3, [r7, #12]
 80112e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80112e2:	7812      	ldrb	r2, [r2, #0]
 80112e4:	b2d2      	uxtb	r2, r2
 80112e6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80112e8:	68fb      	ldr	r3, [r7, #12]
 80112ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80112ec:	1c5a      	adds	r2, r3, #1
 80112ee:	68fb      	ldr	r3, [r7, #12]
 80112f0:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount--;
 80112f2:	68fb      	ldr	r3, [r7, #12]
 80112f4:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 80112f8:	b29b      	uxth	r3, r3
 80112fa:	3b01      	subs	r3, #1
 80112fc:	b29a      	uxth	r2, r3
 80112fe:	68fb      	ldr	r3, [r7, #12]
 8011300:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 8011304:	e023      	b.n	801134e <HAL_SPI_Receive+0x316>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011306:	f7f9 f9c1 	bl	800a68c <HAL_GetTick>
 801130a:	4602      	mov	r2, r0
 801130c:	697b      	ldr	r3, [r7, #20]
 801130e:	1ad3      	subs	r3, r2, r3
 8011310:	683a      	ldr	r2, [r7, #0]
 8011312:	429a      	cmp	r2, r3
 8011314:	d803      	bhi.n	801131e <HAL_SPI_Receive+0x2e6>
 8011316:	683b      	ldr	r3, [r7, #0]
 8011318:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801131c:	d102      	bne.n	8011324 <HAL_SPI_Receive+0x2ec>
 801131e:	683b      	ldr	r3, [r7, #0]
 8011320:	2b00      	cmp	r3, #0
 8011322:	d114      	bne.n	801134e <HAL_SPI_Receive+0x316>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8011324:	68f8      	ldr	r0, [r7, #12]
 8011326:	f000 fc6d 	bl	8011c04 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 801132a:	68fb      	ldr	r3, [r7, #12]
 801132c:	2200      	movs	r2, #0
 801132e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8011332:	68fb      	ldr	r3, [r7, #12]
 8011334:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011338:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 801133c:	68fb      	ldr	r3, [r7, #12]
 801133e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8011342:	68fb      	ldr	r3, [r7, #12]
 8011344:	2201      	movs	r2, #1
 8011346:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 801134a:	2303      	movs	r3, #3
 801134c:	e018      	b.n	8011380 <HAL_SPI_Receive+0x348>
    while (hspi->RxXferCount > 0UL)
 801134e:	68fb      	ldr	r3, [r7, #12]
 8011350:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8011354:	b29b      	uxth	r3, r3
 8011356:	2b00      	cmp	r3, #0
 8011358:	d1b6      	bne.n	80112c8 <HAL_SPI_Receive+0x290>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 801135a:	68f8      	ldr	r0, [r7, #12]
 801135c:	f000 fc52 	bl	8011c04 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8011360:	68fb      	ldr	r3, [r7, #12]
 8011362:	2200      	movs	r2, #0
 8011364:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  hspi->State = HAL_SPI_STATE_READY;
 8011368:	68fb      	ldr	r3, [r7, #12]
 801136a:	2201      	movs	r2, #1
 801136c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8011370:	68fb      	ldr	r3, [r7, #12]
 8011372:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011376:	2b00      	cmp	r3, #0
 8011378:	d001      	beq.n	801137e <HAL_SPI_Receive+0x346>
  {
    return HAL_ERROR;
 801137a:	2301      	movs	r3, #1
 801137c:	e000      	b.n	8011380 <HAL_SPI_Receive+0x348>
  }
  return errorcode;
 801137e:	7ffb      	ldrb	r3, [r7, #31]
}
 8011380:	4618      	mov	r0, r3
 8011382:	3720      	adds	r7, #32
 8011384:	46bd      	mov	sp, r7
 8011386:	bd80      	pop	{r7, pc}
 8011388:	40013000 	.word	0x40013000
 801138c:	50013000 	.word	0x50013000
 8011390:	40003800 	.word	0x40003800
 8011394:	50003800 	.word	0x50003800

08011398 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8011398:	b580      	push	{r7, lr}
 801139a:	b08c      	sub	sp, #48	; 0x30
 801139c:	af02      	add	r7, sp, #8
 801139e:	60f8      	str	r0, [r7, #12]
 80113a0:	60b9      	str	r1, [r7, #8]
 80113a2:	607a      	str	r2, [r7, #4]
 80113a4:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80113a6:	2300      	movs	r3, #0
 80113a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80113ac:	68fb      	ldr	r3, [r7, #12]
 80113ae:	681b      	ldr	r3, [r3, #0]
 80113b0:	3320      	adds	r3, #32
 80113b2:	61fb      	str	r3, [r7, #28]
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80113b4:	68fb      	ldr	r3, [r7, #12]
 80113b6:	681b      	ldr	r3, [r3, #0]
 80113b8:	3330      	adds	r3, #48	; 0x30
 80113ba:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 80113bc:	68fb      	ldr	r3, [r7, #12]
 80113be:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80113c2:	2b01      	cmp	r3, #1
 80113c4:	d101      	bne.n	80113ca <HAL_SPI_TransmitReceive+0x32>
 80113c6:	2302      	movs	r3, #2
 80113c8:	e21f      	b.n	801180a <HAL_SPI_TransmitReceive+0x472>
 80113ca:	68fb      	ldr	r3, [r7, #12]
 80113cc:	2201      	movs	r2, #1
 80113ce:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80113d2:	f7f9 f95b 	bl	800a68c <HAL_GetTick>
 80113d6:	6178      	str	r0, [r7, #20]

  initial_TxXferCount = Size;
 80113d8:	887b      	ldrh	r3, [r7, #2]
 80113da:	84fb      	strh	r3, [r7, #38]	; 0x26
  initial_RxXferCount = Size;
 80113dc:	887b      	ldrh	r3, [r7, #2]
 80113de:	84bb      	strh	r3, [r7, #36]	; 0x24

  if (hspi->State != HAL_SPI_STATE_READY)
 80113e0:	68fb      	ldr	r3, [r7, #12]
 80113e2:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 80113e6:	b2db      	uxtb	r3, r3
 80113e8:	2b01      	cmp	r3, #1
 80113ea:	d009      	beq.n	8011400 <HAL_SPI_TransmitReceive+0x68>
  {
    errorcode = HAL_BUSY;
 80113ec:	2302      	movs	r3, #2
 80113ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    __HAL_UNLOCK(hspi);
 80113f2:	68fb      	ldr	r3, [r7, #12]
 80113f4:	2200      	movs	r2, #0
 80113f6:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 80113fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80113fe:	e204      	b.n	801180a <HAL_SPI_TransmitReceive+0x472>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8011400:	68bb      	ldr	r3, [r7, #8]
 8011402:	2b00      	cmp	r3, #0
 8011404:	d005      	beq.n	8011412 <HAL_SPI_TransmitReceive+0x7a>
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	2b00      	cmp	r3, #0
 801140a:	d002      	beq.n	8011412 <HAL_SPI_TransmitReceive+0x7a>
 801140c:	887b      	ldrh	r3, [r7, #2]
 801140e:	2b00      	cmp	r3, #0
 8011410:	d109      	bne.n	8011426 <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 8011412:	2301      	movs	r3, #1
 8011414:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    __HAL_UNLOCK(hspi);
 8011418:	68fb      	ldr	r3, [r7, #12]
 801141a:	2200      	movs	r2, #0
 801141c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 8011420:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8011424:	e1f1      	b.n	801180a <HAL_SPI_TransmitReceive+0x472>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8011426:	68fb      	ldr	r3, [r7, #12]
 8011428:	2205      	movs	r2, #5
 801142a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801142e:	68fb      	ldr	r3, [r7, #12]
 8011430:	2200      	movs	r2, #0
 8011432:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8011436:	68fb      	ldr	r3, [r7, #12]
 8011438:	687a      	ldr	r2, [r7, #4]
 801143a:	66da      	str	r2, [r3, #108]	; 0x6c
  hspi->RxXferCount = Size;
 801143c:	68fb      	ldr	r3, [r7, #12]
 801143e:	887a      	ldrh	r2, [r7, #2]
 8011440:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
  hspi->RxXferSize  = Size;
 8011444:	68fb      	ldr	r3, [r7, #12]
 8011446:	887a      	ldrh	r2, [r7, #2]
 8011448:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 801144c:	68fb      	ldr	r3, [r7, #12]
 801144e:	68ba      	ldr	r2, [r7, #8]
 8011450:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxXferCount = Size;
 8011452:	68fb      	ldr	r3, [r7, #12]
 8011454:	887a      	ldrh	r2, [r7, #2]
 8011456:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferSize  = Size;
 801145a:	68fb      	ldr	r3, [r7, #12]
 801145c:	887a      	ldrh	r2, [r7, #2]
 801145e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8011462:	68fb      	ldr	r3, [r7, #12]
 8011464:	2200      	movs	r2, #0
 8011466:	679a      	str	r2, [r3, #120]	; 0x78
  hspi->TxISR       = NULL;
 8011468:	68fb      	ldr	r3, [r7, #12]
 801146a:	2200      	movs	r2, #0
 801146c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 801146e:	68fb      	ldr	r3, [r7, #12]
 8011470:	681b      	ldr	r3, [r3, #0]
 8011472:	68da      	ldr	r2, [r3, #12]
 8011474:	68fb      	ldr	r3, [r7, #12]
 8011476:	681b      	ldr	r3, [r3, #0]
 8011478:	f422 22c0 	bic.w	r2, r2, #393216	; 0x60000
 801147c:	60da      	str	r2, [r3, #12]

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 801147e:	68fb      	ldr	r3, [r7, #12]
 8011480:	681b      	ldr	r3, [r3, #0]
 8011482:	685b      	ldr	r3, [r3, #4]
 8011484:	0c1b      	lsrs	r3, r3, #16
 8011486:	041b      	lsls	r3, r3, #16
 8011488:	8879      	ldrh	r1, [r7, #2]
 801148a:	68fa      	ldr	r2, [r7, #12]
 801148c:	6812      	ldr	r2, [r2, #0]
 801148e:	430b      	orrs	r3, r1
 8011490:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8011492:	68fb      	ldr	r3, [r7, #12]
 8011494:	681b      	ldr	r3, [r3, #0]
 8011496:	681a      	ldr	r2, [r3, #0]
 8011498:	68fb      	ldr	r3, [r7, #12]
 801149a:	681b      	ldr	r3, [r3, #0]
 801149c:	f042 0201 	orr.w	r2, r2, #1
 80114a0:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80114a2:	68fb      	ldr	r3, [r7, #12]
 80114a4:	681b      	ldr	r3, [r3, #0]
 80114a6:	69db      	ldr	r3, [r3, #28]
 80114a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80114ac:	2b00      	cmp	r3, #0
 80114ae:	d10c      	bne.n	80114ca <HAL_SPI_TransmitReceive+0x132>
 80114b0:	68fb      	ldr	r3, [r7, #12]
 80114b2:	685b      	ldr	r3, [r3, #4]
 80114b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80114b8:	d107      	bne.n	80114ca <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80114ba:	68fb      	ldr	r3, [r7, #12]
 80114bc:	681b      	ldr	r3, [r3, #0]
 80114be:	681a      	ldr	r2, [r3, #0]
 80114c0:	68fb      	ldr	r3, [r7, #12]
 80114c2:	681b      	ldr	r3, [r3, #0]
 80114c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80114c8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 80114ca:	68fb      	ldr	r3, [r7, #12]
 80114cc:	68db      	ldr	r3, [r3, #12]
 80114ce:	2b0f      	cmp	r3, #15
 80114d0:	f240 8085 	bls.w	80115de <HAL_SPI_TransmitReceive+0x246>
 80114d4:	68fb      	ldr	r3, [r7, #12]
 80114d6:	681b      	ldr	r3, [r3, #0]
 80114d8:	4a7b      	ldr	r2, [pc, #492]	; (80116c8 <HAL_SPI_TransmitReceive+0x330>)
 80114da:	4293      	cmp	r3, r2
 80114dc:	d078      	beq.n	80115d0 <HAL_SPI_TransmitReceive+0x238>
 80114de:	68fb      	ldr	r3, [r7, #12]
 80114e0:	681b      	ldr	r3, [r3, #0]
 80114e2:	4a7a      	ldr	r2, [pc, #488]	; (80116cc <HAL_SPI_TransmitReceive+0x334>)
 80114e4:	4293      	cmp	r3, r2
 80114e6:	d073      	beq.n	80115d0 <HAL_SPI_TransmitReceive+0x238>
 80114e8:	68fb      	ldr	r3, [r7, #12]
 80114ea:	681b      	ldr	r3, [r3, #0]
 80114ec:	4a78      	ldr	r2, [pc, #480]	; (80116d0 <HAL_SPI_TransmitReceive+0x338>)
 80114ee:	4293      	cmp	r3, r2
 80114f0:	d06e      	beq.n	80115d0 <HAL_SPI_TransmitReceive+0x238>
 80114f2:	68fb      	ldr	r3, [r7, #12]
 80114f4:	681b      	ldr	r3, [r3, #0]
 80114f6:	4a77      	ldr	r2, [pc, #476]	; (80116d4 <HAL_SPI_TransmitReceive+0x33c>)
 80114f8:	4293      	cmp	r3, r2
 80114fa:	d170      	bne.n	80115de <HAL_SPI_TransmitReceive+0x246>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80114fc:	e068      	b.n	80115d0 <HAL_SPI_TransmitReceive+0x238>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 80114fe:	68fb      	ldr	r3, [r7, #12]
 8011500:	681b      	ldr	r3, [r3, #0]
 8011502:	695b      	ldr	r3, [r3, #20]
 8011504:	f003 0302 	and.w	r3, r3, #2
 8011508:	2b02      	cmp	r3, #2
 801150a:	d11a      	bne.n	8011542 <HAL_SPI_TransmitReceive+0x1aa>
 801150c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801150e:	2b00      	cmp	r3, #0
 8011510:	d017      	beq.n	8011542 <HAL_SPI_TransmitReceive+0x1aa>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8011512:	68fb      	ldr	r3, [r7, #12]
 8011514:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8011516:	68fb      	ldr	r3, [r7, #12]
 8011518:	681b      	ldr	r3, [r3, #0]
 801151a:	6812      	ldr	r2, [r2, #0]
 801151c:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 801151e:	68fb      	ldr	r3, [r7, #12]
 8011520:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011522:	1d1a      	adds	r2, r3, #4
 8011524:	68fb      	ldr	r3, [r7, #12]
 8011526:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount --;
 8011528:	68fb      	ldr	r3, [r7, #12]
 801152a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801152e:	b29b      	uxth	r3, r3
 8011530:	3b01      	subs	r3, #1
 8011532:	b29a      	uxth	r2, r3
 8011534:	68fb      	ldr	r3, [r7, #12]
 8011536:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 801153a:	68fb      	ldr	r3, [r7, #12]
 801153c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011540:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8011542:	68fb      	ldr	r3, [r7, #12]
 8011544:	681b      	ldr	r3, [r3, #0]
 8011546:	695a      	ldr	r2, [r3, #20]
 8011548:	f248 0308 	movw	r3, #32776	; 0x8008
 801154c:	4013      	ands	r3, r2
 801154e:	2b00      	cmp	r3, #0
 8011550:	d01a      	beq.n	8011588 <HAL_SPI_TransmitReceive+0x1f0>
 8011552:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011554:	2b00      	cmp	r3, #0
 8011556:	d017      	beq.n	8011588 <HAL_SPI_TransmitReceive+0x1f0>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8011558:	68fb      	ldr	r3, [r7, #12]
 801155a:	681a      	ldr	r2, [r3, #0]
 801155c:	68fb      	ldr	r3, [r7, #12]
 801155e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011560:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8011562:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8011564:	68fb      	ldr	r3, [r7, #12]
 8011566:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011568:	1d1a      	adds	r2, r3, #4
 801156a:	68fb      	ldr	r3, [r7, #12]
 801156c:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount --;
 801156e:	68fb      	ldr	r3, [r7, #12]
 8011570:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8011574:	b29b      	uxth	r3, r3
 8011576:	3b01      	subs	r3, #1
 8011578:	b29a      	uxth	r2, r3
 801157a:	68fb      	ldr	r3, [r7, #12]
 801157c:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
        initial_RxXferCount = hspi->RxXferCount;
 8011580:	68fb      	ldr	r3, [r7, #12]
 8011582:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8011586:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011588:	f7f9 f880 	bl	800a68c <HAL_GetTick>
 801158c:	4602      	mov	r2, r0
 801158e:	697b      	ldr	r3, [r7, #20]
 8011590:	1ad3      	subs	r3, r2, r3
 8011592:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011594:	429a      	cmp	r2, r3
 8011596:	d803      	bhi.n	80115a0 <HAL_SPI_TransmitReceive+0x208>
 8011598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801159a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801159e:	d102      	bne.n	80115a6 <HAL_SPI_TransmitReceive+0x20e>
 80115a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	d114      	bne.n	80115d0 <HAL_SPI_TransmitReceive+0x238>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 80115a6:	68f8      	ldr	r0, [r7, #12]
 80115a8:	f000 fb2c 	bl	8011c04 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 80115ac:	68fb      	ldr	r3, [r7, #12]
 80115ae:	2200      	movs	r2, #0
 80115b0:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80115b4:	68fb      	ldr	r3, [r7, #12]
 80115b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80115ba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80115be:	68fb      	ldr	r3, [r7, #12]
 80115c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 80115c4:	68fb      	ldr	r3, [r7, #12]
 80115c6:	2201      	movs	r2, #1
 80115c8:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        return HAL_TIMEOUT;
 80115cc:	2303      	movs	r3, #3
 80115ce:	e11c      	b.n	801180a <HAL_SPI_TransmitReceive+0x472>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80115d0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80115d2:	2b00      	cmp	r3, #0
 80115d4:	d193      	bne.n	80114fe <HAL_SPI_TransmitReceive+0x166>
 80115d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80115d8:	2b00      	cmp	r3, #0
 80115da:	d190      	bne.n	80114fe <HAL_SPI_TransmitReceive+0x166>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 80115dc:	e0ee      	b.n	80117bc <HAL_SPI_TransmitReceive+0x424>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80115de:	68fb      	ldr	r3, [r7, #12]
 80115e0:	68db      	ldr	r3, [r3, #12]
 80115e2:	2b07      	cmp	r3, #7
 80115e4:	f240 80e4 	bls.w	80117b0 <HAL_SPI_TransmitReceive+0x418>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80115e8:	e066      	b.n	80116b8 <HAL_SPI_TransmitReceive+0x320>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 80115ea:	68fb      	ldr	r3, [r7, #12]
 80115ec:	681b      	ldr	r3, [r3, #0]
 80115ee:	695b      	ldr	r3, [r3, #20]
 80115f0:	f003 0302 	and.w	r3, r3, #2
 80115f4:	2b02      	cmp	r3, #2
 80115f6:	d119      	bne.n	801162c <HAL_SPI_TransmitReceive+0x294>
 80115f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80115fa:	2b00      	cmp	r3, #0
 80115fc:	d016      	beq.n	801162c <HAL_SPI_TransmitReceive+0x294>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80115fe:	68fb      	ldr	r3, [r7, #12]
 8011600:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011602:	881a      	ldrh	r2, [r3, #0]
 8011604:	69fb      	ldr	r3, [r7, #28]
 8011606:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8011608:	68fb      	ldr	r3, [r7, #12]
 801160a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801160c:	1c9a      	adds	r2, r3, #2
 801160e:	68fb      	ldr	r3, [r7, #12]
 8011610:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount--;
 8011612:	68fb      	ldr	r3, [r7, #12]
 8011614:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011618:	b29b      	uxth	r3, r3
 801161a:	3b01      	subs	r3, #1
 801161c:	b29a      	uxth	r2, r3
 801161e:	68fb      	ldr	r3, [r7, #12]
 8011620:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 8011624:	68fb      	ldr	r3, [r7, #12]
 8011626:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801162a:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 801162c:	68fb      	ldr	r3, [r7, #12]
 801162e:	681b      	ldr	r3, [r3, #0]
 8011630:	695b      	ldr	r3, [r3, #20]
 8011632:	f003 0301 	and.w	r3, r3, #1
 8011636:	2b01      	cmp	r3, #1
 8011638:	d11a      	bne.n	8011670 <HAL_SPI_TransmitReceive+0x2d8>
 801163a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801163c:	2b00      	cmp	r3, #0
 801163e:	d017      	beq.n	8011670 <HAL_SPI_TransmitReceive+0x2d8>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8011640:	68fb      	ldr	r3, [r7, #12]
 8011642:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011644:	69ba      	ldr	r2, [r7, #24]
 8011646:	8812      	ldrh	r2, [r2, #0]
 8011648:	b292      	uxth	r2, r2
 801164a:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801164c:	68fb      	ldr	r3, [r7, #12]
 801164e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011650:	1c9a      	adds	r2, r3, #2
 8011652:	68fb      	ldr	r3, [r7, #12]
 8011654:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount--;
 8011656:	68fb      	ldr	r3, [r7, #12]
 8011658:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 801165c:	b29b      	uxth	r3, r3
 801165e:	3b01      	subs	r3, #1
 8011660:	b29a      	uxth	r2, r3
 8011662:	68fb      	ldr	r3, [r7, #12]
 8011664:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
        initial_RxXferCount = hspi->RxXferCount;
 8011668:	68fb      	ldr	r3, [r7, #12]
 801166a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 801166e:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011670:	f7f9 f80c 	bl	800a68c <HAL_GetTick>
 8011674:	4602      	mov	r2, r0
 8011676:	697b      	ldr	r3, [r7, #20]
 8011678:	1ad3      	subs	r3, r2, r3
 801167a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801167c:	429a      	cmp	r2, r3
 801167e:	d803      	bhi.n	8011688 <HAL_SPI_TransmitReceive+0x2f0>
 8011680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011682:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011686:	d102      	bne.n	801168e <HAL_SPI_TransmitReceive+0x2f6>
 8011688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801168a:	2b00      	cmp	r3, #0
 801168c:	d114      	bne.n	80116b8 <HAL_SPI_TransmitReceive+0x320>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 801168e:	68f8      	ldr	r0, [r7, #12]
 8011690:	f000 fab8 	bl	8011c04 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8011694:	68fb      	ldr	r3, [r7, #12]
 8011696:	2200      	movs	r2, #0
 8011698:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 801169c:	68fb      	ldr	r3, [r7, #12]
 801169e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80116a2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80116a6:	68fb      	ldr	r3, [r7, #12]
 80116a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 80116ac:	68fb      	ldr	r3, [r7, #12]
 80116ae:	2201      	movs	r2, #1
 80116b0:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        return HAL_TIMEOUT;
 80116b4:	2303      	movs	r3, #3
 80116b6:	e0a8      	b.n	801180a <HAL_SPI_TransmitReceive+0x472>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80116b8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	d195      	bne.n	80115ea <HAL_SPI_TransmitReceive+0x252>
 80116be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	d192      	bne.n	80115ea <HAL_SPI_TransmitReceive+0x252>
 80116c4:	e07a      	b.n	80117bc <HAL_SPI_TransmitReceive+0x424>
 80116c6:	bf00      	nop
 80116c8:	40013000 	.word	0x40013000
 80116cc:	50013000 	.word	0x50013000
 80116d0:	40003800 	.word	0x40003800
 80116d4:	50003800 	.word	0x50003800
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 80116d8:	68fb      	ldr	r3, [r7, #12]
 80116da:	681b      	ldr	r3, [r3, #0]
 80116dc:	695b      	ldr	r3, [r3, #20]
 80116de:	f003 0302 	and.w	r3, r3, #2
 80116e2:	2b02      	cmp	r3, #2
 80116e4:	d11b      	bne.n	801171e <HAL_SPI_TransmitReceive+0x386>
 80116e6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80116e8:	2b00      	cmp	r3, #0
 80116ea:	d018      	beq.n	801171e <HAL_SPI_TransmitReceive+0x386>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80116ec:	68fb      	ldr	r3, [r7, #12]
 80116ee:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80116f0:	68fb      	ldr	r3, [r7, #12]
 80116f2:	681b      	ldr	r3, [r3, #0]
 80116f4:	3320      	adds	r3, #32
 80116f6:	7812      	ldrb	r2, [r2, #0]
 80116f8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80116fa:	68fb      	ldr	r3, [r7, #12]
 80116fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80116fe:	1c5a      	adds	r2, r3, #1
 8011700:	68fb      	ldr	r3, [r7, #12]
 8011702:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount--;
 8011704:	68fb      	ldr	r3, [r7, #12]
 8011706:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801170a:	b29b      	uxth	r3, r3
 801170c:	3b01      	subs	r3, #1
 801170e:	b29a      	uxth	r2, r3
 8011710:	68fb      	ldr	r3, [r7, #12]
 8011712:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 8011716:	68fb      	ldr	r3, [r7, #12]
 8011718:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801171c:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 801171e:	68fb      	ldr	r3, [r7, #12]
 8011720:	681b      	ldr	r3, [r3, #0]
 8011722:	695b      	ldr	r3, [r3, #20]
 8011724:	f003 0301 	and.w	r3, r3, #1
 8011728:	2b01      	cmp	r3, #1
 801172a:	d11d      	bne.n	8011768 <HAL_SPI_TransmitReceive+0x3d0>
 801172c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801172e:	2b00      	cmp	r3, #0
 8011730:	d01a      	beq.n	8011768 <HAL_SPI_TransmitReceive+0x3d0>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8011732:	68fb      	ldr	r3, [r7, #12]
 8011734:	681b      	ldr	r3, [r3, #0]
 8011736:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801173a:	68fb      	ldr	r3, [r7, #12]
 801173c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801173e:	7812      	ldrb	r2, [r2, #0]
 8011740:	b2d2      	uxtb	r2, r2
 8011742:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8011744:	68fb      	ldr	r3, [r7, #12]
 8011746:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011748:	1c5a      	adds	r2, r3, #1
 801174a:	68fb      	ldr	r3, [r7, #12]
 801174c:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount--;
 801174e:	68fb      	ldr	r3, [r7, #12]
 8011750:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8011754:	b29b      	uxth	r3, r3
 8011756:	3b01      	subs	r3, #1
 8011758:	b29a      	uxth	r2, r3
 801175a:	68fb      	ldr	r3, [r7, #12]
 801175c:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
        initial_RxXferCount = hspi->RxXferCount;
 8011760:	68fb      	ldr	r3, [r7, #12]
 8011762:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8011766:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011768:	f7f8 ff90 	bl	800a68c <HAL_GetTick>
 801176c:	4602      	mov	r2, r0
 801176e:	697b      	ldr	r3, [r7, #20]
 8011770:	1ad3      	subs	r3, r2, r3
 8011772:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011774:	429a      	cmp	r2, r3
 8011776:	d803      	bhi.n	8011780 <HAL_SPI_TransmitReceive+0x3e8>
 8011778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801177a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801177e:	d102      	bne.n	8011786 <HAL_SPI_TransmitReceive+0x3ee>
 8011780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011782:	2b00      	cmp	r3, #0
 8011784:	d114      	bne.n	80117b0 <HAL_SPI_TransmitReceive+0x418>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8011786:	68f8      	ldr	r0, [r7, #12]
 8011788:	f000 fa3c 	bl	8011c04 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 801178c:	68fb      	ldr	r3, [r7, #12]
 801178e:	2200      	movs	r2, #0
 8011790:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8011794:	68fb      	ldr	r3, [r7, #12]
 8011796:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801179a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 801179e:	68fb      	ldr	r3, [r7, #12]
 80117a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 80117a4:	68fb      	ldr	r3, [r7, #12]
 80117a6:	2201      	movs	r2, #1
 80117a8:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        return HAL_TIMEOUT;
 80117ac:	2303      	movs	r3, #3
 80117ae:	e02c      	b.n	801180a <HAL_SPI_TransmitReceive+0x472>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80117b0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	d190      	bne.n	80116d8 <HAL_SPI_TransmitReceive+0x340>
 80117b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80117b8:	2b00      	cmp	r3, #0
 80117ba:	d18d      	bne.n	80116d8 <HAL_SPI_TransmitReceive+0x340>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80117bc:	697b      	ldr	r3, [r7, #20]
 80117be:	9300      	str	r3, [sp, #0]
 80117c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117c2:	2200      	movs	r2, #0
 80117c4:	2108      	movs	r1, #8
 80117c6:	68f8      	ldr	r0, [r7, #12]
 80117c8:	f000 fabc 	bl	8011d44 <SPI_WaitOnFlagUntilTimeout>
 80117cc:	4603      	mov	r3, r0
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	d007      	beq.n	80117e2 <HAL_SPI_TransmitReceive+0x44a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80117d2:	68fb      	ldr	r3, [r7, #12]
 80117d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80117d8:	f043 0220 	orr.w	r2, r3, #32
 80117dc:	68fb      	ldr	r3, [r7, #12]
 80117de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80117e2:	68f8      	ldr	r0, [r7, #12]
 80117e4:	f000 fa0e 	bl	8011c04 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80117e8:	68fb      	ldr	r3, [r7, #12]
 80117ea:	2200      	movs	r2, #0
 80117ec:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  hspi->State = HAL_SPI_STATE_READY;
 80117f0:	68fb      	ldr	r3, [r7, #12]
 80117f2:	2201      	movs	r2, #1
 80117f4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80117f8:	68fb      	ldr	r3, [r7, #12]
 80117fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d001      	beq.n	8011806 <HAL_SPI_TransmitReceive+0x46e>
  {
    return HAL_ERROR;
 8011802:	2301      	movs	r3, #1
 8011804:	e001      	b.n	801180a <HAL_SPI_TransmitReceive+0x472>
  }
  return errorcode;
 8011806:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 801180a:	4618      	mov	r0, r3
 801180c:	3728      	adds	r7, #40	; 0x28
 801180e:	46bd      	mov	sp, r7
 8011810:	bd80      	pop	{r7, pc}
 8011812:	bf00      	nop

08011814 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8011814:	b580      	push	{r7, lr}
 8011816:	b08a      	sub	sp, #40	; 0x28
 8011818:	af00      	add	r7, sp, #0
 801181a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	681b      	ldr	r3, [r3, #0]
 8011820:	691b      	ldr	r3, [r3, #16]
 8011822:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	681b      	ldr	r3, [r3, #0]
 8011828:	695b      	ldr	r3, [r3, #20]
 801182a:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 801182c:	6a3a      	ldr	r2, [r7, #32]
 801182e:	69fb      	ldr	r3, [r7, #28]
 8011830:	4013      	ands	r3, r2
 8011832:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	681b      	ldr	r3, [r3, #0]
 8011838:	689b      	ldr	r3, [r3, #8]
 801183a:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 801183c:	2300      	movs	r3, #0
 801183e:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8011846:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	681b      	ldr	r3, [r3, #0]
 801184c:	3330      	adds	r3, #48	; 0x30
 801184e:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8011850:	69fb      	ldr	r3, [r7, #28]
 8011852:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011856:	2b00      	cmp	r3, #0
 8011858:	d010      	beq.n	801187c <HAL_SPI_IRQHandler+0x68>
 801185a:	6a3b      	ldr	r3, [r7, #32]
 801185c:	f003 0308 	and.w	r3, r3, #8
 8011860:	2b00      	cmp	r3, #0
 8011862:	d00b      	beq.n	801187c <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	681b      	ldr	r3, [r3, #0]
 8011868:	699a      	ldr	r2, [r3, #24]
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	681b      	ldr	r3, [r3, #0]
 801186e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011872:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8011874:	6878      	ldr	r0, [r7, #4]
 8011876:	f000 f9a1 	bl	8011bbc <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 801187a:	e19a      	b.n	8011bb2 <HAL_SPI_IRQHandler+0x39e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 801187c:	69bb      	ldr	r3, [r7, #24]
 801187e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011882:	2b00      	cmp	r3, #0
 8011884:	d113      	bne.n	80118ae <HAL_SPI_IRQHandler+0x9a>
 8011886:	69bb      	ldr	r3, [r7, #24]
 8011888:	f003 0320 	and.w	r3, r3, #32
 801188c:	2b00      	cmp	r3, #0
 801188e:	d10e      	bne.n	80118ae <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8011890:	69bb      	ldr	r3, [r7, #24]
 8011892:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8011896:	2b00      	cmp	r3, #0
 8011898:	d009      	beq.n	80118ae <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801189e:	6878      	ldr	r0, [r7, #4]
 80118a0:	4798      	blx	r3
    hspi->RxISR(hspi);
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80118a6:	6878      	ldr	r0, [r7, #4]
 80118a8:	4798      	blx	r3
    handled = 1UL;
 80118aa:	2301      	movs	r3, #1
 80118ac:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80118ae:	69bb      	ldr	r3, [r7, #24]
 80118b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	d10f      	bne.n	80118d8 <HAL_SPI_IRQHandler+0xc4>
 80118b8:	69bb      	ldr	r3, [r7, #24]
 80118ba:	f003 0301 	and.w	r3, r3, #1
 80118be:	2b00      	cmp	r3, #0
 80118c0:	d00a      	beq.n	80118d8 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80118c2:	69bb      	ldr	r3, [r7, #24]
 80118c4:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80118c8:	2b00      	cmp	r3, #0
 80118ca:	d105      	bne.n	80118d8 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80118d0:	6878      	ldr	r0, [r7, #4]
 80118d2:	4798      	blx	r3
    handled = 1UL;
 80118d4:	2301      	movs	r3, #1
 80118d6:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80118d8:	69bb      	ldr	r3, [r7, #24]
 80118da:	f003 0320 	and.w	r3, r3, #32
 80118de:	2b00      	cmp	r3, #0
 80118e0:	d10f      	bne.n	8011902 <HAL_SPI_IRQHandler+0xee>
 80118e2:	69bb      	ldr	r3, [r7, #24]
 80118e4:	f003 0302 	and.w	r3, r3, #2
 80118e8:	2b00      	cmp	r3, #0
 80118ea:	d00a      	beq.n	8011902 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80118ec:	69bb      	ldr	r3, [r7, #24]
 80118ee:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	d105      	bne.n	8011902 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80118fa:	6878      	ldr	r0, [r7, #4]
 80118fc:	4798      	blx	r3
    handled = 1UL;
 80118fe:	2301      	movs	r3, #1
 8011900:	627b      	str	r3, [r7, #36]	; 0x24
  }


  if (handled != 0UL)
 8011902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011904:	2b00      	cmp	r3, #0
 8011906:	f040 814f 	bne.w	8011ba8 <HAL_SPI_IRQHandler+0x394>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 801190a:	69bb      	ldr	r3, [r7, #24]
 801190c:	f003 0308 	and.w	r3, r3, #8
 8011910:	2b00      	cmp	r3, #0
 8011912:	f000 808b 	beq.w	8011a2c <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	681b      	ldr	r3, [r3, #0]
 801191a:	699a      	ldr	r2, [r3, #24]
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	681b      	ldr	r3, [r3, #0]
 8011920:	f042 0208 	orr.w	r2, r2, #8
 8011924:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	681b      	ldr	r3, [r3, #0]
 801192a:	699a      	ldr	r2, [r3, #24]
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	681b      	ldr	r3, [r3, #0]
 8011930:	f042 0210 	orr.w	r2, r2, #16
 8011934:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	681b      	ldr	r3, [r3, #0]
 801193a:	699a      	ldr	r2, [r3, #24]
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	681b      	ldr	r3, [r3, #0]
 8011940:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011944:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	681b      	ldr	r3, [r3, #0]
 801194a:	691a      	ldr	r2, [r3, #16]
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	681b      	ldr	r3, [r3, #0]
 8011950:	f022 0208 	bic.w	r2, r2, #8
 8011954:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	681b      	ldr	r3, [r3, #0]
 801195a:	689b      	ldr	r3, [r3, #8]
 801195c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8011960:	2b00      	cmp	r3, #0
 8011962:	d13d      	bne.n	80119e0 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8011964:	e036      	b.n	80119d4 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	68db      	ldr	r3, [r3, #12]
 801196a:	2b0f      	cmp	r3, #15
 801196c:	d90b      	bls.n	8011986 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	681a      	ldr	r2, [r3, #0]
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011976:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8011978:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801197e:	1d1a      	adds	r2, r3, #4
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	66da      	str	r2, [r3, #108]	; 0x6c
 8011984:	e01d      	b.n	80119c2 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	68db      	ldr	r3, [r3, #12]
 801198a:	2b07      	cmp	r3, #7
 801198c:	d90b      	bls.n	80119a6 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011992:	68fa      	ldr	r2, [r7, #12]
 8011994:	8812      	ldrh	r2, [r2, #0]
 8011996:	b292      	uxth	r2, r2
 8011998:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801199e:	1c9a      	adds	r2, r3, #2
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	66da      	str	r2, [r3, #108]	; 0x6c
 80119a4:	e00d      	b.n	80119c2 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	681b      	ldr	r3, [r3, #0]
 80119aa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80119b2:	7812      	ldrb	r2, [r2, #0]
 80119b4:	b2d2      	uxtb	r2, r2
 80119b6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80119bc:	1c5a      	adds	r2, r3, #1
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	66da      	str	r2, [r3, #108]	; 0x6c
        }

        hspi->RxXferCount--;
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 80119c8:	b29b      	uxth	r3, r3
 80119ca:	3b01      	subs	r3, #1
 80119cc:	b29a      	uxth	r2, r3
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
      while (hspi->RxXferCount != 0UL)
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 80119da:	b29b      	uxth	r3, r3
 80119dc:	2b00      	cmp	r3, #0
 80119de:	d1c2      	bne.n	8011966 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 80119e0:	6878      	ldr	r0, [r7, #4]
 80119e2:	f000 f90f 	bl	8011c04 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	2201      	movs	r2, #1
 80119ea:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80119f4:	2b00      	cmp	r3, #0
 80119f6:	d003      	beq.n	8011a00 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80119f8:	6878      	ldr	r0, [r7, #4]
 80119fa:	f7f8 fad9 	bl	8009fb0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80119fe:	e0d8      	b.n	8011bb2 <HAL_SPI_IRQHandler+0x39e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8011a00:	7cfb      	ldrb	r3, [r7, #19]
 8011a02:	2b05      	cmp	r3, #5
 8011a04:	d103      	bne.n	8011a0e <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8011a06:	6878      	ldr	r0, [r7, #4]
 8011a08:	f7f1 fd70 	bl	80034ec <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8011a0c:	e0ce      	b.n	8011bac <HAL_SPI_IRQHandler+0x398>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8011a0e:	7cfb      	ldrb	r3, [r7, #19]
 8011a10:	2b04      	cmp	r3, #4
 8011a12:	d103      	bne.n	8011a1c <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8011a14:	6878      	ldr	r0, [r7, #4]
 8011a16:	f7f1 fd45 	bl	80034a4 <HAL_SPI_RxCpltCallback>
    return;
 8011a1a:	e0c7      	b.n	8011bac <HAL_SPI_IRQHandler+0x398>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8011a1c:	7cfb      	ldrb	r3, [r7, #19]
 8011a1e:	2b03      	cmp	r3, #3
 8011a20:	f040 80c4 	bne.w	8011bac <HAL_SPI_IRQHandler+0x398>
      HAL_SPI_TxCpltCallback(hspi);
 8011a24:	6878      	ldr	r0, [r7, #4]
 8011a26:	f7f1 fd4f 	bl	80034c8 <HAL_SPI_TxCpltCallback>
    return;
 8011a2a:	e0bf      	b.n	8011bac <HAL_SPI_IRQHandler+0x398>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8011a2c:	69bb      	ldr	r3, [r7, #24]
 8011a2e:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8011a32:	2b00      	cmp	r3, #0
 8011a34:	f000 80bd 	beq.w	8011bb2 <HAL_SPI_IRQHandler+0x39e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8011a38:	69bb      	ldr	r3, [r7, #24]
 8011a3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011a3e:	2b00      	cmp	r3, #0
 8011a40:	d00f      	beq.n	8011a62 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011a48:	f043 0204 	orr.w	r2, r3, #4
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	681b      	ldr	r3, [r3, #0]
 8011a56:	699a      	ldr	r2, [r3, #24]
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	681b      	ldr	r3, [r3, #0]
 8011a5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011a60:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8011a62:	69bb      	ldr	r3, [r7, #24]
 8011a64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	d00f      	beq.n	8011a8c <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011a72:	f043 0201 	orr.w	r2, r3, #1
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	681b      	ldr	r3, [r3, #0]
 8011a80:	699a      	ldr	r2, [r3, #24]
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	681b      	ldr	r3, [r3, #0]
 8011a86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011a8a:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8011a8c:	69bb      	ldr	r3, [r7, #24]
 8011a8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011a92:	2b00      	cmp	r3, #0
 8011a94:	d00f      	beq.n	8011ab6 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011a9c:	f043 0208 	orr.w	r2, r3, #8
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	681b      	ldr	r3, [r3, #0]
 8011aaa:	699a      	ldr	r2, [r3, #24]
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	681b      	ldr	r3, [r3, #0]
 8011ab0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8011ab4:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8011ab6:	69bb      	ldr	r3, [r7, #24]
 8011ab8:	f003 0320 	and.w	r3, r3, #32
 8011abc:	2b00      	cmp	r3, #0
 8011abe:	d00f      	beq.n	8011ae0 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011ac6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	681b      	ldr	r3, [r3, #0]
 8011ad4:	699a      	ldr	r2, [r3, #24]
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	681b      	ldr	r3, [r3, #0]
 8011ada:	f042 0220 	orr.w	r2, r2, #32
 8011ade:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	d062      	beq.n	8011bb0 <HAL_SPI_IRQHandler+0x39c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	681b      	ldr	r3, [r3, #0]
 8011aee:	681a      	ldr	r2, [r3, #0]
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	681b      	ldr	r3, [r3, #0]
 8011af4:	f022 0201 	bic.w	r2, r2, #1
 8011af8:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	681b      	ldr	r3, [r3, #0]
 8011afe:	691b      	ldr	r3, [r3, #16]
 8011b00:	687a      	ldr	r2, [r7, #4]
 8011b02:	6812      	ldr	r2, [r2, #0]
 8011b04:	f423 735a 	bic.w	r3, r3, #872	; 0x368
 8011b08:	f023 0303 	bic.w	r3, r3, #3
 8011b0c:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8011b0e:	697b      	ldr	r3, [r7, #20]
 8011b10:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8011b14:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8011b18:	d13e      	bne.n	8011b98 <HAL_SPI_IRQHandler+0x384>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	681b      	ldr	r3, [r3, #0]
 8011b1e:	689a      	ldr	r2, [r3, #8]
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	681b      	ldr	r3, [r3, #0]
 8011b24:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8011b28:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011b30:	2b00      	cmp	r3, #0
 8011b32:	d015      	beq.n	8011b60 <HAL_SPI_IRQHandler+0x34c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011b3a:	4a1f      	ldr	r2, [pc, #124]	; (8011bb8 <HAL_SPI_IRQHandler+0x3a4>)
 8011b3c:	66da      	str	r2, [r3, #108]	; 0x6c
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011b44:	4618      	mov	r0, r3
 8011b46:	f7f8 ff39 	bl	800a9bc <HAL_DMA_Abort_IT>
 8011b4a:	4603      	mov	r3, r0
 8011b4c:	2b00      	cmp	r3, #0
 8011b4e:	d007      	beq.n	8011b60 <HAL_SPI_IRQHandler+0x34c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011b56:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011b66:	2b00      	cmp	r3, #0
 8011b68:	d022      	beq.n	8011bb0 <HAL_SPI_IRQHandler+0x39c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011b70:	4a11      	ldr	r2, [pc, #68]	; (8011bb8 <HAL_SPI_IRQHandler+0x3a4>)
 8011b72:	66da      	str	r2, [r3, #108]	; 0x6c
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011b7a:	4618      	mov	r0, r3
 8011b7c:	f7f8 ff1e 	bl	800a9bc <HAL_DMA_Abort_IT>
 8011b80:	4603      	mov	r3, r0
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	d014      	beq.n	8011bb0 <HAL_SPI_IRQHandler+0x39c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011b8c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8011b96:	e00b      	b.n	8011bb0 <HAL_SPI_IRQHandler+0x39c>
        hspi->State = HAL_SPI_STATE_READY;
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	2201      	movs	r2, #1
 8011b9c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        HAL_SPI_ErrorCallback(hspi);
 8011ba0:	6878      	ldr	r0, [r7, #4]
 8011ba2:	f7f8 fa05 	bl	8009fb0 <HAL_SPI_ErrorCallback>
    return;
 8011ba6:	e003      	b.n	8011bb0 <HAL_SPI_IRQHandler+0x39c>
    return;
 8011ba8:	bf00      	nop
 8011baa:	e002      	b.n	8011bb2 <HAL_SPI_IRQHandler+0x39e>
    return;
 8011bac:	bf00      	nop
 8011bae:	e000      	b.n	8011bb2 <HAL_SPI_IRQHandler+0x39e>
    return;
 8011bb0:	bf00      	nop
  }
}
 8011bb2:	3728      	adds	r7, #40	; 0x28
 8011bb4:	46bd      	mov	sp, r7
 8011bb6:	bd80      	pop	{r7, pc}
 8011bb8:	08011bd1 	.word	0x08011bd1

08011bbc <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8011bbc:	b480      	push	{r7}
 8011bbe:	b083      	sub	sp, #12
 8011bc0:	af00      	add	r7, sp, #0
 8011bc2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8011bc4:	bf00      	nop
 8011bc6:	370c      	adds	r7, #12
 8011bc8:	46bd      	mov	sp, r7
 8011bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bce:	4770      	bx	lr

08011bd0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8011bd0:	b580      	push	{r7, lr}
 8011bd2:	b084      	sub	sp, #16
 8011bd4:	af00      	add	r7, sp, #0
 8011bd6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011bdc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8011bde:	68fb      	ldr	r3, [r7, #12]
 8011be0:	2200      	movs	r2, #0
 8011be2:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
  hspi->TxXferCount = (uint16_t) 0UL;
 8011be6:	68fb      	ldr	r3, [r7, #12]
 8011be8:	2200      	movs	r2, #0
 8011bea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8011bee:	68fb      	ldr	r3, [r7, #12]
 8011bf0:	2201      	movs	r2, #1
 8011bf2:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8011bf6:	68f8      	ldr	r0, [r7, #12]
 8011bf8:	f7f8 f9da 	bl	8009fb0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8011bfc:	bf00      	nop
 8011bfe:	3710      	adds	r7, #16
 8011c00:	46bd      	mov	sp, r7
 8011c02:	bd80      	pop	{r7, pc}

08011c04 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8011c04:	b480      	push	{r7}
 8011c06:	b085      	sub	sp, #20
 8011c08:	af00      	add	r7, sp, #0
 8011c0a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	681b      	ldr	r3, [r3, #0]
 8011c10:	695b      	ldr	r3, [r3, #20]
 8011c12:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	681b      	ldr	r3, [r3, #0]
 8011c18:	699a      	ldr	r2, [r3, #24]
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	681b      	ldr	r3, [r3, #0]
 8011c1e:	f042 0208 	orr.w	r2, r2, #8
 8011c22:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	681b      	ldr	r3, [r3, #0]
 8011c28:	699a      	ldr	r2, [r3, #24]
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	681b      	ldr	r3, [r3, #0]
 8011c2e:	f042 0210 	orr.w	r2, r2, #16
 8011c32:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	681b      	ldr	r3, [r3, #0]
 8011c38:	681a      	ldr	r2, [r3, #0]
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	681b      	ldr	r3, [r3, #0]
 8011c3e:	f022 0201 	bic.w	r2, r2, #1
 8011c42:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	681b      	ldr	r3, [r3, #0]
 8011c48:	691b      	ldr	r3, [r3, #16]
 8011c4a:	687a      	ldr	r2, [r7, #4]
 8011c4c:	6812      	ldr	r2, [r2, #0]
 8011c4e:	f423 735b 	bic.w	r3, r3, #876	; 0x36c
 8011c52:	f023 0303 	bic.w	r3, r3, #3
 8011c56:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	681b      	ldr	r3, [r3, #0]
 8011c5c:	689a      	ldr	r2, [r3, #8]
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	681b      	ldr	r3, [r3, #0]
 8011c62:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8011c66:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8011c6e:	b2db      	uxtb	r3, r3
 8011c70:	2b04      	cmp	r3, #4
 8011c72:	d014      	beq.n	8011c9e <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8011c74:	68fb      	ldr	r3, [r7, #12]
 8011c76:	f003 0320 	and.w	r3, r3, #32
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	d00f      	beq.n	8011c9e <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011c84:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	681b      	ldr	r3, [r3, #0]
 8011c92:	699a      	ldr	r2, [r3, #24]
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	681b      	ldr	r3, [r3, #0]
 8011c98:	f042 0220 	orr.w	r2, r2, #32
 8011c9c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8011ca4:	b2db      	uxtb	r3, r3
 8011ca6:	2b03      	cmp	r3, #3
 8011ca8:	d014      	beq.n	8011cd4 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8011caa:	68fb      	ldr	r3, [r7, #12]
 8011cac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011cb0:	2b00      	cmp	r3, #0
 8011cb2:	d00f      	beq.n	8011cd4 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011cba:	f043 0204 	orr.w	r2, r3, #4
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	681b      	ldr	r3, [r3, #0]
 8011cc8:	699a      	ldr	r2, [r3, #24]
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	681b      	ldr	r3, [r3, #0]
 8011cce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011cd2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8011cd4:	68fb      	ldr	r3, [r7, #12]
 8011cd6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	d00f      	beq.n	8011cfe <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011ce4:	f043 0201 	orr.w	r2, r3, #1
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	681b      	ldr	r3, [r3, #0]
 8011cf2:	699a      	ldr	r2, [r3, #24]
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	681b      	ldr	r3, [r3, #0]
 8011cf8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011cfc:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8011cfe:	68fb      	ldr	r3, [r7, #12]
 8011d00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	d00f      	beq.n	8011d28 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011d0e:	f043 0208 	orr.w	r2, r3, #8
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	681b      	ldr	r3, [r3, #0]
 8011d1c:	699a      	ldr	r2, [r3, #24]
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	681b      	ldr	r3, [r3, #0]
 8011d22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8011d26:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	2200      	movs	r2, #0
 8011d2c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	2200      	movs	r2, #0
 8011d34:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
}
 8011d38:	bf00      	nop
 8011d3a:	3714      	adds	r7, #20
 8011d3c:	46bd      	mov	sp, r7
 8011d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d42:	4770      	bx	lr

08011d44 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8011d44:	b580      	push	{r7, lr}
 8011d46:	b084      	sub	sp, #16
 8011d48:	af00      	add	r7, sp, #0
 8011d4a:	60f8      	str	r0, [r7, #12]
 8011d4c:	60b9      	str	r1, [r7, #8]
 8011d4e:	603b      	str	r3, [r7, #0]
 8011d50:	4613      	mov	r3, r2
 8011d52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8011d54:	e010      	b.n	8011d78 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011d56:	f7f8 fc99 	bl	800a68c <HAL_GetTick>
 8011d5a:	4602      	mov	r2, r0
 8011d5c:	69bb      	ldr	r3, [r7, #24]
 8011d5e:	1ad3      	subs	r3, r2, r3
 8011d60:	683a      	ldr	r2, [r7, #0]
 8011d62:	429a      	cmp	r2, r3
 8011d64:	d803      	bhi.n	8011d6e <SPI_WaitOnFlagUntilTimeout+0x2a>
 8011d66:	683b      	ldr	r3, [r7, #0]
 8011d68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011d6c:	d102      	bne.n	8011d74 <SPI_WaitOnFlagUntilTimeout+0x30>
 8011d6e:	683b      	ldr	r3, [r7, #0]
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	d101      	bne.n	8011d78 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8011d74:	2303      	movs	r3, #3
 8011d76:	e00f      	b.n	8011d98 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8011d78:	68fb      	ldr	r3, [r7, #12]
 8011d7a:	681b      	ldr	r3, [r3, #0]
 8011d7c:	695a      	ldr	r2, [r3, #20]
 8011d7e:	68bb      	ldr	r3, [r7, #8]
 8011d80:	4013      	ands	r3, r2
 8011d82:	68ba      	ldr	r2, [r7, #8]
 8011d84:	429a      	cmp	r2, r3
 8011d86:	bf0c      	ite	eq
 8011d88:	2301      	moveq	r3, #1
 8011d8a:	2300      	movne	r3, #0
 8011d8c:	b2db      	uxtb	r3, r3
 8011d8e:	461a      	mov	r2, r3
 8011d90:	79fb      	ldrb	r3, [r7, #7]
 8011d92:	429a      	cmp	r2, r3
 8011d94:	d0df      	beq.n	8011d56 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8011d96:	2300      	movs	r3, #0
}
 8011d98:	4618      	mov	r0, r3
 8011d9a:	3710      	adds	r7, #16
 8011d9c:	46bd      	mov	sp, r7
 8011d9e:	bd80      	pop	{r7, pc}

08011da0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8011da0:	b480      	push	{r7}
 8011da2:	b085      	sub	sp, #20
 8011da4:	af00      	add	r7, sp, #0
 8011da6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011dac:	095b      	lsrs	r3, r3, #5
 8011dae:	3301      	adds	r3, #1
 8011db0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8011db2:	687b      	ldr	r3, [r7, #4]
 8011db4:	68db      	ldr	r3, [r3, #12]
 8011db6:	3301      	adds	r3, #1
 8011db8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8011dba:	68bb      	ldr	r3, [r7, #8]
 8011dbc:	3307      	adds	r3, #7
 8011dbe:	08db      	lsrs	r3, r3, #3
 8011dc0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8011dc2:	68bb      	ldr	r3, [r7, #8]
 8011dc4:	68fa      	ldr	r2, [r7, #12]
 8011dc6:	fb02 f303 	mul.w	r3, r2, r3
}
 8011dca:	4618      	mov	r0, r3
 8011dcc:	3714      	adds	r7, #20
 8011dce:	46bd      	mov	sp, r7
 8011dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dd4:	4770      	bx	lr

08011dd6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8011dd6:	b580      	push	{r7, lr}
 8011dd8:	b082      	sub	sp, #8
 8011dda:	af00      	add	r7, sp, #0
 8011ddc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	2b00      	cmp	r3, #0
 8011de2:	d101      	bne.n	8011de8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8011de4:	2301      	movs	r3, #1
 8011de6:	e042      	b.n	8011e6e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011dee:	2b00      	cmp	r3, #0
 8011df0:	d106      	bne.n	8011e00 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	2200      	movs	r2, #0
 8011df6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8011dfa:	6878      	ldr	r0, [r7, #4]
 8011dfc:	f7ef fac4 	bl	8001388 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	2224      	movs	r2, #36	; 0x24
 8011e04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	681b      	ldr	r3, [r3, #0]
 8011e0c:	681a      	ldr	r2, [r3, #0]
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	681b      	ldr	r3, [r3, #0]
 8011e12:	f022 0201 	bic.w	r2, r2, #1
 8011e16:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	d002      	beq.n	8011e26 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8011e20:	6878      	ldr	r0, [r7, #4]
 8011e22:	f000 fb3f 	bl	80124a4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8011e26:	6878      	ldr	r0, [r7, #4]
 8011e28:	f000 f99a 	bl	8012160 <UART_SetConfig>
 8011e2c:	4603      	mov	r3, r0
 8011e2e:	2b01      	cmp	r3, #1
 8011e30:	d101      	bne.n	8011e36 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8011e32:	2301      	movs	r3, #1
 8011e34:	e01b      	b.n	8011e6e <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	681b      	ldr	r3, [r3, #0]
 8011e3a:	685a      	ldr	r2, [r3, #4]
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	681b      	ldr	r3, [r3, #0]
 8011e40:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8011e44:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	681b      	ldr	r3, [r3, #0]
 8011e4a:	689a      	ldr	r2, [r3, #8]
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	681b      	ldr	r3, [r3, #0]
 8011e50:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8011e54:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	681b      	ldr	r3, [r3, #0]
 8011e5a:	681a      	ldr	r2, [r3, #0]
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	681b      	ldr	r3, [r3, #0]
 8011e60:	f042 0201 	orr.w	r2, r2, #1
 8011e64:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8011e66:	6878      	ldr	r0, [r7, #4]
 8011e68:	f000 fbbe 	bl	80125e8 <UART_CheckIdleState>
 8011e6c:	4603      	mov	r3, r0
}
 8011e6e:	4618      	mov	r0, r3
 8011e70:	3708      	adds	r7, #8
 8011e72:	46bd      	mov	sp, r7
 8011e74:	bd80      	pop	{r7, pc}

08011e76 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011e76:	b580      	push	{r7, lr}
 8011e78:	b08a      	sub	sp, #40	; 0x28
 8011e7a:	af02      	add	r7, sp, #8
 8011e7c:	60f8      	str	r0, [r7, #12]
 8011e7e:	60b9      	str	r1, [r7, #8]
 8011e80:	603b      	str	r3, [r7, #0]
 8011e82:	4613      	mov	r3, r2
 8011e84:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8011e86:	68fb      	ldr	r3, [r7, #12]
 8011e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011e8c:	2b20      	cmp	r3, #32
 8011e8e:	f040 808b 	bne.w	8011fa8 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8011e92:	68bb      	ldr	r3, [r7, #8]
 8011e94:	2b00      	cmp	r3, #0
 8011e96:	d002      	beq.n	8011e9e <HAL_UART_Transmit+0x28>
 8011e98:	88fb      	ldrh	r3, [r7, #6]
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	d101      	bne.n	8011ea2 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8011e9e:	2301      	movs	r3, #1
 8011ea0:	e083      	b.n	8011faa <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8011ea2:	68fb      	ldr	r3, [r7, #12]
 8011ea4:	681b      	ldr	r3, [r3, #0]
 8011ea6:	689b      	ldr	r3, [r3, #8]
 8011ea8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011eac:	2b80      	cmp	r3, #128	; 0x80
 8011eae:	d107      	bne.n	8011ec0 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8011eb0:	68fb      	ldr	r3, [r7, #12]
 8011eb2:	681b      	ldr	r3, [r3, #0]
 8011eb4:	689a      	ldr	r2, [r3, #8]
 8011eb6:	68fb      	ldr	r3, [r7, #12]
 8011eb8:	681b      	ldr	r3, [r3, #0]
 8011eba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8011ebe:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011ec0:	68fb      	ldr	r3, [r7, #12]
 8011ec2:	2200      	movs	r2, #0
 8011ec4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8011ec8:	68fb      	ldr	r3, [r7, #12]
 8011eca:	2221      	movs	r2, #33	; 0x21
 8011ecc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8011ed0:	f7f8 fbdc 	bl	800a68c <HAL_GetTick>
 8011ed4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8011ed6:	68fb      	ldr	r3, [r7, #12]
 8011ed8:	88fa      	ldrh	r2, [r7, #6]
 8011eda:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8011ede:	68fb      	ldr	r3, [r7, #12]
 8011ee0:	88fa      	ldrh	r2, [r7, #6]
 8011ee2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011ee6:	68fb      	ldr	r3, [r7, #12]
 8011ee8:	689b      	ldr	r3, [r3, #8]
 8011eea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011eee:	d108      	bne.n	8011f02 <HAL_UART_Transmit+0x8c>
 8011ef0:	68fb      	ldr	r3, [r7, #12]
 8011ef2:	691b      	ldr	r3, [r3, #16]
 8011ef4:	2b00      	cmp	r3, #0
 8011ef6:	d104      	bne.n	8011f02 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 8011ef8:	2300      	movs	r3, #0
 8011efa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8011efc:	68bb      	ldr	r3, [r7, #8]
 8011efe:	61bb      	str	r3, [r7, #24]
 8011f00:	e003      	b.n	8011f0a <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 8011f02:	68bb      	ldr	r3, [r7, #8]
 8011f04:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8011f06:	2300      	movs	r3, #0
 8011f08:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8011f0a:	e030      	b.n	8011f6e <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8011f0c:	683b      	ldr	r3, [r7, #0]
 8011f0e:	9300      	str	r3, [sp, #0]
 8011f10:	697b      	ldr	r3, [r7, #20]
 8011f12:	2200      	movs	r2, #0
 8011f14:	2180      	movs	r1, #128	; 0x80
 8011f16:	68f8      	ldr	r0, [r7, #12]
 8011f18:	f000 fc10 	bl	801273c <UART_WaitOnFlagUntilTimeout>
 8011f1c:	4603      	mov	r3, r0
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	d005      	beq.n	8011f2e <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 8011f22:	68fb      	ldr	r3, [r7, #12]
 8011f24:	2220      	movs	r2, #32
 8011f26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8011f2a:	2303      	movs	r3, #3
 8011f2c:	e03d      	b.n	8011faa <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 8011f2e:	69fb      	ldr	r3, [r7, #28]
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	d10b      	bne.n	8011f4c <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8011f34:	69bb      	ldr	r3, [r7, #24]
 8011f36:	881b      	ldrh	r3, [r3, #0]
 8011f38:	461a      	mov	r2, r3
 8011f3a:	68fb      	ldr	r3, [r7, #12]
 8011f3c:	681b      	ldr	r3, [r3, #0]
 8011f3e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8011f42:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8011f44:	69bb      	ldr	r3, [r7, #24]
 8011f46:	3302      	adds	r3, #2
 8011f48:	61bb      	str	r3, [r7, #24]
 8011f4a:	e007      	b.n	8011f5c <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8011f4c:	69fb      	ldr	r3, [r7, #28]
 8011f4e:	781a      	ldrb	r2, [r3, #0]
 8011f50:	68fb      	ldr	r3, [r7, #12]
 8011f52:	681b      	ldr	r3, [r3, #0]
 8011f54:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8011f56:	69fb      	ldr	r3, [r7, #28]
 8011f58:	3301      	adds	r3, #1
 8011f5a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8011f5c:	68fb      	ldr	r3, [r7, #12]
 8011f5e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8011f62:	b29b      	uxth	r3, r3
 8011f64:	3b01      	subs	r3, #1
 8011f66:	b29a      	uxth	r2, r3
 8011f68:	68fb      	ldr	r3, [r7, #12]
 8011f6a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8011f6e:	68fb      	ldr	r3, [r7, #12]
 8011f70:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8011f74:	b29b      	uxth	r3, r3
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	d1c8      	bne.n	8011f0c <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8011f7a:	683b      	ldr	r3, [r7, #0]
 8011f7c:	9300      	str	r3, [sp, #0]
 8011f7e:	697b      	ldr	r3, [r7, #20]
 8011f80:	2200      	movs	r2, #0
 8011f82:	2140      	movs	r1, #64	; 0x40
 8011f84:	68f8      	ldr	r0, [r7, #12]
 8011f86:	f000 fbd9 	bl	801273c <UART_WaitOnFlagUntilTimeout>
 8011f8a:	4603      	mov	r3, r0
 8011f8c:	2b00      	cmp	r3, #0
 8011f8e:	d005      	beq.n	8011f9c <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 8011f90:	68fb      	ldr	r3, [r7, #12]
 8011f92:	2220      	movs	r2, #32
 8011f94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8011f98:	2303      	movs	r3, #3
 8011f9a:	e006      	b.n	8011faa <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8011f9c:	68fb      	ldr	r3, [r7, #12]
 8011f9e:	2220      	movs	r2, #32
 8011fa0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8011fa4:	2300      	movs	r3, #0
 8011fa6:	e000      	b.n	8011faa <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 8011fa8:	2302      	movs	r3, #2
  }
}
 8011faa:	4618      	mov	r0, r3
 8011fac:	3720      	adds	r7, #32
 8011fae:	46bd      	mov	sp, r7
 8011fb0:	bd80      	pop	{r7, pc}

08011fb2 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011fb2:	b580      	push	{r7, lr}
 8011fb4:	b08a      	sub	sp, #40	; 0x28
 8011fb6:	af02      	add	r7, sp, #8
 8011fb8:	60f8      	str	r0, [r7, #12]
 8011fba:	60b9      	str	r1, [r7, #8]
 8011fbc:	603b      	str	r3, [r7, #0]
 8011fbe:	4613      	mov	r3, r2
 8011fc0:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8011fc2:	68fb      	ldr	r3, [r7, #12]
 8011fc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011fc8:	2b20      	cmp	r3, #32
 8011fca:	f040 80c4 	bne.w	8012156 <HAL_UART_Receive+0x1a4>
  {
    if ((pData == NULL) || (Size == 0U))
 8011fce:	68bb      	ldr	r3, [r7, #8]
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	d002      	beq.n	8011fda <HAL_UART_Receive+0x28>
 8011fd4:	88fb      	ldrh	r3, [r7, #6]
 8011fd6:	2b00      	cmp	r3, #0
 8011fd8:	d101      	bne.n	8011fde <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8011fda:	2301      	movs	r3, #1
 8011fdc:	e0bc      	b.n	8012158 <HAL_UART_Receive+0x1a6>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Rx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011fde:	68fb      	ldr	r3, [r7, #12]
 8011fe0:	681b      	ldr	r3, [r3, #0]
 8011fe2:	689b      	ldr	r3, [r3, #8]
 8011fe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011fe8:	2b40      	cmp	r3, #64	; 0x40
 8011fea:	d107      	bne.n	8011ffc <HAL_UART_Receive+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011fec:	68fb      	ldr	r3, [r7, #12]
 8011fee:	681b      	ldr	r3, [r3, #0]
 8011ff0:	689a      	ldr	r2, [r3, #8]
 8011ff2:	68fb      	ldr	r3, [r7, #12]
 8011ff4:	681b      	ldr	r3, [r3, #0]
 8011ff6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011ffa:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011ffc:	68fb      	ldr	r3, [r7, #12]
 8011ffe:	2200      	movs	r2, #0
 8012000:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8012004:	68fb      	ldr	r3, [r7, #12]
 8012006:	2222      	movs	r2, #34	; 0x22
 8012008:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801200c:	68fb      	ldr	r3, [r7, #12]
 801200e:	2200      	movs	r2, #0
 8012010:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8012012:	f7f8 fb3b 	bl	800a68c <HAL_GetTick>
 8012016:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8012018:	68fb      	ldr	r3, [r7, #12]
 801201a:	88fa      	ldrh	r2, [r7, #6]
 801201c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8012020:	68fb      	ldr	r3, [r7, #12]
 8012022:	88fa      	ldrh	r2, [r7, #6]
 8012024:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8012028:	68fb      	ldr	r3, [r7, #12]
 801202a:	689b      	ldr	r3, [r3, #8]
 801202c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012030:	d10e      	bne.n	8012050 <HAL_UART_Receive+0x9e>
 8012032:	68fb      	ldr	r3, [r7, #12]
 8012034:	691b      	ldr	r3, [r3, #16]
 8012036:	2b00      	cmp	r3, #0
 8012038:	d105      	bne.n	8012046 <HAL_UART_Receive+0x94>
 801203a:	68fb      	ldr	r3, [r7, #12]
 801203c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8012040:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8012044:	e02d      	b.n	80120a2 <HAL_UART_Receive+0xf0>
 8012046:	68fb      	ldr	r3, [r7, #12]
 8012048:	22ff      	movs	r2, #255	; 0xff
 801204a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801204e:	e028      	b.n	80120a2 <HAL_UART_Receive+0xf0>
 8012050:	68fb      	ldr	r3, [r7, #12]
 8012052:	689b      	ldr	r3, [r3, #8]
 8012054:	2b00      	cmp	r3, #0
 8012056:	d10d      	bne.n	8012074 <HAL_UART_Receive+0xc2>
 8012058:	68fb      	ldr	r3, [r7, #12]
 801205a:	691b      	ldr	r3, [r3, #16]
 801205c:	2b00      	cmp	r3, #0
 801205e:	d104      	bne.n	801206a <HAL_UART_Receive+0xb8>
 8012060:	68fb      	ldr	r3, [r7, #12]
 8012062:	22ff      	movs	r2, #255	; 0xff
 8012064:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8012068:	e01b      	b.n	80120a2 <HAL_UART_Receive+0xf0>
 801206a:	68fb      	ldr	r3, [r7, #12]
 801206c:	227f      	movs	r2, #127	; 0x7f
 801206e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8012072:	e016      	b.n	80120a2 <HAL_UART_Receive+0xf0>
 8012074:	68fb      	ldr	r3, [r7, #12]
 8012076:	689b      	ldr	r3, [r3, #8]
 8012078:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801207c:	d10d      	bne.n	801209a <HAL_UART_Receive+0xe8>
 801207e:	68fb      	ldr	r3, [r7, #12]
 8012080:	691b      	ldr	r3, [r3, #16]
 8012082:	2b00      	cmp	r3, #0
 8012084:	d104      	bne.n	8012090 <HAL_UART_Receive+0xde>
 8012086:	68fb      	ldr	r3, [r7, #12]
 8012088:	227f      	movs	r2, #127	; 0x7f
 801208a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801208e:	e008      	b.n	80120a2 <HAL_UART_Receive+0xf0>
 8012090:	68fb      	ldr	r3, [r7, #12]
 8012092:	223f      	movs	r2, #63	; 0x3f
 8012094:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8012098:	e003      	b.n	80120a2 <HAL_UART_Receive+0xf0>
 801209a:	68fb      	ldr	r3, [r7, #12]
 801209c:	2200      	movs	r2, #0
 801209e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 80120a2:	68fb      	ldr	r3, [r7, #12]
 80120a4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80120a8:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80120aa:	68fb      	ldr	r3, [r7, #12]
 80120ac:	689b      	ldr	r3, [r3, #8]
 80120ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80120b2:	d108      	bne.n	80120c6 <HAL_UART_Receive+0x114>
 80120b4:	68fb      	ldr	r3, [r7, #12]
 80120b6:	691b      	ldr	r3, [r3, #16]
 80120b8:	2b00      	cmp	r3, #0
 80120ba:	d104      	bne.n	80120c6 <HAL_UART_Receive+0x114>
    {
      pdata8bits  = NULL;
 80120bc:	2300      	movs	r3, #0
 80120be:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80120c0:	68bb      	ldr	r3, [r7, #8]
 80120c2:	61bb      	str	r3, [r7, #24]
 80120c4:	e003      	b.n	80120ce <HAL_UART_Receive+0x11c>
    }
    else
    {
      pdata8bits  = pData;
 80120c6:	68bb      	ldr	r3, [r7, #8]
 80120c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80120ca:	2300      	movs	r3, #0
 80120cc:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80120ce:	e036      	b.n	801213e <HAL_UART_Receive+0x18c>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80120d0:	683b      	ldr	r3, [r7, #0]
 80120d2:	9300      	str	r3, [sp, #0]
 80120d4:	697b      	ldr	r3, [r7, #20]
 80120d6:	2200      	movs	r2, #0
 80120d8:	2120      	movs	r1, #32
 80120da:	68f8      	ldr	r0, [r7, #12]
 80120dc:	f000 fb2e 	bl	801273c <UART_WaitOnFlagUntilTimeout>
 80120e0:	4603      	mov	r3, r0
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	d005      	beq.n	80120f2 <HAL_UART_Receive+0x140>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80120e6:	68fb      	ldr	r3, [r7, #12]
 80120e8:	2220      	movs	r2, #32
 80120ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 80120ee:	2303      	movs	r3, #3
 80120f0:	e032      	b.n	8012158 <HAL_UART_Receive+0x1a6>
      }
      if (pdata8bits == NULL)
 80120f2:	69fb      	ldr	r3, [r7, #28]
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	d10c      	bne.n	8012112 <HAL_UART_Receive+0x160>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80120f8:	68fb      	ldr	r3, [r7, #12]
 80120fa:	681b      	ldr	r3, [r3, #0]
 80120fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80120fe:	b29a      	uxth	r2, r3
 8012100:	8a7b      	ldrh	r3, [r7, #18]
 8012102:	4013      	ands	r3, r2
 8012104:	b29a      	uxth	r2, r3
 8012106:	69bb      	ldr	r3, [r7, #24]
 8012108:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 801210a:	69bb      	ldr	r3, [r7, #24]
 801210c:	3302      	adds	r3, #2
 801210e:	61bb      	str	r3, [r7, #24]
 8012110:	e00c      	b.n	801212c <HAL_UART_Receive+0x17a>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8012112:	68fb      	ldr	r3, [r7, #12]
 8012114:	681b      	ldr	r3, [r3, #0]
 8012116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012118:	b2da      	uxtb	r2, r3
 801211a:	8a7b      	ldrh	r3, [r7, #18]
 801211c:	b2db      	uxtb	r3, r3
 801211e:	4013      	ands	r3, r2
 8012120:	b2da      	uxtb	r2, r3
 8012122:	69fb      	ldr	r3, [r7, #28]
 8012124:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8012126:	69fb      	ldr	r3, [r7, #28]
 8012128:	3301      	adds	r3, #1
 801212a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 801212c:	68fb      	ldr	r3, [r7, #12]
 801212e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012132:	b29b      	uxth	r3, r3
 8012134:	3b01      	subs	r3, #1
 8012136:	b29a      	uxth	r2, r3
 8012138:	68fb      	ldr	r3, [r7, #12]
 801213a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 801213e:	68fb      	ldr	r3, [r7, #12]
 8012140:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012144:	b29b      	uxth	r3, r3
 8012146:	2b00      	cmp	r3, #0
 8012148:	d1c2      	bne.n	80120d0 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801214a:	68fb      	ldr	r3, [r7, #12]
 801214c:	2220      	movs	r2, #32
 801214e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 8012152:	2300      	movs	r3, #0
 8012154:	e000      	b.n	8012158 <HAL_UART_Receive+0x1a6>
  }
  else
  {
    return HAL_BUSY;
 8012156:	2302      	movs	r3, #2
  }
}
 8012158:	4618      	mov	r0, r3
 801215a:	3720      	adds	r7, #32
 801215c:	46bd      	mov	sp, r7
 801215e:	bd80      	pop	{r7, pc}

08012160 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8012160:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8012164:	b094      	sub	sp, #80	; 0x50
 8012166:	af00      	add	r7, sp, #0
 8012168:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801216a:	2300      	movs	r3, #0
 801216c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8012170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012172:	681a      	ldr	r2, [r3, #0]
 8012174:	4b7e      	ldr	r3, [pc, #504]	; (8012370 <UART_SetConfig+0x210>)
 8012176:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8012178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801217a:	689a      	ldr	r2, [r3, #8]
 801217c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801217e:	691b      	ldr	r3, [r3, #16]
 8012180:	431a      	orrs	r2, r3
 8012182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012184:	695b      	ldr	r3, [r3, #20]
 8012186:	431a      	orrs	r2, r3
 8012188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801218a:	69db      	ldr	r3, [r3, #28]
 801218c:	4313      	orrs	r3, r2
 801218e:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8012190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012192:	681b      	ldr	r3, [r3, #0]
 8012194:	681b      	ldr	r3, [r3, #0]
 8012196:	4977      	ldr	r1, [pc, #476]	; (8012374 <UART_SetConfig+0x214>)
 8012198:	4019      	ands	r1, r3
 801219a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801219c:	681a      	ldr	r2, [r3, #0]
 801219e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80121a0:	430b      	orrs	r3, r1
 80121a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80121a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121a6:	681b      	ldr	r3, [r3, #0]
 80121a8:	685b      	ldr	r3, [r3, #4]
 80121aa:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80121ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121b0:	68d9      	ldr	r1, [r3, #12]
 80121b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121b4:	681a      	ldr	r2, [r3, #0]
 80121b6:	ea40 0301 	orr.w	r3, r0, r1
 80121ba:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80121bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121be:	699b      	ldr	r3, [r3, #24]
 80121c0:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80121c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121c4:	681a      	ldr	r2, [r3, #0]
 80121c6:	4b6a      	ldr	r3, [pc, #424]	; (8012370 <UART_SetConfig+0x210>)
 80121c8:	429a      	cmp	r2, r3
 80121ca:	d009      	beq.n	80121e0 <UART_SetConfig+0x80>
 80121cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121ce:	681a      	ldr	r2, [r3, #0]
 80121d0:	4b69      	ldr	r3, [pc, #420]	; (8012378 <UART_SetConfig+0x218>)
 80121d2:	429a      	cmp	r2, r3
 80121d4:	d004      	beq.n	80121e0 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80121d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121d8:	6a1a      	ldr	r2, [r3, #32]
 80121da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80121dc:	4313      	orrs	r3, r2
 80121de:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80121e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121e2:	681b      	ldr	r3, [r3, #0]
 80121e4:	689b      	ldr	r3, [r3, #8]
 80121e6:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 80121ea:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 80121ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121f0:	681a      	ldr	r2, [r3, #0]
 80121f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80121f4:	430b      	orrs	r3, r1
 80121f6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80121f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121fa:	681b      	ldr	r3, [r3, #0]
 80121fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80121fe:	f023 000f 	bic.w	r0, r3, #15
 8012202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012204:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8012206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012208:	681a      	ldr	r2, [r3, #0]
 801220a:	ea40 0301 	orr.w	r3, r0, r1
 801220e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012212:	681a      	ldr	r2, [r3, #0]
 8012214:	4b59      	ldr	r3, [pc, #356]	; (801237c <UART_SetConfig+0x21c>)
 8012216:	429a      	cmp	r2, r3
 8012218:	d102      	bne.n	8012220 <UART_SetConfig+0xc0>
 801221a:	2301      	movs	r3, #1
 801221c:	64bb      	str	r3, [r7, #72]	; 0x48
 801221e:	e029      	b.n	8012274 <UART_SetConfig+0x114>
 8012220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012222:	681a      	ldr	r2, [r3, #0]
 8012224:	4b56      	ldr	r3, [pc, #344]	; (8012380 <UART_SetConfig+0x220>)
 8012226:	429a      	cmp	r2, r3
 8012228:	d102      	bne.n	8012230 <UART_SetConfig+0xd0>
 801222a:	2302      	movs	r3, #2
 801222c:	64bb      	str	r3, [r7, #72]	; 0x48
 801222e:	e021      	b.n	8012274 <UART_SetConfig+0x114>
 8012230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012232:	681a      	ldr	r2, [r3, #0]
 8012234:	4b53      	ldr	r3, [pc, #332]	; (8012384 <UART_SetConfig+0x224>)
 8012236:	429a      	cmp	r2, r3
 8012238:	d102      	bne.n	8012240 <UART_SetConfig+0xe0>
 801223a:	2304      	movs	r3, #4
 801223c:	64bb      	str	r3, [r7, #72]	; 0x48
 801223e:	e019      	b.n	8012274 <UART_SetConfig+0x114>
 8012240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012242:	681a      	ldr	r2, [r3, #0]
 8012244:	4b50      	ldr	r3, [pc, #320]	; (8012388 <UART_SetConfig+0x228>)
 8012246:	429a      	cmp	r2, r3
 8012248:	d102      	bne.n	8012250 <UART_SetConfig+0xf0>
 801224a:	2308      	movs	r3, #8
 801224c:	64bb      	str	r3, [r7, #72]	; 0x48
 801224e:	e011      	b.n	8012274 <UART_SetConfig+0x114>
 8012250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012252:	681a      	ldr	r2, [r3, #0]
 8012254:	4b4d      	ldr	r3, [pc, #308]	; (801238c <UART_SetConfig+0x22c>)
 8012256:	429a      	cmp	r2, r3
 8012258:	d102      	bne.n	8012260 <UART_SetConfig+0x100>
 801225a:	2310      	movs	r3, #16
 801225c:	64bb      	str	r3, [r7, #72]	; 0x48
 801225e:	e009      	b.n	8012274 <UART_SetConfig+0x114>
 8012260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012262:	681a      	ldr	r2, [r3, #0]
 8012264:	4b42      	ldr	r3, [pc, #264]	; (8012370 <UART_SetConfig+0x210>)
 8012266:	429a      	cmp	r2, r3
 8012268:	d102      	bne.n	8012270 <UART_SetConfig+0x110>
 801226a:	2320      	movs	r3, #32
 801226c:	64bb      	str	r3, [r7, #72]	; 0x48
 801226e:	e001      	b.n	8012274 <UART_SetConfig+0x114>
 8012270:	2300      	movs	r3, #0
 8012272:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8012274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012276:	681a      	ldr	r2, [r3, #0]
 8012278:	4b3d      	ldr	r3, [pc, #244]	; (8012370 <UART_SetConfig+0x210>)
 801227a:	429a      	cmp	r2, r3
 801227c:	d005      	beq.n	801228a <UART_SetConfig+0x12a>
 801227e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012280:	681a      	ldr	r2, [r3, #0]
 8012282:	4b3d      	ldr	r3, [pc, #244]	; (8012378 <UART_SetConfig+0x218>)
 8012284:	429a      	cmp	r2, r3
 8012286:	f040 8085 	bne.w	8012394 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 801228a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801228c:	2200      	movs	r2, #0
 801228e:	623b      	str	r3, [r7, #32]
 8012290:	627a      	str	r2, [r7, #36]	; 0x24
 8012292:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8012296:	f7fd f889 	bl	800f3ac <HAL_RCCEx_GetPeriphCLKFreq>
 801229a:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 801229c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801229e:	2b00      	cmp	r3, #0
 80122a0:	f000 80e8 	beq.w	8012474 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80122a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80122a8:	4a39      	ldr	r2, [pc, #228]	; (8012390 <UART_SetConfig+0x230>)
 80122aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80122ae:	461a      	mov	r2, r3
 80122b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80122b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80122b6:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80122b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122ba:	685a      	ldr	r2, [r3, #4]
 80122bc:	4613      	mov	r3, r2
 80122be:	005b      	lsls	r3, r3, #1
 80122c0:	4413      	add	r3, r2
 80122c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80122c4:	429a      	cmp	r2, r3
 80122c6:	d305      	bcc.n	80122d4 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80122c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122ca:	685b      	ldr	r3, [r3, #4]
 80122cc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80122ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80122d0:	429a      	cmp	r2, r3
 80122d2:	d903      	bls.n	80122dc <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 80122d4:	2301      	movs	r3, #1
 80122d6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80122da:	e048      	b.n	801236e <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80122dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80122de:	2200      	movs	r2, #0
 80122e0:	61bb      	str	r3, [r7, #24]
 80122e2:	61fa      	str	r2, [r7, #28]
 80122e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80122e8:	4a29      	ldr	r2, [pc, #164]	; (8012390 <UART_SetConfig+0x230>)
 80122ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80122ee:	b29b      	uxth	r3, r3
 80122f0:	2200      	movs	r2, #0
 80122f2:	613b      	str	r3, [r7, #16]
 80122f4:	617a      	str	r2, [r7, #20]
 80122f6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80122fa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80122fe:	f7ee fcd1 	bl	8000ca4 <__aeabi_uldivmod>
 8012302:	4602      	mov	r2, r0
 8012304:	460b      	mov	r3, r1
 8012306:	4610      	mov	r0, r2
 8012308:	4619      	mov	r1, r3
 801230a:	f04f 0200 	mov.w	r2, #0
 801230e:	f04f 0300 	mov.w	r3, #0
 8012312:	020b      	lsls	r3, r1, #8
 8012314:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8012318:	0202      	lsls	r2, r0, #8
 801231a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801231c:	6849      	ldr	r1, [r1, #4]
 801231e:	0849      	lsrs	r1, r1, #1
 8012320:	2000      	movs	r0, #0
 8012322:	460c      	mov	r4, r1
 8012324:	4605      	mov	r5, r0
 8012326:	eb12 0804 	adds.w	r8, r2, r4
 801232a:	eb43 0905 	adc.w	r9, r3, r5
 801232e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012330:	685b      	ldr	r3, [r3, #4]
 8012332:	2200      	movs	r2, #0
 8012334:	60bb      	str	r3, [r7, #8]
 8012336:	60fa      	str	r2, [r7, #12]
 8012338:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801233c:	4640      	mov	r0, r8
 801233e:	4649      	mov	r1, r9
 8012340:	f7ee fcb0 	bl	8000ca4 <__aeabi_uldivmod>
 8012344:	4602      	mov	r2, r0
 8012346:	460b      	mov	r3, r1
 8012348:	4613      	mov	r3, r2
 801234a:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801234c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801234e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8012352:	d308      	bcc.n	8012366 <UART_SetConfig+0x206>
 8012354:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012356:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801235a:	d204      	bcs.n	8012366 <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 801235c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801235e:	681b      	ldr	r3, [r3, #0]
 8012360:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012362:	60da      	str	r2, [r3, #12]
 8012364:	e003      	b.n	801236e <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 8012366:	2301      	movs	r3, #1
 8012368:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 801236c:	e082      	b.n	8012474 <UART_SetConfig+0x314>
 801236e:	e081      	b.n	8012474 <UART_SetConfig+0x314>
 8012370:	46002400 	.word	0x46002400
 8012374:	cfff69f3 	.word	0xcfff69f3
 8012378:	56002400 	.word	0x56002400
 801237c:	40013800 	.word	0x40013800
 8012380:	40004400 	.word	0x40004400
 8012384:	40004800 	.word	0x40004800
 8012388:	40004c00 	.word	0x40004c00
 801238c:	40005000 	.word	0x40005000
 8012390:	0818dce0 	.word	0x0818dce0
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012396:	69db      	ldr	r3, [r3, #28]
 8012398:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801239c:	d13c      	bne.n	8012418 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 801239e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80123a0:	2200      	movs	r2, #0
 80123a2:	603b      	str	r3, [r7, #0]
 80123a4:	607a      	str	r2, [r7, #4]
 80123a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80123aa:	f7fc ffff 	bl	800f3ac <HAL_RCCEx_GetPeriphCLKFreq>
 80123ae:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80123b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80123b2:	2b00      	cmp	r3, #0
 80123b4:	d05e      	beq.n	8012474 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80123b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80123ba:	4a39      	ldr	r2, [pc, #228]	; (80124a0 <UART_SetConfig+0x340>)
 80123bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80123c0:	461a      	mov	r2, r3
 80123c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80123c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80123c8:	005a      	lsls	r2, r3, #1
 80123ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123cc:	685b      	ldr	r3, [r3, #4]
 80123ce:	085b      	lsrs	r3, r3, #1
 80123d0:	441a      	add	r2, r3
 80123d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123d4:	685b      	ldr	r3, [r3, #4]
 80123d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80123da:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80123dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80123de:	2b0f      	cmp	r3, #15
 80123e0:	d916      	bls.n	8012410 <UART_SetConfig+0x2b0>
 80123e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80123e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80123e8:	d212      	bcs.n	8012410 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80123ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80123ec:	b29b      	uxth	r3, r3
 80123ee:	f023 030f 	bic.w	r3, r3, #15
 80123f2:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80123f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80123f6:	085b      	lsrs	r3, r3, #1
 80123f8:	b29b      	uxth	r3, r3
 80123fa:	f003 0307 	and.w	r3, r3, #7
 80123fe:	b29a      	uxth	r2, r3
 8012400:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012402:	4313      	orrs	r3, r2
 8012404:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 8012406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012408:	681b      	ldr	r3, [r3, #0]
 801240a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801240c:	60da      	str	r2, [r3, #12]
 801240e:	e031      	b.n	8012474 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8012410:	2301      	movs	r3, #1
 8012412:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8012416:	e02d      	b.n	8012474 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8012418:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801241a:	2200      	movs	r2, #0
 801241c:	469a      	mov	sl, r3
 801241e:	4693      	mov	fp, r2
 8012420:	4650      	mov	r0, sl
 8012422:	4659      	mov	r1, fp
 8012424:	f7fc ffc2 	bl	800f3ac <HAL_RCCEx_GetPeriphCLKFreq>
 8012428:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 801242a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801242c:	2b00      	cmp	r3, #0
 801242e:	d021      	beq.n	8012474 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8012430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012434:	4a1a      	ldr	r2, [pc, #104]	; (80124a0 <UART_SetConfig+0x340>)
 8012436:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801243a:	461a      	mov	r2, r3
 801243c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801243e:	fbb3 f2f2 	udiv	r2, r3, r2
 8012442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012444:	685b      	ldr	r3, [r3, #4]
 8012446:	085b      	lsrs	r3, r3, #1
 8012448:	441a      	add	r2, r3
 801244a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801244c:	685b      	ldr	r3, [r3, #4]
 801244e:	fbb2 f3f3 	udiv	r3, r2, r3
 8012452:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012454:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012456:	2b0f      	cmp	r3, #15
 8012458:	d909      	bls.n	801246e <UART_SetConfig+0x30e>
 801245a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801245c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012460:	d205      	bcs.n	801246e <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8012462:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012464:	b29a      	uxth	r2, r3
 8012466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012468:	681b      	ldr	r3, [r3, #0]
 801246a:	60da      	str	r2, [r3, #12]
 801246c:	e002      	b.n	8012474 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 801246e:	2301      	movs	r3, #1
 8012470:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8012474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012476:	2201      	movs	r2, #1
 8012478:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 801247c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801247e:	2201      	movs	r2, #1
 8012480:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8012484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012486:	2200      	movs	r2, #0
 8012488:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 801248a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801248c:	2200      	movs	r2, #0
 801248e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8012490:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8012494:	4618      	mov	r0, r3
 8012496:	3750      	adds	r7, #80	; 0x50
 8012498:	46bd      	mov	sp, r7
 801249a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801249e:	bf00      	nop
 80124a0:	0818dce0 	.word	0x0818dce0

080124a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80124a4:	b480      	push	{r7}
 80124a6:	b083      	sub	sp, #12
 80124a8:	af00      	add	r7, sp, #0
 80124aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80124b0:	f003 0308 	and.w	r3, r3, #8
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	d00a      	beq.n	80124ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	681b      	ldr	r3, [r3, #0]
 80124bc:	685b      	ldr	r3, [r3, #4]
 80124be:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	681b      	ldr	r3, [r3, #0]
 80124ca:	430a      	orrs	r2, r1
 80124cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80124d2:	f003 0301 	and.w	r3, r3, #1
 80124d6:	2b00      	cmp	r3, #0
 80124d8:	d00a      	beq.n	80124f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	681b      	ldr	r3, [r3, #0]
 80124de:	685b      	ldr	r3, [r3, #4]
 80124e0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	681b      	ldr	r3, [r3, #0]
 80124ec:	430a      	orrs	r2, r1
 80124ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80124f4:	f003 0302 	and.w	r3, r3, #2
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d00a      	beq.n	8012512 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	681b      	ldr	r3, [r3, #0]
 8012500:	685b      	ldr	r3, [r3, #4]
 8012502:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	681b      	ldr	r3, [r3, #0]
 801250e:	430a      	orrs	r2, r1
 8012510:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012516:	f003 0304 	and.w	r3, r3, #4
 801251a:	2b00      	cmp	r3, #0
 801251c:	d00a      	beq.n	8012534 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	681b      	ldr	r3, [r3, #0]
 8012522:	685b      	ldr	r3, [r3, #4]
 8012524:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	681b      	ldr	r3, [r3, #0]
 8012530:	430a      	orrs	r2, r1
 8012532:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012538:	f003 0310 	and.w	r3, r3, #16
 801253c:	2b00      	cmp	r3, #0
 801253e:	d00a      	beq.n	8012556 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	681b      	ldr	r3, [r3, #0]
 8012544:	689b      	ldr	r3, [r3, #8]
 8012546:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	681b      	ldr	r3, [r3, #0]
 8012552:	430a      	orrs	r2, r1
 8012554:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801255a:	f003 0320 	and.w	r3, r3, #32
 801255e:	2b00      	cmp	r3, #0
 8012560:	d00a      	beq.n	8012578 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	681b      	ldr	r3, [r3, #0]
 8012566:	689b      	ldr	r3, [r3, #8]
 8012568:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	681b      	ldr	r3, [r3, #0]
 8012574:	430a      	orrs	r2, r1
 8012576:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801257c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012580:	2b00      	cmp	r3, #0
 8012582:	d01a      	beq.n	80125ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	681b      	ldr	r3, [r3, #0]
 8012588:	685b      	ldr	r3, [r3, #4]
 801258a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	681b      	ldr	r3, [r3, #0]
 8012596:	430a      	orrs	r2, r1
 8012598:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801259e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80125a2:	d10a      	bne.n	80125ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80125a4:	687b      	ldr	r3, [r7, #4]
 80125a6:	681b      	ldr	r3, [r3, #0]
 80125a8:	685b      	ldr	r3, [r3, #4]
 80125aa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	681b      	ldr	r3, [r3, #0]
 80125b6:	430a      	orrs	r2, r1
 80125b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80125be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80125c2:	2b00      	cmp	r3, #0
 80125c4:	d00a      	beq.n	80125dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	681b      	ldr	r3, [r3, #0]
 80125ca:	685b      	ldr	r3, [r3, #4]
 80125cc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	681b      	ldr	r3, [r3, #0]
 80125d8:	430a      	orrs	r2, r1
 80125da:	605a      	str	r2, [r3, #4]
  }
}
 80125dc:	bf00      	nop
 80125de:	370c      	adds	r7, #12
 80125e0:	46bd      	mov	sp, r7
 80125e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125e6:	4770      	bx	lr

080125e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80125e8:	b580      	push	{r7, lr}
 80125ea:	b098      	sub	sp, #96	; 0x60
 80125ec:	af02      	add	r7, sp, #8
 80125ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	2200      	movs	r2, #0
 80125f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80125f8:	f7f8 f848 	bl	800a68c <HAL_GetTick>
 80125fc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	681b      	ldr	r3, [r3, #0]
 8012602:	681b      	ldr	r3, [r3, #0]
 8012604:	f003 0308 	and.w	r3, r3, #8
 8012608:	2b08      	cmp	r3, #8
 801260a:	d12f      	bne.n	801266c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801260c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8012610:	9300      	str	r3, [sp, #0]
 8012612:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012614:	2200      	movs	r2, #0
 8012616:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801261a:	6878      	ldr	r0, [r7, #4]
 801261c:	f000 f88e 	bl	801273c <UART_WaitOnFlagUntilTimeout>
 8012620:	4603      	mov	r3, r0
 8012622:	2b00      	cmp	r3, #0
 8012624:	d022      	beq.n	801266c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	681b      	ldr	r3, [r3, #0]
 801262a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801262c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801262e:	e853 3f00 	ldrex	r3, [r3]
 8012632:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8012634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012636:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801263a:	653b      	str	r3, [r7, #80]	; 0x50
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	681b      	ldr	r3, [r3, #0]
 8012640:	461a      	mov	r2, r3
 8012642:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012644:	647b      	str	r3, [r7, #68]	; 0x44
 8012646:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012648:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801264a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801264c:	e841 2300 	strex	r3, r2, [r1]
 8012650:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8012652:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012654:	2b00      	cmp	r3, #0
 8012656:	d1e6      	bne.n	8012626 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	2220      	movs	r2, #32
 801265c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	2200      	movs	r2, #0
 8012664:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8012668:	2303      	movs	r3, #3
 801266a:	e063      	b.n	8012734 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	681b      	ldr	r3, [r3, #0]
 8012670:	681b      	ldr	r3, [r3, #0]
 8012672:	f003 0304 	and.w	r3, r3, #4
 8012676:	2b04      	cmp	r3, #4
 8012678:	d149      	bne.n	801270e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801267a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801267e:	9300      	str	r3, [sp, #0]
 8012680:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012682:	2200      	movs	r2, #0
 8012684:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8012688:	6878      	ldr	r0, [r7, #4]
 801268a:	f000 f857 	bl	801273c <UART_WaitOnFlagUntilTimeout>
 801268e:	4603      	mov	r3, r0
 8012690:	2b00      	cmp	r3, #0
 8012692:	d03c      	beq.n	801270e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012694:	687b      	ldr	r3, [r7, #4]
 8012696:	681b      	ldr	r3, [r3, #0]
 8012698:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801269a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801269c:	e853 3f00 	ldrex	r3, [r3]
 80126a0:	623b      	str	r3, [r7, #32]
   return(result);
 80126a2:	6a3b      	ldr	r3, [r7, #32]
 80126a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80126a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	681b      	ldr	r3, [r3, #0]
 80126ae:	461a      	mov	r2, r3
 80126b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80126b2:	633b      	str	r3, [r7, #48]	; 0x30
 80126b4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80126b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80126b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80126ba:	e841 2300 	strex	r3, r2, [r1]
 80126be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80126c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126c2:	2b00      	cmp	r3, #0
 80126c4:	d1e6      	bne.n	8012694 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	681b      	ldr	r3, [r3, #0]
 80126ca:	3308      	adds	r3, #8
 80126cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80126ce:	693b      	ldr	r3, [r7, #16]
 80126d0:	e853 3f00 	ldrex	r3, [r3]
 80126d4:	60fb      	str	r3, [r7, #12]
   return(result);
 80126d6:	68fb      	ldr	r3, [r7, #12]
 80126d8:	f023 0301 	bic.w	r3, r3, #1
 80126dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	681b      	ldr	r3, [r3, #0]
 80126e2:	3308      	adds	r3, #8
 80126e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80126e6:	61fa      	str	r2, [r7, #28]
 80126e8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80126ea:	69b9      	ldr	r1, [r7, #24]
 80126ec:	69fa      	ldr	r2, [r7, #28]
 80126ee:	e841 2300 	strex	r3, r2, [r1]
 80126f2:	617b      	str	r3, [r7, #20]
   return(result);
 80126f4:	697b      	ldr	r3, [r7, #20]
 80126f6:	2b00      	cmp	r3, #0
 80126f8:	d1e5      	bne.n	80126c6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	2220      	movs	r2, #32
 80126fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	2200      	movs	r2, #0
 8012706:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801270a:	2303      	movs	r3, #3
 801270c:	e012      	b.n	8012734 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801270e:	687b      	ldr	r3, [r7, #4]
 8012710:	2220      	movs	r2, #32
 8012712:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	2220      	movs	r2, #32
 801271a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	2200      	movs	r2, #0
 8012722:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	2200      	movs	r2, #0
 8012728:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 801272a:	687b      	ldr	r3, [r7, #4]
 801272c:	2200      	movs	r2, #0
 801272e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012732:	2300      	movs	r3, #0
}
 8012734:	4618      	mov	r0, r3
 8012736:	3758      	adds	r7, #88	; 0x58
 8012738:	46bd      	mov	sp, r7
 801273a:	bd80      	pop	{r7, pc}

0801273c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801273c:	b580      	push	{r7, lr}
 801273e:	b084      	sub	sp, #16
 8012740:	af00      	add	r7, sp, #0
 8012742:	60f8      	str	r0, [r7, #12]
 8012744:	60b9      	str	r1, [r7, #8]
 8012746:	603b      	str	r3, [r7, #0]
 8012748:	4613      	mov	r3, r2
 801274a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801274c:	e049      	b.n	80127e2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801274e:	69bb      	ldr	r3, [r7, #24]
 8012750:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012754:	d045      	beq.n	80127e2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012756:	f7f7 ff99 	bl	800a68c <HAL_GetTick>
 801275a:	4602      	mov	r2, r0
 801275c:	683b      	ldr	r3, [r7, #0]
 801275e:	1ad3      	subs	r3, r2, r3
 8012760:	69ba      	ldr	r2, [r7, #24]
 8012762:	429a      	cmp	r2, r3
 8012764:	d302      	bcc.n	801276c <UART_WaitOnFlagUntilTimeout+0x30>
 8012766:	69bb      	ldr	r3, [r7, #24]
 8012768:	2b00      	cmp	r3, #0
 801276a:	d101      	bne.n	8012770 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 801276c:	2303      	movs	r3, #3
 801276e:	e048      	b.n	8012802 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8012770:	68fb      	ldr	r3, [r7, #12]
 8012772:	681b      	ldr	r3, [r3, #0]
 8012774:	681b      	ldr	r3, [r3, #0]
 8012776:	f003 0304 	and.w	r3, r3, #4
 801277a:	2b00      	cmp	r3, #0
 801277c:	d031      	beq.n	80127e2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801277e:	68fb      	ldr	r3, [r7, #12]
 8012780:	681b      	ldr	r3, [r3, #0]
 8012782:	69db      	ldr	r3, [r3, #28]
 8012784:	f003 0308 	and.w	r3, r3, #8
 8012788:	2b08      	cmp	r3, #8
 801278a:	d110      	bne.n	80127ae <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801278c:	68fb      	ldr	r3, [r7, #12]
 801278e:	681b      	ldr	r3, [r3, #0]
 8012790:	2208      	movs	r2, #8
 8012792:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8012794:	68f8      	ldr	r0, [r7, #12]
 8012796:	f000 f838 	bl	801280a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 801279a:	68fb      	ldr	r3, [r7, #12]
 801279c:	2208      	movs	r2, #8
 801279e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80127a2:	68fb      	ldr	r3, [r7, #12]
 80127a4:	2200      	movs	r2, #0
 80127a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80127aa:	2301      	movs	r3, #1
 80127ac:	e029      	b.n	8012802 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80127ae:	68fb      	ldr	r3, [r7, #12]
 80127b0:	681b      	ldr	r3, [r3, #0]
 80127b2:	69db      	ldr	r3, [r3, #28]
 80127b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80127b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80127bc:	d111      	bne.n	80127e2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80127be:	68fb      	ldr	r3, [r7, #12]
 80127c0:	681b      	ldr	r3, [r3, #0]
 80127c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80127c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80127c8:	68f8      	ldr	r0, [r7, #12]
 80127ca:	f000 f81e 	bl	801280a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80127ce:	68fb      	ldr	r3, [r7, #12]
 80127d0:	2220      	movs	r2, #32
 80127d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80127d6:	68fb      	ldr	r3, [r7, #12]
 80127d8:	2200      	movs	r2, #0
 80127da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80127de:	2303      	movs	r3, #3
 80127e0:	e00f      	b.n	8012802 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80127e2:	68fb      	ldr	r3, [r7, #12]
 80127e4:	681b      	ldr	r3, [r3, #0]
 80127e6:	69da      	ldr	r2, [r3, #28]
 80127e8:	68bb      	ldr	r3, [r7, #8]
 80127ea:	4013      	ands	r3, r2
 80127ec:	68ba      	ldr	r2, [r7, #8]
 80127ee:	429a      	cmp	r2, r3
 80127f0:	bf0c      	ite	eq
 80127f2:	2301      	moveq	r3, #1
 80127f4:	2300      	movne	r3, #0
 80127f6:	b2db      	uxtb	r3, r3
 80127f8:	461a      	mov	r2, r3
 80127fa:	79fb      	ldrb	r3, [r7, #7]
 80127fc:	429a      	cmp	r2, r3
 80127fe:	d0a6      	beq.n	801274e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8012800:	2300      	movs	r3, #0
}
 8012802:	4618      	mov	r0, r3
 8012804:	3710      	adds	r7, #16
 8012806:	46bd      	mov	sp, r7
 8012808:	bd80      	pop	{r7, pc}

0801280a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801280a:	b480      	push	{r7}
 801280c:	b095      	sub	sp, #84	; 0x54
 801280e:	af00      	add	r7, sp, #0
 8012810:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	681b      	ldr	r3, [r3, #0]
 8012816:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801281a:	e853 3f00 	ldrex	r3, [r3]
 801281e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8012820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012822:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012826:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	681b      	ldr	r3, [r3, #0]
 801282c:	461a      	mov	r2, r3
 801282e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012830:	643b      	str	r3, [r7, #64]	; 0x40
 8012832:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012834:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012836:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012838:	e841 2300 	strex	r3, r2, [r1]
 801283c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801283e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012840:	2b00      	cmp	r3, #0
 8012842:	d1e6      	bne.n	8012812 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	681b      	ldr	r3, [r3, #0]
 8012848:	3308      	adds	r3, #8
 801284a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801284c:	6a3b      	ldr	r3, [r7, #32]
 801284e:	e853 3f00 	ldrex	r3, [r3]
 8012852:	61fb      	str	r3, [r7, #28]
   return(result);
 8012854:	69fb      	ldr	r3, [r7, #28]
 8012856:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801285a:	f023 0301 	bic.w	r3, r3, #1
 801285e:	64bb      	str	r3, [r7, #72]	; 0x48
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	681b      	ldr	r3, [r3, #0]
 8012864:	3308      	adds	r3, #8
 8012866:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012868:	62fa      	str	r2, [r7, #44]	; 0x2c
 801286a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801286c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801286e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012870:	e841 2300 	strex	r3, r2, [r1]
 8012874:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012878:	2b00      	cmp	r3, #0
 801287a:	d1e3      	bne.n	8012844 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012880:	2b01      	cmp	r3, #1
 8012882:	d118      	bne.n	80128b6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	681b      	ldr	r3, [r3, #0]
 8012888:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801288a:	68fb      	ldr	r3, [r7, #12]
 801288c:	e853 3f00 	ldrex	r3, [r3]
 8012890:	60bb      	str	r3, [r7, #8]
   return(result);
 8012892:	68bb      	ldr	r3, [r7, #8]
 8012894:	f023 0310 	bic.w	r3, r3, #16
 8012898:	647b      	str	r3, [r7, #68]	; 0x44
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	681b      	ldr	r3, [r3, #0]
 801289e:	461a      	mov	r2, r3
 80128a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80128a2:	61bb      	str	r3, [r7, #24]
 80128a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80128a6:	6979      	ldr	r1, [r7, #20]
 80128a8:	69ba      	ldr	r2, [r7, #24]
 80128aa:	e841 2300 	strex	r3, r2, [r1]
 80128ae:	613b      	str	r3, [r7, #16]
   return(result);
 80128b0:	693b      	ldr	r3, [r7, #16]
 80128b2:	2b00      	cmp	r3, #0
 80128b4:	d1e6      	bne.n	8012884 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	2220      	movs	r2, #32
 80128ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	2200      	movs	r2, #0
 80128c2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80128c4:	687b      	ldr	r3, [r7, #4]
 80128c6:	2200      	movs	r2, #0
 80128c8:	675a      	str	r2, [r3, #116]	; 0x74
}
 80128ca:	bf00      	nop
 80128cc:	3754      	adds	r7, #84	; 0x54
 80128ce:	46bd      	mov	sp, r7
 80128d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128d4:	4770      	bx	lr

080128d6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80128d6:	b480      	push	{r7}
 80128d8:	b085      	sub	sp, #20
 80128da:	af00      	add	r7, sp, #0
 80128dc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80128e4:	2b01      	cmp	r3, #1
 80128e6:	d101      	bne.n	80128ec <HAL_UARTEx_DisableFifoMode+0x16>
 80128e8:	2302      	movs	r3, #2
 80128ea:	e027      	b.n	801293c <HAL_UARTEx_DisableFifoMode+0x66>
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	2201      	movs	r2, #1
 80128f0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	2224      	movs	r2, #36	; 0x24
 80128f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	681b      	ldr	r3, [r3, #0]
 8012900:	681b      	ldr	r3, [r3, #0]
 8012902:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	681b      	ldr	r3, [r3, #0]
 8012908:	681a      	ldr	r2, [r3, #0]
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	681b      	ldr	r3, [r3, #0]
 801290e:	f022 0201 	bic.w	r2, r2, #1
 8012912:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8012914:	68fb      	ldr	r3, [r7, #12]
 8012916:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 801291a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	2200      	movs	r2, #0
 8012920:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	681b      	ldr	r3, [r3, #0]
 8012926:	68fa      	ldr	r2, [r7, #12]
 8012928:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	2220      	movs	r2, #32
 801292e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	2200      	movs	r2, #0
 8012936:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801293a:	2300      	movs	r3, #0
}
 801293c:	4618      	mov	r0, r3
 801293e:	3714      	adds	r7, #20
 8012940:	46bd      	mov	sp, r7
 8012942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012946:	4770      	bx	lr

08012948 <net_ntoa_r>:
  * @param buf: buffer to fill with string corresponding to the given IP address
  * @param buflen: the length of the given buffer to fill
  * @return IPv4 address string, like "192.168.1.10"
  */
char_t *net_ntoa_r(const net_ip_addr_t *addr, char_t *buf, int32_t buflen)
{
 8012948:	b480      	push	{r7}
 801294a:	b08b      	sub	sp, #44	; 0x2c
 801294c:	af00      	add	r7, sp, #0
 801294e:	60f8      	str	r0, [r7, #12]
 8012950:	60b9      	str	r1, [r7, #8]
 8012952:	607a      	str	r2, [r7, #4]
  char_t inv[3];
  int32_t len = 0;
 8012954:	2300      	movs	r3, #0
 8012956:	627b      	str	r3, [r7, #36]	; 0x24
  char_t *buf_ret = NULL;
 8012958:	2300      	movs	r3, #0
 801295a:	623b      	str	r3, [r7, #32]
  const uint32_t addr_32bits = addr->addr;
 801295c:	68fb      	ldr	r3, [r7, #12]
 801295e:	681b      	ldr	r3, [r3, #0]
 8012960:	613b      	str	r3, [r7, #16]
  const uint8_t *ap = (const uint8_t *)&addr_32bits;
 8012962:	f107 0310 	add.w	r3, r7, #16
 8012966:	61bb      	str	r3, [r7, #24]

  for (uint8_t n = 0; n < (uint8_t) 4; n++)
 8012968:	2300      	movs	r3, #0
 801296a:	77fb      	strb	r3, [r7, #31]
 801296c:	e04e      	b.n	8012a0c <net_ntoa_r+0xc4>
  {
    uint8_t i = 0;
 801296e:	2300      	movs	r3, #0
 8012970:	77bb      	strb	r3, [r7, #30]
    uint8_t val = ap[n];
 8012972:	7ffb      	ldrb	r3, [r7, #31]
 8012974:	69ba      	ldr	r2, [r7, #24]
 8012976:	4413      	add	r3, r2
 8012978:	781b      	ldrb	r3, [r3, #0]
 801297a:	777b      	strb	r3, [r7, #29]
    do
    {
      const uint8_t rem = val % 10U;
 801297c:	7f7a      	ldrb	r2, [r7, #29]
 801297e:	4b2e      	ldr	r3, [pc, #184]	; (8012a38 <net_ntoa_r+0xf0>)
 8012980:	fba3 1302 	umull	r1, r3, r3, r2
 8012984:	08d9      	lsrs	r1, r3, #3
 8012986:	460b      	mov	r3, r1
 8012988:	009b      	lsls	r3, r3, #2
 801298a:	440b      	add	r3, r1
 801298c:	005b      	lsls	r3, r3, #1
 801298e:	1ad3      	subs	r3, r2, r3
 8012990:	75fb      	strb	r3, [r7, #23]
      val /=  10U;
 8012992:	7f7b      	ldrb	r3, [r7, #29]
 8012994:	4a28      	ldr	r2, [pc, #160]	; (8012a38 <net_ntoa_r+0xf0>)
 8012996:	fba2 2303 	umull	r2, r3, r2, r3
 801299a:	08db      	lsrs	r3, r3, #3
 801299c:	777b      	strb	r3, [r7, #29]
      inv[i] = (char_t)'0' + rem;
 801299e:	7fbb      	ldrb	r3, [r7, #30]
 80129a0:	7dfa      	ldrb	r2, [r7, #23]
 80129a2:	3230      	adds	r2, #48	; 0x30
 80129a4:	b2d2      	uxtb	r2, r2
 80129a6:	3328      	adds	r3, #40	; 0x28
 80129a8:	443b      	add	r3, r7
 80129aa:	f803 2c14 	strb.w	r2, [r3, #-20]
      i++;
 80129ae:	7fbb      	ldrb	r3, [r7, #30]
 80129b0:	3301      	adds	r3, #1
 80129b2:	77bb      	strb	r3, [r7, #30]
    } while (val != 0U);
 80129b4:	7f7b      	ldrb	r3, [r7, #29]
 80129b6:	2b00      	cmp	r3, #0
 80129b8:	d1e0      	bne.n	801297c <net_ntoa_r+0x34>

    while (i != 0U)
 80129ba:	e012      	b.n	80129e2 <net_ntoa_r+0x9a>
    {
      i--;
 80129bc:	7fbb      	ldrb	r3, [r7, #30]
 80129be:	3b01      	subs	r3, #1
 80129c0:	77bb      	strb	r3, [r7, #30]
      if (len < buflen)
 80129c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	429a      	cmp	r2, r3
 80129c8:	da0b      	bge.n	80129e2 <net_ntoa_r+0x9a>
      {
        buf[len] = inv[i];
 80129ca:	7fba      	ldrb	r2, [r7, #30]
 80129cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129ce:	68b9      	ldr	r1, [r7, #8]
 80129d0:	440b      	add	r3, r1
 80129d2:	3228      	adds	r2, #40	; 0x28
 80129d4:	443a      	add	r2, r7
 80129d6:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80129da:	701a      	strb	r2, [r3, #0]
        len++;
 80129dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129de:	3301      	adds	r3, #1
 80129e0:	627b      	str	r3, [r7, #36]	; 0x24
    while (i != 0U)
 80129e2:	7fbb      	ldrb	r3, [r7, #30]
 80129e4:	2b00      	cmp	r3, #0
 80129e6:	d1e9      	bne.n	80129bc <net_ntoa_r+0x74>
      }
    }

    if ((n < 3U) && (len < buflen))
 80129e8:	7ffb      	ldrb	r3, [r7, #31]
 80129ea:	2b02      	cmp	r3, #2
 80129ec:	d80b      	bhi.n	8012a06 <net_ntoa_r+0xbe>
 80129ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	429a      	cmp	r2, r3
 80129f4:	da07      	bge.n	8012a06 <net_ntoa_r+0xbe>
    {
      buf[len] = (char_t) '.';
 80129f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129f8:	68ba      	ldr	r2, [r7, #8]
 80129fa:	4413      	add	r3, r2
 80129fc:	222e      	movs	r2, #46	; 0x2e
 80129fe:	701a      	strb	r2, [r3, #0]
      len++;
 8012a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a02:	3301      	adds	r3, #1
 8012a04:	627b      	str	r3, [r7, #36]	; 0x24
  for (uint8_t n = 0; n < (uint8_t) 4; n++)
 8012a06:	7ffb      	ldrb	r3, [r7, #31]
 8012a08:	3301      	adds	r3, #1
 8012a0a:	77fb      	strb	r3, [r7, #31]
 8012a0c:	7ffb      	ldrb	r3, [r7, #31]
 8012a0e:	2b03      	cmp	r3, #3
 8012a10:	d9ad      	bls.n	801296e <net_ntoa_r+0x26>
    }
  }

  if (len < buflen)
 8012a12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	429a      	cmp	r2, r3
 8012a18:	da06      	bge.n	8012a28 <net_ntoa_r+0xe0>
  {
    buf[len] = (char_t) '\0';
 8012a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a1c:	68ba      	ldr	r2, [r7, #8]
 8012a1e:	4413      	add	r3, r2
 8012a20:	2200      	movs	r2, #0
 8012a22:	701a      	strb	r2, [r3, #0]
    buf_ret = buf;
 8012a24:	68bb      	ldr	r3, [r7, #8]
 8012a26:	623b      	str	r3, [r7, #32]
  }

  return buf_ret;
 8012a28:	6a3b      	ldr	r3, [r7, #32]
}
 8012a2a:	4618      	mov	r0, r3
 8012a2c:	372c      	adds	r7, #44	; 0x2c
 8012a2e:	46bd      	mov	sp, r7
 8012a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a34:	4770      	bx	lr
 8012a36:	bf00      	nop
 8012a38:	cccccccd 	.word	0xcccccccd

08012a3c <net_ntoa>:
  * @brief  Convert IPv4 address from structure to string
  * @param  addr: an IP address structure
  * @retval IP address as a string
  */
char_t *net_ntoa(const net_ip_addr_t *addr)
{
 8012a3c:	b580      	push	{r7, lr}
 8012a3e:	b082      	sub	sp, #8
 8012a40:	af00      	add	r7, sp, #0
 8012a42:	6078      	str	r0, [r7, #4]
  static char_t str[16];

  memset(str, 0, sizeof(str));
 8012a44:	2210      	movs	r2, #16
 8012a46:	2100      	movs	r1, #0
 8012a48:	4806      	ldr	r0, [pc, #24]	; (8012a64 <net_ntoa+0x28>)
 8012a4a:	f004 fcc7 	bl	80173dc <memset>

  return net_ntoa_r(addr, str, sizeof(str));
 8012a4e:	2210      	movs	r2, #16
 8012a50:	4904      	ldr	r1, [pc, #16]	; (8012a64 <net_ntoa+0x28>)
 8012a52:	6878      	ldr	r0, [r7, #4]
 8012a54:	f7ff ff78 	bl	8012948 <net_ntoa_r>
 8012a58:	4603      	mov	r3, r0
}
 8012a5a:	4618      	mov	r0, r3
 8012a5c:	3708      	adds	r7, #8
 8012a5e:	46bd      	mov	sp, r7
 8012a60:	bd80      	pop	{r7, pc}
 8012a62:	bf00      	nop
 8012a64:	20003330 	.word	0x20003330

08012a68 <net_set_port>:
  * @param  pAddr: a socket structure
  * @param  Port: the port value
  * @retval
  */
void net_set_port(net_sockaddr_t *pAddr, uint16_t Port)
{
 8012a68:	b480      	push	{r7}
 8012a6a:	b083      	sub	sp, #12
 8012a6c:	af00      	add	r7, sp, #0
 8012a6e:	6078      	str	r0, [r7, #4]
 8012a70:	460b      	mov	r3, r1
 8012a72:	807b      	strh	r3, [r7, #2]
  }
  else

#endif /* NET_USE_IPV6 */
  {
    ((net_sockaddr_in_t *)pAddr)->sin_port = NET_HTONS(Port);
 8012a74:	887b      	ldrh	r3, [r7, #2]
 8012a76:	ba5b      	rev16	r3, r3
 8012a78:	b29a      	uxth	r2, r3
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	805a      	strh	r2, [r3, #2]
  }
}
 8012a7e:	bf00      	nop
 8012a80:	370c      	adds	r7, #12
 8012a82:	46bd      	mov	sp, r7
 8012a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a88:	4770      	bx	lr

08012a8a <net_get_ip_addr>:
  * @brief  Function description
  * @param  pAddr: a socket structure
  * @retval IP address value
  */
net_ip_addr_t net_get_ip_addr(const net_sockaddr_t *pAddr)
{
 8012a8a:	b480      	push	{r7}
 8012a8c:	b085      	sub	sp, #20
 8012a8e:	af00      	add	r7, sp, #0
 8012a90:	6078      	str	r0, [r7, #4]
  net_ip_addr_t ip_addr = {0};
 8012a92:	2300      	movs	r3, #0
 8012a94:	60bb      	str	r3, [r7, #8]
    inet6_addr_to_ip6addr(&ip_addr.u_addr.ip6, &p_s_addr_in6->sin6_addr);
  }
  else
#endif /* NET_USE_IPV6 */
  {
    const net_sockaddr_in_t *const p_s_addr_in = (const net_sockaddr_in_t *)pAddr;
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	60fb      	str	r3, [r7, #12]

#ifdef NET_USE_LWIP_DEFINITIONS
    ip_addr.u_addr.ip4.addr = p_s_addr_in->sin_addr.s_addr;
#else
    ip_addr.addr = p_s_addr_in->sin_addr.s_addr;
 8012a9a:	68fb      	ldr	r3, [r7, #12]
 8012a9c:	685b      	ldr	r3, [r3, #4]
 8012a9e:	60bb      	str	r3, [r7, #8]
#endif /* NET_USE_LWIP_DEFINITIONS */
  }

  return ip_addr;
 8012aa0:	68bb      	ldr	r3, [r7, #8]
}
 8012aa2:	4618      	mov	r0, r3
 8012aa4:	3714      	adds	r7, #20
 8012aa6:	46bd      	mov	sp, r7
 8012aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aac:	4770      	bx	lr

08012aae <net_wifi_get_class>:

/*static*/ const char *NO_NETWORK_INTERFACE_DEFINED = "No network interface defined\n";


net_interface_class_t net_wifi_get_class(net_if_handle_t *pnetif)
{
 8012aae:	b480      	push	{r7}
 8012ab0:	b083      	sub	sp, #12
 8012ab2:	af00      	add	r7, sp, #0
 8012ab4:	6078      	str	r0, [r7, #4]
  return pnetif->pdrv->if_class;
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8012abc:	781b      	ldrb	r3, [r3, #0]
}
 8012abe:	4618      	mov	r0, r3
 8012ac0:	370c      	adds	r7, #12
 8012ac2:	46bd      	mov	sp, r7
 8012ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ac8:	4770      	bx	lr
	...

08012acc <net_wifi_security_to_string>:
  * @brief  Convert WiFi security enumerated value to string
  * @param  sec is an unsigned integer
  * @retval a constant string, for instance "Open" or "WPA2-AES"
  */
const char_t *net_wifi_security_to_string(uint32_t sec)
{
 8012acc:	b480      	push	{r7}
 8012ace:	b085      	sub	sp, #20
 8012ad0:	af00      	add	r7, sp, #0
 8012ad2:	6078      	str	r0, [r7, #4]
  const char_t *s;
  if (sec == NET_WIFI_SM_OPEN)
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	2b00      	cmp	r3, #0
 8012ad8:	d102      	bne.n	8012ae0 <net_wifi_security_to_string+0x14>
  {
    s = "Open";
 8012ada:	4b45      	ldr	r3, [pc, #276]	; (8012bf0 <net_wifi_security_to_string+0x124>)
 8012adc:	60fb      	str	r3, [r7, #12]
 8012ade:	e080      	b.n	8012be2 <net_wifi_security_to_string+0x116>
  }
  else if (sec == NET_WIFI_SM_WEP_SHARED)
 8012ae0:	687b      	ldr	r3, [r7, #4]
 8012ae2:	f248 0201 	movw	r2, #32769	; 0x8001
 8012ae6:	4293      	cmp	r3, r2
 8012ae8:	d102      	bne.n	8012af0 <net_wifi_security_to_string+0x24>
  {
    s = "WEP-shared";
 8012aea:	4b42      	ldr	r3, [pc, #264]	; (8012bf4 <net_wifi_security_to_string+0x128>)
 8012aec:	60fb      	str	r3, [r7, #12]
 8012aee:	e078      	b.n	8012be2 <net_wifi_security_to_string+0x116>
  }
  else if (sec == NET_WIFI_SM_WPA_TKIP_PSK)
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	4a41      	ldr	r2, [pc, #260]	; (8012bf8 <net_wifi_security_to_string+0x12c>)
 8012af4:	4293      	cmp	r3, r2
 8012af6:	d102      	bne.n	8012afe <net_wifi_security_to_string+0x32>
  {
    s = "WPA-TKIP";
 8012af8:	4b40      	ldr	r3, [pc, #256]	; (8012bfc <net_wifi_security_to_string+0x130>)
 8012afa:	60fb      	str	r3, [r7, #12]
 8012afc:	e071      	b.n	8012be2 <net_wifi_security_to_string+0x116>
  }
  else if (sec == NET_WIFI_SM_WPA_MIXED_PSK)
 8012afe:	687b      	ldr	r3, [r7, #4]
 8012b00:	4a3f      	ldr	r2, [pc, #252]	; (8012c00 <net_wifi_security_to_string+0x134>)
 8012b02:	4293      	cmp	r3, r2
 8012b04:	d102      	bne.n	8012b0c <net_wifi_security_to_string+0x40>
  {
    s = "WPA-Mixed";
 8012b06:	4b3f      	ldr	r3, [pc, #252]	; (8012c04 <net_wifi_security_to_string+0x138>)
 8012b08:	60fb      	str	r3, [r7, #12]
 8012b0a:	e06a      	b.n	8012be2 <net_wifi_security_to_string+0x116>
  }
  else if (sec == NET_WIFI_SM_WPA2_AES_PSK)
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	4a3e      	ldr	r2, [pc, #248]	; (8012c08 <net_wifi_security_to_string+0x13c>)
 8012b10:	4293      	cmp	r3, r2
 8012b12:	d102      	bne.n	8012b1a <net_wifi_security_to_string+0x4e>
  {
    s = "WPA2-AES";
 8012b14:	4b3d      	ldr	r3, [pc, #244]	; (8012c0c <net_wifi_security_to_string+0x140>)
 8012b16:	60fb      	str	r3, [r7, #12]
 8012b18:	e063      	b.n	8012be2 <net_wifi_security_to_string+0x116>
  }
  else if (sec == NET_WIFI_SM_WPA2_TKIP_PSK)
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	4a3c      	ldr	r2, [pc, #240]	; (8012c10 <net_wifi_security_to_string+0x144>)
 8012b1e:	4293      	cmp	r3, r2
 8012b20:	d102      	bne.n	8012b28 <net_wifi_security_to_string+0x5c>
  {
    s = "WPA2-TKIP";
 8012b22:	4b3c      	ldr	r3, [pc, #240]	; (8012c14 <net_wifi_security_to_string+0x148>)
 8012b24:	60fb      	str	r3, [r7, #12]
 8012b26:	e05c      	b.n	8012be2 <net_wifi_security_to_string+0x116>
  }
  else if (sec == NET_WIFI_SM_WPA2_MIXED_PSK)
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	4a3b      	ldr	r2, [pc, #236]	; (8012c18 <net_wifi_security_to_string+0x14c>)
 8012b2c:	4293      	cmp	r3, r2
 8012b2e:	d102      	bne.n	8012b36 <net_wifi_security_to_string+0x6a>
  {
    s = "WPA2_Mixed";
 8012b30:	4b3a      	ldr	r3, [pc, #232]	; (8012c1c <net_wifi_security_to_string+0x150>)
 8012b32:	60fb      	str	r3, [r7, #12]
 8012b34:	e055      	b.n	8012be2 <net_wifi_security_to_string+0x116>
  }
  else if (sec == NET_WIFI_SM_WPA2_FBT_PSK)
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	4a39      	ldr	r2, [pc, #228]	; (8012c20 <net_wifi_security_to_string+0x154>)
 8012b3a:	4293      	cmp	r3, r2
 8012b3c:	d102      	bne.n	8012b44 <net_wifi_security_to_string+0x78>
  {
    s = "WPA2-FBT";
 8012b3e:	4b39      	ldr	r3, [pc, #228]	; (8012c24 <net_wifi_security_to_string+0x158>)
 8012b40:	60fb      	str	r3, [r7, #12]
 8012b42:	e04e      	b.n	8012be2 <net_wifi_security_to_string+0x116>
  }
  else if (sec == NET_WIFI_SM_WPA3_SAE)
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	4a38      	ldr	r2, [pc, #224]	; (8012c28 <net_wifi_security_to_string+0x15c>)
 8012b48:	4293      	cmp	r3, r2
 8012b4a:	d102      	bne.n	8012b52 <net_wifi_security_to_string+0x86>
  {
    s = "WPA3";
 8012b4c:	4b37      	ldr	r3, [pc, #220]	; (8012c2c <net_wifi_security_to_string+0x160>)
 8012b4e:	60fb      	str	r3, [r7, #12]
 8012b50:	e047      	b.n	8012be2 <net_wifi_security_to_string+0x116>
  }
  else if (sec == NET_WIFI_SM_WPA3_WPA2_PSK)
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	4a36      	ldr	r2, [pc, #216]	; (8012c30 <net_wifi_security_to_string+0x164>)
 8012b56:	4293      	cmp	r3, r2
 8012b58:	d102      	bne.n	8012b60 <net_wifi_security_to_string+0x94>
  {
    s = "WPA3-WPA2";
 8012b5a:	4b36      	ldr	r3, [pc, #216]	; (8012c34 <net_wifi_security_to_string+0x168>)
 8012b5c:	60fb      	str	r3, [r7, #12]
 8012b5e:	e040      	b.n	8012be2 <net_wifi_security_to_string+0x116>
  }

  else if (sec == NET_WIFI_SM_WPA_TKIP_ENT)
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	4a35      	ldr	r2, [pc, #212]	; (8012c38 <net_wifi_security_to_string+0x16c>)
 8012b64:	4293      	cmp	r3, r2
 8012b66:	d102      	bne.n	8012b6e <net_wifi_security_to_string+0xa2>
  {
    s = "WPA-TKIP-Ent";
 8012b68:	4b34      	ldr	r3, [pc, #208]	; (8012c3c <net_wifi_security_to_string+0x170>)
 8012b6a:	60fb      	str	r3, [r7, #12]
 8012b6c:	e039      	b.n	8012be2 <net_wifi_security_to_string+0x116>
  }
  else if (sec == NET_WIFI_SM_WPA_AES_ENT)
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	4a33      	ldr	r2, [pc, #204]	; (8012c40 <net_wifi_security_to_string+0x174>)
 8012b72:	4293      	cmp	r3, r2
 8012b74:	d102      	bne.n	8012b7c <net_wifi_security_to_string+0xb0>
  {
    s = "WPA-AES-Ent";
 8012b76:	4b33      	ldr	r3, [pc, #204]	; (8012c44 <net_wifi_security_to_string+0x178>)
 8012b78:	60fb      	str	r3, [r7, #12]
 8012b7a:	e032      	b.n	8012be2 <net_wifi_security_to_string+0x116>
  }
  else if (sec == NET_WIFI_SM_WPA2_TKIP_ENT)
 8012b7c:	687b      	ldr	r3, [r7, #4]
 8012b7e:	4a32      	ldr	r2, [pc, #200]	; (8012c48 <net_wifi_security_to_string+0x17c>)
 8012b80:	4293      	cmp	r3, r2
 8012b82:	d102      	bne.n	8012b8a <net_wifi_security_to_string+0xbe>
  {
    s = "WPA2-TKIP-Ent";
 8012b84:	4b31      	ldr	r3, [pc, #196]	; (8012c4c <net_wifi_security_to_string+0x180>)
 8012b86:	60fb      	str	r3, [r7, #12]
 8012b88:	e02b      	b.n	8012be2 <net_wifi_security_to_string+0x116>
  }
  else if (sec == NET_WIFI_SM_WPA2_AES_ENT)
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	4a30      	ldr	r2, [pc, #192]	; (8012c50 <net_wifi_security_to_string+0x184>)
 8012b8e:	4293      	cmp	r3, r2
 8012b90:	d102      	bne.n	8012b98 <net_wifi_security_to_string+0xcc>
  {
    s = "WPA2-AES-Ent";
 8012b92:	4b30      	ldr	r3, [pc, #192]	; (8012c54 <net_wifi_security_to_string+0x188>)
 8012b94:	60fb      	str	r3, [r7, #12]
 8012b96:	e024      	b.n	8012be2 <net_wifi_security_to_string+0x116>
  }
  else if (sec == NET_WIFI_SM_WPA2_MIXED_ENT)
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	4a2f      	ldr	r2, [pc, #188]	; (8012c58 <net_wifi_security_to_string+0x18c>)
 8012b9c:	4293      	cmp	r3, r2
 8012b9e:	d102      	bne.n	8012ba6 <net_wifi_security_to_string+0xda>
  {
    s = "WPA2-Mixed-Ent";
 8012ba0:	4b2e      	ldr	r3, [pc, #184]	; (8012c5c <net_wifi_security_to_string+0x190>)
 8012ba2:	60fb      	str	r3, [r7, #12]
 8012ba4:	e01d      	b.n	8012be2 <net_wifi_security_to_string+0x116>
  }
  else if (sec == NET_WIFI_SM_WPA2_FBT_ENT)
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	4a2d      	ldr	r2, [pc, #180]	; (8012c60 <net_wifi_security_to_string+0x194>)
 8012baa:	4293      	cmp	r3, r2
 8012bac:	d102      	bne.n	8012bb4 <net_wifi_security_to_string+0xe8>
  {
    s = "WPA-FBT-Ent";
 8012bae:	4b2d      	ldr	r3, [pc, #180]	; (8012c64 <net_wifi_security_to_string+0x198>)
 8012bb0:	60fb      	str	r3, [r7, #12]
 8012bb2:	e016      	b.n	8012be2 <net_wifi_security_to_string+0x116>
  }

  else if (sec == NET_WIFI_SM_IBSS_OPEN)
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8012bba:	d102      	bne.n	8012bc2 <net_wifi_security_to_string+0xf6>
  {
    s = "IBS";
 8012bbc:	4b2a      	ldr	r3, [pc, #168]	; (8012c68 <net_wifi_security_to_string+0x19c>)
 8012bbe:	60fb      	str	r3, [r7, #12]
 8012bc0:	e00f      	b.n	8012be2 <net_wifi_security_to_string+0x116>
  }
  else if (sec == NET_WIFI_SM_WPS_OPEN)
 8012bc2:	687b      	ldr	r3, [r7, #4]
 8012bc4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8012bc8:	d102      	bne.n	8012bd0 <net_wifi_security_to_string+0x104>
  {
    s = "WPS";
 8012bca:	4b28      	ldr	r3, [pc, #160]	; (8012c6c <net_wifi_security_to_string+0x1a0>)
 8012bcc:	60fb      	str	r3, [r7, #12]
 8012bce:	e008      	b.n	8012be2 <net_wifi_security_to_string+0x116>
  }
  else if (sec == NET_WIFI_SM_WPS_SECURE)
 8012bd0:	687b      	ldr	r3, [r7, #4]
 8012bd2:	4a27      	ldr	r2, [pc, #156]	; (8012c70 <net_wifi_security_to_string+0x1a4>)
 8012bd4:	4293      	cmp	r3, r2
 8012bd6:	d102      	bne.n	8012bde <net_wifi_security_to_string+0x112>
  {
    s = "WPS-AES";
 8012bd8:	4b26      	ldr	r3, [pc, #152]	; (8012c74 <net_wifi_security_to_string+0x1a8>)
 8012bda:	60fb      	str	r3, [r7, #12]
 8012bdc:	e001      	b.n	8012be2 <net_wifi_security_to_string+0x116>
  }
  else
  {
    s = "unknown";
 8012bde:	4b26      	ldr	r3, [pc, #152]	; (8012c78 <net_wifi_security_to_string+0x1ac>)
 8012be0:	60fb      	str	r3, [r7, #12]
  }
  return s;
 8012be2:	68fb      	ldr	r3, [r7, #12]
}
 8012be4:	4618      	mov	r0, r3
 8012be6:	3714      	adds	r7, #20
 8012be8:	46bd      	mov	sp, r7
 8012bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bee:	4770      	bx	lr
 8012bf0:	0801b6a4 	.word	0x0801b6a4
 8012bf4:	0801b6ac 	.word	0x0801b6ac
 8012bf8:	00200002 	.word	0x00200002
 8012bfc:	0801b6b8 	.word	0x0801b6b8
 8012c00:	00200006 	.word	0x00200006
 8012c04:	0801b6c4 	.word	0x0801b6c4
 8012c08:	00400004 	.word	0x00400004
 8012c0c:	0801b6d0 	.word	0x0801b6d0
 8012c10:	00400002 	.word	0x00400002
 8012c14:	0801b6dc 	.word	0x0801b6dc
 8012c18:	00400006 	.word	0x00400006
 8012c1c:	0801b6e8 	.word	0x0801b6e8
 8012c20:	40400004 	.word	0x40400004
 8012c24:	0801b6f4 	.word	0x0801b6f4
 8012c28:	01000004 	.word	0x01000004
 8012c2c:	0801b700 	.word	0x0801b700
 8012c30:	01400004 	.word	0x01400004
 8012c34:	0801b708 	.word	0x0801b708
 8012c38:	02200002 	.word	0x02200002
 8012c3c:	0801b714 	.word	0x0801b714
 8012c40:	02200004 	.word	0x02200004
 8012c44:	0801b724 	.word	0x0801b724
 8012c48:	02400002 	.word	0x02400002
 8012c4c:	0801b730 	.word	0x0801b730
 8012c50:	02400004 	.word	0x02400004
 8012c54:	0801b740 	.word	0x0801b740
 8012c58:	02400006 	.word	0x02400006
 8012c5c:	0801b750 	.word	0x0801b750
 8012c60:	42400004 	.word	0x42400004
 8012c64:	0801b760 	.word	0x0801b760
 8012c68:	0801b76c 	.word	0x0801b76c
 8012c6c:	0801b770 	.word	0x0801b770
 8012c70:	10000004 	.word	0x10000004
 8012c74:	0801b774 	.word	0x0801b774
 8012c78:	0801b77c 	.word	0x0801b77c

08012c7c <net_wifi_scan>:
  * @param  ssid is a pointer to a string, when not null, scan searches only this SSID
  * @retval return the number of found access point, max value is "number".
  * This function is a synchronous function.
  */
int32_t net_wifi_scan(net_if_handle_t *pnetif, net_wifi_scan_mode_t mode, char *ssid)
{
 8012c7c:	b580      	push	{r7, lr}
 8012c7e:	b086      	sub	sp, #24
 8012c80:	af00      	add	r7, sp, #0
 8012c82:	60f8      	str	r0, [r7, #12]
 8012c84:	460b      	mov	r3, r1
 8012c86:	607a      	str	r2, [r7, #4]
 8012c88:	72fb      	strb	r3, [r7, #11]
  int32_t ret = NET_OK;
 8012c8a:	2300      	movs	r3, #0
 8012c8c:	617b      	str	r3, [r7, #20]
  net_if_handle_t *const p_netif = netif_check(pnetif);
 8012c8e:	68f8      	ldr	r0, [r7, #12]
 8012c90:	f000 f97a 	bl	8012f88 <netif_check>
 8012c94:	6138      	str	r0, [r7, #16]

  if (p_netif == NULL)
 8012c96:	693b      	ldr	r3, [r7, #16]
 8012c98:	2b00      	cmp	r3, #0
 8012c9a:	d111      	bne.n	8012cc0 <net_wifi_scan+0x44>
  {
    NET_DBG_ERROR("%s", NO_NETWORK_INTERFACE_DEFINED);
 8012c9c:	22e5      	movs	r2, #229	; 0xe5
 8012c9e:	4922      	ldr	r1, [pc, #136]	; (8012d28 <net_wifi_scan+0xac>)
 8012ca0:	4822      	ldr	r0, [pc, #136]	; (8012d2c <net_wifi_scan+0xb0>)
 8012ca2:	f004 fac7 	bl	8017234 <iprintf>
 8012ca6:	4b22      	ldr	r3, [pc, #136]	; (8012d30 <net_wifi_scan+0xb4>)
 8012ca8:	681b      	ldr	r3, [r3, #0]
 8012caa:	4619      	mov	r1, r3
 8012cac:	4821      	ldr	r0, [pc, #132]	; (8012d34 <net_wifi_scan+0xb8>)
 8012cae:	f004 fac1 	bl	8017234 <iprintf>
 8012cb2:	200a      	movs	r0, #10
 8012cb4:	f004 fad0 	bl	8017258 <putchar>
    ret = NET_ERROR_PARAMETER;
 8012cb8:	f06f 0303 	mvn.w	r3, #3
 8012cbc:	617b      	str	r3, [r7, #20]
 8012cbe:	e02e      	b.n	8012d1e <net_wifi_scan+0xa2>
  }
  else if (p_netif->pdrv->if_class != NET_INTERFACE_CLASS_WIFI)
 8012cc0:	693b      	ldr	r3, [r7, #16]
 8012cc2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8012cc6:	781b      	ldrb	r3, [r3, #0]
 8012cc8:	2b00      	cmp	r3, #0
 8012cca:	d00e      	beq.n	8012cea <net_wifi_scan+0x6e>
  {
    NET_DBG_ERROR("Incorrect class interface when calling net_wifi_scan function\n");
 8012ccc:	22ea      	movs	r2, #234	; 0xea
 8012cce:	4916      	ldr	r1, [pc, #88]	; (8012d28 <net_wifi_scan+0xac>)
 8012cd0:	4816      	ldr	r0, [pc, #88]	; (8012d2c <net_wifi_scan+0xb0>)
 8012cd2:	f004 faaf 	bl	8017234 <iprintf>
 8012cd6:	4818      	ldr	r0, [pc, #96]	; (8012d38 <net_wifi_scan+0xbc>)
 8012cd8:	f004 fb1a 	bl	8017310 <puts>
 8012cdc:	200a      	movs	r0, #10
 8012cde:	f004 fabb 	bl	8017258 <putchar>
    ret = NET_ERROR_PARAMETER;
 8012ce2:	f06f 0303 	mvn.w	r3, #3
 8012ce6:	617b      	str	r3, [r7, #20]
 8012ce8:	e019      	b.n	8012d1e <net_wifi_scan+0xa2>
  }
  else
  {
    if (p_netif->pdrv->extension.wifi->scan(p_netif, mode, ssid) != NET_OK)
 8012cea:	693b      	ldr	r3, [r7, #16]
 8012cec:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8012cf0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012cf2:	681b      	ldr	r3, [r3, #0]
 8012cf4:	7af9      	ldrb	r1, [r7, #11]
 8012cf6:	687a      	ldr	r2, [r7, #4]
 8012cf8:	6938      	ldr	r0, [r7, #16]
 8012cfa:	4798      	blx	r3
 8012cfc:	4603      	mov	r3, r0
 8012cfe:	2b00      	cmp	r3, #0
 8012d00:	d00d      	beq.n	8012d1e <net_wifi_scan+0xa2>
    {
      NET_DBG_ERROR("Error when executing net_wifi_scan function\n");
 8012d02:	22f1      	movs	r2, #241	; 0xf1
 8012d04:	4908      	ldr	r1, [pc, #32]	; (8012d28 <net_wifi_scan+0xac>)
 8012d06:	4809      	ldr	r0, [pc, #36]	; (8012d2c <net_wifi_scan+0xb0>)
 8012d08:	f004 fa94 	bl	8017234 <iprintf>
 8012d0c:	480b      	ldr	r0, [pc, #44]	; (8012d3c <net_wifi_scan+0xc0>)
 8012d0e:	f004 faff 	bl	8017310 <puts>
 8012d12:	200a      	movs	r0, #10
 8012d14:	f004 faa0 	bl	8017258 <putchar>
      ret = NET_ERROR_GENERIC;
 8012d18:	f06f 031c 	mvn.w	r3, #28
 8012d1c:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8012d1e:	697b      	ldr	r3, [r7, #20]
}
 8012d20:	4618      	mov	r0, r3
 8012d22:	3718      	adds	r7, #24
 8012d24:	46bd      	mov	sp, r7
 8012d26:	bd80      	pop	{r7, pc}
 8012d28:	0801b79c 	.word	0x0801b79c
 8012d2c:	0801b810 	.word	0x0801b810
 8012d30:	20000100 	.word	0x20000100
 8012d34:	0801b820 	.word	0x0801b820
 8012d38:	0801b824 	.word	0x0801b824
 8012d3c:	0801b864 	.word	0x0801b864

08012d40 <net_wifi_get_scan_results>:
  * @param  results is a pointer to an allocated array of net_wifi_scan_results_t
  * @param  number is unsigned integer, size of the array 'results'
  * @retval return the number of found access point, max value is "number".
  */
int32_t net_wifi_get_scan_results(net_if_handle_t *pnetif, net_wifi_scan_results_t *results, uint8_t number)
{
 8012d40:	b580      	push	{r7, lr}
 8012d42:	b086      	sub	sp, #24
 8012d44:	af00      	add	r7, sp, #0
 8012d46:	60f8      	str	r0, [r7, #12]
 8012d48:	60b9      	str	r1, [r7, #8]
 8012d4a:	4613      	mov	r3, r2
 8012d4c:	71fb      	strb	r3, [r7, #7]
  int32_t ret;
  net_if_handle_t *const p_netif = netif_check(pnetif);
 8012d4e:	68f8      	ldr	r0, [r7, #12]
 8012d50:	f000 f91a 	bl	8012f88 <netif_check>
 8012d54:	6138      	str	r0, [r7, #16]

  if (p_netif == NULL)
 8012d56:	693b      	ldr	r3, [r7, #16]
 8012d58:	2b00      	cmp	r3, #0
 8012d5a:	d112      	bne.n	8012d82 <net_wifi_get_scan_results+0x42>
  {
    NET_DBG_ERROR("%s", NO_NETWORK_INTERFACE_DEFINED);
 8012d5c:	f240 1207 	movw	r2, #263	; 0x107
 8012d60:	491a      	ldr	r1, [pc, #104]	; (8012dcc <net_wifi_get_scan_results+0x8c>)
 8012d62:	481b      	ldr	r0, [pc, #108]	; (8012dd0 <net_wifi_get_scan_results+0x90>)
 8012d64:	f004 fa66 	bl	8017234 <iprintf>
 8012d68:	4b1a      	ldr	r3, [pc, #104]	; (8012dd4 <net_wifi_get_scan_results+0x94>)
 8012d6a:	681b      	ldr	r3, [r3, #0]
 8012d6c:	4619      	mov	r1, r3
 8012d6e:	481a      	ldr	r0, [pc, #104]	; (8012dd8 <net_wifi_get_scan_results+0x98>)
 8012d70:	f004 fa60 	bl	8017234 <iprintf>
 8012d74:	200a      	movs	r0, #10
 8012d76:	f004 fa6f 	bl	8017258 <putchar>
    ret = NET_ERROR_PARAMETER;
 8012d7a:	f06f 0303 	mvn.w	r3, #3
 8012d7e:	617b      	str	r3, [r7, #20]
 8012d80:	e01f      	b.n	8012dc2 <net_wifi_get_scan_results+0x82>
  }
  else if (p_netif->pdrv->if_class != NET_INTERFACE_CLASS_WIFI)
 8012d82:	693b      	ldr	r3, [r7, #16]
 8012d84:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8012d88:	781b      	ldrb	r3, [r3, #0]
 8012d8a:	2b00      	cmp	r3, #0
 8012d8c:	d00f      	beq.n	8012dae <net_wifi_get_scan_results+0x6e>
  {
    NET_DBG_ERROR("Incorrect class interface when calling net_wifi_scan function\n");
 8012d8e:	f44f 7286 	mov.w	r2, #268	; 0x10c
 8012d92:	490e      	ldr	r1, [pc, #56]	; (8012dcc <net_wifi_get_scan_results+0x8c>)
 8012d94:	480e      	ldr	r0, [pc, #56]	; (8012dd0 <net_wifi_get_scan_results+0x90>)
 8012d96:	f004 fa4d 	bl	8017234 <iprintf>
 8012d9a:	4810      	ldr	r0, [pc, #64]	; (8012ddc <net_wifi_get_scan_results+0x9c>)
 8012d9c:	f004 fab8 	bl	8017310 <puts>
 8012da0:	200a      	movs	r0, #10
 8012da2:	f004 fa59 	bl	8017258 <putchar>
    ret = NET_ERROR_PARAMETER;
 8012da6:	f06f 0303 	mvn.w	r3, #3
 8012daa:	617b      	str	r3, [r7, #20]
 8012dac:	e009      	b.n	8012dc2 <net_wifi_get_scan_results+0x82>
  }
  else
  {
    ret = p_netif->pdrv->extension.wifi->get_scan_results(p_netif, results, number);
 8012dae:	693b      	ldr	r3, [r7, #16]
 8012db0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8012db4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012db6:	685b      	ldr	r3, [r3, #4]
 8012db8:	79fa      	ldrb	r2, [r7, #7]
 8012dba:	68b9      	ldr	r1, [r7, #8]
 8012dbc:	6938      	ldr	r0, [r7, #16]
 8012dbe:	4798      	blx	r3
 8012dc0:	6178      	str	r0, [r7, #20]
  }
  return ret;
 8012dc2:	697b      	ldr	r3, [r7, #20]
}
 8012dc4:	4618      	mov	r0, r3
 8012dc6:	3718      	adds	r7, #24
 8012dc8:	46bd      	mov	sp, r7
 8012dca:	bd80      	pop	{r7, pc}
 8012dcc:	0801b79c 	.word	0x0801b79c
 8012dd0:	0801b810 	.word	0x0801b810
 8012dd4:	20000100 	.word	0x20000100
 8012dd8:	0801b820 	.word	0x0801b820
 8012ddc:	0801b824 	.word	0x0801b824

08012de0 <net_wifi_set_credentials>:
  * @param  pnetif_is a pointer to an allocated network interface structure
  * @param  credentials a pointer to a const allocated structure which contain credentials values (SSID, password)
  * @retval 0 in case of success, an error code otherwise
  */
int32_t net_wifi_set_credentials(net_if_handle_t *pnetif, const net_wifi_credentials_t *credentials)
{
 8012de0:	b480      	push	{r7}
 8012de2:	b083      	sub	sp, #12
 8012de4:	af00      	add	r7, sp, #0
 8012de6:	6078      	str	r0, [r7, #4]
 8012de8:	6039      	str	r1, [r7, #0]
  pnetif->pdrv->extension.wifi->credentials = credentials;
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8012df0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012df2:	683a      	ldr	r2, [r7, #0]
 8012df4:	619a      	str	r2, [r3, #24]
  return NET_OK;
 8012df6:	2300      	movs	r3, #0
}
 8012df8:	4618      	mov	r0, r3
 8012dfa:	370c      	adds	r7, #12
 8012dfc:	46bd      	mov	sp, r7
 8012dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e02:	4770      	bx	lr

08012e04 <net_wifi_set_access_mode>:
  * @brief  Set the access mode for a WIFI interface: AP or STA mode
  * @param  pnetif_is a pointer to an allocated network interface structure
  * @retval 0 in case of success, an error code otherwise
  */
int32_t net_wifi_set_access_mode(net_if_handle_t *pnetif, net_wifi_mode_t mode)
{
 8012e04:	b480      	push	{r7}
 8012e06:	b083      	sub	sp, #12
 8012e08:	af00      	add	r7, sp, #0
 8012e0a:	6078      	str	r0, [r7, #4]
 8012e0c:	460b      	mov	r3, r1
 8012e0e:	70fb      	strb	r3, [r7, #3]
  pnetif->pdrv->extension.wifi->mode = mode;
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8012e16:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012e18:	78fa      	ldrb	r2, [r7, #3]
 8012e1a:	771a      	strb	r2, [r3, #28]
  return NET_OK;
 8012e1c:	2300      	movs	r3, #0
}
 8012e1e:	4618      	mov	r0, r3
 8012e20:	370c      	adds	r7, #12
 8012e22:	46bd      	mov	sp, r7
 8012e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e28:	4770      	bx	lr

08012e2a <net_wifi_set_access_channel>:
  * @param  pnetif_is a pointer to an allocated network interface structure
  * @param  channel is an unsigned 8 bit integer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t net_wifi_set_access_channel(net_if_handle_t *pnetif,  uint8_t channel)
{
 8012e2a:	b480      	push	{r7}
 8012e2c:	b083      	sub	sp, #12
 8012e2e:	af00      	add	r7, sp, #0
 8012e30:	6078      	str	r0, [r7, #4]
 8012e32:	460b      	mov	r3, r1
 8012e34:	70fb      	strb	r3, [r7, #3]
  pnetif->pdrv->extension.wifi->access_channel = channel;
 8012e36:	687b      	ldr	r3, [r7, #4]
 8012e38:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8012e3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012e3e:	78fa      	ldrb	r2, [r7, #3]
 8012e40:	775a      	strb	r2, [r3, #29]
  return NET_OK;
 8012e42:	2300      	movs	r3, #0
}
 8012e44:	4618      	mov	r0, r3
 8012e46:	370c      	adds	r7, #12
 8012e48:	46bd      	mov	sp, r7
 8012e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e4e:	4770      	bx	lr

08012e50 <net_wifi_set_ap_max_connections>:
  * @param  pnetif is a pointer to an allocated network interface structure
  * @param  count is an unsigned 8 bit integer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t net_wifi_set_ap_max_connections(net_if_handle_t *pnetif,  uint8_t count)
{
 8012e50:	b480      	push	{r7}
 8012e52:	b083      	sub	sp, #12
 8012e54:	af00      	add	r7, sp, #0
 8012e56:	6078      	str	r0, [r7, #4]
 8012e58:	460b      	mov	r3, r1
 8012e5a:	70fb      	strb	r3, [r7, #3]
  pnetif->pdrv->extension.wifi->max_connections = count;
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8012e62:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012e64:	78fa      	ldrb	r2, [r7, #3]
 8012e66:	779a      	strb	r2, [r3, #30]
  return NET_OK;
 8012e68:	2300      	movs	r3, #0
}
 8012e6a:	4618      	mov	r0, r3
 8012e6c:	370c      	adds	r7, #12
 8012e6e:	46bd      	mov	sp, r7
 8012e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e74:	4770      	bx	lr
	...

08012e78 <netif_add_to_list>:
#define __IO volatile
#endif /* IO */


static void netif_add_to_list(net_if_handle_t *pnetif)
{
 8012e78:	b480      	push	{r7}
 8012e7a:	b085      	sub	sp, #20
 8012e7c:	af00      	add	r7, sp, #0
 8012e7e:	6078      	str	r0, [r7, #4]
  LOCK_NETIF_LIST();
  if (NetIfList == NULL)
 8012e80:	4b0d      	ldr	r3, [pc, #52]	; (8012eb8 <netif_add_to_list+0x40>)
 8012e82:	681b      	ldr	r3, [r3, #0]
 8012e84:	2b00      	cmp	r3, #0
 8012e86:	d103      	bne.n	8012e90 <netif_add_to_list+0x18>
  {
    NetIfList = pnetif;
 8012e88:	4a0b      	ldr	r2, [pc, #44]	; (8012eb8 <netif_add_to_list+0x40>)
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	6013      	str	r3, [r2, #0]
      p_last_netif = p_last_netif->next;
    }
    p_last_netif->next = pnetif;
  }
  UNLOCK_NETIF_LIST();
}
 8012e8e:	e00d      	b.n	8012eac <netif_add_to_list+0x34>
    net_if_handle_t *p_last_netif = NetIfList;
 8012e90:	4b09      	ldr	r3, [pc, #36]	; (8012eb8 <netif_add_to_list+0x40>)
 8012e92:	681b      	ldr	r3, [r3, #0]
 8012e94:	60fb      	str	r3, [r7, #12]
    while (p_last_netif->next != NULL)
 8012e96:	e002      	b.n	8012e9e <netif_add_to_list+0x26>
      p_last_netif = p_last_netif->next;
 8012e98:	68fb      	ldr	r3, [r7, #12]
 8012e9a:	681b      	ldr	r3, [r3, #0]
 8012e9c:	60fb      	str	r3, [r7, #12]
    while (p_last_netif->next != NULL)
 8012e9e:	68fb      	ldr	r3, [r7, #12]
 8012ea0:	681b      	ldr	r3, [r3, #0]
 8012ea2:	2b00      	cmp	r3, #0
 8012ea4:	d1f8      	bne.n	8012e98 <netif_add_to_list+0x20>
    p_last_netif->next = pnetif;
 8012ea6:	68fb      	ldr	r3, [r7, #12]
 8012ea8:	687a      	ldr	r2, [r7, #4]
 8012eaa:	601a      	str	r2, [r3, #0]
}
 8012eac:	bf00      	nop
 8012eae:	3714      	adds	r7, #20
 8012eb0:	46bd      	mov	sp, r7
 8012eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eb6:	4770      	bx	lr
 8012eb8:	20003340 	.word	0x20003340

08012ebc <netif_remove_from_list>:


static void netif_remove_from_list(net_if_handle_t *pnetif)
{
 8012ebc:	b480      	push	{r7}
 8012ebe:	b085      	sub	sp, #20
 8012ec0:	af00      	add	r7, sp, #0
 8012ec2:	6078      	str	r0, [r7, #4]
  LOCK_NETIF_LIST();

  if (NetIfList == pnetif)
 8012ec4:	4b13      	ldr	r3, [pc, #76]	; (8012f14 <netif_remove_from_list+0x58>)
 8012ec6:	681b      	ldr	r3, [r3, #0]
 8012ec8:	687a      	ldr	r2, [r7, #4]
 8012eca:	429a      	cmp	r2, r3
 8012ecc:	d105      	bne.n	8012eda <netif_remove_from_list+0x1e>
  {
    NetIfList = NetIfList->next;
 8012ece:	4b11      	ldr	r3, [pc, #68]	; (8012f14 <netif_remove_from_list+0x58>)
 8012ed0:	681b      	ldr	r3, [r3, #0]
 8012ed2:	681b      	ldr	r3, [r3, #0]
 8012ed4:	4a0f      	ldr	r2, [pc, #60]	; (8012f14 <netif_remove_from_list+0x58>)
 8012ed6:	6013      	str	r3, [r2, #0]
        break;
      }
    }
  }
  UNLOCK_NETIF_LIST();
}
 8012ed8:	e015      	b.n	8012f06 <netif_remove_from_list+0x4a>
    for (net_if_handle_t *p_netif_prev = NetIfList; p_netif_prev->next != NULL; p_netif_prev = p_netif_prev->next)
 8012eda:	4b0e      	ldr	r3, [pc, #56]	; (8012f14 <netif_remove_from_list+0x58>)
 8012edc:	681b      	ldr	r3, [r3, #0]
 8012ede:	60fb      	str	r3, [r7, #12]
 8012ee0:	e00d      	b.n	8012efe <netif_remove_from_list+0x42>
      if (p_netif_prev->next == pnetif)
 8012ee2:	68fb      	ldr	r3, [r7, #12]
 8012ee4:	681b      	ldr	r3, [r3, #0]
 8012ee6:	687a      	ldr	r2, [r7, #4]
 8012ee8:	429a      	cmp	r2, r3
 8012eea:	d105      	bne.n	8012ef8 <netif_remove_from_list+0x3c>
        p_netif_prev->next = pnetif->next;
 8012eec:	687b      	ldr	r3, [r7, #4]
 8012eee:	681a      	ldr	r2, [r3, #0]
 8012ef0:	68fb      	ldr	r3, [r7, #12]
 8012ef2:	601a      	str	r2, [r3, #0]
        break;
 8012ef4:	bf00      	nop
}
 8012ef6:	e006      	b.n	8012f06 <netif_remove_from_list+0x4a>
    for (net_if_handle_t *p_netif_prev = NetIfList; p_netif_prev->next != NULL; p_netif_prev = p_netif_prev->next)
 8012ef8:	68fb      	ldr	r3, [r7, #12]
 8012efa:	681b      	ldr	r3, [r3, #0]
 8012efc:	60fb      	str	r3, [r7, #12]
 8012efe:	68fb      	ldr	r3, [r7, #12]
 8012f00:	681b      	ldr	r3, [r3, #0]
 8012f02:	2b00      	cmp	r3, #0
 8012f04:	d1ed      	bne.n	8012ee2 <netif_remove_from_list+0x26>
}
 8012f06:	bf00      	nop
 8012f08:	3714      	adds	r7, #20
 8012f0a:	46bd      	mov	sp, r7
 8012f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f10:	4770      	bx	lr
 8012f12:	bf00      	nop
 8012f14:	20003340 	.word	0x20003340

08012f18 <net_if_find>:
  * @brief  Function description
  * @param  addr
  * @retval socket status
  */
net_if_handle_t *net_if_find(net_sockaddr_t *addr)
{
 8012f18:	b580      	push	{r7, lr}
 8012f1a:	b086      	sub	sp, #24
 8012f1c:	af00      	add	r7, sp, #0
 8012f1e:	6078      	str	r0, [r7, #4]
  const net_if_handle_t *ptr;
  net_ip_addr_t ipaddr = {0};
 8012f20:	2300      	movs	r3, #0
 8012f22:	613b      	str	r3, [r7, #16]
  net_ip_addr_t ipaddr_zero = {0};
 8012f24:	2300      	movs	r3, #0
 8012f26:	60fb      	str	r3, [r7, #12]

  if (addr != NULL)
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	2b00      	cmp	r3, #0
 8012f2c:	d004      	beq.n	8012f38 <net_if_find+0x20>
  {
    ipaddr = net_get_ip_addr(addr);
 8012f2e:	6878      	ldr	r0, [r7, #4]
 8012f30:	f7ff fdab 	bl	8012a8a <net_get_ip_addr>
 8012f34:	4603      	mov	r3, r0
 8012f36:	613b      	str	r3, [r7, #16]
  }

  LOCK_NETIF_LIST();

  ptr = NetIfList;
 8012f38:	4b12      	ldr	r3, [pc, #72]	; (8012f84 <net_if_find+0x6c>)
 8012f3a:	681b      	ldr	r3, [r3, #0]
 8012f3c:	617b      	str	r3, [r7, #20]
  if (NET_DIFF(ipaddr, ipaddr_zero) != 0)
 8012f3e:	f107 010c 	add.w	r1, r7, #12
 8012f42:	f107 0310 	add.w	r3, r7, #16
 8012f46:	2204      	movs	r2, #4
 8012f48:	4618      	mov	r0, r3
 8012f4a:	f004 fa1d 	bl	8017388 <memcmp>
 8012f4e:	4603      	mov	r3, r0
 8012f50:	2b00      	cmp	r3, #0
 8012f52:	d012      	beq.n	8012f7a <net_if_find+0x62>
  {
    do
    {
      if (NET_EQUAL(ptr->ipaddr, ipaddr))
 8012f54:	697b      	ldr	r3, [r7, #20]
 8012f56:	3304      	adds	r3, #4
 8012f58:	f107 0110 	add.w	r1, r7, #16
 8012f5c:	2204      	movs	r2, #4
 8012f5e:	4618      	mov	r0, r3
 8012f60:	f004 fa12 	bl	8017388 <memcmp>
 8012f64:	4603      	mov	r3, r0
 8012f66:	2b00      	cmp	r3, #0
 8012f68:	d006      	beq.n	8012f78 <net_if_find+0x60>
      {
        break;
      }
      ptr = ptr->next;
 8012f6a:	697b      	ldr	r3, [r7, #20]
 8012f6c:	681b      	ldr	r3, [r3, #0]
 8012f6e:	617b      	str	r3, [r7, #20]
    } while (ptr != NULL);
 8012f70:	697b      	ldr	r3, [r7, #20]
 8012f72:	2b00      	cmp	r3, #0
 8012f74:	d1ee      	bne.n	8012f54 <net_if_find+0x3c>
 8012f76:	e000      	b.n	8012f7a <net_if_find+0x62>
        break;
 8012f78:	bf00      	nop
  }
  UNLOCK_NETIF_LIST();

  return (net_if_handle_t *)ptr;
 8012f7a:	697b      	ldr	r3, [r7, #20]
}
 8012f7c:	4618      	mov	r0, r3
 8012f7e:	3718      	adds	r7, #24
 8012f80:	46bd      	mov	sp, r7
 8012f82:	bd80      	pop	{r7, pc}
 8012f84:	20003340 	.word	0x20003340

08012f88 <netif_check>:


net_if_handle_t *netif_check(net_if_handle_t *pnetif)
{
 8012f88:	b580      	push	{r7, lr}
 8012f8a:	b084      	sub	sp, #16
 8012f8c:	af00      	add	r7, sp, #0
 8012f8e:	6078      	str	r0, [r7, #4]
  net_if_handle_t *p_netif = pnetif;
 8012f90:	687b      	ldr	r3, [r7, #4]
 8012f92:	60fb      	str	r3, [r7, #12]
  if (p_netif == NULL)
 8012f94:	68fb      	ldr	r3, [r7, #12]
 8012f96:	2b00      	cmp	r3, #0
 8012f98:	d111      	bne.n	8012fbe <netif_check+0x36>
  {
    /* Get default interface. */
    p_netif = net_if_find(NULL);
 8012f9a:	2000      	movs	r0, #0
 8012f9c:	f7ff ffbc 	bl	8012f18 <net_if_find>
 8012fa0:	60f8      	str	r0, [r7, #12]
    if (p_netif == NULL)
 8012fa2:	68fb      	ldr	r3, [r7, #12]
 8012fa4:	2b00      	cmp	r3, #0
 8012fa6:	d10a      	bne.n	8012fbe <netif_check+0x36>
    {
      NET_DBG_ERROR("No network interface defined\n");
 8012fa8:	227c      	movs	r2, #124	; 0x7c
 8012faa:	4907      	ldr	r1, [pc, #28]	; (8012fc8 <netif_check+0x40>)
 8012fac:	4807      	ldr	r0, [pc, #28]	; (8012fcc <netif_check+0x44>)
 8012fae:	f004 f941 	bl	8017234 <iprintf>
 8012fb2:	4807      	ldr	r0, [pc, #28]	; (8012fd0 <netif_check+0x48>)
 8012fb4:	f004 f9ac 	bl	8017310 <puts>
 8012fb8:	200a      	movs	r0, #10
 8012fba:	f004 f94d 	bl	8017258 <putchar>
    }
  }
  return p_netif;
 8012fbe:	68fb      	ldr	r3, [r7, #12]
}
 8012fc0:	4618      	mov	r0, r3
 8012fc2:	3710      	adds	r7, #16
 8012fc4:	46bd      	mov	sp, r7
 8012fc6:	bd80      	pop	{r7, pc}
 8012fc8:	0801b998 	.word	0x0801b998
 8012fcc:	0801ba00 	.word	0x0801ba00
 8012fd0:	0801ba10 	.word	0x0801ba10

08012fd4 <net_if_wait_state>:
  * @param  state  the expected state
  * @param  timeout max time to wait in ms for the transition
  * @retval 0 in case of success, an error code otherwise
  */
int32_t net_if_wait_state(net_if_handle_t *pnetif, net_state_t state, uint32_t timeout)
{
 8012fd4:	b590      	push	{r4, r7, lr}
 8012fd6:	b089      	sub	sp, #36	; 0x24
 8012fd8:	af00      	add	r7, sp, #0
 8012fda:	60f8      	str	r0, [r7, #12]
 8012fdc:	460b      	mov	r3, r1
 8012fde:	607a      	str	r2, [r7, #4]
 8012fe0:	72fb      	strb	r3, [r7, #11]
  int32_t ret = NET_OK;
 8012fe2:	2300      	movs	r3, #0
 8012fe4:	61fb      	str	r3, [r7, #28]
  __IO net_state_t *const p = &pnetif->state;
 8012fe6:	68fb      	ldr	r3, [r7, #12]
 8012fe8:	33eb      	adds	r3, #235	; 0xeb
 8012fea:	61bb      	str	r3, [r7, #24]

  uint32_t start_time = HAL_GetTick();
 8012fec:	f7f7 fb4e 	bl	800a68c <HAL_GetTick>
 8012ff0:	6178      	str	r0, [r7, #20]
  while (*p != state)
 8012ff2:	e019      	b.n	8013028 <net_if_wait_state+0x54>
  {
    if (HAL_GetTick() >= (start_time + timeout))
 8012ff4:	f7f7 fb4a 	bl	800a68c <HAL_GetTick>
 8012ff8:	4601      	mov	r1, r0
 8012ffa:	697a      	ldr	r2, [r7, #20]
 8012ffc:	687b      	ldr	r3, [r7, #4]
 8012ffe:	4413      	add	r3, r2
 8013000:	4299      	cmp	r1, r3
 8013002:	d303      	bcc.n	801300c <net_if_wait_state+0x38>
    {
      ret = NET_TIMEOUT;
 8013004:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013008:	61fb      	str	r3, [r7, #28]
      break;
 801300a:	e013      	b.n	8013034 <net_if_wait_state+0x60>
    }
    WAIT_STATE_CHANGE(timeout - (HAL_GetTick() - start_time));
 801300c:	68fb      	ldr	r3, [r7, #12]
 801300e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8013012:	695c      	ldr	r4, [r3, #20]
 8013014:	f7f7 fb3a 	bl	800a68c <HAL_GetTick>
 8013018:	4602      	mov	r2, r0
 801301a:	697b      	ldr	r3, [r7, #20]
 801301c:	1a9a      	subs	r2, r3, r2
 801301e:	687b      	ldr	r3, [r7, #4]
 8013020:	4413      	add	r3, r2
 8013022:	4619      	mov	r1, r3
 8013024:	68f8      	ldr	r0, [r7, #12]
 8013026:	47a0      	blx	r4
  while (*p != state)
 8013028:	69bb      	ldr	r3, [r7, #24]
 801302a:	781b      	ldrb	r3, [r3, #0]
 801302c:	b2db      	uxtb	r3, r3
 801302e:	7afa      	ldrb	r2, [r7, #11]
 8013030:	429a      	cmp	r2, r3
 8013032:	d1df      	bne.n	8012ff4 <net_if_wait_state+0x20>
  }
  return ret;
 8013034:	69fb      	ldr	r3, [r7, #28]
}
 8013036:	4618      	mov	r0, r3
 8013038:	3724      	adds	r7, #36	; 0x24
 801303a:	46bd      	mov	sp, r7
 801303c:	bd90      	pop	{r4, r7, pc}

0801303e <net_if_notify>:


void net_if_notify(net_if_handle_t *pnetif, net_evt_t event_class, uint32_t event_id, void *event_data)
{
 801303e:	b590      	push	{r4, r7, lr}
 8013040:	b085      	sub	sp, #20
 8013042:	af00      	add	r7, sp, #0
 8013044:	60f8      	str	r0, [r7, #12]
 8013046:	607a      	str	r2, [r7, #4]
 8013048:	603b      	str	r3, [r7, #0]
 801304a:	460b      	mov	r3, r1
 801304c:	72fb      	strb	r3, [r7, #11]
  /* call the user Handler first ,FIXME , first or not , race between wait state transition and user handler */
  if ((NULL != pnetif->event_handler) && (NULL != pnetif->event_handler->callback))
 801304e:	68fb      	ldr	r3, [r7, #12]
 8013050:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8013054:	2b00      	cmp	r3, #0
 8013056:	d011      	beq.n	801307c <net_if_notify+0x3e>
 8013058:	68fb      	ldr	r3, [r7, #12]
 801305a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 801305e:	681b      	ldr	r3, [r3, #0]
 8013060:	2b00      	cmp	r3, #0
 8013062:	d00b      	beq.n	801307c <net_if_notify+0x3e>
  {
    pnetif->event_handler->callback(pnetif->event_handler->context, event_class, event_id, event_data);
 8013064:	68fb      	ldr	r3, [r7, #12]
 8013066:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 801306a:	681c      	ldr	r4, [r3, #0]
 801306c:	68fb      	ldr	r3, [r7, #12]
 801306e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8013072:	6858      	ldr	r0, [r3, #4]
 8013074:	7af9      	ldrb	r1, [r7, #11]
 8013076:	683b      	ldr	r3, [r7, #0]
 8013078:	687a      	ldr	r2, [r7, #4]
 801307a:	47a0      	blx	r4
  }
}
 801307c:	bf00      	nop
 801307e:	3714      	adds	r7, #20
 8013080:	46bd      	mov	sp, r7
 8013082:	bd90      	pop	{r4, r7, pc}

08013084 <net_if_init>:
  * @retval 0 in case of success, an error code otherwise
   * This function is a synchronous function.
  */
int32_t net_if_init(net_if_handle_t *pnetif, net_if_driver_init_func driver_init,
                    const net_event_handler_t *event_handler)
{
 8013084:	b580      	push	{r7, lr}
 8013086:	b086      	sub	sp, #24
 8013088:	af00      	add	r7, sp, #0
 801308a:	60f8      	str	r0, [r7, #12]
 801308c:	60b9      	str	r1, [r7, #8]
 801308e:	607a      	str	r2, [r7, #4]
  int32_t ret;
  net_if_handle_t *const p_netif = pnetif;
 8013090:	68fb      	ldr	r3, [r7, #12]
 8013092:	613b      	str	r3, [r7, #16]
    net_init_locks();
    NetInitialized = 1;
  }
#endif /* NET_USE_RTOS */

  if (p_netif != NULL)
 8013094:	693b      	ldr	r3, [r7, #16]
 8013096:	2b00      	cmp	r3, #0
 8013098:	d027      	beq.n	80130ea <net_if_init+0x66>
  {
    p_netif->event_handler = event_handler;
 801309a:	693b      	ldr	r3, [r7, #16]
 801309c:	687a      	ldr	r2, [r7, #4]
 801309e:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    p_netif->state = NET_STATE_INITIALIZED;
 80130a2:	693b      	ldr	r3, [r7, #16]
 80130a4:	2201      	movs	r2, #1
 80130a6:	f883 20eb 	strb.w	r2, [r3, #235]	; 0xeb
    netif_add_to_list(p_netif);
 80130aa:	6938      	ldr	r0, [r7, #16]
 80130ac:	f7ff fee4 	bl	8012e78 <netif_add_to_list>
    ret = (*driver_init)(p_netif);
 80130b0:	68bb      	ldr	r3, [r7, #8]
 80130b2:	6938      	ldr	r0, [r7, #16]
 80130b4:	4798      	blx	r3
 80130b6:	6178      	str	r0, [r7, #20]
    if (NET_OK != ret)
 80130b8:	697b      	ldr	r3, [r7, #20]
 80130ba:	2b00      	cmp	r3, #0
 80130bc:	d023      	beq.n	8013106 <net_if_init+0x82>
    {
      p_netif->state = NET_STATE_DEINITIALIZED;
 80130be:	693b      	ldr	r3, [r7, #16]
 80130c0:	2200      	movs	r2, #0
 80130c2:	f883 20eb 	strb.w	r2, [r3, #235]	; 0xeb
      netif_remove_from_list(p_netif);
 80130c6:	6938      	ldr	r0, [r7, #16]
 80130c8:	f7ff fef8 	bl	8012ebc <netif_remove_from_list>

      NET_DBG_ERROR("Interface cannot be initialized.\n");
 80130cc:	22d8      	movs	r2, #216	; 0xd8
 80130ce:	4910      	ldr	r1, [pc, #64]	; (8013110 <net_if_init+0x8c>)
 80130d0:	4810      	ldr	r0, [pc, #64]	; (8013114 <net_if_init+0x90>)
 80130d2:	f004 f8af 	bl	8017234 <iprintf>
 80130d6:	4810      	ldr	r0, [pc, #64]	; (8013118 <net_if_init+0x94>)
 80130d8:	f004 f91a 	bl	8017310 <puts>
 80130dc:	200a      	movs	r0, #10
 80130de:	f004 f8bb 	bl	8017258 <putchar>
      ret = NET_ERROR_INTERFACE_FAILURE;
 80130e2:	f06f 0310 	mvn.w	r3, #16
 80130e6:	617b      	str	r3, [r7, #20]
 80130e8:	e00d      	b.n	8013106 <net_if_init+0x82>
    }
  }
  else
  {
    NET_DBG_ERROR("Invalid interface.\n");
 80130ea:	22de      	movs	r2, #222	; 0xde
 80130ec:	4908      	ldr	r1, [pc, #32]	; (8013110 <net_if_init+0x8c>)
 80130ee:	4809      	ldr	r0, [pc, #36]	; (8013114 <net_if_init+0x90>)
 80130f0:	f004 f8a0 	bl	8017234 <iprintf>
 80130f4:	4809      	ldr	r0, [pc, #36]	; (801311c <net_if_init+0x98>)
 80130f6:	f004 f90b 	bl	8017310 <puts>
 80130fa:	200a      	movs	r0, #10
 80130fc:	f004 f8ac 	bl	8017258 <putchar>
    ret = NET_ERROR_PARAMETER;
 8013100:	f06f 0303 	mvn.w	r3, #3
 8013104:	617b      	str	r3, [r7, #20]
    net_destroy_locks();
    NetInitialized = 0;
  }
#endif /* NET_USE_RTOS */

  return ret;
 8013106:	697b      	ldr	r3, [r7, #20]
}
 8013108:	4618      	mov	r0, r3
 801310a:	3718      	adds	r7, #24
 801310c:	46bd      	mov	sp, r7
 801310e:	bd80      	pop	{r7, pc}
 8013110:	0801b998 	.word	0x0801b998
 8013114:	0801ba00 	.word	0x0801ba00
 8013118:	0801ba30 	.word	0x0801ba30
 801311c:	0801ba54 	.word	0x0801ba54

08013120 <net_if_start>:
  * @brief  Start network interface
  * @param  pnetif a pointer to an allocated network interface structure
  * @retval 0 in case of success, an error code otherwise
  */
int32_t net_if_start(net_if_handle_t *pnetif)
{
 8013120:	b580      	push	{r7, lr}
 8013122:	b082      	sub	sp, #8
 8013124:	af00      	add	r7, sp, #0
 8013126:	6078      	str	r0, [r7, #4]
  return net_state_manage_event(pnetif, NET_EVENT_CMD_START);
 8013128:	2101      	movs	r1, #1
 801312a:	6878      	ldr	r0, [r7, #4]
 801312c:	f001 f88a 	bl	8014244 <net_state_manage_event>
 8013130:	4603      	mov	r3, r0
}
 8013132:	4618      	mov	r0, r3
 8013134:	3708      	adds	r7, #8
 8013136:	46bd      	mov	sp, r7
 8013138:	bd80      	pop	{r7, pc}

0801313a <net_if_connect>:
  * @brief  Connect network interface
  * @param  pnetif a pointer to an allocated network interface structure
  * @retval 0 in case of success, an error code otherwise
  */
int32_t net_if_connect(net_if_handle_t *pnetif)
{
 801313a:	b580      	push	{r7, lr}
 801313c:	b082      	sub	sp, #8
 801313e:	af00      	add	r7, sp, #0
 8013140:	6078      	str	r0, [r7, #4]
  return net_state_manage_event(pnetif, NET_EVENT_CMD_CONNECT);
 8013142:	2102      	movs	r1, #2
 8013144:	6878      	ldr	r0, [r7, #4]
 8013146:	f001 f87d 	bl	8014244 <net_state_manage_event>
 801314a:	4603      	mov	r3, r0
}
 801314c:	4618      	mov	r0, r3
 801314e:	3708      	adds	r7, #8
 8013150:	46bd      	mov	sp, r7
 8013152:	bd80      	pop	{r7, pc}

08013154 <net_if_getState>:
  * @param  pnetif a pointer to an allocated network interface structure
  * @param  state  a pointer to a net_state_t enum
  * @retval 0 in case of success, an error code otherwise
  */
int32_t net_if_getState(net_if_handle_t *pnetif, net_state_t *state)
{
 8013154:	b580      	push	{r7, lr}
 8013156:	b084      	sub	sp, #16
 8013158:	af00      	add	r7, sp, #0
 801315a:	6078      	str	r0, [r7, #4]
 801315c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  const net_if_handle_t *const p_netif = netif_check(pnetif);
 801315e:	6878      	ldr	r0, [r7, #4]
 8013160:	f7ff ff12 	bl	8012f88 <netif_check>
 8013164:	60b8      	str	r0, [r7, #8]

  if (p_netif != NULL)
 8013166:	68bb      	ldr	r3, [r7, #8]
 8013168:	2b00      	cmp	r3, #0
 801316a:	d007      	beq.n	801317c <net_if_getState+0x28>
  {
    *state = p_netif->state;
 801316c:	68bb      	ldr	r3, [r7, #8]
 801316e:	f893 20eb 	ldrb.w	r2, [r3, #235]	; 0xeb
 8013172:	683b      	ldr	r3, [r7, #0]
 8013174:	701a      	strb	r2, [r3, #0]
    ret = NET_OK;
 8013176:	2300      	movs	r3, #0
 8013178:	60fb      	str	r3, [r7, #12]
 801317a:	e011      	b.n	80131a0 <net_if_getState+0x4c>
  }
  else
  {
    NET_DBG_ERROR("Invalid interface.\n");
 801317c:	f240 1289 	movw	r2, #393	; 0x189
 8013180:	490a      	ldr	r1, [pc, #40]	; (80131ac <net_if_getState+0x58>)
 8013182:	480b      	ldr	r0, [pc, #44]	; (80131b0 <net_if_getState+0x5c>)
 8013184:	f004 f856 	bl	8017234 <iprintf>
 8013188:	480a      	ldr	r0, [pc, #40]	; (80131b4 <net_if_getState+0x60>)
 801318a:	f004 f8c1 	bl	8017310 <puts>
 801318e:	200a      	movs	r0, #10
 8013190:	f004 f862 	bl	8017258 <putchar>
    *state = NET_STATE_DEINITIALIZED;
 8013194:	683b      	ldr	r3, [r7, #0]
 8013196:	2200      	movs	r2, #0
 8013198:	701a      	strb	r2, [r3, #0]
    ret = NET_ERROR_PARAMETER;
 801319a:	f06f 0303 	mvn.w	r3, #3
 801319e:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 80131a0:	68fb      	ldr	r3, [r7, #12]
}
 80131a2:	4618      	mov	r0, r3
 80131a4:	3710      	adds	r7, #16
 80131a6:	46bd      	mov	sp, r7
 80131a8:	bd80      	pop	{r7, pc}
 80131aa:	bf00      	nop
 80131ac:	0801b998 	.word	0x0801b998
 80131b0:	0801ba00 	.word	0x0801ba00
 80131b4:	0801ba54 	.word	0x0801ba54

080131b8 <net_if_get_ip_address>:
  * @param  pnetif a pointer to an allocated network interface structure
  * @param  ip a pointer to an allocated net_ip_addr_t structure
  * @retval 0 in case of success, an error code otherwise
  */
int32_t net_if_get_ip_address(net_if_handle_t *pnetif, net_ip_addr_t *ip)
{
 80131b8:	b580      	push	{r7, lr}
 80131ba:	b084      	sub	sp, #16
 80131bc:	af00      	add	r7, sp, #0
 80131be:	6078      	str	r0, [r7, #4]
 80131c0:	6039      	str	r1, [r7, #0]
  int32_t ret;
  const net_if_handle_t *const p_netif = netif_check(pnetif);
 80131c2:	6878      	ldr	r0, [r7, #4]
 80131c4:	f7ff fee0 	bl	8012f88 <netif_check>
 80131c8:	60b8      	str	r0, [r7, #8]

  if ((p_netif != NULL) && (ip != NULL))
 80131ca:	68bb      	ldr	r3, [r7, #8]
 80131cc:	2b00      	cmp	r3, #0
 80131ce:	d01e      	beq.n	801320e <net_if_get_ip_address+0x56>
 80131d0:	683b      	ldr	r3, [r7, #0]
 80131d2:	2b00      	cmp	r3, #0
 80131d4:	d01b      	beq.n	801320e <net_if_get_ip_address+0x56>
  {
    if (p_netif->state == NET_STATE_CONNECTED)
 80131d6:	68bb      	ldr	r3, [r7, #8]
 80131d8:	f893 30eb 	ldrb.w	r3, [r3, #235]	; 0xeb
 80131dc:	2b05      	cmp	r3, #5
 80131de:	d106      	bne.n	80131ee <net_if_get_ip_address+0x36>
    {
      *ip = p_netif->ipaddr;
 80131e0:	683b      	ldr	r3, [r7, #0]
 80131e2:	68ba      	ldr	r2, [r7, #8]
 80131e4:	6852      	ldr	r2, [r2, #4]
 80131e6:	601a      	str	r2, [r3, #0]
      ret = NET_OK;
 80131e8:	2300      	movs	r3, #0
 80131ea:	60fb      	str	r3, [r7, #12]
    if (p_netif->state == NET_STATE_CONNECTED)
 80131ec:	e01e      	b.n	801322c <net_if_get_ip_address+0x74>
    }
    else
    {
      NET_DBG_ERROR("Can get ipaddr for un-connected network interface.\n");
 80131ee:	f44f 72f6 	mov.w	r2, #492	; 0x1ec
 80131f2:	4911      	ldr	r1, [pc, #68]	; (8013238 <net_if_get_ip_address+0x80>)
 80131f4:	4811      	ldr	r0, [pc, #68]	; (801323c <net_if_get_ip_address+0x84>)
 80131f6:	f004 f81d 	bl	8017234 <iprintf>
 80131fa:	4811      	ldr	r0, [pc, #68]	; (8013240 <net_if_get_ip_address+0x88>)
 80131fc:	f004 f888 	bl	8017310 <puts>
 8013200:	200a      	movs	r0, #10
 8013202:	f004 f829 	bl	8017258 <putchar>
      ret = NET_ERROR_INTERFACE_FAILURE;
 8013206:	f06f 0310 	mvn.w	r3, #16
 801320a:	60fb      	str	r3, [r7, #12]
    if (p_netif->state == NET_STATE_CONNECTED)
 801320c:	e00e      	b.n	801322c <net_if_get_ip_address+0x74>
    }
  }
  else
  {
    NET_DBG_ERROR("Invalid interface.\n");
 801320e:	f44f 72f9 	mov.w	r2, #498	; 0x1f2
 8013212:	4909      	ldr	r1, [pc, #36]	; (8013238 <net_if_get_ip_address+0x80>)
 8013214:	4809      	ldr	r0, [pc, #36]	; (801323c <net_if_get_ip_address+0x84>)
 8013216:	f004 f80d 	bl	8017234 <iprintf>
 801321a:	480a      	ldr	r0, [pc, #40]	; (8013244 <net_if_get_ip_address+0x8c>)
 801321c:	f004 f878 	bl	8017310 <puts>
 8013220:	200a      	movs	r0, #10
 8013222:	f004 f819 	bl	8017258 <putchar>
    ret = NET_ERROR_PARAMETER;
 8013226:	f06f 0303 	mvn.w	r3, #3
 801322a:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 801322c:	68fb      	ldr	r3, [r7, #12]
}
 801322e:	4618      	mov	r0, r3
 8013230:	3710      	adds	r7, #16
 8013232:	46bd      	mov	sp, r7
 8013234:	bd80      	pop	{r7, pc}
 8013236:	bf00      	nop
 8013238:	0801b998 	.word	0x0801b998
 801323c:	0801ba00 	.word	0x0801ba00
 8013240:	0801bb1c 	.word	0x0801bb1c
 8013244:	0801ba54 	.word	0x0801ba54

08013248 <net_if_set_dhcp_mode>:
  * @param  pnetif a pointer to an allocated network interface structure
  * @param  mode is a boolean, true to activate DHCP
  * @retval 0 in case of success, an error code otherwise
  */
int32_t net_if_set_dhcp_mode(net_if_handle_t *pnetif, bool mode)
{
 8013248:	b580      	push	{r7, lr}
 801324a:	b084      	sub	sp, #16
 801324c:	af00      	add	r7, sp, #0
 801324e:	6078      	str	r0, [r7, #4]
 8013250:	460b      	mov	r3, r1
 8013252:	70fb      	strb	r3, [r7, #3]
  int32_t ret = NET_ERROR_FRAMEWORK;
 8013254:	f06f 0318 	mvn.w	r3, #24
 8013258:	60fb      	str	r3, [r7, #12]
  net_if_handle_t *const p_netif = netif_check(pnetif);
 801325a:	6878      	ldr	r0, [r7, #4]
 801325c:	f7ff fe94 	bl	8012f88 <netif_check>
 8013260:	60b8      	str	r0, [r7, #8]

  if (p_netif != NULL)
 8013262:	68bb      	ldr	r3, [r7, #8]
 8013264:	2b00      	cmp	r3, #0
 8013266:	d005      	beq.n	8013274 <net_if_set_dhcp_mode+0x2c>
  {
    p_netif->dhcp_mode = mode;
 8013268:	68bb      	ldr	r3, [r7, #8]
 801326a:	78fa      	ldrb	r2, [r7, #3]
 801326c:	f883 2020 	strb.w	r2, [r3, #32]
    ret = NET_OK;
 8013270:	2300      	movs	r3, #0
 8013272:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 8013274:	68fb      	ldr	r3, [r7, #12]
}
 8013276:	4618      	mov	r0, r3
 8013278:	3710      	adds	r7, #16
 801327a:	46bd      	mov	sp, r7
 801327c:	bd80      	pop	{r7, pc}

0801327e <net_if_set_dhcp_server_mode>:
  * @param  pnetif a pointer to an allocated network interface structure
  * @param  mode is a boolean, true to activate the DHCP server
  * @retval 0 in case of success, an error code otherwise
  */
int32_t net_if_set_dhcp_server_mode(net_if_handle_t *pnetif, bool mode)
{
 801327e:	b580      	push	{r7, lr}
 8013280:	b084      	sub	sp, #16
 8013282:	af00      	add	r7, sp, #0
 8013284:	6078      	str	r0, [r7, #4]
 8013286:	460b      	mov	r3, r1
 8013288:	70fb      	strb	r3, [r7, #3]
  int32_t ret = NET_ERROR_FRAMEWORK;
 801328a:	f06f 0318 	mvn.w	r3, #24
 801328e:	60fb      	str	r3, [r7, #12]
  net_if_handle_t *const p_netif = netif_check(pnetif);
 8013290:	6878      	ldr	r0, [r7, #4]
 8013292:	f7ff fe79 	bl	8012f88 <netif_check>
 8013296:	60b8      	str	r0, [r7, #8]

  if (p_netif != NULL)
 8013298:	68bb      	ldr	r3, [r7, #8]
 801329a:	2b00      	cmp	r3, #0
 801329c:	d005      	beq.n	80132aa <net_if_set_dhcp_server_mode+0x2c>
  {
    p_netif->dhcp_server = mode;
 801329e:	68bb      	ldr	r3, [r7, #8]
 80132a0:	78fa      	ldrb	r2, [r7, #3]
 80132a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    ret = NET_OK;
 80132a6:	2300      	movs	r3, #0
 80132a8:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 80132aa:	68fb      	ldr	r3, [r7, #12]
}
 80132ac:	4618      	mov	r0, r3
 80132ae:	3710      	adds	r7, #16
 80132b0:	46bd      	mov	sp, r7
 80132b2:	bd80      	pop	{r7, pc}

080132b4 <net_if_set_ipaddr>:
  * @param  netmask is a pointer to the net_ip_addr_t structure used as the netmask
  * @retval 0 in case of success, an error code otherwise
  */
int32_t net_if_set_ipaddr(net_if_handle_t *pnetif, net_ip_addr_t ipaddr,
                          net_ip_addr_t gateway, net_ip_addr_t netmask)
{
 80132b4:	b580      	push	{r7, lr}
 80132b6:	b086      	sub	sp, #24
 80132b8:	af00      	add	r7, sp, #0
 80132ba:	60f8      	str	r0, [r7, #12]
 80132bc:	60b9      	str	r1, [r7, #8]
 80132be:	607a      	str	r2, [r7, #4]
 80132c0:	603b      	str	r3, [r7, #0]
  int32_t ret = NET_ERROR_FRAMEWORK;
 80132c2:	f06f 0318 	mvn.w	r3, #24
 80132c6:	617b      	str	r3, [r7, #20]
  net_if_handle_t *const p_netif = netif_check(pnetif);
 80132c8:	68f8      	ldr	r0, [r7, #12]
 80132ca:	f7ff fe5d 	bl	8012f88 <netif_check>
 80132ce:	6138      	str	r0, [r7, #16]

  if (p_netif != NULL)
 80132d0:	693b      	ldr	r3, [r7, #16]
 80132d2:	2b00      	cmp	r3, #0
 80132d4:	d00a      	beq.n	80132ec <net_if_set_ipaddr+0x38>
  {
    p_netif->static_ipaddr  = ipaddr;
 80132d6:	693b      	ldr	r3, [r7, #16]
 80132d8:	68ba      	ldr	r2, [r7, #8]
 80132da:	611a      	str	r2, [r3, #16]
    p_netif->static_gateway = gateway;
 80132dc:	693b      	ldr	r3, [r7, #16]
 80132de:	687a      	ldr	r2, [r7, #4]
 80132e0:	615a      	str	r2, [r3, #20]
    p_netif->static_netmask = netmask;
 80132e2:	693b      	ldr	r3, [r7, #16]
 80132e4:	683a      	ldr	r2, [r7, #0]
 80132e6:	619a      	str	r2, [r3, #24]
    ret = NET_OK;
 80132e8:	2300      	movs	r3, #0
 80132ea:	617b      	str	r3, [r7, #20]
  }
  return ret;
 80132ec:	697b      	ldr	r3, [r7, #20]
}
 80132ee:	4618      	mov	r0, r3
 80132f0:	3718      	adds	r7, #24
 80132f2:	46bd      	mov	sp, r7
 80132f4:	bd80      	pop	{r7, pc}
	...

080132f8 <net_socket_get_and_lock>:

static net_socket_t Sockets[NET_MAX_SOCKETS_NBR] = {0};


static net_socket_t *net_socket_get_and_lock(int32_t sock)
{
 80132f8:	b480      	push	{r7}
 80132fa:	b083      	sub	sp, #12
 80132fc:	af00      	add	r7, sp, #0
 80132fe:	6078      	str	r0, [r7, #4]
  LOCK_SOCK(sock);
  return &Sockets[sock];
 8013300:	687b      	ldr	r3, [r7, #4]
 8013302:	222c      	movs	r2, #44	; 0x2c
 8013304:	fb02 f303 	mul.w	r3, r2, r3
 8013308:	4a03      	ldr	r2, [pc, #12]	; (8013318 <net_socket_get_and_lock+0x20>)
 801330a:	4413      	add	r3, r2
}
 801330c:	4618      	mov	r0, r3
 801330e:	370c      	adds	r7, #12
 8013310:	46bd      	mov	sp, r7
 8013312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013316:	4770      	bx	lr
 8013318:	20003344 	.word	0x20003344

0801331c <is_valid_socket>:
  * @brief  Verify if internal socket is already allocated
  * @param  sock  [in] the internal socket index
  * @retval socket status
  */
static bool is_valid_socket(int32_t sock)
{
 801331c:	b480      	push	{r7}
 801331e:	b085      	sub	sp, #20
 8013320:	af00      	add	r7, sp, #0
 8013322:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8013324:	2300      	movs	r3, #0
 8013326:	73fb      	strb	r3, [r7, #15]
  if ((sock >= 0) && (sock < (int32_t) NET_MAX_SOCKETS_NBR))
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	2b00      	cmp	r3, #0
 801332c:	db0e      	blt.n	801334c <is_valid_socket+0x30>
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	2b04      	cmp	r3, #4
 8013332:	dc0b      	bgt.n	801334c <is_valid_socket+0x30>
  {
    if (Sockets[sock].status != SOCKET_NOT_ALIVE)
 8013334:	4a09      	ldr	r2, [pc, #36]	; (801335c <is_valid_socket+0x40>)
 8013336:	687b      	ldr	r3, [r7, #4]
 8013338:	212c      	movs	r1, #44	; 0x2c
 801333a:	fb01 f303 	mul.w	r3, r1, r3
 801333e:	4413      	add	r3, r2
 8013340:	3308      	adds	r3, #8
 8013342:	781b      	ldrb	r3, [r3, #0]
 8013344:	2b00      	cmp	r3, #0
 8013346:	d001      	beq.n	801334c <is_valid_socket+0x30>
    {
      ret = true;
 8013348:	2301      	movs	r3, #1
 801334a:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 801334c:	7bfb      	ldrb	r3, [r7, #15]
}
 801334e:	4618      	mov	r0, r3
 8013350:	3714      	adds	r7, #20
 8013352:	46bd      	mov	sp, r7
 8013354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013358:	4770      	bx	lr
 801335a:	bf00      	nop
 801335c:	20003344 	.word	0x20003344

08013360 <create_low_level_socket>:
  * @brief  function description
  * @param  sock  [in] the internal socket index
  * @retval socket status
  */
static int32_t create_low_level_socket(int32_t sock)
{
 8013360:	b5b0      	push	{r4, r5, r7, lr}
 8013362:	b084      	sub	sp, #16
 8013364:	af00      	add	r7, sp, #0
 8013366:	6078      	str	r0, [r7, #4]
  net_socket_t *const p_socket = &Sockets[sock];
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	222c      	movs	r2, #44	; 0x2c
 801336c:	fb02 f303 	mul.w	r3, r2, r3
 8013370:	4a38      	ldr	r2, [pc, #224]	; (8013454 <create_low_level_socket+0xf4>)
 8013372:	4413      	add	r3, r2
 8013374:	60fb      	str	r3, [r7, #12]

  if (p_socket->ulsocket == -1)
 8013376:	68fb      	ldr	r3, [r7, #12]
 8013378:	685b      	ldr	r3, [r3, #4]
 801337a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801337e:	d162      	bne.n	8013446 <create_low_level_socket+0xe6>
  {
    if (net_access_control(p_socket->pnetif, NET_ACCESS_SOCKET, &p_socket->ulsocket))
 8013380:	68fb      	ldr	r3, [r7, #12]
 8013382:	6818      	ldr	r0, [r3, #0]
 8013384:	68fb      	ldr	r3, [r7, #12]
 8013386:	3304      	adds	r3, #4
 8013388:	461a      	mov	r2, r3
 801338a:	2100      	movs	r1, #0
 801338c:	f000 fd5a 	bl	8013e44 <net_access_control>
 8013390:	4603      	mov	r3, r0
 8013392:	2b00      	cmp	r3, #0
 8013394:	d057      	beq.n	8013446 <create_low_level_socket+0xe6>
    {
      if (0 == Sockets[sock].protocol)
 8013396:	4a2f      	ldr	r2, [pc, #188]	; (8013454 <create_low_level_socket+0xf4>)
 8013398:	687b      	ldr	r3, [r7, #4]
 801339a:	212c      	movs	r1, #44	; 0x2c
 801339c:	fb01 f303 	mul.w	r3, r1, r3
 80133a0:	4413      	add	r3, r2
 80133a2:	3314      	adds	r3, #20
 80133a4:	681b      	ldr	r3, [r3, #0]
 80133a6:	2b00      	cmp	r3, #0
 80133a8:	d125      	bne.n	80133f6 <create_low_level_socket+0x96>
      {
        if (Sockets[sock].type == NET_SOCK_STREAM)
 80133aa:	4a2a      	ldr	r2, [pc, #168]	; (8013454 <create_low_level_socket+0xf4>)
 80133ac:	687b      	ldr	r3, [r7, #4]
 80133ae:	212c      	movs	r1, #44	; 0x2c
 80133b0:	fb01 f303 	mul.w	r3, r1, r3
 80133b4:	4413      	add	r3, r2
 80133b6:	3310      	adds	r3, #16
 80133b8:	681b      	ldr	r3, [r3, #0]
 80133ba:	2b01      	cmp	r3, #1
 80133bc:	d108      	bne.n	80133d0 <create_low_level_socket+0x70>
        {
          Sockets[sock].protocol = NET_IPPROTO_TCP;
 80133be:	4a25      	ldr	r2, [pc, #148]	; (8013454 <create_low_level_socket+0xf4>)
 80133c0:	687b      	ldr	r3, [r7, #4]
 80133c2:	212c      	movs	r1, #44	; 0x2c
 80133c4:	fb01 f303 	mul.w	r3, r1, r3
 80133c8:	4413      	add	r3, r2
 80133ca:	3314      	adds	r3, #20
 80133cc:	2206      	movs	r2, #6
 80133ce:	601a      	str	r2, [r3, #0]
        }
        if (Sockets[sock].type == NET_SOCK_DGRAM)
 80133d0:	4a20      	ldr	r2, [pc, #128]	; (8013454 <create_low_level_socket+0xf4>)
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	212c      	movs	r1, #44	; 0x2c
 80133d6:	fb01 f303 	mul.w	r3, r1, r3
 80133da:	4413      	add	r3, r2
 80133dc:	3310      	adds	r3, #16
 80133de:	681b      	ldr	r3, [r3, #0]
 80133e0:	2b02      	cmp	r3, #2
 80133e2:	d108      	bne.n	80133f6 <create_low_level_socket+0x96>
        {
          Sockets[sock].protocol = NET_IPPROTO_UDP;
 80133e4:	4a1b      	ldr	r2, [pc, #108]	; (8013454 <create_low_level_socket+0xf4>)
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	212c      	movs	r1, #44	; 0x2c
 80133ea:	fb01 f303 	mul.w	r3, r1, r3
 80133ee:	4413      	add	r3, r2
 80133f0:	3314      	adds	r3, #20
 80133f2:	2211      	movs	r2, #17
 80133f4:	601a      	str	r2, [r3, #0]
        }
      }

      if (NULL != p_socket->pnetif->pdrv->psocket)
 80133f6:	68fb      	ldr	r3, [r7, #12]
 80133f8:	681b      	ldr	r3, [r3, #0]
 80133fa:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80133fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013400:	2b00      	cmp	r3, #0
 8013402:	d020      	beq.n	8013446 <create_low_level_socket+0xe6>
      {
        p_socket->ulsocket = p_socket->pnetif->pdrv->psocket(Sockets[sock].domain,
 8013404:	68fb      	ldr	r3, [r7, #12]
 8013406:	681b      	ldr	r3, [r3, #0]
 8013408:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 801340c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801340e:	4911      	ldr	r1, [pc, #68]	; (8013454 <create_low_level_socket+0xf4>)
 8013410:	687a      	ldr	r2, [r7, #4]
 8013412:	202c      	movs	r0, #44	; 0x2c
 8013414:	fb00 f202 	mul.w	r2, r0, r2
 8013418:	440a      	add	r2, r1
 801341a:	320c      	adds	r2, #12
 801341c:	6810      	ldr	r0, [r2, #0]
 801341e:	490d      	ldr	r1, [pc, #52]	; (8013454 <create_low_level_socket+0xf4>)
 8013420:	687a      	ldr	r2, [r7, #4]
 8013422:	242c      	movs	r4, #44	; 0x2c
 8013424:	fb04 f202 	mul.w	r2, r4, r2
 8013428:	440a      	add	r2, r1
 801342a:	3210      	adds	r2, #16
 801342c:	6811      	ldr	r1, [r2, #0]
 801342e:	4c09      	ldr	r4, [pc, #36]	; (8013454 <create_low_level_socket+0xf4>)
 8013430:	687a      	ldr	r2, [r7, #4]
 8013432:	252c      	movs	r5, #44	; 0x2c
 8013434:	fb05 f202 	mul.w	r2, r5, r2
 8013438:	4422      	add	r2, r4
 801343a:	3214      	adds	r2, #20
 801343c:	6812      	ldr	r2, [r2, #0]
 801343e:	4798      	blx	r3
 8013440:	4602      	mov	r2, r0
 8013442:	68fb      	ldr	r3, [r7, #12]
 8013444:	605a      	str	r2, [r3, #4]
                                                             Sockets[sock].type,
                                                             Sockets[sock].protocol);
      }
    }
  }
  return p_socket->ulsocket;
 8013446:	68fb      	ldr	r3, [r7, #12]
 8013448:	685b      	ldr	r3, [r3, #4]
}
 801344a:	4618      	mov	r0, r3
 801344c:	3710      	adds	r7, #16
 801344e:	46bd      	mov	sp, r7
 8013450:	bdb0      	pop	{r4, r5, r7, pc}
 8013452:	bf00      	nop
 8013454:	20003344 	.word	0x20003344

08013458 <check_low_level_socket>:

static int32_t check_low_level_socket(int32_t sock)
{
 8013458:	b580      	push	{r7, lr}
 801345a:	b084      	sub	sp, #16
 801345c:	af00      	add	r7, sp, #0
 801345e:	6078      	str	r0, [r7, #4]
  int32_t ret = -1;
 8013460:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013464:	60fb      	str	r3, [r7, #12]

  if (is_valid_socket(sock))
 8013466:	6878      	ldr	r0, [r7, #4]
 8013468:	f7ff ff58 	bl	801331c <is_valid_socket>
 801346c:	4603      	mov	r3, r0
 801346e:	2b00      	cmp	r3, #0
 8013470:	d008      	beq.n	8013484 <check_low_level_socket+0x2c>
  {
    ret = Sockets[sock].ulsocket;
 8013472:	4a07      	ldr	r2, [pc, #28]	; (8013490 <check_low_level_socket+0x38>)
 8013474:	687b      	ldr	r3, [r7, #4]
 8013476:	212c      	movs	r1, #44	; 0x2c
 8013478:	fb01 f303 	mul.w	r3, r1, r3
 801347c:	4413      	add	r3, r2
 801347e:	3304      	adds	r3, #4
 8013480:	681b      	ldr	r3, [r3, #0]
 8013482:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 8013484:	68fb      	ldr	r3, [r7, #12]
}
 8013486:	4618      	mov	r0, r3
 8013488:	3710      	adds	r7, #16
 801348a:	46bd      	mov	sp, r7
 801348c:	bd80      	pop	{r7, pc}
 801348e:	bf00      	nop
 8013490:	20003344 	.word	0x20003344

08013494 <find_free_socket>:
/**
  * @brief  function description
  * @retval the internal socket index
  */
static int32_t find_free_socket(void)
{
 8013494:	b580      	push	{r7, lr}
 8013496:	b082      	sub	sp, #8
 8013498:	af00      	add	r7, sp, #0
  int32_t ret = NET_ERROR_INVALID_SOCKET;
 801349a:	f06f 0305 	mvn.w	r3, #5
 801349e:	607b      	str	r3, [r7, #4]

  LOCK_SOCK_ARRAY();

  for (int32_t sidx = 0; sidx < (int32_t)NET_MAX_SOCKETS_NBR; sidx++)
 80134a0:	2300      	movs	r3, #0
 80134a2:	603b      	str	r3, [r7, #0]
 80134a4:	e06e      	b.n	8013584 <find_free_socket+0xf0>
  {
    if (Sockets[sidx].status == SOCKET_NOT_ALIVE)
 80134a6:	4a3b      	ldr	r2, [pc, #236]	; (8013594 <find_free_socket+0x100>)
 80134a8:	683b      	ldr	r3, [r7, #0]
 80134aa:	212c      	movs	r1, #44	; 0x2c
 80134ac:	fb01 f303 	mul.w	r3, r1, r3
 80134b0:	4413      	add	r3, r2
 80134b2:	3308      	adds	r3, #8
 80134b4:	781b      	ldrb	r3, [r3, #0]
 80134b6:	2b00      	cmp	r3, #0
 80134b8:	d161      	bne.n	801357e <find_free_socket+0xea>
    {
      Sockets[sidx].idx      = sidx;
 80134ba:	4a36      	ldr	r2, [pc, #216]	; (8013594 <find_free_socket+0x100>)
 80134bc:	683b      	ldr	r3, [r7, #0]
 80134be:	212c      	movs	r1, #44	; 0x2c
 80134c0:	fb01 f303 	mul.w	r3, r1, r3
 80134c4:	4413      	add	r3, r2
 80134c6:	3328      	adds	r3, #40	; 0x28
 80134c8:	683a      	ldr	r2, [r7, #0]
 80134ca:	601a      	str	r2, [r3, #0]
      Sockets[sidx].status   = SOCKET_ALLOCATED;
 80134cc:	4a31      	ldr	r2, [pc, #196]	; (8013594 <find_free_socket+0x100>)
 80134ce:	683b      	ldr	r3, [r7, #0]
 80134d0:	212c      	movs	r1, #44	; 0x2c
 80134d2:	fb01 f303 	mul.w	r3, r1, r3
 80134d6:	4413      	add	r3, r2
 80134d8:	3308      	adds	r3, #8
 80134da:	2201      	movs	r2, #1
 80134dc:	701a      	strb	r2, [r3, #0]
      Sockets[sidx].domain   = 0;
 80134de:	4a2d      	ldr	r2, [pc, #180]	; (8013594 <find_free_socket+0x100>)
 80134e0:	683b      	ldr	r3, [r7, #0]
 80134e2:	212c      	movs	r1, #44	; 0x2c
 80134e4:	fb01 f303 	mul.w	r3, r1, r3
 80134e8:	4413      	add	r3, r2
 80134ea:	330c      	adds	r3, #12
 80134ec:	2200      	movs	r2, #0
 80134ee:	601a      	str	r2, [r3, #0]
      Sockets[sidx].type     = 0;
 80134f0:	4a28      	ldr	r2, [pc, #160]	; (8013594 <find_free_socket+0x100>)
 80134f2:	683b      	ldr	r3, [r7, #0]
 80134f4:	212c      	movs	r1, #44	; 0x2c
 80134f6:	fb01 f303 	mul.w	r3, r1, r3
 80134fa:	4413      	add	r3, r2
 80134fc:	3310      	adds	r3, #16
 80134fe:	2200      	movs	r2, #0
 8013500:	601a      	str	r2, [r3, #0]
      Sockets[sidx].protocol = 0;
 8013502:	4a24      	ldr	r2, [pc, #144]	; (8013594 <find_free_socket+0x100>)
 8013504:	683b      	ldr	r3, [r7, #0]
 8013506:	212c      	movs	r1, #44	; 0x2c
 8013508:	fb01 f303 	mul.w	r3, r1, r3
 801350c:	4413      	add	r3, r2
 801350e:	3314      	adds	r3, #20
 8013510:	2200      	movs	r2, #0
 8013512:	601a      	str	r2, [r3, #0]
#ifdef NET_MBEDTLS_HOST_SUPPORT
      Sockets[sidx].is_secure = false;
      Sockets[sidx].tlsData   = NULL;
#endif /* NET_MBEDTLS_HOST_SUPPORT */
      Sockets[sidx].read_timeout  = NET_SOCK_DEFAULT_RECEIVE_TO;
 8013514:	4a1f      	ldr	r2, [pc, #124]	; (8013594 <find_free_socket+0x100>)
 8013516:	683b      	ldr	r3, [r7, #0]
 8013518:	212c      	movs	r1, #44	; 0x2c
 801351a:	fb01 f303 	mul.w	r3, r1, r3
 801351e:	4413      	add	r3, r2
 8013520:	331c      	adds	r3, #28
 8013522:	f64e 2260 	movw	r2, #60000	; 0xea60
 8013526:	601a      	str	r2, [r3, #0]
      Sockets[sidx].write_timeout = NET_SOCK_DEFAULT_SEND_TO;
 8013528:	4a1a      	ldr	r2, [pc, #104]	; (8013594 <find_free_socket+0x100>)
 801352a:	683b      	ldr	r3, [r7, #0]
 801352c:	212c      	movs	r1, #44	; 0x2c
 801352e:	fb01 f303 	mul.w	r3, r1, r3
 8013532:	4413      	add	r3, r2
 8013534:	3320      	adds	r3, #32
 8013536:	f64e 2260 	movw	r2, #60000	; 0xea60
 801353a:	601a      	str	r2, [r3, #0]
      Sockets[sidx].blocking = true;
 801353c:	4a15      	ldr	r2, [pc, #84]	; (8013594 <find_free_socket+0x100>)
 801353e:	683b      	ldr	r3, [r7, #0]
 8013540:	212c      	movs	r1, #44	; 0x2c
 8013542:	fb01 f303 	mul.w	r3, r1, r3
 8013546:	4413      	add	r3, r2
 8013548:	3324      	adds	r3, #36	; 0x24
 801354a:	2201      	movs	r2, #1
 801354c:	701a      	strb	r2, [r3, #0]
      Sockets[sidx].ulsocket = -1;
 801354e:	4a11      	ldr	r2, [pc, #68]	; (8013594 <find_free_socket+0x100>)
 8013550:	683b      	ldr	r3, [r7, #0]
 8013552:	212c      	movs	r1, #44	; 0x2c
 8013554:	fb01 f303 	mul.w	r3, r1, r3
 8013558:	4413      	add	r3, r2
 801355a:	3304      	adds	r3, #4
 801355c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013560:	601a      	str	r2, [r3, #0]
      Sockets[sidx].pnetif   = net_if_find(NULL);
 8013562:	2000      	movs	r0, #0
 8013564:	f7ff fcd8 	bl	8012f18 <net_if_find>
 8013568:	4602      	mov	r2, r0
 801356a:	490a      	ldr	r1, [pc, #40]	; (8013594 <find_free_socket+0x100>)
 801356c:	683b      	ldr	r3, [r7, #0]
 801356e:	202c      	movs	r0, #44	; 0x2c
 8013570:	fb00 f303 	mul.w	r3, r0, r3
 8013574:	440b      	add	r3, r1
 8013576:	601a      	str	r2, [r3, #0]

      LOCK_SOCK(sidx);
      ret = sidx;
 8013578:	683b      	ldr	r3, [r7, #0]
 801357a:	607b      	str	r3, [r7, #4]
      break;
 801357c:	e005      	b.n	801358a <find_free_socket+0xf6>
  for (int32_t sidx = 0; sidx < (int32_t)NET_MAX_SOCKETS_NBR; sidx++)
 801357e:	683b      	ldr	r3, [r7, #0]
 8013580:	3301      	adds	r3, #1
 8013582:	603b      	str	r3, [r7, #0]
 8013584:	683b      	ldr	r3, [r7, #0]
 8013586:	2b04      	cmp	r3, #4
 8013588:	dd8d      	ble.n	80134a6 <find_free_socket+0x12>
    }
  }
  UNLOCK_SOCK_ARRAY();
  return ret;
 801358a:	687b      	ldr	r3, [r7, #4]
}
 801358c:	4618      	mov	r0, r3
 801358e:	3708      	adds	r7, #8
 8013590:	46bd      	mov	sp, r7
 8013592:	bd80      	pop	{r7, pc}
 8013594:	20003344 	.word	0x20003344

08013598 <clone_socket>:

static int32_t clone_socket(int32_t sock)
{
 8013598:	b5b0      	push	{r4, r5, r7, lr}
 801359a:	b084      	sub	sp, #16
 801359c:	af00      	add	r7, sp, #0
 801359e:	6078      	str	r0, [r7, #4]
  const int32_t newsock = find_free_socket();
 80135a0:	f7ff ff78 	bl	8013494 <find_free_socket>
 80135a4:	60f8      	str	r0, [r7, #12]

  if (newsock >= 0)
 80135a6:	68fb      	ldr	r3, [r7, #12]
 80135a8:	2b00      	cmp	r3, #0
 80135aa:	db15      	blt.n	80135d8 <clone_socket+0x40>
  {
    Sockets[newsock] = Sockets[sock];
 80135ac:	4a0d      	ldr	r2, [pc, #52]	; (80135e4 <clone_socket+0x4c>)
 80135ae:	68fb      	ldr	r3, [r7, #12]
 80135b0:	212c      	movs	r1, #44	; 0x2c
 80135b2:	fb01 f303 	mul.w	r3, r1, r3
 80135b6:	18d0      	adds	r0, r2, r3
 80135b8:	4a0a      	ldr	r2, [pc, #40]	; (80135e4 <clone_socket+0x4c>)
 80135ba:	687b      	ldr	r3, [r7, #4]
 80135bc:	212c      	movs	r1, #44	; 0x2c
 80135be:	fb01 f303 	mul.w	r3, r1, r3
 80135c2:	4413      	add	r3, r2
 80135c4:	4604      	mov	r4, r0
 80135c6:	461d      	mov	r5, r3
 80135c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80135ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80135cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80135ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80135d0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80135d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  }
  return newsock;
 80135d8:	68fb      	ldr	r3, [r7, #12]
}
 80135da:	4618      	mov	r0, r3
 80135dc:	3710      	adds	r7, #16
 80135de:	46bd      	mov	sp, r7
 80135e0:	bdb0      	pop	{r4, r5, r7, pc}
 80135e2:	bf00      	nop
 80135e4:	20003344 	.word	0x20003344

080135e8 <net_socket>:
  * @param  type [in] integer should be NET_SOCK_STREAM,NET_SOCK_DGRAM or NET_SOCK_RAW
  * @param  protocol [in] integer should be NET_IPPROTO_TCP,NET_IPPROTO_ICMP,NET_IPPROTO_UDP or NET_IPPROTO_TCP_TLS
  * @retval socket number as an integer greater than zero in case of success, zero or less than zero otherwise
  */
int32_t net_socket(int32_t domain, int32_t type, int32_t protocol)
{
 80135e8:	b580      	push	{r7, lr}
 80135ea:	b086      	sub	sp, #24
 80135ec:	af00      	add	r7, sp, #0
 80135ee:	60f8      	str	r0, [r7, #12]
 80135f0:	60b9      	str	r1, [r7, #8]
 80135f2:	607a      	str	r2, [r7, #4]
  const int32_t newsock = find_free_socket();
 80135f4:	f7ff ff4e 	bl	8013494 <find_free_socket>
 80135f8:	6178      	str	r0, [r7, #20]

  if (newsock >= 0)
 80135fa:	697b      	ldr	r3, [r7, #20]
 80135fc:	2b00      	cmp	r3, #0
 80135fe:	db1b      	blt.n	8013638 <net_socket+0x50>
  {
    Sockets[newsock].domain   = domain;
 8013600:	4a15      	ldr	r2, [pc, #84]	; (8013658 <net_socket+0x70>)
 8013602:	697b      	ldr	r3, [r7, #20]
 8013604:	212c      	movs	r1, #44	; 0x2c
 8013606:	fb01 f303 	mul.w	r3, r1, r3
 801360a:	4413      	add	r3, r2
 801360c:	330c      	adds	r3, #12
 801360e:	68fa      	ldr	r2, [r7, #12]
 8013610:	601a      	str	r2, [r3, #0]
    Sockets[newsock].type     = type;
 8013612:	4a11      	ldr	r2, [pc, #68]	; (8013658 <net_socket+0x70>)
 8013614:	697b      	ldr	r3, [r7, #20]
 8013616:	212c      	movs	r1, #44	; 0x2c
 8013618:	fb01 f303 	mul.w	r3, r1, r3
 801361c:	4413      	add	r3, r2
 801361e:	3310      	adds	r3, #16
 8013620:	68ba      	ldr	r2, [r7, #8]
 8013622:	601a      	str	r2, [r3, #0]
    Sockets[newsock].protocol = protocol;
 8013624:	4a0c      	ldr	r2, [pc, #48]	; (8013658 <net_socket+0x70>)
 8013626:	697b      	ldr	r3, [r7, #20]
 8013628:	212c      	movs	r1, #44	; 0x2c
 801362a:	fb01 f303 	mul.w	r3, r1, r3
 801362e:	4413      	add	r3, r2
 8013630:	3314      	adds	r3, #20
 8013632:	687a      	ldr	r2, [r7, #4]
 8013634:	601a      	str	r2, [r3, #0]
 8013636:	e00a      	b.n	801364e <net_socket+0x66>
    UNLOCK_SOCK(newsock);
  }
  else
  {
    NET_DBG_ERROR("Socket allocation failed.\n");
 8013638:	22c0      	movs	r2, #192	; 0xc0
 801363a:	4908      	ldr	r1, [pc, #32]	; (801365c <net_socket+0x74>)
 801363c:	4808      	ldr	r0, [pc, #32]	; (8013660 <net_socket+0x78>)
 801363e:	f003 fdf9 	bl	8017234 <iprintf>
 8013642:	4808      	ldr	r0, [pc, #32]	; (8013664 <net_socket+0x7c>)
 8013644:	f003 fe64 	bl	8017310 <puts>
 8013648:	200a      	movs	r0, #10
 801364a:	f003 fe05 	bl	8017258 <putchar>
  }
  return newsock;
 801364e:	697b      	ldr	r3, [r7, #20]
}
 8013650:	4618      	mov	r0, r3
 8013652:	3718      	adds	r7, #24
 8013654:	46bd      	mov	sp, r7
 8013656:	bd80      	pop	{r7, pc}
 8013658:	20003344 	.word	0x20003344
 801365c:	0801bb50 	.word	0x0801bb50
 8013660:	0801bbbc 	.word	0x0801bbbc
 8013664:	0801bbcc 	.word	0x0801bbcc

08013668 <net_bind>:
  * @param  addr [in] pointer to net_sockaddr_t structure
  * @param  addrlen [in] unsigned integer length of the net_sockaddr_t
  * @retval zero in case of success, error code otherwise
  */
int32_t net_bind(int32_t sock, net_sockaddr_t *addr, uint32_t addrlen)
{
 8013668:	b580      	push	{r7, lr}
 801366a:	b086      	sub	sp, #24
 801366c:	af00      	add	r7, sp, #0
 801366e:	60f8      	str	r0, [r7, #12]
 8013670:	60b9      	str	r1, [r7, #8]
 8013672:	607a      	str	r2, [r7, #4]
  int32_t ret = NET_ERROR_FRAMEWORK;
 8013674:	f06f 0318 	mvn.w	r3, #24
 8013678:	613b      	str	r3, [r7, #16]

  if (!is_valid_socket(sock))
 801367a:	68f8      	ldr	r0, [r7, #12]
 801367c:	f7ff fe4e 	bl	801331c <is_valid_socket>
 8013680:	4603      	mov	r3, r0
 8013682:	f083 0301 	eor.w	r3, r3, #1
 8013686:	b2db      	uxtb	r3, r3
 8013688:	2b00      	cmp	r3, #0
 801368a:	d00e      	beq.n	80136aa <net_bind+0x42>
  {
    NET_DBG_ERROR("Invalid socket.\n");
 801368c:	22d2      	movs	r2, #210	; 0xd2
 801368e:	492d      	ldr	r1, [pc, #180]	; (8013744 <net_bind+0xdc>)
 8013690:	482d      	ldr	r0, [pc, #180]	; (8013748 <net_bind+0xe0>)
 8013692:	f003 fdcf 	bl	8017234 <iprintf>
 8013696:	482d      	ldr	r0, [pc, #180]	; (801374c <net_bind+0xe4>)
 8013698:	f003 fe3a 	bl	8017310 <puts>
 801369c:	200a      	movs	r0, #10
 801369e:	f003 fddb 	bl	8017258 <putchar>
    ret = NET_ERROR_INVALID_SOCKET;
 80136a2:	f06f 0305 	mvn.w	r3, #5
 80136a6:	613b      	str	r3, [r7, #16]
 80136a8:	e047      	b.n	801373a <net_bind+0xd2>
  }
  else
  {
    net_socket_t *const p_socket = net_socket_get_and_lock(sock);
 80136aa:	68f8      	ldr	r0, [r7, #12]
 80136ac:	f7ff fe24 	bl	80132f8 <net_socket_get_and_lock>
 80136b0:	6178      	str	r0, [r7, #20]

#if (NET_USE_DEFAULT_INTERFACE == 1)
    if (p_socket->pnetif == NULL)
 80136b2:	697b      	ldr	r3, [r7, #20]
 80136b4:	681b      	ldr	r3, [r3, #0]
 80136b6:	2b00      	cmp	r3, #0
 80136b8:	d105      	bne.n	80136c6 <net_bind+0x5e>
    {
      p_socket->pnetif = net_if_find(NULL);
 80136ba:	2000      	movs	r0, #0
 80136bc:	f7ff fc2c 	bl	8012f18 <net_if_find>
 80136c0:	4602      	mov	r2, r0
 80136c2:	697b      	ldr	r3, [r7, #20]
 80136c4:	601a      	str	r2, [r3, #0]
    }
#endif /* NET_USE_DEFAULT_INTERFACE */

    if (create_low_level_socket(sock) < 0)
 80136c6:	68f8      	ldr	r0, [r7, #12]
 80136c8:	f7ff fe4a 	bl	8013360 <create_low_level_socket>
 80136cc:	4603      	mov	r3, r0
 80136ce:	2b00      	cmp	r3, #0
 80136d0:	da0e      	bge.n	80136f0 <net_bind+0x88>
    {
      ret = NET_ERROR_SOCKET_FAILURE;
 80136d2:	f06f 0312 	mvn.w	r3, #18
 80136d6:	613b      	str	r3, [r7, #16]
      NET_DBG_ERROR("low level socket creation failed.\n");
 80136d8:	22e3      	movs	r2, #227	; 0xe3
 80136da:	491a      	ldr	r1, [pc, #104]	; (8013744 <net_bind+0xdc>)
 80136dc:	481a      	ldr	r0, [pc, #104]	; (8013748 <net_bind+0xe0>)
 80136de:	f003 fda9 	bl	8017234 <iprintf>
 80136e2:	481b      	ldr	r0, [pc, #108]	; (8013750 <net_bind+0xe8>)
 80136e4:	f003 fe14 	bl	8017310 <puts>
 80136e8:	200a      	movs	r0, #10
 80136ea:	f003 fdb5 	bl	8017258 <putchar>
 80136ee:	e024      	b.n	801373a <net_bind+0xd2>
    }
    else
    {
      if (net_access_control(p_socket->pnetif, NET_ACCESS_BIND, &ret))
 80136f0:	697b      	ldr	r3, [r7, #20]
 80136f2:	681b      	ldr	r3, [r3, #0]
 80136f4:	f107 0210 	add.w	r2, r7, #16
 80136f8:	2101      	movs	r1, #1
 80136fa:	4618      	mov	r0, r3
 80136fc:	f000 fba2 	bl	8013e44 <net_access_control>
 8013700:	4603      	mov	r3, r0
 8013702:	2b00      	cmp	r3, #0
 8013704:	d019      	beq.n	801373a <net_bind+0xd2>
      {
        UNLOCK_SOCK(sock);
        ret = p_socket->pnetif->pdrv->pbind(p_socket->ulsocket, addr, addrlen);
 8013706:	697b      	ldr	r3, [r7, #20]
 8013708:	681b      	ldr	r3, [r3, #0]
 801370a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 801370e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013710:	697a      	ldr	r2, [r7, #20]
 8013712:	6850      	ldr	r0, [r2, #4]
 8013714:	687a      	ldr	r2, [r7, #4]
 8013716:	68b9      	ldr	r1, [r7, #8]
 8013718:	4798      	blx	r3
 801371a:	4603      	mov	r3, r0
 801371c:	613b      	str	r3, [r7, #16]
        LOCK_SOCK(sock);
        if (ret != NET_OK)
 801371e:	693b      	ldr	r3, [r7, #16]
 8013720:	2b00      	cmp	r3, #0
 8013722:	d00a      	beq.n	801373a <net_bind+0xd2>
        {
          NET_DBG_ERROR("Socket cannot be bound.\n");
 8013724:	22ee      	movs	r2, #238	; 0xee
 8013726:	4907      	ldr	r1, [pc, #28]	; (8013744 <net_bind+0xdc>)
 8013728:	4807      	ldr	r0, [pc, #28]	; (8013748 <net_bind+0xe0>)
 801372a:	f003 fd83 	bl	8017234 <iprintf>
 801372e:	4809      	ldr	r0, [pc, #36]	; (8013754 <net_bind+0xec>)
 8013730:	f003 fdee 	bl	8017310 <puts>
 8013734:	200a      	movs	r0, #10
 8013736:	f003 fd8f 	bl	8017258 <putchar>
        }
      }
    }
    UNLOCK_SOCK(sock);
  }
  return ret;
 801373a:	693b      	ldr	r3, [r7, #16]
}
 801373c:	4618      	mov	r0, r3
 801373e:	3718      	adds	r7, #24
 8013740:	46bd      	mov	sp, r7
 8013742:	bd80      	pop	{r7, pc}
 8013744:	0801bb50 	.word	0x0801bb50
 8013748:	0801bbbc 	.word	0x0801bbbc
 801374c:	0801bbe8 	.word	0x0801bbe8
 8013750:	0801bbf8 	.word	0x0801bbf8
 8013754:	0801bc1c 	.word	0x0801bc1c

08013758 <net_accept>:
  * @param  addr [out] pointer to net_sockaddr_t structure of remote connection
  * @param  addrlen [out] pointer to unsigned integer, length of the remote net_sockaddr_t
  * @retval socket number as an integer greater than zero in case of success, zero or less than zero otherwise
  */
int32_t net_accept(int32_t sock, net_sockaddr_t *addr, uint32_t *addrlen)
{
 8013758:	b580      	push	{r7, lr}
 801375a:	b088      	sub	sp, #32
 801375c:	af00      	add	r7, sp, #0
 801375e:	60f8      	str	r0, [r7, #12]
 8013760:	60b9      	str	r1, [r7, #8]
 8013762:	607a      	str	r2, [r7, #4]
  int32_t newsock;

  if (!is_valid_socket(sock))
 8013764:	68f8      	ldr	r0, [r7, #12]
 8013766:	f7ff fdd9 	bl	801331c <is_valid_socket>
 801376a:	4603      	mov	r3, r0
 801376c:	f083 0301 	eor.w	r3, r3, #1
 8013770:	b2db      	uxtb	r3, r3
 8013772:	2b00      	cmp	r3, #0
 8013774:	d00f      	beq.n	8013796 <net_accept+0x3e>
  {
    NET_DBG_ERROR("Invalid socket.\n");
 8013776:	f240 1205 	movw	r2, #261	; 0x105
 801377a:	493d      	ldr	r1, [pc, #244]	; (8013870 <net_accept+0x118>)
 801377c:	483d      	ldr	r0, [pc, #244]	; (8013874 <net_accept+0x11c>)
 801377e:	f003 fd59 	bl	8017234 <iprintf>
 8013782:	483d      	ldr	r0, [pc, #244]	; (8013878 <net_accept+0x120>)
 8013784:	f003 fdc4 	bl	8017310 <puts>
 8013788:	200a      	movs	r0, #10
 801378a:	f003 fd65 	bl	8017258 <putchar>
    newsock = NET_ERROR_INVALID_SOCKET;
 801378e:	f06f 0305 	mvn.w	r3, #5
 8013792:	61fb      	str	r3, [r7, #28]
 8013794:	e067      	b.n	8013866 <net_accept+0x10e>
  }
  else
  {
    if (check_low_level_socket(sock) < 0)
 8013796:	68f8      	ldr	r0, [r7, #12]
 8013798:	f7ff fe5e 	bl	8013458 <check_low_level_socket>
 801379c:	4603      	mov	r3, r0
 801379e:	2b00      	cmp	r3, #0
 80137a0:	da0f      	bge.n	80137c2 <net_accept+0x6a>
    {
      NET_DBG_ERROR("low level Socket has not been created.\n");
 80137a2:	f44f 7286 	mov.w	r2, #268	; 0x10c
 80137a6:	4932      	ldr	r1, [pc, #200]	; (8013870 <net_accept+0x118>)
 80137a8:	4832      	ldr	r0, [pc, #200]	; (8013874 <net_accept+0x11c>)
 80137aa:	f003 fd43 	bl	8017234 <iprintf>
 80137ae:	4833      	ldr	r0, [pc, #204]	; (801387c <net_accept+0x124>)
 80137b0:	f003 fdae 	bl	8017310 <puts>
 80137b4:	200a      	movs	r0, #10
 80137b6:	f003 fd4f 	bl	8017258 <putchar>
      newsock = NET_ERROR_SOCKET_FAILURE;
 80137ba:	f06f 0312 	mvn.w	r3, #18
 80137be:	61fb      	str	r3, [r7, #28]
 80137c0:	e051      	b.n	8013866 <net_accept+0x10e>
    }
    else
    {
      net_socket_t *const p_socket = net_socket_get_and_lock(sock);
 80137c2:	68f8      	ldr	r0, [r7, #12]
 80137c4:	f7ff fd98 	bl	80132f8 <net_socket_get_and_lock>
 80137c8:	61b8      	str	r0, [r7, #24]
      int32_t ulnewsock = -1;
 80137ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80137ce:	617b      	str	r3, [r7, #20]

      if (net_access_control(p_socket->pnetif, NET_ACCESS_BIND, &ulnewsock))
 80137d0:	69bb      	ldr	r3, [r7, #24]
 80137d2:	681b      	ldr	r3, [r3, #0]
 80137d4:	f107 0214 	add.w	r2, r7, #20
 80137d8:	2101      	movs	r1, #1
 80137da:	4618      	mov	r0, r3
 80137dc:	f000 fb32 	bl	8013e44 <net_access_control>
 80137e0:	4603      	mov	r3, r0
 80137e2:	2b00      	cmp	r3, #0
 80137e4:	d00b      	beq.n	80137fe <net_accept+0xa6>
      {
        UNLOCK_SOCK(sock);
        ulnewsock = p_socket->pnetif->pdrv->paccept(p_socket->ulsocket, addr, addrlen);
 80137e6:	69bb      	ldr	r3, [r7, #24]
 80137e8:	681b      	ldr	r3, [r3, #0]
 80137ea:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80137ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80137f0:	69ba      	ldr	r2, [r7, #24]
 80137f2:	6850      	ldr	r0, [r2, #4]
 80137f4:	687a      	ldr	r2, [r7, #4]
 80137f6:	68b9      	ldr	r1, [r7, #8]
 80137f8:	4798      	blx	r3
 80137fa:	4603      	mov	r3, r0
 80137fc:	617b      	str	r3, [r7, #20]
        LOCK_SOCK(sock);

      }
      if (ulnewsock < 0)
 80137fe:	697b      	ldr	r3, [r7, #20]
 8013800:	2b00      	cmp	r3, #0
 8013802:	da0e      	bge.n	8013822 <net_accept+0xca>
      {
        NET_DBG_ERROR("No connection has been established.\n");
 8013804:	f240 121d 	movw	r2, #285	; 0x11d
 8013808:	4919      	ldr	r1, [pc, #100]	; (8013870 <net_accept+0x118>)
 801380a:	481a      	ldr	r0, [pc, #104]	; (8013874 <net_accept+0x11c>)
 801380c:	f003 fd12 	bl	8017234 <iprintf>
 8013810:	481b      	ldr	r0, [pc, #108]	; (8013880 <net_accept+0x128>)
 8013812:	f003 fd7d 	bl	8017310 <puts>
 8013816:	200a      	movs	r0, #10
 8013818:	f003 fd1e 	bl	8017258 <putchar>
        newsock = ulnewsock;
 801381c:	697b      	ldr	r3, [r7, #20]
 801381e:	61fb      	str	r3, [r7, #28]
 8013820:	e021      	b.n	8013866 <net_accept+0x10e>
      }
      else
      {
        Sockets[sock].status = SOCKET_CONNECTED;
 8013822:	4a18      	ldr	r2, [pc, #96]	; (8013884 <net_accept+0x12c>)
 8013824:	68fb      	ldr	r3, [r7, #12]
 8013826:	212c      	movs	r1, #44	; 0x2c
 8013828:	fb01 f303 	mul.w	r3, r1, r3
 801382c:	4413      	add	r3, r2
 801382e:	3308      	adds	r3, #8
 8013830:	2202      	movs	r2, #2
 8013832:	701a      	strb	r2, [r3, #0]
        newsock = clone_socket(sock);
 8013834:	68f8      	ldr	r0, [r7, #12]
 8013836:	f7ff feaf 	bl	8013598 <clone_socket>
 801383a:	61f8      	str	r0, [r7, #28]
        if (newsock >= 0)
 801383c:	69fb      	ldr	r3, [r7, #28]
 801383e:	2b00      	cmp	r3, #0
 8013840:	db11      	blt.n	8013866 <net_accept+0x10e>
        {
          Sockets[newsock].ulsocket = ulnewsock;
 8013842:	697a      	ldr	r2, [r7, #20]
 8013844:	490f      	ldr	r1, [pc, #60]	; (8013884 <net_accept+0x12c>)
 8013846:	69fb      	ldr	r3, [r7, #28]
 8013848:	202c      	movs	r0, #44	; 0x2c
 801384a:	fb00 f303 	mul.w	r3, r0, r3
 801384e:	440b      	add	r3, r1
 8013850:	3304      	adds	r3, #4
 8013852:	601a      	str	r2, [r3, #0]
          Sockets[newsock].cloneserver = true;
 8013854:	4a0b      	ldr	r2, [pc, #44]	; (8013884 <net_accept+0x12c>)
 8013856:	69fb      	ldr	r3, [r7, #28]
 8013858:	212c      	movs	r1, #44	; 0x2c
 801385a:	fb01 f303 	mul.w	r3, r1, r3
 801385e:	4413      	add	r3, r2
 8013860:	3318      	adds	r3, #24
 8013862:	2201      	movs	r2, #1
 8013864:	701a      	strb	r2, [r3, #0]
        }
      }
      UNLOCK_SOCK(sock);
    }
  }
  return newsock;
 8013866:	69fb      	ldr	r3, [r7, #28]
}
 8013868:	4618      	mov	r0, r3
 801386a:	3720      	adds	r7, #32
 801386c:	46bd      	mov	sp, r7
 801386e:	bd80      	pop	{r7, pc}
 8013870:	0801bb50 	.word	0x0801bb50
 8013874:	0801bbbc 	.word	0x0801bbbc
 8013878:	0801bbe8 	.word	0x0801bbe8
 801387c:	0801bc34 	.word	0x0801bc34
 8013880:	0801bc5c 	.word	0x0801bc5c
 8013884:	20003344 	.word	0x20003344

08013888 <net_listen>:
  * @param  sock [in] integer socket number
  * @param  backlog [in] integer maximum number of queued connection
  * @retval zero in case of success, none zero value in case of error
  */
int32_t net_listen(int32_t sock, int32_t backlog)
{
 8013888:	b580      	push	{r7, lr}
 801388a:	b084      	sub	sp, #16
 801388c:	af00      	add	r7, sp, #0
 801388e:	6078      	str	r0, [r7, #4]
 8013890:	6039      	str	r1, [r7, #0]
  int32_t ret = NET_ERROR_FRAMEWORK;
 8013892:	f06f 0318 	mvn.w	r3, #24
 8013896:	60bb      	str	r3, [r7, #8]

  if (!is_valid_socket(sock))
 8013898:	6878      	ldr	r0, [r7, #4]
 801389a:	f7ff fd3f 	bl	801331c <is_valid_socket>
 801389e:	4603      	mov	r3, r0
 80138a0:	f083 0301 	eor.w	r3, r3, #1
 80138a4:	b2db      	uxtb	r3, r3
 80138a6:	2b00      	cmp	r3, #0
 80138a8:	d00f      	beq.n	80138ca <net_listen+0x42>
  {
    NET_DBG_ERROR("Invalid socket.\n");
 80138aa:	f44f 729f 	mov.w	r2, #318	; 0x13e
 80138ae:	4929      	ldr	r1, [pc, #164]	; (8013954 <net_listen+0xcc>)
 80138b0:	4829      	ldr	r0, [pc, #164]	; (8013958 <net_listen+0xd0>)
 80138b2:	f003 fcbf 	bl	8017234 <iprintf>
 80138b6:	4829      	ldr	r0, [pc, #164]	; (801395c <net_listen+0xd4>)
 80138b8:	f003 fd2a 	bl	8017310 <puts>
 80138bc:	200a      	movs	r0, #10
 80138be:	f003 fccb 	bl	8017258 <putchar>
    ret = NET_ERROR_INVALID_SOCKET;
 80138c2:	f06f 0305 	mvn.w	r3, #5
 80138c6:	60bb      	str	r3, [r7, #8]
 80138c8:	e03f      	b.n	801394a <net_listen+0xc2>
  }
  else
  {
    if (check_low_level_socket(sock) < 0)
 80138ca:	6878      	ldr	r0, [r7, #4]
 80138cc:	f7ff fdc4 	bl	8013458 <check_low_level_socket>
 80138d0:	4603      	mov	r3, r0
 80138d2:	2b00      	cmp	r3, #0
 80138d4:	da0f      	bge.n	80138f6 <net_listen+0x6e>
    {
      NET_DBG_ERROR("low level socket has not been created.\n");
 80138d6:	f240 1245 	movw	r2, #325	; 0x145
 80138da:	491e      	ldr	r1, [pc, #120]	; (8013954 <net_listen+0xcc>)
 80138dc:	481e      	ldr	r0, [pc, #120]	; (8013958 <net_listen+0xd0>)
 80138de:	f003 fca9 	bl	8017234 <iprintf>
 80138e2:	481f      	ldr	r0, [pc, #124]	; (8013960 <net_listen+0xd8>)
 80138e4:	f003 fd14 	bl	8017310 <puts>
 80138e8:	200a      	movs	r0, #10
 80138ea:	f003 fcb5 	bl	8017258 <putchar>
      ret = NET_ERROR_SOCKET_FAILURE;
 80138ee:	f06f 0312 	mvn.w	r3, #18
 80138f2:	60bb      	str	r3, [r7, #8]
 80138f4:	e029      	b.n	801394a <net_listen+0xc2>
    }
    else
    {
      net_socket_t *const p_socket = net_socket_get_and_lock(sock);
 80138f6:	6878      	ldr	r0, [r7, #4]
 80138f8:	f7ff fcfe 	bl	80132f8 <net_socket_get_and_lock>
 80138fc:	60f8      	str	r0, [r7, #12]
      if (net_access_control(p_socket->pnetif, NET_ACCESS_LISTEN, &ret))
 80138fe:	68fb      	ldr	r3, [r7, #12]
 8013900:	681b      	ldr	r3, [r3, #0]
 8013902:	f107 0208 	add.w	r2, r7, #8
 8013906:	2102      	movs	r1, #2
 8013908:	4618      	mov	r0, r3
 801390a:	f000 fa9b 	bl	8013e44 <net_access_control>
 801390e:	4603      	mov	r3, r0
 8013910:	2b00      	cmp	r3, #0
 8013912:	d01a      	beq.n	801394a <net_listen+0xc2>
      {
        UNLOCK_SOCK(sock);
        ret = p_socket->pnetif->pdrv->plisten(p_socket->ulsocket, backlog);
 8013914:	68fb      	ldr	r3, [r7, #12]
 8013916:	681b      	ldr	r3, [r3, #0]
 8013918:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 801391c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801391e:	68fa      	ldr	r2, [r7, #12]
 8013920:	6852      	ldr	r2, [r2, #4]
 8013922:	6839      	ldr	r1, [r7, #0]
 8013924:	4610      	mov	r0, r2
 8013926:	4798      	blx	r3
 8013928:	4603      	mov	r3, r0
 801392a:	60bb      	str	r3, [r7, #8]
        LOCK_SOCK(sock);

        if (ret != NET_OK)
 801392c:	68bb      	ldr	r3, [r7, #8]
 801392e:	2b00      	cmp	r3, #0
 8013930:	d00b      	beq.n	801394a <net_listen+0xc2>
        {
          NET_DBG_ERROR("Listen state cannot be set.\n");
 8013932:	f240 1253 	movw	r2, #339	; 0x153
 8013936:	4907      	ldr	r1, [pc, #28]	; (8013954 <net_listen+0xcc>)
 8013938:	4807      	ldr	r0, [pc, #28]	; (8013958 <net_listen+0xd0>)
 801393a:	f003 fc7b 	bl	8017234 <iprintf>
 801393e:	4809      	ldr	r0, [pc, #36]	; (8013964 <net_listen+0xdc>)
 8013940:	f003 fce6 	bl	8017310 <puts>
 8013944:	200a      	movs	r0, #10
 8013946:	f003 fc87 	bl	8017258 <putchar>
        }
      }
      UNLOCK_SOCK(sock);
    }
  }
  return ret;
 801394a:	68bb      	ldr	r3, [r7, #8]
}
 801394c:	4618      	mov	r0, r3
 801394e:	3710      	adds	r7, #16
 8013950:	46bd      	mov	sp, r7
 8013952:	bd80      	pop	{r7, pc}
 8013954:	0801bb50 	.word	0x0801bb50
 8013958:	0801bbbc 	.word	0x0801bbbc
 801395c:	0801bbe8 	.word	0x0801bbe8
 8013960:	0801bc80 	.word	0x0801bc80
 8013964:	0801bca8 	.word	0x0801bca8

08013968 <net_send>:
  * @param  buf [in] pointer to an array of unsigned byte
  * @param  len [in] number of byte to send
  * @retval number of byte transmitted, negative value in case of error or timeout
  */
int32_t net_send(int32_t sock, const uint8_t *buf, uint32_t len, int32_t flags)
{
 8013968:	b590      	push	{r4, r7, lr}
 801396a:	b087      	sub	sp, #28
 801396c:	af00      	add	r7, sp, #0
 801396e:	60f8      	str	r0, [r7, #12]
 8013970:	60b9      	str	r1, [r7, #8]
 8013972:	607a      	str	r2, [r7, #4]
 8013974:	603b      	str	r3, [r7, #0]
  int32_t ret = NET_ERROR_FRAMEWORK;
 8013976:	f06f 0318 	mvn.w	r3, #24
 801397a:	613b      	str	r3, [r7, #16]

  if (!is_valid_socket(sock))
 801397c:	68f8      	ldr	r0, [r7, #12]
 801397e:	f7ff fccd 	bl	801331c <is_valid_socket>
 8013982:	4603      	mov	r3, r0
 8013984:	f083 0301 	eor.w	r3, r3, #1
 8013988:	b2db      	uxtb	r3, r3
 801398a:	2b00      	cmp	r3, #0
 801398c:	d00f      	beq.n	80139ae <net_send+0x46>
  {
    NET_DBG_ERROR("Invalid socket.\n");
 801398e:	f44f 72e9 	mov.w	r2, #466	; 0x1d2
 8013992:	492f      	ldr	r1, [pc, #188]	; (8013a50 <net_send+0xe8>)
 8013994:	482f      	ldr	r0, [pc, #188]	; (8013a54 <net_send+0xec>)
 8013996:	f003 fc4d 	bl	8017234 <iprintf>
 801399a:	482f      	ldr	r0, [pc, #188]	; (8013a58 <net_send+0xf0>)
 801399c:	f003 fcb8 	bl	8017310 <puts>
 80139a0:	200a      	movs	r0, #10
 80139a2:	f003 fc59 	bl	8017258 <putchar>
    ret = NET_ERROR_INVALID_SOCKET;
 80139a6:	f06f 0305 	mvn.w	r3, #5
 80139aa:	613b      	str	r3, [r7, #16]
 80139ac:	e04b      	b.n	8013a46 <net_send+0xde>
  }
  else
  {
    if (buf == NULL)
 80139ae:	68bb      	ldr	r3, [r7, #8]
 80139b0:	2b00      	cmp	r3, #0
 80139b2:	d103      	bne.n	80139bc <net_send+0x54>
    {
      ret = NET_ERROR_INVALID_SOCKET;
 80139b4:	f06f 0305 	mvn.w	r3, #5
 80139b8:	613b      	str	r3, [r7, #16]
 80139ba:	e044      	b.n	8013a46 <net_send+0xde>
    }
    else
    {
      if (check_low_level_socket(sock) < 0)
 80139bc:	68f8      	ldr	r0, [r7, #12]
 80139be:	f7ff fd4b 	bl	8013458 <check_low_level_socket>
 80139c2:	4603      	mov	r3, r0
 80139c4:	2b00      	cmp	r3, #0
 80139c6:	da0f      	bge.n	80139e8 <net_send+0x80>
      {
        NET_DBG_ERROR("low level socket has not been created.\n");
 80139c8:	f240 12df 	movw	r2, #479	; 0x1df
 80139cc:	4920      	ldr	r1, [pc, #128]	; (8013a50 <net_send+0xe8>)
 80139ce:	4821      	ldr	r0, [pc, #132]	; (8013a54 <net_send+0xec>)
 80139d0:	f003 fc30 	bl	8017234 <iprintf>
 80139d4:	4821      	ldr	r0, [pc, #132]	; (8013a5c <net_send+0xf4>)
 80139d6:	f003 fc9b 	bl	8017310 <puts>
 80139da:	200a      	movs	r0, #10
 80139dc:	f003 fc3c 	bl	8017258 <putchar>
        ret = NET_ERROR_SOCKET_FAILURE;
 80139e0:	f06f 0312 	mvn.w	r3, #18
 80139e4:	613b      	str	r3, [r7, #16]
 80139e6:	e02e      	b.n	8013a46 <net_send+0xde>
      }
      else
      {
        net_socket_t *const p_socket = net_socket_get_and_lock(sock);
 80139e8:	68f8      	ldr	r0, [r7, #12]
 80139ea:	f7ff fc85 	bl	80132f8 <net_socket_get_and_lock>
 80139ee:	6178      	str	r0, [r7, #20]
          ret = (int32_t) net_mbedtls_sock_send(p_socket, buf, len);
        }
        else
#endif /* NET_MBEDTLS_HOST_SUPPORT */
        {
          if (net_access_control(p_socket->pnetif, NET_ACCESS_SEND, &ret))
 80139f0:	697b      	ldr	r3, [r7, #20]
 80139f2:	681b      	ldr	r3, [r3, #0]
 80139f4:	f107 0210 	add.w	r2, r7, #16
 80139f8:	2104      	movs	r1, #4
 80139fa:	4618      	mov	r0, r3
 80139fc:	f000 fa22 	bl	8013e44 <net_access_control>
 8013a00:	4603      	mov	r3, r0
 8013a02:	2b00      	cmp	r3, #0
 8013a04:	d01f      	beq.n	8013a46 <net_send+0xde>
          {
            UNLOCK_SOCK(sock);
            ret = p_socket->pnetif->pdrv->psend(p_socket->ulsocket, buf, (int32_t)len, flags);
 8013a06:	697b      	ldr	r3, [r7, #20]
 8013a08:	681b      	ldr	r3, [r3, #0]
 8013a0a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8013a0e:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 8013a10:	697b      	ldr	r3, [r7, #20]
 8013a12:	6858      	ldr	r0, [r3, #4]
 8013a14:	687a      	ldr	r2, [r7, #4]
 8013a16:	683b      	ldr	r3, [r7, #0]
 8013a18:	68b9      	ldr	r1, [r7, #8]
 8013a1a:	47a0      	blx	r4
 8013a1c:	4603      	mov	r3, r0
 8013a1e:	613b      	str	r3, [r7, #16]
            LOCK_SOCK(sock);

            if ((ret < 0) && (ret != NET_ERROR_DISCONNECTED))
 8013a20:	693b      	ldr	r3, [r7, #16]
 8013a22:	2b00      	cmp	r3, #0
 8013a24:	da0f      	bge.n	8013a46 <net_send+0xde>
 8013a26:	693b      	ldr	r3, [r7, #16]
 8013a28:	f113 0f16 	cmn.w	r3, #22
 8013a2c:	d00b      	beq.n	8013a46 <net_send+0xde>
            {
              NET_DBG_ERROR("Error during sending data.\n");
 8013a2e:	f44f 72fb 	mov.w	r2, #502	; 0x1f6
 8013a32:	4907      	ldr	r1, [pc, #28]	; (8013a50 <net_send+0xe8>)
 8013a34:	4807      	ldr	r0, [pc, #28]	; (8013a54 <net_send+0xec>)
 8013a36:	f003 fbfd 	bl	8017234 <iprintf>
 8013a3a:	4809      	ldr	r0, [pc, #36]	; (8013a60 <net_send+0xf8>)
 8013a3c:	f003 fc68 	bl	8017310 <puts>
 8013a40:	200a      	movs	r0, #10
 8013a42:	f003 fc09 	bl	8017258 <putchar>
        }
        UNLOCK_SOCK(sock);
      }
    }
  }
  return ret;
 8013a46:	693b      	ldr	r3, [r7, #16]
}
 8013a48:	4618      	mov	r0, r3
 8013a4a:	371c      	adds	r7, #28
 8013a4c:	46bd      	mov	sp, r7
 8013a4e:	bd90      	pop	{r4, r7, pc}
 8013a50:	0801bb50 	.word	0x0801bb50
 8013a54:	0801bbbc 	.word	0x0801bbbc
 8013a58:	0801bbe8 	.word	0x0801bbe8
 8013a5c:	0801bc80 	.word	0x0801bc80
 8013a60:	0801bd38 	.word	0x0801bd38

08013a64 <net_recv>:
  * @param  len [in] number of byte to read
  * @param  flags [in] specify blocking or non blocking, 0 is blocking mode, NET_MSG_DONTWAIT is non blocking
  * @retval number of byte received, negative value in case of error or timeout
  */
int32_t net_recv(int32_t sock, uint8_t *buf, uint32_t len, int32_t flags_in)
{
 8013a64:	b590      	push	{r4, r7, lr}
 8013a66:	b089      	sub	sp, #36	; 0x24
 8013a68:	af00      	add	r7, sp, #0
 8013a6a:	60f8      	str	r0, [r7, #12]
 8013a6c:	60b9      	str	r1, [r7, #8]
 8013a6e:	607a      	str	r2, [r7, #4]
 8013a70:	603b      	str	r3, [r7, #0]
  int32_t ret = NET_ERROR_FRAMEWORK;
 8013a72:	f06f 0318 	mvn.w	r3, #24
 8013a76:	617b      	str	r3, [r7, #20]
  int32_t flags = flags_in;
 8013a78:	683b      	ldr	r3, [r7, #0]
 8013a7a:	61fb      	str	r3, [r7, #28]


  if (!is_valid_socket(sock))
 8013a7c:	68f8      	ldr	r0, [r7, #12]
 8013a7e:	f7ff fc4d 	bl	801331c <is_valid_socket>
 8013a82:	4603      	mov	r3, r0
 8013a84:	f083 0301 	eor.w	r3, r3, #1
 8013a88:	b2db      	uxtb	r3, r3
 8013a8a:	2b00      	cmp	r3, #0
 8013a8c:	d00f      	beq.n	8013aae <net_recv+0x4a>
  {
    NET_DBG_ERROR("Invalid socket.\n");
 8013a8e:	f240 2212 	movw	r2, #530	; 0x212
 8013a92:	4935      	ldr	r1, [pc, #212]	; (8013b68 <net_recv+0x104>)
 8013a94:	4835      	ldr	r0, [pc, #212]	; (8013b6c <net_recv+0x108>)
 8013a96:	f003 fbcd 	bl	8017234 <iprintf>
 8013a9a:	4835      	ldr	r0, [pc, #212]	; (8013b70 <net_recv+0x10c>)
 8013a9c:	f003 fc38 	bl	8017310 <puts>
 8013aa0:	200a      	movs	r0, #10
 8013aa2:	f003 fbd9 	bl	8017258 <putchar>
    ret = NET_ERROR_INVALID_SOCKET;
 8013aa6:	f06f 0305 	mvn.w	r3, #5
 8013aaa:	617b      	str	r3, [r7, #20]
 8013aac:	e057      	b.n	8013b5e <net_recv+0xfa>
  }
  else
  {
    if (buf == NULL)
 8013aae:	68bb      	ldr	r3, [r7, #8]
 8013ab0:	2b00      	cmp	r3, #0
 8013ab2:	d103      	bne.n	8013abc <net_recv+0x58>
    {
      ret = NET_ERROR_INVALID_SOCKET;
 8013ab4:	f06f 0305 	mvn.w	r3, #5
 8013ab8:	617b      	str	r3, [r7, #20]
 8013aba:	e050      	b.n	8013b5e <net_recv+0xfa>
    }
    else
    {
      if (check_low_level_socket(sock) < 0)
 8013abc:	68f8      	ldr	r0, [r7, #12]
 8013abe:	f7ff fccb 	bl	8013458 <check_low_level_socket>
 8013ac2:	4603      	mov	r3, r0
 8013ac4:	2b00      	cmp	r3, #0
 8013ac6:	da0f      	bge.n	8013ae8 <net_recv+0x84>
      {
        NET_DBG_ERROR("low level socket has not been created.\n");
 8013ac8:	f240 221f 	movw	r2, #543	; 0x21f
 8013acc:	4926      	ldr	r1, [pc, #152]	; (8013b68 <net_recv+0x104>)
 8013ace:	4827      	ldr	r0, [pc, #156]	; (8013b6c <net_recv+0x108>)
 8013ad0:	f003 fbb0 	bl	8017234 <iprintf>
 8013ad4:	4827      	ldr	r0, [pc, #156]	; (8013b74 <net_recv+0x110>)
 8013ad6:	f003 fc1b 	bl	8017310 <puts>
 8013ada:	200a      	movs	r0, #10
 8013adc:	f003 fbbc 	bl	8017258 <putchar>
        ret = NET_ERROR_SOCKET_FAILURE;
 8013ae0:	f06f 0312 	mvn.w	r3, #18
 8013ae4:	617b      	str	r3, [r7, #20]
 8013ae6:	e03a      	b.n	8013b5e <net_recv+0xfa>
      }
      else
      {
        net_socket_t *const p_socket = net_socket_get_and_lock(sock);
 8013ae8:	68f8      	ldr	r0, [r7, #12]
 8013aea:	f7ff fc05 	bl	80132f8 <net_socket_get_and_lock>
 8013aee:	61b8      	str	r0, [r7, #24]
          ret = net_mbedtls_sock_recv(p_socket, buf, len);
        }
        else
#endif /* NET_MBEDTLS_HOST_SUPPORT */
        {
          if (net_access_control(p_socket->pnetif, NET_ACCESS_RECV, &ret))
 8013af0:	69bb      	ldr	r3, [r7, #24]
 8013af2:	681b      	ldr	r3, [r3, #0]
 8013af4:	f107 0214 	add.w	r2, r7, #20
 8013af8:	2106      	movs	r1, #6
 8013afa:	4618      	mov	r0, r3
 8013afc:	f000 f9a2 	bl	8013e44 <net_access_control>
 8013b00:	4603      	mov	r3, r0
 8013b02:	2b00      	cmp	r3, #0
 8013b04:	d02b      	beq.n	8013b5e <net_recv+0xfa>
          {
            UNLOCK_SOCK(sock);
            if (p_socket->read_timeout == 0)
 8013b06:	69bb      	ldr	r3, [r7, #24]
 8013b08:	69db      	ldr	r3, [r3, #28]
 8013b0a:	2b00      	cmp	r3, #0
 8013b0c:	d101      	bne.n	8013b12 <net_recv+0xae>
            {
              flags = (int8_t) NET_MSG_DONTWAIT;
 8013b0e:	2308      	movs	r3, #8
 8013b10:	61fb      	str	r3, [r7, #28]
            }
            ret = p_socket->pnetif->pdrv->precv(p_socket->ulsocket, buf, (int32_t)len, flags);
 8013b12:	69bb      	ldr	r3, [r7, #24]
 8013b14:	681b      	ldr	r3, [r3, #0]
 8013b16:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8013b1a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8013b1c:	69bb      	ldr	r3, [r7, #24]
 8013b1e:	6858      	ldr	r0, [r3, #4]
 8013b20:	687a      	ldr	r2, [r7, #4]
 8013b22:	69fb      	ldr	r3, [r7, #28]
 8013b24:	68b9      	ldr	r1, [r7, #8]
 8013b26:	47a0      	blx	r4
 8013b28:	4603      	mov	r3, r0
 8013b2a:	617b      	str	r3, [r7, #20]
            LOCK_SOCK(sock);
            if ((ret < 0) && (ret != NET_TIMEOUT) && (ret != NET_ERROR_DISCONNECTED))
 8013b2c:	697b      	ldr	r3, [r7, #20]
 8013b2e:	2b00      	cmp	r3, #0
 8013b30:	da15      	bge.n	8013b5e <net_recv+0xfa>
 8013b32:	697b      	ldr	r3, [r7, #20]
 8013b34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013b38:	d011      	beq.n	8013b5e <net_recv+0xfa>
 8013b3a:	697b      	ldr	r3, [r7, #20]
 8013b3c:	f113 0f16 	cmn.w	r3, #22
 8013b40:	d00d      	beq.n	8013b5e <net_recv+0xfa>
            {
              NET_DBG_ERROR("Error (%"PRId32") during receiving data.\n", ret);
 8013b42:	f240 2239 	movw	r2, #569	; 0x239
 8013b46:	4908      	ldr	r1, [pc, #32]	; (8013b68 <net_recv+0x104>)
 8013b48:	4808      	ldr	r0, [pc, #32]	; (8013b6c <net_recv+0x108>)
 8013b4a:	f003 fb73 	bl	8017234 <iprintf>
 8013b4e:	697b      	ldr	r3, [r7, #20]
 8013b50:	4619      	mov	r1, r3
 8013b52:	4809      	ldr	r0, [pc, #36]	; (8013b78 <net_recv+0x114>)
 8013b54:	f003 fb6e 	bl	8017234 <iprintf>
 8013b58:	200a      	movs	r0, #10
 8013b5a:	f003 fb7d 	bl	8017258 <putchar>
        UNLOCK_SOCK(sock);
      }
    }
  }

  return ret;
 8013b5e:	697b      	ldr	r3, [r7, #20]
}
 8013b60:	4618      	mov	r0, r3
 8013b62:	3724      	adds	r7, #36	; 0x24
 8013b64:	46bd      	mov	sp, r7
 8013b66:	bd90      	pop	{r4, r7, pc}
 8013b68:	0801bb50 	.word	0x0801bb50
 8013b6c:	0801bbbc 	.word	0x0801bbbc
 8013b70:	0801bbe8 	.word	0x0801bbe8
 8013b74:	0801bc80 	.word	0x0801bc80
 8013b78:	0801bd54 	.word	0x0801bd54

08013b7c <net_closesocket>:
  * @brief  close a socket
  * @param  sock [in] integer socket number
  * @retval zero on success, negative value in case of error
  */
int32_t net_closesocket(int32_t sock)
{
 8013b7c:	b580      	push	{r7, lr}
 8013b7e:	b084      	sub	sp, #16
 8013b80:	af00      	add	r7, sp, #0
 8013b82:	6078      	str	r0, [r7, #4]
  int32_t ret = NET_ERROR_FRAMEWORK;
 8013b84:	f06f 0318 	mvn.w	r3, #24
 8013b88:	60bb      	str	r3, [r7, #8]

  if (!is_valid_socket(sock))
 8013b8a:	6878      	ldr	r0, [r7, #4]
 8013b8c:	f7ff fbc6 	bl	801331c <is_valid_socket>
 8013b90:	4603      	mov	r3, r0
 8013b92:	f083 0301 	eor.w	r3, r3, #1
 8013b96:	b2db      	uxtb	r3, r3
 8013b98:	2b00      	cmp	r3, #0
 8013b9a:	d00f      	beq.n	8013bbc <net_closesocket+0x40>
  {
    NET_WARNING("Invalid socket, can not close it.\n");
 8013b9c:	f240 22fb 	movw	r2, #763	; 0x2fb
 8013ba0:	4931      	ldr	r1, [pc, #196]	; (8013c68 <net_closesocket+0xec>)
 8013ba2:	4832      	ldr	r0, [pc, #200]	; (8013c6c <net_closesocket+0xf0>)
 8013ba4:	f003 fb46 	bl	8017234 <iprintf>
 8013ba8:	4831      	ldr	r0, [pc, #196]	; (8013c70 <net_closesocket+0xf4>)
 8013baa:	f003 fbb1 	bl	8017310 <puts>
 8013bae:	200a      	movs	r0, #10
 8013bb0:	f003 fb52 	bl	8017258 <putchar>
    ret = NET_ERROR_INVALID_SOCKET;
 8013bb4:	f06f 0305 	mvn.w	r3, #5
 8013bb8:	60bb      	str	r3, [r7, #8]
 8013bba:	e04f      	b.n	8013c5c <net_closesocket+0xe0>
  }
  else
  {
    net_socket_t *const p_socket = net_socket_get_and_lock(sock);
 8013bbc:	6878      	ldr	r0, [r7, #4]
 8013bbe:	f7ff fb9b 	bl	80132f8 <net_socket_get_and_lock>
 8013bc2:	60f8      	str	r0, [r7, #12]
      }
      p_socket->is_secure = false;
    }
#endif /* NET_MBEDTLS_HOST_SUPPORT */

    if (check_low_level_socket(sock) < 0)
 8013bc4:	6878      	ldr	r0, [r7, #4]
 8013bc6:	f7ff fc47 	bl	8013458 <check_low_level_socket>
 8013bca:	4603      	mov	r3, r0
 8013bcc:	2b00      	cmp	r3, #0
 8013bce:	da17      	bge.n	8013c00 <net_closesocket+0x84>
    {
      NET_WARNING("Failed to close: low level socket not existing.\n");
 8013bd0:	f44f 7244 	mov.w	r2, #784	; 0x310
 8013bd4:	4924      	ldr	r1, [pc, #144]	; (8013c68 <net_closesocket+0xec>)
 8013bd6:	4825      	ldr	r0, [pc, #148]	; (8013c6c <net_closesocket+0xf0>)
 8013bd8:	f003 fb2c 	bl	8017234 <iprintf>
 8013bdc:	4825      	ldr	r0, [pc, #148]	; (8013c74 <net_closesocket+0xf8>)
 8013bde:	f003 fb97 	bl	8017310 <puts>
 8013be2:	200a      	movs	r0, #10
 8013be4:	f003 fb38 	bl	8017258 <putchar>
      Sockets[sock].status = SOCKET_NOT_ALIVE;
 8013be8:	4a23      	ldr	r2, [pc, #140]	; (8013c78 <net_closesocket+0xfc>)
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	212c      	movs	r1, #44	; 0x2c
 8013bee:	fb01 f303 	mul.w	r3, r1, r3
 8013bf2:	4413      	add	r3, r2
 8013bf4:	3308      	adds	r3, #8
 8013bf6:	2200      	movs	r2, #0
 8013bf8:	701a      	strb	r2, [r3, #0]
      ret = NET_OK;
 8013bfa:	2300      	movs	r3, #0
 8013bfc:	60bb      	str	r3, [r7, #8]
 8013bfe:	e02d      	b.n	8013c5c <net_closesocket+0xe0>
    }
    else
    {
      if (net_access_control(p_socket->pnetif, NET_ACCESS_CLOSE, &ret))
 8013c00:	68fb      	ldr	r3, [r7, #12]
 8013c02:	681b      	ldr	r3, [r3, #0]
 8013c04:	f107 0208 	add.w	r2, r7, #8
 8013c08:	2108      	movs	r1, #8
 8013c0a:	4618      	mov	r0, r3
 8013c0c:	f000 f91a 	bl	8013e44 <net_access_control>
 8013c10:	4603      	mov	r3, r0
 8013c12:	2b00      	cmp	r3, #0
 8013c14:	d022      	beq.n	8013c5c <net_closesocket+0xe0>
      {
        UNLOCK_SOCK(sock);
        ret = p_socket->pnetif->pdrv->pclose(p_socket->ulsocket, p_socket->cloneserver);
 8013c16:	68fb      	ldr	r3, [r7, #12]
 8013c18:	681b      	ldr	r3, [r3, #0]
 8013c1a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8013c1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013c20:	68fa      	ldr	r2, [r7, #12]
 8013c22:	6850      	ldr	r0, [r2, #4]
 8013c24:	68fa      	ldr	r2, [r7, #12]
 8013c26:	7e12      	ldrb	r2, [r2, #24]
 8013c28:	4611      	mov	r1, r2
 8013c2a:	4798      	blx	r3
 8013c2c:	4603      	mov	r3, r0
 8013c2e:	60bb      	str	r3, [r7, #8]
        LOCK_SOCK(sock);

        if (ret != NET_OK)
 8013c30:	68bb      	ldr	r3, [r7, #8]
 8013c32:	2b00      	cmp	r3, #0
 8013c34:	d00b      	beq.n	8013c4e <net_closesocket+0xd2>
        {
          NET_DBG_ERROR("Socket cannot be closed.\n");
 8013c36:	f240 321e 	movw	r2, #798	; 0x31e
 8013c3a:	490b      	ldr	r1, [pc, #44]	; (8013c68 <net_closesocket+0xec>)
 8013c3c:	480f      	ldr	r0, [pc, #60]	; (8013c7c <net_closesocket+0x100>)
 8013c3e:	f003 faf9 	bl	8017234 <iprintf>
 8013c42:	480f      	ldr	r0, [pc, #60]	; (8013c80 <net_closesocket+0x104>)
 8013c44:	f003 fb64 	bl	8017310 <puts>
 8013c48:	200a      	movs	r0, #10
 8013c4a:	f003 fb05 	bl	8017258 <putchar>
        }
        p_socket->ulsocket = -1;
 8013c4e:	68fb      	ldr	r3, [r7, #12]
 8013c50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013c54:	605a      	str	r2, [r3, #4]
        p_socket->status = SOCKET_NOT_ALIVE;
 8013c56:	68fb      	ldr	r3, [r7, #12]
 8013c58:	2200      	movs	r2, #0
 8013c5a:	721a      	strb	r2, [r3, #8]
      }
    }
    UNLOCK_SOCK(sock);
  }

  return ret;
 8013c5c:	68bb      	ldr	r3, [r7, #8]
}
 8013c5e:	4618      	mov	r0, r3
 8013c60:	3710      	adds	r7, #16
 8013c62:	46bd      	mov	sp, r7
 8013c64:	bd80      	pop	{r7, pc}
 8013c66:	bf00      	nop
 8013c68:	0801bb50 	.word	0x0801bb50
 8013c6c:	0801bd78 	.word	0x0801bd78
 8013c70:	0801bdd8 	.word	0x0801bdd8
 8013c74:	0801bdfc 	.word	0x0801bdfc
 8013c78:	20003344 	.word	0x20003344
 8013c7c:	0801bbbc 	.word	0x0801bbbc
 8013c80:	0801be2c 	.word	0x0801be2c

08013c84 <net_setsockopt>:
  * @param  optvalue [in] void pointer to the wanted option value
  * @param  optlen [in] length of data pointed by optvalue
  * @retval zero on success, negative value in case of error
  */
int32_t net_setsockopt(int32_t sock, int32_t level, net_socketoption_t optname, const void *optvalue, uint32_t optlen)
{
 8013c84:	b590      	push	{r4, r7, lr}
 8013c86:	b08b      	sub	sp, #44	; 0x2c
 8013c88:	af02      	add	r7, sp, #8
 8013c8a:	60f8      	str	r0, [r7, #12]
 8013c8c:	60b9      	str	r1, [r7, #8]
 8013c8e:	603b      	str	r3, [r7, #0]
 8013c90:	4613      	mov	r3, r2
 8013c92:	80fb      	strh	r3, [r7, #6]
  int32_t ret = NET_ERROR_FRAMEWORK;
 8013c94:	f06f 0318 	mvn.w	r3, #24
 8013c98:	617b      	str	r3, [r7, #20]
  bool forward = false;
 8013c9a:	2300      	movs	r3, #0
 8013c9c:	77fb      	strb	r3, [r7, #31]
#ifdef NET_MBEDTLS_HOST_SUPPORT
  const char_t *optvalue_string = optvalue;
#endif /* NET_MBEDTLS_HOST_SUPPORT */

  if (!is_valid_socket(sock))
 8013c9e:	68f8      	ldr	r0, [r7, #12]
 8013ca0:	f7ff fb3c 	bl	801331c <is_valid_socket>
 8013ca4:	4603      	mov	r3, r0
 8013ca6:	f083 0301 	eor.w	r3, r3, #1
 8013caa:	b2db      	uxtb	r3, r3
 8013cac:	2b00      	cmp	r3, #0
 8013cae:	d00f      	beq.n	8013cd0 <net_setsockopt+0x4c>
  {
    NET_DBG_ERROR("Invalid socket.\n");
 8013cb0:	f240 32a6 	movw	r2, #934	; 0x3a6
 8013cb4:	495d      	ldr	r1, [pc, #372]	; (8013e2c <net_setsockopt+0x1a8>)
 8013cb6:	485e      	ldr	r0, [pc, #376]	; (8013e30 <net_setsockopt+0x1ac>)
 8013cb8:	f003 fabc 	bl	8017234 <iprintf>
 8013cbc:	485d      	ldr	r0, [pc, #372]	; (8013e34 <net_setsockopt+0x1b0>)
 8013cbe:	f003 fb27 	bl	8017310 <puts>
 8013cc2:	200a      	movs	r0, #10
 8013cc4:	f003 fac8 	bl	8017258 <putchar>
    ret = NET_ERROR_INVALID_SOCKET;
 8013cc8:	f06f 0305 	mvn.w	r3, #5
 8013ccc:	617b      	str	r3, [r7, #20]
 8013cce:	e0a7      	b.n	8013e20 <net_setsockopt+0x19c>
  }
  else
  {
    net_socket_t *const p_socket = net_socket_get_and_lock(sock);
 8013cd0:	68f8      	ldr	r0, [r7, #12]
 8013cd2:	f7ff fb11 	bl	80132f8 <net_socket_get_and_lock>
 8013cd6:	61b8      	str	r0, [r7, #24]

    switch (optname)
 8013cd8:	88fb      	ldrh	r3, [r7, #6]
 8013cda:	f241 0206 	movw	r2, #4102	; 0x1006
 8013cde:	4293      	cmp	r3, r2
 8013ce0:	d01b      	beq.n	8013d1a <net_setsockopt+0x96>
 8013ce2:	f241 0206 	movw	r2, #4102	; 0x1006
 8013ce6:	4293      	cmp	r3, r2
 8013ce8:	dc33      	bgt.n	8013d52 <net_setsockopt+0xce>
 8013cea:	2b03      	cmp	r3, #3
 8013cec:	d004      	beq.n	8013cf8 <net_setsockopt+0x74>
 8013cee:	f241 0205 	movw	r2, #4101	; 0x1005
 8013cf2:	4293      	cmp	r3, r2
 8013cf4:	d01f      	beq.n	8013d36 <net_setsockopt+0xb2>
 8013cf6:	e02c      	b.n	8013d52 <net_setsockopt+0xce>
    {
      case NET_SO_BINDTODEVICE:
      {
        OPTCHECKTYPE(void *, optlen);
 8013cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cfa:	2b04      	cmp	r3, #4
 8013cfc:	d003      	beq.n	8013d06 <net_setsockopt+0x82>
 8013cfe:	f06f 0303 	mvn.w	r3, #3
 8013d02:	617b      	str	r3, [r7, #20]
 8013d04:	e029      	b.n	8013d5a <net_setsockopt+0xd6>

        p_socket->pnetif = (net_if_handle_t *)optvalue;
 8013d06:	69bb      	ldr	r3, [r7, #24]
 8013d08:	683a      	ldr	r2, [r7, #0]
 8013d0a:	601a      	str	r2, [r3, #0]
        if (p_socket->pnetif != NULL)
 8013d0c:	69bb      	ldr	r3, [r7, #24]
 8013d0e:	681b      	ldr	r3, [r3, #0]
 8013d10:	2b00      	cmp	r3, #0
 8013d12:	d021      	beq.n	8013d58 <net_setsockopt+0xd4>
        {
          forward = true; /* forward to driver */
 8013d14:	2301      	movs	r3, #1
 8013d16:	77fb      	strb	r3, [r7, #31]
        }
      }
      break;
 8013d18:	e01e      	b.n	8013d58 <net_setsockopt+0xd4>

      case NET_SO_RCVTIMEO:
      {
        OPTCHECKTYPE(int32_t, optlen);
 8013d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d1c:	2b04      	cmp	r3, #4
 8013d1e:	d003      	beq.n	8013d28 <net_setsockopt+0xa4>
 8013d20:	f06f 0303 	mvn.w	r3, #3
 8013d24:	617b      	str	r3, [r7, #20]
 8013d26:	e018      	b.n	8013d5a <net_setsockopt+0xd6>
        p_socket->read_timeout = *(const int32_t *)optvalue;
 8013d28:	683b      	ldr	r3, [r7, #0]
 8013d2a:	681a      	ldr	r2, [r3, #0]
 8013d2c:	69bb      	ldr	r3, [r7, #24]
 8013d2e:	61da      	str	r2, [r3, #28]

#ifdef NET_MBEDTLS_HOST_SUPPORT
        net_mbedtls_set_read_timeout(p_socket);
#endif /* NET_MBEDTLS_HOST_SUPPORT */
        forward = true;
 8013d30:	2301      	movs	r3, #1
 8013d32:	77fb      	strb	r3, [r7, #31]
      }
      break;
 8013d34:	e011      	b.n	8013d5a <net_setsockopt+0xd6>


      case NET_SO_SNDTIMEO:
      {
        OPTCHECKTYPE(int32_t, optlen);
 8013d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d38:	2b04      	cmp	r3, #4
 8013d3a:	d003      	beq.n	8013d44 <net_setsockopt+0xc0>
 8013d3c:	f06f 0303 	mvn.w	r3, #3
 8013d40:	617b      	str	r3, [r7, #20]
 8013d42:	e00a      	b.n	8013d5a <net_setsockopt+0xd6>
        p_socket->write_timeout = *(const int32_t *)optvalue;
 8013d44:	683b      	ldr	r3, [r7, #0]
 8013d46:	681a      	ldr	r2, [r3, #0]
 8013d48:	69bb      	ldr	r3, [r7, #24]
 8013d4a:	621a      	str	r2, [r3, #32]

        forward = true;
 8013d4c:	2301      	movs	r3, #1
 8013d4e:	77fb      	strb	r3, [r7, #31]
      }
      break;
 8013d50:	e003      	b.n	8013d5a <net_setsockopt+0xd6>
        break;
      }
#endif /* NET_MBEDTLS_HOST_SUPPORT */

      default:
        forward = true;
 8013d52:	2301      	movs	r3, #1
 8013d54:	77fb      	strb	r3, [r7, #31]
        break;
 8013d56:	e000      	b.n	8013d5a <net_setsockopt+0xd6>
      break;
 8013d58:	bf00      	nop
    }

    if (true == forward)
 8013d5a:	7ffb      	ldrb	r3, [r7, #31]
 8013d5c:	2b00      	cmp	r3, #0
 8013d5e:	d05f      	beq.n	8013e20 <net_setsockopt+0x19c>
    {
#if (NET_USE_DEFAULT_INTERFACE == 1)
      if (p_socket->pnetif == NULL)
 8013d60:	69bb      	ldr	r3, [r7, #24]
 8013d62:	681b      	ldr	r3, [r3, #0]
 8013d64:	2b00      	cmp	r3, #0
 8013d66:	d105      	bne.n	8013d74 <net_setsockopt+0xf0>
      {
        p_socket->pnetif = net_if_find(NULL);
 8013d68:	2000      	movs	r0, #0
 8013d6a:	f7ff f8d5 	bl	8012f18 <net_if_find>
 8013d6e:	4602      	mov	r2, r0
 8013d70:	69bb      	ldr	r3, [r7, #24]
 8013d72:	601a      	str	r2, [r3, #0]
      }
#endif /* NET_USE_DEFAULT_INTERFACE */

      if (p_socket->pnetif == NULL)
 8013d74:	69bb      	ldr	r3, [r7, #24]
 8013d76:	681b      	ldr	r3, [r3, #0]
 8013d78:	2b00      	cmp	r3, #0
 8013d7a:	d10f      	bne.n	8013d9c <net_setsockopt+0x118>
      {
        NET_DBG_ERROR("No physical interface can be bound");
 8013d7c:	f240 42b1 	movw	r2, #1201	; 0x4b1
 8013d80:	492a      	ldr	r1, [pc, #168]	; (8013e2c <net_setsockopt+0x1a8>)
 8013d82:	482b      	ldr	r0, [pc, #172]	; (8013e30 <net_setsockopt+0x1ac>)
 8013d84:	f003 fa56 	bl	8017234 <iprintf>
 8013d88:	482b      	ldr	r0, [pc, #172]	; (8013e38 <net_setsockopt+0x1b4>)
 8013d8a:	f003 fa53 	bl	8017234 <iprintf>
 8013d8e:	200a      	movs	r0, #10
 8013d90:	f003 fa62 	bl	8017258 <putchar>
        ret = NET_ERROR_INTERFACE_FAILURE;
 8013d94:	f06f 0310 	mvn.w	r3, #16
 8013d98:	617b      	str	r3, [r7, #20]
 8013d9a:	e041      	b.n	8013e20 <net_setsockopt+0x19c>
      }
      else
      {
        if (create_low_level_socket(sock) < 0)
 8013d9c:	68f8      	ldr	r0, [r7, #12]
 8013d9e:	f7ff fadf 	bl	8013360 <create_low_level_socket>
 8013da2:	4603      	mov	r3, r0
 8013da4:	2b00      	cmp	r3, #0
 8013da6:	da0f      	bge.n	8013dc8 <net_setsockopt+0x144>
        {
          NET_DBG_ERROR("low level socket creation failed.\n");
 8013da8:	f44f 6297 	mov.w	r2, #1208	; 0x4b8
 8013dac:	491f      	ldr	r1, [pc, #124]	; (8013e2c <net_setsockopt+0x1a8>)
 8013dae:	4820      	ldr	r0, [pc, #128]	; (8013e30 <net_setsockopt+0x1ac>)
 8013db0:	f003 fa40 	bl	8017234 <iprintf>
 8013db4:	4821      	ldr	r0, [pc, #132]	; (8013e3c <net_setsockopt+0x1b8>)
 8013db6:	f003 faab 	bl	8017310 <puts>
 8013dba:	200a      	movs	r0, #10
 8013dbc:	f003 fa4c 	bl	8017258 <putchar>
          ret = NET_ERROR_SOCKET_FAILURE;
 8013dc0:	f06f 0312 	mvn.w	r3, #18
 8013dc4:	617b      	str	r3, [r7, #20]
 8013dc6:	e02b      	b.n	8013e20 <net_setsockopt+0x19c>
        }
        else
        {
          if (net_access_control(p_socket->pnetif, NET_ACCESS_SETSOCKOPT, &ret))
 8013dc8:	69bb      	ldr	r3, [r7, #24]
 8013dca:	681b      	ldr	r3, [r3, #0]
 8013dcc:	f107 0214 	add.w	r2, r7, #20
 8013dd0:	2109      	movs	r1, #9
 8013dd2:	4618      	mov	r0, r3
 8013dd4:	f000 f836 	bl	8013e44 <net_access_control>
 8013dd8:	4603      	mov	r3, r0
 8013dda:	2b00      	cmp	r3, #0
 8013ddc:	d020      	beq.n	8013e20 <net_setsockopt+0x19c>
          {
            UNLOCK_SOCK(sock);
            ret = p_socket->pnetif->pdrv->psetsockopt(p_socket->ulsocket, level, optname, optvalue, optlen);
 8013dde:	69bb      	ldr	r3, [r7, #24]
 8013de0:	681b      	ldr	r3, [r3, #0]
 8013de2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8013de6:	6d9c      	ldr	r4, [r3, #88]	; 0x58
 8013de8:	69bb      	ldr	r3, [r7, #24]
 8013dea:	6858      	ldr	r0, [r3, #4]
 8013dec:	88fa      	ldrh	r2, [r7, #6]
 8013dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013df0:	9300      	str	r3, [sp, #0]
 8013df2:	683b      	ldr	r3, [r7, #0]
 8013df4:	68b9      	ldr	r1, [r7, #8]
 8013df6:	47a0      	blx	r4
 8013df8:	4603      	mov	r3, r0
 8013dfa:	617b      	str	r3, [r7, #20]
            LOCK_SOCK(sock);
            if (ret < 0)
 8013dfc:	697b      	ldr	r3, [r7, #20]
 8013dfe:	2b00      	cmp	r3, #0
 8013e00:	da0e      	bge.n	8013e20 <net_setsockopt+0x19c>
            {
              NET_DBG_ERROR("Error %"PRId32" while setting socket option (optname=%d).\n", ret, optname);
 8013e02:	f240 42c4 	movw	r2, #1220	; 0x4c4
 8013e06:	4909      	ldr	r1, [pc, #36]	; (8013e2c <net_setsockopt+0x1a8>)
 8013e08:	4809      	ldr	r0, [pc, #36]	; (8013e30 <net_setsockopt+0x1ac>)
 8013e0a:	f003 fa13 	bl	8017234 <iprintf>
 8013e0e:	697b      	ldr	r3, [r7, #20]
 8013e10:	88fa      	ldrh	r2, [r7, #6]
 8013e12:	4619      	mov	r1, r3
 8013e14:	480a      	ldr	r0, [pc, #40]	; (8013e40 <net_setsockopt+0x1bc>)
 8013e16:	f003 fa0d 	bl	8017234 <iprintf>
 8013e1a:	200a      	movs	r0, #10
 8013e1c:	f003 fa1c 	bl	8017258 <putchar>
        }
      }
    }
    UNLOCK_SOCK(sock);
  }
  return ret;
 8013e20:	697b      	ldr	r3, [r7, #20]
}
 8013e22:	4618      	mov	r0, r3
 8013e24:	3724      	adds	r7, #36	; 0x24
 8013e26:	46bd      	mov	sp, r7
 8013e28:	bd90      	pop	{r4, r7, pc}
 8013e2a:	bf00      	nop
 8013e2c:	0801bb50 	.word	0x0801bb50
 8013e30:	0801bbbc 	.word	0x0801bbbc
 8013e34:	0801bbe8 	.word	0x0801bbe8
 8013e38:	0801be88 	.word	0x0801be88
 8013e3c:	0801bbf8 	.word	0x0801bbf8
 8013e40:	0801beac 	.word	0x0801beac

08013e44 <net_access_control>:

/** @defgroup Socket
  * @}
  */
bool net_access_control(net_if_handle_t *pnetif, net_access_t func, int32_t *code)
{
 8013e44:	b480      	push	{r7}
 8013e46:	b087      	sub	sp, #28
 8013e48:	af00      	add	r7, sp, #0
 8013e4a:	60f8      	str	r0, [r7, #12]
 8013e4c:	460b      	mov	r3, r1
 8013e4e:	607a      	str	r2, [r7, #4]
 8013e50:	72fb      	strb	r3, [r7, #11]
  bool ret = true;
 8013e52:	2301      	movs	r3, #1
 8013e54:	75fb      	strb	r3, [r7, #23]
  if ((pnetif == NULL) || (pnetif->state == NET_STATE_CONNECTION_LOST))
 8013e56:	68fb      	ldr	r3, [r7, #12]
 8013e58:	2b00      	cmp	r3, #0
 8013e5a:	d004      	beq.n	8013e66 <net_access_control+0x22>
 8013e5c:	68fb      	ldr	r3, [r7, #12]
 8013e5e:	f893 30eb 	ldrb.w	r3, [r3, #235]	; 0xeb
 8013e62:	2b08      	cmp	r3, #8
 8013e64:	d104      	bne.n	8013e70 <net_access_control+0x2c>
  {
    /* send, receive function return zero, so user application should normally retry transfer */
    ret = false;
 8013e66:	2300      	movs	r3, #0
 8013e68:	75fb      	strb	r3, [r7, #23]
    *code = 0;
 8013e6a:	687b      	ldr	r3, [r7, #4]
 8013e6c:	2200      	movs	r2, #0
 8013e6e:	601a      	str	r2, [r3, #0]
  }

  switch (func)
 8013e70:	7afb      	ldrb	r3, [r7, #11]
 8013e72:	2b09      	cmp	r3, #9
 8013e74:	d82f      	bhi.n	8013ed6 <net_access_control+0x92>
 8013e76:	a201      	add	r2, pc, #4	; (adr r2, 8013e7c <net_access_control+0x38>)
 8013e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013e7c:	08013ea5 	.word	0x08013ea5
 8013e80:	08013ee1 	.word	0x08013ee1
 8013e84:	08013ee1 	.word	0x08013ee1
 8013e88:	08013ee1 	.word	0x08013ee1
 8013e8c:	08013eb1 	.word	0x08013eb1
 8013e90:	08013eb9 	.word	0x08013eb9
 8013e94:	08013ec1 	.word	0x08013ec1
 8013e98:	08013ec9 	.word	0x08013ec9
 8013e9c:	08013eab 	.word	0x08013eab
 8013ea0:	08013ed1 	.word	0x08013ed1
  {
    case NET_ACCESS_SOCKET:
      ret = true;
 8013ea4:	2301      	movs	r3, #1
 8013ea6:	75fb      	strb	r3, [r7, #23]
      break;
 8013ea8:	e01b      	b.n	8013ee2 <net_access_control+0x9e>

    case NET_ACCESS_CONNECT:
      break;

    case NET_ACCESS_CLOSE:
      ret = true;
 8013eaa:	2301      	movs	r3, #1
 8013eac:	75fb      	strb	r3, [r7, #23]
      break;
 8013eae:	e018      	b.n	8013ee2 <net_access_control+0x9e>

    case NET_ACCESS_SEND:
      *code = 0;
 8013eb0:	687b      	ldr	r3, [r7, #4]
 8013eb2:	2200      	movs	r2, #0
 8013eb4:	601a      	str	r2, [r3, #0]
      break;
 8013eb6:	e014      	b.n	8013ee2 <net_access_control+0x9e>

    case NET_ACCESS_SENDTO:
      *code = 0;
 8013eb8:	687b      	ldr	r3, [r7, #4]
 8013eba:	2200      	movs	r2, #0
 8013ebc:	601a      	str	r2, [r3, #0]
      break;
 8013ebe:	e010      	b.n	8013ee2 <net_access_control+0x9e>

    case NET_ACCESS_RECV:
      *code = 0;
 8013ec0:	687b      	ldr	r3, [r7, #4]
 8013ec2:	2200      	movs	r2, #0
 8013ec4:	601a      	str	r2, [r3, #0]
      break;
 8013ec6:	e00c      	b.n	8013ee2 <net_access_control+0x9e>

    case NET_ACCESS_RECVFROM:
      *code = 0;
 8013ec8:	687b      	ldr	r3, [r7, #4]
 8013eca:	2200      	movs	r2, #0
 8013ecc:	601a      	str	r2, [r3, #0]
      break;
 8013ece:	e008      	b.n	8013ee2 <net_access_control+0x9e>

    case NET_ACCESS_SETSOCKOPT:
      ret = true;
 8013ed0:	2301      	movs	r3, #1
 8013ed2:	75fb      	strb	r3, [r7, #23]
      break;
 8013ed4:	e005      	b.n	8013ee2 <net_access_control+0x9e>

    default:
      *code = NET_ERROR_FRAMEWORK;
 8013ed6:	687b      	ldr	r3, [r7, #4]
 8013ed8:	f06f 0218 	mvn.w	r2, #24
 8013edc:	601a      	str	r2, [r3, #0]
      break;
 8013ede:	e000      	b.n	8013ee2 <net_access_control+0x9e>
      break;
 8013ee0:	bf00      	nop
  }
  return ret;
 8013ee2:	7dfb      	ldrb	r3, [r7, #23]
}
 8013ee4:	4618      	mov	r0, r3
 8013ee6:	371c      	adds	r7, #28
 8013ee8:	46bd      	mov	sp, r7
 8013eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eee:	4770      	bx	lr

08013ef0 <set_state>:
static int32_t net_state_stopping(net_if_handle_t *pnetif, net_state_event_t event);
static int32_t net_state_connection_lost(net_if_handle_t *pnetif, net_state_event_t event);


static void set_state(net_if_handle_t *pnetif, net_state_t state)
{
 8013ef0:	b580      	push	{r7, lr}
 8013ef2:	b082      	sub	sp, #8
 8013ef4:	af00      	add	r7, sp, #0
 8013ef6:	6078      	str	r0, [r7, #4]
 8013ef8:	460b      	mov	r3, r1
 8013efa:	70fb      	strb	r3, [r7, #3]
  pnetif->state = state;
 8013efc:	687b      	ldr	r3, [r7, #4]
 8013efe:	78fa      	ldrb	r2, [r7, #3]
 8013f00:	f883 20eb 	strb.w	r2, [r3, #235]	; 0xeb
  net_if_notify(pnetif, NET_EVENT_STATE_CHANGE, (uint32_t) state, NULL);
 8013f04:	78fa      	ldrb	r2, [r7, #3]
 8013f06:	2300      	movs	r3, #0
 8013f08:	2100      	movs	r1, #0
 8013f0a:	6878      	ldr	r0, [r7, #4]
 8013f0c:	f7ff f897 	bl	801303e <net_if_notify>
  SIGNAL_STATE_CHANGE();
}
 8013f10:	bf00      	nop
 8013f12:	3708      	adds	r7, #8
 8013f14:	46bd      	mov	sp, r7
 8013f16:	bd80      	pop	{r7, pc}

08013f18 <net_state_initialized>:


static int32_t net_state_initialized(net_if_handle_t *pnetif, net_state_event_t event)
{
 8013f18:	b580      	push	{r7, lr}
 8013f1a:	b084      	sub	sp, #16
 8013f1c:	af00      	add	r7, sp, #0
 8013f1e:	6078      	str	r0, [r7, #4]
 8013f20:	460b      	mov	r3, r1
 8013f22:	70fb      	strb	r3, [r7, #3]
  int32_t ret = NET_OK;
 8013f24:	2300      	movs	r3, #0
 8013f26:	60fb      	str	r3, [r7, #12]

  switch (event)
 8013f28:	78fb      	ldrb	r3, [r7, #3]
 8013f2a:	2b01      	cmp	r3, #1
 8013f2c:	d002      	beq.n	8013f34 <net_state_initialized+0x1c>
 8013f2e:	2b05      	cmp	r3, #5
 8013f30:	d01d      	beq.n	8013f6e <net_state_initialized+0x56>
        ret = NET_ERROR_INTERFACE_FAILURE;
      }
      break;

    default:
      break;
 8013f32:	e03c      	b.n	8013fae <net_state_initialized+0x96>
      set_state(pnetif, NET_STATE_STARTING);
 8013f34:	2102      	movs	r1, #2
 8013f36:	6878      	ldr	r0, [r7, #4]
 8013f38:	f7ff ffda 	bl	8013ef0 <set_state>
      ret = pnetif->pdrv->if_start(pnetif);
 8013f3c:	687b      	ldr	r3, [r7, #4]
 8013f3e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8013f42:	68db      	ldr	r3, [r3, #12]
 8013f44:	6878      	ldr	r0, [r7, #4]
 8013f46:	4798      	blx	r3
 8013f48:	60f8      	str	r0, [r7, #12]
      if (NET_OK != ret)
 8013f4a:	68fb      	ldr	r3, [r7, #12]
 8013f4c:	2b00      	cmp	r3, #0
 8013f4e:	d02b      	beq.n	8013fa8 <net_state_initialized+0x90>
        NET_DBG_ERROR("Interface cannot be started.\n");
 8013f50:	2258      	movs	r2, #88	; 0x58
 8013f52:	4919      	ldr	r1, [pc, #100]	; (8013fb8 <net_state_initialized+0xa0>)
 8013f54:	4819      	ldr	r0, [pc, #100]	; (8013fbc <net_state_initialized+0xa4>)
 8013f56:	f003 f96d 	bl	8017234 <iprintf>
 8013f5a:	4819      	ldr	r0, [pc, #100]	; (8013fc0 <net_state_initialized+0xa8>)
 8013f5c:	f003 f9d8 	bl	8017310 <puts>
 8013f60:	200a      	movs	r0, #10
 8013f62:	f003 f979 	bl	8017258 <putchar>
        ret = NET_ERROR_INTERFACE_FAILURE;
 8013f66:	f06f 0310 	mvn.w	r3, #16
 8013f6a:	60fb      	str	r3, [r7, #12]
      break;
 8013f6c:	e01c      	b.n	8013fa8 <net_state_initialized+0x90>
      ret = pnetif->pdrv->if_deinit(pnetif);
 8013f6e:	687b      	ldr	r3, [r7, #4]
 8013f70:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8013f74:	689b      	ldr	r3, [r3, #8]
 8013f76:	6878      	ldr	r0, [r7, #4]
 8013f78:	4798      	blx	r3
 8013f7a:	60f8      	str	r0, [r7, #12]
      set_state(pnetif, NET_STATE_DEINITIALIZED);
 8013f7c:	2100      	movs	r1, #0
 8013f7e:	6878      	ldr	r0, [r7, #4]
 8013f80:	f7ff ffb6 	bl	8013ef0 <set_state>
      if (NET_OK != ret)
 8013f84:	68fb      	ldr	r3, [r7, #12]
 8013f86:	2b00      	cmp	r3, #0
 8013f88:	d010      	beq.n	8013fac <net_state_initialized+0x94>
        NET_DBG_ERROR("Interface cannot be de-initialized.\n");
 8013f8a:	2262      	movs	r2, #98	; 0x62
 8013f8c:	490a      	ldr	r1, [pc, #40]	; (8013fb8 <net_state_initialized+0xa0>)
 8013f8e:	480b      	ldr	r0, [pc, #44]	; (8013fbc <net_state_initialized+0xa4>)
 8013f90:	f003 f950 	bl	8017234 <iprintf>
 8013f94:	480b      	ldr	r0, [pc, #44]	; (8013fc4 <net_state_initialized+0xac>)
 8013f96:	f003 f9bb 	bl	8017310 <puts>
 8013f9a:	200a      	movs	r0, #10
 8013f9c:	f003 f95c 	bl	8017258 <putchar>
        ret = NET_ERROR_INTERFACE_FAILURE;
 8013fa0:	f06f 0310 	mvn.w	r3, #16
 8013fa4:	60fb      	str	r3, [r7, #12]
      break;
 8013fa6:	e001      	b.n	8013fac <net_state_initialized+0x94>
      break;
 8013fa8:	bf00      	nop
 8013faa:	e000      	b.n	8013fae <net_state_initialized+0x96>
      break;
 8013fac:	bf00      	nop
  }
  return ret;
 8013fae:	68fb      	ldr	r3, [r7, #12]
}
 8013fb0:	4618      	mov	r0, r3
 8013fb2:	3710      	adds	r7, #16
 8013fb4:	46bd      	mov	sp, r7
 8013fb6:	bd80      	pop	{r7, pc}
 8013fb8:	0801bee4 	.word	0x0801bee4
 8013fbc:	0801bf50 	.word	0x0801bf50
 8013fc0:	0801bf60 	.word	0x0801bf60
 8013fc4:	0801bf80 	.word	0x0801bf80

08013fc8 <net_state_starting>:


static int32_t net_state_starting(net_if_handle_t *pnetif, net_state_event_t event)
{
 8013fc8:	b580      	push	{r7, lr}
 8013fca:	b084      	sub	sp, #16
 8013fcc:	af00      	add	r7, sp, #0
 8013fce:	6078      	str	r0, [r7, #4]
 8013fd0:	460b      	mov	r3, r1
 8013fd2:	70fb      	strb	r3, [r7, #3]
  int32_t ret = NET_OK;
 8013fd4:	2300      	movs	r3, #0
 8013fd6:	60fb      	str	r3, [r7, #12]

  switch (event)
 8013fd8:	78fb      	ldrb	r3, [r7, #3]
 8013fda:	2b04      	cmp	r3, #4
 8013fdc:	d006      	beq.n	8013fec <net_state_starting+0x24>
 8013fde:	2b07      	cmp	r3, #7
 8013fe0:	d121      	bne.n	8014026 <net_state_starting+0x5e>
  {
    case NET_EVENT_INTERFACE_READY:
      set_state(pnetif, NET_STATE_READY);
 8013fe2:	2103      	movs	r1, #3
 8013fe4:	6878      	ldr	r0, [r7, #4]
 8013fe6:	f7ff ff83 	bl	8013ef0 <set_state>
      break;
 8013fea:	e01f      	b.n	801402c <net_state_starting+0x64>

    case NET_EVENT_CMD_STOP:
      set_state(pnetif, NET_STATE_INITIALIZED);
 8013fec:	2101      	movs	r1, #1
 8013fee:	6878      	ldr	r0, [r7, #4]
 8013ff0:	f7ff ff7e 	bl	8013ef0 <set_state>
      ret = pnetif->pdrv->if_stop(pnetif);
 8013ff4:	687b      	ldr	r3, [r7, #4]
 8013ff6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8013ffa:	691b      	ldr	r3, [r3, #16]
 8013ffc:	6878      	ldr	r0, [r7, #4]
 8013ffe:	4798      	blx	r3
 8014000:	60f8      	str	r0, [r7, #12]
      if (NET_OK != ret)
 8014002:	68fb      	ldr	r3, [r7, #12]
 8014004:	2b00      	cmp	r3, #0
 8014006:	d010      	beq.n	801402a <net_state_starting+0x62>
      {
        NET_DBG_ERROR("Interface cannot stop.\n");
 8014008:	227d      	movs	r2, #125	; 0x7d
 801400a:	490b      	ldr	r1, [pc, #44]	; (8014038 <net_state_starting+0x70>)
 801400c:	480b      	ldr	r0, [pc, #44]	; (801403c <net_state_starting+0x74>)
 801400e:	f003 f911 	bl	8017234 <iprintf>
 8014012:	480b      	ldr	r0, [pc, #44]	; (8014040 <net_state_starting+0x78>)
 8014014:	f003 f97c 	bl	8017310 <puts>
 8014018:	200a      	movs	r0, #10
 801401a:	f003 f91d 	bl	8017258 <putchar>
        ret = NET_ERROR_INTERFACE_FAILURE;
 801401e:	f06f 0310 	mvn.w	r3, #16
 8014022:	60fb      	str	r3, [r7, #12]
      }
      break;
 8014024:	e001      	b.n	801402a <net_state_starting+0x62>
    default:
      break;
 8014026:	bf00      	nop
 8014028:	e000      	b.n	801402c <net_state_starting+0x64>
      break;
 801402a:	bf00      	nop
  }
  return ret;
 801402c:	68fb      	ldr	r3, [r7, #12]
}
 801402e:	4618      	mov	r0, r3
 8014030:	3710      	adds	r7, #16
 8014032:	46bd      	mov	sp, r7
 8014034:	bd80      	pop	{r7, pc}
 8014036:	bf00      	nop
 8014038:	0801bee4 	.word	0x0801bee4
 801403c:	0801bf50 	.word	0x0801bf50
 8014040:	0801bfa4 	.word	0x0801bfa4

08014044 <net_state_ready>:


static int32_t net_state_ready(net_if_handle_t *pnetif, net_state_event_t event)
{
 8014044:	b580      	push	{r7, lr}
 8014046:	b084      	sub	sp, #16
 8014048:	af00      	add	r7, sp, #0
 801404a:	6078      	str	r0, [r7, #4]
 801404c:	460b      	mov	r3, r1
 801404e:	70fb      	strb	r3, [r7, #3]
  int32_t ret = NET_OK;
 8014050:	2300      	movs	r3, #0
 8014052:	60fb      	str	r3, [r7, #12]

  switch (event)
 8014054:	78fb      	ldrb	r3, [r7, #3]
 8014056:	2b02      	cmp	r3, #2
 8014058:	d002      	beq.n	8014060 <net_state_ready+0x1c>
 801405a:	2b04      	cmp	r3, #4
 801405c:	d01d      	beq.n	801409a <net_state_ready+0x56>
        ret = NET_ERROR_INTERFACE_FAILURE;
      }
      break;

    default:
      break;
 801405e:	e03c      	b.n	80140da <net_state_ready+0x96>
      set_state(pnetif, NET_STATE_CONNECTING);
 8014060:	2104      	movs	r1, #4
 8014062:	6878      	ldr	r0, [r7, #4]
 8014064:	f7ff ff44 	bl	8013ef0 <set_state>
      ret = pnetif->pdrv->if_connect(pnetif);
 8014068:	687b      	ldr	r3, [r7, #4]
 801406a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 801406e:	699b      	ldr	r3, [r3, #24]
 8014070:	6878      	ldr	r0, [r7, #4]
 8014072:	4798      	blx	r3
 8014074:	60f8      	str	r0, [r7, #12]
      if (NET_OK != ret)
 8014076:	68fb      	ldr	r3, [r7, #12]
 8014078:	2b00      	cmp	r3, #0
 801407a:	d02b      	beq.n	80140d4 <net_state_ready+0x90>
        NET_DBG_ERROR("Interface cannot connect.\n");
 801407c:	2293      	movs	r2, #147	; 0x93
 801407e:	4919      	ldr	r1, [pc, #100]	; (80140e4 <net_state_ready+0xa0>)
 8014080:	4819      	ldr	r0, [pc, #100]	; (80140e8 <net_state_ready+0xa4>)
 8014082:	f003 f8d7 	bl	8017234 <iprintf>
 8014086:	4819      	ldr	r0, [pc, #100]	; (80140ec <net_state_ready+0xa8>)
 8014088:	f003 f942 	bl	8017310 <puts>
 801408c:	200a      	movs	r0, #10
 801408e:	f003 f8e3 	bl	8017258 <putchar>
        ret = NET_ERROR_INTERFACE_FAILURE;
 8014092:	f06f 0310 	mvn.w	r3, #16
 8014096:	60fb      	str	r3, [r7, #12]
      break;
 8014098:	e01c      	b.n	80140d4 <net_state_ready+0x90>
      set_state(pnetif, NET_STATE_STOPPING);
 801409a:	2106      	movs	r1, #6
 801409c:	6878      	ldr	r0, [r7, #4]
 801409e:	f7ff ff27 	bl	8013ef0 <set_state>
      ret = pnetif->pdrv->if_stop(pnetif);
 80140a2:	687b      	ldr	r3, [r7, #4]
 80140a4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80140a8:	691b      	ldr	r3, [r3, #16]
 80140aa:	6878      	ldr	r0, [r7, #4]
 80140ac:	4798      	blx	r3
 80140ae:	60f8      	str	r0, [r7, #12]
      if (NET_OK != ret)
 80140b0:	68fb      	ldr	r3, [r7, #12]
 80140b2:	2b00      	cmp	r3, #0
 80140b4:	d010      	beq.n	80140d8 <net_state_ready+0x94>
        NET_DBG_ERROR("Interface cannot stop.\n");
 80140b6:	229d      	movs	r2, #157	; 0x9d
 80140b8:	490a      	ldr	r1, [pc, #40]	; (80140e4 <net_state_ready+0xa0>)
 80140ba:	480b      	ldr	r0, [pc, #44]	; (80140e8 <net_state_ready+0xa4>)
 80140bc:	f003 f8ba 	bl	8017234 <iprintf>
 80140c0:	480b      	ldr	r0, [pc, #44]	; (80140f0 <net_state_ready+0xac>)
 80140c2:	f003 f925 	bl	8017310 <puts>
 80140c6:	200a      	movs	r0, #10
 80140c8:	f003 f8c6 	bl	8017258 <putchar>
        ret = NET_ERROR_INTERFACE_FAILURE;
 80140cc:	f06f 0310 	mvn.w	r3, #16
 80140d0:	60fb      	str	r3, [r7, #12]
      break;
 80140d2:	e001      	b.n	80140d8 <net_state_ready+0x94>
      break;
 80140d4:	bf00      	nop
 80140d6:	e000      	b.n	80140da <net_state_ready+0x96>
      break;
 80140d8:	bf00      	nop
  }
  return ret;
 80140da:	68fb      	ldr	r3, [r7, #12]
}
 80140dc:	4618      	mov	r0, r3
 80140de:	3710      	adds	r7, #16
 80140e0:	46bd      	mov	sp, r7
 80140e2:	bd80      	pop	{r7, pc}
 80140e4:	0801bee4 	.word	0x0801bee4
 80140e8:	0801bf50 	.word	0x0801bf50
 80140ec:	0801bfbc 	.word	0x0801bfbc
 80140f0:	0801bfa4 	.word	0x0801bfa4

080140f4 <net_state_connecting>:


static int32_t net_state_connecting(net_if_handle_t *pnetif, net_state_event_t event)
{
 80140f4:	b580      	push	{r7, lr}
 80140f6:	b084      	sub	sp, #16
 80140f8:	af00      	add	r7, sp, #0
 80140fa:	6078      	str	r0, [r7, #4]
 80140fc:	460b      	mov	r3, r1
 80140fe:	70fb      	strb	r3, [r7, #3]
  int32_t ret = NET_OK;
 8014100:	2300      	movs	r3, #0
 8014102:	60fb      	str	r3, [r7, #12]

  switch (event)
 8014104:	78fb      	ldrb	r3, [r7, #3]
 8014106:	2b03      	cmp	r3, #3
 8014108:	d006      	beq.n	8014118 <net_state_connecting+0x24>
 801410a:	2b0a      	cmp	r3, #10
 801410c:	d109      	bne.n	8014122 <net_state_connecting+0x2e>
  {
    case NET_EVENT_IPADDR:
      set_state(pnetif, NET_STATE_CONNECTED);
 801410e:	2105      	movs	r1, #5
 8014110:	6878      	ldr	r0, [r7, #4]
 8014112:	f7ff feed 	bl	8013ef0 <set_state>
      break;
 8014116:	e005      	b.n	8014124 <net_state_connecting+0x30>

    case NET_EVENT_CMD_DISCONNECT:
      set_state(pnetif, NET_STATE_READY);
 8014118:	2103      	movs	r1, #3
 801411a:	6878      	ldr	r0, [r7, #4]
 801411c:	f7ff fee8 	bl	8013ef0 <set_state>
      break;
 8014120:	e000      	b.n	8014124 <net_state_connecting+0x30>

    default:
      break;
 8014122:	bf00      	nop
  }
  return ret;
 8014124:	68fb      	ldr	r3, [r7, #12]
}
 8014126:	4618      	mov	r0, r3
 8014128:	3710      	adds	r7, #16
 801412a:	46bd      	mov	sp, r7
 801412c:	bd80      	pop	{r7, pc}
	...

08014130 <net_state_connected>:


static int32_t net_state_connected(net_if_handle_t *pnetif, net_state_event_t event)
{
 8014130:	b580      	push	{r7, lr}
 8014132:	b084      	sub	sp, #16
 8014134:	af00      	add	r7, sp, #0
 8014136:	6078      	str	r0, [r7, #4]
 8014138:	460b      	mov	r3, r1
 801413a:	70fb      	strb	r3, [r7, #3]
  int32_t ret = NET_OK;
 801413c:	2300      	movs	r3, #0
 801413e:	60fb      	str	r3, [r7, #12]

  switch (event)
 8014140:	78fb      	ldrb	r3, [r7, #3]
 8014142:	2b0a      	cmp	r3, #10
 8014144:	d028      	beq.n	8014198 <net_state_connected+0x68>
 8014146:	2b0a      	cmp	r3, #10
 8014148:	dc2b      	bgt.n	80141a2 <net_state_connected+0x72>
 801414a:	2b03      	cmp	r3, #3
 801414c:	d002      	beq.n	8014154 <net_state_connected+0x24>
 801414e:	2b09      	cmp	r3, #9
 8014150:	d01d      	beq.n	801418e <net_state_connected+0x5e>
    case NET_EVENT_IPADDR:
      set_state(pnetif, NET_STATE_CONNECTED);
      break;

    default:
      break;
 8014152:	e026      	b.n	80141a2 <net_state_connected+0x72>
      set_state(pnetif, NET_STATE_DISCONNECTING);
 8014154:	2107      	movs	r1, #7
 8014156:	6878      	ldr	r0, [r7, #4]
 8014158:	f7ff feca 	bl	8013ef0 <set_state>
      ret = pnetif->pdrv->if_disconnect(pnetif);
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8014162:	69db      	ldr	r3, [r3, #28]
 8014164:	6878      	ldr	r0, [r7, #4]
 8014166:	4798      	blx	r3
 8014168:	60f8      	str	r0, [r7, #12]
      if (NET_OK != ret)
 801416a:	68fb      	ldr	r3, [r7, #12]
 801416c:	2b00      	cmp	r3, #0
 801416e:	d01a      	beq.n	80141a6 <net_state_connected+0x76>
        NET_DBG_ERROR("Interface cannot disconnect.\n");
 8014170:	22c9      	movs	r2, #201	; 0xc9
 8014172:	4910      	ldr	r1, [pc, #64]	; (80141b4 <net_state_connected+0x84>)
 8014174:	4810      	ldr	r0, [pc, #64]	; (80141b8 <net_state_connected+0x88>)
 8014176:	f003 f85d 	bl	8017234 <iprintf>
 801417a:	4810      	ldr	r0, [pc, #64]	; (80141bc <net_state_connected+0x8c>)
 801417c:	f003 f8c8 	bl	8017310 <puts>
 8014180:	200a      	movs	r0, #10
 8014182:	f003 f869 	bl	8017258 <putchar>
        ret = NET_ERROR_INTERFACE_FAILURE;
 8014186:	f06f 0310 	mvn.w	r3, #16
 801418a:	60fb      	str	r3, [r7, #12]
      break;
 801418c:	e00b      	b.n	80141a6 <net_state_connected+0x76>
      set_state(pnetif, NET_STATE_CONNECTION_LOST);
 801418e:	2108      	movs	r1, #8
 8014190:	6878      	ldr	r0, [r7, #4]
 8014192:	f7ff fead 	bl	8013ef0 <set_state>
      break;
 8014196:	e007      	b.n	80141a8 <net_state_connected+0x78>
      set_state(pnetif, NET_STATE_CONNECTED);
 8014198:	2105      	movs	r1, #5
 801419a:	6878      	ldr	r0, [r7, #4]
 801419c:	f7ff fea8 	bl	8013ef0 <set_state>
      break;
 80141a0:	e002      	b.n	80141a8 <net_state_connected+0x78>
      break;
 80141a2:	bf00      	nop
 80141a4:	e000      	b.n	80141a8 <net_state_connected+0x78>
      break;
 80141a6:	bf00      	nop
  }
  return ret;
 80141a8:	68fb      	ldr	r3, [r7, #12]
}
 80141aa:	4618      	mov	r0, r3
 80141ac:	3710      	adds	r7, #16
 80141ae:	46bd      	mov	sp, r7
 80141b0:	bd80      	pop	{r7, pc}
 80141b2:	bf00      	nop
 80141b4:	0801bee4 	.word	0x0801bee4
 80141b8:	0801bf50 	.word	0x0801bf50
 80141bc:	0801bfd8 	.word	0x0801bfd8

080141c0 <net_state_disconnecting>:


static int32_t net_state_disconnecting(net_if_handle_t *pnetif, net_state_event_t event)
{
 80141c0:	b580      	push	{r7, lr}
 80141c2:	b084      	sub	sp, #16
 80141c4:	af00      	add	r7, sp, #0
 80141c6:	6078      	str	r0, [r7, #4]
 80141c8:	460b      	mov	r3, r1
 80141ca:	70fb      	strb	r3, [r7, #3]
  int32_t ret = NET_OK;
 80141cc:	2300      	movs	r3, #0
 80141ce:	60fb      	str	r3, [r7, #12]

  switch (event)
 80141d0:	78fb      	ldrb	r3, [r7, #3]
 80141d2:	2b07      	cmp	r3, #7
 80141d4:	d104      	bne.n	80141e0 <net_state_disconnecting+0x20>
  {
    case NET_EVENT_INTERFACE_READY:
      set_state(pnetif, NET_STATE_READY);
 80141d6:	2103      	movs	r1, #3
 80141d8:	6878      	ldr	r0, [r7, #4]
 80141da:	f7ff fe89 	bl	8013ef0 <set_state>
      break;
 80141de:	e000      	b.n	80141e2 <net_state_disconnecting+0x22>

    default:
      break;
 80141e0:	bf00      	nop
  }
  return ret;
 80141e2:	68fb      	ldr	r3, [r7, #12]
}
 80141e4:	4618      	mov	r0, r3
 80141e6:	3710      	adds	r7, #16
 80141e8:	46bd      	mov	sp, r7
 80141ea:	bd80      	pop	{r7, pc}

080141ec <net_state_stopping>:


static int32_t net_state_stopping(net_if_handle_t *pnetif, net_state_event_t event)
{
 80141ec:	b580      	push	{r7, lr}
 80141ee:	b084      	sub	sp, #16
 80141f0:	af00      	add	r7, sp, #0
 80141f2:	6078      	str	r0, [r7, #4]
 80141f4:	460b      	mov	r3, r1
 80141f6:	70fb      	strb	r3, [r7, #3]
  int32_t ret = NET_OK;
 80141f8:	2300      	movs	r3, #0
 80141fa:	60fb      	str	r3, [r7, #12]

  switch (event)
 80141fc:	78fb      	ldrb	r3, [r7, #3]
 80141fe:	2b06      	cmp	r3, #6
 8014200:	d104      	bne.n	801420c <net_state_stopping+0x20>
  {
    case NET_EVENT_INTERFACE_INITIALIZED:
      set_state(pnetif, NET_STATE_INITIALIZED);
 8014202:	2101      	movs	r1, #1
 8014204:	6878      	ldr	r0, [r7, #4]
 8014206:	f7ff fe73 	bl	8013ef0 <set_state>
      break;
 801420a:	e000      	b.n	801420e <net_state_stopping+0x22>

    default:
      break;
 801420c:	bf00      	nop
  }
  return ret;
 801420e:	68fb      	ldr	r3, [r7, #12]
}
 8014210:	4618      	mov	r0, r3
 8014212:	3710      	adds	r7, #16
 8014214:	46bd      	mov	sp, r7
 8014216:	bd80      	pop	{r7, pc}

08014218 <net_state_connection_lost>:


static int32_t net_state_connection_lost(net_if_handle_t *pnetif, net_state_event_t event)
{
 8014218:	b580      	push	{r7, lr}
 801421a:	b084      	sub	sp, #16
 801421c:	af00      	add	r7, sp, #0
 801421e:	6078      	str	r0, [r7, #4]
 8014220:	460b      	mov	r3, r1
 8014222:	70fb      	strb	r3, [r7, #3]
  int32_t ret = NET_OK;
 8014224:	2300      	movs	r3, #0
 8014226:	60fb      	str	r3, [r7, #12]

  switch (event)
 8014228:	78fb      	ldrb	r3, [r7, #3]
 801422a:	2b08      	cmp	r3, #8
 801422c:	d104      	bne.n	8014238 <net_state_connection_lost+0x20>
  {
    case NET_EVENT_LINK_UP:
      set_state(pnetif, NET_STATE_CONNECTING);
 801422e:	2104      	movs	r1, #4
 8014230:	6878      	ldr	r0, [r7, #4]
 8014232:	f7ff fe5d 	bl	8013ef0 <set_state>
      break;
 8014236:	e000      	b.n	801423a <net_state_connection_lost+0x22>

    default:
      break;
 8014238:	bf00      	nop
  }
  return ret;
 801423a:	68fb      	ldr	r3, [r7, #12]
}
 801423c:	4618      	mov	r0, r3
 801423e:	3710      	adds	r7, #16
 8014240:	46bd      	mov	sp, r7
 8014242:	bd80      	pop	{r7, pc}

08014244 <net_state_manage_event>:


int32_t net_state_manage_event(net_if_handle_t *pnetif, net_state_event_t state_to)
{
 8014244:	b580      	push	{r7, lr}
 8014246:	b084      	sub	sp, #16
 8014248:	af00      	add	r7, sp, #0
 801424a:	6078      	str	r0, [r7, #4]
 801424c:	460b      	mov	r3, r1
 801424e:	70fb      	strb	r3, [r7, #3]
  int32_t ret;
  net_if_handle_t *const p_netif = netif_check(pnetif);
 8014250:	6878      	ldr	r0, [r7, #4]
 8014252:	f7fe fe99 	bl	8012f88 <netif_check>
 8014256:	60b8      	str	r0, [r7, #8]

  if (p_netif == NULL)
 8014258:	68bb      	ldr	r3, [r7, #8]
 801425a:	2b00      	cmp	r3, #0
 801425c:	d10f      	bne.n	801427e <net_state_manage_event+0x3a>
  {
    NET_DBG_ERROR("Invalid interface.\n");
 801425e:	f240 1217 	movw	r2, #279	; 0x117
 8014262:	4934      	ldr	r1, [pc, #208]	; (8014334 <net_state_manage_event+0xf0>)
 8014264:	4834      	ldr	r0, [pc, #208]	; (8014338 <net_state_manage_event+0xf4>)
 8014266:	f002 ffe5 	bl	8017234 <iprintf>
 801426a:	4834      	ldr	r0, [pc, #208]	; (801433c <net_state_manage_event+0xf8>)
 801426c:	f003 f850 	bl	8017310 <puts>
 8014270:	200a      	movs	r0, #10
 8014272:	f002 fff1 	bl	8017258 <putchar>
    ret = NET_ERROR_PARAMETER;
 8014276:	f06f 0303 	mvn.w	r3, #3
 801427a:	60fb      	str	r3, [r7, #12]
 801427c:	e054      	b.n	8014328 <net_state_manage_event+0xe4>
  {
#ifdef DEBUGSTATE
    printf("In state %s, received event %s\n", statestr[p_netif->state], eventstr[state_to]);
#endif /* DEBUGSTATE */

    switch (p_netif->state)
 801427e:	68bb      	ldr	r3, [r7, #8]
 8014280:	f893 30eb 	ldrb.w	r3, [r3, #235]	; 0xeb
 8014284:	3b01      	subs	r3, #1
 8014286:	2b07      	cmp	r3, #7
 8014288:	d84a      	bhi.n	8014320 <net_state_manage_event+0xdc>
 801428a:	a201      	add	r2, pc, #4	; (adr r2, 8014290 <net_state_manage_event+0x4c>)
 801428c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014290:	080142b1 	.word	0x080142b1
 8014294:	080142bf 	.word	0x080142bf
 8014298:	080142cd 	.word	0x080142cd
 801429c:	080142db 	.word	0x080142db
 80142a0:	080142e9 	.word	0x080142e9
 80142a4:	08014313 	.word	0x08014313
 80142a8:	080142f7 	.word	0x080142f7
 80142ac:	08014305 	.word	0x08014305
    {
      case NET_STATE_INITIALIZED:
        ret = net_state_initialized(p_netif, state_to);
 80142b0:	78fb      	ldrb	r3, [r7, #3]
 80142b2:	4619      	mov	r1, r3
 80142b4:	68b8      	ldr	r0, [r7, #8]
 80142b6:	f7ff fe2f 	bl	8013f18 <net_state_initialized>
 80142ba:	60f8      	str	r0, [r7, #12]
        break;
 80142bc:	e034      	b.n	8014328 <net_state_manage_event+0xe4>

      case NET_STATE_STARTING:
        ret = net_state_starting(p_netif, state_to);
 80142be:	78fb      	ldrb	r3, [r7, #3]
 80142c0:	4619      	mov	r1, r3
 80142c2:	68b8      	ldr	r0, [r7, #8]
 80142c4:	f7ff fe80 	bl	8013fc8 <net_state_starting>
 80142c8:	60f8      	str	r0, [r7, #12]
        break;
 80142ca:	e02d      	b.n	8014328 <net_state_manage_event+0xe4>

      case NET_STATE_READY:
        ret = net_state_ready(p_netif, state_to);
 80142cc:	78fb      	ldrb	r3, [r7, #3]
 80142ce:	4619      	mov	r1, r3
 80142d0:	68b8      	ldr	r0, [r7, #8]
 80142d2:	f7ff feb7 	bl	8014044 <net_state_ready>
 80142d6:	60f8      	str	r0, [r7, #12]
        break;
 80142d8:	e026      	b.n	8014328 <net_state_manage_event+0xe4>

      case NET_STATE_CONNECTING:
        ret = net_state_connecting(p_netif, state_to);
 80142da:	78fb      	ldrb	r3, [r7, #3]
 80142dc:	4619      	mov	r1, r3
 80142de:	68b8      	ldr	r0, [r7, #8]
 80142e0:	f7ff ff08 	bl	80140f4 <net_state_connecting>
 80142e4:	60f8      	str	r0, [r7, #12]
        break;
 80142e6:	e01f      	b.n	8014328 <net_state_manage_event+0xe4>

      case NET_STATE_CONNECTED:
        ret = net_state_connected(p_netif, state_to);
 80142e8:	78fb      	ldrb	r3, [r7, #3]
 80142ea:	4619      	mov	r1, r3
 80142ec:	68b8      	ldr	r0, [r7, #8]
 80142ee:	f7ff ff1f 	bl	8014130 <net_state_connected>
 80142f2:	60f8      	str	r0, [r7, #12]
        break;
 80142f4:	e018      	b.n	8014328 <net_state_manage_event+0xe4>

      case NET_STATE_DISCONNECTING:
        ret = net_state_disconnecting(p_netif, state_to);
 80142f6:	78fb      	ldrb	r3, [r7, #3]
 80142f8:	4619      	mov	r1, r3
 80142fa:	68b8      	ldr	r0, [r7, #8]
 80142fc:	f7ff ff60 	bl	80141c0 <net_state_disconnecting>
 8014300:	60f8      	str	r0, [r7, #12]
        break;
 8014302:	e011      	b.n	8014328 <net_state_manage_event+0xe4>

      case NET_STATE_CONNECTION_LOST:
        ret = net_state_connection_lost(p_netif, state_to);
 8014304:	78fb      	ldrb	r3, [r7, #3]
 8014306:	4619      	mov	r1, r3
 8014308:	68b8      	ldr	r0, [r7, #8]
 801430a:	f7ff ff85 	bl	8014218 <net_state_connection_lost>
 801430e:	60f8      	str	r0, [r7, #12]
        break;
 8014310:	e00a      	b.n	8014328 <net_state_manage_event+0xe4>

      case NET_STATE_STOPPING:
        ret = net_state_stopping(p_netif, state_to);
 8014312:	78fb      	ldrb	r3, [r7, #3]
 8014314:	4619      	mov	r1, r3
 8014316:	68b8      	ldr	r0, [r7, #8]
 8014318:	f7ff ff68 	bl	80141ec <net_state_stopping>
 801431c:	60f8      	str	r0, [r7, #12]
        break;
 801431e:	e003      	b.n	8014328 <net_state_manage_event+0xe4>

      case NET_STATE_DEINITIALIZED:
      default:
        ret = NET_ERROR_INVALID_STATE;
 8014320:	f06f 031b 	mvn.w	r3, #27
 8014324:	60fb      	str	r3, [r7, #12]
        break;
 8014326:	bf00      	nop
    }
  }
  return ret;
 8014328:	68fb      	ldr	r3, [r7, #12]
}
 801432a:	4618      	mov	r0, r3
 801432c:	3710      	adds	r7, #16
 801432e:	46bd      	mov	sp, r7
 8014330:	bd80      	pop	{r7, pc}
 8014332:	bf00      	nop
 8014334:	0801bee4 	.word	0x0801bee4
 8014338:	0801bf50 	.word	0x0801bf50
 801433c:	0801bff8 	.word	0x0801bff8

08014340 <mx_wifi_driver>:
  * @brief                   WiFi driver initialization
  * @param  pnetif           net interface pointer
  * @return int32_t          0 is success, otherwise failed
  */
int32_t mx_wifi_driver(net_if_handle_t *pnetif)
{
 8014340:	b580      	push	{r7, lr}
 8014342:	b082      	sub	sp, #8
 8014344:	af00      	add	r7, sp, #0
 8014346:	6078      	str	r0, [r7, #4]
  /* Initialize the LwIP library here if not already done by another network interface. */
#if (defined(MX_WIFI_NETWORK_BYPASS_MODE) && (MX_WIFI_NETWORK_BYPASS_MODE == 1))
  net_ip_init();
#endif /* (MX_WIFI_NETWORK_BYPASS_MODE == 1) */

  return mx_wifi_if_init(pnetif);
 8014348:	6878      	ldr	r0, [r7, #4]
 801434a:	f000 f805 	bl	8014358 <mx_wifi_if_init>
 801434e:	4603      	mov	r3, r0
}
 8014350:	4618      	mov	r0, r3
 8014352:	3708      	adds	r7, #8
 8014354:	46bd      	mov	sp, r7
 8014356:	bd80      	pop	{r7, pc}

08014358 <mx_wifi_if_init>:
  * @brief                   Mxchip WiFi driver interface initialization
  * @param  pnetif           net interface pointer
  * @return int32_t          0 is success, otherwise failed
  */
static int32_t mx_wifi_if_init(net_if_handle_t *pnetif)
{
 8014358:	b580      	push	{r7, lr}
 801435a:	b086      	sub	sp, #24
 801435c:	af00      	add	r7, sp, #0
 801435e:	6078      	str	r0, [r7, #4]
  int32_t ret;
  void *ptmp;

  /* Create netif and set Mxchip WiFi functions. */
  ptmp = NET_MALLOC(sizeof(net_if_drv_t));
 8014360:	2084      	movs	r0, #132	; 0x84
 8014362:	f001 f9cf 	bl	8015704 <malloc>
 8014366:	4603      	mov	r3, r0
 8014368:	613b      	str	r3, [r7, #16]

  if (ptmp != NULL)
 801436a:	693b      	ldr	r3, [r7, #16]
 801436c:	2b00      	cmp	r3, #0
 801436e:	f000 8084 	beq.w	801447a <mx_wifi_if_init+0x122>
  {
    net_if_drv_t *const p = (net_if_drv_t *)ptmp;
 8014372:	693b      	ldr	r3, [r7, #16]
 8014374:	60fb      	str	r3, [r7, #12]

    p->if_class = NET_INTERFACE_CLASS_WIFI;
 8014376:	68fb      	ldr	r3, [r7, #12]
 8014378:	2200      	movs	r2, #0
 801437a:	701a      	strb	r2, [r3, #0]

    p->if_init = mx_wifi_if_init;
 801437c:	68fb      	ldr	r3, [r7, #12]
 801437e:	4a49      	ldr	r2, [pc, #292]	; (80144a4 <mx_wifi_if_init+0x14c>)
 8014380:	605a      	str	r2, [r3, #4]
    p->if_deinit = mx_wifi_if_deinit;
 8014382:	68fb      	ldr	r3, [r7, #12]
 8014384:	4a48      	ldr	r2, [pc, #288]	; (80144a8 <mx_wifi_if_init+0x150>)
 8014386:	609a      	str	r2, [r3, #8]

    p->if_start = mx_wifi_if_start;
 8014388:	68fb      	ldr	r3, [r7, #12]
 801438a:	4a48      	ldr	r2, [pc, #288]	; (80144ac <mx_wifi_if_init+0x154>)
 801438c:	60da      	str	r2, [r3, #12]
    p->if_stop = mx_wifi_if_stop;
 801438e:	68fb      	ldr	r3, [r7, #12]
 8014390:	4a47      	ldr	r2, [pc, #284]	; (80144b0 <mx_wifi_if_init+0x158>)
 8014392:	611a      	str	r2, [r3, #16]
    p->if_yield = mx_wifi_if_yield;
 8014394:	68fb      	ldr	r3, [r7, #12]
 8014396:	4a47      	ldr	r2, [pc, #284]	; (80144b4 <mx_wifi_if_init+0x15c>)
 8014398:	615a      	str	r2, [r3, #20]

    p->if_connect = mx_wifi_if_connect;
 801439a:	68fb      	ldr	r3, [r7, #12]
 801439c:	4a46      	ldr	r2, [pc, #280]	; (80144b8 <mx_wifi_if_init+0x160>)
 801439e:	619a      	str	r2, [r3, #24]
    p->if_disconnect = mx_wifi_if_disconnect;
 80143a0:	68fb      	ldr	r3, [r7, #12]
 80143a2:	4a46      	ldr	r2, [pc, #280]	; (80144bc <mx_wifi_if_init+0x164>)
 80143a4:	61da      	str	r2, [r3, #28]

    /* socket functions */
#if (MX_WIFI_NETWORK_BYPASS_MODE == 0)
    p->psocket = mx_wifi_socket;
 80143a6:	68fb      	ldr	r3, [r7, #12]
 80143a8:	4a45      	ldr	r2, [pc, #276]	; (80144c0 <mx_wifi_if_init+0x168>)
 80143aa:	635a      	str	r2, [r3, #52]	; 0x34
    p->pbind = mx_wifi_bind;
 80143ac:	68fb      	ldr	r3, [r7, #12]
 80143ae:	4a45      	ldr	r2, [pc, #276]	; (80144c4 <mx_wifi_if_init+0x16c>)
 80143b0:	639a      	str	r2, [r3, #56]	; 0x38
    p->plisten = mx_wifi_listen;
 80143b2:	68fb      	ldr	r3, [r7, #12]
 80143b4:	4a44      	ldr	r2, [pc, #272]	; (80144c8 <mx_wifi_if_init+0x170>)
 80143b6:	63da      	str	r2, [r3, #60]	; 0x3c
    p->paccept = mx_wifi_accept;
 80143b8:	68fb      	ldr	r3, [r7, #12]
 80143ba:	4a44      	ldr	r2, [pc, #272]	; (80144cc <mx_wifi_if_init+0x174>)
 80143bc:	641a      	str	r2, [r3, #64]	; 0x40
    p->pconnect = mx_wifi_connect;
 80143be:	68fb      	ldr	r3, [r7, #12]
 80143c0:	4a43      	ldr	r2, [pc, #268]	; (80144d0 <mx_wifi_if_init+0x178>)
 80143c2:	645a      	str	r2, [r3, #68]	; 0x44
    p->psend = mx_wifi_send;
 80143c4:	68fb      	ldr	r3, [r7, #12]
 80143c6:	4a43      	ldr	r2, [pc, #268]	; (80144d4 <mx_wifi_if_init+0x17c>)
 80143c8:	649a      	str	r2, [r3, #72]	; 0x48
    p->precv = mx_wifi_recv;
 80143ca:	68fb      	ldr	r3, [r7, #12]
 80143cc:	4a42      	ldr	r2, [pc, #264]	; (80144d8 <mx_wifi_if_init+0x180>)
 80143ce:	64da      	str	r2, [r3, #76]	; 0x4c
    p->psendto = mx_wifi_sendto;
 80143d0:	68fb      	ldr	r3, [r7, #12]
 80143d2:	4a42      	ldr	r2, [pc, #264]	; (80144dc <mx_wifi_if_init+0x184>)
 80143d4:	651a      	str	r2, [r3, #80]	; 0x50
    p->precvfrom = mx_wifi_recvfrom;
 80143d6:	68fb      	ldr	r3, [r7, #12]
 80143d8:	4a41      	ldr	r2, [pc, #260]	; (80144e0 <mx_wifi_if_init+0x188>)
 80143da:	655a      	str	r2, [r3, #84]	; 0x54
    p->psetsockopt = mx_wifi_setsockopt;
 80143dc:	68fb      	ldr	r3, [r7, #12]
 80143de:	4a41      	ldr	r2, [pc, #260]	; (80144e4 <mx_wifi_if_init+0x18c>)
 80143e0:	659a      	str	r2, [r3, #88]	; 0x58
    p->pgetsockopt = mx_wifi_getsockopt;
 80143e2:	68fb      	ldr	r3, [r7, #12]
 80143e4:	4a40      	ldr	r2, [pc, #256]	; (80144e8 <mx_wifi_if_init+0x190>)
 80143e6:	65da      	str	r2, [r3, #92]	; 0x5c
    p->pgetsockname = mx_wifi_getsockname;
 80143e8:	68fb      	ldr	r3, [r7, #12]
 80143ea:	4a40      	ldr	r2, [pc, #256]	; (80144ec <mx_wifi_if_init+0x194>)
 80143ec:	661a      	str	r2, [r3, #96]	; 0x60
    p->pgetpeername = mx_wifi_getpeername;
 80143ee:	68fb      	ldr	r3, [r7, #12]
 80143f0:	4a3f      	ldr	r2, [pc, #252]	; (80144f0 <mx_wifi_if_init+0x198>)
 80143f2:	665a      	str	r2, [r3, #100]	; 0x64
    p->pclose = mx_wifi_close;
 80143f4:	68fb      	ldr	r3, [r7, #12]
 80143f6:	4a3f      	ldr	r2, [pc, #252]	; (80144f4 <mx_wifi_if_init+0x19c>)
 80143f8:	669a      	str	r2, [r3, #104]	; 0x68
    p->pshutdown = mx_wifi_shutdown;
 80143fa:	68fb      	ldr	r3, [r7, #12]
 80143fc:	4a3e      	ldr	r2, [pc, #248]	; (80144f8 <mx_wifi_if_init+0x1a0>)
 80143fe:	66da      	str	r2, [r3, #108]	; 0x6c
    p->pgethostbyname = mx_wifi_gethostbyname;
 8014400:	68fb      	ldr	r3, [r7, #12]
 8014402:	4a3e      	ldr	r2, [pc, #248]	; (80144fc <mx_wifi_if_init+0x1a4>)
 8014404:	671a      	str	r2, [r3, #112]	; 0x70
    p->pping = mx_wifi_ping;
 8014406:	68fb      	ldr	r3, [r7, #12]
 8014408:	4a3d      	ldr	r2, [pc, #244]	; (8014500 <mx_wifi_if_init+0x1a8>)
 801440a:	675a      	str	r2, [r3, #116]	; 0x74
    p->pping = icmp_ping;
#endif /* MX_WIFI_NETWORK_BYPASS_MODE */


    /* WiFi function. */
    ptmp = NET_MALLOC(sizeof(net_if_wifi_class_extension_t));
 801440c:	202c      	movs	r0, #44	; 0x2c
 801440e:	f001 f979 	bl	8015704 <malloc>
 8014412:	4603      	mov	r3, r0
 8014414:	613b      	str	r3, [r7, #16]
    if (NULL == ptmp)
 8014416:	693b      	ldr	r3, [r7, #16]
 8014418:	2b00      	cmp	r3, #0
 801441a:	d112      	bne.n	8014442 <mx_wifi_if_init+0xea>
    {
      NET_DBG_ERROR("Can't allocate memory for mx_wifi_driver class\n");
 801441c:	f240 2205 	movw	r2, #517	; 0x205
 8014420:	4938      	ldr	r1, [pc, #224]	; (8014504 <mx_wifi_if_init+0x1ac>)
 8014422:	4839      	ldr	r0, [pc, #228]	; (8014508 <mx_wifi_if_init+0x1b0>)
 8014424:	f002 ff06 	bl	8017234 <iprintf>
 8014428:	4838      	ldr	r0, [pc, #224]	; (801450c <mx_wifi_if_init+0x1b4>)
 801442a:	f002 ff71 	bl	8017310 <puts>
 801442e:	200a      	movs	r0, #10
 8014430:	f002 ff12 	bl	8017258 <putchar>
      NET_FREE(p);
 8014434:	68f8      	ldr	r0, [r7, #12]
 8014436:	f001 f96d 	bl	8015714 <free>
      ret = NET_ERROR_NO_MEMORY;
 801443a:	f06f 0307 	mvn.w	r3, #7
 801443e:	617b      	str	r3, [r7, #20]
 8014440:	e02a      	b.n	8014498 <mx_wifi_if_init+0x140>
    }
    else
    {
      p->extension.wifi = (net_if_wifi_class_extension_t *)ptmp;
 8014442:	68fb      	ldr	r3, [r7, #12]
 8014444:	693a      	ldr	r2, [r7, #16]
 8014446:	679a      	str	r2, [r3, #120]	; 0x78
      /* DHCP mode. */
      pnetif->dhcp_mode = true;
 8014448:	687b      	ldr	r3, [r7, #4]
 801444a:	2201      	movs	r2, #1
 801444c:	f883 2020 	strb.w	r2, [r3, #32]
      pnetif->pdrv = p;
 8014450:	687b      	ldr	r3, [r7, #4]
 8014452:	68fa      	ldr	r2, [r7, #12]
 8014454:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
      /* Scan function. */
      p->extension.wifi->scan = mx_wifi_scan;
 8014458:	68fb      	ldr	r3, [r7, #12]
 801445a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801445c:	4a2c      	ldr	r2, [pc, #176]	; (8014510 <mx_wifi_if_init+0x1b8>)
 801445e:	601a      	str	r2, [r3, #0]
      p->extension.wifi->get_scan_results = mx_wifi_get_scan_result;
 8014460:	68fb      	ldr	r3, [r7, #12]
 8014462:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014464:	4a2b      	ldr	r2, [pc, #172]	; (8014514 <mx_wifi_if_init+0x1bc>)
 8014466:	605a      	str	r2, [r3, #4]
      p->extension.wifi->mode = NET_WIFI_MODE_STA;
 8014468:	68fb      	ldr	r3, [r7, #12]
 801446a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801446c:	2200      	movs	r2, #0
 801446e:	771a      	strb	r2, [r3, #28]

      ret = hw_start(pnetif);
 8014470:	6878      	ldr	r0, [r7, #4]
 8014472:	f000 f897 	bl	80145a4 <hw_start>
 8014476:	6178      	str	r0, [r7, #20]
 8014478:	e00e      	b.n	8014498 <mx_wifi_if_init+0x140>
    }
  }
  else
  {
    NET_DBG_ERROR("Can't allocate memory for mx_wifi_driver class\n");
 801447a:	f240 2219 	movw	r2, #537	; 0x219
 801447e:	4921      	ldr	r1, [pc, #132]	; (8014504 <mx_wifi_if_init+0x1ac>)
 8014480:	4821      	ldr	r0, [pc, #132]	; (8014508 <mx_wifi_if_init+0x1b0>)
 8014482:	f002 fed7 	bl	8017234 <iprintf>
 8014486:	4821      	ldr	r0, [pc, #132]	; (801450c <mx_wifi_if_init+0x1b4>)
 8014488:	f002 ff42 	bl	8017310 <puts>
 801448c:	200a      	movs	r0, #10
 801448e:	f002 fee3 	bl	8017258 <putchar>
    ret = NET_ERROR_NO_MEMORY;
 8014492:	f06f 0307 	mvn.w	r3, #7
 8014496:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8014498:	697b      	ldr	r3, [r7, #20]
}
 801449a:	4618      	mov	r0, r3
 801449c:	3718      	adds	r7, #24
 801449e:	46bd      	mov	sp, r7
 80144a0:	bd80      	pop	{r7, pc}
 80144a2:	bf00      	nop
 80144a4:	08014359 	.word	0x08014359
 80144a8:	08014519 	.word	0x08014519
 80144ac:	08014573 	.word	0x08014573
 80144b0:	0801467d 	.word	0x0801467d
 80144b4:	080146f5 	.word	0x080146f5
 80144b8:	08014b0f 	.word	0x08014b0f
 80144bc:	08014af1 	.word	0x08014af1
 80144c0:	08014d95 	.word	0x08014d95
 80144c4:	08014e25 	.word	0x08014e25
 80144c8:	08014e63 	.word	0x08014e63
 80144cc:	08014e89 	.word	0x08014e89
 80144d0:	08014eaf 	.word	0x08014eaf
 80144d4:	08014f21 	.word	0x08014f21
 80144d8:	08014f4d 	.word	0x08014f4d
 80144dc:	08014f8d 	.word	0x08014f8d
 80144e0:	08014fd9 	.word	0x08014fd9
 80144e4:	08014dbb 	.word	0x08014dbb
 80144e8:	08014df5 	.word	0x08014df5
 80144ec:	080150d1 	.word	0x080150d1
 80144f0:	080150f7 	.word	0x080150f7
 80144f4:	08014efb 	.word	0x08014efb
 80144f8:	08014ed5 	.word	0x08014ed5
 80144fc:	0801502f 	.word	0x0801502f
 8014500:	08015057 	.word	0x08015057
 8014504:	0801c00c 	.word	0x0801c00c
 8014508:	0801c088 	.word	0x0801c088
 801450c:	0801c098 	.word	0x0801c098
 8014510:	08014c41 	.word	0x08014c41
 8014514:	08014c7d 	.word	0x08014c7d

08014518 <mx_wifi_if_deinit>:
  * @brief                   Mxchip WiFi driver interface de-initialization
  * @param  pnetif           net interface pointer
  * @return int32_t          0 is success, otherwise failed
  */
static int32_t mx_wifi_if_deinit(net_if_handle_t *pnetif)
{
 8014518:	b580      	push	{r7, lr}
 801451a:	b084      	sub	sp, #16
 801451c:	af00      	add	r7, sp, #0
 801451e:	6078      	str	r0, [r7, #4]
  int32_t ret = NET_OK;
 8014520:	2300      	movs	r3, #0
 8014522:	60fb      	str	r3, [r7, #12]

#if (defined(MX_WIFI_NETWORK_BYPASS_MODE) && (MX_WIFI_NETWORK_BYPASS_MODE == 1))
  (void)MX_WIFI_Network_bypass_mode_set(wifi_obj_get(), 0, NULL, NULL);
#endif /* (MX_WIFI_NETWORK_BYPASS_MODE == 1) */

  if (MX_WIFI_STATUS_OK != MX_WIFI_DeInit(wifi_obj_get()))
 8014524:	f7f6 f800 	bl	800a528 <wifi_obj_get>
 8014528:	4603      	mov	r3, r0
 801452a:	4618      	mov	r0, r3
 801452c:	f7f3 ff22 	bl	8008374 <MX_WIFI_DeInit>
 8014530:	4603      	mov	r3, r0
 8014532:	2b00      	cmp	r3, #0
 8014534:	d002      	beq.n	801453c <mx_wifi_if_deinit+0x24>
  {
    ret = NET_ERROR_GENERIC;
 8014536:	f06f 031c 	mvn.w	r3, #28
 801453a:	60fb      	str	r3, [r7, #12]
  }

  NET_FREE(pnetif->pdrv->extension.wifi);
 801453c:	687b      	ldr	r3, [r7, #4]
 801453e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8014542:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014544:	4618      	mov	r0, r3
 8014546:	f001 f8e5 	bl	8015714 <free>
  pnetif->pdrv->extension.wifi = NULL;
 801454a:	687b      	ldr	r3, [r7, #4]
 801454c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8014550:	2200      	movs	r2, #0
 8014552:	679a      	str	r2, [r3, #120]	; 0x78
  NET_FREE(pnetif->pdrv);
 8014554:	687b      	ldr	r3, [r7, #4]
 8014556:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 801455a:	4618      	mov	r0, r3
 801455c:	f001 f8da 	bl	8015714 <free>
  pnetif->pdrv = NULL;
 8014560:	687b      	ldr	r3, [r7, #4]
 8014562:	2200      	movs	r2, #0
 8014564:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

  return ret;
 8014568:	68fb      	ldr	r3, [r7, #12]
}
 801456a:	4618      	mov	r0, r3
 801456c:	3710      	adds	r7, #16
 801456e:	46bd      	mov	sp, r7
 8014570:	bd80      	pop	{r7, pc}

08014572 <mx_wifi_if_start>:
  * @brief                   Mxchip WiFi driver start
  * @param  pnetif           net interface pointer
  * @return int32_t          0 is success, otherwise failed
  */
static int32_t mx_wifi_if_start(net_if_handle_t *pnetif)
{
 8014572:	b580      	push	{r7, lr}
 8014574:	b084      	sub	sp, #16
 8014576:	af00      	add	r7, sp, #0
 8014578:	6078      	str	r0, [r7, #4]
  int32_t ret;
  if (pnetif->pdrv->extension.wifi->mode == NET_WIFI_MODE_STA)
 801457a:	687b      	ldr	r3, [r7, #4]
 801457c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8014580:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014582:	7f1b      	ldrb	r3, [r3, #28]
 8014584:	2b00      	cmp	r3, #0
 8014586:	d104      	bne.n	8014592 <mx_wifi_if_start+0x20>
  {
    ret = mx_wifi_if_start_station(pnetif);
 8014588:	6878      	ldr	r0, [r7, #4]
 801458a:	f000 f987 	bl	801489c <mx_wifi_if_start_station>
 801458e:	60f8      	str	r0, [r7, #12]
 8014590:	e003      	b.n	801459a <mx_wifi_if_start+0x28>
    }
#endif /* (MX_WIFI_NETWORK_BYPASS_MODE == 1) */
  }
  else
  {
    ret = mx_wifi_if_start_softap(pnetif);
 8014592:	6878      	ldr	r0, [r7, #4]
 8014594:	f000 f9ea 	bl	801496c <mx_wifi_if_start_softap>
 8014598:	60f8      	str	r0, [r7, #12]
      SoftAP_pNetif = pnetif;
    }
#endif /* (MX_WIFI_NETWORK_BYPASS_MODE == 1) */
  }

  return ret;
 801459a:	68fb      	ldr	r3, [r7, #12]
}
 801459c:	4618      	mov	r0, r3
 801459e:	3710      	adds	r7, #16
 80145a0:	46bd      	mov	sp, r7
 80145a2:	bd80      	pop	{r7, pc}

080145a4 <hw_start>:
  * @brief                   Mxchip WiFi hardware initialization
  * @param  pnetif           net interface pointer
  * @return int32_t          0 is success, otherwise failed
  */
static int32_t hw_start(net_if_handle_t *pnetif)
{
 80145a4:	b590      	push	{r4, r7, lr}
 80145a6:	b085      	sub	sp, #20
 80145a8:	af00      	add	r7, sp, #0
 80145aa:	6078      	str	r0, [r7, #4]
  int32_t ret = NET_ERROR_DEVICE_ERROR;
 80145ac:	f06f 030c 	mvn.w	r3, #12
 80145b0:	60fb      	str	r3, [r7, #12]

  if (mxwifi_probe(&pnetif->pdrv->context) == 0)
 80145b2:	687b      	ldr	r3, [r7, #4]
 80145b4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80145b8:	3330      	adds	r3, #48	; 0x30
 80145ba:	4618      	mov	r0, r3
 80145bc:	f7f5 ff86 	bl	800a4cc <mxwifi_probe>
 80145c0:	4603      	mov	r3, r0
 80145c2:	2b00      	cmp	r3, #0
 80145c4:	d154      	bne.n	8014670 <hw_start+0xcc>
  {
    DEBUG_LOG("%s\n", "MX_WIFI IO [OK]");

    if (wifi_obj_get()->Runtime.interfaces == 0U)
 80145c6:	f7f5 ffaf 	bl	800a528 <wifi_obj_get>
 80145ca:	4603      	mov	r3, r0
 80145cc:	f893 360e 	ldrb.w	r3, [r3, #1550]	; 0x60e
 80145d0:	2b00      	cmp	r3, #0
 80145d2:	d108      	bne.n	80145e6 <hw_start+0x42>
    {
      /* WiFi module hardware reboot. */
      DEBUG_LOG("%s\n", "MX_WIFI REBOOT(HW) ...");
      ret = MX_WIFI_HardResetModule(wifi_obj_get());
 80145d4:	f7f5 ffa8 	bl	800a528 <wifi_obj_get>
 80145d8:	4603      	mov	r3, r0
 80145da:	4618      	mov	r0, r3
 80145dc:	f7f3 fdbb 	bl	8008156 <MX_WIFI_HardResetModule>
 80145e0:	4603      	mov	r3, r0
 80145e2:	60fb      	str	r3, [r7, #12]
 80145e4:	e001      	b.n	80145ea <hw_start+0x46>
    }
    else
    {
      ret = MX_WIFI_STATUS_OK;
 80145e6:	2300      	movs	r3, #0
 80145e8:	60fb      	str	r3, [r7, #12]
    }

    if (MX_WIFI_STATUS_OK != ret)
 80145ea:	68fb      	ldr	r3, [r7, #12]
 80145ec:	2b00      	cmp	r3, #0
 80145ee:	d003      	beq.n	80145f8 <hw_start+0x54>
    {
      ret = NET_ERROR_DEVICE_ERROR;
 80145f0:	f06f 030c 	mvn.w	r3, #12
 80145f4:	60fb      	str	r3, [r7, #12]
 80145f6:	e03b      	b.n	8014670 <hw_start+0xcc>
    else
    {
      /* Wait for Mxchip WiFi reboot. */

      /* Initialize the WiFi module. */
      if (MX_WIFI_STATUS_OK != MX_WIFI_Init(wifi_obj_get()))
 80145f8:	f7f5 ff96 	bl	800a528 <wifi_obj_get>
 80145fc:	4603      	mov	r3, r0
 80145fe:	4618      	mov	r0, r3
 8014600:	f7f3 fdc8 	bl	8008194 <MX_WIFI_Init>
 8014604:	4603      	mov	r3, r0
 8014606:	2b00      	cmp	r3, #0
 8014608:	d003      	beq.n	8014612 <hw_start+0x6e>
      {
        ret = NET_ERROR_INTERFACE_FAILURE;
 801460a:	f06f 0310 	mvn.w	r3, #16
 801460e:	60fb      	str	r3, [r7, #12]
 8014610:	e02e      	b.n	8014670 <hw_start+0xcc>
      }
      else
      {
        DEBUG_LOG("%s\n", "MX_WIFI_Init [OK]");
        /* Retrieve the WiFi module information. */
        (void)strncpy(pnetif->DeviceName, (const char *)wifi_obj_get()->SysInfo.Product_Name, sizeof(pnetif->DeviceName));
 8014612:	687b      	ldr	r3, [r7, #4]
 8014614:	f103 0425 	add.w	r4, r3, #37	; 0x25
 8014618:	f7f5 ff86 	bl	800a528 <wifi_obj_get>
 801461c:	4603      	mov	r3, r0
 801461e:	3314      	adds	r3, #20
 8014620:	2240      	movs	r2, #64	; 0x40
 8014622:	4619      	mov	r1, r3
 8014624:	4620      	mov	r0, r4
 8014626:	f002 fe9c 	bl	8017362 <strncpy>
        (void)strncpy(pnetif->DeviceID, (const char *)wifi_obj_get()->SysInfo.Product_ID, sizeof(pnetif->DeviceID));
 801462a:	687b      	ldr	r3, [r7, #4]
 801462c:	f103 0465 	add.w	r4, r3, #101	; 0x65
 8014630:	f7f5 ff7a 	bl	800a528 <wifi_obj_get>
 8014634:	4603      	mov	r3, r0
 8014636:	3334      	adds	r3, #52	; 0x34
 8014638:	2240      	movs	r2, #64	; 0x40
 801463a:	4619      	mov	r1, r3
 801463c:	4620      	mov	r0, r4
 801463e:	f002 fe90 	bl	8017362 <strncpy>
        (void)strncpy(pnetif->DeviceVer, (const char *)wifi_obj_get()->SysInfo.FW_Rev, sizeof(pnetif->DeviceVer));
 8014642:	687b      	ldr	r3, [r7, #4]
 8014644:	f103 04a5 	add.w	r4, r3, #165	; 0xa5
 8014648:	f7f5 ff6e 	bl	800a528 <wifi_obj_get>
 801464c:	4603      	mov	r3, r0
 801464e:	3354      	adds	r3, #84	; 0x54
 8014650:	2240      	movs	r2, #64	; 0x40
 8014652:	4619      	mov	r1, r3
 8014654:	4620      	mov	r0, r4
 8014656:	f002 fe84 	bl	8017362 <strncpy>

        (void)MX_WIFI_GetMACAddress(wifi_obj_get(), pnetif->macaddr.mac);
 801465a:	f7f5 ff65 	bl	800a528 <wifi_obj_get>
 801465e:	4602      	mov	r2, r0
 8014660:	687b      	ldr	r3, [r7, #4]
 8014662:	33e5      	adds	r3, #229	; 0xe5
 8014664:	4619      	mov	r1, r3
 8014666:	4610      	mov	r0, r2
 8014668:	f7f3 feca 	bl	8008400 <MX_WIFI_GetMACAddress>
          ret = NET_ERROR_MODULE_INITIALIZATION;
        }
        else
#endif /* (MX_WIFI_NETWORK_BYPASS_MODE == 1) */
        {
          ret = NET_OK;
 801466c:	2300      	movs	r3, #0
 801466e:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8014670:	68fb      	ldr	r3, [r7, #12]
}
 8014672:	4618      	mov	r0, r3
 8014674:	3714      	adds	r7, #20
 8014676:	46bd      	mov	sp, r7
 8014678:	bd90      	pop	{r4, r7, pc}
	...

0801467c <mx_wifi_if_stop>:
  * @brief                   Mxchip WiFi driver interface stop
  * @param  pnetif           net interface pointer
  * @return int32_t          0 if success, otherwise failed
  */
static int32_t mx_wifi_if_stop(net_if_handle_t *pnetif)
{
 801467c:	b580      	push	{r7, lr}
 801467e:	b082      	sub	sp, #8
 8014680:	af00      	add	r7, sp, #0
 8014682:	6078      	str	r0, [r7, #4]
  if (pnetif->pdrv->extension.wifi->mode == NET_WIFI_MODE_STA)
 8014684:	687b      	ldr	r3, [r7, #4]
 8014686:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 801468a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801468c:	7f1b      	ldrb	r3, [r3, #28]
 801468e:	2b00      	cmp	r3, #0
 8014690:	d11e      	bne.n	80146d0 <mx_wifi_if_stop+0x54>
  {
    if (((int32_t)NET_WIFI_SM_WPS_OPEN == pnetif->pdrv->extension.wifi->credentials->security_mode) || \
 8014692:	687b      	ldr	r3, [r7, #4]
 8014694:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8014698:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801469a:	699b      	ldr	r3, [r3, #24]
 801469c:	689b      	ldr	r3, [r3, #8]
 801469e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80146a2:	d008      	beq.n	80146b6 <mx_wifi_if_stop+0x3a>
        ((int32_t)NET_WIFI_SM_WPS_SECURE == pnetif->pdrv->extension.wifi->credentials->security_mode))
 80146a4:	687b      	ldr	r3, [r7, #4]
 80146a6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80146aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80146ac:	699b      	ldr	r3, [r3, #24]
 80146ae:	689b      	ldr	r3, [r3, #8]
    if (((int32_t)NET_WIFI_SM_WPS_OPEN == pnetif->pdrv->extension.wifi->credentials->security_mode) || \
 80146b0:	4a0f      	ldr	r2, [pc, #60]	; (80146f0 <mx_wifi_if_stop+0x74>)
 80146b2:	4293      	cmp	r3, r2
 80146b4:	d105      	bne.n	80146c2 <mx_wifi_if_stop+0x46>
    {
      (void)MX_WIFI_WPS_Stop(wifi_obj_get());
 80146b6:	f7f5 ff37 	bl	800a528 <wifi_obj_get>
 80146ba:	4603      	mov	r3, r0
 80146bc:	4618      	mov	r0, r3
 80146be:	f7f4 f939 	bl	8008934 <MX_WIFI_WPS_Stop>
    }
    (void)MX_WIFI_Disconnect(wifi_obj_get());
 80146c2:	f7f5 ff31 	bl	800a528 <wifi_obj_get>
 80146c6:	4603      	mov	r3, r0
 80146c8:	4618      	mov	r0, r3
 80146ca:	f7f4 f8dd 	bl	8008888 <MX_WIFI_Disconnect>
 80146ce:	e005      	b.n	80146dc <mx_wifi_if_stop+0x60>
    Station_pNetif = NULL;
#endif /* (MX_WIFI_NETWORK_BYPASS_MODE == 1) */
  }
  else
  {
    (void)MX_WIFI_StopAP(wifi_obj_get());
 80146d0:	f7f5 ff2a 	bl	800a528 <wifi_obj_get>
 80146d4:	4603      	mov	r3, r0
 80146d6:	4618      	mov	r0, r3
 80146d8:	f7f4 fa48 	bl	8008b6c <MX_WIFI_StopAP>
#if (defined(MX_WIFI_NETWORK_BYPASS_MODE) && (MX_WIFI_NETWORK_BYPASS_MODE == 1))
    SoftAP_pNetif = NULL;
#endif /* (MX_WIFI_NETWORK_BYPASS_MODE == 1) */
  }

  (void) net_state_manage_event(pnetif, NET_EVENT_INTERFACE_INITIALIZED);
 80146dc:	2106      	movs	r1, #6
 80146de:	6878      	ldr	r0, [r7, #4]
 80146e0:	f7ff fdb0 	bl	8014244 <net_state_manage_event>

  return NET_OK;
 80146e4:	2300      	movs	r3, #0
}
 80146e6:	4618      	mov	r0, r3
 80146e8:	3708      	adds	r7, #8
 80146ea:	46bd      	mov	sp, r7
 80146ec:	bd80      	pop	{r7, pc}
 80146ee:	bf00      	nop
 80146f0:	10000004 	.word	0x10000004

080146f4 <mx_wifi_if_yield>:
  * @param  pnetif           net interface
  * @param  timeout_ms       timeout in milliseconds
  * @return int32_t          0 if success, otherwise failed
  */
static int32_t mx_wifi_if_yield(net_if_handle_t *pnetif, uint32_t timeout_ms)
{
 80146f4:	b580      	push	{r7, lr}
 80146f6:	b084      	sub	sp, #16
 80146f8:	af00      	add	r7, sp, #0
 80146fa:	6078      	str	r0, [r7, #4]
 80146fc:	6039      	str	r1, [r7, #0]
  const int32_t ret = MX_WIFI_IO_YIELD(wifi_obj_get(), timeout_ms);
 80146fe:	f7f5 ff13 	bl	800a528 <wifi_obj_get>
 8014702:	4603      	mov	r3, r0
 8014704:	6839      	ldr	r1, [r7, #0]
 8014706:	4618      	mov	r0, r3
 8014708:	f7f3 fe67 	bl	80083da <MX_WIFI_IO_YIELD>
 801470c:	4603      	mov	r3, r0
 801470e:	60fb      	str	r3, [r7, #12]

  (void)pnetif;

  return ret;
 8014710:	68fb      	ldr	r3, [r7, #12]
}
 8014712:	4618      	mov	r0, r3
 8014714:	3710      	adds	r7, #16
 8014716:	46bd      	mov	sp, r7
 8014718:	bd80      	pop	{r7, pc}

0801471a <mx_wifi_status_changed>:
  * @param  cate             status cate
  * @param  status           status
  * @param  arg              user arguments
  */
static void mx_wifi_status_changed(uint8_t cate, uint8_t status, void *arg)
{
 801471a:	b590      	push	{r4, r7, lr}
 801471c:	b085      	sub	sp, #20
 801471e:	af00      	add	r7, sp, #0
 8014720:	4603      	mov	r3, r0
 8014722:	603a      	str	r2, [r7, #0]
 8014724:	71fb      	strb	r3, [r7, #7]
 8014726:	460b      	mov	r3, r1
 8014728:	71bb      	strb	r3, [r7, #6]
  net_if_handle_t *const pnetif = (net_if_handle_t *)arg;
 801472a:	683b      	ldr	r3, [r7, #0]
 801472c:	60fb      	str	r3, [r7, #12]
  net_state_t net_state = NET_STATE_DEINITIALIZED;
 801472e:	2300      	movs	r3, #0
 8014730:	72fb      	strb	r3, [r7, #11]

  net_if_getState(pnetif, &net_state);
 8014732:	f107 030b 	add.w	r3, r7, #11
 8014736:	4619      	mov	r1, r3
 8014738:	68f8      	ldr	r0, [r7, #12]
 801473a:	f7fe fd0b 	bl	8013154 <net_if_getState>

  if ((uint8_t)MC_STATION == cate)
 801473e:	79fb      	ldrb	r3, [r7, #7]
 8014740:	2b01      	cmp	r3, #1
 8014742:	d17c      	bne.n	801483e <mx_wifi_status_changed+0x124>
  {
    switch (status)
 8014744:	79bb      	ldrb	r3, [r7, #6]
 8014746:	2b03      	cmp	r3, #3
 8014748:	d01d      	beq.n	8014786 <mx_wifi_status_changed+0x6c>
 801474a:	2b03      	cmp	r3, #3
 801474c:	f300 809e 	bgt.w	801488c <mx_wifi_status_changed+0x172>
 8014750:	2b01      	cmp	r3, #1
 8014752:	d002      	beq.n	801475a <mx_wifi_status_changed+0x40>
 8014754:	2b02      	cmp	r3, #2
 8014756:	d011      	beq.n	801477c <mx_wifi_status_changed+0x62>
#endif  /* MX_WIFI_NETWORK_BYPASS_MODE */
      }
      break;

      default:
        break;
 8014758:	e098      	b.n	801488c <mx_wifi_status_changed+0x172>
        if (NET_STATE_STOPPING == net_state)
 801475a:	7afb      	ldrb	r3, [r7, #11]
 801475c:	2b06      	cmp	r3, #6
 801475e:	d104      	bne.n	801476a <mx_wifi_status_changed+0x50>
          (void)net_state_manage_event(pnetif, NET_EVENT_INTERFACE_INITIALIZED);
 8014760:	2106      	movs	r1, #6
 8014762:	68f8      	ldr	r0, [r7, #12]
 8014764:	f7ff fd6e 	bl	8014244 <net_state_manage_event>
      break;
 8014768:	e092      	b.n	8014890 <mx_wifi_status_changed+0x176>
        else if (NET_STATE_CONNECTED == net_state)
 801476a:	7afb      	ldrb	r3, [r7, #11]
 801476c:	2b05      	cmp	r3, #5
 801476e:	f040 808f 	bne.w	8014890 <mx_wifi_status_changed+0x176>
          (void)net_state_manage_event(pnetif, NET_EVENT_LINK_DOWN);
 8014772:	2109      	movs	r1, #9
 8014774:	68f8      	ldr	r0, [r7, #12]
 8014776:	f7ff fd65 	bl	8014244 <net_state_manage_event>
      break;
 801477a:	e089      	b.n	8014890 <mx_wifi_status_changed+0x176>
        (void)net_state_manage_event(pnetif, NET_EVENT_INTERFACE_READY);
 801477c:	2107      	movs	r1, #7
 801477e:	68f8      	ldr	r0, [r7, #12]
 8014780:	f7ff fd60 	bl	8014244 <net_state_manage_event>
      break;
 8014784:	e085      	b.n	8014892 <mx_wifi_status_changed+0x178>
        pnetif->ipaddr.addr = NET_ARTON(wifi_obj_get()->NetSettings.IP_Addr);
 8014786:	f7f5 fecf 	bl	800a528 <wifi_obj_get>
 801478a:	4603      	mov	r3, r0
 801478c:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8014790:	061c      	lsls	r4, r3, #24
 8014792:	f7f5 fec9 	bl	800a528 <wifi_obj_get>
 8014796:	4603      	mov	r3, r0
 8014798:	f893 30df 	ldrb.w	r3, [r3, #223]	; 0xdf
 801479c:	041b      	lsls	r3, r3, #16
 801479e:	431c      	orrs	r4, r3
 80147a0:	f7f5 fec2 	bl	800a528 <wifi_obj_get>
 80147a4:	4603      	mov	r3, r0
 80147a6:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
 80147aa:	021b      	lsls	r3, r3, #8
 80147ac:	431c      	orrs	r4, r3
 80147ae:	f7f5 febb 	bl	800a528 <wifi_obj_get>
 80147b2:	4603      	mov	r3, r0
 80147b4:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 80147b8:	ea44 0203 	orr.w	r2, r4, r3
 80147bc:	68fb      	ldr	r3, [r7, #12]
 80147be:	605a      	str	r2, [r3, #4]
        pnetif->netmask.addr = NET_ARTON(wifi_obj_get()->NetSettings.IP_Mask);
 80147c0:	f7f5 feb2 	bl	800a528 <wifi_obj_get>
 80147c4:	4603      	mov	r3, r0
 80147c6:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
 80147ca:	061c      	lsls	r4, r3, #24
 80147cc:	f7f5 feac 	bl	800a528 <wifi_obj_get>
 80147d0:	4603      	mov	r3, r0
 80147d2:	f893 30e3 	ldrb.w	r3, [r3, #227]	; 0xe3
 80147d6:	041b      	lsls	r3, r3, #16
 80147d8:	431c      	orrs	r4, r3
 80147da:	f7f5 fea5 	bl	800a528 <wifi_obj_get>
 80147de:	4603      	mov	r3, r0
 80147e0:	f893 30e2 	ldrb.w	r3, [r3, #226]	; 0xe2
 80147e4:	021b      	lsls	r3, r3, #8
 80147e6:	431c      	orrs	r4, r3
 80147e8:	f7f5 fe9e 	bl	800a528 <wifi_obj_get>
 80147ec:	4603      	mov	r3, r0
 80147ee:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 80147f2:	ea44 0203 	orr.w	r2, r4, r3
 80147f6:	68fb      	ldr	r3, [r7, #12]
 80147f8:	60da      	str	r2, [r3, #12]
        pnetif->gateway.addr = NET_ARTON(wifi_obj_get()->NetSettings.Gateway_Addr);
 80147fa:	f7f5 fe95 	bl	800a528 <wifi_obj_get>
 80147fe:	4603      	mov	r3, r0
 8014800:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8014804:	061c      	lsls	r4, r3, #24
 8014806:	f7f5 fe8f 	bl	800a528 <wifi_obj_get>
 801480a:	4603      	mov	r3, r0
 801480c:	f893 30e7 	ldrb.w	r3, [r3, #231]	; 0xe7
 8014810:	041b      	lsls	r3, r3, #16
 8014812:	431c      	orrs	r4, r3
 8014814:	f7f5 fe88 	bl	800a528 <wifi_obj_get>
 8014818:	4603      	mov	r3, r0
 801481a:	f893 30e6 	ldrb.w	r3, [r3, #230]	; 0xe6
 801481e:	021b      	lsls	r3, r3, #8
 8014820:	431c      	orrs	r4, r3
 8014822:	f7f5 fe81 	bl	800a528 <wifi_obj_get>
 8014826:	4603      	mov	r3, r0
 8014828:	f893 30e5 	ldrb.w	r3, [r3, #229]	; 0xe5
 801482c:	ea44 0203 	orr.w	r2, r4, r3
 8014830:	68fb      	ldr	r3, [r7, #12]
 8014832:	609a      	str	r2, [r3, #8]
        (void)net_state_manage_event(pnetif, NET_EVENT_IPADDR);
 8014834:	210a      	movs	r1, #10
 8014836:	68f8      	ldr	r0, [r7, #12]
 8014838:	f7ff fd04 	bl	8014244 <net_state_manage_event>
      break;
 801483c:	e029      	b.n	8014892 <mx_wifi_status_changed+0x178>
    }
  }
  else if ((uint8_t)MC_SOFTAP == cate)
 801483e:	79fb      	ldrb	r3, [r7, #7]
 8014840:	2b00      	cmp	r3, #0
 8014842:	d126      	bne.n	8014892 <mx_wifi_status_changed+0x178>
  {
    switch (status)
 8014844:	79bb      	ldrb	r3, [r7, #6]
 8014846:	2b04      	cmp	r3, #4
 8014848:	d002      	beq.n	8014850 <mx_wifi_status_changed+0x136>
 801484a:	2b05      	cmp	r3, #5
 801484c:	d00d      	beq.n	801486a <mx_wifi_status_changed+0x150>
        (void) net_state_manage_event(pnetif, NET_EVENT_INTERFACE_READY);
      }
      break;

      default:
        break;
 801484e:	e020      	b.n	8014892 <mx_wifi_status_changed+0x178>
        if (NET_STATE_CONNECTED == net_state)
 8014850:	7afb      	ldrb	r3, [r7, #11]
 8014852:	2b05      	cmp	r3, #5
 8014854:	d104      	bne.n	8014860 <mx_wifi_status_changed+0x146>
          (void)net_state_manage_event(pnetif, NET_EVENT_LINK_DOWN);
 8014856:	2109      	movs	r1, #9
 8014858:	68f8      	ldr	r0, [r7, #12]
 801485a:	f7ff fcf3 	bl	8014244 <net_state_manage_event>
      break;
 801485e:	e018      	b.n	8014892 <mx_wifi_status_changed+0x178>
          (void)net_state_manage_event(pnetif, NET_EVENT_INTERFACE_READY);
 8014860:	2107      	movs	r1, #7
 8014862:	68f8      	ldr	r0, [r7, #12]
 8014864:	f7ff fcee 	bl	8014244 <net_state_manage_event>
      break;
 8014868:	e013      	b.n	8014892 <mx_wifi_status_changed+0x178>
        pnetif->ipaddr = pnetif->static_ipaddr;
 801486a:	68fb      	ldr	r3, [r7, #12]
 801486c:	68fa      	ldr	r2, [r7, #12]
 801486e:	6912      	ldr	r2, [r2, #16]
 8014870:	605a      	str	r2, [r3, #4]
        pnetif->gateway = pnetif->static_gateway;
 8014872:	68fb      	ldr	r3, [r7, #12]
 8014874:	68fa      	ldr	r2, [r7, #12]
 8014876:	6952      	ldr	r2, [r2, #20]
 8014878:	609a      	str	r2, [r3, #8]
        pnetif->netmask = pnetif->static_netmask;
 801487a:	68fb      	ldr	r3, [r7, #12]
 801487c:	68fa      	ldr	r2, [r7, #12]
 801487e:	6992      	ldr	r2, [r2, #24]
 8014880:	60da      	str	r2, [r3, #12]
        (void) net_state_manage_event(pnetif, NET_EVENT_INTERFACE_READY);
 8014882:	2107      	movs	r1, #7
 8014884:	68f8      	ldr	r0, [r7, #12]
 8014886:	f7ff fcdd 	bl	8014244 <net_state_manage_event>
      break;
 801488a:	e002      	b.n	8014892 <mx_wifi_status_changed+0x178>
        break;
 801488c:	bf00      	nop
 801488e:	e000      	b.n	8014892 <mx_wifi_status_changed+0x178>
      break;
 8014890:	bf00      	nop
  }
  else
  {
    /* nothing */
  }
}
 8014892:	bf00      	nop
 8014894:	3714      	adds	r7, #20
 8014896:	46bd      	mov	sp, r7
 8014898:	bd90      	pop	{r4, r7, pc}
	...

0801489c <mx_wifi_if_start_station>:
  * @brief                   Mxchip WiFi connect to AP
  * @param  pnetif           net interface
  * @return int32_t          0 if success, otherwise failed
  */
static int32_t mx_wifi_if_start_station(net_if_handle_t *pnetif)
{
 801489c:	b580      	push	{r7, lr}
 801489e:	b086      	sub	sp, #24
 80148a0:	af00      	add	r7, sp, #0
 80148a2:	6078      	str	r0, [r7, #4]
  int32_t ret;
  const net_wifi_credentials_t *const credentials = pnetif->pdrv->extension.wifi->credentials;
 80148a4:	687b      	ldr	r3, [r7, #4]
 80148a6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80148aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80148ac:	699b      	ldr	r3, [r3, #24]
 80148ae:	613b      	str	r3, [r7, #16]

  if (false == pnetif->dhcp_mode)
 80148b0:	687b      	ldr	r3, [r7, #4]
 80148b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80148b6:	f083 0301 	eor.w	r3, r3, #1
 80148ba:	b2db      	uxtb	r3, r3
 80148bc:	2b00      	cmp	r3, #0
 80148be:	d01e      	beq.n	80148fe <mx_wifi_if_start_station+0x62>
  {
    wifi_obj_get()->NetSettings.DHCP_IsEnabled = 0;
 80148c0:	f7f5 fe32 	bl	800a528 <wifi_obj_get>
 80148c4:	4603      	mov	r3, r0
 80148c6:	2200      	movs	r2, #0
 80148c8:	f883 20db 	strb.w	r2, [r3, #219]	; 0xdb
    (void)memcpy(wifi_obj_get()->NetSettings.IP6_Mask, &pnetif->static_netmask.u_addr.ip6, 16);
    (void)memcpy(wifi_obj_get()->NetSettings.Gateway6_Addr, &pnetif->static_gateway.u_addr.ip6, 16);

#else
    /* IPv4 */
    (void)memcpy(wifi_obj_get()->NetSettings.IP_Addr, &pnetif->static_ipaddr, 4);
 80148cc:	f7f5 fe2c 	bl	800a528 <wifi_obj_get>
 80148d0:	4603      	mov	r3, r0
 80148d2:	33dd      	adds	r3, #221	; 0xdd
 80148d4:	687a      	ldr	r2, [r7, #4]
 80148d6:	3210      	adds	r2, #16
 80148d8:	6812      	ldr	r2, [r2, #0]
 80148da:	601a      	str	r2, [r3, #0]
    (void)memcpy(wifi_obj_get()->NetSettings.IP_Mask, &pnetif->static_netmask, 4);
 80148dc:	f7f5 fe24 	bl	800a528 <wifi_obj_get>
 80148e0:	4603      	mov	r3, r0
 80148e2:	33e1      	adds	r3, #225	; 0xe1
 80148e4:	687a      	ldr	r2, [r7, #4]
 80148e6:	3218      	adds	r2, #24
 80148e8:	6812      	ldr	r2, [r2, #0]
 80148ea:	601a      	str	r2, [r3, #0]
    (void)memcpy(wifi_obj_get()->NetSettings.Gateway_Addr, &pnetif->static_gateway, 4);
 80148ec:	f7f5 fe1c 	bl	800a528 <wifi_obj_get>
 80148f0:	4603      	mov	r3, r0
 80148f2:	33e5      	adds	r3, #229	; 0xe5
 80148f4:	687a      	ldr	r2, [r7, #4]
 80148f6:	3214      	adds	r2, #20
 80148f8:	6812      	ldr	r2, [r2, #0]
 80148fa:	601a      	str	r2, [r3, #0]
 80148fc:	e005      	b.n	801490a <mx_wifi_if_start_station+0x6e>
#endif /* NET_USE_IPV6 */
  }
  else
  {
    wifi_obj_get()->NetSettings.DHCP_IsEnabled = 1;
 80148fe:	f7f5 fe13 	bl	800a528 <wifi_obj_get>
 8014902:	4603      	mov	r3, r0
 8014904:	2201      	movs	r2, #1
 8014906:	f883 20db 	strb.w	r2, [r3, #219]	; 0xdb
  }

  (void)MX_WIFI_RegisterStatusCallback_if(wifi_obj_get(), mx_wifi_status_changed, pnetif, MC_STATION);
 801490a:	f7f5 fe0d 	bl	800a528 <wifi_obj_get>
 801490e:	2301      	movs	r3, #1
 8014910:	687a      	ldr	r2, [r7, #4]
 8014912:	4914      	ldr	r1, [pc, #80]	; (8014964 <mx_wifi_if_start_station+0xc8>)
 8014914:	f7f3 fe64 	bl	80085e0 <MX_WIFI_RegisterStatusCallback_if>

  if (((int32_t)NET_WIFI_SM_WPS_OPEN == credentials->security_mode) || \
 8014918:	693b      	ldr	r3, [r7, #16]
 801491a:	689b      	ldr	r3, [r3, #8]
 801491c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8014920:	d004      	beq.n	801492c <mx_wifi_if_start_station+0x90>
      ((int32_t)NET_WIFI_SM_WPS_SECURE == credentials->security_mode))
 8014922:	693b      	ldr	r3, [r7, #16]
 8014924:	689b      	ldr	r3, [r3, #8]
  if (((int32_t)NET_WIFI_SM_WPS_OPEN == credentials->security_mode) || \
 8014926:	4a10      	ldr	r2, [pc, #64]	; (8014968 <mx_wifi_if_start_station+0xcc>)
 8014928:	4293      	cmp	r3, r2
 801492a:	d108      	bne.n	801493e <mx_wifi_if_start_station+0xa2>
  {
    ret = MX_WIFI_WPS_Connect(wifi_obj_get());
 801492c:	f7f5 fdfc 	bl	800a528 <wifi_obj_get>
 8014930:	4603      	mov	r3, r0
 8014932:	4618      	mov	r0, r3
 8014934:	f7f3 ffd3 	bl	80088de <MX_WIFI_WPS_Connect>
 8014938:	4603      	mov	r3, r0
 801493a:	617b      	str	r3, [r7, #20]
 801493c:	e00c      	b.n	8014958 <mx_wifi_if_start_station+0xbc>
  }
  else
  {
    /* NOTE: secure type is auto for Mxchip WiFi */
    const MX_WIFI_SecurityType_t secure_type = MX_WIFI_SEC_AUTO;
 801493e:	2307      	movs	r3, #7
 8014940:	73fb      	strb	r3, [r7, #15]
    ret = MX_WIFI_Connect(wifi_obj_get(), credentials->ssid, credentials->psk, secure_type);
 8014942:	f7f5 fdf1 	bl	800a528 <wifi_obj_get>
 8014946:	693b      	ldr	r3, [r7, #16]
 8014948:	6819      	ldr	r1, [r3, #0]
 801494a:	693b      	ldr	r3, [r7, #16]
 801494c:	685a      	ldr	r2, [r3, #4]
 801494e:	7bfb      	ldrb	r3, [r7, #15]
 8014950:	f7f3 fe71 	bl	8008636 <MX_WIFI_Connect>
 8014954:	4603      	mov	r3, r0
 8014956:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8014958:	697b      	ldr	r3, [r7, #20]
}
 801495a:	4618      	mov	r0, r3
 801495c:	3718      	adds	r7, #24
 801495e:	46bd      	mov	sp, r7
 8014960:	bd80      	pop	{r7, pc}
 8014962:	bf00      	nop
 8014964:	0801471b 	.word	0x0801471b
 8014968:	10000004 	.word	0x10000004

0801496c <mx_wifi_if_start_softap>:
  * @brief                   Mxchip WiFi start AP mode
  * @param  pnetif           net interface
  * @return int32_t          0 if success, otherwise failed
  */
static int32_t mx_wifi_if_start_softap(net_if_handle_t *pnetif)
{
 801496c:	b590      	push	{r4, r7, lr}
 801496e:	b0b3      	sub	sp, #204	; 0xcc
 8014970:	af04      	add	r7, sp, #16
 8014972:	6078      	str	r0, [r7, #4]
  (void)pnetif;
  /* This is independent of what is supported by IP stack IPv6 or Ipv4 */
  return NET_ERROR_UNSUPPORTED;

#else
  int32_t ret = NET_ERROR_GENERIC;
 8014974:	f06f 031c 	mvn.w	r3, #28
 8014978:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

  MX_WIFI_APSettings_t ap_cfg = {0};
 801497c:	f107 030c 	add.w	r3, r7, #12
 8014980:	22a3      	movs	r2, #163	; 0xa3
 8014982:	2100      	movs	r1, #0
 8014984:	4618      	mov	r0, r3
 8014986:	f002 fd29 	bl	80173dc <memset>
  const net_wifi_credentials_t *const credentials = pnetif->pdrv->extension.wifi->credentials;
 801498a:	687b      	ldr	r3, [r7, #4]
 801498c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8014990:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014992:	699b      	ldr	r3, [r3, #24]
 8014994:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  if (credentials != NULL)
 8014998:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801499c:	2b00      	cmp	r3, #0
 801499e:	d012      	beq.n	80149c6 <mx_wifi_if_start_softap+0x5a>
  {
    (void)strncpy(ap_cfg.SSID, credentials->ssid, sizeof(ap_cfg.SSID));
 80149a0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80149a4:	6819      	ldr	r1, [r3, #0]
 80149a6:	f107 030c 	add.w	r3, r7, #12
 80149aa:	2221      	movs	r2, #33	; 0x21
 80149ac:	4618      	mov	r0, r3
 80149ae:	f002 fcd8 	bl	8017362 <strncpy>
    (void)strncpy(ap_cfg.pswd, credentials->psk, sizeof(ap_cfg.pswd));
 80149b2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80149b6:	6859      	ldr	r1, [r3, #4]
 80149b8:	f107 030c 	add.w	r3, r7, #12
 80149bc:	3321      	adds	r3, #33	; 0x21
 80149be:	2241      	movs	r2, #65	; 0x41
 80149c0:	4618      	mov	r0, r3
 80149c2:	f002 fcce 	bl	8017362 <strncpy>
  }

  ap_cfg.channel = pnetif->pdrv->extension.wifi->access_channel;
 80149c6:	687b      	ldr	r3, [r7, #4]
 80149c8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80149cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80149ce:	7f5b      	ldrb	r3, [r3, #29]
 80149d0:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
  (void)snprintf(ap_cfg.ip.dnserver, sizeof(ap_cfg.ip.dnserver), "%"PRIu32".%"PRIu32".%"PRIu32".%"PRIu32"",
                 ADDR(pnetif->static_dnserver.u_addr.ip4.addr));

#else
  (void)snprintf(ap_cfg.ip.localip, sizeof(ap_cfg.ip.localip), "%"PRIu32".%"PRIu32".%"PRIu32".%"PRIu32"",
                 ADDR(pnetif->static_ipaddr.addr));
 80149d4:	687b      	ldr	r3, [r7, #4]
 80149d6:	691b      	ldr	r3, [r3, #16]
  (void)snprintf(ap_cfg.ip.localip, sizeof(ap_cfg.ip.localip), "%"PRIu32".%"PRIu32".%"PRIu32".%"PRIu32"",
 80149d8:	b2dc      	uxtb	r4, r3
                 ADDR(pnetif->static_ipaddr.addr));
 80149da:	687b      	ldr	r3, [r7, #4]
 80149dc:	691b      	ldr	r3, [r3, #16]
 80149de:	0a1b      	lsrs	r3, r3, #8
  (void)snprintf(ap_cfg.ip.localip, sizeof(ap_cfg.ip.localip), "%"PRIu32".%"PRIu32".%"PRIu32".%"PRIu32"",
 80149e0:	b2db      	uxtb	r3, r3
                 ADDR(pnetif->static_ipaddr.addr));
 80149e2:	687a      	ldr	r2, [r7, #4]
 80149e4:	6912      	ldr	r2, [r2, #16]
 80149e6:	0c12      	lsrs	r2, r2, #16
  (void)snprintf(ap_cfg.ip.localip, sizeof(ap_cfg.ip.localip), "%"PRIu32".%"PRIu32".%"PRIu32".%"PRIu32"",
 80149e8:	b2d2      	uxtb	r2, r2
                 ADDR(pnetif->static_ipaddr.addr));
 80149ea:	6879      	ldr	r1, [r7, #4]
 80149ec:	6909      	ldr	r1, [r1, #16]
 80149ee:	0e09      	lsrs	r1, r1, #24
  (void)snprintf(ap_cfg.ip.localip, sizeof(ap_cfg.ip.localip), "%"PRIu32".%"PRIu32".%"PRIu32".%"PRIu32"",
 80149f0:	f107 000c 	add.w	r0, r7, #12
 80149f4:	3063      	adds	r0, #99	; 0x63
 80149f6:	9102      	str	r1, [sp, #8]
 80149f8:	9201      	str	r2, [sp, #4]
 80149fa:	9300      	str	r3, [sp, #0]
 80149fc:	4623      	mov	r3, r4
 80149fe:	4a3a      	ldr	r2, [pc, #232]	; (8014ae8 <mx_wifi_if_start_softap+0x17c>)
 8014a00:	2110      	movs	r1, #16
 8014a02:	f001 fb87 	bl	8016114 <sniprintf>
  (void)snprintf(ap_cfg.ip.gateway, sizeof(ap_cfg.ip.gateway), "%"PRIu32".%"PRIu32".%"PRIu32".%"PRIu32"",
                 ADDR(pnetif->static_gateway.addr));
 8014a06:	687b      	ldr	r3, [r7, #4]
 8014a08:	695b      	ldr	r3, [r3, #20]
  (void)snprintf(ap_cfg.ip.gateway, sizeof(ap_cfg.ip.gateway), "%"PRIu32".%"PRIu32".%"PRIu32".%"PRIu32"",
 8014a0a:	b2dc      	uxtb	r4, r3
                 ADDR(pnetif->static_gateway.addr));
 8014a0c:	687b      	ldr	r3, [r7, #4]
 8014a0e:	695b      	ldr	r3, [r3, #20]
 8014a10:	0a1b      	lsrs	r3, r3, #8
  (void)snprintf(ap_cfg.ip.gateway, sizeof(ap_cfg.ip.gateway), "%"PRIu32".%"PRIu32".%"PRIu32".%"PRIu32"",
 8014a12:	b2db      	uxtb	r3, r3
                 ADDR(pnetif->static_gateway.addr));
 8014a14:	687a      	ldr	r2, [r7, #4]
 8014a16:	6952      	ldr	r2, [r2, #20]
 8014a18:	0c12      	lsrs	r2, r2, #16
  (void)snprintf(ap_cfg.ip.gateway, sizeof(ap_cfg.ip.gateway), "%"PRIu32".%"PRIu32".%"PRIu32".%"PRIu32"",
 8014a1a:	b2d2      	uxtb	r2, r2
                 ADDR(pnetif->static_gateway.addr));
 8014a1c:	6879      	ldr	r1, [r7, #4]
 8014a1e:	6949      	ldr	r1, [r1, #20]
 8014a20:	0e09      	lsrs	r1, r1, #24
  (void)snprintf(ap_cfg.ip.gateway, sizeof(ap_cfg.ip.gateway), "%"PRIu32".%"PRIu32".%"PRIu32".%"PRIu32"",
 8014a22:	f107 000c 	add.w	r0, r7, #12
 8014a26:	3083      	adds	r0, #131	; 0x83
 8014a28:	9102      	str	r1, [sp, #8]
 8014a2a:	9201      	str	r2, [sp, #4]
 8014a2c:	9300      	str	r3, [sp, #0]
 8014a2e:	4623      	mov	r3, r4
 8014a30:	4a2d      	ldr	r2, [pc, #180]	; (8014ae8 <mx_wifi_if_start_softap+0x17c>)
 8014a32:	2110      	movs	r1, #16
 8014a34:	f001 fb6e 	bl	8016114 <sniprintf>
  (void)snprintf(ap_cfg.ip.netmask, sizeof(ap_cfg.ip.netmask), "%"PRIu32".%"PRIu32".%"PRIu32".%"PRIu32"",
                 ADDR(pnetif->static_netmask.addr));
 8014a38:	687b      	ldr	r3, [r7, #4]
 8014a3a:	699b      	ldr	r3, [r3, #24]
  (void)snprintf(ap_cfg.ip.netmask, sizeof(ap_cfg.ip.netmask), "%"PRIu32".%"PRIu32".%"PRIu32".%"PRIu32"",
 8014a3c:	b2dc      	uxtb	r4, r3
                 ADDR(pnetif->static_netmask.addr));
 8014a3e:	687b      	ldr	r3, [r7, #4]
 8014a40:	699b      	ldr	r3, [r3, #24]
 8014a42:	0a1b      	lsrs	r3, r3, #8
  (void)snprintf(ap_cfg.ip.netmask, sizeof(ap_cfg.ip.netmask), "%"PRIu32".%"PRIu32".%"PRIu32".%"PRIu32"",
 8014a44:	b2db      	uxtb	r3, r3
                 ADDR(pnetif->static_netmask.addr));
 8014a46:	687a      	ldr	r2, [r7, #4]
 8014a48:	6992      	ldr	r2, [r2, #24]
 8014a4a:	0c12      	lsrs	r2, r2, #16
  (void)snprintf(ap_cfg.ip.netmask, sizeof(ap_cfg.ip.netmask), "%"PRIu32".%"PRIu32".%"PRIu32".%"PRIu32"",
 8014a4c:	b2d2      	uxtb	r2, r2
                 ADDR(pnetif->static_netmask.addr));
 8014a4e:	6879      	ldr	r1, [r7, #4]
 8014a50:	6989      	ldr	r1, [r1, #24]
 8014a52:	0e09      	lsrs	r1, r1, #24
  (void)snprintf(ap_cfg.ip.netmask, sizeof(ap_cfg.ip.netmask), "%"PRIu32".%"PRIu32".%"PRIu32".%"PRIu32"",
 8014a54:	f107 000c 	add.w	r0, r7, #12
 8014a58:	3073      	adds	r0, #115	; 0x73
 8014a5a:	9102      	str	r1, [sp, #8]
 8014a5c:	9201      	str	r2, [sp, #4]
 8014a5e:	9300      	str	r3, [sp, #0]
 8014a60:	4623      	mov	r3, r4
 8014a62:	4a21      	ldr	r2, [pc, #132]	; (8014ae8 <mx_wifi_if_start_softap+0x17c>)
 8014a64:	2110      	movs	r1, #16
 8014a66:	f001 fb55 	bl	8016114 <sniprintf>
  (void)snprintf(ap_cfg.ip.dnserver, sizeof(ap_cfg.ip.dnserver), "%"PRIu32".%"PRIu32".%"PRIu32".%"PRIu32"",
                 ADDR(pnetif->static_dnserver.addr));
 8014a6a:	687b      	ldr	r3, [r7, #4]
 8014a6c:	69db      	ldr	r3, [r3, #28]
  (void)snprintf(ap_cfg.ip.dnserver, sizeof(ap_cfg.ip.dnserver), "%"PRIu32".%"PRIu32".%"PRIu32".%"PRIu32"",
 8014a6e:	b2dc      	uxtb	r4, r3
                 ADDR(pnetif->static_dnserver.addr));
 8014a70:	687b      	ldr	r3, [r7, #4]
 8014a72:	69db      	ldr	r3, [r3, #28]
 8014a74:	0a1b      	lsrs	r3, r3, #8
  (void)snprintf(ap_cfg.ip.dnserver, sizeof(ap_cfg.ip.dnserver), "%"PRIu32".%"PRIu32".%"PRIu32".%"PRIu32"",
 8014a76:	b2db      	uxtb	r3, r3
                 ADDR(pnetif->static_dnserver.addr));
 8014a78:	687a      	ldr	r2, [r7, #4]
 8014a7a:	69d2      	ldr	r2, [r2, #28]
 8014a7c:	0c12      	lsrs	r2, r2, #16
  (void)snprintf(ap_cfg.ip.dnserver, sizeof(ap_cfg.ip.dnserver), "%"PRIu32".%"PRIu32".%"PRIu32".%"PRIu32"",
 8014a7e:	b2d2      	uxtb	r2, r2
                 ADDR(pnetif->static_dnserver.addr));
 8014a80:	6879      	ldr	r1, [r7, #4]
 8014a82:	69c9      	ldr	r1, [r1, #28]
 8014a84:	0e09      	lsrs	r1, r1, #24
  (void)snprintf(ap_cfg.ip.dnserver, sizeof(ap_cfg.ip.dnserver), "%"PRIu32".%"PRIu32".%"PRIu32".%"PRIu32"",
 8014a86:	f107 000c 	add.w	r0, r7, #12
 8014a8a:	3093      	adds	r0, #147	; 0x93
 8014a8c:	9102      	str	r1, [sp, #8]
 8014a8e:	9201      	str	r2, [sp, #4]
 8014a90:	9300      	str	r3, [sp, #0]
 8014a92:	4623      	mov	r3, r4
 8014a94:	4a14      	ldr	r2, [pc, #80]	; (8014ae8 <mx_wifi_if_start_softap+0x17c>)
 8014a96:	2110      	movs	r1, #16
 8014a98:	f001 fb3c 	bl	8016114 <sniprintf>
#endif /* NET_USE_LWIP_DEFINITIONS */

  (void)MX_WIFI_RegisterStatusCallback_if(wifi_obj_get(), mx_wifi_status_changed, pnetif, MC_SOFTAP);
 8014a9c:	f7f5 fd44 	bl	800a528 <wifi_obj_get>
 8014aa0:	2300      	movs	r3, #0
 8014aa2:	687a      	ldr	r2, [r7, #4]
 8014aa4:	4911      	ldr	r1, [pc, #68]	; (8014aec <mx_wifi_if_start_softap+0x180>)
 8014aa6:	f7f3 fd9b 	bl	80085e0 <MX_WIFI_RegisterStatusCallback_if>

  if (MX_WIFI_STATUS_OK == MX_WIFI_StartAP(wifi_obj_get(), &ap_cfg))
 8014aaa:	f7f5 fd3d 	bl	800a528 <wifi_obj_get>
 8014aae:	4602      	mov	r2, r0
 8014ab0:	f107 030c 	add.w	r3, r7, #12
 8014ab4:	4619      	mov	r1, r3
 8014ab6:	4610      	mov	r0, r2
 8014ab8:	f7f3 ffe2 	bl	8008a80 <MX_WIFI_StartAP>
 8014abc:	4603      	mov	r3, r0
 8014abe:	2b00      	cmp	r3, #0
 8014ac0:	d10b      	bne.n	8014ada <mx_wifi_if_start_softap+0x16e>
  {
    /* Soft AP MAC must get after Soft AP up, call this one to update SysInfo.apMAC. */
    (void)MX_WIFI_GetsoftapMACAddress(wifi_obj_get(), pnetif->macaddr.mac);
 8014ac2:	f7f5 fd31 	bl	800a528 <wifi_obj_get>
 8014ac6:	4602      	mov	r2, r0
 8014ac8:	687b      	ldr	r3, [r7, #4]
 8014aca:	33e5      	adds	r3, #229	; 0xe5
 8014acc:	4619      	mov	r1, r3
 8014ace:	4610      	mov	r0, r2
 8014ad0:	f7f3 fcb2 	bl	8008438 <MX_WIFI_GetsoftapMACAddress>

    ret = NET_OK;
 8014ad4:	2300      	movs	r3, #0
 8014ad6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  }

  return ret;
 8014ada:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
#endif /* NET_USE_IPV6 */
}
 8014ade:	4618      	mov	r0, r3
 8014ae0:	37bc      	adds	r7, #188	; 0xbc
 8014ae2:	46bd      	mov	sp, r7
 8014ae4:	bd90      	pop	{r4, r7, pc}
 8014ae6:	bf00      	nop
 8014ae8:	0801c0c8 	.word	0x0801c0c8
 8014aec:	0801471b 	.word	0x0801471b

08014af0 <mx_wifi_if_disconnect>:
  * @brief                   Mxchip WiFi disconnect from AP
  * @param  pnetif           net interface
  * @return int32_t          0 if success, otherwise failed
  */
static int32_t mx_wifi_if_disconnect(net_if_handle_t *pnetif)
{
 8014af0:	b580      	push	{r7, lr}
 8014af2:	b084      	sub	sp, #16
 8014af4:	af00      	add	r7, sp, #0
 8014af6:	6078      	str	r0, [r7, #4]
      (void)net_state_manage_event(pnetif, NET_EVENT_INTERFACE_READY);
    }
  }

#else
  ret = NET_OK;
 8014af8:	2300      	movs	r3, #0
 8014afa:	60fb      	str	r3, [r7, #12]
  (void) net_state_manage_event(pnetif, NET_EVENT_INTERFACE_READY);
 8014afc:	2107      	movs	r1, #7
 8014afe:	6878      	ldr	r0, [r7, #4]
 8014b00:	f7ff fba0 	bl	8014244 <net_state_manage_event>
#endif /* (MX_WIFI_NETWORK_BYPASS_MODE == 1) */

  return ret;
 8014b04:	68fb      	ldr	r3, [r7, #12]
}
 8014b06:	4618      	mov	r0, r3
 8014b08:	3710      	adds	r7, #16
 8014b0a:	46bd      	mov	sp, r7
 8014b0c:	bd80      	pop	{r7, pc}

08014b0e <mx_wifi_if_connect>:
  * @brief                   Mxchip WiFi start IP services
  * @param  pnetif           net interface
  * @return int32_t          0 if success, otherwise failed
  */
static int32_t mx_wifi_if_connect(net_if_handle_t *pnetif)
{
 8014b0e:	b590      	push	{r4, r7, lr}
 8014b10:	b087      	sub	sp, #28
 8014b12:	af00      	add	r7, sp, #0
 8014b14:	6078      	str	r0, [r7, #4]
    NET_DBG_ERROR("Can't add interface (netif)\n");
  }

#else
  mwifi_if_t wifi_mode;
  bool ip_got_flag = false;
 8014b16:	2300      	movs	r3, #0
 8014b18:	74bb      	strb	r3, [r7, #18]

  ret = NET_OK;
 8014b1a:	2300      	movs	r3, #0
 8014b1c:	617b      	str	r3, [r7, #20]

  if (pnetif->pdrv->extension.wifi->mode == NET_WIFI_MODE_AP)
 8014b1e:	687b      	ldr	r3, [r7, #4]
 8014b20:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8014b24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014b26:	7f1b      	ldrb	r3, [r3, #28]
 8014b28:	2b01      	cmp	r3, #1
 8014b2a:	d102      	bne.n	8014b32 <mx_wifi_if_connect+0x24>
  {
    wifi_mode = MC_SOFTAP;
 8014b2c:	2300      	movs	r3, #0
 8014b2e:	74fb      	strb	r3, [r7, #19]
 8014b30:	e001      	b.n	8014b36 <mx_wifi_if_connect+0x28>
  }
  else
  {
    wifi_mode = MC_STATION;
 8014b32:	2301      	movs	r3, #1
 8014b34:	74fb      	strb	r3, [r7, #19]
    }
  }

#else
  {
    uint8_t ip[4] = {0};
 8014b36:	2300      	movs	r3, #0
 8014b38:	60bb      	str	r3, [r7, #8]
    int32_t retry = 3;
 8014b3a:	2303      	movs	r3, #3
 8014b3c:	60fb      	str	r3, [r7, #12]
    while (retry > 0)
 8014b3e:	e070      	b.n	8014c22 <mx_wifi_if_connect+0x114>
    {
      retry--;
 8014b40:	68fb      	ldr	r3, [r7, #12]
 8014b42:	3b01      	subs	r3, #1
 8014b44:	60fb      	str	r3, [r7, #12]
      if (MX_WIFI_STATUS_OK == MX_WIFI_GetIPAddress(wifi_obj_get(), &ip[0], wifi_mode))
 8014b46:	f7f5 fcef 	bl	800a528 <wifi_obj_get>
 8014b4a:	7cfa      	ldrb	r2, [r7, #19]
 8014b4c:	f107 0308 	add.w	r3, r7, #8
 8014b50:	4619      	mov	r1, r3
 8014b52:	f7f3 ff1a 	bl	800898a <MX_WIFI_GetIPAddress>
 8014b56:	4603      	mov	r3, r0
 8014b58:	2b00      	cmp	r3, #0
 8014b5a:	d15b      	bne.n	8014c14 <mx_wifi_if_connect+0x106>
        pnetif->ipaddr.type = (u8_t)IPADDR_TYPE_V4;
        pnetif->ipaddr.u_addr.ip4.addr = NET_ARTON(wifi_obj_get()->NetSettings.IP_Addr);
        pnetif->netmask.u_addr.ip4.addr = NET_ARTON(wifi_obj_get()->NetSettings.IP_Mask);
        pnetif->gateway.u_addr.ip4.addr = NET_ARTON(wifi_obj_get()->NetSettings.Gateway_Addr);
#else
        pnetif->ipaddr.addr = NET_ARTON(wifi_obj_get()->NetSettings.IP_Addr);
 8014b5c:	f7f5 fce4 	bl	800a528 <wifi_obj_get>
 8014b60:	4603      	mov	r3, r0
 8014b62:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8014b66:	061c      	lsls	r4, r3, #24
 8014b68:	f7f5 fcde 	bl	800a528 <wifi_obj_get>
 8014b6c:	4603      	mov	r3, r0
 8014b6e:	f893 30df 	ldrb.w	r3, [r3, #223]	; 0xdf
 8014b72:	041b      	lsls	r3, r3, #16
 8014b74:	431c      	orrs	r4, r3
 8014b76:	f7f5 fcd7 	bl	800a528 <wifi_obj_get>
 8014b7a:	4603      	mov	r3, r0
 8014b7c:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
 8014b80:	021b      	lsls	r3, r3, #8
 8014b82:	431c      	orrs	r4, r3
 8014b84:	f7f5 fcd0 	bl	800a528 <wifi_obj_get>
 8014b88:	4603      	mov	r3, r0
 8014b8a:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8014b8e:	ea44 0203 	orr.w	r2, r4, r3
 8014b92:	687b      	ldr	r3, [r7, #4]
 8014b94:	605a      	str	r2, [r3, #4]
        pnetif->netmask.addr = NET_ARTON(wifi_obj_get()->NetSettings.IP_Mask);
 8014b96:	f7f5 fcc7 	bl	800a528 <wifi_obj_get>
 8014b9a:	4603      	mov	r3, r0
 8014b9c:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
 8014ba0:	061c      	lsls	r4, r3, #24
 8014ba2:	f7f5 fcc1 	bl	800a528 <wifi_obj_get>
 8014ba6:	4603      	mov	r3, r0
 8014ba8:	f893 30e3 	ldrb.w	r3, [r3, #227]	; 0xe3
 8014bac:	041b      	lsls	r3, r3, #16
 8014bae:	431c      	orrs	r4, r3
 8014bb0:	f7f5 fcba 	bl	800a528 <wifi_obj_get>
 8014bb4:	4603      	mov	r3, r0
 8014bb6:	f893 30e2 	ldrb.w	r3, [r3, #226]	; 0xe2
 8014bba:	021b      	lsls	r3, r3, #8
 8014bbc:	431c      	orrs	r4, r3
 8014bbe:	f7f5 fcb3 	bl	800a528 <wifi_obj_get>
 8014bc2:	4603      	mov	r3, r0
 8014bc4:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8014bc8:	ea44 0203 	orr.w	r2, r4, r3
 8014bcc:	687b      	ldr	r3, [r7, #4]
 8014bce:	60da      	str	r2, [r3, #12]
        pnetif->gateway.addr = NET_ARTON(wifi_obj_get()->NetSettings.Gateway_Addr);
 8014bd0:	f7f5 fcaa 	bl	800a528 <wifi_obj_get>
 8014bd4:	4603      	mov	r3, r0
 8014bd6:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8014bda:	061c      	lsls	r4, r3, #24
 8014bdc:	f7f5 fca4 	bl	800a528 <wifi_obj_get>
 8014be0:	4603      	mov	r3, r0
 8014be2:	f893 30e7 	ldrb.w	r3, [r3, #231]	; 0xe7
 8014be6:	041b      	lsls	r3, r3, #16
 8014be8:	431c      	orrs	r4, r3
 8014bea:	f7f5 fc9d 	bl	800a528 <wifi_obj_get>
 8014bee:	4603      	mov	r3, r0
 8014bf0:	f893 30e6 	ldrb.w	r3, [r3, #230]	; 0xe6
 8014bf4:	021b      	lsls	r3, r3, #8
 8014bf6:	431c      	orrs	r4, r3
 8014bf8:	f7f5 fc96 	bl	800a528 <wifi_obj_get>
 8014bfc:	4603      	mov	r3, r0
 8014bfe:	f893 30e5 	ldrb.w	r3, [r3, #229]	; 0xe5
 8014c02:	ea44 0203 	orr.w	r2, r4, r3
 8014c06:	687b      	ldr	r3, [r7, #4]
 8014c08:	609a      	str	r2, [r3, #8]
#endif /* NET_USE_LWIP_DEFINITIONS */

        ip_got_flag = true;
 8014c0a:	2301      	movs	r3, #1
 8014c0c:	74bb      	strb	r3, [r7, #18]
        ret = NET_OK;
 8014c0e:	2300      	movs	r3, #0
 8014c10:	617b      	str	r3, [r7, #20]
        break;
 8014c12:	e009      	b.n	8014c28 <mx_wifi_if_connect+0x11a>
      }
      else
      {
        ret = NET_ERROR_NO_ADDRESS;
 8014c14:	f06f 0306 	mvn.w	r3, #6
 8014c18:	617b      	str	r3, [r7, #20]
        DELAY_MS(1000);
 8014c1a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8014c1e:	f7f5 fd41 	bl	800a6a4 <HAL_Delay>
    while (retry > 0)
 8014c22:	68fb      	ldr	r3, [r7, #12]
 8014c24:	2b00      	cmp	r3, #0
 8014c26:	dc8b      	bgt.n	8014b40 <mx_wifi_if_connect+0x32>
    }
  }
#endif  /* NET_USE_IPV6 */


  if (ip_got_flag)
 8014c28:	7cbb      	ldrb	r3, [r7, #18]
 8014c2a:	2b00      	cmp	r3, #0
 8014c2c:	d003      	beq.n	8014c36 <mx_wifi_if_connect+0x128>
  {
    (void)net_state_manage_event(pnetif, NET_EVENT_IPADDR);
 8014c2e:	210a      	movs	r1, #10
 8014c30:	6878      	ldr	r0, [r7, #4]
 8014c32:	f7ff fb07 	bl	8014244 <net_state_manage_event>
  }

#endif /* (MX_WIFI_NETWORK_BYPASS_MODE == 1) */

  return ret;
 8014c36:	697b      	ldr	r3, [r7, #20]
}
 8014c38:	4618      	mov	r0, r3
 8014c3a:	371c      	adds	r7, #28
 8014c3c:	46bd      	mov	sp, r7
 8014c3e:	bd90      	pop	{r4, r7, pc}

08014c40 <mx_wifi_scan>:
  * @param  mode             scan mode
  * @param  ssid             SSID to scan in active mode
  * @return int32_t          0 if success, otherwise failed
  */
static int32_t mx_wifi_scan(net_if_handle_t *pnetif, net_wifi_scan_mode_t mode, char *ssid)
{
 8014c40:	b580      	push	{r7, lr}
 8014c42:	b086      	sub	sp, #24
 8014c44:	af00      	add	r7, sp, #0
 8014c46:	60f8      	str	r0, [r7, #12]
 8014c48:	460b      	mov	r3, r1
 8014c4a:	607a      	str	r2, [r7, #4]
 8014c4c:	72fb      	strb	r3, [r7, #11]
  int32_t ret;
  uint32_t len = 0u;
 8014c4e:	2300      	movs	r3, #0
 8014c50:	617b      	str	r3, [r7, #20]

  (void) pnetif;

  if (ssid != NULL)
 8014c52:	687b      	ldr	r3, [r7, #4]
 8014c54:	2b00      	cmp	r3, #0
 8014c56:	d003      	beq.n	8014c60 <mx_wifi_scan+0x20>
  {
    len = strlen(ssid);
 8014c58:	6878      	ldr	r0, [r7, #4]
 8014c5a:	f7eb fb0d 	bl	8000278 <strlen>
 8014c5e:	6178      	str	r0, [r7, #20]
  }
  ret = MX_WIFI_Scan(wifi_obj_get(), (uint8_t)mode, ssid, (int32_t) len);
 8014c60:	f7f5 fc62 	bl	800a528 <wifi_obj_get>
 8014c64:	697b      	ldr	r3, [r7, #20]
 8014c66:	7af9      	ldrb	r1, [r7, #11]
 8014c68:	687a      	ldr	r2, [r7, #4]
 8014c6a:	f7f3 fc1d 	bl	80084a8 <MX_WIFI_Scan>
 8014c6e:	4603      	mov	r3, r0
 8014c70:	613b      	str	r3, [r7, #16]
  return ret;
 8014c72:	693b      	ldr	r3, [r7, #16]
}
 8014c74:	4618      	mov	r0, r3
 8014c76:	3718      	adds	r7, #24
 8014c78:	46bd      	mov	sp, r7
 8014c7a:	bd80      	pop	{r7, pc}

08014c7c <mx_wifi_get_scan_result>:
  * @param  scan_bss_count       BSS count
  * @return int32_t              The number of BSS obtained
  */
static int32_t mx_wifi_get_scan_result(net_if_handle_t *pnetif, net_wifi_scan_results_t *scan_bss_array,
                                       uint8_t scan_bss_count)
{
 8014c7c:	b580      	push	{r7, lr}
 8014c7e:	b08a      	sub	sp, #40	; 0x28
 8014c80:	af00      	add	r7, sp, #0
 8014c82:	60f8      	str	r0, [r7, #12]
 8014c84:	60b9      	str	r1, [r7, #8]
 8014c86:	4613      	mov	r3, r2
 8014c88:	71fb      	strb	r3, [r7, #7]
  int32_t ret = NET_ERROR_PARAMETER;
 8014c8a:	f06f 0303 	mvn.w	r3, #3
 8014c8e:	627b      	str	r3, [r7, #36]	; 0x24
    NET_WIFI_SM_WPA2_MIXED_PSK  /**< WPA2 /w AES or TKIP */
  };

  (void)pnetif;

  if ((NULL != scan_bss_array) && (0u != scan_bss_count))
 8014c90:	68bb      	ldr	r3, [r7, #8]
 8014c92:	2b00      	cmp	r3, #0
 8014c94:	d074      	beq.n	8014d80 <mx_wifi_get_scan_result+0x104>
 8014c96:	79fb      	ldrb	r3, [r7, #7]
 8014c98:	2b00      	cmp	r3, #0
 8014c9a:	d071      	beq.n	8014d80 <mx_wifi_get_scan_result+0x104>
  {
    /* Create buffer for results. */
    mwifi_ap_info_t *ap_infos_tmp = (mwifi_ap_info_t *)NET_CALLOC(scan_bss_count, sizeof(*ap_infos_tmp));
 8014c9c:	79fb      	ldrb	r3, [r7, #7]
 8014c9e:	2130      	movs	r1, #48	; 0x30
 8014ca0:	4618      	mov	r0, r3
 8014ca2:	f000 fa3b 	bl	801511c <calloc>
 8014ca6:	4603      	mov	r3, r0
 8014ca8:	617b      	str	r3, [r7, #20]

    if (NULL == ap_infos_tmp)
 8014caa:	697b      	ldr	r3, [r7, #20]
 8014cac:	2b00      	cmp	r3, #0
 8014cae:	d103      	bne.n	8014cb8 <mx_wifi_get_scan_result+0x3c>
    {
      ret = NET_ERROR_NO_MEMORY;
 8014cb0:	f06f 0307 	mvn.w	r3, #7
 8014cb4:	627b      	str	r3, [r7, #36]	; 0x24
 8014cb6:	e063      	b.n	8014d80 <mx_wifi_get_scan_result+0x104>
    }
    else
    {
      /* Get real mx_wifi scan results data. */
      const int8_t number = MX_WIFI_Get_scan_result(wifi_obj_get(), (uint8_t *) ap_infos_tmp, scan_bss_count);
 8014cb8:	f7f5 fc36 	bl	800a528 <wifi_obj_get>
 8014cbc:	79fb      	ldrb	r3, [r7, #7]
 8014cbe:	461a      	mov	r2, r3
 8014cc0:	6979      	ldr	r1, [r7, #20]
 8014cc2:	f7f3 fc61 	bl	8008588 <MX_WIFI_Get_scan_result>
 8014cc6:	4603      	mov	r3, r0
 8014cc8:	74fb      	strb	r3, [r7, #19]

      /* transfer to ST bss info */
      {
        mwifi_ap_info_t *ap_info = ap_infos_tmp;
 8014cca:	697b      	ldr	r3, [r7, #20]
 8014ccc:	623b      	str	r3, [r7, #32]
        net_wifi_scan_bss_t *scan_bss = scan_bss_array;
 8014cce:	68bb      	ldr	r3, [r7, #8]
 8014cd0:	61fb      	str	r3, [r7, #28]

        for (int8_t i = 0U; i < number; i++)
 8014cd2:	2300      	movs	r3, #0
 8014cd4:	76fb      	strb	r3, [r7, #27]
 8014cd6:	e047      	b.n	8014d68 <mx_wifi_get_scan_result+0xec>
        {
          (void) memset(scan_bss, 0, sizeof(*scan_bss));
 8014cd8:	2234      	movs	r2, #52	; 0x34
 8014cda:	2100      	movs	r1, #0
 8014cdc:	69f8      	ldr	r0, [r7, #28]
 8014cde:	f002 fb7d 	bl	80173dc <memset>
          (void) memcpy(scan_bss->ssid.value, ap_info->ssid, NET_WIFI_MAX_SSID_SIZE);
 8014ce2:	69fb      	ldr	r3, [r7, #28]
 8014ce4:	1c58      	adds	r0, r3, #1
 8014ce6:	6a3b      	ldr	r3, [r7, #32]
 8014ce8:	3304      	adds	r3, #4
 8014cea:	2220      	movs	r2, #32
 8014cec:	4619      	mov	r1, r3
 8014cee:	f002 fc34 	bl	801755a <memcpy>
          scan_bss->ssid.length = (uint8_t) strlen(ap_info->ssid);
 8014cf2:	6a3b      	ldr	r3, [r7, #32]
 8014cf4:	3304      	adds	r3, #4
 8014cf6:	4618      	mov	r0, r3
 8014cf8:	f7eb fabe 	bl	8000278 <strlen>
 8014cfc:	4603      	mov	r3, r0
 8014cfe:	b2da      	uxtb	r2, r3
 8014d00:	69fb      	ldr	r3, [r7, #28]
 8014d02:	701a      	strb	r2, [r3, #0]
          scan_bss->security = mxsec[ap_info->security];
 8014d04:	6a3b      	ldr	r3, [r7, #32]
 8014d06:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8014d0a:	461a      	mov	r2, r3
 8014d0c:	4b1f      	ldr	r3, [pc, #124]	; (8014d8c <mx_wifi_get_scan_result+0x110>)
 8014d0e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8014d12:	69fb      	ldr	r3, [r7, #28]
 8014d14:	629a      	str	r2, [r3, #40]	; 0x28
          (void) memcpy(&scan_bss->bssid, ap_info->bssid, NET_WIFI_MAC_ADDRESS_SIZE);
 8014d16:	69fb      	ldr	r3, [r7, #28]
 8014d18:	f103 0021 	add.w	r0, r3, #33	; 0x21
 8014d1c:	6a3b      	ldr	r3, [r7, #32]
 8014d1e:	3325      	adds	r3, #37	; 0x25
 8014d20:	2206      	movs	r2, #6
 8014d22:	4619      	mov	r1, r3
 8014d24:	f002 fc19 	bl	801755a <memcpy>
          scan_bss->rssi = (int8_t)ap_info->rssi;
 8014d28:	6a3b      	ldr	r3, [r7, #32]
 8014d2a:	681b      	ldr	r3, [r3, #0]
 8014d2c:	b25a      	sxtb	r2, r3
 8014d2e:	69fb      	ldr	r3, [r7, #28]
 8014d30:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
          scan_bss->channel = (uint8_t) ap_info->channel;
 8014d34:	6a3b      	ldr	r3, [r7, #32]
 8014d36:	f8d3 302b 	ldr.w	r3, [r3, #43]	; 0x2b
 8014d3a:	b2da      	uxtb	r2, r3
 8014d3c:	69fb      	ldr	r3, [r7, #28]
 8014d3e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
          (void) memcpy(scan_bss->country, ".CN", 4);  /* NOT SUPPORT for MX_WIFI */
 8014d42:	69fb      	ldr	r3, [r7, #28]
 8014d44:	332d      	adds	r3, #45	; 0x2d
 8014d46:	2204      	movs	r2, #4
 8014d48:	4911      	ldr	r1, [pc, #68]	; (8014d90 <mx_wifi_get_scan_result+0x114>)
 8014d4a:	4618      	mov	r0, r3
 8014d4c:	f002 fc05 	bl	801755a <memcpy>

          scan_bss++;
 8014d50:	69fb      	ldr	r3, [r7, #28]
 8014d52:	3334      	adds	r3, #52	; 0x34
 8014d54:	61fb      	str	r3, [r7, #28]
          ap_info++;
 8014d56:	6a3b      	ldr	r3, [r7, #32]
 8014d58:	3330      	adds	r3, #48	; 0x30
 8014d5a:	623b      	str	r3, [r7, #32]
        for (int8_t i = 0U; i < number; i++)
 8014d5c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8014d60:	b2db      	uxtb	r3, r3
 8014d62:	3301      	adds	r3, #1
 8014d64:	b2db      	uxtb	r3, r3
 8014d66:	76fb      	strb	r3, [r7, #27]
 8014d68:	f997 201b 	ldrsb.w	r2, [r7, #27]
 8014d6c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014d70:	429a      	cmp	r2, r3
 8014d72:	dbb1      	blt.n	8014cd8 <mx_wifi_get_scan_result+0x5c>
        }
      }
      ret = (int32_t) number;
 8014d74:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014d78:	627b      	str	r3, [r7, #36]	; 0x24
      NET_FREE(ap_infos_tmp);
 8014d7a:	6978      	ldr	r0, [r7, #20]
 8014d7c:	f000 fcca 	bl	8015714 <free>
    }
  }
  return ret;
 8014d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8014d82:	4618      	mov	r0, r3
 8014d84:	3728      	adds	r7, #40	; 0x28
 8014d86:	46bd      	mov	sp, r7
 8014d88:	bd80      	pop	{r7, pc}
 8014d8a:	bf00      	nop
 8014d8c:	0818dcf8 	.word	0x0818dcf8
 8014d90:	0801c0d8 	.word	0x0801c0d8

08014d94 <mx_wifi_socket>:
  * @param  type             socket type
  * @param  protocol         socket protocol
  * @return int32_t          socket fd, if failed return error code(<0)
  */
static int32_t mx_wifi_socket(int32_t domain, int32_t type, int32_t protocol)
{
 8014d94:	b580      	push	{r7, lr}
 8014d96:	b086      	sub	sp, #24
 8014d98:	af00      	add	r7, sp, #0
 8014d9a:	60f8      	str	r0, [r7, #12]
 8014d9c:	60b9      	str	r1, [r7, #8]
 8014d9e:	607a      	str	r2, [r7, #4]
  const int32_t ret = MX_WIFI_Socket_create(wifi_obj_get(), domain, type, protocol);
 8014da0:	f7f5 fbc2 	bl	800a528 <wifi_obj_get>
 8014da4:	687b      	ldr	r3, [r7, #4]
 8014da6:	68ba      	ldr	r2, [r7, #8]
 8014da8:	68f9      	ldr	r1, [r7, #12]
 8014daa:	f7f3 ff0a 	bl	8008bc2 <MX_WIFI_Socket_create>
 8014dae:	6178      	str	r0, [r7, #20]
  return ret;
 8014db0:	697b      	ldr	r3, [r7, #20]
}
 8014db2:	4618      	mov	r0, r3
 8014db4:	3718      	adds	r7, #24
 8014db6:	46bd      	mov	sp, r7
 8014db8:	bd80      	pop	{r7, pc}

08014dba <mx_wifi_setsockopt>:
  * @param  optvalue         socket option value to set
  * @param  optlen           socket option value length
  * @return int32_t          0 if success, if failed, return error code(< 0)
  */
static int32_t mx_wifi_setsockopt(int32_t sock, int32_t level, int32_t optname, const void *optvalue, uint32_t optlen)
{
 8014dba:	b580      	push	{r7, lr}
 8014dbc:	b088      	sub	sp, #32
 8014dbe:	af02      	add	r7, sp, #8
 8014dc0:	60f8      	str	r0, [r7, #12]
 8014dc2:	60b9      	str	r1, [r7, #8]
 8014dc4:	607a      	str	r2, [r7, #4]
 8014dc6:	603b      	str	r3, [r7, #0]
  int32_t ret = MX_WIFI_STATUS_OK;
 8014dc8:	2300      	movs	r3, #0
 8014dca:	617b      	str	r3, [r7, #20]
  /* Handle setsockopt forwarded by ST NetworkLibrary API. */
  /**
    * Note: bind device option is not used for the mxchip WiFi module,
    *       the module select the net interface by the socket address internally.
    */
  if (NET_SO_BINDTODEVICE != optname)
 8014dcc:	687b      	ldr	r3, [r7, #4]
 8014dce:	2b03      	cmp	r3, #3
 8014dd0:	d00b      	beq.n	8014dea <mx_wifi_setsockopt+0x30>
  {
    ret = MX_WIFI_Socket_setsockopt(wifi_obj_get(), sock, level, optname, optvalue, (int32_t)optlen);
 8014dd2:	f7f5 fba9 	bl	800a528 <wifi_obj_get>
 8014dd6:	6a3b      	ldr	r3, [r7, #32]
 8014dd8:	9301      	str	r3, [sp, #4]
 8014dda:	683b      	ldr	r3, [r7, #0]
 8014ddc:	9300      	str	r3, [sp, #0]
 8014dde:	687b      	ldr	r3, [r7, #4]
 8014de0:	68ba      	ldr	r2, [r7, #8]
 8014de2:	68f9      	ldr	r1, [r7, #12]
 8014de4:	f7f3 ff26 	bl	8008c34 <MX_WIFI_Socket_setsockopt>
 8014de8:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8014dea:	697b      	ldr	r3, [r7, #20]
}
 8014dec:	4618      	mov	r0, r3
 8014dee:	3718      	adds	r7, #24
 8014df0:	46bd      	mov	sp, r7
 8014df2:	bd80      	pop	{r7, pc}

08014df4 <mx_wifi_getsockopt>:
  * @param  optvalue         socket option value
  * @param  optlen           socket option value length
  * @return int32_t          0 if success, if failed return error code(<0)
  */
static int32_t mx_wifi_getsockopt(int32_t sock, int32_t level, int32_t optname, void *optvalue, uint32_t *optlen)
{
 8014df4:	b580      	push	{r7, lr}
 8014df6:	b088      	sub	sp, #32
 8014df8:	af02      	add	r7, sp, #8
 8014dfa:	60f8      	str	r0, [r7, #12]
 8014dfc:	60b9      	str	r1, [r7, #8]
 8014dfe:	607a      	str	r2, [r7, #4]
 8014e00:	603b      	str	r3, [r7, #0]
  const int32_t ret = MX_WIFI_Socket_getsockopt(wifi_obj_get(), sock, level, optname, optvalue, optlen);
 8014e02:	f7f5 fb91 	bl	800a528 <wifi_obj_get>
 8014e06:	6a3b      	ldr	r3, [r7, #32]
 8014e08:	9301      	str	r3, [sp, #4]
 8014e0a:	683b      	ldr	r3, [r7, #0]
 8014e0c:	9300      	str	r3, [sp, #0]
 8014e0e:	687b      	ldr	r3, [r7, #4]
 8014e10:	68ba      	ldr	r2, [r7, #8]
 8014e12:	68f9      	ldr	r1, [r7, #12]
 8014e14:	f7f3 ff66 	bl	8008ce4 <MX_WIFI_Socket_getsockopt>
 8014e18:	6178      	str	r0, [r7, #20]

  return ret;
 8014e1a:	697b      	ldr	r3, [r7, #20]
}
 8014e1c:	4618      	mov	r0, r3
 8014e1e:	3718      	adds	r7, #24
 8014e20:	46bd      	mov	sp, r7
 8014e22:	bd80      	pop	{r7, pc}

08014e24 <mx_wifi_bind>:
  * @param  addr             address to bind
  * @param  addrlen          address length
  * @return int32_t          0 if success, if failed, return error code(<0)
  */
static int32_t mx_wifi_bind(int32_t sock, const net_sockaddr_t *addr, uint32_t addrlen)
{
 8014e24:	b580      	push	{r7, lr}
 8014e26:	b086      	sub	sp, #24
 8014e28:	af00      	add	r7, sp, #0
 8014e2a:	60f8      	str	r0, [r7, #12]
 8014e2c:	60b9      	str	r1, [r7, #8]
 8014e2e:	607a      	str	r2, [r7, #4]
  int32_t ret = MX_WIFI_STATUS_ERROR;
 8014e30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014e34:	617b      	str	r3, [r7, #20]

  if (NULL != addr)
 8014e36:	68bb      	ldr	r3, [r7, #8]
 8014e38:	2b00      	cmp	r3, #0
 8014e3a:	d00d      	beq.n	8014e58 <mx_wifi_bind+0x34>
  {
    if ((addrlen == sizeof(struct mx_sockaddr_in6)) || (addrlen == sizeof(struct mx_sockaddr_in /*mx_sockaddr*/)))
 8014e3c:	687b      	ldr	r3, [r7, #4]
 8014e3e:	2b1c      	cmp	r3, #28
 8014e40:	d002      	beq.n	8014e48 <mx_wifi_bind+0x24>
 8014e42:	687b      	ldr	r3, [r7, #4]
 8014e44:	2b10      	cmp	r3, #16
 8014e46:	d107      	bne.n	8014e58 <mx_wifi_bind+0x34>
    {
      ret = MX_WIFI_Socket_bind(wifi_obj_get(), sock, (const struct mx_sockaddr *)addr, (int32_t)addrlen);
 8014e48:	f7f5 fb6e 	bl	800a528 <wifi_obj_get>
 8014e4c:	687b      	ldr	r3, [r7, #4]
 8014e4e:	68ba      	ldr	r2, [r7, #8]
 8014e50:	68f9      	ldr	r1, [r7, #12]
 8014e52:	f7f3 ffa9 	bl	8008da8 <MX_WIFI_Socket_bind>
 8014e56:	6178      	str	r0, [r7, #20]
    }
  }

  return ret;
 8014e58:	697b      	ldr	r3, [r7, #20]
}
 8014e5a:	4618      	mov	r0, r3
 8014e5c:	3718      	adds	r7, #24
 8014e5e:	46bd      	mov	sp, r7
 8014e60:	bd80      	pop	{r7, pc}

08014e62 <mx_wifi_listen>:
  * @param  sock             socket value
  * @param  backlog          max socket to accept
  * @return int32_t          0 if success, if failed return error code(<0)
  */
static int32_t mx_wifi_listen(int32_t sock, int32_t backlog)
{
 8014e62:	b580      	push	{r7, lr}
 8014e64:	b084      	sub	sp, #16
 8014e66:	af00      	add	r7, sp, #0
 8014e68:	6078      	str	r0, [r7, #4]
 8014e6a:	6039      	str	r1, [r7, #0]
  const int32_t ret = MX_WIFI_Socket_listen(wifi_obj_get(), sock, backlog);
 8014e6c:	f7f5 fb5c 	bl	800a528 <wifi_obj_get>
 8014e70:	4603      	mov	r3, r0
 8014e72:	683a      	ldr	r2, [r7, #0]
 8014e74:	6879      	ldr	r1, [r7, #4]
 8014e76:	4618      	mov	r0, r3
 8014e78:	f7f4 f821 	bl	8008ebe <MX_WIFI_Socket_listen>
 8014e7c:	60f8      	str	r0, [r7, #12]

  return ret;
 8014e7e:	68fb      	ldr	r3, [r7, #12]
}
 8014e80:	4618      	mov	r0, r3
 8014e82:	3710      	adds	r7, #16
 8014e84:	46bd      	mov	sp, r7
 8014e86:	bd80      	pop	{r7, pc}

08014e88 <mx_wifi_accept>:
  * @param  addr             address buffer to accept new socket
  * @param  addrlen          address buffer length
  * @return int32_t          accepted socket fd, if failed return error code(<0)
  */
static int32_t mx_wifi_accept(int32_t sock, net_sockaddr_t *addr, uint32_t *addrlen)
{
 8014e88:	b580      	push	{r7, lr}
 8014e8a:	b086      	sub	sp, #24
 8014e8c:	af00      	add	r7, sp, #0
 8014e8e:	60f8      	str	r0, [r7, #12]
 8014e90:	60b9      	str	r1, [r7, #8]
 8014e92:	607a      	str	r2, [r7, #4]
  const int32_t ret = MX_WIFI_Socket_accept(wifi_obj_get(), sock, (struct mx_sockaddr *)addr, addrlen);
 8014e94:	f7f5 fb48 	bl	800a528 <wifi_obj_get>
 8014e98:	687b      	ldr	r3, [r7, #4]
 8014e9a:	68ba      	ldr	r2, [r7, #8]
 8014e9c:	68f9      	ldr	r1, [r7, #12]
 8014e9e:	f7f4 f852 	bl	8008f46 <MX_WIFI_Socket_accept>
 8014ea2:	6178      	str	r0, [r7, #20]

  return ret;
 8014ea4:	697b      	ldr	r3, [r7, #20]
}
 8014ea6:	4618      	mov	r0, r3
 8014ea8:	3718      	adds	r7, #24
 8014eaa:	46bd      	mov	sp, r7
 8014eac:	bd80      	pop	{r7, pc}

08014eae <mx_wifi_connect>:
  * @param  addr             address to connect
  * @param  addrlen          address length
  * @return int32_t          0 if success, if failed return error code (<0)
  */
static int32_t mx_wifi_connect(int32_t sock, const net_sockaddr_t *addr, uint32_t addrlen)
{
 8014eae:	b580      	push	{r7, lr}
 8014eb0:	b086      	sub	sp, #24
 8014eb2:	af00      	add	r7, sp, #0
 8014eb4:	60f8      	str	r0, [r7, #12]
 8014eb6:	60b9      	str	r1, [r7, #8]
 8014eb8:	607a      	str	r2, [r7, #4]
  const int32_t ret = MX_WIFI_Socket_connect(wifi_obj_get(), sock, (const struct mx_sockaddr *)addr, (int32_t)addrlen);
 8014eba:	f7f5 fb35 	bl	800a528 <wifi_obj_get>
 8014ebe:	687b      	ldr	r3, [r7, #4]
 8014ec0:	68ba      	ldr	r2, [r7, #8]
 8014ec2:	68f9      	ldr	r1, [r7, #12]
 8014ec4:	f7f4 f8c7 	bl	8009056 <MX_WIFI_Socket_connect>
 8014ec8:	6178      	str	r0, [r7, #20]

  return ret;
 8014eca:	697b      	ldr	r3, [r7, #20]
}
 8014ecc:	4618      	mov	r0, r3
 8014ece:	3718      	adds	r7, #24
 8014ed0:	46bd      	mov	sp, r7
 8014ed2:	bd80      	pop	{r7, pc}

08014ed4 <mx_wifi_shutdown>:
  * @param  sock             socket value
  * @param  mode             shutdown mode (0: stop receiving, 1: stop sending, 2: stop send and receive)
  * @return int32_t          0 if success, if failed return error code (<0)
  */
static int32_t mx_wifi_shutdown(int32_t sock, int32_t mode)
{
 8014ed4:	b580      	push	{r7, lr}
 8014ed6:	b084      	sub	sp, #16
 8014ed8:	af00      	add	r7, sp, #0
 8014eda:	6078      	str	r0, [r7, #4]
 8014edc:	6039      	str	r1, [r7, #0]
  const int32_t ret = MX_WIFI_Socket_shutdown(wifi_obj_get(), sock, mode);
 8014ede:	f7f5 fb23 	bl	800a528 <wifi_obj_get>
 8014ee2:	4603      	mov	r3, r0
 8014ee4:	683a      	ldr	r2, [r7, #0]
 8014ee6:	6879      	ldr	r1, [r7, #4]
 8014ee8:	4618      	mov	r0, r3
 8014eea:	f7f4 f93c 	bl	8009166 <MX_WIFI_Socket_shutdown>
 8014eee:	60f8      	str	r0, [r7, #12]

  return ret;
 8014ef0:	68fb      	ldr	r3, [r7, #12]
}
 8014ef2:	4618      	mov	r0, r3
 8014ef4:	3710      	adds	r7, #16
 8014ef6:	46bd      	mov	sp, r7
 8014ef8:	bd80      	pop	{r7, pc}

08014efa <mx_wifi_close>:
  * @param  sock             socket value
  * @param  isaclone         not supported, just compliant for ST connect lib
  * @return int32_t          0 if success, if failed return error code (<0)
  */
static int32_t mx_wifi_close(int32_t sock, bool isaclone)
{
 8014efa:	b580      	push	{r7, lr}
 8014efc:	b084      	sub	sp, #16
 8014efe:	af00      	add	r7, sp, #0
 8014f00:	6078      	str	r0, [r7, #4]
 8014f02:	460b      	mov	r3, r1
 8014f04:	70fb      	strb	r3, [r7, #3]
  const int32_t ret = MX_WIFI_Socket_close(wifi_obj_get(), sock);
 8014f06:	f7f5 fb0f 	bl	800a528 <wifi_obj_get>
 8014f0a:	4603      	mov	r3, r0
 8014f0c:	6879      	ldr	r1, [r7, #4]
 8014f0e:	4618      	mov	r0, r3
 8014f10:	f7f4 f969 	bl	80091e6 <MX_WIFI_Socket_close>
 8014f14:	60f8      	str	r0, [r7, #12]

  (void)isaclone;

  return ret;
 8014f16:	68fb      	ldr	r3, [r7, #12]
}
 8014f18:	4618      	mov	r0, r3
 8014f1a:	3710      	adds	r7, #16
 8014f1c:	46bd      	mov	sp, r7
 8014f1e:	bd80      	pop	{r7, pc}

08014f20 <mx_wifi_send>:
  * @param  len              data length
  * @param  flags            socket flag
  * @return int32_t          bytes sent, if failed return error code(<0)
  */
static int32_t mx_wifi_send(int32_t sock, const uint8_t *buf, int32_t len, int32_t flags)
{
 8014f20:	b580      	push	{r7, lr}
 8014f22:	b088      	sub	sp, #32
 8014f24:	af02      	add	r7, sp, #8
 8014f26:	60f8      	str	r0, [r7, #12]
 8014f28:	60b9      	str	r1, [r7, #8]
 8014f2a:	607a      	str	r2, [r7, #4]
 8014f2c:	603b      	str	r3, [r7, #0]
  const int32_t ret = MX_WIFI_Socket_send(wifi_obj_get(), sock, buf, len, flags);
 8014f2e:	f7f5 fafb 	bl	800a528 <wifi_obj_get>
 8014f32:	683b      	ldr	r3, [r7, #0]
 8014f34:	9300      	str	r3, [sp, #0]
 8014f36:	687b      	ldr	r3, [r7, #4]
 8014f38:	68ba      	ldr	r2, [r7, #8]
 8014f3a:	68f9      	ldr	r1, [r7, #12]
 8014f3c:	f7f4 f98b 	bl	8009256 <MX_WIFI_Socket_send>
 8014f40:	6178      	str	r0, [r7, #20]

  return ret;
 8014f42:	697b      	ldr	r3, [r7, #20]
}
 8014f44:	4618      	mov	r0, r3
 8014f46:	3718      	adds	r7, #24
 8014f48:	46bd      	mov	sp, r7
 8014f4a:	bd80      	pop	{r7, pc}

08014f4c <mx_wifi_recv>:
  * @param  len              buffer size
  * @param  flags            socket flag
  * @return int32_t          bytes received, if failed return error code(<0)
  */
static int32_t mx_wifi_recv(int32_t sock, uint8_t *buf, int32_t len, int32_t flags)
{
 8014f4c:	b580      	push	{r7, lr}
 8014f4e:	b088      	sub	sp, #32
 8014f50:	af02      	add	r7, sp, #8
 8014f52:	60f8      	str	r0, [r7, #12]
 8014f54:	60b9      	str	r1, [r7, #8]
 8014f56:	607a      	str	r2, [r7, #4]
 8014f58:	603b      	str	r3, [r7, #0]
  int32_t ret = MX_WIFI_Socket_recv(wifi_obj_get(), sock, buf, len, flags);
 8014f5a:	f7f5 fae5 	bl	800a528 <wifi_obj_get>
 8014f5e:	683b      	ldr	r3, [r7, #0]
 8014f60:	9300      	str	r3, [sp, #0]
 8014f62:	687b      	ldr	r3, [r7, #4]
 8014f64:	68ba      	ldr	r2, [r7, #8]
 8014f66:	68f9      	ldr	r1, [r7, #12]
 8014f68:	f7f4 fa92 	bl	8009490 <MX_WIFI_Socket_recv>
 8014f6c:	6178      	str	r0, [r7, #20]

  if (MX_WIFI_STATUS_OK != ret)
 8014f6e:	697b      	ldr	r3, [r7, #20]
 8014f70:	2b00      	cmp	r3, #0
 8014f72:	d006      	beq.n	8014f82 <mx_wifi_recv+0x36>
  {
    if (MX_WIFI_STATUS_TIMEOUT == ret)
 8014f74:	697b      	ldr	r3, [r7, #20]
 8014f76:	f113 0f02 	cmn.w	r3, #2
 8014f7a:	d102      	bne.n	8014f82 <mx_wifi_recv+0x36>
    {
      ret = NET_TIMEOUT;
 8014f7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014f80:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8014f82:	697b      	ldr	r3, [r7, #20]
}
 8014f84:	4618      	mov	r0, r3
 8014f86:	3718      	adds	r7, #24
 8014f88:	46bd      	mov	sp, r7
 8014f8a:	bd80      	pop	{r7, pc}

08014f8c <mx_wifi_sendto>:
  * @param  to_len           size of address to send to
  * @return int32_t          bytes sent. If failed return error code(<0)
  */
static int32_t mx_wifi_sendto(int32_t sock, const uint8_t *buf, int32_t len, int32_t flags,
                              net_sockaddr_t *to, uint32_t to_len)
{
 8014f8c:	b580      	push	{r7, lr}
 8014f8e:	b08a      	sub	sp, #40	; 0x28
 8014f90:	af04      	add	r7, sp, #16
 8014f92:	60f8      	str	r0, [r7, #12]
 8014f94:	60b9      	str	r1, [r7, #8]
 8014f96:	607a      	str	r2, [r7, #4]
 8014f98:	603b      	str	r3, [r7, #0]
  int32_t ret = MX_WIFI_STATUS_ERROR;
 8014f9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014f9e:	617b      	str	r3, [r7, #20]

  if (NULL != to)
 8014fa0:	6a3b      	ldr	r3, [r7, #32]
 8014fa2:	2b00      	cmp	r3, #0
 8014fa4:	d013      	beq.n	8014fce <mx_wifi_sendto+0x42>
  {
    if ((to_len == sizeof(struct mx_sockaddr_in6)) || (to_len == sizeof(struct mx_sockaddr_in /*mx_sockaddr*/)))
 8014fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fa8:	2b1c      	cmp	r3, #28
 8014faa:	d002      	beq.n	8014fb2 <mx_wifi_sendto+0x26>
 8014fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fae:	2b10      	cmp	r3, #16
 8014fb0:	d10d      	bne.n	8014fce <mx_wifi_sendto+0x42>
    {
      ret = MX_WIFI_Socket_sendto(wifi_obj_get(), sock, buf, len, flags, (struct mx_sockaddr *)to, (int32_t)to_len);
 8014fb2:	f7f5 fab9 	bl	800a528 <wifi_obj_get>
 8014fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fb8:	9302      	str	r3, [sp, #8]
 8014fba:	6a3b      	ldr	r3, [r7, #32]
 8014fbc:	9301      	str	r3, [sp, #4]
 8014fbe:	683b      	ldr	r3, [r7, #0]
 8014fc0:	9300      	str	r3, [sp, #0]
 8014fc2:	687b      	ldr	r3, [r7, #4]
 8014fc4:	68ba      	ldr	r2, [r7, #8]
 8014fc6:	68f9      	ldr	r1, [r7, #12]
 8014fc8:	f7f4 f9a8 	bl	800931c <MX_WIFI_Socket_sendto>
 8014fcc:	6178      	str	r0, [r7, #20]
    }
  }

  return ret;
 8014fce:	697b      	ldr	r3, [r7, #20]
}
 8014fd0:	4618      	mov	r0, r3
 8014fd2:	3718      	adds	r7, #24
 8014fd4:	46bd      	mov	sp, r7
 8014fd6:	bd80      	pop	{r7, pc}

08014fd8 <mx_wifi_recvfrom>:
  * @param  from_len         size of address
  * @return int32_t          bytes received, if failed, return error code(<0)
  */
static int32_t mx_wifi_recvfrom(int32_t sock, uint8_t *buf, int32_t len, int32_t flags,
                                net_sockaddr_t *from, uint32_t *from_len)
{
 8014fd8:	b580      	push	{r7, lr}
 8014fda:	b08a      	sub	sp, #40	; 0x28
 8014fdc:	af04      	add	r7, sp, #16
 8014fde:	60f8      	str	r0, [r7, #12]
 8014fe0:	60b9      	str	r1, [r7, #8]
 8014fe2:	607a      	str	r2, [r7, #4]
 8014fe4:	603b      	str	r3, [r7, #0]
  int32_t ret = MX_WIFI_STATUS_ERROR;
 8014fe6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014fea:	617b      	str	r3, [r7, #20]

  if ((NULL != from) && (NULL != from_len))
 8014fec:	6a3b      	ldr	r3, [r7, #32]
 8014fee:	2b00      	cmp	r3, #0
 8014ff0:	d018      	beq.n	8015024 <mx_wifi_recvfrom+0x4c>
 8014ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ff4:	2b00      	cmp	r3, #0
 8014ff6:	d015      	beq.n	8015024 <mx_wifi_recvfrom+0x4c>
  {
    if ((*from_len == sizeof(struct mx_sockaddr_in6)) || (*from_len == sizeof(struct mx_sockaddr_in /*mx_sockaddr*/)))
 8014ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ffa:	681b      	ldr	r3, [r3, #0]
 8014ffc:	2b1c      	cmp	r3, #28
 8014ffe:	d003      	beq.n	8015008 <mx_wifi_recvfrom+0x30>
 8015000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015002:	681b      	ldr	r3, [r3, #0]
 8015004:	2b10      	cmp	r3, #16
 8015006:	d10d      	bne.n	8015024 <mx_wifi_recvfrom+0x4c>
    {
      ret = MX_WIFI_Socket_recvfrom(wifi_obj_get(), sock, buf, len, flags, (struct mx_sockaddr *)from, from_len);
 8015008:	f7f5 fa8e 	bl	800a528 <wifi_obj_get>
 801500c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801500e:	9302      	str	r3, [sp, #8]
 8015010:	6a3b      	ldr	r3, [r7, #32]
 8015012:	9301      	str	r3, [sp, #4]
 8015014:	683b      	ldr	r3, [r7, #0]
 8015016:	9300      	str	r3, [sp, #0]
 8015018:	687b      	ldr	r3, [r7, #4]
 801501a:	68ba      	ldr	r2, [r7, #8]
 801501c:	68f9      	ldr	r1, [r7, #12]
 801501e:	f7f4 fab0 	bl	8009582 <MX_WIFI_Socket_recvfrom>
 8015022:	6178      	str	r0, [r7, #20]
    }
  }

  return ret;
 8015024:	697b      	ldr	r3, [r7, #20]
}
 8015026:	4618      	mov	r0, r3
 8015028:	3718      	adds	r7, #24
 801502a:	46bd      	mov	sp, r7
 801502c:	bd80      	pop	{r7, pc}

0801502e <mx_wifi_gethostbyname>:
  * @param  addr             address of the host
  * @param  name             host name
  * @return int32_t          0 if success, otherwise failed
  */
static int32_t mx_wifi_gethostbyname(net_if_handle_t *pnetif, net_sockaddr_t *addr, char_t *name)
{
 801502e:	b580      	push	{r7, lr}
 8015030:	b086      	sub	sp, #24
 8015032:	af00      	add	r7, sp, #0
 8015034:	60f8      	str	r0, [r7, #12]
 8015036:	60b9      	str	r1, [r7, #8]
 8015038:	607a      	str	r2, [r7, #4]
  }
  else
#endif /* NET_USE_IPV6 */
  {
    /* IPv4 */
    ret = MX_WIFI_Socket_gethostbyname(wifi_obj_get(), (struct mx_sockaddr *)addr, (mx_char_t *)name);
 801503a:	f7f5 fa75 	bl	800a528 <wifi_obj_get>
 801503e:	4603      	mov	r3, r0
 8015040:	687a      	ldr	r2, [r7, #4]
 8015042:	68b9      	ldr	r1, [r7, #8]
 8015044:	4618      	mov	r0, r3
 8015046:	f7f4 fb75 	bl	8009734 <MX_WIFI_Socket_gethostbyname>
 801504a:	6178      	str	r0, [r7, #20]
  }

  return ret;
 801504c:	697b      	ldr	r3, [r7, #20]
}
 801504e:	4618      	mov	r0, r3
 8015050:	3718      	adds	r7, #24
 8015052:	46bd      	mov	sp, r7
 8015054:	bd80      	pop	{r7, pc}

08015056 <mx_wifi_ping>:
  * @param  response         response array, size is count
  * @return int32_t          0 if success, otherwise failed
  */
static int32_t mx_wifi_ping(net_if_handle_t *pnetif, net_sockaddr_t *addr, int32_t count, int32_t delay,
                            int32_t response[])
{
 8015056:	b590      	push	{r4, r7, lr}
 8015058:	b08b      	sub	sp, #44	; 0x2c
 801505a:	af02      	add	r7, sp, #8
 801505c:	60f8      	str	r0, [r7, #12]
 801505e:	60b9      	str	r1, [r7, #8]
 8015060:	607a      	str	r2, [r7, #4]
 8015062:	603b      	str	r3, [r7, #0]
  int32_t ret = -1;
 8015064:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015068:	61fb      	str	r3, [r7, #28]
  net_ip_addr_t ip_addr = {0};
 801506a:	2300      	movs	r3, #0
 801506c:	617b      	str	r3, [r7, #20]
    ip_addr.type = (u8_t)IPADDR_TYPE_V6;
  }
  else
#endif /* NET_USE_IPV6 */
  {
    const net_sockaddr_in_t * const p_s_addr_in = (net_sockaddr_in_t *)addr;
 801506e:	68bb      	ldr	r3, [r7, #8]
 8015070:	61bb      	str	r3, [r7, #24]

#ifdef NET_USE_LWIP_DEFINITIONS
    ip_addr.u_addr.ip4.addr = p_s_addr_in->sin_addr.s_addr;
#else
    ip_addr.addr = p_s_addr_in->sin_addr.s_addr;
 8015072:	69bb      	ldr	r3, [r7, #24]
 8015074:	685b      	ldr	r3, [r3, #4]
 8015076:	617b      	str	r3, [r7, #20]
#endif /* NET_USE_LWIP_DEFINITIONS */
  }

  if (addr->sa_family == NET_AF_INET6)
 8015078:	68bb      	ldr	r3, [r7, #8]
 801507a:	785b      	ldrb	r3, [r3, #1]
 801507c:	2b0a      	cmp	r3, #10
 801507e:	d111      	bne.n	80150a4 <mx_wifi_ping+0x4e>
  {
    ret = MX_WIFI_Socket_ping6(wifi_obj_get(), (char_t *)NET_NTOA(&ip_addr), count, delay, response);
 8015080:	f7f5 fa52 	bl	800a528 <wifi_obj_get>
 8015084:	4604      	mov	r4, r0
 8015086:	f107 0314 	add.w	r3, r7, #20
 801508a:	4618      	mov	r0, r3
 801508c:	f7fd fcd6 	bl	8012a3c <net_ntoa>
 8015090:	4601      	mov	r1, r0
 8015092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015094:	9300      	str	r3, [sp, #0]
 8015096:	683b      	ldr	r3, [r7, #0]
 8015098:	687a      	ldr	r2, [r7, #4]
 801509a:	4620      	mov	r0, r4
 801509c:	f7f4 fcb1 	bl	8009a02 <MX_WIFI_Socket_ping6>
 80150a0:	61f8      	str	r0, [r7, #28]
 80150a2:	e010      	b.n	80150c6 <mx_wifi_ping+0x70>
  }
  else
  {
    ret = MX_WIFI_Socket_ping(wifi_obj_get(), (char_t *)NET_NTOA(&ip_addr), count, delay, response);
 80150a4:	f7f5 fa40 	bl	800a528 <wifi_obj_get>
 80150a8:	4604      	mov	r4, r0
 80150aa:	f107 0314 	add.w	r3, r7, #20
 80150ae:	4618      	mov	r0, r3
 80150b0:	f7fd fcc4 	bl	8012a3c <net_ntoa>
 80150b4:	4601      	mov	r1, r0
 80150b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150b8:	9300      	str	r3, [sp, #0]
 80150ba:	683b      	ldr	r3, [r7, #0]
 80150bc:	687a      	ldr	r2, [r7, #4]
 80150be:	4620      	mov	r0, r4
 80150c0:	f7f4 fbe8 	bl	8009894 <MX_WIFI_Socket_ping>
 80150c4:	61f8      	str	r0, [r7, #28]
  }

  return ret;
 80150c6:	69fb      	ldr	r3, [r7, #28]
}
 80150c8:	4618      	mov	r0, r3
 80150ca:	3724      	adds	r7, #36	; 0x24
 80150cc:	46bd      	mov	sp, r7
 80150ce:	bd90      	pop	{r4, r7, pc}

080150d0 <mx_wifi_getsockname>:
  * @param  name             socket name
  * @param  namelen          socket name length
  * @return int32_t          0 if success, otherwise failed
  */
static int32_t mx_wifi_getsockname(int32_t sock, net_sockaddr_t *name, uint32_t *namelen)
{
 80150d0:	b580      	push	{r7, lr}
 80150d2:	b086      	sub	sp, #24
 80150d4:	af00      	add	r7, sp, #0
 80150d6:	60f8      	str	r0, [r7, #12]
 80150d8:	60b9      	str	r1, [r7, #8]
 80150da:	607a      	str	r2, [r7, #4]
  const int32_t ret = MX_WIFI_Socket_getsockname(wifi_obj_get(), sock, (struct mx_sockaddr *) name, namelen);
 80150dc:	f7f5 fa24 	bl	800a528 <wifi_obj_get>
 80150e0:	687b      	ldr	r3, [r7, #4]
 80150e2:	68ba      	ldr	r2, [r7, #8]
 80150e4:	68f9      	ldr	r1, [r7, #12]
 80150e6:	f7f4 fda2 	bl	8009c2e <MX_WIFI_Socket_getsockname>
 80150ea:	6178      	str	r0, [r7, #20]

  return ret;
 80150ec:	697b      	ldr	r3, [r7, #20]
}
 80150ee:	4618      	mov	r0, r3
 80150f0:	3718      	adds	r7, #24
 80150f2:	46bd      	mov	sp, r7
 80150f4:	bd80      	pop	{r7, pc}

080150f6 <mx_wifi_getpeername>:
  * @param  name             socket name
  * @param  namelen          socket name length
  * @return int32_t          0 if success, otherwise failed
  */
static int32_t mx_wifi_getpeername(int32_t sock, net_sockaddr_t *name, uint32_t *namelen)
{
 80150f6:	b580      	push	{r7, lr}
 80150f8:	b086      	sub	sp, #24
 80150fa:	af00      	add	r7, sp, #0
 80150fc:	60f8      	str	r0, [r7, #12]
 80150fe:	60b9      	str	r1, [r7, #8]
 8015100:	607a      	str	r2, [r7, #4]
  const int32_t ret = MX_WIFI_Socket_getpeername(wifi_obj_get(), sock, (struct mx_sockaddr *) name, namelen);
 8015102:	f7f5 fa11 	bl	800a528 <wifi_obj_get>
 8015106:	687b      	ldr	r3, [r7, #4]
 8015108:	68ba      	ldr	r2, [r7, #8]
 801510a:	68f9      	ldr	r1, [r7, #12]
 801510c:	f7f4 fd30 	bl	8009b70 <MX_WIFI_Socket_getpeername>
 8015110:	6178      	str	r0, [r7, #20]

  return ret;
 8015112:	697b      	ldr	r3, [r7, #20]
}
 8015114:	4618      	mov	r0, r3
 8015116:	3718      	adds	r7, #24
 8015118:	46bd      	mov	sp, r7
 801511a:	bd80      	pop	{r7, pc}

0801511c <calloc>:
 801511c:	4b02      	ldr	r3, [pc, #8]	; (8015128 <calloc+0xc>)
 801511e:	460a      	mov	r2, r1
 8015120:	4601      	mov	r1, r0
 8015122:	6818      	ldr	r0, [r3, #0]
 8015124:	f000 b802 	b.w	801512c <_calloc_r>
 8015128:	200002c8 	.word	0x200002c8

0801512c <_calloc_r>:
 801512c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801512e:	fba1 2402 	umull	r2, r4, r1, r2
 8015132:	b94c      	cbnz	r4, 8015148 <_calloc_r+0x1c>
 8015134:	4611      	mov	r1, r2
 8015136:	9201      	str	r2, [sp, #4]
 8015138:	f000 fb14 	bl	8015764 <_malloc_r>
 801513c:	9a01      	ldr	r2, [sp, #4]
 801513e:	4605      	mov	r5, r0
 8015140:	b930      	cbnz	r0, 8015150 <_calloc_r+0x24>
 8015142:	4628      	mov	r0, r5
 8015144:	b003      	add	sp, #12
 8015146:	bd30      	pop	{r4, r5, pc}
 8015148:	220c      	movs	r2, #12
 801514a:	2500      	movs	r5, #0
 801514c:	6002      	str	r2, [r0, #0]
 801514e:	e7f8      	b.n	8015142 <_calloc_r+0x16>
 8015150:	4621      	mov	r1, r4
 8015152:	f002 f943 	bl	80173dc <memset>
 8015156:	e7f4      	b.n	8015142 <_calloc_r+0x16>

08015158 <__cvt>:
 8015158:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801515c:	ec55 4b10 	vmov	r4, r5, d0
 8015160:	2d00      	cmp	r5, #0
 8015162:	460e      	mov	r6, r1
 8015164:	4619      	mov	r1, r3
 8015166:	462b      	mov	r3, r5
 8015168:	bfb4      	ite	lt
 801516a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801516e:	2300      	movge	r3, #0
 8015170:	4691      	mov	r9, r2
 8015172:	bfbf      	itttt	lt
 8015174:	4622      	movlt	r2, r4
 8015176:	461d      	movlt	r5, r3
 8015178:	232d      	movlt	r3, #45	; 0x2d
 801517a:	4614      	movlt	r4, r2
 801517c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8015180:	700b      	strb	r3, [r1, #0]
 8015182:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015184:	f023 0820 	bic.w	r8, r3, #32
 8015188:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801518c:	d005      	beq.n	801519a <__cvt+0x42>
 801518e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8015192:	d100      	bne.n	8015196 <__cvt+0x3e>
 8015194:	3601      	adds	r6, #1
 8015196:	2102      	movs	r1, #2
 8015198:	e000      	b.n	801519c <__cvt+0x44>
 801519a:	2103      	movs	r1, #3
 801519c:	ab03      	add	r3, sp, #12
 801519e:	4632      	mov	r2, r6
 80151a0:	9301      	str	r3, [sp, #4]
 80151a2:	ab02      	add	r3, sp, #8
 80151a4:	ec45 4b10 	vmov	d0, r4, r5
 80151a8:	9300      	str	r3, [sp, #0]
 80151aa:	4653      	mov	r3, sl
 80151ac:	f002 fa8c 	bl	80176c8 <_dtoa_r>
 80151b0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80151b4:	4607      	mov	r7, r0
 80151b6:	d102      	bne.n	80151be <__cvt+0x66>
 80151b8:	f019 0f01 	tst.w	r9, #1
 80151bc:	d022      	beq.n	8015204 <__cvt+0xac>
 80151be:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80151c2:	eb07 0906 	add.w	r9, r7, r6
 80151c6:	d110      	bne.n	80151ea <__cvt+0x92>
 80151c8:	783b      	ldrb	r3, [r7, #0]
 80151ca:	2b30      	cmp	r3, #48	; 0x30
 80151cc:	d10a      	bne.n	80151e4 <__cvt+0x8c>
 80151ce:	2200      	movs	r2, #0
 80151d0:	2300      	movs	r3, #0
 80151d2:	4620      	mov	r0, r4
 80151d4:	4629      	mov	r1, r5
 80151d6:	f7eb fc85 	bl	8000ae4 <__aeabi_dcmpeq>
 80151da:	b918      	cbnz	r0, 80151e4 <__cvt+0x8c>
 80151dc:	f1c6 0601 	rsb	r6, r6, #1
 80151e0:	f8ca 6000 	str.w	r6, [sl]
 80151e4:	f8da 3000 	ldr.w	r3, [sl]
 80151e8:	4499      	add	r9, r3
 80151ea:	2200      	movs	r2, #0
 80151ec:	2300      	movs	r3, #0
 80151ee:	4620      	mov	r0, r4
 80151f0:	4629      	mov	r1, r5
 80151f2:	f7eb fc77 	bl	8000ae4 <__aeabi_dcmpeq>
 80151f6:	b108      	cbz	r0, 80151fc <__cvt+0xa4>
 80151f8:	f8cd 900c 	str.w	r9, [sp, #12]
 80151fc:	2230      	movs	r2, #48	; 0x30
 80151fe:	9b03      	ldr	r3, [sp, #12]
 8015200:	454b      	cmp	r3, r9
 8015202:	d307      	bcc.n	8015214 <__cvt+0xbc>
 8015204:	9b03      	ldr	r3, [sp, #12]
 8015206:	4638      	mov	r0, r7
 8015208:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801520a:	1bdb      	subs	r3, r3, r7
 801520c:	6013      	str	r3, [r2, #0]
 801520e:	b004      	add	sp, #16
 8015210:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015214:	1c59      	adds	r1, r3, #1
 8015216:	9103      	str	r1, [sp, #12]
 8015218:	701a      	strb	r2, [r3, #0]
 801521a:	e7f0      	b.n	80151fe <__cvt+0xa6>

0801521c <__exponent>:
 801521c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801521e:	2900      	cmp	r1, #0
 8015220:	4603      	mov	r3, r0
 8015222:	bfb8      	it	lt
 8015224:	4249      	neglt	r1, r1
 8015226:	f803 2b02 	strb.w	r2, [r3], #2
 801522a:	bfb4      	ite	lt
 801522c:	222d      	movlt	r2, #45	; 0x2d
 801522e:	222b      	movge	r2, #43	; 0x2b
 8015230:	2909      	cmp	r1, #9
 8015232:	7042      	strb	r2, [r0, #1]
 8015234:	dd29      	ble.n	801528a <__exponent+0x6e>
 8015236:	f10d 0207 	add.w	r2, sp, #7
 801523a:	260a      	movs	r6, #10
 801523c:	4617      	mov	r7, r2
 801523e:	4694      	mov	ip, r2
 8015240:	3a01      	subs	r2, #1
 8015242:	fb91 f5f6 	sdiv	r5, r1, r6
 8015246:	fb06 1415 	mls	r4, r6, r5, r1
 801524a:	3430      	adds	r4, #48	; 0x30
 801524c:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8015250:	460c      	mov	r4, r1
 8015252:	4629      	mov	r1, r5
 8015254:	2c63      	cmp	r4, #99	; 0x63
 8015256:	dcf2      	bgt.n	801523e <__exponent+0x22>
 8015258:	3130      	adds	r1, #48	; 0x30
 801525a:	f1ac 0402 	sub.w	r4, ip, #2
 801525e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8015262:	1c41      	adds	r1, r0, #1
 8015264:	4622      	mov	r2, r4
 8015266:	42ba      	cmp	r2, r7
 8015268:	d30a      	bcc.n	8015280 <__exponent+0x64>
 801526a:	f10d 0209 	add.w	r2, sp, #9
 801526e:	eba2 020c 	sub.w	r2, r2, ip
 8015272:	42bc      	cmp	r4, r7
 8015274:	bf88      	it	hi
 8015276:	2200      	movhi	r2, #0
 8015278:	4413      	add	r3, r2
 801527a:	1a18      	subs	r0, r3, r0
 801527c:	b003      	add	sp, #12
 801527e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015280:	f812 5b01 	ldrb.w	r5, [r2], #1
 8015284:	f801 5f01 	strb.w	r5, [r1, #1]!
 8015288:	e7ed      	b.n	8015266 <__exponent+0x4a>
 801528a:	2330      	movs	r3, #48	; 0x30
 801528c:	3130      	adds	r1, #48	; 0x30
 801528e:	7083      	strb	r3, [r0, #2]
 8015290:	1d03      	adds	r3, r0, #4
 8015292:	70c1      	strb	r1, [r0, #3]
 8015294:	e7f1      	b.n	801527a <__exponent+0x5e>
	...

08015298 <_printf_float>:
 8015298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801529c:	ed2d 8b02 	vpush	{d8}
 80152a0:	b08d      	sub	sp, #52	; 0x34
 80152a2:	460c      	mov	r4, r1
 80152a4:	4616      	mov	r6, r2
 80152a6:	461f      	mov	r7, r3
 80152a8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80152ac:	4605      	mov	r5, r0
 80152ae:	f002 f89d 	bl	80173ec <_localeconv_r>
 80152b2:	f8d0 a000 	ldr.w	sl, [r0]
 80152b6:	4650      	mov	r0, sl
 80152b8:	f7ea ffde 	bl	8000278 <strlen>
 80152bc:	2300      	movs	r3, #0
 80152be:	f894 b018 	ldrb.w	fp, [r4, #24]
 80152c2:	ee08 0a10 	vmov	s16, r0
 80152c6:	930a      	str	r3, [sp, #40]	; 0x28
 80152c8:	6823      	ldr	r3, [r4, #0]
 80152ca:	9305      	str	r3, [sp, #20]
 80152cc:	f8d8 3000 	ldr.w	r3, [r8]
 80152d0:	3307      	adds	r3, #7
 80152d2:	f023 0307 	bic.w	r3, r3, #7
 80152d6:	f103 0208 	add.w	r2, r3, #8
 80152da:	f8c8 2000 	str.w	r2, [r8]
 80152de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80152e2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80152e6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80152ea:	f8cd 8018 	str.w	r8, [sp, #24]
 80152ee:	9307      	str	r3, [sp, #28]
 80152f0:	4b9f      	ldr	r3, [pc, #636]	; (8015570 <_printf_float+0x2d8>)
 80152f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80152f6:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80152fa:	f7eb fc25 	bl	8000b48 <__aeabi_dcmpun>
 80152fe:	bb88      	cbnz	r0, 8015364 <_printf_float+0xcc>
 8015300:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015304:	4b9a      	ldr	r3, [pc, #616]	; (8015570 <_printf_float+0x2d8>)
 8015306:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801530a:	f7eb fbff 	bl	8000b0c <__aeabi_dcmple>
 801530e:	bb48      	cbnz	r0, 8015364 <_printf_float+0xcc>
 8015310:	2200      	movs	r2, #0
 8015312:	2300      	movs	r3, #0
 8015314:	4640      	mov	r0, r8
 8015316:	4649      	mov	r1, r9
 8015318:	f7eb fbee 	bl	8000af8 <__aeabi_dcmplt>
 801531c:	b110      	cbz	r0, 8015324 <_printf_float+0x8c>
 801531e:	232d      	movs	r3, #45	; 0x2d
 8015320:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015324:	4a93      	ldr	r2, [pc, #588]	; (8015574 <_printf_float+0x2dc>)
 8015326:	4b94      	ldr	r3, [pc, #592]	; (8015578 <_printf_float+0x2e0>)
 8015328:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801532c:	bf94      	ite	ls
 801532e:	4690      	movls	r8, r2
 8015330:	4698      	movhi	r8, r3
 8015332:	2303      	movs	r3, #3
 8015334:	f04f 0900 	mov.w	r9, #0
 8015338:	6123      	str	r3, [r4, #16]
 801533a:	9b05      	ldr	r3, [sp, #20]
 801533c:	f023 0304 	bic.w	r3, r3, #4
 8015340:	6023      	str	r3, [r4, #0]
 8015342:	4633      	mov	r3, r6
 8015344:	aa0b      	add	r2, sp, #44	; 0x2c
 8015346:	4621      	mov	r1, r4
 8015348:	4628      	mov	r0, r5
 801534a:	9700      	str	r7, [sp, #0]
 801534c:	f000 fa8a 	bl	8015864 <_printf_common>
 8015350:	3001      	adds	r0, #1
 8015352:	f040 8090 	bne.w	8015476 <_printf_float+0x1de>
 8015356:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801535a:	b00d      	add	sp, #52	; 0x34
 801535c:	ecbd 8b02 	vpop	{d8}
 8015360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015364:	4642      	mov	r2, r8
 8015366:	464b      	mov	r3, r9
 8015368:	4640      	mov	r0, r8
 801536a:	4649      	mov	r1, r9
 801536c:	f7eb fbec 	bl	8000b48 <__aeabi_dcmpun>
 8015370:	b140      	cbz	r0, 8015384 <_printf_float+0xec>
 8015372:	464b      	mov	r3, r9
 8015374:	4a81      	ldr	r2, [pc, #516]	; (801557c <_printf_float+0x2e4>)
 8015376:	2b00      	cmp	r3, #0
 8015378:	bfbc      	itt	lt
 801537a:	232d      	movlt	r3, #45	; 0x2d
 801537c:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8015380:	4b7f      	ldr	r3, [pc, #508]	; (8015580 <_printf_float+0x2e8>)
 8015382:	e7d1      	b.n	8015328 <_printf_float+0x90>
 8015384:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8015388:	6863      	ldr	r3, [r4, #4]
 801538a:	9206      	str	r2, [sp, #24]
 801538c:	1c5a      	adds	r2, r3, #1
 801538e:	d13f      	bne.n	8015410 <_printf_float+0x178>
 8015390:	2306      	movs	r3, #6
 8015392:	6063      	str	r3, [r4, #4]
 8015394:	9b05      	ldr	r3, [sp, #20]
 8015396:	4628      	mov	r0, r5
 8015398:	6861      	ldr	r1, [r4, #4]
 801539a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801539e:	2300      	movs	r3, #0
 80153a0:	9303      	str	r3, [sp, #12]
 80153a2:	ab0a      	add	r3, sp, #40	; 0x28
 80153a4:	6022      	str	r2, [r4, #0]
 80153a6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80153aa:	ab09      	add	r3, sp, #36	; 0x24
 80153ac:	ec49 8b10 	vmov	d0, r8, r9
 80153b0:	9300      	str	r3, [sp, #0]
 80153b2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80153b6:	f7ff fecf 	bl	8015158 <__cvt>
 80153ba:	9b06      	ldr	r3, [sp, #24]
 80153bc:	4680      	mov	r8, r0
 80153be:	9909      	ldr	r1, [sp, #36]	; 0x24
 80153c0:	2b47      	cmp	r3, #71	; 0x47
 80153c2:	d108      	bne.n	80153d6 <_printf_float+0x13e>
 80153c4:	1cc8      	adds	r0, r1, #3
 80153c6:	db02      	blt.n	80153ce <_printf_float+0x136>
 80153c8:	6863      	ldr	r3, [r4, #4]
 80153ca:	4299      	cmp	r1, r3
 80153cc:	dd41      	ble.n	8015452 <_printf_float+0x1ba>
 80153ce:	f1ab 0302 	sub.w	r3, fp, #2
 80153d2:	fa5f fb83 	uxtb.w	fp, r3
 80153d6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80153da:	d820      	bhi.n	801541e <_printf_float+0x186>
 80153dc:	3901      	subs	r1, #1
 80153de:	465a      	mov	r2, fp
 80153e0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80153e4:	9109      	str	r1, [sp, #36]	; 0x24
 80153e6:	f7ff ff19 	bl	801521c <__exponent>
 80153ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80153ec:	4681      	mov	r9, r0
 80153ee:	1813      	adds	r3, r2, r0
 80153f0:	2a01      	cmp	r2, #1
 80153f2:	6123      	str	r3, [r4, #16]
 80153f4:	dc02      	bgt.n	80153fc <_printf_float+0x164>
 80153f6:	6822      	ldr	r2, [r4, #0]
 80153f8:	07d2      	lsls	r2, r2, #31
 80153fa:	d501      	bpl.n	8015400 <_printf_float+0x168>
 80153fc:	3301      	adds	r3, #1
 80153fe:	6123      	str	r3, [r4, #16]
 8015400:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8015404:	2b00      	cmp	r3, #0
 8015406:	d09c      	beq.n	8015342 <_printf_float+0xaa>
 8015408:	232d      	movs	r3, #45	; 0x2d
 801540a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801540e:	e798      	b.n	8015342 <_printf_float+0xaa>
 8015410:	9a06      	ldr	r2, [sp, #24]
 8015412:	2a47      	cmp	r2, #71	; 0x47
 8015414:	d1be      	bne.n	8015394 <_printf_float+0xfc>
 8015416:	2b00      	cmp	r3, #0
 8015418:	d1bc      	bne.n	8015394 <_printf_float+0xfc>
 801541a:	2301      	movs	r3, #1
 801541c:	e7b9      	b.n	8015392 <_printf_float+0xfa>
 801541e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8015422:	d118      	bne.n	8015456 <_printf_float+0x1be>
 8015424:	2900      	cmp	r1, #0
 8015426:	6863      	ldr	r3, [r4, #4]
 8015428:	dd0b      	ble.n	8015442 <_printf_float+0x1aa>
 801542a:	6121      	str	r1, [r4, #16]
 801542c:	b913      	cbnz	r3, 8015434 <_printf_float+0x19c>
 801542e:	6822      	ldr	r2, [r4, #0]
 8015430:	07d0      	lsls	r0, r2, #31
 8015432:	d502      	bpl.n	801543a <_printf_float+0x1a2>
 8015434:	3301      	adds	r3, #1
 8015436:	440b      	add	r3, r1
 8015438:	6123      	str	r3, [r4, #16]
 801543a:	f04f 0900 	mov.w	r9, #0
 801543e:	65a1      	str	r1, [r4, #88]	; 0x58
 8015440:	e7de      	b.n	8015400 <_printf_float+0x168>
 8015442:	b913      	cbnz	r3, 801544a <_printf_float+0x1b2>
 8015444:	6822      	ldr	r2, [r4, #0]
 8015446:	07d2      	lsls	r2, r2, #31
 8015448:	d501      	bpl.n	801544e <_printf_float+0x1b6>
 801544a:	3302      	adds	r3, #2
 801544c:	e7f4      	b.n	8015438 <_printf_float+0x1a0>
 801544e:	2301      	movs	r3, #1
 8015450:	e7f2      	b.n	8015438 <_printf_float+0x1a0>
 8015452:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8015456:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015458:	4299      	cmp	r1, r3
 801545a:	db05      	blt.n	8015468 <_printf_float+0x1d0>
 801545c:	6823      	ldr	r3, [r4, #0]
 801545e:	6121      	str	r1, [r4, #16]
 8015460:	07d8      	lsls	r0, r3, #31
 8015462:	d5ea      	bpl.n	801543a <_printf_float+0x1a2>
 8015464:	1c4b      	adds	r3, r1, #1
 8015466:	e7e7      	b.n	8015438 <_printf_float+0x1a0>
 8015468:	2900      	cmp	r1, #0
 801546a:	bfd4      	ite	le
 801546c:	f1c1 0202 	rsble	r2, r1, #2
 8015470:	2201      	movgt	r2, #1
 8015472:	4413      	add	r3, r2
 8015474:	e7e0      	b.n	8015438 <_printf_float+0x1a0>
 8015476:	6823      	ldr	r3, [r4, #0]
 8015478:	055a      	lsls	r2, r3, #21
 801547a:	d407      	bmi.n	801548c <_printf_float+0x1f4>
 801547c:	6923      	ldr	r3, [r4, #16]
 801547e:	4642      	mov	r2, r8
 8015480:	4631      	mov	r1, r6
 8015482:	4628      	mov	r0, r5
 8015484:	47b8      	blx	r7
 8015486:	3001      	adds	r0, #1
 8015488:	d12c      	bne.n	80154e4 <_printf_float+0x24c>
 801548a:	e764      	b.n	8015356 <_printf_float+0xbe>
 801548c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8015490:	f240 80e0 	bls.w	8015654 <_printf_float+0x3bc>
 8015494:	2200      	movs	r2, #0
 8015496:	2300      	movs	r3, #0
 8015498:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801549c:	f7eb fb22 	bl	8000ae4 <__aeabi_dcmpeq>
 80154a0:	2800      	cmp	r0, #0
 80154a2:	d034      	beq.n	801550e <_printf_float+0x276>
 80154a4:	2301      	movs	r3, #1
 80154a6:	4a37      	ldr	r2, [pc, #220]	; (8015584 <_printf_float+0x2ec>)
 80154a8:	4631      	mov	r1, r6
 80154aa:	4628      	mov	r0, r5
 80154ac:	47b8      	blx	r7
 80154ae:	3001      	adds	r0, #1
 80154b0:	f43f af51 	beq.w	8015356 <_printf_float+0xbe>
 80154b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80154b8:	429a      	cmp	r2, r3
 80154ba:	db02      	blt.n	80154c2 <_printf_float+0x22a>
 80154bc:	6823      	ldr	r3, [r4, #0]
 80154be:	07d8      	lsls	r0, r3, #31
 80154c0:	d510      	bpl.n	80154e4 <_printf_float+0x24c>
 80154c2:	ee18 3a10 	vmov	r3, s16
 80154c6:	4652      	mov	r2, sl
 80154c8:	4631      	mov	r1, r6
 80154ca:	4628      	mov	r0, r5
 80154cc:	47b8      	blx	r7
 80154ce:	3001      	adds	r0, #1
 80154d0:	f43f af41 	beq.w	8015356 <_printf_float+0xbe>
 80154d4:	f04f 0800 	mov.w	r8, #0
 80154d8:	f104 091a 	add.w	r9, r4, #26
 80154dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80154de:	3b01      	subs	r3, #1
 80154e0:	4543      	cmp	r3, r8
 80154e2:	dc09      	bgt.n	80154f8 <_printf_float+0x260>
 80154e4:	6823      	ldr	r3, [r4, #0]
 80154e6:	079b      	lsls	r3, r3, #30
 80154e8:	f100 8107 	bmi.w	80156fa <_printf_float+0x462>
 80154ec:	68e0      	ldr	r0, [r4, #12]
 80154ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80154f0:	4298      	cmp	r0, r3
 80154f2:	bfb8      	it	lt
 80154f4:	4618      	movlt	r0, r3
 80154f6:	e730      	b.n	801535a <_printf_float+0xc2>
 80154f8:	2301      	movs	r3, #1
 80154fa:	464a      	mov	r2, r9
 80154fc:	4631      	mov	r1, r6
 80154fe:	4628      	mov	r0, r5
 8015500:	47b8      	blx	r7
 8015502:	3001      	adds	r0, #1
 8015504:	f43f af27 	beq.w	8015356 <_printf_float+0xbe>
 8015508:	f108 0801 	add.w	r8, r8, #1
 801550c:	e7e6      	b.n	80154dc <_printf_float+0x244>
 801550e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015510:	2b00      	cmp	r3, #0
 8015512:	dc39      	bgt.n	8015588 <_printf_float+0x2f0>
 8015514:	2301      	movs	r3, #1
 8015516:	4a1b      	ldr	r2, [pc, #108]	; (8015584 <_printf_float+0x2ec>)
 8015518:	4631      	mov	r1, r6
 801551a:	4628      	mov	r0, r5
 801551c:	47b8      	blx	r7
 801551e:	3001      	adds	r0, #1
 8015520:	f43f af19 	beq.w	8015356 <_printf_float+0xbe>
 8015524:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8015528:	4313      	orrs	r3, r2
 801552a:	d102      	bne.n	8015532 <_printf_float+0x29a>
 801552c:	6823      	ldr	r3, [r4, #0]
 801552e:	07d9      	lsls	r1, r3, #31
 8015530:	d5d8      	bpl.n	80154e4 <_printf_float+0x24c>
 8015532:	ee18 3a10 	vmov	r3, s16
 8015536:	4652      	mov	r2, sl
 8015538:	4631      	mov	r1, r6
 801553a:	4628      	mov	r0, r5
 801553c:	47b8      	blx	r7
 801553e:	3001      	adds	r0, #1
 8015540:	f43f af09 	beq.w	8015356 <_printf_float+0xbe>
 8015544:	f04f 0900 	mov.w	r9, #0
 8015548:	f104 0a1a 	add.w	sl, r4, #26
 801554c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801554e:	425b      	negs	r3, r3
 8015550:	454b      	cmp	r3, r9
 8015552:	dc01      	bgt.n	8015558 <_printf_float+0x2c0>
 8015554:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015556:	e792      	b.n	801547e <_printf_float+0x1e6>
 8015558:	2301      	movs	r3, #1
 801555a:	4652      	mov	r2, sl
 801555c:	4631      	mov	r1, r6
 801555e:	4628      	mov	r0, r5
 8015560:	47b8      	blx	r7
 8015562:	3001      	adds	r0, #1
 8015564:	f43f aef7 	beq.w	8015356 <_printf_float+0xbe>
 8015568:	f109 0901 	add.w	r9, r9, #1
 801556c:	e7ee      	b.n	801554c <_printf_float+0x2b4>
 801556e:	bf00      	nop
 8015570:	7fefffff 	.word	0x7fefffff
 8015574:	0818dd14 	.word	0x0818dd14
 8015578:	0818dd18 	.word	0x0818dd18
 801557c:	0818dd1c 	.word	0x0818dd1c
 8015580:	0818dd20 	.word	0x0818dd20
 8015584:	0818dfbd 	.word	0x0818dfbd
 8015588:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801558a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801558c:	429a      	cmp	r2, r3
 801558e:	bfa8      	it	ge
 8015590:	461a      	movge	r2, r3
 8015592:	2a00      	cmp	r2, #0
 8015594:	4691      	mov	r9, r2
 8015596:	dc37      	bgt.n	8015608 <_printf_float+0x370>
 8015598:	f04f 0b00 	mov.w	fp, #0
 801559c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80155a0:	f104 021a 	add.w	r2, r4, #26
 80155a4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80155a6:	9305      	str	r3, [sp, #20]
 80155a8:	eba3 0309 	sub.w	r3, r3, r9
 80155ac:	455b      	cmp	r3, fp
 80155ae:	dc33      	bgt.n	8015618 <_printf_float+0x380>
 80155b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80155b4:	429a      	cmp	r2, r3
 80155b6:	db3b      	blt.n	8015630 <_printf_float+0x398>
 80155b8:	6823      	ldr	r3, [r4, #0]
 80155ba:	07da      	lsls	r2, r3, #31
 80155bc:	d438      	bmi.n	8015630 <_printf_float+0x398>
 80155be:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80155c2:	eba2 0903 	sub.w	r9, r2, r3
 80155c6:	9b05      	ldr	r3, [sp, #20]
 80155c8:	1ad2      	subs	r2, r2, r3
 80155ca:	4591      	cmp	r9, r2
 80155cc:	bfa8      	it	ge
 80155ce:	4691      	movge	r9, r2
 80155d0:	f1b9 0f00 	cmp.w	r9, #0
 80155d4:	dc35      	bgt.n	8015642 <_printf_float+0x3aa>
 80155d6:	f04f 0800 	mov.w	r8, #0
 80155da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80155de:	f104 0a1a 	add.w	sl, r4, #26
 80155e2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80155e6:	1a9b      	subs	r3, r3, r2
 80155e8:	eba3 0309 	sub.w	r3, r3, r9
 80155ec:	4543      	cmp	r3, r8
 80155ee:	f77f af79 	ble.w	80154e4 <_printf_float+0x24c>
 80155f2:	2301      	movs	r3, #1
 80155f4:	4652      	mov	r2, sl
 80155f6:	4631      	mov	r1, r6
 80155f8:	4628      	mov	r0, r5
 80155fa:	47b8      	blx	r7
 80155fc:	3001      	adds	r0, #1
 80155fe:	f43f aeaa 	beq.w	8015356 <_printf_float+0xbe>
 8015602:	f108 0801 	add.w	r8, r8, #1
 8015606:	e7ec      	b.n	80155e2 <_printf_float+0x34a>
 8015608:	4613      	mov	r3, r2
 801560a:	4631      	mov	r1, r6
 801560c:	4642      	mov	r2, r8
 801560e:	4628      	mov	r0, r5
 8015610:	47b8      	blx	r7
 8015612:	3001      	adds	r0, #1
 8015614:	d1c0      	bne.n	8015598 <_printf_float+0x300>
 8015616:	e69e      	b.n	8015356 <_printf_float+0xbe>
 8015618:	2301      	movs	r3, #1
 801561a:	4631      	mov	r1, r6
 801561c:	4628      	mov	r0, r5
 801561e:	9205      	str	r2, [sp, #20]
 8015620:	47b8      	blx	r7
 8015622:	3001      	adds	r0, #1
 8015624:	f43f ae97 	beq.w	8015356 <_printf_float+0xbe>
 8015628:	f10b 0b01 	add.w	fp, fp, #1
 801562c:	9a05      	ldr	r2, [sp, #20]
 801562e:	e7b9      	b.n	80155a4 <_printf_float+0x30c>
 8015630:	ee18 3a10 	vmov	r3, s16
 8015634:	4652      	mov	r2, sl
 8015636:	4631      	mov	r1, r6
 8015638:	4628      	mov	r0, r5
 801563a:	47b8      	blx	r7
 801563c:	3001      	adds	r0, #1
 801563e:	d1be      	bne.n	80155be <_printf_float+0x326>
 8015640:	e689      	b.n	8015356 <_printf_float+0xbe>
 8015642:	9a05      	ldr	r2, [sp, #20]
 8015644:	464b      	mov	r3, r9
 8015646:	4631      	mov	r1, r6
 8015648:	4628      	mov	r0, r5
 801564a:	4442      	add	r2, r8
 801564c:	47b8      	blx	r7
 801564e:	3001      	adds	r0, #1
 8015650:	d1c1      	bne.n	80155d6 <_printf_float+0x33e>
 8015652:	e680      	b.n	8015356 <_printf_float+0xbe>
 8015654:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015656:	2a01      	cmp	r2, #1
 8015658:	dc01      	bgt.n	801565e <_printf_float+0x3c6>
 801565a:	07db      	lsls	r3, r3, #31
 801565c:	d53a      	bpl.n	80156d4 <_printf_float+0x43c>
 801565e:	2301      	movs	r3, #1
 8015660:	4642      	mov	r2, r8
 8015662:	4631      	mov	r1, r6
 8015664:	4628      	mov	r0, r5
 8015666:	47b8      	blx	r7
 8015668:	3001      	adds	r0, #1
 801566a:	f43f ae74 	beq.w	8015356 <_printf_float+0xbe>
 801566e:	ee18 3a10 	vmov	r3, s16
 8015672:	4652      	mov	r2, sl
 8015674:	4631      	mov	r1, r6
 8015676:	4628      	mov	r0, r5
 8015678:	47b8      	blx	r7
 801567a:	3001      	adds	r0, #1
 801567c:	f43f ae6b 	beq.w	8015356 <_printf_float+0xbe>
 8015680:	2200      	movs	r2, #0
 8015682:	2300      	movs	r3, #0
 8015684:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8015688:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801568c:	f7eb fa2a 	bl	8000ae4 <__aeabi_dcmpeq>
 8015690:	b9d8      	cbnz	r0, 80156ca <_printf_float+0x432>
 8015692:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8015696:	f108 0201 	add.w	r2, r8, #1
 801569a:	4631      	mov	r1, r6
 801569c:	4628      	mov	r0, r5
 801569e:	47b8      	blx	r7
 80156a0:	3001      	adds	r0, #1
 80156a2:	d10e      	bne.n	80156c2 <_printf_float+0x42a>
 80156a4:	e657      	b.n	8015356 <_printf_float+0xbe>
 80156a6:	2301      	movs	r3, #1
 80156a8:	4652      	mov	r2, sl
 80156aa:	4631      	mov	r1, r6
 80156ac:	4628      	mov	r0, r5
 80156ae:	47b8      	blx	r7
 80156b0:	3001      	adds	r0, #1
 80156b2:	f43f ae50 	beq.w	8015356 <_printf_float+0xbe>
 80156b6:	f108 0801 	add.w	r8, r8, #1
 80156ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80156bc:	3b01      	subs	r3, #1
 80156be:	4543      	cmp	r3, r8
 80156c0:	dcf1      	bgt.n	80156a6 <_printf_float+0x40e>
 80156c2:	464b      	mov	r3, r9
 80156c4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80156c8:	e6da      	b.n	8015480 <_printf_float+0x1e8>
 80156ca:	f04f 0800 	mov.w	r8, #0
 80156ce:	f104 0a1a 	add.w	sl, r4, #26
 80156d2:	e7f2      	b.n	80156ba <_printf_float+0x422>
 80156d4:	2301      	movs	r3, #1
 80156d6:	4642      	mov	r2, r8
 80156d8:	e7df      	b.n	801569a <_printf_float+0x402>
 80156da:	2301      	movs	r3, #1
 80156dc:	464a      	mov	r2, r9
 80156de:	4631      	mov	r1, r6
 80156e0:	4628      	mov	r0, r5
 80156e2:	47b8      	blx	r7
 80156e4:	3001      	adds	r0, #1
 80156e6:	f43f ae36 	beq.w	8015356 <_printf_float+0xbe>
 80156ea:	f108 0801 	add.w	r8, r8, #1
 80156ee:	68e3      	ldr	r3, [r4, #12]
 80156f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80156f2:	1a5b      	subs	r3, r3, r1
 80156f4:	4543      	cmp	r3, r8
 80156f6:	dcf0      	bgt.n	80156da <_printf_float+0x442>
 80156f8:	e6f8      	b.n	80154ec <_printf_float+0x254>
 80156fa:	f04f 0800 	mov.w	r8, #0
 80156fe:	f104 0919 	add.w	r9, r4, #25
 8015702:	e7f4      	b.n	80156ee <_printf_float+0x456>

08015704 <malloc>:
 8015704:	4b02      	ldr	r3, [pc, #8]	; (8015710 <malloc+0xc>)
 8015706:	4601      	mov	r1, r0
 8015708:	6818      	ldr	r0, [r3, #0]
 801570a:	f000 b82b 	b.w	8015764 <_malloc_r>
 801570e:	bf00      	nop
 8015710:	200002c8 	.word	0x200002c8

08015714 <free>:
 8015714:	4b02      	ldr	r3, [pc, #8]	; (8015720 <free+0xc>)
 8015716:	4601      	mov	r1, r0
 8015718:	6818      	ldr	r0, [r3, #0]
 801571a:	f002 bdc5 	b.w	80182a8 <_free_r>
 801571e:	bf00      	nop
 8015720:	200002c8 	.word	0x200002c8

08015724 <sbrk_aligned>:
 8015724:	b570      	push	{r4, r5, r6, lr}
 8015726:	4e0e      	ldr	r6, [pc, #56]	; (8015760 <sbrk_aligned+0x3c>)
 8015728:	460c      	mov	r4, r1
 801572a:	4605      	mov	r5, r0
 801572c:	6831      	ldr	r1, [r6, #0]
 801572e:	b911      	cbnz	r1, 8015736 <sbrk_aligned+0x12>
 8015730:	f001 feb6 	bl	80174a0 <_sbrk_r>
 8015734:	6030      	str	r0, [r6, #0]
 8015736:	4621      	mov	r1, r4
 8015738:	4628      	mov	r0, r5
 801573a:	f001 feb1 	bl	80174a0 <_sbrk_r>
 801573e:	1c43      	adds	r3, r0, #1
 8015740:	d00a      	beq.n	8015758 <sbrk_aligned+0x34>
 8015742:	1cc4      	adds	r4, r0, #3
 8015744:	f024 0403 	bic.w	r4, r4, #3
 8015748:	42a0      	cmp	r0, r4
 801574a:	d007      	beq.n	801575c <sbrk_aligned+0x38>
 801574c:	1a21      	subs	r1, r4, r0
 801574e:	4628      	mov	r0, r5
 8015750:	f001 fea6 	bl	80174a0 <_sbrk_r>
 8015754:	3001      	adds	r0, #1
 8015756:	d101      	bne.n	801575c <sbrk_aligned+0x38>
 8015758:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801575c:	4620      	mov	r0, r4
 801575e:	bd70      	pop	{r4, r5, r6, pc}
 8015760:	20003424 	.word	0x20003424

08015764 <_malloc_r>:
 8015764:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015768:	1ccd      	adds	r5, r1, #3
 801576a:	4607      	mov	r7, r0
 801576c:	f025 0503 	bic.w	r5, r5, #3
 8015770:	3508      	adds	r5, #8
 8015772:	2d0c      	cmp	r5, #12
 8015774:	bf38      	it	cc
 8015776:	250c      	movcc	r5, #12
 8015778:	2d00      	cmp	r5, #0
 801577a:	db01      	blt.n	8015780 <_malloc_r+0x1c>
 801577c:	42a9      	cmp	r1, r5
 801577e:	d905      	bls.n	801578c <_malloc_r+0x28>
 8015780:	230c      	movs	r3, #12
 8015782:	2600      	movs	r6, #0
 8015784:	603b      	str	r3, [r7, #0]
 8015786:	4630      	mov	r0, r6
 8015788:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801578c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8015860 <_malloc_r+0xfc>
 8015790:	f000 fcf4 	bl	801617c <__malloc_lock>
 8015794:	f8d8 3000 	ldr.w	r3, [r8]
 8015798:	461c      	mov	r4, r3
 801579a:	bb5c      	cbnz	r4, 80157f4 <_malloc_r+0x90>
 801579c:	4629      	mov	r1, r5
 801579e:	4638      	mov	r0, r7
 80157a0:	f7ff ffc0 	bl	8015724 <sbrk_aligned>
 80157a4:	1c43      	adds	r3, r0, #1
 80157a6:	4604      	mov	r4, r0
 80157a8:	d155      	bne.n	8015856 <_malloc_r+0xf2>
 80157aa:	f8d8 4000 	ldr.w	r4, [r8]
 80157ae:	4626      	mov	r6, r4
 80157b0:	2e00      	cmp	r6, #0
 80157b2:	d145      	bne.n	8015840 <_malloc_r+0xdc>
 80157b4:	2c00      	cmp	r4, #0
 80157b6:	d048      	beq.n	801584a <_malloc_r+0xe6>
 80157b8:	6823      	ldr	r3, [r4, #0]
 80157ba:	4631      	mov	r1, r6
 80157bc:	4638      	mov	r0, r7
 80157be:	eb04 0903 	add.w	r9, r4, r3
 80157c2:	f001 fe6d 	bl	80174a0 <_sbrk_r>
 80157c6:	4581      	cmp	r9, r0
 80157c8:	d13f      	bne.n	801584a <_malloc_r+0xe6>
 80157ca:	6821      	ldr	r1, [r4, #0]
 80157cc:	4638      	mov	r0, r7
 80157ce:	1a6d      	subs	r5, r5, r1
 80157d0:	4629      	mov	r1, r5
 80157d2:	f7ff ffa7 	bl	8015724 <sbrk_aligned>
 80157d6:	3001      	adds	r0, #1
 80157d8:	d037      	beq.n	801584a <_malloc_r+0xe6>
 80157da:	6823      	ldr	r3, [r4, #0]
 80157dc:	442b      	add	r3, r5
 80157de:	6023      	str	r3, [r4, #0]
 80157e0:	f8d8 3000 	ldr.w	r3, [r8]
 80157e4:	2b00      	cmp	r3, #0
 80157e6:	d038      	beq.n	801585a <_malloc_r+0xf6>
 80157e8:	685a      	ldr	r2, [r3, #4]
 80157ea:	42a2      	cmp	r2, r4
 80157ec:	d12b      	bne.n	8015846 <_malloc_r+0xe2>
 80157ee:	2200      	movs	r2, #0
 80157f0:	605a      	str	r2, [r3, #4]
 80157f2:	e00f      	b.n	8015814 <_malloc_r+0xb0>
 80157f4:	6822      	ldr	r2, [r4, #0]
 80157f6:	1b52      	subs	r2, r2, r5
 80157f8:	d41f      	bmi.n	801583a <_malloc_r+0xd6>
 80157fa:	2a0b      	cmp	r2, #11
 80157fc:	d917      	bls.n	801582e <_malloc_r+0xca>
 80157fe:	1961      	adds	r1, r4, r5
 8015800:	42a3      	cmp	r3, r4
 8015802:	6025      	str	r5, [r4, #0]
 8015804:	bf18      	it	ne
 8015806:	6059      	strne	r1, [r3, #4]
 8015808:	6863      	ldr	r3, [r4, #4]
 801580a:	bf08      	it	eq
 801580c:	f8c8 1000 	streq.w	r1, [r8]
 8015810:	5162      	str	r2, [r4, r5]
 8015812:	604b      	str	r3, [r1, #4]
 8015814:	f104 060b 	add.w	r6, r4, #11
 8015818:	4638      	mov	r0, r7
 801581a:	f000 fcb5 	bl	8016188 <__malloc_unlock>
 801581e:	1d23      	adds	r3, r4, #4
 8015820:	f026 0607 	bic.w	r6, r6, #7
 8015824:	1af2      	subs	r2, r6, r3
 8015826:	d0ae      	beq.n	8015786 <_malloc_r+0x22>
 8015828:	1b9b      	subs	r3, r3, r6
 801582a:	50a3      	str	r3, [r4, r2]
 801582c:	e7ab      	b.n	8015786 <_malloc_r+0x22>
 801582e:	42a3      	cmp	r3, r4
 8015830:	6862      	ldr	r2, [r4, #4]
 8015832:	d1dd      	bne.n	80157f0 <_malloc_r+0x8c>
 8015834:	f8c8 2000 	str.w	r2, [r8]
 8015838:	e7ec      	b.n	8015814 <_malloc_r+0xb0>
 801583a:	4623      	mov	r3, r4
 801583c:	6864      	ldr	r4, [r4, #4]
 801583e:	e7ac      	b.n	801579a <_malloc_r+0x36>
 8015840:	4634      	mov	r4, r6
 8015842:	6876      	ldr	r6, [r6, #4]
 8015844:	e7b4      	b.n	80157b0 <_malloc_r+0x4c>
 8015846:	4613      	mov	r3, r2
 8015848:	e7cc      	b.n	80157e4 <_malloc_r+0x80>
 801584a:	230c      	movs	r3, #12
 801584c:	4638      	mov	r0, r7
 801584e:	603b      	str	r3, [r7, #0]
 8015850:	f000 fc9a 	bl	8016188 <__malloc_unlock>
 8015854:	e797      	b.n	8015786 <_malloc_r+0x22>
 8015856:	6025      	str	r5, [r4, #0]
 8015858:	e7dc      	b.n	8015814 <_malloc_r+0xb0>
 801585a:	605b      	str	r3, [r3, #4]
 801585c:	deff      	udf	#255	; 0xff
 801585e:	bf00      	nop
 8015860:	20003420 	.word	0x20003420

08015864 <_printf_common>:
 8015864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015868:	4616      	mov	r6, r2
 801586a:	4699      	mov	r9, r3
 801586c:	688a      	ldr	r2, [r1, #8]
 801586e:	4607      	mov	r7, r0
 8015870:	690b      	ldr	r3, [r1, #16]
 8015872:	460c      	mov	r4, r1
 8015874:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015878:	4293      	cmp	r3, r2
 801587a:	bfb8      	it	lt
 801587c:	4613      	movlt	r3, r2
 801587e:	6033      	str	r3, [r6, #0]
 8015880:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015884:	b10a      	cbz	r2, 801588a <_printf_common+0x26>
 8015886:	3301      	adds	r3, #1
 8015888:	6033      	str	r3, [r6, #0]
 801588a:	6823      	ldr	r3, [r4, #0]
 801588c:	0699      	lsls	r1, r3, #26
 801588e:	bf42      	ittt	mi
 8015890:	6833      	ldrmi	r3, [r6, #0]
 8015892:	3302      	addmi	r3, #2
 8015894:	6033      	strmi	r3, [r6, #0]
 8015896:	6825      	ldr	r5, [r4, #0]
 8015898:	f015 0506 	ands.w	r5, r5, #6
 801589c:	d106      	bne.n	80158ac <_printf_common+0x48>
 801589e:	f104 0a19 	add.w	sl, r4, #25
 80158a2:	68e3      	ldr	r3, [r4, #12]
 80158a4:	6832      	ldr	r2, [r6, #0]
 80158a6:	1a9b      	subs	r3, r3, r2
 80158a8:	42ab      	cmp	r3, r5
 80158aa:	dc2b      	bgt.n	8015904 <_printf_common+0xa0>
 80158ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80158b0:	1e13      	subs	r3, r2, #0
 80158b2:	6822      	ldr	r2, [r4, #0]
 80158b4:	bf18      	it	ne
 80158b6:	2301      	movne	r3, #1
 80158b8:	0692      	lsls	r2, r2, #26
 80158ba:	d430      	bmi.n	801591e <_printf_common+0xba>
 80158bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80158c0:	4649      	mov	r1, r9
 80158c2:	4638      	mov	r0, r7
 80158c4:	47c0      	blx	r8
 80158c6:	3001      	adds	r0, #1
 80158c8:	d023      	beq.n	8015912 <_printf_common+0xae>
 80158ca:	6823      	ldr	r3, [r4, #0]
 80158cc:	341a      	adds	r4, #26
 80158ce:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 80158d2:	f003 0306 	and.w	r3, r3, #6
 80158d6:	2b04      	cmp	r3, #4
 80158d8:	bf0a      	itet	eq
 80158da:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 80158de:	2500      	movne	r5, #0
 80158e0:	6833      	ldreq	r3, [r6, #0]
 80158e2:	f04f 0600 	mov.w	r6, #0
 80158e6:	bf08      	it	eq
 80158e8:	1aed      	subeq	r5, r5, r3
 80158ea:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80158ee:	bf08      	it	eq
 80158f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80158f4:	4293      	cmp	r3, r2
 80158f6:	bfc4      	itt	gt
 80158f8:	1a9b      	subgt	r3, r3, r2
 80158fa:	18ed      	addgt	r5, r5, r3
 80158fc:	42b5      	cmp	r5, r6
 80158fe:	d11a      	bne.n	8015936 <_printf_common+0xd2>
 8015900:	2000      	movs	r0, #0
 8015902:	e008      	b.n	8015916 <_printf_common+0xb2>
 8015904:	2301      	movs	r3, #1
 8015906:	4652      	mov	r2, sl
 8015908:	4649      	mov	r1, r9
 801590a:	4638      	mov	r0, r7
 801590c:	47c0      	blx	r8
 801590e:	3001      	adds	r0, #1
 8015910:	d103      	bne.n	801591a <_printf_common+0xb6>
 8015912:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801591a:	3501      	adds	r5, #1
 801591c:	e7c1      	b.n	80158a2 <_printf_common+0x3e>
 801591e:	18e1      	adds	r1, r4, r3
 8015920:	1c5a      	adds	r2, r3, #1
 8015922:	2030      	movs	r0, #48	; 0x30
 8015924:	3302      	adds	r3, #2
 8015926:	4422      	add	r2, r4
 8015928:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801592c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015930:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015934:	e7c2      	b.n	80158bc <_printf_common+0x58>
 8015936:	2301      	movs	r3, #1
 8015938:	4622      	mov	r2, r4
 801593a:	4649      	mov	r1, r9
 801593c:	4638      	mov	r0, r7
 801593e:	47c0      	blx	r8
 8015940:	3001      	adds	r0, #1
 8015942:	d0e6      	beq.n	8015912 <_printf_common+0xae>
 8015944:	3601      	adds	r6, #1
 8015946:	e7d9      	b.n	80158fc <_printf_common+0x98>

08015948 <_printf_i>:
 8015948:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801594c:	7e0f      	ldrb	r7, [r1, #24]
 801594e:	4691      	mov	r9, r2
 8015950:	4680      	mov	r8, r0
 8015952:	460c      	mov	r4, r1
 8015954:	2f78      	cmp	r7, #120	; 0x78
 8015956:	469a      	mov	sl, r3
 8015958:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801595a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801595e:	d807      	bhi.n	8015970 <_printf_i+0x28>
 8015960:	2f62      	cmp	r7, #98	; 0x62
 8015962:	d80a      	bhi.n	801597a <_printf_i+0x32>
 8015964:	2f00      	cmp	r7, #0
 8015966:	f000 80d3 	beq.w	8015b10 <_printf_i+0x1c8>
 801596a:	2f58      	cmp	r7, #88	; 0x58
 801596c:	f000 80bf 	beq.w	8015aee <_printf_i+0x1a6>
 8015970:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015974:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8015978:	e03a      	b.n	80159f0 <_printf_i+0xa8>
 801597a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801597e:	2b15      	cmp	r3, #21
 8015980:	d8f6      	bhi.n	8015970 <_printf_i+0x28>
 8015982:	a101      	add	r1, pc, #4	; (adr r1, 8015988 <_printf_i+0x40>)
 8015984:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015988:	080159e1 	.word	0x080159e1
 801598c:	080159f5 	.word	0x080159f5
 8015990:	08015971 	.word	0x08015971
 8015994:	08015971 	.word	0x08015971
 8015998:	08015971 	.word	0x08015971
 801599c:	08015971 	.word	0x08015971
 80159a0:	080159f5 	.word	0x080159f5
 80159a4:	08015971 	.word	0x08015971
 80159a8:	08015971 	.word	0x08015971
 80159ac:	08015971 	.word	0x08015971
 80159b0:	08015971 	.word	0x08015971
 80159b4:	08015af7 	.word	0x08015af7
 80159b8:	08015a21 	.word	0x08015a21
 80159bc:	08015ab3 	.word	0x08015ab3
 80159c0:	08015971 	.word	0x08015971
 80159c4:	08015971 	.word	0x08015971
 80159c8:	08015b19 	.word	0x08015b19
 80159cc:	08015971 	.word	0x08015971
 80159d0:	08015a21 	.word	0x08015a21
 80159d4:	08015971 	.word	0x08015971
 80159d8:	08015971 	.word	0x08015971
 80159dc:	08015abb 	.word	0x08015abb
 80159e0:	682b      	ldr	r3, [r5, #0]
 80159e2:	1d1a      	adds	r2, r3, #4
 80159e4:	681b      	ldr	r3, [r3, #0]
 80159e6:	602a      	str	r2, [r5, #0]
 80159e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80159ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80159f0:	2301      	movs	r3, #1
 80159f2:	e09e      	b.n	8015b32 <_printf_i+0x1ea>
 80159f4:	6820      	ldr	r0, [r4, #0]
 80159f6:	682b      	ldr	r3, [r5, #0]
 80159f8:	0607      	lsls	r7, r0, #24
 80159fa:	f103 0104 	add.w	r1, r3, #4
 80159fe:	6029      	str	r1, [r5, #0]
 8015a00:	d501      	bpl.n	8015a06 <_printf_i+0xbe>
 8015a02:	681e      	ldr	r6, [r3, #0]
 8015a04:	e003      	b.n	8015a0e <_printf_i+0xc6>
 8015a06:	0646      	lsls	r6, r0, #25
 8015a08:	d5fb      	bpl.n	8015a02 <_printf_i+0xba>
 8015a0a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8015a0e:	2e00      	cmp	r6, #0
 8015a10:	da03      	bge.n	8015a1a <_printf_i+0xd2>
 8015a12:	232d      	movs	r3, #45	; 0x2d
 8015a14:	4276      	negs	r6, r6
 8015a16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015a1a:	4859      	ldr	r0, [pc, #356]	; (8015b80 <_printf_i+0x238>)
 8015a1c:	230a      	movs	r3, #10
 8015a1e:	e012      	b.n	8015a46 <_printf_i+0xfe>
 8015a20:	682b      	ldr	r3, [r5, #0]
 8015a22:	6820      	ldr	r0, [r4, #0]
 8015a24:	1d19      	adds	r1, r3, #4
 8015a26:	6029      	str	r1, [r5, #0]
 8015a28:	0605      	lsls	r5, r0, #24
 8015a2a:	d501      	bpl.n	8015a30 <_printf_i+0xe8>
 8015a2c:	681e      	ldr	r6, [r3, #0]
 8015a2e:	e002      	b.n	8015a36 <_printf_i+0xee>
 8015a30:	0641      	lsls	r1, r0, #25
 8015a32:	d5fb      	bpl.n	8015a2c <_printf_i+0xe4>
 8015a34:	881e      	ldrh	r6, [r3, #0]
 8015a36:	2f6f      	cmp	r7, #111	; 0x6f
 8015a38:	4851      	ldr	r0, [pc, #324]	; (8015b80 <_printf_i+0x238>)
 8015a3a:	bf0c      	ite	eq
 8015a3c:	2308      	moveq	r3, #8
 8015a3e:	230a      	movne	r3, #10
 8015a40:	2100      	movs	r1, #0
 8015a42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015a46:	6865      	ldr	r5, [r4, #4]
 8015a48:	2d00      	cmp	r5, #0
 8015a4a:	60a5      	str	r5, [r4, #8]
 8015a4c:	bfa2      	ittt	ge
 8015a4e:	6821      	ldrge	r1, [r4, #0]
 8015a50:	f021 0104 	bicge.w	r1, r1, #4
 8015a54:	6021      	strge	r1, [r4, #0]
 8015a56:	b90e      	cbnz	r6, 8015a5c <_printf_i+0x114>
 8015a58:	2d00      	cmp	r5, #0
 8015a5a:	d04a      	beq.n	8015af2 <_printf_i+0x1aa>
 8015a5c:	4615      	mov	r5, r2
 8015a5e:	fbb6 f1f3 	udiv	r1, r6, r3
 8015a62:	fb03 6711 	mls	r7, r3, r1, r6
 8015a66:	5dc7      	ldrb	r7, [r0, r7]
 8015a68:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8015a6c:	4637      	mov	r7, r6
 8015a6e:	460e      	mov	r6, r1
 8015a70:	42bb      	cmp	r3, r7
 8015a72:	d9f4      	bls.n	8015a5e <_printf_i+0x116>
 8015a74:	2b08      	cmp	r3, #8
 8015a76:	d10b      	bne.n	8015a90 <_printf_i+0x148>
 8015a78:	6823      	ldr	r3, [r4, #0]
 8015a7a:	07de      	lsls	r6, r3, #31
 8015a7c:	d508      	bpl.n	8015a90 <_printf_i+0x148>
 8015a7e:	6923      	ldr	r3, [r4, #16]
 8015a80:	6861      	ldr	r1, [r4, #4]
 8015a82:	4299      	cmp	r1, r3
 8015a84:	bfde      	ittt	le
 8015a86:	2330      	movle	r3, #48	; 0x30
 8015a88:	f805 3c01 	strble.w	r3, [r5, #-1]
 8015a8c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8015a90:	1b52      	subs	r2, r2, r5
 8015a92:	6122      	str	r2, [r4, #16]
 8015a94:	464b      	mov	r3, r9
 8015a96:	aa03      	add	r2, sp, #12
 8015a98:	4621      	mov	r1, r4
 8015a9a:	4640      	mov	r0, r8
 8015a9c:	f8cd a000 	str.w	sl, [sp]
 8015aa0:	f7ff fee0 	bl	8015864 <_printf_common>
 8015aa4:	3001      	adds	r0, #1
 8015aa6:	d149      	bne.n	8015b3c <_printf_i+0x1f4>
 8015aa8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015aac:	b004      	add	sp, #16
 8015aae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015ab2:	6823      	ldr	r3, [r4, #0]
 8015ab4:	f043 0320 	orr.w	r3, r3, #32
 8015ab8:	6023      	str	r3, [r4, #0]
 8015aba:	2778      	movs	r7, #120	; 0x78
 8015abc:	4831      	ldr	r0, [pc, #196]	; (8015b84 <_printf_i+0x23c>)
 8015abe:	6823      	ldr	r3, [r4, #0]
 8015ac0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8015ac4:	061f      	lsls	r7, r3, #24
 8015ac6:	6829      	ldr	r1, [r5, #0]
 8015ac8:	f851 6b04 	ldr.w	r6, [r1], #4
 8015acc:	d402      	bmi.n	8015ad4 <_printf_i+0x18c>
 8015ace:	065f      	lsls	r7, r3, #25
 8015ad0:	bf48      	it	mi
 8015ad2:	b2b6      	uxthmi	r6, r6
 8015ad4:	07df      	lsls	r7, r3, #31
 8015ad6:	6029      	str	r1, [r5, #0]
 8015ad8:	bf44      	itt	mi
 8015ada:	f043 0320 	orrmi.w	r3, r3, #32
 8015ade:	6023      	strmi	r3, [r4, #0]
 8015ae0:	b91e      	cbnz	r6, 8015aea <_printf_i+0x1a2>
 8015ae2:	6823      	ldr	r3, [r4, #0]
 8015ae4:	f023 0320 	bic.w	r3, r3, #32
 8015ae8:	6023      	str	r3, [r4, #0]
 8015aea:	2310      	movs	r3, #16
 8015aec:	e7a8      	b.n	8015a40 <_printf_i+0xf8>
 8015aee:	4824      	ldr	r0, [pc, #144]	; (8015b80 <_printf_i+0x238>)
 8015af0:	e7e5      	b.n	8015abe <_printf_i+0x176>
 8015af2:	4615      	mov	r5, r2
 8015af4:	e7be      	b.n	8015a74 <_printf_i+0x12c>
 8015af6:	682b      	ldr	r3, [r5, #0]
 8015af8:	6826      	ldr	r6, [r4, #0]
 8015afa:	1d18      	adds	r0, r3, #4
 8015afc:	6961      	ldr	r1, [r4, #20]
 8015afe:	6028      	str	r0, [r5, #0]
 8015b00:	0635      	lsls	r5, r6, #24
 8015b02:	681b      	ldr	r3, [r3, #0]
 8015b04:	d501      	bpl.n	8015b0a <_printf_i+0x1c2>
 8015b06:	6019      	str	r1, [r3, #0]
 8015b08:	e002      	b.n	8015b10 <_printf_i+0x1c8>
 8015b0a:	0670      	lsls	r0, r6, #25
 8015b0c:	d5fb      	bpl.n	8015b06 <_printf_i+0x1be>
 8015b0e:	8019      	strh	r1, [r3, #0]
 8015b10:	2300      	movs	r3, #0
 8015b12:	4615      	mov	r5, r2
 8015b14:	6123      	str	r3, [r4, #16]
 8015b16:	e7bd      	b.n	8015a94 <_printf_i+0x14c>
 8015b18:	682b      	ldr	r3, [r5, #0]
 8015b1a:	2100      	movs	r1, #0
 8015b1c:	1d1a      	adds	r2, r3, #4
 8015b1e:	602a      	str	r2, [r5, #0]
 8015b20:	681d      	ldr	r5, [r3, #0]
 8015b22:	6862      	ldr	r2, [r4, #4]
 8015b24:	4628      	mov	r0, r5
 8015b26:	f001 fd0a 	bl	801753e <memchr>
 8015b2a:	b108      	cbz	r0, 8015b30 <_printf_i+0x1e8>
 8015b2c:	1b40      	subs	r0, r0, r5
 8015b2e:	6060      	str	r0, [r4, #4]
 8015b30:	6863      	ldr	r3, [r4, #4]
 8015b32:	6123      	str	r3, [r4, #16]
 8015b34:	2300      	movs	r3, #0
 8015b36:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015b3a:	e7ab      	b.n	8015a94 <_printf_i+0x14c>
 8015b3c:	6923      	ldr	r3, [r4, #16]
 8015b3e:	462a      	mov	r2, r5
 8015b40:	4649      	mov	r1, r9
 8015b42:	4640      	mov	r0, r8
 8015b44:	47d0      	blx	sl
 8015b46:	3001      	adds	r0, #1
 8015b48:	d0ae      	beq.n	8015aa8 <_printf_i+0x160>
 8015b4a:	6823      	ldr	r3, [r4, #0]
 8015b4c:	079b      	lsls	r3, r3, #30
 8015b4e:	d413      	bmi.n	8015b78 <_printf_i+0x230>
 8015b50:	68e0      	ldr	r0, [r4, #12]
 8015b52:	9b03      	ldr	r3, [sp, #12]
 8015b54:	4298      	cmp	r0, r3
 8015b56:	bfb8      	it	lt
 8015b58:	4618      	movlt	r0, r3
 8015b5a:	e7a7      	b.n	8015aac <_printf_i+0x164>
 8015b5c:	2301      	movs	r3, #1
 8015b5e:	4632      	mov	r2, r6
 8015b60:	4649      	mov	r1, r9
 8015b62:	4640      	mov	r0, r8
 8015b64:	47d0      	blx	sl
 8015b66:	3001      	adds	r0, #1
 8015b68:	d09e      	beq.n	8015aa8 <_printf_i+0x160>
 8015b6a:	3501      	adds	r5, #1
 8015b6c:	68e3      	ldr	r3, [r4, #12]
 8015b6e:	9903      	ldr	r1, [sp, #12]
 8015b70:	1a5b      	subs	r3, r3, r1
 8015b72:	42ab      	cmp	r3, r5
 8015b74:	dcf2      	bgt.n	8015b5c <_printf_i+0x214>
 8015b76:	e7eb      	b.n	8015b50 <_printf_i+0x208>
 8015b78:	2500      	movs	r5, #0
 8015b7a:	f104 0619 	add.w	r6, r4, #25
 8015b7e:	e7f5      	b.n	8015b6c <_printf_i+0x224>
 8015b80:	0818dd24 	.word	0x0818dd24
 8015b84:	0818dd35 	.word	0x0818dd35

08015b88 <_scanf_float>:
 8015b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b8c:	b087      	sub	sp, #28
 8015b8e:	4617      	mov	r7, r2
 8015b90:	468b      	mov	fp, r1
 8015b92:	4680      	mov	r8, r0
 8015b94:	9303      	str	r3, [sp, #12]
 8015b96:	460c      	mov	r4, r1
 8015b98:	688b      	ldr	r3, [r1, #8]
 8015b9a:	1e5a      	subs	r2, r3, #1
 8015b9c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8015ba0:	bf8b      	itete	hi
 8015ba2:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8015ba6:	2300      	movls	r3, #0
 8015ba8:	195b      	addhi	r3, r3, r5
 8015baa:	9302      	strls	r3, [sp, #8]
 8015bac:	f04f 0500 	mov.w	r5, #0
 8015bb0:	bf84      	itt	hi
 8015bb2:	9302      	strhi	r3, [sp, #8]
 8015bb4:	f240 135d 	movwhi	r3, #349	; 0x15d
 8015bb8:	46aa      	mov	sl, r5
 8015bba:	46a9      	mov	r9, r5
 8015bbc:	bf88      	it	hi
 8015bbe:	608b      	strhi	r3, [r1, #8]
 8015bc0:	680b      	ldr	r3, [r1, #0]
 8015bc2:	9501      	str	r5, [sp, #4]
 8015bc4:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8015bc8:	f84b 3b1c 	str.w	r3, [fp], #28
 8015bcc:	465e      	mov	r6, fp
 8015bce:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8015bd2:	68a2      	ldr	r2, [r4, #8]
 8015bd4:	b152      	cbz	r2, 8015bec <_scanf_float+0x64>
 8015bd6:	683b      	ldr	r3, [r7, #0]
 8015bd8:	781b      	ldrb	r3, [r3, #0]
 8015bda:	2b4e      	cmp	r3, #78	; 0x4e
 8015bdc:	d864      	bhi.n	8015ca8 <_scanf_float+0x120>
 8015bde:	2b40      	cmp	r3, #64	; 0x40
 8015be0:	d83c      	bhi.n	8015c5c <_scanf_float+0xd4>
 8015be2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8015be6:	b2c8      	uxtb	r0, r1
 8015be8:	280e      	cmp	r0, #14
 8015bea:	d93a      	bls.n	8015c62 <_scanf_float+0xda>
 8015bec:	f1b9 0f00 	cmp.w	r9, #0
 8015bf0:	d003      	beq.n	8015bfa <_scanf_float+0x72>
 8015bf2:	6823      	ldr	r3, [r4, #0]
 8015bf4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8015bf8:	6023      	str	r3, [r4, #0]
 8015bfa:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8015bfe:	f1ba 0f01 	cmp.w	sl, #1
 8015c02:	f200 8113 	bhi.w	8015e2c <_scanf_float+0x2a4>
 8015c06:	455e      	cmp	r6, fp
 8015c08:	f200 8105 	bhi.w	8015e16 <_scanf_float+0x28e>
 8015c0c:	2501      	movs	r5, #1
 8015c0e:	4628      	mov	r0, r5
 8015c10:	b007      	add	sp, #28
 8015c12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c16:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8015c1a:	2a0d      	cmp	r2, #13
 8015c1c:	d8e6      	bhi.n	8015bec <_scanf_float+0x64>
 8015c1e:	a101      	add	r1, pc, #4	; (adr r1, 8015c24 <_scanf_float+0x9c>)
 8015c20:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8015c24:	08015d63 	.word	0x08015d63
 8015c28:	08015bed 	.word	0x08015bed
 8015c2c:	08015bed 	.word	0x08015bed
 8015c30:	08015bed 	.word	0x08015bed
 8015c34:	08015dc3 	.word	0x08015dc3
 8015c38:	08015d9b 	.word	0x08015d9b
 8015c3c:	08015bed 	.word	0x08015bed
 8015c40:	08015bed 	.word	0x08015bed
 8015c44:	08015d71 	.word	0x08015d71
 8015c48:	08015bed 	.word	0x08015bed
 8015c4c:	08015bed 	.word	0x08015bed
 8015c50:	08015bed 	.word	0x08015bed
 8015c54:	08015bed 	.word	0x08015bed
 8015c58:	08015d29 	.word	0x08015d29
 8015c5c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8015c60:	e7db      	b.n	8015c1a <_scanf_float+0x92>
 8015c62:	290e      	cmp	r1, #14
 8015c64:	d8c2      	bhi.n	8015bec <_scanf_float+0x64>
 8015c66:	a001      	add	r0, pc, #4	; (adr r0, 8015c6c <_scanf_float+0xe4>)
 8015c68:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8015c6c:	08015d1b 	.word	0x08015d1b
 8015c70:	08015bed 	.word	0x08015bed
 8015c74:	08015d1b 	.word	0x08015d1b
 8015c78:	08015daf 	.word	0x08015daf
 8015c7c:	08015bed 	.word	0x08015bed
 8015c80:	08015cc9 	.word	0x08015cc9
 8015c84:	08015d05 	.word	0x08015d05
 8015c88:	08015d05 	.word	0x08015d05
 8015c8c:	08015d05 	.word	0x08015d05
 8015c90:	08015d05 	.word	0x08015d05
 8015c94:	08015d05 	.word	0x08015d05
 8015c98:	08015d05 	.word	0x08015d05
 8015c9c:	08015d05 	.word	0x08015d05
 8015ca0:	08015d05 	.word	0x08015d05
 8015ca4:	08015d05 	.word	0x08015d05
 8015ca8:	2b6e      	cmp	r3, #110	; 0x6e
 8015caa:	d809      	bhi.n	8015cc0 <_scanf_float+0x138>
 8015cac:	2b60      	cmp	r3, #96	; 0x60
 8015cae:	d8b2      	bhi.n	8015c16 <_scanf_float+0x8e>
 8015cb0:	2b54      	cmp	r3, #84	; 0x54
 8015cb2:	d077      	beq.n	8015da4 <_scanf_float+0x21c>
 8015cb4:	2b59      	cmp	r3, #89	; 0x59
 8015cb6:	d199      	bne.n	8015bec <_scanf_float+0x64>
 8015cb8:	2d07      	cmp	r5, #7
 8015cba:	d197      	bne.n	8015bec <_scanf_float+0x64>
 8015cbc:	2508      	movs	r5, #8
 8015cbe:	e029      	b.n	8015d14 <_scanf_float+0x18c>
 8015cc0:	2b74      	cmp	r3, #116	; 0x74
 8015cc2:	d06f      	beq.n	8015da4 <_scanf_float+0x21c>
 8015cc4:	2b79      	cmp	r3, #121	; 0x79
 8015cc6:	e7f6      	b.n	8015cb6 <_scanf_float+0x12e>
 8015cc8:	6821      	ldr	r1, [r4, #0]
 8015cca:	05c8      	lsls	r0, r1, #23
 8015ccc:	d51a      	bpl.n	8015d04 <_scanf_float+0x17c>
 8015cce:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8015cd2:	9b02      	ldr	r3, [sp, #8]
 8015cd4:	f109 0901 	add.w	r9, r9, #1
 8015cd8:	6021      	str	r1, [r4, #0]
 8015cda:	b11b      	cbz	r3, 8015ce4 <_scanf_float+0x15c>
 8015cdc:	3b01      	subs	r3, #1
 8015cde:	3201      	adds	r2, #1
 8015ce0:	9302      	str	r3, [sp, #8]
 8015ce2:	60a2      	str	r2, [r4, #8]
 8015ce4:	68a3      	ldr	r3, [r4, #8]
 8015ce6:	3b01      	subs	r3, #1
 8015ce8:	60a3      	str	r3, [r4, #8]
 8015cea:	6923      	ldr	r3, [r4, #16]
 8015cec:	3301      	adds	r3, #1
 8015cee:	6123      	str	r3, [r4, #16]
 8015cf0:	687b      	ldr	r3, [r7, #4]
 8015cf2:	3b01      	subs	r3, #1
 8015cf4:	2b00      	cmp	r3, #0
 8015cf6:	607b      	str	r3, [r7, #4]
 8015cf8:	f340 8084 	ble.w	8015e04 <_scanf_float+0x27c>
 8015cfc:	683b      	ldr	r3, [r7, #0]
 8015cfe:	3301      	adds	r3, #1
 8015d00:	603b      	str	r3, [r7, #0]
 8015d02:	e766      	b.n	8015bd2 <_scanf_float+0x4a>
 8015d04:	eb1a 0f05 	cmn.w	sl, r5
 8015d08:	f47f af70 	bne.w	8015bec <_scanf_float+0x64>
 8015d0c:	6822      	ldr	r2, [r4, #0]
 8015d0e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8015d12:	6022      	str	r2, [r4, #0]
 8015d14:	f806 3b01 	strb.w	r3, [r6], #1
 8015d18:	e7e4      	b.n	8015ce4 <_scanf_float+0x15c>
 8015d1a:	6822      	ldr	r2, [r4, #0]
 8015d1c:	0610      	lsls	r0, r2, #24
 8015d1e:	f57f af65 	bpl.w	8015bec <_scanf_float+0x64>
 8015d22:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8015d26:	e7f4      	b.n	8015d12 <_scanf_float+0x18a>
 8015d28:	f1ba 0f00 	cmp.w	sl, #0
 8015d2c:	d10e      	bne.n	8015d4c <_scanf_float+0x1c4>
 8015d2e:	f1b9 0f00 	cmp.w	r9, #0
 8015d32:	d10e      	bne.n	8015d52 <_scanf_float+0x1ca>
 8015d34:	6822      	ldr	r2, [r4, #0]
 8015d36:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8015d3a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8015d3e:	d108      	bne.n	8015d52 <_scanf_float+0x1ca>
 8015d40:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8015d44:	f04f 0a01 	mov.w	sl, #1
 8015d48:	6022      	str	r2, [r4, #0]
 8015d4a:	e7e3      	b.n	8015d14 <_scanf_float+0x18c>
 8015d4c:	f1ba 0f02 	cmp.w	sl, #2
 8015d50:	d055      	beq.n	8015dfe <_scanf_float+0x276>
 8015d52:	2d01      	cmp	r5, #1
 8015d54:	d002      	beq.n	8015d5c <_scanf_float+0x1d4>
 8015d56:	2d04      	cmp	r5, #4
 8015d58:	f47f af48 	bne.w	8015bec <_scanf_float+0x64>
 8015d5c:	3501      	adds	r5, #1
 8015d5e:	b2ed      	uxtb	r5, r5
 8015d60:	e7d8      	b.n	8015d14 <_scanf_float+0x18c>
 8015d62:	f1ba 0f01 	cmp.w	sl, #1
 8015d66:	f47f af41 	bne.w	8015bec <_scanf_float+0x64>
 8015d6a:	f04f 0a02 	mov.w	sl, #2
 8015d6e:	e7d1      	b.n	8015d14 <_scanf_float+0x18c>
 8015d70:	b97d      	cbnz	r5, 8015d92 <_scanf_float+0x20a>
 8015d72:	f1b9 0f00 	cmp.w	r9, #0
 8015d76:	f47f af3c 	bne.w	8015bf2 <_scanf_float+0x6a>
 8015d7a:	6822      	ldr	r2, [r4, #0]
 8015d7c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8015d80:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8015d84:	f47f af39 	bne.w	8015bfa <_scanf_float+0x72>
 8015d88:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8015d8c:	2501      	movs	r5, #1
 8015d8e:	6022      	str	r2, [r4, #0]
 8015d90:	e7c0      	b.n	8015d14 <_scanf_float+0x18c>
 8015d92:	2d03      	cmp	r5, #3
 8015d94:	d0e2      	beq.n	8015d5c <_scanf_float+0x1d4>
 8015d96:	2d05      	cmp	r5, #5
 8015d98:	e7de      	b.n	8015d58 <_scanf_float+0x1d0>
 8015d9a:	2d02      	cmp	r5, #2
 8015d9c:	f47f af26 	bne.w	8015bec <_scanf_float+0x64>
 8015da0:	2503      	movs	r5, #3
 8015da2:	e7b7      	b.n	8015d14 <_scanf_float+0x18c>
 8015da4:	2d06      	cmp	r5, #6
 8015da6:	f47f af21 	bne.w	8015bec <_scanf_float+0x64>
 8015daa:	2507      	movs	r5, #7
 8015dac:	e7b2      	b.n	8015d14 <_scanf_float+0x18c>
 8015dae:	6822      	ldr	r2, [r4, #0]
 8015db0:	0591      	lsls	r1, r2, #22
 8015db2:	f57f af1b 	bpl.w	8015bec <_scanf_float+0x64>
 8015db6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8015dba:	f8cd 9004 	str.w	r9, [sp, #4]
 8015dbe:	6022      	str	r2, [r4, #0]
 8015dc0:	e7a8      	b.n	8015d14 <_scanf_float+0x18c>
 8015dc2:	6822      	ldr	r2, [r4, #0]
 8015dc4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8015dc8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8015dcc:	d006      	beq.n	8015ddc <_scanf_float+0x254>
 8015dce:	0550      	lsls	r0, r2, #21
 8015dd0:	f57f af0c 	bpl.w	8015bec <_scanf_float+0x64>
 8015dd4:	f1b9 0f00 	cmp.w	r9, #0
 8015dd8:	f43f af0f 	beq.w	8015bfa <_scanf_float+0x72>
 8015ddc:	0591      	lsls	r1, r2, #22
 8015dde:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8015de2:	bf58      	it	pl
 8015de4:	9901      	ldrpl	r1, [sp, #4]
 8015de6:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8015dea:	bf58      	it	pl
 8015dec:	eba9 0101 	subpl.w	r1, r9, r1
 8015df0:	6022      	str	r2, [r4, #0]
 8015df2:	f04f 0900 	mov.w	r9, #0
 8015df6:	bf58      	it	pl
 8015df8:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8015dfc:	e78a      	b.n	8015d14 <_scanf_float+0x18c>
 8015dfe:	f04f 0a03 	mov.w	sl, #3
 8015e02:	e787      	b.n	8015d14 <_scanf_float+0x18c>
 8015e04:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8015e08:	4639      	mov	r1, r7
 8015e0a:	4640      	mov	r0, r8
 8015e0c:	4798      	blx	r3
 8015e0e:	2800      	cmp	r0, #0
 8015e10:	f43f aedf 	beq.w	8015bd2 <_scanf_float+0x4a>
 8015e14:	e6ea      	b.n	8015bec <_scanf_float+0x64>
 8015e16:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015e1a:	463a      	mov	r2, r7
 8015e1c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8015e20:	4640      	mov	r0, r8
 8015e22:	4798      	blx	r3
 8015e24:	6923      	ldr	r3, [r4, #16]
 8015e26:	3b01      	subs	r3, #1
 8015e28:	6123      	str	r3, [r4, #16]
 8015e2a:	e6ec      	b.n	8015c06 <_scanf_float+0x7e>
 8015e2c:	1e6b      	subs	r3, r5, #1
 8015e2e:	2b06      	cmp	r3, #6
 8015e30:	d825      	bhi.n	8015e7e <_scanf_float+0x2f6>
 8015e32:	2d02      	cmp	r5, #2
 8015e34:	d836      	bhi.n	8015ea4 <_scanf_float+0x31c>
 8015e36:	455e      	cmp	r6, fp
 8015e38:	f67f aee8 	bls.w	8015c0c <_scanf_float+0x84>
 8015e3c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015e40:	463a      	mov	r2, r7
 8015e42:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8015e46:	4640      	mov	r0, r8
 8015e48:	4798      	blx	r3
 8015e4a:	6923      	ldr	r3, [r4, #16]
 8015e4c:	3b01      	subs	r3, #1
 8015e4e:	6123      	str	r3, [r4, #16]
 8015e50:	e7f1      	b.n	8015e36 <_scanf_float+0x2ae>
 8015e52:	9802      	ldr	r0, [sp, #8]
 8015e54:	463a      	mov	r2, r7
 8015e56:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015e5a:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8015e5e:	9002      	str	r0, [sp, #8]
 8015e60:	4640      	mov	r0, r8
 8015e62:	4798      	blx	r3
 8015e64:	6923      	ldr	r3, [r4, #16]
 8015e66:	3b01      	subs	r3, #1
 8015e68:	6123      	str	r3, [r4, #16]
 8015e6a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8015e6e:	fa5f fa8a 	uxtb.w	sl, sl
 8015e72:	f1ba 0f02 	cmp.w	sl, #2
 8015e76:	d1ec      	bne.n	8015e52 <_scanf_float+0x2ca>
 8015e78:	3d03      	subs	r5, #3
 8015e7a:	b2ed      	uxtb	r5, r5
 8015e7c:	1b76      	subs	r6, r6, r5
 8015e7e:	6823      	ldr	r3, [r4, #0]
 8015e80:	05da      	lsls	r2, r3, #23
 8015e82:	d52e      	bpl.n	8015ee2 <_scanf_float+0x35a>
 8015e84:	055b      	lsls	r3, r3, #21
 8015e86:	d510      	bpl.n	8015eaa <_scanf_float+0x322>
 8015e88:	455e      	cmp	r6, fp
 8015e8a:	f67f aebf 	bls.w	8015c0c <_scanf_float+0x84>
 8015e8e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015e92:	463a      	mov	r2, r7
 8015e94:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8015e98:	4640      	mov	r0, r8
 8015e9a:	4798      	blx	r3
 8015e9c:	6923      	ldr	r3, [r4, #16]
 8015e9e:	3b01      	subs	r3, #1
 8015ea0:	6123      	str	r3, [r4, #16]
 8015ea2:	e7f1      	b.n	8015e88 <_scanf_float+0x300>
 8015ea4:	46aa      	mov	sl, r5
 8015ea6:	9602      	str	r6, [sp, #8]
 8015ea8:	e7df      	b.n	8015e6a <_scanf_float+0x2e2>
 8015eaa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8015eae:	1e75      	subs	r5, r6, #1
 8015eb0:	6923      	ldr	r3, [r4, #16]
 8015eb2:	2965      	cmp	r1, #101	; 0x65
 8015eb4:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8015eb8:	6123      	str	r3, [r4, #16]
 8015eba:	d00c      	beq.n	8015ed6 <_scanf_float+0x34e>
 8015ebc:	2945      	cmp	r1, #69	; 0x45
 8015ebe:	d00a      	beq.n	8015ed6 <_scanf_float+0x34e>
 8015ec0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015ec4:	463a      	mov	r2, r7
 8015ec6:	4640      	mov	r0, r8
 8015ec8:	1eb5      	subs	r5, r6, #2
 8015eca:	4798      	blx	r3
 8015ecc:	6923      	ldr	r3, [r4, #16]
 8015ece:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8015ed2:	3b01      	subs	r3, #1
 8015ed4:	6123      	str	r3, [r4, #16]
 8015ed6:	462e      	mov	r6, r5
 8015ed8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015edc:	463a      	mov	r2, r7
 8015ede:	4640      	mov	r0, r8
 8015ee0:	4798      	blx	r3
 8015ee2:	6825      	ldr	r5, [r4, #0]
 8015ee4:	f015 0510 	ands.w	r5, r5, #16
 8015ee8:	d158      	bne.n	8015f9c <_scanf_float+0x414>
 8015eea:	7035      	strb	r5, [r6, #0]
 8015eec:	6823      	ldr	r3, [r4, #0]
 8015eee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8015ef2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8015ef6:	d11c      	bne.n	8015f32 <_scanf_float+0x3aa>
 8015ef8:	9b01      	ldr	r3, [sp, #4]
 8015efa:	454b      	cmp	r3, r9
 8015efc:	eba3 0209 	sub.w	r2, r3, r9
 8015f00:	d124      	bne.n	8015f4c <_scanf_float+0x3c4>
 8015f02:	2200      	movs	r2, #0
 8015f04:	4659      	mov	r1, fp
 8015f06:	4640      	mov	r0, r8
 8015f08:	f001 f88a 	bl	8017020 <_strtod_r>
 8015f0c:	6821      	ldr	r1, [r4, #0]
 8015f0e:	9b03      	ldr	r3, [sp, #12]
 8015f10:	f011 0f02 	tst.w	r1, #2
 8015f14:	681b      	ldr	r3, [r3, #0]
 8015f16:	ec57 6b10 	vmov	r6, r7, d0
 8015f1a:	f103 0204 	add.w	r2, r3, #4
 8015f1e:	d020      	beq.n	8015f62 <_scanf_float+0x3da>
 8015f20:	9903      	ldr	r1, [sp, #12]
 8015f22:	600a      	str	r2, [r1, #0]
 8015f24:	681b      	ldr	r3, [r3, #0]
 8015f26:	e9c3 6700 	strd	r6, r7, [r3]
 8015f2a:	68e3      	ldr	r3, [r4, #12]
 8015f2c:	3301      	adds	r3, #1
 8015f2e:	60e3      	str	r3, [r4, #12]
 8015f30:	e66d      	b.n	8015c0e <_scanf_float+0x86>
 8015f32:	9b04      	ldr	r3, [sp, #16]
 8015f34:	2b00      	cmp	r3, #0
 8015f36:	d0e4      	beq.n	8015f02 <_scanf_float+0x37a>
 8015f38:	9905      	ldr	r1, [sp, #20]
 8015f3a:	230a      	movs	r3, #10
 8015f3c:	462a      	mov	r2, r5
 8015f3e:	4640      	mov	r0, r8
 8015f40:	3101      	adds	r1, #1
 8015f42:	f001 f8f5 	bl	8017130 <_strtol_r>
 8015f46:	9b04      	ldr	r3, [sp, #16]
 8015f48:	9e05      	ldr	r6, [sp, #20]
 8015f4a:	1ac2      	subs	r2, r0, r3
 8015f4c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8015f50:	4913      	ldr	r1, [pc, #76]	; (8015fa0 <_scanf_float+0x418>)
 8015f52:	429e      	cmp	r6, r3
 8015f54:	bf28      	it	cs
 8015f56:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8015f5a:	4630      	mov	r0, r6
 8015f5c:	f000 f91a 	bl	8016194 <siprintf>
 8015f60:	e7cf      	b.n	8015f02 <_scanf_float+0x37a>
 8015f62:	f011 0f04 	tst.w	r1, #4
 8015f66:	9903      	ldr	r1, [sp, #12]
 8015f68:	600a      	str	r2, [r1, #0]
 8015f6a:	d1db      	bne.n	8015f24 <_scanf_float+0x39c>
 8015f6c:	f8d3 8000 	ldr.w	r8, [r3]
 8015f70:	ee10 2a10 	vmov	r2, s0
 8015f74:	463b      	mov	r3, r7
 8015f76:	ee10 0a10 	vmov	r0, s0
 8015f7a:	4639      	mov	r1, r7
 8015f7c:	f7ea fde4 	bl	8000b48 <__aeabi_dcmpun>
 8015f80:	b128      	cbz	r0, 8015f8e <_scanf_float+0x406>
 8015f82:	4808      	ldr	r0, [pc, #32]	; (8015fa4 <_scanf_float+0x41c>)
 8015f84:	f001 fb08 	bl	8017598 <nanf>
 8015f88:	ed88 0a00 	vstr	s0, [r8]
 8015f8c:	e7cd      	b.n	8015f2a <_scanf_float+0x3a2>
 8015f8e:	4630      	mov	r0, r6
 8015f90:	4639      	mov	r1, r7
 8015f92:	f7ea fe37 	bl	8000c04 <__aeabi_d2f>
 8015f96:	f8c8 0000 	str.w	r0, [r8]
 8015f9a:	e7c6      	b.n	8015f2a <_scanf_float+0x3a2>
 8015f9c:	2500      	movs	r5, #0
 8015f9e:	e636      	b.n	8015c0e <_scanf_float+0x86>
 8015fa0:	0818dd46 	.word	0x0818dd46
 8015fa4:	0818e157 	.word	0x0818e157

08015fa8 <setbuf>:
 8015fa8:	fab1 f281 	clz	r2, r1
 8015fac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015fb0:	0952      	lsrs	r2, r2, #5
 8015fb2:	0052      	lsls	r2, r2, #1
 8015fb4:	f000 b800 	b.w	8015fb8 <setvbuf>

08015fb8 <setvbuf>:
 8015fb8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015fbc:	461d      	mov	r5, r3
 8015fbe:	4b54      	ldr	r3, [pc, #336]	; (8016110 <setvbuf+0x158>)
 8015fc0:	4604      	mov	r4, r0
 8015fc2:	460e      	mov	r6, r1
 8015fc4:	681f      	ldr	r7, [r3, #0]
 8015fc6:	4690      	mov	r8, r2
 8015fc8:	b127      	cbz	r7, 8015fd4 <setvbuf+0x1c>
 8015fca:	6a3b      	ldr	r3, [r7, #32]
 8015fcc:	b913      	cbnz	r3, 8015fd4 <setvbuf+0x1c>
 8015fce:	4638      	mov	r0, r7
 8015fd0:	f000 f9fe 	bl	80163d0 <__sinit>
 8015fd4:	f1b8 0f02 	cmp.w	r8, #2
 8015fd8:	d006      	beq.n	8015fe8 <setvbuf+0x30>
 8015fda:	f1b8 0f01 	cmp.w	r8, #1
 8015fde:	f200 8093 	bhi.w	8016108 <setvbuf+0x150>
 8015fe2:	2d00      	cmp	r5, #0
 8015fe4:	f2c0 8090 	blt.w	8016108 <setvbuf+0x150>
 8015fe8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015fea:	07da      	lsls	r2, r3, #31
 8015fec:	d405      	bmi.n	8015ffa <setvbuf+0x42>
 8015fee:	89a3      	ldrh	r3, [r4, #12]
 8015ff0:	059b      	lsls	r3, r3, #22
 8015ff2:	d402      	bmi.n	8015ffa <setvbuf+0x42>
 8015ff4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015ff6:	f001 faa0 	bl	801753a <__retarget_lock_acquire_recursive>
 8015ffa:	4621      	mov	r1, r4
 8015ffc:	4638      	mov	r0, r7
 8015ffe:	f003 fb7f 	bl	8019700 <_fflush_r>
 8016002:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016004:	b141      	cbz	r1, 8016018 <setvbuf+0x60>
 8016006:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801600a:	4299      	cmp	r1, r3
 801600c:	d002      	beq.n	8016014 <setvbuf+0x5c>
 801600e:	4638      	mov	r0, r7
 8016010:	f002 f94a 	bl	80182a8 <_free_r>
 8016014:	2300      	movs	r3, #0
 8016016:	6363      	str	r3, [r4, #52]	; 0x34
 8016018:	2300      	movs	r3, #0
 801601a:	61a3      	str	r3, [r4, #24]
 801601c:	6063      	str	r3, [r4, #4]
 801601e:	89a3      	ldrh	r3, [r4, #12]
 8016020:	0618      	lsls	r0, r3, #24
 8016022:	d503      	bpl.n	801602c <setvbuf+0x74>
 8016024:	6921      	ldr	r1, [r4, #16]
 8016026:	4638      	mov	r0, r7
 8016028:	f002 f93e 	bl	80182a8 <_free_r>
 801602c:	89a3      	ldrh	r3, [r4, #12]
 801602e:	f1b8 0f02 	cmp.w	r8, #2
 8016032:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8016036:	f023 0303 	bic.w	r3, r3, #3
 801603a:	81a3      	strh	r3, [r4, #12]
 801603c:	d05e      	beq.n	80160fc <setvbuf+0x144>
 801603e:	ab01      	add	r3, sp, #4
 8016040:	466a      	mov	r2, sp
 8016042:	4621      	mov	r1, r4
 8016044:	4638      	mov	r0, r7
 8016046:	f001 f893 	bl	8017170 <__swhatbuf_r>
 801604a:	89a3      	ldrh	r3, [r4, #12]
 801604c:	4318      	orrs	r0, r3
 801604e:	81a0      	strh	r0, [r4, #12]
 8016050:	bb2d      	cbnz	r5, 801609e <setvbuf+0xe6>
 8016052:	9d00      	ldr	r5, [sp, #0]
 8016054:	4628      	mov	r0, r5
 8016056:	f7ff fb55 	bl	8015704 <malloc>
 801605a:	4606      	mov	r6, r0
 801605c:	2800      	cmp	r0, #0
 801605e:	d14f      	bne.n	8016100 <setvbuf+0x148>
 8016060:	f8dd 9000 	ldr.w	r9, [sp]
 8016064:	45a9      	cmp	r9, r5
 8016066:	d13d      	bne.n	80160e4 <setvbuf+0x12c>
 8016068:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801606c:	2200      	movs	r2, #0
 801606e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016072:	60a2      	str	r2, [r4, #8]
 8016074:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8016078:	f043 0302 	orr.w	r3, r3, #2
 801607c:	6022      	str	r2, [r4, #0]
 801607e:	6122      	str	r2, [r4, #16]
 8016080:	2201      	movs	r2, #1
 8016082:	81a3      	strh	r3, [r4, #12]
 8016084:	6162      	str	r2, [r4, #20]
 8016086:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016088:	07d1      	lsls	r1, r2, #31
 801608a:	d404      	bmi.n	8016096 <setvbuf+0xde>
 801608c:	059b      	lsls	r3, r3, #22
 801608e:	d402      	bmi.n	8016096 <setvbuf+0xde>
 8016090:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016092:	f001 fa53 	bl	801753c <__retarget_lock_release_recursive>
 8016096:	4628      	mov	r0, r5
 8016098:	b003      	add	sp, #12
 801609a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801609e:	2e00      	cmp	r6, #0
 80160a0:	d0d8      	beq.n	8016054 <setvbuf+0x9c>
 80160a2:	6a3b      	ldr	r3, [r7, #32]
 80160a4:	b913      	cbnz	r3, 80160ac <setvbuf+0xf4>
 80160a6:	4638      	mov	r0, r7
 80160a8:	f000 f992 	bl	80163d0 <__sinit>
 80160ac:	f1b8 0f01 	cmp.w	r8, #1
 80160b0:	6026      	str	r6, [r4, #0]
 80160b2:	bf02      	ittt	eq
 80160b4:	89a3      	ldrheq	r3, [r4, #12]
 80160b6:	f043 0301 	orreq.w	r3, r3, #1
 80160ba:	81a3      	strheq	r3, [r4, #12]
 80160bc:	89a3      	ldrh	r3, [r4, #12]
 80160be:	f013 0208 	ands.w	r2, r3, #8
 80160c2:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80160c6:	d01d      	beq.n	8016104 <setvbuf+0x14c>
 80160c8:	07da      	lsls	r2, r3, #31
 80160ca:	bf45      	ittet	mi
 80160cc:	2200      	movmi	r2, #0
 80160ce:	426d      	negmi	r5, r5
 80160d0:	60a5      	strpl	r5, [r4, #8]
 80160d2:	60a2      	strmi	r2, [r4, #8]
 80160d4:	bf48      	it	mi
 80160d6:	61a5      	strmi	r5, [r4, #24]
 80160d8:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80160da:	f015 0501 	ands.w	r5, r5, #1
 80160de:	d0d5      	beq.n	801608c <setvbuf+0xd4>
 80160e0:	2500      	movs	r5, #0
 80160e2:	e7d8      	b.n	8016096 <setvbuf+0xde>
 80160e4:	4648      	mov	r0, r9
 80160e6:	f7ff fb0d 	bl	8015704 <malloc>
 80160ea:	4606      	mov	r6, r0
 80160ec:	2800      	cmp	r0, #0
 80160ee:	d0bb      	beq.n	8016068 <setvbuf+0xb0>
 80160f0:	89a3      	ldrh	r3, [r4, #12]
 80160f2:	464d      	mov	r5, r9
 80160f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80160f8:	81a3      	strh	r3, [r4, #12]
 80160fa:	e7d2      	b.n	80160a2 <setvbuf+0xea>
 80160fc:	2500      	movs	r5, #0
 80160fe:	e7b5      	b.n	801606c <setvbuf+0xb4>
 8016100:	46a9      	mov	r9, r5
 8016102:	e7f5      	b.n	80160f0 <setvbuf+0x138>
 8016104:	60a2      	str	r2, [r4, #8]
 8016106:	e7e7      	b.n	80160d8 <setvbuf+0x120>
 8016108:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801610c:	e7c3      	b.n	8016096 <setvbuf+0xde>
 801610e:	bf00      	nop
 8016110:	200002c8 	.word	0x200002c8

08016114 <sniprintf>:
 8016114:	b40c      	push	{r2, r3}
 8016116:	4b18      	ldr	r3, [pc, #96]	; (8016178 <sniprintf+0x64>)
 8016118:	b530      	push	{r4, r5, lr}
 801611a:	1e0c      	subs	r4, r1, #0
 801611c:	b09d      	sub	sp, #116	; 0x74
 801611e:	681d      	ldr	r5, [r3, #0]
 8016120:	da08      	bge.n	8016134 <sniprintf+0x20>
 8016122:	238b      	movs	r3, #139	; 0x8b
 8016124:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016128:	602b      	str	r3, [r5, #0]
 801612a:	b01d      	add	sp, #116	; 0x74
 801612c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016130:	b002      	add	sp, #8
 8016132:	4770      	bx	lr
 8016134:	f44f 7302 	mov.w	r3, #520	; 0x208
 8016138:	9002      	str	r0, [sp, #8]
 801613a:	9006      	str	r0, [sp, #24]
 801613c:	a902      	add	r1, sp, #8
 801613e:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016142:	bf14      	ite	ne
 8016144:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8016148:	4623      	moveq	r3, r4
 801614a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801614c:	4628      	mov	r0, r5
 801614e:	9304      	str	r3, [sp, #16]
 8016150:	9307      	str	r3, [sp, #28]
 8016152:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016156:	f8ad 3016 	strh.w	r3, [sp, #22]
 801615a:	ab21      	add	r3, sp, #132	; 0x84
 801615c:	9301      	str	r3, [sp, #4]
 801615e:	f002 fc9f 	bl	8018aa0 <_svfiprintf_r>
 8016162:	1c43      	adds	r3, r0, #1
 8016164:	bfbc      	itt	lt
 8016166:	238b      	movlt	r3, #139	; 0x8b
 8016168:	602b      	strlt	r3, [r5, #0]
 801616a:	2c00      	cmp	r4, #0
 801616c:	d0dd      	beq.n	801612a <sniprintf+0x16>
 801616e:	9b02      	ldr	r3, [sp, #8]
 8016170:	2200      	movs	r2, #0
 8016172:	701a      	strb	r2, [r3, #0]
 8016174:	e7d9      	b.n	801612a <sniprintf+0x16>
 8016176:	bf00      	nop
 8016178:	200002c8 	.word	0x200002c8

0801617c <__malloc_lock>:
 801617c:	4801      	ldr	r0, [pc, #4]	; (8016184 <__malloc_lock+0x8>)
 801617e:	f001 b9dc 	b.w	801753a <__retarget_lock_acquire_recursive>
 8016182:	bf00      	nop
 8016184:	20003568 	.word	0x20003568

08016188 <__malloc_unlock>:
 8016188:	4801      	ldr	r0, [pc, #4]	; (8016190 <__malloc_unlock+0x8>)
 801618a:	f001 b9d7 	b.w	801753c <__retarget_lock_release_recursive>
 801618e:	bf00      	nop
 8016190:	20003568 	.word	0x20003568

08016194 <siprintf>:
 8016194:	b40e      	push	{r1, r2, r3}
 8016196:	b500      	push	{lr}
 8016198:	b09c      	sub	sp, #112	; 0x70
 801619a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801619e:	ab1d      	add	r3, sp, #116	; 0x74
 80161a0:	9002      	str	r0, [sp, #8]
 80161a2:	9006      	str	r0, [sp, #24]
 80161a4:	9107      	str	r1, [sp, #28]
 80161a6:	9104      	str	r1, [sp, #16]
 80161a8:	4808      	ldr	r0, [pc, #32]	; (80161cc <siprintf+0x38>)
 80161aa:	4909      	ldr	r1, [pc, #36]	; (80161d0 <siprintf+0x3c>)
 80161ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80161b0:	9105      	str	r1, [sp, #20]
 80161b2:	a902      	add	r1, sp, #8
 80161b4:	6800      	ldr	r0, [r0, #0]
 80161b6:	9301      	str	r3, [sp, #4]
 80161b8:	f002 fc72 	bl	8018aa0 <_svfiprintf_r>
 80161bc:	9b02      	ldr	r3, [sp, #8]
 80161be:	2200      	movs	r2, #0
 80161c0:	701a      	strb	r2, [r3, #0]
 80161c2:	b01c      	add	sp, #112	; 0x70
 80161c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80161c8:	b003      	add	sp, #12
 80161ca:	4770      	bx	lr
 80161cc:	200002c8 	.word	0x200002c8
 80161d0:	ffff0208 	.word	0xffff0208

080161d4 <siscanf>:
 80161d4:	b40e      	push	{r1, r2, r3}
 80161d6:	b510      	push	{r4, lr}
 80161d8:	b09f      	sub	sp, #124	; 0x7c
 80161da:	f44f 7101 	mov.w	r1, #516	; 0x204
 80161de:	ac21      	add	r4, sp, #132	; 0x84
 80161e0:	f8ad 101c 	strh.w	r1, [sp, #28]
 80161e4:	9004      	str	r0, [sp, #16]
 80161e6:	f854 2b04 	ldr.w	r2, [r4], #4
 80161ea:	9008      	str	r0, [sp, #32]
 80161ec:	9201      	str	r2, [sp, #4]
 80161ee:	f7ea f843 	bl	8000278 <strlen>
 80161f2:	4b0c      	ldr	r3, [pc, #48]	; (8016224 <siscanf+0x50>)
 80161f4:	a904      	add	r1, sp, #16
 80161f6:	9005      	str	r0, [sp, #20]
 80161f8:	930d      	str	r3, [sp, #52]	; 0x34
 80161fa:	2300      	movs	r3, #0
 80161fc:	9009      	str	r0, [sp, #36]	; 0x24
 80161fe:	9311      	str	r3, [sp, #68]	; 0x44
 8016200:	9316      	str	r3, [sp, #88]	; 0x58
 8016202:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016206:	4808      	ldr	r0, [pc, #32]	; (8016228 <siscanf+0x54>)
 8016208:	f8ad 301e 	strh.w	r3, [sp, #30]
 801620c:	4623      	mov	r3, r4
 801620e:	9a01      	ldr	r2, [sp, #4]
 8016210:	6800      	ldr	r0, [r0, #0]
 8016212:	9403      	str	r4, [sp, #12]
 8016214:	f002 fd9c 	bl	8018d50 <__ssvfiscanf_r>
 8016218:	b01f      	add	sp, #124	; 0x7c
 801621a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801621e:	b003      	add	sp, #12
 8016220:	4770      	bx	lr
 8016222:	bf00      	nop
 8016224:	0801624f 	.word	0x0801624f
 8016228:	200002c8 	.word	0x200002c8

0801622c <__sread>:
 801622c:	b510      	push	{r4, lr}
 801622e:	460c      	mov	r4, r1
 8016230:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016234:	f001 f922 	bl	801747c <_read_r>
 8016238:	2800      	cmp	r0, #0
 801623a:	bfab      	itete	ge
 801623c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801623e:	89a3      	ldrhlt	r3, [r4, #12]
 8016240:	181b      	addge	r3, r3, r0
 8016242:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016246:	bfac      	ite	ge
 8016248:	6563      	strge	r3, [r4, #84]	; 0x54
 801624a:	81a3      	strhlt	r3, [r4, #12]
 801624c:	bd10      	pop	{r4, pc}

0801624e <__seofread>:
 801624e:	2000      	movs	r0, #0
 8016250:	4770      	bx	lr

08016252 <__swrite>:
 8016252:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016256:	461f      	mov	r7, r3
 8016258:	898b      	ldrh	r3, [r1, #12]
 801625a:	4605      	mov	r5, r0
 801625c:	460c      	mov	r4, r1
 801625e:	05db      	lsls	r3, r3, #23
 8016260:	4616      	mov	r6, r2
 8016262:	d505      	bpl.n	8016270 <__swrite+0x1e>
 8016264:	2302      	movs	r3, #2
 8016266:	2200      	movs	r2, #0
 8016268:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801626c:	f001 f8f4 	bl	8017458 <_lseek_r>
 8016270:	89a3      	ldrh	r3, [r4, #12]
 8016272:	4632      	mov	r2, r6
 8016274:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016278:	4628      	mov	r0, r5
 801627a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801627e:	81a3      	strh	r3, [r4, #12]
 8016280:	463b      	mov	r3, r7
 8016282:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016286:	f001 b91b 	b.w	80174c0 <_write_r>

0801628a <__sseek>:
 801628a:	b510      	push	{r4, lr}
 801628c:	460c      	mov	r4, r1
 801628e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016292:	f001 f8e1 	bl	8017458 <_lseek_r>
 8016296:	1c43      	adds	r3, r0, #1
 8016298:	89a3      	ldrh	r3, [r4, #12]
 801629a:	bf15      	itete	ne
 801629c:	6560      	strne	r0, [r4, #84]	; 0x54
 801629e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80162a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80162a6:	81a3      	strheq	r3, [r4, #12]
 80162a8:	bf18      	it	ne
 80162aa:	81a3      	strhne	r3, [r4, #12]
 80162ac:	bd10      	pop	{r4, pc}

080162ae <__sclose>:
 80162ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80162b2:	f001 b89f 	b.w	80173f4 <_close_r>
	...

080162b8 <std>:
 80162b8:	2300      	movs	r3, #0
 80162ba:	b510      	push	{r4, lr}
 80162bc:	4604      	mov	r4, r0
 80162be:	6083      	str	r3, [r0, #8]
 80162c0:	8181      	strh	r1, [r0, #12]
 80162c2:	4619      	mov	r1, r3
 80162c4:	6643      	str	r3, [r0, #100]	; 0x64
 80162c6:	81c2      	strh	r2, [r0, #14]
 80162c8:	2208      	movs	r2, #8
 80162ca:	6183      	str	r3, [r0, #24]
 80162cc:	e9c0 3300 	strd	r3, r3, [r0]
 80162d0:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80162d4:	305c      	adds	r0, #92	; 0x5c
 80162d6:	f001 f881 	bl	80173dc <memset>
 80162da:	4b0d      	ldr	r3, [pc, #52]	; (8016310 <std+0x58>)
 80162dc:	6224      	str	r4, [r4, #32]
 80162de:	6263      	str	r3, [r4, #36]	; 0x24
 80162e0:	4b0c      	ldr	r3, [pc, #48]	; (8016314 <std+0x5c>)
 80162e2:	62a3      	str	r3, [r4, #40]	; 0x28
 80162e4:	4b0c      	ldr	r3, [pc, #48]	; (8016318 <std+0x60>)
 80162e6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80162e8:	4b0c      	ldr	r3, [pc, #48]	; (801631c <std+0x64>)
 80162ea:	6323      	str	r3, [r4, #48]	; 0x30
 80162ec:	4b0c      	ldr	r3, [pc, #48]	; (8016320 <std+0x68>)
 80162ee:	429c      	cmp	r4, r3
 80162f0:	d006      	beq.n	8016300 <std+0x48>
 80162f2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80162f6:	4294      	cmp	r4, r2
 80162f8:	d002      	beq.n	8016300 <std+0x48>
 80162fa:	33d0      	adds	r3, #208	; 0xd0
 80162fc:	429c      	cmp	r4, r3
 80162fe:	d105      	bne.n	801630c <std+0x54>
 8016300:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016304:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016308:	f001 b916 	b.w	8017538 <__retarget_lock_init_recursive>
 801630c:	bd10      	pop	{r4, pc}
 801630e:	bf00      	nop
 8016310:	0801622d 	.word	0x0801622d
 8016314:	08016253 	.word	0x08016253
 8016318:	0801628b 	.word	0x0801628b
 801631c:	080162af 	.word	0x080162af
 8016320:	20003428 	.word	0x20003428

08016324 <stdio_exit_handler>:
 8016324:	4a02      	ldr	r2, [pc, #8]	; (8016330 <stdio_exit_handler+0xc>)
 8016326:	4903      	ldr	r1, [pc, #12]	; (8016334 <stdio_exit_handler+0x10>)
 8016328:	4803      	ldr	r0, [pc, #12]	; (8016338 <stdio_exit_handler+0x14>)
 801632a:	f000 bf03 	b.w	8017134 <_fwalk_sglue>
 801632e:	bf00      	nop
 8016330:	20000104 	.word	0x20000104
 8016334:	08019701 	.word	0x08019701
 8016338:	2000027c 	.word	0x2000027c

0801633c <cleanup_stdio>:
 801633c:	6841      	ldr	r1, [r0, #4]
 801633e:	4b0c      	ldr	r3, [pc, #48]	; (8016370 <cleanup_stdio+0x34>)
 8016340:	4299      	cmp	r1, r3
 8016342:	b510      	push	{r4, lr}
 8016344:	4604      	mov	r4, r0
 8016346:	d001      	beq.n	801634c <cleanup_stdio+0x10>
 8016348:	f003 f9da 	bl	8019700 <_fflush_r>
 801634c:	68a1      	ldr	r1, [r4, #8]
 801634e:	4b09      	ldr	r3, [pc, #36]	; (8016374 <cleanup_stdio+0x38>)
 8016350:	4299      	cmp	r1, r3
 8016352:	d002      	beq.n	801635a <cleanup_stdio+0x1e>
 8016354:	4620      	mov	r0, r4
 8016356:	f003 f9d3 	bl	8019700 <_fflush_r>
 801635a:	68e1      	ldr	r1, [r4, #12]
 801635c:	4b06      	ldr	r3, [pc, #24]	; (8016378 <cleanup_stdio+0x3c>)
 801635e:	4299      	cmp	r1, r3
 8016360:	d004      	beq.n	801636c <cleanup_stdio+0x30>
 8016362:	4620      	mov	r0, r4
 8016364:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016368:	f003 b9ca 	b.w	8019700 <_fflush_r>
 801636c:	bd10      	pop	{r4, pc}
 801636e:	bf00      	nop
 8016370:	20003428 	.word	0x20003428
 8016374:	20003490 	.word	0x20003490
 8016378:	200034f8 	.word	0x200034f8

0801637c <global_stdio_init.part.0>:
 801637c:	b510      	push	{r4, lr}
 801637e:	4b0b      	ldr	r3, [pc, #44]	; (80163ac <global_stdio_init.part.0+0x30>)
 8016380:	2104      	movs	r1, #4
 8016382:	4c0b      	ldr	r4, [pc, #44]	; (80163b0 <global_stdio_init.part.0+0x34>)
 8016384:	4a0b      	ldr	r2, [pc, #44]	; (80163b4 <global_stdio_init.part.0+0x38>)
 8016386:	4620      	mov	r0, r4
 8016388:	601a      	str	r2, [r3, #0]
 801638a:	2200      	movs	r2, #0
 801638c:	f7ff ff94 	bl	80162b8 <std>
 8016390:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8016394:	2201      	movs	r2, #1
 8016396:	2109      	movs	r1, #9
 8016398:	f7ff ff8e 	bl	80162b8 <std>
 801639c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80163a0:	2202      	movs	r2, #2
 80163a2:	2112      	movs	r1, #18
 80163a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80163a8:	f7ff bf86 	b.w	80162b8 <std>
 80163ac:	20003560 	.word	0x20003560
 80163b0:	20003428 	.word	0x20003428
 80163b4:	08016325 	.word	0x08016325

080163b8 <__sfp_lock_acquire>:
 80163b8:	4801      	ldr	r0, [pc, #4]	; (80163c0 <__sfp_lock_acquire+0x8>)
 80163ba:	f001 b8be 	b.w	801753a <__retarget_lock_acquire_recursive>
 80163be:	bf00      	nop
 80163c0:	20003569 	.word	0x20003569

080163c4 <__sfp_lock_release>:
 80163c4:	4801      	ldr	r0, [pc, #4]	; (80163cc <__sfp_lock_release+0x8>)
 80163c6:	f001 b8b9 	b.w	801753c <__retarget_lock_release_recursive>
 80163ca:	bf00      	nop
 80163cc:	20003569 	.word	0x20003569

080163d0 <__sinit>:
 80163d0:	b510      	push	{r4, lr}
 80163d2:	4604      	mov	r4, r0
 80163d4:	f7ff fff0 	bl	80163b8 <__sfp_lock_acquire>
 80163d8:	6a23      	ldr	r3, [r4, #32]
 80163da:	b11b      	cbz	r3, 80163e4 <__sinit+0x14>
 80163dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80163e0:	f7ff bff0 	b.w	80163c4 <__sfp_lock_release>
 80163e4:	4b04      	ldr	r3, [pc, #16]	; (80163f8 <__sinit+0x28>)
 80163e6:	6223      	str	r3, [r4, #32]
 80163e8:	4b04      	ldr	r3, [pc, #16]	; (80163fc <__sinit+0x2c>)
 80163ea:	681b      	ldr	r3, [r3, #0]
 80163ec:	2b00      	cmp	r3, #0
 80163ee:	d1f5      	bne.n	80163dc <__sinit+0xc>
 80163f0:	f7ff ffc4 	bl	801637c <global_stdio_init.part.0>
 80163f4:	e7f2      	b.n	80163dc <__sinit+0xc>
 80163f6:	bf00      	nop
 80163f8:	0801633d 	.word	0x0801633d
 80163fc:	20003560 	.word	0x20003560

08016400 <sulp>:
 8016400:	b570      	push	{r4, r5, r6, lr}
 8016402:	4604      	mov	r4, r0
 8016404:	460d      	mov	r5, r1
 8016406:	4616      	mov	r6, r2
 8016408:	ec45 4b10 	vmov	d0, r4, r5
 801640c:	f003 fd14 	bl	8019e38 <__ulp>
 8016410:	ec51 0b10 	vmov	r0, r1, d0
 8016414:	b17e      	cbz	r6, 8016436 <sulp+0x36>
 8016416:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801641a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801641e:	2b00      	cmp	r3, #0
 8016420:	dd09      	ble.n	8016436 <sulp+0x36>
 8016422:	051b      	lsls	r3, r3, #20
 8016424:	2400      	movs	r4, #0
 8016426:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801642a:	4622      	mov	r2, r4
 801642c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8016430:	462b      	mov	r3, r5
 8016432:	f7ea f8ef 	bl	8000614 <__aeabi_dmul>
 8016436:	bd70      	pop	{r4, r5, r6, pc}

08016438 <_strtod_l>:
 8016438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801643c:	ed2d 8b02 	vpush	{d8}
 8016440:	b09b      	sub	sp, #108	; 0x6c
 8016442:	4604      	mov	r4, r0
 8016444:	460d      	mov	r5, r1
 8016446:	f04f 0800 	mov.w	r8, #0
 801644a:	9213      	str	r2, [sp, #76]	; 0x4c
 801644c:	2200      	movs	r2, #0
 801644e:	f04f 0900 	mov.w	r9, #0
 8016452:	9216      	str	r2, [sp, #88]	; 0x58
 8016454:	460a      	mov	r2, r1
 8016456:	9215      	str	r2, [sp, #84]	; 0x54
 8016458:	7811      	ldrb	r1, [r2, #0]
 801645a:	292b      	cmp	r1, #43	; 0x2b
 801645c:	d04c      	beq.n	80164f8 <_strtod_l+0xc0>
 801645e:	d83a      	bhi.n	80164d6 <_strtod_l+0x9e>
 8016460:	290d      	cmp	r1, #13
 8016462:	d834      	bhi.n	80164ce <_strtod_l+0x96>
 8016464:	2908      	cmp	r1, #8
 8016466:	d834      	bhi.n	80164d2 <_strtod_l+0x9a>
 8016468:	2900      	cmp	r1, #0
 801646a:	d03d      	beq.n	80164e8 <_strtod_l+0xb0>
 801646c:	2200      	movs	r2, #0
 801646e:	920a      	str	r2, [sp, #40]	; 0x28
 8016470:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8016472:	7832      	ldrb	r2, [r6, #0]
 8016474:	2a30      	cmp	r2, #48	; 0x30
 8016476:	f040 80b4 	bne.w	80165e2 <_strtod_l+0x1aa>
 801647a:	7872      	ldrb	r2, [r6, #1]
 801647c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8016480:	2a58      	cmp	r2, #88	; 0x58
 8016482:	d170      	bne.n	8016566 <_strtod_l+0x12e>
 8016484:	9302      	str	r3, [sp, #8]
 8016486:	a915      	add	r1, sp, #84	; 0x54
 8016488:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801648a:	4620      	mov	r0, r4
 801648c:	4a8e      	ldr	r2, [pc, #568]	; (80166c8 <_strtod_l+0x290>)
 801648e:	9301      	str	r3, [sp, #4]
 8016490:	ab16      	add	r3, sp, #88	; 0x58
 8016492:	9300      	str	r3, [sp, #0]
 8016494:	ab17      	add	r3, sp, #92	; 0x5c
 8016496:	f001 ffb9 	bl	801840c <__gethex>
 801649a:	f010 070f 	ands.w	r7, r0, #15
 801649e:	4605      	mov	r5, r0
 80164a0:	d005      	beq.n	80164ae <_strtod_l+0x76>
 80164a2:	2f06      	cmp	r7, #6
 80164a4:	d12a      	bne.n	80164fc <_strtod_l+0xc4>
 80164a6:	3601      	adds	r6, #1
 80164a8:	2300      	movs	r3, #0
 80164aa:	9615      	str	r6, [sp, #84]	; 0x54
 80164ac:	930a      	str	r3, [sp, #40]	; 0x28
 80164ae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80164b0:	2b00      	cmp	r3, #0
 80164b2:	f040 8581 	bne.w	8016fb8 <_strtod_l+0xb80>
 80164b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80164b8:	b1db      	cbz	r3, 80164f2 <_strtod_l+0xba>
 80164ba:	4642      	mov	r2, r8
 80164bc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80164c0:	ec43 2b10 	vmov	d0, r2, r3
 80164c4:	b01b      	add	sp, #108	; 0x6c
 80164c6:	ecbd 8b02 	vpop	{d8}
 80164ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80164ce:	2920      	cmp	r1, #32
 80164d0:	d1cc      	bne.n	801646c <_strtod_l+0x34>
 80164d2:	3201      	adds	r2, #1
 80164d4:	e7bf      	b.n	8016456 <_strtod_l+0x1e>
 80164d6:	292d      	cmp	r1, #45	; 0x2d
 80164d8:	d1c8      	bne.n	801646c <_strtod_l+0x34>
 80164da:	2101      	movs	r1, #1
 80164dc:	910a      	str	r1, [sp, #40]	; 0x28
 80164de:	1c51      	adds	r1, r2, #1
 80164e0:	9115      	str	r1, [sp, #84]	; 0x54
 80164e2:	7852      	ldrb	r2, [r2, #1]
 80164e4:	2a00      	cmp	r2, #0
 80164e6:	d1c3      	bne.n	8016470 <_strtod_l+0x38>
 80164e8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80164ea:	9515      	str	r5, [sp, #84]	; 0x54
 80164ec:	2b00      	cmp	r3, #0
 80164ee:	f040 8561 	bne.w	8016fb4 <_strtod_l+0xb7c>
 80164f2:	4642      	mov	r2, r8
 80164f4:	464b      	mov	r3, r9
 80164f6:	e7e3      	b.n	80164c0 <_strtod_l+0x88>
 80164f8:	2100      	movs	r1, #0
 80164fa:	e7ef      	b.n	80164dc <_strtod_l+0xa4>
 80164fc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80164fe:	b13a      	cbz	r2, 8016510 <_strtod_l+0xd8>
 8016500:	2135      	movs	r1, #53	; 0x35
 8016502:	a818      	add	r0, sp, #96	; 0x60
 8016504:	f003 fd99 	bl	801a03a <__copybits>
 8016508:	9916      	ldr	r1, [sp, #88]	; 0x58
 801650a:	4620      	mov	r0, r4
 801650c:	f003 f960 	bl	80197d0 <_Bfree>
 8016510:	3f01      	subs	r7, #1
 8016512:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8016514:	2f04      	cmp	r7, #4
 8016516:	d806      	bhi.n	8016526 <_strtod_l+0xee>
 8016518:	e8df f007 	tbb	[pc, r7]
 801651c:	201d0314 	.word	0x201d0314
 8016520:	14          	.byte	0x14
 8016521:	00          	.byte	0x00
 8016522:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8016526:	05e9      	lsls	r1, r5, #23
 8016528:	bf48      	it	mi
 801652a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 801652e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8016532:	0d1b      	lsrs	r3, r3, #20
 8016534:	051b      	lsls	r3, r3, #20
 8016536:	2b00      	cmp	r3, #0
 8016538:	d1b9      	bne.n	80164ae <_strtod_l+0x76>
 801653a:	f000 ffd3 	bl	80174e4 <__errno>
 801653e:	2322      	movs	r3, #34	; 0x22
 8016540:	6003      	str	r3, [r0, #0]
 8016542:	e7b4      	b.n	80164ae <_strtod_l+0x76>
 8016544:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8016548:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801654c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8016550:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8016554:	e7e7      	b.n	8016526 <_strtod_l+0xee>
 8016556:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80166d0 <_strtod_l+0x298>
 801655a:	e7e4      	b.n	8016526 <_strtod_l+0xee>
 801655c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8016560:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8016564:	e7df      	b.n	8016526 <_strtod_l+0xee>
 8016566:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016568:	1c5a      	adds	r2, r3, #1
 801656a:	9215      	str	r2, [sp, #84]	; 0x54
 801656c:	785b      	ldrb	r3, [r3, #1]
 801656e:	2b30      	cmp	r3, #48	; 0x30
 8016570:	d0f9      	beq.n	8016566 <_strtod_l+0x12e>
 8016572:	2b00      	cmp	r3, #0
 8016574:	d09b      	beq.n	80164ae <_strtod_l+0x76>
 8016576:	2301      	movs	r3, #1
 8016578:	f04f 0a00 	mov.w	sl, #0
 801657c:	9304      	str	r3, [sp, #16]
 801657e:	220a      	movs	r2, #10
 8016580:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016582:	46d3      	mov	fp, sl
 8016584:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8016588:	930b      	str	r3, [sp, #44]	; 0x2c
 801658a:	9815      	ldr	r0, [sp, #84]	; 0x54
 801658c:	7806      	ldrb	r6, [r0, #0]
 801658e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8016592:	b2d9      	uxtb	r1, r3
 8016594:	2909      	cmp	r1, #9
 8016596:	d926      	bls.n	80165e6 <_strtod_l+0x1ae>
 8016598:	2201      	movs	r2, #1
 801659a:	494c      	ldr	r1, [pc, #304]	; (80166cc <_strtod_l+0x294>)
 801659c:	f000 fecf 	bl	801733e <strncmp>
 80165a0:	2800      	cmp	r0, #0
 80165a2:	d030      	beq.n	8016606 <_strtod_l+0x1ce>
 80165a4:	2000      	movs	r0, #0
 80165a6:	4632      	mov	r2, r6
 80165a8:	465e      	mov	r6, fp
 80165aa:	4603      	mov	r3, r0
 80165ac:	9005      	str	r0, [sp, #20]
 80165ae:	2a65      	cmp	r2, #101	; 0x65
 80165b0:	d001      	beq.n	80165b6 <_strtod_l+0x17e>
 80165b2:	2a45      	cmp	r2, #69	; 0x45
 80165b4:	d113      	bne.n	80165de <_strtod_l+0x1a6>
 80165b6:	b91e      	cbnz	r6, 80165c0 <_strtod_l+0x188>
 80165b8:	9a04      	ldr	r2, [sp, #16]
 80165ba:	4302      	orrs	r2, r0
 80165bc:	d094      	beq.n	80164e8 <_strtod_l+0xb0>
 80165be:	2600      	movs	r6, #0
 80165c0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80165c2:	1c6a      	adds	r2, r5, #1
 80165c4:	9215      	str	r2, [sp, #84]	; 0x54
 80165c6:	786a      	ldrb	r2, [r5, #1]
 80165c8:	2a2b      	cmp	r2, #43	; 0x2b
 80165ca:	d073      	beq.n	80166b4 <_strtod_l+0x27c>
 80165cc:	2a2d      	cmp	r2, #45	; 0x2d
 80165ce:	d077      	beq.n	80166c0 <_strtod_l+0x288>
 80165d0:	f04f 0c00 	mov.w	ip, #0
 80165d4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80165d8:	2909      	cmp	r1, #9
 80165da:	d97f      	bls.n	80166dc <_strtod_l+0x2a4>
 80165dc:	9515      	str	r5, [sp, #84]	; 0x54
 80165de:	2700      	movs	r7, #0
 80165e0:	e09e      	b.n	8016720 <_strtod_l+0x2e8>
 80165e2:	2300      	movs	r3, #0
 80165e4:	e7c8      	b.n	8016578 <_strtod_l+0x140>
 80165e6:	f1bb 0f08 	cmp.w	fp, #8
 80165ea:	f100 0001 	add.w	r0, r0, #1
 80165ee:	f10b 0b01 	add.w	fp, fp, #1
 80165f2:	bfd4      	ite	le
 80165f4:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80165f6:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 80165fa:	9015      	str	r0, [sp, #84]	; 0x54
 80165fc:	bfdc      	itt	le
 80165fe:	fb02 3301 	mlale	r3, r2, r1, r3
 8016602:	9309      	strle	r3, [sp, #36]	; 0x24
 8016604:	e7c1      	b.n	801658a <_strtod_l+0x152>
 8016606:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016608:	1c5a      	adds	r2, r3, #1
 801660a:	9215      	str	r2, [sp, #84]	; 0x54
 801660c:	785a      	ldrb	r2, [r3, #1]
 801660e:	f1bb 0f00 	cmp.w	fp, #0
 8016612:	d036      	beq.n	8016682 <_strtod_l+0x24a>
 8016614:	465e      	mov	r6, fp
 8016616:	9005      	str	r0, [sp, #20]
 8016618:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 801661c:	2b09      	cmp	r3, #9
 801661e:	d912      	bls.n	8016646 <_strtod_l+0x20e>
 8016620:	2301      	movs	r3, #1
 8016622:	e7c4      	b.n	80165ae <_strtod_l+0x176>
 8016624:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016626:	3001      	adds	r0, #1
 8016628:	1c5a      	adds	r2, r3, #1
 801662a:	9215      	str	r2, [sp, #84]	; 0x54
 801662c:	785a      	ldrb	r2, [r3, #1]
 801662e:	2a30      	cmp	r2, #48	; 0x30
 8016630:	d0f8      	beq.n	8016624 <_strtod_l+0x1ec>
 8016632:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8016636:	2b08      	cmp	r3, #8
 8016638:	f200 84c3 	bhi.w	8016fc2 <_strtod_l+0xb8a>
 801663c:	9005      	str	r0, [sp, #20]
 801663e:	2000      	movs	r0, #0
 8016640:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016642:	4606      	mov	r6, r0
 8016644:	930b      	str	r3, [sp, #44]	; 0x2c
 8016646:	3a30      	subs	r2, #48	; 0x30
 8016648:	f100 0301 	add.w	r3, r0, #1
 801664c:	d013      	beq.n	8016676 <_strtod_l+0x23e>
 801664e:	9905      	ldr	r1, [sp, #20]
 8016650:	eb00 0c06 	add.w	ip, r0, r6
 8016654:	4419      	add	r1, r3
 8016656:	4633      	mov	r3, r6
 8016658:	9105      	str	r1, [sp, #20]
 801665a:	210a      	movs	r1, #10
 801665c:	4563      	cmp	r3, ip
 801665e:	d112      	bne.n	8016686 <_strtod_l+0x24e>
 8016660:	1833      	adds	r3, r6, r0
 8016662:	3601      	adds	r6, #1
 8016664:	2b08      	cmp	r3, #8
 8016666:	4406      	add	r6, r0
 8016668:	dc1a      	bgt.n	80166a0 <_strtod_l+0x268>
 801666a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801666c:	230a      	movs	r3, #10
 801666e:	fb03 2301 	mla	r3, r3, r1, r2
 8016672:	9309      	str	r3, [sp, #36]	; 0x24
 8016674:	2300      	movs	r3, #0
 8016676:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8016678:	4618      	mov	r0, r3
 801667a:	1c51      	adds	r1, r2, #1
 801667c:	9115      	str	r1, [sp, #84]	; 0x54
 801667e:	7852      	ldrb	r2, [r2, #1]
 8016680:	e7ca      	b.n	8016618 <_strtod_l+0x1e0>
 8016682:	4658      	mov	r0, fp
 8016684:	e7d3      	b.n	801662e <_strtod_l+0x1f6>
 8016686:	2b08      	cmp	r3, #8
 8016688:	f103 0301 	add.w	r3, r3, #1
 801668c:	dc03      	bgt.n	8016696 <_strtod_l+0x25e>
 801668e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8016690:	434f      	muls	r7, r1
 8016692:	9709      	str	r7, [sp, #36]	; 0x24
 8016694:	e7e2      	b.n	801665c <_strtod_l+0x224>
 8016696:	2b10      	cmp	r3, #16
 8016698:	bfd8      	it	le
 801669a:	fb01 fa0a 	mulle.w	sl, r1, sl
 801669e:	e7dd      	b.n	801665c <_strtod_l+0x224>
 80166a0:	2e10      	cmp	r6, #16
 80166a2:	bfdc      	itt	le
 80166a4:	230a      	movle	r3, #10
 80166a6:	fb03 2a0a 	mlale	sl, r3, sl, r2
 80166aa:	e7e3      	b.n	8016674 <_strtod_l+0x23c>
 80166ac:	2300      	movs	r3, #0
 80166ae:	9305      	str	r3, [sp, #20]
 80166b0:	2301      	movs	r3, #1
 80166b2:	e781      	b.n	80165b8 <_strtod_l+0x180>
 80166b4:	f04f 0c00 	mov.w	ip, #0
 80166b8:	1caa      	adds	r2, r5, #2
 80166ba:	9215      	str	r2, [sp, #84]	; 0x54
 80166bc:	78aa      	ldrb	r2, [r5, #2]
 80166be:	e789      	b.n	80165d4 <_strtod_l+0x19c>
 80166c0:	f04f 0c01 	mov.w	ip, #1
 80166c4:	e7f8      	b.n	80166b8 <_strtod_l+0x280>
 80166c6:	bf00      	nop
 80166c8:	0818dd50 	.word	0x0818dd50
 80166cc:	0818dd4b 	.word	0x0818dd4b
 80166d0:	7ff00000 	.word	0x7ff00000
 80166d4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80166d6:	1c51      	adds	r1, r2, #1
 80166d8:	9115      	str	r1, [sp, #84]	; 0x54
 80166da:	7852      	ldrb	r2, [r2, #1]
 80166dc:	2a30      	cmp	r2, #48	; 0x30
 80166de:	d0f9      	beq.n	80166d4 <_strtod_l+0x29c>
 80166e0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80166e4:	2908      	cmp	r1, #8
 80166e6:	f63f af7a 	bhi.w	80165de <_strtod_l+0x1a6>
 80166ea:	3a30      	subs	r2, #48	; 0x30
 80166ec:	9208      	str	r2, [sp, #32]
 80166ee:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80166f0:	920c      	str	r2, [sp, #48]	; 0x30
 80166f2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80166f4:	1c57      	adds	r7, r2, #1
 80166f6:	9715      	str	r7, [sp, #84]	; 0x54
 80166f8:	7852      	ldrb	r2, [r2, #1]
 80166fa:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80166fe:	f1be 0f09 	cmp.w	lr, #9
 8016702:	d938      	bls.n	8016776 <_strtod_l+0x33e>
 8016704:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016706:	1a7f      	subs	r7, r7, r1
 8016708:	2f08      	cmp	r7, #8
 801670a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 801670e:	dc03      	bgt.n	8016718 <_strtod_l+0x2e0>
 8016710:	9908      	ldr	r1, [sp, #32]
 8016712:	428f      	cmp	r7, r1
 8016714:	bfa8      	it	ge
 8016716:	460f      	movge	r7, r1
 8016718:	f1bc 0f00 	cmp.w	ip, #0
 801671c:	d000      	beq.n	8016720 <_strtod_l+0x2e8>
 801671e:	427f      	negs	r7, r7
 8016720:	2e00      	cmp	r6, #0
 8016722:	d14f      	bne.n	80167c4 <_strtod_l+0x38c>
 8016724:	9904      	ldr	r1, [sp, #16]
 8016726:	4301      	orrs	r1, r0
 8016728:	f47f aec1 	bne.w	80164ae <_strtod_l+0x76>
 801672c:	2b00      	cmp	r3, #0
 801672e:	f47f aedb 	bne.w	80164e8 <_strtod_l+0xb0>
 8016732:	2a69      	cmp	r2, #105	; 0x69
 8016734:	d029      	beq.n	801678a <_strtod_l+0x352>
 8016736:	dc26      	bgt.n	8016786 <_strtod_l+0x34e>
 8016738:	2a49      	cmp	r2, #73	; 0x49
 801673a:	d026      	beq.n	801678a <_strtod_l+0x352>
 801673c:	2a4e      	cmp	r2, #78	; 0x4e
 801673e:	f47f aed3 	bne.w	80164e8 <_strtod_l+0xb0>
 8016742:	499c      	ldr	r1, [pc, #624]	; (80169b4 <_strtod_l+0x57c>)
 8016744:	a815      	add	r0, sp, #84	; 0x54
 8016746:	f002 f8a1 	bl	801888c <__match>
 801674a:	2800      	cmp	r0, #0
 801674c:	f43f aecc 	beq.w	80164e8 <_strtod_l+0xb0>
 8016750:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016752:	781b      	ldrb	r3, [r3, #0]
 8016754:	2b28      	cmp	r3, #40	; 0x28
 8016756:	d12f      	bne.n	80167b8 <_strtod_l+0x380>
 8016758:	aa18      	add	r2, sp, #96	; 0x60
 801675a:	4997      	ldr	r1, [pc, #604]	; (80169b8 <_strtod_l+0x580>)
 801675c:	a815      	add	r0, sp, #84	; 0x54
 801675e:	f002 f8a9 	bl	80188b4 <__hexnan>
 8016762:	2805      	cmp	r0, #5
 8016764:	d128      	bne.n	80167b8 <_strtod_l+0x380>
 8016766:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8016768:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801676c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8016770:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8016774:	e69b      	b.n	80164ae <_strtod_l+0x76>
 8016776:	9f08      	ldr	r7, [sp, #32]
 8016778:	210a      	movs	r1, #10
 801677a:	fb01 2107 	mla	r1, r1, r7, r2
 801677e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8016782:	9208      	str	r2, [sp, #32]
 8016784:	e7b5      	b.n	80166f2 <_strtod_l+0x2ba>
 8016786:	2a6e      	cmp	r2, #110	; 0x6e
 8016788:	e7d9      	b.n	801673e <_strtod_l+0x306>
 801678a:	498c      	ldr	r1, [pc, #560]	; (80169bc <_strtod_l+0x584>)
 801678c:	a815      	add	r0, sp, #84	; 0x54
 801678e:	f002 f87d 	bl	801888c <__match>
 8016792:	2800      	cmp	r0, #0
 8016794:	f43f aea8 	beq.w	80164e8 <_strtod_l+0xb0>
 8016798:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801679a:	a815      	add	r0, sp, #84	; 0x54
 801679c:	4988      	ldr	r1, [pc, #544]	; (80169c0 <_strtod_l+0x588>)
 801679e:	3b01      	subs	r3, #1
 80167a0:	9315      	str	r3, [sp, #84]	; 0x54
 80167a2:	f002 f873 	bl	801888c <__match>
 80167a6:	b910      	cbnz	r0, 80167ae <_strtod_l+0x376>
 80167a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80167aa:	3301      	adds	r3, #1
 80167ac:	9315      	str	r3, [sp, #84]	; 0x54
 80167ae:	f8df 9220 	ldr.w	r9, [pc, #544]	; 80169d0 <_strtod_l+0x598>
 80167b2:	f04f 0800 	mov.w	r8, #0
 80167b6:	e67a      	b.n	80164ae <_strtod_l+0x76>
 80167b8:	4882      	ldr	r0, [pc, #520]	; (80169c4 <_strtod_l+0x58c>)
 80167ba:	f000 fee5 	bl	8017588 <nan>
 80167be:	ec59 8b10 	vmov	r8, r9, d0
 80167c2:	e674      	b.n	80164ae <_strtod_l+0x76>
 80167c4:	9b05      	ldr	r3, [sp, #20]
 80167c6:	f1bb 0f00 	cmp.w	fp, #0
 80167ca:	bf08      	it	eq
 80167cc:	46b3      	moveq	fp, r6
 80167ce:	2e10      	cmp	r6, #16
 80167d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80167d2:	eba7 0303 	sub.w	r3, r7, r3
 80167d6:	4635      	mov	r5, r6
 80167d8:	bfa8      	it	ge
 80167da:	2510      	movge	r5, #16
 80167dc:	9308      	str	r3, [sp, #32]
 80167de:	f7e9 fe9f 	bl	8000520 <__aeabi_ui2d>
 80167e2:	2e09      	cmp	r6, #9
 80167e4:	4680      	mov	r8, r0
 80167e6:	4689      	mov	r9, r1
 80167e8:	dd13      	ble.n	8016812 <_strtod_l+0x3da>
 80167ea:	4b77      	ldr	r3, [pc, #476]	; (80169c8 <_strtod_l+0x590>)
 80167ec:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80167f0:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80167f4:	f7e9 ff0e 	bl	8000614 <__aeabi_dmul>
 80167f8:	4680      	mov	r8, r0
 80167fa:	4689      	mov	r9, r1
 80167fc:	4650      	mov	r0, sl
 80167fe:	f7e9 fe8f 	bl	8000520 <__aeabi_ui2d>
 8016802:	4602      	mov	r2, r0
 8016804:	460b      	mov	r3, r1
 8016806:	4640      	mov	r0, r8
 8016808:	4649      	mov	r1, r9
 801680a:	f7e9 fd4d 	bl	80002a8 <__adddf3>
 801680e:	4680      	mov	r8, r0
 8016810:	4689      	mov	r9, r1
 8016812:	2e0f      	cmp	r6, #15
 8016814:	dc38      	bgt.n	8016888 <_strtod_l+0x450>
 8016816:	9b08      	ldr	r3, [sp, #32]
 8016818:	2b00      	cmp	r3, #0
 801681a:	f43f ae48 	beq.w	80164ae <_strtod_l+0x76>
 801681e:	dd24      	ble.n	801686a <_strtod_l+0x432>
 8016820:	2b16      	cmp	r3, #22
 8016822:	dc0b      	bgt.n	801683c <_strtod_l+0x404>
 8016824:	4968      	ldr	r1, [pc, #416]	; (80169c8 <_strtod_l+0x590>)
 8016826:	4642      	mov	r2, r8
 8016828:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801682c:	464b      	mov	r3, r9
 801682e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016832:	f7e9 feef 	bl	8000614 <__aeabi_dmul>
 8016836:	4680      	mov	r8, r0
 8016838:	4689      	mov	r9, r1
 801683a:	e638      	b.n	80164ae <_strtod_l+0x76>
 801683c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8016840:	9a08      	ldr	r2, [sp, #32]
 8016842:	4293      	cmp	r3, r2
 8016844:	db20      	blt.n	8016888 <_strtod_l+0x450>
 8016846:	f1c6 060f 	rsb	r6, r6, #15
 801684a:	4c5f      	ldr	r4, [pc, #380]	; (80169c8 <_strtod_l+0x590>)
 801684c:	4642      	mov	r2, r8
 801684e:	464b      	mov	r3, r9
 8016850:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8016854:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016858:	f7e9 fedc 	bl	8000614 <__aeabi_dmul>
 801685c:	9b08      	ldr	r3, [sp, #32]
 801685e:	1b9e      	subs	r6, r3, r6
 8016860:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8016864:	e9d4 2300 	ldrd	r2, r3, [r4]
 8016868:	e7e3      	b.n	8016832 <_strtod_l+0x3fa>
 801686a:	9b08      	ldr	r3, [sp, #32]
 801686c:	3316      	adds	r3, #22
 801686e:	db0b      	blt.n	8016888 <_strtod_l+0x450>
 8016870:	9b05      	ldr	r3, [sp, #20]
 8016872:	4640      	mov	r0, r8
 8016874:	4649      	mov	r1, r9
 8016876:	1bdf      	subs	r7, r3, r7
 8016878:	4b53      	ldr	r3, [pc, #332]	; (80169c8 <_strtod_l+0x590>)
 801687a:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 801687e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016882:	f7e9 fff1 	bl	8000868 <__aeabi_ddiv>
 8016886:	e7d6      	b.n	8016836 <_strtod_l+0x3fe>
 8016888:	1b75      	subs	r5, r6, r5
 801688a:	9b08      	ldr	r3, [sp, #32]
 801688c:	441d      	add	r5, r3
 801688e:	2d00      	cmp	r5, #0
 8016890:	dd70      	ble.n	8016974 <_strtod_l+0x53c>
 8016892:	f015 030f 	ands.w	r3, r5, #15
 8016896:	d00a      	beq.n	80168ae <_strtod_l+0x476>
 8016898:	494b      	ldr	r1, [pc, #300]	; (80169c8 <_strtod_l+0x590>)
 801689a:	4642      	mov	r2, r8
 801689c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80168a0:	464b      	mov	r3, r9
 80168a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80168a6:	f7e9 feb5 	bl	8000614 <__aeabi_dmul>
 80168aa:	4680      	mov	r8, r0
 80168ac:	4689      	mov	r9, r1
 80168ae:	f035 050f 	bics.w	r5, r5, #15
 80168b2:	d04d      	beq.n	8016950 <_strtod_l+0x518>
 80168b4:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 80168b8:	dd22      	ble.n	8016900 <_strtod_l+0x4c8>
 80168ba:	2500      	movs	r5, #0
 80168bc:	46ab      	mov	fp, r5
 80168be:	9509      	str	r5, [sp, #36]	; 0x24
 80168c0:	9505      	str	r5, [sp, #20]
 80168c2:	2322      	movs	r3, #34	; 0x22
 80168c4:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80169d0 <_strtod_l+0x598>
 80168c8:	f04f 0800 	mov.w	r8, #0
 80168cc:	6023      	str	r3, [r4, #0]
 80168ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80168d0:	2b00      	cmp	r3, #0
 80168d2:	f43f adec 	beq.w	80164ae <_strtod_l+0x76>
 80168d6:	9916      	ldr	r1, [sp, #88]	; 0x58
 80168d8:	4620      	mov	r0, r4
 80168da:	f002 ff79 	bl	80197d0 <_Bfree>
 80168de:	9905      	ldr	r1, [sp, #20]
 80168e0:	4620      	mov	r0, r4
 80168e2:	f002 ff75 	bl	80197d0 <_Bfree>
 80168e6:	4659      	mov	r1, fp
 80168e8:	4620      	mov	r0, r4
 80168ea:	f002 ff71 	bl	80197d0 <_Bfree>
 80168ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 80168f0:	4620      	mov	r0, r4
 80168f2:	f002 ff6d 	bl	80197d0 <_Bfree>
 80168f6:	4629      	mov	r1, r5
 80168f8:	4620      	mov	r0, r4
 80168fa:	f002 ff69 	bl	80197d0 <_Bfree>
 80168fe:	e5d6      	b.n	80164ae <_strtod_l+0x76>
 8016900:	4b32      	ldr	r3, [pc, #200]	; (80169cc <_strtod_l+0x594>)
 8016902:	112d      	asrs	r5, r5, #4
 8016904:	4640      	mov	r0, r8
 8016906:	4649      	mov	r1, r9
 8016908:	9304      	str	r3, [sp, #16]
 801690a:	2300      	movs	r3, #0
 801690c:	469a      	mov	sl, r3
 801690e:	2d01      	cmp	r5, #1
 8016910:	dc21      	bgt.n	8016956 <_strtod_l+0x51e>
 8016912:	b10b      	cbz	r3, 8016918 <_strtod_l+0x4e0>
 8016914:	4680      	mov	r8, r0
 8016916:	4689      	mov	r9, r1
 8016918:	492c      	ldr	r1, [pc, #176]	; (80169cc <_strtod_l+0x594>)
 801691a:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 801691e:	4642      	mov	r2, r8
 8016920:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8016924:	464b      	mov	r3, r9
 8016926:	e9d1 0100 	ldrd	r0, r1, [r1]
 801692a:	f7e9 fe73 	bl	8000614 <__aeabi_dmul>
 801692e:	4b28      	ldr	r3, [pc, #160]	; (80169d0 <_strtod_l+0x598>)
 8016930:	460a      	mov	r2, r1
 8016932:	4680      	mov	r8, r0
 8016934:	400b      	ands	r3, r1
 8016936:	4927      	ldr	r1, [pc, #156]	; (80169d4 <_strtod_l+0x59c>)
 8016938:	428b      	cmp	r3, r1
 801693a:	d8be      	bhi.n	80168ba <_strtod_l+0x482>
 801693c:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8016940:	428b      	cmp	r3, r1
 8016942:	bf86      	itte	hi
 8016944:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 80169d8 <_strtod_l+0x5a0>
 8016948:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 801694c:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8016950:	2300      	movs	r3, #0
 8016952:	9304      	str	r3, [sp, #16]
 8016954:	e07c      	b.n	8016a50 <_strtod_l+0x618>
 8016956:	07ea      	lsls	r2, r5, #31
 8016958:	d505      	bpl.n	8016966 <_strtod_l+0x52e>
 801695a:	9b04      	ldr	r3, [sp, #16]
 801695c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016960:	f7e9 fe58 	bl	8000614 <__aeabi_dmul>
 8016964:	2301      	movs	r3, #1
 8016966:	9a04      	ldr	r2, [sp, #16]
 8016968:	f10a 0a01 	add.w	sl, sl, #1
 801696c:	106d      	asrs	r5, r5, #1
 801696e:	3208      	adds	r2, #8
 8016970:	9204      	str	r2, [sp, #16]
 8016972:	e7cc      	b.n	801690e <_strtod_l+0x4d6>
 8016974:	d0ec      	beq.n	8016950 <_strtod_l+0x518>
 8016976:	426d      	negs	r5, r5
 8016978:	f015 020f 	ands.w	r2, r5, #15
 801697c:	d00a      	beq.n	8016994 <_strtod_l+0x55c>
 801697e:	4b12      	ldr	r3, [pc, #72]	; (80169c8 <_strtod_l+0x590>)
 8016980:	4640      	mov	r0, r8
 8016982:	4649      	mov	r1, r9
 8016984:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016988:	e9d3 2300 	ldrd	r2, r3, [r3]
 801698c:	f7e9 ff6c 	bl	8000868 <__aeabi_ddiv>
 8016990:	4680      	mov	r8, r0
 8016992:	4689      	mov	r9, r1
 8016994:	112d      	asrs	r5, r5, #4
 8016996:	d0db      	beq.n	8016950 <_strtod_l+0x518>
 8016998:	2d1f      	cmp	r5, #31
 801699a:	dd1f      	ble.n	80169dc <_strtod_l+0x5a4>
 801699c:	2500      	movs	r5, #0
 801699e:	46ab      	mov	fp, r5
 80169a0:	9509      	str	r5, [sp, #36]	; 0x24
 80169a2:	9505      	str	r5, [sp, #20]
 80169a4:	2322      	movs	r3, #34	; 0x22
 80169a6:	f04f 0800 	mov.w	r8, #0
 80169aa:	f04f 0900 	mov.w	r9, #0
 80169ae:	6023      	str	r3, [r4, #0]
 80169b0:	e78d      	b.n	80168ce <_strtod_l+0x496>
 80169b2:	bf00      	nop
 80169b4:	0818dd21 	.word	0x0818dd21
 80169b8:	0818dd64 	.word	0x0818dd64
 80169bc:	0818dd19 	.word	0x0818dd19
 80169c0:	0818deac 	.word	0x0818deac
 80169c4:	0818e157 	.word	0x0818e157
 80169c8:	0818e048 	.word	0x0818e048
 80169cc:	0818e020 	.word	0x0818e020
 80169d0:	7ff00000 	.word	0x7ff00000
 80169d4:	7ca00000 	.word	0x7ca00000
 80169d8:	7fefffff 	.word	0x7fefffff
 80169dc:	f015 0310 	ands.w	r3, r5, #16
 80169e0:	4640      	mov	r0, r8
 80169e2:	4649      	mov	r1, r9
 80169e4:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8016d88 <_strtod_l+0x950>
 80169e8:	bf18      	it	ne
 80169ea:	236a      	movne	r3, #106	; 0x6a
 80169ec:	9304      	str	r3, [sp, #16]
 80169ee:	2300      	movs	r3, #0
 80169f0:	07ea      	lsls	r2, r5, #31
 80169f2:	d504      	bpl.n	80169fe <_strtod_l+0x5c6>
 80169f4:	e9da 2300 	ldrd	r2, r3, [sl]
 80169f8:	f7e9 fe0c 	bl	8000614 <__aeabi_dmul>
 80169fc:	2301      	movs	r3, #1
 80169fe:	106d      	asrs	r5, r5, #1
 8016a00:	f10a 0a08 	add.w	sl, sl, #8
 8016a04:	d1f4      	bne.n	80169f0 <_strtod_l+0x5b8>
 8016a06:	b10b      	cbz	r3, 8016a0c <_strtod_l+0x5d4>
 8016a08:	4680      	mov	r8, r0
 8016a0a:	4689      	mov	r9, r1
 8016a0c:	9b04      	ldr	r3, [sp, #16]
 8016a0e:	b1bb      	cbz	r3, 8016a40 <_strtod_l+0x608>
 8016a10:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8016a14:	4649      	mov	r1, r9
 8016a16:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8016a1a:	2b00      	cmp	r3, #0
 8016a1c:	dd10      	ble.n	8016a40 <_strtod_l+0x608>
 8016a1e:	2b1f      	cmp	r3, #31
 8016a20:	f340 811e 	ble.w	8016c60 <_strtod_l+0x828>
 8016a24:	2b34      	cmp	r3, #52	; 0x34
 8016a26:	f04f 0800 	mov.w	r8, #0
 8016a2a:	bfdb      	ittet	le
 8016a2c:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8016a30:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8016a34:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8016a38:	4093      	lslle	r3, r2
 8016a3a:	bfd8      	it	le
 8016a3c:	ea03 0901 	andle.w	r9, r3, r1
 8016a40:	2200      	movs	r2, #0
 8016a42:	2300      	movs	r3, #0
 8016a44:	4640      	mov	r0, r8
 8016a46:	4649      	mov	r1, r9
 8016a48:	f7ea f84c 	bl	8000ae4 <__aeabi_dcmpeq>
 8016a4c:	2800      	cmp	r0, #0
 8016a4e:	d1a5      	bne.n	801699c <_strtod_l+0x564>
 8016a50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016a52:	465a      	mov	r2, fp
 8016a54:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016a56:	4620      	mov	r0, r4
 8016a58:	9300      	str	r3, [sp, #0]
 8016a5a:	4633      	mov	r3, r6
 8016a5c:	f002 ff22 	bl	80198a4 <__s2b>
 8016a60:	9009      	str	r0, [sp, #36]	; 0x24
 8016a62:	2800      	cmp	r0, #0
 8016a64:	f43f af29 	beq.w	80168ba <_strtod_l+0x482>
 8016a68:	9a08      	ldr	r2, [sp, #32]
 8016a6a:	2500      	movs	r5, #0
 8016a6c:	9b05      	ldr	r3, [sp, #20]
 8016a6e:	2a00      	cmp	r2, #0
 8016a70:	46ab      	mov	fp, r5
 8016a72:	eba3 0307 	sub.w	r3, r3, r7
 8016a76:	bfa8      	it	ge
 8016a78:	2300      	movge	r3, #0
 8016a7a:	930c      	str	r3, [sp, #48]	; 0x30
 8016a7c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8016a80:	9312      	str	r3, [sp, #72]	; 0x48
 8016a82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016a84:	4620      	mov	r0, r4
 8016a86:	6859      	ldr	r1, [r3, #4]
 8016a88:	f002 fe62 	bl	8019750 <_Balloc>
 8016a8c:	9005      	str	r0, [sp, #20]
 8016a8e:	2800      	cmp	r0, #0
 8016a90:	f43f af17 	beq.w	80168c2 <_strtod_l+0x48a>
 8016a94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016a96:	300c      	adds	r0, #12
 8016a98:	691a      	ldr	r2, [r3, #16]
 8016a9a:	f103 010c 	add.w	r1, r3, #12
 8016a9e:	3202      	adds	r2, #2
 8016aa0:	0092      	lsls	r2, r2, #2
 8016aa2:	f000 fd5a 	bl	801755a <memcpy>
 8016aa6:	aa18      	add	r2, sp, #96	; 0x60
 8016aa8:	a917      	add	r1, sp, #92	; 0x5c
 8016aaa:	4620      	mov	r0, r4
 8016aac:	ec49 8b10 	vmov	d0, r8, r9
 8016ab0:	f003 fa36 	bl	8019f20 <__d2b>
 8016ab4:	9016      	str	r0, [sp, #88]	; 0x58
 8016ab6:	ec49 8b18 	vmov	d8, r8, r9
 8016aba:	2800      	cmp	r0, #0
 8016abc:	f43f af01 	beq.w	80168c2 <_strtod_l+0x48a>
 8016ac0:	2101      	movs	r1, #1
 8016ac2:	4620      	mov	r0, r4
 8016ac4:	f002 ff86 	bl	80199d4 <__i2b>
 8016ac8:	4683      	mov	fp, r0
 8016aca:	2800      	cmp	r0, #0
 8016acc:	f43f aef9 	beq.w	80168c2 <_strtod_l+0x48a>
 8016ad0:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8016ad2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8016ad4:	2e00      	cmp	r6, #0
 8016ad6:	bfa9      	itett	ge
 8016ad8:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8016ada:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8016adc:	eb06 0a03 	addge.w	sl, r6, r3
 8016ae0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8016ae2:	bfb8      	it	lt
 8016ae4:	1b9f      	sublt	r7, r3, r6
 8016ae6:	9b04      	ldr	r3, [sp, #16]
 8016ae8:	bfb8      	it	lt
 8016aea:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8016aee:	1af6      	subs	r6, r6, r3
 8016af0:	4ba0      	ldr	r3, [pc, #640]	; (8016d74 <_strtod_l+0x93c>)
 8016af2:	4416      	add	r6, r2
 8016af4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8016af8:	3e01      	subs	r6, #1
 8016afa:	429e      	cmp	r6, r3
 8016afc:	f280 80c3 	bge.w	8016c86 <_strtod_l+0x84e>
 8016b00:	1b9b      	subs	r3, r3, r6
 8016b02:	2101      	movs	r1, #1
 8016b04:	2b1f      	cmp	r3, #31
 8016b06:	eba2 0203 	sub.w	r2, r2, r3
 8016b0a:	f300 80b0 	bgt.w	8016c6e <_strtod_l+0x836>
 8016b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8016b12:	930e      	str	r3, [sp, #56]	; 0x38
 8016b14:	2300      	movs	r3, #0
 8016b16:	930d      	str	r3, [sp, #52]	; 0x34
 8016b18:	eb0a 0602 	add.w	r6, sl, r2
 8016b1c:	9b04      	ldr	r3, [sp, #16]
 8016b1e:	4417      	add	r7, r2
 8016b20:	45b2      	cmp	sl, r6
 8016b22:	441f      	add	r7, r3
 8016b24:	4653      	mov	r3, sl
 8016b26:	bfa8      	it	ge
 8016b28:	4633      	movge	r3, r6
 8016b2a:	42bb      	cmp	r3, r7
 8016b2c:	bfa8      	it	ge
 8016b2e:	463b      	movge	r3, r7
 8016b30:	2b00      	cmp	r3, #0
 8016b32:	bfc2      	ittt	gt
 8016b34:	1af6      	subgt	r6, r6, r3
 8016b36:	1aff      	subgt	r7, r7, r3
 8016b38:	ebaa 0a03 	subgt.w	sl, sl, r3
 8016b3c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016b3e:	2b00      	cmp	r3, #0
 8016b40:	dd17      	ble.n	8016b72 <_strtod_l+0x73a>
 8016b42:	4659      	mov	r1, fp
 8016b44:	461a      	mov	r2, r3
 8016b46:	4620      	mov	r0, r4
 8016b48:	f003 f804 	bl	8019b54 <__pow5mult>
 8016b4c:	4683      	mov	fp, r0
 8016b4e:	2800      	cmp	r0, #0
 8016b50:	f43f aeb7 	beq.w	80168c2 <_strtod_l+0x48a>
 8016b54:	4601      	mov	r1, r0
 8016b56:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8016b58:	4620      	mov	r0, r4
 8016b5a:	f002 ff51 	bl	8019a00 <__multiply>
 8016b5e:	900b      	str	r0, [sp, #44]	; 0x2c
 8016b60:	2800      	cmp	r0, #0
 8016b62:	f43f aeae 	beq.w	80168c2 <_strtod_l+0x48a>
 8016b66:	9916      	ldr	r1, [sp, #88]	; 0x58
 8016b68:	4620      	mov	r0, r4
 8016b6a:	f002 fe31 	bl	80197d0 <_Bfree>
 8016b6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016b70:	9316      	str	r3, [sp, #88]	; 0x58
 8016b72:	2e00      	cmp	r6, #0
 8016b74:	f300 808c 	bgt.w	8016c90 <_strtod_l+0x858>
 8016b78:	9b08      	ldr	r3, [sp, #32]
 8016b7a:	2b00      	cmp	r3, #0
 8016b7c:	dd08      	ble.n	8016b90 <_strtod_l+0x758>
 8016b7e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016b80:	4620      	mov	r0, r4
 8016b82:	9905      	ldr	r1, [sp, #20]
 8016b84:	f002 ffe6 	bl	8019b54 <__pow5mult>
 8016b88:	9005      	str	r0, [sp, #20]
 8016b8a:	2800      	cmp	r0, #0
 8016b8c:	f43f ae99 	beq.w	80168c2 <_strtod_l+0x48a>
 8016b90:	2f00      	cmp	r7, #0
 8016b92:	dd08      	ble.n	8016ba6 <_strtod_l+0x76e>
 8016b94:	463a      	mov	r2, r7
 8016b96:	9905      	ldr	r1, [sp, #20]
 8016b98:	4620      	mov	r0, r4
 8016b9a:	f003 f835 	bl	8019c08 <__lshift>
 8016b9e:	9005      	str	r0, [sp, #20]
 8016ba0:	2800      	cmp	r0, #0
 8016ba2:	f43f ae8e 	beq.w	80168c2 <_strtod_l+0x48a>
 8016ba6:	f1ba 0f00 	cmp.w	sl, #0
 8016baa:	dd08      	ble.n	8016bbe <_strtod_l+0x786>
 8016bac:	4659      	mov	r1, fp
 8016bae:	4652      	mov	r2, sl
 8016bb0:	4620      	mov	r0, r4
 8016bb2:	f003 f829 	bl	8019c08 <__lshift>
 8016bb6:	4683      	mov	fp, r0
 8016bb8:	2800      	cmp	r0, #0
 8016bba:	f43f ae82 	beq.w	80168c2 <_strtod_l+0x48a>
 8016bbe:	9a05      	ldr	r2, [sp, #20]
 8016bc0:	4620      	mov	r0, r4
 8016bc2:	9916      	ldr	r1, [sp, #88]	; 0x58
 8016bc4:	f003 f8a8 	bl	8019d18 <__mdiff>
 8016bc8:	4605      	mov	r5, r0
 8016bca:	2800      	cmp	r0, #0
 8016bcc:	f43f ae79 	beq.w	80168c2 <_strtod_l+0x48a>
 8016bd0:	68c3      	ldr	r3, [r0, #12]
 8016bd2:	4659      	mov	r1, fp
 8016bd4:	930b      	str	r3, [sp, #44]	; 0x2c
 8016bd6:	2300      	movs	r3, #0
 8016bd8:	60c3      	str	r3, [r0, #12]
 8016bda:	f003 f881 	bl	8019ce0 <__mcmp>
 8016bde:	2800      	cmp	r0, #0
 8016be0:	da60      	bge.n	8016ca4 <_strtod_l+0x86c>
 8016be2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016be4:	ea53 0308 	orrs.w	r3, r3, r8
 8016be8:	f040 8084 	bne.w	8016cf4 <_strtod_l+0x8bc>
 8016bec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016bf0:	2b00      	cmp	r3, #0
 8016bf2:	d17f      	bne.n	8016cf4 <_strtod_l+0x8bc>
 8016bf4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8016bf8:	0d1b      	lsrs	r3, r3, #20
 8016bfa:	051b      	lsls	r3, r3, #20
 8016bfc:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8016c00:	d978      	bls.n	8016cf4 <_strtod_l+0x8bc>
 8016c02:	696b      	ldr	r3, [r5, #20]
 8016c04:	b913      	cbnz	r3, 8016c0c <_strtod_l+0x7d4>
 8016c06:	692b      	ldr	r3, [r5, #16]
 8016c08:	2b01      	cmp	r3, #1
 8016c0a:	dd73      	ble.n	8016cf4 <_strtod_l+0x8bc>
 8016c0c:	4629      	mov	r1, r5
 8016c0e:	2201      	movs	r2, #1
 8016c10:	4620      	mov	r0, r4
 8016c12:	f002 fff9 	bl	8019c08 <__lshift>
 8016c16:	4659      	mov	r1, fp
 8016c18:	4605      	mov	r5, r0
 8016c1a:	f003 f861 	bl	8019ce0 <__mcmp>
 8016c1e:	2800      	cmp	r0, #0
 8016c20:	dd68      	ble.n	8016cf4 <_strtod_l+0x8bc>
 8016c22:	9904      	ldr	r1, [sp, #16]
 8016c24:	464b      	mov	r3, r9
 8016c26:	4a54      	ldr	r2, [pc, #336]	; (8016d78 <_strtod_l+0x940>)
 8016c28:	2900      	cmp	r1, #0
 8016c2a:	f000 8084 	beq.w	8016d36 <_strtod_l+0x8fe>
 8016c2e:	ea02 0109 	and.w	r1, r2, r9
 8016c32:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8016c36:	dc7e      	bgt.n	8016d36 <_strtod_l+0x8fe>
 8016c38:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8016c3c:	f77f aeb2 	ble.w	80169a4 <_strtod_l+0x56c>
 8016c40:	4b4e      	ldr	r3, [pc, #312]	; (8016d7c <_strtod_l+0x944>)
 8016c42:	4640      	mov	r0, r8
 8016c44:	4649      	mov	r1, r9
 8016c46:	2200      	movs	r2, #0
 8016c48:	f7e9 fce4 	bl	8000614 <__aeabi_dmul>
 8016c4c:	4b4a      	ldr	r3, [pc, #296]	; (8016d78 <_strtod_l+0x940>)
 8016c4e:	4680      	mov	r8, r0
 8016c50:	4689      	mov	r9, r1
 8016c52:	400b      	ands	r3, r1
 8016c54:	2b00      	cmp	r3, #0
 8016c56:	f47f ae3e 	bne.w	80168d6 <_strtod_l+0x49e>
 8016c5a:	2322      	movs	r3, #34	; 0x22
 8016c5c:	6023      	str	r3, [r4, #0]
 8016c5e:	e63a      	b.n	80168d6 <_strtod_l+0x49e>
 8016c60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016c64:	fa02 f303 	lsl.w	r3, r2, r3
 8016c68:	ea03 0808 	and.w	r8, r3, r8
 8016c6c:	e6e8      	b.n	8016a40 <_strtod_l+0x608>
 8016c6e:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8016c72:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8016c76:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8016c7a:	36e2      	adds	r6, #226	; 0xe2
 8016c7c:	fa01 f306 	lsl.w	r3, r1, r6
 8016c80:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8016c84:	e748      	b.n	8016b18 <_strtod_l+0x6e0>
 8016c86:	2100      	movs	r1, #0
 8016c88:	2301      	movs	r3, #1
 8016c8a:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8016c8e:	e743      	b.n	8016b18 <_strtod_l+0x6e0>
 8016c90:	4632      	mov	r2, r6
 8016c92:	9916      	ldr	r1, [sp, #88]	; 0x58
 8016c94:	4620      	mov	r0, r4
 8016c96:	f002 ffb7 	bl	8019c08 <__lshift>
 8016c9a:	9016      	str	r0, [sp, #88]	; 0x58
 8016c9c:	2800      	cmp	r0, #0
 8016c9e:	f47f af6b 	bne.w	8016b78 <_strtod_l+0x740>
 8016ca2:	e60e      	b.n	80168c2 <_strtod_l+0x48a>
 8016ca4:	46ca      	mov	sl, r9
 8016ca6:	d171      	bne.n	8016d8c <_strtod_l+0x954>
 8016ca8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016caa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016cae:	b352      	cbz	r2, 8016d06 <_strtod_l+0x8ce>
 8016cb0:	4a33      	ldr	r2, [pc, #204]	; (8016d80 <_strtod_l+0x948>)
 8016cb2:	4293      	cmp	r3, r2
 8016cb4:	d12a      	bne.n	8016d0c <_strtod_l+0x8d4>
 8016cb6:	9b04      	ldr	r3, [sp, #16]
 8016cb8:	4641      	mov	r1, r8
 8016cba:	b1fb      	cbz	r3, 8016cfc <_strtod_l+0x8c4>
 8016cbc:	4b2e      	ldr	r3, [pc, #184]	; (8016d78 <_strtod_l+0x940>)
 8016cbe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016cc2:	ea09 0303 	and.w	r3, r9, r3
 8016cc6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8016cca:	d81a      	bhi.n	8016d02 <_strtod_l+0x8ca>
 8016ccc:	0d1b      	lsrs	r3, r3, #20
 8016cce:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8016cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8016cd6:	4299      	cmp	r1, r3
 8016cd8:	d118      	bne.n	8016d0c <_strtod_l+0x8d4>
 8016cda:	4b2a      	ldr	r3, [pc, #168]	; (8016d84 <_strtod_l+0x94c>)
 8016cdc:	459a      	cmp	sl, r3
 8016cde:	d102      	bne.n	8016ce6 <_strtod_l+0x8ae>
 8016ce0:	3101      	adds	r1, #1
 8016ce2:	f43f adee 	beq.w	80168c2 <_strtod_l+0x48a>
 8016ce6:	4b24      	ldr	r3, [pc, #144]	; (8016d78 <_strtod_l+0x940>)
 8016ce8:	f04f 0800 	mov.w	r8, #0
 8016cec:	ea0a 0303 	and.w	r3, sl, r3
 8016cf0:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8016cf4:	9b04      	ldr	r3, [sp, #16]
 8016cf6:	2b00      	cmp	r3, #0
 8016cf8:	d1a2      	bne.n	8016c40 <_strtod_l+0x808>
 8016cfa:	e5ec      	b.n	80168d6 <_strtod_l+0x49e>
 8016cfc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016d00:	e7e9      	b.n	8016cd6 <_strtod_l+0x89e>
 8016d02:	4613      	mov	r3, r2
 8016d04:	e7e7      	b.n	8016cd6 <_strtod_l+0x89e>
 8016d06:	ea53 0308 	orrs.w	r3, r3, r8
 8016d0a:	d08a      	beq.n	8016c22 <_strtod_l+0x7ea>
 8016d0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016d0e:	b1e3      	cbz	r3, 8016d4a <_strtod_l+0x912>
 8016d10:	ea13 0f0a 	tst.w	r3, sl
 8016d14:	d0ee      	beq.n	8016cf4 <_strtod_l+0x8bc>
 8016d16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016d18:	4640      	mov	r0, r8
 8016d1a:	9a04      	ldr	r2, [sp, #16]
 8016d1c:	4649      	mov	r1, r9
 8016d1e:	b1c3      	cbz	r3, 8016d52 <_strtod_l+0x91a>
 8016d20:	f7ff fb6e 	bl	8016400 <sulp>
 8016d24:	4602      	mov	r2, r0
 8016d26:	460b      	mov	r3, r1
 8016d28:	ec51 0b18 	vmov	r0, r1, d8
 8016d2c:	f7e9 fabc 	bl	80002a8 <__adddf3>
 8016d30:	4680      	mov	r8, r0
 8016d32:	4689      	mov	r9, r1
 8016d34:	e7de      	b.n	8016cf4 <_strtod_l+0x8bc>
 8016d36:	4013      	ands	r3, r2
 8016d38:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8016d3c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8016d40:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8016d44:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8016d48:	e7d4      	b.n	8016cf4 <_strtod_l+0x8bc>
 8016d4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016d4c:	ea13 0f08 	tst.w	r3, r8
 8016d50:	e7e0      	b.n	8016d14 <_strtod_l+0x8dc>
 8016d52:	f7ff fb55 	bl	8016400 <sulp>
 8016d56:	4602      	mov	r2, r0
 8016d58:	460b      	mov	r3, r1
 8016d5a:	ec51 0b18 	vmov	r0, r1, d8
 8016d5e:	f7e9 faa1 	bl	80002a4 <__aeabi_dsub>
 8016d62:	2200      	movs	r2, #0
 8016d64:	2300      	movs	r3, #0
 8016d66:	4680      	mov	r8, r0
 8016d68:	4689      	mov	r9, r1
 8016d6a:	f7e9 febb 	bl	8000ae4 <__aeabi_dcmpeq>
 8016d6e:	2800      	cmp	r0, #0
 8016d70:	d0c0      	beq.n	8016cf4 <_strtod_l+0x8bc>
 8016d72:	e617      	b.n	80169a4 <_strtod_l+0x56c>
 8016d74:	fffffc02 	.word	0xfffffc02
 8016d78:	7ff00000 	.word	0x7ff00000
 8016d7c:	39500000 	.word	0x39500000
 8016d80:	000fffff 	.word	0x000fffff
 8016d84:	7fefffff 	.word	0x7fefffff
 8016d88:	0818dd78 	.word	0x0818dd78
 8016d8c:	4659      	mov	r1, fp
 8016d8e:	4628      	mov	r0, r5
 8016d90:	f003 f920 	bl	8019fd4 <__ratio>
 8016d94:	2200      	movs	r2, #0
 8016d96:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8016d9a:	ee10 0a10 	vmov	r0, s0
 8016d9e:	ec57 6b10 	vmov	r6, r7, d0
 8016da2:	4639      	mov	r1, r7
 8016da4:	f7e9 feb2 	bl	8000b0c <__aeabi_dcmple>
 8016da8:	2800      	cmp	r0, #0
 8016daa:	d071      	beq.n	8016e90 <_strtod_l+0xa58>
 8016dac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016dae:	2b00      	cmp	r3, #0
 8016db0:	d17c      	bne.n	8016eac <_strtod_l+0xa74>
 8016db2:	f1b8 0f00 	cmp.w	r8, #0
 8016db6:	d15a      	bne.n	8016e6e <_strtod_l+0xa36>
 8016db8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016dbc:	2b00      	cmp	r3, #0
 8016dbe:	d15d      	bne.n	8016e7c <_strtod_l+0xa44>
 8016dc0:	2200      	movs	r2, #0
 8016dc2:	4b91      	ldr	r3, [pc, #580]	; (8017008 <_strtod_l+0xbd0>)
 8016dc4:	4630      	mov	r0, r6
 8016dc6:	4639      	mov	r1, r7
 8016dc8:	f7e9 fe96 	bl	8000af8 <__aeabi_dcmplt>
 8016dcc:	2800      	cmp	r0, #0
 8016dce:	d15c      	bne.n	8016e8a <_strtod_l+0xa52>
 8016dd0:	4630      	mov	r0, r6
 8016dd2:	4639      	mov	r1, r7
 8016dd4:	2200      	movs	r2, #0
 8016dd6:	4b8d      	ldr	r3, [pc, #564]	; (801700c <_strtod_l+0xbd4>)
 8016dd8:	f7e9 fc1c 	bl	8000614 <__aeabi_dmul>
 8016ddc:	4606      	mov	r6, r0
 8016dde:	460f      	mov	r7, r1
 8016de0:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8016de4:	9606      	str	r6, [sp, #24]
 8016de6:	9307      	str	r3, [sp, #28]
 8016de8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016dec:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8016df0:	4b87      	ldr	r3, [pc, #540]	; (8017010 <_strtod_l+0xbd8>)
 8016df2:	ea0a 0303 	and.w	r3, sl, r3
 8016df6:	930d      	str	r3, [sp, #52]	; 0x34
 8016df8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016dfa:	4b86      	ldr	r3, [pc, #536]	; (8017014 <_strtod_l+0xbdc>)
 8016dfc:	429a      	cmp	r2, r3
 8016dfe:	f040 8090 	bne.w	8016f22 <_strtod_l+0xaea>
 8016e02:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8016e06:	ec49 8b10 	vmov	d0, r8, r9
 8016e0a:	f003 f815 	bl	8019e38 <__ulp>
 8016e0e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016e12:	ec51 0b10 	vmov	r0, r1, d0
 8016e16:	f7e9 fbfd 	bl	8000614 <__aeabi_dmul>
 8016e1a:	4642      	mov	r2, r8
 8016e1c:	464b      	mov	r3, r9
 8016e1e:	f7e9 fa43 	bl	80002a8 <__adddf3>
 8016e22:	460b      	mov	r3, r1
 8016e24:	497a      	ldr	r1, [pc, #488]	; (8017010 <_strtod_l+0xbd8>)
 8016e26:	4680      	mov	r8, r0
 8016e28:	4a7b      	ldr	r2, [pc, #492]	; (8017018 <_strtod_l+0xbe0>)
 8016e2a:	4019      	ands	r1, r3
 8016e2c:	4291      	cmp	r1, r2
 8016e2e:	d944      	bls.n	8016eba <_strtod_l+0xa82>
 8016e30:	ee18 2a90 	vmov	r2, s17
 8016e34:	4b79      	ldr	r3, [pc, #484]	; (801701c <_strtod_l+0xbe4>)
 8016e36:	429a      	cmp	r2, r3
 8016e38:	d104      	bne.n	8016e44 <_strtod_l+0xa0c>
 8016e3a:	ee18 3a10 	vmov	r3, s16
 8016e3e:	3301      	adds	r3, #1
 8016e40:	f43f ad3f 	beq.w	80168c2 <_strtod_l+0x48a>
 8016e44:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 801701c <_strtod_l+0xbe4>
 8016e48:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8016e4c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8016e4e:	4620      	mov	r0, r4
 8016e50:	f002 fcbe 	bl	80197d0 <_Bfree>
 8016e54:	9905      	ldr	r1, [sp, #20]
 8016e56:	4620      	mov	r0, r4
 8016e58:	f002 fcba 	bl	80197d0 <_Bfree>
 8016e5c:	4659      	mov	r1, fp
 8016e5e:	4620      	mov	r0, r4
 8016e60:	f002 fcb6 	bl	80197d0 <_Bfree>
 8016e64:	4629      	mov	r1, r5
 8016e66:	4620      	mov	r0, r4
 8016e68:	f002 fcb2 	bl	80197d0 <_Bfree>
 8016e6c:	e609      	b.n	8016a82 <_strtod_l+0x64a>
 8016e6e:	f1b8 0f01 	cmp.w	r8, #1
 8016e72:	d103      	bne.n	8016e7c <_strtod_l+0xa44>
 8016e74:	f1b9 0f00 	cmp.w	r9, #0
 8016e78:	f43f ad94 	beq.w	80169a4 <_strtod_l+0x56c>
 8016e7c:	2600      	movs	r6, #0
 8016e7e:	4f62      	ldr	r7, [pc, #392]	; (8017008 <_strtod_l+0xbd0>)
 8016e80:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8016fd8 <_strtod_l+0xba0>
 8016e84:	ed8d 7b06 	vstr	d7, [sp, #24]
 8016e88:	e7ae      	b.n	8016de8 <_strtod_l+0x9b0>
 8016e8a:	2600      	movs	r6, #0
 8016e8c:	4f5f      	ldr	r7, [pc, #380]	; (801700c <_strtod_l+0xbd4>)
 8016e8e:	e7a7      	b.n	8016de0 <_strtod_l+0x9a8>
 8016e90:	4b5e      	ldr	r3, [pc, #376]	; (801700c <_strtod_l+0xbd4>)
 8016e92:	4630      	mov	r0, r6
 8016e94:	4639      	mov	r1, r7
 8016e96:	2200      	movs	r2, #0
 8016e98:	f7e9 fbbc 	bl	8000614 <__aeabi_dmul>
 8016e9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016e9e:	4606      	mov	r6, r0
 8016ea0:	460f      	mov	r7, r1
 8016ea2:	2b00      	cmp	r3, #0
 8016ea4:	d09c      	beq.n	8016de0 <_strtod_l+0x9a8>
 8016ea6:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8016eaa:	e79d      	b.n	8016de8 <_strtod_l+0x9b0>
 8016eac:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 8016fe0 <_strtod_l+0xba8>
 8016eb0:	ec57 6b17 	vmov	r6, r7, d7
 8016eb4:	ed8d 7b06 	vstr	d7, [sp, #24]
 8016eb8:	e796      	b.n	8016de8 <_strtod_l+0x9b0>
 8016eba:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8016ebe:	9b04      	ldr	r3, [sp, #16]
 8016ec0:	46ca      	mov	sl, r9
 8016ec2:	2b00      	cmp	r3, #0
 8016ec4:	d1c2      	bne.n	8016e4c <_strtod_l+0xa14>
 8016ec6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8016eca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016ecc:	0d1b      	lsrs	r3, r3, #20
 8016ece:	051b      	lsls	r3, r3, #20
 8016ed0:	429a      	cmp	r2, r3
 8016ed2:	d1bb      	bne.n	8016e4c <_strtod_l+0xa14>
 8016ed4:	4630      	mov	r0, r6
 8016ed6:	4639      	mov	r1, r7
 8016ed8:	f7e9 fefc 	bl	8000cd4 <__aeabi_d2lz>
 8016edc:	f7e9 fb6c 	bl	80005b8 <__aeabi_l2d>
 8016ee0:	4602      	mov	r2, r0
 8016ee2:	460b      	mov	r3, r1
 8016ee4:	4630      	mov	r0, r6
 8016ee6:	4639      	mov	r1, r7
 8016ee8:	f7e9 f9dc 	bl	80002a4 <__aeabi_dsub>
 8016eec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016ef0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016ef2:	4606      	mov	r6, r0
 8016ef4:	ea43 0308 	orr.w	r3, r3, r8
 8016ef8:	460f      	mov	r7, r1
 8016efa:	4313      	orrs	r3, r2
 8016efc:	d054      	beq.n	8016fa8 <_strtod_l+0xb70>
 8016efe:	a33a      	add	r3, pc, #232	; (adr r3, 8016fe8 <_strtod_l+0xbb0>)
 8016f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f04:	f7e9 fdf8 	bl	8000af8 <__aeabi_dcmplt>
 8016f08:	2800      	cmp	r0, #0
 8016f0a:	f47f ace4 	bne.w	80168d6 <_strtod_l+0x49e>
 8016f0e:	4630      	mov	r0, r6
 8016f10:	4639      	mov	r1, r7
 8016f12:	a337      	add	r3, pc, #220	; (adr r3, 8016ff0 <_strtod_l+0xbb8>)
 8016f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f18:	f7e9 fe0c 	bl	8000b34 <__aeabi_dcmpgt>
 8016f1c:	2800      	cmp	r0, #0
 8016f1e:	d095      	beq.n	8016e4c <_strtod_l+0xa14>
 8016f20:	e4d9      	b.n	80168d6 <_strtod_l+0x49e>
 8016f22:	9b04      	ldr	r3, [sp, #16]
 8016f24:	b333      	cbz	r3, 8016f74 <_strtod_l+0xb3c>
 8016f26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016f28:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8016f2c:	d822      	bhi.n	8016f74 <_strtod_l+0xb3c>
 8016f2e:	4630      	mov	r0, r6
 8016f30:	4639      	mov	r1, r7
 8016f32:	a331      	add	r3, pc, #196	; (adr r3, 8016ff8 <_strtod_l+0xbc0>)
 8016f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f38:	f7e9 fde8 	bl	8000b0c <__aeabi_dcmple>
 8016f3c:	b1a0      	cbz	r0, 8016f68 <_strtod_l+0xb30>
 8016f3e:	4639      	mov	r1, r7
 8016f40:	4630      	mov	r0, r6
 8016f42:	f7e9 fe3f 	bl	8000bc4 <__aeabi_d2uiz>
 8016f46:	2801      	cmp	r0, #1
 8016f48:	bf38      	it	cc
 8016f4a:	2001      	movcc	r0, #1
 8016f4c:	f7e9 fae8 	bl	8000520 <__aeabi_ui2d>
 8016f50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016f52:	4606      	mov	r6, r0
 8016f54:	460f      	mov	r7, r1
 8016f56:	bb23      	cbnz	r3, 8016fa2 <_strtod_l+0xb6a>
 8016f58:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016f5c:	9010      	str	r0, [sp, #64]	; 0x40
 8016f5e:	9311      	str	r3, [sp, #68]	; 0x44
 8016f60:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8016f64:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8016f68:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016f6a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016f6c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8016f70:	1a9b      	subs	r3, r3, r2
 8016f72:	930f      	str	r3, [sp, #60]	; 0x3c
 8016f74:	eeb0 0a48 	vmov.f32	s0, s16
 8016f78:	eef0 0a68 	vmov.f32	s1, s17
 8016f7c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8016f80:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8016f84:	f002 ff58 	bl	8019e38 <__ulp>
 8016f88:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8016f8c:	ec53 2b10 	vmov	r2, r3, d0
 8016f90:	f7e9 fb40 	bl	8000614 <__aeabi_dmul>
 8016f94:	ec53 2b18 	vmov	r2, r3, d8
 8016f98:	f7e9 f986 	bl	80002a8 <__adddf3>
 8016f9c:	4680      	mov	r8, r0
 8016f9e:	4689      	mov	r9, r1
 8016fa0:	e78d      	b.n	8016ebe <_strtod_l+0xa86>
 8016fa2:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8016fa6:	e7db      	b.n	8016f60 <_strtod_l+0xb28>
 8016fa8:	a315      	add	r3, pc, #84	; (adr r3, 8017000 <_strtod_l+0xbc8>)
 8016faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016fae:	f7e9 fda3 	bl	8000af8 <__aeabi_dcmplt>
 8016fb2:	e7b3      	b.n	8016f1c <_strtod_l+0xae4>
 8016fb4:	2300      	movs	r3, #0
 8016fb6:	930a      	str	r3, [sp, #40]	; 0x28
 8016fb8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016fba:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8016fbc:	6013      	str	r3, [r2, #0]
 8016fbe:	f7ff ba7a 	b.w	80164b6 <_strtod_l+0x7e>
 8016fc2:	2a65      	cmp	r2, #101	; 0x65
 8016fc4:	f43f ab72 	beq.w	80166ac <_strtod_l+0x274>
 8016fc8:	2a45      	cmp	r2, #69	; 0x45
 8016fca:	f43f ab6f 	beq.w	80166ac <_strtod_l+0x274>
 8016fce:	2301      	movs	r3, #1
 8016fd0:	f7ff bba8 	b.w	8016724 <_strtod_l+0x2ec>
 8016fd4:	f3af 8000 	nop.w
 8016fd8:	00000000 	.word	0x00000000
 8016fdc:	bff00000 	.word	0xbff00000
 8016fe0:	00000000 	.word	0x00000000
 8016fe4:	3ff00000 	.word	0x3ff00000
 8016fe8:	94a03595 	.word	0x94a03595
 8016fec:	3fdfffff 	.word	0x3fdfffff
 8016ff0:	35afe535 	.word	0x35afe535
 8016ff4:	3fe00000 	.word	0x3fe00000
 8016ff8:	ffc00000 	.word	0xffc00000
 8016ffc:	41dfffff 	.word	0x41dfffff
 8017000:	94a03595 	.word	0x94a03595
 8017004:	3fcfffff 	.word	0x3fcfffff
 8017008:	3ff00000 	.word	0x3ff00000
 801700c:	3fe00000 	.word	0x3fe00000
 8017010:	7ff00000 	.word	0x7ff00000
 8017014:	7fe00000 	.word	0x7fe00000
 8017018:	7c9fffff 	.word	0x7c9fffff
 801701c:	7fefffff 	.word	0x7fefffff

08017020 <_strtod_r>:
 8017020:	4b01      	ldr	r3, [pc, #4]	; (8017028 <_strtod_r+0x8>)
 8017022:	f7ff ba09 	b.w	8016438 <_strtod_l>
 8017026:	bf00      	nop
 8017028:	20000110 	.word	0x20000110

0801702c <_strtol_l.constprop.0>:
 801702c:	2b01      	cmp	r3, #1
 801702e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017032:	d001      	beq.n	8017038 <_strtol_l.constprop.0+0xc>
 8017034:	2b24      	cmp	r3, #36	; 0x24
 8017036:	d906      	bls.n	8017046 <_strtol_l.constprop.0+0x1a>
 8017038:	f000 fa54 	bl	80174e4 <__errno>
 801703c:	2316      	movs	r3, #22
 801703e:	6003      	str	r3, [r0, #0]
 8017040:	2000      	movs	r0, #0
 8017042:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017046:	460d      	mov	r5, r1
 8017048:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 801712c <_strtol_l.constprop.0+0x100>
 801704c:	462e      	mov	r6, r5
 801704e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017052:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8017056:	f017 0708 	ands.w	r7, r7, #8
 801705a:	d1f7      	bne.n	801704c <_strtol_l.constprop.0+0x20>
 801705c:	2c2d      	cmp	r4, #45	; 0x2d
 801705e:	d132      	bne.n	80170c6 <_strtol_l.constprop.0+0x9a>
 8017060:	782c      	ldrb	r4, [r5, #0]
 8017062:	2701      	movs	r7, #1
 8017064:	1cb5      	adds	r5, r6, #2
 8017066:	2b00      	cmp	r3, #0
 8017068:	d05b      	beq.n	8017122 <_strtol_l.constprop.0+0xf6>
 801706a:	2b10      	cmp	r3, #16
 801706c:	d109      	bne.n	8017082 <_strtol_l.constprop.0+0x56>
 801706e:	2c30      	cmp	r4, #48	; 0x30
 8017070:	d107      	bne.n	8017082 <_strtol_l.constprop.0+0x56>
 8017072:	782c      	ldrb	r4, [r5, #0]
 8017074:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8017078:	2c58      	cmp	r4, #88	; 0x58
 801707a:	d14d      	bne.n	8017118 <_strtol_l.constprop.0+0xec>
 801707c:	786c      	ldrb	r4, [r5, #1]
 801707e:	2310      	movs	r3, #16
 8017080:	3502      	adds	r5, #2
 8017082:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8017086:	f04f 0e00 	mov.w	lr, #0
 801708a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 801708e:	4676      	mov	r6, lr
 8017090:	fbb8 f9f3 	udiv	r9, r8, r3
 8017094:	fb03 8a19 	mls	sl, r3, r9, r8
 8017098:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801709c:	f1bc 0f09 	cmp.w	ip, #9
 80170a0:	d816      	bhi.n	80170d0 <_strtol_l.constprop.0+0xa4>
 80170a2:	4664      	mov	r4, ip
 80170a4:	42a3      	cmp	r3, r4
 80170a6:	dd24      	ble.n	80170f2 <_strtol_l.constprop.0+0xc6>
 80170a8:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 80170ac:	d008      	beq.n	80170c0 <_strtol_l.constprop.0+0x94>
 80170ae:	45b1      	cmp	r9, r6
 80170b0:	d31c      	bcc.n	80170ec <_strtol_l.constprop.0+0xc0>
 80170b2:	d101      	bne.n	80170b8 <_strtol_l.constprop.0+0x8c>
 80170b4:	45a2      	cmp	sl, r4
 80170b6:	db19      	blt.n	80170ec <_strtol_l.constprop.0+0xc0>
 80170b8:	fb06 4603 	mla	r6, r6, r3, r4
 80170bc:	f04f 0e01 	mov.w	lr, #1
 80170c0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80170c4:	e7e8      	b.n	8017098 <_strtol_l.constprop.0+0x6c>
 80170c6:	2c2b      	cmp	r4, #43	; 0x2b
 80170c8:	bf04      	itt	eq
 80170ca:	782c      	ldrbeq	r4, [r5, #0]
 80170cc:	1cb5      	addeq	r5, r6, #2
 80170ce:	e7ca      	b.n	8017066 <_strtol_l.constprop.0+0x3a>
 80170d0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80170d4:	f1bc 0f19 	cmp.w	ip, #25
 80170d8:	d801      	bhi.n	80170de <_strtol_l.constprop.0+0xb2>
 80170da:	3c37      	subs	r4, #55	; 0x37
 80170dc:	e7e2      	b.n	80170a4 <_strtol_l.constprop.0+0x78>
 80170de:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80170e2:	f1bc 0f19 	cmp.w	ip, #25
 80170e6:	d804      	bhi.n	80170f2 <_strtol_l.constprop.0+0xc6>
 80170e8:	3c57      	subs	r4, #87	; 0x57
 80170ea:	e7db      	b.n	80170a4 <_strtol_l.constprop.0+0x78>
 80170ec:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 80170f0:	e7e6      	b.n	80170c0 <_strtol_l.constprop.0+0x94>
 80170f2:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 80170f6:	d105      	bne.n	8017104 <_strtol_l.constprop.0+0xd8>
 80170f8:	2322      	movs	r3, #34	; 0x22
 80170fa:	4646      	mov	r6, r8
 80170fc:	6003      	str	r3, [r0, #0]
 80170fe:	b942      	cbnz	r2, 8017112 <_strtol_l.constprop.0+0xe6>
 8017100:	4630      	mov	r0, r6
 8017102:	e79e      	b.n	8017042 <_strtol_l.constprop.0+0x16>
 8017104:	b107      	cbz	r7, 8017108 <_strtol_l.constprop.0+0xdc>
 8017106:	4276      	negs	r6, r6
 8017108:	2a00      	cmp	r2, #0
 801710a:	d0f9      	beq.n	8017100 <_strtol_l.constprop.0+0xd4>
 801710c:	f1be 0f00 	cmp.w	lr, #0
 8017110:	d000      	beq.n	8017114 <_strtol_l.constprop.0+0xe8>
 8017112:	1e69      	subs	r1, r5, #1
 8017114:	6011      	str	r1, [r2, #0]
 8017116:	e7f3      	b.n	8017100 <_strtol_l.constprop.0+0xd4>
 8017118:	2430      	movs	r4, #48	; 0x30
 801711a:	2b00      	cmp	r3, #0
 801711c:	d1b1      	bne.n	8017082 <_strtol_l.constprop.0+0x56>
 801711e:	2308      	movs	r3, #8
 8017120:	e7af      	b.n	8017082 <_strtol_l.constprop.0+0x56>
 8017122:	2c30      	cmp	r4, #48	; 0x30
 8017124:	d0a5      	beq.n	8017072 <_strtol_l.constprop.0+0x46>
 8017126:	230a      	movs	r3, #10
 8017128:	e7ab      	b.n	8017082 <_strtol_l.constprop.0+0x56>
 801712a:	bf00      	nop
 801712c:	0818dda9 	.word	0x0818dda9

08017130 <_strtol_r>:
 8017130:	f7ff bf7c 	b.w	801702c <_strtol_l.constprop.0>

08017134 <_fwalk_sglue>:
 8017134:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017138:	4607      	mov	r7, r0
 801713a:	4688      	mov	r8, r1
 801713c:	4614      	mov	r4, r2
 801713e:	2600      	movs	r6, #0
 8017140:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017144:	f1b9 0901 	subs.w	r9, r9, #1
 8017148:	d505      	bpl.n	8017156 <_fwalk_sglue+0x22>
 801714a:	6824      	ldr	r4, [r4, #0]
 801714c:	2c00      	cmp	r4, #0
 801714e:	d1f7      	bne.n	8017140 <_fwalk_sglue+0xc>
 8017150:	4630      	mov	r0, r6
 8017152:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017156:	89ab      	ldrh	r3, [r5, #12]
 8017158:	2b01      	cmp	r3, #1
 801715a:	d907      	bls.n	801716c <_fwalk_sglue+0x38>
 801715c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017160:	3301      	adds	r3, #1
 8017162:	d003      	beq.n	801716c <_fwalk_sglue+0x38>
 8017164:	4629      	mov	r1, r5
 8017166:	4638      	mov	r0, r7
 8017168:	47c0      	blx	r8
 801716a:	4306      	orrs	r6, r0
 801716c:	3568      	adds	r5, #104	; 0x68
 801716e:	e7e9      	b.n	8017144 <_fwalk_sglue+0x10>

08017170 <__swhatbuf_r>:
 8017170:	b570      	push	{r4, r5, r6, lr}
 8017172:	460c      	mov	r4, r1
 8017174:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017178:	b096      	sub	sp, #88	; 0x58
 801717a:	4615      	mov	r5, r2
 801717c:	2900      	cmp	r1, #0
 801717e:	461e      	mov	r6, r3
 8017180:	da0c      	bge.n	801719c <__swhatbuf_r+0x2c>
 8017182:	89a3      	ldrh	r3, [r4, #12]
 8017184:	2100      	movs	r1, #0
 8017186:	f013 0f80 	tst.w	r3, #128	; 0x80
 801718a:	bf0c      	ite	eq
 801718c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8017190:	2340      	movne	r3, #64	; 0x40
 8017192:	2000      	movs	r0, #0
 8017194:	6031      	str	r1, [r6, #0]
 8017196:	602b      	str	r3, [r5, #0]
 8017198:	b016      	add	sp, #88	; 0x58
 801719a:	bd70      	pop	{r4, r5, r6, pc}
 801719c:	466a      	mov	r2, sp
 801719e:	f000 f939 	bl	8017414 <_fstat_r>
 80171a2:	2800      	cmp	r0, #0
 80171a4:	dbed      	blt.n	8017182 <__swhatbuf_r+0x12>
 80171a6:	9901      	ldr	r1, [sp, #4]
 80171a8:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80171ac:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80171b0:	4259      	negs	r1, r3
 80171b2:	4159      	adcs	r1, r3
 80171b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80171b8:	e7eb      	b.n	8017192 <__swhatbuf_r+0x22>

080171ba <__smakebuf_r>:
 80171ba:	898b      	ldrh	r3, [r1, #12]
 80171bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80171be:	079d      	lsls	r5, r3, #30
 80171c0:	4606      	mov	r6, r0
 80171c2:	460c      	mov	r4, r1
 80171c4:	d507      	bpl.n	80171d6 <__smakebuf_r+0x1c>
 80171c6:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80171ca:	6023      	str	r3, [r4, #0]
 80171cc:	6123      	str	r3, [r4, #16]
 80171ce:	2301      	movs	r3, #1
 80171d0:	6163      	str	r3, [r4, #20]
 80171d2:	b002      	add	sp, #8
 80171d4:	bd70      	pop	{r4, r5, r6, pc}
 80171d6:	ab01      	add	r3, sp, #4
 80171d8:	466a      	mov	r2, sp
 80171da:	f7ff ffc9 	bl	8017170 <__swhatbuf_r>
 80171de:	9900      	ldr	r1, [sp, #0]
 80171e0:	4605      	mov	r5, r0
 80171e2:	4630      	mov	r0, r6
 80171e4:	f7fe fabe 	bl	8015764 <_malloc_r>
 80171e8:	b948      	cbnz	r0, 80171fe <__smakebuf_r+0x44>
 80171ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80171ee:	059a      	lsls	r2, r3, #22
 80171f0:	d4ef      	bmi.n	80171d2 <__smakebuf_r+0x18>
 80171f2:	f023 0303 	bic.w	r3, r3, #3
 80171f6:	f043 0302 	orr.w	r3, r3, #2
 80171fa:	81a3      	strh	r3, [r4, #12]
 80171fc:	e7e3      	b.n	80171c6 <__smakebuf_r+0xc>
 80171fe:	89a3      	ldrh	r3, [r4, #12]
 8017200:	6020      	str	r0, [r4, #0]
 8017202:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017206:	6120      	str	r0, [r4, #16]
 8017208:	81a3      	strh	r3, [r4, #12]
 801720a:	9b00      	ldr	r3, [sp, #0]
 801720c:	6163      	str	r3, [r4, #20]
 801720e:	9b01      	ldr	r3, [sp, #4]
 8017210:	b15b      	cbz	r3, 801722a <__smakebuf_r+0x70>
 8017212:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017216:	4630      	mov	r0, r6
 8017218:	f000 f90e 	bl	8017438 <_isatty_r>
 801721c:	b128      	cbz	r0, 801722a <__smakebuf_r+0x70>
 801721e:	89a3      	ldrh	r3, [r4, #12]
 8017220:	f023 0303 	bic.w	r3, r3, #3
 8017224:	f043 0301 	orr.w	r3, r3, #1
 8017228:	81a3      	strh	r3, [r4, #12]
 801722a:	89a3      	ldrh	r3, [r4, #12]
 801722c:	431d      	orrs	r5, r3
 801722e:	81a5      	strh	r5, [r4, #12]
 8017230:	e7cf      	b.n	80171d2 <__smakebuf_r+0x18>
	...

08017234 <iprintf>:
 8017234:	b40f      	push	{r0, r1, r2, r3}
 8017236:	b507      	push	{r0, r1, r2, lr}
 8017238:	4906      	ldr	r1, [pc, #24]	; (8017254 <iprintf+0x20>)
 801723a:	ab04      	add	r3, sp, #16
 801723c:	6808      	ldr	r0, [r1, #0]
 801723e:	f853 2b04 	ldr.w	r2, [r3], #4
 8017242:	6881      	ldr	r1, [r0, #8]
 8017244:	9301      	str	r3, [sp, #4]
 8017246:	f001 ff25 	bl	8019094 <_vfiprintf_r>
 801724a:	b003      	add	sp, #12
 801724c:	f85d eb04 	ldr.w	lr, [sp], #4
 8017250:	b004      	add	sp, #16
 8017252:	4770      	bx	lr
 8017254:	200002c8 	.word	0x200002c8

08017258 <putchar>:
 8017258:	4b02      	ldr	r3, [pc, #8]	; (8017264 <putchar+0xc>)
 801725a:	4601      	mov	r1, r0
 801725c:	6818      	ldr	r0, [r3, #0]
 801725e:	6882      	ldr	r2, [r0, #8]
 8017260:	f003 b8ad 	b.w	801a3be <_putc_r>
 8017264:	200002c8 	.word	0x200002c8

08017268 <_puts_r>:
 8017268:	6a03      	ldr	r3, [r0, #32]
 801726a:	b570      	push	{r4, r5, r6, lr}
 801726c:	4605      	mov	r5, r0
 801726e:	460e      	mov	r6, r1
 8017270:	6884      	ldr	r4, [r0, #8]
 8017272:	b90b      	cbnz	r3, 8017278 <_puts_r+0x10>
 8017274:	f7ff f8ac 	bl	80163d0 <__sinit>
 8017278:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801727a:	07db      	lsls	r3, r3, #31
 801727c:	d405      	bmi.n	801728a <_puts_r+0x22>
 801727e:	89a3      	ldrh	r3, [r4, #12]
 8017280:	0598      	lsls	r0, r3, #22
 8017282:	d402      	bmi.n	801728a <_puts_r+0x22>
 8017284:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017286:	f000 f958 	bl	801753a <__retarget_lock_acquire_recursive>
 801728a:	89a3      	ldrh	r3, [r4, #12]
 801728c:	0719      	lsls	r1, r3, #28
 801728e:	d513      	bpl.n	80172b8 <_puts_r+0x50>
 8017290:	6923      	ldr	r3, [r4, #16]
 8017292:	b18b      	cbz	r3, 80172b8 <_puts_r+0x50>
 8017294:	3e01      	subs	r6, #1
 8017296:	68a3      	ldr	r3, [r4, #8]
 8017298:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801729c:	3b01      	subs	r3, #1
 801729e:	60a3      	str	r3, [r4, #8]
 80172a0:	b9e9      	cbnz	r1, 80172de <_puts_r+0x76>
 80172a2:	2b00      	cmp	r3, #0
 80172a4:	da2e      	bge.n	8017304 <_puts_r+0x9c>
 80172a6:	4622      	mov	r2, r4
 80172a8:	210a      	movs	r1, #10
 80172aa:	4628      	mov	r0, r5
 80172ac:	f002 ffe4 	bl	801a278 <__swbuf_r>
 80172b0:	3001      	adds	r0, #1
 80172b2:	d007      	beq.n	80172c4 <_puts_r+0x5c>
 80172b4:	250a      	movs	r5, #10
 80172b6:	e007      	b.n	80172c8 <_puts_r+0x60>
 80172b8:	4621      	mov	r1, r4
 80172ba:	4628      	mov	r0, r5
 80172bc:	f003 f81a 	bl	801a2f4 <__swsetup_r>
 80172c0:	2800      	cmp	r0, #0
 80172c2:	d0e7      	beq.n	8017294 <_puts_r+0x2c>
 80172c4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80172c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80172ca:	07da      	lsls	r2, r3, #31
 80172cc:	d405      	bmi.n	80172da <_puts_r+0x72>
 80172ce:	89a3      	ldrh	r3, [r4, #12]
 80172d0:	059b      	lsls	r3, r3, #22
 80172d2:	d402      	bmi.n	80172da <_puts_r+0x72>
 80172d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80172d6:	f000 f931 	bl	801753c <__retarget_lock_release_recursive>
 80172da:	4628      	mov	r0, r5
 80172dc:	bd70      	pop	{r4, r5, r6, pc}
 80172de:	2b00      	cmp	r3, #0
 80172e0:	da04      	bge.n	80172ec <_puts_r+0x84>
 80172e2:	69a2      	ldr	r2, [r4, #24]
 80172e4:	429a      	cmp	r2, r3
 80172e6:	dc06      	bgt.n	80172f6 <_puts_r+0x8e>
 80172e8:	290a      	cmp	r1, #10
 80172ea:	d004      	beq.n	80172f6 <_puts_r+0x8e>
 80172ec:	6823      	ldr	r3, [r4, #0]
 80172ee:	1c5a      	adds	r2, r3, #1
 80172f0:	6022      	str	r2, [r4, #0]
 80172f2:	7019      	strb	r1, [r3, #0]
 80172f4:	e7cf      	b.n	8017296 <_puts_r+0x2e>
 80172f6:	4622      	mov	r2, r4
 80172f8:	4628      	mov	r0, r5
 80172fa:	f002 ffbd 	bl	801a278 <__swbuf_r>
 80172fe:	3001      	adds	r0, #1
 8017300:	d1c9      	bne.n	8017296 <_puts_r+0x2e>
 8017302:	e7df      	b.n	80172c4 <_puts_r+0x5c>
 8017304:	6823      	ldr	r3, [r4, #0]
 8017306:	250a      	movs	r5, #10
 8017308:	1c5a      	adds	r2, r3, #1
 801730a:	6022      	str	r2, [r4, #0]
 801730c:	701d      	strb	r5, [r3, #0]
 801730e:	e7db      	b.n	80172c8 <_puts_r+0x60>

08017310 <puts>:
 8017310:	4b02      	ldr	r3, [pc, #8]	; (801731c <puts+0xc>)
 8017312:	4601      	mov	r1, r0
 8017314:	6818      	ldr	r0, [r3, #0]
 8017316:	f7ff bfa7 	b.w	8017268 <_puts_r>
 801731a:	bf00      	nop
 801731c:	200002c8 	.word	0x200002c8

08017320 <strcat>:
 8017320:	4602      	mov	r2, r0
 8017322:	b510      	push	{r4, lr}
 8017324:	7814      	ldrb	r4, [r2, #0]
 8017326:	4613      	mov	r3, r2
 8017328:	3201      	adds	r2, #1
 801732a:	2c00      	cmp	r4, #0
 801732c:	d1fa      	bne.n	8017324 <strcat+0x4>
 801732e:	3b01      	subs	r3, #1
 8017330:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017334:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017338:	2a00      	cmp	r2, #0
 801733a:	d1f9      	bne.n	8017330 <strcat+0x10>
 801733c:	bd10      	pop	{r4, pc}

0801733e <strncmp>:
 801733e:	b510      	push	{r4, lr}
 8017340:	b16a      	cbz	r2, 801735e <strncmp+0x20>
 8017342:	3901      	subs	r1, #1
 8017344:	1884      	adds	r4, r0, r2
 8017346:	f810 2b01 	ldrb.w	r2, [r0], #1
 801734a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801734e:	429a      	cmp	r2, r3
 8017350:	d103      	bne.n	801735a <strncmp+0x1c>
 8017352:	42a0      	cmp	r0, r4
 8017354:	d001      	beq.n	801735a <strncmp+0x1c>
 8017356:	2a00      	cmp	r2, #0
 8017358:	d1f5      	bne.n	8017346 <strncmp+0x8>
 801735a:	1ad0      	subs	r0, r2, r3
 801735c:	bd10      	pop	{r4, pc}
 801735e:	4610      	mov	r0, r2
 8017360:	e7fc      	b.n	801735c <strncmp+0x1e>

08017362 <strncpy>:
 8017362:	3901      	subs	r1, #1
 8017364:	4603      	mov	r3, r0
 8017366:	b510      	push	{r4, lr}
 8017368:	b132      	cbz	r2, 8017378 <strncpy+0x16>
 801736a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801736e:	3a01      	subs	r2, #1
 8017370:	f803 4b01 	strb.w	r4, [r3], #1
 8017374:	2c00      	cmp	r4, #0
 8017376:	d1f7      	bne.n	8017368 <strncpy+0x6>
 8017378:	441a      	add	r2, r3
 801737a:	2100      	movs	r1, #0
 801737c:	4293      	cmp	r3, r2
 801737e:	d100      	bne.n	8017382 <strncpy+0x20>
 8017380:	bd10      	pop	{r4, pc}
 8017382:	f803 1b01 	strb.w	r1, [r3], #1
 8017386:	e7f9      	b.n	801737c <strncpy+0x1a>

08017388 <memcmp>:
 8017388:	3901      	subs	r1, #1
 801738a:	4402      	add	r2, r0
 801738c:	b510      	push	{r4, lr}
 801738e:	4290      	cmp	r0, r2
 8017390:	d101      	bne.n	8017396 <memcmp+0xe>
 8017392:	2000      	movs	r0, #0
 8017394:	e005      	b.n	80173a2 <memcmp+0x1a>
 8017396:	7803      	ldrb	r3, [r0, #0]
 8017398:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801739c:	42a3      	cmp	r3, r4
 801739e:	d001      	beq.n	80173a4 <memcmp+0x1c>
 80173a0:	1b18      	subs	r0, r3, r4
 80173a2:	bd10      	pop	{r4, pc}
 80173a4:	3001      	adds	r0, #1
 80173a6:	e7f2      	b.n	801738e <memcmp+0x6>

080173a8 <memmove>:
 80173a8:	4288      	cmp	r0, r1
 80173aa:	b510      	push	{r4, lr}
 80173ac:	eb01 0402 	add.w	r4, r1, r2
 80173b0:	d902      	bls.n	80173b8 <memmove+0x10>
 80173b2:	4284      	cmp	r4, r0
 80173b4:	4623      	mov	r3, r4
 80173b6:	d807      	bhi.n	80173c8 <memmove+0x20>
 80173b8:	1e43      	subs	r3, r0, #1
 80173ba:	42a1      	cmp	r1, r4
 80173bc:	d008      	beq.n	80173d0 <memmove+0x28>
 80173be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80173c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80173c6:	e7f8      	b.n	80173ba <memmove+0x12>
 80173c8:	4402      	add	r2, r0
 80173ca:	4601      	mov	r1, r0
 80173cc:	428a      	cmp	r2, r1
 80173ce:	d100      	bne.n	80173d2 <memmove+0x2a>
 80173d0:	bd10      	pop	{r4, pc}
 80173d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80173d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80173da:	e7f7      	b.n	80173cc <memmove+0x24>

080173dc <memset>:
 80173dc:	4402      	add	r2, r0
 80173de:	4603      	mov	r3, r0
 80173e0:	4293      	cmp	r3, r2
 80173e2:	d100      	bne.n	80173e6 <memset+0xa>
 80173e4:	4770      	bx	lr
 80173e6:	f803 1b01 	strb.w	r1, [r3], #1
 80173ea:	e7f9      	b.n	80173e0 <memset+0x4>

080173ec <_localeconv_r>:
 80173ec:	4800      	ldr	r0, [pc, #0]	; (80173f0 <_localeconv_r+0x4>)
 80173ee:	4770      	bx	lr
 80173f0:	20000200 	.word	0x20000200

080173f4 <_close_r>:
 80173f4:	b538      	push	{r3, r4, r5, lr}
 80173f6:	2300      	movs	r3, #0
 80173f8:	4d05      	ldr	r5, [pc, #20]	; (8017410 <_close_r+0x1c>)
 80173fa:	4604      	mov	r4, r0
 80173fc:	4608      	mov	r0, r1
 80173fe:	602b      	str	r3, [r5, #0]
 8017400:	f7ea f93f 	bl	8001682 <_close>
 8017404:	1c43      	adds	r3, r0, #1
 8017406:	d102      	bne.n	801740e <_close_r+0x1a>
 8017408:	682b      	ldr	r3, [r5, #0]
 801740a:	b103      	cbz	r3, 801740e <_close_r+0x1a>
 801740c:	6023      	str	r3, [r4, #0]
 801740e:	bd38      	pop	{r3, r4, r5, pc}
 8017410:	20003564 	.word	0x20003564

08017414 <_fstat_r>:
 8017414:	b538      	push	{r3, r4, r5, lr}
 8017416:	2300      	movs	r3, #0
 8017418:	4d06      	ldr	r5, [pc, #24]	; (8017434 <_fstat_r+0x20>)
 801741a:	4604      	mov	r4, r0
 801741c:	4608      	mov	r0, r1
 801741e:	4611      	mov	r1, r2
 8017420:	602b      	str	r3, [r5, #0]
 8017422:	f7ea f93a 	bl	800169a <_fstat>
 8017426:	1c43      	adds	r3, r0, #1
 8017428:	d102      	bne.n	8017430 <_fstat_r+0x1c>
 801742a:	682b      	ldr	r3, [r5, #0]
 801742c:	b103      	cbz	r3, 8017430 <_fstat_r+0x1c>
 801742e:	6023      	str	r3, [r4, #0]
 8017430:	bd38      	pop	{r3, r4, r5, pc}
 8017432:	bf00      	nop
 8017434:	20003564 	.word	0x20003564

08017438 <_isatty_r>:
 8017438:	b538      	push	{r3, r4, r5, lr}
 801743a:	2300      	movs	r3, #0
 801743c:	4d05      	ldr	r5, [pc, #20]	; (8017454 <_isatty_r+0x1c>)
 801743e:	4604      	mov	r4, r0
 8017440:	4608      	mov	r0, r1
 8017442:	602b      	str	r3, [r5, #0]
 8017444:	f7ea f939 	bl	80016ba <_isatty>
 8017448:	1c43      	adds	r3, r0, #1
 801744a:	d102      	bne.n	8017452 <_isatty_r+0x1a>
 801744c:	682b      	ldr	r3, [r5, #0]
 801744e:	b103      	cbz	r3, 8017452 <_isatty_r+0x1a>
 8017450:	6023      	str	r3, [r4, #0]
 8017452:	bd38      	pop	{r3, r4, r5, pc}
 8017454:	20003564 	.word	0x20003564

08017458 <_lseek_r>:
 8017458:	b538      	push	{r3, r4, r5, lr}
 801745a:	4604      	mov	r4, r0
 801745c:	4d06      	ldr	r5, [pc, #24]	; (8017478 <_lseek_r+0x20>)
 801745e:	4608      	mov	r0, r1
 8017460:	4611      	mov	r1, r2
 8017462:	2200      	movs	r2, #0
 8017464:	602a      	str	r2, [r5, #0]
 8017466:	461a      	mov	r2, r3
 8017468:	f7ea f932 	bl	80016d0 <_lseek>
 801746c:	1c43      	adds	r3, r0, #1
 801746e:	d102      	bne.n	8017476 <_lseek_r+0x1e>
 8017470:	682b      	ldr	r3, [r5, #0]
 8017472:	b103      	cbz	r3, 8017476 <_lseek_r+0x1e>
 8017474:	6023      	str	r3, [r4, #0]
 8017476:	bd38      	pop	{r3, r4, r5, pc}
 8017478:	20003564 	.word	0x20003564

0801747c <_read_r>:
 801747c:	b538      	push	{r3, r4, r5, lr}
 801747e:	4604      	mov	r4, r0
 8017480:	4d06      	ldr	r5, [pc, #24]	; (801749c <_read_r+0x20>)
 8017482:	4608      	mov	r0, r1
 8017484:	4611      	mov	r1, r2
 8017486:	2200      	movs	r2, #0
 8017488:	602a      	str	r2, [r5, #0]
 801748a:	461a      	mov	r2, r3
 801748c:	f7ea f8c0 	bl	8001610 <_read>
 8017490:	1c43      	adds	r3, r0, #1
 8017492:	d102      	bne.n	801749a <_read_r+0x1e>
 8017494:	682b      	ldr	r3, [r5, #0]
 8017496:	b103      	cbz	r3, 801749a <_read_r+0x1e>
 8017498:	6023      	str	r3, [r4, #0]
 801749a:	bd38      	pop	{r3, r4, r5, pc}
 801749c:	20003564 	.word	0x20003564

080174a0 <_sbrk_r>:
 80174a0:	b538      	push	{r3, r4, r5, lr}
 80174a2:	2300      	movs	r3, #0
 80174a4:	4d05      	ldr	r5, [pc, #20]	; (80174bc <_sbrk_r+0x1c>)
 80174a6:	4604      	mov	r4, r0
 80174a8:	4608      	mov	r0, r1
 80174aa:	602b      	str	r3, [r5, #0]
 80174ac:	f7ea f91e 	bl	80016ec <_sbrk>
 80174b0:	1c43      	adds	r3, r0, #1
 80174b2:	d102      	bne.n	80174ba <_sbrk_r+0x1a>
 80174b4:	682b      	ldr	r3, [r5, #0]
 80174b6:	b103      	cbz	r3, 80174ba <_sbrk_r+0x1a>
 80174b8:	6023      	str	r3, [r4, #0]
 80174ba:	bd38      	pop	{r3, r4, r5, pc}
 80174bc:	20003564 	.word	0x20003564

080174c0 <_write_r>:
 80174c0:	b538      	push	{r3, r4, r5, lr}
 80174c2:	4604      	mov	r4, r0
 80174c4:	4d06      	ldr	r5, [pc, #24]	; (80174e0 <_write_r+0x20>)
 80174c6:	4608      	mov	r0, r1
 80174c8:	4611      	mov	r1, r2
 80174ca:	2200      	movs	r2, #0
 80174cc:	602a      	str	r2, [r5, #0]
 80174ce:	461a      	mov	r2, r3
 80174d0:	f7ea f8bb 	bl	800164a <_write>
 80174d4:	1c43      	adds	r3, r0, #1
 80174d6:	d102      	bne.n	80174de <_write_r+0x1e>
 80174d8:	682b      	ldr	r3, [r5, #0]
 80174da:	b103      	cbz	r3, 80174de <_write_r+0x1e>
 80174dc:	6023      	str	r3, [r4, #0]
 80174de:	bd38      	pop	{r3, r4, r5, pc}
 80174e0:	20003564 	.word	0x20003564

080174e4 <__errno>:
 80174e4:	4b01      	ldr	r3, [pc, #4]	; (80174ec <__errno+0x8>)
 80174e6:	6818      	ldr	r0, [r3, #0]
 80174e8:	4770      	bx	lr
 80174ea:	bf00      	nop
 80174ec:	200002c8 	.word	0x200002c8

080174f0 <__libc_init_array>:
 80174f0:	b570      	push	{r4, r5, r6, lr}
 80174f2:	4d0d      	ldr	r5, [pc, #52]	; (8017528 <__libc_init_array+0x38>)
 80174f4:	2600      	movs	r6, #0
 80174f6:	4c0d      	ldr	r4, [pc, #52]	; (801752c <__libc_init_array+0x3c>)
 80174f8:	1b64      	subs	r4, r4, r5
 80174fa:	10a4      	asrs	r4, r4, #2
 80174fc:	42a6      	cmp	r6, r4
 80174fe:	d109      	bne.n	8017514 <__libc_init_array+0x24>
 8017500:	4d0b      	ldr	r5, [pc, #44]	; (8017530 <__libc_init_array+0x40>)
 8017502:	2600      	movs	r6, #0
 8017504:	4c0b      	ldr	r4, [pc, #44]	; (8017534 <__libc_init_array+0x44>)
 8017506:	f003 f91f 	bl	801a748 <_init>
 801750a:	1b64      	subs	r4, r4, r5
 801750c:	10a4      	asrs	r4, r4, #2
 801750e:	42a6      	cmp	r6, r4
 8017510:	d105      	bne.n	801751e <__libc_init_array+0x2e>
 8017512:	bd70      	pop	{r4, r5, r6, pc}
 8017514:	f855 3b04 	ldr.w	r3, [r5], #4
 8017518:	3601      	adds	r6, #1
 801751a:	4798      	blx	r3
 801751c:	e7ee      	b.n	80174fc <__libc_init_array+0xc>
 801751e:	f855 3b04 	ldr.w	r3, [r5], #4
 8017522:	3601      	adds	r6, #1
 8017524:	4798      	blx	r3
 8017526:	e7f2      	b.n	801750e <__libc_init_array+0x1e>
 8017528:	0818e160 	.word	0x0818e160
 801752c:	0818e160 	.word	0x0818e160
 8017530:	0818e160 	.word	0x0818e160
 8017534:	0818e164 	.word	0x0818e164

08017538 <__retarget_lock_init_recursive>:
 8017538:	4770      	bx	lr

0801753a <__retarget_lock_acquire_recursive>:
 801753a:	4770      	bx	lr

0801753c <__retarget_lock_release_recursive>:
 801753c:	4770      	bx	lr

0801753e <memchr>:
 801753e:	b2c9      	uxtb	r1, r1
 8017540:	4402      	add	r2, r0
 8017542:	b510      	push	{r4, lr}
 8017544:	4290      	cmp	r0, r2
 8017546:	4603      	mov	r3, r0
 8017548:	d101      	bne.n	801754e <memchr+0x10>
 801754a:	2300      	movs	r3, #0
 801754c:	e003      	b.n	8017556 <memchr+0x18>
 801754e:	781c      	ldrb	r4, [r3, #0]
 8017550:	3001      	adds	r0, #1
 8017552:	428c      	cmp	r4, r1
 8017554:	d1f6      	bne.n	8017544 <memchr+0x6>
 8017556:	4618      	mov	r0, r3
 8017558:	bd10      	pop	{r4, pc}

0801755a <memcpy>:
 801755a:	440a      	add	r2, r1
 801755c:	1e43      	subs	r3, r0, #1
 801755e:	4291      	cmp	r1, r2
 8017560:	d100      	bne.n	8017564 <memcpy+0xa>
 8017562:	4770      	bx	lr
 8017564:	b510      	push	{r4, lr}
 8017566:	f811 4b01 	ldrb.w	r4, [r1], #1
 801756a:	4291      	cmp	r1, r2
 801756c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017570:	d1f9      	bne.n	8017566 <memcpy+0xc>
 8017572:	bd10      	pop	{r4, pc}

08017574 <strcpy>:
 8017574:	4603      	mov	r3, r0
 8017576:	f811 2b01 	ldrb.w	r2, [r1], #1
 801757a:	f803 2b01 	strb.w	r2, [r3], #1
 801757e:	2a00      	cmp	r2, #0
 8017580:	d1f9      	bne.n	8017576 <strcpy+0x2>
 8017582:	4770      	bx	lr
 8017584:	0000      	movs	r0, r0
	...

08017588 <nan>:
 8017588:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8017590 <nan+0x8>
 801758c:	4770      	bx	lr
 801758e:	bf00      	nop
 8017590:	00000000 	.word	0x00000000
 8017594:	7ff80000 	.word	0x7ff80000

08017598 <nanf>:
 8017598:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80175a0 <nanf+0x8>
 801759c:	4770      	bx	lr
 801759e:	bf00      	nop
 80175a0:	7fc00000 	.word	0x7fc00000

080175a4 <quorem>:
 80175a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80175a8:	6903      	ldr	r3, [r0, #16]
 80175aa:	4607      	mov	r7, r0
 80175ac:	690c      	ldr	r4, [r1, #16]
 80175ae:	42a3      	cmp	r3, r4
 80175b0:	f2c0 8086 	blt.w	80176c0 <quorem+0x11c>
 80175b4:	3c01      	subs	r4, #1
 80175b6:	f100 0514 	add.w	r5, r0, #20
 80175ba:	f101 0814 	add.w	r8, r1, #20
 80175be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80175c2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80175c6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80175ca:	9301      	str	r3, [sp, #4]
 80175cc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80175d0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80175d4:	3301      	adds	r3, #1
 80175d6:	429a      	cmp	r2, r3
 80175d8:	fbb2 f6f3 	udiv	r6, r2, r3
 80175dc:	d335      	bcc.n	801764a <quorem+0xa6>
 80175de:	f04f 0e00 	mov.w	lr, #0
 80175e2:	4640      	mov	r0, r8
 80175e4:	46ac      	mov	ip, r5
 80175e6:	46f2      	mov	sl, lr
 80175e8:	f850 2b04 	ldr.w	r2, [r0], #4
 80175ec:	b293      	uxth	r3, r2
 80175ee:	4581      	cmp	r9, r0
 80175f0:	fb06 e303 	mla	r3, r6, r3, lr
 80175f4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80175f8:	ea4f 4213 	mov.w	r2, r3, lsr #16
 80175fc:	b29b      	uxth	r3, r3
 80175fe:	fb06 220e 	mla	r2, r6, lr, r2
 8017602:	ebaa 0303 	sub.w	r3, sl, r3
 8017606:	f8dc a000 	ldr.w	sl, [ip]
 801760a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801760e:	fa1f fa8a 	uxth.w	sl, sl
 8017612:	b292      	uxth	r2, r2
 8017614:	4453      	add	r3, sl
 8017616:	9300      	str	r3, [sp, #0]
 8017618:	f8dc 3000 	ldr.w	r3, [ip]
 801761c:	ebc2 4213 	rsb	r2, r2, r3, lsr #16
 8017620:	9b00      	ldr	r3, [sp, #0]
 8017622:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017626:	f8bd 3000 	ldrh.w	r3, [sp]
 801762a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801762e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8017632:	f84c 3b04 	str.w	r3, [ip], #4
 8017636:	d2d7      	bcs.n	80175e8 <quorem+0x44>
 8017638:	f855 300b 	ldr.w	r3, [r5, fp]
 801763c:	b92b      	cbnz	r3, 801764a <quorem+0xa6>
 801763e:	9b01      	ldr	r3, [sp, #4]
 8017640:	3b04      	subs	r3, #4
 8017642:	429d      	cmp	r5, r3
 8017644:	461a      	mov	r2, r3
 8017646:	d32f      	bcc.n	80176a8 <quorem+0x104>
 8017648:	613c      	str	r4, [r7, #16]
 801764a:	4638      	mov	r0, r7
 801764c:	f002 fb48 	bl	8019ce0 <__mcmp>
 8017650:	2800      	cmp	r0, #0
 8017652:	db25      	blt.n	80176a0 <quorem+0xfc>
 8017654:	3601      	adds	r6, #1
 8017656:	4629      	mov	r1, r5
 8017658:	2000      	movs	r0, #0
 801765a:	f858 2b04 	ldr.w	r2, [r8], #4
 801765e:	f8d1 c000 	ldr.w	ip, [r1]
 8017662:	b293      	uxth	r3, r2
 8017664:	45c1      	cmp	r9, r8
 8017666:	ea4f 4212 	mov.w	r2, r2, lsr #16
 801766a:	eba0 0303 	sub.w	r3, r0, r3
 801766e:	fa1f f08c 	uxth.w	r0, ip
 8017672:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8017676:	4403      	add	r3, r0
 8017678:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801767c:	b29b      	uxth	r3, r3
 801767e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8017682:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017686:	f841 3b04 	str.w	r3, [r1], #4
 801768a:	d2e6      	bcs.n	801765a <quorem+0xb6>
 801768c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017690:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8017694:	b922      	cbnz	r2, 80176a0 <quorem+0xfc>
 8017696:	3b04      	subs	r3, #4
 8017698:	429d      	cmp	r5, r3
 801769a:	461a      	mov	r2, r3
 801769c:	d30a      	bcc.n	80176b4 <quorem+0x110>
 801769e:	613c      	str	r4, [r7, #16]
 80176a0:	4630      	mov	r0, r6
 80176a2:	b003      	add	sp, #12
 80176a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80176a8:	6812      	ldr	r2, [r2, #0]
 80176aa:	3b04      	subs	r3, #4
 80176ac:	2a00      	cmp	r2, #0
 80176ae:	d1cb      	bne.n	8017648 <quorem+0xa4>
 80176b0:	3c01      	subs	r4, #1
 80176b2:	e7c6      	b.n	8017642 <quorem+0x9e>
 80176b4:	6812      	ldr	r2, [r2, #0]
 80176b6:	3b04      	subs	r3, #4
 80176b8:	2a00      	cmp	r2, #0
 80176ba:	d1f0      	bne.n	801769e <quorem+0xfa>
 80176bc:	3c01      	subs	r4, #1
 80176be:	e7eb      	b.n	8017698 <quorem+0xf4>
 80176c0:	2000      	movs	r0, #0
 80176c2:	e7ee      	b.n	80176a2 <quorem+0xfe>
 80176c4:	0000      	movs	r0, r0
	...

080176c8 <_dtoa_r>:
 80176c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80176cc:	69c5      	ldr	r5, [r0, #28]
 80176ce:	4604      	mov	r4, r0
 80176d0:	ed2d 8b04 	vpush	{d8-d9}
 80176d4:	b093      	sub	sp, #76	; 0x4c
 80176d6:	ec57 6b10 	vmov	r6, r7, d0
 80176da:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80176de:	9107      	str	r1, [sp, #28]
 80176e0:	920a      	str	r2, [sp, #40]	; 0x28
 80176e2:	930d      	str	r3, [sp, #52]	; 0x34
 80176e4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80176e8:	b975      	cbnz	r5, 8017708 <_dtoa_r+0x40>
 80176ea:	2010      	movs	r0, #16
 80176ec:	f7fe f80a 	bl	8015704 <malloc>
 80176f0:	4602      	mov	r2, r0
 80176f2:	61e0      	str	r0, [r4, #28]
 80176f4:	b920      	cbnz	r0, 8017700 <_dtoa_r+0x38>
 80176f6:	4bae      	ldr	r3, [pc, #696]	; (80179b0 <_dtoa_r+0x2e8>)
 80176f8:	21ef      	movs	r1, #239	; 0xef
 80176fa:	48ae      	ldr	r0, [pc, #696]	; (80179b4 <_dtoa_r+0x2ec>)
 80176fc:	f002 fe94 	bl	801a428 <__assert_func>
 8017700:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8017704:	6005      	str	r5, [r0, #0]
 8017706:	60c5      	str	r5, [r0, #12]
 8017708:	69e3      	ldr	r3, [r4, #28]
 801770a:	6819      	ldr	r1, [r3, #0]
 801770c:	b151      	cbz	r1, 8017724 <_dtoa_r+0x5c>
 801770e:	685a      	ldr	r2, [r3, #4]
 8017710:	2301      	movs	r3, #1
 8017712:	4620      	mov	r0, r4
 8017714:	4093      	lsls	r3, r2
 8017716:	604a      	str	r2, [r1, #4]
 8017718:	608b      	str	r3, [r1, #8]
 801771a:	f002 f859 	bl	80197d0 <_Bfree>
 801771e:	69e3      	ldr	r3, [r4, #28]
 8017720:	2200      	movs	r2, #0
 8017722:	601a      	str	r2, [r3, #0]
 8017724:	1e3b      	subs	r3, r7, #0
 8017726:	bfb7      	itett	lt
 8017728:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801772c:	2300      	movge	r3, #0
 801772e:	2201      	movlt	r2, #1
 8017730:	9303      	strlt	r3, [sp, #12]
 8017732:	bfac      	ite	ge
 8017734:	f8c8 3000 	strge.w	r3, [r8]
 8017738:	f8c8 2000 	strlt.w	r2, [r8]
 801773c:	4b9e      	ldr	r3, [pc, #632]	; (80179b8 <_dtoa_r+0x2f0>)
 801773e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8017742:	ea33 0308 	bics.w	r3, r3, r8
 8017746:	d11b      	bne.n	8017780 <_dtoa_r+0xb8>
 8017748:	f242 730f 	movw	r3, #9999	; 0x270f
 801774c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801774e:	6013      	str	r3, [r2, #0]
 8017750:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8017754:	4333      	orrs	r3, r6
 8017756:	f000 8592 	beq.w	801827e <_dtoa_r+0xbb6>
 801775a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801775c:	b963      	cbnz	r3, 8017778 <_dtoa_r+0xb0>
 801775e:	4b97      	ldr	r3, [pc, #604]	; (80179bc <_dtoa_r+0x2f4>)
 8017760:	e027      	b.n	80177b2 <_dtoa_r+0xea>
 8017762:	4b97      	ldr	r3, [pc, #604]	; (80179c0 <_dtoa_r+0x2f8>)
 8017764:	9300      	str	r3, [sp, #0]
 8017766:	3308      	adds	r3, #8
 8017768:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801776a:	6013      	str	r3, [r2, #0]
 801776c:	9800      	ldr	r0, [sp, #0]
 801776e:	b013      	add	sp, #76	; 0x4c
 8017770:	ecbd 8b04 	vpop	{d8-d9}
 8017774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017778:	4b90      	ldr	r3, [pc, #576]	; (80179bc <_dtoa_r+0x2f4>)
 801777a:	9300      	str	r3, [sp, #0]
 801777c:	3303      	adds	r3, #3
 801777e:	e7f3      	b.n	8017768 <_dtoa_r+0xa0>
 8017780:	ed9d 7b02 	vldr	d7, [sp, #8]
 8017784:	2200      	movs	r2, #0
 8017786:	2300      	movs	r3, #0
 8017788:	ec51 0b17 	vmov	r0, r1, d7
 801778c:	eeb0 8a47 	vmov.f32	s16, s14
 8017790:	eef0 8a67 	vmov.f32	s17, s15
 8017794:	f7e9 f9a6 	bl	8000ae4 <__aeabi_dcmpeq>
 8017798:	4681      	mov	r9, r0
 801779a:	b160      	cbz	r0, 80177b6 <_dtoa_r+0xee>
 801779c:	2301      	movs	r3, #1
 801779e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80177a0:	6013      	str	r3, [r2, #0]
 80177a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80177a4:	2b00      	cmp	r3, #0
 80177a6:	f000 8567 	beq.w	8018278 <_dtoa_r+0xbb0>
 80177aa:	4b86      	ldr	r3, [pc, #536]	; (80179c4 <_dtoa_r+0x2fc>)
 80177ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80177ae:	6013      	str	r3, [r2, #0]
 80177b0:	3b01      	subs	r3, #1
 80177b2:	9300      	str	r3, [sp, #0]
 80177b4:	e7da      	b.n	801776c <_dtoa_r+0xa4>
 80177b6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80177ba:	eeb0 0a48 	vmov.f32	s0, s16
 80177be:	eef0 0a68 	vmov.f32	s1, s17
 80177c2:	aa10      	add	r2, sp, #64	; 0x40
 80177c4:	a911      	add	r1, sp, #68	; 0x44
 80177c6:	4620      	mov	r0, r4
 80177c8:	f002 fbaa 	bl	8019f20 <__d2b>
 80177cc:	4682      	mov	sl, r0
 80177ce:	2d00      	cmp	r5, #0
 80177d0:	d07d      	beq.n	80178ce <_dtoa_r+0x206>
 80177d2:	ee18 3a90 	vmov	r3, s17
 80177d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80177da:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80177de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80177e2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80177e6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80177ea:	ec51 0b18 	vmov	r0, r1, d8
 80177ee:	4619      	mov	r1, r3
 80177f0:	2200      	movs	r2, #0
 80177f2:	4b75      	ldr	r3, [pc, #468]	; (80179c8 <_dtoa_r+0x300>)
 80177f4:	f7e8 fd56 	bl	80002a4 <__aeabi_dsub>
 80177f8:	a367      	add	r3, pc, #412	; (adr r3, 8017998 <_dtoa_r+0x2d0>)
 80177fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80177fe:	f7e8 ff09 	bl	8000614 <__aeabi_dmul>
 8017802:	a367      	add	r3, pc, #412	; (adr r3, 80179a0 <_dtoa_r+0x2d8>)
 8017804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017808:	f7e8 fd4e 	bl	80002a8 <__adddf3>
 801780c:	4606      	mov	r6, r0
 801780e:	460f      	mov	r7, r1
 8017810:	4628      	mov	r0, r5
 8017812:	f7e8 fe95 	bl	8000540 <__aeabi_i2d>
 8017816:	a364      	add	r3, pc, #400	; (adr r3, 80179a8 <_dtoa_r+0x2e0>)
 8017818:	e9d3 2300 	ldrd	r2, r3, [r3]
 801781c:	f7e8 fefa 	bl	8000614 <__aeabi_dmul>
 8017820:	4602      	mov	r2, r0
 8017822:	460b      	mov	r3, r1
 8017824:	4630      	mov	r0, r6
 8017826:	4639      	mov	r1, r7
 8017828:	f7e8 fd3e 	bl	80002a8 <__adddf3>
 801782c:	4606      	mov	r6, r0
 801782e:	460f      	mov	r7, r1
 8017830:	f7e9 f9a0 	bl	8000b74 <__aeabi_d2iz>
 8017834:	2200      	movs	r2, #0
 8017836:	4683      	mov	fp, r0
 8017838:	2300      	movs	r3, #0
 801783a:	4630      	mov	r0, r6
 801783c:	4639      	mov	r1, r7
 801783e:	f7e9 f95b 	bl	8000af8 <__aeabi_dcmplt>
 8017842:	b148      	cbz	r0, 8017858 <_dtoa_r+0x190>
 8017844:	4658      	mov	r0, fp
 8017846:	f7e8 fe7b 	bl	8000540 <__aeabi_i2d>
 801784a:	4632      	mov	r2, r6
 801784c:	463b      	mov	r3, r7
 801784e:	f7e9 f949 	bl	8000ae4 <__aeabi_dcmpeq>
 8017852:	b908      	cbnz	r0, 8017858 <_dtoa_r+0x190>
 8017854:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8017858:	f1bb 0f16 	cmp.w	fp, #22
 801785c:	d857      	bhi.n	801790e <_dtoa_r+0x246>
 801785e:	4b5b      	ldr	r3, [pc, #364]	; (80179cc <_dtoa_r+0x304>)
 8017860:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8017864:	ec51 0b18 	vmov	r0, r1, d8
 8017868:	e9d3 2300 	ldrd	r2, r3, [r3]
 801786c:	f7e9 f944 	bl	8000af8 <__aeabi_dcmplt>
 8017870:	2800      	cmp	r0, #0
 8017872:	d04e      	beq.n	8017912 <_dtoa_r+0x24a>
 8017874:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8017878:	2300      	movs	r3, #0
 801787a:	930c      	str	r3, [sp, #48]	; 0x30
 801787c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801787e:	1b5b      	subs	r3, r3, r5
 8017880:	1e5a      	subs	r2, r3, #1
 8017882:	bf4c      	ite	mi
 8017884:	f1c3 0301 	rsbmi	r3, r3, #1
 8017888:	2300      	movpl	r3, #0
 801788a:	9206      	str	r2, [sp, #24]
 801788c:	bf45      	ittet	mi
 801788e:	9305      	strmi	r3, [sp, #20]
 8017890:	2300      	movmi	r3, #0
 8017892:	9305      	strpl	r3, [sp, #20]
 8017894:	9306      	strmi	r3, [sp, #24]
 8017896:	f1bb 0f00 	cmp.w	fp, #0
 801789a:	db3c      	blt.n	8017916 <_dtoa_r+0x24e>
 801789c:	9b06      	ldr	r3, [sp, #24]
 801789e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80178a2:	445b      	add	r3, fp
 80178a4:	9306      	str	r3, [sp, #24]
 80178a6:	2300      	movs	r3, #0
 80178a8:	9308      	str	r3, [sp, #32]
 80178aa:	9b07      	ldr	r3, [sp, #28]
 80178ac:	2b09      	cmp	r3, #9
 80178ae:	d868      	bhi.n	8017982 <_dtoa_r+0x2ba>
 80178b0:	2b05      	cmp	r3, #5
 80178b2:	bfc5      	ittet	gt
 80178b4:	3b04      	subgt	r3, #4
 80178b6:	2500      	movgt	r5, #0
 80178b8:	2501      	movle	r5, #1
 80178ba:	9307      	strgt	r3, [sp, #28]
 80178bc:	9b07      	ldr	r3, [sp, #28]
 80178be:	3b02      	subs	r3, #2
 80178c0:	2b03      	cmp	r3, #3
 80178c2:	f200 8087 	bhi.w	80179d4 <_dtoa_r+0x30c>
 80178c6:	e8df f003 	tbb	[pc, r3]
 80178ca:	3d30      	.short	0x3d30
 80178cc:	5a3b      	.short	0x5a3b
 80178ce:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80178d2:	441d      	add	r5, r3
 80178d4:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80178d8:	2b20      	cmp	r3, #32
 80178da:	bfc9      	itett	gt
 80178dc:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80178e0:	f1c3 0320 	rsble	r3, r3, #32
 80178e4:	fa08 f803 	lslgt.w	r8, r8, r3
 80178e8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80178ec:	bfd8      	it	le
 80178ee:	fa06 f003 	lslle.w	r0, r6, r3
 80178f2:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 80178f6:	bfc4      	itt	gt
 80178f8:	fa26 f303 	lsrgt.w	r3, r6, r3
 80178fc:	ea48 0003 	orrgt.w	r0, r8, r3
 8017900:	f7e8 fe0e 	bl	8000520 <__aeabi_ui2d>
 8017904:	2201      	movs	r2, #1
 8017906:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 801790a:	920e      	str	r2, [sp, #56]	; 0x38
 801790c:	e76f      	b.n	80177ee <_dtoa_r+0x126>
 801790e:	2301      	movs	r3, #1
 8017910:	e7b3      	b.n	801787a <_dtoa_r+0x1b2>
 8017912:	900c      	str	r0, [sp, #48]	; 0x30
 8017914:	e7b2      	b.n	801787c <_dtoa_r+0x1b4>
 8017916:	9b05      	ldr	r3, [sp, #20]
 8017918:	eba3 030b 	sub.w	r3, r3, fp
 801791c:	9305      	str	r3, [sp, #20]
 801791e:	f1cb 0300 	rsb	r3, fp, #0
 8017922:	9308      	str	r3, [sp, #32]
 8017924:	2300      	movs	r3, #0
 8017926:	930b      	str	r3, [sp, #44]	; 0x2c
 8017928:	e7bf      	b.n	80178aa <_dtoa_r+0x1e2>
 801792a:	2300      	movs	r3, #0
 801792c:	9309      	str	r3, [sp, #36]	; 0x24
 801792e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017930:	2b00      	cmp	r3, #0
 8017932:	dc52      	bgt.n	80179da <_dtoa_r+0x312>
 8017934:	2301      	movs	r3, #1
 8017936:	461a      	mov	r2, r3
 8017938:	9301      	str	r3, [sp, #4]
 801793a:	9304      	str	r3, [sp, #16]
 801793c:	920a      	str	r2, [sp, #40]	; 0x28
 801793e:	e00b      	b.n	8017958 <_dtoa_r+0x290>
 8017940:	2301      	movs	r3, #1
 8017942:	e7f3      	b.n	801792c <_dtoa_r+0x264>
 8017944:	2300      	movs	r3, #0
 8017946:	9309      	str	r3, [sp, #36]	; 0x24
 8017948:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801794a:	445b      	add	r3, fp
 801794c:	9301      	str	r3, [sp, #4]
 801794e:	3301      	adds	r3, #1
 8017950:	2b01      	cmp	r3, #1
 8017952:	9304      	str	r3, [sp, #16]
 8017954:	bfb8      	it	lt
 8017956:	2301      	movlt	r3, #1
 8017958:	69e0      	ldr	r0, [r4, #28]
 801795a:	2100      	movs	r1, #0
 801795c:	2204      	movs	r2, #4
 801795e:	f102 0614 	add.w	r6, r2, #20
 8017962:	429e      	cmp	r6, r3
 8017964:	d93d      	bls.n	80179e2 <_dtoa_r+0x31a>
 8017966:	6041      	str	r1, [r0, #4]
 8017968:	4620      	mov	r0, r4
 801796a:	f001 fef1 	bl	8019750 <_Balloc>
 801796e:	9000      	str	r0, [sp, #0]
 8017970:	2800      	cmp	r0, #0
 8017972:	d139      	bne.n	80179e8 <_dtoa_r+0x320>
 8017974:	4b16      	ldr	r3, [pc, #88]	; (80179d0 <_dtoa_r+0x308>)
 8017976:	4602      	mov	r2, r0
 8017978:	f240 11af 	movw	r1, #431	; 0x1af
 801797c:	e6bd      	b.n	80176fa <_dtoa_r+0x32>
 801797e:	2301      	movs	r3, #1
 8017980:	e7e1      	b.n	8017946 <_dtoa_r+0x27e>
 8017982:	2501      	movs	r5, #1
 8017984:	2300      	movs	r3, #0
 8017986:	9509      	str	r5, [sp, #36]	; 0x24
 8017988:	9307      	str	r3, [sp, #28]
 801798a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801798e:	2200      	movs	r2, #0
 8017990:	9301      	str	r3, [sp, #4]
 8017992:	9304      	str	r3, [sp, #16]
 8017994:	2312      	movs	r3, #18
 8017996:	e7d1      	b.n	801793c <_dtoa_r+0x274>
 8017998:	636f4361 	.word	0x636f4361
 801799c:	3fd287a7 	.word	0x3fd287a7
 80179a0:	8b60c8b3 	.word	0x8b60c8b3
 80179a4:	3fc68a28 	.word	0x3fc68a28
 80179a8:	509f79fb 	.word	0x509f79fb
 80179ac:	3fd34413 	.word	0x3fd34413
 80179b0:	0818deb6 	.word	0x0818deb6
 80179b4:	0818decd 	.word	0x0818decd
 80179b8:	7ff00000 	.word	0x7ff00000
 80179bc:	0818deb2 	.word	0x0818deb2
 80179c0:	0818dea9 	.word	0x0818dea9
 80179c4:	0818dfbe 	.word	0x0818dfbe
 80179c8:	3ff80000 	.word	0x3ff80000
 80179cc:	0818e048 	.word	0x0818e048
 80179d0:	0818df25 	.word	0x0818df25
 80179d4:	2301      	movs	r3, #1
 80179d6:	9309      	str	r3, [sp, #36]	; 0x24
 80179d8:	e7d7      	b.n	801798a <_dtoa_r+0x2c2>
 80179da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80179dc:	9301      	str	r3, [sp, #4]
 80179de:	9304      	str	r3, [sp, #16]
 80179e0:	e7ba      	b.n	8017958 <_dtoa_r+0x290>
 80179e2:	3101      	adds	r1, #1
 80179e4:	0052      	lsls	r2, r2, #1
 80179e6:	e7ba      	b.n	801795e <_dtoa_r+0x296>
 80179e8:	69e3      	ldr	r3, [r4, #28]
 80179ea:	9a00      	ldr	r2, [sp, #0]
 80179ec:	601a      	str	r2, [r3, #0]
 80179ee:	9b04      	ldr	r3, [sp, #16]
 80179f0:	2b0e      	cmp	r3, #14
 80179f2:	f200 80a8 	bhi.w	8017b46 <_dtoa_r+0x47e>
 80179f6:	2d00      	cmp	r5, #0
 80179f8:	f000 80a5 	beq.w	8017b46 <_dtoa_r+0x47e>
 80179fc:	f1bb 0f00 	cmp.w	fp, #0
 8017a00:	dd38      	ble.n	8017a74 <_dtoa_r+0x3ac>
 8017a02:	f00b 020f 	and.w	r2, fp, #15
 8017a06:	4bbf      	ldr	r3, [pc, #764]	; (8017d04 <_dtoa_r+0x63c>)
 8017a08:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8017a0c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8017a10:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017a14:	e9d3 6700 	ldrd	r6, r7, [r3]
 8017a18:	d019      	beq.n	8017a4e <_dtoa_r+0x386>
 8017a1a:	4bbb      	ldr	r3, [pc, #748]	; (8017d08 <_dtoa_r+0x640>)
 8017a1c:	f008 080f 	and.w	r8, r8, #15
 8017a20:	2503      	movs	r5, #3
 8017a22:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8017a26:	ec51 0b18 	vmov	r0, r1, d8
 8017a2a:	f7e8 ff1d 	bl	8000868 <__aeabi_ddiv>
 8017a2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017a32:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8017d08 <_dtoa_r+0x640>
 8017a36:	f1b8 0f00 	cmp.w	r8, #0
 8017a3a:	d10a      	bne.n	8017a52 <_dtoa_r+0x38a>
 8017a3c:	4632      	mov	r2, r6
 8017a3e:	463b      	mov	r3, r7
 8017a40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017a44:	f7e8 ff10 	bl	8000868 <__aeabi_ddiv>
 8017a48:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017a4c:	e02b      	b.n	8017aa6 <_dtoa_r+0x3de>
 8017a4e:	2502      	movs	r5, #2
 8017a50:	e7ef      	b.n	8017a32 <_dtoa_r+0x36a>
 8017a52:	f018 0f01 	tst.w	r8, #1
 8017a56:	d008      	beq.n	8017a6a <_dtoa_r+0x3a2>
 8017a58:	4630      	mov	r0, r6
 8017a5a:	4639      	mov	r1, r7
 8017a5c:	3501      	adds	r5, #1
 8017a5e:	e9d9 2300 	ldrd	r2, r3, [r9]
 8017a62:	f7e8 fdd7 	bl	8000614 <__aeabi_dmul>
 8017a66:	4606      	mov	r6, r0
 8017a68:	460f      	mov	r7, r1
 8017a6a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8017a6e:	f109 0908 	add.w	r9, r9, #8
 8017a72:	e7e0      	b.n	8017a36 <_dtoa_r+0x36e>
 8017a74:	f000 809f 	beq.w	8017bb6 <_dtoa_r+0x4ee>
 8017a78:	f1cb 0600 	rsb	r6, fp, #0
 8017a7c:	4ba1      	ldr	r3, [pc, #644]	; (8017d04 <_dtoa_r+0x63c>)
 8017a7e:	4fa2      	ldr	r7, [pc, #648]	; (8017d08 <_dtoa_r+0x640>)
 8017a80:	2502      	movs	r5, #2
 8017a82:	f006 020f 	and.w	r2, r6, #15
 8017a86:	1136      	asrs	r6, r6, #4
 8017a88:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017a8c:	ec51 0b18 	vmov	r0, r1, d8
 8017a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017a94:	f7e8 fdbe 	bl	8000614 <__aeabi_dmul>
 8017a98:	2300      	movs	r3, #0
 8017a9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017a9e:	2e00      	cmp	r6, #0
 8017aa0:	d17e      	bne.n	8017ba0 <_dtoa_r+0x4d8>
 8017aa2:	2b00      	cmp	r3, #0
 8017aa4:	d1d0      	bne.n	8017a48 <_dtoa_r+0x380>
 8017aa6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017aa8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8017aac:	2b00      	cmp	r3, #0
 8017aae:	f000 8084 	beq.w	8017bba <_dtoa_r+0x4f2>
 8017ab2:	2200      	movs	r2, #0
 8017ab4:	4b95      	ldr	r3, [pc, #596]	; (8017d0c <_dtoa_r+0x644>)
 8017ab6:	4640      	mov	r0, r8
 8017ab8:	4649      	mov	r1, r9
 8017aba:	f7e9 f81d 	bl	8000af8 <__aeabi_dcmplt>
 8017abe:	2800      	cmp	r0, #0
 8017ac0:	d07b      	beq.n	8017bba <_dtoa_r+0x4f2>
 8017ac2:	9b04      	ldr	r3, [sp, #16]
 8017ac4:	2b00      	cmp	r3, #0
 8017ac6:	d078      	beq.n	8017bba <_dtoa_r+0x4f2>
 8017ac8:	9b01      	ldr	r3, [sp, #4]
 8017aca:	2b00      	cmp	r3, #0
 8017acc:	dd39      	ble.n	8017b42 <_dtoa_r+0x47a>
 8017ace:	2200      	movs	r2, #0
 8017ad0:	4b8f      	ldr	r3, [pc, #572]	; (8017d10 <_dtoa_r+0x648>)
 8017ad2:	4640      	mov	r0, r8
 8017ad4:	4649      	mov	r1, r9
 8017ad6:	f7e8 fd9d 	bl	8000614 <__aeabi_dmul>
 8017ada:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8017ade:	3501      	adds	r5, #1
 8017ae0:	9e01      	ldr	r6, [sp, #4]
 8017ae2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017ae6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8017aea:	4628      	mov	r0, r5
 8017aec:	f7e8 fd28 	bl	8000540 <__aeabi_i2d>
 8017af0:	4642      	mov	r2, r8
 8017af2:	464b      	mov	r3, r9
 8017af4:	f7e8 fd8e 	bl	8000614 <__aeabi_dmul>
 8017af8:	4b86      	ldr	r3, [pc, #536]	; (8017d14 <_dtoa_r+0x64c>)
 8017afa:	2200      	movs	r2, #0
 8017afc:	f7e8 fbd4 	bl	80002a8 <__adddf3>
 8017b00:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8017b04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017b08:	9303      	str	r3, [sp, #12]
 8017b0a:	2e00      	cmp	r6, #0
 8017b0c:	d158      	bne.n	8017bc0 <_dtoa_r+0x4f8>
 8017b0e:	2200      	movs	r2, #0
 8017b10:	4b81      	ldr	r3, [pc, #516]	; (8017d18 <_dtoa_r+0x650>)
 8017b12:	4640      	mov	r0, r8
 8017b14:	4649      	mov	r1, r9
 8017b16:	f7e8 fbc5 	bl	80002a4 <__aeabi_dsub>
 8017b1a:	4680      	mov	r8, r0
 8017b1c:	4689      	mov	r9, r1
 8017b1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017b22:	f7e9 f807 	bl	8000b34 <__aeabi_dcmpgt>
 8017b26:	2800      	cmp	r0, #0
 8017b28:	f040 8296 	bne.w	8018058 <_dtoa_r+0x990>
 8017b2c:	4640      	mov	r0, r8
 8017b2e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8017b32:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017b36:	4649      	mov	r1, r9
 8017b38:	f7e8 ffde 	bl	8000af8 <__aeabi_dcmplt>
 8017b3c:	2800      	cmp	r0, #0
 8017b3e:	f040 8289 	bne.w	8018054 <_dtoa_r+0x98c>
 8017b42:	ed8d 8b02 	vstr	d8, [sp, #8]
 8017b46:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017b48:	2b00      	cmp	r3, #0
 8017b4a:	f2c0 814e 	blt.w	8017dea <_dtoa_r+0x722>
 8017b4e:	f1bb 0f0e 	cmp.w	fp, #14
 8017b52:	f300 814a 	bgt.w	8017dea <_dtoa_r+0x722>
 8017b56:	4b6b      	ldr	r3, [pc, #428]	; (8017d04 <_dtoa_r+0x63c>)
 8017b58:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8017b5c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8017b60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017b62:	2b00      	cmp	r3, #0
 8017b64:	f280 80dc 	bge.w	8017d20 <_dtoa_r+0x658>
 8017b68:	9b04      	ldr	r3, [sp, #16]
 8017b6a:	2b00      	cmp	r3, #0
 8017b6c:	f300 80d8 	bgt.w	8017d20 <_dtoa_r+0x658>
 8017b70:	f040 826f 	bne.w	8018052 <_dtoa_r+0x98a>
 8017b74:	2200      	movs	r2, #0
 8017b76:	4b68      	ldr	r3, [pc, #416]	; (8017d18 <_dtoa_r+0x650>)
 8017b78:	4640      	mov	r0, r8
 8017b7a:	4649      	mov	r1, r9
 8017b7c:	f7e8 fd4a 	bl	8000614 <__aeabi_dmul>
 8017b80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017b84:	f7e8 ffcc 	bl	8000b20 <__aeabi_dcmpge>
 8017b88:	9e04      	ldr	r6, [sp, #16]
 8017b8a:	4637      	mov	r7, r6
 8017b8c:	2800      	cmp	r0, #0
 8017b8e:	f040 8245 	bne.w	801801c <_dtoa_r+0x954>
 8017b92:	9d00      	ldr	r5, [sp, #0]
 8017b94:	2331      	movs	r3, #49	; 0x31
 8017b96:	f10b 0b01 	add.w	fp, fp, #1
 8017b9a:	f805 3b01 	strb.w	r3, [r5], #1
 8017b9e:	e241      	b.n	8018024 <_dtoa_r+0x95c>
 8017ba0:	07f2      	lsls	r2, r6, #31
 8017ba2:	d505      	bpl.n	8017bb0 <_dtoa_r+0x4e8>
 8017ba4:	3501      	adds	r5, #1
 8017ba6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017baa:	f7e8 fd33 	bl	8000614 <__aeabi_dmul>
 8017bae:	2301      	movs	r3, #1
 8017bb0:	1076      	asrs	r6, r6, #1
 8017bb2:	3708      	adds	r7, #8
 8017bb4:	e773      	b.n	8017a9e <_dtoa_r+0x3d6>
 8017bb6:	2502      	movs	r5, #2
 8017bb8:	e775      	b.n	8017aa6 <_dtoa_r+0x3de>
 8017bba:	465f      	mov	r7, fp
 8017bbc:	9e04      	ldr	r6, [sp, #16]
 8017bbe:	e792      	b.n	8017ae6 <_dtoa_r+0x41e>
 8017bc0:	9900      	ldr	r1, [sp, #0]
 8017bc2:	4b50      	ldr	r3, [pc, #320]	; (8017d04 <_dtoa_r+0x63c>)
 8017bc4:	4431      	add	r1, r6
 8017bc6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8017bca:	ed9d 7b02 	vldr	d7, [sp, #8]
 8017bce:	9102      	str	r1, [sp, #8]
 8017bd0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017bd2:	eeb0 9a47 	vmov.f32	s18, s14
 8017bd6:	eef0 9a67 	vmov.f32	s19, s15
 8017bda:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8017bde:	2900      	cmp	r1, #0
 8017be0:	d044      	beq.n	8017c6c <_dtoa_r+0x5a4>
 8017be2:	2000      	movs	r0, #0
 8017be4:	494d      	ldr	r1, [pc, #308]	; (8017d1c <_dtoa_r+0x654>)
 8017be6:	f7e8 fe3f 	bl	8000868 <__aeabi_ddiv>
 8017bea:	ec53 2b19 	vmov	r2, r3, d9
 8017bee:	f7e8 fb59 	bl	80002a4 <__aeabi_dsub>
 8017bf2:	9d00      	ldr	r5, [sp, #0]
 8017bf4:	ec41 0b19 	vmov	d9, r0, r1
 8017bf8:	4649      	mov	r1, r9
 8017bfa:	4640      	mov	r0, r8
 8017bfc:	f7e8 ffba 	bl	8000b74 <__aeabi_d2iz>
 8017c00:	4606      	mov	r6, r0
 8017c02:	f7e8 fc9d 	bl	8000540 <__aeabi_i2d>
 8017c06:	4602      	mov	r2, r0
 8017c08:	3630      	adds	r6, #48	; 0x30
 8017c0a:	460b      	mov	r3, r1
 8017c0c:	4640      	mov	r0, r8
 8017c0e:	4649      	mov	r1, r9
 8017c10:	f7e8 fb48 	bl	80002a4 <__aeabi_dsub>
 8017c14:	f805 6b01 	strb.w	r6, [r5], #1
 8017c18:	4680      	mov	r8, r0
 8017c1a:	4689      	mov	r9, r1
 8017c1c:	ec53 2b19 	vmov	r2, r3, d9
 8017c20:	f7e8 ff6a 	bl	8000af8 <__aeabi_dcmplt>
 8017c24:	2800      	cmp	r0, #0
 8017c26:	d164      	bne.n	8017cf2 <_dtoa_r+0x62a>
 8017c28:	4642      	mov	r2, r8
 8017c2a:	464b      	mov	r3, r9
 8017c2c:	2000      	movs	r0, #0
 8017c2e:	4937      	ldr	r1, [pc, #220]	; (8017d0c <_dtoa_r+0x644>)
 8017c30:	f7e8 fb38 	bl	80002a4 <__aeabi_dsub>
 8017c34:	ec53 2b19 	vmov	r2, r3, d9
 8017c38:	f7e8 ff5e 	bl	8000af8 <__aeabi_dcmplt>
 8017c3c:	2800      	cmp	r0, #0
 8017c3e:	f040 80b6 	bne.w	8017dae <_dtoa_r+0x6e6>
 8017c42:	9b02      	ldr	r3, [sp, #8]
 8017c44:	429d      	cmp	r5, r3
 8017c46:	f43f af7c 	beq.w	8017b42 <_dtoa_r+0x47a>
 8017c4a:	2200      	movs	r2, #0
 8017c4c:	4b30      	ldr	r3, [pc, #192]	; (8017d10 <_dtoa_r+0x648>)
 8017c4e:	ec51 0b19 	vmov	r0, r1, d9
 8017c52:	f7e8 fcdf 	bl	8000614 <__aeabi_dmul>
 8017c56:	2200      	movs	r2, #0
 8017c58:	4b2d      	ldr	r3, [pc, #180]	; (8017d10 <_dtoa_r+0x648>)
 8017c5a:	ec41 0b19 	vmov	d9, r0, r1
 8017c5e:	4640      	mov	r0, r8
 8017c60:	4649      	mov	r1, r9
 8017c62:	f7e8 fcd7 	bl	8000614 <__aeabi_dmul>
 8017c66:	4680      	mov	r8, r0
 8017c68:	4689      	mov	r9, r1
 8017c6a:	e7c5      	b.n	8017bf8 <_dtoa_r+0x530>
 8017c6c:	ec51 0b17 	vmov	r0, r1, d7
 8017c70:	f7e8 fcd0 	bl	8000614 <__aeabi_dmul>
 8017c74:	9b02      	ldr	r3, [sp, #8]
 8017c76:	9d00      	ldr	r5, [sp, #0]
 8017c78:	930f      	str	r3, [sp, #60]	; 0x3c
 8017c7a:	ec41 0b19 	vmov	d9, r0, r1
 8017c7e:	4649      	mov	r1, r9
 8017c80:	4640      	mov	r0, r8
 8017c82:	f7e8 ff77 	bl	8000b74 <__aeabi_d2iz>
 8017c86:	4606      	mov	r6, r0
 8017c88:	f7e8 fc5a 	bl	8000540 <__aeabi_i2d>
 8017c8c:	4602      	mov	r2, r0
 8017c8e:	460b      	mov	r3, r1
 8017c90:	4640      	mov	r0, r8
 8017c92:	4649      	mov	r1, r9
 8017c94:	3630      	adds	r6, #48	; 0x30
 8017c96:	f7e8 fb05 	bl	80002a4 <__aeabi_dsub>
 8017c9a:	9b02      	ldr	r3, [sp, #8]
 8017c9c:	f805 6b01 	strb.w	r6, [r5], #1
 8017ca0:	4680      	mov	r8, r0
 8017ca2:	429d      	cmp	r5, r3
 8017ca4:	4689      	mov	r9, r1
 8017ca6:	f04f 0200 	mov.w	r2, #0
 8017caa:	d124      	bne.n	8017cf6 <_dtoa_r+0x62e>
 8017cac:	4b1b      	ldr	r3, [pc, #108]	; (8017d1c <_dtoa_r+0x654>)
 8017cae:	ec51 0b19 	vmov	r0, r1, d9
 8017cb2:	f7e8 faf9 	bl	80002a8 <__adddf3>
 8017cb6:	4602      	mov	r2, r0
 8017cb8:	460b      	mov	r3, r1
 8017cba:	4640      	mov	r0, r8
 8017cbc:	4649      	mov	r1, r9
 8017cbe:	f7e8 ff39 	bl	8000b34 <__aeabi_dcmpgt>
 8017cc2:	2800      	cmp	r0, #0
 8017cc4:	d173      	bne.n	8017dae <_dtoa_r+0x6e6>
 8017cc6:	2000      	movs	r0, #0
 8017cc8:	4914      	ldr	r1, [pc, #80]	; (8017d1c <_dtoa_r+0x654>)
 8017cca:	ec53 2b19 	vmov	r2, r3, d9
 8017cce:	f7e8 fae9 	bl	80002a4 <__aeabi_dsub>
 8017cd2:	4602      	mov	r2, r0
 8017cd4:	460b      	mov	r3, r1
 8017cd6:	4640      	mov	r0, r8
 8017cd8:	4649      	mov	r1, r9
 8017cda:	f7e8 ff0d 	bl	8000af8 <__aeabi_dcmplt>
 8017cde:	2800      	cmp	r0, #0
 8017ce0:	f43f af2f 	beq.w	8017b42 <_dtoa_r+0x47a>
 8017ce4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8017ce6:	1e6b      	subs	r3, r5, #1
 8017ce8:	930f      	str	r3, [sp, #60]	; 0x3c
 8017cea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017cee:	2b30      	cmp	r3, #48	; 0x30
 8017cf0:	d0f8      	beq.n	8017ce4 <_dtoa_r+0x61c>
 8017cf2:	46bb      	mov	fp, r7
 8017cf4:	e04a      	b.n	8017d8c <_dtoa_r+0x6c4>
 8017cf6:	4b06      	ldr	r3, [pc, #24]	; (8017d10 <_dtoa_r+0x648>)
 8017cf8:	f7e8 fc8c 	bl	8000614 <__aeabi_dmul>
 8017cfc:	4680      	mov	r8, r0
 8017cfe:	4689      	mov	r9, r1
 8017d00:	e7bd      	b.n	8017c7e <_dtoa_r+0x5b6>
 8017d02:	bf00      	nop
 8017d04:	0818e048 	.word	0x0818e048
 8017d08:	0818e020 	.word	0x0818e020
 8017d0c:	3ff00000 	.word	0x3ff00000
 8017d10:	40240000 	.word	0x40240000
 8017d14:	401c0000 	.word	0x401c0000
 8017d18:	40140000 	.word	0x40140000
 8017d1c:	3fe00000 	.word	0x3fe00000
 8017d20:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8017d24:	9d00      	ldr	r5, [sp, #0]
 8017d26:	4642      	mov	r2, r8
 8017d28:	464b      	mov	r3, r9
 8017d2a:	4630      	mov	r0, r6
 8017d2c:	4639      	mov	r1, r7
 8017d2e:	f7e8 fd9b 	bl	8000868 <__aeabi_ddiv>
 8017d32:	f7e8 ff1f 	bl	8000b74 <__aeabi_d2iz>
 8017d36:	9001      	str	r0, [sp, #4]
 8017d38:	f7e8 fc02 	bl	8000540 <__aeabi_i2d>
 8017d3c:	4642      	mov	r2, r8
 8017d3e:	464b      	mov	r3, r9
 8017d40:	f7e8 fc68 	bl	8000614 <__aeabi_dmul>
 8017d44:	4602      	mov	r2, r0
 8017d46:	460b      	mov	r3, r1
 8017d48:	4630      	mov	r0, r6
 8017d4a:	4639      	mov	r1, r7
 8017d4c:	f7e8 faaa 	bl	80002a4 <__aeabi_dsub>
 8017d50:	9e01      	ldr	r6, [sp, #4]
 8017d52:	9f04      	ldr	r7, [sp, #16]
 8017d54:	4602      	mov	r2, r0
 8017d56:	3630      	adds	r6, #48	; 0x30
 8017d58:	460b      	mov	r3, r1
 8017d5a:	f805 6b01 	strb.w	r6, [r5], #1
 8017d5e:	9e00      	ldr	r6, [sp, #0]
 8017d60:	1bae      	subs	r6, r5, r6
 8017d62:	42b7      	cmp	r7, r6
 8017d64:	d134      	bne.n	8017dd0 <_dtoa_r+0x708>
 8017d66:	f7e8 fa9f 	bl	80002a8 <__adddf3>
 8017d6a:	4642      	mov	r2, r8
 8017d6c:	464b      	mov	r3, r9
 8017d6e:	4606      	mov	r6, r0
 8017d70:	460f      	mov	r7, r1
 8017d72:	f7e8 fedf 	bl	8000b34 <__aeabi_dcmpgt>
 8017d76:	b9c8      	cbnz	r0, 8017dac <_dtoa_r+0x6e4>
 8017d78:	4642      	mov	r2, r8
 8017d7a:	464b      	mov	r3, r9
 8017d7c:	4630      	mov	r0, r6
 8017d7e:	4639      	mov	r1, r7
 8017d80:	f7e8 feb0 	bl	8000ae4 <__aeabi_dcmpeq>
 8017d84:	b110      	cbz	r0, 8017d8c <_dtoa_r+0x6c4>
 8017d86:	9b01      	ldr	r3, [sp, #4]
 8017d88:	07db      	lsls	r3, r3, #31
 8017d8a:	d40f      	bmi.n	8017dac <_dtoa_r+0x6e4>
 8017d8c:	4651      	mov	r1, sl
 8017d8e:	4620      	mov	r0, r4
 8017d90:	f001 fd1e 	bl	80197d0 <_Bfree>
 8017d94:	2300      	movs	r3, #0
 8017d96:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017d98:	702b      	strb	r3, [r5, #0]
 8017d9a:	f10b 0301 	add.w	r3, fp, #1
 8017d9e:	6013      	str	r3, [r2, #0]
 8017da0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017da2:	2b00      	cmp	r3, #0
 8017da4:	f43f ace2 	beq.w	801776c <_dtoa_r+0xa4>
 8017da8:	601d      	str	r5, [r3, #0]
 8017daa:	e4df      	b.n	801776c <_dtoa_r+0xa4>
 8017dac:	465f      	mov	r7, fp
 8017dae:	462b      	mov	r3, r5
 8017db0:	461d      	mov	r5, r3
 8017db2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8017db6:	2a39      	cmp	r2, #57	; 0x39
 8017db8:	d106      	bne.n	8017dc8 <_dtoa_r+0x700>
 8017dba:	9a00      	ldr	r2, [sp, #0]
 8017dbc:	429a      	cmp	r2, r3
 8017dbe:	d1f7      	bne.n	8017db0 <_dtoa_r+0x6e8>
 8017dc0:	2230      	movs	r2, #48	; 0x30
 8017dc2:	9900      	ldr	r1, [sp, #0]
 8017dc4:	3701      	adds	r7, #1
 8017dc6:	700a      	strb	r2, [r1, #0]
 8017dc8:	781a      	ldrb	r2, [r3, #0]
 8017dca:	3201      	adds	r2, #1
 8017dcc:	701a      	strb	r2, [r3, #0]
 8017dce:	e790      	b.n	8017cf2 <_dtoa_r+0x62a>
 8017dd0:	2200      	movs	r2, #0
 8017dd2:	4ba3      	ldr	r3, [pc, #652]	; (8018060 <_dtoa_r+0x998>)
 8017dd4:	f7e8 fc1e 	bl	8000614 <__aeabi_dmul>
 8017dd8:	2200      	movs	r2, #0
 8017dda:	2300      	movs	r3, #0
 8017ddc:	4606      	mov	r6, r0
 8017dde:	460f      	mov	r7, r1
 8017de0:	f7e8 fe80 	bl	8000ae4 <__aeabi_dcmpeq>
 8017de4:	2800      	cmp	r0, #0
 8017de6:	d09e      	beq.n	8017d26 <_dtoa_r+0x65e>
 8017de8:	e7d0      	b.n	8017d8c <_dtoa_r+0x6c4>
 8017dea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017dec:	2a00      	cmp	r2, #0
 8017dee:	f000 80ca 	beq.w	8017f86 <_dtoa_r+0x8be>
 8017df2:	9a07      	ldr	r2, [sp, #28]
 8017df4:	2a01      	cmp	r2, #1
 8017df6:	f300 80ad 	bgt.w	8017f54 <_dtoa_r+0x88c>
 8017dfa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017dfc:	2a00      	cmp	r2, #0
 8017dfe:	f000 80a5 	beq.w	8017f4c <_dtoa_r+0x884>
 8017e02:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8017e06:	9e08      	ldr	r6, [sp, #32]
 8017e08:	9d05      	ldr	r5, [sp, #20]
 8017e0a:	9a05      	ldr	r2, [sp, #20]
 8017e0c:	2101      	movs	r1, #1
 8017e0e:	4620      	mov	r0, r4
 8017e10:	441a      	add	r2, r3
 8017e12:	9205      	str	r2, [sp, #20]
 8017e14:	9a06      	ldr	r2, [sp, #24]
 8017e16:	441a      	add	r2, r3
 8017e18:	9206      	str	r2, [sp, #24]
 8017e1a:	f001 fddb 	bl	80199d4 <__i2b>
 8017e1e:	4607      	mov	r7, r0
 8017e20:	b165      	cbz	r5, 8017e3c <_dtoa_r+0x774>
 8017e22:	9b06      	ldr	r3, [sp, #24]
 8017e24:	2b00      	cmp	r3, #0
 8017e26:	dd09      	ble.n	8017e3c <_dtoa_r+0x774>
 8017e28:	42ab      	cmp	r3, r5
 8017e2a:	9a05      	ldr	r2, [sp, #20]
 8017e2c:	bfa8      	it	ge
 8017e2e:	462b      	movge	r3, r5
 8017e30:	1ad2      	subs	r2, r2, r3
 8017e32:	1aed      	subs	r5, r5, r3
 8017e34:	9205      	str	r2, [sp, #20]
 8017e36:	9a06      	ldr	r2, [sp, #24]
 8017e38:	1ad3      	subs	r3, r2, r3
 8017e3a:	9306      	str	r3, [sp, #24]
 8017e3c:	9b08      	ldr	r3, [sp, #32]
 8017e3e:	b1f3      	cbz	r3, 8017e7e <_dtoa_r+0x7b6>
 8017e40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017e42:	2b00      	cmp	r3, #0
 8017e44:	f000 80a3 	beq.w	8017f8e <_dtoa_r+0x8c6>
 8017e48:	2e00      	cmp	r6, #0
 8017e4a:	dd10      	ble.n	8017e6e <_dtoa_r+0x7a6>
 8017e4c:	4639      	mov	r1, r7
 8017e4e:	4632      	mov	r2, r6
 8017e50:	4620      	mov	r0, r4
 8017e52:	f001 fe7f 	bl	8019b54 <__pow5mult>
 8017e56:	4652      	mov	r2, sl
 8017e58:	4601      	mov	r1, r0
 8017e5a:	4607      	mov	r7, r0
 8017e5c:	4620      	mov	r0, r4
 8017e5e:	f001 fdcf 	bl	8019a00 <__multiply>
 8017e62:	4680      	mov	r8, r0
 8017e64:	4651      	mov	r1, sl
 8017e66:	4620      	mov	r0, r4
 8017e68:	46c2      	mov	sl, r8
 8017e6a:	f001 fcb1 	bl	80197d0 <_Bfree>
 8017e6e:	9b08      	ldr	r3, [sp, #32]
 8017e70:	1b9a      	subs	r2, r3, r6
 8017e72:	d004      	beq.n	8017e7e <_dtoa_r+0x7b6>
 8017e74:	4651      	mov	r1, sl
 8017e76:	4620      	mov	r0, r4
 8017e78:	f001 fe6c 	bl	8019b54 <__pow5mult>
 8017e7c:	4682      	mov	sl, r0
 8017e7e:	2101      	movs	r1, #1
 8017e80:	4620      	mov	r0, r4
 8017e82:	f001 fda7 	bl	80199d4 <__i2b>
 8017e86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017e88:	4606      	mov	r6, r0
 8017e8a:	2b00      	cmp	r3, #0
 8017e8c:	f340 8081 	ble.w	8017f92 <_dtoa_r+0x8ca>
 8017e90:	461a      	mov	r2, r3
 8017e92:	4601      	mov	r1, r0
 8017e94:	4620      	mov	r0, r4
 8017e96:	f001 fe5d 	bl	8019b54 <__pow5mult>
 8017e9a:	9b07      	ldr	r3, [sp, #28]
 8017e9c:	4606      	mov	r6, r0
 8017e9e:	2b01      	cmp	r3, #1
 8017ea0:	dd7a      	ble.n	8017f98 <_dtoa_r+0x8d0>
 8017ea2:	f04f 0800 	mov.w	r8, #0
 8017ea6:	6933      	ldr	r3, [r6, #16]
 8017ea8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8017eac:	6918      	ldr	r0, [r3, #16]
 8017eae:	f001 fd43 	bl	8019938 <__hi0bits>
 8017eb2:	f1c0 0020 	rsb	r0, r0, #32
 8017eb6:	9b06      	ldr	r3, [sp, #24]
 8017eb8:	4418      	add	r0, r3
 8017eba:	f010 001f 	ands.w	r0, r0, #31
 8017ebe:	f000 8094 	beq.w	8017fea <_dtoa_r+0x922>
 8017ec2:	f1c0 0320 	rsb	r3, r0, #32
 8017ec6:	2b04      	cmp	r3, #4
 8017ec8:	f340 8085 	ble.w	8017fd6 <_dtoa_r+0x90e>
 8017ecc:	f1c0 001c 	rsb	r0, r0, #28
 8017ed0:	9b05      	ldr	r3, [sp, #20]
 8017ed2:	4403      	add	r3, r0
 8017ed4:	4405      	add	r5, r0
 8017ed6:	9305      	str	r3, [sp, #20]
 8017ed8:	9b06      	ldr	r3, [sp, #24]
 8017eda:	4403      	add	r3, r0
 8017edc:	9306      	str	r3, [sp, #24]
 8017ede:	9b05      	ldr	r3, [sp, #20]
 8017ee0:	2b00      	cmp	r3, #0
 8017ee2:	dd05      	ble.n	8017ef0 <_dtoa_r+0x828>
 8017ee4:	4651      	mov	r1, sl
 8017ee6:	461a      	mov	r2, r3
 8017ee8:	4620      	mov	r0, r4
 8017eea:	f001 fe8d 	bl	8019c08 <__lshift>
 8017eee:	4682      	mov	sl, r0
 8017ef0:	9b06      	ldr	r3, [sp, #24]
 8017ef2:	2b00      	cmp	r3, #0
 8017ef4:	dd05      	ble.n	8017f02 <_dtoa_r+0x83a>
 8017ef6:	4631      	mov	r1, r6
 8017ef8:	461a      	mov	r2, r3
 8017efa:	4620      	mov	r0, r4
 8017efc:	f001 fe84 	bl	8019c08 <__lshift>
 8017f00:	4606      	mov	r6, r0
 8017f02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017f04:	2b00      	cmp	r3, #0
 8017f06:	d072      	beq.n	8017fee <_dtoa_r+0x926>
 8017f08:	4631      	mov	r1, r6
 8017f0a:	4650      	mov	r0, sl
 8017f0c:	f001 fee8 	bl	8019ce0 <__mcmp>
 8017f10:	2800      	cmp	r0, #0
 8017f12:	da6c      	bge.n	8017fee <_dtoa_r+0x926>
 8017f14:	2300      	movs	r3, #0
 8017f16:	4651      	mov	r1, sl
 8017f18:	220a      	movs	r2, #10
 8017f1a:	4620      	mov	r0, r4
 8017f1c:	f001 fc7a 	bl	8019814 <__multadd>
 8017f20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017f22:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8017f26:	4682      	mov	sl, r0
 8017f28:	2b00      	cmp	r3, #0
 8017f2a:	f000 81af 	beq.w	801828c <_dtoa_r+0xbc4>
 8017f2e:	2300      	movs	r3, #0
 8017f30:	4639      	mov	r1, r7
 8017f32:	220a      	movs	r2, #10
 8017f34:	4620      	mov	r0, r4
 8017f36:	f001 fc6d 	bl	8019814 <__multadd>
 8017f3a:	9b01      	ldr	r3, [sp, #4]
 8017f3c:	4607      	mov	r7, r0
 8017f3e:	2b00      	cmp	r3, #0
 8017f40:	f300 8096 	bgt.w	8018070 <_dtoa_r+0x9a8>
 8017f44:	9b07      	ldr	r3, [sp, #28]
 8017f46:	2b02      	cmp	r3, #2
 8017f48:	dc59      	bgt.n	8017ffe <_dtoa_r+0x936>
 8017f4a:	e091      	b.n	8018070 <_dtoa_r+0x9a8>
 8017f4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017f4e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8017f52:	e758      	b.n	8017e06 <_dtoa_r+0x73e>
 8017f54:	9b04      	ldr	r3, [sp, #16]
 8017f56:	1e5e      	subs	r6, r3, #1
 8017f58:	9b08      	ldr	r3, [sp, #32]
 8017f5a:	42b3      	cmp	r3, r6
 8017f5c:	bfb7      	itett	lt
 8017f5e:	9b08      	ldrlt	r3, [sp, #32]
 8017f60:	1b9e      	subge	r6, r3, r6
 8017f62:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8017f64:	1af3      	sublt	r3, r6, r3
 8017f66:	bfbe      	ittt	lt
 8017f68:	9608      	strlt	r6, [sp, #32]
 8017f6a:	2600      	movlt	r6, #0
 8017f6c:	18d2      	addlt	r2, r2, r3
 8017f6e:	9b04      	ldr	r3, [sp, #16]
 8017f70:	bfb8      	it	lt
 8017f72:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8017f74:	2b00      	cmp	r3, #0
 8017f76:	bfb7      	itett	lt
 8017f78:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8017f7c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8017f80:	1a9d      	sublt	r5, r3, r2
 8017f82:	2300      	movlt	r3, #0
 8017f84:	e741      	b.n	8017e0a <_dtoa_r+0x742>
 8017f86:	9e08      	ldr	r6, [sp, #32]
 8017f88:	9d05      	ldr	r5, [sp, #20]
 8017f8a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8017f8c:	e748      	b.n	8017e20 <_dtoa_r+0x758>
 8017f8e:	9a08      	ldr	r2, [sp, #32]
 8017f90:	e770      	b.n	8017e74 <_dtoa_r+0x7ac>
 8017f92:	9b07      	ldr	r3, [sp, #28]
 8017f94:	2b01      	cmp	r3, #1
 8017f96:	dc19      	bgt.n	8017fcc <_dtoa_r+0x904>
 8017f98:	9b02      	ldr	r3, [sp, #8]
 8017f9a:	b9bb      	cbnz	r3, 8017fcc <_dtoa_r+0x904>
 8017f9c:	9b03      	ldr	r3, [sp, #12]
 8017f9e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017fa2:	b99b      	cbnz	r3, 8017fcc <_dtoa_r+0x904>
 8017fa4:	9b03      	ldr	r3, [sp, #12]
 8017fa6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017faa:	0d1b      	lsrs	r3, r3, #20
 8017fac:	051b      	lsls	r3, r3, #20
 8017fae:	b183      	cbz	r3, 8017fd2 <_dtoa_r+0x90a>
 8017fb0:	9b05      	ldr	r3, [sp, #20]
 8017fb2:	f04f 0801 	mov.w	r8, #1
 8017fb6:	3301      	adds	r3, #1
 8017fb8:	9305      	str	r3, [sp, #20]
 8017fba:	9b06      	ldr	r3, [sp, #24]
 8017fbc:	3301      	adds	r3, #1
 8017fbe:	9306      	str	r3, [sp, #24]
 8017fc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017fc2:	2b00      	cmp	r3, #0
 8017fc4:	f47f af6f 	bne.w	8017ea6 <_dtoa_r+0x7de>
 8017fc8:	2001      	movs	r0, #1
 8017fca:	e774      	b.n	8017eb6 <_dtoa_r+0x7ee>
 8017fcc:	f04f 0800 	mov.w	r8, #0
 8017fd0:	e7f6      	b.n	8017fc0 <_dtoa_r+0x8f8>
 8017fd2:	4698      	mov	r8, r3
 8017fd4:	e7f4      	b.n	8017fc0 <_dtoa_r+0x8f8>
 8017fd6:	d082      	beq.n	8017ede <_dtoa_r+0x816>
 8017fd8:	331c      	adds	r3, #28
 8017fda:	9a05      	ldr	r2, [sp, #20]
 8017fdc:	441a      	add	r2, r3
 8017fde:	441d      	add	r5, r3
 8017fe0:	9205      	str	r2, [sp, #20]
 8017fe2:	9a06      	ldr	r2, [sp, #24]
 8017fe4:	441a      	add	r2, r3
 8017fe6:	9206      	str	r2, [sp, #24]
 8017fe8:	e779      	b.n	8017ede <_dtoa_r+0x816>
 8017fea:	4603      	mov	r3, r0
 8017fec:	e7f4      	b.n	8017fd8 <_dtoa_r+0x910>
 8017fee:	9b04      	ldr	r3, [sp, #16]
 8017ff0:	2b00      	cmp	r3, #0
 8017ff2:	dc37      	bgt.n	8018064 <_dtoa_r+0x99c>
 8017ff4:	9b07      	ldr	r3, [sp, #28]
 8017ff6:	2b02      	cmp	r3, #2
 8017ff8:	dd34      	ble.n	8018064 <_dtoa_r+0x99c>
 8017ffa:	9b04      	ldr	r3, [sp, #16]
 8017ffc:	9301      	str	r3, [sp, #4]
 8017ffe:	9b01      	ldr	r3, [sp, #4]
 8018000:	b963      	cbnz	r3, 801801c <_dtoa_r+0x954>
 8018002:	4631      	mov	r1, r6
 8018004:	2205      	movs	r2, #5
 8018006:	4620      	mov	r0, r4
 8018008:	f001 fc04 	bl	8019814 <__multadd>
 801800c:	4601      	mov	r1, r0
 801800e:	4606      	mov	r6, r0
 8018010:	4650      	mov	r0, sl
 8018012:	f001 fe65 	bl	8019ce0 <__mcmp>
 8018016:	2800      	cmp	r0, #0
 8018018:	f73f adbb 	bgt.w	8017b92 <_dtoa_r+0x4ca>
 801801c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801801e:	9d00      	ldr	r5, [sp, #0]
 8018020:	ea6f 0b03 	mvn.w	fp, r3
 8018024:	f04f 0800 	mov.w	r8, #0
 8018028:	4631      	mov	r1, r6
 801802a:	4620      	mov	r0, r4
 801802c:	f001 fbd0 	bl	80197d0 <_Bfree>
 8018030:	2f00      	cmp	r7, #0
 8018032:	f43f aeab 	beq.w	8017d8c <_dtoa_r+0x6c4>
 8018036:	f1b8 0f00 	cmp.w	r8, #0
 801803a:	d005      	beq.n	8018048 <_dtoa_r+0x980>
 801803c:	45b8      	cmp	r8, r7
 801803e:	d003      	beq.n	8018048 <_dtoa_r+0x980>
 8018040:	4641      	mov	r1, r8
 8018042:	4620      	mov	r0, r4
 8018044:	f001 fbc4 	bl	80197d0 <_Bfree>
 8018048:	4639      	mov	r1, r7
 801804a:	4620      	mov	r0, r4
 801804c:	f001 fbc0 	bl	80197d0 <_Bfree>
 8018050:	e69c      	b.n	8017d8c <_dtoa_r+0x6c4>
 8018052:	2600      	movs	r6, #0
 8018054:	4637      	mov	r7, r6
 8018056:	e7e1      	b.n	801801c <_dtoa_r+0x954>
 8018058:	46bb      	mov	fp, r7
 801805a:	4637      	mov	r7, r6
 801805c:	e599      	b.n	8017b92 <_dtoa_r+0x4ca>
 801805e:	bf00      	nop
 8018060:	40240000 	.word	0x40240000
 8018064:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018066:	2b00      	cmp	r3, #0
 8018068:	f000 80c8 	beq.w	80181fc <_dtoa_r+0xb34>
 801806c:	9b04      	ldr	r3, [sp, #16]
 801806e:	9301      	str	r3, [sp, #4]
 8018070:	2d00      	cmp	r5, #0
 8018072:	dd05      	ble.n	8018080 <_dtoa_r+0x9b8>
 8018074:	4639      	mov	r1, r7
 8018076:	462a      	mov	r2, r5
 8018078:	4620      	mov	r0, r4
 801807a:	f001 fdc5 	bl	8019c08 <__lshift>
 801807e:	4607      	mov	r7, r0
 8018080:	f1b8 0f00 	cmp.w	r8, #0
 8018084:	d05b      	beq.n	801813e <_dtoa_r+0xa76>
 8018086:	6879      	ldr	r1, [r7, #4]
 8018088:	4620      	mov	r0, r4
 801808a:	f001 fb61 	bl	8019750 <_Balloc>
 801808e:	4605      	mov	r5, r0
 8018090:	b928      	cbnz	r0, 801809e <_dtoa_r+0x9d6>
 8018092:	4b82      	ldr	r3, [pc, #520]	; (801829c <_dtoa_r+0xbd4>)
 8018094:	4602      	mov	r2, r0
 8018096:	f240 21ef 	movw	r1, #751	; 0x2ef
 801809a:	f7ff bb2e 	b.w	80176fa <_dtoa_r+0x32>
 801809e:	693a      	ldr	r2, [r7, #16]
 80180a0:	f107 010c 	add.w	r1, r7, #12
 80180a4:	300c      	adds	r0, #12
 80180a6:	3202      	adds	r2, #2
 80180a8:	0092      	lsls	r2, r2, #2
 80180aa:	f7ff fa56 	bl	801755a <memcpy>
 80180ae:	2201      	movs	r2, #1
 80180b0:	4629      	mov	r1, r5
 80180b2:	4620      	mov	r0, r4
 80180b4:	f001 fda8 	bl	8019c08 <__lshift>
 80180b8:	9b00      	ldr	r3, [sp, #0]
 80180ba:	46b8      	mov	r8, r7
 80180bc:	4607      	mov	r7, r0
 80180be:	3301      	adds	r3, #1
 80180c0:	9304      	str	r3, [sp, #16]
 80180c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80180c6:	4413      	add	r3, r2
 80180c8:	9308      	str	r3, [sp, #32]
 80180ca:	9b02      	ldr	r3, [sp, #8]
 80180cc:	f003 0301 	and.w	r3, r3, #1
 80180d0:	9306      	str	r3, [sp, #24]
 80180d2:	9b04      	ldr	r3, [sp, #16]
 80180d4:	4631      	mov	r1, r6
 80180d6:	4650      	mov	r0, sl
 80180d8:	3b01      	subs	r3, #1
 80180da:	9301      	str	r3, [sp, #4]
 80180dc:	f7ff fa62 	bl	80175a4 <quorem>
 80180e0:	4641      	mov	r1, r8
 80180e2:	9002      	str	r0, [sp, #8]
 80180e4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80180e8:	4650      	mov	r0, sl
 80180ea:	f001 fdf9 	bl	8019ce0 <__mcmp>
 80180ee:	463a      	mov	r2, r7
 80180f0:	9005      	str	r0, [sp, #20]
 80180f2:	4631      	mov	r1, r6
 80180f4:	4620      	mov	r0, r4
 80180f6:	f001 fe0f 	bl	8019d18 <__mdiff>
 80180fa:	68c2      	ldr	r2, [r0, #12]
 80180fc:	4605      	mov	r5, r0
 80180fe:	bb02      	cbnz	r2, 8018142 <_dtoa_r+0xa7a>
 8018100:	4601      	mov	r1, r0
 8018102:	4650      	mov	r0, sl
 8018104:	f001 fdec 	bl	8019ce0 <__mcmp>
 8018108:	4602      	mov	r2, r0
 801810a:	4629      	mov	r1, r5
 801810c:	4620      	mov	r0, r4
 801810e:	9209      	str	r2, [sp, #36]	; 0x24
 8018110:	f001 fb5e 	bl	80197d0 <_Bfree>
 8018114:	9b07      	ldr	r3, [sp, #28]
 8018116:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018118:	9d04      	ldr	r5, [sp, #16]
 801811a:	ea43 0102 	orr.w	r1, r3, r2
 801811e:	9b06      	ldr	r3, [sp, #24]
 8018120:	4319      	orrs	r1, r3
 8018122:	d110      	bne.n	8018146 <_dtoa_r+0xa7e>
 8018124:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8018128:	d029      	beq.n	801817e <_dtoa_r+0xab6>
 801812a:	9b05      	ldr	r3, [sp, #20]
 801812c:	2b00      	cmp	r3, #0
 801812e:	dd02      	ble.n	8018136 <_dtoa_r+0xa6e>
 8018130:	9b02      	ldr	r3, [sp, #8]
 8018132:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8018136:	9b01      	ldr	r3, [sp, #4]
 8018138:	f883 9000 	strb.w	r9, [r3]
 801813c:	e774      	b.n	8018028 <_dtoa_r+0x960>
 801813e:	4638      	mov	r0, r7
 8018140:	e7ba      	b.n	80180b8 <_dtoa_r+0x9f0>
 8018142:	2201      	movs	r2, #1
 8018144:	e7e1      	b.n	801810a <_dtoa_r+0xa42>
 8018146:	9b05      	ldr	r3, [sp, #20]
 8018148:	2b00      	cmp	r3, #0
 801814a:	db04      	blt.n	8018156 <_dtoa_r+0xa8e>
 801814c:	9907      	ldr	r1, [sp, #28]
 801814e:	430b      	orrs	r3, r1
 8018150:	9906      	ldr	r1, [sp, #24]
 8018152:	430b      	orrs	r3, r1
 8018154:	d120      	bne.n	8018198 <_dtoa_r+0xad0>
 8018156:	2a00      	cmp	r2, #0
 8018158:	dded      	ble.n	8018136 <_dtoa_r+0xa6e>
 801815a:	4651      	mov	r1, sl
 801815c:	2201      	movs	r2, #1
 801815e:	4620      	mov	r0, r4
 8018160:	f001 fd52 	bl	8019c08 <__lshift>
 8018164:	4631      	mov	r1, r6
 8018166:	4682      	mov	sl, r0
 8018168:	f001 fdba 	bl	8019ce0 <__mcmp>
 801816c:	2800      	cmp	r0, #0
 801816e:	dc03      	bgt.n	8018178 <_dtoa_r+0xab0>
 8018170:	d1e1      	bne.n	8018136 <_dtoa_r+0xa6e>
 8018172:	f019 0f01 	tst.w	r9, #1
 8018176:	d0de      	beq.n	8018136 <_dtoa_r+0xa6e>
 8018178:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801817c:	d1d8      	bne.n	8018130 <_dtoa_r+0xa68>
 801817e:	2339      	movs	r3, #57	; 0x39
 8018180:	9a01      	ldr	r2, [sp, #4]
 8018182:	7013      	strb	r3, [r2, #0]
 8018184:	462b      	mov	r3, r5
 8018186:	461d      	mov	r5, r3
 8018188:	3b01      	subs	r3, #1
 801818a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801818e:	2a39      	cmp	r2, #57	; 0x39
 8018190:	d06b      	beq.n	801826a <_dtoa_r+0xba2>
 8018192:	3201      	adds	r2, #1
 8018194:	701a      	strb	r2, [r3, #0]
 8018196:	e747      	b.n	8018028 <_dtoa_r+0x960>
 8018198:	2a00      	cmp	r2, #0
 801819a:	dd07      	ble.n	80181ac <_dtoa_r+0xae4>
 801819c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80181a0:	d0ed      	beq.n	801817e <_dtoa_r+0xab6>
 80181a2:	f109 0301 	add.w	r3, r9, #1
 80181a6:	9a01      	ldr	r2, [sp, #4]
 80181a8:	7013      	strb	r3, [r2, #0]
 80181aa:	e73d      	b.n	8018028 <_dtoa_r+0x960>
 80181ac:	9b04      	ldr	r3, [sp, #16]
 80181ae:	9a08      	ldr	r2, [sp, #32]
 80181b0:	f803 9c01 	strb.w	r9, [r3, #-1]
 80181b4:	4293      	cmp	r3, r2
 80181b6:	d042      	beq.n	801823e <_dtoa_r+0xb76>
 80181b8:	4651      	mov	r1, sl
 80181ba:	2300      	movs	r3, #0
 80181bc:	220a      	movs	r2, #10
 80181be:	4620      	mov	r0, r4
 80181c0:	f001 fb28 	bl	8019814 <__multadd>
 80181c4:	45b8      	cmp	r8, r7
 80181c6:	4682      	mov	sl, r0
 80181c8:	f04f 0300 	mov.w	r3, #0
 80181cc:	f04f 020a 	mov.w	r2, #10
 80181d0:	4641      	mov	r1, r8
 80181d2:	4620      	mov	r0, r4
 80181d4:	d107      	bne.n	80181e6 <_dtoa_r+0xb1e>
 80181d6:	f001 fb1d 	bl	8019814 <__multadd>
 80181da:	4680      	mov	r8, r0
 80181dc:	4607      	mov	r7, r0
 80181de:	9b04      	ldr	r3, [sp, #16]
 80181e0:	3301      	adds	r3, #1
 80181e2:	9304      	str	r3, [sp, #16]
 80181e4:	e775      	b.n	80180d2 <_dtoa_r+0xa0a>
 80181e6:	f001 fb15 	bl	8019814 <__multadd>
 80181ea:	4639      	mov	r1, r7
 80181ec:	4680      	mov	r8, r0
 80181ee:	2300      	movs	r3, #0
 80181f0:	220a      	movs	r2, #10
 80181f2:	4620      	mov	r0, r4
 80181f4:	f001 fb0e 	bl	8019814 <__multadd>
 80181f8:	4607      	mov	r7, r0
 80181fa:	e7f0      	b.n	80181de <_dtoa_r+0xb16>
 80181fc:	9b04      	ldr	r3, [sp, #16]
 80181fe:	9301      	str	r3, [sp, #4]
 8018200:	9d00      	ldr	r5, [sp, #0]
 8018202:	4631      	mov	r1, r6
 8018204:	4650      	mov	r0, sl
 8018206:	f7ff f9cd 	bl	80175a4 <quorem>
 801820a:	9b00      	ldr	r3, [sp, #0]
 801820c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8018210:	f805 9b01 	strb.w	r9, [r5], #1
 8018214:	1aea      	subs	r2, r5, r3
 8018216:	9b01      	ldr	r3, [sp, #4]
 8018218:	4293      	cmp	r3, r2
 801821a:	dd07      	ble.n	801822c <_dtoa_r+0xb64>
 801821c:	4651      	mov	r1, sl
 801821e:	2300      	movs	r3, #0
 8018220:	220a      	movs	r2, #10
 8018222:	4620      	mov	r0, r4
 8018224:	f001 faf6 	bl	8019814 <__multadd>
 8018228:	4682      	mov	sl, r0
 801822a:	e7ea      	b.n	8018202 <_dtoa_r+0xb3a>
 801822c:	9b01      	ldr	r3, [sp, #4]
 801822e:	f04f 0800 	mov.w	r8, #0
 8018232:	2b00      	cmp	r3, #0
 8018234:	bfcc      	ite	gt
 8018236:	461d      	movgt	r5, r3
 8018238:	2501      	movle	r5, #1
 801823a:	9b00      	ldr	r3, [sp, #0]
 801823c:	441d      	add	r5, r3
 801823e:	4651      	mov	r1, sl
 8018240:	2201      	movs	r2, #1
 8018242:	4620      	mov	r0, r4
 8018244:	f001 fce0 	bl	8019c08 <__lshift>
 8018248:	4631      	mov	r1, r6
 801824a:	4682      	mov	sl, r0
 801824c:	f001 fd48 	bl	8019ce0 <__mcmp>
 8018250:	2800      	cmp	r0, #0
 8018252:	dc97      	bgt.n	8018184 <_dtoa_r+0xabc>
 8018254:	d102      	bne.n	801825c <_dtoa_r+0xb94>
 8018256:	f019 0f01 	tst.w	r9, #1
 801825a:	d193      	bne.n	8018184 <_dtoa_r+0xabc>
 801825c:	462b      	mov	r3, r5
 801825e:	461d      	mov	r5, r3
 8018260:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8018264:	2a30      	cmp	r2, #48	; 0x30
 8018266:	d0fa      	beq.n	801825e <_dtoa_r+0xb96>
 8018268:	e6de      	b.n	8018028 <_dtoa_r+0x960>
 801826a:	9a00      	ldr	r2, [sp, #0]
 801826c:	429a      	cmp	r2, r3
 801826e:	d18a      	bne.n	8018186 <_dtoa_r+0xabe>
 8018270:	f10b 0b01 	add.w	fp, fp, #1
 8018274:	2331      	movs	r3, #49	; 0x31
 8018276:	e797      	b.n	80181a8 <_dtoa_r+0xae0>
 8018278:	4b09      	ldr	r3, [pc, #36]	; (80182a0 <_dtoa_r+0xbd8>)
 801827a:	f7ff ba9a 	b.w	80177b2 <_dtoa_r+0xea>
 801827e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018280:	2b00      	cmp	r3, #0
 8018282:	f47f aa6e 	bne.w	8017762 <_dtoa_r+0x9a>
 8018286:	4b07      	ldr	r3, [pc, #28]	; (80182a4 <_dtoa_r+0xbdc>)
 8018288:	f7ff ba93 	b.w	80177b2 <_dtoa_r+0xea>
 801828c:	9b01      	ldr	r3, [sp, #4]
 801828e:	2b00      	cmp	r3, #0
 8018290:	dcb6      	bgt.n	8018200 <_dtoa_r+0xb38>
 8018292:	9b07      	ldr	r3, [sp, #28]
 8018294:	2b02      	cmp	r3, #2
 8018296:	f73f aeb2 	bgt.w	8017ffe <_dtoa_r+0x936>
 801829a:	e7b1      	b.n	8018200 <_dtoa_r+0xb38>
 801829c:	0818df25 	.word	0x0818df25
 80182a0:	0818dfbd 	.word	0x0818dfbd
 80182a4:	0818dea9 	.word	0x0818dea9

080182a8 <_free_r>:
 80182a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80182aa:	2900      	cmp	r1, #0
 80182ac:	d043      	beq.n	8018336 <_free_r+0x8e>
 80182ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80182b2:	1f0c      	subs	r4, r1, #4
 80182b4:	9001      	str	r0, [sp, #4]
 80182b6:	2b00      	cmp	r3, #0
 80182b8:	bfb8      	it	lt
 80182ba:	18e4      	addlt	r4, r4, r3
 80182bc:	f7fd ff5e 	bl	801617c <__malloc_lock>
 80182c0:	4a1e      	ldr	r2, [pc, #120]	; (801833c <_free_r+0x94>)
 80182c2:	9801      	ldr	r0, [sp, #4]
 80182c4:	6813      	ldr	r3, [r2, #0]
 80182c6:	b933      	cbnz	r3, 80182d6 <_free_r+0x2e>
 80182c8:	6063      	str	r3, [r4, #4]
 80182ca:	6014      	str	r4, [r2, #0]
 80182cc:	b003      	add	sp, #12
 80182ce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80182d2:	f7fd bf59 	b.w	8016188 <__malloc_unlock>
 80182d6:	42a3      	cmp	r3, r4
 80182d8:	d908      	bls.n	80182ec <_free_r+0x44>
 80182da:	6825      	ldr	r5, [r4, #0]
 80182dc:	1961      	adds	r1, r4, r5
 80182de:	428b      	cmp	r3, r1
 80182e0:	bf01      	itttt	eq
 80182e2:	6819      	ldreq	r1, [r3, #0]
 80182e4:	685b      	ldreq	r3, [r3, #4]
 80182e6:	1949      	addeq	r1, r1, r5
 80182e8:	6021      	streq	r1, [r4, #0]
 80182ea:	e7ed      	b.n	80182c8 <_free_r+0x20>
 80182ec:	461a      	mov	r2, r3
 80182ee:	685b      	ldr	r3, [r3, #4]
 80182f0:	b10b      	cbz	r3, 80182f6 <_free_r+0x4e>
 80182f2:	42a3      	cmp	r3, r4
 80182f4:	d9fa      	bls.n	80182ec <_free_r+0x44>
 80182f6:	6811      	ldr	r1, [r2, #0]
 80182f8:	1855      	adds	r5, r2, r1
 80182fa:	42a5      	cmp	r5, r4
 80182fc:	d10b      	bne.n	8018316 <_free_r+0x6e>
 80182fe:	6824      	ldr	r4, [r4, #0]
 8018300:	4421      	add	r1, r4
 8018302:	1854      	adds	r4, r2, r1
 8018304:	6011      	str	r1, [r2, #0]
 8018306:	42a3      	cmp	r3, r4
 8018308:	d1e0      	bne.n	80182cc <_free_r+0x24>
 801830a:	681c      	ldr	r4, [r3, #0]
 801830c:	685b      	ldr	r3, [r3, #4]
 801830e:	440c      	add	r4, r1
 8018310:	6053      	str	r3, [r2, #4]
 8018312:	6014      	str	r4, [r2, #0]
 8018314:	e7da      	b.n	80182cc <_free_r+0x24>
 8018316:	d902      	bls.n	801831e <_free_r+0x76>
 8018318:	230c      	movs	r3, #12
 801831a:	6003      	str	r3, [r0, #0]
 801831c:	e7d6      	b.n	80182cc <_free_r+0x24>
 801831e:	6825      	ldr	r5, [r4, #0]
 8018320:	1961      	adds	r1, r4, r5
 8018322:	428b      	cmp	r3, r1
 8018324:	bf02      	ittt	eq
 8018326:	6819      	ldreq	r1, [r3, #0]
 8018328:	685b      	ldreq	r3, [r3, #4]
 801832a:	1949      	addeq	r1, r1, r5
 801832c:	6063      	str	r3, [r4, #4]
 801832e:	bf08      	it	eq
 8018330:	6021      	streq	r1, [r4, #0]
 8018332:	6054      	str	r4, [r2, #4]
 8018334:	e7ca      	b.n	80182cc <_free_r+0x24>
 8018336:	b003      	add	sp, #12
 8018338:	bd30      	pop	{r4, r5, pc}
 801833a:	bf00      	nop
 801833c:	20003420 	.word	0x20003420

08018340 <rshift>:
 8018340:	6903      	ldr	r3, [r0, #16]
 8018342:	114a      	asrs	r2, r1, #5
 8018344:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8018348:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801834c:	f100 0414 	add.w	r4, r0, #20
 8018350:	dd45      	ble.n	80183de <rshift+0x9e>
 8018352:	f011 011f 	ands.w	r1, r1, #31
 8018356:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801835a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801835e:	d10c      	bne.n	801837a <rshift+0x3a>
 8018360:	f100 0710 	add.w	r7, r0, #16
 8018364:	4629      	mov	r1, r5
 8018366:	42b1      	cmp	r1, r6
 8018368:	d334      	bcc.n	80183d4 <rshift+0x94>
 801836a:	1a9b      	subs	r3, r3, r2
 801836c:	1eea      	subs	r2, r5, #3
 801836e:	009b      	lsls	r3, r3, #2
 8018370:	4296      	cmp	r6, r2
 8018372:	bf38      	it	cc
 8018374:	2300      	movcc	r3, #0
 8018376:	4423      	add	r3, r4
 8018378:	e015      	b.n	80183a6 <rshift+0x66>
 801837a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801837e:	f1c1 0820 	rsb	r8, r1, #32
 8018382:	f105 0e04 	add.w	lr, r5, #4
 8018386:	46a1      	mov	r9, r4
 8018388:	40cf      	lsrs	r7, r1
 801838a:	4576      	cmp	r6, lr
 801838c:	46f4      	mov	ip, lr
 801838e:	d815      	bhi.n	80183bc <rshift+0x7c>
 8018390:	1a9a      	subs	r2, r3, r2
 8018392:	3501      	adds	r5, #1
 8018394:	0092      	lsls	r2, r2, #2
 8018396:	3a04      	subs	r2, #4
 8018398:	42ae      	cmp	r6, r5
 801839a:	bf38      	it	cc
 801839c:	2200      	movcc	r2, #0
 801839e:	18a3      	adds	r3, r4, r2
 80183a0:	50a7      	str	r7, [r4, r2]
 80183a2:	b107      	cbz	r7, 80183a6 <rshift+0x66>
 80183a4:	3304      	adds	r3, #4
 80183a6:	1b1a      	subs	r2, r3, r4
 80183a8:	42a3      	cmp	r3, r4
 80183aa:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80183ae:	bf08      	it	eq
 80183b0:	2300      	moveq	r3, #0
 80183b2:	6102      	str	r2, [r0, #16]
 80183b4:	bf08      	it	eq
 80183b6:	6143      	streq	r3, [r0, #20]
 80183b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80183bc:	f8dc c000 	ldr.w	ip, [ip]
 80183c0:	fa0c fc08 	lsl.w	ip, ip, r8
 80183c4:	ea4c 0707 	orr.w	r7, ip, r7
 80183c8:	f849 7b04 	str.w	r7, [r9], #4
 80183cc:	f85e 7b04 	ldr.w	r7, [lr], #4
 80183d0:	40cf      	lsrs	r7, r1
 80183d2:	e7da      	b.n	801838a <rshift+0x4a>
 80183d4:	f851 cb04 	ldr.w	ip, [r1], #4
 80183d8:	f847 cf04 	str.w	ip, [r7, #4]!
 80183dc:	e7c3      	b.n	8018366 <rshift+0x26>
 80183de:	4623      	mov	r3, r4
 80183e0:	e7e1      	b.n	80183a6 <rshift+0x66>

080183e2 <__hexdig_fun>:
 80183e2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80183e6:	2b09      	cmp	r3, #9
 80183e8:	d802      	bhi.n	80183f0 <__hexdig_fun+0xe>
 80183ea:	3820      	subs	r0, #32
 80183ec:	b2c0      	uxtb	r0, r0
 80183ee:	4770      	bx	lr
 80183f0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80183f4:	2b05      	cmp	r3, #5
 80183f6:	d801      	bhi.n	80183fc <__hexdig_fun+0x1a>
 80183f8:	3847      	subs	r0, #71	; 0x47
 80183fa:	e7f7      	b.n	80183ec <__hexdig_fun+0xa>
 80183fc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8018400:	2b05      	cmp	r3, #5
 8018402:	d801      	bhi.n	8018408 <__hexdig_fun+0x26>
 8018404:	3827      	subs	r0, #39	; 0x27
 8018406:	e7f1      	b.n	80183ec <__hexdig_fun+0xa>
 8018408:	2000      	movs	r0, #0
 801840a:	4770      	bx	lr

0801840c <__gethex>:
 801840c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018410:	4617      	mov	r7, r2
 8018412:	680a      	ldr	r2, [r1, #0]
 8018414:	b085      	sub	sp, #20
 8018416:	4681      	mov	r9, r0
 8018418:	f102 0b02 	add.w	fp, r2, #2
 801841c:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8018420:	468a      	mov	sl, r1
 8018422:	9302      	str	r3, [sp, #8]
 8018424:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8018428:	32fe      	adds	r2, #254	; 0xfe
 801842a:	eb02 030b 	add.w	r3, r2, fp
 801842e:	46d8      	mov	r8, fp
 8018430:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8018434:	9301      	str	r3, [sp, #4]
 8018436:	2830      	cmp	r0, #48	; 0x30
 8018438:	d0f7      	beq.n	801842a <__gethex+0x1e>
 801843a:	f7ff ffd2 	bl	80183e2 <__hexdig_fun>
 801843e:	4604      	mov	r4, r0
 8018440:	2800      	cmp	r0, #0
 8018442:	d137      	bne.n	80184b4 <__gethex+0xa8>
 8018444:	2201      	movs	r2, #1
 8018446:	49a7      	ldr	r1, [pc, #668]	; (80186e4 <__gethex+0x2d8>)
 8018448:	4640      	mov	r0, r8
 801844a:	f7fe ff78 	bl	801733e <strncmp>
 801844e:	4606      	mov	r6, r0
 8018450:	2800      	cmp	r0, #0
 8018452:	d168      	bne.n	8018526 <__gethex+0x11a>
 8018454:	f898 0001 	ldrb.w	r0, [r8, #1]
 8018458:	465d      	mov	r5, fp
 801845a:	f7ff ffc2 	bl	80183e2 <__hexdig_fun>
 801845e:	2800      	cmp	r0, #0
 8018460:	d063      	beq.n	801852a <__gethex+0x11e>
 8018462:	465a      	mov	r2, fp
 8018464:	7810      	ldrb	r0, [r2, #0]
 8018466:	4690      	mov	r8, r2
 8018468:	3201      	adds	r2, #1
 801846a:	2830      	cmp	r0, #48	; 0x30
 801846c:	d0fa      	beq.n	8018464 <__gethex+0x58>
 801846e:	f7ff ffb8 	bl	80183e2 <__hexdig_fun>
 8018472:	fab0 f480 	clz	r4, r0
 8018476:	2301      	movs	r3, #1
 8018478:	465e      	mov	r6, fp
 801847a:	0964      	lsrs	r4, r4, #5
 801847c:	9301      	str	r3, [sp, #4]
 801847e:	4642      	mov	r2, r8
 8018480:	4615      	mov	r5, r2
 8018482:	3201      	adds	r2, #1
 8018484:	7828      	ldrb	r0, [r5, #0]
 8018486:	f7ff ffac 	bl	80183e2 <__hexdig_fun>
 801848a:	2800      	cmp	r0, #0
 801848c:	d1f8      	bne.n	8018480 <__gethex+0x74>
 801848e:	2201      	movs	r2, #1
 8018490:	4994      	ldr	r1, [pc, #592]	; (80186e4 <__gethex+0x2d8>)
 8018492:	4628      	mov	r0, r5
 8018494:	f7fe ff53 	bl	801733e <strncmp>
 8018498:	b978      	cbnz	r0, 80184ba <__gethex+0xae>
 801849a:	b946      	cbnz	r6, 80184ae <__gethex+0xa2>
 801849c:	1c6e      	adds	r6, r5, #1
 801849e:	4632      	mov	r2, r6
 80184a0:	4615      	mov	r5, r2
 80184a2:	3201      	adds	r2, #1
 80184a4:	7828      	ldrb	r0, [r5, #0]
 80184a6:	f7ff ff9c 	bl	80183e2 <__hexdig_fun>
 80184aa:	2800      	cmp	r0, #0
 80184ac:	d1f8      	bne.n	80184a0 <__gethex+0x94>
 80184ae:	1b73      	subs	r3, r6, r5
 80184b0:	009e      	lsls	r6, r3, #2
 80184b2:	e004      	b.n	80184be <__gethex+0xb2>
 80184b4:	2400      	movs	r4, #0
 80184b6:	4626      	mov	r6, r4
 80184b8:	e7e1      	b.n	801847e <__gethex+0x72>
 80184ba:	2e00      	cmp	r6, #0
 80184bc:	d1f7      	bne.n	80184ae <__gethex+0xa2>
 80184be:	782b      	ldrb	r3, [r5, #0]
 80184c0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80184c4:	2b50      	cmp	r3, #80	; 0x50
 80184c6:	d13d      	bne.n	8018544 <__gethex+0x138>
 80184c8:	786b      	ldrb	r3, [r5, #1]
 80184ca:	2b2b      	cmp	r3, #43	; 0x2b
 80184cc:	d02f      	beq.n	801852e <__gethex+0x122>
 80184ce:	2b2d      	cmp	r3, #45	; 0x2d
 80184d0:	d031      	beq.n	8018536 <__gethex+0x12a>
 80184d2:	1c69      	adds	r1, r5, #1
 80184d4:	f04f 0b00 	mov.w	fp, #0
 80184d8:	7808      	ldrb	r0, [r1, #0]
 80184da:	f7ff ff82 	bl	80183e2 <__hexdig_fun>
 80184de:	1e42      	subs	r2, r0, #1
 80184e0:	b2d2      	uxtb	r2, r2
 80184e2:	2a18      	cmp	r2, #24
 80184e4:	d82e      	bhi.n	8018544 <__gethex+0x138>
 80184e6:	f1a0 0210 	sub.w	r2, r0, #16
 80184ea:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80184ee:	f7ff ff78 	bl	80183e2 <__hexdig_fun>
 80184f2:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80184f6:	fa5f fc8c 	uxtb.w	ip, ip
 80184fa:	f1bc 0f18 	cmp.w	ip, #24
 80184fe:	d91d      	bls.n	801853c <__gethex+0x130>
 8018500:	f1bb 0f00 	cmp.w	fp, #0
 8018504:	d000      	beq.n	8018508 <__gethex+0xfc>
 8018506:	4252      	negs	r2, r2
 8018508:	4416      	add	r6, r2
 801850a:	f8ca 1000 	str.w	r1, [sl]
 801850e:	b1dc      	cbz	r4, 8018548 <__gethex+0x13c>
 8018510:	9b01      	ldr	r3, [sp, #4]
 8018512:	2b00      	cmp	r3, #0
 8018514:	bf14      	ite	ne
 8018516:	f04f 0800 	movne.w	r8, #0
 801851a:	f04f 0806 	moveq.w	r8, #6
 801851e:	4640      	mov	r0, r8
 8018520:	b005      	add	sp, #20
 8018522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018526:	4645      	mov	r5, r8
 8018528:	4626      	mov	r6, r4
 801852a:	2401      	movs	r4, #1
 801852c:	e7c7      	b.n	80184be <__gethex+0xb2>
 801852e:	f04f 0b00 	mov.w	fp, #0
 8018532:	1ca9      	adds	r1, r5, #2
 8018534:	e7d0      	b.n	80184d8 <__gethex+0xcc>
 8018536:	f04f 0b01 	mov.w	fp, #1
 801853a:	e7fa      	b.n	8018532 <__gethex+0x126>
 801853c:	230a      	movs	r3, #10
 801853e:	fb03 0002 	mla	r0, r3, r2, r0
 8018542:	e7d0      	b.n	80184e6 <__gethex+0xda>
 8018544:	4629      	mov	r1, r5
 8018546:	e7e0      	b.n	801850a <__gethex+0xfe>
 8018548:	eba5 0308 	sub.w	r3, r5, r8
 801854c:	4621      	mov	r1, r4
 801854e:	3b01      	subs	r3, #1
 8018550:	2b07      	cmp	r3, #7
 8018552:	dc0a      	bgt.n	801856a <__gethex+0x15e>
 8018554:	4648      	mov	r0, r9
 8018556:	f001 f8fb 	bl	8019750 <_Balloc>
 801855a:	4604      	mov	r4, r0
 801855c:	b940      	cbnz	r0, 8018570 <__gethex+0x164>
 801855e:	4b62      	ldr	r3, [pc, #392]	; (80186e8 <__gethex+0x2dc>)
 8018560:	4602      	mov	r2, r0
 8018562:	21e4      	movs	r1, #228	; 0xe4
 8018564:	4861      	ldr	r0, [pc, #388]	; (80186ec <__gethex+0x2e0>)
 8018566:	f001 ff5f 	bl	801a428 <__assert_func>
 801856a:	3101      	adds	r1, #1
 801856c:	105b      	asrs	r3, r3, #1
 801856e:	e7ef      	b.n	8018550 <__gethex+0x144>
 8018570:	2300      	movs	r3, #0
 8018572:	f100 0a14 	add.w	sl, r0, #20
 8018576:	495b      	ldr	r1, [pc, #364]	; (80186e4 <__gethex+0x2d8>)
 8018578:	469b      	mov	fp, r3
 801857a:	f8cd a004 	str.w	sl, [sp, #4]
 801857e:	45a8      	cmp	r8, r5
 8018580:	d342      	bcc.n	8018608 <__gethex+0x1fc>
 8018582:	9801      	ldr	r0, [sp, #4]
 8018584:	f840 bb04 	str.w	fp, [r0], #4
 8018588:	eba0 000a 	sub.w	r0, r0, sl
 801858c:	1080      	asrs	r0, r0, #2
 801858e:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8018592:	6120      	str	r0, [r4, #16]
 8018594:	4658      	mov	r0, fp
 8018596:	f001 f9cf 	bl	8019938 <__hi0bits>
 801859a:	683d      	ldr	r5, [r7, #0]
 801859c:	eba8 0000 	sub.w	r0, r8, r0
 80185a0:	42a8      	cmp	r0, r5
 80185a2:	dd59      	ble.n	8018658 <__gethex+0x24c>
 80185a4:	eba0 0805 	sub.w	r8, r0, r5
 80185a8:	4620      	mov	r0, r4
 80185aa:	4641      	mov	r1, r8
 80185ac:	f001 fd68 	bl	801a080 <__any_on>
 80185b0:	4683      	mov	fp, r0
 80185b2:	b1b8      	cbz	r0, 80185e4 <__gethex+0x1d8>
 80185b4:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 80185b8:	f04f 0b01 	mov.w	fp, #1
 80185bc:	1159      	asrs	r1, r3, #5
 80185be:	f003 021f 	and.w	r2, r3, #31
 80185c2:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80185c6:	fa0b f202 	lsl.w	r2, fp, r2
 80185ca:	420a      	tst	r2, r1
 80185cc:	d00a      	beq.n	80185e4 <__gethex+0x1d8>
 80185ce:	455b      	cmp	r3, fp
 80185d0:	dd06      	ble.n	80185e0 <__gethex+0x1d4>
 80185d2:	f1a8 0102 	sub.w	r1, r8, #2
 80185d6:	4620      	mov	r0, r4
 80185d8:	f001 fd52 	bl	801a080 <__any_on>
 80185dc:	2800      	cmp	r0, #0
 80185de:	d138      	bne.n	8018652 <__gethex+0x246>
 80185e0:	f04f 0b02 	mov.w	fp, #2
 80185e4:	4446      	add	r6, r8
 80185e6:	4641      	mov	r1, r8
 80185e8:	4620      	mov	r0, r4
 80185ea:	f7ff fea9 	bl	8018340 <rshift>
 80185ee:	68bb      	ldr	r3, [r7, #8]
 80185f0:	42b3      	cmp	r3, r6
 80185f2:	da41      	bge.n	8018678 <__gethex+0x26c>
 80185f4:	4621      	mov	r1, r4
 80185f6:	4648      	mov	r0, r9
 80185f8:	f001 f8ea 	bl	80197d0 <_Bfree>
 80185fc:	2300      	movs	r3, #0
 80185fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018600:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8018604:	6013      	str	r3, [r2, #0]
 8018606:	e78a      	b.n	801851e <__gethex+0x112>
 8018608:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 801860c:	2a2e      	cmp	r2, #46	; 0x2e
 801860e:	d014      	beq.n	801863a <__gethex+0x22e>
 8018610:	2b20      	cmp	r3, #32
 8018612:	d106      	bne.n	8018622 <__gethex+0x216>
 8018614:	9b01      	ldr	r3, [sp, #4]
 8018616:	f843 bb04 	str.w	fp, [r3], #4
 801861a:	f04f 0b00 	mov.w	fp, #0
 801861e:	9301      	str	r3, [sp, #4]
 8018620:	465b      	mov	r3, fp
 8018622:	7828      	ldrb	r0, [r5, #0]
 8018624:	9303      	str	r3, [sp, #12]
 8018626:	f7ff fedc 	bl	80183e2 <__hexdig_fun>
 801862a:	9b03      	ldr	r3, [sp, #12]
 801862c:	f000 000f 	and.w	r0, r0, #15
 8018630:	4098      	lsls	r0, r3
 8018632:	3304      	adds	r3, #4
 8018634:	ea4b 0b00 	orr.w	fp, fp, r0
 8018638:	e7a1      	b.n	801857e <__gethex+0x172>
 801863a:	45a8      	cmp	r8, r5
 801863c:	d8e8      	bhi.n	8018610 <__gethex+0x204>
 801863e:	2201      	movs	r2, #1
 8018640:	4628      	mov	r0, r5
 8018642:	9303      	str	r3, [sp, #12]
 8018644:	f7fe fe7b 	bl	801733e <strncmp>
 8018648:	4926      	ldr	r1, [pc, #152]	; (80186e4 <__gethex+0x2d8>)
 801864a:	9b03      	ldr	r3, [sp, #12]
 801864c:	2800      	cmp	r0, #0
 801864e:	d1df      	bne.n	8018610 <__gethex+0x204>
 8018650:	e795      	b.n	801857e <__gethex+0x172>
 8018652:	f04f 0b03 	mov.w	fp, #3
 8018656:	e7c5      	b.n	80185e4 <__gethex+0x1d8>
 8018658:	da0b      	bge.n	8018672 <__gethex+0x266>
 801865a:	eba5 0800 	sub.w	r8, r5, r0
 801865e:	4621      	mov	r1, r4
 8018660:	4648      	mov	r0, r9
 8018662:	4642      	mov	r2, r8
 8018664:	eba6 0608 	sub.w	r6, r6, r8
 8018668:	f001 face 	bl	8019c08 <__lshift>
 801866c:	4604      	mov	r4, r0
 801866e:	f100 0a14 	add.w	sl, r0, #20
 8018672:	f04f 0b00 	mov.w	fp, #0
 8018676:	e7ba      	b.n	80185ee <__gethex+0x1e2>
 8018678:	687b      	ldr	r3, [r7, #4]
 801867a:	42b3      	cmp	r3, r6
 801867c:	dd74      	ble.n	8018768 <__gethex+0x35c>
 801867e:	1b9e      	subs	r6, r3, r6
 8018680:	42b5      	cmp	r5, r6
 8018682:	dc35      	bgt.n	80186f0 <__gethex+0x2e4>
 8018684:	68fb      	ldr	r3, [r7, #12]
 8018686:	2b02      	cmp	r3, #2
 8018688:	d023      	beq.n	80186d2 <__gethex+0x2c6>
 801868a:	2b03      	cmp	r3, #3
 801868c:	d025      	beq.n	80186da <__gethex+0x2ce>
 801868e:	2b01      	cmp	r3, #1
 8018690:	d115      	bne.n	80186be <__gethex+0x2b2>
 8018692:	42b5      	cmp	r5, r6
 8018694:	d113      	bne.n	80186be <__gethex+0x2b2>
 8018696:	2d01      	cmp	r5, #1
 8018698:	d10b      	bne.n	80186b2 <__gethex+0x2a6>
 801869a:	687b      	ldr	r3, [r7, #4]
 801869c:	f04f 0862 	mov.w	r8, #98	; 0x62
 80186a0:	9a02      	ldr	r2, [sp, #8]
 80186a2:	6013      	str	r3, [r2, #0]
 80186a4:	2301      	movs	r3, #1
 80186a6:	6123      	str	r3, [r4, #16]
 80186a8:	f8ca 3000 	str.w	r3, [sl]
 80186ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80186ae:	601c      	str	r4, [r3, #0]
 80186b0:	e735      	b.n	801851e <__gethex+0x112>
 80186b2:	1e69      	subs	r1, r5, #1
 80186b4:	4620      	mov	r0, r4
 80186b6:	f001 fce3 	bl	801a080 <__any_on>
 80186ba:	2800      	cmp	r0, #0
 80186bc:	d1ed      	bne.n	801869a <__gethex+0x28e>
 80186be:	4621      	mov	r1, r4
 80186c0:	4648      	mov	r0, r9
 80186c2:	f001 f885 	bl	80197d0 <_Bfree>
 80186c6:	2300      	movs	r3, #0
 80186c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80186ca:	f04f 0850 	mov.w	r8, #80	; 0x50
 80186ce:	6013      	str	r3, [r2, #0]
 80186d0:	e725      	b.n	801851e <__gethex+0x112>
 80186d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80186d4:	2b00      	cmp	r3, #0
 80186d6:	d1f2      	bne.n	80186be <__gethex+0x2b2>
 80186d8:	e7df      	b.n	801869a <__gethex+0x28e>
 80186da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80186dc:	2b00      	cmp	r3, #0
 80186de:	d1dc      	bne.n	801869a <__gethex+0x28e>
 80186e0:	e7ed      	b.n	80186be <__gethex+0x2b2>
 80186e2:	bf00      	nop
 80186e4:	0818dd4b 	.word	0x0818dd4b
 80186e8:	0818df25 	.word	0x0818df25
 80186ec:	0818df36 	.word	0x0818df36
 80186f0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80186f4:	f1bb 0f00 	cmp.w	fp, #0
 80186f8:	d133      	bne.n	8018762 <__gethex+0x356>
 80186fa:	f1b8 0f00 	cmp.w	r8, #0
 80186fe:	d004      	beq.n	801870a <__gethex+0x2fe>
 8018700:	4641      	mov	r1, r8
 8018702:	4620      	mov	r0, r4
 8018704:	f001 fcbc 	bl	801a080 <__any_on>
 8018708:	4683      	mov	fp, r0
 801870a:	ea4f 1268 	mov.w	r2, r8, asr #5
 801870e:	2301      	movs	r3, #1
 8018710:	f008 081f 	and.w	r8, r8, #31
 8018714:	4631      	mov	r1, r6
 8018716:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801871a:	4620      	mov	r0, r4
 801871c:	fa03 f308 	lsl.w	r3, r3, r8
 8018720:	1bad      	subs	r5, r5, r6
 8018722:	f04f 0802 	mov.w	r8, #2
 8018726:	4213      	tst	r3, r2
 8018728:	bf18      	it	ne
 801872a:	f04b 0b02 	orrne.w	fp, fp, #2
 801872e:	f7ff fe07 	bl	8018340 <rshift>
 8018732:	687e      	ldr	r6, [r7, #4]
 8018734:	f1bb 0f00 	cmp.w	fp, #0
 8018738:	d04a      	beq.n	80187d0 <__gethex+0x3c4>
 801873a:	68fb      	ldr	r3, [r7, #12]
 801873c:	2b02      	cmp	r3, #2
 801873e:	d016      	beq.n	801876e <__gethex+0x362>
 8018740:	2b03      	cmp	r3, #3
 8018742:	d018      	beq.n	8018776 <__gethex+0x36a>
 8018744:	2b01      	cmp	r3, #1
 8018746:	d109      	bne.n	801875c <__gethex+0x350>
 8018748:	f01b 0f02 	tst.w	fp, #2
 801874c:	d006      	beq.n	801875c <__gethex+0x350>
 801874e:	f8da 3000 	ldr.w	r3, [sl]
 8018752:	ea4b 0b03 	orr.w	fp, fp, r3
 8018756:	f01b 0f01 	tst.w	fp, #1
 801875a:	d10f      	bne.n	801877c <__gethex+0x370>
 801875c:	f048 0810 	orr.w	r8, r8, #16
 8018760:	e036      	b.n	80187d0 <__gethex+0x3c4>
 8018762:	f04f 0b01 	mov.w	fp, #1
 8018766:	e7d0      	b.n	801870a <__gethex+0x2fe>
 8018768:	f04f 0801 	mov.w	r8, #1
 801876c:	e7e2      	b.n	8018734 <__gethex+0x328>
 801876e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018770:	f1c3 0301 	rsb	r3, r3, #1
 8018774:	930f      	str	r3, [sp, #60]	; 0x3c
 8018776:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018778:	2b00      	cmp	r3, #0
 801877a:	d0ef      	beq.n	801875c <__gethex+0x350>
 801877c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8018780:	f104 0214 	add.w	r2, r4, #20
 8018784:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8018788:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 801878c:	9301      	str	r3, [sp, #4]
 801878e:	2300      	movs	r3, #0
 8018790:	4694      	mov	ip, r2
 8018792:	f852 1b04 	ldr.w	r1, [r2], #4
 8018796:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 801879a:	d01e      	beq.n	80187da <__gethex+0x3ce>
 801879c:	3101      	adds	r1, #1
 801879e:	f8cc 1000 	str.w	r1, [ip]
 80187a2:	f1b8 0f02 	cmp.w	r8, #2
 80187a6:	f104 0214 	add.w	r2, r4, #20
 80187aa:	d13d      	bne.n	8018828 <__gethex+0x41c>
 80187ac:	683b      	ldr	r3, [r7, #0]
 80187ae:	3b01      	subs	r3, #1
 80187b0:	42ab      	cmp	r3, r5
 80187b2:	d10b      	bne.n	80187cc <__gethex+0x3c0>
 80187b4:	1169      	asrs	r1, r5, #5
 80187b6:	2301      	movs	r3, #1
 80187b8:	f005 051f 	and.w	r5, r5, #31
 80187bc:	fa03 f505 	lsl.w	r5, r3, r5
 80187c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80187c4:	421d      	tst	r5, r3
 80187c6:	bf18      	it	ne
 80187c8:	f04f 0801 	movne.w	r8, #1
 80187cc:	f048 0820 	orr.w	r8, r8, #32
 80187d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80187d2:	601c      	str	r4, [r3, #0]
 80187d4:	9b02      	ldr	r3, [sp, #8]
 80187d6:	601e      	str	r6, [r3, #0]
 80187d8:	e6a1      	b.n	801851e <__gethex+0x112>
 80187da:	4290      	cmp	r0, r2
 80187dc:	f842 3c04 	str.w	r3, [r2, #-4]
 80187e0:	d8d6      	bhi.n	8018790 <__gethex+0x384>
 80187e2:	68a2      	ldr	r2, [r4, #8]
 80187e4:	4593      	cmp	fp, r2
 80187e6:	db17      	blt.n	8018818 <__gethex+0x40c>
 80187e8:	6861      	ldr	r1, [r4, #4]
 80187ea:	4648      	mov	r0, r9
 80187ec:	3101      	adds	r1, #1
 80187ee:	f000 ffaf 	bl	8019750 <_Balloc>
 80187f2:	4682      	mov	sl, r0
 80187f4:	b918      	cbnz	r0, 80187fe <__gethex+0x3f2>
 80187f6:	4b1b      	ldr	r3, [pc, #108]	; (8018864 <__gethex+0x458>)
 80187f8:	4602      	mov	r2, r0
 80187fa:	2184      	movs	r1, #132	; 0x84
 80187fc:	e6b2      	b.n	8018564 <__gethex+0x158>
 80187fe:	6922      	ldr	r2, [r4, #16]
 8018800:	f104 010c 	add.w	r1, r4, #12
 8018804:	300c      	adds	r0, #12
 8018806:	3202      	adds	r2, #2
 8018808:	0092      	lsls	r2, r2, #2
 801880a:	f7fe fea6 	bl	801755a <memcpy>
 801880e:	4621      	mov	r1, r4
 8018810:	4654      	mov	r4, sl
 8018812:	4648      	mov	r0, r9
 8018814:	f000 ffdc 	bl	80197d0 <_Bfree>
 8018818:	6922      	ldr	r2, [r4, #16]
 801881a:	1c51      	adds	r1, r2, #1
 801881c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8018820:	6121      	str	r1, [r4, #16]
 8018822:	2101      	movs	r1, #1
 8018824:	6151      	str	r1, [r2, #20]
 8018826:	e7bc      	b.n	80187a2 <__gethex+0x396>
 8018828:	6921      	ldr	r1, [r4, #16]
 801882a:	4559      	cmp	r1, fp
 801882c:	dd0b      	ble.n	8018846 <__gethex+0x43a>
 801882e:	2101      	movs	r1, #1
 8018830:	4620      	mov	r0, r4
 8018832:	f7ff fd85 	bl	8018340 <rshift>
 8018836:	3601      	adds	r6, #1
 8018838:	68bb      	ldr	r3, [r7, #8]
 801883a:	42b3      	cmp	r3, r6
 801883c:	f6ff aeda 	blt.w	80185f4 <__gethex+0x1e8>
 8018840:	f04f 0801 	mov.w	r8, #1
 8018844:	e7c2      	b.n	80187cc <__gethex+0x3c0>
 8018846:	f015 051f 	ands.w	r5, r5, #31
 801884a:	d0f9      	beq.n	8018840 <__gethex+0x434>
 801884c:	9b01      	ldr	r3, [sp, #4]
 801884e:	f1c5 0520 	rsb	r5, r5, #32
 8018852:	441a      	add	r2, r3
 8018854:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8018858:	f001 f86e 	bl	8019938 <__hi0bits>
 801885c:	42a8      	cmp	r0, r5
 801885e:	dbe6      	blt.n	801882e <__gethex+0x422>
 8018860:	e7ee      	b.n	8018840 <__gethex+0x434>
 8018862:	bf00      	nop
 8018864:	0818df25 	.word	0x0818df25

08018868 <L_shift>:
 8018868:	f1c2 0208 	rsb	r2, r2, #8
 801886c:	0092      	lsls	r2, r2, #2
 801886e:	b570      	push	{r4, r5, r6, lr}
 8018870:	f1c2 0620 	rsb	r6, r2, #32
 8018874:	6843      	ldr	r3, [r0, #4]
 8018876:	6804      	ldr	r4, [r0, #0]
 8018878:	fa03 f506 	lsl.w	r5, r3, r6
 801887c:	40d3      	lsrs	r3, r2
 801887e:	432c      	orrs	r4, r5
 8018880:	6004      	str	r4, [r0, #0]
 8018882:	f840 3f04 	str.w	r3, [r0, #4]!
 8018886:	4288      	cmp	r0, r1
 8018888:	d3f4      	bcc.n	8018874 <L_shift+0xc>
 801888a:	bd70      	pop	{r4, r5, r6, pc}

0801888c <__match>:
 801888c:	6803      	ldr	r3, [r0, #0]
 801888e:	3301      	adds	r3, #1
 8018890:	b530      	push	{r4, r5, lr}
 8018892:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018896:	b914      	cbnz	r4, 801889e <__match+0x12>
 8018898:	6003      	str	r3, [r0, #0]
 801889a:	2001      	movs	r0, #1
 801889c:	bd30      	pop	{r4, r5, pc}
 801889e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80188a2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80188a6:	2d19      	cmp	r5, #25
 80188a8:	bf98      	it	ls
 80188aa:	3220      	addls	r2, #32
 80188ac:	42a2      	cmp	r2, r4
 80188ae:	d0f0      	beq.n	8018892 <__match+0x6>
 80188b0:	2000      	movs	r0, #0
 80188b2:	e7f3      	b.n	801889c <__match+0x10>

080188b4 <__hexnan>:
 80188b4:	680b      	ldr	r3, [r1, #0]
 80188b6:	6801      	ldr	r1, [r0, #0]
 80188b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80188bc:	115e      	asrs	r6, r3, #5
 80188be:	f013 031f 	ands.w	r3, r3, #31
 80188c2:	f04f 0500 	mov.w	r5, #0
 80188c6:	b087      	sub	sp, #28
 80188c8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80188cc:	4682      	mov	sl, r0
 80188ce:	4690      	mov	r8, r2
 80188d0:	46ab      	mov	fp, r5
 80188d2:	bf18      	it	ne
 80188d4:	3604      	addne	r6, #4
 80188d6:	9301      	str	r3, [sp, #4]
 80188d8:	9502      	str	r5, [sp, #8]
 80188da:	1f37      	subs	r7, r6, #4
 80188dc:	f846 5c04 	str.w	r5, [r6, #-4]
 80188e0:	46b9      	mov	r9, r7
 80188e2:	463c      	mov	r4, r7
 80188e4:	1c4b      	adds	r3, r1, #1
 80188e6:	784a      	ldrb	r2, [r1, #1]
 80188e8:	9303      	str	r3, [sp, #12]
 80188ea:	b342      	cbz	r2, 801893e <__hexnan+0x8a>
 80188ec:	4610      	mov	r0, r2
 80188ee:	9105      	str	r1, [sp, #20]
 80188f0:	9204      	str	r2, [sp, #16]
 80188f2:	f7ff fd76 	bl	80183e2 <__hexdig_fun>
 80188f6:	2800      	cmp	r0, #0
 80188f8:	d14f      	bne.n	801899a <__hexnan+0xe6>
 80188fa:	9a04      	ldr	r2, [sp, #16]
 80188fc:	9905      	ldr	r1, [sp, #20]
 80188fe:	2a20      	cmp	r2, #32
 8018900:	d818      	bhi.n	8018934 <__hexnan+0x80>
 8018902:	9b02      	ldr	r3, [sp, #8]
 8018904:	459b      	cmp	fp, r3
 8018906:	dd13      	ble.n	8018930 <__hexnan+0x7c>
 8018908:	454c      	cmp	r4, r9
 801890a:	d206      	bcs.n	801891a <__hexnan+0x66>
 801890c:	2d07      	cmp	r5, #7
 801890e:	dc04      	bgt.n	801891a <__hexnan+0x66>
 8018910:	462a      	mov	r2, r5
 8018912:	4649      	mov	r1, r9
 8018914:	4620      	mov	r0, r4
 8018916:	f7ff ffa7 	bl	8018868 <L_shift>
 801891a:	4544      	cmp	r4, r8
 801891c:	d94f      	bls.n	80189be <__hexnan+0x10a>
 801891e:	2300      	movs	r3, #0
 8018920:	f1a4 0904 	sub.w	r9, r4, #4
 8018924:	f8cd b008 	str.w	fp, [sp, #8]
 8018928:	f844 3c04 	str.w	r3, [r4, #-4]
 801892c:	461d      	mov	r5, r3
 801892e:	464c      	mov	r4, r9
 8018930:	9903      	ldr	r1, [sp, #12]
 8018932:	e7d7      	b.n	80188e4 <__hexnan+0x30>
 8018934:	2a29      	cmp	r2, #41	; 0x29
 8018936:	d154      	bne.n	80189e2 <__hexnan+0x12e>
 8018938:	3102      	adds	r1, #2
 801893a:	f8ca 1000 	str.w	r1, [sl]
 801893e:	f1bb 0f00 	cmp.w	fp, #0
 8018942:	d04e      	beq.n	80189e2 <__hexnan+0x12e>
 8018944:	454c      	cmp	r4, r9
 8018946:	d206      	bcs.n	8018956 <__hexnan+0xa2>
 8018948:	2d07      	cmp	r5, #7
 801894a:	dc04      	bgt.n	8018956 <__hexnan+0xa2>
 801894c:	462a      	mov	r2, r5
 801894e:	4649      	mov	r1, r9
 8018950:	4620      	mov	r0, r4
 8018952:	f7ff ff89 	bl	8018868 <L_shift>
 8018956:	4544      	cmp	r4, r8
 8018958:	d933      	bls.n	80189c2 <__hexnan+0x10e>
 801895a:	f1a8 0204 	sub.w	r2, r8, #4
 801895e:	4623      	mov	r3, r4
 8018960:	f853 1b04 	ldr.w	r1, [r3], #4
 8018964:	429f      	cmp	r7, r3
 8018966:	f842 1f04 	str.w	r1, [r2, #4]!
 801896a:	d2f9      	bcs.n	8018960 <__hexnan+0xac>
 801896c:	1b3b      	subs	r3, r7, r4
 801896e:	3e03      	subs	r6, #3
 8018970:	3401      	adds	r4, #1
 8018972:	2200      	movs	r2, #0
 8018974:	f023 0303 	bic.w	r3, r3, #3
 8018978:	3304      	adds	r3, #4
 801897a:	42a6      	cmp	r6, r4
 801897c:	bf38      	it	cc
 801897e:	2304      	movcc	r3, #4
 8018980:	4443      	add	r3, r8
 8018982:	f843 2b04 	str.w	r2, [r3], #4
 8018986:	429f      	cmp	r7, r3
 8018988:	d2fb      	bcs.n	8018982 <__hexnan+0xce>
 801898a:	683b      	ldr	r3, [r7, #0]
 801898c:	b91b      	cbnz	r3, 8018996 <__hexnan+0xe2>
 801898e:	4547      	cmp	r7, r8
 8018990:	d125      	bne.n	80189de <__hexnan+0x12a>
 8018992:	2301      	movs	r3, #1
 8018994:	603b      	str	r3, [r7, #0]
 8018996:	2005      	movs	r0, #5
 8018998:	e024      	b.n	80189e4 <__hexnan+0x130>
 801899a:	3501      	adds	r5, #1
 801899c:	f10b 0b01 	add.w	fp, fp, #1
 80189a0:	2d08      	cmp	r5, #8
 80189a2:	dd05      	ble.n	80189b0 <__hexnan+0xfc>
 80189a4:	4544      	cmp	r4, r8
 80189a6:	d9c3      	bls.n	8018930 <__hexnan+0x7c>
 80189a8:	2300      	movs	r3, #0
 80189aa:	3c04      	subs	r4, #4
 80189ac:	2501      	movs	r5, #1
 80189ae:	6023      	str	r3, [r4, #0]
 80189b0:	6822      	ldr	r2, [r4, #0]
 80189b2:	f000 000f 	and.w	r0, r0, #15
 80189b6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80189ba:	6020      	str	r0, [r4, #0]
 80189bc:	e7b8      	b.n	8018930 <__hexnan+0x7c>
 80189be:	2508      	movs	r5, #8
 80189c0:	e7b6      	b.n	8018930 <__hexnan+0x7c>
 80189c2:	9b01      	ldr	r3, [sp, #4]
 80189c4:	2b00      	cmp	r3, #0
 80189c6:	d0e0      	beq.n	801898a <__hexnan+0xd6>
 80189c8:	f1c3 0320 	rsb	r3, r3, #32
 80189cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80189d0:	40da      	lsrs	r2, r3
 80189d2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80189d6:	4013      	ands	r3, r2
 80189d8:	f846 3c04 	str.w	r3, [r6, #-4]
 80189dc:	e7d5      	b.n	801898a <__hexnan+0xd6>
 80189de:	3f04      	subs	r7, #4
 80189e0:	e7d3      	b.n	801898a <__hexnan+0xd6>
 80189e2:	2004      	movs	r0, #4
 80189e4:	b007      	add	sp, #28
 80189e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080189ea <__ssputs_r>:
 80189ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80189ee:	461f      	mov	r7, r3
 80189f0:	688e      	ldr	r6, [r1, #8]
 80189f2:	4682      	mov	sl, r0
 80189f4:	460c      	mov	r4, r1
 80189f6:	42be      	cmp	r6, r7
 80189f8:	4690      	mov	r8, r2
 80189fa:	680b      	ldr	r3, [r1, #0]
 80189fc:	d82c      	bhi.n	8018a58 <__ssputs_r+0x6e>
 80189fe:	898a      	ldrh	r2, [r1, #12]
 8018a00:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8018a04:	d026      	beq.n	8018a54 <__ssputs_r+0x6a>
 8018a06:	6965      	ldr	r5, [r4, #20]
 8018a08:	6909      	ldr	r1, [r1, #16]
 8018a0a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018a0e:	eba3 0901 	sub.w	r9, r3, r1
 8018a12:	1c7b      	adds	r3, r7, #1
 8018a14:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8018a18:	444b      	add	r3, r9
 8018a1a:	106d      	asrs	r5, r5, #1
 8018a1c:	429d      	cmp	r5, r3
 8018a1e:	bf38      	it	cc
 8018a20:	461d      	movcc	r5, r3
 8018a22:	0553      	lsls	r3, r2, #21
 8018a24:	d527      	bpl.n	8018a76 <__ssputs_r+0x8c>
 8018a26:	4629      	mov	r1, r5
 8018a28:	f7fc fe9c 	bl	8015764 <_malloc_r>
 8018a2c:	4606      	mov	r6, r0
 8018a2e:	b360      	cbz	r0, 8018a8a <__ssputs_r+0xa0>
 8018a30:	464a      	mov	r2, r9
 8018a32:	6921      	ldr	r1, [r4, #16]
 8018a34:	f7fe fd91 	bl	801755a <memcpy>
 8018a38:	89a3      	ldrh	r3, [r4, #12]
 8018a3a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8018a3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018a42:	81a3      	strh	r3, [r4, #12]
 8018a44:	6126      	str	r6, [r4, #16]
 8018a46:	444e      	add	r6, r9
 8018a48:	6165      	str	r5, [r4, #20]
 8018a4a:	eba5 0509 	sub.w	r5, r5, r9
 8018a4e:	6026      	str	r6, [r4, #0]
 8018a50:	463e      	mov	r6, r7
 8018a52:	60a5      	str	r5, [r4, #8]
 8018a54:	42be      	cmp	r6, r7
 8018a56:	d900      	bls.n	8018a5a <__ssputs_r+0x70>
 8018a58:	463e      	mov	r6, r7
 8018a5a:	4632      	mov	r2, r6
 8018a5c:	4641      	mov	r1, r8
 8018a5e:	6820      	ldr	r0, [r4, #0]
 8018a60:	f7fe fca2 	bl	80173a8 <memmove>
 8018a64:	68a3      	ldr	r3, [r4, #8]
 8018a66:	2000      	movs	r0, #0
 8018a68:	1b9b      	subs	r3, r3, r6
 8018a6a:	60a3      	str	r3, [r4, #8]
 8018a6c:	6823      	ldr	r3, [r4, #0]
 8018a6e:	4433      	add	r3, r6
 8018a70:	6023      	str	r3, [r4, #0]
 8018a72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018a76:	462a      	mov	r2, r5
 8018a78:	f001 fb5a 	bl	801a130 <_realloc_r>
 8018a7c:	4606      	mov	r6, r0
 8018a7e:	2800      	cmp	r0, #0
 8018a80:	d1e0      	bne.n	8018a44 <__ssputs_r+0x5a>
 8018a82:	6921      	ldr	r1, [r4, #16]
 8018a84:	4650      	mov	r0, sl
 8018a86:	f7ff fc0f 	bl	80182a8 <_free_r>
 8018a8a:	230c      	movs	r3, #12
 8018a8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018a90:	f8ca 3000 	str.w	r3, [sl]
 8018a94:	89a3      	ldrh	r3, [r4, #12]
 8018a96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018a9a:	81a3      	strh	r3, [r4, #12]
 8018a9c:	e7e9      	b.n	8018a72 <__ssputs_r+0x88>
	...

08018aa0 <_svfiprintf_r>:
 8018aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018aa4:	4698      	mov	r8, r3
 8018aa6:	898b      	ldrh	r3, [r1, #12]
 8018aa8:	b09d      	sub	sp, #116	; 0x74
 8018aaa:	4607      	mov	r7, r0
 8018aac:	061b      	lsls	r3, r3, #24
 8018aae:	460d      	mov	r5, r1
 8018ab0:	4614      	mov	r4, r2
 8018ab2:	d50e      	bpl.n	8018ad2 <_svfiprintf_r+0x32>
 8018ab4:	690b      	ldr	r3, [r1, #16]
 8018ab6:	b963      	cbnz	r3, 8018ad2 <_svfiprintf_r+0x32>
 8018ab8:	2140      	movs	r1, #64	; 0x40
 8018aba:	f7fc fe53 	bl	8015764 <_malloc_r>
 8018abe:	6028      	str	r0, [r5, #0]
 8018ac0:	6128      	str	r0, [r5, #16]
 8018ac2:	b920      	cbnz	r0, 8018ace <_svfiprintf_r+0x2e>
 8018ac4:	230c      	movs	r3, #12
 8018ac6:	603b      	str	r3, [r7, #0]
 8018ac8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018acc:	e0d0      	b.n	8018c70 <_svfiprintf_r+0x1d0>
 8018ace:	2340      	movs	r3, #64	; 0x40
 8018ad0:	616b      	str	r3, [r5, #20]
 8018ad2:	2300      	movs	r3, #0
 8018ad4:	f8cd 800c 	str.w	r8, [sp, #12]
 8018ad8:	f04f 0901 	mov.w	r9, #1
 8018adc:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8018c88 <_svfiprintf_r+0x1e8>
 8018ae0:	9309      	str	r3, [sp, #36]	; 0x24
 8018ae2:	2320      	movs	r3, #32
 8018ae4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018ae8:	2330      	movs	r3, #48	; 0x30
 8018aea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018aee:	4623      	mov	r3, r4
 8018af0:	469a      	mov	sl, r3
 8018af2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018af6:	b10a      	cbz	r2, 8018afc <_svfiprintf_r+0x5c>
 8018af8:	2a25      	cmp	r2, #37	; 0x25
 8018afa:	d1f9      	bne.n	8018af0 <_svfiprintf_r+0x50>
 8018afc:	ebba 0b04 	subs.w	fp, sl, r4
 8018b00:	d00b      	beq.n	8018b1a <_svfiprintf_r+0x7a>
 8018b02:	465b      	mov	r3, fp
 8018b04:	4622      	mov	r2, r4
 8018b06:	4629      	mov	r1, r5
 8018b08:	4638      	mov	r0, r7
 8018b0a:	f7ff ff6e 	bl	80189ea <__ssputs_r>
 8018b0e:	3001      	adds	r0, #1
 8018b10:	f000 80a9 	beq.w	8018c66 <_svfiprintf_r+0x1c6>
 8018b14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018b16:	445a      	add	r2, fp
 8018b18:	9209      	str	r2, [sp, #36]	; 0x24
 8018b1a:	f89a 3000 	ldrb.w	r3, [sl]
 8018b1e:	2b00      	cmp	r3, #0
 8018b20:	f000 80a1 	beq.w	8018c66 <_svfiprintf_r+0x1c6>
 8018b24:	2300      	movs	r3, #0
 8018b26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018b2a:	f10a 0a01 	add.w	sl, sl, #1
 8018b2e:	9304      	str	r3, [sp, #16]
 8018b30:	9307      	str	r3, [sp, #28]
 8018b32:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018b36:	931a      	str	r3, [sp, #104]	; 0x68
 8018b38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018b3c:	4654      	mov	r4, sl
 8018b3e:	2205      	movs	r2, #5
 8018b40:	4851      	ldr	r0, [pc, #324]	; (8018c88 <_svfiprintf_r+0x1e8>)
 8018b42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018b46:	f7fe fcfa 	bl	801753e <memchr>
 8018b4a:	9a04      	ldr	r2, [sp, #16]
 8018b4c:	b9d8      	cbnz	r0, 8018b86 <_svfiprintf_r+0xe6>
 8018b4e:	06d0      	lsls	r0, r2, #27
 8018b50:	bf44      	itt	mi
 8018b52:	2320      	movmi	r3, #32
 8018b54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018b58:	0711      	lsls	r1, r2, #28
 8018b5a:	bf44      	itt	mi
 8018b5c:	232b      	movmi	r3, #43	; 0x2b
 8018b5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018b62:	f89a 3000 	ldrb.w	r3, [sl]
 8018b66:	2b2a      	cmp	r3, #42	; 0x2a
 8018b68:	d015      	beq.n	8018b96 <_svfiprintf_r+0xf6>
 8018b6a:	9a07      	ldr	r2, [sp, #28]
 8018b6c:	4654      	mov	r4, sl
 8018b6e:	2000      	movs	r0, #0
 8018b70:	f04f 0c0a 	mov.w	ip, #10
 8018b74:	4621      	mov	r1, r4
 8018b76:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018b7a:	3b30      	subs	r3, #48	; 0x30
 8018b7c:	2b09      	cmp	r3, #9
 8018b7e:	d94d      	bls.n	8018c1c <_svfiprintf_r+0x17c>
 8018b80:	b1b0      	cbz	r0, 8018bb0 <_svfiprintf_r+0x110>
 8018b82:	9207      	str	r2, [sp, #28]
 8018b84:	e014      	b.n	8018bb0 <_svfiprintf_r+0x110>
 8018b86:	eba0 0308 	sub.w	r3, r0, r8
 8018b8a:	46a2      	mov	sl, r4
 8018b8c:	fa09 f303 	lsl.w	r3, r9, r3
 8018b90:	4313      	orrs	r3, r2
 8018b92:	9304      	str	r3, [sp, #16]
 8018b94:	e7d2      	b.n	8018b3c <_svfiprintf_r+0x9c>
 8018b96:	9b03      	ldr	r3, [sp, #12]
 8018b98:	1d19      	adds	r1, r3, #4
 8018b9a:	681b      	ldr	r3, [r3, #0]
 8018b9c:	2b00      	cmp	r3, #0
 8018b9e:	9103      	str	r1, [sp, #12]
 8018ba0:	bfbb      	ittet	lt
 8018ba2:	425b      	neglt	r3, r3
 8018ba4:	f042 0202 	orrlt.w	r2, r2, #2
 8018ba8:	9307      	strge	r3, [sp, #28]
 8018baa:	9307      	strlt	r3, [sp, #28]
 8018bac:	bfb8      	it	lt
 8018bae:	9204      	strlt	r2, [sp, #16]
 8018bb0:	7823      	ldrb	r3, [r4, #0]
 8018bb2:	2b2e      	cmp	r3, #46	; 0x2e
 8018bb4:	d10c      	bne.n	8018bd0 <_svfiprintf_r+0x130>
 8018bb6:	7863      	ldrb	r3, [r4, #1]
 8018bb8:	2b2a      	cmp	r3, #42	; 0x2a
 8018bba:	d134      	bne.n	8018c26 <_svfiprintf_r+0x186>
 8018bbc:	9b03      	ldr	r3, [sp, #12]
 8018bbe:	3402      	adds	r4, #2
 8018bc0:	1d1a      	adds	r2, r3, #4
 8018bc2:	681b      	ldr	r3, [r3, #0]
 8018bc4:	2b00      	cmp	r3, #0
 8018bc6:	9203      	str	r2, [sp, #12]
 8018bc8:	bfb8      	it	lt
 8018bca:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8018bce:	9305      	str	r3, [sp, #20]
 8018bd0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8018c98 <_svfiprintf_r+0x1f8>
 8018bd4:	2203      	movs	r2, #3
 8018bd6:	7821      	ldrb	r1, [r4, #0]
 8018bd8:	4650      	mov	r0, sl
 8018bda:	f7fe fcb0 	bl	801753e <memchr>
 8018bde:	b138      	cbz	r0, 8018bf0 <_svfiprintf_r+0x150>
 8018be0:	eba0 000a 	sub.w	r0, r0, sl
 8018be4:	2240      	movs	r2, #64	; 0x40
 8018be6:	9b04      	ldr	r3, [sp, #16]
 8018be8:	3401      	adds	r4, #1
 8018bea:	4082      	lsls	r2, r0
 8018bec:	4313      	orrs	r3, r2
 8018bee:	9304      	str	r3, [sp, #16]
 8018bf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018bf4:	2206      	movs	r2, #6
 8018bf6:	4825      	ldr	r0, [pc, #148]	; (8018c8c <_svfiprintf_r+0x1ec>)
 8018bf8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018bfc:	f7fe fc9f 	bl	801753e <memchr>
 8018c00:	2800      	cmp	r0, #0
 8018c02:	d038      	beq.n	8018c76 <_svfiprintf_r+0x1d6>
 8018c04:	4b22      	ldr	r3, [pc, #136]	; (8018c90 <_svfiprintf_r+0x1f0>)
 8018c06:	bb1b      	cbnz	r3, 8018c50 <_svfiprintf_r+0x1b0>
 8018c08:	9b03      	ldr	r3, [sp, #12]
 8018c0a:	3307      	adds	r3, #7
 8018c0c:	f023 0307 	bic.w	r3, r3, #7
 8018c10:	3308      	adds	r3, #8
 8018c12:	9303      	str	r3, [sp, #12]
 8018c14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018c16:	4433      	add	r3, r6
 8018c18:	9309      	str	r3, [sp, #36]	; 0x24
 8018c1a:	e768      	b.n	8018aee <_svfiprintf_r+0x4e>
 8018c1c:	fb0c 3202 	mla	r2, ip, r2, r3
 8018c20:	460c      	mov	r4, r1
 8018c22:	2001      	movs	r0, #1
 8018c24:	e7a6      	b.n	8018b74 <_svfiprintf_r+0xd4>
 8018c26:	2300      	movs	r3, #0
 8018c28:	3401      	adds	r4, #1
 8018c2a:	f04f 0c0a 	mov.w	ip, #10
 8018c2e:	4619      	mov	r1, r3
 8018c30:	9305      	str	r3, [sp, #20]
 8018c32:	4620      	mov	r0, r4
 8018c34:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018c38:	3a30      	subs	r2, #48	; 0x30
 8018c3a:	2a09      	cmp	r2, #9
 8018c3c:	d903      	bls.n	8018c46 <_svfiprintf_r+0x1a6>
 8018c3e:	2b00      	cmp	r3, #0
 8018c40:	d0c6      	beq.n	8018bd0 <_svfiprintf_r+0x130>
 8018c42:	9105      	str	r1, [sp, #20]
 8018c44:	e7c4      	b.n	8018bd0 <_svfiprintf_r+0x130>
 8018c46:	fb0c 2101 	mla	r1, ip, r1, r2
 8018c4a:	4604      	mov	r4, r0
 8018c4c:	2301      	movs	r3, #1
 8018c4e:	e7f0      	b.n	8018c32 <_svfiprintf_r+0x192>
 8018c50:	ab03      	add	r3, sp, #12
 8018c52:	462a      	mov	r2, r5
 8018c54:	a904      	add	r1, sp, #16
 8018c56:	4638      	mov	r0, r7
 8018c58:	9300      	str	r3, [sp, #0]
 8018c5a:	4b0e      	ldr	r3, [pc, #56]	; (8018c94 <_svfiprintf_r+0x1f4>)
 8018c5c:	f7fc fb1c 	bl	8015298 <_printf_float>
 8018c60:	1c42      	adds	r2, r0, #1
 8018c62:	4606      	mov	r6, r0
 8018c64:	d1d6      	bne.n	8018c14 <_svfiprintf_r+0x174>
 8018c66:	89ab      	ldrh	r3, [r5, #12]
 8018c68:	065b      	lsls	r3, r3, #25
 8018c6a:	f53f af2d 	bmi.w	8018ac8 <_svfiprintf_r+0x28>
 8018c6e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018c70:	b01d      	add	sp, #116	; 0x74
 8018c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018c76:	ab03      	add	r3, sp, #12
 8018c78:	462a      	mov	r2, r5
 8018c7a:	a904      	add	r1, sp, #16
 8018c7c:	4638      	mov	r0, r7
 8018c7e:	9300      	str	r3, [sp, #0]
 8018c80:	4b04      	ldr	r3, [pc, #16]	; (8018c94 <_svfiprintf_r+0x1f4>)
 8018c82:	f7fc fe61 	bl	8015948 <_printf_i>
 8018c86:	e7eb      	b.n	8018c60 <_svfiprintf_r+0x1c0>
 8018c88:	0818df96 	.word	0x0818df96
 8018c8c:	0818dfa0 	.word	0x0818dfa0
 8018c90:	08015299 	.word	0x08015299
 8018c94:	080189eb 	.word	0x080189eb
 8018c98:	0818df9c 	.word	0x0818df9c

08018c9c <_sungetc_r>:
 8018c9c:	b538      	push	{r3, r4, r5, lr}
 8018c9e:	1c4b      	adds	r3, r1, #1
 8018ca0:	4614      	mov	r4, r2
 8018ca2:	d103      	bne.n	8018cac <_sungetc_r+0x10>
 8018ca4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8018ca8:	4628      	mov	r0, r5
 8018caa:	bd38      	pop	{r3, r4, r5, pc}
 8018cac:	8993      	ldrh	r3, [r2, #12]
 8018cae:	b2cd      	uxtb	r5, r1
 8018cb0:	f023 0320 	bic.w	r3, r3, #32
 8018cb4:	8193      	strh	r3, [r2, #12]
 8018cb6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018cb8:	6852      	ldr	r2, [r2, #4]
 8018cba:	b18b      	cbz	r3, 8018ce0 <_sungetc_r+0x44>
 8018cbc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8018cbe:	4293      	cmp	r3, r2
 8018cc0:	dd08      	ble.n	8018cd4 <_sungetc_r+0x38>
 8018cc2:	6823      	ldr	r3, [r4, #0]
 8018cc4:	1e5a      	subs	r2, r3, #1
 8018cc6:	6022      	str	r2, [r4, #0]
 8018cc8:	f803 5c01 	strb.w	r5, [r3, #-1]
 8018ccc:	6863      	ldr	r3, [r4, #4]
 8018cce:	3301      	adds	r3, #1
 8018cd0:	6063      	str	r3, [r4, #4]
 8018cd2:	e7e9      	b.n	8018ca8 <_sungetc_r+0xc>
 8018cd4:	4621      	mov	r1, r4
 8018cd6:	f001 f9f4 	bl	801a0c2 <__submore>
 8018cda:	2800      	cmp	r0, #0
 8018cdc:	d0f1      	beq.n	8018cc2 <_sungetc_r+0x26>
 8018cde:	e7e1      	b.n	8018ca4 <_sungetc_r+0x8>
 8018ce0:	6921      	ldr	r1, [r4, #16]
 8018ce2:	6823      	ldr	r3, [r4, #0]
 8018ce4:	b151      	cbz	r1, 8018cfc <_sungetc_r+0x60>
 8018ce6:	4299      	cmp	r1, r3
 8018ce8:	d208      	bcs.n	8018cfc <_sungetc_r+0x60>
 8018cea:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8018cee:	42a9      	cmp	r1, r5
 8018cf0:	d104      	bne.n	8018cfc <_sungetc_r+0x60>
 8018cf2:	3b01      	subs	r3, #1
 8018cf4:	3201      	adds	r2, #1
 8018cf6:	6023      	str	r3, [r4, #0]
 8018cf8:	6062      	str	r2, [r4, #4]
 8018cfa:	e7d5      	b.n	8018ca8 <_sungetc_r+0xc>
 8018cfc:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8018d00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018d04:	6363      	str	r3, [r4, #52]	; 0x34
 8018d06:	2303      	movs	r3, #3
 8018d08:	63a3      	str	r3, [r4, #56]	; 0x38
 8018d0a:	4623      	mov	r3, r4
 8018d0c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8018d10:	6023      	str	r3, [r4, #0]
 8018d12:	2301      	movs	r3, #1
 8018d14:	e7dc      	b.n	8018cd0 <_sungetc_r+0x34>

08018d16 <__ssrefill_r>:
 8018d16:	b510      	push	{r4, lr}
 8018d18:	460c      	mov	r4, r1
 8018d1a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8018d1c:	b169      	cbz	r1, 8018d3a <__ssrefill_r+0x24>
 8018d1e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018d22:	4299      	cmp	r1, r3
 8018d24:	d001      	beq.n	8018d2a <__ssrefill_r+0x14>
 8018d26:	f7ff fabf 	bl	80182a8 <_free_r>
 8018d2a:	2000      	movs	r0, #0
 8018d2c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8018d2e:	6360      	str	r0, [r4, #52]	; 0x34
 8018d30:	6063      	str	r3, [r4, #4]
 8018d32:	b113      	cbz	r3, 8018d3a <__ssrefill_r+0x24>
 8018d34:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8018d36:	6023      	str	r3, [r4, #0]
 8018d38:	bd10      	pop	{r4, pc}
 8018d3a:	6923      	ldr	r3, [r4, #16]
 8018d3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018d40:	6023      	str	r3, [r4, #0]
 8018d42:	2300      	movs	r3, #0
 8018d44:	6063      	str	r3, [r4, #4]
 8018d46:	89a3      	ldrh	r3, [r4, #12]
 8018d48:	f043 0320 	orr.w	r3, r3, #32
 8018d4c:	81a3      	strh	r3, [r4, #12]
 8018d4e:	e7f3      	b.n	8018d38 <__ssrefill_r+0x22>

08018d50 <__ssvfiscanf_r>:
 8018d50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018d54:	460c      	mov	r4, r1
 8018d56:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8018d5a:	2100      	movs	r1, #0
 8018d5c:	4606      	mov	r6, r0
 8018d5e:	f10d 0804 	add.w	r8, sp, #4
 8018d62:	4fa6      	ldr	r7, [pc, #664]	; (8018ffc <__ssvfiscanf_r+0x2ac>)
 8018d64:	f8df 92a0 	ldr.w	r9, [pc, #672]	; 8019008 <__ssvfiscanf_r+0x2b8>
 8018d68:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8018d6c:	9300      	str	r3, [sp, #0]
 8018d6e:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8018d72:	49a3      	ldr	r1, [pc, #652]	; (8019000 <__ssvfiscanf_r+0x2b0>)
 8018d74:	91a0      	str	r1, [sp, #640]	; 0x280
 8018d76:	49a3      	ldr	r1, [pc, #652]	; (8019004 <__ssvfiscanf_r+0x2b4>)
 8018d78:	91a1      	str	r1, [sp, #644]	; 0x284
 8018d7a:	7813      	ldrb	r3, [r2, #0]
 8018d7c:	2b00      	cmp	r3, #0
 8018d7e:	f000 815a 	beq.w	8019036 <__ssvfiscanf_r+0x2e6>
 8018d82:	5cf9      	ldrb	r1, [r7, r3]
 8018d84:	1c55      	adds	r5, r2, #1
 8018d86:	f011 0108 	ands.w	r1, r1, #8
 8018d8a:	d019      	beq.n	8018dc0 <__ssvfiscanf_r+0x70>
 8018d8c:	6863      	ldr	r3, [r4, #4]
 8018d8e:	2b00      	cmp	r3, #0
 8018d90:	dd0f      	ble.n	8018db2 <__ssvfiscanf_r+0x62>
 8018d92:	6823      	ldr	r3, [r4, #0]
 8018d94:	781a      	ldrb	r2, [r3, #0]
 8018d96:	5cba      	ldrb	r2, [r7, r2]
 8018d98:	0712      	lsls	r2, r2, #28
 8018d9a:	d401      	bmi.n	8018da0 <__ssvfiscanf_r+0x50>
 8018d9c:	462a      	mov	r2, r5
 8018d9e:	e7ec      	b.n	8018d7a <__ssvfiscanf_r+0x2a>
 8018da0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8018da2:	3301      	adds	r3, #1
 8018da4:	3201      	adds	r2, #1
 8018da6:	6023      	str	r3, [r4, #0]
 8018da8:	9245      	str	r2, [sp, #276]	; 0x114
 8018daa:	6862      	ldr	r2, [r4, #4]
 8018dac:	3a01      	subs	r2, #1
 8018dae:	6062      	str	r2, [r4, #4]
 8018db0:	e7ec      	b.n	8018d8c <__ssvfiscanf_r+0x3c>
 8018db2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8018db4:	4621      	mov	r1, r4
 8018db6:	4630      	mov	r0, r6
 8018db8:	4798      	blx	r3
 8018dba:	2800      	cmp	r0, #0
 8018dbc:	d0e9      	beq.n	8018d92 <__ssvfiscanf_r+0x42>
 8018dbe:	e7ed      	b.n	8018d9c <__ssvfiscanf_r+0x4c>
 8018dc0:	2b25      	cmp	r3, #37	; 0x25
 8018dc2:	d012      	beq.n	8018dea <__ssvfiscanf_r+0x9a>
 8018dc4:	469a      	mov	sl, r3
 8018dc6:	6863      	ldr	r3, [r4, #4]
 8018dc8:	2b00      	cmp	r3, #0
 8018dca:	f340 8092 	ble.w	8018ef2 <__ssvfiscanf_r+0x1a2>
 8018dce:	6822      	ldr	r2, [r4, #0]
 8018dd0:	7813      	ldrb	r3, [r2, #0]
 8018dd2:	4553      	cmp	r3, sl
 8018dd4:	f040 812f 	bne.w	8019036 <__ssvfiscanf_r+0x2e6>
 8018dd8:	6863      	ldr	r3, [r4, #4]
 8018dda:	3201      	adds	r2, #1
 8018ddc:	3b01      	subs	r3, #1
 8018dde:	6022      	str	r2, [r4, #0]
 8018de0:	6063      	str	r3, [r4, #4]
 8018de2:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8018de4:	3301      	adds	r3, #1
 8018de6:	9345      	str	r3, [sp, #276]	; 0x114
 8018de8:	e7d8      	b.n	8018d9c <__ssvfiscanf_r+0x4c>
 8018dea:	9141      	str	r1, [sp, #260]	; 0x104
 8018dec:	9143      	str	r1, [sp, #268]	; 0x10c
 8018dee:	7853      	ldrb	r3, [r2, #1]
 8018df0:	2b2a      	cmp	r3, #42	; 0x2a
 8018df2:	bf04      	itt	eq
 8018df4:	2310      	moveq	r3, #16
 8018df6:	1c95      	addeq	r5, r2, #2
 8018df8:	f04f 020a 	mov.w	r2, #10
 8018dfc:	bf08      	it	eq
 8018dfe:	9341      	streq	r3, [sp, #260]	; 0x104
 8018e00:	46aa      	mov	sl, r5
 8018e02:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8018e06:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8018e0a:	2b09      	cmp	r3, #9
 8018e0c:	d91c      	bls.n	8018e48 <__ssvfiscanf_r+0xf8>
 8018e0e:	2203      	movs	r2, #3
 8018e10:	487d      	ldr	r0, [pc, #500]	; (8019008 <__ssvfiscanf_r+0x2b8>)
 8018e12:	f7fe fb94 	bl	801753e <memchr>
 8018e16:	b138      	cbz	r0, 8018e28 <__ssvfiscanf_r+0xd8>
 8018e18:	eba0 0009 	sub.w	r0, r0, r9
 8018e1c:	2301      	movs	r3, #1
 8018e1e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8018e20:	4655      	mov	r5, sl
 8018e22:	4083      	lsls	r3, r0
 8018e24:	4313      	orrs	r3, r2
 8018e26:	9341      	str	r3, [sp, #260]	; 0x104
 8018e28:	f815 3b01 	ldrb.w	r3, [r5], #1
 8018e2c:	2b78      	cmp	r3, #120	; 0x78
 8018e2e:	d806      	bhi.n	8018e3e <__ssvfiscanf_r+0xee>
 8018e30:	2b57      	cmp	r3, #87	; 0x57
 8018e32:	d810      	bhi.n	8018e56 <__ssvfiscanf_r+0x106>
 8018e34:	2b25      	cmp	r3, #37	; 0x25
 8018e36:	d0c5      	beq.n	8018dc4 <__ssvfiscanf_r+0x74>
 8018e38:	d856      	bhi.n	8018ee8 <__ssvfiscanf_r+0x198>
 8018e3a:	2b00      	cmp	r3, #0
 8018e3c:	d064      	beq.n	8018f08 <__ssvfiscanf_r+0x1b8>
 8018e3e:	2303      	movs	r3, #3
 8018e40:	9347      	str	r3, [sp, #284]	; 0x11c
 8018e42:	230a      	movs	r3, #10
 8018e44:	9342      	str	r3, [sp, #264]	; 0x108
 8018e46:	e075      	b.n	8018f34 <__ssvfiscanf_r+0x1e4>
 8018e48:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8018e4a:	4655      	mov	r5, sl
 8018e4c:	fb02 1103 	mla	r1, r2, r3, r1
 8018e50:	3930      	subs	r1, #48	; 0x30
 8018e52:	9143      	str	r1, [sp, #268]	; 0x10c
 8018e54:	e7d4      	b.n	8018e00 <__ssvfiscanf_r+0xb0>
 8018e56:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8018e5a:	2a20      	cmp	r2, #32
 8018e5c:	d8ef      	bhi.n	8018e3e <__ssvfiscanf_r+0xee>
 8018e5e:	a101      	add	r1, pc, #4	; (adr r1, 8018e64 <__ssvfiscanf_r+0x114>)
 8018e60:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8018e64:	08018f17 	.word	0x08018f17
 8018e68:	08018e3f 	.word	0x08018e3f
 8018e6c:	08018e3f 	.word	0x08018e3f
 8018e70:	08018f75 	.word	0x08018f75
 8018e74:	08018e3f 	.word	0x08018e3f
 8018e78:	08018e3f 	.word	0x08018e3f
 8018e7c:	08018e3f 	.word	0x08018e3f
 8018e80:	08018e3f 	.word	0x08018e3f
 8018e84:	08018e3f 	.word	0x08018e3f
 8018e88:	08018e3f 	.word	0x08018e3f
 8018e8c:	08018e3f 	.word	0x08018e3f
 8018e90:	08018f8b 	.word	0x08018f8b
 8018e94:	08018f71 	.word	0x08018f71
 8018e98:	08018eef 	.word	0x08018eef
 8018e9c:	08018eef 	.word	0x08018eef
 8018ea0:	08018eef 	.word	0x08018eef
 8018ea4:	08018e3f 	.word	0x08018e3f
 8018ea8:	08018f2d 	.word	0x08018f2d
 8018eac:	08018e3f 	.word	0x08018e3f
 8018eb0:	08018e3f 	.word	0x08018e3f
 8018eb4:	08018e3f 	.word	0x08018e3f
 8018eb8:	08018e3f 	.word	0x08018e3f
 8018ebc:	08018f9b 	.word	0x08018f9b
 8018ec0:	08018f69 	.word	0x08018f69
 8018ec4:	08018f0f 	.word	0x08018f0f
 8018ec8:	08018e3f 	.word	0x08018e3f
 8018ecc:	08018e3f 	.word	0x08018e3f
 8018ed0:	08018f97 	.word	0x08018f97
 8018ed4:	08018e3f 	.word	0x08018e3f
 8018ed8:	08018f71 	.word	0x08018f71
 8018edc:	08018e3f 	.word	0x08018e3f
 8018ee0:	08018e3f 	.word	0x08018e3f
 8018ee4:	08018f17 	.word	0x08018f17
 8018ee8:	3b45      	subs	r3, #69	; 0x45
 8018eea:	2b02      	cmp	r3, #2
 8018eec:	d8a7      	bhi.n	8018e3e <__ssvfiscanf_r+0xee>
 8018eee:	2305      	movs	r3, #5
 8018ef0:	e01f      	b.n	8018f32 <__ssvfiscanf_r+0x1e2>
 8018ef2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8018ef4:	4621      	mov	r1, r4
 8018ef6:	4630      	mov	r0, r6
 8018ef8:	4798      	blx	r3
 8018efa:	2800      	cmp	r0, #0
 8018efc:	f43f af67 	beq.w	8018dce <__ssvfiscanf_r+0x7e>
 8018f00:	9844      	ldr	r0, [sp, #272]	; 0x110
 8018f02:	2800      	cmp	r0, #0
 8018f04:	f040 808d 	bne.w	8019022 <__ssvfiscanf_r+0x2d2>
 8018f08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018f0c:	e08f      	b.n	801902e <__ssvfiscanf_r+0x2de>
 8018f0e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8018f10:	f042 0220 	orr.w	r2, r2, #32
 8018f14:	9241      	str	r2, [sp, #260]	; 0x104
 8018f16:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8018f18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8018f1c:	9241      	str	r2, [sp, #260]	; 0x104
 8018f1e:	2210      	movs	r2, #16
 8018f20:	2b6f      	cmp	r3, #111	; 0x6f
 8018f22:	9242      	str	r2, [sp, #264]	; 0x108
 8018f24:	bf34      	ite	cc
 8018f26:	2303      	movcc	r3, #3
 8018f28:	2304      	movcs	r3, #4
 8018f2a:	e002      	b.n	8018f32 <__ssvfiscanf_r+0x1e2>
 8018f2c:	2300      	movs	r3, #0
 8018f2e:	9342      	str	r3, [sp, #264]	; 0x108
 8018f30:	2303      	movs	r3, #3
 8018f32:	9347      	str	r3, [sp, #284]	; 0x11c
 8018f34:	6863      	ldr	r3, [r4, #4]
 8018f36:	2b00      	cmp	r3, #0
 8018f38:	dd3e      	ble.n	8018fb8 <__ssvfiscanf_r+0x268>
 8018f3a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8018f3c:	0659      	lsls	r1, r3, #25
 8018f3e:	d404      	bmi.n	8018f4a <__ssvfiscanf_r+0x1fa>
 8018f40:	6823      	ldr	r3, [r4, #0]
 8018f42:	781a      	ldrb	r2, [r3, #0]
 8018f44:	5cba      	ldrb	r2, [r7, r2]
 8018f46:	0712      	lsls	r2, r2, #28
 8018f48:	d43d      	bmi.n	8018fc6 <__ssvfiscanf_r+0x276>
 8018f4a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8018f4c:	2b02      	cmp	r3, #2
 8018f4e:	dc4c      	bgt.n	8018fea <__ssvfiscanf_r+0x29a>
 8018f50:	466b      	mov	r3, sp
 8018f52:	4622      	mov	r2, r4
 8018f54:	a941      	add	r1, sp, #260	; 0x104
 8018f56:	4630      	mov	r0, r6
 8018f58:	f000 f9c8 	bl	80192ec <_scanf_chars>
 8018f5c:	2801      	cmp	r0, #1
 8018f5e:	d06a      	beq.n	8019036 <__ssvfiscanf_r+0x2e6>
 8018f60:	2802      	cmp	r0, #2
 8018f62:	f47f af1b 	bne.w	8018d9c <__ssvfiscanf_r+0x4c>
 8018f66:	e7cb      	b.n	8018f00 <__ssvfiscanf_r+0x1b0>
 8018f68:	2308      	movs	r3, #8
 8018f6a:	9342      	str	r3, [sp, #264]	; 0x108
 8018f6c:	2304      	movs	r3, #4
 8018f6e:	e7e0      	b.n	8018f32 <__ssvfiscanf_r+0x1e2>
 8018f70:	220a      	movs	r2, #10
 8018f72:	e7d5      	b.n	8018f20 <__ssvfiscanf_r+0x1d0>
 8018f74:	4629      	mov	r1, r5
 8018f76:	4640      	mov	r0, r8
 8018f78:	f000 fb04 	bl	8019584 <__sccl>
 8018f7c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8018f7e:	4605      	mov	r5, r0
 8018f80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018f84:	9341      	str	r3, [sp, #260]	; 0x104
 8018f86:	2301      	movs	r3, #1
 8018f88:	e7d3      	b.n	8018f32 <__ssvfiscanf_r+0x1e2>
 8018f8a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8018f8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018f90:	9341      	str	r3, [sp, #260]	; 0x104
 8018f92:	2300      	movs	r3, #0
 8018f94:	e7cd      	b.n	8018f32 <__ssvfiscanf_r+0x1e2>
 8018f96:	2302      	movs	r3, #2
 8018f98:	e7cb      	b.n	8018f32 <__ssvfiscanf_r+0x1e2>
 8018f9a:	9841      	ldr	r0, [sp, #260]	; 0x104
 8018f9c:	06c3      	lsls	r3, r0, #27
 8018f9e:	f53f aefd 	bmi.w	8018d9c <__ssvfiscanf_r+0x4c>
 8018fa2:	9b00      	ldr	r3, [sp, #0]
 8018fa4:	07c0      	lsls	r0, r0, #31
 8018fa6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8018fa8:	f103 0104 	add.w	r1, r3, #4
 8018fac:	9100      	str	r1, [sp, #0]
 8018fae:	681b      	ldr	r3, [r3, #0]
 8018fb0:	bf4c      	ite	mi
 8018fb2:	801a      	strhmi	r2, [r3, #0]
 8018fb4:	601a      	strpl	r2, [r3, #0]
 8018fb6:	e6f1      	b.n	8018d9c <__ssvfiscanf_r+0x4c>
 8018fb8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8018fba:	4621      	mov	r1, r4
 8018fbc:	4630      	mov	r0, r6
 8018fbe:	4798      	blx	r3
 8018fc0:	2800      	cmp	r0, #0
 8018fc2:	d0ba      	beq.n	8018f3a <__ssvfiscanf_r+0x1ea>
 8018fc4:	e79c      	b.n	8018f00 <__ssvfiscanf_r+0x1b0>
 8018fc6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8018fc8:	3201      	adds	r2, #1
 8018fca:	9245      	str	r2, [sp, #276]	; 0x114
 8018fcc:	6862      	ldr	r2, [r4, #4]
 8018fce:	3a01      	subs	r2, #1
 8018fd0:	2a00      	cmp	r2, #0
 8018fd2:	6062      	str	r2, [r4, #4]
 8018fd4:	dd02      	ble.n	8018fdc <__ssvfiscanf_r+0x28c>
 8018fd6:	3301      	adds	r3, #1
 8018fd8:	6023      	str	r3, [r4, #0]
 8018fda:	e7b1      	b.n	8018f40 <__ssvfiscanf_r+0x1f0>
 8018fdc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8018fde:	4621      	mov	r1, r4
 8018fe0:	4630      	mov	r0, r6
 8018fe2:	4798      	blx	r3
 8018fe4:	2800      	cmp	r0, #0
 8018fe6:	d0ab      	beq.n	8018f40 <__ssvfiscanf_r+0x1f0>
 8018fe8:	e78a      	b.n	8018f00 <__ssvfiscanf_r+0x1b0>
 8018fea:	2b04      	cmp	r3, #4
 8018fec:	dc0e      	bgt.n	801900c <__ssvfiscanf_r+0x2bc>
 8018fee:	466b      	mov	r3, sp
 8018ff0:	4622      	mov	r2, r4
 8018ff2:	a941      	add	r1, sp, #260	; 0x104
 8018ff4:	4630      	mov	r0, r6
 8018ff6:	f000 f9d3 	bl	80193a0 <_scanf_i>
 8018ffa:	e7af      	b.n	8018f5c <__ssvfiscanf_r+0x20c>
 8018ffc:	0818dda9 	.word	0x0818dda9
 8019000:	08018c9d 	.word	0x08018c9d
 8019004:	08018d17 	.word	0x08018d17
 8019008:	0818df9c 	.word	0x0818df9c
 801900c:	4b0b      	ldr	r3, [pc, #44]	; (801903c <__ssvfiscanf_r+0x2ec>)
 801900e:	2b00      	cmp	r3, #0
 8019010:	f43f aec4 	beq.w	8018d9c <__ssvfiscanf_r+0x4c>
 8019014:	466b      	mov	r3, sp
 8019016:	4622      	mov	r2, r4
 8019018:	a941      	add	r1, sp, #260	; 0x104
 801901a:	4630      	mov	r0, r6
 801901c:	f7fc fdb4 	bl	8015b88 <_scanf_float>
 8019020:	e79c      	b.n	8018f5c <__ssvfiscanf_r+0x20c>
 8019022:	89a3      	ldrh	r3, [r4, #12]
 8019024:	f013 0f40 	tst.w	r3, #64	; 0x40
 8019028:	bf18      	it	ne
 801902a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 801902e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8019032:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019036:	9844      	ldr	r0, [sp, #272]	; 0x110
 8019038:	e7f9      	b.n	801902e <__ssvfiscanf_r+0x2de>
 801903a:	bf00      	nop
 801903c:	08015b89 	.word	0x08015b89

08019040 <__sfputc_r>:
 8019040:	6893      	ldr	r3, [r2, #8]
 8019042:	3b01      	subs	r3, #1
 8019044:	2b00      	cmp	r3, #0
 8019046:	6093      	str	r3, [r2, #8]
 8019048:	b410      	push	{r4}
 801904a:	da08      	bge.n	801905e <__sfputc_r+0x1e>
 801904c:	6994      	ldr	r4, [r2, #24]
 801904e:	42a3      	cmp	r3, r4
 8019050:	db01      	blt.n	8019056 <__sfputc_r+0x16>
 8019052:	290a      	cmp	r1, #10
 8019054:	d103      	bne.n	801905e <__sfputc_r+0x1e>
 8019056:	f85d 4b04 	ldr.w	r4, [sp], #4
 801905a:	f001 b90d 	b.w	801a278 <__swbuf_r>
 801905e:	6813      	ldr	r3, [r2, #0]
 8019060:	1c58      	adds	r0, r3, #1
 8019062:	6010      	str	r0, [r2, #0]
 8019064:	4608      	mov	r0, r1
 8019066:	7019      	strb	r1, [r3, #0]
 8019068:	f85d 4b04 	ldr.w	r4, [sp], #4
 801906c:	4770      	bx	lr

0801906e <__sfputs_r>:
 801906e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019070:	4606      	mov	r6, r0
 8019072:	460f      	mov	r7, r1
 8019074:	4614      	mov	r4, r2
 8019076:	18d5      	adds	r5, r2, r3
 8019078:	42ac      	cmp	r4, r5
 801907a:	d101      	bne.n	8019080 <__sfputs_r+0x12>
 801907c:	2000      	movs	r0, #0
 801907e:	e007      	b.n	8019090 <__sfputs_r+0x22>
 8019080:	463a      	mov	r2, r7
 8019082:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019086:	4630      	mov	r0, r6
 8019088:	f7ff ffda 	bl	8019040 <__sfputc_r>
 801908c:	1c43      	adds	r3, r0, #1
 801908e:	d1f3      	bne.n	8019078 <__sfputs_r+0xa>
 8019090:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019094 <_vfiprintf_r>:
 8019094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019098:	460d      	mov	r5, r1
 801909a:	b09d      	sub	sp, #116	; 0x74
 801909c:	4614      	mov	r4, r2
 801909e:	4698      	mov	r8, r3
 80190a0:	4606      	mov	r6, r0
 80190a2:	b118      	cbz	r0, 80190ac <_vfiprintf_r+0x18>
 80190a4:	6a03      	ldr	r3, [r0, #32]
 80190a6:	b90b      	cbnz	r3, 80190ac <_vfiprintf_r+0x18>
 80190a8:	f7fd f992 	bl	80163d0 <__sinit>
 80190ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80190ae:	07d9      	lsls	r1, r3, #31
 80190b0:	d405      	bmi.n	80190be <_vfiprintf_r+0x2a>
 80190b2:	89ab      	ldrh	r3, [r5, #12]
 80190b4:	059a      	lsls	r2, r3, #22
 80190b6:	d402      	bmi.n	80190be <_vfiprintf_r+0x2a>
 80190b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80190ba:	f7fe fa3e 	bl	801753a <__retarget_lock_acquire_recursive>
 80190be:	89ab      	ldrh	r3, [r5, #12]
 80190c0:	071b      	lsls	r3, r3, #28
 80190c2:	d501      	bpl.n	80190c8 <_vfiprintf_r+0x34>
 80190c4:	692b      	ldr	r3, [r5, #16]
 80190c6:	b99b      	cbnz	r3, 80190f0 <_vfiprintf_r+0x5c>
 80190c8:	4629      	mov	r1, r5
 80190ca:	4630      	mov	r0, r6
 80190cc:	f001 f912 	bl	801a2f4 <__swsetup_r>
 80190d0:	b170      	cbz	r0, 80190f0 <_vfiprintf_r+0x5c>
 80190d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80190d4:	07dc      	lsls	r4, r3, #31
 80190d6:	d504      	bpl.n	80190e2 <_vfiprintf_r+0x4e>
 80190d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80190dc:	b01d      	add	sp, #116	; 0x74
 80190de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80190e2:	89ab      	ldrh	r3, [r5, #12]
 80190e4:	0598      	lsls	r0, r3, #22
 80190e6:	d4f7      	bmi.n	80190d8 <_vfiprintf_r+0x44>
 80190e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80190ea:	f7fe fa27 	bl	801753c <__retarget_lock_release_recursive>
 80190ee:	e7f3      	b.n	80190d8 <_vfiprintf_r+0x44>
 80190f0:	2300      	movs	r3, #0
 80190f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80190f6:	f04f 0901 	mov.w	r9, #1
 80190fa:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 80192b4 <_vfiprintf_r+0x220>
 80190fe:	9309      	str	r3, [sp, #36]	; 0x24
 8019100:	2320      	movs	r3, #32
 8019102:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019106:	2330      	movs	r3, #48	; 0x30
 8019108:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801910c:	4623      	mov	r3, r4
 801910e:	469a      	mov	sl, r3
 8019110:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019114:	b10a      	cbz	r2, 801911a <_vfiprintf_r+0x86>
 8019116:	2a25      	cmp	r2, #37	; 0x25
 8019118:	d1f9      	bne.n	801910e <_vfiprintf_r+0x7a>
 801911a:	ebba 0b04 	subs.w	fp, sl, r4
 801911e:	d00b      	beq.n	8019138 <_vfiprintf_r+0xa4>
 8019120:	465b      	mov	r3, fp
 8019122:	4622      	mov	r2, r4
 8019124:	4629      	mov	r1, r5
 8019126:	4630      	mov	r0, r6
 8019128:	f7ff ffa1 	bl	801906e <__sfputs_r>
 801912c:	3001      	adds	r0, #1
 801912e:	f000 80a9 	beq.w	8019284 <_vfiprintf_r+0x1f0>
 8019132:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019134:	445a      	add	r2, fp
 8019136:	9209      	str	r2, [sp, #36]	; 0x24
 8019138:	f89a 3000 	ldrb.w	r3, [sl]
 801913c:	2b00      	cmp	r3, #0
 801913e:	f000 80a1 	beq.w	8019284 <_vfiprintf_r+0x1f0>
 8019142:	2300      	movs	r3, #0
 8019144:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019148:	f10a 0a01 	add.w	sl, sl, #1
 801914c:	9304      	str	r3, [sp, #16]
 801914e:	9307      	str	r3, [sp, #28]
 8019150:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019154:	931a      	str	r3, [sp, #104]	; 0x68
 8019156:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801915a:	4654      	mov	r4, sl
 801915c:	2205      	movs	r2, #5
 801915e:	4855      	ldr	r0, [pc, #340]	; (80192b4 <_vfiprintf_r+0x220>)
 8019160:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019164:	f7fe f9eb 	bl	801753e <memchr>
 8019168:	9a04      	ldr	r2, [sp, #16]
 801916a:	b9d8      	cbnz	r0, 80191a4 <_vfiprintf_r+0x110>
 801916c:	06d1      	lsls	r1, r2, #27
 801916e:	bf44      	itt	mi
 8019170:	2320      	movmi	r3, #32
 8019172:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019176:	0713      	lsls	r3, r2, #28
 8019178:	bf44      	itt	mi
 801917a:	232b      	movmi	r3, #43	; 0x2b
 801917c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019180:	f89a 3000 	ldrb.w	r3, [sl]
 8019184:	2b2a      	cmp	r3, #42	; 0x2a
 8019186:	d015      	beq.n	80191b4 <_vfiprintf_r+0x120>
 8019188:	9a07      	ldr	r2, [sp, #28]
 801918a:	4654      	mov	r4, sl
 801918c:	2000      	movs	r0, #0
 801918e:	f04f 0c0a 	mov.w	ip, #10
 8019192:	4621      	mov	r1, r4
 8019194:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019198:	3b30      	subs	r3, #48	; 0x30
 801919a:	2b09      	cmp	r3, #9
 801919c:	d94d      	bls.n	801923a <_vfiprintf_r+0x1a6>
 801919e:	b1b0      	cbz	r0, 80191ce <_vfiprintf_r+0x13a>
 80191a0:	9207      	str	r2, [sp, #28]
 80191a2:	e014      	b.n	80191ce <_vfiprintf_r+0x13a>
 80191a4:	eba0 0308 	sub.w	r3, r0, r8
 80191a8:	46a2      	mov	sl, r4
 80191aa:	fa09 f303 	lsl.w	r3, r9, r3
 80191ae:	4313      	orrs	r3, r2
 80191b0:	9304      	str	r3, [sp, #16]
 80191b2:	e7d2      	b.n	801915a <_vfiprintf_r+0xc6>
 80191b4:	9b03      	ldr	r3, [sp, #12]
 80191b6:	1d19      	adds	r1, r3, #4
 80191b8:	681b      	ldr	r3, [r3, #0]
 80191ba:	2b00      	cmp	r3, #0
 80191bc:	9103      	str	r1, [sp, #12]
 80191be:	bfbb      	ittet	lt
 80191c0:	425b      	neglt	r3, r3
 80191c2:	f042 0202 	orrlt.w	r2, r2, #2
 80191c6:	9307      	strge	r3, [sp, #28]
 80191c8:	9307      	strlt	r3, [sp, #28]
 80191ca:	bfb8      	it	lt
 80191cc:	9204      	strlt	r2, [sp, #16]
 80191ce:	7823      	ldrb	r3, [r4, #0]
 80191d0:	2b2e      	cmp	r3, #46	; 0x2e
 80191d2:	d10c      	bne.n	80191ee <_vfiprintf_r+0x15a>
 80191d4:	7863      	ldrb	r3, [r4, #1]
 80191d6:	2b2a      	cmp	r3, #42	; 0x2a
 80191d8:	d134      	bne.n	8019244 <_vfiprintf_r+0x1b0>
 80191da:	9b03      	ldr	r3, [sp, #12]
 80191dc:	3402      	adds	r4, #2
 80191de:	1d1a      	adds	r2, r3, #4
 80191e0:	681b      	ldr	r3, [r3, #0]
 80191e2:	2b00      	cmp	r3, #0
 80191e4:	9203      	str	r2, [sp, #12]
 80191e6:	bfb8      	it	lt
 80191e8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80191ec:	9305      	str	r3, [sp, #20]
 80191ee:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80192c4 <_vfiprintf_r+0x230>
 80191f2:	2203      	movs	r2, #3
 80191f4:	7821      	ldrb	r1, [r4, #0]
 80191f6:	4650      	mov	r0, sl
 80191f8:	f7fe f9a1 	bl	801753e <memchr>
 80191fc:	b138      	cbz	r0, 801920e <_vfiprintf_r+0x17a>
 80191fe:	eba0 000a 	sub.w	r0, r0, sl
 8019202:	2240      	movs	r2, #64	; 0x40
 8019204:	9b04      	ldr	r3, [sp, #16]
 8019206:	3401      	adds	r4, #1
 8019208:	4082      	lsls	r2, r0
 801920a:	4313      	orrs	r3, r2
 801920c:	9304      	str	r3, [sp, #16]
 801920e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019212:	2206      	movs	r2, #6
 8019214:	4828      	ldr	r0, [pc, #160]	; (80192b8 <_vfiprintf_r+0x224>)
 8019216:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801921a:	f7fe f990 	bl	801753e <memchr>
 801921e:	2800      	cmp	r0, #0
 8019220:	d03f      	beq.n	80192a2 <_vfiprintf_r+0x20e>
 8019222:	4b26      	ldr	r3, [pc, #152]	; (80192bc <_vfiprintf_r+0x228>)
 8019224:	bb1b      	cbnz	r3, 801926e <_vfiprintf_r+0x1da>
 8019226:	9b03      	ldr	r3, [sp, #12]
 8019228:	3307      	adds	r3, #7
 801922a:	f023 0307 	bic.w	r3, r3, #7
 801922e:	3308      	adds	r3, #8
 8019230:	9303      	str	r3, [sp, #12]
 8019232:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019234:	443b      	add	r3, r7
 8019236:	9309      	str	r3, [sp, #36]	; 0x24
 8019238:	e768      	b.n	801910c <_vfiprintf_r+0x78>
 801923a:	fb0c 3202 	mla	r2, ip, r2, r3
 801923e:	460c      	mov	r4, r1
 8019240:	2001      	movs	r0, #1
 8019242:	e7a6      	b.n	8019192 <_vfiprintf_r+0xfe>
 8019244:	2300      	movs	r3, #0
 8019246:	3401      	adds	r4, #1
 8019248:	f04f 0c0a 	mov.w	ip, #10
 801924c:	4619      	mov	r1, r3
 801924e:	9305      	str	r3, [sp, #20]
 8019250:	4620      	mov	r0, r4
 8019252:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019256:	3a30      	subs	r2, #48	; 0x30
 8019258:	2a09      	cmp	r2, #9
 801925a:	d903      	bls.n	8019264 <_vfiprintf_r+0x1d0>
 801925c:	2b00      	cmp	r3, #0
 801925e:	d0c6      	beq.n	80191ee <_vfiprintf_r+0x15a>
 8019260:	9105      	str	r1, [sp, #20]
 8019262:	e7c4      	b.n	80191ee <_vfiprintf_r+0x15a>
 8019264:	fb0c 2101 	mla	r1, ip, r1, r2
 8019268:	4604      	mov	r4, r0
 801926a:	2301      	movs	r3, #1
 801926c:	e7f0      	b.n	8019250 <_vfiprintf_r+0x1bc>
 801926e:	ab03      	add	r3, sp, #12
 8019270:	462a      	mov	r2, r5
 8019272:	a904      	add	r1, sp, #16
 8019274:	4630      	mov	r0, r6
 8019276:	9300      	str	r3, [sp, #0]
 8019278:	4b11      	ldr	r3, [pc, #68]	; (80192c0 <_vfiprintf_r+0x22c>)
 801927a:	f7fc f80d 	bl	8015298 <_printf_float>
 801927e:	4607      	mov	r7, r0
 8019280:	1c78      	adds	r0, r7, #1
 8019282:	d1d6      	bne.n	8019232 <_vfiprintf_r+0x19e>
 8019284:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019286:	07d9      	lsls	r1, r3, #31
 8019288:	d405      	bmi.n	8019296 <_vfiprintf_r+0x202>
 801928a:	89ab      	ldrh	r3, [r5, #12]
 801928c:	059a      	lsls	r2, r3, #22
 801928e:	d402      	bmi.n	8019296 <_vfiprintf_r+0x202>
 8019290:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019292:	f7fe f953 	bl	801753c <__retarget_lock_release_recursive>
 8019296:	89ab      	ldrh	r3, [r5, #12]
 8019298:	065b      	lsls	r3, r3, #25
 801929a:	f53f af1d 	bmi.w	80190d8 <_vfiprintf_r+0x44>
 801929e:	9809      	ldr	r0, [sp, #36]	; 0x24
 80192a0:	e71c      	b.n	80190dc <_vfiprintf_r+0x48>
 80192a2:	ab03      	add	r3, sp, #12
 80192a4:	462a      	mov	r2, r5
 80192a6:	a904      	add	r1, sp, #16
 80192a8:	4630      	mov	r0, r6
 80192aa:	9300      	str	r3, [sp, #0]
 80192ac:	4b04      	ldr	r3, [pc, #16]	; (80192c0 <_vfiprintf_r+0x22c>)
 80192ae:	f7fc fb4b 	bl	8015948 <_printf_i>
 80192b2:	e7e4      	b.n	801927e <_vfiprintf_r+0x1ea>
 80192b4:	0818df96 	.word	0x0818df96
 80192b8:	0818dfa0 	.word	0x0818dfa0
 80192bc:	08015299 	.word	0x08015299
 80192c0:	0801906f 	.word	0x0801906f
 80192c4:	0818df9c 	.word	0x0818df9c

080192c8 <__ascii_mbtowc>:
 80192c8:	b082      	sub	sp, #8
 80192ca:	b901      	cbnz	r1, 80192ce <__ascii_mbtowc+0x6>
 80192cc:	a901      	add	r1, sp, #4
 80192ce:	b142      	cbz	r2, 80192e2 <__ascii_mbtowc+0x1a>
 80192d0:	b14b      	cbz	r3, 80192e6 <__ascii_mbtowc+0x1e>
 80192d2:	7813      	ldrb	r3, [r2, #0]
 80192d4:	600b      	str	r3, [r1, #0]
 80192d6:	7812      	ldrb	r2, [r2, #0]
 80192d8:	1e10      	subs	r0, r2, #0
 80192da:	bf18      	it	ne
 80192dc:	2001      	movne	r0, #1
 80192de:	b002      	add	sp, #8
 80192e0:	4770      	bx	lr
 80192e2:	4610      	mov	r0, r2
 80192e4:	e7fb      	b.n	80192de <__ascii_mbtowc+0x16>
 80192e6:	f06f 0001 	mvn.w	r0, #1
 80192ea:	e7f8      	b.n	80192de <__ascii_mbtowc+0x16>

080192ec <_scanf_chars>:
 80192ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80192f0:	4615      	mov	r5, r2
 80192f2:	688a      	ldr	r2, [r1, #8]
 80192f4:	4680      	mov	r8, r0
 80192f6:	460c      	mov	r4, r1
 80192f8:	b932      	cbnz	r2, 8019308 <_scanf_chars+0x1c>
 80192fa:	698a      	ldr	r2, [r1, #24]
 80192fc:	2a00      	cmp	r2, #0
 80192fe:	bf0c      	ite	eq
 8019300:	2201      	moveq	r2, #1
 8019302:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 8019306:	608a      	str	r2, [r1, #8]
 8019308:	6822      	ldr	r2, [r4, #0]
 801930a:	2700      	movs	r7, #0
 801930c:	f8df 908c 	ldr.w	r9, [pc, #140]	; 801939c <_scanf_chars+0xb0>
 8019310:	06d1      	lsls	r1, r2, #27
 8019312:	bf5f      	itttt	pl
 8019314:	681a      	ldrpl	r2, [r3, #0]
 8019316:	1d11      	addpl	r1, r2, #4
 8019318:	6019      	strpl	r1, [r3, #0]
 801931a:	6816      	ldrpl	r6, [r2, #0]
 801931c:	69a0      	ldr	r0, [r4, #24]
 801931e:	b188      	cbz	r0, 8019344 <_scanf_chars+0x58>
 8019320:	2801      	cmp	r0, #1
 8019322:	d107      	bne.n	8019334 <_scanf_chars+0x48>
 8019324:	682a      	ldr	r2, [r5, #0]
 8019326:	7811      	ldrb	r1, [r2, #0]
 8019328:	6962      	ldr	r2, [r4, #20]
 801932a:	5c52      	ldrb	r2, [r2, r1]
 801932c:	b952      	cbnz	r2, 8019344 <_scanf_chars+0x58>
 801932e:	2f00      	cmp	r7, #0
 8019330:	d031      	beq.n	8019396 <_scanf_chars+0xaa>
 8019332:	e022      	b.n	801937a <_scanf_chars+0x8e>
 8019334:	2802      	cmp	r0, #2
 8019336:	d120      	bne.n	801937a <_scanf_chars+0x8e>
 8019338:	682b      	ldr	r3, [r5, #0]
 801933a:	781b      	ldrb	r3, [r3, #0]
 801933c:	f819 3003 	ldrb.w	r3, [r9, r3]
 8019340:	071b      	lsls	r3, r3, #28
 8019342:	d41a      	bmi.n	801937a <_scanf_chars+0x8e>
 8019344:	6823      	ldr	r3, [r4, #0]
 8019346:	3701      	adds	r7, #1
 8019348:	06da      	lsls	r2, r3, #27
 801934a:	bf5e      	ittt	pl
 801934c:	682b      	ldrpl	r3, [r5, #0]
 801934e:	781b      	ldrbpl	r3, [r3, #0]
 8019350:	f806 3b01 	strbpl.w	r3, [r6], #1
 8019354:	682a      	ldr	r2, [r5, #0]
 8019356:	686b      	ldr	r3, [r5, #4]
 8019358:	3201      	adds	r2, #1
 801935a:	3b01      	subs	r3, #1
 801935c:	602a      	str	r2, [r5, #0]
 801935e:	68a2      	ldr	r2, [r4, #8]
 8019360:	606b      	str	r3, [r5, #4]
 8019362:	3a01      	subs	r2, #1
 8019364:	60a2      	str	r2, [r4, #8]
 8019366:	b142      	cbz	r2, 801937a <_scanf_chars+0x8e>
 8019368:	2b00      	cmp	r3, #0
 801936a:	dcd7      	bgt.n	801931c <_scanf_chars+0x30>
 801936c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8019370:	4629      	mov	r1, r5
 8019372:	4640      	mov	r0, r8
 8019374:	4798      	blx	r3
 8019376:	2800      	cmp	r0, #0
 8019378:	d0d0      	beq.n	801931c <_scanf_chars+0x30>
 801937a:	6823      	ldr	r3, [r4, #0]
 801937c:	f013 0310 	ands.w	r3, r3, #16
 8019380:	d105      	bne.n	801938e <_scanf_chars+0xa2>
 8019382:	68e2      	ldr	r2, [r4, #12]
 8019384:	3201      	adds	r2, #1
 8019386:	60e2      	str	r2, [r4, #12]
 8019388:	69a2      	ldr	r2, [r4, #24]
 801938a:	b102      	cbz	r2, 801938e <_scanf_chars+0xa2>
 801938c:	7033      	strb	r3, [r6, #0]
 801938e:	6923      	ldr	r3, [r4, #16]
 8019390:	2000      	movs	r0, #0
 8019392:	443b      	add	r3, r7
 8019394:	6123      	str	r3, [r4, #16]
 8019396:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801939a:	bf00      	nop
 801939c:	0818dda9 	.word	0x0818dda9

080193a0 <_scanf_i>:
 80193a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80193a4:	4698      	mov	r8, r3
 80193a6:	b087      	sub	sp, #28
 80193a8:	4b72      	ldr	r3, [pc, #456]	; (8019574 <_scanf_i+0x1d4>)
 80193aa:	460c      	mov	r4, r1
 80193ac:	4682      	mov	sl, r0
 80193ae:	4616      	mov	r6, r2
 80193b0:	4627      	mov	r7, r4
 80193b2:	f04f 0b00 	mov.w	fp, #0
 80193b6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80193ba:	ab03      	add	r3, sp, #12
 80193bc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80193c0:	4b6d      	ldr	r3, [pc, #436]	; (8019578 <_scanf_i+0x1d8>)
 80193c2:	69a1      	ldr	r1, [r4, #24]
 80193c4:	4a6d      	ldr	r2, [pc, #436]	; (801957c <_scanf_i+0x1dc>)
 80193c6:	2903      	cmp	r1, #3
 80193c8:	bf18      	it	ne
 80193ca:	461a      	movne	r2, r3
 80193cc:	68a3      	ldr	r3, [r4, #8]
 80193ce:	9201      	str	r2, [sp, #4]
 80193d0:	1e5a      	subs	r2, r3, #1
 80193d2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80193d6:	bf89      	itett	hi
 80193d8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80193dc:	f04f 0900 	movls.w	r9, #0
 80193e0:	eb03 0905 	addhi.w	r9, r3, r5
 80193e4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80193e8:	bf88      	it	hi
 80193ea:	60a3      	strhi	r3, [r4, #8]
 80193ec:	f857 3b1c 	ldr.w	r3, [r7], #28
 80193f0:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80193f4:	463d      	mov	r5, r7
 80193f6:	6023      	str	r3, [r4, #0]
 80193f8:	6831      	ldr	r1, [r6, #0]
 80193fa:	ab03      	add	r3, sp, #12
 80193fc:	2202      	movs	r2, #2
 80193fe:	7809      	ldrb	r1, [r1, #0]
 8019400:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8019404:	f7fe f89b 	bl	801753e <memchr>
 8019408:	b328      	cbz	r0, 8019456 <_scanf_i+0xb6>
 801940a:	f1bb 0f01 	cmp.w	fp, #1
 801940e:	d159      	bne.n	80194c4 <_scanf_i+0x124>
 8019410:	6862      	ldr	r2, [r4, #4]
 8019412:	b92a      	cbnz	r2, 8019420 <_scanf_i+0x80>
 8019414:	6822      	ldr	r2, [r4, #0]
 8019416:	2308      	movs	r3, #8
 8019418:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801941c:	6063      	str	r3, [r4, #4]
 801941e:	6022      	str	r2, [r4, #0]
 8019420:	6822      	ldr	r2, [r4, #0]
 8019422:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8019426:	6022      	str	r2, [r4, #0]
 8019428:	68a2      	ldr	r2, [r4, #8]
 801942a:	1e51      	subs	r1, r2, #1
 801942c:	60a1      	str	r1, [r4, #8]
 801942e:	b192      	cbz	r2, 8019456 <_scanf_i+0xb6>
 8019430:	6832      	ldr	r2, [r6, #0]
 8019432:	1c51      	adds	r1, r2, #1
 8019434:	6031      	str	r1, [r6, #0]
 8019436:	7812      	ldrb	r2, [r2, #0]
 8019438:	f805 2b01 	strb.w	r2, [r5], #1
 801943c:	6872      	ldr	r2, [r6, #4]
 801943e:	3a01      	subs	r2, #1
 8019440:	2a00      	cmp	r2, #0
 8019442:	6072      	str	r2, [r6, #4]
 8019444:	dc07      	bgt.n	8019456 <_scanf_i+0xb6>
 8019446:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 801944a:	4631      	mov	r1, r6
 801944c:	4650      	mov	r0, sl
 801944e:	4790      	blx	r2
 8019450:	2800      	cmp	r0, #0
 8019452:	f040 8085 	bne.w	8019560 <_scanf_i+0x1c0>
 8019456:	f10b 0b01 	add.w	fp, fp, #1
 801945a:	f1bb 0f03 	cmp.w	fp, #3
 801945e:	d1cb      	bne.n	80193f8 <_scanf_i+0x58>
 8019460:	6863      	ldr	r3, [r4, #4]
 8019462:	b90b      	cbnz	r3, 8019468 <_scanf_i+0xc8>
 8019464:	230a      	movs	r3, #10
 8019466:	6063      	str	r3, [r4, #4]
 8019468:	6863      	ldr	r3, [r4, #4]
 801946a:	f04f 0b00 	mov.w	fp, #0
 801946e:	4944      	ldr	r1, [pc, #272]	; (8019580 <_scanf_i+0x1e0>)
 8019470:	6960      	ldr	r0, [r4, #20]
 8019472:	1ac9      	subs	r1, r1, r3
 8019474:	f000 f886 	bl	8019584 <__sccl>
 8019478:	68a3      	ldr	r3, [r4, #8]
 801947a:	6822      	ldr	r2, [r4, #0]
 801947c:	2b00      	cmp	r3, #0
 801947e:	d03d      	beq.n	80194fc <_scanf_i+0x15c>
 8019480:	6831      	ldr	r1, [r6, #0]
 8019482:	6960      	ldr	r0, [r4, #20]
 8019484:	f891 c000 	ldrb.w	ip, [r1]
 8019488:	f810 000c 	ldrb.w	r0, [r0, ip]
 801948c:	2800      	cmp	r0, #0
 801948e:	d035      	beq.n	80194fc <_scanf_i+0x15c>
 8019490:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8019494:	d124      	bne.n	80194e0 <_scanf_i+0x140>
 8019496:	0510      	lsls	r0, r2, #20
 8019498:	d522      	bpl.n	80194e0 <_scanf_i+0x140>
 801949a:	f10b 0b01 	add.w	fp, fp, #1
 801949e:	f1b9 0f00 	cmp.w	r9, #0
 80194a2:	d003      	beq.n	80194ac <_scanf_i+0x10c>
 80194a4:	3301      	adds	r3, #1
 80194a6:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 80194aa:	60a3      	str	r3, [r4, #8]
 80194ac:	6873      	ldr	r3, [r6, #4]
 80194ae:	3b01      	subs	r3, #1
 80194b0:	2b00      	cmp	r3, #0
 80194b2:	6073      	str	r3, [r6, #4]
 80194b4:	dd1b      	ble.n	80194ee <_scanf_i+0x14e>
 80194b6:	6833      	ldr	r3, [r6, #0]
 80194b8:	3301      	adds	r3, #1
 80194ba:	6033      	str	r3, [r6, #0]
 80194bc:	68a3      	ldr	r3, [r4, #8]
 80194be:	3b01      	subs	r3, #1
 80194c0:	60a3      	str	r3, [r4, #8]
 80194c2:	e7d9      	b.n	8019478 <_scanf_i+0xd8>
 80194c4:	f1bb 0f02 	cmp.w	fp, #2
 80194c8:	d1ae      	bne.n	8019428 <_scanf_i+0x88>
 80194ca:	6822      	ldr	r2, [r4, #0]
 80194cc:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80194d0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80194d4:	d1bf      	bne.n	8019456 <_scanf_i+0xb6>
 80194d6:	2310      	movs	r3, #16
 80194d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80194dc:	6063      	str	r3, [r4, #4]
 80194de:	e7a2      	b.n	8019426 <_scanf_i+0x86>
 80194e0:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80194e4:	6022      	str	r2, [r4, #0]
 80194e6:	780b      	ldrb	r3, [r1, #0]
 80194e8:	f805 3b01 	strb.w	r3, [r5], #1
 80194ec:	e7de      	b.n	80194ac <_scanf_i+0x10c>
 80194ee:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80194f2:	4631      	mov	r1, r6
 80194f4:	4650      	mov	r0, sl
 80194f6:	4798      	blx	r3
 80194f8:	2800      	cmp	r0, #0
 80194fa:	d0df      	beq.n	80194bc <_scanf_i+0x11c>
 80194fc:	6823      	ldr	r3, [r4, #0]
 80194fe:	05d9      	lsls	r1, r3, #23
 8019500:	d50d      	bpl.n	801951e <_scanf_i+0x17e>
 8019502:	42bd      	cmp	r5, r7
 8019504:	d909      	bls.n	801951a <_scanf_i+0x17a>
 8019506:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 801950a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801950e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8019512:	4632      	mov	r2, r6
 8019514:	464d      	mov	r5, r9
 8019516:	4650      	mov	r0, sl
 8019518:	4798      	blx	r3
 801951a:	42bd      	cmp	r5, r7
 801951c:	d028      	beq.n	8019570 <_scanf_i+0x1d0>
 801951e:	6822      	ldr	r2, [r4, #0]
 8019520:	f012 0210 	ands.w	r2, r2, #16
 8019524:	d113      	bne.n	801954e <_scanf_i+0x1ae>
 8019526:	702a      	strb	r2, [r5, #0]
 8019528:	4639      	mov	r1, r7
 801952a:	6863      	ldr	r3, [r4, #4]
 801952c:	4650      	mov	r0, sl
 801952e:	9e01      	ldr	r6, [sp, #4]
 8019530:	47b0      	blx	r6
 8019532:	f8d8 3000 	ldr.w	r3, [r8]
 8019536:	6821      	ldr	r1, [r4, #0]
 8019538:	1d1a      	adds	r2, r3, #4
 801953a:	f011 0f20 	tst.w	r1, #32
 801953e:	f8c8 2000 	str.w	r2, [r8]
 8019542:	681b      	ldr	r3, [r3, #0]
 8019544:	d00f      	beq.n	8019566 <_scanf_i+0x1c6>
 8019546:	6018      	str	r0, [r3, #0]
 8019548:	68e3      	ldr	r3, [r4, #12]
 801954a:	3301      	adds	r3, #1
 801954c:	60e3      	str	r3, [r4, #12]
 801954e:	1bed      	subs	r5, r5, r7
 8019550:	6923      	ldr	r3, [r4, #16]
 8019552:	2000      	movs	r0, #0
 8019554:	445d      	add	r5, fp
 8019556:	442b      	add	r3, r5
 8019558:	6123      	str	r3, [r4, #16]
 801955a:	b007      	add	sp, #28
 801955c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019560:	f04f 0b00 	mov.w	fp, #0
 8019564:	e7ca      	b.n	80194fc <_scanf_i+0x15c>
 8019566:	07ca      	lsls	r2, r1, #31
 8019568:	bf4c      	ite	mi
 801956a:	8018      	strhmi	r0, [r3, #0]
 801956c:	6018      	strpl	r0, [r3, #0]
 801956e:	e7eb      	b.n	8019548 <_scanf_i+0x1a8>
 8019570:	2001      	movs	r0, #1
 8019572:	e7f2      	b.n	801955a <_scanf_i+0x1ba>
 8019574:	0801c0dc 	.word	0x0801c0dc
 8019578:	0801a275 	.word	0x0801a275
 801957c:	08017131 	.word	0x08017131
 8019580:	0818dfb7 	.word	0x0818dfb7

08019584 <__sccl>:
 8019584:	b570      	push	{r4, r5, r6, lr}
 8019586:	780b      	ldrb	r3, [r1, #0]
 8019588:	4604      	mov	r4, r0
 801958a:	3801      	subs	r0, #1
 801958c:	2b5e      	cmp	r3, #94	; 0x5e
 801958e:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8019592:	bf13      	iteet	ne
 8019594:	1c4a      	addne	r2, r1, #1
 8019596:	1c8a      	addeq	r2, r1, #2
 8019598:	784b      	ldrbeq	r3, [r1, #1]
 801959a:	2100      	movne	r1, #0
 801959c:	bf08      	it	eq
 801959e:	2101      	moveq	r1, #1
 80195a0:	f800 1f01 	strb.w	r1, [r0, #1]!
 80195a4:	42a8      	cmp	r0, r5
 80195a6:	d1fb      	bne.n	80195a0 <__sccl+0x1c>
 80195a8:	b90b      	cbnz	r3, 80195ae <__sccl+0x2a>
 80195aa:	1e50      	subs	r0, r2, #1
 80195ac:	bd70      	pop	{r4, r5, r6, pc}
 80195ae:	f081 0101 	eor.w	r1, r1, #1
 80195b2:	4610      	mov	r0, r2
 80195b4:	54e1      	strb	r1, [r4, r3]
 80195b6:	4602      	mov	r2, r0
 80195b8:	f812 5b01 	ldrb.w	r5, [r2], #1
 80195bc:	2d2d      	cmp	r5, #45	; 0x2d
 80195be:	d005      	beq.n	80195cc <__sccl+0x48>
 80195c0:	2d5d      	cmp	r5, #93	; 0x5d
 80195c2:	d016      	beq.n	80195f2 <__sccl+0x6e>
 80195c4:	2d00      	cmp	r5, #0
 80195c6:	d0f1      	beq.n	80195ac <__sccl+0x28>
 80195c8:	462b      	mov	r3, r5
 80195ca:	e7f2      	b.n	80195b2 <__sccl+0x2e>
 80195cc:	7846      	ldrb	r6, [r0, #1]
 80195ce:	2e5d      	cmp	r6, #93	; 0x5d
 80195d0:	d0fa      	beq.n	80195c8 <__sccl+0x44>
 80195d2:	42b3      	cmp	r3, r6
 80195d4:	dcf8      	bgt.n	80195c8 <__sccl+0x44>
 80195d6:	3002      	adds	r0, #2
 80195d8:	461a      	mov	r2, r3
 80195da:	3201      	adds	r2, #1
 80195dc:	4296      	cmp	r6, r2
 80195de:	54a1      	strb	r1, [r4, r2]
 80195e0:	dcfb      	bgt.n	80195da <__sccl+0x56>
 80195e2:	1af2      	subs	r2, r6, r3
 80195e4:	1c5d      	adds	r5, r3, #1
 80195e6:	3a01      	subs	r2, #1
 80195e8:	42b3      	cmp	r3, r6
 80195ea:	bfa8      	it	ge
 80195ec:	2200      	movge	r2, #0
 80195ee:	18ab      	adds	r3, r5, r2
 80195f0:	e7e1      	b.n	80195b6 <__sccl+0x32>
 80195f2:	4610      	mov	r0, r2
 80195f4:	e7da      	b.n	80195ac <__sccl+0x28>
	...

080195f8 <__sflush_r>:
 80195f8:	898a      	ldrh	r2, [r1, #12]
 80195fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80195fe:	4605      	mov	r5, r0
 8019600:	0710      	lsls	r0, r2, #28
 8019602:	460c      	mov	r4, r1
 8019604:	d458      	bmi.n	80196b8 <__sflush_r+0xc0>
 8019606:	684b      	ldr	r3, [r1, #4]
 8019608:	2b00      	cmp	r3, #0
 801960a:	dc05      	bgt.n	8019618 <__sflush_r+0x20>
 801960c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801960e:	2b00      	cmp	r3, #0
 8019610:	dc02      	bgt.n	8019618 <__sflush_r+0x20>
 8019612:	2000      	movs	r0, #0
 8019614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019618:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801961a:	2e00      	cmp	r6, #0
 801961c:	d0f9      	beq.n	8019612 <__sflush_r+0x1a>
 801961e:	2300      	movs	r3, #0
 8019620:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8019624:	682f      	ldr	r7, [r5, #0]
 8019626:	6a21      	ldr	r1, [r4, #32]
 8019628:	602b      	str	r3, [r5, #0]
 801962a:	d032      	beq.n	8019692 <__sflush_r+0x9a>
 801962c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801962e:	89a3      	ldrh	r3, [r4, #12]
 8019630:	075a      	lsls	r2, r3, #29
 8019632:	d505      	bpl.n	8019640 <__sflush_r+0x48>
 8019634:	6863      	ldr	r3, [r4, #4]
 8019636:	1ac0      	subs	r0, r0, r3
 8019638:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801963a:	b10b      	cbz	r3, 8019640 <__sflush_r+0x48>
 801963c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801963e:	1ac0      	subs	r0, r0, r3
 8019640:	2300      	movs	r3, #0
 8019642:	4602      	mov	r2, r0
 8019644:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019646:	4628      	mov	r0, r5
 8019648:	6a21      	ldr	r1, [r4, #32]
 801964a:	47b0      	blx	r6
 801964c:	1c43      	adds	r3, r0, #1
 801964e:	89a3      	ldrh	r3, [r4, #12]
 8019650:	d106      	bne.n	8019660 <__sflush_r+0x68>
 8019652:	6829      	ldr	r1, [r5, #0]
 8019654:	291d      	cmp	r1, #29
 8019656:	d82b      	bhi.n	80196b0 <__sflush_r+0xb8>
 8019658:	4a28      	ldr	r2, [pc, #160]	; (80196fc <__sflush_r+0x104>)
 801965a:	410a      	asrs	r2, r1
 801965c:	07d6      	lsls	r6, r2, #31
 801965e:	d427      	bmi.n	80196b0 <__sflush_r+0xb8>
 8019660:	2200      	movs	r2, #0
 8019662:	04d9      	lsls	r1, r3, #19
 8019664:	6062      	str	r2, [r4, #4]
 8019666:	6922      	ldr	r2, [r4, #16]
 8019668:	6022      	str	r2, [r4, #0]
 801966a:	d504      	bpl.n	8019676 <__sflush_r+0x7e>
 801966c:	1c42      	adds	r2, r0, #1
 801966e:	d101      	bne.n	8019674 <__sflush_r+0x7c>
 8019670:	682b      	ldr	r3, [r5, #0]
 8019672:	b903      	cbnz	r3, 8019676 <__sflush_r+0x7e>
 8019674:	6560      	str	r0, [r4, #84]	; 0x54
 8019676:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019678:	602f      	str	r7, [r5, #0]
 801967a:	2900      	cmp	r1, #0
 801967c:	d0c9      	beq.n	8019612 <__sflush_r+0x1a>
 801967e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019682:	4299      	cmp	r1, r3
 8019684:	d002      	beq.n	801968c <__sflush_r+0x94>
 8019686:	4628      	mov	r0, r5
 8019688:	f7fe fe0e 	bl	80182a8 <_free_r>
 801968c:	2000      	movs	r0, #0
 801968e:	6360      	str	r0, [r4, #52]	; 0x34
 8019690:	e7c0      	b.n	8019614 <__sflush_r+0x1c>
 8019692:	2301      	movs	r3, #1
 8019694:	4628      	mov	r0, r5
 8019696:	47b0      	blx	r6
 8019698:	1c41      	adds	r1, r0, #1
 801969a:	d1c8      	bne.n	801962e <__sflush_r+0x36>
 801969c:	682b      	ldr	r3, [r5, #0]
 801969e:	2b00      	cmp	r3, #0
 80196a0:	d0c5      	beq.n	801962e <__sflush_r+0x36>
 80196a2:	2b1d      	cmp	r3, #29
 80196a4:	d001      	beq.n	80196aa <__sflush_r+0xb2>
 80196a6:	2b16      	cmp	r3, #22
 80196a8:	d101      	bne.n	80196ae <__sflush_r+0xb6>
 80196aa:	602f      	str	r7, [r5, #0]
 80196ac:	e7b1      	b.n	8019612 <__sflush_r+0x1a>
 80196ae:	89a3      	ldrh	r3, [r4, #12]
 80196b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80196b4:	81a3      	strh	r3, [r4, #12]
 80196b6:	e7ad      	b.n	8019614 <__sflush_r+0x1c>
 80196b8:	690f      	ldr	r7, [r1, #16]
 80196ba:	2f00      	cmp	r7, #0
 80196bc:	d0a9      	beq.n	8019612 <__sflush_r+0x1a>
 80196be:	0793      	lsls	r3, r2, #30
 80196c0:	680e      	ldr	r6, [r1, #0]
 80196c2:	600f      	str	r7, [r1, #0]
 80196c4:	bf0c      	ite	eq
 80196c6:	694b      	ldreq	r3, [r1, #20]
 80196c8:	2300      	movne	r3, #0
 80196ca:	eba6 0807 	sub.w	r8, r6, r7
 80196ce:	608b      	str	r3, [r1, #8]
 80196d0:	f1b8 0f00 	cmp.w	r8, #0
 80196d4:	dd9d      	ble.n	8019612 <__sflush_r+0x1a>
 80196d6:	4643      	mov	r3, r8
 80196d8:	463a      	mov	r2, r7
 80196da:	6a21      	ldr	r1, [r4, #32]
 80196dc:	4628      	mov	r0, r5
 80196de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80196e0:	47b0      	blx	r6
 80196e2:	2800      	cmp	r0, #0
 80196e4:	dc06      	bgt.n	80196f4 <__sflush_r+0xfc>
 80196e6:	89a3      	ldrh	r3, [r4, #12]
 80196e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80196ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80196f0:	81a3      	strh	r3, [r4, #12]
 80196f2:	e78f      	b.n	8019614 <__sflush_r+0x1c>
 80196f4:	4407      	add	r7, r0
 80196f6:	eba8 0800 	sub.w	r8, r8, r0
 80196fa:	e7e9      	b.n	80196d0 <__sflush_r+0xd8>
 80196fc:	dfbffffe 	.word	0xdfbffffe

08019700 <_fflush_r>:
 8019700:	b538      	push	{r3, r4, r5, lr}
 8019702:	690b      	ldr	r3, [r1, #16]
 8019704:	4605      	mov	r5, r0
 8019706:	460c      	mov	r4, r1
 8019708:	b913      	cbnz	r3, 8019710 <_fflush_r+0x10>
 801970a:	2500      	movs	r5, #0
 801970c:	4628      	mov	r0, r5
 801970e:	bd38      	pop	{r3, r4, r5, pc}
 8019710:	b118      	cbz	r0, 801971a <_fflush_r+0x1a>
 8019712:	6a03      	ldr	r3, [r0, #32]
 8019714:	b90b      	cbnz	r3, 801971a <_fflush_r+0x1a>
 8019716:	f7fc fe5b 	bl	80163d0 <__sinit>
 801971a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801971e:	2b00      	cmp	r3, #0
 8019720:	d0f3      	beq.n	801970a <_fflush_r+0xa>
 8019722:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8019724:	07d0      	lsls	r0, r2, #31
 8019726:	d404      	bmi.n	8019732 <_fflush_r+0x32>
 8019728:	0599      	lsls	r1, r3, #22
 801972a:	d402      	bmi.n	8019732 <_fflush_r+0x32>
 801972c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801972e:	f7fd ff04 	bl	801753a <__retarget_lock_acquire_recursive>
 8019732:	4628      	mov	r0, r5
 8019734:	4621      	mov	r1, r4
 8019736:	f7ff ff5f 	bl	80195f8 <__sflush_r>
 801973a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801973c:	4605      	mov	r5, r0
 801973e:	07da      	lsls	r2, r3, #31
 8019740:	d4e4      	bmi.n	801970c <_fflush_r+0xc>
 8019742:	89a3      	ldrh	r3, [r4, #12]
 8019744:	059b      	lsls	r3, r3, #22
 8019746:	d4e1      	bmi.n	801970c <_fflush_r+0xc>
 8019748:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801974a:	f7fd fef7 	bl	801753c <__retarget_lock_release_recursive>
 801974e:	e7dd      	b.n	801970c <_fflush_r+0xc>

08019750 <_Balloc>:
 8019750:	b570      	push	{r4, r5, r6, lr}
 8019752:	69c6      	ldr	r6, [r0, #28]
 8019754:	4604      	mov	r4, r0
 8019756:	460d      	mov	r5, r1
 8019758:	b976      	cbnz	r6, 8019778 <_Balloc+0x28>
 801975a:	2010      	movs	r0, #16
 801975c:	f7fb ffd2 	bl	8015704 <malloc>
 8019760:	4602      	mov	r2, r0
 8019762:	61e0      	str	r0, [r4, #28]
 8019764:	b920      	cbnz	r0, 8019770 <_Balloc+0x20>
 8019766:	4b18      	ldr	r3, [pc, #96]	; (80197c8 <_Balloc+0x78>)
 8019768:	216b      	movs	r1, #107	; 0x6b
 801976a:	4818      	ldr	r0, [pc, #96]	; (80197cc <_Balloc+0x7c>)
 801976c:	f000 fe5c 	bl	801a428 <__assert_func>
 8019770:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8019774:	6006      	str	r6, [r0, #0]
 8019776:	60c6      	str	r6, [r0, #12]
 8019778:	69e6      	ldr	r6, [r4, #28]
 801977a:	68f3      	ldr	r3, [r6, #12]
 801977c:	b183      	cbz	r3, 80197a0 <_Balloc+0x50>
 801977e:	69e3      	ldr	r3, [r4, #28]
 8019780:	68db      	ldr	r3, [r3, #12]
 8019782:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8019786:	b9b8      	cbnz	r0, 80197b8 <_Balloc+0x68>
 8019788:	2101      	movs	r1, #1
 801978a:	4620      	mov	r0, r4
 801978c:	fa01 f605 	lsl.w	r6, r1, r5
 8019790:	1d72      	adds	r2, r6, #5
 8019792:	0092      	lsls	r2, r2, #2
 8019794:	f7fb fcca 	bl	801512c <_calloc_r>
 8019798:	b160      	cbz	r0, 80197b4 <_Balloc+0x64>
 801979a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801979e:	e00e      	b.n	80197be <_Balloc+0x6e>
 80197a0:	2221      	movs	r2, #33	; 0x21
 80197a2:	2104      	movs	r1, #4
 80197a4:	4620      	mov	r0, r4
 80197a6:	f7fb fcc1 	bl	801512c <_calloc_r>
 80197aa:	69e3      	ldr	r3, [r4, #28]
 80197ac:	60f0      	str	r0, [r6, #12]
 80197ae:	68db      	ldr	r3, [r3, #12]
 80197b0:	2b00      	cmp	r3, #0
 80197b2:	d1e4      	bne.n	801977e <_Balloc+0x2e>
 80197b4:	2000      	movs	r0, #0
 80197b6:	bd70      	pop	{r4, r5, r6, pc}
 80197b8:	6802      	ldr	r2, [r0, #0]
 80197ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80197be:	2300      	movs	r3, #0
 80197c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80197c4:	e7f7      	b.n	80197b6 <_Balloc+0x66>
 80197c6:	bf00      	nop
 80197c8:	0818deb6 	.word	0x0818deb6
 80197cc:	0818dfc2 	.word	0x0818dfc2

080197d0 <_Bfree>:
 80197d0:	b570      	push	{r4, r5, r6, lr}
 80197d2:	69c6      	ldr	r6, [r0, #28]
 80197d4:	4605      	mov	r5, r0
 80197d6:	460c      	mov	r4, r1
 80197d8:	b976      	cbnz	r6, 80197f8 <_Bfree+0x28>
 80197da:	2010      	movs	r0, #16
 80197dc:	f7fb ff92 	bl	8015704 <malloc>
 80197e0:	4602      	mov	r2, r0
 80197e2:	61e8      	str	r0, [r5, #28]
 80197e4:	b920      	cbnz	r0, 80197f0 <_Bfree+0x20>
 80197e6:	4b09      	ldr	r3, [pc, #36]	; (801980c <_Bfree+0x3c>)
 80197e8:	218f      	movs	r1, #143	; 0x8f
 80197ea:	4809      	ldr	r0, [pc, #36]	; (8019810 <_Bfree+0x40>)
 80197ec:	f000 fe1c 	bl	801a428 <__assert_func>
 80197f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80197f4:	6006      	str	r6, [r0, #0]
 80197f6:	60c6      	str	r6, [r0, #12]
 80197f8:	b13c      	cbz	r4, 801980a <_Bfree+0x3a>
 80197fa:	69eb      	ldr	r3, [r5, #28]
 80197fc:	6862      	ldr	r2, [r4, #4]
 80197fe:	68db      	ldr	r3, [r3, #12]
 8019800:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8019804:	6021      	str	r1, [r4, #0]
 8019806:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801980a:	bd70      	pop	{r4, r5, r6, pc}
 801980c:	0818deb6 	.word	0x0818deb6
 8019810:	0818dfc2 	.word	0x0818dfc2

08019814 <__multadd>:
 8019814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019818:	f101 0c14 	add.w	ip, r1, #20
 801981c:	4607      	mov	r7, r0
 801981e:	460c      	mov	r4, r1
 8019820:	461e      	mov	r6, r3
 8019822:	690d      	ldr	r5, [r1, #16]
 8019824:	2000      	movs	r0, #0
 8019826:	f8dc 3000 	ldr.w	r3, [ip]
 801982a:	3001      	adds	r0, #1
 801982c:	b299      	uxth	r1, r3
 801982e:	4285      	cmp	r5, r0
 8019830:	fb02 6101 	mla	r1, r2, r1, r6
 8019834:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8019838:	ea4f 4311 	mov.w	r3, r1, lsr #16
 801983c:	b289      	uxth	r1, r1
 801983e:	fb02 3306 	mla	r3, r2, r6, r3
 8019842:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8019846:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801984a:	f84c 1b04 	str.w	r1, [ip], #4
 801984e:	dcea      	bgt.n	8019826 <__multadd+0x12>
 8019850:	b30e      	cbz	r6, 8019896 <__multadd+0x82>
 8019852:	68a3      	ldr	r3, [r4, #8]
 8019854:	42ab      	cmp	r3, r5
 8019856:	dc19      	bgt.n	801988c <__multadd+0x78>
 8019858:	6861      	ldr	r1, [r4, #4]
 801985a:	4638      	mov	r0, r7
 801985c:	3101      	adds	r1, #1
 801985e:	f7ff ff77 	bl	8019750 <_Balloc>
 8019862:	4680      	mov	r8, r0
 8019864:	b928      	cbnz	r0, 8019872 <__multadd+0x5e>
 8019866:	4602      	mov	r2, r0
 8019868:	4b0c      	ldr	r3, [pc, #48]	; (801989c <__multadd+0x88>)
 801986a:	21ba      	movs	r1, #186	; 0xba
 801986c:	480c      	ldr	r0, [pc, #48]	; (80198a0 <__multadd+0x8c>)
 801986e:	f000 fddb 	bl	801a428 <__assert_func>
 8019872:	6922      	ldr	r2, [r4, #16]
 8019874:	f104 010c 	add.w	r1, r4, #12
 8019878:	300c      	adds	r0, #12
 801987a:	3202      	adds	r2, #2
 801987c:	0092      	lsls	r2, r2, #2
 801987e:	f7fd fe6c 	bl	801755a <memcpy>
 8019882:	4621      	mov	r1, r4
 8019884:	4644      	mov	r4, r8
 8019886:	4638      	mov	r0, r7
 8019888:	f7ff ffa2 	bl	80197d0 <_Bfree>
 801988c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8019890:	3501      	adds	r5, #1
 8019892:	615e      	str	r6, [r3, #20]
 8019894:	6125      	str	r5, [r4, #16]
 8019896:	4620      	mov	r0, r4
 8019898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801989c:	0818df25 	.word	0x0818df25
 80198a0:	0818dfc2 	.word	0x0818dfc2

080198a4 <__s2b>:
 80198a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80198a8:	4615      	mov	r5, r2
 80198aa:	461f      	mov	r7, r3
 80198ac:	2209      	movs	r2, #9
 80198ae:	3308      	adds	r3, #8
 80198b0:	460c      	mov	r4, r1
 80198b2:	4606      	mov	r6, r0
 80198b4:	2100      	movs	r1, #0
 80198b6:	fb93 f3f2 	sdiv	r3, r3, r2
 80198ba:	2201      	movs	r2, #1
 80198bc:	429a      	cmp	r2, r3
 80198be:	db09      	blt.n	80198d4 <__s2b+0x30>
 80198c0:	4630      	mov	r0, r6
 80198c2:	f7ff ff45 	bl	8019750 <_Balloc>
 80198c6:	b940      	cbnz	r0, 80198da <__s2b+0x36>
 80198c8:	4602      	mov	r2, r0
 80198ca:	4b19      	ldr	r3, [pc, #100]	; (8019930 <__s2b+0x8c>)
 80198cc:	21d3      	movs	r1, #211	; 0xd3
 80198ce:	4819      	ldr	r0, [pc, #100]	; (8019934 <__s2b+0x90>)
 80198d0:	f000 fdaa 	bl	801a428 <__assert_func>
 80198d4:	0052      	lsls	r2, r2, #1
 80198d6:	3101      	adds	r1, #1
 80198d8:	e7f0      	b.n	80198bc <__s2b+0x18>
 80198da:	9b08      	ldr	r3, [sp, #32]
 80198dc:	2d09      	cmp	r5, #9
 80198de:	6143      	str	r3, [r0, #20]
 80198e0:	f04f 0301 	mov.w	r3, #1
 80198e4:	6103      	str	r3, [r0, #16]
 80198e6:	dd16      	ble.n	8019916 <__s2b+0x72>
 80198e8:	f104 0909 	add.w	r9, r4, #9
 80198ec:	442c      	add	r4, r5
 80198ee:	46c8      	mov	r8, r9
 80198f0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80198f4:	4601      	mov	r1, r0
 80198f6:	220a      	movs	r2, #10
 80198f8:	4630      	mov	r0, r6
 80198fa:	3b30      	subs	r3, #48	; 0x30
 80198fc:	f7ff ff8a 	bl	8019814 <__multadd>
 8019900:	45a0      	cmp	r8, r4
 8019902:	d1f5      	bne.n	80198f0 <__s2b+0x4c>
 8019904:	f1a5 0408 	sub.w	r4, r5, #8
 8019908:	444c      	add	r4, r9
 801990a:	1b2d      	subs	r5, r5, r4
 801990c:	1963      	adds	r3, r4, r5
 801990e:	42bb      	cmp	r3, r7
 8019910:	db04      	blt.n	801991c <__s2b+0x78>
 8019912:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019916:	340a      	adds	r4, #10
 8019918:	2509      	movs	r5, #9
 801991a:	e7f6      	b.n	801990a <__s2b+0x66>
 801991c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8019920:	4601      	mov	r1, r0
 8019922:	220a      	movs	r2, #10
 8019924:	4630      	mov	r0, r6
 8019926:	3b30      	subs	r3, #48	; 0x30
 8019928:	f7ff ff74 	bl	8019814 <__multadd>
 801992c:	e7ee      	b.n	801990c <__s2b+0x68>
 801992e:	bf00      	nop
 8019930:	0818df25 	.word	0x0818df25
 8019934:	0818dfc2 	.word	0x0818dfc2

08019938 <__hi0bits>:
 8019938:	0c03      	lsrs	r3, r0, #16
 801993a:	041b      	lsls	r3, r3, #16
 801993c:	b9d3      	cbnz	r3, 8019974 <__hi0bits+0x3c>
 801993e:	0400      	lsls	r0, r0, #16
 8019940:	2310      	movs	r3, #16
 8019942:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8019946:	bf04      	itt	eq
 8019948:	0200      	lsleq	r0, r0, #8
 801994a:	3308      	addeq	r3, #8
 801994c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8019950:	bf04      	itt	eq
 8019952:	0100      	lsleq	r0, r0, #4
 8019954:	3304      	addeq	r3, #4
 8019956:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801995a:	bf04      	itt	eq
 801995c:	0080      	lsleq	r0, r0, #2
 801995e:	3302      	addeq	r3, #2
 8019960:	2800      	cmp	r0, #0
 8019962:	db05      	blt.n	8019970 <__hi0bits+0x38>
 8019964:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8019968:	f103 0301 	add.w	r3, r3, #1
 801996c:	bf08      	it	eq
 801996e:	2320      	moveq	r3, #32
 8019970:	4618      	mov	r0, r3
 8019972:	4770      	bx	lr
 8019974:	2300      	movs	r3, #0
 8019976:	e7e4      	b.n	8019942 <__hi0bits+0xa>

08019978 <__lo0bits>:
 8019978:	6803      	ldr	r3, [r0, #0]
 801997a:	f013 0207 	ands.w	r2, r3, #7
 801997e:	d00c      	beq.n	801999a <__lo0bits+0x22>
 8019980:	07d9      	lsls	r1, r3, #31
 8019982:	d422      	bmi.n	80199ca <__lo0bits+0x52>
 8019984:	079a      	lsls	r2, r3, #30
 8019986:	bf47      	ittee	mi
 8019988:	085b      	lsrmi	r3, r3, #1
 801998a:	2201      	movmi	r2, #1
 801998c:	089b      	lsrpl	r3, r3, #2
 801998e:	2202      	movpl	r2, #2
 8019990:	bf4c      	ite	mi
 8019992:	6003      	strmi	r3, [r0, #0]
 8019994:	6003      	strpl	r3, [r0, #0]
 8019996:	4610      	mov	r0, r2
 8019998:	4770      	bx	lr
 801999a:	b299      	uxth	r1, r3
 801999c:	b909      	cbnz	r1, 80199a2 <__lo0bits+0x2a>
 801999e:	0c1b      	lsrs	r3, r3, #16
 80199a0:	2210      	movs	r2, #16
 80199a2:	b2d9      	uxtb	r1, r3
 80199a4:	b909      	cbnz	r1, 80199aa <__lo0bits+0x32>
 80199a6:	3208      	adds	r2, #8
 80199a8:	0a1b      	lsrs	r3, r3, #8
 80199aa:	0719      	lsls	r1, r3, #28
 80199ac:	bf04      	itt	eq
 80199ae:	091b      	lsreq	r3, r3, #4
 80199b0:	3204      	addeq	r2, #4
 80199b2:	0799      	lsls	r1, r3, #30
 80199b4:	bf04      	itt	eq
 80199b6:	089b      	lsreq	r3, r3, #2
 80199b8:	3202      	addeq	r2, #2
 80199ba:	07d9      	lsls	r1, r3, #31
 80199bc:	d403      	bmi.n	80199c6 <__lo0bits+0x4e>
 80199be:	085b      	lsrs	r3, r3, #1
 80199c0:	f102 0201 	add.w	r2, r2, #1
 80199c4:	d003      	beq.n	80199ce <__lo0bits+0x56>
 80199c6:	6003      	str	r3, [r0, #0]
 80199c8:	e7e5      	b.n	8019996 <__lo0bits+0x1e>
 80199ca:	2200      	movs	r2, #0
 80199cc:	e7e3      	b.n	8019996 <__lo0bits+0x1e>
 80199ce:	2220      	movs	r2, #32
 80199d0:	e7e1      	b.n	8019996 <__lo0bits+0x1e>
	...

080199d4 <__i2b>:
 80199d4:	b510      	push	{r4, lr}
 80199d6:	460c      	mov	r4, r1
 80199d8:	2101      	movs	r1, #1
 80199da:	f7ff feb9 	bl	8019750 <_Balloc>
 80199de:	4602      	mov	r2, r0
 80199e0:	b928      	cbnz	r0, 80199ee <__i2b+0x1a>
 80199e2:	4b05      	ldr	r3, [pc, #20]	; (80199f8 <__i2b+0x24>)
 80199e4:	f240 1145 	movw	r1, #325	; 0x145
 80199e8:	4804      	ldr	r0, [pc, #16]	; (80199fc <__i2b+0x28>)
 80199ea:	f000 fd1d 	bl	801a428 <__assert_func>
 80199ee:	2301      	movs	r3, #1
 80199f0:	6144      	str	r4, [r0, #20]
 80199f2:	6103      	str	r3, [r0, #16]
 80199f4:	bd10      	pop	{r4, pc}
 80199f6:	bf00      	nop
 80199f8:	0818df25 	.word	0x0818df25
 80199fc:	0818dfc2 	.word	0x0818dfc2

08019a00 <__multiply>:
 8019a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a04:	4691      	mov	r9, r2
 8019a06:	690a      	ldr	r2, [r1, #16]
 8019a08:	460c      	mov	r4, r1
 8019a0a:	b085      	sub	sp, #20
 8019a0c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8019a10:	429a      	cmp	r2, r3
 8019a12:	bfbe      	ittt	lt
 8019a14:	460b      	movlt	r3, r1
 8019a16:	464c      	movlt	r4, r9
 8019a18:	4699      	movlt	r9, r3
 8019a1a:	6927      	ldr	r7, [r4, #16]
 8019a1c:	68a3      	ldr	r3, [r4, #8]
 8019a1e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8019a22:	6861      	ldr	r1, [r4, #4]
 8019a24:	eb07 060a 	add.w	r6, r7, sl
 8019a28:	42b3      	cmp	r3, r6
 8019a2a:	bfb8      	it	lt
 8019a2c:	3101      	addlt	r1, #1
 8019a2e:	f7ff fe8f 	bl	8019750 <_Balloc>
 8019a32:	b930      	cbnz	r0, 8019a42 <__multiply+0x42>
 8019a34:	4602      	mov	r2, r0
 8019a36:	4b45      	ldr	r3, [pc, #276]	; (8019b4c <__multiply+0x14c>)
 8019a38:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8019a3c:	4844      	ldr	r0, [pc, #272]	; (8019b50 <__multiply+0x150>)
 8019a3e:	f000 fcf3 	bl	801a428 <__assert_func>
 8019a42:	f100 0514 	add.w	r5, r0, #20
 8019a46:	2200      	movs	r2, #0
 8019a48:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8019a4c:	462b      	mov	r3, r5
 8019a4e:	4543      	cmp	r3, r8
 8019a50:	d321      	bcc.n	8019a96 <__multiply+0x96>
 8019a52:	f104 0314 	add.w	r3, r4, #20
 8019a56:	f104 0115 	add.w	r1, r4, #21
 8019a5a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8019a5e:	f109 0314 	add.w	r3, r9, #20
 8019a62:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8019a66:	9202      	str	r2, [sp, #8]
 8019a68:	1b3a      	subs	r2, r7, r4
 8019a6a:	3a15      	subs	r2, #21
 8019a6c:	f022 0203 	bic.w	r2, r2, #3
 8019a70:	3204      	adds	r2, #4
 8019a72:	428f      	cmp	r7, r1
 8019a74:	bf38      	it	cc
 8019a76:	2204      	movcc	r2, #4
 8019a78:	9201      	str	r2, [sp, #4]
 8019a7a:	9a02      	ldr	r2, [sp, #8]
 8019a7c:	9303      	str	r3, [sp, #12]
 8019a7e:	429a      	cmp	r2, r3
 8019a80:	d80c      	bhi.n	8019a9c <__multiply+0x9c>
 8019a82:	2e00      	cmp	r6, #0
 8019a84:	dd03      	ble.n	8019a8e <__multiply+0x8e>
 8019a86:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8019a8a:	2b00      	cmp	r3, #0
 8019a8c:	d05b      	beq.n	8019b46 <__multiply+0x146>
 8019a8e:	6106      	str	r6, [r0, #16]
 8019a90:	b005      	add	sp, #20
 8019a92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019a96:	f843 2b04 	str.w	r2, [r3], #4
 8019a9a:	e7d8      	b.n	8019a4e <__multiply+0x4e>
 8019a9c:	f8b3 a000 	ldrh.w	sl, [r3]
 8019aa0:	f1ba 0f00 	cmp.w	sl, #0
 8019aa4:	d024      	beq.n	8019af0 <__multiply+0xf0>
 8019aa6:	f104 0e14 	add.w	lr, r4, #20
 8019aaa:	46a9      	mov	r9, r5
 8019aac:	f04f 0c00 	mov.w	ip, #0
 8019ab0:	f85e 2b04 	ldr.w	r2, [lr], #4
 8019ab4:	f8d9 1000 	ldr.w	r1, [r9]
 8019ab8:	fa1f fb82 	uxth.w	fp, r2
 8019abc:	4577      	cmp	r7, lr
 8019abe:	b289      	uxth	r1, r1
 8019ac0:	fb0a 110b 	mla	r1, sl, fp, r1
 8019ac4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8019ac8:	f8d9 2000 	ldr.w	r2, [r9]
 8019acc:	4461      	add	r1, ip
 8019ace:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8019ad2:	fb0a c20b 	mla	r2, sl, fp, ip
 8019ad6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8019ada:	b289      	uxth	r1, r1
 8019adc:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8019ae0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8019ae4:	f849 1b04 	str.w	r1, [r9], #4
 8019ae8:	d8e2      	bhi.n	8019ab0 <__multiply+0xb0>
 8019aea:	9a01      	ldr	r2, [sp, #4]
 8019aec:	f845 c002 	str.w	ip, [r5, r2]
 8019af0:	9a03      	ldr	r2, [sp, #12]
 8019af2:	3304      	adds	r3, #4
 8019af4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8019af8:	f1b9 0f00 	cmp.w	r9, #0
 8019afc:	d021      	beq.n	8019b42 <__multiply+0x142>
 8019afe:	6829      	ldr	r1, [r5, #0]
 8019b00:	f104 0c14 	add.w	ip, r4, #20
 8019b04:	46ae      	mov	lr, r5
 8019b06:	f04f 0a00 	mov.w	sl, #0
 8019b0a:	f8bc b000 	ldrh.w	fp, [ip]
 8019b0e:	b289      	uxth	r1, r1
 8019b10:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8019b14:	fb09 220b 	mla	r2, r9, fp, r2
 8019b18:	4452      	add	r2, sl
 8019b1a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8019b1e:	f84e 1b04 	str.w	r1, [lr], #4
 8019b22:	f85c 1b04 	ldr.w	r1, [ip], #4
 8019b26:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8019b2a:	f8be 1000 	ldrh.w	r1, [lr]
 8019b2e:	4567      	cmp	r7, ip
 8019b30:	fb09 110a 	mla	r1, r9, sl, r1
 8019b34:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8019b38:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8019b3c:	d8e5      	bhi.n	8019b0a <__multiply+0x10a>
 8019b3e:	9a01      	ldr	r2, [sp, #4]
 8019b40:	50a9      	str	r1, [r5, r2]
 8019b42:	3504      	adds	r5, #4
 8019b44:	e799      	b.n	8019a7a <__multiply+0x7a>
 8019b46:	3e01      	subs	r6, #1
 8019b48:	e79b      	b.n	8019a82 <__multiply+0x82>
 8019b4a:	bf00      	nop
 8019b4c:	0818df25 	.word	0x0818df25
 8019b50:	0818dfc2 	.word	0x0818dfc2

08019b54 <__pow5mult>:
 8019b54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019b58:	4615      	mov	r5, r2
 8019b5a:	f012 0203 	ands.w	r2, r2, #3
 8019b5e:	4606      	mov	r6, r0
 8019b60:	460f      	mov	r7, r1
 8019b62:	d007      	beq.n	8019b74 <__pow5mult+0x20>
 8019b64:	3a01      	subs	r2, #1
 8019b66:	4c25      	ldr	r4, [pc, #148]	; (8019bfc <__pow5mult+0xa8>)
 8019b68:	2300      	movs	r3, #0
 8019b6a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8019b6e:	f7ff fe51 	bl	8019814 <__multadd>
 8019b72:	4607      	mov	r7, r0
 8019b74:	10ad      	asrs	r5, r5, #2
 8019b76:	d03d      	beq.n	8019bf4 <__pow5mult+0xa0>
 8019b78:	69f4      	ldr	r4, [r6, #28]
 8019b7a:	b97c      	cbnz	r4, 8019b9c <__pow5mult+0x48>
 8019b7c:	2010      	movs	r0, #16
 8019b7e:	f7fb fdc1 	bl	8015704 <malloc>
 8019b82:	4602      	mov	r2, r0
 8019b84:	61f0      	str	r0, [r6, #28]
 8019b86:	b928      	cbnz	r0, 8019b94 <__pow5mult+0x40>
 8019b88:	4b1d      	ldr	r3, [pc, #116]	; (8019c00 <__pow5mult+0xac>)
 8019b8a:	f240 11b3 	movw	r1, #435	; 0x1b3
 8019b8e:	481d      	ldr	r0, [pc, #116]	; (8019c04 <__pow5mult+0xb0>)
 8019b90:	f000 fc4a 	bl	801a428 <__assert_func>
 8019b94:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8019b98:	6004      	str	r4, [r0, #0]
 8019b9a:	60c4      	str	r4, [r0, #12]
 8019b9c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8019ba0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8019ba4:	b94c      	cbnz	r4, 8019bba <__pow5mult+0x66>
 8019ba6:	f240 2171 	movw	r1, #625	; 0x271
 8019baa:	4630      	mov	r0, r6
 8019bac:	f7ff ff12 	bl	80199d4 <__i2b>
 8019bb0:	2300      	movs	r3, #0
 8019bb2:	4604      	mov	r4, r0
 8019bb4:	f8c8 0008 	str.w	r0, [r8, #8]
 8019bb8:	6003      	str	r3, [r0, #0]
 8019bba:	f04f 0900 	mov.w	r9, #0
 8019bbe:	07eb      	lsls	r3, r5, #31
 8019bc0:	d50a      	bpl.n	8019bd8 <__pow5mult+0x84>
 8019bc2:	4639      	mov	r1, r7
 8019bc4:	4622      	mov	r2, r4
 8019bc6:	4630      	mov	r0, r6
 8019bc8:	f7ff ff1a 	bl	8019a00 <__multiply>
 8019bcc:	4680      	mov	r8, r0
 8019bce:	4639      	mov	r1, r7
 8019bd0:	4630      	mov	r0, r6
 8019bd2:	4647      	mov	r7, r8
 8019bd4:	f7ff fdfc 	bl	80197d0 <_Bfree>
 8019bd8:	106d      	asrs	r5, r5, #1
 8019bda:	d00b      	beq.n	8019bf4 <__pow5mult+0xa0>
 8019bdc:	6820      	ldr	r0, [r4, #0]
 8019bde:	b938      	cbnz	r0, 8019bf0 <__pow5mult+0x9c>
 8019be0:	4622      	mov	r2, r4
 8019be2:	4621      	mov	r1, r4
 8019be4:	4630      	mov	r0, r6
 8019be6:	f7ff ff0b 	bl	8019a00 <__multiply>
 8019bea:	6020      	str	r0, [r4, #0]
 8019bec:	f8c0 9000 	str.w	r9, [r0]
 8019bf0:	4604      	mov	r4, r0
 8019bf2:	e7e4      	b.n	8019bbe <__pow5mult+0x6a>
 8019bf4:	4638      	mov	r0, r7
 8019bf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019bfa:	bf00      	nop
 8019bfc:	0818e110 	.word	0x0818e110
 8019c00:	0818deb6 	.word	0x0818deb6
 8019c04:	0818dfc2 	.word	0x0818dfc2

08019c08 <__lshift>:
 8019c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019c0c:	460c      	mov	r4, r1
 8019c0e:	4607      	mov	r7, r0
 8019c10:	4691      	mov	r9, r2
 8019c12:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8019c16:	6923      	ldr	r3, [r4, #16]
 8019c18:	6849      	ldr	r1, [r1, #4]
 8019c1a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8019c1e:	68a3      	ldr	r3, [r4, #8]
 8019c20:	f108 0601 	add.w	r6, r8, #1
 8019c24:	42b3      	cmp	r3, r6
 8019c26:	db0b      	blt.n	8019c40 <__lshift+0x38>
 8019c28:	4638      	mov	r0, r7
 8019c2a:	f7ff fd91 	bl	8019750 <_Balloc>
 8019c2e:	4605      	mov	r5, r0
 8019c30:	b948      	cbnz	r0, 8019c46 <__lshift+0x3e>
 8019c32:	4602      	mov	r2, r0
 8019c34:	4b28      	ldr	r3, [pc, #160]	; (8019cd8 <__lshift+0xd0>)
 8019c36:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8019c3a:	4828      	ldr	r0, [pc, #160]	; (8019cdc <__lshift+0xd4>)
 8019c3c:	f000 fbf4 	bl	801a428 <__assert_func>
 8019c40:	3101      	adds	r1, #1
 8019c42:	005b      	lsls	r3, r3, #1
 8019c44:	e7ee      	b.n	8019c24 <__lshift+0x1c>
 8019c46:	2300      	movs	r3, #0
 8019c48:	f100 0114 	add.w	r1, r0, #20
 8019c4c:	f100 0210 	add.w	r2, r0, #16
 8019c50:	4618      	mov	r0, r3
 8019c52:	4553      	cmp	r3, sl
 8019c54:	db33      	blt.n	8019cbe <__lshift+0xb6>
 8019c56:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8019c5a:	f104 0314 	add.w	r3, r4, #20
 8019c5e:	6920      	ldr	r0, [r4, #16]
 8019c60:	f019 091f 	ands.w	r9, r9, #31
 8019c64:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8019c68:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8019c6c:	d02b      	beq.n	8019cc6 <__lshift+0xbe>
 8019c6e:	f1c9 0e20 	rsb	lr, r9, #32
 8019c72:	468a      	mov	sl, r1
 8019c74:	2200      	movs	r2, #0
 8019c76:	6818      	ldr	r0, [r3, #0]
 8019c78:	fa00 f009 	lsl.w	r0, r0, r9
 8019c7c:	4310      	orrs	r0, r2
 8019c7e:	f84a 0b04 	str.w	r0, [sl], #4
 8019c82:	f853 2b04 	ldr.w	r2, [r3], #4
 8019c86:	459c      	cmp	ip, r3
 8019c88:	fa22 f20e 	lsr.w	r2, r2, lr
 8019c8c:	d8f3      	bhi.n	8019c76 <__lshift+0x6e>
 8019c8e:	ebac 0304 	sub.w	r3, ip, r4
 8019c92:	f104 0015 	add.w	r0, r4, #21
 8019c96:	3b15      	subs	r3, #21
 8019c98:	f023 0303 	bic.w	r3, r3, #3
 8019c9c:	3304      	adds	r3, #4
 8019c9e:	4584      	cmp	ip, r0
 8019ca0:	bf38      	it	cc
 8019ca2:	2304      	movcc	r3, #4
 8019ca4:	50ca      	str	r2, [r1, r3]
 8019ca6:	b10a      	cbz	r2, 8019cac <__lshift+0xa4>
 8019ca8:	f108 0602 	add.w	r6, r8, #2
 8019cac:	3e01      	subs	r6, #1
 8019cae:	4638      	mov	r0, r7
 8019cb0:	4621      	mov	r1, r4
 8019cb2:	612e      	str	r6, [r5, #16]
 8019cb4:	f7ff fd8c 	bl	80197d0 <_Bfree>
 8019cb8:	4628      	mov	r0, r5
 8019cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019cbe:	3301      	adds	r3, #1
 8019cc0:	f842 0f04 	str.w	r0, [r2, #4]!
 8019cc4:	e7c5      	b.n	8019c52 <__lshift+0x4a>
 8019cc6:	3904      	subs	r1, #4
 8019cc8:	f853 2b04 	ldr.w	r2, [r3], #4
 8019ccc:	459c      	cmp	ip, r3
 8019cce:	f841 2f04 	str.w	r2, [r1, #4]!
 8019cd2:	d8f9      	bhi.n	8019cc8 <__lshift+0xc0>
 8019cd4:	e7ea      	b.n	8019cac <__lshift+0xa4>
 8019cd6:	bf00      	nop
 8019cd8:	0818df25 	.word	0x0818df25
 8019cdc:	0818dfc2 	.word	0x0818dfc2

08019ce0 <__mcmp>:
 8019ce0:	6902      	ldr	r2, [r0, #16]
 8019ce2:	b530      	push	{r4, r5, lr}
 8019ce4:	690c      	ldr	r4, [r1, #16]
 8019ce6:	1b12      	subs	r2, r2, r4
 8019ce8:	d10e      	bne.n	8019d08 <__mcmp+0x28>
 8019cea:	f100 0314 	add.w	r3, r0, #20
 8019cee:	3114      	adds	r1, #20
 8019cf0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8019cf4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8019cf8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8019cfc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8019d00:	42a5      	cmp	r5, r4
 8019d02:	d003      	beq.n	8019d0c <__mcmp+0x2c>
 8019d04:	d305      	bcc.n	8019d12 <__mcmp+0x32>
 8019d06:	2201      	movs	r2, #1
 8019d08:	4610      	mov	r0, r2
 8019d0a:	bd30      	pop	{r4, r5, pc}
 8019d0c:	4283      	cmp	r3, r0
 8019d0e:	d3f3      	bcc.n	8019cf8 <__mcmp+0x18>
 8019d10:	e7fa      	b.n	8019d08 <__mcmp+0x28>
 8019d12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019d16:	e7f7      	b.n	8019d08 <__mcmp+0x28>

08019d18 <__mdiff>:
 8019d18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019d1c:	460c      	mov	r4, r1
 8019d1e:	4606      	mov	r6, r0
 8019d20:	4611      	mov	r1, r2
 8019d22:	4692      	mov	sl, r2
 8019d24:	4620      	mov	r0, r4
 8019d26:	f7ff ffdb 	bl	8019ce0 <__mcmp>
 8019d2a:	1e05      	subs	r5, r0, #0
 8019d2c:	d110      	bne.n	8019d50 <__mdiff+0x38>
 8019d2e:	4629      	mov	r1, r5
 8019d30:	4630      	mov	r0, r6
 8019d32:	f7ff fd0d 	bl	8019750 <_Balloc>
 8019d36:	b930      	cbnz	r0, 8019d46 <__mdiff+0x2e>
 8019d38:	4b3d      	ldr	r3, [pc, #244]	; (8019e30 <__mdiff+0x118>)
 8019d3a:	4602      	mov	r2, r0
 8019d3c:	f240 2137 	movw	r1, #567	; 0x237
 8019d40:	483c      	ldr	r0, [pc, #240]	; (8019e34 <__mdiff+0x11c>)
 8019d42:	f000 fb71 	bl	801a428 <__assert_func>
 8019d46:	2301      	movs	r3, #1
 8019d48:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8019d4c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019d50:	bfa4      	itt	ge
 8019d52:	4653      	movge	r3, sl
 8019d54:	46a2      	movge	sl, r4
 8019d56:	4630      	mov	r0, r6
 8019d58:	bfa8      	it	ge
 8019d5a:	2500      	movge	r5, #0
 8019d5c:	f8da 1004 	ldr.w	r1, [sl, #4]
 8019d60:	bfac      	ite	ge
 8019d62:	461c      	movge	r4, r3
 8019d64:	2501      	movlt	r5, #1
 8019d66:	f7ff fcf3 	bl	8019750 <_Balloc>
 8019d6a:	b920      	cbnz	r0, 8019d76 <__mdiff+0x5e>
 8019d6c:	4b30      	ldr	r3, [pc, #192]	; (8019e30 <__mdiff+0x118>)
 8019d6e:	4602      	mov	r2, r0
 8019d70:	f240 2145 	movw	r1, #581	; 0x245
 8019d74:	e7e4      	b.n	8019d40 <__mdiff+0x28>
 8019d76:	f8da 7010 	ldr.w	r7, [sl, #16]
 8019d7a:	f104 0914 	add.w	r9, r4, #20
 8019d7e:	6926      	ldr	r6, [r4, #16]
 8019d80:	f100 0814 	add.w	r8, r0, #20
 8019d84:	60c5      	str	r5, [r0, #12]
 8019d86:	f10a 0514 	add.w	r5, sl, #20
 8019d8a:	f10a 0210 	add.w	r2, sl, #16
 8019d8e:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8019d92:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8019d96:	46c2      	mov	sl, r8
 8019d98:	f04f 0c00 	mov.w	ip, #0
 8019d9c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8019da0:	f859 3b04 	ldr.w	r3, [r9], #4
 8019da4:	fa1f f18b 	uxth.w	r1, fp
 8019da8:	454e      	cmp	r6, r9
 8019daa:	4461      	add	r1, ip
 8019dac:	fa1f fc83 	uxth.w	ip, r3
 8019db0:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8019db4:	eba1 010c 	sub.w	r1, r1, ip
 8019db8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8019dbc:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8019dc0:	b289      	uxth	r1, r1
 8019dc2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8019dc6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8019dca:	f84a 1b04 	str.w	r1, [sl], #4
 8019dce:	d8e5      	bhi.n	8019d9c <__mdiff+0x84>
 8019dd0:	1b33      	subs	r3, r6, r4
 8019dd2:	3415      	adds	r4, #21
 8019dd4:	3b15      	subs	r3, #21
 8019dd6:	f023 0303 	bic.w	r3, r3, #3
 8019dda:	3304      	adds	r3, #4
 8019ddc:	42a6      	cmp	r6, r4
 8019dde:	bf38      	it	cc
 8019de0:	2304      	movcc	r3, #4
 8019de2:	441d      	add	r5, r3
 8019de4:	4443      	add	r3, r8
 8019de6:	462c      	mov	r4, r5
 8019de8:	461e      	mov	r6, r3
 8019dea:	4574      	cmp	r4, lr
 8019dec:	d30e      	bcc.n	8019e0c <__mdiff+0xf4>
 8019dee:	f10e 0203 	add.w	r2, lr, #3
 8019df2:	1b52      	subs	r2, r2, r5
 8019df4:	3d03      	subs	r5, #3
 8019df6:	f022 0203 	bic.w	r2, r2, #3
 8019dfa:	45ae      	cmp	lr, r5
 8019dfc:	bf38      	it	cc
 8019dfe:	2200      	movcc	r2, #0
 8019e00:	4413      	add	r3, r2
 8019e02:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8019e06:	b18a      	cbz	r2, 8019e2c <__mdiff+0x114>
 8019e08:	6107      	str	r7, [r0, #16]
 8019e0a:	e79f      	b.n	8019d4c <__mdiff+0x34>
 8019e0c:	f854 8b04 	ldr.w	r8, [r4], #4
 8019e10:	fa1f f288 	uxth.w	r2, r8
 8019e14:	4462      	add	r2, ip
 8019e16:	1411      	asrs	r1, r2, #16
 8019e18:	b292      	uxth	r2, r2
 8019e1a:	eb01 4118 	add.w	r1, r1, r8, lsr #16
 8019e1e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8019e22:	ea4f 4c21 	mov.w	ip, r1, asr #16
 8019e26:	f846 2b04 	str.w	r2, [r6], #4
 8019e2a:	e7de      	b.n	8019dea <__mdiff+0xd2>
 8019e2c:	3f01      	subs	r7, #1
 8019e2e:	e7e8      	b.n	8019e02 <__mdiff+0xea>
 8019e30:	0818df25 	.word	0x0818df25
 8019e34:	0818dfc2 	.word	0x0818dfc2

08019e38 <__ulp>:
 8019e38:	b082      	sub	sp, #8
 8019e3a:	4b11      	ldr	r3, [pc, #68]	; (8019e80 <__ulp+0x48>)
 8019e3c:	ed8d 0b00 	vstr	d0, [sp]
 8019e40:	9a01      	ldr	r2, [sp, #4]
 8019e42:	4013      	ands	r3, r2
 8019e44:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8019e48:	2b00      	cmp	r3, #0
 8019e4a:	dc08      	bgt.n	8019e5e <__ulp+0x26>
 8019e4c:	425b      	negs	r3, r3
 8019e4e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8019e52:	ea4f 5223 	mov.w	r2, r3, asr #20
 8019e56:	da04      	bge.n	8019e62 <__ulp+0x2a>
 8019e58:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8019e5c:	4113      	asrs	r3, r2
 8019e5e:	2200      	movs	r2, #0
 8019e60:	e008      	b.n	8019e74 <__ulp+0x3c>
 8019e62:	f1a2 0314 	sub.w	r3, r2, #20
 8019e66:	2b1e      	cmp	r3, #30
 8019e68:	bfd6      	itet	le
 8019e6a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8019e6e:	2201      	movgt	r2, #1
 8019e70:	40da      	lsrle	r2, r3
 8019e72:	2300      	movs	r3, #0
 8019e74:	4619      	mov	r1, r3
 8019e76:	4610      	mov	r0, r2
 8019e78:	ec41 0b10 	vmov	d0, r0, r1
 8019e7c:	b002      	add	sp, #8
 8019e7e:	4770      	bx	lr
 8019e80:	7ff00000 	.word	0x7ff00000

08019e84 <__b2d>:
 8019e84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019e88:	6906      	ldr	r6, [r0, #16]
 8019e8a:	f100 0814 	add.w	r8, r0, #20
 8019e8e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8019e92:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8019e96:	1f37      	subs	r7, r6, #4
 8019e98:	4610      	mov	r0, r2
 8019e9a:	f7ff fd4d 	bl	8019938 <__hi0bits>
 8019e9e:	f1c0 0320 	rsb	r3, r0, #32
 8019ea2:	280a      	cmp	r0, #10
 8019ea4:	600b      	str	r3, [r1, #0]
 8019ea6:	491d      	ldr	r1, [pc, #116]	; (8019f1c <__b2d+0x98>)
 8019ea8:	dc16      	bgt.n	8019ed8 <__b2d+0x54>
 8019eaa:	f1c0 0c0b 	rsb	ip, r0, #11
 8019eae:	45b8      	cmp	r8, r7
 8019eb0:	f100 0015 	add.w	r0, r0, #21
 8019eb4:	fa22 f30c 	lsr.w	r3, r2, ip
 8019eb8:	fa02 f000 	lsl.w	r0, r2, r0
 8019ebc:	ea43 0501 	orr.w	r5, r3, r1
 8019ec0:	bf34      	ite	cc
 8019ec2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8019ec6:	2300      	movcs	r3, #0
 8019ec8:	fa23 f30c 	lsr.w	r3, r3, ip
 8019ecc:	4303      	orrs	r3, r0
 8019ece:	461c      	mov	r4, r3
 8019ed0:	ec45 4b10 	vmov	d0, r4, r5
 8019ed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019ed8:	45b8      	cmp	r8, r7
 8019eda:	bf3a      	itte	cc
 8019edc:	f1a6 0708 	subcc.w	r7, r6, #8
 8019ee0:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8019ee4:	2300      	movcs	r3, #0
 8019ee6:	380b      	subs	r0, #11
 8019ee8:	d014      	beq.n	8019f14 <__b2d+0x90>
 8019eea:	f1c0 0120 	rsb	r1, r0, #32
 8019eee:	4082      	lsls	r2, r0
 8019ef0:	4547      	cmp	r7, r8
 8019ef2:	fa23 f401 	lsr.w	r4, r3, r1
 8019ef6:	fa03 f300 	lsl.w	r3, r3, r0
 8019efa:	ea42 0204 	orr.w	r2, r2, r4
 8019efe:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8019f02:	bf8c      	ite	hi
 8019f04:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8019f08:	2200      	movls	r2, #0
 8019f0a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8019f0e:	40ca      	lsrs	r2, r1
 8019f10:	4313      	orrs	r3, r2
 8019f12:	e7dc      	b.n	8019ece <__b2d+0x4a>
 8019f14:	ea42 0501 	orr.w	r5, r2, r1
 8019f18:	e7d9      	b.n	8019ece <__b2d+0x4a>
 8019f1a:	bf00      	nop
 8019f1c:	3ff00000 	.word	0x3ff00000

08019f20 <__d2b>:
 8019f20:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8019f24:	460f      	mov	r7, r1
 8019f26:	2101      	movs	r1, #1
 8019f28:	4616      	mov	r6, r2
 8019f2a:	ec59 8b10 	vmov	r8, r9, d0
 8019f2e:	f7ff fc0f 	bl	8019750 <_Balloc>
 8019f32:	4604      	mov	r4, r0
 8019f34:	b930      	cbnz	r0, 8019f44 <__d2b+0x24>
 8019f36:	4602      	mov	r2, r0
 8019f38:	4b24      	ldr	r3, [pc, #144]	; (8019fcc <__d2b+0xac>)
 8019f3a:	f240 310f 	movw	r1, #783	; 0x30f
 8019f3e:	4824      	ldr	r0, [pc, #144]	; (8019fd0 <__d2b+0xb0>)
 8019f40:	f000 fa72 	bl	801a428 <__assert_func>
 8019f44:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8019f48:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8019f4c:	bb2d      	cbnz	r5, 8019f9a <__d2b+0x7a>
 8019f4e:	9301      	str	r3, [sp, #4]
 8019f50:	f1b8 0300 	subs.w	r3, r8, #0
 8019f54:	d026      	beq.n	8019fa4 <__d2b+0x84>
 8019f56:	4668      	mov	r0, sp
 8019f58:	9300      	str	r3, [sp, #0]
 8019f5a:	f7ff fd0d 	bl	8019978 <__lo0bits>
 8019f5e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8019f62:	b1e8      	cbz	r0, 8019fa0 <__d2b+0x80>
 8019f64:	f1c0 0320 	rsb	r3, r0, #32
 8019f68:	fa02 f303 	lsl.w	r3, r2, r3
 8019f6c:	40c2      	lsrs	r2, r0
 8019f6e:	430b      	orrs	r3, r1
 8019f70:	9201      	str	r2, [sp, #4]
 8019f72:	6163      	str	r3, [r4, #20]
 8019f74:	9b01      	ldr	r3, [sp, #4]
 8019f76:	2b00      	cmp	r3, #0
 8019f78:	61a3      	str	r3, [r4, #24]
 8019f7a:	bf14      	ite	ne
 8019f7c:	2202      	movne	r2, #2
 8019f7e:	2201      	moveq	r2, #1
 8019f80:	6122      	str	r2, [r4, #16]
 8019f82:	b1bd      	cbz	r5, 8019fb4 <__d2b+0x94>
 8019f84:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8019f88:	4405      	add	r5, r0
 8019f8a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8019f8e:	603d      	str	r5, [r7, #0]
 8019f90:	6030      	str	r0, [r6, #0]
 8019f92:	4620      	mov	r0, r4
 8019f94:	b003      	add	sp, #12
 8019f96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019f9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8019f9e:	e7d6      	b.n	8019f4e <__d2b+0x2e>
 8019fa0:	6161      	str	r1, [r4, #20]
 8019fa2:	e7e7      	b.n	8019f74 <__d2b+0x54>
 8019fa4:	a801      	add	r0, sp, #4
 8019fa6:	f7ff fce7 	bl	8019978 <__lo0bits>
 8019faa:	9b01      	ldr	r3, [sp, #4]
 8019fac:	3020      	adds	r0, #32
 8019fae:	2201      	movs	r2, #1
 8019fb0:	6163      	str	r3, [r4, #20]
 8019fb2:	e7e5      	b.n	8019f80 <__d2b+0x60>
 8019fb4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8019fb8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8019fbc:	6038      	str	r0, [r7, #0]
 8019fbe:	6918      	ldr	r0, [r3, #16]
 8019fc0:	f7ff fcba 	bl	8019938 <__hi0bits>
 8019fc4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8019fc8:	e7e2      	b.n	8019f90 <__d2b+0x70>
 8019fca:	bf00      	nop
 8019fcc:	0818df25 	.word	0x0818df25
 8019fd0:	0818dfc2 	.word	0x0818dfc2

08019fd4 <__ratio>:
 8019fd4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019fd8:	4688      	mov	r8, r1
 8019fda:	4681      	mov	r9, r0
 8019fdc:	4669      	mov	r1, sp
 8019fde:	f7ff ff51 	bl	8019e84 <__b2d>
 8019fe2:	a901      	add	r1, sp, #4
 8019fe4:	4640      	mov	r0, r8
 8019fe6:	ec55 4b10 	vmov	r4, r5, d0
 8019fea:	f7ff ff4b 	bl	8019e84 <__b2d>
 8019fee:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8019ff2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8019ff6:	462f      	mov	r7, r5
 8019ff8:	eba3 0c02 	sub.w	ip, r3, r2
 8019ffc:	e9dd 3200 	ldrd	r3, r2, [sp]
 801a000:	ec51 0b10 	vmov	r0, r1, d0
 801a004:	1a9b      	subs	r3, r3, r2
 801a006:	468b      	mov	fp, r1
 801a008:	4620      	mov	r0, r4
 801a00a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801a00e:	2b00      	cmp	r3, #0
 801a010:	bfd5      	itete	le
 801a012:	460a      	movle	r2, r1
 801a014:	462a      	movgt	r2, r5
 801a016:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801a01a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801a01e:	bfd8      	it	le
 801a020:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801a024:	ee10 2a10 	vmov	r2, s0
 801a028:	4639      	mov	r1, r7
 801a02a:	465b      	mov	r3, fp
 801a02c:	f7e6 fc1c 	bl	8000868 <__aeabi_ddiv>
 801a030:	ec41 0b10 	vmov	d0, r0, r1
 801a034:	b003      	add	sp, #12
 801a036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a03a <__copybits>:
 801a03a:	3901      	subs	r1, #1
 801a03c:	f102 0314 	add.w	r3, r2, #20
 801a040:	1149      	asrs	r1, r1, #5
 801a042:	b570      	push	{r4, r5, r6, lr}
 801a044:	3101      	adds	r1, #1
 801a046:	6914      	ldr	r4, [r2, #16]
 801a048:	1f05      	subs	r5, r0, #4
 801a04a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801a04e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801a052:	42a3      	cmp	r3, r4
 801a054:	d30c      	bcc.n	801a070 <__copybits+0x36>
 801a056:	1aa3      	subs	r3, r4, r2
 801a058:	3211      	adds	r2, #17
 801a05a:	3b11      	subs	r3, #17
 801a05c:	f023 0303 	bic.w	r3, r3, #3
 801a060:	42a2      	cmp	r2, r4
 801a062:	bf88      	it	hi
 801a064:	2300      	movhi	r3, #0
 801a066:	4418      	add	r0, r3
 801a068:	2300      	movs	r3, #0
 801a06a:	4288      	cmp	r0, r1
 801a06c:	d305      	bcc.n	801a07a <__copybits+0x40>
 801a06e:	bd70      	pop	{r4, r5, r6, pc}
 801a070:	f853 6b04 	ldr.w	r6, [r3], #4
 801a074:	f845 6f04 	str.w	r6, [r5, #4]!
 801a078:	e7eb      	b.n	801a052 <__copybits+0x18>
 801a07a:	f840 3b04 	str.w	r3, [r0], #4
 801a07e:	e7f4      	b.n	801a06a <__copybits+0x30>

0801a080 <__any_on>:
 801a080:	f100 0214 	add.w	r2, r0, #20
 801a084:	114b      	asrs	r3, r1, #5
 801a086:	6900      	ldr	r0, [r0, #16]
 801a088:	4298      	cmp	r0, r3
 801a08a:	b510      	push	{r4, lr}
 801a08c:	db11      	blt.n	801a0b2 <__any_on+0x32>
 801a08e:	dd0a      	ble.n	801a0a6 <__any_on+0x26>
 801a090:	f011 011f 	ands.w	r1, r1, #31
 801a094:	d007      	beq.n	801a0a6 <__any_on+0x26>
 801a096:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801a09a:	fa24 f001 	lsr.w	r0, r4, r1
 801a09e:	fa00 f101 	lsl.w	r1, r0, r1
 801a0a2:	428c      	cmp	r4, r1
 801a0a4:	d10b      	bne.n	801a0be <__any_on+0x3e>
 801a0a6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801a0aa:	4293      	cmp	r3, r2
 801a0ac:	d803      	bhi.n	801a0b6 <__any_on+0x36>
 801a0ae:	2000      	movs	r0, #0
 801a0b0:	bd10      	pop	{r4, pc}
 801a0b2:	4603      	mov	r3, r0
 801a0b4:	e7f7      	b.n	801a0a6 <__any_on+0x26>
 801a0b6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801a0ba:	2900      	cmp	r1, #0
 801a0bc:	d0f5      	beq.n	801a0aa <__any_on+0x2a>
 801a0be:	2001      	movs	r0, #1
 801a0c0:	e7f6      	b.n	801a0b0 <__any_on+0x30>

0801a0c2 <__submore>:
 801a0c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a0c6:	460c      	mov	r4, r1
 801a0c8:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801a0ca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a0ce:	4299      	cmp	r1, r3
 801a0d0:	d11a      	bne.n	801a108 <__submore+0x46>
 801a0d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801a0d6:	f7fb fb45 	bl	8015764 <_malloc_r>
 801a0da:	b918      	cbnz	r0, 801a0e4 <__submore+0x22>
 801a0dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a0e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a0e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a0e8:	6360      	str	r0, [r4, #52]	; 0x34
 801a0ea:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801a0ee:	63a3      	str	r3, [r4, #56]	; 0x38
 801a0f0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801a0f4:	7083      	strb	r3, [r0, #2]
 801a0f6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801a0fa:	7043      	strb	r3, [r0, #1]
 801a0fc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801a100:	7003      	strb	r3, [r0, #0]
 801a102:	6020      	str	r0, [r4, #0]
 801a104:	2000      	movs	r0, #0
 801a106:	e7eb      	b.n	801a0e0 <__submore+0x1e>
 801a108:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801a10a:	0077      	lsls	r7, r6, #1
 801a10c:	463a      	mov	r2, r7
 801a10e:	f000 f80f 	bl	801a130 <_realloc_r>
 801a112:	4605      	mov	r5, r0
 801a114:	2800      	cmp	r0, #0
 801a116:	d0e1      	beq.n	801a0dc <__submore+0x1a>
 801a118:	eb00 0806 	add.w	r8, r0, r6
 801a11c:	4601      	mov	r1, r0
 801a11e:	4632      	mov	r2, r6
 801a120:	4640      	mov	r0, r8
 801a122:	f7fd fa1a 	bl	801755a <memcpy>
 801a126:	f8c4 8000 	str.w	r8, [r4]
 801a12a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801a12e:	e7e9      	b.n	801a104 <__submore+0x42>

0801a130 <_realloc_r>:
 801a130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a134:	4680      	mov	r8, r0
 801a136:	4614      	mov	r4, r2
 801a138:	460e      	mov	r6, r1
 801a13a:	b921      	cbnz	r1, 801a146 <_realloc_r+0x16>
 801a13c:	4611      	mov	r1, r2
 801a13e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a142:	f7fb bb0f 	b.w	8015764 <_malloc_r>
 801a146:	b92a      	cbnz	r2, 801a154 <_realloc_r+0x24>
 801a148:	4625      	mov	r5, r4
 801a14a:	f7fe f8ad 	bl	80182a8 <_free_r>
 801a14e:	4628      	mov	r0, r5
 801a150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a154:	f000 f986 	bl	801a464 <_malloc_usable_size_r>
 801a158:	4284      	cmp	r4, r0
 801a15a:	4607      	mov	r7, r0
 801a15c:	d802      	bhi.n	801a164 <_realloc_r+0x34>
 801a15e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801a162:	d812      	bhi.n	801a18a <_realloc_r+0x5a>
 801a164:	4621      	mov	r1, r4
 801a166:	4640      	mov	r0, r8
 801a168:	f7fb fafc 	bl	8015764 <_malloc_r>
 801a16c:	4605      	mov	r5, r0
 801a16e:	2800      	cmp	r0, #0
 801a170:	d0ed      	beq.n	801a14e <_realloc_r+0x1e>
 801a172:	42bc      	cmp	r4, r7
 801a174:	4622      	mov	r2, r4
 801a176:	4631      	mov	r1, r6
 801a178:	bf28      	it	cs
 801a17a:	463a      	movcs	r2, r7
 801a17c:	f7fd f9ed 	bl	801755a <memcpy>
 801a180:	4631      	mov	r1, r6
 801a182:	4640      	mov	r0, r8
 801a184:	f7fe f890 	bl	80182a8 <_free_r>
 801a188:	e7e1      	b.n	801a14e <_realloc_r+0x1e>
 801a18a:	4635      	mov	r5, r6
 801a18c:	e7df      	b.n	801a14e <_realloc_r+0x1e>
	...

0801a190 <_strtoul_l.constprop.0>:
 801a190:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a194:	4686      	mov	lr, r0
 801a196:	460d      	mov	r5, r1
 801a198:	4f35      	ldr	r7, [pc, #212]	; (801a270 <_strtoul_l.constprop.0+0xe0>)
 801a19a:	4628      	mov	r0, r5
 801a19c:	f815 4b01 	ldrb.w	r4, [r5], #1
 801a1a0:	5d3e      	ldrb	r6, [r7, r4]
 801a1a2:	f016 0608 	ands.w	r6, r6, #8
 801a1a6:	d1f8      	bne.n	801a19a <_strtoul_l.constprop.0+0xa>
 801a1a8:	2c2d      	cmp	r4, #45	; 0x2d
 801a1aa:	d130      	bne.n	801a20e <_strtoul_l.constprop.0+0x7e>
 801a1ac:	782c      	ldrb	r4, [r5, #0]
 801a1ae:	2601      	movs	r6, #1
 801a1b0:	1c85      	adds	r5, r0, #2
 801a1b2:	2b00      	cmp	r3, #0
 801a1b4:	d057      	beq.n	801a266 <_strtoul_l.constprop.0+0xd6>
 801a1b6:	2b10      	cmp	r3, #16
 801a1b8:	d109      	bne.n	801a1ce <_strtoul_l.constprop.0+0x3e>
 801a1ba:	2c30      	cmp	r4, #48	; 0x30
 801a1bc:	d107      	bne.n	801a1ce <_strtoul_l.constprop.0+0x3e>
 801a1be:	7828      	ldrb	r0, [r5, #0]
 801a1c0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801a1c4:	2858      	cmp	r0, #88	; 0x58
 801a1c6:	d149      	bne.n	801a25c <_strtoul_l.constprop.0+0xcc>
 801a1c8:	786c      	ldrb	r4, [r5, #1]
 801a1ca:	2310      	movs	r3, #16
 801a1cc:	3502      	adds	r5, #2
 801a1ce:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801a1d2:	2700      	movs	r7, #0
 801a1d4:	fbb8 f8f3 	udiv	r8, r8, r3
 801a1d8:	fb03 f908 	mul.w	r9, r3, r8
 801a1dc:	4638      	mov	r0, r7
 801a1de:	ea6f 0909 	mvn.w	r9, r9
 801a1e2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801a1e6:	f1bc 0f09 	cmp.w	ip, #9
 801a1ea:	d815      	bhi.n	801a218 <_strtoul_l.constprop.0+0x88>
 801a1ec:	4664      	mov	r4, ip
 801a1ee:	42a3      	cmp	r3, r4
 801a1f0:	dd23      	ble.n	801a23a <_strtoul_l.constprop.0+0xaa>
 801a1f2:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 801a1f6:	d007      	beq.n	801a208 <_strtoul_l.constprop.0+0x78>
 801a1f8:	4580      	cmp	r8, r0
 801a1fa:	d31b      	bcc.n	801a234 <_strtoul_l.constprop.0+0xa4>
 801a1fc:	d101      	bne.n	801a202 <_strtoul_l.constprop.0+0x72>
 801a1fe:	45a1      	cmp	r9, r4
 801a200:	db18      	blt.n	801a234 <_strtoul_l.constprop.0+0xa4>
 801a202:	fb00 4003 	mla	r0, r0, r3, r4
 801a206:	2701      	movs	r7, #1
 801a208:	f815 4b01 	ldrb.w	r4, [r5], #1
 801a20c:	e7e9      	b.n	801a1e2 <_strtoul_l.constprop.0+0x52>
 801a20e:	2c2b      	cmp	r4, #43	; 0x2b
 801a210:	bf04      	itt	eq
 801a212:	782c      	ldrbeq	r4, [r5, #0]
 801a214:	1c85      	addeq	r5, r0, #2
 801a216:	e7cc      	b.n	801a1b2 <_strtoul_l.constprop.0+0x22>
 801a218:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801a21c:	f1bc 0f19 	cmp.w	ip, #25
 801a220:	d801      	bhi.n	801a226 <_strtoul_l.constprop.0+0x96>
 801a222:	3c37      	subs	r4, #55	; 0x37
 801a224:	e7e3      	b.n	801a1ee <_strtoul_l.constprop.0+0x5e>
 801a226:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801a22a:	f1bc 0f19 	cmp.w	ip, #25
 801a22e:	d804      	bhi.n	801a23a <_strtoul_l.constprop.0+0xaa>
 801a230:	3c57      	subs	r4, #87	; 0x57
 801a232:	e7dc      	b.n	801a1ee <_strtoul_l.constprop.0+0x5e>
 801a234:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801a238:	e7e6      	b.n	801a208 <_strtoul_l.constprop.0+0x78>
 801a23a:	1c7b      	adds	r3, r7, #1
 801a23c:	d106      	bne.n	801a24c <_strtoul_l.constprop.0+0xbc>
 801a23e:	2322      	movs	r3, #34	; 0x22
 801a240:	4638      	mov	r0, r7
 801a242:	f8ce 3000 	str.w	r3, [lr]
 801a246:	b932      	cbnz	r2, 801a256 <_strtoul_l.constprop.0+0xc6>
 801a248:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a24c:	b106      	cbz	r6, 801a250 <_strtoul_l.constprop.0+0xc0>
 801a24e:	4240      	negs	r0, r0
 801a250:	2a00      	cmp	r2, #0
 801a252:	d0f9      	beq.n	801a248 <_strtoul_l.constprop.0+0xb8>
 801a254:	b107      	cbz	r7, 801a258 <_strtoul_l.constprop.0+0xc8>
 801a256:	1e69      	subs	r1, r5, #1
 801a258:	6011      	str	r1, [r2, #0]
 801a25a:	e7f5      	b.n	801a248 <_strtoul_l.constprop.0+0xb8>
 801a25c:	2430      	movs	r4, #48	; 0x30
 801a25e:	2b00      	cmp	r3, #0
 801a260:	d1b5      	bne.n	801a1ce <_strtoul_l.constprop.0+0x3e>
 801a262:	2308      	movs	r3, #8
 801a264:	e7b3      	b.n	801a1ce <_strtoul_l.constprop.0+0x3e>
 801a266:	2c30      	cmp	r4, #48	; 0x30
 801a268:	d0a9      	beq.n	801a1be <_strtoul_l.constprop.0+0x2e>
 801a26a:	230a      	movs	r3, #10
 801a26c:	e7af      	b.n	801a1ce <_strtoul_l.constprop.0+0x3e>
 801a26e:	bf00      	nop
 801a270:	0818dda9 	.word	0x0818dda9

0801a274 <_strtoul_r>:
 801a274:	f7ff bf8c 	b.w	801a190 <_strtoul_l.constprop.0>

0801a278 <__swbuf_r>:
 801a278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a27a:	460e      	mov	r6, r1
 801a27c:	4614      	mov	r4, r2
 801a27e:	4605      	mov	r5, r0
 801a280:	b118      	cbz	r0, 801a28a <__swbuf_r+0x12>
 801a282:	6a03      	ldr	r3, [r0, #32]
 801a284:	b90b      	cbnz	r3, 801a28a <__swbuf_r+0x12>
 801a286:	f7fc f8a3 	bl	80163d0 <__sinit>
 801a28a:	69a3      	ldr	r3, [r4, #24]
 801a28c:	60a3      	str	r3, [r4, #8]
 801a28e:	89a3      	ldrh	r3, [r4, #12]
 801a290:	071a      	lsls	r2, r3, #28
 801a292:	d525      	bpl.n	801a2e0 <__swbuf_r+0x68>
 801a294:	6923      	ldr	r3, [r4, #16]
 801a296:	b31b      	cbz	r3, 801a2e0 <__swbuf_r+0x68>
 801a298:	6823      	ldr	r3, [r4, #0]
 801a29a:	b2f6      	uxtb	r6, r6
 801a29c:	6922      	ldr	r2, [r4, #16]
 801a29e:	4637      	mov	r7, r6
 801a2a0:	1a98      	subs	r0, r3, r2
 801a2a2:	6963      	ldr	r3, [r4, #20]
 801a2a4:	4283      	cmp	r3, r0
 801a2a6:	dc04      	bgt.n	801a2b2 <__swbuf_r+0x3a>
 801a2a8:	4621      	mov	r1, r4
 801a2aa:	4628      	mov	r0, r5
 801a2ac:	f7ff fa28 	bl	8019700 <_fflush_r>
 801a2b0:	b9e0      	cbnz	r0, 801a2ec <__swbuf_r+0x74>
 801a2b2:	68a3      	ldr	r3, [r4, #8]
 801a2b4:	3b01      	subs	r3, #1
 801a2b6:	60a3      	str	r3, [r4, #8]
 801a2b8:	6823      	ldr	r3, [r4, #0]
 801a2ba:	1c5a      	adds	r2, r3, #1
 801a2bc:	6022      	str	r2, [r4, #0]
 801a2be:	701e      	strb	r6, [r3, #0]
 801a2c0:	1c43      	adds	r3, r0, #1
 801a2c2:	6962      	ldr	r2, [r4, #20]
 801a2c4:	429a      	cmp	r2, r3
 801a2c6:	d004      	beq.n	801a2d2 <__swbuf_r+0x5a>
 801a2c8:	89a3      	ldrh	r3, [r4, #12]
 801a2ca:	07db      	lsls	r3, r3, #31
 801a2cc:	d506      	bpl.n	801a2dc <__swbuf_r+0x64>
 801a2ce:	2e0a      	cmp	r6, #10
 801a2d0:	d104      	bne.n	801a2dc <__swbuf_r+0x64>
 801a2d2:	4621      	mov	r1, r4
 801a2d4:	4628      	mov	r0, r5
 801a2d6:	f7ff fa13 	bl	8019700 <_fflush_r>
 801a2da:	b938      	cbnz	r0, 801a2ec <__swbuf_r+0x74>
 801a2dc:	4638      	mov	r0, r7
 801a2de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a2e0:	4621      	mov	r1, r4
 801a2e2:	4628      	mov	r0, r5
 801a2e4:	f000 f806 	bl	801a2f4 <__swsetup_r>
 801a2e8:	2800      	cmp	r0, #0
 801a2ea:	d0d5      	beq.n	801a298 <__swbuf_r+0x20>
 801a2ec:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801a2f0:	e7f4      	b.n	801a2dc <__swbuf_r+0x64>
	...

0801a2f4 <__swsetup_r>:
 801a2f4:	b538      	push	{r3, r4, r5, lr}
 801a2f6:	4b2a      	ldr	r3, [pc, #168]	; (801a3a0 <__swsetup_r+0xac>)
 801a2f8:	4605      	mov	r5, r0
 801a2fa:	460c      	mov	r4, r1
 801a2fc:	6818      	ldr	r0, [r3, #0]
 801a2fe:	b118      	cbz	r0, 801a308 <__swsetup_r+0x14>
 801a300:	6a03      	ldr	r3, [r0, #32]
 801a302:	b90b      	cbnz	r3, 801a308 <__swsetup_r+0x14>
 801a304:	f7fc f864 	bl	80163d0 <__sinit>
 801a308:	89a3      	ldrh	r3, [r4, #12]
 801a30a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a30e:	0718      	lsls	r0, r3, #28
 801a310:	d422      	bmi.n	801a358 <__swsetup_r+0x64>
 801a312:	06d9      	lsls	r1, r3, #27
 801a314:	d407      	bmi.n	801a326 <__swsetup_r+0x32>
 801a316:	2309      	movs	r3, #9
 801a318:	602b      	str	r3, [r5, #0]
 801a31a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801a31e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a322:	81a3      	strh	r3, [r4, #12]
 801a324:	e034      	b.n	801a390 <__swsetup_r+0x9c>
 801a326:	0758      	lsls	r0, r3, #29
 801a328:	d512      	bpl.n	801a350 <__swsetup_r+0x5c>
 801a32a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a32c:	b141      	cbz	r1, 801a340 <__swsetup_r+0x4c>
 801a32e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a332:	4299      	cmp	r1, r3
 801a334:	d002      	beq.n	801a33c <__swsetup_r+0x48>
 801a336:	4628      	mov	r0, r5
 801a338:	f7fd ffb6 	bl	80182a8 <_free_r>
 801a33c:	2300      	movs	r3, #0
 801a33e:	6363      	str	r3, [r4, #52]	; 0x34
 801a340:	89a3      	ldrh	r3, [r4, #12]
 801a342:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801a346:	81a3      	strh	r3, [r4, #12]
 801a348:	2300      	movs	r3, #0
 801a34a:	6063      	str	r3, [r4, #4]
 801a34c:	6923      	ldr	r3, [r4, #16]
 801a34e:	6023      	str	r3, [r4, #0]
 801a350:	89a3      	ldrh	r3, [r4, #12]
 801a352:	f043 0308 	orr.w	r3, r3, #8
 801a356:	81a3      	strh	r3, [r4, #12]
 801a358:	6923      	ldr	r3, [r4, #16]
 801a35a:	b94b      	cbnz	r3, 801a370 <__swsetup_r+0x7c>
 801a35c:	89a3      	ldrh	r3, [r4, #12]
 801a35e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801a362:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a366:	d003      	beq.n	801a370 <__swsetup_r+0x7c>
 801a368:	4621      	mov	r1, r4
 801a36a:	4628      	mov	r0, r5
 801a36c:	f7fc ff25 	bl	80171ba <__smakebuf_r>
 801a370:	89a0      	ldrh	r0, [r4, #12]
 801a372:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a376:	f010 0301 	ands.w	r3, r0, #1
 801a37a:	d00a      	beq.n	801a392 <__swsetup_r+0x9e>
 801a37c:	2300      	movs	r3, #0
 801a37e:	60a3      	str	r3, [r4, #8]
 801a380:	6963      	ldr	r3, [r4, #20]
 801a382:	425b      	negs	r3, r3
 801a384:	61a3      	str	r3, [r4, #24]
 801a386:	6923      	ldr	r3, [r4, #16]
 801a388:	b943      	cbnz	r3, 801a39c <__swsetup_r+0xa8>
 801a38a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801a38e:	d1c4      	bne.n	801a31a <__swsetup_r+0x26>
 801a390:	bd38      	pop	{r3, r4, r5, pc}
 801a392:	0781      	lsls	r1, r0, #30
 801a394:	bf58      	it	pl
 801a396:	6963      	ldrpl	r3, [r4, #20]
 801a398:	60a3      	str	r3, [r4, #8]
 801a39a:	e7f4      	b.n	801a386 <__swsetup_r+0x92>
 801a39c:	2000      	movs	r0, #0
 801a39e:	e7f7      	b.n	801a390 <__swsetup_r+0x9c>
 801a3a0:	200002c8 	.word	0x200002c8

0801a3a4 <__ascii_wctomb>:
 801a3a4:	b149      	cbz	r1, 801a3ba <__ascii_wctomb+0x16>
 801a3a6:	2aff      	cmp	r2, #255	; 0xff
 801a3a8:	bf8d      	iteet	hi
 801a3aa:	238a      	movhi	r3, #138	; 0x8a
 801a3ac:	2001      	movls	r0, #1
 801a3ae:	700a      	strbls	r2, [r1, #0]
 801a3b0:	6003      	strhi	r3, [r0, #0]
 801a3b2:	bf88      	it	hi
 801a3b4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 801a3b8:	4770      	bx	lr
 801a3ba:	4608      	mov	r0, r1
 801a3bc:	4770      	bx	lr

0801a3be <_putc_r>:
 801a3be:	b570      	push	{r4, r5, r6, lr}
 801a3c0:	460d      	mov	r5, r1
 801a3c2:	4614      	mov	r4, r2
 801a3c4:	4606      	mov	r6, r0
 801a3c6:	b118      	cbz	r0, 801a3d0 <_putc_r+0x12>
 801a3c8:	6a03      	ldr	r3, [r0, #32]
 801a3ca:	b90b      	cbnz	r3, 801a3d0 <_putc_r+0x12>
 801a3cc:	f7fc f800 	bl	80163d0 <__sinit>
 801a3d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a3d2:	07d8      	lsls	r0, r3, #31
 801a3d4:	d405      	bmi.n	801a3e2 <_putc_r+0x24>
 801a3d6:	89a3      	ldrh	r3, [r4, #12]
 801a3d8:	0599      	lsls	r1, r3, #22
 801a3da:	d402      	bmi.n	801a3e2 <_putc_r+0x24>
 801a3dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a3de:	f7fd f8ac 	bl	801753a <__retarget_lock_acquire_recursive>
 801a3e2:	68a3      	ldr	r3, [r4, #8]
 801a3e4:	3b01      	subs	r3, #1
 801a3e6:	2b00      	cmp	r3, #0
 801a3e8:	60a3      	str	r3, [r4, #8]
 801a3ea:	da05      	bge.n	801a3f8 <_putc_r+0x3a>
 801a3ec:	69a2      	ldr	r2, [r4, #24]
 801a3ee:	4293      	cmp	r3, r2
 801a3f0:	db12      	blt.n	801a418 <_putc_r+0x5a>
 801a3f2:	b2eb      	uxtb	r3, r5
 801a3f4:	2b0a      	cmp	r3, #10
 801a3f6:	d00f      	beq.n	801a418 <_putc_r+0x5a>
 801a3f8:	6823      	ldr	r3, [r4, #0]
 801a3fa:	1c5a      	adds	r2, r3, #1
 801a3fc:	6022      	str	r2, [r4, #0]
 801a3fe:	701d      	strb	r5, [r3, #0]
 801a400:	b2ed      	uxtb	r5, r5
 801a402:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a404:	07da      	lsls	r2, r3, #31
 801a406:	d405      	bmi.n	801a414 <_putc_r+0x56>
 801a408:	89a3      	ldrh	r3, [r4, #12]
 801a40a:	059b      	lsls	r3, r3, #22
 801a40c:	d402      	bmi.n	801a414 <_putc_r+0x56>
 801a40e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a410:	f7fd f894 	bl	801753c <__retarget_lock_release_recursive>
 801a414:	4628      	mov	r0, r5
 801a416:	bd70      	pop	{r4, r5, r6, pc}
 801a418:	4629      	mov	r1, r5
 801a41a:	4622      	mov	r2, r4
 801a41c:	4630      	mov	r0, r6
 801a41e:	f7ff ff2b 	bl	801a278 <__swbuf_r>
 801a422:	4605      	mov	r5, r0
 801a424:	e7ed      	b.n	801a402 <_putc_r+0x44>
	...

0801a428 <__assert_func>:
 801a428:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a42a:	4614      	mov	r4, r2
 801a42c:	461a      	mov	r2, r3
 801a42e:	4b09      	ldr	r3, [pc, #36]	; (801a454 <__assert_func+0x2c>)
 801a430:	4605      	mov	r5, r0
 801a432:	681b      	ldr	r3, [r3, #0]
 801a434:	68d8      	ldr	r0, [r3, #12]
 801a436:	b14c      	cbz	r4, 801a44c <__assert_func+0x24>
 801a438:	4b07      	ldr	r3, [pc, #28]	; (801a458 <__assert_func+0x30>)
 801a43a:	9100      	str	r1, [sp, #0]
 801a43c:	4907      	ldr	r1, [pc, #28]	; (801a45c <__assert_func+0x34>)
 801a43e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801a442:	462b      	mov	r3, r5
 801a444:	f000 f816 	bl	801a474 <fiprintf>
 801a448:	f000 f826 	bl	801a498 <abort>
 801a44c:	4b04      	ldr	r3, [pc, #16]	; (801a460 <__assert_func+0x38>)
 801a44e:	461c      	mov	r4, r3
 801a450:	e7f3      	b.n	801a43a <__assert_func+0x12>
 801a452:	bf00      	nop
 801a454:	200002c8 	.word	0x200002c8
 801a458:	0818e11c 	.word	0x0818e11c
 801a45c:	0818e129 	.word	0x0818e129
 801a460:	0818e157 	.word	0x0818e157

0801a464 <_malloc_usable_size_r>:
 801a464:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a468:	1f18      	subs	r0, r3, #4
 801a46a:	2b00      	cmp	r3, #0
 801a46c:	bfbc      	itt	lt
 801a46e:	580b      	ldrlt	r3, [r1, r0]
 801a470:	18c0      	addlt	r0, r0, r3
 801a472:	4770      	bx	lr

0801a474 <fiprintf>:
 801a474:	b40e      	push	{r1, r2, r3}
 801a476:	b503      	push	{r0, r1, lr}
 801a478:	ab03      	add	r3, sp, #12
 801a47a:	4601      	mov	r1, r0
 801a47c:	4805      	ldr	r0, [pc, #20]	; (801a494 <fiprintf+0x20>)
 801a47e:	f853 2b04 	ldr.w	r2, [r3], #4
 801a482:	6800      	ldr	r0, [r0, #0]
 801a484:	9301      	str	r3, [sp, #4]
 801a486:	f7fe fe05 	bl	8019094 <_vfiprintf_r>
 801a48a:	b002      	add	sp, #8
 801a48c:	f85d eb04 	ldr.w	lr, [sp], #4
 801a490:	b003      	add	sp, #12
 801a492:	4770      	bx	lr
 801a494:	200002c8 	.word	0x200002c8

0801a498 <abort>:
 801a498:	2006      	movs	r0, #6
 801a49a:	b508      	push	{r3, lr}
 801a49c:	f000 f82c 	bl	801a4f8 <raise>
 801a4a0:	2001      	movs	r0, #1
 801a4a2:	f7e7 f8ab 	bl	80015fc <_exit>

0801a4a6 <_raise_r>:
 801a4a6:	291f      	cmp	r1, #31
 801a4a8:	b538      	push	{r3, r4, r5, lr}
 801a4aa:	4604      	mov	r4, r0
 801a4ac:	460d      	mov	r5, r1
 801a4ae:	d904      	bls.n	801a4ba <_raise_r+0x14>
 801a4b0:	2316      	movs	r3, #22
 801a4b2:	6003      	str	r3, [r0, #0]
 801a4b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a4b8:	bd38      	pop	{r3, r4, r5, pc}
 801a4ba:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801a4bc:	b112      	cbz	r2, 801a4c4 <_raise_r+0x1e>
 801a4be:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801a4c2:	b94b      	cbnz	r3, 801a4d8 <_raise_r+0x32>
 801a4c4:	4620      	mov	r0, r4
 801a4c6:	f000 f831 	bl	801a52c <_getpid_r>
 801a4ca:	462a      	mov	r2, r5
 801a4cc:	4601      	mov	r1, r0
 801a4ce:	4620      	mov	r0, r4
 801a4d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a4d4:	f000 b818 	b.w	801a508 <_kill_r>
 801a4d8:	2b01      	cmp	r3, #1
 801a4da:	d00a      	beq.n	801a4f2 <_raise_r+0x4c>
 801a4dc:	1c59      	adds	r1, r3, #1
 801a4de:	d103      	bne.n	801a4e8 <_raise_r+0x42>
 801a4e0:	2316      	movs	r3, #22
 801a4e2:	6003      	str	r3, [r0, #0]
 801a4e4:	2001      	movs	r0, #1
 801a4e6:	e7e7      	b.n	801a4b8 <_raise_r+0x12>
 801a4e8:	2400      	movs	r4, #0
 801a4ea:	4628      	mov	r0, r5
 801a4ec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801a4f0:	4798      	blx	r3
 801a4f2:	2000      	movs	r0, #0
 801a4f4:	e7e0      	b.n	801a4b8 <_raise_r+0x12>
	...

0801a4f8 <raise>:
 801a4f8:	4b02      	ldr	r3, [pc, #8]	; (801a504 <raise+0xc>)
 801a4fa:	4601      	mov	r1, r0
 801a4fc:	6818      	ldr	r0, [r3, #0]
 801a4fe:	f7ff bfd2 	b.w	801a4a6 <_raise_r>
 801a502:	bf00      	nop
 801a504:	200002c8 	.word	0x200002c8

0801a508 <_kill_r>:
 801a508:	b538      	push	{r3, r4, r5, lr}
 801a50a:	2300      	movs	r3, #0
 801a50c:	4d06      	ldr	r5, [pc, #24]	; (801a528 <_kill_r+0x20>)
 801a50e:	4604      	mov	r4, r0
 801a510:	4608      	mov	r0, r1
 801a512:	4611      	mov	r1, r2
 801a514:	602b      	str	r3, [r5, #0]
 801a516:	f7e7 f861 	bl	80015dc <_kill>
 801a51a:	1c43      	adds	r3, r0, #1
 801a51c:	d102      	bne.n	801a524 <_kill_r+0x1c>
 801a51e:	682b      	ldr	r3, [r5, #0]
 801a520:	b103      	cbz	r3, 801a524 <_kill_r+0x1c>
 801a522:	6023      	str	r3, [r4, #0]
 801a524:	bd38      	pop	{r3, r4, r5, pc}
 801a526:	bf00      	nop
 801a528:	20003564 	.word	0x20003564

0801a52c <_getpid_r>:
 801a52c:	f7e7 b84e 	b.w	80015cc <_getpid>

0801a530 <sqrt>:
 801a530:	b538      	push	{r3, r4, r5, lr}
 801a532:	ec55 4b10 	vmov	r4, r5, d0
 801a536:	ed2d 8b02 	vpush	{d8}
 801a53a:	f000 f825 	bl	801a588 <__ieee754_sqrt>
 801a53e:	4622      	mov	r2, r4
 801a540:	462b      	mov	r3, r5
 801a542:	4620      	mov	r0, r4
 801a544:	4629      	mov	r1, r5
 801a546:	eeb0 8a40 	vmov.f32	s16, s0
 801a54a:	eef0 8a60 	vmov.f32	s17, s1
 801a54e:	f7e6 fafb 	bl	8000b48 <__aeabi_dcmpun>
 801a552:	b990      	cbnz	r0, 801a57a <sqrt+0x4a>
 801a554:	2200      	movs	r2, #0
 801a556:	2300      	movs	r3, #0
 801a558:	4620      	mov	r0, r4
 801a55a:	4629      	mov	r1, r5
 801a55c:	f7e6 facc 	bl	8000af8 <__aeabi_dcmplt>
 801a560:	b158      	cbz	r0, 801a57a <sqrt+0x4a>
 801a562:	f7fc ffbf 	bl	80174e4 <__errno>
 801a566:	2321      	movs	r3, #33	; 0x21
 801a568:	2200      	movs	r2, #0
 801a56a:	6003      	str	r3, [r0, #0]
 801a56c:	2300      	movs	r3, #0
 801a56e:	4610      	mov	r0, r2
 801a570:	4619      	mov	r1, r3
 801a572:	f7e6 f979 	bl	8000868 <__aeabi_ddiv>
 801a576:	ec41 0b18 	vmov	d8, r0, r1
 801a57a:	eeb0 0a48 	vmov.f32	s0, s16
 801a57e:	eef0 0a68 	vmov.f32	s1, s17
 801a582:	ecbd 8b02 	vpop	{d8}
 801a586:	bd38      	pop	{r3, r4, r5, pc}

0801a588 <__ieee754_sqrt>:
 801a588:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a58c:	4e6b      	ldr	r6, [pc, #428]	; (801a73c <__ieee754_sqrt+0x1b4>)
 801a58e:	ee10 0a10 	vmov	r0, s0
 801a592:	ee10 2a10 	vmov	r2, s0
 801a596:	ec55 4b10 	vmov	r4, r5, d0
 801a59a:	43ae      	bics	r6, r5
 801a59c:	4629      	mov	r1, r5
 801a59e:	462b      	mov	r3, r5
 801a5a0:	d10d      	bne.n	801a5be <__ieee754_sqrt+0x36>
 801a5a2:	f7e6 f837 	bl	8000614 <__aeabi_dmul>
 801a5a6:	4602      	mov	r2, r0
 801a5a8:	460b      	mov	r3, r1
 801a5aa:	4620      	mov	r0, r4
 801a5ac:	4629      	mov	r1, r5
 801a5ae:	f7e5 fe7b 	bl	80002a8 <__adddf3>
 801a5b2:	4604      	mov	r4, r0
 801a5b4:	460d      	mov	r5, r1
 801a5b6:	ec45 4b10 	vmov	d0, r4, r5
 801a5ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a5be:	2d00      	cmp	r5, #0
 801a5c0:	dc0b      	bgt.n	801a5da <__ieee754_sqrt+0x52>
 801a5c2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801a5c6:	4326      	orrs	r6, r4
 801a5c8:	d0f5      	beq.n	801a5b6 <__ieee754_sqrt+0x2e>
 801a5ca:	b135      	cbz	r5, 801a5da <__ieee754_sqrt+0x52>
 801a5cc:	f7e5 fe6a 	bl	80002a4 <__aeabi_dsub>
 801a5d0:	4602      	mov	r2, r0
 801a5d2:	460b      	mov	r3, r1
 801a5d4:	f7e6 f948 	bl	8000868 <__aeabi_ddiv>
 801a5d8:	e7eb      	b.n	801a5b2 <__ieee754_sqrt+0x2a>
 801a5da:	1509      	asrs	r1, r1, #20
 801a5dc:	f000 8091 	beq.w	801a702 <__ieee754_sqrt+0x17a>
 801a5e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801a5e4:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 801a5e8:	07c9      	lsls	r1, r1, #31
 801a5ea:	f04f 0500 	mov.w	r5, #0
 801a5ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801a5f2:	ea4f 0666 	mov.w	r6, r6, asr #1
 801a5f6:	f04f 0e16 	mov.w	lr, #22
 801a5fa:	46ac      	mov	ip, r5
 801a5fc:	bf58      	it	pl
 801a5fe:	005b      	lslpl	r3, r3, #1
 801a600:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801a604:	bf5c      	itt	pl
 801a606:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 801a60a:	0052      	lslpl	r2, r2, #1
 801a60c:	005b      	lsls	r3, r3, #1
 801a60e:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801a612:	0052      	lsls	r2, r2, #1
 801a614:	eb0c 0001 	add.w	r0, ip, r1
 801a618:	4298      	cmp	r0, r3
 801a61a:	bfde      	ittt	le
 801a61c:	1a1b      	suble	r3, r3, r0
 801a61e:	eb00 0c01 	addle.w	ip, r0, r1
 801a622:	186d      	addle	r5, r5, r1
 801a624:	f1be 0e01 	subs.w	lr, lr, #1
 801a628:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801a62c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801a630:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801a634:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801a638:	d1ec      	bne.n	801a614 <__ieee754_sqrt+0x8c>
 801a63a:	4674      	mov	r4, lr
 801a63c:	2720      	movs	r7, #32
 801a63e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801a642:	4563      	cmp	r3, ip
 801a644:	eb01 000e 	add.w	r0, r1, lr
 801a648:	dc02      	bgt.n	801a650 <__ieee754_sqrt+0xc8>
 801a64a:	d114      	bne.n	801a676 <__ieee754_sqrt+0xee>
 801a64c:	4290      	cmp	r0, r2
 801a64e:	d812      	bhi.n	801a676 <__ieee754_sqrt+0xee>
 801a650:	2800      	cmp	r0, #0
 801a652:	eb00 0e01 	add.w	lr, r0, r1
 801a656:	da59      	bge.n	801a70c <__ieee754_sqrt+0x184>
 801a658:	f1be 0f00 	cmp.w	lr, #0
 801a65c:	db56      	blt.n	801a70c <__ieee754_sqrt+0x184>
 801a65e:	f10c 0801 	add.w	r8, ip, #1
 801a662:	eba3 030c 	sub.w	r3, r3, ip
 801a666:	4290      	cmp	r0, r2
 801a668:	440c      	add	r4, r1
 801a66a:	eba2 0200 	sub.w	r2, r2, r0
 801a66e:	bf88      	it	hi
 801a670:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 801a674:	46c4      	mov	ip, r8
 801a676:	005b      	lsls	r3, r3, #1
 801a678:	3f01      	subs	r7, #1
 801a67a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801a67e:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801a682:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801a686:	d1dc      	bne.n	801a642 <__ieee754_sqrt+0xba>
 801a688:	4313      	orrs	r3, r2
 801a68a:	d01b      	beq.n	801a6c4 <__ieee754_sqrt+0x13c>
 801a68c:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 801a740 <__ieee754_sqrt+0x1b8>
 801a690:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 801a744 <__ieee754_sqrt+0x1bc>
 801a694:	e9da 0100 	ldrd	r0, r1, [sl]
 801a698:	e9db 2300 	ldrd	r2, r3, [fp]
 801a69c:	e9da 8900 	ldrd	r8, r9, [sl]
 801a6a0:	f7e5 fe00 	bl	80002a4 <__aeabi_dsub>
 801a6a4:	4602      	mov	r2, r0
 801a6a6:	460b      	mov	r3, r1
 801a6a8:	4640      	mov	r0, r8
 801a6aa:	4649      	mov	r1, r9
 801a6ac:	f7e6 fa2e 	bl	8000b0c <__aeabi_dcmple>
 801a6b0:	b140      	cbz	r0, 801a6c4 <__ieee754_sqrt+0x13c>
 801a6b2:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 801a6b6:	e9da 0100 	ldrd	r0, r1, [sl]
 801a6ba:	e9db 2300 	ldrd	r2, r3, [fp]
 801a6be:	d127      	bne.n	801a710 <__ieee754_sqrt+0x188>
 801a6c0:	3501      	adds	r5, #1
 801a6c2:	463c      	mov	r4, r7
 801a6c4:	106a      	asrs	r2, r5, #1
 801a6c6:	07e9      	lsls	r1, r5, #31
 801a6c8:	ea4f 0354 	mov.w	r3, r4, lsr #1
 801a6cc:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 801a6d0:	bf48      	it	mi
 801a6d2:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801a6d6:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801a6da:	461c      	mov	r4, r3
 801a6dc:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 801a6e0:	e769      	b.n	801a5b6 <__ieee754_sqrt+0x2e>
 801a6e2:	0ad3      	lsrs	r3, r2, #11
 801a6e4:	3815      	subs	r0, #21
 801a6e6:	0552      	lsls	r2, r2, #21
 801a6e8:	2b00      	cmp	r3, #0
 801a6ea:	d0fa      	beq.n	801a6e2 <__ieee754_sqrt+0x15a>
 801a6ec:	02dc      	lsls	r4, r3, #11
 801a6ee:	d50a      	bpl.n	801a706 <__ieee754_sqrt+0x17e>
 801a6f0:	f1c1 0420 	rsb	r4, r1, #32
 801a6f4:	1e4d      	subs	r5, r1, #1
 801a6f6:	fa22 f404 	lsr.w	r4, r2, r4
 801a6fa:	408a      	lsls	r2, r1
 801a6fc:	1b41      	subs	r1, r0, r5
 801a6fe:	4323      	orrs	r3, r4
 801a700:	e76e      	b.n	801a5e0 <__ieee754_sqrt+0x58>
 801a702:	4608      	mov	r0, r1
 801a704:	e7f0      	b.n	801a6e8 <__ieee754_sqrt+0x160>
 801a706:	005b      	lsls	r3, r3, #1
 801a708:	3101      	adds	r1, #1
 801a70a:	e7ef      	b.n	801a6ec <__ieee754_sqrt+0x164>
 801a70c:	46e0      	mov	r8, ip
 801a70e:	e7a8      	b.n	801a662 <__ieee754_sqrt+0xda>
 801a710:	e9da 8900 	ldrd	r8, r9, [sl]
 801a714:	f7e5 fdc8 	bl	80002a8 <__adddf3>
 801a718:	4602      	mov	r2, r0
 801a71a:	460b      	mov	r3, r1
 801a71c:	4640      	mov	r0, r8
 801a71e:	4649      	mov	r1, r9
 801a720:	f7e6 f9ea 	bl	8000af8 <__aeabi_dcmplt>
 801a724:	b128      	cbz	r0, 801a732 <__ieee754_sqrt+0x1aa>
 801a726:	1ca0      	adds	r0, r4, #2
 801a728:	f104 0402 	add.w	r4, r4, #2
 801a72c:	bf08      	it	eq
 801a72e:	3501      	addeq	r5, #1
 801a730:	e7c8      	b.n	801a6c4 <__ieee754_sqrt+0x13c>
 801a732:	3401      	adds	r4, #1
 801a734:	f024 0401 	bic.w	r4, r4, #1
 801a738:	e7c4      	b.n	801a6c4 <__ieee754_sqrt+0x13c>
 801a73a:	bf00      	nop
 801a73c:	7ff00000 	.word	0x7ff00000
 801a740:	200002d0 	.word	0x200002d0
 801a744:	200002d8 	.word	0x200002d8

0801a748 <_init>:
 801a748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a74a:	bf00      	nop
 801a74c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a74e:	bc08      	pop	{r3}
 801a750:	469e      	mov	lr, r3
 801a752:	4770      	bx	lr

0801a754 <_fini>:
 801a754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a756:	bf00      	nop
 801a758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a75a:	bc08      	pop	{r3}
 801a75c:	469e      	mov	lr, r3
 801a75e:	4770      	bx	lr
