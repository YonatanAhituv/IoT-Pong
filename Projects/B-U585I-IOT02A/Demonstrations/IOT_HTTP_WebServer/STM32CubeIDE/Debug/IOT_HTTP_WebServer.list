
IOT_HTTP_WebServer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019a10  08000238  08000238  00010238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000035e8  08019c48  08019c48  00029c48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d230  0801d230  000302c8  2**0
                  CONTENTS
  4 .ARM          00000008  0801d230  0801d230  0002d230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801d238  0801d238  000302c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801d238  0801d238  0002d238  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0801d240  0801d240  0002d240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002c8  20000000  0801d248  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000031d0  200002c8  0801d510  000302c8  2**2
                  ALLOC
 10 ._user_heap_stack 00010000  20003498  0801d510  00033498  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  000302c8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000302fe  2**0
                  CONTENTS, READONLY
 13 .debug_info   00044630  00000000  00000000  00030341  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006e68  00000000  00000000  00074971  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003108  00000000  00000000  0007b7e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000025e7  00000000  00000000  0007e8e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00040a0d  00000000  00000000  00080ecf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003cf88  00000000  00000000  000c18dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0016a5e9  00000000  00000000  000fe864  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000e90c  00000000  00000000  00268e50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000b0  00000000  00000000  0027775c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	; (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	; (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	200002c8 	.word	0x200002c8
 8000254:	00000000 	.word	0x00000000
 8000258:	08019c30 	.word	0x08019c30

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	; (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	; (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	; (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	200002cc 	.word	0x200002cc
 8000274:	08019c30 	.word	0x08019c30

08000278 <strlen>:
 8000278:	4603      	mov	r3, r0
 800027a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027e:	2a00      	cmp	r2, #0
 8000280:	d1fb      	bne.n	800027a <strlen+0x2>
 8000282:	1a18      	subs	r0, r3, r0
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr

08000288 <strcmp>:
 8000288:	f810 2b01 	ldrb.w	r2, [r0], #1
 800028c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000290:	2a01      	cmp	r2, #1
 8000292:	bf28      	it	cs
 8000294:	429a      	cmpcs	r2, r3
 8000296:	d0f7      	beq.n	8000288 <strcmp>
 8000298:	1ad0      	subs	r0, r2, r3
 800029a:	4770      	bx	lr

0800029c <__aeabi_drsub>:
 800029c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a0:	e002      	b.n	80002a8 <__adddf3>
 80002a2:	bf00      	nop

080002a4 <__aeabi_dsub>:
 80002a4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002a8 <__adddf3>:
 80002a8:	b530      	push	{r4, r5, lr}
 80002aa:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ae:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b2:	ea94 0f05 	teq	r4, r5
 80002b6:	bf08      	it	eq
 80002b8:	ea90 0f02 	teqeq	r0, r2
 80002bc:	bf1f      	itttt	ne
 80002be:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002c6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ca:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ce:	f000 80e2 	beq.w	8000496 <__adddf3+0x1ee>
 80002d2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002d6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002da:	bfb8      	it	lt
 80002dc:	426d      	neglt	r5, r5
 80002de:	dd0c      	ble.n	80002fa <__adddf3+0x52>
 80002e0:	442c      	add	r4, r5
 80002e2:	ea80 0202 	eor.w	r2, r0, r2
 80002e6:	ea81 0303 	eor.w	r3, r1, r3
 80002ea:	ea82 0000 	eor.w	r0, r2, r0
 80002ee:	ea83 0101 	eor.w	r1, r3, r1
 80002f2:	ea80 0202 	eor.w	r2, r0, r2
 80002f6:	ea81 0303 	eor.w	r3, r1, r3
 80002fa:	2d36      	cmp	r5, #54	; 0x36
 80002fc:	bf88      	it	hi
 80002fe:	bd30      	pophi	{r4, r5, pc}
 8000300:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000304:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000308:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800030c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000310:	d002      	beq.n	8000318 <__adddf3+0x70>
 8000312:	4240      	negs	r0, r0
 8000314:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000318:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800031c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000320:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x84>
 8000326:	4252      	negs	r2, r2
 8000328:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800032c:	ea94 0f05 	teq	r4, r5
 8000330:	f000 80a7 	beq.w	8000482 <__adddf3+0x1da>
 8000334:	f1a4 0401 	sub.w	r4, r4, #1
 8000338:	f1d5 0e20 	rsbs	lr, r5, #32
 800033c:	db0d      	blt.n	800035a <__adddf3+0xb2>
 800033e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000342:	fa22 f205 	lsr.w	r2, r2, r5
 8000346:	1880      	adds	r0, r0, r2
 8000348:	f141 0100 	adc.w	r1, r1, #0
 800034c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000350:	1880      	adds	r0, r0, r2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	4159      	adcs	r1, r3
 8000358:	e00e      	b.n	8000378 <__adddf3+0xd0>
 800035a:	f1a5 0520 	sub.w	r5, r5, #32
 800035e:	f10e 0e20 	add.w	lr, lr, #32
 8000362:	2a01      	cmp	r2, #1
 8000364:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000368:	bf28      	it	cs
 800036a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800036e:	fa43 f305 	asr.w	r3, r3, r5
 8000372:	18c0      	adds	r0, r0, r3
 8000374:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000378:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800037c:	d507      	bpl.n	800038e <__adddf3+0xe6>
 800037e:	f04f 0e00 	mov.w	lr, #0
 8000382:	f1dc 0c00 	rsbs	ip, ip, #0
 8000386:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038a:	eb6e 0101 	sbc.w	r1, lr, r1
 800038e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000392:	d31b      	bcc.n	80003cc <__adddf3+0x124>
 8000394:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000398:	d30c      	bcc.n	80003b4 <__adddf3+0x10c>
 800039a:	0849      	lsrs	r1, r1, #1
 800039c:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a4:	f104 0401 	add.w	r4, r4, #1
 80003a8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003ac:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b0:	f080 809a 	bcs.w	80004e8 <__adddf3+0x240>
 80003b4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003b8:	bf08      	it	eq
 80003ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003be:	f150 0000 	adcs.w	r0, r0, #0
 80003c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003c6:	ea41 0105 	orr.w	r1, r1, r5
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d0:	4140      	adcs	r0, r0
 80003d2:	eb41 0101 	adc.w	r1, r1, r1
 80003d6:	3c01      	subs	r4, #1
 80003d8:	bf28      	it	cs
 80003da:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003de:	d2e9      	bcs.n	80003b4 <__adddf3+0x10c>
 80003e0:	f091 0f00 	teq	r1, #0
 80003e4:	bf04      	itt	eq
 80003e6:	4601      	moveq	r1, r0
 80003e8:	2000      	moveq	r0, #0
 80003ea:	fab1 f381 	clz	r3, r1
 80003ee:	bf08      	it	eq
 80003f0:	3320      	addeq	r3, #32
 80003f2:	f1a3 030b 	sub.w	r3, r3, #11
 80003f6:	f1b3 0220 	subs.w	r2, r3, #32
 80003fa:	da0c      	bge.n	8000416 <__adddf3+0x16e>
 80003fc:	320c      	adds	r2, #12
 80003fe:	dd08      	ble.n	8000412 <__adddf3+0x16a>
 8000400:	f102 0c14 	add.w	ip, r2, #20
 8000404:	f1c2 020c 	rsb	r2, r2, #12
 8000408:	fa01 f00c 	lsl.w	r0, r1, ip
 800040c:	fa21 f102 	lsr.w	r1, r1, r2
 8000410:	e00c      	b.n	800042c <__adddf3+0x184>
 8000412:	f102 0214 	add.w	r2, r2, #20
 8000416:	bfd8      	it	le
 8000418:	f1c2 0c20 	rsble	ip, r2, #32
 800041c:	fa01 f102 	lsl.w	r1, r1, r2
 8000420:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000424:	bfdc      	itt	le
 8000426:	ea41 010c 	orrle.w	r1, r1, ip
 800042a:	4090      	lslle	r0, r2
 800042c:	1ae4      	subs	r4, r4, r3
 800042e:	bfa2      	ittt	ge
 8000430:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000434:	4329      	orrge	r1, r5
 8000436:	bd30      	popge	{r4, r5, pc}
 8000438:	ea6f 0404 	mvn.w	r4, r4
 800043c:	3c1f      	subs	r4, #31
 800043e:	da1c      	bge.n	800047a <__adddf3+0x1d2>
 8000440:	340c      	adds	r4, #12
 8000442:	dc0e      	bgt.n	8000462 <__adddf3+0x1ba>
 8000444:	f104 0414 	add.w	r4, r4, #20
 8000448:	f1c4 0220 	rsb	r2, r4, #32
 800044c:	fa20 f004 	lsr.w	r0, r0, r4
 8000450:	fa01 f302 	lsl.w	r3, r1, r2
 8000454:	ea40 0003 	orr.w	r0, r0, r3
 8000458:	fa21 f304 	lsr.w	r3, r1, r4
 800045c:	ea45 0103 	orr.w	r1, r5, r3
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	f1c4 040c 	rsb	r4, r4, #12
 8000466:	f1c4 0220 	rsb	r2, r4, #32
 800046a:	fa20 f002 	lsr.w	r0, r0, r2
 800046e:	fa01 f304 	lsl.w	r3, r1, r4
 8000472:	ea40 0003 	orr.w	r0, r0, r3
 8000476:	4629      	mov	r1, r5
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	fa21 f004 	lsr.w	r0, r1, r4
 800047e:	4629      	mov	r1, r5
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	f094 0f00 	teq	r4, #0
 8000486:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048a:	bf06      	itte	eq
 800048c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000490:	3401      	addeq	r4, #1
 8000492:	3d01      	subne	r5, #1
 8000494:	e74e      	b.n	8000334 <__adddf3+0x8c>
 8000496:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049a:	bf18      	it	ne
 800049c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a0:	d029      	beq.n	80004f6 <__adddf3+0x24e>
 80004a2:	ea94 0f05 	teq	r4, r5
 80004a6:	bf08      	it	eq
 80004a8:	ea90 0f02 	teqeq	r0, r2
 80004ac:	d005      	beq.n	80004ba <__adddf3+0x212>
 80004ae:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b2:	bf04      	itt	eq
 80004b4:	4619      	moveq	r1, r3
 80004b6:	4610      	moveq	r0, r2
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	ea91 0f03 	teq	r1, r3
 80004be:	bf1e      	ittt	ne
 80004c0:	2100      	movne	r1, #0
 80004c2:	2000      	movne	r0, #0
 80004c4:	bd30      	popne	{r4, r5, pc}
 80004c6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ca:	d105      	bne.n	80004d8 <__adddf3+0x230>
 80004cc:	0040      	lsls	r0, r0, #1
 80004ce:	4149      	adcs	r1, r1
 80004d0:	bf28      	it	cs
 80004d2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004d6:	bd30      	pop	{r4, r5, pc}
 80004d8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004dc:	bf3c      	itt	cc
 80004de:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e2:	bd30      	popcc	{r4, r5, pc}
 80004e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004ec:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f0:	f04f 0000 	mov.w	r0, #0
 80004f4:	bd30      	pop	{r4, r5, pc}
 80004f6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fa:	bf1a      	itte	ne
 80004fc:	4619      	movne	r1, r3
 80004fe:	4610      	movne	r0, r2
 8000500:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000504:	bf1c      	itt	ne
 8000506:	460b      	movne	r3, r1
 8000508:	4602      	movne	r2, r0
 800050a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800050e:	bf06      	itte	eq
 8000510:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000514:	ea91 0f03 	teqeq	r1, r3
 8000518:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800051c:	bd30      	pop	{r4, r5, pc}
 800051e:	bf00      	nop

08000520 <__aeabi_ui2d>:
 8000520:	f090 0f00 	teq	r0, #0
 8000524:	bf04      	itt	eq
 8000526:	2100      	moveq	r1, #0
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000530:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000534:	f04f 0500 	mov.w	r5, #0
 8000538:	f04f 0100 	mov.w	r1, #0
 800053c:	e750      	b.n	80003e0 <__adddf3+0x138>
 800053e:	bf00      	nop

08000540 <__aeabi_i2d>:
 8000540:	f090 0f00 	teq	r0, #0
 8000544:	bf04      	itt	eq
 8000546:	2100      	moveq	r1, #0
 8000548:	4770      	bxeq	lr
 800054a:	b530      	push	{r4, r5, lr}
 800054c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000550:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000554:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000558:	bf48      	it	mi
 800055a:	4240      	negmi	r0, r0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e73e      	b.n	80003e0 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_f2d>:
 8000564:	0042      	lsls	r2, r0, #1
 8000566:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056a:	ea4f 0131 	mov.w	r1, r1, rrx
 800056e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000572:	bf1f      	itttt	ne
 8000574:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000578:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800057c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000580:	4770      	bxne	lr
 8000582:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000586:	bf08      	it	eq
 8000588:	4770      	bxeq	lr
 800058a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800058e:	bf04      	itt	eq
 8000590:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000594:	4770      	bxeq	lr
 8000596:	b530      	push	{r4, r5, lr}
 8000598:	f44f 7460 	mov.w	r4, #896	; 0x380
 800059c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a4:	e71c      	b.n	80003e0 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_ul2d>:
 80005a8:	ea50 0201 	orrs.w	r2, r0, r1
 80005ac:	bf08      	it	eq
 80005ae:	4770      	bxeq	lr
 80005b0:	b530      	push	{r4, r5, lr}
 80005b2:	f04f 0500 	mov.w	r5, #0
 80005b6:	e00a      	b.n	80005ce <__aeabi_l2d+0x16>

080005b8 <__aeabi_l2d>:
 80005b8:	ea50 0201 	orrs.w	r2, r0, r1
 80005bc:	bf08      	it	eq
 80005be:	4770      	bxeq	lr
 80005c0:	b530      	push	{r4, r5, lr}
 80005c2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005c6:	d502      	bpl.n	80005ce <__aeabi_l2d+0x16>
 80005c8:	4240      	negs	r0, r0
 80005ca:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ce:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005d6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005da:	f43f aed8 	beq.w	800038e <__adddf3+0xe6>
 80005de:	f04f 0203 	mov.w	r2, #3
 80005e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e6:	bf18      	it	ne
 80005e8:	3203      	addne	r2, #3
 80005ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ee:	bf18      	it	ne
 80005f0:	3203      	addne	r2, #3
 80005f2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005f6:	f1c2 0320 	rsb	r3, r2, #32
 80005fa:	fa00 fc03 	lsl.w	ip, r0, r3
 80005fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000602:	fa01 fe03 	lsl.w	lr, r1, r3
 8000606:	ea40 000e 	orr.w	r0, r0, lr
 800060a:	fa21 f102 	lsr.w	r1, r1, r2
 800060e:	4414      	add	r4, r2
 8000610:	e6bd      	b.n	800038e <__adddf3+0xe6>
 8000612:	bf00      	nop

08000614 <__aeabi_dmul>:
 8000614:	b570      	push	{r4, r5, r6, lr}
 8000616:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800061e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000622:	bf1d      	ittte	ne
 8000624:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000628:	ea94 0f0c 	teqne	r4, ip
 800062c:	ea95 0f0c 	teqne	r5, ip
 8000630:	f000 f8de 	bleq	80007f0 <__aeabi_dmul+0x1dc>
 8000634:	442c      	add	r4, r5
 8000636:	ea81 0603 	eor.w	r6, r1, r3
 800063a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800063e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000642:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000646:	bf18      	it	ne
 8000648:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800064c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000650:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000654:	d038      	beq.n	80006c8 <__aeabi_dmul+0xb4>
 8000656:	fba0 ce02 	umull	ip, lr, r0, r2
 800065a:	f04f 0500 	mov.w	r5, #0
 800065e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000662:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000666:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066a:	f04f 0600 	mov.w	r6, #0
 800066e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000672:	f09c 0f00 	teq	ip, #0
 8000676:	bf18      	it	ne
 8000678:	f04e 0e01 	orrne.w	lr, lr, #1
 800067c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000680:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000684:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000688:	d204      	bcs.n	8000694 <__aeabi_dmul+0x80>
 800068a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800068e:	416d      	adcs	r5, r5
 8000690:	eb46 0606 	adc.w	r6, r6, r6
 8000694:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000698:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800069c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006a8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006ac:	bf88      	it	hi
 80006ae:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b2:	d81e      	bhi.n	80006f2 <__aeabi_dmul+0xde>
 80006b4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006b8:	bf08      	it	eq
 80006ba:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006be:	f150 0000 	adcs.w	r0, r0, #0
 80006c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006c6:	bd70      	pop	{r4, r5, r6, pc}
 80006c8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006cc:	ea46 0101 	orr.w	r1, r6, r1
 80006d0:	ea40 0002 	orr.w	r0, r0, r2
 80006d4:	ea81 0103 	eor.w	r1, r1, r3
 80006d8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006dc:	bfc2      	ittt	gt
 80006de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006e6:	bd70      	popgt	{r4, r5, r6, pc}
 80006e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006ec:	f04f 0e00 	mov.w	lr, #0
 80006f0:	3c01      	subs	r4, #1
 80006f2:	f300 80ab 	bgt.w	800084c <__aeabi_dmul+0x238>
 80006f6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fa:	bfde      	ittt	le
 80006fc:	2000      	movle	r0, #0
 80006fe:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000702:	bd70      	pople	{r4, r5, r6, pc}
 8000704:	f1c4 0400 	rsb	r4, r4, #0
 8000708:	3c20      	subs	r4, #32
 800070a:	da35      	bge.n	8000778 <__aeabi_dmul+0x164>
 800070c:	340c      	adds	r4, #12
 800070e:	dc1b      	bgt.n	8000748 <__aeabi_dmul+0x134>
 8000710:	f104 0414 	add.w	r4, r4, #20
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f305 	lsl.w	r3, r0, r5
 800071c:	fa20 f004 	lsr.w	r0, r0, r4
 8000720:	fa01 f205 	lsl.w	r2, r1, r5
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800072c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000730:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000734:	fa21 f604 	lsr.w	r6, r1, r4
 8000738:	eb42 0106 	adc.w	r1, r2, r6
 800073c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000740:	bf08      	it	eq
 8000742:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000746:	bd70      	pop	{r4, r5, r6, pc}
 8000748:	f1c4 040c 	rsb	r4, r4, #12
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f304 	lsl.w	r3, r0, r4
 8000754:	fa20 f005 	lsr.w	r0, r0, r5
 8000758:	fa01 f204 	lsl.w	r2, r1, r4
 800075c:	ea40 0002 	orr.w	r0, r0, r2
 8000760:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	f141 0100 	adc.w	r1, r1, #0
 800076c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000770:	bf08      	it	eq
 8000772:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000776:	bd70      	pop	{r4, r5, r6, pc}
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f205 	lsl.w	r2, r0, r5
 8000780:	ea4e 0e02 	orr.w	lr, lr, r2
 8000784:	fa20 f304 	lsr.w	r3, r0, r4
 8000788:	fa01 f205 	lsl.w	r2, r1, r5
 800078c:	ea43 0302 	orr.w	r3, r3, r2
 8000790:	fa21 f004 	lsr.w	r0, r1, r4
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	fa21 f204 	lsr.w	r2, r1, r4
 800079c:	ea20 0002 	bic.w	r0, r0, r2
 80007a0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a8:	bf08      	it	eq
 80007aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ae:	bd70      	pop	{r4, r5, r6, pc}
 80007b0:	f094 0f00 	teq	r4, #0
 80007b4:	d10f      	bne.n	80007d6 <__aeabi_dmul+0x1c2>
 80007b6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ba:	0040      	lsls	r0, r0, #1
 80007bc:	eb41 0101 	adc.w	r1, r1, r1
 80007c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c4:	bf08      	it	eq
 80007c6:	3c01      	subeq	r4, #1
 80007c8:	d0f7      	beq.n	80007ba <__aeabi_dmul+0x1a6>
 80007ca:	ea41 0106 	orr.w	r1, r1, r6
 80007ce:	f095 0f00 	teq	r5, #0
 80007d2:	bf18      	it	ne
 80007d4:	4770      	bxne	lr
 80007d6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007da:	0052      	lsls	r2, r2, #1
 80007dc:	eb43 0303 	adc.w	r3, r3, r3
 80007e0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e4:	bf08      	it	eq
 80007e6:	3d01      	subeq	r5, #1
 80007e8:	d0f7      	beq.n	80007da <__aeabi_dmul+0x1c6>
 80007ea:	ea43 0306 	orr.w	r3, r3, r6
 80007ee:	4770      	bx	lr
 80007f0:	ea94 0f0c 	teq	r4, ip
 80007f4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007f8:	bf18      	it	ne
 80007fa:	ea95 0f0c 	teqne	r5, ip
 80007fe:	d00c      	beq.n	800081a <__aeabi_dmul+0x206>
 8000800:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000804:	bf18      	it	ne
 8000806:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080a:	d1d1      	bne.n	80007b0 <__aeabi_dmul+0x19c>
 800080c:	ea81 0103 	eor.w	r1, r1, r3
 8000810:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000814:	f04f 0000 	mov.w	r0, #0
 8000818:	bd70      	pop	{r4, r5, r6, pc}
 800081a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800081e:	bf06      	itte	eq
 8000820:	4610      	moveq	r0, r2
 8000822:	4619      	moveq	r1, r3
 8000824:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000828:	d019      	beq.n	800085e <__aeabi_dmul+0x24a>
 800082a:	ea94 0f0c 	teq	r4, ip
 800082e:	d102      	bne.n	8000836 <__aeabi_dmul+0x222>
 8000830:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000834:	d113      	bne.n	800085e <__aeabi_dmul+0x24a>
 8000836:	ea95 0f0c 	teq	r5, ip
 800083a:	d105      	bne.n	8000848 <__aeabi_dmul+0x234>
 800083c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000840:	bf1c      	itt	ne
 8000842:	4610      	movne	r0, r2
 8000844:	4619      	movne	r1, r3
 8000846:	d10a      	bne.n	800085e <__aeabi_dmul+0x24a>
 8000848:	ea81 0103 	eor.w	r1, r1, r3
 800084c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000850:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000854:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000862:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000866:	bd70      	pop	{r4, r5, r6, pc}

08000868 <__aeabi_ddiv>:
 8000868:	b570      	push	{r4, r5, r6, lr}
 800086a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800086e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000872:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000876:	bf1d      	ittte	ne
 8000878:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800087c:	ea94 0f0c 	teqne	r4, ip
 8000880:	ea95 0f0c 	teqne	r5, ip
 8000884:	f000 f8a7 	bleq	80009d6 <__aeabi_ddiv+0x16e>
 8000888:	eba4 0405 	sub.w	r4, r4, r5
 800088c:	ea81 0e03 	eor.w	lr, r1, r3
 8000890:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000894:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000898:	f000 8088 	beq.w	80009ac <__aeabi_ddiv+0x144>
 800089c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008a8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008ac:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008b8:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008bc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c0:	429d      	cmp	r5, r3
 80008c2:	bf08      	it	eq
 80008c4:	4296      	cmpeq	r6, r2
 80008c6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ca:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ce:	d202      	bcs.n	80008d6 <__aeabi_ddiv+0x6e>
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	1ab6      	subs	r6, r6, r2
 80008d8:	eb65 0503 	sbc.w	r5, r5, r3
 80008dc:	085b      	lsrs	r3, r3, #1
 80008de:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008e6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ea:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ee:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f2:	bf22      	ittt	cs
 80008f4:	1ab6      	subcs	r6, r6, r2
 80008f6:	4675      	movcs	r5, lr
 80008f8:	ea40 000c 	orrcs.w	r0, r0, ip
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	ebb6 0e02 	subs.w	lr, r6, r2
 8000906:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090a:	bf22      	ittt	cs
 800090c:	1ab6      	subcs	r6, r6, r2
 800090e:	4675      	movcs	r5, lr
 8000910:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	ebb6 0e02 	subs.w	lr, r6, r2
 800091e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000922:	bf22      	ittt	cs
 8000924:	1ab6      	subcs	r6, r6, r2
 8000926:	4675      	movcs	r5, lr
 8000928:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800092c:	085b      	lsrs	r3, r3, #1
 800092e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000932:	ebb6 0e02 	subs.w	lr, r6, r2
 8000936:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093a:	bf22      	ittt	cs
 800093c:	1ab6      	subcs	r6, r6, r2
 800093e:	4675      	movcs	r5, lr
 8000940:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000944:	ea55 0e06 	orrs.w	lr, r5, r6
 8000948:	d018      	beq.n	800097c <__aeabi_ddiv+0x114>
 800094a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800094e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000952:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000956:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800095e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000962:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000966:	d1c0      	bne.n	80008ea <__aeabi_ddiv+0x82>
 8000968:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800096c:	d10b      	bne.n	8000986 <__aeabi_ddiv+0x11e>
 800096e:	ea41 0100 	orr.w	r1, r1, r0
 8000972:	f04f 0000 	mov.w	r0, #0
 8000976:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097a:	e7b6      	b.n	80008ea <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	bf04      	itt	eq
 8000982:	4301      	orreq	r1, r0
 8000984:	2000      	moveq	r0, #0
 8000986:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098a:	bf88      	it	hi
 800098c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000990:	f63f aeaf 	bhi.w	80006f2 <__aeabi_dmul+0xde>
 8000994:	ebb5 0c03 	subs.w	ip, r5, r3
 8000998:	bf04      	itt	eq
 800099a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800099e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a2:	f150 0000 	adcs.w	r0, r0, #0
 80009a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009aa:	bd70      	pop	{r4, r5, r6, pc}
 80009ac:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009b8:	bfc2      	ittt	gt
 80009ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c2:	bd70      	popgt	{r4, r5, r6, pc}
 80009c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009c8:	f04f 0e00 	mov.w	lr, #0
 80009cc:	3c01      	subs	r4, #1
 80009ce:	e690      	b.n	80006f2 <__aeabi_dmul+0xde>
 80009d0:	ea45 0e06 	orr.w	lr, r5, r6
 80009d4:	e68d      	b.n	80006f2 <__aeabi_dmul+0xde>
 80009d6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009da:	ea94 0f0c 	teq	r4, ip
 80009de:	bf08      	it	eq
 80009e0:	ea95 0f0c 	teqeq	r5, ip
 80009e4:	f43f af3b 	beq.w	800085e <__aeabi_dmul+0x24a>
 80009e8:	ea94 0f0c 	teq	r4, ip
 80009ec:	d10a      	bne.n	8000a04 <__aeabi_ddiv+0x19c>
 80009ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f2:	f47f af34 	bne.w	800085e <__aeabi_dmul+0x24a>
 80009f6:	ea95 0f0c 	teq	r5, ip
 80009fa:	f47f af25 	bne.w	8000848 <__aeabi_dmul+0x234>
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	e72c      	b.n	800085e <__aeabi_dmul+0x24a>
 8000a04:	ea95 0f0c 	teq	r5, ip
 8000a08:	d106      	bne.n	8000a18 <__aeabi_ddiv+0x1b0>
 8000a0a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a0e:	f43f aefd 	beq.w	800080c <__aeabi_dmul+0x1f8>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e722      	b.n	800085e <__aeabi_dmul+0x24a>
 8000a18:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a1c:	bf18      	it	ne
 8000a1e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a22:	f47f aec5 	bne.w	80007b0 <__aeabi_dmul+0x19c>
 8000a26:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2a:	f47f af0d 	bne.w	8000848 <__aeabi_dmul+0x234>
 8000a2e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a32:	f47f aeeb 	bne.w	800080c <__aeabi_dmul+0x1f8>
 8000a36:	e712      	b.n	800085e <__aeabi_dmul+0x24a>

08000a38 <__gedf2>:
 8000a38:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a3c:	e006      	b.n	8000a4c <__cmpdf2+0x4>
 8000a3e:	bf00      	nop

08000a40 <__ledf2>:
 8000a40:	f04f 0c01 	mov.w	ip, #1
 8000a44:	e002      	b.n	8000a4c <__cmpdf2+0x4>
 8000a46:	bf00      	nop

08000a48 <__cmpdf2>:
 8000a48:	f04f 0c01 	mov.w	ip, #1
 8000a4c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a5c:	bf18      	it	ne
 8000a5e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a62:	d01b      	beq.n	8000a9c <__cmpdf2+0x54>
 8000a64:	b001      	add	sp, #4
 8000a66:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6a:	bf0c      	ite	eq
 8000a6c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a70:	ea91 0f03 	teqne	r1, r3
 8000a74:	bf02      	ittt	eq
 8000a76:	ea90 0f02 	teqeq	r0, r2
 8000a7a:	2000      	moveq	r0, #0
 8000a7c:	4770      	bxeq	lr
 8000a7e:	f110 0f00 	cmn.w	r0, #0
 8000a82:	ea91 0f03 	teq	r1, r3
 8000a86:	bf58      	it	pl
 8000a88:	4299      	cmppl	r1, r3
 8000a8a:	bf08      	it	eq
 8000a8c:	4290      	cmpeq	r0, r2
 8000a8e:	bf2c      	ite	cs
 8000a90:	17d8      	asrcs	r0, r3, #31
 8000a92:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a96:	f040 0001 	orr.w	r0, r0, #1
 8000a9a:	4770      	bx	lr
 8000a9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__cmpdf2+0x64>
 8000aa6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aaa:	d107      	bne.n	8000abc <__cmpdf2+0x74>
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab4:	d1d6      	bne.n	8000a64 <__cmpdf2+0x1c>
 8000ab6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aba:	d0d3      	beq.n	8000a64 <__cmpdf2+0x1c>
 8000abc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_cdrcmple>:
 8000ac4:	4684      	mov	ip, r0
 8000ac6:	4610      	mov	r0, r2
 8000ac8:	4662      	mov	r2, ip
 8000aca:	468c      	mov	ip, r1
 8000acc:	4619      	mov	r1, r3
 8000ace:	4663      	mov	r3, ip
 8000ad0:	e000      	b.n	8000ad4 <__aeabi_cdcmpeq>
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_cdcmpeq>:
 8000ad4:	b501      	push	{r0, lr}
 8000ad6:	f7ff ffb7 	bl	8000a48 <__cmpdf2>
 8000ada:	2800      	cmp	r0, #0
 8000adc:	bf48      	it	mi
 8000ade:	f110 0f00 	cmnmi.w	r0, #0
 8000ae2:	bd01      	pop	{r0, pc}

08000ae4 <__aeabi_dcmpeq>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff fff4 	bl	8000ad4 <__aeabi_cdcmpeq>
 8000aec:	bf0c      	ite	eq
 8000aee:	2001      	moveq	r0, #1
 8000af0:	2000      	movne	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmplt>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff ffea 	bl	8000ad4 <__aeabi_cdcmpeq>
 8000b00:	bf34      	ite	cc
 8000b02:	2001      	movcc	r0, #1
 8000b04:	2000      	movcs	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmple>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffe0 	bl	8000ad4 <__aeabi_cdcmpeq>
 8000b14:	bf94      	ite	ls
 8000b16:	2001      	movls	r0, #1
 8000b18:	2000      	movhi	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmpge>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffce 	bl	8000ac4 <__aeabi_cdrcmple>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpgt>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffc4 	bl	8000ac4 <__aeabi_cdrcmple>
 8000b3c:	bf34      	ite	cc
 8000b3e:	2001      	movcc	r0, #1
 8000b40:	2000      	movcs	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpun>:
 8000b48:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b50:	d102      	bne.n	8000b58 <__aeabi_dcmpun+0x10>
 8000b52:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b56:	d10a      	bne.n	8000b6e <__aeabi_dcmpun+0x26>
 8000b58:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b5c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b60:	d102      	bne.n	8000b68 <__aeabi_dcmpun+0x20>
 8000b62:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b66:	d102      	bne.n	8000b6e <__aeabi_dcmpun+0x26>
 8000b68:	f04f 0000 	mov.w	r0, #0
 8000b6c:	4770      	bx	lr
 8000b6e:	f04f 0001 	mov.w	r0, #1
 8000b72:	4770      	bx	lr

08000b74 <__aeabi_d2iz>:
 8000b74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b7c:	d215      	bcs.n	8000baa <__aeabi_d2iz+0x36>
 8000b7e:	d511      	bpl.n	8000ba4 <__aeabi_d2iz+0x30>
 8000b80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b88:	d912      	bls.n	8000bb0 <__aeabi_d2iz+0x3c>
 8000b8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b9e:	bf18      	it	ne
 8000ba0:	4240      	negne	r0, r0
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bae:	d105      	bne.n	8000bbc <__aeabi_d2iz+0x48>
 8000bb0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb4:	bf08      	it	eq
 8000bb6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bba:	4770      	bx	lr
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop

08000bc4 <__aeabi_d2uiz>:
 8000bc4:	004a      	lsls	r2, r1, #1
 8000bc6:	d211      	bcs.n	8000bec <__aeabi_d2uiz+0x28>
 8000bc8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bcc:	d211      	bcs.n	8000bf2 <__aeabi_d2uiz+0x2e>
 8000bce:	d50d      	bpl.n	8000bec <__aeabi_d2uiz+0x28>
 8000bd0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bd8:	d40e      	bmi.n	8000bf8 <__aeabi_d2uiz+0x34>
 8000bda:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bde:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000be6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bea:	4770      	bx	lr
 8000bec:	f04f 0000 	mov.w	r0, #0
 8000bf0:	4770      	bx	lr
 8000bf2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf6:	d102      	bne.n	8000bfe <__aeabi_d2uiz+0x3a>
 8000bf8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bfc:	4770      	bx	lr
 8000bfe:	f04f 0000 	mov.w	r0, #0
 8000c02:	4770      	bx	lr

08000c04 <__aeabi_d2f>:
 8000c04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c08:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c0c:	bf24      	itt	cs
 8000c0e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c12:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c16:	d90d      	bls.n	8000c34 <__aeabi_d2f+0x30>
 8000c18:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c1c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c20:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c24:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c28:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c2c:	bf08      	it	eq
 8000c2e:	f020 0001 	biceq.w	r0, r0, #1
 8000c32:	4770      	bx	lr
 8000c34:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c38:	d121      	bne.n	8000c7e <__aeabi_d2f+0x7a>
 8000c3a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c3e:	bfbc      	itt	lt
 8000c40:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c44:	4770      	bxlt	lr
 8000c46:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c4e:	f1c2 0218 	rsb	r2, r2, #24
 8000c52:	f1c2 0c20 	rsb	ip, r2, #32
 8000c56:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5a:	fa20 f002 	lsr.w	r0, r0, r2
 8000c5e:	bf18      	it	ne
 8000c60:	f040 0001 	orrne.w	r0, r0, #1
 8000c64:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c68:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c6c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c70:	ea40 000c 	orr.w	r0, r0, ip
 8000c74:	fa23 f302 	lsr.w	r3, r3, r2
 8000c78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c7c:	e7cc      	b.n	8000c18 <__aeabi_d2f+0x14>
 8000c7e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c82:	d107      	bne.n	8000c94 <__aeabi_d2f+0x90>
 8000c84:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c88:	bf1e      	ittt	ne
 8000c8a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c8e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c92:	4770      	bxne	lr
 8000c94:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop

08000ca4 <__aeabi_uldivmod>:
 8000ca4:	b953      	cbnz	r3, 8000cbc <__aeabi_uldivmod+0x18>
 8000ca6:	b94a      	cbnz	r2, 8000cbc <__aeabi_uldivmod+0x18>
 8000ca8:	2900      	cmp	r1, #0
 8000caa:	bf08      	it	eq
 8000cac:	2800      	cmpeq	r0, #0
 8000cae:	bf1c      	itt	ne
 8000cb0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cb4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cb8:	f000 b9b8 	b.w	800102c <__aeabi_idiv0>
 8000cbc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc4:	f000 f83c 	bl	8000d40 <__udivmoddi4>
 8000cc8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ccc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd0:	b004      	add	sp, #16
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_d2lz>:
 8000cd4:	b538      	push	{r3, r4, r5, lr}
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	2300      	movs	r3, #0
 8000cda:	4604      	mov	r4, r0
 8000cdc:	460d      	mov	r5, r1
 8000cde:	f7ff ff0b 	bl	8000af8 <__aeabi_dcmplt>
 8000ce2:	b928      	cbnz	r0, 8000cf0 <__aeabi_d2lz+0x1c>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	4629      	mov	r1, r5
 8000ce8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cec:	f000 b80a 	b.w	8000d04 <__aeabi_d2ulz>
 8000cf0:	4620      	mov	r0, r4
 8000cf2:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cf6:	f000 f805 	bl	8000d04 <__aeabi_d2ulz>
 8000cfa:	4240      	negs	r0, r0
 8000cfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d00:	bd38      	pop	{r3, r4, r5, pc}
 8000d02:	bf00      	nop

08000d04 <__aeabi_d2ulz>:
 8000d04:	b5d0      	push	{r4, r6, r7, lr}
 8000d06:	2200      	movs	r2, #0
 8000d08:	4b0b      	ldr	r3, [pc, #44]	; (8000d38 <__aeabi_d2ulz+0x34>)
 8000d0a:	4606      	mov	r6, r0
 8000d0c:	460f      	mov	r7, r1
 8000d0e:	f7ff fc81 	bl	8000614 <__aeabi_dmul>
 8000d12:	f7ff ff57 	bl	8000bc4 <__aeabi_d2uiz>
 8000d16:	4604      	mov	r4, r0
 8000d18:	f7ff fc02 	bl	8000520 <__aeabi_ui2d>
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4b07      	ldr	r3, [pc, #28]	; (8000d3c <__aeabi_d2ulz+0x38>)
 8000d20:	f7ff fc78 	bl	8000614 <__aeabi_dmul>
 8000d24:	4602      	mov	r2, r0
 8000d26:	460b      	mov	r3, r1
 8000d28:	4630      	mov	r0, r6
 8000d2a:	4639      	mov	r1, r7
 8000d2c:	f7ff faba 	bl	80002a4 <__aeabi_dsub>
 8000d30:	f7ff ff48 	bl	8000bc4 <__aeabi_d2uiz>
 8000d34:	4621      	mov	r1, r4
 8000d36:	bdd0      	pop	{r4, r6, r7, pc}
 8000d38:	3df00000 	.word	0x3df00000
 8000d3c:	41f00000 	.word	0x41f00000

08000d40 <__udivmoddi4>:
 8000d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d44:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8000d46:	460d      	mov	r5, r1
 8000d48:	4604      	mov	r4, r0
 8000d4a:	460f      	mov	r7, r1
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d146      	bne.n	8000dde <__udivmoddi4+0x9e>
 8000d50:	428a      	cmp	r2, r1
 8000d52:	4694      	mov	ip, r2
 8000d54:	d95e      	bls.n	8000e14 <__udivmoddi4+0xd4>
 8000d56:	fab2 f382 	clz	r3, r2
 8000d5a:	b143      	cbz	r3, 8000d6e <__udivmoddi4+0x2e>
 8000d5c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d60:	f1c3 0220 	rsb	r2, r3, #32
 8000d64:	409f      	lsls	r7, r3
 8000d66:	409c      	lsls	r4, r3
 8000d68:	fa20 f202 	lsr.w	r2, r0, r2
 8000d6c:	4317      	orrs	r7, r2
 8000d6e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d72:	fa1f f58c 	uxth.w	r5, ip
 8000d76:	0c22      	lsrs	r2, r4, #16
 8000d78:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d7c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d80:	fb01 f005 	mul.w	r0, r1, r5
 8000d84:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d88:	4290      	cmp	r0, r2
 8000d8a:	d908      	bls.n	8000d9e <__udivmoddi4+0x5e>
 8000d8c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d90:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000d94:	d202      	bcs.n	8000d9c <__udivmoddi4+0x5c>
 8000d96:	4290      	cmp	r0, r2
 8000d98:	f200 8134 	bhi.w	8001004 <__udivmoddi4+0x2c4>
 8000d9c:	4639      	mov	r1, r7
 8000d9e:	1a12      	subs	r2, r2, r0
 8000da0:	b2a4      	uxth	r4, r4
 8000da2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000da6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000daa:	fb00 f505 	mul.w	r5, r0, r5
 8000dae:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000db2:	42a5      	cmp	r5, r4
 8000db4:	d908      	bls.n	8000dc8 <__udivmoddi4+0x88>
 8000db6:	eb1c 0404 	adds.w	r4, ip, r4
 8000dba:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000dbe:	d202      	bcs.n	8000dc6 <__udivmoddi4+0x86>
 8000dc0:	42a5      	cmp	r5, r4
 8000dc2:	f200 8119 	bhi.w	8000ff8 <__udivmoddi4+0x2b8>
 8000dc6:	4610      	mov	r0, r2
 8000dc8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dcc:	1b64      	subs	r4, r4, r5
 8000dce:	2100      	movs	r1, #0
 8000dd0:	b11e      	cbz	r6, 8000dda <__udivmoddi4+0x9a>
 8000dd2:	40dc      	lsrs	r4, r3
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	e9c6 4300 	strd	r4, r3, [r6]
 8000dda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0xb4>
 8000de2:	2e00      	cmp	r6, #0
 8000de4:	f000 80fc 	beq.w	8000fe0 <__udivmoddi4+0x2a0>
 8000de8:	2100      	movs	r1, #0
 8000dea:	e9c6 0500 	strd	r0, r5, [r6]
 8000dee:	4608      	mov	r0, r1
 8000df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000df4:	fab3 f183 	clz	r1, r3
 8000df8:	2900      	cmp	r1, #0
 8000dfa:	d14c      	bne.n	8000e96 <__udivmoddi4+0x156>
 8000dfc:	42ab      	cmp	r3, r5
 8000dfe:	f0c0 80f2 	bcc.w	8000fe6 <__udivmoddi4+0x2a6>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f240 80ef 	bls.w	8000fe6 <__udivmoddi4+0x2a6>
 8000e08:	4608      	mov	r0, r1
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	d0e5      	beq.n	8000dda <__udivmoddi4+0x9a>
 8000e0e:	e9c6 4700 	strd	r4, r7, [r6]
 8000e12:	e7e2      	b.n	8000dda <__udivmoddi4+0x9a>
 8000e14:	b902      	cbnz	r2, 8000e18 <__udivmoddi4+0xd8>
 8000e16:	deff      	udf	#255	; 0xff
 8000e18:	fab2 f382 	clz	r3, r2
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	f040 809f 	bne.w	8000f60 <__udivmoddi4+0x220>
 8000e22:	1a8a      	subs	r2, r1, r2
 8000e24:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000e28:	fa1f f78c 	uxth.w	r7, ip
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	fbb2 f5fe 	udiv	r5, r2, lr
 8000e32:	fb0e 2015 	mls	r0, lr, r5, r2
 8000e36:	0c22      	lsrs	r2, r4, #16
 8000e38:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e3c:	fb07 f005 	mul.w	r0, r7, r5
 8000e40:	4290      	cmp	r0, r2
 8000e42:	d90f      	bls.n	8000e64 <__udivmoddi4+0x124>
 8000e44:	eb1c 0202 	adds.w	r2, ip, r2
 8000e48:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e4c:	bf2c      	ite	cs
 8000e4e:	f04f 0901 	movcs.w	r9, #1
 8000e52:	f04f 0900 	movcc.w	r9, #0
 8000e56:	4290      	cmp	r0, r2
 8000e58:	d903      	bls.n	8000e62 <__udivmoddi4+0x122>
 8000e5a:	f1b9 0f00 	cmp.w	r9, #0
 8000e5e:	f000 80ce 	beq.w	8000ffe <__udivmoddi4+0x2be>
 8000e62:	4645      	mov	r5, r8
 8000e64:	1a12      	subs	r2, r2, r0
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e6c:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e70:	fb00 f707 	mul.w	r7, r0, r7
 8000e74:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e78:	42a7      	cmp	r7, r4
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x14e>
 8000e7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e80:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000e84:	d202      	bcs.n	8000e8c <__udivmoddi4+0x14c>
 8000e86:	42a7      	cmp	r7, r4
 8000e88:	f200 80b3 	bhi.w	8000ff2 <__udivmoddi4+0x2b2>
 8000e8c:	4610      	mov	r0, r2
 8000e8e:	1be4      	subs	r4, r4, r7
 8000e90:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e94:	e79c      	b.n	8000dd0 <__udivmoddi4+0x90>
 8000e96:	f1c1 0420 	rsb	r4, r1, #32
 8000e9a:	408b      	lsls	r3, r1
 8000e9c:	fa05 fc01 	lsl.w	ip, r5, r1
 8000ea0:	fa22 f704 	lsr.w	r7, r2, r4
 8000ea4:	40e5      	lsrs	r5, r4
 8000ea6:	408a      	lsls	r2, r1
 8000ea8:	431f      	orrs	r7, r3
 8000eaa:	fa20 f304 	lsr.w	r3, r0, r4
 8000eae:	4088      	lsls	r0, r1
 8000eb0:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000eb4:	ea43 030c 	orr.w	r3, r3, ip
 8000eb8:	fa1f fc87 	uxth.w	ip, r7
 8000ebc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ec0:	fbb5 fef8 	udiv	lr, r5, r8
 8000ec4:	fb08 551e 	mls	r5, r8, lr, r5
 8000ec8:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000ecc:	fb0e f90c 	mul.w	r9, lr, ip
 8000ed0:	45a9      	cmp	r9, r5
 8000ed2:	d90e      	bls.n	8000ef2 <__udivmoddi4+0x1b2>
 8000ed4:	197d      	adds	r5, r7, r5
 8000ed6:	f10e 3aff 	add.w	sl, lr, #4294967295	; 0xffffffff
 8000eda:	bf2c      	ite	cs
 8000edc:	f04f 0b01 	movcs.w	fp, #1
 8000ee0:	f04f 0b00 	movcc.w	fp, #0
 8000ee4:	45a9      	cmp	r9, r5
 8000ee6:	d903      	bls.n	8000ef0 <__udivmoddi4+0x1b0>
 8000ee8:	f1bb 0f00 	cmp.w	fp, #0
 8000eec:	f000 808d 	beq.w	800100a <__udivmoddi4+0x2ca>
 8000ef0:	46d6      	mov	lr, sl
 8000ef2:	eba5 0509 	sub.w	r5, r5, r9
 8000ef6:	fa1f f983 	uxth.w	r9, r3
 8000efa:	fbb5 f3f8 	udiv	r3, r5, r8
 8000efe:	fb08 5513 	mls	r5, r8, r3, r5
 8000f02:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f06:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000f0a:	45ac      	cmp	ip, r5
 8000f0c:	d906      	bls.n	8000f1c <__udivmoddi4+0x1dc>
 8000f0e:	197d      	adds	r5, r7, r5
 8000f10:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000f14:	d201      	bcs.n	8000f1a <__udivmoddi4+0x1da>
 8000f16:	45ac      	cmp	ip, r5
 8000f18:	d87e      	bhi.n	8001018 <__udivmoddi4+0x2d8>
 8000f1a:	4643      	mov	r3, r8
 8000f1c:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000f20:	eba5 050c 	sub.w	r5, r5, ip
 8000f24:	fba3 9802 	umull	r9, r8, r3, r2
 8000f28:	4545      	cmp	r5, r8
 8000f2a:	46ce      	mov	lr, r9
 8000f2c:	46c4      	mov	ip, r8
 8000f2e:	d302      	bcc.n	8000f36 <__udivmoddi4+0x1f6>
 8000f30:	d106      	bne.n	8000f40 <__udivmoddi4+0x200>
 8000f32:	4548      	cmp	r0, r9
 8000f34:	d204      	bcs.n	8000f40 <__udivmoddi4+0x200>
 8000f36:	3b01      	subs	r3, #1
 8000f38:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f3c:	eb68 0c07 	sbc.w	ip, r8, r7
 8000f40:	2e00      	cmp	r6, #0
 8000f42:	d06f      	beq.n	8001024 <__udivmoddi4+0x2e4>
 8000f44:	ebb0 020e 	subs.w	r2, r0, lr
 8000f48:	eb65 050c 	sbc.w	r5, r5, ip
 8000f4c:	40ca      	lsrs	r2, r1
 8000f4e:	fa05 f404 	lsl.w	r4, r5, r4
 8000f52:	40cd      	lsrs	r5, r1
 8000f54:	4618      	mov	r0, r3
 8000f56:	4314      	orrs	r4, r2
 8000f58:	2100      	movs	r1, #0
 8000f5a:	e9c6 4500 	strd	r4, r5, [r6]
 8000f5e:	e73c      	b.n	8000dda <__udivmoddi4+0x9a>
 8000f60:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f64:	f1c3 0220 	rsb	r2, r3, #32
 8000f68:	4099      	lsls	r1, r3
 8000f6a:	409c      	lsls	r4, r3
 8000f6c:	40d5      	lsrs	r5, r2
 8000f6e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000f72:	fa20 f202 	lsr.w	r2, r0, r2
 8000f76:	fa1f f78c 	uxth.w	r7, ip
 8000f7a:	fbb5 f0fe 	udiv	r0, r5, lr
 8000f7e:	430a      	orrs	r2, r1
 8000f80:	fb0e 5510 	mls	r5, lr, r0, r5
 8000f84:	0c11      	lsrs	r1, r2, #16
 8000f86:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f8a:	fb00 f507 	mul.w	r5, r0, r7
 8000f8e:	428d      	cmp	r5, r1
 8000f90:	d90e      	bls.n	8000fb0 <__udivmoddi4+0x270>
 8000f92:	eb1c 0101 	adds.w	r1, ip, r1
 8000f96:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f9a:	bf2c      	ite	cs
 8000f9c:	f04f 0901 	movcs.w	r9, #1
 8000fa0:	f04f 0900 	movcc.w	r9, #0
 8000fa4:	428d      	cmp	r5, r1
 8000fa6:	d902      	bls.n	8000fae <__udivmoddi4+0x26e>
 8000fa8:	f1b9 0f00 	cmp.w	r9, #0
 8000fac:	d031      	beq.n	8001012 <__udivmoddi4+0x2d2>
 8000fae:	4640      	mov	r0, r8
 8000fb0:	1b49      	subs	r1, r1, r5
 8000fb2:	b292      	uxth	r2, r2
 8000fb4:	fbb1 f5fe 	udiv	r5, r1, lr
 8000fb8:	fb0e 1115 	mls	r1, lr, r5, r1
 8000fbc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fc0:	fb05 f107 	mul.w	r1, r5, r7
 8000fc4:	4291      	cmp	r1, r2
 8000fc6:	d907      	bls.n	8000fd8 <__udivmoddi4+0x298>
 8000fc8:	eb1c 0202 	adds.w	r2, ip, r2
 8000fcc:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000fd0:	d201      	bcs.n	8000fd6 <__udivmoddi4+0x296>
 8000fd2:	4291      	cmp	r1, r2
 8000fd4:	d823      	bhi.n	800101e <__udivmoddi4+0x2de>
 8000fd6:	4645      	mov	r5, r8
 8000fd8:	1a52      	subs	r2, r2, r1
 8000fda:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fde:	e726      	b.n	8000e2e <__udivmoddi4+0xee>
 8000fe0:	4631      	mov	r1, r6
 8000fe2:	4630      	mov	r0, r6
 8000fe4:	e6f9      	b.n	8000dda <__udivmoddi4+0x9a>
 8000fe6:	1a84      	subs	r4, r0, r2
 8000fe8:	eb65 0203 	sbc.w	r2, r5, r3
 8000fec:	2001      	movs	r0, #1
 8000fee:	4617      	mov	r7, r2
 8000ff0:	e70b      	b.n	8000e0a <__udivmoddi4+0xca>
 8000ff2:	4464      	add	r4, ip
 8000ff4:	3802      	subs	r0, #2
 8000ff6:	e74a      	b.n	8000e8e <__udivmoddi4+0x14e>
 8000ff8:	4464      	add	r4, ip
 8000ffa:	3802      	subs	r0, #2
 8000ffc:	e6e4      	b.n	8000dc8 <__udivmoddi4+0x88>
 8000ffe:	3d02      	subs	r5, #2
 8001000:	4462      	add	r2, ip
 8001002:	e72f      	b.n	8000e64 <__udivmoddi4+0x124>
 8001004:	3902      	subs	r1, #2
 8001006:	4462      	add	r2, ip
 8001008:	e6c9      	b.n	8000d9e <__udivmoddi4+0x5e>
 800100a:	f1ae 0e02 	sub.w	lr, lr, #2
 800100e:	443d      	add	r5, r7
 8001010:	e76f      	b.n	8000ef2 <__udivmoddi4+0x1b2>
 8001012:	3802      	subs	r0, #2
 8001014:	4461      	add	r1, ip
 8001016:	e7cb      	b.n	8000fb0 <__udivmoddi4+0x270>
 8001018:	3b02      	subs	r3, #2
 800101a:	443d      	add	r5, r7
 800101c:	e77e      	b.n	8000f1c <__udivmoddi4+0x1dc>
 800101e:	3d02      	subs	r5, #2
 8001020:	4462      	add	r2, ip
 8001022:	e7d9      	b.n	8000fd8 <__udivmoddi4+0x298>
 8001024:	4618      	mov	r0, r3
 8001026:	4631      	mov	r1, r6
 8001028:	e6d7      	b.n	8000dda <__udivmoddi4+0x9a>
 800102a:	bf00      	nop

0800102c <__aeabi_idiv0>:
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop

08001030 <bsp_init>:
  * @brief  Initialize the bsp modules
  * @param  None
  * @retval Web Server status
  */
int bsp_init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
  int status = BSP_ERROR_NONE;
 8001036:	2300      	movs	r3, #0
 8001038:	607b      	str	r3, [r7, #4]

  /* Initialize GREEN led */
  status |= BSP_LED_Init(LED_GREEN);
 800103a:	2001      	movs	r0, #1
 800103c:	f002 f880 	bl	8003140 <BSP_LED_Init>
 8001040:	4602      	mov	r2, r0
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4313      	orrs	r3, r2
 8001046:	607b      	str	r3, [r7, #4]

  /* Initialize RED led */
  status |= BSP_LED_Init(LED_RED);
 8001048:	2000      	movs	r0, #0
 800104a:	f002 f879 	bl	8003140 <BSP_LED_Init>
 800104e:	4602      	mov	r2, r0
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	4313      	orrs	r3, r2
 8001054:	607b      	str	r3, [r7, #4]

  return status;
 8001056:	687b      	ldr	r3, [r7, #4]
}
 8001058:	4618      	mov	r0, r3
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}

08001060 <webserver_console_config>:
  * @brief  Configure the console
  * @param  None
  * @retval Web Server status
  */
WebServer_StatusTypeDef webserver_console_config(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* Set parameter to be configured */
  Console_UARTHandle.Instance                    = USART1;
 8001064:	4b1b      	ldr	r3, [pc, #108]	; (80010d4 <webserver_console_config+0x74>)
 8001066:	4a1c      	ldr	r2, [pc, #112]	; (80010d8 <webserver_console_config+0x78>)
 8001068:	601a      	str	r2, [r3, #0]
  Console_UARTHandle.Init.BaudRate               = 115200;
 800106a:	4b1a      	ldr	r3, [pc, #104]	; (80010d4 <webserver_console_config+0x74>)
 800106c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001070:	605a      	str	r2, [r3, #4]
  Console_UARTHandle.Init.WordLength             = UART_WORDLENGTH_8B;
 8001072:	4b18      	ldr	r3, [pc, #96]	; (80010d4 <webserver_console_config+0x74>)
 8001074:	2200      	movs	r2, #0
 8001076:	609a      	str	r2, [r3, #8]
  Console_UARTHandle.Init.StopBits               = UART_STOPBITS_1;
 8001078:	4b16      	ldr	r3, [pc, #88]	; (80010d4 <webserver_console_config+0x74>)
 800107a:	2200      	movs	r2, #0
 800107c:	60da      	str	r2, [r3, #12]
  Console_UARTHandle.Init.Parity                 = UART_PARITY_NONE;
 800107e:	4b15      	ldr	r3, [pc, #84]	; (80010d4 <webserver_console_config+0x74>)
 8001080:	2200      	movs	r2, #0
 8001082:	611a      	str	r2, [r3, #16]
  Console_UARTHandle.Init.Mode                   = UART_MODE_TX_RX;
 8001084:	4b13      	ldr	r3, [pc, #76]	; (80010d4 <webserver_console_config+0x74>)
 8001086:	220c      	movs	r2, #12
 8001088:	615a      	str	r2, [r3, #20]
  Console_UARTHandle.Init.HwFlowCtl              = UART_HWCONTROL_NONE;
 800108a:	4b12      	ldr	r3, [pc, #72]	; (80010d4 <webserver_console_config+0x74>)
 800108c:	2200      	movs	r2, #0
 800108e:	619a      	str	r2, [r3, #24]
  Console_UARTHandle.Init.OverSampling           = UART_OVERSAMPLING_16;
 8001090:	4b10      	ldr	r3, [pc, #64]	; (80010d4 <webserver_console_config+0x74>)
 8001092:	2200      	movs	r2, #0
 8001094:	61da      	str	r2, [r3, #28]
  Console_UARTHandle.Init.OneBitSampling         = UART_ONE_BIT_SAMPLE_DISABLE;
 8001096:	4b0f      	ldr	r3, [pc, #60]	; (80010d4 <webserver_console_config+0x74>)
 8001098:	2200      	movs	r2, #0
 800109a:	621a      	str	r2, [r3, #32]
  Console_UARTHandle.Init.ClockPrescaler         = UART_PRESCALER_DIV1;
 800109c:	4b0d      	ldr	r3, [pc, #52]	; (80010d4 <webserver_console_config+0x74>)
 800109e:	2200      	movs	r2, #0
 80010a0:	625a      	str	r2, [r3, #36]	; 0x24
  Console_UARTHandle.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010a2:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <webserver_console_config+0x74>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Initialize the UART mode */
  if (HAL_UART_Init(&Console_UARTHandle) != HAL_OK)
 80010a8:	480a      	ldr	r0, [pc, #40]	; (80010d4 <webserver_console_config+0x74>)
 80010aa:	f010 fa12 	bl	80114d2 <HAL_UART_Init>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d002      	beq.n	80010ba <webserver_console_config+0x5a>
  {
    return CONSOLE_ERROR;
 80010b4:	f06f 0302 	mvn.w	r3, #2
 80010b8:	e009      	b.n	80010ce <webserver_console_config+0x6e>
  }

  /* Disable the UART FIFO mode */
  if (HAL_UARTEx_DisableFifoMode(&Console_UARTHandle) != HAL_OK)
 80010ba:	4806      	ldr	r0, [pc, #24]	; (80010d4 <webserver_console_config+0x74>)
 80010bc:	f010 ff89 	bl	8011fd2 <HAL_UARTEx_DisableFifoMode>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d002      	beq.n	80010cc <webserver_console_config+0x6c>
  {
    return CONSOLE_ERROR;
 80010c6:	f06f 0302 	mvn.w	r3, #2
 80010ca:	e000      	b.n	80010ce <webserver_console_config+0x6e>
  }

  return WEBSERVER_OK;
 80010cc:	2300      	movs	r3, #0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	200002e4 	.word	0x200002e4
 80010d8:	40013800 	.word	0x40013800

080010dc <webserver_console_print_header>:
  * @brief  Print web server application header in hyperterminal
  * @param  None
  * @retval None
  */
void webserver_console_print_header(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  printf("\r\n");
 80010e0:	4806      	ldr	r0, [pc, #24]	; (80010fc <webserver_console_print_header+0x20>)
 80010e2:	f015 fc95 	bl	8016a10 <puts>
  printf("=======================================================================================================\r\n");
 80010e6:	4806      	ldr	r0, [pc, #24]	; (8001100 <webserver_console_print_header+0x24>)
 80010e8:	f015 fc92 	bl	8016a10 <puts>
  printf("============================       STM32U5 Webserver Demonstration        =============================\r\n");
 80010ec:	4805      	ldr	r0, [pc, #20]	; (8001104 <webserver_console_print_header+0x28>)
 80010ee:	f015 fc8f 	bl	8016a10 <puts>
  printf("=======================================================================================================\r\n");
 80010f2:	4803      	ldr	r0, [pc, #12]	; (8001100 <webserver_console_print_header+0x24>)
 80010f4:	f015 fc8c 	bl	8016a10 <puts>
}
 80010f8:	bf00      	nop
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	08019c48 	.word	0x08019c48
 8001100:	08019c4c 	.word	0x08019c4c
 8001104:	08019cb8 	.word	0x08019cb8

08001108 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  while (HAL_OK != HAL_UART_Transmit(&Console_UARTHandle, (uint8_t *) &ch, 1, 30000))
 8001110:	bf00      	nop
 8001112:	1d39      	adds	r1, r7, #4
 8001114:	f247 5330 	movw	r3, #30000	; 0x7530
 8001118:	2201      	movs	r2, #1
 800111a:	4805      	ldr	r0, [pc, #20]	; (8001130 <__io_putchar+0x28>)
 800111c:	f010 fa29 	bl	8011572 <HAL_UART_Transmit>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d1f5      	bne.n	8001112 <__io_putchar+0xa>
  {
    ;
  }
  return ch;
 8001126:	687b      	ldr	r3, [r7, #4]
}
 8001128:	4618      	mov	r0, r3
 800112a:	3708      	adds	r7, #8
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	200002e4 	.word	0x200002e4

08001134 <__io_getchar>:
  * @brief  Retargets the C library scanf function to the USART.
  * @param  None
  * @retval None
  */
GETCHAR_PROTOTYPE
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
  char ch;

  while (HAL_OK != HAL_UART_Receive(&Console_UARTHandle, (uint8_t *) &ch, 1, HAL_MAX_DELAY))
 800113a:	bf00      	nop
 800113c:	1df9      	adds	r1, r7, #7
 800113e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001142:	2201      	movs	r2, #1
 8001144:	4805      	ldr	r0, [pc, #20]	; (800115c <__io_getchar+0x28>)
 8001146:	f010 fab2 	bl	80116ae <HAL_UART_Receive>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d1f5      	bne.n	800113c <__io_getchar+0x8>
  {
    ;
  }

  return ch;
 8001150:	79fb      	ldrb	r3, [r7, #7]
}
 8001152:	4618      	mov	r0, r3
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	200002e4 	.word	0x200002e4

08001160 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
     - Configure the Flash prefetch
     - Configure the Systick to generate an interrupt each 1 msec
     - Set NVIC Group Priority to 3
     - Low Level Initialization
  */
  HAL_Init();
 8001164:	f008 fda0 	bl	8009ca8 <HAL_Init>

  /* Enable the Instruction Cache */
  instruction_cache_enable();
 8001168:	f000 fabf 	bl	80016ea <instruction_cache_enable>

  /* Configure the System clock to have a frequency of 120 MHz */
  system_clock_config();
 800116c:	f000 fac6 	bl	80016fc <system_clock_config>

  /* Initialize bsp resources */
  bsp_init();
 8001170:	f7ff ff5e 	bl	8001030 <bsp_init>

  /* Demonstration entry */
  app_entry();
 8001174:	f001 faa0 	bl	80026b8 <app_entry>

  while (1)
 8001178:	e7fe      	b.n	8001178 <main+0x18>
	...

0800117c <HAL_MspInit>:

/**
  * Initializes the Global MCU Support Package.
  */
void HAL_MspInit(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
  /* Enable VDDIO2 supply */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001182:	4b1a      	ldr	r3, [pc, #104]	; (80011ec <HAL_MspInit+0x70>)
 8001184:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001188:	4a18      	ldr	r2, [pc, #96]	; (80011ec <HAL_MspInit+0x70>)
 800118a:	f043 0304 	orr.w	r3, r3, #4
 800118e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001192:	4b16      	ldr	r3, [pc, #88]	; (80011ec <HAL_MspInit+0x70>)
 8001194:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001198:	f003 0304 	and.w	r3, r3, #4
 800119c:	60fb      	str	r3, [r7, #12]
 800119e:	68fb      	ldr	r3, [r7, #12]
  HAL_PWREx_EnableVddIO2();
 80011a0:	f00a ffe8 	bl	800c174 <HAL_PWREx_EnableVddIO2>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011a4:	4b11      	ldr	r3, [pc, #68]	; (80011ec <HAL_MspInit+0x70>)
 80011a6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80011aa:	4a10      	ldr	r2, [pc, #64]	; (80011ec <HAL_MspInit+0x70>)
 80011ac:	f043 0302 	orr.w	r3, r3, #2
 80011b0:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 80011b4:	4b0d      	ldr	r3, [pc, #52]	; (80011ec <HAL_MspInit+0x70>)
 80011b6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80011ba:	f003 0302 	and.w	r3, r3, #2
 80011be:	60bb      	str	r3, [r7, #8]
 80011c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011c2:	4b0a      	ldr	r3, [pc, #40]	; (80011ec <HAL_MspInit+0x70>)
 80011c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011c8:	4a08      	ldr	r2, [pc, #32]	; (80011ec <HAL_MspInit+0x70>)
 80011ca:	f043 0304 	orr.w	r3, r3, #4
 80011ce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80011d2:	4b06      	ldr	r3, [pc, #24]	; (80011ec <HAL_MspInit+0x70>)
 80011d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011d8:	f003 0304 	and.w	r3, r3, #4
 80011dc:	607b      	str	r3, [r7, #4]
 80011de:	687b      	ldr	r3, [r7, #4]

  /* Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral */
  HAL_PWREx_DisableUCPDDeadBattery();
 80011e0:	f00a ffd8 	bl	800c194 <HAL_PWREx_DisableUCPDDeadBattery>
}
 80011e4:	bf00      	nop
 80011e6:	3710      	adds	r7, #16
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	46020c00 	.word	0x46020c00

080011f0 <HAL_SPI_MspInit>:
* @brief  SPI MSP Initialization
* @param  hspi : SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b0be      	sub	sp, #248	; 0xf8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct       = {0};
 80011f8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	605a      	str	r2, [r3, #4]
 8001202:	609a      	str	r2, [r3, #8]
 8001204:	60da      	str	r2, [r3, #12]
 8001206:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001208:	f107 0318 	add.w	r3, r7, #24
 800120c:	22c8      	movs	r2, #200	; 0xc8
 800120e:	2100      	movs	r1, #0
 8001210:	4618      	mov	r0, r3
 8001212:	f015 fc63 	bl	8016adc <memset>

  /* Check SPI instance */
  if (hspi->Instance == SPI2)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a32      	ldr	r2, [pc, #200]	; (80012e4 <HAL_SPI_MspInit+0xf4>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d15c      	bne.n	80012da <HAL_SPI_MspInit+0xea>
  {
    /* Peripherals clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001220:	4b31      	ldr	r3, [pc, #196]	; (80012e8 <HAL_SPI_MspInit+0xf8>)
 8001222:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001226:	4a30      	ldr	r2, [pc, #192]	; (80012e8 <HAL_SPI_MspInit+0xf8>)
 8001228:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800122c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8001230:	4b2d      	ldr	r3, [pc, #180]	; (80012e8 <HAL_SPI_MspInit+0xf8>)
 8001232:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001236:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800123a:	617b      	str	r3, [r7, #20]
 800123c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPDMA1_CLK_ENABLE();
 800123e:	4b2a      	ldr	r3, [pc, #168]	; (80012e8 <HAL_SPI_MspInit+0xf8>)
 8001240:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001244:	4a28      	ldr	r2, [pc, #160]	; (80012e8 <HAL_SPI_MspInit+0xf8>)
 8001246:	f043 0301 	orr.w	r3, r3, #1
 800124a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800124e:	4b26      	ldr	r3, [pc, #152]	; (80012e8 <HAL_SPI_MspInit+0xf8>)
 8001250:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001254:	f003 0301 	and.w	r3, r3, #1
 8001258:	613b      	str	r3, [r7, #16]
 800125a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800125c:	4b22      	ldr	r3, [pc, #136]	; (80012e8 <HAL_SPI_MspInit+0xf8>)
 800125e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001262:	4a21      	ldr	r2, [pc, #132]	; (80012e8 <HAL_SPI_MspInit+0xf8>)
 8001264:	f043 0308 	orr.w	r3, r3, #8
 8001268:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800126c:	4b1e      	ldr	r3, [pc, #120]	; (80012e8 <HAL_SPI_MspInit+0xf8>)
 800126e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001272:	f003 0308 	and.w	r3, r3, #8
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	68fb      	ldr	r3, [r7, #12]

    /* Configure peripheral kernel clock */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 800127a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800127e:	f04f 0300 	mov.w	r3, #0
 8001282:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Spi2ClockSelection   = RCC_SPI2CLKSOURCE_PCLK1;
 8001286:	2300      	movs	r3, #0
 8001288:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800128c:	f107 0318 	add.w	r3, r7, #24
 8001290:	4618      	mov	r0, r3
 8001292:	f00c fa3b 	bl	800d70c <HAL_RCCEx_PeriphCLKConfig>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <HAL_SPI_MspInit+0xb0>
    {
      webserver_process_error();
 800129c:	f001 fa3e 	bl	800271c <webserver_process_error>
    }

    /* SPI2 GPIO Configuration */
    GPIO_InitStruct.Pin       = GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_1;
 80012a0:	231a      	movs	r3, #26
 80012a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80012a6:	2302      	movs	r3, #2
 80012a8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 80012ac:	2300      	movs	r3, #0
 80012ae:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
 80012b2:	2302      	movs	r3, #2
 80012b4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012b8:	2305      	movs	r3, #5
 80012ba:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012be:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80012c2:	4619      	mov	r1, r3
 80012c4:	4809      	ldr	r0, [pc, #36]	; (80012ec <HAL_SPI_MspInit+0xfc>)
 80012c6:	f008 ff21 	bl	800a10c <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 80012ca:	2200      	movs	r2, #0
 80012cc:	2105      	movs	r1, #5
 80012ce:	203c      	movs	r0, #60	; 0x3c
 80012d0:	f008 fe65 	bl	8009f9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80012d4:	203c      	movs	r0, #60	; 0x3c
 80012d6:	f008 fe7c 	bl	8009fd2 <HAL_NVIC_EnableIRQ>
  }
}
 80012da:	bf00      	nop
 80012dc:	37f8      	adds	r7, #248	; 0xf8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	40003800 	.word	0x40003800
 80012e8:	46020c00 	.word	0x46020c00
 80012ec:	42020c00 	.word	0x42020c00

080012f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b0bc      	sub	sp, #240	; 0xf0
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	605a      	str	r2, [r3, #4]
 8001302:	609a      	str	r2, [r3, #8]
 8001304:	60da      	str	r2, [r3, #12]
 8001306:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001308:	f107 0310 	add.w	r3, r7, #16
 800130c:	22c8      	movs	r2, #200	; 0xc8
 800130e:	2100      	movs	r1, #0
 8001310:	4618      	mov	r0, r3
 8001312:	f015 fbe3 	bl	8016adc <memset>

  /* Initializes the peripherals clock */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001316:	f04f 0201 	mov.w	r2, #1
 800131a:	f04f 0300 	mov.w	r3, #0
 800131e:	e9c7 2304 	strd	r2, r3, [r7, #16]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001322:	2300      	movs	r3, #0
 8001324:	663b      	str	r3, [r7, #96]	; 0x60
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8001326:	f107 0310 	add.w	r3, r7, #16
 800132a:	4618      	mov	r0, r3
 800132c:	f00c f9ee 	bl	800d70c <HAL_RCCEx_PeriphCLKConfig>

  /* Peripheral clock enable */
  __HAL_RCC_USART1_CLK_ENABLE();
 8001330:	4b1f      	ldr	r3, [pc, #124]	; (80013b0 <HAL_UART_MspInit+0xc0>)
 8001332:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001336:	4a1e      	ldr	r2, [pc, #120]	; (80013b0 <HAL_UART_MspInit+0xc0>)
 8001338:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800133c:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8001340:	4b1b      	ldr	r3, [pc, #108]	; (80013b0 <HAL_UART_MspInit+0xc0>)
 8001342:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001346:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800134a:	60fb      	str	r3, [r7, #12]
 800134c:	68fb      	ldr	r3, [r7, #12]

  /* USART1 GPIO Configuration */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800134e:	4b18      	ldr	r3, [pc, #96]	; (80013b0 <HAL_UART_MspInit+0xc0>)
 8001350:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001354:	4a16      	ldr	r2, [pc, #88]	; (80013b0 <HAL_UART_MspInit+0xc0>)
 8001356:	f043 0301 	orr.w	r3, r3, #1
 800135a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800135e:	4b14      	ldr	r3, [pc, #80]	; (80013b0 <HAL_UART_MspInit+0xc0>)
 8001360:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001364:	f003 0301 	and.w	r3, r3, #1
 8001368:	60bb      	str	r3, [r7, #8]
 800136a:	68bb      	ldr	r3, [r7, #8]
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 800136c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001370:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001374:	2302      	movs	r3, #2
 8001376:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137a:	2300      	movs	r3, #0
 800137c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001380:	2300      	movs	r3, #0
 8001382:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001386:	2307      	movs	r3, #7
 8001388:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800138c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001390:	4619      	mov	r1, r3
 8001392:	4808      	ldr	r0, [pc, #32]	; (80013b4 <HAL_UART_MspInit+0xc4>)
 8001394:	f008 feba 	bl	800a10c <HAL_GPIO_Init>

  /* USART1 interrupt Init */
  HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001398:	2200      	movs	r2, #0
 800139a:	2105      	movs	r1, #5
 800139c:	203d      	movs	r0, #61	; 0x3d
 800139e:	f008 fdfe 	bl	8009f9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 80013a2:	203d      	movs	r0, #61	; 0x3d
 80013a4:	f008 fe15 	bl	8009fd2 <HAL_NVIC_EnableIRQ>
}
 80013a8:	bf00      	nop
 80013aa:	37f0      	adds	r7, #240	; 0xf0
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	46020c00 	.word	0x46020c00
 80013b4:	42020000 	.word	0x42020000

080013b8 <HAL_LPTIM_MspInit>:
* @brief  LPTIM MSP Init
* @param  hlptim : LPTIM handle
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef *hlptim)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b0ce      	sub	sp, #312	; 0x138
 80013bc:	af00      	add	r7, sp, #0
 80013be:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80013c2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80013c6:	6018      	str	r0, [r3, #0]
  RCC_OscInitTypeDef       RCC_OscInitStruct;
  RCC_PeriphCLKInitTypeDef RCC_PeriphCLKInitStruct;

  /* Enable LSE clock */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE;
 80013c8:	2304      	movs	r3, #4
 80013ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80013ce:	2381      	movs	r3, #129	; 0x81
 80013d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80013d4:	2300      	movs	r3, #0
 80013d6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013da:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80013de:	4618      	mov	r0, r3
 80013e0:	f00a fee8 	bl	800c1b4 <HAL_RCC_OscConfig>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <HAL_LPTIM_MspInit+0x36>
  {
    webserver_process_error();
 80013ea:	f001 f997 	bl	800271c <webserver_process_error>
  }

  /* Select the LSE clock as LPTIM peripheral clock */
  RCC_PeriphCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 80013ee:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80013f2:	f5a3 7194 	sub.w	r1, r3, #296	; 0x128
 80013f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013fa:	f04f 0300 	mov.w	r3, #0
 80013fe:	e9c1 2300 	strd	r2, r3, [r1]
  RCC_PeriphCLKInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSI;
 8001402:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001406:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800140a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800140e:	679a      	str	r2, [r3, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct) != HAL_OK)
 8001410:	f107 0310 	add.w	r3, r7, #16
 8001414:	4618      	mov	r0, r3
 8001416:	f00c f979 	bl	800d70c <HAL_RCCEx_PeriphCLKConfig>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <HAL_LPTIM_MspInit+0x6c>
  {
    webserver_process_error();
 8001420:	f001 f97c 	bl	800271c <webserver_process_error>
  }

  /* Enable LPTIM clock */
  __HAL_RCC_LPTIM1_CLK_ENABLE();
 8001424:	4b19      	ldr	r3, [pc, #100]	; (800148c <HAL_LPTIM_MspInit+0xd4>)
 8001426:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800142a:	4a18      	ldr	r2, [pc, #96]	; (800148c <HAL_LPTIM_MspInit+0xd4>)
 800142c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001430:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 8001434:	4b15      	ldr	r3, [pc, #84]	; (800148c <HAL_LPTIM_MspInit+0xd4>)
 8001436:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800143a:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 800143e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001442:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800144c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001450:	681b      	ldr	r3, [r3, #0]

  /* Force the LPTIM Periheral Clock Reset */
  __HAL_RCC_LPTIM1_FORCE_RESET();
 8001452:	4b0e      	ldr	r3, [pc, #56]	; (800148c <HAL_LPTIM_MspInit+0xd4>)
 8001454:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001458:	4a0c      	ldr	r2, [pc, #48]	; (800148c <HAL_LPTIM_MspInit+0xd4>)
 800145a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800145e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Release the LPTIM Periheral Clock Reset */
  __HAL_RCC_LPTIM1_RELEASE_RESET();
 8001462:	4b0a      	ldr	r3, [pc, #40]	; (800148c <HAL_LPTIM_MspInit+0xd4>)
 8001464:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001468:	4a08      	ldr	r2, [pc, #32]	; (800148c <HAL_LPTIM_MspInit+0xd4>)
 800146a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800146e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* USART1 interrupt DeInit */
  HAL_NVIC_SetPriority(LPTIM1_IRQn, 15, 15);
 8001472:	220f      	movs	r2, #15
 8001474:	210f      	movs	r1, #15
 8001476:	2043      	movs	r0, #67	; 0x43
 8001478:	f008 fd91 	bl	8009f9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 800147c:	2043      	movs	r0, #67	; 0x43
 800147e:	f008 fda8 	bl	8009fd2 <HAL_NVIC_EnableIRQ>
}
 8001482:	bf00      	nop
 8001484:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	46020c00 	.word	0x46020c00

08001490 <NMI_Handler>:
/**********************************************************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  while (1)
 8001494:	e7fe      	b.n	8001494 <NMI_Handler+0x4>

08001496 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001496:	b480      	push	{r7}
 8001498:	af00      	add	r7, sp, #0
  while (1)
 800149a:	e7fe      	b.n	800149a <HardFault_Handler+0x4>

0800149c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  while (1)
 80014a0:	e7fe      	b.n	80014a0 <MemManage_Handler+0x4>

080014a2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014a2:	b480      	push	{r7}
 80014a4:	af00      	add	r7, sp, #0
  while (1)
 80014a6:	e7fe      	b.n	80014a6 <BusFault_Handler+0x4>

080014a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  while (1)
 80014ac:	e7fe      	b.n	80014ac <UsageFault_Handler+0x4>

080014ae <SecureFault_Handler>:

/**
  * @brief This function handles Secure fault.
  */
void SecureFault_Handler(void)
{
 80014ae:	b480      	push	{r7}
 80014b0:	af00      	add	r7, sp, #0
  while (1)
 80014b2:	e7fe      	b.n	80014b2 <SecureFault_Handler+0x4>

080014b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
}
 80014b8:	bf00      	nop
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr

080014c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014c2:	b480      	push	{r7}
 80014c4:	af00      	add	r7, sp, #0
}
 80014c6:	bf00      	nop
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr

080014d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
}
 80014d4:	bf00      	nop
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr

080014de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014de:	b580      	push	{r7, lr}
 80014e0:	af00      	add	r7, sp, #0
  HAL_IncTick();
 80014e2:	f008 fc3d 	bl	8009d60 <HAL_IncTick>
}
 80014e6:	bf00      	nop
 80014e8:	bd80      	pop	{r7, pc}
	...

080014ec <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  HAL_SPI_IRQHandler(&Wifi_SPIHandle);
 80014f0:	4802      	ldr	r0, [pc, #8]	; (80014fc <SPI2_IRQHandler+0x10>)
 80014f2:	f00f fd0d 	bl	8010f10 <HAL_SPI_IRQHandler>
}
 80014f6:	bf00      	nop
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	20000c14 	.word	0x20000c14

08001500 <EXTI14_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI14_IRQHandler(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(MXCHIP_NOTIFY_Pin);
 8001504:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001508:	f009 f900 	bl	800a70c <HAL_GPIO_EXTI_IRQHandler>
}
 800150c:	bf00      	nop
 800150e:	bd80      	pop	{r7, pc}

08001510 <EXTI15_IRQHandler>:

/**
  * @brief This function handles EXTI Line15 interrupt.
  */
void EXTI15_IRQHandler(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(MXCHIP_FLOW_Pin);
 8001514:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001518:	f009 f8f8 	bl	800a70c <HAL_GPIO_EXTI_IRQHandler>
}
 800151c:	bf00      	nop
 800151e:	bd80      	pop	{r7, pc}

08001520 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  HAL_LPTIM_IRQHandler(&LPTIMHandle);
 8001524:	4802      	ldr	r0, [pc, #8]	; (8001530 <LPTIM1_IRQHandler+0x10>)
 8001526:	f00a f9ba 	bl	800b89e <HAL_LPTIM_IRQHandler>
}
 800152a:	bf00      	nop
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	2000037c 	.word	0x2000037c

08001534 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
	return 1;
 8001538:	2301      	movs	r3, #1
}
 800153a:	4618      	mov	r0, r3
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr

08001544 <_kill>:

int _kill(int pid, int sig)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800154e:	f015 fb49 	bl	8016be4 <__errno>
 8001552:	4603      	mov	r3, r0
 8001554:	2216      	movs	r2, #22
 8001556:	601a      	str	r2, [r3, #0]
	return -1;
 8001558:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800155c:	4618      	mov	r0, r3
 800155e:	3708      	adds	r7, #8
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}

08001564 <_exit>:

void _exit (int status)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800156c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f7ff ffe7 	bl	8001544 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001576:	e7fe      	b.n	8001576 <_exit+0x12>

08001578 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b086      	sub	sp, #24
 800157c:	af00      	add	r7, sp, #0
 800157e:	60f8      	str	r0, [r7, #12]
 8001580:	60b9      	str	r1, [r7, #8]
 8001582:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001584:	2300      	movs	r3, #0
 8001586:	617b      	str	r3, [r7, #20]
 8001588:	e00a      	b.n	80015a0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800158a:	f7ff fdd3 	bl	8001134 <__io_getchar>
 800158e:	4601      	mov	r1, r0
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	1c5a      	adds	r2, r3, #1
 8001594:	60ba      	str	r2, [r7, #8]
 8001596:	b2ca      	uxtb	r2, r1
 8001598:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	3301      	adds	r3, #1
 800159e:	617b      	str	r3, [r7, #20]
 80015a0:	697a      	ldr	r2, [r7, #20]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	dbf0      	blt.n	800158a <_read+0x12>
	}

return len;
 80015a8:	687b      	ldr	r3, [r7, #4]
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3718      	adds	r7, #24
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015b2:	b580      	push	{r7, lr}
 80015b4:	b086      	sub	sp, #24
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	60f8      	str	r0, [r7, #12]
 80015ba:	60b9      	str	r1, [r7, #8]
 80015bc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015be:	2300      	movs	r3, #0
 80015c0:	617b      	str	r3, [r7, #20]
 80015c2:	e009      	b.n	80015d8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	1c5a      	adds	r2, r3, #1
 80015c8:	60ba      	str	r2, [r7, #8]
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7ff fd9b 	bl	8001108 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	3301      	adds	r3, #1
 80015d6:	617b      	str	r3, [r7, #20]
 80015d8:	697a      	ldr	r2, [r7, #20]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	429a      	cmp	r2, r3
 80015de:	dbf1      	blt.n	80015c4 <_write+0x12>
	}
	return len;
 80015e0:	687b      	ldr	r3, [r7, #4]
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3718      	adds	r7, #24
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}

080015ea <_close>:

int _close(int file)
{
 80015ea:	b480      	push	{r7}
 80015ec:	b083      	sub	sp, #12
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
	return -1;
 80015f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	370c      	adds	r7, #12
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr

08001602 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001602:	b480      	push	{r7}
 8001604:	b083      	sub	sp, #12
 8001606:	af00      	add	r7, sp, #0
 8001608:	6078      	str	r0, [r7, #4]
 800160a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001612:	605a      	str	r2, [r3, #4]
	return 0;
 8001614:	2300      	movs	r3, #0
}
 8001616:	4618      	mov	r0, r3
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr

08001622 <_isatty>:

int _isatty(int file)
{
 8001622:	b480      	push	{r7}
 8001624:	b083      	sub	sp, #12
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
	return 1;
 800162a:	2301      	movs	r3, #1
}
 800162c:	4618      	mov	r0, r3
 800162e:	370c      	adds	r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr

08001638 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001638:	b480      	push	{r7}
 800163a:	b085      	sub	sp, #20
 800163c:	af00      	add	r7, sp, #0
 800163e:	60f8      	str	r0, [r7, #12]
 8001640:	60b9      	str	r1, [r7, #8]
 8001642:	607a      	str	r2, [r7, #4]
	return 0;
 8001644:	2300      	movs	r3, #0
}
 8001646:	4618      	mov	r0, r3
 8001648:	3714      	adds	r7, #20
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
	...

08001654 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b086      	sub	sp, #24
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800165c:	4a14      	ldr	r2, [pc, #80]	; (80016b0 <_sbrk+0x5c>)
 800165e:	4b15      	ldr	r3, [pc, #84]	; (80016b4 <_sbrk+0x60>)
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001668:	4b13      	ldr	r3, [pc, #76]	; (80016b8 <_sbrk+0x64>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d102      	bne.n	8001676 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001670:	4b11      	ldr	r3, [pc, #68]	; (80016b8 <_sbrk+0x64>)
 8001672:	4a12      	ldr	r2, [pc, #72]	; (80016bc <_sbrk+0x68>)
 8001674:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001676:	4b10      	ldr	r3, [pc, #64]	; (80016b8 <_sbrk+0x64>)
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4413      	add	r3, r2
 800167e:	693a      	ldr	r2, [r7, #16]
 8001680:	429a      	cmp	r2, r3
 8001682:	d207      	bcs.n	8001694 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001684:	f015 faae 	bl	8016be4 <__errno>
 8001688:	4603      	mov	r3, r0
 800168a:	220c      	movs	r2, #12
 800168c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800168e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001692:	e009      	b.n	80016a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001694:	4b08      	ldr	r3, [pc, #32]	; (80016b8 <_sbrk+0x64>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800169a:	4b07      	ldr	r3, [pc, #28]	; (80016b8 <_sbrk+0x64>)
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4413      	add	r3, r2
 80016a2:	4a05      	ldr	r2, [pc, #20]	; (80016b8 <_sbrk+0x64>)
 80016a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016a6:	68fb      	ldr	r3, [r7, #12]
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3718      	adds	r7, #24
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	200c0000 	.word	0x200c0000
 80016b4:	00008000 	.word	0x00008000
 80016b8:	20000378 	.word	0x20000378
 80016bc:	20003498 	.word	0x20003498

080016c0 <system_init>:
  * @brief  Initialize the system application
  * @param  None
  * @retval Web Server status
  */
WebServer_StatusTypeDef system_init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* Configure the console */
  if (webserver_console_config() != WEBSERVER_OK)
 80016c4:	f7ff fccc 	bl	8001060 <webserver_console_config>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d002      	beq.n	80016d4 <system_init+0x14>
  {
    return SYSTEM_ERROR;
 80016ce:	f06f 0301 	mvn.w	r3, #1
 80016d2:	e008      	b.n	80016e6 <system_init+0x26>
  }

  /* Configure the LPTIM peripheral */
  if (lptim_config() != WEBSERVER_OK)
 80016d4:	f000 f87e 	bl	80017d4 <lptim_config>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d002      	beq.n	80016e4 <system_init+0x24>
  {
    return SYSTEM_ERROR;
 80016de:	f06f 0301 	mvn.w	r3, #1
 80016e2:	e000      	b.n	80016e6 <system_init+0x26>
  }

  return WEBSERVER_OK;
 80016e4:	2300      	movs	r3, #0
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	bd80      	pop	{r7, pc}

080016ea <instruction_cache_enable>:
  * @brief  Enable ICACHE with 1-way set-associative configuration.
  * @param  None
  * @retval None
  */
void instruction_cache_enable(void)
{
 80016ea:	b580      	push	{r7, lr}
 80016ec:	af00      	add	r7, sp, #0
  /* Configure ICACHE associativity mode */
  HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY);
 80016ee:	2000      	movs	r0, #0
 80016f0:	f009 feb4 	bl	800b45c <HAL_ICACHE_ConfigAssociativityMode>

  /* Enable ICACHE */
  HAL_ICACHE_Enable();
 80016f4:	f009 fed2 	bl	800b49c <HAL_ICACHE_Enable>
}
 80016f8:	bf00      	nop
 80016fa:	bd80      	pop	{r7, pc}

080016fc <system_clock_config>:
  *            Flash Latency(WS)              = 3
  * @param  None
  * @retval Web Server status
  */
WebServer_StatusTypeDef system_clock_config(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b09e      	sub	sp, #120	; 0x78
 8001700:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001702:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001706:	2200      	movs	r2, #0
 8001708:	601a      	str	r2, [r3, #0]
 800170a:	605a      	str	r2, [r3, #4]
 800170c:	609a      	str	r2, [r3, #8]
 800170e:	60da      	str	r2, [r3, #12]
 8001710:	611a      	str	r2, [r3, #16]
 8001712:	615a      	str	r2, [r3, #20]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001714:	463b      	mov	r3, r7
 8001716:	2260      	movs	r2, #96	; 0x60
 8001718:	2100      	movs	r1, #0
 800171a:	4618      	mov	r0, r3
 800171c:	f015 f9de 	bl	8016adc <memset>

  /* Configure the main internal regulator output voltage */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001720:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8001724:	f00a fc9a 	bl	800c05c <HAL_PWREx_ControlVoltageScaling>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d002      	beq.n	8001734 <system_clock_config+0x38>
  {
    return SYSTEM_ERROR;
 800172e:	f06f 0301 	mvn.w	r3, #1
 8001732:	e04a      	b.n	80017ca <system_clock_config+0xce>
  }

  /* Initializes the CPU, AHB and APB busses clocks */
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_HSI48 | RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_MSI;
 8001734:	2338      	movs	r3, #56	; 0x38
 8001736:	603b      	str	r3, [r7, #0]
  RCC_OscInitStruct.HSI48State          = RCC_HSI48_ON;
 8001738:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800173c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSIState            = RCC_LSI_ON;
 800173e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001742:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState            = RCC_MSI_ON;
 8001744:	2301      	movs	r3, #1
 8001746:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001748:	2310      	movs	r3, #16
 800174a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIClockRange       = RCC_MSIRANGE_0;
 800174c:	2300      	movs	r3, #0
 800174e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIDiv              = RCC_LSI_DIV1;
 8001750:	2300      	movs	r3, #0
 8001752:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
 8001754:	2302      	movs	r3, #2
 8001756:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_MSI;
 8001758:	2301      	movs	r3, #1
 800175a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMBOOST       = RCC_PLLMBOOST_DIV4;
 800175c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001760:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM            = 3;
 8001762:	2303      	movs	r3, #3
 8001764:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN            = 15;
 8001766:	230f      	movs	r3, #15
 8001768:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP            = 2;
 800176a:	2302      	movs	r3, #2
 800176c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ            = 2;
 800176e:	2302      	movs	r3, #2
 8001770:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR            = 2;
 8001772:	2302      	movs	r3, #2
 8001774:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLRGE          = RCC_PLLVCIRANGE_1;
 8001776:	230c      	movs	r3, #12
 8001778:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLFRACN        = 0;
 800177a:	2300      	movs	r3, #0
 800177c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800177e:	463b      	mov	r3, r7
 8001780:	4618      	mov	r0, r3
 8001782:	f00a fd17 	bl	800c1b4 <HAL_RCC_OscConfig>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d002      	beq.n	8001792 <system_clock_config+0x96>
  {
    return SYSTEM_ERROR;
 800178c:	f06f 0301 	mvn.w	r3, #1
 8001790:	e01b      	b.n	80017ca <system_clock_config+0xce>
  }

  /* Initializes the CPU, AHB and APB busses clocks */
  RCC_ClkInitStruct.ClockType      = RCC_CLOCKTYPE_HCLK  | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 |
 8001792:	231f      	movs	r3, #31
 8001794:	663b      	str	r3, [r7, #96]	; 0x60
                                     RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_PLLCLK;
 8001796:	2303      	movs	r3, #3
 8001798:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
 800179a:	2300      	movs	r3, #0
 800179c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800179e:	2300      	movs	r3, #0
 80017a0:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017a2:	2300      	movs	r3, #0
 80017a4:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80017a6:	2300      	movs	r3, #0
 80017a8:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80017aa:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80017ae:	2103      	movs	r1, #3
 80017b0:	4618      	mov	r0, r3
 80017b2:	f00b fbdb 	bl	800cf6c <HAL_RCC_ClockConfig>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d002      	beq.n	80017c2 <system_clock_config+0xc6>
  {
    return SYSTEM_ERROR;
 80017bc:	f06f 0301 	mvn.w	r3, #1
 80017c0:	e003      	b.n	80017ca <system_clock_config+0xce>
  }

  /* Configure the Systick */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80017c2:	2004      	movs	r0, #4
 80017c4:	f008 fc20 	bl	800a008 <HAL_SYSTICK_CLKSourceConfig>

  return WEBSERVER_OK;
 80017c8:	2300      	movs	r3, #0
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3778      	adds	r7, #120	; 0x78
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
	...

080017d4 <lptim_config>:
  * @brief  Initialize the LPTIM peripheral
  * @param  None
  * @retval Web Server status
  */
static WebServer_StatusTypeDef lptim_config(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
   *  Counter Trigger = Software trigger
   *  Output Polarity = High
   *  Update mode     = Immediate (Registers are immediately updated after any
   *                    write access)
   */
  LPTIMHandle.Instance = LPTIM1;
 80017da:	4b2a      	ldr	r3, [pc, #168]	; (8001884 <lptim_config+0xb0>)
 80017dc:	4a2a      	ldr	r2, [pc, #168]	; (8001888 <lptim_config+0xb4>)
 80017de:	601a      	str	r2, [r3, #0]

  LPTIMHandle.Init.Clock.Source                  = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 80017e0:	4b28      	ldr	r3, [pc, #160]	; (8001884 <lptim_config+0xb0>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	605a      	str	r2, [r3, #4]
  LPTIMHandle.Init.Clock.Prescaler               = LPTIM_PRESCALER_DIV1;
 80017e6:	4b27      	ldr	r3, [pc, #156]	; (8001884 <lptim_config+0xb0>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	609a      	str	r2, [r3, #8]
  LPTIMHandle.Init.CounterSource                 = LPTIM_COUNTERSOURCE_INTERNAL;
 80017ec:	4b25      	ldr	r3, [pc, #148]	; (8001884 <lptim_config+0xb0>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	629a      	str	r2, [r3, #40]	; 0x28
  LPTIMHandle.Init.UltraLowPowerClock.Polarity   = LPTIM_CLOCKPOLARITY_RISING;
 80017f2:	4b24      	ldr	r3, [pc, #144]	; (8001884 <lptim_config+0xb0>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	60da      	str	r2, [r3, #12]
  LPTIMHandle.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION;
 80017f8:	4b22      	ldr	r3, [pc, #136]	; (8001884 <lptim_config+0xb0>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	611a      	str	r2, [r3, #16]
  LPTIMHandle.Init.Trigger.Source                = LPTIM_TRIGSOURCE_SOFTWARE;
 80017fe:	4b21      	ldr	r3, [pc, #132]	; (8001884 <lptim_config+0xb0>)
 8001800:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001804:	615a      	str	r2, [r3, #20]
  LPTIMHandle.Init.Trigger.ActiveEdge            = LPTIM_ACTIVEEDGE_RISING;
 8001806:	4b1f      	ldr	r3, [pc, #124]	; (8001884 <lptim_config+0xb0>)
 8001808:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800180c:	619a      	str	r2, [r3, #24]
  LPTIMHandle.Init.Period                        = PERIOD_VALUE;
 800180e:	4b1d      	ldr	r3, [pc, #116]	; (8001884 <lptim_config+0xb0>)
 8001810:	f240 6267 	movw	r2, #1639	; 0x667
 8001814:	621a      	str	r2, [r3, #32]
  LPTIMHandle.Init.RepetitionCounter             = 0;
 8001816:	4b1b      	ldr	r3, [pc, #108]	; (8001884 <lptim_config+0xb0>)
 8001818:	2200      	movs	r2, #0
 800181a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize LPTIM peripheral according to the passed parameters */
  if (HAL_LPTIM_Init(&LPTIMHandle) != HAL_OK)
 800181c:	4819      	ldr	r0, [pc, #100]	; (8001884 <lptim_config+0xb0>)
 800181e:	f009 fe4d 	bl	800b4bc <HAL_LPTIM_Init>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d002      	beq.n	800182e <lptim_config+0x5a>
  {
    return SYSTEM_ERROR;
 8001828:	f06f 0301 	mvn.w	r3, #1
 800182c:	e026      	b.n	800187c <lptim_config+0xa8>
  }

  /* Register LPTIM callback */
  if (HAL_LPTIM_RegisterCallback(&LPTIMHandle, HAL_LPTIM_UPDATE_EVENT_CB_ID, LPTIM_UpdateEventCallback) != HAL_OK)
 800182e:	4a17      	ldr	r2, [pc, #92]	; (800188c <lptim_config+0xb8>)
 8001830:	2109      	movs	r1, #9
 8001832:	4814      	ldr	r0, [pc, #80]	; (8001884 <lptim_config+0xb0>)
 8001834:	f00a fa38 	bl	800bca8 <HAL_LPTIM_RegisterCallback>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d002      	beq.n	8001844 <lptim_config+0x70>
  {
    return SYSTEM_ERROR;
 800183e:	f06f 0301 	mvn.w	r3, #1
 8001842:	e01b      	b.n	800187c <lptim_config+0xa8>
  /*
  *  Period = 99
  *  Pulse  = 49
  *  According to this configuration, the duty cycle will be equal to 50%
  */
  sConfig.Pulse      = PULSE_VALUE;
 8001844:	f240 3333 	movw	r3, #819	; 0x333
 8001848:	603b      	str	r3, [r7, #0]
  sConfig.OCPolarity = LPTIM_OCPOLARITY_LOW;
 800184a:	2301      	movs	r3, #1
 800184c:	607b      	str	r3, [r7, #4]
  if (HAL_LPTIM_OC_ConfigChannel(&LPTIMHandle, &sConfig, LPTIM_CHANNEL_1) != HAL_OK)
 800184e:	463b      	mov	r3, r7
 8001850:	2200      	movs	r2, #0
 8001852:	4619      	mov	r1, r3
 8001854:	480b      	ldr	r0, [pc, #44]	; (8001884 <lptim_config+0xb0>)
 8001856:	f009 ffef 	bl	800b838 <HAL_LPTIM_OC_ConfigChannel>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d002      	beq.n	8001866 <lptim_config+0x92>
  {
    return SYSTEM_ERROR;
 8001860:	f06f 0301 	mvn.w	r3, #1
 8001864:	e00a      	b.n	800187c <lptim_config+0xa8>
  }

  /* Start the LPTIM PWM */
  if (HAL_LPTIM_PWM_Start_IT(&LPTIMHandle, LPTIM_CHANNEL_1) != HAL_OK)
 8001866:	2100      	movs	r1, #0
 8001868:	4806      	ldr	r0, [pc, #24]	; (8001884 <lptim_config+0xb0>)
 800186a:	f009 ff33 	bl	800b6d4 <HAL_LPTIM_PWM_Start_IT>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d002      	beq.n	800187a <lptim_config+0xa6>
  {
    return SYSTEM_ERROR;
 8001874:	f06f 0301 	mvn.w	r3, #1
 8001878:	e000      	b.n	800187c <lptim_config+0xa8>
  }

  return WEBSERVER_OK;
 800187a:	2300      	movs	r3, #0
}
 800187c:	4618      	mov	r0, r3
 800187e:	3708      	adds	r7, #8
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	2000037c 	.word	0x2000037c
 8001888:	46004400 	.word	0x46004400
 800188c:	08001891 	.word	0x08001891

08001890 <LPTIM_UpdateEventCallback>:
  * @brief  Update event callback in non-blocking mode.
  * @param  hlptim : Pointer to LPTIM handle
  * @retval None
  */
static void LPTIM_UpdateEventCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  /* Toggle GREEN led */
  BSP_LED_Toggle(LED_GREEN);
 8001898:	2001      	movs	r0, #1
 800189a:	f001 fced 	bl	8003278 <BSP_LED_Toggle>
}
 800189e:	bf00      	nop
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
	...

080018a8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80018a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018e0 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80018ac:	f008 f9c4 	bl	8009c38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80018b0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80018b2:	e003      	b.n	80018bc <LoopCopyDataInit>

080018b4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80018b4:	4b0b      	ldr	r3, [pc, #44]	; (80018e4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80018b6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80018b8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80018ba:	3104      	adds	r1, #4

080018bc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80018bc:	480a      	ldr	r0, [pc, #40]	; (80018e8 <LoopForever+0xa>)
	ldr	r3, =_edata
 80018be:	4b0b      	ldr	r3, [pc, #44]	; (80018ec <LoopForever+0xe>)
	adds	r2, r0, r1
 80018c0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80018c2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80018c4:	d3f6      	bcc.n	80018b4 <CopyDataInit>
	ldr	r2, =_sbss
 80018c6:	4a0a      	ldr	r2, [pc, #40]	; (80018f0 <LoopForever+0x12>)
	b	LoopFillZerobss
 80018c8:	e002      	b.n	80018d0 <LoopFillZerobss>

080018ca <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80018ca:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80018cc:	f842 3b04 	str.w	r3, [r2], #4

080018d0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80018d0:	4b08      	ldr	r3, [pc, #32]	; (80018f4 <LoopForever+0x16>)
	cmp	r2, r3
 80018d2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80018d4:	d3f9      	bcc.n	80018ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018d6:	f015 f98b 	bl	8016bf0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80018da:	f7ff fc41 	bl	8001160 <main>

080018de <LoopForever>:

LoopForever:
    b LoopForever
 80018de:	e7fe      	b.n	80018de <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80018e0:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 80018e4:	0801d248 	.word	0x0801d248
	ldr	r0, =_sdata
 80018e8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80018ec:	200002c8 	.word	0x200002c8
	ldr	r2, =_sbss
 80018f0:	200002c8 	.word	0x200002c8
	ldr	r3, = _ebss
 80018f4:	20003498 	.word	0x20003498

080018f8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80018f8:	e7fe      	b.n	80018f8 <ADC1_IRQHandler>
	...

080018fc <webserver_http_encode_html_response>:
  * @param  html_size     : html body size.
  * @retval Web Server status.
  */
WebServer_StatusTypeDef webserver_http_encode_html_response(char *html_response,
                                                            int html_size)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b088      	sub	sp, #32
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
  char body_length[20] = {0};
 8001906:	2300      	movs	r3, #0
 8001908:	60fb      	str	r3, [r7, #12]
 800190a:	f107 0310 	add.w	r3, r7, #16
 800190e:	2200      	movs	r2, #0
 8001910:	601a      	str	r2, [r3, #0]
 8001912:	605a      	str	r2, [r3, #4]
 8001914:	609a      	str	r2, [r3, #8]
 8001916:	60da      	str	r2, [r3, #12]

  /* Clear response buffer from any previous data */
  memset(html_response, 0, strlen((char *)html_response));
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f7fe fcad 	bl	8000278 <strlen>
 800191e:	4603      	mov	r3, r0
 8001920:	461a      	mov	r2, r3
 8001922:	2100      	movs	r1, #0
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	f015 f8d9 	bl	8016adc <memset>

  /* Add http accept header */
  strcpy(html_response, http_headers[HTTP_HEADER_ACCEPT]);
 800192a:	4b30      	ldr	r3, [pc, #192]	; (80019ec <webserver_http_encode_html_response+0xf0>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4619      	mov	r1, r3
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f015 f99f 	bl	8016c74 <strcpy>

  /* Add http server header */
  strcat(html_response, http_headers[HTTP_HEADER_SERVER]);
 8001936:	4b2d      	ldr	r3, [pc, #180]	; (80019ec <webserver_http_encode_html_response+0xf0>)
 8001938:	69db      	ldr	r3, [r3, #28]
 800193a:	4619      	mov	r1, r3
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	f015 f86f 	bl	8016a20 <strcat>

  /* Add http control headers */
  strcat(html_response, http_headers[HTTP_HEADER_CONTROL_ORIGIN]);
 8001942:	4b2a      	ldr	r3, [pc, #168]	; (80019ec <webserver_http_encode_html_response+0xf0>)
 8001944:	6a1b      	ldr	r3, [r3, #32]
 8001946:	4619      	mov	r1, r3
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f015 f869 	bl	8016a20 <strcat>
  strcat(html_response, http_headers[HTTP_HEADER_CONTROL_METHODS]);
 800194e:	4b27      	ldr	r3, [pc, #156]	; (80019ec <webserver_http_encode_html_response+0xf0>)
 8001950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001952:	4619      	mov	r1, r3
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f015 f863 	bl	8016a20 <strcat>
  strcat(html_response, http_headers[HTTP_HEADER_CONTROL_HEADERS]);
 800195a:	4b24      	ldr	r3, [pc, #144]	; (80019ec <webserver_http_encode_html_response+0xf0>)
 800195c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800195e:	4619      	mov	r1, r3
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f015 f85d 	bl	8016a20 <strcat>

  /* Add http content type header */
  strcat(html_response, http_headers[HTTP_HEADER_CONTENT_TYPE]);
 8001966:	4b21      	ldr	r3, [pc, #132]	; (80019ec <webserver_http_encode_html_response+0xf0>)
 8001968:	68db      	ldr	r3, [r3, #12]
 800196a:	4619      	mov	r1, r3
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f015 f857 	bl	8016a20 <strcat>
  strcat(html_response, http_content_types[HTTP_HEADER_CONTENT_HTML]);
 8001972:	4b1f      	ldr	r3, [pc, #124]	; (80019f0 <webserver_http_encode_html_response+0xf4>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4619      	mov	r1, r3
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f015 f851 	bl	8016a20 <strcat>

  /* Add http content range header */
  strcat(html_response, http_headers[HTTP_HEADER_CONTENT_RANGE]);
 800197e:	4b1b      	ldr	r3, [pc, #108]	; (80019ec <webserver_http_encode_html_response+0xf0>)
 8001980:	691b      	ldr	r3, [r3, #16]
 8001982:	4619      	mov	r1, r3
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f015 f84b 	bl	8016a20 <strcat>

  /* Add http content length header */
  strcat(html_response, http_headers[HTTP_HEADER_CONTENT_LENGTH]);
 800198a:	4b18      	ldr	r3, [pc, #96]	; (80019ec <webserver_http_encode_html_response+0xf0>)
 800198c:	695b      	ldr	r3, [r3, #20]
 800198e:	4619      	mov	r1, r3
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f015 f845 	bl	8016a20 <strcat>
  sprintf(body_length, "%d", html_size);
 8001996:	f107 030c 	add.w	r3, r7, #12
 800199a:	683a      	ldr	r2, [r7, #0]
 800199c:	4915      	ldr	r1, [pc, #84]	; (80019f4 <webserver_http_encode_html_response+0xf8>)
 800199e:	4618      	mov	r0, r3
 80019a0:	f013 ff76 	bl	8015890 <siprintf>
  strcat(html_response, body_length);
 80019a4:	f107 030c 	add.w	r3, r7, #12
 80019a8:	4619      	mov	r1, r3
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f015 f838 	bl	8016a20 <strcat>
  strcat(html_response, "\r\n");
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f7fe fc61 	bl	8000278 <strlen>
 80019b6:	4603      	mov	r3, r0
 80019b8:	461a      	mov	r2, r3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4413      	add	r3, r2
 80019be:	4a0e      	ldr	r2, [pc, #56]	; (80019f8 <webserver_http_encode_html_response+0xfc>)
 80019c0:	8811      	ldrh	r1, [r2, #0]
 80019c2:	7892      	ldrb	r2, [r2, #2]
 80019c4:	8019      	strh	r1, [r3, #0]
 80019c6:	709a      	strb	r2, [r3, #2]

  /* Add http close connection header */
  strcat(html_response, http_headers[HTTP_HEADER_CONNECTION_CLOSE]);
 80019c8:	4b08      	ldr	r3, [pc, #32]	; (80019ec <webserver_http_encode_html_response+0xf0>)
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	4619      	mov	r1, r3
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f015 f826 	bl	8016a20 <strcat>

  /* Add http end of headers */
  strcat(html_response, http_headers[HTTP_HEADER_HEADERS_END]);
 80019d4:	4b05      	ldr	r3, [pc, #20]	; (80019ec <webserver_http_encode_html_response+0xf0>)
 80019d6:	699b      	ldr	r3, [r3, #24]
 80019d8:	4619      	mov	r1, r3
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f015 f820 	bl	8016a20 <strcat>

  return WEBSERVER_OK;
 80019e0:	2300      	movs	r3, #0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3720      	adds	r7, #32
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	20000000 	.word	0x20000000
 80019f0:	20000030 	.word	0x20000030
 80019f4:	08019fec 	.word	0x08019fec
 80019f8:	08019ff0 	.word	0x08019ff0

080019fc <webserver_http_encode_css_response>:
  * @param  css_size     : css body size.
  * @retval Web Server status.
  */
WebServer_StatusTypeDef webserver_http_encode_css_response(char *css_response,
                                                           int css_size)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b088      	sub	sp, #32
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	6039      	str	r1, [r7, #0]
  char body_length[20] = {0};
 8001a06:	2300      	movs	r3, #0
 8001a08:	60fb      	str	r3, [r7, #12]
 8001a0a:	f107 0310 	add.w	r3, r7, #16
 8001a0e:	2200      	movs	r2, #0
 8001a10:	601a      	str	r2, [r3, #0]
 8001a12:	605a      	str	r2, [r3, #4]
 8001a14:	609a      	str	r2, [r3, #8]
 8001a16:	60da      	str	r2, [r3, #12]

  /* Clear response buffer from any previous data */
  memset(css_response, 0, strlen((char *)css_response));
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f7fe fc2d 	bl	8000278 <strlen>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	461a      	mov	r2, r3
 8001a22:	2100      	movs	r1, #0
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f015 f859 	bl	8016adc <memset>

  /* Add http accept header */
  strcpy(css_response, http_headers[HTTP_HEADER_ACCEPT]);
 8001a2a:	4b27      	ldr	r3, [pc, #156]	; (8001ac8 <webserver_http_encode_css_response+0xcc>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4619      	mov	r1, r3
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f015 f91f 	bl	8016c74 <strcpy>

  /* Add http server header */
  strcat(css_response, http_headers[HTTP_HEADER_SERVER]);
 8001a36:	4b24      	ldr	r3, [pc, #144]	; (8001ac8 <webserver_http_encode_css_response+0xcc>)
 8001a38:	69db      	ldr	r3, [r3, #28]
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f014 ffef 	bl	8016a20 <strcat>

  /* Add http content type header */
  strcat(css_response, http_headers[HTTP_HEADER_CONTENT_TYPE]);
 8001a42:	4b21      	ldr	r3, [pc, #132]	; (8001ac8 <webserver_http_encode_css_response+0xcc>)
 8001a44:	68db      	ldr	r3, [r3, #12]
 8001a46:	4619      	mov	r1, r3
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f014 ffe9 	bl	8016a20 <strcat>
  strcat(css_response, http_content_types[HTTP_HEADER_CONTENT_CSS]);
 8001a4e:	4b1f      	ldr	r3, [pc, #124]	; (8001acc <webserver_http_encode_css_response+0xd0>)
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	4619      	mov	r1, r3
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	f014 ffe3 	bl	8016a20 <strcat>

  /* Add http content range header */
  strcat(css_response, http_headers[HTTP_HEADER_CONTENT_RANGE]);
 8001a5a:	4b1b      	ldr	r3, [pc, #108]	; (8001ac8 <webserver_http_encode_css_response+0xcc>)
 8001a5c:	691b      	ldr	r3, [r3, #16]
 8001a5e:	4619      	mov	r1, r3
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f014 ffdd 	bl	8016a20 <strcat>

  /* Add http content length header */
  strcat(css_response, http_headers[HTTP_HEADER_CONTENT_LENGTH]);
 8001a66:	4b18      	ldr	r3, [pc, #96]	; (8001ac8 <webserver_http_encode_css_response+0xcc>)
 8001a68:	695b      	ldr	r3, [r3, #20]
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f014 ffd7 	bl	8016a20 <strcat>
  sprintf(body_length, "%d", css_size);
 8001a72:	f107 030c 	add.w	r3, r7, #12
 8001a76:	683a      	ldr	r2, [r7, #0]
 8001a78:	4915      	ldr	r1, [pc, #84]	; (8001ad0 <webserver_http_encode_css_response+0xd4>)
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f013 ff08 	bl	8015890 <siprintf>
  strcat(css_response, body_length);
 8001a80:	f107 030c 	add.w	r3, r7, #12
 8001a84:	4619      	mov	r1, r3
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f014 ffca 	bl	8016a20 <strcat>
  strcat(css_response, "\r\n");
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f7fe fbf3 	bl	8000278 <strlen>
 8001a92:	4603      	mov	r3, r0
 8001a94:	461a      	mov	r2, r3
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4413      	add	r3, r2
 8001a9a:	4a0e      	ldr	r2, [pc, #56]	; (8001ad4 <webserver_http_encode_css_response+0xd8>)
 8001a9c:	8811      	ldrh	r1, [r2, #0]
 8001a9e:	7892      	ldrb	r2, [r2, #2]
 8001aa0:	8019      	strh	r1, [r3, #0]
 8001aa2:	709a      	strb	r2, [r3, #2]

  /* Add http close connection header */
  strcat(css_response, http_headers[HTTP_HEADER_CONNECTION_CLOSE]);
 8001aa4:	4b08      	ldr	r3, [pc, #32]	; (8001ac8 <webserver_http_encode_css_response+0xcc>)
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f014 ffb8 	bl	8016a20 <strcat>

  /* Add http end of headers */
  strcat(css_response, http_headers[HTTP_HEADER_HEADERS_END]);
 8001ab0:	4b05      	ldr	r3, [pc, #20]	; (8001ac8 <webserver_http_encode_css_response+0xcc>)
 8001ab2:	699b      	ldr	r3, [r3, #24]
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f014 ffb2 	bl	8016a20 <strcat>

  return WEBSERVER_OK;
 8001abc:	2300      	movs	r3, #0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3720      	adds	r7, #32
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	20000000 	.word	0x20000000
 8001acc:	20000030 	.word	0x20000030
 8001ad0:	08019fec 	.word	0x08019fec
 8001ad4:	08019ff0 	.word	0x08019ff0

08001ad8 <webserver_http_encode_js_response>:
  * @param  js_size     : js body size.
  * @retval Web Server status.
  */
WebServer_StatusTypeDef webserver_http_encode_js_response(char *js_response,
                                                          int js_size)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b088      	sub	sp, #32
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	6039      	str	r1, [r7, #0]
  char body_length[20] = {0};
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	60fb      	str	r3, [r7, #12]
 8001ae6:	f107 0310 	add.w	r3, r7, #16
 8001aea:	2200      	movs	r2, #0
 8001aec:	601a      	str	r2, [r3, #0]
 8001aee:	605a      	str	r2, [r3, #4]
 8001af0:	609a      	str	r2, [r3, #8]
 8001af2:	60da      	str	r2, [r3, #12]

  /* Clear response buffer from any previous data */
  memset(js_response, 0, strlen((char *)js_response));
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f7fe fbbf 	bl	8000278 <strlen>
 8001afa:	4603      	mov	r3, r0
 8001afc:	461a      	mov	r2, r3
 8001afe:	2100      	movs	r1, #0
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f014 ffeb 	bl	8016adc <memset>

  /* Add http accept header */
  strcpy(js_response, http_headers[HTTP_HEADER_ACCEPT]);
 8001b06:	4b27      	ldr	r3, [pc, #156]	; (8001ba4 <webserver_http_encode_js_response+0xcc>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f015 f8b1 	bl	8016c74 <strcpy>

  /* Add http server header */
  strcat(js_response, http_headers[HTTP_HEADER_SERVER]);
 8001b12:	4b24      	ldr	r3, [pc, #144]	; (8001ba4 <webserver_http_encode_js_response+0xcc>)
 8001b14:	69db      	ldr	r3, [r3, #28]
 8001b16:	4619      	mov	r1, r3
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f014 ff81 	bl	8016a20 <strcat>

  /* Add http content type header */
  strcat(js_response, http_headers[HTTP_HEADER_CONTENT_TYPE]);
 8001b1e:	4b21      	ldr	r3, [pc, #132]	; (8001ba4 <webserver_http_encode_js_response+0xcc>)
 8001b20:	68db      	ldr	r3, [r3, #12]
 8001b22:	4619      	mov	r1, r3
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f014 ff7b 	bl	8016a20 <strcat>
  strcat(js_response, http_content_types[HTTP_HEADER_CONTENT_JS]);
 8001b2a:	4b1f      	ldr	r3, [pc, #124]	; (8001ba8 <webserver_http_encode_js_response+0xd0>)
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	4619      	mov	r1, r3
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f014 ff75 	bl	8016a20 <strcat>

  /* Add http content range header */
  strcat(js_response, http_headers[HTTP_HEADER_CONTENT_RANGE]);
 8001b36:	4b1b      	ldr	r3, [pc, #108]	; (8001ba4 <webserver_http_encode_js_response+0xcc>)
 8001b38:	691b      	ldr	r3, [r3, #16]
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	f014 ff6f 	bl	8016a20 <strcat>

  /* Add http content length header */
  strcat(js_response, http_headers[HTTP_HEADER_CONTENT_LENGTH]);
 8001b42:	4b18      	ldr	r3, [pc, #96]	; (8001ba4 <webserver_http_encode_js_response+0xcc>)
 8001b44:	695b      	ldr	r3, [r3, #20]
 8001b46:	4619      	mov	r1, r3
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f014 ff69 	bl	8016a20 <strcat>
  sprintf(body_length, "%d", js_size);
 8001b4e:	f107 030c 	add.w	r3, r7, #12
 8001b52:	683a      	ldr	r2, [r7, #0]
 8001b54:	4915      	ldr	r1, [pc, #84]	; (8001bac <webserver_http_encode_js_response+0xd4>)
 8001b56:	4618      	mov	r0, r3
 8001b58:	f013 fe9a 	bl	8015890 <siprintf>
  strcat(js_response, body_length);
 8001b5c:	f107 030c 	add.w	r3, r7, #12
 8001b60:	4619      	mov	r1, r3
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f014 ff5c 	bl	8016a20 <strcat>
  strcat(js_response, "\r\n");
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f7fe fb85 	bl	8000278 <strlen>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	461a      	mov	r2, r3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4413      	add	r3, r2
 8001b76:	4a0e      	ldr	r2, [pc, #56]	; (8001bb0 <webserver_http_encode_js_response+0xd8>)
 8001b78:	8811      	ldrh	r1, [r2, #0]
 8001b7a:	7892      	ldrb	r2, [r2, #2]
 8001b7c:	8019      	strh	r1, [r3, #0]
 8001b7e:	709a      	strb	r2, [r3, #2]

  /* Add http close connection header */
  strcat(js_response, http_headers[HTTP_HEADER_CONNECTION_CLOSE]);
 8001b80:	4b08      	ldr	r3, [pc, #32]	; (8001ba4 <webserver_http_encode_js_response+0xcc>)
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	4619      	mov	r1, r3
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f014 ff4a 	bl	8016a20 <strcat>

  /* Add http end of headers */
  strcat(js_response, http_headers[HTTP_HEADER_HEADERS_END]);
 8001b8c:	4b05      	ldr	r3, [pc, #20]	; (8001ba4 <webserver_http_encode_js_response+0xcc>)
 8001b8e:	699b      	ldr	r3, [r3, #24]
 8001b90:	4619      	mov	r1, r3
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f014 ff44 	bl	8016a20 <strcat>

  return WEBSERVER_OK;
 8001b98:	2300      	movs	r3, #0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3720      	adds	r7, #32
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	20000000 	.word	0x20000000
 8001ba8:	20000030 	.word	0x20000030
 8001bac:	08019fec 	.word	0x08019fec
 8001bb0:	08019ff0 	.word	0x08019ff0

08001bb4 <webserver_http_encode_favicon_response>:
  * @param  favicon_size     : favicon body size.
  * @retval Web Server status.
  */
WebServer_StatusTypeDef webserver_http_encode_favicon_response(char *favicon_response,
                                                               int favicon_size)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b088      	sub	sp, #32
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	6039      	str	r1, [r7, #0]
  char body_length[20] = {0};
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	60fb      	str	r3, [r7, #12]
 8001bc2:	f107 0310 	add.w	r3, r7, #16
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	601a      	str	r2, [r3, #0]
 8001bca:	605a      	str	r2, [r3, #4]
 8001bcc:	609a      	str	r2, [r3, #8]
 8001bce:	60da      	str	r2, [r3, #12]

  /* Clear response buffer from any previous data */
  memset(favicon_response, 0, strlen((char *)favicon_response));
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f7fe fb51 	bl	8000278 <strlen>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	461a      	mov	r2, r3
 8001bda:	2100      	movs	r1, #0
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f014 ff7d 	bl	8016adc <memset>

  /* Add http accept header */
  strcpy(favicon_response, http_headers[HTTP_HEADER_ACCEPT]);
 8001be2:	4b2a      	ldr	r3, [pc, #168]	; (8001c8c <webserver_http_encode_favicon_response+0xd8>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4619      	mov	r1, r3
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f015 f843 	bl	8016c74 <strcpy>

  /* Add http server header */
  strcat(favicon_response, http_headers[HTTP_HEADER_SERVER]);
 8001bee:	4b27      	ldr	r3, [pc, #156]	; (8001c8c <webserver_http_encode_favicon_response+0xd8>)
 8001bf0:	69db      	ldr	r3, [r3, #28]
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f014 ff13 	bl	8016a20 <strcat>

  /* Add http cache control header */
  strcat(favicon_response, http_headers[HTTP_HEADER_CACHE_CONTROL]);
 8001bfa:	4b24      	ldr	r3, [pc, #144]	; (8001c8c <webserver_http_encode_favicon_response+0xd8>)
 8001bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bfe:	4619      	mov	r1, r3
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f014 ff0d 	bl	8016a20 <strcat>

  /* Add http content type header */
  strcat(favicon_response, http_headers[HTTP_HEADER_CONTENT_TYPE]);
 8001c06:	4b21      	ldr	r3, [pc, #132]	; (8001c8c <webserver_http_encode_favicon_response+0xd8>)
 8001c08:	68db      	ldr	r3, [r3, #12]
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f014 ff07 	bl	8016a20 <strcat>
  strcat(favicon_response, http_content_types[HTTP_HEADER_CONTENT_FAVICON]);
 8001c12:	4b1f      	ldr	r3, [pc, #124]	; (8001c90 <webserver_http_encode_favicon_response+0xdc>)
 8001c14:	68db      	ldr	r3, [r3, #12]
 8001c16:	4619      	mov	r1, r3
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f014 ff01 	bl	8016a20 <strcat>

  /* Add http content range header */
  strcat(favicon_response, http_headers[HTTP_HEADER_CONTENT_RANGE]);
 8001c1e:	4b1b      	ldr	r3, [pc, #108]	; (8001c8c <webserver_http_encode_favicon_response+0xd8>)
 8001c20:	691b      	ldr	r3, [r3, #16]
 8001c22:	4619      	mov	r1, r3
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f014 fefb 	bl	8016a20 <strcat>

  /* Add http content length header */
  strcat(favicon_response, http_headers[HTTP_HEADER_CONTENT_LENGTH]);
 8001c2a:	4b18      	ldr	r3, [pc, #96]	; (8001c8c <webserver_http_encode_favicon_response+0xd8>)
 8001c2c:	695b      	ldr	r3, [r3, #20]
 8001c2e:	4619      	mov	r1, r3
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f014 fef5 	bl	8016a20 <strcat>
  sprintf(body_length, "%d", favicon_size);
 8001c36:	f107 030c 	add.w	r3, r7, #12
 8001c3a:	683a      	ldr	r2, [r7, #0]
 8001c3c:	4915      	ldr	r1, [pc, #84]	; (8001c94 <webserver_http_encode_favicon_response+0xe0>)
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f013 fe26 	bl	8015890 <siprintf>
  strcat(favicon_response, body_length);
 8001c44:	f107 030c 	add.w	r3, r7, #12
 8001c48:	4619      	mov	r1, r3
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f014 fee8 	bl	8016a20 <strcat>
  strcat(favicon_response, "\r\n");
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f7fe fb11 	bl	8000278 <strlen>
 8001c56:	4603      	mov	r3, r0
 8001c58:	461a      	mov	r2, r3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	4a0e      	ldr	r2, [pc, #56]	; (8001c98 <webserver_http_encode_favicon_response+0xe4>)
 8001c60:	8811      	ldrh	r1, [r2, #0]
 8001c62:	7892      	ldrb	r2, [r2, #2]
 8001c64:	8019      	strh	r1, [r3, #0]
 8001c66:	709a      	strb	r2, [r3, #2]

  /* Add http close connection header */
  strcat(favicon_response, http_headers[HTTP_HEADER_CONNECTION_CLOSE]);
 8001c68:	4b08      	ldr	r3, [pc, #32]	; (8001c8c <webserver_http_encode_favicon_response+0xd8>)
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f014 fed6 	bl	8016a20 <strcat>

  /* Add http end of headers */
  strcat(favicon_response, http_headers[HTTP_HEADER_HEADERS_END]);
 8001c74:	4b05      	ldr	r3, [pc, #20]	; (8001c8c <webserver_http_encode_favicon_response+0xd8>)
 8001c76:	699b      	ldr	r3, [r3, #24]
 8001c78:	4619      	mov	r1, r3
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f014 fed0 	bl	8016a20 <strcat>

  return WEBSERVER_OK;
 8001c80:	2300      	movs	r3, #0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3720      	adds	r7, #32
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	20000000 	.word	0x20000000
 8001c90:	20000030 	.word	0x20000030
 8001c94:	08019fec 	.word	0x08019fec
 8001c98:	08019ff0 	.word	0x08019ff0

08001c9c <webserver_http_encode_sensor_response>:
  * @param  sensor_size     : sensor body size.
  * @retval Web Server status.
  */
WebServer_StatusTypeDef webserver_http_encode_sensor_response(char *sensor_response,
                                                              int sensor_size)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b088      	sub	sp, #32
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	6039      	str	r1, [r7, #0]
  char body_length[20] = {0};
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	60fb      	str	r3, [r7, #12]
 8001caa:	f107 0310 	add.w	r3, r7, #16
 8001cae:	2200      	movs	r2, #0
 8001cb0:	601a      	str	r2, [r3, #0]
 8001cb2:	605a      	str	r2, [r3, #4]
 8001cb4:	609a      	str	r2, [r3, #8]
 8001cb6:	60da      	str	r2, [r3, #12]

  /* Clear response buffer from any previous response */
  memset(sensor_response, 0, strlen(sensor_response));
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f7fe fadd 	bl	8000278 <strlen>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	2100      	movs	r1, #0
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f014 ff09 	bl	8016adc <memset>

  /* Add http accept header */
  strcpy(sensor_response, http_headers[HTTP_HEADER_ACCEPT]);
 8001cca:	4b21      	ldr	r3, [pc, #132]	; (8001d50 <webserver_http_encode_sensor_response+0xb4>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4619      	mov	r1, r3
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f014 ffcf 	bl	8016c74 <strcpy>

  /* Add http content type header */
  strcat(sensor_response, http_headers[HTTP_HEADER_CONTENT_TYPE]);
 8001cd6:	4b1e      	ldr	r3, [pc, #120]	; (8001d50 <webserver_http_encode_sensor_response+0xb4>)
 8001cd8:	68db      	ldr	r3, [r3, #12]
 8001cda:	4619      	mov	r1, r3
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f014 fe9f 	bl	8016a20 <strcat>

  /* Add http content range header */
  strcat(sensor_response, http_headers[HTTP_HEADER_CONTENT_RANGE]);
 8001ce2:	4b1b      	ldr	r3, [pc, #108]	; (8001d50 <webserver_http_encode_sensor_response+0xb4>)
 8001ce4:	691b      	ldr	r3, [r3, #16]
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f014 fe99 	bl	8016a20 <strcat>

  /* Add http content length header */
  strcat(sensor_response, http_headers[HTTP_HEADER_CONTENT_LENGTH]);
 8001cee:	4b18      	ldr	r3, [pc, #96]	; (8001d50 <webserver_http_encode_sensor_response+0xb4>)
 8001cf0:	695b      	ldr	r3, [r3, #20]
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f014 fe93 	bl	8016a20 <strcat>
  sprintf(body_length, "%d", sensor_size);
 8001cfa:	f107 030c 	add.w	r3, r7, #12
 8001cfe:	683a      	ldr	r2, [r7, #0]
 8001d00:	4914      	ldr	r1, [pc, #80]	; (8001d54 <webserver_http_encode_sensor_response+0xb8>)
 8001d02:	4618      	mov	r0, r3
 8001d04:	f013 fdc4 	bl	8015890 <siprintf>
  strcat(sensor_response, body_length);
 8001d08:	f107 030c 	add.w	r3, r7, #12
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f014 fe86 	bl	8016a20 <strcat>
  strcat(sensor_response, "\r\n");
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	f7fe faaf 	bl	8000278 <strlen>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4413      	add	r3, r2
 8001d22:	4a0d      	ldr	r2, [pc, #52]	; (8001d58 <webserver_http_encode_sensor_response+0xbc>)
 8001d24:	8811      	ldrh	r1, [r2, #0]
 8001d26:	7892      	ldrb	r2, [r2, #2]
 8001d28:	8019      	strh	r1, [r3, #0]
 8001d2a:	709a      	strb	r2, [r3, #2]

  /* Add http close connection header */
  strcat(sensor_response, http_headers[HTTP_HEADER_CONNECTION_CLOSE]);
 8001d2c:	4b08      	ldr	r3, [pc, #32]	; (8001d50 <webserver_http_encode_sensor_response+0xb4>)
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	4619      	mov	r1, r3
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f014 fe74 	bl	8016a20 <strcat>

  /* Add http end of headers */
  strcat(sensor_response, http_headers[HTTP_HEADER_HEADERS_END]);
 8001d38:	4b05      	ldr	r3, [pc, #20]	; (8001d50 <webserver_http_encode_sensor_response+0xb4>)
 8001d3a:	699b      	ldr	r3, [r3, #24]
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f014 fe6e 	bl	8016a20 <strcat>

  return WEBSERVER_OK;
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3720      	adds	r7, #32
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	20000000 	.word	0x20000000
 8001d54:	08019fec 	.word	0x08019fec
 8001d58:	08019ff0 	.word	0x08019ff0

08001d5c <webserver_http_encode_woff2_response>:
  * @param  woff2_size     : sensor body size.
  * @retval Web Server status.
  */
WebServer_StatusTypeDef webserver_http_encode_woff2_response(char *woff2_response,
                                                             int woff2_size)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b088      	sub	sp, #32
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	6039      	str	r1, [r7, #0]
  char body_length[20] = {0};
 8001d66:	2300      	movs	r3, #0
 8001d68:	60fb      	str	r3, [r7, #12]
 8001d6a:	f107 0310 	add.w	r3, r7, #16
 8001d6e:	2200      	movs	r2, #0
 8001d70:	601a      	str	r2, [r3, #0]
 8001d72:	605a      	str	r2, [r3, #4]
 8001d74:	609a      	str	r2, [r3, #8]
 8001d76:	60da      	str	r2, [r3, #12]

  /* Clear response buffer from any previous response */
  memset(woff2_response, 0, strlen(woff2_response));
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f7fe fa7d 	bl	8000278 <strlen>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	461a      	mov	r2, r3
 8001d82:	2100      	movs	r1, #0
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f014 fea9 	bl	8016adc <memset>

  /* Add http accept header */
  strcpy(woff2_response, http_headers[HTTP_HEADER_ACCEPT]);
 8001d8a:	4b21      	ldr	r3, [pc, #132]	; (8001e10 <webserver_http_encode_woff2_response+0xb4>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4619      	mov	r1, r3
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f014 ff6f 	bl	8016c74 <strcpy>

  /* Add http content type header */
  strcat(woff2_response, http_headers[HTTP_HEADER_CONTENT_TYPE]);
 8001d96:	4b1e      	ldr	r3, [pc, #120]	; (8001e10 <webserver_http_encode_woff2_response+0xb4>)
 8001d98:	68db      	ldr	r3, [r3, #12]
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f014 fe3f 	bl	8016a20 <strcat>

  /* Add http content range header */
  strcat(woff2_response, http_headers[HTTP_HEADER_CONTENT_RANGE]);
 8001da2:	4b1b      	ldr	r3, [pc, #108]	; (8001e10 <webserver_http_encode_woff2_response+0xb4>)
 8001da4:	691b      	ldr	r3, [r3, #16]
 8001da6:	4619      	mov	r1, r3
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f014 fe39 	bl	8016a20 <strcat>

  /* Add http content length header */
  strcat(woff2_response, http_headers[HTTP_HEADER_CONTENT_LENGTH]);
 8001dae:	4b18      	ldr	r3, [pc, #96]	; (8001e10 <webserver_http_encode_woff2_response+0xb4>)
 8001db0:	695b      	ldr	r3, [r3, #20]
 8001db2:	4619      	mov	r1, r3
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f014 fe33 	bl	8016a20 <strcat>
  sprintf(body_length, "%d", woff2_size);
 8001dba:	f107 030c 	add.w	r3, r7, #12
 8001dbe:	683a      	ldr	r2, [r7, #0]
 8001dc0:	4914      	ldr	r1, [pc, #80]	; (8001e14 <webserver_http_encode_woff2_response+0xb8>)
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f013 fd64 	bl	8015890 <siprintf>
  strcat(woff2_response, body_length);
 8001dc8:	f107 030c 	add.w	r3, r7, #12
 8001dcc:	4619      	mov	r1, r3
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f014 fe26 	bl	8016a20 <strcat>
  strcat(woff2_response, "\r\n");
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f7fe fa4f 	bl	8000278 <strlen>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	461a      	mov	r2, r3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4413      	add	r3, r2
 8001de2:	4a0d      	ldr	r2, [pc, #52]	; (8001e18 <webserver_http_encode_woff2_response+0xbc>)
 8001de4:	8811      	ldrh	r1, [r2, #0]
 8001de6:	7892      	ldrb	r2, [r2, #2]
 8001de8:	8019      	strh	r1, [r3, #0]
 8001dea:	709a      	strb	r2, [r3, #2]

  /* Add http close connection header */
  strcat(woff2_response, http_headers[HTTP_HEADER_CONNECTION_CLOSE]);
 8001dec:	4b08      	ldr	r3, [pc, #32]	; (8001e10 <webserver_http_encode_woff2_response+0xb4>)
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	4619      	mov	r1, r3
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f014 fe14 	bl	8016a20 <strcat>

  /* Add http end of headers */
  strcat(woff2_response, http_headers[HTTP_HEADER_HEADERS_END]);
 8001df8:	4b05      	ldr	r3, [pc, #20]	; (8001e10 <webserver_http_encode_woff2_response+0xb4>)
 8001dfa:	699b      	ldr	r3, [r3, #24]
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f014 fe0e 	bl	8016a20 <strcat>

  return WEBSERVER_OK;
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3720      	adds	r7, #32
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	20000000 	.word	0x20000000
 8001e14:	08019fec 	.word	0x08019fec
 8001e18:	08019ff0 	.word	0x08019ff0

08001e1c <webserver_http_encode_json_response>:
  * @param  json_size     : json body size.
  * @retval Web Server status.
  */
WebServer_StatusTypeDef webserver_http_encode_json_response(char *json_response,
                                                            int json_size)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b088      	sub	sp, #32
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	6039      	str	r1, [r7, #0]
  char body_length[20] = {0};
 8001e26:	2300      	movs	r3, #0
 8001e28:	60fb      	str	r3, [r7, #12]
 8001e2a:	f107 0310 	add.w	r3, r7, #16
 8001e2e:	2200      	movs	r2, #0
 8001e30:	601a      	str	r2, [r3, #0]
 8001e32:	605a      	str	r2, [r3, #4]
 8001e34:	609a      	str	r2, [r3, #8]
 8001e36:	60da      	str	r2, [r3, #12]

  /* Clear response buffer from any previous response */
  memset(json_response, 0, strlen(json_response));
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f7fe fa1d 	bl	8000278 <strlen>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	461a      	mov	r2, r3
 8001e42:	2100      	movs	r1, #0
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f014 fe49 	bl	8016adc <memset>

  /* Add http accept header */
  strcpy(json_response, http_headers[HTTP_HEADER_ACCEPT]);
 8001e4a:	4b24      	ldr	r3, [pc, #144]	; (8001edc <webserver_http_encode_json_response+0xc0>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4619      	mov	r1, r3
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f014 ff0f 	bl	8016c74 <strcpy>

  /* Add http content type header */
  strcat(json_response, http_headers[HTTP_HEADER_CONTENT_TYPE]);
 8001e56:	4b21      	ldr	r3, [pc, #132]	; (8001edc <webserver_http_encode_json_response+0xc0>)
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f014 fddf 	bl	8016a20 <strcat>
  strcat(json_response, http_content_types[HTTP_HEADER_CONTENT_JSON]);
 8001e62:	4b1f      	ldr	r3, [pc, #124]	; (8001ee0 <webserver_http_encode_json_response+0xc4>)
 8001e64:	695b      	ldr	r3, [r3, #20]
 8001e66:	4619      	mov	r1, r3
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f014 fdd9 	bl	8016a20 <strcat>

  /* Add http content range header */
  strcat(json_response, http_headers[HTTP_HEADER_CONTENT_RANGE]);
 8001e6e:	4b1b      	ldr	r3, [pc, #108]	; (8001edc <webserver_http_encode_json_response+0xc0>)
 8001e70:	691b      	ldr	r3, [r3, #16]
 8001e72:	4619      	mov	r1, r3
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f014 fdd3 	bl	8016a20 <strcat>

  /* Add http content length header */
  strcat(json_response, http_headers[HTTP_HEADER_CONTENT_LENGTH]);
 8001e7a:	4b18      	ldr	r3, [pc, #96]	; (8001edc <webserver_http_encode_json_response+0xc0>)
 8001e7c:	695b      	ldr	r3, [r3, #20]
 8001e7e:	4619      	mov	r1, r3
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f014 fdcd 	bl	8016a20 <strcat>
  sprintf(body_length, "%d", json_size);
 8001e86:	f107 030c 	add.w	r3, r7, #12
 8001e8a:	683a      	ldr	r2, [r7, #0]
 8001e8c:	4915      	ldr	r1, [pc, #84]	; (8001ee4 <webserver_http_encode_json_response+0xc8>)
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f013 fcfe 	bl	8015890 <siprintf>
  strcat(json_response, body_length);
 8001e94:	f107 030c 	add.w	r3, r7, #12
 8001e98:	4619      	mov	r1, r3
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f014 fdc0 	bl	8016a20 <strcat>
  strcat(json_response, "\r\n");
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f7fe f9e9 	bl	8000278 <strlen>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4413      	add	r3, r2
 8001eae:	4a0e      	ldr	r2, [pc, #56]	; (8001ee8 <webserver_http_encode_json_response+0xcc>)
 8001eb0:	8811      	ldrh	r1, [r2, #0]
 8001eb2:	7892      	ldrb	r2, [r2, #2]
 8001eb4:	8019      	strh	r1, [r3, #0]
 8001eb6:	709a      	strb	r2, [r3, #2]

  /* Add http close connection header */
  strcat(json_response, http_headers[HTTP_HEADER_CONNECTION_CLOSE]);
 8001eb8:	4b08      	ldr	r3, [pc, #32]	; (8001edc <webserver_http_encode_json_response+0xc0>)
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f014 fdae 	bl	8016a20 <strcat>

  /* Add http end of headers */
  strcat(json_response, http_headers[HTTP_HEADER_HEADERS_END]);
 8001ec4:	4b05      	ldr	r3, [pc, #20]	; (8001edc <webserver_http_encode_json_response+0xc0>)
 8001ec6:	699b      	ldr	r3, [r3, #24]
 8001ec8:	4619      	mov	r1, r3
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f014 fda8 	bl	8016a20 <strcat>

  return WEBSERVER_OK;
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3720      	adds	r7, #32
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	20000000 	.word	0x20000000
 8001ee0:	20000030 	.word	0x20000030
 8001ee4:	08019fec 	.word	0x08019fec
 8001ee8:	08019ff0 	.word	0x08019ff0

08001eec <webserver_http_encode_image_response>:
  * @param  image_size     : image body size.
  * @retval Web Server status.
  */
WebServer_StatusTypeDef webserver_http_encode_image_response(char *image_response,
                                                             int image_size)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b088      	sub	sp, #32
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	6039      	str	r1, [r7, #0]
  char body_length[20] = {0};
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	60fb      	str	r3, [r7, #12]
 8001efa:	f107 0310 	add.w	r3, r7, #16
 8001efe:	2200      	movs	r2, #0
 8001f00:	601a      	str	r2, [r3, #0]
 8001f02:	605a      	str	r2, [r3, #4]
 8001f04:	609a      	str	r2, [r3, #8]
 8001f06:	60da      	str	r2, [r3, #12]

  /* Clear response buffer from any previous response */
  memset(image_response, 0, strlen(image_response));
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f7fe f9b5 	bl	8000278 <strlen>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	461a      	mov	r2, r3
 8001f12:	2100      	movs	r1, #0
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f014 fde1 	bl	8016adc <memset>

  /* Add http accept header */
  strcpy(image_response, http_headers[HTTP_HEADER_ACCEPT]);
 8001f1a:	4b24      	ldr	r3, [pc, #144]	; (8001fac <webserver_http_encode_image_response+0xc0>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4619      	mov	r1, r3
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f014 fea7 	bl	8016c74 <strcpy>

  /* Add http content type header */
  strcat(image_response, http_headers[HTTP_HEADER_CONTENT_TYPE]);
 8001f26:	4b21      	ldr	r3, [pc, #132]	; (8001fac <webserver_http_encode_image_response+0xc0>)
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f014 fd77 	bl	8016a20 <strcat>
  strcat(image_response, http_content_types[HTTP_HEADER_CONTENT_IMAGE]);
 8001f32:	4b1f      	ldr	r3, [pc, #124]	; (8001fb0 <webserver_http_encode_image_response+0xc4>)
 8001f34:	699b      	ldr	r3, [r3, #24]
 8001f36:	4619      	mov	r1, r3
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f014 fd71 	bl	8016a20 <strcat>

  /* Add http content range header */
  strcat(image_response, http_headers[HTTP_HEADER_CONTENT_RANGE]);
 8001f3e:	4b1b      	ldr	r3, [pc, #108]	; (8001fac <webserver_http_encode_image_response+0xc0>)
 8001f40:	691b      	ldr	r3, [r3, #16]
 8001f42:	4619      	mov	r1, r3
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f014 fd6b 	bl	8016a20 <strcat>

  /* Add http content length header */
  strcat(image_response, http_headers[HTTP_HEADER_CONTENT_LENGTH]);
 8001f4a:	4b18      	ldr	r3, [pc, #96]	; (8001fac <webserver_http_encode_image_response+0xc0>)
 8001f4c:	695b      	ldr	r3, [r3, #20]
 8001f4e:	4619      	mov	r1, r3
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f014 fd65 	bl	8016a20 <strcat>
  sprintf(body_length, "%d", image_size);
 8001f56:	f107 030c 	add.w	r3, r7, #12
 8001f5a:	683a      	ldr	r2, [r7, #0]
 8001f5c:	4915      	ldr	r1, [pc, #84]	; (8001fb4 <webserver_http_encode_image_response+0xc8>)
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f013 fc96 	bl	8015890 <siprintf>
  strcat(image_response, body_length);
 8001f64:	f107 030c 	add.w	r3, r7, #12
 8001f68:	4619      	mov	r1, r3
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f014 fd58 	bl	8016a20 <strcat>
  strcat(image_response, "\r\n");
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f7fe f981 	bl	8000278 <strlen>
 8001f76:	4603      	mov	r3, r0
 8001f78:	461a      	mov	r2, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4413      	add	r3, r2
 8001f7e:	4a0e      	ldr	r2, [pc, #56]	; (8001fb8 <webserver_http_encode_image_response+0xcc>)
 8001f80:	8811      	ldrh	r1, [r2, #0]
 8001f82:	7892      	ldrb	r2, [r2, #2]
 8001f84:	8019      	strh	r1, [r3, #0]
 8001f86:	709a      	strb	r2, [r3, #2]

  /* Add http close connection header */
  strcat(image_response, http_headers[HTTP_HEADER_CONNECTION_CLOSE]);
 8001f88:	4b08      	ldr	r3, [pc, #32]	; (8001fac <webserver_http_encode_image_response+0xc0>)
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f014 fd46 	bl	8016a20 <strcat>

  /* Add http end of headers */
  strcat(image_response, http_headers[HTTP_HEADER_HEADERS_END]);
 8001f94:	4b05      	ldr	r3, [pc, #20]	; (8001fac <webserver_http_encode_image_response+0xc0>)
 8001f96:	699b      	ldr	r3, [r3, #24]
 8001f98:	4619      	mov	r1, r3
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f014 fd40 	bl	8016a20 <strcat>

  return WEBSERVER_OK;
 8001fa0:	2300      	movs	r3, #0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3720      	adds	r7, #32
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	20000000 	.word	0x20000000
 8001fb0:	20000030 	.word	0x20000030
 8001fb4:	08019fec 	.word	0x08019fec
 8001fb8:	08019ff0 	.word	0x08019ff0

08001fbc <webserver_http_start>:
  * @brief  Start HTTP web server process
  * @param  None
  * @retval Web Server status
  */
WebServer_StatusTypeDef webserver_http_start(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b090      	sub	sp, #64	; 0x40
 8001fc0:	af02      	add	r7, sp, #8
  /* The IPv4 network socket for this server, to bind with the port to listen to. */
  struct net_sockaddr_in s_addr_in = {0};
 8001fc2:	f107 0320 	add.w	r3, r7, #32
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	601a      	str	r2, [r3, #0]
 8001fca:	605a      	str	r2, [r3, #4]
 8001fcc:	609a      	str	r2, [r3, #8]
 8001fce:	60da      	str	r2, [r3, #12]
  net_ip_addr_t ip_addr_in = {0};
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	61fb      	str	r3, [r7, #28]
  int32_t timeout = MX_WIFI_CMD_TIMEOUT;
 8001fd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001fd8:	61bb      	str	r3, [r7, #24]
  int32_t sock = 0;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	637b      	str	r3, [r7, #52]	; 0x34

  /* Create a TCP socket. */
  printf("\r\n");
 8001fde:	485a      	ldr	r0, [pc, #360]	; (8002148 <webserver_http_start+0x18c>)
 8001fe0:	f014 fd16 	bl	8016a10 <puts>
  printf("*** Create TCP socket\r\n");
 8001fe4:	4859      	ldr	r0, [pc, #356]	; (800214c <webserver_http_start+0x190>)
 8001fe6:	f014 fd13 	bl	8016a10 <puts>
  if ((sock = net_socket(NET_AF_INET, NET_SOCK_STREAM, NET_IPPROTO_TCP)) < 0)
 8001fea:	2206      	movs	r2, #6
 8001fec:	2101      	movs	r1, #1
 8001fee:	2002      	movs	r0, #2
 8001ff0:	f010 fe78 	bl	8012ce4 <net_socket>
 8001ff4:	6378      	str	r0, [r7, #52]	; 0x34
 8001ff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	da05      	bge.n	8002008 <webserver_http_start+0x4c>
  {
    printf("*** Fail : Socket not created !!!!\r\n");
 8001ffc:	4854      	ldr	r0, [pc, #336]	; (8002150 <webserver_http_start+0x194>)
 8001ffe:	f014 fd07 	bl	8016a10 <puts>
    return SOCKET_ERROR;
 8002002:	f06f 0307 	mvn.w	r3, #7
 8002006:	e09b      	b.n	8002140 <webserver_http_start+0x184>
  }
  printf("*** TCP socket created\r\n");
 8002008:	4852      	ldr	r0, [pc, #328]	; (8002154 <webserver_http_start+0x198>)
 800200a:	f014 fd01 	bl	8016a10 <puts>

  printf("*** net_setsockopt ...\r\n");
 800200e:	4852      	ldr	r0, [pc, #328]	; (8002158 <webserver_http_start+0x19c>)
 8002010:	f014 fcfe 	bl	8016a10 <puts>
  net_setsockopt(sock, NET_SOL_SOCKET, NET_SO_BINDTODEVICE, Netif, sizeof(&Netif));
 8002014:	4b51      	ldr	r3, [pc, #324]	; (800215c <webserver_http_start+0x1a0>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2204      	movs	r2, #4
 800201a:	9200      	str	r2, [sp, #0]
 800201c:	2203      	movs	r2, #3
 800201e:	f640 71ff 	movw	r1, #4095	; 0xfff
 8002022:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002024:	f011 f9ac 	bl	8013380 <net_setsockopt>
  net_setsockopt(sock, NET_SOL_SOCKET, NET_SO_RCVTIMEO, &timeout, sizeof(timeout));
 8002028:	f107 0318 	add.w	r3, r7, #24
 800202c:	2204      	movs	r2, #4
 800202e:	9200      	str	r2, [sp, #0]
 8002030:	f241 0206 	movw	r2, #4102	; 0x1006
 8002034:	f640 71ff 	movw	r1, #4095	; 0xfff
 8002038:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800203a:	f011 f9a1 	bl	8013380 <net_setsockopt>

  /* Bind socket */
  printf("*** Set port and bind socket\r\n");
 800203e:	4848      	ldr	r0, [pc, #288]	; (8002160 <webserver_http_start+0x1a4>)
 8002040:	f014 fce6 	bl	8016a10 <puts>
  s_addr_in.sin_family = NET_AF_INET;
 8002044:	2302      	movs	r3, #2
 8002046:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  s_addr_in.sin_len    = sizeof(s_addr_in);
 800204a:	2310      	movs	r3, #16
 800204c:	f887 3020 	strb.w	r3, [r7, #32]

  net_if_get_ip_address(Netif, &ip_addr_in);
 8002050:	4b42      	ldr	r3, [pc, #264]	; (800215c <webserver_http_start+0x1a0>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f107 021c 	add.w	r2, r7, #28
 8002058:	4611      	mov	r1, r2
 800205a:	4618      	mov	r0, r3
 800205c:	f010 fc2a 	bl	80128b4 <net_if_get_ip_address>
  s_addr_in.sin_addr.s_addr = ip_addr_in.addr;
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	627b      	str	r3, [r7, #36]	; 0x24

  net_set_port((struct net_sockaddr *)&s_addr_in, HTTP_SERVER_PORT);
 8002064:	f107 0320 	add.w	r3, r7, #32
 8002068:	2150      	movs	r1, #80	; 0x50
 800206a:	4618      	mov	r0, r3
 800206c:	f010 f87a 	bl	8012164 <net_set_port>
  if (net_bind(sock, (struct net_sockaddr *)&s_addr_in, sizeof(s_addr_in)) != 0U)
 8002070:	f107 0320 	add.w	r3, r7, #32
 8002074:	2210      	movs	r2, #16
 8002076:	4619      	mov	r1, r3
 8002078:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800207a:	f010 fe73 	bl	8012d64 <net_bind>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d005      	beq.n	8002090 <webserver_http_start+0xd4>
  {
    printf("*** Fail : Socket not binded !!!!\r\n");
 8002084:	4837      	ldr	r0, [pc, #220]	; (8002164 <webserver_http_start+0x1a8>)
 8002086:	f014 fcc3 	bl	8016a10 <puts>
    return SOCKET_ERROR;
 800208a:	f06f 0307 	mvn.w	r3, #7
 800208e:	e057      	b.n	8002140 <webserver_http_start+0x184>
  }
  printf("*** Port and socket binded\r\n");
 8002090:	4835      	ldr	r0, [pc, #212]	; (8002168 <webserver_http_start+0x1ac>)
 8002092:	f014 fcbd 	bl	8016a10 <puts>

  /* listen for incoming connections */
  printf("*** Listen for incoming connections\r\n");
 8002096:	4835      	ldr	r0, [pc, #212]	; (800216c <webserver_http_start+0x1b0>)
 8002098:	f014 fcba 	bl	8016a10 <puts>
  if (net_listen(sock, 5) != 0U)
 800209c:	2105      	movs	r1, #5
 800209e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80020a0:	f010 ff70 	bl	8012f84 <net_listen>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d005      	beq.n	80020b6 <webserver_http_start+0xfa>
  {
    printf("*** Fail : Listening not started !!!!\r\n");
 80020aa:	4831      	ldr	r0, [pc, #196]	; (8002170 <webserver_http_start+0x1b4>)
 80020ac:	f014 fcb0 	bl	8016a10 <puts>
    return SOCKET_ERROR;
 80020b0:	f06f 0307 	mvn.w	r3, #7
 80020b4:	e044      	b.n	8002140 <webserver_http_start+0x184>
  }
  printf("*** Listening started \r\n");
 80020b6:	482f      	ldr	r0, [pc, #188]	; (8002174 <webserver_http_start+0x1b8>)
 80020b8:	f014 fcaa 	bl	8016a10 <puts>

  printf("--> Please connect to %s:%" PRIu32 "\n",
 80020bc:	f107 031c 	add.w	r3, r7, #28
 80020c0:	4618      	mov	r0, r3
 80020c2:	f010 f839 	bl	8012138 <net_ntoa>
 80020c6:	4601      	mov	r1, r0
         net_ntoa(&ip_addr_in), (uint32_t)NET_NTOHS(s_addr_in.sin_port));
 80020c8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80020ca:	ba5b      	rev16	r3, r3
 80020cc:	b29b      	uxth	r3, r3
  printf("--> Please connect to %s:%" PRIu32 "\n",
 80020ce:	461a      	mov	r2, r3
 80020d0:	4829      	ldr	r0, [pc, #164]	; (8002178 <webserver_http_start+0x1bc>)
 80020d2:	f014 fc2f 	bl	8016934 <iprintf>

  /* Infinite loop to serve socket communication */
  while (1)
  {
    struct net_sockaddr_in s_addr_in_remote_host = {0};
 80020d6:	f107 0308 	add.w	r3, r7, #8
 80020da:	2200      	movs	r2, #0
 80020dc:	601a      	str	r2, [r3, #0]
 80020de:	605a      	str	r2, [r3, #4]
 80020e0:	609a      	str	r2, [r3, #8]
 80020e2:	60da      	str	r2, [r3, #12]
    uint32_t s_addr_in_remote_host_len = sizeof(s_addr_in_remote_host);
 80020e4:	2310      	movs	r3, #16
 80020e6:	607b      	str	r3, [r7, #4]

    /* Accept net socket requests */
    const int32_t newconn = net_accept(sock, (struct net_sockaddr *)&s_addr_in_remote_host, (uint32_t *)&s_addr_in_remote_host_len);
 80020e8:	1d3a      	adds	r2, r7, #4
 80020ea:	f107 0308 	add.w	r3, r7, #8
 80020ee:	4619      	mov	r1, r3
 80020f0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80020f2:	f010 feaf 	bl	8012e54 <net_accept>
 80020f6:	6338      	str	r0, [r7, #48]	; 0x30

    /* Check if a valid new connection is requested */
    if (newconn > 0)
 80020f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	dd1b      	ble.n	8002136 <webserver_http_start+0x17a>
    {
      net_ip_addr_t ip_addr_in_remote_host = {0};
 80020fe:	2300      	movs	r3, #0
 8002100:	603b      	str	r3, [r7, #0]
      ip_addr_in_remote_host.addr = s_addr_in_remote_host.sin_addr.s_addr;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	603b      	str	r3, [r7, #0]

      printf("Request from %s:%" PRIu32 "\n",
 8002106:	463b      	mov	r3, r7
 8002108:	4618      	mov	r0, r3
 800210a:	f010 f815 	bl	8012138 <net_ntoa>
 800210e:	4601      	mov	r1, r0
             net_ntoa(&ip_addr_in_remote_host), (uint32_t)NET_NTOHS(s_addr_in_remote_host.sin_port));
 8002110:	897b      	ldrh	r3, [r7, #10]
 8002112:	ba5b      	rev16	r3, r3
 8002114:	b29b      	uxth	r3, r3
      printf("Request from %s:%" PRIu32 "\n",
 8002116:	461a      	mov	r2, r3
 8002118:	4818      	ldr	r0, [pc, #96]	; (800217c <webserver_http_start+0x1c0>)
 800211a:	f014 fc0b 	bl	8016934 <iprintf>

      /* Treat net socket requests */
      if (http_treat_request(newconn) != WEBSERVER_OK)
 800211e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002120:	f000 f832 	bl	8002188 <http_treat_request>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d0d5      	beq.n	80020d6 <webserver_http_start+0x11a>
      {
        printf("*** Fail : Invalid HTTP request !!!!\r\n");
 800212a:	4815      	ldr	r0, [pc, #84]	; (8002180 <webserver_http_start+0x1c4>)
 800212c:	f014 fc70 	bl	8016a10 <puts>
        return SOCKET_ERROR;
 8002130:	f06f 0307 	mvn.w	r3, #7
 8002134:	e004      	b.n	8002140 <webserver_http_start+0x184>
      }
    }
    else
    {
      printf("*** Fail : Invalid socket connection !!!! \r\n");
 8002136:	4813      	ldr	r0, [pc, #76]	; (8002184 <webserver_http_start+0x1c8>)
 8002138:	f014 fc6a 	bl	8016a10 <puts>
      return SOCKET_ERROR;
 800213c:	f06f 0307 	mvn.w	r3, #7
    }
  }
}
 8002140:	4618      	mov	r0, r3
 8002142:	3738      	adds	r7, #56	; 0x38
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	08019ff4 	.word	0x08019ff4
 800214c:	08019ff8 	.word	0x08019ff8
 8002150:	0801a010 	.word	0x0801a010
 8002154:	0801a034 	.word	0x0801a034
 8002158:	0801a04c 	.word	0x0801a04c
 800215c:	20000c10 	.word	0x20000c10
 8002160:	0801a064 	.word	0x0801a064
 8002164:	0801a084 	.word	0x0801a084
 8002168:	0801a0a8 	.word	0x0801a0a8
 800216c:	0801a0c4 	.word	0x0801a0c4
 8002170:	0801a0ec 	.word	0x0801a0ec
 8002174:	0801a114 	.word	0x0801a114
 8002178:	0801a12c 	.word	0x0801a12c
 800217c:	0801a14c 	.word	0x0801a14c
 8002180:	0801a164 	.word	0x0801a164
 8002184:	0801a18c 	.word	0x0801a18c

08002188 <http_treat_request>:
  * @brief  Treat webserver HTTP request
  * @param  socket : connection socket
  * @retval Web Server status
  */
static WebServer_StatusTypeDef http_treat_request(int32_t socket)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b086      	sub	sp, #24
 800218c:	af02      	add	r7, sp, #8
 800218e:	6078      	str	r0, [r7, #4]
  static unsigned char recv_buffer[HTTP_RECEIVE_BUFFER_SIZE];

  /* Clear receive buffer */
  memset((void*)recv_buffer, 0, sizeof(recv_buffer));
 8002190:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002194:	2100      	movs	r1, #0
 8002196:	4834      	ldr	r0, [pc, #208]	; (8002268 <http_treat_request+0xe0>)
 8002198:	f014 fca0 	bl	8016adc <memset>

  /* Read the http request */
  if (net_recv(socket, recv_buffer, HTTP_RECEIVE_BUFFER_SIZE, 0) < 0)
 800219c:	2300      	movs	r3, #0
 800219e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80021a2:	4931      	ldr	r1, [pc, #196]	; (8002268 <http_treat_request+0xe0>)
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f010 ffdb 	bl	8013160 <net_recv>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	da02      	bge.n	80021b6 <http_treat_request+0x2e>
  {
    return HTTP_ERROR;
 80021b0:	f06f 0306 	mvn.w	r3, #6
 80021b4:	e054      	b.n	8002260 <http_treat_request+0xd8>
  }

  /* Treat get cmd */
  if (strncmp((char *)recv_buffer, http_get_cmd, http_get_cmd_size) == 0U)
 80021b6:	4b2d      	ldr	r3, [pc, #180]	; (800226c <http_treat_request+0xe4>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	461a      	mov	r2, r3
 80021bc:	492c      	ldr	r1, [pc, #176]	; (8002270 <http_treat_request+0xe8>)
 80021be:	482a      	ldr	r0, [pc, #168]	; (8002268 <http_treat_request+0xe0>)
 80021c0:	f014 fc3d 	bl	8016a3e <strncmp>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d13d      	bne.n	8002246 <http_treat_request+0xbe>
  {
    /* Send html */
    if (strncmp((char *)&recv_buffer[http_get_cmd_size], http_html_cmd, http_html_cmd_size) == 0U)
 80021ca:	4b28      	ldr	r3, [pc, #160]	; (800226c <http_treat_request+0xe4>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a26      	ldr	r2, [pc, #152]	; (8002268 <http_treat_request+0xe0>)
 80021d0:	4413      	add	r3, r2
 80021d2:	4a28      	ldr	r2, [pc, #160]	; (8002274 <http_treat_request+0xec>)
 80021d4:	6812      	ldr	r2, [r2, #0]
 80021d6:	4928      	ldr	r1, [pc, #160]	; (8002278 <http_treat_request+0xf0>)
 80021d8:	4618      	mov	r0, r3
 80021da:	f014 fc30 	bl	8016a3e <strncmp>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d109      	bne.n	80021f8 <http_treat_request+0x70>
    {
      http_send_response(socket, HTTP_HEADER_HTML_ID, http_header_response, html_buff, html_buff_size);
 80021e4:	4b25      	ldr	r3, [pc, #148]	; (800227c <http_treat_request+0xf4>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	9300      	str	r3, [sp, #0]
 80021ea:	4b25      	ldr	r3, [pc, #148]	; (8002280 <http_treat_request+0xf8>)
 80021ec:	4a25      	ldr	r2, [pc, #148]	; (8002284 <http_treat_request+0xfc>)
 80021ee:	2100      	movs	r1, #0
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f000 f851 	bl	8002298 <http_send_response>
 80021f6:	e029      	b.n	800224c <http_treat_request+0xc4>
    }
    else if (strncmp((char *)&recv_buffer[http_get_cmd_size], http_read_acel_cmd, http_read_acel_cmd_size) == 0U)
 80021f8:	4b1c      	ldr	r3, [pc, #112]	; (800226c <http_treat_request+0xe4>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a1a      	ldr	r2, [pc, #104]	; (8002268 <http_treat_request+0xe0>)
 80021fe:	4413      	add	r3, r2
 8002200:	4a21      	ldr	r2, [pc, #132]	; (8002288 <http_treat_request+0x100>)
 8002202:	6812      	ldr	r2, [r2, #0]
 8002204:	4921      	ldr	r1, [pc, #132]	; (800228c <http_treat_request+0x104>)
 8002206:	4618      	mov	r0, r3
 8002208:	f014 fc19 	bl	8016a3e <strncmp>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d11c      	bne.n	800224c <http_treat_request+0xc4>
    	    {
    		  int x, y;
    	      webserver_acel_read(&x, &y);
 8002212:	f107 0208 	add.w	r2, r7, #8
 8002216:	f107 030c 	add.w	r3, r7, #12
 800221a:	4611      	mov	r1, r2
 800221c:	4618      	mov	r0, r3
 800221e:	f000 fa15 	bl	800264c <webserver_acel_read>
    	      sprintf(http_sensor_value, "%i %i", x, y);
 8002222:	68fa      	ldr	r2, [r7, #12]
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	491a      	ldr	r1, [pc, #104]	; (8002290 <http_treat_request+0x108>)
 8002228:	481a      	ldr	r0, [pc, #104]	; (8002294 <http_treat_request+0x10c>)
 800222a:	f013 fb31 	bl	8015890 <siprintf>
    	      http_send_response(socket, HTTP_HEADER_SENSOR_ID, http_header_response, http_sensor_value, strlen(http_sensor_value));
 800222e:	4819      	ldr	r0, [pc, #100]	; (8002294 <http_treat_request+0x10c>)
 8002230:	f7fe f822 	bl	8000278 <strlen>
 8002234:	4603      	mov	r3, r0
 8002236:	9300      	str	r3, [sp, #0]
 8002238:	4b16      	ldr	r3, [pc, #88]	; (8002294 <http_treat_request+0x10c>)
 800223a:	4a12      	ldr	r2, [pc, #72]	; (8002284 <http_treat_request+0xfc>)
 800223c:	2104      	movs	r1, #4
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f000 f82a 	bl	8002298 <http_send_response>
 8002244:	e002      	b.n	800224c <http_treat_request+0xc4>
  }
  }
  else
  {
    return HTTP_ERROR;
 8002246:	f06f 0306 	mvn.w	r3, #6
 800224a:	e009      	b.n	8002260 <http_treat_request+0xd8>
  }

  /* Close connection socket */
  if (net_closesocket(socket) != 0)
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f011 f813 	bl	8013278 <net_closesocket>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d002      	beq.n	800225e <http_treat_request+0xd6>
  {
    return HTTP_ERROR;
 8002258:	f06f 0306 	mvn.w	r3, #6
 800225c:	e000      	b.n	8002260 <http_treat_request+0xd8>
  }

  return WEBSERVER_OK;
 800225e:	2300      	movs	r3, #0
}
 8002260:	4618      	mov	r0, r3
 8002262:	3710      	adds	r7, #16
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	20000634 	.word	0x20000634
 800226c:	0801b540 	.word	0x0801b540
 8002270:	0801b538 	.word	0x0801b538
 8002274:	0801b548 	.word	0x0801b548
 8002278:	0801b544 	.word	0x0801b544
 800227c:	0801cc2c 	.word	0x0801cc2c
 8002280:	0801b564 	.word	0x0801b564
 8002284:	20000440 	.word	0x20000440
 8002288:	0801b560 	.word	0x0801b560
 800228c:	0801b54c 	.word	0x0801b54c
 8002290:	0801a1b8 	.word	0x0801a1b8
 8002294:	2000040c 	.word	0x2000040c

08002298 <http_send_response>:
static WebServer_StatusTypeDef http_send_response(int32_t socket,
                                                  uint32_t headers_id,
                                                  char *headers_buff,
                                                  const char *body_buff,
                                                  uint32_t data_size)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	60f8      	str	r0, [r7, #12]
 80022a0:	60b9      	str	r1, [r7, #8]
 80022a2:	607a      	str	r2, [r7, #4]
 80022a4:	603b      	str	r3, [r7, #0]
  /* Send HTTP header response */
  if (http_send_headers_response(socket, headers_id, headers_buff, data_size) != WEBSERVER_OK)
 80022a6:	69bb      	ldr	r3, [r7, #24]
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	68b9      	ldr	r1, [r7, #8]
 80022ac:	68f8      	ldr	r0, [r7, #12]
 80022ae:	f000 f817 	bl	80022e0 <http_send_headers_response>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d002      	beq.n	80022be <http_send_response+0x26>
  {
    return HTTP_ERROR;
 80022b8:	f06f 0306 	mvn.w	r3, #6
 80022bc:	e00b      	b.n	80022d6 <http_send_response+0x3e>
  }

  /* Send HTTP body response */
  if (http_send(socket, (const char *)body_buff, data_size) != WEBSERVER_OK)
 80022be:	69ba      	ldr	r2, [r7, #24]
 80022c0:	6839      	ldr	r1, [r7, #0]
 80022c2:	68f8      	ldr	r0, [r7, #12]
 80022c4:	f000 f8ae 	bl	8002424 <http_send>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d002      	beq.n	80022d4 <http_send_response+0x3c>
  {
    return HTTP_ERROR;
 80022ce:	f06f 0306 	mvn.w	r3, #6
 80022d2:	e000      	b.n	80022d6 <http_send_response+0x3e>
  }

  return WEBSERVER_OK;
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3710      	adds	r7, #16
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
	...

080022e0 <http_send_headers_response>:
  */
static WebServer_StatusTypeDef http_send_headers_response(int32_t socket,
                                                          uint32_t headers_id,
                                                          char *headers_buff,
                                                          uint32_t data_size)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b084      	sub	sp, #16
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	60f8      	str	r0, [r7, #12]
 80022e8:	60b9      	str	r1, [r7, #8]
 80022ea:	607a      	str	r2, [r7, #4]
 80022ec:	603b      	str	r3, [r7, #0]
  /* Check header ID */
  switch(headers_id)
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	2b0a      	cmp	r3, #10
 80022f2:	d871      	bhi.n	80023d8 <http_send_headers_response+0xf8>
 80022f4:	a201      	add	r2, pc, #4	; (adr r2, 80022fc <http_send_headers_response+0x1c>)
 80022f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022fa:	bf00      	nop
 80022fc:	08002329 	.word	0x08002329
 8002300:	08002355 	.word	0x08002355
 8002304:	0800233f 	.word	0x0800233f
 8002308:	0800236b 	.word	0x0800236b
 800230c:	08002397 	.word	0x08002397
 8002310:	080023d9 	.word	0x080023d9
 8002314:	080023d9 	.word	0x080023d9
 8002318:	080023d9 	.word	0x080023d9
 800231c:	08002381 	.word	0x08002381
 8002320:	080023ad 	.word	0x080023ad
 8002324:	080023c3 	.word	0x080023c3
  {
    /* Send HTML header response */
  case HTTP_HEADER_HTML_ID:
    {
      if (webserver_http_encode_html_response(headers_buff, data_size) != WEBSERVER_OK)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	4619      	mov	r1, r3
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f7ff fae5 	bl	80018fc <webserver_http_encode_html_response>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d052      	beq.n	80023de <http_send_headers_response+0xfe>
      {
        return HTTP_ERROR;
 8002338:	f06f 0306 	mvn.w	r3, #6
 800233c:	e06e      	b.n	800241c <http_send_headers_response+0x13c>
    }

    /* Send CSS header response */
  case HTTP_HEADER_CSS_ID:
    {
      if (webserver_http_encode_css_response(headers_buff, data_size) != WEBSERVER_OK)
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	4619      	mov	r1, r3
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f7ff fb5a 	bl	80019fc <webserver_http_encode_css_response>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d049      	beq.n	80023e2 <http_send_headers_response+0x102>
      {
        return HTTP_ERROR;
 800234e:	f06f 0306 	mvn.w	r3, #6
 8002352:	e063      	b.n	800241c <http_send_headers_response+0x13c>
    }

    /* Send JS header response */
  case HTTP_HEADER_JS_ID:
    {
      if (webserver_http_encode_js_response(headers_buff, data_size) != WEBSERVER_OK)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	4619      	mov	r1, r3
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f7ff fbbd 	bl	8001ad8 <webserver_http_encode_js_response>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d040      	beq.n	80023e6 <http_send_headers_response+0x106>
      {
        return HTTP_ERROR;
 8002364:	f06f 0306 	mvn.w	r3, #6
 8002368:	e058      	b.n	800241c <http_send_headers_response+0x13c>
    }

    /* Send favicon header response */
  case HTTP_HEADER_FAVICON_ID:
    {
      if (webserver_http_encode_favicon_response(headers_buff, data_size) != WEBSERVER_OK)
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	4619      	mov	r1, r3
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f7ff fc20 	bl	8001bb4 <webserver_http_encode_favicon_response>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d037      	beq.n	80023ea <http_send_headers_response+0x10a>
      {
        return HTTP_ERROR;
 800237a:	f06f 0306 	mvn.w	r3, #6
 800237e:	e04d      	b.n	800241c <http_send_headers_response+0x13c>
    }

    /* Send font header response */
  case HTTP_HEADER_FONT_ID:
    {
      if (webserver_http_encode_woff2_response(headers_buff, data_size) != WEBSERVER_OK)
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	4619      	mov	r1, r3
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	f7ff fce9 	bl	8001d5c <webserver_http_encode_woff2_response>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d02e      	beq.n	80023ee <http_send_headers_response+0x10e>
      {
        return HTTP_ERROR;
 8002390:	f06f 0306 	mvn.w	r3, #6
 8002394:	e042      	b.n	800241c <http_send_headers_response+0x13c>
    }

    /* Send sensor header response */
  case HTTP_HEADER_SENSOR_ID:
    {
      if (webserver_http_encode_sensor_response(headers_buff, data_size) != WEBSERVER_OK)
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	4619      	mov	r1, r3
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f7ff fc7e 	bl	8001c9c <webserver_http_encode_sensor_response>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d025      	beq.n	80023f2 <http_send_headers_response+0x112>
      {
        return HTTP_ERROR;
 80023a6:	f06f 0306 	mvn.w	r3, #6
 80023aa:	e037      	b.n	800241c <http_send_headers_response+0x13c>
    }

    /* Send JSON header response */
  case HTTP_HEADER_JSON_ID:
    {
      if (webserver_http_encode_json_response(headers_buff, data_size) != WEBSERVER_OK)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	4619      	mov	r1, r3
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f7ff fd33 	bl	8001e1c <webserver_http_encode_json_response>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d01c      	beq.n	80023f6 <http_send_headers_response+0x116>
      {
        return HTTP_ERROR;
 80023bc:	f06f 0306 	mvn.w	r3, #6
 80023c0:	e02c      	b.n	800241c <http_send_headers_response+0x13c>
    }

    /* Send image header response */
  case HTTP_HEADER_IMAGE_ID:
    {
      if (webserver_http_encode_image_response(headers_buff, data_size) != WEBSERVER_OK)
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	4619      	mov	r1, r3
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f7ff fd90 	bl	8001eec <webserver_http_encode_image_response>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d013      	beq.n	80023fa <http_send_headers_response+0x11a>
      {
        return HTTP_ERROR;
 80023d2:	f06f 0306 	mvn.w	r3, #6
 80023d6:	e021      	b.n	800241c <http_send_headers_response+0x13c>
      break;
    }

    /* Invalid header ID */
  default:
    return HTTP_ERROR;
 80023d8:	f06f 0306 	mvn.w	r3, #6
 80023dc:	e01e      	b.n	800241c <http_send_headers_response+0x13c>
      break;
 80023de:	bf00      	nop
 80023e0:	e00c      	b.n	80023fc <http_send_headers_response+0x11c>
      break;
 80023e2:	bf00      	nop
 80023e4:	e00a      	b.n	80023fc <http_send_headers_response+0x11c>
      break;
 80023e6:	bf00      	nop
 80023e8:	e008      	b.n	80023fc <http_send_headers_response+0x11c>
      break;
 80023ea:	bf00      	nop
 80023ec:	e006      	b.n	80023fc <http_send_headers_response+0x11c>
      break;
 80023ee:	bf00      	nop
 80023f0:	e004      	b.n	80023fc <http_send_headers_response+0x11c>
      break;
 80023f2:	bf00      	nop
 80023f4:	e002      	b.n	80023fc <http_send_headers_response+0x11c>
      break;
 80023f6:	bf00      	nop
 80023f8:	e000      	b.n	80023fc <http_send_headers_response+0x11c>
      break;
 80023fa:	bf00      	nop
    break;
  }

  /* Send HTTP built response */
  if (http_send(socket, (const char *)headers_buff, strlen((char*)headers_buff)) != WEBSERVER_OK)
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f7fd ff3b 	bl	8000278 <strlen>
 8002402:	4603      	mov	r3, r0
 8002404:	461a      	mov	r2, r3
 8002406:	6879      	ldr	r1, [r7, #4]
 8002408:	68f8      	ldr	r0, [r7, #12]
 800240a:	f000 f80b 	bl	8002424 <http_send>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d002      	beq.n	800241a <http_send_headers_response+0x13a>
  {
    return HTTP_ERROR;
 8002414:	f06f 0306 	mvn.w	r3, #6
 8002418:	e000      	b.n	800241c <http_send_headers_response+0x13c>
  }

  return WEBSERVER_OK;
 800241a:	2300      	movs	r3, #0
}
 800241c:	4618      	mov	r0, r3
 800241e:	3710      	adds	r7, #16
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}

08002424 <http_send>:
  * @retval Web Server status
  */
static WebServer_StatusTypeDef http_send(int32_t socket,
                                         const char *frame,
                                         uint32_t frame_size)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b086      	sub	sp, #24
 8002428:	af00      	add	r7, sp, #0
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	60b9      	str	r1, [r7, #8]
 800242e:	607a      	str	r2, [r7, #4]
  /* Setup send information */
  uint32_t data_size = frame_size;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	617b      	str	r3, [r7, #20]
  uint32_t data_idx  = 0U;
 8002434:	2300      	movs	r3, #0
 8002436:	613b      	str	r3, [r7, #16]

  /* Check remaining data */
  while (data_size > 0U)
 8002438:	e02b      	b.n	8002492 <http_send+0x6e>
  {
    if (data_size >= MAX_SOCKET_DATASIZE)
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 8002440:	d317      	bcc.n	8002472 <http_send+0x4e>
    {
      /* Send data */
      if (net_send(socket, (uint8_t*)&frame[data_idx], MAX_SOCKET_DATASIZE, 0) <= 0U)
 8002442:	68ba      	ldr	r2, [r7, #8]
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	18d1      	adds	r1, r2, r3
 8002448:	2300      	movs	r3, #0
 800244a:	f44f 6216 	mov.w	r2, #2400	; 0x960
 800244e:	68f8      	ldr	r0, [r7, #12]
 8002450:	f010 fe08 	bl	8013064 <net_send>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d102      	bne.n	8002460 <http_send+0x3c>
      {
        return HTTP_ERROR;
 800245a:	f06f 0306 	mvn.w	r3, #6
 800245e:	e01c      	b.n	800249a <http_send+0x76>
      }

      /* Update send information */
      data_size -= MAX_SOCKET_DATASIZE;
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	f5a3 6316 	sub.w	r3, r3, #2400	; 0x960
 8002466:	617b      	str	r3, [r7, #20]
      data_idx += MAX_SOCKET_DATASIZE;
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	f503 6316 	add.w	r3, r3, #2400	; 0x960
 800246e:	613b      	str	r3, [r7, #16]
 8002470:	e00f      	b.n	8002492 <http_send+0x6e>
    }
    else
    {
      /* Send data */
      if (net_send(socket, (uint8_t*)&frame[data_idx], data_size, 0) <= 0U)
 8002472:	68ba      	ldr	r2, [r7, #8]
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	18d1      	adds	r1, r2, r3
 8002478:	2300      	movs	r3, #0
 800247a:	697a      	ldr	r2, [r7, #20]
 800247c:	68f8      	ldr	r0, [r7, #12]
 800247e:	f010 fdf1 	bl	8013064 <net_send>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d102      	bne.n	800248e <http_send+0x6a>
      {
        return HTTP_ERROR;
 8002488:	f06f 0306 	mvn.w	r3, #6
 800248c:	e005      	b.n	800249a <http_send+0x76>
      }

      /* Update send information */
      data_size = 0U;
 800248e:	2300      	movs	r3, #0
 8002490:	617b      	str	r3, [r7, #20]
  while (data_size > 0U)
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d1d0      	bne.n	800243a <http_send+0x16>
    }
  }

  return WEBSERVER_OK;
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	3718      	adds	r7, #24
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
	...

080024a4 <webserver_acel_sensor_start>:

/* Private function prototypes ---------------------------------------------------------------------------------------*/
/* Functions prototypes ----------------------------------------------------------------------------------------------*/

int webserver_acel_sensor_start()
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b08c      	sub	sp, #48	; 0x30
 80024a8:	af00      	add	r7, sp, #0
  int32_t result = 0;
 80024aa:	2300      	movs	r3, #0
 80024ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  int32_t fullScale;

  /* Initialize function for Microaccelerometer */

  /* Initialize function */
  if (BSP_MOTION_SENSOR_Init(0, MOTION_ACCELERO) != BSP_ERROR_NONE)
 80024ae:	2102      	movs	r1, #2
 80024b0:	2000      	movs	r0, #0
 80024b2:	f001 fb4d 	bl	8003b50 <BSP_MOTION_SENSOR_Init>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d002      	beq.n	80024c2 <webserver_acel_sensor_start+0x1e>
    result--;
 80024bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024be:	3b01      	subs	r3, #1
 80024c0:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (BSP_MOTION_SENSOR_GetCapabilities(0, &Capabilities) != BSP_ERROR_NONE)
 80024c2:	f107 0310 	add.w	r3, r7, #16
 80024c6:	4619      	mov	r1, r3
 80024c8:	2000      	movs	r0, #0
 80024ca:	f001 fb8d 	bl	8003be8 <BSP_MOTION_SENSOR_GetCapabilities>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d002      	beq.n	80024da <webserver_acel_sensor_start+0x36>
    result--;
 80024d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024d6:	3b01      	subs	r3, #1
 80024d8:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Read id function */
  if (BSP_MOTION_SENSOR_ReadID(0, &chipId) != BSP_ERROR_NONE)
 80024da:	f107 030f 	add.w	r3, r7, #15
 80024de:	4619      	mov	r1, r3
 80024e0:	2000      	movs	r0, #0
 80024e2:	f001 fbb9 	bl	8003c58 <BSP_MOTION_SENSOR_ReadID>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d002      	beq.n	80024f2 <webserver_acel_sensor_start+0x4e>
    result--;
 80024ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ee:	3b01      	subs	r3, #1
 80024f0:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Enable function */
  if (BSP_MOTION_SENSOR_Enable(0, MOTION_ACCELERO) != BSP_ERROR_NONE)
 80024f2:	2102      	movs	r1, #2
 80024f4:	2000      	movs	r0, #0
 80024f6:	f001 fbe7 	bl	8003cc8 <BSP_MOTION_SENSOR_Enable>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d002      	beq.n	8002506 <webserver_acel_sensor_start+0x62>
    result--;
 8002500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002502:	3b01      	subs	r3, #1
 8002504:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* GetFullScale and SetFullScale functions */
  if (BSP_MOTION_SENSOR_SetFullScale(0, MOTION_ACCELERO, 16) != BSP_ERROR_NONE)
 8002506:	2210      	movs	r2, #16
 8002508:	2102      	movs	r1, #2
 800250a:	2000      	movs	r0, #0
 800250c:	f001 fe18 	bl	8004140 <BSP_MOTION_SENSOR_SetFullScale>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d002      	beq.n	800251c <webserver_acel_sensor_start+0x78>
    result--;
 8002516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002518:	3b01      	subs	r3, #1
 800251a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (BSP_MOTION_SENSOR_GetFullScale(0, MOTION_ACCELERO, &fullScale) != BSP_ERROR_NONE)
 800251c:	463b      	mov	r3, r7
 800251e:	461a      	mov	r2, r3
 8002520:	2102      	movs	r1, #2
 8002522:	2000      	movs	r0, #0
 8002524:	f001 fdac 	bl	8004080 <BSP_MOTION_SENSOR_GetFullScale>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d002      	beq.n	8002534 <webserver_acel_sensor_start+0x90>
    result--;
 800252e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002530:	3b01      	subs	r3, #1
 8002532:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (fullScale != 16)
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	2b10      	cmp	r3, #16
 8002538:	d002      	beq.n	8002540 <webserver_acel_sensor_start+0x9c>
    result--;
 800253a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800253c:	3b01      	subs	r3, #1
 800253e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (BSP_MOTION_SENSOR_SetFullScale(0, MOTION_ACCELERO, 2) != BSP_ERROR_NONE)
 8002540:	2202      	movs	r2, #2
 8002542:	2102      	movs	r1, #2
 8002544:	2000      	movs	r0, #0
 8002546:	f001 fdfb 	bl	8004140 <BSP_MOTION_SENSOR_SetFullScale>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d002      	beq.n	8002556 <webserver_acel_sensor_start+0xb2>
    result--;
 8002550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002552:	3b01      	subs	r3, #1
 8002554:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (BSP_MOTION_SENSOR_GetFullScale(0, MOTION_ACCELERO, &fullScale) != BSP_ERROR_NONE)
 8002556:	463b      	mov	r3, r7
 8002558:	461a      	mov	r2, r3
 800255a:	2102      	movs	r1, #2
 800255c:	2000      	movs	r0, #0
 800255e:	f001 fd8f 	bl	8004080 <BSP_MOTION_SENSOR_GetFullScale>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d002      	beq.n	800256e <webserver_acel_sensor_start+0xca>
    result--;
 8002568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800256a:	3b01      	subs	r3, #1
 800256c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (fullScale != 2)
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	2b02      	cmp	r3, #2
 8002572:	d002      	beq.n	800257a <webserver_acel_sensor_start+0xd6>
    result--;
 8002574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002576:	3b01      	subs	r3, #1
 8002578:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* GetOutputDataRate and SetOutputDataRate functions */
  if (BSP_MOTION_SENSOR_SetOutputDataRate(0, MOTION_ACCELERO, 3333.0f) != BSP_ERROR_NONE)
 800257a:	ed9f 0a30 	vldr	s0, [pc, #192]	; 800263c <webserver_acel_sensor_start+0x198>
 800257e:	2102      	movs	r1, #2
 8002580:	2000      	movs	r0, #0
 8002582:	f001 fd1d 	bl	8003fc0 <BSP_MOTION_SENSOR_SetOutputDataRate>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d002      	beq.n	8002592 <webserver_acel_sensor_start+0xee>
    result--;
 800258c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800258e:	3b01      	subs	r3, #1
 8002590:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (BSP_MOTION_SENSOR_GetOutputDataRate(0, MOTION_ACCELERO, &outputDataRate) != BSP_ERROR_NONE)
 8002592:	1d3b      	adds	r3, r7, #4
 8002594:	461a      	mov	r2, r3
 8002596:	2102      	movs	r1, #2
 8002598:	2000      	movs	r0, #0
 800259a:	f001 fcb1 	bl	8003f00 <BSP_MOTION_SENSOR_GetOutputDataRate>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d002      	beq.n	80025aa <webserver_acel_sensor_start+0x106>
    result--;
 80025a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025a6:	3b01      	subs	r3, #1
 80025a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (outputDataRate != 6667.0f)
 80025aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80025ae:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8002640 <webserver_acel_sensor_start+0x19c>
 80025b2:	eef4 7a47 	vcmp.f32	s15, s14
 80025b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025ba:	d002      	beq.n	80025c2 <webserver_acel_sensor_start+0x11e>
    result--;
 80025bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025be:	3b01      	subs	r3, #1
 80025c0:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (BSP_MOTION_SENSOR_SetOutputDataRate(0, MOTION_ACCELERO, 208.0f) != BSP_ERROR_NONE)
 80025c2:	ed9f 0a20 	vldr	s0, [pc, #128]	; 8002644 <webserver_acel_sensor_start+0x1a0>
 80025c6:	2102      	movs	r1, #2
 80025c8:	2000      	movs	r0, #0
 80025ca:	f001 fcf9 	bl	8003fc0 <BSP_MOTION_SENSOR_SetOutputDataRate>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d002      	beq.n	80025da <webserver_acel_sensor_start+0x136>
    result--;
 80025d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025d6:	3b01      	subs	r3, #1
 80025d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (BSP_MOTION_SENSOR_GetOutputDataRate(0, MOTION_ACCELERO, &outputDataRate) != BSP_ERROR_NONE)
 80025da:	1d3b      	adds	r3, r7, #4
 80025dc:	461a      	mov	r2, r3
 80025de:	2102      	movs	r1, #2
 80025e0:	2000      	movs	r0, #0
 80025e2:	f001 fc8d 	bl	8003f00 <BSP_MOTION_SENSOR_GetOutputDataRate>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d002      	beq.n	80025f2 <webserver_acel_sensor_start+0x14e>
    result--;
 80025ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ee:	3b01      	subs	r3, #1
 80025f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (outputDataRate != 208.0f)
 80025f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80025f6:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8002644 <webserver_acel_sensor_start+0x1a0>
 80025fa:	eef4 7a47 	vcmp.f32	s15, s14
 80025fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002602:	d002      	beq.n	800260a <webserver_acel_sensor_start+0x166>
    result--;
 8002604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002606:	3b01      	subs	r3, #1
 8002608:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* GetSensitivity function */
  if (BSP_MOTION_SENSOR_GetSensitivity(0, MOTION_ACCELERO, &sensitivity) != BSP_ERROR_NONE)
 800260a:	f107 0308 	add.w	r3, r7, #8
 800260e:	461a      	mov	r2, r3
 8002610:	2102      	movs	r1, #2
 8002612:	2000      	movs	r0, #0
 8002614:	f001 fc14 	bl	8003e40 <BSP_MOTION_SENSOR_GetSensitivity>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d002      	beq.n	8002624 <webserver_acel_sensor_start+0x180>
    result--;
 800261e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002620:	3b01      	subs	r3, #1
 8002622:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (result < 0)
 8002624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002626:	2b00      	cmp	r3, #0
 8002628:	da02      	bge.n	8002630 <webserver_acel_sensor_start+0x18c>
    printf("ahhh\n");
 800262a:	4807      	ldr	r0, [pc, #28]	; (8002648 <webserver_acel_sensor_start+0x1a4>)
 800262c:	f014 f9f0 	bl	8016a10 <puts>
  return result;
 8002630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002632:	4618      	mov	r0, r3
 8002634:	3730      	adds	r7, #48	; 0x30
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	45505000 	.word	0x45505000
 8002640:	45d05800 	.word	0x45d05800
 8002644:	43500000 	.word	0x43500000
 8002648:	0801a1c0 	.word	0x0801a1c0

0800264c <webserver_acel_read>:

void webserver_acel_read(int *acelX, int *acelY)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b086      	sub	sp, #24
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	6039      	str	r1, [r7, #0]
  //    iir_LP_2 = 0;
  //  }
  //
  //  HAL_Delay(2);
  //
  result = 0;
 8002656:	2300      	movs	r3, #0
 8002658:	617b      	str	r3, [r7, #20]
  if (BSP_MOTION_SENSOR_GetAxes(0, MOTION_ACCELERO, &axes) != BSP_ERROR_NONE)
 800265a:	f107 0308 	add.w	r3, r7, #8
 800265e:	461a      	mov	r2, r3
 8002660:	2102      	movs	r1, #2
 8002662:	2000      	movs	r0, #0
 8002664:	f001 fb8c 	bl	8003d80 <BSP_MOTION_SENSOR_GetAxes>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d002      	beq.n	8002674 <webserver_acel_read+0x28>
    result--;
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	3b01      	subs	r3, #1
 8002672:	617b      	str	r3, [r7, #20]
  if (result < 0)
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	2b00      	cmp	r3, #0
 8002678:	da03      	bge.n	8002682 <webserver_acel_read+0x36>
  {
    printf("Sampling Error %i\n", result);
 800267a:	6979      	ldr	r1, [r7, #20]
 800267c:	4806      	ldr	r0, [pc, #24]	; (8002698 <webserver_acel_read+0x4c>)
 800267e:	f014 f959 	bl	8016934 <iprintf>
  //  vel_x_prev = vel_x;
  //  vel_y_prev = vel_y;
  //  displacement_mag = sqrt((displacement_x) * (displacement_x) + (displacement_y) * (displacement_y));
  //
  //  printf("**Acceleration** X: %f, Y: %f | **Velocity** Magnitude: %f, X: %f, Y: %f | **Displacement** Magnitude: %f, X: %f, Y: %f\n ", acc_x_filter_hp, acc_y_filter_hp, vel_mag, vel_x, vel_y, displacement_mag, displacement_x, displacement_y);
  *acelX = axes.xval;
 8002682:	68ba      	ldr	r2, [r7, #8]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	601a      	str	r2, [r3, #0]
  *acelY = axes.yval;
 8002688:	68fa      	ldr	r2, [r7, #12]
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	601a      	str	r2, [r3, #0]
  return;
 800268e:	bf00      	nop
}
 8002690:	3718      	adds	r7, #24
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	0801a1c8 	.word	0x0801a1c8

0800269c <webserver_sensors_start>:
 * @brief  Start temperature, pressure and humidity sensors acquisition.
 * @param  None
 * @retval BSP status
 */
int webserver_sensors_start(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b082      	sub	sp, #8
 80026a0:	af00      	add	r7, sp, #0
  int status = BSP_ERROR_NONE;
 80026a2:	2300      	movs	r3, #0
 80026a4:	607b      	str	r3, [r7, #4]

  status = webserver_acel_sensor_start();
 80026a6:	f7ff fefd 	bl	80024a4 <webserver_acel_sensor_start>
 80026aa:	6078      	str	r0, [r7, #4]

  return status;
 80026ac:	687b      	ldr	r3, [r7, #4]
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3708      	adds	r7, #8
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
	...

080026b8 <app_entry>:
  * @brief  App main program
  * @param  None
  * @retval None
  */
void app_entry(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0
  /* No buffer for printf usage, just print characters one by one.*/
  setbuf(stdout, NULL);
 80026bc:	4b16      	ldr	r3, [pc, #88]	; (8002718 <app_entry+0x60>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	2100      	movs	r1, #0
 80026c4:	4618      	mov	r0, r3
 80026c6:	f012 ffed 	bl	80156a4 <setbuf>

  /* Initialize web server system */
  if (system_init() != WEBSERVER_OK)
 80026ca:	f7fe fff9 	bl	80016c0 <system_init>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d001      	beq.n	80026d8 <app_entry+0x20>
  {
    webserver_process_error();
 80026d4:	f000 f822 	bl	800271c <webserver_process_error>
  }

  /* Initialize WiFi connection */
  if (webserver_wifi_init() != WEBSERVER_OK)
 80026d8:	f000 f82b 	bl	8002732 <webserver_wifi_init>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d001      	beq.n	80026e6 <app_entry+0x2e>
  {
    webserver_process_error();
 80026e2:	f000 f81b 	bl	800271c <webserver_process_error>
  }

  /* Print web server header in hyperterminal */
  webserver_console_print_header();
 80026e6:	f7fe fcf9 	bl	80010dc <webserver_console_print_header>

  /* Connect to available WiFi */
  if (webserver_wifi_connect() != WEBSERVER_OK)
 80026ea:	f000 f831 	bl	8002750 <webserver_wifi_connect>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d001      	beq.n	80026f8 <app_entry+0x40>
  {
    webserver_process_error();
 80026f4:	f000 f812 	bl	800271c <webserver_process_error>
  }

  /* Start sensors */
  if (webserver_sensors_start() != BSP_ERROR_NONE)
 80026f8:	f7ff ffd0 	bl	800269c <webserver_sensors_start>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d001      	beq.n	8002706 <app_entry+0x4e>
  {
    webserver_process_error();
 8002702:	f000 f80b 	bl	800271c <webserver_process_error>
  }

  /* Start web server */
  if (webserver_http_start() != WEBSERVER_OK)
 8002706:	f7ff fc59 	bl	8001fbc <webserver_http_start>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d001      	beq.n	8002714 <app_entry+0x5c>
  {
    webserver_process_error();
 8002710:	f000 f804 	bl	800271c <webserver_process_error>
  }
}
 8002714:	bf00      	nop
 8002716:	bd80      	pop	{r7, pc}
 8002718:	200002c4 	.word	0x200002c4

0800271c <webserver_process_error>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void webserver_process_error(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002720:	b672      	cpsid	i
}
 8002722:	bf00      	nop
  /* Disable all interrupts */
  __disable_irq();

  /* De-Initialize GREEN led */
  BSP_LED_DeInit(LED_GREEN);
 8002724:	2001      	movs	r0, #1
 8002726:	f000 fd5d 	bl	80031e4 <BSP_LED_DeInit>

  /* Turn ON RED led */
  BSP_LED_On(LED_RED);
 800272a:	2000      	movs	r0, #0
 800272c:	f000 fd86 	bl	800323c <BSP_LED_On>

  while(1)
 8002730:	e7fe      	b.n	8002730 <webserver_process_error+0x14>

08002732 <webserver_wifi_init>:
  * @brief  Initialize WiFi interface
  * @param  None
  * @retval Web Server status
  */
WebServer_StatusTypeDef webserver_wifi_init(void)
{
 8002732:	b580      	push	{r7, lr}
 8002734:	af00      	add	r7, sp, #0
  /* WiFi IO configuration */
  Wifi_IO_Init();
 8002736:	f000 f939 	bl	80029ac <Wifi_IO_Init>

  /* WiFi SPI initialization and configuration */
  if (Wifi_SPI_Config() != WEBSERVER_OK)
 800273a:	f000 f8df 	bl	80028fc <Wifi_SPI_Config>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d002      	beq.n	800274a <webserver_wifi_init+0x18>
  {
    return WIFI_ERROR;
 8002744:	f06f 0305 	mvn.w	r3, #5
 8002748:	e000      	b.n	800274c <webserver_wifi_init+0x1a>
  }

  return WEBSERVER_OK;
 800274a:	2300      	movs	r3, #0
}
 800274c:	4618      	mov	r0, r3
 800274e:	bd80      	pop	{r7, pc}

08002750 <webserver_wifi_connect>:
  * @brief  Connect WiFi interface
  * @param  None
  * @retval Web Server status
  */
WebServer_StatusTypeDef webserver_wifi_connect(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	af00      	add	r7, sp, #0
  .psk = "ImagineNeedingThis",
  .security_mode = NET_WIFI_SM_WPA2_WPA_PSK
  };

  /* start network interface */
  Netif = NetInterfaceOn(mx_wifi_driver, hnet_notify);
 8002754:	4910      	ldr	r1, [pc, #64]	; (8002798 <webserver_wifi_connect+0x48>)
 8002756:	4811      	ldr	r0, [pc, #68]	; (800279c <webserver_wifi_connect+0x4c>)
 8002758:	f000 fbfa 	bl	8002f50 <NetInterfaceOn>
 800275c:	4603      	mov	r3, r0
 800275e:	4a10      	ldr	r2, [pc, #64]	; (80027a0 <webserver_wifi_connect+0x50>)
 8002760:	6013      	str	r3, [r2, #0]

  /* Check if a valid WIFI interface is initialized */
  if (NET_INTERFACE_IS_WIFI(Netif))
 8002762:	4b0f      	ldr	r3, [pc, #60]	; (80027a0 <webserver_wifi_connect+0x50>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4618      	mov	r0, r3
 8002768:	f00f fd1f 	bl	80121aa <net_wifi_get_class>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d10e      	bne.n	8002790 <webserver_wifi_connect+0x40>
  {
    /* Scan available WIFIs */
    scan_cmd(0, NULL);
 8002772:	2100      	movs	r1, #0
 8002774:	2000      	movs	r0, #0
 8002776:	f000 fb2f 	bl	8002dd8 <scan_cmd>

//    /* Get user credentials */
//    wifi_get_credentials();

    /* Scan available WIFIs */
    NetWifiGetDefaultStation(&WifiCredentials, net_wifi_registred_hotspot);
 800277a:	490a      	ldr	r1, [pc, #40]	; (80027a4 <webserver_wifi_connect+0x54>)
 800277c:	480a      	ldr	r0, [pc, #40]	; (80027a8 <webserver_wifi_connect+0x58>)
 800277e:	f000 fa45 	bl	8002c0c <NetWifiGetDefaultStation>

    /* Connect to selected WIFI */
    NetInterfaceConnect(Netif, true, &WifiCredentials, NET_WIFI_MODE_STA);
 8002782:	4b07      	ldr	r3, [pc, #28]	; (80027a0 <webserver_wifi_connect+0x50>)
 8002784:	6818      	ldr	r0, [r3, #0]
 8002786:	2300      	movs	r3, #0
 8002788:	4a07      	ldr	r2, [pc, #28]	; (80027a8 <webserver_wifi_connect+0x58>)
 800278a:	2101      	movs	r1, #1
 800278c:	f000 fc28 	bl	8002fe0 <NetInterfaceConnect>
  }

  return WEBSERVER_OK;
 8002790:	2300      	movs	r3, #0
}
 8002792:	4618      	mov	r0, r3
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	080027ad 	.word	0x080027ad
 800279c:	08013a3d 	.word	0x08013a3d
 80027a0:	20000c10 	.word	0x20000c10
 80027a4:	20000ca4 	.word	0x20000ca4
 80027a8:	2000004c 	.word	0x2000004c

080027ac <hnet_notify>:
  * @brief  Handles net notifications
  * @param  None
  * @retval None
  */
static void hnet_notify(void *context, uint32_t event_class, uint32_t event_id, void  *event_data)
{
 80027ac:	b5b0      	push	{r4, r5, r7, lr}
 80027ae:	b08a      	sub	sp, #40	; 0x28
 80027b0:	af04      	add	r7, sp, #16
 80027b2:	60f8      	str	r0, [r7, #12]
 80027b4:	60b9      	str	r1, [r7, #8]
 80027b6:	607a      	str	r2, [r7, #4]
 80027b8:	603b      	str	r3, [r7, #0]
  net_if_handle_t *netif = context;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	617b      	str	r3, [r7, #20]
  ((void)event_data);

  if (NET_EVENT_STATE_CHANGE == event_class)
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d17a      	bne.n	80028ba <hnet_notify+0x10e>
  {
    net_state_t new_state = (net_state_t) event_id;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	74fb      	strb	r3, [r7, #19]
    switch (new_state)
 80027c8:	7cfb      	ldrb	r3, [r7, #19]
 80027ca:	2b08      	cmp	r3, #8
 80027cc:	d874      	bhi.n	80028b8 <hnet_notify+0x10c>
 80027ce:	a201      	add	r2, pc, #4	; (adr r2, 80027d4 <hnet_notify+0x28>)
 80027d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027d4:	080028a9 	.word	0x080028a9
 80027d8:	080027f9 	.word	0x080027f9
 80027dc:	08002801 	.word	0x08002801
 80027e0:	08002809 	.word	0x08002809
 80027e4:	08002875 	.word	0x08002875
 80027e8:	0800287d 	.word	0x0800287d
 80027ec:	080028a1 	.word	0x080028a1
 80027f0:	08002899 	.word	0x08002899
 80027f4:	080028b1 	.word	0x080028b1
    {
      /* Initialized state */
    case NET_STATE_INITIALIZED:
      {
        printf("- Network Interface initialized:\r\n");
 80027f8:	4832      	ldr	r0, [pc, #200]	; (80028c4 <hnet_notify+0x118>)
 80027fa:	f014 f909 	bl	8016a10 <puts>
        break;
 80027fe:	e05c      	b.n	80028ba <hnet_notify+0x10e>
      }

      /* Started state */
    case NET_STATE_STARTING:
      {
        printf("- Network Interface starting:\r\n");
 8002800:	4831      	ldr	r0, [pc, #196]	; (80028c8 <hnet_notify+0x11c>)
 8002802:	f014 f905 	bl	8016a10 <puts>
        break;
 8002806:	e058      	b.n	80028ba <hnet_notify+0x10e>
      }

      /* Ready state */
    case NET_STATE_READY:
      {
        printf("- Network Interface ready:\r\n");
 8002808:	4830      	ldr	r0, [pc, #192]	; (80028cc <hnet_notify+0x120>)
 800280a:	f014 f901 	bl	8016a10 <puts>
        printf("   - Device Name : %s.\r\n", netif->DeviceName);
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	3325      	adds	r3, #37	; 0x25
 8002812:	4619      	mov	r1, r3
 8002814:	482e      	ldr	r0, [pc, #184]	; (80028d0 <hnet_notify+0x124>)
 8002816:	f014 f88d 	bl	8016934 <iprintf>
        printf("   - Device ID   : %s.\r\n", netif->DeviceID);
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	3365      	adds	r3, #101	; 0x65
 800281e:	4619      	mov	r1, r3
 8002820:	482c      	ldr	r0, [pc, #176]	; (80028d4 <hnet_notify+0x128>)
 8002822:	f014 f887 	bl	8016934 <iprintf>
        printf("   - Device Version : %s.\r\n", netif->DeviceVer);
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	33a5      	adds	r3, #165	; 0xa5
 800282a:	4619      	mov	r1, r3
 800282c:	482a      	ldr	r0, [pc, #168]	; (80028d8 <hnet_notify+0x12c>)
 800282e:	f014 f881 	bl	8016934 <iprintf>
        printf("   - MAC address: %x.%x.%x.%x.%x.%x\r\n",
               netif->macaddr.mac[0], netif->macaddr.mac[1], netif->macaddr.mac[2],
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	f893 30e5 	ldrb.w	r3, [r3, #229]	; 0xe5
        printf("   - MAC address: %x.%x.%x.%x.%x.%x\r\n",
 8002838:	4618      	mov	r0, r3
               netif->macaddr.mac[0], netif->macaddr.mac[1], netif->macaddr.mac[2],
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	f893 30e6 	ldrb.w	r3, [r3, #230]	; 0xe6
        printf("   - MAC address: %x.%x.%x.%x.%x.%x\r\n",
 8002840:	461c      	mov	r4, r3
               netif->macaddr.mac[0], netif->macaddr.mac[1], netif->macaddr.mac[2],
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	f893 30e7 	ldrb.w	r3, [r3, #231]	; 0xe7
        printf("   - MAC address: %x.%x.%x.%x.%x.%x\r\n",
 8002848:	461d      	mov	r5, r3
               netif->macaddr.mac[3], netif->macaddr.mac[4], netif->macaddr.mac[5]);
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
        printf("   - MAC address: %x.%x.%x.%x.%x.%x\r\n",
 8002850:	461a      	mov	r2, r3
               netif->macaddr.mac[3], netif->macaddr.mac[4], netif->macaddr.mac[5]);
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	f893 30e9 	ldrb.w	r3, [r3, #233]	; 0xe9
        printf("   - MAC address: %x.%x.%x.%x.%x.%x\r\n",
 8002858:	4619      	mov	r1, r3
               netif->macaddr.mac[3], netif->macaddr.mac[4], netif->macaddr.mac[5]);
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	f893 30ea 	ldrb.w	r3, [r3, #234]	; 0xea
        printf("   - MAC address: %x.%x.%x.%x.%x.%x\r\n",
 8002860:	9302      	str	r3, [sp, #8]
 8002862:	9101      	str	r1, [sp, #4]
 8002864:	9200      	str	r2, [sp, #0]
 8002866:	462b      	mov	r3, r5
 8002868:	4622      	mov	r2, r4
 800286a:	4601      	mov	r1, r0
 800286c:	481b      	ldr	r0, [pc, #108]	; (80028dc <hnet_notify+0x130>)
 800286e:	f014 f861 	bl	8016934 <iprintf>
        break;
 8002872:	e022      	b.n	80028ba <hnet_notify+0x10e>
      }

      /* Connecting state */
    case NET_STATE_CONNECTING:
      {
        printf("- Network Interface connecting:\r\n");
 8002874:	481a      	ldr	r0, [pc, #104]	; (80028e0 <hnet_notify+0x134>)
 8002876:	f014 f8cb 	bl	8016a10 <puts>
        break;
 800287a:	e01e      	b.n	80028ba <hnet_notify+0x10e>
      }

      /* Connected state */
    case NET_STATE_CONNECTED:
      {
        printf("- Network Interface connected:\r\n");
 800287c:	4819      	ldr	r0, [pc, #100]	; (80028e4 <hnet_notify+0x138>)
 800287e:	f014 f8c7 	bl	8016a10 <puts>
        printf("   - IP address :  %s. \r\n", NET_NTOA(&netif->ipaddr));
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	3304      	adds	r3, #4
 8002886:	4618      	mov	r0, r3
 8002888:	f00f fc56 	bl	8012138 <net_ntoa>
 800288c:	4603      	mov	r3, r0
 800288e:	4619      	mov	r1, r3
 8002890:	4815      	ldr	r0, [pc, #84]	; (80028e8 <hnet_notify+0x13c>)
 8002892:	f014 f84f 	bl	8016934 <iprintf>
        break;
 8002896:	e010      	b.n	80028ba <hnet_notify+0x10e>
      }

      /* Disconnecting state */
    case NET_STATE_DISCONNECTING:
      printf("- Network Interface disconnecting\r\n");
 8002898:	4814      	ldr	r0, [pc, #80]	; (80028ec <hnet_notify+0x140>)
 800289a:	f014 f8b9 	bl	8016a10 <puts>
      break;
 800289e:	e00c      	b.n	80028ba <hnet_notify+0x10e>

      /* Stopping state */
    case NET_STATE_STOPPING:
      {
        printf("- Network Interface stopping\r\n");
 80028a0:	4813      	ldr	r0, [pc, #76]	; (80028f0 <hnet_notify+0x144>)
 80028a2:	f014 f8b5 	bl	8016a10 <puts>
        break;
 80028a6:	e008      	b.n	80028ba <hnet_notify+0x10e>
      }

      /* De-Initialized state */
    case NET_STATE_DEINITIALIZED:
      {
        printf("- Network Interface de-initialized\r\n");
 80028a8:	4812      	ldr	r0, [pc, #72]	; (80028f4 <hnet_notify+0x148>)
 80028aa:	f014 f8b1 	bl	8016a10 <puts>
        break;
 80028ae:	e004      	b.n	80028ba <hnet_notify+0x10e>
      }

      /* Lost state */
    case NET_STATE_CONNECTION_LOST:
      {
        printf("- Network Interface connection lost\r\n");
 80028b0:	4811      	ldr	r0, [pc, #68]	; (80028f8 <hnet_notify+0x14c>)
 80028b2:	f014 f8ad 	bl	8016a10 <puts>
        break;
 80028b6:	e000      	b.n	80028ba <hnet_notify+0x10e>
      }

    default:
      {
        break;
 80028b8:	bf00      	nop
      }
    }
  }
}
 80028ba:	bf00      	nop
 80028bc:	3718      	adds	r7, #24
 80028be:	46bd      	mov	sp, r7
 80028c0:	bdb0      	pop	{r4, r5, r7, pc}
 80028c2:	bf00      	nop
 80028c4:	0801a1dc 	.word	0x0801a1dc
 80028c8:	0801a200 	.word	0x0801a200
 80028cc:	0801a220 	.word	0x0801a220
 80028d0:	0801a23c 	.word	0x0801a23c
 80028d4:	0801a258 	.word	0x0801a258
 80028d8:	0801a274 	.word	0x0801a274
 80028dc:	0801a290 	.word	0x0801a290
 80028e0:	0801a2b8 	.word	0x0801a2b8
 80028e4:	0801a2dc 	.word	0x0801a2dc
 80028e8:	0801a2fc 	.word	0x0801a2fc
 80028ec:	0801a318 	.word	0x0801a318
 80028f0:	0801a33c 	.word	0x0801a33c
 80028f4:	0801a35c 	.word	0x0801a35c
 80028f8:	0801a380 	.word	0x0801a380

080028fc <Wifi_SPI_Config>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static WebServer_StatusTypeDef Wifi_SPI_Config(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	af00      	add	r7, sp, #0
  /* Set SPI instance */
  Wifi_SPIHandle.Instance                        = SPI2;
 8002900:	4b28      	ldr	r3, [pc, #160]	; (80029a4 <Wifi_SPI_Config+0xa8>)
 8002902:	4a29      	ldr	r2, [pc, #164]	; (80029a8 <Wifi_SPI_Config+0xac>)
 8002904:	601a      	str	r2, [r3, #0]

  /* Set parameter to be configured */
  Wifi_SPIHandle.Init.Mode                       = SPI_MODE_MASTER;
 8002906:	4b27      	ldr	r3, [pc, #156]	; (80029a4 <Wifi_SPI_Config+0xa8>)
 8002908:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800290c:	605a      	str	r2, [r3, #4]
  Wifi_SPIHandle.Init.Direction                  = SPI_DIRECTION_2LINES;
 800290e:	4b25      	ldr	r3, [pc, #148]	; (80029a4 <Wifi_SPI_Config+0xa8>)
 8002910:	2200      	movs	r2, #0
 8002912:	609a      	str	r2, [r3, #8]
  Wifi_SPIHandle.Init.DataSize                   = SPI_DATASIZE_8BIT;
 8002914:	4b23      	ldr	r3, [pc, #140]	; (80029a4 <Wifi_SPI_Config+0xa8>)
 8002916:	2207      	movs	r2, #7
 8002918:	60da      	str	r2, [r3, #12]
  Wifi_SPIHandle.Init.CLKPolarity                = SPI_POLARITY_LOW;
 800291a:	4b22      	ldr	r3, [pc, #136]	; (80029a4 <Wifi_SPI_Config+0xa8>)
 800291c:	2200      	movs	r2, #0
 800291e:	611a      	str	r2, [r3, #16]
  Wifi_SPIHandle.Init.CLKPhase                   = SPI_PHASE_1EDGE;
 8002920:	4b20      	ldr	r3, [pc, #128]	; (80029a4 <Wifi_SPI_Config+0xa8>)
 8002922:	2200      	movs	r2, #0
 8002924:	615a      	str	r2, [r3, #20]
  Wifi_SPIHandle.Init.NSS                        = SPI_NSS_SOFT;
 8002926:	4b1f      	ldr	r3, [pc, #124]	; (80029a4 <Wifi_SPI_Config+0xa8>)
 8002928:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800292c:	619a      	str	r2, [r3, #24]
  Wifi_SPIHandle.Init.BaudRatePrescaler          = SPI_BAUDRATEPRESCALER_8;
 800292e:	4b1d      	ldr	r3, [pc, #116]	; (80029a4 <Wifi_SPI_Config+0xa8>)
 8002930:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002934:	61da      	str	r2, [r3, #28]
  Wifi_SPIHandle.Init.FirstBit                   = SPI_FIRSTBIT_MSB;
 8002936:	4b1b      	ldr	r3, [pc, #108]	; (80029a4 <Wifi_SPI_Config+0xa8>)
 8002938:	2200      	movs	r2, #0
 800293a:	621a      	str	r2, [r3, #32]
  Wifi_SPIHandle.Init.TIMode                     = SPI_TIMODE_DISABLE;
 800293c:	4b19      	ldr	r3, [pc, #100]	; (80029a4 <Wifi_SPI_Config+0xa8>)
 800293e:	2200      	movs	r2, #0
 8002940:	625a      	str	r2, [r3, #36]	; 0x24
  Wifi_SPIHandle.Init.CRCCalculation             = SPI_CRCCALCULATION_DISABLE;
 8002942:	4b18      	ldr	r3, [pc, #96]	; (80029a4 <Wifi_SPI_Config+0xa8>)
 8002944:	2200      	movs	r2, #0
 8002946:	629a      	str	r2, [r3, #40]	; 0x28
  Wifi_SPIHandle.Init.CRCPolynomial              = 0x7;
 8002948:	4b16      	ldr	r3, [pc, #88]	; (80029a4 <Wifi_SPI_Config+0xa8>)
 800294a:	2207      	movs	r2, #7
 800294c:	62da      	str	r2, [r3, #44]	; 0x2c
  Wifi_SPIHandle.Init.NSSPMode                   = SPI_NSS_PULSE_DISABLE;
 800294e:	4b15      	ldr	r3, [pc, #84]	; (80029a4 <Wifi_SPI_Config+0xa8>)
 8002950:	2200      	movs	r2, #0
 8002952:	635a      	str	r2, [r3, #52]	; 0x34
  Wifi_SPIHandle.Init.NSSPolarity                = SPI_NSS_POLARITY_LOW;
 8002954:	4b13      	ldr	r3, [pc, #76]	; (80029a4 <Wifi_SPI_Config+0xa8>)
 8002956:	2200      	movs	r2, #0
 8002958:	639a      	str	r2, [r3, #56]	; 0x38
  Wifi_SPIHandle.Init.FifoThreshold              = SPI_FIFO_THRESHOLD_01DATA;
 800295a:	4b12      	ldr	r3, [pc, #72]	; (80029a4 <Wifi_SPI_Config+0xa8>)
 800295c:	2200      	movs	r2, #0
 800295e:	63da      	str	r2, [r3, #60]	; 0x3c
  Wifi_SPIHandle.Init.MasterSSIdleness           = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002960:	4b10      	ldr	r3, [pc, #64]	; (80029a4 <Wifi_SPI_Config+0xa8>)
 8002962:	2200      	movs	r2, #0
 8002964:	649a      	str	r2, [r3, #72]	; 0x48
  Wifi_SPIHandle.Init.MasterInterDataIdleness    = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002966:	4b0f      	ldr	r3, [pc, #60]	; (80029a4 <Wifi_SPI_Config+0xa8>)
 8002968:	2200      	movs	r2, #0
 800296a:	64da      	str	r2, [r3, #76]	; 0x4c
  Wifi_SPIHandle.Init.MasterReceiverAutoSusp     = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800296c:	4b0d      	ldr	r3, [pc, #52]	; (80029a4 <Wifi_SPI_Config+0xa8>)
 800296e:	2200      	movs	r2, #0
 8002970:	651a      	str	r2, [r3, #80]	; 0x50
  Wifi_SPIHandle.Init.MasterKeepIOState          = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002972:	4b0c      	ldr	r3, [pc, #48]	; (80029a4 <Wifi_SPI_Config+0xa8>)
 8002974:	2200      	movs	r2, #0
 8002976:	655a      	str	r2, [r3, #84]	; 0x54
  Wifi_SPIHandle.Init.IOSwap                     = SPI_IO_SWAP_DISABLE;
 8002978:	4b0a      	ldr	r3, [pc, #40]	; (80029a4 <Wifi_SPI_Config+0xa8>)
 800297a:	2200      	movs	r2, #0
 800297c:	659a      	str	r2, [r3, #88]	; 0x58
  Wifi_SPIHandle.Init.ReadyMasterManagement      = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 800297e:	4b09      	ldr	r3, [pc, #36]	; (80029a4 <Wifi_SPI_Config+0xa8>)
 8002980:	2200      	movs	r2, #0
 8002982:	65da      	str	r2, [r3, #92]	; 0x5c
  Wifi_SPIHandle.Init.ReadyPolarity              = SPI_RDY_POLARITY_HIGH;
 8002984:	4b07      	ldr	r3, [pc, #28]	; (80029a4 <Wifi_SPI_Config+0xa8>)
 8002986:	2200      	movs	r2, #0
 8002988:	661a      	str	r2, [r3, #96]	; 0x60

  /* SPI initialization */
  if (HAL_SPI_Init(&Wifi_SPIHandle) != HAL_OK)
 800298a:	4806      	ldr	r0, [pc, #24]	; (80029a4 <Wifi_SPI_Config+0xa8>)
 800298c:	f00d fb9e 	bl	80100cc <HAL_SPI_Init>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d002      	beq.n	800299c <Wifi_SPI_Config+0xa0>
  {
    return PERIPH_ERROR;
 8002996:	f06f 0304 	mvn.w	r3, #4
 800299a:	e000      	b.n	800299e <Wifi_SPI_Config+0xa2>
  }

  return WEBSERVER_OK;
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	20000c14 	.word	0x20000c14
 80029a8:	40003800 	.word	0x40003800

080029ac <Wifi_IO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void Wifi_IO_Init(void)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b08c      	sub	sp, #48	; 0x30
 80029b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029b2:	f107 031c 	add.w	r3, r7, #28
 80029b6:	2200      	movs	r2, #0
 80029b8:	601a      	str	r2, [r3, #0]
 80029ba:	605a      	str	r2, [r3, #4]
 80029bc:	609a      	str	r2, [r3, #8]
 80029be:	60da      	str	r2, [r3, #12]
 80029c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80029c2:	4b63      	ldr	r3, [pc, #396]	; (8002b50 <Wifi_IO_Init+0x1a4>)
 80029c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029c8:	4a61      	ldr	r2, [pc, #388]	; (8002b50 <Wifi_IO_Init+0x1a4>)
 80029ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029ce:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80029d2:	4b5f      	ldr	r3, [pc, #380]	; (8002b50 <Wifi_IO_Init+0x1a4>)
 80029d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029dc:	61bb      	str	r3, [r7, #24]
 80029de:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029e0:	4b5b      	ldr	r3, [pc, #364]	; (8002b50 <Wifi_IO_Init+0x1a4>)
 80029e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029e6:	4a5a      	ldr	r2, [pc, #360]	; (8002b50 <Wifi_IO_Init+0x1a4>)
 80029e8:	f043 0304 	orr.w	r3, r3, #4
 80029ec:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80029f0:	4b57      	ldr	r3, [pc, #348]	; (8002b50 <Wifi_IO_Init+0x1a4>)
 80029f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029f6:	f003 0304 	and.w	r3, r3, #4
 80029fa:	617b      	str	r3, [r7, #20]
 80029fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80029fe:	4b54      	ldr	r3, [pc, #336]	; (8002b50 <Wifi_IO_Init+0x1a4>)
 8002a00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a04:	4a52      	ldr	r2, [pc, #328]	; (8002b50 <Wifi_IO_Init+0x1a4>)
 8002a06:	f043 0308 	orr.w	r3, r3, #8
 8002a0a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002a0e:	4b50      	ldr	r3, [pc, #320]	; (8002b50 <Wifi_IO_Init+0x1a4>)
 8002a10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a14:	f003 0308 	and.w	r3, r3, #8
 8002a18:	613b      	str	r3, [r7, #16]
 8002a1a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a1c:	4b4c      	ldr	r3, [pc, #304]	; (8002b50 <Wifi_IO_Init+0x1a4>)
 8002a1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a22:	4a4b      	ldr	r2, [pc, #300]	; (8002b50 <Wifi_IO_Init+0x1a4>)
 8002a24:	f043 0301 	orr.w	r3, r3, #1
 8002a28:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002a2c:	4b48      	ldr	r3, [pc, #288]	; (8002b50 <Wifi_IO_Init+0x1a4>)
 8002a2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a32:	f003 0301 	and.w	r3, r3, #1
 8002a36:	60fb      	str	r3, [r7, #12]
 8002a38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a3a:	4b45      	ldr	r3, [pc, #276]	; (8002b50 <Wifi_IO_Init+0x1a4>)
 8002a3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a40:	4a43      	ldr	r2, [pc, #268]	; (8002b50 <Wifi_IO_Init+0x1a4>)
 8002a42:	f043 0302 	orr.w	r3, r3, #2
 8002a46:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002a4a:	4b41      	ldr	r3, [pc, #260]	; (8002b50 <Wifi_IO_Init+0x1a4>)
 8002a4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a50:	f003 0302 	and.w	r3, r3, #2
 8002a54:	60bb      	str	r3, [r7, #8]
 8002a56:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a58:	4b3d      	ldr	r3, [pc, #244]	; (8002b50 <Wifi_IO_Init+0x1a4>)
 8002a5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a5e:	4a3c      	ldr	r2, [pc, #240]	; (8002b50 <Wifi_IO_Init+0x1a4>)
 8002a60:	f043 0320 	orr.w	r3, r3, #32
 8002a64:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002a68:	4b39      	ldr	r3, [pc, #228]	; (8002b50 <Wifi_IO_Init+0x1a4>)
 8002a6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a6e:	f003 0320 	and.w	r3, r3, #32
 8002a72:	607b      	str	r3, [r7, #4]
 8002a74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MXCHIP_RESET_GPIO_Port, MXCHIP_RESET_Pin, GPIO_PIN_RESET);
 8002a76:	2200      	movs	r2, #0
 8002a78:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a7c:	4835      	ldr	r0, [pc, #212]	; (8002b54 <Wifi_IO_Init+0x1a8>)
 8002a7e:	f007 fe13 	bl	800a6a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8002a82:	2200      	movs	r2, #0
 8002a84:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002a88:	4833      	ldr	r0, [pc, #204]	; (8002b58 <Wifi_IO_Init+0x1ac>)
 8002a8a:	f007 fe0d 	bl	800a6a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MXCHIP_NSS_GPIO_Port, MXCHIP_NSS_Pin, GPIO_PIN_SET);
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002a94:	4831      	ldr	r0, [pc, #196]	; (8002b5c <Wifi_IO_Init+0x1b0>)
 8002a96:	f007 fe07 	bl	800a6a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : MXCHIP_FLOW_Pin */
  GPIO_InitStruct.Pin = MXCHIP_FLOW_Pin;
 8002a9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002aa0:	4b2f      	ldr	r3, [pc, #188]	; (8002b60 <Wifi_IO_Init+0x1b4>)
 8002aa2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MXCHIP_FLOW_GPIO_Port, &GPIO_InitStruct);
 8002aa8:	f107 031c 	add.w	r3, r7, #28
 8002aac:	4619      	mov	r1, r3
 8002aae:	482d      	ldr	r0, [pc, #180]	; (8002b64 <Wifi_IO_Init+0x1b8>)
 8002ab0:	f007 fb2c 	bl	800a10c <HAL_GPIO_Init>

  /*Configure GPIO pin : MXCHIP_RESET_Pin */
  GPIO_InitStruct.Pin = MXCHIP_RESET_Pin;
 8002ab4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ab8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002aba:	2301      	movs	r3, #1
 8002abc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(MXCHIP_RESET_GPIO_Port, &GPIO_InitStruct);
 8002ac6:	f107 031c 	add.w	r3, r7, #28
 8002aca:	4619      	mov	r1, r3
 8002acc:	4821      	ldr	r0, [pc, #132]	; (8002b54 <Wifi_IO_Init+0x1a8>)
 8002ace:	f007 fb1d 	bl	800a10c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002ad2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002ad6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002adc:	2300      	movs	r3, #0
 8002ade:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ae4:	f107 031c 	add.w	r3, r7, #28
 8002ae8:	4619      	mov	r1, r3
 8002aea:	481b      	ldr	r0, [pc, #108]	; (8002b58 <Wifi_IO_Init+0x1ac>)
 8002aec:	f007 fb0e 	bl	800a10c <HAL_GPIO_Init>

  /*Configure GPIO pin : MXCHIP_NSS_Pin */
  GPIO_InitStruct.Pin = MXCHIP_NSS_Pin;
 8002af0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002af4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002af6:	2301      	movs	r3, #1
 8002af8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002afa:	2300      	movs	r3, #0
 8002afc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002afe:	2300      	movs	r3, #0
 8002b00:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(MXCHIP_NSS_GPIO_Port, &GPIO_InitStruct);
 8002b02:	f107 031c 	add.w	r3, r7, #28
 8002b06:	4619      	mov	r1, r3
 8002b08:	4814      	ldr	r0, [pc, #80]	; (8002b5c <Wifi_IO_Init+0x1b0>)
 8002b0a:	f007 faff 	bl	800a10c <HAL_GPIO_Init>

  /*Configure GPIO pin : MXCHIP_NOTIFY_Pin */
  GPIO_InitStruct.Pin = MXCHIP_NOTIFY_Pin;
 8002b0e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002b12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002b14:	4b12      	ldr	r3, [pc, #72]	; (8002b60 <Wifi_IO_Init+0x1b4>)
 8002b16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MXCHIP_NOTIFY_GPIO_Port, &GPIO_InitStruct);
 8002b1c:	f107 031c 	add.w	r3, r7, #28
 8002b20:	4619      	mov	r1, r3
 8002b22:	480d      	ldr	r0, [pc, #52]	; (8002b58 <Wifi_IO_Init+0x1ac>)
 8002b24:	f007 faf2 	bl	800a10c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI14_IRQn, 5, 0);
 8002b28:	2200      	movs	r2, #0
 8002b2a:	2105      	movs	r1, #5
 8002b2c:	2019      	movs	r0, #25
 8002b2e:	f007 fa36 	bl	8009f9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI14_IRQn);
 8002b32:	2019      	movs	r0, #25
 8002b34:	f007 fa4d 	bl	8009fd2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_IRQn, 5, 0);
 8002b38:	2200      	movs	r2, #0
 8002b3a:	2105      	movs	r1, #5
 8002b3c:	201a      	movs	r0, #26
 8002b3e:	f007 fa2e 	bl	8009f9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_IRQn);
 8002b42:	201a      	movs	r0, #26
 8002b44:	f007 fa45 	bl	8009fd2 <HAL_NVIC_EnableIRQ>
}
 8002b48:	bf00      	nop
 8002b4a:	3730      	adds	r7, #48	; 0x30
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	46020c00 	.word	0x46020c00
 8002b54:	42021400 	.word	0x42021400
 8002b58:	42020c00 	.word	0x42020c00
 8002b5c:	42020400 	.word	0x42020400
 8002b60:	10110000 	.word	0x10110000
 8002b64:	42021800 	.word	0x42021800

08002b68 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief GPIO EXTI callback function
  * @param None
  * @retval None
  */
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	4603      	mov	r3, r0
 8002b70:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 8002b72:	88fb      	ldrh	r3, [r7, #6]
 8002b74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b78:	d007      	beq.n	8002b8a <HAL_GPIO_EXTI_Rising_Callback+0x22>
 8002b7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b7e:	d109      	bne.n	8002b94 <HAL_GPIO_EXTI_Rising_Callback+0x2c>
  {
    /* MXCHIP flow pin notification */
    case MXCHIP_FLOW_Pin:
    {
      mxchip_WIFI_ISR(MXCHIP_FLOW_Pin);
 8002b80:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002b84:	f006 fda4 	bl	80096d0 <mxchip_WIFI_ISR>
      break;
 8002b88:	e005      	b.n	8002b96 <HAL_GPIO_EXTI_Rising_Callback+0x2e>
    }

    /* MXCHIP notify pin notification */
    case (MXCHIP_NOTIFY_Pin):
    {
      mxchip_WIFI_ISR(MXCHIP_NOTIFY_Pin);
 8002b8a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002b8e:	f006 fd9f 	bl	80096d0 <mxchip_WIFI_ISR>
      break;
 8002b92:	e000      	b.n	8002b96 <HAL_GPIO_EXTI_Rising_Callback+0x2e>
    }

  default:
    {
      break;
 8002b94:	bf00      	nop
    }
  }
}
 8002b96:	bf00      	nop
 8002b98:	3708      	adds	r7, #8
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
	...

08002ba0 <HAL_SPI_RxCpltCallback>:
  * @param hspi : pointer to a SPI_HandleTypeDef structure that contains the configuration information for SPI
  *                    module.
  * @retval None
  */
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  if (hspi == &Wifi_SPIHandle)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	4a05      	ldr	r2, [pc, #20]	; (8002bc0 <HAL_SPI_RxCpltCallback+0x20>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d102      	bne.n	8002bb6 <HAL_SPI_RxCpltCallback+0x16>
  {
    HAL_SPI_TransferCallback(hspi);
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f006 fd6d 	bl	8009690 <HAL_SPI_TransferCallback>
  }
}
 8002bb6:	bf00      	nop
 8002bb8:	3708      	adds	r7, #8
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	20000c14 	.word	0x20000c14

08002bc4 <HAL_SPI_TxCpltCallback>:
  * @param hspi : pointer to a SPI_HandleTypeDef structure that contains the configuration information for SPI
  *                    module.
  * @retval None
  */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  if (hspi == &Wifi_SPIHandle)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	4a05      	ldr	r2, [pc, #20]	; (8002be4 <HAL_SPI_TxCpltCallback+0x20>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d102      	bne.n	8002bda <HAL_SPI_TxCpltCallback+0x16>
  {
    HAL_SPI_TransferCallback(hspi);
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f006 fd5b 	bl	8009690 <HAL_SPI_TransferCallback>
  }
}
 8002bda:	bf00      	nop
 8002bdc:	3708      	adds	r7, #8
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	20000c14 	.word	0x20000c14

08002be8 <HAL_SPI_TxRxCpltCallback>:
  * @param hspi : pointer to a SPI_HandleTypeDef structure that contains the configuration information for SPI
  *                    module.
  * @retval None
  */
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  if (hspi == &Wifi_SPIHandle)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	4a05      	ldr	r2, [pc, #20]	; (8002c08 <HAL_SPI_TxRxCpltCallback+0x20>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d102      	bne.n	8002bfe <HAL_SPI_TxRxCpltCallback+0x16>
  {
    HAL_SPI_TransferCallback(hspi);
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f006 fd49 	bl	8009690 <HAL_SPI_TransferCallback>
  }
}
 8002bfe:	bf00      	nop
 8002c00:	3708      	adds	r7, #8
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	20000c14 	.word	0x20000c14

08002c0c <NetWifiGetDefaultStation>:
{
  return NET_TICK();
}

void NetWifiGetDefaultStation(net_wifi_credentials_t *WifiCreds, const ap_t net_wifi_registred_hotspot[])
{
 8002c0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002c10:	b093      	sub	sp, #76	; 0x4c
 8002c12:	af08      	add	r7, sp, #32
 8002c14:	6178      	str	r0, [r7, #20]
 8002c16:	6139      	str	r1, [r7, #16]
  int32_t ret;

  ret = net_wifi_scan(0, NET_WIFI_SCAN_PASSIVE, NULL);
 8002c18:	2200      	movs	r2, #0
 8002c1a:	2100      	movs	r1, #0
 8002c1c:	2000      	movs	r0, #0
 8002c1e:	f00f fbab 	bl	8012378 <net_wifi_scan>
 8002c22:	6278      	str	r0, [r7, #36]	; 0x24

  if (ret == NET_OK)
 8002c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d105      	bne.n	8002c36 <NetWifiGetDefaultStation+0x2a>
  {
    ret = net_wifi_get_scan_results(0, APs, MAX_SCAN_AP);
 8002c2a:	2264      	movs	r2, #100	; 0x64
 8002c2c:	4967      	ldr	r1, [pc, #412]	; (8002dcc <NetWifiGetDefaultStation+0x1c0>)
 8002c2e:	2000      	movs	r0, #0
 8002c30:	f00f fc04 	bl	801243c <net_wifi_get_scan_results>
 8002c34:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (ret > 0)
 8002c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	f340 80c1 	ble.w	8002dc0 <NetWifiGetDefaultStation+0x1b4>
  {
    for (uint32_t i = 0; i < (uint32_t)ret; i++)
 8002c3e:	2300      	movs	r3, #0
 8002c40:	623b      	str	r3, [r7, #32]
 8002c42:	e0b8      	b.n	8002db6 <NetWifiGetDefaultStation+0x1aa>
    {
      for (uint32_t j = 0; net_wifi_registred_hotspot[j].ssid != 0 ; j++)
 8002c44:	2300      	movs	r3, #0
 8002c46:	61fb      	str	r3, [r7, #28]
 8002c48:	e0aa      	b.n	8002da0 <NetWifiGetDefaultStation+0x194>
      {
        if (strcmp((const char *)APs[i].ssid.value, net_wifi_registred_hotspot[j].ssid) == 0)
 8002c4a:	6a3b      	ldr	r3, [r7, #32]
 8002c4c:	2234      	movs	r2, #52	; 0x34
 8002c4e:	fb02 f303 	mul.w	r3, r2, r3
 8002c52:	4a5e      	ldr	r2, [pc, #376]	; (8002dcc <NetWifiGetDefaultStation+0x1c0>)
 8002c54:	4413      	add	r3, r2
 8002c56:	1c58      	adds	r0, r3, #1
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	00db      	lsls	r3, r3, #3
 8002c5c:	693a      	ldr	r2, [r7, #16]
 8002c5e:	4413      	add	r3, r2
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4619      	mov	r1, r3
 8002c64:	f7fd fb10 	bl	8000288 <strcmp>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	f040 8095 	bne.w	8002d9a <NetWifiGetDefaultStation+0x18e>
        {
          WifiCreds->ssid = net_wifi_registred_hotspot[j].ssid;
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	00db      	lsls	r3, r3, #3
 8002c74:	693a      	ldr	r2, [r7, #16]
 8002c76:	4413      	add	r3, r2
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	601a      	str	r2, [r3, #0]
          WifiCreds->psk = net_wifi_registred_hotspot[j].pwd;
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	00db      	lsls	r3, r3, #3
 8002c82:	693a      	ldr	r2, [r7, #16]
 8002c84:	4413      	add	r3, r2
 8002c86:	685a      	ldr	r2, [r3, #4]
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	605a      	str	r2, [r3, #4]
          WifiCreds->security_mode = APs[i].security;
 8002c8c:	4a4f      	ldr	r2, [pc, #316]	; (8002dcc <NetWifiGetDefaultStation+0x1c0>)
 8002c8e:	6a3b      	ldr	r3, [r7, #32]
 8002c90:	2134      	movs	r1, #52	; 0x34
 8002c92:	fb01 f303 	mul.w	r3, r1, r3
 8002c96:	4413      	add	r3, r2
 8002c98:	3328      	adds	r3, #40	; 0x28
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	609a      	str	r2, [r3, #8]
          printf("\r\n");
 8002ca2:	484b      	ldr	r0, [pc, #300]	; (8002dd0 <NetWifiGetDefaultStation+0x1c4>)
 8002ca4:	f013 feb4 	bl	8016a10 <puts>
          printf("\r\n");
 8002ca8:	4849      	ldr	r0, [pc, #292]	; (8002dd0 <NetWifiGetDefaultStation+0x1c4>)
 8002caa:	f013 feb1 	bl	8016a10 <puts>
          printf("Selected Access Point\t%32s ch %2d rss %d Security %10s country %4s bssid %02x.%02x.%02x.%02x.%02x.%02x\r\n",
                 APs[i].ssid.value, APs[i].channel, APs[i].rssi, net_wifi_security_to_string(APs[i].security), APs[i].country,
 8002cae:	6a3b      	ldr	r3, [r7, #32]
 8002cb0:	2234      	movs	r2, #52	; 0x34
 8002cb2:	fb02 f303 	mul.w	r3, r2, r3
 8002cb6:	4a45      	ldr	r2, [pc, #276]	; (8002dcc <NetWifiGetDefaultStation+0x1c0>)
 8002cb8:	4413      	add	r3, r2
 8002cba:	1c5c      	adds	r4, r3, #1
 8002cbc:	4a43      	ldr	r2, [pc, #268]	; (8002dcc <NetWifiGetDefaultStation+0x1c0>)
 8002cbe:	6a3b      	ldr	r3, [r7, #32]
 8002cc0:	2134      	movs	r1, #52	; 0x34
 8002cc2:	fb01 f303 	mul.w	r3, r1, r3
 8002cc6:	4413      	add	r3, r2
 8002cc8:	332c      	adds	r3, #44	; 0x2c
 8002cca:	781b      	ldrb	r3, [r3, #0]
          printf("Selected Access Point\t%32s ch %2d rss %d Security %10s country %4s bssid %02x.%02x.%02x.%02x.%02x.%02x\r\n",
 8002ccc:	4698      	mov	r8, r3
                 APs[i].ssid.value, APs[i].channel, APs[i].rssi, net_wifi_security_to_string(APs[i].security), APs[i].country,
 8002cce:	4a3f      	ldr	r2, [pc, #252]	; (8002dcc <NetWifiGetDefaultStation+0x1c0>)
 8002cd0:	6a3b      	ldr	r3, [r7, #32]
 8002cd2:	2134      	movs	r1, #52	; 0x34
 8002cd4:	fb01 f303 	mul.w	r3, r1, r3
 8002cd8:	4413      	add	r3, r2
 8002cda:	3331      	adds	r3, #49	; 0x31
 8002cdc:	f993 3000 	ldrsb.w	r3, [r3]
          printf("Selected Access Point\t%32s ch %2d rss %d Security %10s country %4s bssid %02x.%02x.%02x.%02x.%02x.%02x\r\n",
 8002ce0:	4699      	mov	r9, r3
 8002ce2:	4a3a      	ldr	r2, [pc, #232]	; (8002dcc <NetWifiGetDefaultStation+0x1c0>)
 8002ce4:	6a3b      	ldr	r3, [r7, #32]
 8002ce6:	2134      	movs	r1, #52	; 0x34
 8002ce8:	fb01 f303 	mul.w	r3, r1, r3
 8002cec:	4413      	add	r3, r2
 8002cee:	3328      	adds	r3, #40	; 0x28
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f00f fa68 	bl	80121c8 <net_wifi_security_to_string>
 8002cf8:	4601      	mov	r1, r0
                 APs[i].ssid.value, APs[i].channel, APs[i].rssi, net_wifi_security_to_string(APs[i].security), APs[i].country,
 8002cfa:	6a3b      	ldr	r3, [r7, #32]
 8002cfc:	2234      	movs	r2, #52	; 0x34
 8002cfe:	fb02 f303 	mul.w	r3, r2, r3
 8002d02:	3328      	adds	r3, #40	; 0x28
 8002d04:	4a31      	ldr	r2, [pc, #196]	; (8002dcc <NetWifiGetDefaultStation+0x1c0>)
 8002d06:	4413      	add	r3, r2
 8002d08:	3305      	adds	r3, #5
                 APs[i].bssid[0], APs[i].bssid[1], APs[i].bssid[2], APs[i].bssid[3], APs[i].bssid[4], APs[i].bssid[5]);
 8002d0a:	4830      	ldr	r0, [pc, #192]	; (8002dcc <NetWifiGetDefaultStation+0x1c0>)
 8002d0c:	6a3a      	ldr	r2, [r7, #32]
 8002d0e:	2534      	movs	r5, #52	; 0x34
 8002d10:	fb05 f202 	mul.w	r2, r5, r2
 8002d14:	4402      	add	r2, r0
 8002d16:	3221      	adds	r2, #33	; 0x21
 8002d18:	7812      	ldrb	r2, [r2, #0]
          printf("Selected Access Point\t%32s ch %2d rss %d Security %10s country %4s bssid %02x.%02x.%02x.%02x.%02x.%02x\r\n",
 8002d1a:	4616      	mov	r6, r2
                 APs[i].bssid[0], APs[i].bssid[1], APs[i].bssid[2], APs[i].bssid[3], APs[i].bssid[4], APs[i].bssid[5]);
 8002d1c:	482b      	ldr	r0, [pc, #172]	; (8002dcc <NetWifiGetDefaultStation+0x1c0>)
 8002d1e:	6a3a      	ldr	r2, [r7, #32]
 8002d20:	2534      	movs	r5, #52	; 0x34
 8002d22:	fb05 f202 	mul.w	r2, r5, r2
 8002d26:	4402      	add	r2, r0
 8002d28:	3222      	adds	r2, #34	; 0x22
 8002d2a:	7812      	ldrb	r2, [r2, #0]
          printf("Selected Access Point\t%32s ch %2d rss %d Security %10s country %4s bssid %02x.%02x.%02x.%02x.%02x.%02x\r\n",
 8002d2c:	60fa      	str	r2, [r7, #12]
                 APs[i].bssid[0], APs[i].bssid[1], APs[i].bssid[2], APs[i].bssid[3], APs[i].bssid[4], APs[i].bssid[5]);
 8002d2e:	4827      	ldr	r0, [pc, #156]	; (8002dcc <NetWifiGetDefaultStation+0x1c0>)
 8002d30:	6a3a      	ldr	r2, [r7, #32]
 8002d32:	2534      	movs	r5, #52	; 0x34
 8002d34:	fb05 f202 	mul.w	r2, r5, r2
 8002d38:	4402      	add	r2, r0
 8002d3a:	3223      	adds	r2, #35	; 0x23
 8002d3c:	7812      	ldrb	r2, [r2, #0]
          printf("Selected Access Point\t%32s ch %2d rss %d Security %10s country %4s bssid %02x.%02x.%02x.%02x.%02x.%02x\r\n",
 8002d3e:	60ba      	str	r2, [r7, #8]
                 APs[i].bssid[0], APs[i].bssid[1], APs[i].bssid[2], APs[i].bssid[3], APs[i].bssid[4], APs[i].bssid[5]);
 8002d40:	4822      	ldr	r0, [pc, #136]	; (8002dcc <NetWifiGetDefaultStation+0x1c0>)
 8002d42:	6a3a      	ldr	r2, [r7, #32]
 8002d44:	2534      	movs	r5, #52	; 0x34
 8002d46:	fb05 f202 	mul.w	r2, r5, r2
 8002d4a:	4402      	add	r2, r0
 8002d4c:	3224      	adds	r2, #36	; 0x24
 8002d4e:	7812      	ldrb	r2, [r2, #0]
          printf("Selected Access Point\t%32s ch %2d rss %d Security %10s country %4s bssid %02x.%02x.%02x.%02x.%02x.%02x\r\n",
 8002d50:	607a      	str	r2, [r7, #4]
                 APs[i].bssid[0], APs[i].bssid[1], APs[i].bssid[2], APs[i].bssid[3], APs[i].bssid[4], APs[i].bssid[5]);
 8002d52:	481e      	ldr	r0, [pc, #120]	; (8002dcc <NetWifiGetDefaultStation+0x1c0>)
 8002d54:	6a3a      	ldr	r2, [r7, #32]
 8002d56:	2534      	movs	r5, #52	; 0x34
 8002d58:	fb05 f202 	mul.w	r2, r5, r2
 8002d5c:	4402      	add	r2, r0
 8002d5e:	3225      	adds	r2, #37	; 0x25
 8002d60:	7812      	ldrb	r2, [r2, #0]
          printf("Selected Access Point\t%32s ch %2d rss %d Security %10s country %4s bssid %02x.%02x.%02x.%02x.%02x.%02x\r\n",
 8002d62:	603a      	str	r2, [r7, #0]
                 APs[i].bssid[0], APs[i].bssid[1], APs[i].bssid[2], APs[i].bssid[3], APs[i].bssid[4], APs[i].bssid[5]);
 8002d64:	4819      	ldr	r0, [pc, #100]	; (8002dcc <NetWifiGetDefaultStation+0x1c0>)
 8002d66:	6a3a      	ldr	r2, [r7, #32]
 8002d68:	2534      	movs	r5, #52	; 0x34
 8002d6a:	fb05 f202 	mul.w	r2, r5, r2
 8002d6e:	4402      	add	r2, r0
 8002d70:	3226      	adds	r2, #38	; 0x26
 8002d72:	7812      	ldrb	r2, [r2, #0]
          printf("Selected Access Point\t%32s ch %2d rss %d Security %10s country %4s bssid %02x.%02x.%02x.%02x.%02x.%02x\r\n",
 8002d74:	9207      	str	r2, [sp, #28]
 8002d76:	6838      	ldr	r0, [r7, #0]
 8002d78:	9006      	str	r0, [sp, #24]
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	9005      	str	r0, [sp, #20]
 8002d7e:	68b8      	ldr	r0, [r7, #8]
 8002d80:	9004      	str	r0, [sp, #16]
 8002d82:	68fa      	ldr	r2, [r7, #12]
 8002d84:	9203      	str	r2, [sp, #12]
 8002d86:	9602      	str	r6, [sp, #8]
 8002d88:	9301      	str	r3, [sp, #4]
 8002d8a:	9100      	str	r1, [sp, #0]
 8002d8c:	464b      	mov	r3, r9
 8002d8e:	4642      	mov	r2, r8
 8002d90:	4621      	mov	r1, r4
 8002d92:	4810      	ldr	r0, [pc, #64]	; (8002dd4 <NetWifiGetDefaultStation+0x1c8>)
 8002d94:	f013 fdce 	bl	8016934 <iprintf>
          return;
 8002d98:	e013      	b.n	8002dc2 <NetWifiGetDefaultStation+0x1b6>
      for (uint32_t j = 0; net_wifi_registred_hotspot[j].ssid != 0 ; j++)
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	3301      	adds	r3, #1
 8002d9e:	61fb      	str	r3, [r7, #28]
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	00db      	lsls	r3, r3, #3
 8002da4:	693a      	ldr	r2, [r7, #16]
 8002da6:	4413      	add	r3, r2
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	f47f af4d 	bne.w	8002c4a <NetWifiGetDefaultStation+0x3e>
    for (uint32_t i = 0; i < (uint32_t)ret; i++)
 8002db0:	6a3b      	ldr	r3, [r7, #32]
 8002db2:	3301      	adds	r3, #1
 8002db4:	623b      	str	r3, [r7, #32]
 8002db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db8:	6a3a      	ldr	r2, [r7, #32]
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	f4ff af42 	bcc.w	8002c44 <NetWifiGetDefaultStation+0x38>
        }
      }
    }
  }
  return;
 8002dc0:	bf00      	nop
}
 8002dc2:	372c      	adds	r7, #44	; 0x2c
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002dca:	bf00      	nop
 8002dcc:	20000cb4 	.word	0x20000cb4
 8002dd0:	0801a3cc 	.word	0x0801a3cc
 8002dd4:	0801a3d0 	.word	0x0801a3d0

08002dd8 <scan_cmd>:

int32_t scan_cmd(int32_t argc, char **argv)
{
 8002dd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ddc:	b094      	sub	sp, #80	; 0x50
 8002dde:	af0a      	add	r7, sp, #40	; 0x28
 8002de0:	61f8      	str	r0, [r7, #28]
 8002de2:	61b9      	str	r1, [r7, #24]
  int32_t ret;
  ((void)argc);
  ((void)argv);

  ret = net_wifi_scan(0, NET_WIFI_SCAN_PASSIVE, NULL);
 8002de4:	2200      	movs	r2, #0
 8002de6:	2100      	movs	r1, #0
 8002de8:	2000      	movs	r0, #0
 8002dea:	f00f fac5 	bl	8012378 <net_wifi_scan>
 8002dee:	6278      	str	r0, [r7, #36]	; 0x24

  if (ret == NET_OK)
 8002df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d105      	bne.n	8002e02 <scan_cmd+0x2a>
  {
    ret = net_wifi_get_scan_results(0, APs, MAX_SCAN_AP);
 8002df6:	2264      	movs	r2, #100	; 0x64
 8002df8:	4950      	ldr	r1, [pc, #320]	; (8002f3c <scan_cmd+0x164>)
 8002dfa:	2000      	movs	r0, #0
 8002dfc:	f00f fb1e 	bl	801243c <net_wifi_get_scan_results>
 8002e00:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (ret > 0)
 8002e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	f340 8093 	ble.w	8002f30 <scan_cmd+0x158>
  {
    printf("\r\n");
 8002e0a:	484d      	ldr	r0, [pc, #308]	; (8002f40 <scan_cmd+0x168>)
 8002e0c:	f013 fe00 	bl	8016a10 <puts>
    printf("*** Start wifi scan \r\n");
 8002e10:	484c      	ldr	r0, [pc, #304]	; (8002f44 <scan_cmd+0x16c>)
 8002e12:	f013 fdfd 	bl	8016a10 <puts>
    printf("\r\n");
 8002e16:	484a      	ldr	r0, [pc, #296]	; (8002f40 <scan_cmd+0x168>)
 8002e18:	f013 fdfa 	bl	8016a10 <puts>
    for (int i = 0; i < ret; i++)
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	623b      	str	r3, [r7, #32]
 8002e20:	e079      	b.n	8002f16 <scan_cmd+0x13e>
    {
      printf("\t%d\t%32s ch %2d rss %d Security %10s country %4s bssid %02x.%02x.%02x.%02x.%02x.%02x\r\n",
             i, APs[i].ssid.value, APs[i].channel, APs[i].rssi, net_wifi_security_to_string(APs[i].security), APs[i].country,
 8002e22:	6a3b      	ldr	r3, [r7, #32]
 8002e24:	2234      	movs	r2, #52	; 0x34
 8002e26:	fb02 f303 	mul.w	r3, r2, r3
 8002e2a:	4a44      	ldr	r2, [pc, #272]	; (8002f3c <scan_cmd+0x164>)
 8002e2c:	4413      	add	r3, r2
 8002e2e:	1c5c      	adds	r4, r3, #1
 8002e30:	4a42      	ldr	r2, [pc, #264]	; (8002f3c <scan_cmd+0x164>)
 8002e32:	6a3b      	ldr	r3, [r7, #32]
 8002e34:	2134      	movs	r1, #52	; 0x34
 8002e36:	fb01 f303 	mul.w	r3, r1, r3
 8002e3a:	4413      	add	r3, r2
 8002e3c:	332c      	adds	r3, #44	; 0x2c
 8002e3e:	781b      	ldrb	r3, [r3, #0]
      printf("\t%d\t%32s ch %2d rss %d Security %10s country %4s bssid %02x.%02x.%02x.%02x.%02x.%02x\r\n",
 8002e40:	4698      	mov	r8, r3
             i, APs[i].ssid.value, APs[i].channel, APs[i].rssi, net_wifi_security_to_string(APs[i].security), APs[i].country,
 8002e42:	4a3e      	ldr	r2, [pc, #248]	; (8002f3c <scan_cmd+0x164>)
 8002e44:	6a3b      	ldr	r3, [r7, #32]
 8002e46:	2134      	movs	r1, #52	; 0x34
 8002e48:	fb01 f303 	mul.w	r3, r1, r3
 8002e4c:	4413      	add	r3, r2
 8002e4e:	3331      	adds	r3, #49	; 0x31
 8002e50:	f993 3000 	ldrsb.w	r3, [r3]
      printf("\t%d\t%32s ch %2d rss %d Security %10s country %4s bssid %02x.%02x.%02x.%02x.%02x.%02x\r\n",
 8002e54:	461e      	mov	r6, r3
 8002e56:	4a39      	ldr	r2, [pc, #228]	; (8002f3c <scan_cmd+0x164>)
 8002e58:	6a3b      	ldr	r3, [r7, #32]
 8002e5a:	2134      	movs	r1, #52	; 0x34
 8002e5c:	fb01 f303 	mul.w	r3, r1, r3
 8002e60:	4413      	add	r3, r2
 8002e62:	3328      	adds	r3, #40	; 0x28
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4618      	mov	r0, r3
 8002e68:	f00f f9ae 	bl	80121c8 <net_wifi_security_to_string>
 8002e6c:	4601      	mov	r1, r0
             i, APs[i].ssid.value, APs[i].channel, APs[i].rssi, net_wifi_security_to_string(APs[i].security), APs[i].country,
 8002e6e:	6a3b      	ldr	r3, [r7, #32]
 8002e70:	2234      	movs	r2, #52	; 0x34
 8002e72:	fb02 f303 	mul.w	r3, r2, r3
 8002e76:	3328      	adds	r3, #40	; 0x28
 8002e78:	4a30      	ldr	r2, [pc, #192]	; (8002f3c <scan_cmd+0x164>)
 8002e7a:	4413      	add	r3, r2
 8002e7c:	3305      	adds	r3, #5
             APs[i].bssid[0], APs[i].bssid[1], APs[i].bssid[2], APs[i].bssid[3], APs[i].bssid[4], APs[i].bssid[5]);
 8002e7e:	482f      	ldr	r0, [pc, #188]	; (8002f3c <scan_cmd+0x164>)
 8002e80:	6a3a      	ldr	r2, [r7, #32]
 8002e82:	2534      	movs	r5, #52	; 0x34
 8002e84:	fb05 f202 	mul.w	r2, r5, r2
 8002e88:	4402      	add	r2, r0
 8002e8a:	3221      	adds	r2, #33	; 0x21
 8002e8c:	7812      	ldrb	r2, [r2, #0]
      printf("\t%d\t%32s ch %2d rss %d Security %10s country %4s bssid %02x.%02x.%02x.%02x.%02x.%02x\r\n",
 8002e8e:	617a      	str	r2, [r7, #20]
             APs[i].bssid[0], APs[i].bssid[1], APs[i].bssid[2], APs[i].bssid[3], APs[i].bssid[4], APs[i].bssid[5]);
 8002e90:	482a      	ldr	r0, [pc, #168]	; (8002f3c <scan_cmd+0x164>)
 8002e92:	6a3a      	ldr	r2, [r7, #32]
 8002e94:	2534      	movs	r5, #52	; 0x34
 8002e96:	fb05 f202 	mul.w	r2, r5, r2
 8002e9a:	4402      	add	r2, r0
 8002e9c:	3222      	adds	r2, #34	; 0x22
 8002e9e:	7812      	ldrb	r2, [r2, #0]
      printf("\t%d\t%32s ch %2d rss %d Security %10s country %4s bssid %02x.%02x.%02x.%02x.%02x.%02x\r\n",
 8002ea0:	613a      	str	r2, [r7, #16]
             APs[i].bssid[0], APs[i].bssid[1], APs[i].bssid[2], APs[i].bssid[3], APs[i].bssid[4], APs[i].bssid[5]);
 8002ea2:	4826      	ldr	r0, [pc, #152]	; (8002f3c <scan_cmd+0x164>)
 8002ea4:	6a3a      	ldr	r2, [r7, #32]
 8002ea6:	2534      	movs	r5, #52	; 0x34
 8002ea8:	fb05 f202 	mul.w	r2, r5, r2
 8002eac:	4402      	add	r2, r0
 8002eae:	3223      	adds	r2, #35	; 0x23
 8002eb0:	7812      	ldrb	r2, [r2, #0]
      printf("\t%d\t%32s ch %2d rss %d Security %10s country %4s bssid %02x.%02x.%02x.%02x.%02x.%02x\r\n",
 8002eb2:	60fa      	str	r2, [r7, #12]
             APs[i].bssid[0], APs[i].bssid[1], APs[i].bssid[2], APs[i].bssid[3], APs[i].bssid[4], APs[i].bssid[5]);
 8002eb4:	4821      	ldr	r0, [pc, #132]	; (8002f3c <scan_cmd+0x164>)
 8002eb6:	6a3a      	ldr	r2, [r7, #32]
 8002eb8:	2534      	movs	r5, #52	; 0x34
 8002eba:	fb05 f202 	mul.w	r2, r5, r2
 8002ebe:	4402      	add	r2, r0
 8002ec0:	3224      	adds	r2, #36	; 0x24
 8002ec2:	7812      	ldrb	r2, [r2, #0]
      printf("\t%d\t%32s ch %2d rss %d Security %10s country %4s bssid %02x.%02x.%02x.%02x.%02x.%02x\r\n",
 8002ec4:	60ba      	str	r2, [r7, #8]
             APs[i].bssid[0], APs[i].bssid[1], APs[i].bssid[2], APs[i].bssid[3], APs[i].bssid[4], APs[i].bssid[5]);
 8002ec6:	481d      	ldr	r0, [pc, #116]	; (8002f3c <scan_cmd+0x164>)
 8002ec8:	6a3a      	ldr	r2, [r7, #32]
 8002eca:	2534      	movs	r5, #52	; 0x34
 8002ecc:	fb05 f202 	mul.w	r2, r5, r2
 8002ed0:	4402      	add	r2, r0
 8002ed2:	3225      	adds	r2, #37	; 0x25
 8002ed4:	7812      	ldrb	r2, [r2, #0]
      printf("\t%d\t%32s ch %2d rss %d Security %10s country %4s bssid %02x.%02x.%02x.%02x.%02x.%02x\r\n",
 8002ed6:	607a      	str	r2, [r7, #4]
             APs[i].bssid[0], APs[i].bssid[1], APs[i].bssid[2], APs[i].bssid[3], APs[i].bssid[4], APs[i].bssid[5]);
 8002ed8:	4818      	ldr	r0, [pc, #96]	; (8002f3c <scan_cmd+0x164>)
 8002eda:	6a3a      	ldr	r2, [r7, #32]
 8002edc:	2534      	movs	r5, #52	; 0x34
 8002ede:	fb05 f202 	mul.w	r2, r5, r2
 8002ee2:	4402      	add	r2, r0
 8002ee4:	3226      	adds	r2, #38	; 0x26
 8002ee6:	7812      	ldrb	r2, [r2, #0]
      printf("\t%d\t%32s ch %2d rss %d Security %10s country %4s bssid %02x.%02x.%02x.%02x.%02x.%02x\r\n",
 8002ee8:	9208      	str	r2, [sp, #32]
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	9007      	str	r0, [sp, #28]
 8002eee:	68b8      	ldr	r0, [r7, #8]
 8002ef0:	9006      	str	r0, [sp, #24]
 8002ef2:	68f8      	ldr	r0, [r7, #12]
 8002ef4:	9005      	str	r0, [sp, #20]
 8002ef6:	6938      	ldr	r0, [r7, #16]
 8002ef8:	9004      	str	r0, [sp, #16]
 8002efa:	697a      	ldr	r2, [r7, #20]
 8002efc:	9203      	str	r2, [sp, #12]
 8002efe:	9302      	str	r3, [sp, #8]
 8002f00:	9101      	str	r1, [sp, #4]
 8002f02:	9600      	str	r6, [sp, #0]
 8002f04:	4643      	mov	r3, r8
 8002f06:	4622      	mov	r2, r4
 8002f08:	6a39      	ldr	r1, [r7, #32]
 8002f0a:	480f      	ldr	r0, [pc, #60]	; (8002f48 <scan_cmd+0x170>)
 8002f0c:	f013 fd12 	bl	8016934 <iprintf>
    for (int i = 0; i < ret; i++)
 8002f10:	6a3b      	ldr	r3, [r7, #32]
 8002f12:	3301      	adds	r3, #1
 8002f14:	623b      	str	r3, [r7, #32]
 8002f16:	6a3a      	ldr	r2, [r7, #32]
 8002f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	db81      	blt.n	8002e22 <scan_cmd+0x4a>
    }
    printf("\r\n");
 8002f1e:	4808      	ldr	r0, [pc, #32]	; (8002f40 <scan_cmd+0x168>)
 8002f20:	f013 fd76 	bl	8016a10 <puts>
    printf("*** End of wifi scan \r\n");
 8002f24:	4809      	ldr	r0, [pc, #36]	; (8002f4c <scan_cmd+0x174>)
 8002f26:	f013 fd73 	bl	8016a10 <puts>
    printf("\r\n");
 8002f2a:	4805      	ldr	r0, [pc, #20]	; (8002f40 <scan_cmd+0x168>)
 8002f2c:	f013 fd70 	bl	8016a10 <puts>
  }

  return 0;
 8002f30:	2300      	movs	r3, #0
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3728      	adds	r7, #40	; 0x28
 8002f36:	46bd      	mov	sp, r7
 8002f38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002f3c:	20000cb4 	.word	0x20000cb4
 8002f40:	0801a3cc 	.word	0x0801a3cc
 8002f44:	0801a43c 	.word	0x0801a43c
 8002f48:	0801a454 	.word	0x0801a454
 8002f4c:	0801a4ac 	.word	0x0801a4ac

08002f50 <NetInterfaceOn>:

net_if_handle_t *NetInterfaceOn(net_if_driver_init_func registred_driver, net_if_notify_func hnet_notify)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b086      	sub	sp, #24
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	6039      	str	r1, [r7, #0]
  net_if_handle_t *netif;
  net_event_handler_t *net_handler;
  int32_t ret = NET_ERROR_PARAMETER;
 8002f5a:	f06f 0303 	mvn.w	r3, #3
 8002f5e:	617b      	str	r3, [r7, #20]

  netif = NET_MALLOC(sizeof(net_if_handle_t));
 8002f60:	20f8      	movs	r0, #248	; 0xf8
 8002f62:	f011 ff4d 	bl	8014e00 <malloc>
 8002f66:	4603      	mov	r3, r0
 8002f68:	613b      	str	r3, [r7, #16]

  if (netif == NULL)
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d102      	bne.n	8002f76 <NetInterfaceOn+0x26>
  {
    printf("Unable to allocate network interface\r\n");
 8002f70:	4818      	ldr	r0, [pc, #96]	; (8002fd4 <NetInterfaceOn+0x84>)
 8002f72:	f013 fd4d 	bl	8016a10 <puts>
  }
  memset(netif, 0, sizeof(*netif));
 8002f76:	22f8      	movs	r2, #248	; 0xf8
 8002f78:	2100      	movs	r1, #0
 8002f7a:	6938      	ldr	r0, [r7, #16]
 8002f7c:	f013 fdae 	bl	8016adc <memset>

  net_handler = NET_MALLOC(sizeof(*net_handler));
 8002f80:	2008      	movs	r0, #8
 8002f82:	f011 ff3d 	bl	8014e00 <malloc>
 8002f86:	4603      	mov	r3, r0
 8002f88:	60fb      	str	r3, [r7, #12]
  if (net_handler == NULL)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d102      	bne.n	8002f96 <NetInterfaceOn+0x46>
  {
    printf("Unable to allocate net_handler\r\n");
 8002f90:	4811      	ldr	r0, [pc, #68]	; (8002fd8 <NetInterfaceOn+0x88>)
 8002f92:	f013 fd3d 	bl	8016a10 <puts>
  }

  net_handler->callback = hnet_notify;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	683a      	ldr	r2, [r7, #0]
 8002f9a:	601a      	str	r2, [r3, #0]
  net_handler->context = netif;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	693a      	ldr	r2, [r7, #16]
 8002fa0:	605a      	str	r2, [r3, #4]

  /* Initialize the network stack. */
  ret = net_if_init(netif, registred_driver, net_handler);
 8002fa2:	68fa      	ldr	r2, [r7, #12]
 8002fa4:	6879      	ldr	r1, [r7, #4]
 8002fa6:	6938      	ldr	r0, [r7, #16]
 8002fa8:	f00f fbea 	bl	8012780 <net_if_init>
 8002fac:	6178      	str	r0, [r7, #20]

  if (NET_OK == ret)
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d107      	bne.n	8002fc4 <NetInterfaceOn+0x74>
  {
    ret = net_if_wait_state(netif, NET_STATE_INITIALIZED, NET_STATE_TRANSITION_TIMEOUT);
 8002fb4:	f64e 2260 	movw	r2, #60000	; 0xea60
 8002fb8:	2101      	movs	r1, #1
 8002fba:	6938      	ldr	r0, [r7, #16]
 8002fbc:	f00f fb88 	bl	80126d0 <net_if_wait_state>
 8002fc0:	6178      	str	r0, [r7, #20]
 8002fc2:	e002      	b.n	8002fca <NetInterfaceOn+0x7a>
  }
  else

  {
    printf("Network interface initialization failed\r\n");
 8002fc4:	4805      	ldr	r0, [pc, #20]	; (8002fdc <NetInterfaceOn+0x8c>)
 8002fc6:	f013 fd23 	bl	8016a10 <puts>
  }
  return netif;
 8002fca:	693b      	ldr	r3, [r7, #16]
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3718      	adds	r7, #24
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	0801a4c4 	.word	0x0801a4c4
 8002fd8:	0801a4ec 	.word	0x0801a4ec
 8002fdc:	0801a50c 	.word	0x0801a50c

08002fe0 <NetInterfaceConnect>:
  }
  return;
}

void NetInterfaceConnect(net_if_handle_t *netif, bool dhcp_mode, void *credential, net_wifi_mode_t mode)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b08a      	sub	sp, #40	; 0x28
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	60f8      	str	r0, [r7, #12]
 8002fe8:	607a      	str	r2, [r7, #4]
 8002fea:	461a      	mov	r2, r3
 8002fec:	460b      	mov	r3, r1
 8002fee:	72fb      	strb	r3, [r7, #11]
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	72bb      	strb	r3, [r7, #10]
  int32_t ret = NET_ERROR_GENERIC;
 8002ff4:	f06f 031c 	mvn.w	r3, #28
 8002ff8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set credentials for WiFi modules. */
  if (NET_INTERFACE_IS_WIFI(netif))
 8002ffa:	68f8      	ldr	r0, [r7, #12]
 8002ffc:	f00f f8d5 	bl	80121aa <net_wifi_get_class>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d137      	bne.n	8003076 <NetInterfaceConnect+0x96>
  {
    net_wifi_credentials_t *wifi_credential = (net_wifi_credentials_t *) credential;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	623b      	str	r3, [r7, #32]
    if (wifi_credential->psk == NULL)
 800300a:	6a3b      	ldr	r3, [r7, #32]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d102      	bne.n	8003018 <NetInterfaceConnect+0x38>
    {
      wifi_credential->security_mode = NET_WIFI_SM_OPEN;
 8003012:	6a3b      	ldr	r3, [r7, #32]
 8003014:	2200      	movs	r2, #0
 8003016:	609a      	str	r2, [r3, #8]
    }
    if (NET_WIFI_MODE_AP == mode)
 8003018:	7abb      	ldrb	r3, [r7, #10]
 800301a:	2b01      	cmp	r3, #1
 800301c:	d10a      	bne.n	8003034 <NetInterfaceConnect+0x54>
    {
      dhcp_mode = false;
 800301e:	2300      	movs	r3, #0
 8003020:	72fb      	strb	r3, [r7, #11]
      wifi_credential->ssid = "MyHotSpot";
 8003022:	6a3b      	ldr	r3, [r7, #32]
 8003024:	4a3c      	ldr	r2, [pc, #240]	; (8003118 <NetInterfaceConnect+0x138>)
 8003026:	601a      	str	r2, [r3, #0]
      wifi_credential->psk = " ";
 8003028:	6a3b      	ldr	r3, [r7, #32]
 800302a:	4a3c      	ldr	r2, [pc, #240]	; (800311c <NetInterfaceConnect+0x13c>)
 800302c:	605a      	str	r2, [r3, #4]
      wifi_credential->security_mode = NET_WIFI_SM_OPEN;
 800302e:	6a3b      	ldr	r3, [r7, #32]
 8003030:	2200      	movs	r2, #0
 8003032:	609a      	str	r2, [r3, #8]
    }

    net_wifi_set_credentials(netif, wifi_credential);
 8003034:	6a39      	ldr	r1, [r7, #32]
 8003036:	68f8      	ldr	r0, [r7, #12]
 8003038:	f00f fa50 	bl	80124dc <net_wifi_set_credentials>
    net_wifi_set_access_mode(netif, mode);
 800303c:	7abb      	ldrb	r3, [r7, #10]
 800303e:	4619      	mov	r1, r3
 8003040:	68f8      	ldr	r0, [r7, #12]
 8003042:	f00f fa5d 	bl	8012500 <net_wifi_set_access_mode>
    net_wifi_set_access_channel(netif, 8u);
 8003046:	2108      	movs	r1, #8
 8003048:	68f8      	ldr	r0, [r7, #12]
 800304a:	f00f fa6c 	bl	8012526 <net_wifi_set_access_channel>
    net_wifi_set_ap_max_connections(netif, 4u);
 800304e:	2104      	movs	r1, #4
 8003050:	68f8      	ldr	r0, [r7, #12]
 8003052:	f00f fa7b 	bl	801254c <net_wifi_set_ap_max_connections>
    NET_DBG_PRINT("main ... %p %p \"%s\"\r\n", wifi_credential, wifi_credential->ssid, wifi_credential->ssid);
 8003056:	22bf      	movs	r2, #191	; 0xbf
 8003058:	4931      	ldr	r1, [pc, #196]	; (8003120 <NetInterfaceConnect+0x140>)
 800305a:	4832      	ldr	r0, [pc, #200]	; (8003124 <NetInterfaceConnect+0x144>)
 800305c:	f013 fc6a 	bl	8016934 <iprintf>
 8003060:	6a3b      	ldr	r3, [r7, #32]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	6a3b      	ldr	r3, [r7, #32]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	6a39      	ldr	r1, [r7, #32]
 800306a:	482f      	ldr	r0, [pc, #188]	; (8003128 <NetInterfaceConnect+0x148>)
 800306c:	f013 fc62 	bl	8016934 <iprintf>
 8003070:	200a      	movs	r0, #10
 8003072:	f013 fc71 	bl	8016958 <putchar>
  }


  ret = net_if_start(netif);
 8003076:	68f8      	ldr	r0, [r7, #12]
 8003078:	f00f fbd0 	bl	801281c <net_if_start>
 800307c:	6278      	str	r0, [r7, #36]	; 0x24
  if (NET_OK == ret)
 800307e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003080:	2b00      	cmp	r3, #0
 8003082:	d13c      	bne.n	80030fe <NetInterfaceConnect+0x11e>
  {
    ret = net_if_wait_state(netif, NET_STATE_READY, NET_STATE_TRANSITION_TIMEOUT);
 8003084:	f64e 2260 	movw	r2, #60000	; 0xea60
 8003088:	2103      	movs	r1, #3
 800308a:	68f8      	ldr	r0, [r7, #12]
 800308c:	f00f fb20 	bl	80126d0 <net_if_wait_state>
 8003090:	6278      	str	r0, [r7, #36]	; 0x24
    if (NET_OK == ret)
 8003092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003094:	2b00      	cmp	r3, #0
 8003096:	d129      	bne.n	80030ec <NetInterfaceConnect+0x10c>
    {
      if (dhcp_mode)
 8003098:	7afb      	ldrb	r3, [r7, #11]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d004      	beq.n	80030a8 <NetInterfaceConnect+0xc8>
      {
        net_if_set_dhcp_mode(netif, true);
 800309e:	2101      	movs	r1, #1
 80030a0:	68f8      	ldr	r0, [r7, #12]
 80030a2:	f00f fc4f 	bl	8012944 <net_if_set_dhcp_mode>
 80030a6:	e013      	b.n	80030d0 <NetInterfaceConnect+0xf0>
      }
      else
      {
        net_ip_addr_t ip = NET_IPADDR4_INIT_BYTES(192, 168, 1, 1);
 80030a8:	4b20      	ldr	r3, [pc, #128]	; (800312c <NetInterfaceConnect+0x14c>)
 80030aa:	61fb      	str	r3, [r7, #28]
        net_ip_addr_t gw = NET_IPADDR4_INIT_BYTES(192, 168, 1, 1);
 80030ac:	4b1f      	ldr	r3, [pc, #124]	; (800312c <NetInterfaceConnect+0x14c>)
 80030ae:	61bb      	str	r3, [r7, #24]
        net_ip_addr_t msk = NET_IPADDR4_INIT_BYTES(255, 255, 254, 0);
 80030b0:	4b1f      	ldr	r3, [pc, #124]	; (8003130 <NetInterfaceConnect+0x150>)
 80030b2:	617b      	str	r3, [r7, #20]
        net_if_set_dhcp_mode(netif, false);
 80030b4:	2100      	movs	r1, #0
 80030b6:	68f8      	ldr	r0, [r7, #12]
 80030b8:	f00f fc44 	bl	8012944 <net_if_set_dhcp_mode>
        net_if_set_dhcp_server_mode(netif, true);
 80030bc:	2101      	movs	r1, #1
 80030be:	68f8      	ldr	r0, [r7, #12]
 80030c0:	f00f fc5b 	bl	801297a <net_if_set_dhcp_server_mode>
        net_if_set_ipaddr(netif, ip, gw, msk);
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	69ba      	ldr	r2, [r7, #24]
 80030c8:	69f9      	ldr	r1, [r7, #28]
 80030ca:	68f8      	ldr	r0, [r7, #12]
 80030cc:	f00f fc70 	bl	80129b0 <net_if_set_ipaddr>
      }

      ret = net_if_connect(netif);
 80030d0:	68f8      	ldr	r0, [r7, #12]
 80030d2:	f00f fbb0 	bl	8012836 <net_if_connect>
 80030d6:	6278      	str	r0, [r7, #36]	; 0x24
      if (NET_OK == ret)
 80030d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d106      	bne.n	80030ec <NetInterfaceConnect+0x10c>
      {
        ret = net_if_wait_state(netif, NET_STATE_CONNECTED, NET_STATE_TRANSITION_TIMEOUT);
 80030de:	f64e 2260 	movw	r2, #60000	; 0xea60
 80030e2:	2105      	movs	r1, #5
 80030e4:	68f8      	ldr	r0, [r7, #12]
 80030e6:	f00f faf3 	bl	80126d0 <net_if_wait_state>
 80030ea:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }
    if (NET_OK != ret)
 80030ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d005      	beq.n	80030fe <NetInterfaceConnect+0x11e>
    {
      printf("ERROR: Cannot connect WiFi interface!\r\n");
 80030f2:	4810      	ldr	r0, [pc, #64]	; (8003134 <NetInterfaceConnect+0x154>)
 80030f4:	f013 fc8c 	bl	8016a10 <puts>
      printf("  If not done, Please set your connection parameter in main_app.c (net_wifi_net_wifi_registred_hotspot)!\r\n");
 80030f8:	480f      	ldr	r0, [pc, #60]	; (8003138 <NetInterfaceConnect+0x158>)
 80030fa:	f013 fc89 	bl	8016a10 <puts>
    }
  }
  if (NET_OK != ret)
 80030fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003100:	2b00      	cmp	r3, #0
 8003102:	d005      	beq.n	8003110 <NetInterfaceConnect+0x130>
  {
    printf("ERROR: Cannot connect interface !\r\n");
 8003104:	480d      	ldr	r0, [pc, #52]	; (800313c <NetInterfaceConnect+0x15c>)
 8003106:	f013 fc83 	bl	8016a10 <puts>
    printf("  If not done, Please set your connection parameter in main_app.c (net_wifi_net_wifi_registred_hotspot)!\r\n");
 800310a:	480b      	ldr	r0, [pc, #44]	; (8003138 <NetInterfaceConnect+0x158>)
 800310c:	f013 fc80 	bl	8016a10 <puts>
  }
}
 8003110:	bf00      	nop
 8003112:	3728      	adds	r7, #40	; 0x28
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	0801a56c 	.word	0x0801a56c
 800311c:	0801a578 	.word	0x0801a578
 8003120:	0801a57c 	.word	0x0801a57c
 8003124:	0801a604 	.word	0x0801a604
 8003128:	0801a60c 	.word	0x0801a60c
 800312c:	0101a8c0 	.word	0x0101a8c0
 8003130:	00feffff 	.word	0x00feffff
 8003134:	0801a624 	.word	0x0801a624
 8003138:	0801a64c 	.word	0x0801a64c
 800313c:	0801a6b8 	.word	0x0801a6b8

08003140 <BSP_LED_Init>:
  *            @arg  LED6
  *            @arg  LED7
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b08a      	sub	sp, #40	; 0x28
 8003144:	af00      	add	r7, sp, #0
 8003146:	4603      	mov	r3, r0
 8003148:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800314a:	2300      	movs	r3, #0
 800314c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO_LED clock */
  LED6_GPIO_CLK_ENABLE();
 800314e:	4b22      	ldr	r3, [pc, #136]	; (80031d8 <BSP_LED_Init+0x98>)
 8003150:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003154:	4a20      	ldr	r2, [pc, #128]	; (80031d8 <BSP_LED_Init+0x98>)
 8003156:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800315a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800315e:	4b1e      	ldr	r3, [pc, #120]	; (80031d8 <BSP_LED_Init+0x98>)
 8003160:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003164:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003168:	60fb      	str	r3, [r7, #12]
 800316a:	68fb      	ldr	r3, [r7, #12]
  LED7_GPIO_CLK_ENABLE();
 800316c:	4b1a      	ldr	r3, [pc, #104]	; (80031d8 <BSP_LED_Init+0x98>)
 800316e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003172:	4a19      	ldr	r2, [pc, #100]	; (80031d8 <BSP_LED_Init+0x98>)
 8003174:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003178:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800317c:	4b16      	ldr	r3, [pc, #88]	; (80031d8 <BSP_LED_Init+0x98>)
 800317e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003182:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003186:	60bb      	str	r3, [r7, #8]
 8003188:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 800318a:	2301      	movs	r3, #1
 800318c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Pull = GPIO_NOPULL;
 800318e:	2300      	movs	r3, #0
 8003190:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8003192:	2302      	movs	r3, #2
 8003194:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Pin = LED_PIN [Led];
 8003196:	79fb      	ldrb	r3, [r7, #7]
 8003198:	4a10      	ldr	r2, [pc, #64]	; (80031dc <BSP_LED_Init+0x9c>)
 800319a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800319e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 80031a0:	79fb      	ldrb	r3, [r7, #7]
 80031a2:	4a0f      	ldr	r2, [pc, #60]	; (80031e0 <BSP_LED_Init+0xa0>)
 80031a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031a8:	f107 0210 	add.w	r2, r7, #16
 80031ac:	4611      	mov	r1, r2
 80031ae:	4618      	mov	r0, r3
 80031b0:	f006 ffac 	bl	800a10c <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT [Led], (uint16_t)LED_PIN[Led], GPIO_PIN_SET);
 80031b4:	79fb      	ldrb	r3, [r7, #7]
 80031b6:	4a0a      	ldr	r2, [pc, #40]	; (80031e0 <BSP_LED_Init+0xa0>)
 80031b8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80031bc:	79fb      	ldrb	r3, [r7, #7]
 80031be:	4a07      	ldr	r2, [pc, #28]	; (80031dc <BSP_LED_Init+0x9c>)
 80031c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	2201      	movs	r2, #1
 80031c8:	4619      	mov	r1, r3
 80031ca:	f007 fa6d 	bl	800a6a8 <HAL_GPIO_WritePin>

  return ret;
 80031ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3728      	adds	r7, #40	; 0x28
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	46020c00 	.word	0x46020c00
 80031dc:	0801cc30 	.word	0x0801cc30
 80031e0:	20000058 	.word	0x20000058

080031e4 <BSP_LED_DeInit>:
  *            @arg  LED6
  *            @arg  LED7
  * @retval BSP status
  */
int32_t BSP_LED_DeInit(Led_TypeDef Led)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b088      	sub	sp, #32
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	4603      	mov	r3, r0
 80031ec:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80031ee:	2300      	movs	r3, #0
 80031f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitTypeDef  gpio_init_structure;

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin = LED_PIN [Led];
 80031f2:	79fb      	ldrb	r3, [r7, #7]
 80031f4:	4a0f      	ldr	r2, [pc, #60]	; (8003234 <BSP_LED_DeInit+0x50>)
 80031f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031fa:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_WritePin(LED_PORT[Led], (uint16_t)LED_PIN[Led], GPIO_PIN_RESET);
 80031fc:	79fb      	ldrb	r3, [r7, #7]
 80031fe:	4a0e      	ldr	r2, [pc, #56]	; (8003238 <BSP_LED_DeInit+0x54>)
 8003200:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003204:	79fb      	ldrb	r3, [r7, #7]
 8003206:	4a0b      	ldr	r2, [pc, #44]	; (8003234 <BSP_LED_DeInit+0x50>)
 8003208:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800320c:	b29b      	uxth	r3, r3
 800320e:	2200      	movs	r2, #0
 8003210:	4619      	mov	r1, r3
 8003212:	f007 fa49 	bl	800a6a8 <HAL_GPIO_WritePin>
  HAL_GPIO_DeInit(LED_PORT[Led], gpio_init_structure.Pin);
 8003216:	79fb      	ldrb	r3, [r7, #7]
 8003218:	4a07      	ldr	r2, [pc, #28]	; (8003238 <BSP_LED_DeInit+0x54>)
 800321a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800321e:	68ba      	ldr	r2, [r7, #8]
 8003220:	4611      	mov	r1, r2
 8003222:	4618      	mov	r0, r3
 8003224:	f007 f94a 	bl	800a4bc <HAL_GPIO_DeInit>

  return ret;
 8003228:	69fb      	ldr	r3, [r7, #28]
}
 800322a:	4618      	mov	r0, r3
 800322c:	3720      	adds	r7, #32
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	0801cc30 	.word	0x0801cc30
 8003238:	20000058 	.word	0x20000058

0800323c <BSP_LED_On>:
  *            @arg  LED6
  *            @arg  LED7
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	4603      	mov	r3, r0
 8003244:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  HAL_GPIO_WritePin(LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_RESET);
 8003246:	79fb      	ldrb	r3, [r7, #7]
 8003248:	4a09      	ldr	r2, [pc, #36]	; (8003270 <BSP_LED_On+0x34>)
 800324a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800324e:	79fb      	ldrb	r3, [r7, #7]
 8003250:	4a08      	ldr	r2, [pc, #32]	; (8003274 <BSP_LED_On+0x38>)
 8003252:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003256:	b29b      	uxth	r3, r3
 8003258:	2200      	movs	r2, #0
 800325a:	4619      	mov	r1, r3
 800325c:	f007 fa24 	bl	800a6a8 <HAL_GPIO_WritePin>
  ret = BSP_ERROR_NONE;
 8003260:	2300      	movs	r3, #0
 8003262:	60fb      	str	r3, [r7, #12]

  return ret;
 8003264:	68fb      	ldr	r3, [r7, #12]
}
 8003266:	4618      	mov	r0, r3
 8003268:	3710      	adds	r7, #16
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	20000058 	.word	0x20000058
 8003274:	0801cc30 	.word	0x0801cc30

08003278 <BSP_LED_Toggle>:
  *            @arg  LED5
  *            @arg  LED7
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b084      	sub	sp, #16
 800327c:	af00      	add	r7, sp, #0
 800327e:	4603      	mov	r3, r0
 8003280:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  HAL_GPIO_TogglePin(LED_PORT[Led], (uint16_t)LED_PIN[Led]);
 8003282:	79fb      	ldrb	r3, [r7, #7]
 8003284:	4a09      	ldr	r2, [pc, #36]	; (80032ac <BSP_LED_Toggle+0x34>)
 8003286:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800328a:	79fb      	ldrb	r3, [r7, #7]
 800328c:	4908      	ldr	r1, [pc, #32]	; (80032b0 <BSP_LED_Toggle+0x38>)
 800328e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003292:	b29b      	uxth	r3, r3
 8003294:	4619      	mov	r1, r3
 8003296:	4610      	mov	r0, r2
 8003298:	f007 fa1e 	bl	800a6d8 <HAL_GPIO_TogglePin>
  ret = BSP_ERROR_NONE;
 800329c:	2300      	movs	r3, #0
 800329e:	60fb      	str	r3, [r7, #12]

  return ret;
 80032a0:	68fb      	ldr	r3, [r7, #12]
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3710      	adds	r7, #16
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	20000058 	.word	0x20000058
 80032b0:	0801cc30 	.word	0x0801cc30

080032b4 <BSP_I2C2_Init>:
/**
  * @brief  Initializes I2C2 HAL.
  * @retval BSP status
  */
int32_t BSP_I2C2_Init(void)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b082      	sub	sp, #8
 80032b8:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80032ba:	2300      	movs	r3, #0
 80032bc:	607b      	str	r3, [r7, #4]

  hbus_i2c2.Instance = BUS_I2C2;
 80032be:	4b16      	ldr	r3, [pc, #88]	; (8003318 <BSP_I2C2_Init+0x64>)
 80032c0:	4a16      	ldr	r2, [pc, #88]	; (800331c <BSP_I2C2_Init+0x68>)
 80032c2:	601a      	str	r2, [r3, #0]

  if (I2c2InitCounter == 0U)
 80032c4:	4b16      	ldr	r3, [pc, #88]	; (8003320 <BSP_I2C2_Init+0x6c>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d11f      	bne.n	800330c <BSP_I2C2_Init+0x58>
  {
    I2c2InitCounter++;
 80032cc:	4b14      	ldr	r3, [pc, #80]	; (8003320 <BSP_I2C2_Init+0x6c>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	3301      	adds	r3, #1
 80032d2:	4a13      	ldr	r2, [pc, #76]	; (8003320 <BSP_I2C2_Init+0x6c>)
 80032d4:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c2) == HAL_I2C_STATE_RESET)
 80032d6:	4810      	ldr	r0, [pc, #64]	; (8003318 <BSP_I2C2_Init+0x64>)
 80032d8:	f007 fd56 	bl	800ad88 <HAL_I2C_GetState>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d114      	bne.n	800330c <BSP_I2C2_Init+0x58>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif /* BSP_USE_CMSIS_OS */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C2 Msp */
      I2C2_MspInit(&hbus_i2c2);
 80032e2:	480d      	ldr	r0, [pc, #52]	; (8003318 <BSP_I2C2_Init+0x64>)
 80032e4:	f000 fb60 	bl	80039a8 <I2C2_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      if (MX_I2C2_Init(&hbus_i2c2, I2C_GetTiming(HAL_RCC_GetPCLK1Freq(), BUS_I2C2_FREQUENCY)) != HAL_OK)
 80032e8:	f00a f94e 	bl	800d588 <HAL_RCC_GetPCLK1Freq>
 80032ec:	4603      	mov	r3, r0
 80032ee:	490d      	ldr	r1, [pc, #52]	; (8003324 <BSP_I2C2_Init+0x70>)
 80032f0:	4618      	mov	r0, r3
 80032f2:	f000 f8e3 	bl	80034bc <I2C_GetTiming>
 80032f6:	4603      	mov	r3, r0
 80032f8:	4619      	mov	r1, r3
 80032fa:	4807      	ldr	r0, [pc, #28]	; (8003318 <BSP_I2C2_Init+0x64>)
 80032fc:	f000 f838 	bl	8003370 <MX_I2C2_Init>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d002      	beq.n	800330c <BSP_I2C2_Init+0x58>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8003306:	f06f 0307 	mvn.w	r3, #7
 800330a:	607b      	str	r3, [r7, #4]
#if (USE_HAL_I2C_REGISTER_CALLBACKS > 0)
    }
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
return ret;
 800330c:	687b      	ldr	r3, [r7, #4]
}
 800330e:	4618      	mov	r0, r3
 8003310:	3708      	adds	r7, #8
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	20002b0c 	.word	0x20002b0c
 800331c:	40005800 	.word	0x40005800
 8003320:	20002104 	.word	0x20002104
 8003324:	000186a0 	.word	0x000186a0

08003328 <BSP_I2C2_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C2_DeInit(void)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b082      	sub	sp, #8
 800332c:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
 800332e:	2300      	movs	r3, #0
 8003330:	607b      	str	r3, [r7, #4]

  I2c2InitCounter--;
 8003332:	4b0d      	ldr	r3, [pc, #52]	; (8003368 <BSP_I2C2_DeInit+0x40>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	3b01      	subs	r3, #1
 8003338:	4a0b      	ldr	r2, [pc, #44]	; (8003368 <BSP_I2C2_DeInit+0x40>)
 800333a:	6013      	str	r3, [r2, #0]

  if (I2c2InitCounter == 0U)
 800333c:	4b0a      	ldr	r3, [pc, #40]	; (8003368 <BSP_I2C2_DeInit+0x40>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d10b      	bne.n	800335c <BSP_I2C2_DeInit+0x34>
  {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    I2C2_MspDeInit(&hbus_i2c2);
 8003344:	4809      	ldr	r0, [pc, #36]	; (800336c <BSP_I2C2_DeInit+0x44>)
 8003346:	f000 fb95 	bl	8003a74 <I2C2_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

    /* Init the I2C */
    if (HAL_I2C_DeInit(&hbus_i2c2) != HAL_OK)
 800334a:	4808      	ldr	r0, [pc, #32]	; (800336c <BSP_I2C2_DeInit+0x44>)
 800334c:	f007 faaa 	bl	800a8a4 <HAL_I2C_DeInit>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d002      	beq.n	800335c <BSP_I2C2_DeInit+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8003356:	f06f 0307 	mvn.w	r3, #7
 800335a:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 800335c:	687b      	ldr	r3, [r7, #4]
}
 800335e:	4618      	mov	r0, r3
 8003360:	3708      	adds	r7, #8
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	20002104 	.word	0x20002104
 800336c:	20002b0c 	.word	0x20002b0c

08003370 <MX_I2C2_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C2_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800337a:	2300      	movs	r3, #0
 800337c:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	683a      	ldr	r2, [r7, #0]
 8003382:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2201      	movs	r2, #1
 800338e:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2200      	movs	r2, #0
 8003394:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2200      	movs	r2, #0
 80033a0:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2200      	movs	r2, #0
 80033a6:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2200      	movs	r2, #0
 80033ac:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f007 f9dd 	bl	800a76e <HAL_I2C_Init>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d002      	beq.n	80033c0 <MX_I2C2_Init+0x50>
  {
    status = HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	73fb      	strb	r3, [r7, #15]
 80033be:	e014      	b.n	80033ea <MX_I2C2_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
 80033c0:	2300      	movs	r3, #0
 80033c2:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 80033c4:	68b9      	ldr	r1, [r7, #8]
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f007 ffb0 	bl	800b32c <HAL_I2CEx_ConfigAnalogFilter>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d002      	beq.n	80033d8 <MX_I2C2_Init+0x68>
    {
      status = HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	73fb      	strb	r3, [r7, #15]
 80033d6:	e008      	b.n	80033ea <MX_I2C2_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 80033d8:	2100      	movs	r1, #0
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f007 fff1 	bl	800b3c2 <HAL_I2CEx_ConfigDigitalFilter>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d001      	beq.n	80033ea <MX_I2C2_Init+0x7a>
      {
        status = HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 80033ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3710      	adds	r7, #16
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <BSP_I2C2_WriteReg>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C2_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b088      	sub	sp, #32
 80033f8:	af02      	add	r7, sp, #8
 80033fa:	60ba      	str	r2, [r7, #8]
 80033fc:	461a      	mov	r2, r3
 80033fe:	4603      	mov	r3, r0
 8003400:	81fb      	strh	r3, [r7, #14]
 8003402:	460b      	mov	r3, r1
 8003404:	81bb      	strh	r3, [r7, #12]
 8003406:	4613      	mov	r3, r2
 8003408:	80fb      	strh	r3, [r7, #6]

#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif /* BSP_USE_CMSIS_OS */
  if (I2C2_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 800340a:	89b9      	ldrh	r1, [r7, #12]
 800340c:	89f8      	ldrh	r0, [r7, #14]
 800340e:	88fb      	ldrh	r3, [r7, #6]
 8003410:	9300      	str	r3, [sp, #0]
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	2201      	movs	r2, #1
 8003416:	f000 fb4f 	bl	8003ab8 <I2C2_WriteReg>
 800341a:	4603      	mov	r3, r0
 800341c:	2b00      	cmp	r3, #0
 800341e:	d102      	bne.n	8003426 <BSP_I2C2_WriteReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 8003420:	2300      	movs	r3, #0
 8003422:	617b      	str	r3, [r7, #20]
 8003424:	e00c      	b.n	8003440 <BSP_I2C2_WriteReg+0x4c>
  }
  else
  {
    if (HAL_I2C_GetError(&hbus_i2c2) == HAL_I2C_ERROR_AF)
 8003426:	4809      	ldr	r0, [pc, #36]	; (800344c <BSP_I2C2_WriteReg+0x58>)
 8003428:	f007 fcbc 	bl	800ada4 <HAL_I2C_GetError>
 800342c:	4603      	mov	r3, r0
 800342e:	2b04      	cmp	r3, #4
 8003430:	d103      	bne.n	800343a <BSP_I2C2_WriteReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8003432:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8003436:	617b      	str	r3, [r7, #20]
 8003438:	e002      	b.n	8003440 <BSP_I2C2_WriteReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800343a:	f06f 0303 	mvn.w	r3, #3
 800343e:	617b      	str	r3, [r7, #20]
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif /* BSP_USE_CMSIS_OS */

  return ret;
 8003440:	697b      	ldr	r3, [r7, #20]
}
 8003442:	4618      	mov	r0, r3
 8003444:	3718      	adds	r7, #24
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	20002b0c 	.word	0x20002b0c

08003450 <BSP_I2C2_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C2_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b088      	sub	sp, #32
 8003454:	af02      	add	r7, sp, #8
 8003456:	60ba      	str	r2, [r7, #8]
 8003458:	461a      	mov	r2, r3
 800345a:	4603      	mov	r3, r0
 800345c:	81fb      	strh	r3, [r7, #14]
 800345e:	460b      	mov	r3, r1
 8003460:	81bb      	strh	r3, [r7, #12]
 8003462:	4613      	mov	r3, r2
 8003464:	80fb      	strh	r3, [r7, #6]

#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif /* BSP_USE_CMSIS_OS */
  if (I2C2_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 8003466:	89b9      	ldrh	r1, [r7, #12]
 8003468:	89f8      	ldrh	r0, [r7, #14]
 800346a:	88fb      	ldrh	r3, [r7, #6]
 800346c:	9300      	str	r3, [sp, #0]
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	2201      	movs	r2, #1
 8003472:	f000 fb47 	bl	8003b04 <I2C2_ReadReg>
 8003476:	4603      	mov	r3, r0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d102      	bne.n	8003482 <BSP_I2C2_ReadReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 800347c:	2300      	movs	r3, #0
 800347e:	617b      	str	r3, [r7, #20]
 8003480:	e00c      	b.n	800349c <BSP_I2C2_ReadReg+0x4c>
  }
  else
  {
    if (HAL_I2C_GetError(&hbus_i2c2) == HAL_I2C_ERROR_AF)
 8003482:	4809      	ldr	r0, [pc, #36]	; (80034a8 <BSP_I2C2_ReadReg+0x58>)
 8003484:	f007 fc8e 	bl	800ada4 <HAL_I2C_GetError>
 8003488:	4603      	mov	r3, r0
 800348a:	2b04      	cmp	r3, #4
 800348c:	d103      	bne.n	8003496 <BSP_I2C2_ReadReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800348e:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8003492:	617b      	str	r3, [r7, #20]
 8003494:	e002      	b.n	800349c <BSP_I2C2_ReadReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8003496:	f06f 0303 	mvn.w	r3, #3
 800349a:	617b      	str	r3, [r7, #20]
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif /* BSP_USE_CMSIS_OS */

  return ret;
 800349c:	697b      	ldr	r3, [r7, #20]
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3718      	adds	r7, #24
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	20002b0c 	.word	0x20002b0c

080034ac <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 80034b0:	f006 fc6a 	bl	8009d88 <HAL_GetTick>
 80034b4:	4603      	mov	r3, r0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	bd80      	pop	{r7, pc}
	...

080034bc <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b086      	sub	sp, #24
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 80034c6:	2300      	movs	r3, #0
 80034c8:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if ((clock_src_freq != 0U) && (i2c_freq != 0U))
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d06b      	beq.n	80035a8 <I2C_GetTiming+0xec>
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d068      	beq.n	80035a8 <I2C_GetTiming+0xec>
  {
    for (speed = 0 ; speed <= (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 80034d6:	2300      	movs	r3, #0
 80034d8:	613b      	str	r3, [r7, #16]
 80034da:	e060      	b.n	800359e <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 80034dc:	4a35      	ldr	r2, [pc, #212]	; (80035b4 <I2C_GetTiming+0xf8>)
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	212c      	movs	r1, #44	; 0x2c
 80034e2:	fb01 f303 	mul.w	r3, r1, r3
 80034e6:	4413      	add	r3, r2
 80034e8:	3304      	adds	r3, #4
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	683a      	ldr	r2, [r7, #0]
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d352      	bcc.n	8003598 <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 80034f2:	4a30      	ldr	r2, [pc, #192]	; (80035b4 <I2C_GetTiming+0xf8>)
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	212c      	movs	r1, #44	; 0x2c
 80034f8:	fb01 f303 	mul.w	r3, r1, r3
 80034fc:	4413      	add	r3, r2
 80034fe:	3308      	adds	r3, #8
 8003500:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8003502:	683a      	ldr	r2, [r7, #0]
 8003504:	429a      	cmp	r2, r3
 8003506:	d847      	bhi.n	8003598 <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 8003508:	6939      	ldr	r1, [r7, #16]
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f000 f856 	bl	80035bc <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 8003510:	6939      	ldr	r1, [r7, #16]
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f000 f940 	bl	8003798 <I2C_Compute_SCLL_SCLH>
 8003518:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2b7f      	cmp	r3, #127	; 0x7f
 800351e:	d842      	bhi.n	80035a6 <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) | \
 8003520:	4925      	ldr	r1, [pc, #148]	; (80035b8 <I2C_GetTiming+0xfc>)
 8003522:	68fa      	ldr	r2, [r7, #12]
 8003524:	4613      	mov	r3, r2
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	4413      	add	r3, r2
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	440b      	add	r3, r1
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) | \
 8003532:	4821      	ldr	r0, [pc, #132]	; (80035b8 <I2C_GetTiming+0xfc>)
 8003534:	68fa      	ldr	r2, [r7, #12]
 8003536:	4613      	mov	r3, r2
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	4413      	add	r3, r2
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	4403      	add	r3, r0
 8003540:	3304      	adds	r3, #4
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	051b      	lsls	r3, r3, #20
 8003546:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) | \
 800354a:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) | \
 800354c:	481a      	ldr	r0, [pc, #104]	; (80035b8 <I2C_GetTiming+0xfc>)
 800354e:	68fa      	ldr	r2, [r7, #12]
 8003550:	4613      	mov	r3, r2
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	4413      	add	r3, r2
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	4403      	add	r3, r0
 800355a:	3308      	adds	r3, #8
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	041b      	lsls	r3, r3, #16
 8003560:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) | \
 8003564:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) | \
 8003566:	4814      	ldr	r0, [pc, #80]	; (80035b8 <I2C_GetTiming+0xfc>)
 8003568:	68fa      	ldr	r2, [r7, #12]
 800356a:	4613      	mov	r3, r2
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	4413      	add	r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	4403      	add	r3, r0
 8003574:	330c      	adds	r3, #12
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	021b      	lsls	r3, r3, #8
 800357a:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) | \
 800357c:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 800357e:	480e      	ldr	r0, [pc, #56]	; (80035b8 <I2C_GetTiming+0xfc>)
 8003580:	68fa      	ldr	r2, [r7, #12]
 8003582:	4613      	mov	r3, r2
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	4413      	add	r3, r2
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	4403      	add	r3, r0
 800358c:	3310      	adds	r3, #16
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) | \
 8003592:	430b      	orrs	r3, r1
 8003594:	617b      	str	r3, [r7, #20]
        }
        break;
 8003596:	e006      	b.n	80035a6 <I2C_GetTiming+0xea>
    for (speed = 0 ; speed <= (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	3301      	adds	r3, #1
 800359c:	613b      	str	r3, [r7, #16]
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	2b02      	cmp	r3, #2
 80035a2:	d99b      	bls.n	80034dc <I2C_GetTiming+0x20>
 80035a4:	e000      	b.n	80035a8 <I2C_GetTiming+0xec>
        break;
 80035a6:	bf00      	nop
      }
    }
  }

  return ret;
 80035a8:	697b      	ldr	r3, [r7, #20]
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3718      	adds	r7, #24
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	0801cc38 	.word	0x0801cc38
 80035b8:	20002108 	.word	0x20002108

080035bc <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 80035bc:	b480      	push	{r7}
 80035be:	b08f      	sub	sp, #60	; 0x3c
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 80035c6:	2310      	movs	r3, #16
 80035c8:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t scldel;
  uint32_t sdadel;
  uint32_t tafdel_min;
  uint32_t tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U)) / clock_src_freq;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	085a      	lsrs	r2, r3, #1
 80035ce:	4b6e      	ldr	r3, [pc, #440]	; (8003788 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 80035d0:	4413      	add	r3, r2
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80035d8:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 80035da:	2332      	movs	r3, #50	; 0x32
 80035dc:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
 80035de:	f44f 7382 	mov.w	r3, #260	; 0x104
 80035e2:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / tPRESC
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / tPRESC */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 80035e4:	4a69      	ldr	r2, [pc, #420]	; (800378c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	212c      	movs	r1, #44	; 0x2c
 80035ea:	fb01 f303 	mul.w	r3, r1, r3
 80035ee:	4413      	add	r3, r2
 80035f0:	3324      	adds	r3, #36	; 0x24
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4618      	mov	r0, r3
 80035f6:	4a65      	ldr	r2, [pc, #404]	; (800378c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	212c      	movs	r1, #44	; 0x2c
 80035fc:	fb01 f303 	mul.w	r3, r1, r3
 8003600:	4413      	add	r3, r2
 8003602:	330c      	adds	r3, #12
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	18c2      	adds	r2, r0, r3
                (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8003608:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800360a:	1ad2      	subs	r2, r2, r3
                (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 800360c:	495f      	ldr	r1, [pc, #380]	; (800378c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	202c      	movs	r0, #44	; 0x2c
 8003612:	fb00 f303 	mul.w	r3, r0, r3
 8003616:	440b      	add	r3, r1
 8003618:	3328      	adds	r3, #40	; 0x28
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	3303      	adds	r3, #3
 800361e:	69f9      	ldr	r1, [r7, #28]
 8003620:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	633b      	str	r3, [r7, #48]	; 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8003628:	4a58      	ldr	r2, [pc, #352]	; (800378c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	212c      	movs	r1, #44	; 0x2c
 800362e:	fb01 f303 	mul.w	r3, r1, r3
 8003632:	4413      	add	r3, r2
 8003634:	3310      	adds	r3, #16
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4618      	mov	r0, r3
 800363a:	4a54      	ldr	r2, [pc, #336]	; (800378c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	212c      	movs	r1, #44	; 0x2c
 8003640:	fb01 f303 	mul.w	r3, r1, r3
 8003644:	4413      	add	r3, r2
 8003646:	3320      	adds	r3, #32
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	1ac2      	subs	r2, r0, r3
                (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 800364c:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800364e:	1ad2      	subs	r2, r2, r3
                (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8003650:	494e      	ldr	r1, [pc, #312]	; (800378c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	202c      	movs	r0, #44	; 0x2c
 8003656:	fb00 f303 	mul.w	r3, r0, r3
 800365a:	440b      	add	r3, r1
 800365c:	3328      	adds	r3, #40	; 0x28
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	3304      	adds	r3, #4
 8003662:	69f9      	ldr	r1, [r7, #28]
 8003664:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	62fb      	str	r3, [r7, #44]	; 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 800366c:	4a47      	ldr	r2, [pc, #284]	; (800378c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	212c      	movs	r1, #44	; 0x2c
 8003672:	fb01 f303 	mul.w	r3, r1, r3
 8003676:	4413      	add	r3, r2
 8003678:	3320      	adds	r3, #32
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4618      	mov	r0, r3
 800367e:	4a43      	ldr	r2, [pc, #268]	; (800378c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	212c      	movs	r1, #44	; 0x2c
 8003684:	fb01 f303 	mul.w	r3, r1, r3
 8003688:	4413      	add	r3, r2
 800368a:	3314      	adds	r3, #20
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4403      	add	r3, r0
 8003690:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 8003692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003694:	2b00      	cmp	r3, #0
 8003696:	dc01      	bgt.n	800369c <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 8003698:	2300      	movs	r3, #0
 800369a:	633b      	str	r3, [r7, #48]	; 0x30
  }

  if (tsdadel_max <= 0)
 800369c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800369e:	2b00      	cmp	r3, #0
 80036a0:	dc01      	bgt.n	80036a6 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 80036a2:	2300      	movs	r3, #0
 80036a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 80036a6:	2300      	movs	r3, #0
 80036a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80036aa:	e062      	b.n	8003772 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 80036ac:	2300      	movs	r3, #0
 80036ae:	627b      	str	r3, [r7, #36]	; 0x24
 80036b0:	e059      	b.n	8003766 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 80036b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b4:	3301      	adds	r3, #1
 80036b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036b8:	3201      	adds	r2, #1
 80036ba:	fb03 f202 	mul.w	r2, r3, r2
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	fb02 f303 	mul.w	r3, r2, r3
 80036c4:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	68fa      	ldr	r2, [r7, #12]
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d348      	bcc.n	8003760 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 80036ce:	2300      	movs	r3, #0
 80036d0:	623b      	str	r3, [r7, #32]
 80036d2:	e042      	b.n	800375a <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 80036d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036d6:	3301      	adds	r3, #1
 80036d8:	6a3a      	ldr	r2, [r7, #32]
 80036da:	fb03 f202 	mul.w	r2, r3, r2
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	fb02 f303 	mul.w	r3, r2, r3
 80036e4:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 80036e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036e8:	68ba      	ldr	r2, [r7, #8]
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d332      	bcc.n	8003754 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 80036ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036f0:	68ba      	ldr	r2, [r7, #8]
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d82e      	bhi.n	8003754 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if (presc != prev_presc)
 80036f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d02a      	beq.n	8003754 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80036fe:	4b24      	ldr	r3, [pc, #144]	; (8003790 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	4924      	ldr	r1, [pc, #144]	; (8003794 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8003704:	4613      	mov	r3, r2
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	4413      	add	r3, r2
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	440b      	add	r3, r1
 800370e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003710:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8003712:	4b1f      	ldr	r3, [pc, #124]	; (8003790 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	491f      	ldr	r1, [pc, #124]	; (8003794 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8003718:	4613      	mov	r3, r2
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	4413      	add	r3, r2
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	440b      	add	r3, r1
 8003722:	3304      	adds	r3, #4
 8003724:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003726:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8003728:	4b19      	ldr	r3, [pc, #100]	; (8003790 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	4919      	ldr	r1, [pc, #100]	; (8003794 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 800372e:	4613      	mov	r3, r2
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	4413      	add	r3, r2
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	440b      	add	r3, r1
 8003738:	3308      	adds	r3, #8
 800373a:	6a3a      	ldr	r2, [r7, #32]
 800373c:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 800373e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003740:	637b      	str	r3, [r7, #52]	; 0x34
              I2c_valid_timing_nbr ++;
 8003742:	4b13      	ldr	r3, [pc, #76]	; (8003790 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	3301      	adds	r3, #1
 8003748:	4a11      	ldr	r2, [pc, #68]	; (8003790 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800374a:	6013      	str	r3, [r2, #0]

              if (I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800374c:	4b10      	ldr	r3, [pc, #64]	; (8003790 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	2b7f      	cmp	r3, #127	; 0x7f
 8003752:	d812      	bhi.n	800377a <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8003754:	6a3b      	ldr	r3, [r7, #32]
 8003756:	3301      	adds	r3, #1
 8003758:	623b      	str	r3, [r7, #32]
 800375a:	6a3b      	ldr	r3, [r7, #32]
 800375c:	2b0f      	cmp	r3, #15
 800375e:	d9b9      	bls.n	80036d4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8003760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003762:	3301      	adds	r3, #1
 8003764:	627b      	str	r3, [r7, #36]	; 0x24
 8003766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003768:	2b0f      	cmp	r3, #15
 800376a:	d9a2      	bls.n	80036b2 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800376c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800376e:	3301      	adds	r3, #1
 8003770:	62bb      	str	r3, [r7, #40]	; 0x28
 8003772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003774:	2b0f      	cmp	r3, #15
 8003776:	d999      	bls.n	80036ac <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 8003778:	e000      	b.n	800377c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 800377a:	bf00      	nop
          }
        }
      }
    }
  }
}
 800377c:	373c      	adds	r7, #60	; 0x3c
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr
 8003786:	bf00      	nop
 8003788:	3b9aca00 	.word	0x3b9aca00
 800378c:	0801cc38 	.word	0x0801cc38
 8003790:	20002b08 	.word	0x20002b08
 8003794:	20002108 	.word	0x20002108

08003798 <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8003798:	b480      	push	{r7}
 800379a:	b093      	sub	sp, #76	; 0x4c
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0xFFFFFFFFU;
 80037a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80037a6:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t clk_max;
  uint32_t scll;
  uint32_t sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U)) / clock_src_freq;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	085a      	lsrs	r2, r3, #1
 80037ac:	4b7a      	ldr	r3, [pc, #488]	; (8003998 <I2C_Compute_SCLL_SCLH+0x200>)
 80037ae:	4413      	add	r3, r2
 80037b0:	687a      	ldr	r2, [r7, #4]
 80037b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80037b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U)) / I2C_Charac[I2C_speed].freq;
 80037b8:	4a78      	ldr	r2, [pc, #480]	; (800399c <I2C_Compute_SCLL_SCLH+0x204>)
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	212c      	movs	r1, #44	; 0x2c
 80037be:	fb01 f303 	mul.w	r3, r1, r3
 80037c2:	4413      	add	r3, r2
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	085a      	lsrs	r2, r3, #1
 80037c8:	4b73      	ldr	r3, [pc, #460]	; (8003998 <I2C_Compute_SCLL_SCLH+0x200>)
 80037ca:	4413      	add	r3, r2
 80037cc:	4973      	ldr	r1, [pc, #460]	; (800399c <I2C_Compute_SCLL_SCLH+0x204>)
 80037ce:	683a      	ldr	r2, [r7, #0]
 80037d0:	202c      	movs	r0, #44	; 0x2c
 80037d2:	fb00 f202 	mul.w	r2, r0, r2
 80037d6:	440a      	add	r2, r1
 80037d8:	6812      	ldr	r2, [r2, #0]
 80037da:	fbb3 f3f2 	udiv	r3, r3, r2
 80037de:	62bb      	str	r3, [r7, #40]	; 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 80037e0:	2332      	movs	r3, #50	; 0x32
 80037e2:	627b      	str	r3, [r7, #36]	; 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 80037e4:	4a6d      	ldr	r2, [pc, #436]	; (800399c <I2C_Compute_SCLL_SCLH+0x204>)
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	212c      	movs	r1, #44	; 0x2c
 80037ea:	fb01 f303 	mul.w	r3, r1, r3
 80037ee:	4413      	add	r3, r2
 80037f0:	3328      	adds	r3, #40	; 0x28
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037f6:	fb02 f303 	mul.w	r3, r2, r3
 80037fa:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 80037fc:	4a67      	ldr	r2, [pc, #412]	; (800399c <I2C_Compute_SCLL_SCLH+0x204>)
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	212c      	movs	r1, #44	; 0x2c
 8003802:	fb01 f303 	mul.w	r3, r1, r3
 8003806:	4413      	add	r3, r2
 8003808:	3304      	adds	r3, #4
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a62      	ldr	r2, [pc, #392]	; (8003998 <I2C_Compute_SCLL_SCLH+0x200>)
 800380e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003812:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 8003814:	4a61      	ldr	r2, [pc, #388]	; (800399c <I2C_Compute_SCLL_SCLH+0x204>)
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	212c      	movs	r1, #44	; 0x2c
 800381a:	fb01 f303 	mul.w	r3, r1, r3
 800381e:	4413      	add	r3, r2
 8003820:	3308      	adds	r3, #8
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a5c      	ldr	r2, [pc, #368]	; (8003998 <I2C_Compute_SCLL_SCLH+0x200>)
 8003826:	fbb2 f3f3 	udiv	r3, r2, r3
 800382a:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 800382c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800382e:	643b      	str	r3, [r7, #64]	; 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8003830:	2300      	movs	r3, #0
 8003832:	637b      	str	r3, [r7, #52]	; 0x34
 8003834:	e0a3      	b.n	800397e <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8003836:	495a      	ldr	r1, [pc, #360]	; (80039a0 <I2C_Compute_SCLL_SCLH+0x208>)
 8003838:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800383a:	4613      	mov	r3, r2
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	4413      	add	r3, r2
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	440b      	add	r3, r1
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	1c5a      	adds	r2, r3, #1
 8003848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800384a:	fb02 f303 	mul.w	r3, r2, r3
 800384e:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8003850:	2300      	movs	r3, #0
 8003852:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003854:	e08c      	b.n	8003970 <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8003856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003858:	6a3b      	ldr	r3, [r7, #32]
 800385a:	441a      	add	r2, r3
 800385c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800385e:	3301      	adds	r3, #1
 8003860:	6979      	ldr	r1, [r7, #20]
 8003862:	fb03 f101 	mul.w	r1, r3, r1
 8003866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003868:	005b      	lsls	r3, r3, #1
 800386a:	440b      	add	r3, r1
 800386c:	4413      	add	r3, r2
 800386e:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8003870:	4a4a      	ldr	r2, [pc, #296]	; (800399c <I2C_Compute_SCLL_SCLH+0x204>)
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	212c      	movs	r1, #44	; 0x2c
 8003876:	fb01 f303 	mul.w	r3, r1, r3
 800387a:	4413      	add	r3, r2
 800387c:	3318      	adds	r3, #24
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	693a      	ldr	r2, [r7, #16]
 8003882:	429a      	cmp	r2, r3
 8003884:	d971      	bls.n	800396a <I2C_Compute_SCLL_SCLH+0x1d2>
 8003886:	693a      	ldr	r2, [r7, #16]
 8003888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388a:	1ad2      	subs	r2, r2, r3
 800388c:	6a3b      	ldr	r3, [r7, #32]
 800388e:	1ad3      	subs	r3, r2, r3
 8003890:	089b      	lsrs	r3, r3, #2
 8003892:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003894:	429a      	cmp	r2, r3
 8003896:	d268      	bcs.n	800396a <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8003898:	2300      	movs	r3, #0
 800389a:	63bb      	str	r3, [r7, #56]	; 0x38
 800389c:	e062      	b.n	8003964 <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 800389e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038a0:	6a3b      	ldr	r3, [r7, #32]
 80038a2:	441a      	add	r2, r3
 80038a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038a6:	3301      	adds	r3, #1
 80038a8:	6979      	ldr	r1, [r7, #20]
 80038aa:	fb03 f101 	mul.w	r1, r3, r1
 80038ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038b0:	005b      	lsls	r3, r3, #1
 80038b2:	440b      	add	r3, r1
 80038b4:	4413      	add	r3, r2
 80038b6:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 80038b8:	693a      	ldr	r2, [r7, #16]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	441a      	add	r2, r3
 80038be:	4937      	ldr	r1, [pc, #220]	; (800399c <I2C_Compute_SCLL_SCLH+0x204>)
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	202c      	movs	r0, #44	; 0x2c
 80038c4:	fb00 f303 	mul.w	r3, r0, r3
 80038c8:	440b      	add	r3, r1
 80038ca:	3320      	adds	r3, #32
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	441a      	add	r2, r3
 80038d0:	4932      	ldr	r1, [pc, #200]	; (800399c <I2C_Compute_SCLL_SCLH+0x204>)
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	202c      	movs	r0, #44	; 0x2c
 80038d6:	fb00 f303 	mul.w	r3, r0, r3
 80038da:	440b      	add	r3, r1
 80038dc:	3324      	adds	r3, #36	; 0x24
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4413      	add	r3, r2
 80038e2:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min)
 80038e4:	68ba      	ldr	r2, [r7, #8]
 80038e6:	69bb      	ldr	r3, [r7, #24]
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d338      	bcc.n	800395e <I2C_Compute_SCLL_SCLH+0x1c6>
 80038ec:	68ba      	ldr	r2, [r7, #8]
 80038ee:	69fb      	ldr	r3, [r7, #28]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d834      	bhi.n	800395e <I2C_Compute_SCLL_SCLH+0x1c6>
 80038f4:	4a29      	ldr	r2, [pc, #164]	; (800399c <I2C_Compute_SCLL_SCLH+0x204>)
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	212c      	movs	r1, #44	; 0x2c
 80038fa:	fb01 f303 	mul.w	r3, r1, r3
 80038fe:	4413      	add	r3, r2
 8003900:	331c      	adds	r3, #28
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	68fa      	ldr	r2, [r7, #12]
 8003906:	429a      	cmp	r2, r3
 8003908:	d329      	bcc.n	800395e <I2C_Compute_SCLL_SCLH+0x1c6>
              && (ti2cclk < tscl_h))
 800390a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	429a      	cmp	r2, r3
 8003910:	d225      	bcs.n	800395e <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 8003912:	68ba      	ldr	r2, [r7, #8]
 8003914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003916:	1ad3      	subs	r3, r2, r3
 8003918:	633b      	str	r3, [r7, #48]	; 0x30

            if (error < 0)
 800391a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800391c:	2b00      	cmp	r3, #0
 800391e:	da02      	bge.n	8003926 <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 8003920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003922:	425b      	negs	r3, r3
 8003924:	633b      	str	r3, [r7, #48]	; 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 8003926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003928:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800392a:	429a      	cmp	r2, r3
 800392c:	d917      	bls.n	800395e <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 800392e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003930:	643b      	str	r3, [r7, #64]	; 0x40
              I2c_valid_timing[count].scll = scll;
 8003932:	491b      	ldr	r1, [pc, #108]	; (80039a0 <I2C_Compute_SCLL_SCLH+0x208>)
 8003934:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003936:	4613      	mov	r3, r2
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	4413      	add	r3, r2
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	440b      	add	r3, r1
 8003940:	3310      	adds	r3, #16
 8003942:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003944:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 8003946:	4916      	ldr	r1, [pc, #88]	; (80039a0 <I2C_Compute_SCLL_SCLH+0x208>)
 8003948:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800394a:	4613      	mov	r3, r2
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	4413      	add	r3, r2
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	440b      	add	r3, r1
 8003954:	330c      	adds	r3, #12
 8003956:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003958:	601a      	str	r2, [r3, #0]
              ret = count;
 800395a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800395c:	647b      	str	r3, [r7, #68]	; 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800395e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003960:	3301      	adds	r3, #1
 8003962:	63bb      	str	r3, [r7, #56]	; 0x38
 8003964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003966:	2bff      	cmp	r3, #255	; 0xff
 8003968:	d999      	bls.n	800389e <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800396a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800396c:	3301      	adds	r3, #1
 800396e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003970:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003972:	2bff      	cmp	r3, #255	; 0xff
 8003974:	f67f af6f 	bls.w	8003856 <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8003978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800397a:	3301      	adds	r3, #1
 800397c:	637b      	str	r3, [r7, #52]	; 0x34
 800397e:	4b09      	ldr	r3, [pc, #36]	; (80039a4 <I2C_Compute_SCLL_SCLH+0x20c>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003984:	429a      	cmp	r2, r3
 8003986:	f4ff af56 	bcc.w	8003836 <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 800398a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800398c:	4618      	mov	r0, r3
 800398e:	374c      	adds	r7, #76	; 0x4c
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr
 8003998:	3b9aca00 	.word	0x3b9aca00
 800399c:	0801cc38 	.word	0x0801cc38
 80039a0:	20002108 	.word	0x20002108
 80039a4:	20002b08 	.word	0x20002b08

080039a8 <I2C2_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  hI2c  I2C handler
  * @retval None
  */
static void I2C2_MspInit(const I2C_HandleTypeDef *hI2c)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b08a      	sub	sp, #40	; 0x28
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hI2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C2_SCL_GPIO_CLK_ENABLE();
 80039b0:	4b2e      	ldr	r3, [pc, #184]	; (8003a6c <I2C2_MspInit+0xc4>)
 80039b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039b6:	4a2d      	ldr	r2, [pc, #180]	; (8003a6c <I2C2_MspInit+0xc4>)
 80039b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039bc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80039c0:	4b2a      	ldr	r3, [pc, #168]	; (8003a6c <I2C2_MspInit+0xc4>)
 80039c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ca:	613b      	str	r3, [r7, #16]
 80039cc:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C2_SDA_GPIO_CLK_ENABLE();
 80039ce:	4b27      	ldr	r3, [pc, #156]	; (8003a6c <I2C2_MspInit+0xc4>)
 80039d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039d4:	4a25      	ldr	r2, [pc, #148]	; (8003a6c <I2C2_MspInit+0xc4>)
 80039d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039da:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80039de:	4b23      	ldr	r3, [pc, #140]	; (8003a6c <I2C2_MspInit+0xc4>)
 80039e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039e8:	60fb      	str	r3, [r7, #12]
 80039ea:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin     = BUS_I2C2_SCL_PIN;
 80039ec:	2310      	movs	r3, #16
 80039ee:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode    = GPIO_MODE_AF_OD;
 80039f0:	2312      	movs	r3, #18
 80039f2:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull    = GPIO_PULLUP;
 80039f4:	2301      	movs	r3, #1
 80039f6:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed             = GPIO_SPEED_FREQ_HIGH;
 80039f8:	2302      	movs	r3, #2
 80039fa:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate         = BUS_I2C2_SCL_AF;
 80039fc:	2304      	movs	r3, #4
 80039fe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C2_SCL_GPIO_PORT, &gpio_init_structure);
 8003a00:	f107 0314 	add.w	r3, r7, #20
 8003a04:	4619      	mov	r1, r3
 8003a06:	481a      	ldr	r0, [pc, #104]	; (8003a70 <I2C2_MspInit+0xc8>)
 8003a08:	f006 fb80 	bl	800a10c <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin     = BUS_I2C2_SDA_PIN;
 8003a0c:	2320      	movs	r3, #32
 8003a0e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode    = GPIO_MODE_AF_OD;
 8003a10:	2312      	movs	r3, #18
 8003a12:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull    = GPIO_PULLUP;
 8003a14:	2301      	movs	r3, #1
 8003a16:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed             = GPIO_SPEED_FREQ_HIGH;
 8003a18:	2302      	movs	r3, #2
 8003a1a:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate         = BUS_I2C2_SDA_AF;
 8003a1c:	2304      	movs	r3, #4
 8003a1e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C2_SDA_GPIO_PORT, &gpio_init_structure);
 8003a20:	f107 0314 	add.w	r3, r7, #20
 8003a24:	4619      	mov	r1, r3
 8003a26:	4812      	ldr	r0, [pc, #72]	; (8003a70 <I2C2_MspInit+0xc8>)
 8003a28:	f006 fb70 	bl	800a10c <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C2_CLK_ENABLE();
 8003a2c:	4b0f      	ldr	r3, [pc, #60]	; (8003a6c <I2C2_MspInit+0xc4>)
 8003a2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a32:	4a0e      	ldr	r2, [pc, #56]	; (8003a6c <I2C2_MspInit+0xc4>)
 8003a34:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003a38:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003a3c:	4b0b      	ldr	r3, [pc, #44]	; (8003a6c <I2C2_MspInit+0xc4>)
 8003a3e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a46:	60bb      	str	r3, [r7, #8]
 8003a48:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C2_FORCE_RESET();
 8003a4a:	4b08      	ldr	r3, [pc, #32]	; (8003a6c <I2C2_MspInit+0xc4>)
 8003a4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a4e:	4a07      	ldr	r2, [pc, #28]	; (8003a6c <I2C2_MspInit+0xc4>)
 8003a50:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003a54:	6753      	str	r3, [r2, #116]	; 0x74

  /* Release the I2C peripheral clock reset */
  BUS_I2C2_RELEASE_RESET();
 8003a56:	4b05      	ldr	r3, [pc, #20]	; (8003a6c <I2C2_MspInit+0xc4>)
 8003a58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a5a:	4a04      	ldr	r2, [pc, #16]	; (8003a6c <I2C2_MspInit+0xc4>)
 8003a5c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003a60:	6753      	str	r3, [r2, #116]	; 0x74
}
 8003a62:	bf00      	nop
 8003a64:	3728      	adds	r7, #40	; 0x28
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	46020c00 	.word	0x46020c00
 8003a70:	42021c00 	.word	0x42021c00

08003a74 <I2C2_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  hI2c  I2C handler
  * @retval None
  */
static void I2C2_MspDeInit(const I2C_HandleTypeDef *hI2c)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b088      	sub	sp, #32
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hI2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C2_SCL_PIN;
 8003a7c:	2310      	movs	r3, #16
 8003a7e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C2_SCL_GPIO_PORT, gpio_init_structure.Pin);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	4619      	mov	r1, r3
 8003a84:	480a      	ldr	r0, [pc, #40]	; (8003ab0 <I2C2_MspDeInit+0x3c>)
 8003a86:	f006 fd19 	bl	800a4bc <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C2_SDA_PIN;
 8003a8a:	2320      	movs	r3, #32
 8003a8c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C2_SDA_GPIO_PORT, gpio_init_structure.Pin);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	4619      	mov	r1, r3
 8003a92:	4807      	ldr	r0, [pc, #28]	; (8003ab0 <I2C2_MspDeInit+0x3c>)
 8003a94:	f006 fd12 	bl	800a4bc <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C2_CLK_DISABLE();
 8003a98:	4b06      	ldr	r3, [pc, #24]	; (8003ab4 <I2C2_MspDeInit+0x40>)
 8003a9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a9e:	4a05      	ldr	r2, [pc, #20]	; (8003ab4 <I2C2_MspDeInit+0x40>)
 8003aa0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003aa4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
}
 8003aa8:	bf00      	nop
 8003aaa:	3720      	adds	r7, #32
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	42021c00 	.word	0x42021c00
 8003ab4:	46020c00 	.word	0x46020c00

08003ab8 <I2C2_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C2_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b088      	sub	sp, #32
 8003abc:	af04      	add	r7, sp, #16
 8003abe:	607b      	str	r3, [r7, #4]
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	81fb      	strh	r3, [r7, #14]
 8003ac4:	460b      	mov	r3, r1
 8003ac6:	81bb      	strh	r3, [r7, #12]
 8003ac8:	4613      	mov	r3, r2
 8003aca:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Write(&hbus_i2c2, DevAddr, Reg, MemAddSize, pData, Length, 10000) == HAL_OK)
 8003acc:	8978      	ldrh	r0, [r7, #10]
 8003ace:	89ba      	ldrh	r2, [r7, #12]
 8003ad0:	89f9      	ldrh	r1, [r7, #14]
 8003ad2:	f242 7310 	movw	r3, #10000	; 0x2710
 8003ad6:	9302      	str	r3, [sp, #8]
 8003ad8:	8b3b      	ldrh	r3, [r7, #24]
 8003ada:	9301      	str	r3, [sp, #4]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	9300      	str	r3, [sp, #0]
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	4807      	ldr	r0, [pc, #28]	; (8003b00 <I2C2_WriteReg+0x48>)
 8003ae4:	f006 ff22 	bl	800a92c <HAL_I2C_Mem_Write>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d101      	bne.n	8003af2 <I2C2_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
 8003aee:	2300      	movs	r3, #0
 8003af0:	e001      	b.n	8003af6 <I2C2_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 8003af2:	f06f 0307 	mvn.w	r3, #7
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3710      	adds	r7, #16
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	20002b0c 	.word	0x20002b0c

08003b04 <I2C2_ReadReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C2_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b088      	sub	sp, #32
 8003b08:	af04      	add	r7, sp, #16
 8003b0a:	607b      	str	r3, [r7, #4]
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	81fb      	strh	r3, [r7, #14]
 8003b10:	460b      	mov	r3, r1
 8003b12:	81bb      	strh	r3, [r7, #12]
 8003b14:	4613      	mov	r3, r2
 8003b16:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c2, DevAddr, Reg, MemAddSize, pData, Length, 10000) == HAL_OK)
 8003b18:	8978      	ldrh	r0, [r7, #10]
 8003b1a:	89ba      	ldrh	r2, [r7, #12]
 8003b1c:	89f9      	ldrh	r1, [r7, #14]
 8003b1e:	f242 7310 	movw	r3, #10000	; 0x2710
 8003b22:	9302      	str	r3, [sp, #8]
 8003b24:	8b3b      	ldrh	r3, [r7, #24]
 8003b26:	9301      	str	r3, [sp, #4]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	9300      	str	r3, [sp, #0]
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	4807      	ldr	r0, [pc, #28]	; (8003b4c <I2C2_ReadReg+0x48>)
 8003b30:	f007 f810 	bl	800ab54 <HAL_I2C_Mem_Read>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d101      	bne.n	8003b3e <I2C2_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	e001      	b.n	8003b42 <I2C2_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 8003b3e:	f06f 0307 	mvn.w	r3, #7
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3710      	adds	r7, #16
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	20002b0c 	.word	0x20002b0c

08003b50 <BSP_MOTION_SENSOR_Init>:
  *         - MOTION_GYRO and/or MOTION_ACCELERO for instance 0
  *         - MOTION_MAGNETO for instance 1
  * @retval BSP status.
  */
int32_t BSP_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	6039      	str	r1, [r7, #0]
  int32_t status = BSP_ERROR_NONE;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	60fb      	str	r3, [r7, #12]

  if (Instance >= MOTION_SENSOR_INSTANCES_NBR)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d903      	bls.n	8003b6c <BSP_MOTION_SENSOR_Init+0x1c>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8003b64:	f06f 0301 	mvn.w	r3, #1
 8003b68:	60fb      	str	r3, [r7, #12]
 8003b6a:	e036      	b.n	8003bda <BSP_MOTION_SENSOR_Init+0x8a>
  }
  else if (((Instance == 0U) && ((Functions & MOTION_MAGNETO) != 0U))
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d104      	bne.n	8003b7c <BSP_MOTION_SENSOR_Init+0x2c>
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	f003 0304 	and.w	r3, r3, #4
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d107      	bne.n	8003b8c <BSP_MOTION_SENSOR_Init+0x3c>
           || ((Instance == 1U) && ((Functions & (MOTION_GYRO | MOTION_ACCELERO)) != 0U)))
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d108      	bne.n	8003b94 <BSP_MOTION_SENSOR_Init+0x44>
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	f003 0303 	and.w	r3, r3, #3
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d003      	beq.n	8003b94 <BSP_MOTION_SENSOR_Init+0x44>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8003b8c:	f06f 030a 	mvn.w	r3, #10
 8003b90:	60fb      	str	r3, [r7, #12]
 8003b92:	e022      	b.n	8003bda <BSP_MOTION_SENSOR_Init+0x8a>
  }
  else
  {
    /* Probe the motion sensor */
    if (Instance == 0U)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d109      	bne.n	8003bae <BSP_MOTION_SENSOR_Init+0x5e>
    {
      /* Probe the ISM330DHCX sensor */
      if (ISM330DHCX_Probe(Functions) != BSP_ERROR_NONE)
 8003b9a:	6838      	ldr	r0, [r7, #0]
 8003b9c:	f000 fb34 	bl	8004208 <ISM330DHCX_Probe>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d00c      	beq.n	8003bc0 <BSP_MOTION_SENSOR_Init+0x70>
      {
        status = BSP_ERROR_COMPONENT_FAILURE;
 8003ba6:	f06f 0304 	mvn.w	r3, #4
 8003baa:	60fb      	str	r3, [r7, #12]
 8003bac:	e008      	b.n	8003bc0 <BSP_MOTION_SENSOR_Init+0x70>
      }
    }
    else /* Instance = 1 */
    {
      /* Probe the IIS2MDC sensor */
      if (IIS2MDC_Probe(Functions) != BSP_ERROR_NONE)
 8003bae:	6838      	ldr	r0, [r7, #0]
 8003bb0:	f000 fba0 	bl	80042f4 <IIS2MDC_Probe>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d002      	beq.n	8003bc0 <BSP_MOTION_SENSOR_Init+0x70>
      {
        status = BSP_ERROR_COMPONENT_FAILURE;
 8003bba:	f06f 0304 	mvn.w	r3, #4
 8003bbe:	60fb      	str	r3, [r7, #12]
      }
    }

    if (status == BSP_ERROR_NONE)
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d109      	bne.n	8003bda <BSP_MOTION_SENSOR_Init+0x8a>
    {
      /* Store current initialized functions */
      Motion_Sensor_Ctx[Instance].Functions |= Functions;
 8003bc6:	4a07      	ldr	r2, [pc, #28]	; (8003be4 <BSP_MOTION_SENSOR_Init+0x94>)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	431a      	orrs	r2, r3
 8003bd2:	4904      	ldr	r1, [pc, #16]	; (8003be4 <BSP_MOTION_SENSOR_Init+0x94>)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
  }
  return status;
 8003bda:	68fb      	ldr	r3, [r7, #12]
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3710      	adds	r7, #16
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	20002b60 	.word	0x20002b60

08003be8 <BSP_MOTION_SENSOR_GetCapabilities>:
  * @param  Instance Motion sensor instance.
  * @param  Capabilities Pointer to motion sensor capabilities.
  * @retval BSP status.
  */
int32_t BSP_MOTION_SENSOR_GetCapabilities(const uint32_t Instance, MOTION_SENSOR_Capabilities_t *Capabilities)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b084      	sub	sp, #16
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
 8003bf0:	6039      	str	r1, [r7, #0]
  int32_t status = BSP_ERROR_NONE;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	60fb      	str	r3, [r7, #12]

  if ((Instance >= MOTION_SENSOR_INSTANCES_NBR) || (Capabilities == NULL))
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d802      	bhi.n	8003c02 <BSP_MOTION_SENSOR_GetCapabilities+0x1a>
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d103      	bne.n	8003c0a <BSP_MOTION_SENSOR_GetCapabilities+0x22>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8003c02:	f06f 0301 	mvn.w	r3, #1
 8003c06:	60fb      	str	r3, [r7, #12]
 8003c08:	e01b      	b.n	8003c42 <BSP_MOTION_SENSOR_GetCapabilities+0x5a>
  }
  else if (Motion_Sensor_Ctx[Instance].Functions == 0U)
 8003c0a:	4a10      	ldr	r2, [pc, #64]	; (8003c4c <BSP_MOTION_SENSOR_GetCapabilities+0x64>)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d103      	bne.n	8003c1e <BSP_MOTION_SENSOR_GetCapabilities+0x36>
  {
    /* Driver not initialized */
    status = BSP_ERROR_NO_INIT;
 8003c16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c1a:	60fb      	str	r3, [r7, #12]
 8003c1c:	e011      	b.n	8003c42 <BSP_MOTION_SENSOR_GetCapabilities+0x5a>
  }
  else
  {
    /* Get the capabilities of the motion sensor */
    if (Motion_Sensor_Drv[Instance]->GetCapabilities(Motion_Sensor_CompObj[Instance], Capabilities) < 0)
 8003c1e:	4a0c      	ldr	r2, [pc, #48]	; (8003c50 <BSP_MOTION_SENSOR_GetCapabilities+0x68>)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	490a      	ldr	r1, [pc, #40]	; (8003c54 <BSP_MOTION_SENSOR_GetCapabilities+0x6c>)
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003c30:	6839      	ldr	r1, [r7, #0]
 8003c32:	4610      	mov	r0, r2
 8003c34:	4798      	blx	r3
 8003c36:	4603      	mov	r3, r0
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	da02      	bge.n	8003c42 <BSP_MOTION_SENSOR_GetCapabilities+0x5a>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8003c3c:	f06f 0304 	mvn.w	r3, #4
 8003c40:	60fb      	str	r3, [r7, #12]
    }
  }

  return status;
 8003c42:	68fb      	ldr	r3, [r7, #12]
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3710      	adds	r7, #16
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	20002b60 	.word	0x20002b60
 8003c50:	20002b70 	.word	0x20002b70
 8003c54:	20002b68 	.word	0x20002b68

08003c58 <BSP_MOTION_SENSOR_ReadID>:
  * @param  Instance Motion sensor instance.
  * @param  Id Pointer to motion sensor ID.
  * @retval BSP status.
  */
int32_t BSP_MOTION_SENSOR_ReadID(const uint32_t Instance, uint8_t *Id)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b084      	sub	sp, #16
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	6039      	str	r1, [r7, #0]
  int32_t status = BSP_ERROR_NONE;
 8003c62:	2300      	movs	r3, #0
 8003c64:	60fb      	str	r3, [r7, #12]

  if ((Instance >= MOTION_SENSOR_INSTANCES_NBR) || (Id == NULL))
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d802      	bhi.n	8003c72 <BSP_MOTION_SENSOR_ReadID+0x1a>
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d103      	bne.n	8003c7a <BSP_MOTION_SENSOR_ReadID+0x22>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8003c72:	f06f 0301 	mvn.w	r3, #1
 8003c76:	60fb      	str	r3, [r7, #12]
 8003c78:	e01b      	b.n	8003cb2 <BSP_MOTION_SENSOR_ReadID+0x5a>
  }
  else if (Motion_Sensor_Ctx[Instance].Functions == 0U)
 8003c7a:	4a10      	ldr	r2, [pc, #64]	; (8003cbc <BSP_MOTION_SENSOR_ReadID+0x64>)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d103      	bne.n	8003c8e <BSP_MOTION_SENSOR_ReadID+0x36>
  {
    /* Driver not initialized */
    status = BSP_ERROR_NO_INIT;
 8003c86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c8a:	60fb      	str	r3, [r7, #12]
 8003c8c:	e011      	b.n	8003cb2 <BSP_MOTION_SENSOR_ReadID+0x5a>
  }
  else
  {
    /* Read the motion sensor ID */
    if (Motion_Sensor_Drv[Instance]->ReadID(Motion_Sensor_CompObj[Instance], Id) < 0)
 8003c8e:	4a0c      	ldr	r2, [pc, #48]	; (8003cc0 <BSP_MOTION_SENSOR_ReadID+0x68>)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	490a      	ldr	r1, [pc, #40]	; (8003cc4 <BSP_MOTION_SENSOR_ReadID+0x6c>)
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003ca0:	6839      	ldr	r1, [r7, #0]
 8003ca2:	4610      	mov	r0, r2
 8003ca4:	4798      	blx	r3
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	da02      	bge.n	8003cb2 <BSP_MOTION_SENSOR_ReadID+0x5a>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8003cac:	f06f 0304 	mvn.w	r3, #4
 8003cb0:	60fb      	str	r3, [r7, #12]
    }
  }

  return status;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3710      	adds	r7, #16
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}
 8003cbc:	20002b60 	.word	0x20002b60
 8003cc0:	20002b70 	.word	0x20002b70
 8003cc4:	20002b68 	.word	0x20002b68

08003cc8 <BSP_MOTION_SENSOR_Enable>:
  *         - MOTION_GYRO or MOTION_ACCELERO for instance 0
  *         - MOTION_MAGNETO for instance 1
  * @retval BSP status.
  */
int32_t BSP_MOTION_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
 8003cd0:	6039      	str	r1, [r7, #0]
  int32_t status = BSP_ERROR_NONE;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	60fb      	str	r3, [r7, #12]
  uint8_t index;

  if (Instance >= MOTION_SENSOR_INSTANCES_NBR)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d903      	bls.n	8003ce4 <BSP_MOTION_SENSOR_Enable+0x1c>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8003cdc:	f06f 0301 	mvn.w	r3, #1
 8003ce0:	60fb      	str	r3, [r7, #12]
 8003ce2:	e041      	b.n	8003d68 <BSP_MOTION_SENSOR_Enable+0xa0>
  }
  else if (((Instance == 0U) && ((Function & MOTION_MAGNETO) != 0U))
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d104      	bne.n	8003cf4 <BSP_MOTION_SENSOR_Enable+0x2c>
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	f003 0304 	and.w	r3, r3, #4
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d107      	bne.n	8003d04 <BSP_MOTION_SENSOR_Enable+0x3c>
           || ((Instance == 1U) && ((Function & (MOTION_GYRO | MOTION_ACCELERO)) != 0U)))
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d108      	bne.n	8003d0c <BSP_MOTION_SENSOR_Enable+0x44>
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	f003 0303 	and.w	r3, r3, #3
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d003      	beq.n	8003d0c <BSP_MOTION_SENSOR_Enable+0x44>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8003d04:	f06f 030a 	mvn.w	r3, #10
 8003d08:	60fb      	str	r3, [r7, #12]
 8003d0a:	e02d      	b.n	8003d68 <BSP_MOTION_SENSOR_Enable+0xa0>
  }
  else if ((Motion_Sensor_Ctx[Instance].Functions & Function) == 0U)
 8003d0c:	4a19      	ldr	r2, [pc, #100]	; (8003d74 <BSP_MOTION_SENSOR_Enable+0xac>)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	4013      	ands	r3, r2
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d103      	bne.n	8003d24 <BSP_MOTION_SENSOR_Enable+0x5c>
  {
    /* Driver not initialized */
    status = BSP_ERROR_NO_INIT;
 8003d1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003d20:	60fb      	str	r3, [r7, #12]
 8003d22:	e021      	b.n	8003d68 <BSP_MOTION_SENSOR_Enable+0xa0>
  }
  else
  {
    /* Enable the motion sensor function */
    index = (Function == MOTION_GYRO) ? GYRO_ID : ((Function == MOTION_ACCELERO) ? ACCELERO_ID : MAGNETO_ID);
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d006      	beq.n	8003d38 <BSP_MOTION_SENSOR_Enable+0x70>
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	2b02      	cmp	r3, #2
 8003d2e:	d101      	bne.n	8003d34 <BSP_MOTION_SENSOR_Enable+0x6c>
 8003d30:	2301      	movs	r3, #1
 8003d32:	e002      	b.n	8003d3a <BSP_MOTION_SENSOR_Enable+0x72>
 8003d34:	2302      	movs	r3, #2
 8003d36:	e000      	b.n	8003d3a <BSP_MOTION_SENSOR_Enable+0x72>
 8003d38:	2300      	movs	r3, #0
 8003d3a:	72fb      	strb	r3, [r7, #11]
    if (Motion_Sensor_FuncDrv[Instance][index]->Enable(Motion_Sensor_CompObj[Instance]) < 0)
 8003d3c:	7af9      	ldrb	r1, [r7, #11]
 8003d3e:	480e      	ldr	r0, [pc, #56]	; (8003d78 <BSP_MOTION_SENSOR_Enable+0xb0>)
 8003d40:	687a      	ldr	r2, [r7, #4]
 8003d42:	4613      	mov	r3, r2
 8003d44:	005b      	lsls	r3, r3, #1
 8003d46:	4413      	add	r3, r2
 8003d48:	440b      	add	r3, r1
 8003d4a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	490a      	ldr	r1, [pc, #40]	; (8003d7c <BSP_MOTION_SENSOR_Enable+0xb4>)
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003d58:	4610      	mov	r0, r2
 8003d5a:	4798      	blx	r3
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	da02      	bge.n	8003d68 <BSP_MOTION_SENSOR_Enable+0xa0>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8003d62:	f06f 0304 	mvn.w	r3, #4
 8003d66:	60fb      	str	r3, [r7, #12]
    }
  }

  return status;
 8003d68:	68fb      	ldr	r3, [r7, #12]
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3710      	adds	r7, #16
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	20002b60 	.word	0x20002b60
 8003d78:	20002b78 	.word	0x20002b78
 8003d7c:	20002b68 	.word	0x20002b68

08003d80 <BSP_MOTION_SENSOR_GetAxes>:
  *         - MOTION_MAGNETO for instance 1
  * @param  Axes Pointer to motion sensor axes.
  * @retval BSP status.
  */
int32_t BSP_MOTION_SENSOR_GetAxes(const uint32_t Instance, uint32_t Function, BSP_MOTION_SENSOR_Axes_t *Axes)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b086      	sub	sp, #24
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	60f8      	str	r0, [r7, #12]
 8003d88:	60b9      	str	r1, [r7, #8]
 8003d8a:	607a      	str	r2, [r7, #4]
  int32_t status = BSP_ERROR_NONE;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	617b      	str	r3, [r7, #20]
  uint8_t index;

  if ((Instance >= MOTION_SENSOR_INSTANCES_NBR) || (Axes == NULL))
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d802      	bhi.n	8003d9c <BSP_MOTION_SENSOR_GetAxes+0x1c>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d103      	bne.n	8003da4 <BSP_MOTION_SENSOR_GetAxes+0x24>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8003d9c:	f06f 0301 	mvn.w	r3, #1
 8003da0:	617b      	str	r3, [r7, #20]
 8003da2:	e042      	b.n	8003e2a <BSP_MOTION_SENSOR_GetAxes+0xaa>
  }
  else if (((Instance == 0U) && ((Function & MOTION_MAGNETO) != 0U))
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d104      	bne.n	8003db4 <BSP_MOTION_SENSOR_GetAxes+0x34>
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	f003 0304 	and.w	r3, r3, #4
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d107      	bne.n	8003dc4 <BSP_MOTION_SENSOR_GetAxes+0x44>
           || ((Instance == 1U) && ((Function & (MOTION_GYRO | MOTION_ACCELERO)) != 0U)))
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d108      	bne.n	8003dcc <BSP_MOTION_SENSOR_GetAxes+0x4c>
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	f003 0303 	and.w	r3, r3, #3
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d003      	beq.n	8003dcc <BSP_MOTION_SENSOR_GetAxes+0x4c>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8003dc4:	f06f 030a 	mvn.w	r3, #10
 8003dc8:	617b      	str	r3, [r7, #20]
 8003dca:	e02e      	b.n	8003e2a <BSP_MOTION_SENSOR_GetAxes+0xaa>
  }
  else if ((Motion_Sensor_Ctx[Instance].Functions & Function) == 0U)
 8003dcc:	4a19      	ldr	r2, [pc, #100]	; (8003e34 <BSP_MOTION_SENSOR_GetAxes+0xb4>)
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d103      	bne.n	8003de4 <BSP_MOTION_SENSOR_GetAxes+0x64>
  {
    status = BSP_ERROR_NO_INIT;
 8003ddc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003de0:	617b      	str	r3, [r7, #20]
 8003de2:	e022      	b.n	8003e2a <BSP_MOTION_SENSOR_GetAxes+0xaa>
  }
  else
  {
    /* Get the motion sensor axes */
    index = (Function == MOTION_GYRO) ? GYRO_ID : ((Function == MOTION_ACCELERO) ? ACCELERO_ID : MAGNETO_ID);
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d006      	beq.n	8003df8 <BSP_MOTION_SENSOR_GetAxes+0x78>
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	2b02      	cmp	r3, #2
 8003dee:	d101      	bne.n	8003df4 <BSP_MOTION_SENSOR_GetAxes+0x74>
 8003df0:	2301      	movs	r3, #1
 8003df2:	e002      	b.n	8003dfa <BSP_MOTION_SENSOR_GetAxes+0x7a>
 8003df4:	2302      	movs	r3, #2
 8003df6:	e000      	b.n	8003dfa <BSP_MOTION_SENSOR_GetAxes+0x7a>
 8003df8:	2300      	movs	r3, #0
 8003dfa:	74fb      	strb	r3, [r7, #19]
    if (Motion_Sensor_FuncDrv[Instance][index]->GetAxes(Motion_Sensor_CompObj[Instance], Axes) < 0)
 8003dfc:	7cf9      	ldrb	r1, [r7, #19]
 8003dfe:	480e      	ldr	r0, [pc, #56]	; (8003e38 <BSP_MOTION_SENSOR_GetAxes+0xb8>)
 8003e00:	68fa      	ldr	r2, [r7, #12]
 8003e02:	4613      	mov	r3, r2
 8003e04:	005b      	lsls	r3, r3, #1
 8003e06:	4413      	add	r3, r2
 8003e08:	440b      	add	r3, r1
 8003e0a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003e0e:	69db      	ldr	r3, [r3, #28]
 8003e10:	490a      	ldr	r1, [pc, #40]	; (8003e3c <BSP_MOTION_SENSOR_GetAxes+0xbc>)
 8003e12:	68fa      	ldr	r2, [r7, #12]
 8003e14:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003e18:	6879      	ldr	r1, [r7, #4]
 8003e1a:	4610      	mov	r0, r2
 8003e1c:	4798      	blx	r3
 8003e1e:	4603      	mov	r3, r0
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	da02      	bge.n	8003e2a <BSP_MOTION_SENSOR_GetAxes+0xaa>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8003e24:	f06f 0304 	mvn.w	r3, #4
 8003e28:	617b      	str	r3, [r7, #20]
    }
  }

  return status;
 8003e2a:	697b      	ldr	r3, [r7, #20]
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3718      	adds	r7, #24
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}
 8003e34:	20002b60 	.word	0x20002b60
 8003e38:	20002b78 	.word	0x20002b78
 8003e3c:	20002b68 	.word	0x20002b68

08003e40 <BSP_MOTION_SENSOR_GetSensitivity>:
  *         - MOTION_MAGNETO for instance 1
  * @param  Sensitivity Pointer to sensitivity.
  * @retval BSP status.
  */
int32_t BSP_MOTION_SENSOR_GetSensitivity(const uint32_t Instance, uint32_t Function, float_t *Sensitivity)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b086      	sub	sp, #24
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	60f8      	str	r0, [r7, #12]
 8003e48:	60b9      	str	r1, [r7, #8]
 8003e4a:	607a      	str	r2, [r7, #4]
  int32_t status = BSP_ERROR_NONE;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	617b      	str	r3, [r7, #20]
  uint8_t index;

  if ((Instance >= MOTION_SENSOR_INSTANCES_NBR) || (Sensitivity == NULL))
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d802      	bhi.n	8003e5c <BSP_MOTION_SENSOR_GetSensitivity+0x1c>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d103      	bne.n	8003e64 <BSP_MOTION_SENSOR_GetSensitivity+0x24>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8003e5c:	f06f 0301 	mvn.w	r3, #1
 8003e60:	617b      	str	r3, [r7, #20]
 8003e62:	e042      	b.n	8003eea <BSP_MOTION_SENSOR_GetSensitivity+0xaa>
  }
  else if (((Instance == 0U) && ((Function & MOTION_MAGNETO) != 0U))
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d104      	bne.n	8003e74 <BSP_MOTION_SENSOR_GetSensitivity+0x34>
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	f003 0304 	and.w	r3, r3, #4
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d107      	bne.n	8003e84 <BSP_MOTION_SENSOR_GetSensitivity+0x44>
           || ((Instance == 1U) && ((Function & (MOTION_GYRO | MOTION_ACCELERO)) != 0U)))
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d108      	bne.n	8003e8c <BSP_MOTION_SENSOR_GetSensitivity+0x4c>
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	f003 0303 	and.w	r3, r3, #3
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d003      	beq.n	8003e8c <BSP_MOTION_SENSOR_GetSensitivity+0x4c>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8003e84:	f06f 030a 	mvn.w	r3, #10
 8003e88:	617b      	str	r3, [r7, #20]
 8003e8a:	e02e      	b.n	8003eea <BSP_MOTION_SENSOR_GetSensitivity+0xaa>
  }
  else if ((Motion_Sensor_Ctx[Instance].Functions & Function) == 0U)
 8003e8c:	4a19      	ldr	r2, [pc, #100]	; (8003ef4 <BSP_MOTION_SENSOR_GetSensitivity+0xb4>)
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	4013      	ands	r3, r2
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d103      	bne.n	8003ea4 <BSP_MOTION_SENSOR_GetSensitivity+0x64>
  {
    status = BSP_ERROR_NO_INIT;
 8003e9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003ea0:	617b      	str	r3, [r7, #20]
 8003ea2:	e022      	b.n	8003eea <BSP_MOTION_SENSOR_GetSensitivity+0xaa>
  }
  else
  {
    /* Get the motion sensor sensitivity */
    index = (Function == MOTION_GYRO) ? GYRO_ID : ((Function == MOTION_ACCELERO) ? ACCELERO_ID : MAGNETO_ID);
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d006      	beq.n	8003eb8 <BSP_MOTION_SENSOR_GetSensitivity+0x78>
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	2b02      	cmp	r3, #2
 8003eae:	d101      	bne.n	8003eb4 <BSP_MOTION_SENSOR_GetSensitivity+0x74>
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e002      	b.n	8003eba <BSP_MOTION_SENSOR_GetSensitivity+0x7a>
 8003eb4:	2302      	movs	r3, #2
 8003eb6:	e000      	b.n	8003eba <BSP_MOTION_SENSOR_GetSensitivity+0x7a>
 8003eb8:	2300      	movs	r3, #0
 8003eba:	74fb      	strb	r3, [r7, #19]
    if (Motion_Sensor_FuncDrv[Instance][index]->GetSensitivity(Motion_Sensor_CompObj[Instance], Sensitivity) < 0)
 8003ebc:	7cf9      	ldrb	r1, [r7, #19]
 8003ebe:	480e      	ldr	r0, [pc, #56]	; (8003ef8 <BSP_MOTION_SENSOR_GetSensitivity+0xb8>)
 8003ec0:	68fa      	ldr	r2, [r7, #12]
 8003ec2:	4613      	mov	r3, r2
 8003ec4:	005b      	lsls	r3, r3, #1
 8003ec6:	4413      	add	r3, r2
 8003ec8:	440b      	add	r3, r1
 8003eca:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	490a      	ldr	r1, [pc, #40]	; (8003efc <BSP_MOTION_SENSOR_GetSensitivity+0xbc>)
 8003ed2:	68fa      	ldr	r2, [r7, #12]
 8003ed4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003ed8:	6879      	ldr	r1, [r7, #4]
 8003eda:	4610      	mov	r0, r2
 8003edc:	4798      	blx	r3
 8003ede:	4603      	mov	r3, r0
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	da02      	bge.n	8003eea <BSP_MOTION_SENSOR_GetSensitivity+0xaa>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8003ee4:	f06f 0304 	mvn.w	r3, #4
 8003ee8:	617b      	str	r3, [r7, #20]
    }
  }

  return status;
 8003eea:	697b      	ldr	r3, [r7, #20]
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3718      	adds	r7, #24
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	20002b60 	.word	0x20002b60
 8003ef8:	20002b78 	.word	0x20002b78
 8003efc:	20002b68 	.word	0x20002b68

08003f00 <BSP_MOTION_SENSOR_GetOutputDataRate>:
  *         - MOTION_MAGNETO for instance 1
  * @param  Odr Pointer to output data rate.
  * @retval BSP status.
  */
int32_t BSP_MOTION_SENSOR_GetOutputDataRate(const uint32_t Instance, uint32_t Function, float_t *Odr)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b086      	sub	sp, #24
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	60b9      	str	r1, [r7, #8]
 8003f0a:	607a      	str	r2, [r7, #4]
  int32_t status = BSP_ERROR_NONE;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	617b      	str	r3, [r7, #20]
  uint8_t index;

  if ((Instance >= MOTION_SENSOR_INSTANCES_NBR) || (Odr == NULL))
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d802      	bhi.n	8003f1c <BSP_MOTION_SENSOR_GetOutputDataRate+0x1c>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d103      	bne.n	8003f24 <BSP_MOTION_SENSOR_GetOutputDataRate+0x24>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8003f1c:	f06f 0301 	mvn.w	r3, #1
 8003f20:	617b      	str	r3, [r7, #20]
 8003f22:	e042      	b.n	8003faa <BSP_MOTION_SENSOR_GetOutputDataRate+0xaa>
  }
  else if (((Instance == 0U) && ((Function & MOTION_MAGNETO) != 0U))
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d104      	bne.n	8003f34 <BSP_MOTION_SENSOR_GetOutputDataRate+0x34>
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	f003 0304 	and.w	r3, r3, #4
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d107      	bne.n	8003f44 <BSP_MOTION_SENSOR_GetOutputDataRate+0x44>
           || ((Instance == 1U) && ((Function & (MOTION_GYRO | MOTION_ACCELERO)) != 0U)))
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d108      	bne.n	8003f4c <BSP_MOTION_SENSOR_GetOutputDataRate+0x4c>
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	f003 0303 	and.w	r3, r3, #3
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d003      	beq.n	8003f4c <BSP_MOTION_SENSOR_GetOutputDataRate+0x4c>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8003f44:	f06f 030a 	mvn.w	r3, #10
 8003f48:	617b      	str	r3, [r7, #20]
 8003f4a:	e02e      	b.n	8003faa <BSP_MOTION_SENSOR_GetOutputDataRate+0xaa>
  }
  else if ((Motion_Sensor_Ctx[Instance].Functions & Function) == 0U)
 8003f4c:	4a19      	ldr	r2, [pc, #100]	; (8003fb4 <BSP_MOTION_SENSOR_GetOutputDataRate+0xb4>)
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	4013      	ands	r3, r2
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d103      	bne.n	8003f64 <BSP_MOTION_SENSOR_GetOutputDataRate+0x64>
  {
    status = BSP_ERROR_NO_INIT;
 8003f5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f60:	617b      	str	r3, [r7, #20]
 8003f62:	e022      	b.n	8003faa <BSP_MOTION_SENSOR_GetOutputDataRate+0xaa>
  }
  else
  {
    /* Get the motion sensor output data rate */
    index = (Function == MOTION_GYRO) ? GYRO_ID : ((Function == MOTION_ACCELERO) ? ACCELERO_ID : MAGNETO_ID);
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d006      	beq.n	8003f78 <BSP_MOTION_SENSOR_GetOutputDataRate+0x78>
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d101      	bne.n	8003f74 <BSP_MOTION_SENSOR_GetOutputDataRate+0x74>
 8003f70:	2301      	movs	r3, #1
 8003f72:	e002      	b.n	8003f7a <BSP_MOTION_SENSOR_GetOutputDataRate+0x7a>
 8003f74:	2302      	movs	r3, #2
 8003f76:	e000      	b.n	8003f7a <BSP_MOTION_SENSOR_GetOutputDataRate+0x7a>
 8003f78:	2300      	movs	r3, #0
 8003f7a:	74fb      	strb	r3, [r7, #19]
    if (Motion_Sensor_FuncDrv[Instance][index]->GetOutputDataRate(Motion_Sensor_CompObj[Instance], Odr) < 0)
 8003f7c:	7cf9      	ldrb	r1, [r7, #19]
 8003f7e:	480e      	ldr	r0, [pc, #56]	; (8003fb8 <BSP_MOTION_SENSOR_GetOutputDataRate+0xb8>)
 8003f80:	68fa      	ldr	r2, [r7, #12]
 8003f82:	4613      	mov	r3, r2
 8003f84:	005b      	lsls	r3, r3, #1
 8003f86:	4413      	add	r3, r2
 8003f88:	440b      	add	r3, r1
 8003f8a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	490a      	ldr	r1, [pc, #40]	; (8003fbc <BSP_MOTION_SENSOR_GetOutputDataRate+0xbc>)
 8003f92:	68fa      	ldr	r2, [r7, #12]
 8003f94:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003f98:	6879      	ldr	r1, [r7, #4]
 8003f9a:	4610      	mov	r0, r2
 8003f9c:	4798      	blx	r3
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	da02      	bge.n	8003faa <BSP_MOTION_SENSOR_GetOutputDataRate+0xaa>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8003fa4:	f06f 0304 	mvn.w	r3, #4
 8003fa8:	617b      	str	r3, [r7, #20]
    }
  }

  return status;
 8003faa:	697b      	ldr	r3, [r7, #20]
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3718      	adds	r7, #24
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}
 8003fb4:	20002b60 	.word	0x20002b60
 8003fb8:	20002b78 	.word	0x20002b78
 8003fbc:	20002b68 	.word	0x20002b68

08003fc0 <BSP_MOTION_SENSOR_SetOutputDataRate>:
  *         - MOTION_MAGNETO for instance 1
  * @param  Odr Output data rate.
  * @retval BSP status.
  */
int32_t BSP_MOTION_SENSOR_SetOutputDataRate(uint32_t Instance, uint32_t Function, float_t Odr)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b086      	sub	sp, #24
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	60f8      	str	r0, [r7, #12]
 8003fc8:	60b9      	str	r1, [r7, #8]
 8003fca:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t status = BSP_ERROR_NONE;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	617b      	str	r3, [r7, #20]
  uint8_t index;

  if (Instance >= MOTION_SENSOR_INSTANCES_NBR)
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d903      	bls.n	8003fe0 <BSP_MOTION_SENSOR_SetOutputDataRate+0x20>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8003fd8:	f06f 0301 	mvn.w	r3, #1
 8003fdc:	617b      	str	r3, [r7, #20]
 8003fde:	e043      	b.n	8004068 <BSP_MOTION_SENSOR_SetOutputDataRate+0xa8>
  }
  else if (((Instance == 0U) && ((Function & MOTION_MAGNETO) != 0U))
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d104      	bne.n	8003ff0 <BSP_MOTION_SENSOR_SetOutputDataRate+0x30>
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	f003 0304 	and.w	r3, r3, #4
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d107      	bne.n	8004000 <BSP_MOTION_SENSOR_SetOutputDataRate+0x40>
           || ((Instance == 1U) && ((Function & (MOTION_GYRO | MOTION_ACCELERO)) != 0U)))
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d108      	bne.n	8004008 <BSP_MOTION_SENSOR_SetOutputDataRate+0x48>
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	f003 0303 	and.w	r3, r3, #3
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d003      	beq.n	8004008 <BSP_MOTION_SENSOR_SetOutputDataRate+0x48>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8004000:	f06f 030a 	mvn.w	r3, #10
 8004004:	617b      	str	r3, [r7, #20]
 8004006:	e02f      	b.n	8004068 <BSP_MOTION_SENSOR_SetOutputDataRate+0xa8>
  }
  else if ((Motion_Sensor_Ctx[Instance].Functions & Function) == 0U)
 8004008:	4a1a      	ldr	r2, [pc, #104]	; (8004074 <BSP_MOTION_SENSOR_SetOutputDataRate+0xb4>)
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	4013      	ands	r3, r2
 8004014:	2b00      	cmp	r3, #0
 8004016:	d103      	bne.n	8004020 <BSP_MOTION_SENSOR_SetOutputDataRate+0x60>
  {
    status = BSP_ERROR_NO_INIT;
 8004018:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800401c:	617b      	str	r3, [r7, #20]
 800401e:	e023      	b.n	8004068 <BSP_MOTION_SENSOR_SetOutputDataRate+0xa8>
  }
  else
  {
    /* Set the motion sensor output data rate */
    index = (Function == MOTION_GYRO) ? GYRO_ID : ((Function == MOTION_ACCELERO) ? ACCELERO_ID : MAGNETO_ID);
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	2b01      	cmp	r3, #1
 8004024:	d006      	beq.n	8004034 <BSP_MOTION_SENSOR_SetOutputDataRate+0x74>
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	2b02      	cmp	r3, #2
 800402a:	d101      	bne.n	8004030 <BSP_MOTION_SENSOR_SetOutputDataRate+0x70>
 800402c:	2301      	movs	r3, #1
 800402e:	e002      	b.n	8004036 <BSP_MOTION_SENSOR_SetOutputDataRate+0x76>
 8004030:	2302      	movs	r3, #2
 8004032:	e000      	b.n	8004036 <BSP_MOTION_SENSOR_SetOutputDataRate+0x76>
 8004034:	2300      	movs	r3, #0
 8004036:	74fb      	strb	r3, [r7, #19]
    if (Motion_Sensor_FuncDrv[Instance][index]->SetOutputDataRate(Motion_Sensor_CompObj[Instance], Odr) < 0)
 8004038:	7cf9      	ldrb	r1, [r7, #19]
 800403a:	480f      	ldr	r0, [pc, #60]	; (8004078 <BSP_MOTION_SENSOR_SetOutputDataRate+0xb8>)
 800403c:	68fa      	ldr	r2, [r7, #12]
 800403e:	4613      	mov	r3, r2
 8004040:	005b      	lsls	r3, r3, #1
 8004042:	4413      	add	r3, r2
 8004044:	440b      	add	r3, r1
 8004046:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800404a:	691b      	ldr	r3, [r3, #16]
 800404c:	490b      	ldr	r1, [pc, #44]	; (800407c <BSP_MOTION_SENSOR_SetOutputDataRate+0xbc>)
 800404e:	68fa      	ldr	r2, [r7, #12]
 8004050:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004054:	ed97 0a01 	vldr	s0, [r7, #4]
 8004058:	4610      	mov	r0, r2
 800405a:	4798      	blx	r3
 800405c:	4603      	mov	r3, r0
 800405e:	2b00      	cmp	r3, #0
 8004060:	da02      	bge.n	8004068 <BSP_MOTION_SENSOR_SetOutputDataRate+0xa8>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8004062:	f06f 0304 	mvn.w	r3, #4
 8004066:	617b      	str	r3, [r7, #20]
    }
  }

  return status;
 8004068:	697b      	ldr	r3, [r7, #20]
}
 800406a:	4618      	mov	r0, r3
 800406c:	3718      	adds	r7, #24
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	20002b60 	.word	0x20002b60
 8004078:	20002b78 	.word	0x20002b78
 800407c:	20002b68 	.word	0x20002b68

08004080 <BSP_MOTION_SENSOR_GetFullScale>:
  *         - MOTION_MAGNETO for instance 1
  * @param  Fullscale Pointer to full scale value.
  * @retval BSP status.
  */
int32_t BSP_MOTION_SENSOR_GetFullScale(const uint32_t Instance, uint32_t Function, int32_t *Fullscale)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b086      	sub	sp, #24
 8004084:	af00      	add	r7, sp, #0
 8004086:	60f8      	str	r0, [r7, #12]
 8004088:	60b9      	str	r1, [r7, #8]
 800408a:	607a      	str	r2, [r7, #4]
  int32_t status = BSP_ERROR_NONE;
 800408c:	2300      	movs	r3, #0
 800408e:	617b      	str	r3, [r7, #20]
  uint8_t index;

  if ((Instance >= MOTION_SENSOR_INSTANCES_NBR) || (Fullscale == NULL))
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2b01      	cmp	r3, #1
 8004094:	d802      	bhi.n	800409c <BSP_MOTION_SENSOR_GetFullScale+0x1c>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d103      	bne.n	80040a4 <BSP_MOTION_SENSOR_GetFullScale+0x24>
  {
    status = BSP_ERROR_WRONG_PARAM;
 800409c:	f06f 0301 	mvn.w	r3, #1
 80040a0:	617b      	str	r3, [r7, #20]
 80040a2:	e042      	b.n	800412a <BSP_MOTION_SENSOR_GetFullScale+0xaa>
  }
  else if (((Instance == 0U) && ((Function & MOTION_MAGNETO) != 0U))
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d104      	bne.n	80040b4 <BSP_MOTION_SENSOR_GetFullScale+0x34>
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	f003 0304 	and.w	r3, r3, #4
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d107      	bne.n	80040c4 <BSP_MOTION_SENSOR_GetFullScale+0x44>
           || ((Instance == 1U) && ((Function & (MOTION_GYRO | MOTION_ACCELERO)) != 0U)))
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d108      	bne.n	80040cc <BSP_MOTION_SENSOR_GetFullScale+0x4c>
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	f003 0303 	and.w	r3, r3, #3
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d003      	beq.n	80040cc <BSP_MOTION_SENSOR_GetFullScale+0x4c>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 80040c4:	f06f 030a 	mvn.w	r3, #10
 80040c8:	617b      	str	r3, [r7, #20]
 80040ca:	e02e      	b.n	800412a <BSP_MOTION_SENSOR_GetFullScale+0xaa>
  }
  else if ((Motion_Sensor_Ctx[Instance].Functions & Function) == 0U)
 80040cc:	4a19      	ldr	r2, [pc, #100]	; (8004134 <BSP_MOTION_SENSOR_GetFullScale+0xb4>)
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	4013      	ands	r3, r2
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d103      	bne.n	80040e4 <BSP_MOTION_SENSOR_GetFullScale+0x64>
  {
    status = BSP_ERROR_NO_INIT;
 80040dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80040e0:	617b      	str	r3, [r7, #20]
 80040e2:	e022      	b.n	800412a <BSP_MOTION_SENSOR_GetFullScale+0xaa>
  }
  else
  {
    /* Get the motion sensor full scale */
    index = (Function == MOTION_GYRO) ? GYRO_ID : ((Function == MOTION_ACCELERO) ? ACCELERO_ID : MAGNETO_ID);
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d006      	beq.n	80040f8 <BSP_MOTION_SENSOR_GetFullScale+0x78>
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	2b02      	cmp	r3, #2
 80040ee:	d101      	bne.n	80040f4 <BSP_MOTION_SENSOR_GetFullScale+0x74>
 80040f0:	2301      	movs	r3, #1
 80040f2:	e002      	b.n	80040fa <BSP_MOTION_SENSOR_GetFullScale+0x7a>
 80040f4:	2302      	movs	r3, #2
 80040f6:	e000      	b.n	80040fa <BSP_MOTION_SENSOR_GetFullScale+0x7a>
 80040f8:	2300      	movs	r3, #0
 80040fa:	74fb      	strb	r3, [r7, #19]
    if (Motion_Sensor_FuncDrv[Instance][index]->GetFullScale(Motion_Sensor_CompObj[Instance], Fullscale) < 0)
 80040fc:	7cf9      	ldrb	r1, [r7, #19]
 80040fe:	480e      	ldr	r0, [pc, #56]	; (8004138 <BSP_MOTION_SENSOR_GetFullScale+0xb8>)
 8004100:	68fa      	ldr	r2, [r7, #12]
 8004102:	4613      	mov	r3, r2
 8004104:	005b      	lsls	r3, r3, #1
 8004106:	4413      	add	r3, r2
 8004108:	440b      	add	r3, r1
 800410a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800410e:	695b      	ldr	r3, [r3, #20]
 8004110:	490a      	ldr	r1, [pc, #40]	; (800413c <BSP_MOTION_SENSOR_GetFullScale+0xbc>)
 8004112:	68fa      	ldr	r2, [r7, #12]
 8004114:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004118:	6879      	ldr	r1, [r7, #4]
 800411a:	4610      	mov	r0, r2
 800411c:	4798      	blx	r3
 800411e:	4603      	mov	r3, r0
 8004120:	2b00      	cmp	r3, #0
 8004122:	da02      	bge.n	800412a <BSP_MOTION_SENSOR_GetFullScale+0xaa>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8004124:	f06f 0304 	mvn.w	r3, #4
 8004128:	617b      	str	r3, [r7, #20]
    }
  }

  return status;
 800412a:	697b      	ldr	r3, [r7, #20]
}
 800412c:	4618      	mov	r0, r3
 800412e:	3718      	adds	r7, #24
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}
 8004134:	20002b60 	.word	0x20002b60
 8004138:	20002b78 	.word	0x20002b78
 800413c:	20002b68 	.word	0x20002b68

08004140 <BSP_MOTION_SENSOR_SetFullScale>:
  *         - MOTION_MAGNETO for instance 1
  * @param  Fullscale Full scale value.
  * @retval BSP status.
  */
int32_t BSP_MOTION_SENSOR_SetFullScale(uint32_t Instance, uint32_t Function, int32_t Fullscale)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b086      	sub	sp, #24
 8004144:	af00      	add	r7, sp, #0
 8004146:	60f8      	str	r0, [r7, #12]
 8004148:	60b9      	str	r1, [r7, #8]
 800414a:	607a      	str	r2, [r7, #4]
  int32_t status = BSP_ERROR_NONE;
 800414c:	2300      	movs	r3, #0
 800414e:	617b      	str	r3, [r7, #20]
  uint8_t index;

  if (Instance >= MOTION_SENSOR_INSTANCES_NBR)
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2b01      	cmp	r3, #1
 8004154:	d903      	bls.n	800415e <BSP_MOTION_SENSOR_SetFullScale+0x1e>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8004156:	f06f 0301 	mvn.w	r3, #1
 800415a:	617b      	str	r3, [r7, #20]
 800415c:	e049      	b.n	80041f2 <BSP_MOTION_SENSOR_SetFullScale+0xb2>
  }
  else if (((Instance == 0U) && ((Function & MOTION_MAGNETO) != 0U))
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d104      	bne.n	800416e <BSP_MOTION_SENSOR_SetFullScale+0x2e>
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	f003 0304 	and.w	r3, r3, #4
 800416a:	2b00      	cmp	r3, #0
 800416c:	d107      	bne.n	800417e <BSP_MOTION_SENSOR_SetFullScale+0x3e>
           || ((Instance == 1U) && ((Function & (MOTION_GYRO | MOTION_ACCELERO)) != 0U)))
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2b01      	cmp	r3, #1
 8004172:	d108      	bne.n	8004186 <BSP_MOTION_SENSOR_SetFullScale+0x46>
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	f003 0303 	and.w	r3, r3, #3
 800417a:	2b00      	cmp	r3, #0
 800417c:	d003      	beq.n	8004186 <BSP_MOTION_SENSOR_SetFullScale+0x46>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 800417e:	f06f 030a 	mvn.w	r3, #10
 8004182:	617b      	str	r3, [r7, #20]
 8004184:	e035      	b.n	80041f2 <BSP_MOTION_SENSOR_SetFullScale+0xb2>
  }
  else if ((Motion_Sensor_Ctx[Instance].Functions & Function) == 0U)
 8004186:	4a1d      	ldr	r2, [pc, #116]	; (80041fc <BSP_MOTION_SENSOR_SetFullScale+0xbc>)
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	4013      	ands	r3, r2
 8004192:	2b00      	cmp	r3, #0
 8004194:	d103      	bne.n	800419e <BSP_MOTION_SENSOR_SetFullScale+0x5e>
  {
    status = BSP_ERROR_NO_INIT;
 8004196:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800419a:	617b      	str	r3, [r7, #20]
 800419c:	e029      	b.n	80041f2 <BSP_MOTION_SENSOR_SetFullScale+0xb2>
  }
  else
  {
    /* Set the motion sensor full scale */
    index = (Function == MOTION_GYRO) ? GYRO_ID : ((Function == MOTION_ACCELERO) ? ACCELERO_ID : MAGNETO_ID);
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d006      	beq.n	80041b2 <BSP_MOTION_SENSOR_SetFullScale+0x72>
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	2b02      	cmp	r3, #2
 80041a8:	d101      	bne.n	80041ae <BSP_MOTION_SENSOR_SetFullScale+0x6e>
 80041aa:	2301      	movs	r3, #1
 80041ac:	e002      	b.n	80041b4 <BSP_MOTION_SENSOR_SetFullScale+0x74>
 80041ae:	2302      	movs	r3, #2
 80041b0:	e000      	b.n	80041b4 <BSP_MOTION_SENSOR_SetFullScale+0x74>
 80041b2:	2300      	movs	r3, #0
 80041b4:	74fb      	strb	r3, [r7, #19]
    if (index == MAGNETO_ID)
 80041b6:	7cfb      	ldrb	r3, [r7, #19]
 80041b8:	2b02      	cmp	r3, #2
 80041ba:	d103      	bne.n	80041c4 <BSP_MOTION_SENSOR_SetFullScale+0x84>
    {
      /* Feature not supported for Magneto */
      status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 80041bc:	f06f 030a 	mvn.w	r3, #10
 80041c0:	617b      	str	r3, [r7, #20]
 80041c2:	e016      	b.n	80041f2 <BSP_MOTION_SENSOR_SetFullScale+0xb2>
    }
    else
    {
      if (Motion_Sensor_FuncDrv[Instance][index]->SetFullScale(Motion_Sensor_CompObj[Instance], Fullscale) < 0)
 80041c4:	7cf9      	ldrb	r1, [r7, #19]
 80041c6:	480e      	ldr	r0, [pc, #56]	; (8004200 <BSP_MOTION_SENSOR_SetFullScale+0xc0>)
 80041c8:	68fa      	ldr	r2, [r7, #12]
 80041ca:	4613      	mov	r3, r2
 80041cc:	005b      	lsls	r3, r3, #1
 80041ce:	4413      	add	r3, r2
 80041d0:	440b      	add	r3, r1
 80041d2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80041d6:	699b      	ldr	r3, [r3, #24]
 80041d8:	490a      	ldr	r1, [pc, #40]	; (8004204 <BSP_MOTION_SENSOR_SetFullScale+0xc4>)
 80041da:	68fa      	ldr	r2, [r7, #12]
 80041dc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80041e0:	6879      	ldr	r1, [r7, #4]
 80041e2:	4610      	mov	r0, r2
 80041e4:	4798      	blx	r3
 80041e6:	4603      	mov	r3, r0
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	da02      	bge.n	80041f2 <BSP_MOTION_SENSOR_SetFullScale+0xb2>
      {
        status = BSP_ERROR_COMPONENT_FAILURE;
 80041ec:	f06f 0304 	mvn.w	r3, #4
 80041f0:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return status;
 80041f2:	697b      	ldr	r3, [r7, #20]
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3718      	adds	r7, #24
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}
 80041fc:	20002b60 	.word	0x20002b60
 8004200:	20002b78 	.word	0x20002b78
 8004204:	20002b68 	.word	0x20002b68

08004208 <ISM330DHCX_Probe>:
  * @param  Functions Motion sensor functions. Could be :
  *         - MOTION_GYRO and/or MOTION_ACCELERO
  * @retval BSP status.
  */
static int32_t ISM330DHCX_Probe(uint32_t Functions)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b08c      	sub	sp, #48	; 0x30
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  int32_t                 status = BSP_ERROR_NONE;
 8004210:	2300      	movs	r3, #0
 8004212:	62fb      	str	r3, [r7, #44]	; 0x2c
  ISM330DHCX_IO_t            IOCtx;
  uint8_t                 ism330dlc_id;
  static ISM330DHCX_Object_t ISM330DHCX_Obj;

  /* Configure the motion sensor driver */
  IOCtx.BusType     = ISM330DHCX_I2C_BUS;
 8004214:	2300      	movs	r3, #0
 8004216:	617b      	str	r3, [r7, #20]
  IOCtx.Address     = ISM330DHCX_I2C_ADD_H;
 8004218:	23d7      	movs	r3, #215	; 0xd7
 800421a:	763b      	strb	r3, [r7, #24]
  IOCtx.Init        = BSP_I2C2_Init;
 800421c:	4b29      	ldr	r3, [pc, #164]	; (80042c4 <ISM330DHCX_Probe+0xbc>)
 800421e:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = BSP_I2C2_DeInit;
 8004220:	4b29      	ldr	r3, [pc, #164]	; (80042c8 <ISM330DHCX_Probe+0xc0>)
 8004222:	613b      	str	r3, [r7, #16]
  IOCtx.ReadReg     = BSP_I2C2_ReadReg;
 8004224:	4b29      	ldr	r3, [pc, #164]	; (80042cc <ISM330DHCX_Probe+0xc4>)
 8004226:	623b      	str	r3, [r7, #32]
  IOCtx.WriteReg    = BSP_I2C2_WriteReg;
 8004228:	4b29      	ldr	r3, [pc, #164]	; (80042d0 <ISM330DHCX_Probe+0xc8>)
 800422a:	61fb      	str	r3, [r7, #28]
  IOCtx.GetTick     = BSP_GetTick;
 800422c:	4b29      	ldr	r3, [pc, #164]	; (80042d4 <ISM330DHCX_Probe+0xcc>)
 800422e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Register Component Bus IO operations */
  if (ISM330DHCX_RegisterBusIO(&ISM330DHCX_Obj, &IOCtx) != ISM330DHCX_OK)
 8004230:	f107 030c 	add.w	r3, r7, #12
 8004234:	4619      	mov	r1, r3
 8004236:	4828      	ldr	r0, [pc, #160]	; (80042d8 <ISM330DHCX_Probe+0xd0>)
 8004238:	f000 f8c8 	bl	80043cc <ISM330DHCX_RegisterBusIO>
 800423c:	4603      	mov	r3, r0
 800423e:	2b00      	cmp	r3, #0
 8004240:	d003      	beq.n	800424a <ISM330DHCX_Probe+0x42>
  {
    status = BSP_ERROR_BUS_FAILURE;
 8004242:	f06f 0307 	mvn.w	r3, #7
 8004246:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004248:	e037      	b.n	80042ba <ISM330DHCX_Probe+0xb2>
  }
  /* Read the sensor ID */
  else if (ISM330DHCX_ReadID(&ISM330DHCX_Obj, &ism330dlc_id) != ISM330DHCX_OK)
 800424a:	f107 030b 	add.w	r3, r7, #11
 800424e:	4619      	mov	r1, r3
 8004250:	4821      	ldr	r0, [pc, #132]	; (80042d8 <ISM330DHCX_Probe+0xd0>)
 8004252:	f000 f9d9 	bl	8004608 <ISM330DHCX_ReadID>
 8004256:	4603      	mov	r3, r0
 8004258:	2b00      	cmp	r3, #0
 800425a:	d003      	beq.n	8004264 <ISM330DHCX_Probe+0x5c>
  {
    status = BSP_ERROR_COMPONENT_FAILURE;
 800425c:	f06f 0304 	mvn.w	r3, #4
 8004260:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004262:	e02a      	b.n	80042ba <ISM330DHCX_Probe+0xb2>
  }
  /* Check if the returned sensor ID is correct */
  else if (ism330dlc_id != ISM330DHCX_ID)
 8004264:	7afb      	ldrb	r3, [r7, #11]
 8004266:	2b6b      	cmp	r3, #107	; 0x6b
 8004268:	d003      	beq.n	8004272 <ISM330DHCX_Probe+0x6a>
  {
    status = BSP_ERROR_UNKNOWN_COMPONENT;
 800426a:	f06f 0306 	mvn.w	r3, #6
 800426e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004270:	e023      	b.n	80042ba <ISM330DHCX_Probe+0xb2>
  }
  else
  {
    Motion_Sensor_CompObj[0] = &ISM330DHCX_Obj;
 8004272:	4b1a      	ldr	r3, [pc, #104]	; (80042dc <ISM330DHCX_Probe+0xd4>)
 8004274:	4a18      	ldr	r2, [pc, #96]	; (80042d8 <ISM330DHCX_Probe+0xd0>)
 8004276:	601a      	str	r2, [r3, #0]
    Motion_Sensor_Drv[0]     = (MOTION_SENSOR_CommonDrv_t *) &ISM330DHCX_COMMON_Driver;
 8004278:	4b19      	ldr	r3, [pc, #100]	; (80042e0 <ISM330DHCX_Probe+0xd8>)
 800427a:	4a1a      	ldr	r2, [pc, #104]	; (80042e4 <ISM330DHCX_Probe+0xdc>)
 800427c:	601a      	str	r2, [r3, #0]
    /* Initialize the component */
    if (Motion_Sensor_Drv[0]->Init(Motion_Sensor_CompObj[0]) < 0)
 800427e:	4b18      	ldr	r3, [pc, #96]	; (80042e0 <ISM330DHCX_Probe+0xd8>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a15      	ldr	r2, [pc, #84]	; (80042dc <ISM330DHCX_Probe+0xd4>)
 8004286:	6812      	ldr	r2, [r2, #0]
 8004288:	4610      	mov	r0, r2
 800428a:	4798      	blx	r3
 800428c:	4603      	mov	r3, r0
 800428e:	2b00      	cmp	r3, #0
 8004290:	da03      	bge.n	800429a <ISM330DHCX_Probe+0x92>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8004292:	f06f 0304 	mvn.w	r3, #4
 8004296:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004298:	e00f      	b.n	80042ba <ISM330DHCX_Probe+0xb2>
    }
    else
    {
      /* Link the MS driver with the component driver */
      if ((Functions & MOTION_GYRO) != 0U)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f003 0301 	and.w	r3, r3, #1
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d002      	beq.n	80042aa <ISM330DHCX_Probe+0xa2>
      {
        Motion_Sensor_FuncDrv[0][GYRO_ID] = (MOTION_SENSOR_FuncDrv_t *) &ISM330DHCX_GYRO_Driver;
 80042a4:	4b10      	ldr	r3, [pc, #64]	; (80042e8 <ISM330DHCX_Probe+0xe0>)
 80042a6:	4a11      	ldr	r2, [pc, #68]	; (80042ec <ISM330DHCX_Probe+0xe4>)
 80042a8:	601a      	str	r2, [r3, #0]
      }
      if ((Functions & MOTION_ACCELERO) != 0U)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f003 0302 	and.w	r3, r3, #2
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d002      	beq.n	80042ba <ISM330DHCX_Probe+0xb2>
      {
        Motion_Sensor_FuncDrv[0][ACCELERO_ID] = (MOTION_SENSOR_FuncDrv_t *) &ISM330DHCX_ACC_Driver;
 80042b4:	4b0c      	ldr	r3, [pc, #48]	; (80042e8 <ISM330DHCX_Probe+0xe0>)
 80042b6:	4a0e      	ldr	r2, [pc, #56]	; (80042f0 <ISM330DHCX_Probe+0xe8>)
 80042b8:	605a      	str	r2, [r3, #4]
      }
    }
  }

  return status;
 80042ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3730      	adds	r7, #48	; 0x30
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}
 80042c4:	080032b5 	.word	0x080032b5
 80042c8:	08003329 	.word	0x08003329
 80042cc:	08003451 	.word	0x08003451
 80042d0:	080033f5 	.word	0x080033f5
 80042d4:	080034ad 	.word	0x080034ad
 80042d8:	20002b90 	.word	0x20002b90
 80042dc:	20002b68 	.word	0x20002b68
 80042e0:	20002b70 	.word	0x20002b70
 80042e4:	20000060 	.word	0x20000060
 80042e8:	20002b78 	.word	0x20002b78
 80042ec:	20000094 	.word	0x20000094
 80042f0:	20000070 	.word	0x20000070

080042f4 <IIS2MDC_Probe>:
  * @param  Functions Motion sensor functions. Could be :
  *         - MOTION_MAGNETO
  * @retval BSP status.
  */
static int32_t IIS2MDC_Probe(uint32_t Functions)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b08c      	sub	sp, #48	; 0x30
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  int32_t                 status = BSP_ERROR_NONE;
 80042fc:	2300      	movs	r3, #0
 80042fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  IIS2MDC_IO_t            IOCtx;
  uint8_t                 iis2mdc_id;
  static IIS2MDC_Object_t IIS2MDC_Obj;

  /* Configure the motion sensor driver */
  IOCtx.BusType     = IIS2MDC_I2C_BUS;
 8004300:	2300      	movs	r3, #0
 8004302:	617b      	str	r3, [r7, #20]
  IOCtx.Address     = IIS2MDC_I2C_ADD;
 8004304:	233d      	movs	r3, #61	; 0x3d
 8004306:	763b      	strb	r3, [r7, #24]
  IOCtx.Init        = BSP_I2C2_Init;
 8004308:	4b25      	ldr	r3, [pc, #148]	; (80043a0 <IIS2MDC_Probe+0xac>)
 800430a:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = BSP_I2C2_DeInit;
 800430c:	4b25      	ldr	r3, [pc, #148]	; (80043a4 <IIS2MDC_Probe+0xb0>)
 800430e:	613b      	str	r3, [r7, #16]
  IOCtx.ReadReg     = BSP_I2C2_ReadReg;
 8004310:	4b25      	ldr	r3, [pc, #148]	; (80043a8 <IIS2MDC_Probe+0xb4>)
 8004312:	623b      	str	r3, [r7, #32]
  IOCtx.WriteReg    = BSP_I2C2_WriteReg;
 8004314:	4b25      	ldr	r3, [pc, #148]	; (80043ac <IIS2MDC_Probe+0xb8>)
 8004316:	61fb      	str	r3, [r7, #28]
  IOCtx.GetTick     = BSP_GetTick;
 8004318:	4b25      	ldr	r3, [pc, #148]	; (80043b0 <IIS2MDC_Probe+0xbc>)
 800431a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Register Component Bus IO operations */
  if (IIS2MDC_RegisterBusIO(&IIS2MDC_Obj, &IOCtx) != IIS2MDC_OK)
 800431c:	f107 030c 	add.w	r3, r7, #12
 8004320:	4619      	mov	r1, r3
 8004322:	4824      	ldr	r0, [pc, #144]	; (80043b4 <IIS2MDC_Probe+0xc0>)
 8004324:	f001 ffa6 	bl	8006274 <IIS2MDC_RegisterBusIO>
 8004328:	4603      	mov	r3, r0
 800432a:	2b00      	cmp	r3, #0
 800432c:	d003      	beq.n	8004336 <IIS2MDC_Probe+0x42>
  {
    status = BSP_ERROR_BUS_FAILURE;
 800432e:	f06f 0307 	mvn.w	r3, #7
 8004332:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004334:	e02f      	b.n	8004396 <IIS2MDC_Probe+0xa2>
  }
  /* Read the sensor ID */
  else if (IIS2MDC_ReadID(&IIS2MDC_Obj, &iis2mdc_id) != IIS2MDC_OK)
 8004336:	f107 030b 	add.w	r3, r7, #11
 800433a:	4619      	mov	r1, r3
 800433c:	481d      	ldr	r0, [pc, #116]	; (80043b4 <IIS2MDC_Probe+0xc0>)
 800433e:	f002 f854 	bl	80063ea <IIS2MDC_ReadID>
 8004342:	4603      	mov	r3, r0
 8004344:	2b00      	cmp	r3, #0
 8004346:	d003      	beq.n	8004350 <IIS2MDC_Probe+0x5c>
  {
    status = BSP_ERROR_COMPONENT_FAILURE;
 8004348:	f06f 0304 	mvn.w	r3, #4
 800434c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800434e:	e022      	b.n	8004396 <IIS2MDC_Probe+0xa2>
  }
  /* Check if the returned sensor ID is correct */
  else if (iis2mdc_id != IIS2MDC_ID)
 8004350:	7afb      	ldrb	r3, [r7, #11]
 8004352:	2b40      	cmp	r3, #64	; 0x40
 8004354:	d003      	beq.n	800435e <IIS2MDC_Probe+0x6a>
  {
    status = BSP_ERROR_UNKNOWN_COMPONENT;
 8004356:	f06f 0306 	mvn.w	r3, #6
 800435a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800435c:	e01b      	b.n	8004396 <IIS2MDC_Probe+0xa2>
  }
  else
  {
    Motion_Sensor_CompObj[1] = &IIS2MDC_Obj;
 800435e:	4b16      	ldr	r3, [pc, #88]	; (80043b8 <IIS2MDC_Probe+0xc4>)
 8004360:	4a14      	ldr	r2, [pc, #80]	; (80043b4 <IIS2MDC_Probe+0xc0>)
 8004362:	605a      	str	r2, [r3, #4]
    Motion_Sensor_Drv[1]     = (MOTION_SENSOR_CommonDrv_t *) &IIS2MDC_COMMON_Driver;
 8004364:	4b15      	ldr	r3, [pc, #84]	; (80043bc <IIS2MDC_Probe+0xc8>)
 8004366:	4a16      	ldr	r2, [pc, #88]	; (80043c0 <IIS2MDC_Probe+0xcc>)
 8004368:	605a      	str	r2, [r3, #4]
    /* Initialize the component */
    if (Motion_Sensor_Drv[1]->Init(Motion_Sensor_CompObj[1]) < 0)
 800436a:	4b14      	ldr	r3, [pc, #80]	; (80043bc <IIS2MDC_Probe+0xc8>)
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a11      	ldr	r2, [pc, #68]	; (80043b8 <IIS2MDC_Probe+0xc4>)
 8004372:	6852      	ldr	r2, [r2, #4]
 8004374:	4610      	mov	r0, r2
 8004376:	4798      	blx	r3
 8004378:	4603      	mov	r3, r0
 800437a:	2b00      	cmp	r3, #0
 800437c:	da03      	bge.n	8004386 <IIS2MDC_Probe+0x92>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 800437e:	f06f 0304 	mvn.w	r3, #4
 8004382:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004384:	e007      	b.n	8004396 <IIS2MDC_Probe+0xa2>
    }
    else
    {
      /* Link the MS driver with the component driver */
      if ((Functions & MOTION_MAGNETO) != 0U)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f003 0304 	and.w	r3, r3, #4
 800438c:	2b00      	cmp	r3, #0
 800438e:	d002      	beq.n	8004396 <IIS2MDC_Probe+0xa2>
      {
        Motion_Sensor_FuncDrv[1][MAGNETO_ID] = (MOTION_SENSOR_FuncDrv_t *) &IIS2MDC_MAG_Driver;
 8004390:	4b0c      	ldr	r3, [pc, #48]	; (80043c4 <IIS2MDC_Probe+0xd0>)
 8004392:	4a0d      	ldr	r2, [pc, #52]	; (80043c8 <IIS2MDC_Probe+0xd4>)
 8004394:	615a      	str	r2, [r3, #20]
      }
    }
  }

  return status;
 8004396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004398:	4618      	mov	r0, r3
 800439a:	3730      	adds	r7, #48	; 0x30
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}
 80043a0:	080032b5 	.word	0x080032b5
 80043a4:	08003329 	.word	0x08003329
 80043a8:	08003451 	.word	0x08003451
 80043ac:	080033f5 	.word	0x080033f5
 80043b0:	080034ad 	.word	0x080034ad
 80043b4:	20002bc8 	.word	0x20002bc8
 80043b8:	20002b68 	.word	0x20002b68
 80043bc:	20002b70 	.word	0x20002b70
 80043c0:	200000b8 	.word	0x200000b8
 80043c4:	20002b78 	.word	0x20002b78
 80043c8:	200000c8 	.word	0x200000c8

080043cc <ISM330DHCX_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_RegisterBusIO(ISM330DHCX_Object_t *pObj, ISM330DHCX_IO_t *pIO)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b084      	sub	sp, #16
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 80043d6:	2300      	movs	r3, #0
 80043d8:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d103      	bne.n	80043e8 <ISM330DHCX_RegisterBusIO+0x1c>
  {
    ret = ISM330DHCX_ERROR;
 80043e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80043e4:	60fb      	str	r3, [r7, #12]
 80043e6:	e051      	b.n	800448c <ISM330DHCX_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	685a      	ldr	r2, [r3, #4]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	689a      	ldr	r2, [r3, #8]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	7b1a      	ldrb	r2, [r3, #12]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	691a      	ldr	r2, [r3, #16]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	695a      	ldr	r2, [r3, #20]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	699a      	ldr	r2, [r3, #24]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	4a1d      	ldr	r2, [pc, #116]	; (8004498 <ISM330DHCX_RegisterBusIO+0xcc>)
 8004424:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4a1c      	ldr	r2, [pc, #112]	; (800449c <ISM330DHCX_RegisterBusIO+0xd0>)
 800442a:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	69da      	ldr	r2, [r3, #28]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d103      	bne.n	800444a <ISM330DHCX_RegisterBusIO+0x7e>
    {
      ret = ISM330DHCX_ERROR;
 8004442:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004446:	60fb      	str	r3, [r7, #12]
 8004448:	e020      	b.n	800448c <ISM330DHCX_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != ISM330DHCX_OK)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4798      	blx	r3
 8004450:	4603      	mov	r3, r0
 8004452:	2b00      	cmp	r3, #0
 8004454:	d003      	beq.n	800445e <ISM330DHCX_RegisterBusIO+0x92>
    {
      ret = ISM330DHCX_ERROR;
 8004456:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800445a:	60fb      	str	r3, [r7, #12]
 800445c:	e016      	b.n	800448c <ISM330DHCX_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == ISM330DHCX_SPI_3WIRES_BUS) /* SPI 3-Wires */
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	2b02      	cmp	r3, #2
 8004464:	d112      	bne.n	800448c <ISM330DHCX_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800446c:	2b00      	cmp	r3, #0
 800446e:	d10d      	bne.n	800448c <ISM330DHCX_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8004470:	230c      	movs	r3, #12
 8004472:	72fb      	strb	r3, [r7, #11]

          if (ISM330DHCX_Write_Reg(pObj, ISM330DHCX_CTRL3_C, data) != ISM330DHCX_OK)
 8004474:	7afb      	ldrb	r3, [r7, #11]
 8004476:	461a      	mov	r2, r3
 8004478:	2112      	movs	r1, #18
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f000 fd73 	bl	8004f66 <ISM330DHCX_Write_Reg>
 8004480:	4603      	mov	r3, r0
 8004482:	2b00      	cmp	r3, #0
 8004484:	d002      	beq.n	800448c <ISM330DHCX_RegisterBusIO+0xc0>
          {
            ret = ISM330DHCX_ERROR;
 8004486:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800448a:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 800448c:	68fb      	ldr	r3, [r7, #12]
}
 800448e:	4618      	mov	r0, r3
 8004490:	3710      	adds	r7, #16
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
 8004496:	bf00      	nop
 8004498:	080053d5 	.word	0x080053d5
 800449c:	0800540b 	.word	0x0800540b

080044a0 <ISM330DHCX_Init>:
  * @brief  Initialize the ISM330DHCX sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_Init(ISM330DHCX_Object_t *pObj)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b082      	sub	sp, #8
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  /* Set DEVICE_CONF bit */
  if (ism330dhcx_device_conf_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	3320      	adds	r3, #32
 80044ac:	2101      	movs	r1, #1
 80044ae:	4618      	mov	r0, r3
 80044b0:	f001 fd2a 	bl	8005f08 <ism330dhcx_device_conf_set>
 80044b4:	4603      	mov	r3, r0
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d002      	beq.n	80044c0 <ISM330DHCX_Init+0x20>
  {
    return ISM330DHCX_ERROR;
 80044ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80044be:	e078      	b.n	80045b2 <ISM330DHCX_Init+0x112>
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (ism330dhcx_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	3320      	adds	r3, #32
 80044c4:	2101      	movs	r1, #1
 80044c6:	4618      	mov	r0, r3
 80044c8:	f001 fda1 	bl	800600e <ism330dhcx_auto_increment_set>
 80044cc:	4603      	mov	r3, r0
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d002      	beq.n	80044d8 <ISM330DHCX_Init+0x38>
  {
    return ISM330DHCX_ERROR;
 80044d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80044d6:	e06c      	b.n	80045b2 <ISM330DHCX_Init+0x112>
  }

  /* SW reset */
  if (ism330dhcx_reset_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	3320      	adds	r3, #32
 80044dc:	2101      	movs	r1, #1
 80044de:	4618      	mov	r0, r3
 80044e0:	f001 fd6f 	bl	8005fc2 <ism330dhcx_reset_set>
 80044e4:	4603      	mov	r3, r0
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d002      	beq.n	80044f0 <ISM330DHCX_Init+0x50>
  {
    return ISM330DHCX_ERROR;
 80044ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80044ee:	e060      	b.n	80045b2 <ISM330DHCX_Init+0x112>
  }

  /* Enable register address automatically incremented during a multiple byte
     access with a serial interface. */
  if (ism330dhcx_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	3320      	adds	r3, #32
 80044f4:	2101      	movs	r1, #1
 80044f6:	4618      	mov	r0, r3
 80044f8:	f001 fd89 	bl	800600e <ism330dhcx_auto_increment_set>
 80044fc:	4603      	mov	r3, r0
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d002      	beq.n	8004508 <ISM330DHCX_Init+0x68>
  {
    return ISM330DHCX_ERROR;
 8004502:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004506:	e054      	b.n	80045b2 <ISM330DHCX_Init+0x112>
  }

  /* Enable BDU */
  if (ism330dhcx_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	3320      	adds	r3, #32
 800450c:	2101      	movs	r1, #1
 800450e:	4618      	mov	r0, r3
 8004510:	f001 fc3e 	bl	8005d90 <ism330dhcx_block_data_update_set>
 8004514:	4603      	mov	r3, r0
 8004516:	2b00      	cmp	r3, #0
 8004518:	d002      	beq.n	8004520 <ISM330DHCX_Init+0x80>
  {
    return ISM330DHCX_ERROR;
 800451a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800451e:	e048      	b.n	80045b2 <ISM330DHCX_Init+0x112>
  }

  /* FIFO mode selection */
  if (ism330dhcx_fifo_mode_set(&(pObj->Ctx), ISM330DHCX_BYPASS_MODE) != ISM330DHCX_OK)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	3320      	adds	r3, #32
 8004524:	2100      	movs	r1, #0
 8004526:	4618      	mov	r0, r3
 8004528:	f001 fd97 	bl	800605a <ism330dhcx_fifo_mode_set>
 800452c:	4603      	mov	r3, r0
 800452e:	2b00      	cmp	r3, #0
 8004530:	d002      	beq.n	8004538 <ISM330DHCX_Init+0x98>
  {
    return ISM330DHCX_ERROR;
 8004532:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004536:	e03c      	b.n	80045b2 <ISM330DHCX_Init+0x112>
  }

  /* Select default output data rate. */
  pObj->acc_odr = ISM330DHCX_XL_ODR_104Hz;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2204      	movs	r2, #4
 800453c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  /* Output data rate selection - power down. */
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), ISM330DHCX_XL_ODR_OFF) != ISM330DHCX_OK)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	3320      	adds	r3, #32
 8004544:	2100      	movs	r1, #0
 8004546:	4618      	mov	r0, r3
 8004548:	f001 f808 	bl	800555c <ism330dhcx_xl_data_rate_set>
 800454c:	4603      	mov	r3, r0
 800454e:	2b00      	cmp	r3, #0
 8004550:	d002      	beq.n	8004558 <ISM330DHCX_Init+0xb8>
  {
    return ISM330DHCX_ERROR;
 8004552:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004556:	e02c      	b.n	80045b2 <ISM330DHCX_Init+0x112>
  }

  /* Full scale selection. */
  if (ism330dhcx_xl_full_scale_set(&(pObj->Ctx), ISM330DHCX_2g) != ISM330DHCX_OK)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	3320      	adds	r3, #32
 800455c:	2100      	movs	r1, #0
 800455e:	4618      	mov	r0, r3
 8004560:	f000 ff9e 	bl	80054a0 <ism330dhcx_xl_full_scale_set>
 8004564:	4603      	mov	r3, r0
 8004566:	2b00      	cmp	r3, #0
 8004568:	d002      	beq.n	8004570 <ISM330DHCX_Init+0xd0>
  {
    return ISM330DHCX_ERROR;
 800456a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800456e:	e020      	b.n	80045b2 <ISM330DHCX_Init+0x112>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = ISM330DHCX_GY_ODR_104Hz;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2204      	movs	r2, #4
 8004574:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Output data rate selection - power down. */
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), ISM330DHCX_GY_ODR_OFF) != ISM330DHCX_OK)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	3320      	adds	r3, #32
 800457c:	2100      	movs	r1, #0
 800457e:	4618      	mov	r0, r3
 8004580:	f001 fa38 	bl	80059f4 <ism330dhcx_gy_data_rate_set>
 8004584:	4603      	mov	r3, r0
 8004586:	2b00      	cmp	r3, #0
 8004588:	d002      	beq.n	8004590 <ISM330DHCX_Init+0xf0>
  {
    return ISM330DHCX_ERROR;
 800458a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800458e:	e010      	b.n	80045b2 <ISM330DHCX_Init+0x112>
  }

  /* Full scale selection. */
  if (ism330dhcx_gy_full_scale_set(&(pObj->Ctx), ISM330DHCX_2000dps) != ISM330DHCX_OK)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	3320      	adds	r3, #32
 8004594:	210c      	movs	r1, #12
 8004596:	4618      	mov	r0, r3
 8004598:	f001 f9b4 	bl	8005904 <ism330dhcx_gy_full_scale_set>
 800459c:	4603      	mov	r3, r0
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d002      	beq.n	80045a8 <ISM330DHCX_Init+0x108>
  {
    return ISM330DHCX_ERROR;
 80045a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80045a6:	e004      	b.n	80045b2 <ISM330DHCX_Init+0x112>
  }

  pObj->is_initialized = 1;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return ISM330DHCX_OK;
 80045b0:	2300      	movs	r3, #0
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3708      	adds	r7, #8
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}

080045ba <ISM330DHCX_DeInit>:
  * @brief  Deinitialize the ISM330DHCX sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_DeInit(ISM330DHCX_Object_t *pObj)
{
 80045ba:	b580      	push	{r7, lr}
 80045bc:	b082      	sub	sp, #8
 80045be:	af00      	add	r7, sp, #0
 80045c0:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (ISM330DHCX_ACC_Disable(pObj) != ISM330DHCX_OK)
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f000 f888 	bl	80046d8 <ISM330DHCX_ACC_Disable>
 80045c8:	4603      	mov	r3, r0
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d002      	beq.n	80045d4 <ISM330DHCX_DeInit+0x1a>
  {
    return ISM330DHCX_ERROR;
 80045ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80045d2:	e015      	b.n	8004600 <ISM330DHCX_DeInit+0x46>
  }

  if (ISM330DHCX_GYRO_Disable(pObj) != ISM330DHCX_OK)
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	f000 fa92 	bl	8004afe <ISM330DHCX_GYRO_Disable>
 80045da:	4603      	mov	r3, r0
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d002      	beq.n	80045e6 <ISM330DHCX_DeInit+0x2c>
  {
    return ISM330DHCX_ERROR;
 80045e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80045e4:	e00c      	b.n	8004600 <ISM330DHCX_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = ISM330DHCX_XL_ODR_OFF;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  pObj->gyro_odr = ISM330DHCX_GY_ODR_OFF;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  pObj->is_initialized = 0;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2200      	movs	r2, #0
 80045fa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return ISM330DHCX_OK;
 80045fe:	2300      	movs	r3, #0
}
 8004600:	4618      	mov	r0, r3
 8004602:	3708      	adds	r7, #8
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}

08004608 <ISM330DHCX_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ReadID(ISM330DHCX_Object_t *pObj, uint8_t *Id)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b082      	sub	sp, #8
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	6039      	str	r1, [r7, #0]
  if (ism330dhcx_device_id_get(&(pObj->Ctx), Id) != ISM330DHCX_OK)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	3320      	adds	r3, #32
 8004616:	6839      	ldr	r1, [r7, #0]
 8004618:	4618      	mov	r0, r3
 800461a:	f001 fcc1 	bl	8005fa0 <ism330dhcx_device_id_get>
 800461e:	4603      	mov	r3, r0
 8004620:	2b00      	cmp	r3, #0
 8004622:	d002      	beq.n	800462a <ISM330DHCX_ReadID+0x22>
  {
    return ISM330DHCX_ERROR;
 8004624:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004628:	e000      	b.n	800462c <ISM330DHCX_ReadID+0x24>
  }

  return ISM330DHCX_OK;
 800462a:	2300      	movs	r3, #0
}
 800462c:	4618      	mov	r0, r3
 800462e:	3708      	adds	r7, #8
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}

08004634 <ISM330DHCX_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to ISM330DHCX sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GetCapabilities(ISM330DHCX_Object_t *pObj, ISM330DHCX_Capabilities_t *Capabilities)
{
 8004634:	b480      	push	{r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	2201      	movs	r2, #1
 8004642:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	2201      	movs	r2, #1
 8004648:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	2200      	movs	r2, #0
 800464e:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	2200      	movs	r2, #0
 8004654:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 4000;
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800465c:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	2210      	movs	r2, #16
 8004662:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	2200      	movs	r2, #0
 8004668:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6667.0f;
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	4a07      	ldr	r2, [pc, #28]	; (800468c <ISM330DHCX_GetCapabilities+0x58>)
 800466e:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6667.0f;
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	4a06      	ldr	r2, [pc, #24]	; (800468c <ISM330DHCX_GetCapabilities+0x58>)
 8004674:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	f04f 0200 	mov.w	r2, #0
 800467c:	619a      	str	r2, [r3, #24]
  return ISM330DHCX_OK;
 800467e:	2300      	movs	r3, #0
}
 8004680:	4618      	mov	r0, r3
 8004682:	370c      	adds	r7, #12
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr
 800468c:	45d05800 	.word	0x45d05800

08004690 <ISM330DHCX_ACC_Enable>:
  * @brief  Enable the ISM330DHCX accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_Enable(ISM330DHCX_Object_t *pObj)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b082      	sub	sp, #8
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d101      	bne.n	80046a6 <ISM330DHCX_ACC_Enable+0x16>
  {
    return ISM330DHCX_OK;
 80046a2:	2300      	movs	r3, #0
 80046a4:	e014      	b.n	80046d0 <ISM330DHCX_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != ISM330DHCX_OK)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f103 0220 	add.w	r2, r3, #32
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80046b2:	4619      	mov	r1, r3
 80046b4:	4610      	mov	r0, r2
 80046b6:	f000 ff51 	bl	800555c <ism330dhcx_xl_data_rate_set>
 80046ba:	4603      	mov	r3, r0
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d002      	beq.n	80046c6 <ISM330DHCX_ACC_Enable+0x36>
  {
    return ISM330DHCX_ERROR;
 80046c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80046c4:	e004      	b.n	80046d0 <ISM330DHCX_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2201      	movs	r2, #1
 80046ca:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return ISM330DHCX_OK;
 80046ce:	2300      	movs	r3, #0
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3708      	adds	r7, #8
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}

080046d8 <ISM330DHCX_ACC_Disable>:
  * @brief  Disable the ISM330DHCX accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_Disable(ISM330DHCX_Object_t *pObj)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b082      	sub	sp, #8
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d101      	bne.n	80046ee <ISM330DHCX_ACC_Disable+0x16>
  {
    return ISM330DHCX_OK;
 80046ea:	2300      	movs	r3, #0
 80046ec:	e01f      	b.n	800472e <ISM330DHCX_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (ism330dhcx_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != ISM330DHCX_OK)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f103 0220 	add.w	r2, r3, #32
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	3333      	adds	r3, #51	; 0x33
 80046f8:	4619      	mov	r1, r3
 80046fa:	4610      	mov	r0, r2
 80046fc:	f001 f89a 	bl	8005834 <ism330dhcx_xl_data_rate_get>
 8004700:	4603      	mov	r3, r0
 8004702:	2b00      	cmp	r3, #0
 8004704:	d002      	beq.n	800470c <ISM330DHCX_ACC_Disable+0x34>
  {
    return ISM330DHCX_ERROR;
 8004706:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800470a:	e010      	b.n	800472e <ISM330DHCX_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), ISM330DHCX_XL_ODR_OFF) != ISM330DHCX_OK)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	3320      	adds	r3, #32
 8004710:	2100      	movs	r1, #0
 8004712:	4618      	mov	r0, r3
 8004714:	f000 ff22 	bl	800555c <ism330dhcx_xl_data_rate_set>
 8004718:	4603      	mov	r3, r0
 800471a:	2b00      	cmp	r3, #0
 800471c:	d002      	beq.n	8004724 <ISM330DHCX_ACC_Disable+0x4c>
  {
    return ISM330DHCX_ERROR;
 800471e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004722:	e004      	b.n	800472e <ISM330DHCX_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return ISM330DHCX_OK;
 800472c:	2300      	movs	r3, #0
}
 800472e:	4618      	mov	r0, r3
 8004730:	3708      	adds	r7, #8
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
	...

08004738 <ISM330DHCX_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_GetSensitivity(ISM330DHCX_Object_t *pObj, float *Sensitivity)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b084      	sub	sp, #16
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 8004742:	2300      	movs	r3, #0
 8004744:	60fb      	str	r3, [r7, #12]
  ism330dhcx_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (ism330dhcx_xl_full_scale_get(&(pObj->Ctx), &full_scale) != ISM330DHCX_OK)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	3320      	adds	r3, #32
 800474a:	f107 020b 	add.w	r2, r7, #11
 800474e:	4611      	mov	r1, r2
 8004750:	4618      	mov	r0, r3
 8004752:	f000 fecb 	bl	80054ec <ism330dhcx_xl_full_scale_get>
 8004756:	4603      	mov	r3, r0
 8004758:	2b00      	cmp	r3, #0
 800475a:	d002      	beq.n	8004762 <ISM330DHCX_ACC_GetSensitivity+0x2a>
  {
    return ISM330DHCX_ERROR;
 800475c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004760:	e023      	b.n	80047aa <ISM330DHCX_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8004762:	7afb      	ldrb	r3, [r7, #11]
 8004764:	2b03      	cmp	r3, #3
 8004766:	d81b      	bhi.n	80047a0 <ISM330DHCX_ACC_GetSensitivity+0x68>
 8004768:	a201      	add	r2, pc, #4	; (adr r2, 8004770 <ISM330DHCX_ACC_GetSensitivity+0x38>)
 800476a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800476e:	bf00      	nop
 8004770:	08004781 	.word	0x08004781
 8004774:	08004799 	.word	0x08004799
 8004778:	08004789 	.word	0x08004789
 800477c:	08004791 	.word	0x08004791
  {
    case ISM330DHCX_2g:
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_2G;
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	4a0c      	ldr	r2, [pc, #48]	; (80047b4 <ISM330DHCX_ACC_GetSensitivity+0x7c>)
 8004784:	601a      	str	r2, [r3, #0]
      break;
 8004786:	e00f      	b.n	80047a8 <ISM330DHCX_ACC_GetSensitivity+0x70>

    case ISM330DHCX_4g:
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_4G;
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	4a0b      	ldr	r2, [pc, #44]	; (80047b8 <ISM330DHCX_ACC_GetSensitivity+0x80>)
 800478c:	601a      	str	r2, [r3, #0]
      break;
 800478e:	e00b      	b.n	80047a8 <ISM330DHCX_ACC_GetSensitivity+0x70>

    case ISM330DHCX_8g:
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_8G;
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	4a0a      	ldr	r2, [pc, #40]	; (80047bc <ISM330DHCX_ACC_GetSensitivity+0x84>)
 8004794:	601a      	str	r2, [r3, #0]
      break;
 8004796:	e007      	b.n	80047a8 <ISM330DHCX_ACC_GetSensitivity+0x70>

    case ISM330DHCX_16g:
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_16G;
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	4a09      	ldr	r2, [pc, #36]	; (80047c0 <ISM330DHCX_ACC_GetSensitivity+0x88>)
 800479c:	601a      	str	r2, [r3, #0]
      break;
 800479e:	e003      	b.n	80047a8 <ISM330DHCX_ACC_GetSensitivity+0x70>

    default:
      ret = ISM330DHCX_ERROR;
 80047a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80047a4:	60fb      	str	r3, [r7, #12]
      break;
 80047a6:	bf00      	nop
  }

  return ret;
 80047a8:	68fb      	ldr	r3, [r7, #12]
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3710      	adds	r7, #16
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}
 80047b2:	bf00      	nop
 80047b4:	3d79db23 	.word	0x3d79db23
 80047b8:	3df9db23 	.word	0x3df9db23
 80047bc:	3e79db23 	.word	0x3e79db23
 80047c0:	3ef9db23 	.word	0x3ef9db23

080047c4 <ISM330DHCX_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_GetOutputDataRate(ISM330DHCX_Object_t *pObj, float *Odr)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b084      	sub	sp, #16
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 80047ce:	2300      	movs	r3, #0
 80047d0:	60fb      	str	r3, [r7, #12]
  ism330dhcx_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (ism330dhcx_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != ISM330DHCX_OK)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	3320      	adds	r3, #32
 80047d6:	f107 020b 	add.w	r2, r7, #11
 80047da:	4611      	mov	r1, r2
 80047dc:	4618      	mov	r0, r3
 80047de:	f001 f829 	bl	8005834 <ism330dhcx_xl_data_rate_get>
 80047e2:	4603      	mov	r3, r0
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d002      	beq.n	80047ee <ISM330DHCX_ACC_GetOutputDataRate+0x2a>
  {
    return ISM330DHCX_ERROR;
 80047e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80047ec:	e04e      	b.n	800488c <ISM330DHCX_ACC_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 80047ee:	7afb      	ldrb	r3, [r7, #11]
 80047f0:	2b0a      	cmp	r3, #10
 80047f2:	d846      	bhi.n	8004882 <ISM330DHCX_ACC_GetOutputDataRate+0xbe>
 80047f4:	a201      	add	r2, pc, #4	; (adr r2, 80047fc <ISM330DHCX_ACC_GetOutputDataRate+0x38>)
 80047f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047fa:	bf00      	nop
 80047fc:	08004829 	.word	0x08004829
 8004800:	08004833 	.word	0x08004833
 8004804:	0800483b 	.word	0x0800483b
 8004808:	08004843 	.word	0x08004843
 800480c:	0800484b 	.word	0x0800484b
 8004810:	08004853 	.word	0x08004853
 8004814:	0800485b 	.word	0x0800485b
 8004818:	08004863 	.word	0x08004863
 800481c:	0800486b 	.word	0x0800486b
 8004820:	08004873 	.word	0x08004873
 8004824:	0800487b 	.word	0x0800487b
  {
    case ISM330DHCX_XL_ODR_OFF:
      *Odr = 0.0f;
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	f04f 0200 	mov.w	r2, #0
 800482e:	601a      	str	r2, [r3, #0]
      break;
 8004830:	e02b      	b.n	800488a <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	4a17      	ldr	r2, [pc, #92]	; (8004894 <ISM330DHCX_ACC_GetOutputDataRate+0xd0>)
 8004836:	601a      	str	r2, [r3, #0]
      break;
 8004838:	e027      	b.n	800488a <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_26Hz:
      *Odr = 26.0f;
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	4a16      	ldr	r2, [pc, #88]	; (8004898 <ISM330DHCX_ACC_GetOutputDataRate+0xd4>)
 800483e:	601a      	str	r2, [r3, #0]
      break;
 8004840:	e023      	b.n	800488a <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_52Hz:
      *Odr = 52.0f;
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	4a15      	ldr	r2, [pc, #84]	; (800489c <ISM330DHCX_ACC_GetOutputDataRate+0xd8>)
 8004846:	601a      	str	r2, [r3, #0]
      break;
 8004848:	e01f      	b.n	800488a <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_104Hz:
      *Odr = 104.0f;
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	4a14      	ldr	r2, [pc, #80]	; (80048a0 <ISM330DHCX_ACC_GetOutputDataRate+0xdc>)
 800484e:	601a      	str	r2, [r3, #0]
      break;
 8004850:	e01b      	b.n	800488a <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_208Hz:
      *Odr = 208.0f;
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	4a13      	ldr	r2, [pc, #76]	; (80048a4 <ISM330DHCX_ACC_GetOutputDataRate+0xe0>)
 8004856:	601a      	str	r2, [r3, #0]
      break;
 8004858:	e017      	b.n	800488a <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_416Hz:
      *Odr = 416.0f;
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	4a12      	ldr	r2, [pc, #72]	; (80048a8 <ISM330DHCX_ACC_GetOutputDataRate+0xe4>)
 800485e:	601a      	str	r2, [r3, #0]
      break;
 8004860:	e013      	b.n	800488a <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_833Hz:
      *Odr = 833.0f;
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	4a11      	ldr	r2, [pc, #68]	; (80048ac <ISM330DHCX_ACC_GetOutputDataRate+0xe8>)
 8004866:	601a      	str	r2, [r3, #0]
      break;
 8004868:	e00f      	b.n	800488a <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_1666Hz:
      *Odr = 1666.0f;
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	4a10      	ldr	r2, [pc, #64]	; (80048b0 <ISM330DHCX_ACC_GetOutputDataRate+0xec>)
 800486e:	601a      	str	r2, [r3, #0]
      break;
 8004870:	e00b      	b.n	800488a <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_3332Hz:
      *Odr = 3332.0f;
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	4a0f      	ldr	r2, [pc, #60]	; (80048b4 <ISM330DHCX_ACC_GetOutputDataRate+0xf0>)
 8004876:	601a      	str	r2, [r3, #0]
      break;
 8004878:	e007      	b.n	800488a <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_6667Hz:
      *Odr = 6667.0f;
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	4a0e      	ldr	r2, [pc, #56]	; (80048b8 <ISM330DHCX_ACC_GetOutputDataRate+0xf4>)
 800487e:	601a      	str	r2, [r3, #0]
      break;
 8004880:	e003      	b.n	800488a <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    default:
      ret = ISM330DHCX_ERROR;
 8004882:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004886:	60fb      	str	r3, [r7, #12]
      break;
 8004888:	bf00      	nop
  }

  return ret;
 800488a:	68fb      	ldr	r3, [r7, #12]
}
 800488c:	4618      	mov	r0, r3
 800488e:	3710      	adds	r7, #16
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}
 8004894:	41480000 	.word	0x41480000
 8004898:	41d00000 	.word	0x41d00000
 800489c:	42500000 	.word	0x42500000
 80048a0:	42d00000 	.word	0x42d00000
 80048a4:	43500000 	.word	0x43500000
 80048a8:	43d00000 	.word	0x43d00000
 80048ac:	44504000 	.word	0x44504000
 80048b0:	44d04000 	.word	0x44d04000
 80048b4:	45504000 	.word	0x45504000
 80048b8:	45d05800 	.word	0x45d05800

080048bc <ISM330DHCX_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_SetOutputDataRate(ISM330DHCX_Object_t *pObj, float Odr)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b082      	sub	sp, #8
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d106      	bne.n	80048e0 <ISM330DHCX_ACC_SetOutputDataRate+0x24>
  {
    return ISM330DHCX_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 80048d2:	ed97 0a00 	vldr	s0, [r7]
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f000 fb60 	bl	8004f9c <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled>
 80048dc:	4603      	mov	r3, r0
 80048de:	e005      	b.n	80048ec <ISM330DHCX_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return ISM330DHCX_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 80048e0:	ed97 0a00 	vldr	s0, [r7]
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f000 fbe5 	bl	80050b4 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled>
 80048ea:	4603      	mov	r3, r0
  }
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3708      	adds	r7, #8
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}

080048f4 <ISM330DHCX_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_GetFullScale(ISM330DHCX_Object_t *pObj, int32_t *FullScale)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b084      	sub	sp, #16
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 80048fe:	2300      	movs	r3, #0
 8004900:	60fb      	str	r3, [r7, #12]
  ism330dhcx_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (ism330dhcx_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != ISM330DHCX_OK)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	3320      	adds	r3, #32
 8004906:	f107 020b 	add.w	r2, r7, #11
 800490a:	4611      	mov	r1, r2
 800490c:	4618      	mov	r0, r3
 800490e:	f000 fded 	bl	80054ec <ism330dhcx_xl_full_scale_get>
 8004912:	4603      	mov	r3, r0
 8004914:	2b00      	cmp	r3, #0
 8004916:	d002      	beq.n	800491e <ISM330DHCX_ACC_GetFullScale+0x2a>
  {
    return ISM330DHCX_ERROR;
 8004918:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800491c:	e023      	b.n	8004966 <ISM330DHCX_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 800491e:	7afb      	ldrb	r3, [r7, #11]
 8004920:	2b03      	cmp	r3, #3
 8004922:	d81b      	bhi.n	800495c <ISM330DHCX_ACC_GetFullScale+0x68>
 8004924:	a201      	add	r2, pc, #4	; (adr r2, 800492c <ISM330DHCX_ACC_GetFullScale+0x38>)
 8004926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800492a:	bf00      	nop
 800492c:	0800493d 	.word	0x0800493d
 8004930:	08004955 	.word	0x08004955
 8004934:	08004945 	.word	0x08004945
 8004938:	0800494d 	.word	0x0800494d
  {
    case ISM330DHCX_2g:
      *FullScale =  2;
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	2202      	movs	r2, #2
 8004940:	601a      	str	r2, [r3, #0]
      break;
 8004942:	e00f      	b.n	8004964 <ISM330DHCX_ACC_GetFullScale+0x70>

    case ISM330DHCX_4g:
      *FullScale =  4;
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	2204      	movs	r2, #4
 8004948:	601a      	str	r2, [r3, #0]
      break;
 800494a:	e00b      	b.n	8004964 <ISM330DHCX_ACC_GetFullScale+0x70>

    case ISM330DHCX_8g:
      *FullScale =  8;
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	2208      	movs	r2, #8
 8004950:	601a      	str	r2, [r3, #0]
      break;
 8004952:	e007      	b.n	8004964 <ISM330DHCX_ACC_GetFullScale+0x70>

    case ISM330DHCX_16g:
      *FullScale = 16;
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	2210      	movs	r2, #16
 8004958:	601a      	str	r2, [r3, #0]
      break;
 800495a:	e003      	b.n	8004964 <ISM330DHCX_ACC_GetFullScale+0x70>

    default:
      ret = ISM330DHCX_ERROR;
 800495c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004960:	60fb      	str	r3, [r7, #12]
      break;
 8004962:	bf00      	nop
  }

  return ret;
 8004964:	68fb      	ldr	r3, [r7, #12]
}
 8004966:	4618      	mov	r0, r3
 8004968:	3710      	adds	r7, #16
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}
 800496e:	bf00      	nop

08004970 <ISM330DHCX_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_SetFullScale(ISM330DHCX_Object_t *pObj, int32_t FullScale)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b084      	sub	sp, #16
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	6039      	str	r1, [r7, #0]
  ism330dhcx_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? ISM330DHCX_2g
           : (FullScale <= 4) ? ISM330DHCX_4g
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	2b02      	cmp	r3, #2
 800497e:	dd0b      	ble.n	8004998 <ISM330DHCX_ACC_SetFullScale+0x28>
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	2b04      	cmp	r3, #4
 8004984:	dd06      	ble.n	8004994 <ISM330DHCX_ACC_SetFullScale+0x24>
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	2b08      	cmp	r3, #8
 800498a:	dc01      	bgt.n	8004990 <ISM330DHCX_ACC_SetFullScale+0x20>
 800498c:	2303      	movs	r3, #3
 800498e:	e004      	b.n	800499a <ISM330DHCX_ACC_SetFullScale+0x2a>
 8004990:	2301      	movs	r3, #1
 8004992:	e002      	b.n	800499a <ISM330DHCX_ACC_SetFullScale+0x2a>
 8004994:	2302      	movs	r3, #2
 8004996:	e000      	b.n	800499a <ISM330DHCX_ACC_SetFullScale+0x2a>
 8004998:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? ISM330DHCX_2g
 800499a:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? ISM330DHCX_8g
           :                    ISM330DHCX_16g;

  if (ism330dhcx_xl_full_scale_set(&(pObj->Ctx), new_fs) != ISM330DHCX_OK)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	3320      	adds	r3, #32
 80049a0:	7bfa      	ldrb	r2, [r7, #15]
 80049a2:	4611      	mov	r1, r2
 80049a4:	4618      	mov	r0, r3
 80049a6:	f000 fd7b 	bl	80054a0 <ism330dhcx_xl_full_scale_set>
 80049aa:	4603      	mov	r3, r0
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d002      	beq.n	80049b6 <ISM330DHCX_ACC_SetFullScale+0x46>
  {
    return ISM330DHCX_ERROR;
 80049b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80049b4:	e000      	b.n	80049b8 <ISM330DHCX_ACC_SetFullScale+0x48>
  }

  return ISM330DHCX_OK;
 80049b6:	2300      	movs	r3, #0
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3710      	adds	r7, #16
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}

080049c0 <ISM330DHCX_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_GetAxesRaw(ISM330DHCX_Object_t *pObj, ISM330DHCX_AxesRaw_t *Value)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b084      	sub	sp, #16
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	6039      	str	r1, [r7, #0]
  ism330dhcx_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (ism330dhcx_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	3320      	adds	r3, #32
 80049ce:	f107 0208 	add.w	r2, r7, #8
 80049d2:	4611      	mov	r1, r2
 80049d4:	4618      	mov	r0, r3
 80049d6:	f001 fa4c 	bl	8005e72 <ism330dhcx_acceleration_raw_get>
 80049da:	4603      	mov	r3, r0
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d002      	beq.n	80049e6 <ISM330DHCX_ACC_GetAxesRaw+0x26>
  {
    return ISM330DHCX_ERROR;
 80049e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80049e4:	e00c      	b.n	8004a00 <ISM330DHCX_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 80049e6:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80049ee:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 80049f6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	809a      	strh	r2, [r3, #4]

  return ISM330DHCX_OK;
 80049fe:	2300      	movs	r3, #0
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3710      	adds	r7, #16
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}

08004a08 <ISM330DHCX_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_GetAxes(ISM330DHCX_Object_t *pObj, ISM330DHCX_Axes_t *Acceleration)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b086      	sub	sp, #24
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	6039      	str	r1, [r7, #0]
  ism330dhcx_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 8004a12:	f04f 0300 	mov.w	r3, #0
 8004a16:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (ism330dhcx_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	3320      	adds	r3, #32
 8004a1c:	f107 0210 	add.w	r2, r7, #16
 8004a20:	4611      	mov	r1, r2
 8004a22:	4618      	mov	r0, r3
 8004a24:	f001 fa25 	bl	8005e72 <ism330dhcx_acceleration_raw_get>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d002      	beq.n	8004a34 <ISM330DHCX_ACC_GetAxes+0x2c>
  {
    return ISM330DHCX_ERROR;
 8004a2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004a32:	e03c      	b.n	8004aae <ISM330DHCX_ACC_GetAxes+0xa6>
  }

  /* Get ISM330DHCX actual sensitivity. */
  if (ISM330DHCX_ACC_GetSensitivity(pObj, &sensitivity) != ISM330DHCX_OK)
 8004a34:	f107 030c 	add.w	r3, r7, #12
 8004a38:	4619      	mov	r1, r3
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f7ff fe7c 	bl	8004738 <ISM330DHCX_ACC_GetSensitivity>
 8004a40:	4603      	mov	r3, r0
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d002      	beq.n	8004a4c <ISM330DHCX_ACC_GetAxes+0x44>
  {
    return ISM330DHCX_ERROR;
 8004a46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004a4a:	e030      	b.n	8004aae <ISM330DHCX_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8004a4c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004a50:	ee07 3a90 	vmov	s15, r3
 8004a54:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004a58:	edd7 7a03 	vldr	s15, [r7, #12]
 8004a5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004a64:	ee17 2a90 	vmov	r2, s15
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8004a6c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004a70:	ee07 3a90 	vmov	s15, r3
 8004a74:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004a78:	edd7 7a03 	vldr	s15, [r7, #12]
 8004a7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004a84:	ee17 2a90 	vmov	r2, s15
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8004a8c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004a90:	ee07 3a90 	vmov	s15, r3
 8004a94:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004a98:	edd7 7a03 	vldr	s15, [r7, #12]
 8004a9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004aa0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004aa4:	ee17 2a90 	vmov	r2, s15
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	609a      	str	r2, [r3, #8]

  return ISM330DHCX_OK;
 8004aac:	2300      	movs	r3, #0
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3718      	adds	r7, #24
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}

08004ab6 <ISM330DHCX_GYRO_Enable>:
  * @brief  Enable the ISM330DHCX gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_Enable(ISM330DHCX_Object_t *pObj)
{
 8004ab6:	b580      	push	{r7, lr}
 8004ab8:	b082      	sub	sp, #8
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d101      	bne.n	8004acc <ISM330DHCX_GYRO_Enable+0x16>
  {
    return ISM330DHCX_OK;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	e014      	b.n	8004af6 <ISM330DHCX_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != ISM330DHCX_OK)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	f103 0220 	add.w	r2, r3, #32
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004ad8:	4619      	mov	r1, r3
 8004ada:	4610      	mov	r0, r2
 8004adc:	f000 ff8a 	bl	80059f4 <ism330dhcx_gy_data_rate_set>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d002      	beq.n	8004aec <ISM330DHCX_GYRO_Enable+0x36>
  {
    return ISM330DHCX_ERROR;
 8004ae6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004aea:	e004      	b.n	8004af6 <ISM330DHCX_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2201      	movs	r2, #1
 8004af0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return ISM330DHCX_OK;
 8004af4:	2300      	movs	r3, #0
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3708      	adds	r7, #8
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}

08004afe <ISM330DHCX_GYRO_Disable>:
  * @brief  Disable the ISM330DHCX gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_Disable(ISM330DHCX_Object_t *pObj)
{
 8004afe:	b580      	push	{r7, lr}
 8004b00:	b082      	sub	sp, #8
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d101      	bne.n	8004b14 <ISM330DHCX_GYRO_Disable+0x16>
  {
    return ISM330DHCX_OK;
 8004b10:	2300      	movs	r3, #0
 8004b12:	e01f      	b.n	8004b54 <ISM330DHCX_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (ism330dhcx_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != ISM330DHCX_OK)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f103 0220 	add.w	r2, r3, #32
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	3334      	adds	r3, #52	; 0x34
 8004b1e:	4619      	mov	r1, r3
 8004b20:	4610      	mov	r0, r2
 8004b22:	f001 f8d3 	bl	8005ccc <ism330dhcx_gy_data_rate_get>
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d002      	beq.n	8004b32 <ISM330DHCX_GYRO_Disable+0x34>
  {
    return ISM330DHCX_ERROR;
 8004b2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b30:	e010      	b.n	8004b54 <ISM330DHCX_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), ISM330DHCX_GY_ODR_OFF) != ISM330DHCX_OK)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	3320      	adds	r3, #32
 8004b36:	2100      	movs	r1, #0
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f000 ff5b 	bl	80059f4 <ism330dhcx_gy_data_rate_set>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d002      	beq.n	8004b4a <ISM330DHCX_GYRO_Disable+0x4c>
  {
    return ISM330DHCX_ERROR;
 8004b44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b48:	e004      	b.n	8004b54 <ISM330DHCX_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return ISM330DHCX_OK;
 8004b52:	2300      	movs	r3, #0
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3708      	adds	r7, #8
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}

08004b5c <ISM330DHCX_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_GetSensitivity(ISM330DHCX_Object_t *pObj, float *Sensitivity)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b084      	sub	sp, #16
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 8004b66:	2300      	movs	r3, #0
 8004b68:	60fb      	str	r3, [r7, #12]
  ism330dhcx_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (ism330dhcx_gy_full_scale_get(&(pObj->Ctx), &full_scale) != ISM330DHCX_OK)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	3320      	adds	r3, #32
 8004b6e:	f107 020b 	add.w	r2, r7, #11
 8004b72:	4611      	mov	r1, r2
 8004b74:	4618      	mov	r0, r3
 8004b76:	f000 feeb 	bl	8005950 <ism330dhcx_gy_full_scale_get>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d002      	beq.n	8004b86 <ISM330DHCX_GYRO_GetSensitivity+0x2a>
  {
    return ISM330DHCX_ERROR;
 8004b80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b84:	e03d      	b.n	8004c02 <ISM330DHCX_GYRO_GetSensitivity+0xa6>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8004b86:	7afb      	ldrb	r3, [r7, #11]
 8004b88:	2b0c      	cmp	r3, #12
 8004b8a:	d835      	bhi.n	8004bf8 <ISM330DHCX_GYRO_GetSensitivity+0x9c>
 8004b8c:	a201      	add	r2, pc, #4	; (adr r2, 8004b94 <ISM330DHCX_GYRO_GetSensitivity+0x38>)
 8004b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b92:	bf00      	nop
 8004b94:	08004bd1 	.word	0x08004bd1
 8004b98:	08004bf1 	.word	0x08004bf1
 8004b9c:	08004bc9 	.word	0x08004bc9
 8004ba0:	08004bf9 	.word	0x08004bf9
 8004ba4:	08004bd9 	.word	0x08004bd9
 8004ba8:	08004bf9 	.word	0x08004bf9
 8004bac:	08004bf9 	.word	0x08004bf9
 8004bb0:	08004bf9 	.word	0x08004bf9
 8004bb4:	08004be1 	.word	0x08004be1
 8004bb8:	08004bf9 	.word	0x08004bf9
 8004bbc:	08004bf9 	.word	0x08004bf9
 8004bc0:	08004bf9 	.word	0x08004bf9
 8004bc4:	08004be9 	.word	0x08004be9
  {
    case ISM330DHCX_125dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_125DPS;
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	4a10      	ldr	r2, [pc, #64]	; (8004c0c <ISM330DHCX_GYRO_GetSensitivity+0xb0>)
 8004bcc:	601a      	str	r2, [r3, #0]
      break;
 8004bce:	e017      	b.n	8004c00 <ISM330DHCX_GYRO_GetSensitivity+0xa4>

    case ISM330DHCX_250dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_250DPS;
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	4a0f      	ldr	r2, [pc, #60]	; (8004c10 <ISM330DHCX_GYRO_GetSensitivity+0xb4>)
 8004bd4:	601a      	str	r2, [r3, #0]
      break;
 8004bd6:	e013      	b.n	8004c00 <ISM330DHCX_GYRO_GetSensitivity+0xa4>

    case ISM330DHCX_500dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_500DPS;
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	4a0e      	ldr	r2, [pc, #56]	; (8004c14 <ISM330DHCX_GYRO_GetSensitivity+0xb8>)
 8004bdc:	601a      	str	r2, [r3, #0]
      break;
 8004bde:	e00f      	b.n	8004c00 <ISM330DHCX_GYRO_GetSensitivity+0xa4>

    case ISM330DHCX_1000dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_1000DPS;
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	4a0d      	ldr	r2, [pc, #52]	; (8004c18 <ISM330DHCX_GYRO_GetSensitivity+0xbc>)
 8004be4:	601a      	str	r2, [r3, #0]
      break;
 8004be6:	e00b      	b.n	8004c00 <ISM330DHCX_GYRO_GetSensitivity+0xa4>

    case ISM330DHCX_2000dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_2000DPS;
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	4a0c      	ldr	r2, [pc, #48]	; (8004c1c <ISM330DHCX_GYRO_GetSensitivity+0xc0>)
 8004bec:	601a      	str	r2, [r3, #0]
      break;
 8004bee:	e007      	b.n	8004c00 <ISM330DHCX_GYRO_GetSensitivity+0xa4>

    case ISM330DHCX_4000dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_4000DPS;
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	4a0b      	ldr	r2, [pc, #44]	; (8004c20 <ISM330DHCX_GYRO_GetSensitivity+0xc4>)
 8004bf4:	601a      	str	r2, [r3, #0]
      break;
 8004bf6:	e003      	b.n	8004c00 <ISM330DHCX_GYRO_GetSensitivity+0xa4>

    default:
      ret = ISM330DHCX_ERROR;
 8004bf8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004bfc:	60fb      	str	r3, [r7, #12]
      break;
 8004bfe:	bf00      	nop
  }

  return ret;
 8004c00:	68fb      	ldr	r3, [r7, #12]
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3710      	adds	r7, #16
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}
 8004c0a:	bf00      	nop
 8004c0c:	408c0000 	.word	0x408c0000
 8004c10:	410c0000 	.word	0x410c0000
 8004c14:	418c0000 	.word	0x418c0000
 8004c18:	420c0000 	.word	0x420c0000
 8004c1c:	428c0000 	.word	0x428c0000
 8004c20:	430c0000 	.word	0x430c0000

08004c24 <ISM330DHCX_GYRO_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_GetOutputDataRate(ISM330DHCX_Object_t *pObj, float *Odr)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b084      	sub	sp, #16
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
 8004c2c:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	60fb      	str	r3, [r7, #12]
  ism330dhcx_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (ism330dhcx_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != ISM330DHCX_OK)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	3320      	adds	r3, #32
 8004c36:	f107 020b 	add.w	r2, r7, #11
 8004c3a:	4611      	mov	r1, r2
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f001 f845 	bl	8005ccc <ism330dhcx_gy_data_rate_get>
 8004c42:	4603      	mov	r3, r0
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d002      	beq.n	8004c4e <ISM330DHCX_GYRO_GetOutputDataRate+0x2a>
  {
    return ISM330DHCX_ERROR;
 8004c48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004c4c:	e04e      	b.n	8004cec <ISM330DHCX_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 8004c4e:	7afb      	ldrb	r3, [r7, #11]
 8004c50:	2b0a      	cmp	r3, #10
 8004c52:	d846      	bhi.n	8004ce2 <ISM330DHCX_GYRO_GetOutputDataRate+0xbe>
 8004c54:	a201      	add	r2, pc, #4	; (adr r2, 8004c5c <ISM330DHCX_GYRO_GetOutputDataRate+0x38>)
 8004c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c5a:	bf00      	nop
 8004c5c:	08004c89 	.word	0x08004c89
 8004c60:	08004c93 	.word	0x08004c93
 8004c64:	08004c9b 	.word	0x08004c9b
 8004c68:	08004ca3 	.word	0x08004ca3
 8004c6c:	08004cab 	.word	0x08004cab
 8004c70:	08004cb3 	.word	0x08004cb3
 8004c74:	08004cbb 	.word	0x08004cbb
 8004c78:	08004cc3 	.word	0x08004cc3
 8004c7c:	08004ccb 	.word	0x08004ccb
 8004c80:	08004cd3 	.word	0x08004cd3
 8004c84:	08004cdb 	.word	0x08004cdb
  {
    case ISM330DHCX_GY_ODR_OFF:
      *Odr = 0.0f;
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	f04f 0200 	mov.w	r2, #0
 8004c8e:	601a      	str	r2, [r3, #0]
      break;
 8004c90:	e02b      	b.n	8004cea <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_12Hz5:
      *Odr = 12.5f;
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	4a17      	ldr	r2, [pc, #92]	; (8004cf4 <ISM330DHCX_GYRO_GetOutputDataRate+0xd0>)
 8004c96:	601a      	str	r2, [r3, #0]
      break;
 8004c98:	e027      	b.n	8004cea <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_26Hz:
      *Odr = 26.0f;
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	4a16      	ldr	r2, [pc, #88]	; (8004cf8 <ISM330DHCX_GYRO_GetOutputDataRate+0xd4>)
 8004c9e:	601a      	str	r2, [r3, #0]
      break;
 8004ca0:	e023      	b.n	8004cea <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_52Hz:
      *Odr = 52.0f;
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	4a15      	ldr	r2, [pc, #84]	; (8004cfc <ISM330DHCX_GYRO_GetOutputDataRate+0xd8>)
 8004ca6:	601a      	str	r2, [r3, #0]
      break;
 8004ca8:	e01f      	b.n	8004cea <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_104Hz:
      *Odr = 104.0f;
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	4a14      	ldr	r2, [pc, #80]	; (8004d00 <ISM330DHCX_GYRO_GetOutputDataRate+0xdc>)
 8004cae:	601a      	str	r2, [r3, #0]
      break;
 8004cb0:	e01b      	b.n	8004cea <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_208Hz:
      *Odr = 208.0f;
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	4a13      	ldr	r2, [pc, #76]	; (8004d04 <ISM330DHCX_GYRO_GetOutputDataRate+0xe0>)
 8004cb6:	601a      	str	r2, [r3, #0]
      break;
 8004cb8:	e017      	b.n	8004cea <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_416Hz:
      *Odr = 416.0f;
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	4a12      	ldr	r2, [pc, #72]	; (8004d08 <ISM330DHCX_GYRO_GetOutputDataRate+0xe4>)
 8004cbe:	601a      	str	r2, [r3, #0]
      break;
 8004cc0:	e013      	b.n	8004cea <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_833Hz:
      *Odr = 833.0f;
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	4a11      	ldr	r2, [pc, #68]	; (8004d0c <ISM330DHCX_GYRO_GetOutputDataRate+0xe8>)
 8004cc6:	601a      	str	r2, [r3, #0]
      break;
 8004cc8:	e00f      	b.n	8004cea <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_1666Hz:
      *Odr =  1666.0f;
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	4a10      	ldr	r2, [pc, #64]	; (8004d10 <ISM330DHCX_GYRO_GetOutputDataRate+0xec>)
 8004cce:	601a      	str	r2, [r3, #0]
      break;
 8004cd0:	e00b      	b.n	8004cea <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_3332Hz:
      *Odr =  3332.0f;
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	4a0f      	ldr	r2, [pc, #60]	; (8004d14 <ISM330DHCX_GYRO_GetOutputDataRate+0xf0>)
 8004cd6:	601a      	str	r2, [r3, #0]
      break;
 8004cd8:	e007      	b.n	8004cea <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_6667Hz:
      *Odr =  6667.0f;
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	4a0e      	ldr	r2, [pc, #56]	; (8004d18 <ISM330DHCX_GYRO_GetOutputDataRate+0xf4>)
 8004cde:	601a      	str	r2, [r3, #0]
      break;
 8004ce0:	e003      	b.n	8004cea <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = ISM330DHCX_ERROR;
 8004ce2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004ce6:	60fb      	str	r3, [r7, #12]
      break;
 8004ce8:	bf00      	nop
  }

  return ret;
 8004cea:	68fb      	ldr	r3, [r7, #12]
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	3710      	adds	r7, #16
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}
 8004cf4:	41480000 	.word	0x41480000
 8004cf8:	41d00000 	.word	0x41d00000
 8004cfc:	42500000 	.word	0x42500000
 8004d00:	42d00000 	.word	0x42d00000
 8004d04:	43500000 	.word	0x43500000
 8004d08:	43d00000 	.word	0x43d00000
 8004d0c:	44504000 	.word	0x44504000
 8004d10:	44d04000 	.word	0x44d04000
 8004d14:	45504000 	.word	0x45504000
 8004d18:	45d05800 	.word	0x45d05800

08004d1c <ISM330DHCX_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_SetOutputDataRate(ISM330DHCX_Object_t *pObj, float Odr)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b082      	sub	sp, #8
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->gyro_is_enabled == 1U)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d106      	bne.n	8004d40 <ISM330DHCX_GYRO_SetOutputDataRate+0x24>
  {
    return ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 8004d32:	ed97 0a00 	vldr	s0, [r7]
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f000 fa3e 	bl	80051b8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	e005      	b.n	8004d4c <ISM330DHCX_GYRO_SetOutputDataRate+0x30>
  }
  else
  {
    return ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 8004d40:	ed97 0a00 	vldr	s0, [r7]
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	f000 fac3 	bl	80052d0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled>
 8004d4a:	4603      	mov	r3, r0
  }
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3708      	adds	r7, #8
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}

08004d54 <ISM330DHCX_GYRO_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_GetFullScale(ISM330DHCX_Object_t *pObj, int32_t  *FullScale)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b084      	sub	sp, #16
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	60fb      	str	r3, [r7, #12]
  ism330dhcx_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (ism330dhcx_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != ISM330DHCX_OK)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	3320      	adds	r3, #32
 8004d66:	f107 020b 	add.w	r2, r7, #11
 8004d6a:	4611      	mov	r1, r2
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	f000 fdef 	bl	8005950 <ism330dhcx_gy_full_scale_get>
 8004d72:	4603      	mov	r3, r0
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d002      	beq.n	8004d7e <ISM330DHCX_GYRO_GetFullScale+0x2a>
  {
    return ISM330DHCX_ERROR;
 8004d78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d7c:	e041      	b.n	8004e02 <ISM330DHCX_GYRO_GetFullScale+0xae>
  }

  switch (fs_low_level)
 8004d7e:	7afb      	ldrb	r3, [r7, #11]
 8004d80:	2b0c      	cmp	r3, #12
 8004d82:	d839      	bhi.n	8004df8 <ISM330DHCX_GYRO_GetFullScale+0xa4>
 8004d84:	a201      	add	r2, pc, #4	; (adr r2, 8004d8c <ISM330DHCX_GYRO_GetFullScale+0x38>)
 8004d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d8a:	bf00      	nop
 8004d8c:	08004dc9 	.word	0x08004dc9
 8004d90:	08004def 	.word	0x08004def
 8004d94:	08004dc1 	.word	0x08004dc1
 8004d98:	08004df9 	.word	0x08004df9
 8004d9c:	08004dd1 	.word	0x08004dd1
 8004da0:	08004df9 	.word	0x08004df9
 8004da4:	08004df9 	.word	0x08004df9
 8004da8:	08004df9 	.word	0x08004df9
 8004dac:	08004ddb 	.word	0x08004ddb
 8004db0:	08004df9 	.word	0x08004df9
 8004db4:	08004df9 	.word	0x08004df9
 8004db8:	08004df9 	.word	0x08004df9
 8004dbc:	08004de5 	.word	0x08004de5
  {
    case ISM330DHCX_125dps:
      *FullScale =  125;
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	227d      	movs	r2, #125	; 0x7d
 8004dc4:	601a      	str	r2, [r3, #0]
      break;
 8004dc6:	e01b      	b.n	8004e00 <ISM330DHCX_GYRO_GetFullScale+0xac>

    case ISM330DHCX_250dps:
      *FullScale =  250;
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	22fa      	movs	r2, #250	; 0xfa
 8004dcc:	601a      	str	r2, [r3, #0]
      break;
 8004dce:	e017      	b.n	8004e00 <ISM330DHCX_GYRO_GetFullScale+0xac>

    case ISM330DHCX_500dps:
      *FullScale =  500;
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004dd6:	601a      	str	r2, [r3, #0]
      break;
 8004dd8:	e012      	b.n	8004e00 <ISM330DHCX_GYRO_GetFullScale+0xac>

    case ISM330DHCX_1000dps:
      *FullScale = 1000;
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004de0:	601a      	str	r2, [r3, #0]
      break;
 8004de2:	e00d      	b.n	8004e00 <ISM330DHCX_GYRO_GetFullScale+0xac>

    case ISM330DHCX_2000dps:
      *FullScale = 2000;
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004dea:	601a      	str	r2, [r3, #0]
      break;
 8004dec:	e008      	b.n	8004e00 <ISM330DHCX_GYRO_GetFullScale+0xac>

    case ISM330DHCX_4000dps:
      *FullScale = 4000;
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8004df4:	601a      	str	r2, [r3, #0]
      break;
 8004df6:	e003      	b.n	8004e00 <ISM330DHCX_GYRO_GetFullScale+0xac>

    default:
      ret = ISM330DHCX_ERROR;
 8004df8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004dfc:	60fb      	str	r3, [r7, #12]
      break;
 8004dfe:	bf00      	nop
  }

  return ret;
 8004e00:	68fb      	ldr	r3, [r7, #12]
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3710      	adds	r7, #16
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}
 8004e0a:	bf00      	nop

08004e0c <ISM330DHCX_GYRO_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_SetFullScale(ISM330DHCX_Object_t *pObj, int32_t FullScale)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b084      	sub	sp, #16
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
 8004e14:	6039      	str	r1, [r7, #0]
  ism330dhcx_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? ISM330DHCX_125dps
           : (FullScale <= 250)  ? ISM330DHCX_250dps
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	2b7d      	cmp	r3, #125	; 0x7d
 8004e1a:	dd18      	ble.n	8004e4e <ISM330DHCX_GYRO_SetFullScale+0x42>
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	2bfa      	cmp	r3, #250	; 0xfa
 8004e20:	dd13      	ble.n	8004e4a <ISM330DHCX_GYRO_SetFullScale+0x3e>
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004e28:	dd0d      	ble.n	8004e46 <ISM330DHCX_GYRO_SetFullScale+0x3a>
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e30:	dd07      	ble.n	8004e42 <ISM330DHCX_GYRO_SetFullScale+0x36>
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004e38:	dc01      	bgt.n	8004e3e <ISM330DHCX_GYRO_SetFullScale+0x32>
 8004e3a:	230c      	movs	r3, #12
 8004e3c:	e008      	b.n	8004e50 <ISM330DHCX_GYRO_SetFullScale+0x44>
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e006      	b.n	8004e50 <ISM330DHCX_GYRO_SetFullScale+0x44>
 8004e42:	2308      	movs	r3, #8
 8004e44:	e004      	b.n	8004e50 <ISM330DHCX_GYRO_SetFullScale+0x44>
 8004e46:	2304      	movs	r3, #4
 8004e48:	e002      	b.n	8004e50 <ISM330DHCX_GYRO_SetFullScale+0x44>
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	e000      	b.n	8004e50 <ISM330DHCX_GYRO_SetFullScale+0x44>
 8004e4e:	2302      	movs	r3, #2
  new_fs = (FullScale <= 125)  ? ISM330DHCX_125dps
 8004e50:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? ISM330DHCX_500dps
           : (FullScale <= 1000) ? ISM330DHCX_1000dps
           : (FullScale <= 2000) ? ISM330DHCX_2000dps
           :                       ISM330DHCX_4000dps;

  if (ism330dhcx_gy_full_scale_set(&(pObj->Ctx), new_fs) != ISM330DHCX_OK)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	3320      	adds	r3, #32
 8004e56:	7bfa      	ldrb	r2, [r7, #15]
 8004e58:	4611      	mov	r1, r2
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f000 fd52 	bl	8005904 <ism330dhcx_gy_full_scale_set>
 8004e60:	4603      	mov	r3, r0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d002      	beq.n	8004e6c <ISM330DHCX_GYRO_SetFullScale+0x60>
  {
    return ISM330DHCX_ERROR;
 8004e66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004e6a:	e000      	b.n	8004e6e <ISM330DHCX_GYRO_SetFullScale+0x62>
  }

  return ISM330DHCX_OK;
 8004e6c:	2300      	movs	r3, #0
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3710      	adds	r7, #16
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}

08004e76 <ISM330DHCX_GYRO_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_GetAxesRaw(ISM330DHCX_Object_t *pObj, ISM330DHCX_AxesRaw_t *Value)
{
 8004e76:	b580      	push	{r7, lr}
 8004e78:	b084      	sub	sp, #16
 8004e7a:	af00      	add	r7, sp, #0
 8004e7c:	6078      	str	r0, [r7, #4]
 8004e7e:	6039      	str	r1, [r7, #0]
  ism330dhcx_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (ism330dhcx_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	3320      	adds	r3, #32
 8004e84:	f107 0208 	add.w	r2, r7, #8
 8004e88:	4611      	mov	r1, r2
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f000 ffa6 	bl	8005ddc <ism330dhcx_angular_rate_raw_get>
 8004e90:	4603      	mov	r3, r0
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d002      	beq.n	8004e9c <ISM330DHCX_GYRO_GetAxesRaw+0x26>
  {
    return ISM330DHCX_ERROR;
 8004e96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004e9a:	e00c      	b.n	8004eb6 <ISM330DHCX_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8004e9c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8004ea4:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8004eac:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	809a      	strh	r2, [r3, #4]

  return ISM330DHCX_OK;
 8004eb4:	2300      	movs	r3, #0
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3710      	adds	r7, #16
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}

08004ebe <ISM330DHCX_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_GetAxes(ISM330DHCX_Object_t *pObj, ISM330DHCX_Axes_t *AngularRate)
{
 8004ebe:	b580      	push	{r7, lr}
 8004ec0:	b086      	sub	sp, #24
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	6078      	str	r0, [r7, #4]
 8004ec6:	6039      	str	r1, [r7, #0]
  ism330dhcx_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (ism330dhcx_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	3320      	adds	r3, #32
 8004ecc:	f107 0210 	add.w	r2, r7, #16
 8004ed0:	4611      	mov	r1, r2
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f000 ff82 	bl	8005ddc <ism330dhcx_angular_rate_raw_get>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d002      	beq.n	8004ee4 <ISM330DHCX_GYRO_GetAxes+0x26>
  {
    return ISM330DHCX_ERROR;
 8004ede:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004ee2:	e03c      	b.n	8004f5e <ISM330DHCX_GYRO_GetAxes+0xa0>
  }

  /* Get ISM330DHCX actual sensitivity. */
  if (ISM330DHCX_GYRO_GetSensitivity(pObj, &sensitivity) != ISM330DHCX_OK)
 8004ee4:	f107 030c 	add.w	r3, r7, #12
 8004ee8:	4619      	mov	r1, r3
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f7ff fe36 	bl	8004b5c <ISM330DHCX_GYRO_GetSensitivity>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d002      	beq.n	8004efc <ISM330DHCX_GYRO_GetAxes+0x3e>
  {
    return ISM330DHCX_ERROR;
 8004ef6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004efa:	e030      	b.n	8004f5e <ISM330DHCX_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8004efc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004f00:	ee07 3a90 	vmov	s15, r3
 8004f04:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004f08:	edd7 7a03 	vldr	s15, [r7, #12]
 8004f0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f10:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f14:	ee17 2a90 	vmov	r2, s15
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8004f1c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004f20:	ee07 3a90 	vmov	s15, r3
 8004f24:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004f28:	edd7 7a03 	vldr	s15, [r7, #12]
 8004f2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f34:	ee17 2a90 	vmov	r2, s15
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8004f3c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004f40:	ee07 3a90 	vmov	s15, r3
 8004f44:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004f48:	edd7 7a03 	vldr	s15, [r7, #12]
 8004f4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f54:	ee17 2a90 	vmov	r2, s15
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	609a      	str	r2, [r3, #8]

  return ISM330DHCX_OK;
 8004f5c:	2300      	movs	r3, #0
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3718      	adds	r7, #24
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}

08004f66 <ISM330DHCX_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_Write_Reg(ISM330DHCX_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8004f66:	b580      	push	{r7, lr}
 8004f68:	b082      	sub	sp, #8
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	6078      	str	r0, [r7, #4]
 8004f6e:	460b      	mov	r3, r1
 8004f70:	70fb      	strb	r3, [r7, #3]
 8004f72:	4613      	mov	r3, r2
 8004f74:	70bb      	strb	r3, [r7, #2]
  if (ism330dhcx_write_reg(&(pObj->Ctx), Reg, &Data, 1) != ISM330DHCX_OK)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	f103 0020 	add.w	r0, r3, #32
 8004f7c:	1cba      	adds	r2, r7, #2
 8004f7e:	78f9      	ldrb	r1, [r7, #3]
 8004f80:	2301      	movs	r3, #1
 8004f82:	f000 fa75 	bl	8005470 <ism330dhcx_write_reg>
 8004f86:	4603      	mov	r3, r0
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d002      	beq.n	8004f92 <ISM330DHCX_Write_Reg+0x2c>
  {
    return ISM330DHCX_ERROR;
 8004f8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004f90:	e000      	b.n	8004f94 <ISM330DHCX_Write_Reg+0x2e>
  }

  return ISM330DHCX_OK;
 8004f92:	2300      	movs	r3, #0
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3708      	adds	r7, #8
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}

08004f9c <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ISM330DHCX_ACC_SetOutputDataRate_When_Enabled(ISM330DHCX_Object_t *pObj, float Odr)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b084      	sub	sp, #16
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	ed87 0a00 	vstr	s0, [r7]
  ism330dhcx_odr_xl_t new_odr;

  new_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
            : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 8004fa8:	edd7 7a00 	vldr	s15, [r7]
 8004fac:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004fb0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004fb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fb8:	d801      	bhi.n	8004fbe <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x22>
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e058      	b.n	8005070 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004fbe:	edd7 7a00 	vldr	s15, [r7]
 8004fc2:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8004fc6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004fca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fce:	d801      	bhi.n	8004fd4 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x38>
 8004fd0:	2302      	movs	r3, #2
 8004fd2:	e04d      	b.n	8005070 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004fd4:	edd7 7a00 	vldr	s15, [r7]
 8004fd8:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8005098 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xfc>
 8004fdc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004fe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fe4:	d801      	bhi.n	8004fea <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8004fe6:	2303      	movs	r3, #3
 8004fe8:	e042      	b.n	8005070 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004fea:	edd7 7a00 	vldr	s15, [r7]
 8004fee:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800509c <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x100>
 8004ff2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ffa:	d801      	bhi.n	8005000 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x64>
 8004ffc:	2304      	movs	r3, #4
 8004ffe:	e037      	b.n	8005070 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8005000:	edd7 7a00 	vldr	s15, [r7]
 8005004:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80050a0 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x104>
 8005008:	eef4 7ac7 	vcmpe.f32	s15, s14
 800500c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005010:	d801      	bhi.n	8005016 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8005012:	2305      	movs	r3, #5
 8005014:	e02c      	b.n	8005070 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8005016:	edd7 7a00 	vldr	s15, [r7]
 800501a:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80050a4 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x108>
 800501e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005026:	d801      	bhi.n	800502c <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x90>
 8005028:	2306      	movs	r3, #6
 800502a:	e021      	b.n	8005070 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800502c:	edd7 7a00 	vldr	s15, [r7]
 8005030:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80050a8 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x10c>
 8005034:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800503c:	d801      	bhi.n	8005042 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xa6>
 800503e:	2307      	movs	r3, #7
 8005040:	e016      	b.n	8005070 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8005042:	edd7 7a00 	vldr	s15, [r7]
 8005046:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80050ac <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x110>
 800504a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800504e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005052:	d801      	bhi.n	8005058 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8005054:	2308      	movs	r3, #8
 8005056:	e00b      	b.n	8005070 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8005058:	edd7 7a00 	vldr	s15, [r7]
 800505c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80050b0 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x114>
 8005060:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005068:	d801      	bhi.n	800506e <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd2>
 800506a:	2309      	movs	r3, #9
 800506c:	e000      	b.n	8005070 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800506e:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
 8005070:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1666.0f) ? ISM330DHCX_XL_ODR_1666Hz
            : (Odr <= 3332.0f) ? ISM330DHCX_XL_ODR_3332Hz
            :                    ISM330DHCX_XL_ODR_6667Hz;

  /* Output data rate selection. */
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), new_odr) != ISM330DHCX_OK)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	3320      	adds	r3, #32
 8005076:	7bfa      	ldrb	r2, [r7, #15]
 8005078:	4611      	mov	r1, r2
 800507a:	4618      	mov	r0, r3
 800507c:	f000 fa6e 	bl	800555c <ism330dhcx_xl_data_rate_set>
 8005080:	4603      	mov	r3, r0
 8005082:	2b00      	cmp	r3, #0
 8005084:	d002      	beq.n	800508c <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xf0>
  {
    return ISM330DHCX_ERROR;
 8005086:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800508a:	e000      	b.n	800508e <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xf2>
  }

  return ISM330DHCX_OK;
 800508c:	2300      	movs	r3, #0
}
 800508e:	4618      	mov	r0, r3
 8005090:	3710      	adds	r7, #16
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}
 8005096:	bf00      	nop
 8005098:	42500000 	.word	0x42500000
 800509c:	42d00000 	.word	0x42d00000
 80050a0:	43500000 	.word	0x43500000
 80050a4:	43d00000 	.word	0x43d00000
 80050a8:	44504000 	.word	0x44504000
 80050ac:	44d04000 	.word	0x44d04000
 80050b0:	45504000 	.word	0x45504000

080050b4 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ISM330DHCX_ACC_SetOutputDataRate_When_Disabled(ISM330DHCX_Object_t *pObj, float Odr)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b083      	sub	sp, #12
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
                  : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 80050c0:	edd7 7a00 	vldr	s15, [r7]
 80050c4:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80050c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80050cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050d0:	d801      	bhi.n	80050d6 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x22>
 80050d2:	2301      	movs	r3, #1
 80050d4:	e058      	b.n	8005188 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80050d6:	edd7 7a00 	vldr	s15, [r7]
 80050da:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80050de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80050e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050e6:	d801      	bhi.n	80050ec <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x38>
 80050e8:	2302      	movs	r3, #2
 80050ea:	e04d      	b.n	8005188 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80050ec:	edd7 7a00 	vldr	s15, [r7]
 80050f0:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800519c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xe8>
 80050f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80050f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050fc:	d801      	bhi.n	8005102 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x4e>
 80050fe:	2303      	movs	r3, #3
 8005100:	e042      	b.n	8005188 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8005102:	edd7 7a00 	vldr	s15, [r7]
 8005106:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80051a0 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xec>
 800510a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800510e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005112:	d801      	bhi.n	8005118 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x64>
 8005114:	2304      	movs	r3, #4
 8005116:	e037      	b.n	8005188 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8005118:	edd7 7a00 	vldr	s15, [r7]
 800511c:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80051a4 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xf0>
 8005120:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005128:	d801      	bhi.n	800512e <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x7a>
 800512a:	2305      	movs	r3, #5
 800512c:	e02c      	b.n	8005188 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800512e:	edd7 7a00 	vldr	s15, [r7]
 8005132:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80051a8 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xf4>
 8005136:	eef4 7ac7 	vcmpe.f32	s15, s14
 800513a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800513e:	d801      	bhi.n	8005144 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x90>
 8005140:	2306      	movs	r3, #6
 8005142:	e021      	b.n	8005188 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8005144:	edd7 7a00 	vldr	s15, [r7]
 8005148:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80051ac <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xf8>
 800514c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005154:	d801      	bhi.n	800515a <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xa6>
 8005156:	2307      	movs	r3, #7
 8005158:	e016      	b.n	8005188 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800515a:	edd7 7a00 	vldr	s15, [r7]
 800515e:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80051b0 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xfc>
 8005162:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800516a:	d801      	bhi.n	8005170 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xbc>
 800516c:	2308      	movs	r3, #8
 800516e:	e00b      	b.n	8005188 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8005170:	edd7 7a00 	vldr	s15, [r7]
 8005174:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80051b4 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x100>
 8005178:	eef4 7ac7 	vcmpe.f32	s15, s14
 800517c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005180:	d801      	bhi.n	8005186 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd2>
 8005182:	2309      	movs	r3, #9
 8005184:	e000      	b.n	8005188 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8005186:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
 8005188:	687a      	ldr	r2, [r7, #4]
 800518a:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
                  : (Odr <=  833.0f) ? ISM330DHCX_XL_ODR_833Hz
                  : (Odr <= 1666.0f) ? ISM330DHCX_XL_ODR_1666Hz
                  : (Odr <= 3332.0f) ? ISM330DHCX_XL_ODR_3332Hz
                  :                    ISM330DHCX_XL_ODR_6667Hz;

  return ISM330DHCX_OK;
 800518e:	2300      	movs	r3, #0
}
 8005190:	4618      	mov	r0, r3
 8005192:	370c      	adds	r7, #12
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr
 800519c:	42500000 	.word	0x42500000
 80051a0:	42d00000 	.word	0x42d00000
 80051a4:	43500000 	.word	0x43500000
 80051a8:	43d00000 	.word	0x43d00000
 80051ac:	44504000 	.word	0x44504000
 80051b0:	44d04000 	.word	0x44d04000
 80051b4:	45504000 	.word	0x45504000

080051b8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled(ISM330DHCX_Object_t *pObj, float Odr)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b084      	sub	sp, #16
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
 80051c0:	ed87 0a00 	vstr	s0, [r7]
  ism330dhcx_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
            : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 80051c4:	edd7 7a00 	vldr	s15, [r7]
 80051c8:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80051cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80051d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051d4:	d801      	bhi.n	80051da <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x22>
 80051d6:	2301      	movs	r3, #1
 80051d8:	e058      	b.n	800528c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80051da:	edd7 7a00 	vldr	s15, [r7]
 80051de:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80051e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80051e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051ea:	d801      	bhi.n	80051f0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x38>
 80051ec:	2302      	movs	r3, #2
 80051ee:	e04d      	b.n	800528c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80051f0:	edd7 7a00 	vldr	s15, [r7]
 80051f4:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80052b4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 80051f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80051fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005200:	d801      	bhi.n	8005206 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 8005202:	2303      	movs	r3, #3
 8005204:	e042      	b.n	800528c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005206:	edd7 7a00 	vldr	s15, [r7]
 800520a:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80052b8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x100>
 800520e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005216:	d801      	bhi.n	800521c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x64>
 8005218:	2304      	movs	r3, #4
 800521a:	e037      	b.n	800528c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800521c:	edd7 7a00 	vldr	s15, [r7]
 8005220:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80052bc <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x104>
 8005224:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800522c:	d801      	bhi.n	8005232 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 800522e:	2305      	movs	r3, #5
 8005230:	e02c      	b.n	800528c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005232:	edd7 7a00 	vldr	s15, [r7]
 8005236:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80052c0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x108>
 800523a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800523e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005242:	d801      	bhi.n	8005248 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x90>
 8005244:	2306      	movs	r3, #6
 8005246:	e021      	b.n	800528c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005248:	edd7 7a00 	vldr	s15, [r7]
 800524c:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80052c4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 8005250:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005258:	d801      	bhi.n	800525e <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 800525a:	2307      	movs	r3, #7
 800525c:	e016      	b.n	800528c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800525e:	edd7 7a00 	vldr	s15, [r7]
 8005262:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80052c8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x110>
 8005266:	eef4 7ac7 	vcmpe.f32	s15, s14
 800526a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800526e:	d801      	bhi.n	8005274 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 8005270:	2308      	movs	r3, #8
 8005272:	e00b      	b.n	800528c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005274:	edd7 7a00 	vldr	s15, [r7]
 8005278:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80052cc <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x114>
 800527c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005284:	d801      	bhi.n	800528a <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 8005286:	2309      	movs	r3, #9
 8005288:	e000      	b.n	800528c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800528a:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
 800528c:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1666.0f) ? ISM330DHCX_GY_ODR_1666Hz
            : (Odr <= 3332.0f) ? ISM330DHCX_GY_ODR_3332Hz
            :                    ISM330DHCX_GY_ODR_6667Hz;

  /* Output data rate selection. */
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), new_odr) != ISM330DHCX_OK)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	3320      	adds	r3, #32
 8005292:	7bfa      	ldrb	r2, [r7, #15]
 8005294:	4611      	mov	r1, r2
 8005296:	4618      	mov	r0, r3
 8005298:	f000 fbac 	bl	80059f4 <ism330dhcx_gy_data_rate_set>
 800529c:	4603      	mov	r3, r0
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d002      	beq.n	80052a8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return ISM330DHCX_ERROR;
 80052a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80052a6:	e000      	b.n	80052aa <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return ISM330DHCX_OK;
 80052a8:	2300      	movs	r3, #0
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3710      	adds	r7, #16
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}
 80052b2:	bf00      	nop
 80052b4:	42500000 	.word	0x42500000
 80052b8:	42d00000 	.word	0x42d00000
 80052bc:	43500000 	.word	0x43500000
 80052c0:	43d00000 	.word	0x43d00000
 80052c4:	44504000 	.word	0x44504000
 80052c8:	44d04000 	.word	0x44d04000
 80052cc:	45504000 	.word	0x45504000

080052d0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled(ISM330DHCX_Object_t *pObj, float Odr)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b083      	sub	sp, #12
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
 80052d8:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
                   : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 80052dc:	edd7 7a00 	vldr	s15, [r7]
 80052e0:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80052e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052ec:	d801      	bhi.n	80052f2 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x22>
 80052ee:	2301      	movs	r3, #1
 80052f0:	e058      	b.n	80053a4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80052f2:	edd7 7a00 	vldr	s15, [r7]
 80052f6:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80052fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005302:	d801      	bhi.n	8005308 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x38>
 8005304:	2302      	movs	r3, #2
 8005306:	e04d      	b.n	80053a4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005308:	edd7 7a00 	vldr	s15, [r7]
 800530c:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80053b8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 8005310:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005318:	d801      	bhi.n	800531e <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 800531a:	2303      	movs	r3, #3
 800531c:	e042      	b.n	80053a4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800531e:	edd7 7a00 	vldr	s15, [r7]
 8005322:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80053bc <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xec>
 8005326:	eef4 7ac7 	vcmpe.f32	s15, s14
 800532a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800532e:	d801      	bhi.n	8005334 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8005330:	2304      	movs	r3, #4
 8005332:	e037      	b.n	80053a4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005334:	edd7 7a00 	vldr	s15, [r7]
 8005338:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80053c0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 800533c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005344:	d801      	bhi.n	800534a <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 8005346:	2305      	movs	r3, #5
 8005348:	e02c      	b.n	80053a4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800534a:	edd7 7a00 	vldr	s15, [r7]
 800534e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80053c4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 8005352:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800535a:	d801      	bhi.n	8005360 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x90>
 800535c:	2306      	movs	r3, #6
 800535e:	e021      	b.n	80053a4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005360:	edd7 7a00 	vldr	s15, [r7]
 8005364:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80053c8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 8005368:	eef4 7ac7 	vcmpe.f32	s15, s14
 800536c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005370:	d801      	bhi.n	8005376 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 8005372:	2307      	movs	r3, #7
 8005374:	e016      	b.n	80053a4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005376:	edd7 7a00 	vldr	s15, [r7]
 800537a:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80053cc <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 800537e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005386:	d801      	bhi.n	800538c <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8005388:	2308      	movs	r3, #8
 800538a:	e00b      	b.n	80053a4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800538c:	edd7 7a00 	vldr	s15, [r7]
 8005390:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80053d0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x100>
 8005394:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800539c:	d801      	bhi.n	80053a2 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 800539e:	2309      	movs	r3, #9
 80053a0:	e000      	b.n	80053a4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80053a2:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
 80053a4:	687a      	ldr	r2, [r7, #4]
 80053a6:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
                   : (Odr <=  833.0f) ? ISM330DHCX_GY_ODR_833Hz
                   : (Odr <= 1666.0f) ? ISM330DHCX_GY_ODR_1666Hz
                   : (Odr <= 3332.0f) ? ISM330DHCX_GY_ODR_3332Hz
                   :                    ISM330DHCX_GY_ODR_6667Hz;

  return ISM330DHCX_OK;
 80053aa:	2300      	movs	r3, #0
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	370c      	adds	r7, #12
 80053b0:	46bd      	mov	sp, r7
 80053b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b6:	4770      	bx	lr
 80053b8:	42500000 	.word	0x42500000
 80053bc:	42d00000 	.word	0x42d00000
 80053c0:	43500000 	.word	0x43500000
 80053c4:	43d00000 	.word	0x43d00000
 80053c8:	44504000 	.word	0x44504000
 80053cc:	44d04000 	.word	0x44d04000
 80053d0:	45504000 	.word	0x45504000

080053d4 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80053d4:	b590      	push	{r4, r7, lr}
 80053d6:	b087      	sub	sp, #28
 80053d8:	af00      	add	r7, sp, #0
 80053da:	60f8      	str	r0, [r7, #12]
 80053dc:	607a      	str	r2, [r7, #4]
 80053de:	461a      	mov	r2, r3
 80053e0:	460b      	mov	r3, r1
 80053e2:	72fb      	strb	r3, [r7, #11]
 80053e4:	4613      	mov	r3, r2
 80053e6:	813b      	strh	r3, [r7, #8]
  ISM330DHCX_Object_t *pObj = (ISM330DHCX_Object_t *)Handle;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	695c      	ldr	r4, [r3, #20]
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	7b1b      	ldrb	r3, [r3, #12]
 80053f4:	b298      	uxth	r0, r3
 80053f6:	7afb      	ldrb	r3, [r7, #11]
 80053f8:	b299      	uxth	r1, r3
 80053fa:	893b      	ldrh	r3, [r7, #8]
 80053fc:	687a      	ldr	r2, [r7, #4]
 80053fe:	47a0      	blx	r4
 8005400:	4603      	mov	r3, r0
}
 8005402:	4618      	mov	r0, r3
 8005404:	371c      	adds	r7, #28
 8005406:	46bd      	mov	sp, r7
 8005408:	bd90      	pop	{r4, r7, pc}

0800540a <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800540a:	b590      	push	{r4, r7, lr}
 800540c:	b087      	sub	sp, #28
 800540e:	af00      	add	r7, sp, #0
 8005410:	60f8      	str	r0, [r7, #12]
 8005412:	607a      	str	r2, [r7, #4]
 8005414:	461a      	mov	r2, r3
 8005416:	460b      	mov	r3, r1
 8005418:	72fb      	strb	r3, [r7, #11]
 800541a:	4613      	mov	r3, r2
 800541c:	813b      	strh	r3, [r7, #8]
  ISM330DHCX_Object_t *pObj = (ISM330DHCX_Object_t *)Handle;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	691c      	ldr	r4, [r3, #16]
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	7b1b      	ldrb	r3, [r3, #12]
 800542a:	b298      	uxth	r0, r3
 800542c:	7afb      	ldrb	r3, [r7, #11]
 800542e:	b299      	uxth	r1, r3
 8005430:	893b      	ldrh	r3, [r7, #8]
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	47a0      	blx	r4
 8005436:	4603      	mov	r3, r0
}
 8005438:	4618      	mov	r0, r3
 800543a:	371c      	adds	r7, #28
 800543c:	46bd      	mov	sp, r7
 800543e:	bd90      	pop	{r4, r7, pc}

08005440 <ism330dhcx_read_reg>:
  *
  */
int32_t __weak ism330dhcx_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                   uint8_t *data,
                                   uint16_t len)
{
 8005440:	b590      	push	{r4, r7, lr}
 8005442:	b087      	sub	sp, #28
 8005444:	af00      	add	r7, sp, #0
 8005446:	60f8      	str	r0, [r7, #12]
 8005448:	607a      	str	r2, [r7, #4]
 800544a:	461a      	mov	r2, r3
 800544c:	460b      	mov	r3, r1
 800544e:	72fb      	strb	r3, [r7, #11]
 8005450:	4613      	mov	r3, r2
 8005452:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	685c      	ldr	r4, [r3, #4]
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	68d8      	ldr	r0, [r3, #12]
 800545c:	893b      	ldrh	r3, [r7, #8]
 800545e:	7af9      	ldrb	r1, [r7, #11]
 8005460:	687a      	ldr	r2, [r7, #4]
 8005462:	47a0      	blx	r4
 8005464:	6178      	str	r0, [r7, #20]

  return ret;
 8005466:	697b      	ldr	r3, [r7, #20]
}
 8005468:	4618      	mov	r0, r3
 800546a:	371c      	adds	r7, #28
 800546c:	46bd      	mov	sp, r7
 800546e:	bd90      	pop	{r4, r7, pc}

08005470 <ism330dhcx_write_reg>:
  *
  */
int32_t __weak ism330dhcx_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                    uint8_t *data,
                                    uint16_t len)
{
 8005470:	b590      	push	{r4, r7, lr}
 8005472:	b087      	sub	sp, #28
 8005474:	af00      	add	r7, sp, #0
 8005476:	60f8      	str	r0, [r7, #12]
 8005478:	607a      	str	r2, [r7, #4]
 800547a:	461a      	mov	r2, r3
 800547c:	460b      	mov	r3, r1
 800547e:	72fb      	strb	r3, [r7, #11]
 8005480:	4613      	mov	r3, r2
 8005482:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681c      	ldr	r4, [r3, #0]
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	68d8      	ldr	r0, [r3, #12]
 800548c:	893b      	ldrh	r3, [r7, #8]
 800548e:	7af9      	ldrb	r1, [r7, #11]
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	47a0      	blx	r4
 8005494:	6178      	str	r0, [r7, #20]

  return ret;
 8005496:	697b      	ldr	r3, [r7, #20]
}
 8005498:	4618      	mov	r0, r3
 800549a:	371c      	adds	r7, #28
 800549c:	46bd      	mov	sp, r7
 800549e:	bd90      	pop	{r4, r7, pc}

080054a0 <ism330dhcx_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_full_scale_set(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_xl_t val)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b084      	sub	sp, #16
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	460b      	mov	r3, r1
 80054aa:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 80054ac:	f107 0208 	add.w	r2, r7, #8
 80054b0:	2301      	movs	r3, #1
 80054b2:	2110      	movs	r1, #16
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f7ff ffc3 	bl	8005440 <ism330dhcx_read_reg>
 80054ba:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);

  if (ret == 0)
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d10f      	bne.n	80054e2 <ism330dhcx_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t)val;
 80054c2:	78fb      	ldrb	r3, [r7, #3]
 80054c4:	f003 0303 	and.w	r3, r3, #3
 80054c8:	b2da      	uxtb	r2, r3
 80054ca:	7a3b      	ldrb	r3, [r7, #8]
 80054cc:	f362 0383 	bfi	r3, r2, #2, #2
 80054d0:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL1_XL,
 80054d2:	f107 0208 	add.w	r2, r7, #8
 80054d6:	2301      	movs	r3, #1
 80054d8:	2110      	movs	r1, #16
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f7ff ffc8 	bl	8005470 <ism330dhcx_write_reg>
 80054e0:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 80054e2:	68fb      	ldr	r3, [r7, #12]
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3710      	adds	r7, #16
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}

080054ec <ism330dhcx_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_full_scale_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_xl_t *val)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b084      	sub	sp, #16
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 80054f6:	f107 0208 	add.w	r2, r7, #8
 80054fa:	2301      	movs	r3, #1
 80054fc:	2110      	movs	r1, #16
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f7ff ff9e 	bl	8005440 <ism330dhcx_read_reg>
 8005504:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);

  switch (ctrl1_xl.fs_xl)
 8005506:	7a3b      	ldrb	r3, [r7, #8]
 8005508:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800550c:	b2db      	uxtb	r3, r3
 800550e:	2b03      	cmp	r3, #3
 8005510:	d81a      	bhi.n	8005548 <ism330dhcx_xl_full_scale_get+0x5c>
 8005512:	a201      	add	r2, pc, #4	; (adr r2, 8005518 <ism330dhcx_xl_full_scale_get+0x2c>)
 8005514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005518:	08005529 	.word	0x08005529
 800551c:	08005531 	.word	0x08005531
 8005520:	08005539 	.word	0x08005539
 8005524:	08005541 	.word	0x08005541
  {
    case ISM330DHCX_2g:
      *val = ISM330DHCX_2g;
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	2200      	movs	r2, #0
 800552c:	701a      	strb	r2, [r3, #0]
      break;
 800552e:	e00f      	b.n	8005550 <ism330dhcx_xl_full_scale_get+0x64>

    case ISM330DHCX_16g:
      *val = ISM330DHCX_16g;
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	2201      	movs	r2, #1
 8005534:	701a      	strb	r2, [r3, #0]
      break;
 8005536:	e00b      	b.n	8005550 <ism330dhcx_xl_full_scale_get+0x64>

    case ISM330DHCX_4g:
      *val = ISM330DHCX_4g;
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	2202      	movs	r2, #2
 800553c:	701a      	strb	r2, [r3, #0]
      break;
 800553e:	e007      	b.n	8005550 <ism330dhcx_xl_full_scale_get+0x64>

    case ISM330DHCX_8g:
      *val = ISM330DHCX_8g;
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	2203      	movs	r2, #3
 8005544:	701a      	strb	r2, [r3, #0]
      break;
 8005546:	e003      	b.n	8005550 <ism330dhcx_xl_full_scale_get+0x64>

    default:
      *val = ISM330DHCX_2g;
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	2200      	movs	r2, #0
 800554c:	701a      	strb	r2, [r3, #0]
      break;
 800554e:	bf00      	nop
  }

  return ret;
 8005550:	68fb      	ldr	r3, [r7, #12]
}
 8005552:	4618      	mov	r0, r3
 8005554:	3710      	adds	r7, #16
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}
 800555a:	bf00      	nop

0800555c <ism330dhcx_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_data_rate_set(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_xl_t val)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b086      	sub	sp, #24
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	460b      	mov	r3, r1
 8005566:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_odr_xl_t odr_xl =  val;
 8005568:	78fb      	ldrb	r3, [r7, #3]
 800556a:	75fb      	strb	r3, [r7, #23]
  uint8_t mlc_enable;
  ism330dhcx_mlc_odr_t mlc_odr;
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  /* Check the Finite State Machine data rate constraints */
  ret =  ism330dhcx_fsm_enable_get(ctx, &fsm_enable);
 800556c:	f107 030c 	add.w	r3, r7, #12
 8005570:	4619      	mov	r1, r3
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f000 fd97 	bl	80060a6 <ism330dhcx_fsm_enable_get>
 8005578:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	2b00      	cmp	r3, #0
 800557e:	f040 80c4 	bne.w	800570a <ism330dhcx_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005582:	7b3b      	ldrb	r3, [r7, #12]
 8005584:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005588:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 800558a:	7b3b      	ldrb	r3, [r7, #12]
 800558c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005590:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005592:	4313      	orrs	r3, r2
 8005594:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8005596:	7b3b      	ldrb	r3, [r7, #12]
 8005598:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800559c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 800559e:	4313      	orrs	r3, r2
 80055a0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80055a2:	7b3b      	ldrb	r3, [r7, #12]
 80055a4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80055a8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80055aa:	4313      	orrs	r3, r2
 80055ac:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80055ae:	7b3b      	ldrb	r3, [r7, #12]
 80055b0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80055b4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80055b6:	4313      	orrs	r3, r2
 80055b8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80055ba:	7b3b      	ldrb	r3, [r7, #12]
 80055bc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80055c0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80055c2:	4313      	orrs	r3, r2
 80055c4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 80055c6:	7b3b      	ldrb	r3, [r7, #12]
 80055c8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80055cc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80055ce:	4313      	orrs	r3, r2
 80055d0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 80055d2:	7b3b      	ldrb	r3, [r7, #12]
 80055d4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80055d8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 80055da:	4313      	orrs	r3, r2
 80055dc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 80055de:	7b7b      	ldrb	r3, [r7, #13]
 80055e0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80055e4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 80055e6:	4313      	orrs	r3, r2
 80055e8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 80055ea:	7b7b      	ldrb	r3, [r7, #13]
 80055ec:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80055f0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 80055f2:	4313      	orrs	r3, r2
 80055f4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 80055f6:	7b7b      	ldrb	r3, [r7, #13]
 80055f8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80055fc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 80055fe:	4313      	orrs	r3, r2
 8005600:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8005602:	7b7b      	ldrb	r3, [r7, #13]
 8005604:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005608:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800560a:	4313      	orrs	r3, r2
 800560c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 800560e:	7b7b      	ldrb	r3, [r7, #13]
 8005610:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005614:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8005616:	4313      	orrs	r3, r2
 8005618:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800561a:	7b7b      	ldrb	r3, [r7, #13]
 800561c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005620:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8005622:	4313      	orrs	r3, r2
 8005624:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8005626:	7b7b      	ldrb	r3, [r7, #13]
 8005628:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800562c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800562e:	4313      	orrs	r3, r2
 8005630:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8005632:	7b7b      	ldrb	r3, [r7, #13]
 8005634:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005638:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800563a:	4313      	orrs	r3, r2
 800563c:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800563e:	2b01      	cmp	r3, #1
 8005640:	d163      	bne.n	800570a <ism330dhcx_xl_data_rate_set+0x1ae>
    {
      ret =  ism330dhcx_fsm_data_rate_get(ctx, &fsm_odr);
 8005642:	f107 030b 	add.w	r3, r7, #11
 8005646:	4619      	mov	r1, r3
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f000 fd59 	bl	8006100 <ism330dhcx_fsm_data_rate_get>
 800564e:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d159      	bne.n	800570a <ism330dhcx_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8005656:	7afb      	ldrb	r3, [r7, #11]
 8005658:	2b03      	cmp	r3, #3
 800565a:	d853      	bhi.n	8005704 <ism330dhcx_xl_data_rate_set+0x1a8>
 800565c:	a201      	add	r2, pc, #4	; (adr r2, 8005664 <ism330dhcx_xl_data_rate_set+0x108>)
 800565e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005662:	bf00      	nop
 8005664:	08005675 	.word	0x08005675
 8005668:	08005687 	.word	0x08005687
 800566c:	080056a5 	.word	0x080056a5
 8005670:	080056cf 	.word	0x080056cf
        {
          case ISM330DHCX_ODR_FSM_12Hz5:
            if (val == ISM330DHCX_XL_ODR_OFF)
 8005674:	78fb      	ldrb	r3, [r7, #3]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d102      	bne.n	8005680 <ism330dhcx_xl_data_rate_set+0x124>
            {
              odr_xl = ISM330DHCX_XL_ODR_12Hz5;
 800567a:	2301      	movs	r3, #1
 800567c:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 800567e:	e044      	b.n	800570a <ism330dhcx_xl_data_rate_set+0x1ae>
              odr_xl = val;
 8005680:	78fb      	ldrb	r3, [r7, #3]
 8005682:	75fb      	strb	r3, [r7, #23]
            break;
 8005684:	e041      	b.n	800570a <ism330dhcx_xl_data_rate_set+0x1ae>

          case ISM330DHCX_ODR_FSM_26Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 8005686:	78fb      	ldrb	r3, [r7, #3]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d102      	bne.n	8005692 <ism330dhcx_xl_data_rate_set+0x136>
            {
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 800568c:	2302      	movs	r3, #2
 800568e:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8005690:	e03b      	b.n	800570a <ism330dhcx_xl_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 8005692:	78fb      	ldrb	r3, [r7, #3]
 8005694:	2b01      	cmp	r3, #1
 8005696:	d102      	bne.n	800569e <ism330dhcx_xl_data_rate_set+0x142>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 8005698:	2302      	movs	r3, #2
 800569a:	75fb      	strb	r3, [r7, #23]
            break;
 800569c:	e035      	b.n	800570a <ism330dhcx_xl_data_rate_set+0x1ae>
              odr_xl = val;
 800569e:	78fb      	ldrb	r3, [r7, #3]
 80056a0:	75fb      	strb	r3, [r7, #23]
            break;
 80056a2:	e032      	b.n	800570a <ism330dhcx_xl_data_rate_set+0x1ae>

          case ISM330DHCX_ODR_FSM_52Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 80056a4:	78fb      	ldrb	r3, [r7, #3]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d102      	bne.n	80056b0 <ism330dhcx_xl_data_rate_set+0x154>
            {
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 80056aa:	2303      	movs	r3, #3
 80056ac:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 80056ae:	e02c      	b.n	800570a <ism330dhcx_xl_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 80056b0:	78fb      	ldrb	r3, [r7, #3]
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	d102      	bne.n	80056bc <ism330dhcx_xl_data_rate_set+0x160>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 80056b6:	2303      	movs	r3, #3
 80056b8:	75fb      	strb	r3, [r7, #23]
            break;
 80056ba:	e026      	b.n	800570a <ism330dhcx_xl_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_XL_ODR_26Hz)
 80056bc:	78fb      	ldrb	r3, [r7, #3]
 80056be:	2b02      	cmp	r3, #2
 80056c0:	d102      	bne.n	80056c8 <ism330dhcx_xl_data_rate_set+0x16c>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 80056c2:	2303      	movs	r3, #3
 80056c4:	75fb      	strb	r3, [r7, #23]
            break;
 80056c6:	e020      	b.n	800570a <ism330dhcx_xl_data_rate_set+0x1ae>
              odr_xl = val;
 80056c8:	78fb      	ldrb	r3, [r7, #3]
 80056ca:	75fb      	strb	r3, [r7, #23]
            break;
 80056cc:	e01d      	b.n	800570a <ism330dhcx_xl_data_rate_set+0x1ae>

          case ISM330DHCX_ODR_FSM_104Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 80056ce:	78fb      	ldrb	r3, [r7, #3]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d102      	bne.n	80056da <ism330dhcx_xl_data_rate_set+0x17e>
            {
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 80056d4:	2304      	movs	r3, #4
 80056d6:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 80056d8:	e017      	b.n	800570a <ism330dhcx_xl_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 80056da:	78fb      	ldrb	r3, [r7, #3]
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d102      	bne.n	80056e6 <ism330dhcx_xl_data_rate_set+0x18a>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 80056e0:	2304      	movs	r3, #4
 80056e2:	75fb      	strb	r3, [r7, #23]
            break;
 80056e4:	e011      	b.n	800570a <ism330dhcx_xl_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_XL_ODR_26Hz)
 80056e6:	78fb      	ldrb	r3, [r7, #3]
 80056e8:	2b02      	cmp	r3, #2
 80056ea:	d102      	bne.n	80056f2 <ism330dhcx_xl_data_rate_set+0x196>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 80056ec:	2304      	movs	r3, #4
 80056ee:	75fb      	strb	r3, [r7, #23]
            break;
 80056f0:	e00b      	b.n	800570a <ism330dhcx_xl_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_XL_ODR_52Hz)
 80056f2:	78fb      	ldrb	r3, [r7, #3]
 80056f4:	2b03      	cmp	r3, #3
 80056f6:	d102      	bne.n	80056fe <ism330dhcx_xl_data_rate_set+0x1a2>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 80056f8:	2304      	movs	r3, #4
 80056fa:	75fb      	strb	r3, [r7, #23]
            break;
 80056fc:	e005      	b.n	800570a <ism330dhcx_xl_data_rate_set+0x1ae>
              odr_xl = val;
 80056fe:	78fb      	ldrb	r3, [r7, #3]
 8005700:	75fb      	strb	r3, [r7, #23]
            break;
 8005702:	e002      	b.n	800570a <ism330dhcx_xl_data_rate_set+0x1ae>

          default:
            odr_xl = val;
 8005704:	78fb      	ldrb	r3, [r7, #3]
 8005706:	75fb      	strb	r3, [r7, #23]
            break;
 8005708:	bf00      	nop
      }
    }
  }

  /* Check the Machine Learning Core data rate constraints */
  mlc_enable = PROPERTY_DISABLE;
 800570a:	2300      	movs	r3, #0
 800570c:	72bb      	strb	r3, [r7, #10]

  if (ret == 0)
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d16c      	bne.n	80057ee <ism330dhcx_xl_data_rate_set+0x292>
  {
    ret =  ism330dhcx_mlc_get(ctx, &mlc_enable);
 8005714:	f107 030a 	add.w	r3, r7, #10
 8005718:	4619      	mov	r1, r3
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f000 fd38 	bl	8006190 <ism330dhcx_mlc_get>
 8005720:	6138      	str	r0, [r7, #16]

    if (mlc_enable == PROPERTY_ENABLE)
 8005722:	7abb      	ldrb	r3, [r7, #10]
 8005724:	2b01      	cmp	r3, #1
 8005726:	d162      	bne.n	80057ee <ism330dhcx_xl_data_rate_set+0x292>
    {
      ret =  ism330dhcx_mlc_data_rate_get(ctx, &mlc_odr);
 8005728:	f107 0309 	add.w	r3, r7, #9
 800572c:	4619      	mov	r1, r3
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f000 fd58 	bl	80061e4 <ism330dhcx_mlc_data_rate_get>
 8005734:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d158      	bne.n	80057ee <ism330dhcx_xl_data_rate_set+0x292>
      {
        switch (mlc_odr)
 800573c:	7a7b      	ldrb	r3, [r7, #9]
 800573e:	2b03      	cmp	r3, #3
 8005740:	d852      	bhi.n	80057e8 <ism330dhcx_xl_data_rate_set+0x28c>
 8005742:	a201      	add	r2, pc, #4	; (adr r2, 8005748 <ism330dhcx_xl_data_rate_set+0x1ec>)
 8005744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005748:	08005759 	.word	0x08005759
 800574c:	0800576b 	.word	0x0800576b
 8005750:	08005789 	.word	0x08005789
 8005754:	080057b3 	.word	0x080057b3
        {
          case ISM330DHCX_ODR_PRGS_12Hz5:
            if (val == ISM330DHCX_XL_ODR_OFF)
 8005758:	78fb      	ldrb	r3, [r7, #3]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d102      	bne.n	8005764 <ism330dhcx_xl_data_rate_set+0x208>
            {
              odr_xl = ISM330DHCX_XL_ODR_12Hz5;
 800575e:	2301      	movs	r3, #1
 8005760:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8005762:	e044      	b.n	80057ee <ism330dhcx_xl_data_rate_set+0x292>
              odr_xl = val;
 8005764:	78fb      	ldrb	r3, [r7, #3]
 8005766:	75fb      	strb	r3, [r7, #23]
            break;
 8005768:	e041      	b.n	80057ee <ism330dhcx_xl_data_rate_set+0x292>

          case ISM330DHCX_ODR_PRGS_26Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 800576a:	78fb      	ldrb	r3, [r7, #3]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d102      	bne.n	8005776 <ism330dhcx_xl_data_rate_set+0x21a>
            {
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 8005770:	2302      	movs	r3, #2
 8005772:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8005774:	e03b      	b.n	80057ee <ism330dhcx_xl_data_rate_set+0x292>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 8005776:	78fb      	ldrb	r3, [r7, #3]
 8005778:	2b01      	cmp	r3, #1
 800577a:	d102      	bne.n	8005782 <ism330dhcx_xl_data_rate_set+0x226>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 800577c:	2302      	movs	r3, #2
 800577e:	75fb      	strb	r3, [r7, #23]
            break;
 8005780:	e035      	b.n	80057ee <ism330dhcx_xl_data_rate_set+0x292>
              odr_xl = val;
 8005782:	78fb      	ldrb	r3, [r7, #3]
 8005784:	75fb      	strb	r3, [r7, #23]
            break;
 8005786:	e032      	b.n	80057ee <ism330dhcx_xl_data_rate_set+0x292>

          case ISM330DHCX_ODR_PRGS_52Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 8005788:	78fb      	ldrb	r3, [r7, #3]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d102      	bne.n	8005794 <ism330dhcx_xl_data_rate_set+0x238>
            {
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 800578e:	2303      	movs	r3, #3
 8005790:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8005792:	e02c      	b.n	80057ee <ism330dhcx_xl_data_rate_set+0x292>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 8005794:	78fb      	ldrb	r3, [r7, #3]
 8005796:	2b01      	cmp	r3, #1
 8005798:	d102      	bne.n	80057a0 <ism330dhcx_xl_data_rate_set+0x244>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 800579a:	2303      	movs	r3, #3
 800579c:	75fb      	strb	r3, [r7, #23]
            break;
 800579e:	e026      	b.n	80057ee <ism330dhcx_xl_data_rate_set+0x292>
            else if (val == ISM330DHCX_XL_ODR_26Hz)
 80057a0:	78fb      	ldrb	r3, [r7, #3]
 80057a2:	2b02      	cmp	r3, #2
 80057a4:	d102      	bne.n	80057ac <ism330dhcx_xl_data_rate_set+0x250>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 80057a6:	2303      	movs	r3, #3
 80057a8:	75fb      	strb	r3, [r7, #23]
            break;
 80057aa:	e020      	b.n	80057ee <ism330dhcx_xl_data_rate_set+0x292>
              odr_xl = val;
 80057ac:	78fb      	ldrb	r3, [r7, #3]
 80057ae:	75fb      	strb	r3, [r7, #23]
            break;
 80057b0:	e01d      	b.n	80057ee <ism330dhcx_xl_data_rate_set+0x292>

          case ISM330DHCX_ODR_PRGS_104Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 80057b2:	78fb      	ldrb	r3, [r7, #3]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d102      	bne.n	80057be <ism330dhcx_xl_data_rate_set+0x262>
            {
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 80057b8:	2304      	movs	r3, #4
 80057ba:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 80057bc:	e017      	b.n	80057ee <ism330dhcx_xl_data_rate_set+0x292>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 80057be:	78fb      	ldrb	r3, [r7, #3]
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d102      	bne.n	80057ca <ism330dhcx_xl_data_rate_set+0x26e>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 80057c4:	2304      	movs	r3, #4
 80057c6:	75fb      	strb	r3, [r7, #23]
            break;
 80057c8:	e011      	b.n	80057ee <ism330dhcx_xl_data_rate_set+0x292>
            else if (val == ISM330DHCX_XL_ODR_26Hz)
 80057ca:	78fb      	ldrb	r3, [r7, #3]
 80057cc:	2b02      	cmp	r3, #2
 80057ce:	d102      	bne.n	80057d6 <ism330dhcx_xl_data_rate_set+0x27a>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 80057d0:	2304      	movs	r3, #4
 80057d2:	75fb      	strb	r3, [r7, #23]
            break;
 80057d4:	e00b      	b.n	80057ee <ism330dhcx_xl_data_rate_set+0x292>
            else if (val == ISM330DHCX_XL_ODR_52Hz)
 80057d6:	78fb      	ldrb	r3, [r7, #3]
 80057d8:	2b03      	cmp	r3, #3
 80057da:	d102      	bne.n	80057e2 <ism330dhcx_xl_data_rate_set+0x286>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 80057dc:	2304      	movs	r3, #4
 80057de:	75fb      	strb	r3, [r7, #23]
            break;
 80057e0:	e005      	b.n	80057ee <ism330dhcx_xl_data_rate_set+0x292>
              odr_xl = val;
 80057e2:	78fb      	ldrb	r3, [r7, #3]
 80057e4:	75fb      	strb	r3, [r7, #23]
            break;
 80057e6:	e002      	b.n	80057ee <ism330dhcx_xl_data_rate_set+0x292>

          default:
            odr_xl = val;
 80057e8:	78fb      	ldrb	r3, [r7, #3]
 80057ea:	75fb      	strb	r3, [r7, #23]
            break;
 80057ec:	bf00      	nop
        }
      }
    }
  }

  if (ret == 0)
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d107      	bne.n	8005804 <ism330dhcx_xl_data_rate_set+0x2a8>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 80057f4:	f107 0208 	add.w	r2, r7, #8
 80057f8:	2301      	movs	r3, #1
 80057fa:	2110      	movs	r1, #16
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f7ff fe1f 	bl	8005440 <ism330dhcx_read_reg>
 8005802:	6138      	str	r0, [r7, #16]
                              (uint8_t *)&ctrl1_xl, 1);
  }

  if (ret == 0)
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d10f      	bne.n	800582a <ism330dhcx_xl_data_rate_set+0x2ce>
  {
    ctrl1_xl.odr_xl = (uint8_t)odr_xl;
 800580a:	7dfb      	ldrb	r3, [r7, #23]
 800580c:	f003 030f 	and.w	r3, r3, #15
 8005810:	b2da      	uxtb	r2, r3
 8005812:	7a3b      	ldrb	r3, [r7, #8]
 8005814:	f362 1307 	bfi	r3, r2, #4, #4
 8005818:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL1_XL,
 800581a:	f107 0208 	add.w	r2, r7, #8
 800581e:	2301      	movs	r3, #1
 8005820:	2110      	movs	r1, #16
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f7ff fe24 	bl	8005470 <ism330dhcx_write_reg>
 8005828:	6138      	str	r0, [r7, #16]
                               (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 800582a:	693b      	ldr	r3, [r7, #16]
}
 800582c:	4618      	mov	r0, r3
 800582e:	3718      	adds	r7, #24
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}

08005834 <ism330dhcx_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_data_rate_get(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_xl_t *val)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b084      	sub	sp, #16
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 800583e:	f107 0208 	add.w	r2, r7, #8
 8005842:	2301      	movs	r3, #1
 8005844:	2110      	movs	r1, #16
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f7ff fdfa 	bl	8005440 <ism330dhcx_read_reg>
 800584c:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);

  switch (ctrl1_xl.odr_xl)
 800584e:	7a3b      	ldrb	r3, [r7, #8]
 8005850:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005854:	b2db      	uxtb	r3, r3
 8005856:	2b0b      	cmp	r3, #11
 8005858:	d84a      	bhi.n	80058f0 <ism330dhcx_xl_data_rate_get+0xbc>
 800585a:	a201      	add	r2, pc, #4	; (adr r2, 8005860 <ism330dhcx_xl_data_rate_get+0x2c>)
 800585c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005860:	08005891 	.word	0x08005891
 8005864:	08005899 	.word	0x08005899
 8005868:	080058a1 	.word	0x080058a1
 800586c:	080058a9 	.word	0x080058a9
 8005870:	080058b1 	.word	0x080058b1
 8005874:	080058b9 	.word	0x080058b9
 8005878:	080058c1 	.word	0x080058c1
 800587c:	080058c9 	.word	0x080058c9
 8005880:	080058d1 	.word	0x080058d1
 8005884:	080058d9 	.word	0x080058d9
 8005888:	080058e1 	.word	0x080058e1
 800588c:	080058e9 	.word	0x080058e9
  {
    case ISM330DHCX_XL_ODR_OFF:
      *val = ISM330DHCX_XL_ODR_OFF;
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	2200      	movs	r2, #0
 8005894:	701a      	strb	r2, [r3, #0]
      break;
 8005896:	e02f      	b.n	80058f8 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_12Hz5:
      *val = ISM330DHCX_XL_ODR_12Hz5;
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	2201      	movs	r2, #1
 800589c:	701a      	strb	r2, [r3, #0]
      break;
 800589e:	e02b      	b.n	80058f8 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_26Hz:
      *val = ISM330DHCX_XL_ODR_26Hz;
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	2202      	movs	r2, #2
 80058a4:	701a      	strb	r2, [r3, #0]
      break;
 80058a6:	e027      	b.n	80058f8 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_52Hz:
      *val = ISM330DHCX_XL_ODR_52Hz;
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	2203      	movs	r2, #3
 80058ac:	701a      	strb	r2, [r3, #0]
      break;
 80058ae:	e023      	b.n	80058f8 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_104Hz:
      *val = ISM330DHCX_XL_ODR_104Hz;
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	2204      	movs	r2, #4
 80058b4:	701a      	strb	r2, [r3, #0]
      break;
 80058b6:	e01f      	b.n	80058f8 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_208Hz:
      *val = ISM330DHCX_XL_ODR_208Hz;
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	2205      	movs	r2, #5
 80058bc:	701a      	strb	r2, [r3, #0]
      break;
 80058be:	e01b      	b.n	80058f8 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_416Hz:
      *val = ISM330DHCX_XL_ODR_416Hz;
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	2206      	movs	r2, #6
 80058c4:	701a      	strb	r2, [r3, #0]
      break;
 80058c6:	e017      	b.n	80058f8 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_833Hz:
      *val = ISM330DHCX_XL_ODR_833Hz;
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	2207      	movs	r2, #7
 80058cc:	701a      	strb	r2, [r3, #0]
      break;
 80058ce:	e013      	b.n	80058f8 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_1666Hz:
      *val = ISM330DHCX_XL_ODR_1666Hz;
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	2208      	movs	r2, #8
 80058d4:	701a      	strb	r2, [r3, #0]
      break;
 80058d6:	e00f      	b.n	80058f8 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_3332Hz:
      *val = ISM330DHCX_XL_ODR_3332Hz;
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	2209      	movs	r2, #9
 80058dc:	701a      	strb	r2, [r3, #0]
      break;
 80058de:	e00b      	b.n	80058f8 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_6667Hz:
      *val = ISM330DHCX_XL_ODR_6667Hz;
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	220a      	movs	r2, #10
 80058e4:	701a      	strb	r2, [r3, #0]
      break;
 80058e6:	e007      	b.n	80058f8 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_1Hz6:
      *val = ISM330DHCX_XL_ODR_1Hz6;
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	220b      	movs	r2, #11
 80058ec:	701a      	strb	r2, [r3, #0]
      break;
 80058ee:	e003      	b.n	80058f8 <ism330dhcx_xl_data_rate_get+0xc4>

    default:
      *val = ISM330DHCX_XL_ODR_OFF;
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	2200      	movs	r2, #0
 80058f4:	701a      	strb	r2, [r3, #0]
      break;
 80058f6:	bf00      	nop
  }

  return ret;
 80058f8:	68fb      	ldr	r3, [r7, #12]
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3710      	adds	r7, #16
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}
 8005902:	bf00      	nop

08005904 <ism330dhcx_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_full_scale_set(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_g_t val)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b084      	sub	sp, #16
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	460b      	mov	r3, r1
 800590e:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 8005910:	f107 0208 	add.w	r2, r7, #8
 8005914:	2301      	movs	r3, #1
 8005916:	2111      	movs	r1, #17
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	f7ff fd91 	bl	8005440 <ism330dhcx_read_reg>
 800591e:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl2_g, 1);

  if (ret == 0)
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d10f      	bne.n	8005946 <ism330dhcx_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t)val;
 8005926:	78fb      	ldrb	r3, [r7, #3]
 8005928:	f003 030f 	and.w	r3, r3, #15
 800592c:	b2da      	uxtb	r2, r3
 800592e:	7a3b      	ldrb	r3, [r7, #8]
 8005930:	f362 0303 	bfi	r3, r2, #0, #4
 8005934:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL2_G,
 8005936:	f107 0208 	add.w	r2, r7, #8
 800593a:	2301      	movs	r3, #1
 800593c:	2111      	movs	r1, #17
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f7ff fd96 	bl	8005470 <ism330dhcx_write_reg>
 8005944:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl2_g, 1);
  }

  return ret;
 8005946:	68fb      	ldr	r3, [r7, #12]
}
 8005948:	4618      	mov	r0, r3
 800594a:	3710      	adds	r7, #16
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}

08005950 <ism330dhcx_gy_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_full_scale_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_g_t *val)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b084      	sub	sp, #16
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
 8005958:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 800595a:	f107 0208 	add.w	r2, r7, #8
 800595e:	2301      	movs	r3, #1
 8005960:	2111      	movs	r1, #17
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f7ff fd6c 	bl	8005440 <ism330dhcx_read_reg>
 8005968:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl2_g, 1);

  switch (ctrl2_g.fs_g)
 800596a:	7a3b      	ldrb	r3, [r7, #8]
 800596c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8005970:	b2db      	uxtb	r3, r3
 8005972:	2b0c      	cmp	r3, #12
 8005974:	d834      	bhi.n	80059e0 <ism330dhcx_gy_full_scale_get+0x90>
 8005976:	a201      	add	r2, pc, #4	; (adr r2, 800597c <ism330dhcx_gy_full_scale_get+0x2c>)
 8005978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800597c:	080059b9 	.word	0x080059b9
 8005980:	080059d9 	.word	0x080059d9
 8005984:	080059b1 	.word	0x080059b1
 8005988:	080059e1 	.word	0x080059e1
 800598c:	080059c1 	.word	0x080059c1
 8005990:	080059e1 	.word	0x080059e1
 8005994:	080059e1 	.word	0x080059e1
 8005998:	080059e1 	.word	0x080059e1
 800599c:	080059c9 	.word	0x080059c9
 80059a0:	080059e1 	.word	0x080059e1
 80059a4:	080059e1 	.word	0x080059e1
 80059a8:	080059e1 	.word	0x080059e1
 80059ac:	080059d1 	.word	0x080059d1
  {
    case ISM330DHCX_125dps:
      *val = ISM330DHCX_125dps;
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	2202      	movs	r2, #2
 80059b4:	701a      	strb	r2, [r3, #0]
      break;
 80059b6:	e017      	b.n	80059e8 <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_250dps:
      *val = ISM330DHCX_250dps;
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	2200      	movs	r2, #0
 80059bc:	701a      	strb	r2, [r3, #0]
      break;
 80059be:	e013      	b.n	80059e8 <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_500dps:
      *val = ISM330DHCX_500dps;
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	2204      	movs	r2, #4
 80059c4:	701a      	strb	r2, [r3, #0]
      break;
 80059c6:	e00f      	b.n	80059e8 <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_1000dps:
      *val = ISM330DHCX_1000dps;
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	2208      	movs	r2, #8
 80059cc:	701a      	strb	r2, [r3, #0]
      break;
 80059ce:	e00b      	b.n	80059e8 <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_2000dps:
      *val = ISM330DHCX_2000dps;
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	220c      	movs	r2, #12
 80059d4:	701a      	strb	r2, [r3, #0]
      break;
 80059d6:	e007      	b.n	80059e8 <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_4000dps:
      *val = ISM330DHCX_4000dps;
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	2201      	movs	r2, #1
 80059dc:	701a      	strb	r2, [r3, #0]
      break;
 80059de:	e003      	b.n	80059e8 <ism330dhcx_gy_full_scale_get+0x98>

    default:
      *val = ISM330DHCX_125dps;
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	2202      	movs	r2, #2
 80059e4:	701a      	strb	r2, [r3, #0]
      break;
 80059e6:	bf00      	nop
  }

  return ret;
 80059e8:	68fb      	ldr	r3, [r7, #12]
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3710      	adds	r7, #16
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}
 80059f2:	bf00      	nop

080059f4 <ism330dhcx_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_data_rate_set(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_g_t val)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b086      	sub	sp, #24
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
 80059fc:	460b      	mov	r3, r1
 80059fe:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_odr_g_t odr_gy =  val;
 8005a00:	78fb      	ldrb	r3, [r7, #3]
 8005a02:	75fb      	strb	r3, [r7, #23]
  uint8_t mlc_enable;
  ism330dhcx_mlc_odr_t mlc_odr;
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  /* Check the Finite State Machine data rate constraints */
  ret =  ism330dhcx_fsm_enable_get(ctx, &fsm_enable);
 8005a04:	f107 030c 	add.w	r3, r7, #12
 8005a08:	4619      	mov	r1, r3
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f000 fb4b 	bl	80060a6 <ism330dhcx_fsm_enable_get>
 8005a10:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	f040 80c4 	bne.w	8005ba2 <ism330dhcx_gy_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005a1a:	7b3b      	ldrb	r3, [r7, #12]
 8005a1c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005a20:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8005a22:	7b3b      	ldrb	r3, [r7, #12]
 8005a24:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005a28:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8005a2e:	7b3b      	ldrb	r3, [r7, #12]
 8005a30:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005a34:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8005a36:	4313      	orrs	r3, r2
 8005a38:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8005a3a:	7b3b      	ldrb	r3, [r7, #12]
 8005a3c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005a40:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8005a42:	4313      	orrs	r3, r2
 8005a44:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8005a46:	7b3b      	ldrb	r3, [r7, #12]
 8005a48:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005a4c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8005a52:	7b3b      	ldrb	r3, [r7, #12]
 8005a54:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005a58:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8005a5e:	7b3b      	ldrb	r3, [r7, #12]
 8005a60:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005a64:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8005a66:	4313      	orrs	r3, r2
 8005a68:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8005a6a:	7b3b      	ldrb	r3, [r7, #12]
 8005a6c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005a70:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8005a72:	4313      	orrs	r3, r2
 8005a74:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8005a76:	7b7b      	ldrb	r3, [r7, #13]
 8005a78:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005a7c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8005a82:	7b7b      	ldrb	r3, [r7, #13]
 8005a84:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005a88:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8005a8e:	7b7b      	ldrb	r3, [r7, #13]
 8005a90:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005a94:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8005a96:	4313      	orrs	r3, r2
 8005a98:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8005a9a:	7b7b      	ldrb	r3, [r7, #13]
 8005a9c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005aa0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8005aa6:	7b7b      	ldrb	r3, [r7, #13]
 8005aa8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005aac:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8005ab2:	7b7b      	ldrb	r3, [r7, #13]
 8005ab4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005ab8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8005aba:	4313      	orrs	r3, r2
 8005abc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8005abe:	7b7b      	ldrb	r3, [r7, #13]
 8005ac0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005ac4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8005aca:	7b7b      	ldrb	r3, [r7, #13]
 8005acc:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005ad0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	d163      	bne.n	8005ba2 <ism330dhcx_gy_data_rate_set+0x1ae>
    {
      ret =  ism330dhcx_fsm_data_rate_get(ctx, &fsm_odr);
 8005ada:	f107 030b 	add.w	r3, r7, #11
 8005ade:	4619      	mov	r1, r3
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	f000 fb0d 	bl	8006100 <ism330dhcx_fsm_data_rate_get>
 8005ae6:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d159      	bne.n	8005ba2 <ism330dhcx_gy_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8005aee:	7afb      	ldrb	r3, [r7, #11]
 8005af0:	2b03      	cmp	r3, #3
 8005af2:	d853      	bhi.n	8005b9c <ism330dhcx_gy_data_rate_set+0x1a8>
 8005af4:	a201      	add	r2, pc, #4	; (adr r2, 8005afc <ism330dhcx_gy_data_rate_set+0x108>)
 8005af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005afa:	bf00      	nop
 8005afc:	08005b0d 	.word	0x08005b0d
 8005b00:	08005b1f 	.word	0x08005b1f
 8005b04:	08005b3d 	.word	0x08005b3d
 8005b08:	08005b67 	.word	0x08005b67
        {
          case ISM330DHCX_ODR_FSM_12Hz5:
            if (val == ISM330DHCX_GY_ODR_OFF)
 8005b0c:	78fb      	ldrb	r3, [r7, #3]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d102      	bne.n	8005b18 <ism330dhcx_gy_data_rate_set+0x124>
            {
              odr_gy = ISM330DHCX_GY_ODR_12Hz5;
 8005b12:	2301      	movs	r3, #1
 8005b14:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8005b16:	e044      	b.n	8005ba2 <ism330dhcx_gy_data_rate_set+0x1ae>
              odr_gy = val;
 8005b18:	78fb      	ldrb	r3, [r7, #3]
 8005b1a:	75fb      	strb	r3, [r7, #23]
            break;
 8005b1c:	e041      	b.n	8005ba2 <ism330dhcx_gy_data_rate_set+0x1ae>

          case ISM330DHCX_ODR_FSM_26Hz:
            if (val == ISM330DHCX_GY_ODR_OFF)
 8005b1e:	78fb      	ldrb	r3, [r7, #3]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d102      	bne.n	8005b2a <ism330dhcx_gy_data_rate_set+0x136>
            {
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 8005b24:	2302      	movs	r3, #2
 8005b26:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8005b28:	e03b      	b.n	8005ba2 <ism330dhcx_gy_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 8005b2a:	78fb      	ldrb	r3, [r7, #3]
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d102      	bne.n	8005b36 <ism330dhcx_gy_data_rate_set+0x142>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 8005b30:	2302      	movs	r3, #2
 8005b32:	75fb      	strb	r3, [r7, #23]
            break;
 8005b34:	e035      	b.n	8005ba2 <ism330dhcx_gy_data_rate_set+0x1ae>
              odr_gy = val;
 8005b36:	78fb      	ldrb	r3, [r7, #3]
 8005b38:	75fb      	strb	r3, [r7, #23]
            break;
 8005b3a:	e032      	b.n	8005ba2 <ism330dhcx_gy_data_rate_set+0x1ae>

          case ISM330DHCX_ODR_FSM_52Hz:
            if (val == ISM330DHCX_GY_ODR_OFF)
 8005b3c:	78fb      	ldrb	r3, [r7, #3]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d102      	bne.n	8005b48 <ism330dhcx_gy_data_rate_set+0x154>
            {
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8005b42:	2303      	movs	r3, #3
 8005b44:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8005b46:	e02c      	b.n	8005ba2 <ism330dhcx_gy_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 8005b48:	78fb      	ldrb	r3, [r7, #3]
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	d102      	bne.n	8005b54 <ism330dhcx_gy_data_rate_set+0x160>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8005b4e:	2303      	movs	r3, #3
 8005b50:	75fb      	strb	r3, [r7, #23]
            break;
 8005b52:	e026      	b.n	8005ba2 <ism330dhcx_gy_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_GY_ODR_26Hz)
 8005b54:	78fb      	ldrb	r3, [r7, #3]
 8005b56:	2b02      	cmp	r3, #2
 8005b58:	d102      	bne.n	8005b60 <ism330dhcx_gy_data_rate_set+0x16c>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8005b5a:	2303      	movs	r3, #3
 8005b5c:	75fb      	strb	r3, [r7, #23]
            break;
 8005b5e:	e020      	b.n	8005ba2 <ism330dhcx_gy_data_rate_set+0x1ae>
              odr_gy = val;
 8005b60:	78fb      	ldrb	r3, [r7, #3]
 8005b62:	75fb      	strb	r3, [r7, #23]
            break;
 8005b64:	e01d      	b.n	8005ba2 <ism330dhcx_gy_data_rate_set+0x1ae>

          case ISM330DHCX_ODR_FSM_104Hz:
            if (val == ISM330DHCX_GY_ODR_OFF)
 8005b66:	78fb      	ldrb	r3, [r7, #3]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d102      	bne.n	8005b72 <ism330dhcx_gy_data_rate_set+0x17e>
            {
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8005b6c:	2304      	movs	r3, #4
 8005b6e:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8005b70:	e017      	b.n	8005ba2 <ism330dhcx_gy_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 8005b72:	78fb      	ldrb	r3, [r7, #3]
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d102      	bne.n	8005b7e <ism330dhcx_gy_data_rate_set+0x18a>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8005b78:	2304      	movs	r3, #4
 8005b7a:	75fb      	strb	r3, [r7, #23]
            break;
 8005b7c:	e011      	b.n	8005ba2 <ism330dhcx_gy_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_GY_ODR_26Hz)
 8005b7e:	78fb      	ldrb	r3, [r7, #3]
 8005b80:	2b02      	cmp	r3, #2
 8005b82:	d102      	bne.n	8005b8a <ism330dhcx_gy_data_rate_set+0x196>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8005b84:	2304      	movs	r3, #4
 8005b86:	75fb      	strb	r3, [r7, #23]
            break;
 8005b88:	e00b      	b.n	8005ba2 <ism330dhcx_gy_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_GY_ODR_52Hz)
 8005b8a:	78fb      	ldrb	r3, [r7, #3]
 8005b8c:	2b03      	cmp	r3, #3
 8005b8e:	d102      	bne.n	8005b96 <ism330dhcx_gy_data_rate_set+0x1a2>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8005b90:	2304      	movs	r3, #4
 8005b92:	75fb      	strb	r3, [r7, #23]
            break;
 8005b94:	e005      	b.n	8005ba2 <ism330dhcx_gy_data_rate_set+0x1ae>
              odr_gy = val;
 8005b96:	78fb      	ldrb	r3, [r7, #3]
 8005b98:	75fb      	strb	r3, [r7, #23]
            break;
 8005b9a:	e002      	b.n	8005ba2 <ism330dhcx_gy_data_rate_set+0x1ae>

          default:
            odr_gy = val;
 8005b9c:	78fb      	ldrb	r3, [r7, #3]
 8005b9e:	75fb      	strb	r3, [r7, #23]
            break;
 8005ba0:	bf00      	nop
      }
    }
  }

  /* Check the Machine Learning Core data rate constraints */
  mlc_enable = PROPERTY_DISABLE;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	72bb      	strb	r3, [r7, #10]

  if (ret == 0)
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d16c      	bne.n	8005c86 <ism330dhcx_gy_data_rate_set+0x292>
  {
    ret =  ism330dhcx_mlc_get(ctx, &mlc_enable);
 8005bac:	f107 030a 	add.w	r3, r7, #10
 8005bb0:	4619      	mov	r1, r3
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f000 faec 	bl	8006190 <ism330dhcx_mlc_get>
 8005bb8:	6138      	str	r0, [r7, #16]

    if (mlc_enable == PROPERTY_ENABLE)
 8005bba:	7abb      	ldrb	r3, [r7, #10]
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d162      	bne.n	8005c86 <ism330dhcx_gy_data_rate_set+0x292>
    {
      ret =  ism330dhcx_mlc_data_rate_get(ctx, &mlc_odr);
 8005bc0:	f107 0309 	add.w	r3, r7, #9
 8005bc4:	4619      	mov	r1, r3
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f000 fb0c 	bl	80061e4 <ism330dhcx_mlc_data_rate_get>
 8005bcc:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d158      	bne.n	8005c86 <ism330dhcx_gy_data_rate_set+0x292>
      {
        switch (mlc_odr)
 8005bd4:	7a7b      	ldrb	r3, [r7, #9]
 8005bd6:	2b03      	cmp	r3, #3
 8005bd8:	d852      	bhi.n	8005c80 <ism330dhcx_gy_data_rate_set+0x28c>
 8005bda:	a201      	add	r2, pc, #4	; (adr r2, 8005be0 <ism330dhcx_gy_data_rate_set+0x1ec>)
 8005bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005be0:	08005bf1 	.word	0x08005bf1
 8005be4:	08005c03 	.word	0x08005c03
 8005be8:	08005c21 	.word	0x08005c21
 8005bec:	08005c4b 	.word	0x08005c4b
        {
          case ISM330DHCX_ODR_PRGS_12Hz5:
            if (val == ISM330DHCX_GY_ODR_OFF)
 8005bf0:	78fb      	ldrb	r3, [r7, #3]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d102      	bne.n	8005bfc <ism330dhcx_gy_data_rate_set+0x208>
            {
              odr_gy = ISM330DHCX_GY_ODR_12Hz5;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8005bfa:	e044      	b.n	8005c86 <ism330dhcx_gy_data_rate_set+0x292>
              odr_gy = val;
 8005bfc:	78fb      	ldrb	r3, [r7, #3]
 8005bfe:	75fb      	strb	r3, [r7, #23]
            break;
 8005c00:	e041      	b.n	8005c86 <ism330dhcx_gy_data_rate_set+0x292>

          case ISM330DHCX_ODR_PRGS_26Hz:
            if (val == ISM330DHCX_GY_ODR_OFF)
 8005c02:	78fb      	ldrb	r3, [r7, #3]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d102      	bne.n	8005c0e <ism330dhcx_gy_data_rate_set+0x21a>
            {
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 8005c08:	2302      	movs	r3, #2
 8005c0a:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8005c0c:	e03b      	b.n	8005c86 <ism330dhcx_gy_data_rate_set+0x292>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 8005c0e:	78fb      	ldrb	r3, [r7, #3]
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d102      	bne.n	8005c1a <ism330dhcx_gy_data_rate_set+0x226>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 8005c14:	2302      	movs	r3, #2
 8005c16:	75fb      	strb	r3, [r7, #23]
            break;
 8005c18:	e035      	b.n	8005c86 <ism330dhcx_gy_data_rate_set+0x292>
              odr_gy = val;
 8005c1a:	78fb      	ldrb	r3, [r7, #3]
 8005c1c:	75fb      	strb	r3, [r7, #23]
            break;
 8005c1e:	e032      	b.n	8005c86 <ism330dhcx_gy_data_rate_set+0x292>

          case ISM330DHCX_ODR_PRGS_52Hz:
            if (val == ISM330DHCX_GY_ODR_OFF)
 8005c20:	78fb      	ldrb	r3, [r7, #3]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d102      	bne.n	8005c2c <ism330dhcx_gy_data_rate_set+0x238>
            {
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8005c26:	2303      	movs	r3, #3
 8005c28:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8005c2a:	e02c      	b.n	8005c86 <ism330dhcx_gy_data_rate_set+0x292>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 8005c2c:	78fb      	ldrb	r3, [r7, #3]
 8005c2e:	2b01      	cmp	r3, #1
 8005c30:	d102      	bne.n	8005c38 <ism330dhcx_gy_data_rate_set+0x244>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8005c32:	2303      	movs	r3, #3
 8005c34:	75fb      	strb	r3, [r7, #23]
            break;
 8005c36:	e026      	b.n	8005c86 <ism330dhcx_gy_data_rate_set+0x292>
            else if (val == ISM330DHCX_GY_ODR_26Hz)
 8005c38:	78fb      	ldrb	r3, [r7, #3]
 8005c3a:	2b02      	cmp	r3, #2
 8005c3c:	d102      	bne.n	8005c44 <ism330dhcx_gy_data_rate_set+0x250>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8005c3e:	2303      	movs	r3, #3
 8005c40:	75fb      	strb	r3, [r7, #23]
            break;
 8005c42:	e020      	b.n	8005c86 <ism330dhcx_gy_data_rate_set+0x292>
              odr_gy = val;
 8005c44:	78fb      	ldrb	r3, [r7, #3]
 8005c46:	75fb      	strb	r3, [r7, #23]
            break;
 8005c48:	e01d      	b.n	8005c86 <ism330dhcx_gy_data_rate_set+0x292>

          case ISM330DHCX_ODR_PRGS_104Hz:
            if (val == ISM330DHCX_GY_ODR_OFF)
 8005c4a:	78fb      	ldrb	r3, [r7, #3]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d102      	bne.n	8005c56 <ism330dhcx_gy_data_rate_set+0x262>
            {
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8005c50:	2304      	movs	r3, #4
 8005c52:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8005c54:	e017      	b.n	8005c86 <ism330dhcx_gy_data_rate_set+0x292>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 8005c56:	78fb      	ldrb	r3, [r7, #3]
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d102      	bne.n	8005c62 <ism330dhcx_gy_data_rate_set+0x26e>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8005c5c:	2304      	movs	r3, #4
 8005c5e:	75fb      	strb	r3, [r7, #23]
            break;
 8005c60:	e011      	b.n	8005c86 <ism330dhcx_gy_data_rate_set+0x292>
            else if (val == ISM330DHCX_GY_ODR_26Hz)
 8005c62:	78fb      	ldrb	r3, [r7, #3]
 8005c64:	2b02      	cmp	r3, #2
 8005c66:	d102      	bne.n	8005c6e <ism330dhcx_gy_data_rate_set+0x27a>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8005c68:	2304      	movs	r3, #4
 8005c6a:	75fb      	strb	r3, [r7, #23]
            break;
 8005c6c:	e00b      	b.n	8005c86 <ism330dhcx_gy_data_rate_set+0x292>
            else if (val == ISM330DHCX_GY_ODR_52Hz)
 8005c6e:	78fb      	ldrb	r3, [r7, #3]
 8005c70:	2b03      	cmp	r3, #3
 8005c72:	d102      	bne.n	8005c7a <ism330dhcx_gy_data_rate_set+0x286>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8005c74:	2304      	movs	r3, #4
 8005c76:	75fb      	strb	r3, [r7, #23]
            break;
 8005c78:	e005      	b.n	8005c86 <ism330dhcx_gy_data_rate_set+0x292>
              odr_gy = val;
 8005c7a:	78fb      	ldrb	r3, [r7, #3]
 8005c7c:	75fb      	strb	r3, [r7, #23]
            break;
 8005c7e:	e002      	b.n	8005c86 <ism330dhcx_gy_data_rate_set+0x292>

          default:
            odr_gy = val;
 8005c80:	78fb      	ldrb	r3, [r7, #3]
 8005c82:	75fb      	strb	r3, [r7, #23]
            break;
 8005c84:	bf00      	nop
        }
      }
    }
  }

  if (ret == 0)
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d107      	bne.n	8005c9c <ism330dhcx_gy_data_rate_set+0x2a8>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 8005c8c:	f107 0208 	add.w	r2, r7, #8
 8005c90:	2301      	movs	r3, #1
 8005c92:	2111      	movs	r1, #17
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	f7ff fbd3 	bl	8005440 <ism330dhcx_read_reg>
 8005c9a:	6138      	str	r0, [r7, #16]
                              (uint8_t *)&ctrl2_g, 1);
  }

  if (ret == 0)
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d10f      	bne.n	8005cc2 <ism330dhcx_gy_data_rate_set+0x2ce>
  {
    ctrl2_g.odr_g = (uint8_t)odr_gy;
 8005ca2:	7dfb      	ldrb	r3, [r7, #23]
 8005ca4:	f003 030f 	and.w	r3, r3, #15
 8005ca8:	b2da      	uxtb	r2, r3
 8005caa:	7a3b      	ldrb	r3, [r7, #8]
 8005cac:	f362 1307 	bfi	r3, r2, #4, #4
 8005cb0:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL2_G,
 8005cb2:	f107 0208 	add.w	r2, r7, #8
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	2111      	movs	r1, #17
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f7ff fbd8 	bl	8005470 <ism330dhcx_write_reg>
 8005cc0:	6138      	str	r0, [r7, #16]
                               (uint8_t *)&ctrl2_g, 1);
  }

  return ret;
 8005cc2:	693b      	ldr	r3, [r7, #16]
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3718      	adds	r7, #24
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}

08005ccc <ism330dhcx_gy_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_data_rate_get(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_g_t *val)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b084      	sub	sp, #16
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
 8005cd4:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 8005cd6:	f107 0208 	add.w	r2, r7, #8
 8005cda:	2301      	movs	r3, #1
 8005cdc:	2111      	movs	r1, #17
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f7ff fbae 	bl	8005440 <ism330dhcx_read_reg>
 8005ce4:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl2_g, 1);

  switch (ctrl2_g.odr_g)
 8005ce6:	7a3b      	ldrb	r3, [r7, #8]
 8005ce8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005cec:	b2db      	uxtb	r3, r3
 8005cee:	2b0a      	cmp	r3, #10
 8005cf0:	d844      	bhi.n	8005d7c <ism330dhcx_gy_data_rate_get+0xb0>
 8005cf2:	a201      	add	r2, pc, #4	; (adr r2, 8005cf8 <ism330dhcx_gy_data_rate_get+0x2c>)
 8005cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cf8:	08005d25 	.word	0x08005d25
 8005cfc:	08005d2d 	.word	0x08005d2d
 8005d00:	08005d35 	.word	0x08005d35
 8005d04:	08005d3d 	.word	0x08005d3d
 8005d08:	08005d45 	.word	0x08005d45
 8005d0c:	08005d4d 	.word	0x08005d4d
 8005d10:	08005d55 	.word	0x08005d55
 8005d14:	08005d5d 	.word	0x08005d5d
 8005d18:	08005d65 	.word	0x08005d65
 8005d1c:	08005d6d 	.word	0x08005d6d
 8005d20:	08005d75 	.word	0x08005d75
  {
    case ISM330DHCX_GY_ODR_OFF:
      *val = ISM330DHCX_GY_ODR_OFF;
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	2200      	movs	r2, #0
 8005d28:	701a      	strb	r2, [r3, #0]
      break;
 8005d2a:	e02b      	b.n	8005d84 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_12Hz5:
      *val = ISM330DHCX_GY_ODR_12Hz5;
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	701a      	strb	r2, [r3, #0]
      break;
 8005d32:	e027      	b.n	8005d84 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_26Hz:
      *val = ISM330DHCX_GY_ODR_26Hz;
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	2202      	movs	r2, #2
 8005d38:	701a      	strb	r2, [r3, #0]
      break;
 8005d3a:	e023      	b.n	8005d84 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_52Hz:
      *val = ISM330DHCX_GY_ODR_52Hz;
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	2203      	movs	r2, #3
 8005d40:	701a      	strb	r2, [r3, #0]
      break;
 8005d42:	e01f      	b.n	8005d84 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_104Hz:
      *val = ISM330DHCX_GY_ODR_104Hz;
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	2204      	movs	r2, #4
 8005d48:	701a      	strb	r2, [r3, #0]
      break;
 8005d4a:	e01b      	b.n	8005d84 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_208Hz:
      *val = ISM330DHCX_GY_ODR_208Hz;
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	2205      	movs	r2, #5
 8005d50:	701a      	strb	r2, [r3, #0]
      break;
 8005d52:	e017      	b.n	8005d84 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_416Hz:
      *val = ISM330DHCX_GY_ODR_416Hz;
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	2206      	movs	r2, #6
 8005d58:	701a      	strb	r2, [r3, #0]
      break;
 8005d5a:	e013      	b.n	8005d84 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_833Hz:
      *val = ISM330DHCX_GY_ODR_833Hz;
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	2207      	movs	r2, #7
 8005d60:	701a      	strb	r2, [r3, #0]
      break;
 8005d62:	e00f      	b.n	8005d84 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_1666Hz:
      *val = ISM330DHCX_GY_ODR_1666Hz;
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	2208      	movs	r2, #8
 8005d68:	701a      	strb	r2, [r3, #0]
      break;
 8005d6a:	e00b      	b.n	8005d84 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_3332Hz:
      *val = ISM330DHCX_GY_ODR_3332Hz;
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	2209      	movs	r2, #9
 8005d70:	701a      	strb	r2, [r3, #0]
      break;
 8005d72:	e007      	b.n	8005d84 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_6667Hz:
      *val = ISM330DHCX_GY_ODR_6667Hz;
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	220a      	movs	r2, #10
 8005d78:	701a      	strb	r2, [r3, #0]
      break;
 8005d7a:	e003      	b.n	8005d84 <ism330dhcx_gy_data_rate_get+0xb8>

    default:
      *val = ISM330DHCX_GY_ODR_OFF;
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	701a      	strb	r2, [r3, #0]
      break;
 8005d82:	bf00      	nop
  }

  return ret;
 8005d84:	68fb      	ldr	r3, [r7, #12]
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3710      	adds	r7, #16
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}
 8005d8e:	bf00      	nop

08005d90 <ism330dhcx_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_block_data_update_set(stmdev_ctx_t *ctx,
                                         uint8_t val)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b084      	sub	sp, #16
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
 8005d98:	460b      	mov	r3, r1
 8005d9a:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
 8005d9c:	f107 0208 	add.w	r2, r7, #8
 8005da0:	2301      	movs	r3, #1
 8005da2:	2112      	movs	r1, #18
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f7ff fb4b 	bl	8005440 <ism330dhcx_read_reg>
 8005daa:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl3_c, 1);

  if (ret == 0)
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d10f      	bne.n	8005dd2 <ism330dhcx_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = (uint8_t)val;
 8005db2:	78fb      	ldrb	r3, [r7, #3]
 8005db4:	f003 0301 	and.w	r3, r3, #1
 8005db8:	b2da      	uxtb	r2, r3
 8005dba:	7a3b      	ldrb	r3, [r7, #8]
 8005dbc:	f362 1386 	bfi	r3, r2, #6, #1
 8005dc0:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
 8005dc2:	f107 0208 	add.w	r2, r7, #8
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	2112      	movs	r1, #18
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f7ff fb50 	bl	8005470 <ism330dhcx_write_reg>
 8005dd0:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	3710      	adds	r7, #16
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}

08005ddc <ism330dhcx_angular_rate_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_angular_rate_raw_get(stmdev_ctx_t *ctx,
                                        int16_t *val)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b086      	sub	sp, #24
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
 8005de4:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_OUTX_L_G, buff, 6);
 8005de6:	f107 020c 	add.w	r2, r7, #12
 8005dea:	2306      	movs	r3, #6
 8005dec:	2122      	movs	r1, #34	; 0x22
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f7ff fb26 	bl	8005440 <ism330dhcx_read_reg>
 8005df4:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8005df6:	7b7b      	ldrb	r3, [r7, #13]
 8005df8:	b21a      	sxth	r2, r3
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	021b      	lsls	r3, r3, #8
 8005e08:	b29a      	uxth	r2, r3
 8005e0a:	7b3b      	ldrb	r3, [r7, #12]
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	4413      	add	r3, r2
 8005e10:	b29b      	uxth	r3, r3
 8005e12:	b21a      	sxth	r2, r3
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8005e18:	7bfa      	ldrb	r2, [r7, #15]
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	3302      	adds	r3, #2
 8005e1e:	b212      	sxth	r2, r2
 8005e20:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	3302      	adds	r3, #2
 8005e26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005e2a:	b29b      	uxth	r3, r3
 8005e2c:	021b      	lsls	r3, r3, #8
 8005e2e:	b29a      	uxth	r2, r3
 8005e30:	7bbb      	ldrb	r3, [r7, #14]
 8005e32:	b29b      	uxth	r3, r3
 8005e34:	4413      	add	r3, r2
 8005e36:	b29a      	uxth	r2, r3
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	3302      	adds	r3, #2
 8005e3c:	b212      	sxth	r2, r2
 8005e3e:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8005e40:	7c7a      	ldrb	r2, [r7, #17]
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	3304      	adds	r3, #4
 8005e46:	b212      	sxth	r2, r2
 8005e48:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	3304      	adds	r3, #4
 8005e4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005e52:	b29b      	uxth	r3, r3
 8005e54:	021b      	lsls	r3, r3, #8
 8005e56:	b29a      	uxth	r2, r3
 8005e58:	7c3b      	ldrb	r3, [r7, #16]
 8005e5a:	b29b      	uxth	r3, r3
 8005e5c:	4413      	add	r3, r2
 8005e5e:	b29a      	uxth	r2, r3
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	3304      	adds	r3, #4
 8005e64:	b212      	sxth	r2, r2
 8005e66:	801a      	strh	r2, [r3, #0]

  return ret;
 8005e68:	697b      	ldr	r3, [r7, #20]
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3718      	adds	r7, #24
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}

08005e72 <ism330dhcx_acceleration_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_acceleration_raw_get(stmdev_ctx_t *ctx,
                                        int16_t *val)
{
 8005e72:	b580      	push	{r7, lr}
 8005e74:	b086      	sub	sp, #24
 8005e76:	af00      	add	r7, sp, #0
 8005e78:	6078      	str	r0, [r7, #4]
 8005e7a:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_OUTX_L_A, buff, 6);
 8005e7c:	f107 020c 	add.w	r2, r7, #12
 8005e80:	2306      	movs	r3, #6
 8005e82:	2128      	movs	r1, #40	; 0x28
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f7ff fadb 	bl	8005440 <ism330dhcx_read_reg>
 8005e8a:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8005e8c:	7b7b      	ldrb	r3, [r7, #13]
 8005e8e:	b21a      	sxth	r2, r3
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	021b      	lsls	r3, r3, #8
 8005e9e:	b29a      	uxth	r2, r3
 8005ea0:	7b3b      	ldrb	r3, [r7, #12]
 8005ea2:	b29b      	uxth	r3, r3
 8005ea4:	4413      	add	r3, r2
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	b21a      	sxth	r2, r3
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8005eae:	7bfa      	ldrb	r2, [r7, #15]
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	3302      	adds	r3, #2
 8005eb4:	b212      	sxth	r2, r2
 8005eb6:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	3302      	adds	r3, #2
 8005ebc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005ec0:	b29b      	uxth	r3, r3
 8005ec2:	021b      	lsls	r3, r3, #8
 8005ec4:	b29a      	uxth	r2, r3
 8005ec6:	7bbb      	ldrb	r3, [r7, #14]
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	4413      	add	r3, r2
 8005ecc:	b29a      	uxth	r2, r3
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	3302      	adds	r3, #2
 8005ed2:	b212      	sxth	r2, r2
 8005ed4:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8005ed6:	7c7a      	ldrb	r2, [r7, #17]
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	3304      	adds	r3, #4
 8005edc:	b212      	sxth	r2, r2
 8005ede:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	3304      	adds	r3, #4
 8005ee4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005ee8:	b29b      	uxth	r3, r3
 8005eea:	021b      	lsls	r3, r3, #8
 8005eec:	b29a      	uxth	r2, r3
 8005eee:	7c3b      	ldrb	r3, [r7, #16]
 8005ef0:	b29b      	uxth	r3, r3
 8005ef2:	4413      	add	r3, r2
 8005ef4:	b29a      	uxth	r2, r3
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	3304      	adds	r3, #4
 8005efa:	b212      	sxth	r2, r2
 8005efc:	801a      	strh	r2, [r3, #0]

  return ret;
 8005efe:	697b      	ldr	r3, [r7, #20]
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	3718      	adds	r7, #24
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}

08005f08 <ism330dhcx_device_conf_set>:
  * @param  val    Change the values of device_conf in reg CTRL9_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_device_conf_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b084      	sub	sp, #16
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
 8005f10:	460b      	mov	r3, r1
 8005f12:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl9_xl_t ctrl9_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL9_XL,
 8005f14:	f107 0208 	add.w	r2, r7, #8
 8005f18:	2301      	movs	r3, #1
 8005f1a:	2118      	movs	r1, #24
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f7ff fa8f 	bl	8005440 <ism330dhcx_read_reg>
 8005f22:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl9_xl, 1);

  if (ret == 0)
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d10f      	bne.n	8005f4a <ism330dhcx_device_conf_set+0x42>
  {
    ctrl9_xl.device_conf = (uint8_t)val;
 8005f2a:	78fb      	ldrb	r3, [r7, #3]
 8005f2c:	f003 0301 	and.w	r3, r3, #1
 8005f30:	b2da      	uxtb	r2, r3
 8005f32:	7a3b      	ldrb	r3, [r7, #8]
 8005f34:	f362 0341 	bfi	r3, r2, #1, #1
 8005f38:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL9_XL,
 8005f3a:	f107 0208 	add.w	r2, r7, #8
 8005f3e:	2301      	movs	r3, #1
 8005f40:	2118      	movs	r1, #24
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f7ff fa94 	bl	8005470 <ism330dhcx_write_reg>
 8005f48:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl9_xl, 1);
  }

  return ret;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3710      	adds	r7, #16
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}

08005f54 <ism330dhcx_mem_bank_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_mem_bank_set(stmdev_ctx_t *ctx,
                                ism330dhcx_reg_access_t val)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b084      	sub	sp, #16
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	460b      	mov	r3, r1
 8005f5e:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_func_cfg_access_t func_cfg_access;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FUNC_CFG_ACCESS,
 8005f60:	f107 0208 	add.w	r2, r7, #8
 8005f64:	2301      	movs	r3, #1
 8005f66:	2101      	movs	r1, #1
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f7ff fa69 	bl	8005440 <ism330dhcx_read_reg>
 8005f6e:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&func_cfg_access, 1);

  if (ret == 0)
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d10f      	bne.n	8005f96 <ism330dhcx_mem_bank_set+0x42>
  {
    func_cfg_access.reg_access = (uint8_t)val;
 8005f76:	78fb      	ldrb	r3, [r7, #3]
 8005f78:	f003 0303 	and.w	r3, r3, #3
 8005f7c:	b2da      	uxtb	r2, r3
 8005f7e:	7a3b      	ldrb	r3, [r7, #8]
 8005f80:	f362 1387 	bfi	r3, r2, #6, #2
 8005f84:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FUNC_CFG_ACCESS,
 8005f86:	f107 0208 	add.w	r2, r7, #8
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	2101      	movs	r1, #1
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f7ff fa6e 	bl	8005470 <ism330dhcx_write_reg>
 8005f94:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&func_cfg_access, 1);
  }

  return ret;
 8005f96:	68fb      	ldr	r3, [r7, #12]
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	3710      	adds	r7, #16
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd80      	pop	{r7, pc}

08005fa0 <ism330dhcx_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b084      	sub	sp, #16
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_WHO_AM_I, buff, 1);
 8005faa:	2301      	movs	r3, #1
 8005fac:	683a      	ldr	r2, [r7, #0]
 8005fae:	210f      	movs	r1, #15
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f7ff fa45 	bl	8005440 <ism330dhcx_read_reg>
 8005fb6:	60f8      	str	r0, [r7, #12]

  return ret;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3710      	adds	r7, #16
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}

08005fc2 <ism330dhcx_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005fc2:	b580      	push	{r7, lr}
 8005fc4:	b084      	sub	sp, #16
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	6078      	str	r0, [r7, #4]
 8005fca:	460b      	mov	r3, r1
 8005fcc:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
 8005fce:	f107 0208 	add.w	r2, r7, #8
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	2112      	movs	r1, #18
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f7ff fa32 	bl	8005440 <ism330dhcx_read_reg>
 8005fdc:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl3_c, 1);

  if (ret == 0)
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d10f      	bne.n	8006004 <ism330dhcx_reset_set+0x42>
  {
    ctrl3_c.sw_reset = (uint8_t)val;
 8005fe4:	78fb      	ldrb	r3, [r7, #3]
 8005fe6:	f003 0301 	and.w	r3, r3, #1
 8005fea:	b2da      	uxtb	r2, r3
 8005fec:	7a3b      	ldrb	r3, [r7, #8]
 8005fee:	f362 0300 	bfi	r3, r2, #0, #1
 8005ff2:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
 8005ff4:	f107 0208 	add.w	r2, r7, #8
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	2112      	movs	r1, #18
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f7ff fa37 	bl	8005470 <ism330dhcx_write_reg>
 8006002:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
 8006004:	68fb      	ldr	r3, [r7, #12]
}
 8006006:	4618      	mov	r0, r3
 8006008:	3710      	adds	r7, #16
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}

0800600e <ism330dhcx_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800600e:	b580      	push	{r7, lr}
 8006010:	b084      	sub	sp, #16
 8006012:	af00      	add	r7, sp, #0
 8006014:	6078      	str	r0, [r7, #4]
 8006016:	460b      	mov	r3, r1
 8006018:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
 800601a:	f107 0208 	add.w	r2, r7, #8
 800601e:	2301      	movs	r3, #1
 8006020:	2112      	movs	r1, #18
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f7ff fa0c 	bl	8005440 <ism330dhcx_read_reg>
 8006028:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl3_c, 1);

  if (ret == 0)
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d10f      	bne.n	8006050 <ism330dhcx_auto_increment_set+0x42>
  {
    ctrl3_c.if_inc = (uint8_t)val;
 8006030:	78fb      	ldrb	r3, [r7, #3]
 8006032:	f003 0301 	and.w	r3, r3, #1
 8006036:	b2da      	uxtb	r2, r3
 8006038:	7a3b      	ldrb	r3, [r7, #8]
 800603a:	f362 0382 	bfi	r3, r2, #2, #1
 800603e:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
 8006040:	f107 0208 	add.w	r2, r7, #8
 8006044:	2301      	movs	r3, #1
 8006046:	2112      	movs	r1, #18
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f7ff fa11 	bl	8005470 <ism330dhcx_write_reg>
 800604e:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
 8006050:	68fb      	ldr	r3, [r7, #12]
}
 8006052:	4618      	mov	r0, r3
 8006054:	3710      	adds	r7, #16
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}

0800605a <ism330dhcx_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fifo_mode_set(stmdev_ctx_t *ctx,
                                 ism330dhcx_fifo_mode_t val)
{
 800605a:	b580      	push	{r7, lr}
 800605c:	b084      	sub	sp, #16
 800605e:	af00      	add	r7, sp, #0
 8006060:	6078      	str	r0, [r7, #4]
 8006062:	460b      	mov	r3, r1
 8006064:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_fifo_ctrl4_t fifo_ctrl4;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_CTRL4,
 8006066:	f107 0208 	add.w	r2, r7, #8
 800606a:	2301      	movs	r3, #1
 800606c:	210a      	movs	r1, #10
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f7ff f9e6 	bl	8005440 <ism330dhcx_read_reg>
 8006074:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl4, 1);

  if (ret == 0)
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d10f      	bne.n	800609c <ism330dhcx_fifo_mode_set+0x42>
  {
    fifo_ctrl4.fifo_mode = (uint8_t)val;
 800607c:	78fb      	ldrb	r3, [r7, #3]
 800607e:	f003 0307 	and.w	r3, r3, #7
 8006082:	b2da      	uxtb	r2, r3
 8006084:	7a3b      	ldrb	r3, [r7, #8]
 8006086:	f362 0302 	bfi	r3, r2, #0, #3
 800608a:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FIFO_CTRL4,
 800608c:	f107 0208 	add.w	r2, r7, #8
 8006090:	2301      	movs	r3, #1
 8006092:	210a      	movs	r1, #10
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f7ff f9eb 	bl	8005470 <ism330dhcx_write_reg>
 800609a:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&fifo_ctrl4, 1);
  }

  return ret;
 800609c:	68fb      	ldr	r3, [r7, #12]
}
 800609e:	4618      	mov	r0, r3
 80060a0:	3710      	adds	r7, #16
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}

080060a6 <ism330dhcx_fsm_enable_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fsm_enable_get(stmdev_ctx_t *ctx,
                                  ism330dhcx_emb_fsm_enable_t *val)
{
 80060a6:	b580      	push	{r7, lr}
 80060a8:	b084      	sub	sp, #16
 80060aa:	af00      	add	r7, sp, #0
 80060ac:	6078      	str	r0, [r7, #4]
 80060ae:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 80060b0:	2102      	movs	r1, #2
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f7ff ff4e 	bl	8005f54 <ism330dhcx_mem_bank_set>
 80060b8:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d106      	bne.n	80060ce <ism330dhcx_fsm_enable_get+0x28>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_A,
                              (uint8_t *)&val->fsm_enable_a, 1);
 80060c0:	683a      	ldr	r2, [r7, #0]
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_A,
 80060c2:	2301      	movs	r3, #1
 80060c4:	2146      	movs	r1, #70	; 0x46
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f7ff f9ba 	bl	8005440 <ism330dhcx_read_reg>
 80060cc:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d107      	bne.n	80060e4 <ism330dhcx_fsm_enable_get+0x3e>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_B,
                              (uint8_t *)&val->fsm_enable_b, 1);
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	1c5a      	adds	r2, r3, #1
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_B,
 80060d8:	2301      	movs	r3, #1
 80060da:	2147      	movs	r1, #71	; 0x47
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f7ff f9af 	bl	8005440 <ism330dhcx_read_reg>
 80060e2:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d104      	bne.n	80060f4 <ism330dhcx_fsm_enable_get+0x4e>
  {
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 80060ea:	2100      	movs	r1, #0
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f7ff ff31 	bl	8005f54 <ism330dhcx_mem_bank_set>
 80060f2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80060f4:	68fb      	ldr	r3, [r7, #12]
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3710      	adds	r7, #16
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}
	...

08006100 <ism330dhcx_fsm_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_fsm_odr_t *val)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b084      	sub	sp, #16
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
 8006108:	6039      	str	r1, [r7, #0]
  ism330dhcx_emb_func_odr_cfg_b_t emb_func_odr_cfg_b;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 800610a:	2102      	movs	r1, #2
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f7ff ff21 	bl	8005f54 <ism330dhcx_mem_bank_set>
 8006112:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d107      	bne.n	800612a <ism330dhcx_fsm_data_rate_get+0x2a>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_ODR_CFG_B,
 800611a:	f107 0208 	add.w	r2, r7, #8
 800611e:	2301      	movs	r3, #1
 8006120:	215f      	movs	r1, #95	; 0x5f
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f7ff f98c 	bl	8005440 <ism330dhcx_read_reg>
 8006128:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&emb_func_odr_cfg_b, 1);
  }

  if (ret == 0)
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d104      	bne.n	800613a <ism330dhcx_fsm_data_rate_get+0x3a>
  {
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 8006130:	2100      	movs	r1, #0
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f7ff ff0e 	bl	8005f54 <ism330dhcx_mem_bank_set>
 8006138:	60f8      	str	r0, [r7, #12]
  }

  switch (emb_func_odr_cfg_b.fsm_odr)
 800613a:	7a3b      	ldrb	r3, [r7, #8]
 800613c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8006140:	b2db      	uxtb	r3, r3
 8006142:	2b03      	cmp	r3, #3
 8006144:	d81a      	bhi.n	800617c <ism330dhcx_fsm_data_rate_get+0x7c>
 8006146:	a201      	add	r2, pc, #4	; (adr r2, 800614c <ism330dhcx_fsm_data_rate_get+0x4c>)
 8006148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800614c:	0800615d 	.word	0x0800615d
 8006150:	08006165 	.word	0x08006165
 8006154:	0800616d 	.word	0x0800616d
 8006158:	08006175 	.word	0x08006175
  {
    case ISM330DHCX_ODR_FSM_12Hz5:
      *val = ISM330DHCX_ODR_FSM_12Hz5;
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	2200      	movs	r2, #0
 8006160:	701a      	strb	r2, [r3, #0]
      break;
 8006162:	e00f      	b.n	8006184 <ism330dhcx_fsm_data_rate_get+0x84>

    case ISM330DHCX_ODR_FSM_26Hz:
      *val = ISM330DHCX_ODR_FSM_26Hz;
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	2201      	movs	r2, #1
 8006168:	701a      	strb	r2, [r3, #0]
      break;
 800616a:	e00b      	b.n	8006184 <ism330dhcx_fsm_data_rate_get+0x84>

    case ISM330DHCX_ODR_FSM_52Hz:
      *val = ISM330DHCX_ODR_FSM_52Hz;
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	2202      	movs	r2, #2
 8006170:	701a      	strb	r2, [r3, #0]
      break;
 8006172:	e007      	b.n	8006184 <ism330dhcx_fsm_data_rate_get+0x84>

    case ISM330DHCX_ODR_FSM_104Hz:
      *val = ISM330DHCX_ODR_FSM_104Hz;
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	2203      	movs	r2, #3
 8006178:	701a      	strb	r2, [r3, #0]
      break;
 800617a:	e003      	b.n	8006184 <ism330dhcx_fsm_data_rate_get+0x84>

    default:
      *val = ISM330DHCX_ODR_FSM_12Hz5;
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	2200      	movs	r2, #0
 8006180:	701a      	strb	r2, [r3, #0]
      break;
 8006182:	bf00      	nop
  }

  return ret;
 8006184:	68fb      	ldr	r3, [r7, #12]
}
 8006186:	4618      	mov	r0, r3
 8006188:	3710      	adds	r7, #16
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}
 800618e:	bf00      	nop

08006190 <ism330dhcx_mlc_get>:
  * @param  val      Get the values of mlc_en in
  *                  reg EMB_FUNC_EN_B
  *
  */
int32_t ism330dhcx_mlc_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b084      	sub	sp, #16
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
 8006198:	6039      	str	r1, [r7, #0]
  ism330dhcx_emb_func_en_b_t reg;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 800619a:	2102      	movs	r1, #2
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f7ff fed9 	bl	8005f54 <ism330dhcx_mem_bank_set>
 80061a2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d107      	bne.n	80061ba <ism330dhcx_mlc_get+0x2a>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_EN_B,
 80061aa:	f107 0208 	add.w	r2, r7, #8
 80061ae:	2301      	movs	r3, #1
 80061b0:	2105      	movs	r1, #5
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f7ff f944 	bl	8005440 <ism330dhcx_read_reg>
 80061b8:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&reg, 1);
  }

  if (ret == 0)
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d10b      	bne.n	80061d8 <ism330dhcx_mlc_get+0x48>
  {
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 80061c0:	2100      	movs	r1, #0
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f7ff fec6 	bl	8005f54 <ism330dhcx_mem_bank_set>
 80061c8:	60f8      	str	r0, [r7, #12]
    *val  = reg.mlc_en;
 80061ca:	7a3b      	ldrb	r3, [r7, #8]
 80061cc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80061d0:	b2db      	uxtb	r3, r3
 80061d2:	461a      	mov	r2, r3
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 80061d8:	68fb      	ldr	r3, [r7, #12]
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3710      	adds	r7, #16
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}
	...

080061e4 <ism330dhcx_mlc_data_rate_get>:
  *                  reg EMB_FUNC_ODR_CFG_C
  *
  */
int32_t ism330dhcx_mlc_data_rate_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_mlc_odr_t *val)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b084      	sub	sp, #16
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
 80061ec:	6039      	str	r1, [r7, #0]
  ism330dhcx_emb_func_odr_cfg_c_t reg;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 80061ee:	2102      	movs	r1, #2
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f7ff feaf 	bl	8005f54 <ism330dhcx_mem_bank_set>
 80061f6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d107      	bne.n	800620e <ism330dhcx_mlc_data_rate_get+0x2a>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_ODR_CFG_C,
 80061fe:	f107 0208 	add.w	r2, r7, #8
 8006202:	2301      	movs	r3, #1
 8006204:	2160      	movs	r1, #96	; 0x60
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f7ff f91a 	bl	8005440 <ism330dhcx_read_reg>
 800620c:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&reg, 1);
  }

  if (ret == 0)
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d12a      	bne.n	800626a <ism330dhcx_mlc_data_rate_get+0x86>
  {
    switch (reg.mlc_odr)
 8006214:	7a3b      	ldrb	r3, [r7, #8]
 8006216:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800621a:	b2db      	uxtb	r3, r3
 800621c:	2b03      	cmp	r3, #3
 800621e:	d81b      	bhi.n	8006258 <ism330dhcx_mlc_data_rate_get+0x74>
 8006220:	a201      	add	r2, pc, #4	; (adr r2, 8006228 <ism330dhcx_mlc_data_rate_get+0x44>)
 8006222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006226:	bf00      	nop
 8006228:	08006239 	.word	0x08006239
 800622c:	08006241 	.word	0x08006241
 8006230:	08006249 	.word	0x08006249
 8006234:	08006251 	.word	0x08006251
    {
      case ISM330DHCX_ODR_PRGS_12Hz5:
        *val = ISM330DHCX_ODR_PRGS_12Hz5;
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	2200      	movs	r2, #0
 800623c:	701a      	strb	r2, [r3, #0]
        break;
 800623e:	e00f      	b.n	8006260 <ism330dhcx_mlc_data_rate_get+0x7c>

      case ISM330DHCX_ODR_PRGS_26Hz:
        *val = ISM330DHCX_ODR_PRGS_26Hz;
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	2201      	movs	r2, #1
 8006244:	701a      	strb	r2, [r3, #0]
        break;
 8006246:	e00b      	b.n	8006260 <ism330dhcx_mlc_data_rate_get+0x7c>

      case ISM330DHCX_ODR_PRGS_52Hz:
        *val = ISM330DHCX_ODR_PRGS_52Hz;
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	2202      	movs	r2, #2
 800624c:	701a      	strb	r2, [r3, #0]
        break;
 800624e:	e007      	b.n	8006260 <ism330dhcx_mlc_data_rate_get+0x7c>

      case ISM330DHCX_ODR_PRGS_104Hz:
        *val = ISM330DHCX_ODR_PRGS_104Hz;
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	2203      	movs	r2, #3
 8006254:	701a      	strb	r2, [r3, #0]
        break;
 8006256:	e003      	b.n	8006260 <ism330dhcx_mlc_data_rate_get+0x7c>

      default:
        *val = ISM330DHCX_ODR_PRGS_12Hz5;
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	2200      	movs	r2, #0
 800625c:	701a      	strb	r2, [r3, #0]
        break;
 800625e:	bf00      	nop
    }

    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 8006260:	2100      	movs	r1, #0
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f7ff fe76 	bl	8005f54 <ism330dhcx_mem_bank_set>
 8006268:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800626a:	68fb      	ldr	r3, [r7, #12]
}
 800626c:	4618      	mov	r0, r3
 800626e:	3710      	adds	r7, #16
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}

08006274 <IIS2MDC_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2MDC_RegisterBusIO(IIS2MDC_Object_t *pObj, IIS2MDC_IO_t *pIO)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b084      	sub	sp, #16
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
 800627c:	6039      	str	r1, [r7, #0]
  int32_t ret = IIS2MDC_OK;
 800627e:	2300      	movs	r3, #0
 8006280:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d103      	bne.n	8006290 <IIS2MDC_RegisterBusIO+0x1c>
  {
    ret = IIS2MDC_ERROR;
 8006288:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800628c:	60fb      	str	r3, [r7, #12]
 800628e:	e04f      	b.n	8006330 <IIS2MDC_RegisterBusIO+0xbc>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	681a      	ldr	r2, [r3, #0]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	685a      	ldr	r2, [r3, #4]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	689a      	ldr	r2, [r3, #8]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	7b1a      	ldrb	r2, [r3, #12]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	691a      	ldr	r2, [r3, #16]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	695a      	ldr	r2, [r3, #20]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	699a      	ldr	r2, [r3, #24]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	4a1c      	ldr	r2, [pc, #112]	; (800633c <IIS2MDC_RegisterBusIO+0xc8>)
 80062cc:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteMagRegWrap;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	4a1b      	ldr	r2, [pc, #108]	; (8006340 <IIS2MDC_RegisterBusIO+0xcc>)
 80062d2:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	69da      	ldr	r2, [r3, #28]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle    = pObj;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	687a      	ldr	r2, [r7, #4]
 80062e0:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d103      	bne.n	80062f2 <IIS2MDC_RegisterBusIO+0x7e>
    {
      ret = IIS2MDC_ERROR;
 80062ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80062ee:	60fb      	str	r3, [r7, #12]
 80062f0:	e01e      	b.n	8006330 <IIS2MDC_RegisterBusIO+0xbc>
    }
    else if (pObj->IO.Init() != IIS2MDC_OK)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4798      	blx	r3
 80062f8:	4603      	mov	r3, r0
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d003      	beq.n	8006306 <IIS2MDC_RegisterBusIO+0x92>
    {
      ret = IIS2MDC_ERROR;
 80062fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006302:	60fb      	str	r3, [r7, #12]
 8006304:	e014      	b.n	8006330 <IIS2MDC_RegisterBusIO+0xbc>
    }
    else
    {
      if (pObj->IO.BusType != IIS2MDC_I2C_BUS) /* If the bus type is not I2C */
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	689b      	ldr	r3, [r3, #8]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d010      	beq.n	8006330 <IIS2MDC_RegisterBusIO+0xbc>
      {
        /* Disable I2C interface support only the first time */
        if (pObj->is_initialized == 0U)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006314:	2b00      	cmp	r3, #0
 8006316:	d10b      	bne.n	8006330 <IIS2MDC_RegisterBusIO+0xbc>
        {
          /* Disable I2C interface on the component */
          if (iis2mdc_i2c_interface_set(&(pObj->Ctx), IIS2MDC_I2C_DISABLE) != IIS2MDC_OK)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	3320      	adds	r3, #32
 800631c:	2101      	movs	r1, #1
 800631e:	4618      	mov	r0, r3
 8006320:	f000 fbc8 	bl	8006ab4 <iis2mdc_i2c_interface_set>
 8006324:	4603      	mov	r3, r0
 8006326:	2b00      	cmp	r3, #0
 8006328:	d002      	beq.n	8006330 <IIS2MDC_RegisterBusIO+0xbc>
          {
            ret = IIS2MDC_ERROR;
 800632a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800632e:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8006330:	68fb      	ldr	r3, [r7, #12]
}
 8006332:	4618      	mov	r0, r3
 8006334:	3710      	adds	r7, #16
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}
 800633a:	bf00      	nop
 800633c:	08006737 	.word	0x08006737
 8006340:	08006799 	.word	0x08006799

08006344 <IIS2MDC_Init>:
  * @brief  Initialize the IIS2MDC sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2MDC_Init(IIS2MDC_Object_t *pObj)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b082      	sub	sp, #8
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (iis2mdc_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != IIS2MDC_OK)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	3320      	adds	r3, #32
 8006350:	2101      	movs	r1, #1
 8006352:	4618      	mov	r0, r3
 8006354:	f000 fb06 	bl	8006964 <iis2mdc_block_data_update_set>
 8006358:	4603      	mov	r3, r0
 800635a:	2b00      	cmp	r3, #0
 800635c:	d002      	beq.n	8006364 <IIS2MDC_Init+0x20>
  {
    return IIS2MDC_ERROR;
 800635e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006362:	e028      	b.n	80063b6 <IIS2MDC_Init+0x72>
  }

  /* Operating mode selection - power down */
  if (iis2mdc_operating_mode_set(&(pObj->Ctx), IIS2MDC_POWER_DOWN) != IIS2MDC_OK)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	3320      	adds	r3, #32
 8006368:	2102      	movs	r1, #2
 800636a:	4618      	mov	r0, r3
 800636c:	f000 fa75 	bl	800685a <iis2mdc_operating_mode_set>
 8006370:	4603      	mov	r3, r0
 8006372:	2b00      	cmp	r3, #0
 8006374:	d002      	beq.n	800637c <IIS2MDC_Init+0x38>
  {
    return IIS2MDC_ERROR;
 8006376:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800637a:	e01c      	b.n	80063b6 <IIS2MDC_Init+0x72>
  }

  /* Output data rate selection */
  if (iis2mdc_data_rate_set(&(pObj->Ctx), IIS2MDC_ODR_100Hz) != IIS2MDC_OK)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	3320      	adds	r3, #32
 8006380:	2103      	movs	r1, #3
 8006382:	4618      	mov	r0, r3
 8006384:	f000 fa8f 	bl	80068a6 <iis2mdc_data_rate_set>
 8006388:	4603      	mov	r3, r0
 800638a:	2b00      	cmp	r3, #0
 800638c:	d002      	beq.n	8006394 <IIS2MDC_Init+0x50>
  {
    return IIS2MDC_ERROR;
 800638e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006392:	e010      	b.n	80063b6 <IIS2MDC_Init+0x72>
  }

  /* Self Test disabled. */
  if (iis2mdc_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != IIS2MDC_OK)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	3320      	adds	r3, #32
 8006398:	2100      	movs	r1, #0
 800639a:	4618      	mov	r0, r3
 800639c:	f000 fb64 	bl	8006a68 <iis2mdc_self_test_set>
 80063a0:	4603      	mov	r3, r0
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d002      	beq.n	80063ac <IIS2MDC_Init+0x68>
  {
    return IIS2MDC_ERROR;
 80063a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80063aa:	e004      	b.n	80063b6 <IIS2MDC_Init+0x72>
  }

  pObj->is_initialized = 1;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2201      	movs	r2, #1
 80063b0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return IIS2MDC_OK;
 80063b4:	2300      	movs	r3, #0
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3708      	adds	r7, #8
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}

080063be <IIS2MDC_DeInit>:
  * @brief  Deinitialize the IIS2MDC magnetometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2MDC_DeInit(IIS2MDC_Object_t *pObj)
{
 80063be:	b580      	push	{r7, lr}
 80063c0:	b082      	sub	sp, #8
 80063c2:	af00      	add	r7, sp, #0
 80063c4:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (IIS2MDC_MAG_Disable(pObj) != IIS2MDC_OK)
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f000 f874 	bl	80064b4 <IIS2MDC_MAG_Disable>
 80063cc:	4603      	mov	r3, r0
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d002      	beq.n	80063d8 <IIS2MDC_DeInit+0x1a>
  {
    return IIS2MDC_ERROR;
 80063d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80063d6:	e004      	b.n	80063e2 <IIS2MDC_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2200      	movs	r2, #0
 80063dc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return IIS2MDC_OK;
 80063e0:	2300      	movs	r3, #0
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	3708      	adds	r7, #8
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}

080063ea <IIS2MDC_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2MDC_ReadID(IIS2MDC_Object_t *pObj, uint8_t *Id)
{
 80063ea:	b580      	push	{r7, lr}
 80063ec:	b082      	sub	sp, #8
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	6078      	str	r0, [r7, #4]
 80063f2:	6039      	str	r1, [r7, #0]
  if (iis2mdc_device_id_get(&(pObj->Ctx), Id) != IIS2MDC_OK)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	3320      	adds	r3, #32
 80063f8:	6839      	ldr	r1, [r7, #0]
 80063fa:	4618      	mov	r0, r3
 80063fc:	f000 fb23 	bl	8006a46 <iis2mdc_device_id_get>
 8006400:	4603      	mov	r3, r0
 8006402:	2b00      	cmp	r3, #0
 8006404:	d002      	beq.n	800640c <IIS2MDC_ReadID+0x22>
  {
    return IIS2MDC_ERROR;
 8006406:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800640a:	e000      	b.n	800640e <IIS2MDC_ReadID+0x24>
  }

  return IIS2MDC_OK;
 800640c:	2300      	movs	r3, #0
}
 800640e:	4618      	mov	r0, r3
 8006410:	3708      	adds	r7, #8
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}
	...

08006418 <IIS2MDC_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to IIS2MDC magnetometer sensor capabilities
  * @retval Component status
  */
int32_t IIS2MDC_GetCapabilities(IIS2MDC_Object_t *pObj, IIS2MDC_Capabilities_t *Capabilities)
{
 8006418:	b480      	push	{r7}
 800641a:	b083      	sub	sp, #12
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
 8006420:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	2200      	movs	r2, #0
 8006426:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	2200      	movs	r2, #0
 800642c:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	2201      	movs	r2, #1
 8006432:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	2200      	movs	r2, #0
 8006438:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	2200      	movs	r2, #0
 800643e:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	2200      	movs	r2, #0
 8006444:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	2232      	movs	r2, #50	; 0x32
 800644a:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	f04f 0200 	mov.w	r2, #0
 8006452:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	f04f 0200 	mov.w	r2, #0
 800645a:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	4a04      	ldr	r2, [pc, #16]	; (8006470 <IIS2MDC_GetCapabilities+0x58>)
 8006460:	619a      	str	r2, [r3, #24]
  return IIS2MDC_OK;
 8006462:	2300      	movs	r3, #0
}
 8006464:	4618      	mov	r0, r3
 8006466:	370c      	adds	r7, #12
 8006468:	46bd      	mov	sp, r7
 800646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646e:	4770      	bx	lr
 8006470:	42c80000 	.word	0x42c80000

08006474 <IIS2MDC_MAG_Enable>:
  * @brief Enable the IIS2MDC magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2MDC_MAG_Enable(IIS2MDC_Object_t *pObj)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b082      	sub	sp, #8
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006482:	2b01      	cmp	r3, #1
 8006484:	d101      	bne.n	800648a <IIS2MDC_MAG_Enable+0x16>
  {
    return IIS2MDC_OK;
 8006486:	2300      	movs	r3, #0
 8006488:	e010      	b.n	80064ac <IIS2MDC_MAG_Enable+0x38>
  }

  /* Output data rate selection. */
  if (iis2mdc_operating_mode_set(&(pObj->Ctx), IIS2MDC_CONTINUOUS_MODE) != IIS2MDC_OK)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	3320      	adds	r3, #32
 800648e:	2100      	movs	r1, #0
 8006490:	4618      	mov	r0, r3
 8006492:	f000 f9e2 	bl	800685a <iis2mdc_operating_mode_set>
 8006496:	4603      	mov	r3, r0
 8006498:	2b00      	cmp	r3, #0
 800649a:	d002      	beq.n	80064a2 <IIS2MDC_MAG_Enable+0x2e>
  {
    return IIS2MDC_ERROR;
 800649c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80064a0:	e004      	b.n	80064ac <IIS2MDC_MAG_Enable+0x38>
  }

  pObj->mag_is_enabled = 1;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2201      	movs	r2, #1
 80064a6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return IIS2MDC_OK;
 80064aa:	2300      	movs	r3, #0
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	3708      	adds	r7, #8
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}

080064b4 <IIS2MDC_MAG_Disable>:
  * @brief Disable the IIS2MDC magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2MDC_MAG_Disable(IIS2MDC_Object_t *pObj)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b082      	sub	sp, #8
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d101      	bne.n	80064ca <IIS2MDC_MAG_Disable+0x16>
  {
    return IIS2MDC_OK;
 80064c6:	2300      	movs	r3, #0
 80064c8:	e010      	b.n	80064ec <IIS2MDC_MAG_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (iis2mdc_operating_mode_set(&(pObj->Ctx), IIS2MDC_POWER_DOWN) != IIS2MDC_OK)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	3320      	adds	r3, #32
 80064ce:	2102      	movs	r1, #2
 80064d0:	4618      	mov	r0, r3
 80064d2:	f000 f9c2 	bl	800685a <iis2mdc_operating_mode_set>
 80064d6:	4603      	mov	r3, r0
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d002      	beq.n	80064e2 <IIS2MDC_MAG_Disable+0x2e>
  {
    return IIS2MDC_ERROR;
 80064dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80064e0:	e004      	b.n	80064ec <IIS2MDC_MAG_Disable+0x38>
  }

  pObj->mag_is_enabled = 0;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2200      	movs	r2, #0
 80064e6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return IIS2MDC_OK;
 80064ea:	2300      	movs	r3, #0
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3708      	adds	r7, #8
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}

080064f4 <IIS2MDC_MAG_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2MDC_MAG_GetSensitivity(IIS2MDC_Object_t *pObj, float *Sensitivity)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b083      	sub	sp, #12
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
 80064fc:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  *Sensitivity = IIS2MDC_MAG_SENSITIVITY_FS_50GAUSS;
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8006504:	601a      	str	r2, [r3, #0]

  return IIS2MDC_OK;
 8006506:	2300      	movs	r3, #0
}
 8006508:	4618      	mov	r0, r3
 800650a:	370c      	adds	r7, #12
 800650c:	46bd      	mov	sp, r7
 800650e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006512:	4770      	bx	lr

08006514 <IIS2MDC_MAG_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2MDC_MAG_GetOutputDataRate(IIS2MDC_Object_t *pObj, float *Odr)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b084      	sub	sp, #16
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
 800651c:	6039      	str	r1, [r7, #0]
  int32_t ret = IIS2MDC_OK;
 800651e:	2300      	movs	r3, #0
 8006520:	60fb      	str	r3, [r7, #12]
  iis2mdc_odr_t odr_low_level;

  /* Get current output data rate. */
  if (iis2mdc_data_rate_get(&(pObj->Ctx), &odr_low_level) != IIS2MDC_OK)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	3320      	adds	r3, #32
 8006526:	f107 020b 	add.w	r2, r7, #11
 800652a:	4611      	mov	r1, r2
 800652c:	4618      	mov	r0, r3
 800652e:	f000 f9e1 	bl	80068f4 <iis2mdc_data_rate_get>
 8006532:	4603      	mov	r3, r0
 8006534:	2b00      	cmp	r3, #0
 8006536:	d002      	beq.n	800653e <IIS2MDC_MAG_GetOutputDataRate+0x2a>
  {
    return IIS2MDC_ERROR;
 8006538:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800653c:	e023      	b.n	8006586 <IIS2MDC_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 800653e:	7afb      	ldrb	r3, [r7, #11]
 8006540:	2b03      	cmp	r3, #3
 8006542:	d81b      	bhi.n	800657c <IIS2MDC_MAG_GetOutputDataRate+0x68>
 8006544:	a201      	add	r2, pc, #4	; (adr r2, 800654c <IIS2MDC_MAG_GetOutputDataRate+0x38>)
 8006546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800654a:	bf00      	nop
 800654c:	0800655d 	.word	0x0800655d
 8006550:	08006565 	.word	0x08006565
 8006554:	0800656d 	.word	0x0800656d
 8006558:	08006575 	.word	0x08006575
  {
    case IIS2MDC_ODR_10Hz:
      *Odr = 10.0f;
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	4a0c      	ldr	r2, [pc, #48]	; (8006590 <IIS2MDC_MAG_GetOutputDataRate+0x7c>)
 8006560:	601a      	str	r2, [r3, #0]
      break;
 8006562:	e00f      	b.n	8006584 <IIS2MDC_MAG_GetOutputDataRate+0x70>

    case IIS2MDC_ODR_20Hz:
      *Odr = 20.0f;
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	4a0b      	ldr	r2, [pc, #44]	; (8006594 <IIS2MDC_MAG_GetOutputDataRate+0x80>)
 8006568:	601a      	str	r2, [r3, #0]
      break;
 800656a:	e00b      	b.n	8006584 <IIS2MDC_MAG_GetOutputDataRate+0x70>

    case IIS2MDC_ODR_50Hz:
      *Odr = 50.0f;
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	4a0a      	ldr	r2, [pc, #40]	; (8006598 <IIS2MDC_MAG_GetOutputDataRate+0x84>)
 8006570:	601a      	str	r2, [r3, #0]
      break;
 8006572:	e007      	b.n	8006584 <IIS2MDC_MAG_GetOutputDataRate+0x70>

    case IIS2MDC_ODR_100Hz:
      *Odr = 100.0f;
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	4a09      	ldr	r2, [pc, #36]	; (800659c <IIS2MDC_MAG_GetOutputDataRate+0x88>)
 8006578:	601a      	str	r2, [r3, #0]
      break;
 800657a:	e003      	b.n	8006584 <IIS2MDC_MAG_GetOutputDataRate+0x70>

    default:
      ret = IIS2MDC_ERROR;
 800657c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006580:	60fb      	str	r3, [r7, #12]
      break;
 8006582:	bf00      	nop
  }

  return ret;
 8006584:	68fb      	ldr	r3, [r7, #12]
}
 8006586:	4618      	mov	r0, r3
 8006588:	3710      	adds	r7, #16
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}
 800658e:	bf00      	nop
 8006590:	41200000 	.word	0x41200000
 8006594:	41a00000 	.word	0x41a00000
 8006598:	42480000 	.word	0x42480000
 800659c:	42c80000 	.word	0x42c80000

080065a0 <IIS2MDC_MAG_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2MDC_MAG_SetOutputDataRate(IIS2MDC_Object_t *pObj, float Odr)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b084      	sub	sp, #16
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	ed87 0a00 	vstr	s0, [r7]
  iis2mdc_odr_t new_odr;

  new_odr = (Odr <= 10.000f) ? IIS2MDC_ODR_10Hz
            : (Odr <= 20.000f) ? IIS2MDC_ODR_20Hz
 80065ac:	edd7 7a00 	vldr	s15, [r7]
 80065b0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80065b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80065b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065bc:	d801      	bhi.n	80065c2 <IIS2MDC_MAG_SetOutputDataRate+0x22>
 80065be:	2300      	movs	r3, #0
 80065c0:	e016      	b.n	80065f0 <IIS2MDC_MAG_SetOutputDataRate+0x50>
 80065c2:	edd7 7a00 	vldr	s15, [r7]
 80065c6:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80065ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80065ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065d2:	d801      	bhi.n	80065d8 <IIS2MDC_MAG_SetOutputDataRate+0x38>
 80065d4:	2301      	movs	r3, #1
 80065d6:	e00b      	b.n	80065f0 <IIS2MDC_MAG_SetOutputDataRate+0x50>
 80065d8:	edd7 7a00 	vldr	s15, [r7]
 80065dc:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8006618 <IIS2MDC_MAG_SetOutputDataRate+0x78>
 80065e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80065e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065e8:	d801      	bhi.n	80065ee <IIS2MDC_MAG_SetOutputDataRate+0x4e>
 80065ea:	2302      	movs	r3, #2
 80065ec:	e000      	b.n	80065f0 <IIS2MDC_MAG_SetOutputDataRate+0x50>
 80065ee:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? IIS2MDC_ODR_10Hz
 80065f0:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? IIS2MDC_ODR_50Hz
            :                    IIS2MDC_ODR_100Hz;

  if (iis2mdc_data_rate_set(&(pObj->Ctx), new_odr) != IIS2MDC_OK)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	3320      	adds	r3, #32
 80065f6:	7bfa      	ldrb	r2, [r7, #15]
 80065f8:	4611      	mov	r1, r2
 80065fa:	4618      	mov	r0, r3
 80065fc:	f000 f953 	bl	80068a6 <iis2mdc_data_rate_set>
 8006600:	4603      	mov	r3, r0
 8006602:	2b00      	cmp	r3, #0
 8006604:	d002      	beq.n	800660c <IIS2MDC_MAG_SetOutputDataRate+0x6c>
  {
    return IIS2MDC_ERROR;
 8006606:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800660a:	e000      	b.n	800660e <IIS2MDC_MAG_SetOutputDataRate+0x6e>
  }

  return IIS2MDC_OK;
 800660c:	2300      	movs	r3, #0
}
 800660e:	4618      	mov	r0, r3
 8006610:	3710      	adds	r7, #16
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}
 8006616:	bf00      	nop
 8006618:	42480000 	.word	0x42480000

0800661c <IIS2MDC_MAG_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2MDC_MAG_GetFullScale(IIS2MDC_Object_t *pObj, int32_t *FullScale)
{
 800661c:	b480      	push	{r7}
 800661e:	b083      	sub	sp, #12
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
 8006624:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  *FullScale = 50;
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	2232      	movs	r2, #50	; 0x32
 800662a:	601a      	str	r2, [r3, #0]

  return IIS2MDC_OK;
 800662c:	2300      	movs	r3, #0
}
 800662e:	4618      	mov	r0, r3
 8006630:	370c      	adds	r7, #12
 8006632:	46bd      	mov	sp, r7
 8006634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006638:	4770      	bx	lr

0800663a <IIS2MDC_MAG_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2MDC_MAG_SetFullScale(IIS2MDC_Object_t *pObj, int32_t FullScale)
{
 800663a:	b480      	push	{r7}
 800663c:	b083      	sub	sp, #12
 800663e:	af00      	add	r7, sp, #0
 8006640:	6078      	str	r0, [r7, #4]
 8006642:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(FullScale);
  return IIS2MDC_OK;
 8006644:	2300      	movs	r3, #0
}
 8006646:	4618      	mov	r0, r3
 8006648:	370c      	adds	r7, #12
 800664a:	46bd      	mov	sp, r7
 800664c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006650:	4770      	bx	lr

08006652 <IIS2MDC_MAG_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2MDC_MAG_GetAxesRaw(IIS2MDC_Object_t *pObj, IIS2MDC_AxesRaw_t *Value)
{
 8006652:	b580      	push	{r7, lr}
 8006654:	b084      	sub	sp, #16
 8006656:	af00      	add	r7, sp, #0
 8006658:	6078      	str	r0, [r7, #4]
 800665a:	6039      	str	r1, [r7, #0]
  iis2mdc_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (iis2mdc_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != IIS2MDC_OK)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	3320      	adds	r3, #32
 8006660:	f107 0208 	add.w	r2, r7, #8
 8006664:	4611      	mov	r1, r2
 8006666:	4618      	mov	r0, r3
 8006668:	f000 f9a2 	bl	80069b0 <iis2mdc_magnetic_raw_get>
 800666c:	4603      	mov	r3, r0
 800666e:	2b00      	cmp	r3, #0
 8006670:	d002      	beq.n	8006678 <IIS2MDC_MAG_GetAxesRaw+0x26>
  {
    return IIS2MDC_ERROR;
 8006672:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006676:	e00c      	b.n	8006692 <IIS2MDC_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8006678:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8006680:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8006688:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	809a      	strh	r2, [r3, #4]

  return IIS2MDC_OK;
 8006690:	2300      	movs	r3, #0
}
 8006692:	4618      	mov	r0, r3
 8006694:	3710      	adds	r7, #16
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}

0800669a <IIS2MDC_MAG_GetAxes>:
  * @param  pObj the device pObj
  * @param  MagneticField pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2MDC_MAG_GetAxes(IIS2MDC_Object_t *pObj, IIS2MDC_Axes_t *MagneticField)
{
 800669a:	b580      	push	{r7, lr}
 800669c:	b086      	sub	sp, #24
 800669e:	af00      	add	r7, sp, #0
 80066a0:	6078      	str	r0, [r7, #4]
 80066a2:	6039      	str	r1, [r7, #0]
  iis2mdc_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (iis2mdc_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != IIS2MDC_OK)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	3320      	adds	r3, #32
 80066a8:	f107 0210 	add.w	r2, r7, #16
 80066ac:	4611      	mov	r1, r2
 80066ae:	4618      	mov	r0, r3
 80066b0:	f000 f97e 	bl	80069b0 <iis2mdc_magnetic_raw_get>
 80066b4:	4603      	mov	r3, r0
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d002      	beq.n	80066c0 <IIS2MDC_MAG_GetAxes+0x26>
  {
    return IIS2MDC_ERROR;
 80066ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80066be:	e036      	b.n	800672e <IIS2MDC_MAG_GetAxes+0x94>
  }

  /* Get IIS2MDC actual sensitivity. */
  (void)IIS2MDC_MAG_GetSensitivity(pObj, &sensitivity);
 80066c0:	f107 030c 	add.w	r3, r7, #12
 80066c4:	4619      	mov	r1, r3
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f7ff ff14 	bl	80064f4 <IIS2MDC_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80066cc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80066d0:	ee07 3a90 	vmov	s15, r3
 80066d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80066d8:	edd7 7a03 	vldr	s15, [r7, #12]
 80066dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80066e4:	ee17 2a90 	vmov	r2, s15
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80066ec:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80066f0:	ee07 3a90 	vmov	s15, r3
 80066f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80066f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80066fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006700:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006704:	ee17 2a90 	vmov	r2, s15
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 800670c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006710:	ee07 3a90 	vmov	s15, r3
 8006714:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006718:	edd7 7a03 	vldr	s15, [r7, #12]
 800671c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006720:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006724:	ee17 2a90 	vmov	r2, s15
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	609a      	str	r2, [r3, #8]

  return IIS2MDC_OK;
 800672c:	2300      	movs	r3, #0
}
 800672e:	4618      	mov	r0, r3
 8006730:	3718      	adds	r7, #24
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}

08006736 <ReadMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8006736:	b590      	push	{r4, r7, lr}
 8006738:	b087      	sub	sp, #28
 800673a:	af00      	add	r7, sp, #0
 800673c:	60f8      	str	r0, [r7, #12]
 800673e:	607a      	str	r2, [r7, #4]
 8006740:	461a      	mov	r2, r3
 8006742:	460b      	mov	r3, r1
 8006744:	72fb      	strb	r3, [r7, #11]
 8006746:	4613      	mov	r3, r2
 8006748:	813b      	strh	r3, [r7, #8]
  IIS2MDC_Object_t *pObj = (IIS2MDC_Object_t *)Handle;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == IIS2MDC_I2C_BUS) /* I2C */
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	689b      	ldr	r3, [r3, #8]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d10e      	bne.n	8006774 <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	695c      	ldr	r4, [r3, #20]
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	7b1b      	ldrb	r3, [r3, #12]
 800675e:	b298      	uxth	r0, r3
 8006760:	7afb      	ldrb	r3, [r7, #11]
 8006762:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006766:	b2db      	uxtb	r3, r3
 8006768:	b299      	uxth	r1, r3
 800676a:	893b      	ldrh	r3, [r7, #8]
 800676c:	687a      	ldr	r2, [r7, #4]
 800676e:	47a0      	blx	r4
 8006770:	4603      	mov	r3, r0
 8006772:	e00d      	b.n	8006790 <ReadMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	695c      	ldr	r4, [r3, #20]
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	7b1b      	ldrb	r3, [r3, #12]
 800677c:	b298      	uxth	r0, r3
 800677e:	7afb      	ldrb	r3, [r7, #11]
 8006780:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006784:	b2db      	uxtb	r3, r3
 8006786:	b299      	uxth	r1, r3
 8006788:	893b      	ldrh	r3, [r7, #8]
 800678a:	687a      	ldr	r2, [r7, #4]
 800678c:	47a0      	blx	r4
 800678e:	4603      	mov	r3, r0
  }
}
 8006790:	4618      	mov	r0, r3
 8006792:	371c      	adds	r7, #28
 8006794:	46bd      	mov	sp, r7
 8006796:	bd90      	pop	{r4, r7, pc}

08006798 <WriteMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8006798:	b590      	push	{r4, r7, lr}
 800679a:	b087      	sub	sp, #28
 800679c:	af00      	add	r7, sp, #0
 800679e:	60f8      	str	r0, [r7, #12]
 80067a0:	607a      	str	r2, [r7, #4]
 80067a2:	461a      	mov	r2, r3
 80067a4:	460b      	mov	r3, r1
 80067a6:	72fb      	strb	r3, [r7, #11]
 80067a8:	4613      	mov	r3, r2
 80067aa:	813b      	strh	r3, [r7, #8]
  IIS2MDC_Object_t *pObj = (IIS2MDC_Object_t *)Handle;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == IIS2MDC_I2C_BUS) /* I2C */
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	689b      	ldr	r3, [r3, #8]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d10e      	bne.n	80067d6 <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	691c      	ldr	r4, [r3, #16]
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	7b1b      	ldrb	r3, [r3, #12]
 80067c0:	b298      	uxth	r0, r3
 80067c2:	7afb      	ldrb	r3, [r7, #11]
 80067c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80067c8:	b2db      	uxtb	r3, r3
 80067ca:	b299      	uxth	r1, r3
 80067cc:	893b      	ldrh	r3, [r7, #8]
 80067ce:	687a      	ldr	r2, [r7, #4]
 80067d0:	47a0      	blx	r4
 80067d2:	4603      	mov	r3, r0
 80067d4:	e00d      	b.n	80067f2 <WriteMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	691c      	ldr	r4, [r3, #16]
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	7b1b      	ldrb	r3, [r3, #12]
 80067de:	b298      	uxth	r0, r3
 80067e0:	7afb      	ldrb	r3, [r7, #11]
 80067e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067e6:	b2db      	uxtb	r3, r3
 80067e8:	b299      	uxth	r1, r3
 80067ea:	893b      	ldrh	r3, [r7, #8]
 80067ec:	687a      	ldr	r2, [r7, #4]
 80067ee:	47a0      	blx	r4
 80067f0:	4603      	mov	r3, r0
  }
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	371c      	adds	r7, #28
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd90      	pop	{r4, r7, pc}

080067fa <iis2mdc_read_reg>:
  *
  */
int32_t __weak iis2mdc_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 80067fa:	b590      	push	{r4, r7, lr}
 80067fc:	b087      	sub	sp, #28
 80067fe:	af00      	add	r7, sp, #0
 8006800:	60f8      	str	r0, [r7, #12]
 8006802:	607a      	str	r2, [r7, #4]
 8006804:	461a      	mov	r2, r3
 8006806:	460b      	mov	r3, r1
 8006808:	72fb      	strb	r3, [r7, #11]
 800680a:	4613      	mov	r3, r2
 800680c:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	685c      	ldr	r4, [r3, #4]
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	68d8      	ldr	r0, [r3, #12]
 8006816:	893b      	ldrh	r3, [r7, #8]
 8006818:	7af9      	ldrb	r1, [r7, #11]
 800681a:	687a      	ldr	r2, [r7, #4]
 800681c:	47a0      	blx	r4
 800681e:	6178      	str	r0, [r7, #20]

  return ret;
 8006820:	697b      	ldr	r3, [r7, #20]
}
 8006822:	4618      	mov	r0, r3
 8006824:	371c      	adds	r7, #28
 8006826:	46bd      	mov	sp, r7
 8006828:	bd90      	pop	{r4, r7, pc}

0800682a <iis2mdc_write_reg>:
  *
  */
int32_t __weak iis2mdc_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 800682a:	b590      	push	{r4, r7, lr}
 800682c:	b087      	sub	sp, #28
 800682e:	af00      	add	r7, sp, #0
 8006830:	60f8      	str	r0, [r7, #12]
 8006832:	607a      	str	r2, [r7, #4]
 8006834:	461a      	mov	r2, r3
 8006836:	460b      	mov	r3, r1
 8006838:	72fb      	strb	r3, [r7, #11]
 800683a:	4613      	mov	r3, r2
 800683c:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681c      	ldr	r4, [r3, #0]
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	68d8      	ldr	r0, [r3, #12]
 8006846:	893b      	ldrh	r3, [r7, #8]
 8006848:	7af9      	ldrb	r1, [r7, #11]
 800684a:	687a      	ldr	r2, [r7, #4]
 800684c:	47a0      	blx	r4
 800684e:	6178      	str	r0, [r7, #20]

  return ret;
 8006850:	697b      	ldr	r3, [r7, #20]
}
 8006852:	4618      	mov	r0, r3
 8006854:	371c      	adds	r7, #28
 8006856:	46bd      	mov	sp, r7
 8006858:	bd90      	pop	{r4, r7, pc}

0800685a <iis2mdc_operating_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_operating_mode_set(stmdev_ctx_t *ctx,
                                   iis2mdc_md_t val)
{
 800685a:	b580      	push	{r7, lr}
 800685c:	b084      	sub	sp, #16
 800685e:	af00      	add	r7, sp, #0
 8006860:	6078      	str	r0, [r7, #4]
 8006862:	460b      	mov	r3, r1
 8006864:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_a_t reg;
  int32_t ret;

  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 8006866:	f107 0208 	add.w	r2, r7, #8
 800686a:	2301      	movs	r3, #1
 800686c:	2160      	movs	r1, #96	; 0x60
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f7ff ffc3 	bl	80067fa <iis2mdc_read_reg>
 8006874:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d10f      	bne.n	800689c <iis2mdc_operating_mode_set+0x42>
  {
    reg.md = (uint8_t)val;
 800687c:	78fb      	ldrb	r3, [r7, #3]
 800687e:	f003 0303 	and.w	r3, r3, #3
 8006882:	b2da      	uxtb	r2, r3
 8006884:	7a3b      	ldrb	r3, [r7, #8]
 8006886:	f362 0301 	bfi	r3, r2, #0, #2
 800688a:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 800688c:	f107 0208 	add.w	r2, r7, #8
 8006890:	2301      	movs	r3, #1
 8006892:	2160      	movs	r1, #96	; 0x60
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f7ff ffc8 	bl	800682a <iis2mdc_write_reg>
 800689a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800689c:	68fb      	ldr	r3, [r7, #12]
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3710      	adds	r7, #16
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}

080068a6 <iis2mdc_data_rate_set>:
  * @param  val      change the values of odr in reg CFG_REG_A
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_data_rate_set(stmdev_ctx_t *ctx, iis2mdc_odr_t val)
{
 80068a6:	b580      	push	{r7, lr}
 80068a8:	b084      	sub	sp, #16
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	6078      	str	r0, [r7, #4]
 80068ae:	460b      	mov	r3, r1
 80068b0:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_a_t reg;
  int32_t ret;

  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 80068b2:	f107 0208 	add.w	r2, r7, #8
 80068b6:	2301      	movs	r3, #1
 80068b8:	2160      	movs	r1, #96	; 0x60
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f7ff ff9d 	bl	80067fa <iis2mdc_read_reg>
 80068c0:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d10f      	bne.n	80068e8 <iis2mdc_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 80068c8:	78fb      	ldrb	r3, [r7, #3]
 80068ca:	f003 0303 	and.w	r3, r3, #3
 80068ce:	b2da      	uxtb	r2, r3
 80068d0:	7a3b      	ldrb	r3, [r7, #8]
 80068d2:	f362 0383 	bfi	r3, r2, #2, #2
 80068d6:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 80068d8:	f107 0208 	add.w	r2, r7, #8
 80068dc:	2301      	movs	r3, #1
 80068de:	2160      	movs	r1, #96	; 0x60
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f7ff ffa2 	bl	800682a <iis2mdc_write_reg>
 80068e6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80068e8:	68fb      	ldr	r3, [r7, #12]
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	3710      	adds	r7, #16
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}
	...

080068f4 <iis2mdc_data_rate_get>:
  * @param  val      Get the values of odr in reg CFG_REG_A
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_data_rate_get(stmdev_ctx_t *ctx, iis2mdc_odr_t *val)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b084      	sub	sp, #16
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
 80068fc:	6039      	str	r1, [r7, #0]
  iis2mdc_cfg_reg_a_t reg;
  int32_t ret;

  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 80068fe:	f107 0208 	add.w	r2, r7, #8
 8006902:	2301      	movs	r3, #1
 8006904:	2160      	movs	r1, #96	; 0x60
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f7ff ff77 	bl	80067fa <iis2mdc_read_reg>
 800690c:	60f8      	str	r0, [r7, #12]

  switch (reg.odr)
 800690e:	7a3b      	ldrb	r3, [r7, #8]
 8006910:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8006914:	b2db      	uxtb	r3, r3
 8006916:	2b03      	cmp	r3, #3
 8006918:	d81a      	bhi.n	8006950 <iis2mdc_data_rate_get+0x5c>
 800691a:	a201      	add	r2, pc, #4	; (adr r2, 8006920 <iis2mdc_data_rate_get+0x2c>)
 800691c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006920:	08006931 	.word	0x08006931
 8006924:	08006939 	.word	0x08006939
 8006928:	08006941 	.word	0x08006941
 800692c:	08006949 	.word	0x08006949
  {
    case IIS2MDC_ODR_10Hz:
      *val = IIS2MDC_ODR_10Hz;
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	2200      	movs	r2, #0
 8006934:	701a      	strb	r2, [r3, #0]
      break;
 8006936:	e00f      	b.n	8006958 <iis2mdc_data_rate_get+0x64>

    case IIS2MDC_ODR_20Hz:
      *val = IIS2MDC_ODR_20Hz;
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	2201      	movs	r2, #1
 800693c:	701a      	strb	r2, [r3, #0]
      break;
 800693e:	e00b      	b.n	8006958 <iis2mdc_data_rate_get+0x64>

    case IIS2MDC_ODR_50Hz:
      *val = IIS2MDC_ODR_50Hz;
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	2202      	movs	r2, #2
 8006944:	701a      	strb	r2, [r3, #0]
      break;
 8006946:	e007      	b.n	8006958 <iis2mdc_data_rate_get+0x64>

    case IIS2MDC_ODR_100Hz:
      *val = IIS2MDC_ODR_100Hz;
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	2203      	movs	r2, #3
 800694c:	701a      	strb	r2, [r3, #0]
      break;
 800694e:	e003      	b.n	8006958 <iis2mdc_data_rate_get+0x64>

    default:
      *val = IIS2MDC_ODR_10Hz;
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	2200      	movs	r2, #0
 8006954:	701a      	strb	r2, [r3, #0]
      break;
 8006956:	bf00      	nop
  }

  return ret;
 8006958:	68fb      	ldr	r3, [r7, #12]
}
 800695a:	4618      	mov	r0, r3
 800695c:	3710      	adds	r7, #16
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}
 8006962:	bf00      	nop

08006964 <iis2mdc_block_data_update_set>:
  * @param  val      change the values of bdu in reg CFG_REG_C
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b084      	sub	sp, #16
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
 800696c:	460b      	mov	r3, r1
 800696e:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_c_t reg;
  int32_t ret;

  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 8006970:	f107 0208 	add.w	r2, r7, #8
 8006974:	2301      	movs	r3, #1
 8006976:	2162      	movs	r1, #98	; 0x62
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f7ff ff3e 	bl	80067fa <iis2mdc_read_reg>
 800697e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d10f      	bne.n	80069a6 <iis2mdc_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8006986:	78fb      	ldrb	r3, [r7, #3]
 8006988:	f003 0301 	and.w	r3, r3, #1
 800698c:	b2da      	uxtb	r2, r3
 800698e:	7a3b      	ldrb	r3, [r7, #8]
 8006990:	f362 1304 	bfi	r3, r2, #4, #1
 8006994:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 8006996:	f107 0208 	add.w	r2, r7, #8
 800699a:	2301      	movs	r3, #1
 800699c:	2162      	movs	r1, #98	; 0x62
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f7ff ff43 	bl	800682a <iis2mdc_write_reg>
 80069a4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80069a6:	68fb      	ldr	r3, [r7, #12]
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	3710      	adds	r7, #16
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}

080069b0 <iis2mdc_magnetic_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b086      	sub	sp, #24
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret =  iis2mdc_read_reg(ctx, IIS2MDC_OUTX_L_REG, buff, 6);
 80069ba:	f107 020c 	add.w	r2, r7, #12
 80069be:	2306      	movs	r3, #6
 80069c0:	2168      	movs	r1, #104	; 0x68
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f7ff ff19 	bl	80067fa <iis2mdc_read_reg>
 80069c8:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80069ca:	7b7b      	ldrb	r3, [r7, #13]
 80069cc:	b21a      	sxth	r2, r3
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80069d8:	b29b      	uxth	r3, r3
 80069da:	021b      	lsls	r3, r3, #8
 80069dc:	b29a      	uxth	r2, r3
 80069de:	7b3b      	ldrb	r3, [r7, #12]
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	4413      	add	r3, r2
 80069e4:	b29b      	uxth	r3, r3
 80069e6:	b21a      	sxth	r2, r3
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80069ec:	7bfa      	ldrb	r2, [r7, #15]
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	3302      	adds	r3, #2
 80069f2:	b212      	sxth	r2, r2
 80069f4:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	3302      	adds	r3, #2
 80069fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80069fe:	b29b      	uxth	r3, r3
 8006a00:	021b      	lsls	r3, r3, #8
 8006a02:	b29a      	uxth	r2, r3
 8006a04:	7bbb      	ldrb	r3, [r7, #14]
 8006a06:	b29b      	uxth	r3, r3
 8006a08:	4413      	add	r3, r2
 8006a0a:	b29a      	uxth	r2, r3
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	3302      	adds	r3, #2
 8006a10:	b212      	sxth	r2, r2
 8006a12:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8006a14:	7c7a      	ldrb	r2, [r7, #17]
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	3304      	adds	r3, #4
 8006a1a:	b212      	sxth	r2, r2
 8006a1c:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	3304      	adds	r3, #4
 8006a22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006a26:	b29b      	uxth	r3, r3
 8006a28:	021b      	lsls	r3, r3, #8
 8006a2a:	b29a      	uxth	r2, r3
 8006a2c:	7c3b      	ldrb	r3, [r7, #16]
 8006a2e:	b29b      	uxth	r3, r3
 8006a30:	4413      	add	r3, r2
 8006a32:	b29a      	uxth	r2, r3
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	3304      	adds	r3, #4
 8006a38:	b212      	sxth	r2, r2
 8006a3a:	801a      	strh	r2, [r3, #0]

  return ret;
 8006a3c:	697b      	ldr	r3, [r7, #20]
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	3718      	adds	r7, #24
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}

08006a46 <iis2mdc_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8006a46:	b580      	push	{r7, lr}
 8006a48:	b084      	sub	sp, #16
 8006a4a:	af00      	add	r7, sp, #0
 8006a4c:	6078      	str	r0, [r7, #4]
 8006a4e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  iis2mdc_read_reg(ctx, IIS2MDC_WHO_AM_I, buff, 1);
 8006a50:	2301      	movs	r3, #1
 8006a52:	683a      	ldr	r2, [r7, #0]
 8006a54:	214f      	movs	r1, #79	; 0x4f
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f7ff fecf 	bl	80067fa <iis2mdc_read_reg>
 8006a5c:	60f8      	str	r0, [r7, #12]

  return ret;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	3710      	adds	r7, #16
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd80      	pop	{r7, pc}

08006a68 <iis2mdc_self_test_set>:
  * @param  val      change the values of self_test in reg CFG_REG_C
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b084      	sub	sp, #16
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	460b      	mov	r3, r1
 8006a72:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_c_t reg;
  int32_t ret;

  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 8006a74:	f107 0208 	add.w	r2, r7, #8
 8006a78:	2301      	movs	r3, #1
 8006a7a:	2162      	movs	r1, #98	; 0x62
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f7ff febc 	bl	80067fa <iis2mdc_read_reg>
 8006a82:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d10f      	bne.n	8006aaa <iis2mdc_self_test_set+0x42>
  {
    reg.self_test = val;
 8006a8a:	78fb      	ldrb	r3, [r7, #3]
 8006a8c:	f003 0301 	and.w	r3, r3, #1
 8006a90:	b2da      	uxtb	r2, r3
 8006a92:	7a3b      	ldrb	r3, [r7, #8]
 8006a94:	f362 0341 	bfi	r3, r2, #1, #1
 8006a98:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 8006a9a:	f107 0208 	add.w	r2, r7, #8
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	2162      	movs	r1, #98	; 0x62
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f7ff fec1 	bl	800682a <iis2mdc_write_reg>
 8006aa8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	3710      	adds	r7, #16
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}

08006ab4 <iis2mdc_i2c_interface_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_i2c_interface_set(stmdev_ctx_t *ctx,
                                  iis2mdc_i2c_dis_t val)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b084      	sub	sp, #16
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	460b      	mov	r3, r1
 8006abe:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_c_t reg;
  int32_t ret;

  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 8006ac0:	f107 0208 	add.w	r2, r7, #8
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	2162      	movs	r1, #98	; 0x62
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f7ff fe96 	bl	80067fa <iis2mdc_read_reg>
 8006ace:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d10f      	bne.n	8006af6 <iis2mdc_i2c_interface_set+0x42>
  {
    reg.i2c_dis = (uint8_t)val;
 8006ad6:	78fb      	ldrb	r3, [r7, #3]
 8006ad8:	f003 0301 	and.w	r3, r3, #1
 8006adc:	b2da      	uxtb	r2, r3
 8006ade:	7a3b      	ldrb	r3, [r7, #8]
 8006ae0:	f362 1345 	bfi	r3, r2, #5, #1
 8006ae4:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 8006ae6:	f107 0208 	add.w	r2, r7, #8
 8006aea:	2301      	movs	r3, #1
 8006aec:	2162      	movs	r1, #98	; 0x62
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f7ff fe9b 	bl	800682a <iis2mdc_write_reg>
 8006af4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006af6:	68fb      	ldr	r3, [r7, #12]
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3710      	adds	r7, #16
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}

08006b00 <mx_aton>:
  * @param  ptr: IP string buffer
  * @param  addr: IP address structure
  * @retval status 1 success, otherwise failed
  */
static int32_t mx_aton(const mx_char_t *ptr, mx_ip_addr_t *addr)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b08f      	sub	sp, #60	; 0x3c
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
 8006b08:	6039      	str	r1, [r7, #0]
  uint32_t val = 0;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t base;
  mx_char_t c0;
  const mx_char_t *cp = ptr;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t parts[4];
  uint32_t *pp = parts;
 8006b12:	f107 030c 	add.w	r3, r7, #12
 8006b16:	627b      	str	r3, [r7, #36]	; 0x24
  int32_t ret = 1;
 8006b18:	2301      	movs	r3, #1
 8006b1a:	623b      	str	r3, [r7, #32]
  int32_t done = 0;
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	61fb      	str	r3, [r7, #28]

  c0 = *cp;
 8006b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b22:	781b      	ldrb	r3, [r3, #0]
 8006b24:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (done == 1)
 8006b28:	69fb      	ldr	r3, [r7, #28]
 8006b2a:	2b01      	cmp	r3, #1
 8006b2c:	f000 809f 	beq.w	8006c6e <mx_aton+0x16e>
    {
      break;
    }

    if (!BYTE_ISDIGIT(c0))
 8006b30:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006b34:	2b2f      	cmp	r3, #47	; 0x2f
 8006b36:	d903      	bls.n	8006b40 <mx_aton+0x40>
 8006b38:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006b3c:	2b39      	cmp	r3, #57	; 0x39
 8006b3e:	d904      	bls.n	8006b4a <mx_aton+0x4a>
    {
      ret = 0;
 8006b40:	2300      	movs	r3, #0
 8006b42:	623b      	str	r3, [r7, #32]
      done = 1;
 8006b44:	2301      	movs	r3, #1
 8006b46:	61fb      	str	r3, [r7, #28]
 8006b48:	e090      	b.n	8006c6c <mx_aton+0x16c>
    }
    else
    {
      val = 0;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	637b      	str	r3, [r7, #52]	; 0x34
      base = 10;
 8006b4e:	230a      	movs	r3, #10
 8006b50:	633b      	str	r3, [r7, #48]	; 0x30
      if (c0 == '0')
 8006b52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006b56:	2b30      	cmp	r3, #48	; 0x30
 8006b58:	d11a      	bne.n	8006b90 <mx_aton+0x90>
      {
        ++cp;
 8006b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b5c:	3301      	adds	r3, #1
 8006b5e:	62bb      	str	r3, [r7, #40]	; 0x28
        c0 = (mx_char_t) * cp;
 8006b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b62:	781b      	ldrb	r3, [r3, #0]
 8006b64:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if ((c0 == (mx_char_t)'x') || (c0 == (mx_char_t)'X'))
 8006b68:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006b6c:	2b78      	cmp	r3, #120	; 0x78
 8006b6e:	d003      	beq.n	8006b78 <mx_aton+0x78>
 8006b70:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006b74:	2b58      	cmp	r3, #88	; 0x58
 8006b76:	d109      	bne.n	8006b8c <mx_aton+0x8c>
        {
          base = 16;
 8006b78:	2310      	movs	r3, #16
 8006b7a:	633b      	str	r3, [r7, #48]	; 0x30
          ++cp;
 8006b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b7e:	3301      	adds	r3, #1
 8006b80:	62bb      	str	r3, [r7, #40]	; 0x28
          c0 = (mx_char_t) * cp;
 8006b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b84:	781b      	ldrb	r3, [r3, #0]
 8006b86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006b8a:	e001      	b.n	8006b90 <mx_aton+0x90>
        }
        else
        {
          base = 8;
 8006b8c:	2308      	movs	r3, #8
 8006b8e:	633b      	str	r3, [r7, #48]	; 0x30
        }
      }

      for (;;)
      {
        if (BYTE_ISDIGIT(c0))
 8006b90:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006b94:	2b2f      	cmp	r3, #47	; 0x2f
 8006b96:	d914      	bls.n	8006bc2 <mx_aton+0xc2>
 8006b98:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006b9c:	2b39      	cmp	r3, #57	; 0x39
 8006b9e:	d810      	bhi.n	8006bc2 <mx_aton+0xc2>
        {
          val = (val * base) + (uint32_t)c0 - (uint32_t)'0';
 8006ba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ba2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ba4:	fb03 f202 	mul.w	r2, r3, r2
 8006ba8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006bac:	4413      	add	r3, r2
 8006bae:	3b30      	subs	r3, #48	; 0x30
 8006bb0:	637b      	str	r3, [r7, #52]	; 0x34
          ++cp;
 8006bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bb4:	3301      	adds	r3, #1
 8006bb6:	62bb      	str	r3, [r7, #40]	; 0x28
          c0 = (mx_char_t) * cp;
 8006bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bba:	781b      	ldrb	r3, [r3, #0]
 8006bbc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006bc0:	e034      	b.n	8006c2c <mx_aton+0x12c>
        }
        else if ((base == 16U) && BYTE_ISXDIGIT(c0))
 8006bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bc4:	2b10      	cmp	r3, #16
 8006bc6:	d132      	bne.n	8006c2e <mx_aton+0x12e>
 8006bc8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006bcc:	2b2f      	cmp	r3, #47	; 0x2f
 8006bce:	d903      	bls.n	8006bd8 <mx_aton+0xd8>
 8006bd0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006bd4:	2b39      	cmp	r3, #57	; 0x39
 8006bd6:	d90f      	bls.n	8006bf8 <mx_aton+0xf8>
 8006bd8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006bdc:	2b60      	cmp	r3, #96	; 0x60
 8006bde:	d903      	bls.n	8006be8 <mx_aton+0xe8>
 8006be0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006be4:	2b66      	cmp	r3, #102	; 0x66
 8006be6:	d907      	bls.n	8006bf8 <mx_aton+0xf8>
 8006be8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006bec:	2b40      	cmp	r3, #64	; 0x40
 8006bee:	d91e      	bls.n	8006c2e <mx_aton+0x12e>
 8006bf0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006bf4:	2b46      	cmp	r3, #70	; 0x46
 8006bf6:	d81a      	bhi.n	8006c2e <mx_aton+0x12e>
        {
          val = (val << 4) | ((uint32_t)c0 + 10U - (BYTE_ISLOWER(c0) ? (uint32_t)'a' : (uint32_t)'A'));
 8006bf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bfa:	011a      	lsls	r2, r3, #4
 8006bfc:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8006c00:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006c04:	2b60      	cmp	r3, #96	; 0x60
 8006c06:	d905      	bls.n	8006c14 <mx_aton+0x114>
 8006c08:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006c0c:	2b7a      	cmp	r3, #122	; 0x7a
 8006c0e:	d801      	bhi.n	8006c14 <mx_aton+0x114>
 8006c10:	2361      	movs	r3, #97	; 0x61
 8006c12:	e000      	b.n	8006c16 <mx_aton+0x116>
 8006c14:	2341      	movs	r3, #65	; 0x41
 8006c16:	1acb      	subs	r3, r1, r3
 8006c18:	330a      	adds	r3, #10
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	637b      	str	r3, [r7, #52]	; 0x34
          ++cp;
 8006c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c20:	3301      	adds	r3, #1
 8006c22:	62bb      	str	r3, [r7, #40]	; 0x28
          c0 = (mx_char_t) * cp;
 8006c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c26:	781b      	ldrb	r3, [r3, #0]
 8006c28:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (BYTE_ISDIGIT(c0))
 8006c2c:	e7b0      	b.n	8006b90 <mx_aton+0x90>
        {
          break;
        }
      }

      if (c0 == '.')
 8006c2e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006c32:	2b2e      	cmp	r3, #46	; 0x2e
 8006c34:	d118      	bne.n	8006c68 <mx_aton+0x168>
         * Internet format:
         *  a.b.c.d
         *  a.b.c   (with c treated as 16 bits)
         *  a.b (with b treated as 24 bits)
         */
        if (pp >= (parts + 3))
 8006c36:	f107 030c 	add.w	r3, r7, #12
 8006c3a:	330c      	adds	r3, #12
 8006c3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c3e:	429a      	cmp	r2, r3
 8006c40:	d304      	bcc.n	8006c4c <mx_aton+0x14c>
        {
          ret = 0;
 8006c42:	2300      	movs	r3, #0
 8006c44:	623b      	str	r3, [r7, #32]
          done = 1;
 8006c46:	2301      	movs	r3, #1
 8006c48:	61fb      	str	r3, [r7, #28]
 8006c4a:	e76d      	b.n	8006b28 <mx_aton+0x28>
        }
        else
        {
          *pp = val;
 8006c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c50:	601a      	str	r2, [r3, #0]
          pp++;
 8006c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c54:	3304      	adds	r3, #4
 8006c56:	627b      	str	r3, [r7, #36]	; 0x24
          ++cp;
 8006c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c5a:	3301      	adds	r3, #1
 8006c5c:	62bb      	str	r3, [r7, #40]	; 0x28
          c0 = (mx_char_t) * cp;
 8006c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c60:	781b      	ldrb	r3, [r3, #0]
 8006c62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006c66:	e75f      	b.n	8006b28 <mx_aton+0x28>
        }
      }
      else
      {
        done = 1;
 8006c68:	2301      	movs	r3, #1
 8006c6a:	61fb      	str	r3, [r7, #28]
    if (done == 1)
 8006c6c:	e75c      	b.n	8006b28 <mx_aton+0x28>
      break;
 8006c6e:	bf00      	nop
    }
  }
  /*
   * Check for trailing characters.
   */
  if ((c0 != (mx_char_t)'\0') && (BYTE_ISSPACE((c0)) == false))
 8006c70:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d01f      	beq.n	8006cb8 <mx_aton+0x1b8>
 8006c78:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006c7c:	2b20      	cmp	r3, #32
 8006c7e:	d013      	beq.n	8006ca8 <mx_aton+0x1a8>
 8006c80:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006c84:	2b0c      	cmp	r3, #12
 8006c86:	d00f      	beq.n	8006ca8 <mx_aton+0x1a8>
 8006c88:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006c8c:	2b0a      	cmp	r3, #10
 8006c8e:	d00b      	beq.n	8006ca8 <mx_aton+0x1a8>
 8006c90:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006c94:	2b0d      	cmp	r3, #13
 8006c96:	d007      	beq.n	8006ca8 <mx_aton+0x1a8>
 8006c98:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006c9c:	2b09      	cmp	r3, #9
 8006c9e:	d003      	beq.n	8006ca8 <mx_aton+0x1a8>
 8006ca0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006ca4:	2b0b      	cmp	r3, #11
 8006ca6:	d101      	bne.n	8006cac <mx_aton+0x1ac>
 8006ca8:	2301      	movs	r3, #1
 8006caa:	e000      	b.n	8006cae <mx_aton+0x1ae>
 8006cac:	2300      	movs	r3, #0
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d102      	bne.n	8006cb8 <mx_aton+0x1b8>
  {
    ret = 0;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	623b      	str	r3, [r7, #32]
 8006cb6:	e04a      	b.n	8006d4e <mx_aton+0x24e>
    /*
     * Concoct the address according to
     * the number of parts specified.
     */
  {
    switch (pp - parts + 1)
 8006cb8:	f107 030c 	add.w	r3, r7, #12
 8006cbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cbe:	1ad3      	subs	r3, r2, r3
 8006cc0:	109b      	asrs	r3, r3, #2
 8006cc2:	3301      	adds	r3, #1
 8006cc4:	2b04      	cmp	r3, #4
 8006cc6:	d83e      	bhi.n	8006d46 <mx_aton+0x246>
 8006cc8:	a201      	add	r2, pc, #4	; (adr r2, 8006cd0 <mx_aton+0x1d0>)
 8006cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cce:	bf00      	nop
 8006cd0:	08006ce5 	.word	0x08006ce5
 8006cd4:	08006d4d 	.word	0x08006d4d
 8006cd8:	08006ceb 	.word	0x08006ceb
 8006cdc:	08006d03 	.word	0x08006d03
 8006ce0:	08006d23 	.word	0x08006d23
    {

      case 0:
        ret = 0;          /* initial non digit */
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	623b      	str	r3, [r7, #32]
        break;
 8006ce8:	e031      	b.n	8006d4e <mx_aton+0x24e>

      case 1:             /* a -- 32 bits */
        break;

      case 2:             /* a.b -- 8.24 bits */
        if (val > 0xffffffUL)
 8006cea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006cf0:	d301      	bcc.n	8006cf6 <mx_aton+0x1f6>
        {
          ret = 0;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	623b      	str	r3, [r7, #32]
        }
        val |= parts[0] << 24;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	061b      	lsls	r3, r3, #24
 8006cfa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006d00:	e025      	b.n	8006d4e <mx_aton+0x24e>

      case 3:             /* a.b.c -- 8.8.16 bits */
        if (val > 0xffffU)
 8006d02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d08:	d302      	bcc.n	8006d10 <mx_aton+0x210>
        {
          ret = 0;
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	623b      	str	r3, [r7, #32]
          break;
 8006d0e:	e01e      	b.n	8006d4e <mx_aton+0x24e>
        }
        val |= (parts[0] << 24) | (parts[1] << 16);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	061a      	lsls	r2, r3, #24
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	041b      	lsls	r3, r3, #16
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006d20:	e015      	b.n	8006d4e <mx_aton+0x24e>

      case 4:             /* a.b.c.d -- 8.8.8.8 bits */
        if (val > 0xffU)
 8006d22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d24:	2bff      	cmp	r3, #255	; 0xff
 8006d26:	d902      	bls.n	8006d2e <mx_aton+0x22e>
        {
          ret = 0;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	623b      	str	r3, [r7, #32]
          break;
 8006d2c:	e00f      	b.n	8006d4e <mx_aton+0x24e>
        }
        val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	061a      	lsls	r2, r3, #24
 8006d32:	693b      	ldr	r3, [r7, #16]
 8006d34:	041b      	lsls	r3, r3, #16
 8006d36:	431a      	orrs	r2, r3
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	021b      	lsls	r3, r3, #8
 8006d3c:	4313      	orrs	r3, r2
 8006d3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d40:	4313      	orrs	r3, r2
 8006d42:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006d44:	e003      	b.n	8006d4e <mx_aton+0x24e>
      default:
        ret = 0;
 8006d46:	2300      	movs	r3, #0
 8006d48:	623b      	str	r3, [r7, #32]
        break;
 8006d4a:	e000      	b.n	8006d4e <mx_aton+0x24e>
        break;
 8006d4c:	bf00      	nop
    }
  }

  if (ret == 1)
 8006d4e:	6a3b      	ldr	r3, [r7, #32]
 8006d50:	2b01      	cmp	r3, #1
 8006d52:	d113      	bne.n	8006d7c <mx_aton+0x27c>
  {
    if (addr != NULL)
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d010      	beq.n	8006d7c <mx_aton+0x27c>
    {
      addr->addr = MX_NET_HTONL(val);
 8006d5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d5c:	0e1a      	lsrs	r2, r3, #24
 8006d5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d60:	0a1b      	lsrs	r3, r3, #8
 8006d62:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006d66:	431a      	orrs	r2, r3
 8006d68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d6a:	021b      	lsls	r3, r3, #8
 8006d6c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006d70:	431a      	orrs	r2, r3
 8006d72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d74:	061b      	lsls	r3, r3, #24
 8006d76:	431a      	orrs	r2, r3
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	601a      	str	r2, [r3, #0]
    }
  }
  return ret;
 8006d7c:	6a3b      	ldr	r3, [r7, #32]
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	373c      	adds	r7, #60	; 0x3c
 8006d82:	46bd      	mov	sp, r7
 8006d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d88:	4770      	bx	lr
 8006d8a:	bf00      	nop

08006d8c <mx_aton_r>:


int32_t mx_aton_r(const mx_char_t *cp)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b084      	sub	sp, #16
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  mx_ip_addr_t val = {0};
 8006d94:	2300      	movs	r3, #0
 8006d96:	60bb      	str	r3, [r7, #8]
  int32_t ret = 0;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	60fb      	str	r3, [r7, #12]

  if (mx_aton(cp, &val) != 0)
 8006d9c:	f107 0308 	add.w	r3, r7, #8
 8006da0:	4619      	mov	r1, r3
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f7ff feac 	bl	8006b00 <mx_aton>
 8006da8:	4603      	mov	r3, r0
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d001      	beq.n	8006db2 <mx_aton_r+0x26>
  {
    ret = (int32_t) val.addr;
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8006db2:	68fb      	ldr	r3, [r7, #12]
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	3710      	adds	r7, #16
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}

08006dbc <mx_ntoa>:


mx_char_t *mx_ntoa(const mx_ip_addr_t *addr)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b08b      	sub	sp, #44	; 0x2c
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  int32_t len = 0;
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	627b      	str	r3, [r7, #36]	; 0x24
  static mx_char_t buf[MX_MAX_IP_LEN];
  const int32_t buf_size = (int32_t)sizeof(buf);
 8006dc8:	2310      	movs	r3, #16
 8006dca:	61fb      	str	r3, [r7, #28]

  const uint32_t ip_addr = addr->addr;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	613b      	str	r3, [r7, #16]
  const uint8_t *const ap = (const uint8_t *)&ip_addr;
 8006dd2:	f107 0310 	add.w	r3, r7, #16
 8006dd6:	61bb      	str	r3, [r7, #24]

  for (uint8_t n = 0; n < (uint8_t) 4; n++)
 8006dd8:	2300      	movs	r3, #0
 8006dda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006dde:	e060      	b.n	8006ea2 <mx_ntoa+0xe6>
  {
    mx_char_t inv[3];
    uint8_t i = 0;
 8006de0:	2300      	movs	r3, #0
 8006de2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    uint8_t val = ap[n];
 8006de6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006dea:	69ba      	ldr	r2, [r7, #24]
 8006dec:	4413      	add	r3, r2
 8006dee:	781b      	ldrb	r3, [r3, #0]
 8006df0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    do
    {
      const uint8_t rem = val % 10U;
 8006df4:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8006df8:	4b34      	ldr	r3, [pc, #208]	; (8006ecc <mx_ntoa+0x110>)
 8006dfa:	fba3 1302 	umull	r1, r3, r3, r2
 8006dfe:	08d9      	lsrs	r1, r3, #3
 8006e00:	460b      	mov	r3, r1
 8006e02:	009b      	lsls	r3, r3, #2
 8006e04:	440b      	add	r3, r1
 8006e06:	005b      	lsls	r3, r3, #1
 8006e08:	1ad3      	subs	r3, r2, r3
 8006e0a:	75fb      	strb	r3, [r7, #23]
      val /=  10U;
 8006e0c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8006e10:	4a2e      	ldr	r2, [pc, #184]	; (8006ecc <mx_ntoa+0x110>)
 8006e12:	fba2 2303 	umull	r2, r3, r2, r3
 8006e16:	08db      	lsrs	r3, r3, #3
 8006e18:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      inv[i] = (mx_char_t)'0' + rem;
 8006e1c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8006e20:	7dfa      	ldrb	r2, [r7, #23]
 8006e22:	3230      	adds	r2, #48	; 0x30
 8006e24:	b2d2      	uxtb	r2, r2
 8006e26:	3328      	adds	r3, #40	; 0x28
 8006e28:	443b      	add	r3, r7
 8006e2a:	f803 2c1c 	strb.w	r2, [r3, #-28]
      i++;
 8006e2e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8006e32:	3301      	adds	r3, #1
 8006e34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    } while (val != 0U);
 8006e38:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d1d9      	bne.n	8006df4 <mx_ntoa+0x38>

    while (i != 0U)
 8006e40:	e016      	b.n	8006e70 <mx_ntoa+0xb4>
    {
      i--;
 8006e42:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8006e46:	3b01      	subs	r3, #1
 8006e48:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (len < buf_size)
 8006e4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e4e:	69fb      	ldr	r3, [r7, #28]
 8006e50:	429a      	cmp	r2, r3
 8006e52:	da0d      	bge.n	8006e70 <mx_ntoa+0xb4>
      {
        buf[len] = inv[i];
 8006e54:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8006e58:	3328      	adds	r3, #40	; 0x28
 8006e5a:	443b      	add	r3, r7
 8006e5c:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8006e60:	4a1b      	ldr	r2, [pc, #108]	; (8006ed0 <mx_ntoa+0x114>)
 8006e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e64:	4413      	add	r3, r2
 8006e66:	460a      	mov	r2, r1
 8006e68:	701a      	strb	r2, [r3, #0]
        len++;
 8006e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e6c:	3301      	adds	r3, #1
 8006e6e:	627b      	str	r3, [r7, #36]	; 0x24
    while (i != 0U)
 8006e70:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d1e4      	bne.n	8006e42 <mx_ntoa+0x86>
      }
    }

    if ((n < 3U) && (len < buf_size))
 8006e78:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006e7c:	2b02      	cmp	r3, #2
 8006e7e:	d80b      	bhi.n	8006e98 <mx_ntoa+0xdc>
 8006e80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e82:	69fb      	ldr	r3, [r7, #28]
 8006e84:	429a      	cmp	r2, r3
 8006e86:	da07      	bge.n	8006e98 <mx_ntoa+0xdc>
    {
      buf[len] = (mx_char_t) '.';
 8006e88:	4a11      	ldr	r2, [pc, #68]	; (8006ed0 <mx_ntoa+0x114>)
 8006e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e8c:	4413      	add	r3, r2
 8006e8e:	222e      	movs	r2, #46	; 0x2e
 8006e90:	701a      	strb	r2, [r3, #0]
      len++;
 8006e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e94:	3301      	adds	r3, #1
 8006e96:	627b      	str	r3, [r7, #36]	; 0x24
  for (uint8_t n = 0; n < (uint8_t) 4; n++)
 8006e98:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006e9c:	3301      	adds	r3, #1
 8006e9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ea2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006ea6:	2b03      	cmp	r3, #3
 8006ea8:	d99a      	bls.n	8006de0 <mx_ntoa+0x24>
    }
  }

  MX_ASSERT(len < buf_size);
 8006eaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006eac:	69fb      	ldr	r3, [r7, #28]
 8006eae:	429a      	cmp	r2, r3
 8006eb0:	dafb      	bge.n	8006eaa <mx_ntoa+0xee>

  buf[len] = (mx_char_t) '\0';
 8006eb2:	4a07      	ldr	r2, [pc, #28]	; (8006ed0 <mx_ntoa+0x114>)
 8006eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb6:	4413      	add	r3, r2
 8006eb8:	2200      	movs	r2, #0
 8006eba:	701a      	strb	r2, [r3, #0]

  return buf;
 8006ebc:	4b04      	ldr	r3, [pc, #16]	; (8006ed0 <mx_ntoa+0x114>)
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	372c      	adds	r7, #44	; 0x2c
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec8:	4770      	bx	lr
 8006eca:	bf00      	nop
 8006ecc:	cccccccd 	.word	0xcccccccd
 8006ed0:	20002bfc 	.word	0x20002bfc

08006ed4 <noos_sem_signal>:

#else  /* MX_WIFI_USE_CMSIS_OS */
/* No OS implementation. */

int32_t noos_sem_signal(volatile uint32_t *sem)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b085      	sub	sp, #20
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
  int32_t rc = 0;
 8006edc:	2300      	movs	r3, #0
 8006ede:	60fb      	str	r3, [r7, #12]

  if (sem != NULL)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d005      	beq.n	8006ef2 <noos_sem_signal+0x1e>
  {
    *sem = *sem + 1U;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	1c5a      	adds	r2, r3, #1
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	601a      	str	r2, [r3, #0]
 8006ef0:	e002      	b.n	8006ef8 <noos_sem_signal+0x24>
  }
  else
  {
    rc = -1;
 8006ef2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006ef6:	60fb      	str	r3, [r7, #12]
  }

  return rc;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3714      	adds	r7, #20
 8006efe:	46bd      	mov	sp, r7
 8006f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f04:	4770      	bx	lr

08006f06 <noos_sem_wait>:


int32_t noos_sem_wait(__IO uint32_t *sem, uint32_t timeout, void (*idle_func)(uint32_t duration))
{
 8006f06:	b580      	push	{r7, lr}
 8006f08:	b086      	sub	sp, #24
 8006f0a:	af00      	add	r7, sp, #0
 8006f0c:	60f8      	str	r0, [r7, #12]
 8006f0e:	60b9      	str	r1, [r7, #8]
 8006f10:	607a      	str	r2, [r7, #4]
  int32_t rc = 0;
 8006f12:	2300      	movs	r3, #0
 8006f14:	617b      	str	r3, [r7, #20]
  const uint32_t tickstart = HAL_GetTick();
 8006f16:	f002 ff37 	bl	8009d88 <HAL_GetTick>
 8006f1a:	6138      	str	r0, [r7, #16]

  while ((*sem < 1U))
 8006f1c:	e018      	b.n	8006f50 <noos_sem_wait+0x4a>
  {
    if ((HAL_GetTick() - tickstart) > timeout)
 8006f1e:	f002 ff33 	bl	8009d88 <HAL_GetTick>
 8006f22:	4602      	mov	r2, r0
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	1ad3      	subs	r3, r2, r3
 8006f28:	68ba      	ldr	r2, [r7, #8]
 8006f2a:	429a      	cmp	r2, r3
 8006f2c:	d203      	bcs.n	8006f36 <noos_sem_wait+0x30>
    {
      rc = -1;
 8006f2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006f32:	617b      	str	r3, [r7, #20]
      break;
 8006f34:	e010      	b.n	8006f58 <noos_sem_wait+0x52>
    }
    if (idle_func != NULL)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d009      	beq.n	8006f50 <noos_sem_wait+0x4a>
    {
      (*idle_func)(timeout - (HAL_GetTick() - tickstart));
 8006f3c:	f002 ff24 	bl	8009d88 <HAL_GetTick>
 8006f40:	4602      	mov	r2, r0
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	1a9a      	subs	r2, r3, r2
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	441a      	add	r2, r3
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	4610      	mov	r0, r2
 8006f4e:	4798      	blx	r3
  while ((*sem < 1U))
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d0e2      	beq.n	8006f1e <noos_sem_wait+0x18>
    }
  }
  /* no timeout */
  if (rc == 0)
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d104      	bne.n	8006f68 <noos_sem_wait+0x62>
  {
    *sem = *sem - 1U;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	1e5a      	subs	r2, r3, #1
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	601a      	str	r2, [r3, #0]
  }
  return rc;
 8006f68:	697b      	ldr	r3, [r7, #20]
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3718      	adds	r7, #24
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}

08006f72 <noos_fifo_init>:


int32_t noos_fifo_init(noos_queue_t **qret, uint16_t len)
{
 8006f72:	b580      	push	{r7, lr}
 8006f74:	b084      	sub	sp, #16
 8006f76:	af00      	add	r7, sp, #0
 8006f78:	6078      	str	r0, [r7, #4]
 8006f7a:	460b      	mov	r3, r1
 8006f7c:	807b      	strh	r3, [r7, #2]
  int32_t rc = -1;
 8006f7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006f82:	60fb      	str	r3, [r7, #12]
  noos_queue_t *q;

  if (len > 0U)
 8006f84:	887b      	ldrh	r3, [r7, #2]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d030      	beq.n	8006fec <noos_fifo_init+0x7a>
  {
    q = (noos_queue_t *)MX_WIFI_MALLOC(sizeof(noos_queue_t));
 8006f8a:	2014      	movs	r0, #20
 8006f8c:	f00d ff38 	bl	8014e00 <malloc>
 8006f90:	4603      	mov	r3, r0
 8006f92:	60bb      	str	r3, [r7, #8]
    if (q != NULL)
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d028      	beq.n	8006fec <noos_fifo_init+0x7a>
    {
      q->in = 0U;
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	805a      	strh	r2, [r3, #2]
      q->len = len;
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	887a      	ldrh	r2, [r7, #2]
 8006fa4:	801a      	strh	r2, [r3, #0]
      q->idx = 0;
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	609a      	str	r2, [r3, #8]
      q->rd = 0;
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	60da      	str	r2, [r3, #12]
      q->wr = 0;
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	611a      	str	r2, [r3, #16]
      q->fifo = (void **) MX_WIFI_MALLOC(sizeof(void *) * (len + 1U));
 8006fb8:	887b      	ldrh	r3, [r7, #2]
 8006fba:	3301      	adds	r3, #1
 8006fbc:	009b      	lsls	r3, r3, #2
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	f00d ff1e 	bl	8014e00 <malloc>
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	461a      	mov	r2, r3
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	605a      	str	r2, [r3, #4]
      if (q->fifo != NULL)
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	685b      	ldr	r3, [r3, #4]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d005      	beq.n	8006fe0 <noos_fifo_init+0x6e>
      {
        rc = 0;
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	60fb      	str	r3, [r7, #12]
        *qret = q;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	68ba      	ldr	r2, [r7, #8]
 8006fdc:	601a      	str	r2, [r3, #0]
 8006fde:	e005      	b.n	8006fec <noos_fifo_init+0x7a>
      }
      else
      {
        MX_WIFI_FREE(q);
 8006fe0:	68b8      	ldr	r0, [r7, #8]
 8006fe2:	f00d ff15 	bl	8014e10 <free>
        *qret = NULL;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	601a      	str	r2, [r3, #0]
      }
    }
  }
  return rc;
 8006fec:	68fb      	ldr	r3, [r7, #12]
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3710      	adds	r7, #16
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}

08006ff6 <noos_fifo_deinit>:


void noos_fifo_deinit(noos_queue_t *q)
{
 8006ff6:	b580      	push	{r7, lr}
 8006ff8:	b082      	sub	sp, #8
 8006ffa:	af00      	add	r7, sp, #0
 8006ffc:	6078      	str	r0, [r7, #4]
  if (q != NULL)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d007      	beq.n	8007014 <noos_fifo_deinit+0x1e>
  {
    MX_WIFI_FREE(q->fifo);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	685b      	ldr	r3, [r3, #4]
 8007008:	4618      	mov	r0, r3
 800700a:	f00d ff01 	bl	8014e10 <free>
    MX_WIFI_FREE(q);
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f00d fefe 	bl	8014e10 <free>
  }
}
 8007014:	bf00      	nop
 8007016:	3708      	adds	r7, #8
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}

0800701c <noos_fifo_push>:

int32_t noos_fifo_push(noos_queue_t *queue, void *p, uint32_t timeout, void (*idle_func)(uint32_t duration))
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b086      	sub	sp, #24
 8007020:	af00      	add	r7, sp, #0
 8007022:	60f8      	str	r0, [r7, #12]
 8007024:	60b9      	str	r1, [r7, #8]
 8007026:	607a      	str	r2, [r7, #4]
 8007028:	603b      	str	r3, [r7, #0]
  int32_t rc = 0;
 800702a:	2300      	movs	r3, #0
 800702c:	617b      	str	r3, [r7, #20]
  const uint32_t tickstart = HAL_GetTick();
 800702e:	f002 feab 	bl	8009d88 <HAL_GetTick>
 8007032:	6138      	str	r0, [r7, #16]

  while (queue->in == queue->len)
 8007034:	e018      	b.n	8007068 <noos_fifo_push+0x4c>
  {
    if ((HAL_GetTick() - tickstart) > timeout)
 8007036:	f002 fea7 	bl	8009d88 <HAL_GetTick>
 800703a:	4602      	mov	r2, r0
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	1ad3      	subs	r3, r2, r3
 8007040:	687a      	ldr	r2, [r7, #4]
 8007042:	429a      	cmp	r2, r3
 8007044:	d203      	bcs.n	800704e <noos_fifo_push+0x32>
    {
      rc = -1;
 8007046:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800704a:	617b      	str	r3, [r7, #20]
      break;
 800704c:	e012      	b.n	8007074 <noos_fifo_push+0x58>
    }
    if (NULL != idle_func)
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d009      	beq.n	8007068 <noos_fifo_push+0x4c>
    {
      (*idle_func)(timeout - (HAL_GetTick() - tickstart));
 8007054:	f002 fe98 	bl	8009d88 <HAL_GetTick>
 8007058:	4602      	mov	r2, r0
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	1a9a      	subs	r2, r3, r2
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	441a      	add	r2, r3
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	4610      	mov	r0, r2
 8007066:	4798      	blx	r3
  while (queue->in == queue->len)
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	885a      	ldrh	r2, [r3, #2]
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	881b      	ldrh	r3, [r3, #0]
 8007070:	429a      	cmp	r2, r3
 8007072:	d0e0      	beq.n	8007036 <noos_fifo_push+0x1a>
    }
  }
  if (0 == rc)
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d119      	bne.n	80070ae <noos_fifo_push+0x92>
  {
    queue->in++;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	885b      	ldrh	r3, [r3, #2]
 800707e:	3301      	adds	r3, #1
 8007080:	b29a      	uxth	r2, r3
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	805a      	strh	r2, [r3, #2]
    queue->fifo[queue->wr] = p;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	685a      	ldr	r2, [r3, #4]
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	691b      	ldr	r3, [r3, #16]
 800708e:	009b      	lsls	r3, r3, #2
 8007090:	4413      	add	r3, r2
 8007092:	68ba      	ldr	r2, [r7, #8]
 8007094:	601a      	str	r2, [r3, #0]
    queue->wr = (queue->wr + 1U) % queue->len;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	691b      	ldr	r3, [r3, #16]
 800709a:	3301      	adds	r3, #1
 800709c:	68fa      	ldr	r2, [r7, #12]
 800709e:	8812      	ldrh	r2, [r2, #0]
 80070a0:	fbb3 f1f2 	udiv	r1, r3, r2
 80070a4:	fb01 f202 	mul.w	r2, r1, r2
 80070a8:	1a9a      	subs	r2, r3, r2
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	611a      	str	r2, [r3, #16]
  }
  return rc;
 80070ae:	697b      	ldr	r3, [r7, #20]
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	3718      	adds	r7, #24
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}

080070b8 <noos_fifo_pop>:


void *noos_fifo_pop(noos_queue_t *queue, uint32_t timeout, void (*idle_func)(uint32_t duration))
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b088      	sub	sp, #32
 80070bc:	af00      	add	r7, sp, #0
 80070be:	60f8      	str	r0, [r7, #12]
 80070c0:	60b9      	str	r1, [r7, #8]
 80070c2:	607a      	str	r2, [r7, #4]
  int32_t rc = 0;
 80070c4:	2300      	movs	r3, #0
 80070c6:	61fb      	str	r3, [r7, #28]
  const uint32_t tickstart = HAL_GetTick();
 80070c8:	f002 fe5e 	bl	8009d88 <HAL_GetTick>
 80070cc:	6178      	str	r0, [r7, #20]
  void *p = NULL;
 80070ce:	2300      	movs	r3, #0
 80070d0:	61bb      	str	r3, [r7, #24]

  while (0U == queue->in)
 80070d2:	e018      	b.n	8007106 <noos_fifo_pop+0x4e>
  {
    if ((HAL_GetTick() - tickstart) > timeout)
 80070d4:	f002 fe58 	bl	8009d88 <HAL_GetTick>
 80070d8:	4602      	mov	r2, r0
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	1ad3      	subs	r3, r2, r3
 80070de:	68ba      	ldr	r2, [r7, #8]
 80070e0:	429a      	cmp	r2, r3
 80070e2:	d203      	bcs.n	80070ec <noos_fifo_pop+0x34>
    {
      rc = -1;
 80070e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80070e8:	61fb      	str	r3, [r7, #28]
      break;
 80070ea:	e010      	b.n	800710e <noos_fifo_pop+0x56>
    }
    if (NULL != idle_func)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d009      	beq.n	8007106 <noos_fifo_pop+0x4e>
    {
      (*idle_func)(timeout - (HAL_GetTick() - tickstart));
 80070f2:	f002 fe49 	bl	8009d88 <HAL_GetTick>
 80070f6:	4602      	mov	r2, r0
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	1a9a      	subs	r2, r3, r2
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	441a      	add	r2, r3
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	4610      	mov	r0, r2
 8007104:	4798      	blx	r3
  while (0U == queue->in)
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	885b      	ldrh	r3, [r3, #2]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d0e2      	beq.n	80070d4 <noos_fifo_pop+0x1c>
    }
  }

  if (0 == rc)
 800710e:	69fb      	ldr	r3, [r7, #28]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d119      	bne.n	8007148 <noos_fifo_pop+0x90>
  {
    p = queue->fifo[queue->rd];
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	685a      	ldr	r2, [r3, #4]
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	68db      	ldr	r3, [r3, #12]
 800711c:	009b      	lsls	r3, r3, #2
 800711e:	4413      	add	r3, r2
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	61bb      	str	r3, [r7, #24]
    queue->rd = (queue->rd + 1U) % queue->len;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	68db      	ldr	r3, [r3, #12]
 8007128:	3301      	adds	r3, #1
 800712a:	68fa      	ldr	r2, [r7, #12]
 800712c:	8812      	ldrh	r2, [r2, #0]
 800712e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007132:	fb01 f202 	mul.w	r2, r1, r2
 8007136:	1a9a      	subs	r2, r3, r2
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	60da      	str	r2, [r3, #12]
    queue->in--;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	885b      	ldrh	r3, [r3, #2]
 8007140:	3b01      	subs	r3, #1
 8007142:	b29a      	uxth	r2, r3
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	805a      	strh	r2, [r3, #2]
  }

  return p;
 8007148:	69bb      	ldr	r3, [r7, #24]
}
 800714a:	4618      	mov	r0, r3
 800714c:	3720      	adds	r7, #32
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}

08007152 <mx_wifi_hci_pkt_verify>:
static bool mx_wifi_hci_pkt_verify(const uint8_t *data, uint32_t len);


/* Private functions ---------------------------------------------------------*/
static bool mx_wifi_hci_pkt_verify(const uint8_t *data, uint32_t len)
{
 8007152:	b480      	push	{r7}
 8007154:	b083      	sub	sp, #12
 8007156:	af00      	add	r7, sp, #0
 8007158:	6078      	str	r0, [r7, #4]
 800715a:	6039      	str	r1, [r7, #0]
  (void)data;
  (void)len;
  /* Here each UART slip frame or SPI frame as a HCI packet. */
  return true;
 800715c:	2301      	movs	r3, #1
}
 800715e:	4618      	mov	r0, r3
 8007160:	370c      	adds	r7, #12
 8007162:	46bd      	mov	sp, r7
 8007164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007168:	4770      	bx	lr
	...

0800716c <mx_wifi_hci_init>:


/* Global functions ----------------------------------------------------------*/
int32_t mx_wifi_hci_init(hci_send_func_t low_level_send)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b082      	sub	sp, #8
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
  TclOutputFunc = low_level_send;
 8007174:	4a05      	ldr	r2, [pc, #20]	; (800718c <mx_wifi_hci_init+0x20>)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6013      	str	r3, [r2, #0]
  FIFO_INIT(HciPacketFifo, MX_WIFI_MAX_RX_BUFFER_COUNT);
 800717a:	2102      	movs	r1, #2
 800717c:	4804      	ldr	r0, [pc, #16]	; (8007190 <mx_wifi_hci_init+0x24>)
 800717e:	f7ff fef8 	bl	8006f72 <noos_fifo_init>

  return 0;
 8007182:	2300      	movs	r3, #0
}
 8007184:	4618      	mov	r0, r3
 8007186:	3708      	adds	r7, #8
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}
 800718c:	20002c0c 	.word	0x20002c0c
 8007190:	20002c10 	.word	0x20002c10

08007194 <mx_wifi_hci_deinit>:


int32_t mx_wifi_hci_deinit(void)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	af00      	add	r7, sp, #0
  FIFO_DEINIT(HciPacketFifo);
 8007198:	4b03      	ldr	r3, [pc, #12]	; (80071a8 <mx_wifi_hci_deinit+0x14>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4618      	mov	r0, r3
 800719e:	f7ff ff2a 	bl	8006ff6 <noos_fifo_deinit>
  return 0;
 80071a2:	2300      	movs	r3, #0
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	bd80      	pop	{r7, pc}
 80071a8:	20002c10 	.word	0x20002c10

080071ac <mx_wifi_hci_send>:


int32_t mx_wifi_hci_send(uint8_t *payload, uint16_t len)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b084      	sub	sp, #16
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
 80071b4:	460b      	mov	r3, r1
 80071b6:	807b      	strh	r3, [r7, #2]
  int32_t ret = 0;
 80071b8:	2300      	movs	r3, #0
 80071ba:	60fb      	str	r3, [r7, #12]
  uint16_t sent = 0;
 80071bc:	2300      	movs	r3, #0
 80071be:	817b      	strh	r3, [r7, #10]

#if (MX_WIFI_USE_SPI == 1)
  sent = TclOutputFunc(payload, len);
 80071c0:	4b0c      	ldr	r3, [pc, #48]	; (80071f4 <mx_wifi_hci_send+0x48>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	887a      	ldrh	r2, [r7, #2]
 80071c6:	4611      	mov	r1, r2
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	4798      	blx	r3
 80071cc:	4603      	mov	r3, r0
 80071ce:	817b      	strh	r3, [r7, #10]
  if (len != sent)
 80071d0:	887a      	ldrh	r2, [r7, #2]
 80071d2:	897b      	ldrh	r3, [r7, #10]
 80071d4:	429a      	cmp	r2, r3
 80071d6:	d007      	beq.n	80071e8 <mx_wifi_hci_send+0x3c>
  {
    DEBUG_ERROR("tcl_output(spi) error sent=%d !\n", sent);
 80071d8:	897b      	ldrh	r3, [r7, #10]
 80071da:	4619      	mov	r1, r3
 80071dc:	4806      	ldr	r0, [pc, #24]	; (80071f8 <mx_wifi_hci_send+0x4c>)
 80071de:	f00f fba9 	bl	8016934 <iprintf>
    ret = -1;
 80071e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80071e6:	60fb      	str	r3, [r7, #12]
    DEBUG_ERROR("Create slip frame error!\n");
    ret = -2;
  }
#endif /* (MX_WIFI_USE_SPI == 1) */

  return ret;
 80071e8:	68fb      	ldr	r3, [r7, #12]
}
 80071ea:	4618      	mov	r0, r3
 80071ec:	3710      	adds	r7, #16
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bd80      	pop	{r7, pc}
 80071f2:	bf00      	nop
 80071f4:	20002c0c 	.word	0x20002c0c
 80071f8:	0801a704 	.word	0x0801a704

080071fc <mx_wifi_hci_recv>:


mx_buf_t *mx_wifi_hci_recv(uint32_t timeout)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b084      	sub	sp, #16
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
  mx_buf_t *const nbuf = (mx_buf_t *)FIFO_POP(HciPacketFifo, timeout, process_txrx_poll);
 8007204:	4b06      	ldr	r3, [pc, #24]	; (8007220 <mx_wifi_hci_recv+0x24>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a06      	ldr	r2, [pc, #24]	; (8007224 <mx_wifi_hci_recv+0x28>)
 800720a:	6879      	ldr	r1, [r7, #4]
 800720c:	4618      	mov	r0, r3
 800720e:	f7ff ff53 	bl	80070b8 <noos_fifo_pop>
 8007212:	60f8      	str	r0, [r7, #12]
#endif /* 0 */

    MX_STAT(out_fifo);
  }

  return nbuf;
 8007214:	68fb      	ldr	r3, [r7, #12]
}
 8007216:	4618      	mov	r0, r3
 8007218:	3710      	adds	r7, #16
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}
 800721e:	bf00      	nop
 8007220:	20002c10 	.word	0x20002c10
 8007224:	0800988d 	.word	0x0800988d

08007228 <mx_wifi_hci_free>:


void mx_wifi_hci_free(mx_buf_t *nbuf)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b082      	sub	sp, #8
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
  if (NULL != nbuf)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d002      	beq.n	800723c <mx_wifi_hci_free+0x14>
  {
    (void) MX_NET_BUFFER_FREE(nbuf);
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f00d fdea 	bl	8014e10 <free>

    MX_STAT(free);
  }
}
 800723c:	bf00      	nop
 800723e:	3708      	adds	r7, #8
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}

08007244 <mx_wifi_hci_input>:

/**
  * @brief LOW LEVEL INTERFACE
  */
void mx_wifi_hci_input(mx_buf_t *netbuf)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b084      	sub	sp, #16
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
  if (NULL != netbuf)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d02a      	beq.n	80072a8 <mx_wifi_hci_input+0x64>
  {
    uint8_t *data = MX_NET_BUFFER_PAYLOAD(netbuf);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	685b      	ldr	r3, [r3, #4]
 8007256:	3308      	adds	r3, #8
 8007258:	687a      	ldr	r2, [r7, #4]
 800725a:	4413      	add	r3, r2
 800725c:	60fb      	str	r3, [r7, #12]
    uint32_t len  = MX_NET_BUFFER_GET_PAYLOAD_SIZE(netbuf);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	60bb      	str	r3, [r7, #8]
    {
      DEBUG_LOG("%02" PRIx32 " ", (uint32_t)data[i]);
    }
#endif /* 0 */

    if ((NULL != data) && (len > 0))
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d01e      	beq.n	80072a8 <mx_wifi_hci_input+0x64>
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d01b      	beq.n	80072a8 <mx_wifi_hci_input+0x64>
    {
      if (mx_wifi_hci_pkt_verify(data, len))
 8007270:	68b9      	ldr	r1, [r7, #8]
 8007272:	68f8      	ldr	r0, [r7, #12]
 8007274:	f7ff ff6d 	bl	8007152 <mx_wifi_hci_pkt_verify>
 8007278:	4603      	mov	r3, r0
 800727a:	2b00      	cmp	r3, #0
 800727c:	d011      	beq.n	80072a2 <mx_wifi_hci_input+0x5e>
      {
        if (FIFO_OK != FIFO_PUSH(HciPacketFifo, netbuf, WAIT_FOREVER, NULL))
 800727e:	4b0c      	ldr	r3, [pc, #48]	; (80072b0 <mx_wifi_hci_input+0x6c>)
 8007280:	6818      	ldr	r0, [r3, #0]
 8007282:	2300      	movs	r3, #0
 8007284:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007288:	6879      	ldr	r1, [r7, #4]
 800728a:	f7ff fec7 	bl	800701c <noos_fifo_push>
 800728e:	4603      	mov	r3, r0
 8007290:	2b00      	cmp	r3, #0
 8007292:	d009      	beq.n	80072a8 <mx_wifi_hci_input+0x64>
        {
          DEBUG_ERROR("push tcl input queue err!\n");
 8007294:	4807      	ldr	r0, [pc, #28]	; (80072b4 <mx_wifi_hci_input+0x70>)
 8007296:	f00f fbbb 	bl	8016a10 <puts>
          MX_NET_BUFFER_FREE(netbuf);
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f00d fdb8 	bl	8014e10 <free>

        MX_STAT(free);
      }
    }
  }
}
 80072a0:	e002      	b.n	80072a8 <mx_wifi_hci_input+0x64>
        MX_NET_BUFFER_FREE(netbuf);
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f00d fdb4 	bl	8014e10 <free>
}
 80072a8:	bf00      	nop
 80072aa:	3710      	adds	r7, #16
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd80      	pop	{r7, pc}
 80072b0:	20002c10 	.word	0x20002c10
 80072b4:	0801a728 	.word	0x0801a728

080072b8 <byte_pointer_add_signed_offset>:
static uint16_t mpic_get_api_id(const uint8_t Buffer[]);
static void mipc_event(mx_buf_t *netbuf);


static uint8_t *byte_pointer_add_signed_offset(uint8_t *BytePointer, int32_t Offset)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b083      	sub	sp, #12
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
 80072c0:	6039      	str	r1, [r7, #0]
  return BytePointer + Offset;
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	687a      	ldr	r2, [r7, #4]
 80072c6:	4413      	add	r3, r2
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	370c      	adds	r7, #12
 80072cc:	46bd      	mov	sp, r7
 80072ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d2:	4770      	bx	lr

080072d4 <get_new_req_id>:


/* unique sequence number */
static uint32_t get_new_req_id(void)
{
 80072d4:	b480      	push	{r7}
 80072d6:	af00      	add	r7, sp, #0
  static uint32_t id = 1;
  return id++;
 80072d8:	4b04      	ldr	r3, [pc, #16]	; (80072ec <get_new_req_id+0x18>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	1c5a      	adds	r2, r3, #1
 80072de:	4903      	ldr	r1, [pc, #12]	; (80072ec <get_new_req_id+0x18>)
 80072e0:	600a      	str	r2, [r1, #0]
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	46bd      	mov	sp, r7
 80072e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ea:	4770      	bx	lr
 80072ec:	200000ec 	.word	0x200000ec

080072f0 <mpic_get_req_id>:


static uint32_t mpic_get_req_id(const uint8_t Buffer[])
{
 80072f0:	b480      	push	{r7}
 80072f2:	b083      	sub	sp, #12
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
  return *((const uint32_t *) &Buffer[MIPC_PKT_REQ_ID_OFFSET]);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	370c      	adds	r7, #12
 8007300:	46bd      	mov	sp, r7
 8007302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007306:	4770      	bx	lr

08007308 <mpic_get_api_id>:


static uint16_t mpic_get_api_id(const uint8_t Buffer[])
{
 8007308:	b480      	push	{r7}
 800730a:	b083      	sub	sp, #12
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
  return *((const uint16_t *) &Buffer[MIPC_PKT_API_ID_OFFSET]);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	3304      	adds	r3, #4
 8007314:	881b      	ldrh	r3, [r3, #0]
}
 8007316:	4618      	mov	r0, r3
 8007318:	370c      	adds	r7, #12
 800731a:	46bd      	mov	sp, r7
 800731c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007320:	4770      	bx	lr
	...

08007324 <mipc_event>:


static void mipc_event(mx_buf_t *netbuf)
{
 8007324:	b590      	push	{r4, r7, lr}
 8007326:	b08b      	sub	sp, #44	; 0x2c
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
    /* WiFi */
    {MIPC_API_WIFI_STATUS_EVENT,        mapi_wifi_status_event_callback},
    {MIPC_API_WIFI_BYPASS_INPUT_EVENT,  mapi_wifi_netlink_input_callback}
  };

  if (NULL != netbuf)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2b00      	cmp	r3, #0
 8007330:	f000 8098 	beq.w	8007464 <mipc_event+0x140>
  {
    uint8_t *const buffer_in = MX_NET_BUFFER_PAYLOAD(netbuf);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	3308      	adds	r3, #8
 800733a:	687a      	ldr	r2, [r7, #4]
 800733c:	4413      	add	r3, r2
 800733e:	623b      	str	r3, [r7, #32]
    const uint32_t buffer_in_size = MX_NET_BUFFER_GET_PAYLOAD_SIZE(netbuf);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	61fb      	str	r3, [r7, #28]

    if ((NULL != buffer_in) && (buffer_in_size >= MIPC_PKT_MIN_SIZE))
 8007346:	6a3b      	ldr	r3, [r7, #32]
 8007348:	2b00      	cmp	r3, #0
 800734a:	f000 8086 	beq.w	800745a <mipc_event+0x136>
 800734e:	69fb      	ldr	r3, [r7, #28]
 8007350:	2b05      	cmp	r3, #5
 8007352:	f240 8082 	bls.w	800745a <mipc_event+0x136>
    {
      const uint32_t req_id = mpic_get_req_id(buffer_in);
 8007356:	6a38      	ldr	r0, [r7, #32]
 8007358:	f7ff ffca 	bl	80072f0 <mpic_get_req_id>
 800735c:	61b8      	str	r0, [r7, #24]
      const uint16_t api_id = mpic_get_api_id(buffer_in);
 800735e:	6a38      	ldr	r0, [r7, #32]
 8007360:	f7ff ffd2 	bl	8007308 <mpic_get_api_id>
 8007364:	4603      	mov	r3, r0
 8007366:	82fb      	strh	r3, [r7, #22]

      DEBUG_LOG("%-15s(): req_id: 0x%08" PRIx32 ", api_id: 0x%04" PRIx32 "\n",
                __FUNCTION__, req_id, (uint32_t)api_id);

      if ((0 == (api_id & MIPC_API_EVENT_BASE)) && (MIPC_REQ_ID_NONE != req_id))
 8007368:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800736c:	2b00      	cmp	r3, #0
 800736e:	db47      	blt.n	8007400 <mipc_event+0xdc>
 8007370:	69bb      	ldr	r3, [r7, #24]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d044      	beq.n	8007400 <mipc_event+0xdc>
      {
        /* The command response must match pending req id. */
        if (PendingRequest.req_id == req_id)
 8007376:	4b3d      	ldr	r3, [pc, #244]	; (800746c <mipc_event+0x148>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	69ba      	ldr	r2, [r7, #24]
 800737c:	429a      	cmp	r2, r3
 800737e:	d13b      	bne.n	80073f8 <mipc_event+0xd4>
        {
          /* return params */
          if ((PendingRequest.rbuffer_size != NULL) && (*PendingRequest.rbuffer_size > 0) &&
 8007380:	4b3a      	ldr	r3, [pc, #232]	; (800746c <mipc_event+0x148>)
 8007382:	689b      	ldr	r3, [r3, #8]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d029      	beq.n	80073dc <mipc_event+0xb8>
 8007388:	4b38      	ldr	r3, [pc, #224]	; (800746c <mipc_event+0x148>)
 800738a:	689b      	ldr	r3, [r3, #8]
 800738c:	881b      	ldrh	r3, [r3, #0]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d024      	beq.n	80073dc <mipc_event+0xb8>
              (NULL != PendingRequest.rbuffer))
 8007392:	4b36      	ldr	r3, [pc, #216]	; (800746c <mipc_event+0x148>)
 8007394:	68db      	ldr	r3, [r3, #12]
          if ((PendingRequest.rbuffer_size != NULL) && (*PendingRequest.rbuffer_size > 0) &&
 8007396:	2b00      	cmp	r3, #0
 8007398:	d020      	beq.n	80073dc <mipc_event+0xb8>
          {
            *(PendingRequest.rbuffer_size) = *PendingRequest.rbuffer_size < (buffer_in_size - MIPC_PKT_MIN_SIZE) ? \
 800739a:	4b34      	ldr	r3, [pc, #208]	; (800746c <mipc_event+0x148>)
 800739c:	689b      	ldr	r3, [r3, #8]
 800739e:	881b      	ldrh	r3, [r3, #0]
 80073a0:	461a      	mov	r2, r3
 80073a2:	69fb      	ldr	r3, [r7, #28]
 80073a4:	3b06      	subs	r3, #6
 80073a6:	429a      	cmp	r2, r3
 80073a8:	d203      	bcs.n	80073b2 <mipc_event+0x8e>
                                             *PendingRequest.rbuffer_size : (uint16_t)(buffer_in_size - MIPC_PKT_MIN_SIZE);
 80073aa:	4b30      	ldr	r3, [pc, #192]	; (800746c <mipc_event+0x148>)
 80073ac:	689b      	ldr	r3, [r3, #8]
            *(PendingRequest.rbuffer_size) = *PendingRequest.rbuffer_size < (buffer_in_size - MIPC_PKT_MIN_SIZE) ? \
 80073ae:	881b      	ldrh	r3, [r3, #0]
 80073b0:	e003      	b.n	80073ba <mipc_event+0x96>
                                             *PendingRequest.rbuffer_size : (uint16_t)(buffer_in_size - MIPC_PKT_MIN_SIZE);
 80073b2:	69fb      	ldr	r3, [r7, #28]
 80073b4:	b29b      	uxth	r3, r3
            *(PendingRequest.rbuffer_size) = *PendingRequest.rbuffer_size < (buffer_in_size - MIPC_PKT_MIN_SIZE) ? \
 80073b6:	3b06      	subs	r3, #6
 80073b8:	b29b      	uxth	r3, r3
 80073ba:	4a2c      	ldr	r2, [pc, #176]	; (800746c <mipc_event+0x148>)
 80073bc:	6892      	ldr	r2, [r2, #8]
 80073be:	8013      	strh	r3, [r2, #0]
            (void)memcpy(PendingRequest.rbuffer, byte_pointer_add_signed_offset(buffer_in, MIPC_PKT_PARAMS_OFFSET),
 80073c0:	4b2a      	ldr	r3, [pc, #168]	; (800746c <mipc_event+0x148>)
 80073c2:	68dc      	ldr	r4, [r3, #12]
 80073c4:	2106      	movs	r1, #6
 80073c6:	6a38      	ldr	r0, [r7, #32]
 80073c8:	f7ff ff76 	bl	80072b8 <byte_pointer_add_signed_offset>
 80073cc:	4601      	mov	r1, r0
                         *PendingRequest.rbuffer_size);
 80073ce:	4b27      	ldr	r3, [pc, #156]	; (800746c <mipc_event+0x148>)
 80073d0:	689b      	ldr	r3, [r3, #8]
 80073d2:	881b      	ldrh	r3, [r3, #0]
            (void)memcpy(PendingRequest.rbuffer, byte_pointer_add_signed_offset(buffer_in, MIPC_PKT_PARAMS_OFFSET),
 80073d4:	461a      	mov	r2, r3
 80073d6:	4620      	mov	r0, r4
 80073d8:	f00f fc3f 	bl	8016c5a <memcpy>
          }
          /* printf("Signal for %d\n",pending_request.req_id); */
          PendingRequest.req_id = MIPC_REQ_ID_RESET_VAL;
 80073dc:	4b23      	ldr	r3, [pc, #140]	; (800746c <mipc_event+0x148>)
 80073de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80073e2:	601a      	str	r2, [r3, #0]
          if (SEM_OK != SEM_SIGNAL(PendingRequest.resp_flag))
 80073e4:	4822      	ldr	r0, [pc, #136]	; (8007470 <mipc_event+0x14c>)
 80073e6:	f7ff fd75 	bl	8006ed4 <noos_sem_signal>
 80073ea:	4603      	mov	r3, r0
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d003      	beq.n	80073f8 <mipc_event+0xd4>
          {
            DEBUG_ERROR("Failed to signal command response\n");
 80073f0:	4820      	ldr	r0, [pc, #128]	; (8007474 <mipc_event+0x150>)
 80073f2:	f00f fb0d 	bl	8016a10 <puts>
            MX_ASSERT(false);
 80073f6:	e7fe      	b.n	80073f6 <mipc_event+0xd2>
        else
        {
          DEBUG_LOG("response req_id: 0x%08"PRIx32" not match pending req_id: 0x%08" PRIx32 "!\n",
                    req_id, PendingRequest.req_id);
        }
        mx_wifi_hci_free(netbuf);
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f7ff ff15 	bl	8007228 <mx_wifi_hci_free>
    {
 80073fe:	e030      	b.n	8007462 <mipc_event+0x13e>
      }
      else /* event callback */
      {
        const uint32_t event_table_count = sizeof(event_table) / sizeof(event_table[0]);
 8007400:	2304      	movs	r3, #4
 8007402:	613b      	str	r3, [r7, #16]
        uint32_t i;

        for (i = 0; i < event_table_count; i++)
 8007404:	2300      	movs	r3, #0
 8007406:	627b      	str	r3, [r7, #36]	; 0x24
 8007408:	e016      	b.n	8007438 <mipc_event+0x114>
        {
          if (event_table[i].api_id == api_id)
 800740a:	4a1b      	ldr	r2, [pc, #108]	; (8007478 <mipc_event+0x154>)
 800740c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800740e:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 8007412:	8afa      	ldrh	r2, [r7, #22]
 8007414:	429a      	cmp	r2, r3
 8007416:	d10c      	bne.n	8007432 <mipc_event+0x10e>
          {
            const event_callback_t callback = event_table[i].callback;
 8007418:	4a17      	ldr	r2, [pc, #92]	; (8007478 <mipc_event+0x154>)
 800741a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800741c:	00db      	lsls	r3, r3, #3
 800741e:	4413      	add	r3, r2
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	60fb      	str	r3, [r7, #12]
            if (NULL != callback)
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d003      	beq.n	8007432 <mipc_event+0x10e>
            {
              /* DEBUG_LOG("callback with %p\n", buffer_in); */
              callback(netbuf);
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	4798      	blx	r3
              break;
 8007430:	e006      	b.n	8007440 <mipc_event+0x11c>
        for (i = 0; i < event_table_count; i++)
 8007432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007434:	3301      	adds	r3, #1
 8007436:	627b      	str	r3, [r7, #36]	; 0x24
 8007438:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	429a      	cmp	r2, r3
 800743e:	d3e4      	bcc.n	800740a <mipc_event+0xe6>
            }
          }
        }
        if (i == event_table_count)
 8007440:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007442:	693b      	ldr	r3, [r7, #16]
 8007444:	429a      	cmp	r2, r3
 8007446:	d10c      	bne.n	8007462 <mipc_event+0x13e>
        {
          DEBUG_ERROR("Unknown event: 0x%04" PRIx32 "!\n", (uint32_t)api_id);
 8007448:	8afb      	ldrh	r3, [r7, #22]
 800744a:	4619      	mov	r1, r3
 800744c:	480b      	ldr	r0, [pc, #44]	; (800747c <mipc_event+0x158>)
 800744e:	f00f fa71 	bl	8016934 <iprintf>
          mx_wifi_hci_free(netbuf);
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f7ff fee8 	bl	8007228 <mx_wifi_hci_free>
    {
 8007458:	e003      	b.n	8007462 <mipc_event+0x13e>
      }
    }
    else
    {
      DEBUG_LOG("Unknown buffer content\n");
      mx_wifi_hci_free(netbuf);
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f7ff fee4 	bl	8007228 <mx_wifi_hci_free>
    }
  }
}
 8007460:	e000      	b.n	8007464 <mipc_event+0x140>
    {
 8007462:	bf00      	nop
}
 8007464:	bf00      	nop
 8007466:	372c      	adds	r7, #44	; 0x2c
 8007468:	46bd      	mov	sp, r7
 800746a:	bd90      	pop	{r4, r7, pc}
 800746c:	20002c14 	.word	0x20002c14
 8007470:	20002c18 	.word	0x20002c18
 8007474:	0801a744 	.word	0x0801a744
 8007478:	0801ccbc 	.word	0x0801ccbc
 800747c:	0801a768 	.word	0x0801a768

08007480 <mipc_init>:
/*******************************************************************************
  * IPC API implementations for mx_wifi over HCI
  ******************************************************************************/

int32_t mipc_init(mipc_send_func_t ipc_send)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b084      	sub	sp, #16
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  int32_t ret;

  PendingRequest.req_id = MIPC_REQ_ID_RESET_VAL;
 8007488:	4b07      	ldr	r3, [pc, #28]	; (80074a8 <mipc_init+0x28>)
 800748a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800748e:	601a      	str	r2, [r3, #0]
  SEM_INIT(PendingRequest.resp_flag, 1);
 8007490:	4b05      	ldr	r3, [pc, #20]	; (80074a8 <mipc_init+0x28>)
 8007492:	2200      	movs	r2, #0
 8007494:	605a      	str	r2, [r3, #4]

  ret = mx_wifi_hci_init(ipc_send);
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f7ff fe68 	bl	800716c <mx_wifi_hci_init>
 800749c:	60f8      	str	r0, [r7, #12]

  return ret;
 800749e:	68fb      	ldr	r3, [r7, #12]
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	3710      	adds	r7, #16
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}
 80074a8:	20002c14 	.word	0x20002c14

080074ac <mipc_deinit>:


int32_t mipc_deinit(void)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b082      	sub	sp, #8
 80074b0:	af00      	add	r7, sp, #0
  int32_t ret;

  SEM_DEINIT(PendingRequest.resp_flag);

  ret = mx_wifi_hci_deinit();
 80074b2:	f7ff fe6f 	bl	8007194 <mx_wifi_hci_deinit>
 80074b6:	6078      	str	r0, [r7, #4]

  return ret;
 80074b8:	687b      	ldr	r3, [r7, #4]
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	3708      	adds	r7, #8
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}
	...

080074c4 <mipc_request>:

int32_t mipc_request(uint16_t api_id,
                     uint8_t *cparams, uint16_t cparams_size,
                     uint8_t *rbuffer, uint16_t *rbuffer_size,
                     uint32_t timeout_ms)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b088      	sub	sp, #32
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	60b9      	str	r1, [r7, #8]
 80074cc:	607b      	str	r3, [r7, #4]
 80074ce:	4603      	mov	r3, r0
 80074d0:	81fb      	strh	r3, [r7, #14]
 80074d2:	4613      	mov	r3, r2
 80074d4:	81bb      	strh	r3, [r7, #12]
  int32_t ret = MIPC_CODE_ERROR;
 80074d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80074da:	61fb      	str	r3, [r7, #28]
  uint8_t *cbuf;
  bool copy_buffer = true;
 80074dc:	2301      	movs	r3, #1
 80074de:	75fb      	strb	r3, [r7, #23]

  LOCK(wifi_obj_get()->lockcmd);
 80074e0:	f002 fba0 	bl	8009c24 <wifi_obj_get>
 80074e4:	4603      	mov	r3, r0
 80074e6:	f893 3610 	ldrb.w	r3, [r3, #1552]	; 0x610
 80074ea:	b2db      	uxtb	r3, r3
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d1f7      	bne.n	80074e0 <mipc_request+0x1c>
 80074f0:	f002 fb98 	bl	8009c24 <wifi_obj_get>
 80074f4:	4603      	mov	r3, r0
 80074f6:	2201      	movs	r2, #1
 80074f8:	f883 2610 	strb.w	r2, [r3, #1552]	; 0x610

  /* DEBUG_LOG("\n%s()>  %" PRIu32 "\n", __FUNCTION__, (uint32_t)cparams_size); */

  if (cparams_size <= MX_WIFI_IPC_PAYLOAD_SIZE)
 80074fc:	89bb      	ldrh	r3, [r7, #12]
 80074fe:	f640 12be 	movw	r2, #2494	; 0x9be
 8007502:	4293      	cmp	r3, r2
 8007504:	d873      	bhi.n	80075ee <mipc_request+0x12a>
  {
    /* Create the command data. */
    const uint16_t cbuf_size = MIPC_PKT_REQ_ID_SIZE + MIPC_PKT_API_ID_SIZE + cparams_size;
 8007506:	89bb      	ldrh	r3, [r7, #12]
 8007508:	3306      	adds	r3, #6
 800750a:	82bb      	strh	r3, [r7, #20]

#if MX_WIFI_TX_BUFFER_NO_COPY
    if (api_id == MIPC_API_WIFI_BYPASS_OUT_CMD)
 800750c:	89fb      	ldrh	r3, [r7, #14]
 800750e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8007512:	d108      	bne.n	8007526 <mipc_request+0x62>
    {
      cbuf = byte_pointer_add_signed_offset(cparams, - (MIPC_PKT_REQ_ID_SIZE + MIPC_PKT_API_ID_SIZE));
 8007514:	f06f 0105 	mvn.w	r1, #5
 8007518:	68b8      	ldr	r0, [r7, #8]
 800751a:	f7ff fecd 	bl	80072b8 <byte_pointer_add_signed_offset>
 800751e:	61b8      	str	r0, [r7, #24]
      copy_buffer = false;
 8007520:	2300      	movs	r3, #0
 8007522:	75fb      	strb	r3, [r7, #23]
 8007524:	e005      	b.n	8007532 <mipc_request+0x6e>
    else
#endif /* MX_WIFI_TX_BUFFER_NO_COPY */
    {
      DEBUG_LOG("\n%-15s(): Allocate %" PRIu32 " bytes\n", __FUNCTION__, (uint32_t)cbuf_size);

      cbuf = (uint8_t *)MX_WIFI_MALLOC(cbuf_size);
 8007526:	8abb      	ldrh	r3, [r7, #20]
 8007528:	4618      	mov	r0, r3
 800752a:	f00d fc69 	bl	8014e00 <malloc>
 800752e:	4603      	mov	r3, r0
 8007530:	61bb      	str	r3, [r7, #24]

      MX_STAT(alloc);
    }

    if (NULL != cbuf)
 8007532:	69bb      	ldr	r3, [r7, #24]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d05a      	beq.n	80075ee <mipc_request+0x12a>
    {
      /* Get an unique identifier. */
      const uint32_t req_id = get_new_req_id();
 8007538:	f7ff fecc 	bl	80072d4 <get_new_req_id>
 800753c:	4603      	mov	r3, r0
 800753e:	613b      	str	r3, [r7, #16]

      /* Copy the protocol parameter to the head part of the buffer. */
      (void)memcpy(byte_pointer_add_signed_offset(cbuf, MIPC_PKT_REQ_ID_OFFSET), &req_id, sizeof(req_id));
 8007540:	2100      	movs	r1, #0
 8007542:	69b8      	ldr	r0, [r7, #24]
 8007544:	f7ff feb8 	bl	80072b8 <byte_pointer_add_signed_offset>
 8007548:	4602      	mov	r2, r0
 800754a:	693b      	ldr	r3, [r7, #16]
 800754c:	6013      	str	r3, [r2, #0]
      (void)memcpy(byte_pointer_add_signed_offset(cbuf, MIPC_PKT_API_ID_OFFSET), &api_id, sizeof(api_id));
 800754e:	2104      	movs	r1, #4
 8007550:	69b8      	ldr	r0, [r7, #24]
 8007552:	f7ff feb1 	bl	80072b8 <byte_pointer_add_signed_offset>
 8007556:	4602      	mov	r2, r0
 8007558:	89fb      	ldrh	r3, [r7, #14]
 800755a:	8013      	strh	r3, [r2, #0]

      if ((true == copy_buffer) && (cparams_size > 0))
 800755c:	7dfb      	ldrb	r3, [r7, #23]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d00b      	beq.n	800757a <mipc_request+0xb6>
 8007562:	89bb      	ldrh	r3, [r7, #12]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d008      	beq.n	800757a <mipc_request+0xb6>
      {
        (void)memcpy(byte_pointer_add_signed_offset(cbuf, MIPC_PKT_PARAMS_OFFSET), cparams, cparams_size);
 8007568:	2106      	movs	r1, #6
 800756a:	69b8      	ldr	r0, [r7, #24]
 800756c:	f7ff fea4 	bl	80072b8 <byte_pointer_add_signed_offset>
 8007570:	89bb      	ldrh	r3, [r7, #12]
 8007572:	461a      	mov	r2, r3
 8007574:	68b9      	ldr	r1, [r7, #8]
 8007576:	f00f fb70 	bl	8016c5a <memcpy>
      }

      /* A single pending request due to LOCK usage on command. */
      if (PendingRequest.req_id != MIPC_REQ_ID_RESET_VAL)
 800757a:	4b22      	ldr	r3, [pc, #136]	; (8007604 <mipc_request+0x140>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007582:	d000      	beq.n	8007586 <mipc_request+0xc2>
      {
        DEBUG_LOG("Error req_id must be 0xffffffff here %" PRIu32 "\n", PendingRequest.req_id);
        MX_ASSERT(false);
 8007584:	e7fe      	b.n	8007584 <mipc_request+0xc0>
      }

      PendingRequest.req_id = req_id;
 8007586:	693b      	ldr	r3, [r7, #16]
 8007588:	4a1e      	ldr	r2, [pc, #120]	; (8007604 <mipc_request+0x140>)
 800758a:	6013      	str	r3, [r2, #0]
      PendingRequest.rbuffer = rbuffer;
 800758c:	4a1d      	ldr	r2, [pc, #116]	; (8007604 <mipc_request+0x140>)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	60d3      	str	r3, [r2, #12]
      PendingRequest.rbuffer_size = rbuffer_size;
 8007592:	4a1c      	ldr	r2, [pc, #112]	; (8007604 <mipc_request+0x140>)
 8007594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007596:	6093      	str	r3, [r2, #8]
      /* printf("%d push %d\n",iter++,cbuf_size); */

      /* Send the command. */
      DEBUG_LOG("%-15s(): req_id: 0x%08" PRIx32 " : %" PRIu32 "\n", __FUNCTION__, req_id, (uint32_t)cbuf_size);

      ret = mx_wifi_hci_send(cbuf, cbuf_size);
 8007598:	8abb      	ldrh	r3, [r7, #20]
 800759a:	4619      	mov	r1, r3
 800759c:	69b8      	ldr	r0, [r7, #24]
 800759e:	f7ff fe05 	bl	80071ac <mx_wifi_hci_send>
 80075a2:	61f8      	str	r0, [r7, #28]
      if (ret == 0)
 80075a4:	69fb      	ldr	r3, [r7, #28]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d117      	bne.n	80075da <mipc_request+0x116>
      {
        /* Wait for the command answer. */
        if (SEM_WAIT(PendingRequest.resp_flag, timeout_ms, mipc_poll) != SEM_OK)
 80075aa:	4a17      	ldr	r2, [pc, #92]	; (8007608 <mipc_request+0x144>)
 80075ac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80075ae:	4817      	ldr	r0, [pc, #92]	; (800760c <mipc_request+0x148>)
 80075b0:	f7ff fca9 	bl	8006f06 <noos_sem_wait>
 80075b4:	4603      	mov	r3, r0
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d013      	beq.n	80075e2 <mipc_request+0x11e>
        {
          DEBUG_ERROR("Error: command 0x%04" PRIx32 " timeout(%" PRIu32 " ms) waiting answer %" PRIu32 "\n",
 80075ba:	89fb      	ldrh	r3, [r7, #14]
 80075bc:	4619      	mov	r1, r3
 80075be:	4b11      	ldr	r3, [pc, #68]	; (8007604 <mipc_request+0x140>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80075c4:	4812      	ldr	r0, [pc, #72]	; (8007610 <mipc_request+0x14c>)
 80075c6:	f00f f9b5 	bl	8016934 <iprintf>
                      (uint32_t)api_id, timeout_ms, PendingRequest.req_id);
          PendingRequest.req_id = MIPC_REQ_ID_RESET_VAL;
 80075ca:	4b0e      	ldr	r3, [pc, #56]	; (8007604 <mipc_request+0x140>)
 80075cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80075d0:	601a      	str	r2, [r3, #0]
          ret = MIPC_CODE_ERROR;
 80075d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80075d6:	61fb      	str	r3, [r7, #28]
 80075d8:	e003      	b.n	80075e2 <mipc_request+0x11e>
        }
      }
      else
      {
        DEBUG_ERROR("Failed to send command to HCI\n");
 80075da:	480e      	ldr	r0, [pc, #56]	; (8007614 <mipc_request+0x150>)
 80075dc:	f00f fa18 	bl	8016a10 <puts>
        MX_ASSERT(false);
 80075e0:	e7fe      	b.n	80075e0 <mipc_request+0x11c>
      }

      DEBUG_LOG("%-15s()< req_id: 0x%08" PRIx32 " done (%" PRId32 ")\n\n", __FUNCTION__, req_id, ret);

      if (true == copy_buffer)
 80075e2:	7dfb      	ldrb	r3, [r7, #23]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d002      	beq.n	80075ee <mipc_request+0x12a>
      {
        MX_WIFI_FREE(cbuf);
 80075e8:	69b8      	ldr	r0, [r7, #24]
 80075ea:	f00d fc11 	bl	8014e10 <free>
        MX_STAT(free);
      }
    }
  }

  UNLOCK(wifi_obj_get()->lockcmd);
 80075ee:	f002 fb19 	bl	8009c24 <wifi_obj_get>
 80075f2:	4603      	mov	r3, r0
 80075f4:	2200      	movs	r2, #0
 80075f6:	f883 2610 	strb.w	r2, [r3, #1552]	; 0x610

  return ret;
 80075fa:	69fb      	ldr	r3, [r7, #28]
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3720      	adds	r7, #32
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}
 8007604:	20002c14 	.word	0x20002c14
 8007608:	08007619 	.word	0x08007619
 800760c:	20002c18 	.word	0x20002c18
 8007610:	0801a784 	.word	0x0801a784
 8007614:	0801a7c0 	.word	0x0801a7c0

08007618 <mipc_poll>:


void mipc_poll(uint32_t timeout)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b084      	sub	sp, #16
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  mx_buf_t *nbuf;

  /* Process the received data inside the RX buffer. */
  nbuf = mx_wifi_hci_recv(timeout);
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f7ff fdeb 	bl	80071fc <mx_wifi_hci_recv>
 8007626:	60f8      	str	r0, [r7, #12]

  if (NULL != nbuf)
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d00c      	beq.n	8007648 <mipc_poll+0x30>
  {
    const uint32_t len = MX_NET_BUFFER_GET_PAYLOAD_SIZE(nbuf);
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	60bb      	str	r3, [r7, #8]

    DEBUG_LOG("%-15s(): %p HCI recv len %" PRIu32 "\n", __FUNCTION__, nbuf, len);

    if (len > 0U)
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d003      	beq.n	8007642 <mipc_poll+0x2a>
    {
      mipc_event(nbuf);
 800763a:	68f8      	ldr	r0, [r7, #12]
 800763c:	f7ff fe72 	bl	8007324 <mipc_event>
      MX_NET_BUFFER_FREE(nbuf);

      MX_STAT(free);
    }
  }
}
 8007640:	e002      	b.n	8007648 <mipc_poll+0x30>
      MX_NET_BUFFER_FREE(nbuf);
 8007642:	68f8      	ldr	r0, [r7, #12]
 8007644:	f00d fbe4 	bl	8014e10 <free>
}
 8007648:	bf00      	nop
 800764a:	3710      	adds	r7, #16
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}

08007650 <mapi_reboot_event_callback>:
  ******************************************************************************/

/* System */

void mapi_reboot_event_callback(mx_buf_t *mxbuff)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b082      	sub	sp, #8
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
  if (mxbuff != NULL)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d002      	beq.n	8007664 <mapi_reboot_event_callback+0x14>
  {
    mx_wifi_hci_free(mxbuff);
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f7ff fde2 	bl	8007228 <mx_wifi_hci_free>
  }
  DEBUG_LOG("\nEVENT: reboot done.\n");
}
 8007664:	bf00      	nop
 8007666:	3708      	adds	r7, #8
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}

0800766c <mapi_fota_status_event_callback>:


void mapi_fota_status_event_callback(mx_buf_t *nbuf)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b086      	sub	sp, #24
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
  if (NULL != nbuf)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d026      	beq.n	80076c8 <mapi_fota_status_event_callback+0x5c>
  {
    uint8_t *payload = MX_NET_BUFFER_PAYLOAD(nbuf);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	685b      	ldr	r3, [r3, #4]
 800767e:	3308      	adds	r3, #8
 8007680:	687a      	ldr	r2, [r7, #4]
 8007682:	4413      	add	r3, r2
 8007684:	617b      	str	r3, [r7, #20]
    if (NULL != payload)
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d01d      	beq.n	80076c8 <mapi_fota_status_event_callback+0x5c>
    {
      mx_wifi_fota_status_e status = *((mx_wifi_fota_status_e *)(byte_pointer_add_signed_offset(payload, MIPC_PKT_PARAMS_OFFSET)));
 800768c:	2106      	movs	r1, #6
 800768e:	6978      	ldr	r0, [r7, #20]
 8007690:	f7ff fe12 	bl	80072b8 <byte_pointer_add_signed_offset>
 8007694:	4603      	mov	r3, r0
 8007696:	781b      	ldrb	r3, [r3, #0]
 8007698:	74fb      	strb	r3, [r7, #19]

      DEBUG_LOG("\nEVENT: FOTA status: %02x\n", status);

      mx_wifi_hci_free(nbuf);
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f7ff fdc4 	bl	8007228 <mx_wifi_hci_free>

      {
        mx_wifi_fota_status_cb_t const status_cb = wifi_obj_get()->Runtime.fota_status_cb;
 80076a0:	f002 fac0 	bl	8009c24 <wifi_obj_get>
 80076a4:	4603      	mov	r3, r0
 80076a6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80076aa:	60fb      	str	r3, [r7, #12]
        const uint32_t cb_args = wifi_obj_get()->Runtime.fota_user_args;
 80076ac:	f002 faba 	bl	8009c24 <wifi_obj_get>
 80076b0:	4603      	mov	r3, r0
 80076b2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80076b6:	60bb      	str	r3, [r7, #8]
        if (NULL != status_cb)
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d004      	beq.n	80076c8 <mapi_fota_status_event_callback+0x5c>
        {
          status_cb(status, cb_args);
 80076be:	7cfa      	ldrb	r2, [r7, #19]
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	68b9      	ldr	r1, [r7, #8]
 80076c4:	4610      	mov	r0, r2
 80076c6:	4798      	blx	r3
        }
      }
    }
  }
}
 80076c8:	bf00      	nop
 80076ca:	3718      	adds	r7, #24
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd80      	pop	{r7, pc}

080076d0 <mapi_wifi_status_event_callback>:


/* WiFi */

void mapi_wifi_status_event_callback(mx_buf_t *netbuf)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b088      	sub	sp, #32
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
  uint8_t cate;
  mx_wifi_status_callback_t status_cb = NULL;
 80076d8:	2300      	movs	r3, #0
 80076da:	61bb      	str	r3, [r7, #24]
  void *cb_args = NULL;
 80076dc:	2300      	movs	r3, #0
 80076de:	617b      	str	r3, [r7, #20]

  if (NULL != netbuf)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d042      	beq.n	800776c <mapi_wifi_status_event_callback+0x9c>
  {
    uint8_t *payload = MX_NET_BUFFER_PAYLOAD(netbuf);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	685b      	ldr	r3, [r3, #4]
 80076ea:	3308      	adds	r3, #8
 80076ec:	687a      	ldr	r2, [r7, #4]
 80076ee:	4413      	add	r3, r2
 80076f0:	613b      	str	r3, [r7, #16]
    mwifi_status_t status = *((mwifi_status_t *)(byte_pointer_add_signed_offset(payload, MIPC_PKT_PARAMS_OFFSET)));
 80076f2:	2106      	movs	r1, #6
 80076f4:	6938      	ldr	r0, [r7, #16]
 80076f6:	f7ff fddf 	bl	80072b8 <byte_pointer_add_signed_offset>
 80076fa:	4603      	mov	r3, r0
 80076fc:	781b      	ldrb	r3, [r3, #0]
 80076fe:	73fb      	strb	r3, [r7, #15]

    DEBUG_LOG("\nEVENT: wifi status: %02x\n", status);

    mx_wifi_hci_free(netbuf);
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f7ff fd91 	bl	8007228 <mx_wifi_hci_free>

    switch (status)
 8007706:	7bfb      	ldrb	r3, [r7, #15]
 8007708:	2b03      	cmp	r3, #3
 800770a:	dc02      	bgt.n	8007712 <mapi_wifi_status_event_callback+0x42>
 800770c:	2b00      	cmp	r3, #0
 800770e:	dc04      	bgt.n	800771a <mapi_wifi_status_event_callback+0x4a>
 8007710:	e021      	b.n	8007756 <mapi_wifi_status_event_callback+0x86>
 8007712:	3b04      	subs	r3, #4
 8007714:	2b01      	cmp	r3, #1
 8007716:	d81e      	bhi.n	8007756 <mapi_wifi_status_event_callback+0x86>
 8007718:	e00e      	b.n	8007738 <mapi_wifi_status_event_callback+0x68>
    {
      case MWIFI_EVENT_STA_UP:
      case MWIFI_EVENT_STA_DOWN:
      case MWIFI_EVENT_STA_GOT_IP:
        cate = MC_STATION;
 800771a:	2301      	movs	r3, #1
 800771c:	77fb      	strb	r3, [r7, #31]
        status_cb = wifi_obj_get()->Runtime.status_cb[0];
 800771e:	f002 fa81 	bl	8009c24 <wifi_obj_get>
 8007722:	4603      	mov	r3, r0
 8007724:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8007728:	61bb      	str	r3, [r7, #24]
        cb_args = wifi_obj_get()->Runtime.callback_arg[0];
 800772a:	f002 fa7b 	bl	8009c24 <wifi_obj_get>
 800772e:	4603      	mov	r3, r0
 8007730:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8007734:	617b      	str	r3, [r7, #20]
        break;
 8007736:	e011      	b.n	800775c <mapi_wifi_status_event_callback+0x8c>

      case MWIFI_EVENT_AP_UP:
      case MWIFI_EVENT_AP_DOWN:
        cate = MC_SOFTAP;
 8007738:	2300      	movs	r3, #0
 800773a:	77fb      	strb	r3, [r7, #31]
        status_cb = wifi_obj_get()->Runtime.status_cb[1];
 800773c:	f002 fa72 	bl	8009c24 <wifi_obj_get>
 8007740:	4603      	mov	r3, r0
 8007742:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8007746:	61bb      	str	r3, [r7, #24]
        cb_args = wifi_obj_get()->Runtime.callback_arg[1];
 8007748:	f002 fa6c 	bl	8009c24 <wifi_obj_get>
 800774c:	4603      	mov	r3, r0
 800774e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007752:	617b      	str	r3, [r7, #20]
        break;
 8007754:	e002      	b.n	800775c <mapi_wifi_status_event_callback+0x8c>

      default:
        cate = MC_SOFTAP;
 8007756:	2300      	movs	r3, #0
 8007758:	77fb      	strb	r3, [r7, #31]
        MX_ASSERT(false);
 800775a:	e7fe      	b.n	800775a <mapi_wifi_status_event_callback+0x8a>
        /* break; */
    }

    if (NULL != status_cb)
 800775c:	69bb      	ldr	r3, [r7, #24]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d004      	beq.n	800776c <mapi_wifi_status_event_callback+0x9c>
    {
      status_cb(cate, status, cb_args);
 8007762:	7bf9      	ldrb	r1, [r7, #15]
 8007764:	7ff8      	ldrb	r0, [r7, #31]
 8007766:	69bb      	ldr	r3, [r7, #24]
 8007768:	697a      	ldr	r2, [r7, #20]
 800776a:	4798      	blx	r3
    }
  }
}
 800776c:	bf00      	nop
 800776e:	3720      	adds	r7, #32
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}

08007774 <mapi_wifi_netlink_input_callback>:


void mapi_wifi_netlink_input_callback(mx_buf_t *netbuf)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b086      	sub	sp, #24
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
  if (NULL != netbuf)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d02e      	beq.n	80077e0 <mapi_wifi_netlink_input_callback+0x6c>
  {
    uint8_t *const buffer_in = MX_NET_BUFFER_PAYLOAD(netbuf);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	685b      	ldr	r3, [r3, #4]
 8007786:	3308      	adds	r3, #8
 8007788:	687a      	ldr	r2, [r7, #4]
 800778a:	4413      	add	r3, r2
 800778c:	617b      	str	r3, [r7, #20]
    wifi_bypass_in_rparams_t *const in_rprarams = (wifi_bypass_in_rparams_t *)(byte_pointer_add_signed_offset(buffer_in, MIPC_PKT_PARAMS_OFFSET));
 800778e:	2106      	movs	r1, #6
 8007790:	6978      	ldr	r0, [r7, #20]
 8007792:	f7ff fd91 	bl	80072b8 <byte_pointer_add_signed_offset>
 8007796:	6138      	str	r0, [r7, #16]

    MX_STAT(callback);

    if ((NULL != wifi_obj_get()->Runtime.netlink_input_cb) && \
 8007798:	f002 fa44 	bl	8009c24 <wifi_obj_get>
 800779c:	4603      	mov	r3, r0
 800779e:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d019      	beq.n	80077da <mapi_wifi_netlink_input_callback+0x66>
        (in_rprarams->tot_len > 0))
 80077a6:	693b      	ldr	r3, [r7, #16]
 80077a8:	8a9b      	ldrh	r3, [r3, #20]
 80077aa:	b29b      	uxth	r3, r3
    if ((NULL != wifi_obj_get()->Runtime.netlink_input_cb) && \
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d014      	beq.n	80077da <mapi_wifi_netlink_input_callback+0x66>
    {
      uint32_t low_level_netif_idx = (uint32_t)in_rprarams->idx;
 80077b0:	693b      	ldr	r3, [r7, #16]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	60fb      	str	r3, [r7, #12]

      MX_NET_BUFFER_HIDE_HEADER(netbuf, MIPC_PKT_PARAMS_OFFSET + sizeof(wifi_bypass_in_rparams_t));
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	685b      	ldr	r3, [r3, #4]
 80077ba:	f103 021c 	add.w	r2, r3, #28
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	605a      	str	r2, [r3, #4]
      wifi_obj_get()->Runtime.netlink_input_cb(netbuf, (void *)&low_level_netif_idx);
 80077c2:	f002 fa2f 	bl	8009c24 <wifi_obj_get>
 80077c6:	4603      	mov	r3, r0
 80077c8:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80077cc:	f107 020c 	add.w	r2, r7, #12
 80077d0:	4611      	mov	r1, r2
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	4798      	blx	r3
    {
 80077d6:	bf00      	nop
      MX_NET_BUFFER_FREE(netbuf);

      MX_STAT(free);
    }
  }
}
 80077d8:	e002      	b.n	80077e0 <mapi_wifi_netlink_input_callback+0x6c>
      MX_NET_BUFFER_FREE(netbuf);
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f00d fb18 	bl	8014e10 <free>
}
 80077e0:	bf00      	nop
 80077e2:	3718      	adds	r7, #24
 80077e4:	46bd      	mov	sp, r7
 80077e6:	bd80      	pop	{r7, pc}

080077e8 <MX_WIFI_RegisterBusIO>:
                                       IO_Init_Func IO_Init,
                                       IO_DeInit_Func IO_DeInit,
                                       IO_Delay_Func IO_Delay,
                                       IO_Send_Func IO_Send,
                                       IO_Receive_Func IO_Receive)
{
 80077e8:	b480      	push	{r7}
 80077ea:	b087      	sub	sp, #28
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	60f8      	str	r0, [r7, #12]
 80077f0:	60b9      	str	r1, [r7, #8]
 80077f2:	607a      	str	r2, [r7, #4]
 80077f4:	603b      	str	r3, [r7, #0]
  MX_WIFI_STATUS_T rc;

  if ((NULL == Obj) || (NULL == IO_Init) || (NULL == IO_DeInit) || (NULL == IO_Send) || \
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d00e      	beq.n	800781a <MX_WIFI_RegisterBusIO+0x32>
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d00b      	beq.n	800781a <MX_WIFI_RegisterBusIO+0x32>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d008      	beq.n	800781a <MX_WIFI_RegisterBusIO+0x32>
 8007808:	6a3b      	ldr	r3, [r7, #32]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d005      	beq.n	800781a <MX_WIFI_RegisterBusIO+0x32>
 800780e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007810:	2b00      	cmp	r3, #0
 8007812:	d002      	beq.n	800781a <MX_WIFI_RegisterBusIO+0x32>
      (NULL == IO_Receive) || (NULL == IO_Delay))
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d102      	bne.n	8007820 <MX_WIFI_RegisterBusIO+0x38>
  {
    rc = MX_WIFI_STATUS_ERROR;
 800781a:	23ff      	movs	r3, #255	; 0xff
 800781c:	75fb      	strb	r3, [r7, #23]
 800781e:	e010      	b.n	8007842 <MX_WIFI_RegisterBusIO+0x5a>
  }
  else
  {
    Obj->fops.IO_Init = IO_Init;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	68ba      	ldr	r2, [r7, #8]
 8007824:	601a      	str	r2, [r3, #0]
    Obj->fops.IO_DeInit = IO_DeInit;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	687a      	ldr	r2, [r7, #4]
 800782a:	605a      	str	r2, [r3, #4]
    Obj->fops.IO_Send = IO_Send;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	6a3a      	ldr	r2, [r7, #32]
 8007830:	60da      	str	r2, [r3, #12]
    Obj->fops.IO_Receive = IO_Receive;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007836:	611a      	str	r2, [r3, #16]
    Obj->fops.IO_Delay = IO_Delay;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	683a      	ldr	r2, [r7, #0]
 800783c:	609a      	str	r2, [r3, #8]
    rc = MX_WIFI_STATUS_OK;
 800783e:	2300      	movs	r3, #0
 8007840:	75fb      	strb	r3, [r7, #23]
  }
  return rc;
 8007842:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007846:	4618      	mov	r0, r3
 8007848:	371c      	adds	r7, #28
 800784a:	46bd      	mov	sp, r7
 800784c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007850:	4770      	bx	lr

08007852 <MX_WIFI_HardResetModule>:


MX_WIFI_STATUS_T MX_WIFI_HardResetModule(MX_WIFIObject_t *Obj)
{
 8007852:	b580      	push	{r7, lr}
 8007854:	b084      	sub	sp, #16
 8007856:	af00      	add	r7, sp, #0
 8007858:	6078      	str	r0, [r7, #4]
  MX_WIFI_STATUS_T rc = MX_WIFI_STATUS_ERROR;
 800785a:	23ff      	movs	r3, #255	; 0xff
 800785c:	73fb      	strb	r3, [r7, #15]

  MX_STAT_INIT();

  if (NULL != Obj)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d00e      	beq.n	8007882 <MX_WIFI_HardResetModule+0x30>
  {
    /* reset Wi-Fi by reset pin */
    const int8_t ret = Obj->fops.IO_Init(MX_WIFI_RESET);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	2001      	movs	r0, #1
 800786a:	4798      	blx	r3
 800786c:	4603      	mov	r3, r0
 800786e:	73bb      	strb	r3, [r7, #14]
    if ((int8_t)0 == ret)
 8007870:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d102      	bne.n	800787e <MX_WIFI_HardResetModule+0x2c>
    {
      rc = MX_WIFI_STATUS_OK;
 8007878:	2300      	movs	r3, #0
 800787a:	73fb      	strb	r3, [r7, #15]
 800787c:	e001      	b.n	8007882 <MX_WIFI_HardResetModule+0x30>
    }
    else
    {
      rc = MX_WIFI_STATUS_ERROR;
 800787e:	23ff      	movs	r3, #255	; 0xff
 8007880:	73fb      	strb	r3, [r7, #15]
    }
  }

  return rc;
 8007882:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007886:	4618      	mov	r0, r3
 8007888:	3710      	adds	r7, #16
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}
	...

08007890 <MX_WIFI_Init>:
}
#endif /* MX_WIFI_BARE_OS_H */


MX_WIFI_STATUS_T MX_WIFI_Init(MX_WIFIObject_t *Obj)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b08e      	sub	sp, #56	; 0x38
 8007894:	af02      	add	r7, sp, #8
 8007896:	6078      	str	r0, [r7, #4]
  MX_WIFI_STATUS_T ret = MX_WIFI_STATUS_ERROR;
 8007898:	23ff      	movs	r3, #255	; 0xff
 800789a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  if (NULL == Obj)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d103      	bne.n	80078ac <MX_WIFI_Init+0x1c>
  {
    ret = MX_WIFI_STATUS_PARAM_ERROR;
 80078a4:	23fc      	movs	r3, #252	; 0xfc
 80078a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80078aa:	e0cf      	b.n	8007a4c <MX_WIFI_Init+0x1bc>
  }
  else
  {
    if (Obj->Runtime.interfaces == 0u)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f893 360e 	ldrb.w	r3, [r3, #1550]	; 0x60e
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	f040 80bf 	bne.w	8007a36 <MX_WIFI_Init+0x1a6>
    {
      LOCK_INIT(Obj->lockcmd);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2200      	movs	r2, #0
 80078bc:	f883 2610 	strb.w	r2, [r3, #1552]	; 0x610

      /* 0. Set command timeout. */
      Obj->Runtime.Timeout = MX_WIFI_CMD_TIMEOUT;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80078c6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

      /* 1. Initialize the WiFi low level IO (UART/SPI). */
      (void)(Obj->fops.IO_Init(MX_WIFI_INIT));
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	2000      	movs	r0, #0
 80078d0:	4798      	blx	r3
      {
        /* 2. Initialize the WiFi IPC. */
        if (MIPC_CODE_SUCCESS == mipc_init(Obj->fops.IO_Send))
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	68db      	ldr	r3, [r3, #12]
 80078d6:	4618      	mov	r0, r3
 80078d8:	f7ff fdd2 	bl	8007480 <mipc_init>
 80078dc:	4603      	mov	r3, r0
 80078de:	2b00      	cmp	r3, #0
 80078e0:	f040 80b4 	bne.w	8007a4c <MX_WIFI_Init+0x1bc>
                                       MX_WIFI_RECEIVED_THREAD_PRIORITY))
          {
            uint16_t rparams_size;

            /* 3. Get the version of the WiFi module firmware. */
            (void)MX_WIFI_MEMSET(Obj->SysInfo.FW_Rev, 0);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	3354      	adds	r3, #84	; 0x54
 80078e8:	2218      	movs	r2, #24
 80078ea:	2100      	movs	r1, #0
 80078ec:	4618      	mov	r0, r3
 80078ee:	f00f f8f5 	bl	8016adc <memset>
            rparams_size = (uint16_t)sizeof(Obj->SysInfo.FW_Rev);
 80078f2:	2318      	movs	r3, #24
 80078f4:	84fb      	strh	r3, [r7, #38]	; 0x26

            if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_SYS_VERSION_CMD,
                                                  NULL, 0,
                                                  Obj->SysInfo.FW_Rev, &rparams_size,
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f103 0254 	add.w	r2, r3, #84	; 0x54
            if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_SYS_VERSION_CMD,
 80078fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007900:	9301      	str	r3, [sp, #4]
 8007902:	f107 0326 	add.w	r3, r7, #38	; 0x26
 8007906:	9300      	str	r3, [sp, #0]
 8007908:	4613      	mov	r3, r2
 800790a:	2200      	movs	r2, #0
 800790c:	2100      	movs	r1, #0
 800790e:	2003      	movs	r0, #3
 8007910:	f7ff fdd8 	bl	80074c4 <mipc_request>
 8007914:	4603      	mov	r3, r0
 8007916:	2b00      	cmp	r3, #0
 8007918:	f040 8098 	bne.w	8007a4c <MX_WIFI_Init+0x1bc>
                                                  MX_WIFI_CMD_TIMEOUT))
            {
              /* Check if WiFi module firmware is correctly managed by the current version of the host driver. */
              {
                uint32_t firmware_rev[3] = {0};
 800791c:	f107 0318 	add.w	r3, r7, #24
 8007920:	2200      	movs	r2, #0
 8007922:	601a      	str	r2, [r3, #0]
 8007924:	605a      	str	r2, [r3, #4]
 8007926:	609a      	str	r2, [r3, #8]
                const uint32_t firmware_rev_required[3] = {2, 3, 4};
 8007928:	4a4b      	ldr	r2, [pc, #300]	; (8007a58 <MX_WIFI_Init+0x1c8>)
 800792a:	f107 030c 	add.w	r3, r7, #12
 800792e:	ca07      	ldmia	r2, {r0, r1, r2}
 8007930:	e883 0007 	stmia.w	r3, {r0, r1, r2}

                int status = sscanf((const char *)Obj->SysInfo.FW_Rev,
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f103 0054 	add.w	r0, r3, #84	; 0x54
 800793a:	f107 0318 	add.w	r3, r7, #24
 800793e:	1d19      	adds	r1, r3, #4
 8007940:	f107 0218 	add.w	r2, r7, #24
 8007944:	f107 0318 	add.w	r3, r7, #24
 8007948:	3308      	adds	r3, #8
 800794a:	9300      	str	r3, [sp, #0]
 800794c:	460b      	mov	r3, r1
 800794e:	4943      	ldr	r1, [pc, #268]	; (8007a5c <MX_WIFI_Init+0x1cc>)
 8007950:	f00d ffbe 	bl	80158d0 <siscanf>
 8007954:	62b8      	str	r0, [r7, #40]	; 0x28
                                    "V%" PRIu32 ".%" PRIu32 ".%" PRIu32 "", &firmware_rev[0], &firmware_rev[1], &firmware_rev[2]);
                if (status <= 0)
 8007956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007958:	2b00      	cmp	r3, #0
 800795a:	dc03      	bgt.n	8007964 <MX_WIFI_Init+0xd4>
                {
                  DEBUG_ERROR("ERROR: Unable to decode WiFi firmware version\n");
 800795c:	4840      	ldr	r0, [pc, #256]	; (8007a60 <MX_WIFI_Init+0x1d0>)
 800795e:	f00f f857 	bl	8016a10 <puts>
                  MX_ASSERT(false);
 8007962:	e7fe      	b.n	8007962 <MX_WIFI_Init+0xd2>
                }

                for (uint8_t i = 0; i < sizeof(firmware_rev) / sizeof(firmware_rev[0]); ++i)
 8007964:	2300      	movs	r3, #0
 8007966:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800796a:	e028      	b.n	80079be <MX_WIFI_Init+0x12e>
                {
                  if (firmware_rev[i] > firmware_rev_required[i])
 800796c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007970:	009b      	lsls	r3, r3, #2
 8007972:	3330      	adds	r3, #48	; 0x30
 8007974:	443b      	add	r3, r7
 8007976:	f853 2c18 	ldr.w	r2, [r3, #-24]
 800797a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800797e:	009b      	lsls	r3, r3, #2
 8007980:	3330      	adds	r3, #48	; 0x30
 8007982:	443b      	add	r3, r7
 8007984:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8007988:	429a      	cmp	r2, r3
 800798a:	d81d      	bhi.n	80079c8 <MX_WIFI_Init+0x138>
                  {
                    break;
                  }
                  else if (firmware_rev[i] < firmware_rev_required[i])
 800798c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007990:	009b      	lsls	r3, r3, #2
 8007992:	3330      	adds	r3, #48	; 0x30
 8007994:	443b      	add	r3, r7
 8007996:	f853 2c18 	ldr.w	r2, [r3, #-24]
 800799a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800799e:	009b      	lsls	r3, r3, #2
 80079a0:	3330      	adds	r3, #48	; 0x30
 80079a2:	443b      	add	r3, r7
 80079a4:	f853 3c24 	ldr.w	r3, [r3, #-36]
 80079a8:	429a      	cmp	r2, r3
 80079aa:	d203      	bcs.n	80079b4 <MX_WIFI_Init+0x124>
                  {
                    DEBUG_ERROR("ERROR: The WiFi firmware is out of date\n");
 80079ac:	482d      	ldr	r0, [pc, #180]	; (8007a64 <MX_WIFI_Init+0x1d4>)
 80079ae:	f00f f82f 	bl	8016a10 <puts>
                    MX_ASSERT(false);
 80079b2:	e7fe      	b.n	80079b2 <MX_WIFI_Init+0x122>
                for (uint8_t i = 0; i < sizeof(firmware_rev) / sizeof(firmware_rev[0]); ++i)
 80079b4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80079b8:	3301      	adds	r3, #1
 80079ba:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80079be:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80079c2:	2b02      	cmp	r3, #2
 80079c4:	d9d2      	bls.n	800796c <MX_WIFI_Init+0xdc>
 80079c6:	e000      	b.n	80079ca <MX_WIFI_Init+0x13a>
                    break;
 80079c8:	bf00      	nop
                    /* Going on with the next revision digit. */
                  }
                }
              }

              MX_WIFI_STRNCPY(Obj->SysInfo.Product_Name, MX_WIFI_PRODUCT_NAME);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	3314      	adds	r3, #20
 80079ce:	221f      	movs	r2, #31
 80079d0:	4925      	ldr	r1, [pc, #148]	; (8007a68 <MX_WIFI_Init+0x1d8>)
 80079d2:	4618      	mov	r0, r3
 80079d4:	f001 fdf7 	bl	80095c6 <void_strncpy>
              MX_WIFI_STRNCPY(Obj->SysInfo.Product_ID, MX_WIFI_PRODUCT_ID);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	3334      	adds	r3, #52	; 0x34
 80079dc:	221f      	movs	r2, #31
 80079de:	4923      	ldr	r1, [pc, #140]	; (8007a6c <MX_WIFI_Init+0x1dc>)
 80079e0:	4618      	mov	r0, r3
 80079e2:	f001 fdf0 	bl	80095c6 <void_strncpy>

              /* 4. Get MAC address. */
              (void)MX_WIFI_MEMSET(Obj->SysInfo.MAC, 0);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	336c      	adds	r3, #108	; 0x6c
 80079ea:	2206      	movs	r2, #6
 80079ec:	2100      	movs	r1, #0
 80079ee:	4618      	mov	r0, r3
 80079f0:	f00f f874 	bl	8016adc <memset>
              rparams_size = (uint16_t)sizeof(Obj->SysInfo.MAC);
 80079f4:	2306      	movs	r3, #6
 80079f6:	84fb      	strh	r3, [r7, #38]	; 0x26
              if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_WIFI_GET_MAC_CMD,
                                                    NULL, 0,
                                                    Obj->SysInfo.MAC, &rparams_size,
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	f103 026c 	add.w	r2, r3, #108	; 0x6c
              if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_WIFI_GET_MAC_CMD,
 80079fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007a02:	9301      	str	r3, [sp, #4]
 8007a04:	f107 0326 	add.w	r3, r7, #38	; 0x26
 8007a08:	9300      	str	r3, [sp, #0]
 8007a0a:	4613      	mov	r3, r2
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	2100      	movs	r1, #0
 8007a10:	f240 1001 	movw	r0, #257	; 0x101
 8007a14:	f7ff fd56 	bl	80074c4 <mipc_request>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d116      	bne.n	8007a4c <MX_WIFI_Init+0x1bc>
                                                    MX_WIFI_CMD_TIMEOUT))
              {
                ret = MX_WIFI_STATUS_OK;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                Obj->Runtime.interfaces++;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f893 360e 	ldrb.w	r3, [r3, #1550]	; 0x60e
 8007a2a:	3301      	adds	r3, #1
 8007a2c:	b2da      	uxtb	r2, r3
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	f883 260e 	strb.w	r2, [r3, #1550]	; 0x60e
 8007a34:	e00a      	b.n	8007a4c <MX_WIFI_Init+0x1bc>
        }
      }
    }
    else
    {
      Obj->Runtime.interfaces++;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f893 360e 	ldrb.w	r3, [r3, #1550]	; 0x60e
 8007a3c:	3301      	adds	r3, #1
 8007a3e:	b2da      	uxtb	r2, r3
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f883 260e 	strb.w	r2, [r3, #1550]	; 0x60e
      ret = MX_WIFI_STATUS_OK;
 8007a46:	2300      	movs	r3, #0
 8007a48:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  return ret;
 8007a4c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	3730      	adds	r7, #48	; 0x30
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd80      	pop	{r7, pc}
 8007a58:	0801a860 	.word	0x0801a860
 8007a5c:	0801a7e0 	.word	0x0801a7e0
 8007a60:	0801a7f0 	.word	0x0801a7f0
 8007a64:	0801a820 	.word	0x0801a820
 8007a68:	0801a848 	.word	0x0801a848
 8007a6c:	0801a854 	.word	0x0801a854

08007a70 <MX_WIFI_DeInit>:


MX_WIFI_STATUS_T MX_WIFI_DeInit(MX_WIFIObject_t *Obj)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b084      	sub	sp, #16
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
  MX_WIFI_STATUS_T ret = MX_WIFI_STATUS_PARAM_ERROR;
 8007a78:	23fc      	movs	r3, #252	; 0xfc
 8007a7a:	73fb      	strb	r3, [r7, #15]

  if (NULL != Obj)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d023      	beq.n	8007aca <MX_WIFI_DeInit+0x5a>
  {
    if (Obj->Runtime.interfaces == 1u)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	f893 360e 	ldrb.w	r3, [r3, #1550]	; 0x60e
 8007a88:	2b01      	cmp	r3, #1
 8007a8a:	d10f      	bne.n	8007aac <MX_WIFI_DeInit+0x3c>
#endif /* MX_WIFI_BARE_OS_H */

      /* Delete the thread (depends on implementation). */
      THREAD_DEINIT(MX_WIFI_RecvThreadId);

      (void)mipc_deinit();
 8007a8c:	f7ff fd0e 	bl	80074ac <mipc_deinit>
      Obj->fops.IO_DeInit();
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	685b      	ldr	r3, [r3, #4]
 8007a94:	4798      	blx	r3
      ret = MX_WIFI_STATUS_OK;
 8007a96:	2300      	movs	r3, #0
 8007a98:	73fb      	strb	r3, [r7, #15]
      Obj->Runtime.interfaces--;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f893 360e 	ldrb.w	r3, [r3, #1550]	; 0x60e
 8007aa0:	3b01      	subs	r3, #1
 8007aa2:	b2da      	uxtb	r2, r3
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f883 260e 	strb.w	r2, [r3, #1550]	; 0x60e
 8007aaa:	e00e      	b.n	8007aca <MX_WIFI_DeInit+0x5a>
    }
    else
    {
      ret = MX_WIFI_STATUS_OK;
 8007aac:	2300      	movs	r3, #0
 8007aae:	73fb      	strb	r3, [r7, #15]
      if (Obj->Runtime.interfaces > 0u)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f893 360e 	ldrb.w	r3, [r3, #1550]	; 0x60e
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d007      	beq.n	8007aca <MX_WIFI_DeInit+0x5a>
      {
        Obj->Runtime.interfaces--;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	f893 360e 	ldrb.w	r3, [r3, #1550]	; 0x60e
 8007ac0:	3b01      	subs	r3, #1
 8007ac2:	b2da      	uxtb	r2, r3
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f883 260e 	strb.w	r2, [r3, #1550]	; 0x60e
    }
  }

  MX_STAT_LOG();

  return ret;
 8007aca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3710      	adds	r7, #16
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}

08007ad6 <MX_WIFI_IO_YIELD>:


MX_WIFI_STATUS_T MX_WIFI_IO_YIELD(MX_WIFIObject_t *Obj, uint32_t timeout)
{
 8007ad6:	b580      	push	{r7, lr}
 8007ad8:	b084      	sub	sp, #16
 8007ada:	af00      	add	r7, sp, #0
 8007adc:	6078      	str	r0, [r7, #4]
 8007ade:	6039      	str	r1, [r7, #0]
  MX_WIFI_STATUS_T ret = MX_WIFI_STATUS_OK;
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	73fb      	strb	r3, [r7, #15]
  if (NULL != Obj)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d002      	beq.n	8007af0 <MX_WIFI_IO_YIELD+0x1a>
  {
    mipc_poll(timeout);
 8007aea:	6838      	ldr	r0, [r7, #0]
 8007aec:	f7ff fd94 	bl	8007618 <mipc_poll>
  }
  return ret;
 8007af0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007af4:	4618      	mov	r0, r3
 8007af6:	3710      	adds	r7, #16
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bd80      	pop	{r7, pc}

08007afc <MX_WIFI_GetMACAddress>:
  return ret;
}


MX_WIFI_STATUS_T MX_WIFI_GetMACAddress(MX_WIFIObject_t *Obj, uint8_t *Mac)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b084      	sub	sp, #16
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
 8007b04:	6039      	str	r1, [r7, #0]
  MX_WIFI_STATUS_T ret = MX_WIFI_STATUS_ERROR;
 8007b06:	23ff      	movs	r3, #255	; 0xff
 8007b08:	73fb      	strb	r3, [r7, #15]

  if ((NULL != Obj) && (NULL != Mac))
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d00b      	beq.n	8007b28 <MX_WIFI_GetMACAddress+0x2c>
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d008      	beq.n	8007b28 <MX_WIFI_GetMACAddress+0x2c>
  {
    (void)memcpy(Mac, Obj->SysInfo.MAC, MX_WIFI_MAC_SIZE);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	336c      	adds	r3, #108	; 0x6c
 8007b1a:	2206      	movs	r2, #6
 8007b1c:	4619      	mov	r1, r3
 8007b1e:	6838      	ldr	r0, [r7, #0]
 8007b20:	f00f f89b 	bl	8016c5a <memcpy>
    ret = MX_WIFI_STATUS_OK;
 8007b24:	2300      	movs	r3, #0
 8007b26:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007b28:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	3710      	adds	r7, #16
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}

08007b34 <MX_WIFI_GetsoftapMACAddress>:


MX_WIFI_STATUS_T MX_WIFI_GetsoftapMACAddress(MX_WIFIObject_t *Obj, uint8_t *Mac)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b086      	sub	sp, #24
 8007b38:	af02      	add	r7, sp, #8
 8007b3a:	6078      	str	r0, [r7, #4]
 8007b3c:	6039      	str	r1, [r7, #0]
  MX_WIFI_STATUS_T ret = MX_WIFI_STATUS_ERROR;
 8007b3e:	23ff      	movs	r3, #255	; 0xff
 8007b40:	73fb      	strb	r3, [r7, #15]

  if ((NULL != Obj) && (NULL != Mac))
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d027      	beq.n	8007b98 <MX_WIFI_GetsoftapMACAddress+0x64>
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d024      	beq.n	8007b98 <MX_WIFI_GetsoftapMACAddress+0x64>
  {
    uint16_t rparams_size = MX_WIFI_MAC_SIZE;
 8007b4e:	2306      	movs	r3, #6
 8007b50:	81bb      	strh	r3, [r7, #12]

    (void)memset(&Obj->SysInfo.apMAC[0], 0, MX_WIFI_MAC_SIZE);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	3372      	adds	r3, #114	; 0x72
 8007b56:	2206      	movs	r2, #6
 8007b58:	2100      	movs	r1, #0
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	f00e ffbe 	bl	8016adc <memset>

    if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_WIFI_GET_SOFT_MAC_CMD,
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f103 0272 	add.w	r2, r3, #114	; 0x72
 8007b66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007b6a:	9301      	str	r3, [sp, #4]
 8007b6c:	f107 030c 	add.w	r3, r7, #12
 8007b70:	9300      	str	r3, [sp, #0]
 8007b72:	4613      	mov	r3, r2
 8007b74:	2200      	movs	r2, #0
 8007b76:	2100      	movs	r1, #0
 8007b78:	f240 1015 	movw	r0, #277	; 0x115
 8007b7c:	f7ff fca2 	bl	80074c4 <mipc_request>
 8007b80:	4603      	mov	r3, r0
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d108      	bne.n	8007b98 <MX_WIFI_GetsoftapMACAddress+0x64>
                                          NULL, 0,
                                          &Obj->SysInfo.apMAC[0],
                                          &rparams_size,
                                          MX_WIFI_CMD_TIMEOUT))
    {
      (void)memcpy(Mac, &Obj->SysInfo.apMAC[0], MX_WIFI_MAC_SIZE);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	3372      	adds	r3, #114	; 0x72
 8007b8a:	2206      	movs	r2, #6
 8007b8c:	4619      	mov	r1, r3
 8007b8e:	6838      	ldr	r0, [r7, #0]
 8007b90:	f00f f863 	bl	8016c5a <memcpy>
      ret = MX_WIFI_STATUS_OK;
 8007b94:	2300      	movs	r3, #0
 8007b96:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 8007b98:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	3710      	adds	r7, #16
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bd80      	pop	{r7, pc}

08007ba4 <MX_WIFI_Scan>:


MX_WIFI_STATUS_T MX_WIFI_Scan(MX_WIFIObject_t *Obj, mc_wifi_scan_mode_t ScanMode,
                              char *SSID, int32_t Len)
{
 8007ba4:	b5b0      	push	{r4, r5, r7, lr}
 8007ba6:	b092      	sub	sp, #72	; 0x48
 8007ba8:	af02      	add	r7, sp, #8
 8007baa:	60f8      	str	r0, [r7, #12]
 8007bac:	607a      	str	r2, [r7, #4]
 8007bae:	603b      	str	r3, [r7, #0]
 8007bb0:	460b      	mov	r3, r1
 8007bb2:	72fb      	strb	r3, [r7, #11]
  MX_WIFI_STATUS_T ret = MX_WIFI_STATUS_ERROR;
 8007bb4:	23ff      	movs	r3, #255	; 0xff
 8007bb6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if ((NULL == Obj) ||
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d00b      	beq.n	8007bd8 <MX_WIFI_Scan+0x34>
 8007bc0:	7afb      	ldrb	r3, [r7, #11]
 8007bc2:	2b01      	cmp	r3, #1
 8007bc4:	d10c      	bne.n	8007be0 <MX_WIFI_Scan+0x3c>
      (((mc_wifi_scan_mode_t)MC_SCAN_ACTIVE == ScanMode) && ((NULL == SSID) || (Len <= 0) || (Len > 32))))
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d005      	beq.n	8007bd8 <MX_WIFI_Scan+0x34>
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	dd02      	ble.n	8007bd8 <MX_WIFI_Scan+0x34>
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	2b20      	cmp	r3, #32
 8007bd6:	dd03      	ble.n	8007be0 <MX_WIFI_Scan+0x3c>
  {
    ret = MX_WIFI_STATUS_PARAM_ERROR;
 8007bd8:	23fc      	movs	r3, #252	; 0xfc
 8007bda:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8007bde:	e049      	b.n	8007c74 <MX_WIFI_Scan+0xd0>
  }
  else
  {
    wifi_scan_cparams_t cparams = {0};
 8007be0:	4b27      	ldr	r3, [pc, #156]	; (8007c80 <MX_WIFI_Scan+0xdc>)
 8007be2:	f107 0410 	add.w	r4, r7, #16
 8007be6:	461d      	mov	r5, r3
 8007be8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007bea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007bec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007bee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007bf0:	682b      	ldr	r3, [r5, #0]
 8007bf2:	7023      	strb	r3, [r4, #0]
    const uint16_t cparams_size = (uint16_t)(sizeof(cparams));
 8007bf4:	2321      	movs	r3, #33	; 0x21
 8007bf6:	87bb      	strh	r3, [r7, #60]	; 0x3c
    wifi_scan_rparams_t *rparams_p = (wifi_scan_rparams_t *)&Obj->Runtime.scan_result[0];
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8007bfe:	63bb      	str	r3, [r7, #56]	; 0x38
    uint16_t rparams_p_size = (uint16_t)sizeof(Obj->Runtime.scan_result);
 8007c00:	f240 33e9 	movw	r3, #1001	; 0x3e9
 8007c04:	86bb      	strh	r3, [r7, #52]	; 0x34

    (void)memcpy(&cparams.ssid[0], SSID, (size_t)MIN(Len, (int32_t)(sizeof(cparams.ssid) - 1)));
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	2b1f      	cmp	r3, #31
 8007c0a:	dc01      	bgt.n	8007c10 <MX_WIFI_Scan+0x6c>
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	e000      	b.n	8007c12 <MX_WIFI_Scan+0x6e>
 8007c10:	2320      	movs	r3, #32
 8007c12:	f107 0010 	add.w	r0, r7, #16
 8007c16:	461a      	mov	r2, r3
 8007c18:	6879      	ldr	r1, [r7, #4]
 8007c1a:	f00f f81e 	bl	8016c5a <memcpy>

    if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_WIFI_SCAN_CMD,
 8007c1e:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8007c20:	f107 0110 	add.w	r1, r7, #16
 8007c24:	f241 3388 	movw	r3, #5000	; 0x1388
 8007c28:	9301      	str	r3, [sp, #4]
 8007c2a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007c2e:	9300      	str	r3, [sp, #0]
 8007c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c32:	f44f 7081 	mov.w	r0, #258	; 0x102
 8007c36:	f7ff fc45 	bl	80074c4 <mipc_request>
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d119      	bne.n	8007c74 <MX_WIFI_Scan+0xd0>
                                          (uint8_t *)&cparams, cparams_size,
                                          (uint8_t *)rparams_p, &rparams_p_size,
                                          MX_WIFI_SCAN_TIMEOUT))
    {
      const uint8_t ap_count = rparams_p->num;
 8007c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c42:	781b      	ldrb	r3, [r3, #0]
 8007c44:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      memmove(Obj->Runtime.scan_result, &rparams_p->ap[0],
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	f503 7009 	add.w	r0, r3, #548	; 0x224
 8007c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c50:	1c59      	adds	r1, r3, #1
 8007c52:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8007c56:	4613      	mov	r3, r2
 8007c58:	005b      	lsls	r3, r3, #1
 8007c5a:	4413      	add	r3, r2
 8007c5c:	011b      	lsls	r3, r3, #4
 8007c5e:	461a      	mov	r2, r3
 8007c60:	f00e ff22 	bl	8016aa8 <memmove>
              ap_count * sizeof(mwifi_ap_info_t));

      Obj->Runtime.scan_number = ap_count;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8007c6a:	f883 260d 	strb.w	r2, [r3, #1549]	; 0x60d

      ret = MX_WIFI_STATUS_OK;
 8007c6e:	2300      	movs	r3, #0
 8007c70:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
  }

  return ret;
 8007c74:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	3740      	adds	r7, #64	; 0x40
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bdb0      	pop	{r4, r5, r7, pc}
 8007c80:	0801a86c 	.word	0x0801a86c

08007c84 <MX_WIFI_Get_scan_result>:


int8_t MX_WIFI_Get_scan_result(MX_WIFIObject_t *Obj, uint8_t *Results, uint8_t Number)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b086      	sub	sp, #24
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	60f8      	str	r0, [r7, #12]
 8007c8c:	60b9      	str	r1, [r7, #8]
 8007c8e:	4613      	mov	r3, r2
 8007c90:	71fb      	strb	r3, [r7, #7]
  uint8_t copy_number = 0;
 8007c92:	2300      	movs	r3, #0
 8007c94:	75fb      	strb	r3, [r7, #23]

  if ((NULL != Obj) && (NULL != Results) && (0U != Number))
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d019      	beq.n	8007cd0 <MX_WIFI_Get_scan_result+0x4c>
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d016      	beq.n	8007cd0 <MX_WIFI_Get_scan_result+0x4c>
 8007ca2:	79fb      	ldrb	r3, [r7, #7]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d013      	beq.n	8007cd0 <MX_WIFI_Get_scan_result+0x4c>
  {
    copy_number = MIN(Obj->Runtime.scan_number, Number);
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	f893 360d 	ldrb.w	r3, [r3, #1549]	; 0x60d
 8007cae:	79fa      	ldrb	r2, [r7, #7]
 8007cb0:	4293      	cmp	r3, r2
 8007cb2:	bf28      	it	cs
 8007cb4:	4613      	movcs	r3, r2
 8007cb6:	75fb      	strb	r3, [r7, #23]
    (void)memcpy(Results, Obj->Runtime.scan_result, (size_t)copy_number * sizeof(mwifi_ap_info_t));
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	f503 7109 	add.w	r1, r3, #548	; 0x224
 8007cbe:	7dfa      	ldrb	r2, [r7, #23]
 8007cc0:	4613      	mov	r3, r2
 8007cc2:	005b      	lsls	r3, r3, #1
 8007cc4:	4413      	add	r3, r2
 8007cc6:	011b      	lsls	r3, r3, #4
 8007cc8:	461a      	mov	r2, r3
 8007cca:	68b8      	ldr	r0, [r7, #8]
 8007ccc:	f00e ffc5 	bl	8016c5a <memcpy>
  }

  return (int8_t)copy_number;
 8007cd0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	3718      	adds	r7, #24
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bd80      	pop	{r7, pc}

08007cdc <MX_WIFI_RegisterStatusCallback_if>:

MX_WIFI_STATUS_T MX_WIFI_RegisterStatusCallback_if(MX_WIFIObject_t *Obj,
                                                   mx_wifi_status_callback_t Cb,
                                                   void *Arg,
                                                   mwifi_if_t Interface)
{
 8007cdc:	b480      	push	{r7}
 8007cde:	b087      	sub	sp, #28
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	60f8      	str	r0, [r7, #12]
 8007ce4:	60b9      	str	r1, [r7, #8]
 8007ce6:	607a      	str	r2, [r7, #4]
 8007ce8:	70fb      	strb	r3, [r7, #3]
  MX_WIFI_STATUS_T rc = MX_WIFI_STATUS_ERROR;
 8007cea:	23ff      	movs	r3, #255	; 0xff
 8007cec:	75fb      	strb	r3, [r7, #23]

  if (NULL != Obj)
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d016      	beq.n	8007d22 <MX_WIFI_RegisterStatusCallback_if+0x46>
  {
    const uint8_t interface_num = ((mwifi_if_t)MC_SOFTAP == Interface) ? 1 : 0;
 8007cf4:	78fb      	ldrb	r3, [r7, #3]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	bf0c      	ite	eq
 8007cfa:	2301      	moveq	r3, #1
 8007cfc:	2300      	movne	r3, #0
 8007cfe:	b2db      	uxtb	r3, r3
 8007d00:	75bb      	strb	r3, [r7, #22]

    Obj->Runtime.status_cb[interface_num] = Cb;
 8007d02:	7dbb      	ldrb	r3, [r7, #22]
 8007d04:	68fa      	ldr	r2, [r7, #12]
 8007d06:	3380      	adds	r3, #128	; 0x80
 8007d08:	009b      	lsls	r3, r3, #2
 8007d0a:	4413      	add	r3, r2
 8007d0c:	68ba      	ldr	r2, [r7, #8]
 8007d0e:	605a      	str	r2, [r3, #4]
    Obj->Runtime.callback_arg[interface_num] = Arg;
 8007d10:	7dbb      	ldrb	r3, [r7, #22]
 8007d12:	68fa      	ldr	r2, [r7, #12]
 8007d14:	3382      	adds	r3, #130	; 0x82
 8007d16:	009b      	lsls	r3, r3, #2
 8007d18:	4413      	add	r3, r2
 8007d1a:	687a      	ldr	r2, [r7, #4]
 8007d1c:	605a      	str	r2, [r3, #4]
    rc = MX_WIFI_STATUS_OK;
 8007d1e:	2300      	movs	r3, #0
 8007d20:	75fb      	strb	r3, [r7, #23]
  }

  return rc;
 8007d22:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	371c      	adds	r7, #28
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d30:	4770      	bx	lr

08007d32 <MX_WIFI_Connect>:
}


MX_WIFI_STATUS_T MX_WIFI_Connect(MX_WIFIObject_t *Obj, const mx_char_t *SSID,
                                 const mx_char_t *Password, MX_WIFI_SecurityType_t SecType)
{
 8007d32:	b5b0      	push	{r4, r5, r7, lr}
 8007d34:	b0cc      	sub	sp, #304	; 0x130
 8007d36:	af02      	add	r7, sp, #8
 8007d38:	f507 7494 	add.w	r4, r7, #296	; 0x128
 8007d3c:	f5a4 748e 	sub.w	r4, r4, #284	; 0x11c
 8007d40:	6020      	str	r0, [r4, #0]
 8007d42:	f507 7094 	add.w	r0, r7, #296	; 0x128
 8007d46:	f5a0 7090 	sub.w	r0, r0, #288	; 0x120
 8007d4a:	6001      	str	r1, [r0, #0]
 8007d4c:	f507 7194 	add.w	r1, r7, #296	; 0x128
 8007d50:	f5a1 7192 	sub.w	r1, r1, #292	; 0x124
 8007d54:	600a      	str	r2, [r1, #0]
 8007d56:	461a      	mov	r2, r3
 8007d58:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8007d5c:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8007d60:	701a      	strb	r2, [r3, #0]
  MX_WIFI_STATUS_T ret = MX_WIFI_STATUS_ERROR;
 8007d62:	23ff      	movs	r3, #255	; 0xff
 8007d64:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

  (void)SecType;

  if ((NULL != Obj) && (NULL != SSID) && (NULL != Password))
 8007d68:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8007d6c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	f000 80ff 	beq.w	8007f76 <MX_WIFI_Connect+0x244>
 8007d78:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8007d7c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	f000 80f7 	beq.w	8007f76 <MX_WIFI_Connect+0x244>
 8007d88:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8007d8c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	f000 80ef 	beq.w	8007f76 <MX_WIFI_Connect+0x244>
  {
    const size_t ssid_len = strlen(SSID);
 8007d98:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8007d9c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8007da0:	6818      	ldr	r0, [r3, #0]
 8007da2:	f7f8 fa69 	bl	8000278 <strlen>
 8007da6:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
    const size_t password_len = strlen(Password);
 8007daa:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8007dae:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8007db2:	6818      	ldr	r0, [r3, #0]
 8007db4:	f7f8 fa60 	bl	8000278 <strlen>
 8007db8:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c

    if ((ssid_len > (uint32_t)MX_MAX_SSID_LEN) || (password_len > (uint32_t)MX_MAX_KEY_LEN))
 8007dbc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007dc0:	2b20      	cmp	r3, #32
 8007dc2:	d803      	bhi.n	8007dcc <MX_WIFI_Connect+0x9a>
 8007dc4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007dc8:	2b40      	cmp	r3, #64	; 0x40
 8007dca:	d903      	bls.n	8007dd4 <MX_WIFI_Connect+0xa2>
    {
      ret = MX_WIFI_STATUS_PARAM_ERROR;
 8007dcc:	23fc      	movs	r3, #252	; 0xfc
 8007dce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
 8007dd2:	e0d0      	b.n	8007f76 <MX_WIFI_Connect+0x244>
    }
    else
    {
      wifi_connect_cparams_t cp = {0};
 8007dd4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007dd8:	22b0      	movs	r2, #176	; 0xb0
 8007dda:	2100      	movs	r1, #0
 8007ddc:	4618      	mov	r0, r3
 8007dde:	f00e fe7d 	bl	8016adc <memset>
      const uint16_t cp_size = (uint16_t)(sizeof(cp));
 8007de2:	23b0      	movs	r3, #176	; 0xb0
 8007de4:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
      int32_t status = MIPC_CODE_ERROR;
 8007de8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007dec:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
      uint16_t status_size = (uint16_t)sizeof(status);
 8007df0:	2304      	movs	r3, #4
 8007df2:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112

      MX_WIFI_STRNCPY(cp.ssid, SSID);
 8007df6:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8007dfa:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8007dfe:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8007e02:	2220      	movs	r2, #32
 8007e04:	6819      	ldr	r1, [r3, #0]
 8007e06:	f001 fbde 	bl	80095c6 <void_strncpy>
      MX_WIFI_STRNCPY(cp.key, Password);
 8007e0a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8007e0e:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8007e12:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007e16:	f102 0021 	add.w	r0, r2, #33	; 0x21
 8007e1a:	2240      	movs	r2, #64	; 0x40
 8007e1c:	6819      	ldr	r1, [r3, #0]
 8007e1e:	f001 fbd2 	bl	80095c6 <void_strncpy>
      cp.key_len = (int32_t)password_len;
 8007e22:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007e26:	f8c7 30b2 	str.w	r3, [r7, #178]	; 0xb2

      if ((uint8_t)0 == Obj->NetSettings.DHCP_IsEnabled)
 8007e2a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8007e2e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f893 30db 	ldrb.w	r3, [r3, #219]	; 0xdb
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	f040 8081 	bne.w	8007f40 <MX_WIFI_Connect+0x20e>
      {
        mwifi_ip_attr_t ip_attr = {0};
 8007e3e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8007e42:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007e46:	4618      	mov	r0, r3
 8007e48:	2340      	movs	r3, #64	; 0x40
 8007e4a:	461a      	mov	r2, r3
 8007e4c:	2100      	movs	r1, #0
 8007e4e:	f00e fe45 	bl	8016adc <memset>
        {
          mx_ip_addr_t ip_addr = {0};
 8007e52:	2300      	movs	r3, #0
 8007e54:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          (void)memcpy(&ip_addr, Obj->NetSettings.IP_Addr, sizeof(ip_addr));
 8007e58:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8007e5c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	33dd      	adds	r3, #221	; 0xdd
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          MX_WIFI_STRNCPY(ip_attr.localip, mx_ntoa(&ip_addr));
 8007e6a:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8007e6e:	4618      	mov	r0, r3
 8007e70:	f7fe ffa4 	bl	8006dbc <mx_ntoa>
 8007e74:	4601      	mov	r1, r0
 8007e76:	f107 0310 	add.w	r3, r7, #16
 8007e7a:	220f      	movs	r2, #15
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	f001 fba2 	bl	80095c6 <void_strncpy>
        }
        {
          mx_ip_addr_t ip_mask = {0};
 8007e82:	2300      	movs	r3, #0
 8007e84:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          (void)memcpy(&ip_mask, Obj->NetSettings.IP_Mask, sizeof(ip_mask));
 8007e88:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8007e8c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	33e1      	adds	r3, #225	; 0xe1
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          MX_WIFI_STRNCPY(ip_attr.netmask, mx_ntoa(&ip_mask));
 8007e9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	f7fe ff8c 	bl	8006dbc <mx_ntoa>
 8007ea4:	4601      	mov	r1, r0
 8007ea6:	f107 0310 	add.w	r3, r7, #16
 8007eaa:	3310      	adds	r3, #16
 8007eac:	220f      	movs	r2, #15
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f001 fb89 	bl	80095c6 <void_strncpy>
        }
        {
          mx_ip_addr_t gateway_ip_addr = {0};
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          (void)memcpy(&gateway_ip_addr, Obj->NetSettings.Gateway_Addr, sizeof(gateway_ip_addr));
 8007eba:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8007ebe:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	33e5      	adds	r3, #229	; 0xe5
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          MX_WIFI_STRNCPY(ip_attr.gateway, mx_ntoa(&gateway_ip_addr));
 8007ecc:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	f7fe ff73 	bl	8006dbc <mx_ntoa>
 8007ed6:	4601      	mov	r1, r0
 8007ed8:	f107 0310 	add.w	r3, r7, #16
 8007edc:	3320      	adds	r3, #32
 8007ede:	220f      	movs	r2, #15
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	f001 fb70 	bl	80095c6 <void_strncpy>
        }
        {
          mx_ip_addr_t dns_ip_addr = {0};
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
          (void)memcpy(&dns_ip_addr, Obj->NetSettings.DNS1, sizeof(dns_ip_addr));
 8007eec:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8007ef0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	33e9      	adds	r3, #233	; 0xe9
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
          MX_WIFI_STRNCPY(ip_attr.dnserver, mx_ntoa(&dns_ip_addr));
 8007efe:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8007f02:	4618      	mov	r0, r3
 8007f04:	f7fe ff5a 	bl	8006dbc <mx_ntoa>
 8007f08:	4601      	mov	r1, r0
 8007f0a:	f107 0310 	add.w	r3, r7, #16
 8007f0e:	3330      	adds	r3, #48	; 0x30
 8007f10:	220f      	movs	r2, #15
 8007f12:	4618      	mov	r0, r3
 8007f14:	f001 fb57 	bl	80095c6 <void_strncpy>
        }

        cp.use_ip = 1;
 8007f18:	2301      	movs	r3, #1
 8007f1a:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
        cp.ip = ip_attr;
 8007f1e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8007f22:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007f26:	f107 04c0 	add.w	r4, r7, #192	; 0xc0
 8007f2a:	461d      	mov	r5, r3
 8007f2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007f2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007f32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007f36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f38:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007f3c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      }

      if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_WIFI_CONNECT_CMD,
 8007f40:	f507 708a 	add.w	r0, r7, #276	; 0x114
 8007f44:	f8b7 211a 	ldrh.w	r2, [r7, #282]	; 0x11a
 8007f48:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8007f4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007f50:	9301      	str	r3, [sp, #4]
 8007f52:	f507 7389 	add.w	r3, r7, #274	; 0x112
 8007f56:	9300      	str	r3, [sp, #0]
 8007f58:	4603      	mov	r3, r0
 8007f5a:	f240 1003 	movw	r0, #259	; 0x103
 8007f5e:	f7ff fab1 	bl	80074c4 <mipc_request>
 8007f62:	4603      	mov	r3, r0
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d106      	bne.n	8007f76 <MX_WIFI_Connect+0x244>
                                            (uint8_t *)&cp, cp_size,
                                            (uint8_t *)&status, &status_size,
                                            MX_WIFI_CMD_TIMEOUT))
      {
        if (MIPC_CODE_SUCCESS == status)
 8007f68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d102      	bne.n	8007f76 <MX_WIFI_Connect+0x244>
        {
          ret = MX_WIFI_STATUS_OK;
 8007f70:	2300      	movs	r3, #0
 8007f72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        }
      }
    }
  }

  return ret;
 8007f76:	f997 3127 	ldrsb.w	r3, [r7, #295]	; 0x127
}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bdb0      	pop	{r4, r5, r7, pc}

08007f84 <MX_WIFI_Disconnect>:
  return ret;
}


MX_WIFI_STATUS_T MX_WIFI_Disconnect(MX_WIFIObject_t *Obj)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b088      	sub	sp, #32
 8007f88:	af02      	add	r7, sp, #8
 8007f8a:	6078      	str	r0, [r7, #4]
  MX_WIFI_STATUS_T ret = MX_WIFI_STATUS_ERROR;
 8007f8c:	23ff      	movs	r3, #255	; 0xff
 8007f8e:	75fb      	strb	r3, [r7, #23]

  if (NULL != Obj)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d01b      	beq.n	8007fce <MX_WIFI_Disconnect+0x4a>
  {
    int32_t status = MIPC_CODE_ERROR;
 8007f96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007f9a:	613b      	str	r3, [r7, #16]
    uint16_t status_size = (uint16_t)sizeof(status);
 8007f9c:	2304      	movs	r3, #4
 8007f9e:	81fb      	strh	r3, [r7, #14]
    if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_WIFI_DISCONNECT_CMD, NULL, 0,
 8007fa0:	f107 0210 	add.w	r2, r7, #16
 8007fa4:	f643 2398 	movw	r3, #15000	; 0x3a98
 8007fa8:	9301      	str	r3, [sp, #4]
 8007faa:	f107 030e 	add.w	r3, r7, #14
 8007fae:	9300      	str	r3, [sp, #0]
 8007fb0:	4613      	mov	r3, r2
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	2100      	movs	r1, #0
 8007fb6:	f44f 7082 	mov.w	r0, #260	; 0x104
 8007fba:	f7ff fa83 	bl	80074c4 <mipc_request>
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d104      	bne.n	8007fce <MX_WIFI_Disconnect+0x4a>
                                          (uint8_t *)&status, &status_size,
                                          15000))  /* disconnect max timeout 15s */
    {
      if (MIPC_CODE_SUCCESS == status)
 8007fc4:	693b      	ldr	r3, [r7, #16]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d101      	bne.n	8007fce <MX_WIFI_Disconnect+0x4a>
      {
        ret = MX_WIFI_STATUS_OK;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	75fb      	strb	r3, [r7, #23]
      }
    }
  }
  return ret;
 8007fce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	3718      	adds	r7, #24
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bd80      	pop	{r7, pc}

08007fda <MX_WIFI_WPS_Connect>:


MX_WIFI_STATUS_T MX_WIFI_WPS_Connect(MX_WIFIObject_t *Obj)
{
 8007fda:	b580      	push	{r7, lr}
 8007fdc:	b088      	sub	sp, #32
 8007fde:	af02      	add	r7, sp, #8
 8007fe0:	6078      	str	r0, [r7, #4]
  MX_WIFI_STATUS_T ret = MX_WIFI_STATUS_ERROR;
 8007fe2:	23ff      	movs	r3, #255	; 0xff
 8007fe4:	75fb      	strb	r3, [r7, #23]

  if (NULL != Obj)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d01b      	beq.n	8008024 <MX_WIFI_WPS_Connect+0x4a>
  {
    int32_t status = MIPC_CODE_ERROR;
 8007fec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007ff0:	613b      	str	r3, [r7, #16]
    uint16_t status_size = (uint16_t)sizeof(status);
 8007ff2:	2304      	movs	r3, #4
 8007ff4:	81fb      	strh	r3, [r7, #14]

    if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_WIFI_WPS_CONNECT_CMD, NULL, 0,
 8007ff6:	f107 0210 	add.w	r2, r7, #16
 8007ffa:	f643 2398 	movw	r3, #15000	; 0x3a98
 8007ffe:	9301      	str	r3, [sp, #4]
 8008000:	f107 030e 	add.w	r3, r7, #14
 8008004:	9300      	str	r3, [sp, #0]
 8008006:	4613      	mov	r3, r2
 8008008:	2200      	movs	r2, #0
 800800a:	2100      	movs	r1, #0
 800800c:	f240 1011 	movw	r0, #273	; 0x111
 8008010:	f7ff fa58 	bl	80074c4 <mipc_request>
 8008014:	4603      	mov	r3, r0
 8008016:	2b00      	cmp	r3, #0
 8008018:	d104      	bne.n	8008024 <MX_WIFI_WPS_Connect+0x4a>
                                          (uint8_t *)&status, &status_size,
                                          15000))
    {
      if (MIPC_CODE_SUCCESS == status)
 800801a:	693b      	ldr	r3, [r7, #16]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d101      	bne.n	8008024 <MX_WIFI_WPS_Connect+0x4a>
      {
        ret = MX_WIFI_STATUS_OK;
 8008020:	2300      	movs	r3, #0
 8008022:	75fb      	strb	r3, [r7, #23]
      }
    }
  }

  return ret;
 8008024:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008028:	4618      	mov	r0, r3
 800802a:	3718      	adds	r7, #24
 800802c:	46bd      	mov	sp, r7
 800802e:	bd80      	pop	{r7, pc}

08008030 <MX_WIFI_WPS_Stop>:


MX_WIFI_STATUS_T MX_WIFI_WPS_Stop(MX_WIFIObject_t *Obj)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b088      	sub	sp, #32
 8008034:	af02      	add	r7, sp, #8
 8008036:	6078      	str	r0, [r7, #4]
  MX_WIFI_STATUS_T ret = MX_WIFI_STATUS_ERROR;
 8008038:	23ff      	movs	r3, #255	; 0xff
 800803a:	75fb      	strb	r3, [r7, #23]

  if (NULL != Obj)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d01b      	beq.n	800807a <MX_WIFI_WPS_Stop+0x4a>
  {
    int32_t status = MIPC_CODE_ERROR;
 8008042:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008046:	613b      	str	r3, [r7, #16]
    uint16_t status_size = (uint16_t)sizeof(status);
 8008048:	2304      	movs	r3, #4
 800804a:	81fb      	strh	r3, [r7, #14]
    if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_WIFI_WPS_STOP_CMD, NULL, 0,
 800804c:	f107 0210 	add.w	r2, r7, #16
 8008050:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008054:	9301      	str	r3, [sp, #4]
 8008056:	f107 030e 	add.w	r3, r7, #14
 800805a:	9300      	str	r3, [sp, #0]
 800805c:	4613      	mov	r3, r2
 800805e:	2200      	movs	r2, #0
 8008060:	2100      	movs	r1, #0
 8008062:	f44f 7089 	mov.w	r0, #274	; 0x112
 8008066:	f7ff fa2d 	bl	80074c4 <mipc_request>
 800806a:	4603      	mov	r3, r0
 800806c:	2b00      	cmp	r3, #0
 800806e:	d104      	bne.n	800807a <MX_WIFI_WPS_Stop+0x4a>
                                          (uint8_t *)&status, &status_size,
                                          MX_WIFI_CMD_TIMEOUT))
    {
      if (MIPC_CODE_SUCCESS == status)
 8008070:	693b      	ldr	r3, [r7, #16]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d101      	bne.n	800807a <MX_WIFI_WPS_Stop+0x4a>
      {
        ret = MX_WIFI_STATUS_OK;
 8008076:	2300      	movs	r3, #0
 8008078:	75fb      	strb	r3, [r7, #23]
      }
    }
  }

  return ret;
 800807a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800807e:	4618      	mov	r0, r3
 8008080:	3718      	adds	r7, #24
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}

08008086 <MX_WIFI_GetIPAddress>:
  return ret;
}


MX_WIFI_STATUS_T MX_WIFI_GetIPAddress(MX_WIFIObject_t *Obj, uint8_t *IpAddr, mwifi_if_t WifiMode)
{
 8008086:	b580      	push	{r7, lr}
 8008088:	b09e      	sub	sp, #120	; 0x78
 800808a:	af02      	add	r7, sp, #8
 800808c:	60f8      	str	r0, [r7, #12]
 800808e:	60b9      	str	r1, [r7, #8]
 8008090:	4613      	mov	r3, r2
 8008092:	71fb      	strb	r3, [r7, #7]
  MX_WIFI_STATUS_T ret = MX_WIFI_STATUS_ERROR;
 8008094:	23ff      	movs	r3, #255	; 0xff
 8008096:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

  if (NULL != Obj)
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d067      	beq.n	8008170 <MX_WIFI_GetIPAddress+0xea>
  {
    wifi_get_ip_rparams_t rp = {0};
 80080a0:	f107 0314 	add.w	r3, r7, #20
 80080a4:	2244      	movs	r2, #68	; 0x44
 80080a6:	2100      	movs	r1, #0
 80080a8:	4618      	mov	r0, r3
 80080aa:	f00e fd17 	bl	8016adc <memset>
    uint16_t rp_size = (uint16_t)sizeof(rp);
 80080ae:	2344      	movs	r3, #68	; 0x44
 80080b0:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
    uint8_t interface_num = ((mwifi_if_t)MC_SOFTAP == WifiMode) ? 0 : 1;
 80080b4:	79fb      	ldrb	r3, [r7, #7]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	bf14      	ite	ne
 80080ba:	2301      	movne	r3, #1
 80080bc:	2300      	moveq	r3, #0
 80080be:	b2db      	uxtb	r3, r3
 80080c0:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
    const uint16_t interface_num_size = (uint16_t)(sizeof(interface_num));
 80080c4:	2301      	movs	r3, #1
 80080c6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

    rp.status = MIPC_CODE_ERROR;
 80080ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80080ce:	617b      	str	r3, [r7, #20]

    if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_WIFI_GET_IP_CMD,
 80080d0:	f107 0014 	add.w	r0, r7, #20
 80080d4:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80080d8:	f107 0169 	add.w	r1, r7, #105	; 0x69
 80080dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80080e0:	9301      	str	r3, [sp, #4]
 80080e2:	f107 036a 	add.w	r3, r7, #106	; 0x6a
 80080e6:	9300      	str	r3, [sp, #0]
 80080e8:	4603      	mov	r3, r0
 80080ea:	f240 1007 	movw	r0, #263	; 0x107
 80080ee:	f7ff f9e9 	bl	80074c4 <mipc_request>
 80080f2:	4603      	mov	r3, r0
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d13b      	bne.n	8008170 <MX_WIFI_GetIPAddress+0xea>
                                          &interface_num, interface_num_size,
                                          (uint8_t *)&rp, &rp_size,
                                          1000))
    {
      if (MIPC_CODE_SUCCESS == rp.status)
 80080f8:	697b      	ldr	r3, [r7, #20]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d138      	bne.n	8008170 <MX_WIFI_GetIPAddress+0xea>
      {
        {
          int32_t ip = mx_aton_r(&rp.ip.localip[0]);
 80080fe:	f107 0314 	add.w	r3, r7, #20
 8008102:	3304      	adds	r3, #4
 8008104:	4618      	mov	r0, r3
 8008106:	f7fe fe41 	bl	8006d8c <mx_aton_r>
 800810a:	4603      	mov	r3, r0
 800810c:	667b      	str	r3, [r7, #100]	; 0x64
          (void)memcpy(&Obj->NetSettings.IP_Addr[0], &ip, sizeof(Obj->NetSettings.IP_Addr));
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	33dd      	adds	r3, #221	; 0xdd
 8008112:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008114:	601a      	str	r2, [r3, #0]
        }
        {
          int32_t netmask = mx_aton_r(&rp.ip.netmask[0]);
 8008116:	f107 0314 	add.w	r3, r7, #20
 800811a:	3314      	adds	r3, #20
 800811c:	4618      	mov	r0, r3
 800811e:	f7fe fe35 	bl	8006d8c <mx_aton_r>
 8008122:	4603      	mov	r3, r0
 8008124:	663b      	str	r3, [r7, #96]	; 0x60
          (void)memcpy(&Obj->NetSettings.IP_Mask[0], &netmask, sizeof(Obj->NetSettings.IP_Mask));
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	33e1      	adds	r3, #225	; 0xe1
 800812a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800812c:	601a      	str	r2, [r3, #0]
        }
        {
          int32_t gw = mx_aton_r(&rp.ip.gateway[0]);
 800812e:	f107 0314 	add.w	r3, r7, #20
 8008132:	3324      	adds	r3, #36	; 0x24
 8008134:	4618      	mov	r0, r3
 8008136:	f7fe fe29 	bl	8006d8c <mx_aton_r>
 800813a:	4603      	mov	r3, r0
 800813c:	65fb      	str	r3, [r7, #92]	; 0x5c
          (void)memcpy(&Obj->NetSettings.Gateway_Addr[0], &gw, sizeof(Obj->NetSettings.Gateway_Addr));
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	33e5      	adds	r3, #229	; 0xe5
 8008142:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008144:	601a      	str	r2, [r3, #0]
        }
        {
          int32_t dns = mx_aton_r(&rp.ip.dnserver[0]);
 8008146:	f107 0314 	add.w	r3, r7, #20
 800814a:	3334      	adds	r3, #52	; 0x34
 800814c:	4618      	mov	r0, r3
 800814e:	f7fe fe1d 	bl	8006d8c <mx_aton_r>
 8008152:	4603      	mov	r3, r0
 8008154:	65bb      	str	r3, [r7, #88]	; 0x58
          (void)memcpy(&Obj->NetSettings.DNS1[0], &dns, sizeof(Obj->NetSettings.DNS1));
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	33e9      	adds	r3, #233	; 0xe9
 800815a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800815c:	601a      	str	r2, [r3, #0]
        }
        (void)memcpy(IpAddr, Obj->NetSettings.IP_Addr, sizeof(Obj->NetSettings.IP_Addr));
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	33dd      	adds	r3, #221	; 0xdd
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	461a      	mov	r2, r3
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	601a      	str	r2, [r3, #0]
        ret = MX_WIFI_STATUS_OK;
 800816a:	2300      	movs	r3, #0
 800816c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      }
    }
  }

  return ret;
 8008170:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 8008174:	4618      	mov	r0, r3
 8008176:	3770      	adds	r7, #112	; 0x70
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}

0800817c <MX_WIFI_StartAP>:
  * SoftAP
  */


MX_WIFI_STATUS_T MX_WIFI_StartAP(MX_WIFIObject_t *Obj, MX_WIFI_APSettings_t *ApSettings)
{
 800817c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800817e:	b0b1      	sub	sp, #196	; 0xc4
 8008180:	af02      	add	r7, sp, #8
 8008182:	6078      	str	r0, [r7, #4]
 8008184:	6039      	str	r1, [r7, #0]
  MX_WIFI_STATUS_T ret = MX_WIFI_STATUS_ERROR;
 8008186:	23ff      	movs	r3, #255	; 0xff
 8008188:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7

  if ((NULL != Obj) && (NULL != ApSettings))
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d064      	beq.n	800825c <MX_WIFI_StartAP+0xe0>
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d061      	beq.n	800825c <MX_WIFI_StartAP+0xe0>
  {
    wifi_softap_start_cparams_t cp = {0};
 8008198:	f107 0308 	add.w	r3, r7, #8
 800819c:	22a4      	movs	r2, #164	; 0xa4
 800819e:	2100      	movs	r1, #0
 80081a0:	4618      	mov	r0, r3
 80081a2:	f00e fc9b 	bl	8016adc <memset>
    const uint16_t cp_size = (uint16_t)(sizeof(cp));
 80081a6:	23a4      	movs	r3, #164	; 0xa4
 80081a8:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
    int32_t status = MIPC_CODE_ERROR;
 80081ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80081b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    uint16_t status_size = (uint16_t)sizeof(status);
 80081b4:	2304      	movs	r3, #4
 80081b6:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae

    (void)memcpy((char *)cp.ssid, ApSettings->SSID, sizeof(cp.ssid));
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	f107 0408 	add.w	r4, r7, #8
 80081c0:	461d      	mov	r5, r3
 80081c2:	6828      	ldr	r0, [r5, #0]
 80081c4:	6869      	ldr	r1, [r5, #4]
 80081c6:	68aa      	ldr	r2, [r5, #8]
 80081c8:	68eb      	ldr	r3, [r5, #12]
 80081ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80081cc:	6928      	ldr	r0, [r5, #16]
 80081ce:	6969      	ldr	r1, [r5, #20]
 80081d0:	69aa      	ldr	r2, [r5, #24]
 80081d2:	69eb      	ldr	r3, [r5, #28]
 80081d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    (void)memcpy((char *)cp.key, ApSettings->pswd, sizeof(cp.key));
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	3321      	adds	r3, #33	; 0x21
 80081da:	461c      	mov	r4, r3
 80081dc:	f107 0628 	add.w	r6, r7, #40	; 0x28
 80081e0:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 80081e4:	4635      	mov	r5, r6
 80081e6:	4623      	mov	r3, r4
 80081e8:	6818      	ldr	r0, [r3, #0]
 80081ea:	6859      	ldr	r1, [r3, #4]
 80081ec:	689a      	ldr	r2, [r3, #8]
 80081ee:	68db      	ldr	r3, [r3, #12]
 80081f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80081f2:	3410      	adds	r4, #16
 80081f4:	3610      	adds	r6, #16
 80081f6:	4564      	cmp	r4, ip
 80081f8:	d1f4      	bne.n	80081e4 <MX_WIFI_StartAP+0x68>
    cp.channel = (int32_t)ApSettings->channel;
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8008200:	66bb      	str	r3, [r7, #104]	; 0x68
    (void)memcpy(&cp.ip, &ApSettings->ip, sizeof(cp.ip));
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	3363      	adds	r3, #99	; 0x63
 8008206:	461c      	mov	r4, r3
 8008208:	f107 066c 	add.w	r6, r7, #108	; 0x6c
 800820c:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 8008210:	4635      	mov	r5, r6
 8008212:	4623      	mov	r3, r4
 8008214:	6818      	ldr	r0, [r3, #0]
 8008216:	6859      	ldr	r1, [r3, #4]
 8008218:	689a      	ldr	r2, [r3, #8]
 800821a:	68db      	ldr	r3, [r3, #12]
 800821c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800821e:	3410      	adds	r4, #16
 8008220:	3610      	adds	r6, #16
 8008222:	4564      	cmp	r4, ip
 8008224:	d1f4      	bne.n	8008210 <MX_WIFI_StartAP+0x94>

    if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_WIFI_SOFTAP_START_CMD,
 8008226:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 800822a:	f8b7 20b4 	ldrh.w	r2, [r7, #180]	; 0xb4
 800822e:	f107 0108 	add.w	r1, r7, #8
 8008232:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8008236:	9301      	str	r3, [sp, #4]
 8008238:	f107 03ae 	add.w	r3, r7, #174	; 0xae
 800823c:	9300      	str	r3, [sp, #0]
 800823e:	4603      	mov	r3, r0
 8008240:	f240 1005 	movw	r0, #261	; 0x105
 8008244:	f7ff f93e 	bl	80074c4 <mipc_request>
 8008248:	4603      	mov	r3, r0
 800824a:	2b00      	cmp	r3, #0
 800824c:	d106      	bne.n	800825c <MX_WIFI_StartAP+0xe0>
                                          (uint8_t *)&cp, cp_size,
                                          (uint8_t *)&status, &status_size,
                                          3000))
    {
      if (MIPC_CODE_SUCCESS == status)
 800824e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008252:	2b00      	cmp	r3, #0
 8008254:	d102      	bne.n	800825c <MX_WIFI_StartAP+0xe0>
      {
        ret = MX_WIFI_STATUS_OK;
 8008256:	2300      	movs	r3, #0
 8008258:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
      }
    }
  }

  return ret;
 800825c:	f997 30b7 	ldrsb.w	r3, [r7, #183]	; 0xb7
}
 8008260:	4618      	mov	r0, r3
 8008262:	37bc      	adds	r7, #188	; 0xbc
 8008264:	46bd      	mov	sp, r7
 8008266:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008268 <MX_WIFI_StopAP>:


MX_WIFI_STATUS_T MX_WIFI_StopAP(MX_WIFIObject_t *Obj)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b088      	sub	sp, #32
 800826c:	af02      	add	r7, sp, #8
 800826e:	6078      	str	r0, [r7, #4]
  MX_WIFI_STATUS_T ret = MX_WIFI_STATUS_ERROR;
 8008270:	23ff      	movs	r3, #255	; 0xff
 8008272:	75fb      	strb	r3, [r7, #23]

  if (NULL != Obj)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d01b      	beq.n	80082b2 <MX_WIFI_StopAP+0x4a>
  {
    int32_t status = MIPC_CODE_ERROR;
 800827a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800827e:	613b      	str	r3, [r7, #16]
    uint16_t status_size = (uint16_t)sizeof(status);
 8008280:	2304      	movs	r3, #4
 8008282:	81fb      	strh	r3, [r7, #14]

    if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_WIFI_SOFTAP_STOP_CMD, NULL, 0,
 8008284:	f107 0210 	add.w	r2, r7, #16
 8008288:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800828c:	9301      	str	r3, [sp, #4]
 800828e:	f107 030e 	add.w	r3, r7, #14
 8008292:	9300      	str	r3, [sp, #0]
 8008294:	4613      	mov	r3, r2
 8008296:	2200      	movs	r2, #0
 8008298:	2100      	movs	r1, #0
 800829a:	f44f 7083 	mov.w	r0, #262	; 0x106
 800829e:	f7ff f911 	bl	80074c4 <mipc_request>
 80082a2:	4603      	mov	r3, r0
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d104      	bne.n	80082b2 <MX_WIFI_StopAP+0x4a>
                                          (uint8_t *)&status, &status_size,
                                          MX_WIFI_CMD_TIMEOUT))
    {
      if (MIPC_CODE_SUCCESS == status)
 80082a8:	693b      	ldr	r3, [r7, #16]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d101      	bne.n	80082b2 <MX_WIFI_StopAP+0x4a>
      {
        ret = MX_WIFI_STATUS_OK;
 80082ae:	2300      	movs	r3, #0
 80082b0:	75fb      	strb	r3, [r7, #23]
      }
    }
  }

  return ret;
 80082b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80082b6:	4618      	mov	r0, r3
 80082b8:	3718      	adds	r7, #24
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}

080082be <MX_WIFI_Socket_create>:


#if (MX_WIFI_NETWORK_BYPASS_MODE == 0)

int32_t MX_WIFI_Socket_create(MX_WIFIObject_t *Obj, int32_t Domain, int32_t Type, int32_t Protocol)
{
 80082be:	b580      	push	{r7, lr}
 80082c0:	b08e      	sub	sp, #56	; 0x38
 80082c2:	af02      	add	r7, sp, #8
 80082c4:	60f8      	str	r0, [r7, #12]
 80082c6:	60b9      	str	r1, [r7, #8]
 80082c8:	607a      	str	r2, [r7, #4]
 80082ca:	603b      	str	r3, [r7, #0]
  int32_t ret_fd = -1;
 80082cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80082d0:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (NULL != Obj)
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d026      	beq.n	8008326 <MX_WIFI_Socket_create+0x68>
  {
    socket_create_cparams_t cp = {0};
 80082d8:	f107 031c 	add.w	r3, r7, #28
 80082dc:	2200      	movs	r2, #0
 80082de:	601a      	str	r2, [r3, #0]
 80082e0:	605a      	str	r2, [r3, #4]
 80082e2:	609a      	str	r2, [r3, #8]
    const uint16_t cp_size = (uint16_t)(sizeof(cp));
 80082e4:	230c      	movs	r3, #12
 80082e6:	857b      	strh	r3, [r7, #42]	; 0x2a
    socket_create_rparams_t rp = {0};
 80082e8:	2300      	movs	r3, #0
 80082ea:	61bb      	str	r3, [r7, #24]
    uint16_t rp_size = (uint16_t)sizeof(rp);
 80082ec:	2304      	movs	r3, #4
 80082ee:	82fb      	strh	r3, [r7, #22]

    cp.domain = Domain;
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	61fb      	str	r3, [r7, #28]
    cp.type = Type;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	623b      	str	r3, [r7, #32]
    cp.protocol = Protocol;
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	627b      	str	r3, [r7, #36]	; 0x24

    if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_SOCKET_CREATE_CMD,
 80082fc:	f107 0018 	add.w	r0, r7, #24
 8008300:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8008302:	f107 011c 	add.w	r1, r7, #28
 8008306:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800830a:	9301      	str	r3, [sp, #4]
 800830c:	f107 0316 	add.w	r3, r7, #22
 8008310:	9300      	str	r3, [sp, #0]
 8008312:	4603      	mov	r3, r0
 8008314:	f240 2001 	movw	r0, #513	; 0x201
 8008318:	f7ff f8d4 	bl	80074c4 <mipc_request>
 800831c:	4603      	mov	r3, r0
 800831e:	2b00      	cmp	r3, #0
 8008320:	d101      	bne.n	8008326 <MX_WIFI_Socket_create+0x68>
                                          (uint8_t *)&cp, cp_size,
                                          (uint8_t *)&rp, &rp_size,
                                          MX_WIFI_CMD_TIMEOUT))
    {
      ret_fd = rp.fd;
 8008322:	69bb      	ldr	r3, [r7, #24]
 8008324:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }

  return ret_fd;
 8008326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8008328:	4618      	mov	r0, r3
 800832a:	3730      	adds	r7, #48	; 0x30
 800832c:	46bd      	mov	sp, r7
 800832e:	bd80      	pop	{r7, pc}

08008330 <MX_WIFI_Socket_setsockopt>:


int32_t MX_WIFI_Socket_setsockopt(MX_WIFIObject_t *Obj, int32_t SockFd, int32_t Level,
                                  int32_t OptName, const void *OptValue, int32_t OptLen)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b092      	sub	sp, #72	; 0x48
 8008334:	af02      	add	r7, sp, #8
 8008336:	60f8      	str	r0, [r7, #12]
 8008338:	60b9      	str	r1, [r7, #8]
 800833a:	607a      	str	r2, [r7, #4]
 800833c:	603b      	str	r3, [r7, #0]
  MX_WIFI_STATUS_T ret = MX_WIFI_STATUS_ERROR;
 800833e:	23ff      	movs	r3, #255	; 0xff
 8008340:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if ((NULL != Obj) && (0 <= SockFd) && (NULL != OptValue) && (0 < OptLen))
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d044      	beq.n	80083d4 <MX_WIFI_Socket_setsockopt+0xa4>
 800834a:	68bb      	ldr	r3, [r7, #8]
 800834c:	2b00      	cmp	r3, #0
 800834e:	db41      	blt.n	80083d4 <MX_WIFI_Socket_setsockopt+0xa4>
 8008350:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008352:	2b00      	cmp	r3, #0
 8008354:	d03e      	beq.n	80083d4 <MX_WIFI_Socket_setsockopt+0xa4>
 8008356:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008358:	2b00      	cmp	r3, #0
 800835a:	dd3b      	ble.n	80083d4 <MX_WIFI_Socket_setsockopt+0xa4>
  {
    socket_setsockopt_cparams_t cp = {0};
 800835c:	f107 0314 	add.w	r3, r7, #20
 8008360:	2220      	movs	r2, #32
 8008362:	2100      	movs	r1, #0
 8008364:	4618      	mov	r0, r3
 8008366:	f00e fbb9 	bl	8016adc <memset>
    const uint16_t cp_size = (uint16_t)(sizeof(cp));
 800836a:	2320      	movs	r3, #32
 800836c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    socket_setsockopt_rparams_t rp = {0};
 800836e:	2300      	movs	r3, #0
 8008370:	63bb      	str	r3, [r7, #56]	; 0x38
    uint16_t rp_size = (uint16_t)sizeof(rp);
 8008372:	2304      	movs	r3, #4
 8008374:	86fb      	strh	r3, [r7, #54]	; 0x36

    rp.status = MIPC_CODE_ERROR;
 8008376:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800837a:	63bb      	str	r3, [r7, #56]	; 0x38

    cp.socket = SockFd;
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	617b      	str	r3, [r7, #20]
    cp.level = Level;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	61bb      	str	r3, [r7, #24]
    cp.optname = OptName;
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	61fb      	str	r3, [r7, #28]
    cp.optlen = OptLen > (int32_t)sizeof(cp.optval) ? (mx_socklen_t)sizeof(cp.optval) : (mx_socklen_t)OptLen;
 8008388:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800838a:	2b10      	cmp	r3, #16
 800838c:	bfa8      	it	ge
 800838e:	2310      	movge	r3, #16
 8008390:	623b      	str	r3, [r7, #32]

    (void)memcpy(&cp.optval[0], OptValue, cp.optlen);
 8008392:	6a3a      	ldr	r2, [r7, #32]
 8008394:	f107 0314 	add.w	r3, r7, #20
 8008398:	3310      	adds	r3, #16
 800839a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800839c:	4618      	mov	r0, r3
 800839e:	f00e fc5c 	bl	8016c5a <memcpy>

    if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_SOCKET_SETSOCKOPT_CMD,
 80083a2:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80083a6:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 80083a8:	f107 0114 	add.w	r1, r7, #20
 80083ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80083b0:	9301      	str	r3, [sp, #4]
 80083b2:	f107 0336 	add.w	r3, r7, #54	; 0x36
 80083b6:	9300      	str	r3, [sp, #0]
 80083b8:	4603      	mov	r3, r0
 80083ba:	f240 200a 	movw	r0, #522	; 0x20a
 80083be:	f7ff f881 	bl	80074c4 <mipc_request>
 80083c2:	4603      	mov	r3, r0
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d105      	bne.n	80083d4 <MX_WIFI_Socket_setsockopt+0xa4>
                                          (uint8_t *)&cp, cp_size,
                                          (uint8_t *)&rp, &rp_size,
                                          MX_WIFI_CMD_TIMEOUT))
    {
      if (rp.status == MIPC_CODE_SUCCESS)
 80083c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d102      	bne.n	80083d4 <MX_WIFI_Socket_setsockopt+0xa4>
      {
        ret = MX_WIFI_STATUS_OK;
 80083ce:	2300      	movs	r3, #0
 80083d0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      }
    }
  }

  return (int32_t)ret;
 80083d4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80083d8:	4618      	mov	r0, r3
 80083da:	3740      	adds	r7, #64	; 0x40
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd80      	pop	{r7, pc}

080083e0 <MX_WIFI_Socket_getsockopt>:


int32_t MX_WIFI_Socket_getsockopt(MX_WIFIObject_t *Obj, int32_t SockFd, int32_t Level,
                                  int32_t OptName, void *OptValue, uint32_t *OptLen)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b092      	sub	sp, #72	; 0x48
 80083e4:	af02      	add	r7, sp, #8
 80083e6:	60f8      	str	r0, [r7, #12]
 80083e8:	60b9      	str	r1, [r7, #8]
 80083ea:	607a      	str	r2, [r7, #4]
 80083ec:	603b      	str	r3, [r7, #0]
  MX_WIFI_STATUS_T ret = MX_WIFI_STATUS_ERROR;
 80083ee:	23ff      	movs	r3, #255	; 0xff
 80083f0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if ((NULL != Obj) && (0 <= SockFd) && (NULL != OptValue) && (NULL != OptLen))
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d04e      	beq.n	8008498 <MX_WIFI_Socket_getsockopt+0xb8>
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	db4b      	blt.n	8008498 <MX_WIFI_Socket_getsockopt+0xb8>
 8008400:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008402:	2b00      	cmp	r3, #0
 8008404:	d048      	beq.n	8008498 <MX_WIFI_Socket_getsockopt+0xb8>
 8008406:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008408:	2b00      	cmp	r3, #0
 800840a:	d045      	beq.n	8008498 <MX_WIFI_Socket_getsockopt+0xb8>
  {
    socket_getsockopt_cparams_t cp = {0};
 800840c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008410:	2200      	movs	r2, #0
 8008412:	601a      	str	r2, [r3, #0]
 8008414:	605a      	str	r2, [r3, #4]
 8008416:	609a      	str	r2, [r3, #8]
    const uint16_t cp_size = (uint16_t)(sizeof(cp));
 8008418:	230c      	movs	r3, #12
 800841a:	87bb      	strh	r3, [r7, #60]	; 0x3c
    socket_getsockopt_rparams_t rp = {0};
 800841c:	f107 0318 	add.w	r3, r7, #24
 8008420:	2200      	movs	r2, #0
 8008422:	601a      	str	r2, [r3, #0]
 8008424:	605a      	str	r2, [r3, #4]
 8008426:	609a      	str	r2, [r3, #8]
 8008428:	60da      	str	r2, [r3, #12]
 800842a:	611a      	str	r2, [r3, #16]
 800842c:	615a      	str	r2, [r3, #20]
    uint16_t rp_size = (uint16_t)sizeof(rp);
 800842e:	2318      	movs	r3, #24
 8008430:	82fb      	strh	r3, [r7, #22]

    rp.status = MIPC_CODE_ERROR;
 8008432:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008436:	61bb      	str	r3, [r7, #24]

    cp.socket = SockFd;
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	633b      	str	r3, [r7, #48]	; 0x30
    cp.level = Level;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	637b      	str	r3, [r7, #52]	; 0x34
    cp.optname = OptName;
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	63bb      	str	r3, [r7, #56]	; 0x38

    if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_SOCKET_GETSOCKOPT_CMD,
 8008444:	f107 0018 	add.w	r0, r7, #24
 8008448:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800844a:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800844e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008452:	9301      	str	r3, [sp, #4]
 8008454:	f107 0316 	add.w	r3, r7, #22
 8008458:	9300      	str	r3, [sp, #0]
 800845a:	4603      	mov	r3, r0
 800845c:	f240 2009 	movw	r0, #521	; 0x209
 8008460:	f7ff f830 	bl	80074c4 <mipc_request>
 8008464:	4603      	mov	r3, r0
 8008466:	2b00      	cmp	r3, #0
 8008468:	d116      	bne.n	8008498 <MX_WIFI_Socket_getsockopt+0xb8>
                                          (uint8_t *)&cp, cp_size,
                                          (uint8_t *)&rp, &rp_size,
                                          MX_WIFI_CMD_TIMEOUT))
    {
      if (rp.status == MIPC_CODE_SUCCESS)
 800846a:	69bb      	ldr	r3, [r7, #24]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d113      	bne.n	8008498 <MX_WIFI_Socket_getsockopt+0xb8>
      {
        *OptLen = (rp.optlen > *OptLen) ? *OptLen : rp.optlen;
 8008470:	69fa      	ldr	r2, [r7, #28]
 8008472:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	429a      	cmp	r2, r3
 8008478:	bf28      	it	cs
 800847a:	461a      	movcs	r2, r3
 800847c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800847e:	601a      	str	r2, [r3, #0]
        (void)memcpy(OptValue, &rp.optval[0], *OptLen);
 8008480:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008482:	681a      	ldr	r2, [r3, #0]
 8008484:	f107 0318 	add.w	r3, r7, #24
 8008488:	3308      	adds	r3, #8
 800848a:	4619      	mov	r1, r3
 800848c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800848e:	f00e fbe4 	bl	8016c5a <memcpy>
        ret = MX_WIFI_STATUS_OK;
 8008492:	2300      	movs	r3, #0
 8008494:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      }
    }
  }

  return (int32_t)ret;
 8008498:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800849c:	4618      	mov	r0, r3
 800849e:	3740      	adds	r7, #64	; 0x40
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bd80      	pop	{r7, pc}

080084a4 <MX_WIFI_Socket_bind>:


int32_t MX_WIFI_Socket_bind(MX_WIFIObject_t *Obj, int32_t SockFd,
                            const struct mx_sockaddr *Addr, int32_t AddrLen)
{
 80084a4:	b5b0      	push	{r4, r5, r7, lr}
 80084a6:	b09a      	sub	sp, #104	; 0x68
 80084a8:	af02      	add	r7, sp, #8
 80084aa:	62f8      	str	r0, [r7, #44]	; 0x2c
 80084ac:	62b9      	str	r1, [r7, #40]	; 0x28
 80084ae:	627a      	str	r2, [r7, #36]	; 0x24
 80084b0:	623b      	str	r3, [r7, #32]
  MX_WIFI_STATUS_T ret = MX_WIFI_STATUS_PARAM_ERROR;
 80084b2:	23fc      	movs	r3, #252	; 0xfc
 80084b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

  if ((NULL != Obj) && (0 <= SockFd) && (NULL != Addr) && (0 < AddrLen))
 80084b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d077      	beq.n	80085ae <MX_WIFI_Socket_bind+0x10a>
 80084be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	db74      	blt.n	80085ae <MX_WIFI_Socket_bind+0x10a>
 80084c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d071      	beq.n	80085ae <MX_WIFI_Socket_bind+0x10a>
 80084ca:	6a3b      	ldr	r3, [r7, #32]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	dd6e      	ble.n	80085ae <MX_WIFI_Socket_bind+0x10a>
  {
    socket_bind_cparams_t cp = {0};
 80084d0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80084d4:	2224      	movs	r2, #36	; 0x24
 80084d6:	2100      	movs	r1, #0
 80084d8:	4618      	mov	r0, r3
 80084da:	f00e faff 	bl	8016adc <memset>
    const uint16_t cp_size = (uint16_t)(sizeof(cp));
 80084de:	2324      	movs	r3, #36	; 0x24
 80084e0:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
    bool is_to_do_mipc_request = true;
 80084e4:	2301      	movs	r3, #1
 80084e6:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e

    ret = MX_WIFI_STATUS_ERROR;
 80084ea:	23ff      	movs	r3, #255	; 0xff
 80084ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

    if ((Addr->sa_family == MX_AF_INET) && (AddrLen == sizeof(struct mx_sockaddr_in)))
 80084f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f2:	785b      	ldrb	r3, [r3, #1]
 80084f4:	2b02      	cmp	r3, #2
 80084f6:	d114      	bne.n	8008522 <MX_WIFI_Socket_bind+0x7e>
 80084f8:	6a3b      	ldr	r3, [r7, #32]
 80084fa:	2b10      	cmp	r3, #16
 80084fc:	d111      	bne.n	8008522 <MX_WIFI_Socket_bind+0x7e>
    {
      cp.addr = mx_s_addr_in_to_packed(Addr);
 80084fe:	463b      	mov	r3, r7
 8008500:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008502:	4618      	mov	r0, r3
 8008504:	f000 ff73 	bl	80093ee <mx_s_addr_in_to_packed>
 8008508:	f107 0434 	add.w	r4, r7, #52	; 0x34
 800850c:	463d      	mov	r5, r7
 800850e:	6828      	ldr	r0, [r5, #0]
 8008510:	6869      	ldr	r1, [r5, #4]
 8008512:	68aa      	ldr	r2, [r5, #8]
 8008514:	68eb      	ldr	r3, [r5, #12]
 8008516:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008518:	6928      	ldr	r0, [r5, #16]
 800851a:	6969      	ldr	r1, [r5, #20]
 800851c:	69aa      	ldr	r2, [r5, #24]
 800851e:	c407      	stmia	r4!, {r0, r1, r2}
 8008520:	e01b      	b.n	800855a <MX_WIFI_Socket_bind+0xb6>
    }
    else if ((Addr->sa_family == MX_AF_INET6) && (AddrLen == sizeof(struct mx_sockaddr_in6)))
 8008522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008524:	785b      	ldrb	r3, [r3, #1]
 8008526:	2b0a      	cmp	r3, #10
 8008528:	d114      	bne.n	8008554 <MX_WIFI_Socket_bind+0xb0>
 800852a:	6a3b      	ldr	r3, [r7, #32]
 800852c:	2b1c      	cmp	r3, #28
 800852e:	d111      	bne.n	8008554 <MX_WIFI_Socket_bind+0xb0>
    {
      cp.addr = mx_s_addr_in6_to_packed(Addr);
 8008530:	463b      	mov	r3, r7
 8008532:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008534:	4618      	mov	r0, r3
 8008536:	f000 ffbe 	bl	80094b6 <mx_s_addr_in6_to_packed>
 800853a:	f107 0434 	add.w	r4, r7, #52	; 0x34
 800853e:	463d      	mov	r5, r7
 8008540:	6828      	ldr	r0, [r5, #0]
 8008542:	6869      	ldr	r1, [r5, #4]
 8008544:	68aa      	ldr	r2, [r5, #8]
 8008546:	68eb      	ldr	r3, [r5, #12]
 8008548:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800854a:	6928      	ldr	r0, [r5, #16]
 800854c:	6969      	ldr	r1, [r5, #20]
 800854e:	69aa      	ldr	r2, [r5, #24]
 8008550:	c407      	stmia	r4!, {r0, r1, r2}
 8008552:	e002      	b.n	800855a <MX_WIFI_Socket_bind+0xb6>
    }
    else
    {
      is_to_do_mipc_request = false;
 8008554:	2300      	movs	r3, #0
 8008556:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    }

    if (is_to_do_mipc_request)
 800855a:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800855e:	2b00      	cmp	r3, #0
 8008560:	d025      	beq.n	80085ae <MX_WIFI_Socket_bind+0x10a>
    {
      socket_bind_rparams_t rp = {0};
 8008562:	2300      	movs	r3, #0
 8008564:	65bb      	str	r3, [r7, #88]	; 0x58
      uint16_t rp_size = (uint16_t)sizeof(rp);
 8008566:	2304      	movs	r3, #4
 8008568:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

      rp.status =  MIPC_CODE_ERROR;
 800856c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008570:	65bb      	str	r3, [r7, #88]	; 0x58

      cp.socket = SockFd;
 8008572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008574:	633b      	str	r3, [r7, #48]	; 0x30
      cp.length = (mx_socklen_t)AddrLen;
 8008576:	6a3b      	ldr	r3, [r7, #32]
 8008578:	653b      	str	r3, [r7, #80]	; 0x50

      if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_SOCKET_BIND_CMD,
 800857a:	f107 0058 	add.w	r0, r7, #88	; 0x58
 800857e:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8008582:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8008586:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800858a:	9301      	str	r3, [sp, #4]
 800858c:	f107 0356 	add.w	r3, r7, #86	; 0x56
 8008590:	9300      	str	r3, [sp, #0]
 8008592:	4603      	mov	r3, r0
 8008594:	f240 200b 	movw	r0, #523	; 0x20b
 8008598:	f7fe ff94 	bl	80074c4 <mipc_request>
 800859c:	4603      	mov	r3, r0
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d105      	bne.n	80085ae <MX_WIFI_Socket_bind+0x10a>
                                            (uint8_t *)&cp, cp_size,
                                            (uint8_t *)&rp, &rp_size,
                                            MX_WIFI_CMD_TIMEOUT))
      {
        if (rp.status == MIPC_CODE_SUCCESS)
 80085a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d102      	bne.n	80085ae <MX_WIFI_Socket_bind+0x10a>
        {
          ret = MX_WIFI_STATUS_OK;
 80085a8:	2300      	movs	r3, #0
 80085aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        }
      }
    }
  }

  return (int32_t)ret;
 80085ae:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	3760      	adds	r7, #96	; 0x60
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bdb0      	pop	{r4, r5, r7, pc}

080085ba <MX_WIFI_Socket_listen>:


int32_t MX_WIFI_Socket_listen(MX_WIFIObject_t *Obj, int32_t sockfd, int32_t backlog)
{
 80085ba:	b580      	push	{r7, lr}
 80085bc:	b08c      	sub	sp, #48	; 0x30
 80085be:	af02      	add	r7, sp, #8
 80085c0:	60f8      	str	r0, [r7, #12]
 80085c2:	60b9      	str	r1, [r7, #8]
 80085c4:	607a      	str	r2, [r7, #4]
  MX_WIFI_STATUS_T ret = MX_WIFI_STATUS_ERROR;
 80085c6:	23ff      	movs	r3, #255	; 0xff
 80085c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if ((NULL == Obj) || (sockfd < 0))
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d002      	beq.n	80085d8 <MX_WIFI_Socket_listen+0x1e>
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	da03      	bge.n	80085e0 <MX_WIFI_Socket_listen+0x26>
  {
    ret = MX_WIFI_STATUS_PARAM_ERROR;
 80085d8:	23fc      	movs	r3, #252	; 0xfc
 80085da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80085de:	e02a      	b.n	8008636 <MX_WIFI_Socket_listen+0x7c>
  }
  else
  {
    socket_listen_cparams_t cp = {0};
 80085e0:	f107 031c 	add.w	r3, r7, #28
 80085e4:	2200      	movs	r2, #0
 80085e6:	601a      	str	r2, [r3, #0]
 80085e8:	605a      	str	r2, [r3, #4]
    const uint16_t cp_size = (uint16_t)(sizeof(cp));
 80085ea:	2308      	movs	r3, #8
 80085ec:	84bb      	strh	r3, [r7, #36]	; 0x24
    socket_listen_rparams_t rp = {0};
 80085ee:	2300      	movs	r3, #0
 80085f0:	61bb      	str	r3, [r7, #24]
    uint16_t rp_size = (uint16_t)sizeof(rp);
 80085f2:	2304      	movs	r3, #4
 80085f4:	82fb      	strh	r3, [r7, #22]

    rp.status =  MIPC_CODE_ERROR;
 80085f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80085fa:	61bb      	str	r3, [r7, #24]

    cp.socket = sockfd;
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	61fb      	str	r3, [r7, #28]
    cp.backlog = backlog;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	623b      	str	r3, [r7, #32]

    if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_SOCKET_LISTEN_CMD,
 8008604:	f107 0018 	add.w	r0, r7, #24
 8008608:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800860a:	f107 011c 	add.w	r1, r7, #28
 800860e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008612:	9301      	str	r3, [sp, #4]
 8008614:	f107 0316 	add.w	r3, r7, #22
 8008618:	9300      	str	r3, [sp, #0]
 800861a:	4603      	mov	r3, r0
 800861c:	f44f 7003 	mov.w	r0, #524	; 0x20c
 8008620:	f7fe ff50 	bl	80074c4 <mipc_request>
 8008624:	4603      	mov	r3, r0
 8008626:	2b00      	cmp	r3, #0
 8008628:	d105      	bne.n	8008636 <MX_WIFI_Socket_listen+0x7c>
                                          (uint8_t *)&cp, cp_size,
                                          (uint8_t *)&rp, &rp_size,
                                          MX_WIFI_CMD_TIMEOUT))
    {
      if (rp.status == MIPC_CODE_SUCCESS)
 800862a:	69bb      	ldr	r3, [r7, #24]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d102      	bne.n	8008636 <MX_WIFI_Socket_listen+0x7c>
      {
        ret = MX_WIFI_STATUS_OK;
 8008630:	2300      	movs	r3, #0
 8008632:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
    }
  }

  return (int32_t)ret;
 8008636:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800863a:	4618      	mov	r0, r3
 800863c:	3728      	adds	r7, #40	; 0x28
 800863e:	46bd      	mov	sp, r7
 8008640:	bd80      	pop	{r7, pc}

08008642 <MX_WIFI_Socket_accept>:


int32_t MX_WIFI_Socket_accept(MX_WIFIObject_t *Obj, int32_t SockFd,
                              struct mx_sockaddr *Addr, uint32_t *AddrLen)
{
 8008642:	b5b0      	push	{r4, r5, r7, lr}
 8008644:	b0a0      	sub	sp, #128	; 0x80
 8008646:	af02      	add	r7, sp, #8
 8008648:	63f8      	str	r0, [r7, #60]	; 0x3c
 800864a:	63b9      	str	r1, [r7, #56]	; 0x38
 800864c:	637a      	str	r2, [r7, #52]	; 0x34
 800864e:	633b      	str	r3, [r7, #48]	; 0x30
  int32_t ret_fd = (int32_t)MX_WIFI_STATUS_PARAM_ERROR;
 8008650:	f06f 0303 	mvn.w	r3, #3
 8008654:	677b      	str	r3, [r7, #116]	; 0x74

  if ((NULL != Obj) && (0 <= SockFd) && (NULL != Addr) && (NULL != AddrLen))
 8008656:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008658:	2b00      	cmp	r3, #0
 800865a:	d075      	beq.n	8008748 <MX_WIFI_Socket_accept+0x106>
 800865c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800865e:	2b00      	cmp	r3, #0
 8008660:	db72      	blt.n	8008748 <MX_WIFI_Socket_accept+0x106>
 8008662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008664:	2b00      	cmp	r3, #0
 8008666:	d06f      	beq.n	8008748 <MX_WIFI_Socket_accept+0x106>
 8008668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800866a:	2b00      	cmp	r3, #0
 800866c:	d06c      	beq.n	8008748 <MX_WIFI_Socket_accept+0x106>
  {
    socket_accept_cparams_t cp = {0};
 800866e:	2300      	movs	r3, #0
 8008670:	66fb      	str	r3, [r7, #108]	; 0x6c
    const uint16_t cp_size = (uint16_t)(sizeof(cp));
 8008672:	2304      	movs	r3, #4
 8008674:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
    socket_accept_rparams_t rp = {0};
 8008678:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800867c:	2224      	movs	r2, #36	; 0x24
 800867e:	2100      	movs	r1, #0
 8008680:	4618      	mov	r0, r3
 8008682:	f00e fa2b 	bl	8016adc <memset>
    uint16_t rp_size = (uint16_t)sizeof(rp);
 8008686:	2324      	movs	r3, #36	; 0x24
 8008688:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a

    rp.socket = -1;
 800868c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008690:	647b      	str	r3, [r7, #68]	; 0x44
    ret_fd = -1;
 8008692:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008696:	677b      	str	r3, [r7, #116]	; 0x74
    cp.socket = SockFd;
 8008698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800869a:	66fb      	str	r3, [r7, #108]	; 0x6c

    if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_SOCKET_ACCEPT_CMD,
 800869c:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80086a0:	f8b7 2072 	ldrh.w	r2, [r7, #114]	; 0x72
 80086a4:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 80086a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80086ac:	9301      	str	r3, [sp, #4]
 80086ae:	f107 036a 	add.w	r3, r7, #106	; 0x6a
 80086b2:	9300      	str	r3, [sp, #0]
 80086b4:	4603      	mov	r3, r0
 80086b6:	f240 200d 	movw	r0, #525	; 0x20d
 80086ba:	f7fe ff03 	bl	80074c4 <mipc_request>
 80086be:	4603      	mov	r3, r0
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d141      	bne.n	8008748 <MX_WIFI_Socket_accept+0x106>
                                          (uint8_t *)&cp, cp_size,
                                          (uint8_t *)&rp, &rp_size,
                                          MX_WIFI_CMD_TIMEOUT))
    {
      if (rp.socket >= 0)
 80086c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	db3e      	blt.n	8008748 <MX_WIFI_Socket_accept+0x106>
      {
        ret_fd = rp.socket;
 80086ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086cc:	677b      	str	r3, [r7, #116]	; 0x74

        if ((rp.addr.ss_family == MX_AF_INET) && (rp.addr.s2_len == 16) && (*AddrLen == sizeof(struct mx_sockaddr_in)))
 80086ce:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80086d2:	2b02      	cmp	r3, #2
 80086d4:	d117      	bne.n	8008706 <MX_WIFI_Socket_accept+0xc4>
 80086d6:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80086da:	2b10      	cmp	r3, #16
 80086dc:	d113      	bne.n	8008706 <MX_WIFI_Socket_accept+0xc4>
 80086de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	2b10      	cmp	r3, #16
 80086e4:	d10f      	bne.n	8008706 <MX_WIFI_Socket_accept+0xc4>
        {
          *((struct mx_sockaddr_in *)((void *)Addr)) = mx_s_addr_in_from_packed(&rp.addr);
 80086e6:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 80086e8:	f107 0220 	add.w	r2, r7, #32
 80086ec:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80086f0:	3304      	adds	r3, #4
 80086f2:	4619      	mov	r1, r3
 80086f4:	4610      	mov	r0, r2
 80086f6:	f000 feb0 	bl	800945a <mx_s_addr_in_from_packed>
 80086fa:	f107 0320 	add.w	r3, r7, #32
 80086fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008700:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8008704:	e020      	b.n	8008748 <MX_WIFI_Socket_accept+0x106>
        }
        else if ((rp.addr.ss_family == MX_AF_INET6) && (rp.addr.s2_len == sizeof(struct mx_sockaddr_storage)) && \
 8008706:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800870a:	2b0a      	cmp	r3, #10
 800870c:	d119      	bne.n	8008742 <MX_WIFI_Socket_accept+0x100>
 800870e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8008712:	2b1c      	cmp	r3, #28
 8008714:	d115      	bne.n	8008742 <MX_WIFI_Socket_accept+0x100>
                 (*AddrLen == sizeof(struct mx_sockaddr_in6)))
 8008716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008718:	681b      	ldr	r3, [r3, #0]
        else if ((rp.addr.ss_family == MX_AF_INET6) && (rp.addr.s2_len == sizeof(struct mx_sockaddr_storage)) && \
 800871a:	2b1c      	cmp	r3, #28
 800871c:	d111      	bne.n	8008742 <MX_WIFI_Socket_accept+0x100>
        {
          *((struct mx_sockaddr_in6 *)((void *)Addr)) = mx_s_addr_in6_from_packed(&rp.addr);
 800871e:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 8008720:	463a      	mov	r2, r7
 8008722:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008726:	3304      	adds	r3, #4
 8008728:	4619      	mov	r1, r3
 800872a:	4610      	mov	r0, r2
 800872c:	f000 ff08 	bl	8009540 <mx_s_addr_in6_from_packed>
 8008730:	4625      	mov	r5, r4
 8008732:	463c      	mov	r4, r7
 8008734:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008736:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008738:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800873c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8008740:	e002      	b.n	8008748 <MX_WIFI_Socket_accept+0x106>
        }
        else
        {
          ret_fd = -1;
 8008742:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008746:	677b      	str	r3, [r7, #116]	; 0x74
        }
      }
    }
  }

  return ret_fd;
 8008748:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
 800874a:	4618      	mov	r0, r3
 800874c:	3778      	adds	r7, #120	; 0x78
 800874e:	46bd      	mov	sp, r7
 8008750:	bdb0      	pop	{r4, r5, r7, pc}

08008752 <MX_WIFI_Socket_connect>:


int32_t MX_WIFI_Socket_connect(MX_WIFIObject_t *Obj, int32_t SockFd,
                               const struct mx_sockaddr *Addr, int32_t AddrLen)
{
 8008752:	b5b0      	push	{r4, r5, r7, lr}
 8008754:	b09a      	sub	sp, #104	; 0x68
 8008756:	af02      	add	r7, sp, #8
 8008758:	62f8      	str	r0, [r7, #44]	; 0x2c
 800875a:	62b9      	str	r1, [r7, #40]	; 0x28
 800875c:	627a      	str	r2, [r7, #36]	; 0x24
 800875e:	623b      	str	r3, [r7, #32]
  MX_WIFI_STATUS_T ret = MX_WIFI_STATUS_PARAM_ERROR;
 8008760:	23fc      	movs	r3, #252	; 0xfc
 8008762:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

  if ((NULL != Obj) && (0 <= SockFd) && (NULL != Addr) && (0 < AddrLen))
 8008766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008768:	2b00      	cmp	r3, #0
 800876a:	d074      	beq.n	8008856 <MX_WIFI_Socket_connect+0x104>
 800876c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800876e:	2b00      	cmp	r3, #0
 8008770:	db71      	blt.n	8008856 <MX_WIFI_Socket_connect+0x104>
 8008772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008774:	2b00      	cmp	r3, #0
 8008776:	d06e      	beq.n	8008856 <MX_WIFI_Socket_connect+0x104>
 8008778:	6a3b      	ldr	r3, [r7, #32]
 800877a:	2b00      	cmp	r3, #0
 800877c:	dd6b      	ble.n	8008856 <MX_WIFI_Socket_connect+0x104>
  {
    socket_connect_cparams_t cp = {0};
 800877e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008782:	2224      	movs	r2, #36	; 0x24
 8008784:	2100      	movs	r1, #0
 8008786:	4618      	mov	r0, r3
 8008788:	f00e f9a8 	bl	8016adc <memset>
    const uint16_t cp_size = (uint16_t)(sizeof(cp));
 800878c:	2324      	movs	r3, #36	; 0x24
 800878e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
    bool is_to_do_mipc_request = true;
 8008792:	2301      	movs	r3, #1
 8008794:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e

    if ((Addr->sa_family == MX_AF_INET) && (AddrLen == sizeof(struct mx_sockaddr_in)))
 8008798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800879a:	785b      	ldrb	r3, [r3, #1]
 800879c:	2b02      	cmp	r3, #2
 800879e:	d114      	bne.n	80087ca <MX_WIFI_Socket_connect+0x78>
 80087a0:	6a3b      	ldr	r3, [r7, #32]
 80087a2:	2b10      	cmp	r3, #16
 80087a4:	d111      	bne.n	80087ca <MX_WIFI_Socket_connect+0x78>
    {
      cp.addr = mx_s_addr_in_to_packed(Addr);
 80087a6:	463b      	mov	r3, r7
 80087a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80087aa:	4618      	mov	r0, r3
 80087ac:	f000 fe1f 	bl	80093ee <mx_s_addr_in_to_packed>
 80087b0:	f107 0434 	add.w	r4, r7, #52	; 0x34
 80087b4:	463d      	mov	r5, r7
 80087b6:	6828      	ldr	r0, [r5, #0]
 80087b8:	6869      	ldr	r1, [r5, #4]
 80087ba:	68aa      	ldr	r2, [r5, #8]
 80087bc:	68eb      	ldr	r3, [r5, #12]
 80087be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80087c0:	6928      	ldr	r0, [r5, #16]
 80087c2:	6969      	ldr	r1, [r5, #20]
 80087c4:	69aa      	ldr	r2, [r5, #24]
 80087c6:	c407      	stmia	r4!, {r0, r1, r2}
 80087c8:	e01b      	b.n	8008802 <MX_WIFI_Socket_connect+0xb0>
    }
    else if ((Addr->sa_family == MX_AF_INET6) && (AddrLen == sizeof(struct mx_sockaddr_in6)))
 80087ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087cc:	785b      	ldrb	r3, [r3, #1]
 80087ce:	2b0a      	cmp	r3, #10
 80087d0:	d114      	bne.n	80087fc <MX_WIFI_Socket_connect+0xaa>
 80087d2:	6a3b      	ldr	r3, [r7, #32]
 80087d4:	2b1c      	cmp	r3, #28
 80087d6:	d111      	bne.n	80087fc <MX_WIFI_Socket_connect+0xaa>
    {
      cp.addr = mx_s_addr_in6_to_packed(Addr);
 80087d8:	463b      	mov	r3, r7
 80087da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80087dc:	4618      	mov	r0, r3
 80087de:	f000 fe6a 	bl	80094b6 <mx_s_addr_in6_to_packed>
 80087e2:	f107 0434 	add.w	r4, r7, #52	; 0x34
 80087e6:	463d      	mov	r5, r7
 80087e8:	6828      	ldr	r0, [r5, #0]
 80087ea:	6869      	ldr	r1, [r5, #4]
 80087ec:	68aa      	ldr	r2, [r5, #8]
 80087ee:	68eb      	ldr	r3, [r5, #12]
 80087f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80087f2:	6928      	ldr	r0, [r5, #16]
 80087f4:	6969      	ldr	r1, [r5, #20]
 80087f6:	69aa      	ldr	r2, [r5, #24]
 80087f8:	c407      	stmia	r4!, {r0, r1, r2}
 80087fa:	e002      	b.n	8008802 <MX_WIFI_Socket_connect+0xb0>
    }
    else
    {
      is_to_do_mipc_request = false;
 80087fc:	2300      	movs	r3, #0
 80087fe:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    }

    if (is_to_do_mipc_request)
 8008802:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8008806:	2b00      	cmp	r3, #0
 8008808:	d025      	beq.n	8008856 <MX_WIFI_Socket_connect+0x104>
    {
      socket_connect_rparams_t rp = {0};
 800880a:	2300      	movs	r3, #0
 800880c:	65bb      	str	r3, [r7, #88]	; 0x58
      uint16_t rp_size = (uint16_t)sizeof(rp);
 800880e:	2304      	movs	r3, #4
 8008810:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

      rp.status = MIPC_CODE_ERROR;
 8008814:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008818:	65bb      	str	r3, [r7, #88]	; 0x58

      cp.socket = SockFd;
 800881a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800881c:	633b      	str	r3, [r7, #48]	; 0x30
      cp.length = (mx_socklen_t)AddrLen;
 800881e:	6a3b      	ldr	r3, [r7, #32]
 8008820:	653b      	str	r3, [r7, #80]	; 0x50

      if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_SOCKET_CONNECT_CMD,
 8008822:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8008826:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 800882a:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800882e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008832:	9301      	str	r3, [sp, #4]
 8008834:	f107 0356 	add.w	r3, r7, #86	; 0x56
 8008838:	9300      	str	r3, [sp, #0]
 800883a:	4603      	mov	r3, r0
 800883c:	f240 2002 	movw	r0, #514	; 0x202
 8008840:	f7fe fe40 	bl	80074c4 <mipc_request>
 8008844:	4603      	mov	r3, r0
 8008846:	2b00      	cmp	r3, #0
 8008848:	d105      	bne.n	8008856 <MX_WIFI_Socket_connect+0x104>
                                            (uint8_t *)&cp, cp_size,
                                            (uint8_t *)&rp, &rp_size,
                                            MX_WIFI_CMD_TIMEOUT))
      {
        if (rp.status == MIPC_CODE_SUCCESS)
 800884a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800884c:	2b00      	cmp	r3, #0
 800884e:	d102      	bne.n	8008856 <MX_WIFI_Socket_connect+0x104>
        {
          ret = MX_WIFI_STATUS_OK;
 8008850:	2300      	movs	r3, #0
 8008852:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        }
      }
    }
  }

  return (int32_t)ret;
 8008856:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 800885a:	4618      	mov	r0, r3
 800885c:	3760      	adds	r7, #96	; 0x60
 800885e:	46bd      	mov	sp, r7
 8008860:	bdb0      	pop	{r4, r5, r7, pc}

08008862 <MX_WIFI_Socket_shutdown>:


int32_t MX_WIFI_Socket_shutdown(MX_WIFIObject_t *Obj, int32_t SockFd, int32_t Mode)
{
 8008862:	b580      	push	{r7, lr}
 8008864:	b08c      	sub	sp, #48	; 0x30
 8008866:	af02      	add	r7, sp, #8
 8008868:	60f8      	str	r0, [r7, #12]
 800886a:	60b9      	str	r1, [r7, #8]
 800886c:	607a      	str	r2, [r7, #4]
  MX_WIFI_STATUS_T ret = MX_WIFI_STATUS_PARAM_ERROR;
 800886e:	23fc      	movs	r3, #252	; 0xfc
 8008870:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if ((NULL != Obj) && (0 <= SockFd))
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d02d      	beq.n	80088d6 <MX_WIFI_Socket_shutdown+0x74>
 800887a:	68bb      	ldr	r3, [r7, #8]
 800887c:	2b00      	cmp	r3, #0
 800887e:	db2a      	blt.n	80088d6 <MX_WIFI_Socket_shutdown+0x74>
  {
    socket_shutdown_cparams_t cp = {0};
 8008880:	f107 031c 	add.w	r3, r7, #28
 8008884:	2200      	movs	r2, #0
 8008886:	601a      	str	r2, [r3, #0]
 8008888:	605a      	str	r2, [r3, #4]
    const uint16_t cp_size = (uint16_t)(sizeof(cp));
 800888a:	2308      	movs	r3, #8
 800888c:	84bb      	strh	r3, [r7, #36]	; 0x24
    socket_shutdown_rparams_t rp = {0};
 800888e:	2300      	movs	r3, #0
 8008890:	61bb      	str	r3, [r7, #24]
    uint16_t rp_size = (uint16_t)sizeof(rp);
 8008892:	2304      	movs	r3, #4
 8008894:	82fb      	strh	r3, [r7, #22]

    rp.status = MIPC_CODE_ERROR;
 8008896:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800889a:	61bb      	str	r3, [r7, #24]
    cp.filedes = SockFd;
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	61fb      	str	r3, [r7, #28]
    cp.how = Mode;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	623b      	str	r3, [r7, #32]

    if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_SOCKET_SHUTDOWN_CMD,
 80088a4:	f107 0018 	add.w	r0, r7, #24
 80088a8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80088aa:	f107 011c 	add.w	r1, r7, #28
 80088ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80088b2:	9301      	str	r3, [sp, #4]
 80088b4:	f107 0316 	add.w	r3, r7, #22
 80088b8:	9300      	str	r3, [sp, #0]
 80088ba:	4603      	mov	r3, r0
 80088bc:	f240 2007 	movw	r0, #519	; 0x207
 80088c0:	f7fe fe00 	bl	80074c4 <mipc_request>
 80088c4:	4603      	mov	r3, r0
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d105      	bne.n	80088d6 <MX_WIFI_Socket_shutdown+0x74>
                                          (uint8_t *)&cp, cp_size,
                                          (uint8_t *)&rp, &rp_size,
                                          MX_WIFI_CMD_TIMEOUT))
    {
      if (rp.status == MIPC_CODE_SUCCESS)
 80088ca:	69bb      	ldr	r3, [r7, #24]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d102      	bne.n	80088d6 <MX_WIFI_Socket_shutdown+0x74>
      {
        ret = MX_WIFI_STATUS_OK;
 80088d0:	2300      	movs	r3, #0
 80088d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
    }
  }

  return (int32_t)ret;
 80088d6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80088da:	4618      	mov	r0, r3
 80088dc:	3728      	adds	r7, #40	; 0x28
 80088de:	46bd      	mov	sp, r7
 80088e0:	bd80      	pop	{r7, pc}

080088e2 <MX_WIFI_Socket_close>:


int32_t MX_WIFI_Socket_close(MX_WIFIObject_t *Obj, int32_t SockFd)
{
 80088e2:	b580      	push	{r7, lr}
 80088e4:	b088      	sub	sp, #32
 80088e6:	af02      	add	r7, sp, #8
 80088e8:	6078      	str	r0, [r7, #4]
 80088ea:	6039      	str	r1, [r7, #0]
  MX_WIFI_STATUS_T ret = MX_WIFI_STATUS_PARAM_ERROR;
 80088ec:	23fc      	movs	r3, #252	; 0xfc
 80088ee:	75fb      	strb	r3, [r7, #23]

  if ((NULL != Obj) && (0 <= SockFd))
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d027      	beq.n	8008946 <MX_WIFI_Socket_close+0x64>
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	db24      	blt.n	8008946 <MX_WIFI_Socket_close+0x64>
  {
    socket_close_cparams_t cp = {0};
 80088fc:	2300      	movs	r3, #0
 80088fe:	613b      	str	r3, [r7, #16]
    const uint16_t cp_size = (uint16_t)(sizeof(cp));
 8008900:	2304      	movs	r3, #4
 8008902:	82bb      	strh	r3, [r7, #20]
    socket_close_rparams_t rp = {0};
 8008904:	2300      	movs	r3, #0
 8008906:	60fb      	str	r3, [r7, #12]
    uint16_t rp_size = (uint16_t)sizeof(rp);
 8008908:	2304      	movs	r3, #4
 800890a:	817b      	strh	r3, [r7, #10]

    rp.status = MIPC_CODE_ERROR;
 800890c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008910:	60fb      	str	r3, [r7, #12]
    cp.filedes = SockFd;
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	613b      	str	r3, [r7, #16]

    if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_SOCKET_CLOSE_CMD,
 8008916:	f107 000c 	add.w	r0, r7, #12
 800891a:	8aba      	ldrh	r2, [r7, #20]
 800891c:	f107 0110 	add.w	r1, r7, #16
 8008920:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008924:	9301      	str	r3, [sp, #4]
 8008926:	f107 030a 	add.w	r3, r7, #10
 800892a:	9300      	str	r3, [sp, #0]
 800892c:	4603      	mov	r3, r0
 800892e:	f44f 7002 	mov.w	r0, #520	; 0x208
 8008932:	f7fe fdc7 	bl	80074c4 <mipc_request>
 8008936:	4603      	mov	r3, r0
 8008938:	2b00      	cmp	r3, #0
 800893a:	d104      	bne.n	8008946 <MX_WIFI_Socket_close+0x64>
                                          (uint8_t *)&cp, cp_size,
                                          (uint8_t *)&rp, &rp_size,
                                          MX_WIFI_CMD_TIMEOUT))
    {
      if (rp.status == MIPC_CODE_SUCCESS)
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d101      	bne.n	8008946 <MX_WIFI_Socket_close+0x64>
      {
        ret = MX_WIFI_STATUS_OK;
 8008942:	2300      	movs	r3, #0
 8008944:	75fb      	strb	r3, [r7, #23]
      }
    }
  }

  return (int32_t)ret;
 8008946:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800894a:	4618      	mov	r0, r3
 800894c:	3718      	adds	r7, #24
 800894e:	46bd      	mov	sp, r7
 8008950:	bd80      	pop	{r7, pc}

08008952 <MX_WIFI_Socket_send>:


int32_t MX_WIFI_Socket_send(MX_WIFIObject_t *Obj, int32_t SockFd, const uint8_t *Buf,
                            int32_t Len, int32_t flags)
{
 8008952:	b580      	push	{r7, lr}
 8008954:	b08c      	sub	sp, #48	; 0x30
 8008956:	af02      	add	r7, sp, #8
 8008958:	60f8      	str	r0, [r7, #12]
 800895a:	60b9      	str	r1, [r7, #8]
 800895c:	607a      	str	r2, [r7, #4]
 800895e:	603b      	str	r3, [r7, #0]
  int32_t ret = (int32_t)MX_WIFI_STATUS_PARAM_ERROR;
 8008960:	f06f 0303 	mvn.w	r3, #3
 8008964:	627b      	str	r3, [r7, #36]	; 0x24

  if ((NULL != Obj) && (0 <= SockFd) && (NULL != Buf) && (0 < Len))
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d050      	beq.n	8008a0e <MX_WIFI_Socket_send+0xbc>
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	2b00      	cmp	r3, #0
 8008970:	db4d      	blt.n	8008a0e <MX_WIFI_Socket_send+0xbc>
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d04a      	beq.n	8008a0e <MX_WIFI_Socket_send+0xbc>
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	2b00      	cmp	r3, #0
 800897c:	dd47      	ble.n	8008a0e <MX_WIFI_Socket_send+0xbc>
  {
    socket_send_cparams_t *cp = NULL;
 800897e:	2300      	movs	r3, #0
 8008980:	61fb      	str	r3, [r7, #28]
    socket_send_rparams_t rp = {0};
 8008982:	2300      	movs	r3, #0
 8008984:	617b      	str	r3, [r7, #20]
    uint16_t rp_size = (uint16_t)sizeof(rp);
 8008986:	2304      	movs	r3, #4
 8008988:	827b      	strh	r3, [r7, #18]
    size_t data_len = (size_t)Len;
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	623b      	str	r3, [r7, #32]

    ret = (int32_t)MX_WIFI_STATUS_ERROR;
 800898e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008992:	627b      	str	r3, [r7, #36]	; 0x24

    if ((data_len + sizeof(socket_send_cparams_t) - 1) > MX_WIFI_IPC_PAYLOAD_SIZE)
 8008994:	6a3b      	ldr	r3, [r7, #32]
 8008996:	330c      	adds	r3, #12
 8008998:	f640 12be 	movw	r2, #2494	; 0x9be
 800899c:	4293      	cmp	r3, r2
 800899e:	d902      	bls.n	80089a6 <MX_WIFI_Socket_send+0x54>
    {
      /* Restrict to the length which corresponds to the maximum size of the IPC transfer. */
      data_len = MX_WIFI_IPC_PAYLOAD_SIZE - (sizeof(socket_send_cparams_t) - 1);
 80089a0:	f640 13b2 	movw	r3, #2482	; 0x9b2
 80089a4:	623b      	str	r3, [r7, #32]
    }

    /* useless: rp.sent = 0; */

    const uint16_t cp_size = (uint16_t)(sizeof(socket_send_cparams_t) - 1 + data_len);
 80089a6:	6a3b      	ldr	r3, [r7, #32]
 80089a8:	b29b      	uxth	r3, r3
 80089aa:	330c      	adds	r3, #12
 80089ac:	837b      	strh	r3, [r7, #26]
    cp = (socket_send_cparams_t *)MX_WIFI_MALLOC(cp_size);
 80089ae:	8b7b      	ldrh	r3, [r7, #26]
 80089b0:	4618      	mov	r0, r3
 80089b2:	f00c fa25 	bl	8014e00 <malloc>
 80089b6:	4603      	mov	r3, r0
 80089b8:	61fb      	str	r3, [r7, #28]
    if (NULL != cp)
 80089ba:	69fb      	ldr	r3, [r7, #28]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d026      	beq.n	8008a0e <MX_WIFI_Socket_send+0xbc>
    {
      cp->socket = SockFd;
 80089c0:	69fb      	ldr	r3, [r7, #28]
 80089c2:	68ba      	ldr	r2, [r7, #8]
 80089c4:	601a      	str	r2, [r3, #0]
      (void)memcpy(&cp->buffer[0], Buf, data_len);
 80089c6:	69fb      	ldr	r3, [r7, #28]
 80089c8:	330c      	adds	r3, #12
 80089ca:	6a3a      	ldr	r2, [r7, #32]
 80089cc:	6879      	ldr	r1, [r7, #4]
 80089ce:	4618      	mov	r0, r3
 80089d0:	f00e f943 	bl	8016c5a <memcpy>
      cp->size = data_len;
 80089d4:	69fb      	ldr	r3, [r7, #28]
 80089d6:	6a3a      	ldr	r2, [r7, #32]
 80089d8:	605a      	str	r2, [r3, #4]
      cp->flags = flags;
 80089da:	69fb      	ldr	r3, [r7, #28]
 80089dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80089de:	609a      	str	r2, [r3, #8]
      if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_SOCKET_SEND_CMD,
 80089e0:	f107 0114 	add.w	r1, r7, #20
 80089e4:	8b7a      	ldrh	r2, [r7, #26]
 80089e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80089ea:	9301      	str	r3, [sp, #4]
 80089ec:	f107 0312 	add.w	r3, r7, #18
 80089f0:	9300      	str	r3, [sp, #0]
 80089f2:	460b      	mov	r3, r1
 80089f4:	69f9      	ldr	r1, [r7, #28]
 80089f6:	f240 2003 	movw	r0, #515	; 0x203
 80089fa:	f7fe fd63 	bl	80074c4 <mipc_request>
 80089fe:	4603      	mov	r3, r0
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d101      	bne.n	8008a08 <MX_WIFI_Socket_send+0xb6>
                                            (uint8_t *)cp, cp_size,
                                            (uint8_t *)&rp, &rp_size,
                                            MX_WIFI_CMD_TIMEOUT))
      {
        ret = rp.sent;
 8008a04:	697b      	ldr	r3, [r7, #20]
 8008a06:	627b      	str	r3, [r7, #36]	; 0x24
      }
      MX_WIFI_FREE(cp);
 8008a08:	69f8      	ldr	r0, [r7, #28]
 8008a0a:	f00c fa01 	bl	8014e10 <free>
    }
  }

  return ret;
 8008a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008a10:	4618      	mov	r0, r3
 8008a12:	3728      	adds	r7, #40	; 0x28
 8008a14:	46bd      	mov	sp, r7
 8008a16:	bd80      	pop	{r7, pc}

08008a18 <MX_WIFI_Socket_sendto>:


int32_t MX_WIFI_Socket_sendto(MX_WIFIObject_t *Obj, int32_t SockFd, const uint8_t *Buf,
                              int32_t Len, int32_t Flags,
                              struct mx_sockaddr *ToAddr, int32_t ToAddrLen)
{
 8008a18:	b5b0      	push	{r4, r5, r7, lr}
 8008a1a:	b096      	sub	sp, #88	; 0x58
 8008a1c:	af02      	add	r7, sp, #8
 8008a1e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008a20:	62b9      	str	r1, [r7, #40]	; 0x28
 8008a22:	627a      	str	r2, [r7, #36]	; 0x24
 8008a24:	623b      	str	r3, [r7, #32]
  int32_t ret = (int32_t)MX_WIFI_STATUS_PARAM_ERROR;
 8008a26:	f06f 0303 	mvn.w	r3, #3
 8008a2a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if ((NULL != Obj) && (0 <= SockFd) && (NULL != Buf) && (0 < Len) && (NULL != ToAddr) && (0 < ToAddrLen))
 8008a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	f000 80a7 	beq.w	8008b82 <MX_WIFI_Socket_sendto+0x16a>
 8008a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	f2c0 80a3 	blt.w	8008b82 <MX_WIFI_Socket_sendto+0x16a>
 8008a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	f000 809f 	beq.w	8008b82 <MX_WIFI_Socket_sendto+0x16a>
 8008a44:	6a3b      	ldr	r3, [r7, #32]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	f340 809b 	ble.w	8008b82 <MX_WIFI_Socket_sendto+0x16a>
 8008a4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	f000 8097 	beq.w	8008b82 <MX_WIFI_Socket_sendto+0x16a>
 8008a54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	f340 8093 	ble.w	8008b82 <MX_WIFI_Socket_sendto+0x16a>
  {
    socket_sendto_cparams_t *cp = NULL;
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	643b      	str	r3, [r7, #64]	; 0x40
    size_t data_len = (size_t)Len;
 8008a60:	6a3b      	ldr	r3, [r7, #32]
 8008a62:	64bb      	str	r3, [r7, #72]	; 0x48

    ret = (int32_t)MX_WIFI_STATUS_ERROR;
 8008a64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008a68:	64fb      	str	r3, [r7, #76]	; 0x4c

    if ((data_len + sizeof(socket_sendto_cparams_t) - 1) > MX_WIFI_IPC_PAYLOAD_SIZE)
 8008a6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a6c:	332c      	adds	r3, #44	; 0x2c
 8008a6e:	f640 12be 	movw	r2, #2494	; 0x9be
 8008a72:	4293      	cmp	r3, r2
 8008a74:	d902      	bls.n	8008a7c <MX_WIFI_Socket_sendto+0x64>
    {
      /* Restrict to the length which corresponds to the maximum size of the IPC transfer. */
      data_len = MX_WIFI_IPC_PAYLOAD_SIZE - (sizeof(socket_sendto_cparams_t) - 1);
 8008a76:	f640 1392 	movw	r3, #2450	; 0x992
 8008a7a:	64bb      	str	r3, [r7, #72]	; 0x48
    }

    const uint16_t cp_size = (uint16_t)(sizeof(socket_sendto_cparams_t) - 1 + data_len);
 8008a7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a7e:	b29b      	uxth	r3, r3
 8008a80:	332c      	adds	r3, #44	; 0x2c
 8008a82:	87fb      	strh	r3, [r7, #62]	; 0x3e

    cp = (socket_sendto_cparams_t *)MX_WIFI_MALLOC(cp_size);
 8008a84:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008a86:	4618      	mov	r0, r3
 8008a88:	f00c f9ba 	bl	8014e00 <malloc>
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	643b      	str	r3, [r7, #64]	; 0x40

    if (NULL != cp)
 8008a90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d075      	beq.n	8008b82 <MX_WIFI_Socket_sendto+0x16a>
    {
      bool is_to_do_mipc_request = true;
 8008a96:	2301      	movs	r3, #1
 8008a98:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      socket_sendto_rparams_t rp = {0};
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	63bb      	str	r3, [r7, #56]	; 0x38
      uint16_t rp_size = (uint16_t)sizeof(rp);
 8008aa0:	2304      	movs	r3, #4
 8008aa2:	86fb      	strh	r3, [r7, #54]	; 0x36

      /* useless: rp.sent = 0; */
      cp->socket = SockFd;
 8008aa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008aa6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008aa8:	601a      	str	r2, [r3, #0]
      (void)memcpy(&cp->buffer[0], Buf, data_len);
 8008aaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008aac:	332c      	adds	r3, #44	; 0x2c
 8008aae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008ab0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	f00e f8d1 	bl	8016c5a <memcpy>
      cp->size = data_len;
 8008ab8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008aba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008abc:	605a      	str	r2, [r3, #4]
      cp->flags = Flags;
 8008abe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ac0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008ac2:	609a      	str	r2, [r3, #8]

      if ((ToAddr->sa_family == MX_AF_INET) && (ToAddrLen == sizeof(struct mx_sockaddr_in)))
 8008ac4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008ac6:	785b      	ldrb	r3, [r3, #1]
 8008ac8:	2b02      	cmp	r3, #2
 8008aca:	d11a      	bne.n	8008b02 <MX_WIFI_Socket_sendto+0xea>
 8008acc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008ace:	2b10      	cmp	r3, #16
 8008ad0:	d117      	bne.n	8008b02 <MX_WIFI_Socket_sendto+0xea>
      {
        cp->addr = mx_s_addr_in_to_packed(ToAddr);
 8008ad2:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 8008ad4:	463b      	mov	r3, r7
 8008ad6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8008ad8:	4618      	mov	r0, r3
 8008ada:	f000 fc88 	bl	80093ee <mx_s_addr_in_to_packed>
 8008ade:	f104 030c 	add.w	r3, r4, #12
 8008ae2:	463a      	mov	r2, r7
 8008ae4:	6814      	ldr	r4, [r2, #0]
 8008ae6:	6850      	ldr	r0, [r2, #4]
 8008ae8:	6891      	ldr	r1, [r2, #8]
 8008aea:	68d5      	ldr	r5, [r2, #12]
 8008aec:	601c      	str	r4, [r3, #0]
 8008aee:	6058      	str	r0, [r3, #4]
 8008af0:	6099      	str	r1, [r3, #8]
 8008af2:	60dd      	str	r5, [r3, #12]
 8008af4:	6914      	ldr	r4, [r2, #16]
 8008af6:	6950      	ldr	r0, [r2, #20]
 8008af8:	6991      	ldr	r1, [r2, #24]
 8008afa:	611c      	str	r4, [r3, #16]
 8008afc:	6158      	str	r0, [r3, #20]
 8008afe:	6199      	str	r1, [r3, #24]
 8008b00:	e021      	b.n	8008b46 <MX_WIFI_Socket_sendto+0x12e>
      }
      else if ((ToAddr->sa_family == MX_AF_INET6) && (ToAddrLen == sizeof(struct mx_sockaddr_in6)))
 8008b02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b04:	785b      	ldrb	r3, [r3, #1]
 8008b06:	2b0a      	cmp	r3, #10
 8008b08:	d11a      	bne.n	8008b40 <MX_WIFI_Socket_sendto+0x128>
 8008b0a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008b0c:	2b1c      	cmp	r3, #28
 8008b0e:	d117      	bne.n	8008b40 <MX_WIFI_Socket_sendto+0x128>
      {
        cp->addr = mx_s_addr_in6_to_packed(ToAddr);
 8008b10:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 8008b12:	463b      	mov	r3, r7
 8008b14:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8008b16:	4618      	mov	r0, r3
 8008b18:	f000 fccd 	bl	80094b6 <mx_s_addr_in6_to_packed>
 8008b1c:	f104 030c 	add.w	r3, r4, #12
 8008b20:	463a      	mov	r2, r7
 8008b22:	6814      	ldr	r4, [r2, #0]
 8008b24:	6850      	ldr	r0, [r2, #4]
 8008b26:	6891      	ldr	r1, [r2, #8]
 8008b28:	68d5      	ldr	r5, [r2, #12]
 8008b2a:	601c      	str	r4, [r3, #0]
 8008b2c:	6058      	str	r0, [r3, #4]
 8008b2e:	6099      	str	r1, [r3, #8]
 8008b30:	60dd      	str	r5, [r3, #12]
 8008b32:	6914      	ldr	r4, [r2, #16]
 8008b34:	6950      	ldr	r0, [r2, #20]
 8008b36:	6991      	ldr	r1, [r2, #24]
 8008b38:	611c      	str	r4, [r3, #16]
 8008b3a:	6158      	str	r0, [r3, #20]
 8008b3c:	6199      	str	r1, [r3, #24]
 8008b3e:	e002      	b.n	8008b46 <MX_WIFI_Socket_sendto+0x12e>
      }
      else
      {
        is_to_do_mipc_request = false;
 8008b40:	2300      	movs	r3, #0
 8008b42:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }

      if (is_to_do_mipc_request)
 8008b46:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d016      	beq.n	8008b7c <MX_WIFI_Socket_sendto+0x164>
      {
        cp->length = (mx_socklen_t)ToAddrLen;
 8008b4e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008b50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b52:	629a      	str	r2, [r3, #40]	; 0x28

        if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_SOCKET_SENDTO_CMD,
 8008b54:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8008b58:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8008b5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008b5e:	9301      	str	r3, [sp, #4]
 8008b60:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8008b64:	9300      	str	r3, [sp, #0]
 8008b66:	460b      	mov	r3, r1
 8008b68:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008b6a:	f44f 7001 	mov.w	r0, #516	; 0x204
 8008b6e:	f7fe fca9 	bl	80074c4 <mipc_request>
 8008b72:	4603      	mov	r3, r0
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d101      	bne.n	8008b7c <MX_WIFI_Socket_sendto+0x164>
                                              (uint8_t *)cp, cp_size,
                                              (uint8_t *)&rp, &rp_size,
                                              MX_WIFI_CMD_TIMEOUT))
        {
          ret = rp.sent;
 8008b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b7a:	64fb      	str	r3, [r7, #76]	; 0x4c
        }
      }
      MX_WIFI_FREE(cp);
 8008b7c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8008b7e:	f00c f947 	bl	8014e10 <free>
    }
  }

  return ret;
 8008b82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8008b84:	4618      	mov	r0, r3
 8008b86:	3750      	adds	r7, #80	; 0x50
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bdb0      	pop	{r4, r5, r7, pc}

08008b8c <MX_WIFI_Socket_recv>:


int32_t MX_WIFI_Socket_recv(MX_WIFIObject_t *Obj, int32_t SockFd, uint8_t *Buf,
                            int32_t Len, int32_t flags)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b090      	sub	sp, #64	; 0x40
 8008b90:	af02      	add	r7, sp, #8
 8008b92:	60f8      	str	r0, [r7, #12]
 8008b94:	60b9      	str	r1, [r7, #8]
 8008b96:	607a      	str	r2, [r7, #4]
 8008b98:	603b      	str	r3, [r7, #0]
  int32_t ret = (int32_t)MX_WIFI_STATUS_PARAM_ERROR;
 8008b9a:	f06f 0303 	mvn.w	r3, #3
 8008b9e:	637b      	str	r3, [r7, #52]	; 0x34

  if ((NULL != Obj) && (0 <= SockFd) && (NULL != Buf) && (0 < Len))
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d066      	beq.n	8008c74 <MX_WIFI_Socket_recv+0xe8>
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	db63      	blt.n	8008c74 <MX_WIFI_Socket_recv+0xe8>
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d060      	beq.n	8008c74 <MX_WIFI_Socket_recv+0xe8>
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	dd5d      	ble.n	8008c74 <MX_WIFI_Socket_recv+0xe8>
  {
    socket_recv_cparams_t cp = {0};
 8008bb8:	f107 0318 	add.w	r3, r7, #24
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	601a      	str	r2, [r3, #0]
 8008bc0:	605a      	str	r2, [r3, #4]
 8008bc2:	609a      	str	r2, [r3, #8]
    const uint16_t cp_size = (uint16_t)(sizeof(cp));
 8008bc4:	230c      	movs	r3, #12
 8008bc6:	85fb      	strh	r3, [r7, #46]	; 0x2e
    socket_recv_rparams_t *rp = NULL;
 8008bc8:	2300      	movs	r3, #0
 8008bca:	62bb      	str	r3, [r7, #40]	; 0x28
    size_t data_len = (size_t)Len;
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	633b      	str	r3, [r7, #48]	; 0x30
    uint16_t rp_size;

    ret = (int32_t)MX_WIFI_STATUS_ERROR;
 8008bd0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008bd4:	637b      	str	r3, [r7, #52]	; 0x34

    if ((data_len + sizeof(socket_recv_rparams_t) - 1) > MX_WIFI_IPC_PAYLOAD_SIZE)
 8008bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bd8:	3304      	adds	r3, #4
 8008bda:	f640 12be 	movw	r2, #2494	; 0x9be
 8008bde:	4293      	cmp	r3, r2
 8008be0:	d902      	bls.n	8008be8 <MX_WIFI_Socket_recv+0x5c>
    {
      /* Restrict to the length which corresponds to the maximum size of the IPC transfer. */
      data_len = MX_WIFI_IPC_PAYLOAD_SIZE - (sizeof(socket_recv_rparams_t) - 1);
 8008be2:	f640 13ba 	movw	r3, #2490	; 0x9ba
 8008be6:	633b      	str	r3, [r7, #48]	; 0x30
    }

    rp_size = (uint16_t)(sizeof(socket_recv_rparams_t) - 1 + data_len);
 8008be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bea:	b29b      	uxth	r3, r3
 8008bec:	3304      	adds	r3, #4
 8008bee:	b29b      	uxth	r3, r3
 8008bf0:	82fb      	strh	r3, [r7, #22]
    rp = (socket_recv_rparams_t *)MX_WIFI_MALLOC(rp_size);
 8008bf2:	8afb      	ldrh	r3, [r7, #22]
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	f00c f903 	bl	8014e00 <malloc>
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	62bb      	str	r3, [r7, #40]	; 0x28
    if (NULL != rp)
 8008bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d037      	beq.n	8008c74 <MX_WIFI_Socket_recv+0xe8>
    {
      rp->received = 0;
 8008c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c06:	2200      	movs	r2, #0
 8008c08:	701a      	strb	r2, [r3, #0]
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	705a      	strb	r2, [r3, #1]
 8008c0e:	2200      	movs	r2, #0
 8008c10:	709a      	strb	r2, [r3, #2]
 8008c12:	2200      	movs	r2, #0
 8008c14:	70da      	strb	r2, [r3, #3]
      cp.socket = SockFd;
 8008c16:	68bb      	ldr	r3, [r7, #8]
 8008c18:	61bb      	str	r3, [r7, #24]
      cp.size = data_len;
 8008c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c1c:	61fb      	str	r3, [r7, #28]
      cp.flags = flags;
 8008c1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c20:	623b      	str	r3, [r7, #32]
      if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_SOCKET_RECV_CMD,
 8008c22:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008c24:	f107 0118 	add.w	r1, r7, #24
 8008c28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008c2c:	9301      	str	r3, [sp, #4]
 8008c2e:	f107 0316 	add.w	r3, r7, #22
 8008c32:	9300      	str	r3, [sp, #0]
 8008c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c36:	f240 2005 	movw	r0, #517	; 0x205
 8008c3a:	f7fe fc43 	bl	80074c4 <mipc_request>
 8008c3e:	4603      	mov	r3, r0
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d114      	bne.n	8008c6e <MX_WIFI_Socket_recv+0xe2>
                                            (uint8_t *)&cp, cp_size,
                                            (uint8_t *)rp, &rp_size,
                                            MX_WIFI_CMD_TIMEOUT))
      {
        if (rp->received > 0)
 8008c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	dd0d      	ble.n	8008c68 <MX_WIFI_Socket_recv+0xdc>
        {
          const size_t received_len = (size_t)rp->received;
 8008c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	627b      	str	r3, [r7, #36]	; 0x24
          if (received_len <= data_len)
 8008c52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c56:	429a      	cmp	r2, r3
 8008c58:	d806      	bhi.n	8008c68 <MX_WIFI_Socket_recv+0xdc>
          {
            (void)memcpy(Buf, &rp->buffer[0], received_len);
 8008c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c5c:	3304      	adds	r3, #4
 8008c5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c60:	4619      	mov	r1, r3
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	f00d fff9 	bl	8016c5a <memcpy>
          }
        }
        ret = rp->received;
 8008c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	637b      	str	r3, [r7, #52]	; 0x34
      }
      MX_WIFI_FREE(rp);
 8008c6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c70:	f00c f8ce 	bl	8014e10 <free>
    }
  }

  return ret;
 8008c74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008c76:	4618      	mov	r0, r3
 8008c78:	3738      	adds	r7, #56	; 0x38
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}

08008c7e <MX_WIFI_Socket_recvfrom>:


int32_t MX_WIFI_Socket_recvfrom(MX_WIFIObject_t *Obj, int32_t SockFd, uint8_t *Buf,
                                int32_t Len, int32_t Flags,
                                struct mx_sockaddr *FromAddr, uint32_t *FromAddrLen)
{
 8008c7e:	b5b0      	push	{r4, r5, r7, lr}
 8008c80:	b09e      	sub	sp, #120	; 0x78
 8008c82:	af02      	add	r7, sp, #8
 8008c84:	63f8      	str	r0, [r7, #60]	; 0x3c
 8008c86:	63b9      	str	r1, [r7, #56]	; 0x38
 8008c88:	637a      	str	r2, [r7, #52]	; 0x34
 8008c8a:	633b      	str	r3, [r7, #48]	; 0x30
  int32_t ret = (int32_t)MX_WIFI_STATUS_PARAM_ERROR;
 8008c8c:	f06f 0303 	mvn.w	r3, #3
 8008c90:	66fb      	str	r3, [r7, #108]	; 0x6c

  if ((NULL != Obj) && (0 <= SockFd) && (NULL != Buf) && (0 < Len) && (NULL != FromAddr) && (NULL != FromAddrLen))
 8008c92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	f000 80c5 	beq.w	8008e24 <MX_WIFI_Socket_recvfrom+0x1a6>
 8008c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	f2c0 80c1 	blt.w	8008e24 <MX_WIFI_Socket_recvfrom+0x1a6>
 8008ca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	f000 80bd 	beq.w	8008e24 <MX_WIFI_Socket_recvfrom+0x1a6>
 8008caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	f340 80b9 	ble.w	8008e24 <MX_WIFI_Socket_recvfrom+0x1a6>
 8008cb2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	f000 80b4 	beq.w	8008e24 <MX_WIFI_Socket_recvfrom+0x1a6>
 8008cbc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	f000 80af 	beq.w	8008e24 <MX_WIFI_Socket_recvfrom+0x1a6>
  {
    socket_recvfrom_cparams_t cp = {0};
 8008cc6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008cca:	2200      	movs	r2, #0
 8008ccc:	601a      	str	r2, [r3, #0]
 8008cce:	605a      	str	r2, [r3, #4]
 8008cd0:	609a      	str	r2, [r3, #8]
    const uint16_t cp_size = (uint16_t)(sizeof(cp));
 8008cd2:	230c      	movs	r3, #12
 8008cd4:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    socket_recvfrom_rparams_t *rp = NULL;
 8008cd8:	2300      	movs	r3, #0
 8008cda:	663b      	str	r3, [r7, #96]	; 0x60
    size_t data_len = (size_t)Len;
 8008cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cde:	66bb      	str	r3, [r7, #104]	; 0x68

    ret = (int32_t)MX_WIFI_STATUS_OK;
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	66fb      	str	r3, [r7, #108]	; 0x6c

    if ((data_len + sizeof(socket_recvfrom_rparams_t) - 1) > MX_WIFI_IPC_PAYLOAD_SIZE)
 8008ce4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008ce6:	3324      	adds	r3, #36	; 0x24
 8008ce8:	f640 12be 	movw	r2, #2494	; 0x9be
 8008cec:	4293      	cmp	r3, r2
 8008cee:	d902      	bls.n	8008cf6 <MX_WIFI_Socket_recvfrom+0x78>
    {
      /* Restrict to the length which corresponds to the maximum size of the IPC transfer. */
      data_len = MX_WIFI_IPC_PAYLOAD_SIZE - (sizeof(socket_recvfrom_rparams_t) - 1);
 8008cf0:	f640 139a 	movw	r3, #2458	; 0x99a
 8008cf4:	66bb      	str	r3, [r7, #104]	; 0x68
    }

    uint16_t rp_size = (uint16_t)(sizeof(socket_recvfrom_rparams_t) - 1 + data_len);
 8008cf6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008cf8:	b29b      	uxth	r3, r3
 8008cfa:	3324      	adds	r3, #36	; 0x24
 8008cfc:	b29b      	uxth	r3, r3
 8008cfe:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

    rp = (socket_recvfrom_rparams_t *)MX_WIFI_MALLOC(rp_size);
 8008d02:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8008d06:	4618      	mov	r0, r3
 8008d08:	f00c f87a 	bl	8014e00 <malloc>
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	663b      	str	r3, [r7, #96]	; 0x60

    if (NULL != rp)
 8008d10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	f000 8086 	beq.w	8008e24 <MX_WIFI_Socket_recvfrom+0x1a6>
    {
      rp->received = 0;
 8008d18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	701a      	strb	r2, [r3, #0]
 8008d1e:	2200      	movs	r2, #0
 8008d20:	705a      	strb	r2, [r3, #1]
 8008d22:	2200      	movs	r2, #0
 8008d24:	709a      	strb	r2, [r3, #2]
 8008d26:	2200      	movs	r2, #0
 8008d28:	70da      	strb	r2, [r3, #3]
      cp.socket = SockFd;
 8008d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d2c:	64bb      	str	r3, [r7, #72]	; 0x48
      cp.size = data_len;
 8008d2e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008d30:	64fb      	str	r3, [r7, #76]	; 0x4c
      cp.flags = Flags;
 8008d32:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008d36:	653b      	str	r3, [r7, #80]	; 0x50
      if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_SOCKET_RECVFROM_CMD,
 8008d38:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8008d3c:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8008d40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008d44:	9301      	str	r3, [sp, #4]
 8008d46:	f107 0346 	add.w	r3, r7, #70	; 0x46
 8008d4a:	9300      	str	r3, [sp, #0]
 8008d4c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008d4e:	f240 2006 	movw	r0, #518	; 0x206
 8008d52:	f7fe fbb7 	bl	80074c4 <mipc_request>
 8008d56:	4603      	mov	r3, r0
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d160      	bne.n	8008e1e <MX_WIFI_Socket_recvfrom+0x1a0>
                                            (uint8_t *)&cp, cp_size,
                                            (uint8_t *)rp, &rp_size,
                                            MX_WIFI_CMD_TIMEOUT))
      {
        if (rp->received > 0)
 8008d5c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	dd5c      	ble.n	8008e1e <MX_WIFI_Socket_recvfrom+0x1a0>
        {
          const size_t received_len = (size_t)rp->received;
 8008d64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	65fb      	str	r3, [r7, #92]	; 0x5c

          if (received_len <= data_len)
 8008d6a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008d6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008d6e:	429a      	cmp	r2, r3
 8008d70:	d855      	bhi.n	8008e1e <MX_WIFI_Socket_recvfrom+0x1a0>
          {
            const int32_t buf_size = MIN(Len, rp->received);
 8008d72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d78:	4293      	cmp	r3, r2
 8008d7a:	bfa8      	it	ge
 8008d7c:	4613      	movge	r3, r2
 8008d7e:	65bb      	str	r3, [r7, #88]	; 0x58
            const size_t rp_addr_size = MIN(sizeof(rp->addr), *FromAddrLen);
 8008d80:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	2b1c      	cmp	r3, #28
 8008d88:	bf28      	it	cs
 8008d8a:	231c      	movcs	r3, #28
 8008d8c:	657b      	str	r3, [r7, #84]	; 0x54

            (void)memcpy(Buf, rp->buffer, (size_t)buf_size);
 8008d8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008d90:	3324      	adds	r3, #36	; 0x24
 8008d92:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008d94:	4619      	mov	r1, r3
 8008d96:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008d98:	f00d ff5f 	bl	8016c5a <memcpy>

            if ((rp->addr.ss_family == MX_AF_INET) && (rp->addr.s2_len == 16) && (*FromAddrLen == sizeof(struct mx_sockaddr_in)))
 8008d9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008d9e:	795b      	ldrb	r3, [r3, #5]
 8008da0:	2b02      	cmp	r3, #2
 8008da2:	d118      	bne.n	8008dd6 <MX_WIFI_Socket_recvfrom+0x158>
 8008da4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008da6:	791b      	ldrb	r3, [r3, #4]
 8008da8:	2b10      	cmp	r3, #16
 8008daa:	d114      	bne.n	8008dd6 <MX_WIFI_Socket_recvfrom+0x158>
 8008dac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	2b10      	cmp	r3, #16
 8008db4:	d10f      	bne.n	8008dd6 <MX_WIFI_Socket_recvfrom+0x158>
            {
              *((struct mx_sockaddr_in *)((void *)FromAddr)) = mx_s_addr_in_from_packed(&rp->addr);
 8008db6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008db8:	1d1a      	adds	r2, r3, #4
 8008dba:	f8d7 4084 	ldr.w	r4, [r7, #132]	; 0x84
 8008dbe:	f107 0320 	add.w	r3, r7, #32
 8008dc2:	4611      	mov	r1, r2
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	f000 fb48 	bl	800945a <mx_s_addr_in_from_packed>
 8008dca:	f107 0320 	add.w	r3, r7, #32
 8008dce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008dd0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8008dd4:	e01d      	b.n	8008e12 <MX_WIFI_Socket_recvfrom+0x194>
            }
            else if ((rp->addr.ss_family == MX_AF_INET6) && (rp->addr.s2_len == sizeof(struct mx_sockaddr_storage)) && \
 8008dd6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008dd8:	795b      	ldrb	r3, [r3, #5]
 8008dda:	2b0a      	cmp	r3, #10
 8008ddc:	d119      	bne.n	8008e12 <MX_WIFI_Socket_recvfrom+0x194>
 8008dde:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008de0:	791b      	ldrb	r3, [r3, #4]
 8008de2:	2b1c      	cmp	r3, #28
 8008de4:	d115      	bne.n	8008e12 <MX_WIFI_Socket_recvfrom+0x194>
                     (*FromAddrLen == sizeof(struct mx_sockaddr_in6)))
 8008de6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008dea:	681b      	ldr	r3, [r3, #0]
            else if ((rp->addr.ss_family == MX_AF_INET6) && (rp->addr.s2_len == sizeof(struct mx_sockaddr_storage)) && \
 8008dec:	2b1c      	cmp	r3, #28
 8008dee:	d110      	bne.n	8008e12 <MX_WIFI_Socket_recvfrom+0x194>
            {
              *((struct mx_sockaddr_in6 *)((void *)FromAddr)) = mx_s_addr_in6_from_packed(&rp->addr);
 8008df0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008df2:	1d1a      	adds	r2, r3, #4
 8008df4:	f8d7 4084 	ldr.w	r4, [r7, #132]	; 0x84
 8008df8:	463b      	mov	r3, r7
 8008dfa:	4611      	mov	r1, r2
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	f000 fb9f 	bl	8009540 <mx_s_addr_in6_from_packed>
 8008e02:	4625      	mov	r5, r4
 8008e04:	463c      	mov	r4, r7
 8008e06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008e08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008e0a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8008e0e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
            }

            *FromAddrLen = rp_addr_size;
 8008e12:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008e16:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008e18:	601a      	str	r2, [r3, #0]
            ret = buf_size;
 8008e1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008e1c:	66fb      	str	r3, [r7, #108]	; 0x6c
          }
        }
      }
      MX_WIFI_FREE(rp);
 8008e1e:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8008e20:	f00b fff6 	bl	8014e10 <free>
    }
  }

  return ret;
 8008e24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
 8008e26:	4618      	mov	r0, r3
 8008e28:	3770      	adds	r7, #112	; 0x70
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008e30 <MX_WIFI_Socket_gethostbyname>:


int32_t MX_WIFI_Socket_gethostbyname(MX_WIFIObject_t *Obj, struct mx_sockaddr *Addr, const mx_char_t *Name)
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b0ca      	sub	sp, #296	; 0x128
 8008e34:	af02      	add	r7, sp, #8
 8008e36:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008e3a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8008e3e:	6018      	str	r0, [r3, #0]
 8008e40:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008e44:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8008e48:	6019      	str	r1, [r3, #0]
 8008e4a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008e4e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008e52:	601a      	str	r2, [r3, #0]
  MX_WIFI_STATUS_T ret = MX_WIFI_STATUS_PARAM_ERROR;
 8008e54:	23fc      	movs	r3, #252	; 0xfc
 8008e56:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

  if ((NULL != Obj) && (NULL != Addr) && (NULL != Name) && (strlen(Name) < (size_t)MX_MAX_DNSNAME_LEN))
 8008e5a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008e5e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	f000 808a 	beq.w	8008f7e <MX_WIFI_Socket_gethostbyname+0x14e>
 8008e6a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008e6e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	f000 8082 	beq.w	8008f7e <MX_WIFI_Socket_gethostbyname+0x14e>
 8008e7a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008e7e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d07a      	beq.n	8008f7e <MX_WIFI_Socket_gethostbyname+0x14e>
 8008e88:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008e8c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008e90:	6818      	ldr	r0, [r3, #0]
 8008e92:	f7f7 f9f1 	bl	8000278 <strlen>
 8008e96:	4603      	mov	r3, r0
 8008e98:	2bfc      	cmp	r3, #252	; 0xfc
 8008e9a:	d870      	bhi.n	8008f7e <MX_WIFI_Socket_gethostbyname+0x14e>
  {
    socket_gethostbyname_cparams_t cp = {0};
 8008e9c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008ea0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8008ea4:	4a39      	ldr	r2, [pc, #228]	; (8008f8c <MX_WIFI_Socket_gethostbyname+0x15c>)
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	4611      	mov	r1, r2
 8008eaa:	23fd      	movs	r3, #253	; 0xfd
 8008eac:	461a      	mov	r2, r3
 8008eae:	f00d fed4 	bl	8016c5a <memcpy>
    const uint16_t cp_size = (uint16_t)(sizeof(cp));
 8008eb2:	23fd      	movs	r3, #253	; 0xfd
 8008eb4:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
    socket_gethostbyname_rparams_t rp = {0};
 8008eb8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	601a      	str	r2, [r3, #0]
 8008ec0:	605a      	str	r2, [r3, #4]
    uint16_t rp_size = (uint16_t)sizeof(rp);
 8008ec2:	2308      	movs	r3, #8
 8008ec4:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

    const size_t msize = MIN(sizeof(cp.name), strlen(Name) + 1);
 8008ec8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008ecc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008ed0:	6818      	ldr	r0, [r3, #0]
 8008ed2:	f7f7 f9d1 	bl	8000278 <strlen>
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	3301      	adds	r3, #1
 8008eda:	2bfd      	cmp	r3, #253	; 0xfd
 8008edc:	d809      	bhi.n	8008ef2 <MX_WIFI_Socket_gethostbyname+0xc2>
 8008ede:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008ee2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008ee6:	6818      	ldr	r0, [r3, #0]
 8008ee8:	f7f7 f9c6 	bl	8000278 <strlen>
 8008eec:	4603      	mov	r3, r0
 8008eee:	3301      	adds	r3, #1
 8008ef0:	e000      	b.n	8008ef4 <MX_WIFI_Socket_gethostbyname+0xc4>
 8008ef2:	23fd      	movs	r3, #253	; 0xfd
 8008ef4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

    ret = MX_WIFI_STATUS_ERROR;
 8008ef8:	23ff      	movs	r3, #255	; 0xff
 8008efa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    rp.status =  MIPC_CODE_ERROR;
 8008efe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008f02:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

    (void)memcpy(&cp.name[0], Name, msize);
 8008f06:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008f0a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008f0e:	f107 0010 	add.w	r0, r7, #16
 8008f12:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8008f16:	6819      	ldr	r1, [r3, #0]
 8008f18:	f00d fe9f 	bl	8016c5a <memcpy>

    if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_SOCKET_GETHOSTBYNAME_CMD,
 8008f1c:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8008f20:	f8b7 211c 	ldrh.w	r2, [r7, #284]	; 0x11c
 8008f24:	f107 0110 	add.w	r1, r7, #16
 8008f28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008f2c:	9301      	str	r3, [sp, #4]
 8008f2e:	f507 7387 	add.w	r3, r7, #270	; 0x10e
 8008f32:	9300      	str	r3, [sp, #0]
 8008f34:	4603      	mov	r3, r0
 8008f36:	f240 2011 	movw	r0, #529	; 0x211
 8008f3a:	f7fe fac3 	bl	80074c4 <mipc_request>
 8008f3e:	4603      	mov	r3, r0
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d11c      	bne.n	8008f7e <MX_WIFI_Socket_gethostbyname+0x14e>
                                          (uint8_t *)&cp, cp_size,
                                          (uint8_t *)&rp, &rp_size,
                                          MX_WIFI_CMD_TIMEOUT))
    {
      if (rp.status == MIPC_CODE_SUCCESS)
 8008f44:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d118      	bne.n	8008f7e <MX_WIFI_Socket_gethostbyname+0x14e>
      {
        /* Only for IPv4 address. */
        ((mx_sockaddr_in_t *)Addr)->sin_family = MX_AF_INET;
 8008f4c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008f50:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	2202      	movs	r2, #2
 8008f58:	705a      	strb	r2, [r3, #1]
        ((mx_sockaddr_in_t *)Addr)->sin_addr.s_addr = rp.s_addr;
 8008f5a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8008f5e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008f62:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	605a      	str	r2, [r3, #4]
        ((mx_sockaddr_in_t *)Addr)->sin_len = sizeof(mx_sockaddr_in_t);
 8008f6a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008f6e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	2210      	movs	r2, #16
 8008f76:	701a      	strb	r2, [r3, #0]
        ret = MX_WIFI_STATUS_OK;
 8008f78:	2300      	movs	r3, #0
 8008f7a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
      }
    }
  }

  return (int32_t)ret;
 8008f7e:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
}
 8008f82:	4618      	mov	r0, r3
 8008f84:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}
 8008f8c:	0801a890 	.word	0x0801a890

08008f90 <MX_WIFI_Socket_ping>:


int32_t MX_WIFI_Socket_ping(MX_WIFIObject_t *Obj, const char *hostname,
                            int32_t count, int32_t delay, int32_t response[])
{
 8008f90:	b590      	push	{r4, r7, lr}
 8008f92:	b0d9      	sub	sp, #356	; 0x164
 8008f94:	af02      	add	r7, sp, #8
 8008f96:	f507 74ac 	add.w	r4, r7, #344	; 0x158
 8008f9a:	f5a4 74a6 	sub.w	r4, r4, #332	; 0x14c
 8008f9e:	6020      	str	r0, [r4, #0]
 8008fa0:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 8008fa4:	f5a0 70a8 	sub.w	r0, r0, #336	; 0x150
 8008fa8:	6001      	str	r1, [r0, #0]
 8008faa:	f507 71ac 	add.w	r1, r7, #344	; 0x158
 8008fae:	f5a1 71aa 	sub.w	r1, r1, #340	; 0x154
 8008fb2:	600a      	str	r2, [r1, #0]
 8008fb4:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8008fb8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8008fbc:	6013      	str	r3, [r2, #0]
  MX_WIFI_STATUS_T ret = MX_WIFI_STATUS_PARAM_ERROR;
 8008fbe:	23fc      	movs	r3, #252	; 0xfc
 8008fc0:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157

  if ((NULL != Obj) && (NULL != hostname) && (0 < count))
 8008fc4:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8008fc8:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	f000 808e 	beq.w	80090f0 <MX_WIFI_Socket_ping+0x160>
 8008fd4:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8008fd8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	f000 8086 	beq.w	80090f0 <MX_WIFI_Socket_ping+0x160>
 8008fe4:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8008fe8:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	dd7e      	ble.n	80090f0 <MX_WIFI_Socket_ping+0x160>
  {
    wifi_ping_cparams_t cp = {0};
 8008ff2:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8008ff6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	f240 1307 	movw	r3, #263	; 0x107
 8009000:	461a      	mov	r2, r3
 8009002:	2100      	movs	r1, #0
 8009004:	f00d fd6a 	bl	8016adc <memset>
    const uint16_t cp_size = (uint16_t)(sizeof(cp));
 8009008:	f240 1307 	movw	r3, #263	; 0x107
 800900c:	f8a7 314e 	strh.w	r3, [r7, #334]	; 0x14e
    int32_t ping_resp[1 + MX_WIFI_PING_MAX] = {0};
 8009010:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8009014:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8009018:	4618      	mov	r0, r3
 800901a:	232c      	movs	r3, #44	; 0x2c
 800901c:	461a      	mov	r2, r3
 800901e:	2100      	movs	r1, #0
 8009020:	f00d fd5c 	bl	8016adc <memset>
    wifi_ping_rparams_t *rp = NULL;
 8009024:	2300      	movs	r3, #0
 8009026:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
    uint16_t rp_size = sizeof(ping_resp);
 800902a:	232c      	movs	r3, #44	; 0x2c
 800902c:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146

    ret = MX_WIFI_STATUS_ERROR;
 8009030:	23ff      	movs	r3, #255	; 0xff
 8009032:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157

    MX_WIFI_STRNCPY(cp.hostname, hostname);
 8009036:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800903a:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800903e:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8009042:	22fe      	movs	r2, #254	; 0xfe
 8009044:	6819      	ldr	r1, [r3, #0]
 8009046:	f000 fabe 	bl	80095c6 <void_strncpy>
    cp.count = count;
 800904a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800904e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8009052:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8009056:	f5a2 72aa 	sub.w	r2, r2, #340	; 0x154
 800905a:	6812      	ldr	r2, [r2, #0]
 800905c:	f8c3 20ff 	str.w	r2, [r3, #255]	; 0xff
    cp.delay_ms = delay;
 8009060:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8009064:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8009068:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800906c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8009070:	6812      	ldr	r2, [r2, #0]
 8009072:	f8c3 2103 	str.w	r2, [r3, #259]	; 0x103

    rp = (wifi_ping_rparams_t *)&ping_resp;
 8009076:	f107 0310 	add.w	r3, r7, #16
 800907a:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
    if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_WIFI_PING_CMD,
 800907e:	f8b7 214e 	ldrh.w	r2, [r7, #334]	; 0x14e
 8009082:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8009086:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800908a:	9301      	str	r3, [sp, #4]
 800908c:	f507 73a3 	add.w	r3, r7, #326	; 0x146
 8009090:	9300      	str	r3, [sp, #0]
 8009092:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8009096:	f240 100b 	movw	r0, #267	; 0x10b
 800909a:	f7fe fa13 	bl	80074c4 <mipc_request>
 800909e:	4603      	mov	r3, r0
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d125      	bne.n	80090f0 <MX_WIFI_Socket_ping+0x160>
                                          (uint8_t *)&cp, cp_size,
                                          (uint8_t *)rp, &rp_size,
                                          MX_WIFI_CMD_TIMEOUT))
    {
      if (rp->num > 0)
 80090a4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	dd20      	ble.n	80090f0 <MX_WIFI_Socket_ping+0x160>
      {
        for (int32_t i = 0; i < rp->num; i++)
 80090ae:	2300      	movs	r3, #0
 80090b0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80090b4:	e012      	b.n	80090dc <MX_WIFI_Socket_ping+0x14c>
        {
          response[i] = rp->delay_ms[i];
 80090b6:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80090ba:	009b      	lsls	r3, r3, #2
 80090bc:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 80090c0:	441a      	add	r2, r3
 80090c2:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 80090c6:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80090ca:	009b      	lsls	r3, r3, #2
 80090cc:	440b      	add	r3, r1
 80090ce:	685b      	ldr	r3, [r3, #4]
 80090d0:	6013      	str	r3, [r2, #0]
        for (int32_t i = 0; i < rp->num; i++)
 80090d2:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80090d6:	3301      	adds	r3, #1
 80090d8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80090dc:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 80090e6:	429a      	cmp	r2, r3
 80090e8:	dbe5      	blt.n	80090b6 <MX_WIFI_Socket_ping+0x126>
        }
        ret = MX_WIFI_STATUS_OK;
 80090ea:	2300      	movs	r3, #0
 80090ec:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
      }
    }
  }

  return (int32_t)ret;
 80090f0:	f997 3157 	ldrsb.w	r3, [r7, #343]	; 0x157
}
 80090f4:	4618      	mov	r0, r3
 80090f6:	f507 77ae 	add.w	r7, r7, #348	; 0x15c
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bd90      	pop	{r4, r7, pc}

080090fe <MX_WIFI_Socket_ping6>:


int32_t MX_WIFI_Socket_ping6(MX_WIFIObject_t *Obj, const mx_char_t *hostname,
                             int32_t count, int32_t delay, int32_t response[])
{
 80090fe:	b590      	push	{r4, r7, lr}
 8009100:	b0d9      	sub	sp, #356	; 0x164
 8009102:	af02      	add	r7, sp, #8
 8009104:	f507 74ac 	add.w	r4, r7, #344	; 0x158
 8009108:	f5a4 74a6 	sub.w	r4, r4, #332	; 0x14c
 800910c:	6020      	str	r0, [r4, #0]
 800910e:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 8009112:	f5a0 70a8 	sub.w	r0, r0, #336	; 0x150
 8009116:	6001      	str	r1, [r0, #0]
 8009118:	f507 71ac 	add.w	r1, r7, #344	; 0x158
 800911c:	f5a1 71aa 	sub.w	r1, r1, #340	; 0x154
 8009120:	600a      	str	r2, [r1, #0]
 8009122:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8009126:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800912a:	6013      	str	r3, [r2, #0]
  MX_WIFI_STATUS_T ret = MX_WIFI_STATUS_PARAM_ERROR;
 800912c:	23fc      	movs	r3, #252	; 0xfc
 800912e:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157

  if ((NULL != Obj) && (NULL != hostname) && (0 < count))
 8009132:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8009136:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	2b00      	cmp	r3, #0
 800913e:	f000 808e 	beq.w	800925e <MX_WIFI_Socket_ping6+0x160>
 8009142:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8009146:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	2b00      	cmp	r3, #0
 800914e:	f000 8086 	beq.w	800925e <MX_WIFI_Socket_ping6+0x160>
 8009152:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8009156:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	2b00      	cmp	r3, #0
 800915e:	dd7e      	ble.n	800925e <MX_WIFI_Socket_ping6+0x160>
  {
    wifi_ping_cparams_t cp = {0};
 8009160:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8009164:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8009168:	4618      	mov	r0, r3
 800916a:	f240 1307 	movw	r3, #263	; 0x107
 800916e:	461a      	mov	r2, r3
 8009170:	2100      	movs	r1, #0
 8009172:	f00d fcb3 	bl	8016adc <memset>
    const uint16_t cp_size = (uint16_t)(sizeof(cp));
 8009176:	f240 1307 	movw	r3, #263	; 0x107
 800917a:	f8a7 314e 	strh.w	r3, [r7, #334]	; 0x14e
    int32_t ping_resp[1 + MX_WIFI_PING_MAX] = {0};
 800917e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8009182:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8009186:	4618      	mov	r0, r3
 8009188:	232c      	movs	r3, #44	; 0x2c
 800918a:	461a      	mov	r2, r3
 800918c:	2100      	movs	r1, #0
 800918e:	f00d fca5 	bl	8016adc <memset>
    wifi_ping_rparams_t *rp = NULL;
 8009192:	2300      	movs	r3, #0
 8009194:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
    uint16_t rp_size = (uint16_t)sizeof(ping_resp);
 8009198:	232c      	movs	r3, #44	; 0x2c
 800919a:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146

    ret = MX_WIFI_STATUS_ERROR;
 800919e:	23ff      	movs	r3, #255	; 0xff
 80091a0:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157

    MX_WIFI_STRNCPY(cp.hostname, hostname);
 80091a4:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80091a8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80091ac:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 80091b0:	22fe      	movs	r2, #254	; 0xfe
 80091b2:	6819      	ldr	r1, [r3, #0]
 80091b4:	f000 fa07 	bl	80095c6 <void_strncpy>
    cp.count = count;
 80091b8:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80091bc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80091c0:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 80091c4:	f5a2 72aa 	sub.w	r2, r2, #340	; 0x154
 80091c8:	6812      	ldr	r2, [r2, #0]
 80091ca:	f8c3 20ff 	str.w	r2, [r3, #255]	; 0xff
    cp.delay_ms = delay;
 80091ce:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80091d2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80091d6:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 80091da:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80091de:	6812      	ldr	r2, [r2, #0]
 80091e0:	f8c3 2103 	str.w	r2, [r3, #259]	; 0x103

    rp = (wifi_ping_rparams_t *)&ping_resp;
 80091e4:	f107 0310 	add.w	r3, r7, #16
 80091e8:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
    if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_WIFI_PING6_CMD,
 80091ec:	f8b7 214e 	ldrh.w	r2, [r7, #334]	; 0x14e
 80091f0:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80091f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80091f8:	9301      	str	r3, [sp, #4]
 80091fa:	f507 73a3 	add.w	r3, r7, #326	; 0x146
 80091fe:	9300      	str	r3, [sp, #0]
 8009200:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8009204:	f44f 708b 	mov.w	r0, #278	; 0x116
 8009208:	f7fe f95c 	bl	80074c4 <mipc_request>
 800920c:	4603      	mov	r3, r0
 800920e:	2b00      	cmp	r3, #0
 8009210:	d125      	bne.n	800925e <MX_WIFI_Socket_ping6+0x160>
                                          (uint8_t *)&cp, cp_size,
                                          (uint8_t *)rp, &rp_size,
                                          MX_WIFI_CMD_TIMEOUT))
    {
      if (rp->num > 0)
 8009212:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	2b00      	cmp	r3, #0
 800921a:	dd20      	ble.n	800925e <MX_WIFI_Socket_ping6+0x160>
      {
        for (int32_t i = 0; i < rp->num; i++)
 800921c:	2300      	movs	r3, #0
 800921e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8009222:	e012      	b.n	800924a <MX_WIFI_Socket_ping6+0x14c>
        {
          response[i] = rp->delay_ms[i];
 8009224:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8009228:	009b      	lsls	r3, r3, #2
 800922a:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 800922e:	441a      	add	r2, r3
 8009230:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 8009234:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8009238:	009b      	lsls	r3, r3, #2
 800923a:	440b      	add	r3, r1
 800923c:	685b      	ldr	r3, [r3, #4]
 800923e:	6013      	str	r3, [r2, #0]
        for (int32_t i = 0; i < rp->num; i++)
 8009240:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8009244:	3301      	adds	r3, #1
 8009246:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800924a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8009254:	429a      	cmp	r2, r3
 8009256:	dbe5      	blt.n	8009224 <MX_WIFI_Socket_ping6+0x126>
        }
        ret = MX_WIFI_STATUS_OK;
 8009258:	2300      	movs	r3, #0
 800925a:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
      }
    }
  }

  return (int32_t)ret;
 800925e:	f997 3157 	ldrsb.w	r3, [r7, #343]	; 0x157
}
 8009262:	4618      	mov	r0, r3
 8009264:	f507 77ae 	add.w	r7, r7, #348	; 0x15c
 8009268:	46bd      	mov	sp, r7
 800926a:	bd90      	pop	{r4, r7, pc}

0800926c <MX_WIFI_Socket_getpeername>:
  return ret;
}


int32_t MX_WIFI_Socket_getpeername(MX_WIFIObject_t *Obj, int32_t SockFd, struct mx_sockaddr *Addr, uint32_t *AddrLen)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b094      	sub	sp, #80	; 0x50
 8009270:	af02      	add	r7, sp, #8
 8009272:	60f8      	str	r0, [r7, #12]
 8009274:	60b9      	str	r1, [r7, #8]
 8009276:	607a      	str	r2, [r7, #4]
 8009278:	603b      	str	r3, [r7, #0]
  MX_WIFI_STATUS_T ret = MX_WIFI_STATUS_PARAM_ERROR;
 800927a:	23fc      	movs	r3, #252	; 0xfc
 800927c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

  if ((NULL != Obj) && (0 <= SockFd) && (NULL != Addr) && (NULL != AddrLen) && (0 < *AddrLen))
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d04b      	beq.n	800931e <MX_WIFI_Socket_getpeername+0xb2>
 8009286:	68bb      	ldr	r3, [r7, #8]
 8009288:	2b00      	cmp	r3, #0
 800928a:	db48      	blt.n	800931e <MX_WIFI_Socket_getpeername+0xb2>
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d045      	beq.n	800931e <MX_WIFI_Socket_getpeername+0xb2>
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d042      	beq.n	800931e <MX_WIFI_Socket_getpeername+0xb2>
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d03e      	beq.n	800931e <MX_WIFI_Socket_getpeername+0xb2>
  {
    socket_getpeername_cparams_t cp = {0};
 80092a0:	2300      	movs	r3, #0
 80092a2:	63fb      	str	r3, [r7, #60]	; 0x3c
    const uint16_t cp_size = (uint16_t)(sizeof(cp));
 80092a4:	2304      	movs	r3, #4
 80092a6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    socket_getpeername_rparams_t rp = {0};
 80092aa:	f107 0314 	add.w	r3, r7, #20
 80092ae:	2224      	movs	r2, #36	; 0x24
 80092b0:	2100      	movs	r1, #0
 80092b2:	4618      	mov	r0, r3
 80092b4:	f00d fc12 	bl	8016adc <memset>
    uint16_t rp_size = (uint16_t)sizeof(rp);
 80092b8:	2324      	movs	r3, #36	; 0x24
 80092ba:	877b      	strh	r3, [r7, #58]	; 0x3a

    ret = MX_WIFI_STATUS_ERROR;
 80092bc:	23ff      	movs	r3, #255	; 0xff
 80092be:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    cp.sockfd = SockFd;
 80092c2:	68bb      	ldr	r3, [r7, #8]
 80092c4:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_SOCKET_GETPEERNAME_CMD,
 80092c6:	f107 0014 	add.w	r0, r7, #20
 80092ca:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80092ce:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80092d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80092d6:	9301      	str	r3, [sp, #4]
 80092d8:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 80092dc:	9300      	str	r3, [sp, #0]
 80092de:	4603      	mov	r3, r0
 80092e0:	f44f 7004 	mov.w	r0, #528	; 0x210
 80092e4:	f7fe f8ee 	bl	80074c4 <mipc_request>
 80092e8:	4603      	mov	r3, r0
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d117      	bne.n	800931e <MX_WIFI_Socket_getpeername+0xb2>
                                          (uint8_t *)&cp, cp_size,
                                          (uint8_t *)&rp, &rp_size,
                                          MX_WIFI_CMD_TIMEOUT))
    {
      if (MIPC_CODE_SUCCESS == rp.status)
 80092ee:	697b      	ldr	r3, [r7, #20]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d114      	bne.n	800931e <MX_WIFI_Socket_getpeername+0xb2>
      {
        const size_t msize = MIN(rp.namelen, *AddrLen);
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	681a      	ldr	r2, [r3, #0]
 80092f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092fa:	4293      	cmp	r3, r2
 80092fc:	bf28      	it	cs
 80092fe:	4613      	movcs	r3, r2
 8009300:	643b      	str	r3, [r7, #64]	; 0x40

        (void)memcpy(Addr, &rp.name, msize);
 8009302:	f107 0314 	add.w	r3, r7, #20
 8009306:	3304      	adds	r3, #4
 8009308:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800930a:	4619      	mov	r1, r3
 800930c:	6878      	ldr	r0, [r7, #4]
 800930e:	f00d fca4 	bl	8016c5a <memcpy>
        *AddrLen = msize;
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009316:	601a      	str	r2, [r3, #0]
        ret = MX_WIFI_STATUS_OK;
 8009318:	2300      	movs	r3, #0
 800931a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  return (int32_t)ret;
 800931e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8009322:	4618      	mov	r0, r3
 8009324:	3748      	adds	r7, #72	; 0x48
 8009326:	46bd      	mov	sp, r7
 8009328:	bd80      	pop	{r7, pc}

0800932a <MX_WIFI_Socket_getsockname>:


int32_t MX_WIFI_Socket_getsockname(MX_WIFIObject_t *Obj, int32_t SockFd, struct mx_sockaddr *Addr, uint32_t *AddrLen)
{
 800932a:	b580      	push	{r7, lr}
 800932c:	b094      	sub	sp, #80	; 0x50
 800932e:	af02      	add	r7, sp, #8
 8009330:	60f8      	str	r0, [r7, #12]
 8009332:	60b9      	str	r1, [r7, #8]
 8009334:	607a      	str	r2, [r7, #4]
 8009336:	603b      	str	r3, [r7, #0]
  MX_WIFI_STATUS_T ret = MX_WIFI_STATUS_PARAM_ERROR;
 8009338:	23fc      	movs	r3, #252	; 0xfc
 800933a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

  if ((NULL != Obj) && (0 <= SockFd) && (NULL != Addr) && (NULL != AddrLen) && (0 < *AddrLen))
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d04e      	beq.n	80093e2 <MX_WIFI_Socket_getsockname+0xb8>
 8009344:	68bb      	ldr	r3, [r7, #8]
 8009346:	2b00      	cmp	r3, #0
 8009348:	db4b      	blt.n	80093e2 <MX_WIFI_Socket_getsockname+0xb8>
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d048      	beq.n	80093e2 <MX_WIFI_Socket_getsockname+0xb8>
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d045      	beq.n	80093e2 <MX_WIFI_Socket_getsockname+0xb8>
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d041      	beq.n	80093e2 <MX_WIFI_Socket_getsockname+0xb8>
  {
    socket_getsockname_cparams_t cp = {0};
 800935e:	2300      	movs	r3, #0
 8009360:	63fb      	str	r3, [r7, #60]	; 0x3c
    const uint16_t cp_size = (uint16_t)(sizeof(cp));
 8009362:	2304      	movs	r3, #4
 8009364:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    socket_getsockname_rparams_t rp = {0};
 8009368:	f107 0314 	add.w	r3, r7, #20
 800936c:	2224      	movs	r2, #36	; 0x24
 800936e:	2100      	movs	r1, #0
 8009370:	4618      	mov	r0, r3
 8009372:	f00d fbb3 	bl	8016adc <memset>
    uint16_t rp_size = (uint16_t)sizeof(rp);
 8009376:	2324      	movs	r3, #36	; 0x24
 8009378:	877b      	strh	r3, [r7, #58]	; 0x3a

    ret = MX_WIFI_STATUS_ERROR;
 800937a:	23ff      	movs	r3, #255	; 0xff
 800937c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    rp.status = MIPC_CODE_ERROR;
 8009380:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009384:	617b      	str	r3, [r7, #20]
    cp.sockfd = SockFd;
 8009386:	68bb      	ldr	r3, [r7, #8]
 8009388:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_SOCKET_GETSOCKNAME_CMD,
 800938a:	f107 0014 	add.w	r0, r7, #20
 800938e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8009392:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8009396:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800939a:	9301      	str	r3, [sp, #4]
 800939c:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 80093a0:	9300      	str	r3, [sp, #0]
 80093a2:	4603      	mov	r3, r0
 80093a4:	f240 200f 	movw	r0, #527	; 0x20f
 80093a8:	f7fe f88c 	bl	80074c4 <mipc_request>
 80093ac:	4603      	mov	r3, r0
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d117      	bne.n	80093e2 <MX_WIFI_Socket_getsockname+0xb8>
                                          (uint8_t *)&cp, cp_size,
                                          (uint8_t *)&rp, &rp_size,
                                          MX_WIFI_CMD_TIMEOUT))
    {
      if (MIPC_CODE_SUCCESS == rp.status)
 80093b2:	697b      	ldr	r3, [r7, #20]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d114      	bne.n	80093e2 <MX_WIFI_Socket_getsockname+0xb8>
      {
        const size_t msize = MIN(rp.namelen, *AddrLen);
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	681a      	ldr	r2, [r3, #0]
 80093bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093be:	4293      	cmp	r3, r2
 80093c0:	bf28      	it	cs
 80093c2:	4613      	movcs	r3, r2
 80093c4:	643b      	str	r3, [r7, #64]	; 0x40

        (void)memcpy(Addr, &rp.name, msize);
 80093c6:	f107 0314 	add.w	r3, r7, #20
 80093ca:	3304      	adds	r3, #4
 80093cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80093ce:	4619      	mov	r1, r3
 80093d0:	6878      	ldr	r0, [r7, #4]
 80093d2:	f00d fc42 	bl	8016c5a <memcpy>
        *AddrLen = msize;
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80093da:	601a      	str	r2, [r3, #0]
        ret = MX_WIFI_STATUS_OK;
 80093dc:	2300      	movs	r3, #0
 80093de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }
  return (int32_t)ret;
 80093e2:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 80093e6:	4618      	mov	r0, r3
 80093e8:	3748      	adds	r7, #72	; 0x48
 80093ea:	46bd      	mov	sp, r7
 80093ec:	bd80      	pop	{r7, pc}

080093ee <mx_s_addr_in_to_packed>:
}


#if (MX_WIFI_NETWORK_BYPASS_MODE == 0)
static struct mx_sockaddr_storage mx_s_addr_in_to_packed(const struct mx_sockaddr *Addr)
{
 80093ee:	b4b0      	push	{r4, r5, r7}
 80093f0:	b08b      	sub	sp, #44	; 0x2c
 80093f2:	af00      	add	r7, sp, #0
 80093f4:	6078      	str	r0, [r7, #4]
 80093f6:	6039      	str	r1, [r7, #0]
  struct mx_sockaddr_storage s_addr_storage = {0};
 80093f8:	f107 0308 	add.w	r3, r7, #8
 80093fc:	2200      	movs	r2, #0
 80093fe:	601a      	str	r2, [r3, #0]
 8009400:	605a      	str	r2, [r3, #4]
 8009402:	609a      	str	r2, [r3, #8]
 8009404:	60da      	str	r2, [r3, #12]
 8009406:	611a      	str	r2, [r3, #16]
 8009408:	615a      	str	r2, [r3, #20]
 800940a:	619a      	str	r2, [r3, #24]
  const struct mx_sockaddr_in *const p_s_addr_in = (const struct mx_sockaddr_in *) Addr;
 800940c:	683b      	ldr	r3, [r7, #0]
 800940e:	627b      	str	r3, [r7, #36]	; 0x24

  s_addr_storage.s2_len = p_s_addr_in->sin_len;
 8009410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009412:	781b      	ldrb	r3, [r3, #0]
 8009414:	723b      	strb	r3, [r7, #8]
  s_addr_storage.ss_family = p_s_addr_in->sin_family;
 8009416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009418:	785b      	ldrb	r3, [r3, #1]
 800941a:	727b      	strb	r3, [r7, #9]
  s_addr_storage.s2_data1[0] = (uint8_t)(p_s_addr_in->sin_port);
 800941c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800941e:	885b      	ldrh	r3, [r3, #2]
 8009420:	b2db      	uxtb	r3, r3
 8009422:	72bb      	strb	r3, [r7, #10]
  s_addr_storage.s2_data1[1] = (uint8_t)(p_s_addr_in->sin_port >> 8);
 8009424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009426:	885b      	ldrh	r3, [r3, #2]
 8009428:	0a1b      	lsrs	r3, r3, #8
 800942a:	b29b      	uxth	r3, r3
 800942c:	b2db      	uxtb	r3, r3
 800942e:	72fb      	strb	r3, [r7, #11]
  s_addr_storage.s2_data2[0] = p_s_addr_in->sin_addr.s_addr;
 8009430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009432:	685b      	ldr	r3, [r3, #4]
 8009434:	60fb      	str	r3, [r7, #12]
  /* useless: s_addr_storage.s2_data2[2] = 0; */
  /* useless: s_addr_storage.s2_data3[0] = 0; */
  /* useless: s_addr_storage.s2_data3[1] = 0; */
  /* useless: s_addr_storage.s2_data3[2] = 0; */

  return s_addr_storage;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	461d      	mov	r5, r3
 800943a:	f107 0408 	add.w	r4, r7, #8
 800943e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009440:	6028      	str	r0, [r5, #0]
 8009442:	6069      	str	r1, [r5, #4]
 8009444:	60aa      	str	r2, [r5, #8]
 8009446:	60eb      	str	r3, [r5, #12]
 8009448:	cc07      	ldmia	r4!, {r0, r1, r2}
 800944a:	6128      	str	r0, [r5, #16]
 800944c:	6169      	str	r1, [r5, #20]
 800944e:	61aa      	str	r2, [r5, #24]
}
 8009450:	6878      	ldr	r0, [r7, #4]
 8009452:	372c      	adds	r7, #44	; 0x2c
 8009454:	46bd      	mov	sp, r7
 8009456:	bcb0      	pop	{r4, r5, r7}
 8009458:	4770      	bx	lr

0800945a <mx_s_addr_in_from_packed>:

static struct mx_sockaddr_in mx_s_addr_in_from_packed(const struct mx_sockaddr_storage *Addr)
{
 800945a:	b490      	push	{r4, r7}
 800945c:	b088      	sub	sp, #32
 800945e:	af00      	add	r7, sp, #0
 8009460:	6078      	str	r0, [r7, #4]
 8009462:	6039      	str	r1, [r7, #0]
  struct mx_sockaddr_in s_addr_in = {0};
 8009464:	f107 030c 	add.w	r3, r7, #12
 8009468:	2200      	movs	r2, #0
 800946a:	601a      	str	r2, [r3, #0]
 800946c:	605a      	str	r2, [r3, #4]
 800946e:	609a      	str	r2, [r3, #8]
 8009470:	60da      	str	r2, [r3, #12]

  s_addr_in.sin_len = Addr->s2_len;
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	781b      	ldrb	r3, [r3, #0]
 8009476:	733b      	strb	r3, [r7, #12]
  s_addr_in.sin_family = Addr->ss_family;
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	785b      	ldrb	r3, [r3, #1]
 800947c:	737b      	strb	r3, [r7, #13]
  {
    uint16_t port_in = (uint16_t)Addr->s2_data1[0];
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	789b      	ldrb	r3, [r3, #2]
 8009482:	83fb      	strh	r3, [r7, #30]
    port_in |= (uint16_t)((uint16_t)Addr->s2_data1[1] << 8);
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	78db      	ldrb	r3, [r3, #3]
 8009488:	b29b      	uxth	r3, r3
 800948a:	021b      	lsls	r3, r3, #8
 800948c:	b29a      	uxth	r2, r3
 800948e:	8bfb      	ldrh	r3, [r7, #30]
 8009490:	4313      	orrs	r3, r2
 8009492:	83fb      	strh	r3, [r7, #30]
    s_addr_in.sin_port = port_in;
 8009494:	8bfb      	ldrh	r3, [r7, #30]
 8009496:	81fb      	strh	r3, [r7, #14]
  }
  s_addr_in.sin_addr.s_addr = Addr->s2_data2[0];
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	685b      	ldr	r3, [r3, #4]
 800949c:	613b      	str	r3, [r7, #16]
  /* useless: s_addr_in.sin_zero[4] = 0; */
  /* useless: s_addr_in.sin_zero[5] = 0; */
  /* useless: s_addr_in.sin_zero[6] = 0; */
  /* useless: s_addr_in.sin_zero[7] = 0; */

  return s_addr_in;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	461c      	mov	r4, r3
 80094a2:	f107 030c 	add.w	r3, r7, #12
 80094a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80094a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80094ac:	6878      	ldr	r0, [r7, #4]
 80094ae:	3720      	adds	r7, #32
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bc90      	pop	{r4, r7}
 80094b4:	4770      	bx	lr

080094b6 <mx_s_addr_in6_to_packed>:

static struct mx_sockaddr_storage mx_s_addr_in6_to_packed(const struct mx_sockaddr *Addr)
{
 80094b6:	b4b0      	push	{r4, r5, r7}
 80094b8:	b08b      	sub	sp, #44	; 0x2c
 80094ba:	af00      	add	r7, sp, #0
 80094bc:	6078      	str	r0, [r7, #4]
 80094be:	6039      	str	r1, [r7, #0]
  struct mx_sockaddr_storage s_addr_storage = {0};
 80094c0:	f107 0308 	add.w	r3, r7, #8
 80094c4:	2200      	movs	r2, #0
 80094c6:	601a      	str	r2, [r3, #0]
 80094c8:	605a      	str	r2, [r3, #4]
 80094ca:	609a      	str	r2, [r3, #8]
 80094cc:	60da      	str	r2, [r3, #12]
 80094ce:	611a      	str	r2, [r3, #16]
 80094d0:	615a      	str	r2, [r3, #20]
 80094d2:	619a      	str	r2, [r3, #24]
  const struct mx_sockaddr_in6 *const p_s_addr_in6 = (const struct mx_sockaddr_in6 *) Addr;
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	627b      	str	r3, [r7, #36]	; 0x24

  s_addr_storage.s2_len = p_s_addr_in6->sin6_len;
 80094d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094da:	781b      	ldrb	r3, [r3, #0]
 80094dc:	723b      	strb	r3, [r7, #8]
  s_addr_storage.ss_family = p_s_addr_in6->sin6_family;
 80094de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094e0:	785b      	ldrb	r3, [r3, #1]
 80094e2:	727b      	strb	r3, [r7, #9]
  s_addr_storage.s2_data1[0] = (uint8_t)(p_s_addr_in6->sin6_port);
 80094e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094e6:	885b      	ldrh	r3, [r3, #2]
 80094e8:	b2db      	uxtb	r3, r3
 80094ea:	72bb      	strb	r3, [r7, #10]
  s_addr_storage.s2_data1[1] = (uint8_t)(p_s_addr_in6->sin6_port >> 8);
 80094ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ee:	885b      	ldrh	r3, [r3, #2]
 80094f0:	0a1b      	lsrs	r3, r3, #8
 80094f2:	b29b      	uxth	r3, r3
 80094f4:	b2db      	uxtb	r3, r3
 80094f6:	72fb      	strb	r3, [r7, #11]
  s_addr_storage.s2_data2[0] = p_s_addr_in6->sin6_flowinfo;
 80094f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094fa:	685b      	ldr	r3, [r3, #4]
 80094fc:	60fb      	str	r3, [r7, #12]
  s_addr_storage.s2_data2[1] = p_s_addr_in6->sin6_addr.un.u32_addr[0];
 80094fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009500:	689b      	ldr	r3, [r3, #8]
 8009502:	613b      	str	r3, [r7, #16]
  s_addr_storage.s2_data2[2] = p_s_addr_in6->sin6_addr.un.u32_addr[1];
 8009504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009506:	68db      	ldr	r3, [r3, #12]
 8009508:	617b      	str	r3, [r7, #20]
  s_addr_storage.s2_data3[0] = p_s_addr_in6->sin6_addr.un.u32_addr[2];
 800950a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800950c:	691b      	ldr	r3, [r3, #16]
 800950e:	61bb      	str	r3, [r7, #24]
  s_addr_storage.s2_data3[1] = p_s_addr_in6->sin6_addr.un.u32_addr[3];
 8009510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009512:	695b      	ldr	r3, [r3, #20]
 8009514:	61fb      	str	r3, [r7, #28]
  s_addr_storage.s2_data3[2] = p_s_addr_in6->sin6_scope_id;
 8009516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009518:	699b      	ldr	r3, [r3, #24]
 800951a:	623b      	str	r3, [r7, #32]

  return s_addr_storage;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	461d      	mov	r5, r3
 8009520:	f107 0408 	add.w	r4, r7, #8
 8009524:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009526:	6028      	str	r0, [r5, #0]
 8009528:	6069      	str	r1, [r5, #4]
 800952a:	60aa      	str	r2, [r5, #8]
 800952c:	60eb      	str	r3, [r5, #12]
 800952e:	cc07      	ldmia	r4!, {r0, r1, r2}
 8009530:	6128      	str	r0, [r5, #16]
 8009532:	6169      	str	r1, [r5, #20]
 8009534:	61aa      	str	r2, [r5, #24]
}
 8009536:	6878      	ldr	r0, [r7, #4]
 8009538:	372c      	adds	r7, #44	; 0x2c
 800953a:	46bd      	mov	sp, r7
 800953c:	bcb0      	pop	{r4, r5, r7}
 800953e:	4770      	bx	lr

08009540 <mx_s_addr_in6_from_packed>:

static struct mx_sockaddr_in6 mx_s_addr_in6_from_packed(const struct mx_sockaddr_storage *Addr)
{
 8009540:	b4b0      	push	{r4, r5, r7}
 8009542:	b08b      	sub	sp, #44	; 0x2c
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
 8009548:	6039      	str	r1, [r7, #0]
  struct mx_sockaddr_in6 s_addr_in6 = {0};
 800954a:	f107 0308 	add.w	r3, r7, #8
 800954e:	2200      	movs	r2, #0
 8009550:	601a      	str	r2, [r3, #0]
 8009552:	605a      	str	r2, [r3, #4]
 8009554:	609a      	str	r2, [r3, #8]
 8009556:	60da      	str	r2, [r3, #12]
 8009558:	611a      	str	r2, [r3, #16]
 800955a:	615a      	str	r2, [r3, #20]
 800955c:	619a      	str	r2, [r3, #24]

  s_addr_in6.sin6_len = Addr->s2_len;
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	781b      	ldrb	r3, [r3, #0]
 8009562:	723b      	strb	r3, [r7, #8]
  s_addr_in6.sin6_family = Addr->ss_family;
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	785b      	ldrb	r3, [r3, #1]
 8009568:	727b      	strb	r3, [r7, #9]
  {
    uint16_t port_in = (uint16_t)Addr->s2_data1[0];
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	789b      	ldrb	r3, [r3, #2]
 800956e:	84fb      	strh	r3, [r7, #38]	; 0x26
    port_in |= (uint16_t)((uint16_t)Addr->s2_data1[1] << 8);
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	78db      	ldrb	r3, [r3, #3]
 8009574:	b29b      	uxth	r3, r3
 8009576:	021b      	lsls	r3, r3, #8
 8009578:	b29a      	uxth	r2, r3
 800957a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800957c:	4313      	orrs	r3, r2
 800957e:	84fb      	strh	r3, [r7, #38]	; 0x26
    s_addr_in6.sin6_port = port_in;
 8009580:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009582:	817b      	strh	r3, [r7, #10]
  }
  s_addr_in6.sin6_flowinfo = Addr->s2_data2[0];
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	685b      	ldr	r3, [r3, #4]
 8009588:	60fb      	str	r3, [r7, #12]
  s_addr_in6.sin6_addr.un.u32_addr[0] = Addr->s2_data2[1];
 800958a:	683b      	ldr	r3, [r7, #0]
 800958c:	689b      	ldr	r3, [r3, #8]
 800958e:	613b      	str	r3, [r7, #16]
  s_addr_in6.sin6_addr.un.u32_addr[1] = Addr->s2_data2[2];
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	68db      	ldr	r3, [r3, #12]
 8009594:	617b      	str	r3, [r7, #20]
  s_addr_in6.sin6_addr.un.u32_addr[2] = Addr->s2_data3[0];
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	691b      	ldr	r3, [r3, #16]
 800959a:	61bb      	str	r3, [r7, #24]
  s_addr_in6.sin6_addr.un.u32_addr[3] = Addr->s2_data3[1];
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	695b      	ldr	r3, [r3, #20]
 80095a0:	61fb      	str	r3, [r7, #28]
  s_addr_in6.sin6_scope_id = Addr->s2_data3[2];
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	699b      	ldr	r3, [r3, #24]
 80095a6:	623b      	str	r3, [r7, #32]

  return s_addr_in6;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	461d      	mov	r5, r3
 80095ac:	f107 0408 	add.w	r4, r7, #8
 80095b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80095b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80095b4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80095b8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 80095bc:	6878      	ldr	r0, [r7, #4]
 80095be:	372c      	adds	r7, #44	; 0x2c
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bcb0      	pop	{r4, r5, r7}
 80095c4:	4770      	bx	lr

080095c6 <void_strncpy>:
#endif /* (MX_WIFI_NETWORK_BYPASS_MODE == 0) */

static void void_strncpy(char *Destination, const char *Source, size_t Num)
{
 80095c6:	b580      	push	{r7, lr}
 80095c8:	b084      	sub	sp, #16
 80095ca:	af00      	add	r7, sp, #0
 80095cc:	60f8      	str	r0, [r7, #12]
 80095ce:	60b9      	str	r1, [r7, #8]
 80095d0:	607a      	str	r2, [r7, #4]
  (void)strncpy(Destination, Source, Num);
 80095d2:	687a      	ldr	r2, [r7, #4]
 80095d4:	68b9      	ldr	r1, [r7, #8]
 80095d6:	68f8      	ldr	r0, [r7, #12]
 80095d8:	f00d fa43 	bl	8016a62 <strncpy>
}
 80095dc:	bf00      	nop
 80095de:	3710      	adds	r7, #16
 80095e0:	46bd      	mov	sp, r7
 80095e2:	bd80      	pop	{r7, pc}

080095e4 <mx_buf_alloc>:
  uint32_t header_len;
  uint8_t  data[1];
} mx_buf_t;

static inline mx_buf_t *mx_buf_alloc(uint32_t len)
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b084      	sub	sp, #16
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
  mx_buf_t *p = (mx_buf_t *) MX_WIFI_MALLOC(len + sizeof(mx_buf_t) -1U);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	330b      	adds	r3, #11
 80095f0:	4618      	mov	r0, r3
 80095f2:	f00b fc05 	bl	8014e00 <malloc>
 80095f6:	4603      	mov	r3, r0
 80095f8:	60fb      	str	r3, [r7, #12]
  if (NULL != p)
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d005      	beq.n	800960c <mx_buf_alloc+0x28>
  {
    p->len = len;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	687a      	ldr	r2, [r7, #4]
 8009604:	601a      	str	r2, [r3, #0]
    p->header_len = 0;
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	2200      	movs	r2, #0
 800960a:	605a      	str	r2, [r3, #4]
  }
  return p;
 800960c:	68fb      	ldr	r3, [r7, #12]
}
 800960e:	4618      	mov	r0, r3
 8009610:	3710      	adds	r7, #16
 8009612:	46bd      	mov	sp, r7
 8009614:	bd80      	pop	{r7, pc}

08009616 <MX_WIFI_IO_DELAY>:
static void mx_wifi_spi_txrx_task(THREAD_CONTEXT_TYPE argument);
#endif /* MX_WIFI_BARE_OS_H */


static void MX_WIFI_IO_DELAY(uint32_t ms)
{
 8009616:	b580      	push	{r7, lr}
 8009618:	b082      	sub	sp, #8
 800961a:	af00      	add	r7, sp, #0
 800961c:	6078      	str	r0, [r7, #4]
  DELAY_MS(ms);
 800961e:	6878      	ldr	r0, [r7, #4]
 8009620:	f000 fbbe 	bl	8009da0 <HAL_Delay>
}
 8009624:	bf00      	nop
 8009626:	3708      	adds	r7, #8
 8009628:	46bd      	mov	sp, r7
 800962a:	bd80      	pop	{r7, pc}

0800962c <MX_WIFI_SPI_Init>:
  * @brief  Initialize the SPI
  * @param  mode
  * @retval status
  */
static int8_t MX_WIFI_SPI_Init(uint16_t mode)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b084      	sub	sp, #16
 8009630:	af00      	add	r7, sp, #0
 8009632:	4603      	mov	r3, r0
 8009634:	80fb      	strh	r3, [r7, #6]
  int8_t ret = 0;
 8009636:	2300      	movs	r3, #0
 8009638:	73fb      	strb	r3, [r7, #15]

  if (MX_WIFI_RESET == mode)
 800963a:	88fb      	ldrh	r3, [r7, #6]
 800963c:	2b01      	cmp	r3, #1
 800963e:	d113      	bne.n	8009668 <MX_WIFI_SPI_Init+0x3c>
  {
    MX_WIFI_HW_RESET();
 8009640:	2200      	movs	r2, #0
 8009642:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009646:	480d      	ldr	r0, [pc, #52]	; (800967c <MX_WIFI_SPI_Init+0x50>)
 8009648:	f001 f82e 	bl	800a6a8 <HAL_GPIO_WritePin>
 800964c:	2064      	movs	r0, #100	; 0x64
 800964e:	f000 fba7 	bl	8009da0 <HAL_Delay>
 8009652:	2201      	movs	r2, #1
 8009654:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009658:	4808      	ldr	r0, [pc, #32]	; (800967c <MX_WIFI_SPI_Init+0x50>)
 800965a:	f001 f825 	bl	800a6a8 <HAL_GPIO_WritePin>
 800965e:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8009662:	f000 fb9d 	bl	8009da0 <HAL_Delay>
 8009666:	e003      	b.n	8009670 <MX_WIFI_SPI_Init+0x44>
  }
  else
  {
    ret = mx_wifi_spi_txrx_start();
 8009668:	f000 fa7c 	bl	8009b64 <mx_wifi_spi_txrx_start>
 800966c:	4603      	mov	r3, r0
 800966e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009670:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009674:	4618      	mov	r0, r3
 8009676:	3710      	adds	r7, #16
 8009678:	46bd      	mov	sp, r7
 800967a:	bd80      	pop	{r7, pc}
 800967c:	42021400 	.word	0x42021400

08009680 <MX_WIFI_SPI_DeInit>:
  * @brief  De-Initialize the SPI
  * @param  None
  * @retval status
  */
static int8_t MX_WIFI_SPI_DeInit(void)
{
 8009680:	b580      	push	{r7, lr}
 8009682:	af00      	add	r7, sp, #0
  mx_wifi_spi_txrx_stop();
 8009684:	f000 fa96 	bl	8009bb4 <mx_wifi_spi_txrx_stop>
  return 0;
 8009688:	2300      	movs	r3, #0
}
 800968a:	4618      	mov	r0, r3
 800968c:	bd80      	pop	{r7, pc}
	...

08009690 <HAL_SPI_TransferCallback>:


void HAL_SPI_TransferCallback(void *hspi)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b082      	sub	sp, #8
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
  (void)hspi;
  SEM_SIGNAL(SpiTransferDoneSem);
 8009698:	4803      	ldr	r0, [pc, #12]	; (80096a8 <HAL_SPI_TransferCallback+0x18>)
 800969a:	f7fd fc1b 	bl	8006ed4 <noos_sem_signal>
}
 800969e:	bf00      	nop
 80096a0:	3708      	adds	r7, #8
 80096a2:	46bd      	mov	sp, r7
 80096a4:	bd80      	pop	{r7, pc}
 80096a6:	bf00      	nop
 80096a8:	20003244 	.word	0x20003244

080096ac <HAL_SPI_ErrorCallback>:


void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80096ac:	b480      	push	{r7}
 80096ae:	b083      	sub	sp, #12
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
  if (hspi == HSpiMX)
 80096b4:	4a05      	ldr	r2, [pc, #20]	; (80096cc <HAL_SPI_ErrorCallback+0x20>)
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	4293      	cmp	r3, r2
 80096ba:	d100      	bne.n	80096be <HAL_SPI_ErrorCallback+0x12>
  {
    MX_ASSERT(false);
 80096bc:	e7fe      	b.n	80096bc <HAL_SPI_ErrorCallback+0x10>
  }
}
 80096be:	bf00      	nop
 80096c0:	370c      	adds	r7, #12
 80096c2:	46bd      	mov	sp, r7
 80096c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c8:	4770      	bx	lr
 80096ca:	bf00      	nop
 80096cc:	20000c14 	.word	0x20000c14

080096d0 <mxchip_WIFI_ISR>:
  * @brief  Interrupt handler for IRQ and FLOW pin
  * @param  isr_source
  * @retval None
  */
void mxchip_WIFI_ISR(uint16_t isr_source)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b082      	sub	sp, #8
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	4603      	mov	r3, r0
 80096d8:	80fb      	strh	r3, [r7, #6]
  /*DEBUG_LOG("\n[%"PRIu32"] %s()> %" PRIx32 "\n\n", HAL_GetTick(), __FUNCTION__, (uint32_t)isr_source);*/

  if (MX_WIFI_SPI_IRQ_PIN == isr_source)
 80096da:	88fb      	ldrh	r3, [r7, #6]
 80096dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80096e0:	d102      	bne.n	80096e8 <mxchip_WIFI_ISR+0x18>
  {
    SEM_SIGNAL(SpiTxRxSem);
 80096e2:	4807      	ldr	r0, [pc, #28]	; (8009700 <mxchip_WIFI_ISR+0x30>)
 80096e4:	f7fd fbf6 	bl	8006ed4 <noos_sem_signal>
  }
  if (MX_WIFI_SPI_FLOW_PIN == isr_source)
 80096e8:	88fb      	ldrh	r3, [r7, #6]
 80096ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80096ee:	d102      	bne.n	80096f6 <mxchip_WIFI_ISR+0x26>
  {
    SEM_SIGNAL(SpiFlowRiseSem);
 80096f0:	4804      	ldr	r0, [pc, #16]	; (8009704 <mxchip_WIFI_ISR+0x34>)
 80096f2:	f7fd fbef 	bl	8006ed4 <noos_sem_signal>
  }
}
 80096f6:	bf00      	nop
 80096f8:	3708      	adds	r7, #8
 80096fa:	46bd      	mov	sp, r7
 80096fc:	bd80      	pop	{r7, pc}
 80096fe:	bf00      	nop
 8009700:	2000323c 	.word	0x2000323c
 8009704:	20003240 	.word	0x20003240

08009708 <wait_flow_high>:


static int8_t wait_flow_high(uint32_t timeout)
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b084      	sub	sp, #16
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
  int8_t ret = 0;
 8009710:	2300      	movs	r3, #0
 8009712:	73fb      	strb	r3, [r7, #15]
  if (SEM_WAIT(SpiFlowRiseSem, timeout, NULL) != SEM_OK)
 8009714:	2200      	movs	r2, #0
 8009716:	6879      	ldr	r1, [r7, #4]
 8009718:	480d      	ldr	r0, [pc, #52]	; (8009750 <wait_flow_high+0x48>)
 800971a:	f7fd fbf4 	bl	8006f06 <noos_sem_wait>
 800971e:	4603      	mov	r3, r0
 8009720:	2b00      	cmp	r3, #0
 8009722:	d001      	beq.n	8009728 <wait_flow_high+0x20>
  {
    ret = -1;
 8009724:	23ff      	movs	r3, #255	; 0xff
 8009726:	73fb      	strb	r3, [r7, #15]
  }
  if (MX_WIFI_SPI_FLOW_IS_LOW())
 8009728:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800972c:	4809      	ldr	r0, [pc, #36]	; (8009754 <wait_flow_high+0x4c>)
 800972e:	f000 ffa3 	bl	800a678 <HAL_GPIO_ReadPin>
 8009732:	4603      	mov	r3, r0
 8009734:	2b00      	cmp	r3, #0
 8009736:	d104      	bne.n	8009742 <wait_flow_high+0x3a>
  {
    DEBUG_ERROR("FLOW is low\n");
 8009738:	4807      	ldr	r0, [pc, #28]	; (8009758 <wait_flow_high+0x50>)
 800973a:	f00d f969 	bl	8016a10 <puts>
    ret = -1;
 800973e:	23ff      	movs	r3, #255	; 0xff
 8009740:	73fb      	strb	r3, [r7, #15]
  }

  DEBUG_LOG("\n%s()< %" PRIi32 "\n\n", __FUNCTION__, (int32_t)ret);

  return ret;
 8009742:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009746:	4618      	mov	r0, r3
 8009748:	3710      	adds	r7, #16
 800974a:	46bd      	mov	sp, r7
 800974c:	bd80      	pop	{r7, pc}
 800974e:	bf00      	nop
 8009750:	20003240 	.word	0x20003240
 8009754:	42021800 	.word	0x42021800
 8009758:	0801a9d0 	.word	0x0801a9d0

0800975c <MX_WIFI_SPI_Write>:


static uint16_t MX_WIFI_SPI_Write(uint8_t *data, uint16_t len)
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b084      	sub	sp, #16
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
 8009764:	460b      	mov	r3, r1
 8009766:	807b      	strh	r3, [r7, #2]
  uint16_t sent;

  DEBUG_LOG("\n%s()> %" PRIu32 "\n\n", __FUNCTION__, (uint32_t)len);

  LOCK(SpiTxLock);
 8009768:	4b1b      	ldr	r3, [pc, #108]	; (80097d8 <MX_WIFI_SPI_Write+0x7c>)
 800976a:	781b      	ldrb	r3, [r3, #0]
 800976c:	b2db      	uxtb	r3, r3
 800976e:	2b00      	cmp	r3, #0
 8009770:	d1fa      	bne.n	8009768 <MX_WIFI_SPI_Write+0xc>
 8009772:	4b19      	ldr	r3, [pc, #100]	; (80097d8 <MX_WIFI_SPI_Write+0x7c>)
 8009774:	2201      	movs	r2, #1
 8009776:	701a      	strb	r2, [r3, #0]

  if ((NULL == data) || (0 == len) || (len > SPI_DATA_SIZE))
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d007      	beq.n	800978e <MX_WIFI_SPI_Write+0x32>
 800977e:	887b      	ldrh	r3, [r7, #2]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d004      	beq.n	800978e <MX_WIFI_SPI_Write+0x32>
 8009784:	887b      	ldrh	r3, [r7, #2]
 8009786:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800978a:	4293      	cmp	r3, r2
 800978c:	d90a      	bls.n	80097a4 <MX_WIFI_SPI_Write+0x48>
  {
    DEBUG_ERROR("Warning, SPI send null or size overflow! len=%" PRIu32 "\n", (uint32_t)len);
 800978e:	887b      	ldrh	r3, [r7, #2]
 8009790:	4619      	mov	r1, r3
 8009792:	4812      	ldr	r0, [pc, #72]	; (80097dc <MX_WIFI_SPI_Write+0x80>)
 8009794:	f00d f8ce 	bl	8016934 <iprintf>
    SpiTxLen = 0;
 8009798:	4b11      	ldr	r3, [pc, #68]	; (80097e0 <MX_WIFI_SPI_Write+0x84>)
 800979a:	2200      	movs	r2, #0
 800979c:	801a      	strh	r2, [r3, #0]
    sent = 0;
 800979e:	2300      	movs	r3, #0
 80097a0:	81fb      	strh	r3, [r7, #14]
 80097a2:	e010      	b.n	80097c6 <MX_WIFI_SPI_Write+0x6a>
  }
  else
  {
    SpiTxData = data;
 80097a4:	4a0f      	ldr	r2, [pc, #60]	; (80097e4 <MX_WIFI_SPI_Write+0x88>)
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	6013      	str	r3, [r2, #0]
    SpiTxLen  = len;
 80097aa:	4a0d      	ldr	r2, [pc, #52]	; (80097e0 <MX_WIFI_SPI_Write+0x84>)
 80097ac:	887b      	ldrh	r3, [r7, #2]
 80097ae:	8013      	strh	r3, [r2, #0]

    if (SEM_SIGNAL(SpiTxRxSem) != SEM_OK)
 80097b0:	480d      	ldr	r0, [pc, #52]	; (80097e8 <MX_WIFI_SPI_Write+0x8c>)
 80097b2:	f7fd fb8f 	bl	8006ed4 <noos_sem_signal>
 80097b6:	4603      	mov	r3, r0
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d002      	beq.n	80097c2 <MX_WIFI_SPI_Write+0x66>
    {
      /* Happen if received thread did not have a chance to run on time, need to increase priority */
      DEBUG_ERROR("Warning, SPI semaphore has been already notified\n");
 80097bc:	480b      	ldr	r0, [pc, #44]	; (80097ec <MX_WIFI_SPI_Write+0x90>)
 80097be:	f00d f927 	bl	8016a10 <puts>
    }
    sent = len;
 80097c2:	887b      	ldrh	r3, [r7, #2]
 80097c4:	81fb      	strh	r3, [r7, #14]
  }

  UNLOCK(SpiTxLock);
 80097c6:	4b04      	ldr	r3, [pc, #16]	; (80097d8 <MX_WIFI_SPI_Write+0x7c>)
 80097c8:	2200      	movs	r2, #0
 80097ca:	701a      	strb	r2, [r3, #0]

  DEBUG_LOG("\n%s()< %" PRIi32 "\n\n", __FUNCTION__, (int32_t)sent);

  return sent;
 80097cc:	89fb      	ldrh	r3, [r7, #14]
}
 80097ce:	4618      	mov	r0, r3
 80097d0:	3710      	adds	r7, #16
 80097d2:	46bd      	mov	sp, r7
 80097d4:	bd80      	pop	{r7, pc}
 80097d6:	bf00      	nop
 80097d8:	20003238 	.word	0x20003238
 80097dc:	0801a9dc 	.word	0x0801a9dc
 80097e0:	2000324c 	.word	0x2000324c
 80097e4:	20003248 	.word	0x20003248
 80097e8:	2000323c 	.word	0x2000323c
 80097ec:	0801aa10 	.word	0x0801aa10

080097f0 <MX_WIFI_SPI_Read>:


static uint16_t MX_WIFI_SPI_Read(uint8_t *buffer, uint16_t buff_size)
{
 80097f0:	b480      	push	{r7}
 80097f2:	b083      	sub	sp, #12
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
 80097f8:	460b      	mov	r3, r1
 80097fa:	807b      	strh	r3, [r7, #2]
  (void)buffer;
  (void)buff_size;
  return 0;
 80097fc:	2300      	movs	r3, #0
}
 80097fe:	4618      	mov	r0, r3
 8009800:	370c      	adds	r7, #12
 8009802:	46bd      	mov	sp, r7
 8009804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009808:	4770      	bx	lr

0800980a <TransmitReceive>:


static HAL_StatusTypeDef TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *txdata, uint8_t *rxdata, uint16_t datalen,
                                         uint32_t timeout)
{
 800980a:	b580      	push	{r7, lr}
 800980c:	b088      	sub	sp, #32
 800980e:	af02      	add	r7, sp, #8
 8009810:	60f8      	str	r0, [r7, #12]
 8009812:	60b9      	str	r1, [r7, #8]
 8009814:	607a      	str	r2, [r7, #4]
 8009816:	807b      	strh	r3, [r7, #2]
#if (defined(DMA_ON_USE) && (DMA_ON_USE == 1))
  ret = HAL_SPI_TransmitReceive_DMA(hspi, txdata, rxdata, datalen);
  SEM_WAIT(SpiTransferDoneSem, timeout, NULL);

#else
  ret = HAL_SPI_TransmitReceive(hspi, txdata, rxdata, datalen, timeout);
 8009818:	887a      	ldrh	r2, [r7, #2]
 800981a:	6a3b      	ldr	r3, [r7, #32]
 800981c:	9300      	str	r3, [sp, #0]
 800981e:	4613      	mov	r3, r2
 8009820:	687a      	ldr	r2, [r7, #4]
 8009822:	68b9      	ldr	r1, [r7, #8]
 8009824:	68f8      	ldr	r0, [r7, #12]
 8009826:	f007 f935 	bl	8010a94 <HAL_SPI_TransmitReceive>
 800982a:	4603      	mov	r3, r0
 800982c:	75fb      	strb	r3, [r7, #23]
#endif /* (DMA_ON_USE == 1) */

  DEBUG_LOG("\n%s()< %" PRIi32 "\n\n", __FUNCTION__, (int32_t)ret);

  return ret;
 800982e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009830:	4618      	mov	r0, r3
 8009832:	3718      	adds	r7, #24
 8009834:	46bd      	mov	sp, r7
 8009836:	bd80      	pop	{r7, pc}

08009838 <Transmit>:


static HAL_StatusTypeDef Transmit(SPI_HandleTypeDef *hspi, uint8_t *txdata, uint16_t datalen, uint32_t timeout)
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b086      	sub	sp, #24
 800983c:	af00      	add	r7, sp, #0
 800983e:	60f8      	str	r0, [r7, #12]
 8009840:	60b9      	str	r1, [r7, #8]
 8009842:	603b      	str	r3, [r7, #0]
 8009844:	4613      	mov	r3, r2
 8009846:	80fb      	strh	r3, [r7, #6]
#if (defined(DMA_ON_USE) && (DMA_ON_USE == 1))
  ret = HAL_SPI_Transmit_DMA(hspi, txdata, datalen);
  SEM_WAIT(SpiTransferDoneSem, timeout, NULL);

#else
  ret = HAL_SPI_Transmit(hspi, txdata, datalen, timeout);
 8009848:	88fa      	ldrh	r2, [r7, #6]
 800984a:	683b      	ldr	r3, [r7, #0]
 800984c:	68b9      	ldr	r1, [r7, #8]
 800984e:	68f8      	ldr	r0, [r7, #12]
 8009850:	f006 fd52 	bl	80102f8 <HAL_SPI_Transmit>
 8009854:	4603      	mov	r3, r0
 8009856:	75fb      	strb	r3, [r7, #23]
#endif /* (DMA_ON_USE == 1) */

  DEBUG_LOG("\n%s() <%" PRIi32 "\n\n", __FUNCTION__, (int32_t)ret);

  return ret;
 8009858:	7dfb      	ldrb	r3, [r7, #23]
}
 800985a:	4618      	mov	r0, r3
 800985c:	3718      	adds	r7, #24
 800985e:	46bd      	mov	sp, r7
 8009860:	bd80      	pop	{r7, pc}

08009862 <Receive>:


static HAL_StatusTypeDef Receive(SPI_HandleTypeDef *hspi, uint8_t *rxdata, uint16_t datalen, uint32_t timeout)
{
 8009862:	b580      	push	{r7, lr}
 8009864:	b086      	sub	sp, #24
 8009866:	af00      	add	r7, sp, #0
 8009868:	60f8      	str	r0, [r7, #12]
 800986a:	60b9      	str	r1, [r7, #8]
 800986c:	603b      	str	r3, [r7, #0]
 800986e:	4613      	mov	r3, r2
 8009870:	80fb      	strh	r3, [r7, #6]
#if (defined(DMA_ON_USE) && (DMA_ON_USE == 1))
  ret = HAL_SPI_Receive_DMA(hspi, rxdata, datalen);
  SEM_WAIT(SpiTransferDoneSem, timeout, NULL);

#else
  ret = HAL_SPI_Receive(hspi, rxdata, datalen, timeout);
 8009872:	88fa      	ldrh	r2, [r7, #6]
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	68b9      	ldr	r1, [r7, #8]
 8009878:	68f8      	ldr	r0, [r7, #12]
 800987a:	f006 ff5b 	bl	8010734 <HAL_SPI_Receive>
 800987e:	4603      	mov	r3, r0
 8009880:	75fb      	strb	r3, [r7, #23]
  }
#endif /* 0 */

  DEBUG_LOG("\n%s()< %" PRIi32 "\n\n", __FUNCTION__, (int32_t)ret);

  return ret;
 8009882:	7dfb      	ldrb	r3, [r7, #23]
}
 8009884:	4618      	mov	r0, r3
 8009886:	3718      	adds	r7, #24
 8009888:	46bd      	mov	sp, r7
 800988a:	bd80      	pop	{r7, pc}

0800988c <process_txrx_poll>:


void process_txrx_poll(uint32_t timeout)
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b08e      	sub	sp, #56	; 0x38
 8009890:	af02      	add	r7, sp, #8
 8009892:	6078      	str	r0, [r7, #4]
  static mx_buf_t *netb = NULL;
  bool first_miss = true;
 8009894:	2301      	movs	r3, #1
 8009896:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  MX_WIFI_SPI_CS_HIGH();
 800989a:	2201      	movs	r2, #1
 800989c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80098a0:	48a1      	ldr	r0, [pc, #644]	; (8009b28 <process_txrx_poll+0x29c>)
 80098a2:	f000 ff01 	bl	800a6a8 <HAL_GPIO_WritePin>

  while (netb == NULL)
 80098a6:	e014      	b.n	80098d2 <process_txrx_poll+0x46>
  {
    netb = MX_NET_BUFFER_ALLOC(MX_WIFI_BUFFER_SIZE);
 80098a8:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80098ac:	f7ff fe9a 	bl	80095e4 <mx_buf_alloc>
 80098b0:	4603      	mov	r3, r0
 80098b2:	4a9e      	ldr	r2, [pc, #632]	; (8009b2c <process_txrx_poll+0x2a0>)
 80098b4:	6013      	str	r3, [r2, #0]

    MX_STAT(alloc);

    if (netb == NULL)
 80098b6:	4b9d      	ldr	r3, [pc, #628]	; (8009b2c <process_txrx_poll+0x2a0>)
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d109      	bne.n	80098d2 <process_txrx_poll+0x46>
    {
      DELAY_MS(1);
 80098be:	2001      	movs	r0, #1
 80098c0:	f000 fa6e 	bl	8009da0 <HAL_Delay>
      if (true == first_miss)
 80098c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d002      	beq.n	80098d2 <process_txrx_poll+0x46>
      {
        first_miss = false;
 80098cc:	2300      	movs	r3, #0
 80098ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  while (netb == NULL)
 80098d2:	4b96      	ldr	r3, [pc, #600]	; (8009b2c <process_txrx_poll+0x2a0>)
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d0e6      	beq.n	80098a8 <process_txrx_poll+0x1c>
      }
    }
  }

  /* Waiting for data to be sent or to be received. */
  if (SEM_WAIT(SpiTxRxSem, timeout, NULL) == SEM_OK)
 80098da:	2200      	movs	r2, #0
 80098dc:	6879      	ldr	r1, [r7, #4]
 80098de:	4894      	ldr	r0, [pc, #592]	; (8009b30 <process_txrx_poll+0x2a4>)
 80098e0:	f7fd fb11 	bl	8006f06 <noos_sem_wait>
 80098e4:	4603      	mov	r3, r0
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	f040 8119 	bne.w	8009b1e <process_txrx_poll+0x292>
  {
    NET_PERF_TASK_TAG(0);

    LOCK(SpiTxLock);
 80098ec:	4b91      	ldr	r3, [pc, #580]	; (8009b34 <process_txrx_poll+0x2a8>)
 80098ee:	781b      	ldrb	r3, [r3, #0]
 80098f0:	b2db      	uxtb	r3, r3
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d1fa      	bne.n	80098ec <process_txrx_poll+0x60>
 80098f6:	4b8f      	ldr	r3, [pc, #572]	; (8009b34 <process_txrx_poll+0x2a8>)
 80098f8:	2201      	movs	r2, #1
 80098fa:	701a      	strb	r2, [r3, #0]
    {
      spi_header_t mheader = {0};
 80098fc:	f107 0314 	add.w	r3, r7, #20
 8009900:	2200      	movs	r2, #0
 8009902:	601a      	str	r2, [r3, #0]
 8009904:	605a      	str	r2, [r3, #4]
      spi_header_t sheader = {0};
 8009906:	f107 030c 	add.w	r3, r7, #12
 800990a:	2200      	movs	r2, #0
 800990c:	601a      	str	r2, [r3, #0]
 800990e:	605a      	str	r2, [r3, #4]
      uint8_t *txdata = NULL;
 8009910:	2300      	movs	r3, #0
 8009912:	62bb      	str	r3, [r7, #40]	; 0x28
      bool is_continue = true;
 8009914:	2301      	movs	r3, #1
 8009916:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

      DEBUG_LOG("\n%s(): %p\n", __FUNCTION__, SpiTxData);

      if (SpiTxData == NULL)
 800991a:	4b87      	ldr	r3, [pc, #540]	; (8009b38 <process_txrx_poll+0x2ac>)
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d10b      	bne.n	800993a <process_txrx_poll+0xae>
      {
        if (!MX_WIFI_SPI_IRQ_IS_HIGH())
 8009922:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009926:	4885      	ldr	r0, [pc, #532]	; (8009b3c <process_txrx_poll+0x2b0>)
 8009928:	f000 fea6 	bl	800a678 <HAL_GPIO_ReadPin>
 800992c:	4603      	mov	r3, r0
 800992e:	2b01      	cmp	r3, #1
 8009930:	d00a      	beq.n	8009948 <process_txrx_poll+0xbc>
        {
          /* TX data null means no data to send, IRQ low means no data to be received. */
          is_continue = false;
 8009932:	2300      	movs	r3, #0
 8009934:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009938:	e006      	b.n	8009948 <process_txrx_poll+0xbc>
#endif /* MX_WIFI_BARE_OS_H */
        }
      }
      else
      {
        mheader.len = SpiTxLen;
 800993a:	4b81      	ldr	r3, [pc, #516]	; (8009b40 <process_txrx_poll+0x2b4>)
 800993c:	881b      	ldrh	r3, [r3, #0]
 800993e:	f8a7 3015 	strh.w	r3, [r7, #21]
        txdata = SpiTxData;
 8009942:	4b7d      	ldr	r3, [pc, #500]	; (8009b38 <process_txrx_poll+0x2ac>)
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if (is_continue)
 8009948:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800994c:	2b00      	cmp	r3, #0
 800994e:	f000 80e3 	beq.w	8009b18 <process_txrx_poll+0x28c>
      {
        mheader.type = SPI_WRITE;
 8009952:	230a      	movs	r3, #10
 8009954:	753b      	strb	r3, [r7, #20]
        mheader.lenx = ~mheader.len;
 8009956:	f8b7 3015 	ldrh.w	r3, [r7, #21]
 800995a:	b29b      	uxth	r3, r3
 800995c:	43db      	mvns	r3, r3
 800995e:	b29b      	uxth	r3, r3
 8009960:	f8a7 3017 	strh.w	r3, [r7, #23]

        MX_WIFI_SPI_CS_LOW();
 8009964:	2200      	movs	r2, #0
 8009966:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800996a:	486f      	ldr	r0, [pc, #444]	; (8009b28 <process_txrx_poll+0x29c>)
 800996c:	f000 fe9c 	bl	800a6a8 <HAL_GPIO_WritePin>

        {
          /* Wait for the EMW to be ready. */
          if (wait_flow_high(timeout) != 0)
 8009970:	6878      	ldr	r0, [r7, #4]
 8009972:	f7ff fec9 	bl	8009708 <wait_flow_high>
 8009976:	4603      	mov	r3, r0
 8009978:	2b00      	cmp	r3, #0
 800997a:	d003      	beq.n	8009984 <process_txrx_poll+0xf8>
          {
            DEBUG_ERROR("Wait FLOW timeout 0\n");
 800997c:	4871      	ldr	r0, [pc, #452]	; (8009b44 <process_txrx_poll+0x2b8>)
 800997e:	f00d f847 	bl	8016a10 <puts>
 8009982:	e0c3      	b.n	8009b0c <process_txrx_poll+0x280>
          }
          else
          {
            /* Transmit only the header part. */
            if (HAL_OK != TransmitReceive(HSpiMX, (uint8_t *)&mheader, (uint8_t *)&sheader, sizeof(mheader), timeout))
 8009984:	4870      	ldr	r0, [pc, #448]	; (8009b48 <process_txrx_poll+0x2bc>)
 8009986:	f107 020c 	add.w	r2, r7, #12
 800998a:	f107 0114 	add.w	r1, r7, #20
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	9300      	str	r3, [sp, #0]
 8009992:	2308      	movs	r3, #8
 8009994:	f7ff ff39 	bl	800980a <TransmitReceive>
 8009998:	4603      	mov	r3, r0
 800999a:	2b00      	cmp	r3, #0
 800999c:	d003      	beq.n	80099a6 <process_txrx_poll+0x11a>
            {
              DEBUG_ERROR("Send mheader error\n");
 800999e:	486b      	ldr	r0, [pc, #428]	; (8009b4c <process_txrx_poll+0x2c0>)
 80099a0:	f00d f836 	bl	8016a10 <puts>
 80099a4:	e0b2      	b.n	8009b0c <process_txrx_poll+0x280>
            }
            else
            {
              if (sheader.type != SPI_READ)
 80099a6:	7b3b      	ldrb	r3, [r7, #12]
 80099a8:	2b0b      	cmp	r3, #11
 80099aa:	d005      	beq.n	80099b8 <process_txrx_poll+0x12c>
              {
                DEBUG_ERROR("Invalid SPI type %02x\n", sheader.type);
 80099ac:	7b3b      	ldrb	r3, [r7, #12]
 80099ae:	4619      	mov	r1, r3
 80099b0:	4867      	ldr	r0, [pc, #412]	; (8009b50 <process_txrx_poll+0x2c4>)
 80099b2:	f00c ffbf 	bl	8016934 <iprintf>
 80099b6:	e0a9      	b.n	8009b0c <process_txrx_poll+0x280>
              }
              else
              {
                if ((sheader.len ^ sheader.lenx) != 0xFFFF)
 80099b8:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 80099bc:	b29a      	uxth	r2, r3
 80099be:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 80099c2:	b29b      	uxth	r3, r3
 80099c4:	4053      	eors	r3, r2
 80099c6:	b29b      	uxth	r3, r3
 80099c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80099cc:	4293      	cmp	r3, r2
 80099ce:	d00b      	beq.n	80099e8 <process_txrx_poll+0x15c>
                {
                  DEBUG_ERROR("Invalid length %04x-%04x\n", sheader.len, sheader.lenx);
 80099d0:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 80099d4:	b29b      	uxth	r3, r3
 80099d6:	4619      	mov	r1, r3
 80099d8:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 80099dc:	b29b      	uxth	r3, r3
 80099de:	461a      	mov	r2, r3
 80099e0:	485c      	ldr	r0, [pc, #368]	; (8009b54 <process_txrx_poll+0x2c8>)
 80099e2:	f00c ffa7 	bl	8016934 <iprintf>
 80099e6:	e091      	b.n	8009b0c <process_txrx_poll+0x280>
                }
                else
                {
                  /* Send or received header must be not null */
                  if ((sheader.len == 0) && (mheader.len == 0))
 80099e8:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 80099ec:	b29b      	uxth	r3, r3
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d105      	bne.n	80099fe <process_txrx_poll+0x172>
 80099f2:	f8b7 3015 	ldrh.w	r3, [r7, #21]
 80099f6:	b29b      	uxth	r3, r3
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	f000 8087 	beq.w	8009b0c <process_txrx_poll+0x280>
                  {
                  }
                  else
                  {
                    if ((sheader.len > SPI_DATA_SIZE) || (mheader.len > SPI_DATA_SIZE))
 80099fe:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 8009a02:	b29b      	uxth	r3, r3
 8009a04:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8009a08:	4293      	cmp	r3, r2
 8009a0a:	d806      	bhi.n	8009a1a <process_txrx_poll+0x18e>
 8009a0c:	f8b7 3015 	ldrh.w	r3, [r7, #21]
 8009a10:	b29b      	uxth	r3, r3
 8009a12:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8009a16:	4293      	cmp	r3, r2
 8009a18:	d90b      	bls.n	8009a32 <process_txrx_poll+0x1a6>
                    {
                      DEBUG_ERROR("SPI length invalid: %d-%d\n", sheader.len, mheader.len);
 8009a1a:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 8009a1e:	b29b      	uxth	r3, r3
 8009a20:	4619      	mov	r1, r3
 8009a22:	f8b7 3015 	ldrh.w	r3, [r7, #21]
 8009a26:	b29b      	uxth	r3, r3
 8009a28:	461a      	mov	r2, r3
 8009a2a:	484b      	ldr	r0, [pc, #300]	; (8009b58 <process_txrx_poll+0x2cc>)
 8009a2c:	f00c ff82 	bl	8016934 <iprintf>
 8009a30:	e06c      	b.n	8009b0c <process_txrx_poll+0x280>
                    }
                    else
                    {
                      uint16_t datalen;
                      uint8_t *rxdata = NULL;
 8009a32:	2300      	movs	r3, #0
 8009a34:	623b      	str	r3, [r7, #32]

                      /* Keep the max length between TX and RX. */
                      if (mheader.len > sheader.len)
 8009a36:	f8b7 3015 	ldrh.w	r3, [r7, #21]
 8009a3a:	b29a      	uxth	r2, r3
 8009a3c:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 8009a40:	b29b      	uxth	r3, r3
 8009a42:	429a      	cmp	r2, r3
 8009a44:	d904      	bls.n	8009a50 <process_txrx_poll+0x1c4>
                      {
                        datalen = mheader.len;
 8009a46:	697b      	ldr	r3, [r7, #20]
 8009a48:	f3c3 230f 	ubfx	r3, r3, #8, #16
 8009a4c:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009a4e:	e003      	b.n	8009a58 <process_txrx_poll+0x1cc>
                      }
                      else
                      {
                        datalen = sheader.len;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	f3c3 230f 	ubfx	r3, r3, #8, #16
 8009a56:	84bb      	strh	r3, [r7, #36]	; 0x24
                      }

                      /* Allocate a buffer for data to be received. */
                      if (sheader.len > 0)
 8009a58:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 8009a5c:	b29b      	uxth	r3, r3
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d007      	beq.n	8009a72 <process_txrx_poll+0x1e6>
                      {
                        /* Get start of the buffer payload. */
                        rxdata = MX_NET_BUFFER_PAYLOAD(netb);
 8009a62:	4b32      	ldr	r3, [pc, #200]	; (8009b2c <process_txrx_poll+0x2a0>)
 8009a64:	681a      	ldr	r2, [r3, #0]
 8009a66:	4b31      	ldr	r3, [pc, #196]	; (8009b2c <process_txrx_poll+0x2a0>)
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	685b      	ldr	r3, [r3, #4]
 8009a6c:	3308      	adds	r3, #8
 8009a6e:	4413      	add	r3, r2
 8009a70:	623b      	str	r3, [r7, #32]
                      }

                      /* FLOW must be high. */
                      if (wait_flow_high(timeout) != 0)
 8009a72:	6878      	ldr	r0, [r7, #4]
 8009a74:	f7ff fe48 	bl	8009708 <wait_flow_high>
 8009a78:	4603      	mov	r3, r0
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d003      	beq.n	8009a86 <process_txrx_poll+0x1fa>
                      {
                        DEBUG_ERROR("Wait FLOW timeout 1\n");
 8009a7e:	4837      	ldr	r0, [pc, #220]	; (8009b5c <process_txrx_poll+0x2d0>)
 8009a80:	f00c ffc6 	bl	8016a10 <puts>
 8009a84:	e042      	b.n	8009b0c <process_txrx_poll+0x280>
                      else
                      {
                        HAL_StatusTypeDef ret;

                        /* TX with possible RX. */
                        if (NULL != txdata)
 8009a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d01d      	beq.n	8009ac8 <process_txrx_poll+0x23c>
                        {
                          SpiTxData = NULL;
 8009a8c:	4b2a      	ldr	r3, [pc, #168]	; (8009b38 <process_txrx_poll+0x2ac>)
 8009a8e:	2200      	movs	r2, #0
 8009a90:	601a      	str	r2, [r3, #0]
                          SpiTxLen = 0;
 8009a92:	4b2b      	ldr	r3, [pc, #172]	; (8009b40 <process_txrx_poll+0x2b4>)
 8009a94:	2200      	movs	r2, #0
 8009a96:	801a      	strh	r2, [r3, #0]
                          if (NULL != rxdata)
 8009a98:	6a3b      	ldr	r3, [r7, #32]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d00b      	beq.n	8009ab6 <process_txrx_poll+0x22a>
                          {
                            ret = TransmitReceive(HSpiMX, txdata, rxdata, datalen, timeout);
 8009a9e:	482a      	ldr	r0, [pc, #168]	; (8009b48 <process_txrx_poll+0x2bc>)
 8009aa0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	9300      	str	r3, [sp, #0]
 8009aa6:	4613      	mov	r3, r2
 8009aa8:	6a3a      	ldr	r2, [r7, #32]
 8009aaa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009aac:	f7ff fead 	bl	800980a <TransmitReceive>
 8009ab0:	4603      	mov	r3, r0
 8009ab2:	77fb      	strb	r3, [r7, #31]
 8009ab4:	e010      	b.n	8009ad8 <process_txrx_poll+0x24c>
                          }
                          else
                          {
                            ret = Transmit(HSpiMX, txdata, datalen, timeout);
 8009ab6:	4824      	ldr	r0, [pc, #144]	; (8009b48 <process_txrx_poll+0x2bc>)
 8009ab8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009abe:	f7ff febb 	bl	8009838 <Transmit>
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	77fb      	strb	r3, [r7, #31]
 8009ac6:	e007      	b.n	8009ad8 <process_txrx_poll+0x24c>
                          }
                        }
                        else
                        {
                          ret = Receive(HSpiMX, rxdata, datalen, timeout);
 8009ac8:	481f      	ldr	r0, [pc, #124]	; (8009b48 <process_txrx_poll+0x2bc>)
 8009aca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	6a39      	ldr	r1, [r7, #32]
 8009ad0:	f7ff fec7 	bl	8009862 <Receive>
 8009ad4:	4603      	mov	r3, r0
 8009ad6:	77fb      	strb	r3, [r7, #31]
                        }

                        if (HAL_OK != ret)
 8009ad8:	7ffb      	ldrb	r3, [r7, #31]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d003      	beq.n	8009ae6 <process_txrx_poll+0x25a>
                        {
                          DEBUG_ERROR("Transmit/Receive data timeout\n");
 8009ade:	4820      	ldr	r0, [pc, #128]	; (8009b60 <process_txrx_poll+0x2d4>)
 8009ae0:	f00c ff96 	bl	8016a10 <puts>
 8009ae4:	e012      	b.n	8009b0c <process_txrx_poll+0x280>
                        }
                        else
                        {
                          /* Resize the input buffer and send it back to the processing thread. */
                          if (sheader.len > 0)
 8009ae6:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 8009aea:	b29b      	uxth	r3, r3
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d00d      	beq.n	8009b0c <process_txrx_poll+0x280>
                          {
                            NET_PERF_TASK_TAG(1);
                            MX_NET_BUFFER_SET_PAYLOAD_SIZE(netb, sheader.len);
 8009af0:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 8009af4:	b29a      	uxth	r2, r3
 8009af6:	4b0d      	ldr	r3, [pc, #52]	; (8009b2c <process_txrx_poll+0x2a0>)
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	601a      	str	r2, [r3, #0]
                            mx_wifi_hci_input(netb);
 8009afc:	4b0b      	ldr	r3, [pc, #44]	; (8009b2c <process_txrx_poll+0x2a0>)
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	4618      	mov	r0, r3
 8009b02:	f7fd fb9f 	bl	8007244 <mx_wifi_hci_input>
                            netb = NULL;
 8009b06:	4b09      	ldr	r3, [pc, #36]	; (8009b2c <process_txrx_poll+0x2a0>)
 8009b08:	2200      	movs	r2, #0
 8009b0a:	601a      	str	r2, [r3, #0]
                }
              }
            }
          }
          /* Notify transfer done. */
          MX_WIFI_SPI_CS_HIGH();
 8009b0c:	2201      	movs	r2, #1
 8009b0e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009b12:	4805      	ldr	r0, [pc, #20]	; (8009b28 <process_txrx_poll+0x29c>)
 8009b14:	f000 fdc8 	bl	800a6a8 <HAL_GPIO_WritePin>
        }
      }
    }
    UNLOCK(SpiTxLock);
 8009b18:	4b06      	ldr	r3, [pc, #24]	; (8009b34 <process_txrx_poll+0x2a8>)
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	701a      	strb	r2, [r3, #0]
  }
}
 8009b1e:	bf00      	nop
 8009b20:	3730      	adds	r7, #48	; 0x30
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bd80      	pop	{r7, pc}
 8009b26:	bf00      	nop
 8009b28:	42020400 	.word	0x42020400
 8009b2c:	20003250 	.word	0x20003250
 8009b30:	2000323c 	.word	0x2000323c
 8009b34:	20003238 	.word	0x20003238
 8009b38:	20003248 	.word	0x20003248
 8009b3c:	42020c00 	.word	0x42020c00
 8009b40:	2000324c 	.word	0x2000324c
 8009b44:	0801aa44 	.word	0x0801aa44
 8009b48:	20000c14 	.word	0x20000c14
 8009b4c:	0801aa58 	.word	0x0801aa58
 8009b50:	0801aa6c 	.word	0x0801aa6c
 8009b54:	0801aa84 	.word	0x0801aa84
 8009b58:	0801aaa0 	.word	0x0801aaa0
 8009b5c:	0801aabc 	.word	0x0801aabc
 8009b60:	0801aad0 	.word	0x0801aad0

08009b64 <mx_wifi_spi_txrx_start>:
}
#endif /* MX_WIFI_BARE_OS_H */


static int8_t mx_wifi_spi_txrx_start(void)
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b082      	sub	sp, #8
 8009b68:	af00      	add	r7, sp, #0
  int8_t ret = 0;
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	71fb      	strb	r3, [r7, #7]

  LOCK_INIT(SpiTxLock);
 8009b6e:	4b0c      	ldr	r3, [pc, #48]	; (8009ba0 <mx_wifi_spi_txrx_start+0x3c>)
 8009b70:	2200      	movs	r2, #0
 8009b72:	701a      	strb	r2, [r3, #0]
  SEM_INIT(SpiTxRxSem, 2);
 8009b74:	4b0b      	ldr	r3, [pc, #44]	; (8009ba4 <mx_wifi_spi_txrx_start+0x40>)
 8009b76:	2200      	movs	r2, #0
 8009b78:	601a      	str	r2, [r3, #0]
  SEM_INIT(SpiFlowRiseSem, 1);
 8009b7a:	4b0b      	ldr	r3, [pc, #44]	; (8009ba8 <mx_wifi_spi_txrx_start+0x44>)
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	601a      	str	r2, [r3, #0]
  SEM_INIT(SpiTransferDoneSem, 1);
 8009b80:	4b0a      	ldr	r3, [pc, #40]	; (8009bac <mx_wifi_spi_txrx_start+0x48>)
 8009b82:	2200      	movs	r2, #0
 8009b84:	601a      	str	r2, [r3, #0]
  }
  else
  {
    /* Notify SPI ready. */
    /* De-select the SPI slave. */
    MX_WIFI_SPI_CS_HIGH();
 8009b86:	2201      	movs	r2, #1
 8009b88:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009b8c:	4808      	ldr	r0, [pc, #32]	; (8009bb0 <mx_wifi_spi_txrx_start+0x4c>)
 8009b8e:	f000 fd8b 	bl	800a6a8 <HAL_GPIO_WritePin>
  }
  return ret;
 8009b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8009b96:	4618      	mov	r0, r3
 8009b98:	3708      	adds	r7, #8
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	bd80      	pop	{r7, pc}
 8009b9e:	bf00      	nop
 8009ba0:	20003238 	.word	0x20003238
 8009ba4:	2000323c 	.word	0x2000323c
 8009ba8:	20003240 	.word	0x20003240
 8009bac:	20003244 	.word	0x20003244
 8009bb0:	42020400 	.word	0x42020400

08009bb4 <mx_wifi_spi_txrx_stop>:


static int8_t mx_wifi_spi_txrx_stop(void)
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	af00      	add	r7, sp, #0
  /* Set thread quit flag to TRUE. */
  SPITxRxTaskQuitFlag = true;
#endif /* MX_WIFI_BARE_OS_H */

  /* Wake up the thread if it's sleeping. */
  SEM_SIGNAL(SpiTxRxSem);
 8009bb8:	4802      	ldr	r0, [pc, #8]	; (8009bc4 <mx_wifi_spi_txrx_stop+0x10>)
 8009bba:	f7fd f98b 	bl	8006ed4 <noos_sem_signal>
  THREAD_DEINIT(MX_WIFI_TxRxThreadId);
  SEM_DEINIT(SpiTxRxSem);
  SEM_DEINIT(SpiFlowRiseSem);
  LOCK_DEINIT(SpiTxLock);

  return 0;
 8009bbe:	2300      	movs	r3, #0
}
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	bd80      	pop	{r7, pc}
 8009bc4:	2000323c 	.word	0x2000323c

08009bc8 <mxwifi_probe>:


int32_t mxwifi_probe(void **ll_drv_context)
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b086      	sub	sp, #24
 8009bcc:	af02      	add	r7, sp, #8
 8009bce:	6078      	str	r0, [r7, #4]
  int32_t ret = -1;
 8009bd0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009bd4:	60fb      	str	r3, [r7, #12]

  if (MX_WIFI_RegisterBusIO(&MxWifiObj,
 8009bd6:	4b0d      	ldr	r3, [pc, #52]	; (8009c0c <mxwifi_probe+0x44>)
 8009bd8:	9301      	str	r3, [sp, #4]
 8009bda:	4b0d      	ldr	r3, [pc, #52]	; (8009c10 <mxwifi_probe+0x48>)
 8009bdc:	9300      	str	r3, [sp, #0]
 8009bde:	4b0d      	ldr	r3, [pc, #52]	; (8009c14 <mxwifi_probe+0x4c>)
 8009be0:	4a0d      	ldr	r2, [pc, #52]	; (8009c18 <mxwifi_probe+0x50>)
 8009be2:	490e      	ldr	r1, [pc, #56]	; (8009c1c <mxwifi_probe+0x54>)
 8009be4:	480e      	ldr	r0, [pc, #56]	; (8009c20 <mxwifi_probe+0x58>)
 8009be6:	f7fd fdff 	bl	80077e8 <MX_WIFI_RegisterBusIO>
 8009bea:	4603      	mov	r3, r0
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d107      	bne.n	8009c00 <mxwifi_probe+0x38>
                            MX_WIFI_SPI_DeInit,
                            MX_WIFI_IO_DELAY,
                            MX_WIFI_SPI_Write,
                            MX_WIFI_SPI_Read) == MX_WIFI_STATUS_OK)
  {
    if (NULL != ll_drv_context)
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d002      	beq.n	8009bfc <mxwifi_probe+0x34>
    {
      *ll_drv_context = &MxWifiObj;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	4a09      	ldr	r2, [pc, #36]	; (8009c20 <mxwifi_probe+0x58>)
 8009bfa:	601a      	str	r2, [r3, #0]
    }
    ret = 0;
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8009c00:	68fb      	ldr	r3, [r7, #12]
}
 8009c02:	4618      	mov	r0, r3
 8009c04:	3710      	adds	r7, #16
 8009c06:	46bd      	mov	sp, r7
 8009c08:	bd80      	pop	{r7, pc}
 8009c0a:	bf00      	nop
 8009c0c:	080097f1 	.word	0x080097f1
 8009c10:	0800975d 	.word	0x0800975d
 8009c14:	08009617 	.word	0x08009617
 8009c18:	08009681 	.word	0x08009681
 8009c1c:	0800962d 	.word	0x0800962d
 8009c20:	20002c24 	.word	0x20002c24

08009c24 <wifi_obj_get>:


MX_WIFIObject_t *wifi_obj_get(void)
{
 8009c24:	b480      	push	{r7}
 8009c26:	af00      	add	r7, sp, #0
  return &MxWifiObj;
 8009c28:	4b02      	ldr	r3, [pc, #8]	; (8009c34 <wifi_obj_get+0x10>)
}
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c32:	4770      	bx	lr
 8009c34:	20002c24 	.word	0x20002c24

08009c38 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8009c38:	b480      	push	{r7}
 8009c3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8009c3c:	4b18      	ldr	r3, [pc, #96]	; (8009ca0 <SystemInit+0x68>)
 8009c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c42:	4a17      	ldr	r2, [pc, #92]	; (8009ca0 <SystemInit+0x68>)
 8009c44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009c48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8009c4c:	4b15      	ldr	r3, [pc, #84]	; (8009ca4 <SystemInit+0x6c>)
 8009c4e:	2201      	movs	r2, #1
 8009c50:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8009c52:	4b14      	ldr	r3, [pc, #80]	; (8009ca4 <SystemInit+0x6c>)
 8009c54:	2200      	movs	r2, #0
 8009c56:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8009c58:	4b12      	ldr	r3, [pc, #72]	; (8009ca4 <SystemInit+0x6c>)
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8009c5e:	4b11      	ldr	r3, [pc, #68]	; (8009ca4 <SystemInit+0x6c>)
 8009c60:	2200      	movs	r2, #0
 8009c62:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8009c64:	4b0f      	ldr	r3, [pc, #60]	; (8009ca4 <SystemInit+0x6c>)
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	4a0e      	ldr	r2, [pc, #56]	; (8009ca4 <SystemInit+0x6c>)
 8009c6a:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8009c6e:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8009c72:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8009c74:	4b0b      	ldr	r3, [pc, #44]	; (8009ca4 <SystemInit+0x6c>)
 8009c76:	2200      	movs	r2, #0
 8009c78:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8009c7a:	4b0a      	ldr	r3, [pc, #40]	; (8009ca4 <SystemInit+0x6c>)
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	4a09      	ldr	r2, [pc, #36]	; (8009ca4 <SystemInit+0x6c>)
 8009c80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009c84:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8009c86:	4b07      	ldr	r3, [pc, #28]	; (8009ca4 <SystemInit+0x6c>)
 8009c88:	2200      	movs	r2, #0
 8009c8a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8009c8c:	4b04      	ldr	r3, [pc, #16]	; (8009ca0 <SystemInit+0x68>)
 8009c8e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009c92:	609a      	str	r2, [r3, #8]
  #endif
}
 8009c94:	bf00      	nop
 8009c96:	46bd      	mov	sp, r7
 8009c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9c:	4770      	bx	lr
 8009c9e:	bf00      	nop
 8009ca0:	e000ed00 	.word	0xe000ed00
 8009ca4:	46020c00 	.word	0x46020c00

08009ca8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009cac:	2003      	movs	r0, #3
 8009cae:	f000 f96b 	bl	8009f88 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8009cb2:	f003 fb4d 	bl	800d350 <HAL_RCC_GetSysClockFreq>
 8009cb6:	4602      	mov	r2, r0
 8009cb8:	4b0b      	ldr	r3, [pc, #44]	; (8009ce8 <HAL_Init+0x40>)
 8009cba:	6a1b      	ldr	r3, [r3, #32]
 8009cbc:	f003 030f 	and.w	r3, r3, #15
 8009cc0:	490a      	ldr	r1, [pc, #40]	; (8009cec <HAL_Init+0x44>)
 8009cc2:	5ccb      	ldrb	r3, [r1, r3]
 8009cc4:	fa22 f303 	lsr.w	r3, r2, r3
 8009cc8:	4a09      	ldr	r2, [pc, #36]	; (8009cf0 <HAL_Init+0x48>)
 8009cca:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8009ccc:	2000      	movs	r0, #0
 8009cce:	f000 f811 	bl	8009cf4 <HAL_InitTick>
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d001      	beq.n	8009cdc <HAL_Init+0x34>
  {
    return HAL_ERROR;
 8009cd8:	2301      	movs	r3, #1
 8009cda:	e002      	b.n	8009ce2 <HAL_Init+0x3a>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8009cdc:	f7f7 fa4e 	bl	800117c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009ce0:	2300      	movs	r3, #0
}
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	bd80      	pop	{r7, pc}
 8009ce6:	bf00      	nop
 8009ce8:	46020c00 	.word	0x46020c00
 8009cec:	0801ccdc 	.word	0x0801ccdc
 8009cf0:	200000f0 	.word	0x200000f0

08009cf4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b082      	sub	sp, #8
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8009cfc:	4b15      	ldr	r3, [pc, #84]	; (8009d54 <HAL_InitTick+0x60>)
 8009cfe:	781b      	ldrb	r3, [r3, #0]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d101      	bne.n	8009d08 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8009d04:	2301      	movs	r3, #1
 8009d06:	e021      	b.n	8009d4c <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8009d08:	4b13      	ldr	r3, [pc, #76]	; (8009d58 <HAL_InitTick+0x64>)
 8009d0a:	681a      	ldr	r2, [r3, #0]
 8009d0c:	4b11      	ldr	r3, [pc, #68]	; (8009d54 <HAL_InitTick+0x60>)
 8009d0e:	781b      	ldrb	r3, [r3, #0]
 8009d10:	4619      	mov	r1, r3
 8009d12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009d16:	fbb3 f3f1 	udiv	r3, r3, r1
 8009d1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d1e:	4618      	mov	r0, r3
 8009d20:	f000 f965 	bl	8009fee <HAL_SYSTICK_Config>
 8009d24:	4603      	mov	r3, r0
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d001      	beq.n	8009d2e <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8009d2a:	2301      	movs	r3, #1
 8009d2c:	e00e      	b.n	8009d4c <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	2b0f      	cmp	r3, #15
 8009d32:	d80a      	bhi.n	8009d4a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009d34:	2200      	movs	r2, #0
 8009d36:	6879      	ldr	r1, [r7, #4]
 8009d38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009d3c:	f000 f92f 	bl	8009f9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009d40:	4a06      	ldr	r2, [pc, #24]	; (8009d5c <HAL_InitTick+0x68>)
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8009d46:	2300      	movs	r3, #0
 8009d48:	e000      	b.n	8009d4c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8009d4a:	2301      	movs	r3, #1
}
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	3708      	adds	r7, #8
 8009d50:	46bd      	mov	sp, r7
 8009d52:	bd80      	pop	{r7, pc}
 8009d54:	200000f8 	.word	0x200000f8
 8009d58:	200000f0 	.word	0x200000f0
 8009d5c:	200000f4 	.word	0x200000f4

08009d60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009d60:	b480      	push	{r7}
 8009d62:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8009d64:	4b06      	ldr	r3, [pc, #24]	; (8009d80 <HAL_IncTick+0x20>)
 8009d66:	781b      	ldrb	r3, [r3, #0]
 8009d68:	461a      	mov	r2, r3
 8009d6a:	4b06      	ldr	r3, [pc, #24]	; (8009d84 <HAL_IncTick+0x24>)
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	4413      	add	r3, r2
 8009d70:	4a04      	ldr	r2, [pc, #16]	; (8009d84 <HAL_IncTick+0x24>)
 8009d72:	6013      	str	r3, [r2, #0]
}
 8009d74:	bf00      	nop
 8009d76:	46bd      	mov	sp, r7
 8009d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7c:	4770      	bx	lr
 8009d7e:	bf00      	nop
 8009d80:	200000f8 	.word	0x200000f8
 8009d84:	20003254 	.word	0x20003254

08009d88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009d88:	b480      	push	{r7}
 8009d8a:	af00      	add	r7, sp, #0
  return uwTick;
 8009d8c:	4b03      	ldr	r3, [pc, #12]	; (8009d9c <HAL_GetTick+0x14>)
 8009d8e:	681b      	ldr	r3, [r3, #0]
}
 8009d90:	4618      	mov	r0, r3
 8009d92:	46bd      	mov	sp, r7
 8009d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d98:	4770      	bx	lr
 8009d9a:	bf00      	nop
 8009d9c:	20003254 	.word	0x20003254

08009da0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b084      	sub	sp, #16
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009da8:	f7ff ffee 	bl	8009d88 <HAL_GetTick>
 8009dac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009db8:	d005      	beq.n	8009dc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009dba:	4b0a      	ldr	r3, [pc, #40]	; (8009de4 <HAL_Delay+0x44>)
 8009dbc:	781b      	ldrb	r3, [r3, #0]
 8009dbe:	461a      	mov	r2, r3
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	4413      	add	r3, r2
 8009dc4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8009dc6:	bf00      	nop
 8009dc8:	f7ff ffde 	bl	8009d88 <HAL_GetTick>
 8009dcc:	4602      	mov	r2, r0
 8009dce:	68bb      	ldr	r3, [r7, #8]
 8009dd0:	1ad3      	subs	r3, r2, r3
 8009dd2:	68fa      	ldr	r2, [r7, #12]
 8009dd4:	429a      	cmp	r2, r3
 8009dd6:	d8f7      	bhi.n	8009dc8 <HAL_Delay+0x28>
  {
  }
}
 8009dd8:	bf00      	nop
 8009dda:	bf00      	nop
 8009ddc:	3710      	adds	r7, #16
 8009dde:	46bd      	mov	sp, r7
 8009de0:	bd80      	pop	{r7, pc}
 8009de2:	bf00      	nop
 8009de4:	200000f8 	.word	0x200000f8

08009de8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009de8:	b480      	push	{r7}
 8009dea:	b085      	sub	sp, #20
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	f003 0307 	and.w	r3, r3, #7
 8009df6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009df8:	4b0c      	ldr	r3, [pc, #48]	; (8009e2c <__NVIC_SetPriorityGrouping+0x44>)
 8009dfa:	68db      	ldr	r3, [r3, #12]
 8009dfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009dfe:	68ba      	ldr	r2, [r7, #8]
 8009e00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009e04:	4013      	ands	r3, r2
 8009e06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009e0c:	68bb      	ldr	r3, [r7, #8]
 8009e0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009e10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009e14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009e1a:	4a04      	ldr	r2, [pc, #16]	; (8009e2c <__NVIC_SetPriorityGrouping+0x44>)
 8009e1c:	68bb      	ldr	r3, [r7, #8]
 8009e1e:	60d3      	str	r3, [r2, #12]
}
 8009e20:	bf00      	nop
 8009e22:	3714      	adds	r7, #20
 8009e24:	46bd      	mov	sp, r7
 8009e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2a:	4770      	bx	lr
 8009e2c:	e000ed00 	.word	0xe000ed00

08009e30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009e30:	b480      	push	{r7}
 8009e32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009e34:	4b04      	ldr	r3, [pc, #16]	; (8009e48 <__NVIC_GetPriorityGrouping+0x18>)
 8009e36:	68db      	ldr	r3, [r3, #12]
 8009e38:	0a1b      	lsrs	r3, r3, #8
 8009e3a:	f003 0307 	and.w	r3, r3, #7
}
 8009e3e:	4618      	mov	r0, r3
 8009e40:	46bd      	mov	sp, r7
 8009e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e46:	4770      	bx	lr
 8009e48:	e000ed00 	.word	0xe000ed00

08009e4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009e4c:	b480      	push	{r7}
 8009e4e:	b083      	sub	sp, #12
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	4603      	mov	r3, r0
 8009e54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	db0b      	blt.n	8009e76 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009e5e:	79fb      	ldrb	r3, [r7, #7]
 8009e60:	f003 021f 	and.w	r2, r3, #31
 8009e64:	4907      	ldr	r1, [pc, #28]	; (8009e84 <__NVIC_EnableIRQ+0x38>)
 8009e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009e6a:	095b      	lsrs	r3, r3, #5
 8009e6c:	2001      	movs	r0, #1
 8009e6e:	fa00 f202 	lsl.w	r2, r0, r2
 8009e72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8009e76:	bf00      	nop
 8009e78:	370c      	adds	r7, #12
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e80:	4770      	bx	lr
 8009e82:	bf00      	nop
 8009e84:	e000e100 	.word	0xe000e100

08009e88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009e88:	b480      	push	{r7}
 8009e8a:	b083      	sub	sp, #12
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	4603      	mov	r3, r0
 8009e90:	6039      	str	r1, [r7, #0]
 8009e92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009e94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	db0a      	blt.n	8009eb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009e9c:	683b      	ldr	r3, [r7, #0]
 8009e9e:	b2da      	uxtb	r2, r3
 8009ea0:	490c      	ldr	r1, [pc, #48]	; (8009ed4 <__NVIC_SetPriority+0x4c>)
 8009ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ea6:	0112      	lsls	r2, r2, #4
 8009ea8:	b2d2      	uxtb	r2, r2
 8009eaa:	440b      	add	r3, r1
 8009eac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009eb0:	e00a      	b.n	8009ec8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009eb2:	683b      	ldr	r3, [r7, #0]
 8009eb4:	b2da      	uxtb	r2, r3
 8009eb6:	4908      	ldr	r1, [pc, #32]	; (8009ed8 <__NVIC_SetPriority+0x50>)
 8009eb8:	79fb      	ldrb	r3, [r7, #7]
 8009eba:	f003 030f 	and.w	r3, r3, #15
 8009ebe:	3b04      	subs	r3, #4
 8009ec0:	0112      	lsls	r2, r2, #4
 8009ec2:	b2d2      	uxtb	r2, r2
 8009ec4:	440b      	add	r3, r1
 8009ec6:	761a      	strb	r2, [r3, #24]
}
 8009ec8:	bf00      	nop
 8009eca:	370c      	adds	r7, #12
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed2:	4770      	bx	lr
 8009ed4:	e000e100 	.word	0xe000e100
 8009ed8:	e000ed00 	.word	0xe000ed00

08009edc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009edc:	b480      	push	{r7}
 8009ede:	b089      	sub	sp, #36	; 0x24
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	60f8      	str	r0, [r7, #12]
 8009ee4:	60b9      	str	r1, [r7, #8]
 8009ee6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	f003 0307 	and.w	r3, r3, #7
 8009eee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009ef0:	69fb      	ldr	r3, [r7, #28]
 8009ef2:	f1c3 0307 	rsb	r3, r3, #7
 8009ef6:	2b04      	cmp	r3, #4
 8009ef8:	bf28      	it	cs
 8009efa:	2304      	movcs	r3, #4
 8009efc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009efe:	69fb      	ldr	r3, [r7, #28]
 8009f00:	3304      	adds	r3, #4
 8009f02:	2b06      	cmp	r3, #6
 8009f04:	d902      	bls.n	8009f0c <NVIC_EncodePriority+0x30>
 8009f06:	69fb      	ldr	r3, [r7, #28]
 8009f08:	3b03      	subs	r3, #3
 8009f0a:	e000      	b.n	8009f0e <NVIC_EncodePriority+0x32>
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009f10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009f14:	69bb      	ldr	r3, [r7, #24]
 8009f16:	fa02 f303 	lsl.w	r3, r2, r3
 8009f1a:	43da      	mvns	r2, r3
 8009f1c:	68bb      	ldr	r3, [r7, #8]
 8009f1e:	401a      	ands	r2, r3
 8009f20:	697b      	ldr	r3, [r7, #20]
 8009f22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009f24:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009f28:	697b      	ldr	r3, [r7, #20]
 8009f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8009f2e:	43d9      	mvns	r1, r3
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009f34:	4313      	orrs	r3, r2
         );
}
 8009f36:	4618      	mov	r0, r3
 8009f38:	3724      	adds	r7, #36	; 0x24
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f40:	4770      	bx	lr
	...

08009f44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b082      	sub	sp, #8
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	3b01      	subs	r3, #1
 8009f50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009f54:	d301      	bcc.n	8009f5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009f56:	2301      	movs	r3, #1
 8009f58:	e00f      	b.n	8009f7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009f5a:	4a0a      	ldr	r2, [pc, #40]	; (8009f84 <SysTick_Config+0x40>)
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	3b01      	subs	r3, #1
 8009f60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009f62:	210f      	movs	r1, #15
 8009f64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009f68:	f7ff ff8e 	bl	8009e88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009f6c:	4b05      	ldr	r3, [pc, #20]	; (8009f84 <SysTick_Config+0x40>)
 8009f6e:	2200      	movs	r2, #0
 8009f70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009f72:	4b04      	ldr	r3, [pc, #16]	; (8009f84 <SysTick_Config+0x40>)
 8009f74:	2207      	movs	r2, #7
 8009f76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009f78:	2300      	movs	r3, #0
}
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	3708      	adds	r7, #8
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	bd80      	pop	{r7, pc}
 8009f82:	bf00      	nop
 8009f84:	e000e010 	.word	0xe000e010

08009f88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b082      	sub	sp, #8
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009f90:	6878      	ldr	r0, [r7, #4]
 8009f92:	f7ff ff29 	bl	8009de8 <__NVIC_SetPriorityGrouping>
}
 8009f96:	bf00      	nop
 8009f98:	3708      	adds	r7, #8
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	bd80      	pop	{r7, pc}

08009f9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009f9e:	b580      	push	{r7, lr}
 8009fa0:	b086      	sub	sp, #24
 8009fa2:	af00      	add	r7, sp, #0
 8009fa4:	4603      	mov	r3, r0
 8009fa6:	60b9      	str	r1, [r7, #8]
 8009fa8:	607a      	str	r2, [r7, #4]
 8009faa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8009fac:	f7ff ff40 	bl	8009e30 <__NVIC_GetPriorityGrouping>
 8009fb0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009fb2:	687a      	ldr	r2, [r7, #4]
 8009fb4:	68b9      	ldr	r1, [r7, #8]
 8009fb6:	6978      	ldr	r0, [r7, #20]
 8009fb8:	f7ff ff90 	bl	8009edc <NVIC_EncodePriority>
 8009fbc:	4602      	mov	r2, r0
 8009fbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009fc2:	4611      	mov	r1, r2
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	f7ff ff5f 	bl	8009e88 <__NVIC_SetPriority>
}
 8009fca:	bf00      	nop
 8009fcc:	3718      	adds	r7, #24
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	bd80      	pop	{r7, pc}

08009fd2 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009fd2:	b580      	push	{r7, lr}
 8009fd4:	b082      	sub	sp, #8
 8009fd6:	af00      	add	r7, sp, #0
 8009fd8:	4603      	mov	r3, r0
 8009fda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009fdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	f7ff ff33 	bl	8009e4c <__NVIC_EnableIRQ>
}
 8009fe6:	bf00      	nop
 8009fe8:	3708      	adds	r7, #8
 8009fea:	46bd      	mov	sp, r7
 8009fec:	bd80      	pop	{r7, pc}

08009fee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009fee:	b580      	push	{r7, lr}
 8009ff0:	b082      	sub	sp, #8
 8009ff2:	af00      	add	r7, sp, #0
 8009ff4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8009ff6:	6878      	ldr	r0, [r7, #4]
 8009ff8:	f7ff ffa4 	bl	8009f44 <SysTick_Config>
 8009ffc:	4603      	mov	r3, r0
}
 8009ffe:	4618      	mov	r0, r3
 800a000:	3708      	adds	r7, #8
 800a002:	46bd      	mov	sp, r7
 800a004:	bd80      	pop	{r7, pc}
	...

0800a008 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800a008:	b480      	push	{r7}
 800a00a:	b083      	sub	sp, #12
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	2b04      	cmp	r3, #4
 800a014:	d844      	bhi.n	800a0a0 <HAL_SYSTICK_CLKSourceConfig+0x98>
 800a016:	a201      	add	r2, pc, #4	; (adr r2, 800a01c <HAL_SYSTICK_CLKSourceConfig+0x14>)
 800a018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a01c:	0800a03f 	.word	0x0800a03f
 800a020:	0800a05d 	.word	0x0800a05d
 800a024:	0800a07f 	.word	0x0800a07f
 800a028:	0800a0a1 	.word	0x0800a0a1
 800a02c:	0800a031 	.word	0x0800a031
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800a030:	4b1f      	ldr	r3, [pc, #124]	; (800a0b0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	4a1e      	ldr	r2, [pc, #120]	; (800a0b0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800a036:	f043 0304 	orr.w	r3, r3, #4
 800a03a:	6013      	str	r3, [r2, #0]
      break;
 800a03c:	e031      	b.n	800a0a2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800a03e:	4b1c      	ldr	r3, [pc, #112]	; (800a0b0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	4a1b      	ldr	r2, [pc, #108]	; (800a0b0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800a044:	f023 0304 	bic.w	r3, r3, #4
 800a048:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 800a04a:	4b1a      	ldr	r3, [pc, #104]	; (800a0b4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800a04c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a050:	4a18      	ldr	r2, [pc, #96]	; (800a0b4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800a052:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800a056:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
      break;
 800a05a:	e022      	b.n	800a0a2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800a05c:	4b14      	ldr	r3, [pc, #80]	; (800a0b0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	4a13      	ldr	r2, [pc, #76]	; (800a0b0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800a062:	f023 0304 	bic.w	r3, r3, #4
 800a066:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 800a068:	4b12      	ldr	r3, [pc, #72]	; (800a0b4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800a06a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a06e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800a072:	4a10      	ldr	r2, [pc, #64]	; (800a0b4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800a074:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a078:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
      break;
 800a07c:	e011      	b.n	800a0a2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800a07e:	4b0c      	ldr	r3, [pc, #48]	; (800a0b0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	4a0b      	ldr	r2, [pc, #44]	; (800a0b0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800a084:	f023 0304 	bic.w	r3, r3, #4
 800a088:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 800a08a:	4b0a      	ldr	r3, [pc, #40]	; (800a0b4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800a08c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a090:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800a094:	4a07      	ldr	r2, [pc, #28]	; (800a0b4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800a096:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a09a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
      break;
 800a09e:	e000      	b.n	800a0a2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 800a0a0:	bf00      	nop
  }
}
 800a0a2:	bf00      	nop
 800a0a4:	370c      	adds	r7, #12
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ac:	4770      	bx	lr
 800a0ae:	bf00      	nop
 800a0b0:	e000e010 	.word	0xe000e010
 800a0b4:	46020c00 	.word	0x46020c00

0800a0b8 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 800a0b8:	b480      	push	{r7}
 800a0ba:	b083      	sub	sp, #12
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d101      	bne.n	800a0ca <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800a0c6:	2301      	movs	r3, #1
 800a0c8:	e019      	b.n	800a0fe <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800a0d0:	b2db      	uxtb	r3, r3
 800a0d2:	2b02      	cmp	r3, #2
 800a0d4:	d004      	beq.n	800a0e0 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	2220      	movs	r2, #32
 800a0da:	659a      	str	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 800a0dc:	2301      	movs	r3, #1
 800a0de:	e00e      	b.n	800a0fe <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2204      	movs	r2, #4
 800a0e4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	695b      	ldr	r3, [r3, #20]
 800a0ee:	687a      	ldr	r2, [r7, #4]
 800a0f0:	6812      	ldr	r2, [r2, #0]
 800a0f2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a0f6:	f043 0304 	orr.w	r3, r3, #4
 800a0fa:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 800a0fc:	2300      	movs	r3, #0
}
 800a0fe:	4618      	mov	r0, r3
 800a100:	370c      	adds	r7, #12
 800a102:	46bd      	mov	sp, r7
 800a104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a108:	4770      	bx	lr
	...

0800a10c <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 800a10c:	b480      	push	{r7}
 800a10e:	b089      	sub	sp, #36	; 0x24
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
 800a114:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 800a116:	2300      	movs	r3, #0
 800a118:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800a11e:	e1ba      	b.n	800a496 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 800a120:	683b      	ldr	r3, [r7, #0]
 800a122:	681a      	ldr	r2, [r3, #0]
 800a124:	2101      	movs	r1, #1
 800a126:	697b      	ldr	r3, [r7, #20]
 800a128:	fa01 f303 	lsl.w	r3, r1, r3
 800a12c:	4013      	ands	r3, r2
 800a12e:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 800a130:	697b      	ldr	r3, [r7, #20]
 800a132:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	2b00      	cmp	r3, #0
 800a138:	f000 81aa 	beq.w	800a490 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	4a55      	ldr	r2, [pc, #340]	; (800a294 <HAL_GPIO_Init+0x188>)
 800a140:	4293      	cmp	r3, r2
 800a142:	d15d      	bne.n	800a200 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 800a14a:	2201      	movs	r2, #1
 800a14c:	697b      	ldr	r3, [r7, #20]
 800a14e:	fa02 f303 	lsl.w	r3, r2, r3
 800a152:	43db      	mvns	r3, r3
 800a154:	69fa      	ldr	r2, [r7, #28]
 800a156:	4013      	ands	r3, r2
 800a158:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 800a15a:	683b      	ldr	r3, [r7, #0]
 800a15c:	685b      	ldr	r3, [r3, #4]
 800a15e:	f003 0201 	and.w	r2, r3, #1
 800a162:	697b      	ldr	r3, [r7, #20]
 800a164:	fa02 f303 	lsl.w	r3, r2, r3
 800a168:	69fa      	ldr	r2, [r7, #28]
 800a16a:	4313      	orrs	r3, r2
 800a16c:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	69fa      	ldr	r2, [r7, #28]
 800a172:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 800a174:	4a48      	ldr	r2, [pc, #288]	; (800a298 <HAL_GPIO_Init+0x18c>)
 800a176:	697b      	ldr	r3, [r7, #20]
 800a178:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a17c:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800a17e:	4a46      	ldr	r2, [pc, #280]	; (800a298 <HAL_GPIO_Init+0x18c>)
 800a180:	697b      	ldr	r3, [r7, #20]
 800a182:	00db      	lsls	r3, r3, #3
 800a184:	4413      	add	r3, r2
 800a186:	685b      	ldr	r3, [r3, #4]
 800a188:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 800a18a:	69bb      	ldr	r3, [r7, #24]
 800a18c:	08da      	lsrs	r2, r3, #3
 800a18e:	693b      	ldr	r3, [r7, #16]
 800a190:	3208      	adds	r2, #8
 800a192:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a196:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 800a198:	69bb      	ldr	r3, [r7, #24]
 800a19a:	f003 0307 	and.w	r3, r3, #7
 800a19e:	009b      	lsls	r3, r3, #2
 800a1a0:	220f      	movs	r2, #15
 800a1a2:	fa02 f303 	lsl.w	r3, r2, r3
 800a1a6:	43db      	mvns	r3, r3
 800a1a8:	69fa      	ldr	r2, [r7, #28]
 800a1aa:	4013      	ands	r3, r2
 800a1ac:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 800a1ae:	69bb      	ldr	r3, [r7, #24]
 800a1b0:	f003 0307 	and.w	r3, r3, #7
 800a1b4:	009b      	lsls	r3, r3, #2
 800a1b6:	220b      	movs	r2, #11
 800a1b8:	fa02 f303 	lsl.w	r3, r2, r3
 800a1bc:	69fa      	ldr	r2, [r7, #28]
 800a1be:	4313      	orrs	r3, r2
 800a1c0:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 800a1c2:	69bb      	ldr	r3, [r7, #24]
 800a1c4:	08da      	lsrs	r2, r3, #3
 800a1c6:	693b      	ldr	r3, [r7, #16]
 800a1c8:	3208      	adds	r2, #8
 800a1ca:	69f9      	ldr	r1, [r7, #28]
 800a1cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800a1d0:	693b      	ldr	r3, [r7, #16]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800a1d6:	69bb      	ldr	r3, [r7, #24]
 800a1d8:	005b      	lsls	r3, r3, #1
 800a1da:	2203      	movs	r2, #3
 800a1dc:	fa02 f303 	lsl.w	r3, r2, r3
 800a1e0:	43db      	mvns	r3, r3
 800a1e2:	69fa      	ldr	r2, [r7, #28]
 800a1e4:	4013      	ands	r3, r2
 800a1e6:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 800a1e8:	69bb      	ldr	r3, [r7, #24]
 800a1ea:	005b      	lsls	r3, r3, #1
 800a1ec:	2202      	movs	r2, #2
 800a1ee:	fa02 f303 	lsl.w	r3, r2, r3
 800a1f2:	69fa      	ldr	r2, [r7, #28]
 800a1f4:	4313      	orrs	r3, r2
 800a1f6:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800a1f8:	693b      	ldr	r3, [r7, #16]
 800a1fa:	69fa      	ldr	r2, [r7, #28]
 800a1fc:	601a      	str	r2, [r3, #0]
 800a1fe:	e067      	b.n	800a2d0 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a200:	683b      	ldr	r3, [r7, #0]
 800a202:	685b      	ldr	r3, [r3, #4]
 800a204:	2b02      	cmp	r3, #2
 800a206:	d003      	beq.n	800a210 <HAL_GPIO_Init+0x104>
 800a208:	683b      	ldr	r3, [r7, #0]
 800a20a:	685b      	ldr	r3, [r3, #4]
 800a20c:	2b12      	cmp	r3, #18
 800a20e:	d145      	bne.n	800a29c <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 800a210:	697b      	ldr	r3, [r7, #20]
 800a212:	08da      	lsrs	r2, r3, #3
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	3208      	adds	r2, #8
 800a218:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a21c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 800a21e:	697b      	ldr	r3, [r7, #20]
 800a220:	f003 0307 	and.w	r3, r3, #7
 800a224:	009b      	lsls	r3, r3, #2
 800a226:	220f      	movs	r2, #15
 800a228:	fa02 f303 	lsl.w	r3, r2, r3
 800a22c:	43db      	mvns	r3, r3
 800a22e:	69fa      	ldr	r2, [r7, #28]
 800a230:	4013      	ands	r3, r2
 800a232:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 800a234:	683b      	ldr	r3, [r7, #0]
 800a236:	691b      	ldr	r3, [r3, #16]
 800a238:	f003 020f 	and.w	r2, r3, #15
 800a23c:	697b      	ldr	r3, [r7, #20]
 800a23e:	f003 0307 	and.w	r3, r3, #7
 800a242:	009b      	lsls	r3, r3, #2
 800a244:	fa02 f303 	lsl.w	r3, r2, r3
 800a248:	69fa      	ldr	r2, [r7, #28]
 800a24a:	4313      	orrs	r3, r2
 800a24c:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 800a24e:	697b      	ldr	r3, [r7, #20]
 800a250:	08da      	lsrs	r2, r3, #3
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	3208      	adds	r2, #8
 800a256:	69f9      	ldr	r1, [r7, #28]
 800a258:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800a25c:	693b      	ldr	r3, [r7, #16]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800a262:	69bb      	ldr	r3, [r7, #24]
 800a264:	005b      	lsls	r3, r3, #1
 800a266:	2203      	movs	r2, #3
 800a268:	fa02 f303 	lsl.w	r3, r2, r3
 800a26c:	43db      	mvns	r3, r3
 800a26e:	69fa      	ldr	r2, [r7, #28]
 800a270:	4013      	ands	r3, r2
 800a272:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	685b      	ldr	r3, [r3, #4]
 800a278:	f003 0203 	and.w	r2, r3, #3
 800a27c:	69bb      	ldr	r3, [r7, #24]
 800a27e:	005b      	lsls	r3, r3, #1
 800a280:	fa02 f303 	lsl.w	r3, r2, r3
 800a284:	69fa      	ldr	r2, [r7, #28]
 800a286:	4313      	orrs	r3, r2
 800a288:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800a28a:	693b      	ldr	r3, [r7, #16]
 800a28c:	69fa      	ldr	r2, [r7, #28]
 800a28e:	601a      	str	r2, [r3, #0]
 800a290:	e01e      	b.n	800a2d0 <HAL_GPIO_Init+0x1c4>
 800a292:	bf00      	nop
 800a294:	46020000 	.word	0x46020000
 800a298:	0801cd34 	.word	0x0801cd34
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 800a29c:	693b      	ldr	r3, [r7, #16]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800a2a2:	69bb      	ldr	r3, [r7, #24]
 800a2a4:	005b      	lsls	r3, r3, #1
 800a2a6:	2203      	movs	r2, #3
 800a2a8:	fa02 f303 	lsl.w	r3, r2, r3
 800a2ac:	43db      	mvns	r3, r3
 800a2ae:	69fa      	ldr	r2, [r7, #28]
 800a2b0:	4013      	ands	r3, r2
 800a2b2:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	685b      	ldr	r3, [r3, #4]
 800a2b8:	f003 0203 	and.w	r2, r3, #3
 800a2bc:	69bb      	ldr	r3, [r7, #24]
 800a2be:	005b      	lsls	r3, r3, #1
 800a2c0:	fa02 f303 	lsl.w	r3, r2, r3
 800a2c4:	69fa      	ldr	r2, [r7, #28]
 800a2c6:	4313      	orrs	r3, r2
 800a2c8:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800a2ca:	693b      	ldr	r3, [r7, #16]
 800a2cc:	69fa      	ldr	r2, [r7, #28]
 800a2ce:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a2d0:	683b      	ldr	r3, [r7, #0]
 800a2d2:	685b      	ldr	r3, [r3, #4]
 800a2d4:	2b01      	cmp	r3, #1
 800a2d6:	d00b      	beq.n	800a2f0 <HAL_GPIO_Init+0x1e4>
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	685b      	ldr	r3, [r3, #4]
 800a2dc:	2b02      	cmp	r3, #2
 800a2de:	d007      	beq.n	800a2f0 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a2e0:	683b      	ldr	r3, [r7, #0]
 800a2e2:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a2e4:	2b11      	cmp	r3, #17
 800a2e6:	d003      	beq.n	800a2f0 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a2e8:	683b      	ldr	r3, [r7, #0]
 800a2ea:	685b      	ldr	r3, [r3, #4]
 800a2ec:	2b12      	cmp	r3, #18
 800a2ee:	d130      	bne.n	800a352 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 800a2f0:	693b      	ldr	r3, [r7, #16]
 800a2f2:	689b      	ldr	r3, [r3, #8]
 800a2f4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 800a2f6:	69bb      	ldr	r3, [r7, #24]
 800a2f8:	005b      	lsls	r3, r3, #1
 800a2fa:	2203      	movs	r2, #3
 800a2fc:	fa02 f303 	lsl.w	r3, r2, r3
 800a300:	43db      	mvns	r3, r3
 800a302:	69fa      	ldr	r2, [r7, #28]
 800a304:	4013      	ands	r3, r2
 800a306:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 800a308:	683b      	ldr	r3, [r7, #0]
 800a30a:	68da      	ldr	r2, [r3, #12]
 800a30c:	69bb      	ldr	r3, [r7, #24]
 800a30e:	005b      	lsls	r3, r3, #1
 800a310:	fa02 f303 	lsl.w	r3, r2, r3
 800a314:	69fa      	ldr	r2, [r7, #28]
 800a316:	4313      	orrs	r3, r2
 800a318:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 800a31a:	693b      	ldr	r3, [r7, #16]
 800a31c:	69fa      	ldr	r2, [r7, #28]
 800a31e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 800a320:	693b      	ldr	r3, [r7, #16]
 800a322:	685b      	ldr	r3, [r3, #4]
 800a324:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 800a326:	2201      	movs	r2, #1
 800a328:	69bb      	ldr	r3, [r7, #24]
 800a32a:	fa02 f303 	lsl.w	r3, r2, r3
 800a32e:	43db      	mvns	r3, r3
 800a330:	69fa      	ldr	r2, [r7, #28]
 800a332:	4013      	ands	r3, r2
 800a334:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 800a336:	683b      	ldr	r3, [r7, #0]
 800a338:	685b      	ldr	r3, [r3, #4]
 800a33a:	091b      	lsrs	r3, r3, #4
 800a33c:	f003 0201 	and.w	r2, r3, #1
 800a340:	69bb      	ldr	r3, [r7, #24]
 800a342:	fa02 f303 	lsl.w	r3, r2, r3
 800a346:	69fa      	ldr	r2, [r7, #28]
 800a348:	4313      	orrs	r3, r2
 800a34a:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 800a34c:	693b      	ldr	r3, [r7, #16]
 800a34e:	69fa      	ldr	r2, [r7, #28]
 800a350:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	685b      	ldr	r3, [r3, #4]
 800a356:	2b03      	cmp	r3, #3
 800a358:	d017      	beq.n	800a38a <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 800a35a:	693b      	ldr	r3, [r7, #16]
 800a35c:	68db      	ldr	r3, [r3, #12]
 800a35e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 800a360:	69bb      	ldr	r3, [r7, #24]
 800a362:	005b      	lsls	r3, r3, #1
 800a364:	2203      	movs	r2, #3
 800a366:	fa02 f303 	lsl.w	r3, r2, r3
 800a36a:	43db      	mvns	r3, r3
 800a36c:	69fa      	ldr	r2, [r7, #28]
 800a36e:	4013      	ands	r3, r2
 800a370:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	689a      	ldr	r2, [r3, #8]
 800a376:	69bb      	ldr	r3, [r7, #24]
 800a378:	005b      	lsls	r3, r3, #1
 800a37a:	fa02 f303 	lsl.w	r3, r2, r3
 800a37e:	69fa      	ldr	r2, [r7, #28]
 800a380:	4313      	orrs	r3, r2
 800a382:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 800a384:	693b      	ldr	r3, [r7, #16]
 800a386:	69fa      	ldr	r2, [r7, #28]
 800a388:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	685b      	ldr	r3, [r3, #4]
 800a38e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a392:	2b00      	cmp	r3, #0
 800a394:	d07c      	beq.n	800a490 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800a396:	4a47      	ldr	r2, [pc, #284]	; (800a4b4 <HAL_GPIO_Init+0x3a8>)
 800a398:	697b      	ldr	r3, [r7, #20]
 800a39a:	089b      	lsrs	r3, r3, #2
 800a39c:	3318      	adds	r3, #24
 800a39e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a3a2:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 800a3a4:	697b      	ldr	r3, [r7, #20]
 800a3a6:	f003 0303 	and.w	r3, r3, #3
 800a3aa:	00db      	lsls	r3, r3, #3
 800a3ac:	220f      	movs	r2, #15
 800a3ae:	fa02 f303 	lsl.w	r3, r2, r3
 800a3b2:	43db      	mvns	r3, r3
 800a3b4:	69fa      	ldr	r2, [r7, #28]
 800a3b6:	4013      	ands	r3, r2
 800a3b8:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	0a9a      	lsrs	r2, r3, #10
 800a3be:	4b3e      	ldr	r3, [pc, #248]	; (800a4b8 <HAL_GPIO_Init+0x3ac>)
 800a3c0:	4013      	ands	r3, r2
 800a3c2:	697a      	ldr	r2, [r7, #20]
 800a3c4:	f002 0203 	and.w	r2, r2, #3
 800a3c8:	00d2      	lsls	r2, r2, #3
 800a3ca:	4093      	lsls	r3, r2
 800a3cc:	69fa      	ldr	r2, [r7, #28]
 800a3ce:	4313      	orrs	r3, r2
 800a3d0:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 800a3d2:	4938      	ldr	r1, [pc, #224]	; (800a4b4 <HAL_GPIO_Init+0x3a8>)
 800a3d4:	697b      	ldr	r3, [r7, #20]
 800a3d6:	089b      	lsrs	r3, r3, #2
 800a3d8:	3318      	adds	r3, #24
 800a3da:	69fa      	ldr	r2, [r7, #28]
 800a3dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800a3e0:	4b34      	ldr	r3, [pc, #208]	; (800a4b4 <HAL_GPIO_Init+0x3a8>)
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	43db      	mvns	r3, r3
 800a3ea:	69fa      	ldr	r2, [r7, #28]
 800a3ec:	4013      	ands	r3, r2
 800a3ee:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800a3f0:	683b      	ldr	r3, [r7, #0]
 800a3f2:	685b      	ldr	r3, [r3, #4]
 800a3f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d003      	beq.n	800a404 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 800a3fc:	69fa      	ldr	r2, [r7, #28]
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	4313      	orrs	r3, r2
 800a402:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 800a404:	4a2b      	ldr	r2, [pc, #172]	; (800a4b4 <HAL_GPIO_Init+0x3a8>)
 800a406:	69fb      	ldr	r3, [r7, #28]
 800a408:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800a40a:	4b2a      	ldr	r3, [pc, #168]	; (800a4b4 <HAL_GPIO_Init+0x3a8>)
 800a40c:	685b      	ldr	r3, [r3, #4]
 800a40e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	43db      	mvns	r3, r3
 800a414:	69fa      	ldr	r2, [r7, #28]
 800a416:	4013      	ands	r3, r2
 800a418:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800a41a:	683b      	ldr	r3, [r7, #0]
 800a41c:	685b      	ldr	r3, [r3, #4]
 800a41e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a422:	2b00      	cmp	r3, #0
 800a424:	d003      	beq.n	800a42e <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 800a426:	69fa      	ldr	r2, [r7, #28]
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	4313      	orrs	r3, r2
 800a42c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 800a42e:	4a21      	ldr	r2, [pc, #132]	; (800a4b4 <HAL_GPIO_Init+0x3a8>)
 800a430:	69fb      	ldr	r3, [r7, #28]
 800a432:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 800a434:	4b1f      	ldr	r3, [pc, #124]	; (800a4b4 <HAL_GPIO_Init+0x3a8>)
 800a436:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a43a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	43db      	mvns	r3, r3
 800a440:	69fa      	ldr	r2, [r7, #28]
 800a442:	4013      	ands	r3, r2
 800a444:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800a446:	683b      	ldr	r3, [r7, #0]
 800a448:	685b      	ldr	r3, [r3, #4]
 800a44a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d003      	beq.n	800a45a <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 800a452:	69fa      	ldr	r2, [r7, #28]
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	4313      	orrs	r3, r2
 800a458:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 800a45a:	4a16      	ldr	r2, [pc, #88]	; (800a4b4 <HAL_GPIO_Init+0x3a8>)
 800a45c:	69fb      	ldr	r3, [r7, #28]
 800a45e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 800a462:	4b14      	ldr	r3, [pc, #80]	; (800a4b4 <HAL_GPIO_Init+0x3a8>)
 800a464:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a468:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	43db      	mvns	r3, r3
 800a46e:	69fa      	ldr	r2, [r7, #28]
 800a470:	4013      	ands	r3, r2
 800a472:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800a474:	683b      	ldr	r3, [r7, #0]
 800a476:	685b      	ldr	r3, [r3, #4]
 800a478:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d003      	beq.n	800a488 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 800a480:	69fa      	ldr	r2, [r7, #28]
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	4313      	orrs	r3, r2
 800a486:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 800a488:	4a0a      	ldr	r2, [pc, #40]	; (800a4b4 <HAL_GPIO_Init+0x3a8>)
 800a48a:	69fb      	ldr	r3, [r7, #28]
 800a48c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 800a490:	697b      	ldr	r3, [r7, #20]
 800a492:	3301      	adds	r3, #1
 800a494:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800a496:	683b      	ldr	r3, [r7, #0]
 800a498:	681a      	ldr	r2, [r3, #0]
 800a49a:	697b      	ldr	r3, [r7, #20]
 800a49c:	fa22 f303 	lsr.w	r3, r2, r3
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	f47f ae3d 	bne.w	800a120 <HAL_GPIO_Init+0x14>
  }
}
 800a4a6:	bf00      	nop
 800a4a8:	bf00      	nop
 800a4aa:	3724      	adds	r7, #36	; 0x24
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b2:	4770      	bx	lr
 800a4b4:	46022000 	.word	0x46022000
 800a4b8:	002f7f7f 	.word	0x002f7f7f

0800a4bc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800a4bc:	b480      	push	{r7}
 800a4be:	b089      	sub	sp, #36	; 0x24
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
 800a4c4:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 800a4ce:	e0bc      	b.n	800a64a <HAL_GPIO_DeInit+0x18e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 800a4d0:	2201      	movs	r2, #1
 800a4d2:	69bb      	ldr	r3, [r7, #24]
 800a4d4:	fa02 f303 	lsl.w	r3, r2, r3
 800a4d8:	683a      	ldr	r2, [r7, #0]
 800a4da:	4013      	ands	r3, r2
 800a4dc:	613b      	str	r3, [r7, #16]

    /*Save Pin Position */
    pin_position = position;
 800a4de:	69bb      	ldr	r3, [r7, #24]
 800a4e0:	61fb      	str	r3, [r7, #28]

    if (iocurrent != 0U)
 800a4e2:	693b      	ldr	r3, [r7, #16]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	f000 80ad 	beq.w	800a644 <HAL_GPIO_DeInit+0x188>
    {
      /* In case of LPGPIO port selected */
      if (GPIOx == LPGPIO1)
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	4a5e      	ldr	r2, [pc, #376]	; (800a668 <HAL_GPIO_DeInit+0x1ac>)
 800a4ee:	4293      	cmp	r3, r2
 800a4f0:	d115      	bne.n	800a51e <HAL_GPIO_DeInit+0x62>
      {
        /* Configure LP/IO in Input Mode */
        p_gpio  = LPGPIO_Map[pin_position].GPIO_PORT;
 800a4f2:	4a5e      	ldr	r2, [pc, #376]	; (800a66c <HAL_GPIO_DeInit+0x1b0>)
 800a4f4:	69fb      	ldr	r3, [r7, #28]
 800a4f6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a4fa:	617b      	str	r3, [r7, #20]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800a4fc:	4a5b      	ldr	r2, [pc, #364]	; (800a66c <HAL_GPIO_DeInit+0x1b0>)
 800a4fe:	69bb      	ldr	r3, [r7, #24]
 800a500:	00db      	lsls	r3, r3, #3
 800a502:	4413      	add	r3, r2
 800a504:	685b      	ldr	r3, [r3, #4]
 800a506:	61fb      	str	r3, [r7, #28]
        LPGPIO1->MODER &= ~(1U << pin_position);
 800a508:	4b57      	ldr	r3, [pc, #348]	; (800a668 <HAL_GPIO_DeInit+0x1ac>)
 800a50a:	681a      	ldr	r2, [r3, #0]
 800a50c:	2101      	movs	r1, #1
 800a50e:	69fb      	ldr	r3, [r7, #28]
 800a510:	fa01 f303 	lsl.w	r3, r1, r3
 800a514:	43db      	mvns	r3, r3
 800a516:	4954      	ldr	r1, [pc, #336]	; (800a668 <HAL_GPIO_DeInit+0x1ac>)
 800a518:	4013      	ands	r3, r2
 800a51a:	600b      	str	r3, [r1, #0]
 800a51c:	e053      	b.n	800a5c6 <HAL_GPIO_DeInit+0x10a>
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /*------------------------- EXTI Mode Configuration --------------------*/
        /* Clear the External Interrupt or Event for the current IO */
        tmp = EXTI->EXTICR[position >> 2U];
 800a51e:	4a54      	ldr	r2, [pc, #336]	; (800a670 <HAL_GPIO_DeInit+0x1b4>)
 800a520:	69bb      	ldr	r3, [r7, #24]
 800a522:	089b      	lsrs	r3, r3, #2
 800a524:	3318      	adds	r3, #24
 800a526:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a52a:	60fb      	str	r3, [r7, #12]
        tmp &= ((0x0FUL) << (8U * (position & 0x03U)));
 800a52c:	69bb      	ldr	r3, [r7, #24]
 800a52e:	f003 0303 	and.w	r3, r3, #3
 800a532:	00db      	lsls	r3, r3, #3
 800a534:	220f      	movs	r2, #15
 800a536:	fa02 f303 	lsl.w	r3, r2, r3
 800a53a:	68fa      	ldr	r2, [r7, #12]
 800a53c:	4013      	ands	r3, r2
 800a53e:	60fb      	str	r3, [r7, #12]
        if (tmp == (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U))))
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	0a9a      	lsrs	r2, r3, #10
 800a544:	4b4b      	ldr	r3, [pc, #300]	; (800a674 <HAL_GPIO_DeInit+0x1b8>)
 800a546:	4013      	ands	r3, r2
 800a548:	69ba      	ldr	r2, [r7, #24]
 800a54a:	f002 0203 	and.w	r2, r2, #3
 800a54e:	00d2      	lsls	r2, r2, #3
 800a550:	4093      	lsls	r3, r2
 800a552:	68fa      	ldr	r2, [r7, #12]
 800a554:	429a      	cmp	r2, r3
 800a556:	d136      	bne.n	800a5c6 <HAL_GPIO_DeInit+0x10a>
        {
          /* Clear EXTI line configuration */
          EXTI->IMR1 &= ~(iocurrent);
 800a558:	4b45      	ldr	r3, [pc, #276]	; (800a670 <HAL_GPIO_DeInit+0x1b4>)
 800a55a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800a55e:	693b      	ldr	r3, [r7, #16]
 800a560:	43db      	mvns	r3, r3
 800a562:	4943      	ldr	r1, [pc, #268]	; (800a670 <HAL_GPIO_DeInit+0x1b4>)
 800a564:	4013      	ands	r3, r2
 800a566:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
          EXTI->EMR1 &= ~(iocurrent);
 800a56a:	4b41      	ldr	r3, [pc, #260]	; (800a670 <HAL_GPIO_DeInit+0x1b4>)
 800a56c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800a570:	693b      	ldr	r3, [r7, #16]
 800a572:	43db      	mvns	r3, r3
 800a574:	493e      	ldr	r1, [pc, #248]	; (800a670 <HAL_GPIO_DeInit+0x1b4>)
 800a576:	4013      	ands	r3, r2
 800a578:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

          /* Clear Rising Falling edge configuration */
          EXTI->RTSR1 &= ~(iocurrent);
 800a57c:	4b3c      	ldr	r3, [pc, #240]	; (800a670 <HAL_GPIO_DeInit+0x1b4>)
 800a57e:	681a      	ldr	r2, [r3, #0]
 800a580:	693b      	ldr	r3, [r7, #16]
 800a582:	43db      	mvns	r3, r3
 800a584:	493a      	ldr	r1, [pc, #232]	; (800a670 <HAL_GPIO_DeInit+0x1b4>)
 800a586:	4013      	ands	r3, r2
 800a588:	600b      	str	r3, [r1, #0]
          EXTI->FTSR1 &= ~(iocurrent);
 800a58a:	4b39      	ldr	r3, [pc, #228]	; (800a670 <HAL_GPIO_DeInit+0x1b4>)
 800a58c:	685a      	ldr	r2, [r3, #4]
 800a58e:	693b      	ldr	r3, [r7, #16]
 800a590:	43db      	mvns	r3, r3
 800a592:	4937      	ldr	r1, [pc, #220]	; (800a670 <HAL_GPIO_DeInit+0x1b4>)
 800a594:	4013      	ands	r3, r2
 800a596:	604b      	str	r3, [r1, #4]

          tmp = (0x0FUL) << (8U * (position & 0x03U));
 800a598:	69bb      	ldr	r3, [r7, #24]
 800a59a:	f003 0303 	and.w	r3, r3, #3
 800a59e:	00db      	lsls	r3, r3, #3
 800a5a0:	220f      	movs	r2, #15
 800a5a2:	fa02 f303 	lsl.w	r3, r2, r3
 800a5a6:	60fb      	str	r3, [r7, #12]
          EXTI->EXTICR[position >> 2U] &= ~tmp;
 800a5a8:	4a31      	ldr	r2, [pc, #196]	; (800a670 <HAL_GPIO_DeInit+0x1b4>)
 800a5aa:	69bb      	ldr	r3, [r7, #24]
 800a5ac:	089b      	lsrs	r3, r3, #2
 800a5ae:	3318      	adds	r3, #24
 800a5b0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	43da      	mvns	r2, r3
 800a5b8:	482d      	ldr	r0, [pc, #180]	; (800a670 <HAL_GPIO_DeInit+0x1b4>)
 800a5ba:	69bb      	ldr	r3, [r7, #24]
 800a5bc:	089b      	lsrs	r3, r3, #2
 800a5be:	400a      	ands	r2, r1
 800a5c0:	3318      	adds	r3, #24
 800a5c2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        }
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      p_gpio->MODER |= (GPIO_MODER_MODE0 << (pin_position * 2U));
 800a5c6:	697b      	ldr	r3, [r7, #20]
 800a5c8:	681a      	ldr	r2, [r3, #0]
 800a5ca:	69fb      	ldr	r3, [r7, #28]
 800a5cc:	005b      	lsls	r3, r3, #1
 800a5ce:	2103      	movs	r1, #3
 800a5d0:	fa01 f303 	lsl.w	r3, r1, r3
 800a5d4:	431a      	orrs	r2, r3
 800a5d6:	697b      	ldr	r3, [r7, #20]
 800a5d8:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      p_gpio->AFR[pin_position >> 3U] &= ~(0x0FUL << ((pin_position & 0x07U) * 4U));
 800a5da:	69fb      	ldr	r3, [r7, #28]
 800a5dc:	08da      	lsrs	r2, r3, #3
 800a5de:	697b      	ldr	r3, [r7, #20]
 800a5e0:	3208      	adds	r2, #8
 800a5e2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a5e6:	69fb      	ldr	r3, [r7, #28]
 800a5e8:	f003 0307 	and.w	r3, r3, #7
 800a5ec:	009b      	lsls	r3, r3, #2
 800a5ee:	220f      	movs	r2, #15
 800a5f0:	fa02 f303 	lsl.w	r3, r2, r3
 800a5f4:	43db      	mvns	r3, r3
 800a5f6:	69fa      	ldr	r2, [r7, #28]
 800a5f8:	08d2      	lsrs	r2, r2, #3
 800a5fa:	4019      	ands	r1, r3
 800a5fc:	697b      	ldr	r3, [r7, #20]
 800a5fe:	3208      	adds	r2, #8
 800a600:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      p_gpio->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 800a604:	697b      	ldr	r3, [r7, #20]
 800a606:	689a      	ldr	r2, [r3, #8]
 800a608:	69fb      	ldr	r3, [r7, #28]
 800a60a:	005b      	lsls	r3, r3, #1
 800a60c:	2103      	movs	r1, #3
 800a60e:	fa01 f303 	lsl.w	r3, r1, r3
 800a612:	43db      	mvns	r3, r3
 800a614:	401a      	ands	r2, r3
 800a616:	697b      	ldr	r3, [r7, #20]
 800a618:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      p_gpio->OTYPER  &= ~(GPIO_OTYPER_OT0 << pin_position);
 800a61a:	697b      	ldr	r3, [r7, #20]
 800a61c:	685a      	ldr	r2, [r3, #4]
 800a61e:	2101      	movs	r1, #1
 800a620:	69fb      	ldr	r3, [r7, #28]
 800a622:	fa01 f303 	lsl.w	r3, r1, r3
 800a626:	43db      	mvns	r3, r3
 800a628:	401a      	ands	r2, r3
 800a62a:	697b      	ldr	r3, [r7, #20]
 800a62c:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      p_gpio->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 800a62e:	697b      	ldr	r3, [r7, #20]
 800a630:	68da      	ldr	r2, [r3, #12]
 800a632:	69fb      	ldr	r3, [r7, #28]
 800a634:	005b      	lsls	r3, r3, #1
 800a636:	2103      	movs	r1, #3
 800a638:	fa01 f303 	lsl.w	r3, r1, r3
 800a63c:	43db      	mvns	r3, r3
 800a63e:	401a      	ands	r2, r3
 800a640:	697b      	ldr	r3, [r7, #20]
 800a642:	60da      	str	r2, [r3, #12]
    }

    position++;
 800a644:	69bb      	ldr	r3, [r7, #24]
 800a646:	3301      	adds	r3, #1
 800a648:	61bb      	str	r3, [r7, #24]
  while ((GPIO_Pin >> position) != 0U)
 800a64a:	683a      	ldr	r2, [r7, #0]
 800a64c:	69bb      	ldr	r3, [r7, #24]
 800a64e:	fa22 f303 	lsr.w	r3, r2, r3
 800a652:	2b00      	cmp	r3, #0
 800a654:	f47f af3c 	bne.w	800a4d0 <HAL_GPIO_DeInit+0x14>
  }
}
 800a658:	bf00      	nop
 800a65a:	bf00      	nop
 800a65c:	3724      	adds	r7, #36	; 0x24
 800a65e:	46bd      	mov	sp, r7
 800a660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a664:	4770      	bx	lr
 800a666:	bf00      	nop
 800a668:	46020000 	.word	0x46020000
 800a66c:	0801cd34 	.word	0x0801cd34
 800a670:	46022000 	.word	0x46022000
 800a674:	002f7f7f 	.word	0x002f7f7f

0800a678 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a678:	b480      	push	{r7}
 800a67a:	b085      	sub	sp, #20
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
 800a680:	460b      	mov	r3, r1
 800a682:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	691a      	ldr	r2, [r3, #16]
 800a688:	887b      	ldrh	r3, [r7, #2]
 800a68a:	4013      	ands	r3, r2
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d002      	beq.n	800a696 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a690:	2301      	movs	r3, #1
 800a692:	73fb      	strb	r3, [r7, #15]
 800a694:	e001      	b.n	800a69a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a696:	2300      	movs	r3, #0
 800a698:	73fb      	strb	r3, [r7, #15]
  }

  return bitstatus;
 800a69a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a69c:	4618      	mov	r0, r3
 800a69e:	3714      	adds	r7, #20
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a6:	4770      	bx	lr

0800a6a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a6a8:	b480      	push	{r7}
 800a6aa:	b083      	sub	sp, #12
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
 800a6b0:	460b      	mov	r3, r1
 800a6b2:	807b      	strh	r3, [r7, #2]
 800a6b4:	4613      	mov	r3, r2
 800a6b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a6b8:	787b      	ldrb	r3, [r7, #1]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d003      	beq.n	800a6c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800a6be:	887a      	ldrh	r2, [r7, #2]
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 800a6c4:	e002      	b.n	800a6cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 800a6c6:	887a      	ldrh	r2, [r7, #2]
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	629a      	str	r2, [r3, #40]	; 0x28
}
 800a6cc:	bf00      	nop
 800a6ce:	370c      	adds	r7, #12
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d6:	4770      	bx	lr

0800a6d8 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a6d8:	b480      	push	{r7}
 800a6da:	b085      	sub	sp, #20
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
 800a6e0:	460b      	mov	r3, r1
 800a6e2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	695b      	ldr	r3, [r3, #20]
 800a6e8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800a6ea:	887a      	ldrh	r2, [r7, #2]
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	4013      	ands	r3, r2
 800a6f0:	041a      	lsls	r2, r3, #16
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	43d9      	mvns	r1, r3
 800a6f6:	887b      	ldrh	r3, [r7, #2]
 800a6f8:	400b      	ands	r3, r1
 800a6fa:	431a      	orrs	r2, r3
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	619a      	str	r2, [r3, #24]
}
 800a700:	bf00      	nop
 800a702:	3714      	adds	r7, #20
 800a704:	46bd      	mov	sp, r7
 800a706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70a:	4770      	bx	lr

0800a70c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b082      	sub	sp, #8
 800a710:	af00      	add	r7, sp, #0
 800a712:	4603      	mov	r3, r0
 800a714:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 800a716:	4b0f      	ldr	r3, [pc, #60]	; (800a754 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800a718:	68da      	ldr	r2, [r3, #12]
 800a71a:	88fb      	ldrh	r3, [r7, #6]
 800a71c:	4013      	ands	r3, r2
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d006      	beq.n	800a730 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 800a722:	4a0c      	ldr	r2, [pc, #48]	; (800a754 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800a724:	88fb      	ldrh	r3, [r7, #6]
 800a726:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 800a728:	88fb      	ldrh	r3, [r7, #6]
 800a72a:	4618      	mov	r0, r3
 800a72c:	f7f8 fa1c 	bl	8002b68 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 800a730:	4b08      	ldr	r3, [pc, #32]	; (800a754 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800a732:	691a      	ldr	r2, [r3, #16]
 800a734:	88fb      	ldrh	r3, [r7, #6]
 800a736:	4013      	ands	r3, r2
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d006      	beq.n	800a74a <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800a73c:	4a05      	ldr	r2, [pc, #20]	; (800a754 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800a73e:	88fb      	ldrh	r3, [r7, #6]
 800a740:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800a742:	88fb      	ldrh	r3, [r7, #6]
 800a744:	4618      	mov	r0, r3
 800a746:	f000 f807 	bl	800a758 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 800a74a:	bf00      	nop
 800a74c:	3708      	adds	r7, #8
 800a74e:	46bd      	mov	sp, r7
 800a750:	bd80      	pop	{r7, pc}
 800a752:	bf00      	nop
 800a754:	46022000 	.word	0x46022000

0800a758 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 800a758:	b480      	push	{r7}
 800a75a:	b083      	sub	sp, #12
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	4603      	mov	r3, r0
 800a760:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 800a762:	bf00      	nop
 800a764:	370c      	adds	r7, #12
 800a766:	46bd      	mov	sp, r7
 800a768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76c:	4770      	bx	lr

0800a76e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a76e:	b580      	push	{r7, lr}
 800a770:	b082      	sub	sp, #8
 800a772:	af00      	add	r7, sp, #0
 800a774:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d101      	bne.n	800a780 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a77c:	2301      	movs	r3, #1
 800a77e:	e08d      	b.n	800a89c <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a786:	b2db      	uxtb	r3, r3
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d106      	bne.n	800a79a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	2200      	movs	r2, #0
 800a790:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800a794:	6878      	ldr	r0, [r7, #4]
 800a796:	f000 f8b4 	bl	800a902 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	2224      	movs	r2, #36	; 0x24
 800a79e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	681a      	ldr	r2, [r3, #0]
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	f022 0201 	bic.w	r2, r2, #1
 800a7b0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	685a      	ldr	r2, [r3, #4]
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a7be:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	689a      	ldr	r2, [r3, #8]
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a7ce:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	68db      	ldr	r3, [r3, #12]
 800a7d4:	2b01      	cmp	r3, #1
 800a7d6:	d107      	bne.n	800a7e8 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	689a      	ldr	r2, [r3, #8]
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a7e4:	609a      	str	r2, [r3, #8]
 800a7e6:	e006      	b.n	800a7f6 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	689a      	ldr	r2, [r3, #8]
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800a7f4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	68db      	ldr	r3, [r3, #12]
 800a7fa:	2b02      	cmp	r3, #2
 800a7fc:	d108      	bne.n	800a810 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	685a      	ldr	r2, [r3, #4]
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a80c:	605a      	str	r2, [r3, #4]
 800a80e:	e007      	b.n	800a820 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	685a      	ldr	r2, [r3, #4]
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a81e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	685b      	ldr	r3, [r3, #4]
 800a826:	687a      	ldr	r2, [r7, #4]
 800a828:	6812      	ldr	r2, [r2, #0]
 800a82a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a82e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a832:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	68da      	ldr	r2, [r3, #12]
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a842:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	691a      	ldr	r2, [r3, #16]
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	695b      	ldr	r3, [r3, #20]
 800a84c:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	699b      	ldr	r3, [r3, #24]
 800a854:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	430a      	orrs	r2, r1
 800a85c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	69d9      	ldr	r1, [r3, #28]
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	6a1a      	ldr	r2, [r3, #32]
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	430a      	orrs	r2, r1
 800a86c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	681a      	ldr	r2, [r3, #0]
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	f042 0201 	orr.w	r2, r2, #1
 800a87c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	2200      	movs	r2, #0
 800a882:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	2220      	movs	r2, #32
 800a888:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	2200      	movs	r2, #0
 800a890:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	2200      	movs	r2, #0
 800a896:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800a89a:	2300      	movs	r3, #0
}
 800a89c:	4618      	mov	r0, r3
 800a89e:	3708      	adds	r7, #8
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	bd80      	pop	{r7, pc}

0800a8a4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b082      	sub	sp, #8
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d101      	bne.n	800a8b6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800a8b2:	2301      	movs	r3, #1
 800a8b4:	e021      	b.n	800a8fa <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	2224      	movs	r2, #36	; 0x24
 800a8ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	681a      	ldr	r2, [r3, #0]
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	f022 0201 	bic.w	r2, r2, #1
 800a8cc:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800a8ce:	6878      	ldr	r0, [r7, #4]
 800a8d0:	f000 f821 	bl	800a916 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	2200      	movs	r2, #0
 800a8de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a8f8:	2300      	movs	r3, #0
}
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	3708      	adds	r7, #8
 800a8fe:	46bd      	mov	sp, r7
 800a900:	bd80      	pop	{r7, pc}

0800a902 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800a902:	b480      	push	{r7}
 800a904:	b083      	sub	sp, #12
 800a906:	af00      	add	r7, sp, #0
 800a908:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800a90a:	bf00      	nop
 800a90c:	370c      	adds	r7, #12
 800a90e:	46bd      	mov	sp, r7
 800a910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a914:	4770      	bx	lr

0800a916 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800a916:	b480      	push	{r7}
 800a918:	b083      	sub	sp, #12
 800a91a:	af00      	add	r7, sp, #0
 800a91c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800a91e:	bf00      	nop
 800a920:	370c      	adds	r7, #12
 800a922:	46bd      	mov	sp, r7
 800a924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a928:	4770      	bx	lr
	...

0800a92c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b088      	sub	sp, #32
 800a930:	af02      	add	r7, sp, #8
 800a932:	60f8      	str	r0, [r7, #12]
 800a934:	4608      	mov	r0, r1
 800a936:	4611      	mov	r1, r2
 800a938:	461a      	mov	r2, r3
 800a93a:	4603      	mov	r3, r0
 800a93c:	817b      	strh	r3, [r7, #10]
 800a93e:	460b      	mov	r3, r1
 800a940:	813b      	strh	r3, [r7, #8]
 800a942:	4613      	mov	r3, r2
 800a944:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a94c:	b2db      	uxtb	r3, r3
 800a94e:	2b20      	cmp	r3, #32
 800a950:	f040 80f9 	bne.w	800ab46 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a954:	6a3b      	ldr	r3, [r7, #32]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d002      	beq.n	800a960 <HAL_I2C_Mem_Write+0x34>
 800a95a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d105      	bne.n	800a96c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a966:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800a968:	2301      	movs	r3, #1
 800a96a:	e0ed      	b.n	800ab48 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a972:	2b01      	cmp	r3, #1
 800a974:	d101      	bne.n	800a97a <HAL_I2C_Mem_Write+0x4e>
 800a976:	2302      	movs	r3, #2
 800a978:	e0e6      	b.n	800ab48 <HAL_I2C_Mem_Write+0x21c>
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	2201      	movs	r2, #1
 800a97e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a982:	f7ff fa01 	bl	8009d88 <HAL_GetTick>
 800a986:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a988:	697b      	ldr	r3, [r7, #20]
 800a98a:	9300      	str	r3, [sp, #0]
 800a98c:	2319      	movs	r3, #25
 800a98e:	2201      	movs	r2, #1
 800a990:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a994:	68f8      	ldr	r0, [r7, #12]
 800a996:	f000 fadd 	bl	800af54 <I2C_WaitOnFlagUntilTimeout>
 800a99a:	4603      	mov	r3, r0
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d001      	beq.n	800a9a4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800a9a0:	2301      	movs	r3, #1
 800a9a2:	e0d1      	b.n	800ab48 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	2221      	movs	r2, #33	; 0x21
 800a9a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	2240      	movs	r2, #64	; 0x40
 800a9b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	6a3a      	ldr	r2, [r7, #32]
 800a9be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a9c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a9cc:	88f8      	ldrh	r0, [r7, #6]
 800a9ce:	893a      	ldrh	r2, [r7, #8]
 800a9d0:	8979      	ldrh	r1, [r7, #10]
 800a9d2:	697b      	ldr	r3, [r7, #20]
 800a9d4:	9301      	str	r3, [sp, #4]
 800a9d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9d8:	9300      	str	r3, [sp, #0]
 800a9da:	4603      	mov	r3, r0
 800a9dc:	68f8      	ldr	r0, [r7, #12]
 800a9de:	f000 f9ed 	bl	800adbc <I2C_RequestMemoryWrite>
 800a9e2:	4603      	mov	r3, r0
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d005      	beq.n	800a9f4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800a9f0:	2301      	movs	r3, #1
 800a9f2:	e0a9      	b.n	800ab48 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a9f8:	b29b      	uxth	r3, r3
 800a9fa:	2bff      	cmp	r3, #255	; 0xff
 800a9fc:	d90e      	bls.n	800aa1c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	22ff      	movs	r2, #255	; 0xff
 800aa02:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aa08:	b2da      	uxtb	r2, r3
 800aa0a:	8979      	ldrh	r1, [r7, #10]
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	9300      	str	r3, [sp, #0]
 800aa10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800aa14:	68f8      	ldr	r0, [r7, #12]
 800aa16:	f000 fc57 	bl	800b2c8 <I2C_TransferConfig>
 800aa1a:	e00f      	b.n	800aa3c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aa20:	b29a      	uxth	r2, r3
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aa2a:	b2da      	uxtb	r2, r3
 800aa2c:	8979      	ldrh	r1, [r7, #10]
 800aa2e:	2300      	movs	r3, #0
 800aa30:	9300      	str	r3, [sp, #0]
 800aa32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800aa36:	68f8      	ldr	r0, [r7, #12]
 800aa38:	f000 fc46 	bl	800b2c8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800aa3c:	697a      	ldr	r2, [r7, #20]
 800aa3e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aa40:	68f8      	ldr	r0, [r7, #12]
 800aa42:	f000 fad6 	bl	800aff2 <I2C_WaitOnTXISFlagUntilTimeout>
 800aa46:	4603      	mov	r3, r0
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d001      	beq.n	800aa50 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800aa4c:	2301      	movs	r3, #1
 800aa4e:	e07b      	b.n	800ab48 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa54:	781a      	ldrb	r2, [r3, #0]
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa60:	1c5a      	adds	r2, r3, #1
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aa6a:	b29b      	uxth	r3, r3
 800aa6c:	3b01      	subs	r3, #1
 800aa6e:	b29a      	uxth	r2, r3
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aa78:	3b01      	subs	r3, #1
 800aa7a:	b29a      	uxth	r2, r3
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aa84:	b29b      	uxth	r3, r3
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d034      	beq.n	800aaf4 <HAL_I2C_Mem_Write+0x1c8>
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d130      	bne.n	800aaf4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800aa92:	697b      	ldr	r3, [r7, #20]
 800aa94:	9300      	str	r3, [sp, #0]
 800aa96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa98:	2200      	movs	r2, #0
 800aa9a:	2180      	movs	r1, #128	; 0x80
 800aa9c:	68f8      	ldr	r0, [r7, #12]
 800aa9e:	f000 fa59 	bl	800af54 <I2C_WaitOnFlagUntilTimeout>
 800aaa2:	4603      	mov	r3, r0
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d001      	beq.n	800aaac <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800aaa8:	2301      	movs	r3, #1
 800aaaa:	e04d      	b.n	800ab48 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aab0:	b29b      	uxth	r3, r3
 800aab2:	2bff      	cmp	r3, #255	; 0xff
 800aab4:	d90e      	bls.n	800aad4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	22ff      	movs	r2, #255	; 0xff
 800aaba:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aac0:	b2da      	uxtb	r2, r3
 800aac2:	8979      	ldrh	r1, [r7, #10]
 800aac4:	2300      	movs	r3, #0
 800aac6:	9300      	str	r3, [sp, #0]
 800aac8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800aacc:	68f8      	ldr	r0, [r7, #12]
 800aace:	f000 fbfb 	bl	800b2c8 <I2C_TransferConfig>
 800aad2:	e00f      	b.n	800aaf4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aad8:	b29a      	uxth	r2, r3
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aae2:	b2da      	uxtb	r2, r3
 800aae4:	8979      	ldrh	r1, [r7, #10]
 800aae6:	2300      	movs	r3, #0
 800aae8:	9300      	str	r3, [sp, #0]
 800aaea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800aaee:	68f8      	ldr	r0, [r7, #12]
 800aaf0:	f000 fbea 	bl	800b2c8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aaf8:	b29b      	uxth	r3, r3
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d19e      	bne.n	800aa3c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800aafe:	697a      	ldr	r2, [r7, #20]
 800ab00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ab02:	68f8      	ldr	r0, [r7, #12]
 800ab04:	f000 fabc 	bl	800b080 <I2C_WaitOnSTOPFlagUntilTimeout>
 800ab08:	4603      	mov	r3, r0
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d001      	beq.n	800ab12 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800ab0e:	2301      	movs	r3, #1
 800ab10:	e01a      	b.n	800ab48 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	2220      	movs	r2, #32
 800ab18:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	6859      	ldr	r1, [r3, #4]
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	681a      	ldr	r2, [r3, #0]
 800ab24:	4b0a      	ldr	r3, [pc, #40]	; (800ab50 <HAL_I2C_Mem_Write+0x224>)
 800ab26:	400b      	ands	r3, r1
 800ab28:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	2220      	movs	r2, #32
 800ab2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	2200      	movs	r2, #0
 800ab36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	2200      	movs	r2, #0
 800ab3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ab42:	2300      	movs	r3, #0
 800ab44:	e000      	b.n	800ab48 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800ab46:	2302      	movs	r3, #2
  }
}
 800ab48:	4618      	mov	r0, r3
 800ab4a:	3718      	adds	r7, #24
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	bd80      	pop	{r7, pc}
 800ab50:	fe00e800 	.word	0xfe00e800

0800ab54 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b088      	sub	sp, #32
 800ab58:	af02      	add	r7, sp, #8
 800ab5a:	60f8      	str	r0, [r7, #12]
 800ab5c:	4608      	mov	r0, r1
 800ab5e:	4611      	mov	r1, r2
 800ab60:	461a      	mov	r2, r3
 800ab62:	4603      	mov	r3, r0
 800ab64:	817b      	strh	r3, [r7, #10]
 800ab66:	460b      	mov	r3, r1
 800ab68:	813b      	strh	r3, [r7, #8]
 800ab6a:	4613      	mov	r3, r2
 800ab6c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ab74:	b2db      	uxtb	r3, r3
 800ab76:	2b20      	cmp	r3, #32
 800ab78:	f040 80fd 	bne.w	800ad76 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800ab7c:	6a3b      	ldr	r3, [r7, #32]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d002      	beq.n	800ab88 <HAL_I2C_Mem_Read+0x34>
 800ab82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d105      	bne.n	800ab94 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ab8e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800ab90:	2301      	movs	r3, #1
 800ab92:	e0f1      	b.n	800ad78 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ab9a:	2b01      	cmp	r3, #1
 800ab9c:	d101      	bne.n	800aba2 <HAL_I2C_Mem_Read+0x4e>
 800ab9e:	2302      	movs	r3, #2
 800aba0:	e0ea      	b.n	800ad78 <HAL_I2C_Mem_Read+0x224>
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	2201      	movs	r2, #1
 800aba6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800abaa:	f7ff f8ed 	bl	8009d88 <HAL_GetTick>
 800abae:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800abb0:	697b      	ldr	r3, [r7, #20]
 800abb2:	9300      	str	r3, [sp, #0]
 800abb4:	2319      	movs	r3, #25
 800abb6:	2201      	movs	r2, #1
 800abb8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800abbc:	68f8      	ldr	r0, [r7, #12]
 800abbe:	f000 f9c9 	bl	800af54 <I2C_WaitOnFlagUntilTimeout>
 800abc2:	4603      	mov	r3, r0
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d001      	beq.n	800abcc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800abc8:	2301      	movs	r3, #1
 800abca:	e0d5      	b.n	800ad78 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	2222      	movs	r2, #34	; 0x22
 800abd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	2240      	movs	r2, #64	; 0x40
 800abd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	2200      	movs	r2, #0
 800abe0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	6a3a      	ldr	r2, [r7, #32]
 800abe6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800abec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	2200      	movs	r2, #0
 800abf2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800abf4:	88f8      	ldrh	r0, [r7, #6]
 800abf6:	893a      	ldrh	r2, [r7, #8]
 800abf8:	8979      	ldrh	r1, [r7, #10]
 800abfa:	697b      	ldr	r3, [r7, #20]
 800abfc:	9301      	str	r3, [sp, #4]
 800abfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac00:	9300      	str	r3, [sp, #0]
 800ac02:	4603      	mov	r3, r0
 800ac04:	68f8      	ldr	r0, [r7, #12]
 800ac06:	f000 f92d 	bl	800ae64 <I2C_RequestMemoryRead>
 800ac0a:	4603      	mov	r3, r0
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d005      	beq.n	800ac1c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	2200      	movs	r2, #0
 800ac14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800ac18:	2301      	movs	r3, #1
 800ac1a:	e0ad      	b.n	800ad78 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ac20:	b29b      	uxth	r3, r3
 800ac22:	2bff      	cmp	r3, #255	; 0xff
 800ac24:	d90e      	bls.n	800ac44 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	22ff      	movs	r2, #255	; 0xff
 800ac2a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ac30:	b2da      	uxtb	r2, r3
 800ac32:	8979      	ldrh	r1, [r7, #10]
 800ac34:	4b52      	ldr	r3, [pc, #328]	; (800ad80 <HAL_I2C_Mem_Read+0x22c>)
 800ac36:	9300      	str	r3, [sp, #0]
 800ac38:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ac3c:	68f8      	ldr	r0, [r7, #12]
 800ac3e:	f000 fb43 	bl	800b2c8 <I2C_TransferConfig>
 800ac42:	e00f      	b.n	800ac64 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ac48:	b29a      	uxth	r2, r3
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ac52:	b2da      	uxtb	r2, r3
 800ac54:	8979      	ldrh	r1, [r7, #10]
 800ac56:	4b4a      	ldr	r3, [pc, #296]	; (800ad80 <HAL_I2C_Mem_Read+0x22c>)
 800ac58:	9300      	str	r3, [sp, #0]
 800ac5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ac5e:	68f8      	ldr	r0, [r7, #12]
 800ac60:	f000 fb32 	bl	800b2c8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800ac64:	697b      	ldr	r3, [r7, #20]
 800ac66:	9300      	str	r3, [sp, #0]
 800ac68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	2104      	movs	r1, #4
 800ac6e:	68f8      	ldr	r0, [r7, #12]
 800ac70:	f000 f970 	bl	800af54 <I2C_WaitOnFlagUntilTimeout>
 800ac74:	4603      	mov	r3, r0
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d001      	beq.n	800ac7e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800ac7a:	2301      	movs	r3, #1
 800ac7c:	e07c      	b.n	800ad78 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac88:	b2d2      	uxtb	r2, r2
 800ac8a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac90:	1c5a      	adds	r2, r3, #1
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ac9a:	3b01      	subs	r3, #1
 800ac9c:	b29a      	uxth	r2, r3
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aca6:	b29b      	uxth	r3, r3
 800aca8:	3b01      	subs	r3, #1
 800acaa:	b29a      	uxth	r2, r3
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800acb4:	b29b      	uxth	r3, r3
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d034      	beq.n	800ad24 <HAL_I2C_Mem_Read+0x1d0>
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d130      	bne.n	800ad24 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800acc2:	697b      	ldr	r3, [r7, #20]
 800acc4:	9300      	str	r3, [sp, #0]
 800acc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acc8:	2200      	movs	r2, #0
 800acca:	2180      	movs	r1, #128	; 0x80
 800accc:	68f8      	ldr	r0, [r7, #12]
 800acce:	f000 f941 	bl	800af54 <I2C_WaitOnFlagUntilTimeout>
 800acd2:	4603      	mov	r3, r0
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d001      	beq.n	800acdc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800acd8:	2301      	movs	r3, #1
 800acda:	e04d      	b.n	800ad78 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ace0:	b29b      	uxth	r3, r3
 800ace2:	2bff      	cmp	r3, #255	; 0xff
 800ace4:	d90e      	bls.n	800ad04 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	22ff      	movs	r2, #255	; 0xff
 800acea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800acf0:	b2da      	uxtb	r2, r3
 800acf2:	8979      	ldrh	r1, [r7, #10]
 800acf4:	2300      	movs	r3, #0
 800acf6:	9300      	str	r3, [sp, #0]
 800acf8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800acfc:	68f8      	ldr	r0, [r7, #12]
 800acfe:	f000 fae3 	bl	800b2c8 <I2C_TransferConfig>
 800ad02:	e00f      	b.n	800ad24 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ad08:	b29a      	uxth	r2, r3
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ad12:	b2da      	uxtb	r2, r3
 800ad14:	8979      	ldrh	r1, [r7, #10]
 800ad16:	2300      	movs	r3, #0
 800ad18:	9300      	str	r3, [sp, #0]
 800ad1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ad1e:	68f8      	ldr	r0, [r7, #12]
 800ad20:	f000 fad2 	bl	800b2c8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ad28:	b29b      	uxth	r3, r3
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d19a      	bne.n	800ac64 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ad2e:	697a      	ldr	r2, [r7, #20]
 800ad30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ad32:	68f8      	ldr	r0, [r7, #12]
 800ad34:	f000 f9a4 	bl	800b080 <I2C_WaitOnSTOPFlagUntilTimeout>
 800ad38:	4603      	mov	r3, r0
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d001      	beq.n	800ad42 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800ad3e:	2301      	movs	r3, #1
 800ad40:	e01a      	b.n	800ad78 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	2220      	movs	r2, #32
 800ad48:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	6859      	ldr	r1, [r3, #4]
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	681a      	ldr	r2, [r3, #0]
 800ad54:	4b0b      	ldr	r3, [pc, #44]	; (800ad84 <HAL_I2C_Mem_Read+0x230>)
 800ad56:	400b      	ands	r3, r1
 800ad58:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	2220      	movs	r2, #32
 800ad5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	2200      	movs	r2, #0
 800ad66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ad72:	2300      	movs	r3, #0
 800ad74:	e000      	b.n	800ad78 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800ad76:	2302      	movs	r3, #2
  }
}
 800ad78:	4618      	mov	r0, r3
 800ad7a:	3718      	adds	r7, #24
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	bd80      	pop	{r7, pc}
 800ad80:	80002400 	.word	0x80002400
 800ad84:	fe00e800 	.word	0xfe00e800

0800ad88 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 800ad88:	b480      	push	{r7}
 800ad8a:	b083      	sub	sp, #12
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ad96:	b2db      	uxtb	r3, r3
}
 800ad98:	4618      	mov	r0, r3
 800ad9a:	370c      	adds	r7, #12
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada2:	4770      	bx	lr

0800ada4 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 800ada4:	b480      	push	{r7}
 800ada6:	b083      	sub	sp, #12
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 800adb0:	4618      	mov	r0, r3
 800adb2:	370c      	adds	r7, #12
 800adb4:	46bd      	mov	sp, r7
 800adb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adba:	4770      	bx	lr

0800adbc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b086      	sub	sp, #24
 800adc0:	af02      	add	r7, sp, #8
 800adc2:	60f8      	str	r0, [r7, #12]
 800adc4:	4608      	mov	r0, r1
 800adc6:	4611      	mov	r1, r2
 800adc8:	461a      	mov	r2, r3
 800adca:	4603      	mov	r3, r0
 800adcc:	817b      	strh	r3, [r7, #10]
 800adce:	460b      	mov	r3, r1
 800add0:	813b      	strh	r3, [r7, #8]
 800add2:	4613      	mov	r3, r2
 800add4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800add6:	88fb      	ldrh	r3, [r7, #6]
 800add8:	b2da      	uxtb	r2, r3
 800adda:	8979      	ldrh	r1, [r7, #10]
 800addc:	4b20      	ldr	r3, [pc, #128]	; (800ae60 <I2C_RequestMemoryWrite+0xa4>)
 800adde:	9300      	str	r3, [sp, #0]
 800ade0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ade4:	68f8      	ldr	r0, [r7, #12]
 800ade6:	f000 fa6f 	bl	800b2c8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800adea:	69fa      	ldr	r2, [r7, #28]
 800adec:	69b9      	ldr	r1, [r7, #24]
 800adee:	68f8      	ldr	r0, [r7, #12]
 800adf0:	f000 f8ff 	bl	800aff2 <I2C_WaitOnTXISFlagUntilTimeout>
 800adf4:	4603      	mov	r3, r0
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d001      	beq.n	800adfe <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800adfa:	2301      	movs	r3, #1
 800adfc:	e02c      	b.n	800ae58 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800adfe:	88fb      	ldrh	r3, [r7, #6]
 800ae00:	2b01      	cmp	r3, #1
 800ae02:	d105      	bne.n	800ae10 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ae04:	893b      	ldrh	r3, [r7, #8]
 800ae06:	b2da      	uxtb	r2, r3
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	629a      	str	r2, [r3, #40]	; 0x28
 800ae0e:	e015      	b.n	800ae3c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800ae10:	893b      	ldrh	r3, [r7, #8]
 800ae12:	0a1b      	lsrs	r3, r3, #8
 800ae14:	b29b      	uxth	r3, r3
 800ae16:	b2da      	uxtb	r2, r3
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ae1e:	69fa      	ldr	r2, [r7, #28]
 800ae20:	69b9      	ldr	r1, [r7, #24]
 800ae22:	68f8      	ldr	r0, [r7, #12]
 800ae24:	f000 f8e5 	bl	800aff2 <I2C_WaitOnTXISFlagUntilTimeout>
 800ae28:	4603      	mov	r3, r0
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d001      	beq.n	800ae32 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800ae2e:	2301      	movs	r3, #1
 800ae30:	e012      	b.n	800ae58 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ae32:	893b      	ldrh	r3, [r7, #8]
 800ae34:	b2da      	uxtb	r2, r3
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800ae3c:	69fb      	ldr	r3, [r7, #28]
 800ae3e:	9300      	str	r3, [sp, #0]
 800ae40:	69bb      	ldr	r3, [r7, #24]
 800ae42:	2200      	movs	r2, #0
 800ae44:	2180      	movs	r1, #128	; 0x80
 800ae46:	68f8      	ldr	r0, [r7, #12]
 800ae48:	f000 f884 	bl	800af54 <I2C_WaitOnFlagUntilTimeout>
 800ae4c:	4603      	mov	r3, r0
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d001      	beq.n	800ae56 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800ae52:	2301      	movs	r3, #1
 800ae54:	e000      	b.n	800ae58 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800ae56:	2300      	movs	r3, #0
}
 800ae58:	4618      	mov	r0, r3
 800ae5a:	3710      	adds	r7, #16
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	bd80      	pop	{r7, pc}
 800ae60:	80002000 	.word	0x80002000

0800ae64 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b086      	sub	sp, #24
 800ae68:	af02      	add	r7, sp, #8
 800ae6a:	60f8      	str	r0, [r7, #12]
 800ae6c:	4608      	mov	r0, r1
 800ae6e:	4611      	mov	r1, r2
 800ae70:	461a      	mov	r2, r3
 800ae72:	4603      	mov	r3, r0
 800ae74:	817b      	strh	r3, [r7, #10]
 800ae76:	460b      	mov	r3, r1
 800ae78:	813b      	strh	r3, [r7, #8]
 800ae7a:	4613      	mov	r3, r2
 800ae7c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800ae7e:	88fb      	ldrh	r3, [r7, #6]
 800ae80:	b2da      	uxtb	r2, r3
 800ae82:	8979      	ldrh	r1, [r7, #10]
 800ae84:	4b20      	ldr	r3, [pc, #128]	; (800af08 <I2C_RequestMemoryRead+0xa4>)
 800ae86:	9300      	str	r3, [sp, #0]
 800ae88:	2300      	movs	r3, #0
 800ae8a:	68f8      	ldr	r0, [r7, #12]
 800ae8c:	f000 fa1c 	bl	800b2c8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ae90:	69fa      	ldr	r2, [r7, #28]
 800ae92:	69b9      	ldr	r1, [r7, #24]
 800ae94:	68f8      	ldr	r0, [r7, #12]
 800ae96:	f000 f8ac 	bl	800aff2 <I2C_WaitOnTXISFlagUntilTimeout>
 800ae9a:	4603      	mov	r3, r0
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d001      	beq.n	800aea4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800aea0:	2301      	movs	r3, #1
 800aea2:	e02c      	b.n	800aefe <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800aea4:	88fb      	ldrh	r3, [r7, #6]
 800aea6:	2b01      	cmp	r3, #1
 800aea8:	d105      	bne.n	800aeb6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800aeaa:	893b      	ldrh	r3, [r7, #8]
 800aeac:	b2da      	uxtb	r2, r3
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	629a      	str	r2, [r3, #40]	; 0x28
 800aeb4:	e015      	b.n	800aee2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800aeb6:	893b      	ldrh	r3, [r7, #8]
 800aeb8:	0a1b      	lsrs	r3, r3, #8
 800aeba:	b29b      	uxth	r3, r3
 800aebc:	b2da      	uxtb	r2, r3
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800aec4:	69fa      	ldr	r2, [r7, #28]
 800aec6:	69b9      	ldr	r1, [r7, #24]
 800aec8:	68f8      	ldr	r0, [r7, #12]
 800aeca:	f000 f892 	bl	800aff2 <I2C_WaitOnTXISFlagUntilTimeout>
 800aece:	4603      	mov	r3, r0
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d001      	beq.n	800aed8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800aed4:	2301      	movs	r3, #1
 800aed6:	e012      	b.n	800aefe <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800aed8:	893b      	ldrh	r3, [r7, #8]
 800aeda:	b2da      	uxtb	r2, r3
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800aee2:	69fb      	ldr	r3, [r7, #28]
 800aee4:	9300      	str	r3, [sp, #0]
 800aee6:	69bb      	ldr	r3, [r7, #24]
 800aee8:	2200      	movs	r2, #0
 800aeea:	2140      	movs	r1, #64	; 0x40
 800aeec:	68f8      	ldr	r0, [r7, #12]
 800aeee:	f000 f831 	bl	800af54 <I2C_WaitOnFlagUntilTimeout>
 800aef2:	4603      	mov	r3, r0
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d001      	beq.n	800aefc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800aef8:	2301      	movs	r3, #1
 800aefa:	e000      	b.n	800aefe <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800aefc:	2300      	movs	r3, #0
}
 800aefe:	4618      	mov	r0, r3
 800af00:	3710      	adds	r7, #16
 800af02:	46bd      	mov	sp, r7
 800af04:	bd80      	pop	{r7, pc}
 800af06:	bf00      	nop
 800af08:	80002000 	.word	0x80002000

0800af0c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800af0c:	b480      	push	{r7}
 800af0e:	b083      	sub	sp, #12
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	699b      	ldr	r3, [r3, #24]
 800af1a:	f003 0302 	and.w	r3, r3, #2
 800af1e:	2b02      	cmp	r3, #2
 800af20:	d103      	bne.n	800af2a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	2200      	movs	r2, #0
 800af28:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	699b      	ldr	r3, [r3, #24]
 800af30:	f003 0301 	and.w	r3, r3, #1
 800af34:	2b01      	cmp	r3, #1
 800af36:	d007      	beq.n	800af48 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	699a      	ldr	r2, [r3, #24]
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	f042 0201 	orr.w	r2, r2, #1
 800af46:	619a      	str	r2, [r3, #24]
  }
}
 800af48:	bf00      	nop
 800af4a:	370c      	adds	r7, #12
 800af4c:	46bd      	mov	sp, r7
 800af4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af52:	4770      	bx	lr

0800af54 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800af54:	b580      	push	{r7, lr}
 800af56:	b084      	sub	sp, #16
 800af58:	af00      	add	r7, sp, #0
 800af5a:	60f8      	str	r0, [r7, #12]
 800af5c:	60b9      	str	r1, [r7, #8]
 800af5e:	603b      	str	r3, [r7, #0]
 800af60:	4613      	mov	r3, r2
 800af62:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800af64:	e031      	b.n	800afca <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800af66:	683b      	ldr	r3, [r7, #0]
 800af68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800af6c:	d02d      	beq.n	800afca <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800af6e:	f7fe ff0b 	bl	8009d88 <HAL_GetTick>
 800af72:	4602      	mov	r2, r0
 800af74:	69bb      	ldr	r3, [r7, #24]
 800af76:	1ad3      	subs	r3, r2, r3
 800af78:	683a      	ldr	r2, [r7, #0]
 800af7a:	429a      	cmp	r2, r3
 800af7c:	d302      	bcc.n	800af84 <I2C_WaitOnFlagUntilTimeout+0x30>
 800af7e:	683b      	ldr	r3, [r7, #0]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d122      	bne.n	800afca <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	699a      	ldr	r2, [r3, #24]
 800af8a:	68bb      	ldr	r3, [r7, #8]
 800af8c:	4013      	ands	r3, r2
 800af8e:	68ba      	ldr	r2, [r7, #8]
 800af90:	429a      	cmp	r2, r3
 800af92:	bf0c      	ite	eq
 800af94:	2301      	moveq	r3, #1
 800af96:	2300      	movne	r3, #0
 800af98:	b2db      	uxtb	r3, r3
 800af9a:	461a      	mov	r2, r3
 800af9c:	79fb      	ldrb	r3, [r7, #7]
 800af9e:	429a      	cmp	r2, r3
 800afa0:	d113      	bne.n	800afca <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800afa6:	f043 0220 	orr.w	r2, r3, #32
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	2220      	movs	r2, #32
 800afb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	2200      	movs	r2, #0
 800afba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	2200      	movs	r2, #0
 800afc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800afc6:	2301      	movs	r3, #1
 800afc8:	e00f      	b.n	800afea <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	699a      	ldr	r2, [r3, #24]
 800afd0:	68bb      	ldr	r3, [r7, #8]
 800afd2:	4013      	ands	r3, r2
 800afd4:	68ba      	ldr	r2, [r7, #8]
 800afd6:	429a      	cmp	r2, r3
 800afd8:	bf0c      	ite	eq
 800afda:	2301      	moveq	r3, #1
 800afdc:	2300      	movne	r3, #0
 800afde:	b2db      	uxtb	r3, r3
 800afe0:	461a      	mov	r2, r3
 800afe2:	79fb      	ldrb	r3, [r7, #7]
 800afe4:	429a      	cmp	r2, r3
 800afe6:	d0be      	beq.n	800af66 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800afe8:	2300      	movs	r3, #0
}
 800afea:	4618      	mov	r0, r3
 800afec:	3710      	adds	r7, #16
 800afee:	46bd      	mov	sp, r7
 800aff0:	bd80      	pop	{r7, pc}

0800aff2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800aff2:	b580      	push	{r7, lr}
 800aff4:	b084      	sub	sp, #16
 800aff6:	af00      	add	r7, sp, #0
 800aff8:	60f8      	str	r0, [r7, #12]
 800affa:	60b9      	str	r1, [r7, #8]
 800affc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800affe:	e033      	b.n	800b068 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b000:	687a      	ldr	r2, [r7, #4]
 800b002:	68b9      	ldr	r1, [r7, #8]
 800b004:	68f8      	ldr	r0, [r7, #12]
 800b006:	f000 f87f 	bl	800b108 <I2C_IsErrorOccurred>
 800b00a:	4603      	mov	r3, r0
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d001      	beq.n	800b014 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b010:	2301      	movs	r3, #1
 800b012:	e031      	b.n	800b078 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b014:	68bb      	ldr	r3, [r7, #8]
 800b016:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b01a:	d025      	beq.n	800b068 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b01c:	f7fe feb4 	bl	8009d88 <HAL_GetTick>
 800b020:	4602      	mov	r2, r0
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	1ad3      	subs	r3, r2, r3
 800b026:	68ba      	ldr	r2, [r7, #8]
 800b028:	429a      	cmp	r2, r3
 800b02a:	d302      	bcc.n	800b032 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800b02c:	68bb      	ldr	r3, [r7, #8]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d11a      	bne.n	800b068 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	699b      	ldr	r3, [r3, #24]
 800b038:	f003 0302 	and.w	r3, r3, #2
 800b03c:	2b02      	cmp	r3, #2
 800b03e:	d013      	beq.n	800b068 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b044:	f043 0220 	orr.w	r2, r3, #32
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	2220      	movs	r2, #32
 800b050:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	2200      	movs	r2, #0
 800b058:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	2200      	movs	r2, #0
 800b060:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800b064:	2301      	movs	r3, #1
 800b066:	e007      	b.n	800b078 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	699b      	ldr	r3, [r3, #24]
 800b06e:	f003 0302 	and.w	r3, r3, #2
 800b072:	2b02      	cmp	r3, #2
 800b074:	d1c4      	bne.n	800b000 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800b076:	2300      	movs	r3, #0
}
 800b078:	4618      	mov	r0, r3
 800b07a:	3710      	adds	r7, #16
 800b07c:	46bd      	mov	sp, r7
 800b07e:	bd80      	pop	{r7, pc}

0800b080 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800b080:	b580      	push	{r7, lr}
 800b082:	b084      	sub	sp, #16
 800b084:	af00      	add	r7, sp, #0
 800b086:	60f8      	str	r0, [r7, #12]
 800b088:	60b9      	str	r1, [r7, #8]
 800b08a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b08c:	e02f      	b.n	800b0ee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b08e:	687a      	ldr	r2, [r7, #4]
 800b090:	68b9      	ldr	r1, [r7, #8]
 800b092:	68f8      	ldr	r0, [r7, #12]
 800b094:	f000 f838 	bl	800b108 <I2C_IsErrorOccurred>
 800b098:	4603      	mov	r3, r0
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d001      	beq.n	800b0a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b09e:	2301      	movs	r3, #1
 800b0a0:	e02d      	b.n	800b0fe <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b0a2:	f7fe fe71 	bl	8009d88 <HAL_GetTick>
 800b0a6:	4602      	mov	r2, r0
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	1ad3      	subs	r3, r2, r3
 800b0ac:	68ba      	ldr	r2, [r7, #8]
 800b0ae:	429a      	cmp	r2, r3
 800b0b0:	d302      	bcc.n	800b0b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800b0b2:	68bb      	ldr	r3, [r7, #8]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d11a      	bne.n	800b0ee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	699b      	ldr	r3, [r3, #24]
 800b0be:	f003 0320 	and.w	r3, r3, #32
 800b0c2:	2b20      	cmp	r3, #32
 800b0c4:	d013      	beq.n	800b0ee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0ca:	f043 0220 	orr.w	r2, r3, #32
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	2220      	movs	r2, #32
 800b0d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	2200      	movs	r2, #0
 800b0de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	2200      	movs	r2, #0
 800b0e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800b0ea:	2301      	movs	r3, #1
 800b0ec:	e007      	b.n	800b0fe <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	699b      	ldr	r3, [r3, #24]
 800b0f4:	f003 0320 	and.w	r3, r3, #32
 800b0f8:	2b20      	cmp	r3, #32
 800b0fa:	d1c8      	bne.n	800b08e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b0fc:	2300      	movs	r3, #0
}
 800b0fe:	4618      	mov	r0, r3
 800b100:	3710      	adds	r7, #16
 800b102:	46bd      	mov	sp, r7
 800b104:	bd80      	pop	{r7, pc}
	...

0800b108 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b108:	b580      	push	{r7, lr}
 800b10a:	b08a      	sub	sp, #40	; 0x28
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	60f8      	str	r0, [r7, #12]
 800b110:	60b9      	str	r1, [r7, #8]
 800b112:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b114:	2300      	movs	r3, #0
 800b116:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	699b      	ldr	r3, [r3, #24]
 800b120:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800b122:	2300      	movs	r3, #0
 800b124:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800b12a:	69bb      	ldr	r3, [r7, #24]
 800b12c:	f003 0310 	and.w	r3, r3, #16
 800b130:	2b00      	cmp	r3, #0
 800b132:	d068      	beq.n	800b206 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	2210      	movs	r2, #16
 800b13a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800b13c:	e049      	b.n	800b1d2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800b13e:	68bb      	ldr	r3, [r7, #8]
 800b140:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b144:	d045      	beq.n	800b1d2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800b146:	f7fe fe1f 	bl	8009d88 <HAL_GetTick>
 800b14a:	4602      	mov	r2, r0
 800b14c:	69fb      	ldr	r3, [r7, #28]
 800b14e:	1ad3      	subs	r3, r2, r3
 800b150:	68ba      	ldr	r2, [r7, #8]
 800b152:	429a      	cmp	r2, r3
 800b154:	d302      	bcc.n	800b15c <I2C_IsErrorOccurred+0x54>
 800b156:	68bb      	ldr	r3, [r7, #8]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d13a      	bne.n	800b1d2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	685b      	ldr	r3, [r3, #4]
 800b162:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b166:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b16e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	699b      	ldr	r3, [r3, #24]
 800b176:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b17a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b17e:	d121      	bne.n	800b1c4 <I2C_IsErrorOccurred+0xbc>
 800b180:	697b      	ldr	r3, [r7, #20]
 800b182:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b186:	d01d      	beq.n	800b1c4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800b188:	7cfb      	ldrb	r3, [r7, #19]
 800b18a:	2b20      	cmp	r3, #32
 800b18c:	d01a      	beq.n	800b1c4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	685a      	ldr	r2, [r3, #4]
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b19c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800b19e:	f7fe fdf3 	bl	8009d88 <HAL_GetTick>
 800b1a2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b1a4:	e00e      	b.n	800b1c4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800b1a6:	f7fe fdef 	bl	8009d88 <HAL_GetTick>
 800b1aa:	4602      	mov	r2, r0
 800b1ac:	69fb      	ldr	r3, [r7, #28]
 800b1ae:	1ad3      	subs	r3, r2, r3
 800b1b0:	2b19      	cmp	r3, #25
 800b1b2:	d907      	bls.n	800b1c4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800b1b4:	6a3b      	ldr	r3, [r7, #32]
 800b1b6:	f043 0320 	orr.w	r3, r3, #32
 800b1ba:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800b1bc:	2301      	movs	r3, #1
 800b1be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800b1c2:	e006      	b.n	800b1d2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	699b      	ldr	r3, [r3, #24]
 800b1ca:	f003 0320 	and.w	r3, r3, #32
 800b1ce:	2b20      	cmp	r3, #32
 800b1d0:	d1e9      	bne.n	800b1a6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	699b      	ldr	r3, [r3, #24]
 800b1d8:	f003 0320 	and.w	r3, r3, #32
 800b1dc:	2b20      	cmp	r3, #32
 800b1de:	d003      	beq.n	800b1e8 <I2C_IsErrorOccurred+0xe0>
 800b1e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d0aa      	beq.n	800b13e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800b1e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d103      	bne.n	800b1f8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	2220      	movs	r2, #32
 800b1f6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800b1f8:	6a3b      	ldr	r3, [r7, #32]
 800b1fa:	f043 0304 	orr.w	r3, r3, #4
 800b1fe:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800b200:	2301      	movs	r3, #1
 800b202:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	699b      	ldr	r3, [r3, #24]
 800b20c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800b20e:	69bb      	ldr	r3, [r7, #24]
 800b210:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b214:	2b00      	cmp	r3, #0
 800b216:	d00b      	beq.n	800b230 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800b218:	6a3b      	ldr	r3, [r7, #32]
 800b21a:	f043 0301 	orr.w	r3, r3, #1
 800b21e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b228:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b22a:	2301      	movs	r3, #1
 800b22c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800b230:	69bb      	ldr	r3, [r7, #24]
 800b232:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b236:	2b00      	cmp	r3, #0
 800b238:	d00b      	beq.n	800b252 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800b23a:	6a3b      	ldr	r3, [r7, #32]
 800b23c:	f043 0308 	orr.w	r3, r3, #8
 800b240:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b24a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b24c:	2301      	movs	r3, #1
 800b24e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800b252:	69bb      	ldr	r3, [r7, #24]
 800b254:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d00b      	beq.n	800b274 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800b25c:	6a3b      	ldr	r3, [r7, #32]
 800b25e:	f043 0302 	orr.w	r3, r3, #2
 800b262:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b26c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b26e:	2301      	movs	r3, #1
 800b270:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800b274:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d01c      	beq.n	800b2b6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800b27c:	68f8      	ldr	r0, [r7, #12]
 800b27e:	f7ff fe45 	bl	800af0c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	6859      	ldr	r1, [r3, #4]
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	681a      	ldr	r2, [r3, #0]
 800b28c:	4b0d      	ldr	r3, [pc, #52]	; (800b2c4 <I2C_IsErrorOccurred+0x1bc>)
 800b28e:	400b      	ands	r3, r1
 800b290:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b296:	6a3b      	ldr	r3, [r7, #32]
 800b298:	431a      	orrs	r2, r3
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	2220      	movs	r2, #32
 800b2a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	2200      	movs	r2, #0
 800b2aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	2200      	movs	r2, #0
 800b2b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800b2b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	3728      	adds	r7, #40	; 0x28
 800b2be:	46bd      	mov	sp, r7
 800b2c0:	bd80      	pop	{r7, pc}
 800b2c2:	bf00      	nop
 800b2c4:	fe00e800 	.word	0xfe00e800

0800b2c8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800b2c8:	b480      	push	{r7}
 800b2ca:	b087      	sub	sp, #28
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	60f8      	str	r0, [r7, #12]
 800b2d0:	607b      	str	r3, [r7, #4]
 800b2d2:	460b      	mov	r3, r1
 800b2d4:	817b      	strh	r3, [r7, #10]
 800b2d6:	4613      	mov	r3, r2
 800b2d8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b2da:	897b      	ldrh	r3, [r7, #10]
 800b2dc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800b2e0:	7a7b      	ldrb	r3, [r7, #9]
 800b2e2:	041b      	lsls	r3, r3, #16
 800b2e4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b2e8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b2ee:	6a3b      	ldr	r3, [r7, #32]
 800b2f0:	4313      	orrs	r3, r2
 800b2f2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b2f6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	685a      	ldr	r2, [r3, #4]
 800b2fe:	6a3b      	ldr	r3, [r7, #32]
 800b300:	0d5b      	lsrs	r3, r3, #21
 800b302:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800b306:	4b08      	ldr	r3, [pc, #32]	; (800b328 <I2C_TransferConfig+0x60>)
 800b308:	430b      	orrs	r3, r1
 800b30a:	43db      	mvns	r3, r3
 800b30c:	ea02 0103 	and.w	r1, r2, r3
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	697a      	ldr	r2, [r7, #20]
 800b316:	430a      	orrs	r2, r1
 800b318:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800b31a:	bf00      	nop
 800b31c:	371c      	adds	r7, #28
 800b31e:	46bd      	mov	sp, r7
 800b320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b324:	4770      	bx	lr
 800b326:	bf00      	nop
 800b328:	03ff63ff 	.word	0x03ff63ff

0800b32c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800b32c:	b480      	push	{r7}
 800b32e:	b083      	sub	sp, #12
 800b330:	af00      	add	r7, sp, #0
 800b332:	6078      	str	r0, [r7, #4]
 800b334:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b33c:	b2db      	uxtb	r3, r3
 800b33e:	2b20      	cmp	r3, #32
 800b340:	d138      	bne.n	800b3b4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b348:	2b01      	cmp	r3, #1
 800b34a:	d101      	bne.n	800b350 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800b34c:	2302      	movs	r3, #2
 800b34e:	e032      	b.n	800b3b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	2201      	movs	r2, #1
 800b354:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	2224      	movs	r2, #36	; 0x24
 800b35c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	681a      	ldr	r2, [r3, #0]
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	f022 0201 	bic.w	r2, r2, #1
 800b36e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	681a      	ldr	r2, [r3, #0]
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b37e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	6819      	ldr	r1, [r3, #0]
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	683a      	ldr	r2, [r7, #0]
 800b38c:	430a      	orrs	r2, r1
 800b38e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	681a      	ldr	r2, [r3, #0]
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	f042 0201 	orr.w	r2, r2, #1
 800b39e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	2220      	movs	r2, #32
 800b3a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	e000      	b.n	800b3b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b3b4:	2302      	movs	r3, #2
  }
}
 800b3b6:	4618      	mov	r0, r3
 800b3b8:	370c      	adds	r7, #12
 800b3ba:	46bd      	mov	sp, r7
 800b3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c0:	4770      	bx	lr

0800b3c2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800b3c2:	b480      	push	{r7}
 800b3c4:	b085      	sub	sp, #20
 800b3c6:	af00      	add	r7, sp, #0
 800b3c8:	6078      	str	r0, [r7, #4]
 800b3ca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b3d2:	b2db      	uxtb	r3, r3
 800b3d4:	2b20      	cmp	r3, #32
 800b3d6:	d139      	bne.n	800b44c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b3de:	2b01      	cmp	r3, #1
 800b3e0:	d101      	bne.n	800b3e6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800b3e2:	2302      	movs	r3, #2
 800b3e4:	e033      	b.n	800b44e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	2201      	movs	r2, #1
 800b3ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	2224      	movs	r2, #36	; 0x24
 800b3f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	681a      	ldr	r2, [r3, #0]
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	f022 0201 	bic.w	r2, r2, #1
 800b404:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800b414:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800b416:	683b      	ldr	r3, [r7, #0]
 800b418:	021b      	lsls	r3, r3, #8
 800b41a:	68fa      	ldr	r2, [r7, #12]
 800b41c:	4313      	orrs	r3, r2
 800b41e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	68fa      	ldr	r2, [r7, #12]
 800b426:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	681a      	ldr	r2, [r3, #0]
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	f042 0201 	orr.w	r2, r2, #1
 800b436:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	2220      	movs	r2, #32
 800b43c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	2200      	movs	r2, #0
 800b444:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b448:	2300      	movs	r3, #0
 800b44a:	e000      	b.n	800b44e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800b44c:	2302      	movs	r3, #2
  }
}
 800b44e:	4618      	mov	r0, r3
 800b450:	3714      	adds	r7, #20
 800b452:	46bd      	mov	sp, r7
 800b454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b458:	4770      	bx	lr
	...

0800b45c <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 800b45c:	b480      	push	{r7}
 800b45e:	b085      	sub	sp, #20
 800b460:	af00      	add	r7, sp, #0
 800b462:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b464:	2300      	movs	r3, #0
 800b466:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 800b468:	4b0b      	ldr	r3, [pc, #44]	; (800b498 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	f003 0301 	and.w	r3, r3, #1
 800b470:	2b00      	cmp	r3, #0
 800b472:	d002      	beq.n	800b47a <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 800b474:	2301      	movs	r3, #1
 800b476:	73fb      	strb	r3, [r7, #15]
 800b478:	e007      	b.n	800b48a <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 800b47a:	4b07      	ldr	r3, [pc, #28]	; (800b498 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	f023 0204 	bic.w	r2, r3, #4
 800b482:	4905      	ldr	r1, [pc, #20]	; (800b498 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	4313      	orrs	r3, r2
 800b488:	600b      	str	r3, [r1, #0]
  }

  return status;
 800b48a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b48c:	4618      	mov	r0, r3
 800b48e:	3714      	adds	r7, #20
 800b490:	46bd      	mov	sp, r7
 800b492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b496:	4770      	bx	lr
 800b498:	40030400 	.word	0x40030400

0800b49c <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 800b49c:	b480      	push	{r7}
 800b49e:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 800b4a0:	4b05      	ldr	r3, [pc, #20]	; (800b4b8 <HAL_ICACHE_Enable+0x1c>)
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	4a04      	ldr	r2, [pc, #16]	; (800b4b8 <HAL_ICACHE_Enable+0x1c>)
 800b4a6:	f043 0301 	orr.w	r3, r3, #1
 800b4aa:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800b4ac:	2300      	movs	r3, #0
}
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b6:	4770      	bx	lr
 800b4b8:	40030400 	.word	0x40030400

0800b4bc <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b084      	sub	sp, #16
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d101      	bne.n	800b4ce <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 800b4ca:	2301      	movs	r3, #1
 800b4cc:	e0f2      	b.n	800b6b4 <HAL_LPTIM_Init+0x1f8>
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(hlptim->Init.Period));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	685b      	ldr	r3, [r3, #4]
 800b4d2:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800b4da:	b2db      	uxtb	r3, r3
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d111      	bne.n	800b504 <HAL_LPTIM_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    LPTIM_ResetCallback(hlptim);
 800b4e8:	6878      	ldr	r0, [r7, #4]
 800b4ea:	f000 fc7f 	bl	800bdec <LPTIM_ResetCallback>

    if (hlptim->MspInitCallback == NULL)
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d102      	bne.n	800b4fc <HAL_LPTIM_Init+0x40>
    {
      hlptim->MspInitCallback = HAL_LPTIM_MspInit;
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	4a70      	ldr	r2, [pc, #448]	; (800b6bc <HAL_LPTIM_Init+0x200>)
 800b4fa:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b500:	6878      	ldr	r0, [r7, #4]
 800b502:	4798      	blx	r3
    HAL_LPTIM_MspInit(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	2202      	movs	r2, #2
 800b508:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	691a      	ldr	r2, [r3, #16]
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	f042 0201 	orr.w	r2, r2, #1
 800b51a:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b524:	605a      	str	r2, [r3, #4]

  /* Set the repetition counter */
  __HAL_LPTIM_REPETITIONCOUNTER_SET(hlptim, hlptim->Init.RepetitionCounter);
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	687a      	ldr	r2, [r7, #4]
 800b52c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800b52e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Wait for the completion of the write operation to the LPTIM_RCR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_REPOK) == HAL_TIMEOUT)
 800b530:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b534:	6878      	ldr	r0, [r7, #4]
 800b536:	f000 fcad 	bl	800be94 <LPTIM_WaitForFlag>
 800b53a:	4603      	mov	r3, r0
 800b53c:	2b03      	cmp	r3, #3
 800b53e:	d101      	bne.n	800b544 <HAL_LPTIM_Init+0x88>
  {
    return HAL_TIMEOUT;
 800b540:	2303      	movs	r3, #3
 800b542:	e0b7      	b.n	800b6b4 <HAL_LPTIM_Init+0x1f8>
  }


  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	2210      	movs	r2, #16
 800b54a:	605a      	str	r2, [r3, #4]

  /* Set LPTIM Period */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, hlptim->Init.Period);
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	687a      	ldr	r2, [r7, #4]
 800b552:	6a12      	ldr	r2, [r2, #32]
 800b554:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 800b556:	2110      	movs	r1, #16
 800b558:	6878      	ldr	r0, [r7, #4]
 800b55a:	f000 fc9b 	bl	800be94 <LPTIM_WaitForFlag>
 800b55e:	4603      	mov	r3, r0
 800b560:	2b03      	cmp	r3, #3
 800b562:	d101      	bne.n	800b568 <HAL_LPTIM_Init+0xac>
  {
    return HAL_TIMEOUT;
 800b564:	2303      	movs	r3, #3
 800b566:	e0a5      	b.n	800b6b4 <HAL_LPTIM_Init+0x1f8>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b56e:	f003 0302 	and.w	r3, r3, #2
 800b572:	2b00      	cmp	r3, #0
 800b574:	d10e      	bne.n	800b594 <HAL_LPTIM_Init+0xd8>
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b57c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b580:	2b00      	cmp	r3, #0
 800b582:	d107      	bne.n	800b594 <HAL_LPTIM_Init+0xd8>
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	691a      	ldr	r2, [r3, #16]
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	f022 0201 	bic.w	r2, r2, #1
 800b592:	611a      	str	r2, [r3, #16]

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	68db      	ldr	r3, [r3, #12]
 800b59a:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	685b      	ldr	r3, [r3, #4]
 800b5a0:	2b01      	cmp	r3, #1
 800b5a2:	d004      	beq.n	800b5ae <HAL_LPTIM_Init+0xf2>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5a8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b5ac:	d103      	bne.n	800b5b6 <HAL_LPTIM_Init+0xfa>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	f023 031e 	bic.w	r3, r3, #30
 800b5b4:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	695b      	ldr	r3, [r3, #20]
 800b5ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b5be:	4293      	cmp	r3, r2
 800b5c0:	d005      	beq.n	800b5ce <HAL_LPTIM_Init+0x112>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800b5c8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b5cc:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 800b5ce:	68fa      	ldr	r2, [r7, #12]
 800b5d0:	4b3b      	ldr	r3, [pc, #236]	; (800b6c0 <HAL_LPTIM_Init+0x204>)
 800b5d2:	4013      	ands	r3, r2
 800b5d4:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800b5de:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.Clock.Prescaler |
 800b5e4:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 800b5ea:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800b5ec:	68fa      	ldr	r2, [r7, #12]
 800b5ee:	4313      	orrs	r3, r2
 800b5f0:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	685b      	ldr	r3, [r3, #4]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d107      	bne.n	800b60a <HAL_LPTIM_Init+0x14e>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800b602:	4313      	orrs	r3, r2
 800b604:	68fa      	ldr	r2, [r7, #12]
 800b606:	4313      	orrs	r3, r2
 800b608:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	685b      	ldr	r3, [r3, #4]
 800b60e:	2b01      	cmp	r3, #1
 800b610:	d004      	beq.n	800b61c <HAL_LPTIM_Init+0x160>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b616:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b61a:	d107      	bne.n	800b62c <HAL_LPTIM_Init+0x170>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 800b624:	4313      	orrs	r3, r2
 800b626:	68fa      	ldr	r2, [r7, #12]
 800b628:	4313      	orrs	r3, r2
 800b62a:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	695b      	ldr	r3, [r3, #20]
 800b630:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b634:	4293      	cmp	r3, r2
 800b636:	d00a      	beq.n	800b64e <HAL_LPTIM_Init+0x192>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800b640:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 800b646:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800b648:	68fa      	ldr	r2, [r7, #12]
 800b64a:	4313      	orrs	r3, r2
 800b64c:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	68fa      	ldr	r2, [r7, #12]
 800b654:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	4a1a      	ldr	r2, [pc, #104]	; (800b6c4 <HAL_LPTIM_Init+0x208>)
 800b65c:	4293      	cmp	r3, r2
 800b65e:	d004      	beq.n	800b66a <HAL_LPTIM_Init+0x1ae>
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	4a18      	ldr	r2, [pc, #96]	; (800b6c8 <HAL_LPTIM_Init+0x20c>)
 800b666:	4293      	cmp	r3, r2
 800b668:	d108      	bne.n	800b67c <HAL_LPTIM_Init+0x1c0>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	430a      	orrs	r2, r1
 800b678:	625a      	str	r2, [r3, #36]	; 0x24
 800b67a:	e00e      	b.n	800b69a <HAL_LPTIM_Init+0x1de>
  }
  else
  {
    if ((hlptim->Instance == LPTIM3) || (hlptim->Instance == LPTIM4))
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	4a12      	ldr	r2, [pc, #72]	; (800b6cc <HAL_LPTIM_Init+0x210>)
 800b682:	4293      	cmp	r3, r2
 800b684:	d004      	beq.n	800b690 <HAL_LPTIM_Init+0x1d4>
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	4a11      	ldr	r2, [pc, #68]	; (800b6d0 <HAL_LPTIM_Init+0x214>)
 800b68c:	4293      	cmp	r3, r2
 800b68e:	d104      	bne.n	800b69a <HAL_LPTIM_Init+0x1de>
    {
      /* Check LPTIM3 Input1 source */
      assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

      /* Configure LPTIM3 Input1 source */
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	687a      	ldr	r2, [r7, #4]
 800b696:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800b698:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }

  /* Initialize the LPTIM channels state */
  LPTIM_CHANNEL_STATE_SET_ALL(hlptim, HAL_LPTIM_CHANNEL_STATE_READY);
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	2201      	movs	r2, #1
 800b69e:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	2201      	movs	r2, #1
 800b6a6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	2201      	movs	r2, #1
 800b6ae:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

  /* Return function status */
  return HAL_OK;
 800b6b2:	2300      	movs	r3, #0
}
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	3710      	adds	r7, #16
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	bd80      	pop	{r7, pc}
 800b6bc:	080013b9 	.word	0x080013b9
 800b6c0:	ff39f1fe 	.word	0xff39f1fe
 800b6c4:	46004400 	.word	0x46004400
 800b6c8:	40009400 	.word	0x40009400
 800b6cc:	46004800 	.word	0x46004800
 800b6d0:	46004c00 	.word	0x46004c00

0800b6d4 <HAL_LPTIM_PWM_Start_IT>:
  *            @arg LPTIM_CHANNEL_1: LPTIM Channel 1 selected
  *            @arg LPTIM_CHANNEL_2: LPTIM Channel 2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_PWM_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Channel)
{
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	b082      	sub	sp, #8
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	6078      	str	r0, [r7, #4]
 800b6dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_CCX_INSTANCE(hlptim->Instance, Channel));

  /* Check LPTIM channel state */
  if (LPTIM_CHANNEL_STATE_GET(hlptim, Channel) != HAL_LPTIM_CHANNEL_STATE_READY)
 800b6de:	683b      	ldr	r3, [r7, #0]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d109      	bne.n	800b6f8 <HAL_LPTIM_PWM_Start_IT+0x24>
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800b6ea:	b2db      	uxtb	r3, r3
 800b6ec:	2b01      	cmp	r3, #1
 800b6ee:	bf14      	ite	ne
 800b6f0:	2301      	movne	r3, #1
 800b6f2:	2300      	moveq	r3, #0
 800b6f4:	b2db      	uxtb	r3, r3
 800b6f6:	e008      	b.n	800b70a <HAL_LPTIM_PWM_Start_IT+0x36>
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800b6fe:	b2db      	uxtb	r3, r3
 800b700:	2b01      	cmp	r3, #1
 800b702:	bf14      	ite	ne
 800b704:	2301      	movne	r3, #1
 800b706:	2300      	moveq	r3, #0
 800b708:	b2db      	uxtb	r3, r3
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d001      	beq.n	800b712 <HAL_LPTIM_PWM_Start_IT+0x3e>
  {
    return HAL_ERROR;
 800b70e:	2301      	movs	r3, #1
 800b710:	e08b      	b.n	800b82a <HAL_LPTIM_PWM_Start_IT+0x156>
  }

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	2202      	movs	r2, #2
 800b716:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

  /* Set the LPTIM channel state */
  LPTIM_CHANNEL_STATE_SET(hlptim, Channel, HAL_LPTIM_CHANNEL_STATE_BUSY);
 800b71a:	683b      	ldr	r3, [r7, #0]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d104      	bne.n	800b72a <HAL_LPTIM_PWM_Start_IT+0x56>
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	2202      	movs	r2, #2
 800b724:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 800b728:	e003      	b.n	800b732 <HAL_LPTIM_PWM_Start_IT+0x5e>
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	2202      	movs	r2, #2
 800b72e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Reset WAVE bit to set PWM mode */
  hlptim->Instance->CFGR &= ~LPTIM_CFGR_WAVE;
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	68da      	ldr	r2, [r3, #12]
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800b740:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	691a      	ldr	r2, [r3, #16]
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	f042 0201 	orr.w	r2, r2, #1
 800b750:	611a      	str	r2, [r3, #16]
  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DIEROK);
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b75a:	605a      	str	r2, [r3, #4]

  switch (Channel)
 800b75c:	683b      	ldr	r3, [r7, #0]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d003      	beq.n	800b76a <HAL_LPTIM_PWM_Start_IT+0x96>
 800b762:	683b      	ldr	r3, [r7, #0]
 800b764:	2b01      	cmp	r3, #1
 800b766:	d00b      	beq.n	800b780 <HAL_LPTIM_PWM_Start_IT+0xac>
      /* Enable interrupt */
      __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_CMP2OK | LPTIM_IT_CC2 | LPTIM_IT_ARROK | LPTIM_IT_ARRM | LPTIM_IT_REPOK |
                            LPTIM_IT_UPDATE);
      break;
    default:
      break;
 800b768:	e013      	b.n	800b792 <HAL_LPTIM_PWM_Start_IT+0xbe>
      __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_CMP1OK | LPTIM_IT_CC1 | LPTIM_IT_ARROK | LPTIM_IT_ARRM | LPTIM_IT_REPOK |
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	689b      	ldr	r3, [r3, #8]
 800b770:	687a      	ldr	r2, [r7, #4]
 800b772:	6812      	ldr	r2, [r2, #0]
 800b774:	f443 73cd 	orr.w	r3, r3, #410	; 0x19a
 800b778:	f043 0301 	orr.w	r3, r3, #1
 800b77c:	6093      	str	r3, [r2, #8]
      break;
 800b77e:	e008      	b.n	800b792 <HAL_LPTIM_PWM_Start_IT+0xbe>
      __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_CMP2OK | LPTIM_IT_CC2 | LPTIM_IT_ARROK | LPTIM_IT_ARRM | LPTIM_IT_REPOK |
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	6899      	ldr	r1, [r3, #8]
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	681a      	ldr	r2, [r3, #0]
 800b78a:	4b2a      	ldr	r3, [pc, #168]	; (800b834 <HAL_LPTIM_PWM_Start_IT+0x160>)
 800b78c:	430b      	orrs	r3, r1
 800b78e:	6093      	str	r3, [r2, #8]
      break;
 800b790:	bf00      	nop
  }

  /* Wait for the completion of the write operation to the LPTIM_DIER register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_DIEROK) == HAL_TIMEOUT)
 800b792:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 800b796:	6878      	ldr	r0, [r7, #4]
 800b798:	f000 fb7c 	bl	800be94 <LPTIM_WaitForFlag>
 800b79c:	4603      	mov	r3, r0
 800b79e:	2b03      	cmp	r3, #3
 800b7a0:	d101      	bne.n	800b7a6 <HAL_LPTIM_PWM_Start_IT+0xd2>
  {
    return HAL_TIMEOUT;
 800b7a2:	2303      	movs	r3, #3
 800b7a4:	e041      	b.n	800b82a <HAL_LPTIM_PWM_Start_IT+0x156>
  }

  /* If external trigger source is used, then enable external trigger interrupt */
  if ((hlptim->Init.Trigger.Source) != LPTIM_TRIGSOURCE_SOFTWARE)
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	695b      	ldr	r3, [r3, #20]
 800b7aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b7ae:	4293      	cmp	r3, r2
 800b7b0:	d016      	beq.n	800b7e0 <HAL_LPTIM_PWM_Start_IT+0x10c>
  {
    /* Clear flag */
    __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DIEROK);
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b7ba:	605a      	str	r2, [r3, #4]

    /* Enable external trigger interrupt */
    __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_EXTTRIG);
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	689a      	ldr	r2, [r3, #8]
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	f042 0204 	orr.w	r2, r2, #4
 800b7ca:	609a      	str	r2, [r3, #8]

    /* Wait for the completion of the write operation to the LPTIM_DIER register */
    if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_DIEROK) == HAL_TIMEOUT)
 800b7cc:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 800b7d0:	6878      	ldr	r0, [r7, #4]
 800b7d2:	f000 fb5f 	bl	800be94 <LPTIM_WaitForFlag>
 800b7d6:	4603      	mov	r3, r0
 800b7d8:	2b03      	cmp	r3, #3
 800b7da:	d101      	bne.n	800b7e0 <HAL_LPTIM_PWM_Start_IT+0x10c>
    {
      return HAL_TIMEOUT;
 800b7dc:	2303      	movs	r3, #3
 800b7de:	e024      	b.n	800b82a <HAL_LPTIM_PWM_Start_IT+0x156>
    }
  }

  __HAL_LPTIM_CAPTURE_COMPARE_ENABLE(hlptim, Channel);
 800b7e0:	683b      	ldr	r3, [r7, #0]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d003      	beq.n	800b7ee <HAL_LPTIM_PWM_Start_IT+0x11a>
 800b7e6:	683b      	ldr	r3, [r7, #0]
 800b7e8:	2b01      	cmp	r3, #1
 800b7ea:	d009      	beq.n	800b800 <HAL_LPTIM_PWM_Start_IT+0x12c>
 800b7ec:	e010      	b.n	800b810 <HAL_LPTIM_PWM_Start_IT+0x13c>
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	f042 0202 	orr.w	r2, r2, #2
 800b7fc:	62da      	str	r2, [r3, #44]	; 0x2c
 800b7fe:	e007      	b.n	800b810 <HAL_LPTIM_PWM_Start_IT+0x13c>
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800b80e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	691a      	ldr	r2, [r3, #16]
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	f042 0204 	orr.w	r2, r2, #4
 800b81e:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	2201      	movs	r2, #1
 800b824:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

  /* Return function status */
  return HAL_OK;
 800b828:	2300      	movs	r3, #0
}
 800b82a:	4618      	mov	r0, r3
 800b82c:	3708      	adds	r7, #8
 800b82e:	46bd      	mov	sp, r7
 800b830:	bd80      	pop	{r7, pc}
 800b832:	bf00      	nop
 800b834:	00080392 	.word	0x00080392

0800b838 <HAL_LPTIM_OC_ConfigChannel>:
  *         this delay, leads to unpredictable results.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_OC_ConfigChannel(LPTIM_HandleTypeDef *hlptim, const LPTIM_OC_ConfigTypeDef *sConfig,
                                             uint32_t Channel)
{
 800b838:	b580      	push	{r7, lr}
 800b83a:	b086      	sub	sp, #24
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	60f8      	str	r0, [r7, #12]
 800b840:	60b9      	str	r1, [r7, #8]
 800b842:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LPTIM_CCX_INSTANCE(hlptim->Instance, Channel));
  assert_param(IS_LPTIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_LPTIM_PULSE(sConfig->Pulse));

  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	2202      	movs	r2, #2
 800b848:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

  switch (Channel)
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d003      	beq.n	800b85a <HAL_LPTIM_OC_ConfigChannel+0x22>
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	2b01      	cmp	r3, #1
 800b856:	d00b      	beq.n	800b870 <HAL_LPTIM_OC_ConfigChannel+0x38>
        return status;
      }
      break;
    }
    default:
      break;
 800b858:	e018      	b.n	800b88c <HAL_LPTIM_OC_ConfigChannel+0x54>
      status = LPTIM_OC1_SetConfig(hlptim, sConfig);
 800b85a:	68b9      	ldr	r1, [r7, #8]
 800b85c:	68f8      	ldr	r0, [r7, #12]
 800b85e:	f000 fb49 	bl	800bef4 <LPTIM_OC1_SetConfig>
 800b862:	4603      	mov	r3, r0
 800b864:	75fb      	strb	r3, [r7, #23]
      if (status != HAL_OK)
 800b866:	7dfb      	ldrb	r3, [r7, #23]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d00c      	beq.n	800b886 <HAL_LPTIM_OC_ConfigChannel+0x4e>
        return status;
 800b86c:	7dfb      	ldrb	r3, [r7, #23]
 800b86e:	e012      	b.n	800b896 <HAL_LPTIM_OC_ConfigChannel+0x5e>
      status = LPTIM_OC2_SetConfig(hlptim, sConfig);
 800b870:	68b9      	ldr	r1, [r7, #8]
 800b872:	68f8      	ldr	r0, [r7, #12]
 800b874:	f000 fba4 	bl	800bfc0 <LPTIM_OC2_SetConfig>
 800b878:	4603      	mov	r3, r0
 800b87a:	75fb      	strb	r3, [r7, #23]
      if (status != HAL_OK)
 800b87c:	7dfb      	ldrb	r3, [r7, #23]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d003      	beq.n	800b88a <HAL_LPTIM_OC_ConfigChannel+0x52>
        return status;
 800b882:	7dfb      	ldrb	r3, [r7, #23]
 800b884:	e007      	b.n	800b896 <HAL_LPTIM_OC_ConfigChannel+0x5e>
      break;
 800b886:	bf00      	nop
 800b888:	e000      	b.n	800b88c <HAL_LPTIM_OC_ConfigChannel+0x54>
      break;
 800b88a:	bf00      	nop
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	2201      	movs	r2, #1
 800b890:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

  /* Return function status */
  return HAL_OK;
 800b894:	2300      	movs	r3, #0
}
 800b896:	4618      	mov	r0, r3
 800b898:	3718      	adds	r7, #24
 800b89a:	46bd      	mov	sp, r7
 800b89c:	bd80      	pop	{r7, pc}

0800b89e <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 800b89e:	b580      	push	{r7, lr}
 800b8a0:	b082      	sub	sp, #8
 800b8a2:	af00      	add	r7, sp, #0
 800b8a4:	6078      	str	r0, [r7, #4]
  /* Capture Compare 1 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC1) != RESET)
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	f003 0301 	and.w	r3, r3, #1
 800b8b0:	2b01      	cmp	r3, #1
 800b8b2:	d123      	bne.n	800b8fc <HAL_LPTIM_IRQHandler+0x5e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC1) != RESET)
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	689b      	ldr	r3, [r3, #8]
 800b8ba:	f003 0301 	and.w	r3, r3, #1
 800b8be:	2b01      	cmp	r3, #1
 800b8c0:	d11c      	bne.n	800b8fc <HAL_LPTIM_IRQHandler+0x5e>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC1);
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	2201      	movs	r2, #1
 800b8c8:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_1;
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	2201      	movs	r2, #1
 800b8ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* Input capture event */
      if ((hlptim->Instance->CCMR1 & LPTIM_CCMR1_CC1SEL) != 0x00U)
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8d8:	f003 0301 	and.w	r3, r3, #1
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d005      	beq.n	800b8ec <HAL_LPTIM_IRQHandler+0x4e>
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->IC_CaptureCallback(hlptim);
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b8e6:	6878      	ldr	r0, [r7, #4]
 800b8e8:	4798      	blx	r3
 800b8ea:	e003      	b.n	800b8f4 <HAL_LPTIM_IRQHandler+0x56>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->CompareMatchCallback(hlptim);
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b8f0:	6878      	ldr	r0, [r7, #4]
 800b8f2:	4798      	blx	r3
#else
        HAL_LPTIM_CompareMatchCallback(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      }
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	2200      	movs	r2, #0
 800b8f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
  }

  /* Capture Compare 2 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC2) != RESET)
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b906:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b90a:	d125      	bne.n	800b958 <HAL_LPTIM_IRQHandler+0xba>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC2) != RESET)
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	689b      	ldr	r3, [r3, #8]
 800b912:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b916:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b91a:	d11d      	bne.n	800b958 <HAL_LPTIM_IRQHandler+0xba>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC2);
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b924:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_2;
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	2202      	movs	r2, #2
 800b92a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* Input capture event */
      if ((hlptim->Instance->CCMR1 & LPTIM_CCMR1_CC2SEL) != 0x00U)
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b934:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d005      	beq.n	800b948 <HAL_LPTIM_IRQHandler+0xaa>
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->IC_CaptureCallback(hlptim);
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b942:	6878      	ldr	r0, [r7, #4]
 800b944:	4798      	blx	r3
 800b946:	e003      	b.n	800b950 <HAL_LPTIM_IRQHandler+0xb2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->CompareMatchCallback(hlptim);
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b94c:	6878      	ldr	r0, [r7, #4]
 800b94e:	4798      	blx	r3
#else
        HAL_LPTIM_CompareMatchCallback(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      }
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	2200      	movs	r2, #0
 800b954:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
  }

  /* Over Capture 1 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC1O) != RESET)
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b962:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b966:	d119      	bne.n	800b99c <HAL_LPTIM_IRQHandler+0xfe>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC1O) != RESET)
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	689b      	ldr	r3, [r3, #8]
 800b96e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b972:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b976:	d111      	bne.n	800b99c <HAL_LPTIM_IRQHandler+0xfe>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC1O);
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b980:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_1;
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	2201      	movs	r2, #1
 800b986:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* Over capture event */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->IC_OverCaptureCallback(hlptim);
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b990:	6878      	ldr	r0, [r7, #4]
 800b992:	4798      	blx	r3
#else
      HAL_LPTIM_IC_OverCaptureCallback(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	2200      	movs	r2, #0
 800b998:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
  }

  /* Over Capture 2 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC2O) != RESET)
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b9a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b9aa:	d119      	bne.n	800b9e0 <HAL_LPTIM_IRQHandler+0x142>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC2O) != RESET)
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	689b      	ldr	r3, [r3, #8]
 800b9b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b9b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b9ba:	d111      	bne.n	800b9e0 <HAL_LPTIM_IRQHandler+0x142>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC2O);
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800b9c4:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_2;
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	2202      	movs	r2, #2
 800b9ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* Over capture event */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->IC_OverCaptureCallback(hlptim);
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b9d4:	6878      	ldr	r0, [r7, #4]
 800b9d6:	4798      	blx	r3
#else
      HAL_LPTIM_IC_OverCaptureCallback(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	2200      	movs	r2, #0
 800b9dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	f003 0302 	and.w	r3, r3, #2
 800b9ea:	2b02      	cmp	r3, #2
 800b9ec:	d10e      	bne.n	800ba0c <HAL_LPTIM_IRQHandler+0x16e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	689b      	ldr	r3, [r3, #8]
 800b9f4:	f003 0302 	and.w	r3, r3, #2
 800b9f8:	2b02      	cmp	r3, #2
 800b9fa:	d107      	bne.n	800ba0c <HAL_LPTIM_IRQHandler+0x16e>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	2202      	movs	r2, #2
 800ba02:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ba08:	6878      	ldr	r0, [r7, #4]
 800ba0a:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	f003 0304 	and.w	r3, r3, #4
 800ba16:	2b04      	cmp	r3, #4
 800ba18:	d10e      	bne.n	800ba38 <HAL_LPTIM_IRQHandler+0x19a>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	689b      	ldr	r3, [r3, #8]
 800ba20:	f003 0304 	and.w	r3, r3, #4
 800ba24:	2b04      	cmp	r3, #4
 800ba26:	d107      	bne.n	800ba38 <HAL_LPTIM_IRQHandler+0x19a>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	2204      	movs	r2, #4
 800ba2e:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ba34:	6878      	ldr	r0, [r7, #4]
 800ba36:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMP1OK) != RESET)
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	f003 0308 	and.w	r3, r3, #8
 800ba42:	2b08      	cmp	r3, #8
 800ba44:	d112      	bne.n	800ba6c <HAL_LPTIM_IRQHandler+0x1ce>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMP1OK) != RESET)
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	689b      	ldr	r3, [r3, #8]
 800ba4c:	f003 0308 	and.w	r3, r3, #8
 800ba50:	2b08      	cmp	r3, #8
 800ba52:	d10b      	bne.n	800ba6c <HAL_LPTIM_IRQHandler+0x1ce>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMP1OK);
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	2208      	movs	r2, #8
 800ba5a:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_1;
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	2201      	movs	r2, #1
 800ba60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ba68:	6878      	ldr	r0, [r7, #4]
 800ba6a:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMP2OK) != RESET)
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ba76:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800ba7a:	d114      	bne.n	800baa6 <HAL_LPTIM_IRQHandler+0x208>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMP2OK) != RESET)
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	689b      	ldr	r3, [r3, #8]
 800ba82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ba86:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800ba8a:	d10c      	bne.n	800baa6 <HAL_LPTIM_IRQHandler+0x208>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMP2OK);
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800ba94:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_2;
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	2202      	movs	r2, #2
 800ba9a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800baa2:	6878      	ldr	r0, [r7, #4]
 800baa4:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	f003 0310 	and.w	r3, r3, #16
 800bab0:	2b10      	cmp	r3, #16
 800bab2:	d10e      	bne.n	800bad2 <HAL_LPTIM_IRQHandler+0x234>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	689b      	ldr	r3, [r3, #8]
 800baba:	f003 0310 	and.w	r3, r3, #16
 800babe:	2b10      	cmp	r3, #16
 800bac0:	d107      	bne.n	800bad2 <HAL_LPTIM_IRQHandler+0x234>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	2210      	movs	r2, #16
 800bac8:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bace:	6878      	ldr	r0, [r7, #4]
 800bad0:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	f003 0320 	and.w	r3, r3, #32
 800badc:	2b20      	cmp	r3, #32
 800bade:	d10e      	bne.n	800bafe <HAL_LPTIM_IRQHandler+0x260>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	689b      	ldr	r3, [r3, #8]
 800bae6:	f003 0320 	and.w	r3, r3, #32
 800baea:	2b20      	cmp	r3, #32
 800baec:	d107      	bne.n	800bafe <HAL_LPTIM_IRQHandler+0x260>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	2220      	movs	r2, #32
 800baf4:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bafa:	6878      	ldr	r0, [r7, #4]
 800bafc:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb08:	2b40      	cmp	r3, #64	; 0x40
 800bb0a:	d10e      	bne.n	800bb2a <HAL_LPTIM_IRQHandler+0x28c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	689b      	ldr	r3, [r3, #8]
 800bb12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb16:	2b40      	cmp	r3, #64	; 0x40
 800bb18:	d107      	bne.n	800bb2a <HAL_LPTIM_IRQHandler+0x28c>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	2240      	movs	r2, #64	; 0x40
 800bb20:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb26:	6878      	ldr	r0, [r7, #4]
 800bb28:	4798      	blx	r3
    }
  }

  /* Repetition counter underflowed (or contains zero) and the LPTIM counter
     overflowed */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UPDATE) != RESET)
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb34:	2b80      	cmp	r3, #128	; 0x80
 800bb36:	d10e      	bne.n	800bb56 <HAL_LPTIM_IRQHandler+0x2b8>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UPDATE) != RESET)
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	689b      	ldr	r3, [r3, #8]
 800bb3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb42:	2b80      	cmp	r3, #128	; 0x80
 800bb44:	d107      	bne.n	800bb56 <HAL_LPTIM_IRQHandler+0x2b8>
    {
      /* Clear update event flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UPDATE);
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	2280      	movs	r2, #128	; 0x80
 800bb4c:	605a      	str	r2, [r3, #4]

      /* Update event Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->UpdateEventCallback(hlptim);
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb52:	6878      	ldr	r0, [r7, #4]
 800bb54:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Successful APB bus write to repetition counter register */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_REPOK) != RESET)
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bb64:	d110      	bne.n	800bb88 <HAL_LPTIM_IRQHandler+0x2ea>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_REPOK) != RESET)
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	689b      	ldr	r3, [r3, #8]
 800bb6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bb74:	d108      	bne.n	800bb88 <HAL_LPTIM_IRQHandler+0x2ea>
    {
      /* Clear successful APB bus write to repetition counter flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bb7e:	605a      	str	r2, [r3, #4]

      /* Successful APB bus write to repetition counter Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->RepCounterWriteCallback(hlptim);
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bb84:	6878      	ldr	r0, [r7, #4]
 800bb86:	4798      	blx	r3
#else
      HAL_LPTIM_RepCounterWriteCallback(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 800bb88:	bf00      	nop
 800bb8a:	3708      	adds	r7, #8
 800bb8c:	46bd      	mov	sp, r7
 800bb8e:	bd80      	pop	{r7, pc}

0800bb90 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 800bb90:	b480      	push	{r7}
 800bb92:	b083      	sub	sp, #12
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 800bb98:	bf00      	nop
 800bb9a:	370c      	adds	r7, #12
 800bb9c:	46bd      	mov	sp, r7
 800bb9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba2:	4770      	bx	lr

0800bba4 <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 800bba4:	b480      	push	{r7}
 800bba6:	b083      	sub	sp, #12
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 800bbac:	bf00      	nop
 800bbae:	370c      	adds	r7, #12
 800bbb0:	46bd      	mov	sp, r7
 800bbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb6:	4770      	bx	lr

0800bbb8 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 800bbb8:	b480      	push	{r7}
 800bbba:	b083      	sub	sp, #12
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 800bbc0:	bf00      	nop
 800bbc2:	370c      	adds	r7, #12
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbca:	4770      	bx	lr

0800bbcc <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 800bbcc:	b480      	push	{r7}
 800bbce:	b083      	sub	sp, #12
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 800bbd4:	bf00      	nop
 800bbd6:	370c      	adds	r7, #12
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbde:	4770      	bx	lr

0800bbe0 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 800bbe0:	b480      	push	{r7}
 800bbe2:	b083      	sub	sp, #12
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 800bbe8:	bf00      	nop
 800bbea:	370c      	adds	r7, #12
 800bbec:	46bd      	mov	sp, r7
 800bbee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf2:	4770      	bx	lr

0800bbf4 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 800bbf4:	b480      	push	{r7}
 800bbf6:	b083      	sub	sp, #12
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 800bbfc:	bf00      	nop
 800bbfe:	370c      	adds	r7, #12
 800bc00:	46bd      	mov	sp, r7
 800bc02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc06:	4770      	bx	lr

0800bc08 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 800bc08:	b480      	push	{r7}
 800bc0a:	b083      	sub	sp, #12
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 800bc10:	bf00      	nop
 800bc12:	370c      	adds	r7, #12
 800bc14:	46bd      	mov	sp, r7
 800bc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc1a:	4770      	bx	lr

0800bc1c <HAL_LPTIM_UpdateEventCallback>:
  * @brief Repetition counter underflowed (or contains zero) and LPTIM counter overflowed callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_UpdateEventCallback(LPTIM_HandleTypeDef *hlptim)
{
 800bc1c:	b480      	push	{r7}
 800bc1e:	b083      	sub	sp, #12
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_UpdateEventCallback could be implemented in the user file
   */
}
 800bc24:	bf00      	nop
 800bc26:	370c      	adds	r7, #12
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2e:	4770      	bx	lr

0800bc30 <HAL_LPTIM_RepCounterWriteCallback>:
  * @brief  Successful APB bus write to repetition counter register callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_RepCounterWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 800bc30:	b480      	push	{r7}
 800bc32:	b083      	sub	sp, #12
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_RepCounterWriteCallback could be implemented in the user file
   */
}
 800bc38:	bf00      	nop
 800bc3a:	370c      	adds	r7, #12
 800bc3c:	46bd      	mov	sp, r7
 800bc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc42:	4770      	bx	lr

0800bc44 <HAL_LPTIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_IC_CaptureCallback(LPTIM_HandleTypeDef *hlptim)
{
 800bc44:	b480      	push	{r7}
 800bc46:	b083      	sub	sp, #12
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bc4c:	bf00      	nop
 800bc4e:	370c      	adds	r7, #12
 800bc50:	46bd      	mov	sp, r7
 800bc52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc56:	4770      	bx	lr

0800bc58 <HAL_LPTIM_IC_OverCaptureCallback>:
  * @brief  Over Capture callback in non-blocking mode
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_IC_OverCaptureCallback(LPTIM_HandleTypeDef *hlptim)
{
 800bc58:	b480      	push	{r7}
 800bc5a:	b083      	sub	sp, #12
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_IC_OverCaptureCallback could be implemented in the user file
   */
}
 800bc60:	bf00      	nop
 800bc62:	370c      	adds	r7, #12
 800bc64:	46bd      	mov	sp, r7
 800bc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6a:	4770      	bx	lr

0800bc6c <HAL_LPTIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  hlptim LPTIM IC handle
  * @retval None
  */
__weak void HAL_LPTIM_IC_CaptureHalfCpltCallback(LPTIM_HandleTypeDef *hlptim)
{
 800bc6c:	b480      	push	{r7}
 800bc6e:	b083      	sub	sp, #12
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800bc74:	bf00      	nop
 800bc76:	370c      	adds	r7, #12
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7e:	4770      	bx	lr

0800bc80 <HAL_LPTIM_UpdateEventHalfCpltCallback>:
  * @brief  Update event half complete callback in non-blocking mode
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_UpdateEventHalfCpltCallback(LPTIM_HandleTypeDef *hlptim)
{
 800bc80:	b480      	push	{r7}
 800bc82:	b083      	sub	sp, #12
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_UpdateEventHalfCpltCallback could be implemented in the user file
   */
}
 800bc88:	bf00      	nop
 800bc8a:	370c      	adds	r7, #12
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc92:	4770      	bx	lr

0800bc94 <HAL_LPTIM_ErrorCallback>:
  * @brief  Error callback in non-blocking mode
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_ErrorCallback(LPTIM_HandleTypeDef *hlptim)
{
 800bc94:	b480      	push	{r7}
 800bc96:	b083      	sub	sp, #12
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_ErrorCallback could be implemented in the user file
   */
}
 800bc9c:	bf00      	nop
 800bc9e:	370c      	adds	r7, #12
 800bca0:	46bd      	mov	sp, r7
 800bca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca6:	4770      	bx	lr

0800bca8 <HAL_LPTIM_RegisterCallback>:
  * @retval status
  */
HAL_StatusTypeDef HAL_LPTIM_RegisterCallback(LPTIM_HandleTypeDef        *hlptim,
                                             HAL_LPTIM_CallbackIDTypeDef CallbackID,
                                             pLPTIM_CallbackTypeDef      pCallback)
{
 800bca8:	b480      	push	{r7}
 800bcaa:	b087      	sub	sp, #28
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	60f8      	str	r0, [r7, #12]
 800bcb0:	460b      	mov	r3, r1
 800bcb2:	607a      	str	r2, [r7, #4]
 800bcb4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d101      	bne.n	800bcc4 <HAL_LPTIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 800bcc0:	2301      	movs	r3, #1
 800bcc2:	e08c      	b.n	800bdde <HAL_LPTIM_RegisterCallback+0x136>
  }

  if (hlptim->State == HAL_LPTIM_STATE_READY)
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800bcca:	b2db      	uxtb	r3, r3
 800bccc:	2b01      	cmp	r3, #1
 800bcce:	d16c      	bne.n	800bdaa <HAL_LPTIM_RegisterCallback+0x102>
  {
    switch (CallbackID)
 800bcd0:	7afb      	ldrb	r3, [r7, #11]
 800bcd2:	2b0f      	cmp	r3, #15
 800bcd4:	d866      	bhi.n	800bda4 <HAL_LPTIM_RegisterCallback+0xfc>
 800bcd6:	a201      	add	r2, pc, #4	; (adr r2, 800bcdc <HAL_LPTIM_RegisterCallback+0x34>)
 800bcd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcdc:	0800bd1d 	.word	0x0800bd1d
 800bce0:	0800bd25 	.word	0x0800bd25
 800bce4:	0800bd2d 	.word	0x0800bd2d
 800bce8:	0800bd35 	.word	0x0800bd35
 800bcec:	0800bd3d 	.word	0x0800bd3d
 800bcf0:	0800bd45 	.word	0x0800bd45
 800bcf4:	0800bd4d 	.word	0x0800bd4d
 800bcf8:	0800bd55 	.word	0x0800bd55
 800bcfc:	0800bd5d 	.word	0x0800bd5d
 800bd00:	0800bd65 	.word	0x0800bd65
 800bd04:	0800bd6d 	.word	0x0800bd6d
 800bd08:	0800bd75 	.word	0x0800bd75
 800bd0c:	0800bd7d 	.word	0x0800bd7d
 800bd10:	0800bd87 	.word	0x0800bd87
 800bd14:	0800bd91 	.word	0x0800bd91
 800bd18:	0800bd9b 	.word	0x0800bd9b
    {
      case HAL_LPTIM_MSPINIT_CB_ID :
        hlptim->MspInitCallback = pCallback;
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	687a      	ldr	r2, [r7, #4]
 800bd20:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800bd22:	e05b      	b.n	800bddc <HAL_LPTIM_RegisterCallback+0x134>

      case HAL_LPTIM_MSPDEINIT_CB_ID :
        hlptim->MspDeInitCallback = pCallback;
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	687a      	ldr	r2, [r7, #4]
 800bd28:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800bd2a:	e057      	b.n	800bddc <HAL_LPTIM_RegisterCallback+0x134>

      case HAL_LPTIM_COMPARE_MATCH_CB_ID :
        hlptim->CompareMatchCallback = pCallback;
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	687a      	ldr	r2, [r7, #4]
 800bd30:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 800bd32:	e053      	b.n	800bddc <HAL_LPTIM_RegisterCallback+0x134>

      case HAL_LPTIM_AUTORELOAD_MATCH_CB_ID :
        hlptim->AutoReloadMatchCallback = pCallback;
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	687a      	ldr	r2, [r7, #4]
 800bd38:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 800bd3a:	e04f      	b.n	800bddc <HAL_LPTIM_RegisterCallback+0x134>

      case HAL_LPTIM_TRIGGER_CB_ID :
        hlptim->TriggerCallback = pCallback;
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	687a      	ldr	r2, [r7, #4]
 800bd40:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800bd42:	e04b      	b.n	800bddc <HAL_LPTIM_RegisterCallback+0x134>

      case HAL_LPTIM_COMPARE_WRITE_CB_ID :
        hlptim->CompareWriteCallback = pCallback;
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	687a      	ldr	r2, [r7, #4]
 800bd48:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 800bd4a:	e047      	b.n	800bddc <HAL_LPTIM_RegisterCallback+0x134>

      case HAL_LPTIM_AUTORELOAD_WRITE_CB_ID :
        hlptim->AutoReloadWriteCallback = pCallback;
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	687a      	ldr	r2, [r7, #4]
 800bd50:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 800bd52:	e043      	b.n	800bddc <HAL_LPTIM_RegisterCallback+0x134>

      case HAL_LPTIM_DIRECTION_UP_CB_ID :
        hlptim->DirectionUpCallback = pCallback;
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	687a      	ldr	r2, [r7, #4]
 800bd58:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800bd5a:	e03f      	b.n	800bddc <HAL_LPTIM_RegisterCallback+0x134>

      case HAL_LPTIM_DIRECTION_DOWN_CB_ID :
        hlptim->DirectionDownCallback = pCallback;
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	687a      	ldr	r2, [r7, #4]
 800bd60:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800bd62:	e03b      	b.n	800bddc <HAL_LPTIM_RegisterCallback+0x134>

      case HAL_LPTIM_UPDATE_EVENT_CB_ID :
        hlptim->UpdateEventCallback = pCallback;
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	687a      	ldr	r2, [r7, #4]
 800bd68:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 800bd6a:	e037      	b.n	800bddc <HAL_LPTIM_RegisterCallback+0x134>

      case HAL_LPTIM_REP_COUNTER_WRITE_CB_ID :
        hlptim->RepCounterWriteCallback = pCallback;
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	687a      	ldr	r2, [r7, #4]
 800bd70:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 800bd72:	e033      	b.n	800bddc <HAL_LPTIM_RegisterCallback+0x134>

      case HAL_LPTIM_UPDATE_EVENT_HALF_CB_ID :
        hlptim->UpdateEventHalfCpltCallback = pCallback;
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	687a      	ldr	r2, [r7, #4]
 800bd78:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 800bd7a:	e02f      	b.n	800bddc <HAL_LPTIM_RegisterCallback+0x134>

      case HAL_LPTIM_ERROR_CB_ID :
        hlptim->ErrorCallback = pCallback;
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	687a      	ldr	r2, [r7, #4]
 800bd80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 800bd84:	e02a      	b.n	800bddc <HAL_LPTIM_RegisterCallback+0x134>

      case HAL_LPTIM_IC_CAPTURE_CB_ID :
        hlptim->IC_CaptureCallback = pCallback;
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	687a      	ldr	r2, [r7, #4]
 800bd8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 800bd8e:	e025      	b.n	800bddc <HAL_LPTIM_RegisterCallback+0x134>

      case HAL_LPTIM_IC_CAPTURE_HALF_CB_ID :
        hlptim->IC_CaptureHalfCpltCallback = pCallback;
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	687a      	ldr	r2, [r7, #4]
 800bd94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 800bd98:	e020      	b.n	800bddc <HAL_LPTIM_RegisterCallback+0x134>

      case HAL_LPTIM_OVER_CAPTURE_CB_ID :
        hlptim->IC_OverCaptureCallback = pCallback;
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	687a      	ldr	r2, [r7, #4]
 800bd9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 800bda2:	e01b      	b.n	800bddc <HAL_LPTIM_RegisterCallback+0x134>

      default :
        /* Return error status */
        status =  HAL_ERROR;
 800bda4:	2301      	movs	r3, #1
 800bda6:	75fb      	strb	r3, [r7, #23]
        break;
 800bda8:	e018      	b.n	800bddc <HAL_LPTIM_RegisterCallback+0x134>
    }
  }
  else if (hlptim->State == HAL_LPTIM_STATE_RESET)
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800bdb0:	b2db      	uxtb	r3, r3
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d110      	bne.n	800bdd8 <HAL_LPTIM_RegisterCallback+0x130>
  {
    switch (CallbackID)
 800bdb6:	7afb      	ldrb	r3, [r7, #11]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d002      	beq.n	800bdc2 <HAL_LPTIM_RegisterCallback+0x11a>
 800bdbc:	2b01      	cmp	r3, #1
 800bdbe:	d004      	beq.n	800bdca <HAL_LPTIM_RegisterCallback+0x122>
 800bdc0:	e007      	b.n	800bdd2 <HAL_LPTIM_RegisterCallback+0x12a>
    {
      case HAL_LPTIM_MSPINIT_CB_ID :
        hlptim->MspInitCallback = pCallback;
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	687a      	ldr	r2, [r7, #4]
 800bdc6:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800bdc8:	e008      	b.n	800bddc <HAL_LPTIM_RegisterCallback+0x134>

      case HAL_LPTIM_MSPDEINIT_CB_ID :
        hlptim->MspDeInitCallback = pCallback;
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	687a      	ldr	r2, [r7, #4]
 800bdce:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800bdd0:	e004      	b.n	800bddc <HAL_LPTIM_RegisterCallback+0x134>

      default :
        /* Return error status */
        status =  HAL_ERROR;
 800bdd2:	2301      	movs	r3, #1
 800bdd4:	75fb      	strb	r3, [r7, #23]
        break;
 800bdd6:	e001      	b.n	800bddc <HAL_LPTIM_RegisterCallback+0x134>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 800bdd8:	2301      	movs	r3, #1
 800bdda:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800bddc:	7dfb      	ldrb	r3, [r7, #23]
}
 800bdde:	4618      	mov	r0, r3
 800bde0:	371c      	adds	r7, #28
 800bde2:	46bd      	mov	sp, r7
 800bde4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde8:	4770      	bx	lr
 800bdea:	bf00      	nop

0800bdec <LPTIM_ResetCallback>:
  * @param  lptim pointer to a LPTIM_HandleTypeDef structure that contains
  *                the configuration information for LPTIM module.
  * @retval None
  */
static void LPTIM_ResetCallback(LPTIM_HandleTypeDef *lptim)
{
 800bdec:	b480      	push	{r7}
 800bdee:	b083      	sub	sp, #12
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
  /* Reset the LPTIM callback to the legacy weak callbacks */
  lptim->CompareMatchCallback    = HAL_LPTIM_CompareMatchCallback;
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	4a19      	ldr	r2, [pc, #100]	; (800be5c <LPTIM_ResetCallback+0x70>)
 800bdf8:	659a      	str	r2, [r3, #88]	; 0x58
  lptim->AutoReloadMatchCallback = HAL_LPTIM_AutoReloadMatchCallback;
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	4a18      	ldr	r2, [pc, #96]	; (800be60 <LPTIM_ResetCallback+0x74>)
 800bdfe:	65da      	str	r2, [r3, #92]	; 0x5c
  lptim->TriggerCallback         = HAL_LPTIM_TriggerCallback;
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	4a18      	ldr	r2, [pc, #96]	; (800be64 <LPTIM_ResetCallback+0x78>)
 800be04:	661a      	str	r2, [r3, #96]	; 0x60
  lptim->CompareWriteCallback    = HAL_LPTIM_CompareWriteCallback;
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	4a17      	ldr	r2, [pc, #92]	; (800be68 <LPTIM_ResetCallback+0x7c>)
 800be0a:	665a      	str	r2, [r3, #100]	; 0x64
  lptim->AutoReloadWriteCallback = HAL_LPTIM_AutoReloadWriteCallback;
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	4a17      	ldr	r2, [pc, #92]	; (800be6c <LPTIM_ResetCallback+0x80>)
 800be10:	669a      	str	r2, [r3, #104]	; 0x68
  lptim->DirectionUpCallback     = HAL_LPTIM_DirectionUpCallback;
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	4a16      	ldr	r2, [pc, #88]	; (800be70 <LPTIM_ResetCallback+0x84>)
 800be16:	66da      	str	r2, [r3, #108]	; 0x6c
  lptim->DirectionDownCallback   = HAL_LPTIM_DirectionDownCallback;
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	4a16      	ldr	r2, [pc, #88]	; (800be74 <LPTIM_ResetCallback+0x88>)
 800be1c:	671a      	str	r2, [r3, #112]	; 0x70
  lptim->UpdateEventCallback = HAL_LPTIM_UpdateEventCallback;
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	4a15      	ldr	r2, [pc, #84]	; (800be78 <LPTIM_ResetCallback+0x8c>)
 800be22:	675a      	str	r2, [r3, #116]	; 0x74
  lptim->RepCounterWriteCallback = HAL_LPTIM_RepCounterWriteCallback;
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	4a15      	ldr	r2, [pc, #84]	; (800be7c <LPTIM_ResetCallback+0x90>)
 800be28:	679a      	str	r2, [r3, #120]	; 0x78
  lptim->UpdateEventHalfCpltCallback = HAL_LPTIM_UpdateEventHalfCpltCallback;
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	4a14      	ldr	r2, [pc, #80]	; (800be80 <LPTIM_ResetCallback+0x94>)
 800be2e:	67da      	str	r2, [r3, #124]	; 0x7c
  lptim->IC_CaptureCallback      = HAL_LPTIM_IC_CaptureCallback;
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	4a14      	ldr	r2, [pc, #80]	; (800be84 <LPTIM_ResetCallback+0x98>)
 800be34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  lptim->IC_CaptureHalfCpltCallback = HAL_LPTIM_IC_CaptureHalfCpltCallback;
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	4a13      	ldr	r2, [pc, #76]	; (800be88 <LPTIM_ResetCallback+0x9c>)
 800be3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  lptim->IC_OverCaptureCallback  = HAL_LPTIM_IC_OverCaptureCallback;
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	4a12      	ldr	r2, [pc, #72]	; (800be8c <LPTIM_ResetCallback+0xa0>)
 800be44:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  lptim->ErrorCallback           = HAL_LPTIM_ErrorCallback;
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	4a11      	ldr	r2, [pc, #68]	; (800be90 <LPTIM_ResetCallback+0xa4>)
 800be4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 800be50:	bf00      	nop
 800be52:	370c      	adds	r7, #12
 800be54:	46bd      	mov	sp, r7
 800be56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be5a:	4770      	bx	lr
 800be5c:	0800bb91 	.word	0x0800bb91
 800be60:	0800bba5 	.word	0x0800bba5
 800be64:	0800bbb9 	.word	0x0800bbb9
 800be68:	0800bbcd 	.word	0x0800bbcd
 800be6c:	0800bbe1 	.word	0x0800bbe1
 800be70:	0800bbf5 	.word	0x0800bbf5
 800be74:	0800bc09 	.word	0x0800bc09
 800be78:	0800bc1d 	.word	0x0800bc1d
 800be7c:	0800bc31 	.word	0x0800bc31
 800be80:	0800bc81 	.word	0x0800bc81
 800be84:	0800bc45 	.word	0x0800bc45
 800be88:	0800bc6d 	.word	0x0800bc6d
 800be8c:	0800bc59 	.word	0x0800bc59
 800be90:	0800bc95 	.word	0x0800bc95

0800be94 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(const LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 800be94:	b480      	push	{r7}
 800be96:	b085      	sub	sp, #20
 800be98:	af00      	add	r7, sp, #0
 800be9a:	6078      	str	r0, [r7, #4]
 800be9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 800be9e:	2300      	movs	r3, #0
 800bea0:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 800bea2:	4b12      	ldr	r3, [pc, #72]	; (800beec <LPTIM_WaitForFlag+0x58>)
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	4a12      	ldr	r2, [pc, #72]	; (800bef0 <LPTIM_WaitForFlag+0x5c>)
 800bea8:	fba2 2303 	umull	r2, r3, r2, r3
 800beac:	0b9b      	lsrs	r3, r3, #14
 800beae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800beb2:	fb02 f303 	mul.w	r3, r2, r3
 800beb6:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 800beb8:	68bb      	ldr	r3, [r7, #8]
 800beba:	3b01      	subs	r3, #1
 800bebc:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 800bebe:	68bb      	ldr	r3, [r7, #8]
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d101      	bne.n	800bec8 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 800bec4:	2303      	movs	r3, #3
 800bec6:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	681a      	ldr	r2, [r3, #0]
 800bece:	683b      	ldr	r3, [r7, #0]
 800bed0:	4013      	ands	r3, r2
 800bed2:	683a      	ldr	r2, [r7, #0]
 800bed4:	429a      	cmp	r2, r3
 800bed6:	d002      	beq.n	800bede <LPTIM_WaitForFlag+0x4a>
 800bed8:	68bb      	ldr	r3, [r7, #8]
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d1ec      	bne.n	800beb8 <LPTIM_WaitForFlag+0x24>

  return result;
 800bede:	7bfb      	ldrb	r3, [r7, #15]
}
 800bee0:	4618      	mov	r0, r3
 800bee2:	3714      	adds	r7, #20
 800bee4:	46bd      	mov	sp, r7
 800bee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beea:	4770      	bx	lr
 800beec:	200000f0 	.word	0x200000f0
 800bef0:	d1b71759 	.word	0xd1b71759

0800bef4 <LPTIM_OC1_SetConfig>:
  *                the configuration information for LPTIM module.
  * @param  sConfig The output configuration structure
  * @retval None
  */
static HAL_StatusTypeDef LPTIM_OC1_SetConfig(LPTIM_HandleTypeDef *hlptim, const LPTIM_OC_ConfigTypeDef *sConfig)
{
 800bef4:	b580      	push	{r7, lr}
 800bef6:	b084      	sub	sp, #16
 800bef8:	af00      	add	r7, sp, #0
 800befa:	6078      	str	r0, [r7, #4]
 800befc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpcfgr;

  tmpccmr1 = hlptim->Instance->CCMR1;
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf04:	60fb      	str	r3, [r7, #12]
  tmpccmr1 &= ~(LPTIM_CCMR1_CC1P_Msk | LPTIM_CCMR1_CC1SEL_Msk);
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	f023 030d 	bic.w	r3, r3, #13
 800bf0c:	60fb      	str	r3, [r7, #12]

  if (hlptim->Instance == LPTIM4)
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	4a2a      	ldr	r2, [pc, #168]	; (800bfbc <LPTIM_OC1_SetConfig+0xc8>)
 800bf14:	4293      	cmp	r3, r2
 800bf16:	d112      	bne.n	800bf3e <LPTIM_OC1_SetConfig+0x4a>
  {
    tmpcfgr = hlptim->Instance->CFGR;
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	68db      	ldr	r3, [r3, #12]
 800bf1e:	60bb      	str	r3, [r7, #8]
    tmpcfgr &= ~LPTIM_CFGR_WAVPOL_Msk;
 800bf20:	68bb      	ldr	r3, [r7, #8]
 800bf22:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bf26:	60bb      	str	r3, [r7, #8]
    tmpcfgr |= sConfig->OCPolarity << LPTIM_CFGR_WAVPOL_Pos;
 800bf28:	683b      	ldr	r3, [r7, #0]
 800bf2a:	685b      	ldr	r3, [r3, #4]
 800bf2c:	055b      	lsls	r3, r3, #21
 800bf2e:	68ba      	ldr	r2, [r7, #8]
 800bf30:	4313      	orrs	r3, r2
 800bf32:	60bb      	str	r3, [r7, #8]

    /* Write to CFGR register */
    hlptim->Instance->CFGR = tmpcfgr;
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	68ba      	ldr	r2, [r7, #8]
 800bf3a:	60da      	str	r2, [r3, #12]
 800bf3c:	e005      	b.n	800bf4a <LPTIM_OC1_SetConfig+0x56>
  }
  else
  {
    tmpccmr1 |= sConfig->OCPolarity << LPTIM_CCMR1_CC1P_Pos;
 800bf3e:	683b      	ldr	r3, [r7, #0]
 800bf40:	685b      	ldr	r3, [r3, #4]
 800bf42:	009b      	lsls	r3, r3, #2
 800bf44:	68fa      	ldr	r2, [r7, #12]
 800bf46:	4313      	orrs	r3, r2
 800bf48:	60fb      	str	r3, [r7, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	691a      	ldr	r2, [r3, #16]
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	f042 0201 	orr.w	r2, r2, #1
 800bf58:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMP1OK);
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	2208      	movs	r2, #8
 800bf60:	605a      	str	r2, [r3, #4]

  /* Write to CCR1 register */
  __HAL_LPTIM_COMPARE_SET(hlptim, LPTIM_CHANNEL_1, sConfig->Pulse);
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	683a      	ldr	r2, [r7, #0]
 800bf68:	6812      	ldr	r2, [r2, #0]
 800bf6a:	615a      	str	r2, [r3, #20]

  /* Wait for the completion of the write operation to the LPTIM_CCR1 register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMP1OK) == HAL_TIMEOUT)
 800bf6c:	2108      	movs	r1, #8
 800bf6e:	6878      	ldr	r0, [r7, #4]
 800bf70:	f7ff ff90 	bl	800be94 <LPTIM_WaitForFlag>
 800bf74:	4603      	mov	r3, r0
 800bf76:	2b03      	cmp	r3, #3
 800bf78:	d101      	bne.n	800bf7e <LPTIM_OC1_SetConfig+0x8a>
  {
    return HAL_TIMEOUT;
 800bf7a:	2303      	movs	r3, #3
 800bf7c:	e01a      	b.n	800bfb4 <LPTIM_OC1_SetConfig+0xc0>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf84:	f003 0302 	and.w	r3, r3, #2
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d10e      	bne.n	800bfaa <LPTIM_OC1_SetConfig+0xb6>
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d107      	bne.n	800bfaa <LPTIM_OC1_SetConfig+0xb6>
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	691a      	ldr	r2, [r3, #16]
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	f022 0201 	bic.w	r2, r2, #1
 800bfa8:	611a      	str	r2, [r3, #16]

  /* Write to CCMR1 register */
  hlptim->Instance->CCMR1 = tmpccmr1;
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	68fa      	ldr	r2, [r7, #12]
 800bfb0:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800bfb2:	2300      	movs	r3, #0
}
 800bfb4:	4618      	mov	r0, r3
 800bfb6:	3710      	adds	r7, #16
 800bfb8:	46bd      	mov	sp, r7
 800bfba:	bd80      	pop	{r7, pc}
 800bfbc:	46004c00 	.word	0x46004c00

0800bfc0 <LPTIM_OC2_SetConfig>:
  *                the configuration information for LPTIM module.
  * @param  sConfig The output configuration structure
  * @retval None
  */
static HAL_StatusTypeDef LPTIM_OC2_SetConfig(LPTIM_HandleTypeDef *hlptim, const LPTIM_OC_ConfigTypeDef *sConfig)
{
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b084      	sub	sp, #16
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	6078      	str	r0, [r7, #4]
 800bfc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr1;

  tmpccmr1 = hlptim->Instance->CCMR1;
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfd0:	60fb      	str	r3, [r7, #12]
  tmpccmr1 &= ~(LPTIM_CCMR1_CC2P_Msk | LPTIM_CCMR1_CC2SEL_Msk);
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 800bfd8:	60fb      	str	r3, [r7, #12]
  tmpccmr1 |= sConfig->OCPolarity << LPTIM_CCMR1_CC2P_Pos;
 800bfda:	683b      	ldr	r3, [r7, #0]
 800bfdc:	685b      	ldr	r3, [r3, #4]
 800bfde:	049b      	lsls	r3, r3, #18
 800bfe0:	68fa      	ldr	r2, [r7, #12]
 800bfe2:	4313      	orrs	r3, r2
 800bfe4:	60fb      	str	r3, [r7, #12]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	691a      	ldr	r2, [r3, #16]
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	f042 0201 	orr.w	r2, r2, #1
 800bff4:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMP2OK);
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800bffe:	605a      	str	r2, [r3, #4]

  /* Write to CCR2 register */
  __HAL_LPTIM_COMPARE_SET(hlptim, LPTIM_CHANNEL_2, sConfig->Pulse);
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	683a      	ldr	r2, [r7, #0]
 800c006:	6812      	ldr	r2, [r2, #0]
 800c008:	635a      	str	r2, [r3, #52]	; 0x34

  /* Wait for the completion of the write operation to the LPTIM_CCR2 register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMP2OK) != HAL_OK)
 800c00a:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800c00e:	6878      	ldr	r0, [r7, #4]
 800c010:	f7ff ff40 	bl	800be94 <LPTIM_WaitForFlag>
 800c014:	4603      	mov	r3, r0
 800c016:	2b00      	cmp	r3, #0
 800c018:	d001      	beq.n	800c01e <LPTIM_OC2_SetConfig+0x5e>
  {
    return HAL_TIMEOUT;
 800c01a:	2303      	movs	r3, #3
 800c01c:	e01a      	b.n	800c054 <LPTIM_OC2_SetConfig+0x94>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c024:	f003 0302 	and.w	r3, r3, #2
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d10e      	bne.n	800c04a <LPTIM_OC2_SetConfig+0x8a>
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c036:	2b00      	cmp	r3, #0
 800c038:	d107      	bne.n	800c04a <LPTIM_OC2_SetConfig+0x8a>
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	691a      	ldr	r2, [r3, #16]
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	f022 0201 	bic.w	r2, r2, #1
 800c048:	611a      	str	r2, [r3, #16]

  /* Write to CCMR1 register */
  hlptim->Instance->CCMR1 = tmpccmr1;
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	68fa      	ldr	r2, [r7, #12]
 800c050:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800c052:	2300      	movs	r3, #0
}
 800c054:	4618      	mov	r0, r3
 800c056:	3710      	adds	r7, #16
 800c058:	46bd      	mov	sp, r7
 800c05a:	bd80      	pop	{r7, pc}

0800c05c <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800c05c:	b480      	push	{r7}
 800c05e:	b085      	sub	sp, #20
 800c060:	af00      	add	r7, sp, #0
 800c062:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 800c064:	4b39      	ldr	r3, [pc, #228]	; (800c14c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800c066:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c068:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c06c:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800c06e:	68ba      	ldr	r2, [r7, #8]
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	429a      	cmp	r2, r3
 800c074:	d10b      	bne.n	800c08e <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c07c:	d905      	bls.n	800c08a <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800c07e:	4b33      	ldr	r3, [pc, #204]	; (800c14c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800c080:	68db      	ldr	r3, [r3, #12]
 800c082:	4a32      	ldr	r2, [pc, #200]	; (800c14c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800c084:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c088:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 800c08a:	2300      	movs	r3, #0
 800c08c:	e057      	b.n	800c13e <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c094:	d90a      	bls.n	800c0ac <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 800c096:	4b2d      	ldr	r3, [pc, #180]	; (800c14c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800c098:	68db      	ldr	r3, [r3, #12]
 800c09a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	4313      	orrs	r3, r2
 800c0a2:	4a2a      	ldr	r2, [pc, #168]	; (800c14c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800c0a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c0a8:	60d3      	str	r3, [r2, #12]
 800c0aa:	e007      	b.n	800c0bc <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 800c0ac:	4b27      	ldr	r3, [pc, #156]	; (800c14c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800c0ae:	68db      	ldr	r3, [r3, #12]
 800c0b0:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800c0b4:	4925      	ldr	r1, [pc, #148]	; (800c14c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	4313      	orrs	r3, r2
 800c0ba:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800c0bc:	4b24      	ldr	r3, [pc, #144]	; (800c150 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	4a24      	ldr	r2, [pc, #144]	; (800c154 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800c0c2:	fba2 2303 	umull	r2, r3, r2, r3
 800c0c6:	099b      	lsrs	r3, r3, #6
 800c0c8:	2232      	movs	r2, #50	; 0x32
 800c0ca:	fb02 f303 	mul.w	r3, r2, r3
 800c0ce:	4a21      	ldr	r2, [pc, #132]	; (800c154 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800c0d0:	fba2 2303 	umull	r2, r3, r2, r3
 800c0d4:	099b      	lsrs	r3, r3, #6
 800c0d6:	3301      	adds	r3, #1
 800c0d8:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800c0da:	e002      	b.n	800c0e2 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	3b01      	subs	r3, #1
 800c0e0:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800c0e2:	4b1a      	ldr	r3, [pc, #104]	; (800c14c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800c0e4:	68db      	ldr	r3, [r3, #12]
 800c0e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d102      	bne.n	800c0f4 <HAL_PWREx_ControlVoltageScaling+0x98>
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d1f3      	bne.n	800c0dc <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d01b      	beq.n	800c132 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800c0fa:	4b15      	ldr	r3, [pc, #84]	; (800c150 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	4a15      	ldr	r2, [pc, #84]	; (800c154 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800c100:	fba2 2303 	umull	r2, r3, r2, r3
 800c104:	099b      	lsrs	r3, r3, #6
 800c106:	2232      	movs	r2, #50	; 0x32
 800c108:	fb02 f303 	mul.w	r3, r2, r3
 800c10c:	4a11      	ldr	r2, [pc, #68]	; (800c154 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800c10e:	fba2 2303 	umull	r2, r3, r2, r3
 800c112:	099b      	lsrs	r3, r3, #6
 800c114:	3301      	adds	r3, #1
 800c116:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800c118:	e002      	b.n	800c120 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	3b01      	subs	r3, #1
 800c11e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800c120:	4b0a      	ldr	r3, [pc, #40]	; (800c14c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800c122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c124:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d102      	bne.n	800c132 <HAL_PWREx_ControlVoltageScaling+0xd6>
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d1f3      	bne.n	800c11a <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	2b00      	cmp	r3, #0
 800c136:	d101      	bne.n	800c13c <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 800c138:	2303      	movs	r3, #3
 800c13a:	e000      	b.n	800c13e <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 800c13c:	2300      	movs	r3, #0
}
 800c13e:	4618      	mov	r0, r3
 800c140:	3714      	adds	r7, #20
 800c142:	46bd      	mov	sp, r7
 800c144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c148:	4770      	bx	lr
 800c14a:	bf00      	nop
 800c14c:	46020800 	.word	0x46020800
 800c150:	200000f0 	.word	0x200000f0
 800c154:	10624dd3 	.word	0x10624dd3

0800c158 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800c158:	b480      	push	{r7}
 800c15a:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 800c15c:	4b04      	ldr	r3, [pc, #16]	; (800c170 <HAL_PWREx_GetVoltageRange+0x18>)
 800c15e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c160:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 800c164:	4618      	mov	r0, r3
 800c166:	46bd      	mov	sp, r7
 800c168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c16c:	4770      	bx	lr
 800c16e:	bf00      	nop
 800c170:	46020800 	.word	0x46020800

0800c174 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800c174:	b480      	push	{r7}
 800c176:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 800c178:	4b05      	ldr	r3, [pc, #20]	; (800c190 <HAL_PWREx_EnableVddIO2+0x1c>)
 800c17a:	691b      	ldr	r3, [r3, #16]
 800c17c:	4a04      	ldr	r2, [pc, #16]	; (800c190 <HAL_PWREx_EnableVddIO2+0x1c>)
 800c17e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c182:	6113      	str	r3, [r2, #16]
}
 800c184:	bf00      	nop
 800c186:	46bd      	mov	sp, r7
 800c188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c18c:	4770      	bx	lr
 800c18e:	bf00      	nop
 800c190:	46020800 	.word	0x46020800

0800c194 <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800c194:	b480      	push	{r7}
 800c196:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 800c198:	4b05      	ldr	r3, [pc, #20]	; (800c1b0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800c19a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c19c:	4a04      	ldr	r2, [pc, #16]	; (800c1b0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800c19e:	f043 0301 	orr.w	r3, r3, #1
 800c1a2:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 800c1a4:	bf00      	nop
 800c1a6:	46bd      	mov	sp, r7
 800c1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ac:	4770      	bx	lr
 800c1ae:	bf00      	nop
 800c1b0:	46020800 	.word	0x46020800

0800c1b4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 800c1b4:	b580      	push	{r7, lr}
 800c1b6:	b08e      	sub	sp, #56	; 0x38
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 800c1bc:	2300      	movs	r3, #0
 800c1be:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d102      	bne.n	800c1ce <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800c1c8:	2301      	movs	r3, #1
 800c1ca:	f000 bec8 	b.w	800cf5e <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c1ce:	4b99      	ldr	r3, [pc, #612]	; (800c434 <HAL_RCC_OscConfig+0x280>)
 800c1d0:	69db      	ldr	r3, [r3, #28]
 800c1d2:	f003 030c 	and.w	r3, r3, #12
 800c1d6:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c1d8:	4b96      	ldr	r3, [pc, #600]	; (800c434 <HAL_RCC_OscConfig+0x280>)
 800c1da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1dc:	f003 0303 	and.w	r3, r3, #3
 800c1e0:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	f003 0310 	and.w	r3, r3, #16
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	f000 816c 	beq.w	800c4c8 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800c1f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d007      	beq.n	800c206 <HAL_RCC_OscConfig+0x52>
 800c1f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1f8:	2b0c      	cmp	r3, #12
 800c1fa:	f040 80de 	bne.w	800c3ba <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800c1fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c200:	2b01      	cmp	r3, #1
 800c202:	f040 80da 	bne.w	800c3ba <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	69db      	ldr	r3, [r3, #28]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d102      	bne.n	800c214 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 800c20e:	2301      	movs	r3, #1
 800c210:	f000 bea5 	b.w	800cf5e <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c218:	4b86      	ldr	r3, [pc, #536]	; (800c434 <HAL_RCC_OscConfig+0x280>)
 800c21a:	689b      	ldr	r3, [r3, #8]
 800c21c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c220:	2b00      	cmp	r3, #0
 800c222:	d004      	beq.n	800c22e <HAL_RCC_OscConfig+0x7a>
 800c224:	4b83      	ldr	r3, [pc, #524]	; (800c434 <HAL_RCC_OscConfig+0x280>)
 800c226:	689b      	ldr	r3, [r3, #8]
 800c228:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c22c:	e005      	b.n	800c23a <HAL_RCC_OscConfig+0x86>
 800c22e:	4b81      	ldr	r3, [pc, #516]	; (800c434 <HAL_RCC_OscConfig+0x280>)
 800c230:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c234:	041b      	lsls	r3, r3, #16
 800c236:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c23a:	4293      	cmp	r3, r2
 800c23c:	d255      	bcs.n	800c2ea <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800c23e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c240:	2b00      	cmp	r3, #0
 800c242:	d10a      	bne.n	800c25a <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c248:	4618      	mov	r0, r3
 800c24a:	f001 f9d9 	bl	800d600 <RCC_SetFlashLatencyFromMSIRange>
 800c24e:	4603      	mov	r3, r0
 800c250:	2b00      	cmp	r3, #0
 800c252:	d002      	beq.n	800c25a <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 800c254:	2301      	movs	r3, #1
 800c256:	f000 be82 	b.w	800cf5e <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800c25a:	4b76      	ldr	r3, [pc, #472]	; (800c434 <HAL_RCC_OscConfig+0x280>)
 800c25c:	689b      	ldr	r3, [r3, #8]
 800c25e:	4a75      	ldr	r2, [pc, #468]	; (800c434 <HAL_RCC_OscConfig+0x280>)
 800c260:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c264:	6093      	str	r3, [r2, #8]
 800c266:	4b73      	ldr	r3, [pc, #460]	; (800c434 <HAL_RCC_OscConfig+0x280>)
 800c268:	689b      	ldr	r3, [r3, #8]
 800c26a:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c272:	4970      	ldr	r1, [pc, #448]	; (800c434 <HAL_RCC_OscConfig+0x280>)
 800c274:	4313      	orrs	r3, r2
 800c276:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c27c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800c280:	d309      	bcc.n	800c296 <HAL_RCC_OscConfig+0xe2>
 800c282:	4b6c      	ldr	r3, [pc, #432]	; (800c434 <HAL_RCC_OscConfig+0x280>)
 800c284:	68db      	ldr	r3, [r3, #12]
 800c286:	f023 021f 	bic.w	r2, r3, #31
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	6a1b      	ldr	r3, [r3, #32]
 800c28e:	4969      	ldr	r1, [pc, #420]	; (800c434 <HAL_RCC_OscConfig+0x280>)
 800c290:	4313      	orrs	r3, r2
 800c292:	60cb      	str	r3, [r1, #12]
 800c294:	e07e      	b.n	800c394 <HAL_RCC_OscConfig+0x1e0>
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	da0a      	bge.n	800c2b4 <HAL_RCC_OscConfig+0x100>
 800c29e:	4b65      	ldr	r3, [pc, #404]	; (800c434 <HAL_RCC_OscConfig+0x280>)
 800c2a0:	68db      	ldr	r3, [r3, #12]
 800c2a2:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	6a1b      	ldr	r3, [r3, #32]
 800c2aa:	015b      	lsls	r3, r3, #5
 800c2ac:	4961      	ldr	r1, [pc, #388]	; (800c434 <HAL_RCC_OscConfig+0x280>)
 800c2ae:	4313      	orrs	r3, r2
 800c2b0:	60cb      	str	r3, [r1, #12]
 800c2b2:	e06f      	b.n	800c394 <HAL_RCC_OscConfig+0x1e0>
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c2bc:	d30a      	bcc.n	800c2d4 <HAL_RCC_OscConfig+0x120>
 800c2be:	4b5d      	ldr	r3, [pc, #372]	; (800c434 <HAL_RCC_OscConfig+0x280>)
 800c2c0:	68db      	ldr	r3, [r3, #12]
 800c2c2:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	6a1b      	ldr	r3, [r3, #32]
 800c2ca:	029b      	lsls	r3, r3, #10
 800c2cc:	4959      	ldr	r1, [pc, #356]	; (800c434 <HAL_RCC_OscConfig+0x280>)
 800c2ce:	4313      	orrs	r3, r2
 800c2d0:	60cb      	str	r3, [r1, #12]
 800c2d2:	e05f      	b.n	800c394 <HAL_RCC_OscConfig+0x1e0>
 800c2d4:	4b57      	ldr	r3, [pc, #348]	; (800c434 <HAL_RCC_OscConfig+0x280>)
 800c2d6:	68db      	ldr	r3, [r3, #12]
 800c2d8:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	6a1b      	ldr	r3, [r3, #32]
 800c2e0:	03db      	lsls	r3, r3, #15
 800c2e2:	4954      	ldr	r1, [pc, #336]	; (800c434 <HAL_RCC_OscConfig+0x280>)
 800c2e4:	4313      	orrs	r3, r2
 800c2e6:	60cb      	str	r3, [r1, #12]
 800c2e8:	e054      	b.n	800c394 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800c2ea:	4b52      	ldr	r3, [pc, #328]	; (800c434 <HAL_RCC_OscConfig+0x280>)
 800c2ec:	689b      	ldr	r3, [r3, #8]
 800c2ee:	4a51      	ldr	r2, [pc, #324]	; (800c434 <HAL_RCC_OscConfig+0x280>)
 800c2f0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c2f4:	6093      	str	r3, [r2, #8]
 800c2f6:	4b4f      	ldr	r3, [pc, #316]	; (800c434 <HAL_RCC_OscConfig+0x280>)
 800c2f8:	689b      	ldr	r3, [r3, #8]
 800c2fa:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c302:	494c      	ldr	r1, [pc, #304]	; (800c434 <HAL_RCC_OscConfig+0x280>)
 800c304:	4313      	orrs	r3, r2
 800c306:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c30c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800c310:	d309      	bcc.n	800c326 <HAL_RCC_OscConfig+0x172>
 800c312:	4b48      	ldr	r3, [pc, #288]	; (800c434 <HAL_RCC_OscConfig+0x280>)
 800c314:	68db      	ldr	r3, [r3, #12]
 800c316:	f023 021f 	bic.w	r2, r3, #31
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	6a1b      	ldr	r3, [r3, #32]
 800c31e:	4945      	ldr	r1, [pc, #276]	; (800c434 <HAL_RCC_OscConfig+0x280>)
 800c320:	4313      	orrs	r3, r2
 800c322:	60cb      	str	r3, [r1, #12]
 800c324:	e028      	b.n	800c378 <HAL_RCC_OscConfig+0x1c4>
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	da0a      	bge.n	800c344 <HAL_RCC_OscConfig+0x190>
 800c32e:	4b41      	ldr	r3, [pc, #260]	; (800c434 <HAL_RCC_OscConfig+0x280>)
 800c330:	68db      	ldr	r3, [r3, #12]
 800c332:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	6a1b      	ldr	r3, [r3, #32]
 800c33a:	015b      	lsls	r3, r3, #5
 800c33c:	493d      	ldr	r1, [pc, #244]	; (800c434 <HAL_RCC_OscConfig+0x280>)
 800c33e:	4313      	orrs	r3, r2
 800c340:	60cb      	str	r3, [r1, #12]
 800c342:	e019      	b.n	800c378 <HAL_RCC_OscConfig+0x1c4>
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c348:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c34c:	d30a      	bcc.n	800c364 <HAL_RCC_OscConfig+0x1b0>
 800c34e:	4b39      	ldr	r3, [pc, #228]	; (800c434 <HAL_RCC_OscConfig+0x280>)
 800c350:	68db      	ldr	r3, [r3, #12]
 800c352:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	6a1b      	ldr	r3, [r3, #32]
 800c35a:	029b      	lsls	r3, r3, #10
 800c35c:	4935      	ldr	r1, [pc, #212]	; (800c434 <HAL_RCC_OscConfig+0x280>)
 800c35e:	4313      	orrs	r3, r2
 800c360:	60cb      	str	r3, [r1, #12]
 800c362:	e009      	b.n	800c378 <HAL_RCC_OscConfig+0x1c4>
 800c364:	4b33      	ldr	r3, [pc, #204]	; (800c434 <HAL_RCC_OscConfig+0x280>)
 800c366:	68db      	ldr	r3, [r3, #12]
 800c368:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	6a1b      	ldr	r3, [r3, #32]
 800c370:	03db      	lsls	r3, r3, #15
 800c372:	4930      	ldr	r1, [pc, #192]	; (800c434 <HAL_RCC_OscConfig+0x280>)
 800c374:	4313      	orrs	r3, r2
 800c376:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800c378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d10a      	bne.n	800c394 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c382:	4618      	mov	r0, r3
 800c384:	f001 f93c 	bl	800d600 <RCC_SetFlashLatencyFromMSIRange>
 800c388:	4603      	mov	r3, r0
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d002      	beq.n	800c394 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 800c38e:	2301      	movs	r3, #1
 800c390:	f000 bde5 	b.w	800cf5e <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 800c394:	f001 f8de 	bl	800d554 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800c398:	4b27      	ldr	r3, [pc, #156]	; (800c438 <HAL_RCC_OscConfig+0x284>)
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	4618      	mov	r0, r3
 800c39e:	f7fd fca9 	bl	8009cf4 <HAL_InitTick>
 800c3a2:	4603      	mov	r3, r0
 800c3a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 800c3a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	f000 808a 	beq.w	800c4c6 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 800c3b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c3b6:	f000 bdd2 	b.w	800cf5e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	69db      	ldr	r3, [r3, #28]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d066      	beq.n	800c490 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 800c3c2:	4b1c      	ldr	r3, [pc, #112]	; (800c434 <HAL_RCC_OscConfig+0x280>)
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	4a1b      	ldr	r2, [pc, #108]	; (800c434 <HAL_RCC_OscConfig+0x280>)
 800c3c8:	f043 0301 	orr.w	r3, r3, #1
 800c3cc:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800c3ce:	f7fd fcdb 	bl	8009d88 <HAL_GetTick>
 800c3d2:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800c3d4:	e009      	b.n	800c3ea <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800c3d6:	f7fd fcd7 	bl	8009d88 <HAL_GetTick>
 800c3da:	4602      	mov	r2, r0
 800c3dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3de:	1ad3      	subs	r3, r2, r3
 800c3e0:	2b02      	cmp	r3, #2
 800c3e2:	d902      	bls.n	800c3ea <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 800c3e4:	2303      	movs	r3, #3
 800c3e6:	f000 bdba 	b.w	800cf5e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800c3ea:	4b12      	ldr	r3, [pc, #72]	; (800c434 <HAL_RCC_OscConfig+0x280>)
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	f003 0304 	and.w	r3, r3, #4
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d0ef      	beq.n	800c3d6 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800c3f6:	4b0f      	ldr	r3, [pc, #60]	; (800c434 <HAL_RCC_OscConfig+0x280>)
 800c3f8:	689b      	ldr	r3, [r3, #8]
 800c3fa:	4a0e      	ldr	r2, [pc, #56]	; (800c434 <HAL_RCC_OscConfig+0x280>)
 800c3fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c400:	6093      	str	r3, [r2, #8]
 800c402:	4b0c      	ldr	r3, [pc, #48]	; (800c434 <HAL_RCC_OscConfig+0x280>)
 800c404:	689b      	ldr	r3, [r3, #8]
 800c406:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c40e:	4909      	ldr	r1, [pc, #36]	; (800c434 <HAL_RCC_OscConfig+0x280>)
 800c410:	4313      	orrs	r3, r2
 800c412:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c418:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800c41c:	d30e      	bcc.n	800c43c <HAL_RCC_OscConfig+0x288>
 800c41e:	4b05      	ldr	r3, [pc, #20]	; (800c434 <HAL_RCC_OscConfig+0x280>)
 800c420:	68db      	ldr	r3, [r3, #12]
 800c422:	f023 021f 	bic.w	r2, r3, #31
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	6a1b      	ldr	r3, [r3, #32]
 800c42a:	4902      	ldr	r1, [pc, #8]	; (800c434 <HAL_RCC_OscConfig+0x280>)
 800c42c:	4313      	orrs	r3, r2
 800c42e:	60cb      	str	r3, [r1, #12]
 800c430:	e04a      	b.n	800c4c8 <HAL_RCC_OscConfig+0x314>
 800c432:	bf00      	nop
 800c434:	46020c00 	.word	0x46020c00
 800c438:	200000f4 	.word	0x200000f4
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c440:	2b00      	cmp	r3, #0
 800c442:	da0a      	bge.n	800c45a <HAL_RCC_OscConfig+0x2a6>
 800c444:	4b98      	ldr	r3, [pc, #608]	; (800c6a8 <HAL_RCC_OscConfig+0x4f4>)
 800c446:	68db      	ldr	r3, [r3, #12]
 800c448:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	6a1b      	ldr	r3, [r3, #32]
 800c450:	015b      	lsls	r3, r3, #5
 800c452:	4995      	ldr	r1, [pc, #596]	; (800c6a8 <HAL_RCC_OscConfig+0x4f4>)
 800c454:	4313      	orrs	r3, r2
 800c456:	60cb      	str	r3, [r1, #12]
 800c458:	e036      	b.n	800c4c8 <HAL_RCC_OscConfig+0x314>
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c45e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c462:	d30a      	bcc.n	800c47a <HAL_RCC_OscConfig+0x2c6>
 800c464:	4b90      	ldr	r3, [pc, #576]	; (800c6a8 <HAL_RCC_OscConfig+0x4f4>)
 800c466:	68db      	ldr	r3, [r3, #12]
 800c468:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	6a1b      	ldr	r3, [r3, #32]
 800c470:	029b      	lsls	r3, r3, #10
 800c472:	498d      	ldr	r1, [pc, #564]	; (800c6a8 <HAL_RCC_OscConfig+0x4f4>)
 800c474:	4313      	orrs	r3, r2
 800c476:	60cb      	str	r3, [r1, #12]
 800c478:	e026      	b.n	800c4c8 <HAL_RCC_OscConfig+0x314>
 800c47a:	4b8b      	ldr	r3, [pc, #556]	; (800c6a8 <HAL_RCC_OscConfig+0x4f4>)
 800c47c:	68db      	ldr	r3, [r3, #12]
 800c47e:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	6a1b      	ldr	r3, [r3, #32]
 800c486:	03db      	lsls	r3, r3, #15
 800c488:	4987      	ldr	r1, [pc, #540]	; (800c6a8 <HAL_RCC_OscConfig+0x4f4>)
 800c48a:	4313      	orrs	r3, r2
 800c48c:	60cb      	str	r3, [r1, #12]
 800c48e:	e01b      	b.n	800c4c8 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 800c490:	4b85      	ldr	r3, [pc, #532]	; (800c6a8 <HAL_RCC_OscConfig+0x4f4>)
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	4a84      	ldr	r2, [pc, #528]	; (800c6a8 <HAL_RCC_OscConfig+0x4f4>)
 800c496:	f023 0301 	bic.w	r3, r3, #1
 800c49a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800c49c:	f7fd fc74 	bl	8009d88 <HAL_GetTick>
 800c4a0:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800c4a2:	e009      	b.n	800c4b8 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800c4a4:	f7fd fc70 	bl	8009d88 <HAL_GetTick>
 800c4a8:	4602      	mov	r2, r0
 800c4aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4ac:	1ad3      	subs	r3, r2, r3
 800c4ae:	2b02      	cmp	r3, #2
 800c4b0:	d902      	bls.n	800c4b8 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 800c4b2:	2303      	movs	r3, #3
 800c4b4:	f000 bd53 	b.w	800cf5e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800c4b8:	4b7b      	ldr	r3, [pc, #492]	; (800c6a8 <HAL_RCC_OscConfig+0x4f4>)
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	f003 0304 	and.w	r3, r3, #4
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d1ef      	bne.n	800c4a4 <HAL_RCC_OscConfig+0x2f0>
 800c4c4:	e000      	b.n	800c4c8 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800c4c6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	f003 0301 	and.w	r3, r3, #1
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	f000 808b 	beq.w	800c5ec <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800c4d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4d8:	2b08      	cmp	r3, #8
 800c4da:	d005      	beq.n	800c4e8 <HAL_RCC_OscConfig+0x334>
 800c4dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4de:	2b0c      	cmp	r3, #12
 800c4e0:	d109      	bne.n	800c4f6 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800c4e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4e4:	2b03      	cmp	r3, #3
 800c4e6:	d106      	bne.n	800c4f6 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	685b      	ldr	r3, [r3, #4]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d17d      	bne.n	800c5ec <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 800c4f0:	2301      	movs	r3, #1
 800c4f2:	f000 bd34 	b.w	800cf5e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	685b      	ldr	r3, [r3, #4]
 800c4fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c4fe:	d106      	bne.n	800c50e <HAL_RCC_OscConfig+0x35a>
 800c500:	4b69      	ldr	r3, [pc, #420]	; (800c6a8 <HAL_RCC_OscConfig+0x4f4>)
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	4a68      	ldr	r2, [pc, #416]	; (800c6a8 <HAL_RCC_OscConfig+0x4f4>)
 800c506:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c50a:	6013      	str	r3, [r2, #0]
 800c50c:	e041      	b.n	800c592 <HAL_RCC_OscConfig+0x3de>
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	685b      	ldr	r3, [r3, #4]
 800c512:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c516:	d112      	bne.n	800c53e <HAL_RCC_OscConfig+0x38a>
 800c518:	4b63      	ldr	r3, [pc, #396]	; (800c6a8 <HAL_RCC_OscConfig+0x4f4>)
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	4a62      	ldr	r2, [pc, #392]	; (800c6a8 <HAL_RCC_OscConfig+0x4f4>)
 800c51e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c522:	6013      	str	r3, [r2, #0]
 800c524:	4b60      	ldr	r3, [pc, #384]	; (800c6a8 <HAL_RCC_OscConfig+0x4f4>)
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	4a5f      	ldr	r2, [pc, #380]	; (800c6a8 <HAL_RCC_OscConfig+0x4f4>)
 800c52a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c52e:	6013      	str	r3, [r2, #0]
 800c530:	4b5d      	ldr	r3, [pc, #372]	; (800c6a8 <HAL_RCC_OscConfig+0x4f4>)
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	4a5c      	ldr	r2, [pc, #368]	; (800c6a8 <HAL_RCC_OscConfig+0x4f4>)
 800c536:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c53a:	6013      	str	r3, [r2, #0]
 800c53c:	e029      	b.n	800c592 <HAL_RCC_OscConfig+0x3de>
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	685b      	ldr	r3, [r3, #4]
 800c542:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800c546:	d112      	bne.n	800c56e <HAL_RCC_OscConfig+0x3ba>
 800c548:	4b57      	ldr	r3, [pc, #348]	; (800c6a8 <HAL_RCC_OscConfig+0x4f4>)
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	4a56      	ldr	r2, [pc, #344]	; (800c6a8 <HAL_RCC_OscConfig+0x4f4>)
 800c54e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c552:	6013      	str	r3, [r2, #0]
 800c554:	4b54      	ldr	r3, [pc, #336]	; (800c6a8 <HAL_RCC_OscConfig+0x4f4>)
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	4a53      	ldr	r2, [pc, #332]	; (800c6a8 <HAL_RCC_OscConfig+0x4f4>)
 800c55a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c55e:	6013      	str	r3, [r2, #0]
 800c560:	4b51      	ldr	r3, [pc, #324]	; (800c6a8 <HAL_RCC_OscConfig+0x4f4>)
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	4a50      	ldr	r2, [pc, #320]	; (800c6a8 <HAL_RCC_OscConfig+0x4f4>)
 800c566:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c56a:	6013      	str	r3, [r2, #0]
 800c56c:	e011      	b.n	800c592 <HAL_RCC_OscConfig+0x3de>
 800c56e:	4b4e      	ldr	r3, [pc, #312]	; (800c6a8 <HAL_RCC_OscConfig+0x4f4>)
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	4a4d      	ldr	r2, [pc, #308]	; (800c6a8 <HAL_RCC_OscConfig+0x4f4>)
 800c574:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c578:	6013      	str	r3, [r2, #0]
 800c57a:	4b4b      	ldr	r3, [pc, #300]	; (800c6a8 <HAL_RCC_OscConfig+0x4f4>)
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	4a4a      	ldr	r2, [pc, #296]	; (800c6a8 <HAL_RCC_OscConfig+0x4f4>)
 800c580:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c584:	6013      	str	r3, [r2, #0]
 800c586:	4b48      	ldr	r3, [pc, #288]	; (800c6a8 <HAL_RCC_OscConfig+0x4f4>)
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	4a47      	ldr	r2, [pc, #284]	; (800c6a8 <HAL_RCC_OscConfig+0x4f4>)
 800c58c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c590:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	685b      	ldr	r3, [r3, #4]
 800c596:	2b00      	cmp	r3, #0
 800c598:	d014      	beq.n	800c5c4 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 800c59a:	f7fd fbf5 	bl	8009d88 <HAL_GetTick>
 800c59e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c5a0:	e009      	b.n	800c5b6 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c5a2:	f7fd fbf1 	bl	8009d88 <HAL_GetTick>
 800c5a6:	4602      	mov	r2, r0
 800c5a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5aa:	1ad3      	subs	r3, r2, r3
 800c5ac:	2b64      	cmp	r3, #100	; 0x64
 800c5ae:	d902      	bls.n	800c5b6 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 800c5b0:	2303      	movs	r3, #3
 800c5b2:	f000 bcd4 	b.w	800cf5e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c5b6:	4b3c      	ldr	r3, [pc, #240]	; (800c6a8 <HAL_RCC_OscConfig+0x4f4>)
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d0ef      	beq.n	800c5a2 <HAL_RCC_OscConfig+0x3ee>
 800c5c2:	e013      	b.n	800c5ec <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 800c5c4:	f7fd fbe0 	bl	8009d88 <HAL_GetTick>
 800c5c8:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800c5ca:	e009      	b.n	800c5e0 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c5cc:	f7fd fbdc 	bl	8009d88 <HAL_GetTick>
 800c5d0:	4602      	mov	r2, r0
 800c5d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5d4:	1ad3      	subs	r3, r2, r3
 800c5d6:	2b64      	cmp	r3, #100	; 0x64
 800c5d8:	d902      	bls.n	800c5e0 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800c5da:	2303      	movs	r3, #3
 800c5dc:	f000 bcbf 	b.w	800cf5e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800c5e0:	4b31      	ldr	r3, [pc, #196]	; (800c6a8 <HAL_RCC_OscConfig+0x4f4>)
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d1ef      	bne.n	800c5cc <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	f003 0302 	and.w	r3, r3, #2
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d05f      	beq.n	800c6b8 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800c5f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5fa:	2b04      	cmp	r3, #4
 800c5fc:	d005      	beq.n	800c60a <HAL_RCC_OscConfig+0x456>
 800c5fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c600:	2b0c      	cmp	r3, #12
 800c602:	d114      	bne.n	800c62e <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800c604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c606:	2b02      	cmp	r3, #2
 800c608:	d111      	bne.n	800c62e <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	68db      	ldr	r3, [r3, #12]
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d102      	bne.n	800c618 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 800c612:	2301      	movs	r3, #1
 800c614:	f000 bca3 	b.w	800cf5e <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800c618:	4b23      	ldr	r3, [pc, #140]	; (800c6a8 <HAL_RCC_OscConfig+0x4f4>)
 800c61a:	691b      	ldr	r3, [r3, #16]
 800c61c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	691b      	ldr	r3, [r3, #16]
 800c624:	041b      	lsls	r3, r3, #16
 800c626:	4920      	ldr	r1, [pc, #128]	; (800c6a8 <HAL_RCC_OscConfig+0x4f4>)
 800c628:	4313      	orrs	r3, r2
 800c62a:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800c62c:	e044      	b.n	800c6b8 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	68db      	ldr	r3, [r3, #12]
 800c632:	2b00      	cmp	r3, #0
 800c634:	d024      	beq.n	800c680 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 800c636:	4b1c      	ldr	r3, [pc, #112]	; (800c6a8 <HAL_RCC_OscConfig+0x4f4>)
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	4a1b      	ldr	r2, [pc, #108]	; (800c6a8 <HAL_RCC_OscConfig+0x4f4>)
 800c63c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c640:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800c642:	f7fd fba1 	bl	8009d88 <HAL_GetTick>
 800c646:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c648:	e009      	b.n	800c65e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c64a:	f7fd fb9d 	bl	8009d88 <HAL_GetTick>
 800c64e:	4602      	mov	r2, r0
 800c650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c652:	1ad3      	subs	r3, r2, r3
 800c654:	2b02      	cmp	r3, #2
 800c656:	d902      	bls.n	800c65e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800c658:	2303      	movs	r3, #3
 800c65a:	f000 bc80 	b.w	800cf5e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c65e:	4b12      	ldr	r3, [pc, #72]	; (800c6a8 <HAL_RCC_OscConfig+0x4f4>)
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c666:	2b00      	cmp	r3, #0
 800c668:	d0ef      	beq.n	800c64a <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800c66a:	4b0f      	ldr	r3, [pc, #60]	; (800c6a8 <HAL_RCC_OscConfig+0x4f4>)
 800c66c:	691b      	ldr	r3, [r3, #16]
 800c66e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	691b      	ldr	r3, [r3, #16]
 800c676:	041b      	lsls	r3, r3, #16
 800c678:	490b      	ldr	r1, [pc, #44]	; (800c6a8 <HAL_RCC_OscConfig+0x4f4>)
 800c67a:	4313      	orrs	r3, r2
 800c67c:	610b      	str	r3, [r1, #16]
 800c67e:	e01b      	b.n	800c6b8 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 800c680:	4b09      	ldr	r3, [pc, #36]	; (800c6a8 <HAL_RCC_OscConfig+0x4f4>)
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	4a08      	ldr	r2, [pc, #32]	; (800c6a8 <HAL_RCC_OscConfig+0x4f4>)
 800c686:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c68a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800c68c:	f7fd fb7c 	bl	8009d88 <HAL_GetTick>
 800c690:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800c692:	e00b      	b.n	800c6ac <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c694:	f7fd fb78 	bl	8009d88 <HAL_GetTick>
 800c698:	4602      	mov	r2, r0
 800c69a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c69c:	1ad3      	subs	r3, r2, r3
 800c69e:	2b02      	cmp	r3, #2
 800c6a0:	d904      	bls.n	800c6ac <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 800c6a2:	2303      	movs	r3, #3
 800c6a4:	f000 bc5b 	b.w	800cf5e <HAL_RCC_OscConfig+0xdaa>
 800c6a8:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800c6ac:	4baf      	ldr	r3, [pc, #700]	; (800c96c <HAL_RCC_OscConfig+0x7b8>)
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d1ed      	bne.n	800c694 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	f003 0308 	and.w	r3, r3, #8
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	f000 80c8 	beq.w	800c856 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 800c6c6:	2300      	movs	r3, #0
 800c6c8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c6cc:	4ba7      	ldr	r3, [pc, #668]	; (800c96c <HAL_RCC_OscConfig+0x7b8>)
 800c6ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c6d2:	f003 0304 	and.w	r3, r3, #4
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d111      	bne.n	800c6fe <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c6da:	4ba4      	ldr	r3, [pc, #656]	; (800c96c <HAL_RCC_OscConfig+0x7b8>)
 800c6dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c6e0:	4aa2      	ldr	r2, [pc, #648]	; (800c96c <HAL_RCC_OscConfig+0x7b8>)
 800c6e2:	f043 0304 	orr.w	r3, r3, #4
 800c6e6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800c6ea:	4ba0      	ldr	r3, [pc, #640]	; (800c96c <HAL_RCC_OscConfig+0x7b8>)
 800c6ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c6f0:	f003 0304 	and.w	r3, r3, #4
 800c6f4:	617b      	str	r3, [r7, #20]
 800c6f6:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 800c6f8:	2301      	movs	r3, #1
 800c6fa:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800c6fe:	4b9c      	ldr	r3, [pc, #624]	; (800c970 <HAL_RCC_OscConfig+0x7bc>)
 800c700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c702:	f003 0301 	and.w	r3, r3, #1
 800c706:	2b00      	cmp	r3, #0
 800c708:	d119      	bne.n	800c73e <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800c70a:	4b99      	ldr	r3, [pc, #612]	; (800c970 <HAL_RCC_OscConfig+0x7bc>)
 800c70c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c70e:	4a98      	ldr	r2, [pc, #608]	; (800c970 <HAL_RCC_OscConfig+0x7bc>)
 800c710:	f043 0301 	orr.w	r3, r3, #1
 800c714:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c716:	f7fd fb37 	bl	8009d88 <HAL_GetTick>
 800c71a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800c71c:	e009      	b.n	800c732 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c71e:	f7fd fb33 	bl	8009d88 <HAL_GetTick>
 800c722:	4602      	mov	r2, r0
 800c724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c726:	1ad3      	subs	r3, r2, r3
 800c728:	2b02      	cmp	r3, #2
 800c72a:	d902      	bls.n	800c732 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 800c72c:	2303      	movs	r3, #3
 800c72e:	f000 bc16 	b.w	800cf5e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800c732:	4b8f      	ldr	r3, [pc, #572]	; (800c970 <HAL_RCC_OscConfig+0x7bc>)
 800c734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c736:	f003 0301 	and.w	r3, r3, #1
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d0ef      	beq.n	800c71e <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	695b      	ldr	r3, [r3, #20]
 800c742:	2b00      	cmp	r3, #0
 800c744:	d05f      	beq.n	800c806 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 800c746:	4b89      	ldr	r3, [pc, #548]	; (800c96c <HAL_RCC_OscConfig+0x7b8>)
 800c748:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c74c:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	699a      	ldr	r2, [r3, #24]
 800c752:	6a3b      	ldr	r3, [r7, #32]
 800c754:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c758:	429a      	cmp	r2, r3
 800c75a:	d037      	beq.n	800c7cc <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800c75c:	6a3b      	ldr	r3, [r7, #32]
 800c75e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c762:	2b00      	cmp	r3, #0
 800c764:	d006      	beq.n	800c774 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 800c766:	6a3b      	ldr	r3, [r7, #32]
 800c768:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d101      	bne.n	800c774 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 800c770:	2301      	movs	r3, #1
 800c772:	e3f4      	b.n	800cf5e <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 800c774:	6a3b      	ldr	r3, [r7, #32]
 800c776:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d01b      	beq.n	800c7b6 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 800c77e:	4b7b      	ldr	r3, [pc, #492]	; (800c96c <HAL_RCC_OscConfig+0x7b8>)
 800c780:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c784:	4a79      	ldr	r2, [pc, #484]	; (800c96c <HAL_RCC_OscConfig+0x7b8>)
 800c786:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 800c78a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 800c78e:	f7fd fafb 	bl	8009d88 <HAL_GetTick>
 800c792:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800c794:	e008      	b.n	800c7a8 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c796:	f7fd faf7 	bl	8009d88 <HAL_GetTick>
 800c79a:	4602      	mov	r2, r0
 800c79c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c79e:	1ad3      	subs	r3, r2, r3
 800c7a0:	2b05      	cmp	r3, #5
 800c7a2:	d901      	bls.n	800c7a8 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 800c7a4:	2303      	movs	r3, #3
 800c7a6:	e3da      	b.n	800cf5e <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800c7a8:	4b70      	ldr	r3, [pc, #448]	; (800c96c <HAL_RCC_OscConfig+0x7b8>)
 800c7aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c7ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d1ef      	bne.n	800c796 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 800c7b6:	4b6d      	ldr	r3, [pc, #436]	; (800c96c <HAL_RCC_OscConfig+0x7b8>)
 800c7b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c7bc:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	699b      	ldr	r3, [r3, #24]
 800c7c4:	4969      	ldr	r1, [pc, #420]	; (800c96c <HAL_RCC_OscConfig+0x7b8>)
 800c7c6:	4313      	orrs	r3, r2
 800c7c8:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 800c7cc:	4b67      	ldr	r3, [pc, #412]	; (800c96c <HAL_RCC_OscConfig+0x7b8>)
 800c7ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c7d2:	4a66      	ldr	r2, [pc, #408]	; (800c96c <HAL_RCC_OscConfig+0x7b8>)
 800c7d4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c7d8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 800c7dc:	f7fd fad4 	bl	8009d88 <HAL_GetTick>
 800c7e0:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800c7e2:	e008      	b.n	800c7f6 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c7e4:	f7fd fad0 	bl	8009d88 <HAL_GetTick>
 800c7e8:	4602      	mov	r2, r0
 800c7ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7ec:	1ad3      	subs	r3, r2, r3
 800c7ee:	2b05      	cmp	r3, #5
 800c7f0:	d901      	bls.n	800c7f6 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 800c7f2:	2303      	movs	r3, #3
 800c7f4:	e3b3      	b.n	800cf5e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800c7f6:	4b5d      	ldr	r3, [pc, #372]	; (800c96c <HAL_RCC_OscConfig+0x7b8>)
 800c7f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c7fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c800:	2b00      	cmp	r3, #0
 800c802:	d0ef      	beq.n	800c7e4 <HAL_RCC_OscConfig+0x630>
 800c804:	e01b      	b.n	800c83e <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 800c806:	4b59      	ldr	r3, [pc, #356]	; (800c96c <HAL_RCC_OscConfig+0x7b8>)
 800c808:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c80c:	4a57      	ldr	r2, [pc, #348]	; (800c96c <HAL_RCC_OscConfig+0x7b8>)
 800c80e:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 800c812:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 800c816:	f7fd fab7 	bl	8009d88 <HAL_GetTick>
 800c81a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800c81c:	e008      	b.n	800c830 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c81e:	f7fd fab3 	bl	8009d88 <HAL_GetTick>
 800c822:	4602      	mov	r2, r0
 800c824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c826:	1ad3      	subs	r3, r2, r3
 800c828:	2b05      	cmp	r3, #5
 800c82a:	d901      	bls.n	800c830 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 800c82c:	2303      	movs	r3, #3
 800c82e:	e396      	b.n	800cf5e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800c830:	4b4e      	ldr	r3, [pc, #312]	; (800c96c <HAL_RCC_OscConfig+0x7b8>)
 800c832:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c836:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d1ef      	bne.n	800c81e <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800c83e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800c842:	2b01      	cmp	r3, #1
 800c844:	d107      	bne.n	800c856 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c846:	4b49      	ldr	r3, [pc, #292]	; (800c96c <HAL_RCC_OscConfig+0x7b8>)
 800c848:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c84c:	4a47      	ldr	r2, [pc, #284]	; (800c96c <HAL_RCC_OscConfig+0x7b8>)
 800c84e:	f023 0304 	bic.w	r3, r3, #4
 800c852:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	f003 0304 	and.w	r3, r3, #4
 800c85e:	2b00      	cmp	r3, #0
 800c860:	f000 8111 	beq.w	800ca86 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 800c864:	2300      	movs	r3, #0
 800c866:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c86a:	4b40      	ldr	r3, [pc, #256]	; (800c96c <HAL_RCC_OscConfig+0x7b8>)
 800c86c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c870:	f003 0304 	and.w	r3, r3, #4
 800c874:	2b00      	cmp	r3, #0
 800c876:	d111      	bne.n	800c89c <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c878:	4b3c      	ldr	r3, [pc, #240]	; (800c96c <HAL_RCC_OscConfig+0x7b8>)
 800c87a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c87e:	4a3b      	ldr	r2, [pc, #236]	; (800c96c <HAL_RCC_OscConfig+0x7b8>)
 800c880:	f043 0304 	orr.w	r3, r3, #4
 800c884:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800c888:	4b38      	ldr	r3, [pc, #224]	; (800c96c <HAL_RCC_OscConfig+0x7b8>)
 800c88a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c88e:	f003 0304 	and.w	r3, r3, #4
 800c892:	613b      	str	r3, [r7, #16]
 800c894:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 800c896:	2301      	movs	r3, #1
 800c898:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800c89c:	4b34      	ldr	r3, [pc, #208]	; (800c970 <HAL_RCC_OscConfig+0x7bc>)
 800c89e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8a0:	f003 0301 	and.w	r3, r3, #1
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d118      	bne.n	800c8da <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800c8a8:	4b31      	ldr	r3, [pc, #196]	; (800c970 <HAL_RCC_OscConfig+0x7bc>)
 800c8aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8ac:	4a30      	ldr	r2, [pc, #192]	; (800c970 <HAL_RCC_OscConfig+0x7bc>)
 800c8ae:	f043 0301 	orr.w	r3, r3, #1
 800c8b2:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c8b4:	f7fd fa68 	bl	8009d88 <HAL_GetTick>
 800c8b8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800c8ba:	e008      	b.n	800c8ce <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c8bc:	f7fd fa64 	bl	8009d88 <HAL_GetTick>
 800c8c0:	4602      	mov	r2, r0
 800c8c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8c4:	1ad3      	subs	r3, r2, r3
 800c8c6:	2b02      	cmp	r3, #2
 800c8c8:	d901      	bls.n	800c8ce <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 800c8ca:	2303      	movs	r3, #3
 800c8cc:	e347      	b.n	800cf5e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800c8ce:	4b28      	ldr	r3, [pc, #160]	; (800c970 <HAL_RCC_OscConfig+0x7bc>)
 800c8d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8d2:	f003 0301 	and.w	r3, r3, #1
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d0f0      	beq.n	800c8bc <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	689b      	ldr	r3, [r3, #8]
 800c8de:	f003 0301 	and.w	r3, r3, #1
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d01f      	beq.n	800c926 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	689b      	ldr	r3, [r3, #8]
 800c8ea:	f003 0304 	and.w	r3, r3, #4
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d010      	beq.n	800c914 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800c8f2:	4b1e      	ldr	r3, [pc, #120]	; (800c96c <HAL_RCC_OscConfig+0x7b8>)
 800c8f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c8f8:	4a1c      	ldr	r2, [pc, #112]	; (800c96c <HAL_RCC_OscConfig+0x7b8>)
 800c8fa:	f043 0304 	orr.w	r3, r3, #4
 800c8fe:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800c902:	4b1a      	ldr	r3, [pc, #104]	; (800c96c <HAL_RCC_OscConfig+0x7b8>)
 800c904:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c908:	4a18      	ldr	r2, [pc, #96]	; (800c96c <HAL_RCC_OscConfig+0x7b8>)
 800c90a:	f043 0301 	orr.w	r3, r3, #1
 800c90e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800c912:	e018      	b.n	800c946 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800c914:	4b15      	ldr	r3, [pc, #84]	; (800c96c <HAL_RCC_OscConfig+0x7b8>)
 800c916:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c91a:	4a14      	ldr	r2, [pc, #80]	; (800c96c <HAL_RCC_OscConfig+0x7b8>)
 800c91c:	f043 0301 	orr.w	r3, r3, #1
 800c920:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800c924:	e00f      	b.n	800c946 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800c926:	4b11      	ldr	r3, [pc, #68]	; (800c96c <HAL_RCC_OscConfig+0x7b8>)
 800c928:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c92c:	4a0f      	ldr	r2, [pc, #60]	; (800c96c <HAL_RCC_OscConfig+0x7b8>)
 800c92e:	f023 0301 	bic.w	r3, r3, #1
 800c932:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800c936:	4b0d      	ldr	r3, [pc, #52]	; (800c96c <HAL_RCC_OscConfig+0x7b8>)
 800c938:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c93c:	4a0b      	ldr	r2, [pc, #44]	; (800c96c <HAL_RCC_OscConfig+0x7b8>)
 800c93e:	f023 0304 	bic.w	r3, r3, #4
 800c942:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	689b      	ldr	r3, [r3, #8]
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d057      	beq.n	800c9fe <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 800c94e:	f7fd fa1b 	bl	8009d88 <HAL_GetTick>
 800c952:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c954:	e00e      	b.n	800c974 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c956:	f7fd fa17 	bl	8009d88 <HAL_GetTick>
 800c95a:	4602      	mov	r2, r0
 800c95c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c95e:	1ad3      	subs	r3, r2, r3
 800c960:	f241 3288 	movw	r2, #5000	; 0x1388
 800c964:	4293      	cmp	r3, r2
 800c966:	d905      	bls.n	800c974 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 800c968:	2303      	movs	r3, #3
 800c96a:	e2f8      	b.n	800cf5e <HAL_RCC_OscConfig+0xdaa>
 800c96c:	46020c00 	.word	0x46020c00
 800c970:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c974:	4b9c      	ldr	r3, [pc, #624]	; (800cbe8 <HAL_RCC_OscConfig+0xa34>)
 800c976:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c97a:	f003 0302 	and.w	r3, r3, #2
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d0e9      	beq.n	800c956 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	689b      	ldr	r3, [r3, #8]
 800c986:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d01b      	beq.n	800c9c6 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800c98e:	4b96      	ldr	r3, [pc, #600]	; (800cbe8 <HAL_RCC_OscConfig+0xa34>)
 800c990:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c994:	4a94      	ldr	r2, [pc, #592]	; (800cbe8 <HAL_RCC_OscConfig+0xa34>)
 800c996:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c99a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800c99e:	e00a      	b.n	800c9b6 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c9a0:	f7fd f9f2 	bl	8009d88 <HAL_GetTick>
 800c9a4:	4602      	mov	r2, r0
 800c9a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9a8:	1ad3      	subs	r3, r2, r3
 800c9aa:	f241 3288 	movw	r2, #5000	; 0x1388
 800c9ae:	4293      	cmp	r3, r2
 800c9b0:	d901      	bls.n	800c9b6 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 800c9b2:	2303      	movs	r3, #3
 800c9b4:	e2d3      	b.n	800cf5e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800c9b6:	4b8c      	ldr	r3, [pc, #560]	; (800cbe8 <HAL_RCC_OscConfig+0xa34>)
 800c9b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c9bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d0ed      	beq.n	800c9a0 <HAL_RCC_OscConfig+0x7ec>
 800c9c4:	e053      	b.n	800ca6e <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800c9c6:	4b88      	ldr	r3, [pc, #544]	; (800cbe8 <HAL_RCC_OscConfig+0xa34>)
 800c9c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c9cc:	4a86      	ldr	r2, [pc, #536]	; (800cbe8 <HAL_RCC_OscConfig+0xa34>)
 800c9ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c9d2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800c9d6:	e00a      	b.n	800c9ee <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c9d8:	f7fd f9d6 	bl	8009d88 <HAL_GetTick>
 800c9dc:	4602      	mov	r2, r0
 800c9de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9e0:	1ad3      	subs	r3, r2, r3
 800c9e2:	f241 3288 	movw	r2, #5000	; 0x1388
 800c9e6:	4293      	cmp	r3, r2
 800c9e8:	d901      	bls.n	800c9ee <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 800c9ea:	2303      	movs	r3, #3
 800c9ec:	e2b7      	b.n	800cf5e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800c9ee:	4b7e      	ldr	r3, [pc, #504]	; (800cbe8 <HAL_RCC_OscConfig+0xa34>)
 800c9f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c9f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d1ed      	bne.n	800c9d8 <HAL_RCC_OscConfig+0x824>
 800c9fc:	e037      	b.n	800ca6e <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 800c9fe:	f7fd f9c3 	bl	8009d88 <HAL_GetTick>
 800ca02:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800ca04:	e00a      	b.n	800ca1c <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ca06:	f7fd f9bf 	bl	8009d88 <HAL_GetTick>
 800ca0a:	4602      	mov	r2, r0
 800ca0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca0e:	1ad3      	subs	r3, r2, r3
 800ca10:	f241 3288 	movw	r2, #5000	; 0x1388
 800ca14:	4293      	cmp	r3, r2
 800ca16:	d901      	bls.n	800ca1c <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 800ca18:	2303      	movs	r3, #3
 800ca1a:	e2a0      	b.n	800cf5e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800ca1c:	4b72      	ldr	r3, [pc, #456]	; (800cbe8 <HAL_RCC_OscConfig+0xa34>)
 800ca1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ca22:	f003 0302 	and.w	r3, r3, #2
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d1ed      	bne.n	800ca06 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800ca2a:	4b6f      	ldr	r3, [pc, #444]	; (800cbe8 <HAL_RCC_OscConfig+0xa34>)
 800ca2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ca30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d01a      	beq.n	800ca6e <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800ca38:	4b6b      	ldr	r3, [pc, #428]	; (800cbe8 <HAL_RCC_OscConfig+0xa34>)
 800ca3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ca3e:	4a6a      	ldr	r2, [pc, #424]	; (800cbe8 <HAL_RCC_OscConfig+0xa34>)
 800ca40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ca44:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800ca48:	e00a      	b.n	800ca60 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ca4a:	f7fd f99d 	bl	8009d88 <HAL_GetTick>
 800ca4e:	4602      	mov	r2, r0
 800ca50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca52:	1ad3      	subs	r3, r2, r3
 800ca54:	f241 3288 	movw	r2, #5000	; 0x1388
 800ca58:	4293      	cmp	r3, r2
 800ca5a:	d901      	bls.n	800ca60 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 800ca5c:	2303      	movs	r3, #3
 800ca5e:	e27e      	b.n	800cf5e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800ca60:	4b61      	ldr	r3, [pc, #388]	; (800cbe8 <HAL_RCC_OscConfig+0xa34>)
 800ca62:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ca66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d1ed      	bne.n	800ca4a <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800ca6e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800ca72:	2b01      	cmp	r3, #1
 800ca74:	d107      	bne.n	800ca86 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ca76:	4b5c      	ldr	r3, [pc, #368]	; (800cbe8 <HAL_RCC_OscConfig+0xa34>)
 800ca78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ca7c:	4a5a      	ldr	r2, [pc, #360]	; (800cbe8 <HAL_RCC_OscConfig+0xa34>)
 800ca7e:	f023 0304 	bic.w	r3, r3, #4
 800ca82:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	f003 0320 	and.w	r3, r3, #32
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d036      	beq.n	800cb00 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d019      	beq.n	800cace <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 800ca9a:	4b53      	ldr	r3, [pc, #332]	; (800cbe8 <HAL_RCC_OscConfig+0xa34>)
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	4a52      	ldr	r2, [pc, #328]	; (800cbe8 <HAL_RCC_OscConfig+0xa34>)
 800caa0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800caa4:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800caa6:	f7fd f96f 	bl	8009d88 <HAL_GetTick>
 800caaa:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800caac:	e008      	b.n	800cac0 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800caae:	f7fd f96b 	bl	8009d88 <HAL_GetTick>
 800cab2:	4602      	mov	r2, r0
 800cab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cab6:	1ad3      	subs	r3, r2, r3
 800cab8:	2b02      	cmp	r3, #2
 800caba:	d901      	bls.n	800cac0 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 800cabc:	2303      	movs	r3, #3
 800cabe:	e24e      	b.n	800cf5e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800cac0:	4b49      	ldr	r3, [pc, #292]	; (800cbe8 <HAL_RCC_OscConfig+0xa34>)
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d0f0      	beq.n	800caae <HAL_RCC_OscConfig+0x8fa>
 800cacc:	e018      	b.n	800cb00 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 800cace:	4b46      	ldr	r3, [pc, #280]	; (800cbe8 <HAL_RCC_OscConfig+0xa34>)
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	4a45      	ldr	r2, [pc, #276]	; (800cbe8 <HAL_RCC_OscConfig+0xa34>)
 800cad4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cad8:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800cada:	f7fd f955 	bl	8009d88 <HAL_GetTick>
 800cade:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800cae0:	e008      	b.n	800caf4 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800cae2:	f7fd f951 	bl	8009d88 <HAL_GetTick>
 800cae6:	4602      	mov	r2, r0
 800cae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caea:	1ad3      	subs	r3, r2, r3
 800caec:	2b02      	cmp	r3, #2
 800caee:	d901      	bls.n	800caf4 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 800caf0:	2303      	movs	r3, #3
 800caf2:	e234      	b.n	800cf5e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800caf4:	4b3c      	ldr	r3, [pc, #240]	; (800cbe8 <HAL_RCC_OscConfig+0xa34>)
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d1f0      	bne.n	800cae2 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d036      	beq.n	800cb7a <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d019      	beq.n	800cb48 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 800cb14:	4b34      	ldr	r3, [pc, #208]	; (800cbe8 <HAL_RCC_OscConfig+0xa34>)
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	4a33      	ldr	r2, [pc, #204]	; (800cbe8 <HAL_RCC_OscConfig+0xa34>)
 800cb1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800cb1e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800cb20:	f7fd f932 	bl	8009d88 <HAL_GetTick>
 800cb24:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800cb26:	e008      	b.n	800cb3a <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800cb28:	f7fd f92e 	bl	8009d88 <HAL_GetTick>
 800cb2c:	4602      	mov	r2, r0
 800cb2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb30:	1ad3      	subs	r3, r2, r3
 800cb32:	2b02      	cmp	r3, #2
 800cb34:	d901      	bls.n	800cb3a <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 800cb36:	2303      	movs	r3, #3
 800cb38:	e211      	b.n	800cf5e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800cb3a:	4b2b      	ldr	r3, [pc, #172]	; (800cbe8 <HAL_RCC_OscConfig+0xa34>)
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d0f0      	beq.n	800cb28 <HAL_RCC_OscConfig+0x974>
 800cb46:	e018      	b.n	800cb7a <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 800cb48:	4b27      	ldr	r3, [pc, #156]	; (800cbe8 <HAL_RCC_OscConfig+0xa34>)
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	4a26      	ldr	r2, [pc, #152]	; (800cbe8 <HAL_RCC_OscConfig+0xa34>)
 800cb4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cb52:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800cb54:	f7fd f918 	bl	8009d88 <HAL_GetTick>
 800cb58:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800cb5a:	e008      	b.n	800cb6e <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800cb5c:	f7fd f914 	bl	8009d88 <HAL_GetTick>
 800cb60:	4602      	mov	r2, r0
 800cb62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb64:	1ad3      	subs	r3, r2, r3
 800cb66:	2b02      	cmp	r3, #2
 800cb68:	d901      	bls.n	800cb6e <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 800cb6a:	2303      	movs	r3, #3
 800cb6c:	e1f7      	b.n	800cf5e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800cb6e:	4b1e      	ldr	r3, [pc, #120]	; (800cbe8 <HAL_RCC_OscConfig+0xa34>)
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d1f0      	bne.n	800cb5c <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d07f      	beq.n	800cc86 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d062      	beq.n	800cc54 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 800cb8e:	4b16      	ldr	r3, [pc, #88]	; (800cbe8 <HAL_RCC_OscConfig+0xa34>)
 800cb90:	689b      	ldr	r3, [r3, #8]
 800cb92:	4a15      	ldr	r2, [pc, #84]	; (800cbe8 <HAL_RCC_OscConfig+0xa34>)
 800cb94:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800cb98:	6093      	str	r3, [r2, #8]
 800cb9a:	4b13      	ldr	r3, [pc, #76]	; (800cbe8 <HAL_RCC_OscConfig+0xa34>)
 800cb9c:	689b      	ldr	r3, [r3, #8]
 800cb9e:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cba6:	4910      	ldr	r1, [pc, #64]	; (800cbe8 <HAL_RCC_OscConfig+0xa34>)
 800cba8:	4313      	orrs	r3, r2
 800cbaa:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbb0:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800cbb4:	d309      	bcc.n	800cbca <HAL_RCC_OscConfig+0xa16>
 800cbb6:	4b0c      	ldr	r3, [pc, #48]	; (800cbe8 <HAL_RCC_OscConfig+0xa34>)
 800cbb8:	68db      	ldr	r3, [r3, #12]
 800cbba:	f023 021f 	bic.w	r2, r3, #31
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	6a1b      	ldr	r3, [r3, #32]
 800cbc2:	4909      	ldr	r1, [pc, #36]	; (800cbe8 <HAL_RCC_OscConfig+0xa34>)
 800cbc4:	4313      	orrs	r3, r2
 800cbc6:	60cb      	str	r3, [r1, #12]
 800cbc8:	e02a      	b.n	800cc20 <HAL_RCC_OscConfig+0xa6c>
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	da0c      	bge.n	800cbec <HAL_RCC_OscConfig+0xa38>
 800cbd2:	4b05      	ldr	r3, [pc, #20]	; (800cbe8 <HAL_RCC_OscConfig+0xa34>)
 800cbd4:	68db      	ldr	r3, [r3, #12]
 800cbd6:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	6a1b      	ldr	r3, [r3, #32]
 800cbde:	015b      	lsls	r3, r3, #5
 800cbe0:	4901      	ldr	r1, [pc, #4]	; (800cbe8 <HAL_RCC_OscConfig+0xa34>)
 800cbe2:	4313      	orrs	r3, r2
 800cbe4:	60cb      	str	r3, [r1, #12]
 800cbe6:	e01b      	b.n	800cc20 <HAL_RCC_OscConfig+0xa6c>
 800cbe8:	46020c00 	.word	0x46020c00
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cbf4:	d30a      	bcc.n	800cc0c <HAL_RCC_OscConfig+0xa58>
 800cbf6:	4ba1      	ldr	r3, [pc, #644]	; (800ce7c <HAL_RCC_OscConfig+0xcc8>)
 800cbf8:	68db      	ldr	r3, [r3, #12]
 800cbfa:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	6a1b      	ldr	r3, [r3, #32]
 800cc02:	029b      	lsls	r3, r3, #10
 800cc04:	499d      	ldr	r1, [pc, #628]	; (800ce7c <HAL_RCC_OscConfig+0xcc8>)
 800cc06:	4313      	orrs	r3, r2
 800cc08:	60cb      	str	r3, [r1, #12]
 800cc0a:	e009      	b.n	800cc20 <HAL_RCC_OscConfig+0xa6c>
 800cc0c:	4b9b      	ldr	r3, [pc, #620]	; (800ce7c <HAL_RCC_OscConfig+0xcc8>)
 800cc0e:	68db      	ldr	r3, [r3, #12]
 800cc10:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	6a1b      	ldr	r3, [r3, #32]
 800cc18:	03db      	lsls	r3, r3, #15
 800cc1a:	4998      	ldr	r1, [pc, #608]	; (800ce7c <HAL_RCC_OscConfig+0xcc8>)
 800cc1c:	4313      	orrs	r3, r2
 800cc1e:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 800cc20:	4b96      	ldr	r3, [pc, #600]	; (800ce7c <HAL_RCC_OscConfig+0xcc8>)
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	4a95      	ldr	r2, [pc, #596]	; (800ce7c <HAL_RCC_OscConfig+0xcc8>)
 800cc26:	f043 0310 	orr.w	r3, r3, #16
 800cc2a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800cc2c:	f7fd f8ac 	bl	8009d88 <HAL_GetTick>
 800cc30:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800cc32:	e008      	b.n	800cc46 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800cc34:	f7fd f8a8 	bl	8009d88 <HAL_GetTick>
 800cc38:	4602      	mov	r2, r0
 800cc3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc3c:	1ad3      	subs	r3, r2, r3
 800cc3e:	2b02      	cmp	r3, #2
 800cc40:	d901      	bls.n	800cc46 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 800cc42:	2303      	movs	r3, #3
 800cc44:	e18b      	b.n	800cf5e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800cc46:	4b8d      	ldr	r3, [pc, #564]	; (800ce7c <HAL_RCC_OscConfig+0xcc8>)
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	f003 0320 	and.w	r3, r3, #32
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d0f0      	beq.n	800cc34 <HAL_RCC_OscConfig+0xa80>
 800cc52:	e018      	b.n	800cc86 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 800cc54:	4b89      	ldr	r3, [pc, #548]	; (800ce7c <HAL_RCC_OscConfig+0xcc8>)
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	4a88      	ldr	r2, [pc, #544]	; (800ce7c <HAL_RCC_OscConfig+0xcc8>)
 800cc5a:	f023 0310 	bic.w	r3, r3, #16
 800cc5e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800cc60:	f7fd f892 	bl	8009d88 <HAL_GetTick>
 800cc64:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800cc66:	e008      	b.n	800cc7a <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800cc68:	f7fd f88e 	bl	8009d88 <HAL_GetTick>
 800cc6c:	4602      	mov	r2, r0
 800cc6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc70:	1ad3      	subs	r3, r2, r3
 800cc72:	2b02      	cmp	r3, #2
 800cc74:	d901      	bls.n	800cc7a <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 800cc76:	2303      	movs	r3, #3
 800cc78:	e171      	b.n	800cf5e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800cc7a:	4b80      	ldr	r3, [pc, #512]	; (800ce7c <HAL_RCC_OscConfig+0xcc8>)
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	f003 0320 	and.w	r3, r3, #32
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d1f0      	bne.n	800cc68 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	f000 8166 	beq.w	800cf5c <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 800cc90:	2300      	movs	r3, #0
 800cc92:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800cc96:	4b79      	ldr	r3, [pc, #484]	; (800ce7c <HAL_RCC_OscConfig+0xcc8>)
 800cc98:	69db      	ldr	r3, [r3, #28]
 800cc9a:	f003 030c 	and.w	r3, r3, #12
 800cc9e:	2b0c      	cmp	r3, #12
 800cca0:	f000 80f2 	beq.w	800ce88 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cca8:	2b02      	cmp	r3, #2
 800ccaa:	f040 80c5 	bne.w	800ce38 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800ccae:	4b73      	ldr	r3, [pc, #460]	; (800ce7c <HAL_RCC_OscConfig+0xcc8>)
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	4a72      	ldr	r2, [pc, #456]	; (800ce7c <HAL_RCC_OscConfig+0xcc8>)
 800ccb4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ccb8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800ccba:	f7fd f865 	bl	8009d88 <HAL_GetTick>
 800ccbe:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800ccc0:	e008      	b.n	800ccd4 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ccc2:	f7fd f861 	bl	8009d88 <HAL_GetTick>
 800ccc6:	4602      	mov	r2, r0
 800ccc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccca:	1ad3      	subs	r3, r2, r3
 800cccc:	2b02      	cmp	r3, #2
 800ccce:	d901      	bls.n	800ccd4 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 800ccd0:	2303      	movs	r3, #3
 800ccd2:	e144      	b.n	800cf5e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800ccd4:	4b69      	ldr	r3, [pc, #420]	; (800ce7c <HAL_RCC_OscConfig+0xcc8>)
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d1f0      	bne.n	800ccc2 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800cce0:	4b66      	ldr	r3, [pc, #408]	; (800ce7c <HAL_RCC_OscConfig+0xcc8>)
 800cce2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cce6:	f003 0304 	and.w	r3, r3, #4
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d111      	bne.n	800cd12 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 800ccee:	4b63      	ldr	r3, [pc, #396]	; (800ce7c <HAL_RCC_OscConfig+0xcc8>)
 800ccf0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ccf4:	4a61      	ldr	r2, [pc, #388]	; (800ce7c <HAL_RCC_OscConfig+0xcc8>)
 800ccf6:	f043 0304 	orr.w	r3, r3, #4
 800ccfa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800ccfe:	4b5f      	ldr	r3, [pc, #380]	; (800ce7c <HAL_RCC_OscConfig+0xcc8>)
 800cd00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cd04:	f003 0304 	and.w	r3, r3, #4
 800cd08:	60fb      	str	r3, [r7, #12]
 800cd0a:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 800cd0c:	2301      	movs	r3, #1
 800cd0e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 800cd12:	4b5b      	ldr	r3, [pc, #364]	; (800ce80 <HAL_RCC_OscConfig+0xccc>)
 800cd14:	68db      	ldr	r3, [r3, #12]
 800cd16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cd1a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800cd1e:	d102      	bne.n	800cd26 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 800cd20:	2301      	movs	r3, #1
 800cd22:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800cd26:	4b56      	ldr	r3, [pc, #344]	; (800ce80 <HAL_RCC_OscConfig+0xccc>)
 800cd28:	68db      	ldr	r3, [r3, #12]
 800cd2a:	4a55      	ldr	r2, [pc, #340]	; (800ce80 <HAL_RCC_OscConfig+0xccc>)
 800cd2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800cd30:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 800cd32:	4b52      	ldr	r3, [pc, #328]	; (800ce7c <HAL_RCC_OscConfig+0xcc8>)
 800cd34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cd3a:	f023 0303 	bic.w	r3, r3, #3
 800cd3e:	687a      	ldr	r2, [r7, #4]
 800cd40:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800cd42:	687a      	ldr	r2, [r7, #4]
 800cd44:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800cd46:	3a01      	subs	r2, #1
 800cd48:	0212      	lsls	r2, r2, #8
 800cd4a:	4311      	orrs	r1, r2
 800cd4c:	687a      	ldr	r2, [r7, #4]
 800cd4e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800cd50:	430a      	orrs	r2, r1
 800cd52:	494a      	ldr	r1, [pc, #296]	; (800ce7c <HAL_RCC_OscConfig+0xcc8>)
 800cd54:	4313      	orrs	r3, r2
 800cd56:	628b      	str	r3, [r1, #40]	; 0x28
 800cd58:	4b48      	ldr	r3, [pc, #288]	; (800ce7c <HAL_RCC_OscConfig+0xcc8>)
 800cd5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cd5c:	4b49      	ldr	r3, [pc, #292]	; (800ce84 <HAL_RCC_OscConfig+0xcd0>)
 800cd5e:	4013      	ands	r3, r2
 800cd60:	687a      	ldr	r2, [r7, #4]
 800cd62:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800cd64:	3a01      	subs	r2, #1
 800cd66:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800cd6a:	687a      	ldr	r2, [r7, #4]
 800cd6c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800cd6e:	3a01      	subs	r2, #1
 800cd70:	0252      	lsls	r2, r2, #9
 800cd72:	b292      	uxth	r2, r2
 800cd74:	4311      	orrs	r1, r2
 800cd76:	687a      	ldr	r2, [r7, #4]
 800cd78:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800cd7a:	3a01      	subs	r2, #1
 800cd7c:	0412      	lsls	r2, r2, #16
 800cd7e:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800cd82:	4311      	orrs	r1, r2
 800cd84:	687a      	ldr	r2, [r7, #4]
 800cd86:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800cd88:	3a01      	subs	r2, #1
 800cd8a:	0612      	lsls	r2, r2, #24
 800cd8c:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800cd90:	430a      	orrs	r2, r1
 800cd92:	493a      	ldr	r1, [pc, #232]	; (800ce7c <HAL_RCC_OscConfig+0xcc8>)
 800cd94:	4313      	orrs	r3, r2
 800cd96:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800cd98:	4b38      	ldr	r3, [pc, #224]	; (800ce7c <HAL_RCC_OscConfig+0xcc8>)
 800cd9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd9c:	4a37      	ldr	r2, [pc, #220]	; (800ce7c <HAL_RCC_OscConfig+0xcc8>)
 800cd9e:	f023 0310 	bic.w	r3, r3, #16
 800cda2:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cda8:	4a34      	ldr	r2, [pc, #208]	; (800ce7c <HAL_RCC_OscConfig+0xcc8>)
 800cdaa:	00db      	lsls	r3, r3, #3
 800cdac:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800cdae:	4b33      	ldr	r3, [pc, #204]	; (800ce7c <HAL_RCC_OscConfig+0xcc8>)
 800cdb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdb2:	4a32      	ldr	r2, [pc, #200]	; (800ce7c <HAL_RCC_OscConfig+0xcc8>)
 800cdb4:	f043 0310 	orr.w	r3, r3, #16
 800cdb8:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 800cdba:	4b30      	ldr	r3, [pc, #192]	; (800ce7c <HAL_RCC_OscConfig+0xcc8>)
 800cdbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdbe:	f023 020c 	bic.w	r2, r3, #12
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cdc6:	492d      	ldr	r1, [pc, #180]	; (800ce7c <HAL_RCC_OscConfig+0xcc8>)
 800cdc8:	4313      	orrs	r3, r2
 800cdca:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 800cdcc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cdd0:	2b01      	cmp	r3, #1
 800cdd2:	d105      	bne.n	800cde0 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800cdd4:	4b2a      	ldr	r3, [pc, #168]	; (800ce80 <HAL_RCC_OscConfig+0xccc>)
 800cdd6:	68db      	ldr	r3, [r3, #12]
 800cdd8:	4a29      	ldr	r2, [pc, #164]	; (800ce80 <HAL_RCC_OscConfig+0xccc>)
 800cdda:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800cdde:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 800cde0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800cde4:	2b01      	cmp	r3, #1
 800cde6:	d107      	bne.n	800cdf8 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 800cde8:	4b24      	ldr	r3, [pc, #144]	; (800ce7c <HAL_RCC_OscConfig+0xcc8>)
 800cdea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cdee:	4a23      	ldr	r2, [pc, #140]	; (800ce7c <HAL_RCC_OscConfig+0xcc8>)
 800cdf0:	f023 0304 	bic.w	r3, r3, #4
 800cdf4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800cdf8:	4b20      	ldr	r3, [pc, #128]	; (800ce7c <HAL_RCC_OscConfig+0xcc8>)
 800cdfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdfc:	4a1f      	ldr	r2, [pc, #124]	; (800ce7c <HAL_RCC_OscConfig+0xcc8>)
 800cdfe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ce02:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 800ce04:	4b1d      	ldr	r3, [pc, #116]	; (800ce7c <HAL_RCC_OscConfig+0xcc8>)
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	4a1c      	ldr	r2, [pc, #112]	; (800ce7c <HAL_RCC_OscConfig+0xcc8>)
 800ce0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ce0e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800ce10:	f7fc ffba 	bl	8009d88 <HAL_GetTick>
 800ce14:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800ce16:	e008      	b.n	800ce2a <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ce18:	f7fc ffb6 	bl	8009d88 <HAL_GetTick>
 800ce1c:	4602      	mov	r2, r0
 800ce1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce20:	1ad3      	subs	r3, r2, r3
 800ce22:	2b02      	cmp	r3, #2
 800ce24:	d901      	bls.n	800ce2a <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 800ce26:	2303      	movs	r3, #3
 800ce28:	e099      	b.n	800cf5e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800ce2a:	4b14      	ldr	r3, [pc, #80]	; (800ce7c <HAL_RCC_OscConfig+0xcc8>)
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d0f0      	beq.n	800ce18 <HAL_RCC_OscConfig+0xc64>
 800ce36:	e091      	b.n	800cf5c <HAL_RCC_OscConfig+0xda8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800ce38:	4b10      	ldr	r3, [pc, #64]	; (800ce7c <HAL_RCC_OscConfig+0xcc8>)
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	4a0f      	ldr	r2, [pc, #60]	; (800ce7c <HAL_RCC_OscConfig+0xcc8>)
 800ce3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ce42:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800ce44:	f7fc ffa0 	bl	8009d88 <HAL_GetTick>
 800ce48:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800ce4a:	e008      	b.n	800ce5e <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ce4c:	f7fc ff9c 	bl	8009d88 <HAL_GetTick>
 800ce50:	4602      	mov	r2, r0
 800ce52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce54:	1ad3      	subs	r3, r2, r3
 800ce56:	2b02      	cmp	r3, #2
 800ce58:	d901      	bls.n	800ce5e <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 800ce5a:	2303      	movs	r3, #3
 800ce5c:	e07f      	b.n	800cf5e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800ce5e:	4b07      	ldr	r3, [pc, #28]	; (800ce7c <HAL_RCC_OscConfig+0xcc8>)
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d1f0      	bne.n	800ce4c <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800ce6a:	4b04      	ldr	r3, [pc, #16]	; (800ce7c <HAL_RCC_OscConfig+0xcc8>)
 800ce6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce6e:	4a03      	ldr	r2, [pc, #12]	; (800ce7c <HAL_RCC_OscConfig+0xcc8>)
 800ce70:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800ce74:	f023 0303 	bic.w	r3, r3, #3
 800ce78:	6293      	str	r3, [r2, #40]	; 0x28
 800ce7a:	e06f      	b.n	800cf5c <HAL_RCC_OscConfig+0xda8>
 800ce7c:	46020c00 	.word	0x46020c00
 800ce80:	46020800 	.word	0x46020800
 800ce84:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800ce88:	4b37      	ldr	r3, [pc, #220]	; (800cf68 <HAL_RCC_OscConfig+0xdb4>)
 800ce8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce8c:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800ce8e:	4b36      	ldr	r3, [pc, #216]	; (800cf68 <HAL_RCC_OscConfig+0xdb4>)
 800ce90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce92:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce98:	2b01      	cmp	r3, #1
 800ce9a:	d039      	beq.n	800cf10 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800ce9c:	69fb      	ldr	r3, [r7, #28]
 800ce9e:	f003 0203 	and.w	r2, r3, #3
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800cea6:	429a      	cmp	r2, r3
 800cea8:	d132      	bne.n	800cf10 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800ceaa:	69fb      	ldr	r3, [r7, #28]
 800ceac:	0a1b      	lsrs	r3, r3, #8
 800ceae:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ceb6:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800ceb8:	429a      	cmp	r2, r3
 800ceba:	d129      	bne.n	800cf10 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800cebc:	69fb      	ldr	r3, [r7, #28]
 800cebe:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800cec6:	429a      	cmp	r2, r3
 800cec8:	d122      	bne.n	800cf10 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ceca:	69bb      	ldr	r3, [r7, #24]
 800cecc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ced4:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800ced6:	429a      	cmp	r2, r3
 800ced8:	d11a      	bne.n	800cf10 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800ceda:	69bb      	ldr	r3, [r7, #24]
 800cedc:	0a5b      	lsrs	r3, r3, #9
 800cede:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cee6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800cee8:	429a      	cmp	r2, r3
 800ceea:	d111      	bne.n	800cf10 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800ceec:	69bb      	ldr	r3, [r7, #24]
 800ceee:	0c1b      	lsrs	r3, r3, #16
 800cef0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cef8:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800cefa:	429a      	cmp	r2, r3
 800cefc:	d108      	bne.n	800cf10 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800cefe:	69bb      	ldr	r3, [r7, #24]
 800cf00:	0e1b      	lsrs	r3, r3, #24
 800cf02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cf0a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800cf0c:	429a      	cmp	r2, r3
 800cf0e:	d001      	beq.n	800cf14 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 800cf10:	2301      	movs	r3, #1
 800cf12:	e024      	b.n	800cf5e <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800cf14:	4b14      	ldr	r3, [pc, #80]	; (800cf68 <HAL_RCC_OscConfig+0xdb4>)
 800cf16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf18:	08db      	lsrs	r3, r3, #3
 800cf1a:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800cf22:	429a      	cmp	r2, r3
 800cf24:	d01a      	beq.n	800cf5c <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800cf26:	4b10      	ldr	r3, [pc, #64]	; (800cf68 <HAL_RCC_OscConfig+0xdb4>)
 800cf28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf2a:	4a0f      	ldr	r2, [pc, #60]	; (800cf68 <HAL_RCC_OscConfig+0xdb4>)
 800cf2c:	f023 0310 	bic.w	r3, r3, #16
 800cf30:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cf32:	f7fc ff29 	bl	8009d88 <HAL_GetTick>
 800cf36:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 800cf38:	bf00      	nop
 800cf3a:	f7fc ff25 	bl	8009d88 <HAL_GetTick>
 800cf3e:	4602      	mov	r2, r0
 800cf40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf42:	4293      	cmp	r3, r2
 800cf44:	d0f9      	beq.n	800cf3a <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cf4a:	4a07      	ldr	r2, [pc, #28]	; (800cf68 <HAL_RCC_OscConfig+0xdb4>)
 800cf4c:	00db      	lsls	r3, r3, #3
 800cf4e:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800cf50:	4b05      	ldr	r3, [pc, #20]	; (800cf68 <HAL_RCC_OscConfig+0xdb4>)
 800cf52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf54:	4a04      	ldr	r2, [pc, #16]	; (800cf68 <HAL_RCC_OscConfig+0xdb4>)
 800cf56:	f043 0310 	orr.w	r3, r3, #16
 800cf5a:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }
  }
  return HAL_OK;
 800cf5c:	2300      	movs	r3, #0
}
 800cf5e:	4618      	mov	r0, r3
 800cf60:	3738      	adds	r7, #56	; 0x38
 800cf62:	46bd      	mov	sp, r7
 800cf64:	bd80      	pop	{r7, pc}
 800cf66:	bf00      	nop
 800cf68:	46020c00 	.word	0x46020c00

0800cf6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 800cf6c:	b580      	push	{r7, lr}
 800cf6e:	b086      	sub	sp, #24
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	6078      	str	r0, [r7, #4]
 800cf74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d101      	bne.n	800cf80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800cf7c:	2301      	movs	r3, #1
 800cf7e:	e1d9      	b.n	800d334 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800cf80:	4b9b      	ldr	r3, [pc, #620]	; (800d1f0 <HAL_RCC_ClockConfig+0x284>)
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	f003 030f 	and.w	r3, r3, #15
 800cf88:	683a      	ldr	r2, [r7, #0]
 800cf8a:	429a      	cmp	r2, r3
 800cf8c:	d910      	bls.n	800cfb0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cf8e:	4b98      	ldr	r3, [pc, #608]	; (800d1f0 <HAL_RCC_ClockConfig+0x284>)
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	f023 020f 	bic.w	r2, r3, #15
 800cf96:	4996      	ldr	r1, [pc, #600]	; (800d1f0 <HAL_RCC_ClockConfig+0x284>)
 800cf98:	683b      	ldr	r3, [r7, #0]
 800cf9a:	4313      	orrs	r3, r2
 800cf9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cf9e:	4b94      	ldr	r3, [pc, #592]	; (800d1f0 <HAL_RCC_ClockConfig+0x284>)
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	f003 030f 	and.w	r3, r3, #15
 800cfa6:	683a      	ldr	r2, [r7, #0]
 800cfa8:	429a      	cmp	r2, r3
 800cfaa:	d001      	beq.n	800cfb0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800cfac:	2301      	movs	r3, #1
 800cfae:	e1c1      	b.n	800d334 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	f003 0310 	and.w	r3, r3, #16
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d010      	beq.n	800cfde <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	695a      	ldr	r2, [r3, #20]
 800cfc0:	4b8c      	ldr	r3, [pc, #560]	; (800d1f4 <HAL_RCC_ClockConfig+0x288>)
 800cfc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfc4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800cfc8:	429a      	cmp	r2, r3
 800cfca:	d908      	bls.n	800cfde <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 800cfcc:	4b89      	ldr	r3, [pc, #548]	; (800d1f4 <HAL_RCC_ClockConfig+0x288>)
 800cfce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfd0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	695b      	ldr	r3, [r3, #20]
 800cfd8:	4986      	ldr	r1, [pc, #536]	; (800d1f4 <HAL_RCC_ClockConfig+0x288>)
 800cfda:	4313      	orrs	r3, r2
 800cfdc:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	f003 0308 	and.w	r3, r3, #8
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d012      	beq.n	800d010 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	691a      	ldr	r2, [r3, #16]
 800cfee:	4b81      	ldr	r3, [pc, #516]	; (800d1f4 <HAL_RCC_ClockConfig+0x288>)
 800cff0:	6a1b      	ldr	r3, [r3, #32]
 800cff2:	091b      	lsrs	r3, r3, #4
 800cff4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800cff8:	429a      	cmp	r2, r3
 800cffa:	d909      	bls.n	800d010 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800cffc:	4b7d      	ldr	r3, [pc, #500]	; (800d1f4 <HAL_RCC_ClockConfig+0x288>)
 800cffe:	6a1b      	ldr	r3, [r3, #32]
 800d000:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	691b      	ldr	r3, [r3, #16]
 800d008:	011b      	lsls	r3, r3, #4
 800d00a:	497a      	ldr	r1, [pc, #488]	; (800d1f4 <HAL_RCC_ClockConfig+0x288>)
 800d00c:	4313      	orrs	r3, r2
 800d00e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	f003 0304 	and.w	r3, r3, #4
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d010      	beq.n	800d03e <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	68da      	ldr	r2, [r3, #12]
 800d020:	4b74      	ldr	r3, [pc, #464]	; (800d1f4 <HAL_RCC_ClockConfig+0x288>)
 800d022:	6a1b      	ldr	r3, [r3, #32]
 800d024:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d028:	429a      	cmp	r2, r3
 800d02a:	d908      	bls.n	800d03e <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800d02c:	4b71      	ldr	r3, [pc, #452]	; (800d1f4 <HAL_RCC_ClockConfig+0x288>)
 800d02e:	6a1b      	ldr	r3, [r3, #32]
 800d030:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	68db      	ldr	r3, [r3, #12]
 800d038:	496e      	ldr	r1, [pc, #440]	; (800d1f4 <HAL_RCC_ClockConfig+0x288>)
 800d03a:	4313      	orrs	r3, r2
 800d03c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	f003 0302 	and.w	r3, r3, #2
 800d046:	2b00      	cmp	r3, #0
 800d048:	d010      	beq.n	800d06c <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	689a      	ldr	r2, [r3, #8]
 800d04e:	4b69      	ldr	r3, [pc, #420]	; (800d1f4 <HAL_RCC_ClockConfig+0x288>)
 800d050:	6a1b      	ldr	r3, [r3, #32]
 800d052:	f003 030f 	and.w	r3, r3, #15
 800d056:	429a      	cmp	r2, r3
 800d058:	d908      	bls.n	800d06c <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800d05a:	4b66      	ldr	r3, [pc, #408]	; (800d1f4 <HAL_RCC_ClockConfig+0x288>)
 800d05c:	6a1b      	ldr	r3, [r3, #32]
 800d05e:	f023 020f 	bic.w	r2, r3, #15
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	689b      	ldr	r3, [r3, #8]
 800d066:	4963      	ldr	r1, [pc, #396]	; (800d1f4 <HAL_RCC_ClockConfig+0x288>)
 800d068:	4313      	orrs	r3, r2
 800d06a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	f003 0301 	and.w	r3, r3, #1
 800d074:	2b00      	cmp	r3, #0
 800d076:	f000 80d2 	beq.w	800d21e <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800d07a:	2300      	movs	r3, #0
 800d07c:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	685b      	ldr	r3, [r3, #4]
 800d082:	2b03      	cmp	r3, #3
 800d084:	d143      	bne.n	800d10e <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d086:	4b5b      	ldr	r3, [pc, #364]	; (800d1f4 <HAL_RCC_ClockConfig+0x288>)
 800d088:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d08c:	f003 0304 	and.w	r3, r3, #4
 800d090:	2b00      	cmp	r3, #0
 800d092:	d110      	bne.n	800d0b6 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800d094:	4b57      	ldr	r3, [pc, #348]	; (800d1f4 <HAL_RCC_ClockConfig+0x288>)
 800d096:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d09a:	4a56      	ldr	r2, [pc, #344]	; (800d1f4 <HAL_RCC_ClockConfig+0x288>)
 800d09c:	f043 0304 	orr.w	r3, r3, #4
 800d0a0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800d0a4:	4b53      	ldr	r3, [pc, #332]	; (800d1f4 <HAL_RCC_ClockConfig+0x288>)
 800d0a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d0aa:	f003 0304 	and.w	r3, r3, #4
 800d0ae:	60bb      	str	r3, [r7, #8]
 800d0b0:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800d0b2:	2301      	movs	r3, #1
 800d0b4:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800d0b6:	f7fc fe67 	bl	8009d88 <HAL_GetTick>
 800d0ba:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 800d0bc:	4b4e      	ldr	r3, [pc, #312]	; (800d1f8 <HAL_RCC_ClockConfig+0x28c>)
 800d0be:	68db      	ldr	r3, [r3, #12]
 800d0c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d00f      	beq.n	800d0e8 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800d0c8:	e008      	b.n	800d0dc <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800d0ca:	f7fc fe5d 	bl	8009d88 <HAL_GetTick>
 800d0ce:	4602      	mov	r2, r0
 800d0d0:	693b      	ldr	r3, [r7, #16]
 800d0d2:	1ad3      	subs	r3, r2, r3
 800d0d4:	2b02      	cmp	r3, #2
 800d0d6:	d901      	bls.n	800d0dc <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 800d0d8:	2303      	movs	r3, #3
 800d0da:	e12b      	b.n	800d334 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800d0dc:	4b46      	ldr	r3, [pc, #280]	; (800d1f8 <HAL_RCC_ClockConfig+0x28c>)
 800d0de:	68db      	ldr	r3, [r3, #12]
 800d0e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d0f0      	beq.n	800d0ca <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800d0e8:	7dfb      	ldrb	r3, [r7, #23]
 800d0ea:	2b01      	cmp	r3, #1
 800d0ec:	d107      	bne.n	800d0fe <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800d0ee:	4b41      	ldr	r3, [pc, #260]	; (800d1f4 <HAL_RCC_ClockConfig+0x288>)
 800d0f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d0f4:	4a3f      	ldr	r2, [pc, #252]	; (800d1f4 <HAL_RCC_ClockConfig+0x288>)
 800d0f6:	f023 0304 	bic.w	r3, r3, #4
 800d0fa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800d0fe:	4b3d      	ldr	r3, [pc, #244]	; (800d1f4 <HAL_RCC_ClockConfig+0x288>)
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d106:	2b00      	cmp	r3, #0
 800d108:	d121      	bne.n	800d14e <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800d10a:	2301      	movs	r3, #1
 800d10c:	e112      	b.n	800d334 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	685b      	ldr	r3, [r3, #4]
 800d112:	2b02      	cmp	r3, #2
 800d114:	d107      	bne.n	800d126 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800d116:	4b37      	ldr	r3, [pc, #220]	; (800d1f4 <HAL_RCC_ClockConfig+0x288>)
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d115      	bne.n	800d14e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800d122:	2301      	movs	r3, #1
 800d124:	e106      	b.n	800d334 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	685b      	ldr	r3, [r3, #4]
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d107      	bne.n	800d13e <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800d12e:	4b31      	ldr	r3, [pc, #196]	; (800d1f4 <HAL_RCC_ClockConfig+0x288>)
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	f003 0304 	and.w	r3, r3, #4
 800d136:	2b00      	cmp	r3, #0
 800d138:	d109      	bne.n	800d14e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800d13a:	2301      	movs	r3, #1
 800d13c:	e0fa      	b.n	800d334 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800d13e:	4b2d      	ldr	r3, [pc, #180]	; (800d1f4 <HAL_RCC_ClockConfig+0x288>)
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d146:	2b00      	cmp	r3, #0
 800d148:	d101      	bne.n	800d14e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800d14a:	2301      	movs	r3, #1
 800d14c:	e0f2      	b.n	800d334 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800d14e:	4b29      	ldr	r3, [pc, #164]	; (800d1f4 <HAL_RCC_ClockConfig+0x288>)
 800d150:	69db      	ldr	r3, [r3, #28]
 800d152:	f023 0203 	bic.w	r2, r3, #3
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	685b      	ldr	r3, [r3, #4]
 800d15a:	4926      	ldr	r1, [pc, #152]	; (800d1f4 <HAL_RCC_ClockConfig+0x288>)
 800d15c:	4313      	orrs	r3, r2
 800d15e:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 800d160:	f7fc fe12 	bl	8009d88 <HAL_GetTick>
 800d164:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	685b      	ldr	r3, [r3, #4]
 800d16a:	2b03      	cmp	r3, #3
 800d16c:	d112      	bne.n	800d194 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800d16e:	e00a      	b.n	800d186 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d170:	f7fc fe0a 	bl	8009d88 <HAL_GetTick>
 800d174:	4602      	mov	r2, r0
 800d176:	693b      	ldr	r3, [r7, #16]
 800d178:	1ad3      	subs	r3, r2, r3
 800d17a:	f241 3288 	movw	r2, #5000	; 0x1388
 800d17e:	4293      	cmp	r3, r2
 800d180:	d901      	bls.n	800d186 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800d182:	2303      	movs	r3, #3
 800d184:	e0d6      	b.n	800d334 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800d186:	4b1b      	ldr	r3, [pc, #108]	; (800d1f4 <HAL_RCC_ClockConfig+0x288>)
 800d188:	69db      	ldr	r3, [r3, #28]
 800d18a:	f003 030c 	and.w	r3, r3, #12
 800d18e:	2b0c      	cmp	r3, #12
 800d190:	d1ee      	bne.n	800d170 <HAL_RCC_ClockConfig+0x204>
 800d192:	e044      	b.n	800d21e <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	685b      	ldr	r3, [r3, #4]
 800d198:	2b02      	cmp	r3, #2
 800d19a:	d112      	bne.n	800d1c2 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800d19c:	e00a      	b.n	800d1b4 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d19e:	f7fc fdf3 	bl	8009d88 <HAL_GetTick>
 800d1a2:	4602      	mov	r2, r0
 800d1a4:	693b      	ldr	r3, [r7, #16]
 800d1a6:	1ad3      	subs	r3, r2, r3
 800d1a8:	f241 3288 	movw	r2, #5000	; 0x1388
 800d1ac:	4293      	cmp	r3, r2
 800d1ae:	d901      	bls.n	800d1b4 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 800d1b0:	2303      	movs	r3, #3
 800d1b2:	e0bf      	b.n	800d334 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800d1b4:	4b0f      	ldr	r3, [pc, #60]	; (800d1f4 <HAL_RCC_ClockConfig+0x288>)
 800d1b6:	69db      	ldr	r3, [r3, #28]
 800d1b8:	f003 030c 	and.w	r3, r3, #12
 800d1bc:	2b08      	cmp	r3, #8
 800d1be:	d1ee      	bne.n	800d19e <HAL_RCC_ClockConfig+0x232>
 800d1c0:	e02d      	b.n	800d21e <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	685b      	ldr	r3, [r3, #4]
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d123      	bne.n	800d212 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800d1ca:	e00a      	b.n	800d1e2 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d1cc:	f7fc fddc 	bl	8009d88 <HAL_GetTick>
 800d1d0:	4602      	mov	r2, r0
 800d1d2:	693b      	ldr	r3, [r7, #16]
 800d1d4:	1ad3      	subs	r3, r2, r3
 800d1d6:	f241 3288 	movw	r2, #5000	; 0x1388
 800d1da:	4293      	cmp	r3, r2
 800d1dc:	d901      	bls.n	800d1e2 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800d1de:	2303      	movs	r3, #3
 800d1e0:	e0a8      	b.n	800d334 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800d1e2:	4b04      	ldr	r3, [pc, #16]	; (800d1f4 <HAL_RCC_ClockConfig+0x288>)
 800d1e4:	69db      	ldr	r3, [r3, #28]
 800d1e6:	f003 030c 	and.w	r3, r3, #12
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d1ee      	bne.n	800d1cc <HAL_RCC_ClockConfig+0x260>
 800d1ee:	e016      	b.n	800d21e <HAL_RCC_ClockConfig+0x2b2>
 800d1f0:	40022000 	.word	0x40022000
 800d1f4:	46020c00 	.word	0x46020c00
 800d1f8:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d1fc:	f7fc fdc4 	bl	8009d88 <HAL_GetTick>
 800d200:	4602      	mov	r2, r0
 800d202:	693b      	ldr	r3, [r7, #16]
 800d204:	1ad3      	subs	r3, r2, r3
 800d206:	f241 3288 	movw	r2, #5000	; 0x1388
 800d20a:	4293      	cmp	r3, r2
 800d20c:	d901      	bls.n	800d212 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800d20e:	2303      	movs	r3, #3
 800d210:	e090      	b.n	800d334 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800d212:	4b4a      	ldr	r3, [pc, #296]	; (800d33c <HAL_RCC_ClockConfig+0x3d0>)
 800d214:	69db      	ldr	r3, [r3, #28]
 800d216:	f003 030c 	and.w	r3, r3, #12
 800d21a:	2b04      	cmp	r3, #4
 800d21c:	d1ee      	bne.n	800d1fc <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	f003 0302 	and.w	r3, r3, #2
 800d226:	2b00      	cmp	r3, #0
 800d228:	d010      	beq.n	800d24c <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	689a      	ldr	r2, [r3, #8]
 800d22e:	4b43      	ldr	r3, [pc, #268]	; (800d33c <HAL_RCC_ClockConfig+0x3d0>)
 800d230:	6a1b      	ldr	r3, [r3, #32]
 800d232:	f003 030f 	and.w	r3, r3, #15
 800d236:	429a      	cmp	r2, r3
 800d238:	d208      	bcs.n	800d24c <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800d23a:	4b40      	ldr	r3, [pc, #256]	; (800d33c <HAL_RCC_ClockConfig+0x3d0>)
 800d23c:	6a1b      	ldr	r3, [r3, #32]
 800d23e:	f023 020f 	bic.w	r2, r3, #15
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	689b      	ldr	r3, [r3, #8]
 800d246:	493d      	ldr	r1, [pc, #244]	; (800d33c <HAL_RCC_ClockConfig+0x3d0>)
 800d248:	4313      	orrs	r3, r2
 800d24a:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800d24c:	4b3c      	ldr	r3, [pc, #240]	; (800d340 <HAL_RCC_ClockConfig+0x3d4>)
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	f003 030f 	and.w	r3, r3, #15
 800d254:	683a      	ldr	r2, [r7, #0]
 800d256:	429a      	cmp	r2, r3
 800d258:	d210      	bcs.n	800d27c <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d25a:	4b39      	ldr	r3, [pc, #228]	; (800d340 <HAL_RCC_ClockConfig+0x3d4>)
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	f023 020f 	bic.w	r2, r3, #15
 800d262:	4937      	ldr	r1, [pc, #220]	; (800d340 <HAL_RCC_ClockConfig+0x3d4>)
 800d264:	683b      	ldr	r3, [r7, #0]
 800d266:	4313      	orrs	r3, r2
 800d268:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d26a:	4b35      	ldr	r3, [pc, #212]	; (800d340 <HAL_RCC_ClockConfig+0x3d4>)
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	f003 030f 	and.w	r3, r3, #15
 800d272:	683a      	ldr	r2, [r7, #0]
 800d274:	429a      	cmp	r2, r3
 800d276:	d001      	beq.n	800d27c <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 800d278:	2301      	movs	r3, #1
 800d27a:	e05b      	b.n	800d334 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	f003 0304 	and.w	r3, r3, #4
 800d284:	2b00      	cmp	r3, #0
 800d286:	d010      	beq.n	800d2aa <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	68da      	ldr	r2, [r3, #12]
 800d28c:	4b2b      	ldr	r3, [pc, #172]	; (800d33c <HAL_RCC_ClockConfig+0x3d0>)
 800d28e:	6a1b      	ldr	r3, [r3, #32]
 800d290:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d294:	429a      	cmp	r2, r3
 800d296:	d208      	bcs.n	800d2aa <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800d298:	4b28      	ldr	r3, [pc, #160]	; (800d33c <HAL_RCC_ClockConfig+0x3d0>)
 800d29a:	6a1b      	ldr	r3, [r3, #32]
 800d29c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	68db      	ldr	r3, [r3, #12]
 800d2a4:	4925      	ldr	r1, [pc, #148]	; (800d33c <HAL_RCC_ClockConfig+0x3d0>)
 800d2a6:	4313      	orrs	r3, r2
 800d2a8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	f003 0308 	and.w	r3, r3, #8
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d012      	beq.n	800d2dc <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	691a      	ldr	r2, [r3, #16]
 800d2ba:	4b20      	ldr	r3, [pc, #128]	; (800d33c <HAL_RCC_ClockConfig+0x3d0>)
 800d2bc:	6a1b      	ldr	r3, [r3, #32]
 800d2be:	091b      	lsrs	r3, r3, #4
 800d2c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d2c4:	429a      	cmp	r2, r3
 800d2c6:	d209      	bcs.n	800d2dc <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800d2c8:	4b1c      	ldr	r3, [pc, #112]	; (800d33c <HAL_RCC_ClockConfig+0x3d0>)
 800d2ca:	6a1b      	ldr	r3, [r3, #32]
 800d2cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	691b      	ldr	r3, [r3, #16]
 800d2d4:	011b      	lsls	r3, r3, #4
 800d2d6:	4919      	ldr	r1, [pc, #100]	; (800d33c <HAL_RCC_ClockConfig+0x3d0>)
 800d2d8:	4313      	orrs	r3, r2
 800d2da:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	f003 0310 	and.w	r3, r3, #16
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d010      	beq.n	800d30a <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	695a      	ldr	r2, [r3, #20]
 800d2ec:	4b13      	ldr	r3, [pc, #76]	; (800d33c <HAL_RCC_ClockConfig+0x3d0>)
 800d2ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d2f4:	429a      	cmp	r2, r3
 800d2f6:	d208      	bcs.n	800d30a <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 800d2f8:	4b10      	ldr	r3, [pc, #64]	; (800d33c <HAL_RCC_ClockConfig+0x3d0>)
 800d2fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2fc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	695b      	ldr	r3, [r3, #20]
 800d304:	490d      	ldr	r1, [pc, #52]	; (800d33c <HAL_RCC_ClockConfig+0x3d0>)
 800d306:	4313      	orrs	r3, r2
 800d308:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800d30a:	f000 f821 	bl	800d350 <HAL_RCC_GetSysClockFreq>
 800d30e:	4602      	mov	r2, r0
 800d310:	4b0a      	ldr	r3, [pc, #40]	; (800d33c <HAL_RCC_ClockConfig+0x3d0>)
 800d312:	6a1b      	ldr	r3, [r3, #32]
 800d314:	f003 030f 	and.w	r3, r3, #15
 800d318:	490a      	ldr	r1, [pc, #40]	; (800d344 <HAL_RCC_ClockConfig+0x3d8>)
 800d31a:	5ccb      	ldrb	r3, [r1, r3]
 800d31c:	fa22 f303 	lsr.w	r3, r2, r3
 800d320:	4a09      	ldr	r2, [pc, #36]	; (800d348 <HAL_RCC_ClockConfig+0x3dc>)
 800d322:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800d324:	4b09      	ldr	r3, [pc, #36]	; (800d34c <HAL_RCC_ClockConfig+0x3e0>)
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	4618      	mov	r0, r3
 800d32a:	f7fc fce3 	bl	8009cf4 <HAL_InitTick>
 800d32e:	4603      	mov	r3, r0
 800d330:	73fb      	strb	r3, [r7, #15]

  return status;
 800d332:	7bfb      	ldrb	r3, [r7, #15]
}
 800d334:	4618      	mov	r0, r3
 800d336:	3718      	adds	r7, #24
 800d338:	46bd      	mov	sp, r7
 800d33a:	bd80      	pop	{r7, pc}
 800d33c:	46020c00 	.word	0x46020c00
 800d340:	40022000 	.word	0x40022000
 800d344:	0801ccdc 	.word	0x0801ccdc
 800d348:	200000f0 	.word	0x200000f0
 800d34c:	200000f4 	.word	0x200000f4

0800d350 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d350:	b480      	push	{r7}
 800d352:	b08b      	sub	sp, #44	; 0x2c
 800d354:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800d356:	2300      	movs	r3, #0
 800d358:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800d35a:	2300      	movs	r3, #0
 800d35c:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d35e:	4b78      	ldr	r3, [pc, #480]	; (800d540 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800d360:	69db      	ldr	r3, [r3, #28]
 800d362:	f003 030c 	and.w	r3, r3, #12
 800d366:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800d368:	4b75      	ldr	r3, [pc, #468]	; (800d540 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800d36a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d36c:	f003 0303 	and.w	r3, r3, #3
 800d370:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800d372:	69bb      	ldr	r3, [r7, #24]
 800d374:	2b00      	cmp	r3, #0
 800d376:	d005      	beq.n	800d384 <HAL_RCC_GetSysClockFreq+0x34>
 800d378:	69bb      	ldr	r3, [r7, #24]
 800d37a:	2b0c      	cmp	r3, #12
 800d37c:	d121      	bne.n	800d3c2 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800d37e:	697b      	ldr	r3, [r7, #20]
 800d380:	2b01      	cmp	r3, #1
 800d382:	d11e      	bne.n	800d3c2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 800d384:	4b6e      	ldr	r3, [pc, #440]	; (800d540 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800d386:	689b      	ldr	r3, [r3, #8]
 800d388:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d107      	bne.n	800d3a0 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 800d390:	4b6b      	ldr	r3, [pc, #428]	; (800d540 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800d392:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800d396:	0b1b      	lsrs	r3, r3, #12
 800d398:	f003 030f 	and.w	r3, r3, #15
 800d39c:	627b      	str	r3, [r7, #36]	; 0x24
 800d39e:	e005      	b.n	800d3ac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 800d3a0:	4b67      	ldr	r3, [pc, #412]	; (800d540 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800d3a2:	689b      	ldr	r3, [r3, #8]
 800d3a4:	0f1b      	lsrs	r3, r3, #28
 800d3a6:	f003 030f 	and.w	r3, r3, #15
 800d3aa:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800d3ac:	4a65      	ldr	r2, [pc, #404]	; (800d544 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800d3ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d3b4:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800d3b6:	69bb      	ldr	r3, [r7, #24]
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d110      	bne.n	800d3de <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800d3bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3be:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800d3c0:	e00d      	b.n	800d3de <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800d3c2:	4b5f      	ldr	r3, [pc, #380]	; (800d540 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800d3c4:	69db      	ldr	r3, [r3, #28]
 800d3c6:	f003 030c 	and.w	r3, r3, #12
 800d3ca:	2b04      	cmp	r3, #4
 800d3cc:	d102      	bne.n	800d3d4 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800d3ce:	4b5e      	ldr	r3, [pc, #376]	; (800d548 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800d3d0:	623b      	str	r3, [r7, #32]
 800d3d2:	e004      	b.n	800d3de <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800d3d4:	69bb      	ldr	r3, [r7, #24]
 800d3d6:	2b08      	cmp	r3, #8
 800d3d8:	d101      	bne.n	800d3de <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800d3da:	4b5b      	ldr	r3, [pc, #364]	; (800d548 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800d3dc:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800d3de:	69bb      	ldr	r3, [r7, #24]
 800d3e0:	2b0c      	cmp	r3, #12
 800d3e2:	f040 80a5 	bne.w	800d530 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800d3e6:	4b56      	ldr	r3, [pc, #344]	; (800d540 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800d3e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3ea:	f003 0303 	and.w	r3, r3, #3
 800d3ee:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800d3f0:	4b53      	ldr	r3, [pc, #332]	; (800d540 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800d3f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3f4:	0a1b      	lsrs	r3, r3, #8
 800d3f6:	f003 030f 	and.w	r3, r3, #15
 800d3fa:	3301      	adds	r3, #1
 800d3fc:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800d3fe:	4b50      	ldr	r3, [pc, #320]	; (800d540 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800d400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d402:	091b      	lsrs	r3, r3, #4
 800d404:	f003 0301 	and.w	r3, r3, #1
 800d408:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800d40a:	4b4d      	ldr	r3, [pc, #308]	; (800d540 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800d40c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d40e:	08db      	lsrs	r3, r3, #3
 800d410:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d414:	68ba      	ldr	r2, [r7, #8]
 800d416:	fb02 f303 	mul.w	r3, r2, r3
 800d41a:	ee07 3a90 	vmov	s15, r3
 800d41e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d422:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 800d426:	693b      	ldr	r3, [r7, #16]
 800d428:	2b02      	cmp	r3, #2
 800d42a:	d003      	beq.n	800d434 <HAL_RCC_GetSysClockFreq+0xe4>
 800d42c:	693b      	ldr	r3, [r7, #16]
 800d42e:	2b03      	cmp	r3, #3
 800d430:	d022      	beq.n	800d478 <HAL_RCC_GetSysClockFreq+0x128>
 800d432:	e043      	b.n	800d4bc <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	ee07 3a90 	vmov	s15, r3
 800d43a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d43e:	eddf 6a43 	vldr	s13, [pc, #268]	; 800d54c <HAL_RCC_GetSysClockFreq+0x1fc>
 800d442:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d446:	4b3e      	ldr	r3, [pc, #248]	; (800d540 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800d448:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d44a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d44e:	ee07 3a90 	vmov	s15, r3
 800d452:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800d456:	ed97 6a01 	vldr	s12, [r7, #4]
 800d45a:	eddf 5a3d 	vldr	s11, [pc, #244]	; 800d550 <HAL_RCC_GetSysClockFreq+0x200>
 800d45e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800d462:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800d466:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d46a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800d46e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d472:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d476:	e046      	b.n	800d506 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	ee07 3a90 	vmov	s15, r3
 800d47e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d482:	eddf 6a32 	vldr	s13, [pc, #200]	; 800d54c <HAL_RCC_GetSysClockFreq+0x1fc>
 800d486:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d48a:	4b2d      	ldr	r3, [pc, #180]	; (800d540 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800d48c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d48e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d492:	ee07 3a90 	vmov	s15, r3
 800d496:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800d49a:	ed97 6a01 	vldr	s12, [r7, #4]
 800d49e:	eddf 5a2c 	vldr	s11, [pc, #176]	; 800d550 <HAL_RCC_GetSysClockFreq+0x200>
 800d4a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800d4a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800d4aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d4ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800d4b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d4b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d4ba:	e024      	b.n	800d506 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800d4bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4be:	ee07 3a90 	vmov	s15, r3
 800d4c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	ee07 3a90 	vmov	s15, r3
 800d4cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d4d4:	4b1a      	ldr	r3, [pc, #104]	; (800d540 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800d4d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d4dc:	ee07 3a90 	vmov	s15, r3
 800d4e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800d4e4:	ed97 6a01 	vldr	s12, [r7, #4]
 800d4e8:	eddf 5a19 	vldr	s11, [pc, #100]	; 800d550 <HAL_RCC_GetSysClockFreq+0x200>
 800d4ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800d4f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800d4f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d4f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800d4fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d500:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d504:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800d506:	4b0e      	ldr	r3, [pc, #56]	; (800d540 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800d508:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d50a:	0e1b      	lsrs	r3, r3, #24
 800d50c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d510:	3301      	adds	r3, #1
 800d512:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 800d514:	683b      	ldr	r3, [r7, #0]
 800d516:	ee07 3a90 	vmov	s15, r3
 800d51a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800d51e:	edd7 6a07 	vldr	s13, [r7, #28]
 800d522:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d526:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d52a:	ee17 3a90 	vmov	r3, s15
 800d52e:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 800d530:	6a3b      	ldr	r3, [r7, #32]
}
 800d532:	4618      	mov	r0, r3
 800d534:	372c      	adds	r7, #44	; 0x2c
 800d536:	46bd      	mov	sp, r7
 800d538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d53c:	4770      	bx	lr
 800d53e:	bf00      	nop
 800d540:	46020c00 	.word	0x46020c00
 800d544:	0801ccf4 	.word	0x0801ccf4
 800d548:	00f42400 	.word	0x00f42400
 800d54c:	4b742400 	.word	0x4b742400
 800d550:	46000000 	.word	0x46000000

0800d554 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d554:	b580      	push	{r7, lr}
 800d556:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800d558:	f7ff fefa 	bl	800d350 <HAL_RCC_GetSysClockFreq>
 800d55c:	4602      	mov	r2, r0
 800d55e:	4b07      	ldr	r3, [pc, #28]	; (800d57c <HAL_RCC_GetHCLKFreq+0x28>)
 800d560:	6a1b      	ldr	r3, [r3, #32]
 800d562:	f003 030f 	and.w	r3, r3, #15
 800d566:	4906      	ldr	r1, [pc, #24]	; (800d580 <HAL_RCC_GetHCLKFreq+0x2c>)
 800d568:	5ccb      	ldrb	r3, [r1, r3]
 800d56a:	fa22 f303 	lsr.w	r3, r2, r3
 800d56e:	4a05      	ldr	r2, [pc, #20]	; (800d584 <HAL_RCC_GetHCLKFreq+0x30>)
 800d570:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800d572:	4b04      	ldr	r3, [pc, #16]	; (800d584 <HAL_RCC_GetHCLKFreq+0x30>)
 800d574:	681b      	ldr	r3, [r3, #0]
}
 800d576:	4618      	mov	r0, r3
 800d578:	bd80      	pop	{r7, pc}
 800d57a:	bf00      	nop
 800d57c:	46020c00 	.word	0x46020c00
 800d580:	0801ccdc 	.word	0x0801ccdc
 800d584:	200000f0 	.word	0x200000f0

0800d588 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d588:	b580      	push	{r7, lr}
 800d58a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 800d58c:	f7ff ffe2 	bl	800d554 <HAL_RCC_GetHCLKFreq>
 800d590:	4602      	mov	r2, r0
 800d592:	4b05      	ldr	r3, [pc, #20]	; (800d5a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800d594:	6a1b      	ldr	r3, [r3, #32]
 800d596:	091b      	lsrs	r3, r3, #4
 800d598:	f003 0307 	and.w	r3, r3, #7
 800d59c:	4903      	ldr	r1, [pc, #12]	; (800d5ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800d59e:	5ccb      	ldrb	r3, [r1, r3]
 800d5a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d5a4:	4618      	mov	r0, r3
 800d5a6:	bd80      	pop	{r7, pc}
 800d5a8:	46020c00 	.word	0x46020c00
 800d5ac:	0801ccec 	.word	0x0801ccec

0800d5b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d5b0:	b580      	push	{r7, lr}
 800d5b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 800d5b4:	f7ff ffce 	bl	800d554 <HAL_RCC_GetHCLKFreq>
 800d5b8:	4602      	mov	r2, r0
 800d5ba:	4b05      	ldr	r3, [pc, #20]	; (800d5d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800d5bc:	6a1b      	ldr	r3, [r3, #32]
 800d5be:	0a1b      	lsrs	r3, r3, #8
 800d5c0:	f003 0307 	and.w	r3, r3, #7
 800d5c4:	4903      	ldr	r1, [pc, #12]	; (800d5d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800d5c6:	5ccb      	ldrb	r3, [r1, r3]
 800d5c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d5cc:	4618      	mov	r0, r3
 800d5ce:	bd80      	pop	{r7, pc}
 800d5d0:	46020c00 	.word	0x46020c00
 800d5d4:	0801ccec 	.word	0x0801ccec

0800d5d8 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 800d5d8:	b580      	push	{r7, lr}
 800d5da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 800d5dc:	f7ff ffba 	bl	800d554 <HAL_RCC_GetHCLKFreq>
 800d5e0:	4602      	mov	r2, r0
 800d5e2:	4b05      	ldr	r3, [pc, #20]	; (800d5f8 <HAL_RCC_GetPCLK3Freq+0x20>)
 800d5e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5e6:	091b      	lsrs	r3, r3, #4
 800d5e8:	f003 0307 	and.w	r3, r3, #7
 800d5ec:	4903      	ldr	r1, [pc, #12]	; (800d5fc <HAL_RCC_GetPCLK3Freq+0x24>)
 800d5ee:	5ccb      	ldrb	r3, [r1, r3]
 800d5f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d5f4:	4618      	mov	r0, r3
 800d5f6:	bd80      	pop	{r7, pc}
 800d5f8:	46020c00 	.word	0x46020c00
 800d5fc:	0801ccec 	.word	0x0801ccec

0800d600 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800d600:	b580      	push	{r7, lr}
 800d602:	b086      	sub	sp, #24
 800d604:	af00      	add	r7, sp, #0
 800d606:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800d608:	4b3e      	ldr	r3, [pc, #248]	; (800d704 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800d60a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d60e:	f003 0304 	and.w	r3, r3, #4
 800d612:	2b00      	cmp	r3, #0
 800d614:	d003      	beq.n	800d61e <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800d616:	f7fe fd9f 	bl	800c158 <HAL_PWREx_GetVoltageRange>
 800d61a:	6178      	str	r0, [r7, #20]
 800d61c:	e019      	b.n	800d652 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800d61e:	4b39      	ldr	r3, [pc, #228]	; (800d704 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800d620:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d624:	4a37      	ldr	r2, [pc, #220]	; (800d704 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800d626:	f043 0304 	orr.w	r3, r3, #4
 800d62a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800d62e:	4b35      	ldr	r3, [pc, #212]	; (800d704 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800d630:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d634:	f003 0304 	and.w	r3, r3, #4
 800d638:	60fb      	str	r3, [r7, #12]
 800d63a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800d63c:	f7fe fd8c 	bl	800c158 <HAL_PWREx_GetVoltageRange>
 800d640:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800d642:	4b30      	ldr	r3, [pc, #192]	; (800d704 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800d644:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d648:	4a2e      	ldr	r2, [pc, #184]	; (800d704 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800d64a:	f023 0304 	bic.w	r3, r3, #4
 800d64e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800d652:	697b      	ldr	r3, [r7, #20]
 800d654:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800d658:	d003      	beq.n	800d662 <RCC_SetFlashLatencyFromMSIRange+0x62>
 800d65a:	697b      	ldr	r3, [r7, #20]
 800d65c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d660:	d109      	bne.n	800d676 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d668:	d202      	bcs.n	800d670 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800d66a:	2301      	movs	r3, #1
 800d66c:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800d66e:	e033      	b.n	800d6d8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 800d670:	2300      	movs	r3, #0
 800d672:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800d674:	e030      	b.n	800d6d8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d67c:	d208      	bcs.n	800d690 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800d67e:	697b      	ldr	r3, [r7, #20]
 800d680:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d684:	d102      	bne.n	800d68c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800d686:	2303      	movs	r3, #3
 800d688:	613b      	str	r3, [r7, #16]
 800d68a:	e025      	b.n	800d6d8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 800d68c:	2301      	movs	r3, #1
 800d68e:	e035      	b.n	800d6fc <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d696:	d90f      	bls.n	800d6b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 800d698:	697b      	ldr	r3, [r7, #20]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d109      	bne.n	800d6b2 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d6a4:	d902      	bls.n	800d6ac <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800d6a6:	2300      	movs	r3, #0
 800d6a8:	613b      	str	r3, [r7, #16]
 800d6aa:	e015      	b.n	800d6d8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 800d6ac:	2301      	movs	r3, #1
 800d6ae:	613b      	str	r3, [r7, #16]
 800d6b0:	e012      	b.n	800d6d8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800d6b2:	2300      	movs	r3, #0
 800d6b4:	613b      	str	r3, [r7, #16]
 800d6b6:	e00f      	b.n	800d6d8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d6be:	d109      	bne.n	800d6d4 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800d6c0:	697b      	ldr	r3, [r7, #20]
 800d6c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d6c6:	d102      	bne.n	800d6ce <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 800d6c8:	2301      	movs	r3, #1
 800d6ca:	613b      	str	r3, [r7, #16]
 800d6cc:	e004      	b.n	800d6d8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 800d6ce:	2302      	movs	r3, #2
 800d6d0:	613b      	str	r3, [r7, #16]
 800d6d2:	e001      	b.n	800d6d8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 800d6d4:	2301      	movs	r3, #1
 800d6d6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800d6d8:	4b0b      	ldr	r3, [pc, #44]	; (800d708 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	f023 020f 	bic.w	r2, r3, #15
 800d6e0:	4909      	ldr	r1, [pc, #36]	; (800d708 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800d6e2:	693b      	ldr	r3, [r7, #16]
 800d6e4:	4313      	orrs	r3, r2
 800d6e6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800d6e8:	4b07      	ldr	r3, [pc, #28]	; (800d708 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	f003 030f 	and.w	r3, r3, #15
 800d6f0:	693a      	ldr	r2, [r7, #16]
 800d6f2:	429a      	cmp	r2, r3
 800d6f4:	d001      	beq.n	800d6fa <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800d6f6:	2301      	movs	r3, #1
 800d6f8:	e000      	b.n	800d6fc <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800d6fa:	2300      	movs	r3, #0
}
 800d6fc:	4618      	mov	r0, r3
 800d6fe:	3718      	adds	r7, #24
 800d700:	46bd      	mov	sp, r7
 800d702:	bd80      	pop	{r7, pc}
 800d704:	46020c00 	.word	0x46020c00
 800d708:	40022000 	.word	0x40022000

0800d70c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800d70c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d710:	b0ba      	sub	sp, #232	; 0xe8
 800d712:	af00      	add	r7, sp, #0
 800d714:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800d718:	2300      	movs	r3, #0
 800d71a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800d71e:	2300      	movs	r3, #0
 800d720:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800d724:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d72c:	f002 0401 	and.w	r4, r2, #1
 800d730:	2500      	movs	r5, #0
 800d732:	ea54 0305 	orrs.w	r3, r4, r5
 800d736:	d00b      	beq.n	800d750 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800d738:	4bcb      	ldr	r3, [pc, #812]	; (800da68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d73a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d73e:	f023 0103 	bic.w	r1, r3, #3
 800d742:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d746:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d748:	4ac7      	ldr	r2, [pc, #796]	; (800da68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d74a:	430b      	orrs	r3, r1
 800d74c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800d750:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d754:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d758:	f002 0802 	and.w	r8, r2, #2
 800d75c:	f04f 0900 	mov.w	r9, #0
 800d760:	ea58 0309 	orrs.w	r3, r8, r9
 800d764:	d00b      	beq.n	800d77e <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800d766:	4bc0      	ldr	r3, [pc, #768]	; (800da68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d768:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d76c:	f023 010c 	bic.w	r1, r3, #12
 800d770:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d776:	4abc      	ldr	r2, [pc, #752]	; (800da68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d778:	430b      	orrs	r3, r1
 800d77a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800d77e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d782:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d786:	f002 0a04 	and.w	sl, r2, #4
 800d78a:	f04f 0b00 	mov.w	fp, #0
 800d78e:	ea5a 030b 	orrs.w	r3, sl, fp
 800d792:	d00b      	beq.n	800d7ac <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800d794:	4bb4      	ldr	r3, [pc, #720]	; (800da68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d796:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d79a:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800d79e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d7a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d7a4:	4ab0      	ldr	r2, [pc, #704]	; (800da68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d7a6:	430b      	orrs	r3, r1
 800d7a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800d7ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d7b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7b4:	f002 0308 	and.w	r3, r2, #8
 800d7b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d7bc:	2300      	movs	r3, #0
 800d7be:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800d7c2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800d7c6:	460b      	mov	r3, r1
 800d7c8:	4313      	orrs	r3, r2
 800d7ca:	d00b      	beq.n	800d7e4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800d7cc:	4ba6      	ldr	r3, [pc, #664]	; (800da68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d7ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d7d2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800d7d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d7da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d7dc:	4aa2      	ldr	r2, [pc, #648]	; (800da68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d7de:	430b      	orrs	r3, r1
 800d7e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800d7e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d7e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7ec:	f002 0310 	and.w	r3, r2, #16
 800d7f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d7f4:	2300      	movs	r3, #0
 800d7f6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d7fa:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800d7fe:	460b      	mov	r3, r1
 800d800:	4313      	orrs	r3, r2
 800d802:	d00b      	beq.n	800d81c <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800d804:	4b98      	ldr	r3, [pc, #608]	; (800da68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d806:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d80a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800d80e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d812:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d814:	4a94      	ldr	r2, [pc, #592]	; (800da68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d816:	430b      	orrs	r3, r1
 800d818:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800d81c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d820:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d824:	f002 0320 	and.w	r3, r2, #32
 800d828:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d82c:	2300      	movs	r3, #0
 800d82e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800d832:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800d836:	460b      	mov	r3, r1
 800d838:	4313      	orrs	r3, r2
 800d83a:	d00b      	beq.n	800d854 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800d83c:	4b8a      	ldr	r3, [pc, #552]	; (800da68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d83e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800d842:	f023 0107 	bic.w	r1, r3, #7
 800d846:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d84a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d84c:	4a86      	ldr	r2, [pc, #536]	; (800da68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d84e:	430b      	orrs	r3, r1
 800d850:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800d854:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d85c:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800d860:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d864:	2300      	movs	r3, #0
 800d866:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d86a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800d86e:	460b      	mov	r3, r1
 800d870:	4313      	orrs	r3, r2
 800d872:	d00b      	beq.n	800d88c <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800d874:	4b7c      	ldr	r3, [pc, #496]	; (800da68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d876:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d87a:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 800d87e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d882:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d884:	4a78      	ldr	r2, [pc, #480]	; (800da68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d886:	430b      	orrs	r3, r1
 800d888:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800d88c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d890:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d894:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800d898:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800d89c:	2300      	movs	r3, #0
 800d89e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d8a2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800d8a6:	460b      	mov	r3, r1
 800d8a8:	4313      	orrs	r3, r2
 800d8aa:	d00b      	beq.n	800d8c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800d8ac:	4b6e      	ldr	r3, [pc, #440]	; (800da68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d8ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d8b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d8b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d8ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d8bc:	4a6a      	ldr	r2, [pc, #424]	; (800da68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d8be:	430b      	orrs	r3, r1
 800d8c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800d8c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d8c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8cc:	f402 7380 	and.w	r3, r2, #256	; 0x100
 800d8d0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800d8d4:	2300      	movs	r3, #0
 800d8d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800d8da:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800d8de:	460b      	mov	r3, r1
 800d8e0:	4313      	orrs	r3, r2
 800d8e2:	d00b      	beq.n	800d8fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800d8e4:	4b60      	ldr	r3, [pc, #384]	; (800da68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d8e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800d8ea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800d8ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d8f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d8f4:	4a5c      	ldr	r2, [pc, #368]	; (800da68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d8f6:	430b      	orrs	r3, r1
 800d8f8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800d8fc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d900:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d904:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800d908:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d90c:	2300      	movs	r3, #0
 800d90e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d912:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800d916:	460b      	mov	r3, r1
 800d918:	4313      	orrs	r3, r2
 800d91a:	d00b      	beq.n	800d934 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 800d91c:	4b52      	ldr	r3, [pc, #328]	; (800da68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d91e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d922:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 800d926:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d92a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d92c:	4a4e      	ldr	r2, [pc, #312]	; (800da68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d92e:	430b      	orrs	r3, r1
 800d930:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800d934:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d93c:	f402 7300 	and.w	r3, r2, #512	; 0x200
 800d940:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d944:	2300      	movs	r3, #0
 800d946:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d94a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800d94e:	460b      	mov	r3, r1
 800d950:	4313      	orrs	r3, r2
 800d952:	d00b      	beq.n	800d96c <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800d954:	4b44      	ldr	r3, [pc, #272]	; (800da68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d956:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800d95a:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 800d95e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d962:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d964:	4a40      	ldr	r2, [pc, #256]	; (800da68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d966:	430b      	orrs	r3, r1
 800d968:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800d96c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d970:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d974:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800d978:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d97c:	2300      	movs	r3, #0
 800d97e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800d982:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800d986:	460b      	mov	r3, r1
 800d988:	4313      	orrs	r3, r2
 800d98a:	d00b      	beq.n	800d9a4 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800d98c:	4b36      	ldr	r3, [pc, #216]	; (800da68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d98e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d992:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 800d996:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d99a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d99c:	4a32      	ldr	r2, [pc, #200]	; (800da68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d99e:	430b      	orrs	r3, r1
 800d9a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 800d9a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d9a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9ac:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800d9b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d9b4:	2300      	movs	r3, #0
 800d9b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d9ba:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800d9be:	460b      	mov	r3, r1
 800d9c0:	4313      	orrs	r3, r2
 800d9c2:	d00c      	beq.n	800d9de <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 800d9c4:	4b28      	ldr	r3, [pc, #160]	; (800da68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d9c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800d9ca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800d9ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d9d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d9d6:	4a24      	ldr	r2, [pc, #144]	; (800da68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d9d8:	430b      	orrs	r3, r1
 800d9da:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800d9de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d9e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9e6:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800d9ea:	67bb      	str	r3, [r7, #120]	; 0x78
 800d9ec:	2300      	movs	r3, #0
 800d9ee:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d9f0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800d9f4:	460b      	mov	r3, r1
 800d9f6:	4313      	orrs	r3, r2
 800d9f8:	d04f      	beq.n	800da9a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800d9fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d9fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800da02:	2b80      	cmp	r3, #128	; 0x80
 800da04:	d02d      	beq.n	800da62 <HAL_RCCEx_PeriphCLKConfig+0x356>
 800da06:	2b80      	cmp	r3, #128	; 0x80
 800da08:	d827      	bhi.n	800da5a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800da0a:	2b60      	cmp	r3, #96	; 0x60
 800da0c:	d02e      	beq.n	800da6c <HAL_RCCEx_PeriphCLKConfig+0x360>
 800da0e:	2b60      	cmp	r3, #96	; 0x60
 800da10:	d823      	bhi.n	800da5a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800da12:	2b40      	cmp	r3, #64	; 0x40
 800da14:	d006      	beq.n	800da24 <HAL_RCCEx_PeriphCLKConfig+0x318>
 800da16:	2b40      	cmp	r3, #64	; 0x40
 800da18:	d81f      	bhi.n	800da5a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d009      	beq.n	800da32 <HAL_RCCEx_PeriphCLKConfig+0x326>
 800da1e:	2b20      	cmp	r3, #32
 800da20:	d011      	beq.n	800da46 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 800da22:	e01a      	b.n	800da5a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800da24:	4b10      	ldr	r3, [pc, #64]	; (800da68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800da26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da28:	4a0f      	ldr	r2, [pc, #60]	; (800da68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800da2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800da2e:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800da30:	e01d      	b.n	800da6e <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800da32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800da36:	3308      	adds	r3, #8
 800da38:	4618      	mov	r0, r3
 800da3a:	f002 fa17 	bl	800fe6c <RCCEx_PLL2_Config>
 800da3e:	4603      	mov	r3, r0
 800da40:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 800da44:	e013      	b.n	800da6e <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800da46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800da4a:	332c      	adds	r3, #44	; 0x2c
 800da4c:	4618      	mov	r0, r3
 800da4e:	f002 faa5 	bl	800ff9c <RCCEx_PLL3_Config>
 800da52:	4603      	mov	r3, r0
 800da54:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 800da58:	e009      	b.n	800da6e <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800da5a:	2301      	movs	r3, #1
 800da5c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800da60:	e005      	b.n	800da6e <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 800da62:	bf00      	nop
 800da64:	e003      	b.n	800da6e <HAL_RCCEx_PeriphCLKConfig+0x362>
 800da66:	bf00      	nop
 800da68:	46020c00 	.word	0x46020c00
        break;
 800da6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800da6e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800da72:	2b00      	cmp	r3, #0
 800da74:	d10d      	bne.n	800da92 <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800da76:	4bb6      	ldr	r3, [pc, #728]	; (800dd50 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800da78:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800da7c:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 800da80:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800da84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800da88:	4ab1      	ldr	r2, [pc, #708]	; (800dd50 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800da8a:	430b      	orrs	r3, r1
 800da8c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800da90:	e003      	b.n	800da9a <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800da92:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800da96:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800da9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800da9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daa2:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800daa6:	673b      	str	r3, [r7, #112]	; 0x70
 800daa8:	2300      	movs	r3, #0
 800daaa:	677b      	str	r3, [r7, #116]	; 0x74
 800daac:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800dab0:	460b      	mov	r3, r1
 800dab2:	4313      	orrs	r3, r2
 800dab4:	d053      	beq.n	800db5e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800dab6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800daba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800dabe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dac2:	d033      	beq.n	800db2c <HAL_RCCEx_PeriphCLKConfig+0x420>
 800dac4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dac8:	d82c      	bhi.n	800db24 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800daca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800dace:	d02f      	beq.n	800db30 <HAL_RCCEx_PeriphCLKConfig+0x424>
 800dad0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800dad4:	d826      	bhi.n	800db24 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800dad6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dada:	d008      	beq.n	800daee <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 800dadc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dae0:	d820      	bhi.n	800db24 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d00a      	beq.n	800dafc <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 800dae6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800daea:	d011      	beq.n	800db10 <HAL_RCCEx_PeriphCLKConfig+0x404>
 800daec:	e01a      	b.n	800db24 <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800daee:	4b98      	ldr	r3, [pc, #608]	; (800dd50 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800daf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800daf2:	4a97      	ldr	r2, [pc, #604]	; (800dd50 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800daf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800daf8:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800dafa:	e01a      	b.n	800db32 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800dafc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800db00:	3308      	adds	r3, #8
 800db02:	4618      	mov	r0, r3
 800db04:	f002 f9b2 	bl	800fe6c <RCCEx_PLL2_Config>
 800db08:	4603      	mov	r3, r0
 800db0a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 800db0e:	e010      	b.n	800db32 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800db10:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800db14:	332c      	adds	r3, #44	; 0x2c
 800db16:	4618      	mov	r0, r3
 800db18:	f002 fa40 	bl	800ff9c <RCCEx_PLL3_Config>
 800db1c:	4603      	mov	r3, r0
 800db1e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 800db22:	e006      	b.n	800db32 <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800db24:	2301      	movs	r3, #1
 800db26:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800db2a:	e002      	b.n	800db32 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 800db2c:	bf00      	nop
 800db2e:	e000      	b.n	800db32 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 800db30:	bf00      	nop
    }

    if (ret == HAL_OK)
 800db32:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800db36:	2b00      	cmp	r3, #0
 800db38:	d10d      	bne.n	800db56 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800db3a:	4b85      	ldr	r3, [pc, #532]	; (800dd50 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800db3c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800db40:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 800db44:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800db48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800db4c:	4a80      	ldr	r2, [pc, #512]	; (800dd50 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800db4e:	430b      	orrs	r3, r1
 800db50:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800db54:	e003      	b.n	800db5e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800db56:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800db5a:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800db5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800db62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db66:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800db6a:	66bb      	str	r3, [r7, #104]	; 0x68
 800db6c:	2300      	movs	r3, #0
 800db6e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800db70:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800db74:	460b      	mov	r3, r1
 800db76:	4313      	orrs	r3, r2
 800db78:	d046      	beq.n	800dc08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800db7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800db7e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800db82:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800db86:	d028      	beq.n	800dbda <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800db88:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800db8c:	d821      	bhi.n	800dbd2 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800db8e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800db92:	d022      	beq.n	800dbda <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800db94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800db98:	d81b      	bhi.n	800dbd2 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800db9a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800db9e:	d01c      	beq.n	800dbda <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800dba0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800dba4:	d815      	bhi.n	800dbd2 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800dba6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800dbaa:	d008      	beq.n	800dbbe <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 800dbac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800dbb0:	d80f      	bhi.n	800dbd2 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d011      	beq.n	800dbda <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800dbb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dbba:	d00e      	beq.n	800dbda <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800dbbc:	e009      	b.n	800dbd2 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800dbbe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800dbc2:	3308      	adds	r3, #8
 800dbc4:	4618      	mov	r0, r3
 800dbc6:	f002 f951 	bl	800fe6c <RCCEx_PLL2_Config>
 800dbca:	4603      	mov	r3, r0
 800dbcc:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800dbd0:	e004      	b.n	800dbdc <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800dbd2:	2301      	movs	r3, #1
 800dbd4:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800dbd8:	e000      	b.n	800dbdc <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 800dbda:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dbdc:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d10d      	bne.n	800dc00 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800dbe4:	4b5a      	ldr	r3, [pc, #360]	; (800dd50 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800dbe6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800dbea:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800dbee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800dbf2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800dbf6:	4a56      	ldr	r2, [pc, #344]	; (800dd50 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800dbf8:	430b      	orrs	r3, r1
 800dbfa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800dbfe:	e003      	b.n	800dc08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dc00:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800dc04:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 800dc08:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800dc0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc10:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800dc14:	663b      	str	r3, [r7, #96]	; 0x60
 800dc16:	2300      	movs	r3, #0
 800dc18:	667b      	str	r3, [r7, #100]	; 0x64
 800dc1a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800dc1e:	460b      	mov	r3, r1
 800dc20:	4313      	orrs	r3, r2
 800dc22:	d03f      	beq.n	800dca4 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 800dc24:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800dc28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dc2c:	2b04      	cmp	r3, #4
 800dc2e:	d81e      	bhi.n	800dc6e <HAL_RCCEx_PeriphCLKConfig+0x562>
 800dc30:	a201      	add	r2, pc, #4	; (adr r2, 800dc38 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 800dc32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc36:	bf00      	nop
 800dc38:	0800dc77 	.word	0x0800dc77
 800dc3c:	0800dc4d 	.word	0x0800dc4d
 800dc40:	0800dc5b 	.word	0x0800dc5b
 800dc44:	0800dc77 	.word	0x0800dc77
 800dc48:	0800dc77 	.word	0x0800dc77
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800dc4c:	4b40      	ldr	r3, [pc, #256]	; (800dd50 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800dc4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc50:	4a3f      	ldr	r2, [pc, #252]	; (800dd50 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800dc52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800dc56:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800dc58:	e00e      	b.n	800dc78 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800dc5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800dc5e:	332c      	adds	r3, #44	; 0x2c
 800dc60:	4618      	mov	r0, r3
 800dc62:	f002 f99b 	bl	800ff9c <RCCEx_PLL3_Config>
 800dc66:	4603      	mov	r3, r0
 800dc68:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800dc6c:	e004      	b.n	800dc78 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800dc6e:	2301      	movs	r3, #1
 800dc70:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800dc74:	e000      	b.n	800dc78 <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 800dc76:	bf00      	nop
    }
    if (ret == HAL_OK)
 800dc78:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d10d      	bne.n	800dc9c <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 800dc80:	4b33      	ldr	r3, [pc, #204]	; (800dd50 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800dc82:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800dc86:	f023 0107 	bic.w	r1, r3, #7
 800dc8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800dc8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dc92:	4a2f      	ldr	r2, [pc, #188]	; (800dd50 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800dc94:	430b      	orrs	r3, r1
 800dc96:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800dc9a:	e003      	b.n	800dca4 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dc9c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800dca0:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 800dca4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800dca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcac:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800dcb0:	65bb      	str	r3, [r7, #88]	; 0x58
 800dcb2:	2300      	movs	r3, #0
 800dcb4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800dcb6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800dcba:	460b      	mov	r3, r1
 800dcbc:	4313      	orrs	r3, r2
 800dcbe:	d04d      	beq.n	800dd5c <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 800dcc0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800dcc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dcc8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800dccc:	d028      	beq.n	800dd20 <HAL_RCCEx_PeriphCLKConfig+0x614>
 800dcce:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800dcd2:	d821      	bhi.n	800dd18 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 800dcd4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800dcd8:	d024      	beq.n	800dd24 <HAL_RCCEx_PeriphCLKConfig+0x618>
 800dcda:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800dcde:	d81b      	bhi.n	800dd18 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 800dce0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800dce4:	d00e      	beq.n	800dd04 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 800dce6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800dcea:	d815      	bhi.n	800dd18 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d01b      	beq.n	800dd28 <HAL_RCCEx_PeriphCLKConfig+0x61c>
 800dcf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dcf4:	d110      	bne.n	800dd18 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800dcf6:	4b16      	ldr	r3, [pc, #88]	; (800dd50 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800dcf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dcfa:	4a15      	ldr	r2, [pc, #84]	; (800dd50 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800dcfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800dd00:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800dd02:	e012      	b.n	800dd2a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800dd04:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800dd08:	332c      	adds	r3, #44	; 0x2c
 800dd0a:	4618      	mov	r0, r3
 800dd0c:	f002 f946 	bl	800ff9c <RCCEx_PLL3_Config>
 800dd10:	4603      	mov	r3, r0
 800dd12:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800dd16:	e008      	b.n	800dd2a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800dd18:	2301      	movs	r3, #1
 800dd1a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800dd1e:	e004      	b.n	800dd2a <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 800dd20:	bf00      	nop
 800dd22:	e002      	b.n	800dd2a <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 800dd24:	bf00      	nop
 800dd26:	e000      	b.n	800dd2a <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 800dd28:	bf00      	nop
    }
    if (ret == HAL_OK)
 800dd2a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d110      	bne.n	800dd54 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800dd32:	4b07      	ldr	r3, [pc, #28]	; (800dd50 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800dd34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800dd38:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800dd3c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800dd40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dd44:	4a02      	ldr	r2, [pc, #8]	; (800dd50 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800dd46:	430b      	orrs	r3, r1
 800dd48:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800dd4c:	e006      	b.n	800dd5c <HAL_RCCEx_PeriphCLKConfig+0x650>
 800dd4e:	bf00      	nop
 800dd50:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dd54:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800dd58:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800dd5c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800dd60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd64:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800dd68:	653b      	str	r3, [r7, #80]	; 0x50
 800dd6a:	2300      	movs	r3, #0
 800dd6c:	657b      	str	r3, [r7, #84]	; 0x54
 800dd6e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800dd72:	460b      	mov	r3, r1
 800dd74:	4313      	orrs	r3, r2
 800dd76:	f000 80b5 	beq.w	800dee4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800dd7a:	2300      	movs	r3, #0
 800dd7c:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800dd80:	4b9d      	ldr	r3, [pc, #628]	; (800dff8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800dd82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800dd86:	f003 0304 	and.w	r3, r3, #4
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d113      	bne.n	800ddb6 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800dd8e:	4b9a      	ldr	r3, [pc, #616]	; (800dff8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800dd90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800dd94:	4a98      	ldr	r2, [pc, #608]	; (800dff8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800dd96:	f043 0304 	orr.w	r3, r3, #4
 800dd9a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800dd9e:	4b96      	ldr	r3, [pc, #600]	; (800dff8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800dda0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800dda4:	f003 0304 	and.w	r3, r3, #4
 800dda8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ddac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
      pwrclkchanged = SET;
 800ddb0:	2301      	movs	r3, #1
 800ddb2:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800ddb6:	4b91      	ldr	r3, [pc, #580]	; (800dffc <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 800ddb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ddba:	4a90      	ldr	r2, [pc, #576]	; (800dffc <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 800ddbc:	f043 0301 	orr.w	r3, r3, #1
 800ddc0:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ddc2:	f7fb ffe1 	bl	8009d88 <HAL_GetTick>
 800ddc6:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800ddca:	e00b      	b.n	800dde4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ddcc:	f7fb ffdc 	bl	8009d88 <HAL_GetTick>
 800ddd0:	4602      	mov	r2, r0
 800ddd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ddd6:	1ad3      	subs	r3, r2, r3
 800ddd8:	2b02      	cmp	r3, #2
 800ddda:	d903      	bls.n	800dde4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 800dddc:	2303      	movs	r3, #3
 800ddde:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800dde2:	e005      	b.n	800ddf0 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800dde4:	4b85      	ldr	r3, [pc, #532]	; (800dffc <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 800dde6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dde8:	f003 0301 	and.w	r3, r3, #1
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d0ed      	beq.n	800ddcc <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 800ddf0:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d165      	bne.n	800dec4 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800ddf8:	4b7f      	ldr	r3, [pc, #508]	; (800dff8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800ddfa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ddfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800de02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800de06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d023      	beq.n	800de56 <HAL_RCCEx_PeriphCLKConfig+0x74a>
 800de0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800de12:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800de16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800de1a:	4293      	cmp	r3, r2
 800de1c:	d01b      	beq.n	800de56 <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800de1e:	4b76      	ldr	r3, [pc, #472]	; (800dff8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800de20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800de24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800de28:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800de2c:	4b72      	ldr	r3, [pc, #456]	; (800dff8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800de2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800de32:	4a71      	ldr	r2, [pc, #452]	; (800dff8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800de34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800de38:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800de3c:	4b6e      	ldr	r3, [pc, #440]	; (800dff8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800de3e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800de42:	4a6d      	ldr	r2, [pc, #436]	; (800dff8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800de44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800de48:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800de4c:	4a6a      	ldr	r2, [pc, #424]	; (800dff8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800de4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800de52:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800de56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800de5a:	f003 0301 	and.w	r3, r3, #1
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d019      	beq.n	800de96 <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800de62:	f7fb ff91 	bl	8009d88 <HAL_GetTick>
 800de66:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800de6a:	e00d      	b.n	800de88 <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800de6c:	f7fb ff8c 	bl	8009d88 <HAL_GetTick>
 800de70:	4602      	mov	r2, r0
 800de72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800de76:	1ad2      	subs	r2, r2, r3
 800de78:	f241 3388 	movw	r3, #5000	; 0x1388
 800de7c:	429a      	cmp	r2, r3
 800de7e:	d903      	bls.n	800de88 <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 800de80:	2303      	movs	r3, #3
 800de82:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
            break;
 800de86:	e006      	b.n	800de96 <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800de88:	4b5b      	ldr	r3, [pc, #364]	; (800dff8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800de8a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800de8e:	f003 0302 	and.w	r3, r3, #2
 800de92:	2b00      	cmp	r3, #0
 800de94:	d0ea      	beq.n	800de6c <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 800de96:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d10d      	bne.n	800deba <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800de9e:	4b56      	ldr	r3, [pc, #344]	; (800dff8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800dea0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800dea4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800dea8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800deac:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800deb0:	4a51      	ldr	r2, [pc, #324]	; (800dff8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800deb2:	430b      	orrs	r3, r1
 800deb4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800deb8:	e008      	b.n	800decc <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800deba:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800debe:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
 800dec2:	e003      	b.n	800decc <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dec4:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800dec8:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800decc:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
 800ded0:	2b01      	cmp	r3, #1
 800ded2:	d107      	bne.n	800dee4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ded4:	4b48      	ldr	r3, [pc, #288]	; (800dff8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800ded6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800deda:	4a47      	ldr	r2, [pc, #284]	; (800dff8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800dedc:	f023 0304 	bic.w	r3, r3, #4
 800dee0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 800dee4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800dee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deec:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800def0:	64bb      	str	r3, [r7, #72]	; 0x48
 800def2:	2300      	movs	r3, #0
 800def4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800def6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800defa:	460b      	mov	r3, r1
 800defc:	4313      	orrs	r3, r2
 800defe:	d042      	beq.n	800df86 <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 800df00:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800df04:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800df08:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800df0c:	d022      	beq.n	800df54 <HAL_RCCEx_PeriphCLKConfig+0x848>
 800df0e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800df12:	d81b      	bhi.n	800df4c <HAL_RCCEx_PeriphCLKConfig+0x840>
 800df14:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800df18:	d011      	beq.n	800df3e <HAL_RCCEx_PeriphCLKConfig+0x832>
 800df1a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800df1e:	d815      	bhi.n	800df4c <HAL_RCCEx_PeriphCLKConfig+0x840>
 800df20:	2b00      	cmp	r3, #0
 800df22:	d019      	beq.n	800df58 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 800df24:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800df28:	d110      	bne.n	800df4c <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800df2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800df2e:	3308      	adds	r3, #8
 800df30:	4618      	mov	r0, r3
 800df32:	f001 ff9b 	bl	800fe6c <RCCEx_PLL2_Config>
 800df36:	4603      	mov	r3, r0
 800df38:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800df3c:	e00d      	b.n	800df5a <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800df3e:	4b2e      	ldr	r3, [pc, #184]	; (800dff8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800df40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df42:	4a2d      	ldr	r2, [pc, #180]	; (800dff8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800df44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800df48:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800df4a:	e006      	b.n	800df5a <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800df4c:	2301      	movs	r3, #1
 800df4e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800df52:	e002      	b.n	800df5a <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 800df54:	bf00      	nop
 800df56:	e000      	b.n	800df5a <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 800df58:	bf00      	nop
    }
    if (ret == HAL_OK)
 800df5a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d10d      	bne.n	800df7e <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800df62:	4b25      	ldr	r3, [pc, #148]	; (800dff8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800df64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800df68:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800df6c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800df70:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800df74:	4a20      	ldr	r2, [pc, #128]	; (800dff8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800df76:	430b      	orrs	r3, r1
 800df78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800df7c:	e003      	b.n	800df86 <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800df7e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800df82:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800df86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800df8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df8e:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800df92:	643b      	str	r3, [r7, #64]	; 0x40
 800df94:	2300      	movs	r3, #0
 800df96:	647b      	str	r3, [r7, #68]	; 0x44
 800df98:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800df9c:	460b      	mov	r3, r1
 800df9e:	4313      	orrs	r3, r2
 800dfa0:	d032      	beq.n	800e008 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800dfa2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800dfa6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800dfaa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800dfae:	d00b      	beq.n	800dfc8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 800dfb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800dfb4:	d804      	bhi.n	800dfc0 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d008      	beq.n	800dfcc <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 800dfba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dfbe:	d007      	beq.n	800dfd0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 800dfc0:	2301      	movs	r3, #1
 800dfc2:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800dfc6:	e004      	b.n	800dfd2 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 800dfc8:	bf00      	nop
 800dfca:	e002      	b.n	800dfd2 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 800dfcc:	bf00      	nop
 800dfce:	e000      	b.n	800dfd2 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 800dfd0:	bf00      	nop
    }
    if (ret == HAL_OK)
 800dfd2:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d112      	bne.n	800e000 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800dfda:	4b07      	ldr	r3, [pc, #28]	; (800dff8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800dfdc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800dfe0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800dfe4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800dfe8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800dfec:	4a02      	ldr	r2, [pc, #8]	; (800dff8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800dfee:	430b      	orrs	r3, r1
 800dff0:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800dff4:	e008      	b.n	800e008 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 800dff6:	bf00      	nop
 800dff8:	46020c00 	.word	0x46020c00
 800dffc:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e000:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800e004:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 800e008:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e00c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e010:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800e014:	63bb      	str	r3, [r7, #56]	; 0x38
 800e016:	2300      	movs	r3, #0
 800e018:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e01a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800e01e:	460b      	mov	r3, r1
 800e020:	4313      	orrs	r3, r2
 800e022:	d00c      	beq.n	800e03e <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 800e024:	4b98      	ldr	r3, [pc, #608]	; (800e288 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e026:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800e02a:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 800e02e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e032:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800e036:	4a94      	ldr	r2, [pc, #592]	; (800e288 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e038:	430b      	orrs	r3, r1
 800e03a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800e03e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e042:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e046:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800e04a:	633b      	str	r3, [r7, #48]	; 0x30
 800e04c:	2300      	movs	r3, #0
 800e04e:	637b      	str	r3, [r7, #52]	; 0x34
 800e050:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800e054:	460b      	mov	r3, r1
 800e056:	4313      	orrs	r3, r2
 800e058:	d019      	beq.n	800e08e <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 800e05a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e05e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800e062:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e066:	d105      	bne.n	800e074 <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800e068:	4b87      	ldr	r3, [pc, #540]	; (800e288 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e06a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e06c:	4a86      	ldr	r2, [pc, #536]	; (800e288 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e06e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e072:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 800e074:	4b84      	ldr	r3, [pc, #528]	; (800e288 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e076:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800e07a:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800e07e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e082:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800e086:	4a80      	ldr	r2, [pc, #512]	; (800e288 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e088:	430b      	orrs	r3, r1
 800e08a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800e08e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e092:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e096:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800e09a:	62bb      	str	r3, [r7, #40]	; 0x28
 800e09c:	2300      	movs	r3, #0
 800e09e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e0a0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800e0a4:	460b      	mov	r3, r1
 800e0a6:	4313      	orrs	r3, r2
 800e0a8:	d00c      	beq.n	800e0c4 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800e0aa:	4b77      	ldr	r3, [pc, #476]	; (800e288 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e0ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e0b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800e0b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e0b8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800e0bc:	4972      	ldr	r1, [pc, #456]	; (800e288 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e0be:	4313      	orrs	r3, r2
 800e0c0:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800e0c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e0c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0cc:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800e0d0:	623b      	str	r3, [r7, #32]
 800e0d2:	2300      	movs	r3, #0
 800e0d4:	627b      	str	r3, [r7, #36]	; 0x24
 800e0d6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800e0da:	460b      	mov	r3, r1
 800e0dc:	4313      	orrs	r3, r2
 800e0de:	d00c      	beq.n	800e0fa <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800e0e0:	4b69      	ldr	r3, [pc, #420]	; (800e288 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e0e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e0e6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800e0ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e0ee:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800e0f2:	4965      	ldr	r1, [pc, #404]	; (800e288 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e0f4:	4313      	orrs	r3, r2
 800e0f6:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800e0fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e0fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e102:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800e106:	61bb      	str	r3, [r7, #24]
 800e108:	2300      	movs	r3, #0
 800e10a:	61fb      	str	r3, [r7, #28]
 800e10c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800e110:	460b      	mov	r3, r1
 800e112:	4313      	orrs	r3, r2
 800e114:	d00c      	beq.n	800e130 <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800e116:	4b5c      	ldr	r3, [pc, #368]	; (800e288 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e118:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800e11c:	f023 0218 	bic.w	r2, r3, #24
 800e120:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e124:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800e128:	4957      	ldr	r1, [pc, #348]	; (800e288 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e12a:	4313      	orrs	r3, r2
 800e12c:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800e130:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e134:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e138:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 800e13c:	613b      	str	r3, [r7, #16]
 800e13e:	2300      	movs	r3, #0
 800e140:	617b      	str	r3, [r7, #20]
 800e142:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800e146:	460b      	mov	r3, r1
 800e148:	4313      	orrs	r3, r2
 800e14a:	d032      	beq.n	800e1b2 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 800e14c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e150:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800e154:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e158:	d105      	bne.n	800e166 <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e15a:	4b4b      	ldr	r3, [pc, #300]	; (800e288 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e15c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e15e:	4a4a      	ldr	r2, [pc, #296]	; (800e288 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e160:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e164:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800e166:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e16a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800e16e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800e172:	d108      	bne.n	800e186 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800e174:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e178:	3308      	adds	r3, #8
 800e17a:	4618      	mov	r0, r3
 800e17c:	f001 fe76 	bl	800fe6c <RCCEx_PLL2_Config>
 800e180:	4603      	mov	r3, r0
 800e182:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
    }
    if (ret == HAL_OK)
 800e186:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d10d      	bne.n	800e1aa <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800e18e:	4b3e      	ldr	r3, [pc, #248]	; (800e288 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e190:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800e194:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800e198:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e19c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800e1a0:	4939      	ldr	r1, [pc, #228]	; (800e288 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e1a2:	4313      	orrs	r3, r2
 800e1a4:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800e1a8:	e003      	b.n	800e1b2 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e1aa:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800e1ae:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 800e1b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e1b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1ba:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 800e1be:	60bb      	str	r3, [r7, #8]
 800e1c0:	2300      	movs	r3, #0
 800e1c2:	60fb      	str	r3, [r7, #12]
 800e1c4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800e1c8:	460b      	mov	r3, r1
 800e1ca:	4313      	orrs	r3, r2
 800e1cc:	d03a      	beq.n	800e244 <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 800e1ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e1d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e1d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e1da:	d00e      	beq.n	800e1fa <HAL_RCCEx_PeriphCLKConfig+0xaee>
 800e1dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e1e0:	d815      	bhi.n	800e20e <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d017      	beq.n	800e216 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800e1e6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800e1ea:	d110      	bne.n	800e20e <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e1ec:	4b26      	ldr	r3, [pc, #152]	; (800e288 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e1ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e1f0:	4a25      	ldr	r2, [pc, #148]	; (800e288 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e1f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e1f6:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800e1f8:	e00e      	b.n	800e218 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800e1fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e1fe:	3308      	adds	r3, #8
 800e200:	4618      	mov	r0, r3
 800e202:	f001 fe33 	bl	800fe6c <RCCEx_PLL2_Config>
 800e206:	4603      	mov	r3, r0
 800e208:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800e20c:	e004      	b.n	800e218 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 800e20e:	2301      	movs	r3, #1
 800e210:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800e214:	e000      	b.n	800e218 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 800e216:	bf00      	nop
    }
    if (ret == HAL_OK)
 800e218:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d10d      	bne.n	800e23c <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800e220:	4b19      	ldr	r3, [pc, #100]	; (800e288 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e222:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e226:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800e22a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e22e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e232:	4915      	ldr	r1, [pc, #84]	; (800e288 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e234:	4313      	orrs	r3, r2
 800e236:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 800e23a:	e003      	b.n	800e244 <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e23c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800e240:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800e244:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e24c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800e250:	603b      	str	r3, [r7, #0]
 800e252:	2300      	movs	r3, #0
 800e254:	607b      	str	r3, [r7, #4]
 800e256:	e9d7 1200 	ldrd	r1, r2, [r7]
 800e25a:	460b      	mov	r3, r1
 800e25c:	4313      	orrs	r3, r2
 800e25e:	d00c      	beq.n	800e27a <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800e260:	4b09      	ldr	r3, [pc, #36]	; (800e288 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e262:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800e266:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800e26a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e26e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800e272:	4905      	ldr	r1, [pc, #20]	; (800e288 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e274:	4313      	orrs	r3, r2
 800e276:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 800e27a:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
}
 800e27e:	4618      	mov	r0, r3
 800e280:	37e8      	adds	r7, #232	; 0xe8
 800e282:	46bd      	mov	sp, r7
 800e284:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e288:	46020c00 	.word	0x46020c00

0800e28c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800e28c:	b480      	push	{r7}
 800e28e:	b089      	sub	sp, #36	; 0x24
 800e290:	af00      	add	r7, sp, #0
 800e292:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800e294:	4ba6      	ldr	r3, [pc, #664]	; (800e530 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800e296:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e298:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e29c:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800e29e:	4ba4      	ldr	r3, [pc, #656]	; (800e530 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800e2a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e2a2:	f003 0303 	and.w	r3, r3, #3
 800e2a6:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800e2a8:	4ba1      	ldr	r3, [pc, #644]	; (800e530 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800e2aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e2ac:	0a1b      	lsrs	r3, r3, #8
 800e2ae:	f003 030f 	and.w	r3, r3, #15
 800e2b2:	3301      	adds	r3, #1
 800e2b4:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800e2b6:	4b9e      	ldr	r3, [pc, #632]	; (800e530 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800e2b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e2ba:	091b      	lsrs	r3, r3, #4
 800e2bc:	f003 0301 	and.w	r3, r3, #1
 800e2c0:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800e2c2:	4b9b      	ldr	r3, [pc, #620]	; (800e530 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800e2c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2c6:	08db      	lsrs	r3, r3, #3
 800e2c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e2cc:	68fa      	ldr	r2, [r7, #12]
 800e2ce:	fb02 f303 	mul.w	r3, r2, r3
 800e2d2:	ee07 3a90 	vmov	s15, r3
 800e2d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e2da:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 800e2de:	697b      	ldr	r3, [r7, #20]
 800e2e0:	2b03      	cmp	r3, #3
 800e2e2:	d062      	beq.n	800e3aa <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 800e2e4:	697b      	ldr	r3, [r7, #20]
 800e2e6:	2b03      	cmp	r3, #3
 800e2e8:	f200 8081 	bhi.w	800e3ee <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 800e2ec:	697b      	ldr	r3, [r7, #20]
 800e2ee:	2b01      	cmp	r3, #1
 800e2f0:	d024      	beq.n	800e33c <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 800e2f2:	697b      	ldr	r3, [r7, #20]
 800e2f4:	2b02      	cmp	r3, #2
 800e2f6:	d17a      	bne.n	800e3ee <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800e2f8:	693b      	ldr	r3, [r7, #16]
 800e2fa:	ee07 3a90 	vmov	s15, r3
 800e2fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e302:	eddf 6a8c 	vldr	s13, [pc, #560]	; 800e534 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800e306:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e30a:	4b89      	ldr	r3, [pc, #548]	; (800e530 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800e30c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e30e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e312:	ee07 3a90 	vmov	s15, r3
 800e316:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800e31a:	ed97 6a02 	vldr	s12, [r7, #8]
 800e31e:	eddf 5a86 	vldr	s11, [pc, #536]	; 800e538 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800e322:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800e326:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800e32a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e32e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800e332:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e336:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800e33a:	e08f      	b.n	800e45c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800e33c:	4b7c      	ldr	r3, [pc, #496]	; (800e530 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800e33e:	689b      	ldr	r3, [r3, #8]
 800e340:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e344:	2b00      	cmp	r3, #0
 800e346:	d005      	beq.n	800e354 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 800e348:	4b79      	ldr	r3, [pc, #484]	; (800e530 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800e34a:	689b      	ldr	r3, [r3, #8]
 800e34c:	0f1b      	lsrs	r3, r3, #28
 800e34e:	f003 030f 	and.w	r3, r3, #15
 800e352:	e006      	b.n	800e362 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 800e354:	4b76      	ldr	r3, [pc, #472]	; (800e530 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800e356:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800e35a:	041b      	lsls	r3, r3, #16
 800e35c:	0f1b      	lsrs	r3, r3, #28
 800e35e:	f003 030f 	and.w	r3, r3, #15
 800e362:	4a76      	ldr	r2, [pc, #472]	; (800e53c <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800e364:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e368:	ee07 3a90 	vmov	s15, r3
 800e36c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e370:	693b      	ldr	r3, [r7, #16]
 800e372:	ee07 3a90 	vmov	s15, r3
 800e376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e37a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e37e:	69bb      	ldr	r3, [r7, #24]
 800e380:	ee07 3a90 	vmov	s15, r3
 800e384:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e388:	ed97 6a02 	vldr	s12, [r7, #8]
 800e38c:	eddf 5a6a 	vldr	s11, [pc, #424]	; 800e538 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800e390:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e394:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e398:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e39c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800e3a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e3a4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800e3a8:	e058      	b.n	800e45c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800e3aa:	693b      	ldr	r3, [r7, #16]
 800e3ac:	ee07 3a90 	vmov	s15, r3
 800e3b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e3b4:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800e534 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800e3b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e3bc:	4b5c      	ldr	r3, [pc, #368]	; (800e530 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800e3be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e3c4:	ee07 3a90 	vmov	s15, r3
 800e3c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800e3cc:	ed97 6a02 	vldr	s12, [r7, #8]
 800e3d0:	eddf 5a59 	vldr	s11, [pc, #356]	; 800e538 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800e3d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800e3d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800e3dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e3e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800e3e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e3e8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800e3ec:	e036      	b.n	800e45c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800e3ee:	4b50      	ldr	r3, [pc, #320]	; (800e530 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800e3f0:	689b      	ldr	r3, [r3, #8]
 800e3f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d005      	beq.n	800e406 <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 800e3fa:	4b4d      	ldr	r3, [pc, #308]	; (800e530 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800e3fc:	689b      	ldr	r3, [r3, #8]
 800e3fe:	0f1b      	lsrs	r3, r3, #28
 800e400:	f003 030f 	and.w	r3, r3, #15
 800e404:	e006      	b.n	800e414 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 800e406:	4b4a      	ldr	r3, [pc, #296]	; (800e530 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800e408:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800e40c:	041b      	lsls	r3, r3, #16
 800e40e:	0f1b      	lsrs	r3, r3, #28
 800e410:	f003 030f 	and.w	r3, r3, #15
 800e414:	4a49      	ldr	r2, [pc, #292]	; (800e53c <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800e416:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e41a:	ee07 3a90 	vmov	s15, r3
 800e41e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e422:	693b      	ldr	r3, [r7, #16]
 800e424:	ee07 3a90 	vmov	s15, r3
 800e428:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e42c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e430:	69bb      	ldr	r3, [r7, #24]
 800e432:	ee07 3a90 	vmov	s15, r3
 800e436:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e43a:	ed97 6a02 	vldr	s12, [r7, #8]
 800e43e:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800e538 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800e442:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e446:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e44a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e44e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800e452:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e456:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800e45a:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800e45c:	4b34      	ldr	r3, [pc, #208]	; (800e530 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800e45e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e460:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e464:	2b00      	cmp	r3, #0
 800e466:	d017      	beq.n	800e498 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800e468:	4b31      	ldr	r3, [pc, #196]	; (800e530 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800e46a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e46c:	0a5b      	lsrs	r3, r3, #9
 800e46e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e472:	ee07 3a90 	vmov	s15, r3
 800e476:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800e47a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e47e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800e482:	edd7 6a07 	vldr	s13, [r7, #28]
 800e486:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e48a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e48e:	ee17 2a90 	vmov	r2, s15
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	601a      	str	r2, [r3, #0]
 800e496:	e002      	b.n	800e49e <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	2200      	movs	r2, #0
 800e49c:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800e49e:	4b24      	ldr	r3, [pc, #144]	; (800e530 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800e4a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d017      	beq.n	800e4da <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800e4aa:	4b21      	ldr	r3, [pc, #132]	; (800e530 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800e4ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4ae:	0c1b      	lsrs	r3, r3, #16
 800e4b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e4b4:	ee07 3a90 	vmov	s15, r3
 800e4b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 800e4bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e4c0:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800e4c4:	edd7 6a07 	vldr	s13, [r7, #28]
 800e4c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e4cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e4d0:	ee17 2a90 	vmov	r2, s15
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	605a      	str	r2, [r3, #4]
 800e4d8:	e002      	b.n	800e4e0 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	2200      	movs	r2, #0
 800e4de:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800e4e0:	4b13      	ldr	r3, [pc, #76]	; (800e530 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800e4e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d017      	beq.n	800e51c <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800e4ec:	4b10      	ldr	r3, [pc, #64]	; (800e530 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800e4ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4f0:	0e1b      	lsrs	r3, r3, #24
 800e4f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e4f6:	ee07 3a90 	vmov	s15, r3
 800e4fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800e4fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e502:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800e506:	edd7 6a07 	vldr	s13, [r7, #28]
 800e50a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e50e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e512:	ee17 2a90 	vmov	r2, s15
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800e51a:	e002      	b.n	800e522 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	2200      	movs	r2, #0
 800e520:	609a      	str	r2, [r3, #8]
}
 800e522:	bf00      	nop
 800e524:	3724      	adds	r7, #36	; 0x24
 800e526:	46bd      	mov	sp, r7
 800e528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e52c:	4770      	bx	lr
 800e52e:	bf00      	nop
 800e530:	46020c00 	.word	0x46020c00
 800e534:	4b742400 	.word	0x4b742400
 800e538:	46000000 	.word	0x46000000
 800e53c:	0801ccf4 	.word	0x0801ccf4

0800e540 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800e540:	b480      	push	{r7}
 800e542:	b089      	sub	sp, #36	; 0x24
 800e544:	af00      	add	r7, sp, #0
 800e546:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800e548:	4ba6      	ldr	r3, [pc, #664]	; (800e7e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800e54a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e54c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e550:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800e552:	4ba4      	ldr	r3, [pc, #656]	; (800e7e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800e554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e556:	f003 0303 	and.w	r3, r3, #3
 800e55a:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 800e55c:	4ba1      	ldr	r3, [pc, #644]	; (800e7e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800e55e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e560:	0a1b      	lsrs	r3, r3, #8
 800e562:	f003 030f 	and.w	r3, r3, #15
 800e566:	3301      	adds	r3, #1
 800e568:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 800e56a:	4b9e      	ldr	r3, [pc, #632]	; (800e7e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800e56c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e56e:	091b      	lsrs	r3, r3, #4
 800e570:	f003 0301 	and.w	r3, r3, #1
 800e574:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800e576:	4b9b      	ldr	r3, [pc, #620]	; (800e7e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800e578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e57a:	08db      	lsrs	r3, r3, #3
 800e57c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e580:	68fa      	ldr	r2, [r7, #12]
 800e582:	fb02 f303 	mul.w	r3, r2, r3
 800e586:	ee07 3a90 	vmov	s15, r3
 800e58a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e58e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 800e592:	697b      	ldr	r3, [r7, #20]
 800e594:	2b03      	cmp	r3, #3
 800e596:	d062      	beq.n	800e65e <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 800e598:	697b      	ldr	r3, [r7, #20]
 800e59a:	2b03      	cmp	r3, #3
 800e59c:	f200 8081 	bhi.w	800e6a2 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 800e5a0:	697b      	ldr	r3, [r7, #20]
 800e5a2:	2b01      	cmp	r3, #1
 800e5a4:	d024      	beq.n	800e5f0 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 800e5a6:	697b      	ldr	r3, [r7, #20]
 800e5a8:	2b02      	cmp	r3, #2
 800e5aa:	d17a      	bne.n	800e6a2 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800e5ac:	693b      	ldr	r3, [r7, #16]
 800e5ae:	ee07 3a90 	vmov	s15, r3
 800e5b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e5b6:	eddf 6a8c 	vldr	s13, [pc, #560]	; 800e7e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800e5ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e5be:	4b89      	ldr	r3, [pc, #548]	; (800e7e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800e5c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e5c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e5c6:	ee07 3a90 	vmov	s15, r3
 800e5ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800e5ce:	ed97 6a02 	vldr	s12, [r7, #8]
 800e5d2:	eddf 5a86 	vldr	s11, [pc, #536]	; 800e7ec <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800e5d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800e5da:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800e5de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e5e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800e5e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e5ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800e5ee:	e08f      	b.n	800e710 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800e5f0:	4b7c      	ldr	r3, [pc, #496]	; (800e7e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800e5f2:	689b      	ldr	r3, [r3, #8]
 800e5f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d005      	beq.n	800e608 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 800e5fc:	4b79      	ldr	r3, [pc, #484]	; (800e7e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800e5fe:	689b      	ldr	r3, [r3, #8]
 800e600:	0f1b      	lsrs	r3, r3, #28
 800e602:	f003 030f 	and.w	r3, r3, #15
 800e606:	e006      	b.n	800e616 <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 800e608:	4b76      	ldr	r3, [pc, #472]	; (800e7e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800e60a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800e60e:	041b      	lsls	r3, r3, #16
 800e610:	0f1b      	lsrs	r3, r3, #28
 800e612:	f003 030f 	and.w	r3, r3, #15
 800e616:	4a76      	ldr	r2, [pc, #472]	; (800e7f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800e618:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e61c:	ee07 3a90 	vmov	s15, r3
 800e620:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e624:	693b      	ldr	r3, [r7, #16]
 800e626:	ee07 3a90 	vmov	s15, r3
 800e62a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e62e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e632:	69bb      	ldr	r3, [r7, #24]
 800e634:	ee07 3a90 	vmov	s15, r3
 800e638:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e63c:	ed97 6a02 	vldr	s12, [r7, #8]
 800e640:	eddf 5a6a 	vldr	s11, [pc, #424]	; 800e7ec <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800e644:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e648:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e64c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e650:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800e654:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e658:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800e65c:	e058      	b.n	800e710 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800e65e:	693b      	ldr	r3, [r7, #16]
 800e660:	ee07 3a90 	vmov	s15, r3
 800e664:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e668:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800e7e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800e66c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e670:	4b5c      	ldr	r3, [pc, #368]	; (800e7e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800e672:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e674:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e678:	ee07 3a90 	vmov	s15, r3
 800e67c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800e680:	ed97 6a02 	vldr	s12, [r7, #8]
 800e684:	eddf 5a59 	vldr	s11, [pc, #356]	; 800e7ec <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800e688:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800e68c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800e690:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e694:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800e698:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e69c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800e6a0:	e036      	b.n	800e710 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800e6a2:	4b50      	ldr	r3, [pc, #320]	; (800e7e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800e6a4:	689b      	ldr	r3, [r3, #8]
 800e6a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d005      	beq.n	800e6ba <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 800e6ae:	4b4d      	ldr	r3, [pc, #308]	; (800e7e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800e6b0:	689b      	ldr	r3, [r3, #8]
 800e6b2:	0f1b      	lsrs	r3, r3, #28
 800e6b4:	f003 030f 	and.w	r3, r3, #15
 800e6b8:	e006      	b.n	800e6c8 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 800e6ba:	4b4a      	ldr	r3, [pc, #296]	; (800e7e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800e6bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800e6c0:	041b      	lsls	r3, r3, #16
 800e6c2:	0f1b      	lsrs	r3, r3, #28
 800e6c4:	f003 030f 	and.w	r3, r3, #15
 800e6c8:	4a49      	ldr	r2, [pc, #292]	; (800e7f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800e6ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e6ce:	ee07 3a90 	vmov	s15, r3
 800e6d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e6d6:	693b      	ldr	r3, [r7, #16]
 800e6d8:	ee07 3a90 	vmov	s15, r3
 800e6dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e6e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e6e4:	69bb      	ldr	r3, [r7, #24]
 800e6e6:	ee07 3a90 	vmov	s15, r3
 800e6ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e6ee:	ed97 6a02 	vldr	s12, [r7, #8]
 800e6f2:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800e7ec <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800e6f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e6fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e6fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e702:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800e706:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e70a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800e70e:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800e710:	4b34      	ldr	r3, [pc, #208]	; (800e7e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800e712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e714:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d017      	beq.n	800e74c <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800e71c:	4b31      	ldr	r3, [pc, #196]	; (800e7e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800e71e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e720:	0a5b      	lsrs	r3, r3, #9
 800e722:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e726:	ee07 3a90 	vmov	s15, r3
 800e72a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 800e72e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e732:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800e736:	edd7 6a07 	vldr	s13, [r7, #28]
 800e73a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e73e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e742:	ee17 2a90 	vmov	r2, s15
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	601a      	str	r2, [r3, #0]
 800e74a:	e002      	b.n	800e752 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	2200      	movs	r2, #0
 800e750:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800e752:	4b24      	ldr	r3, [pc, #144]	; (800e7e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800e754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d017      	beq.n	800e78e <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800e75e:	4b21      	ldr	r3, [pc, #132]	; (800e7e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800e760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e762:	0c1b      	lsrs	r3, r3, #16
 800e764:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e768:	ee07 3a90 	vmov	s15, r3
 800e76c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 800e770:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e774:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800e778:	edd7 6a07 	vldr	s13, [r7, #28]
 800e77c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e780:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e784:	ee17 2a90 	vmov	r2, s15
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	605a      	str	r2, [r3, #4]
 800e78c:	e002      	b.n	800e794 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	2200      	movs	r2, #0
 800e792:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800e794:	4b13      	ldr	r3, [pc, #76]	; (800e7e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800e796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e798:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d017      	beq.n	800e7d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800e7a0:	4b10      	ldr	r3, [pc, #64]	; (800e7e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800e7a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e7a4:	0e1b      	lsrs	r3, r3, #24
 800e7a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e7aa:	ee07 3a90 	vmov	s15, r3
 800e7ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800e7b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e7b6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800e7ba:	edd7 6a07 	vldr	s13, [r7, #28]
 800e7be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e7c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e7c6:	ee17 2a90 	vmov	r2, s15
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800e7ce:	e002      	b.n	800e7d6 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	2200      	movs	r2, #0
 800e7d4:	609a      	str	r2, [r3, #8]
}
 800e7d6:	bf00      	nop
 800e7d8:	3724      	adds	r7, #36	; 0x24
 800e7da:	46bd      	mov	sp, r7
 800e7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e0:	4770      	bx	lr
 800e7e2:	bf00      	nop
 800e7e4:	46020c00 	.word	0x46020c00
 800e7e8:	4b742400 	.word	0x4b742400
 800e7ec:	46000000 	.word	0x46000000
 800e7f0:	0801ccf4 	.word	0x0801ccf4

0800e7f4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800e7f4:	b480      	push	{r7}
 800e7f6:	b089      	sub	sp, #36	; 0x24
 800e7f8:	af00      	add	r7, sp, #0
 800e7fa:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800e7fc:	4ba6      	ldr	r3, [pc, #664]	; (800ea98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800e7fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e800:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e804:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800e806:	4ba4      	ldr	r3, [pc, #656]	; (800ea98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800e808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e80a:	f003 0303 	and.w	r3, r3, #3
 800e80e:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 800e810:	4ba1      	ldr	r3, [pc, #644]	; (800ea98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800e812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e814:	0a1b      	lsrs	r3, r3, #8
 800e816:	f003 030f 	and.w	r3, r3, #15
 800e81a:	3301      	adds	r3, #1
 800e81c:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 800e81e:	4b9e      	ldr	r3, [pc, #632]	; (800ea98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800e820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e822:	091b      	lsrs	r3, r3, #4
 800e824:	f003 0301 	and.w	r3, r3, #1
 800e828:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800e82a:	4b9b      	ldr	r3, [pc, #620]	; (800ea98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800e82c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e82e:	08db      	lsrs	r3, r3, #3
 800e830:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e834:	68fa      	ldr	r2, [r7, #12]
 800e836:	fb02 f303 	mul.w	r3, r2, r3
 800e83a:	ee07 3a90 	vmov	s15, r3
 800e83e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e842:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 800e846:	697b      	ldr	r3, [r7, #20]
 800e848:	2b03      	cmp	r3, #3
 800e84a:	d062      	beq.n	800e912 <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 800e84c:	697b      	ldr	r3, [r7, #20]
 800e84e:	2b03      	cmp	r3, #3
 800e850:	f200 8081 	bhi.w	800e956 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 800e854:	697b      	ldr	r3, [r7, #20]
 800e856:	2b01      	cmp	r3, #1
 800e858:	d024      	beq.n	800e8a4 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 800e85a:	697b      	ldr	r3, [r7, #20]
 800e85c:	2b02      	cmp	r3, #2
 800e85e:	d17a      	bne.n	800e956 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800e860:	693b      	ldr	r3, [r7, #16]
 800e862:	ee07 3a90 	vmov	s15, r3
 800e866:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e86a:	eddf 6a8c 	vldr	s13, [pc, #560]	; 800ea9c <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800e86e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e872:	4b89      	ldr	r3, [pc, #548]	; (800ea98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800e874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e876:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e87a:	ee07 3a90 	vmov	s15, r3
 800e87e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800e882:	ed97 6a02 	vldr	s12, [r7, #8]
 800e886:	eddf 5a86 	vldr	s11, [pc, #536]	; 800eaa0 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800e88a:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800e88e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800e892:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e896:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800e89a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e89e:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 800e8a2:	e08f      	b.n	800e9c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800e8a4:	4b7c      	ldr	r3, [pc, #496]	; (800ea98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800e8a6:	689b      	ldr	r3, [r3, #8]
 800e8a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d005      	beq.n	800e8bc <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 800e8b0:	4b79      	ldr	r3, [pc, #484]	; (800ea98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800e8b2:	689b      	ldr	r3, [r3, #8]
 800e8b4:	0f1b      	lsrs	r3, r3, #28
 800e8b6:	f003 030f 	and.w	r3, r3, #15
 800e8ba:	e006      	b.n	800e8ca <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 800e8bc:	4b76      	ldr	r3, [pc, #472]	; (800ea98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800e8be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800e8c2:	041b      	lsls	r3, r3, #16
 800e8c4:	0f1b      	lsrs	r3, r3, #28
 800e8c6:	f003 030f 	and.w	r3, r3, #15
 800e8ca:	4a76      	ldr	r2, [pc, #472]	; (800eaa4 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800e8cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e8d0:	ee07 3a90 	vmov	s15, r3
 800e8d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e8d8:	693b      	ldr	r3, [r7, #16]
 800e8da:	ee07 3a90 	vmov	s15, r3
 800e8de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e8e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e8e6:	69bb      	ldr	r3, [r7, #24]
 800e8e8:	ee07 3a90 	vmov	s15, r3
 800e8ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e8f0:	ed97 6a02 	vldr	s12, [r7, #8]
 800e8f4:	eddf 5a6a 	vldr	s11, [pc, #424]	; 800eaa0 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800e8f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e8fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e900:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e904:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800e908:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e90c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800e910:	e058      	b.n	800e9c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800e912:	693b      	ldr	r3, [r7, #16]
 800e914:	ee07 3a90 	vmov	s15, r3
 800e918:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e91c:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ea9c <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800e920:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e924:	4b5c      	ldr	r3, [pc, #368]	; (800ea98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800e926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e928:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e92c:	ee07 3a90 	vmov	s15, r3
 800e930:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800e934:	ed97 6a02 	vldr	s12, [r7, #8]
 800e938:	eddf 5a59 	vldr	s11, [pc, #356]	; 800eaa0 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800e93c:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800e940:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800e944:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e948:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800e94c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e950:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800e954:	e036      	b.n	800e9c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800e956:	4b50      	ldr	r3, [pc, #320]	; (800ea98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800e958:	689b      	ldr	r3, [r3, #8]
 800e95a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d005      	beq.n	800e96e <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 800e962:	4b4d      	ldr	r3, [pc, #308]	; (800ea98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800e964:	689b      	ldr	r3, [r3, #8]
 800e966:	0f1b      	lsrs	r3, r3, #28
 800e968:	f003 030f 	and.w	r3, r3, #15
 800e96c:	e006      	b.n	800e97c <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 800e96e:	4b4a      	ldr	r3, [pc, #296]	; (800ea98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800e970:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800e974:	041b      	lsls	r3, r3, #16
 800e976:	0f1b      	lsrs	r3, r3, #28
 800e978:	f003 030f 	and.w	r3, r3, #15
 800e97c:	4a49      	ldr	r2, [pc, #292]	; (800eaa4 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800e97e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e982:	ee07 3a90 	vmov	s15, r3
 800e986:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e98a:	693b      	ldr	r3, [r7, #16]
 800e98c:	ee07 3a90 	vmov	s15, r3
 800e990:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e994:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e998:	69bb      	ldr	r3, [r7, #24]
 800e99a:	ee07 3a90 	vmov	s15, r3
 800e99e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e9a2:	ed97 6a02 	vldr	s12, [r7, #8]
 800e9a6:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800eaa0 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800e9aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e9ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e9b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e9b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800e9ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e9be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800e9c2:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800e9c4:	4b34      	ldr	r3, [pc, #208]	; (800ea98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800e9c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e9c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d017      	beq.n	800ea00 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800e9d0:	4b31      	ldr	r3, [pc, #196]	; (800ea98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800e9d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e9d4:	0a5b      	lsrs	r3, r3, #9
 800e9d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e9da:	ee07 3a90 	vmov	s15, r3
 800e9de:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800e9e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e9e6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800e9ea:	edd7 6a07 	vldr	s13, [r7, #28]
 800e9ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e9f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e9f6:	ee17 2a90 	vmov	r2, s15
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	601a      	str	r2, [r3, #0]
 800e9fe:	e002      	b.n	800ea06 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	2200      	movs	r2, #0
 800ea04:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800ea06:	4b24      	ldr	r3, [pc, #144]	; (800ea98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ea08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d017      	beq.n	800ea42 <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800ea12:	4b21      	ldr	r3, [pc, #132]	; (800ea98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ea14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ea16:	0c1b      	lsrs	r3, r3, #16
 800ea18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ea1c:	ee07 3a90 	vmov	s15, r3
 800ea20:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 800ea24:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ea28:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800ea2c:	edd7 6a07 	vldr	s13, [r7, #28]
 800ea30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ea34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ea38:	ee17 2a90 	vmov	r2, s15
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	605a      	str	r2, [r3, #4]
 800ea40:	e002      	b.n	800ea48 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	2200      	movs	r2, #0
 800ea46:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800ea48:	4b13      	ldr	r3, [pc, #76]	; (800ea98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ea4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d017      	beq.n	800ea84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800ea54:	4b10      	ldr	r3, [pc, #64]	; (800ea98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ea56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ea58:	0e1b      	lsrs	r3, r3, #24
 800ea5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ea5e:	ee07 3a90 	vmov	s15, r3
 800ea62:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800ea66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ea6a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800ea6e:	edd7 6a07 	vldr	s13, [r7, #28]
 800ea72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ea76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ea7a:	ee17 2a90 	vmov	r2, s15
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800ea82:	e002      	b.n	800ea8a <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	2200      	movs	r2, #0
 800ea88:	609a      	str	r2, [r3, #8]
}
 800ea8a:	bf00      	nop
 800ea8c:	3724      	adds	r7, #36	; 0x24
 800ea8e:	46bd      	mov	sp, r7
 800ea90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea94:	4770      	bx	lr
 800ea96:	bf00      	nop
 800ea98:	46020c00 	.word	0x46020c00
 800ea9c:	4b742400 	.word	0x4b742400
 800eaa0:	46000000 	.word	0x46000000
 800eaa4:	0801ccf4 	.word	0x0801ccf4

0800eaa8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800eaa8:	b580      	push	{r7, lr}
 800eaaa:	b08e      	sub	sp, #56	; 0x38
 800eaac:	af00      	add	r7, sp, #0
 800eaae:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800eab2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800eab6:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 800eaba:	430b      	orrs	r3, r1
 800eabc:	d145      	bne.n	800eb4a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800eabe:	4ba7      	ldr	r3, [pc, #668]	; (800ed5c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800eac0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800eac4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800eac8:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800eaca:	4ba4      	ldr	r3, [pc, #656]	; (800ed5c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800eacc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ead0:	f003 0302 	and.w	r3, r3, #2
 800ead4:	2b02      	cmp	r3, #2
 800ead6:	d108      	bne.n	800eaea <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800ead8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eada:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800eade:	d104      	bne.n	800eaea <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800eae0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800eae4:	637b      	str	r3, [r7, #52]	; 0x34
 800eae6:	f001 b9b3 	b.w	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800eaea:	4b9c      	ldr	r3, [pc, #624]	; (800ed5c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800eaec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800eaf0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800eaf4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800eaf8:	d114      	bne.n	800eb24 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800eafa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eafc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800eb00:	d110      	bne.n	800eb24 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800eb02:	4b96      	ldr	r3, [pc, #600]	; (800ed5c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800eb04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800eb08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800eb0c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800eb10:	d103      	bne.n	800eb1a <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800eb12:	23fa      	movs	r3, #250	; 0xfa
 800eb14:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800eb16:	f001 b99b 	b.w	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 800eb1a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800eb1e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800eb20:	f001 b996 	b.w	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800eb24:	4b8d      	ldr	r3, [pc, #564]	; (800ed5c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800eb2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800eb30:	d107      	bne.n	800eb42 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800eb32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800eb38:	d103      	bne.n	800eb42 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800eb3a:	4b89      	ldr	r3, [pc, #548]	; (800ed60 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800eb3c:	637b      	str	r3, [r7, #52]	; 0x34
 800eb3e:	f001 b987 	b.w	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800eb42:	2300      	movs	r3, #0
 800eb44:	637b      	str	r3, [r7, #52]	; 0x34
 800eb46:	f001 b983 	b.w	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800eb4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800eb4e:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800eb52:	430b      	orrs	r3, r1
 800eb54:	d151      	bne.n	800ebfa <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800eb56:	4b81      	ldr	r3, [pc, #516]	; (800ed5c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800eb58:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800eb5c:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800eb60:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800eb62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb64:	2b80      	cmp	r3, #128	; 0x80
 800eb66:	d035      	beq.n	800ebd4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 800eb68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb6a:	2b80      	cmp	r3, #128	; 0x80
 800eb6c:	d841      	bhi.n	800ebf2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800eb6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb70:	2b60      	cmp	r3, #96	; 0x60
 800eb72:	d02a      	beq.n	800ebca <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 800eb74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb76:	2b60      	cmp	r3, #96	; 0x60
 800eb78:	d83b      	bhi.n	800ebf2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800eb7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb7c:	2b40      	cmp	r3, #64	; 0x40
 800eb7e:	d009      	beq.n	800eb94 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800eb80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb82:	2b40      	cmp	r3, #64	; 0x40
 800eb84:	d835      	bhi.n	800ebf2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800eb86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d00c      	beq.n	800eba6 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 800eb8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb8e:	2b20      	cmp	r3, #32
 800eb90:	d012      	beq.n	800ebb8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800eb92:	e02e      	b.n	800ebf2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800eb94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800eb98:	4618      	mov	r0, r3
 800eb9a:	f7ff fb77 	bl	800e28c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800eb9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eba0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800eba2:	f001 b955 	b.w	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800eba6:	f107 0318 	add.w	r3, r7, #24
 800ebaa:	4618      	mov	r0, r3
 800ebac:	f7ff fcc8 	bl	800e540 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800ebb0:	69bb      	ldr	r3, [r7, #24]
 800ebb2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ebb4:	f001 b94c 	b.w	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ebb8:	f107 030c 	add.w	r3, r7, #12
 800ebbc:	4618      	mov	r0, r3
 800ebbe:	f7ff fe19 	bl	800e7f4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ebc6:	f001 b943 	b.w	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800ebca:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800ebce:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ebd0:	f001 b93e 	b.w	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ebd4:	4b61      	ldr	r3, [pc, #388]	; (800ed5c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ebdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ebe0:	d103      	bne.n	800ebea <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800ebe2:	4b60      	ldr	r3, [pc, #384]	; (800ed64 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800ebe4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800ebe6:	f001 b933 	b.w	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800ebea:	2300      	movs	r3, #0
 800ebec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ebee:	f001 b92f 	b.w	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :
      {
        frequency = 0U;
 800ebf2:	2300      	movs	r3, #0
 800ebf4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ebf6:	f001 b92b 	b.w	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800ebfa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ebfe:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800ec02:	430b      	orrs	r3, r1
 800ec04:	d158      	bne.n	800ecb8 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800ec06:	4b55      	ldr	r3, [pc, #340]	; (800ed5c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800ec08:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800ec0c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ec10:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800ec12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ec18:	d03b      	beq.n	800ec92 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800ec1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ec20:	d846      	bhi.n	800ecb0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800ec22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec24:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ec28:	d02e      	beq.n	800ec88 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800ec2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ec30:	d83e      	bhi.n	800ecb0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800ec32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ec38:	d00b      	beq.n	800ec52 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800ec3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ec40:	d836      	bhi.n	800ecb0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800ec42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d00d      	beq.n	800ec64 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800ec48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ec4e:	d012      	beq.n	800ec76 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 800ec50:	e02e      	b.n	800ecb0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ec52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ec56:	4618      	mov	r0, r3
 800ec58:	f7ff fb18 	bl	800e28c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800ec5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec5e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ec60:	f001 b8f6 	b.w	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ec64:	f107 0318 	add.w	r3, r7, #24
 800ec68:	4618      	mov	r0, r3
 800ec6a:	f7ff fc69 	bl	800e540 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800ec6e:	69bb      	ldr	r3, [r7, #24]
 800ec70:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ec72:	f001 b8ed 	b.w	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ec76:	f107 030c 	add.w	r3, r7, #12
 800ec7a:	4618      	mov	r0, r3
 800ec7c:	f7ff fdba 	bl	800e7f4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ec84:	f001 b8e4 	b.w	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800ec88:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800ec8c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ec8e:	f001 b8df 	b.w	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ec92:	4b32      	ldr	r3, [pc, #200]	; (800ed5c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ec9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ec9e:	d103      	bne.n	800eca8 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 800eca0:	4b30      	ldr	r3, [pc, #192]	; (800ed64 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800eca2:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800eca4:	f001 b8d4 	b.w	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800eca8:	2300      	movs	r3, #0
 800ecaa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ecac:	f001 b8d0 	b.w	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :

        frequency = 0U;
 800ecb0:	2300      	movs	r3, #0
 800ecb2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ecb4:	f001 b8cc 	b.w	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 800ecb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ecbc:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800ecc0:	430b      	orrs	r3, r1
 800ecc2:	d126      	bne.n	800ed12 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 800ecc4:	4b25      	ldr	r3, [pc, #148]	; (800ed5c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800ecc6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800ecca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ecce:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 800ecd0:	4b22      	ldr	r3, [pc, #136]	; (800ed5c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ecd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ecdc:	d106      	bne.n	800ecec <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800ecde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d103      	bne.n	800ecec <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 800ece4:	4b1f      	ldr	r3, [pc, #124]	; (800ed64 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800ece6:	637b      	str	r3, [r7, #52]	; 0x34
 800ece8:	f001 b8b2 	b.w	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 800ecec:	4b1b      	ldr	r3, [pc, #108]	; (800ed5c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ecf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ecf8:	d107      	bne.n	800ed0a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 800ecfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecfc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ed00:	d103      	bne.n	800ed0a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 800ed02:	4b19      	ldr	r3, [pc, #100]	; (800ed68 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800ed04:	637b      	str	r3, [r7, #52]	; 0x34
 800ed06:	f001 b8a3 	b.w	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 800ed0a:	2300      	movs	r3, #0
 800ed0c:	637b      	str	r3, [r7, #52]	; 0x34
 800ed0e:	f001 b89f 	b.w	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 800ed12:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ed16:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 800ed1a:	430b      	orrs	r3, r1
 800ed1c:	d16e      	bne.n	800edfc <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800ed1e:	4b0f      	ldr	r3, [pc, #60]	; (800ed5c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800ed20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ed24:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800ed28:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800ed2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed2c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800ed30:	d03d      	beq.n	800edae <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800ed32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed34:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800ed38:	d85c      	bhi.n	800edf4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800ed3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed3c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ed40:	d014      	beq.n	800ed6c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 800ed42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ed48:	d854      	bhi.n	800edf4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800ed4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d01f      	beq.n	800ed90 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 800ed50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed52:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ed56:	d012      	beq.n	800ed7e <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800ed58:	e04c      	b.n	800edf4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800ed5a:	bf00      	nop
 800ed5c:	46020c00 	.word	0x46020c00
 800ed60:	0007a120 	.word	0x0007a120
 800ed64:	00f42400 	.word	0x00f42400
 800ed68:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ed6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ed70:	4618      	mov	r0, r3
 800ed72:	f7ff fa8b 	bl	800e28c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800ed76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed78:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ed7a:	f001 b869 	b.w	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ed7e:	f107 0318 	add.w	r3, r7, #24
 800ed82:	4618      	mov	r0, r3
 800ed84:	f7ff fbdc 	bl	800e540 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800ed88:	69fb      	ldr	r3, [r7, #28]
 800ed8a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ed8c:	f001 b860 	b.w	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800ed90:	4ba7      	ldr	r3, [pc, #668]	; (800f030 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ed98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ed9c:	d103      	bne.n	800eda6 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 800ed9e:	4ba5      	ldr	r3, [pc, #660]	; (800f034 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800eda0:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800eda2:	f001 b855 	b.w	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800eda6:	2300      	movs	r3, #0
 800eda8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800edaa:	f001 b851 	b.w	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800edae:	4ba0      	ldr	r3, [pc, #640]	; (800f030 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	f003 0320 	and.w	r3, r3, #32
 800edb6:	2b20      	cmp	r3, #32
 800edb8:	d118      	bne.n	800edec <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800edba:	4b9d      	ldr	r3, [pc, #628]	; (800f030 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800edbc:	689b      	ldr	r3, [r3, #8]
 800edbe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d005      	beq.n	800edd2 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800edc6:	4b9a      	ldr	r3, [pc, #616]	; (800f030 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800edc8:	689b      	ldr	r3, [r3, #8]
 800edca:	0e1b      	lsrs	r3, r3, #24
 800edcc:	f003 030f 	and.w	r3, r3, #15
 800edd0:	e006      	b.n	800ede0 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800edd2:	4b97      	ldr	r3, [pc, #604]	; (800f030 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800edd4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800edd8:	041b      	lsls	r3, r3, #16
 800edda:	0e1b      	lsrs	r3, r3, #24
 800eddc:	f003 030f 	and.w	r3, r3, #15
 800ede0:	4a95      	ldr	r2, [pc, #596]	; (800f038 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800ede2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ede6:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800ede8:	f001 b832 	b.w	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800edec:	2300      	movs	r3, #0
 800edee:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800edf0:	f001 b82e 	b.w	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :

        frequency = 0U;
 800edf4:	2300      	movs	r3, #0
 800edf6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800edf8:	f001 b82a 	b.w	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800edfc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ee00:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 800ee04:	430b      	orrs	r3, r1
 800ee06:	d17f      	bne.n	800ef08 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800ee08:	4b89      	ldr	r3, [pc, #548]	; (800f030 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ee0a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800ee0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ee12:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 800ee14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d165      	bne.n	800eee6 <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800ee1a:	4b85      	ldr	r3, [pc, #532]	; (800f030 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ee1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ee20:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800ee24:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 800ee26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee28:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800ee2c:	d034      	beq.n	800ee98 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 800ee2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee30:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800ee34:	d853      	bhi.n	800eede <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800ee36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee38:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ee3c:	d00b      	beq.n	800ee56 <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 800ee3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ee44:	d84b      	bhi.n	800eede <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800ee46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d016      	beq.n	800ee7a <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 800ee4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee4e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ee52:	d009      	beq.n	800ee68 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800ee54:	e043      	b.n	800eede <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ee56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ee5a:	4618      	mov	r0, r3
 800ee5c:	f7ff fa16 	bl	800e28c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ee60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee62:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800ee64:	f000 bff4 	b.w	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ee68:	f107 0318 	add.w	r3, r7, #24
 800ee6c:	4618      	mov	r0, r3
 800ee6e:	f7ff fb67 	bl	800e540 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ee72:	69fb      	ldr	r3, [r7, #28]
 800ee74:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800ee76:	f000 bfeb 	b.w	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800ee7a:	4b6d      	ldr	r3, [pc, #436]	; (800f030 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ee82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ee86:	d103      	bne.n	800ee90 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 800ee88:	4b6a      	ldr	r3, [pc, #424]	; (800f034 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800ee8a:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800ee8c:	f000 bfe0 	b.w	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = 0U;
 800ee90:	2300      	movs	r3, #0
 800ee92:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800ee94:	f000 bfdc 	b.w	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800ee98:	4b65      	ldr	r3, [pc, #404]	; (800f030 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	f003 0320 	and.w	r3, r3, #32
 800eea0:	2b20      	cmp	r3, #32
 800eea2:	d118      	bne.n	800eed6 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800eea4:	4b62      	ldr	r3, [pc, #392]	; (800f030 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800eea6:	689b      	ldr	r3, [r3, #8]
 800eea8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d005      	beq.n	800eebc <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 800eeb0:	4b5f      	ldr	r3, [pc, #380]	; (800f030 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800eeb2:	689b      	ldr	r3, [r3, #8]
 800eeb4:	0e1b      	lsrs	r3, r3, #24
 800eeb6:	f003 030f 	and.w	r3, r3, #15
 800eeba:	e006      	b.n	800eeca <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800eebc:	4b5c      	ldr	r3, [pc, #368]	; (800f030 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800eebe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800eec2:	041b      	lsls	r3, r3, #16
 800eec4:	0e1b      	lsrs	r3, r3, #24
 800eec6:	f003 030f 	and.w	r3, r3, #15
 800eeca:	4a5b      	ldr	r2, [pc, #364]	; (800f038 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800eecc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eed0:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800eed2:	f000 bfbd 	b.w	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = 0U;
 800eed6:	2300      	movs	r3, #0
 800eed8:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800eeda:	f000 bfb9 	b.w	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        default :
        {
          frequency = 0U;
 800eede:	2300      	movs	r3, #0
 800eee0:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800eee2:	f000 bfb5 	b.w	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800eee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eee8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800eeec:	d108      	bne.n	800ef00 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800eeee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800eef2:	4618      	mov	r0, r3
 800eef4:	f7ff f9ca 	bl	800e28c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800eef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eefa:	637b      	str	r3, [r7, #52]	; 0x34
 800eefc:	f000 bfa8 	b.w	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else
    {
      frequency = 0U;
 800ef00:	2300      	movs	r3, #0
 800ef02:	637b      	str	r3, [r7, #52]	; 0x34
 800ef04:	f000 bfa4 	b.w	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 800ef08:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ef0c:	1e51      	subs	r1, r2, #1
 800ef0e:	430b      	orrs	r3, r1
 800ef10:	d136      	bne.n	800ef80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800ef12:	4b47      	ldr	r3, [pc, #284]	; (800f030 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ef14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ef18:	f003 0303 	and.w	r3, r3, #3
 800ef1c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800ef1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d104      	bne.n	800ef2e <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 800ef24:	f7fe fb44 	bl	800d5b0 <HAL_RCC_GetPCLK2Freq>
 800ef28:	6378      	str	r0, [r7, #52]	; 0x34
 800ef2a:	f000 bf91 	b.w	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800ef2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef30:	2b01      	cmp	r3, #1
 800ef32:	d104      	bne.n	800ef3e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800ef34:	f7fe fa0c 	bl	800d350 <HAL_RCC_GetSysClockFreq>
 800ef38:	6378      	str	r0, [r7, #52]	; 0x34
 800ef3a:	f000 bf89 	b.w	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800ef3e:	4b3c      	ldr	r3, [pc, #240]	; (800f030 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ef46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ef4a:	d106      	bne.n	800ef5a <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 800ef4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef4e:	2b02      	cmp	r3, #2
 800ef50:	d103      	bne.n	800ef5a <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 800ef52:	4b3a      	ldr	r3, [pc, #232]	; (800f03c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800ef54:	637b      	str	r3, [r7, #52]	; 0x34
 800ef56:	f000 bf7b 	b.w	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800ef5a:	4b35      	ldr	r3, [pc, #212]	; (800f030 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ef5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ef60:	f003 0302 	and.w	r3, r3, #2
 800ef64:	2b02      	cmp	r3, #2
 800ef66:	d107      	bne.n	800ef78 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800ef68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef6a:	2b03      	cmp	r3, #3
 800ef6c:	d104      	bne.n	800ef78 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 800ef6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ef72:	637b      	str	r3, [r7, #52]	; 0x34
 800ef74:	f000 bf6c 	b.w	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 800ef78:	2300      	movs	r3, #0
 800ef7a:	637b      	str	r3, [r7, #52]	; 0x34
 800ef7c:	f000 bf68 	b.w	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 800ef80:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ef84:	1e91      	subs	r1, r2, #2
 800ef86:	430b      	orrs	r3, r1
 800ef88:	d136      	bne.n	800eff8 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800ef8a:	4b29      	ldr	r3, [pc, #164]	; (800f030 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ef8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ef90:	f003 030c 	and.w	r3, r3, #12
 800ef94:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800ef96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d104      	bne.n	800efa6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800ef9c:	f7fe faf4 	bl	800d588 <HAL_RCC_GetPCLK1Freq>
 800efa0:	6378      	str	r0, [r7, #52]	; 0x34
 800efa2:	f000 bf55 	b.w	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800efa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efa8:	2b04      	cmp	r3, #4
 800efaa:	d104      	bne.n	800efb6 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800efac:	f7fe f9d0 	bl	800d350 <HAL_RCC_GetSysClockFreq>
 800efb0:	6378      	str	r0, [r7, #52]	; 0x34
 800efb2:	f000 bf4d 	b.w	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800efb6:	4b1e      	ldr	r3, [pc, #120]	; (800f030 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800efbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800efc2:	d106      	bne.n	800efd2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800efc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efc6:	2b08      	cmp	r3, #8
 800efc8:	d103      	bne.n	800efd2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 800efca:	4b1c      	ldr	r3, [pc, #112]	; (800f03c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800efcc:	637b      	str	r3, [r7, #52]	; 0x34
 800efce:	f000 bf3f 	b.w	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800efd2:	4b17      	ldr	r3, [pc, #92]	; (800f030 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800efd4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800efd8:	f003 0302 	and.w	r3, r3, #2
 800efdc:	2b02      	cmp	r3, #2
 800efde:	d107      	bne.n	800eff0 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 800efe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efe2:	2b0c      	cmp	r3, #12
 800efe4:	d104      	bne.n	800eff0 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 800efe6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800efea:	637b      	str	r3, [r7, #52]	; 0x34
 800efec:	f000 bf30 	b.w	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 800eff0:	2300      	movs	r3, #0
 800eff2:	637b      	str	r3, [r7, #52]	; 0x34
 800eff4:	f000 bf2c 	b.w	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 800eff8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800effc:	1f11      	subs	r1, r2, #4
 800effe:	430b      	orrs	r3, r1
 800f000:	d13f      	bne.n	800f082 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800f002:	4b0b      	ldr	r3, [pc, #44]	; (800f030 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800f004:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f008:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800f00c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800f00e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f010:	2b00      	cmp	r3, #0
 800f012:	d104      	bne.n	800f01e <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800f014:	f7fe fab8 	bl	800d588 <HAL_RCC_GetPCLK1Freq>
 800f018:	6378      	str	r0, [r7, #52]	; 0x34
 800f01a:	f000 bf19 	b.w	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800f01e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f020:	2b10      	cmp	r3, #16
 800f022:	d10d      	bne.n	800f040 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800f024:	f7fe f994 	bl	800d350 <HAL_RCC_GetSysClockFreq>
 800f028:	6378      	str	r0, [r7, #52]	; 0x34
 800f02a:	f000 bf11 	b.w	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 800f02e:	bf00      	nop
 800f030:	46020c00 	.word	0x46020c00
 800f034:	02dc6c00 	.word	0x02dc6c00
 800f038:	0801ccf4 	.word	0x0801ccf4
 800f03c:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800f040:	4ba6      	ldr	r3, [pc, #664]	; (800f2dc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800f042:	681b      	ldr	r3, [r3, #0]
 800f044:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f048:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f04c:	d106      	bne.n	800f05c <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 800f04e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f050:	2b20      	cmp	r3, #32
 800f052:	d103      	bne.n	800f05c <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 800f054:	4ba2      	ldr	r3, [pc, #648]	; (800f2e0 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800f056:	637b      	str	r3, [r7, #52]	; 0x34
 800f058:	f000 befa 	b.w	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800f05c:	4b9f      	ldr	r3, [pc, #636]	; (800f2dc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800f05e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f062:	f003 0302 	and.w	r3, r3, #2
 800f066:	2b02      	cmp	r3, #2
 800f068:	d107      	bne.n	800f07a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800f06a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f06c:	2b30      	cmp	r3, #48	; 0x30
 800f06e:	d104      	bne.n	800f07a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 800f070:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f074:	637b      	str	r3, [r7, #52]	; 0x34
 800f076:	f000 beeb 	b.w	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 800f07a:	2300      	movs	r3, #0
 800f07c:	637b      	str	r3, [r7, #52]	; 0x34
 800f07e:	f000 bee7 	b.w	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 800f082:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f086:	f1a2 0108 	sub.w	r1, r2, #8
 800f08a:	430b      	orrs	r3, r1
 800f08c:	d136      	bne.n	800f0fc <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800f08e:	4b93      	ldr	r3, [pc, #588]	; (800f2dc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800f090:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f094:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800f098:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800f09a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d104      	bne.n	800f0aa <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800f0a0:	f7fe fa72 	bl	800d588 <HAL_RCC_GetPCLK1Freq>
 800f0a4:	6378      	str	r0, [r7, #52]	; 0x34
 800f0a6:	f000 bed3 	b.w	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800f0aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0ac:	2b40      	cmp	r3, #64	; 0x40
 800f0ae:	d104      	bne.n	800f0ba <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800f0b0:	f7fe f94e 	bl	800d350 <HAL_RCC_GetSysClockFreq>
 800f0b4:	6378      	str	r0, [r7, #52]	; 0x34
 800f0b6:	f000 becb 	b.w	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800f0ba:	4b88      	ldr	r3, [pc, #544]	; (800f2dc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800f0bc:	681b      	ldr	r3, [r3, #0]
 800f0be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f0c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f0c6:	d106      	bne.n	800f0d6 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 800f0c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0ca:	2b80      	cmp	r3, #128	; 0x80
 800f0cc:	d103      	bne.n	800f0d6 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 800f0ce:	4b84      	ldr	r3, [pc, #528]	; (800f2e0 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800f0d0:	637b      	str	r3, [r7, #52]	; 0x34
 800f0d2:	f000 bebd 	b.w	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800f0d6:	4b81      	ldr	r3, [pc, #516]	; (800f2dc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800f0d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f0dc:	f003 0302 	and.w	r3, r3, #2
 800f0e0:	2b02      	cmp	r3, #2
 800f0e2:	d107      	bne.n	800f0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800f0e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0e6:	2bc0      	cmp	r3, #192	; 0xc0
 800f0e8:	d104      	bne.n	800f0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 800f0ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f0ee:	637b      	str	r3, [r7, #52]	; 0x34
 800f0f0:	f000 beae 	b.w	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800f0f4:	2300      	movs	r3, #0
 800f0f6:	637b      	str	r3, [r7, #52]	; 0x34
 800f0f8:	f000 beaa 	b.w	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 800f0fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f100:	f1a2 0110 	sub.w	r1, r2, #16
 800f104:	430b      	orrs	r3, r1
 800f106:	d139      	bne.n	800f17c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800f108:	4b74      	ldr	r3, [pc, #464]	; (800f2dc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800f10a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f10e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f112:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800f114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f116:	2b00      	cmp	r3, #0
 800f118:	d104      	bne.n	800f124 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800f11a:	f7fe fa35 	bl	800d588 <HAL_RCC_GetPCLK1Freq>
 800f11e:	6378      	str	r0, [r7, #52]	; 0x34
 800f120:	f000 be96 	b.w	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800f124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f126:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f12a:	d104      	bne.n	800f136 <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800f12c:	f7fe f910 	bl	800d350 <HAL_RCC_GetSysClockFreq>
 800f130:	6378      	str	r0, [r7, #52]	; 0x34
 800f132:	f000 be8d 	b.w	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800f136:	4b69      	ldr	r3, [pc, #420]	; (800f2dc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f13e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f142:	d107      	bne.n	800f154 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 800f144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f146:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f14a:	d103      	bne.n	800f154 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 800f14c:	4b64      	ldr	r3, [pc, #400]	; (800f2e0 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800f14e:	637b      	str	r3, [r7, #52]	; 0x34
 800f150:	f000 be7e 	b.w	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800f154:	4b61      	ldr	r3, [pc, #388]	; (800f2dc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800f156:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f15a:	f003 0302 	and.w	r3, r3, #2
 800f15e:	2b02      	cmp	r3, #2
 800f160:	d108      	bne.n	800f174 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 800f162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f164:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f168:	d104      	bne.n	800f174 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 800f16a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f16e:	637b      	str	r3, [r7, #52]	; 0x34
 800f170:	f000 be6e 	b.w	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800f174:	2300      	movs	r3, #0
 800f176:	637b      	str	r3, [r7, #52]	; 0x34
 800f178:	f000 be6a 	b.w	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800f17c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f180:	f1a2 0120 	sub.w	r1, r2, #32
 800f184:	430b      	orrs	r3, r1
 800f186:	d158      	bne.n	800f23a <HAL_RCCEx_GetPeriphCLKFreq+0x792>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800f188:	4b54      	ldr	r3, [pc, #336]	; (800f2dc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800f18a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800f18e:	f003 0307 	and.w	r3, r3, #7
 800f192:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800f194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f196:	2b00      	cmp	r3, #0
 800f198:	d104      	bne.n	800f1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 800f19a:	f7fe fa1d 	bl	800d5d8 <HAL_RCC_GetPCLK3Freq>
 800f19e:	6378      	str	r0, [r7, #52]	; 0x34
 800f1a0:	f000 be56 	b.w	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800f1a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1a6:	2b01      	cmp	r3, #1
 800f1a8:	d104      	bne.n	800f1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800f1aa:	f7fe f8d1 	bl	800d350 <HAL_RCC_GetSysClockFreq>
 800f1ae:	6378      	str	r0, [r7, #52]	; 0x34
 800f1b0:	f000 be4e 	b.w	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800f1b4:	4b49      	ldr	r3, [pc, #292]	; (800f2dc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f1bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f1c0:	d106      	bne.n	800f1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 800f1c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1c4:	2b02      	cmp	r3, #2
 800f1c6:	d103      	bne.n	800f1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
    {
      frequency = HSI_VALUE;
 800f1c8:	4b45      	ldr	r3, [pc, #276]	; (800f2e0 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800f1ca:	637b      	str	r3, [r7, #52]	; 0x34
 800f1cc:	f000 be40 	b.w	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800f1d0:	4b42      	ldr	r3, [pc, #264]	; (800f2dc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800f1d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f1d6:	f003 0302 	and.w	r3, r3, #2
 800f1da:	2b02      	cmp	r3, #2
 800f1dc:	d107      	bne.n	800f1ee <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 800f1de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1e0:	2b03      	cmp	r3, #3
 800f1e2:	d104      	bne.n	800f1ee <HAL_RCCEx_GetPeriphCLKFreq+0x746>
    {
      frequency = LSE_VALUE;
 800f1e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f1e8:	637b      	str	r3, [r7, #52]	; 0x34
 800f1ea:	f000 be31 	b.w	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800f1ee:	4b3b      	ldr	r3, [pc, #236]	; (800f2dc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	f003 0320 	and.w	r3, r3, #32
 800f1f6:	2b20      	cmp	r3, #32
 800f1f8:	d11b      	bne.n	800f232 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
 800f1fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1fc:	2b04      	cmp	r3, #4
 800f1fe:	d118      	bne.n	800f232 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f200:	4b36      	ldr	r3, [pc, #216]	; (800f2dc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800f202:	689b      	ldr	r3, [r3, #8]
 800f204:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d005      	beq.n	800f218 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800f20c:	4b33      	ldr	r3, [pc, #204]	; (800f2dc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800f20e:	689b      	ldr	r3, [r3, #8]
 800f210:	0e1b      	lsrs	r3, r3, #24
 800f212:	f003 030f 	and.w	r3, r3, #15
 800f216:	e006      	b.n	800f226 <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
 800f218:	4b30      	ldr	r3, [pc, #192]	; (800f2dc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800f21a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f21e:	041b      	lsls	r3, r3, #16
 800f220:	0e1b      	lsrs	r3, r3, #24
 800f222:	f003 030f 	and.w	r3, r3, #15
 800f226:	4a2f      	ldr	r2, [pc, #188]	; (800f2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f228:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f22c:	637b      	str	r3, [r7, #52]	; 0x34
 800f22e:	f000 be0f 	b.w	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800f232:	2300      	movs	r3, #0
 800f234:	637b      	str	r3, [r7, #52]	; 0x34
 800f236:	f000 be0b 	b.w	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 800f23a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f23e:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800f242:	430b      	orrs	r3, r1
 800f244:	d172      	bne.n	800f32c <HAL_RCCEx_GetPeriphCLKFreq+0x884>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800f246:	4b25      	ldr	r3, [pc, #148]	; (800f2dc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800f248:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800f24c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800f250:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800f252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f254:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f258:	d104      	bne.n	800f264 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800f25a:	f7fe f879 	bl	800d350 <HAL_RCC_GetSysClockFreq>
 800f25e:	6378      	str	r0, [r7, #52]	; 0x34
 800f260:	f000 bdf6 	b.w	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800f264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f266:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f26a:	d108      	bne.n	800f27e <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f26c:	f107 0318 	add.w	r3, r7, #24
 800f270:	4618      	mov	r0, r3
 800f272:	f7ff f965 	bl	800e540 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800f276:	6a3b      	ldr	r3, [r7, #32]
 800f278:	637b      	str	r3, [r7, #52]	; 0x34
 800f27a:	f000 bde9 	b.w	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800f27e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f280:	2b00      	cmp	r3, #0
 800f282:	d104      	bne.n	800f28e <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800f284:	f7fe f966 	bl	800d554 <HAL_RCC_GetHCLKFreq>
 800f288:	6378      	str	r0, [r7, #52]	; 0x34
 800f28a:	f000 bde1 	b.w	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800f28e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f290:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800f294:	d128      	bne.n	800f2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800f296:	4b11      	ldr	r3, [pc, #68]	; (800f2dc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800f298:	681b      	ldr	r3, [r3, #0]
 800f29a:	f003 0320 	and.w	r3, r3, #32
 800f29e:	2b20      	cmp	r3, #32
 800f2a0:	d118      	bne.n	800f2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f2a2:	4b0e      	ldr	r3, [pc, #56]	; (800f2dc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800f2a4:	689b      	ldr	r3, [r3, #8]
 800f2a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d005      	beq.n	800f2ba <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 800f2ae:	4b0b      	ldr	r3, [pc, #44]	; (800f2dc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800f2b0:	689b      	ldr	r3, [r3, #8]
 800f2b2:	0e1b      	lsrs	r3, r3, #24
 800f2b4:	f003 030f 	and.w	r3, r3, #15
 800f2b8:	e006      	b.n	800f2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 800f2ba:	4b08      	ldr	r3, [pc, #32]	; (800f2dc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800f2bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f2c0:	041b      	lsls	r3, r3, #16
 800f2c2:	0e1b      	lsrs	r3, r3, #24
 800f2c4:	f003 030f 	and.w	r3, r3, #15
 800f2c8:	4a06      	ldr	r2, [pc, #24]	; (800f2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f2ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f2ce:	637b      	str	r3, [r7, #52]	; 0x34
 800f2d0:	f000 bdbe 	b.w	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 800f2d4:	2300      	movs	r3, #0
 800f2d6:	637b      	str	r3, [r7, #52]	; 0x34
 800f2d8:	f000 bdba 	b.w	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 800f2dc:	46020c00 	.word	0x46020c00
 800f2e0:	00f42400 	.word	0x00f42400
 800f2e4:	0801ccf4 	.word	0x0801ccf4
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800f2e8:	4baf      	ldr	r3, [pc, #700]	; (800f5a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f2f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f2f4:	d107      	bne.n	800f306 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
 800f2f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2f8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800f2fc:	d103      	bne.n	800f306 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
    {
      frequency = HSE_VALUE;
 800f2fe:	4bab      	ldr	r3, [pc, #684]	; (800f5ac <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 800f300:	637b      	str	r3, [r7, #52]	; 0x34
 800f302:	f000 bda5 	b.w	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800f306:	4ba8      	ldr	r3, [pc, #672]	; (800f5a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f30e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f312:	d107      	bne.n	800f324 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
 800f314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f316:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f31a:	d103      	bne.n	800f324 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
    {
      frequency = HSI_VALUE;
 800f31c:	4ba3      	ldr	r3, [pc, #652]	; (800f5ac <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 800f31e:	637b      	str	r3, [r7, #52]	; 0x34
 800f320:	f000 bd96 	b.w	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800f324:	2300      	movs	r3, #0
 800f326:	637b      	str	r3, [r7, #52]	; 0x34
 800f328:	f000 bd92 	b.w	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800f32c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f330:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800f334:	430b      	orrs	r3, r1
 800f336:	d158      	bne.n	800f3ea <HAL_RCCEx_GetPeriphCLKFreq+0x942>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 800f338:	4b9b      	ldr	r3, [pc, #620]	; (800f5a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800f33a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800f33e:	f003 0307 	and.w	r3, r3, #7
 800f342:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800f344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f346:	2b04      	cmp	r3, #4
 800f348:	d84b      	bhi.n	800f3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
 800f34a:	a201      	add	r2, pc, #4	; (adr r2, 800f350 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 800f34c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f350:	0800f389 	.word	0x0800f389
 800f354:	0800f365 	.word	0x0800f365
 800f358:	0800f377 	.word	0x0800f377
 800f35c:	0800f393 	.word	0x0800f393
 800f360:	0800f39d 	.word	0x0800f39d
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f364:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f368:	4618      	mov	r0, r3
 800f36a:	f7fe ff8f 	bl	800e28c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800f36e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f370:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f372:	f000 bd6d 	b.w	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f376:	f107 030c 	add.w	r3, r7, #12
 800f37a:	4618      	mov	r0, r3
 800f37c:	f7ff fa3a 	bl	800e7f4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800f380:	693b      	ldr	r3, [r7, #16]
 800f382:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f384:	f000 bd64 	b.w	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800f388:	f7fe f8e4 	bl	800d554 <HAL_RCC_GetHCLKFreq>
 800f38c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800f38e:	f000 bd5f 	b.w	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800f392:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800f396:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f398:	f000 bd5a 	b.w	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800f39c:	4b82      	ldr	r3, [pc, #520]	; (800f5a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	f003 0320 	and.w	r3, r3, #32
 800f3a4:	2b20      	cmp	r3, #32
 800f3a6:	d118      	bne.n	800f3da <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f3a8:	4b7f      	ldr	r3, [pc, #508]	; (800f5a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800f3aa:	689b      	ldr	r3, [r3, #8]
 800f3ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d005      	beq.n	800f3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 800f3b4:	4b7c      	ldr	r3, [pc, #496]	; (800f5a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800f3b6:	689b      	ldr	r3, [r3, #8]
 800f3b8:	0e1b      	lsrs	r3, r3, #24
 800f3ba:	f003 030f 	and.w	r3, r3, #15
 800f3be:	e006      	b.n	800f3ce <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 800f3c0:	4b79      	ldr	r3, [pc, #484]	; (800f5a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800f3c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f3c6:	041b      	lsls	r3, r3, #16
 800f3c8:	0e1b      	lsrs	r3, r3, #24
 800f3ca:	f003 030f 	and.w	r3, r3, #15
 800f3ce:	4a78      	ldr	r2, [pc, #480]	; (800f5b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 800f3d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f3d4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800f3d6:	f000 bd3b 	b.w	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800f3da:	2300      	movs	r3, #0
 800f3dc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f3de:	f000 bd37 	b.w	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 800f3e2:	2300      	movs	r3, #0
 800f3e4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f3e6:	f000 bd33 	b.w	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800f3ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f3ee:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 800f3f2:	430b      	orrs	r3, r1
 800f3f4:	d167      	bne.n	800f4c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800f3f6:	4b6c      	ldr	r3, [pc, #432]	; (800f5a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800f3f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800f3fc:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800f400:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800f402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f404:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f408:	d036      	beq.n	800f478 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
 800f40a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f40c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f410:	d855      	bhi.n	800f4be <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 800f412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f414:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800f418:	d029      	beq.n	800f46e <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
 800f41a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f41c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800f420:	d84d      	bhi.n	800f4be <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 800f422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f424:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f428:	d013      	beq.n	800f452 <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 800f42a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f42c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f430:	d845      	bhi.n	800f4be <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 800f432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f434:	2b00      	cmp	r3, #0
 800f436:	d015      	beq.n	800f464 <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
 800f438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f43a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f43e:	d13e      	bne.n	800f4be <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f440:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f444:	4618      	mov	r0, r3
 800f446:	f7fe ff21 	bl	800e28c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800f44a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f44c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f44e:	f000 bcff 	b.w	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f452:	f107 030c 	add.w	r3, r7, #12
 800f456:	4618      	mov	r0, r3
 800f458:	f7ff f9cc 	bl	800e7f4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800f45c:	693b      	ldr	r3, [r7, #16]
 800f45e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f460:	f000 bcf6 	b.w	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800f464:	f7fe f876 	bl	800d554 <HAL_RCC_GetHCLKFreq>
 800f468:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800f46a:	f000 bcf1 	b.w	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800f46e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800f472:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f474:	f000 bcec 	b.w	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800f478:	4b4b      	ldr	r3, [pc, #300]	; (800f5a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	f003 0320 	and.w	r3, r3, #32
 800f480:	2b20      	cmp	r3, #32
 800f482:	d118      	bne.n	800f4b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa0e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f484:	4b48      	ldr	r3, [pc, #288]	; (800f5a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800f486:	689b      	ldr	r3, [r3, #8]
 800f488:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d005      	beq.n	800f49c <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
 800f490:	4b45      	ldr	r3, [pc, #276]	; (800f5a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800f492:	689b      	ldr	r3, [r3, #8]
 800f494:	0e1b      	lsrs	r3, r3, #24
 800f496:	f003 030f 	and.w	r3, r3, #15
 800f49a:	e006      	b.n	800f4aa <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800f49c:	4b42      	ldr	r3, [pc, #264]	; (800f5a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800f49e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f4a2:	041b      	lsls	r3, r3, #16
 800f4a4:	0e1b      	lsrs	r3, r3, #24
 800f4a6:	f003 030f 	and.w	r3, r3, #15
 800f4aa:	4a41      	ldr	r2, [pc, #260]	; (800f5b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 800f4ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f4b0:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800f4b2:	f000 bccd 	b.w	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800f4b6:	2300      	movs	r3, #0
 800f4b8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f4ba:	f000 bcc9 	b.w	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 800f4be:	2300      	movs	r3, #0
 800f4c0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f4c2:	f000 bcc5 	b.w	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800f4c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f4ca:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 800f4ce:	430b      	orrs	r3, r1
 800f4d0:	d14c      	bne.n	800f56c <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800f4d2:	4b35      	ldr	r3, [pc, #212]	; (800f5a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800f4d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f4d8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800f4dc:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800f4de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d104      	bne.n	800f4ee <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800f4e4:	f7fe f850 	bl	800d588 <HAL_RCC_GetPCLK1Freq>
 800f4e8:	6378      	str	r0, [r7, #52]	; 0x34
 800f4ea:	f000 bcb1 	b.w	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800f4ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f4f4:	d104      	bne.n	800f500 <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800f4f6:	f7fd ff2b 	bl	800d350 <HAL_RCC_GetSysClockFreq>
 800f4fa:	6378      	str	r0, [r7, #52]	; 0x34
 800f4fc:	f000 bca8 	b.w	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800f500:	4b29      	ldr	r3, [pc, #164]	; (800f5a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800f502:	681b      	ldr	r3, [r3, #0]
 800f504:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f508:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f50c:	d107      	bne.n	800f51e <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 800f50e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f510:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f514:	d103      	bne.n	800f51e <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
    {
      frequency = HSI_VALUE;
 800f516:	4b25      	ldr	r3, [pc, #148]	; (800f5ac <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 800f518:	637b      	str	r3, [r7, #52]	; 0x34
 800f51a:	f000 bc99 	b.w	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800f51e:	4b22      	ldr	r3, [pc, #136]	; (800f5a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	f003 0320 	and.w	r3, r3, #32
 800f526:	2b20      	cmp	r3, #32
 800f528:	d11c      	bne.n	800f564 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
 800f52a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f52c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f530:	d118      	bne.n	800f564 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f532:	4b1d      	ldr	r3, [pc, #116]	; (800f5a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800f534:	689b      	ldr	r3, [r3, #8]
 800f536:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d005      	beq.n	800f54a <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 800f53e:	4b1a      	ldr	r3, [pc, #104]	; (800f5a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800f540:	689b      	ldr	r3, [r3, #8]
 800f542:	0e1b      	lsrs	r3, r3, #24
 800f544:	f003 030f 	and.w	r3, r3, #15
 800f548:	e006      	b.n	800f558 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>
 800f54a:	4b17      	ldr	r3, [pc, #92]	; (800f5a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800f54c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f550:	041b      	lsls	r3, r3, #16
 800f552:	0e1b      	lsrs	r3, r3, #24
 800f554:	f003 030f 	and.w	r3, r3, #15
 800f558:	4a15      	ldr	r2, [pc, #84]	; (800f5b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 800f55a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f55e:	637b      	str	r3, [r7, #52]	; 0x34
 800f560:	f000 bc76 	b.w	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 800f564:	2300      	movs	r3, #0
 800f566:	637b      	str	r3, [r7, #52]	; 0x34
 800f568:	f000 bc72 	b.w	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 800f56c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f570:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 800f574:	430b      	orrs	r3, r1
 800f576:	d153      	bne.n	800f620 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800f578:	4b0b      	ldr	r3, [pc, #44]	; (800f5a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800f57a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f57e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800f582:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800f584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f586:	2b00      	cmp	r3, #0
 800f588:	d104      	bne.n	800f594 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800f58a:	f7fd fffd 	bl	800d588 <HAL_RCC_GetPCLK1Freq>
 800f58e:	6378      	str	r0, [r7, #52]	; 0x34
 800f590:	f000 bc5e 	b.w	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800f594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f596:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f59a:	d10b      	bne.n	800f5b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800f59c:	f7fd fed8 	bl	800d350 <HAL_RCC_GetSysClockFreq>
 800f5a0:	6378      	str	r0, [r7, #52]	; 0x34
 800f5a2:	f000 bc55 	b.w	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 800f5a6:	bf00      	nop
 800f5a8:	46020c00 	.word	0x46020c00
 800f5ac:	00f42400 	.word	0x00f42400
 800f5b0:	0801ccf4 	.word	0x0801ccf4
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800f5b4:	4ba1      	ldr	r3, [pc, #644]	; (800f83c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800f5b6:	681b      	ldr	r3, [r3, #0]
 800f5b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f5bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f5c0:	d107      	bne.n	800f5d2 <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
 800f5c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f5c8:	d103      	bne.n	800f5d2 <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
    {
      frequency = HSI_VALUE;
 800f5ca:	4b9d      	ldr	r3, [pc, #628]	; (800f840 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 800f5cc:	637b      	str	r3, [r7, #52]	; 0x34
 800f5ce:	f000 bc3f 	b.w	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800f5d2:	4b9a      	ldr	r3, [pc, #616]	; (800f83c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800f5d4:	681b      	ldr	r3, [r3, #0]
 800f5d6:	f003 0320 	and.w	r3, r3, #32
 800f5da:	2b20      	cmp	r3, #32
 800f5dc:	d11c      	bne.n	800f618 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
 800f5de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5e0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800f5e4:	d118      	bne.n	800f618 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f5e6:	4b95      	ldr	r3, [pc, #596]	; (800f83c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800f5e8:	689b      	ldr	r3, [r3, #8]
 800f5ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	d005      	beq.n	800f5fe <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
 800f5f2:	4b92      	ldr	r3, [pc, #584]	; (800f83c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800f5f4:	689b      	ldr	r3, [r3, #8]
 800f5f6:	0e1b      	lsrs	r3, r3, #24
 800f5f8:	f003 030f 	and.w	r3, r3, #15
 800f5fc:	e006      	b.n	800f60c <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 800f5fe:	4b8f      	ldr	r3, [pc, #572]	; (800f83c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800f600:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f604:	041b      	lsls	r3, r3, #16
 800f606:	0e1b      	lsrs	r3, r3, #24
 800f608:	f003 030f 	and.w	r3, r3, #15
 800f60c:	4a8d      	ldr	r2, [pc, #564]	; (800f844 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 800f60e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f612:	637b      	str	r3, [r7, #52]	; 0x34
 800f614:	f000 bc1c 	b.w	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800f618:	2300      	movs	r3, #0
 800f61a:	637b      	str	r3, [r7, #52]	; 0x34
 800f61c:	f000 bc18 	b.w	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800f620:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f624:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800f628:	430b      	orrs	r3, r1
 800f62a:	d151      	bne.n	800f6d0 <HAL_RCCEx_GetPeriphCLKFreq+0xc28>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800f62c:	4b83      	ldr	r3, [pc, #524]	; (800f83c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800f62e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800f632:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800f636:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800f638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f63a:	2bc0      	cmp	r3, #192	; 0xc0
 800f63c:	d024      	beq.n	800f688 <HAL_RCCEx_GetPeriphCLKFreq+0xbe0>
 800f63e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f640:	2bc0      	cmp	r3, #192	; 0xc0
 800f642:	d842      	bhi.n	800f6ca <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 800f644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f646:	2b80      	cmp	r3, #128	; 0x80
 800f648:	d00d      	beq.n	800f666 <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
 800f64a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f64c:	2b80      	cmp	r3, #128	; 0x80
 800f64e:	d83c      	bhi.n	800f6ca <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 800f650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f652:	2b00      	cmp	r3, #0
 800f654:	d003      	beq.n	800f65e <HAL_RCCEx_GetPeriphCLKFreq+0xbb6>
 800f656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f658:	2b40      	cmp	r3, #64	; 0x40
 800f65a:	d011      	beq.n	800f680 <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
 800f65c:	e035      	b.n	800f6ca <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800f65e:	f7fd ffbb 	bl	800d5d8 <HAL_RCC_GetPCLK3Freq>
 800f662:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800f664:	e3f4      	b.n	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800f666:	4b75      	ldr	r3, [pc, #468]	; (800f83c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f66e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f672:	d102      	bne.n	800f67a <HAL_RCCEx_GetPeriphCLKFreq+0xbd2>
        {
          frequency = HSI_VALUE;
 800f674:	4b72      	ldr	r3, [pc, #456]	; (800f840 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 800f676:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800f678:	e3ea      	b.n	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800f67a:	2300      	movs	r3, #0
 800f67c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f67e:	e3e7      	b.n	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 800f680:	f7fd fe66 	bl	800d350 <HAL_RCC_GetSysClockFreq>
 800f684:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800f686:	e3e3      	b.n	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800f688:	4b6c      	ldr	r3, [pc, #432]	; (800f83c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	f003 0320 	and.w	r3, r3, #32
 800f690:	2b20      	cmp	r3, #32
 800f692:	d117      	bne.n	800f6c4 <HAL_RCCEx_GetPeriphCLKFreq+0xc1c>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f694:	4b69      	ldr	r3, [pc, #420]	; (800f83c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800f696:	689b      	ldr	r3, [r3, #8]
 800f698:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d005      	beq.n	800f6ac <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
 800f6a0:	4b66      	ldr	r3, [pc, #408]	; (800f83c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800f6a2:	689b      	ldr	r3, [r3, #8]
 800f6a4:	0e1b      	lsrs	r3, r3, #24
 800f6a6:	f003 030f 	and.w	r3, r3, #15
 800f6aa:	e006      	b.n	800f6ba <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 800f6ac:	4b63      	ldr	r3, [pc, #396]	; (800f83c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800f6ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f6b2:	041b      	lsls	r3, r3, #16
 800f6b4:	0e1b      	lsrs	r3, r3, #24
 800f6b6:	f003 030f 	and.w	r3, r3, #15
 800f6ba:	4a62      	ldr	r2, [pc, #392]	; (800f844 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 800f6bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f6c0:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800f6c2:	e3c5      	b.n	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800f6c4:	2300      	movs	r3, #0
 800f6c6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f6c8:	e3c2      	b.n	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      default:
      {
        frequency = 0U;
 800f6ca:	2300      	movs	r3, #0
 800f6cc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f6ce:	e3bf      	b.n	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800f6d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f6d4:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 800f6d8:	430b      	orrs	r3, r1
 800f6da:	d147      	bne.n	800f76c <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800f6dc:	4b57      	ldr	r3, [pc, #348]	; (800f83c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800f6de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f6e2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800f6e6:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800f6e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d103      	bne.n	800f6f6 <HAL_RCCEx_GetPeriphCLKFreq+0xc4e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800f6ee:	f7fd ff4b 	bl	800d588 <HAL_RCC_GetPCLK1Freq>
 800f6f2:	6378      	str	r0, [r7, #52]	; 0x34
 800f6f4:	e3ac      	b.n	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800f6f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f6fc:	d103      	bne.n	800f706 <HAL_RCCEx_GetPeriphCLKFreq+0xc5e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800f6fe:	f7fd fe27 	bl	800d350 <HAL_RCC_GetSysClockFreq>
 800f702:	6378      	str	r0, [r7, #52]	; 0x34
 800f704:	e3a4      	b.n	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800f706:	4b4d      	ldr	r3, [pc, #308]	; (800f83c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f70e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f712:	d106      	bne.n	800f722 <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
 800f714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f716:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f71a:	d102      	bne.n	800f722 <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
    {
      frequency = HSI_VALUE;
 800f71c:	4b48      	ldr	r3, [pc, #288]	; (800f840 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 800f71e:	637b      	str	r3, [r7, #52]	; 0x34
 800f720:	e396      	b.n	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 800f722:	4b46      	ldr	r3, [pc, #280]	; (800f83c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	f003 0320 	and.w	r3, r3, #32
 800f72a:	2b20      	cmp	r3, #32
 800f72c:	d11b      	bne.n	800f766 <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
 800f72e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f730:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800f734:	d117      	bne.n	800f766 <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f736:	4b41      	ldr	r3, [pc, #260]	; (800f83c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800f738:	689b      	ldr	r3, [r3, #8]
 800f73a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d005      	beq.n	800f74e <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
 800f742:	4b3e      	ldr	r3, [pc, #248]	; (800f83c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800f744:	689b      	ldr	r3, [r3, #8]
 800f746:	0e1b      	lsrs	r3, r3, #24
 800f748:	f003 030f 	and.w	r3, r3, #15
 800f74c:	e006      	b.n	800f75c <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
 800f74e:	4b3b      	ldr	r3, [pc, #236]	; (800f83c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800f750:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f754:	041b      	lsls	r3, r3, #16
 800f756:	0e1b      	lsrs	r3, r3, #24
 800f758:	f003 030f 	and.w	r3, r3, #15
 800f75c:	4a39      	ldr	r2, [pc, #228]	; (800f844 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 800f75e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f762:	637b      	str	r3, [r7, #52]	; 0x34
 800f764:	e374      	b.n	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800f766:	2300      	movs	r3, #0
 800f768:	637b      	str	r3, [r7, #52]	; 0x34
 800f76a:	e371      	b.n	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800f76c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f770:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800f774:	430b      	orrs	r3, r1
 800f776:	d16a      	bne.n	800f84e <HAL_RCCEx_GetPeriphCLKFreq+0xda6>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800f778:	4b30      	ldr	r3, [pc, #192]	; (800f83c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800f77a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800f77e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f782:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800f784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f786:	2b00      	cmp	r3, #0
 800f788:	d120      	bne.n	800f7cc <HAL_RCCEx_GetPeriphCLKFreq+0xd24>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800f78a:	4b2c      	ldr	r3, [pc, #176]	; (800f83c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800f78c:	681b      	ldr	r3, [r3, #0]
 800f78e:	f003 0320 	and.w	r3, r3, #32
 800f792:	2b20      	cmp	r3, #32
 800f794:	d117      	bne.n	800f7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xd1e>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f796:	4b29      	ldr	r3, [pc, #164]	; (800f83c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800f798:	689b      	ldr	r3, [r3, #8]
 800f79a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d005      	beq.n	800f7ae <HAL_RCCEx_GetPeriphCLKFreq+0xd06>
 800f7a2:	4b26      	ldr	r3, [pc, #152]	; (800f83c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800f7a4:	689b      	ldr	r3, [r3, #8]
 800f7a6:	0e1b      	lsrs	r3, r3, #24
 800f7a8:	f003 030f 	and.w	r3, r3, #15
 800f7ac:	e006      	b.n	800f7bc <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 800f7ae:	4b23      	ldr	r3, [pc, #140]	; (800f83c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800f7b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f7b4:	041b      	lsls	r3, r3, #16
 800f7b6:	0e1b      	lsrs	r3, r3, #24
 800f7b8:	f003 030f 	and.w	r3, r3, #15
 800f7bc:	4a21      	ldr	r2, [pc, #132]	; (800f844 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 800f7be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f7c2:	637b      	str	r3, [r7, #52]	; 0x34
 800f7c4:	e344      	b.n	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 800f7c6:	2300      	movs	r3, #0
 800f7c8:	637b      	str	r3, [r7, #52]	; 0x34
 800f7ca:	e341      	b.n	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 800f7cc:	4b1b      	ldr	r3, [pc, #108]	; (800f83c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800f7ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f7d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f7d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f7da:	d112      	bne.n	800f802 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 800f7dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f7e2:	d10e      	bne.n	800f802 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800f7e4:	4b15      	ldr	r3, [pc, #84]	; (800f83c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800f7e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f7ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f7ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f7f2:	d102      	bne.n	800f7fa <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
      {
        frequency = LSI_VALUE / 128U;
 800f7f4:	23fa      	movs	r3, #250	; 0xfa
 800f7f6:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800f7f8:	e32a      	b.n	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 800f7fa:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800f7fe:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800f800:	e326      	b.n	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800f802:	4b0e      	ldr	r3, [pc, #56]	; (800f83c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800f804:	681b      	ldr	r3, [r3, #0]
 800f806:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f80a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f80e:	d106      	bne.n	800f81e <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
 800f810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f812:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f816:	d102      	bne.n	800f81e <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
    {
      frequency = HSI_VALUE;
 800f818:	4b09      	ldr	r3, [pc, #36]	; (800f840 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 800f81a:	637b      	str	r3, [r7, #52]	; 0x34
 800f81c:	e318      	b.n	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800f81e:	4b07      	ldr	r3, [pc, #28]	; (800f83c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800f820:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f824:	f003 0302 	and.w	r3, r3, #2
 800f828:	2b02      	cmp	r3, #2
 800f82a:	d10d      	bne.n	800f848 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
 800f82c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f82e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f832:	d109      	bne.n	800f848 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
    {
      frequency = LSE_VALUE;
 800f834:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f838:	637b      	str	r3, [r7, #52]	; 0x34
 800f83a:	e309      	b.n	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 800f83c:	46020c00 	.word	0x46020c00
 800f840:	00f42400 	.word	0x00f42400
 800f844:	0801ccf4 	.word	0x0801ccf4
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800f848:	2300      	movs	r3, #0
 800f84a:	637b      	str	r3, [r7, #52]	; 0x34
 800f84c:	e300      	b.n	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800f84e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f852:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800f856:	430b      	orrs	r3, r1
 800f858:	d164      	bne.n	800f924 <HAL_RCCEx_GetPeriphCLKFreq+0xe7c>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800f85a:	4ba2      	ldr	r3, [pc, #648]	; (800fae4 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800f85c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800f860:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800f864:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800f866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d120      	bne.n	800f8ae <HAL_RCCEx_GetPeriphCLKFreq+0xe06>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800f86c:	4b9d      	ldr	r3, [pc, #628]	; (800fae4 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	f003 0320 	and.w	r3, r3, #32
 800f874:	2b20      	cmp	r3, #32
 800f876:	d117      	bne.n	800f8a8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f878:	4b9a      	ldr	r3, [pc, #616]	; (800fae4 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800f87a:	689b      	ldr	r3, [r3, #8]
 800f87c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f880:	2b00      	cmp	r3, #0
 800f882:	d005      	beq.n	800f890 <HAL_RCCEx_GetPeriphCLKFreq+0xde8>
 800f884:	4b97      	ldr	r3, [pc, #604]	; (800fae4 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800f886:	689b      	ldr	r3, [r3, #8]
 800f888:	0e1b      	lsrs	r3, r3, #24
 800f88a:	f003 030f 	and.w	r3, r3, #15
 800f88e:	e006      	b.n	800f89e <HAL_RCCEx_GetPeriphCLKFreq+0xdf6>
 800f890:	4b94      	ldr	r3, [pc, #592]	; (800fae4 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800f892:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f896:	041b      	lsls	r3, r3, #16
 800f898:	0e1b      	lsrs	r3, r3, #24
 800f89a:	f003 030f 	and.w	r3, r3, #15
 800f89e:	4a92      	ldr	r2, [pc, #584]	; (800fae8 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 800f8a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f8a4:	637b      	str	r3, [r7, #52]	; 0x34
 800f8a6:	e2d3      	b.n	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 800f8a8:	2300      	movs	r3, #0
 800f8aa:	637b      	str	r3, [r7, #52]	; 0x34
 800f8ac:	e2d0      	b.n	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800f8ae:	4b8d      	ldr	r3, [pc, #564]	; (800fae4 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800f8b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f8b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f8b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f8bc:	d112      	bne.n	800f8e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
 800f8be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f8c4:	d10e      	bne.n	800f8e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800f8c6:	4b87      	ldr	r3, [pc, #540]	; (800fae4 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800f8c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f8cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f8d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f8d4:	d102      	bne.n	800f8dc <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
      {
        frequency = LSI_VALUE / 128U;
 800f8d6:	23fa      	movs	r3, #250	; 0xfa
 800f8d8:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800f8da:	e2b9      	b.n	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 800f8dc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800f8e0:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800f8e2:	e2b5      	b.n	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800f8e4:	4b7f      	ldr	r3, [pc, #508]	; (800fae4 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800f8e6:	681b      	ldr	r3, [r3, #0]
 800f8e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f8ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f8f0:	d106      	bne.n	800f900 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
 800f8f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f8f8:	d102      	bne.n	800f900 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
    {
      frequency = HSI_VALUE;
 800f8fa:	4b7c      	ldr	r3, [pc, #496]	; (800faec <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 800f8fc:	637b      	str	r3, [r7, #52]	; 0x34
 800f8fe:	e2a7      	b.n	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800f900:	4b78      	ldr	r3, [pc, #480]	; (800fae4 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800f902:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f906:	f003 0302 	and.w	r3, r3, #2
 800f90a:	2b02      	cmp	r3, #2
 800f90c:	d107      	bne.n	800f91e <HAL_RCCEx_GetPeriphCLKFreq+0xe76>
 800f90e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f910:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f914:	d103      	bne.n	800f91e <HAL_RCCEx_GetPeriphCLKFreq+0xe76>
    {
      frequency = LSE_VALUE;
 800f916:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f91a:	637b      	str	r3, [r7, #52]	; 0x34
 800f91c:	e298      	b.n	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800f91e:	2300      	movs	r3, #0
 800f920:	637b      	str	r3, [r7, #52]	; 0x34
 800f922:	e295      	b.n	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 800f924:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f928:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800f92c:	430b      	orrs	r3, r1
 800f92e:	d147      	bne.n	800f9c0 <HAL_RCCEx_GetPeriphCLKFreq+0xf18>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800f930:	4b6c      	ldr	r3, [pc, #432]	; (800fae4 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800f932:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f936:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800f93a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800f93c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d103      	bne.n	800f94a <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800f942:	f7fd fe21 	bl	800d588 <HAL_RCC_GetPCLK1Freq>
 800f946:	6378      	str	r0, [r7, #52]	; 0x34
 800f948:	e282      	b.n	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800f94a:	4b66      	ldr	r3, [pc, #408]	; (800fae4 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800f94c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f950:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f954:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f958:	d112      	bne.n	800f980 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
 800f95a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f95c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f960:	d10e      	bne.n	800f980 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800f962:	4b60      	ldr	r3, [pc, #384]	; (800fae4 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800f964:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f968:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f96c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f970:	d102      	bne.n	800f978 <HAL_RCCEx_GetPeriphCLKFreq+0xed0>
      {
        frequency = LSI_VALUE / 128U;
 800f972:	23fa      	movs	r3, #250	; 0xfa
 800f974:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800f976:	e26b      	b.n	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 800f978:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800f97c:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800f97e:	e267      	b.n	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800f980:	4b58      	ldr	r3, [pc, #352]	; (800fae4 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f988:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f98c:	d106      	bne.n	800f99c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 800f98e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f990:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800f994:	d102      	bne.n	800f99c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
    {
      frequency = HSI_VALUE;
 800f996:	4b55      	ldr	r3, [pc, #340]	; (800faec <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 800f998:	637b      	str	r3, [r7, #52]	; 0x34
 800f99a:	e259      	b.n	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 800f99c:	4b51      	ldr	r3, [pc, #324]	; (800fae4 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800f99e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f9a2:	f003 0302 	and.w	r3, r3, #2
 800f9a6:	2b02      	cmp	r3, #2
 800f9a8:	d107      	bne.n	800f9ba <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
 800f9aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9ac:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800f9b0:	d103      	bne.n	800f9ba <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      frequency = LSE_VALUE;
 800f9b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f9b6:	637b      	str	r3, [r7, #52]	; 0x34
 800f9b8:	e24a      	b.n	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800f9ba:	2300      	movs	r3, #0
 800f9bc:	637b      	str	r3, [r7, #52]	; 0x34
 800f9be:	e247      	b.n	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 800f9c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f9c4:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 800f9c8:	430b      	orrs	r3, r1
 800f9ca:	d12d      	bne.n	800fa28 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 800f9cc:	4b45      	ldr	r3, [pc, #276]	; (800fae4 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800f9ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f9d2:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800f9d6:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 800f9d8:	4b42      	ldr	r3, [pc, #264]	; (800fae4 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f9e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f9e4:	d105      	bne.n	800f9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 800f9e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d102      	bne.n	800f9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
    {
      frequency = HSE_VALUE;
 800f9ec:	4b3f      	ldr	r3, [pc, #252]	; (800faec <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 800f9ee:	637b      	str	r3, [r7, #52]	; 0x34
 800f9f0:	e22e      	b.n	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800f9f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800f9f8:	d107      	bne.n	800fa0a <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f9fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f9fe:	4618      	mov	r0, r3
 800fa00:	f7fe fc44 	bl	800e28c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 800fa04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa06:	637b      	str	r3, [r7, #52]	; 0x34
 800fa08:	e222      	b.n	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800fa0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa0c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800fa10:	d107      	bne.n	800fa22 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fa12:	f107 0318 	add.w	r3, r7, #24
 800fa16:	4618      	mov	r0, r3
 800fa18:	f7fe fd92 	bl	800e540 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 800fa1c:	69bb      	ldr	r3, [r7, #24]
 800fa1e:	637b      	str	r3, [r7, #52]	; 0x34
 800fa20:	e216      	b.n	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800fa22:	2300      	movs	r3, #0
 800fa24:	637b      	str	r3, [r7, #52]	; 0x34
 800fa26:	e213      	b.n	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 800fa28:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fa2c:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 800fa30:	430b      	orrs	r3, r1
 800fa32:	d15d      	bne.n	800faf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800fa34:	4b2b      	ldr	r3, [pc, #172]	; (800fae4 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800fa36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fa3a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800fa3e:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800fa40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa42:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800fa46:	d028      	beq.n	800fa9a <HAL_RCCEx_GetPeriphCLKFreq+0xff2>
 800fa48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa4a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800fa4e:	d845      	bhi.n	800fadc <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 800fa50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa52:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800fa56:	d013      	beq.n	800fa80 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 800fa58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa5a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800fa5e:	d83d      	bhi.n	800fadc <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 800fa60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	d004      	beq.n	800fa70 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>
 800fa66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fa6c:	d004      	beq.n	800fa78 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
 800fa6e:	e035      	b.n	800fadc <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 800fa70:	f7fd fd9e 	bl	800d5b0 <HAL_RCC_GetPCLK2Freq>
 800fa74:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800fa76:	e1eb      	b.n	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800fa78:	f7fd fc6a 	bl	800d350 <HAL_RCC_GetSysClockFreq>
 800fa7c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800fa7e:	e1e7      	b.n	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800fa80:	4b18      	ldr	r3, [pc, #96]	; (800fae4 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800fa82:	681b      	ldr	r3, [r3, #0]
 800fa84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fa88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fa8c:	d102      	bne.n	800fa94 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>
        {
          frequency = HSI_VALUE;
 800fa8e:	4b17      	ldr	r3, [pc, #92]	; (800faec <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 800fa90:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800fa92:	e1dd      	b.n	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800fa94:	2300      	movs	r3, #0
 800fa96:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fa98:	e1da      	b.n	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800fa9a:	4b12      	ldr	r3, [pc, #72]	; (800fae4 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800fa9c:	681b      	ldr	r3, [r3, #0]
 800fa9e:	f003 0320 	and.w	r3, r3, #32
 800faa2:	2b20      	cmp	r3, #32
 800faa4:	d117      	bne.n	800fad6 <HAL_RCCEx_GetPeriphCLKFreq+0x102e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800faa6:	4b0f      	ldr	r3, [pc, #60]	; (800fae4 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800faa8:	689b      	ldr	r3, [r3, #8]
 800faaa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800faae:	2b00      	cmp	r3, #0
 800fab0:	d005      	beq.n	800fabe <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
 800fab2:	4b0c      	ldr	r3, [pc, #48]	; (800fae4 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800fab4:	689b      	ldr	r3, [r3, #8]
 800fab6:	0e1b      	lsrs	r3, r3, #24
 800fab8:	f003 030f 	and.w	r3, r3, #15
 800fabc:	e006      	b.n	800facc <HAL_RCCEx_GetPeriphCLKFreq+0x1024>
 800fabe:	4b09      	ldr	r3, [pc, #36]	; (800fae4 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800fac0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800fac4:	041b      	lsls	r3, r3, #16
 800fac6:	0e1b      	lsrs	r3, r3, #24
 800fac8:	f003 030f 	and.w	r3, r3, #15
 800facc:	4a06      	ldr	r2, [pc, #24]	; (800fae8 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 800face:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fad2:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800fad4:	e1bc      	b.n	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800fad6:	2300      	movs	r3, #0
 800fad8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fada:	e1b9      	b.n	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 800fadc:	2300      	movs	r3, #0
 800fade:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fae0:	e1b6      	b.n	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 800fae2:	bf00      	nop
 800fae4:	46020c00 	.word	0x46020c00
 800fae8:	0801ccf4 	.word	0x0801ccf4
 800faec:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 800faf0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800faf4:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 800faf8:	430b      	orrs	r3, r1
 800fafa:	d156      	bne.n	800fbaa <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800fafc:	4ba5      	ldr	r3, [pc, #660]	; (800fd94 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800fafe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fb02:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800fb06:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800fb08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb0a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800fb0e:	d028      	beq.n	800fb62 <HAL_RCCEx_GetPeriphCLKFreq+0x10ba>
 800fb10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb12:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800fb16:	d845      	bhi.n	800fba4 <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
 800fb18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800fb1e:	d013      	beq.n	800fb48 <HAL_RCCEx_GetPeriphCLKFreq+0x10a0>
 800fb20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb22:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800fb26:	d83d      	bhi.n	800fba4 <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
 800fb28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	d004      	beq.n	800fb38 <HAL_RCCEx_GetPeriphCLKFreq+0x1090>
 800fb2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fb34:	d004      	beq.n	800fb40 <HAL_RCCEx_GetPeriphCLKFreq+0x1098>
 800fb36:	e035      	b.n	800fba4 <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800fb38:	f7fd fd26 	bl	800d588 <HAL_RCC_GetPCLK1Freq>
 800fb3c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800fb3e:	e187      	b.n	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800fb40:	f7fd fc06 	bl	800d350 <HAL_RCC_GetSysClockFreq>
 800fb44:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800fb46:	e183      	b.n	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800fb48:	4b92      	ldr	r3, [pc, #584]	; (800fd94 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800fb4a:	681b      	ldr	r3, [r3, #0]
 800fb4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fb50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fb54:	d102      	bne.n	800fb5c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>
        {
          frequency = HSI_VALUE;
 800fb56:	4b90      	ldr	r3, [pc, #576]	; (800fd98 <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 800fb58:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800fb5a:	e179      	b.n	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800fb5c:	2300      	movs	r3, #0
 800fb5e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fb60:	e176      	b.n	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800fb62:	4b8c      	ldr	r3, [pc, #560]	; (800fd94 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800fb64:	681b      	ldr	r3, [r3, #0]
 800fb66:	f003 0320 	and.w	r3, r3, #32
 800fb6a:	2b20      	cmp	r3, #32
 800fb6c:	d117      	bne.n	800fb9e <HAL_RCCEx_GetPeriphCLKFreq+0x10f6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800fb6e:	4b89      	ldr	r3, [pc, #548]	; (800fd94 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800fb70:	689b      	ldr	r3, [r3, #8]
 800fb72:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d005      	beq.n	800fb86 <HAL_RCCEx_GetPeriphCLKFreq+0x10de>
 800fb7a:	4b86      	ldr	r3, [pc, #536]	; (800fd94 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800fb7c:	689b      	ldr	r3, [r3, #8]
 800fb7e:	0e1b      	lsrs	r3, r3, #24
 800fb80:	f003 030f 	and.w	r3, r3, #15
 800fb84:	e006      	b.n	800fb94 <HAL_RCCEx_GetPeriphCLKFreq+0x10ec>
 800fb86:	4b83      	ldr	r3, [pc, #524]	; (800fd94 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800fb88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800fb8c:	041b      	lsls	r3, r3, #16
 800fb8e:	0e1b      	lsrs	r3, r3, #24
 800fb90:	f003 030f 	and.w	r3, r3, #15
 800fb94:	4a81      	ldr	r2, [pc, #516]	; (800fd9c <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 800fb96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fb9a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800fb9c:	e158      	b.n	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800fb9e:	2300      	movs	r3, #0
 800fba0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fba2:	e155      	b.n	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 800fba4:	2300      	movs	r3, #0
 800fba6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fba8:	e152      	b.n	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 800fbaa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fbae:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 800fbb2:	430b      	orrs	r3, r1
 800fbb4:	d177      	bne.n	800fca6 <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800fbb6:	4b77      	ldr	r3, [pc, #476]	; (800fd94 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800fbb8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800fbbc:	f003 0318 	and.w	r3, r3, #24
 800fbc0:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800fbc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbc4:	2b18      	cmp	r3, #24
 800fbc6:	d86b      	bhi.n	800fca0 <HAL_RCCEx_GetPeriphCLKFreq+0x11f8>
 800fbc8:	a201      	add	r2, pc, #4	; (adr r2, 800fbd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1128>)
 800fbca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbce:	bf00      	nop
 800fbd0:	0800fc35 	.word	0x0800fc35
 800fbd4:	0800fca1 	.word	0x0800fca1
 800fbd8:	0800fca1 	.word	0x0800fca1
 800fbdc:	0800fca1 	.word	0x0800fca1
 800fbe0:	0800fca1 	.word	0x0800fca1
 800fbe4:	0800fca1 	.word	0x0800fca1
 800fbe8:	0800fca1 	.word	0x0800fca1
 800fbec:	0800fca1 	.word	0x0800fca1
 800fbf0:	0800fc3d 	.word	0x0800fc3d
 800fbf4:	0800fca1 	.word	0x0800fca1
 800fbf8:	0800fca1 	.word	0x0800fca1
 800fbfc:	0800fca1 	.word	0x0800fca1
 800fc00:	0800fca1 	.word	0x0800fca1
 800fc04:	0800fca1 	.word	0x0800fca1
 800fc08:	0800fca1 	.word	0x0800fca1
 800fc0c:	0800fca1 	.word	0x0800fca1
 800fc10:	0800fc45 	.word	0x0800fc45
 800fc14:	0800fca1 	.word	0x0800fca1
 800fc18:	0800fca1 	.word	0x0800fca1
 800fc1c:	0800fca1 	.word	0x0800fca1
 800fc20:	0800fca1 	.word	0x0800fca1
 800fc24:	0800fca1 	.word	0x0800fca1
 800fc28:	0800fca1 	.word	0x0800fca1
 800fc2c:	0800fca1 	.word	0x0800fca1
 800fc30:	0800fc5f 	.word	0x0800fc5f
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 800fc34:	f7fd fcd0 	bl	800d5d8 <HAL_RCC_GetPCLK3Freq>
 800fc38:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800fc3a:	e109      	b.n	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800fc3c:	f7fd fb88 	bl	800d350 <HAL_RCC_GetSysClockFreq>
 800fc40:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800fc42:	e105      	b.n	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800fc44:	4b53      	ldr	r3, [pc, #332]	; (800fd94 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800fc46:	681b      	ldr	r3, [r3, #0]
 800fc48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fc4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fc50:	d102      	bne.n	800fc58 <HAL_RCCEx_GetPeriphCLKFreq+0x11b0>
        {
          frequency = HSI_VALUE;
 800fc52:	4b51      	ldr	r3, [pc, #324]	; (800fd98 <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 800fc54:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800fc56:	e0fb      	b.n	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800fc58:	2300      	movs	r3, #0
 800fc5a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fc5c:	e0f8      	b.n	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800fc5e:	4b4d      	ldr	r3, [pc, #308]	; (800fd94 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800fc60:	681b      	ldr	r3, [r3, #0]
 800fc62:	f003 0320 	and.w	r3, r3, #32
 800fc66:	2b20      	cmp	r3, #32
 800fc68:	d117      	bne.n	800fc9a <HAL_RCCEx_GetPeriphCLKFreq+0x11f2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800fc6a:	4b4a      	ldr	r3, [pc, #296]	; (800fd94 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800fc6c:	689b      	ldr	r3, [r3, #8]
 800fc6e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fc72:	2b00      	cmp	r3, #0
 800fc74:	d005      	beq.n	800fc82 <HAL_RCCEx_GetPeriphCLKFreq+0x11da>
 800fc76:	4b47      	ldr	r3, [pc, #284]	; (800fd94 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800fc78:	689b      	ldr	r3, [r3, #8]
 800fc7a:	0e1b      	lsrs	r3, r3, #24
 800fc7c:	f003 030f 	and.w	r3, r3, #15
 800fc80:	e006      	b.n	800fc90 <HAL_RCCEx_GetPeriphCLKFreq+0x11e8>
 800fc82:	4b44      	ldr	r3, [pc, #272]	; (800fd94 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800fc84:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800fc88:	041b      	lsls	r3, r3, #16
 800fc8a:	0e1b      	lsrs	r3, r3, #24
 800fc8c:	f003 030f 	and.w	r3, r3, #15
 800fc90:	4a42      	ldr	r2, [pc, #264]	; (800fd9c <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 800fc92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fc96:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800fc98:	e0da      	b.n	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800fc9a:	2300      	movs	r3, #0
 800fc9c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fc9e:	e0d7      	b.n	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 800fca0:	2300      	movs	r3, #0
 800fca2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fca4:	e0d4      	b.n	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800fca6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fcaa:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 800fcae:	430b      	orrs	r3, r1
 800fcb0:	d155      	bne.n	800fd5e <HAL_RCCEx_GetPeriphCLKFreq+0x12b6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800fcb2:	4b38      	ldr	r3, [pc, #224]	; (800fd94 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800fcb4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800fcb8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800fcbc:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800fcbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcc0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800fcc4:	d013      	beq.n	800fcee <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
 800fcc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcc8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800fccc:	d844      	bhi.n	800fd58 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
 800fcce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcd0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800fcd4:	d013      	beq.n	800fcfe <HAL_RCCEx_GetPeriphCLKFreq+0x1256>
 800fcd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcd8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800fcdc:	d83c      	bhi.n	800fd58 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
 800fcde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d014      	beq.n	800fd0e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 800fce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fce6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fcea:	d014      	beq.n	800fd16 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
 800fcec:	e034      	b.n	800fd58 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fcee:	f107 0318 	add.w	r3, r7, #24
 800fcf2:	4618      	mov	r0, r3
 800fcf4:	f7fe fc24 	bl	800e540 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800fcf8:	69fb      	ldr	r3, [r7, #28]
 800fcfa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fcfc:	e0a8      	b.n	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800fcfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fd02:	4618      	mov	r0, r3
 800fd04:	f7fe fac2 	bl	800e28c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800fd08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd0a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fd0c:	e0a0      	b.n	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800fd0e:	f7fd fb1f 	bl	800d350 <HAL_RCC_GetSysClockFreq>
 800fd12:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800fd14:	e09c      	b.n	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800fd16:	4b1f      	ldr	r3, [pc, #124]	; (800fd94 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800fd18:	681b      	ldr	r3, [r3, #0]
 800fd1a:	f003 0320 	and.w	r3, r3, #32
 800fd1e:	2b20      	cmp	r3, #32
 800fd20:	d117      	bne.n	800fd52 <HAL_RCCEx_GetPeriphCLKFreq+0x12aa>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800fd22:	4b1c      	ldr	r3, [pc, #112]	; (800fd94 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800fd24:	689b      	ldr	r3, [r3, #8]
 800fd26:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	d005      	beq.n	800fd3a <HAL_RCCEx_GetPeriphCLKFreq+0x1292>
 800fd2e:	4b19      	ldr	r3, [pc, #100]	; (800fd94 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800fd30:	689b      	ldr	r3, [r3, #8]
 800fd32:	0e1b      	lsrs	r3, r3, #24
 800fd34:	f003 030f 	and.w	r3, r3, #15
 800fd38:	e006      	b.n	800fd48 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 800fd3a:	4b16      	ldr	r3, [pc, #88]	; (800fd94 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800fd3c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800fd40:	041b      	lsls	r3, r3, #16
 800fd42:	0e1b      	lsrs	r3, r3, #24
 800fd44:	f003 030f 	and.w	r3, r3, #15
 800fd48:	4a14      	ldr	r2, [pc, #80]	; (800fd9c <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 800fd4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fd4e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800fd50:	e07e      	b.n	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800fd52:	2300      	movs	r3, #0
 800fd54:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fd56:	e07b      	b.n	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 800fd58:	2300      	movs	r3, #0
 800fd5a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fd5c:	e078      	b.n	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800fd5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fd62:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 800fd66:	430b      	orrs	r3, r1
 800fd68:	d138      	bne.n	800fddc <HAL_RCCEx_GetPeriphCLKFreq+0x1334>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800fd6a:	4b0a      	ldr	r3, [pc, #40]	; (800fd94 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800fd6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800fd70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fd74:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800fd76:	4b07      	ldr	r3, [pc, #28]	; (800fd94 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800fd78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800fd7c:	f003 0302 	and.w	r3, r3, #2
 800fd80:	2b02      	cmp	r3, #2
 800fd82:	d10d      	bne.n	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
 800fd84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d10a      	bne.n	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
    {
      frequency = LSE_VALUE;
 800fd8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fd8e:	637b      	str	r3, [r7, #52]	; 0x34
 800fd90:	e05e      	b.n	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 800fd92:	bf00      	nop
 800fd94:	46020c00 	.word	0x46020c00
 800fd98:	00f42400 	.word	0x00f42400
 800fd9c:	0801ccf4 	.word	0x0801ccf4
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800fda0:	4b2e      	ldr	r3, [pc, #184]	; (800fe5c <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 800fda2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800fda6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fdaa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800fdae:	d112      	bne.n	800fdd6 <HAL_RCCEx_GetPeriphCLKFreq+0x132e>
 800fdb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fdb6:	d10e      	bne.n	800fdd6 <HAL_RCCEx_GetPeriphCLKFreq+0x132e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800fdb8:	4b28      	ldr	r3, [pc, #160]	; (800fe5c <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 800fdba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800fdbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fdc2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fdc6:	d102      	bne.n	800fdce <HAL_RCCEx_GetPeriphCLKFreq+0x1326>
      {
        frequency = LSI_VALUE / 128U;
 800fdc8:	23fa      	movs	r3, #250	; 0xfa
 800fdca:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800fdcc:	e040      	b.n	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 800fdce:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800fdd2:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800fdd4:	e03c      	b.n	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800fdd6:	2300      	movs	r3, #0
 800fdd8:	637b      	str	r3, [r7, #52]	; 0x34
 800fdda:	e039      	b.n	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 800fddc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fde0:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800fde4:	430b      	orrs	r3, r1
 800fde6:	d131      	bne.n	800fe4c <HAL_RCCEx_GetPeriphCLKFreq+0x13a4>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800fde8:	4b1c      	ldr	r3, [pc, #112]	; (800fe5c <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 800fdea:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800fdee:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800fdf2:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800fdf4:	4b19      	ldr	r3, [pc, #100]	; (800fe5c <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 800fdf6:	681b      	ldr	r3, [r3, #0]
 800fdf8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800fdfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fe00:	d105      	bne.n	800fe0e <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
 800fe02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d102      	bne.n	800fe0e <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
    {
      frequency = HSI48_VALUE;
 800fe08:	4b15      	ldr	r3, [pc, #84]	; (800fe60 <HAL_RCCEx_GetPeriphCLKFreq+0x13b8>)
 800fe0a:	637b      	str	r3, [r7, #52]	; 0x34
 800fe0c:	e020      	b.n	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 800fe0e:	4b13      	ldr	r3, [pc, #76]	; (800fe5c <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 800fe10:	681b      	ldr	r3, [r3, #0]
 800fe12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800fe16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fe1a:	d106      	bne.n	800fe2a <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
 800fe1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fe22:	d102      	bne.n	800fe2a <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
    {
      frequency = HSI48_VALUE >> 1U ;
 800fe24:	4b0f      	ldr	r3, [pc, #60]	; (800fe64 <HAL_RCCEx_GetPeriphCLKFreq+0x13bc>)
 800fe26:	637b      	str	r3, [r7, #52]	; 0x34
 800fe28:	e012      	b.n	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 800fe2a:	4b0c      	ldr	r3, [pc, #48]	; (800fe5c <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 800fe2c:	681b      	ldr	r3, [r3, #0]
 800fe2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fe32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fe36:	d106      	bne.n	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
 800fe38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fe3e:	d102      	bne.n	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
    {
      frequency = HSI_VALUE;
 800fe40:	4b09      	ldr	r3, [pc, #36]	; (800fe68 <HAL_RCCEx_GetPeriphCLKFreq+0x13c0>)
 800fe42:	637b      	str	r3, [r7, #52]	; 0x34
 800fe44:	e004      	b.n	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 800fe46:	2300      	movs	r3, #0
 800fe48:	637b      	str	r3, [r7, #52]	; 0x34
 800fe4a:	e001      	b.n	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 800fe4c:	2300      	movs	r3, #0
 800fe4e:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 800fe50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800fe52:	4618      	mov	r0, r3
 800fe54:	3738      	adds	r7, #56	; 0x38
 800fe56:	46bd      	mov	sp, r7
 800fe58:	bd80      	pop	{r7, pc}
 800fe5a:	bf00      	nop
 800fe5c:	46020c00 	.word	0x46020c00
 800fe60:	02dc6c00 	.word	0x02dc6c00
 800fe64:	016e3600 	.word	0x016e3600
 800fe68:	00f42400 	.word	0x00f42400

0800fe6c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800fe6c:	b580      	push	{r7, lr}
 800fe6e:	b084      	sub	sp, #16
 800fe70:	af00      	add	r7, sp, #0
 800fe72:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800fe74:	4b47      	ldr	r3, [pc, #284]	; (800ff94 <RCCEx_PLL2_Config+0x128>)
 800fe76:	681b      	ldr	r3, [r3, #0]
 800fe78:	4a46      	ldr	r2, [pc, #280]	; (800ff94 <RCCEx_PLL2_Config+0x128>)
 800fe7a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800fe7e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800fe80:	f7f9 ff82 	bl	8009d88 <HAL_GetTick>
 800fe84:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800fe86:	e008      	b.n	800fe9a <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800fe88:	f7f9 ff7e 	bl	8009d88 <HAL_GetTick>
 800fe8c:	4602      	mov	r2, r0
 800fe8e:	68fb      	ldr	r3, [r7, #12]
 800fe90:	1ad3      	subs	r3, r2, r3
 800fe92:	2b02      	cmp	r3, #2
 800fe94:	d901      	bls.n	800fe9a <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800fe96:	2303      	movs	r3, #3
 800fe98:	e077      	b.n	800ff8a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800fe9a:	4b3e      	ldr	r3, [pc, #248]	; (800ff94 <RCCEx_PLL2_Config+0x128>)
 800fe9c:	681b      	ldr	r3, [r3, #0]
 800fe9e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	d1f0      	bne.n	800fe88 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800fea6:	4b3b      	ldr	r3, [pc, #236]	; (800ff94 <RCCEx_PLL2_Config+0x128>)
 800fea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800feaa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800feae:	f023 0303 	bic.w	r3, r3, #3
 800feb2:	687a      	ldr	r2, [r7, #4]
 800feb4:	6811      	ldr	r1, [r2, #0]
 800feb6:	687a      	ldr	r2, [r7, #4]
 800feb8:	6852      	ldr	r2, [r2, #4]
 800feba:	3a01      	subs	r2, #1
 800febc:	0212      	lsls	r2, r2, #8
 800febe:	430a      	orrs	r2, r1
 800fec0:	4934      	ldr	r1, [pc, #208]	; (800ff94 <RCCEx_PLL2_Config+0x128>)
 800fec2:	4313      	orrs	r3, r2
 800fec4:	62cb      	str	r3, [r1, #44]	; 0x2c
 800fec6:	4b33      	ldr	r3, [pc, #204]	; (800ff94 <RCCEx_PLL2_Config+0x128>)
 800fec8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800feca:	4b33      	ldr	r3, [pc, #204]	; (800ff98 <RCCEx_PLL2_Config+0x12c>)
 800fecc:	4013      	ands	r3, r2
 800fece:	687a      	ldr	r2, [r7, #4]
 800fed0:	6892      	ldr	r2, [r2, #8]
 800fed2:	3a01      	subs	r2, #1
 800fed4:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800fed8:	687a      	ldr	r2, [r7, #4]
 800feda:	68d2      	ldr	r2, [r2, #12]
 800fedc:	3a01      	subs	r2, #1
 800fede:	0252      	lsls	r2, r2, #9
 800fee0:	b292      	uxth	r2, r2
 800fee2:	4311      	orrs	r1, r2
 800fee4:	687a      	ldr	r2, [r7, #4]
 800fee6:	6912      	ldr	r2, [r2, #16]
 800fee8:	3a01      	subs	r2, #1
 800feea:	0412      	lsls	r2, r2, #16
 800feec:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800fef0:	4311      	orrs	r1, r2
 800fef2:	687a      	ldr	r2, [r7, #4]
 800fef4:	6952      	ldr	r2, [r2, #20]
 800fef6:	3a01      	subs	r2, #1
 800fef8:	0612      	lsls	r2, r2, #24
 800fefa:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800fefe:	430a      	orrs	r2, r1
 800ff00:	4924      	ldr	r1, [pc, #144]	; (800ff94 <RCCEx_PLL2_Config+0x128>)
 800ff02:	4313      	orrs	r3, r2
 800ff04:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800ff06:	4b23      	ldr	r3, [pc, #140]	; (800ff94 <RCCEx_PLL2_Config+0x128>)
 800ff08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff0a:	f023 020c 	bic.w	r2, r3, #12
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	699b      	ldr	r3, [r3, #24]
 800ff12:	4920      	ldr	r1, [pc, #128]	; (800ff94 <RCCEx_PLL2_Config+0x128>)
 800ff14:	4313      	orrs	r3, r2
 800ff16:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800ff18:	4b1e      	ldr	r3, [pc, #120]	; (800ff94 <RCCEx_PLL2_Config+0x128>)
 800ff1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	6a1b      	ldr	r3, [r3, #32]
 800ff20:	491c      	ldr	r1, [pc, #112]	; (800ff94 <RCCEx_PLL2_Config+0x128>)
 800ff22:	4313      	orrs	r3, r2
 800ff24:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800ff26:	4b1b      	ldr	r3, [pc, #108]	; (800ff94 <RCCEx_PLL2_Config+0x128>)
 800ff28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff2a:	4a1a      	ldr	r2, [pc, #104]	; (800ff94 <RCCEx_PLL2_Config+0x128>)
 800ff2c:	f023 0310 	bic.w	r3, r3, #16
 800ff30:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800ff32:	4b18      	ldr	r3, [pc, #96]	; (800ff94 <RCCEx_PLL2_Config+0x128>)
 800ff34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ff3a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800ff3e:	687a      	ldr	r2, [r7, #4]
 800ff40:	69d2      	ldr	r2, [r2, #28]
 800ff42:	00d2      	lsls	r2, r2, #3
 800ff44:	4913      	ldr	r1, [pc, #76]	; (800ff94 <RCCEx_PLL2_Config+0x128>)
 800ff46:	4313      	orrs	r3, r2
 800ff48:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800ff4a:	4b12      	ldr	r3, [pc, #72]	; (800ff94 <RCCEx_PLL2_Config+0x128>)
 800ff4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff4e:	4a11      	ldr	r2, [pc, #68]	; (800ff94 <RCCEx_PLL2_Config+0x128>)
 800ff50:	f043 0310 	orr.w	r3, r3, #16
 800ff54:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800ff56:	4b0f      	ldr	r3, [pc, #60]	; (800ff94 <RCCEx_PLL2_Config+0x128>)
 800ff58:	681b      	ldr	r3, [r3, #0]
 800ff5a:	4a0e      	ldr	r2, [pc, #56]	; (800ff94 <RCCEx_PLL2_Config+0x128>)
 800ff5c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ff60:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800ff62:	f7f9 ff11 	bl	8009d88 <HAL_GetTick>
 800ff66:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ff68:	e008      	b.n	800ff7c <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ff6a:	f7f9 ff0d 	bl	8009d88 <HAL_GetTick>
 800ff6e:	4602      	mov	r2, r0
 800ff70:	68fb      	ldr	r3, [r7, #12]
 800ff72:	1ad3      	subs	r3, r2, r3
 800ff74:	2b02      	cmp	r3, #2
 800ff76:	d901      	bls.n	800ff7c <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 800ff78:	2303      	movs	r3, #3
 800ff7a:	e006      	b.n	800ff8a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ff7c:	4b05      	ldr	r3, [pc, #20]	; (800ff94 <RCCEx_PLL2_Config+0x128>)
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d0f0      	beq.n	800ff6a <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 800ff88:	2300      	movs	r3, #0

}
 800ff8a:	4618      	mov	r0, r3
 800ff8c:	3710      	adds	r7, #16
 800ff8e:	46bd      	mov	sp, r7
 800ff90:	bd80      	pop	{r7, pc}
 800ff92:	bf00      	nop
 800ff94:	46020c00 	.word	0x46020c00
 800ff98:	80800000 	.word	0x80800000

0800ff9c <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800ff9c:	b580      	push	{r7, lr}
 800ff9e:	b084      	sub	sp, #16
 800ffa0:	af00      	add	r7, sp, #0
 800ffa2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800ffa4:	4b47      	ldr	r3, [pc, #284]	; (80100c4 <RCCEx_PLL3_Config+0x128>)
 800ffa6:	681b      	ldr	r3, [r3, #0]
 800ffa8:	4a46      	ldr	r2, [pc, #280]	; (80100c4 <RCCEx_PLL3_Config+0x128>)
 800ffaa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ffae:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800ffb0:	f7f9 feea 	bl	8009d88 <HAL_GetTick>
 800ffb4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ffb6:	e008      	b.n	800ffca <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ffb8:	f7f9 fee6 	bl	8009d88 <HAL_GetTick>
 800ffbc:	4602      	mov	r2, r0
 800ffbe:	68fb      	ldr	r3, [r7, #12]
 800ffc0:	1ad3      	subs	r3, r2, r3
 800ffc2:	2b02      	cmp	r3, #2
 800ffc4:	d901      	bls.n	800ffca <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800ffc6:	2303      	movs	r3, #3
 800ffc8:	e077      	b.n	80100ba <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ffca:	4b3e      	ldr	r3, [pc, #248]	; (80100c4 <RCCEx_PLL3_Config+0x128>)
 800ffcc:	681b      	ldr	r3, [r3, #0]
 800ffce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	d1f0      	bne.n	800ffb8 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800ffd6:	4b3b      	ldr	r3, [pc, #236]	; (80100c4 <RCCEx_PLL3_Config+0x128>)
 800ffd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ffda:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800ffde:	f023 0303 	bic.w	r3, r3, #3
 800ffe2:	687a      	ldr	r2, [r7, #4]
 800ffe4:	6811      	ldr	r1, [r2, #0]
 800ffe6:	687a      	ldr	r2, [r7, #4]
 800ffe8:	6852      	ldr	r2, [r2, #4]
 800ffea:	3a01      	subs	r2, #1
 800ffec:	0212      	lsls	r2, r2, #8
 800ffee:	430a      	orrs	r2, r1
 800fff0:	4934      	ldr	r1, [pc, #208]	; (80100c4 <RCCEx_PLL3_Config+0x128>)
 800fff2:	4313      	orrs	r3, r2
 800fff4:	630b      	str	r3, [r1, #48]	; 0x30
 800fff6:	4b33      	ldr	r3, [pc, #204]	; (80100c4 <RCCEx_PLL3_Config+0x128>)
 800fff8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fffa:	4b33      	ldr	r3, [pc, #204]	; (80100c8 <RCCEx_PLL3_Config+0x12c>)
 800fffc:	4013      	ands	r3, r2
 800fffe:	687a      	ldr	r2, [r7, #4]
 8010000:	6892      	ldr	r2, [r2, #8]
 8010002:	3a01      	subs	r2, #1
 8010004:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8010008:	687a      	ldr	r2, [r7, #4]
 801000a:	68d2      	ldr	r2, [r2, #12]
 801000c:	3a01      	subs	r2, #1
 801000e:	0252      	lsls	r2, r2, #9
 8010010:	b292      	uxth	r2, r2
 8010012:	4311      	orrs	r1, r2
 8010014:	687a      	ldr	r2, [r7, #4]
 8010016:	6912      	ldr	r2, [r2, #16]
 8010018:	3a01      	subs	r2, #1
 801001a:	0412      	lsls	r2, r2, #16
 801001c:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8010020:	4311      	orrs	r1, r2
 8010022:	687a      	ldr	r2, [r7, #4]
 8010024:	6952      	ldr	r2, [r2, #20]
 8010026:	3a01      	subs	r2, #1
 8010028:	0612      	lsls	r2, r2, #24
 801002a:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 801002e:	430a      	orrs	r2, r1
 8010030:	4924      	ldr	r1, [pc, #144]	; (80100c4 <RCCEx_PLL3_Config+0x128>)
 8010032:	4313      	orrs	r3, r2
 8010034:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8010036:	4b23      	ldr	r3, [pc, #140]	; (80100c4 <RCCEx_PLL3_Config+0x128>)
 8010038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801003a:	f023 020c 	bic.w	r2, r3, #12
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	699b      	ldr	r3, [r3, #24]
 8010042:	4920      	ldr	r1, [pc, #128]	; (80100c4 <RCCEx_PLL3_Config+0x128>)
 8010044:	4313      	orrs	r3, r2
 8010046:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8010048:	4b1e      	ldr	r3, [pc, #120]	; (80100c4 <RCCEx_PLL3_Config+0x128>)
 801004a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	6a1b      	ldr	r3, [r3, #32]
 8010050:	491c      	ldr	r1, [pc, #112]	; (80100c4 <RCCEx_PLL3_Config+0x128>)
 8010052:	4313      	orrs	r3, r2
 8010054:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8010056:	4b1b      	ldr	r3, [pc, #108]	; (80100c4 <RCCEx_PLL3_Config+0x128>)
 8010058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801005a:	4a1a      	ldr	r2, [pc, #104]	; (80100c4 <RCCEx_PLL3_Config+0x128>)
 801005c:	f023 0310 	bic.w	r3, r3, #16
 8010060:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8010062:	4b18      	ldr	r3, [pc, #96]	; (80100c4 <RCCEx_PLL3_Config+0x128>)
 8010064:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010066:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801006a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 801006e:	687a      	ldr	r2, [r7, #4]
 8010070:	69d2      	ldr	r2, [r2, #28]
 8010072:	00d2      	lsls	r2, r2, #3
 8010074:	4913      	ldr	r1, [pc, #76]	; (80100c4 <RCCEx_PLL3_Config+0x128>)
 8010076:	4313      	orrs	r3, r2
 8010078:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 801007a:	4b12      	ldr	r3, [pc, #72]	; (80100c4 <RCCEx_PLL3_Config+0x128>)
 801007c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801007e:	4a11      	ldr	r2, [pc, #68]	; (80100c4 <RCCEx_PLL3_Config+0x128>)
 8010080:	f043 0310 	orr.w	r3, r3, #16
 8010084:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8010086:	4b0f      	ldr	r3, [pc, #60]	; (80100c4 <RCCEx_PLL3_Config+0x128>)
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	4a0e      	ldr	r2, [pc, #56]	; (80100c4 <RCCEx_PLL3_Config+0x128>)
 801008c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010090:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8010092:	f7f9 fe79 	bl	8009d88 <HAL_GetTick>
 8010096:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8010098:	e008      	b.n	80100ac <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 801009a:	f7f9 fe75 	bl	8009d88 <HAL_GetTick>
 801009e:	4602      	mov	r2, r0
 80100a0:	68fb      	ldr	r3, [r7, #12]
 80100a2:	1ad3      	subs	r3, r2, r3
 80100a4:	2b02      	cmp	r3, #2
 80100a6:	d901      	bls.n	80100ac <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 80100a8:	2303      	movs	r3, #3
 80100aa:	e006      	b.n	80100ba <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80100ac:	4b05      	ldr	r3, [pc, #20]	; (80100c4 <RCCEx_PLL3_Config+0x128>)
 80100ae:	681b      	ldr	r3, [r3, #0]
 80100b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	d0f0      	beq.n	801009a <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 80100b8:	2300      	movs	r3, #0
}
 80100ba:	4618      	mov	r0, r3
 80100bc:	3710      	adds	r7, #16
 80100be:	46bd      	mov	sp, r7
 80100c0:	bd80      	pop	{r7, pc}
 80100c2:	bf00      	nop
 80100c4:	46020c00 	.word	0x46020c00
 80100c8:	80800000 	.word	0x80800000

080100cc <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80100cc:	b580      	push	{r7, lr}
 80100ce:	b084      	sub	sp, #16
 80100d0:	af00      	add	r7, sp, #0
 80100d2:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	d101      	bne.n	80100de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80100da:	2301      	movs	r3, #1
 80100dc:	e0fb      	b.n	80102d6 <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	681b      	ldr	r3, [r3, #0]
 80100e2:	4a7f      	ldr	r2, [pc, #508]	; (80102e0 <HAL_SPI_Init+0x214>)
 80100e4:	4293      	cmp	r3, r2
 80100e6:	d004      	beq.n	80100f2 <HAL_SPI_Init+0x26>
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	681b      	ldr	r3, [r3, #0]
 80100ec:	4a7d      	ldr	r2, [pc, #500]	; (80102e4 <HAL_SPI_Init+0x218>)
 80100ee:	4293      	cmp	r3, r2
 80100f0:	e000      	b.n	80100f4 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 80100f2:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	2200      	movs	r2, #0
 80100f8:	629a      	str	r2, [r3, #40]	; 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	681b      	ldr	r3, [r3, #0]
 80100fe:	4a78      	ldr	r2, [pc, #480]	; (80102e0 <HAL_SPI_Init+0x214>)
 8010100:	4293      	cmp	r3, r2
 8010102:	d004      	beq.n	801010e <HAL_SPI_Init+0x42>
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	681b      	ldr	r3, [r3, #0]
 8010108:	4a76      	ldr	r2, [pc, #472]	; (80102e4 <HAL_SPI_Init+0x218>)
 801010a:	4293      	cmp	r3, r2
 801010c:	d105      	bne.n	801011a <HAL_SPI_Init+0x4e>
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	68db      	ldr	r3, [r3, #12]
 8010112:	2b0f      	cmp	r3, #15
 8010114:	d901      	bls.n	801011a <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 8010116:	2301      	movs	r3, #1
 8010118:	e0dd      	b.n	80102d6 <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 801011a:	6878      	ldr	r0, [r7, #4]
 801011c:	f001 f9be 	bl	801149c <SPI_GetPacketSize>
 8010120:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	681b      	ldr	r3, [r3, #0]
 8010126:	4a6e      	ldr	r2, [pc, #440]	; (80102e0 <HAL_SPI_Init+0x214>)
 8010128:	4293      	cmp	r3, r2
 801012a:	d004      	beq.n	8010136 <HAL_SPI_Init+0x6a>
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	681b      	ldr	r3, [r3, #0]
 8010130:	4a6c      	ldr	r2, [pc, #432]	; (80102e4 <HAL_SPI_Init+0x218>)
 8010132:	4293      	cmp	r3, r2
 8010134:	d102      	bne.n	801013c <HAL_SPI_Init+0x70>
 8010136:	68fb      	ldr	r3, [r7, #12]
 8010138:	2b08      	cmp	r3, #8
 801013a:	d816      	bhi.n	801016a <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8010140:	4a69      	ldr	r2, [pc, #420]	; (80102e8 <HAL_SPI_Init+0x21c>)
 8010142:	4293      	cmp	r3, r2
 8010144:	d00e      	beq.n	8010164 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	4a68      	ldr	r2, [pc, #416]	; (80102ec <HAL_SPI_Init+0x220>)
 801014c:	4293      	cmp	r3, r2
 801014e:	d009      	beq.n	8010164 <HAL_SPI_Init+0x98>
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	681b      	ldr	r3, [r3, #0]
 8010154:	4a66      	ldr	r2, [pc, #408]	; (80102f0 <HAL_SPI_Init+0x224>)
 8010156:	4293      	cmp	r3, r2
 8010158:	d004      	beq.n	8010164 <HAL_SPI_Init+0x98>
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	681b      	ldr	r3, [r3, #0]
 801015e:	4a65      	ldr	r2, [pc, #404]	; (80102f4 <HAL_SPI_Init+0x228>)
 8010160:	4293      	cmp	r3, r2
 8010162:	d104      	bne.n	801016e <HAL_SPI_Init+0xa2>
 8010164:	68fb      	ldr	r3, [r7, #12]
 8010166:	2b10      	cmp	r3, #16
 8010168:	d901      	bls.n	801016e <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 801016a:	2301      	movs	r3, #1
 801016c:	e0b3      	b.n	80102d6 <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8010174:	b2db      	uxtb	r3, r3
 8010176:	2b00      	cmp	r3, #0
 8010178:	d106      	bne.n	8010188 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	2200      	movs	r2, #0
 801017e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8010182:	6878      	ldr	r0, [r7, #4]
 8010184:	f7f1 f834 	bl	80011f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	2202      	movs	r2, #2
 801018c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	681a      	ldr	r2, [r3, #0]
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	681b      	ldr	r3, [r3, #0]
 801019a:	f022 0201 	bic.w	r2, r2, #1
 801019e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	681b      	ldr	r3, [r3, #0]
 80101a4:	689b      	ldr	r3, [r3, #8]
 80101a6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80101aa:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	699b      	ldr	r3, [r3, #24]
 80101b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80101b4:	d119      	bne.n	80101ea <HAL_SPI_Init+0x11e>
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	685b      	ldr	r3, [r3, #4]
 80101ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80101be:	d103      	bne.n	80101c8 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d008      	beq.n	80101da <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	d10c      	bne.n	80101ea <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80101d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80101d8:	d107      	bne.n	80101ea <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	681b      	ldr	r3, [r3, #0]
 80101de:	681a      	ldr	r2, [r3, #0]
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	681b      	ldr	r3, [r3, #0]
 80101e4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80101e8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	685b      	ldr	r3, [r3, #4]
 80101ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d00f      	beq.n	8010216 <HAL_SPI_Init+0x14a>
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	68db      	ldr	r3, [r3, #12]
 80101fa:	2b06      	cmp	r3, #6
 80101fc:	d90b      	bls.n	8010216 <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	681b      	ldr	r3, [r3, #0]
 8010204:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	681b      	ldr	r3, [r3, #0]
 8010210:	430a      	orrs	r2, r1
 8010212:	601a      	str	r2, [r3, #0]
 8010214:	e007      	b.n	8010226 <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	681b      	ldr	r3, [r3, #0]
 801021a:	681a      	ldr	r2, [r3, #0]
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8010224:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	69da      	ldr	r2, [r3, #28]
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801022e:	431a      	orrs	r2, r3
 8010230:	68bb      	ldr	r3, [r7, #8]
 8010232:	431a      	orrs	r2, r3
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010238:	ea42 0103 	orr.w	r1, r2, r3
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	68da      	ldr	r2, [r3, #12]
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	681b      	ldr	r3, [r3, #0]
 8010244:	430a      	orrs	r2, r1
 8010246:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010250:	431a      	orrs	r2, r3
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010256:	431a      	orrs	r2, r3
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	699b      	ldr	r3, [r3, #24]
 801025c:	431a      	orrs	r2, r3
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	691b      	ldr	r3, [r3, #16]
 8010262:	431a      	orrs	r2, r3
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	695b      	ldr	r3, [r3, #20]
 8010268:	431a      	orrs	r2, r3
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	6a1b      	ldr	r3, [r3, #32]
 801026e:	431a      	orrs	r2, r3
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	685b      	ldr	r3, [r3, #4]
 8010274:	431a      	orrs	r2, r3
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801027a:	431a      	orrs	r2, r3
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	689b      	ldr	r3, [r3, #8]
 8010280:	431a      	orrs	r2, r3
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010286:	431a      	orrs	r2, r3
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801028c:	431a      	orrs	r2, r3
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010292:	ea42 0103 	orr.w	r1, r2, r3
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	681b      	ldr	r3, [r3, #0]
 801029e:	430a      	orrs	r2, r1
 80102a0:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	685b      	ldr	r3, [r3, #4]
 80102a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d00a      	beq.n	80102c4 <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	681b      	ldr	r3, [r3, #0]
 80102b2:	68db      	ldr	r3, [r3, #12]
 80102b4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	681b      	ldr	r3, [r3, #0]
 80102c0:	430a      	orrs	r2, r1
 80102c2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	2200      	movs	r2, #0
 80102c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	2201      	movs	r2, #1
 80102d0:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  return HAL_OK;
 80102d4:	2300      	movs	r3, #0
}
 80102d6:	4618      	mov	r0, r3
 80102d8:	3710      	adds	r7, #16
 80102da:	46bd      	mov	sp, r7
 80102dc:	bd80      	pop	{r7, pc}
 80102de:	bf00      	nop
 80102e0:	46002000 	.word	0x46002000
 80102e4:	56002000 	.word	0x56002000
 80102e8:	40013000 	.word	0x40013000
 80102ec:	50013000 	.word	0x50013000
 80102f0:	40003800 	.word	0x40003800
 80102f4:	50003800 	.word	0x50003800

080102f8 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80102f8:	b580      	push	{r7, lr}
 80102fa:	b08a      	sub	sp, #40	; 0x28
 80102fc:	af02      	add	r7, sp, #8
 80102fe:	60f8      	str	r0, [r7, #12]
 8010300:	60b9      	str	r1, [r7, #8]
 8010302:	603b      	str	r3, [r7, #0]
 8010304:	4613      	mov	r3, r2
 8010306:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8010308:	68fb      	ldr	r3, [r7, #12]
 801030a:	681b      	ldr	r3, [r3, #0]
 801030c:	3320      	adds	r3, #32
 801030e:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8010310:	2300      	movs	r3, #0
 8010312:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8010314:	68fb      	ldr	r3, [r7, #12]
 8010316:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 801031a:	2b01      	cmp	r3, #1
 801031c:	d101      	bne.n	8010322 <HAL_SPI_Transmit+0x2a>
 801031e:	2302      	movs	r3, #2
 8010320:	e203      	b.n	801072a <HAL_SPI_Transmit+0x432>
 8010322:	68fb      	ldr	r3, [r7, #12]
 8010324:	2201      	movs	r2, #1
 8010326:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801032a:	f7f9 fd2d 	bl	8009d88 <HAL_GetTick>
 801032e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8010330:	68fb      	ldr	r3, [r7, #12]
 8010332:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8010336:	b2db      	uxtb	r3, r3
 8010338:	2b01      	cmp	r3, #1
 801033a:	d007      	beq.n	801034c <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 801033c:	2302      	movs	r3, #2
 801033e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8010340:	68fb      	ldr	r3, [r7, #12]
 8010342:	2200      	movs	r2, #0
 8010344:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 8010348:	7efb      	ldrb	r3, [r7, #27]
 801034a:	e1ee      	b.n	801072a <HAL_SPI_Transmit+0x432>
  }

  if ((pData == NULL) || (Size == 0UL))
 801034c:	68bb      	ldr	r3, [r7, #8]
 801034e:	2b00      	cmp	r3, #0
 8010350:	d002      	beq.n	8010358 <HAL_SPI_Transmit+0x60>
 8010352:	88fb      	ldrh	r3, [r7, #6]
 8010354:	2b00      	cmp	r3, #0
 8010356:	d107      	bne.n	8010368 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8010358:	2301      	movs	r3, #1
 801035a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 801035c:	68fb      	ldr	r3, [r7, #12]
 801035e:	2200      	movs	r2, #0
 8010360:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 8010364:	7efb      	ldrb	r3, [r7, #27]
 8010366:	e1e0      	b.n	801072a <HAL_SPI_Transmit+0x432>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8010368:	68fb      	ldr	r3, [r7, #12]
 801036a:	2203      	movs	r2, #3
 801036c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8010370:	68fb      	ldr	r3, [r7, #12]
 8010372:	2200      	movs	r2, #0
 8010374:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8010378:	68fb      	ldr	r3, [r7, #12]
 801037a:	68ba      	ldr	r2, [r7, #8]
 801037c:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxXferSize  = Size;
 801037e:	68fb      	ldr	r3, [r7, #12]
 8010380:	88fa      	ldrh	r2, [r7, #6]
 8010382:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->TxXferCount = Size;
 8010386:	68fb      	ldr	r3, [r7, #12]
 8010388:	88fa      	ldrh	r2, [r7, #6]
 801038a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 801038e:	68fb      	ldr	r3, [r7, #12]
 8010390:	2200      	movs	r2, #0
 8010392:	66da      	str	r2, [r3, #108]	; 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 8010394:	68fb      	ldr	r3, [r7, #12]
 8010396:	2200      	movs	r2, #0
 8010398:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 801039c:	68fb      	ldr	r3, [r7, #12]
 801039e:	2200      	movs	r2, #0
 80103a0:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
  hspi->TxISR       = NULL;
 80103a4:	68fb      	ldr	r3, [r7, #12]
 80103a6:	2200      	movs	r2, #0
 80103a8:	67da      	str	r2, [r3, #124]	; 0x7c
  hspi->RxISR       = NULL;
 80103aa:	68fb      	ldr	r3, [r7, #12]
 80103ac:	2200      	movs	r2, #0
 80103ae:	679a      	str	r2, [r3, #120]	; 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80103b0:	68fb      	ldr	r3, [r7, #12]
 80103b2:	689b      	ldr	r3, [r3, #8]
 80103b4:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80103b8:	d108      	bne.n	80103cc <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 80103ba:	68fb      	ldr	r3, [r7, #12]
 80103bc:	681b      	ldr	r3, [r3, #0]
 80103be:	681a      	ldr	r2, [r3, #0]
 80103c0:	68fb      	ldr	r3, [r7, #12]
 80103c2:	681b      	ldr	r3, [r3, #0]
 80103c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80103c8:	601a      	str	r2, [r3, #0]
 80103ca:	e009      	b.n	80103e0 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 80103cc:	68fb      	ldr	r3, [r7, #12]
 80103ce:	681b      	ldr	r3, [r3, #0]
 80103d0:	68db      	ldr	r3, [r3, #12]
 80103d2:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 80103d6:	68fb      	ldr	r3, [r7, #12]
 80103d8:	681b      	ldr	r3, [r3, #0]
 80103da:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80103de:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80103e0:	68fb      	ldr	r3, [r7, #12]
 80103e2:	681b      	ldr	r3, [r3, #0]
 80103e4:	685b      	ldr	r3, [r3, #4]
 80103e6:	0c1b      	lsrs	r3, r3, #16
 80103e8:	041b      	lsls	r3, r3, #16
 80103ea:	88f9      	ldrh	r1, [r7, #6]
 80103ec:	68fa      	ldr	r2, [r7, #12]
 80103ee:	6812      	ldr	r2, [r2, #0]
 80103f0:	430b      	orrs	r3, r1
 80103f2:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80103f4:	68fb      	ldr	r3, [r7, #12]
 80103f6:	681b      	ldr	r3, [r3, #0]
 80103f8:	681a      	ldr	r2, [r3, #0]
 80103fa:	68fb      	ldr	r3, [r7, #12]
 80103fc:	681b      	ldr	r3, [r3, #0]
 80103fe:	f042 0201 	orr.w	r2, r2, #1
 8010402:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8010404:	68fb      	ldr	r3, [r7, #12]
 8010406:	681b      	ldr	r3, [r3, #0]
 8010408:	69db      	ldr	r3, [r3, #28]
 801040a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801040e:	2b00      	cmp	r3, #0
 8010410:	d10c      	bne.n	801042c <HAL_SPI_Transmit+0x134>
 8010412:	68fb      	ldr	r3, [r7, #12]
 8010414:	685b      	ldr	r3, [r3, #4]
 8010416:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801041a:	d107      	bne.n	801042c <HAL_SPI_Transmit+0x134>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 801041c:	68fb      	ldr	r3, [r7, #12]
 801041e:	681b      	ldr	r3, [r3, #0]
 8010420:	681a      	ldr	r2, [r3, #0]
 8010422:	68fb      	ldr	r3, [r7, #12]
 8010424:	681b      	ldr	r3, [r3, #0]
 8010426:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801042a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 801042c:	68fb      	ldr	r3, [r7, #12]
 801042e:	68db      	ldr	r3, [r3, #12]
 8010430:	2b0f      	cmp	r3, #15
 8010432:	d95b      	bls.n	80104ec <HAL_SPI_Transmit+0x1f4>
 8010434:	68fb      	ldr	r3, [r7, #12]
 8010436:	681b      	ldr	r3, [r3, #0]
 8010438:	4a8f      	ldr	r2, [pc, #572]	; (8010678 <HAL_SPI_Transmit+0x380>)
 801043a:	4293      	cmp	r3, r2
 801043c:	d04f      	beq.n	80104de <HAL_SPI_Transmit+0x1e6>
 801043e:	68fb      	ldr	r3, [r7, #12]
 8010440:	681b      	ldr	r3, [r3, #0]
 8010442:	4a8e      	ldr	r2, [pc, #568]	; (801067c <HAL_SPI_Transmit+0x384>)
 8010444:	4293      	cmp	r3, r2
 8010446:	d04a      	beq.n	80104de <HAL_SPI_Transmit+0x1e6>
 8010448:	68fb      	ldr	r3, [r7, #12]
 801044a:	681b      	ldr	r3, [r3, #0]
 801044c:	4a8c      	ldr	r2, [pc, #560]	; (8010680 <HAL_SPI_Transmit+0x388>)
 801044e:	4293      	cmp	r3, r2
 8010450:	d045      	beq.n	80104de <HAL_SPI_Transmit+0x1e6>
 8010452:	68fb      	ldr	r3, [r7, #12]
 8010454:	681b      	ldr	r3, [r3, #0]
 8010456:	4a8b      	ldr	r2, [pc, #556]	; (8010684 <HAL_SPI_Transmit+0x38c>)
 8010458:	4293      	cmp	r3, r2
 801045a:	d147      	bne.n	80104ec <HAL_SPI_Transmit+0x1f4>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 801045c:	e03f      	b.n	80104de <HAL_SPI_Transmit+0x1e6>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 801045e:	68fb      	ldr	r3, [r7, #12]
 8010460:	681b      	ldr	r3, [r3, #0]
 8010462:	695b      	ldr	r3, [r3, #20]
 8010464:	f003 0302 	and.w	r3, r3, #2
 8010468:	2b02      	cmp	r3, #2
 801046a:	d114      	bne.n	8010496 <HAL_SPI_Transmit+0x19e>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 801046c:	68fb      	ldr	r3, [r7, #12]
 801046e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8010470:	68fb      	ldr	r3, [r7, #12]
 8010472:	681b      	ldr	r3, [r3, #0]
 8010474:	6812      	ldr	r2, [r2, #0]
 8010476:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8010478:	68fb      	ldr	r3, [r7, #12]
 801047a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801047c:	1d1a      	adds	r2, r3, #4
 801047e:	68fb      	ldr	r3, [r7, #12]
 8010480:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount--;
 8010482:	68fb      	ldr	r3, [r7, #12]
 8010484:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010488:	b29b      	uxth	r3, r3
 801048a:	3b01      	subs	r3, #1
 801048c:	b29a      	uxth	r2, r3
 801048e:	68fb      	ldr	r3, [r7, #12]
 8010490:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8010494:	e023      	b.n	80104de <HAL_SPI_Transmit+0x1e6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010496:	f7f9 fc77 	bl	8009d88 <HAL_GetTick>
 801049a:	4602      	mov	r2, r0
 801049c:	697b      	ldr	r3, [r7, #20]
 801049e:	1ad3      	subs	r3, r2, r3
 80104a0:	683a      	ldr	r2, [r7, #0]
 80104a2:	429a      	cmp	r2, r3
 80104a4:	d803      	bhi.n	80104ae <HAL_SPI_Transmit+0x1b6>
 80104a6:	683b      	ldr	r3, [r7, #0]
 80104a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80104ac:	d102      	bne.n	80104b4 <HAL_SPI_Transmit+0x1bc>
 80104ae:	683b      	ldr	r3, [r7, #0]
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	d114      	bne.n	80104de <HAL_SPI_Transmit+0x1e6>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80104b4:	68f8      	ldr	r0, [r7, #12]
 80104b6:	f000 ff23 	bl	8011300 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80104ba:	68fb      	ldr	r3, [r7, #12]
 80104bc:	2200      	movs	r2, #0
 80104be:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80104c2:	68fb      	ldr	r3, [r7, #12]
 80104c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80104c8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80104cc:	68fb      	ldr	r3, [r7, #12]
 80104ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 80104d2:	68fb      	ldr	r3, [r7, #12]
 80104d4:	2201      	movs	r2, #1
 80104d6:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 80104da:	2303      	movs	r3, #3
 80104dc:	e125      	b.n	801072a <HAL_SPI_Transmit+0x432>
    while (hspi->TxXferCount > 0UL)
 80104de:	68fb      	ldr	r3, [r7, #12]
 80104e0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80104e4:	b29b      	uxth	r3, r3
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	d1b9      	bne.n	801045e <HAL_SPI_Transmit+0x166>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 80104ea:	e0f8      	b.n	80106de <HAL_SPI_Transmit+0x3e6>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80104ec:	68fb      	ldr	r3, [r7, #12]
 80104ee:	68db      	ldr	r3, [r3, #12]
 80104f0:	2b07      	cmp	r3, #7
 80104f2:	f240 80ed 	bls.w	80106d0 <HAL_SPI_Transmit+0x3d8>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80104f6:	e05d      	b.n	80105b4 <HAL_SPI_Transmit+0x2bc>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80104f8:	68fb      	ldr	r3, [r7, #12]
 80104fa:	681b      	ldr	r3, [r3, #0]
 80104fc:	695b      	ldr	r3, [r3, #20]
 80104fe:	f003 0302 	and.w	r3, r3, #2
 8010502:	2b02      	cmp	r3, #2
 8010504:	d132      	bne.n	801056c <HAL_SPI_Transmit+0x274>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8010506:	68fb      	ldr	r3, [r7, #12]
 8010508:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801050c:	b29b      	uxth	r3, r3
 801050e:	2b01      	cmp	r3, #1
 8010510:	d918      	bls.n	8010544 <HAL_SPI_Transmit+0x24c>
 8010512:	68fb      	ldr	r3, [r7, #12]
 8010514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010516:	2b00      	cmp	r3, #0
 8010518:	d014      	beq.n	8010544 <HAL_SPI_Transmit+0x24c>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 801051a:	68fb      	ldr	r3, [r7, #12]
 801051c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 801051e:	68fb      	ldr	r3, [r7, #12]
 8010520:	681b      	ldr	r3, [r3, #0]
 8010522:	6812      	ldr	r2, [r2, #0]
 8010524:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8010526:	68fb      	ldr	r3, [r7, #12]
 8010528:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801052a:	1d1a      	adds	r2, r3, #4
 801052c:	68fb      	ldr	r3, [r7, #12]
 801052e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8010530:	68fb      	ldr	r3, [r7, #12]
 8010532:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010536:	b29b      	uxth	r3, r3
 8010538:	3b02      	subs	r3, #2
 801053a:	b29a      	uxth	r2, r3
 801053c:	68fb      	ldr	r3, [r7, #12]
 801053e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8010542:	e037      	b.n	80105b4 <HAL_SPI_Transmit+0x2bc>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8010544:	68fb      	ldr	r3, [r7, #12]
 8010546:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010548:	881a      	ldrh	r2, [r3, #0]
 801054a:	69fb      	ldr	r3, [r7, #28]
 801054c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 801054e:	68fb      	ldr	r3, [r7, #12]
 8010550:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010552:	1c9a      	adds	r2, r3, #2
 8010554:	68fb      	ldr	r3, [r7, #12]
 8010556:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount--;
 8010558:	68fb      	ldr	r3, [r7, #12]
 801055a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801055e:	b29b      	uxth	r3, r3
 8010560:	3b01      	subs	r3, #1
 8010562:	b29a      	uxth	r2, r3
 8010564:	68fb      	ldr	r3, [r7, #12]
 8010566:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 801056a:	e023      	b.n	80105b4 <HAL_SPI_Transmit+0x2bc>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801056c:	f7f9 fc0c 	bl	8009d88 <HAL_GetTick>
 8010570:	4602      	mov	r2, r0
 8010572:	697b      	ldr	r3, [r7, #20]
 8010574:	1ad3      	subs	r3, r2, r3
 8010576:	683a      	ldr	r2, [r7, #0]
 8010578:	429a      	cmp	r2, r3
 801057a:	d803      	bhi.n	8010584 <HAL_SPI_Transmit+0x28c>
 801057c:	683b      	ldr	r3, [r7, #0]
 801057e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010582:	d102      	bne.n	801058a <HAL_SPI_Transmit+0x292>
 8010584:	683b      	ldr	r3, [r7, #0]
 8010586:	2b00      	cmp	r3, #0
 8010588:	d114      	bne.n	80105b4 <HAL_SPI_Transmit+0x2bc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 801058a:	68f8      	ldr	r0, [r7, #12]
 801058c:	f000 feb8 	bl	8011300 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8010590:	68fb      	ldr	r3, [r7, #12]
 8010592:	2200      	movs	r2, #0
 8010594:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010598:	68fb      	ldr	r3, [r7, #12]
 801059a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801059e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80105a2:	68fb      	ldr	r3, [r7, #12]
 80105a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 80105a8:	68fb      	ldr	r3, [r7, #12]
 80105aa:	2201      	movs	r2, #1
 80105ac:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 80105b0:	2303      	movs	r3, #3
 80105b2:	e0ba      	b.n	801072a <HAL_SPI_Transmit+0x432>
    while (hspi->TxXferCount > 0UL)
 80105b4:	68fb      	ldr	r3, [r7, #12]
 80105b6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80105ba:	b29b      	uxth	r3, r3
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d19b      	bne.n	80104f8 <HAL_SPI_Transmit+0x200>
 80105c0:	e08d      	b.n	80106de <HAL_SPI_Transmit+0x3e6>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80105c2:	68fb      	ldr	r3, [r7, #12]
 80105c4:	681b      	ldr	r3, [r3, #0]
 80105c6:	695b      	ldr	r3, [r3, #20]
 80105c8:	f003 0302 	and.w	r3, r3, #2
 80105cc:	2b02      	cmp	r3, #2
 80105ce:	d15b      	bne.n	8010688 <HAL_SPI_Transmit+0x390>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80105d0:	68fb      	ldr	r3, [r7, #12]
 80105d2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80105d6:	b29b      	uxth	r3, r3
 80105d8:	2b03      	cmp	r3, #3
 80105da:	d918      	bls.n	801060e <HAL_SPI_Transmit+0x316>
 80105dc:	68fb      	ldr	r3, [r7, #12]
 80105de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80105e0:	2b40      	cmp	r3, #64	; 0x40
 80105e2:	d914      	bls.n	801060e <HAL_SPI_Transmit+0x316>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80105e4:	68fb      	ldr	r3, [r7, #12]
 80105e6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80105e8:	68fb      	ldr	r3, [r7, #12]
 80105ea:	681b      	ldr	r3, [r3, #0]
 80105ec:	6812      	ldr	r2, [r2, #0]
 80105ee:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80105f0:	68fb      	ldr	r3, [r7, #12]
 80105f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80105f4:	1d1a      	adds	r2, r3, #4
 80105f6:	68fb      	ldr	r3, [r7, #12]
 80105f8:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 80105fa:	68fb      	ldr	r3, [r7, #12]
 80105fc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010600:	b29b      	uxth	r3, r3
 8010602:	3b04      	subs	r3, #4
 8010604:	b29a      	uxth	r2, r3
 8010606:	68fb      	ldr	r3, [r7, #12]
 8010608:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 801060c:	e060      	b.n	80106d0 <HAL_SPI_Transmit+0x3d8>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 801060e:	68fb      	ldr	r3, [r7, #12]
 8010610:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010614:	b29b      	uxth	r3, r3
 8010616:	2b01      	cmp	r3, #1
 8010618:	d917      	bls.n	801064a <HAL_SPI_Transmit+0x352>
 801061a:	68fb      	ldr	r3, [r7, #12]
 801061c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801061e:	2b00      	cmp	r3, #0
 8010620:	d013      	beq.n	801064a <HAL_SPI_Transmit+0x352>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8010622:	68fb      	ldr	r3, [r7, #12]
 8010624:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010626:	881a      	ldrh	r2, [r3, #0]
 8010628:	69fb      	ldr	r3, [r7, #28]
 801062a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 801062c:	68fb      	ldr	r3, [r7, #12]
 801062e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010630:	1c9a      	adds	r2, r3, #2
 8010632:	68fb      	ldr	r3, [r7, #12]
 8010634:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8010636:	68fb      	ldr	r3, [r7, #12]
 8010638:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801063c:	b29b      	uxth	r3, r3
 801063e:	3b02      	subs	r3, #2
 8010640:	b29a      	uxth	r2, r3
 8010642:	68fb      	ldr	r3, [r7, #12]
 8010644:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8010648:	e042      	b.n	80106d0 <HAL_SPI_Transmit+0x3d8>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 801064a:	68fb      	ldr	r3, [r7, #12]
 801064c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 801064e:	68fb      	ldr	r3, [r7, #12]
 8010650:	681b      	ldr	r3, [r3, #0]
 8010652:	3320      	adds	r3, #32
 8010654:	7812      	ldrb	r2, [r2, #0]
 8010656:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8010658:	68fb      	ldr	r3, [r7, #12]
 801065a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801065c:	1c5a      	adds	r2, r3, #1
 801065e:	68fb      	ldr	r3, [r7, #12]
 8010660:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount--;
 8010662:	68fb      	ldr	r3, [r7, #12]
 8010664:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010668:	b29b      	uxth	r3, r3
 801066a:	3b01      	subs	r3, #1
 801066c:	b29a      	uxth	r2, r3
 801066e:	68fb      	ldr	r3, [r7, #12]
 8010670:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8010674:	e02c      	b.n	80106d0 <HAL_SPI_Transmit+0x3d8>
 8010676:	bf00      	nop
 8010678:	40013000 	.word	0x40013000
 801067c:	50013000 	.word	0x50013000
 8010680:	40003800 	.word	0x40003800
 8010684:	50003800 	.word	0x50003800
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010688:	f7f9 fb7e 	bl	8009d88 <HAL_GetTick>
 801068c:	4602      	mov	r2, r0
 801068e:	697b      	ldr	r3, [r7, #20]
 8010690:	1ad3      	subs	r3, r2, r3
 8010692:	683a      	ldr	r2, [r7, #0]
 8010694:	429a      	cmp	r2, r3
 8010696:	d803      	bhi.n	80106a0 <HAL_SPI_Transmit+0x3a8>
 8010698:	683b      	ldr	r3, [r7, #0]
 801069a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801069e:	d102      	bne.n	80106a6 <HAL_SPI_Transmit+0x3ae>
 80106a0:	683b      	ldr	r3, [r7, #0]
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	d114      	bne.n	80106d0 <HAL_SPI_Transmit+0x3d8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80106a6:	68f8      	ldr	r0, [r7, #12]
 80106a8:	f000 fe2a 	bl	8011300 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80106ac:	68fb      	ldr	r3, [r7, #12]
 80106ae:	2200      	movs	r2, #0
 80106b0:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80106b4:	68fb      	ldr	r3, [r7, #12]
 80106b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80106ba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80106be:	68fb      	ldr	r3, [r7, #12]
 80106c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 80106c4:	68fb      	ldr	r3, [r7, #12]
 80106c6:	2201      	movs	r2, #1
 80106c8:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 80106cc:	2303      	movs	r3, #3
 80106ce:	e02c      	b.n	801072a <HAL_SPI_Transmit+0x432>
    while (hspi->TxXferCount > 0UL)
 80106d0:	68fb      	ldr	r3, [r7, #12]
 80106d2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80106d6:	b29b      	uxth	r3, r3
 80106d8:	2b00      	cmp	r3, #0
 80106da:	f47f af72 	bne.w	80105c2 <HAL_SPI_Transmit+0x2ca>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80106de:	697b      	ldr	r3, [r7, #20]
 80106e0:	9300      	str	r3, [sp, #0]
 80106e2:	683b      	ldr	r3, [r7, #0]
 80106e4:	2200      	movs	r2, #0
 80106e6:	2108      	movs	r1, #8
 80106e8:	68f8      	ldr	r0, [r7, #12]
 80106ea:	f000 fea9 	bl	8011440 <SPI_WaitOnFlagUntilTimeout>
 80106ee:	4603      	mov	r3, r0
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	d007      	beq.n	8010704 <HAL_SPI_Transmit+0x40c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80106f4:	68fb      	ldr	r3, [r7, #12]
 80106f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80106fa:	f043 0220 	orr.w	r2, r3, #32
 80106fe:	68fb      	ldr	r3, [r7, #12]
 8010700:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8010704:	68f8      	ldr	r0, [r7, #12]
 8010706:	f000 fdfb 	bl	8011300 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 801070a:	68fb      	ldr	r3, [r7, #12]
 801070c:	2200      	movs	r2, #0
 801070e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  hspi->State = HAL_SPI_STATE_READY;
 8010712:	68fb      	ldr	r3, [r7, #12]
 8010714:	2201      	movs	r2, #1
 8010716:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801071a:	68fb      	ldr	r3, [r7, #12]
 801071c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010720:	2b00      	cmp	r3, #0
 8010722:	d001      	beq.n	8010728 <HAL_SPI_Transmit+0x430>
  {
    return HAL_ERROR;
 8010724:	2301      	movs	r3, #1
 8010726:	e000      	b.n	801072a <HAL_SPI_Transmit+0x432>
  }
  return errorcode;
 8010728:	7efb      	ldrb	r3, [r7, #27]
}
 801072a:	4618      	mov	r0, r3
 801072c:	3720      	adds	r7, #32
 801072e:	46bd      	mov	sp, r7
 8010730:	bd80      	pop	{r7, pc}
 8010732:	bf00      	nop

08010734 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010734:	b580      	push	{r7, lr}
 8010736:	b088      	sub	sp, #32
 8010738:	af00      	add	r7, sp, #0
 801073a:	60f8      	str	r0, [r7, #12]
 801073c:	60b9      	str	r1, [r7, #8]
 801073e:	603b      	str	r3, [r7, #0]
 8010740:	4613      	mov	r3, r2
 8010742:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8010744:	2300      	movs	r3, #0
 8010746:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8010748:	68fb      	ldr	r3, [r7, #12]
 801074a:	681b      	ldr	r3, [r3, #0]
 801074c:	3330      	adds	r3, #48	; 0x30
 801074e:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8010750:	68fb      	ldr	r3, [r7, #12]
 8010752:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8010756:	2b01      	cmp	r3, #1
 8010758:	d101      	bne.n	801075e <HAL_SPI_Receive+0x2a>
 801075a:	2302      	movs	r3, #2
 801075c:	e18e      	b.n	8010a7c <HAL_SPI_Receive+0x348>
 801075e:	68fb      	ldr	r3, [r7, #12]
 8010760:	2201      	movs	r2, #1
 8010762:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8010766:	f7f9 fb0f 	bl	8009d88 <HAL_GetTick>
 801076a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 801076c:	68fb      	ldr	r3, [r7, #12]
 801076e:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8010772:	b2db      	uxtb	r3, r3
 8010774:	2b01      	cmp	r3, #1
 8010776:	d007      	beq.n	8010788 <HAL_SPI_Receive+0x54>
  {
    errorcode = HAL_BUSY;
 8010778:	2302      	movs	r3, #2
 801077a:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	2200      	movs	r2, #0
 8010780:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 8010784:	7ffb      	ldrb	r3, [r7, #31]
 8010786:	e179      	b.n	8010a7c <HAL_SPI_Receive+0x348>
  }

  if ((pData == NULL) || (Size == 0UL))
 8010788:	68bb      	ldr	r3, [r7, #8]
 801078a:	2b00      	cmp	r3, #0
 801078c:	d002      	beq.n	8010794 <HAL_SPI_Receive+0x60>
 801078e:	88fb      	ldrh	r3, [r7, #6]
 8010790:	2b00      	cmp	r3, #0
 8010792:	d107      	bne.n	80107a4 <HAL_SPI_Receive+0x70>
  {
    errorcode = HAL_ERROR;
 8010794:	2301      	movs	r3, #1
 8010796:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8010798:	68fb      	ldr	r3, [r7, #12]
 801079a:	2200      	movs	r2, #0
 801079c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 80107a0:	7ffb      	ldrb	r3, [r7, #31]
 80107a2:	e16b      	b.n	8010a7c <HAL_SPI_Receive+0x348>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80107a4:	68fb      	ldr	r3, [r7, #12]
 80107a6:	2204      	movs	r2, #4
 80107a8:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80107ac:	68fb      	ldr	r3, [r7, #12]
 80107ae:	2200      	movs	r2, #0
 80107b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	68ba      	ldr	r2, [r7, #8]
 80107b8:	66da      	str	r2, [r3, #108]	; 0x6c
  hspi->RxXferSize  = Size;
 80107ba:	68fb      	ldr	r3, [r7, #12]
 80107bc:	88fa      	ldrh	r2, [r7, #6]
 80107be:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  hspi->RxXferCount = Size;
 80107c2:	68fb      	ldr	r3, [r7, #12]
 80107c4:	88fa      	ldrh	r2, [r7, #6]
 80107c6:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 80107ca:	68fb      	ldr	r3, [r7, #12]
 80107cc:	2200      	movs	r2, #0
 80107ce:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxXferSize  = (uint16_t) 0UL;
 80107d0:	68fb      	ldr	r3, [r7, #12]
 80107d2:	2200      	movs	r2, #0
 80107d4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->TxXferCount = (uint16_t) 0UL;
 80107d8:	68fb      	ldr	r3, [r7, #12]
 80107da:	2200      	movs	r2, #0
 80107dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxISR       = NULL;
 80107e0:	68fb      	ldr	r3, [r7, #12]
 80107e2:	2200      	movs	r2, #0
 80107e4:	679a      	str	r2, [r3, #120]	; 0x78
  hspi->TxISR       = NULL;
 80107e6:	68fb      	ldr	r3, [r7, #12]
 80107e8:	2200      	movs	r2, #0
 80107ea:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80107ec:	68fb      	ldr	r3, [r7, #12]
 80107ee:	689b      	ldr	r3, [r3, #8]
 80107f0:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80107f4:	d108      	bne.n	8010808 <HAL_SPI_Receive+0xd4>
  {
    SPI_1LINE_RX(hspi);
 80107f6:	68fb      	ldr	r3, [r7, #12]
 80107f8:	681b      	ldr	r3, [r3, #0]
 80107fa:	681a      	ldr	r2, [r3, #0]
 80107fc:	68fb      	ldr	r3, [r7, #12]
 80107fe:	681b      	ldr	r3, [r3, #0]
 8010800:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8010804:	601a      	str	r2, [r3, #0]
 8010806:	e009      	b.n	801081c <HAL_SPI_Receive+0xe8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8010808:	68fb      	ldr	r3, [r7, #12]
 801080a:	681b      	ldr	r3, [r3, #0]
 801080c:	68db      	ldr	r3, [r3, #12]
 801080e:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8010812:	68fb      	ldr	r3, [r7, #12]
 8010814:	681b      	ldr	r3, [r3, #0]
 8010816:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 801081a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 801081c:	68fb      	ldr	r3, [r7, #12]
 801081e:	681b      	ldr	r3, [r3, #0]
 8010820:	685b      	ldr	r3, [r3, #4]
 8010822:	0c1b      	lsrs	r3, r3, #16
 8010824:	041b      	lsls	r3, r3, #16
 8010826:	88f9      	ldrh	r1, [r7, #6]
 8010828:	68fa      	ldr	r2, [r7, #12]
 801082a:	6812      	ldr	r2, [r2, #0]
 801082c:	430b      	orrs	r3, r1
 801082e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8010830:	68fb      	ldr	r3, [r7, #12]
 8010832:	681b      	ldr	r3, [r3, #0]
 8010834:	681a      	ldr	r2, [r3, #0]
 8010836:	68fb      	ldr	r3, [r7, #12]
 8010838:	681b      	ldr	r3, [r3, #0]
 801083a:	f042 0201 	orr.w	r2, r2, #1
 801083e:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8010840:	68fb      	ldr	r3, [r7, #12]
 8010842:	681b      	ldr	r3, [r3, #0]
 8010844:	69db      	ldr	r3, [r3, #28]
 8010846:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801084a:	2b00      	cmp	r3, #0
 801084c:	d10c      	bne.n	8010868 <HAL_SPI_Receive+0x134>
 801084e:	68fb      	ldr	r3, [r7, #12]
 8010850:	685b      	ldr	r3, [r3, #4]
 8010852:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010856:	d107      	bne.n	8010868 <HAL_SPI_Receive+0x134>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8010858:	68fb      	ldr	r3, [r7, #12]
 801085a:	681b      	ldr	r3, [r3, #0]
 801085c:	681a      	ldr	r2, [r3, #0]
 801085e:	68fb      	ldr	r3, [r7, #12]
 8010860:	681b      	ldr	r3, [r3, #0]
 8010862:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010866:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8010868:	68fb      	ldr	r3, [r7, #12]
 801086a:	68db      	ldr	r3, [r3, #12]
 801086c:	2b0f      	cmp	r3, #15
 801086e:	d95c      	bls.n	801092a <HAL_SPI_Receive+0x1f6>
 8010870:	68fb      	ldr	r3, [r7, #12]
 8010872:	681b      	ldr	r3, [r3, #0]
 8010874:	4a83      	ldr	r2, [pc, #524]	; (8010a84 <HAL_SPI_Receive+0x350>)
 8010876:	4293      	cmp	r3, r2
 8010878:	d050      	beq.n	801091c <HAL_SPI_Receive+0x1e8>
 801087a:	68fb      	ldr	r3, [r7, #12]
 801087c:	681b      	ldr	r3, [r3, #0]
 801087e:	4a82      	ldr	r2, [pc, #520]	; (8010a88 <HAL_SPI_Receive+0x354>)
 8010880:	4293      	cmp	r3, r2
 8010882:	d04b      	beq.n	801091c <HAL_SPI_Receive+0x1e8>
 8010884:	68fb      	ldr	r3, [r7, #12]
 8010886:	681b      	ldr	r3, [r3, #0]
 8010888:	4a80      	ldr	r2, [pc, #512]	; (8010a8c <HAL_SPI_Receive+0x358>)
 801088a:	4293      	cmp	r3, r2
 801088c:	d046      	beq.n	801091c <HAL_SPI_Receive+0x1e8>
 801088e:	68fb      	ldr	r3, [r7, #12]
 8010890:	681b      	ldr	r3, [r3, #0]
 8010892:	4a7f      	ldr	r2, [pc, #508]	; (8010a90 <HAL_SPI_Receive+0x35c>)
 8010894:	4293      	cmp	r3, r2
 8010896:	d148      	bne.n	801092a <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8010898:	e040      	b.n	801091c <HAL_SPI_Receive+0x1e8>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 801089a:	68fb      	ldr	r3, [r7, #12]
 801089c:	681b      	ldr	r3, [r3, #0]
 801089e:	695a      	ldr	r2, [r3, #20]
 80108a0:	f248 0308 	movw	r3, #32776	; 0x8008
 80108a4:	4013      	ands	r3, r2
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	d014      	beq.n	80108d4 <HAL_SPI_Receive+0x1a0>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80108aa:	68fb      	ldr	r3, [r7, #12]
 80108ac:	681a      	ldr	r2, [r3, #0]
 80108ae:	68fb      	ldr	r3, [r7, #12]
 80108b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80108b2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80108b4:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80108b6:	68fb      	ldr	r3, [r7, #12]
 80108b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80108ba:	1d1a      	adds	r2, r3, #4
 80108bc:	68fb      	ldr	r3, [r7, #12]
 80108be:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount--;
 80108c0:	68fb      	ldr	r3, [r7, #12]
 80108c2:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 80108c6:	b29b      	uxth	r3, r3
 80108c8:	3b01      	subs	r3, #1
 80108ca:	b29a      	uxth	r2, r3
 80108cc:	68fb      	ldr	r3, [r7, #12]
 80108ce:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 80108d2:	e023      	b.n	801091c <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80108d4:	f7f9 fa58 	bl	8009d88 <HAL_GetTick>
 80108d8:	4602      	mov	r2, r0
 80108da:	697b      	ldr	r3, [r7, #20]
 80108dc:	1ad3      	subs	r3, r2, r3
 80108de:	683a      	ldr	r2, [r7, #0]
 80108e0:	429a      	cmp	r2, r3
 80108e2:	d803      	bhi.n	80108ec <HAL_SPI_Receive+0x1b8>
 80108e4:	683b      	ldr	r3, [r7, #0]
 80108e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80108ea:	d102      	bne.n	80108f2 <HAL_SPI_Receive+0x1be>
 80108ec:	683b      	ldr	r3, [r7, #0]
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	d114      	bne.n	801091c <HAL_SPI_Receive+0x1e8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80108f2:	68f8      	ldr	r0, [r7, #12]
 80108f4:	f000 fd04 	bl	8011300 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80108f8:	68fb      	ldr	r3, [r7, #12]
 80108fa:	2200      	movs	r2, #0
 80108fc:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010900:	68fb      	ldr	r3, [r7, #12]
 8010902:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010906:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 801090a:	68fb      	ldr	r3, [r7, #12]
 801090c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8010910:	68fb      	ldr	r3, [r7, #12]
 8010912:	2201      	movs	r2, #1
 8010914:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 8010918:	2303      	movs	r3, #3
 801091a:	e0af      	b.n	8010a7c <HAL_SPI_Receive+0x348>
    while (hspi->RxXferCount > 0UL)
 801091c:	68fb      	ldr	r3, [r7, #12]
 801091e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8010922:	b29b      	uxth	r3, r3
 8010924:	2b00      	cmp	r3, #0
 8010926:	d1b8      	bne.n	801089a <HAL_SPI_Receive+0x166>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8010928:	e095      	b.n	8010a56 <HAL_SPI_Receive+0x322>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801092a:	68fb      	ldr	r3, [r7, #12]
 801092c:	68db      	ldr	r3, [r3, #12]
 801092e:	2b07      	cmp	r3, #7
 8010930:	f240 808b 	bls.w	8010a4a <HAL_SPI_Receive+0x316>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8010934:	e03f      	b.n	80109b6 <HAL_SPI_Receive+0x282>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8010936:	68fb      	ldr	r3, [r7, #12]
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	695b      	ldr	r3, [r3, #20]
 801093c:	f003 0301 	and.w	r3, r3, #1
 8010940:	2b01      	cmp	r3, #1
 8010942:	d114      	bne.n	801096e <HAL_SPI_Receive+0x23a>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8010944:	68fb      	ldr	r3, [r7, #12]
 8010946:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010948:	69ba      	ldr	r2, [r7, #24]
 801094a:	8812      	ldrh	r2, [r2, #0]
 801094c:	b292      	uxth	r2, r2
 801094e:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8010950:	68fb      	ldr	r3, [r7, #12]
 8010952:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010954:	1c9a      	adds	r2, r3, #2
 8010956:	68fb      	ldr	r3, [r7, #12]
 8010958:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount--;
 801095a:	68fb      	ldr	r3, [r7, #12]
 801095c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8010960:	b29b      	uxth	r3, r3
 8010962:	3b01      	subs	r3, #1
 8010964:	b29a      	uxth	r2, r3
 8010966:	68fb      	ldr	r3, [r7, #12]
 8010968:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 801096c:	e023      	b.n	80109b6 <HAL_SPI_Receive+0x282>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801096e:	f7f9 fa0b 	bl	8009d88 <HAL_GetTick>
 8010972:	4602      	mov	r2, r0
 8010974:	697b      	ldr	r3, [r7, #20]
 8010976:	1ad3      	subs	r3, r2, r3
 8010978:	683a      	ldr	r2, [r7, #0]
 801097a:	429a      	cmp	r2, r3
 801097c:	d803      	bhi.n	8010986 <HAL_SPI_Receive+0x252>
 801097e:	683b      	ldr	r3, [r7, #0]
 8010980:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010984:	d102      	bne.n	801098c <HAL_SPI_Receive+0x258>
 8010986:	683b      	ldr	r3, [r7, #0]
 8010988:	2b00      	cmp	r3, #0
 801098a:	d114      	bne.n	80109b6 <HAL_SPI_Receive+0x282>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 801098c:	68f8      	ldr	r0, [r7, #12]
 801098e:	f000 fcb7 	bl	8011300 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8010992:	68fb      	ldr	r3, [r7, #12]
 8010994:	2200      	movs	r2, #0
 8010996:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 801099a:	68fb      	ldr	r3, [r7, #12]
 801099c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80109a0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80109a4:	68fb      	ldr	r3, [r7, #12]
 80109a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 80109aa:	68fb      	ldr	r3, [r7, #12]
 80109ac:	2201      	movs	r2, #1
 80109ae:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 80109b2:	2303      	movs	r3, #3
 80109b4:	e062      	b.n	8010a7c <HAL_SPI_Receive+0x348>
    while (hspi->RxXferCount > 0UL)
 80109b6:	68fb      	ldr	r3, [r7, #12]
 80109b8:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 80109bc:	b29b      	uxth	r3, r3
 80109be:	2b00      	cmp	r3, #0
 80109c0:	d1b9      	bne.n	8010936 <HAL_SPI_Receive+0x202>
 80109c2:	e048      	b.n	8010a56 <HAL_SPI_Receive+0x322>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80109c4:	68fb      	ldr	r3, [r7, #12]
 80109c6:	681b      	ldr	r3, [r3, #0]
 80109c8:	695b      	ldr	r3, [r3, #20]
 80109ca:	f003 0301 	and.w	r3, r3, #1
 80109ce:	2b01      	cmp	r3, #1
 80109d0:	d117      	bne.n	8010a02 <HAL_SPI_Receive+0x2ce>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80109d2:	68fb      	ldr	r3, [r7, #12]
 80109d4:	681b      	ldr	r3, [r3, #0]
 80109d6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80109da:	68fb      	ldr	r3, [r7, #12]
 80109dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80109de:	7812      	ldrb	r2, [r2, #0]
 80109e0:	b2d2      	uxtb	r2, r2
 80109e2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80109e4:	68fb      	ldr	r3, [r7, #12]
 80109e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80109e8:	1c5a      	adds	r2, r3, #1
 80109ea:	68fb      	ldr	r3, [r7, #12]
 80109ec:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount--;
 80109ee:	68fb      	ldr	r3, [r7, #12]
 80109f0:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 80109f4:	b29b      	uxth	r3, r3
 80109f6:	3b01      	subs	r3, #1
 80109f8:	b29a      	uxth	r2, r3
 80109fa:	68fb      	ldr	r3, [r7, #12]
 80109fc:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 8010a00:	e023      	b.n	8010a4a <HAL_SPI_Receive+0x316>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010a02:	f7f9 f9c1 	bl	8009d88 <HAL_GetTick>
 8010a06:	4602      	mov	r2, r0
 8010a08:	697b      	ldr	r3, [r7, #20]
 8010a0a:	1ad3      	subs	r3, r2, r3
 8010a0c:	683a      	ldr	r2, [r7, #0]
 8010a0e:	429a      	cmp	r2, r3
 8010a10:	d803      	bhi.n	8010a1a <HAL_SPI_Receive+0x2e6>
 8010a12:	683b      	ldr	r3, [r7, #0]
 8010a14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010a18:	d102      	bne.n	8010a20 <HAL_SPI_Receive+0x2ec>
 8010a1a:	683b      	ldr	r3, [r7, #0]
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	d114      	bne.n	8010a4a <HAL_SPI_Receive+0x316>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8010a20:	68f8      	ldr	r0, [r7, #12]
 8010a22:	f000 fc6d 	bl	8011300 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8010a26:	68fb      	ldr	r3, [r7, #12]
 8010a28:	2200      	movs	r2, #0
 8010a2a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010a2e:	68fb      	ldr	r3, [r7, #12]
 8010a30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010a34:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8010a38:	68fb      	ldr	r3, [r7, #12]
 8010a3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8010a3e:	68fb      	ldr	r3, [r7, #12]
 8010a40:	2201      	movs	r2, #1
 8010a42:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 8010a46:	2303      	movs	r3, #3
 8010a48:	e018      	b.n	8010a7c <HAL_SPI_Receive+0x348>
    while (hspi->RxXferCount > 0UL)
 8010a4a:	68fb      	ldr	r3, [r7, #12]
 8010a4c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8010a50:	b29b      	uxth	r3, r3
 8010a52:	2b00      	cmp	r3, #0
 8010a54:	d1b6      	bne.n	80109c4 <HAL_SPI_Receive+0x290>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8010a56:	68f8      	ldr	r0, [r7, #12]
 8010a58:	f000 fc52 	bl	8011300 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8010a5c:	68fb      	ldr	r3, [r7, #12]
 8010a5e:	2200      	movs	r2, #0
 8010a60:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  hspi->State = HAL_SPI_STATE_READY;
 8010a64:	68fb      	ldr	r3, [r7, #12]
 8010a66:	2201      	movs	r2, #1
 8010a68:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8010a6c:	68fb      	ldr	r3, [r7, #12]
 8010a6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	d001      	beq.n	8010a7a <HAL_SPI_Receive+0x346>
  {
    return HAL_ERROR;
 8010a76:	2301      	movs	r3, #1
 8010a78:	e000      	b.n	8010a7c <HAL_SPI_Receive+0x348>
  }
  return errorcode;
 8010a7a:	7ffb      	ldrb	r3, [r7, #31]
}
 8010a7c:	4618      	mov	r0, r3
 8010a7e:	3720      	adds	r7, #32
 8010a80:	46bd      	mov	sp, r7
 8010a82:	bd80      	pop	{r7, pc}
 8010a84:	40013000 	.word	0x40013000
 8010a88:	50013000 	.word	0x50013000
 8010a8c:	40003800 	.word	0x40003800
 8010a90:	50003800 	.word	0x50003800

08010a94 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8010a94:	b580      	push	{r7, lr}
 8010a96:	b08c      	sub	sp, #48	; 0x30
 8010a98:	af02      	add	r7, sp, #8
 8010a9a:	60f8      	str	r0, [r7, #12]
 8010a9c:	60b9      	str	r1, [r7, #8]
 8010a9e:	607a      	str	r2, [r7, #4]
 8010aa0:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8010aa2:	2300      	movs	r3, #0
 8010aa4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8010aa8:	68fb      	ldr	r3, [r7, #12]
 8010aaa:	681b      	ldr	r3, [r3, #0]
 8010aac:	3320      	adds	r3, #32
 8010aae:	61fb      	str	r3, [r7, #28]
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8010ab0:	68fb      	ldr	r3, [r7, #12]
 8010ab2:	681b      	ldr	r3, [r3, #0]
 8010ab4:	3330      	adds	r3, #48	; 0x30
 8010ab6:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8010ab8:	68fb      	ldr	r3, [r7, #12]
 8010aba:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8010abe:	2b01      	cmp	r3, #1
 8010ac0:	d101      	bne.n	8010ac6 <HAL_SPI_TransmitReceive+0x32>
 8010ac2:	2302      	movs	r3, #2
 8010ac4:	e21f      	b.n	8010f06 <HAL_SPI_TransmitReceive+0x472>
 8010ac6:	68fb      	ldr	r3, [r7, #12]
 8010ac8:	2201      	movs	r2, #1
 8010aca:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8010ace:	f7f9 f95b 	bl	8009d88 <HAL_GetTick>
 8010ad2:	6178      	str	r0, [r7, #20]

  initial_TxXferCount = Size;
 8010ad4:	887b      	ldrh	r3, [r7, #2]
 8010ad6:	84fb      	strh	r3, [r7, #38]	; 0x26
  initial_RxXferCount = Size;
 8010ad8:	887b      	ldrh	r3, [r7, #2]
 8010ada:	84bb      	strh	r3, [r7, #36]	; 0x24

  if (hspi->State != HAL_SPI_STATE_READY)
 8010adc:	68fb      	ldr	r3, [r7, #12]
 8010ade:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8010ae2:	b2db      	uxtb	r3, r3
 8010ae4:	2b01      	cmp	r3, #1
 8010ae6:	d009      	beq.n	8010afc <HAL_SPI_TransmitReceive+0x68>
  {
    errorcode = HAL_BUSY;
 8010ae8:	2302      	movs	r3, #2
 8010aea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    __HAL_UNLOCK(hspi);
 8010aee:	68fb      	ldr	r3, [r7, #12]
 8010af0:	2200      	movs	r2, #0
 8010af2:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 8010af6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010afa:	e204      	b.n	8010f06 <HAL_SPI_TransmitReceive+0x472>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8010afc:	68bb      	ldr	r3, [r7, #8]
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	d005      	beq.n	8010b0e <HAL_SPI_TransmitReceive+0x7a>
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d002      	beq.n	8010b0e <HAL_SPI_TransmitReceive+0x7a>
 8010b08:	887b      	ldrh	r3, [r7, #2]
 8010b0a:	2b00      	cmp	r3, #0
 8010b0c:	d109      	bne.n	8010b22 <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 8010b0e:	2301      	movs	r3, #1
 8010b10:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    __HAL_UNLOCK(hspi);
 8010b14:	68fb      	ldr	r3, [r7, #12]
 8010b16:	2200      	movs	r2, #0
 8010b18:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 8010b1c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010b20:	e1f1      	b.n	8010f06 <HAL_SPI_TransmitReceive+0x472>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8010b22:	68fb      	ldr	r3, [r7, #12]
 8010b24:	2205      	movs	r2, #5
 8010b26:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8010b2a:	68fb      	ldr	r3, [r7, #12]
 8010b2c:	2200      	movs	r2, #0
 8010b2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8010b32:	68fb      	ldr	r3, [r7, #12]
 8010b34:	687a      	ldr	r2, [r7, #4]
 8010b36:	66da      	str	r2, [r3, #108]	; 0x6c
  hspi->RxXferCount = Size;
 8010b38:	68fb      	ldr	r3, [r7, #12]
 8010b3a:	887a      	ldrh	r2, [r7, #2]
 8010b3c:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
  hspi->RxXferSize  = Size;
 8010b40:	68fb      	ldr	r3, [r7, #12]
 8010b42:	887a      	ldrh	r2, [r7, #2]
 8010b44:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8010b48:	68fb      	ldr	r3, [r7, #12]
 8010b4a:	68ba      	ldr	r2, [r7, #8]
 8010b4c:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxXferCount = Size;
 8010b4e:	68fb      	ldr	r3, [r7, #12]
 8010b50:	887a      	ldrh	r2, [r7, #2]
 8010b52:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferSize  = Size;
 8010b56:	68fb      	ldr	r3, [r7, #12]
 8010b58:	887a      	ldrh	r2, [r7, #2]
 8010b5a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8010b5e:	68fb      	ldr	r3, [r7, #12]
 8010b60:	2200      	movs	r2, #0
 8010b62:	679a      	str	r2, [r3, #120]	; 0x78
  hspi->TxISR       = NULL;
 8010b64:	68fb      	ldr	r3, [r7, #12]
 8010b66:	2200      	movs	r2, #0
 8010b68:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8010b6a:	68fb      	ldr	r3, [r7, #12]
 8010b6c:	681b      	ldr	r3, [r3, #0]
 8010b6e:	68da      	ldr	r2, [r3, #12]
 8010b70:	68fb      	ldr	r3, [r7, #12]
 8010b72:	681b      	ldr	r3, [r3, #0]
 8010b74:	f422 22c0 	bic.w	r2, r2, #393216	; 0x60000
 8010b78:	60da      	str	r2, [r3, #12]

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8010b7a:	68fb      	ldr	r3, [r7, #12]
 8010b7c:	681b      	ldr	r3, [r3, #0]
 8010b7e:	685b      	ldr	r3, [r3, #4]
 8010b80:	0c1b      	lsrs	r3, r3, #16
 8010b82:	041b      	lsls	r3, r3, #16
 8010b84:	8879      	ldrh	r1, [r7, #2]
 8010b86:	68fa      	ldr	r2, [r7, #12]
 8010b88:	6812      	ldr	r2, [r2, #0]
 8010b8a:	430b      	orrs	r3, r1
 8010b8c:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8010b8e:	68fb      	ldr	r3, [r7, #12]
 8010b90:	681b      	ldr	r3, [r3, #0]
 8010b92:	681a      	ldr	r2, [r3, #0]
 8010b94:	68fb      	ldr	r3, [r7, #12]
 8010b96:	681b      	ldr	r3, [r3, #0]
 8010b98:	f042 0201 	orr.w	r2, r2, #1
 8010b9c:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8010b9e:	68fb      	ldr	r3, [r7, #12]
 8010ba0:	681b      	ldr	r3, [r3, #0]
 8010ba2:	69db      	ldr	r3, [r3, #28]
 8010ba4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	d10c      	bne.n	8010bc6 <HAL_SPI_TransmitReceive+0x132>
 8010bac:	68fb      	ldr	r3, [r7, #12]
 8010bae:	685b      	ldr	r3, [r3, #4]
 8010bb0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010bb4:	d107      	bne.n	8010bc6 <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8010bb6:	68fb      	ldr	r3, [r7, #12]
 8010bb8:	681b      	ldr	r3, [r3, #0]
 8010bba:	681a      	ldr	r2, [r3, #0]
 8010bbc:	68fb      	ldr	r3, [r7, #12]
 8010bbe:	681b      	ldr	r3, [r3, #0]
 8010bc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010bc4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8010bc6:	68fb      	ldr	r3, [r7, #12]
 8010bc8:	68db      	ldr	r3, [r3, #12]
 8010bca:	2b0f      	cmp	r3, #15
 8010bcc:	f240 8085 	bls.w	8010cda <HAL_SPI_TransmitReceive+0x246>
 8010bd0:	68fb      	ldr	r3, [r7, #12]
 8010bd2:	681b      	ldr	r3, [r3, #0]
 8010bd4:	4a7b      	ldr	r2, [pc, #492]	; (8010dc4 <HAL_SPI_TransmitReceive+0x330>)
 8010bd6:	4293      	cmp	r3, r2
 8010bd8:	d078      	beq.n	8010ccc <HAL_SPI_TransmitReceive+0x238>
 8010bda:	68fb      	ldr	r3, [r7, #12]
 8010bdc:	681b      	ldr	r3, [r3, #0]
 8010bde:	4a7a      	ldr	r2, [pc, #488]	; (8010dc8 <HAL_SPI_TransmitReceive+0x334>)
 8010be0:	4293      	cmp	r3, r2
 8010be2:	d073      	beq.n	8010ccc <HAL_SPI_TransmitReceive+0x238>
 8010be4:	68fb      	ldr	r3, [r7, #12]
 8010be6:	681b      	ldr	r3, [r3, #0]
 8010be8:	4a78      	ldr	r2, [pc, #480]	; (8010dcc <HAL_SPI_TransmitReceive+0x338>)
 8010bea:	4293      	cmp	r3, r2
 8010bec:	d06e      	beq.n	8010ccc <HAL_SPI_TransmitReceive+0x238>
 8010bee:	68fb      	ldr	r3, [r7, #12]
 8010bf0:	681b      	ldr	r3, [r3, #0]
 8010bf2:	4a77      	ldr	r2, [pc, #476]	; (8010dd0 <HAL_SPI_TransmitReceive+0x33c>)
 8010bf4:	4293      	cmp	r3, r2
 8010bf6:	d170      	bne.n	8010cda <HAL_SPI_TransmitReceive+0x246>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8010bf8:	e068      	b.n	8010ccc <HAL_SPI_TransmitReceive+0x238>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8010bfa:	68fb      	ldr	r3, [r7, #12]
 8010bfc:	681b      	ldr	r3, [r3, #0]
 8010bfe:	695b      	ldr	r3, [r3, #20]
 8010c00:	f003 0302 	and.w	r3, r3, #2
 8010c04:	2b02      	cmp	r3, #2
 8010c06:	d11a      	bne.n	8010c3e <HAL_SPI_TransmitReceive+0x1aa>
 8010c08:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010c0a:	2b00      	cmp	r3, #0
 8010c0c:	d017      	beq.n	8010c3e <HAL_SPI_TransmitReceive+0x1aa>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8010c0e:	68fb      	ldr	r3, [r7, #12]
 8010c10:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8010c12:	68fb      	ldr	r3, [r7, #12]
 8010c14:	681b      	ldr	r3, [r3, #0]
 8010c16:	6812      	ldr	r2, [r2, #0]
 8010c18:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8010c1a:	68fb      	ldr	r3, [r7, #12]
 8010c1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010c1e:	1d1a      	adds	r2, r3, #4
 8010c20:	68fb      	ldr	r3, [r7, #12]
 8010c22:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount --;
 8010c24:	68fb      	ldr	r3, [r7, #12]
 8010c26:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010c2a:	b29b      	uxth	r3, r3
 8010c2c:	3b01      	subs	r3, #1
 8010c2e:	b29a      	uxth	r2, r3
 8010c30:	68fb      	ldr	r3, [r7, #12]
 8010c32:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 8010c36:	68fb      	ldr	r3, [r7, #12]
 8010c38:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010c3c:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8010c3e:	68fb      	ldr	r3, [r7, #12]
 8010c40:	681b      	ldr	r3, [r3, #0]
 8010c42:	695a      	ldr	r2, [r3, #20]
 8010c44:	f248 0308 	movw	r3, #32776	; 0x8008
 8010c48:	4013      	ands	r3, r2
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	d01a      	beq.n	8010c84 <HAL_SPI_TransmitReceive+0x1f0>
 8010c4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	d017      	beq.n	8010c84 <HAL_SPI_TransmitReceive+0x1f0>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8010c54:	68fb      	ldr	r3, [r7, #12]
 8010c56:	681a      	ldr	r2, [r3, #0]
 8010c58:	68fb      	ldr	r3, [r7, #12]
 8010c5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010c5c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8010c5e:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8010c60:	68fb      	ldr	r3, [r7, #12]
 8010c62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010c64:	1d1a      	adds	r2, r3, #4
 8010c66:	68fb      	ldr	r3, [r7, #12]
 8010c68:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount --;
 8010c6a:	68fb      	ldr	r3, [r7, #12]
 8010c6c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8010c70:	b29b      	uxth	r3, r3
 8010c72:	3b01      	subs	r3, #1
 8010c74:	b29a      	uxth	r2, r3
 8010c76:	68fb      	ldr	r3, [r7, #12]
 8010c78:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
        initial_RxXferCount = hspi->RxXferCount;
 8010c7c:	68fb      	ldr	r3, [r7, #12]
 8010c7e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8010c82:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010c84:	f7f9 f880 	bl	8009d88 <HAL_GetTick>
 8010c88:	4602      	mov	r2, r0
 8010c8a:	697b      	ldr	r3, [r7, #20]
 8010c8c:	1ad3      	subs	r3, r2, r3
 8010c8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010c90:	429a      	cmp	r2, r3
 8010c92:	d803      	bhi.n	8010c9c <HAL_SPI_TransmitReceive+0x208>
 8010c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010c9a:	d102      	bne.n	8010ca2 <HAL_SPI_TransmitReceive+0x20e>
 8010c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	d114      	bne.n	8010ccc <HAL_SPI_TransmitReceive+0x238>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8010ca2:	68f8      	ldr	r0, [r7, #12]
 8010ca4:	f000 fb2c 	bl	8011300 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8010ca8:	68fb      	ldr	r3, [r7, #12]
 8010caa:	2200      	movs	r2, #0
 8010cac:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010cb0:	68fb      	ldr	r3, [r7, #12]
 8010cb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010cb6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8010cba:	68fb      	ldr	r3, [r7, #12]
 8010cbc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 8010cc0:	68fb      	ldr	r3, [r7, #12]
 8010cc2:	2201      	movs	r2, #1
 8010cc4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        return HAL_TIMEOUT;
 8010cc8:	2303      	movs	r3, #3
 8010cca:	e11c      	b.n	8010f06 <HAL_SPI_TransmitReceive+0x472>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8010ccc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	d193      	bne.n	8010bfa <HAL_SPI_TransmitReceive+0x166>
 8010cd2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	d190      	bne.n	8010bfa <HAL_SPI_TransmitReceive+0x166>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8010cd8:	e0ee      	b.n	8010eb8 <HAL_SPI_TransmitReceive+0x424>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8010cda:	68fb      	ldr	r3, [r7, #12]
 8010cdc:	68db      	ldr	r3, [r3, #12]
 8010cde:	2b07      	cmp	r3, #7
 8010ce0:	f240 80e4 	bls.w	8010eac <HAL_SPI_TransmitReceive+0x418>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8010ce4:	e066      	b.n	8010db4 <HAL_SPI_TransmitReceive+0x320>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8010ce6:	68fb      	ldr	r3, [r7, #12]
 8010ce8:	681b      	ldr	r3, [r3, #0]
 8010cea:	695b      	ldr	r3, [r3, #20]
 8010cec:	f003 0302 	and.w	r3, r3, #2
 8010cf0:	2b02      	cmp	r3, #2
 8010cf2:	d119      	bne.n	8010d28 <HAL_SPI_TransmitReceive+0x294>
 8010cf4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	d016      	beq.n	8010d28 <HAL_SPI_TransmitReceive+0x294>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8010cfa:	68fb      	ldr	r3, [r7, #12]
 8010cfc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010cfe:	881a      	ldrh	r2, [r3, #0]
 8010d00:	69fb      	ldr	r3, [r7, #28]
 8010d02:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8010d04:	68fb      	ldr	r3, [r7, #12]
 8010d06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010d08:	1c9a      	adds	r2, r3, #2
 8010d0a:	68fb      	ldr	r3, [r7, #12]
 8010d0c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount--;
 8010d0e:	68fb      	ldr	r3, [r7, #12]
 8010d10:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010d14:	b29b      	uxth	r3, r3
 8010d16:	3b01      	subs	r3, #1
 8010d18:	b29a      	uxth	r2, r3
 8010d1a:	68fb      	ldr	r3, [r7, #12]
 8010d1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 8010d20:	68fb      	ldr	r3, [r7, #12]
 8010d22:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010d26:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8010d28:	68fb      	ldr	r3, [r7, #12]
 8010d2a:	681b      	ldr	r3, [r3, #0]
 8010d2c:	695b      	ldr	r3, [r3, #20]
 8010d2e:	f003 0301 	and.w	r3, r3, #1
 8010d32:	2b01      	cmp	r3, #1
 8010d34:	d11a      	bne.n	8010d6c <HAL_SPI_TransmitReceive+0x2d8>
 8010d36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010d38:	2b00      	cmp	r3, #0
 8010d3a:	d017      	beq.n	8010d6c <HAL_SPI_TransmitReceive+0x2d8>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8010d3c:	68fb      	ldr	r3, [r7, #12]
 8010d3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d40:	69ba      	ldr	r2, [r7, #24]
 8010d42:	8812      	ldrh	r2, [r2, #0]
 8010d44:	b292      	uxth	r2, r2
 8010d46:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8010d48:	68fb      	ldr	r3, [r7, #12]
 8010d4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d4c:	1c9a      	adds	r2, r3, #2
 8010d4e:	68fb      	ldr	r3, [r7, #12]
 8010d50:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount--;
 8010d52:	68fb      	ldr	r3, [r7, #12]
 8010d54:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8010d58:	b29b      	uxth	r3, r3
 8010d5a:	3b01      	subs	r3, #1
 8010d5c:	b29a      	uxth	r2, r3
 8010d5e:	68fb      	ldr	r3, [r7, #12]
 8010d60:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
        initial_RxXferCount = hspi->RxXferCount;
 8010d64:	68fb      	ldr	r3, [r7, #12]
 8010d66:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8010d6a:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010d6c:	f7f9 f80c 	bl	8009d88 <HAL_GetTick>
 8010d70:	4602      	mov	r2, r0
 8010d72:	697b      	ldr	r3, [r7, #20]
 8010d74:	1ad3      	subs	r3, r2, r3
 8010d76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010d78:	429a      	cmp	r2, r3
 8010d7a:	d803      	bhi.n	8010d84 <HAL_SPI_TransmitReceive+0x2f0>
 8010d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010d82:	d102      	bne.n	8010d8a <HAL_SPI_TransmitReceive+0x2f6>
 8010d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	d114      	bne.n	8010db4 <HAL_SPI_TransmitReceive+0x320>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8010d8a:	68f8      	ldr	r0, [r7, #12]
 8010d8c:	f000 fab8 	bl	8011300 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8010d90:	68fb      	ldr	r3, [r7, #12]
 8010d92:	2200      	movs	r2, #0
 8010d94:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010d98:	68fb      	ldr	r3, [r7, #12]
 8010d9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010d9e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8010da2:	68fb      	ldr	r3, [r7, #12]
 8010da4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 8010da8:	68fb      	ldr	r3, [r7, #12]
 8010daa:	2201      	movs	r2, #1
 8010dac:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        return HAL_TIMEOUT;
 8010db0:	2303      	movs	r3, #3
 8010db2:	e0a8      	b.n	8010f06 <HAL_SPI_TransmitReceive+0x472>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8010db4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d195      	bne.n	8010ce6 <HAL_SPI_TransmitReceive+0x252>
 8010dba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	d192      	bne.n	8010ce6 <HAL_SPI_TransmitReceive+0x252>
 8010dc0:	e07a      	b.n	8010eb8 <HAL_SPI_TransmitReceive+0x424>
 8010dc2:	bf00      	nop
 8010dc4:	40013000 	.word	0x40013000
 8010dc8:	50013000 	.word	0x50013000
 8010dcc:	40003800 	.word	0x40003800
 8010dd0:	50003800 	.word	0x50003800
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8010dd4:	68fb      	ldr	r3, [r7, #12]
 8010dd6:	681b      	ldr	r3, [r3, #0]
 8010dd8:	695b      	ldr	r3, [r3, #20]
 8010dda:	f003 0302 	and.w	r3, r3, #2
 8010dde:	2b02      	cmp	r3, #2
 8010de0:	d11b      	bne.n	8010e1a <HAL_SPI_TransmitReceive+0x386>
 8010de2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	d018      	beq.n	8010e1a <HAL_SPI_TransmitReceive+0x386>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8010de8:	68fb      	ldr	r3, [r7, #12]
 8010dea:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8010dec:	68fb      	ldr	r3, [r7, #12]
 8010dee:	681b      	ldr	r3, [r3, #0]
 8010df0:	3320      	adds	r3, #32
 8010df2:	7812      	ldrb	r2, [r2, #0]
 8010df4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8010df6:	68fb      	ldr	r3, [r7, #12]
 8010df8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010dfa:	1c5a      	adds	r2, r3, #1
 8010dfc:	68fb      	ldr	r3, [r7, #12]
 8010dfe:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount--;
 8010e00:	68fb      	ldr	r3, [r7, #12]
 8010e02:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010e06:	b29b      	uxth	r3, r3
 8010e08:	3b01      	subs	r3, #1
 8010e0a:	b29a      	uxth	r2, r3
 8010e0c:	68fb      	ldr	r3, [r7, #12]
 8010e0e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 8010e12:	68fb      	ldr	r3, [r7, #12]
 8010e14:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010e18:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8010e1a:	68fb      	ldr	r3, [r7, #12]
 8010e1c:	681b      	ldr	r3, [r3, #0]
 8010e1e:	695b      	ldr	r3, [r3, #20]
 8010e20:	f003 0301 	and.w	r3, r3, #1
 8010e24:	2b01      	cmp	r3, #1
 8010e26:	d11d      	bne.n	8010e64 <HAL_SPI_TransmitReceive+0x3d0>
 8010e28:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010e2a:	2b00      	cmp	r3, #0
 8010e2c:	d01a      	beq.n	8010e64 <HAL_SPI_TransmitReceive+0x3d0>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8010e2e:	68fb      	ldr	r3, [r7, #12]
 8010e30:	681b      	ldr	r3, [r3, #0]
 8010e32:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010e36:	68fb      	ldr	r3, [r7, #12]
 8010e38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e3a:	7812      	ldrb	r2, [r2, #0]
 8010e3c:	b2d2      	uxtb	r2, r2
 8010e3e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8010e40:	68fb      	ldr	r3, [r7, #12]
 8010e42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e44:	1c5a      	adds	r2, r3, #1
 8010e46:	68fb      	ldr	r3, [r7, #12]
 8010e48:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount--;
 8010e4a:	68fb      	ldr	r3, [r7, #12]
 8010e4c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8010e50:	b29b      	uxth	r3, r3
 8010e52:	3b01      	subs	r3, #1
 8010e54:	b29a      	uxth	r2, r3
 8010e56:	68fb      	ldr	r3, [r7, #12]
 8010e58:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
        initial_RxXferCount = hspi->RxXferCount;
 8010e5c:	68fb      	ldr	r3, [r7, #12]
 8010e5e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8010e62:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010e64:	f7f8 ff90 	bl	8009d88 <HAL_GetTick>
 8010e68:	4602      	mov	r2, r0
 8010e6a:	697b      	ldr	r3, [r7, #20]
 8010e6c:	1ad3      	subs	r3, r2, r3
 8010e6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010e70:	429a      	cmp	r2, r3
 8010e72:	d803      	bhi.n	8010e7c <HAL_SPI_TransmitReceive+0x3e8>
 8010e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010e7a:	d102      	bne.n	8010e82 <HAL_SPI_TransmitReceive+0x3ee>
 8010e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	d114      	bne.n	8010eac <HAL_SPI_TransmitReceive+0x418>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8010e82:	68f8      	ldr	r0, [r7, #12]
 8010e84:	f000 fa3c 	bl	8011300 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8010e88:	68fb      	ldr	r3, [r7, #12]
 8010e8a:	2200      	movs	r2, #0
 8010e8c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010e90:	68fb      	ldr	r3, [r7, #12]
 8010e92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010e96:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8010e9a:	68fb      	ldr	r3, [r7, #12]
 8010e9c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 8010ea0:	68fb      	ldr	r3, [r7, #12]
 8010ea2:	2201      	movs	r2, #1
 8010ea4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        return HAL_TIMEOUT;
 8010ea8:	2303      	movs	r3, #3
 8010eaa:	e02c      	b.n	8010f06 <HAL_SPI_TransmitReceive+0x472>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8010eac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	d190      	bne.n	8010dd4 <HAL_SPI_TransmitReceive+0x340>
 8010eb2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	d18d      	bne.n	8010dd4 <HAL_SPI_TransmitReceive+0x340>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8010eb8:	697b      	ldr	r3, [r7, #20]
 8010eba:	9300      	str	r3, [sp, #0]
 8010ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ebe:	2200      	movs	r2, #0
 8010ec0:	2108      	movs	r1, #8
 8010ec2:	68f8      	ldr	r0, [r7, #12]
 8010ec4:	f000 fabc 	bl	8011440 <SPI_WaitOnFlagUntilTimeout>
 8010ec8:	4603      	mov	r3, r0
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	d007      	beq.n	8010ede <HAL_SPI_TransmitReceive+0x44a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010ece:	68fb      	ldr	r3, [r7, #12]
 8010ed0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010ed4:	f043 0220 	orr.w	r2, r3, #32
 8010ed8:	68fb      	ldr	r3, [r7, #12]
 8010eda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8010ede:	68f8      	ldr	r0, [r7, #12]
 8010ee0:	f000 fa0e 	bl	8011300 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8010ee4:	68fb      	ldr	r3, [r7, #12]
 8010ee6:	2200      	movs	r2, #0
 8010ee8:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  hspi->State = HAL_SPI_STATE_READY;
 8010eec:	68fb      	ldr	r3, [r7, #12]
 8010eee:	2201      	movs	r2, #1
 8010ef0:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8010ef4:	68fb      	ldr	r3, [r7, #12]
 8010ef6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	d001      	beq.n	8010f02 <HAL_SPI_TransmitReceive+0x46e>
  {
    return HAL_ERROR;
 8010efe:	2301      	movs	r3, #1
 8010f00:	e001      	b.n	8010f06 <HAL_SPI_TransmitReceive+0x472>
  }
  return errorcode;
 8010f02:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8010f06:	4618      	mov	r0, r3
 8010f08:	3728      	adds	r7, #40	; 0x28
 8010f0a:	46bd      	mov	sp, r7
 8010f0c:	bd80      	pop	{r7, pc}
 8010f0e:	bf00      	nop

08010f10 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8010f10:	b580      	push	{r7, lr}
 8010f12:	b08a      	sub	sp, #40	; 0x28
 8010f14:	af00      	add	r7, sp, #0
 8010f16:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	681b      	ldr	r3, [r3, #0]
 8010f1c:	691b      	ldr	r3, [r3, #16]
 8010f1e:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	681b      	ldr	r3, [r3, #0]
 8010f24:	695b      	ldr	r3, [r3, #20]
 8010f26:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8010f28:	6a3a      	ldr	r2, [r7, #32]
 8010f2a:	69fb      	ldr	r3, [r7, #28]
 8010f2c:	4013      	ands	r3, r2
 8010f2e:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	681b      	ldr	r3, [r3, #0]
 8010f34:	689b      	ldr	r3, [r3, #8]
 8010f36:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8010f38:	2300      	movs	r3, #0
 8010f3a:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8010f42:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	681b      	ldr	r3, [r3, #0]
 8010f48:	3330      	adds	r3, #48	; 0x30
 8010f4a:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8010f4c:	69fb      	ldr	r3, [r7, #28]
 8010f4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	d010      	beq.n	8010f78 <HAL_SPI_IRQHandler+0x68>
 8010f56:	6a3b      	ldr	r3, [r7, #32]
 8010f58:	f003 0308 	and.w	r3, r3, #8
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	d00b      	beq.n	8010f78 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	681b      	ldr	r3, [r3, #0]
 8010f64:	699a      	ldr	r2, [r3, #24]
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	681b      	ldr	r3, [r3, #0]
 8010f6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010f6e:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8010f70:	6878      	ldr	r0, [r7, #4]
 8010f72:	f000 f9a1 	bl	80112b8 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 8010f76:	e19a      	b.n	80112ae <HAL_SPI_IRQHandler+0x39e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8010f78:	69bb      	ldr	r3, [r7, #24]
 8010f7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	d113      	bne.n	8010faa <HAL_SPI_IRQHandler+0x9a>
 8010f82:	69bb      	ldr	r3, [r7, #24]
 8010f84:	f003 0320 	and.w	r3, r3, #32
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	d10e      	bne.n	8010faa <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8010f8c:	69bb      	ldr	r3, [r7, #24]
 8010f8e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	d009      	beq.n	8010faa <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010f9a:	6878      	ldr	r0, [r7, #4]
 8010f9c:	4798      	blx	r3
    hspi->RxISR(hspi);
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010fa2:	6878      	ldr	r0, [r7, #4]
 8010fa4:	4798      	blx	r3
    handled = 1UL;
 8010fa6:	2301      	movs	r3, #1
 8010fa8:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8010faa:	69bb      	ldr	r3, [r7, #24]
 8010fac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	d10f      	bne.n	8010fd4 <HAL_SPI_IRQHandler+0xc4>
 8010fb4:	69bb      	ldr	r3, [r7, #24]
 8010fb6:	f003 0301 	and.w	r3, r3, #1
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	d00a      	beq.n	8010fd4 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8010fbe:	69bb      	ldr	r3, [r7, #24]
 8010fc0:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	d105      	bne.n	8010fd4 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010fcc:	6878      	ldr	r0, [r7, #4]
 8010fce:	4798      	blx	r3
    handled = 1UL;
 8010fd0:	2301      	movs	r3, #1
 8010fd2:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8010fd4:	69bb      	ldr	r3, [r7, #24]
 8010fd6:	f003 0320 	and.w	r3, r3, #32
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	d10f      	bne.n	8010ffe <HAL_SPI_IRQHandler+0xee>
 8010fde:	69bb      	ldr	r3, [r7, #24]
 8010fe0:	f003 0302 	and.w	r3, r3, #2
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	d00a      	beq.n	8010ffe <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8010fe8:	69bb      	ldr	r3, [r7, #24]
 8010fea:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	d105      	bne.n	8010ffe <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010ff6:	6878      	ldr	r0, [r7, #4]
 8010ff8:	4798      	blx	r3
    handled = 1UL;
 8010ffa:	2301      	movs	r3, #1
 8010ffc:	627b      	str	r3, [r7, #36]	; 0x24
  }


  if (handled != 0UL)
 8010ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011000:	2b00      	cmp	r3, #0
 8011002:	f040 814f 	bne.w	80112a4 <HAL_SPI_IRQHandler+0x394>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8011006:	69bb      	ldr	r3, [r7, #24]
 8011008:	f003 0308 	and.w	r3, r3, #8
 801100c:	2b00      	cmp	r3, #0
 801100e:	f000 808b 	beq.w	8011128 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	681b      	ldr	r3, [r3, #0]
 8011016:	699a      	ldr	r2, [r3, #24]
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	681b      	ldr	r3, [r3, #0]
 801101c:	f042 0208 	orr.w	r2, r2, #8
 8011020:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	681b      	ldr	r3, [r3, #0]
 8011026:	699a      	ldr	r2, [r3, #24]
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	681b      	ldr	r3, [r3, #0]
 801102c:	f042 0210 	orr.w	r2, r2, #16
 8011030:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	681b      	ldr	r3, [r3, #0]
 8011036:	699a      	ldr	r2, [r3, #24]
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	681b      	ldr	r3, [r3, #0]
 801103c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011040:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	681b      	ldr	r3, [r3, #0]
 8011046:	691a      	ldr	r2, [r3, #16]
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	681b      	ldr	r3, [r3, #0]
 801104c:	f022 0208 	bic.w	r2, r2, #8
 8011050:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	681b      	ldr	r3, [r3, #0]
 8011056:	689b      	ldr	r3, [r3, #8]
 8011058:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 801105c:	2b00      	cmp	r3, #0
 801105e:	d13d      	bne.n	80110dc <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8011060:	e036      	b.n	80110d0 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	68db      	ldr	r3, [r3, #12]
 8011066:	2b0f      	cmp	r3, #15
 8011068:	d90b      	bls.n	8011082 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	681a      	ldr	r2, [r3, #0]
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011072:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8011074:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801107a:	1d1a      	adds	r2, r3, #4
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	66da      	str	r2, [r3, #108]	; 0x6c
 8011080:	e01d      	b.n	80110be <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	68db      	ldr	r3, [r3, #12]
 8011086:	2b07      	cmp	r3, #7
 8011088:	d90b      	bls.n	80110a2 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801108e:	68fa      	ldr	r2, [r7, #12]
 8011090:	8812      	ldrh	r2, [r2, #0]
 8011092:	b292      	uxth	r2, r2
 8011094:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801109a:	1c9a      	adds	r2, r3, #2
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	66da      	str	r2, [r3, #108]	; 0x6c
 80110a0:	e00d      	b.n	80110be <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	681b      	ldr	r3, [r3, #0]
 80110a6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80110ae:	7812      	ldrb	r2, [r2, #0]
 80110b0:	b2d2      	uxtb	r2, r2
 80110b2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80110b8:	1c5a      	adds	r2, r3, #1
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	66da      	str	r2, [r3, #108]	; 0x6c
        }

        hspi->RxXferCount--;
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 80110c4:	b29b      	uxth	r3, r3
 80110c6:	3b01      	subs	r3, #1
 80110c8:	b29a      	uxth	r2, r3
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
      while (hspi->RxXferCount != 0UL)
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 80110d6:	b29b      	uxth	r3, r3
 80110d8:	2b00      	cmp	r3, #0
 80110da:	d1c2      	bne.n	8011062 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 80110dc:	6878      	ldr	r0, [r7, #4]
 80110de:	f000 f90f 	bl	8011300 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	2201      	movs	r2, #1
 80110e6:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	d003      	beq.n	80110fc <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80110f4:	6878      	ldr	r0, [r7, #4]
 80110f6:	f7f8 fad9 	bl	80096ac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80110fa:	e0d8      	b.n	80112ae <HAL_SPI_IRQHandler+0x39e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 80110fc:	7cfb      	ldrb	r3, [r7, #19]
 80110fe:	2b05      	cmp	r3, #5
 8011100:	d103      	bne.n	801110a <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8011102:	6878      	ldr	r0, [r7, #4]
 8011104:	f7f1 fd70 	bl	8002be8 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8011108:	e0ce      	b.n	80112a8 <HAL_SPI_IRQHandler+0x398>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 801110a:	7cfb      	ldrb	r3, [r7, #19]
 801110c:	2b04      	cmp	r3, #4
 801110e:	d103      	bne.n	8011118 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8011110:	6878      	ldr	r0, [r7, #4]
 8011112:	f7f1 fd45 	bl	8002ba0 <HAL_SPI_RxCpltCallback>
    return;
 8011116:	e0c7      	b.n	80112a8 <HAL_SPI_IRQHandler+0x398>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8011118:	7cfb      	ldrb	r3, [r7, #19]
 801111a:	2b03      	cmp	r3, #3
 801111c:	f040 80c4 	bne.w	80112a8 <HAL_SPI_IRQHandler+0x398>
      HAL_SPI_TxCpltCallback(hspi);
 8011120:	6878      	ldr	r0, [r7, #4]
 8011122:	f7f1 fd4f 	bl	8002bc4 <HAL_SPI_TxCpltCallback>
    return;
 8011126:	e0bf      	b.n	80112a8 <HAL_SPI_IRQHandler+0x398>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8011128:	69bb      	ldr	r3, [r7, #24]
 801112a:	f403 7358 	and.w	r3, r3, #864	; 0x360
 801112e:	2b00      	cmp	r3, #0
 8011130:	f000 80bd 	beq.w	80112ae <HAL_SPI_IRQHandler+0x39e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8011134:	69bb      	ldr	r3, [r7, #24]
 8011136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801113a:	2b00      	cmp	r3, #0
 801113c:	d00f      	beq.n	801115e <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011144:	f043 0204 	orr.w	r2, r3, #4
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	681b      	ldr	r3, [r3, #0]
 8011152:	699a      	ldr	r2, [r3, #24]
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	681b      	ldr	r3, [r3, #0]
 8011158:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801115c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 801115e:	69bb      	ldr	r3, [r7, #24]
 8011160:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011164:	2b00      	cmp	r3, #0
 8011166:	d00f      	beq.n	8011188 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801116e:	f043 0201 	orr.w	r2, r3, #1
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	681b      	ldr	r3, [r3, #0]
 801117c:	699a      	ldr	r2, [r3, #24]
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	681b      	ldr	r3, [r3, #0]
 8011182:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011186:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8011188:	69bb      	ldr	r3, [r7, #24]
 801118a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801118e:	2b00      	cmp	r3, #0
 8011190:	d00f      	beq.n	80111b2 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011198:	f043 0208 	orr.w	r2, r3, #8
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	681b      	ldr	r3, [r3, #0]
 80111a6:	699a      	ldr	r2, [r3, #24]
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	681b      	ldr	r3, [r3, #0]
 80111ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80111b0:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 80111b2:	69bb      	ldr	r3, [r7, #24]
 80111b4:	f003 0320 	and.w	r3, r3, #32
 80111b8:	2b00      	cmp	r3, #0
 80111ba:	d00f      	beq.n	80111dc <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80111c2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	681b      	ldr	r3, [r3, #0]
 80111d0:	699a      	ldr	r2, [r3, #24]
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	681b      	ldr	r3, [r3, #0]
 80111d6:	f042 0220 	orr.w	r2, r2, #32
 80111da:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	d062      	beq.n	80112ac <HAL_SPI_IRQHandler+0x39c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	681b      	ldr	r3, [r3, #0]
 80111ea:	681a      	ldr	r2, [r3, #0]
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	681b      	ldr	r3, [r3, #0]
 80111f0:	f022 0201 	bic.w	r2, r2, #1
 80111f4:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	681b      	ldr	r3, [r3, #0]
 80111fa:	691b      	ldr	r3, [r3, #16]
 80111fc:	687a      	ldr	r2, [r7, #4]
 80111fe:	6812      	ldr	r2, [r2, #0]
 8011200:	f423 735a 	bic.w	r3, r3, #872	; 0x368
 8011204:	f023 0303 	bic.w	r3, r3, #3
 8011208:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 801120a:	697b      	ldr	r3, [r7, #20]
 801120c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8011210:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8011214:	d13e      	bne.n	8011294 <HAL_SPI_IRQHandler+0x384>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	681b      	ldr	r3, [r3, #0]
 801121a:	689a      	ldr	r2, [r3, #8]
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	681b      	ldr	r3, [r3, #0]
 8011220:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8011224:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801122c:	2b00      	cmp	r3, #0
 801122e:	d015      	beq.n	801125c <HAL_SPI_IRQHandler+0x34c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011236:	4a1f      	ldr	r2, [pc, #124]	; (80112b4 <HAL_SPI_IRQHandler+0x3a4>)
 8011238:	66da      	str	r2, [r3, #108]	; 0x6c
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011240:	4618      	mov	r0, r3
 8011242:	f7f8 ff39 	bl	800a0b8 <HAL_DMA_Abort_IT>
 8011246:	4603      	mov	r3, r0
 8011248:	2b00      	cmp	r3, #0
 801124a:	d007      	beq.n	801125c <HAL_SPI_IRQHandler+0x34c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011252:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011262:	2b00      	cmp	r3, #0
 8011264:	d022      	beq.n	80112ac <HAL_SPI_IRQHandler+0x39c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801126c:	4a11      	ldr	r2, [pc, #68]	; (80112b4 <HAL_SPI_IRQHandler+0x3a4>)
 801126e:	66da      	str	r2, [r3, #108]	; 0x6c
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011276:	4618      	mov	r0, r3
 8011278:	f7f8 ff1e 	bl	800a0b8 <HAL_DMA_Abort_IT>
 801127c:	4603      	mov	r3, r0
 801127e:	2b00      	cmp	r3, #0
 8011280:	d014      	beq.n	80112ac <HAL_SPI_IRQHandler+0x39c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011288:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8011292:	e00b      	b.n	80112ac <HAL_SPI_IRQHandler+0x39c>
        hspi->State = HAL_SPI_STATE_READY;
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	2201      	movs	r2, #1
 8011298:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        HAL_SPI_ErrorCallback(hspi);
 801129c:	6878      	ldr	r0, [r7, #4]
 801129e:	f7f8 fa05 	bl	80096ac <HAL_SPI_ErrorCallback>
    return;
 80112a2:	e003      	b.n	80112ac <HAL_SPI_IRQHandler+0x39c>
    return;
 80112a4:	bf00      	nop
 80112a6:	e002      	b.n	80112ae <HAL_SPI_IRQHandler+0x39e>
    return;
 80112a8:	bf00      	nop
 80112aa:	e000      	b.n	80112ae <HAL_SPI_IRQHandler+0x39e>
    return;
 80112ac:	bf00      	nop
  }
}
 80112ae:	3728      	adds	r7, #40	; 0x28
 80112b0:	46bd      	mov	sp, r7
 80112b2:	bd80      	pop	{r7, pc}
 80112b4:	080112cd 	.word	0x080112cd

080112b8 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80112b8:	b480      	push	{r7}
 80112ba:	b083      	sub	sp, #12
 80112bc:	af00      	add	r7, sp, #0
 80112be:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 80112c0:	bf00      	nop
 80112c2:	370c      	adds	r7, #12
 80112c4:	46bd      	mov	sp, r7
 80112c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ca:	4770      	bx	lr

080112cc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80112cc:	b580      	push	{r7, lr}
 80112ce:	b084      	sub	sp, #16
 80112d0:	af00      	add	r7, sp, #0
 80112d2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80112d8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 80112da:	68fb      	ldr	r3, [r7, #12]
 80112dc:	2200      	movs	r2, #0
 80112de:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
  hspi->TxXferCount = (uint16_t) 0UL;
 80112e2:	68fb      	ldr	r3, [r7, #12]
 80112e4:	2200      	movs	r2, #0
 80112e6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 80112ea:	68fb      	ldr	r3, [r7, #12]
 80112ec:	2201      	movs	r2, #1
 80112ee:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80112f2:	68f8      	ldr	r0, [r7, #12]
 80112f4:	f7f8 f9da 	bl	80096ac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80112f8:	bf00      	nop
 80112fa:	3710      	adds	r7, #16
 80112fc:	46bd      	mov	sp, r7
 80112fe:	bd80      	pop	{r7, pc}

08011300 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8011300:	b480      	push	{r7}
 8011302:	b085      	sub	sp, #20
 8011304:	af00      	add	r7, sp, #0
 8011306:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	681b      	ldr	r3, [r3, #0]
 801130c:	695b      	ldr	r3, [r3, #20]
 801130e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	681b      	ldr	r3, [r3, #0]
 8011314:	699a      	ldr	r2, [r3, #24]
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	681b      	ldr	r3, [r3, #0]
 801131a:	f042 0208 	orr.w	r2, r2, #8
 801131e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	681b      	ldr	r3, [r3, #0]
 8011324:	699a      	ldr	r2, [r3, #24]
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	681b      	ldr	r3, [r3, #0]
 801132a:	f042 0210 	orr.w	r2, r2, #16
 801132e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	681b      	ldr	r3, [r3, #0]
 8011334:	681a      	ldr	r2, [r3, #0]
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	681b      	ldr	r3, [r3, #0]
 801133a:	f022 0201 	bic.w	r2, r2, #1
 801133e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	681b      	ldr	r3, [r3, #0]
 8011344:	691b      	ldr	r3, [r3, #16]
 8011346:	687a      	ldr	r2, [r7, #4]
 8011348:	6812      	ldr	r2, [r2, #0]
 801134a:	f423 735b 	bic.w	r3, r3, #876	; 0x36c
 801134e:	f023 0303 	bic.w	r3, r3, #3
 8011352:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	681b      	ldr	r3, [r3, #0]
 8011358:	689a      	ldr	r2, [r3, #8]
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	681b      	ldr	r3, [r3, #0]
 801135e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8011362:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 801136a:	b2db      	uxtb	r3, r3
 801136c:	2b04      	cmp	r3, #4
 801136e:	d014      	beq.n	801139a <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8011370:	68fb      	ldr	r3, [r7, #12]
 8011372:	f003 0320 	and.w	r3, r3, #32
 8011376:	2b00      	cmp	r3, #0
 8011378:	d00f      	beq.n	801139a <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011380:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	681b      	ldr	r3, [r3, #0]
 801138e:	699a      	ldr	r2, [r3, #24]
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	681b      	ldr	r3, [r3, #0]
 8011394:	f042 0220 	orr.w	r2, r2, #32
 8011398:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 80113a0:	b2db      	uxtb	r3, r3
 80113a2:	2b03      	cmp	r3, #3
 80113a4:	d014      	beq.n	80113d0 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80113a6:	68fb      	ldr	r3, [r7, #12]
 80113a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	d00f      	beq.n	80113d0 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80113b6:	f043 0204 	orr.w	r2, r3, #4
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	681b      	ldr	r3, [r3, #0]
 80113c4:	699a      	ldr	r2, [r3, #24]
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	681b      	ldr	r3, [r3, #0]
 80113ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80113ce:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80113d0:	68fb      	ldr	r3, [r7, #12]
 80113d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	d00f      	beq.n	80113fa <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80113e0:	f043 0201 	orr.w	r2, r3, #1
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	681b      	ldr	r3, [r3, #0]
 80113ee:	699a      	ldr	r2, [r3, #24]
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	681b      	ldr	r3, [r3, #0]
 80113f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80113f8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80113fa:	68fb      	ldr	r3, [r7, #12]
 80113fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011400:	2b00      	cmp	r3, #0
 8011402:	d00f      	beq.n	8011424 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801140a:	f043 0208 	orr.w	r2, r3, #8
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	681b      	ldr	r3, [r3, #0]
 8011418:	699a      	ldr	r2, [r3, #24]
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	681b      	ldr	r3, [r3, #0]
 801141e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8011422:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	2200      	movs	r2, #0
 8011428:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	2200      	movs	r2, #0
 8011430:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
}
 8011434:	bf00      	nop
 8011436:	3714      	adds	r7, #20
 8011438:	46bd      	mov	sp, r7
 801143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801143e:	4770      	bx	lr

08011440 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8011440:	b580      	push	{r7, lr}
 8011442:	b084      	sub	sp, #16
 8011444:	af00      	add	r7, sp, #0
 8011446:	60f8      	str	r0, [r7, #12]
 8011448:	60b9      	str	r1, [r7, #8]
 801144a:	603b      	str	r3, [r7, #0]
 801144c:	4613      	mov	r3, r2
 801144e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8011450:	e010      	b.n	8011474 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011452:	f7f8 fc99 	bl	8009d88 <HAL_GetTick>
 8011456:	4602      	mov	r2, r0
 8011458:	69bb      	ldr	r3, [r7, #24]
 801145a:	1ad3      	subs	r3, r2, r3
 801145c:	683a      	ldr	r2, [r7, #0]
 801145e:	429a      	cmp	r2, r3
 8011460:	d803      	bhi.n	801146a <SPI_WaitOnFlagUntilTimeout+0x2a>
 8011462:	683b      	ldr	r3, [r7, #0]
 8011464:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011468:	d102      	bne.n	8011470 <SPI_WaitOnFlagUntilTimeout+0x30>
 801146a:	683b      	ldr	r3, [r7, #0]
 801146c:	2b00      	cmp	r3, #0
 801146e:	d101      	bne.n	8011474 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8011470:	2303      	movs	r3, #3
 8011472:	e00f      	b.n	8011494 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8011474:	68fb      	ldr	r3, [r7, #12]
 8011476:	681b      	ldr	r3, [r3, #0]
 8011478:	695a      	ldr	r2, [r3, #20]
 801147a:	68bb      	ldr	r3, [r7, #8]
 801147c:	4013      	ands	r3, r2
 801147e:	68ba      	ldr	r2, [r7, #8]
 8011480:	429a      	cmp	r2, r3
 8011482:	bf0c      	ite	eq
 8011484:	2301      	moveq	r3, #1
 8011486:	2300      	movne	r3, #0
 8011488:	b2db      	uxtb	r3, r3
 801148a:	461a      	mov	r2, r3
 801148c:	79fb      	ldrb	r3, [r7, #7]
 801148e:	429a      	cmp	r2, r3
 8011490:	d0df      	beq.n	8011452 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8011492:	2300      	movs	r3, #0
}
 8011494:	4618      	mov	r0, r3
 8011496:	3710      	adds	r7, #16
 8011498:	46bd      	mov	sp, r7
 801149a:	bd80      	pop	{r7, pc}

0801149c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 801149c:	b480      	push	{r7}
 801149e:	b085      	sub	sp, #20
 80114a0:	af00      	add	r7, sp, #0
 80114a2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80114a8:	095b      	lsrs	r3, r3, #5
 80114aa:	3301      	adds	r3, #1
 80114ac:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	68db      	ldr	r3, [r3, #12]
 80114b2:	3301      	adds	r3, #1
 80114b4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80114b6:	68bb      	ldr	r3, [r7, #8]
 80114b8:	3307      	adds	r3, #7
 80114ba:	08db      	lsrs	r3, r3, #3
 80114bc:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80114be:	68bb      	ldr	r3, [r7, #8]
 80114c0:	68fa      	ldr	r2, [r7, #12]
 80114c2:	fb02 f303 	mul.w	r3, r2, r3
}
 80114c6:	4618      	mov	r0, r3
 80114c8:	3714      	adds	r7, #20
 80114ca:	46bd      	mov	sp, r7
 80114cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114d0:	4770      	bx	lr

080114d2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80114d2:	b580      	push	{r7, lr}
 80114d4:	b082      	sub	sp, #8
 80114d6:	af00      	add	r7, sp, #0
 80114d8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	2b00      	cmp	r3, #0
 80114de:	d101      	bne.n	80114e4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80114e0:	2301      	movs	r3, #1
 80114e2:	e042      	b.n	801156a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	d106      	bne.n	80114fc <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	2200      	movs	r2, #0
 80114f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80114f6:	6878      	ldr	r0, [r7, #4]
 80114f8:	f7ef fefa 	bl	80012f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	2224      	movs	r2, #36	; 0x24
 8011500:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	681b      	ldr	r3, [r3, #0]
 8011508:	681a      	ldr	r2, [r3, #0]
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	681b      	ldr	r3, [r3, #0]
 801150e:	f022 0201 	bic.w	r2, r2, #1
 8011512:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011518:	2b00      	cmp	r3, #0
 801151a:	d002      	beq.n	8011522 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 801151c:	6878      	ldr	r0, [r7, #4]
 801151e:	f000 fb3f 	bl	8011ba0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8011522:	6878      	ldr	r0, [r7, #4]
 8011524:	f000 f99a 	bl	801185c <UART_SetConfig>
 8011528:	4603      	mov	r3, r0
 801152a:	2b01      	cmp	r3, #1
 801152c:	d101      	bne.n	8011532 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 801152e:	2301      	movs	r3, #1
 8011530:	e01b      	b.n	801156a <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	681b      	ldr	r3, [r3, #0]
 8011536:	685a      	ldr	r2, [r3, #4]
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	681b      	ldr	r3, [r3, #0]
 801153c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8011540:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	681b      	ldr	r3, [r3, #0]
 8011546:	689a      	ldr	r2, [r3, #8]
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	681b      	ldr	r3, [r3, #0]
 801154c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8011550:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	681b      	ldr	r3, [r3, #0]
 8011556:	681a      	ldr	r2, [r3, #0]
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	681b      	ldr	r3, [r3, #0]
 801155c:	f042 0201 	orr.w	r2, r2, #1
 8011560:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8011562:	6878      	ldr	r0, [r7, #4]
 8011564:	f000 fbbe 	bl	8011ce4 <UART_CheckIdleState>
 8011568:	4603      	mov	r3, r0
}
 801156a:	4618      	mov	r0, r3
 801156c:	3708      	adds	r7, #8
 801156e:	46bd      	mov	sp, r7
 8011570:	bd80      	pop	{r7, pc}

08011572 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011572:	b580      	push	{r7, lr}
 8011574:	b08a      	sub	sp, #40	; 0x28
 8011576:	af02      	add	r7, sp, #8
 8011578:	60f8      	str	r0, [r7, #12]
 801157a:	60b9      	str	r1, [r7, #8]
 801157c:	603b      	str	r3, [r7, #0]
 801157e:	4613      	mov	r3, r2
 8011580:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8011582:	68fb      	ldr	r3, [r7, #12]
 8011584:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011588:	2b20      	cmp	r3, #32
 801158a:	f040 808b 	bne.w	80116a4 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 801158e:	68bb      	ldr	r3, [r7, #8]
 8011590:	2b00      	cmp	r3, #0
 8011592:	d002      	beq.n	801159a <HAL_UART_Transmit+0x28>
 8011594:	88fb      	ldrh	r3, [r7, #6]
 8011596:	2b00      	cmp	r3, #0
 8011598:	d101      	bne.n	801159e <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 801159a:	2301      	movs	r3, #1
 801159c:	e083      	b.n	80116a6 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 801159e:	68fb      	ldr	r3, [r7, #12]
 80115a0:	681b      	ldr	r3, [r3, #0]
 80115a2:	689b      	ldr	r3, [r3, #8]
 80115a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80115a8:	2b80      	cmp	r3, #128	; 0x80
 80115aa:	d107      	bne.n	80115bc <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80115ac:	68fb      	ldr	r3, [r7, #12]
 80115ae:	681b      	ldr	r3, [r3, #0]
 80115b0:	689a      	ldr	r2, [r3, #8]
 80115b2:	68fb      	ldr	r3, [r7, #12]
 80115b4:	681b      	ldr	r3, [r3, #0]
 80115b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80115ba:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80115bc:	68fb      	ldr	r3, [r7, #12]
 80115be:	2200      	movs	r2, #0
 80115c0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80115c4:	68fb      	ldr	r3, [r7, #12]
 80115c6:	2221      	movs	r2, #33	; 0x21
 80115c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80115cc:	f7f8 fbdc 	bl	8009d88 <HAL_GetTick>
 80115d0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80115d2:	68fb      	ldr	r3, [r7, #12]
 80115d4:	88fa      	ldrh	r2, [r7, #6]
 80115d6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80115da:	68fb      	ldr	r3, [r7, #12]
 80115dc:	88fa      	ldrh	r2, [r7, #6]
 80115de:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80115e2:	68fb      	ldr	r3, [r7, #12]
 80115e4:	689b      	ldr	r3, [r3, #8]
 80115e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80115ea:	d108      	bne.n	80115fe <HAL_UART_Transmit+0x8c>
 80115ec:	68fb      	ldr	r3, [r7, #12]
 80115ee:	691b      	ldr	r3, [r3, #16]
 80115f0:	2b00      	cmp	r3, #0
 80115f2:	d104      	bne.n	80115fe <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 80115f4:	2300      	movs	r3, #0
 80115f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80115f8:	68bb      	ldr	r3, [r7, #8]
 80115fa:	61bb      	str	r3, [r7, #24]
 80115fc:	e003      	b.n	8011606 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 80115fe:	68bb      	ldr	r3, [r7, #8]
 8011600:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8011602:	2300      	movs	r3, #0
 8011604:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8011606:	e030      	b.n	801166a <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8011608:	683b      	ldr	r3, [r7, #0]
 801160a:	9300      	str	r3, [sp, #0]
 801160c:	697b      	ldr	r3, [r7, #20]
 801160e:	2200      	movs	r2, #0
 8011610:	2180      	movs	r1, #128	; 0x80
 8011612:	68f8      	ldr	r0, [r7, #12]
 8011614:	f000 fc10 	bl	8011e38 <UART_WaitOnFlagUntilTimeout>
 8011618:	4603      	mov	r3, r0
 801161a:	2b00      	cmp	r3, #0
 801161c:	d005      	beq.n	801162a <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 801161e:	68fb      	ldr	r3, [r7, #12]
 8011620:	2220      	movs	r2, #32
 8011622:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8011626:	2303      	movs	r3, #3
 8011628:	e03d      	b.n	80116a6 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 801162a:	69fb      	ldr	r3, [r7, #28]
 801162c:	2b00      	cmp	r3, #0
 801162e:	d10b      	bne.n	8011648 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8011630:	69bb      	ldr	r3, [r7, #24]
 8011632:	881b      	ldrh	r3, [r3, #0]
 8011634:	461a      	mov	r2, r3
 8011636:	68fb      	ldr	r3, [r7, #12]
 8011638:	681b      	ldr	r3, [r3, #0]
 801163a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801163e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8011640:	69bb      	ldr	r3, [r7, #24]
 8011642:	3302      	adds	r3, #2
 8011644:	61bb      	str	r3, [r7, #24]
 8011646:	e007      	b.n	8011658 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8011648:	69fb      	ldr	r3, [r7, #28]
 801164a:	781a      	ldrb	r2, [r3, #0]
 801164c:	68fb      	ldr	r3, [r7, #12]
 801164e:	681b      	ldr	r3, [r3, #0]
 8011650:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8011652:	69fb      	ldr	r3, [r7, #28]
 8011654:	3301      	adds	r3, #1
 8011656:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8011658:	68fb      	ldr	r3, [r7, #12]
 801165a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801165e:	b29b      	uxth	r3, r3
 8011660:	3b01      	subs	r3, #1
 8011662:	b29a      	uxth	r2, r3
 8011664:	68fb      	ldr	r3, [r7, #12]
 8011666:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 801166a:	68fb      	ldr	r3, [r7, #12]
 801166c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8011670:	b29b      	uxth	r3, r3
 8011672:	2b00      	cmp	r3, #0
 8011674:	d1c8      	bne.n	8011608 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8011676:	683b      	ldr	r3, [r7, #0]
 8011678:	9300      	str	r3, [sp, #0]
 801167a:	697b      	ldr	r3, [r7, #20]
 801167c:	2200      	movs	r2, #0
 801167e:	2140      	movs	r1, #64	; 0x40
 8011680:	68f8      	ldr	r0, [r7, #12]
 8011682:	f000 fbd9 	bl	8011e38 <UART_WaitOnFlagUntilTimeout>
 8011686:	4603      	mov	r3, r0
 8011688:	2b00      	cmp	r3, #0
 801168a:	d005      	beq.n	8011698 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 801168c:	68fb      	ldr	r3, [r7, #12]
 801168e:	2220      	movs	r2, #32
 8011690:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8011694:	2303      	movs	r3, #3
 8011696:	e006      	b.n	80116a6 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8011698:	68fb      	ldr	r3, [r7, #12]
 801169a:	2220      	movs	r2, #32
 801169c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80116a0:	2300      	movs	r3, #0
 80116a2:	e000      	b.n	80116a6 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 80116a4:	2302      	movs	r3, #2
  }
}
 80116a6:	4618      	mov	r0, r3
 80116a8:	3720      	adds	r7, #32
 80116aa:	46bd      	mov	sp, r7
 80116ac:	bd80      	pop	{r7, pc}

080116ae <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80116ae:	b580      	push	{r7, lr}
 80116b0:	b08a      	sub	sp, #40	; 0x28
 80116b2:	af02      	add	r7, sp, #8
 80116b4:	60f8      	str	r0, [r7, #12]
 80116b6:	60b9      	str	r1, [r7, #8]
 80116b8:	603b      	str	r3, [r7, #0]
 80116ba:	4613      	mov	r3, r2
 80116bc:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80116be:	68fb      	ldr	r3, [r7, #12]
 80116c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80116c4:	2b20      	cmp	r3, #32
 80116c6:	f040 80c4 	bne.w	8011852 <HAL_UART_Receive+0x1a4>
  {
    if ((pData == NULL) || (Size == 0U))
 80116ca:	68bb      	ldr	r3, [r7, #8]
 80116cc:	2b00      	cmp	r3, #0
 80116ce:	d002      	beq.n	80116d6 <HAL_UART_Receive+0x28>
 80116d0:	88fb      	ldrh	r3, [r7, #6]
 80116d2:	2b00      	cmp	r3, #0
 80116d4:	d101      	bne.n	80116da <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80116d6:	2301      	movs	r3, #1
 80116d8:	e0bc      	b.n	8011854 <HAL_UART_Receive+0x1a6>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Rx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80116da:	68fb      	ldr	r3, [r7, #12]
 80116dc:	681b      	ldr	r3, [r3, #0]
 80116de:	689b      	ldr	r3, [r3, #8]
 80116e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80116e4:	2b40      	cmp	r3, #64	; 0x40
 80116e6:	d107      	bne.n	80116f8 <HAL_UART_Receive+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80116e8:	68fb      	ldr	r3, [r7, #12]
 80116ea:	681b      	ldr	r3, [r3, #0]
 80116ec:	689a      	ldr	r2, [r3, #8]
 80116ee:	68fb      	ldr	r3, [r7, #12]
 80116f0:	681b      	ldr	r3, [r3, #0]
 80116f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80116f6:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80116f8:	68fb      	ldr	r3, [r7, #12]
 80116fa:	2200      	movs	r2, #0
 80116fc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8011700:	68fb      	ldr	r3, [r7, #12]
 8011702:	2222      	movs	r2, #34	; 0x22
 8011704:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011708:	68fb      	ldr	r3, [r7, #12]
 801170a:	2200      	movs	r2, #0
 801170c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801170e:	f7f8 fb3b 	bl	8009d88 <HAL_GetTick>
 8011712:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8011714:	68fb      	ldr	r3, [r7, #12]
 8011716:	88fa      	ldrh	r2, [r7, #6]
 8011718:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 801171c:	68fb      	ldr	r3, [r7, #12]
 801171e:	88fa      	ldrh	r2, [r7, #6]
 8011720:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8011724:	68fb      	ldr	r3, [r7, #12]
 8011726:	689b      	ldr	r3, [r3, #8]
 8011728:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801172c:	d10e      	bne.n	801174c <HAL_UART_Receive+0x9e>
 801172e:	68fb      	ldr	r3, [r7, #12]
 8011730:	691b      	ldr	r3, [r3, #16]
 8011732:	2b00      	cmp	r3, #0
 8011734:	d105      	bne.n	8011742 <HAL_UART_Receive+0x94>
 8011736:	68fb      	ldr	r3, [r7, #12]
 8011738:	f240 12ff 	movw	r2, #511	; 0x1ff
 801173c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011740:	e02d      	b.n	801179e <HAL_UART_Receive+0xf0>
 8011742:	68fb      	ldr	r3, [r7, #12]
 8011744:	22ff      	movs	r2, #255	; 0xff
 8011746:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801174a:	e028      	b.n	801179e <HAL_UART_Receive+0xf0>
 801174c:	68fb      	ldr	r3, [r7, #12]
 801174e:	689b      	ldr	r3, [r3, #8]
 8011750:	2b00      	cmp	r3, #0
 8011752:	d10d      	bne.n	8011770 <HAL_UART_Receive+0xc2>
 8011754:	68fb      	ldr	r3, [r7, #12]
 8011756:	691b      	ldr	r3, [r3, #16]
 8011758:	2b00      	cmp	r3, #0
 801175a:	d104      	bne.n	8011766 <HAL_UART_Receive+0xb8>
 801175c:	68fb      	ldr	r3, [r7, #12]
 801175e:	22ff      	movs	r2, #255	; 0xff
 8011760:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011764:	e01b      	b.n	801179e <HAL_UART_Receive+0xf0>
 8011766:	68fb      	ldr	r3, [r7, #12]
 8011768:	227f      	movs	r2, #127	; 0x7f
 801176a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801176e:	e016      	b.n	801179e <HAL_UART_Receive+0xf0>
 8011770:	68fb      	ldr	r3, [r7, #12]
 8011772:	689b      	ldr	r3, [r3, #8]
 8011774:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011778:	d10d      	bne.n	8011796 <HAL_UART_Receive+0xe8>
 801177a:	68fb      	ldr	r3, [r7, #12]
 801177c:	691b      	ldr	r3, [r3, #16]
 801177e:	2b00      	cmp	r3, #0
 8011780:	d104      	bne.n	801178c <HAL_UART_Receive+0xde>
 8011782:	68fb      	ldr	r3, [r7, #12]
 8011784:	227f      	movs	r2, #127	; 0x7f
 8011786:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801178a:	e008      	b.n	801179e <HAL_UART_Receive+0xf0>
 801178c:	68fb      	ldr	r3, [r7, #12]
 801178e:	223f      	movs	r2, #63	; 0x3f
 8011790:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011794:	e003      	b.n	801179e <HAL_UART_Receive+0xf0>
 8011796:	68fb      	ldr	r3, [r7, #12]
 8011798:	2200      	movs	r2, #0
 801179a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 801179e:	68fb      	ldr	r3, [r7, #12]
 80117a0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80117a4:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80117a6:	68fb      	ldr	r3, [r7, #12]
 80117a8:	689b      	ldr	r3, [r3, #8]
 80117aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80117ae:	d108      	bne.n	80117c2 <HAL_UART_Receive+0x114>
 80117b0:	68fb      	ldr	r3, [r7, #12]
 80117b2:	691b      	ldr	r3, [r3, #16]
 80117b4:	2b00      	cmp	r3, #0
 80117b6:	d104      	bne.n	80117c2 <HAL_UART_Receive+0x114>
    {
      pdata8bits  = NULL;
 80117b8:	2300      	movs	r3, #0
 80117ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80117bc:	68bb      	ldr	r3, [r7, #8]
 80117be:	61bb      	str	r3, [r7, #24]
 80117c0:	e003      	b.n	80117ca <HAL_UART_Receive+0x11c>
    }
    else
    {
      pdata8bits  = pData;
 80117c2:	68bb      	ldr	r3, [r7, #8]
 80117c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80117c6:	2300      	movs	r3, #0
 80117c8:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80117ca:	e036      	b.n	801183a <HAL_UART_Receive+0x18c>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80117cc:	683b      	ldr	r3, [r7, #0]
 80117ce:	9300      	str	r3, [sp, #0]
 80117d0:	697b      	ldr	r3, [r7, #20]
 80117d2:	2200      	movs	r2, #0
 80117d4:	2120      	movs	r1, #32
 80117d6:	68f8      	ldr	r0, [r7, #12]
 80117d8:	f000 fb2e 	bl	8011e38 <UART_WaitOnFlagUntilTimeout>
 80117dc:	4603      	mov	r3, r0
 80117de:	2b00      	cmp	r3, #0
 80117e0:	d005      	beq.n	80117ee <HAL_UART_Receive+0x140>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80117e2:	68fb      	ldr	r3, [r7, #12]
 80117e4:	2220      	movs	r2, #32
 80117e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 80117ea:	2303      	movs	r3, #3
 80117ec:	e032      	b.n	8011854 <HAL_UART_Receive+0x1a6>
      }
      if (pdata8bits == NULL)
 80117ee:	69fb      	ldr	r3, [r7, #28]
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	d10c      	bne.n	801180e <HAL_UART_Receive+0x160>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80117f4:	68fb      	ldr	r3, [r7, #12]
 80117f6:	681b      	ldr	r3, [r3, #0]
 80117f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80117fa:	b29a      	uxth	r2, r3
 80117fc:	8a7b      	ldrh	r3, [r7, #18]
 80117fe:	4013      	ands	r3, r2
 8011800:	b29a      	uxth	r2, r3
 8011802:	69bb      	ldr	r3, [r7, #24]
 8011804:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8011806:	69bb      	ldr	r3, [r7, #24]
 8011808:	3302      	adds	r3, #2
 801180a:	61bb      	str	r3, [r7, #24]
 801180c:	e00c      	b.n	8011828 <HAL_UART_Receive+0x17a>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 801180e:	68fb      	ldr	r3, [r7, #12]
 8011810:	681b      	ldr	r3, [r3, #0]
 8011812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011814:	b2da      	uxtb	r2, r3
 8011816:	8a7b      	ldrh	r3, [r7, #18]
 8011818:	b2db      	uxtb	r3, r3
 801181a:	4013      	ands	r3, r2
 801181c:	b2da      	uxtb	r2, r3
 801181e:	69fb      	ldr	r3, [r7, #28]
 8011820:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8011822:	69fb      	ldr	r3, [r7, #28]
 8011824:	3301      	adds	r3, #1
 8011826:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8011828:	68fb      	ldr	r3, [r7, #12]
 801182a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801182e:	b29b      	uxth	r3, r3
 8011830:	3b01      	subs	r3, #1
 8011832:	b29a      	uxth	r2, r3
 8011834:	68fb      	ldr	r3, [r7, #12]
 8011836:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 801183a:	68fb      	ldr	r3, [r7, #12]
 801183c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011840:	b29b      	uxth	r3, r3
 8011842:	2b00      	cmp	r3, #0
 8011844:	d1c2      	bne.n	80117cc <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8011846:	68fb      	ldr	r3, [r7, #12]
 8011848:	2220      	movs	r2, #32
 801184a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 801184e:	2300      	movs	r3, #0
 8011850:	e000      	b.n	8011854 <HAL_UART_Receive+0x1a6>
  }
  else
  {
    return HAL_BUSY;
 8011852:	2302      	movs	r3, #2
  }
}
 8011854:	4618      	mov	r0, r3
 8011856:	3720      	adds	r7, #32
 8011858:	46bd      	mov	sp, r7
 801185a:	bd80      	pop	{r7, pc}

0801185c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801185c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011860:	b094      	sub	sp, #80	; 0x50
 8011862:	af00      	add	r7, sp, #0
 8011864:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8011866:	2300      	movs	r3, #0
 8011868:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 801186c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801186e:	681a      	ldr	r2, [r3, #0]
 8011870:	4b7e      	ldr	r3, [pc, #504]	; (8011a6c <UART_SetConfig+0x210>)
 8011872:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8011874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011876:	689a      	ldr	r2, [r3, #8]
 8011878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801187a:	691b      	ldr	r3, [r3, #16]
 801187c:	431a      	orrs	r2, r3
 801187e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011880:	695b      	ldr	r3, [r3, #20]
 8011882:	431a      	orrs	r2, r3
 8011884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011886:	69db      	ldr	r3, [r3, #28]
 8011888:	4313      	orrs	r3, r2
 801188a:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801188c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801188e:	681b      	ldr	r3, [r3, #0]
 8011890:	681b      	ldr	r3, [r3, #0]
 8011892:	4977      	ldr	r1, [pc, #476]	; (8011a70 <UART_SetConfig+0x214>)
 8011894:	4019      	ands	r1, r3
 8011896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011898:	681a      	ldr	r2, [r3, #0]
 801189a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801189c:	430b      	orrs	r3, r1
 801189e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80118a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118a2:	681b      	ldr	r3, [r3, #0]
 80118a4:	685b      	ldr	r3, [r3, #4]
 80118a6:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80118aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118ac:	68d9      	ldr	r1, [r3, #12]
 80118ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118b0:	681a      	ldr	r2, [r3, #0]
 80118b2:	ea40 0301 	orr.w	r3, r0, r1
 80118b6:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80118b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118ba:	699b      	ldr	r3, [r3, #24]
 80118bc:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80118be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118c0:	681a      	ldr	r2, [r3, #0]
 80118c2:	4b6a      	ldr	r3, [pc, #424]	; (8011a6c <UART_SetConfig+0x210>)
 80118c4:	429a      	cmp	r2, r3
 80118c6:	d009      	beq.n	80118dc <UART_SetConfig+0x80>
 80118c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118ca:	681a      	ldr	r2, [r3, #0]
 80118cc:	4b69      	ldr	r3, [pc, #420]	; (8011a74 <UART_SetConfig+0x218>)
 80118ce:	429a      	cmp	r2, r3
 80118d0:	d004      	beq.n	80118dc <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80118d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118d4:	6a1a      	ldr	r2, [r3, #32]
 80118d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80118d8:	4313      	orrs	r3, r2
 80118da:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80118dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118de:	681b      	ldr	r3, [r3, #0]
 80118e0:	689b      	ldr	r3, [r3, #8]
 80118e2:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 80118e6:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 80118ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118ec:	681a      	ldr	r2, [r3, #0]
 80118ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80118f0:	430b      	orrs	r3, r1
 80118f2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80118f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118f6:	681b      	ldr	r3, [r3, #0]
 80118f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118fa:	f023 000f 	bic.w	r0, r3, #15
 80118fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011900:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8011902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011904:	681a      	ldr	r2, [r3, #0]
 8011906:	ea40 0301 	orr.w	r3, r0, r1
 801190a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801190c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801190e:	681a      	ldr	r2, [r3, #0]
 8011910:	4b59      	ldr	r3, [pc, #356]	; (8011a78 <UART_SetConfig+0x21c>)
 8011912:	429a      	cmp	r2, r3
 8011914:	d102      	bne.n	801191c <UART_SetConfig+0xc0>
 8011916:	2301      	movs	r3, #1
 8011918:	64bb      	str	r3, [r7, #72]	; 0x48
 801191a:	e029      	b.n	8011970 <UART_SetConfig+0x114>
 801191c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801191e:	681a      	ldr	r2, [r3, #0]
 8011920:	4b56      	ldr	r3, [pc, #344]	; (8011a7c <UART_SetConfig+0x220>)
 8011922:	429a      	cmp	r2, r3
 8011924:	d102      	bne.n	801192c <UART_SetConfig+0xd0>
 8011926:	2302      	movs	r3, #2
 8011928:	64bb      	str	r3, [r7, #72]	; 0x48
 801192a:	e021      	b.n	8011970 <UART_SetConfig+0x114>
 801192c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801192e:	681a      	ldr	r2, [r3, #0]
 8011930:	4b53      	ldr	r3, [pc, #332]	; (8011a80 <UART_SetConfig+0x224>)
 8011932:	429a      	cmp	r2, r3
 8011934:	d102      	bne.n	801193c <UART_SetConfig+0xe0>
 8011936:	2304      	movs	r3, #4
 8011938:	64bb      	str	r3, [r7, #72]	; 0x48
 801193a:	e019      	b.n	8011970 <UART_SetConfig+0x114>
 801193c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801193e:	681a      	ldr	r2, [r3, #0]
 8011940:	4b50      	ldr	r3, [pc, #320]	; (8011a84 <UART_SetConfig+0x228>)
 8011942:	429a      	cmp	r2, r3
 8011944:	d102      	bne.n	801194c <UART_SetConfig+0xf0>
 8011946:	2308      	movs	r3, #8
 8011948:	64bb      	str	r3, [r7, #72]	; 0x48
 801194a:	e011      	b.n	8011970 <UART_SetConfig+0x114>
 801194c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801194e:	681a      	ldr	r2, [r3, #0]
 8011950:	4b4d      	ldr	r3, [pc, #308]	; (8011a88 <UART_SetConfig+0x22c>)
 8011952:	429a      	cmp	r2, r3
 8011954:	d102      	bne.n	801195c <UART_SetConfig+0x100>
 8011956:	2310      	movs	r3, #16
 8011958:	64bb      	str	r3, [r7, #72]	; 0x48
 801195a:	e009      	b.n	8011970 <UART_SetConfig+0x114>
 801195c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801195e:	681a      	ldr	r2, [r3, #0]
 8011960:	4b42      	ldr	r3, [pc, #264]	; (8011a6c <UART_SetConfig+0x210>)
 8011962:	429a      	cmp	r2, r3
 8011964:	d102      	bne.n	801196c <UART_SetConfig+0x110>
 8011966:	2320      	movs	r3, #32
 8011968:	64bb      	str	r3, [r7, #72]	; 0x48
 801196a:	e001      	b.n	8011970 <UART_SetConfig+0x114>
 801196c:	2300      	movs	r3, #0
 801196e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8011970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011972:	681a      	ldr	r2, [r3, #0]
 8011974:	4b3d      	ldr	r3, [pc, #244]	; (8011a6c <UART_SetConfig+0x210>)
 8011976:	429a      	cmp	r2, r3
 8011978:	d005      	beq.n	8011986 <UART_SetConfig+0x12a>
 801197a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801197c:	681a      	ldr	r2, [r3, #0]
 801197e:	4b3d      	ldr	r3, [pc, #244]	; (8011a74 <UART_SetConfig+0x218>)
 8011980:	429a      	cmp	r2, r3
 8011982:	f040 8085 	bne.w	8011a90 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8011986:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011988:	2200      	movs	r2, #0
 801198a:	623b      	str	r3, [r7, #32]
 801198c:	627a      	str	r2, [r7, #36]	; 0x24
 801198e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8011992:	f7fd f889 	bl	800eaa8 <HAL_RCCEx_GetPeriphCLKFreq>
 8011996:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8011998:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801199a:	2b00      	cmp	r3, #0
 801199c:	f000 80e8 	beq.w	8011b70 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80119a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80119a4:	4a39      	ldr	r2, [pc, #228]	; (8011a8c <UART_SetConfig+0x230>)
 80119a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80119aa:	461a      	mov	r2, r3
 80119ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80119ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80119b2:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80119b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119b6:	685a      	ldr	r2, [r3, #4]
 80119b8:	4613      	mov	r3, r2
 80119ba:	005b      	lsls	r3, r3, #1
 80119bc:	4413      	add	r3, r2
 80119be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80119c0:	429a      	cmp	r2, r3
 80119c2:	d305      	bcc.n	80119d0 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80119c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119c6:	685b      	ldr	r3, [r3, #4]
 80119c8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80119ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80119cc:	429a      	cmp	r2, r3
 80119ce:	d903      	bls.n	80119d8 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 80119d0:	2301      	movs	r3, #1
 80119d2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80119d6:	e048      	b.n	8011a6a <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80119d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80119da:	2200      	movs	r2, #0
 80119dc:	61bb      	str	r3, [r7, #24]
 80119de:	61fa      	str	r2, [r7, #28]
 80119e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80119e4:	4a29      	ldr	r2, [pc, #164]	; (8011a8c <UART_SetConfig+0x230>)
 80119e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80119ea:	b29b      	uxth	r3, r3
 80119ec:	2200      	movs	r2, #0
 80119ee:	613b      	str	r3, [r7, #16]
 80119f0:	617a      	str	r2, [r7, #20]
 80119f2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80119f6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80119fa:	f7ef f953 	bl	8000ca4 <__aeabi_uldivmod>
 80119fe:	4602      	mov	r2, r0
 8011a00:	460b      	mov	r3, r1
 8011a02:	4610      	mov	r0, r2
 8011a04:	4619      	mov	r1, r3
 8011a06:	f04f 0200 	mov.w	r2, #0
 8011a0a:	f04f 0300 	mov.w	r3, #0
 8011a0e:	020b      	lsls	r3, r1, #8
 8011a10:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8011a14:	0202      	lsls	r2, r0, #8
 8011a16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011a18:	6849      	ldr	r1, [r1, #4]
 8011a1a:	0849      	lsrs	r1, r1, #1
 8011a1c:	2000      	movs	r0, #0
 8011a1e:	460c      	mov	r4, r1
 8011a20:	4605      	mov	r5, r0
 8011a22:	eb12 0804 	adds.w	r8, r2, r4
 8011a26:	eb43 0905 	adc.w	r9, r3, r5
 8011a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a2c:	685b      	ldr	r3, [r3, #4]
 8011a2e:	2200      	movs	r2, #0
 8011a30:	60bb      	str	r3, [r7, #8]
 8011a32:	60fa      	str	r2, [r7, #12]
 8011a34:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8011a38:	4640      	mov	r0, r8
 8011a3a:	4649      	mov	r1, r9
 8011a3c:	f7ef f932 	bl	8000ca4 <__aeabi_uldivmod>
 8011a40:	4602      	mov	r2, r0
 8011a42:	460b      	mov	r3, r1
 8011a44:	4613      	mov	r3, r2
 8011a46:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8011a48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011a4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011a4e:	d308      	bcc.n	8011a62 <UART_SetConfig+0x206>
 8011a50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011a52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011a56:	d204      	bcs.n	8011a62 <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 8011a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a5a:	681b      	ldr	r3, [r3, #0]
 8011a5c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011a5e:	60da      	str	r2, [r3, #12]
 8011a60:	e003      	b.n	8011a6a <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 8011a62:	2301      	movs	r3, #1
 8011a64:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 8011a68:	e082      	b.n	8011b70 <UART_SetConfig+0x314>
 8011a6a:	e081      	b.n	8011b70 <UART_SetConfig+0x314>
 8011a6c:	46002400 	.word	0x46002400
 8011a70:	cfff69f3 	.word	0xcfff69f3
 8011a74:	56002400 	.word	0x56002400
 8011a78:	40013800 	.word	0x40013800
 8011a7c:	40004400 	.word	0x40004400
 8011a80:	40004800 	.word	0x40004800
 8011a84:	40004c00 	.word	0x40004c00
 8011a88:	40005000 	.word	0x40005000
 8011a8c:	0801cdb4 	.word	0x0801cdb4
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a92:	69db      	ldr	r3, [r3, #28]
 8011a94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011a98:	d13c      	bne.n	8011b14 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8011a9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011a9c:	2200      	movs	r2, #0
 8011a9e:	603b      	str	r3, [r7, #0]
 8011aa0:	607a      	str	r2, [r7, #4]
 8011aa2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8011aa6:	f7fc ffff 	bl	800eaa8 <HAL_RCCEx_GetPeriphCLKFreq>
 8011aaa:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8011aac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011aae:	2b00      	cmp	r3, #0
 8011ab0:	d05e      	beq.n	8011b70 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ab6:	4a39      	ldr	r2, [pc, #228]	; (8011b9c <UART_SetConfig+0x340>)
 8011ab8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011abc:	461a      	mov	r2, r3
 8011abe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011ac0:	fbb3 f3f2 	udiv	r3, r3, r2
 8011ac4:	005a      	lsls	r2, r3, #1
 8011ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ac8:	685b      	ldr	r3, [r3, #4]
 8011aca:	085b      	lsrs	r3, r3, #1
 8011acc:	441a      	add	r2, r3
 8011ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ad0:	685b      	ldr	r3, [r3, #4]
 8011ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8011ad6:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011ad8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011ada:	2b0f      	cmp	r3, #15
 8011adc:	d916      	bls.n	8011b0c <UART_SetConfig+0x2b0>
 8011ade:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011ae0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011ae4:	d212      	bcs.n	8011b0c <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8011ae6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011ae8:	b29b      	uxth	r3, r3
 8011aea:	f023 030f 	bic.w	r3, r3, #15
 8011aee:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011af0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011af2:	085b      	lsrs	r3, r3, #1
 8011af4:	b29b      	uxth	r3, r3
 8011af6:	f003 0307 	and.w	r3, r3, #7
 8011afa:	b29a      	uxth	r2, r3
 8011afc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011afe:	4313      	orrs	r3, r2
 8011b00:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 8011b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b04:	681b      	ldr	r3, [r3, #0]
 8011b06:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011b08:	60da      	str	r2, [r3, #12]
 8011b0a:	e031      	b.n	8011b70 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8011b0c:	2301      	movs	r3, #1
 8011b0e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8011b12:	e02d      	b.n	8011b70 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8011b14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011b16:	2200      	movs	r2, #0
 8011b18:	469a      	mov	sl, r3
 8011b1a:	4693      	mov	fp, r2
 8011b1c:	4650      	mov	r0, sl
 8011b1e:	4659      	mov	r1, fp
 8011b20:	f7fc ffc2 	bl	800eaa8 <HAL_RCCEx_GetPeriphCLKFreq>
 8011b24:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 8011b26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011b28:	2b00      	cmp	r3, #0
 8011b2a:	d021      	beq.n	8011b70 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b30:	4a1a      	ldr	r2, [pc, #104]	; (8011b9c <UART_SetConfig+0x340>)
 8011b32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011b36:	461a      	mov	r2, r3
 8011b38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011b3a:	fbb3 f2f2 	udiv	r2, r3, r2
 8011b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b40:	685b      	ldr	r3, [r3, #4]
 8011b42:	085b      	lsrs	r3, r3, #1
 8011b44:	441a      	add	r2, r3
 8011b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b48:	685b      	ldr	r3, [r3, #4]
 8011b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8011b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011b50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011b52:	2b0f      	cmp	r3, #15
 8011b54:	d909      	bls.n	8011b6a <UART_SetConfig+0x30e>
 8011b56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011b58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011b5c:	d205      	bcs.n	8011b6a <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8011b5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011b60:	b29a      	uxth	r2, r3
 8011b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b64:	681b      	ldr	r3, [r3, #0]
 8011b66:	60da      	str	r2, [r3, #12]
 8011b68:	e002      	b.n	8011b70 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8011b6a:	2301      	movs	r3, #1
 8011b6c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8011b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b72:	2201      	movs	r2, #1
 8011b74:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8011b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b7a:	2201      	movs	r2, #1
 8011b7c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8011b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b82:	2200      	movs	r2, #0
 8011b84:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8011b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b88:	2200      	movs	r2, #0
 8011b8a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8011b8c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8011b90:	4618      	mov	r0, r3
 8011b92:	3750      	adds	r7, #80	; 0x50
 8011b94:	46bd      	mov	sp, r7
 8011b96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011b9a:	bf00      	nop
 8011b9c:	0801cdb4 	.word	0x0801cdb4

08011ba0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8011ba0:	b480      	push	{r7}
 8011ba2:	b083      	sub	sp, #12
 8011ba4:	af00      	add	r7, sp, #0
 8011ba6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011bac:	f003 0308 	and.w	r3, r3, #8
 8011bb0:	2b00      	cmp	r3, #0
 8011bb2:	d00a      	beq.n	8011bca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	681b      	ldr	r3, [r3, #0]
 8011bb8:	685b      	ldr	r3, [r3, #4]
 8011bba:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	681b      	ldr	r3, [r3, #0]
 8011bc6:	430a      	orrs	r2, r1
 8011bc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011bce:	f003 0301 	and.w	r3, r3, #1
 8011bd2:	2b00      	cmp	r3, #0
 8011bd4:	d00a      	beq.n	8011bec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	681b      	ldr	r3, [r3, #0]
 8011bda:	685b      	ldr	r3, [r3, #4]
 8011bdc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	681b      	ldr	r3, [r3, #0]
 8011be8:	430a      	orrs	r2, r1
 8011bea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011bf0:	f003 0302 	and.w	r3, r3, #2
 8011bf4:	2b00      	cmp	r3, #0
 8011bf6:	d00a      	beq.n	8011c0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	681b      	ldr	r3, [r3, #0]
 8011bfc:	685b      	ldr	r3, [r3, #4]
 8011bfe:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011c06:	687b      	ldr	r3, [r7, #4]
 8011c08:	681b      	ldr	r3, [r3, #0]
 8011c0a:	430a      	orrs	r2, r1
 8011c0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011c12:	f003 0304 	and.w	r3, r3, #4
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	d00a      	beq.n	8011c30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	681b      	ldr	r3, [r3, #0]
 8011c1e:	685b      	ldr	r3, [r3, #4]
 8011c20:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	681b      	ldr	r3, [r3, #0]
 8011c2c:	430a      	orrs	r2, r1
 8011c2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011c34:	f003 0310 	and.w	r3, r3, #16
 8011c38:	2b00      	cmp	r3, #0
 8011c3a:	d00a      	beq.n	8011c52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	681b      	ldr	r3, [r3, #0]
 8011c40:	689b      	ldr	r3, [r3, #8]
 8011c42:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	681b      	ldr	r3, [r3, #0]
 8011c4e:	430a      	orrs	r2, r1
 8011c50:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011c56:	f003 0320 	and.w	r3, r3, #32
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	d00a      	beq.n	8011c74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	681b      	ldr	r3, [r3, #0]
 8011c62:	689b      	ldr	r3, [r3, #8]
 8011c64:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	681b      	ldr	r3, [r3, #0]
 8011c70:	430a      	orrs	r2, r1
 8011c72:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011c78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011c7c:	2b00      	cmp	r3, #0
 8011c7e:	d01a      	beq.n	8011cb6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	681b      	ldr	r3, [r3, #0]
 8011c84:	685b      	ldr	r3, [r3, #4]
 8011c86:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	681b      	ldr	r3, [r3, #0]
 8011c92:	430a      	orrs	r2, r1
 8011c94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011c9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011c9e:	d10a      	bne.n	8011cb6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	681b      	ldr	r3, [r3, #0]
 8011ca4:	685b      	ldr	r3, [r3, #4]
 8011ca6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	681b      	ldr	r3, [r3, #0]
 8011cb2:	430a      	orrs	r2, r1
 8011cb4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011cba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011cbe:	2b00      	cmp	r3, #0
 8011cc0:	d00a      	beq.n	8011cd8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	681b      	ldr	r3, [r3, #0]
 8011cc6:	685b      	ldr	r3, [r3, #4]
 8011cc8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011cd0:	687b      	ldr	r3, [r7, #4]
 8011cd2:	681b      	ldr	r3, [r3, #0]
 8011cd4:	430a      	orrs	r2, r1
 8011cd6:	605a      	str	r2, [r3, #4]
  }
}
 8011cd8:	bf00      	nop
 8011cda:	370c      	adds	r7, #12
 8011cdc:	46bd      	mov	sp, r7
 8011cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ce2:	4770      	bx	lr

08011ce4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011ce4:	b580      	push	{r7, lr}
 8011ce6:	b098      	sub	sp, #96	; 0x60
 8011ce8:	af02      	add	r7, sp, #8
 8011cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	2200      	movs	r2, #0
 8011cf0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011cf4:	f7f8 f848 	bl	8009d88 <HAL_GetTick>
 8011cf8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	681b      	ldr	r3, [r3, #0]
 8011cfe:	681b      	ldr	r3, [r3, #0]
 8011d00:	f003 0308 	and.w	r3, r3, #8
 8011d04:	2b08      	cmp	r3, #8
 8011d06:	d12f      	bne.n	8011d68 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011d08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011d0c:	9300      	str	r3, [sp, #0]
 8011d0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011d10:	2200      	movs	r2, #0
 8011d12:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011d16:	6878      	ldr	r0, [r7, #4]
 8011d18:	f000 f88e 	bl	8011e38 <UART_WaitOnFlagUntilTimeout>
 8011d1c:	4603      	mov	r3, r0
 8011d1e:	2b00      	cmp	r3, #0
 8011d20:	d022      	beq.n	8011d68 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	681b      	ldr	r3, [r3, #0]
 8011d26:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d2a:	e853 3f00 	ldrex	r3, [r3]
 8011d2e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011d30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011d36:	653b      	str	r3, [r7, #80]	; 0x50
 8011d38:	687b      	ldr	r3, [r7, #4]
 8011d3a:	681b      	ldr	r3, [r3, #0]
 8011d3c:	461a      	mov	r2, r3
 8011d3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011d40:	647b      	str	r3, [r7, #68]	; 0x44
 8011d42:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d44:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011d46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011d48:	e841 2300 	strex	r3, r2, [r1]
 8011d4c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011d4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011d50:	2b00      	cmp	r3, #0
 8011d52:	d1e6      	bne.n	8011d22 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	2220      	movs	r2, #32
 8011d58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	2200      	movs	r2, #0
 8011d60:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011d64:	2303      	movs	r3, #3
 8011d66:	e063      	b.n	8011e30 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	681b      	ldr	r3, [r3, #0]
 8011d6c:	681b      	ldr	r3, [r3, #0]
 8011d6e:	f003 0304 	and.w	r3, r3, #4
 8011d72:	2b04      	cmp	r3, #4
 8011d74:	d149      	bne.n	8011e0a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011d76:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011d7a:	9300      	str	r3, [sp, #0]
 8011d7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011d7e:	2200      	movs	r2, #0
 8011d80:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8011d84:	6878      	ldr	r0, [r7, #4]
 8011d86:	f000 f857 	bl	8011e38 <UART_WaitOnFlagUntilTimeout>
 8011d8a:	4603      	mov	r3, r0
 8011d8c:	2b00      	cmp	r3, #0
 8011d8e:	d03c      	beq.n	8011e0a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	681b      	ldr	r3, [r3, #0]
 8011d94:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d98:	e853 3f00 	ldrex	r3, [r3]
 8011d9c:	623b      	str	r3, [r7, #32]
   return(result);
 8011d9e:	6a3b      	ldr	r3, [r7, #32]
 8011da0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011da4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	681b      	ldr	r3, [r3, #0]
 8011daa:	461a      	mov	r2, r3
 8011dac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011dae:	633b      	str	r3, [r7, #48]	; 0x30
 8011db0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011db2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011db4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011db6:	e841 2300 	strex	r3, r2, [r1]
 8011dba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011dbe:	2b00      	cmp	r3, #0
 8011dc0:	d1e6      	bne.n	8011d90 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	681b      	ldr	r3, [r3, #0]
 8011dc6:	3308      	adds	r3, #8
 8011dc8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011dca:	693b      	ldr	r3, [r7, #16]
 8011dcc:	e853 3f00 	ldrex	r3, [r3]
 8011dd0:	60fb      	str	r3, [r7, #12]
   return(result);
 8011dd2:	68fb      	ldr	r3, [r7, #12]
 8011dd4:	f023 0301 	bic.w	r3, r3, #1
 8011dd8:	64bb      	str	r3, [r7, #72]	; 0x48
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	681b      	ldr	r3, [r3, #0]
 8011dde:	3308      	adds	r3, #8
 8011de0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011de2:	61fa      	str	r2, [r7, #28]
 8011de4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011de6:	69b9      	ldr	r1, [r7, #24]
 8011de8:	69fa      	ldr	r2, [r7, #28]
 8011dea:	e841 2300 	strex	r3, r2, [r1]
 8011dee:	617b      	str	r3, [r7, #20]
   return(result);
 8011df0:	697b      	ldr	r3, [r7, #20]
 8011df2:	2b00      	cmp	r3, #0
 8011df4:	d1e5      	bne.n	8011dc2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	2220      	movs	r2, #32
 8011dfa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	2200      	movs	r2, #0
 8011e02:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011e06:	2303      	movs	r3, #3
 8011e08:	e012      	b.n	8011e30 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	2220      	movs	r2, #32
 8011e0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	2220      	movs	r2, #32
 8011e16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	2200      	movs	r2, #0
 8011e1e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	2200      	movs	r2, #0
 8011e24:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	2200      	movs	r2, #0
 8011e2a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011e2e:	2300      	movs	r3, #0
}
 8011e30:	4618      	mov	r0, r3
 8011e32:	3758      	adds	r7, #88	; 0x58
 8011e34:	46bd      	mov	sp, r7
 8011e36:	bd80      	pop	{r7, pc}

08011e38 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011e38:	b580      	push	{r7, lr}
 8011e3a:	b084      	sub	sp, #16
 8011e3c:	af00      	add	r7, sp, #0
 8011e3e:	60f8      	str	r0, [r7, #12]
 8011e40:	60b9      	str	r1, [r7, #8]
 8011e42:	603b      	str	r3, [r7, #0]
 8011e44:	4613      	mov	r3, r2
 8011e46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011e48:	e049      	b.n	8011ede <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011e4a:	69bb      	ldr	r3, [r7, #24]
 8011e4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011e50:	d045      	beq.n	8011ede <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011e52:	f7f7 ff99 	bl	8009d88 <HAL_GetTick>
 8011e56:	4602      	mov	r2, r0
 8011e58:	683b      	ldr	r3, [r7, #0]
 8011e5a:	1ad3      	subs	r3, r2, r3
 8011e5c:	69ba      	ldr	r2, [r7, #24]
 8011e5e:	429a      	cmp	r2, r3
 8011e60:	d302      	bcc.n	8011e68 <UART_WaitOnFlagUntilTimeout+0x30>
 8011e62:	69bb      	ldr	r3, [r7, #24]
 8011e64:	2b00      	cmp	r3, #0
 8011e66:	d101      	bne.n	8011e6c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8011e68:	2303      	movs	r3, #3
 8011e6a:	e048      	b.n	8011efe <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8011e6c:	68fb      	ldr	r3, [r7, #12]
 8011e6e:	681b      	ldr	r3, [r3, #0]
 8011e70:	681b      	ldr	r3, [r3, #0]
 8011e72:	f003 0304 	and.w	r3, r3, #4
 8011e76:	2b00      	cmp	r3, #0
 8011e78:	d031      	beq.n	8011ede <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8011e7a:	68fb      	ldr	r3, [r7, #12]
 8011e7c:	681b      	ldr	r3, [r3, #0]
 8011e7e:	69db      	ldr	r3, [r3, #28]
 8011e80:	f003 0308 	and.w	r3, r3, #8
 8011e84:	2b08      	cmp	r3, #8
 8011e86:	d110      	bne.n	8011eaa <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011e88:	68fb      	ldr	r3, [r7, #12]
 8011e8a:	681b      	ldr	r3, [r3, #0]
 8011e8c:	2208      	movs	r2, #8
 8011e8e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011e90:	68f8      	ldr	r0, [r7, #12]
 8011e92:	f000 f838 	bl	8011f06 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8011e96:	68fb      	ldr	r3, [r7, #12]
 8011e98:	2208      	movs	r2, #8
 8011e9a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011e9e:	68fb      	ldr	r3, [r7, #12]
 8011ea0:	2200      	movs	r2, #0
 8011ea2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8011ea6:	2301      	movs	r3, #1
 8011ea8:	e029      	b.n	8011efe <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011eaa:	68fb      	ldr	r3, [r7, #12]
 8011eac:	681b      	ldr	r3, [r3, #0]
 8011eae:	69db      	ldr	r3, [r3, #28]
 8011eb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011eb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011eb8:	d111      	bne.n	8011ede <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011eba:	68fb      	ldr	r3, [r7, #12]
 8011ebc:	681b      	ldr	r3, [r3, #0]
 8011ebe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011ec2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011ec4:	68f8      	ldr	r0, [r7, #12]
 8011ec6:	f000 f81e 	bl	8011f06 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011eca:	68fb      	ldr	r3, [r7, #12]
 8011ecc:	2220      	movs	r2, #32
 8011ece:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011ed2:	68fb      	ldr	r3, [r7, #12]
 8011ed4:	2200      	movs	r2, #0
 8011ed6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8011eda:	2303      	movs	r3, #3
 8011edc:	e00f      	b.n	8011efe <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011ede:	68fb      	ldr	r3, [r7, #12]
 8011ee0:	681b      	ldr	r3, [r3, #0]
 8011ee2:	69da      	ldr	r2, [r3, #28]
 8011ee4:	68bb      	ldr	r3, [r7, #8]
 8011ee6:	4013      	ands	r3, r2
 8011ee8:	68ba      	ldr	r2, [r7, #8]
 8011eea:	429a      	cmp	r2, r3
 8011eec:	bf0c      	ite	eq
 8011eee:	2301      	moveq	r3, #1
 8011ef0:	2300      	movne	r3, #0
 8011ef2:	b2db      	uxtb	r3, r3
 8011ef4:	461a      	mov	r2, r3
 8011ef6:	79fb      	ldrb	r3, [r7, #7]
 8011ef8:	429a      	cmp	r2, r3
 8011efa:	d0a6      	beq.n	8011e4a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011efc:	2300      	movs	r3, #0
}
 8011efe:	4618      	mov	r0, r3
 8011f00:	3710      	adds	r7, #16
 8011f02:	46bd      	mov	sp, r7
 8011f04:	bd80      	pop	{r7, pc}

08011f06 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011f06:	b480      	push	{r7}
 8011f08:	b095      	sub	sp, #84	; 0x54
 8011f0a:	af00      	add	r7, sp, #0
 8011f0c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	681b      	ldr	r3, [r3, #0]
 8011f12:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f16:	e853 3f00 	ldrex	r3, [r3]
 8011f1a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f1e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011f22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	681b      	ldr	r3, [r3, #0]
 8011f28:	461a      	mov	r2, r3
 8011f2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011f2c:	643b      	str	r3, [r7, #64]	; 0x40
 8011f2e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f30:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011f32:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011f34:	e841 2300 	strex	r3, r2, [r1]
 8011f38:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d1e6      	bne.n	8011f0e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	681b      	ldr	r3, [r3, #0]
 8011f44:	3308      	adds	r3, #8
 8011f46:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f48:	6a3b      	ldr	r3, [r7, #32]
 8011f4a:	e853 3f00 	ldrex	r3, [r3]
 8011f4e:	61fb      	str	r3, [r7, #28]
   return(result);
 8011f50:	69fb      	ldr	r3, [r7, #28]
 8011f52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011f56:	f023 0301 	bic.w	r3, r3, #1
 8011f5a:	64bb      	str	r3, [r7, #72]	; 0x48
 8011f5c:	687b      	ldr	r3, [r7, #4]
 8011f5e:	681b      	ldr	r3, [r3, #0]
 8011f60:	3308      	adds	r3, #8
 8011f62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011f64:	62fa      	str	r2, [r7, #44]	; 0x2c
 8011f66:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011f6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011f6c:	e841 2300 	strex	r3, r2, [r1]
 8011f70:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f74:	2b00      	cmp	r3, #0
 8011f76:	d1e3      	bne.n	8011f40 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011f7c:	2b01      	cmp	r3, #1
 8011f7e:	d118      	bne.n	8011fb2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	681b      	ldr	r3, [r3, #0]
 8011f84:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f86:	68fb      	ldr	r3, [r7, #12]
 8011f88:	e853 3f00 	ldrex	r3, [r3]
 8011f8c:	60bb      	str	r3, [r7, #8]
   return(result);
 8011f8e:	68bb      	ldr	r3, [r7, #8]
 8011f90:	f023 0310 	bic.w	r3, r3, #16
 8011f94:	647b      	str	r3, [r7, #68]	; 0x44
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	681b      	ldr	r3, [r3, #0]
 8011f9a:	461a      	mov	r2, r3
 8011f9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011f9e:	61bb      	str	r3, [r7, #24]
 8011fa0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011fa2:	6979      	ldr	r1, [r7, #20]
 8011fa4:	69ba      	ldr	r2, [r7, #24]
 8011fa6:	e841 2300 	strex	r3, r2, [r1]
 8011faa:	613b      	str	r3, [r7, #16]
   return(result);
 8011fac:	693b      	ldr	r3, [r7, #16]
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	d1e6      	bne.n	8011f80 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	2220      	movs	r2, #32
 8011fb6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	2200      	movs	r2, #0
 8011fbe:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	2200      	movs	r2, #0
 8011fc4:	675a      	str	r2, [r3, #116]	; 0x74
}
 8011fc6:	bf00      	nop
 8011fc8:	3754      	adds	r7, #84	; 0x54
 8011fca:	46bd      	mov	sp, r7
 8011fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fd0:	4770      	bx	lr

08011fd2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8011fd2:	b480      	push	{r7}
 8011fd4:	b085      	sub	sp, #20
 8011fd6:	af00      	add	r7, sp, #0
 8011fd8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8011fe0:	2b01      	cmp	r3, #1
 8011fe2:	d101      	bne.n	8011fe8 <HAL_UARTEx_DisableFifoMode+0x16>
 8011fe4:	2302      	movs	r3, #2
 8011fe6:	e027      	b.n	8012038 <HAL_UARTEx_DisableFifoMode+0x66>
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	2201      	movs	r2, #1
 8011fec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	2224      	movs	r2, #36	; 0x24
 8011ff4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	681b      	ldr	r3, [r3, #0]
 8011ffc:	681b      	ldr	r3, [r3, #0]
 8011ffe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	681b      	ldr	r3, [r3, #0]
 8012004:	681a      	ldr	r2, [r3, #0]
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	681b      	ldr	r3, [r3, #0]
 801200a:	f022 0201 	bic.w	r2, r2, #1
 801200e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8012010:	68fb      	ldr	r3, [r7, #12]
 8012012:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8012016:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	2200      	movs	r2, #0
 801201c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	681b      	ldr	r3, [r3, #0]
 8012022:	68fa      	ldr	r2, [r7, #12]
 8012024:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	2220      	movs	r2, #32
 801202a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	2200      	movs	r2, #0
 8012032:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012036:	2300      	movs	r3, #0
}
 8012038:	4618      	mov	r0, r3
 801203a:	3714      	adds	r7, #20
 801203c:	46bd      	mov	sp, r7
 801203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012042:	4770      	bx	lr

08012044 <net_ntoa_r>:
  * @param buf: buffer to fill with string corresponding to the given IP address
  * @param buflen: the length of the given buffer to fill
  * @return IPv4 address string, like "192.168.1.10"
  */
char_t *net_ntoa_r(const net_ip_addr_t *addr, char_t *buf, int32_t buflen)
{
 8012044:	b480      	push	{r7}
 8012046:	b08b      	sub	sp, #44	; 0x2c
 8012048:	af00      	add	r7, sp, #0
 801204a:	60f8      	str	r0, [r7, #12]
 801204c:	60b9      	str	r1, [r7, #8]
 801204e:	607a      	str	r2, [r7, #4]
  char_t inv[3];
  int32_t len = 0;
 8012050:	2300      	movs	r3, #0
 8012052:	627b      	str	r3, [r7, #36]	; 0x24
  char_t *buf_ret = NULL;
 8012054:	2300      	movs	r3, #0
 8012056:	623b      	str	r3, [r7, #32]
  const uint32_t addr_32bits = addr->addr;
 8012058:	68fb      	ldr	r3, [r7, #12]
 801205a:	681b      	ldr	r3, [r3, #0]
 801205c:	613b      	str	r3, [r7, #16]
  const uint8_t *ap = (const uint8_t *)&addr_32bits;
 801205e:	f107 0310 	add.w	r3, r7, #16
 8012062:	61bb      	str	r3, [r7, #24]

  for (uint8_t n = 0; n < (uint8_t) 4; n++)
 8012064:	2300      	movs	r3, #0
 8012066:	77fb      	strb	r3, [r7, #31]
 8012068:	e04e      	b.n	8012108 <net_ntoa_r+0xc4>
  {
    uint8_t i = 0;
 801206a:	2300      	movs	r3, #0
 801206c:	77bb      	strb	r3, [r7, #30]
    uint8_t val = ap[n];
 801206e:	7ffb      	ldrb	r3, [r7, #31]
 8012070:	69ba      	ldr	r2, [r7, #24]
 8012072:	4413      	add	r3, r2
 8012074:	781b      	ldrb	r3, [r3, #0]
 8012076:	777b      	strb	r3, [r7, #29]
    do
    {
      const uint8_t rem = val % 10U;
 8012078:	7f7a      	ldrb	r2, [r7, #29]
 801207a:	4b2e      	ldr	r3, [pc, #184]	; (8012134 <net_ntoa_r+0xf0>)
 801207c:	fba3 1302 	umull	r1, r3, r3, r2
 8012080:	08d9      	lsrs	r1, r3, #3
 8012082:	460b      	mov	r3, r1
 8012084:	009b      	lsls	r3, r3, #2
 8012086:	440b      	add	r3, r1
 8012088:	005b      	lsls	r3, r3, #1
 801208a:	1ad3      	subs	r3, r2, r3
 801208c:	75fb      	strb	r3, [r7, #23]
      val /=  10U;
 801208e:	7f7b      	ldrb	r3, [r7, #29]
 8012090:	4a28      	ldr	r2, [pc, #160]	; (8012134 <net_ntoa_r+0xf0>)
 8012092:	fba2 2303 	umull	r2, r3, r2, r3
 8012096:	08db      	lsrs	r3, r3, #3
 8012098:	777b      	strb	r3, [r7, #29]
      inv[i] = (char_t)'0' + rem;
 801209a:	7fbb      	ldrb	r3, [r7, #30]
 801209c:	7dfa      	ldrb	r2, [r7, #23]
 801209e:	3230      	adds	r2, #48	; 0x30
 80120a0:	b2d2      	uxtb	r2, r2
 80120a2:	3328      	adds	r3, #40	; 0x28
 80120a4:	443b      	add	r3, r7
 80120a6:	f803 2c14 	strb.w	r2, [r3, #-20]
      i++;
 80120aa:	7fbb      	ldrb	r3, [r7, #30]
 80120ac:	3301      	adds	r3, #1
 80120ae:	77bb      	strb	r3, [r7, #30]
    } while (val != 0U);
 80120b0:	7f7b      	ldrb	r3, [r7, #29]
 80120b2:	2b00      	cmp	r3, #0
 80120b4:	d1e0      	bne.n	8012078 <net_ntoa_r+0x34>

    while (i != 0U)
 80120b6:	e012      	b.n	80120de <net_ntoa_r+0x9a>
    {
      i--;
 80120b8:	7fbb      	ldrb	r3, [r7, #30]
 80120ba:	3b01      	subs	r3, #1
 80120bc:	77bb      	strb	r3, [r7, #30]
      if (len < buflen)
 80120be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	429a      	cmp	r2, r3
 80120c4:	da0b      	bge.n	80120de <net_ntoa_r+0x9a>
      {
        buf[len] = inv[i];
 80120c6:	7fba      	ldrb	r2, [r7, #30]
 80120c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120ca:	68b9      	ldr	r1, [r7, #8]
 80120cc:	440b      	add	r3, r1
 80120ce:	3228      	adds	r2, #40	; 0x28
 80120d0:	443a      	add	r2, r7
 80120d2:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80120d6:	701a      	strb	r2, [r3, #0]
        len++;
 80120d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120da:	3301      	adds	r3, #1
 80120dc:	627b      	str	r3, [r7, #36]	; 0x24
    while (i != 0U)
 80120de:	7fbb      	ldrb	r3, [r7, #30]
 80120e0:	2b00      	cmp	r3, #0
 80120e2:	d1e9      	bne.n	80120b8 <net_ntoa_r+0x74>
      }
    }

    if ((n < 3U) && (len < buflen))
 80120e4:	7ffb      	ldrb	r3, [r7, #31]
 80120e6:	2b02      	cmp	r3, #2
 80120e8:	d80b      	bhi.n	8012102 <net_ntoa_r+0xbe>
 80120ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	429a      	cmp	r2, r3
 80120f0:	da07      	bge.n	8012102 <net_ntoa_r+0xbe>
    {
      buf[len] = (char_t) '.';
 80120f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120f4:	68ba      	ldr	r2, [r7, #8]
 80120f6:	4413      	add	r3, r2
 80120f8:	222e      	movs	r2, #46	; 0x2e
 80120fa:	701a      	strb	r2, [r3, #0]
      len++;
 80120fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120fe:	3301      	adds	r3, #1
 8012100:	627b      	str	r3, [r7, #36]	; 0x24
  for (uint8_t n = 0; n < (uint8_t) 4; n++)
 8012102:	7ffb      	ldrb	r3, [r7, #31]
 8012104:	3301      	adds	r3, #1
 8012106:	77fb      	strb	r3, [r7, #31]
 8012108:	7ffb      	ldrb	r3, [r7, #31]
 801210a:	2b03      	cmp	r3, #3
 801210c:	d9ad      	bls.n	801206a <net_ntoa_r+0x26>
    }
  }

  if (len < buflen)
 801210e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	429a      	cmp	r2, r3
 8012114:	da06      	bge.n	8012124 <net_ntoa_r+0xe0>
  {
    buf[len] = (char_t) '\0';
 8012116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012118:	68ba      	ldr	r2, [r7, #8]
 801211a:	4413      	add	r3, r2
 801211c:	2200      	movs	r2, #0
 801211e:	701a      	strb	r2, [r3, #0]
    buf_ret = buf;
 8012120:	68bb      	ldr	r3, [r7, #8]
 8012122:	623b      	str	r3, [r7, #32]
  }

  return buf_ret;
 8012124:	6a3b      	ldr	r3, [r7, #32]
}
 8012126:	4618      	mov	r0, r3
 8012128:	372c      	adds	r7, #44	; 0x2c
 801212a:	46bd      	mov	sp, r7
 801212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012130:	4770      	bx	lr
 8012132:	bf00      	nop
 8012134:	cccccccd 	.word	0xcccccccd

08012138 <net_ntoa>:
  * @brief  Convert IPv4 address from structure to string
  * @param  addr: an IP address structure
  * @retval IP address as a string
  */
char_t *net_ntoa(const net_ip_addr_t *addr)
{
 8012138:	b580      	push	{r7, lr}
 801213a:	b082      	sub	sp, #8
 801213c:	af00      	add	r7, sp, #0
 801213e:	6078      	str	r0, [r7, #4]
  static char_t str[16];

  memset(str, 0, sizeof(str));
 8012140:	2210      	movs	r2, #16
 8012142:	2100      	movs	r1, #0
 8012144:	4806      	ldr	r0, [pc, #24]	; (8012160 <net_ntoa+0x28>)
 8012146:	f004 fcc9 	bl	8016adc <memset>

  return net_ntoa_r(addr, str, sizeof(str));
 801214a:	2210      	movs	r2, #16
 801214c:	4904      	ldr	r1, [pc, #16]	; (8012160 <net_ntoa+0x28>)
 801214e:	6878      	ldr	r0, [r7, #4]
 8012150:	f7ff ff78 	bl	8012044 <net_ntoa_r>
 8012154:	4603      	mov	r3, r0
}
 8012156:	4618      	mov	r0, r3
 8012158:	3708      	adds	r7, #8
 801215a:	46bd      	mov	sp, r7
 801215c:	bd80      	pop	{r7, pc}
 801215e:	bf00      	nop
 8012160:	20003258 	.word	0x20003258

08012164 <net_set_port>:
  * @param  pAddr: a socket structure
  * @param  Port: the port value
  * @retval
  */
void net_set_port(net_sockaddr_t *pAddr, uint16_t Port)
{
 8012164:	b480      	push	{r7}
 8012166:	b083      	sub	sp, #12
 8012168:	af00      	add	r7, sp, #0
 801216a:	6078      	str	r0, [r7, #4]
 801216c:	460b      	mov	r3, r1
 801216e:	807b      	strh	r3, [r7, #2]
  }
  else

#endif /* NET_USE_IPV6 */
  {
    ((net_sockaddr_in_t *)pAddr)->sin_port = NET_HTONS(Port);
 8012170:	887b      	ldrh	r3, [r7, #2]
 8012172:	ba5b      	rev16	r3, r3
 8012174:	b29a      	uxth	r2, r3
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	805a      	strh	r2, [r3, #2]
  }
}
 801217a:	bf00      	nop
 801217c:	370c      	adds	r7, #12
 801217e:	46bd      	mov	sp, r7
 8012180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012184:	4770      	bx	lr

08012186 <net_get_ip_addr>:
  * @brief  Function description
  * @param  pAddr: a socket structure
  * @retval IP address value
  */
net_ip_addr_t net_get_ip_addr(const net_sockaddr_t *pAddr)
{
 8012186:	b480      	push	{r7}
 8012188:	b085      	sub	sp, #20
 801218a:	af00      	add	r7, sp, #0
 801218c:	6078      	str	r0, [r7, #4]
  net_ip_addr_t ip_addr = {0};
 801218e:	2300      	movs	r3, #0
 8012190:	60bb      	str	r3, [r7, #8]
    inet6_addr_to_ip6addr(&ip_addr.u_addr.ip6, &p_s_addr_in6->sin6_addr);
  }
  else
#endif /* NET_USE_IPV6 */
  {
    const net_sockaddr_in_t *const p_s_addr_in = (const net_sockaddr_in_t *)pAddr;
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	60fb      	str	r3, [r7, #12]

#ifdef NET_USE_LWIP_DEFINITIONS
    ip_addr.u_addr.ip4.addr = p_s_addr_in->sin_addr.s_addr;
#else
    ip_addr.addr = p_s_addr_in->sin_addr.s_addr;
 8012196:	68fb      	ldr	r3, [r7, #12]
 8012198:	685b      	ldr	r3, [r3, #4]
 801219a:	60bb      	str	r3, [r7, #8]
#endif /* NET_USE_LWIP_DEFINITIONS */
  }

  return ip_addr;
 801219c:	68bb      	ldr	r3, [r7, #8]
}
 801219e:	4618      	mov	r0, r3
 80121a0:	3714      	adds	r7, #20
 80121a2:	46bd      	mov	sp, r7
 80121a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121a8:	4770      	bx	lr

080121aa <net_wifi_get_class>:

/*static*/ const char *NO_NETWORK_INTERFACE_DEFINED = "No network interface defined\n";


net_interface_class_t net_wifi_get_class(net_if_handle_t *pnetif)
{
 80121aa:	b480      	push	{r7}
 80121ac:	b083      	sub	sp, #12
 80121ae:	af00      	add	r7, sp, #0
 80121b0:	6078      	str	r0, [r7, #4]
  return pnetif->pdrv->if_class;
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80121b8:	781b      	ldrb	r3, [r3, #0]
}
 80121ba:	4618      	mov	r0, r3
 80121bc:	370c      	adds	r7, #12
 80121be:	46bd      	mov	sp, r7
 80121c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121c4:	4770      	bx	lr
	...

080121c8 <net_wifi_security_to_string>:
  * @brief  Convert WiFi security enumerated value to string
  * @param  sec is an unsigned integer
  * @retval a constant string, for instance "Open" or "WPA2-AES"
  */
const char_t *net_wifi_security_to_string(uint32_t sec)
{
 80121c8:	b480      	push	{r7}
 80121ca:	b085      	sub	sp, #20
 80121cc:	af00      	add	r7, sp, #0
 80121ce:	6078      	str	r0, [r7, #4]
  const char_t *s;
  if (sec == NET_WIFI_SM_OPEN)
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	2b00      	cmp	r3, #0
 80121d4:	d102      	bne.n	80121dc <net_wifi_security_to_string+0x14>
  {
    s = "Open";
 80121d6:	4b45      	ldr	r3, [pc, #276]	; (80122ec <net_wifi_security_to_string+0x124>)
 80121d8:	60fb      	str	r3, [r7, #12]
 80121da:	e080      	b.n	80122de <net_wifi_security_to_string+0x116>
  }
  else if (sec == NET_WIFI_SM_WEP_SHARED)
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	f248 0201 	movw	r2, #32769	; 0x8001
 80121e2:	4293      	cmp	r3, r2
 80121e4:	d102      	bne.n	80121ec <net_wifi_security_to_string+0x24>
  {
    s = "WEP-shared";
 80121e6:	4b42      	ldr	r3, [pc, #264]	; (80122f0 <net_wifi_security_to_string+0x128>)
 80121e8:	60fb      	str	r3, [r7, #12]
 80121ea:	e078      	b.n	80122de <net_wifi_security_to_string+0x116>
  }
  else if (sec == NET_WIFI_SM_WPA_TKIP_PSK)
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	4a41      	ldr	r2, [pc, #260]	; (80122f4 <net_wifi_security_to_string+0x12c>)
 80121f0:	4293      	cmp	r3, r2
 80121f2:	d102      	bne.n	80121fa <net_wifi_security_to_string+0x32>
  {
    s = "WPA-TKIP";
 80121f4:	4b40      	ldr	r3, [pc, #256]	; (80122f8 <net_wifi_security_to_string+0x130>)
 80121f6:	60fb      	str	r3, [r7, #12]
 80121f8:	e071      	b.n	80122de <net_wifi_security_to_string+0x116>
  }
  else if (sec == NET_WIFI_SM_WPA_MIXED_PSK)
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	4a3f      	ldr	r2, [pc, #252]	; (80122fc <net_wifi_security_to_string+0x134>)
 80121fe:	4293      	cmp	r3, r2
 8012200:	d102      	bne.n	8012208 <net_wifi_security_to_string+0x40>
  {
    s = "WPA-Mixed";
 8012202:	4b3f      	ldr	r3, [pc, #252]	; (8012300 <net_wifi_security_to_string+0x138>)
 8012204:	60fb      	str	r3, [r7, #12]
 8012206:	e06a      	b.n	80122de <net_wifi_security_to_string+0x116>
  }
  else if (sec == NET_WIFI_SM_WPA2_AES_PSK)
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	4a3e      	ldr	r2, [pc, #248]	; (8012304 <net_wifi_security_to_string+0x13c>)
 801220c:	4293      	cmp	r3, r2
 801220e:	d102      	bne.n	8012216 <net_wifi_security_to_string+0x4e>
  {
    s = "WPA2-AES";
 8012210:	4b3d      	ldr	r3, [pc, #244]	; (8012308 <net_wifi_security_to_string+0x140>)
 8012212:	60fb      	str	r3, [r7, #12]
 8012214:	e063      	b.n	80122de <net_wifi_security_to_string+0x116>
  }
  else if (sec == NET_WIFI_SM_WPA2_TKIP_PSK)
 8012216:	687b      	ldr	r3, [r7, #4]
 8012218:	4a3c      	ldr	r2, [pc, #240]	; (801230c <net_wifi_security_to_string+0x144>)
 801221a:	4293      	cmp	r3, r2
 801221c:	d102      	bne.n	8012224 <net_wifi_security_to_string+0x5c>
  {
    s = "WPA2-TKIP";
 801221e:	4b3c      	ldr	r3, [pc, #240]	; (8012310 <net_wifi_security_to_string+0x148>)
 8012220:	60fb      	str	r3, [r7, #12]
 8012222:	e05c      	b.n	80122de <net_wifi_security_to_string+0x116>
  }
  else if (sec == NET_WIFI_SM_WPA2_MIXED_PSK)
 8012224:	687b      	ldr	r3, [r7, #4]
 8012226:	4a3b      	ldr	r2, [pc, #236]	; (8012314 <net_wifi_security_to_string+0x14c>)
 8012228:	4293      	cmp	r3, r2
 801222a:	d102      	bne.n	8012232 <net_wifi_security_to_string+0x6a>
  {
    s = "WPA2_Mixed";
 801222c:	4b3a      	ldr	r3, [pc, #232]	; (8012318 <net_wifi_security_to_string+0x150>)
 801222e:	60fb      	str	r3, [r7, #12]
 8012230:	e055      	b.n	80122de <net_wifi_security_to_string+0x116>
  }
  else if (sec == NET_WIFI_SM_WPA2_FBT_PSK)
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	4a39      	ldr	r2, [pc, #228]	; (801231c <net_wifi_security_to_string+0x154>)
 8012236:	4293      	cmp	r3, r2
 8012238:	d102      	bne.n	8012240 <net_wifi_security_to_string+0x78>
  {
    s = "WPA2-FBT";
 801223a:	4b39      	ldr	r3, [pc, #228]	; (8012320 <net_wifi_security_to_string+0x158>)
 801223c:	60fb      	str	r3, [r7, #12]
 801223e:	e04e      	b.n	80122de <net_wifi_security_to_string+0x116>
  }
  else if (sec == NET_WIFI_SM_WPA3_SAE)
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	4a38      	ldr	r2, [pc, #224]	; (8012324 <net_wifi_security_to_string+0x15c>)
 8012244:	4293      	cmp	r3, r2
 8012246:	d102      	bne.n	801224e <net_wifi_security_to_string+0x86>
  {
    s = "WPA3";
 8012248:	4b37      	ldr	r3, [pc, #220]	; (8012328 <net_wifi_security_to_string+0x160>)
 801224a:	60fb      	str	r3, [r7, #12]
 801224c:	e047      	b.n	80122de <net_wifi_security_to_string+0x116>
  }
  else if (sec == NET_WIFI_SM_WPA3_WPA2_PSK)
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	4a36      	ldr	r2, [pc, #216]	; (801232c <net_wifi_security_to_string+0x164>)
 8012252:	4293      	cmp	r3, r2
 8012254:	d102      	bne.n	801225c <net_wifi_security_to_string+0x94>
  {
    s = "WPA3-WPA2";
 8012256:	4b36      	ldr	r3, [pc, #216]	; (8012330 <net_wifi_security_to_string+0x168>)
 8012258:	60fb      	str	r3, [r7, #12]
 801225a:	e040      	b.n	80122de <net_wifi_security_to_string+0x116>
  }

  else if (sec == NET_WIFI_SM_WPA_TKIP_ENT)
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	4a35      	ldr	r2, [pc, #212]	; (8012334 <net_wifi_security_to_string+0x16c>)
 8012260:	4293      	cmp	r3, r2
 8012262:	d102      	bne.n	801226a <net_wifi_security_to_string+0xa2>
  {
    s = "WPA-TKIP-Ent";
 8012264:	4b34      	ldr	r3, [pc, #208]	; (8012338 <net_wifi_security_to_string+0x170>)
 8012266:	60fb      	str	r3, [r7, #12]
 8012268:	e039      	b.n	80122de <net_wifi_security_to_string+0x116>
  }
  else if (sec == NET_WIFI_SM_WPA_AES_ENT)
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	4a33      	ldr	r2, [pc, #204]	; (801233c <net_wifi_security_to_string+0x174>)
 801226e:	4293      	cmp	r3, r2
 8012270:	d102      	bne.n	8012278 <net_wifi_security_to_string+0xb0>
  {
    s = "WPA-AES-Ent";
 8012272:	4b33      	ldr	r3, [pc, #204]	; (8012340 <net_wifi_security_to_string+0x178>)
 8012274:	60fb      	str	r3, [r7, #12]
 8012276:	e032      	b.n	80122de <net_wifi_security_to_string+0x116>
  }
  else if (sec == NET_WIFI_SM_WPA2_TKIP_ENT)
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	4a32      	ldr	r2, [pc, #200]	; (8012344 <net_wifi_security_to_string+0x17c>)
 801227c:	4293      	cmp	r3, r2
 801227e:	d102      	bne.n	8012286 <net_wifi_security_to_string+0xbe>
  {
    s = "WPA2-TKIP-Ent";
 8012280:	4b31      	ldr	r3, [pc, #196]	; (8012348 <net_wifi_security_to_string+0x180>)
 8012282:	60fb      	str	r3, [r7, #12]
 8012284:	e02b      	b.n	80122de <net_wifi_security_to_string+0x116>
  }
  else if (sec == NET_WIFI_SM_WPA2_AES_ENT)
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	4a30      	ldr	r2, [pc, #192]	; (801234c <net_wifi_security_to_string+0x184>)
 801228a:	4293      	cmp	r3, r2
 801228c:	d102      	bne.n	8012294 <net_wifi_security_to_string+0xcc>
  {
    s = "WPA2-AES-Ent";
 801228e:	4b30      	ldr	r3, [pc, #192]	; (8012350 <net_wifi_security_to_string+0x188>)
 8012290:	60fb      	str	r3, [r7, #12]
 8012292:	e024      	b.n	80122de <net_wifi_security_to_string+0x116>
  }
  else if (sec == NET_WIFI_SM_WPA2_MIXED_ENT)
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	4a2f      	ldr	r2, [pc, #188]	; (8012354 <net_wifi_security_to_string+0x18c>)
 8012298:	4293      	cmp	r3, r2
 801229a:	d102      	bne.n	80122a2 <net_wifi_security_to_string+0xda>
  {
    s = "WPA2-Mixed-Ent";
 801229c:	4b2e      	ldr	r3, [pc, #184]	; (8012358 <net_wifi_security_to_string+0x190>)
 801229e:	60fb      	str	r3, [r7, #12]
 80122a0:	e01d      	b.n	80122de <net_wifi_security_to_string+0x116>
  }
  else if (sec == NET_WIFI_SM_WPA2_FBT_ENT)
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	4a2d      	ldr	r2, [pc, #180]	; (801235c <net_wifi_security_to_string+0x194>)
 80122a6:	4293      	cmp	r3, r2
 80122a8:	d102      	bne.n	80122b0 <net_wifi_security_to_string+0xe8>
  {
    s = "WPA-FBT-Ent";
 80122aa:	4b2d      	ldr	r3, [pc, #180]	; (8012360 <net_wifi_security_to_string+0x198>)
 80122ac:	60fb      	str	r3, [r7, #12]
 80122ae:	e016      	b.n	80122de <net_wifi_security_to_string+0x116>
  }

  else if (sec == NET_WIFI_SM_IBSS_OPEN)
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80122b6:	d102      	bne.n	80122be <net_wifi_security_to_string+0xf6>
  {
    s = "IBS";
 80122b8:	4b2a      	ldr	r3, [pc, #168]	; (8012364 <net_wifi_security_to_string+0x19c>)
 80122ba:	60fb      	str	r3, [r7, #12]
 80122bc:	e00f      	b.n	80122de <net_wifi_security_to_string+0x116>
  }
  else if (sec == NET_WIFI_SM_WPS_OPEN)
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80122c4:	d102      	bne.n	80122cc <net_wifi_security_to_string+0x104>
  {
    s = "WPS";
 80122c6:	4b28      	ldr	r3, [pc, #160]	; (8012368 <net_wifi_security_to_string+0x1a0>)
 80122c8:	60fb      	str	r3, [r7, #12]
 80122ca:	e008      	b.n	80122de <net_wifi_security_to_string+0x116>
  }
  else if (sec == NET_WIFI_SM_WPS_SECURE)
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	4a27      	ldr	r2, [pc, #156]	; (801236c <net_wifi_security_to_string+0x1a4>)
 80122d0:	4293      	cmp	r3, r2
 80122d2:	d102      	bne.n	80122da <net_wifi_security_to_string+0x112>
  {
    s = "WPS-AES";
 80122d4:	4b26      	ldr	r3, [pc, #152]	; (8012370 <net_wifi_security_to_string+0x1a8>)
 80122d6:	60fb      	str	r3, [r7, #12]
 80122d8:	e001      	b.n	80122de <net_wifi_security_to_string+0x116>
  }
  else
  {
    s = "unknown";
 80122da:	4b26      	ldr	r3, [pc, #152]	; (8012374 <net_wifi_security_to_string+0x1ac>)
 80122dc:	60fb      	str	r3, [r7, #12]
  }
  return s;
 80122de:	68fb      	ldr	r3, [r7, #12]
}
 80122e0:	4618      	mov	r0, r3
 80122e2:	3714      	adds	r7, #20
 80122e4:	46bd      	mov	sp, r7
 80122e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122ea:	4770      	bx	lr
 80122ec:	0801ab10 	.word	0x0801ab10
 80122f0:	0801ab18 	.word	0x0801ab18
 80122f4:	00200002 	.word	0x00200002
 80122f8:	0801ab24 	.word	0x0801ab24
 80122fc:	00200006 	.word	0x00200006
 8012300:	0801ab30 	.word	0x0801ab30
 8012304:	00400004 	.word	0x00400004
 8012308:	0801ab3c 	.word	0x0801ab3c
 801230c:	00400002 	.word	0x00400002
 8012310:	0801ab48 	.word	0x0801ab48
 8012314:	00400006 	.word	0x00400006
 8012318:	0801ab54 	.word	0x0801ab54
 801231c:	40400004 	.word	0x40400004
 8012320:	0801ab60 	.word	0x0801ab60
 8012324:	01000004 	.word	0x01000004
 8012328:	0801ab6c 	.word	0x0801ab6c
 801232c:	01400004 	.word	0x01400004
 8012330:	0801ab74 	.word	0x0801ab74
 8012334:	02200002 	.word	0x02200002
 8012338:	0801ab80 	.word	0x0801ab80
 801233c:	02200004 	.word	0x02200004
 8012340:	0801ab90 	.word	0x0801ab90
 8012344:	02400002 	.word	0x02400002
 8012348:	0801ab9c 	.word	0x0801ab9c
 801234c:	02400004 	.word	0x02400004
 8012350:	0801abac 	.word	0x0801abac
 8012354:	02400006 	.word	0x02400006
 8012358:	0801abbc 	.word	0x0801abbc
 801235c:	42400004 	.word	0x42400004
 8012360:	0801abcc 	.word	0x0801abcc
 8012364:	0801abd8 	.word	0x0801abd8
 8012368:	0801abdc 	.word	0x0801abdc
 801236c:	10000004 	.word	0x10000004
 8012370:	0801abe0 	.word	0x0801abe0
 8012374:	0801abe8 	.word	0x0801abe8

08012378 <net_wifi_scan>:
  * @param  ssid is a pointer to a string, when not null, scan searches only this SSID
  * @retval return the number of found access point, max value is "number".
  * This function is a synchronous function.
  */
int32_t net_wifi_scan(net_if_handle_t *pnetif, net_wifi_scan_mode_t mode, char *ssid)
{
 8012378:	b580      	push	{r7, lr}
 801237a:	b086      	sub	sp, #24
 801237c:	af00      	add	r7, sp, #0
 801237e:	60f8      	str	r0, [r7, #12]
 8012380:	460b      	mov	r3, r1
 8012382:	607a      	str	r2, [r7, #4]
 8012384:	72fb      	strb	r3, [r7, #11]
  int32_t ret = NET_OK;
 8012386:	2300      	movs	r3, #0
 8012388:	617b      	str	r3, [r7, #20]
  net_if_handle_t *const p_netif = netif_check(pnetif);
 801238a:	68f8      	ldr	r0, [r7, #12]
 801238c:	f000 f97a 	bl	8012684 <netif_check>
 8012390:	6138      	str	r0, [r7, #16]

  if (p_netif == NULL)
 8012392:	693b      	ldr	r3, [r7, #16]
 8012394:	2b00      	cmp	r3, #0
 8012396:	d111      	bne.n	80123bc <net_wifi_scan+0x44>
  {
    NET_DBG_ERROR("%s", NO_NETWORK_INTERFACE_DEFINED);
 8012398:	22e5      	movs	r2, #229	; 0xe5
 801239a:	4922      	ldr	r1, [pc, #136]	; (8012424 <net_wifi_scan+0xac>)
 801239c:	4822      	ldr	r0, [pc, #136]	; (8012428 <net_wifi_scan+0xb0>)
 801239e:	f004 fac9 	bl	8016934 <iprintf>
 80123a2:	4b22      	ldr	r3, [pc, #136]	; (801242c <net_wifi_scan+0xb4>)
 80123a4:	681b      	ldr	r3, [r3, #0]
 80123a6:	4619      	mov	r1, r3
 80123a8:	4821      	ldr	r0, [pc, #132]	; (8012430 <net_wifi_scan+0xb8>)
 80123aa:	f004 fac3 	bl	8016934 <iprintf>
 80123ae:	200a      	movs	r0, #10
 80123b0:	f004 fad2 	bl	8016958 <putchar>
    ret = NET_ERROR_PARAMETER;
 80123b4:	f06f 0303 	mvn.w	r3, #3
 80123b8:	617b      	str	r3, [r7, #20]
 80123ba:	e02e      	b.n	801241a <net_wifi_scan+0xa2>
  }
  else if (p_netif->pdrv->if_class != NET_INTERFACE_CLASS_WIFI)
 80123bc:	693b      	ldr	r3, [r7, #16]
 80123be:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80123c2:	781b      	ldrb	r3, [r3, #0]
 80123c4:	2b00      	cmp	r3, #0
 80123c6:	d00e      	beq.n	80123e6 <net_wifi_scan+0x6e>
  {
    NET_DBG_ERROR("Incorrect class interface when calling net_wifi_scan function\n");
 80123c8:	22ea      	movs	r2, #234	; 0xea
 80123ca:	4916      	ldr	r1, [pc, #88]	; (8012424 <net_wifi_scan+0xac>)
 80123cc:	4816      	ldr	r0, [pc, #88]	; (8012428 <net_wifi_scan+0xb0>)
 80123ce:	f004 fab1 	bl	8016934 <iprintf>
 80123d2:	4818      	ldr	r0, [pc, #96]	; (8012434 <net_wifi_scan+0xbc>)
 80123d4:	f004 fb1c 	bl	8016a10 <puts>
 80123d8:	200a      	movs	r0, #10
 80123da:	f004 fabd 	bl	8016958 <putchar>
    ret = NET_ERROR_PARAMETER;
 80123de:	f06f 0303 	mvn.w	r3, #3
 80123e2:	617b      	str	r3, [r7, #20]
 80123e4:	e019      	b.n	801241a <net_wifi_scan+0xa2>
  }
  else
  {
    if (p_netif->pdrv->extension.wifi->scan(p_netif, mode, ssid) != NET_OK)
 80123e6:	693b      	ldr	r3, [r7, #16]
 80123e8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80123ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80123ee:	681b      	ldr	r3, [r3, #0]
 80123f0:	7af9      	ldrb	r1, [r7, #11]
 80123f2:	687a      	ldr	r2, [r7, #4]
 80123f4:	6938      	ldr	r0, [r7, #16]
 80123f6:	4798      	blx	r3
 80123f8:	4603      	mov	r3, r0
 80123fa:	2b00      	cmp	r3, #0
 80123fc:	d00d      	beq.n	801241a <net_wifi_scan+0xa2>
    {
      NET_DBG_ERROR("Error when executing net_wifi_scan function\n");
 80123fe:	22f1      	movs	r2, #241	; 0xf1
 8012400:	4908      	ldr	r1, [pc, #32]	; (8012424 <net_wifi_scan+0xac>)
 8012402:	4809      	ldr	r0, [pc, #36]	; (8012428 <net_wifi_scan+0xb0>)
 8012404:	f004 fa96 	bl	8016934 <iprintf>
 8012408:	480b      	ldr	r0, [pc, #44]	; (8012438 <net_wifi_scan+0xc0>)
 801240a:	f004 fb01 	bl	8016a10 <puts>
 801240e:	200a      	movs	r0, #10
 8012410:	f004 faa2 	bl	8016958 <putchar>
      ret = NET_ERROR_GENERIC;
 8012414:	f06f 031c 	mvn.w	r3, #28
 8012418:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 801241a:	697b      	ldr	r3, [r7, #20]
}
 801241c:	4618      	mov	r0, r3
 801241e:	3718      	adds	r7, #24
 8012420:	46bd      	mov	sp, r7
 8012422:	bd80      	pop	{r7, pc}
 8012424:	0801ac08 	.word	0x0801ac08
 8012428:	0801ac78 	.word	0x0801ac78
 801242c:	200000fc 	.word	0x200000fc
 8012430:	0801ac88 	.word	0x0801ac88
 8012434:	0801ac8c 	.word	0x0801ac8c
 8012438:	0801accc 	.word	0x0801accc

0801243c <net_wifi_get_scan_results>:
  * @param  results is a pointer to an allocated array of net_wifi_scan_results_t
  * @param  number is unsigned integer, size of the array 'results'
  * @retval return the number of found access point, max value is "number".
  */
int32_t net_wifi_get_scan_results(net_if_handle_t *pnetif, net_wifi_scan_results_t *results, uint8_t number)
{
 801243c:	b580      	push	{r7, lr}
 801243e:	b086      	sub	sp, #24
 8012440:	af00      	add	r7, sp, #0
 8012442:	60f8      	str	r0, [r7, #12]
 8012444:	60b9      	str	r1, [r7, #8]
 8012446:	4613      	mov	r3, r2
 8012448:	71fb      	strb	r3, [r7, #7]
  int32_t ret;
  net_if_handle_t *const p_netif = netif_check(pnetif);
 801244a:	68f8      	ldr	r0, [r7, #12]
 801244c:	f000 f91a 	bl	8012684 <netif_check>
 8012450:	6138      	str	r0, [r7, #16]

  if (p_netif == NULL)
 8012452:	693b      	ldr	r3, [r7, #16]
 8012454:	2b00      	cmp	r3, #0
 8012456:	d112      	bne.n	801247e <net_wifi_get_scan_results+0x42>
  {
    NET_DBG_ERROR("%s", NO_NETWORK_INTERFACE_DEFINED);
 8012458:	f240 1207 	movw	r2, #263	; 0x107
 801245c:	491a      	ldr	r1, [pc, #104]	; (80124c8 <net_wifi_get_scan_results+0x8c>)
 801245e:	481b      	ldr	r0, [pc, #108]	; (80124cc <net_wifi_get_scan_results+0x90>)
 8012460:	f004 fa68 	bl	8016934 <iprintf>
 8012464:	4b1a      	ldr	r3, [pc, #104]	; (80124d0 <net_wifi_get_scan_results+0x94>)
 8012466:	681b      	ldr	r3, [r3, #0]
 8012468:	4619      	mov	r1, r3
 801246a:	481a      	ldr	r0, [pc, #104]	; (80124d4 <net_wifi_get_scan_results+0x98>)
 801246c:	f004 fa62 	bl	8016934 <iprintf>
 8012470:	200a      	movs	r0, #10
 8012472:	f004 fa71 	bl	8016958 <putchar>
    ret = NET_ERROR_PARAMETER;
 8012476:	f06f 0303 	mvn.w	r3, #3
 801247a:	617b      	str	r3, [r7, #20]
 801247c:	e01f      	b.n	80124be <net_wifi_get_scan_results+0x82>
  }
  else if (p_netif->pdrv->if_class != NET_INTERFACE_CLASS_WIFI)
 801247e:	693b      	ldr	r3, [r7, #16]
 8012480:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8012484:	781b      	ldrb	r3, [r3, #0]
 8012486:	2b00      	cmp	r3, #0
 8012488:	d00f      	beq.n	80124aa <net_wifi_get_scan_results+0x6e>
  {
    NET_DBG_ERROR("Incorrect class interface when calling net_wifi_scan function\n");
 801248a:	f44f 7286 	mov.w	r2, #268	; 0x10c
 801248e:	490e      	ldr	r1, [pc, #56]	; (80124c8 <net_wifi_get_scan_results+0x8c>)
 8012490:	480e      	ldr	r0, [pc, #56]	; (80124cc <net_wifi_get_scan_results+0x90>)
 8012492:	f004 fa4f 	bl	8016934 <iprintf>
 8012496:	4810      	ldr	r0, [pc, #64]	; (80124d8 <net_wifi_get_scan_results+0x9c>)
 8012498:	f004 faba 	bl	8016a10 <puts>
 801249c:	200a      	movs	r0, #10
 801249e:	f004 fa5b 	bl	8016958 <putchar>
    ret = NET_ERROR_PARAMETER;
 80124a2:	f06f 0303 	mvn.w	r3, #3
 80124a6:	617b      	str	r3, [r7, #20]
 80124a8:	e009      	b.n	80124be <net_wifi_get_scan_results+0x82>
  }
  else
  {
    ret = p_netif->pdrv->extension.wifi->get_scan_results(p_netif, results, number);
 80124aa:	693b      	ldr	r3, [r7, #16]
 80124ac:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80124b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80124b2:	685b      	ldr	r3, [r3, #4]
 80124b4:	79fa      	ldrb	r2, [r7, #7]
 80124b6:	68b9      	ldr	r1, [r7, #8]
 80124b8:	6938      	ldr	r0, [r7, #16]
 80124ba:	4798      	blx	r3
 80124bc:	6178      	str	r0, [r7, #20]
  }
  return ret;
 80124be:	697b      	ldr	r3, [r7, #20]
}
 80124c0:	4618      	mov	r0, r3
 80124c2:	3718      	adds	r7, #24
 80124c4:	46bd      	mov	sp, r7
 80124c6:	bd80      	pop	{r7, pc}
 80124c8:	0801ac08 	.word	0x0801ac08
 80124cc:	0801ac78 	.word	0x0801ac78
 80124d0:	200000fc 	.word	0x200000fc
 80124d4:	0801ac88 	.word	0x0801ac88
 80124d8:	0801ac8c 	.word	0x0801ac8c

080124dc <net_wifi_set_credentials>:
  * @param  pnetif_is a pointer to an allocated network interface structure
  * @param  credentials a pointer to a const allocated structure which contain credentials values (SSID, password)
  * @retval 0 in case of success, an error code otherwise
  */
int32_t net_wifi_set_credentials(net_if_handle_t *pnetif, const net_wifi_credentials_t *credentials)
{
 80124dc:	b480      	push	{r7}
 80124de:	b083      	sub	sp, #12
 80124e0:	af00      	add	r7, sp, #0
 80124e2:	6078      	str	r0, [r7, #4]
 80124e4:	6039      	str	r1, [r7, #0]
  pnetif->pdrv->extension.wifi->credentials = credentials;
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80124ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80124ee:	683a      	ldr	r2, [r7, #0]
 80124f0:	619a      	str	r2, [r3, #24]
  return NET_OK;
 80124f2:	2300      	movs	r3, #0
}
 80124f4:	4618      	mov	r0, r3
 80124f6:	370c      	adds	r7, #12
 80124f8:	46bd      	mov	sp, r7
 80124fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124fe:	4770      	bx	lr

08012500 <net_wifi_set_access_mode>:
  * @brief  Set the access mode for a WIFI interface: AP or STA mode
  * @param  pnetif_is a pointer to an allocated network interface structure
  * @retval 0 in case of success, an error code otherwise
  */
int32_t net_wifi_set_access_mode(net_if_handle_t *pnetif, net_wifi_mode_t mode)
{
 8012500:	b480      	push	{r7}
 8012502:	b083      	sub	sp, #12
 8012504:	af00      	add	r7, sp, #0
 8012506:	6078      	str	r0, [r7, #4]
 8012508:	460b      	mov	r3, r1
 801250a:	70fb      	strb	r3, [r7, #3]
  pnetif->pdrv->extension.wifi->mode = mode;
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8012512:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012514:	78fa      	ldrb	r2, [r7, #3]
 8012516:	771a      	strb	r2, [r3, #28]
  return NET_OK;
 8012518:	2300      	movs	r3, #0
}
 801251a:	4618      	mov	r0, r3
 801251c:	370c      	adds	r7, #12
 801251e:	46bd      	mov	sp, r7
 8012520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012524:	4770      	bx	lr

08012526 <net_wifi_set_access_channel>:
  * @param  pnetif_is a pointer to an allocated network interface structure
  * @param  channel is an unsigned 8 bit integer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t net_wifi_set_access_channel(net_if_handle_t *pnetif,  uint8_t channel)
{
 8012526:	b480      	push	{r7}
 8012528:	b083      	sub	sp, #12
 801252a:	af00      	add	r7, sp, #0
 801252c:	6078      	str	r0, [r7, #4]
 801252e:	460b      	mov	r3, r1
 8012530:	70fb      	strb	r3, [r7, #3]
  pnetif->pdrv->extension.wifi->access_channel = channel;
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8012538:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801253a:	78fa      	ldrb	r2, [r7, #3]
 801253c:	775a      	strb	r2, [r3, #29]
  return NET_OK;
 801253e:	2300      	movs	r3, #0
}
 8012540:	4618      	mov	r0, r3
 8012542:	370c      	adds	r7, #12
 8012544:	46bd      	mov	sp, r7
 8012546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801254a:	4770      	bx	lr

0801254c <net_wifi_set_ap_max_connections>:
  * @param  pnetif is a pointer to an allocated network interface structure
  * @param  count is an unsigned 8 bit integer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t net_wifi_set_ap_max_connections(net_if_handle_t *pnetif,  uint8_t count)
{
 801254c:	b480      	push	{r7}
 801254e:	b083      	sub	sp, #12
 8012550:	af00      	add	r7, sp, #0
 8012552:	6078      	str	r0, [r7, #4]
 8012554:	460b      	mov	r3, r1
 8012556:	70fb      	strb	r3, [r7, #3]
  pnetif->pdrv->extension.wifi->max_connections = count;
 8012558:	687b      	ldr	r3, [r7, #4]
 801255a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 801255e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012560:	78fa      	ldrb	r2, [r7, #3]
 8012562:	779a      	strb	r2, [r3, #30]
  return NET_OK;
 8012564:	2300      	movs	r3, #0
}
 8012566:	4618      	mov	r0, r3
 8012568:	370c      	adds	r7, #12
 801256a:	46bd      	mov	sp, r7
 801256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012570:	4770      	bx	lr
	...

08012574 <netif_add_to_list>:
#define __IO volatile
#endif /* IO */


static void netif_add_to_list(net_if_handle_t *pnetif)
{
 8012574:	b480      	push	{r7}
 8012576:	b085      	sub	sp, #20
 8012578:	af00      	add	r7, sp, #0
 801257a:	6078      	str	r0, [r7, #4]
  LOCK_NETIF_LIST();
  if (NetIfList == NULL)
 801257c:	4b0d      	ldr	r3, [pc, #52]	; (80125b4 <netif_add_to_list+0x40>)
 801257e:	681b      	ldr	r3, [r3, #0]
 8012580:	2b00      	cmp	r3, #0
 8012582:	d103      	bne.n	801258c <netif_add_to_list+0x18>
  {
    NetIfList = pnetif;
 8012584:	4a0b      	ldr	r2, [pc, #44]	; (80125b4 <netif_add_to_list+0x40>)
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	6013      	str	r3, [r2, #0]
      p_last_netif = p_last_netif->next;
    }
    p_last_netif->next = pnetif;
  }
  UNLOCK_NETIF_LIST();
}
 801258a:	e00d      	b.n	80125a8 <netif_add_to_list+0x34>
    net_if_handle_t *p_last_netif = NetIfList;
 801258c:	4b09      	ldr	r3, [pc, #36]	; (80125b4 <netif_add_to_list+0x40>)
 801258e:	681b      	ldr	r3, [r3, #0]
 8012590:	60fb      	str	r3, [r7, #12]
    while (p_last_netif->next != NULL)
 8012592:	e002      	b.n	801259a <netif_add_to_list+0x26>
      p_last_netif = p_last_netif->next;
 8012594:	68fb      	ldr	r3, [r7, #12]
 8012596:	681b      	ldr	r3, [r3, #0]
 8012598:	60fb      	str	r3, [r7, #12]
    while (p_last_netif->next != NULL)
 801259a:	68fb      	ldr	r3, [r7, #12]
 801259c:	681b      	ldr	r3, [r3, #0]
 801259e:	2b00      	cmp	r3, #0
 80125a0:	d1f8      	bne.n	8012594 <netif_add_to_list+0x20>
    p_last_netif->next = pnetif;
 80125a2:	68fb      	ldr	r3, [r7, #12]
 80125a4:	687a      	ldr	r2, [r7, #4]
 80125a6:	601a      	str	r2, [r3, #0]
}
 80125a8:	bf00      	nop
 80125aa:	3714      	adds	r7, #20
 80125ac:	46bd      	mov	sp, r7
 80125ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125b2:	4770      	bx	lr
 80125b4:	20003268 	.word	0x20003268

080125b8 <netif_remove_from_list>:


static void netif_remove_from_list(net_if_handle_t *pnetif)
{
 80125b8:	b480      	push	{r7}
 80125ba:	b085      	sub	sp, #20
 80125bc:	af00      	add	r7, sp, #0
 80125be:	6078      	str	r0, [r7, #4]
  LOCK_NETIF_LIST();

  if (NetIfList == pnetif)
 80125c0:	4b13      	ldr	r3, [pc, #76]	; (8012610 <netif_remove_from_list+0x58>)
 80125c2:	681b      	ldr	r3, [r3, #0]
 80125c4:	687a      	ldr	r2, [r7, #4]
 80125c6:	429a      	cmp	r2, r3
 80125c8:	d105      	bne.n	80125d6 <netif_remove_from_list+0x1e>
  {
    NetIfList = NetIfList->next;
 80125ca:	4b11      	ldr	r3, [pc, #68]	; (8012610 <netif_remove_from_list+0x58>)
 80125cc:	681b      	ldr	r3, [r3, #0]
 80125ce:	681b      	ldr	r3, [r3, #0]
 80125d0:	4a0f      	ldr	r2, [pc, #60]	; (8012610 <netif_remove_from_list+0x58>)
 80125d2:	6013      	str	r3, [r2, #0]
        break;
      }
    }
  }
  UNLOCK_NETIF_LIST();
}
 80125d4:	e015      	b.n	8012602 <netif_remove_from_list+0x4a>
    for (net_if_handle_t *p_netif_prev = NetIfList; p_netif_prev->next != NULL; p_netif_prev = p_netif_prev->next)
 80125d6:	4b0e      	ldr	r3, [pc, #56]	; (8012610 <netif_remove_from_list+0x58>)
 80125d8:	681b      	ldr	r3, [r3, #0]
 80125da:	60fb      	str	r3, [r7, #12]
 80125dc:	e00d      	b.n	80125fa <netif_remove_from_list+0x42>
      if (p_netif_prev->next == pnetif)
 80125de:	68fb      	ldr	r3, [r7, #12]
 80125e0:	681b      	ldr	r3, [r3, #0]
 80125e2:	687a      	ldr	r2, [r7, #4]
 80125e4:	429a      	cmp	r2, r3
 80125e6:	d105      	bne.n	80125f4 <netif_remove_from_list+0x3c>
        p_netif_prev->next = pnetif->next;
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	681a      	ldr	r2, [r3, #0]
 80125ec:	68fb      	ldr	r3, [r7, #12]
 80125ee:	601a      	str	r2, [r3, #0]
        break;
 80125f0:	bf00      	nop
}
 80125f2:	e006      	b.n	8012602 <netif_remove_from_list+0x4a>
    for (net_if_handle_t *p_netif_prev = NetIfList; p_netif_prev->next != NULL; p_netif_prev = p_netif_prev->next)
 80125f4:	68fb      	ldr	r3, [r7, #12]
 80125f6:	681b      	ldr	r3, [r3, #0]
 80125f8:	60fb      	str	r3, [r7, #12]
 80125fa:	68fb      	ldr	r3, [r7, #12]
 80125fc:	681b      	ldr	r3, [r3, #0]
 80125fe:	2b00      	cmp	r3, #0
 8012600:	d1ed      	bne.n	80125de <netif_remove_from_list+0x26>
}
 8012602:	bf00      	nop
 8012604:	3714      	adds	r7, #20
 8012606:	46bd      	mov	sp, r7
 8012608:	f85d 7b04 	ldr.w	r7, [sp], #4
 801260c:	4770      	bx	lr
 801260e:	bf00      	nop
 8012610:	20003268 	.word	0x20003268

08012614 <net_if_find>:
  * @brief  Function description
  * @param  addr
  * @retval socket status
  */
net_if_handle_t *net_if_find(net_sockaddr_t *addr)
{
 8012614:	b580      	push	{r7, lr}
 8012616:	b086      	sub	sp, #24
 8012618:	af00      	add	r7, sp, #0
 801261a:	6078      	str	r0, [r7, #4]
  const net_if_handle_t *ptr;
  net_ip_addr_t ipaddr = {0};
 801261c:	2300      	movs	r3, #0
 801261e:	613b      	str	r3, [r7, #16]
  net_ip_addr_t ipaddr_zero = {0};
 8012620:	2300      	movs	r3, #0
 8012622:	60fb      	str	r3, [r7, #12]

  if (addr != NULL)
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	2b00      	cmp	r3, #0
 8012628:	d004      	beq.n	8012634 <net_if_find+0x20>
  {
    ipaddr = net_get_ip_addr(addr);
 801262a:	6878      	ldr	r0, [r7, #4]
 801262c:	f7ff fdab 	bl	8012186 <net_get_ip_addr>
 8012630:	4603      	mov	r3, r0
 8012632:	613b      	str	r3, [r7, #16]
  }

  LOCK_NETIF_LIST();

  ptr = NetIfList;
 8012634:	4b12      	ldr	r3, [pc, #72]	; (8012680 <net_if_find+0x6c>)
 8012636:	681b      	ldr	r3, [r3, #0]
 8012638:	617b      	str	r3, [r7, #20]
  if (NET_DIFF(ipaddr, ipaddr_zero) != 0)
 801263a:	f107 010c 	add.w	r1, r7, #12
 801263e:	f107 0310 	add.w	r3, r7, #16
 8012642:	2204      	movs	r2, #4
 8012644:	4618      	mov	r0, r3
 8012646:	f004 fa1f 	bl	8016a88 <memcmp>
 801264a:	4603      	mov	r3, r0
 801264c:	2b00      	cmp	r3, #0
 801264e:	d012      	beq.n	8012676 <net_if_find+0x62>
  {
    do
    {
      if (NET_EQUAL(ptr->ipaddr, ipaddr))
 8012650:	697b      	ldr	r3, [r7, #20]
 8012652:	3304      	adds	r3, #4
 8012654:	f107 0110 	add.w	r1, r7, #16
 8012658:	2204      	movs	r2, #4
 801265a:	4618      	mov	r0, r3
 801265c:	f004 fa14 	bl	8016a88 <memcmp>
 8012660:	4603      	mov	r3, r0
 8012662:	2b00      	cmp	r3, #0
 8012664:	d006      	beq.n	8012674 <net_if_find+0x60>
      {
        break;
      }
      ptr = ptr->next;
 8012666:	697b      	ldr	r3, [r7, #20]
 8012668:	681b      	ldr	r3, [r3, #0]
 801266a:	617b      	str	r3, [r7, #20]
    } while (ptr != NULL);
 801266c:	697b      	ldr	r3, [r7, #20]
 801266e:	2b00      	cmp	r3, #0
 8012670:	d1ee      	bne.n	8012650 <net_if_find+0x3c>
 8012672:	e000      	b.n	8012676 <net_if_find+0x62>
        break;
 8012674:	bf00      	nop
  }
  UNLOCK_NETIF_LIST();

  return (net_if_handle_t *)ptr;
 8012676:	697b      	ldr	r3, [r7, #20]
}
 8012678:	4618      	mov	r0, r3
 801267a:	3718      	adds	r7, #24
 801267c:	46bd      	mov	sp, r7
 801267e:	bd80      	pop	{r7, pc}
 8012680:	20003268 	.word	0x20003268

08012684 <netif_check>:


net_if_handle_t *netif_check(net_if_handle_t *pnetif)
{
 8012684:	b580      	push	{r7, lr}
 8012686:	b084      	sub	sp, #16
 8012688:	af00      	add	r7, sp, #0
 801268a:	6078      	str	r0, [r7, #4]
  net_if_handle_t *p_netif = pnetif;
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	60fb      	str	r3, [r7, #12]
  if (p_netif == NULL)
 8012690:	68fb      	ldr	r3, [r7, #12]
 8012692:	2b00      	cmp	r3, #0
 8012694:	d111      	bne.n	80126ba <netif_check+0x36>
  {
    /* Get default interface. */
    p_netif = net_if_find(NULL);
 8012696:	2000      	movs	r0, #0
 8012698:	f7ff ffbc 	bl	8012614 <net_if_find>
 801269c:	60f8      	str	r0, [r7, #12]
    if (p_netif == NULL)
 801269e:	68fb      	ldr	r3, [r7, #12]
 80126a0:	2b00      	cmp	r3, #0
 80126a2:	d10a      	bne.n	80126ba <netif_check+0x36>
    {
      NET_DBG_ERROR("No network interface defined\n");
 80126a4:	227c      	movs	r2, #124	; 0x7c
 80126a6:	4907      	ldr	r1, [pc, #28]	; (80126c4 <netif_check+0x40>)
 80126a8:	4807      	ldr	r0, [pc, #28]	; (80126c8 <netif_check+0x44>)
 80126aa:	f004 f943 	bl	8016934 <iprintf>
 80126ae:	4807      	ldr	r0, [pc, #28]	; (80126cc <netif_check+0x48>)
 80126b0:	f004 f9ae 	bl	8016a10 <puts>
 80126b4:	200a      	movs	r0, #10
 80126b6:	f004 f94f 	bl	8016958 <putchar>
    }
  }
  return p_netif;
 80126ba:	68fb      	ldr	r3, [r7, #12]
}
 80126bc:	4618      	mov	r0, r3
 80126be:	3710      	adds	r7, #16
 80126c0:	46bd      	mov	sp, r7
 80126c2:	bd80      	pop	{r7, pc}
 80126c4:	0801ae00 	.word	0x0801ae00
 80126c8:	0801ae64 	.word	0x0801ae64
 80126cc:	0801ae74 	.word	0x0801ae74

080126d0 <net_if_wait_state>:
  * @param  state  the expected state
  * @param  timeout max time to wait in ms for the transition
  * @retval 0 in case of success, an error code otherwise
  */
int32_t net_if_wait_state(net_if_handle_t *pnetif, net_state_t state, uint32_t timeout)
{
 80126d0:	b590      	push	{r4, r7, lr}
 80126d2:	b089      	sub	sp, #36	; 0x24
 80126d4:	af00      	add	r7, sp, #0
 80126d6:	60f8      	str	r0, [r7, #12]
 80126d8:	460b      	mov	r3, r1
 80126da:	607a      	str	r2, [r7, #4]
 80126dc:	72fb      	strb	r3, [r7, #11]
  int32_t ret = NET_OK;
 80126de:	2300      	movs	r3, #0
 80126e0:	61fb      	str	r3, [r7, #28]
  __IO net_state_t *const p = &pnetif->state;
 80126e2:	68fb      	ldr	r3, [r7, #12]
 80126e4:	33eb      	adds	r3, #235	; 0xeb
 80126e6:	61bb      	str	r3, [r7, #24]

  uint32_t start_time = HAL_GetTick();
 80126e8:	f7f7 fb4e 	bl	8009d88 <HAL_GetTick>
 80126ec:	6178      	str	r0, [r7, #20]
  while (*p != state)
 80126ee:	e019      	b.n	8012724 <net_if_wait_state+0x54>
  {
    if (HAL_GetTick() >= (start_time + timeout))
 80126f0:	f7f7 fb4a 	bl	8009d88 <HAL_GetTick>
 80126f4:	4601      	mov	r1, r0
 80126f6:	697a      	ldr	r2, [r7, #20]
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	4413      	add	r3, r2
 80126fc:	4299      	cmp	r1, r3
 80126fe:	d303      	bcc.n	8012708 <net_if_wait_state+0x38>
    {
      ret = NET_TIMEOUT;
 8012700:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012704:	61fb      	str	r3, [r7, #28]
      break;
 8012706:	e013      	b.n	8012730 <net_if_wait_state+0x60>
    }
    WAIT_STATE_CHANGE(timeout - (HAL_GetTick() - start_time));
 8012708:	68fb      	ldr	r3, [r7, #12]
 801270a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 801270e:	695c      	ldr	r4, [r3, #20]
 8012710:	f7f7 fb3a 	bl	8009d88 <HAL_GetTick>
 8012714:	4602      	mov	r2, r0
 8012716:	697b      	ldr	r3, [r7, #20]
 8012718:	1a9a      	subs	r2, r3, r2
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	4413      	add	r3, r2
 801271e:	4619      	mov	r1, r3
 8012720:	68f8      	ldr	r0, [r7, #12]
 8012722:	47a0      	blx	r4
  while (*p != state)
 8012724:	69bb      	ldr	r3, [r7, #24]
 8012726:	781b      	ldrb	r3, [r3, #0]
 8012728:	b2db      	uxtb	r3, r3
 801272a:	7afa      	ldrb	r2, [r7, #11]
 801272c:	429a      	cmp	r2, r3
 801272e:	d1df      	bne.n	80126f0 <net_if_wait_state+0x20>
  }
  return ret;
 8012730:	69fb      	ldr	r3, [r7, #28]
}
 8012732:	4618      	mov	r0, r3
 8012734:	3724      	adds	r7, #36	; 0x24
 8012736:	46bd      	mov	sp, r7
 8012738:	bd90      	pop	{r4, r7, pc}

0801273a <net_if_notify>:


void net_if_notify(net_if_handle_t *pnetif, net_evt_t event_class, uint32_t event_id, void *event_data)
{
 801273a:	b590      	push	{r4, r7, lr}
 801273c:	b085      	sub	sp, #20
 801273e:	af00      	add	r7, sp, #0
 8012740:	60f8      	str	r0, [r7, #12]
 8012742:	607a      	str	r2, [r7, #4]
 8012744:	603b      	str	r3, [r7, #0]
 8012746:	460b      	mov	r3, r1
 8012748:	72fb      	strb	r3, [r7, #11]
  /* call the user Handler first ,FIXME , first or not , race between wait state transition and user handler */
  if ((NULL != pnetif->event_handler) && (NULL != pnetif->event_handler->callback))
 801274a:	68fb      	ldr	r3, [r7, #12]
 801274c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8012750:	2b00      	cmp	r3, #0
 8012752:	d011      	beq.n	8012778 <net_if_notify+0x3e>
 8012754:	68fb      	ldr	r3, [r7, #12]
 8012756:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 801275a:	681b      	ldr	r3, [r3, #0]
 801275c:	2b00      	cmp	r3, #0
 801275e:	d00b      	beq.n	8012778 <net_if_notify+0x3e>
  {
    pnetif->event_handler->callback(pnetif->event_handler->context, event_class, event_id, event_data);
 8012760:	68fb      	ldr	r3, [r7, #12]
 8012762:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8012766:	681c      	ldr	r4, [r3, #0]
 8012768:	68fb      	ldr	r3, [r7, #12]
 801276a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 801276e:	6858      	ldr	r0, [r3, #4]
 8012770:	7af9      	ldrb	r1, [r7, #11]
 8012772:	683b      	ldr	r3, [r7, #0]
 8012774:	687a      	ldr	r2, [r7, #4]
 8012776:	47a0      	blx	r4
  }
}
 8012778:	bf00      	nop
 801277a:	3714      	adds	r7, #20
 801277c:	46bd      	mov	sp, r7
 801277e:	bd90      	pop	{r4, r7, pc}

08012780 <net_if_init>:
  * @retval 0 in case of success, an error code otherwise
   * This function is a synchronous function.
  */
int32_t net_if_init(net_if_handle_t *pnetif, net_if_driver_init_func driver_init,
                    const net_event_handler_t *event_handler)
{
 8012780:	b580      	push	{r7, lr}
 8012782:	b086      	sub	sp, #24
 8012784:	af00      	add	r7, sp, #0
 8012786:	60f8      	str	r0, [r7, #12]
 8012788:	60b9      	str	r1, [r7, #8]
 801278a:	607a      	str	r2, [r7, #4]
  int32_t ret;
  net_if_handle_t *const p_netif = pnetif;
 801278c:	68fb      	ldr	r3, [r7, #12]
 801278e:	613b      	str	r3, [r7, #16]
    net_init_locks();
    NetInitialized = 1;
  }
#endif /* NET_USE_RTOS */

  if (p_netif != NULL)
 8012790:	693b      	ldr	r3, [r7, #16]
 8012792:	2b00      	cmp	r3, #0
 8012794:	d027      	beq.n	80127e6 <net_if_init+0x66>
  {
    p_netif->event_handler = event_handler;
 8012796:	693b      	ldr	r3, [r7, #16]
 8012798:	687a      	ldr	r2, [r7, #4]
 801279a:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    p_netif->state = NET_STATE_INITIALIZED;
 801279e:	693b      	ldr	r3, [r7, #16]
 80127a0:	2201      	movs	r2, #1
 80127a2:	f883 20eb 	strb.w	r2, [r3, #235]	; 0xeb
    netif_add_to_list(p_netif);
 80127a6:	6938      	ldr	r0, [r7, #16]
 80127a8:	f7ff fee4 	bl	8012574 <netif_add_to_list>
    ret = (*driver_init)(p_netif);
 80127ac:	68bb      	ldr	r3, [r7, #8]
 80127ae:	6938      	ldr	r0, [r7, #16]
 80127b0:	4798      	blx	r3
 80127b2:	6178      	str	r0, [r7, #20]
    if (NET_OK != ret)
 80127b4:	697b      	ldr	r3, [r7, #20]
 80127b6:	2b00      	cmp	r3, #0
 80127b8:	d023      	beq.n	8012802 <net_if_init+0x82>
    {
      p_netif->state = NET_STATE_DEINITIALIZED;
 80127ba:	693b      	ldr	r3, [r7, #16]
 80127bc:	2200      	movs	r2, #0
 80127be:	f883 20eb 	strb.w	r2, [r3, #235]	; 0xeb
      netif_remove_from_list(p_netif);
 80127c2:	6938      	ldr	r0, [r7, #16]
 80127c4:	f7ff fef8 	bl	80125b8 <netif_remove_from_list>

      NET_DBG_ERROR("Interface cannot be initialized.\n");
 80127c8:	22d8      	movs	r2, #216	; 0xd8
 80127ca:	4910      	ldr	r1, [pc, #64]	; (801280c <net_if_init+0x8c>)
 80127cc:	4810      	ldr	r0, [pc, #64]	; (8012810 <net_if_init+0x90>)
 80127ce:	f004 f8b1 	bl	8016934 <iprintf>
 80127d2:	4810      	ldr	r0, [pc, #64]	; (8012814 <net_if_init+0x94>)
 80127d4:	f004 f91c 	bl	8016a10 <puts>
 80127d8:	200a      	movs	r0, #10
 80127da:	f004 f8bd 	bl	8016958 <putchar>
      ret = NET_ERROR_INTERFACE_FAILURE;
 80127de:	f06f 0310 	mvn.w	r3, #16
 80127e2:	617b      	str	r3, [r7, #20]
 80127e4:	e00d      	b.n	8012802 <net_if_init+0x82>
    }
  }
  else
  {
    NET_DBG_ERROR("Invalid interface.\n");
 80127e6:	22de      	movs	r2, #222	; 0xde
 80127e8:	4908      	ldr	r1, [pc, #32]	; (801280c <net_if_init+0x8c>)
 80127ea:	4809      	ldr	r0, [pc, #36]	; (8012810 <net_if_init+0x90>)
 80127ec:	f004 f8a2 	bl	8016934 <iprintf>
 80127f0:	4809      	ldr	r0, [pc, #36]	; (8012818 <net_if_init+0x98>)
 80127f2:	f004 f90d 	bl	8016a10 <puts>
 80127f6:	200a      	movs	r0, #10
 80127f8:	f004 f8ae 	bl	8016958 <putchar>
    ret = NET_ERROR_PARAMETER;
 80127fc:	f06f 0303 	mvn.w	r3, #3
 8012800:	617b      	str	r3, [r7, #20]
    net_destroy_locks();
    NetInitialized = 0;
  }
#endif /* NET_USE_RTOS */

  return ret;
 8012802:	697b      	ldr	r3, [r7, #20]
}
 8012804:	4618      	mov	r0, r3
 8012806:	3718      	adds	r7, #24
 8012808:	46bd      	mov	sp, r7
 801280a:	bd80      	pop	{r7, pc}
 801280c:	0801ae00 	.word	0x0801ae00
 8012810:	0801ae64 	.word	0x0801ae64
 8012814:	0801ae94 	.word	0x0801ae94
 8012818:	0801aeb8 	.word	0x0801aeb8

0801281c <net_if_start>:
  * @brief  Start network interface
  * @param  pnetif a pointer to an allocated network interface structure
  * @retval 0 in case of success, an error code otherwise
  */
int32_t net_if_start(net_if_handle_t *pnetif)
{
 801281c:	b580      	push	{r7, lr}
 801281e:	b082      	sub	sp, #8
 8012820:	af00      	add	r7, sp, #0
 8012822:	6078      	str	r0, [r7, #4]
  return net_state_manage_event(pnetif, NET_EVENT_CMD_START);
 8012824:	2101      	movs	r1, #1
 8012826:	6878      	ldr	r0, [r7, #4]
 8012828:	f001 f88a 	bl	8013940 <net_state_manage_event>
 801282c:	4603      	mov	r3, r0
}
 801282e:	4618      	mov	r0, r3
 8012830:	3708      	adds	r7, #8
 8012832:	46bd      	mov	sp, r7
 8012834:	bd80      	pop	{r7, pc}

08012836 <net_if_connect>:
  * @brief  Connect network interface
  * @param  pnetif a pointer to an allocated network interface structure
  * @retval 0 in case of success, an error code otherwise
  */
int32_t net_if_connect(net_if_handle_t *pnetif)
{
 8012836:	b580      	push	{r7, lr}
 8012838:	b082      	sub	sp, #8
 801283a:	af00      	add	r7, sp, #0
 801283c:	6078      	str	r0, [r7, #4]
  return net_state_manage_event(pnetif, NET_EVENT_CMD_CONNECT);
 801283e:	2102      	movs	r1, #2
 8012840:	6878      	ldr	r0, [r7, #4]
 8012842:	f001 f87d 	bl	8013940 <net_state_manage_event>
 8012846:	4603      	mov	r3, r0
}
 8012848:	4618      	mov	r0, r3
 801284a:	3708      	adds	r7, #8
 801284c:	46bd      	mov	sp, r7
 801284e:	bd80      	pop	{r7, pc}

08012850 <net_if_getState>:
  * @param  pnetif a pointer to an allocated network interface structure
  * @param  state  a pointer to a net_state_t enum
  * @retval 0 in case of success, an error code otherwise
  */
int32_t net_if_getState(net_if_handle_t *pnetif, net_state_t *state)
{
 8012850:	b580      	push	{r7, lr}
 8012852:	b084      	sub	sp, #16
 8012854:	af00      	add	r7, sp, #0
 8012856:	6078      	str	r0, [r7, #4]
 8012858:	6039      	str	r1, [r7, #0]
  int32_t ret;
  const net_if_handle_t *const p_netif = netif_check(pnetif);
 801285a:	6878      	ldr	r0, [r7, #4]
 801285c:	f7ff ff12 	bl	8012684 <netif_check>
 8012860:	60b8      	str	r0, [r7, #8]

  if (p_netif != NULL)
 8012862:	68bb      	ldr	r3, [r7, #8]
 8012864:	2b00      	cmp	r3, #0
 8012866:	d007      	beq.n	8012878 <net_if_getState+0x28>
  {
    *state = p_netif->state;
 8012868:	68bb      	ldr	r3, [r7, #8]
 801286a:	f893 20eb 	ldrb.w	r2, [r3, #235]	; 0xeb
 801286e:	683b      	ldr	r3, [r7, #0]
 8012870:	701a      	strb	r2, [r3, #0]
    ret = NET_OK;
 8012872:	2300      	movs	r3, #0
 8012874:	60fb      	str	r3, [r7, #12]
 8012876:	e011      	b.n	801289c <net_if_getState+0x4c>
  }
  else
  {
    NET_DBG_ERROR("Invalid interface.\n");
 8012878:	f240 1289 	movw	r2, #393	; 0x189
 801287c:	490a      	ldr	r1, [pc, #40]	; (80128a8 <net_if_getState+0x58>)
 801287e:	480b      	ldr	r0, [pc, #44]	; (80128ac <net_if_getState+0x5c>)
 8012880:	f004 f858 	bl	8016934 <iprintf>
 8012884:	480a      	ldr	r0, [pc, #40]	; (80128b0 <net_if_getState+0x60>)
 8012886:	f004 f8c3 	bl	8016a10 <puts>
 801288a:	200a      	movs	r0, #10
 801288c:	f004 f864 	bl	8016958 <putchar>
    *state = NET_STATE_DEINITIALIZED;
 8012890:	683b      	ldr	r3, [r7, #0]
 8012892:	2200      	movs	r2, #0
 8012894:	701a      	strb	r2, [r3, #0]
    ret = NET_ERROR_PARAMETER;
 8012896:	f06f 0303 	mvn.w	r3, #3
 801289a:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 801289c:	68fb      	ldr	r3, [r7, #12]
}
 801289e:	4618      	mov	r0, r3
 80128a0:	3710      	adds	r7, #16
 80128a2:	46bd      	mov	sp, r7
 80128a4:	bd80      	pop	{r7, pc}
 80128a6:	bf00      	nop
 80128a8:	0801ae00 	.word	0x0801ae00
 80128ac:	0801ae64 	.word	0x0801ae64
 80128b0:	0801aeb8 	.word	0x0801aeb8

080128b4 <net_if_get_ip_address>:
  * @param  pnetif a pointer to an allocated network interface structure
  * @param  ip a pointer to an allocated net_ip_addr_t structure
  * @retval 0 in case of success, an error code otherwise
  */
int32_t net_if_get_ip_address(net_if_handle_t *pnetif, net_ip_addr_t *ip)
{
 80128b4:	b580      	push	{r7, lr}
 80128b6:	b084      	sub	sp, #16
 80128b8:	af00      	add	r7, sp, #0
 80128ba:	6078      	str	r0, [r7, #4]
 80128bc:	6039      	str	r1, [r7, #0]
  int32_t ret;
  const net_if_handle_t *const p_netif = netif_check(pnetif);
 80128be:	6878      	ldr	r0, [r7, #4]
 80128c0:	f7ff fee0 	bl	8012684 <netif_check>
 80128c4:	60b8      	str	r0, [r7, #8]

  if ((p_netif != NULL) && (ip != NULL))
 80128c6:	68bb      	ldr	r3, [r7, #8]
 80128c8:	2b00      	cmp	r3, #0
 80128ca:	d01e      	beq.n	801290a <net_if_get_ip_address+0x56>
 80128cc:	683b      	ldr	r3, [r7, #0]
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	d01b      	beq.n	801290a <net_if_get_ip_address+0x56>
  {
    if (p_netif->state == NET_STATE_CONNECTED)
 80128d2:	68bb      	ldr	r3, [r7, #8]
 80128d4:	f893 30eb 	ldrb.w	r3, [r3, #235]	; 0xeb
 80128d8:	2b05      	cmp	r3, #5
 80128da:	d106      	bne.n	80128ea <net_if_get_ip_address+0x36>
    {
      *ip = p_netif->ipaddr;
 80128dc:	683b      	ldr	r3, [r7, #0]
 80128de:	68ba      	ldr	r2, [r7, #8]
 80128e0:	6852      	ldr	r2, [r2, #4]
 80128e2:	601a      	str	r2, [r3, #0]
      ret = NET_OK;
 80128e4:	2300      	movs	r3, #0
 80128e6:	60fb      	str	r3, [r7, #12]
    if (p_netif->state == NET_STATE_CONNECTED)
 80128e8:	e01e      	b.n	8012928 <net_if_get_ip_address+0x74>
    }
    else
    {
      NET_DBG_ERROR("Can get ipaddr for un-connected network interface.\n");
 80128ea:	f44f 72f6 	mov.w	r2, #492	; 0x1ec
 80128ee:	4911      	ldr	r1, [pc, #68]	; (8012934 <net_if_get_ip_address+0x80>)
 80128f0:	4811      	ldr	r0, [pc, #68]	; (8012938 <net_if_get_ip_address+0x84>)
 80128f2:	f004 f81f 	bl	8016934 <iprintf>
 80128f6:	4811      	ldr	r0, [pc, #68]	; (801293c <net_if_get_ip_address+0x88>)
 80128f8:	f004 f88a 	bl	8016a10 <puts>
 80128fc:	200a      	movs	r0, #10
 80128fe:	f004 f82b 	bl	8016958 <putchar>
      ret = NET_ERROR_INTERFACE_FAILURE;
 8012902:	f06f 0310 	mvn.w	r3, #16
 8012906:	60fb      	str	r3, [r7, #12]
    if (p_netif->state == NET_STATE_CONNECTED)
 8012908:	e00e      	b.n	8012928 <net_if_get_ip_address+0x74>
    }
  }
  else
  {
    NET_DBG_ERROR("Invalid interface.\n");
 801290a:	f44f 72f9 	mov.w	r2, #498	; 0x1f2
 801290e:	4909      	ldr	r1, [pc, #36]	; (8012934 <net_if_get_ip_address+0x80>)
 8012910:	4809      	ldr	r0, [pc, #36]	; (8012938 <net_if_get_ip_address+0x84>)
 8012912:	f004 f80f 	bl	8016934 <iprintf>
 8012916:	480a      	ldr	r0, [pc, #40]	; (8012940 <net_if_get_ip_address+0x8c>)
 8012918:	f004 f87a 	bl	8016a10 <puts>
 801291c:	200a      	movs	r0, #10
 801291e:	f004 f81b 	bl	8016958 <putchar>
    ret = NET_ERROR_PARAMETER;
 8012922:	f06f 0303 	mvn.w	r3, #3
 8012926:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 8012928:	68fb      	ldr	r3, [r7, #12]
}
 801292a:	4618      	mov	r0, r3
 801292c:	3710      	adds	r7, #16
 801292e:	46bd      	mov	sp, r7
 8012930:	bd80      	pop	{r7, pc}
 8012932:	bf00      	nop
 8012934:	0801ae00 	.word	0x0801ae00
 8012938:	0801ae64 	.word	0x0801ae64
 801293c:	0801af80 	.word	0x0801af80
 8012940:	0801aeb8 	.word	0x0801aeb8

08012944 <net_if_set_dhcp_mode>:
  * @param  pnetif a pointer to an allocated network interface structure
  * @param  mode is a boolean, true to activate DHCP
  * @retval 0 in case of success, an error code otherwise
  */
int32_t net_if_set_dhcp_mode(net_if_handle_t *pnetif, bool mode)
{
 8012944:	b580      	push	{r7, lr}
 8012946:	b084      	sub	sp, #16
 8012948:	af00      	add	r7, sp, #0
 801294a:	6078      	str	r0, [r7, #4]
 801294c:	460b      	mov	r3, r1
 801294e:	70fb      	strb	r3, [r7, #3]
  int32_t ret = NET_ERROR_FRAMEWORK;
 8012950:	f06f 0318 	mvn.w	r3, #24
 8012954:	60fb      	str	r3, [r7, #12]
  net_if_handle_t *const p_netif = netif_check(pnetif);
 8012956:	6878      	ldr	r0, [r7, #4]
 8012958:	f7ff fe94 	bl	8012684 <netif_check>
 801295c:	60b8      	str	r0, [r7, #8]

  if (p_netif != NULL)
 801295e:	68bb      	ldr	r3, [r7, #8]
 8012960:	2b00      	cmp	r3, #0
 8012962:	d005      	beq.n	8012970 <net_if_set_dhcp_mode+0x2c>
  {
    p_netif->dhcp_mode = mode;
 8012964:	68bb      	ldr	r3, [r7, #8]
 8012966:	78fa      	ldrb	r2, [r7, #3]
 8012968:	f883 2020 	strb.w	r2, [r3, #32]
    ret = NET_OK;
 801296c:	2300      	movs	r3, #0
 801296e:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 8012970:	68fb      	ldr	r3, [r7, #12]
}
 8012972:	4618      	mov	r0, r3
 8012974:	3710      	adds	r7, #16
 8012976:	46bd      	mov	sp, r7
 8012978:	bd80      	pop	{r7, pc}

0801297a <net_if_set_dhcp_server_mode>:
  * @param  pnetif a pointer to an allocated network interface structure
  * @param  mode is a boolean, true to activate the DHCP server
  * @retval 0 in case of success, an error code otherwise
  */
int32_t net_if_set_dhcp_server_mode(net_if_handle_t *pnetif, bool mode)
{
 801297a:	b580      	push	{r7, lr}
 801297c:	b084      	sub	sp, #16
 801297e:	af00      	add	r7, sp, #0
 8012980:	6078      	str	r0, [r7, #4]
 8012982:	460b      	mov	r3, r1
 8012984:	70fb      	strb	r3, [r7, #3]
  int32_t ret = NET_ERROR_FRAMEWORK;
 8012986:	f06f 0318 	mvn.w	r3, #24
 801298a:	60fb      	str	r3, [r7, #12]
  net_if_handle_t *const p_netif = netif_check(pnetif);
 801298c:	6878      	ldr	r0, [r7, #4]
 801298e:	f7ff fe79 	bl	8012684 <netif_check>
 8012992:	60b8      	str	r0, [r7, #8]

  if (p_netif != NULL)
 8012994:	68bb      	ldr	r3, [r7, #8]
 8012996:	2b00      	cmp	r3, #0
 8012998:	d005      	beq.n	80129a6 <net_if_set_dhcp_server_mode+0x2c>
  {
    p_netif->dhcp_server = mode;
 801299a:	68bb      	ldr	r3, [r7, #8]
 801299c:	78fa      	ldrb	r2, [r7, #3]
 801299e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    ret = NET_OK;
 80129a2:	2300      	movs	r3, #0
 80129a4:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 80129a6:	68fb      	ldr	r3, [r7, #12]
}
 80129a8:	4618      	mov	r0, r3
 80129aa:	3710      	adds	r7, #16
 80129ac:	46bd      	mov	sp, r7
 80129ae:	bd80      	pop	{r7, pc}

080129b0 <net_if_set_ipaddr>:
  * @param  netmask is a pointer to the net_ip_addr_t structure used as the netmask
  * @retval 0 in case of success, an error code otherwise
  */
int32_t net_if_set_ipaddr(net_if_handle_t *pnetif, net_ip_addr_t ipaddr,
                          net_ip_addr_t gateway, net_ip_addr_t netmask)
{
 80129b0:	b580      	push	{r7, lr}
 80129b2:	b086      	sub	sp, #24
 80129b4:	af00      	add	r7, sp, #0
 80129b6:	60f8      	str	r0, [r7, #12]
 80129b8:	60b9      	str	r1, [r7, #8]
 80129ba:	607a      	str	r2, [r7, #4]
 80129bc:	603b      	str	r3, [r7, #0]
  int32_t ret = NET_ERROR_FRAMEWORK;
 80129be:	f06f 0318 	mvn.w	r3, #24
 80129c2:	617b      	str	r3, [r7, #20]
  net_if_handle_t *const p_netif = netif_check(pnetif);
 80129c4:	68f8      	ldr	r0, [r7, #12]
 80129c6:	f7ff fe5d 	bl	8012684 <netif_check>
 80129ca:	6138      	str	r0, [r7, #16]

  if (p_netif != NULL)
 80129cc:	693b      	ldr	r3, [r7, #16]
 80129ce:	2b00      	cmp	r3, #0
 80129d0:	d00a      	beq.n	80129e8 <net_if_set_ipaddr+0x38>
  {
    p_netif->static_ipaddr  = ipaddr;
 80129d2:	693b      	ldr	r3, [r7, #16]
 80129d4:	68ba      	ldr	r2, [r7, #8]
 80129d6:	611a      	str	r2, [r3, #16]
    p_netif->static_gateway = gateway;
 80129d8:	693b      	ldr	r3, [r7, #16]
 80129da:	687a      	ldr	r2, [r7, #4]
 80129dc:	615a      	str	r2, [r3, #20]
    p_netif->static_netmask = netmask;
 80129de:	693b      	ldr	r3, [r7, #16]
 80129e0:	683a      	ldr	r2, [r7, #0]
 80129e2:	619a      	str	r2, [r3, #24]
    ret = NET_OK;
 80129e4:	2300      	movs	r3, #0
 80129e6:	617b      	str	r3, [r7, #20]
  }
  return ret;
 80129e8:	697b      	ldr	r3, [r7, #20]
}
 80129ea:	4618      	mov	r0, r3
 80129ec:	3718      	adds	r7, #24
 80129ee:	46bd      	mov	sp, r7
 80129f0:	bd80      	pop	{r7, pc}
	...

080129f4 <net_socket_get_and_lock>:

static net_socket_t Sockets[NET_MAX_SOCKETS_NBR] = {0};


static net_socket_t *net_socket_get_and_lock(int32_t sock)
{
 80129f4:	b480      	push	{r7}
 80129f6:	b083      	sub	sp, #12
 80129f8:	af00      	add	r7, sp, #0
 80129fa:	6078      	str	r0, [r7, #4]
  LOCK_SOCK(sock);
  return &Sockets[sock];
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	222c      	movs	r2, #44	; 0x2c
 8012a00:	fb02 f303 	mul.w	r3, r2, r3
 8012a04:	4a03      	ldr	r2, [pc, #12]	; (8012a14 <net_socket_get_and_lock+0x20>)
 8012a06:	4413      	add	r3, r2
}
 8012a08:	4618      	mov	r0, r3
 8012a0a:	370c      	adds	r7, #12
 8012a0c:	46bd      	mov	sp, r7
 8012a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a12:	4770      	bx	lr
 8012a14:	2000326c 	.word	0x2000326c

08012a18 <is_valid_socket>:
  * @brief  Verify if internal socket is already allocated
  * @param  sock  [in] the internal socket index
  * @retval socket status
  */
static bool is_valid_socket(int32_t sock)
{
 8012a18:	b480      	push	{r7}
 8012a1a:	b085      	sub	sp, #20
 8012a1c:	af00      	add	r7, sp, #0
 8012a1e:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8012a20:	2300      	movs	r3, #0
 8012a22:	73fb      	strb	r3, [r7, #15]
  if ((sock >= 0) && (sock < (int32_t) NET_MAX_SOCKETS_NBR))
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	2b00      	cmp	r3, #0
 8012a28:	db0e      	blt.n	8012a48 <is_valid_socket+0x30>
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	2b04      	cmp	r3, #4
 8012a2e:	dc0b      	bgt.n	8012a48 <is_valid_socket+0x30>
  {
    if (Sockets[sock].status != SOCKET_NOT_ALIVE)
 8012a30:	4a09      	ldr	r2, [pc, #36]	; (8012a58 <is_valid_socket+0x40>)
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	212c      	movs	r1, #44	; 0x2c
 8012a36:	fb01 f303 	mul.w	r3, r1, r3
 8012a3a:	4413      	add	r3, r2
 8012a3c:	3308      	adds	r3, #8
 8012a3e:	781b      	ldrb	r3, [r3, #0]
 8012a40:	2b00      	cmp	r3, #0
 8012a42:	d001      	beq.n	8012a48 <is_valid_socket+0x30>
    {
      ret = true;
 8012a44:	2301      	movs	r3, #1
 8012a46:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 8012a48:	7bfb      	ldrb	r3, [r7, #15]
}
 8012a4a:	4618      	mov	r0, r3
 8012a4c:	3714      	adds	r7, #20
 8012a4e:	46bd      	mov	sp, r7
 8012a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a54:	4770      	bx	lr
 8012a56:	bf00      	nop
 8012a58:	2000326c 	.word	0x2000326c

08012a5c <create_low_level_socket>:
  * @brief  function description
  * @param  sock  [in] the internal socket index
  * @retval socket status
  */
static int32_t create_low_level_socket(int32_t sock)
{
 8012a5c:	b5b0      	push	{r4, r5, r7, lr}
 8012a5e:	b084      	sub	sp, #16
 8012a60:	af00      	add	r7, sp, #0
 8012a62:	6078      	str	r0, [r7, #4]
  net_socket_t *const p_socket = &Sockets[sock];
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	222c      	movs	r2, #44	; 0x2c
 8012a68:	fb02 f303 	mul.w	r3, r2, r3
 8012a6c:	4a38      	ldr	r2, [pc, #224]	; (8012b50 <create_low_level_socket+0xf4>)
 8012a6e:	4413      	add	r3, r2
 8012a70:	60fb      	str	r3, [r7, #12]

  if (p_socket->ulsocket == -1)
 8012a72:	68fb      	ldr	r3, [r7, #12]
 8012a74:	685b      	ldr	r3, [r3, #4]
 8012a76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012a7a:	d162      	bne.n	8012b42 <create_low_level_socket+0xe6>
  {
    if (net_access_control(p_socket->pnetif, NET_ACCESS_SOCKET, &p_socket->ulsocket))
 8012a7c:	68fb      	ldr	r3, [r7, #12]
 8012a7e:	6818      	ldr	r0, [r3, #0]
 8012a80:	68fb      	ldr	r3, [r7, #12]
 8012a82:	3304      	adds	r3, #4
 8012a84:	461a      	mov	r2, r3
 8012a86:	2100      	movs	r1, #0
 8012a88:	f000 fd5a 	bl	8013540 <net_access_control>
 8012a8c:	4603      	mov	r3, r0
 8012a8e:	2b00      	cmp	r3, #0
 8012a90:	d057      	beq.n	8012b42 <create_low_level_socket+0xe6>
    {
      if (0 == Sockets[sock].protocol)
 8012a92:	4a2f      	ldr	r2, [pc, #188]	; (8012b50 <create_low_level_socket+0xf4>)
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	212c      	movs	r1, #44	; 0x2c
 8012a98:	fb01 f303 	mul.w	r3, r1, r3
 8012a9c:	4413      	add	r3, r2
 8012a9e:	3314      	adds	r3, #20
 8012aa0:	681b      	ldr	r3, [r3, #0]
 8012aa2:	2b00      	cmp	r3, #0
 8012aa4:	d125      	bne.n	8012af2 <create_low_level_socket+0x96>
      {
        if (Sockets[sock].type == NET_SOCK_STREAM)
 8012aa6:	4a2a      	ldr	r2, [pc, #168]	; (8012b50 <create_low_level_socket+0xf4>)
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	212c      	movs	r1, #44	; 0x2c
 8012aac:	fb01 f303 	mul.w	r3, r1, r3
 8012ab0:	4413      	add	r3, r2
 8012ab2:	3310      	adds	r3, #16
 8012ab4:	681b      	ldr	r3, [r3, #0]
 8012ab6:	2b01      	cmp	r3, #1
 8012ab8:	d108      	bne.n	8012acc <create_low_level_socket+0x70>
        {
          Sockets[sock].protocol = NET_IPPROTO_TCP;
 8012aba:	4a25      	ldr	r2, [pc, #148]	; (8012b50 <create_low_level_socket+0xf4>)
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	212c      	movs	r1, #44	; 0x2c
 8012ac0:	fb01 f303 	mul.w	r3, r1, r3
 8012ac4:	4413      	add	r3, r2
 8012ac6:	3314      	adds	r3, #20
 8012ac8:	2206      	movs	r2, #6
 8012aca:	601a      	str	r2, [r3, #0]
        }
        if (Sockets[sock].type == NET_SOCK_DGRAM)
 8012acc:	4a20      	ldr	r2, [pc, #128]	; (8012b50 <create_low_level_socket+0xf4>)
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	212c      	movs	r1, #44	; 0x2c
 8012ad2:	fb01 f303 	mul.w	r3, r1, r3
 8012ad6:	4413      	add	r3, r2
 8012ad8:	3310      	adds	r3, #16
 8012ada:	681b      	ldr	r3, [r3, #0]
 8012adc:	2b02      	cmp	r3, #2
 8012ade:	d108      	bne.n	8012af2 <create_low_level_socket+0x96>
        {
          Sockets[sock].protocol = NET_IPPROTO_UDP;
 8012ae0:	4a1b      	ldr	r2, [pc, #108]	; (8012b50 <create_low_level_socket+0xf4>)
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	212c      	movs	r1, #44	; 0x2c
 8012ae6:	fb01 f303 	mul.w	r3, r1, r3
 8012aea:	4413      	add	r3, r2
 8012aec:	3314      	adds	r3, #20
 8012aee:	2211      	movs	r2, #17
 8012af0:	601a      	str	r2, [r3, #0]
        }
      }

      if (NULL != p_socket->pnetif->pdrv->psocket)
 8012af2:	68fb      	ldr	r3, [r7, #12]
 8012af4:	681b      	ldr	r3, [r3, #0]
 8012af6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8012afa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012afc:	2b00      	cmp	r3, #0
 8012afe:	d020      	beq.n	8012b42 <create_low_level_socket+0xe6>
      {
        p_socket->ulsocket = p_socket->pnetif->pdrv->psocket(Sockets[sock].domain,
 8012b00:	68fb      	ldr	r3, [r7, #12]
 8012b02:	681b      	ldr	r3, [r3, #0]
 8012b04:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8012b08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012b0a:	4911      	ldr	r1, [pc, #68]	; (8012b50 <create_low_level_socket+0xf4>)
 8012b0c:	687a      	ldr	r2, [r7, #4]
 8012b0e:	202c      	movs	r0, #44	; 0x2c
 8012b10:	fb00 f202 	mul.w	r2, r0, r2
 8012b14:	440a      	add	r2, r1
 8012b16:	320c      	adds	r2, #12
 8012b18:	6810      	ldr	r0, [r2, #0]
 8012b1a:	490d      	ldr	r1, [pc, #52]	; (8012b50 <create_low_level_socket+0xf4>)
 8012b1c:	687a      	ldr	r2, [r7, #4]
 8012b1e:	242c      	movs	r4, #44	; 0x2c
 8012b20:	fb04 f202 	mul.w	r2, r4, r2
 8012b24:	440a      	add	r2, r1
 8012b26:	3210      	adds	r2, #16
 8012b28:	6811      	ldr	r1, [r2, #0]
 8012b2a:	4c09      	ldr	r4, [pc, #36]	; (8012b50 <create_low_level_socket+0xf4>)
 8012b2c:	687a      	ldr	r2, [r7, #4]
 8012b2e:	252c      	movs	r5, #44	; 0x2c
 8012b30:	fb05 f202 	mul.w	r2, r5, r2
 8012b34:	4422      	add	r2, r4
 8012b36:	3214      	adds	r2, #20
 8012b38:	6812      	ldr	r2, [r2, #0]
 8012b3a:	4798      	blx	r3
 8012b3c:	4602      	mov	r2, r0
 8012b3e:	68fb      	ldr	r3, [r7, #12]
 8012b40:	605a      	str	r2, [r3, #4]
                                                             Sockets[sock].type,
                                                             Sockets[sock].protocol);
      }
    }
  }
  return p_socket->ulsocket;
 8012b42:	68fb      	ldr	r3, [r7, #12]
 8012b44:	685b      	ldr	r3, [r3, #4]
}
 8012b46:	4618      	mov	r0, r3
 8012b48:	3710      	adds	r7, #16
 8012b4a:	46bd      	mov	sp, r7
 8012b4c:	bdb0      	pop	{r4, r5, r7, pc}
 8012b4e:	bf00      	nop
 8012b50:	2000326c 	.word	0x2000326c

08012b54 <check_low_level_socket>:

static int32_t check_low_level_socket(int32_t sock)
{
 8012b54:	b580      	push	{r7, lr}
 8012b56:	b084      	sub	sp, #16
 8012b58:	af00      	add	r7, sp, #0
 8012b5a:	6078      	str	r0, [r7, #4]
  int32_t ret = -1;
 8012b5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012b60:	60fb      	str	r3, [r7, #12]

  if (is_valid_socket(sock))
 8012b62:	6878      	ldr	r0, [r7, #4]
 8012b64:	f7ff ff58 	bl	8012a18 <is_valid_socket>
 8012b68:	4603      	mov	r3, r0
 8012b6a:	2b00      	cmp	r3, #0
 8012b6c:	d008      	beq.n	8012b80 <check_low_level_socket+0x2c>
  {
    ret = Sockets[sock].ulsocket;
 8012b6e:	4a07      	ldr	r2, [pc, #28]	; (8012b8c <check_low_level_socket+0x38>)
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	212c      	movs	r1, #44	; 0x2c
 8012b74:	fb01 f303 	mul.w	r3, r1, r3
 8012b78:	4413      	add	r3, r2
 8012b7a:	3304      	adds	r3, #4
 8012b7c:	681b      	ldr	r3, [r3, #0]
 8012b7e:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 8012b80:	68fb      	ldr	r3, [r7, #12]
}
 8012b82:	4618      	mov	r0, r3
 8012b84:	3710      	adds	r7, #16
 8012b86:	46bd      	mov	sp, r7
 8012b88:	bd80      	pop	{r7, pc}
 8012b8a:	bf00      	nop
 8012b8c:	2000326c 	.word	0x2000326c

08012b90 <find_free_socket>:
/**
  * @brief  function description
  * @retval the internal socket index
  */
static int32_t find_free_socket(void)
{
 8012b90:	b580      	push	{r7, lr}
 8012b92:	b082      	sub	sp, #8
 8012b94:	af00      	add	r7, sp, #0
  int32_t ret = NET_ERROR_INVALID_SOCKET;
 8012b96:	f06f 0305 	mvn.w	r3, #5
 8012b9a:	607b      	str	r3, [r7, #4]

  LOCK_SOCK_ARRAY();

  for (int32_t sidx = 0; sidx < (int32_t)NET_MAX_SOCKETS_NBR; sidx++)
 8012b9c:	2300      	movs	r3, #0
 8012b9e:	603b      	str	r3, [r7, #0]
 8012ba0:	e06e      	b.n	8012c80 <find_free_socket+0xf0>
  {
    if (Sockets[sidx].status == SOCKET_NOT_ALIVE)
 8012ba2:	4a3b      	ldr	r2, [pc, #236]	; (8012c90 <find_free_socket+0x100>)
 8012ba4:	683b      	ldr	r3, [r7, #0]
 8012ba6:	212c      	movs	r1, #44	; 0x2c
 8012ba8:	fb01 f303 	mul.w	r3, r1, r3
 8012bac:	4413      	add	r3, r2
 8012bae:	3308      	adds	r3, #8
 8012bb0:	781b      	ldrb	r3, [r3, #0]
 8012bb2:	2b00      	cmp	r3, #0
 8012bb4:	d161      	bne.n	8012c7a <find_free_socket+0xea>
    {
      Sockets[sidx].idx      = sidx;
 8012bb6:	4a36      	ldr	r2, [pc, #216]	; (8012c90 <find_free_socket+0x100>)
 8012bb8:	683b      	ldr	r3, [r7, #0]
 8012bba:	212c      	movs	r1, #44	; 0x2c
 8012bbc:	fb01 f303 	mul.w	r3, r1, r3
 8012bc0:	4413      	add	r3, r2
 8012bc2:	3328      	adds	r3, #40	; 0x28
 8012bc4:	683a      	ldr	r2, [r7, #0]
 8012bc6:	601a      	str	r2, [r3, #0]
      Sockets[sidx].status   = SOCKET_ALLOCATED;
 8012bc8:	4a31      	ldr	r2, [pc, #196]	; (8012c90 <find_free_socket+0x100>)
 8012bca:	683b      	ldr	r3, [r7, #0]
 8012bcc:	212c      	movs	r1, #44	; 0x2c
 8012bce:	fb01 f303 	mul.w	r3, r1, r3
 8012bd2:	4413      	add	r3, r2
 8012bd4:	3308      	adds	r3, #8
 8012bd6:	2201      	movs	r2, #1
 8012bd8:	701a      	strb	r2, [r3, #0]
      Sockets[sidx].domain   = 0;
 8012bda:	4a2d      	ldr	r2, [pc, #180]	; (8012c90 <find_free_socket+0x100>)
 8012bdc:	683b      	ldr	r3, [r7, #0]
 8012bde:	212c      	movs	r1, #44	; 0x2c
 8012be0:	fb01 f303 	mul.w	r3, r1, r3
 8012be4:	4413      	add	r3, r2
 8012be6:	330c      	adds	r3, #12
 8012be8:	2200      	movs	r2, #0
 8012bea:	601a      	str	r2, [r3, #0]
      Sockets[sidx].type     = 0;
 8012bec:	4a28      	ldr	r2, [pc, #160]	; (8012c90 <find_free_socket+0x100>)
 8012bee:	683b      	ldr	r3, [r7, #0]
 8012bf0:	212c      	movs	r1, #44	; 0x2c
 8012bf2:	fb01 f303 	mul.w	r3, r1, r3
 8012bf6:	4413      	add	r3, r2
 8012bf8:	3310      	adds	r3, #16
 8012bfa:	2200      	movs	r2, #0
 8012bfc:	601a      	str	r2, [r3, #0]
      Sockets[sidx].protocol = 0;
 8012bfe:	4a24      	ldr	r2, [pc, #144]	; (8012c90 <find_free_socket+0x100>)
 8012c00:	683b      	ldr	r3, [r7, #0]
 8012c02:	212c      	movs	r1, #44	; 0x2c
 8012c04:	fb01 f303 	mul.w	r3, r1, r3
 8012c08:	4413      	add	r3, r2
 8012c0a:	3314      	adds	r3, #20
 8012c0c:	2200      	movs	r2, #0
 8012c0e:	601a      	str	r2, [r3, #0]
#ifdef NET_MBEDTLS_HOST_SUPPORT
      Sockets[sidx].is_secure = false;
      Sockets[sidx].tlsData   = NULL;
#endif /* NET_MBEDTLS_HOST_SUPPORT */
      Sockets[sidx].read_timeout  = NET_SOCK_DEFAULT_RECEIVE_TO;
 8012c10:	4a1f      	ldr	r2, [pc, #124]	; (8012c90 <find_free_socket+0x100>)
 8012c12:	683b      	ldr	r3, [r7, #0]
 8012c14:	212c      	movs	r1, #44	; 0x2c
 8012c16:	fb01 f303 	mul.w	r3, r1, r3
 8012c1a:	4413      	add	r3, r2
 8012c1c:	331c      	adds	r3, #28
 8012c1e:	f64e 2260 	movw	r2, #60000	; 0xea60
 8012c22:	601a      	str	r2, [r3, #0]
      Sockets[sidx].write_timeout = NET_SOCK_DEFAULT_SEND_TO;
 8012c24:	4a1a      	ldr	r2, [pc, #104]	; (8012c90 <find_free_socket+0x100>)
 8012c26:	683b      	ldr	r3, [r7, #0]
 8012c28:	212c      	movs	r1, #44	; 0x2c
 8012c2a:	fb01 f303 	mul.w	r3, r1, r3
 8012c2e:	4413      	add	r3, r2
 8012c30:	3320      	adds	r3, #32
 8012c32:	f64e 2260 	movw	r2, #60000	; 0xea60
 8012c36:	601a      	str	r2, [r3, #0]
      Sockets[sidx].blocking = true;
 8012c38:	4a15      	ldr	r2, [pc, #84]	; (8012c90 <find_free_socket+0x100>)
 8012c3a:	683b      	ldr	r3, [r7, #0]
 8012c3c:	212c      	movs	r1, #44	; 0x2c
 8012c3e:	fb01 f303 	mul.w	r3, r1, r3
 8012c42:	4413      	add	r3, r2
 8012c44:	3324      	adds	r3, #36	; 0x24
 8012c46:	2201      	movs	r2, #1
 8012c48:	701a      	strb	r2, [r3, #0]
      Sockets[sidx].ulsocket = -1;
 8012c4a:	4a11      	ldr	r2, [pc, #68]	; (8012c90 <find_free_socket+0x100>)
 8012c4c:	683b      	ldr	r3, [r7, #0]
 8012c4e:	212c      	movs	r1, #44	; 0x2c
 8012c50:	fb01 f303 	mul.w	r3, r1, r3
 8012c54:	4413      	add	r3, r2
 8012c56:	3304      	adds	r3, #4
 8012c58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012c5c:	601a      	str	r2, [r3, #0]
      Sockets[sidx].pnetif   = net_if_find(NULL);
 8012c5e:	2000      	movs	r0, #0
 8012c60:	f7ff fcd8 	bl	8012614 <net_if_find>
 8012c64:	4602      	mov	r2, r0
 8012c66:	490a      	ldr	r1, [pc, #40]	; (8012c90 <find_free_socket+0x100>)
 8012c68:	683b      	ldr	r3, [r7, #0]
 8012c6a:	202c      	movs	r0, #44	; 0x2c
 8012c6c:	fb00 f303 	mul.w	r3, r0, r3
 8012c70:	440b      	add	r3, r1
 8012c72:	601a      	str	r2, [r3, #0]

      LOCK_SOCK(sidx);
      ret = sidx;
 8012c74:	683b      	ldr	r3, [r7, #0]
 8012c76:	607b      	str	r3, [r7, #4]
      break;
 8012c78:	e005      	b.n	8012c86 <find_free_socket+0xf6>
  for (int32_t sidx = 0; sidx < (int32_t)NET_MAX_SOCKETS_NBR; sidx++)
 8012c7a:	683b      	ldr	r3, [r7, #0]
 8012c7c:	3301      	adds	r3, #1
 8012c7e:	603b      	str	r3, [r7, #0]
 8012c80:	683b      	ldr	r3, [r7, #0]
 8012c82:	2b04      	cmp	r3, #4
 8012c84:	dd8d      	ble.n	8012ba2 <find_free_socket+0x12>
    }
  }
  UNLOCK_SOCK_ARRAY();
  return ret;
 8012c86:	687b      	ldr	r3, [r7, #4]
}
 8012c88:	4618      	mov	r0, r3
 8012c8a:	3708      	adds	r7, #8
 8012c8c:	46bd      	mov	sp, r7
 8012c8e:	bd80      	pop	{r7, pc}
 8012c90:	2000326c 	.word	0x2000326c

08012c94 <clone_socket>:

static int32_t clone_socket(int32_t sock)
{
 8012c94:	b5b0      	push	{r4, r5, r7, lr}
 8012c96:	b084      	sub	sp, #16
 8012c98:	af00      	add	r7, sp, #0
 8012c9a:	6078      	str	r0, [r7, #4]
  const int32_t newsock = find_free_socket();
 8012c9c:	f7ff ff78 	bl	8012b90 <find_free_socket>
 8012ca0:	60f8      	str	r0, [r7, #12]

  if (newsock >= 0)
 8012ca2:	68fb      	ldr	r3, [r7, #12]
 8012ca4:	2b00      	cmp	r3, #0
 8012ca6:	db15      	blt.n	8012cd4 <clone_socket+0x40>
  {
    Sockets[newsock] = Sockets[sock];
 8012ca8:	4a0d      	ldr	r2, [pc, #52]	; (8012ce0 <clone_socket+0x4c>)
 8012caa:	68fb      	ldr	r3, [r7, #12]
 8012cac:	212c      	movs	r1, #44	; 0x2c
 8012cae:	fb01 f303 	mul.w	r3, r1, r3
 8012cb2:	18d0      	adds	r0, r2, r3
 8012cb4:	4a0a      	ldr	r2, [pc, #40]	; (8012ce0 <clone_socket+0x4c>)
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	212c      	movs	r1, #44	; 0x2c
 8012cba:	fb01 f303 	mul.w	r3, r1, r3
 8012cbe:	4413      	add	r3, r2
 8012cc0:	4604      	mov	r4, r0
 8012cc2:	461d      	mov	r5, r3
 8012cc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012cc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012cc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012cca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012ccc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8012cd0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  }
  return newsock;
 8012cd4:	68fb      	ldr	r3, [r7, #12]
}
 8012cd6:	4618      	mov	r0, r3
 8012cd8:	3710      	adds	r7, #16
 8012cda:	46bd      	mov	sp, r7
 8012cdc:	bdb0      	pop	{r4, r5, r7, pc}
 8012cde:	bf00      	nop
 8012ce0:	2000326c 	.word	0x2000326c

08012ce4 <net_socket>:
  * @param  type [in] integer should be NET_SOCK_STREAM,NET_SOCK_DGRAM or NET_SOCK_RAW
  * @param  protocol [in] integer should be NET_IPPROTO_TCP,NET_IPPROTO_ICMP,NET_IPPROTO_UDP or NET_IPPROTO_TCP_TLS
  * @retval socket number as an integer greater than zero in case of success, zero or less than zero otherwise
  */
int32_t net_socket(int32_t domain, int32_t type, int32_t protocol)
{
 8012ce4:	b580      	push	{r7, lr}
 8012ce6:	b086      	sub	sp, #24
 8012ce8:	af00      	add	r7, sp, #0
 8012cea:	60f8      	str	r0, [r7, #12]
 8012cec:	60b9      	str	r1, [r7, #8]
 8012cee:	607a      	str	r2, [r7, #4]
  const int32_t newsock = find_free_socket();
 8012cf0:	f7ff ff4e 	bl	8012b90 <find_free_socket>
 8012cf4:	6178      	str	r0, [r7, #20]

  if (newsock >= 0)
 8012cf6:	697b      	ldr	r3, [r7, #20]
 8012cf8:	2b00      	cmp	r3, #0
 8012cfa:	db1b      	blt.n	8012d34 <net_socket+0x50>
  {
    Sockets[newsock].domain   = domain;
 8012cfc:	4a15      	ldr	r2, [pc, #84]	; (8012d54 <net_socket+0x70>)
 8012cfe:	697b      	ldr	r3, [r7, #20]
 8012d00:	212c      	movs	r1, #44	; 0x2c
 8012d02:	fb01 f303 	mul.w	r3, r1, r3
 8012d06:	4413      	add	r3, r2
 8012d08:	330c      	adds	r3, #12
 8012d0a:	68fa      	ldr	r2, [r7, #12]
 8012d0c:	601a      	str	r2, [r3, #0]
    Sockets[newsock].type     = type;
 8012d0e:	4a11      	ldr	r2, [pc, #68]	; (8012d54 <net_socket+0x70>)
 8012d10:	697b      	ldr	r3, [r7, #20]
 8012d12:	212c      	movs	r1, #44	; 0x2c
 8012d14:	fb01 f303 	mul.w	r3, r1, r3
 8012d18:	4413      	add	r3, r2
 8012d1a:	3310      	adds	r3, #16
 8012d1c:	68ba      	ldr	r2, [r7, #8]
 8012d1e:	601a      	str	r2, [r3, #0]
    Sockets[newsock].protocol = protocol;
 8012d20:	4a0c      	ldr	r2, [pc, #48]	; (8012d54 <net_socket+0x70>)
 8012d22:	697b      	ldr	r3, [r7, #20]
 8012d24:	212c      	movs	r1, #44	; 0x2c
 8012d26:	fb01 f303 	mul.w	r3, r1, r3
 8012d2a:	4413      	add	r3, r2
 8012d2c:	3314      	adds	r3, #20
 8012d2e:	687a      	ldr	r2, [r7, #4]
 8012d30:	601a      	str	r2, [r3, #0]
 8012d32:	e00a      	b.n	8012d4a <net_socket+0x66>
    UNLOCK_SOCK(newsock);
  }
  else
  {
    NET_DBG_ERROR("Socket allocation failed.\n");
 8012d34:	22c0      	movs	r2, #192	; 0xc0
 8012d36:	4908      	ldr	r1, [pc, #32]	; (8012d58 <net_socket+0x74>)
 8012d38:	4808      	ldr	r0, [pc, #32]	; (8012d5c <net_socket+0x78>)
 8012d3a:	f003 fdfb 	bl	8016934 <iprintf>
 8012d3e:	4808      	ldr	r0, [pc, #32]	; (8012d60 <net_socket+0x7c>)
 8012d40:	f003 fe66 	bl	8016a10 <puts>
 8012d44:	200a      	movs	r0, #10
 8012d46:	f003 fe07 	bl	8016958 <putchar>
  }
  return newsock;
 8012d4a:	697b      	ldr	r3, [r7, #20]
}
 8012d4c:	4618      	mov	r0, r3
 8012d4e:	3718      	adds	r7, #24
 8012d50:	46bd      	mov	sp, r7
 8012d52:	bd80      	pop	{r7, pc}
 8012d54:	2000326c 	.word	0x2000326c
 8012d58:	0801afb4 	.word	0x0801afb4
 8012d5c:	0801b018 	.word	0x0801b018
 8012d60:	0801b028 	.word	0x0801b028

08012d64 <net_bind>:
  * @param  addr [in] pointer to net_sockaddr_t structure
  * @param  addrlen [in] unsigned integer length of the net_sockaddr_t
  * @retval zero in case of success, error code otherwise
  */
int32_t net_bind(int32_t sock, net_sockaddr_t *addr, uint32_t addrlen)
{
 8012d64:	b580      	push	{r7, lr}
 8012d66:	b086      	sub	sp, #24
 8012d68:	af00      	add	r7, sp, #0
 8012d6a:	60f8      	str	r0, [r7, #12]
 8012d6c:	60b9      	str	r1, [r7, #8]
 8012d6e:	607a      	str	r2, [r7, #4]
  int32_t ret = NET_ERROR_FRAMEWORK;
 8012d70:	f06f 0318 	mvn.w	r3, #24
 8012d74:	613b      	str	r3, [r7, #16]

  if (!is_valid_socket(sock))
 8012d76:	68f8      	ldr	r0, [r7, #12]
 8012d78:	f7ff fe4e 	bl	8012a18 <is_valid_socket>
 8012d7c:	4603      	mov	r3, r0
 8012d7e:	f083 0301 	eor.w	r3, r3, #1
 8012d82:	b2db      	uxtb	r3, r3
 8012d84:	2b00      	cmp	r3, #0
 8012d86:	d00e      	beq.n	8012da6 <net_bind+0x42>
  {
    NET_DBG_ERROR("Invalid socket.\n");
 8012d88:	22d2      	movs	r2, #210	; 0xd2
 8012d8a:	492d      	ldr	r1, [pc, #180]	; (8012e40 <net_bind+0xdc>)
 8012d8c:	482d      	ldr	r0, [pc, #180]	; (8012e44 <net_bind+0xe0>)
 8012d8e:	f003 fdd1 	bl	8016934 <iprintf>
 8012d92:	482d      	ldr	r0, [pc, #180]	; (8012e48 <net_bind+0xe4>)
 8012d94:	f003 fe3c 	bl	8016a10 <puts>
 8012d98:	200a      	movs	r0, #10
 8012d9a:	f003 fddd 	bl	8016958 <putchar>
    ret = NET_ERROR_INVALID_SOCKET;
 8012d9e:	f06f 0305 	mvn.w	r3, #5
 8012da2:	613b      	str	r3, [r7, #16]
 8012da4:	e047      	b.n	8012e36 <net_bind+0xd2>
  }
  else
  {
    net_socket_t *const p_socket = net_socket_get_and_lock(sock);
 8012da6:	68f8      	ldr	r0, [r7, #12]
 8012da8:	f7ff fe24 	bl	80129f4 <net_socket_get_and_lock>
 8012dac:	6178      	str	r0, [r7, #20]

#if (NET_USE_DEFAULT_INTERFACE == 1)
    if (p_socket->pnetif == NULL)
 8012dae:	697b      	ldr	r3, [r7, #20]
 8012db0:	681b      	ldr	r3, [r3, #0]
 8012db2:	2b00      	cmp	r3, #0
 8012db4:	d105      	bne.n	8012dc2 <net_bind+0x5e>
    {
      p_socket->pnetif = net_if_find(NULL);
 8012db6:	2000      	movs	r0, #0
 8012db8:	f7ff fc2c 	bl	8012614 <net_if_find>
 8012dbc:	4602      	mov	r2, r0
 8012dbe:	697b      	ldr	r3, [r7, #20]
 8012dc0:	601a      	str	r2, [r3, #0]
    }
#endif /* NET_USE_DEFAULT_INTERFACE */

    if (create_low_level_socket(sock) < 0)
 8012dc2:	68f8      	ldr	r0, [r7, #12]
 8012dc4:	f7ff fe4a 	bl	8012a5c <create_low_level_socket>
 8012dc8:	4603      	mov	r3, r0
 8012dca:	2b00      	cmp	r3, #0
 8012dcc:	da0e      	bge.n	8012dec <net_bind+0x88>
    {
      ret = NET_ERROR_SOCKET_FAILURE;
 8012dce:	f06f 0312 	mvn.w	r3, #18
 8012dd2:	613b      	str	r3, [r7, #16]
      NET_DBG_ERROR("low level socket creation failed.\n");
 8012dd4:	22e3      	movs	r2, #227	; 0xe3
 8012dd6:	491a      	ldr	r1, [pc, #104]	; (8012e40 <net_bind+0xdc>)
 8012dd8:	481a      	ldr	r0, [pc, #104]	; (8012e44 <net_bind+0xe0>)
 8012dda:	f003 fdab 	bl	8016934 <iprintf>
 8012dde:	481b      	ldr	r0, [pc, #108]	; (8012e4c <net_bind+0xe8>)
 8012de0:	f003 fe16 	bl	8016a10 <puts>
 8012de4:	200a      	movs	r0, #10
 8012de6:	f003 fdb7 	bl	8016958 <putchar>
 8012dea:	e024      	b.n	8012e36 <net_bind+0xd2>
    }
    else
    {
      if (net_access_control(p_socket->pnetif, NET_ACCESS_BIND, &ret))
 8012dec:	697b      	ldr	r3, [r7, #20]
 8012dee:	681b      	ldr	r3, [r3, #0]
 8012df0:	f107 0210 	add.w	r2, r7, #16
 8012df4:	2101      	movs	r1, #1
 8012df6:	4618      	mov	r0, r3
 8012df8:	f000 fba2 	bl	8013540 <net_access_control>
 8012dfc:	4603      	mov	r3, r0
 8012dfe:	2b00      	cmp	r3, #0
 8012e00:	d019      	beq.n	8012e36 <net_bind+0xd2>
      {
        UNLOCK_SOCK(sock);
        ret = p_socket->pnetif->pdrv->pbind(p_socket->ulsocket, addr, addrlen);
 8012e02:	697b      	ldr	r3, [r7, #20]
 8012e04:	681b      	ldr	r3, [r3, #0]
 8012e06:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8012e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012e0c:	697a      	ldr	r2, [r7, #20]
 8012e0e:	6850      	ldr	r0, [r2, #4]
 8012e10:	687a      	ldr	r2, [r7, #4]
 8012e12:	68b9      	ldr	r1, [r7, #8]
 8012e14:	4798      	blx	r3
 8012e16:	4603      	mov	r3, r0
 8012e18:	613b      	str	r3, [r7, #16]
        LOCK_SOCK(sock);
        if (ret != NET_OK)
 8012e1a:	693b      	ldr	r3, [r7, #16]
 8012e1c:	2b00      	cmp	r3, #0
 8012e1e:	d00a      	beq.n	8012e36 <net_bind+0xd2>
        {
          NET_DBG_ERROR("Socket cannot be bound.\n");
 8012e20:	22ee      	movs	r2, #238	; 0xee
 8012e22:	4907      	ldr	r1, [pc, #28]	; (8012e40 <net_bind+0xdc>)
 8012e24:	4807      	ldr	r0, [pc, #28]	; (8012e44 <net_bind+0xe0>)
 8012e26:	f003 fd85 	bl	8016934 <iprintf>
 8012e2a:	4809      	ldr	r0, [pc, #36]	; (8012e50 <net_bind+0xec>)
 8012e2c:	f003 fdf0 	bl	8016a10 <puts>
 8012e30:	200a      	movs	r0, #10
 8012e32:	f003 fd91 	bl	8016958 <putchar>
        }
      }
    }
    UNLOCK_SOCK(sock);
  }
  return ret;
 8012e36:	693b      	ldr	r3, [r7, #16]
}
 8012e38:	4618      	mov	r0, r3
 8012e3a:	3718      	adds	r7, #24
 8012e3c:	46bd      	mov	sp, r7
 8012e3e:	bd80      	pop	{r7, pc}
 8012e40:	0801afb4 	.word	0x0801afb4
 8012e44:	0801b018 	.word	0x0801b018
 8012e48:	0801b044 	.word	0x0801b044
 8012e4c:	0801b054 	.word	0x0801b054
 8012e50:	0801b078 	.word	0x0801b078

08012e54 <net_accept>:
  * @param  addr [out] pointer to net_sockaddr_t structure of remote connection
  * @param  addrlen [out] pointer to unsigned integer, length of the remote net_sockaddr_t
  * @retval socket number as an integer greater than zero in case of success, zero or less than zero otherwise
  */
int32_t net_accept(int32_t sock, net_sockaddr_t *addr, uint32_t *addrlen)
{
 8012e54:	b580      	push	{r7, lr}
 8012e56:	b088      	sub	sp, #32
 8012e58:	af00      	add	r7, sp, #0
 8012e5a:	60f8      	str	r0, [r7, #12]
 8012e5c:	60b9      	str	r1, [r7, #8]
 8012e5e:	607a      	str	r2, [r7, #4]
  int32_t newsock;

  if (!is_valid_socket(sock))
 8012e60:	68f8      	ldr	r0, [r7, #12]
 8012e62:	f7ff fdd9 	bl	8012a18 <is_valid_socket>
 8012e66:	4603      	mov	r3, r0
 8012e68:	f083 0301 	eor.w	r3, r3, #1
 8012e6c:	b2db      	uxtb	r3, r3
 8012e6e:	2b00      	cmp	r3, #0
 8012e70:	d00f      	beq.n	8012e92 <net_accept+0x3e>
  {
    NET_DBG_ERROR("Invalid socket.\n");
 8012e72:	f240 1205 	movw	r2, #261	; 0x105
 8012e76:	493d      	ldr	r1, [pc, #244]	; (8012f6c <net_accept+0x118>)
 8012e78:	483d      	ldr	r0, [pc, #244]	; (8012f70 <net_accept+0x11c>)
 8012e7a:	f003 fd5b 	bl	8016934 <iprintf>
 8012e7e:	483d      	ldr	r0, [pc, #244]	; (8012f74 <net_accept+0x120>)
 8012e80:	f003 fdc6 	bl	8016a10 <puts>
 8012e84:	200a      	movs	r0, #10
 8012e86:	f003 fd67 	bl	8016958 <putchar>
    newsock = NET_ERROR_INVALID_SOCKET;
 8012e8a:	f06f 0305 	mvn.w	r3, #5
 8012e8e:	61fb      	str	r3, [r7, #28]
 8012e90:	e067      	b.n	8012f62 <net_accept+0x10e>
  }
  else
  {
    if (check_low_level_socket(sock) < 0)
 8012e92:	68f8      	ldr	r0, [r7, #12]
 8012e94:	f7ff fe5e 	bl	8012b54 <check_low_level_socket>
 8012e98:	4603      	mov	r3, r0
 8012e9a:	2b00      	cmp	r3, #0
 8012e9c:	da0f      	bge.n	8012ebe <net_accept+0x6a>
    {
      NET_DBG_ERROR("low level Socket has not been created.\n");
 8012e9e:	f44f 7286 	mov.w	r2, #268	; 0x10c
 8012ea2:	4932      	ldr	r1, [pc, #200]	; (8012f6c <net_accept+0x118>)
 8012ea4:	4832      	ldr	r0, [pc, #200]	; (8012f70 <net_accept+0x11c>)
 8012ea6:	f003 fd45 	bl	8016934 <iprintf>
 8012eaa:	4833      	ldr	r0, [pc, #204]	; (8012f78 <net_accept+0x124>)
 8012eac:	f003 fdb0 	bl	8016a10 <puts>
 8012eb0:	200a      	movs	r0, #10
 8012eb2:	f003 fd51 	bl	8016958 <putchar>
      newsock = NET_ERROR_SOCKET_FAILURE;
 8012eb6:	f06f 0312 	mvn.w	r3, #18
 8012eba:	61fb      	str	r3, [r7, #28]
 8012ebc:	e051      	b.n	8012f62 <net_accept+0x10e>
    }
    else
    {
      net_socket_t *const p_socket = net_socket_get_and_lock(sock);
 8012ebe:	68f8      	ldr	r0, [r7, #12]
 8012ec0:	f7ff fd98 	bl	80129f4 <net_socket_get_and_lock>
 8012ec4:	61b8      	str	r0, [r7, #24]
      int32_t ulnewsock = -1;
 8012ec6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012eca:	617b      	str	r3, [r7, #20]

      if (net_access_control(p_socket->pnetif, NET_ACCESS_BIND, &ulnewsock))
 8012ecc:	69bb      	ldr	r3, [r7, #24]
 8012ece:	681b      	ldr	r3, [r3, #0]
 8012ed0:	f107 0214 	add.w	r2, r7, #20
 8012ed4:	2101      	movs	r1, #1
 8012ed6:	4618      	mov	r0, r3
 8012ed8:	f000 fb32 	bl	8013540 <net_access_control>
 8012edc:	4603      	mov	r3, r0
 8012ede:	2b00      	cmp	r3, #0
 8012ee0:	d00b      	beq.n	8012efa <net_accept+0xa6>
      {
        UNLOCK_SOCK(sock);
        ulnewsock = p_socket->pnetif->pdrv->paccept(p_socket->ulsocket, addr, addrlen);
 8012ee2:	69bb      	ldr	r3, [r7, #24]
 8012ee4:	681b      	ldr	r3, [r3, #0]
 8012ee6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8012eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012eec:	69ba      	ldr	r2, [r7, #24]
 8012eee:	6850      	ldr	r0, [r2, #4]
 8012ef0:	687a      	ldr	r2, [r7, #4]
 8012ef2:	68b9      	ldr	r1, [r7, #8]
 8012ef4:	4798      	blx	r3
 8012ef6:	4603      	mov	r3, r0
 8012ef8:	617b      	str	r3, [r7, #20]
        LOCK_SOCK(sock);

      }
      if (ulnewsock < 0)
 8012efa:	697b      	ldr	r3, [r7, #20]
 8012efc:	2b00      	cmp	r3, #0
 8012efe:	da0e      	bge.n	8012f1e <net_accept+0xca>
      {
        NET_DBG_ERROR("No connection has been established.\n");
 8012f00:	f240 121d 	movw	r2, #285	; 0x11d
 8012f04:	4919      	ldr	r1, [pc, #100]	; (8012f6c <net_accept+0x118>)
 8012f06:	481a      	ldr	r0, [pc, #104]	; (8012f70 <net_accept+0x11c>)
 8012f08:	f003 fd14 	bl	8016934 <iprintf>
 8012f0c:	481b      	ldr	r0, [pc, #108]	; (8012f7c <net_accept+0x128>)
 8012f0e:	f003 fd7f 	bl	8016a10 <puts>
 8012f12:	200a      	movs	r0, #10
 8012f14:	f003 fd20 	bl	8016958 <putchar>
        newsock = ulnewsock;
 8012f18:	697b      	ldr	r3, [r7, #20]
 8012f1a:	61fb      	str	r3, [r7, #28]
 8012f1c:	e021      	b.n	8012f62 <net_accept+0x10e>
      }
      else
      {
        Sockets[sock].status = SOCKET_CONNECTED;
 8012f1e:	4a18      	ldr	r2, [pc, #96]	; (8012f80 <net_accept+0x12c>)
 8012f20:	68fb      	ldr	r3, [r7, #12]
 8012f22:	212c      	movs	r1, #44	; 0x2c
 8012f24:	fb01 f303 	mul.w	r3, r1, r3
 8012f28:	4413      	add	r3, r2
 8012f2a:	3308      	adds	r3, #8
 8012f2c:	2202      	movs	r2, #2
 8012f2e:	701a      	strb	r2, [r3, #0]
        newsock = clone_socket(sock);
 8012f30:	68f8      	ldr	r0, [r7, #12]
 8012f32:	f7ff feaf 	bl	8012c94 <clone_socket>
 8012f36:	61f8      	str	r0, [r7, #28]
        if (newsock >= 0)
 8012f38:	69fb      	ldr	r3, [r7, #28]
 8012f3a:	2b00      	cmp	r3, #0
 8012f3c:	db11      	blt.n	8012f62 <net_accept+0x10e>
        {
          Sockets[newsock].ulsocket = ulnewsock;
 8012f3e:	697a      	ldr	r2, [r7, #20]
 8012f40:	490f      	ldr	r1, [pc, #60]	; (8012f80 <net_accept+0x12c>)
 8012f42:	69fb      	ldr	r3, [r7, #28]
 8012f44:	202c      	movs	r0, #44	; 0x2c
 8012f46:	fb00 f303 	mul.w	r3, r0, r3
 8012f4a:	440b      	add	r3, r1
 8012f4c:	3304      	adds	r3, #4
 8012f4e:	601a      	str	r2, [r3, #0]
          Sockets[newsock].cloneserver = true;
 8012f50:	4a0b      	ldr	r2, [pc, #44]	; (8012f80 <net_accept+0x12c>)
 8012f52:	69fb      	ldr	r3, [r7, #28]
 8012f54:	212c      	movs	r1, #44	; 0x2c
 8012f56:	fb01 f303 	mul.w	r3, r1, r3
 8012f5a:	4413      	add	r3, r2
 8012f5c:	3318      	adds	r3, #24
 8012f5e:	2201      	movs	r2, #1
 8012f60:	701a      	strb	r2, [r3, #0]
        }
      }
      UNLOCK_SOCK(sock);
    }
  }
  return newsock;
 8012f62:	69fb      	ldr	r3, [r7, #28]
}
 8012f64:	4618      	mov	r0, r3
 8012f66:	3720      	adds	r7, #32
 8012f68:	46bd      	mov	sp, r7
 8012f6a:	bd80      	pop	{r7, pc}
 8012f6c:	0801afb4 	.word	0x0801afb4
 8012f70:	0801b018 	.word	0x0801b018
 8012f74:	0801b044 	.word	0x0801b044
 8012f78:	0801b090 	.word	0x0801b090
 8012f7c:	0801b0b8 	.word	0x0801b0b8
 8012f80:	2000326c 	.word	0x2000326c

08012f84 <net_listen>:
  * @param  sock [in] integer socket number
  * @param  backlog [in] integer maximum number of queued connection
  * @retval zero in case of success, none zero value in case of error
  */
int32_t net_listen(int32_t sock, int32_t backlog)
{
 8012f84:	b580      	push	{r7, lr}
 8012f86:	b084      	sub	sp, #16
 8012f88:	af00      	add	r7, sp, #0
 8012f8a:	6078      	str	r0, [r7, #4]
 8012f8c:	6039      	str	r1, [r7, #0]
  int32_t ret = NET_ERROR_FRAMEWORK;
 8012f8e:	f06f 0318 	mvn.w	r3, #24
 8012f92:	60bb      	str	r3, [r7, #8]

  if (!is_valid_socket(sock))
 8012f94:	6878      	ldr	r0, [r7, #4]
 8012f96:	f7ff fd3f 	bl	8012a18 <is_valid_socket>
 8012f9a:	4603      	mov	r3, r0
 8012f9c:	f083 0301 	eor.w	r3, r3, #1
 8012fa0:	b2db      	uxtb	r3, r3
 8012fa2:	2b00      	cmp	r3, #0
 8012fa4:	d00f      	beq.n	8012fc6 <net_listen+0x42>
  {
    NET_DBG_ERROR("Invalid socket.\n");
 8012fa6:	f44f 729f 	mov.w	r2, #318	; 0x13e
 8012faa:	4929      	ldr	r1, [pc, #164]	; (8013050 <net_listen+0xcc>)
 8012fac:	4829      	ldr	r0, [pc, #164]	; (8013054 <net_listen+0xd0>)
 8012fae:	f003 fcc1 	bl	8016934 <iprintf>
 8012fb2:	4829      	ldr	r0, [pc, #164]	; (8013058 <net_listen+0xd4>)
 8012fb4:	f003 fd2c 	bl	8016a10 <puts>
 8012fb8:	200a      	movs	r0, #10
 8012fba:	f003 fccd 	bl	8016958 <putchar>
    ret = NET_ERROR_INVALID_SOCKET;
 8012fbe:	f06f 0305 	mvn.w	r3, #5
 8012fc2:	60bb      	str	r3, [r7, #8]
 8012fc4:	e03f      	b.n	8013046 <net_listen+0xc2>
  }
  else
  {
    if (check_low_level_socket(sock) < 0)
 8012fc6:	6878      	ldr	r0, [r7, #4]
 8012fc8:	f7ff fdc4 	bl	8012b54 <check_low_level_socket>
 8012fcc:	4603      	mov	r3, r0
 8012fce:	2b00      	cmp	r3, #0
 8012fd0:	da0f      	bge.n	8012ff2 <net_listen+0x6e>
    {
      NET_DBG_ERROR("low level socket has not been created.\n");
 8012fd2:	f240 1245 	movw	r2, #325	; 0x145
 8012fd6:	491e      	ldr	r1, [pc, #120]	; (8013050 <net_listen+0xcc>)
 8012fd8:	481e      	ldr	r0, [pc, #120]	; (8013054 <net_listen+0xd0>)
 8012fda:	f003 fcab 	bl	8016934 <iprintf>
 8012fde:	481f      	ldr	r0, [pc, #124]	; (801305c <net_listen+0xd8>)
 8012fe0:	f003 fd16 	bl	8016a10 <puts>
 8012fe4:	200a      	movs	r0, #10
 8012fe6:	f003 fcb7 	bl	8016958 <putchar>
      ret = NET_ERROR_SOCKET_FAILURE;
 8012fea:	f06f 0312 	mvn.w	r3, #18
 8012fee:	60bb      	str	r3, [r7, #8]
 8012ff0:	e029      	b.n	8013046 <net_listen+0xc2>
    }
    else
    {
      net_socket_t *const p_socket = net_socket_get_and_lock(sock);
 8012ff2:	6878      	ldr	r0, [r7, #4]
 8012ff4:	f7ff fcfe 	bl	80129f4 <net_socket_get_and_lock>
 8012ff8:	60f8      	str	r0, [r7, #12]
      if (net_access_control(p_socket->pnetif, NET_ACCESS_LISTEN, &ret))
 8012ffa:	68fb      	ldr	r3, [r7, #12]
 8012ffc:	681b      	ldr	r3, [r3, #0]
 8012ffe:	f107 0208 	add.w	r2, r7, #8
 8013002:	2102      	movs	r1, #2
 8013004:	4618      	mov	r0, r3
 8013006:	f000 fa9b 	bl	8013540 <net_access_control>
 801300a:	4603      	mov	r3, r0
 801300c:	2b00      	cmp	r3, #0
 801300e:	d01a      	beq.n	8013046 <net_listen+0xc2>
      {
        UNLOCK_SOCK(sock);
        ret = p_socket->pnetif->pdrv->plisten(p_socket->ulsocket, backlog);
 8013010:	68fb      	ldr	r3, [r7, #12]
 8013012:	681b      	ldr	r3, [r3, #0]
 8013014:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8013018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801301a:	68fa      	ldr	r2, [r7, #12]
 801301c:	6852      	ldr	r2, [r2, #4]
 801301e:	6839      	ldr	r1, [r7, #0]
 8013020:	4610      	mov	r0, r2
 8013022:	4798      	blx	r3
 8013024:	4603      	mov	r3, r0
 8013026:	60bb      	str	r3, [r7, #8]
        LOCK_SOCK(sock);

        if (ret != NET_OK)
 8013028:	68bb      	ldr	r3, [r7, #8]
 801302a:	2b00      	cmp	r3, #0
 801302c:	d00b      	beq.n	8013046 <net_listen+0xc2>
        {
          NET_DBG_ERROR("Listen state cannot be set.\n");
 801302e:	f240 1253 	movw	r2, #339	; 0x153
 8013032:	4907      	ldr	r1, [pc, #28]	; (8013050 <net_listen+0xcc>)
 8013034:	4807      	ldr	r0, [pc, #28]	; (8013054 <net_listen+0xd0>)
 8013036:	f003 fc7d 	bl	8016934 <iprintf>
 801303a:	4809      	ldr	r0, [pc, #36]	; (8013060 <net_listen+0xdc>)
 801303c:	f003 fce8 	bl	8016a10 <puts>
 8013040:	200a      	movs	r0, #10
 8013042:	f003 fc89 	bl	8016958 <putchar>
        }
      }
      UNLOCK_SOCK(sock);
    }
  }
  return ret;
 8013046:	68bb      	ldr	r3, [r7, #8]
}
 8013048:	4618      	mov	r0, r3
 801304a:	3710      	adds	r7, #16
 801304c:	46bd      	mov	sp, r7
 801304e:	bd80      	pop	{r7, pc}
 8013050:	0801afb4 	.word	0x0801afb4
 8013054:	0801b018 	.word	0x0801b018
 8013058:	0801b044 	.word	0x0801b044
 801305c:	0801b0dc 	.word	0x0801b0dc
 8013060:	0801b104 	.word	0x0801b104

08013064 <net_send>:
  * @param  buf [in] pointer to an array of unsigned byte
  * @param  len [in] number of byte to send
  * @retval number of byte transmitted, negative value in case of error or timeout
  */
int32_t net_send(int32_t sock, const uint8_t *buf, uint32_t len, int32_t flags)
{
 8013064:	b590      	push	{r4, r7, lr}
 8013066:	b087      	sub	sp, #28
 8013068:	af00      	add	r7, sp, #0
 801306a:	60f8      	str	r0, [r7, #12]
 801306c:	60b9      	str	r1, [r7, #8]
 801306e:	607a      	str	r2, [r7, #4]
 8013070:	603b      	str	r3, [r7, #0]
  int32_t ret = NET_ERROR_FRAMEWORK;
 8013072:	f06f 0318 	mvn.w	r3, #24
 8013076:	613b      	str	r3, [r7, #16]

  if (!is_valid_socket(sock))
 8013078:	68f8      	ldr	r0, [r7, #12]
 801307a:	f7ff fccd 	bl	8012a18 <is_valid_socket>
 801307e:	4603      	mov	r3, r0
 8013080:	f083 0301 	eor.w	r3, r3, #1
 8013084:	b2db      	uxtb	r3, r3
 8013086:	2b00      	cmp	r3, #0
 8013088:	d00f      	beq.n	80130aa <net_send+0x46>
  {
    NET_DBG_ERROR("Invalid socket.\n");
 801308a:	f44f 72e9 	mov.w	r2, #466	; 0x1d2
 801308e:	492f      	ldr	r1, [pc, #188]	; (801314c <net_send+0xe8>)
 8013090:	482f      	ldr	r0, [pc, #188]	; (8013150 <net_send+0xec>)
 8013092:	f003 fc4f 	bl	8016934 <iprintf>
 8013096:	482f      	ldr	r0, [pc, #188]	; (8013154 <net_send+0xf0>)
 8013098:	f003 fcba 	bl	8016a10 <puts>
 801309c:	200a      	movs	r0, #10
 801309e:	f003 fc5b 	bl	8016958 <putchar>
    ret = NET_ERROR_INVALID_SOCKET;
 80130a2:	f06f 0305 	mvn.w	r3, #5
 80130a6:	613b      	str	r3, [r7, #16]
 80130a8:	e04b      	b.n	8013142 <net_send+0xde>
  }
  else
  {
    if (buf == NULL)
 80130aa:	68bb      	ldr	r3, [r7, #8]
 80130ac:	2b00      	cmp	r3, #0
 80130ae:	d103      	bne.n	80130b8 <net_send+0x54>
    {
      ret = NET_ERROR_INVALID_SOCKET;
 80130b0:	f06f 0305 	mvn.w	r3, #5
 80130b4:	613b      	str	r3, [r7, #16]
 80130b6:	e044      	b.n	8013142 <net_send+0xde>
    }
    else
    {
      if (check_low_level_socket(sock) < 0)
 80130b8:	68f8      	ldr	r0, [r7, #12]
 80130ba:	f7ff fd4b 	bl	8012b54 <check_low_level_socket>
 80130be:	4603      	mov	r3, r0
 80130c0:	2b00      	cmp	r3, #0
 80130c2:	da0f      	bge.n	80130e4 <net_send+0x80>
      {
        NET_DBG_ERROR("low level socket has not been created.\n");
 80130c4:	f240 12df 	movw	r2, #479	; 0x1df
 80130c8:	4920      	ldr	r1, [pc, #128]	; (801314c <net_send+0xe8>)
 80130ca:	4821      	ldr	r0, [pc, #132]	; (8013150 <net_send+0xec>)
 80130cc:	f003 fc32 	bl	8016934 <iprintf>
 80130d0:	4821      	ldr	r0, [pc, #132]	; (8013158 <net_send+0xf4>)
 80130d2:	f003 fc9d 	bl	8016a10 <puts>
 80130d6:	200a      	movs	r0, #10
 80130d8:	f003 fc3e 	bl	8016958 <putchar>
        ret = NET_ERROR_SOCKET_FAILURE;
 80130dc:	f06f 0312 	mvn.w	r3, #18
 80130e0:	613b      	str	r3, [r7, #16]
 80130e2:	e02e      	b.n	8013142 <net_send+0xde>
      }
      else
      {
        net_socket_t *const p_socket = net_socket_get_and_lock(sock);
 80130e4:	68f8      	ldr	r0, [r7, #12]
 80130e6:	f7ff fc85 	bl	80129f4 <net_socket_get_and_lock>
 80130ea:	6178      	str	r0, [r7, #20]
          ret = (int32_t) net_mbedtls_sock_send(p_socket, buf, len);
        }
        else
#endif /* NET_MBEDTLS_HOST_SUPPORT */
        {
          if (net_access_control(p_socket->pnetif, NET_ACCESS_SEND, &ret))
 80130ec:	697b      	ldr	r3, [r7, #20]
 80130ee:	681b      	ldr	r3, [r3, #0]
 80130f0:	f107 0210 	add.w	r2, r7, #16
 80130f4:	2104      	movs	r1, #4
 80130f6:	4618      	mov	r0, r3
 80130f8:	f000 fa22 	bl	8013540 <net_access_control>
 80130fc:	4603      	mov	r3, r0
 80130fe:	2b00      	cmp	r3, #0
 8013100:	d01f      	beq.n	8013142 <net_send+0xde>
          {
            UNLOCK_SOCK(sock);
            ret = p_socket->pnetif->pdrv->psend(p_socket->ulsocket, buf, (int32_t)len, flags);
 8013102:	697b      	ldr	r3, [r7, #20]
 8013104:	681b      	ldr	r3, [r3, #0]
 8013106:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 801310a:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 801310c:	697b      	ldr	r3, [r7, #20]
 801310e:	6858      	ldr	r0, [r3, #4]
 8013110:	687a      	ldr	r2, [r7, #4]
 8013112:	683b      	ldr	r3, [r7, #0]
 8013114:	68b9      	ldr	r1, [r7, #8]
 8013116:	47a0      	blx	r4
 8013118:	4603      	mov	r3, r0
 801311a:	613b      	str	r3, [r7, #16]
            LOCK_SOCK(sock);

            if ((ret < 0) && (ret != NET_ERROR_DISCONNECTED))
 801311c:	693b      	ldr	r3, [r7, #16]
 801311e:	2b00      	cmp	r3, #0
 8013120:	da0f      	bge.n	8013142 <net_send+0xde>
 8013122:	693b      	ldr	r3, [r7, #16]
 8013124:	f113 0f16 	cmn.w	r3, #22
 8013128:	d00b      	beq.n	8013142 <net_send+0xde>
            {
              NET_DBG_ERROR("Error during sending data.\n");
 801312a:	f44f 72fb 	mov.w	r2, #502	; 0x1f6
 801312e:	4907      	ldr	r1, [pc, #28]	; (801314c <net_send+0xe8>)
 8013130:	4807      	ldr	r0, [pc, #28]	; (8013150 <net_send+0xec>)
 8013132:	f003 fbff 	bl	8016934 <iprintf>
 8013136:	4809      	ldr	r0, [pc, #36]	; (801315c <net_send+0xf8>)
 8013138:	f003 fc6a 	bl	8016a10 <puts>
 801313c:	200a      	movs	r0, #10
 801313e:	f003 fc0b 	bl	8016958 <putchar>
        }
        UNLOCK_SOCK(sock);
      }
    }
  }
  return ret;
 8013142:	693b      	ldr	r3, [r7, #16]
}
 8013144:	4618      	mov	r0, r3
 8013146:	371c      	adds	r7, #28
 8013148:	46bd      	mov	sp, r7
 801314a:	bd90      	pop	{r4, r7, pc}
 801314c:	0801afb4 	.word	0x0801afb4
 8013150:	0801b018 	.word	0x0801b018
 8013154:	0801b044 	.word	0x0801b044
 8013158:	0801b0dc 	.word	0x0801b0dc
 801315c:	0801b194 	.word	0x0801b194

08013160 <net_recv>:
  * @param  len [in] number of byte to read
  * @param  flags [in] specify blocking or non blocking, 0 is blocking mode, NET_MSG_DONTWAIT is non blocking
  * @retval number of byte received, negative value in case of error or timeout
  */
int32_t net_recv(int32_t sock, uint8_t *buf, uint32_t len, int32_t flags_in)
{
 8013160:	b590      	push	{r4, r7, lr}
 8013162:	b089      	sub	sp, #36	; 0x24
 8013164:	af00      	add	r7, sp, #0
 8013166:	60f8      	str	r0, [r7, #12]
 8013168:	60b9      	str	r1, [r7, #8]
 801316a:	607a      	str	r2, [r7, #4]
 801316c:	603b      	str	r3, [r7, #0]
  int32_t ret = NET_ERROR_FRAMEWORK;
 801316e:	f06f 0318 	mvn.w	r3, #24
 8013172:	617b      	str	r3, [r7, #20]
  int32_t flags = flags_in;
 8013174:	683b      	ldr	r3, [r7, #0]
 8013176:	61fb      	str	r3, [r7, #28]


  if (!is_valid_socket(sock))
 8013178:	68f8      	ldr	r0, [r7, #12]
 801317a:	f7ff fc4d 	bl	8012a18 <is_valid_socket>
 801317e:	4603      	mov	r3, r0
 8013180:	f083 0301 	eor.w	r3, r3, #1
 8013184:	b2db      	uxtb	r3, r3
 8013186:	2b00      	cmp	r3, #0
 8013188:	d00f      	beq.n	80131aa <net_recv+0x4a>
  {
    NET_DBG_ERROR("Invalid socket.\n");
 801318a:	f240 2212 	movw	r2, #530	; 0x212
 801318e:	4935      	ldr	r1, [pc, #212]	; (8013264 <net_recv+0x104>)
 8013190:	4835      	ldr	r0, [pc, #212]	; (8013268 <net_recv+0x108>)
 8013192:	f003 fbcf 	bl	8016934 <iprintf>
 8013196:	4835      	ldr	r0, [pc, #212]	; (801326c <net_recv+0x10c>)
 8013198:	f003 fc3a 	bl	8016a10 <puts>
 801319c:	200a      	movs	r0, #10
 801319e:	f003 fbdb 	bl	8016958 <putchar>
    ret = NET_ERROR_INVALID_SOCKET;
 80131a2:	f06f 0305 	mvn.w	r3, #5
 80131a6:	617b      	str	r3, [r7, #20]
 80131a8:	e057      	b.n	801325a <net_recv+0xfa>
  }
  else
  {
    if (buf == NULL)
 80131aa:	68bb      	ldr	r3, [r7, #8]
 80131ac:	2b00      	cmp	r3, #0
 80131ae:	d103      	bne.n	80131b8 <net_recv+0x58>
    {
      ret = NET_ERROR_INVALID_SOCKET;
 80131b0:	f06f 0305 	mvn.w	r3, #5
 80131b4:	617b      	str	r3, [r7, #20]
 80131b6:	e050      	b.n	801325a <net_recv+0xfa>
    }
    else
    {
      if (check_low_level_socket(sock) < 0)
 80131b8:	68f8      	ldr	r0, [r7, #12]
 80131ba:	f7ff fccb 	bl	8012b54 <check_low_level_socket>
 80131be:	4603      	mov	r3, r0
 80131c0:	2b00      	cmp	r3, #0
 80131c2:	da0f      	bge.n	80131e4 <net_recv+0x84>
      {
        NET_DBG_ERROR("low level socket has not been created.\n");
 80131c4:	f240 221f 	movw	r2, #543	; 0x21f
 80131c8:	4926      	ldr	r1, [pc, #152]	; (8013264 <net_recv+0x104>)
 80131ca:	4827      	ldr	r0, [pc, #156]	; (8013268 <net_recv+0x108>)
 80131cc:	f003 fbb2 	bl	8016934 <iprintf>
 80131d0:	4827      	ldr	r0, [pc, #156]	; (8013270 <net_recv+0x110>)
 80131d2:	f003 fc1d 	bl	8016a10 <puts>
 80131d6:	200a      	movs	r0, #10
 80131d8:	f003 fbbe 	bl	8016958 <putchar>
        ret = NET_ERROR_SOCKET_FAILURE;
 80131dc:	f06f 0312 	mvn.w	r3, #18
 80131e0:	617b      	str	r3, [r7, #20]
 80131e2:	e03a      	b.n	801325a <net_recv+0xfa>
      }
      else
      {
        net_socket_t *const p_socket = net_socket_get_and_lock(sock);
 80131e4:	68f8      	ldr	r0, [r7, #12]
 80131e6:	f7ff fc05 	bl	80129f4 <net_socket_get_and_lock>
 80131ea:	61b8      	str	r0, [r7, #24]
          ret = net_mbedtls_sock_recv(p_socket, buf, len);
        }
        else
#endif /* NET_MBEDTLS_HOST_SUPPORT */
        {
          if (net_access_control(p_socket->pnetif, NET_ACCESS_RECV, &ret))
 80131ec:	69bb      	ldr	r3, [r7, #24]
 80131ee:	681b      	ldr	r3, [r3, #0]
 80131f0:	f107 0214 	add.w	r2, r7, #20
 80131f4:	2106      	movs	r1, #6
 80131f6:	4618      	mov	r0, r3
 80131f8:	f000 f9a2 	bl	8013540 <net_access_control>
 80131fc:	4603      	mov	r3, r0
 80131fe:	2b00      	cmp	r3, #0
 8013200:	d02b      	beq.n	801325a <net_recv+0xfa>
          {
            UNLOCK_SOCK(sock);
            if (p_socket->read_timeout == 0)
 8013202:	69bb      	ldr	r3, [r7, #24]
 8013204:	69db      	ldr	r3, [r3, #28]
 8013206:	2b00      	cmp	r3, #0
 8013208:	d101      	bne.n	801320e <net_recv+0xae>
            {
              flags = (int8_t) NET_MSG_DONTWAIT;
 801320a:	2308      	movs	r3, #8
 801320c:	61fb      	str	r3, [r7, #28]
            }
            ret = p_socket->pnetif->pdrv->precv(p_socket->ulsocket, buf, (int32_t)len, flags);
 801320e:	69bb      	ldr	r3, [r7, #24]
 8013210:	681b      	ldr	r3, [r3, #0]
 8013212:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8013216:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8013218:	69bb      	ldr	r3, [r7, #24]
 801321a:	6858      	ldr	r0, [r3, #4]
 801321c:	687a      	ldr	r2, [r7, #4]
 801321e:	69fb      	ldr	r3, [r7, #28]
 8013220:	68b9      	ldr	r1, [r7, #8]
 8013222:	47a0      	blx	r4
 8013224:	4603      	mov	r3, r0
 8013226:	617b      	str	r3, [r7, #20]
            LOCK_SOCK(sock);
            if ((ret < 0) && (ret != NET_TIMEOUT) && (ret != NET_ERROR_DISCONNECTED))
 8013228:	697b      	ldr	r3, [r7, #20]
 801322a:	2b00      	cmp	r3, #0
 801322c:	da15      	bge.n	801325a <net_recv+0xfa>
 801322e:	697b      	ldr	r3, [r7, #20]
 8013230:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013234:	d011      	beq.n	801325a <net_recv+0xfa>
 8013236:	697b      	ldr	r3, [r7, #20]
 8013238:	f113 0f16 	cmn.w	r3, #22
 801323c:	d00d      	beq.n	801325a <net_recv+0xfa>
            {
              NET_DBG_ERROR("Error (%"PRId32") during receiving data.\n", ret);
 801323e:	f240 2239 	movw	r2, #569	; 0x239
 8013242:	4908      	ldr	r1, [pc, #32]	; (8013264 <net_recv+0x104>)
 8013244:	4808      	ldr	r0, [pc, #32]	; (8013268 <net_recv+0x108>)
 8013246:	f003 fb75 	bl	8016934 <iprintf>
 801324a:	697b      	ldr	r3, [r7, #20]
 801324c:	4619      	mov	r1, r3
 801324e:	4809      	ldr	r0, [pc, #36]	; (8013274 <net_recv+0x114>)
 8013250:	f003 fb70 	bl	8016934 <iprintf>
 8013254:	200a      	movs	r0, #10
 8013256:	f003 fb7f 	bl	8016958 <putchar>
        UNLOCK_SOCK(sock);
      }
    }
  }

  return ret;
 801325a:	697b      	ldr	r3, [r7, #20]
}
 801325c:	4618      	mov	r0, r3
 801325e:	3724      	adds	r7, #36	; 0x24
 8013260:	46bd      	mov	sp, r7
 8013262:	bd90      	pop	{r4, r7, pc}
 8013264:	0801afb4 	.word	0x0801afb4
 8013268:	0801b018 	.word	0x0801b018
 801326c:	0801b044 	.word	0x0801b044
 8013270:	0801b0dc 	.word	0x0801b0dc
 8013274:	0801b1b0 	.word	0x0801b1b0

08013278 <net_closesocket>:
  * @brief  close a socket
  * @param  sock [in] integer socket number
  * @retval zero on success, negative value in case of error
  */
int32_t net_closesocket(int32_t sock)
{
 8013278:	b580      	push	{r7, lr}
 801327a:	b084      	sub	sp, #16
 801327c:	af00      	add	r7, sp, #0
 801327e:	6078      	str	r0, [r7, #4]
  int32_t ret = NET_ERROR_FRAMEWORK;
 8013280:	f06f 0318 	mvn.w	r3, #24
 8013284:	60bb      	str	r3, [r7, #8]

  if (!is_valid_socket(sock))
 8013286:	6878      	ldr	r0, [r7, #4]
 8013288:	f7ff fbc6 	bl	8012a18 <is_valid_socket>
 801328c:	4603      	mov	r3, r0
 801328e:	f083 0301 	eor.w	r3, r3, #1
 8013292:	b2db      	uxtb	r3, r3
 8013294:	2b00      	cmp	r3, #0
 8013296:	d00f      	beq.n	80132b8 <net_closesocket+0x40>
  {
    NET_WARNING("Invalid socket, can not close it.\n");
 8013298:	f240 22fb 	movw	r2, #763	; 0x2fb
 801329c:	4931      	ldr	r1, [pc, #196]	; (8013364 <net_closesocket+0xec>)
 801329e:	4832      	ldr	r0, [pc, #200]	; (8013368 <net_closesocket+0xf0>)
 80132a0:	f003 fb48 	bl	8016934 <iprintf>
 80132a4:	4831      	ldr	r0, [pc, #196]	; (801336c <net_closesocket+0xf4>)
 80132a6:	f003 fbb3 	bl	8016a10 <puts>
 80132aa:	200a      	movs	r0, #10
 80132ac:	f003 fb54 	bl	8016958 <putchar>
    ret = NET_ERROR_INVALID_SOCKET;
 80132b0:	f06f 0305 	mvn.w	r3, #5
 80132b4:	60bb      	str	r3, [r7, #8]
 80132b6:	e04f      	b.n	8013358 <net_closesocket+0xe0>
  }
  else
  {
    net_socket_t *const p_socket = net_socket_get_and_lock(sock);
 80132b8:	6878      	ldr	r0, [r7, #4]
 80132ba:	f7ff fb9b 	bl	80129f4 <net_socket_get_and_lock>
 80132be:	60f8      	str	r0, [r7, #12]
      }
      p_socket->is_secure = false;
    }
#endif /* NET_MBEDTLS_HOST_SUPPORT */

    if (check_low_level_socket(sock) < 0)
 80132c0:	6878      	ldr	r0, [r7, #4]
 80132c2:	f7ff fc47 	bl	8012b54 <check_low_level_socket>
 80132c6:	4603      	mov	r3, r0
 80132c8:	2b00      	cmp	r3, #0
 80132ca:	da17      	bge.n	80132fc <net_closesocket+0x84>
    {
      NET_WARNING("Failed to close: low level socket not existing.\n");
 80132cc:	f44f 7244 	mov.w	r2, #784	; 0x310
 80132d0:	4924      	ldr	r1, [pc, #144]	; (8013364 <net_closesocket+0xec>)
 80132d2:	4825      	ldr	r0, [pc, #148]	; (8013368 <net_closesocket+0xf0>)
 80132d4:	f003 fb2e 	bl	8016934 <iprintf>
 80132d8:	4825      	ldr	r0, [pc, #148]	; (8013370 <net_closesocket+0xf8>)
 80132da:	f003 fb99 	bl	8016a10 <puts>
 80132de:	200a      	movs	r0, #10
 80132e0:	f003 fb3a 	bl	8016958 <putchar>
      Sockets[sock].status = SOCKET_NOT_ALIVE;
 80132e4:	4a23      	ldr	r2, [pc, #140]	; (8013374 <net_closesocket+0xfc>)
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	212c      	movs	r1, #44	; 0x2c
 80132ea:	fb01 f303 	mul.w	r3, r1, r3
 80132ee:	4413      	add	r3, r2
 80132f0:	3308      	adds	r3, #8
 80132f2:	2200      	movs	r2, #0
 80132f4:	701a      	strb	r2, [r3, #0]
      ret = NET_OK;
 80132f6:	2300      	movs	r3, #0
 80132f8:	60bb      	str	r3, [r7, #8]
 80132fa:	e02d      	b.n	8013358 <net_closesocket+0xe0>
    }
    else
    {
      if (net_access_control(p_socket->pnetif, NET_ACCESS_CLOSE, &ret))
 80132fc:	68fb      	ldr	r3, [r7, #12]
 80132fe:	681b      	ldr	r3, [r3, #0]
 8013300:	f107 0208 	add.w	r2, r7, #8
 8013304:	2108      	movs	r1, #8
 8013306:	4618      	mov	r0, r3
 8013308:	f000 f91a 	bl	8013540 <net_access_control>
 801330c:	4603      	mov	r3, r0
 801330e:	2b00      	cmp	r3, #0
 8013310:	d022      	beq.n	8013358 <net_closesocket+0xe0>
      {
        UNLOCK_SOCK(sock);
        ret = p_socket->pnetif->pdrv->pclose(p_socket->ulsocket, p_socket->cloneserver);
 8013312:	68fb      	ldr	r3, [r7, #12]
 8013314:	681b      	ldr	r3, [r3, #0]
 8013316:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 801331a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801331c:	68fa      	ldr	r2, [r7, #12]
 801331e:	6850      	ldr	r0, [r2, #4]
 8013320:	68fa      	ldr	r2, [r7, #12]
 8013322:	7e12      	ldrb	r2, [r2, #24]
 8013324:	4611      	mov	r1, r2
 8013326:	4798      	blx	r3
 8013328:	4603      	mov	r3, r0
 801332a:	60bb      	str	r3, [r7, #8]
        LOCK_SOCK(sock);

        if (ret != NET_OK)
 801332c:	68bb      	ldr	r3, [r7, #8]
 801332e:	2b00      	cmp	r3, #0
 8013330:	d00b      	beq.n	801334a <net_closesocket+0xd2>
        {
          NET_DBG_ERROR("Socket cannot be closed.\n");
 8013332:	f240 321e 	movw	r2, #798	; 0x31e
 8013336:	490b      	ldr	r1, [pc, #44]	; (8013364 <net_closesocket+0xec>)
 8013338:	480f      	ldr	r0, [pc, #60]	; (8013378 <net_closesocket+0x100>)
 801333a:	f003 fafb 	bl	8016934 <iprintf>
 801333e:	480f      	ldr	r0, [pc, #60]	; (801337c <net_closesocket+0x104>)
 8013340:	f003 fb66 	bl	8016a10 <puts>
 8013344:	200a      	movs	r0, #10
 8013346:	f003 fb07 	bl	8016958 <putchar>
        }
        p_socket->ulsocket = -1;
 801334a:	68fb      	ldr	r3, [r7, #12]
 801334c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013350:	605a      	str	r2, [r3, #4]
        p_socket->status = SOCKET_NOT_ALIVE;
 8013352:	68fb      	ldr	r3, [r7, #12]
 8013354:	2200      	movs	r2, #0
 8013356:	721a      	strb	r2, [r3, #8]
      }
    }
    UNLOCK_SOCK(sock);
  }

  return ret;
 8013358:	68bb      	ldr	r3, [r7, #8]
}
 801335a:	4618      	mov	r0, r3
 801335c:	3710      	adds	r7, #16
 801335e:	46bd      	mov	sp, r7
 8013360:	bd80      	pop	{r7, pc}
 8013362:	bf00      	nop
 8013364:	0801afb4 	.word	0x0801afb4
 8013368:	0801b1d4 	.word	0x0801b1d4
 801336c:	0801b234 	.word	0x0801b234
 8013370:	0801b258 	.word	0x0801b258
 8013374:	2000326c 	.word	0x2000326c
 8013378:	0801b018 	.word	0x0801b018
 801337c:	0801b288 	.word	0x0801b288

08013380 <net_setsockopt>:
  * @param  optvalue [in] void pointer to the wanted option value
  * @param  optlen [in] length of data pointed by optvalue
  * @retval zero on success, negative value in case of error
  */
int32_t net_setsockopt(int32_t sock, int32_t level, net_socketoption_t optname, const void *optvalue, uint32_t optlen)
{
 8013380:	b590      	push	{r4, r7, lr}
 8013382:	b08b      	sub	sp, #44	; 0x2c
 8013384:	af02      	add	r7, sp, #8
 8013386:	60f8      	str	r0, [r7, #12]
 8013388:	60b9      	str	r1, [r7, #8]
 801338a:	603b      	str	r3, [r7, #0]
 801338c:	4613      	mov	r3, r2
 801338e:	80fb      	strh	r3, [r7, #6]
  int32_t ret = NET_ERROR_FRAMEWORK;
 8013390:	f06f 0318 	mvn.w	r3, #24
 8013394:	617b      	str	r3, [r7, #20]
  bool forward = false;
 8013396:	2300      	movs	r3, #0
 8013398:	77fb      	strb	r3, [r7, #31]
#ifdef NET_MBEDTLS_HOST_SUPPORT
  const char_t *optvalue_string = optvalue;
#endif /* NET_MBEDTLS_HOST_SUPPORT */

  if (!is_valid_socket(sock))
 801339a:	68f8      	ldr	r0, [r7, #12]
 801339c:	f7ff fb3c 	bl	8012a18 <is_valid_socket>
 80133a0:	4603      	mov	r3, r0
 80133a2:	f083 0301 	eor.w	r3, r3, #1
 80133a6:	b2db      	uxtb	r3, r3
 80133a8:	2b00      	cmp	r3, #0
 80133aa:	d00f      	beq.n	80133cc <net_setsockopt+0x4c>
  {
    NET_DBG_ERROR("Invalid socket.\n");
 80133ac:	f240 32a6 	movw	r2, #934	; 0x3a6
 80133b0:	495d      	ldr	r1, [pc, #372]	; (8013528 <net_setsockopt+0x1a8>)
 80133b2:	485e      	ldr	r0, [pc, #376]	; (801352c <net_setsockopt+0x1ac>)
 80133b4:	f003 fabe 	bl	8016934 <iprintf>
 80133b8:	485d      	ldr	r0, [pc, #372]	; (8013530 <net_setsockopt+0x1b0>)
 80133ba:	f003 fb29 	bl	8016a10 <puts>
 80133be:	200a      	movs	r0, #10
 80133c0:	f003 faca 	bl	8016958 <putchar>
    ret = NET_ERROR_INVALID_SOCKET;
 80133c4:	f06f 0305 	mvn.w	r3, #5
 80133c8:	617b      	str	r3, [r7, #20]
 80133ca:	e0a7      	b.n	801351c <net_setsockopt+0x19c>
  }
  else
  {
    net_socket_t *const p_socket = net_socket_get_and_lock(sock);
 80133cc:	68f8      	ldr	r0, [r7, #12]
 80133ce:	f7ff fb11 	bl	80129f4 <net_socket_get_and_lock>
 80133d2:	61b8      	str	r0, [r7, #24]

    switch (optname)
 80133d4:	88fb      	ldrh	r3, [r7, #6]
 80133d6:	f241 0206 	movw	r2, #4102	; 0x1006
 80133da:	4293      	cmp	r3, r2
 80133dc:	d01b      	beq.n	8013416 <net_setsockopt+0x96>
 80133de:	f241 0206 	movw	r2, #4102	; 0x1006
 80133e2:	4293      	cmp	r3, r2
 80133e4:	dc33      	bgt.n	801344e <net_setsockopt+0xce>
 80133e6:	2b03      	cmp	r3, #3
 80133e8:	d004      	beq.n	80133f4 <net_setsockopt+0x74>
 80133ea:	f241 0205 	movw	r2, #4101	; 0x1005
 80133ee:	4293      	cmp	r3, r2
 80133f0:	d01f      	beq.n	8013432 <net_setsockopt+0xb2>
 80133f2:	e02c      	b.n	801344e <net_setsockopt+0xce>
    {
      case NET_SO_BINDTODEVICE:
      {
        OPTCHECKTYPE(void *, optlen);
 80133f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133f6:	2b04      	cmp	r3, #4
 80133f8:	d003      	beq.n	8013402 <net_setsockopt+0x82>
 80133fa:	f06f 0303 	mvn.w	r3, #3
 80133fe:	617b      	str	r3, [r7, #20]
 8013400:	e029      	b.n	8013456 <net_setsockopt+0xd6>

        p_socket->pnetif = (net_if_handle_t *)optvalue;
 8013402:	69bb      	ldr	r3, [r7, #24]
 8013404:	683a      	ldr	r2, [r7, #0]
 8013406:	601a      	str	r2, [r3, #0]
        if (p_socket->pnetif != NULL)
 8013408:	69bb      	ldr	r3, [r7, #24]
 801340a:	681b      	ldr	r3, [r3, #0]
 801340c:	2b00      	cmp	r3, #0
 801340e:	d021      	beq.n	8013454 <net_setsockopt+0xd4>
        {
          forward = true; /* forward to driver */
 8013410:	2301      	movs	r3, #1
 8013412:	77fb      	strb	r3, [r7, #31]
        }
      }
      break;
 8013414:	e01e      	b.n	8013454 <net_setsockopt+0xd4>

      case NET_SO_RCVTIMEO:
      {
        OPTCHECKTYPE(int32_t, optlen);
 8013416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013418:	2b04      	cmp	r3, #4
 801341a:	d003      	beq.n	8013424 <net_setsockopt+0xa4>
 801341c:	f06f 0303 	mvn.w	r3, #3
 8013420:	617b      	str	r3, [r7, #20]
 8013422:	e018      	b.n	8013456 <net_setsockopt+0xd6>
        p_socket->read_timeout = *(const int32_t *)optvalue;
 8013424:	683b      	ldr	r3, [r7, #0]
 8013426:	681a      	ldr	r2, [r3, #0]
 8013428:	69bb      	ldr	r3, [r7, #24]
 801342a:	61da      	str	r2, [r3, #28]

#ifdef NET_MBEDTLS_HOST_SUPPORT
        net_mbedtls_set_read_timeout(p_socket);
#endif /* NET_MBEDTLS_HOST_SUPPORT */
        forward = true;
 801342c:	2301      	movs	r3, #1
 801342e:	77fb      	strb	r3, [r7, #31]
      }
      break;
 8013430:	e011      	b.n	8013456 <net_setsockopt+0xd6>


      case NET_SO_SNDTIMEO:
      {
        OPTCHECKTYPE(int32_t, optlen);
 8013432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013434:	2b04      	cmp	r3, #4
 8013436:	d003      	beq.n	8013440 <net_setsockopt+0xc0>
 8013438:	f06f 0303 	mvn.w	r3, #3
 801343c:	617b      	str	r3, [r7, #20]
 801343e:	e00a      	b.n	8013456 <net_setsockopt+0xd6>
        p_socket->write_timeout = *(const int32_t *)optvalue;
 8013440:	683b      	ldr	r3, [r7, #0]
 8013442:	681a      	ldr	r2, [r3, #0]
 8013444:	69bb      	ldr	r3, [r7, #24]
 8013446:	621a      	str	r2, [r3, #32]

        forward = true;
 8013448:	2301      	movs	r3, #1
 801344a:	77fb      	strb	r3, [r7, #31]
      }
      break;
 801344c:	e003      	b.n	8013456 <net_setsockopt+0xd6>
        break;
      }
#endif /* NET_MBEDTLS_HOST_SUPPORT */

      default:
        forward = true;
 801344e:	2301      	movs	r3, #1
 8013450:	77fb      	strb	r3, [r7, #31]
        break;
 8013452:	e000      	b.n	8013456 <net_setsockopt+0xd6>
      break;
 8013454:	bf00      	nop
    }

    if (true == forward)
 8013456:	7ffb      	ldrb	r3, [r7, #31]
 8013458:	2b00      	cmp	r3, #0
 801345a:	d05f      	beq.n	801351c <net_setsockopt+0x19c>
    {
#if (NET_USE_DEFAULT_INTERFACE == 1)
      if (p_socket->pnetif == NULL)
 801345c:	69bb      	ldr	r3, [r7, #24]
 801345e:	681b      	ldr	r3, [r3, #0]
 8013460:	2b00      	cmp	r3, #0
 8013462:	d105      	bne.n	8013470 <net_setsockopt+0xf0>
      {
        p_socket->pnetif = net_if_find(NULL);
 8013464:	2000      	movs	r0, #0
 8013466:	f7ff f8d5 	bl	8012614 <net_if_find>
 801346a:	4602      	mov	r2, r0
 801346c:	69bb      	ldr	r3, [r7, #24]
 801346e:	601a      	str	r2, [r3, #0]
      }
#endif /* NET_USE_DEFAULT_INTERFACE */

      if (p_socket->pnetif == NULL)
 8013470:	69bb      	ldr	r3, [r7, #24]
 8013472:	681b      	ldr	r3, [r3, #0]
 8013474:	2b00      	cmp	r3, #0
 8013476:	d10f      	bne.n	8013498 <net_setsockopt+0x118>
      {
        NET_DBG_ERROR("No physical interface can be bound");
 8013478:	f240 42b1 	movw	r2, #1201	; 0x4b1
 801347c:	492a      	ldr	r1, [pc, #168]	; (8013528 <net_setsockopt+0x1a8>)
 801347e:	482b      	ldr	r0, [pc, #172]	; (801352c <net_setsockopt+0x1ac>)
 8013480:	f003 fa58 	bl	8016934 <iprintf>
 8013484:	482b      	ldr	r0, [pc, #172]	; (8013534 <net_setsockopt+0x1b4>)
 8013486:	f003 fa55 	bl	8016934 <iprintf>
 801348a:	200a      	movs	r0, #10
 801348c:	f003 fa64 	bl	8016958 <putchar>
        ret = NET_ERROR_INTERFACE_FAILURE;
 8013490:	f06f 0310 	mvn.w	r3, #16
 8013494:	617b      	str	r3, [r7, #20]
 8013496:	e041      	b.n	801351c <net_setsockopt+0x19c>
      }
      else
      {
        if (create_low_level_socket(sock) < 0)
 8013498:	68f8      	ldr	r0, [r7, #12]
 801349a:	f7ff fadf 	bl	8012a5c <create_low_level_socket>
 801349e:	4603      	mov	r3, r0
 80134a0:	2b00      	cmp	r3, #0
 80134a2:	da0f      	bge.n	80134c4 <net_setsockopt+0x144>
        {
          NET_DBG_ERROR("low level socket creation failed.\n");
 80134a4:	f44f 6297 	mov.w	r2, #1208	; 0x4b8
 80134a8:	491f      	ldr	r1, [pc, #124]	; (8013528 <net_setsockopt+0x1a8>)
 80134aa:	4820      	ldr	r0, [pc, #128]	; (801352c <net_setsockopt+0x1ac>)
 80134ac:	f003 fa42 	bl	8016934 <iprintf>
 80134b0:	4821      	ldr	r0, [pc, #132]	; (8013538 <net_setsockopt+0x1b8>)
 80134b2:	f003 faad 	bl	8016a10 <puts>
 80134b6:	200a      	movs	r0, #10
 80134b8:	f003 fa4e 	bl	8016958 <putchar>
          ret = NET_ERROR_SOCKET_FAILURE;
 80134bc:	f06f 0312 	mvn.w	r3, #18
 80134c0:	617b      	str	r3, [r7, #20]
 80134c2:	e02b      	b.n	801351c <net_setsockopt+0x19c>
        }
        else
        {
          if (net_access_control(p_socket->pnetif, NET_ACCESS_SETSOCKOPT, &ret))
 80134c4:	69bb      	ldr	r3, [r7, #24]
 80134c6:	681b      	ldr	r3, [r3, #0]
 80134c8:	f107 0214 	add.w	r2, r7, #20
 80134cc:	2109      	movs	r1, #9
 80134ce:	4618      	mov	r0, r3
 80134d0:	f000 f836 	bl	8013540 <net_access_control>
 80134d4:	4603      	mov	r3, r0
 80134d6:	2b00      	cmp	r3, #0
 80134d8:	d020      	beq.n	801351c <net_setsockopt+0x19c>
          {
            UNLOCK_SOCK(sock);
            ret = p_socket->pnetif->pdrv->psetsockopt(p_socket->ulsocket, level, optname, optvalue, optlen);
 80134da:	69bb      	ldr	r3, [r7, #24]
 80134dc:	681b      	ldr	r3, [r3, #0]
 80134de:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80134e2:	6d9c      	ldr	r4, [r3, #88]	; 0x58
 80134e4:	69bb      	ldr	r3, [r7, #24]
 80134e6:	6858      	ldr	r0, [r3, #4]
 80134e8:	88fa      	ldrh	r2, [r7, #6]
 80134ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134ec:	9300      	str	r3, [sp, #0]
 80134ee:	683b      	ldr	r3, [r7, #0]
 80134f0:	68b9      	ldr	r1, [r7, #8]
 80134f2:	47a0      	blx	r4
 80134f4:	4603      	mov	r3, r0
 80134f6:	617b      	str	r3, [r7, #20]
            LOCK_SOCK(sock);
            if (ret < 0)
 80134f8:	697b      	ldr	r3, [r7, #20]
 80134fa:	2b00      	cmp	r3, #0
 80134fc:	da0e      	bge.n	801351c <net_setsockopt+0x19c>
            {
              NET_DBG_ERROR("Error %"PRId32" while setting socket option (optname=%d).\n", ret, optname);
 80134fe:	f240 42c4 	movw	r2, #1220	; 0x4c4
 8013502:	4909      	ldr	r1, [pc, #36]	; (8013528 <net_setsockopt+0x1a8>)
 8013504:	4809      	ldr	r0, [pc, #36]	; (801352c <net_setsockopt+0x1ac>)
 8013506:	f003 fa15 	bl	8016934 <iprintf>
 801350a:	697b      	ldr	r3, [r7, #20]
 801350c:	88fa      	ldrh	r2, [r7, #6]
 801350e:	4619      	mov	r1, r3
 8013510:	480a      	ldr	r0, [pc, #40]	; (801353c <net_setsockopt+0x1bc>)
 8013512:	f003 fa0f 	bl	8016934 <iprintf>
 8013516:	200a      	movs	r0, #10
 8013518:	f003 fa1e 	bl	8016958 <putchar>
        }
      }
    }
    UNLOCK_SOCK(sock);
  }
  return ret;
 801351c:	697b      	ldr	r3, [r7, #20]
}
 801351e:	4618      	mov	r0, r3
 8013520:	3724      	adds	r7, #36	; 0x24
 8013522:	46bd      	mov	sp, r7
 8013524:	bd90      	pop	{r4, r7, pc}
 8013526:	bf00      	nop
 8013528:	0801afb4 	.word	0x0801afb4
 801352c:	0801b018 	.word	0x0801b018
 8013530:	0801b044 	.word	0x0801b044
 8013534:	0801b2e4 	.word	0x0801b2e4
 8013538:	0801b054 	.word	0x0801b054
 801353c:	0801b308 	.word	0x0801b308

08013540 <net_access_control>:

/** @defgroup Socket
  * @}
  */
bool net_access_control(net_if_handle_t *pnetif, net_access_t func, int32_t *code)
{
 8013540:	b480      	push	{r7}
 8013542:	b087      	sub	sp, #28
 8013544:	af00      	add	r7, sp, #0
 8013546:	60f8      	str	r0, [r7, #12]
 8013548:	460b      	mov	r3, r1
 801354a:	607a      	str	r2, [r7, #4]
 801354c:	72fb      	strb	r3, [r7, #11]
  bool ret = true;
 801354e:	2301      	movs	r3, #1
 8013550:	75fb      	strb	r3, [r7, #23]
  if ((pnetif == NULL) || (pnetif->state == NET_STATE_CONNECTION_LOST))
 8013552:	68fb      	ldr	r3, [r7, #12]
 8013554:	2b00      	cmp	r3, #0
 8013556:	d004      	beq.n	8013562 <net_access_control+0x22>
 8013558:	68fb      	ldr	r3, [r7, #12]
 801355a:	f893 30eb 	ldrb.w	r3, [r3, #235]	; 0xeb
 801355e:	2b08      	cmp	r3, #8
 8013560:	d104      	bne.n	801356c <net_access_control+0x2c>
  {
    /* send, receive function return zero, so user application should normally retry transfer */
    ret = false;
 8013562:	2300      	movs	r3, #0
 8013564:	75fb      	strb	r3, [r7, #23]
    *code = 0;
 8013566:	687b      	ldr	r3, [r7, #4]
 8013568:	2200      	movs	r2, #0
 801356a:	601a      	str	r2, [r3, #0]
  }

  switch (func)
 801356c:	7afb      	ldrb	r3, [r7, #11]
 801356e:	2b09      	cmp	r3, #9
 8013570:	d82f      	bhi.n	80135d2 <net_access_control+0x92>
 8013572:	a201      	add	r2, pc, #4	; (adr r2, 8013578 <net_access_control+0x38>)
 8013574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013578:	080135a1 	.word	0x080135a1
 801357c:	080135dd 	.word	0x080135dd
 8013580:	080135dd 	.word	0x080135dd
 8013584:	080135dd 	.word	0x080135dd
 8013588:	080135ad 	.word	0x080135ad
 801358c:	080135b5 	.word	0x080135b5
 8013590:	080135bd 	.word	0x080135bd
 8013594:	080135c5 	.word	0x080135c5
 8013598:	080135a7 	.word	0x080135a7
 801359c:	080135cd 	.word	0x080135cd
  {
    case NET_ACCESS_SOCKET:
      ret = true;
 80135a0:	2301      	movs	r3, #1
 80135a2:	75fb      	strb	r3, [r7, #23]
      break;
 80135a4:	e01b      	b.n	80135de <net_access_control+0x9e>

    case NET_ACCESS_CONNECT:
      break;

    case NET_ACCESS_CLOSE:
      ret = true;
 80135a6:	2301      	movs	r3, #1
 80135a8:	75fb      	strb	r3, [r7, #23]
      break;
 80135aa:	e018      	b.n	80135de <net_access_control+0x9e>

    case NET_ACCESS_SEND:
      *code = 0;
 80135ac:	687b      	ldr	r3, [r7, #4]
 80135ae:	2200      	movs	r2, #0
 80135b0:	601a      	str	r2, [r3, #0]
      break;
 80135b2:	e014      	b.n	80135de <net_access_control+0x9e>

    case NET_ACCESS_SENDTO:
      *code = 0;
 80135b4:	687b      	ldr	r3, [r7, #4]
 80135b6:	2200      	movs	r2, #0
 80135b8:	601a      	str	r2, [r3, #0]
      break;
 80135ba:	e010      	b.n	80135de <net_access_control+0x9e>

    case NET_ACCESS_RECV:
      *code = 0;
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	2200      	movs	r2, #0
 80135c0:	601a      	str	r2, [r3, #0]
      break;
 80135c2:	e00c      	b.n	80135de <net_access_control+0x9e>

    case NET_ACCESS_RECVFROM:
      *code = 0;
 80135c4:	687b      	ldr	r3, [r7, #4]
 80135c6:	2200      	movs	r2, #0
 80135c8:	601a      	str	r2, [r3, #0]
      break;
 80135ca:	e008      	b.n	80135de <net_access_control+0x9e>

    case NET_ACCESS_SETSOCKOPT:
      ret = true;
 80135cc:	2301      	movs	r3, #1
 80135ce:	75fb      	strb	r3, [r7, #23]
      break;
 80135d0:	e005      	b.n	80135de <net_access_control+0x9e>

    default:
      *code = NET_ERROR_FRAMEWORK;
 80135d2:	687b      	ldr	r3, [r7, #4]
 80135d4:	f06f 0218 	mvn.w	r2, #24
 80135d8:	601a      	str	r2, [r3, #0]
      break;
 80135da:	e000      	b.n	80135de <net_access_control+0x9e>
      break;
 80135dc:	bf00      	nop
  }
  return ret;
 80135de:	7dfb      	ldrb	r3, [r7, #23]
}
 80135e0:	4618      	mov	r0, r3
 80135e2:	371c      	adds	r7, #28
 80135e4:	46bd      	mov	sp, r7
 80135e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135ea:	4770      	bx	lr

080135ec <set_state>:
static int32_t net_state_stopping(net_if_handle_t *pnetif, net_state_event_t event);
static int32_t net_state_connection_lost(net_if_handle_t *pnetif, net_state_event_t event);


static void set_state(net_if_handle_t *pnetif, net_state_t state)
{
 80135ec:	b580      	push	{r7, lr}
 80135ee:	b082      	sub	sp, #8
 80135f0:	af00      	add	r7, sp, #0
 80135f2:	6078      	str	r0, [r7, #4]
 80135f4:	460b      	mov	r3, r1
 80135f6:	70fb      	strb	r3, [r7, #3]
  pnetif->state = state;
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	78fa      	ldrb	r2, [r7, #3]
 80135fc:	f883 20eb 	strb.w	r2, [r3, #235]	; 0xeb
  net_if_notify(pnetif, NET_EVENT_STATE_CHANGE, (uint32_t) state, NULL);
 8013600:	78fa      	ldrb	r2, [r7, #3]
 8013602:	2300      	movs	r3, #0
 8013604:	2100      	movs	r1, #0
 8013606:	6878      	ldr	r0, [r7, #4]
 8013608:	f7ff f897 	bl	801273a <net_if_notify>
  SIGNAL_STATE_CHANGE();
}
 801360c:	bf00      	nop
 801360e:	3708      	adds	r7, #8
 8013610:	46bd      	mov	sp, r7
 8013612:	bd80      	pop	{r7, pc}

08013614 <net_state_initialized>:


static int32_t net_state_initialized(net_if_handle_t *pnetif, net_state_event_t event)
{
 8013614:	b580      	push	{r7, lr}
 8013616:	b084      	sub	sp, #16
 8013618:	af00      	add	r7, sp, #0
 801361a:	6078      	str	r0, [r7, #4]
 801361c:	460b      	mov	r3, r1
 801361e:	70fb      	strb	r3, [r7, #3]
  int32_t ret = NET_OK;
 8013620:	2300      	movs	r3, #0
 8013622:	60fb      	str	r3, [r7, #12]

  switch (event)
 8013624:	78fb      	ldrb	r3, [r7, #3]
 8013626:	2b01      	cmp	r3, #1
 8013628:	d002      	beq.n	8013630 <net_state_initialized+0x1c>
 801362a:	2b05      	cmp	r3, #5
 801362c:	d01d      	beq.n	801366a <net_state_initialized+0x56>
        ret = NET_ERROR_INTERFACE_FAILURE;
      }
      break;

    default:
      break;
 801362e:	e03c      	b.n	80136aa <net_state_initialized+0x96>
      set_state(pnetif, NET_STATE_STARTING);
 8013630:	2102      	movs	r1, #2
 8013632:	6878      	ldr	r0, [r7, #4]
 8013634:	f7ff ffda 	bl	80135ec <set_state>
      ret = pnetif->pdrv->if_start(pnetif);
 8013638:	687b      	ldr	r3, [r7, #4]
 801363a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 801363e:	68db      	ldr	r3, [r3, #12]
 8013640:	6878      	ldr	r0, [r7, #4]
 8013642:	4798      	blx	r3
 8013644:	60f8      	str	r0, [r7, #12]
      if (NET_OK != ret)
 8013646:	68fb      	ldr	r3, [r7, #12]
 8013648:	2b00      	cmp	r3, #0
 801364a:	d02b      	beq.n	80136a4 <net_state_initialized+0x90>
        NET_DBG_ERROR("Interface cannot be started.\n");
 801364c:	2258      	movs	r2, #88	; 0x58
 801364e:	4919      	ldr	r1, [pc, #100]	; (80136b4 <net_state_initialized+0xa0>)
 8013650:	4819      	ldr	r0, [pc, #100]	; (80136b8 <net_state_initialized+0xa4>)
 8013652:	f003 f96f 	bl	8016934 <iprintf>
 8013656:	4819      	ldr	r0, [pc, #100]	; (80136bc <net_state_initialized+0xa8>)
 8013658:	f003 f9da 	bl	8016a10 <puts>
 801365c:	200a      	movs	r0, #10
 801365e:	f003 f97b 	bl	8016958 <putchar>
        ret = NET_ERROR_INTERFACE_FAILURE;
 8013662:	f06f 0310 	mvn.w	r3, #16
 8013666:	60fb      	str	r3, [r7, #12]
      break;
 8013668:	e01c      	b.n	80136a4 <net_state_initialized+0x90>
      ret = pnetif->pdrv->if_deinit(pnetif);
 801366a:	687b      	ldr	r3, [r7, #4]
 801366c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8013670:	689b      	ldr	r3, [r3, #8]
 8013672:	6878      	ldr	r0, [r7, #4]
 8013674:	4798      	blx	r3
 8013676:	60f8      	str	r0, [r7, #12]
      set_state(pnetif, NET_STATE_DEINITIALIZED);
 8013678:	2100      	movs	r1, #0
 801367a:	6878      	ldr	r0, [r7, #4]
 801367c:	f7ff ffb6 	bl	80135ec <set_state>
      if (NET_OK != ret)
 8013680:	68fb      	ldr	r3, [r7, #12]
 8013682:	2b00      	cmp	r3, #0
 8013684:	d010      	beq.n	80136a8 <net_state_initialized+0x94>
        NET_DBG_ERROR("Interface cannot be de-initialized.\n");
 8013686:	2262      	movs	r2, #98	; 0x62
 8013688:	490a      	ldr	r1, [pc, #40]	; (80136b4 <net_state_initialized+0xa0>)
 801368a:	480b      	ldr	r0, [pc, #44]	; (80136b8 <net_state_initialized+0xa4>)
 801368c:	f003 f952 	bl	8016934 <iprintf>
 8013690:	480b      	ldr	r0, [pc, #44]	; (80136c0 <net_state_initialized+0xac>)
 8013692:	f003 f9bd 	bl	8016a10 <puts>
 8013696:	200a      	movs	r0, #10
 8013698:	f003 f95e 	bl	8016958 <putchar>
        ret = NET_ERROR_INTERFACE_FAILURE;
 801369c:	f06f 0310 	mvn.w	r3, #16
 80136a0:	60fb      	str	r3, [r7, #12]
      break;
 80136a2:	e001      	b.n	80136a8 <net_state_initialized+0x94>
      break;
 80136a4:	bf00      	nop
 80136a6:	e000      	b.n	80136aa <net_state_initialized+0x96>
      break;
 80136a8:	bf00      	nop
  }
  return ret;
 80136aa:	68fb      	ldr	r3, [r7, #12]
}
 80136ac:	4618      	mov	r0, r3
 80136ae:	3710      	adds	r7, #16
 80136b0:	46bd      	mov	sp, r7
 80136b2:	bd80      	pop	{r7, pc}
 80136b4:	0801b340 	.word	0x0801b340
 80136b8:	0801b3a4 	.word	0x0801b3a4
 80136bc:	0801b3b4 	.word	0x0801b3b4
 80136c0:	0801b3d4 	.word	0x0801b3d4

080136c4 <net_state_starting>:


static int32_t net_state_starting(net_if_handle_t *pnetif, net_state_event_t event)
{
 80136c4:	b580      	push	{r7, lr}
 80136c6:	b084      	sub	sp, #16
 80136c8:	af00      	add	r7, sp, #0
 80136ca:	6078      	str	r0, [r7, #4]
 80136cc:	460b      	mov	r3, r1
 80136ce:	70fb      	strb	r3, [r7, #3]
  int32_t ret = NET_OK;
 80136d0:	2300      	movs	r3, #0
 80136d2:	60fb      	str	r3, [r7, #12]

  switch (event)
 80136d4:	78fb      	ldrb	r3, [r7, #3]
 80136d6:	2b04      	cmp	r3, #4
 80136d8:	d006      	beq.n	80136e8 <net_state_starting+0x24>
 80136da:	2b07      	cmp	r3, #7
 80136dc:	d121      	bne.n	8013722 <net_state_starting+0x5e>
  {
    case NET_EVENT_INTERFACE_READY:
      set_state(pnetif, NET_STATE_READY);
 80136de:	2103      	movs	r1, #3
 80136e0:	6878      	ldr	r0, [r7, #4]
 80136e2:	f7ff ff83 	bl	80135ec <set_state>
      break;
 80136e6:	e01f      	b.n	8013728 <net_state_starting+0x64>

    case NET_EVENT_CMD_STOP:
      set_state(pnetif, NET_STATE_INITIALIZED);
 80136e8:	2101      	movs	r1, #1
 80136ea:	6878      	ldr	r0, [r7, #4]
 80136ec:	f7ff ff7e 	bl	80135ec <set_state>
      ret = pnetif->pdrv->if_stop(pnetif);
 80136f0:	687b      	ldr	r3, [r7, #4]
 80136f2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80136f6:	691b      	ldr	r3, [r3, #16]
 80136f8:	6878      	ldr	r0, [r7, #4]
 80136fa:	4798      	blx	r3
 80136fc:	60f8      	str	r0, [r7, #12]
      if (NET_OK != ret)
 80136fe:	68fb      	ldr	r3, [r7, #12]
 8013700:	2b00      	cmp	r3, #0
 8013702:	d010      	beq.n	8013726 <net_state_starting+0x62>
      {
        NET_DBG_ERROR("Interface cannot stop.\n");
 8013704:	227d      	movs	r2, #125	; 0x7d
 8013706:	490b      	ldr	r1, [pc, #44]	; (8013734 <net_state_starting+0x70>)
 8013708:	480b      	ldr	r0, [pc, #44]	; (8013738 <net_state_starting+0x74>)
 801370a:	f003 f913 	bl	8016934 <iprintf>
 801370e:	480b      	ldr	r0, [pc, #44]	; (801373c <net_state_starting+0x78>)
 8013710:	f003 f97e 	bl	8016a10 <puts>
 8013714:	200a      	movs	r0, #10
 8013716:	f003 f91f 	bl	8016958 <putchar>
        ret = NET_ERROR_INTERFACE_FAILURE;
 801371a:	f06f 0310 	mvn.w	r3, #16
 801371e:	60fb      	str	r3, [r7, #12]
      }
      break;
 8013720:	e001      	b.n	8013726 <net_state_starting+0x62>
    default:
      break;
 8013722:	bf00      	nop
 8013724:	e000      	b.n	8013728 <net_state_starting+0x64>
      break;
 8013726:	bf00      	nop
  }
  return ret;
 8013728:	68fb      	ldr	r3, [r7, #12]
}
 801372a:	4618      	mov	r0, r3
 801372c:	3710      	adds	r7, #16
 801372e:	46bd      	mov	sp, r7
 8013730:	bd80      	pop	{r7, pc}
 8013732:	bf00      	nop
 8013734:	0801b340 	.word	0x0801b340
 8013738:	0801b3a4 	.word	0x0801b3a4
 801373c:	0801b3f8 	.word	0x0801b3f8

08013740 <net_state_ready>:


static int32_t net_state_ready(net_if_handle_t *pnetif, net_state_event_t event)
{
 8013740:	b580      	push	{r7, lr}
 8013742:	b084      	sub	sp, #16
 8013744:	af00      	add	r7, sp, #0
 8013746:	6078      	str	r0, [r7, #4]
 8013748:	460b      	mov	r3, r1
 801374a:	70fb      	strb	r3, [r7, #3]
  int32_t ret = NET_OK;
 801374c:	2300      	movs	r3, #0
 801374e:	60fb      	str	r3, [r7, #12]

  switch (event)
 8013750:	78fb      	ldrb	r3, [r7, #3]
 8013752:	2b02      	cmp	r3, #2
 8013754:	d002      	beq.n	801375c <net_state_ready+0x1c>
 8013756:	2b04      	cmp	r3, #4
 8013758:	d01d      	beq.n	8013796 <net_state_ready+0x56>
        ret = NET_ERROR_INTERFACE_FAILURE;
      }
      break;

    default:
      break;
 801375a:	e03c      	b.n	80137d6 <net_state_ready+0x96>
      set_state(pnetif, NET_STATE_CONNECTING);
 801375c:	2104      	movs	r1, #4
 801375e:	6878      	ldr	r0, [r7, #4]
 8013760:	f7ff ff44 	bl	80135ec <set_state>
      ret = pnetif->pdrv->if_connect(pnetif);
 8013764:	687b      	ldr	r3, [r7, #4]
 8013766:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 801376a:	699b      	ldr	r3, [r3, #24]
 801376c:	6878      	ldr	r0, [r7, #4]
 801376e:	4798      	blx	r3
 8013770:	60f8      	str	r0, [r7, #12]
      if (NET_OK != ret)
 8013772:	68fb      	ldr	r3, [r7, #12]
 8013774:	2b00      	cmp	r3, #0
 8013776:	d02b      	beq.n	80137d0 <net_state_ready+0x90>
        NET_DBG_ERROR("Interface cannot connect.\n");
 8013778:	2293      	movs	r2, #147	; 0x93
 801377a:	4919      	ldr	r1, [pc, #100]	; (80137e0 <net_state_ready+0xa0>)
 801377c:	4819      	ldr	r0, [pc, #100]	; (80137e4 <net_state_ready+0xa4>)
 801377e:	f003 f8d9 	bl	8016934 <iprintf>
 8013782:	4819      	ldr	r0, [pc, #100]	; (80137e8 <net_state_ready+0xa8>)
 8013784:	f003 f944 	bl	8016a10 <puts>
 8013788:	200a      	movs	r0, #10
 801378a:	f003 f8e5 	bl	8016958 <putchar>
        ret = NET_ERROR_INTERFACE_FAILURE;
 801378e:	f06f 0310 	mvn.w	r3, #16
 8013792:	60fb      	str	r3, [r7, #12]
      break;
 8013794:	e01c      	b.n	80137d0 <net_state_ready+0x90>
      set_state(pnetif, NET_STATE_STOPPING);
 8013796:	2106      	movs	r1, #6
 8013798:	6878      	ldr	r0, [r7, #4]
 801379a:	f7ff ff27 	bl	80135ec <set_state>
      ret = pnetif->pdrv->if_stop(pnetif);
 801379e:	687b      	ldr	r3, [r7, #4]
 80137a0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80137a4:	691b      	ldr	r3, [r3, #16]
 80137a6:	6878      	ldr	r0, [r7, #4]
 80137a8:	4798      	blx	r3
 80137aa:	60f8      	str	r0, [r7, #12]
      if (NET_OK != ret)
 80137ac:	68fb      	ldr	r3, [r7, #12]
 80137ae:	2b00      	cmp	r3, #0
 80137b0:	d010      	beq.n	80137d4 <net_state_ready+0x94>
        NET_DBG_ERROR("Interface cannot stop.\n");
 80137b2:	229d      	movs	r2, #157	; 0x9d
 80137b4:	490a      	ldr	r1, [pc, #40]	; (80137e0 <net_state_ready+0xa0>)
 80137b6:	480b      	ldr	r0, [pc, #44]	; (80137e4 <net_state_ready+0xa4>)
 80137b8:	f003 f8bc 	bl	8016934 <iprintf>
 80137bc:	480b      	ldr	r0, [pc, #44]	; (80137ec <net_state_ready+0xac>)
 80137be:	f003 f927 	bl	8016a10 <puts>
 80137c2:	200a      	movs	r0, #10
 80137c4:	f003 f8c8 	bl	8016958 <putchar>
        ret = NET_ERROR_INTERFACE_FAILURE;
 80137c8:	f06f 0310 	mvn.w	r3, #16
 80137cc:	60fb      	str	r3, [r7, #12]
      break;
 80137ce:	e001      	b.n	80137d4 <net_state_ready+0x94>
      break;
 80137d0:	bf00      	nop
 80137d2:	e000      	b.n	80137d6 <net_state_ready+0x96>
      break;
 80137d4:	bf00      	nop
  }
  return ret;
 80137d6:	68fb      	ldr	r3, [r7, #12]
}
 80137d8:	4618      	mov	r0, r3
 80137da:	3710      	adds	r7, #16
 80137dc:	46bd      	mov	sp, r7
 80137de:	bd80      	pop	{r7, pc}
 80137e0:	0801b340 	.word	0x0801b340
 80137e4:	0801b3a4 	.word	0x0801b3a4
 80137e8:	0801b410 	.word	0x0801b410
 80137ec:	0801b3f8 	.word	0x0801b3f8

080137f0 <net_state_connecting>:


static int32_t net_state_connecting(net_if_handle_t *pnetif, net_state_event_t event)
{
 80137f0:	b580      	push	{r7, lr}
 80137f2:	b084      	sub	sp, #16
 80137f4:	af00      	add	r7, sp, #0
 80137f6:	6078      	str	r0, [r7, #4]
 80137f8:	460b      	mov	r3, r1
 80137fa:	70fb      	strb	r3, [r7, #3]
  int32_t ret = NET_OK;
 80137fc:	2300      	movs	r3, #0
 80137fe:	60fb      	str	r3, [r7, #12]

  switch (event)
 8013800:	78fb      	ldrb	r3, [r7, #3]
 8013802:	2b03      	cmp	r3, #3
 8013804:	d006      	beq.n	8013814 <net_state_connecting+0x24>
 8013806:	2b0a      	cmp	r3, #10
 8013808:	d109      	bne.n	801381e <net_state_connecting+0x2e>
  {
    case NET_EVENT_IPADDR:
      set_state(pnetif, NET_STATE_CONNECTED);
 801380a:	2105      	movs	r1, #5
 801380c:	6878      	ldr	r0, [r7, #4]
 801380e:	f7ff feed 	bl	80135ec <set_state>
      break;
 8013812:	e005      	b.n	8013820 <net_state_connecting+0x30>

    case NET_EVENT_CMD_DISCONNECT:
      set_state(pnetif, NET_STATE_READY);
 8013814:	2103      	movs	r1, #3
 8013816:	6878      	ldr	r0, [r7, #4]
 8013818:	f7ff fee8 	bl	80135ec <set_state>
      break;
 801381c:	e000      	b.n	8013820 <net_state_connecting+0x30>

    default:
      break;
 801381e:	bf00      	nop
  }
  return ret;
 8013820:	68fb      	ldr	r3, [r7, #12]
}
 8013822:	4618      	mov	r0, r3
 8013824:	3710      	adds	r7, #16
 8013826:	46bd      	mov	sp, r7
 8013828:	bd80      	pop	{r7, pc}
	...

0801382c <net_state_connected>:


static int32_t net_state_connected(net_if_handle_t *pnetif, net_state_event_t event)
{
 801382c:	b580      	push	{r7, lr}
 801382e:	b084      	sub	sp, #16
 8013830:	af00      	add	r7, sp, #0
 8013832:	6078      	str	r0, [r7, #4]
 8013834:	460b      	mov	r3, r1
 8013836:	70fb      	strb	r3, [r7, #3]
  int32_t ret = NET_OK;
 8013838:	2300      	movs	r3, #0
 801383a:	60fb      	str	r3, [r7, #12]

  switch (event)
 801383c:	78fb      	ldrb	r3, [r7, #3]
 801383e:	2b0a      	cmp	r3, #10
 8013840:	d028      	beq.n	8013894 <net_state_connected+0x68>
 8013842:	2b0a      	cmp	r3, #10
 8013844:	dc2b      	bgt.n	801389e <net_state_connected+0x72>
 8013846:	2b03      	cmp	r3, #3
 8013848:	d002      	beq.n	8013850 <net_state_connected+0x24>
 801384a:	2b09      	cmp	r3, #9
 801384c:	d01d      	beq.n	801388a <net_state_connected+0x5e>
    case NET_EVENT_IPADDR:
      set_state(pnetif, NET_STATE_CONNECTED);
      break;

    default:
      break;
 801384e:	e026      	b.n	801389e <net_state_connected+0x72>
      set_state(pnetif, NET_STATE_DISCONNECTING);
 8013850:	2107      	movs	r1, #7
 8013852:	6878      	ldr	r0, [r7, #4]
 8013854:	f7ff feca 	bl	80135ec <set_state>
      ret = pnetif->pdrv->if_disconnect(pnetif);
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 801385e:	69db      	ldr	r3, [r3, #28]
 8013860:	6878      	ldr	r0, [r7, #4]
 8013862:	4798      	blx	r3
 8013864:	60f8      	str	r0, [r7, #12]
      if (NET_OK != ret)
 8013866:	68fb      	ldr	r3, [r7, #12]
 8013868:	2b00      	cmp	r3, #0
 801386a:	d01a      	beq.n	80138a2 <net_state_connected+0x76>
        NET_DBG_ERROR("Interface cannot disconnect.\n");
 801386c:	22c9      	movs	r2, #201	; 0xc9
 801386e:	4910      	ldr	r1, [pc, #64]	; (80138b0 <net_state_connected+0x84>)
 8013870:	4810      	ldr	r0, [pc, #64]	; (80138b4 <net_state_connected+0x88>)
 8013872:	f003 f85f 	bl	8016934 <iprintf>
 8013876:	4810      	ldr	r0, [pc, #64]	; (80138b8 <net_state_connected+0x8c>)
 8013878:	f003 f8ca 	bl	8016a10 <puts>
 801387c:	200a      	movs	r0, #10
 801387e:	f003 f86b 	bl	8016958 <putchar>
        ret = NET_ERROR_INTERFACE_FAILURE;
 8013882:	f06f 0310 	mvn.w	r3, #16
 8013886:	60fb      	str	r3, [r7, #12]
      break;
 8013888:	e00b      	b.n	80138a2 <net_state_connected+0x76>
      set_state(pnetif, NET_STATE_CONNECTION_LOST);
 801388a:	2108      	movs	r1, #8
 801388c:	6878      	ldr	r0, [r7, #4]
 801388e:	f7ff fead 	bl	80135ec <set_state>
      break;
 8013892:	e007      	b.n	80138a4 <net_state_connected+0x78>
      set_state(pnetif, NET_STATE_CONNECTED);
 8013894:	2105      	movs	r1, #5
 8013896:	6878      	ldr	r0, [r7, #4]
 8013898:	f7ff fea8 	bl	80135ec <set_state>
      break;
 801389c:	e002      	b.n	80138a4 <net_state_connected+0x78>
      break;
 801389e:	bf00      	nop
 80138a0:	e000      	b.n	80138a4 <net_state_connected+0x78>
      break;
 80138a2:	bf00      	nop
  }
  return ret;
 80138a4:	68fb      	ldr	r3, [r7, #12]
}
 80138a6:	4618      	mov	r0, r3
 80138a8:	3710      	adds	r7, #16
 80138aa:	46bd      	mov	sp, r7
 80138ac:	bd80      	pop	{r7, pc}
 80138ae:	bf00      	nop
 80138b0:	0801b340 	.word	0x0801b340
 80138b4:	0801b3a4 	.word	0x0801b3a4
 80138b8:	0801b42c 	.word	0x0801b42c

080138bc <net_state_disconnecting>:


static int32_t net_state_disconnecting(net_if_handle_t *pnetif, net_state_event_t event)
{
 80138bc:	b580      	push	{r7, lr}
 80138be:	b084      	sub	sp, #16
 80138c0:	af00      	add	r7, sp, #0
 80138c2:	6078      	str	r0, [r7, #4]
 80138c4:	460b      	mov	r3, r1
 80138c6:	70fb      	strb	r3, [r7, #3]
  int32_t ret = NET_OK;
 80138c8:	2300      	movs	r3, #0
 80138ca:	60fb      	str	r3, [r7, #12]

  switch (event)
 80138cc:	78fb      	ldrb	r3, [r7, #3]
 80138ce:	2b07      	cmp	r3, #7
 80138d0:	d104      	bne.n	80138dc <net_state_disconnecting+0x20>
  {
    case NET_EVENT_INTERFACE_READY:
      set_state(pnetif, NET_STATE_READY);
 80138d2:	2103      	movs	r1, #3
 80138d4:	6878      	ldr	r0, [r7, #4]
 80138d6:	f7ff fe89 	bl	80135ec <set_state>
      break;
 80138da:	e000      	b.n	80138de <net_state_disconnecting+0x22>

    default:
      break;
 80138dc:	bf00      	nop
  }
  return ret;
 80138de:	68fb      	ldr	r3, [r7, #12]
}
 80138e0:	4618      	mov	r0, r3
 80138e2:	3710      	adds	r7, #16
 80138e4:	46bd      	mov	sp, r7
 80138e6:	bd80      	pop	{r7, pc}

080138e8 <net_state_stopping>:


static int32_t net_state_stopping(net_if_handle_t *pnetif, net_state_event_t event)
{
 80138e8:	b580      	push	{r7, lr}
 80138ea:	b084      	sub	sp, #16
 80138ec:	af00      	add	r7, sp, #0
 80138ee:	6078      	str	r0, [r7, #4]
 80138f0:	460b      	mov	r3, r1
 80138f2:	70fb      	strb	r3, [r7, #3]
  int32_t ret = NET_OK;
 80138f4:	2300      	movs	r3, #0
 80138f6:	60fb      	str	r3, [r7, #12]

  switch (event)
 80138f8:	78fb      	ldrb	r3, [r7, #3]
 80138fa:	2b06      	cmp	r3, #6
 80138fc:	d104      	bne.n	8013908 <net_state_stopping+0x20>
  {
    case NET_EVENT_INTERFACE_INITIALIZED:
      set_state(pnetif, NET_STATE_INITIALIZED);
 80138fe:	2101      	movs	r1, #1
 8013900:	6878      	ldr	r0, [r7, #4]
 8013902:	f7ff fe73 	bl	80135ec <set_state>
      break;
 8013906:	e000      	b.n	801390a <net_state_stopping+0x22>

    default:
      break;
 8013908:	bf00      	nop
  }
  return ret;
 801390a:	68fb      	ldr	r3, [r7, #12]
}
 801390c:	4618      	mov	r0, r3
 801390e:	3710      	adds	r7, #16
 8013910:	46bd      	mov	sp, r7
 8013912:	bd80      	pop	{r7, pc}

08013914 <net_state_connection_lost>:


static int32_t net_state_connection_lost(net_if_handle_t *pnetif, net_state_event_t event)
{
 8013914:	b580      	push	{r7, lr}
 8013916:	b084      	sub	sp, #16
 8013918:	af00      	add	r7, sp, #0
 801391a:	6078      	str	r0, [r7, #4]
 801391c:	460b      	mov	r3, r1
 801391e:	70fb      	strb	r3, [r7, #3]
  int32_t ret = NET_OK;
 8013920:	2300      	movs	r3, #0
 8013922:	60fb      	str	r3, [r7, #12]

  switch (event)
 8013924:	78fb      	ldrb	r3, [r7, #3]
 8013926:	2b08      	cmp	r3, #8
 8013928:	d104      	bne.n	8013934 <net_state_connection_lost+0x20>
  {
    case NET_EVENT_LINK_UP:
      set_state(pnetif, NET_STATE_CONNECTING);
 801392a:	2104      	movs	r1, #4
 801392c:	6878      	ldr	r0, [r7, #4]
 801392e:	f7ff fe5d 	bl	80135ec <set_state>
      break;
 8013932:	e000      	b.n	8013936 <net_state_connection_lost+0x22>

    default:
      break;
 8013934:	bf00      	nop
  }
  return ret;
 8013936:	68fb      	ldr	r3, [r7, #12]
}
 8013938:	4618      	mov	r0, r3
 801393a:	3710      	adds	r7, #16
 801393c:	46bd      	mov	sp, r7
 801393e:	bd80      	pop	{r7, pc}

08013940 <net_state_manage_event>:


int32_t net_state_manage_event(net_if_handle_t *pnetif, net_state_event_t state_to)
{
 8013940:	b580      	push	{r7, lr}
 8013942:	b084      	sub	sp, #16
 8013944:	af00      	add	r7, sp, #0
 8013946:	6078      	str	r0, [r7, #4]
 8013948:	460b      	mov	r3, r1
 801394a:	70fb      	strb	r3, [r7, #3]
  int32_t ret;
  net_if_handle_t *const p_netif = netif_check(pnetif);
 801394c:	6878      	ldr	r0, [r7, #4]
 801394e:	f7fe fe99 	bl	8012684 <netif_check>
 8013952:	60b8      	str	r0, [r7, #8]

  if (p_netif == NULL)
 8013954:	68bb      	ldr	r3, [r7, #8]
 8013956:	2b00      	cmp	r3, #0
 8013958:	d10f      	bne.n	801397a <net_state_manage_event+0x3a>
  {
    NET_DBG_ERROR("Invalid interface.\n");
 801395a:	f240 1217 	movw	r2, #279	; 0x117
 801395e:	4934      	ldr	r1, [pc, #208]	; (8013a30 <net_state_manage_event+0xf0>)
 8013960:	4834      	ldr	r0, [pc, #208]	; (8013a34 <net_state_manage_event+0xf4>)
 8013962:	f002 ffe7 	bl	8016934 <iprintf>
 8013966:	4834      	ldr	r0, [pc, #208]	; (8013a38 <net_state_manage_event+0xf8>)
 8013968:	f003 f852 	bl	8016a10 <puts>
 801396c:	200a      	movs	r0, #10
 801396e:	f002 fff3 	bl	8016958 <putchar>
    ret = NET_ERROR_PARAMETER;
 8013972:	f06f 0303 	mvn.w	r3, #3
 8013976:	60fb      	str	r3, [r7, #12]
 8013978:	e054      	b.n	8013a24 <net_state_manage_event+0xe4>
  {
#ifdef DEBUGSTATE
    printf("In state %s, received event %s\n", statestr[p_netif->state], eventstr[state_to]);
#endif /* DEBUGSTATE */

    switch (p_netif->state)
 801397a:	68bb      	ldr	r3, [r7, #8]
 801397c:	f893 30eb 	ldrb.w	r3, [r3, #235]	; 0xeb
 8013980:	3b01      	subs	r3, #1
 8013982:	2b07      	cmp	r3, #7
 8013984:	d84a      	bhi.n	8013a1c <net_state_manage_event+0xdc>
 8013986:	a201      	add	r2, pc, #4	; (adr r2, 801398c <net_state_manage_event+0x4c>)
 8013988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801398c:	080139ad 	.word	0x080139ad
 8013990:	080139bb 	.word	0x080139bb
 8013994:	080139c9 	.word	0x080139c9
 8013998:	080139d7 	.word	0x080139d7
 801399c:	080139e5 	.word	0x080139e5
 80139a0:	08013a0f 	.word	0x08013a0f
 80139a4:	080139f3 	.word	0x080139f3
 80139a8:	08013a01 	.word	0x08013a01
    {
      case NET_STATE_INITIALIZED:
        ret = net_state_initialized(p_netif, state_to);
 80139ac:	78fb      	ldrb	r3, [r7, #3]
 80139ae:	4619      	mov	r1, r3
 80139b0:	68b8      	ldr	r0, [r7, #8]
 80139b2:	f7ff fe2f 	bl	8013614 <net_state_initialized>
 80139b6:	60f8      	str	r0, [r7, #12]
        break;
 80139b8:	e034      	b.n	8013a24 <net_state_manage_event+0xe4>

      case NET_STATE_STARTING:
        ret = net_state_starting(p_netif, state_to);
 80139ba:	78fb      	ldrb	r3, [r7, #3]
 80139bc:	4619      	mov	r1, r3
 80139be:	68b8      	ldr	r0, [r7, #8]
 80139c0:	f7ff fe80 	bl	80136c4 <net_state_starting>
 80139c4:	60f8      	str	r0, [r7, #12]
        break;
 80139c6:	e02d      	b.n	8013a24 <net_state_manage_event+0xe4>

      case NET_STATE_READY:
        ret = net_state_ready(p_netif, state_to);
 80139c8:	78fb      	ldrb	r3, [r7, #3]
 80139ca:	4619      	mov	r1, r3
 80139cc:	68b8      	ldr	r0, [r7, #8]
 80139ce:	f7ff feb7 	bl	8013740 <net_state_ready>
 80139d2:	60f8      	str	r0, [r7, #12]
        break;
 80139d4:	e026      	b.n	8013a24 <net_state_manage_event+0xe4>

      case NET_STATE_CONNECTING:
        ret = net_state_connecting(p_netif, state_to);
 80139d6:	78fb      	ldrb	r3, [r7, #3]
 80139d8:	4619      	mov	r1, r3
 80139da:	68b8      	ldr	r0, [r7, #8]
 80139dc:	f7ff ff08 	bl	80137f0 <net_state_connecting>
 80139e0:	60f8      	str	r0, [r7, #12]
        break;
 80139e2:	e01f      	b.n	8013a24 <net_state_manage_event+0xe4>

      case NET_STATE_CONNECTED:
        ret = net_state_connected(p_netif, state_to);
 80139e4:	78fb      	ldrb	r3, [r7, #3]
 80139e6:	4619      	mov	r1, r3
 80139e8:	68b8      	ldr	r0, [r7, #8]
 80139ea:	f7ff ff1f 	bl	801382c <net_state_connected>
 80139ee:	60f8      	str	r0, [r7, #12]
        break;
 80139f0:	e018      	b.n	8013a24 <net_state_manage_event+0xe4>

      case NET_STATE_DISCONNECTING:
        ret = net_state_disconnecting(p_netif, state_to);
 80139f2:	78fb      	ldrb	r3, [r7, #3]
 80139f4:	4619      	mov	r1, r3
 80139f6:	68b8      	ldr	r0, [r7, #8]
 80139f8:	f7ff ff60 	bl	80138bc <net_state_disconnecting>
 80139fc:	60f8      	str	r0, [r7, #12]
        break;
 80139fe:	e011      	b.n	8013a24 <net_state_manage_event+0xe4>

      case NET_STATE_CONNECTION_LOST:
        ret = net_state_connection_lost(p_netif, state_to);
 8013a00:	78fb      	ldrb	r3, [r7, #3]
 8013a02:	4619      	mov	r1, r3
 8013a04:	68b8      	ldr	r0, [r7, #8]
 8013a06:	f7ff ff85 	bl	8013914 <net_state_connection_lost>
 8013a0a:	60f8      	str	r0, [r7, #12]
        break;
 8013a0c:	e00a      	b.n	8013a24 <net_state_manage_event+0xe4>

      case NET_STATE_STOPPING:
        ret = net_state_stopping(p_netif, state_to);
 8013a0e:	78fb      	ldrb	r3, [r7, #3]
 8013a10:	4619      	mov	r1, r3
 8013a12:	68b8      	ldr	r0, [r7, #8]
 8013a14:	f7ff ff68 	bl	80138e8 <net_state_stopping>
 8013a18:	60f8      	str	r0, [r7, #12]
        break;
 8013a1a:	e003      	b.n	8013a24 <net_state_manage_event+0xe4>

      case NET_STATE_DEINITIALIZED:
      default:
        ret = NET_ERROR_INVALID_STATE;
 8013a1c:	f06f 031b 	mvn.w	r3, #27
 8013a20:	60fb      	str	r3, [r7, #12]
        break;
 8013a22:	bf00      	nop
    }
  }
  return ret;
 8013a24:	68fb      	ldr	r3, [r7, #12]
}
 8013a26:	4618      	mov	r0, r3
 8013a28:	3710      	adds	r7, #16
 8013a2a:	46bd      	mov	sp, r7
 8013a2c:	bd80      	pop	{r7, pc}
 8013a2e:	bf00      	nop
 8013a30:	0801b340 	.word	0x0801b340
 8013a34:	0801b3a4 	.word	0x0801b3a4
 8013a38:	0801b44c 	.word	0x0801b44c

08013a3c <mx_wifi_driver>:
  * @brief                   WiFi driver initialization
  * @param  pnetif           net interface pointer
  * @return int32_t          0 is success, otherwise failed
  */
int32_t mx_wifi_driver(net_if_handle_t *pnetif)
{
 8013a3c:	b580      	push	{r7, lr}
 8013a3e:	b082      	sub	sp, #8
 8013a40:	af00      	add	r7, sp, #0
 8013a42:	6078      	str	r0, [r7, #4]
  /* Initialize the LwIP library here if not already done by another network interface. */
#if (defined(MX_WIFI_NETWORK_BYPASS_MODE) && (MX_WIFI_NETWORK_BYPASS_MODE == 1))
  net_ip_init();
#endif /* (MX_WIFI_NETWORK_BYPASS_MODE == 1) */

  return mx_wifi_if_init(pnetif);
 8013a44:	6878      	ldr	r0, [r7, #4]
 8013a46:	f000 f805 	bl	8013a54 <mx_wifi_if_init>
 8013a4a:	4603      	mov	r3, r0
}
 8013a4c:	4618      	mov	r0, r3
 8013a4e:	3708      	adds	r7, #8
 8013a50:	46bd      	mov	sp, r7
 8013a52:	bd80      	pop	{r7, pc}

08013a54 <mx_wifi_if_init>:
  * @brief                   Mxchip WiFi driver interface initialization
  * @param  pnetif           net interface pointer
  * @return int32_t          0 is success, otherwise failed
  */
static int32_t mx_wifi_if_init(net_if_handle_t *pnetif)
{
 8013a54:	b580      	push	{r7, lr}
 8013a56:	b086      	sub	sp, #24
 8013a58:	af00      	add	r7, sp, #0
 8013a5a:	6078      	str	r0, [r7, #4]
  int32_t ret;
  void *ptmp;

  /* Create netif and set Mxchip WiFi functions. */
  ptmp = NET_MALLOC(sizeof(net_if_drv_t));
 8013a5c:	2084      	movs	r0, #132	; 0x84
 8013a5e:	f001 f9cf 	bl	8014e00 <malloc>
 8013a62:	4603      	mov	r3, r0
 8013a64:	613b      	str	r3, [r7, #16]

  if (ptmp != NULL)
 8013a66:	693b      	ldr	r3, [r7, #16]
 8013a68:	2b00      	cmp	r3, #0
 8013a6a:	f000 8084 	beq.w	8013b76 <mx_wifi_if_init+0x122>
  {
    net_if_drv_t *const p = (net_if_drv_t *)ptmp;
 8013a6e:	693b      	ldr	r3, [r7, #16]
 8013a70:	60fb      	str	r3, [r7, #12]

    p->if_class = NET_INTERFACE_CLASS_WIFI;
 8013a72:	68fb      	ldr	r3, [r7, #12]
 8013a74:	2200      	movs	r2, #0
 8013a76:	701a      	strb	r2, [r3, #0]

    p->if_init = mx_wifi_if_init;
 8013a78:	68fb      	ldr	r3, [r7, #12]
 8013a7a:	4a49      	ldr	r2, [pc, #292]	; (8013ba0 <mx_wifi_if_init+0x14c>)
 8013a7c:	605a      	str	r2, [r3, #4]
    p->if_deinit = mx_wifi_if_deinit;
 8013a7e:	68fb      	ldr	r3, [r7, #12]
 8013a80:	4a48      	ldr	r2, [pc, #288]	; (8013ba4 <mx_wifi_if_init+0x150>)
 8013a82:	609a      	str	r2, [r3, #8]

    p->if_start = mx_wifi_if_start;
 8013a84:	68fb      	ldr	r3, [r7, #12]
 8013a86:	4a48      	ldr	r2, [pc, #288]	; (8013ba8 <mx_wifi_if_init+0x154>)
 8013a88:	60da      	str	r2, [r3, #12]
    p->if_stop = mx_wifi_if_stop;
 8013a8a:	68fb      	ldr	r3, [r7, #12]
 8013a8c:	4a47      	ldr	r2, [pc, #284]	; (8013bac <mx_wifi_if_init+0x158>)
 8013a8e:	611a      	str	r2, [r3, #16]
    p->if_yield = mx_wifi_if_yield;
 8013a90:	68fb      	ldr	r3, [r7, #12]
 8013a92:	4a47      	ldr	r2, [pc, #284]	; (8013bb0 <mx_wifi_if_init+0x15c>)
 8013a94:	615a      	str	r2, [r3, #20]

    p->if_connect = mx_wifi_if_connect;
 8013a96:	68fb      	ldr	r3, [r7, #12]
 8013a98:	4a46      	ldr	r2, [pc, #280]	; (8013bb4 <mx_wifi_if_init+0x160>)
 8013a9a:	619a      	str	r2, [r3, #24]
    p->if_disconnect = mx_wifi_if_disconnect;
 8013a9c:	68fb      	ldr	r3, [r7, #12]
 8013a9e:	4a46      	ldr	r2, [pc, #280]	; (8013bb8 <mx_wifi_if_init+0x164>)
 8013aa0:	61da      	str	r2, [r3, #28]

    /* socket functions */
#if (MX_WIFI_NETWORK_BYPASS_MODE == 0)
    p->psocket = mx_wifi_socket;
 8013aa2:	68fb      	ldr	r3, [r7, #12]
 8013aa4:	4a45      	ldr	r2, [pc, #276]	; (8013bbc <mx_wifi_if_init+0x168>)
 8013aa6:	635a      	str	r2, [r3, #52]	; 0x34
    p->pbind = mx_wifi_bind;
 8013aa8:	68fb      	ldr	r3, [r7, #12]
 8013aaa:	4a45      	ldr	r2, [pc, #276]	; (8013bc0 <mx_wifi_if_init+0x16c>)
 8013aac:	639a      	str	r2, [r3, #56]	; 0x38
    p->plisten = mx_wifi_listen;
 8013aae:	68fb      	ldr	r3, [r7, #12]
 8013ab0:	4a44      	ldr	r2, [pc, #272]	; (8013bc4 <mx_wifi_if_init+0x170>)
 8013ab2:	63da      	str	r2, [r3, #60]	; 0x3c
    p->paccept = mx_wifi_accept;
 8013ab4:	68fb      	ldr	r3, [r7, #12]
 8013ab6:	4a44      	ldr	r2, [pc, #272]	; (8013bc8 <mx_wifi_if_init+0x174>)
 8013ab8:	641a      	str	r2, [r3, #64]	; 0x40
    p->pconnect = mx_wifi_connect;
 8013aba:	68fb      	ldr	r3, [r7, #12]
 8013abc:	4a43      	ldr	r2, [pc, #268]	; (8013bcc <mx_wifi_if_init+0x178>)
 8013abe:	645a      	str	r2, [r3, #68]	; 0x44
    p->psend = mx_wifi_send;
 8013ac0:	68fb      	ldr	r3, [r7, #12]
 8013ac2:	4a43      	ldr	r2, [pc, #268]	; (8013bd0 <mx_wifi_if_init+0x17c>)
 8013ac4:	649a      	str	r2, [r3, #72]	; 0x48
    p->precv = mx_wifi_recv;
 8013ac6:	68fb      	ldr	r3, [r7, #12]
 8013ac8:	4a42      	ldr	r2, [pc, #264]	; (8013bd4 <mx_wifi_if_init+0x180>)
 8013aca:	64da      	str	r2, [r3, #76]	; 0x4c
    p->psendto = mx_wifi_sendto;
 8013acc:	68fb      	ldr	r3, [r7, #12]
 8013ace:	4a42      	ldr	r2, [pc, #264]	; (8013bd8 <mx_wifi_if_init+0x184>)
 8013ad0:	651a      	str	r2, [r3, #80]	; 0x50
    p->precvfrom = mx_wifi_recvfrom;
 8013ad2:	68fb      	ldr	r3, [r7, #12]
 8013ad4:	4a41      	ldr	r2, [pc, #260]	; (8013bdc <mx_wifi_if_init+0x188>)
 8013ad6:	655a      	str	r2, [r3, #84]	; 0x54
    p->psetsockopt = mx_wifi_setsockopt;
 8013ad8:	68fb      	ldr	r3, [r7, #12]
 8013ada:	4a41      	ldr	r2, [pc, #260]	; (8013be0 <mx_wifi_if_init+0x18c>)
 8013adc:	659a      	str	r2, [r3, #88]	; 0x58
    p->pgetsockopt = mx_wifi_getsockopt;
 8013ade:	68fb      	ldr	r3, [r7, #12]
 8013ae0:	4a40      	ldr	r2, [pc, #256]	; (8013be4 <mx_wifi_if_init+0x190>)
 8013ae2:	65da      	str	r2, [r3, #92]	; 0x5c
    p->pgetsockname = mx_wifi_getsockname;
 8013ae4:	68fb      	ldr	r3, [r7, #12]
 8013ae6:	4a40      	ldr	r2, [pc, #256]	; (8013be8 <mx_wifi_if_init+0x194>)
 8013ae8:	661a      	str	r2, [r3, #96]	; 0x60
    p->pgetpeername = mx_wifi_getpeername;
 8013aea:	68fb      	ldr	r3, [r7, #12]
 8013aec:	4a3f      	ldr	r2, [pc, #252]	; (8013bec <mx_wifi_if_init+0x198>)
 8013aee:	665a      	str	r2, [r3, #100]	; 0x64
    p->pclose = mx_wifi_close;
 8013af0:	68fb      	ldr	r3, [r7, #12]
 8013af2:	4a3f      	ldr	r2, [pc, #252]	; (8013bf0 <mx_wifi_if_init+0x19c>)
 8013af4:	669a      	str	r2, [r3, #104]	; 0x68
    p->pshutdown = mx_wifi_shutdown;
 8013af6:	68fb      	ldr	r3, [r7, #12]
 8013af8:	4a3e      	ldr	r2, [pc, #248]	; (8013bf4 <mx_wifi_if_init+0x1a0>)
 8013afa:	66da      	str	r2, [r3, #108]	; 0x6c
    p->pgethostbyname = mx_wifi_gethostbyname;
 8013afc:	68fb      	ldr	r3, [r7, #12]
 8013afe:	4a3e      	ldr	r2, [pc, #248]	; (8013bf8 <mx_wifi_if_init+0x1a4>)
 8013b00:	671a      	str	r2, [r3, #112]	; 0x70
    p->pping = mx_wifi_ping;
 8013b02:	68fb      	ldr	r3, [r7, #12]
 8013b04:	4a3d      	ldr	r2, [pc, #244]	; (8013bfc <mx_wifi_if_init+0x1a8>)
 8013b06:	675a      	str	r2, [r3, #116]	; 0x74
    p->pping = icmp_ping;
#endif /* MX_WIFI_NETWORK_BYPASS_MODE */


    /* WiFi function. */
    ptmp = NET_MALLOC(sizeof(net_if_wifi_class_extension_t));
 8013b08:	202c      	movs	r0, #44	; 0x2c
 8013b0a:	f001 f979 	bl	8014e00 <malloc>
 8013b0e:	4603      	mov	r3, r0
 8013b10:	613b      	str	r3, [r7, #16]
    if (NULL == ptmp)
 8013b12:	693b      	ldr	r3, [r7, #16]
 8013b14:	2b00      	cmp	r3, #0
 8013b16:	d112      	bne.n	8013b3e <mx_wifi_if_init+0xea>
    {
      NET_DBG_ERROR("Can't allocate memory for mx_wifi_driver class\n");
 8013b18:	f240 2205 	movw	r2, #517	; 0x205
 8013b1c:	4938      	ldr	r1, [pc, #224]	; (8013c00 <mx_wifi_if_init+0x1ac>)
 8013b1e:	4839      	ldr	r0, [pc, #228]	; (8013c04 <mx_wifi_if_init+0x1b0>)
 8013b20:	f002 ff08 	bl	8016934 <iprintf>
 8013b24:	4838      	ldr	r0, [pc, #224]	; (8013c08 <mx_wifi_if_init+0x1b4>)
 8013b26:	f002 ff73 	bl	8016a10 <puts>
 8013b2a:	200a      	movs	r0, #10
 8013b2c:	f002 ff14 	bl	8016958 <putchar>
      NET_FREE(p);
 8013b30:	68f8      	ldr	r0, [r7, #12]
 8013b32:	f001 f96d 	bl	8014e10 <free>
      ret = NET_ERROR_NO_MEMORY;
 8013b36:	f06f 0307 	mvn.w	r3, #7
 8013b3a:	617b      	str	r3, [r7, #20]
 8013b3c:	e02a      	b.n	8013b94 <mx_wifi_if_init+0x140>
    }
    else
    {
      p->extension.wifi = (net_if_wifi_class_extension_t *)ptmp;
 8013b3e:	68fb      	ldr	r3, [r7, #12]
 8013b40:	693a      	ldr	r2, [r7, #16]
 8013b42:	679a      	str	r2, [r3, #120]	; 0x78
      /* DHCP mode. */
      pnetif->dhcp_mode = true;
 8013b44:	687b      	ldr	r3, [r7, #4]
 8013b46:	2201      	movs	r2, #1
 8013b48:	f883 2020 	strb.w	r2, [r3, #32]
      pnetif->pdrv = p;
 8013b4c:	687b      	ldr	r3, [r7, #4]
 8013b4e:	68fa      	ldr	r2, [r7, #12]
 8013b50:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
      /* Scan function. */
      p->extension.wifi->scan = mx_wifi_scan;
 8013b54:	68fb      	ldr	r3, [r7, #12]
 8013b56:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013b58:	4a2c      	ldr	r2, [pc, #176]	; (8013c0c <mx_wifi_if_init+0x1b8>)
 8013b5a:	601a      	str	r2, [r3, #0]
      p->extension.wifi->get_scan_results = mx_wifi_get_scan_result;
 8013b5c:	68fb      	ldr	r3, [r7, #12]
 8013b5e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013b60:	4a2b      	ldr	r2, [pc, #172]	; (8013c10 <mx_wifi_if_init+0x1bc>)
 8013b62:	605a      	str	r2, [r3, #4]
      p->extension.wifi->mode = NET_WIFI_MODE_STA;
 8013b64:	68fb      	ldr	r3, [r7, #12]
 8013b66:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013b68:	2200      	movs	r2, #0
 8013b6a:	771a      	strb	r2, [r3, #28]

      ret = hw_start(pnetif);
 8013b6c:	6878      	ldr	r0, [r7, #4]
 8013b6e:	f000 f897 	bl	8013ca0 <hw_start>
 8013b72:	6178      	str	r0, [r7, #20]
 8013b74:	e00e      	b.n	8013b94 <mx_wifi_if_init+0x140>
    }
  }
  else
  {
    NET_DBG_ERROR("Can't allocate memory for mx_wifi_driver class\n");
 8013b76:	f240 2219 	movw	r2, #537	; 0x219
 8013b7a:	4921      	ldr	r1, [pc, #132]	; (8013c00 <mx_wifi_if_init+0x1ac>)
 8013b7c:	4821      	ldr	r0, [pc, #132]	; (8013c04 <mx_wifi_if_init+0x1b0>)
 8013b7e:	f002 fed9 	bl	8016934 <iprintf>
 8013b82:	4821      	ldr	r0, [pc, #132]	; (8013c08 <mx_wifi_if_init+0x1b4>)
 8013b84:	f002 ff44 	bl	8016a10 <puts>
 8013b88:	200a      	movs	r0, #10
 8013b8a:	f002 fee5 	bl	8016958 <putchar>
    ret = NET_ERROR_NO_MEMORY;
 8013b8e:	f06f 0307 	mvn.w	r3, #7
 8013b92:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8013b94:	697b      	ldr	r3, [r7, #20]
}
 8013b96:	4618      	mov	r0, r3
 8013b98:	3718      	adds	r7, #24
 8013b9a:	46bd      	mov	sp, r7
 8013b9c:	bd80      	pop	{r7, pc}
 8013b9e:	bf00      	nop
 8013ba0:	08013a55 	.word	0x08013a55
 8013ba4:	08013c15 	.word	0x08013c15
 8013ba8:	08013c6f 	.word	0x08013c6f
 8013bac:	08013d79 	.word	0x08013d79
 8013bb0:	08013df1 	.word	0x08013df1
 8013bb4:	0801420b 	.word	0x0801420b
 8013bb8:	080141ed 	.word	0x080141ed
 8013bbc:	08014491 	.word	0x08014491
 8013bc0:	08014521 	.word	0x08014521
 8013bc4:	0801455f 	.word	0x0801455f
 8013bc8:	08014585 	.word	0x08014585
 8013bcc:	080145ab 	.word	0x080145ab
 8013bd0:	0801461d 	.word	0x0801461d
 8013bd4:	08014649 	.word	0x08014649
 8013bd8:	08014689 	.word	0x08014689
 8013bdc:	080146d5 	.word	0x080146d5
 8013be0:	080144b7 	.word	0x080144b7
 8013be4:	080144f1 	.word	0x080144f1
 8013be8:	080147cd 	.word	0x080147cd
 8013bec:	080147f3 	.word	0x080147f3
 8013bf0:	080145f7 	.word	0x080145f7
 8013bf4:	080145d1 	.word	0x080145d1
 8013bf8:	0801472b 	.word	0x0801472b
 8013bfc:	08014753 	.word	0x08014753
 8013c00:	0801b460 	.word	0x0801b460
 8013c04:	0801b4d8 	.word	0x0801b4d8
 8013c08:	0801b4e8 	.word	0x0801b4e8
 8013c0c:	0801433d 	.word	0x0801433d
 8013c10:	08014379 	.word	0x08014379

08013c14 <mx_wifi_if_deinit>:
  * @brief                   Mxchip WiFi driver interface de-initialization
  * @param  pnetif           net interface pointer
  * @return int32_t          0 is success, otherwise failed
  */
static int32_t mx_wifi_if_deinit(net_if_handle_t *pnetif)
{
 8013c14:	b580      	push	{r7, lr}
 8013c16:	b084      	sub	sp, #16
 8013c18:	af00      	add	r7, sp, #0
 8013c1a:	6078      	str	r0, [r7, #4]
  int32_t ret = NET_OK;
 8013c1c:	2300      	movs	r3, #0
 8013c1e:	60fb      	str	r3, [r7, #12]

#if (defined(MX_WIFI_NETWORK_BYPASS_MODE) && (MX_WIFI_NETWORK_BYPASS_MODE == 1))
  (void)MX_WIFI_Network_bypass_mode_set(wifi_obj_get(), 0, NULL, NULL);
#endif /* (MX_WIFI_NETWORK_BYPASS_MODE == 1) */

  if (MX_WIFI_STATUS_OK != MX_WIFI_DeInit(wifi_obj_get()))
 8013c20:	f7f6 f800 	bl	8009c24 <wifi_obj_get>
 8013c24:	4603      	mov	r3, r0
 8013c26:	4618      	mov	r0, r3
 8013c28:	f7f3 ff22 	bl	8007a70 <MX_WIFI_DeInit>
 8013c2c:	4603      	mov	r3, r0
 8013c2e:	2b00      	cmp	r3, #0
 8013c30:	d002      	beq.n	8013c38 <mx_wifi_if_deinit+0x24>
  {
    ret = NET_ERROR_GENERIC;
 8013c32:	f06f 031c 	mvn.w	r3, #28
 8013c36:	60fb      	str	r3, [r7, #12]
  }

  NET_FREE(pnetif->pdrv->extension.wifi);
 8013c38:	687b      	ldr	r3, [r7, #4]
 8013c3a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8013c3e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013c40:	4618      	mov	r0, r3
 8013c42:	f001 f8e5 	bl	8014e10 <free>
  pnetif->pdrv->extension.wifi = NULL;
 8013c46:	687b      	ldr	r3, [r7, #4]
 8013c48:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8013c4c:	2200      	movs	r2, #0
 8013c4e:	679a      	str	r2, [r3, #120]	; 0x78
  NET_FREE(pnetif->pdrv);
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8013c56:	4618      	mov	r0, r3
 8013c58:	f001 f8da 	bl	8014e10 <free>
  pnetif->pdrv = NULL;
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	2200      	movs	r2, #0
 8013c60:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

  return ret;
 8013c64:	68fb      	ldr	r3, [r7, #12]
}
 8013c66:	4618      	mov	r0, r3
 8013c68:	3710      	adds	r7, #16
 8013c6a:	46bd      	mov	sp, r7
 8013c6c:	bd80      	pop	{r7, pc}

08013c6e <mx_wifi_if_start>:
  * @brief                   Mxchip WiFi driver start
  * @param  pnetif           net interface pointer
  * @return int32_t          0 is success, otherwise failed
  */
static int32_t mx_wifi_if_start(net_if_handle_t *pnetif)
{
 8013c6e:	b580      	push	{r7, lr}
 8013c70:	b084      	sub	sp, #16
 8013c72:	af00      	add	r7, sp, #0
 8013c74:	6078      	str	r0, [r7, #4]
  int32_t ret;
  if (pnetif->pdrv->extension.wifi->mode == NET_WIFI_MODE_STA)
 8013c76:	687b      	ldr	r3, [r7, #4]
 8013c78:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8013c7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013c7e:	7f1b      	ldrb	r3, [r3, #28]
 8013c80:	2b00      	cmp	r3, #0
 8013c82:	d104      	bne.n	8013c8e <mx_wifi_if_start+0x20>
  {
    ret = mx_wifi_if_start_station(pnetif);
 8013c84:	6878      	ldr	r0, [r7, #4]
 8013c86:	f000 f987 	bl	8013f98 <mx_wifi_if_start_station>
 8013c8a:	60f8      	str	r0, [r7, #12]
 8013c8c:	e003      	b.n	8013c96 <mx_wifi_if_start+0x28>
    }
#endif /* (MX_WIFI_NETWORK_BYPASS_MODE == 1) */
  }
  else
  {
    ret = mx_wifi_if_start_softap(pnetif);
 8013c8e:	6878      	ldr	r0, [r7, #4]
 8013c90:	f000 f9ea 	bl	8014068 <mx_wifi_if_start_softap>
 8013c94:	60f8      	str	r0, [r7, #12]
      SoftAP_pNetif = pnetif;
    }
#endif /* (MX_WIFI_NETWORK_BYPASS_MODE == 1) */
  }

  return ret;
 8013c96:	68fb      	ldr	r3, [r7, #12]
}
 8013c98:	4618      	mov	r0, r3
 8013c9a:	3710      	adds	r7, #16
 8013c9c:	46bd      	mov	sp, r7
 8013c9e:	bd80      	pop	{r7, pc}

08013ca0 <hw_start>:
  * @brief                   Mxchip WiFi hardware initialization
  * @param  pnetif           net interface pointer
  * @return int32_t          0 is success, otherwise failed
  */
static int32_t hw_start(net_if_handle_t *pnetif)
{
 8013ca0:	b590      	push	{r4, r7, lr}
 8013ca2:	b085      	sub	sp, #20
 8013ca4:	af00      	add	r7, sp, #0
 8013ca6:	6078      	str	r0, [r7, #4]
  int32_t ret = NET_ERROR_DEVICE_ERROR;
 8013ca8:	f06f 030c 	mvn.w	r3, #12
 8013cac:	60fb      	str	r3, [r7, #12]

  if (mxwifi_probe(&pnetif->pdrv->context) == 0)
 8013cae:	687b      	ldr	r3, [r7, #4]
 8013cb0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8013cb4:	3330      	adds	r3, #48	; 0x30
 8013cb6:	4618      	mov	r0, r3
 8013cb8:	f7f5 ff86 	bl	8009bc8 <mxwifi_probe>
 8013cbc:	4603      	mov	r3, r0
 8013cbe:	2b00      	cmp	r3, #0
 8013cc0:	d154      	bne.n	8013d6c <hw_start+0xcc>
  {
    DEBUG_LOG("%s\n", "MX_WIFI IO [OK]");

    if (wifi_obj_get()->Runtime.interfaces == 0U)
 8013cc2:	f7f5 ffaf 	bl	8009c24 <wifi_obj_get>
 8013cc6:	4603      	mov	r3, r0
 8013cc8:	f893 360e 	ldrb.w	r3, [r3, #1550]	; 0x60e
 8013ccc:	2b00      	cmp	r3, #0
 8013cce:	d108      	bne.n	8013ce2 <hw_start+0x42>
    {
      /* WiFi module hardware reboot. */
      DEBUG_LOG("%s\n", "MX_WIFI REBOOT(HW) ...");
      ret = MX_WIFI_HardResetModule(wifi_obj_get());
 8013cd0:	f7f5 ffa8 	bl	8009c24 <wifi_obj_get>
 8013cd4:	4603      	mov	r3, r0
 8013cd6:	4618      	mov	r0, r3
 8013cd8:	f7f3 fdbb 	bl	8007852 <MX_WIFI_HardResetModule>
 8013cdc:	4603      	mov	r3, r0
 8013cde:	60fb      	str	r3, [r7, #12]
 8013ce0:	e001      	b.n	8013ce6 <hw_start+0x46>
    }
    else
    {
      ret = MX_WIFI_STATUS_OK;
 8013ce2:	2300      	movs	r3, #0
 8013ce4:	60fb      	str	r3, [r7, #12]
    }

    if (MX_WIFI_STATUS_OK != ret)
 8013ce6:	68fb      	ldr	r3, [r7, #12]
 8013ce8:	2b00      	cmp	r3, #0
 8013cea:	d003      	beq.n	8013cf4 <hw_start+0x54>
    {
      ret = NET_ERROR_DEVICE_ERROR;
 8013cec:	f06f 030c 	mvn.w	r3, #12
 8013cf0:	60fb      	str	r3, [r7, #12]
 8013cf2:	e03b      	b.n	8013d6c <hw_start+0xcc>
    else
    {
      /* Wait for Mxchip WiFi reboot. */

      /* Initialize the WiFi module. */
      if (MX_WIFI_STATUS_OK != MX_WIFI_Init(wifi_obj_get()))
 8013cf4:	f7f5 ff96 	bl	8009c24 <wifi_obj_get>
 8013cf8:	4603      	mov	r3, r0
 8013cfa:	4618      	mov	r0, r3
 8013cfc:	f7f3 fdc8 	bl	8007890 <MX_WIFI_Init>
 8013d00:	4603      	mov	r3, r0
 8013d02:	2b00      	cmp	r3, #0
 8013d04:	d003      	beq.n	8013d0e <hw_start+0x6e>
      {
        ret = NET_ERROR_INTERFACE_FAILURE;
 8013d06:	f06f 0310 	mvn.w	r3, #16
 8013d0a:	60fb      	str	r3, [r7, #12]
 8013d0c:	e02e      	b.n	8013d6c <hw_start+0xcc>
      }
      else
      {
        DEBUG_LOG("%s\n", "MX_WIFI_Init [OK]");
        /* Retrieve the WiFi module information. */
        (void)strncpy(pnetif->DeviceName, (const char *)wifi_obj_get()->SysInfo.Product_Name, sizeof(pnetif->DeviceName));
 8013d0e:	687b      	ldr	r3, [r7, #4]
 8013d10:	f103 0425 	add.w	r4, r3, #37	; 0x25
 8013d14:	f7f5 ff86 	bl	8009c24 <wifi_obj_get>
 8013d18:	4603      	mov	r3, r0
 8013d1a:	3314      	adds	r3, #20
 8013d1c:	2240      	movs	r2, #64	; 0x40
 8013d1e:	4619      	mov	r1, r3
 8013d20:	4620      	mov	r0, r4
 8013d22:	f002 fe9e 	bl	8016a62 <strncpy>
        (void)strncpy(pnetif->DeviceID, (const char *)wifi_obj_get()->SysInfo.Product_ID, sizeof(pnetif->DeviceID));
 8013d26:	687b      	ldr	r3, [r7, #4]
 8013d28:	f103 0465 	add.w	r4, r3, #101	; 0x65
 8013d2c:	f7f5 ff7a 	bl	8009c24 <wifi_obj_get>
 8013d30:	4603      	mov	r3, r0
 8013d32:	3334      	adds	r3, #52	; 0x34
 8013d34:	2240      	movs	r2, #64	; 0x40
 8013d36:	4619      	mov	r1, r3
 8013d38:	4620      	mov	r0, r4
 8013d3a:	f002 fe92 	bl	8016a62 <strncpy>
        (void)strncpy(pnetif->DeviceVer, (const char *)wifi_obj_get()->SysInfo.FW_Rev, sizeof(pnetif->DeviceVer));
 8013d3e:	687b      	ldr	r3, [r7, #4]
 8013d40:	f103 04a5 	add.w	r4, r3, #165	; 0xa5
 8013d44:	f7f5 ff6e 	bl	8009c24 <wifi_obj_get>
 8013d48:	4603      	mov	r3, r0
 8013d4a:	3354      	adds	r3, #84	; 0x54
 8013d4c:	2240      	movs	r2, #64	; 0x40
 8013d4e:	4619      	mov	r1, r3
 8013d50:	4620      	mov	r0, r4
 8013d52:	f002 fe86 	bl	8016a62 <strncpy>

        (void)MX_WIFI_GetMACAddress(wifi_obj_get(), pnetif->macaddr.mac);
 8013d56:	f7f5 ff65 	bl	8009c24 <wifi_obj_get>
 8013d5a:	4602      	mov	r2, r0
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	33e5      	adds	r3, #229	; 0xe5
 8013d60:	4619      	mov	r1, r3
 8013d62:	4610      	mov	r0, r2
 8013d64:	f7f3 feca 	bl	8007afc <MX_WIFI_GetMACAddress>
          ret = NET_ERROR_MODULE_INITIALIZATION;
        }
        else
#endif /* (MX_WIFI_NETWORK_BYPASS_MODE == 1) */
        {
          ret = NET_OK;
 8013d68:	2300      	movs	r3, #0
 8013d6a:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8013d6c:	68fb      	ldr	r3, [r7, #12]
}
 8013d6e:	4618      	mov	r0, r3
 8013d70:	3714      	adds	r7, #20
 8013d72:	46bd      	mov	sp, r7
 8013d74:	bd90      	pop	{r4, r7, pc}
	...

08013d78 <mx_wifi_if_stop>:
  * @brief                   Mxchip WiFi driver interface stop
  * @param  pnetif           net interface pointer
  * @return int32_t          0 if success, otherwise failed
  */
static int32_t mx_wifi_if_stop(net_if_handle_t *pnetif)
{
 8013d78:	b580      	push	{r7, lr}
 8013d7a:	b082      	sub	sp, #8
 8013d7c:	af00      	add	r7, sp, #0
 8013d7e:	6078      	str	r0, [r7, #4]
  if (pnetif->pdrv->extension.wifi->mode == NET_WIFI_MODE_STA)
 8013d80:	687b      	ldr	r3, [r7, #4]
 8013d82:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8013d86:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013d88:	7f1b      	ldrb	r3, [r3, #28]
 8013d8a:	2b00      	cmp	r3, #0
 8013d8c:	d11e      	bne.n	8013dcc <mx_wifi_if_stop+0x54>
  {
    if (((int32_t)NET_WIFI_SM_WPS_OPEN == pnetif->pdrv->extension.wifi->credentials->security_mode) || \
 8013d8e:	687b      	ldr	r3, [r7, #4]
 8013d90:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8013d94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013d96:	699b      	ldr	r3, [r3, #24]
 8013d98:	689b      	ldr	r3, [r3, #8]
 8013d9a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8013d9e:	d008      	beq.n	8013db2 <mx_wifi_if_stop+0x3a>
        ((int32_t)NET_WIFI_SM_WPS_SECURE == pnetif->pdrv->extension.wifi->credentials->security_mode))
 8013da0:	687b      	ldr	r3, [r7, #4]
 8013da2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8013da6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013da8:	699b      	ldr	r3, [r3, #24]
 8013daa:	689b      	ldr	r3, [r3, #8]
    if (((int32_t)NET_WIFI_SM_WPS_OPEN == pnetif->pdrv->extension.wifi->credentials->security_mode) || \
 8013dac:	4a0f      	ldr	r2, [pc, #60]	; (8013dec <mx_wifi_if_stop+0x74>)
 8013dae:	4293      	cmp	r3, r2
 8013db0:	d105      	bne.n	8013dbe <mx_wifi_if_stop+0x46>
    {
      (void)MX_WIFI_WPS_Stop(wifi_obj_get());
 8013db2:	f7f5 ff37 	bl	8009c24 <wifi_obj_get>
 8013db6:	4603      	mov	r3, r0
 8013db8:	4618      	mov	r0, r3
 8013dba:	f7f4 f939 	bl	8008030 <MX_WIFI_WPS_Stop>
    }
    (void)MX_WIFI_Disconnect(wifi_obj_get());
 8013dbe:	f7f5 ff31 	bl	8009c24 <wifi_obj_get>
 8013dc2:	4603      	mov	r3, r0
 8013dc4:	4618      	mov	r0, r3
 8013dc6:	f7f4 f8dd 	bl	8007f84 <MX_WIFI_Disconnect>
 8013dca:	e005      	b.n	8013dd8 <mx_wifi_if_stop+0x60>
    Station_pNetif = NULL;
#endif /* (MX_WIFI_NETWORK_BYPASS_MODE == 1) */
  }
  else
  {
    (void)MX_WIFI_StopAP(wifi_obj_get());
 8013dcc:	f7f5 ff2a 	bl	8009c24 <wifi_obj_get>
 8013dd0:	4603      	mov	r3, r0
 8013dd2:	4618      	mov	r0, r3
 8013dd4:	f7f4 fa48 	bl	8008268 <MX_WIFI_StopAP>
#if (defined(MX_WIFI_NETWORK_BYPASS_MODE) && (MX_WIFI_NETWORK_BYPASS_MODE == 1))
    SoftAP_pNetif = NULL;
#endif /* (MX_WIFI_NETWORK_BYPASS_MODE == 1) */
  }

  (void) net_state_manage_event(pnetif, NET_EVENT_INTERFACE_INITIALIZED);
 8013dd8:	2106      	movs	r1, #6
 8013dda:	6878      	ldr	r0, [r7, #4]
 8013ddc:	f7ff fdb0 	bl	8013940 <net_state_manage_event>

  return NET_OK;
 8013de0:	2300      	movs	r3, #0
}
 8013de2:	4618      	mov	r0, r3
 8013de4:	3708      	adds	r7, #8
 8013de6:	46bd      	mov	sp, r7
 8013de8:	bd80      	pop	{r7, pc}
 8013dea:	bf00      	nop
 8013dec:	10000004 	.word	0x10000004

08013df0 <mx_wifi_if_yield>:
  * @param  pnetif           net interface
  * @param  timeout_ms       timeout in milliseconds
  * @return int32_t          0 if success, otherwise failed
  */
static int32_t mx_wifi_if_yield(net_if_handle_t *pnetif, uint32_t timeout_ms)
{
 8013df0:	b580      	push	{r7, lr}
 8013df2:	b084      	sub	sp, #16
 8013df4:	af00      	add	r7, sp, #0
 8013df6:	6078      	str	r0, [r7, #4]
 8013df8:	6039      	str	r1, [r7, #0]
  const int32_t ret = MX_WIFI_IO_YIELD(wifi_obj_get(), timeout_ms);
 8013dfa:	f7f5 ff13 	bl	8009c24 <wifi_obj_get>
 8013dfe:	4603      	mov	r3, r0
 8013e00:	6839      	ldr	r1, [r7, #0]
 8013e02:	4618      	mov	r0, r3
 8013e04:	f7f3 fe67 	bl	8007ad6 <MX_WIFI_IO_YIELD>
 8013e08:	4603      	mov	r3, r0
 8013e0a:	60fb      	str	r3, [r7, #12]

  (void)pnetif;

  return ret;
 8013e0c:	68fb      	ldr	r3, [r7, #12]
}
 8013e0e:	4618      	mov	r0, r3
 8013e10:	3710      	adds	r7, #16
 8013e12:	46bd      	mov	sp, r7
 8013e14:	bd80      	pop	{r7, pc}

08013e16 <mx_wifi_status_changed>:
  * @param  cate             status cate
  * @param  status           status
  * @param  arg              user arguments
  */
static void mx_wifi_status_changed(uint8_t cate, uint8_t status, void *arg)
{
 8013e16:	b590      	push	{r4, r7, lr}
 8013e18:	b085      	sub	sp, #20
 8013e1a:	af00      	add	r7, sp, #0
 8013e1c:	4603      	mov	r3, r0
 8013e1e:	603a      	str	r2, [r7, #0]
 8013e20:	71fb      	strb	r3, [r7, #7]
 8013e22:	460b      	mov	r3, r1
 8013e24:	71bb      	strb	r3, [r7, #6]
  net_if_handle_t *const pnetif = (net_if_handle_t *)arg;
 8013e26:	683b      	ldr	r3, [r7, #0]
 8013e28:	60fb      	str	r3, [r7, #12]
  net_state_t net_state = NET_STATE_DEINITIALIZED;
 8013e2a:	2300      	movs	r3, #0
 8013e2c:	72fb      	strb	r3, [r7, #11]

  net_if_getState(pnetif, &net_state);
 8013e2e:	f107 030b 	add.w	r3, r7, #11
 8013e32:	4619      	mov	r1, r3
 8013e34:	68f8      	ldr	r0, [r7, #12]
 8013e36:	f7fe fd0b 	bl	8012850 <net_if_getState>

  if ((uint8_t)MC_STATION == cate)
 8013e3a:	79fb      	ldrb	r3, [r7, #7]
 8013e3c:	2b01      	cmp	r3, #1
 8013e3e:	d17c      	bne.n	8013f3a <mx_wifi_status_changed+0x124>
  {
    switch (status)
 8013e40:	79bb      	ldrb	r3, [r7, #6]
 8013e42:	2b03      	cmp	r3, #3
 8013e44:	d01d      	beq.n	8013e82 <mx_wifi_status_changed+0x6c>
 8013e46:	2b03      	cmp	r3, #3
 8013e48:	f300 809e 	bgt.w	8013f88 <mx_wifi_status_changed+0x172>
 8013e4c:	2b01      	cmp	r3, #1
 8013e4e:	d002      	beq.n	8013e56 <mx_wifi_status_changed+0x40>
 8013e50:	2b02      	cmp	r3, #2
 8013e52:	d011      	beq.n	8013e78 <mx_wifi_status_changed+0x62>
#endif  /* MX_WIFI_NETWORK_BYPASS_MODE */
      }
      break;

      default:
        break;
 8013e54:	e098      	b.n	8013f88 <mx_wifi_status_changed+0x172>
        if (NET_STATE_STOPPING == net_state)
 8013e56:	7afb      	ldrb	r3, [r7, #11]
 8013e58:	2b06      	cmp	r3, #6
 8013e5a:	d104      	bne.n	8013e66 <mx_wifi_status_changed+0x50>
          (void)net_state_manage_event(pnetif, NET_EVENT_INTERFACE_INITIALIZED);
 8013e5c:	2106      	movs	r1, #6
 8013e5e:	68f8      	ldr	r0, [r7, #12]
 8013e60:	f7ff fd6e 	bl	8013940 <net_state_manage_event>
      break;
 8013e64:	e092      	b.n	8013f8c <mx_wifi_status_changed+0x176>
        else if (NET_STATE_CONNECTED == net_state)
 8013e66:	7afb      	ldrb	r3, [r7, #11]
 8013e68:	2b05      	cmp	r3, #5
 8013e6a:	f040 808f 	bne.w	8013f8c <mx_wifi_status_changed+0x176>
          (void)net_state_manage_event(pnetif, NET_EVENT_LINK_DOWN);
 8013e6e:	2109      	movs	r1, #9
 8013e70:	68f8      	ldr	r0, [r7, #12]
 8013e72:	f7ff fd65 	bl	8013940 <net_state_manage_event>
      break;
 8013e76:	e089      	b.n	8013f8c <mx_wifi_status_changed+0x176>
        (void)net_state_manage_event(pnetif, NET_EVENT_INTERFACE_READY);
 8013e78:	2107      	movs	r1, #7
 8013e7a:	68f8      	ldr	r0, [r7, #12]
 8013e7c:	f7ff fd60 	bl	8013940 <net_state_manage_event>
      break;
 8013e80:	e085      	b.n	8013f8e <mx_wifi_status_changed+0x178>
        pnetif->ipaddr.addr = NET_ARTON(wifi_obj_get()->NetSettings.IP_Addr);
 8013e82:	f7f5 fecf 	bl	8009c24 <wifi_obj_get>
 8013e86:	4603      	mov	r3, r0
 8013e88:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8013e8c:	061c      	lsls	r4, r3, #24
 8013e8e:	f7f5 fec9 	bl	8009c24 <wifi_obj_get>
 8013e92:	4603      	mov	r3, r0
 8013e94:	f893 30df 	ldrb.w	r3, [r3, #223]	; 0xdf
 8013e98:	041b      	lsls	r3, r3, #16
 8013e9a:	431c      	orrs	r4, r3
 8013e9c:	f7f5 fec2 	bl	8009c24 <wifi_obj_get>
 8013ea0:	4603      	mov	r3, r0
 8013ea2:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
 8013ea6:	021b      	lsls	r3, r3, #8
 8013ea8:	431c      	orrs	r4, r3
 8013eaa:	f7f5 febb 	bl	8009c24 <wifi_obj_get>
 8013eae:	4603      	mov	r3, r0
 8013eb0:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8013eb4:	ea44 0203 	orr.w	r2, r4, r3
 8013eb8:	68fb      	ldr	r3, [r7, #12]
 8013eba:	605a      	str	r2, [r3, #4]
        pnetif->netmask.addr = NET_ARTON(wifi_obj_get()->NetSettings.IP_Mask);
 8013ebc:	f7f5 feb2 	bl	8009c24 <wifi_obj_get>
 8013ec0:	4603      	mov	r3, r0
 8013ec2:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
 8013ec6:	061c      	lsls	r4, r3, #24
 8013ec8:	f7f5 feac 	bl	8009c24 <wifi_obj_get>
 8013ecc:	4603      	mov	r3, r0
 8013ece:	f893 30e3 	ldrb.w	r3, [r3, #227]	; 0xe3
 8013ed2:	041b      	lsls	r3, r3, #16
 8013ed4:	431c      	orrs	r4, r3
 8013ed6:	f7f5 fea5 	bl	8009c24 <wifi_obj_get>
 8013eda:	4603      	mov	r3, r0
 8013edc:	f893 30e2 	ldrb.w	r3, [r3, #226]	; 0xe2
 8013ee0:	021b      	lsls	r3, r3, #8
 8013ee2:	431c      	orrs	r4, r3
 8013ee4:	f7f5 fe9e 	bl	8009c24 <wifi_obj_get>
 8013ee8:	4603      	mov	r3, r0
 8013eea:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8013eee:	ea44 0203 	orr.w	r2, r4, r3
 8013ef2:	68fb      	ldr	r3, [r7, #12]
 8013ef4:	60da      	str	r2, [r3, #12]
        pnetif->gateway.addr = NET_ARTON(wifi_obj_get()->NetSettings.Gateway_Addr);
 8013ef6:	f7f5 fe95 	bl	8009c24 <wifi_obj_get>
 8013efa:	4603      	mov	r3, r0
 8013efc:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8013f00:	061c      	lsls	r4, r3, #24
 8013f02:	f7f5 fe8f 	bl	8009c24 <wifi_obj_get>
 8013f06:	4603      	mov	r3, r0
 8013f08:	f893 30e7 	ldrb.w	r3, [r3, #231]	; 0xe7
 8013f0c:	041b      	lsls	r3, r3, #16
 8013f0e:	431c      	orrs	r4, r3
 8013f10:	f7f5 fe88 	bl	8009c24 <wifi_obj_get>
 8013f14:	4603      	mov	r3, r0
 8013f16:	f893 30e6 	ldrb.w	r3, [r3, #230]	; 0xe6
 8013f1a:	021b      	lsls	r3, r3, #8
 8013f1c:	431c      	orrs	r4, r3
 8013f1e:	f7f5 fe81 	bl	8009c24 <wifi_obj_get>
 8013f22:	4603      	mov	r3, r0
 8013f24:	f893 30e5 	ldrb.w	r3, [r3, #229]	; 0xe5
 8013f28:	ea44 0203 	orr.w	r2, r4, r3
 8013f2c:	68fb      	ldr	r3, [r7, #12]
 8013f2e:	609a      	str	r2, [r3, #8]
        (void)net_state_manage_event(pnetif, NET_EVENT_IPADDR);
 8013f30:	210a      	movs	r1, #10
 8013f32:	68f8      	ldr	r0, [r7, #12]
 8013f34:	f7ff fd04 	bl	8013940 <net_state_manage_event>
      break;
 8013f38:	e029      	b.n	8013f8e <mx_wifi_status_changed+0x178>
    }
  }
  else if ((uint8_t)MC_SOFTAP == cate)
 8013f3a:	79fb      	ldrb	r3, [r7, #7]
 8013f3c:	2b00      	cmp	r3, #0
 8013f3e:	d126      	bne.n	8013f8e <mx_wifi_status_changed+0x178>
  {
    switch (status)
 8013f40:	79bb      	ldrb	r3, [r7, #6]
 8013f42:	2b04      	cmp	r3, #4
 8013f44:	d002      	beq.n	8013f4c <mx_wifi_status_changed+0x136>
 8013f46:	2b05      	cmp	r3, #5
 8013f48:	d00d      	beq.n	8013f66 <mx_wifi_status_changed+0x150>
        (void) net_state_manage_event(pnetif, NET_EVENT_INTERFACE_READY);
      }
      break;

      default:
        break;
 8013f4a:	e020      	b.n	8013f8e <mx_wifi_status_changed+0x178>
        if (NET_STATE_CONNECTED == net_state)
 8013f4c:	7afb      	ldrb	r3, [r7, #11]
 8013f4e:	2b05      	cmp	r3, #5
 8013f50:	d104      	bne.n	8013f5c <mx_wifi_status_changed+0x146>
          (void)net_state_manage_event(pnetif, NET_EVENT_LINK_DOWN);
 8013f52:	2109      	movs	r1, #9
 8013f54:	68f8      	ldr	r0, [r7, #12]
 8013f56:	f7ff fcf3 	bl	8013940 <net_state_manage_event>
      break;
 8013f5a:	e018      	b.n	8013f8e <mx_wifi_status_changed+0x178>
          (void)net_state_manage_event(pnetif, NET_EVENT_INTERFACE_READY);
 8013f5c:	2107      	movs	r1, #7
 8013f5e:	68f8      	ldr	r0, [r7, #12]
 8013f60:	f7ff fcee 	bl	8013940 <net_state_manage_event>
      break;
 8013f64:	e013      	b.n	8013f8e <mx_wifi_status_changed+0x178>
        pnetif->ipaddr = pnetif->static_ipaddr;
 8013f66:	68fb      	ldr	r3, [r7, #12]
 8013f68:	68fa      	ldr	r2, [r7, #12]
 8013f6a:	6912      	ldr	r2, [r2, #16]
 8013f6c:	605a      	str	r2, [r3, #4]
        pnetif->gateway = pnetif->static_gateway;
 8013f6e:	68fb      	ldr	r3, [r7, #12]
 8013f70:	68fa      	ldr	r2, [r7, #12]
 8013f72:	6952      	ldr	r2, [r2, #20]
 8013f74:	609a      	str	r2, [r3, #8]
        pnetif->netmask = pnetif->static_netmask;
 8013f76:	68fb      	ldr	r3, [r7, #12]
 8013f78:	68fa      	ldr	r2, [r7, #12]
 8013f7a:	6992      	ldr	r2, [r2, #24]
 8013f7c:	60da      	str	r2, [r3, #12]
        (void) net_state_manage_event(pnetif, NET_EVENT_INTERFACE_READY);
 8013f7e:	2107      	movs	r1, #7
 8013f80:	68f8      	ldr	r0, [r7, #12]
 8013f82:	f7ff fcdd 	bl	8013940 <net_state_manage_event>
      break;
 8013f86:	e002      	b.n	8013f8e <mx_wifi_status_changed+0x178>
        break;
 8013f88:	bf00      	nop
 8013f8a:	e000      	b.n	8013f8e <mx_wifi_status_changed+0x178>
      break;
 8013f8c:	bf00      	nop
  }
  else
  {
    /* nothing */
  }
}
 8013f8e:	bf00      	nop
 8013f90:	3714      	adds	r7, #20
 8013f92:	46bd      	mov	sp, r7
 8013f94:	bd90      	pop	{r4, r7, pc}
	...

08013f98 <mx_wifi_if_start_station>:
  * @brief                   Mxchip WiFi connect to AP
  * @param  pnetif           net interface
  * @return int32_t          0 if success, otherwise failed
  */
static int32_t mx_wifi_if_start_station(net_if_handle_t *pnetif)
{
 8013f98:	b580      	push	{r7, lr}
 8013f9a:	b086      	sub	sp, #24
 8013f9c:	af00      	add	r7, sp, #0
 8013f9e:	6078      	str	r0, [r7, #4]
  int32_t ret;
  const net_wifi_credentials_t *const credentials = pnetif->pdrv->extension.wifi->credentials;
 8013fa0:	687b      	ldr	r3, [r7, #4]
 8013fa2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8013fa6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013fa8:	699b      	ldr	r3, [r3, #24]
 8013faa:	613b      	str	r3, [r7, #16]

  if (false == pnetif->dhcp_mode)
 8013fac:	687b      	ldr	r3, [r7, #4]
 8013fae:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013fb2:	f083 0301 	eor.w	r3, r3, #1
 8013fb6:	b2db      	uxtb	r3, r3
 8013fb8:	2b00      	cmp	r3, #0
 8013fba:	d01e      	beq.n	8013ffa <mx_wifi_if_start_station+0x62>
  {
    wifi_obj_get()->NetSettings.DHCP_IsEnabled = 0;
 8013fbc:	f7f5 fe32 	bl	8009c24 <wifi_obj_get>
 8013fc0:	4603      	mov	r3, r0
 8013fc2:	2200      	movs	r2, #0
 8013fc4:	f883 20db 	strb.w	r2, [r3, #219]	; 0xdb
    (void)memcpy(wifi_obj_get()->NetSettings.IP6_Mask, &pnetif->static_netmask.u_addr.ip6, 16);
    (void)memcpy(wifi_obj_get()->NetSettings.Gateway6_Addr, &pnetif->static_gateway.u_addr.ip6, 16);

#else
    /* IPv4 */
    (void)memcpy(wifi_obj_get()->NetSettings.IP_Addr, &pnetif->static_ipaddr, 4);
 8013fc8:	f7f5 fe2c 	bl	8009c24 <wifi_obj_get>
 8013fcc:	4603      	mov	r3, r0
 8013fce:	33dd      	adds	r3, #221	; 0xdd
 8013fd0:	687a      	ldr	r2, [r7, #4]
 8013fd2:	3210      	adds	r2, #16
 8013fd4:	6812      	ldr	r2, [r2, #0]
 8013fd6:	601a      	str	r2, [r3, #0]
    (void)memcpy(wifi_obj_get()->NetSettings.IP_Mask, &pnetif->static_netmask, 4);
 8013fd8:	f7f5 fe24 	bl	8009c24 <wifi_obj_get>
 8013fdc:	4603      	mov	r3, r0
 8013fde:	33e1      	adds	r3, #225	; 0xe1
 8013fe0:	687a      	ldr	r2, [r7, #4]
 8013fe2:	3218      	adds	r2, #24
 8013fe4:	6812      	ldr	r2, [r2, #0]
 8013fe6:	601a      	str	r2, [r3, #0]
    (void)memcpy(wifi_obj_get()->NetSettings.Gateway_Addr, &pnetif->static_gateway, 4);
 8013fe8:	f7f5 fe1c 	bl	8009c24 <wifi_obj_get>
 8013fec:	4603      	mov	r3, r0
 8013fee:	33e5      	adds	r3, #229	; 0xe5
 8013ff0:	687a      	ldr	r2, [r7, #4]
 8013ff2:	3214      	adds	r2, #20
 8013ff4:	6812      	ldr	r2, [r2, #0]
 8013ff6:	601a      	str	r2, [r3, #0]
 8013ff8:	e005      	b.n	8014006 <mx_wifi_if_start_station+0x6e>
#endif /* NET_USE_IPV6 */
  }
  else
  {
    wifi_obj_get()->NetSettings.DHCP_IsEnabled = 1;
 8013ffa:	f7f5 fe13 	bl	8009c24 <wifi_obj_get>
 8013ffe:	4603      	mov	r3, r0
 8014000:	2201      	movs	r2, #1
 8014002:	f883 20db 	strb.w	r2, [r3, #219]	; 0xdb
  }

  (void)MX_WIFI_RegisterStatusCallback_if(wifi_obj_get(), mx_wifi_status_changed, pnetif, MC_STATION);
 8014006:	f7f5 fe0d 	bl	8009c24 <wifi_obj_get>
 801400a:	2301      	movs	r3, #1
 801400c:	687a      	ldr	r2, [r7, #4]
 801400e:	4914      	ldr	r1, [pc, #80]	; (8014060 <mx_wifi_if_start_station+0xc8>)
 8014010:	f7f3 fe64 	bl	8007cdc <MX_WIFI_RegisterStatusCallback_if>

  if (((int32_t)NET_WIFI_SM_WPS_OPEN == credentials->security_mode) || \
 8014014:	693b      	ldr	r3, [r7, #16]
 8014016:	689b      	ldr	r3, [r3, #8]
 8014018:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801401c:	d004      	beq.n	8014028 <mx_wifi_if_start_station+0x90>
      ((int32_t)NET_WIFI_SM_WPS_SECURE == credentials->security_mode))
 801401e:	693b      	ldr	r3, [r7, #16]
 8014020:	689b      	ldr	r3, [r3, #8]
  if (((int32_t)NET_WIFI_SM_WPS_OPEN == credentials->security_mode) || \
 8014022:	4a10      	ldr	r2, [pc, #64]	; (8014064 <mx_wifi_if_start_station+0xcc>)
 8014024:	4293      	cmp	r3, r2
 8014026:	d108      	bne.n	801403a <mx_wifi_if_start_station+0xa2>
  {
    ret = MX_WIFI_WPS_Connect(wifi_obj_get());
 8014028:	f7f5 fdfc 	bl	8009c24 <wifi_obj_get>
 801402c:	4603      	mov	r3, r0
 801402e:	4618      	mov	r0, r3
 8014030:	f7f3 ffd3 	bl	8007fda <MX_WIFI_WPS_Connect>
 8014034:	4603      	mov	r3, r0
 8014036:	617b      	str	r3, [r7, #20]
 8014038:	e00c      	b.n	8014054 <mx_wifi_if_start_station+0xbc>
  }
  else
  {
    /* NOTE: secure type is auto for Mxchip WiFi */
    const MX_WIFI_SecurityType_t secure_type = MX_WIFI_SEC_AUTO;
 801403a:	2307      	movs	r3, #7
 801403c:	73fb      	strb	r3, [r7, #15]
    ret = MX_WIFI_Connect(wifi_obj_get(), credentials->ssid, credentials->psk, secure_type);
 801403e:	f7f5 fdf1 	bl	8009c24 <wifi_obj_get>
 8014042:	693b      	ldr	r3, [r7, #16]
 8014044:	6819      	ldr	r1, [r3, #0]
 8014046:	693b      	ldr	r3, [r7, #16]
 8014048:	685a      	ldr	r2, [r3, #4]
 801404a:	7bfb      	ldrb	r3, [r7, #15]
 801404c:	f7f3 fe71 	bl	8007d32 <MX_WIFI_Connect>
 8014050:	4603      	mov	r3, r0
 8014052:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8014054:	697b      	ldr	r3, [r7, #20]
}
 8014056:	4618      	mov	r0, r3
 8014058:	3718      	adds	r7, #24
 801405a:	46bd      	mov	sp, r7
 801405c:	bd80      	pop	{r7, pc}
 801405e:	bf00      	nop
 8014060:	08013e17 	.word	0x08013e17
 8014064:	10000004 	.word	0x10000004

08014068 <mx_wifi_if_start_softap>:
  * @brief                   Mxchip WiFi start AP mode
  * @param  pnetif           net interface
  * @return int32_t          0 if success, otherwise failed
  */
static int32_t mx_wifi_if_start_softap(net_if_handle_t *pnetif)
{
 8014068:	b590      	push	{r4, r7, lr}
 801406a:	b0b3      	sub	sp, #204	; 0xcc
 801406c:	af04      	add	r7, sp, #16
 801406e:	6078      	str	r0, [r7, #4]
  (void)pnetif;
  /* This is independent of what is supported by IP stack IPv6 or Ipv4 */
  return NET_ERROR_UNSUPPORTED;

#else
  int32_t ret = NET_ERROR_GENERIC;
 8014070:	f06f 031c 	mvn.w	r3, #28
 8014074:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

  MX_WIFI_APSettings_t ap_cfg = {0};
 8014078:	f107 030c 	add.w	r3, r7, #12
 801407c:	22a3      	movs	r2, #163	; 0xa3
 801407e:	2100      	movs	r1, #0
 8014080:	4618      	mov	r0, r3
 8014082:	f002 fd2b 	bl	8016adc <memset>
  const net_wifi_credentials_t *const credentials = pnetif->pdrv->extension.wifi->credentials;
 8014086:	687b      	ldr	r3, [r7, #4]
 8014088:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 801408c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801408e:	699b      	ldr	r3, [r3, #24]
 8014090:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  if (credentials != NULL)
 8014094:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8014098:	2b00      	cmp	r3, #0
 801409a:	d012      	beq.n	80140c2 <mx_wifi_if_start_softap+0x5a>
  {
    (void)strncpy(ap_cfg.SSID, credentials->ssid, sizeof(ap_cfg.SSID));
 801409c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80140a0:	6819      	ldr	r1, [r3, #0]
 80140a2:	f107 030c 	add.w	r3, r7, #12
 80140a6:	2221      	movs	r2, #33	; 0x21
 80140a8:	4618      	mov	r0, r3
 80140aa:	f002 fcda 	bl	8016a62 <strncpy>
    (void)strncpy(ap_cfg.pswd, credentials->psk, sizeof(ap_cfg.pswd));
 80140ae:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80140b2:	6859      	ldr	r1, [r3, #4]
 80140b4:	f107 030c 	add.w	r3, r7, #12
 80140b8:	3321      	adds	r3, #33	; 0x21
 80140ba:	2241      	movs	r2, #65	; 0x41
 80140bc:	4618      	mov	r0, r3
 80140be:	f002 fcd0 	bl	8016a62 <strncpy>
  }

  ap_cfg.channel = pnetif->pdrv->extension.wifi->access_channel;
 80140c2:	687b      	ldr	r3, [r7, #4]
 80140c4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80140c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80140ca:	7f5b      	ldrb	r3, [r3, #29]
 80140cc:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
  (void)snprintf(ap_cfg.ip.dnserver, sizeof(ap_cfg.ip.dnserver), "%"PRIu32".%"PRIu32".%"PRIu32".%"PRIu32"",
                 ADDR(pnetif->static_dnserver.u_addr.ip4.addr));

#else
  (void)snprintf(ap_cfg.ip.localip, sizeof(ap_cfg.ip.localip), "%"PRIu32".%"PRIu32".%"PRIu32".%"PRIu32"",
                 ADDR(pnetif->static_ipaddr.addr));
 80140d0:	687b      	ldr	r3, [r7, #4]
 80140d2:	691b      	ldr	r3, [r3, #16]
  (void)snprintf(ap_cfg.ip.localip, sizeof(ap_cfg.ip.localip), "%"PRIu32".%"PRIu32".%"PRIu32".%"PRIu32"",
 80140d4:	b2dc      	uxtb	r4, r3
                 ADDR(pnetif->static_ipaddr.addr));
 80140d6:	687b      	ldr	r3, [r7, #4]
 80140d8:	691b      	ldr	r3, [r3, #16]
 80140da:	0a1b      	lsrs	r3, r3, #8
  (void)snprintf(ap_cfg.ip.localip, sizeof(ap_cfg.ip.localip), "%"PRIu32".%"PRIu32".%"PRIu32".%"PRIu32"",
 80140dc:	b2db      	uxtb	r3, r3
                 ADDR(pnetif->static_ipaddr.addr));
 80140de:	687a      	ldr	r2, [r7, #4]
 80140e0:	6912      	ldr	r2, [r2, #16]
 80140e2:	0c12      	lsrs	r2, r2, #16
  (void)snprintf(ap_cfg.ip.localip, sizeof(ap_cfg.ip.localip), "%"PRIu32".%"PRIu32".%"PRIu32".%"PRIu32"",
 80140e4:	b2d2      	uxtb	r2, r2
                 ADDR(pnetif->static_ipaddr.addr));
 80140e6:	6879      	ldr	r1, [r7, #4]
 80140e8:	6909      	ldr	r1, [r1, #16]
 80140ea:	0e09      	lsrs	r1, r1, #24
  (void)snprintf(ap_cfg.ip.localip, sizeof(ap_cfg.ip.localip), "%"PRIu32".%"PRIu32".%"PRIu32".%"PRIu32"",
 80140ec:	f107 000c 	add.w	r0, r7, #12
 80140f0:	3063      	adds	r0, #99	; 0x63
 80140f2:	9102      	str	r1, [sp, #8]
 80140f4:	9201      	str	r2, [sp, #4]
 80140f6:	9300      	str	r3, [sp, #0]
 80140f8:	4623      	mov	r3, r4
 80140fa:	4a3a      	ldr	r2, [pc, #232]	; (80141e4 <mx_wifi_if_start_softap+0x17c>)
 80140fc:	2110      	movs	r1, #16
 80140fe:	f001 fb87 	bl	8015810 <sniprintf>
  (void)snprintf(ap_cfg.ip.gateway, sizeof(ap_cfg.ip.gateway), "%"PRIu32".%"PRIu32".%"PRIu32".%"PRIu32"",
                 ADDR(pnetif->static_gateway.addr));
 8014102:	687b      	ldr	r3, [r7, #4]
 8014104:	695b      	ldr	r3, [r3, #20]
  (void)snprintf(ap_cfg.ip.gateway, sizeof(ap_cfg.ip.gateway), "%"PRIu32".%"PRIu32".%"PRIu32".%"PRIu32"",
 8014106:	b2dc      	uxtb	r4, r3
                 ADDR(pnetif->static_gateway.addr));
 8014108:	687b      	ldr	r3, [r7, #4]
 801410a:	695b      	ldr	r3, [r3, #20]
 801410c:	0a1b      	lsrs	r3, r3, #8
  (void)snprintf(ap_cfg.ip.gateway, sizeof(ap_cfg.ip.gateway), "%"PRIu32".%"PRIu32".%"PRIu32".%"PRIu32"",
 801410e:	b2db      	uxtb	r3, r3
                 ADDR(pnetif->static_gateway.addr));
 8014110:	687a      	ldr	r2, [r7, #4]
 8014112:	6952      	ldr	r2, [r2, #20]
 8014114:	0c12      	lsrs	r2, r2, #16
  (void)snprintf(ap_cfg.ip.gateway, sizeof(ap_cfg.ip.gateway), "%"PRIu32".%"PRIu32".%"PRIu32".%"PRIu32"",
 8014116:	b2d2      	uxtb	r2, r2
                 ADDR(pnetif->static_gateway.addr));
 8014118:	6879      	ldr	r1, [r7, #4]
 801411a:	6949      	ldr	r1, [r1, #20]
 801411c:	0e09      	lsrs	r1, r1, #24
  (void)snprintf(ap_cfg.ip.gateway, sizeof(ap_cfg.ip.gateway), "%"PRIu32".%"PRIu32".%"PRIu32".%"PRIu32"",
 801411e:	f107 000c 	add.w	r0, r7, #12
 8014122:	3083      	adds	r0, #131	; 0x83
 8014124:	9102      	str	r1, [sp, #8]
 8014126:	9201      	str	r2, [sp, #4]
 8014128:	9300      	str	r3, [sp, #0]
 801412a:	4623      	mov	r3, r4
 801412c:	4a2d      	ldr	r2, [pc, #180]	; (80141e4 <mx_wifi_if_start_softap+0x17c>)
 801412e:	2110      	movs	r1, #16
 8014130:	f001 fb6e 	bl	8015810 <sniprintf>
  (void)snprintf(ap_cfg.ip.netmask, sizeof(ap_cfg.ip.netmask), "%"PRIu32".%"PRIu32".%"PRIu32".%"PRIu32"",
                 ADDR(pnetif->static_netmask.addr));
 8014134:	687b      	ldr	r3, [r7, #4]
 8014136:	699b      	ldr	r3, [r3, #24]
  (void)snprintf(ap_cfg.ip.netmask, sizeof(ap_cfg.ip.netmask), "%"PRIu32".%"PRIu32".%"PRIu32".%"PRIu32"",
 8014138:	b2dc      	uxtb	r4, r3
                 ADDR(pnetif->static_netmask.addr));
 801413a:	687b      	ldr	r3, [r7, #4]
 801413c:	699b      	ldr	r3, [r3, #24]
 801413e:	0a1b      	lsrs	r3, r3, #8
  (void)snprintf(ap_cfg.ip.netmask, sizeof(ap_cfg.ip.netmask), "%"PRIu32".%"PRIu32".%"PRIu32".%"PRIu32"",
 8014140:	b2db      	uxtb	r3, r3
                 ADDR(pnetif->static_netmask.addr));
 8014142:	687a      	ldr	r2, [r7, #4]
 8014144:	6992      	ldr	r2, [r2, #24]
 8014146:	0c12      	lsrs	r2, r2, #16
  (void)snprintf(ap_cfg.ip.netmask, sizeof(ap_cfg.ip.netmask), "%"PRIu32".%"PRIu32".%"PRIu32".%"PRIu32"",
 8014148:	b2d2      	uxtb	r2, r2
                 ADDR(pnetif->static_netmask.addr));
 801414a:	6879      	ldr	r1, [r7, #4]
 801414c:	6989      	ldr	r1, [r1, #24]
 801414e:	0e09      	lsrs	r1, r1, #24
  (void)snprintf(ap_cfg.ip.netmask, sizeof(ap_cfg.ip.netmask), "%"PRIu32".%"PRIu32".%"PRIu32".%"PRIu32"",
 8014150:	f107 000c 	add.w	r0, r7, #12
 8014154:	3073      	adds	r0, #115	; 0x73
 8014156:	9102      	str	r1, [sp, #8]
 8014158:	9201      	str	r2, [sp, #4]
 801415a:	9300      	str	r3, [sp, #0]
 801415c:	4623      	mov	r3, r4
 801415e:	4a21      	ldr	r2, [pc, #132]	; (80141e4 <mx_wifi_if_start_softap+0x17c>)
 8014160:	2110      	movs	r1, #16
 8014162:	f001 fb55 	bl	8015810 <sniprintf>
  (void)snprintf(ap_cfg.ip.dnserver, sizeof(ap_cfg.ip.dnserver), "%"PRIu32".%"PRIu32".%"PRIu32".%"PRIu32"",
                 ADDR(pnetif->static_dnserver.addr));
 8014166:	687b      	ldr	r3, [r7, #4]
 8014168:	69db      	ldr	r3, [r3, #28]
  (void)snprintf(ap_cfg.ip.dnserver, sizeof(ap_cfg.ip.dnserver), "%"PRIu32".%"PRIu32".%"PRIu32".%"PRIu32"",
 801416a:	b2dc      	uxtb	r4, r3
                 ADDR(pnetif->static_dnserver.addr));
 801416c:	687b      	ldr	r3, [r7, #4]
 801416e:	69db      	ldr	r3, [r3, #28]
 8014170:	0a1b      	lsrs	r3, r3, #8
  (void)snprintf(ap_cfg.ip.dnserver, sizeof(ap_cfg.ip.dnserver), "%"PRIu32".%"PRIu32".%"PRIu32".%"PRIu32"",
 8014172:	b2db      	uxtb	r3, r3
                 ADDR(pnetif->static_dnserver.addr));
 8014174:	687a      	ldr	r2, [r7, #4]
 8014176:	69d2      	ldr	r2, [r2, #28]
 8014178:	0c12      	lsrs	r2, r2, #16
  (void)snprintf(ap_cfg.ip.dnserver, sizeof(ap_cfg.ip.dnserver), "%"PRIu32".%"PRIu32".%"PRIu32".%"PRIu32"",
 801417a:	b2d2      	uxtb	r2, r2
                 ADDR(pnetif->static_dnserver.addr));
 801417c:	6879      	ldr	r1, [r7, #4]
 801417e:	69c9      	ldr	r1, [r1, #28]
 8014180:	0e09      	lsrs	r1, r1, #24
  (void)snprintf(ap_cfg.ip.dnserver, sizeof(ap_cfg.ip.dnserver), "%"PRIu32".%"PRIu32".%"PRIu32".%"PRIu32"",
 8014182:	f107 000c 	add.w	r0, r7, #12
 8014186:	3093      	adds	r0, #147	; 0x93
 8014188:	9102      	str	r1, [sp, #8]
 801418a:	9201      	str	r2, [sp, #4]
 801418c:	9300      	str	r3, [sp, #0]
 801418e:	4623      	mov	r3, r4
 8014190:	4a14      	ldr	r2, [pc, #80]	; (80141e4 <mx_wifi_if_start_softap+0x17c>)
 8014192:	2110      	movs	r1, #16
 8014194:	f001 fb3c 	bl	8015810 <sniprintf>
#endif /* NET_USE_LWIP_DEFINITIONS */

  (void)MX_WIFI_RegisterStatusCallback_if(wifi_obj_get(), mx_wifi_status_changed, pnetif, MC_SOFTAP);
 8014198:	f7f5 fd44 	bl	8009c24 <wifi_obj_get>
 801419c:	2300      	movs	r3, #0
 801419e:	687a      	ldr	r2, [r7, #4]
 80141a0:	4911      	ldr	r1, [pc, #68]	; (80141e8 <mx_wifi_if_start_softap+0x180>)
 80141a2:	f7f3 fd9b 	bl	8007cdc <MX_WIFI_RegisterStatusCallback_if>

  if (MX_WIFI_STATUS_OK == MX_WIFI_StartAP(wifi_obj_get(), &ap_cfg))
 80141a6:	f7f5 fd3d 	bl	8009c24 <wifi_obj_get>
 80141aa:	4602      	mov	r2, r0
 80141ac:	f107 030c 	add.w	r3, r7, #12
 80141b0:	4619      	mov	r1, r3
 80141b2:	4610      	mov	r0, r2
 80141b4:	f7f3 ffe2 	bl	800817c <MX_WIFI_StartAP>
 80141b8:	4603      	mov	r3, r0
 80141ba:	2b00      	cmp	r3, #0
 80141bc:	d10b      	bne.n	80141d6 <mx_wifi_if_start_softap+0x16e>
  {
    /* Soft AP MAC must get after Soft AP up, call this one to update SysInfo.apMAC. */
    (void)MX_WIFI_GetsoftapMACAddress(wifi_obj_get(), pnetif->macaddr.mac);
 80141be:	f7f5 fd31 	bl	8009c24 <wifi_obj_get>
 80141c2:	4602      	mov	r2, r0
 80141c4:	687b      	ldr	r3, [r7, #4]
 80141c6:	33e5      	adds	r3, #229	; 0xe5
 80141c8:	4619      	mov	r1, r3
 80141ca:	4610      	mov	r0, r2
 80141cc:	f7f3 fcb2 	bl	8007b34 <MX_WIFI_GetsoftapMACAddress>

    ret = NET_OK;
 80141d0:	2300      	movs	r3, #0
 80141d2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  }

  return ret;
 80141d6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
#endif /* NET_USE_IPV6 */
}
 80141da:	4618      	mov	r0, r3
 80141dc:	37bc      	adds	r7, #188	; 0xbc
 80141de:	46bd      	mov	sp, r7
 80141e0:	bd90      	pop	{r4, r7, pc}
 80141e2:	bf00      	nop
 80141e4:	0801b518 	.word	0x0801b518
 80141e8:	08013e17 	.word	0x08013e17

080141ec <mx_wifi_if_disconnect>:
  * @brief                   Mxchip WiFi disconnect from AP
  * @param  pnetif           net interface
  * @return int32_t          0 if success, otherwise failed
  */
static int32_t mx_wifi_if_disconnect(net_if_handle_t *pnetif)
{
 80141ec:	b580      	push	{r7, lr}
 80141ee:	b084      	sub	sp, #16
 80141f0:	af00      	add	r7, sp, #0
 80141f2:	6078      	str	r0, [r7, #4]
      (void)net_state_manage_event(pnetif, NET_EVENT_INTERFACE_READY);
    }
  }

#else
  ret = NET_OK;
 80141f4:	2300      	movs	r3, #0
 80141f6:	60fb      	str	r3, [r7, #12]
  (void) net_state_manage_event(pnetif, NET_EVENT_INTERFACE_READY);
 80141f8:	2107      	movs	r1, #7
 80141fa:	6878      	ldr	r0, [r7, #4]
 80141fc:	f7ff fba0 	bl	8013940 <net_state_manage_event>
#endif /* (MX_WIFI_NETWORK_BYPASS_MODE == 1) */

  return ret;
 8014200:	68fb      	ldr	r3, [r7, #12]
}
 8014202:	4618      	mov	r0, r3
 8014204:	3710      	adds	r7, #16
 8014206:	46bd      	mov	sp, r7
 8014208:	bd80      	pop	{r7, pc}

0801420a <mx_wifi_if_connect>:
  * @brief                   Mxchip WiFi start IP services
  * @param  pnetif           net interface
  * @return int32_t          0 if success, otherwise failed
  */
static int32_t mx_wifi_if_connect(net_if_handle_t *pnetif)
{
 801420a:	b590      	push	{r4, r7, lr}
 801420c:	b087      	sub	sp, #28
 801420e:	af00      	add	r7, sp, #0
 8014210:	6078      	str	r0, [r7, #4]
    NET_DBG_ERROR("Can't add interface (netif)\n");
  }

#else
  mwifi_if_t wifi_mode;
  bool ip_got_flag = false;
 8014212:	2300      	movs	r3, #0
 8014214:	74bb      	strb	r3, [r7, #18]

  ret = NET_OK;
 8014216:	2300      	movs	r3, #0
 8014218:	617b      	str	r3, [r7, #20]

  if (pnetif->pdrv->extension.wifi->mode == NET_WIFI_MODE_AP)
 801421a:	687b      	ldr	r3, [r7, #4]
 801421c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8014220:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014222:	7f1b      	ldrb	r3, [r3, #28]
 8014224:	2b01      	cmp	r3, #1
 8014226:	d102      	bne.n	801422e <mx_wifi_if_connect+0x24>
  {
    wifi_mode = MC_SOFTAP;
 8014228:	2300      	movs	r3, #0
 801422a:	74fb      	strb	r3, [r7, #19]
 801422c:	e001      	b.n	8014232 <mx_wifi_if_connect+0x28>
  }
  else
  {
    wifi_mode = MC_STATION;
 801422e:	2301      	movs	r3, #1
 8014230:	74fb      	strb	r3, [r7, #19]
    }
  }

#else
  {
    uint8_t ip[4] = {0};
 8014232:	2300      	movs	r3, #0
 8014234:	60bb      	str	r3, [r7, #8]
    int32_t retry = 3;
 8014236:	2303      	movs	r3, #3
 8014238:	60fb      	str	r3, [r7, #12]
    while (retry > 0)
 801423a:	e070      	b.n	801431e <mx_wifi_if_connect+0x114>
    {
      retry--;
 801423c:	68fb      	ldr	r3, [r7, #12]
 801423e:	3b01      	subs	r3, #1
 8014240:	60fb      	str	r3, [r7, #12]
      if (MX_WIFI_STATUS_OK == MX_WIFI_GetIPAddress(wifi_obj_get(), &ip[0], wifi_mode))
 8014242:	f7f5 fcef 	bl	8009c24 <wifi_obj_get>
 8014246:	7cfa      	ldrb	r2, [r7, #19]
 8014248:	f107 0308 	add.w	r3, r7, #8
 801424c:	4619      	mov	r1, r3
 801424e:	f7f3 ff1a 	bl	8008086 <MX_WIFI_GetIPAddress>
 8014252:	4603      	mov	r3, r0
 8014254:	2b00      	cmp	r3, #0
 8014256:	d15b      	bne.n	8014310 <mx_wifi_if_connect+0x106>
        pnetif->ipaddr.type = (u8_t)IPADDR_TYPE_V4;
        pnetif->ipaddr.u_addr.ip4.addr = NET_ARTON(wifi_obj_get()->NetSettings.IP_Addr);
        pnetif->netmask.u_addr.ip4.addr = NET_ARTON(wifi_obj_get()->NetSettings.IP_Mask);
        pnetif->gateway.u_addr.ip4.addr = NET_ARTON(wifi_obj_get()->NetSettings.Gateway_Addr);
#else
        pnetif->ipaddr.addr = NET_ARTON(wifi_obj_get()->NetSettings.IP_Addr);
 8014258:	f7f5 fce4 	bl	8009c24 <wifi_obj_get>
 801425c:	4603      	mov	r3, r0
 801425e:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8014262:	061c      	lsls	r4, r3, #24
 8014264:	f7f5 fcde 	bl	8009c24 <wifi_obj_get>
 8014268:	4603      	mov	r3, r0
 801426a:	f893 30df 	ldrb.w	r3, [r3, #223]	; 0xdf
 801426e:	041b      	lsls	r3, r3, #16
 8014270:	431c      	orrs	r4, r3
 8014272:	f7f5 fcd7 	bl	8009c24 <wifi_obj_get>
 8014276:	4603      	mov	r3, r0
 8014278:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
 801427c:	021b      	lsls	r3, r3, #8
 801427e:	431c      	orrs	r4, r3
 8014280:	f7f5 fcd0 	bl	8009c24 <wifi_obj_get>
 8014284:	4603      	mov	r3, r0
 8014286:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 801428a:	ea44 0203 	orr.w	r2, r4, r3
 801428e:	687b      	ldr	r3, [r7, #4]
 8014290:	605a      	str	r2, [r3, #4]
        pnetif->netmask.addr = NET_ARTON(wifi_obj_get()->NetSettings.IP_Mask);
 8014292:	f7f5 fcc7 	bl	8009c24 <wifi_obj_get>
 8014296:	4603      	mov	r3, r0
 8014298:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
 801429c:	061c      	lsls	r4, r3, #24
 801429e:	f7f5 fcc1 	bl	8009c24 <wifi_obj_get>
 80142a2:	4603      	mov	r3, r0
 80142a4:	f893 30e3 	ldrb.w	r3, [r3, #227]	; 0xe3
 80142a8:	041b      	lsls	r3, r3, #16
 80142aa:	431c      	orrs	r4, r3
 80142ac:	f7f5 fcba 	bl	8009c24 <wifi_obj_get>
 80142b0:	4603      	mov	r3, r0
 80142b2:	f893 30e2 	ldrb.w	r3, [r3, #226]	; 0xe2
 80142b6:	021b      	lsls	r3, r3, #8
 80142b8:	431c      	orrs	r4, r3
 80142ba:	f7f5 fcb3 	bl	8009c24 <wifi_obj_get>
 80142be:	4603      	mov	r3, r0
 80142c0:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 80142c4:	ea44 0203 	orr.w	r2, r4, r3
 80142c8:	687b      	ldr	r3, [r7, #4]
 80142ca:	60da      	str	r2, [r3, #12]
        pnetif->gateway.addr = NET_ARTON(wifi_obj_get()->NetSettings.Gateway_Addr);
 80142cc:	f7f5 fcaa 	bl	8009c24 <wifi_obj_get>
 80142d0:	4603      	mov	r3, r0
 80142d2:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 80142d6:	061c      	lsls	r4, r3, #24
 80142d8:	f7f5 fca4 	bl	8009c24 <wifi_obj_get>
 80142dc:	4603      	mov	r3, r0
 80142de:	f893 30e7 	ldrb.w	r3, [r3, #231]	; 0xe7
 80142e2:	041b      	lsls	r3, r3, #16
 80142e4:	431c      	orrs	r4, r3
 80142e6:	f7f5 fc9d 	bl	8009c24 <wifi_obj_get>
 80142ea:	4603      	mov	r3, r0
 80142ec:	f893 30e6 	ldrb.w	r3, [r3, #230]	; 0xe6
 80142f0:	021b      	lsls	r3, r3, #8
 80142f2:	431c      	orrs	r4, r3
 80142f4:	f7f5 fc96 	bl	8009c24 <wifi_obj_get>
 80142f8:	4603      	mov	r3, r0
 80142fa:	f893 30e5 	ldrb.w	r3, [r3, #229]	; 0xe5
 80142fe:	ea44 0203 	orr.w	r2, r4, r3
 8014302:	687b      	ldr	r3, [r7, #4]
 8014304:	609a      	str	r2, [r3, #8]
#endif /* NET_USE_LWIP_DEFINITIONS */

        ip_got_flag = true;
 8014306:	2301      	movs	r3, #1
 8014308:	74bb      	strb	r3, [r7, #18]
        ret = NET_OK;
 801430a:	2300      	movs	r3, #0
 801430c:	617b      	str	r3, [r7, #20]
        break;
 801430e:	e009      	b.n	8014324 <mx_wifi_if_connect+0x11a>
      }
      else
      {
        ret = NET_ERROR_NO_ADDRESS;
 8014310:	f06f 0306 	mvn.w	r3, #6
 8014314:	617b      	str	r3, [r7, #20]
        DELAY_MS(1000);
 8014316:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801431a:	f7f5 fd41 	bl	8009da0 <HAL_Delay>
    while (retry > 0)
 801431e:	68fb      	ldr	r3, [r7, #12]
 8014320:	2b00      	cmp	r3, #0
 8014322:	dc8b      	bgt.n	801423c <mx_wifi_if_connect+0x32>
    }
  }
#endif  /* NET_USE_IPV6 */


  if (ip_got_flag)
 8014324:	7cbb      	ldrb	r3, [r7, #18]
 8014326:	2b00      	cmp	r3, #0
 8014328:	d003      	beq.n	8014332 <mx_wifi_if_connect+0x128>
  {
    (void)net_state_manage_event(pnetif, NET_EVENT_IPADDR);
 801432a:	210a      	movs	r1, #10
 801432c:	6878      	ldr	r0, [r7, #4]
 801432e:	f7ff fb07 	bl	8013940 <net_state_manage_event>
  }

#endif /* (MX_WIFI_NETWORK_BYPASS_MODE == 1) */

  return ret;
 8014332:	697b      	ldr	r3, [r7, #20]
}
 8014334:	4618      	mov	r0, r3
 8014336:	371c      	adds	r7, #28
 8014338:	46bd      	mov	sp, r7
 801433a:	bd90      	pop	{r4, r7, pc}

0801433c <mx_wifi_scan>:
  * @param  mode             scan mode
  * @param  ssid             SSID to scan in active mode
  * @return int32_t          0 if success, otherwise failed
  */
static int32_t mx_wifi_scan(net_if_handle_t *pnetif, net_wifi_scan_mode_t mode, char *ssid)
{
 801433c:	b580      	push	{r7, lr}
 801433e:	b086      	sub	sp, #24
 8014340:	af00      	add	r7, sp, #0
 8014342:	60f8      	str	r0, [r7, #12]
 8014344:	460b      	mov	r3, r1
 8014346:	607a      	str	r2, [r7, #4]
 8014348:	72fb      	strb	r3, [r7, #11]
  int32_t ret;
  uint32_t len = 0u;
 801434a:	2300      	movs	r3, #0
 801434c:	617b      	str	r3, [r7, #20]

  (void) pnetif;

  if (ssid != NULL)
 801434e:	687b      	ldr	r3, [r7, #4]
 8014350:	2b00      	cmp	r3, #0
 8014352:	d003      	beq.n	801435c <mx_wifi_scan+0x20>
  {
    len = strlen(ssid);
 8014354:	6878      	ldr	r0, [r7, #4]
 8014356:	f7eb ff8f 	bl	8000278 <strlen>
 801435a:	6178      	str	r0, [r7, #20]
  }
  ret = MX_WIFI_Scan(wifi_obj_get(), (uint8_t)mode, ssid, (int32_t) len);
 801435c:	f7f5 fc62 	bl	8009c24 <wifi_obj_get>
 8014360:	697b      	ldr	r3, [r7, #20]
 8014362:	7af9      	ldrb	r1, [r7, #11]
 8014364:	687a      	ldr	r2, [r7, #4]
 8014366:	f7f3 fc1d 	bl	8007ba4 <MX_WIFI_Scan>
 801436a:	4603      	mov	r3, r0
 801436c:	613b      	str	r3, [r7, #16]
  return ret;
 801436e:	693b      	ldr	r3, [r7, #16]
}
 8014370:	4618      	mov	r0, r3
 8014372:	3718      	adds	r7, #24
 8014374:	46bd      	mov	sp, r7
 8014376:	bd80      	pop	{r7, pc}

08014378 <mx_wifi_get_scan_result>:
  * @param  scan_bss_count       BSS count
  * @return int32_t              The number of BSS obtained
  */
static int32_t mx_wifi_get_scan_result(net_if_handle_t *pnetif, net_wifi_scan_results_t *scan_bss_array,
                                       uint8_t scan_bss_count)
{
 8014378:	b580      	push	{r7, lr}
 801437a:	b08a      	sub	sp, #40	; 0x28
 801437c:	af00      	add	r7, sp, #0
 801437e:	60f8      	str	r0, [r7, #12]
 8014380:	60b9      	str	r1, [r7, #8]
 8014382:	4613      	mov	r3, r2
 8014384:	71fb      	strb	r3, [r7, #7]
  int32_t ret = NET_ERROR_PARAMETER;
 8014386:	f06f 0303 	mvn.w	r3, #3
 801438a:	627b      	str	r3, [r7, #36]	; 0x24
    NET_WIFI_SM_WPA2_MIXED_PSK  /**< WPA2 /w AES or TKIP */
  };

  (void)pnetif;

  if ((NULL != scan_bss_array) && (0u != scan_bss_count))
 801438c:	68bb      	ldr	r3, [r7, #8]
 801438e:	2b00      	cmp	r3, #0
 8014390:	d074      	beq.n	801447c <mx_wifi_get_scan_result+0x104>
 8014392:	79fb      	ldrb	r3, [r7, #7]
 8014394:	2b00      	cmp	r3, #0
 8014396:	d071      	beq.n	801447c <mx_wifi_get_scan_result+0x104>
  {
    /* Create buffer for results. */
    mwifi_ap_info_t *ap_infos_tmp = (mwifi_ap_info_t *)NET_CALLOC(scan_bss_count, sizeof(*ap_infos_tmp));
 8014398:	79fb      	ldrb	r3, [r7, #7]
 801439a:	2130      	movs	r1, #48	; 0x30
 801439c:	4618      	mov	r0, r3
 801439e:	f000 fa3b 	bl	8014818 <calloc>
 80143a2:	4603      	mov	r3, r0
 80143a4:	617b      	str	r3, [r7, #20]

    if (NULL == ap_infos_tmp)
 80143a6:	697b      	ldr	r3, [r7, #20]
 80143a8:	2b00      	cmp	r3, #0
 80143aa:	d103      	bne.n	80143b4 <mx_wifi_get_scan_result+0x3c>
    {
      ret = NET_ERROR_NO_MEMORY;
 80143ac:	f06f 0307 	mvn.w	r3, #7
 80143b0:	627b      	str	r3, [r7, #36]	; 0x24
 80143b2:	e063      	b.n	801447c <mx_wifi_get_scan_result+0x104>
    }
    else
    {
      /* Get real mx_wifi scan results data. */
      const int8_t number = MX_WIFI_Get_scan_result(wifi_obj_get(), (uint8_t *) ap_infos_tmp, scan_bss_count);
 80143b4:	f7f5 fc36 	bl	8009c24 <wifi_obj_get>
 80143b8:	79fb      	ldrb	r3, [r7, #7]
 80143ba:	461a      	mov	r2, r3
 80143bc:	6979      	ldr	r1, [r7, #20]
 80143be:	f7f3 fc61 	bl	8007c84 <MX_WIFI_Get_scan_result>
 80143c2:	4603      	mov	r3, r0
 80143c4:	74fb      	strb	r3, [r7, #19]

      /* transfer to ST bss info */
      {
        mwifi_ap_info_t *ap_info = ap_infos_tmp;
 80143c6:	697b      	ldr	r3, [r7, #20]
 80143c8:	623b      	str	r3, [r7, #32]
        net_wifi_scan_bss_t *scan_bss = scan_bss_array;
 80143ca:	68bb      	ldr	r3, [r7, #8]
 80143cc:	61fb      	str	r3, [r7, #28]

        for (int8_t i = 0U; i < number; i++)
 80143ce:	2300      	movs	r3, #0
 80143d0:	76fb      	strb	r3, [r7, #27]
 80143d2:	e047      	b.n	8014464 <mx_wifi_get_scan_result+0xec>
        {
          (void) memset(scan_bss, 0, sizeof(*scan_bss));
 80143d4:	2234      	movs	r2, #52	; 0x34
 80143d6:	2100      	movs	r1, #0
 80143d8:	69f8      	ldr	r0, [r7, #28]
 80143da:	f002 fb7f 	bl	8016adc <memset>
          (void) memcpy(scan_bss->ssid.value, ap_info->ssid, NET_WIFI_MAX_SSID_SIZE);
 80143de:	69fb      	ldr	r3, [r7, #28]
 80143e0:	1c58      	adds	r0, r3, #1
 80143e2:	6a3b      	ldr	r3, [r7, #32]
 80143e4:	3304      	adds	r3, #4
 80143e6:	2220      	movs	r2, #32
 80143e8:	4619      	mov	r1, r3
 80143ea:	f002 fc36 	bl	8016c5a <memcpy>
          scan_bss->ssid.length = (uint8_t) strlen(ap_info->ssid);
 80143ee:	6a3b      	ldr	r3, [r7, #32]
 80143f0:	3304      	adds	r3, #4
 80143f2:	4618      	mov	r0, r3
 80143f4:	f7eb ff40 	bl	8000278 <strlen>
 80143f8:	4603      	mov	r3, r0
 80143fa:	b2da      	uxtb	r2, r3
 80143fc:	69fb      	ldr	r3, [r7, #28]
 80143fe:	701a      	strb	r2, [r3, #0]
          scan_bss->security = mxsec[ap_info->security];
 8014400:	6a3b      	ldr	r3, [r7, #32]
 8014402:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8014406:	461a      	mov	r2, r3
 8014408:	4b1f      	ldr	r3, [pc, #124]	; (8014488 <mx_wifi_get_scan_result+0x110>)
 801440a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801440e:	69fb      	ldr	r3, [r7, #28]
 8014410:	629a      	str	r2, [r3, #40]	; 0x28
          (void) memcpy(&scan_bss->bssid, ap_info->bssid, NET_WIFI_MAC_ADDRESS_SIZE);
 8014412:	69fb      	ldr	r3, [r7, #28]
 8014414:	f103 0021 	add.w	r0, r3, #33	; 0x21
 8014418:	6a3b      	ldr	r3, [r7, #32]
 801441a:	3325      	adds	r3, #37	; 0x25
 801441c:	2206      	movs	r2, #6
 801441e:	4619      	mov	r1, r3
 8014420:	f002 fc1b 	bl	8016c5a <memcpy>
          scan_bss->rssi = (int8_t)ap_info->rssi;
 8014424:	6a3b      	ldr	r3, [r7, #32]
 8014426:	681b      	ldr	r3, [r3, #0]
 8014428:	b25a      	sxtb	r2, r3
 801442a:	69fb      	ldr	r3, [r7, #28]
 801442c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
          scan_bss->channel = (uint8_t) ap_info->channel;
 8014430:	6a3b      	ldr	r3, [r7, #32]
 8014432:	f8d3 302b 	ldr.w	r3, [r3, #43]	; 0x2b
 8014436:	b2da      	uxtb	r2, r3
 8014438:	69fb      	ldr	r3, [r7, #28]
 801443a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
          (void) memcpy(scan_bss->country, ".CN", 4);  /* NOT SUPPORT for MX_WIFI */
 801443e:	69fb      	ldr	r3, [r7, #28]
 8014440:	332d      	adds	r3, #45	; 0x2d
 8014442:	2204      	movs	r2, #4
 8014444:	4911      	ldr	r1, [pc, #68]	; (801448c <mx_wifi_get_scan_result+0x114>)
 8014446:	4618      	mov	r0, r3
 8014448:	f002 fc07 	bl	8016c5a <memcpy>

          scan_bss++;
 801444c:	69fb      	ldr	r3, [r7, #28]
 801444e:	3334      	adds	r3, #52	; 0x34
 8014450:	61fb      	str	r3, [r7, #28]
          ap_info++;
 8014452:	6a3b      	ldr	r3, [r7, #32]
 8014454:	3330      	adds	r3, #48	; 0x30
 8014456:	623b      	str	r3, [r7, #32]
        for (int8_t i = 0U; i < number; i++)
 8014458:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801445c:	b2db      	uxtb	r3, r3
 801445e:	3301      	adds	r3, #1
 8014460:	b2db      	uxtb	r3, r3
 8014462:	76fb      	strb	r3, [r7, #27]
 8014464:	f997 201b 	ldrsb.w	r2, [r7, #27]
 8014468:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801446c:	429a      	cmp	r2, r3
 801446e:	dbb1      	blt.n	80143d4 <mx_wifi_get_scan_result+0x5c>
        }
      }
      ret = (int32_t) number;
 8014470:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014474:	627b      	str	r3, [r7, #36]	; 0x24
      NET_FREE(ap_infos_tmp);
 8014476:	6978      	ldr	r0, [r7, #20]
 8014478:	f000 fcca 	bl	8014e10 <free>
    }
  }
  return ret;
 801447c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801447e:	4618      	mov	r0, r3
 8014480:	3728      	adds	r7, #40	; 0x28
 8014482:	46bd      	mov	sp, r7
 8014484:	bd80      	pop	{r7, pc}
 8014486:	bf00      	nop
 8014488:	0801cdcc 	.word	0x0801cdcc
 801448c:	0801b528 	.word	0x0801b528

08014490 <mx_wifi_socket>:
  * @param  type             socket type
  * @param  protocol         socket protocol
  * @return int32_t          socket fd, if failed return error code(<0)
  */
static int32_t mx_wifi_socket(int32_t domain, int32_t type, int32_t protocol)
{
 8014490:	b580      	push	{r7, lr}
 8014492:	b086      	sub	sp, #24
 8014494:	af00      	add	r7, sp, #0
 8014496:	60f8      	str	r0, [r7, #12]
 8014498:	60b9      	str	r1, [r7, #8]
 801449a:	607a      	str	r2, [r7, #4]
  const int32_t ret = MX_WIFI_Socket_create(wifi_obj_get(), domain, type, protocol);
 801449c:	f7f5 fbc2 	bl	8009c24 <wifi_obj_get>
 80144a0:	687b      	ldr	r3, [r7, #4]
 80144a2:	68ba      	ldr	r2, [r7, #8]
 80144a4:	68f9      	ldr	r1, [r7, #12]
 80144a6:	f7f3 ff0a 	bl	80082be <MX_WIFI_Socket_create>
 80144aa:	6178      	str	r0, [r7, #20]
  return ret;
 80144ac:	697b      	ldr	r3, [r7, #20]
}
 80144ae:	4618      	mov	r0, r3
 80144b0:	3718      	adds	r7, #24
 80144b2:	46bd      	mov	sp, r7
 80144b4:	bd80      	pop	{r7, pc}

080144b6 <mx_wifi_setsockopt>:
  * @param  optvalue         socket option value to set
  * @param  optlen           socket option value length
  * @return int32_t          0 if success, if failed, return error code(< 0)
  */
static int32_t mx_wifi_setsockopt(int32_t sock, int32_t level, int32_t optname, const void *optvalue, uint32_t optlen)
{
 80144b6:	b580      	push	{r7, lr}
 80144b8:	b088      	sub	sp, #32
 80144ba:	af02      	add	r7, sp, #8
 80144bc:	60f8      	str	r0, [r7, #12]
 80144be:	60b9      	str	r1, [r7, #8]
 80144c0:	607a      	str	r2, [r7, #4]
 80144c2:	603b      	str	r3, [r7, #0]
  int32_t ret = MX_WIFI_STATUS_OK;
 80144c4:	2300      	movs	r3, #0
 80144c6:	617b      	str	r3, [r7, #20]
  /* Handle setsockopt forwarded by ST NetworkLibrary API. */
  /**
    * Note: bind device option is not used for the mxchip WiFi module,
    *       the module select the net interface by the socket address internally.
    */
  if (NET_SO_BINDTODEVICE != optname)
 80144c8:	687b      	ldr	r3, [r7, #4]
 80144ca:	2b03      	cmp	r3, #3
 80144cc:	d00b      	beq.n	80144e6 <mx_wifi_setsockopt+0x30>
  {
    ret = MX_WIFI_Socket_setsockopt(wifi_obj_get(), sock, level, optname, optvalue, (int32_t)optlen);
 80144ce:	f7f5 fba9 	bl	8009c24 <wifi_obj_get>
 80144d2:	6a3b      	ldr	r3, [r7, #32]
 80144d4:	9301      	str	r3, [sp, #4]
 80144d6:	683b      	ldr	r3, [r7, #0]
 80144d8:	9300      	str	r3, [sp, #0]
 80144da:	687b      	ldr	r3, [r7, #4]
 80144dc:	68ba      	ldr	r2, [r7, #8]
 80144de:	68f9      	ldr	r1, [r7, #12]
 80144e0:	f7f3 ff26 	bl	8008330 <MX_WIFI_Socket_setsockopt>
 80144e4:	6178      	str	r0, [r7, #20]
  }

  return ret;
 80144e6:	697b      	ldr	r3, [r7, #20]
}
 80144e8:	4618      	mov	r0, r3
 80144ea:	3718      	adds	r7, #24
 80144ec:	46bd      	mov	sp, r7
 80144ee:	bd80      	pop	{r7, pc}

080144f0 <mx_wifi_getsockopt>:
  * @param  optvalue         socket option value
  * @param  optlen           socket option value length
  * @return int32_t          0 if success, if failed return error code(<0)
  */
static int32_t mx_wifi_getsockopt(int32_t sock, int32_t level, int32_t optname, void *optvalue, uint32_t *optlen)
{
 80144f0:	b580      	push	{r7, lr}
 80144f2:	b088      	sub	sp, #32
 80144f4:	af02      	add	r7, sp, #8
 80144f6:	60f8      	str	r0, [r7, #12]
 80144f8:	60b9      	str	r1, [r7, #8]
 80144fa:	607a      	str	r2, [r7, #4]
 80144fc:	603b      	str	r3, [r7, #0]
  const int32_t ret = MX_WIFI_Socket_getsockopt(wifi_obj_get(), sock, level, optname, optvalue, optlen);
 80144fe:	f7f5 fb91 	bl	8009c24 <wifi_obj_get>
 8014502:	6a3b      	ldr	r3, [r7, #32]
 8014504:	9301      	str	r3, [sp, #4]
 8014506:	683b      	ldr	r3, [r7, #0]
 8014508:	9300      	str	r3, [sp, #0]
 801450a:	687b      	ldr	r3, [r7, #4]
 801450c:	68ba      	ldr	r2, [r7, #8]
 801450e:	68f9      	ldr	r1, [r7, #12]
 8014510:	f7f3 ff66 	bl	80083e0 <MX_WIFI_Socket_getsockopt>
 8014514:	6178      	str	r0, [r7, #20]

  return ret;
 8014516:	697b      	ldr	r3, [r7, #20]
}
 8014518:	4618      	mov	r0, r3
 801451a:	3718      	adds	r7, #24
 801451c:	46bd      	mov	sp, r7
 801451e:	bd80      	pop	{r7, pc}

08014520 <mx_wifi_bind>:
  * @param  addr             address to bind
  * @param  addrlen          address length
  * @return int32_t          0 if success, if failed, return error code(<0)
  */
static int32_t mx_wifi_bind(int32_t sock, const net_sockaddr_t *addr, uint32_t addrlen)
{
 8014520:	b580      	push	{r7, lr}
 8014522:	b086      	sub	sp, #24
 8014524:	af00      	add	r7, sp, #0
 8014526:	60f8      	str	r0, [r7, #12]
 8014528:	60b9      	str	r1, [r7, #8]
 801452a:	607a      	str	r2, [r7, #4]
  int32_t ret = MX_WIFI_STATUS_ERROR;
 801452c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014530:	617b      	str	r3, [r7, #20]

  if (NULL != addr)
 8014532:	68bb      	ldr	r3, [r7, #8]
 8014534:	2b00      	cmp	r3, #0
 8014536:	d00d      	beq.n	8014554 <mx_wifi_bind+0x34>
  {
    if ((addrlen == sizeof(struct mx_sockaddr_in6)) || (addrlen == sizeof(struct mx_sockaddr_in /*mx_sockaddr*/)))
 8014538:	687b      	ldr	r3, [r7, #4]
 801453a:	2b1c      	cmp	r3, #28
 801453c:	d002      	beq.n	8014544 <mx_wifi_bind+0x24>
 801453e:	687b      	ldr	r3, [r7, #4]
 8014540:	2b10      	cmp	r3, #16
 8014542:	d107      	bne.n	8014554 <mx_wifi_bind+0x34>
    {
      ret = MX_WIFI_Socket_bind(wifi_obj_get(), sock, (const struct mx_sockaddr *)addr, (int32_t)addrlen);
 8014544:	f7f5 fb6e 	bl	8009c24 <wifi_obj_get>
 8014548:	687b      	ldr	r3, [r7, #4]
 801454a:	68ba      	ldr	r2, [r7, #8]
 801454c:	68f9      	ldr	r1, [r7, #12]
 801454e:	f7f3 ffa9 	bl	80084a4 <MX_WIFI_Socket_bind>
 8014552:	6178      	str	r0, [r7, #20]
    }
  }

  return ret;
 8014554:	697b      	ldr	r3, [r7, #20]
}
 8014556:	4618      	mov	r0, r3
 8014558:	3718      	adds	r7, #24
 801455a:	46bd      	mov	sp, r7
 801455c:	bd80      	pop	{r7, pc}

0801455e <mx_wifi_listen>:
  * @param  sock             socket value
  * @param  backlog          max socket to accept
  * @return int32_t          0 if success, if failed return error code(<0)
  */
static int32_t mx_wifi_listen(int32_t sock, int32_t backlog)
{
 801455e:	b580      	push	{r7, lr}
 8014560:	b084      	sub	sp, #16
 8014562:	af00      	add	r7, sp, #0
 8014564:	6078      	str	r0, [r7, #4]
 8014566:	6039      	str	r1, [r7, #0]
  const int32_t ret = MX_WIFI_Socket_listen(wifi_obj_get(), sock, backlog);
 8014568:	f7f5 fb5c 	bl	8009c24 <wifi_obj_get>
 801456c:	4603      	mov	r3, r0
 801456e:	683a      	ldr	r2, [r7, #0]
 8014570:	6879      	ldr	r1, [r7, #4]
 8014572:	4618      	mov	r0, r3
 8014574:	f7f4 f821 	bl	80085ba <MX_WIFI_Socket_listen>
 8014578:	60f8      	str	r0, [r7, #12]

  return ret;
 801457a:	68fb      	ldr	r3, [r7, #12]
}
 801457c:	4618      	mov	r0, r3
 801457e:	3710      	adds	r7, #16
 8014580:	46bd      	mov	sp, r7
 8014582:	bd80      	pop	{r7, pc}

08014584 <mx_wifi_accept>:
  * @param  addr             address buffer to accept new socket
  * @param  addrlen          address buffer length
  * @return int32_t          accepted socket fd, if failed return error code(<0)
  */
static int32_t mx_wifi_accept(int32_t sock, net_sockaddr_t *addr, uint32_t *addrlen)
{
 8014584:	b580      	push	{r7, lr}
 8014586:	b086      	sub	sp, #24
 8014588:	af00      	add	r7, sp, #0
 801458a:	60f8      	str	r0, [r7, #12]
 801458c:	60b9      	str	r1, [r7, #8]
 801458e:	607a      	str	r2, [r7, #4]
  const int32_t ret = MX_WIFI_Socket_accept(wifi_obj_get(), sock, (struct mx_sockaddr *)addr, addrlen);
 8014590:	f7f5 fb48 	bl	8009c24 <wifi_obj_get>
 8014594:	687b      	ldr	r3, [r7, #4]
 8014596:	68ba      	ldr	r2, [r7, #8]
 8014598:	68f9      	ldr	r1, [r7, #12]
 801459a:	f7f4 f852 	bl	8008642 <MX_WIFI_Socket_accept>
 801459e:	6178      	str	r0, [r7, #20]

  return ret;
 80145a0:	697b      	ldr	r3, [r7, #20]
}
 80145a2:	4618      	mov	r0, r3
 80145a4:	3718      	adds	r7, #24
 80145a6:	46bd      	mov	sp, r7
 80145a8:	bd80      	pop	{r7, pc}

080145aa <mx_wifi_connect>:
  * @param  addr             address to connect
  * @param  addrlen          address length
  * @return int32_t          0 if success, if failed return error code (<0)
  */
static int32_t mx_wifi_connect(int32_t sock, const net_sockaddr_t *addr, uint32_t addrlen)
{
 80145aa:	b580      	push	{r7, lr}
 80145ac:	b086      	sub	sp, #24
 80145ae:	af00      	add	r7, sp, #0
 80145b0:	60f8      	str	r0, [r7, #12]
 80145b2:	60b9      	str	r1, [r7, #8]
 80145b4:	607a      	str	r2, [r7, #4]
  const int32_t ret = MX_WIFI_Socket_connect(wifi_obj_get(), sock, (const struct mx_sockaddr *)addr, (int32_t)addrlen);
 80145b6:	f7f5 fb35 	bl	8009c24 <wifi_obj_get>
 80145ba:	687b      	ldr	r3, [r7, #4]
 80145bc:	68ba      	ldr	r2, [r7, #8]
 80145be:	68f9      	ldr	r1, [r7, #12]
 80145c0:	f7f4 f8c7 	bl	8008752 <MX_WIFI_Socket_connect>
 80145c4:	6178      	str	r0, [r7, #20]

  return ret;
 80145c6:	697b      	ldr	r3, [r7, #20]
}
 80145c8:	4618      	mov	r0, r3
 80145ca:	3718      	adds	r7, #24
 80145cc:	46bd      	mov	sp, r7
 80145ce:	bd80      	pop	{r7, pc}

080145d0 <mx_wifi_shutdown>:
  * @param  sock             socket value
  * @param  mode             shutdown mode (0: stop receiving, 1: stop sending, 2: stop send and receive)
  * @return int32_t          0 if success, if failed return error code (<0)
  */
static int32_t mx_wifi_shutdown(int32_t sock, int32_t mode)
{
 80145d0:	b580      	push	{r7, lr}
 80145d2:	b084      	sub	sp, #16
 80145d4:	af00      	add	r7, sp, #0
 80145d6:	6078      	str	r0, [r7, #4]
 80145d8:	6039      	str	r1, [r7, #0]
  const int32_t ret = MX_WIFI_Socket_shutdown(wifi_obj_get(), sock, mode);
 80145da:	f7f5 fb23 	bl	8009c24 <wifi_obj_get>
 80145de:	4603      	mov	r3, r0
 80145e0:	683a      	ldr	r2, [r7, #0]
 80145e2:	6879      	ldr	r1, [r7, #4]
 80145e4:	4618      	mov	r0, r3
 80145e6:	f7f4 f93c 	bl	8008862 <MX_WIFI_Socket_shutdown>
 80145ea:	60f8      	str	r0, [r7, #12]

  return ret;
 80145ec:	68fb      	ldr	r3, [r7, #12]
}
 80145ee:	4618      	mov	r0, r3
 80145f0:	3710      	adds	r7, #16
 80145f2:	46bd      	mov	sp, r7
 80145f4:	bd80      	pop	{r7, pc}

080145f6 <mx_wifi_close>:
  * @param  sock             socket value
  * @param  isaclone         not supported, just compliant for ST connect lib
  * @return int32_t          0 if success, if failed return error code (<0)
  */
static int32_t mx_wifi_close(int32_t sock, bool isaclone)
{
 80145f6:	b580      	push	{r7, lr}
 80145f8:	b084      	sub	sp, #16
 80145fa:	af00      	add	r7, sp, #0
 80145fc:	6078      	str	r0, [r7, #4]
 80145fe:	460b      	mov	r3, r1
 8014600:	70fb      	strb	r3, [r7, #3]
  const int32_t ret = MX_WIFI_Socket_close(wifi_obj_get(), sock);
 8014602:	f7f5 fb0f 	bl	8009c24 <wifi_obj_get>
 8014606:	4603      	mov	r3, r0
 8014608:	6879      	ldr	r1, [r7, #4]
 801460a:	4618      	mov	r0, r3
 801460c:	f7f4 f969 	bl	80088e2 <MX_WIFI_Socket_close>
 8014610:	60f8      	str	r0, [r7, #12]

  (void)isaclone;

  return ret;
 8014612:	68fb      	ldr	r3, [r7, #12]
}
 8014614:	4618      	mov	r0, r3
 8014616:	3710      	adds	r7, #16
 8014618:	46bd      	mov	sp, r7
 801461a:	bd80      	pop	{r7, pc}

0801461c <mx_wifi_send>:
  * @param  len              data length
  * @param  flags            socket flag
  * @return int32_t          bytes sent, if failed return error code(<0)
  */
static int32_t mx_wifi_send(int32_t sock, const uint8_t *buf, int32_t len, int32_t flags)
{
 801461c:	b580      	push	{r7, lr}
 801461e:	b088      	sub	sp, #32
 8014620:	af02      	add	r7, sp, #8
 8014622:	60f8      	str	r0, [r7, #12]
 8014624:	60b9      	str	r1, [r7, #8]
 8014626:	607a      	str	r2, [r7, #4]
 8014628:	603b      	str	r3, [r7, #0]
  const int32_t ret = MX_WIFI_Socket_send(wifi_obj_get(), sock, buf, len, flags);
 801462a:	f7f5 fafb 	bl	8009c24 <wifi_obj_get>
 801462e:	683b      	ldr	r3, [r7, #0]
 8014630:	9300      	str	r3, [sp, #0]
 8014632:	687b      	ldr	r3, [r7, #4]
 8014634:	68ba      	ldr	r2, [r7, #8]
 8014636:	68f9      	ldr	r1, [r7, #12]
 8014638:	f7f4 f98b 	bl	8008952 <MX_WIFI_Socket_send>
 801463c:	6178      	str	r0, [r7, #20]

  return ret;
 801463e:	697b      	ldr	r3, [r7, #20]
}
 8014640:	4618      	mov	r0, r3
 8014642:	3718      	adds	r7, #24
 8014644:	46bd      	mov	sp, r7
 8014646:	bd80      	pop	{r7, pc}

08014648 <mx_wifi_recv>:
  * @param  len              buffer size
  * @param  flags            socket flag
  * @return int32_t          bytes received, if failed return error code(<0)
  */
static int32_t mx_wifi_recv(int32_t sock, uint8_t *buf, int32_t len, int32_t flags)
{
 8014648:	b580      	push	{r7, lr}
 801464a:	b088      	sub	sp, #32
 801464c:	af02      	add	r7, sp, #8
 801464e:	60f8      	str	r0, [r7, #12]
 8014650:	60b9      	str	r1, [r7, #8]
 8014652:	607a      	str	r2, [r7, #4]
 8014654:	603b      	str	r3, [r7, #0]
  int32_t ret = MX_WIFI_Socket_recv(wifi_obj_get(), sock, buf, len, flags);
 8014656:	f7f5 fae5 	bl	8009c24 <wifi_obj_get>
 801465a:	683b      	ldr	r3, [r7, #0]
 801465c:	9300      	str	r3, [sp, #0]
 801465e:	687b      	ldr	r3, [r7, #4]
 8014660:	68ba      	ldr	r2, [r7, #8]
 8014662:	68f9      	ldr	r1, [r7, #12]
 8014664:	f7f4 fa92 	bl	8008b8c <MX_WIFI_Socket_recv>
 8014668:	6178      	str	r0, [r7, #20]

  if (MX_WIFI_STATUS_OK != ret)
 801466a:	697b      	ldr	r3, [r7, #20]
 801466c:	2b00      	cmp	r3, #0
 801466e:	d006      	beq.n	801467e <mx_wifi_recv+0x36>
  {
    if (MX_WIFI_STATUS_TIMEOUT == ret)
 8014670:	697b      	ldr	r3, [r7, #20]
 8014672:	f113 0f02 	cmn.w	r3, #2
 8014676:	d102      	bne.n	801467e <mx_wifi_recv+0x36>
    {
      ret = NET_TIMEOUT;
 8014678:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801467c:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 801467e:	697b      	ldr	r3, [r7, #20]
}
 8014680:	4618      	mov	r0, r3
 8014682:	3718      	adds	r7, #24
 8014684:	46bd      	mov	sp, r7
 8014686:	bd80      	pop	{r7, pc}

08014688 <mx_wifi_sendto>:
  * @param  to_len           size of address to send to
  * @return int32_t          bytes sent. If failed return error code(<0)
  */
static int32_t mx_wifi_sendto(int32_t sock, const uint8_t *buf, int32_t len, int32_t flags,
                              net_sockaddr_t *to, uint32_t to_len)
{
 8014688:	b580      	push	{r7, lr}
 801468a:	b08a      	sub	sp, #40	; 0x28
 801468c:	af04      	add	r7, sp, #16
 801468e:	60f8      	str	r0, [r7, #12]
 8014690:	60b9      	str	r1, [r7, #8]
 8014692:	607a      	str	r2, [r7, #4]
 8014694:	603b      	str	r3, [r7, #0]
  int32_t ret = MX_WIFI_STATUS_ERROR;
 8014696:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801469a:	617b      	str	r3, [r7, #20]

  if (NULL != to)
 801469c:	6a3b      	ldr	r3, [r7, #32]
 801469e:	2b00      	cmp	r3, #0
 80146a0:	d013      	beq.n	80146ca <mx_wifi_sendto+0x42>
  {
    if ((to_len == sizeof(struct mx_sockaddr_in6)) || (to_len == sizeof(struct mx_sockaddr_in /*mx_sockaddr*/)))
 80146a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146a4:	2b1c      	cmp	r3, #28
 80146a6:	d002      	beq.n	80146ae <mx_wifi_sendto+0x26>
 80146a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146aa:	2b10      	cmp	r3, #16
 80146ac:	d10d      	bne.n	80146ca <mx_wifi_sendto+0x42>
    {
      ret = MX_WIFI_Socket_sendto(wifi_obj_get(), sock, buf, len, flags, (struct mx_sockaddr *)to, (int32_t)to_len);
 80146ae:	f7f5 fab9 	bl	8009c24 <wifi_obj_get>
 80146b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146b4:	9302      	str	r3, [sp, #8]
 80146b6:	6a3b      	ldr	r3, [r7, #32]
 80146b8:	9301      	str	r3, [sp, #4]
 80146ba:	683b      	ldr	r3, [r7, #0]
 80146bc:	9300      	str	r3, [sp, #0]
 80146be:	687b      	ldr	r3, [r7, #4]
 80146c0:	68ba      	ldr	r2, [r7, #8]
 80146c2:	68f9      	ldr	r1, [r7, #12]
 80146c4:	f7f4 f9a8 	bl	8008a18 <MX_WIFI_Socket_sendto>
 80146c8:	6178      	str	r0, [r7, #20]
    }
  }

  return ret;
 80146ca:	697b      	ldr	r3, [r7, #20]
}
 80146cc:	4618      	mov	r0, r3
 80146ce:	3718      	adds	r7, #24
 80146d0:	46bd      	mov	sp, r7
 80146d2:	bd80      	pop	{r7, pc}

080146d4 <mx_wifi_recvfrom>:
  * @param  from_len         size of address
  * @return int32_t          bytes received, if failed, return error code(<0)
  */
static int32_t mx_wifi_recvfrom(int32_t sock, uint8_t *buf, int32_t len, int32_t flags,
                                net_sockaddr_t *from, uint32_t *from_len)
{
 80146d4:	b580      	push	{r7, lr}
 80146d6:	b08a      	sub	sp, #40	; 0x28
 80146d8:	af04      	add	r7, sp, #16
 80146da:	60f8      	str	r0, [r7, #12]
 80146dc:	60b9      	str	r1, [r7, #8]
 80146de:	607a      	str	r2, [r7, #4]
 80146e0:	603b      	str	r3, [r7, #0]
  int32_t ret = MX_WIFI_STATUS_ERROR;
 80146e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80146e6:	617b      	str	r3, [r7, #20]

  if ((NULL != from) && (NULL != from_len))
 80146e8:	6a3b      	ldr	r3, [r7, #32]
 80146ea:	2b00      	cmp	r3, #0
 80146ec:	d018      	beq.n	8014720 <mx_wifi_recvfrom+0x4c>
 80146ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146f0:	2b00      	cmp	r3, #0
 80146f2:	d015      	beq.n	8014720 <mx_wifi_recvfrom+0x4c>
  {
    if ((*from_len == sizeof(struct mx_sockaddr_in6)) || (*from_len == sizeof(struct mx_sockaddr_in /*mx_sockaddr*/)))
 80146f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146f6:	681b      	ldr	r3, [r3, #0]
 80146f8:	2b1c      	cmp	r3, #28
 80146fa:	d003      	beq.n	8014704 <mx_wifi_recvfrom+0x30>
 80146fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146fe:	681b      	ldr	r3, [r3, #0]
 8014700:	2b10      	cmp	r3, #16
 8014702:	d10d      	bne.n	8014720 <mx_wifi_recvfrom+0x4c>
    {
      ret = MX_WIFI_Socket_recvfrom(wifi_obj_get(), sock, buf, len, flags, (struct mx_sockaddr *)from, from_len);
 8014704:	f7f5 fa8e 	bl	8009c24 <wifi_obj_get>
 8014708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801470a:	9302      	str	r3, [sp, #8]
 801470c:	6a3b      	ldr	r3, [r7, #32]
 801470e:	9301      	str	r3, [sp, #4]
 8014710:	683b      	ldr	r3, [r7, #0]
 8014712:	9300      	str	r3, [sp, #0]
 8014714:	687b      	ldr	r3, [r7, #4]
 8014716:	68ba      	ldr	r2, [r7, #8]
 8014718:	68f9      	ldr	r1, [r7, #12]
 801471a:	f7f4 fab0 	bl	8008c7e <MX_WIFI_Socket_recvfrom>
 801471e:	6178      	str	r0, [r7, #20]
    }
  }

  return ret;
 8014720:	697b      	ldr	r3, [r7, #20]
}
 8014722:	4618      	mov	r0, r3
 8014724:	3718      	adds	r7, #24
 8014726:	46bd      	mov	sp, r7
 8014728:	bd80      	pop	{r7, pc}

0801472a <mx_wifi_gethostbyname>:
  * @param  addr             address of the host
  * @param  name             host name
  * @return int32_t          0 if success, otherwise failed
  */
static int32_t mx_wifi_gethostbyname(net_if_handle_t *pnetif, net_sockaddr_t *addr, char_t *name)
{
 801472a:	b580      	push	{r7, lr}
 801472c:	b086      	sub	sp, #24
 801472e:	af00      	add	r7, sp, #0
 8014730:	60f8      	str	r0, [r7, #12]
 8014732:	60b9      	str	r1, [r7, #8]
 8014734:	607a      	str	r2, [r7, #4]
  }
  else
#endif /* NET_USE_IPV6 */
  {
    /* IPv4 */
    ret = MX_WIFI_Socket_gethostbyname(wifi_obj_get(), (struct mx_sockaddr *)addr, (mx_char_t *)name);
 8014736:	f7f5 fa75 	bl	8009c24 <wifi_obj_get>
 801473a:	4603      	mov	r3, r0
 801473c:	687a      	ldr	r2, [r7, #4]
 801473e:	68b9      	ldr	r1, [r7, #8]
 8014740:	4618      	mov	r0, r3
 8014742:	f7f4 fb75 	bl	8008e30 <MX_WIFI_Socket_gethostbyname>
 8014746:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8014748:	697b      	ldr	r3, [r7, #20]
}
 801474a:	4618      	mov	r0, r3
 801474c:	3718      	adds	r7, #24
 801474e:	46bd      	mov	sp, r7
 8014750:	bd80      	pop	{r7, pc}

08014752 <mx_wifi_ping>:
  * @param  response         response array, size is count
  * @return int32_t          0 if success, otherwise failed
  */
static int32_t mx_wifi_ping(net_if_handle_t *pnetif, net_sockaddr_t *addr, int32_t count, int32_t delay,
                            int32_t response[])
{
 8014752:	b590      	push	{r4, r7, lr}
 8014754:	b08b      	sub	sp, #44	; 0x2c
 8014756:	af02      	add	r7, sp, #8
 8014758:	60f8      	str	r0, [r7, #12]
 801475a:	60b9      	str	r1, [r7, #8]
 801475c:	607a      	str	r2, [r7, #4]
 801475e:	603b      	str	r3, [r7, #0]
  int32_t ret = -1;
 8014760:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014764:	61fb      	str	r3, [r7, #28]
  net_ip_addr_t ip_addr = {0};
 8014766:	2300      	movs	r3, #0
 8014768:	617b      	str	r3, [r7, #20]
    ip_addr.type = (u8_t)IPADDR_TYPE_V6;
  }
  else
#endif /* NET_USE_IPV6 */
  {
    const net_sockaddr_in_t * const p_s_addr_in = (net_sockaddr_in_t *)addr;
 801476a:	68bb      	ldr	r3, [r7, #8]
 801476c:	61bb      	str	r3, [r7, #24]

#ifdef NET_USE_LWIP_DEFINITIONS
    ip_addr.u_addr.ip4.addr = p_s_addr_in->sin_addr.s_addr;
#else
    ip_addr.addr = p_s_addr_in->sin_addr.s_addr;
 801476e:	69bb      	ldr	r3, [r7, #24]
 8014770:	685b      	ldr	r3, [r3, #4]
 8014772:	617b      	str	r3, [r7, #20]
#endif /* NET_USE_LWIP_DEFINITIONS */
  }

  if (addr->sa_family == NET_AF_INET6)
 8014774:	68bb      	ldr	r3, [r7, #8]
 8014776:	785b      	ldrb	r3, [r3, #1]
 8014778:	2b0a      	cmp	r3, #10
 801477a:	d111      	bne.n	80147a0 <mx_wifi_ping+0x4e>
  {
    ret = MX_WIFI_Socket_ping6(wifi_obj_get(), (char_t *)NET_NTOA(&ip_addr), count, delay, response);
 801477c:	f7f5 fa52 	bl	8009c24 <wifi_obj_get>
 8014780:	4604      	mov	r4, r0
 8014782:	f107 0314 	add.w	r3, r7, #20
 8014786:	4618      	mov	r0, r3
 8014788:	f7fd fcd6 	bl	8012138 <net_ntoa>
 801478c:	4601      	mov	r1, r0
 801478e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014790:	9300      	str	r3, [sp, #0]
 8014792:	683b      	ldr	r3, [r7, #0]
 8014794:	687a      	ldr	r2, [r7, #4]
 8014796:	4620      	mov	r0, r4
 8014798:	f7f4 fcb1 	bl	80090fe <MX_WIFI_Socket_ping6>
 801479c:	61f8      	str	r0, [r7, #28]
 801479e:	e010      	b.n	80147c2 <mx_wifi_ping+0x70>
  }
  else
  {
    ret = MX_WIFI_Socket_ping(wifi_obj_get(), (char_t *)NET_NTOA(&ip_addr), count, delay, response);
 80147a0:	f7f5 fa40 	bl	8009c24 <wifi_obj_get>
 80147a4:	4604      	mov	r4, r0
 80147a6:	f107 0314 	add.w	r3, r7, #20
 80147aa:	4618      	mov	r0, r3
 80147ac:	f7fd fcc4 	bl	8012138 <net_ntoa>
 80147b0:	4601      	mov	r1, r0
 80147b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147b4:	9300      	str	r3, [sp, #0]
 80147b6:	683b      	ldr	r3, [r7, #0]
 80147b8:	687a      	ldr	r2, [r7, #4]
 80147ba:	4620      	mov	r0, r4
 80147bc:	f7f4 fbe8 	bl	8008f90 <MX_WIFI_Socket_ping>
 80147c0:	61f8      	str	r0, [r7, #28]
  }

  return ret;
 80147c2:	69fb      	ldr	r3, [r7, #28]
}
 80147c4:	4618      	mov	r0, r3
 80147c6:	3724      	adds	r7, #36	; 0x24
 80147c8:	46bd      	mov	sp, r7
 80147ca:	bd90      	pop	{r4, r7, pc}

080147cc <mx_wifi_getsockname>:
  * @param  name             socket name
  * @param  namelen          socket name length
  * @return int32_t          0 if success, otherwise failed
  */
static int32_t mx_wifi_getsockname(int32_t sock, net_sockaddr_t *name, uint32_t *namelen)
{
 80147cc:	b580      	push	{r7, lr}
 80147ce:	b086      	sub	sp, #24
 80147d0:	af00      	add	r7, sp, #0
 80147d2:	60f8      	str	r0, [r7, #12]
 80147d4:	60b9      	str	r1, [r7, #8]
 80147d6:	607a      	str	r2, [r7, #4]
  const int32_t ret = MX_WIFI_Socket_getsockname(wifi_obj_get(), sock, (struct mx_sockaddr *) name, namelen);
 80147d8:	f7f5 fa24 	bl	8009c24 <wifi_obj_get>
 80147dc:	687b      	ldr	r3, [r7, #4]
 80147de:	68ba      	ldr	r2, [r7, #8]
 80147e0:	68f9      	ldr	r1, [r7, #12]
 80147e2:	f7f4 fda2 	bl	800932a <MX_WIFI_Socket_getsockname>
 80147e6:	6178      	str	r0, [r7, #20]

  return ret;
 80147e8:	697b      	ldr	r3, [r7, #20]
}
 80147ea:	4618      	mov	r0, r3
 80147ec:	3718      	adds	r7, #24
 80147ee:	46bd      	mov	sp, r7
 80147f0:	bd80      	pop	{r7, pc}

080147f2 <mx_wifi_getpeername>:
  * @param  name             socket name
  * @param  namelen          socket name length
  * @return int32_t          0 if success, otherwise failed
  */
static int32_t mx_wifi_getpeername(int32_t sock, net_sockaddr_t *name, uint32_t *namelen)
{
 80147f2:	b580      	push	{r7, lr}
 80147f4:	b086      	sub	sp, #24
 80147f6:	af00      	add	r7, sp, #0
 80147f8:	60f8      	str	r0, [r7, #12]
 80147fa:	60b9      	str	r1, [r7, #8]
 80147fc:	607a      	str	r2, [r7, #4]
  const int32_t ret = MX_WIFI_Socket_getpeername(wifi_obj_get(), sock, (struct mx_sockaddr *) name, namelen);
 80147fe:	f7f5 fa11 	bl	8009c24 <wifi_obj_get>
 8014802:	687b      	ldr	r3, [r7, #4]
 8014804:	68ba      	ldr	r2, [r7, #8]
 8014806:	68f9      	ldr	r1, [r7, #12]
 8014808:	f7f4 fd30 	bl	800926c <MX_WIFI_Socket_getpeername>
 801480c:	6178      	str	r0, [r7, #20]

  return ret;
 801480e:	697b      	ldr	r3, [r7, #20]
}
 8014810:	4618      	mov	r0, r3
 8014812:	3718      	adds	r7, #24
 8014814:	46bd      	mov	sp, r7
 8014816:	bd80      	pop	{r7, pc}

08014818 <calloc>:
 8014818:	4b02      	ldr	r3, [pc, #8]	; (8014824 <calloc+0xc>)
 801481a:	460a      	mov	r2, r1
 801481c:	4601      	mov	r1, r0
 801481e:	6818      	ldr	r0, [r3, #0]
 8014820:	f000 b802 	b.w	8014828 <_calloc_r>
 8014824:	200002c4 	.word	0x200002c4

08014828 <_calloc_r>:
 8014828:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801482a:	fba1 2402 	umull	r2, r4, r1, r2
 801482e:	b94c      	cbnz	r4, 8014844 <_calloc_r+0x1c>
 8014830:	4611      	mov	r1, r2
 8014832:	9201      	str	r2, [sp, #4]
 8014834:	f000 fb14 	bl	8014e60 <_malloc_r>
 8014838:	9a01      	ldr	r2, [sp, #4]
 801483a:	4605      	mov	r5, r0
 801483c:	b930      	cbnz	r0, 801484c <_calloc_r+0x24>
 801483e:	4628      	mov	r0, r5
 8014840:	b003      	add	sp, #12
 8014842:	bd30      	pop	{r4, r5, pc}
 8014844:	220c      	movs	r2, #12
 8014846:	2500      	movs	r5, #0
 8014848:	6002      	str	r2, [r0, #0]
 801484a:	e7f8      	b.n	801483e <_calloc_r+0x16>
 801484c:	4621      	mov	r1, r4
 801484e:	f002 f945 	bl	8016adc <memset>
 8014852:	e7f4      	b.n	801483e <_calloc_r+0x16>

08014854 <__cvt>:
 8014854:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014858:	ec55 4b10 	vmov	r4, r5, d0
 801485c:	2d00      	cmp	r5, #0
 801485e:	460e      	mov	r6, r1
 8014860:	4619      	mov	r1, r3
 8014862:	462b      	mov	r3, r5
 8014864:	bfb4      	ite	lt
 8014866:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801486a:	2300      	movge	r3, #0
 801486c:	4691      	mov	r9, r2
 801486e:	bfbf      	itttt	lt
 8014870:	4622      	movlt	r2, r4
 8014872:	461d      	movlt	r5, r3
 8014874:	232d      	movlt	r3, #45	; 0x2d
 8014876:	4614      	movlt	r4, r2
 8014878:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801487c:	700b      	strb	r3, [r1, #0]
 801487e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014880:	f023 0820 	bic.w	r8, r3, #32
 8014884:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8014888:	d005      	beq.n	8014896 <__cvt+0x42>
 801488a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801488e:	d100      	bne.n	8014892 <__cvt+0x3e>
 8014890:	3601      	adds	r6, #1
 8014892:	2102      	movs	r1, #2
 8014894:	e000      	b.n	8014898 <__cvt+0x44>
 8014896:	2103      	movs	r1, #3
 8014898:	ab03      	add	r3, sp, #12
 801489a:	4632      	mov	r2, r6
 801489c:	9301      	str	r3, [sp, #4]
 801489e:	ab02      	add	r3, sp, #8
 80148a0:	ec45 4b10 	vmov	d0, r4, r5
 80148a4:	9300      	str	r3, [sp, #0]
 80148a6:	4653      	mov	r3, sl
 80148a8:	f002 fa8e 	bl	8016dc8 <_dtoa_r>
 80148ac:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80148b0:	4607      	mov	r7, r0
 80148b2:	d102      	bne.n	80148ba <__cvt+0x66>
 80148b4:	f019 0f01 	tst.w	r9, #1
 80148b8:	d022      	beq.n	8014900 <__cvt+0xac>
 80148ba:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80148be:	eb07 0906 	add.w	r9, r7, r6
 80148c2:	d110      	bne.n	80148e6 <__cvt+0x92>
 80148c4:	783b      	ldrb	r3, [r7, #0]
 80148c6:	2b30      	cmp	r3, #48	; 0x30
 80148c8:	d10a      	bne.n	80148e0 <__cvt+0x8c>
 80148ca:	2200      	movs	r2, #0
 80148cc:	2300      	movs	r3, #0
 80148ce:	4620      	mov	r0, r4
 80148d0:	4629      	mov	r1, r5
 80148d2:	f7ec f907 	bl	8000ae4 <__aeabi_dcmpeq>
 80148d6:	b918      	cbnz	r0, 80148e0 <__cvt+0x8c>
 80148d8:	f1c6 0601 	rsb	r6, r6, #1
 80148dc:	f8ca 6000 	str.w	r6, [sl]
 80148e0:	f8da 3000 	ldr.w	r3, [sl]
 80148e4:	4499      	add	r9, r3
 80148e6:	2200      	movs	r2, #0
 80148e8:	2300      	movs	r3, #0
 80148ea:	4620      	mov	r0, r4
 80148ec:	4629      	mov	r1, r5
 80148ee:	f7ec f8f9 	bl	8000ae4 <__aeabi_dcmpeq>
 80148f2:	b108      	cbz	r0, 80148f8 <__cvt+0xa4>
 80148f4:	f8cd 900c 	str.w	r9, [sp, #12]
 80148f8:	2230      	movs	r2, #48	; 0x30
 80148fa:	9b03      	ldr	r3, [sp, #12]
 80148fc:	454b      	cmp	r3, r9
 80148fe:	d307      	bcc.n	8014910 <__cvt+0xbc>
 8014900:	9b03      	ldr	r3, [sp, #12]
 8014902:	4638      	mov	r0, r7
 8014904:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014906:	1bdb      	subs	r3, r3, r7
 8014908:	6013      	str	r3, [r2, #0]
 801490a:	b004      	add	sp, #16
 801490c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014910:	1c59      	adds	r1, r3, #1
 8014912:	9103      	str	r1, [sp, #12]
 8014914:	701a      	strb	r2, [r3, #0]
 8014916:	e7f0      	b.n	80148fa <__cvt+0xa6>

08014918 <__exponent>:
 8014918:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801491a:	2900      	cmp	r1, #0
 801491c:	4603      	mov	r3, r0
 801491e:	bfb8      	it	lt
 8014920:	4249      	neglt	r1, r1
 8014922:	f803 2b02 	strb.w	r2, [r3], #2
 8014926:	bfb4      	ite	lt
 8014928:	222d      	movlt	r2, #45	; 0x2d
 801492a:	222b      	movge	r2, #43	; 0x2b
 801492c:	2909      	cmp	r1, #9
 801492e:	7042      	strb	r2, [r0, #1]
 8014930:	dd29      	ble.n	8014986 <__exponent+0x6e>
 8014932:	f10d 0207 	add.w	r2, sp, #7
 8014936:	260a      	movs	r6, #10
 8014938:	4617      	mov	r7, r2
 801493a:	4694      	mov	ip, r2
 801493c:	3a01      	subs	r2, #1
 801493e:	fb91 f5f6 	sdiv	r5, r1, r6
 8014942:	fb06 1415 	mls	r4, r6, r5, r1
 8014946:	3430      	adds	r4, #48	; 0x30
 8014948:	f80c 4c01 	strb.w	r4, [ip, #-1]
 801494c:	460c      	mov	r4, r1
 801494e:	4629      	mov	r1, r5
 8014950:	2c63      	cmp	r4, #99	; 0x63
 8014952:	dcf2      	bgt.n	801493a <__exponent+0x22>
 8014954:	3130      	adds	r1, #48	; 0x30
 8014956:	f1ac 0402 	sub.w	r4, ip, #2
 801495a:	f802 1c01 	strb.w	r1, [r2, #-1]
 801495e:	1c41      	adds	r1, r0, #1
 8014960:	4622      	mov	r2, r4
 8014962:	42ba      	cmp	r2, r7
 8014964:	d30a      	bcc.n	801497c <__exponent+0x64>
 8014966:	f10d 0209 	add.w	r2, sp, #9
 801496a:	eba2 020c 	sub.w	r2, r2, ip
 801496e:	42bc      	cmp	r4, r7
 8014970:	bf88      	it	hi
 8014972:	2200      	movhi	r2, #0
 8014974:	4413      	add	r3, r2
 8014976:	1a18      	subs	r0, r3, r0
 8014978:	b003      	add	sp, #12
 801497a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801497c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8014980:	f801 5f01 	strb.w	r5, [r1, #1]!
 8014984:	e7ed      	b.n	8014962 <__exponent+0x4a>
 8014986:	2330      	movs	r3, #48	; 0x30
 8014988:	3130      	adds	r1, #48	; 0x30
 801498a:	7083      	strb	r3, [r0, #2]
 801498c:	1d03      	adds	r3, r0, #4
 801498e:	70c1      	strb	r1, [r0, #3]
 8014990:	e7f1      	b.n	8014976 <__exponent+0x5e>
	...

08014994 <_printf_float>:
 8014994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014998:	ed2d 8b02 	vpush	{d8}
 801499c:	b08d      	sub	sp, #52	; 0x34
 801499e:	460c      	mov	r4, r1
 80149a0:	4616      	mov	r6, r2
 80149a2:	461f      	mov	r7, r3
 80149a4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80149a8:	4605      	mov	r5, r0
 80149aa:	f002 f89f 	bl	8016aec <_localeconv_r>
 80149ae:	f8d0 a000 	ldr.w	sl, [r0]
 80149b2:	4650      	mov	r0, sl
 80149b4:	f7eb fc60 	bl	8000278 <strlen>
 80149b8:	2300      	movs	r3, #0
 80149ba:	f894 b018 	ldrb.w	fp, [r4, #24]
 80149be:	ee08 0a10 	vmov	s16, r0
 80149c2:	930a      	str	r3, [sp, #40]	; 0x28
 80149c4:	6823      	ldr	r3, [r4, #0]
 80149c6:	9305      	str	r3, [sp, #20]
 80149c8:	f8d8 3000 	ldr.w	r3, [r8]
 80149cc:	3307      	adds	r3, #7
 80149ce:	f023 0307 	bic.w	r3, r3, #7
 80149d2:	f103 0208 	add.w	r2, r3, #8
 80149d6:	f8c8 2000 	str.w	r2, [r8]
 80149da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80149de:	e9d3 8900 	ldrd	r8, r9, [r3]
 80149e2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80149e6:	f8cd 8018 	str.w	r8, [sp, #24]
 80149ea:	9307      	str	r3, [sp, #28]
 80149ec:	4b9f      	ldr	r3, [pc, #636]	; (8014c6c <_printf_float+0x2d8>)
 80149ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80149f2:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80149f6:	f7ec f8a7 	bl	8000b48 <__aeabi_dcmpun>
 80149fa:	bb88      	cbnz	r0, 8014a60 <_printf_float+0xcc>
 80149fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014a00:	4b9a      	ldr	r3, [pc, #616]	; (8014c6c <_printf_float+0x2d8>)
 8014a02:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014a06:	f7ec f881 	bl	8000b0c <__aeabi_dcmple>
 8014a0a:	bb48      	cbnz	r0, 8014a60 <_printf_float+0xcc>
 8014a0c:	2200      	movs	r2, #0
 8014a0e:	2300      	movs	r3, #0
 8014a10:	4640      	mov	r0, r8
 8014a12:	4649      	mov	r1, r9
 8014a14:	f7ec f870 	bl	8000af8 <__aeabi_dcmplt>
 8014a18:	b110      	cbz	r0, 8014a20 <_printf_float+0x8c>
 8014a1a:	232d      	movs	r3, #45	; 0x2d
 8014a1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014a20:	4a93      	ldr	r2, [pc, #588]	; (8014c70 <_printf_float+0x2dc>)
 8014a22:	4b94      	ldr	r3, [pc, #592]	; (8014c74 <_printf_float+0x2e0>)
 8014a24:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8014a28:	bf94      	ite	ls
 8014a2a:	4690      	movls	r8, r2
 8014a2c:	4698      	movhi	r8, r3
 8014a2e:	2303      	movs	r3, #3
 8014a30:	f04f 0900 	mov.w	r9, #0
 8014a34:	6123      	str	r3, [r4, #16]
 8014a36:	9b05      	ldr	r3, [sp, #20]
 8014a38:	f023 0304 	bic.w	r3, r3, #4
 8014a3c:	6023      	str	r3, [r4, #0]
 8014a3e:	4633      	mov	r3, r6
 8014a40:	aa0b      	add	r2, sp, #44	; 0x2c
 8014a42:	4621      	mov	r1, r4
 8014a44:	4628      	mov	r0, r5
 8014a46:	9700      	str	r7, [sp, #0]
 8014a48:	f000 fa8a 	bl	8014f60 <_printf_common>
 8014a4c:	3001      	adds	r0, #1
 8014a4e:	f040 8090 	bne.w	8014b72 <_printf_float+0x1de>
 8014a52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014a56:	b00d      	add	sp, #52	; 0x34
 8014a58:	ecbd 8b02 	vpop	{d8}
 8014a5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a60:	4642      	mov	r2, r8
 8014a62:	464b      	mov	r3, r9
 8014a64:	4640      	mov	r0, r8
 8014a66:	4649      	mov	r1, r9
 8014a68:	f7ec f86e 	bl	8000b48 <__aeabi_dcmpun>
 8014a6c:	b140      	cbz	r0, 8014a80 <_printf_float+0xec>
 8014a6e:	464b      	mov	r3, r9
 8014a70:	4a81      	ldr	r2, [pc, #516]	; (8014c78 <_printf_float+0x2e4>)
 8014a72:	2b00      	cmp	r3, #0
 8014a74:	bfbc      	itt	lt
 8014a76:	232d      	movlt	r3, #45	; 0x2d
 8014a78:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8014a7c:	4b7f      	ldr	r3, [pc, #508]	; (8014c7c <_printf_float+0x2e8>)
 8014a7e:	e7d1      	b.n	8014a24 <_printf_float+0x90>
 8014a80:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8014a84:	6863      	ldr	r3, [r4, #4]
 8014a86:	9206      	str	r2, [sp, #24]
 8014a88:	1c5a      	adds	r2, r3, #1
 8014a8a:	d13f      	bne.n	8014b0c <_printf_float+0x178>
 8014a8c:	2306      	movs	r3, #6
 8014a8e:	6063      	str	r3, [r4, #4]
 8014a90:	9b05      	ldr	r3, [sp, #20]
 8014a92:	4628      	mov	r0, r5
 8014a94:	6861      	ldr	r1, [r4, #4]
 8014a96:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8014a9a:	2300      	movs	r3, #0
 8014a9c:	9303      	str	r3, [sp, #12]
 8014a9e:	ab0a      	add	r3, sp, #40	; 0x28
 8014aa0:	6022      	str	r2, [r4, #0]
 8014aa2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8014aa6:	ab09      	add	r3, sp, #36	; 0x24
 8014aa8:	ec49 8b10 	vmov	d0, r8, r9
 8014aac:	9300      	str	r3, [sp, #0]
 8014aae:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8014ab2:	f7ff fecf 	bl	8014854 <__cvt>
 8014ab6:	9b06      	ldr	r3, [sp, #24]
 8014ab8:	4680      	mov	r8, r0
 8014aba:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014abc:	2b47      	cmp	r3, #71	; 0x47
 8014abe:	d108      	bne.n	8014ad2 <_printf_float+0x13e>
 8014ac0:	1cc8      	adds	r0, r1, #3
 8014ac2:	db02      	blt.n	8014aca <_printf_float+0x136>
 8014ac4:	6863      	ldr	r3, [r4, #4]
 8014ac6:	4299      	cmp	r1, r3
 8014ac8:	dd41      	ble.n	8014b4e <_printf_float+0x1ba>
 8014aca:	f1ab 0302 	sub.w	r3, fp, #2
 8014ace:	fa5f fb83 	uxtb.w	fp, r3
 8014ad2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8014ad6:	d820      	bhi.n	8014b1a <_printf_float+0x186>
 8014ad8:	3901      	subs	r1, #1
 8014ada:	465a      	mov	r2, fp
 8014adc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8014ae0:	9109      	str	r1, [sp, #36]	; 0x24
 8014ae2:	f7ff ff19 	bl	8014918 <__exponent>
 8014ae6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014ae8:	4681      	mov	r9, r0
 8014aea:	1813      	adds	r3, r2, r0
 8014aec:	2a01      	cmp	r2, #1
 8014aee:	6123      	str	r3, [r4, #16]
 8014af0:	dc02      	bgt.n	8014af8 <_printf_float+0x164>
 8014af2:	6822      	ldr	r2, [r4, #0]
 8014af4:	07d2      	lsls	r2, r2, #31
 8014af6:	d501      	bpl.n	8014afc <_printf_float+0x168>
 8014af8:	3301      	adds	r3, #1
 8014afa:	6123      	str	r3, [r4, #16]
 8014afc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8014b00:	2b00      	cmp	r3, #0
 8014b02:	d09c      	beq.n	8014a3e <_printf_float+0xaa>
 8014b04:	232d      	movs	r3, #45	; 0x2d
 8014b06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014b0a:	e798      	b.n	8014a3e <_printf_float+0xaa>
 8014b0c:	9a06      	ldr	r2, [sp, #24]
 8014b0e:	2a47      	cmp	r2, #71	; 0x47
 8014b10:	d1be      	bne.n	8014a90 <_printf_float+0xfc>
 8014b12:	2b00      	cmp	r3, #0
 8014b14:	d1bc      	bne.n	8014a90 <_printf_float+0xfc>
 8014b16:	2301      	movs	r3, #1
 8014b18:	e7b9      	b.n	8014a8e <_printf_float+0xfa>
 8014b1a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8014b1e:	d118      	bne.n	8014b52 <_printf_float+0x1be>
 8014b20:	2900      	cmp	r1, #0
 8014b22:	6863      	ldr	r3, [r4, #4]
 8014b24:	dd0b      	ble.n	8014b3e <_printf_float+0x1aa>
 8014b26:	6121      	str	r1, [r4, #16]
 8014b28:	b913      	cbnz	r3, 8014b30 <_printf_float+0x19c>
 8014b2a:	6822      	ldr	r2, [r4, #0]
 8014b2c:	07d0      	lsls	r0, r2, #31
 8014b2e:	d502      	bpl.n	8014b36 <_printf_float+0x1a2>
 8014b30:	3301      	adds	r3, #1
 8014b32:	440b      	add	r3, r1
 8014b34:	6123      	str	r3, [r4, #16]
 8014b36:	f04f 0900 	mov.w	r9, #0
 8014b3a:	65a1      	str	r1, [r4, #88]	; 0x58
 8014b3c:	e7de      	b.n	8014afc <_printf_float+0x168>
 8014b3e:	b913      	cbnz	r3, 8014b46 <_printf_float+0x1b2>
 8014b40:	6822      	ldr	r2, [r4, #0]
 8014b42:	07d2      	lsls	r2, r2, #31
 8014b44:	d501      	bpl.n	8014b4a <_printf_float+0x1b6>
 8014b46:	3302      	adds	r3, #2
 8014b48:	e7f4      	b.n	8014b34 <_printf_float+0x1a0>
 8014b4a:	2301      	movs	r3, #1
 8014b4c:	e7f2      	b.n	8014b34 <_printf_float+0x1a0>
 8014b4e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8014b52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014b54:	4299      	cmp	r1, r3
 8014b56:	db05      	blt.n	8014b64 <_printf_float+0x1d0>
 8014b58:	6823      	ldr	r3, [r4, #0]
 8014b5a:	6121      	str	r1, [r4, #16]
 8014b5c:	07d8      	lsls	r0, r3, #31
 8014b5e:	d5ea      	bpl.n	8014b36 <_printf_float+0x1a2>
 8014b60:	1c4b      	adds	r3, r1, #1
 8014b62:	e7e7      	b.n	8014b34 <_printf_float+0x1a0>
 8014b64:	2900      	cmp	r1, #0
 8014b66:	bfd4      	ite	le
 8014b68:	f1c1 0202 	rsble	r2, r1, #2
 8014b6c:	2201      	movgt	r2, #1
 8014b6e:	4413      	add	r3, r2
 8014b70:	e7e0      	b.n	8014b34 <_printf_float+0x1a0>
 8014b72:	6823      	ldr	r3, [r4, #0]
 8014b74:	055a      	lsls	r2, r3, #21
 8014b76:	d407      	bmi.n	8014b88 <_printf_float+0x1f4>
 8014b78:	6923      	ldr	r3, [r4, #16]
 8014b7a:	4642      	mov	r2, r8
 8014b7c:	4631      	mov	r1, r6
 8014b7e:	4628      	mov	r0, r5
 8014b80:	47b8      	blx	r7
 8014b82:	3001      	adds	r0, #1
 8014b84:	d12c      	bne.n	8014be0 <_printf_float+0x24c>
 8014b86:	e764      	b.n	8014a52 <_printf_float+0xbe>
 8014b88:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8014b8c:	f240 80e0 	bls.w	8014d50 <_printf_float+0x3bc>
 8014b90:	2200      	movs	r2, #0
 8014b92:	2300      	movs	r3, #0
 8014b94:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8014b98:	f7eb ffa4 	bl	8000ae4 <__aeabi_dcmpeq>
 8014b9c:	2800      	cmp	r0, #0
 8014b9e:	d034      	beq.n	8014c0a <_printf_float+0x276>
 8014ba0:	2301      	movs	r3, #1
 8014ba2:	4a37      	ldr	r2, [pc, #220]	; (8014c80 <_printf_float+0x2ec>)
 8014ba4:	4631      	mov	r1, r6
 8014ba6:	4628      	mov	r0, r5
 8014ba8:	47b8      	blx	r7
 8014baa:	3001      	adds	r0, #1
 8014bac:	f43f af51 	beq.w	8014a52 <_printf_float+0xbe>
 8014bb0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014bb4:	429a      	cmp	r2, r3
 8014bb6:	db02      	blt.n	8014bbe <_printf_float+0x22a>
 8014bb8:	6823      	ldr	r3, [r4, #0]
 8014bba:	07d8      	lsls	r0, r3, #31
 8014bbc:	d510      	bpl.n	8014be0 <_printf_float+0x24c>
 8014bbe:	ee18 3a10 	vmov	r3, s16
 8014bc2:	4652      	mov	r2, sl
 8014bc4:	4631      	mov	r1, r6
 8014bc6:	4628      	mov	r0, r5
 8014bc8:	47b8      	blx	r7
 8014bca:	3001      	adds	r0, #1
 8014bcc:	f43f af41 	beq.w	8014a52 <_printf_float+0xbe>
 8014bd0:	f04f 0800 	mov.w	r8, #0
 8014bd4:	f104 091a 	add.w	r9, r4, #26
 8014bd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014bda:	3b01      	subs	r3, #1
 8014bdc:	4543      	cmp	r3, r8
 8014bde:	dc09      	bgt.n	8014bf4 <_printf_float+0x260>
 8014be0:	6823      	ldr	r3, [r4, #0]
 8014be2:	079b      	lsls	r3, r3, #30
 8014be4:	f100 8107 	bmi.w	8014df6 <_printf_float+0x462>
 8014be8:	68e0      	ldr	r0, [r4, #12]
 8014bea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014bec:	4298      	cmp	r0, r3
 8014bee:	bfb8      	it	lt
 8014bf0:	4618      	movlt	r0, r3
 8014bf2:	e730      	b.n	8014a56 <_printf_float+0xc2>
 8014bf4:	2301      	movs	r3, #1
 8014bf6:	464a      	mov	r2, r9
 8014bf8:	4631      	mov	r1, r6
 8014bfa:	4628      	mov	r0, r5
 8014bfc:	47b8      	blx	r7
 8014bfe:	3001      	adds	r0, #1
 8014c00:	f43f af27 	beq.w	8014a52 <_printf_float+0xbe>
 8014c04:	f108 0801 	add.w	r8, r8, #1
 8014c08:	e7e6      	b.n	8014bd8 <_printf_float+0x244>
 8014c0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014c0c:	2b00      	cmp	r3, #0
 8014c0e:	dc39      	bgt.n	8014c84 <_printf_float+0x2f0>
 8014c10:	2301      	movs	r3, #1
 8014c12:	4a1b      	ldr	r2, [pc, #108]	; (8014c80 <_printf_float+0x2ec>)
 8014c14:	4631      	mov	r1, r6
 8014c16:	4628      	mov	r0, r5
 8014c18:	47b8      	blx	r7
 8014c1a:	3001      	adds	r0, #1
 8014c1c:	f43f af19 	beq.w	8014a52 <_printf_float+0xbe>
 8014c20:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8014c24:	4313      	orrs	r3, r2
 8014c26:	d102      	bne.n	8014c2e <_printf_float+0x29a>
 8014c28:	6823      	ldr	r3, [r4, #0]
 8014c2a:	07d9      	lsls	r1, r3, #31
 8014c2c:	d5d8      	bpl.n	8014be0 <_printf_float+0x24c>
 8014c2e:	ee18 3a10 	vmov	r3, s16
 8014c32:	4652      	mov	r2, sl
 8014c34:	4631      	mov	r1, r6
 8014c36:	4628      	mov	r0, r5
 8014c38:	47b8      	blx	r7
 8014c3a:	3001      	adds	r0, #1
 8014c3c:	f43f af09 	beq.w	8014a52 <_printf_float+0xbe>
 8014c40:	f04f 0900 	mov.w	r9, #0
 8014c44:	f104 0a1a 	add.w	sl, r4, #26
 8014c48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014c4a:	425b      	negs	r3, r3
 8014c4c:	454b      	cmp	r3, r9
 8014c4e:	dc01      	bgt.n	8014c54 <_printf_float+0x2c0>
 8014c50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014c52:	e792      	b.n	8014b7a <_printf_float+0x1e6>
 8014c54:	2301      	movs	r3, #1
 8014c56:	4652      	mov	r2, sl
 8014c58:	4631      	mov	r1, r6
 8014c5a:	4628      	mov	r0, r5
 8014c5c:	47b8      	blx	r7
 8014c5e:	3001      	adds	r0, #1
 8014c60:	f43f aef7 	beq.w	8014a52 <_printf_float+0xbe>
 8014c64:	f109 0901 	add.w	r9, r9, #1
 8014c68:	e7ee      	b.n	8014c48 <_printf_float+0x2b4>
 8014c6a:	bf00      	nop
 8014c6c:	7fefffff 	.word	0x7fefffff
 8014c70:	0801cde8 	.word	0x0801cde8
 8014c74:	0801cdec 	.word	0x0801cdec
 8014c78:	0801cdf0 	.word	0x0801cdf0
 8014c7c:	0801cdf4 	.word	0x0801cdf4
 8014c80:	0801d095 	.word	0x0801d095
 8014c84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014c86:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8014c88:	429a      	cmp	r2, r3
 8014c8a:	bfa8      	it	ge
 8014c8c:	461a      	movge	r2, r3
 8014c8e:	2a00      	cmp	r2, #0
 8014c90:	4691      	mov	r9, r2
 8014c92:	dc37      	bgt.n	8014d04 <_printf_float+0x370>
 8014c94:	f04f 0b00 	mov.w	fp, #0
 8014c98:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014c9c:	f104 021a 	add.w	r2, r4, #26
 8014ca0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8014ca2:	9305      	str	r3, [sp, #20]
 8014ca4:	eba3 0309 	sub.w	r3, r3, r9
 8014ca8:	455b      	cmp	r3, fp
 8014caa:	dc33      	bgt.n	8014d14 <_printf_float+0x380>
 8014cac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014cb0:	429a      	cmp	r2, r3
 8014cb2:	db3b      	blt.n	8014d2c <_printf_float+0x398>
 8014cb4:	6823      	ldr	r3, [r4, #0]
 8014cb6:	07da      	lsls	r2, r3, #31
 8014cb8:	d438      	bmi.n	8014d2c <_printf_float+0x398>
 8014cba:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8014cbe:	eba2 0903 	sub.w	r9, r2, r3
 8014cc2:	9b05      	ldr	r3, [sp, #20]
 8014cc4:	1ad2      	subs	r2, r2, r3
 8014cc6:	4591      	cmp	r9, r2
 8014cc8:	bfa8      	it	ge
 8014cca:	4691      	movge	r9, r2
 8014ccc:	f1b9 0f00 	cmp.w	r9, #0
 8014cd0:	dc35      	bgt.n	8014d3e <_printf_float+0x3aa>
 8014cd2:	f04f 0800 	mov.w	r8, #0
 8014cd6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014cda:	f104 0a1a 	add.w	sl, r4, #26
 8014cde:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014ce2:	1a9b      	subs	r3, r3, r2
 8014ce4:	eba3 0309 	sub.w	r3, r3, r9
 8014ce8:	4543      	cmp	r3, r8
 8014cea:	f77f af79 	ble.w	8014be0 <_printf_float+0x24c>
 8014cee:	2301      	movs	r3, #1
 8014cf0:	4652      	mov	r2, sl
 8014cf2:	4631      	mov	r1, r6
 8014cf4:	4628      	mov	r0, r5
 8014cf6:	47b8      	blx	r7
 8014cf8:	3001      	adds	r0, #1
 8014cfa:	f43f aeaa 	beq.w	8014a52 <_printf_float+0xbe>
 8014cfe:	f108 0801 	add.w	r8, r8, #1
 8014d02:	e7ec      	b.n	8014cde <_printf_float+0x34a>
 8014d04:	4613      	mov	r3, r2
 8014d06:	4631      	mov	r1, r6
 8014d08:	4642      	mov	r2, r8
 8014d0a:	4628      	mov	r0, r5
 8014d0c:	47b8      	blx	r7
 8014d0e:	3001      	adds	r0, #1
 8014d10:	d1c0      	bne.n	8014c94 <_printf_float+0x300>
 8014d12:	e69e      	b.n	8014a52 <_printf_float+0xbe>
 8014d14:	2301      	movs	r3, #1
 8014d16:	4631      	mov	r1, r6
 8014d18:	4628      	mov	r0, r5
 8014d1a:	9205      	str	r2, [sp, #20]
 8014d1c:	47b8      	blx	r7
 8014d1e:	3001      	adds	r0, #1
 8014d20:	f43f ae97 	beq.w	8014a52 <_printf_float+0xbe>
 8014d24:	f10b 0b01 	add.w	fp, fp, #1
 8014d28:	9a05      	ldr	r2, [sp, #20]
 8014d2a:	e7b9      	b.n	8014ca0 <_printf_float+0x30c>
 8014d2c:	ee18 3a10 	vmov	r3, s16
 8014d30:	4652      	mov	r2, sl
 8014d32:	4631      	mov	r1, r6
 8014d34:	4628      	mov	r0, r5
 8014d36:	47b8      	blx	r7
 8014d38:	3001      	adds	r0, #1
 8014d3a:	d1be      	bne.n	8014cba <_printf_float+0x326>
 8014d3c:	e689      	b.n	8014a52 <_printf_float+0xbe>
 8014d3e:	9a05      	ldr	r2, [sp, #20]
 8014d40:	464b      	mov	r3, r9
 8014d42:	4631      	mov	r1, r6
 8014d44:	4628      	mov	r0, r5
 8014d46:	4442      	add	r2, r8
 8014d48:	47b8      	blx	r7
 8014d4a:	3001      	adds	r0, #1
 8014d4c:	d1c1      	bne.n	8014cd2 <_printf_float+0x33e>
 8014d4e:	e680      	b.n	8014a52 <_printf_float+0xbe>
 8014d50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014d52:	2a01      	cmp	r2, #1
 8014d54:	dc01      	bgt.n	8014d5a <_printf_float+0x3c6>
 8014d56:	07db      	lsls	r3, r3, #31
 8014d58:	d53a      	bpl.n	8014dd0 <_printf_float+0x43c>
 8014d5a:	2301      	movs	r3, #1
 8014d5c:	4642      	mov	r2, r8
 8014d5e:	4631      	mov	r1, r6
 8014d60:	4628      	mov	r0, r5
 8014d62:	47b8      	blx	r7
 8014d64:	3001      	adds	r0, #1
 8014d66:	f43f ae74 	beq.w	8014a52 <_printf_float+0xbe>
 8014d6a:	ee18 3a10 	vmov	r3, s16
 8014d6e:	4652      	mov	r2, sl
 8014d70:	4631      	mov	r1, r6
 8014d72:	4628      	mov	r0, r5
 8014d74:	47b8      	blx	r7
 8014d76:	3001      	adds	r0, #1
 8014d78:	f43f ae6b 	beq.w	8014a52 <_printf_float+0xbe>
 8014d7c:	2200      	movs	r2, #0
 8014d7e:	2300      	movs	r3, #0
 8014d80:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8014d84:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8014d88:	f7eb feac 	bl	8000ae4 <__aeabi_dcmpeq>
 8014d8c:	b9d8      	cbnz	r0, 8014dc6 <_printf_float+0x432>
 8014d8e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8014d92:	f108 0201 	add.w	r2, r8, #1
 8014d96:	4631      	mov	r1, r6
 8014d98:	4628      	mov	r0, r5
 8014d9a:	47b8      	blx	r7
 8014d9c:	3001      	adds	r0, #1
 8014d9e:	d10e      	bne.n	8014dbe <_printf_float+0x42a>
 8014da0:	e657      	b.n	8014a52 <_printf_float+0xbe>
 8014da2:	2301      	movs	r3, #1
 8014da4:	4652      	mov	r2, sl
 8014da6:	4631      	mov	r1, r6
 8014da8:	4628      	mov	r0, r5
 8014daa:	47b8      	blx	r7
 8014dac:	3001      	adds	r0, #1
 8014dae:	f43f ae50 	beq.w	8014a52 <_printf_float+0xbe>
 8014db2:	f108 0801 	add.w	r8, r8, #1
 8014db6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014db8:	3b01      	subs	r3, #1
 8014dba:	4543      	cmp	r3, r8
 8014dbc:	dcf1      	bgt.n	8014da2 <_printf_float+0x40e>
 8014dbe:	464b      	mov	r3, r9
 8014dc0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8014dc4:	e6da      	b.n	8014b7c <_printf_float+0x1e8>
 8014dc6:	f04f 0800 	mov.w	r8, #0
 8014dca:	f104 0a1a 	add.w	sl, r4, #26
 8014dce:	e7f2      	b.n	8014db6 <_printf_float+0x422>
 8014dd0:	2301      	movs	r3, #1
 8014dd2:	4642      	mov	r2, r8
 8014dd4:	e7df      	b.n	8014d96 <_printf_float+0x402>
 8014dd6:	2301      	movs	r3, #1
 8014dd8:	464a      	mov	r2, r9
 8014dda:	4631      	mov	r1, r6
 8014ddc:	4628      	mov	r0, r5
 8014dde:	47b8      	blx	r7
 8014de0:	3001      	adds	r0, #1
 8014de2:	f43f ae36 	beq.w	8014a52 <_printf_float+0xbe>
 8014de6:	f108 0801 	add.w	r8, r8, #1
 8014dea:	68e3      	ldr	r3, [r4, #12]
 8014dec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014dee:	1a5b      	subs	r3, r3, r1
 8014df0:	4543      	cmp	r3, r8
 8014df2:	dcf0      	bgt.n	8014dd6 <_printf_float+0x442>
 8014df4:	e6f8      	b.n	8014be8 <_printf_float+0x254>
 8014df6:	f04f 0800 	mov.w	r8, #0
 8014dfa:	f104 0919 	add.w	r9, r4, #25
 8014dfe:	e7f4      	b.n	8014dea <_printf_float+0x456>

08014e00 <malloc>:
 8014e00:	4b02      	ldr	r3, [pc, #8]	; (8014e0c <malloc+0xc>)
 8014e02:	4601      	mov	r1, r0
 8014e04:	6818      	ldr	r0, [r3, #0]
 8014e06:	f000 b82b 	b.w	8014e60 <_malloc_r>
 8014e0a:	bf00      	nop
 8014e0c:	200002c4 	.word	0x200002c4

08014e10 <free>:
 8014e10:	4b02      	ldr	r3, [pc, #8]	; (8014e1c <free+0xc>)
 8014e12:	4601      	mov	r1, r0
 8014e14:	6818      	ldr	r0, [r3, #0]
 8014e16:	f002 bdc7 	b.w	80179a8 <_free_r>
 8014e1a:	bf00      	nop
 8014e1c:	200002c4 	.word	0x200002c4

08014e20 <sbrk_aligned>:
 8014e20:	b570      	push	{r4, r5, r6, lr}
 8014e22:	4e0e      	ldr	r6, [pc, #56]	; (8014e5c <sbrk_aligned+0x3c>)
 8014e24:	460c      	mov	r4, r1
 8014e26:	4605      	mov	r5, r0
 8014e28:	6831      	ldr	r1, [r6, #0]
 8014e2a:	b911      	cbnz	r1, 8014e32 <sbrk_aligned+0x12>
 8014e2c:	f001 feb8 	bl	8016ba0 <_sbrk_r>
 8014e30:	6030      	str	r0, [r6, #0]
 8014e32:	4621      	mov	r1, r4
 8014e34:	4628      	mov	r0, r5
 8014e36:	f001 feb3 	bl	8016ba0 <_sbrk_r>
 8014e3a:	1c43      	adds	r3, r0, #1
 8014e3c:	d00a      	beq.n	8014e54 <sbrk_aligned+0x34>
 8014e3e:	1cc4      	adds	r4, r0, #3
 8014e40:	f024 0403 	bic.w	r4, r4, #3
 8014e44:	42a0      	cmp	r0, r4
 8014e46:	d007      	beq.n	8014e58 <sbrk_aligned+0x38>
 8014e48:	1a21      	subs	r1, r4, r0
 8014e4a:	4628      	mov	r0, r5
 8014e4c:	f001 fea8 	bl	8016ba0 <_sbrk_r>
 8014e50:	3001      	adds	r0, #1
 8014e52:	d101      	bne.n	8014e58 <sbrk_aligned+0x38>
 8014e54:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8014e58:	4620      	mov	r0, r4
 8014e5a:	bd70      	pop	{r4, r5, r6, pc}
 8014e5c:	2000334c 	.word	0x2000334c

08014e60 <_malloc_r>:
 8014e60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014e64:	1ccd      	adds	r5, r1, #3
 8014e66:	4607      	mov	r7, r0
 8014e68:	f025 0503 	bic.w	r5, r5, #3
 8014e6c:	3508      	adds	r5, #8
 8014e6e:	2d0c      	cmp	r5, #12
 8014e70:	bf38      	it	cc
 8014e72:	250c      	movcc	r5, #12
 8014e74:	2d00      	cmp	r5, #0
 8014e76:	db01      	blt.n	8014e7c <_malloc_r+0x1c>
 8014e78:	42a9      	cmp	r1, r5
 8014e7a:	d905      	bls.n	8014e88 <_malloc_r+0x28>
 8014e7c:	230c      	movs	r3, #12
 8014e7e:	2600      	movs	r6, #0
 8014e80:	603b      	str	r3, [r7, #0]
 8014e82:	4630      	mov	r0, r6
 8014e84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014e88:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8014f5c <_malloc_r+0xfc>
 8014e8c:	f000 fcf4 	bl	8015878 <__malloc_lock>
 8014e90:	f8d8 3000 	ldr.w	r3, [r8]
 8014e94:	461c      	mov	r4, r3
 8014e96:	bb5c      	cbnz	r4, 8014ef0 <_malloc_r+0x90>
 8014e98:	4629      	mov	r1, r5
 8014e9a:	4638      	mov	r0, r7
 8014e9c:	f7ff ffc0 	bl	8014e20 <sbrk_aligned>
 8014ea0:	1c43      	adds	r3, r0, #1
 8014ea2:	4604      	mov	r4, r0
 8014ea4:	d155      	bne.n	8014f52 <_malloc_r+0xf2>
 8014ea6:	f8d8 4000 	ldr.w	r4, [r8]
 8014eaa:	4626      	mov	r6, r4
 8014eac:	2e00      	cmp	r6, #0
 8014eae:	d145      	bne.n	8014f3c <_malloc_r+0xdc>
 8014eb0:	2c00      	cmp	r4, #0
 8014eb2:	d048      	beq.n	8014f46 <_malloc_r+0xe6>
 8014eb4:	6823      	ldr	r3, [r4, #0]
 8014eb6:	4631      	mov	r1, r6
 8014eb8:	4638      	mov	r0, r7
 8014eba:	eb04 0903 	add.w	r9, r4, r3
 8014ebe:	f001 fe6f 	bl	8016ba0 <_sbrk_r>
 8014ec2:	4581      	cmp	r9, r0
 8014ec4:	d13f      	bne.n	8014f46 <_malloc_r+0xe6>
 8014ec6:	6821      	ldr	r1, [r4, #0]
 8014ec8:	4638      	mov	r0, r7
 8014eca:	1a6d      	subs	r5, r5, r1
 8014ecc:	4629      	mov	r1, r5
 8014ece:	f7ff ffa7 	bl	8014e20 <sbrk_aligned>
 8014ed2:	3001      	adds	r0, #1
 8014ed4:	d037      	beq.n	8014f46 <_malloc_r+0xe6>
 8014ed6:	6823      	ldr	r3, [r4, #0]
 8014ed8:	442b      	add	r3, r5
 8014eda:	6023      	str	r3, [r4, #0]
 8014edc:	f8d8 3000 	ldr.w	r3, [r8]
 8014ee0:	2b00      	cmp	r3, #0
 8014ee2:	d038      	beq.n	8014f56 <_malloc_r+0xf6>
 8014ee4:	685a      	ldr	r2, [r3, #4]
 8014ee6:	42a2      	cmp	r2, r4
 8014ee8:	d12b      	bne.n	8014f42 <_malloc_r+0xe2>
 8014eea:	2200      	movs	r2, #0
 8014eec:	605a      	str	r2, [r3, #4]
 8014eee:	e00f      	b.n	8014f10 <_malloc_r+0xb0>
 8014ef0:	6822      	ldr	r2, [r4, #0]
 8014ef2:	1b52      	subs	r2, r2, r5
 8014ef4:	d41f      	bmi.n	8014f36 <_malloc_r+0xd6>
 8014ef6:	2a0b      	cmp	r2, #11
 8014ef8:	d917      	bls.n	8014f2a <_malloc_r+0xca>
 8014efa:	1961      	adds	r1, r4, r5
 8014efc:	42a3      	cmp	r3, r4
 8014efe:	6025      	str	r5, [r4, #0]
 8014f00:	bf18      	it	ne
 8014f02:	6059      	strne	r1, [r3, #4]
 8014f04:	6863      	ldr	r3, [r4, #4]
 8014f06:	bf08      	it	eq
 8014f08:	f8c8 1000 	streq.w	r1, [r8]
 8014f0c:	5162      	str	r2, [r4, r5]
 8014f0e:	604b      	str	r3, [r1, #4]
 8014f10:	f104 060b 	add.w	r6, r4, #11
 8014f14:	4638      	mov	r0, r7
 8014f16:	f000 fcb5 	bl	8015884 <__malloc_unlock>
 8014f1a:	1d23      	adds	r3, r4, #4
 8014f1c:	f026 0607 	bic.w	r6, r6, #7
 8014f20:	1af2      	subs	r2, r6, r3
 8014f22:	d0ae      	beq.n	8014e82 <_malloc_r+0x22>
 8014f24:	1b9b      	subs	r3, r3, r6
 8014f26:	50a3      	str	r3, [r4, r2]
 8014f28:	e7ab      	b.n	8014e82 <_malloc_r+0x22>
 8014f2a:	42a3      	cmp	r3, r4
 8014f2c:	6862      	ldr	r2, [r4, #4]
 8014f2e:	d1dd      	bne.n	8014eec <_malloc_r+0x8c>
 8014f30:	f8c8 2000 	str.w	r2, [r8]
 8014f34:	e7ec      	b.n	8014f10 <_malloc_r+0xb0>
 8014f36:	4623      	mov	r3, r4
 8014f38:	6864      	ldr	r4, [r4, #4]
 8014f3a:	e7ac      	b.n	8014e96 <_malloc_r+0x36>
 8014f3c:	4634      	mov	r4, r6
 8014f3e:	6876      	ldr	r6, [r6, #4]
 8014f40:	e7b4      	b.n	8014eac <_malloc_r+0x4c>
 8014f42:	4613      	mov	r3, r2
 8014f44:	e7cc      	b.n	8014ee0 <_malloc_r+0x80>
 8014f46:	230c      	movs	r3, #12
 8014f48:	4638      	mov	r0, r7
 8014f4a:	603b      	str	r3, [r7, #0]
 8014f4c:	f000 fc9a 	bl	8015884 <__malloc_unlock>
 8014f50:	e797      	b.n	8014e82 <_malloc_r+0x22>
 8014f52:	6025      	str	r5, [r4, #0]
 8014f54:	e7dc      	b.n	8014f10 <_malloc_r+0xb0>
 8014f56:	605b      	str	r3, [r3, #4]
 8014f58:	deff      	udf	#255	; 0xff
 8014f5a:	bf00      	nop
 8014f5c:	20003348 	.word	0x20003348

08014f60 <_printf_common>:
 8014f60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014f64:	4616      	mov	r6, r2
 8014f66:	4699      	mov	r9, r3
 8014f68:	688a      	ldr	r2, [r1, #8]
 8014f6a:	4607      	mov	r7, r0
 8014f6c:	690b      	ldr	r3, [r1, #16]
 8014f6e:	460c      	mov	r4, r1
 8014f70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014f74:	4293      	cmp	r3, r2
 8014f76:	bfb8      	it	lt
 8014f78:	4613      	movlt	r3, r2
 8014f7a:	6033      	str	r3, [r6, #0]
 8014f7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014f80:	b10a      	cbz	r2, 8014f86 <_printf_common+0x26>
 8014f82:	3301      	adds	r3, #1
 8014f84:	6033      	str	r3, [r6, #0]
 8014f86:	6823      	ldr	r3, [r4, #0]
 8014f88:	0699      	lsls	r1, r3, #26
 8014f8a:	bf42      	ittt	mi
 8014f8c:	6833      	ldrmi	r3, [r6, #0]
 8014f8e:	3302      	addmi	r3, #2
 8014f90:	6033      	strmi	r3, [r6, #0]
 8014f92:	6825      	ldr	r5, [r4, #0]
 8014f94:	f015 0506 	ands.w	r5, r5, #6
 8014f98:	d106      	bne.n	8014fa8 <_printf_common+0x48>
 8014f9a:	f104 0a19 	add.w	sl, r4, #25
 8014f9e:	68e3      	ldr	r3, [r4, #12]
 8014fa0:	6832      	ldr	r2, [r6, #0]
 8014fa2:	1a9b      	subs	r3, r3, r2
 8014fa4:	42ab      	cmp	r3, r5
 8014fa6:	dc2b      	bgt.n	8015000 <_printf_common+0xa0>
 8014fa8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014fac:	1e13      	subs	r3, r2, #0
 8014fae:	6822      	ldr	r2, [r4, #0]
 8014fb0:	bf18      	it	ne
 8014fb2:	2301      	movne	r3, #1
 8014fb4:	0692      	lsls	r2, r2, #26
 8014fb6:	d430      	bmi.n	801501a <_printf_common+0xba>
 8014fb8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014fbc:	4649      	mov	r1, r9
 8014fbe:	4638      	mov	r0, r7
 8014fc0:	47c0      	blx	r8
 8014fc2:	3001      	adds	r0, #1
 8014fc4:	d023      	beq.n	801500e <_printf_common+0xae>
 8014fc6:	6823      	ldr	r3, [r4, #0]
 8014fc8:	341a      	adds	r4, #26
 8014fca:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8014fce:	f003 0306 	and.w	r3, r3, #6
 8014fd2:	2b04      	cmp	r3, #4
 8014fd4:	bf0a      	itet	eq
 8014fd6:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8014fda:	2500      	movne	r5, #0
 8014fdc:	6833      	ldreq	r3, [r6, #0]
 8014fde:	f04f 0600 	mov.w	r6, #0
 8014fe2:	bf08      	it	eq
 8014fe4:	1aed      	subeq	r5, r5, r3
 8014fe6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8014fea:	bf08      	it	eq
 8014fec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014ff0:	4293      	cmp	r3, r2
 8014ff2:	bfc4      	itt	gt
 8014ff4:	1a9b      	subgt	r3, r3, r2
 8014ff6:	18ed      	addgt	r5, r5, r3
 8014ff8:	42b5      	cmp	r5, r6
 8014ffa:	d11a      	bne.n	8015032 <_printf_common+0xd2>
 8014ffc:	2000      	movs	r0, #0
 8014ffe:	e008      	b.n	8015012 <_printf_common+0xb2>
 8015000:	2301      	movs	r3, #1
 8015002:	4652      	mov	r2, sl
 8015004:	4649      	mov	r1, r9
 8015006:	4638      	mov	r0, r7
 8015008:	47c0      	blx	r8
 801500a:	3001      	adds	r0, #1
 801500c:	d103      	bne.n	8015016 <_printf_common+0xb6>
 801500e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015012:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015016:	3501      	adds	r5, #1
 8015018:	e7c1      	b.n	8014f9e <_printf_common+0x3e>
 801501a:	18e1      	adds	r1, r4, r3
 801501c:	1c5a      	adds	r2, r3, #1
 801501e:	2030      	movs	r0, #48	; 0x30
 8015020:	3302      	adds	r3, #2
 8015022:	4422      	add	r2, r4
 8015024:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015028:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801502c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015030:	e7c2      	b.n	8014fb8 <_printf_common+0x58>
 8015032:	2301      	movs	r3, #1
 8015034:	4622      	mov	r2, r4
 8015036:	4649      	mov	r1, r9
 8015038:	4638      	mov	r0, r7
 801503a:	47c0      	blx	r8
 801503c:	3001      	adds	r0, #1
 801503e:	d0e6      	beq.n	801500e <_printf_common+0xae>
 8015040:	3601      	adds	r6, #1
 8015042:	e7d9      	b.n	8014ff8 <_printf_common+0x98>

08015044 <_printf_i>:
 8015044:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015048:	7e0f      	ldrb	r7, [r1, #24]
 801504a:	4691      	mov	r9, r2
 801504c:	4680      	mov	r8, r0
 801504e:	460c      	mov	r4, r1
 8015050:	2f78      	cmp	r7, #120	; 0x78
 8015052:	469a      	mov	sl, r3
 8015054:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8015056:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801505a:	d807      	bhi.n	801506c <_printf_i+0x28>
 801505c:	2f62      	cmp	r7, #98	; 0x62
 801505e:	d80a      	bhi.n	8015076 <_printf_i+0x32>
 8015060:	2f00      	cmp	r7, #0
 8015062:	f000 80d3 	beq.w	801520c <_printf_i+0x1c8>
 8015066:	2f58      	cmp	r7, #88	; 0x58
 8015068:	f000 80bf 	beq.w	80151ea <_printf_i+0x1a6>
 801506c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015070:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8015074:	e03a      	b.n	80150ec <_printf_i+0xa8>
 8015076:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801507a:	2b15      	cmp	r3, #21
 801507c:	d8f6      	bhi.n	801506c <_printf_i+0x28>
 801507e:	a101      	add	r1, pc, #4	; (adr r1, 8015084 <_printf_i+0x40>)
 8015080:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015084:	080150dd 	.word	0x080150dd
 8015088:	080150f1 	.word	0x080150f1
 801508c:	0801506d 	.word	0x0801506d
 8015090:	0801506d 	.word	0x0801506d
 8015094:	0801506d 	.word	0x0801506d
 8015098:	0801506d 	.word	0x0801506d
 801509c:	080150f1 	.word	0x080150f1
 80150a0:	0801506d 	.word	0x0801506d
 80150a4:	0801506d 	.word	0x0801506d
 80150a8:	0801506d 	.word	0x0801506d
 80150ac:	0801506d 	.word	0x0801506d
 80150b0:	080151f3 	.word	0x080151f3
 80150b4:	0801511d 	.word	0x0801511d
 80150b8:	080151af 	.word	0x080151af
 80150bc:	0801506d 	.word	0x0801506d
 80150c0:	0801506d 	.word	0x0801506d
 80150c4:	08015215 	.word	0x08015215
 80150c8:	0801506d 	.word	0x0801506d
 80150cc:	0801511d 	.word	0x0801511d
 80150d0:	0801506d 	.word	0x0801506d
 80150d4:	0801506d 	.word	0x0801506d
 80150d8:	080151b7 	.word	0x080151b7
 80150dc:	682b      	ldr	r3, [r5, #0]
 80150de:	1d1a      	adds	r2, r3, #4
 80150e0:	681b      	ldr	r3, [r3, #0]
 80150e2:	602a      	str	r2, [r5, #0]
 80150e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80150e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80150ec:	2301      	movs	r3, #1
 80150ee:	e09e      	b.n	801522e <_printf_i+0x1ea>
 80150f0:	6820      	ldr	r0, [r4, #0]
 80150f2:	682b      	ldr	r3, [r5, #0]
 80150f4:	0607      	lsls	r7, r0, #24
 80150f6:	f103 0104 	add.w	r1, r3, #4
 80150fa:	6029      	str	r1, [r5, #0]
 80150fc:	d501      	bpl.n	8015102 <_printf_i+0xbe>
 80150fe:	681e      	ldr	r6, [r3, #0]
 8015100:	e003      	b.n	801510a <_printf_i+0xc6>
 8015102:	0646      	lsls	r6, r0, #25
 8015104:	d5fb      	bpl.n	80150fe <_printf_i+0xba>
 8015106:	f9b3 6000 	ldrsh.w	r6, [r3]
 801510a:	2e00      	cmp	r6, #0
 801510c:	da03      	bge.n	8015116 <_printf_i+0xd2>
 801510e:	232d      	movs	r3, #45	; 0x2d
 8015110:	4276      	negs	r6, r6
 8015112:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015116:	4859      	ldr	r0, [pc, #356]	; (801527c <_printf_i+0x238>)
 8015118:	230a      	movs	r3, #10
 801511a:	e012      	b.n	8015142 <_printf_i+0xfe>
 801511c:	682b      	ldr	r3, [r5, #0]
 801511e:	6820      	ldr	r0, [r4, #0]
 8015120:	1d19      	adds	r1, r3, #4
 8015122:	6029      	str	r1, [r5, #0]
 8015124:	0605      	lsls	r5, r0, #24
 8015126:	d501      	bpl.n	801512c <_printf_i+0xe8>
 8015128:	681e      	ldr	r6, [r3, #0]
 801512a:	e002      	b.n	8015132 <_printf_i+0xee>
 801512c:	0641      	lsls	r1, r0, #25
 801512e:	d5fb      	bpl.n	8015128 <_printf_i+0xe4>
 8015130:	881e      	ldrh	r6, [r3, #0]
 8015132:	2f6f      	cmp	r7, #111	; 0x6f
 8015134:	4851      	ldr	r0, [pc, #324]	; (801527c <_printf_i+0x238>)
 8015136:	bf0c      	ite	eq
 8015138:	2308      	moveq	r3, #8
 801513a:	230a      	movne	r3, #10
 801513c:	2100      	movs	r1, #0
 801513e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015142:	6865      	ldr	r5, [r4, #4]
 8015144:	2d00      	cmp	r5, #0
 8015146:	60a5      	str	r5, [r4, #8]
 8015148:	bfa2      	ittt	ge
 801514a:	6821      	ldrge	r1, [r4, #0]
 801514c:	f021 0104 	bicge.w	r1, r1, #4
 8015150:	6021      	strge	r1, [r4, #0]
 8015152:	b90e      	cbnz	r6, 8015158 <_printf_i+0x114>
 8015154:	2d00      	cmp	r5, #0
 8015156:	d04a      	beq.n	80151ee <_printf_i+0x1aa>
 8015158:	4615      	mov	r5, r2
 801515a:	fbb6 f1f3 	udiv	r1, r6, r3
 801515e:	fb03 6711 	mls	r7, r3, r1, r6
 8015162:	5dc7      	ldrb	r7, [r0, r7]
 8015164:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8015168:	4637      	mov	r7, r6
 801516a:	460e      	mov	r6, r1
 801516c:	42bb      	cmp	r3, r7
 801516e:	d9f4      	bls.n	801515a <_printf_i+0x116>
 8015170:	2b08      	cmp	r3, #8
 8015172:	d10b      	bne.n	801518c <_printf_i+0x148>
 8015174:	6823      	ldr	r3, [r4, #0]
 8015176:	07de      	lsls	r6, r3, #31
 8015178:	d508      	bpl.n	801518c <_printf_i+0x148>
 801517a:	6923      	ldr	r3, [r4, #16]
 801517c:	6861      	ldr	r1, [r4, #4]
 801517e:	4299      	cmp	r1, r3
 8015180:	bfde      	ittt	le
 8015182:	2330      	movle	r3, #48	; 0x30
 8015184:	f805 3c01 	strble.w	r3, [r5, #-1]
 8015188:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801518c:	1b52      	subs	r2, r2, r5
 801518e:	6122      	str	r2, [r4, #16]
 8015190:	464b      	mov	r3, r9
 8015192:	aa03      	add	r2, sp, #12
 8015194:	4621      	mov	r1, r4
 8015196:	4640      	mov	r0, r8
 8015198:	f8cd a000 	str.w	sl, [sp]
 801519c:	f7ff fee0 	bl	8014f60 <_printf_common>
 80151a0:	3001      	adds	r0, #1
 80151a2:	d149      	bne.n	8015238 <_printf_i+0x1f4>
 80151a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80151a8:	b004      	add	sp, #16
 80151aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80151ae:	6823      	ldr	r3, [r4, #0]
 80151b0:	f043 0320 	orr.w	r3, r3, #32
 80151b4:	6023      	str	r3, [r4, #0]
 80151b6:	2778      	movs	r7, #120	; 0x78
 80151b8:	4831      	ldr	r0, [pc, #196]	; (8015280 <_printf_i+0x23c>)
 80151ba:	6823      	ldr	r3, [r4, #0]
 80151bc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80151c0:	061f      	lsls	r7, r3, #24
 80151c2:	6829      	ldr	r1, [r5, #0]
 80151c4:	f851 6b04 	ldr.w	r6, [r1], #4
 80151c8:	d402      	bmi.n	80151d0 <_printf_i+0x18c>
 80151ca:	065f      	lsls	r7, r3, #25
 80151cc:	bf48      	it	mi
 80151ce:	b2b6      	uxthmi	r6, r6
 80151d0:	07df      	lsls	r7, r3, #31
 80151d2:	6029      	str	r1, [r5, #0]
 80151d4:	bf44      	itt	mi
 80151d6:	f043 0320 	orrmi.w	r3, r3, #32
 80151da:	6023      	strmi	r3, [r4, #0]
 80151dc:	b91e      	cbnz	r6, 80151e6 <_printf_i+0x1a2>
 80151de:	6823      	ldr	r3, [r4, #0]
 80151e0:	f023 0320 	bic.w	r3, r3, #32
 80151e4:	6023      	str	r3, [r4, #0]
 80151e6:	2310      	movs	r3, #16
 80151e8:	e7a8      	b.n	801513c <_printf_i+0xf8>
 80151ea:	4824      	ldr	r0, [pc, #144]	; (801527c <_printf_i+0x238>)
 80151ec:	e7e5      	b.n	80151ba <_printf_i+0x176>
 80151ee:	4615      	mov	r5, r2
 80151f0:	e7be      	b.n	8015170 <_printf_i+0x12c>
 80151f2:	682b      	ldr	r3, [r5, #0]
 80151f4:	6826      	ldr	r6, [r4, #0]
 80151f6:	1d18      	adds	r0, r3, #4
 80151f8:	6961      	ldr	r1, [r4, #20]
 80151fa:	6028      	str	r0, [r5, #0]
 80151fc:	0635      	lsls	r5, r6, #24
 80151fe:	681b      	ldr	r3, [r3, #0]
 8015200:	d501      	bpl.n	8015206 <_printf_i+0x1c2>
 8015202:	6019      	str	r1, [r3, #0]
 8015204:	e002      	b.n	801520c <_printf_i+0x1c8>
 8015206:	0670      	lsls	r0, r6, #25
 8015208:	d5fb      	bpl.n	8015202 <_printf_i+0x1be>
 801520a:	8019      	strh	r1, [r3, #0]
 801520c:	2300      	movs	r3, #0
 801520e:	4615      	mov	r5, r2
 8015210:	6123      	str	r3, [r4, #16]
 8015212:	e7bd      	b.n	8015190 <_printf_i+0x14c>
 8015214:	682b      	ldr	r3, [r5, #0]
 8015216:	2100      	movs	r1, #0
 8015218:	1d1a      	adds	r2, r3, #4
 801521a:	602a      	str	r2, [r5, #0]
 801521c:	681d      	ldr	r5, [r3, #0]
 801521e:	6862      	ldr	r2, [r4, #4]
 8015220:	4628      	mov	r0, r5
 8015222:	f001 fd0c 	bl	8016c3e <memchr>
 8015226:	b108      	cbz	r0, 801522c <_printf_i+0x1e8>
 8015228:	1b40      	subs	r0, r0, r5
 801522a:	6060      	str	r0, [r4, #4]
 801522c:	6863      	ldr	r3, [r4, #4]
 801522e:	6123      	str	r3, [r4, #16]
 8015230:	2300      	movs	r3, #0
 8015232:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015236:	e7ab      	b.n	8015190 <_printf_i+0x14c>
 8015238:	6923      	ldr	r3, [r4, #16]
 801523a:	462a      	mov	r2, r5
 801523c:	4649      	mov	r1, r9
 801523e:	4640      	mov	r0, r8
 8015240:	47d0      	blx	sl
 8015242:	3001      	adds	r0, #1
 8015244:	d0ae      	beq.n	80151a4 <_printf_i+0x160>
 8015246:	6823      	ldr	r3, [r4, #0]
 8015248:	079b      	lsls	r3, r3, #30
 801524a:	d413      	bmi.n	8015274 <_printf_i+0x230>
 801524c:	68e0      	ldr	r0, [r4, #12]
 801524e:	9b03      	ldr	r3, [sp, #12]
 8015250:	4298      	cmp	r0, r3
 8015252:	bfb8      	it	lt
 8015254:	4618      	movlt	r0, r3
 8015256:	e7a7      	b.n	80151a8 <_printf_i+0x164>
 8015258:	2301      	movs	r3, #1
 801525a:	4632      	mov	r2, r6
 801525c:	4649      	mov	r1, r9
 801525e:	4640      	mov	r0, r8
 8015260:	47d0      	blx	sl
 8015262:	3001      	adds	r0, #1
 8015264:	d09e      	beq.n	80151a4 <_printf_i+0x160>
 8015266:	3501      	adds	r5, #1
 8015268:	68e3      	ldr	r3, [r4, #12]
 801526a:	9903      	ldr	r1, [sp, #12]
 801526c:	1a5b      	subs	r3, r3, r1
 801526e:	42ab      	cmp	r3, r5
 8015270:	dcf2      	bgt.n	8015258 <_printf_i+0x214>
 8015272:	e7eb      	b.n	801524c <_printf_i+0x208>
 8015274:	2500      	movs	r5, #0
 8015276:	f104 0619 	add.w	r6, r4, #25
 801527a:	e7f5      	b.n	8015268 <_printf_i+0x224>
 801527c:	0801cdf8 	.word	0x0801cdf8
 8015280:	0801ce09 	.word	0x0801ce09

08015284 <_scanf_float>:
 8015284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015288:	b087      	sub	sp, #28
 801528a:	4617      	mov	r7, r2
 801528c:	468b      	mov	fp, r1
 801528e:	4680      	mov	r8, r0
 8015290:	9303      	str	r3, [sp, #12]
 8015292:	460c      	mov	r4, r1
 8015294:	688b      	ldr	r3, [r1, #8]
 8015296:	1e5a      	subs	r2, r3, #1
 8015298:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801529c:	bf8b      	itete	hi
 801529e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80152a2:	2300      	movls	r3, #0
 80152a4:	195b      	addhi	r3, r3, r5
 80152a6:	9302      	strls	r3, [sp, #8]
 80152a8:	f04f 0500 	mov.w	r5, #0
 80152ac:	bf84      	itt	hi
 80152ae:	9302      	strhi	r3, [sp, #8]
 80152b0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80152b4:	46aa      	mov	sl, r5
 80152b6:	46a9      	mov	r9, r5
 80152b8:	bf88      	it	hi
 80152ba:	608b      	strhi	r3, [r1, #8]
 80152bc:	680b      	ldr	r3, [r1, #0]
 80152be:	9501      	str	r5, [sp, #4]
 80152c0:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80152c4:	f84b 3b1c 	str.w	r3, [fp], #28
 80152c8:	465e      	mov	r6, fp
 80152ca:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80152ce:	68a2      	ldr	r2, [r4, #8]
 80152d0:	b152      	cbz	r2, 80152e8 <_scanf_float+0x64>
 80152d2:	683b      	ldr	r3, [r7, #0]
 80152d4:	781b      	ldrb	r3, [r3, #0]
 80152d6:	2b4e      	cmp	r3, #78	; 0x4e
 80152d8:	d864      	bhi.n	80153a4 <_scanf_float+0x120>
 80152da:	2b40      	cmp	r3, #64	; 0x40
 80152dc:	d83c      	bhi.n	8015358 <_scanf_float+0xd4>
 80152de:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80152e2:	b2c8      	uxtb	r0, r1
 80152e4:	280e      	cmp	r0, #14
 80152e6:	d93a      	bls.n	801535e <_scanf_float+0xda>
 80152e8:	f1b9 0f00 	cmp.w	r9, #0
 80152ec:	d003      	beq.n	80152f6 <_scanf_float+0x72>
 80152ee:	6823      	ldr	r3, [r4, #0]
 80152f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80152f4:	6023      	str	r3, [r4, #0]
 80152f6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80152fa:	f1ba 0f01 	cmp.w	sl, #1
 80152fe:	f200 8113 	bhi.w	8015528 <_scanf_float+0x2a4>
 8015302:	455e      	cmp	r6, fp
 8015304:	f200 8105 	bhi.w	8015512 <_scanf_float+0x28e>
 8015308:	2501      	movs	r5, #1
 801530a:	4628      	mov	r0, r5
 801530c:	b007      	add	sp, #28
 801530e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015312:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8015316:	2a0d      	cmp	r2, #13
 8015318:	d8e6      	bhi.n	80152e8 <_scanf_float+0x64>
 801531a:	a101      	add	r1, pc, #4	; (adr r1, 8015320 <_scanf_float+0x9c>)
 801531c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8015320:	0801545f 	.word	0x0801545f
 8015324:	080152e9 	.word	0x080152e9
 8015328:	080152e9 	.word	0x080152e9
 801532c:	080152e9 	.word	0x080152e9
 8015330:	080154bf 	.word	0x080154bf
 8015334:	08015497 	.word	0x08015497
 8015338:	080152e9 	.word	0x080152e9
 801533c:	080152e9 	.word	0x080152e9
 8015340:	0801546d 	.word	0x0801546d
 8015344:	080152e9 	.word	0x080152e9
 8015348:	080152e9 	.word	0x080152e9
 801534c:	080152e9 	.word	0x080152e9
 8015350:	080152e9 	.word	0x080152e9
 8015354:	08015425 	.word	0x08015425
 8015358:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801535c:	e7db      	b.n	8015316 <_scanf_float+0x92>
 801535e:	290e      	cmp	r1, #14
 8015360:	d8c2      	bhi.n	80152e8 <_scanf_float+0x64>
 8015362:	a001      	add	r0, pc, #4	; (adr r0, 8015368 <_scanf_float+0xe4>)
 8015364:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8015368:	08015417 	.word	0x08015417
 801536c:	080152e9 	.word	0x080152e9
 8015370:	08015417 	.word	0x08015417
 8015374:	080154ab 	.word	0x080154ab
 8015378:	080152e9 	.word	0x080152e9
 801537c:	080153c5 	.word	0x080153c5
 8015380:	08015401 	.word	0x08015401
 8015384:	08015401 	.word	0x08015401
 8015388:	08015401 	.word	0x08015401
 801538c:	08015401 	.word	0x08015401
 8015390:	08015401 	.word	0x08015401
 8015394:	08015401 	.word	0x08015401
 8015398:	08015401 	.word	0x08015401
 801539c:	08015401 	.word	0x08015401
 80153a0:	08015401 	.word	0x08015401
 80153a4:	2b6e      	cmp	r3, #110	; 0x6e
 80153a6:	d809      	bhi.n	80153bc <_scanf_float+0x138>
 80153a8:	2b60      	cmp	r3, #96	; 0x60
 80153aa:	d8b2      	bhi.n	8015312 <_scanf_float+0x8e>
 80153ac:	2b54      	cmp	r3, #84	; 0x54
 80153ae:	d077      	beq.n	80154a0 <_scanf_float+0x21c>
 80153b0:	2b59      	cmp	r3, #89	; 0x59
 80153b2:	d199      	bne.n	80152e8 <_scanf_float+0x64>
 80153b4:	2d07      	cmp	r5, #7
 80153b6:	d197      	bne.n	80152e8 <_scanf_float+0x64>
 80153b8:	2508      	movs	r5, #8
 80153ba:	e029      	b.n	8015410 <_scanf_float+0x18c>
 80153bc:	2b74      	cmp	r3, #116	; 0x74
 80153be:	d06f      	beq.n	80154a0 <_scanf_float+0x21c>
 80153c0:	2b79      	cmp	r3, #121	; 0x79
 80153c2:	e7f6      	b.n	80153b2 <_scanf_float+0x12e>
 80153c4:	6821      	ldr	r1, [r4, #0]
 80153c6:	05c8      	lsls	r0, r1, #23
 80153c8:	d51a      	bpl.n	8015400 <_scanf_float+0x17c>
 80153ca:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80153ce:	9b02      	ldr	r3, [sp, #8]
 80153d0:	f109 0901 	add.w	r9, r9, #1
 80153d4:	6021      	str	r1, [r4, #0]
 80153d6:	b11b      	cbz	r3, 80153e0 <_scanf_float+0x15c>
 80153d8:	3b01      	subs	r3, #1
 80153da:	3201      	adds	r2, #1
 80153dc:	9302      	str	r3, [sp, #8]
 80153de:	60a2      	str	r2, [r4, #8]
 80153e0:	68a3      	ldr	r3, [r4, #8]
 80153e2:	3b01      	subs	r3, #1
 80153e4:	60a3      	str	r3, [r4, #8]
 80153e6:	6923      	ldr	r3, [r4, #16]
 80153e8:	3301      	adds	r3, #1
 80153ea:	6123      	str	r3, [r4, #16]
 80153ec:	687b      	ldr	r3, [r7, #4]
 80153ee:	3b01      	subs	r3, #1
 80153f0:	2b00      	cmp	r3, #0
 80153f2:	607b      	str	r3, [r7, #4]
 80153f4:	f340 8084 	ble.w	8015500 <_scanf_float+0x27c>
 80153f8:	683b      	ldr	r3, [r7, #0]
 80153fa:	3301      	adds	r3, #1
 80153fc:	603b      	str	r3, [r7, #0]
 80153fe:	e766      	b.n	80152ce <_scanf_float+0x4a>
 8015400:	eb1a 0f05 	cmn.w	sl, r5
 8015404:	f47f af70 	bne.w	80152e8 <_scanf_float+0x64>
 8015408:	6822      	ldr	r2, [r4, #0]
 801540a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801540e:	6022      	str	r2, [r4, #0]
 8015410:	f806 3b01 	strb.w	r3, [r6], #1
 8015414:	e7e4      	b.n	80153e0 <_scanf_float+0x15c>
 8015416:	6822      	ldr	r2, [r4, #0]
 8015418:	0610      	lsls	r0, r2, #24
 801541a:	f57f af65 	bpl.w	80152e8 <_scanf_float+0x64>
 801541e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8015422:	e7f4      	b.n	801540e <_scanf_float+0x18a>
 8015424:	f1ba 0f00 	cmp.w	sl, #0
 8015428:	d10e      	bne.n	8015448 <_scanf_float+0x1c4>
 801542a:	f1b9 0f00 	cmp.w	r9, #0
 801542e:	d10e      	bne.n	801544e <_scanf_float+0x1ca>
 8015430:	6822      	ldr	r2, [r4, #0]
 8015432:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8015436:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801543a:	d108      	bne.n	801544e <_scanf_float+0x1ca>
 801543c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8015440:	f04f 0a01 	mov.w	sl, #1
 8015444:	6022      	str	r2, [r4, #0]
 8015446:	e7e3      	b.n	8015410 <_scanf_float+0x18c>
 8015448:	f1ba 0f02 	cmp.w	sl, #2
 801544c:	d055      	beq.n	80154fa <_scanf_float+0x276>
 801544e:	2d01      	cmp	r5, #1
 8015450:	d002      	beq.n	8015458 <_scanf_float+0x1d4>
 8015452:	2d04      	cmp	r5, #4
 8015454:	f47f af48 	bne.w	80152e8 <_scanf_float+0x64>
 8015458:	3501      	adds	r5, #1
 801545a:	b2ed      	uxtb	r5, r5
 801545c:	e7d8      	b.n	8015410 <_scanf_float+0x18c>
 801545e:	f1ba 0f01 	cmp.w	sl, #1
 8015462:	f47f af41 	bne.w	80152e8 <_scanf_float+0x64>
 8015466:	f04f 0a02 	mov.w	sl, #2
 801546a:	e7d1      	b.n	8015410 <_scanf_float+0x18c>
 801546c:	b97d      	cbnz	r5, 801548e <_scanf_float+0x20a>
 801546e:	f1b9 0f00 	cmp.w	r9, #0
 8015472:	f47f af3c 	bne.w	80152ee <_scanf_float+0x6a>
 8015476:	6822      	ldr	r2, [r4, #0]
 8015478:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801547c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8015480:	f47f af39 	bne.w	80152f6 <_scanf_float+0x72>
 8015484:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8015488:	2501      	movs	r5, #1
 801548a:	6022      	str	r2, [r4, #0]
 801548c:	e7c0      	b.n	8015410 <_scanf_float+0x18c>
 801548e:	2d03      	cmp	r5, #3
 8015490:	d0e2      	beq.n	8015458 <_scanf_float+0x1d4>
 8015492:	2d05      	cmp	r5, #5
 8015494:	e7de      	b.n	8015454 <_scanf_float+0x1d0>
 8015496:	2d02      	cmp	r5, #2
 8015498:	f47f af26 	bne.w	80152e8 <_scanf_float+0x64>
 801549c:	2503      	movs	r5, #3
 801549e:	e7b7      	b.n	8015410 <_scanf_float+0x18c>
 80154a0:	2d06      	cmp	r5, #6
 80154a2:	f47f af21 	bne.w	80152e8 <_scanf_float+0x64>
 80154a6:	2507      	movs	r5, #7
 80154a8:	e7b2      	b.n	8015410 <_scanf_float+0x18c>
 80154aa:	6822      	ldr	r2, [r4, #0]
 80154ac:	0591      	lsls	r1, r2, #22
 80154ae:	f57f af1b 	bpl.w	80152e8 <_scanf_float+0x64>
 80154b2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80154b6:	f8cd 9004 	str.w	r9, [sp, #4]
 80154ba:	6022      	str	r2, [r4, #0]
 80154bc:	e7a8      	b.n	8015410 <_scanf_float+0x18c>
 80154be:	6822      	ldr	r2, [r4, #0]
 80154c0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80154c4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80154c8:	d006      	beq.n	80154d8 <_scanf_float+0x254>
 80154ca:	0550      	lsls	r0, r2, #21
 80154cc:	f57f af0c 	bpl.w	80152e8 <_scanf_float+0x64>
 80154d0:	f1b9 0f00 	cmp.w	r9, #0
 80154d4:	f43f af0f 	beq.w	80152f6 <_scanf_float+0x72>
 80154d8:	0591      	lsls	r1, r2, #22
 80154da:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80154de:	bf58      	it	pl
 80154e0:	9901      	ldrpl	r1, [sp, #4]
 80154e2:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80154e6:	bf58      	it	pl
 80154e8:	eba9 0101 	subpl.w	r1, r9, r1
 80154ec:	6022      	str	r2, [r4, #0]
 80154ee:	f04f 0900 	mov.w	r9, #0
 80154f2:	bf58      	it	pl
 80154f4:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80154f8:	e78a      	b.n	8015410 <_scanf_float+0x18c>
 80154fa:	f04f 0a03 	mov.w	sl, #3
 80154fe:	e787      	b.n	8015410 <_scanf_float+0x18c>
 8015500:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8015504:	4639      	mov	r1, r7
 8015506:	4640      	mov	r0, r8
 8015508:	4798      	blx	r3
 801550a:	2800      	cmp	r0, #0
 801550c:	f43f aedf 	beq.w	80152ce <_scanf_float+0x4a>
 8015510:	e6ea      	b.n	80152e8 <_scanf_float+0x64>
 8015512:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015516:	463a      	mov	r2, r7
 8015518:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801551c:	4640      	mov	r0, r8
 801551e:	4798      	blx	r3
 8015520:	6923      	ldr	r3, [r4, #16]
 8015522:	3b01      	subs	r3, #1
 8015524:	6123      	str	r3, [r4, #16]
 8015526:	e6ec      	b.n	8015302 <_scanf_float+0x7e>
 8015528:	1e6b      	subs	r3, r5, #1
 801552a:	2b06      	cmp	r3, #6
 801552c:	d825      	bhi.n	801557a <_scanf_float+0x2f6>
 801552e:	2d02      	cmp	r5, #2
 8015530:	d836      	bhi.n	80155a0 <_scanf_float+0x31c>
 8015532:	455e      	cmp	r6, fp
 8015534:	f67f aee8 	bls.w	8015308 <_scanf_float+0x84>
 8015538:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801553c:	463a      	mov	r2, r7
 801553e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8015542:	4640      	mov	r0, r8
 8015544:	4798      	blx	r3
 8015546:	6923      	ldr	r3, [r4, #16]
 8015548:	3b01      	subs	r3, #1
 801554a:	6123      	str	r3, [r4, #16]
 801554c:	e7f1      	b.n	8015532 <_scanf_float+0x2ae>
 801554e:	9802      	ldr	r0, [sp, #8]
 8015550:	463a      	mov	r2, r7
 8015552:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015556:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801555a:	9002      	str	r0, [sp, #8]
 801555c:	4640      	mov	r0, r8
 801555e:	4798      	blx	r3
 8015560:	6923      	ldr	r3, [r4, #16]
 8015562:	3b01      	subs	r3, #1
 8015564:	6123      	str	r3, [r4, #16]
 8015566:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801556a:	fa5f fa8a 	uxtb.w	sl, sl
 801556e:	f1ba 0f02 	cmp.w	sl, #2
 8015572:	d1ec      	bne.n	801554e <_scanf_float+0x2ca>
 8015574:	3d03      	subs	r5, #3
 8015576:	b2ed      	uxtb	r5, r5
 8015578:	1b76      	subs	r6, r6, r5
 801557a:	6823      	ldr	r3, [r4, #0]
 801557c:	05da      	lsls	r2, r3, #23
 801557e:	d52e      	bpl.n	80155de <_scanf_float+0x35a>
 8015580:	055b      	lsls	r3, r3, #21
 8015582:	d510      	bpl.n	80155a6 <_scanf_float+0x322>
 8015584:	455e      	cmp	r6, fp
 8015586:	f67f aebf 	bls.w	8015308 <_scanf_float+0x84>
 801558a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801558e:	463a      	mov	r2, r7
 8015590:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8015594:	4640      	mov	r0, r8
 8015596:	4798      	blx	r3
 8015598:	6923      	ldr	r3, [r4, #16]
 801559a:	3b01      	subs	r3, #1
 801559c:	6123      	str	r3, [r4, #16]
 801559e:	e7f1      	b.n	8015584 <_scanf_float+0x300>
 80155a0:	46aa      	mov	sl, r5
 80155a2:	9602      	str	r6, [sp, #8]
 80155a4:	e7df      	b.n	8015566 <_scanf_float+0x2e2>
 80155a6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80155aa:	1e75      	subs	r5, r6, #1
 80155ac:	6923      	ldr	r3, [r4, #16]
 80155ae:	2965      	cmp	r1, #101	; 0x65
 80155b0:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80155b4:	6123      	str	r3, [r4, #16]
 80155b6:	d00c      	beq.n	80155d2 <_scanf_float+0x34e>
 80155b8:	2945      	cmp	r1, #69	; 0x45
 80155ba:	d00a      	beq.n	80155d2 <_scanf_float+0x34e>
 80155bc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80155c0:	463a      	mov	r2, r7
 80155c2:	4640      	mov	r0, r8
 80155c4:	1eb5      	subs	r5, r6, #2
 80155c6:	4798      	blx	r3
 80155c8:	6923      	ldr	r3, [r4, #16]
 80155ca:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80155ce:	3b01      	subs	r3, #1
 80155d0:	6123      	str	r3, [r4, #16]
 80155d2:	462e      	mov	r6, r5
 80155d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80155d8:	463a      	mov	r2, r7
 80155da:	4640      	mov	r0, r8
 80155dc:	4798      	blx	r3
 80155de:	6825      	ldr	r5, [r4, #0]
 80155e0:	f015 0510 	ands.w	r5, r5, #16
 80155e4:	d158      	bne.n	8015698 <_scanf_float+0x414>
 80155e6:	7035      	strb	r5, [r6, #0]
 80155e8:	6823      	ldr	r3, [r4, #0]
 80155ea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80155ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80155f2:	d11c      	bne.n	801562e <_scanf_float+0x3aa>
 80155f4:	9b01      	ldr	r3, [sp, #4]
 80155f6:	454b      	cmp	r3, r9
 80155f8:	eba3 0209 	sub.w	r2, r3, r9
 80155fc:	d124      	bne.n	8015648 <_scanf_float+0x3c4>
 80155fe:	2200      	movs	r2, #0
 8015600:	4659      	mov	r1, fp
 8015602:	4640      	mov	r0, r8
 8015604:	f001 f88c 	bl	8016720 <_strtod_r>
 8015608:	6821      	ldr	r1, [r4, #0]
 801560a:	9b03      	ldr	r3, [sp, #12]
 801560c:	f011 0f02 	tst.w	r1, #2
 8015610:	681b      	ldr	r3, [r3, #0]
 8015612:	ec57 6b10 	vmov	r6, r7, d0
 8015616:	f103 0204 	add.w	r2, r3, #4
 801561a:	d020      	beq.n	801565e <_scanf_float+0x3da>
 801561c:	9903      	ldr	r1, [sp, #12]
 801561e:	600a      	str	r2, [r1, #0]
 8015620:	681b      	ldr	r3, [r3, #0]
 8015622:	e9c3 6700 	strd	r6, r7, [r3]
 8015626:	68e3      	ldr	r3, [r4, #12]
 8015628:	3301      	adds	r3, #1
 801562a:	60e3      	str	r3, [r4, #12]
 801562c:	e66d      	b.n	801530a <_scanf_float+0x86>
 801562e:	9b04      	ldr	r3, [sp, #16]
 8015630:	2b00      	cmp	r3, #0
 8015632:	d0e4      	beq.n	80155fe <_scanf_float+0x37a>
 8015634:	9905      	ldr	r1, [sp, #20]
 8015636:	230a      	movs	r3, #10
 8015638:	462a      	mov	r2, r5
 801563a:	4640      	mov	r0, r8
 801563c:	3101      	adds	r1, #1
 801563e:	f001 f8f7 	bl	8016830 <_strtol_r>
 8015642:	9b04      	ldr	r3, [sp, #16]
 8015644:	9e05      	ldr	r6, [sp, #20]
 8015646:	1ac2      	subs	r2, r0, r3
 8015648:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801564c:	4913      	ldr	r1, [pc, #76]	; (801569c <_scanf_float+0x418>)
 801564e:	429e      	cmp	r6, r3
 8015650:	bf28      	it	cs
 8015652:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8015656:	4630      	mov	r0, r6
 8015658:	f000 f91a 	bl	8015890 <siprintf>
 801565c:	e7cf      	b.n	80155fe <_scanf_float+0x37a>
 801565e:	f011 0f04 	tst.w	r1, #4
 8015662:	9903      	ldr	r1, [sp, #12]
 8015664:	600a      	str	r2, [r1, #0]
 8015666:	d1db      	bne.n	8015620 <_scanf_float+0x39c>
 8015668:	f8d3 8000 	ldr.w	r8, [r3]
 801566c:	ee10 2a10 	vmov	r2, s0
 8015670:	463b      	mov	r3, r7
 8015672:	ee10 0a10 	vmov	r0, s0
 8015676:	4639      	mov	r1, r7
 8015678:	f7eb fa66 	bl	8000b48 <__aeabi_dcmpun>
 801567c:	b128      	cbz	r0, 801568a <_scanf_float+0x406>
 801567e:	4808      	ldr	r0, [pc, #32]	; (80156a0 <_scanf_float+0x41c>)
 8015680:	f001 fb0a 	bl	8016c98 <nanf>
 8015684:	ed88 0a00 	vstr	s0, [r8]
 8015688:	e7cd      	b.n	8015626 <_scanf_float+0x3a2>
 801568a:	4630      	mov	r0, r6
 801568c:	4639      	mov	r1, r7
 801568e:	f7eb fab9 	bl	8000c04 <__aeabi_d2f>
 8015692:	f8c8 0000 	str.w	r0, [r8]
 8015696:	e7c6      	b.n	8015626 <_scanf_float+0x3a2>
 8015698:	2500      	movs	r5, #0
 801569a:	e636      	b.n	801530a <_scanf_float+0x86>
 801569c:	0801ce1a 	.word	0x0801ce1a
 80156a0:	0801d22f 	.word	0x0801d22f

080156a4 <setbuf>:
 80156a4:	fab1 f281 	clz	r2, r1
 80156a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80156ac:	0952      	lsrs	r2, r2, #5
 80156ae:	0052      	lsls	r2, r2, #1
 80156b0:	f000 b800 	b.w	80156b4 <setvbuf>

080156b4 <setvbuf>:
 80156b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80156b8:	461d      	mov	r5, r3
 80156ba:	4b54      	ldr	r3, [pc, #336]	; (801580c <setvbuf+0x158>)
 80156bc:	4604      	mov	r4, r0
 80156be:	460e      	mov	r6, r1
 80156c0:	681f      	ldr	r7, [r3, #0]
 80156c2:	4690      	mov	r8, r2
 80156c4:	b127      	cbz	r7, 80156d0 <setvbuf+0x1c>
 80156c6:	6a3b      	ldr	r3, [r7, #32]
 80156c8:	b913      	cbnz	r3, 80156d0 <setvbuf+0x1c>
 80156ca:	4638      	mov	r0, r7
 80156cc:	f000 f9fe 	bl	8015acc <__sinit>
 80156d0:	f1b8 0f02 	cmp.w	r8, #2
 80156d4:	d006      	beq.n	80156e4 <setvbuf+0x30>
 80156d6:	f1b8 0f01 	cmp.w	r8, #1
 80156da:	f200 8093 	bhi.w	8015804 <setvbuf+0x150>
 80156de:	2d00      	cmp	r5, #0
 80156e0:	f2c0 8090 	blt.w	8015804 <setvbuf+0x150>
 80156e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80156e6:	07da      	lsls	r2, r3, #31
 80156e8:	d405      	bmi.n	80156f6 <setvbuf+0x42>
 80156ea:	89a3      	ldrh	r3, [r4, #12]
 80156ec:	059b      	lsls	r3, r3, #22
 80156ee:	d402      	bmi.n	80156f6 <setvbuf+0x42>
 80156f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80156f2:	f001 faa2 	bl	8016c3a <__retarget_lock_acquire_recursive>
 80156f6:	4621      	mov	r1, r4
 80156f8:	4638      	mov	r0, r7
 80156fa:	f003 fb81 	bl	8018e00 <_fflush_r>
 80156fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015700:	b141      	cbz	r1, 8015714 <setvbuf+0x60>
 8015702:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015706:	4299      	cmp	r1, r3
 8015708:	d002      	beq.n	8015710 <setvbuf+0x5c>
 801570a:	4638      	mov	r0, r7
 801570c:	f002 f94c 	bl	80179a8 <_free_r>
 8015710:	2300      	movs	r3, #0
 8015712:	6363      	str	r3, [r4, #52]	; 0x34
 8015714:	2300      	movs	r3, #0
 8015716:	61a3      	str	r3, [r4, #24]
 8015718:	6063      	str	r3, [r4, #4]
 801571a:	89a3      	ldrh	r3, [r4, #12]
 801571c:	0618      	lsls	r0, r3, #24
 801571e:	d503      	bpl.n	8015728 <setvbuf+0x74>
 8015720:	6921      	ldr	r1, [r4, #16]
 8015722:	4638      	mov	r0, r7
 8015724:	f002 f940 	bl	80179a8 <_free_r>
 8015728:	89a3      	ldrh	r3, [r4, #12]
 801572a:	f1b8 0f02 	cmp.w	r8, #2
 801572e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8015732:	f023 0303 	bic.w	r3, r3, #3
 8015736:	81a3      	strh	r3, [r4, #12]
 8015738:	d05e      	beq.n	80157f8 <setvbuf+0x144>
 801573a:	ab01      	add	r3, sp, #4
 801573c:	466a      	mov	r2, sp
 801573e:	4621      	mov	r1, r4
 8015740:	4638      	mov	r0, r7
 8015742:	f001 f895 	bl	8016870 <__swhatbuf_r>
 8015746:	89a3      	ldrh	r3, [r4, #12]
 8015748:	4318      	orrs	r0, r3
 801574a:	81a0      	strh	r0, [r4, #12]
 801574c:	bb2d      	cbnz	r5, 801579a <setvbuf+0xe6>
 801574e:	9d00      	ldr	r5, [sp, #0]
 8015750:	4628      	mov	r0, r5
 8015752:	f7ff fb55 	bl	8014e00 <malloc>
 8015756:	4606      	mov	r6, r0
 8015758:	2800      	cmp	r0, #0
 801575a:	d14f      	bne.n	80157fc <setvbuf+0x148>
 801575c:	f8dd 9000 	ldr.w	r9, [sp]
 8015760:	45a9      	cmp	r9, r5
 8015762:	d13d      	bne.n	80157e0 <setvbuf+0x12c>
 8015764:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8015768:	2200      	movs	r2, #0
 801576a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801576e:	60a2      	str	r2, [r4, #8]
 8015770:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8015774:	f043 0302 	orr.w	r3, r3, #2
 8015778:	6022      	str	r2, [r4, #0]
 801577a:	6122      	str	r2, [r4, #16]
 801577c:	2201      	movs	r2, #1
 801577e:	81a3      	strh	r3, [r4, #12]
 8015780:	6162      	str	r2, [r4, #20]
 8015782:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015784:	07d1      	lsls	r1, r2, #31
 8015786:	d404      	bmi.n	8015792 <setvbuf+0xde>
 8015788:	059b      	lsls	r3, r3, #22
 801578a:	d402      	bmi.n	8015792 <setvbuf+0xde>
 801578c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801578e:	f001 fa55 	bl	8016c3c <__retarget_lock_release_recursive>
 8015792:	4628      	mov	r0, r5
 8015794:	b003      	add	sp, #12
 8015796:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801579a:	2e00      	cmp	r6, #0
 801579c:	d0d8      	beq.n	8015750 <setvbuf+0x9c>
 801579e:	6a3b      	ldr	r3, [r7, #32]
 80157a0:	b913      	cbnz	r3, 80157a8 <setvbuf+0xf4>
 80157a2:	4638      	mov	r0, r7
 80157a4:	f000 f992 	bl	8015acc <__sinit>
 80157a8:	f1b8 0f01 	cmp.w	r8, #1
 80157ac:	6026      	str	r6, [r4, #0]
 80157ae:	bf02      	ittt	eq
 80157b0:	89a3      	ldrheq	r3, [r4, #12]
 80157b2:	f043 0301 	orreq.w	r3, r3, #1
 80157b6:	81a3      	strheq	r3, [r4, #12]
 80157b8:	89a3      	ldrh	r3, [r4, #12]
 80157ba:	f013 0208 	ands.w	r2, r3, #8
 80157be:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80157c2:	d01d      	beq.n	8015800 <setvbuf+0x14c>
 80157c4:	07da      	lsls	r2, r3, #31
 80157c6:	bf45      	ittet	mi
 80157c8:	2200      	movmi	r2, #0
 80157ca:	426d      	negmi	r5, r5
 80157cc:	60a5      	strpl	r5, [r4, #8]
 80157ce:	60a2      	strmi	r2, [r4, #8]
 80157d0:	bf48      	it	mi
 80157d2:	61a5      	strmi	r5, [r4, #24]
 80157d4:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80157d6:	f015 0501 	ands.w	r5, r5, #1
 80157da:	d0d5      	beq.n	8015788 <setvbuf+0xd4>
 80157dc:	2500      	movs	r5, #0
 80157de:	e7d8      	b.n	8015792 <setvbuf+0xde>
 80157e0:	4648      	mov	r0, r9
 80157e2:	f7ff fb0d 	bl	8014e00 <malloc>
 80157e6:	4606      	mov	r6, r0
 80157e8:	2800      	cmp	r0, #0
 80157ea:	d0bb      	beq.n	8015764 <setvbuf+0xb0>
 80157ec:	89a3      	ldrh	r3, [r4, #12]
 80157ee:	464d      	mov	r5, r9
 80157f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80157f4:	81a3      	strh	r3, [r4, #12]
 80157f6:	e7d2      	b.n	801579e <setvbuf+0xea>
 80157f8:	2500      	movs	r5, #0
 80157fa:	e7b5      	b.n	8015768 <setvbuf+0xb4>
 80157fc:	46a9      	mov	r9, r5
 80157fe:	e7f5      	b.n	80157ec <setvbuf+0x138>
 8015800:	60a2      	str	r2, [r4, #8]
 8015802:	e7e7      	b.n	80157d4 <setvbuf+0x120>
 8015804:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8015808:	e7c3      	b.n	8015792 <setvbuf+0xde>
 801580a:	bf00      	nop
 801580c:	200002c4 	.word	0x200002c4

08015810 <sniprintf>:
 8015810:	b40c      	push	{r2, r3}
 8015812:	4b18      	ldr	r3, [pc, #96]	; (8015874 <sniprintf+0x64>)
 8015814:	b530      	push	{r4, r5, lr}
 8015816:	1e0c      	subs	r4, r1, #0
 8015818:	b09d      	sub	sp, #116	; 0x74
 801581a:	681d      	ldr	r5, [r3, #0]
 801581c:	da08      	bge.n	8015830 <sniprintf+0x20>
 801581e:	238b      	movs	r3, #139	; 0x8b
 8015820:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015824:	602b      	str	r3, [r5, #0]
 8015826:	b01d      	add	sp, #116	; 0x74
 8015828:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801582c:	b002      	add	sp, #8
 801582e:	4770      	bx	lr
 8015830:	f44f 7302 	mov.w	r3, #520	; 0x208
 8015834:	9002      	str	r0, [sp, #8]
 8015836:	9006      	str	r0, [sp, #24]
 8015838:	a902      	add	r1, sp, #8
 801583a:	f8ad 3014 	strh.w	r3, [sp, #20]
 801583e:	bf14      	ite	ne
 8015840:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8015844:	4623      	moveq	r3, r4
 8015846:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8015848:	4628      	mov	r0, r5
 801584a:	9304      	str	r3, [sp, #16]
 801584c:	9307      	str	r3, [sp, #28]
 801584e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015852:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015856:	ab21      	add	r3, sp, #132	; 0x84
 8015858:	9301      	str	r3, [sp, #4]
 801585a:	f002 fca1 	bl	80181a0 <_svfiprintf_r>
 801585e:	1c43      	adds	r3, r0, #1
 8015860:	bfbc      	itt	lt
 8015862:	238b      	movlt	r3, #139	; 0x8b
 8015864:	602b      	strlt	r3, [r5, #0]
 8015866:	2c00      	cmp	r4, #0
 8015868:	d0dd      	beq.n	8015826 <sniprintf+0x16>
 801586a:	9b02      	ldr	r3, [sp, #8]
 801586c:	2200      	movs	r2, #0
 801586e:	701a      	strb	r2, [r3, #0]
 8015870:	e7d9      	b.n	8015826 <sniprintf+0x16>
 8015872:	bf00      	nop
 8015874:	200002c4 	.word	0x200002c4

08015878 <__malloc_lock>:
 8015878:	4801      	ldr	r0, [pc, #4]	; (8015880 <__malloc_lock+0x8>)
 801587a:	f001 b9de 	b.w	8016c3a <__retarget_lock_acquire_recursive>
 801587e:	bf00      	nop
 8015880:	20003490 	.word	0x20003490

08015884 <__malloc_unlock>:
 8015884:	4801      	ldr	r0, [pc, #4]	; (801588c <__malloc_unlock+0x8>)
 8015886:	f001 b9d9 	b.w	8016c3c <__retarget_lock_release_recursive>
 801588a:	bf00      	nop
 801588c:	20003490 	.word	0x20003490

08015890 <siprintf>:
 8015890:	b40e      	push	{r1, r2, r3}
 8015892:	b500      	push	{lr}
 8015894:	b09c      	sub	sp, #112	; 0x70
 8015896:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801589a:	ab1d      	add	r3, sp, #116	; 0x74
 801589c:	9002      	str	r0, [sp, #8]
 801589e:	9006      	str	r0, [sp, #24]
 80158a0:	9107      	str	r1, [sp, #28]
 80158a2:	9104      	str	r1, [sp, #16]
 80158a4:	4808      	ldr	r0, [pc, #32]	; (80158c8 <siprintf+0x38>)
 80158a6:	4909      	ldr	r1, [pc, #36]	; (80158cc <siprintf+0x3c>)
 80158a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80158ac:	9105      	str	r1, [sp, #20]
 80158ae:	a902      	add	r1, sp, #8
 80158b0:	6800      	ldr	r0, [r0, #0]
 80158b2:	9301      	str	r3, [sp, #4]
 80158b4:	f002 fc74 	bl	80181a0 <_svfiprintf_r>
 80158b8:	9b02      	ldr	r3, [sp, #8]
 80158ba:	2200      	movs	r2, #0
 80158bc:	701a      	strb	r2, [r3, #0]
 80158be:	b01c      	add	sp, #112	; 0x70
 80158c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80158c4:	b003      	add	sp, #12
 80158c6:	4770      	bx	lr
 80158c8:	200002c4 	.word	0x200002c4
 80158cc:	ffff0208 	.word	0xffff0208

080158d0 <siscanf>:
 80158d0:	b40e      	push	{r1, r2, r3}
 80158d2:	b510      	push	{r4, lr}
 80158d4:	b09f      	sub	sp, #124	; 0x7c
 80158d6:	f44f 7101 	mov.w	r1, #516	; 0x204
 80158da:	ac21      	add	r4, sp, #132	; 0x84
 80158dc:	f8ad 101c 	strh.w	r1, [sp, #28]
 80158e0:	9004      	str	r0, [sp, #16]
 80158e2:	f854 2b04 	ldr.w	r2, [r4], #4
 80158e6:	9008      	str	r0, [sp, #32]
 80158e8:	9201      	str	r2, [sp, #4]
 80158ea:	f7ea fcc5 	bl	8000278 <strlen>
 80158ee:	4b0c      	ldr	r3, [pc, #48]	; (8015920 <siscanf+0x50>)
 80158f0:	a904      	add	r1, sp, #16
 80158f2:	9005      	str	r0, [sp, #20]
 80158f4:	930d      	str	r3, [sp, #52]	; 0x34
 80158f6:	2300      	movs	r3, #0
 80158f8:	9009      	str	r0, [sp, #36]	; 0x24
 80158fa:	9311      	str	r3, [sp, #68]	; 0x44
 80158fc:	9316      	str	r3, [sp, #88]	; 0x58
 80158fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015902:	4808      	ldr	r0, [pc, #32]	; (8015924 <siscanf+0x54>)
 8015904:	f8ad 301e 	strh.w	r3, [sp, #30]
 8015908:	4623      	mov	r3, r4
 801590a:	9a01      	ldr	r2, [sp, #4]
 801590c:	6800      	ldr	r0, [r0, #0]
 801590e:	9403      	str	r4, [sp, #12]
 8015910:	f002 fd9e 	bl	8018450 <__ssvfiscanf_r>
 8015914:	b01f      	add	sp, #124	; 0x7c
 8015916:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801591a:	b003      	add	sp, #12
 801591c:	4770      	bx	lr
 801591e:	bf00      	nop
 8015920:	0801594b 	.word	0x0801594b
 8015924:	200002c4 	.word	0x200002c4

08015928 <__sread>:
 8015928:	b510      	push	{r4, lr}
 801592a:	460c      	mov	r4, r1
 801592c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015930:	f001 f924 	bl	8016b7c <_read_r>
 8015934:	2800      	cmp	r0, #0
 8015936:	bfab      	itete	ge
 8015938:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801593a:	89a3      	ldrhlt	r3, [r4, #12]
 801593c:	181b      	addge	r3, r3, r0
 801593e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8015942:	bfac      	ite	ge
 8015944:	6563      	strge	r3, [r4, #84]	; 0x54
 8015946:	81a3      	strhlt	r3, [r4, #12]
 8015948:	bd10      	pop	{r4, pc}

0801594a <__seofread>:
 801594a:	2000      	movs	r0, #0
 801594c:	4770      	bx	lr

0801594e <__swrite>:
 801594e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015952:	461f      	mov	r7, r3
 8015954:	898b      	ldrh	r3, [r1, #12]
 8015956:	4605      	mov	r5, r0
 8015958:	460c      	mov	r4, r1
 801595a:	05db      	lsls	r3, r3, #23
 801595c:	4616      	mov	r6, r2
 801595e:	d505      	bpl.n	801596c <__swrite+0x1e>
 8015960:	2302      	movs	r3, #2
 8015962:	2200      	movs	r2, #0
 8015964:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015968:	f001 f8f6 	bl	8016b58 <_lseek_r>
 801596c:	89a3      	ldrh	r3, [r4, #12]
 801596e:	4632      	mov	r2, r6
 8015970:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015974:	4628      	mov	r0, r5
 8015976:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801597a:	81a3      	strh	r3, [r4, #12]
 801597c:	463b      	mov	r3, r7
 801597e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015982:	f001 b91d 	b.w	8016bc0 <_write_r>

08015986 <__sseek>:
 8015986:	b510      	push	{r4, lr}
 8015988:	460c      	mov	r4, r1
 801598a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801598e:	f001 f8e3 	bl	8016b58 <_lseek_r>
 8015992:	1c43      	adds	r3, r0, #1
 8015994:	89a3      	ldrh	r3, [r4, #12]
 8015996:	bf15      	itete	ne
 8015998:	6560      	strne	r0, [r4, #84]	; 0x54
 801599a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801599e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80159a2:	81a3      	strheq	r3, [r4, #12]
 80159a4:	bf18      	it	ne
 80159a6:	81a3      	strhne	r3, [r4, #12]
 80159a8:	bd10      	pop	{r4, pc}

080159aa <__sclose>:
 80159aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80159ae:	f001 b8a1 	b.w	8016af4 <_close_r>
	...

080159b4 <std>:
 80159b4:	2300      	movs	r3, #0
 80159b6:	b510      	push	{r4, lr}
 80159b8:	4604      	mov	r4, r0
 80159ba:	6083      	str	r3, [r0, #8]
 80159bc:	8181      	strh	r1, [r0, #12]
 80159be:	4619      	mov	r1, r3
 80159c0:	6643      	str	r3, [r0, #100]	; 0x64
 80159c2:	81c2      	strh	r2, [r0, #14]
 80159c4:	2208      	movs	r2, #8
 80159c6:	6183      	str	r3, [r0, #24]
 80159c8:	e9c0 3300 	strd	r3, r3, [r0]
 80159cc:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80159d0:	305c      	adds	r0, #92	; 0x5c
 80159d2:	f001 f883 	bl	8016adc <memset>
 80159d6:	4b0d      	ldr	r3, [pc, #52]	; (8015a0c <std+0x58>)
 80159d8:	6224      	str	r4, [r4, #32]
 80159da:	6263      	str	r3, [r4, #36]	; 0x24
 80159dc:	4b0c      	ldr	r3, [pc, #48]	; (8015a10 <std+0x5c>)
 80159de:	62a3      	str	r3, [r4, #40]	; 0x28
 80159e0:	4b0c      	ldr	r3, [pc, #48]	; (8015a14 <std+0x60>)
 80159e2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80159e4:	4b0c      	ldr	r3, [pc, #48]	; (8015a18 <std+0x64>)
 80159e6:	6323      	str	r3, [r4, #48]	; 0x30
 80159e8:	4b0c      	ldr	r3, [pc, #48]	; (8015a1c <std+0x68>)
 80159ea:	429c      	cmp	r4, r3
 80159ec:	d006      	beq.n	80159fc <std+0x48>
 80159ee:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80159f2:	4294      	cmp	r4, r2
 80159f4:	d002      	beq.n	80159fc <std+0x48>
 80159f6:	33d0      	adds	r3, #208	; 0xd0
 80159f8:	429c      	cmp	r4, r3
 80159fa:	d105      	bne.n	8015a08 <std+0x54>
 80159fc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8015a00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015a04:	f001 b918 	b.w	8016c38 <__retarget_lock_init_recursive>
 8015a08:	bd10      	pop	{r4, pc}
 8015a0a:	bf00      	nop
 8015a0c:	08015929 	.word	0x08015929
 8015a10:	0801594f 	.word	0x0801594f
 8015a14:	08015987 	.word	0x08015987
 8015a18:	080159ab 	.word	0x080159ab
 8015a1c:	20003350 	.word	0x20003350

08015a20 <stdio_exit_handler>:
 8015a20:	4a02      	ldr	r2, [pc, #8]	; (8015a2c <stdio_exit_handler+0xc>)
 8015a22:	4903      	ldr	r1, [pc, #12]	; (8015a30 <stdio_exit_handler+0x10>)
 8015a24:	4803      	ldr	r0, [pc, #12]	; (8015a34 <stdio_exit_handler+0x14>)
 8015a26:	f000 bf05 	b.w	8016834 <_fwalk_sglue>
 8015a2a:	bf00      	nop
 8015a2c:	20000100 	.word	0x20000100
 8015a30:	08018e01 	.word	0x08018e01
 8015a34:	20000278 	.word	0x20000278

08015a38 <cleanup_stdio>:
 8015a38:	6841      	ldr	r1, [r0, #4]
 8015a3a:	4b0c      	ldr	r3, [pc, #48]	; (8015a6c <cleanup_stdio+0x34>)
 8015a3c:	4299      	cmp	r1, r3
 8015a3e:	b510      	push	{r4, lr}
 8015a40:	4604      	mov	r4, r0
 8015a42:	d001      	beq.n	8015a48 <cleanup_stdio+0x10>
 8015a44:	f003 f9dc 	bl	8018e00 <_fflush_r>
 8015a48:	68a1      	ldr	r1, [r4, #8]
 8015a4a:	4b09      	ldr	r3, [pc, #36]	; (8015a70 <cleanup_stdio+0x38>)
 8015a4c:	4299      	cmp	r1, r3
 8015a4e:	d002      	beq.n	8015a56 <cleanup_stdio+0x1e>
 8015a50:	4620      	mov	r0, r4
 8015a52:	f003 f9d5 	bl	8018e00 <_fflush_r>
 8015a56:	68e1      	ldr	r1, [r4, #12]
 8015a58:	4b06      	ldr	r3, [pc, #24]	; (8015a74 <cleanup_stdio+0x3c>)
 8015a5a:	4299      	cmp	r1, r3
 8015a5c:	d004      	beq.n	8015a68 <cleanup_stdio+0x30>
 8015a5e:	4620      	mov	r0, r4
 8015a60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015a64:	f003 b9cc 	b.w	8018e00 <_fflush_r>
 8015a68:	bd10      	pop	{r4, pc}
 8015a6a:	bf00      	nop
 8015a6c:	20003350 	.word	0x20003350
 8015a70:	200033b8 	.word	0x200033b8
 8015a74:	20003420 	.word	0x20003420

08015a78 <global_stdio_init.part.0>:
 8015a78:	b510      	push	{r4, lr}
 8015a7a:	4b0b      	ldr	r3, [pc, #44]	; (8015aa8 <global_stdio_init.part.0+0x30>)
 8015a7c:	2104      	movs	r1, #4
 8015a7e:	4c0b      	ldr	r4, [pc, #44]	; (8015aac <global_stdio_init.part.0+0x34>)
 8015a80:	4a0b      	ldr	r2, [pc, #44]	; (8015ab0 <global_stdio_init.part.0+0x38>)
 8015a82:	4620      	mov	r0, r4
 8015a84:	601a      	str	r2, [r3, #0]
 8015a86:	2200      	movs	r2, #0
 8015a88:	f7ff ff94 	bl	80159b4 <std>
 8015a8c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8015a90:	2201      	movs	r2, #1
 8015a92:	2109      	movs	r1, #9
 8015a94:	f7ff ff8e 	bl	80159b4 <std>
 8015a98:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8015a9c:	2202      	movs	r2, #2
 8015a9e:	2112      	movs	r1, #18
 8015aa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015aa4:	f7ff bf86 	b.w	80159b4 <std>
 8015aa8:	20003488 	.word	0x20003488
 8015aac:	20003350 	.word	0x20003350
 8015ab0:	08015a21 	.word	0x08015a21

08015ab4 <__sfp_lock_acquire>:
 8015ab4:	4801      	ldr	r0, [pc, #4]	; (8015abc <__sfp_lock_acquire+0x8>)
 8015ab6:	f001 b8c0 	b.w	8016c3a <__retarget_lock_acquire_recursive>
 8015aba:	bf00      	nop
 8015abc:	20003491 	.word	0x20003491

08015ac0 <__sfp_lock_release>:
 8015ac0:	4801      	ldr	r0, [pc, #4]	; (8015ac8 <__sfp_lock_release+0x8>)
 8015ac2:	f001 b8bb 	b.w	8016c3c <__retarget_lock_release_recursive>
 8015ac6:	bf00      	nop
 8015ac8:	20003491 	.word	0x20003491

08015acc <__sinit>:
 8015acc:	b510      	push	{r4, lr}
 8015ace:	4604      	mov	r4, r0
 8015ad0:	f7ff fff0 	bl	8015ab4 <__sfp_lock_acquire>
 8015ad4:	6a23      	ldr	r3, [r4, #32]
 8015ad6:	b11b      	cbz	r3, 8015ae0 <__sinit+0x14>
 8015ad8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015adc:	f7ff bff0 	b.w	8015ac0 <__sfp_lock_release>
 8015ae0:	4b04      	ldr	r3, [pc, #16]	; (8015af4 <__sinit+0x28>)
 8015ae2:	6223      	str	r3, [r4, #32]
 8015ae4:	4b04      	ldr	r3, [pc, #16]	; (8015af8 <__sinit+0x2c>)
 8015ae6:	681b      	ldr	r3, [r3, #0]
 8015ae8:	2b00      	cmp	r3, #0
 8015aea:	d1f5      	bne.n	8015ad8 <__sinit+0xc>
 8015aec:	f7ff ffc4 	bl	8015a78 <global_stdio_init.part.0>
 8015af0:	e7f2      	b.n	8015ad8 <__sinit+0xc>
 8015af2:	bf00      	nop
 8015af4:	08015a39 	.word	0x08015a39
 8015af8:	20003488 	.word	0x20003488

08015afc <sulp>:
 8015afc:	b570      	push	{r4, r5, r6, lr}
 8015afe:	4604      	mov	r4, r0
 8015b00:	460d      	mov	r5, r1
 8015b02:	4616      	mov	r6, r2
 8015b04:	ec45 4b10 	vmov	d0, r4, r5
 8015b08:	f003 fd16 	bl	8019538 <__ulp>
 8015b0c:	ec51 0b10 	vmov	r0, r1, d0
 8015b10:	b17e      	cbz	r6, 8015b32 <sulp+0x36>
 8015b12:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8015b16:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8015b1a:	2b00      	cmp	r3, #0
 8015b1c:	dd09      	ble.n	8015b32 <sulp+0x36>
 8015b1e:	051b      	lsls	r3, r3, #20
 8015b20:	2400      	movs	r4, #0
 8015b22:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8015b26:	4622      	mov	r2, r4
 8015b28:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8015b2c:	462b      	mov	r3, r5
 8015b2e:	f7ea fd71 	bl	8000614 <__aeabi_dmul>
 8015b32:	bd70      	pop	{r4, r5, r6, pc}
 8015b34:	0000      	movs	r0, r0
	...

08015b38 <_strtod_l>:
 8015b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b3c:	ed2d 8b02 	vpush	{d8}
 8015b40:	b09b      	sub	sp, #108	; 0x6c
 8015b42:	4604      	mov	r4, r0
 8015b44:	460d      	mov	r5, r1
 8015b46:	f04f 0800 	mov.w	r8, #0
 8015b4a:	9213      	str	r2, [sp, #76]	; 0x4c
 8015b4c:	2200      	movs	r2, #0
 8015b4e:	f04f 0900 	mov.w	r9, #0
 8015b52:	9216      	str	r2, [sp, #88]	; 0x58
 8015b54:	460a      	mov	r2, r1
 8015b56:	9215      	str	r2, [sp, #84]	; 0x54
 8015b58:	7811      	ldrb	r1, [r2, #0]
 8015b5a:	292b      	cmp	r1, #43	; 0x2b
 8015b5c:	d04c      	beq.n	8015bf8 <_strtod_l+0xc0>
 8015b5e:	d83a      	bhi.n	8015bd6 <_strtod_l+0x9e>
 8015b60:	290d      	cmp	r1, #13
 8015b62:	d834      	bhi.n	8015bce <_strtod_l+0x96>
 8015b64:	2908      	cmp	r1, #8
 8015b66:	d834      	bhi.n	8015bd2 <_strtod_l+0x9a>
 8015b68:	2900      	cmp	r1, #0
 8015b6a:	d03d      	beq.n	8015be8 <_strtod_l+0xb0>
 8015b6c:	2200      	movs	r2, #0
 8015b6e:	920a      	str	r2, [sp, #40]	; 0x28
 8015b70:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8015b72:	7832      	ldrb	r2, [r6, #0]
 8015b74:	2a30      	cmp	r2, #48	; 0x30
 8015b76:	f040 80b4 	bne.w	8015ce2 <_strtod_l+0x1aa>
 8015b7a:	7872      	ldrb	r2, [r6, #1]
 8015b7c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8015b80:	2a58      	cmp	r2, #88	; 0x58
 8015b82:	d170      	bne.n	8015c66 <_strtod_l+0x12e>
 8015b84:	9302      	str	r3, [sp, #8]
 8015b86:	a915      	add	r1, sp, #84	; 0x54
 8015b88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015b8a:	4620      	mov	r0, r4
 8015b8c:	4a8e      	ldr	r2, [pc, #568]	; (8015dc8 <_strtod_l+0x290>)
 8015b8e:	9301      	str	r3, [sp, #4]
 8015b90:	ab16      	add	r3, sp, #88	; 0x58
 8015b92:	9300      	str	r3, [sp, #0]
 8015b94:	ab17      	add	r3, sp, #92	; 0x5c
 8015b96:	f001 ffb9 	bl	8017b0c <__gethex>
 8015b9a:	f010 070f 	ands.w	r7, r0, #15
 8015b9e:	4605      	mov	r5, r0
 8015ba0:	d005      	beq.n	8015bae <_strtod_l+0x76>
 8015ba2:	2f06      	cmp	r7, #6
 8015ba4:	d12a      	bne.n	8015bfc <_strtod_l+0xc4>
 8015ba6:	3601      	adds	r6, #1
 8015ba8:	2300      	movs	r3, #0
 8015baa:	9615      	str	r6, [sp, #84]	; 0x54
 8015bac:	930a      	str	r3, [sp, #40]	; 0x28
 8015bae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015bb0:	2b00      	cmp	r3, #0
 8015bb2:	f040 8581 	bne.w	80166b8 <_strtod_l+0xb80>
 8015bb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015bb8:	b1db      	cbz	r3, 8015bf2 <_strtod_l+0xba>
 8015bba:	4642      	mov	r2, r8
 8015bbc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8015bc0:	ec43 2b10 	vmov	d0, r2, r3
 8015bc4:	b01b      	add	sp, #108	; 0x6c
 8015bc6:	ecbd 8b02 	vpop	{d8}
 8015bca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015bce:	2920      	cmp	r1, #32
 8015bd0:	d1cc      	bne.n	8015b6c <_strtod_l+0x34>
 8015bd2:	3201      	adds	r2, #1
 8015bd4:	e7bf      	b.n	8015b56 <_strtod_l+0x1e>
 8015bd6:	292d      	cmp	r1, #45	; 0x2d
 8015bd8:	d1c8      	bne.n	8015b6c <_strtod_l+0x34>
 8015bda:	2101      	movs	r1, #1
 8015bdc:	910a      	str	r1, [sp, #40]	; 0x28
 8015bde:	1c51      	adds	r1, r2, #1
 8015be0:	9115      	str	r1, [sp, #84]	; 0x54
 8015be2:	7852      	ldrb	r2, [r2, #1]
 8015be4:	2a00      	cmp	r2, #0
 8015be6:	d1c3      	bne.n	8015b70 <_strtod_l+0x38>
 8015be8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015bea:	9515      	str	r5, [sp, #84]	; 0x54
 8015bec:	2b00      	cmp	r3, #0
 8015bee:	f040 8561 	bne.w	80166b4 <_strtod_l+0xb7c>
 8015bf2:	4642      	mov	r2, r8
 8015bf4:	464b      	mov	r3, r9
 8015bf6:	e7e3      	b.n	8015bc0 <_strtod_l+0x88>
 8015bf8:	2100      	movs	r1, #0
 8015bfa:	e7ef      	b.n	8015bdc <_strtod_l+0xa4>
 8015bfc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8015bfe:	b13a      	cbz	r2, 8015c10 <_strtod_l+0xd8>
 8015c00:	2135      	movs	r1, #53	; 0x35
 8015c02:	a818      	add	r0, sp, #96	; 0x60
 8015c04:	f003 fd99 	bl	801973a <__copybits>
 8015c08:	9916      	ldr	r1, [sp, #88]	; 0x58
 8015c0a:	4620      	mov	r0, r4
 8015c0c:	f003 f960 	bl	8018ed0 <_Bfree>
 8015c10:	3f01      	subs	r7, #1
 8015c12:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8015c14:	2f04      	cmp	r7, #4
 8015c16:	d806      	bhi.n	8015c26 <_strtod_l+0xee>
 8015c18:	e8df f007 	tbb	[pc, r7]
 8015c1c:	201d0314 	.word	0x201d0314
 8015c20:	14          	.byte	0x14
 8015c21:	00          	.byte	0x00
 8015c22:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8015c26:	05e9      	lsls	r1, r5, #23
 8015c28:	bf48      	it	mi
 8015c2a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8015c2e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8015c32:	0d1b      	lsrs	r3, r3, #20
 8015c34:	051b      	lsls	r3, r3, #20
 8015c36:	2b00      	cmp	r3, #0
 8015c38:	d1b9      	bne.n	8015bae <_strtod_l+0x76>
 8015c3a:	f000 ffd3 	bl	8016be4 <__errno>
 8015c3e:	2322      	movs	r3, #34	; 0x22
 8015c40:	6003      	str	r3, [r0, #0]
 8015c42:	e7b4      	b.n	8015bae <_strtod_l+0x76>
 8015c44:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8015c48:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8015c4c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8015c50:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8015c54:	e7e7      	b.n	8015c26 <_strtod_l+0xee>
 8015c56:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8015dd0 <_strtod_l+0x298>
 8015c5a:	e7e4      	b.n	8015c26 <_strtod_l+0xee>
 8015c5c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8015c60:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8015c64:	e7df      	b.n	8015c26 <_strtod_l+0xee>
 8015c66:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015c68:	1c5a      	adds	r2, r3, #1
 8015c6a:	9215      	str	r2, [sp, #84]	; 0x54
 8015c6c:	785b      	ldrb	r3, [r3, #1]
 8015c6e:	2b30      	cmp	r3, #48	; 0x30
 8015c70:	d0f9      	beq.n	8015c66 <_strtod_l+0x12e>
 8015c72:	2b00      	cmp	r3, #0
 8015c74:	d09b      	beq.n	8015bae <_strtod_l+0x76>
 8015c76:	2301      	movs	r3, #1
 8015c78:	f04f 0a00 	mov.w	sl, #0
 8015c7c:	9304      	str	r3, [sp, #16]
 8015c7e:	220a      	movs	r2, #10
 8015c80:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015c82:	46d3      	mov	fp, sl
 8015c84:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8015c88:	930b      	str	r3, [sp, #44]	; 0x2c
 8015c8a:	9815      	ldr	r0, [sp, #84]	; 0x54
 8015c8c:	7806      	ldrb	r6, [r0, #0]
 8015c8e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8015c92:	b2d9      	uxtb	r1, r3
 8015c94:	2909      	cmp	r1, #9
 8015c96:	d926      	bls.n	8015ce6 <_strtod_l+0x1ae>
 8015c98:	2201      	movs	r2, #1
 8015c9a:	494c      	ldr	r1, [pc, #304]	; (8015dcc <_strtod_l+0x294>)
 8015c9c:	f000 fecf 	bl	8016a3e <strncmp>
 8015ca0:	2800      	cmp	r0, #0
 8015ca2:	d030      	beq.n	8015d06 <_strtod_l+0x1ce>
 8015ca4:	2000      	movs	r0, #0
 8015ca6:	4632      	mov	r2, r6
 8015ca8:	465e      	mov	r6, fp
 8015caa:	4603      	mov	r3, r0
 8015cac:	9005      	str	r0, [sp, #20]
 8015cae:	2a65      	cmp	r2, #101	; 0x65
 8015cb0:	d001      	beq.n	8015cb6 <_strtod_l+0x17e>
 8015cb2:	2a45      	cmp	r2, #69	; 0x45
 8015cb4:	d113      	bne.n	8015cde <_strtod_l+0x1a6>
 8015cb6:	b91e      	cbnz	r6, 8015cc0 <_strtod_l+0x188>
 8015cb8:	9a04      	ldr	r2, [sp, #16]
 8015cba:	4302      	orrs	r2, r0
 8015cbc:	d094      	beq.n	8015be8 <_strtod_l+0xb0>
 8015cbe:	2600      	movs	r6, #0
 8015cc0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8015cc2:	1c6a      	adds	r2, r5, #1
 8015cc4:	9215      	str	r2, [sp, #84]	; 0x54
 8015cc6:	786a      	ldrb	r2, [r5, #1]
 8015cc8:	2a2b      	cmp	r2, #43	; 0x2b
 8015cca:	d073      	beq.n	8015db4 <_strtod_l+0x27c>
 8015ccc:	2a2d      	cmp	r2, #45	; 0x2d
 8015cce:	d077      	beq.n	8015dc0 <_strtod_l+0x288>
 8015cd0:	f04f 0c00 	mov.w	ip, #0
 8015cd4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8015cd8:	2909      	cmp	r1, #9
 8015cda:	d97f      	bls.n	8015ddc <_strtod_l+0x2a4>
 8015cdc:	9515      	str	r5, [sp, #84]	; 0x54
 8015cde:	2700      	movs	r7, #0
 8015ce0:	e09e      	b.n	8015e20 <_strtod_l+0x2e8>
 8015ce2:	2300      	movs	r3, #0
 8015ce4:	e7c8      	b.n	8015c78 <_strtod_l+0x140>
 8015ce6:	f1bb 0f08 	cmp.w	fp, #8
 8015cea:	f100 0001 	add.w	r0, r0, #1
 8015cee:	f10b 0b01 	add.w	fp, fp, #1
 8015cf2:	bfd4      	ite	le
 8015cf4:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8015cf6:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8015cfa:	9015      	str	r0, [sp, #84]	; 0x54
 8015cfc:	bfdc      	itt	le
 8015cfe:	fb02 3301 	mlale	r3, r2, r1, r3
 8015d02:	9309      	strle	r3, [sp, #36]	; 0x24
 8015d04:	e7c1      	b.n	8015c8a <_strtod_l+0x152>
 8015d06:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015d08:	1c5a      	adds	r2, r3, #1
 8015d0a:	9215      	str	r2, [sp, #84]	; 0x54
 8015d0c:	785a      	ldrb	r2, [r3, #1]
 8015d0e:	f1bb 0f00 	cmp.w	fp, #0
 8015d12:	d036      	beq.n	8015d82 <_strtod_l+0x24a>
 8015d14:	465e      	mov	r6, fp
 8015d16:	9005      	str	r0, [sp, #20]
 8015d18:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8015d1c:	2b09      	cmp	r3, #9
 8015d1e:	d912      	bls.n	8015d46 <_strtod_l+0x20e>
 8015d20:	2301      	movs	r3, #1
 8015d22:	e7c4      	b.n	8015cae <_strtod_l+0x176>
 8015d24:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015d26:	3001      	adds	r0, #1
 8015d28:	1c5a      	adds	r2, r3, #1
 8015d2a:	9215      	str	r2, [sp, #84]	; 0x54
 8015d2c:	785a      	ldrb	r2, [r3, #1]
 8015d2e:	2a30      	cmp	r2, #48	; 0x30
 8015d30:	d0f8      	beq.n	8015d24 <_strtod_l+0x1ec>
 8015d32:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8015d36:	2b08      	cmp	r3, #8
 8015d38:	f200 84c3 	bhi.w	80166c2 <_strtod_l+0xb8a>
 8015d3c:	9005      	str	r0, [sp, #20]
 8015d3e:	2000      	movs	r0, #0
 8015d40:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015d42:	4606      	mov	r6, r0
 8015d44:	930b      	str	r3, [sp, #44]	; 0x2c
 8015d46:	3a30      	subs	r2, #48	; 0x30
 8015d48:	f100 0301 	add.w	r3, r0, #1
 8015d4c:	d013      	beq.n	8015d76 <_strtod_l+0x23e>
 8015d4e:	9905      	ldr	r1, [sp, #20]
 8015d50:	eb00 0c06 	add.w	ip, r0, r6
 8015d54:	4419      	add	r1, r3
 8015d56:	4633      	mov	r3, r6
 8015d58:	9105      	str	r1, [sp, #20]
 8015d5a:	210a      	movs	r1, #10
 8015d5c:	4563      	cmp	r3, ip
 8015d5e:	d112      	bne.n	8015d86 <_strtod_l+0x24e>
 8015d60:	1833      	adds	r3, r6, r0
 8015d62:	3601      	adds	r6, #1
 8015d64:	2b08      	cmp	r3, #8
 8015d66:	4406      	add	r6, r0
 8015d68:	dc1a      	bgt.n	8015da0 <_strtod_l+0x268>
 8015d6a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015d6c:	230a      	movs	r3, #10
 8015d6e:	fb03 2301 	mla	r3, r3, r1, r2
 8015d72:	9309      	str	r3, [sp, #36]	; 0x24
 8015d74:	2300      	movs	r3, #0
 8015d76:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8015d78:	4618      	mov	r0, r3
 8015d7a:	1c51      	adds	r1, r2, #1
 8015d7c:	9115      	str	r1, [sp, #84]	; 0x54
 8015d7e:	7852      	ldrb	r2, [r2, #1]
 8015d80:	e7ca      	b.n	8015d18 <_strtod_l+0x1e0>
 8015d82:	4658      	mov	r0, fp
 8015d84:	e7d3      	b.n	8015d2e <_strtod_l+0x1f6>
 8015d86:	2b08      	cmp	r3, #8
 8015d88:	f103 0301 	add.w	r3, r3, #1
 8015d8c:	dc03      	bgt.n	8015d96 <_strtod_l+0x25e>
 8015d8e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8015d90:	434f      	muls	r7, r1
 8015d92:	9709      	str	r7, [sp, #36]	; 0x24
 8015d94:	e7e2      	b.n	8015d5c <_strtod_l+0x224>
 8015d96:	2b10      	cmp	r3, #16
 8015d98:	bfd8      	it	le
 8015d9a:	fb01 fa0a 	mulle.w	sl, r1, sl
 8015d9e:	e7dd      	b.n	8015d5c <_strtod_l+0x224>
 8015da0:	2e10      	cmp	r6, #16
 8015da2:	bfdc      	itt	le
 8015da4:	230a      	movle	r3, #10
 8015da6:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8015daa:	e7e3      	b.n	8015d74 <_strtod_l+0x23c>
 8015dac:	2300      	movs	r3, #0
 8015dae:	9305      	str	r3, [sp, #20]
 8015db0:	2301      	movs	r3, #1
 8015db2:	e781      	b.n	8015cb8 <_strtod_l+0x180>
 8015db4:	f04f 0c00 	mov.w	ip, #0
 8015db8:	1caa      	adds	r2, r5, #2
 8015dba:	9215      	str	r2, [sp, #84]	; 0x54
 8015dbc:	78aa      	ldrb	r2, [r5, #2]
 8015dbe:	e789      	b.n	8015cd4 <_strtod_l+0x19c>
 8015dc0:	f04f 0c01 	mov.w	ip, #1
 8015dc4:	e7f8      	b.n	8015db8 <_strtod_l+0x280>
 8015dc6:	bf00      	nop
 8015dc8:	0801ce24 	.word	0x0801ce24
 8015dcc:	0801ce1f 	.word	0x0801ce1f
 8015dd0:	7ff00000 	.word	0x7ff00000
 8015dd4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8015dd6:	1c51      	adds	r1, r2, #1
 8015dd8:	9115      	str	r1, [sp, #84]	; 0x54
 8015dda:	7852      	ldrb	r2, [r2, #1]
 8015ddc:	2a30      	cmp	r2, #48	; 0x30
 8015dde:	d0f9      	beq.n	8015dd4 <_strtod_l+0x29c>
 8015de0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8015de4:	2908      	cmp	r1, #8
 8015de6:	f63f af7a 	bhi.w	8015cde <_strtod_l+0x1a6>
 8015dea:	3a30      	subs	r2, #48	; 0x30
 8015dec:	9208      	str	r2, [sp, #32]
 8015dee:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8015df0:	920c      	str	r2, [sp, #48]	; 0x30
 8015df2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8015df4:	1c57      	adds	r7, r2, #1
 8015df6:	9715      	str	r7, [sp, #84]	; 0x54
 8015df8:	7852      	ldrb	r2, [r2, #1]
 8015dfa:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8015dfe:	f1be 0f09 	cmp.w	lr, #9
 8015e02:	d938      	bls.n	8015e76 <_strtod_l+0x33e>
 8015e04:	990c      	ldr	r1, [sp, #48]	; 0x30
 8015e06:	1a7f      	subs	r7, r7, r1
 8015e08:	2f08      	cmp	r7, #8
 8015e0a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8015e0e:	dc03      	bgt.n	8015e18 <_strtod_l+0x2e0>
 8015e10:	9908      	ldr	r1, [sp, #32]
 8015e12:	428f      	cmp	r7, r1
 8015e14:	bfa8      	it	ge
 8015e16:	460f      	movge	r7, r1
 8015e18:	f1bc 0f00 	cmp.w	ip, #0
 8015e1c:	d000      	beq.n	8015e20 <_strtod_l+0x2e8>
 8015e1e:	427f      	negs	r7, r7
 8015e20:	2e00      	cmp	r6, #0
 8015e22:	d14f      	bne.n	8015ec4 <_strtod_l+0x38c>
 8015e24:	9904      	ldr	r1, [sp, #16]
 8015e26:	4301      	orrs	r1, r0
 8015e28:	f47f aec1 	bne.w	8015bae <_strtod_l+0x76>
 8015e2c:	2b00      	cmp	r3, #0
 8015e2e:	f47f aedb 	bne.w	8015be8 <_strtod_l+0xb0>
 8015e32:	2a69      	cmp	r2, #105	; 0x69
 8015e34:	d029      	beq.n	8015e8a <_strtod_l+0x352>
 8015e36:	dc26      	bgt.n	8015e86 <_strtod_l+0x34e>
 8015e38:	2a49      	cmp	r2, #73	; 0x49
 8015e3a:	d026      	beq.n	8015e8a <_strtod_l+0x352>
 8015e3c:	2a4e      	cmp	r2, #78	; 0x4e
 8015e3e:	f47f aed3 	bne.w	8015be8 <_strtod_l+0xb0>
 8015e42:	499c      	ldr	r1, [pc, #624]	; (80160b4 <_strtod_l+0x57c>)
 8015e44:	a815      	add	r0, sp, #84	; 0x54
 8015e46:	f002 f8a1 	bl	8017f8c <__match>
 8015e4a:	2800      	cmp	r0, #0
 8015e4c:	f43f aecc 	beq.w	8015be8 <_strtod_l+0xb0>
 8015e50:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015e52:	781b      	ldrb	r3, [r3, #0]
 8015e54:	2b28      	cmp	r3, #40	; 0x28
 8015e56:	d12f      	bne.n	8015eb8 <_strtod_l+0x380>
 8015e58:	aa18      	add	r2, sp, #96	; 0x60
 8015e5a:	4997      	ldr	r1, [pc, #604]	; (80160b8 <_strtod_l+0x580>)
 8015e5c:	a815      	add	r0, sp, #84	; 0x54
 8015e5e:	f002 f8a9 	bl	8017fb4 <__hexnan>
 8015e62:	2805      	cmp	r0, #5
 8015e64:	d128      	bne.n	8015eb8 <_strtod_l+0x380>
 8015e66:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015e68:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8015e6c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8015e70:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8015e74:	e69b      	b.n	8015bae <_strtod_l+0x76>
 8015e76:	9f08      	ldr	r7, [sp, #32]
 8015e78:	210a      	movs	r1, #10
 8015e7a:	fb01 2107 	mla	r1, r1, r7, r2
 8015e7e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8015e82:	9208      	str	r2, [sp, #32]
 8015e84:	e7b5      	b.n	8015df2 <_strtod_l+0x2ba>
 8015e86:	2a6e      	cmp	r2, #110	; 0x6e
 8015e88:	e7d9      	b.n	8015e3e <_strtod_l+0x306>
 8015e8a:	498c      	ldr	r1, [pc, #560]	; (80160bc <_strtod_l+0x584>)
 8015e8c:	a815      	add	r0, sp, #84	; 0x54
 8015e8e:	f002 f87d 	bl	8017f8c <__match>
 8015e92:	2800      	cmp	r0, #0
 8015e94:	f43f aea8 	beq.w	8015be8 <_strtod_l+0xb0>
 8015e98:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015e9a:	a815      	add	r0, sp, #84	; 0x54
 8015e9c:	4988      	ldr	r1, [pc, #544]	; (80160c0 <_strtod_l+0x588>)
 8015e9e:	3b01      	subs	r3, #1
 8015ea0:	9315      	str	r3, [sp, #84]	; 0x54
 8015ea2:	f002 f873 	bl	8017f8c <__match>
 8015ea6:	b910      	cbnz	r0, 8015eae <_strtod_l+0x376>
 8015ea8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015eaa:	3301      	adds	r3, #1
 8015eac:	9315      	str	r3, [sp, #84]	; 0x54
 8015eae:	f8df 9220 	ldr.w	r9, [pc, #544]	; 80160d0 <_strtod_l+0x598>
 8015eb2:	f04f 0800 	mov.w	r8, #0
 8015eb6:	e67a      	b.n	8015bae <_strtod_l+0x76>
 8015eb8:	4882      	ldr	r0, [pc, #520]	; (80160c4 <_strtod_l+0x58c>)
 8015eba:	f000 fee5 	bl	8016c88 <nan>
 8015ebe:	ec59 8b10 	vmov	r8, r9, d0
 8015ec2:	e674      	b.n	8015bae <_strtod_l+0x76>
 8015ec4:	9b05      	ldr	r3, [sp, #20]
 8015ec6:	f1bb 0f00 	cmp.w	fp, #0
 8015eca:	bf08      	it	eq
 8015ecc:	46b3      	moveq	fp, r6
 8015ece:	2e10      	cmp	r6, #16
 8015ed0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015ed2:	eba7 0303 	sub.w	r3, r7, r3
 8015ed6:	4635      	mov	r5, r6
 8015ed8:	bfa8      	it	ge
 8015eda:	2510      	movge	r5, #16
 8015edc:	9308      	str	r3, [sp, #32]
 8015ede:	f7ea fb1f 	bl	8000520 <__aeabi_ui2d>
 8015ee2:	2e09      	cmp	r6, #9
 8015ee4:	4680      	mov	r8, r0
 8015ee6:	4689      	mov	r9, r1
 8015ee8:	dd13      	ble.n	8015f12 <_strtod_l+0x3da>
 8015eea:	4b77      	ldr	r3, [pc, #476]	; (80160c8 <_strtod_l+0x590>)
 8015eec:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8015ef0:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8015ef4:	f7ea fb8e 	bl	8000614 <__aeabi_dmul>
 8015ef8:	4680      	mov	r8, r0
 8015efa:	4689      	mov	r9, r1
 8015efc:	4650      	mov	r0, sl
 8015efe:	f7ea fb0f 	bl	8000520 <__aeabi_ui2d>
 8015f02:	4602      	mov	r2, r0
 8015f04:	460b      	mov	r3, r1
 8015f06:	4640      	mov	r0, r8
 8015f08:	4649      	mov	r1, r9
 8015f0a:	f7ea f9cd 	bl	80002a8 <__adddf3>
 8015f0e:	4680      	mov	r8, r0
 8015f10:	4689      	mov	r9, r1
 8015f12:	2e0f      	cmp	r6, #15
 8015f14:	dc38      	bgt.n	8015f88 <_strtod_l+0x450>
 8015f16:	9b08      	ldr	r3, [sp, #32]
 8015f18:	2b00      	cmp	r3, #0
 8015f1a:	f43f ae48 	beq.w	8015bae <_strtod_l+0x76>
 8015f1e:	dd24      	ble.n	8015f6a <_strtod_l+0x432>
 8015f20:	2b16      	cmp	r3, #22
 8015f22:	dc0b      	bgt.n	8015f3c <_strtod_l+0x404>
 8015f24:	4968      	ldr	r1, [pc, #416]	; (80160c8 <_strtod_l+0x590>)
 8015f26:	4642      	mov	r2, r8
 8015f28:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8015f2c:	464b      	mov	r3, r9
 8015f2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015f32:	f7ea fb6f 	bl	8000614 <__aeabi_dmul>
 8015f36:	4680      	mov	r8, r0
 8015f38:	4689      	mov	r9, r1
 8015f3a:	e638      	b.n	8015bae <_strtod_l+0x76>
 8015f3c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8015f40:	9a08      	ldr	r2, [sp, #32]
 8015f42:	4293      	cmp	r3, r2
 8015f44:	db20      	blt.n	8015f88 <_strtod_l+0x450>
 8015f46:	f1c6 060f 	rsb	r6, r6, #15
 8015f4a:	4c5f      	ldr	r4, [pc, #380]	; (80160c8 <_strtod_l+0x590>)
 8015f4c:	4642      	mov	r2, r8
 8015f4e:	464b      	mov	r3, r9
 8015f50:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8015f54:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015f58:	f7ea fb5c 	bl	8000614 <__aeabi_dmul>
 8015f5c:	9b08      	ldr	r3, [sp, #32]
 8015f5e:	1b9e      	subs	r6, r3, r6
 8015f60:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8015f64:	e9d4 2300 	ldrd	r2, r3, [r4]
 8015f68:	e7e3      	b.n	8015f32 <_strtod_l+0x3fa>
 8015f6a:	9b08      	ldr	r3, [sp, #32]
 8015f6c:	3316      	adds	r3, #22
 8015f6e:	db0b      	blt.n	8015f88 <_strtod_l+0x450>
 8015f70:	9b05      	ldr	r3, [sp, #20]
 8015f72:	4640      	mov	r0, r8
 8015f74:	4649      	mov	r1, r9
 8015f76:	1bdf      	subs	r7, r3, r7
 8015f78:	4b53      	ldr	r3, [pc, #332]	; (80160c8 <_strtod_l+0x590>)
 8015f7a:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8015f7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015f82:	f7ea fc71 	bl	8000868 <__aeabi_ddiv>
 8015f86:	e7d6      	b.n	8015f36 <_strtod_l+0x3fe>
 8015f88:	1b75      	subs	r5, r6, r5
 8015f8a:	9b08      	ldr	r3, [sp, #32]
 8015f8c:	441d      	add	r5, r3
 8015f8e:	2d00      	cmp	r5, #0
 8015f90:	dd70      	ble.n	8016074 <_strtod_l+0x53c>
 8015f92:	f015 030f 	ands.w	r3, r5, #15
 8015f96:	d00a      	beq.n	8015fae <_strtod_l+0x476>
 8015f98:	494b      	ldr	r1, [pc, #300]	; (80160c8 <_strtod_l+0x590>)
 8015f9a:	4642      	mov	r2, r8
 8015f9c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8015fa0:	464b      	mov	r3, r9
 8015fa2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015fa6:	f7ea fb35 	bl	8000614 <__aeabi_dmul>
 8015faa:	4680      	mov	r8, r0
 8015fac:	4689      	mov	r9, r1
 8015fae:	f035 050f 	bics.w	r5, r5, #15
 8015fb2:	d04d      	beq.n	8016050 <_strtod_l+0x518>
 8015fb4:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8015fb8:	dd22      	ble.n	8016000 <_strtod_l+0x4c8>
 8015fba:	2500      	movs	r5, #0
 8015fbc:	46ab      	mov	fp, r5
 8015fbe:	9509      	str	r5, [sp, #36]	; 0x24
 8015fc0:	9505      	str	r5, [sp, #20]
 8015fc2:	2322      	movs	r3, #34	; 0x22
 8015fc4:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80160d0 <_strtod_l+0x598>
 8015fc8:	f04f 0800 	mov.w	r8, #0
 8015fcc:	6023      	str	r3, [r4, #0]
 8015fce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015fd0:	2b00      	cmp	r3, #0
 8015fd2:	f43f adec 	beq.w	8015bae <_strtod_l+0x76>
 8015fd6:	9916      	ldr	r1, [sp, #88]	; 0x58
 8015fd8:	4620      	mov	r0, r4
 8015fda:	f002 ff79 	bl	8018ed0 <_Bfree>
 8015fde:	9905      	ldr	r1, [sp, #20]
 8015fe0:	4620      	mov	r0, r4
 8015fe2:	f002 ff75 	bl	8018ed0 <_Bfree>
 8015fe6:	4659      	mov	r1, fp
 8015fe8:	4620      	mov	r0, r4
 8015fea:	f002 ff71 	bl	8018ed0 <_Bfree>
 8015fee:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015ff0:	4620      	mov	r0, r4
 8015ff2:	f002 ff6d 	bl	8018ed0 <_Bfree>
 8015ff6:	4629      	mov	r1, r5
 8015ff8:	4620      	mov	r0, r4
 8015ffa:	f002 ff69 	bl	8018ed0 <_Bfree>
 8015ffe:	e5d6      	b.n	8015bae <_strtod_l+0x76>
 8016000:	4b32      	ldr	r3, [pc, #200]	; (80160cc <_strtod_l+0x594>)
 8016002:	112d      	asrs	r5, r5, #4
 8016004:	4640      	mov	r0, r8
 8016006:	4649      	mov	r1, r9
 8016008:	9304      	str	r3, [sp, #16]
 801600a:	2300      	movs	r3, #0
 801600c:	469a      	mov	sl, r3
 801600e:	2d01      	cmp	r5, #1
 8016010:	dc21      	bgt.n	8016056 <_strtod_l+0x51e>
 8016012:	b10b      	cbz	r3, 8016018 <_strtod_l+0x4e0>
 8016014:	4680      	mov	r8, r0
 8016016:	4689      	mov	r9, r1
 8016018:	492c      	ldr	r1, [pc, #176]	; (80160cc <_strtod_l+0x594>)
 801601a:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 801601e:	4642      	mov	r2, r8
 8016020:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8016024:	464b      	mov	r3, r9
 8016026:	e9d1 0100 	ldrd	r0, r1, [r1]
 801602a:	f7ea faf3 	bl	8000614 <__aeabi_dmul>
 801602e:	4b28      	ldr	r3, [pc, #160]	; (80160d0 <_strtod_l+0x598>)
 8016030:	460a      	mov	r2, r1
 8016032:	4680      	mov	r8, r0
 8016034:	400b      	ands	r3, r1
 8016036:	4927      	ldr	r1, [pc, #156]	; (80160d4 <_strtod_l+0x59c>)
 8016038:	428b      	cmp	r3, r1
 801603a:	d8be      	bhi.n	8015fba <_strtod_l+0x482>
 801603c:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8016040:	428b      	cmp	r3, r1
 8016042:	bf86      	itte	hi
 8016044:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 80160d8 <_strtod_l+0x5a0>
 8016048:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 801604c:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8016050:	2300      	movs	r3, #0
 8016052:	9304      	str	r3, [sp, #16]
 8016054:	e07c      	b.n	8016150 <_strtod_l+0x618>
 8016056:	07ea      	lsls	r2, r5, #31
 8016058:	d505      	bpl.n	8016066 <_strtod_l+0x52e>
 801605a:	9b04      	ldr	r3, [sp, #16]
 801605c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016060:	f7ea fad8 	bl	8000614 <__aeabi_dmul>
 8016064:	2301      	movs	r3, #1
 8016066:	9a04      	ldr	r2, [sp, #16]
 8016068:	f10a 0a01 	add.w	sl, sl, #1
 801606c:	106d      	asrs	r5, r5, #1
 801606e:	3208      	adds	r2, #8
 8016070:	9204      	str	r2, [sp, #16]
 8016072:	e7cc      	b.n	801600e <_strtod_l+0x4d6>
 8016074:	d0ec      	beq.n	8016050 <_strtod_l+0x518>
 8016076:	426d      	negs	r5, r5
 8016078:	f015 020f 	ands.w	r2, r5, #15
 801607c:	d00a      	beq.n	8016094 <_strtod_l+0x55c>
 801607e:	4b12      	ldr	r3, [pc, #72]	; (80160c8 <_strtod_l+0x590>)
 8016080:	4640      	mov	r0, r8
 8016082:	4649      	mov	r1, r9
 8016084:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016088:	e9d3 2300 	ldrd	r2, r3, [r3]
 801608c:	f7ea fbec 	bl	8000868 <__aeabi_ddiv>
 8016090:	4680      	mov	r8, r0
 8016092:	4689      	mov	r9, r1
 8016094:	112d      	asrs	r5, r5, #4
 8016096:	d0db      	beq.n	8016050 <_strtod_l+0x518>
 8016098:	2d1f      	cmp	r5, #31
 801609a:	dd1f      	ble.n	80160dc <_strtod_l+0x5a4>
 801609c:	2500      	movs	r5, #0
 801609e:	46ab      	mov	fp, r5
 80160a0:	9509      	str	r5, [sp, #36]	; 0x24
 80160a2:	9505      	str	r5, [sp, #20]
 80160a4:	2322      	movs	r3, #34	; 0x22
 80160a6:	f04f 0800 	mov.w	r8, #0
 80160aa:	f04f 0900 	mov.w	r9, #0
 80160ae:	6023      	str	r3, [r4, #0]
 80160b0:	e78d      	b.n	8015fce <_strtod_l+0x496>
 80160b2:	bf00      	nop
 80160b4:	0801cdf5 	.word	0x0801cdf5
 80160b8:	0801ce38 	.word	0x0801ce38
 80160bc:	0801cded 	.word	0x0801cded
 80160c0:	0801cf84 	.word	0x0801cf84
 80160c4:	0801d22f 	.word	0x0801d22f
 80160c8:	0801d120 	.word	0x0801d120
 80160cc:	0801d0f8 	.word	0x0801d0f8
 80160d0:	7ff00000 	.word	0x7ff00000
 80160d4:	7ca00000 	.word	0x7ca00000
 80160d8:	7fefffff 	.word	0x7fefffff
 80160dc:	f015 0310 	ands.w	r3, r5, #16
 80160e0:	4640      	mov	r0, r8
 80160e2:	4649      	mov	r1, r9
 80160e4:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8016488 <_strtod_l+0x950>
 80160e8:	bf18      	it	ne
 80160ea:	236a      	movne	r3, #106	; 0x6a
 80160ec:	9304      	str	r3, [sp, #16]
 80160ee:	2300      	movs	r3, #0
 80160f0:	07ea      	lsls	r2, r5, #31
 80160f2:	d504      	bpl.n	80160fe <_strtod_l+0x5c6>
 80160f4:	e9da 2300 	ldrd	r2, r3, [sl]
 80160f8:	f7ea fa8c 	bl	8000614 <__aeabi_dmul>
 80160fc:	2301      	movs	r3, #1
 80160fe:	106d      	asrs	r5, r5, #1
 8016100:	f10a 0a08 	add.w	sl, sl, #8
 8016104:	d1f4      	bne.n	80160f0 <_strtod_l+0x5b8>
 8016106:	b10b      	cbz	r3, 801610c <_strtod_l+0x5d4>
 8016108:	4680      	mov	r8, r0
 801610a:	4689      	mov	r9, r1
 801610c:	9b04      	ldr	r3, [sp, #16]
 801610e:	b1bb      	cbz	r3, 8016140 <_strtod_l+0x608>
 8016110:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8016114:	4649      	mov	r1, r9
 8016116:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801611a:	2b00      	cmp	r3, #0
 801611c:	dd10      	ble.n	8016140 <_strtod_l+0x608>
 801611e:	2b1f      	cmp	r3, #31
 8016120:	f340 811e 	ble.w	8016360 <_strtod_l+0x828>
 8016124:	2b34      	cmp	r3, #52	; 0x34
 8016126:	f04f 0800 	mov.w	r8, #0
 801612a:	bfdb      	ittet	le
 801612c:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8016130:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8016134:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8016138:	4093      	lslle	r3, r2
 801613a:	bfd8      	it	le
 801613c:	ea03 0901 	andle.w	r9, r3, r1
 8016140:	2200      	movs	r2, #0
 8016142:	2300      	movs	r3, #0
 8016144:	4640      	mov	r0, r8
 8016146:	4649      	mov	r1, r9
 8016148:	f7ea fccc 	bl	8000ae4 <__aeabi_dcmpeq>
 801614c:	2800      	cmp	r0, #0
 801614e:	d1a5      	bne.n	801609c <_strtod_l+0x564>
 8016150:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016152:	465a      	mov	r2, fp
 8016154:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016156:	4620      	mov	r0, r4
 8016158:	9300      	str	r3, [sp, #0]
 801615a:	4633      	mov	r3, r6
 801615c:	f002 ff22 	bl	8018fa4 <__s2b>
 8016160:	9009      	str	r0, [sp, #36]	; 0x24
 8016162:	2800      	cmp	r0, #0
 8016164:	f43f af29 	beq.w	8015fba <_strtod_l+0x482>
 8016168:	9a08      	ldr	r2, [sp, #32]
 801616a:	2500      	movs	r5, #0
 801616c:	9b05      	ldr	r3, [sp, #20]
 801616e:	2a00      	cmp	r2, #0
 8016170:	46ab      	mov	fp, r5
 8016172:	eba3 0307 	sub.w	r3, r3, r7
 8016176:	bfa8      	it	ge
 8016178:	2300      	movge	r3, #0
 801617a:	930c      	str	r3, [sp, #48]	; 0x30
 801617c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8016180:	9312      	str	r3, [sp, #72]	; 0x48
 8016182:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016184:	4620      	mov	r0, r4
 8016186:	6859      	ldr	r1, [r3, #4]
 8016188:	f002 fe62 	bl	8018e50 <_Balloc>
 801618c:	9005      	str	r0, [sp, #20]
 801618e:	2800      	cmp	r0, #0
 8016190:	f43f af17 	beq.w	8015fc2 <_strtod_l+0x48a>
 8016194:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016196:	300c      	adds	r0, #12
 8016198:	691a      	ldr	r2, [r3, #16]
 801619a:	f103 010c 	add.w	r1, r3, #12
 801619e:	3202      	adds	r2, #2
 80161a0:	0092      	lsls	r2, r2, #2
 80161a2:	f000 fd5a 	bl	8016c5a <memcpy>
 80161a6:	aa18      	add	r2, sp, #96	; 0x60
 80161a8:	a917      	add	r1, sp, #92	; 0x5c
 80161aa:	4620      	mov	r0, r4
 80161ac:	ec49 8b10 	vmov	d0, r8, r9
 80161b0:	f003 fa36 	bl	8019620 <__d2b>
 80161b4:	9016      	str	r0, [sp, #88]	; 0x58
 80161b6:	ec49 8b18 	vmov	d8, r8, r9
 80161ba:	2800      	cmp	r0, #0
 80161bc:	f43f af01 	beq.w	8015fc2 <_strtod_l+0x48a>
 80161c0:	2101      	movs	r1, #1
 80161c2:	4620      	mov	r0, r4
 80161c4:	f002 ff86 	bl	80190d4 <__i2b>
 80161c8:	4683      	mov	fp, r0
 80161ca:	2800      	cmp	r0, #0
 80161cc:	f43f aef9 	beq.w	8015fc2 <_strtod_l+0x48a>
 80161d0:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80161d2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80161d4:	2e00      	cmp	r6, #0
 80161d6:	bfa9      	itett	ge
 80161d8:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 80161da:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 80161dc:	eb06 0a03 	addge.w	sl, r6, r3
 80161e0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80161e2:	bfb8      	it	lt
 80161e4:	1b9f      	sublt	r7, r3, r6
 80161e6:	9b04      	ldr	r3, [sp, #16]
 80161e8:	bfb8      	it	lt
 80161ea:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 80161ee:	1af6      	subs	r6, r6, r3
 80161f0:	4ba0      	ldr	r3, [pc, #640]	; (8016474 <_strtod_l+0x93c>)
 80161f2:	4416      	add	r6, r2
 80161f4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80161f8:	3e01      	subs	r6, #1
 80161fa:	429e      	cmp	r6, r3
 80161fc:	f280 80c3 	bge.w	8016386 <_strtod_l+0x84e>
 8016200:	1b9b      	subs	r3, r3, r6
 8016202:	2101      	movs	r1, #1
 8016204:	2b1f      	cmp	r3, #31
 8016206:	eba2 0203 	sub.w	r2, r2, r3
 801620a:	f300 80b0 	bgt.w	801636e <_strtod_l+0x836>
 801620e:	fa01 f303 	lsl.w	r3, r1, r3
 8016212:	930e      	str	r3, [sp, #56]	; 0x38
 8016214:	2300      	movs	r3, #0
 8016216:	930d      	str	r3, [sp, #52]	; 0x34
 8016218:	eb0a 0602 	add.w	r6, sl, r2
 801621c:	9b04      	ldr	r3, [sp, #16]
 801621e:	4417      	add	r7, r2
 8016220:	45b2      	cmp	sl, r6
 8016222:	441f      	add	r7, r3
 8016224:	4653      	mov	r3, sl
 8016226:	bfa8      	it	ge
 8016228:	4633      	movge	r3, r6
 801622a:	42bb      	cmp	r3, r7
 801622c:	bfa8      	it	ge
 801622e:	463b      	movge	r3, r7
 8016230:	2b00      	cmp	r3, #0
 8016232:	bfc2      	ittt	gt
 8016234:	1af6      	subgt	r6, r6, r3
 8016236:	1aff      	subgt	r7, r7, r3
 8016238:	ebaa 0a03 	subgt.w	sl, sl, r3
 801623c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801623e:	2b00      	cmp	r3, #0
 8016240:	dd17      	ble.n	8016272 <_strtod_l+0x73a>
 8016242:	4659      	mov	r1, fp
 8016244:	461a      	mov	r2, r3
 8016246:	4620      	mov	r0, r4
 8016248:	f003 f804 	bl	8019254 <__pow5mult>
 801624c:	4683      	mov	fp, r0
 801624e:	2800      	cmp	r0, #0
 8016250:	f43f aeb7 	beq.w	8015fc2 <_strtod_l+0x48a>
 8016254:	4601      	mov	r1, r0
 8016256:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8016258:	4620      	mov	r0, r4
 801625a:	f002 ff51 	bl	8019100 <__multiply>
 801625e:	900b      	str	r0, [sp, #44]	; 0x2c
 8016260:	2800      	cmp	r0, #0
 8016262:	f43f aeae 	beq.w	8015fc2 <_strtod_l+0x48a>
 8016266:	9916      	ldr	r1, [sp, #88]	; 0x58
 8016268:	4620      	mov	r0, r4
 801626a:	f002 fe31 	bl	8018ed0 <_Bfree>
 801626e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016270:	9316      	str	r3, [sp, #88]	; 0x58
 8016272:	2e00      	cmp	r6, #0
 8016274:	f300 808c 	bgt.w	8016390 <_strtod_l+0x858>
 8016278:	9b08      	ldr	r3, [sp, #32]
 801627a:	2b00      	cmp	r3, #0
 801627c:	dd08      	ble.n	8016290 <_strtod_l+0x758>
 801627e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016280:	4620      	mov	r0, r4
 8016282:	9905      	ldr	r1, [sp, #20]
 8016284:	f002 ffe6 	bl	8019254 <__pow5mult>
 8016288:	9005      	str	r0, [sp, #20]
 801628a:	2800      	cmp	r0, #0
 801628c:	f43f ae99 	beq.w	8015fc2 <_strtod_l+0x48a>
 8016290:	2f00      	cmp	r7, #0
 8016292:	dd08      	ble.n	80162a6 <_strtod_l+0x76e>
 8016294:	463a      	mov	r2, r7
 8016296:	9905      	ldr	r1, [sp, #20]
 8016298:	4620      	mov	r0, r4
 801629a:	f003 f835 	bl	8019308 <__lshift>
 801629e:	9005      	str	r0, [sp, #20]
 80162a0:	2800      	cmp	r0, #0
 80162a2:	f43f ae8e 	beq.w	8015fc2 <_strtod_l+0x48a>
 80162a6:	f1ba 0f00 	cmp.w	sl, #0
 80162aa:	dd08      	ble.n	80162be <_strtod_l+0x786>
 80162ac:	4659      	mov	r1, fp
 80162ae:	4652      	mov	r2, sl
 80162b0:	4620      	mov	r0, r4
 80162b2:	f003 f829 	bl	8019308 <__lshift>
 80162b6:	4683      	mov	fp, r0
 80162b8:	2800      	cmp	r0, #0
 80162ba:	f43f ae82 	beq.w	8015fc2 <_strtod_l+0x48a>
 80162be:	9a05      	ldr	r2, [sp, #20]
 80162c0:	4620      	mov	r0, r4
 80162c2:	9916      	ldr	r1, [sp, #88]	; 0x58
 80162c4:	f003 f8a8 	bl	8019418 <__mdiff>
 80162c8:	4605      	mov	r5, r0
 80162ca:	2800      	cmp	r0, #0
 80162cc:	f43f ae79 	beq.w	8015fc2 <_strtod_l+0x48a>
 80162d0:	68c3      	ldr	r3, [r0, #12]
 80162d2:	4659      	mov	r1, fp
 80162d4:	930b      	str	r3, [sp, #44]	; 0x2c
 80162d6:	2300      	movs	r3, #0
 80162d8:	60c3      	str	r3, [r0, #12]
 80162da:	f003 f881 	bl	80193e0 <__mcmp>
 80162de:	2800      	cmp	r0, #0
 80162e0:	da60      	bge.n	80163a4 <_strtod_l+0x86c>
 80162e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80162e4:	ea53 0308 	orrs.w	r3, r3, r8
 80162e8:	f040 8084 	bne.w	80163f4 <_strtod_l+0x8bc>
 80162ec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80162f0:	2b00      	cmp	r3, #0
 80162f2:	d17f      	bne.n	80163f4 <_strtod_l+0x8bc>
 80162f4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80162f8:	0d1b      	lsrs	r3, r3, #20
 80162fa:	051b      	lsls	r3, r3, #20
 80162fc:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8016300:	d978      	bls.n	80163f4 <_strtod_l+0x8bc>
 8016302:	696b      	ldr	r3, [r5, #20]
 8016304:	b913      	cbnz	r3, 801630c <_strtod_l+0x7d4>
 8016306:	692b      	ldr	r3, [r5, #16]
 8016308:	2b01      	cmp	r3, #1
 801630a:	dd73      	ble.n	80163f4 <_strtod_l+0x8bc>
 801630c:	4629      	mov	r1, r5
 801630e:	2201      	movs	r2, #1
 8016310:	4620      	mov	r0, r4
 8016312:	f002 fff9 	bl	8019308 <__lshift>
 8016316:	4659      	mov	r1, fp
 8016318:	4605      	mov	r5, r0
 801631a:	f003 f861 	bl	80193e0 <__mcmp>
 801631e:	2800      	cmp	r0, #0
 8016320:	dd68      	ble.n	80163f4 <_strtod_l+0x8bc>
 8016322:	9904      	ldr	r1, [sp, #16]
 8016324:	464b      	mov	r3, r9
 8016326:	4a54      	ldr	r2, [pc, #336]	; (8016478 <_strtod_l+0x940>)
 8016328:	2900      	cmp	r1, #0
 801632a:	f000 8084 	beq.w	8016436 <_strtod_l+0x8fe>
 801632e:	ea02 0109 	and.w	r1, r2, r9
 8016332:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8016336:	dc7e      	bgt.n	8016436 <_strtod_l+0x8fe>
 8016338:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801633c:	f77f aeb2 	ble.w	80160a4 <_strtod_l+0x56c>
 8016340:	4b4e      	ldr	r3, [pc, #312]	; (801647c <_strtod_l+0x944>)
 8016342:	4640      	mov	r0, r8
 8016344:	4649      	mov	r1, r9
 8016346:	2200      	movs	r2, #0
 8016348:	f7ea f964 	bl	8000614 <__aeabi_dmul>
 801634c:	4b4a      	ldr	r3, [pc, #296]	; (8016478 <_strtod_l+0x940>)
 801634e:	4680      	mov	r8, r0
 8016350:	4689      	mov	r9, r1
 8016352:	400b      	ands	r3, r1
 8016354:	2b00      	cmp	r3, #0
 8016356:	f47f ae3e 	bne.w	8015fd6 <_strtod_l+0x49e>
 801635a:	2322      	movs	r3, #34	; 0x22
 801635c:	6023      	str	r3, [r4, #0]
 801635e:	e63a      	b.n	8015fd6 <_strtod_l+0x49e>
 8016360:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016364:	fa02 f303 	lsl.w	r3, r2, r3
 8016368:	ea03 0808 	and.w	r8, r3, r8
 801636c:	e6e8      	b.n	8016140 <_strtod_l+0x608>
 801636e:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8016372:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8016376:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 801637a:	36e2      	adds	r6, #226	; 0xe2
 801637c:	fa01 f306 	lsl.w	r3, r1, r6
 8016380:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8016384:	e748      	b.n	8016218 <_strtod_l+0x6e0>
 8016386:	2100      	movs	r1, #0
 8016388:	2301      	movs	r3, #1
 801638a:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 801638e:	e743      	b.n	8016218 <_strtod_l+0x6e0>
 8016390:	4632      	mov	r2, r6
 8016392:	9916      	ldr	r1, [sp, #88]	; 0x58
 8016394:	4620      	mov	r0, r4
 8016396:	f002 ffb7 	bl	8019308 <__lshift>
 801639a:	9016      	str	r0, [sp, #88]	; 0x58
 801639c:	2800      	cmp	r0, #0
 801639e:	f47f af6b 	bne.w	8016278 <_strtod_l+0x740>
 80163a2:	e60e      	b.n	8015fc2 <_strtod_l+0x48a>
 80163a4:	46ca      	mov	sl, r9
 80163a6:	d171      	bne.n	801648c <_strtod_l+0x954>
 80163a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80163aa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80163ae:	b352      	cbz	r2, 8016406 <_strtod_l+0x8ce>
 80163b0:	4a33      	ldr	r2, [pc, #204]	; (8016480 <_strtod_l+0x948>)
 80163b2:	4293      	cmp	r3, r2
 80163b4:	d12a      	bne.n	801640c <_strtod_l+0x8d4>
 80163b6:	9b04      	ldr	r3, [sp, #16]
 80163b8:	4641      	mov	r1, r8
 80163ba:	b1fb      	cbz	r3, 80163fc <_strtod_l+0x8c4>
 80163bc:	4b2e      	ldr	r3, [pc, #184]	; (8016478 <_strtod_l+0x940>)
 80163be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80163c2:	ea09 0303 	and.w	r3, r9, r3
 80163c6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80163ca:	d81a      	bhi.n	8016402 <_strtod_l+0x8ca>
 80163cc:	0d1b      	lsrs	r3, r3, #20
 80163ce:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80163d2:	fa02 f303 	lsl.w	r3, r2, r3
 80163d6:	4299      	cmp	r1, r3
 80163d8:	d118      	bne.n	801640c <_strtod_l+0x8d4>
 80163da:	4b2a      	ldr	r3, [pc, #168]	; (8016484 <_strtod_l+0x94c>)
 80163dc:	459a      	cmp	sl, r3
 80163de:	d102      	bne.n	80163e6 <_strtod_l+0x8ae>
 80163e0:	3101      	adds	r1, #1
 80163e2:	f43f adee 	beq.w	8015fc2 <_strtod_l+0x48a>
 80163e6:	4b24      	ldr	r3, [pc, #144]	; (8016478 <_strtod_l+0x940>)
 80163e8:	f04f 0800 	mov.w	r8, #0
 80163ec:	ea0a 0303 	and.w	r3, sl, r3
 80163f0:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80163f4:	9b04      	ldr	r3, [sp, #16]
 80163f6:	2b00      	cmp	r3, #0
 80163f8:	d1a2      	bne.n	8016340 <_strtod_l+0x808>
 80163fa:	e5ec      	b.n	8015fd6 <_strtod_l+0x49e>
 80163fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016400:	e7e9      	b.n	80163d6 <_strtod_l+0x89e>
 8016402:	4613      	mov	r3, r2
 8016404:	e7e7      	b.n	80163d6 <_strtod_l+0x89e>
 8016406:	ea53 0308 	orrs.w	r3, r3, r8
 801640a:	d08a      	beq.n	8016322 <_strtod_l+0x7ea>
 801640c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801640e:	b1e3      	cbz	r3, 801644a <_strtod_l+0x912>
 8016410:	ea13 0f0a 	tst.w	r3, sl
 8016414:	d0ee      	beq.n	80163f4 <_strtod_l+0x8bc>
 8016416:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016418:	4640      	mov	r0, r8
 801641a:	9a04      	ldr	r2, [sp, #16]
 801641c:	4649      	mov	r1, r9
 801641e:	b1c3      	cbz	r3, 8016452 <_strtod_l+0x91a>
 8016420:	f7ff fb6c 	bl	8015afc <sulp>
 8016424:	4602      	mov	r2, r0
 8016426:	460b      	mov	r3, r1
 8016428:	ec51 0b18 	vmov	r0, r1, d8
 801642c:	f7e9 ff3c 	bl	80002a8 <__adddf3>
 8016430:	4680      	mov	r8, r0
 8016432:	4689      	mov	r9, r1
 8016434:	e7de      	b.n	80163f4 <_strtod_l+0x8bc>
 8016436:	4013      	ands	r3, r2
 8016438:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801643c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8016440:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8016444:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8016448:	e7d4      	b.n	80163f4 <_strtod_l+0x8bc>
 801644a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801644c:	ea13 0f08 	tst.w	r3, r8
 8016450:	e7e0      	b.n	8016414 <_strtod_l+0x8dc>
 8016452:	f7ff fb53 	bl	8015afc <sulp>
 8016456:	4602      	mov	r2, r0
 8016458:	460b      	mov	r3, r1
 801645a:	ec51 0b18 	vmov	r0, r1, d8
 801645e:	f7e9 ff21 	bl	80002a4 <__aeabi_dsub>
 8016462:	2200      	movs	r2, #0
 8016464:	2300      	movs	r3, #0
 8016466:	4680      	mov	r8, r0
 8016468:	4689      	mov	r9, r1
 801646a:	f7ea fb3b 	bl	8000ae4 <__aeabi_dcmpeq>
 801646e:	2800      	cmp	r0, #0
 8016470:	d0c0      	beq.n	80163f4 <_strtod_l+0x8bc>
 8016472:	e617      	b.n	80160a4 <_strtod_l+0x56c>
 8016474:	fffffc02 	.word	0xfffffc02
 8016478:	7ff00000 	.word	0x7ff00000
 801647c:	39500000 	.word	0x39500000
 8016480:	000fffff 	.word	0x000fffff
 8016484:	7fefffff 	.word	0x7fefffff
 8016488:	0801ce50 	.word	0x0801ce50
 801648c:	4659      	mov	r1, fp
 801648e:	4628      	mov	r0, r5
 8016490:	f003 f920 	bl	80196d4 <__ratio>
 8016494:	2200      	movs	r2, #0
 8016496:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801649a:	ee10 0a10 	vmov	r0, s0
 801649e:	ec57 6b10 	vmov	r6, r7, d0
 80164a2:	4639      	mov	r1, r7
 80164a4:	f7ea fb32 	bl	8000b0c <__aeabi_dcmple>
 80164a8:	2800      	cmp	r0, #0
 80164aa:	d071      	beq.n	8016590 <_strtod_l+0xa58>
 80164ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80164ae:	2b00      	cmp	r3, #0
 80164b0:	d17c      	bne.n	80165ac <_strtod_l+0xa74>
 80164b2:	f1b8 0f00 	cmp.w	r8, #0
 80164b6:	d15a      	bne.n	801656e <_strtod_l+0xa36>
 80164b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80164bc:	2b00      	cmp	r3, #0
 80164be:	d15d      	bne.n	801657c <_strtod_l+0xa44>
 80164c0:	2200      	movs	r2, #0
 80164c2:	4b91      	ldr	r3, [pc, #580]	; (8016708 <_strtod_l+0xbd0>)
 80164c4:	4630      	mov	r0, r6
 80164c6:	4639      	mov	r1, r7
 80164c8:	f7ea fb16 	bl	8000af8 <__aeabi_dcmplt>
 80164cc:	2800      	cmp	r0, #0
 80164ce:	d15c      	bne.n	801658a <_strtod_l+0xa52>
 80164d0:	4630      	mov	r0, r6
 80164d2:	4639      	mov	r1, r7
 80164d4:	2200      	movs	r2, #0
 80164d6:	4b8d      	ldr	r3, [pc, #564]	; (801670c <_strtod_l+0xbd4>)
 80164d8:	f7ea f89c 	bl	8000614 <__aeabi_dmul>
 80164dc:	4606      	mov	r6, r0
 80164de:	460f      	mov	r7, r1
 80164e0:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80164e4:	9606      	str	r6, [sp, #24]
 80164e6:	9307      	str	r3, [sp, #28]
 80164e8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80164ec:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80164f0:	4b87      	ldr	r3, [pc, #540]	; (8016710 <_strtod_l+0xbd8>)
 80164f2:	ea0a 0303 	and.w	r3, sl, r3
 80164f6:	930d      	str	r3, [sp, #52]	; 0x34
 80164f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80164fa:	4b86      	ldr	r3, [pc, #536]	; (8016714 <_strtod_l+0xbdc>)
 80164fc:	429a      	cmp	r2, r3
 80164fe:	f040 8090 	bne.w	8016622 <_strtod_l+0xaea>
 8016502:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8016506:	ec49 8b10 	vmov	d0, r8, r9
 801650a:	f003 f815 	bl	8019538 <__ulp>
 801650e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016512:	ec51 0b10 	vmov	r0, r1, d0
 8016516:	f7ea f87d 	bl	8000614 <__aeabi_dmul>
 801651a:	4642      	mov	r2, r8
 801651c:	464b      	mov	r3, r9
 801651e:	f7e9 fec3 	bl	80002a8 <__adddf3>
 8016522:	460b      	mov	r3, r1
 8016524:	497a      	ldr	r1, [pc, #488]	; (8016710 <_strtod_l+0xbd8>)
 8016526:	4680      	mov	r8, r0
 8016528:	4a7b      	ldr	r2, [pc, #492]	; (8016718 <_strtod_l+0xbe0>)
 801652a:	4019      	ands	r1, r3
 801652c:	4291      	cmp	r1, r2
 801652e:	d944      	bls.n	80165ba <_strtod_l+0xa82>
 8016530:	ee18 2a90 	vmov	r2, s17
 8016534:	4b79      	ldr	r3, [pc, #484]	; (801671c <_strtod_l+0xbe4>)
 8016536:	429a      	cmp	r2, r3
 8016538:	d104      	bne.n	8016544 <_strtod_l+0xa0c>
 801653a:	ee18 3a10 	vmov	r3, s16
 801653e:	3301      	adds	r3, #1
 8016540:	f43f ad3f 	beq.w	8015fc2 <_strtod_l+0x48a>
 8016544:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 801671c <_strtod_l+0xbe4>
 8016548:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801654c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801654e:	4620      	mov	r0, r4
 8016550:	f002 fcbe 	bl	8018ed0 <_Bfree>
 8016554:	9905      	ldr	r1, [sp, #20]
 8016556:	4620      	mov	r0, r4
 8016558:	f002 fcba 	bl	8018ed0 <_Bfree>
 801655c:	4659      	mov	r1, fp
 801655e:	4620      	mov	r0, r4
 8016560:	f002 fcb6 	bl	8018ed0 <_Bfree>
 8016564:	4629      	mov	r1, r5
 8016566:	4620      	mov	r0, r4
 8016568:	f002 fcb2 	bl	8018ed0 <_Bfree>
 801656c:	e609      	b.n	8016182 <_strtod_l+0x64a>
 801656e:	f1b8 0f01 	cmp.w	r8, #1
 8016572:	d103      	bne.n	801657c <_strtod_l+0xa44>
 8016574:	f1b9 0f00 	cmp.w	r9, #0
 8016578:	f43f ad94 	beq.w	80160a4 <_strtod_l+0x56c>
 801657c:	2600      	movs	r6, #0
 801657e:	4f62      	ldr	r7, [pc, #392]	; (8016708 <_strtod_l+0xbd0>)
 8016580:	ed9f 7b55 	vldr	d7, [pc, #340]	; 80166d8 <_strtod_l+0xba0>
 8016584:	ed8d 7b06 	vstr	d7, [sp, #24]
 8016588:	e7ae      	b.n	80164e8 <_strtod_l+0x9b0>
 801658a:	2600      	movs	r6, #0
 801658c:	4f5f      	ldr	r7, [pc, #380]	; (801670c <_strtod_l+0xbd4>)
 801658e:	e7a7      	b.n	80164e0 <_strtod_l+0x9a8>
 8016590:	4b5e      	ldr	r3, [pc, #376]	; (801670c <_strtod_l+0xbd4>)
 8016592:	4630      	mov	r0, r6
 8016594:	4639      	mov	r1, r7
 8016596:	2200      	movs	r2, #0
 8016598:	f7ea f83c 	bl	8000614 <__aeabi_dmul>
 801659c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801659e:	4606      	mov	r6, r0
 80165a0:	460f      	mov	r7, r1
 80165a2:	2b00      	cmp	r3, #0
 80165a4:	d09c      	beq.n	80164e0 <_strtod_l+0x9a8>
 80165a6:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80165aa:	e79d      	b.n	80164e8 <_strtod_l+0x9b0>
 80165ac:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 80166e0 <_strtod_l+0xba8>
 80165b0:	ec57 6b17 	vmov	r6, r7, d7
 80165b4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80165b8:	e796      	b.n	80164e8 <_strtod_l+0x9b0>
 80165ba:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80165be:	9b04      	ldr	r3, [sp, #16]
 80165c0:	46ca      	mov	sl, r9
 80165c2:	2b00      	cmp	r3, #0
 80165c4:	d1c2      	bne.n	801654c <_strtod_l+0xa14>
 80165c6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80165ca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80165cc:	0d1b      	lsrs	r3, r3, #20
 80165ce:	051b      	lsls	r3, r3, #20
 80165d0:	429a      	cmp	r2, r3
 80165d2:	d1bb      	bne.n	801654c <_strtod_l+0xa14>
 80165d4:	4630      	mov	r0, r6
 80165d6:	4639      	mov	r1, r7
 80165d8:	f7ea fb7c 	bl	8000cd4 <__aeabi_d2lz>
 80165dc:	f7e9 ffec 	bl	80005b8 <__aeabi_l2d>
 80165e0:	4602      	mov	r2, r0
 80165e2:	460b      	mov	r3, r1
 80165e4:	4630      	mov	r0, r6
 80165e6:	4639      	mov	r1, r7
 80165e8:	f7e9 fe5c 	bl	80002a4 <__aeabi_dsub>
 80165ec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80165f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80165f2:	4606      	mov	r6, r0
 80165f4:	ea43 0308 	orr.w	r3, r3, r8
 80165f8:	460f      	mov	r7, r1
 80165fa:	4313      	orrs	r3, r2
 80165fc:	d054      	beq.n	80166a8 <_strtod_l+0xb70>
 80165fe:	a33a      	add	r3, pc, #232	; (adr r3, 80166e8 <_strtod_l+0xbb0>)
 8016600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016604:	f7ea fa78 	bl	8000af8 <__aeabi_dcmplt>
 8016608:	2800      	cmp	r0, #0
 801660a:	f47f ace4 	bne.w	8015fd6 <_strtod_l+0x49e>
 801660e:	4630      	mov	r0, r6
 8016610:	4639      	mov	r1, r7
 8016612:	a337      	add	r3, pc, #220	; (adr r3, 80166f0 <_strtod_l+0xbb8>)
 8016614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016618:	f7ea fa8c 	bl	8000b34 <__aeabi_dcmpgt>
 801661c:	2800      	cmp	r0, #0
 801661e:	d095      	beq.n	801654c <_strtod_l+0xa14>
 8016620:	e4d9      	b.n	8015fd6 <_strtod_l+0x49e>
 8016622:	9b04      	ldr	r3, [sp, #16]
 8016624:	b333      	cbz	r3, 8016674 <_strtod_l+0xb3c>
 8016626:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016628:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801662c:	d822      	bhi.n	8016674 <_strtod_l+0xb3c>
 801662e:	4630      	mov	r0, r6
 8016630:	4639      	mov	r1, r7
 8016632:	a331      	add	r3, pc, #196	; (adr r3, 80166f8 <_strtod_l+0xbc0>)
 8016634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016638:	f7ea fa68 	bl	8000b0c <__aeabi_dcmple>
 801663c:	b1a0      	cbz	r0, 8016668 <_strtod_l+0xb30>
 801663e:	4639      	mov	r1, r7
 8016640:	4630      	mov	r0, r6
 8016642:	f7ea fabf 	bl	8000bc4 <__aeabi_d2uiz>
 8016646:	2801      	cmp	r0, #1
 8016648:	bf38      	it	cc
 801664a:	2001      	movcc	r0, #1
 801664c:	f7e9 ff68 	bl	8000520 <__aeabi_ui2d>
 8016650:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016652:	4606      	mov	r6, r0
 8016654:	460f      	mov	r7, r1
 8016656:	bb23      	cbnz	r3, 80166a2 <_strtod_l+0xb6a>
 8016658:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801665c:	9010      	str	r0, [sp, #64]	; 0x40
 801665e:	9311      	str	r3, [sp, #68]	; 0x44
 8016660:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8016664:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8016668:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801666a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801666c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8016670:	1a9b      	subs	r3, r3, r2
 8016672:	930f      	str	r3, [sp, #60]	; 0x3c
 8016674:	eeb0 0a48 	vmov.f32	s0, s16
 8016678:	eef0 0a68 	vmov.f32	s1, s17
 801667c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8016680:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8016684:	f002 ff58 	bl	8019538 <__ulp>
 8016688:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801668c:	ec53 2b10 	vmov	r2, r3, d0
 8016690:	f7e9 ffc0 	bl	8000614 <__aeabi_dmul>
 8016694:	ec53 2b18 	vmov	r2, r3, d8
 8016698:	f7e9 fe06 	bl	80002a8 <__adddf3>
 801669c:	4680      	mov	r8, r0
 801669e:	4689      	mov	r9, r1
 80166a0:	e78d      	b.n	80165be <_strtod_l+0xa86>
 80166a2:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80166a6:	e7db      	b.n	8016660 <_strtod_l+0xb28>
 80166a8:	a315      	add	r3, pc, #84	; (adr r3, 8016700 <_strtod_l+0xbc8>)
 80166aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80166ae:	f7ea fa23 	bl	8000af8 <__aeabi_dcmplt>
 80166b2:	e7b3      	b.n	801661c <_strtod_l+0xae4>
 80166b4:	2300      	movs	r3, #0
 80166b6:	930a      	str	r3, [sp, #40]	; 0x28
 80166b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80166ba:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80166bc:	6013      	str	r3, [r2, #0]
 80166be:	f7ff ba7a 	b.w	8015bb6 <_strtod_l+0x7e>
 80166c2:	2a65      	cmp	r2, #101	; 0x65
 80166c4:	f43f ab72 	beq.w	8015dac <_strtod_l+0x274>
 80166c8:	2a45      	cmp	r2, #69	; 0x45
 80166ca:	f43f ab6f 	beq.w	8015dac <_strtod_l+0x274>
 80166ce:	2301      	movs	r3, #1
 80166d0:	f7ff bba8 	b.w	8015e24 <_strtod_l+0x2ec>
 80166d4:	f3af 8000 	nop.w
 80166d8:	00000000 	.word	0x00000000
 80166dc:	bff00000 	.word	0xbff00000
 80166e0:	00000000 	.word	0x00000000
 80166e4:	3ff00000 	.word	0x3ff00000
 80166e8:	94a03595 	.word	0x94a03595
 80166ec:	3fdfffff 	.word	0x3fdfffff
 80166f0:	35afe535 	.word	0x35afe535
 80166f4:	3fe00000 	.word	0x3fe00000
 80166f8:	ffc00000 	.word	0xffc00000
 80166fc:	41dfffff 	.word	0x41dfffff
 8016700:	94a03595 	.word	0x94a03595
 8016704:	3fcfffff 	.word	0x3fcfffff
 8016708:	3ff00000 	.word	0x3ff00000
 801670c:	3fe00000 	.word	0x3fe00000
 8016710:	7ff00000 	.word	0x7ff00000
 8016714:	7fe00000 	.word	0x7fe00000
 8016718:	7c9fffff 	.word	0x7c9fffff
 801671c:	7fefffff 	.word	0x7fefffff

08016720 <_strtod_r>:
 8016720:	4b01      	ldr	r3, [pc, #4]	; (8016728 <_strtod_r+0x8>)
 8016722:	f7ff ba09 	b.w	8015b38 <_strtod_l>
 8016726:	bf00      	nop
 8016728:	2000010c 	.word	0x2000010c

0801672c <_strtol_l.constprop.0>:
 801672c:	2b01      	cmp	r3, #1
 801672e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016732:	d001      	beq.n	8016738 <_strtol_l.constprop.0+0xc>
 8016734:	2b24      	cmp	r3, #36	; 0x24
 8016736:	d906      	bls.n	8016746 <_strtol_l.constprop.0+0x1a>
 8016738:	f000 fa54 	bl	8016be4 <__errno>
 801673c:	2316      	movs	r3, #22
 801673e:	6003      	str	r3, [r0, #0]
 8016740:	2000      	movs	r0, #0
 8016742:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016746:	460d      	mov	r5, r1
 8016748:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 801682c <_strtol_l.constprop.0+0x100>
 801674c:	462e      	mov	r6, r5
 801674e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016752:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8016756:	f017 0708 	ands.w	r7, r7, #8
 801675a:	d1f7      	bne.n	801674c <_strtol_l.constprop.0+0x20>
 801675c:	2c2d      	cmp	r4, #45	; 0x2d
 801675e:	d132      	bne.n	80167c6 <_strtol_l.constprop.0+0x9a>
 8016760:	782c      	ldrb	r4, [r5, #0]
 8016762:	2701      	movs	r7, #1
 8016764:	1cb5      	adds	r5, r6, #2
 8016766:	2b00      	cmp	r3, #0
 8016768:	d05b      	beq.n	8016822 <_strtol_l.constprop.0+0xf6>
 801676a:	2b10      	cmp	r3, #16
 801676c:	d109      	bne.n	8016782 <_strtol_l.constprop.0+0x56>
 801676e:	2c30      	cmp	r4, #48	; 0x30
 8016770:	d107      	bne.n	8016782 <_strtol_l.constprop.0+0x56>
 8016772:	782c      	ldrb	r4, [r5, #0]
 8016774:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8016778:	2c58      	cmp	r4, #88	; 0x58
 801677a:	d14d      	bne.n	8016818 <_strtol_l.constprop.0+0xec>
 801677c:	786c      	ldrb	r4, [r5, #1]
 801677e:	2310      	movs	r3, #16
 8016780:	3502      	adds	r5, #2
 8016782:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8016786:	f04f 0e00 	mov.w	lr, #0
 801678a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 801678e:	4676      	mov	r6, lr
 8016790:	fbb8 f9f3 	udiv	r9, r8, r3
 8016794:	fb03 8a19 	mls	sl, r3, r9, r8
 8016798:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801679c:	f1bc 0f09 	cmp.w	ip, #9
 80167a0:	d816      	bhi.n	80167d0 <_strtol_l.constprop.0+0xa4>
 80167a2:	4664      	mov	r4, ip
 80167a4:	42a3      	cmp	r3, r4
 80167a6:	dd24      	ble.n	80167f2 <_strtol_l.constprop.0+0xc6>
 80167a8:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 80167ac:	d008      	beq.n	80167c0 <_strtol_l.constprop.0+0x94>
 80167ae:	45b1      	cmp	r9, r6
 80167b0:	d31c      	bcc.n	80167ec <_strtol_l.constprop.0+0xc0>
 80167b2:	d101      	bne.n	80167b8 <_strtol_l.constprop.0+0x8c>
 80167b4:	45a2      	cmp	sl, r4
 80167b6:	db19      	blt.n	80167ec <_strtol_l.constprop.0+0xc0>
 80167b8:	fb06 4603 	mla	r6, r6, r3, r4
 80167bc:	f04f 0e01 	mov.w	lr, #1
 80167c0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80167c4:	e7e8      	b.n	8016798 <_strtol_l.constprop.0+0x6c>
 80167c6:	2c2b      	cmp	r4, #43	; 0x2b
 80167c8:	bf04      	itt	eq
 80167ca:	782c      	ldrbeq	r4, [r5, #0]
 80167cc:	1cb5      	addeq	r5, r6, #2
 80167ce:	e7ca      	b.n	8016766 <_strtol_l.constprop.0+0x3a>
 80167d0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80167d4:	f1bc 0f19 	cmp.w	ip, #25
 80167d8:	d801      	bhi.n	80167de <_strtol_l.constprop.0+0xb2>
 80167da:	3c37      	subs	r4, #55	; 0x37
 80167dc:	e7e2      	b.n	80167a4 <_strtol_l.constprop.0+0x78>
 80167de:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80167e2:	f1bc 0f19 	cmp.w	ip, #25
 80167e6:	d804      	bhi.n	80167f2 <_strtol_l.constprop.0+0xc6>
 80167e8:	3c57      	subs	r4, #87	; 0x57
 80167ea:	e7db      	b.n	80167a4 <_strtol_l.constprop.0+0x78>
 80167ec:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 80167f0:	e7e6      	b.n	80167c0 <_strtol_l.constprop.0+0x94>
 80167f2:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 80167f6:	d105      	bne.n	8016804 <_strtol_l.constprop.0+0xd8>
 80167f8:	2322      	movs	r3, #34	; 0x22
 80167fa:	4646      	mov	r6, r8
 80167fc:	6003      	str	r3, [r0, #0]
 80167fe:	b942      	cbnz	r2, 8016812 <_strtol_l.constprop.0+0xe6>
 8016800:	4630      	mov	r0, r6
 8016802:	e79e      	b.n	8016742 <_strtol_l.constprop.0+0x16>
 8016804:	b107      	cbz	r7, 8016808 <_strtol_l.constprop.0+0xdc>
 8016806:	4276      	negs	r6, r6
 8016808:	2a00      	cmp	r2, #0
 801680a:	d0f9      	beq.n	8016800 <_strtol_l.constprop.0+0xd4>
 801680c:	f1be 0f00 	cmp.w	lr, #0
 8016810:	d000      	beq.n	8016814 <_strtol_l.constprop.0+0xe8>
 8016812:	1e69      	subs	r1, r5, #1
 8016814:	6011      	str	r1, [r2, #0]
 8016816:	e7f3      	b.n	8016800 <_strtol_l.constprop.0+0xd4>
 8016818:	2430      	movs	r4, #48	; 0x30
 801681a:	2b00      	cmp	r3, #0
 801681c:	d1b1      	bne.n	8016782 <_strtol_l.constprop.0+0x56>
 801681e:	2308      	movs	r3, #8
 8016820:	e7af      	b.n	8016782 <_strtol_l.constprop.0+0x56>
 8016822:	2c30      	cmp	r4, #48	; 0x30
 8016824:	d0a5      	beq.n	8016772 <_strtol_l.constprop.0+0x46>
 8016826:	230a      	movs	r3, #10
 8016828:	e7ab      	b.n	8016782 <_strtol_l.constprop.0+0x56>
 801682a:	bf00      	nop
 801682c:	0801ce81 	.word	0x0801ce81

08016830 <_strtol_r>:
 8016830:	f7ff bf7c 	b.w	801672c <_strtol_l.constprop.0>

08016834 <_fwalk_sglue>:
 8016834:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016838:	4607      	mov	r7, r0
 801683a:	4688      	mov	r8, r1
 801683c:	4614      	mov	r4, r2
 801683e:	2600      	movs	r6, #0
 8016840:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016844:	f1b9 0901 	subs.w	r9, r9, #1
 8016848:	d505      	bpl.n	8016856 <_fwalk_sglue+0x22>
 801684a:	6824      	ldr	r4, [r4, #0]
 801684c:	2c00      	cmp	r4, #0
 801684e:	d1f7      	bne.n	8016840 <_fwalk_sglue+0xc>
 8016850:	4630      	mov	r0, r6
 8016852:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016856:	89ab      	ldrh	r3, [r5, #12]
 8016858:	2b01      	cmp	r3, #1
 801685a:	d907      	bls.n	801686c <_fwalk_sglue+0x38>
 801685c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016860:	3301      	adds	r3, #1
 8016862:	d003      	beq.n	801686c <_fwalk_sglue+0x38>
 8016864:	4629      	mov	r1, r5
 8016866:	4638      	mov	r0, r7
 8016868:	47c0      	blx	r8
 801686a:	4306      	orrs	r6, r0
 801686c:	3568      	adds	r5, #104	; 0x68
 801686e:	e7e9      	b.n	8016844 <_fwalk_sglue+0x10>

08016870 <__swhatbuf_r>:
 8016870:	b570      	push	{r4, r5, r6, lr}
 8016872:	460c      	mov	r4, r1
 8016874:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016878:	b096      	sub	sp, #88	; 0x58
 801687a:	4615      	mov	r5, r2
 801687c:	2900      	cmp	r1, #0
 801687e:	461e      	mov	r6, r3
 8016880:	da0c      	bge.n	801689c <__swhatbuf_r+0x2c>
 8016882:	89a3      	ldrh	r3, [r4, #12]
 8016884:	2100      	movs	r1, #0
 8016886:	f013 0f80 	tst.w	r3, #128	; 0x80
 801688a:	bf0c      	ite	eq
 801688c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8016890:	2340      	movne	r3, #64	; 0x40
 8016892:	2000      	movs	r0, #0
 8016894:	6031      	str	r1, [r6, #0]
 8016896:	602b      	str	r3, [r5, #0]
 8016898:	b016      	add	sp, #88	; 0x58
 801689a:	bd70      	pop	{r4, r5, r6, pc}
 801689c:	466a      	mov	r2, sp
 801689e:	f000 f939 	bl	8016b14 <_fstat_r>
 80168a2:	2800      	cmp	r0, #0
 80168a4:	dbed      	blt.n	8016882 <__swhatbuf_r+0x12>
 80168a6:	9901      	ldr	r1, [sp, #4]
 80168a8:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80168ac:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80168b0:	4259      	negs	r1, r3
 80168b2:	4159      	adcs	r1, r3
 80168b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80168b8:	e7eb      	b.n	8016892 <__swhatbuf_r+0x22>

080168ba <__smakebuf_r>:
 80168ba:	898b      	ldrh	r3, [r1, #12]
 80168bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80168be:	079d      	lsls	r5, r3, #30
 80168c0:	4606      	mov	r6, r0
 80168c2:	460c      	mov	r4, r1
 80168c4:	d507      	bpl.n	80168d6 <__smakebuf_r+0x1c>
 80168c6:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80168ca:	6023      	str	r3, [r4, #0]
 80168cc:	6123      	str	r3, [r4, #16]
 80168ce:	2301      	movs	r3, #1
 80168d0:	6163      	str	r3, [r4, #20]
 80168d2:	b002      	add	sp, #8
 80168d4:	bd70      	pop	{r4, r5, r6, pc}
 80168d6:	ab01      	add	r3, sp, #4
 80168d8:	466a      	mov	r2, sp
 80168da:	f7ff ffc9 	bl	8016870 <__swhatbuf_r>
 80168de:	9900      	ldr	r1, [sp, #0]
 80168e0:	4605      	mov	r5, r0
 80168e2:	4630      	mov	r0, r6
 80168e4:	f7fe fabc 	bl	8014e60 <_malloc_r>
 80168e8:	b948      	cbnz	r0, 80168fe <__smakebuf_r+0x44>
 80168ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80168ee:	059a      	lsls	r2, r3, #22
 80168f0:	d4ef      	bmi.n	80168d2 <__smakebuf_r+0x18>
 80168f2:	f023 0303 	bic.w	r3, r3, #3
 80168f6:	f043 0302 	orr.w	r3, r3, #2
 80168fa:	81a3      	strh	r3, [r4, #12]
 80168fc:	e7e3      	b.n	80168c6 <__smakebuf_r+0xc>
 80168fe:	89a3      	ldrh	r3, [r4, #12]
 8016900:	6020      	str	r0, [r4, #0]
 8016902:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016906:	6120      	str	r0, [r4, #16]
 8016908:	81a3      	strh	r3, [r4, #12]
 801690a:	9b00      	ldr	r3, [sp, #0]
 801690c:	6163      	str	r3, [r4, #20]
 801690e:	9b01      	ldr	r3, [sp, #4]
 8016910:	b15b      	cbz	r3, 801692a <__smakebuf_r+0x70>
 8016912:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016916:	4630      	mov	r0, r6
 8016918:	f000 f90e 	bl	8016b38 <_isatty_r>
 801691c:	b128      	cbz	r0, 801692a <__smakebuf_r+0x70>
 801691e:	89a3      	ldrh	r3, [r4, #12]
 8016920:	f023 0303 	bic.w	r3, r3, #3
 8016924:	f043 0301 	orr.w	r3, r3, #1
 8016928:	81a3      	strh	r3, [r4, #12]
 801692a:	89a3      	ldrh	r3, [r4, #12]
 801692c:	431d      	orrs	r5, r3
 801692e:	81a5      	strh	r5, [r4, #12]
 8016930:	e7cf      	b.n	80168d2 <__smakebuf_r+0x18>
	...

08016934 <iprintf>:
 8016934:	b40f      	push	{r0, r1, r2, r3}
 8016936:	b507      	push	{r0, r1, r2, lr}
 8016938:	4906      	ldr	r1, [pc, #24]	; (8016954 <iprintf+0x20>)
 801693a:	ab04      	add	r3, sp, #16
 801693c:	6808      	ldr	r0, [r1, #0]
 801693e:	f853 2b04 	ldr.w	r2, [r3], #4
 8016942:	6881      	ldr	r1, [r0, #8]
 8016944:	9301      	str	r3, [sp, #4]
 8016946:	f001 ff25 	bl	8018794 <_vfiprintf_r>
 801694a:	b003      	add	sp, #12
 801694c:	f85d eb04 	ldr.w	lr, [sp], #4
 8016950:	b004      	add	sp, #16
 8016952:	4770      	bx	lr
 8016954:	200002c4 	.word	0x200002c4

08016958 <putchar>:
 8016958:	4b02      	ldr	r3, [pc, #8]	; (8016964 <putchar+0xc>)
 801695a:	4601      	mov	r1, r0
 801695c:	6818      	ldr	r0, [r3, #0]
 801695e:	6882      	ldr	r2, [r0, #8]
 8016960:	f003 b8ad 	b.w	8019abe <_putc_r>
 8016964:	200002c4 	.word	0x200002c4

08016968 <_puts_r>:
 8016968:	6a03      	ldr	r3, [r0, #32]
 801696a:	b570      	push	{r4, r5, r6, lr}
 801696c:	4605      	mov	r5, r0
 801696e:	460e      	mov	r6, r1
 8016970:	6884      	ldr	r4, [r0, #8]
 8016972:	b90b      	cbnz	r3, 8016978 <_puts_r+0x10>
 8016974:	f7ff f8aa 	bl	8015acc <__sinit>
 8016978:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801697a:	07db      	lsls	r3, r3, #31
 801697c:	d405      	bmi.n	801698a <_puts_r+0x22>
 801697e:	89a3      	ldrh	r3, [r4, #12]
 8016980:	0598      	lsls	r0, r3, #22
 8016982:	d402      	bmi.n	801698a <_puts_r+0x22>
 8016984:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016986:	f000 f958 	bl	8016c3a <__retarget_lock_acquire_recursive>
 801698a:	89a3      	ldrh	r3, [r4, #12]
 801698c:	0719      	lsls	r1, r3, #28
 801698e:	d513      	bpl.n	80169b8 <_puts_r+0x50>
 8016990:	6923      	ldr	r3, [r4, #16]
 8016992:	b18b      	cbz	r3, 80169b8 <_puts_r+0x50>
 8016994:	3e01      	subs	r6, #1
 8016996:	68a3      	ldr	r3, [r4, #8]
 8016998:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801699c:	3b01      	subs	r3, #1
 801699e:	60a3      	str	r3, [r4, #8]
 80169a0:	b9e9      	cbnz	r1, 80169de <_puts_r+0x76>
 80169a2:	2b00      	cmp	r3, #0
 80169a4:	da2e      	bge.n	8016a04 <_puts_r+0x9c>
 80169a6:	4622      	mov	r2, r4
 80169a8:	210a      	movs	r1, #10
 80169aa:	4628      	mov	r0, r5
 80169ac:	f002 ffe4 	bl	8019978 <__swbuf_r>
 80169b0:	3001      	adds	r0, #1
 80169b2:	d007      	beq.n	80169c4 <_puts_r+0x5c>
 80169b4:	250a      	movs	r5, #10
 80169b6:	e007      	b.n	80169c8 <_puts_r+0x60>
 80169b8:	4621      	mov	r1, r4
 80169ba:	4628      	mov	r0, r5
 80169bc:	f003 f81a 	bl	80199f4 <__swsetup_r>
 80169c0:	2800      	cmp	r0, #0
 80169c2:	d0e7      	beq.n	8016994 <_puts_r+0x2c>
 80169c4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80169c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80169ca:	07da      	lsls	r2, r3, #31
 80169cc:	d405      	bmi.n	80169da <_puts_r+0x72>
 80169ce:	89a3      	ldrh	r3, [r4, #12]
 80169d0:	059b      	lsls	r3, r3, #22
 80169d2:	d402      	bmi.n	80169da <_puts_r+0x72>
 80169d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80169d6:	f000 f931 	bl	8016c3c <__retarget_lock_release_recursive>
 80169da:	4628      	mov	r0, r5
 80169dc:	bd70      	pop	{r4, r5, r6, pc}
 80169de:	2b00      	cmp	r3, #0
 80169e0:	da04      	bge.n	80169ec <_puts_r+0x84>
 80169e2:	69a2      	ldr	r2, [r4, #24]
 80169e4:	429a      	cmp	r2, r3
 80169e6:	dc06      	bgt.n	80169f6 <_puts_r+0x8e>
 80169e8:	290a      	cmp	r1, #10
 80169ea:	d004      	beq.n	80169f6 <_puts_r+0x8e>
 80169ec:	6823      	ldr	r3, [r4, #0]
 80169ee:	1c5a      	adds	r2, r3, #1
 80169f0:	6022      	str	r2, [r4, #0]
 80169f2:	7019      	strb	r1, [r3, #0]
 80169f4:	e7cf      	b.n	8016996 <_puts_r+0x2e>
 80169f6:	4622      	mov	r2, r4
 80169f8:	4628      	mov	r0, r5
 80169fa:	f002 ffbd 	bl	8019978 <__swbuf_r>
 80169fe:	3001      	adds	r0, #1
 8016a00:	d1c9      	bne.n	8016996 <_puts_r+0x2e>
 8016a02:	e7df      	b.n	80169c4 <_puts_r+0x5c>
 8016a04:	6823      	ldr	r3, [r4, #0]
 8016a06:	250a      	movs	r5, #10
 8016a08:	1c5a      	adds	r2, r3, #1
 8016a0a:	6022      	str	r2, [r4, #0]
 8016a0c:	701d      	strb	r5, [r3, #0]
 8016a0e:	e7db      	b.n	80169c8 <_puts_r+0x60>

08016a10 <puts>:
 8016a10:	4b02      	ldr	r3, [pc, #8]	; (8016a1c <puts+0xc>)
 8016a12:	4601      	mov	r1, r0
 8016a14:	6818      	ldr	r0, [r3, #0]
 8016a16:	f7ff bfa7 	b.w	8016968 <_puts_r>
 8016a1a:	bf00      	nop
 8016a1c:	200002c4 	.word	0x200002c4

08016a20 <strcat>:
 8016a20:	4602      	mov	r2, r0
 8016a22:	b510      	push	{r4, lr}
 8016a24:	7814      	ldrb	r4, [r2, #0]
 8016a26:	4613      	mov	r3, r2
 8016a28:	3201      	adds	r2, #1
 8016a2a:	2c00      	cmp	r4, #0
 8016a2c:	d1fa      	bne.n	8016a24 <strcat+0x4>
 8016a2e:	3b01      	subs	r3, #1
 8016a30:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016a34:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016a38:	2a00      	cmp	r2, #0
 8016a3a:	d1f9      	bne.n	8016a30 <strcat+0x10>
 8016a3c:	bd10      	pop	{r4, pc}

08016a3e <strncmp>:
 8016a3e:	b510      	push	{r4, lr}
 8016a40:	b16a      	cbz	r2, 8016a5e <strncmp+0x20>
 8016a42:	3901      	subs	r1, #1
 8016a44:	1884      	adds	r4, r0, r2
 8016a46:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016a4a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8016a4e:	429a      	cmp	r2, r3
 8016a50:	d103      	bne.n	8016a5a <strncmp+0x1c>
 8016a52:	42a0      	cmp	r0, r4
 8016a54:	d001      	beq.n	8016a5a <strncmp+0x1c>
 8016a56:	2a00      	cmp	r2, #0
 8016a58:	d1f5      	bne.n	8016a46 <strncmp+0x8>
 8016a5a:	1ad0      	subs	r0, r2, r3
 8016a5c:	bd10      	pop	{r4, pc}
 8016a5e:	4610      	mov	r0, r2
 8016a60:	e7fc      	b.n	8016a5c <strncmp+0x1e>

08016a62 <strncpy>:
 8016a62:	3901      	subs	r1, #1
 8016a64:	4603      	mov	r3, r0
 8016a66:	b510      	push	{r4, lr}
 8016a68:	b132      	cbz	r2, 8016a78 <strncpy+0x16>
 8016a6a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8016a6e:	3a01      	subs	r2, #1
 8016a70:	f803 4b01 	strb.w	r4, [r3], #1
 8016a74:	2c00      	cmp	r4, #0
 8016a76:	d1f7      	bne.n	8016a68 <strncpy+0x6>
 8016a78:	441a      	add	r2, r3
 8016a7a:	2100      	movs	r1, #0
 8016a7c:	4293      	cmp	r3, r2
 8016a7e:	d100      	bne.n	8016a82 <strncpy+0x20>
 8016a80:	bd10      	pop	{r4, pc}
 8016a82:	f803 1b01 	strb.w	r1, [r3], #1
 8016a86:	e7f9      	b.n	8016a7c <strncpy+0x1a>

08016a88 <memcmp>:
 8016a88:	3901      	subs	r1, #1
 8016a8a:	4402      	add	r2, r0
 8016a8c:	b510      	push	{r4, lr}
 8016a8e:	4290      	cmp	r0, r2
 8016a90:	d101      	bne.n	8016a96 <memcmp+0xe>
 8016a92:	2000      	movs	r0, #0
 8016a94:	e005      	b.n	8016aa2 <memcmp+0x1a>
 8016a96:	7803      	ldrb	r3, [r0, #0]
 8016a98:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8016a9c:	42a3      	cmp	r3, r4
 8016a9e:	d001      	beq.n	8016aa4 <memcmp+0x1c>
 8016aa0:	1b18      	subs	r0, r3, r4
 8016aa2:	bd10      	pop	{r4, pc}
 8016aa4:	3001      	adds	r0, #1
 8016aa6:	e7f2      	b.n	8016a8e <memcmp+0x6>

08016aa8 <memmove>:
 8016aa8:	4288      	cmp	r0, r1
 8016aaa:	b510      	push	{r4, lr}
 8016aac:	eb01 0402 	add.w	r4, r1, r2
 8016ab0:	d902      	bls.n	8016ab8 <memmove+0x10>
 8016ab2:	4284      	cmp	r4, r0
 8016ab4:	4623      	mov	r3, r4
 8016ab6:	d807      	bhi.n	8016ac8 <memmove+0x20>
 8016ab8:	1e43      	subs	r3, r0, #1
 8016aba:	42a1      	cmp	r1, r4
 8016abc:	d008      	beq.n	8016ad0 <memmove+0x28>
 8016abe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016ac2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016ac6:	e7f8      	b.n	8016aba <memmove+0x12>
 8016ac8:	4402      	add	r2, r0
 8016aca:	4601      	mov	r1, r0
 8016acc:	428a      	cmp	r2, r1
 8016ace:	d100      	bne.n	8016ad2 <memmove+0x2a>
 8016ad0:	bd10      	pop	{r4, pc}
 8016ad2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016ad6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8016ada:	e7f7      	b.n	8016acc <memmove+0x24>

08016adc <memset>:
 8016adc:	4402      	add	r2, r0
 8016ade:	4603      	mov	r3, r0
 8016ae0:	4293      	cmp	r3, r2
 8016ae2:	d100      	bne.n	8016ae6 <memset+0xa>
 8016ae4:	4770      	bx	lr
 8016ae6:	f803 1b01 	strb.w	r1, [r3], #1
 8016aea:	e7f9      	b.n	8016ae0 <memset+0x4>

08016aec <_localeconv_r>:
 8016aec:	4800      	ldr	r0, [pc, #0]	; (8016af0 <_localeconv_r+0x4>)
 8016aee:	4770      	bx	lr
 8016af0:	200001fc 	.word	0x200001fc

08016af4 <_close_r>:
 8016af4:	b538      	push	{r3, r4, r5, lr}
 8016af6:	2300      	movs	r3, #0
 8016af8:	4d05      	ldr	r5, [pc, #20]	; (8016b10 <_close_r+0x1c>)
 8016afa:	4604      	mov	r4, r0
 8016afc:	4608      	mov	r0, r1
 8016afe:	602b      	str	r3, [r5, #0]
 8016b00:	f7ea fd73 	bl	80015ea <_close>
 8016b04:	1c43      	adds	r3, r0, #1
 8016b06:	d102      	bne.n	8016b0e <_close_r+0x1a>
 8016b08:	682b      	ldr	r3, [r5, #0]
 8016b0a:	b103      	cbz	r3, 8016b0e <_close_r+0x1a>
 8016b0c:	6023      	str	r3, [r4, #0]
 8016b0e:	bd38      	pop	{r3, r4, r5, pc}
 8016b10:	2000348c 	.word	0x2000348c

08016b14 <_fstat_r>:
 8016b14:	b538      	push	{r3, r4, r5, lr}
 8016b16:	2300      	movs	r3, #0
 8016b18:	4d06      	ldr	r5, [pc, #24]	; (8016b34 <_fstat_r+0x20>)
 8016b1a:	4604      	mov	r4, r0
 8016b1c:	4608      	mov	r0, r1
 8016b1e:	4611      	mov	r1, r2
 8016b20:	602b      	str	r3, [r5, #0]
 8016b22:	f7ea fd6e 	bl	8001602 <_fstat>
 8016b26:	1c43      	adds	r3, r0, #1
 8016b28:	d102      	bne.n	8016b30 <_fstat_r+0x1c>
 8016b2a:	682b      	ldr	r3, [r5, #0]
 8016b2c:	b103      	cbz	r3, 8016b30 <_fstat_r+0x1c>
 8016b2e:	6023      	str	r3, [r4, #0]
 8016b30:	bd38      	pop	{r3, r4, r5, pc}
 8016b32:	bf00      	nop
 8016b34:	2000348c 	.word	0x2000348c

08016b38 <_isatty_r>:
 8016b38:	b538      	push	{r3, r4, r5, lr}
 8016b3a:	2300      	movs	r3, #0
 8016b3c:	4d05      	ldr	r5, [pc, #20]	; (8016b54 <_isatty_r+0x1c>)
 8016b3e:	4604      	mov	r4, r0
 8016b40:	4608      	mov	r0, r1
 8016b42:	602b      	str	r3, [r5, #0]
 8016b44:	f7ea fd6d 	bl	8001622 <_isatty>
 8016b48:	1c43      	adds	r3, r0, #1
 8016b4a:	d102      	bne.n	8016b52 <_isatty_r+0x1a>
 8016b4c:	682b      	ldr	r3, [r5, #0]
 8016b4e:	b103      	cbz	r3, 8016b52 <_isatty_r+0x1a>
 8016b50:	6023      	str	r3, [r4, #0]
 8016b52:	bd38      	pop	{r3, r4, r5, pc}
 8016b54:	2000348c 	.word	0x2000348c

08016b58 <_lseek_r>:
 8016b58:	b538      	push	{r3, r4, r5, lr}
 8016b5a:	4604      	mov	r4, r0
 8016b5c:	4d06      	ldr	r5, [pc, #24]	; (8016b78 <_lseek_r+0x20>)
 8016b5e:	4608      	mov	r0, r1
 8016b60:	4611      	mov	r1, r2
 8016b62:	2200      	movs	r2, #0
 8016b64:	602a      	str	r2, [r5, #0]
 8016b66:	461a      	mov	r2, r3
 8016b68:	f7ea fd66 	bl	8001638 <_lseek>
 8016b6c:	1c43      	adds	r3, r0, #1
 8016b6e:	d102      	bne.n	8016b76 <_lseek_r+0x1e>
 8016b70:	682b      	ldr	r3, [r5, #0]
 8016b72:	b103      	cbz	r3, 8016b76 <_lseek_r+0x1e>
 8016b74:	6023      	str	r3, [r4, #0]
 8016b76:	bd38      	pop	{r3, r4, r5, pc}
 8016b78:	2000348c 	.word	0x2000348c

08016b7c <_read_r>:
 8016b7c:	b538      	push	{r3, r4, r5, lr}
 8016b7e:	4604      	mov	r4, r0
 8016b80:	4d06      	ldr	r5, [pc, #24]	; (8016b9c <_read_r+0x20>)
 8016b82:	4608      	mov	r0, r1
 8016b84:	4611      	mov	r1, r2
 8016b86:	2200      	movs	r2, #0
 8016b88:	602a      	str	r2, [r5, #0]
 8016b8a:	461a      	mov	r2, r3
 8016b8c:	f7ea fcf4 	bl	8001578 <_read>
 8016b90:	1c43      	adds	r3, r0, #1
 8016b92:	d102      	bne.n	8016b9a <_read_r+0x1e>
 8016b94:	682b      	ldr	r3, [r5, #0]
 8016b96:	b103      	cbz	r3, 8016b9a <_read_r+0x1e>
 8016b98:	6023      	str	r3, [r4, #0]
 8016b9a:	bd38      	pop	{r3, r4, r5, pc}
 8016b9c:	2000348c 	.word	0x2000348c

08016ba0 <_sbrk_r>:
 8016ba0:	b538      	push	{r3, r4, r5, lr}
 8016ba2:	2300      	movs	r3, #0
 8016ba4:	4d05      	ldr	r5, [pc, #20]	; (8016bbc <_sbrk_r+0x1c>)
 8016ba6:	4604      	mov	r4, r0
 8016ba8:	4608      	mov	r0, r1
 8016baa:	602b      	str	r3, [r5, #0]
 8016bac:	f7ea fd52 	bl	8001654 <_sbrk>
 8016bb0:	1c43      	adds	r3, r0, #1
 8016bb2:	d102      	bne.n	8016bba <_sbrk_r+0x1a>
 8016bb4:	682b      	ldr	r3, [r5, #0]
 8016bb6:	b103      	cbz	r3, 8016bba <_sbrk_r+0x1a>
 8016bb8:	6023      	str	r3, [r4, #0]
 8016bba:	bd38      	pop	{r3, r4, r5, pc}
 8016bbc:	2000348c 	.word	0x2000348c

08016bc0 <_write_r>:
 8016bc0:	b538      	push	{r3, r4, r5, lr}
 8016bc2:	4604      	mov	r4, r0
 8016bc4:	4d06      	ldr	r5, [pc, #24]	; (8016be0 <_write_r+0x20>)
 8016bc6:	4608      	mov	r0, r1
 8016bc8:	4611      	mov	r1, r2
 8016bca:	2200      	movs	r2, #0
 8016bcc:	602a      	str	r2, [r5, #0]
 8016bce:	461a      	mov	r2, r3
 8016bd0:	f7ea fcef 	bl	80015b2 <_write>
 8016bd4:	1c43      	adds	r3, r0, #1
 8016bd6:	d102      	bne.n	8016bde <_write_r+0x1e>
 8016bd8:	682b      	ldr	r3, [r5, #0]
 8016bda:	b103      	cbz	r3, 8016bde <_write_r+0x1e>
 8016bdc:	6023      	str	r3, [r4, #0]
 8016bde:	bd38      	pop	{r3, r4, r5, pc}
 8016be0:	2000348c 	.word	0x2000348c

08016be4 <__errno>:
 8016be4:	4b01      	ldr	r3, [pc, #4]	; (8016bec <__errno+0x8>)
 8016be6:	6818      	ldr	r0, [r3, #0]
 8016be8:	4770      	bx	lr
 8016bea:	bf00      	nop
 8016bec:	200002c4 	.word	0x200002c4

08016bf0 <__libc_init_array>:
 8016bf0:	b570      	push	{r4, r5, r6, lr}
 8016bf2:	4d0d      	ldr	r5, [pc, #52]	; (8016c28 <__libc_init_array+0x38>)
 8016bf4:	2600      	movs	r6, #0
 8016bf6:	4c0d      	ldr	r4, [pc, #52]	; (8016c2c <__libc_init_array+0x3c>)
 8016bf8:	1b64      	subs	r4, r4, r5
 8016bfa:	10a4      	asrs	r4, r4, #2
 8016bfc:	42a6      	cmp	r6, r4
 8016bfe:	d109      	bne.n	8016c14 <__libc_init_array+0x24>
 8016c00:	4d0b      	ldr	r5, [pc, #44]	; (8016c30 <__libc_init_array+0x40>)
 8016c02:	2600      	movs	r6, #0
 8016c04:	4c0b      	ldr	r4, [pc, #44]	; (8016c34 <__libc_init_array+0x44>)
 8016c06:	f003 f813 	bl	8019c30 <_init>
 8016c0a:	1b64      	subs	r4, r4, r5
 8016c0c:	10a4      	asrs	r4, r4, #2
 8016c0e:	42a6      	cmp	r6, r4
 8016c10:	d105      	bne.n	8016c1e <__libc_init_array+0x2e>
 8016c12:	bd70      	pop	{r4, r5, r6, pc}
 8016c14:	f855 3b04 	ldr.w	r3, [r5], #4
 8016c18:	3601      	adds	r6, #1
 8016c1a:	4798      	blx	r3
 8016c1c:	e7ee      	b.n	8016bfc <__libc_init_array+0xc>
 8016c1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8016c22:	3601      	adds	r6, #1
 8016c24:	4798      	blx	r3
 8016c26:	e7f2      	b.n	8016c0e <__libc_init_array+0x1e>
 8016c28:	0801d238 	.word	0x0801d238
 8016c2c:	0801d238 	.word	0x0801d238
 8016c30:	0801d238 	.word	0x0801d238
 8016c34:	0801d23c 	.word	0x0801d23c

08016c38 <__retarget_lock_init_recursive>:
 8016c38:	4770      	bx	lr

08016c3a <__retarget_lock_acquire_recursive>:
 8016c3a:	4770      	bx	lr

08016c3c <__retarget_lock_release_recursive>:
 8016c3c:	4770      	bx	lr

08016c3e <memchr>:
 8016c3e:	b2c9      	uxtb	r1, r1
 8016c40:	4402      	add	r2, r0
 8016c42:	b510      	push	{r4, lr}
 8016c44:	4290      	cmp	r0, r2
 8016c46:	4603      	mov	r3, r0
 8016c48:	d101      	bne.n	8016c4e <memchr+0x10>
 8016c4a:	2300      	movs	r3, #0
 8016c4c:	e003      	b.n	8016c56 <memchr+0x18>
 8016c4e:	781c      	ldrb	r4, [r3, #0]
 8016c50:	3001      	adds	r0, #1
 8016c52:	428c      	cmp	r4, r1
 8016c54:	d1f6      	bne.n	8016c44 <memchr+0x6>
 8016c56:	4618      	mov	r0, r3
 8016c58:	bd10      	pop	{r4, pc}

08016c5a <memcpy>:
 8016c5a:	440a      	add	r2, r1
 8016c5c:	1e43      	subs	r3, r0, #1
 8016c5e:	4291      	cmp	r1, r2
 8016c60:	d100      	bne.n	8016c64 <memcpy+0xa>
 8016c62:	4770      	bx	lr
 8016c64:	b510      	push	{r4, lr}
 8016c66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016c6a:	4291      	cmp	r1, r2
 8016c6c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016c70:	d1f9      	bne.n	8016c66 <memcpy+0xc>
 8016c72:	bd10      	pop	{r4, pc}

08016c74 <strcpy>:
 8016c74:	4603      	mov	r3, r0
 8016c76:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016c7a:	f803 2b01 	strb.w	r2, [r3], #1
 8016c7e:	2a00      	cmp	r2, #0
 8016c80:	d1f9      	bne.n	8016c76 <strcpy+0x2>
 8016c82:	4770      	bx	lr
 8016c84:	0000      	movs	r0, r0
	...

08016c88 <nan>:
 8016c88:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8016c90 <nan+0x8>
 8016c8c:	4770      	bx	lr
 8016c8e:	bf00      	nop
 8016c90:	00000000 	.word	0x00000000
 8016c94:	7ff80000 	.word	0x7ff80000

08016c98 <nanf>:
 8016c98:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8016ca0 <nanf+0x8>
 8016c9c:	4770      	bx	lr
 8016c9e:	bf00      	nop
 8016ca0:	7fc00000 	.word	0x7fc00000

08016ca4 <quorem>:
 8016ca4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ca8:	6903      	ldr	r3, [r0, #16]
 8016caa:	4607      	mov	r7, r0
 8016cac:	690c      	ldr	r4, [r1, #16]
 8016cae:	42a3      	cmp	r3, r4
 8016cb0:	f2c0 8086 	blt.w	8016dc0 <quorem+0x11c>
 8016cb4:	3c01      	subs	r4, #1
 8016cb6:	f100 0514 	add.w	r5, r0, #20
 8016cba:	f101 0814 	add.w	r8, r1, #20
 8016cbe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8016cc2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8016cc6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8016cca:	9301      	str	r3, [sp, #4]
 8016ccc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8016cd0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8016cd4:	3301      	adds	r3, #1
 8016cd6:	429a      	cmp	r2, r3
 8016cd8:	fbb2 f6f3 	udiv	r6, r2, r3
 8016cdc:	d335      	bcc.n	8016d4a <quorem+0xa6>
 8016cde:	f04f 0e00 	mov.w	lr, #0
 8016ce2:	4640      	mov	r0, r8
 8016ce4:	46ac      	mov	ip, r5
 8016ce6:	46f2      	mov	sl, lr
 8016ce8:	f850 2b04 	ldr.w	r2, [r0], #4
 8016cec:	b293      	uxth	r3, r2
 8016cee:	4581      	cmp	r9, r0
 8016cf0:	fb06 e303 	mla	r3, r6, r3, lr
 8016cf4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8016cf8:	ea4f 4213 	mov.w	r2, r3, lsr #16
 8016cfc:	b29b      	uxth	r3, r3
 8016cfe:	fb06 220e 	mla	r2, r6, lr, r2
 8016d02:	ebaa 0303 	sub.w	r3, sl, r3
 8016d06:	f8dc a000 	ldr.w	sl, [ip]
 8016d0a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8016d0e:	fa1f fa8a 	uxth.w	sl, sl
 8016d12:	b292      	uxth	r2, r2
 8016d14:	4453      	add	r3, sl
 8016d16:	9300      	str	r3, [sp, #0]
 8016d18:	f8dc 3000 	ldr.w	r3, [ip]
 8016d1c:	ebc2 4213 	rsb	r2, r2, r3, lsr #16
 8016d20:	9b00      	ldr	r3, [sp, #0]
 8016d22:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016d26:	f8bd 3000 	ldrh.w	r3, [sp]
 8016d2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016d2e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8016d32:	f84c 3b04 	str.w	r3, [ip], #4
 8016d36:	d2d7      	bcs.n	8016ce8 <quorem+0x44>
 8016d38:	f855 300b 	ldr.w	r3, [r5, fp]
 8016d3c:	b92b      	cbnz	r3, 8016d4a <quorem+0xa6>
 8016d3e:	9b01      	ldr	r3, [sp, #4]
 8016d40:	3b04      	subs	r3, #4
 8016d42:	429d      	cmp	r5, r3
 8016d44:	461a      	mov	r2, r3
 8016d46:	d32f      	bcc.n	8016da8 <quorem+0x104>
 8016d48:	613c      	str	r4, [r7, #16]
 8016d4a:	4638      	mov	r0, r7
 8016d4c:	f002 fb48 	bl	80193e0 <__mcmp>
 8016d50:	2800      	cmp	r0, #0
 8016d52:	db25      	blt.n	8016da0 <quorem+0xfc>
 8016d54:	3601      	adds	r6, #1
 8016d56:	4629      	mov	r1, r5
 8016d58:	2000      	movs	r0, #0
 8016d5a:	f858 2b04 	ldr.w	r2, [r8], #4
 8016d5e:	f8d1 c000 	ldr.w	ip, [r1]
 8016d62:	b293      	uxth	r3, r2
 8016d64:	45c1      	cmp	r9, r8
 8016d66:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8016d6a:	eba0 0303 	sub.w	r3, r0, r3
 8016d6e:	fa1f f08c 	uxth.w	r0, ip
 8016d72:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8016d76:	4403      	add	r3, r0
 8016d78:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016d7c:	b29b      	uxth	r3, r3
 8016d7e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8016d82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016d86:	f841 3b04 	str.w	r3, [r1], #4
 8016d8a:	d2e6      	bcs.n	8016d5a <quorem+0xb6>
 8016d8c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8016d90:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8016d94:	b922      	cbnz	r2, 8016da0 <quorem+0xfc>
 8016d96:	3b04      	subs	r3, #4
 8016d98:	429d      	cmp	r5, r3
 8016d9a:	461a      	mov	r2, r3
 8016d9c:	d30a      	bcc.n	8016db4 <quorem+0x110>
 8016d9e:	613c      	str	r4, [r7, #16]
 8016da0:	4630      	mov	r0, r6
 8016da2:	b003      	add	sp, #12
 8016da4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016da8:	6812      	ldr	r2, [r2, #0]
 8016daa:	3b04      	subs	r3, #4
 8016dac:	2a00      	cmp	r2, #0
 8016dae:	d1cb      	bne.n	8016d48 <quorem+0xa4>
 8016db0:	3c01      	subs	r4, #1
 8016db2:	e7c6      	b.n	8016d42 <quorem+0x9e>
 8016db4:	6812      	ldr	r2, [r2, #0]
 8016db6:	3b04      	subs	r3, #4
 8016db8:	2a00      	cmp	r2, #0
 8016dba:	d1f0      	bne.n	8016d9e <quorem+0xfa>
 8016dbc:	3c01      	subs	r4, #1
 8016dbe:	e7eb      	b.n	8016d98 <quorem+0xf4>
 8016dc0:	2000      	movs	r0, #0
 8016dc2:	e7ee      	b.n	8016da2 <quorem+0xfe>
 8016dc4:	0000      	movs	r0, r0
	...

08016dc8 <_dtoa_r>:
 8016dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016dcc:	69c5      	ldr	r5, [r0, #28]
 8016dce:	4604      	mov	r4, r0
 8016dd0:	ed2d 8b04 	vpush	{d8-d9}
 8016dd4:	b093      	sub	sp, #76	; 0x4c
 8016dd6:	ec57 6b10 	vmov	r6, r7, d0
 8016dda:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8016dde:	9107      	str	r1, [sp, #28]
 8016de0:	920a      	str	r2, [sp, #40]	; 0x28
 8016de2:	930d      	str	r3, [sp, #52]	; 0x34
 8016de4:	ed8d 0b02 	vstr	d0, [sp, #8]
 8016de8:	b975      	cbnz	r5, 8016e08 <_dtoa_r+0x40>
 8016dea:	2010      	movs	r0, #16
 8016dec:	f7fe f808 	bl	8014e00 <malloc>
 8016df0:	4602      	mov	r2, r0
 8016df2:	61e0      	str	r0, [r4, #28]
 8016df4:	b920      	cbnz	r0, 8016e00 <_dtoa_r+0x38>
 8016df6:	4bae      	ldr	r3, [pc, #696]	; (80170b0 <_dtoa_r+0x2e8>)
 8016df8:	21ef      	movs	r1, #239	; 0xef
 8016dfa:	48ae      	ldr	r0, [pc, #696]	; (80170b4 <_dtoa_r+0x2ec>)
 8016dfc:	f002 fe94 	bl	8019b28 <__assert_func>
 8016e00:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8016e04:	6005      	str	r5, [r0, #0]
 8016e06:	60c5      	str	r5, [r0, #12]
 8016e08:	69e3      	ldr	r3, [r4, #28]
 8016e0a:	6819      	ldr	r1, [r3, #0]
 8016e0c:	b151      	cbz	r1, 8016e24 <_dtoa_r+0x5c>
 8016e0e:	685a      	ldr	r2, [r3, #4]
 8016e10:	2301      	movs	r3, #1
 8016e12:	4620      	mov	r0, r4
 8016e14:	4093      	lsls	r3, r2
 8016e16:	604a      	str	r2, [r1, #4]
 8016e18:	608b      	str	r3, [r1, #8]
 8016e1a:	f002 f859 	bl	8018ed0 <_Bfree>
 8016e1e:	69e3      	ldr	r3, [r4, #28]
 8016e20:	2200      	movs	r2, #0
 8016e22:	601a      	str	r2, [r3, #0]
 8016e24:	1e3b      	subs	r3, r7, #0
 8016e26:	bfb7      	itett	lt
 8016e28:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8016e2c:	2300      	movge	r3, #0
 8016e2e:	2201      	movlt	r2, #1
 8016e30:	9303      	strlt	r3, [sp, #12]
 8016e32:	bfac      	ite	ge
 8016e34:	f8c8 3000 	strge.w	r3, [r8]
 8016e38:	f8c8 2000 	strlt.w	r2, [r8]
 8016e3c:	4b9e      	ldr	r3, [pc, #632]	; (80170b8 <_dtoa_r+0x2f0>)
 8016e3e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8016e42:	ea33 0308 	bics.w	r3, r3, r8
 8016e46:	d11b      	bne.n	8016e80 <_dtoa_r+0xb8>
 8016e48:	f242 730f 	movw	r3, #9999	; 0x270f
 8016e4c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016e4e:	6013      	str	r3, [r2, #0]
 8016e50:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8016e54:	4333      	orrs	r3, r6
 8016e56:	f000 8592 	beq.w	801797e <_dtoa_r+0xbb6>
 8016e5a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016e5c:	b963      	cbnz	r3, 8016e78 <_dtoa_r+0xb0>
 8016e5e:	4b97      	ldr	r3, [pc, #604]	; (80170bc <_dtoa_r+0x2f4>)
 8016e60:	e027      	b.n	8016eb2 <_dtoa_r+0xea>
 8016e62:	4b97      	ldr	r3, [pc, #604]	; (80170c0 <_dtoa_r+0x2f8>)
 8016e64:	9300      	str	r3, [sp, #0]
 8016e66:	3308      	adds	r3, #8
 8016e68:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8016e6a:	6013      	str	r3, [r2, #0]
 8016e6c:	9800      	ldr	r0, [sp, #0]
 8016e6e:	b013      	add	sp, #76	; 0x4c
 8016e70:	ecbd 8b04 	vpop	{d8-d9}
 8016e74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016e78:	4b90      	ldr	r3, [pc, #576]	; (80170bc <_dtoa_r+0x2f4>)
 8016e7a:	9300      	str	r3, [sp, #0]
 8016e7c:	3303      	adds	r3, #3
 8016e7e:	e7f3      	b.n	8016e68 <_dtoa_r+0xa0>
 8016e80:	ed9d 7b02 	vldr	d7, [sp, #8]
 8016e84:	2200      	movs	r2, #0
 8016e86:	2300      	movs	r3, #0
 8016e88:	ec51 0b17 	vmov	r0, r1, d7
 8016e8c:	eeb0 8a47 	vmov.f32	s16, s14
 8016e90:	eef0 8a67 	vmov.f32	s17, s15
 8016e94:	f7e9 fe26 	bl	8000ae4 <__aeabi_dcmpeq>
 8016e98:	4681      	mov	r9, r0
 8016e9a:	b160      	cbz	r0, 8016eb6 <_dtoa_r+0xee>
 8016e9c:	2301      	movs	r3, #1
 8016e9e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016ea0:	6013      	str	r3, [r2, #0]
 8016ea2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016ea4:	2b00      	cmp	r3, #0
 8016ea6:	f000 8567 	beq.w	8017978 <_dtoa_r+0xbb0>
 8016eaa:	4b86      	ldr	r3, [pc, #536]	; (80170c4 <_dtoa_r+0x2fc>)
 8016eac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8016eae:	6013      	str	r3, [r2, #0]
 8016eb0:	3b01      	subs	r3, #1
 8016eb2:	9300      	str	r3, [sp, #0]
 8016eb4:	e7da      	b.n	8016e6c <_dtoa_r+0xa4>
 8016eb6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8016eba:	eeb0 0a48 	vmov.f32	s0, s16
 8016ebe:	eef0 0a68 	vmov.f32	s1, s17
 8016ec2:	aa10      	add	r2, sp, #64	; 0x40
 8016ec4:	a911      	add	r1, sp, #68	; 0x44
 8016ec6:	4620      	mov	r0, r4
 8016ec8:	f002 fbaa 	bl	8019620 <__d2b>
 8016ecc:	4682      	mov	sl, r0
 8016ece:	2d00      	cmp	r5, #0
 8016ed0:	d07d      	beq.n	8016fce <_dtoa_r+0x206>
 8016ed2:	ee18 3a90 	vmov	r3, s17
 8016ed6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8016eda:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8016ede:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016ee2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8016ee6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8016eea:	ec51 0b18 	vmov	r0, r1, d8
 8016eee:	4619      	mov	r1, r3
 8016ef0:	2200      	movs	r2, #0
 8016ef2:	4b75      	ldr	r3, [pc, #468]	; (80170c8 <_dtoa_r+0x300>)
 8016ef4:	f7e9 f9d6 	bl	80002a4 <__aeabi_dsub>
 8016ef8:	a367      	add	r3, pc, #412	; (adr r3, 8017098 <_dtoa_r+0x2d0>)
 8016efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016efe:	f7e9 fb89 	bl	8000614 <__aeabi_dmul>
 8016f02:	a367      	add	r3, pc, #412	; (adr r3, 80170a0 <_dtoa_r+0x2d8>)
 8016f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f08:	f7e9 f9ce 	bl	80002a8 <__adddf3>
 8016f0c:	4606      	mov	r6, r0
 8016f0e:	460f      	mov	r7, r1
 8016f10:	4628      	mov	r0, r5
 8016f12:	f7e9 fb15 	bl	8000540 <__aeabi_i2d>
 8016f16:	a364      	add	r3, pc, #400	; (adr r3, 80170a8 <_dtoa_r+0x2e0>)
 8016f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f1c:	f7e9 fb7a 	bl	8000614 <__aeabi_dmul>
 8016f20:	4602      	mov	r2, r0
 8016f22:	460b      	mov	r3, r1
 8016f24:	4630      	mov	r0, r6
 8016f26:	4639      	mov	r1, r7
 8016f28:	f7e9 f9be 	bl	80002a8 <__adddf3>
 8016f2c:	4606      	mov	r6, r0
 8016f2e:	460f      	mov	r7, r1
 8016f30:	f7e9 fe20 	bl	8000b74 <__aeabi_d2iz>
 8016f34:	2200      	movs	r2, #0
 8016f36:	4683      	mov	fp, r0
 8016f38:	2300      	movs	r3, #0
 8016f3a:	4630      	mov	r0, r6
 8016f3c:	4639      	mov	r1, r7
 8016f3e:	f7e9 fddb 	bl	8000af8 <__aeabi_dcmplt>
 8016f42:	b148      	cbz	r0, 8016f58 <_dtoa_r+0x190>
 8016f44:	4658      	mov	r0, fp
 8016f46:	f7e9 fafb 	bl	8000540 <__aeabi_i2d>
 8016f4a:	4632      	mov	r2, r6
 8016f4c:	463b      	mov	r3, r7
 8016f4e:	f7e9 fdc9 	bl	8000ae4 <__aeabi_dcmpeq>
 8016f52:	b908      	cbnz	r0, 8016f58 <_dtoa_r+0x190>
 8016f54:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8016f58:	f1bb 0f16 	cmp.w	fp, #22
 8016f5c:	d857      	bhi.n	801700e <_dtoa_r+0x246>
 8016f5e:	4b5b      	ldr	r3, [pc, #364]	; (80170cc <_dtoa_r+0x304>)
 8016f60:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8016f64:	ec51 0b18 	vmov	r0, r1, d8
 8016f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f6c:	f7e9 fdc4 	bl	8000af8 <__aeabi_dcmplt>
 8016f70:	2800      	cmp	r0, #0
 8016f72:	d04e      	beq.n	8017012 <_dtoa_r+0x24a>
 8016f74:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8016f78:	2300      	movs	r3, #0
 8016f7a:	930c      	str	r3, [sp, #48]	; 0x30
 8016f7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016f7e:	1b5b      	subs	r3, r3, r5
 8016f80:	1e5a      	subs	r2, r3, #1
 8016f82:	bf4c      	ite	mi
 8016f84:	f1c3 0301 	rsbmi	r3, r3, #1
 8016f88:	2300      	movpl	r3, #0
 8016f8a:	9206      	str	r2, [sp, #24]
 8016f8c:	bf45      	ittet	mi
 8016f8e:	9305      	strmi	r3, [sp, #20]
 8016f90:	2300      	movmi	r3, #0
 8016f92:	9305      	strpl	r3, [sp, #20]
 8016f94:	9306      	strmi	r3, [sp, #24]
 8016f96:	f1bb 0f00 	cmp.w	fp, #0
 8016f9a:	db3c      	blt.n	8017016 <_dtoa_r+0x24e>
 8016f9c:	9b06      	ldr	r3, [sp, #24]
 8016f9e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8016fa2:	445b      	add	r3, fp
 8016fa4:	9306      	str	r3, [sp, #24]
 8016fa6:	2300      	movs	r3, #0
 8016fa8:	9308      	str	r3, [sp, #32]
 8016faa:	9b07      	ldr	r3, [sp, #28]
 8016fac:	2b09      	cmp	r3, #9
 8016fae:	d868      	bhi.n	8017082 <_dtoa_r+0x2ba>
 8016fb0:	2b05      	cmp	r3, #5
 8016fb2:	bfc5      	ittet	gt
 8016fb4:	3b04      	subgt	r3, #4
 8016fb6:	2500      	movgt	r5, #0
 8016fb8:	2501      	movle	r5, #1
 8016fba:	9307      	strgt	r3, [sp, #28]
 8016fbc:	9b07      	ldr	r3, [sp, #28]
 8016fbe:	3b02      	subs	r3, #2
 8016fc0:	2b03      	cmp	r3, #3
 8016fc2:	f200 8087 	bhi.w	80170d4 <_dtoa_r+0x30c>
 8016fc6:	e8df f003 	tbb	[pc, r3]
 8016fca:	3d30      	.short	0x3d30
 8016fcc:	5a3b      	.short	0x5a3b
 8016fce:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8016fd2:	441d      	add	r5, r3
 8016fd4:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8016fd8:	2b20      	cmp	r3, #32
 8016fda:	bfc9      	itett	gt
 8016fdc:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8016fe0:	f1c3 0320 	rsble	r3, r3, #32
 8016fe4:	fa08 f803 	lslgt.w	r8, r8, r3
 8016fe8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8016fec:	bfd8      	it	le
 8016fee:	fa06 f003 	lslle.w	r0, r6, r3
 8016ff2:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8016ff6:	bfc4      	itt	gt
 8016ff8:	fa26 f303 	lsrgt.w	r3, r6, r3
 8016ffc:	ea48 0003 	orrgt.w	r0, r8, r3
 8017000:	f7e9 fa8e 	bl	8000520 <__aeabi_ui2d>
 8017004:	2201      	movs	r2, #1
 8017006:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 801700a:	920e      	str	r2, [sp, #56]	; 0x38
 801700c:	e76f      	b.n	8016eee <_dtoa_r+0x126>
 801700e:	2301      	movs	r3, #1
 8017010:	e7b3      	b.n	8016f7a <_dtoa_r+0x1b2>
 8017012:	900c      	str	r0, [sp, #48]	; 0x30
 8017014:	e7b2      	b.n	8016f7c <_dtoa_r+0x1b4>
 8017016:	9b05      	ldr	r3, [sp, #20]
 8017018:	eba3 030b 	sub.w	r3, r3, fp
 801701c:	9305      	str	r3, [sp, #20]
 801701e:	f1cb 0300 	rsb	r3, fp, #0
 8017022:	9308      	str	r3, [sp, #32]
 8017024:	2300      	movs	r3, #0
 8017026:	930b      	str	r3, [sp, #44]	; 0x2c
 8017028:	e7bf      	b.n	8016faa <_dtoa_r+0x1e2>
 801702a:	2300      	movs	r3, #0
 801702c:	9309      	str	r3, [sp, #36]	; 0x24
 801702e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017030:	2b00      	cmp	r3, #0
 8017032:	dc52      	bgt.n	80170da <_dtoa_r+0x312>
 8017034:	2301      	movs	r3, #1
 8017036:	461a      	mov	r2, r3
 8017038:	9301      	str	r3, [sp, #4]
 801703a:	9304      	str	r3, [sp, #16]
 801703c:	920a      	str	r2, [sp, #40]	; 0x28
 801703e:	e00b      	b.n	8017058 <_dtoa_r+0x290>
 8017040:	2301      	movs	r3, #1
 8017042:	e7f3      	b.n	801702c <_dtoa_r+0x264>
 8017044:	2300      	movs	r3, #0
 8017046:	9309      	str	r3, [sp, #36]	; 0x24
 8017048:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801704a:	445b      	add	r3, fp
 801704c:	9301      	str	r3, [sp, #4]
 801704e:	3301      	adds	r3, #1
 8017050:	2b01      	cmp	r3, #1
 8017052:	9304      	str	r3, [sp, #16]
 8017054:	bfb8      	it	lt
 8017056:	2301      	movlt	r3, #1
 8017058:	69e0      	ldr	r0, [r4, #28]
 801705a:	2100      	movs	r1, #0
 801705c:	2204      	movs	r2, #4
 801705e:	f102 0614 	add.w	r6, r2, #20
 8017062:	429e      	cmp	r6, r3
 8017064:	d93d      	bls.n	80170e2 <_dtoa_r+0x31a>
 8017066:	6041      	str	r1, [r0, #4]
 8017068:	4620      	mov	r0, r4
 801706a:	f001 fef1 	bl	8018e50 <_Balloc>
 801706e:	9000      	str	r0, [sp, #0]
 8017070:	2800      	cmp	r0, #0
 8017072:	d139      	bne.n	80170e8 <_dtoa_r+0x320>
 8017074:	4b16      	ldr	r3, [pc, #88]	; (80170d0 <_dtoa_r+0x308>)
 8017076:	4602      	mov	r2, r0
 8017078:	f240 11af 	movw	r1, #431	; 0x1af
 801707c:	e6bd      	b.n	8016dfa <_dtoa_r+0x32>
 801707e:	2301      	movs	r3, #1
 8017080:	e7e1      	b.n	8017046 <_dtoa_r+0x27e>
 8017082:	2501      	movs	r5, #1
 8017084:	2300      	movs	r3, #0
 8017086:	9509      	str	r5, [sp, #36]	; 0x24
 8017088:	9307      	str	r3, [sp, #28]
 801708a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801708e:	2200      	movs	r2, #0
 8017090:	9301      	str	r3, [sp, #4]
 8017092:	9304      	str	r3, [sp, #16]
 8017094:	2312      	movs	r3, #18
 8017096:	e7d1      	b.n	801703c <_dtoa_r+0x274>
 8017098:	636f4361 	.word	0x636f4361
 801709c:	3fd287a7 	.word	0x3fd287a7
 80170a0:	8b60c8b3 	.word	0x8b60c8b3
 80170a4:	3fc68a28 	.word	0x3fc68a28
 80170a8:	509f79fb 	.word	0x509f79fb
 80170ac:	3fd34413 	.word	0x3fd34413
 80170b0:	0801cf8e 	.word	0x0801cf8e
 80170b4:	0801cfa5 	.word	0x0801cfa5
 80170b8:	7ff00000 	.word	0x7ff00000
 80170bc:	0801cf8a 	.word	0x0801cf8a
 80170c0:	0801cf81 	.word	0x0801cf81
 80170c4:	0801d096 	.word	0x0801d096
 80170c8:	3ff80000 	.word	0x3ff80000
 80170cc:	0801d120 	.word	0x0801d120
 80170d0:	0801cffd 	.word	0x0801cffd
 80170d4:	2301      	movs	r3, #1
 80170d6:	9309      	str	r3, [sp, #36]	; 0x24
 80170d8:	e7d7      	b.n	801708a <_dtoa_r+0x2c2>
 80170da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80170dc:	9301      	str	r3, [sp, #4]
 80170de:	9304      	str	r3, [sp, #16]
 80170e0:	e7ba      	b.n	8017058 <_dtoa_r+0x290>
 80170e2:	3101      	adds	r1, #1
 80170e4:	0052      	lsls	r2, r2, #1
 80170e6:	e7ba      	b.n	801705e <_dtoa_r+0x296>
 80170e8:	69e3      	ldr	r3, [r4, #28]
 80170ea:	9a00      	ldr	r2, [sp, #0]
 80170ec:	601a      	str	r2, [r3, #0]
 80170ee:	9b04      	ldr	r3, [sp, #16]
 80170f0:	2b0e      	cmp	r3, #14
 80170f2:	f200 80a8 	bhi.w	8017246 <_dtoa_r+0x47e>
 80170f6:	2d00      	cmp	r5, #0
 80170f8:	f000 80a5 	beq.w	8017246 <_dtoa_r+0x47e>
 80170fc:	f1bb 0f00 	cmp.w	fp, #0
 8017100:	dd38      	ble.n	8017174 <_dtoa_r+0x3ac>
 8017102:	f00b 020f 	and.w	r2, fp, #15
 8017106:	4bbf      	ldr	r3, [pc, #764]	; (8017404 <_dtoa_r+0x63c>)
 8017108:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801710c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8017110:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017114:	e9d3 6700 	ldrd	r6, r7, [r3]
 8017118:	d019      	beq.n	801714e <_dtoa_r+0x386>
 801711a:	4bbb      	ldr	r3, [pc, #748]	; (8017408 <_dtoa_r+0x640>)
 801711c:	f008 080f 	and.w	r8, r8, #15
 8017120:	2503      	movs	r5, #3
 8017122:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8017126:	ec51 0b18 	vmov	r0, r1, d8
 801712a:	f7e9 fb9d 	bl	8000868 <__aeabi_ddiv>
 801712e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017132:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8017408 <_dtoa_r+0x640>
 8017136:	f1b8 0f00 	cmp.w	r8, #0
 801713a:	d10a      	bne.n	8017152 <_dtoa_r+0x38a>
 801713c:	4632      	mov	r2, r6
 801713e:	463b      	mov	r3, r7
 8017140:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017144:	f7e9 fb90 	bl	8000868 <__aeabi_ddiv>
 8017148:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801714c:	e02b      	b.n	80171a6 <_dtoa_r+0x3de>
 801714e:	2502      	movs	r5, #2
 8017150:	e7ef      	b.n	8017132 <_dtoa_r+0x36a>
 8017152:	f018 0f01 	tst.w	r8, #1
 8017156:	d008      	beq.n	801716a <_dtoa_r+0x3a2>
 8017158:	4630      	mov	r0, r6
 801715a:	4639      	mov	r1, r7
 801715c:	3501      	adds	r5, #1
 801715e:	e9d9 2300 	ldrd	r2, r3, [r9]
 8017162:	f7e9 fa57 	bl	8000614 <__aeabi_dmul>
 8017166:	4606      	mov	r6, r0
 8017168:	460f      	mov	r7, r1
 801716a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801716e:	f109 0908 	add.w	r9, r9, #8
 8017172:	e7e0      	b.n	8017136 <_dtoa_r+0x36e>
 8017174:	f000 809f 	beq.w	80172b6 <_dtoa_r+0x4ee>
 8017178:	f1cb 0600 	rsb	r6, fp, #0
 801717c:	4ba1      	ldr	r3, [pc, #644]	; (8017404 <_dtoa_r+0x63c>)
 801717e:	4fa2      	ldr	r7, [pc, #648]	; (8017408 <_dtoa_r+0x640>)
 8017180:	2502      	movs	r5, #2
 8017182:	f006 020f 	and.w	r2, r6, #15
 8017186:	1136      	asrs	r6, r6, #4
 8017188:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801718c:	ec51 0b18 	vmov	r0, r1, d8
 8017190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017194:	f7e9 fa3e 	bl	8000614 <__aeabi_dmul>
 8017198:	2300      	movs	r3, #0
 801719a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801719e:	2e00      	cmp	r6, #0
 80171a0:	d17e      	bne.n	80172a0 <_dtoa_r+0x4d8>
 80171a2:	2b00      	cmp	r3, #0
 80171a4:	d1d0      	bne.n	8017148 <_dtoa_r+0x380>
 80171a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80171a8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80171ac:	2b00      	cmp	r3, #0
 80171ae:	f000 8084 	beq.w	80172ba <_dtoa_r+0x4f2>
 80171b2:	2200      	movs	r2, #0
 80171b4:	4b95      	ldr	r3, [pc, #596]	; (801740c <_dtoa_r+0x644>)
 80171b6:	4640      	mov	r0, r8
 80171b8:	4649      	mov	r1, r9
 80171ba:	f7e9 fc9d 	bl	8000af8 <__aeabi_dcmplt>
 80171be:	2800      	cmp	r0, #0
 80171c0:	d07b      	beq.n	80172ba <_dtoa_r+0x4f2>
 80171c2:	9b04      	ldr	r3, [sp, #16]
 80171c4:	2b00      	cmp	r3, #0
 80171c6:	d078      	beq.n	80172ba <_dtoa_r+0x4f2>
 80171c8:	9b01      	ldr	r3, [sp, #4]
 80171ca:	2b00      	cmp	r3, #0
 80171cc:	dd39      	ble.n	8017242 <_dtoa_r+0x47a>
 80171ce:	2200      	movs	r2, #0
 80171d0:	4b8f      	ldr	r3, [pc, #572]	; (8017410 <_dtoa_r+0x648>)
 80171d2:	4640      	mov	r0, r8
 80171d4:	4649      	mov	r1, r9
 80171d6:	f7e9 fa1d 	bl	8000614 <__aeabi_dmul>
 80171da:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 80171de:	3501      	adds	r5, #1
 80171e0:	9e01      	ldr	r6, [sp, #4]
 80171e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80171e6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80171ea:	4628      	mov	r0, r5
 80171ec:	f7e9 f9a8 	bl	8000540 <__aeabi_i2d>
 80171f0:	4642      	mov	r2, r8
 80171f2:	464b      	mov	r3, r9
 80171f4:	f7e9 fa0e 	bl	8000614 <__aeabi_dmul>
 80171f8:	4b86      	ldr	r3, [pc, #536]	; (8017414 <_dtoa_r+0x64c>)
 80171fa:	2200      	movs	r2, #0
 80171fc:	f7e9 f854 	bl	80002a8 <__adddf3>
 8017200:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8017204:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017208:	9303      	str	r3, [sp, #12]
 801720a:	2e00      	cmp	r6, #0
 801720c:	d158      	bne.n	80172c0 <_dtoa_r+0x4f8>
 801720e:	2200      	movs	r2, #0
 8017210:	4b81      	ldr	r3, [pc, #516]	; (8017418 <_dtoa_r+0x650>)
 8017212:	4640      	mov	r0, r8
 8017214:	4649      	mov	r1, r9
 8017216:	f7e9 f845 	bl	80002a4 <__aeabi_dsub>
 801721a:	4680      	mov	r8, r0
 801721c:	4689      	mov	r9, r1
 801721e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017222:	f7e9 fc87 	bl	8000b34 <__aeabi_dcmpgt>
 8017226:	2800      	cmp	r0, #0
 8017228:	f040 8296 	bne.w	8017758 <_dtoa_r+0x990>
 801722c:	4640      	mov	r0, r8
 801722e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8017232:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017236:	4649      	mov	r1, r9
 8017238:	f7e9 fc5e 	bl	8000af8 <__aeabi_dcmplt>
 801723c:	2800      	cmp	r0, #0
 801723e:	f040 8289 	bne.w	8017754 <_dtoa_r+0x98c>
 8017242:	ed8d 8b02 	vstr	d8, [sp, #8]
 8017246:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017248:	2b00      	cmp	r3, #0
 801724a:	f2c0 814e 	blt.w	80174ea <_dtoa_r+0x722>
 801724e:	f1bb 0f0e 	cmp.w	fp, #14
 8017252:	f300 814a 	bgt.w	80174ea <_dtoa_r+0x722>
 8017256:	4b6b      	ldr	r3, [pc, #428]	; (8017404 <_dtoa_r+0x63c>)
 8017258:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801725c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8017260:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017262:	2b00      	cmp	r3, #0
 8017264:	f280 80dc 	bge.w	8017420 <_dtoa_r+0x658>
 8017268:	9b04      	ldr	r3, [sp, #16]
 801726a:	2b00      	cmp	r3, #0
 801726c:	f300 80d8 	bgt.w	8017420 <_dtoa_r+0x658>
 8017270:	f040 826f 	bne.w	8017752 <_dtoa_r+0x98a>
 8017274:	2200      	movs	r2, #0
 8017276:	4b68      	ldr	r3, [pc, #416]	; (8017418 <_dtoa_r+0x650>)
 8017278:	4640      	mov	r0, r8
 801727a:	4649      	mov	r1, r9
 801727c:	f7e9 f9ca 	bl	8000614 <__aeabi_dmul>
 8017280:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017284:	f7e9 fc4c 	bl	8000b20 <__aeabi_dcmpge>
 8017288:	9e04      	ldr	r6, [sp, #16]
 801728a:	4637      	mov	r7, r6
 801728c:	2800      	cmp	r0, #0
 801728e:	f040 8245 	bne.w	801771c <_dtoa_r+0x954>
 8017292:	9d00      	ldr	r5, [sp, #0]
 8017294:	2331      	movs	r3, #49	; 0x31
 8017296:	f10b 0b01 	add.w	fp, fp, #1
 801729a:	f805 3b01 	strb.w	r3, [r5], #1
 801729e:	e241      	b.n	8017724 <_dtoa_r+0x95c>
 80172a0:	07f2      	lsls	r2, r6, #31
 80172a2:	d505      	bpl.n	80172b0 <_dtoa_r+0x4e8>
 80172a4:	3501      	adds	r5, #1
 80172a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80172aa:	f7e9 f9b3 	bl	8000614 <__aeabi_dmul>
 80172ae:	2301      	movs	r3, #1
 80172b0:	1076      	asrs	r6, r6, #1
 80172b2:	3708      	adds	r7, #8
 80172b4:	e773      	b.n	801719e <_dtoa_r+0x3d6>
 80172b6:	2502      	movs	r5, #2
 80172b8:	e775      	b.n	80171a6 <_dtoa_r+0x3de>
 80172ba:	465f      	mov	r7, fp
 80172bc:	9e04      	ldr	r6, [sp, #16]
 80172be:	e792      	b.n	80171e6 <_dtoa_r+0x41e>
 80172c0:	9900      	ldr	r1, [sp, #0]
 80172c2:	4b50      	ldr	r3, [pc, #320]	; (8017404 <_dtoa_r+0x63c>)
 80172c4:	4431      	add	r1, r6
 80172c6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80172ca:	ed9d 7b02 	vldr	d7, [sp, #8]
 80172ce:	9102      	str	r1, [sp, #8]
 80172d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80172d2:	eeb0 9a47 	vmov.f32	s18, s14
 80172d6:	eef0 9a67 	vmov.f32	s19, s15
 80172da:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80172de:	2900      	cmp	r1, #0
 80172e0:	d044      	beq.n	801736c <_dtoa_r+0x5a4>
 80172e2:	2000      	movs	r0, #0
 80172e4:	494d      	ldr	r1, [pc, #308]	; (801741c <_dtoa_r+0x654>)
 80172e6:	f7e9 fabf 	bl	8000868 <__aeabi_ddiv>
 80172ea:	ec53 2b19 	vmov	r2, r3, d9
 80172ee:	f7e8 ffd9 	bl	80002a4 <__aeabi_dsub>
 80172f2:	9d00      	ldr	r5, [sp, #0]
 80172f4:	ec41 0b19 	vmov	d9, r0, r1
 80172f8:	4649      	mov	r1, r9
 80172fa:	4640      	mov	r0, r8
 80172fc:	f7e9 fc3a 	bl	8000b74 <__aeabi_d2iz>
 8017300:	4606      	mov	r6, r0
 8017302:	f7e9 f91d 	bl	8000540 <__aeabi_i2d>
 8017306:	4602      	mov	r2, r0
 8017308:	3630      	adds	r6, #48	; 0x30
 801730a:	460b      	mov	r3, r1
 801730c:	4640      	mov	r0, r8
 801730e:	4649      	mov	r1, r9
 8017310:	f7e8 ffc8 	bl	80002a4 <__aeabi_dsub>
 8017314:	f805 6b01 	strb.w	r6, [r5], #1
 8017318:	4680      	mov	r8, r0
 801731a:	4689      	mov	r9, r1
 801731c:	ec53 2b19 	vmov	r2, r3, d9
 8017320:	f7e9 fbea 	bl	8000af8 <__aeabi_dcmplt>
 8017324:	2800      	cmp	r0, #0
 8017326:	d164      	bne.n	80173f2 <_dtoa_r+0x62a>
 8017328:	4642      	mov	r2, r8
 801732a:	464b      	mov	r3, r9
 801732c:	2000      	movs	r0, #0
 801732e:	4937      	ldr	r1, [pc, #220]	; (801740c <_dtoa_r+0x644>)
 8017330:	f7e8 ffb8 	bl	80002a4 <__aeabi_dsub>
 8017334:	ec53 2b19 	vmov	r2, r3, d9
 8017338:	f7e9 fbde 	bl	8000af8 <__aeabi_dcmplt>
 801733c:	2800      	cmp	r0, #0
 801733e:	f040 80b6 	bne.w	80174ae <_dtoa_r+0x6e6>
 8017342:	9b02      	ldr	r3, [sp, #8]
 8017344:	429d      	cmp	r5, r3
 8017346:	f43f af7c 	beq.w	8017242 <_dtoa_r+0x47a>
 801734a:	2200      	movs	r2, #0
 801734c:	4b30      	ldr	r3, [pc, #192]	; (8017410 <_dtoa_r+0x648>)
 801734e:	ec51 0b19 	vmov	r0, r1, d9
 8017352:	f7e9 f95f 	bl	8000614 <__aeabi_dmul>
 8017356:	2200      	movs	r2, #0
 8017358:	4b2d      	ldr	r3, [pc, #180]	; (8017410 <_dtoa_r+0x648>)
 801735a:	ec41 0b19 	vmov	d9, r0, r1
 801735e:	4640      	mov	r0, r8
 8017360:	4649      	mov	r1, r9
 8017362:	f7e9 f957 	bl	8000614 <__aeabi_dmul>
 8017366:	4680      	mov	r8, r0
 8017368:	4689      	mov	r9, r1
 801736a:	e7c5      	b.n	80172f8 <_dtoa_r+0x530>
 801736c:	ec51 0b17 	vmov	r0, r1, d7
 8017370:	f7e9 f950 	bl	8000614 <__aeabi_dmul>
 8017374:	9b02      	ldr	r3, [sp, #8]
 8017376:	9d00      	ldr	r5, [sp, #0]
 8017378:	930f      	str	r3, [sp, #60]	; 0x3c
 801737a:	ec41 0b19 	vmov	d9, r0, r1
 801737e:	4649      	mov	r1, r9
 8017380:	4640      	mov	r0, r8
 8017382:	f7e9 fbf7 	bl	8000b74 <__aeabi_d2iz>
 8017386:	4606      	mov	r6, r0
 8017388:	f7e9 f8da 	bl	8000540 <__aeabi_i2d>
 801738c:	4602      	mov	r2, r0
 801738e:	460b      	mov	r3, r1
 8017390:	4640      	mov	r0, r8
 8017392:	4649      	mov	r1, r9
 8017394:	3630      	adds	r6, #48	; 0x30
 8017396:	f7e8 ff85 	bl	80002a4 <__aeabi_dsub>
 801739a:	9b02      	ldr	r3, [sp, #8]
 801739c:	f805 6b01 	strb.w	r6, [r5], #1
 80173a0:	4680      	mov	r8, r0
 80173a2:	429d      	cmp	r5, r3
 80173a4:	4689      	mov	r9, r1
 80173a6:	f04f 0200 	mov.w	r2, #0
 80173aa:	d124      	bne.n	80173f6 <_dtoa_r+0x62e>
 80173ac:	4b1b      	ldr	r3, [pc, #108]	; (801741c <_dtoa_r+0x654>)
 80173ae:	ec51 0b19 	vmov	r0, r1, d9
 80173b2:	f7e8 ff79 	bl	80002a8 <__adddf3>
 80173b6:	4602      	mov	r2, r0
 80173b8:	460b      	mov	r3, r1
 80173ba:	4640      	mov	r0, r8
 80173bc:	4649      	mov	r1, r9
 80173be:	f7e9 fbb9 	bl	8000b34 <__aeabi_dcmpgt>
 80173c2:	2800      	cmp	r0, #0
 80173c4:	d173      	bne.n	80174ae <_dtoa_r+0x6e6>
 80173c6:	2000      	movs	r0, #0
 80173c8:	4914      	ldr	r1, [pc, #80]	; (801741c <_dtoa_r+0x654>)
 80173ca:	ec53 2b19 	vmov	r2, r3, d9
 80173ce:	f7e8 ff69 	bl	80002a4 <__aeabi_dsub>
 80173d2:	4602      	mov	r2, r0
 80173d4:	460b      	mov	r3, r1
 80173d6:	4640      	mov	r0, r8
 80173d8:	4649      	mov	r1, r9
 80173da:	f7e9 fb8d 	bl	8000af8 <__aeabi_dcmplt>
 80173de:	2800      	cmp	r0, #0
 80173e0:	f43f af2f 	beq.w	8017242 <_dtoa_r+0x47a>
 80173e4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80173e6:	1e6b      	subs	r3, r5, #1
 80173e8:	930f      	str	r3, [sp, #60]	; 0x3c
 80173ea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80173ee:	2b30      	cmp	r3, #48	; 0x30
 80173f0:	d0f8      	beq.n	80173e4 <_dtoa_r+0x61c>
 80173f2:	46bb      	mov	fp, r7
 80173f4:	e04a      	b.n	801748c <_dtoa_r+0x6c4>
 80173f6:	4b06      	ldr	r3, [pc, #24]	; (8017410 <_dtoa_r+0x648>)
 80173f8:	f7e9 f90c 	bl	8000614 <__aeabi_dmul>
 80173fc:	4680      	mov	r8, r0
 80173fe:	4689      	mov	r9, r1
 8017400:	e7bd      	b.n	801737e <_dtoa_r+0x5b6>
 8017402:	bf00      	nop
 8017404:	0801d120 	.word	0x0801d120
 8017408:	0801d0f8 	.word	0x0801d0f8
 801740c:	3ff00000 	.word	0x3ff00000
 8017410:	40240000 	.word	0x40240000
 8017414:	401c0000 	.word	0x401c0000
 8017418:	40140000 	.word	0x40140000
 801741c:	3fe00000 	.word	0x3fe00000
 8017420:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8017424:	9d00      	ldr	r5, [sp, #0]
 8017426:	4642      	mov	r2, r8
 8017428:	464b      	mov	r3, r9
 801742a:	4630      	mov	r0, r6
 801742c:	4639      	mov	r1, r7
 801742e:	f7e9 fa1b 	bl	8000868 <__aeabi_ddiv>
 8017432:	f7e9 fb9f 	bl	8000b74 <__aeabi_d2iz>
 8017436:	9001      	str	r0, [sp, #4]
 8017438:	f7e9 f882 	bl	8000540 <__aeabi_i2d>
 801743c:	4642      	mov	r2, r8
 801743e:	464b      	mov	r3, r9
 8017440:	f7e9 f8e8 	bl	8000614 <__aeabi_dmul>
 8017444:	4602      	mov	r2, r0
 8017446:	460b      	mov	r3, r1
 8017448:	4630      	mov	r0, r6
 801744a:	4639      	mov	r1, r7
 801744c:	f7e8 ff2a 	bl	80002a4 <__aeabi_dsub>
 8017450:	9e01      	ldr	r6, [sp, #4]
 8017452:	9f04      	ldr	r7, [sp, #16]
 8017454:	4602      	mov	r2, r0
 8017456:	3630      	adds	r6, #48	; 0x30
 8017458:	460b      	mov	r3, r1
 801745a:	f805 6b01 	strb.w	r6, [r5], #1
 801745e:	9e00      	ldr	r6, [sp, #0]
 8017460:	1bae      	subs	r6, r5, r6
 8017462:	42b7      	cmp	r7, r6
 8017464:	d134      	bne.n	80174d0 <_dtoa_r+0x708>
 8017466:	f7e8 ff1f 	bl	80002a8 <__adddf3>
 801746a:	4642      	mov	r2, r8
 801746c:	464b      	mov	r3, r9
 801746e:	4606      	mov	r6, r0
 8017470:	460f      	mov	r7, r1
 8017472:	f7e9 fb5f 	bl	8000b34 <__aeabi_dcmpgt>
 8017476:	b9c8      	cbnz	r0, 80174ac <_dtoa_r+0x6e4>
 8017478:	4642      	mov	r2, r8
 801747a:	464b      	mov	r3, r9
 801747c:	4630      	mov	r0, r6
 801747e:	4639      	mov	r1, r7
 8017480:	f7e9 fb30 	bl	8000ae4 <__aeabi_dcmpeq>
 8017484:	b110      	cbz	r0, 801748c <_dtoa_r+0x6c4>
 8017486:	9b01      	ldr	r3, [sp, #4]
 8017488:	07db      	lsls	r3, r3, #31
 801748a:	d40f      	bmi.n	80174ac <_dtoa_r+0x6e4>
 801748c:	4651      	mov	r1, sl
 801748e:	4620      	mov	r0, r4
 8017490:	f001 fd1e 	bl	8018ed0 <_Bfree>
 8017494:	2300      	movs	r3, #0
 8017496:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017498:	702b      	strb	r3, [r5, #0]
 801749a:	f10b 0301 	add.w	r3, fp, #1
 801749e:	6013      	str	r3, [r2, #0]
 80174a0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80174a2:	2b00      	cmp	r3, #0
 80174a4:	f43f ace2 	beq.w	8016e6c <_dtoa_r+0xa4>
 80174a8:	601d      	str	r5, [r3, #0]
 80174aa:	e4df      	b.n	8016e6c <_dtoa_r+0xa4>
 80174ac:	465f      	mov	r7, fp
 80174ae:	462b      	mov	r3, r5
 80174b0:	461d      	mov	r5, r3
 80174b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80174b6:	2a39      	cmp	r2, #57	; 0x39
 80174b8:	d106      	bne.n	80174c8 <_dtoa_r+0x700>
 80174ba:	9a00      	ldr	r2, [sp, #0]
 80174bc:	429a      	cmp	r2, r3
 80174be:	d1f7      	bne.n	80174b0 <_dtoa_r+0x6e8>
 80174c0:	2230      	movs	r2, #48	; 0x30
 80174c2:	9900      	ldr	r1, [sp, #0]
 80174c4:	3701      	adds	r7, #1
 80174c6:	700a      	strb	r2, [r1, #0]
 80174c8:	781a      	ldrb	r2, [r3, #0]
 80174ca:	3201      	adds	r2, #1
 80174cc:	701a      	strb	r2, [r3, #0]
 80174ce:	e790      	b.n	80173f2 <_dtoa_r+0x62a>
 80174d0:	2200      	movs	r2, #0
 80174d2:	4ba3      	ldr	r3, [pc, #652]	; (8017760 <_dtoa_r+0x998>)
 80174d4:	f7e9 f89e 	bl	8000614 <__aeabi_dmul>
 80174d8:	2200      	movs	r2, #0
 80174da:	2300      	movs	r3, #0
 80174dc:	4606      	mov	r6, r0
 80174de:	460f      	mov	r7, r1
 80174e0:	f7e9 fb00 	bl	8000ae4 <__aeabi_dcmpeq>
 80174e4:	2800      	cmp	r0, #0
 80174e6:	d09e      	beq.n	8017426 <_dtoa_r+0x65e>
 80174e8:	e7d0      	b.n	801748c <_dtoa_r+0x6c4>
 80174ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80174ec:	2a00      	cmp	r2, #0
 80174ee:	f000 80ca 	beq.w	8017686 <_dtoa_r+0x8be>
 80174f2:	9a07      	ldr	r2, [sp, #28]
 80174f4:	2a01      	cmp	r2, #1
 80174f6:	f300 80ad 	bgt.w	8017654 <_dtoa_r+0x88c>
 80174fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80174fc:	2a00      	cmp	r2, #0
 80174fe:	f000 80a5 	beq.w	801764c <_dtoa_r+0x884>
 8017502:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8017506:	9e08      	ldr	r6, [sp, #32]
 8017508:	9d05      	ldr	r5, [sp, #20]
 801750a:	9a05      	ldr	r2, [sp, #20]
 801750c:	2101      	movs	r1, #1
 801750e:	4620      	mov	r0, r4
 8017510:	441a      	add	r2, r3
 8017512:	9205      	str	r2, [sp, #20]
 8017514:	9a06      	ldr	r2, [sp, #24]
 8017516:	441a      	add	r2, r3
 8017518:	9206      	str	r2, [sp, #24]
 801751a:	f001 fddb 	bl	80190d4 <__i2b>
 801751e:	4607      	mov	r7, r0
 8017520:	b165      	cbz	r5, 801753c <_dtoa_r+0x774>
 8017522:	9b06      	ldr	r3, [sp, #24]
 8017524:	2b00      	cmp	r3, #0
 8017526:	dd09      	ble.n	801753c <_dtoa_r+0x774>
 8017528:	42ab      	cmp	r3, r5
 801752a:	9a05      	ldr	r2, [sp, #20]
 801752c:	bfa8      	it	ge
 801752e:	462b      	movge	r3, r5
 8017530:	1ad2      	subs	r2, r2, r3
 8017532:	1aed      	subs	r5, r5, r3
 8017534:	9205      	str	r2, [sp, #20]
 8017536:	9a06      	ldr	r2, [sp, #24]
 8017538:	1ad3      	subs	r3, r2, r3
 801753a:	9306      	str	r3, [sp, #24]
 801753c:	9b08      	ldr	r3, [sp, #32]
 801753e:	b1f3      	cbz	r3, 801757e <_dtoa_r+0x7b6>
 8017540:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017542:	2b00      	cmp	r3, #0
 8017544:	f000 80a3 	beq.w	801768e <_dtoa_r+0x8c6>
 8017548:	2e00      	cmp	r6, #0
 801754a:	dd10      	ble.n	801756e <_dtoa_r+0x7a6>
 801754c:	4639      	mov	r1, r7
 801754e:	4632      	mov	r2, r6
 8017550:	4620      	mov	r0, r4
 8017552:	f001 fe7f 	bl	8019254 <__pow5mult>
 8017556:	4652      	mov	r2, sl
 8017558:	4601      	mov	r1, r0
 801755a:	4607      	mov	r7, r0
 801755c:	4620      	mov	r0, r4
 801755e:	f001 fdcf 	bl	8019100 <__multiply>
 8017562:	4680      	mov	r8, r0
 8017564:	4651      	mov	r1, sl
 8017566:	4620      	mov	r0, r4
 8017568:	46c2      	mov	sl, r8
 801756a:	f001 fcb1 	bl	8018ed0 <_Bfree>
 801756e:	9b08      	ldr	r3, [sp, #32]
 8017570:	1b9a      	subs	r2, r3, r6
 8017572:	d004      	beq.n	801757e <_dtoa_r+0x7b6>
 8017574:	4651      	mov	r1, sl
 8017576:	4620      	mov	r0, r4
 8017578:	f001 fe6c 	bl	8019254 <__pow5mult>
 801757c:	4682      	mov	sl, r0
 801757e:	2101      	movs	r1, #1
 8017580:	4620      	mov	r0, r4
 8017582:	f001 fda7 	bl	80190d4 <__i2b>
 8017586:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017588:	4606      	mov	r6, r0
 801758a:	2b00      	cmp	r3, #0
 801758c:	f340 8081 	ble.w	8017692 <_dtoa_r+0x8ca>
 8017590:	461a      	mov	r2, r3
 8017592:	4601      	mov	r1, r0
 8017594:	4620      	mov	r0, r4
 8017596:	f001 fe5d 	bl	8019254 <__pow5mult>
 801759a:	9b07      	ldr	r3, [sp, #28]
 801759c:	4606      	mov	r6, r0
 801759e:	2b01      	cmp	r3, #1
 80175a0:	dd7a      	ble.n	8017698 <_dtoa_r+0x8d0>
 80175a2:	f04f 0800 	mov.w	r8, #0
 80175a6:	6933      	ldr	r3, [r6, #16]
 80175a8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80175ac:	6918      	ldr	r0, [r3, #16]
 80175ae:	f001 fd43 	bl	8019038 <__hi0bits>
 80175b2:	f1c0 0020 	rsb	r0, r0, #32
 80175b6:	9b06      	ldr	r3, [sp, #24]
 80175b8:	4418      	add	r0, r3
 80175ba:	f010 001f 	ands.w	r0, r0, #31
 80175be:	f000 8094 	beq.w	80176ea <_dtoa_r+0x922>
 80175c2:	f1c0 0320 	rsb	r3, r0, #32
 80175c6:	2b04      	cmp	r3, #4
 80175c8:	f340 8085 	ble.w	80176d6 <_dtoa_r+0x90e>
 80175cc:	f1c0 001c 	rsb	r0, r0, #28
 80175d0:	9b05      	ldr	r3, [sp, #20]
 80175d2:	4403      	add	r3, r0
 80175d4:	4405      	add	r5, r0
 80175d6:	9305      	str	r3, [sp, #20]
 80175d8:	9b06      	ldr	r3, [sp, #24]
 80175da:	4403      	add	r3, r0
 80175dc:	9306      	str	r3, [sp, #24]
 80175de:	9b05      	ldr	r3, [sp, #20]
 80175e0:	2b00      	cmp	r3, #0
 80175e2:	dd05      	ble.n	80175f0 <_dtoa_r+0x828>
 80175e4:	4651      	mov	r1, sl
 80175e6:	461a      	mov	r2, r3
 80175e8:	4620      	mov	r0, r4
 80175ea:	f001 fe8d 	bl	8019308 <__lshift>
 80175ee:	4682      	mov	sl, r0
 80175f0:	9b06      	ldr	r3, [sp, #24]
 80175f2:	2b00      	cmp	r3, #0
 80175f4:	dd05      	ble.n	8017602 <_dtoa_r+0x83a>
 80175f6:	4631      	mov	r1, r6
 80175f8:	461a      	mov	r2, r3
 80175fa:	4620      	mov	r0, r4
 80175fc:	f001 fe84 	bl	8019308 <__lshift>
 8017600:	4606      	mov	r6, r0
 8017602:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017604:	2b00      	cmp	r3, #0
 8017606:	d072      	beq.n	80176ee <_dtoa_r+0x926>
 8017608:	4631      	mov	r1, r6
 801760a:	4650      	mov	r0, sl
 801760c:	f001 fee8 	bl	80193e0 <__mcmp>
 8017610:	2800      	cmp	r0, #0
 8017612:	da6c      	bge.n	80176ee <_dtoa_r+0x926>
 8017614:	2300      	movs	r3, #0
 8017616:	4651      	mov	r1, sl
 8017618:	220a      	movs	r2, #10
 801761a:	4620      	mov	r0, r4
 801761c:	f001 fc7a 	bl	8018f14 <__multadd>
 8017620:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017622:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8017626:	4682      	mov	sl, r0
 8017628:	2b00      	cmp	r3, #0
 801762a:	f000 81af 	beq.w	801798c <_dtoa_r+0xbc4>
 801762e:	2300      	movs	r3, #0
 8017630:	4639      	mov	r1, r7
 8017632:	220a      	movs	r2, #10
 8017634:	4620      	mov	r0, r4
 8017636:	f001 fc6d 	bl	8018f14 <__multadd>
 801763a:	9b01      	ldr	r3, [sp, #4]
 801763c:	4607      	mov	r7, r0
 801763e:	2b00      	cmp	r3, #0
 8017640:	f300 8096 	bgt.w	8017770 <_dtoa_r+0x9a8>
 8017644:	9b07      	ldr	r3, [sp, #28]
 8017646:	2b02      	cmp	r3, #2
 8017648:	dc59      	bgt.n	80176fe <_dtoa_r+0x936>
 801764a:	e091      	b.n	8017770 <_dtoa_r+0x9a8>
 801764c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801764e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8017652:	e758      	b.n	8017506 <_dtoa_r+0x73e>
 8017654:	9b04      	ldr	r3, [sp, #16]
 8017656:	1e5e      	subs	r6, r3, #1
 8017658:	9b08      	ldr	r3, [sp, #32]
 801765a:	42b3      	cmp	r3, r6
 801765c:	bfb7      	itett	lt
 801765e:	9b08      	ldrlt	r3, [sp, #32]
 8017660:	1b9e      	subge	r6, r3, r6
 8017662:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8017664:	1af3      	sublt	r3, r6, r3
 8017666:	bfbe      	ittt	lt
 8017668:	9608      	strlt	r6, [sp, #32]
 801766a:	2600      	movlt	r6, #0
 801766c:	18d2      	addlt	r2, r2, r3
 801766e:	9b04      	ldr	r3, [sp, #16]
 8017670:	bfb8      	it	lt
 8017672:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8017674:	2b00      	cmp	r3, #0
 8017676:	bfb7      	itett	lt
 8017678:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 801767c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8017680:	1a9d      	sublt	r5, r3, r2
 8017682:	2300      	movlt	r3, #0
 8017684:	e741      	b.n	801750a <_dtoa_r+0x742>
 8017686:	9e08      	ldr	r6, [sp, #32]
 8017688:	9d05      	ldr	r5, [sp, #20]
 801768a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801768c:	e748      	b.n	8017520 <_dtoa_r+0x758>
 801768e:	9a08      	ldr	r2, [sp, #32]
 8017690:	e770      	b.n	8017574 <_dtoa_r+0x7ac>
 8017692:	9b07      	ldr	r3, [sp, #28]
 8017694:	2b01      	cmp	r3, #1
 8017696:	dc19      	bgt.n	80176cc <_dtoa_r+0x904>
 8017698:	9b02      	ldr	r3, [sp, #8]
 801769a:	b9bb      	cbnz	r3, 80176cc <_dtoa_r+0x904>
 801769c:	9b03      	ldr	r3, [sp, #12]
 801769e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80176a2:	b99b      	cbnz	r3, 80176cc <_dtoa_r+0x904>
 80176a4:	9b03      	ldr	r3, [sp, #12]
 80176a6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80176aa:	0d1b      	lsrs	r3, r3, #20
 80176ac:	051b      	lsls	r3, r3, #20
 80176ae:	b183      	cbz	r3, 80176d2 <_dtoa_r+0x90a>
 80176b0:	9b05      	ldr	r3, [sp, #20]
 80176b2:	f04f 0801 	mov.w	r8, #1
 80176b6:	3301      	adds	r3, #1
 80176b8:	9305      	str	r3, [sp, #20]
 80176ba:	9b06      	ldr	r3, [sp, #24]
 80176bc:	3301      	adds	r3, #1
 80176be:	9306      	str	r3, [sp, #24]
 80176c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80176c2:	2b00      	cmp	r3, #0
 80176c4:	f47f af6f 	bne.w	80175a6 <_dtoa_r+0x7de>
 80176c8:	2001      	movs	r0, #1
 80176ca:	e774      	b.n	80175b6 <_dtoa_r+0x7ee>
 80176cc:	f04f 0800 	mov.w	r8, #0
 80176d0:	e7f6      	b.n	80176c0 <_dtoa_r+0x8f8>
 80176d2:	4698      	mov	r8, r3
 80176d4:	e7f4      	b.n	80176c0 <_dtoa_r+0x8f8>
 80176d6:	d082      	beq.n	80175de <_dtoa_r+0x816>
 80176d8:	331c      	adds	r3, #28
 80176da:	9a05      	ldr	r2, [sp, #20]
 80176dc:	441a      	add	r2, r3
 80176de:	441d      	add	r5, r3
 80176e0:	9205      	str	r2, [sp, #20]
 80176e2:	9a06      	ldr	r2, [sp, #24]
 80176e4:	441a      	add	r2, r3
 80176e6:	9206      	str	r2, [sp, #24]
 80176e8:	e779      	b.n	80175de <_dtoa_r+0x816>
 80176ea:	4603      	mov	r3, r0
 80176ec:	e7f4      	b.n	80176d8 <_dtoa_r+0x910>
 80176ee:	9b04      	ldr	r3, [sp, #16]
 80176f0:	2b00      	cmp	r3, #0
 80176f2:	dc37      	bgt.n	8017764 <_dtoa_r+0x99c>
 80176f4:	9b07      	ldr	r3, [sp, #28]
 80176f6:	2b02      	cmp	r3, #2
 80176f8:	dd34      	ble.n	8017764 <_dtoa_r+0x99c>
 80176fa:	9b04      	ldr	r3, [sp, #16]
 80176fc:	9301      	str	r3, [sp, #4]
 80176fe:	9b01      	ldr	r3, [sp, #4]
 8017700:	b963      	cbnz	r3, 801771c <_dtoa_r+0x954>
 8017702:	4631      	mov	r1, r6
 8017704:	2205      	movs	r2, #5
 8017706:	4620      	mov	r0, r4
 8017708:	f001 fc04 	bl	8018f14 <__multadd>
 801770c:	4601      	mov	r1, r0
 801770e:	4606      	mov	r6, r0
 8017710:	4650      	mov	r0, sl
 8017712:	f001 fe65 	bl	80193e0 <__mcmp>
 8017716:	2800      	cmp	r0, #0
 8017718:	f73f adbb 	bgt.w	8017292 <_dtoa_r+0x4ca>
 801771c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801771e:	9d00      	ldr	r5, [sp, #0]
 8017720:	ea6f 0b03 	mvn.w	fp, r3
 8017724:	f04f 0800 	mov.w	r8, #0
 8017728:	4631      	mov	r1, r6
 801772a:	4620      	mov	r0, r4
 801772c:	f001 fbd0 	bl	8018ed0 <_Bfree>
 8017730:	2f00      	cmp	r7, #0
 8017732:	f43f aeab 	beq.w	801748c <_dtoa_r+0x6c4>
 8017736:	f1b8 0f00 	cmp.w	r8, #0
 801773a:	d005      	beq.n	8017748 <_dtoa_r+0x980>
 801773c:	45b8      	cmp	r8, r7
 801773e:	d003      	beq.n	8017748 <_dtoa_r+0x980>
 8017740:	4641      	mov	r1, r8
 8017742:	4620      	mov	r0, r4
 8017744:	f001 fbc4 	bl	8018ed0 <_Bfree>
 8017748:	4639      	mov	r1, r7
 801774a:	4620      	mov	r0, r4
 801774c:	f001 fbc0 	bl	8018ed0 <_Bfree>
 8017750:	e69c      	b.n	801748c <_dtoa_r+0x6c4>
 8017752:	2600      	movs	r6, #0
 8017754:	4637      	mov	r7, r6
 8017756:	e7e1      	b.n	801771c <_dtoa_r+0x954>
 8017758:	46bb      	mov	fp, r7
 801775a:	4637      	mov	r7, r6
 801775c:	e599      	b.n	8017292 <_dtoa_r+0x4ca>
 801775e:	bf00      	nop
 8017760:	40240000 	.word	0x40240000
 8017764:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017766:	2b00      	cmp	r3, #0
 8017768:	f000 80c8 	beq.w	80178fc <_dtoa_r+0xb34>
 801776c:	9b04      	ldr	r3, [sp, #16]
 801776e:	9301      	str	r3, [sp, #4]
 8017770:	2d00      	cmp	r5, #0
 8017772:	dd05      	ble.n	8017780 <_dtoa_r+0x9b8>
 8017774:	4639      	mov	r1, r7
 8017776:	462a      	mov	r2, r5
 8017778:	4620      	mov	r0, r4
 801777a:	f001 fdc5 	bl	8019308 <__lshift>
 801777e:	4607      	mov	r7, r0
 8017780:	f1b8 0f00 	cmp.w	r8, #0
 8017784:	d05b      	beq.n	801783e <_dtoa_r+0xa76>
 8017786:	6879      	ldr	r1, [r7, #4]
 8017788:	4620      	mov	r0, r4
 801778a:	f001 fb61 	bl	8018e50 <_Balloc>
 801778e:	4605      	mov	r5, r0
 8017790:	b928      	cbnz	r0, 801779e <_dtoa_r+0x9d6>
 8017792:	4b82      	ldr	r3, [pc, #520]	; (801799c <_dtoa_r+0xbd4>)
 8017794:	4602      	mov	r2, r0
 8017796:	f240 21ef 	movw	r1, #751	; 0x2ef
 801779a:	f7ff bb2e 	b.w	8016dfa <_dtoa_r+0x32>
 801779e:	693a      	ldr	r2, [r7, #16]
 80177a0:	f107 010c 	add.w	r1, r7, #12
 80177a4:	300c      	adds	r0, #12
 80177a6:	3202      	adds	r2, #2
 80177a8:	0092      	lsls	r2, r2, #2
 80177aa:	f7ff fa56 	bl	8016c5a <memcpy>
 80177ae:	2201      	movs	r2, #1
 80177b0:	4629      	mov	r1, r5
 80177b2:	4620      	mov	r0, r4
 80177b4:	f001 fda8 	bl	8019308 <__lshift>
 80177b8:	9b00      	ldr	r3, [sp, #0]
 80177ba:	46b8      	mov	r8, r7
 80177bc:	4607      	mov	r7, r0
 80177be:	3301      	adds	r3, #1
 80177c0:	9304      	str	r3, [sp, #16]
 80177c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80177c6:	4413      	add	r3, r2
 80177c8:	9308      	str	r3, [sp, #32]
 80177ca:	9b02      	ldr	r3, [sp, #8]
 80177cc:	f003 0301 	and.w	r3, r3, #1
 80177d0:	9306      	str	r3, [sp, #24]
 80177d2:	9b04      	ldr	r3, [sp, #16]
 80177d4:	4631      	mov	r1, r6
 80177d6:	4650      	mov	r0, sl
 80177d8:	3b01      	subs	r3, #1
 80177da:	9301      	str	r3, [sp, #4]
 80177dc:	f7ff fa62 	bl	8016ca4 <quorem>
 80177e0:	4641      	mov	r1, r8
 80177e2:	9002      	str	r0, [sp, #8]
 80177e4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80177e8:	4650      	mov	r0, sl
 80177ea:	f001 fdf9 	bl	80193e0 <__mcmp>
 80177ee:	463a      	mov	r2, r7
 80177f0:	9005      	str	r0, [sp, #20]
 80177f2:	4631      	mov	r1, r6
 80177f4:	4620      	mov	r0, r4
 80177f6:	f001 fe0f 	bl	8019418 <__mdiff>
 80177fa:	68c2      	ldr	r2, [r0, #12]
 80177fc:	4605      	mov	r5, r0
 80177fe:	bb02      	cbnz	r2, 8017842 <_dtoa_r+0xa7a>
 8017800:	4601      	mov	r1, r0
 8017802:	4650      	mov	r0, sl
 8017804:	f001 fdec 	bl	80193e0 <__mcmp>
 8017808:	4602      	mov	r2, r0
 801780a:	4629      	mov	r1, r5
 801780c:	4620      	mov	r0, r4
 801780e:	9209      	str	r2, [sp, #36]	; 0x24
 8017810:	f001 fb5e 	bl	8018ed0 <_Bfree>
 8017814:	9b07      	ldr	r3, [sp, #28]
 8017816:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017818:	9d04      	ldr	r5, [sp, #16]
 801781a:	ea43 0102 	orr.w	r1, r3, r2
 801781e:	9b06      	ldr	r3, [sp, #24]
 8017820:	4319      	orrs	r1, r3
 8017822:	d110      	bne.n	8017846 <_dtoa_r+0xa7e>
 8017824:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8017828:	d029      	beq.n	801787e <_dtoa_r+0xab6>
 801782a:	9b05      	ldr	r3, [sp, #20]
 801782c:	2b00      	cmp	r3, #0
 801782e:	dd02      	ble.n	8017836 <_dtoa_r+0xa6e>
 8017830:	9b02      	ldr	r3, [sp, #8]
 8017832:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8017836:	9b01      	ldr	r3, [sp, #4]
 8017838:	f883 9000 	strb.w	r9, [r3]
 801783c:	e774      	b.n	8017728 <_dtoa_r+0x960>
 801783e:	4638      	mov	r0, r7
 8017840:	e7ba      	b.n	80177b8 <_dtoa_r+0x9f0>
 8017842:	2201      	movs	r2, #1
 8017844:	e7e1      	b.n	801780a <_dtoa_r+0xa42>
 8017846:	9b05      	ldr	r3, [sp, #20]
 8017848:	2b00      	cmp	r3, #0
 801784a:	db04      	blt.n	8017856 <_dtoa_r+0xa8e>
 801784c:	9907      	ldr	r1, [sp, #28]
 801784e:	430b      	orrs	r3, r1
 8017850:	9906      	ldr	r1, [sp, #24]
 8017852:	430b      	orrs	r3, r1
 8017854:	d120      	bne.n	8017898 <_dtoa_r+0xad0>
 8017856:	2a00      	cmp	r2, #0
 8017858:	dded      	ble.n	8017836 <_dtoa_r+0xa6e>
 801785a:	4651      	mov	r1, sl
 801785c:	2201      	movs	r2, #1
 801785e:	4620      	mov	r0, r4
 8017860:	f001 fd52 	bl	8019308 <__lshift>
 8017864:	4631      	mov	r1, r6
 8017866:	4682      	mov	sl, r0
 8017868:	f001 fdba 	bl	80193e0 <__mcmp>
 801786c:	2800      	cmp	r0, #0
 801786e:	dc03      	bgt.n	8017878 <_dtoa_r+0xab0>
 8017870:	d1e1      	bne.n	8017836 <_dtoa_r+0xa6e>
 8017872:	f019 0f01 	tst.w	r9, #1
 8017876:	d0de      	beq.n	8017836 <_dtoa_r+0xa6e>
 8017878:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801787c:	d1d8      	bne.n	8017830 <_dtoa_r+0xa68>
 801787e:	2339      	movs	r3, #57	; 0x39
 8017880:	9a01      	ldr	r2, [sp, #4]
 8017882:	7013      	strb	r3, [r2, #0]
 8017884:	462b      	mov	r3, r5
 8017886:	461d      	mov	r5, r3
 8017888:	3b01      	subs	r3, #1
 801788a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801788e:	2a39      	cmp	r2, #57	; 0x39
 8017890:	d06b      	beq.n	801796a <_dtoa_r+0xba2>
 8017892:	3201      	adds	r2, #1
 8017894:	701a      	strb	r2, [r3, #0]
 8017896:	e747      	b.n	8017728 <_dtoa_r+0x960>
 8017898:	2a00      	cmp	r2, #0
 801789a:	dd07      	ble.n	80178ac <_dtoa_r+0xae4>
 801789c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80178a0:	d0ed      	beq.n	801787e <_dtoa_r+0xab6>
 80178a2:	f109 0301 	add.w	r3, r9, #1
 80178a6:	9a01      	ldr	r2, [sp, #4]
 80178a8:	7013      	strb	r3, [r2, #0]
 80178aa:	e73d      	b.n	8017728 <_dtoa_r+0x960>
 80178ac:	9b04      	ldr	r3, [sp, #16]
 80178ae:	9a08      	ldr	r2, [sp, #32]
 80178b0:	f803 9c01 	strb.w	r9, [r3, #-1]
 80178b4:	4293      	cmp	r3, r2
 80178b6:	d042      	beq.n	801793e <_dtoa_r+0xb76>
 80178b8:	4651      	mov	r1, sl
 80178ba:	2300      	movs	r3, #0
 80178bc:	220a      	movs	r2, #10
 80178be:	4620      	mov	r0, r4
 80178c0:	f001 fb28 	bl	8018f14 <__multadd>
 80178c4:	45b8      	cmp	r8, r7
 80178c6:	4682      	mov	sl, r0
 80178c8:	f04f 0300 	mov.w	r3, #0
 80178cc:	f04f 020a 	mov.w	r2, #10
 80178d0:	4641      	mov	r1, r8
 80178d2:	4620      	mov	r0, r4
 80178d4:	d107      	bne.n	80178e6 <_dtoa_r+0xb1e>
 80178d6:	f001 fb1d 	bl	8018f14 <__multadd>
 80178da:	4680      	mov	r8, r0
 80178dc:	4607      	mov	r7, r0
 80178de:	9b04      	ldr	r3, [sp, #16]
 80178e0:	3301      	adds	r3, #1
 80178e2:	9304      	str	r3, [sp, #16]
 80178e4:	e775      	b.n	80177d2 <_dtoa_r+0xa0a>
 80178e6:	f001 fb15 	bl	8018f14 <__multadd>
 80178ea:	4639      	mov	r1, r7
 80178ec:	4680      	mov	r8, r0
 80178ee:	2300      	movs	r3, #0
 80178f0:	220a      	movs	r2, #10
 80178f2:	4620      	mov	r0, r4
 80178f4:	f001 fb0e 	bl	8018f14 <__multadd>
 80178f8:	4607      	mov	r7, r0
 80178fa:	e7f0      	b.n	80178de <_dtoa_r+0xb16>
 80178fc:	9b04      	ldr	r3, [sp, #16]
 80178fe:	9301      	str	r3, [sp, #4]
 8017900:	9d00      	ldr	r5, [sp, #0]
 8017902:	4631      	mov	r1, r6
 8017904:	4650      	mov	r0, sl
 8017906:	f7ff f9cd 	bl	8016ca4 <quorem>
 801790a:	9b00      	ldr	r3, [sp, #0]
 801790c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8017910:	f805 9b01 	strb.w	r9, [r5], #1
 8017914:	1aea      	subs	r2, r5, r3
 8017916:	9b01      	ldr	r3, [sp, #4]
 8017918:	4293      	cmp	r3, r2
 801791a:	dd07      	ble.n	801792c <_dtoa_r+0xb64>
 801791c:	4651      	mov	r1, sl
 801791e:	2300      	movs	r3, #0
 8017920:	220a      	movs	r2, #10
 8017922:	4620      	mov	r0, r4
 8017924:	f001 faf6 	bl	8018f14 <__multadd>
 8017928:	4682      	mov	sl, r0
 801792a:	e7ea      	b.n	8017902 <_dtoa_r+0xb3a>
 801792c:	9b01      	ldr	r3, [sp, #4]
 801792e:	f04f 0800 	mov.w	r8, #0
 8017932:	2b00      	cmp	r3, #0
 8017934:	bfcc      	ite	gt
 8017936:	461d      	movgt	r5, r3
 8017938:	2501      	movle	r5, #1
 801793a:	9b00      	ldr	r3, [sp, #0]
 801793c:	441d      	add	r5, r3
 801793e:	4651      	mov	r1, sl
 8017940:	2201      	movs	r2, #1
 8017942:	4620      	mov	r0, r4
 8017944:	f001 fce0 	bl	8019308 <__lshift>
 8017948:	4631      	mov	r1, r6
 801794a:	4682      	mov	sl, r0
 801794c:	f001 fd48 	bl	80193e0 <__mcmp>
 8017950:	2800      	cmp	r0, #0
 8017952:	dc97      	bgt.n	8017884 <_dtoa_r+0xabc>
 8017954:	d102      	bne.n	801795c <_dtoa_r+0xb94>
 8017956:	f019 0f01 	tst.w	r9, #1
 801795a:	d193      	bne.n	8017884 <_dtoa_r+0xabc>
 801795c:	462b      	mov	r3, r5
 801795e:	461d      	mov	r5, r3
 8017960:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8017964:	2a30      	cmp	r2, #48	; 0x30
 8017966:	d0fa      	beq.n	801795e <_dtoa_r+0xb96>
 8017968:	e6de      	b.n	8017728 <_dtoa_r+0x960>
 801796a:	9a00      	ldr	r2, [sp, #0]
 801796c:	429a      	cmp	r2, r3
 801796e:	d18a      	bne.n	8017886 <_dtoa_r+0xabe>
 8017970:	f10b 0b01 	add.w	fp, fp, #1
 8017974:	2331      	movs	r3, #49	; 0x31
 8017976:	e797      	b.n	80178a8 <_dtoa_r+0xae0>
 8017978:	4b09      	ldr	r3, [pc, #36]	; (80179a0 <_dtoa_r+0xbd8>)
 801797a:	f7ff ba9a 	b.w	8016eb2 <_dtoa_r+0xea>
 801797e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017980:	2b00      	cmp	r3, #0
 8017982:	f47f aa6e 	bne.w	8016e62 <_dtoa_r+0x9a>
 8017986:	4b07      	ldr	r3, [pc, #28]	; (80179a4 <_dtoa_r+0xbdc>)
 8017988:	f7ff ba93 	b.w	8016eb2 <_dtoa_r+0xea>
 801798c:	9b01      	ldr	r3, [sp, #4]
 801798e:	2b00      	cmp	r3, #0
 8017990:	dcb6      	bgt.n	8017900 <_dtoa_r+0xb38>
 8017992:	9b07      	ldr	r3, [sp, #28]
 8017994:	2b02      	cmp	r3, #2
 8017996:	f73f aeb2 	bgt.w	80176fe <_dtoa_r+0x936>
 801799a:	e7b1      	b.n	8017900 <_dtoa_r+0xb38>
 801799c:	0801cffd 	.word	0x0801cffd
 80179a0:	0801d095 	.word	0x0801d095
 80179a4:	0801cf81 	.word	0x0801cf81

080179a8 <_free_r>:
 80179a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80179aa:	2900      	cmp	r1, #0
 80179ac:	d043      	beq.n	8017a36 <_free_r+0x8e>
 80179ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80179b2:	1f0c      	subs	r4, r1, #4
 80179b4:	9001      	str	r0, [sp, #4]
 80179b6:	2b00      	cmp	r3, #0
 80179b8:	bfb8      	it	lt
 80179ba:	18e4      	addlt	r4, r4, r3
 80179bc:	f7fd ff5c 	bl	8015878 <__malloc_lock>
 80179c0:	4a1e      	ldr	r2, [pc, #120]	; (8017a3c <_free_r+0x94>)
 80179c2:	9801      	ldr	r0, [sp, #4]
 80179c4:	6813      	ldr	r3, [r2, #0]
 80179c6:	b933      	cbnz	r3, 80179d6 <_free_r+0x2e>
 80179c8:	6063      	str	r3, [r4, #4]
 80179ca:	6014      	str	r4, [r2, #0]
 80179cc:	b003      	add	sp, #12
 80179ce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80179d2:	f7fd bf57 	b.w	8015884 <__malloc_unlock>
 80179d6:	42a3      	cmp	r3, r4
 80179d8:	d908      	bls.n	80179ec <_free_r+0x44>
 80179da:	6825      	ldr	r5, [r4, #0]
 80179dc:	1961      	adds	r1, r4, r5
 80179de:	428b      	cmp	r3, r1
 80179e0:	bf01      	itttt	eq
 80179e2:	6819      	ldreq	r1, [r3, #0]
 80179e4:	685b      	ldreq	r3, [r3, #4]
 80179e6:	1949      	addeq	r1, r1, r5
 80179e8:	6021      	streq	r1, [r4, #0]
 80179ea:	e7ed      	b.n	80179c8 <_free_r+0x20>
 80179ec:	461a      	mov	r2, r3
 80179ee:	685b      	ldr	r3, [r3, #4]
 80179f0:	b10b      	cbz	r3, 80179f6 <_free_r+0x4e>
 80179f2:	42a3      	cmp	r3, r4
 80179f4:	d9fa      	bls.n	80179ec <_free_r+0x44>
 80179f6:	6811      	ldr	r1, [r2, #0]
 80179f8:	1855      	adds	r5, r2, r1
 80179fa:	42a5      	cmp	r5, r4
 80179fc:	d10b      	bne.n	8017a16 <_free_r+0x6e>
 80179fe:	6824      	ldr	r4, [r4, #0]
 8017a00:	4421      	add	r1, r4
 8017a02:	1854      	adds	r4, r2, r1
 8017a04:	6011      	str	r1, [r2, #0]
 8017a06:	42a3      	cmp	r3, r4
 8017a08:	d1e0      	bne.n	80179cc <_free_r+0x24>
 8017a0a:	681c      	ldr	r4, [r3, #0]
 8017a0c:	685b      	ldr	r3, [r3, #4]
 8017a0e:	440c      	add	r4, r1
 8017a10:	6053      	str	r3, [r2, #4]
 8017a12:	6014      	str	r4, [r2, #0]
 8017a14:	e7da      	b.n	80179cc <_free_r+0x24>
 8017a16:	d902      	bls.n	8017a1e <_free_r+0x76>
 8017a18:	230c      	movs	r3, #12
 8017a1a:	6003      	str	r3, [r0, #0]
 8017a1c:	e7d6      	b.n	80179cc <_free_r+0x24>
 8017a1e:	6825      	ldr	r5, [r4, #0]
 8017a20:	1961      	adds	r1, r4, r5
 8017a22:	428b      	cmp	r3, r1
 8017a24:	bf02      	ittt	eq
 8017a26:	6819      	ldreq	r1, [r3, #0]
 8017a28:	685b      	ldreq	r3, [r3, #4]
 8017a2a:	1949      	addeq	r1, r1, r5
 8017a2c:	6063      	str	r3, [r4, #4]
 8017a2e:	bf08      	it	eq
 8017a30:	6021      	streq	r1, [r4, #0]
 8017a32:	6054      	str	r4, [r2, #4]
 8017a34:	e7ca      	b.n	80179cc <_free_r+0x24>
 8017a36:	b003      	add	sp, #12
 8017a38:	bd30      	pop	{r4, r5, pc}
 8017a3a:	bf00      	nop
 8017a3c:	20003348 	.word	0x20003348

08017a40 <rshift>:
 8017a40:	6903      	ldr	r3, [r0, #16]
 8017a42:	114a      	asrs	r2, r1, #5
 8017a44:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8017a48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017a4c:	f100 0414 	add.w	r4, r0, #20
 8017a50:	dd45      	ble.n	8017ade <rshift+0x9e>
 8017a52:	f011 011f 	ands.w	r1, r1, #31
 8017a56:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8017a5a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8017a5e:	d10c      	bne.n	8017a7a <rshift+0x3a>
 8017a60:	f100 0710 	add.w	r7, r0, #16
 8017a64:	4629      	mov	r1, r5
 8017a66:	42b1      	cmp	r1, r6
 8017a68:	d334      	bcc.n	8017ad4 <rshift+0x94>
 8017a6a:	1a9b      	subs	r3, r3, r2
 8017a6c:	1eea      	subs	r2, r5, #3
 8017a6e:	009b      	lsls	r3, r3, #2
 8017a70:	4296      	cmp	r6, r2
 8017a72:	bf38      	it	cc
 8017a74:	2300      	movcc	r3, #0
 8017a76:	4423      	add	r3, r4
 8017a78:	e015      	b.n	8017aa6 <rshift+0x66>
 8017a7a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8017a7e:	f1c1 0820 	rsb	r8, r1, #32
 8017a82:	f105 0e04 	add.w	lr, r5, #4
 8017a86:	46a1      	mov	r9, r4
 8017a88:	40cf      	lsrs	r7, r1
 8017a8a:	4576      	cmp	r6, lr
 8017a8c:	46f4      	mov	ip, lr
 8017a8e:	d815      	bhi.n	8017abc <rshift+0x7c>
 8017a90:	1a9a      	subs	r2, r3, r2
 8017a92:	3501      	adds	r5, #1
 8017a94:	0092      	lsls	r2, r2, #2
 8017a96:	3a04      	subs	r2, #4
 8017a98:	42ae      	cmp	r6, r5
 8017a9a:	bf38      	it	cc
 8017a9c:	2200      	movcc	r2, #0
 8017a9e:	18a3      	adds	r3, r4, r2
 8017aa0:	50a7      	str	r7, [r4, r2]
 8017aa2:	b107      	cbz	r7, 8017aa6 <rshift+0x66>
 8017aa4:	3304      	adds	r3, #4
 8017aa6:	1b1a      	subs	r2, r3, r4
 8017aa8:	42a3      	cmp	r3, r4
 8017aaa:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8017aae:	bf08      	it	eq
 8017ab0:	2300      	moveq	r3, #0
 8017ab2:	6102      	str	r2, [r0, #16]
 8017ab4:	bf08      	it	eq
 8017ab6:	6143      	streq	r3, [r0, #20]
 8017ab8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017abc:	f8dc c000 	ldr.w	ip, [ip]
 8017ac0:	fa0c fc08 	lsl.w	ip, ip, r8
 8017ac4:	ea4c 0707 	orr.w	r7, ip, r7
 8017ac8:	f849 7b04 	str.w	r7, [r9], #4
 8017acc:	f85e 7b04 	ldr.w	r7, [lr], #4
 8017ad0:	40cf      	lsrs	r7, r1
 8017ad2:	e7da      	b.n	8017a8a <rshift+0x4a>
 8017ad4:	f851 cb04 	ldr.w	ip, [r1], #4
 8017ad8:	f847 cf04 	str.w	ip, [r7, #4]!
 8017adc:	e7c3      	b.n	8017a66 <rshift+0x26>
 8017ade:	4623      	mov	r3, r4
 8017ae0:	e7e1      	b.n	8017aa6 <rshift+0x66>

08017ae2 <__hexdig_fun>:
 8017ae2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8017ae6:	2b09      	cmp	r3, #9
 8017ae8:	d802      	bhi.n	8017af0 <__hexdig_fun+0xe>
 8017aea:	3820      	subs	r0, #32
 8017aec:	b2c0      	uxtb	r0, r0
 8017aee:	4770      	bx	lr
 8017af0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8017af4:	2b05      	cmp	r3, #5
 8017af6:	d801      	bhi.n	8017afc <__hexdig_fun+0x1a>
 8017af8:	3847      	subs	r0, #71	; 0x47
 8017afa:	e7f7      	b.n	8017aec <__hexdig_fun+0xa>
 8017afc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8017b00:	2b05      	cmp	r3, #5
 8017b02:	d801      	bhi.n	8017b08 <__hexdig_fun+0x26>
 8017b04:	3827      	subs	r0, #39	; 0x27
 8017b06:	e7f1      	b.n	8017aec <__hexdig_fun+0xa>
 8017b08:	2000      	movs	r0, #0
 8017b0a:	4770      	bx	lr

08017b0c <__gethex>:
 8017b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b10:	4617      	mov	r7, r2
 8017b12:	680a      	ldr	r2, [r1, #0]
 8017b14:	b085      	sub	sp, #20
 8017b16:	4681      	mov	r9, r0
 8017b18:	f102 0b02 	add.w	fp, r2, #2
 8017b1c:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8017b20:	468a      	mov	sl, r1
 8017b22:	9302      	str	r3, [sp, #8]
 8017b24:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8017b28:	32fe      	adds	r2, #254	; 0xfe
 8017b2a:	eb02 030b 	add.w	r3, r2, fp
 8017b2e:	46d8      	mov	r8, fp
 8017b30:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8017b34:	9301      	str	r3, [sp, #4]
 8017b36:	2830      	cmp	r0, #48	; 0x30
 8017b38:	d0f7      	beq.n	8017b2a <__gethex+0x1e>
 8017b3a:	f7ff ffd2 	bl	8017ae2 <__hexdig_fun>
 8017b3e:	4604      	mov	r4, r0
 8017b40:	2800      	cmp	r0, #0
 8017b42:	d137      	bne.n	8017bb4 <__gethex+0xa8>
 8017b44:	2201      	movs	r2, #1
 8017b46:	49a7      	ldr	r1, [pc, #668]	; (8017de4 <__gethex+0x2d8>)
 8017b48:	4640      	mov	r0, r8
 8017b4a:	f7fe ff78 	bl	8016a3e <strncmp>
 8017b4e:	4606      	mov	r6, r0
 8017b50:	2800      	cmp	r0, #0
 8017b52:	d168      	bne.n	8017c26 <__gethex+0x11a>
 8017b54:	f898 0001 	ldrb.w	r0, [r8, #1]
 8017b58:	465d      	mov	r5, fp
 8017b5a:	f7ff ffc2 	bl	8017ae2 <__hexdig_fun>
 8017b5e:	2800      	cmp	r0, #0
 8017b60:	d063      	beq.n	8017c2a <__gethex+0x11e>
 8017b62:	465a      	mov	r2, fp
 8017b64:	7810      	ldrb	r0, [r2, #0]
 8017b66:	4690      	mov	r8, r2
 8017b68:	3201      	adds	r2, #1
 8017b6a:	2830      	cmp	r0, #48	; 0x30
 8017b6c:	d0fa      	beq.n	8017b64 <__gethex+0x58>
 8017b6e:	f7ff ffb8 	bl	8017ae2 <__hexdig_fun>
 8017b72:	fab0 f480 	clz	r4, r0
 8017b76:	2301      	movs	r3, #1
 8017b78:	465e      	mov	r6, fp
 8017b7a:	0964      	lsrs	r4, r4, #5
 8017b7c:	9301      	str	r3, [sp, #4]
 8017b7e:	4642      	mov	r2, r8
 8017b80:	4615      	mov	r5, r2
 8017b82:	3201      	adds	r2, #1
 8017b84:	7828      	ldrb	r0, [r5, #0]
 8017b86:	f7ff ffac 	bl	8017ae2 <__hexdig_fun>
 8017b8a:	2800      	cmp	r0, #0
 8017b8c:	d1f8      	bne.n	8017b80 <__gethex+0x74>
 8017b8e:	2201      	movs	r2, #1
 8017b90:	4994      	ldr	r1, [pc, #592]	; (8017de4 <__gethex+0x2d8>)
 8017b92:	4628      	mov	r0, r5
 8017b94:	f7fe ff53 	bl	8016a3e <strncmp>
 8017b98:	b978      	cbnz	r0, 8017bba <__gethex+0xae>
 8017b9a:	b946      	cbnz	r6, 8017bae <__gethex+0xa2>
 8017b9c:	1c6e      	adds	r6, r5, #1
 8017b9e:	4632      	mov	r2, r6
 8017ba0:	4615      	mov	r5, r2
 8017ba2:	3201      	adds	r2, #1
 8017ba4:	7828      	ldrb	r0, [r5, #0]
 8017ba6:	f7ff ff9c 	bl	8017ae2 <__hexdig_fun>
 8017baa:	2800      	cmp	r0, #0
 8017bac:	d1f8      	bne.n	8017ba0 <__gethex+0x94>
 8017bae:	1b73      	subs	r3, r6, r5
 8017bb0:	009e      	lsls	r6, r3, #2
 8017bb2:	e004      	b.n	8017bbe <__gethex+0xb2>
 8017bb4:	2400      	movs	r4, #0
 8017bb6:	4626      	mov	r6, r4
 8017bb8:	e7e1      	b.n	8017b7e <__gethex+0x72>
 8017bba:	2e00      	cmp	r6, #0
 8017bbc:	d1f7      	bne.n	8017bae <__gethex+0xa2>
 8017bbe:	782b      	ldrb	r3, [r5, #0]
 8017bc0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8017bc4:	2b50      	cmp	r3, #80	; 0x50
 8017bc6:	d13d      	bne.n	8017c44 <__gethex+0x138>
 8017bc8:	786b      	ldrb	r3, [r5, #1]
 8017bca:	2b2b      	cmp	r3, #43	; 0x2b
 8017bcc:	d02f      	beq.n	8017c2e <__gethex+0x122>
 8017bce:	2b2d      	cmp	r3, #45	; 0x2d
 8017bd0:	d031      	beq.n	8017c36 <__gethex+0x12a>
 8017bd2:	1c69      	adds	r1, r5, #1
 8017bd4:	f04f 0b00 	mov.w	fp, #0
 8017bd8:	7808      	ldrb	r0, [r1, #0]
 8017bda:	f7ff ff82 	bl	8017ae2 <__hexdig_fun>
 8017bde:	1e42      	subs	r2, r0, #1
 8017be0:	b2d2      	uxtb	r2, r2
 8017be2:	2a18      	cmp	r2, #24
 8017be4:	d82e      	bhi.n	8017c44 <__gethex+0x138>
 8017be6:	f1a0 0210 	sub.w	r2, r0, #16
 8017bea:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8017bee:	f7ff ff78 	bl	8017ae2 <__hexdig_fun>
 8017bf2:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8017bf6:	fa5f fc8c 	uxtb.w	ip, ip
 8017bfa:	f1bc 0f18 	cmp.w	ip, #24
 8017bfe:	d91d      	bls.n	8017c3c <__gethex+0x130>
 8017c00:	f1bb 0f00 	cmp.w	fp, #0
 8017c04:	d000      	beq.n	8017c08 <__gethex+0xfc>
 8017c06:	4252      	negs	r2, r2
 8017c08:	4416      	add	r6, r2
 8017c0a:	f8ca 1000 	str.w	r1, [sl]
 8017c0e:	b1dc      	cbz	r4, 8017c48 <__gethex+0x13c>
 8017c10:	9b01      	ldr	r3, [sp, #4]
 8017c12:	2b00      	cmp	r3, #0
 8017c14:	bf14      	ite	ne
 8017c16:	f04f 0800 	movne.w	r8, #0
 8017c1a:	f04f 0806 	moveq.w	r8, #6
 8017c1e:	4640      	mov	r0, r8
 8017c20:	b005      	add	sp, #20
 8017c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c26:	4645      	mov	r5, r8
 8017c28:	4626      	mov	r6, r4
 8017c2a:	2401      	movs	r4, #1
 8017c2c:	e7c7      	b.n	8017bbe <__gethex+0xb2>
 8017c2e:	f04f 0b00 	mov.w	fp, #0
 8017c32:	1ca9      	adds	r1, r5, #2
 8017c34:	e7d0      	b.n	8017bd8 <__gethex+0xcc>
 8017c36:	f04f 0b01 	mov.w	fp, #1
 8017c3a:	e7fa      	b.n	8017c32 <__gethex+0x126>
 8017c3c:	230a      	movs	r3, #10
 8017c3e:	fb03 0002 	mla	r0, r3, r2, r0
 8017c42:	e7d0      	b.n	8017be6 <__gethex+0xda>
 8017c44:	4629      	mov	r1, r5
 8017c46:	e7e0      	b.n	8017c0a <__gethex+0xfe>
 8017c48:	eba5 0308 	sub.w	r3, r5, r8
 8017c4c:	4621      	mov	r1, r4
 8017c4e:	3b01      	subs	r3, #1
 8017c50:	2b07      	cmp	r3, #7
 8017c52:	dc0a      	bgt.n	8017c6a <__gethex+0x15e>
 8017c54:	4648      	mov	r0, r9
 8017c56:	f001 f8fb 	bl	8018e50 <_Balloc>
 8017c5a:	4604      	mov	r4, r0
 8017c5c:	b940      	cbnz	r0, 8017c70 <__gethex+0x164>
 8017c5e:	4b62      	ldr	r3, [pc, #392]	; (8017de8 <__gethex+0x2dc>)
 8017c60:	4602      	mov	r2, r0
 8017c62:	21e4      	movs	r1, #228	; 0xe4
 8017c64:	4861      	ldr	r0, [pc, #388]	; (8017dec <__gethex+0x2e0>)
 8017c66:	f001 ff5f 	bl	8019b28 <__assert_func>
 8017c6a:	3101      	adds	r1, #1
 8017c6c:	105b      	asrs	r3, r3, #1
 8017c6e:	e7ef      	b.n	8017c50 <__gethex+0x144>
 8017c70:	2300      	movs	r3, #0
 8017c72:	f100 0a14 	add.w	sl, r0, #20
 8017c76:	495b      	ldr	r1, [pc, #364]	; (8017de4 <__gethex+0x2d8>)
 8017c78:	469b      	mov	fp, r3
 8017c7a:	f8cd a004 	str.w	sl, [sp, #4]
 8017c7e:	45a8      	cmp	r8, r5
 8017c80:	d342      	bcc.n	8017d08 <__gethex+0x1fc>
 8017c82:	9801      	ldr	r0, [sp, #4]
 8017c84:	f840 bb04 	str.w	fp, [r0], #4
 8017c88:	eba0 000a 	sub.w	r0, r0, sl
 8017c8c:	1080      	asrs	r0, r0, #2
 8017c8e:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8017c92:	6120      	str	r0, [r4, #16]
 8017c94:	4658      	mov	r0, fp
 8017c96:	f001 f9cf 	bl	8019038 <__hi0bits>
 8017c9a:	683d      	ldr	r5, [r7, #0]
 8017c9c:	eba8 0000 	sub.w	r0, r8, r0
 8017ca0:	42a8      	cmp	r0, r5
 8017ca2:	dd59      	ble.n	8017d58 <__gethex+0x24c>
 8017ca4:	eba0 0805 	sub.w	r8, r0, r5
 8017ca8:	4620      	mov	r0, r4
 8017caa:	4641      	mov	r1, r8
 8017cac:	f001 fd68 	bl	8019780 <__any_on>
 8017cb0:	4683      	mov	fp, r0
 8017cb2:	b1b8      	cbz	r0, 8017ce4 <__gethex+0x1d8>
 8017cb4:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8017cb8:	f04f 0b01 	mov.w	fp, #1
 8017cbc:	1159      	asrs	r1, r3, #5
 8017cbe:	f003 021f 	and.w	r2, r3, #31
 8017cc2:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8017cc6:	fa0b f202 	lsl.w	r2, fp, r2
 8017cca:	420a      	tst	r2, r1
 8017ccc:	d00a      	beq.n	8017ce4 <__gethex+0x1d8>
 8017cce:	455b      	cmp	r3, fp
 8017cd0:	dd06      	ble.n	8017ce0 <__gethex+0x1d4>
 8017cd2:	f1a8 0102 	sub.w	r1, r8, #2
 8017cd6:	4620      	mov	r0, r4
 8017cd8:	f001 fd52 	bl	8019780 <__any_on>
 8017cdc:	2800      	cmp	r0, #0
 8017cde:	d138      	bne.n	8017d52 <__gethex+0x246>
 8017ce0:	f04f 0b02 	mov.w	fp, #2
 8017ce4:	4446      	add	r6, r8
 8017ce6:	4641      	mov	r1, r8
 8017ce8:	4620      	mov	r0, r4
 8017cea:	f7ff fea9 	bl	8017a40 <rshift>
 8017cee:	68bb      	ldr	r3, [r7, #8]
 8017cf0:	42b3      	cmp	r3, r6
 8017cf2:	da41      	bge.n	8017d78 <__gethex+0x26c>
 8017cf4:	4621      	mov	r1, r4
 8017cf6:	4648      	mov	r0, r9
 8017cf8:	f001 f8ea 	bl	8018ed0 <_Bfree>
 8017cfc:	2300      	movs	r3, #0
 8017cfe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017d00:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8017d04:	6013      	str	r3, [r2, #0]
 8017d06:	e78a      	b.n	8017c1e <__gethex+0x112>
 8017d08:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8017d0c:	2a2e      	cmp	r2, #46	; 0x2e
 8017d0e:	d014      	beq.n	8017d3a <__gethex+0x22e>
 8017d10:	2b20      	cmp	r3, #32
 8017d12:	d106      	bne.n	8017d22 <__gethex+0x216>
 8017d14:	9b01      	ldr	r3, [sp, #4]
 8017d16:	f843 bb04 	str.w	fp, [r3], #4
 8017d1a:	f04f 0b00 	mov.w	fp, #0
 8017d1e:	9301      	str	r3, [sp, #4]
 8017d20:	465b      	mov	r3, fp
 8017d22:	7828      	ldrb	r0, [r5, #0]
 8017d24:	9303      	str	r3, [sp, #12]
 8017d26:	f7ff fedc 	bl	8017ae2 <__hexdig_fun>
 8017d2a:	9b03      	ldr	r3, [sp, #12]
 8017d2c:	f000 000f 	and.w	r0, r0, #15
 8017d30:	4098      	lsls	r0, r3
 8017d32:	3304      	adds	r3, #4
 8017d34:	ea4b 0b00 	orr.w	fp, fp, r0
 8017d38:	e7a1      	b.n	8017c7e <__gethex+0x172>
 8017d3a:	45a8      	cmp	r8, r5
 8017d3c:	d8e8      	bhi.n	8017d10 <__gethex+0x204>
 8017d3e:	2201      	movs	r2, #1
 8017d40:	4628      	mov	r0, r5
 8017d42:	9303      	str	r3, [sp, #12]
 8017d44:	f7fe fe7b 	bl	8016a3e <strncmp>
 8017d48:	4926      	ldr	r1, [pc, #152]	; (8017de4 <__gethex+0x2d8>)
 8017d4a:	9b03      	ldr	r3, [sp, #12]
 8017d4c:	2800      	cmp	r0, #0
 8017d4e:	d1df      	bne.n	8017d10 <__gethex+0x204>
 8017d50:	e795      	b.n	8017c7e <__gethex+0x172>
 8017d52:	f04f 0b03 	mov.w	fp, #3
 8017d56:	e7c5      	b.n	8017ce4 <__gethex+0x1d8>
 8017d58:	da0b      	bge.n	8017d72 <__gethex+0x266>
 8017d5a:	eba5 0800 	sub.w	r8, r5, r0
 8017d5e:	4621      	mov	r1, r4
 8017d60:	4648      	mov	r0, r9
 8017d62:	4642      	mov	r2, r8
 8017d64:	eba6 0608 	sub.w	r6, r6, r8
 8017d68:	f001 face 	bl	8019308 <__lshift>
 8017d6c:	4604      	mov	r4, r0
 8017d6e:	f100 0a14 	add.w	sl, r0, #20
 8017d72:	f04f 0b00 	mov.w	fp, #0
 8017d76:	e7ba      	b.n	8017cee <__gethex+0x1e2>
 8017d78:	687b      	ldr	r3, [r7, #4]
 8017d7a:	42b3      	cmp	r3, r6
 8017d7c:	dd74      	ble.n	8017e68 <__gethex+0x35c>
 8017d7e:	1b9e      	subs	r6, r3, r6
 8017d80:	42b5      	cmp	r5, r6
 8017d82:	dc35      	bgt.n	8017df0 <__gethex+0x2e4>
 8017d84:	68fb      	ldr	r3, [r7, #12]
 8017d86:	2b02      	cmp	r3, #2
 8017d88:	d023      	beq.n	8017dd2 <__gethex+0x2c6>
 8017d8a:	2b03      	cmp	r3, #3
 8017d8c:	d025      	beq.n	8017dda <__gethex+0x2ce>
 8017d8e:	2b01      	cmp	r3, #1
 8017d90:	d115      	bne.n	8017dbe <__gethex+0x2b2>
 8017d92:	42b5      	cmp	r5, r6
 8017d94:	d113      	bne.n	8017dbe <__gethex+0x2b2>
 8017d96:	2d01      	cmp	r5, #1
 8017d98:	d10b      	bne.n	8017db2 <__gethex+0x2a6>
 8017d9a:	687b      	ldr	r3, [r7, #4]
 8017d9c:	f04f 0862 	mov.w	r8, #98	; 0x62
 8017da0:	9a02      	ldr	r2, [sp, #8]
 8017da2:	6013      	str	r3, [r2, #0]
 8017da4:	2301      	movs	r3, #1
 8017da6:	6123      	str	r3, [r4, #16]
 8017da8:	f8ca 3000 	str.w	r3, [sl]
 8017dac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017dae:	601c      	str	r4, [r3, #0]
 8017db0:	e735      	b.n	8017c1e <__gethex+0x112>
 8017db2:	1e69      	subs	r1, r5, #1
 8017db4:	4620      	mov	r0, r4
 8017db6:	f001 fce3 	bl	8019780 <__any_on>
 8017dba:	2800      	cmp	r0, #0
 8017dbc:	d1ed      	bne.n	8017d9a <__gethex+0x28e>
 8017dbe:	4621      	mov	r1, r4
 8017dc0:	4648      	mov	r0, r9
 8017dc2:	f001 f885 	bl	8018ed0 <_Bfree>
 8017dc6:	2300      	movs	r3, #0
 8017dc8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017dca:	f04f 0850 	mov.w	r8, #80	; 0x50
 8017dce:	6013      	str	r3, [r2, #0]
 8017dd0:	e725      	b.n	8017c1e <__gethex+0x112>
 8017dd2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017dd4:	2b00      	cmp	r3, #0
 8017dd6:	d1f2      	bne.n	8017dbe <__gethex+0x2b2>
 8017dd8:	e7df      	b.n	8017d9a <__gethex+0x28e>
 8017dda:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017ddc:	2b00      	cmp	r3, #0
 8017dde:	d1dc      	bne.n	8017d9a <__gethex+0x28e>
 8017de0:	e7ed      	b.n	8017dbe <__gethex+0x2b2>
 8017de2:	bf00      	nop
 8017de4:	0801ce1f 	.word	0x0801ce1f
 8017de8:	0801cffd 	.word	0x0801cffd
 8017dec:	0801d00e 	.word	0x0801d00e
 8017df0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8017df4:	f1bb 0f00 	cmp.w	fp, #0
 8017df8:	d133      	bne.n	8017e62 <__gethex+0x356>
 8017dfa:	f1b8 0f00 	cmp.w	r8, #0
 8017dfe:	d004      	beq.n	8017e0a <__gethex+0x2fe>
 8017e00:	4641      	mov	r1, r8
 8017e02:	4620      	mov	r0, r4
 8017e04:	f001 fcbc 	bl	8019780 <__any_on>
 8017e08:	4683      	mov	fp, r0
 8017e0a:	ea4f 1268 	mov.w	r2, r8, asr #5
 8017e0e:	2301      	movs	r3, #1
 8017e10:	f008 081f 	and.w	r8, r8, #31
 8017e14:	4631      	mov	r1, r6
 8017e16:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8017e1a:	4620      	mov	r0, r4
 8017e1c:	fa03 f308 	lsl.w	r3, r3, r8
 8017e20:	1bad      	subs	r5, r5, r6
 8017e22:	f04f 0802 	mov.w	r8, #2
 8017e26:	4213      	tst	r3, r2
 8017e28:	bf18      	it	ne
 8017e2a:	f04b 0b02 	orrne.w	fp, fp, #2
 8017e2e:	f7ff fe07 	bl	8017a40 <rshift>
 8017e32:	687e      	ldr	r6, [r7, #4]
 8017e34:	f1bb 0f00 	cmp.w	fp, #0
 8017e38:	d04a      	beq.n	8017ed0 <__gethex+0x3c4>
 8017e3a:	68fb      	ldr	r3, [r7, #12]
 8017e3c:	2b02      	cmp	r3, #2
 8017e3e:	d016      	beq.n	8017e6e <__gethex+0x362>
 8017e40:	2b03      	cmp	r3, #3
 8017e42:	d018      	beq.n	8017e76 <__gethex+0x36a>
 8017e44:	2b01      	cmp	r3, #1
 8017e46:	d109      	bne.n	8017e5c <__gethex+0x350>
 8017e48:	f01b 0f02 	tst.w	fp, #2
 8017e4c:	d006      	beq.n	8017e5c <__gethex+0x350>
 8017e4e:	f8da 3000 	ldr.w	r3, [sl]
 8017e52:	ea4b 0b03 	orr.w	fp, fp, r3
 8017e56:	f01b 0f01 	tst.w	fp, #1
 8017e5a:	d10f      	bne.n	8017e7c <__gethex+0x370>
 8017e5c:	f048 0810 	orr.w	r8, r8, #16
 8017e60:	e036      	b.n	8017ed0 <__gethex+0x3c4>
 8017e62:	f04f 0b01 	mov.w	fp, #1
 8017e66:	e7d0      	b.n	8017e0a <__gethex+0x2fe>
 8017e68:	f04f 0801 	mov.w	r8, #1
 8017e6c:	e7e2      	b.n	8017e34 <__gethex+0x328>
 8017e6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017e70:	f1c3 0301 	rsb	r3, r3, #1
 8017e74:	930f      	str	r3, [sp, #60]	; 0x3c
 8017e76:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017e78:	2b00      	cmp	r3, #0
 8017e7a:	d0ef      	beq.n	8017e5c <__gethex+0x350>
 8017e7c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8017e80:	f104 0214 	add.w	r2, r4, #20
 8017e84:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8017e88:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8017e8c:	9301      	str	r3, [sp, #4]
 8017e8e:	2300      	movs	r3, #0
 8017e90:	4694      	mov	ip, r2
 8017e92:	f852 1b04 	ldr.w	r1, [r2], #4
 8017e96:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 8017e9a:	d01e      	beq.n	8017eda <__gethex+0x3ce>
 8017e9c:	3101      	adds	r1, #1
 8017e9e:	f8cc 1000 	str.w	r1, [ip]
 8017ea2:	f1b8 0f02 	cmp.w	r8, #2
 8017ea6:	f104 0214 	add.w	r2, r4, #20
 8017eaa:	d13d      	bne.n	8017f28 <__gethex+0x41c>
 8017eac:	683b      	ldr	r3, [r7, #0]
 8017eae:	3b01      	subs	r3, #1
 8017eb0:	42ab      	cmp	r3, r5
 8017eb2:	d10b      	bne.n	8017ecc <__gethex+0x3c0>
 8017eb4:	1169      	asrs	r1, r5, #5
 8017eb6:	2301      	movs	r3, #1
 8017eb8:	f005 051f 	and.w	r5, r5, #31
 8017ebc:	fa03 f505 	lsl.w	r5, r3, r5
 8017ec0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017ec4:	421d      	tst	r5, r3
 8017ec6:	bf18      	it	ne
 8017ec8:	f04f 0801 	movne.w	r8, #1
 8017ecc:	f048 0820 	orr.w	r8, r8, #32
 8017ed0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017ed2:	601c      	str	r4, [r3, #0]
 8017ed4:	9b02      	ldr	r3, [sp, #8]
 8017ed6:	601e      	str	r6, [r3, #0]
 8017ed8:	e6a1      	b.n	8017c1e <__gethex+0x112>
 8017eda:	4290      	cmp	r0, r2
 8017edc:	f842 3c04 	str.w	r3, [r2, #-4]
 8017ee0:	d8d6      	bhi.n	8017e90 <__gethex+0x384>
 8017ee2:	68a2      	ldr	r2, [r4, #8]
 8017ee4:	4593      	cmp	fp, r2
 8017ee6:	db17      	blt.n	8017f18 <__gethex+0x40c>
 8017ee8:	6861      	ldr	r1, [r4, #4]
 8017eea:	4648      	mov	r0, r9
 8017eec:	3101      	adds	r1, #1
 8017eee:	f000 ffaf 	bl	8018e50 <_Balloc>
 8017ef2:	4682      	mov	sl, r0
 8017ef4:	b918      	cbnz	r0, 8017efe <__gethex+0x3f2>
 8017ef6:	4b1b      	ldr	r3, [pc, #108]	; (8017f64 <__gethex+0x458>)
 8017ef8:	4602      	mov	r2, r0
 8017efa:	2184      	movs	r1, #132	; 0x84
 8017efc:	e6b2      	b.n	8017c64 <__gethex+0x158>
 8017efe:	6922      	ldr	r2, [r4, #16]
 8017f00:	f104 010c 	add.w	r1, r4, #12
 8017f04:	300c      	adds	r0, #12
 8017f06:	3202      	adds	r2, #2
 8017f08:	0092      	lsls	r2, r2, #2
 8017f0a:	f7fe fea6 	bl	8016c5a <memcpy>
 8017f0e:	4621      	mov	r1, r4
 8017f10:	4654      	mov	r4, sl
 8017f12:	4648      	mov	r0, r9
 8017f14:	f000 ffdc 	bl	8018ed0 <_Bfree>
 8017f18:	6922      	ldr	r2, [r4, #16]
 8017f1a:	1c51      	adds	r1, r2, #1
 8017f1c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8017f20:	6121      	str	r1, [r4, #16]
 8017f22:	2101      	movs	r1, #1
 8017f24:	6151      	str	r1, [r2, #20]
 8017f26:	e7bc      	b.n	8017ea2 <__gethex+0x396>
 8017f28:	6921      	ldr	r1, [r4, #16]
 8017f2a:	4559      	cmp	r1, fp
 8017f2c:	dd0b      	ble.n	8017f46 <__gethex+0x43a>
 8017f2e:	2101      	movs	r1, #1
 8017f30:	4620      	mov	r0, r4
 8017f32:	f7ff fd85 	bl	8017a40 <rshift>
 8017f36:	3601      	adds	r6, #1
 8017f38:	68bb      	ldr	r3, [r7, #8]
 8017f3a:	42b3      	cmp	r3, r6
 8017f3c:	f6ff aeda 	blt.w	8017cf4 <__gethex+0x1e8>
 8017f40:	f04f 0801 	mov.w	r8, #1
 8017f44:	e7c2      	b.n	8017ecc <__gethex+0x3c0>
 8017f46:	f015 051f 	ands.w	r5, r5, #31
 8017f4a:	d0f9      	beq.n	8017f40 <__gethex+0x434>
 8017f4c:	9b01      	ldr	r3, [sp, #4]
 8017f4e:	f1c5 0520 	rsb	r5, r5, #32
 8017f52:	441a      	add	r2, r3
 8017f54:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8017f58:	f001 f86e 	bl	8019038 <__hi0bits>
 8017f5c:	42a8      	cmp	r0, r5
 8017f5e:	dbe6      	blt.n	8017f2e <__gethex+0x422>
 8017f60:	e7ee      	b.n	8017f40 <__gethex+0x434>
 8017f62:	bf00      	nop
 8017f64:	0801cffd 	.word	0x0801cffd

08017f68 <L_shift>:
 8017f68:	f1c2 0208 	rsb	r2, r2, #8
 8017f6c:	0092      	lsls	r2, r2, #2
 8017f6e:	b570      	push	{r4, r5, r6, lr}
 8017f70:	f1c2 0620 	rsb	r6, r2, #32
 8017f74:	6843      	ldr	r3, [r0, #4]
 8017f76:	6804      	ldr	r4, [r0, #0]
 8017f78:	fa03 f506 	lsl.w	r5, r3, r6
 8017f7c:	40d3      	lsrs	r3, r2
 8017f7e:	432c      	orrs	r4, r5
 8017f80:	6004      	str	r4, [r0, #0]
 8017f82:	f840 3f04 	str.w	r3, [r0, #4]!
 8017f86:	4288      	cmp	r0, r1
 8017f88:	d3f4      	bcc.n	8017f74 <L_shift+0xc>
 8017f8a:	bd70      	pop	{r4, r5, r6, pc}

08017f8c <__match>:
 8017f8c:	6803      	ldr	r3, [r0, #0]
 8017f8e:	3301      	adds	r3, #1
 8017f90:	b530      	push	{r4, r5, lr}
 8017f92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017f96:	b914      	cbnz	r4, 8017f9e <__match+0x12>
 8017f98:	6003      	str	r3, [r0, #0]
 8017f9a:	2001      	movs	r0, #1
 8017f9c:	bd30      	pop	{r4, r5, pc}
 8017f9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017fa2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8017fa6:	2d19      	cmp	r5, #25
 8017fa8:	bf98      	it	ls
 8017faa:	3220      	addls	r2, #32
 8017fac:	42a2      	cmp	r2, r4
 8017fae:	d0f0      	beq.n	8017f92 <__match+0x6>
 8017fb0:	2000      	movs	r0, #0
 8017fb2:	e7f3      	b.n	8017f9c <__match+0x10>

08017fb4 <__hexnan>:
 8017fb4:	680b      	ldr	r3, [r1, #0]
 8017fb6:	6801      	ldr	r1, [r0, #0]
 8017fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017fbc:	115e      	asrs	r6, r3, #5
 8017fbe:	f013 031f 	ands.w	r3, r3, #31
 8017fc2:	f04f 0500 	mov.w	r5, #0
 8017fc6:	b087      	sub	sp, #28
 8017fc8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8017fcc:	4682      	mov	sl, r0
 8017fce:	4690      	mov	r8, r2
 8017fd0:	46ab      	mov	fp, r5
 8017fd2:	bf18      	it	ne
 8017fd4:	3604      	addne	r6, #4
 8017fd6:	9301      	str	r3, [sp, #4]
 8017fd8:	9502      	str	r5, [sp, #8]
 8017fda:	1f37      	subs	r7, r6, #4
 8017fdc:	f846 5c04 	str.w	r5, [r6, #-4]
 8017fe0:	46b9      	mov	r9, r7
 8017fe2:	463c      	mov	r4, r7
 8017fe4:	1c4b      	adds	r3, r1, #1
 8017fe6:	784a      	ldrb	r2, [r1, #1]
 8017fe8:	9303      	str	r3, [sp, #12]
 8017fea:	b342      	cbz	r2, 801803e <__hexnan+0x8a>
 8017fec:	4610      	mov	r0, r2
 8017fee:	9105      	str	r1, [sp, #20]
 8017ff0:	9204      	str	r2, [sp, #16]
 8017ff2:	f7ff fd76 	bl	8017ae2 <__hexdig_fun>
 8017ff6:	2800      	cmp	r0, #0
 8017ff8:	d14f      	bne.n	801809a <__hexnan+0xe6>
 8017ffa:	9a04      	ldr	r2, [sp, #16]
 8017ffc:	9905      	ldr	r1, [sp, #20]
 8017ffe:	2a20      	cmp	r2, #32
 8018000:	d818      	bhi.n	8018034 <__hexnan+0x80>
 8018002:	9b02      	ldr	r3, [sp, #8]
 8018004:	459b      	cmp	fp, r3
 8018006:	dd13      	ble.n	8018030 <__hexnan+0x7c>
 8018008:	454c      	cmp	r4, r9
 801800a:	d206      	bcs.n	801801a <__hexnan+0x66>
 801800c:	2d07      	cmp	r5, #7
 801800e:	dc04      	bgt.n	801801a <__hexnan+0x66>
 8018010:	462a      	mov	r2, r5
 8018012:	4649      	mov	r1, r9
 8018014:	4620      	mov	r0, r4
 8018016:	f7ff ffa7 	bl	8017f68 <L_shift>
 801801a:	4544      	cmp	r4, r8
 801801c:	d94f      	bls.n	80180be <__hexnan+0x10a>
 801801e:	2300      	movs	r3, #0
 8018020:	f1a4 0904 	sub.w	r9, r4, #4
 8018024:	f8cd b008 	str.w	fp, [sp, #8]
 8018028:	f844 3c04 	str.w	r3, [r4, #-4]
 801802c:	461d      	mov	r5, r3
 801802e:	464c      	mov	r4, r9
 8018030:	9903      	ldr	r1, [sp, #12]
 8018032:	e7d7      	b.n	8017fe4 <__hexnan+0x30>
 8018034:	2a29      	cmp	r2, #41	; 0x29
 8018036:	d154      	bne.n	80180e2 <__hexnan+0x12e>
 8018038:	3102      	adds	r1, #2
 801803a:	f8ca 1000 	str.w	r1, [sl]
 801803e:	f1bb 0f00 	cmp.w	fp, #0
 8018042:	d04e      	beq.n	80180e2 <__hexnan+0x12e>
 8018044:	454c      	cmp	r4, r9
 8018046:	d206      	bcs.n	8018056 <__hexnan+0xa2>
 8018048:	2d07      	cmp	r5, #7
 801804a:	dc04      	bgt.n	8018056 <__hexnan+0xa2>
 801804c:	462a      	mov	r2, r5
 801804e:	4649      	mov	r1, r9
 8018050:	4620      	mov	r0, r4
 8018052:	f7ff ff89 	bl	8017f68 <L_shift>
 8018056:	4544      	cmp	r4, r8
 8018058:	d933      	bls.n	80180c2 <__hexnan+0x10e>
 801805a:	f1a8 0204 	sub.w	r2, r8, #4
 801805e:	4623      	mov	r3, r4
 8018060:	f853 1b04 	ldr.w	r1, [r3], #4
 8018064:	429f      	cmp	r7, r3
 8018066:	f842 1f04 	str.w	r1, [r2, #4]!
 801806a:	d2f9      	bcs.n	8018060 <__hexnan+0xac>
 801806c:	1b3b      	subs	r3, r7, r4
 801806e:	3e03      	subs	r6, #3
 8018070:	3401      	adds	r4, #1
 8018072:	2200      	movs	r2, #0
 8018074:	f023 0303 	bic.w	r3, r3, #3
 8018078:	3304      	adds	r3, #4
 801807a:	42a6      	cmp	r6, r4
 801807c:	bf38      	it	cc
 801807e:	2304      	movcc	r3, #4
 8018080:	4443      	add	r3, r8
 8018082:	f843 2b04 	str.w	r2, [r3], #4
 8018086:	429f      	cmp	r7, r3
 8018088:	d2fb      	bcs.n	8018082 <__hexnan+0xce>
 801808a:	683b      	ldr	r3, [r7, #0]
 801808c:	b91b      	cbnz	r3, 8018096 <__hexnan+0xe2>
 801808e:	4547      	cmp	r7, r8
 8018090:	d125      	bne.n	80180de <__hexnan+0x12a>
 8018092:	2301      	movs	r3, #1
 8018094:	603b      	str	r3, [r7, #0]
 8018096:	2005      	movs	r0, #5
 8018098:	e024      	b.n	80180e4 <__hexnan+0x130>
 801809a:	3501      	adds	r5, #1
 801809c:	f10b 0b01 	add.w	fp, fp, #1
 80180a0:	2d08      	cmp	r5, #8
 80180a2:	dd05      	ble.n	80180b0 <__hexnan+0xfc>
 80180a4:	4544      	cmp	r4, r8
 80180a6:	d9c3      	bls.n	8018030 <__hexnan+0x7c>
 80180a8:	2300      	movs	r3, #0
 80180aa:	3c04      	subs	r4, #4
 80180ac:	2501      	movs	r5, #1
 80180ae:	6023      	str	r3, [r4, #0]
 80180b0:	6822      	ldr	r2, [r4, #0]
 80180b2:	f000 000f 	and.w	r0, r0, #15
 80180b6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80180ba:	6020      	str	r0, [r4, #0]
 80180bc:	e7b8      	b.n	8018030 <__hexnan+0x7c>
 80180be:	2508      	movs	r5, #8
 80180c0:	e7b6      	b.n	8018030 <__hexnan+0x7c>
 80180c2:	9b01      	ldr	r3, [sp, #4]
 80180c4:	2b00      	cmp	r3, #0
 80180c6:	d0e0      	beq.n	801808a <__hexnan+0xd6>
 80180c8:	f1c3 0320 	rsb	r3, r3, #32
 80180cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80180d0:	40da      	lsrs	r2, r3
 80180d2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80180d6:	4013      	ands	r3, r2
 80180d8:	f846 3c04 	str.w	r3, [r6, #-4]
 80180dc:	e7d5      	b.n	801808a <__hexnan+0xd6>
 80180de:	3f04      	subs	r7, #4
 80180e0:	e7d3      	b.n	801808a <__hexnan+0xd6>
 80180e2:	2004      	movs	r0, #4
 80180e4:	b007      	add	sp, #28
 80180e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080180ea <__ssputs_r>:
 80180ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80180ee:	461f      	mov	r7, r3
 80180f0:	688e      	ldr	r6, [r1, #8]
 80180f2:	4682      	mov	sl, r0
 80180f4:	460c      	mov	r4, r1
 80180f6:	42be      	cmp	r6, r7
 80180f8:	4690      	mov	r8, r2
 80180fa:	680b      	ldr	r3, [r1, #0]
 80180fc:	d82c      	bhi.n	8018158 <__ssputs_r+0x6e>
 80180fe:	898a      	ldrh	r2, [r1, #12]
 8018100:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8018104:	d026      	beq.n	8018154 <__ssputs_r+0x6a>
 8018106:	6965      	ldr	r5, [r4, #20]
 8018108:	6909      	ldr	r1, [r1, #16]
 801810a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801810e:	eba3 0901 	sub.w	r9, r3, r1
 8018112:	1c7b      	adds	r3, r7, #1
 8018114:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8018118:	444b      	add	r3, r9
 801811a:	106d      	asrs	r5, r5, #1
 801811c:	429d      	cmp	r5, r3
 801811e:	bf38      	it	cc
 8018120:	461d      	movcc	r5, r3
 8018122:	0553      	lsls	r3, r2, #21
 8018124:	d527      	bpl.n	8018176 <__ssputs_r+0x8c>
 8018126:	4629      	mov	r1, r5
 8018128:	f7fc fe9a 	bl	8014e60 <_malloc_r>
 801812c:	4606      	mov	r6, r0
 801812e:	b360      	cbz	r0, 801818a <__ssputs_r+0xa0>
 8018130:	464a      	mov	r2, r9
 8018132:	6921      	ldr	r1, [r4, #16]
 8018134:	f7fe fd91 	bl	8016c5a <memcpy>
 8018138:	89a3      	ldrh	r3, [r4, #12]
 801813a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801813e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018142:	81a3      	strh	r3, [r4, #12]
 8018144:	6126      	str	r6, [r4, #16]
 8018146:	444e      	add	r6, r9
 8018148:	6165      	str	r5, [r4, #20]
 801814a:	eba5 0509 	sub.w	r5, r5, r9
 801814e:	6026      	str	r6, [r4, #0]
 8018150:	463e      	mov	r6, r7
 8018152:	60a5      	str	r5, [r4, #8]
 8018154:	42be      	cmp	r6, r7
 8018156:	d900      	bls.n	801815a <__ssputs_r+0x70>
 8018158:	463e      	mov	r6, r7
 801815a:	4632      	mov	r2, r6
 801815c:	4641      	mov	r1, r8
 801815e:	6820      	ldr	r0, [r4, #0]
 8018160:	f7fe fca2 	bl	8016aa8 <memmove>
 8018164:	68a3      	ldr	r3, [r4, #8]
 8018166:	2000      	movs	r0, #0
 8018168:	1b9b      	subs	r3, r3, r6
 801816a:	60a3      	str	r3, [r4, #8]
 801816c:	6823      	ldr	r3, [r4, #0]
 801816e:	4433      	add	r3, r6
 8018170:	6023      	str	r3, [r4, #0]
 8018172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018176:	462a      	mov	r2, r5
 8018178:	f001 fb5a 	bl	8019830 <_realloc_r>
 801817c:	4606      	mov	r6, r0
 801817e:	2800      	cmp	r0, #0
 8018180:	d1e0      	bne.n	8018144 <__ssputs_r+0x5a>
 8018182:	6921      	ldr	r1, [r4, #16]
 8018184:	4650      	mov	r0, sl
 8018186:	f7ff fc0f 	bl	80179a8 <_free_r>
 801818a:	230c      	movs	r3, #12
 801818c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018190:	f8ca 3000 	str.w	r3, [sl]
 8018194:	89a3      	ldrh	r3, [r4, #12]
 8018196:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801819a:	81a3      	strh	r3, [r4, #12]
 801819c:	e7e9      	b.n	8018172 <__ssputs_r+0x88>
	...

080181a0 <_svfiprintf_r>:
 80181a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80181a4:	4698      	mov	r8, r3
 80181a6:	898b      	ldrh	r3, [r1, #12]
 80181a8:	b09d      	sub	sp, #116	; 0x74
 80181aa:	4607      	mov	r7, r0
 80181ac:	061b      	lsls	r3, r3, #24
 80181ae:	460d      	mov	r5, r1
 80181b0:	4614      	mov	r4, r2
 80181b2:	d50e      	bpl.n	80181d2 <_svfiprintf_r+0x32>
 80181b4:	690b      	ldr	r3, [r1, #16]
 80181b6:	b963      	cbnz	r3, 80181d2 <_svfiprintf_r+0x32>
 80181b8:	2140      	movs	r1, #64	; 0x40
 80181ba:	f7fc fe51 	bl	8014e60 <_malloc_r>
 80181be:	6028      	str	r0, [r5, #0]
 80181c0:	6128      	str	r0, [r5, #16]
 80181c2:	b920      	cbnz	r0, 80181ce <_svfiprintf_r+0x2e>
 80181c4:	230c      	movs	r3, #12
 80181c6:	603b      	str	r3, [r7, #0]
 80181c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80181cc:	e0d0      	b.n	8018370 <_svfiprintf_r+0x1d0>
 80181ce:	2340      	movs	r3, #64	; 0x40
 80181d0:	616b      	str	r3, [r5, #20]
 80181d2:	2300      	movs	r3, #0
 80181d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80181d8:	f04f 0901 	mov.w	r9, #1
 80181dc:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8018388 <_svfiprintf_r+0x1e8>
 80181e0:	9309      	str	r3, [sp, #36]	; 0x24
 80181e2:	2320      	movs	r3, #32
 80181e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80181e8:	2330      	movs	r3, #48	; 0x30
 80181ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80181ee:	4623      	mov	r3, r4
 80181f0:	469a      	mov	sl, r3
 80181f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80181f6:	b10a      	cbz	r2, 80181fc <_svfiprintf_r+0x5c>
 80181f8:	2a25      	cmp	r2, #37	; 0x25
 80181fa:	d1f9      	bne.n	80181f0 <_svfiprintf_r+0x50>
 80181fc:	ebba 0b04 	subs.w	fp, sl, r4
 8018200:	d00b      	beq.n	801821a <_svfiprintf_r+0x7a>
 8018202:	465b      	mov	r3, fp
 8018204:	4622      	mov	r2, r4
 8018206:	4629      	mov	r1, r5
 8018208:	4638      	mov	r0, r7
 801820a:	f7ff ff6e 	bl	80180ea <__ssputs_r>
 801820e:	3001      	adds	r0, #1
 8018210:	f000 80a9 	beq.w	8018366 <_svfiprintf_r+0x1c6>
 8018214:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018216:	445a      	add	r2, fp
 8018218:	9209      	str	r2, [sp, #36]	; 0x24
 801821a:	f89a 3000 	ldrb.w	r3, [sl]
 801821e:	2b00      	cmp	r3, #0
 8018220:	f000 80a1 	beq.w	8018366 <_svfiprintf_r+0x1c6>
 8018224:	2300      	movs	r3, #0
 8018226:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801822a:	f10a 0a01 	add.w	sl, sl, #1
 801822e:	9304      	str	r3, [sp, #16]
 8018230:	9307      	str	r3, [sp, #28]
 8018232:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018236:	931a      	str	r3, [sp, #104]	; 0x68
 8018238:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801823c:	4654      	mov	r4, sl
 801823e:	2205      	movs	r2, #5
 8018240:	4851      	ldr	r0, [pc, #324]	; (8018388 <_svfiprintf_r+0x1e8>)
 8018242:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018246:	f7fe fcfa 	bl	8016c3e <memchr>
 801824a:	9a04      	ldr	r2, [sp, #16]
 801824c:	b9d8      	cbnz	r0, 8018286 <_svfiprintf_r+0xe6>
 801824e:	06d0      	lsls	r0, r2, #27
 8018250:	bf44      	itt	mi
 8018252:	2320      	movmi	r3, #32
 8018254:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018258:	0711      	lsls	r1, r2, #28
 801825a:	bf44      	itt	mi
 801825c:	232b      	movmi	r3, #43	; 0x2b
 801825e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018262:	f89a 3000 	ldrb.w	r3, [sl]
 8018266:	2b2a      	cmp	r3, #42	; 0x2a
 8018268:	d015      	beq.n	8018296 <_svfiprintf_r+0xf6>
 801826a:	9a07      	ldr	r2, [sp, #28]
 801826c:	4654      	mov	r4, sl
 801826e:	2000      	movs	r0, #0
 8018270:	f04f 0c0a 	mov.w	ip, #10
 8018274:	4621      	mov	r1, r4
 8018276:	f811 3b01 	ldrb.w	r3, [r1], #1
 801827a:	3b30      	subs	r3, #48	; 0x30
 801827c:	2b09      	cmp	r3, #9
 801827e:	d94d      	bls.n	801831c <_svfiprintf_r+0x17c>
 8018280:	b1b0      	cbz	r0, 80182b0 <_svfiprintf_r+0x110>
 8018282:	9207      	str	r2, [sp, #28]
 8018284:	e014      	b.n	80182b0 <_svfiprintf_r+0x110>
 8018286:	eba0 0308 	sub.w	r3, r0, r8
 801828a:	46a2      	mov	sl, r4
 801828c:	fa09 f303 	lsl.w	r3, r9, r3
 8018290:	4313      	orrs	r3, r2
 8018292:	9304      	str	r3, [sp, #16]
 8018294:	e7d2      	b.n	801823c <_svfiprintf_r+0x9c>
 8018296:	9b03      	ldr	r3, [sp, #12]
 8018298:	1d19      	adds	r1, r3, #4
 801829a:	681b      	ldr	r3, [r3, #0]
 801829c:	2b00      	cmp	r3, #0
 801829e:	9103      	str	r1, [sp, #12]
 80182a0:	bfbb      	ittet	lt
 80182a2:	425b      	neglt	r3, r3
 80182a4:	f042 0202 	orrlt.w	r2, r2, #2
 80182a8:	9307      	strge	r3, [sp, #28]
 80182aa:	9307      	strlt	r3, [sp, #28]
 80182ac:	bfb8      	it	lt
 80182ae:	9204      	strlt	r2, [sp, #16]
 80182b0:	7823      	ldrb	r3, [r4, #0]
 80182b2:	2b2e      	cmp	r3, #46	; 0x2e
 80182b4:	d10c      	bne.n	80182d0 <_svfiprintf_r+0x130>
 80182b6:	7863      	ldrb	r3, [r4, #1]
 80182b8:	2b2a      	cmp	r3, #42	; 0x2a
 80182ba:	d134      	bne.n	8018326 <_svfiprintf_r+0x186>
 80182bc:	9b03      	ldr	r3, [sp, #12]
 80182be:	3402      	adds	r4, #2
 80182c0:	1d1a      	adds	r2, r3, #4
 80182c2:	681b      	ldr	r3, [r3, #0]
 80182c4:	2b00      	cmp	r3, #0
 80182c6:	9203      	str	r2, [sp, #12]
 80182c8:	bfb8      	it	lt
 80182ca:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80182ce:	9305      	str	r3, [sp, #20]
 80182d0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8018398 <_svfiprintf_r+0x1f8>
 80182d4:	2203      	movs	r2, #3
 80182d6:	7821      	ldrb	r1, [r4, #0]
 80182d8:	4650      	mov	r0, sl
 80182da:	f7fe fcb0 	bl	8016c3e <memchr>
 80182de:	b138      	cbz	r0, 80182f0 <_svfiprintf_r+0x150>
 80182e0:	eba0 000a 	sub.w	r0, r0, sl
 80182e4:	2240      	movs	r2, #64	; 0x40
 80182e6:	9b04      	ldr	r3, [sp, #16]
 80182e8:	3401      	adds	r4, #1
 80182ea:	4082      	lsls	r2, r0
 80182ec:	4313      	orrs	r3, r2
 80182ee:	9304      	str	r3, [sp, #16]
 80182f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80182f4:	2206      	movs	r2, #6
 80182f6:	4825      	ldr	r0, [pc, #148]	; (801838c <_svfiprintf_r+0x1ec>)
 80182f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80182fc:	f7fe fc9f 	bl	8016c3e <memchr>
 8018300:	2800      	cmp	r0, #0
 8018302:	d038      	beq.n	8018376 <_svfiprintf_r+0x1d6>
 8018304:	4b22      	ldr	r3, [pc, #136]	; (8018390 <_svfiprintf_r+0x1f0>)
 8018306:	bb1b      	cbnz	r3, 8018350 <_svfiprintf_r+0x1b0>
 8018308:	9b03      	ldr	r3, [sp, #12]
 801830a:	3307      	adds	r3, #7
 801830c:	f023 0307 	bic.w	r3, r3, #7
 8018310:	3308      	adds	r3, #8
 8018312:	9303      	str	r3, [sp, #12]
 8018314:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018316:	4433      	add	r3, r6
 8018318:	9309      	str	r3, [sp, #36]	; 0x24
 801831a:	e768      	b.n	80181ee <_svfiprintf_r+0x4e>
 801831c:	fb0c 3202 	mla	r2, ip, r2, r3
 8018320:	460c      	mov	r4, r1
 8018322:	2001      	movs	r0, #1
 8018324:	e7a6      	b.n	8018274 <_svfiprintf_r+0xd4>
 8018326:	2300      	movs	r3, #0
 8018328:	3401      	adds	r4, #1
 801832a:	f04f 0c0a 	mov.w	ip, #10
 801832e:	4619      	mov	r1, r3
 8018330:	9305      	str	r3, [sp, #20]
 8018332:	4620      	mov	r0, r4
 8018334:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018338:	3a30      	subs	r2, #48	; 0x30
 801833a:	2a09      	cmp	r2, #9
 801833c:	d903      	bls.n	8018346 <_svfiprintf_r+0x1a6>
 801833e:	2b00      	cmp	r3, #0
 8018340:	d0c6      	beq.n	80182d0 <_svfiprintf_r+0x130>
 8018342:	9105      	str	r1, [sp, #20]
 8018344:	e7c4      	b.n	80182d0 <_svfiprintf_r+0x130>
 8018346:	fb0c 2101 	mla	r1, ip, r1, r2
 801834a:	4604      	mov	r4, r0
 801834c:	2301      	movs	r3, #1
 801834e:	e7f0      	b.n	8018332 <_svfiprintf_r+0x192>
 8018350:	ab03      	add	r3, sp, #12
 8018352:	462a      	mov	r2, r5
 8018354:	a904      	add	r1, sp, #16
 8018356:	4638      	mov	r0, r7
 8018358:	9300      	str	r3, [sp, #0]
 801835a:	4b0e      	ldr	r3, [pc, #56]	; (8018394 <_svfiprintf_r+0x1f4>)
 801835c:	f7fc fb1a 	bl	8014994 <_printf_float>
 8018360:	1c42      	adds	r2, r0, #1
 8018362:	4606      	mov	r6, r0
 8018364:	d1d6      	bne.n	8018314 <_svfiprintf_r+0x174>
 8018366:	89ab      	ldrh	r3, [r5, #12]
 8018368:	065b      	lsls	r3, r3, #25
 801836a:	f53f af2d 	bmi.w	80181c8 <_svfiprintf_r+0x28>
 801836e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018370:	b01d      	add	sp, #116	; 0x74
 8018372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018376:	ab03      	add	r3, sp, #12
 8018378:	462a      	mov	r2, r5
 801837a:	a904      	add	r1, sp, #16
 801837c:	4638      	mov	r0, r7
 801837e:	9300      	str	r3, [sp, #0]
 8018380:	4b04      	ldr	r3, [pc, #16]	; (8018394 <_svfiprintf_r+0x1f4>)
 8018382:	f7fc fe5f 	bl	8015044 <_printf_i>
 8018386:	e7eb      	b.n	8018360 <_svfiprintf_r+0x1c0>
 8018388:	0801d06e 	.word	0x0801d06e
 801838c:	0801d078 	.word	0x0801d078
 8018390:	08014995 	.word	0x08014995
 8018394:	080180eb 	.word	0x080180eb
 8018398:	0801d074 	.word	0x0801d074

0801839c <_sungetc_r>:
 801839c:	b538      	push	{r3, r4, r5, lr}
 801839e:	1c4b      	adds	r3, r1, #1
 80183a0:	4614      	mov	r4, r2
 80183a2:	d103      	bne.n	80183ac <_sungetc_r+0x10>
 80183a4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80183a8:	4628      	mov	r0, r5
 80183aa:	bd38      	pop	{r3, r4, r5, pc}
 80183ac:	8993      	ldrh	r3, [r2, #12]
 80183ae:	b2cd      	uxtb	r5, r1
 80183b0:	f023 0320 	bic.w	r3, r3, #32
 80183b4:	8193      	strh	r3, [r2, #12]
 80183b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80183b8:	6852      	ldr	r2, [r2, #4]
 80183ba:	b18b      	cbz	r3, 80183e0 <_sungetc_r+0x44>
 80183bc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80183be:	4293      	cmp	r3, r2
 80183c0:	dd08      	ble.n	80183d4 <_sungetc_r+0x38>
 80183c2:	6823      	ldr	r3, [r4, #0]
 80183c4:	1e5a      	subs	r2, r3, #1
 80183c6:	6022      	str	r2, [r4, #0]
 80183c8:	f803 5c01 	strb.w	r5, [r3, #-1]
 80183cc:	6863      	ldr	r3, [r4, #4]
 80183ce:	3301      	adds	r3, #1
 80183d0:	6063      	str	r3, [r4, #4]
 80183d2:	e7e9      	b.n	80183a8 <_sungetc_r+0xc>
 80183d4:	4621      	mov	r1, r4
 80183d6:	f001 f9f4 	bl	80197c2 <__submore>
 80183da:	2800      	cmp	r0, #0
 80183dc:	d0f1      	beq.n	80183c2 <_sungetc_r+0x26>
 80183de:	e7e1      	b.n	80183a4 <_sungetc_r+0x8>
 80183e0:	6921      	ldr	r1, [r4, #16]
 80183e2:	6823      	ldr	r3, [r4, #0]
 80183e4:	b151      	cbz	r1, 80183fc <_sungetc_r+0x60>
 80183e6:	4299      	cmp	r1, r3
 80183e8:	d208      	bcs.n	80183fc <_sungetc_r+0x60>
 80183ea:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80183ee:	42a9      	cmp	r1, r5
 80183f0:	d104      	bne.n	80183fc <_sungetc_r+0x60>
 80183f2:	3b01      	subs	r3, #1
 80183f4:	3201      	adds	r2, #1
 80183f6:	6023      	str	r3, [r4, #0]
 80183f8:	6062      	str	r2, [r4, #4]
 80183fa:	e7d5      	b.n	80183a8 <_sungetc_r+0xc>
 80183fc:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8018400:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018404:	6363      	str	r3, [r4, #52]	; 0x34
 8018406:	2303      	movs	r3, #3
 8018408:	63a3      	str	r3, [r4, #56]	; 0x38
 801840a:	4623      	mov	r3, r4
 801840c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8018410:	6023      	str	r3, [r4, #0]
 8018412:	2301      	movs	r3, #1
 8018414:	e7dc      	b.n	80183d0 <_sungetc_r+0x34>

08018416 <__ssrefill_r>:
 8018416:	b510      	push	{r4, lr}
 8018418:	460c      	mov	r4, r1
 801841a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801841c:	b169      	cbz	r1, 801843a <__ssrefill_r+0x24>
 801841e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018422:	4299      	cmp	r1, r3
 8018424:	d001      	beq.n	801842a <__ssrefill_r+0x14>
 8018426:	f7ff fabf 	bl	80179a8 <_free_r>
 801842a:	2000      	movs	r0, #0
 801842c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801842e:	6360      	str	r0, [r4, #52]	; 0x34
 8018430:	6063      	str	r3, [r4, #4]
 8018432:	b113      	cbz	r3, 801843a <__ssrefill_r+0x24>
 8018434:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8018436:	6023      	str	r3, [r4, #0]
 8018438:	bd10      	pop	{r4, pc}
 801843a:	6923      	ldr	r3, [r4, #16]
 801843c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018440:	6023      	str	r3, [r4, #0]
 8018442:	2300      	movs	r3, #0
 8018444:	6063      	str	r3, [r4, #4]
 8018446:	89a3      	ldrh	r3, [r4, #12]
 8018448:	f043 0320 	orr.w	r3, r3, #32
 801844c:	81a3      	strh	r3, [r4, #12]
 801844e:	e7f3      	b.n	8018438 <__ssrefill_r+0x22>

08018450 <__ssvfiscanf_r>:
 8018450:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018454:	460c      	mov	r4, r1
 8018456:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 801845a:	2100      	movs	r1, #0
 801845c:	4606      	mov	r6, r0
 801845e:	f10d 0804 	add.w	r8, sp, #4
 8018462:	4fa6      	ldr	r7, [pc, #664]	; (80186fc <__ssvfiscanf_r+0x2ac>)
 8018464:	f8df 92a0 	ldr.w	r9, [pc, #672]	; 8018708 <__ssvfiscanf_r+0x2b8>
 8018468:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801846c:	9300      	str	r3, [sp, #0]
 801846e:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8018472:	49a3      	ldr	r1, [pc, #652]	; (8018700 <__ssvfiscanf_r+0x2b0>)
 8018474:	91a0      	str	r1, [sp, #640]	; 0x280
 8018476:	49a3      	ldr	r1, [pc, #652]	; (8018704 <__ssvfiscanf_r+0x2b4>)
 8018478:	91a1      	str	r1, [sp, #644]	; 0x284
 801847a:	7813      	ldrb	r3, [r2, #0]
 801847c:	2b00      	cmp	r3, #0
 801847e:	f000 815a 	beq.w	8018736 <__ssvfiscanf_r+0x2e6>
 8018482:	5cf9      	ldrb	r1, [r7, r3]
 8018484:	1c55      	adds	r5, r2, #1
 8018486:	f011 0108 	ands.w	r1, r1, #8
 801848a:	d019      	beq.n	80184c0 <__ssvfiscanf_r+0x70>
 801848c:	6863      	ldr	r3, [r4, #4]
 801848e:	2b00      	cmp	r3, #0
 8018490:	dd0f      	ble.n	80184b2 <__ssvfiscanf_r+0x62>
 8018492:	6823      	ldr	r3, [r4, #0]
 8018494:	781a      	ldrb	r2, [r3, #0]
 8018496:	5cba      	ldrb	r2, [r7, r2]
 8018498:	0712      	lsls	r2, r2, #28
 801849a:	d401      	bmi.n	80184a0 <__ssvfiscanf_r+0x50>
 801849c:	462a      	mov	r2, r5
 801849e:	e7ec      	b.n	801847a <__ssvfiscanf_r+0x2a>
 80184a0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80184a2:	3301      	adds	r3, #1
 80184a4:	3201      	adds	r2, #1
 80184a6:	6023      	str	r3, [r4, #0]
 80184a8:	9245      	str	r2, [sp, #276]	; 0x114
 80184aa:	6862      	ldr	r2, [r4, #4]
 80184ac:	3a01      	subs	r2, #1
 80184ae:	6062      	str	r2, [r4, #4]
 80184b0:	e7ec      	b.n	801848c <__ssvfiscanf_r+0x3c>
 80184b2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80184b4:	4621      	mov	r1, r4
 80184b6:	4630      	mov	r0, r6
 80184b8:	4798      	blx	r3
 80184ba:	2800      	cmp	r0, #0
 80184bc:	d0e9      	beq.n	8018492 <__ssvfiscanf_r+0x42>
 80184be:	e7ed      	b.n	801849c <__ssvfiscanf_r+0x4c>
 80184c0:	2b25      	cmp	r3, #37	; 0x25
 80184c2:	d012      	beq.n	80184ea <__ssvfiscanf_r+0x9a>
 80184c4:	469a      	mov	sl, r3
 80184c6:	6863      	ldr	r3, [r4, #4]
 80184c8:	2b00      	cmp	r3, #0
 80184ca:	f340 8092 	ble.w	80185f2 <__ssvfiscanf_r+0x1a2>
 80184ce:	6822      	ldr	r2, [r4, #0]
 80184d0:	7813      	ldrb	r3, [r2, #0]
 80184d2:	4553      	cmp	r3, sl
 80184d4:	f040 812f 	bne.w	8018736 <__ssvfiscanf_r+0x2e6>
 80184d8:	6863      	ldr	r3, [r4, #4]
 80184da:	3201      	adds	r2, #1
 80184dc:	3b01      	subs	r3, #1
 80184de:	6022      	str	r2, [r4, #0]
 80184e0:	6063      	str	r3, [r4, #4]
 80184e2:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80184e4:	3301      	adds	r3, #1
 80184e6:	9345      	str	r3, [sp, #276]	; 0x114
 80184e8:	e7d8      	b.n	801849c <__ssvfiscanf_r+0x4c>
 80184ea:	9141      	str	r1, [sp, #260]	; 0x104
 80184ec:	9143      	str	r1, [sp, #268]	; 0x10c
 80184ee:	7853      	ldrb	r3, [r2, #1]
 80184f0:	2b2a      	cmp	r3, #42	; 0x2a
 80184f2:	bf04      	itt	eq
 80184f4:	2310      	moveq	r3, #16
 80184f6:	1c95      	addeq	r5, r2, #2
 80184f8:	f04f 020a 	mov.w	r2, #10
 80184fc:	bf08      	it	eq
 80184fe:	9341      	streq	r3, [sp, #260]	; 0x104
 8018500:	46aa      	mov	sl, r5
 8018502:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8018506:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 801850a:	2b09      	cmp	r3, #9
 801850c:	d91c      	bls.n	8018548 <__ssvfiscanf_r+0xf8>
 801850e:	2203      	movs	r2, #3
 8018510:	487d      	ldr	r0, [pc, #500]	; (8018708 <__ssvfiscanf_r+0x2b8>)
 8018512:	f7fe fb94 	bl	8016c3e <memchr>
 8018516:	b138      	cbz	r0, 8018528 <__ssvfiscanf_r+0xd8>
 8018518:	eba0 0009 	sub.w	r0, r0, r9
 801851c:	2301      	movs	r3, #1
 801851e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8018520:	4655      	mov	r5, sl
 8018522:	4083      	lsls	r3, r0
 8018524:	4313      	orrs	r3, r2
 8018526:	9341      	str	r3, [sp, #260]	; 0x104
 8018528:	f815 3b01 	ldrb.w	r3, [r5], #1
 801852c:	2b78      	cmp	r3, #120	; 0x78
 801852e:	d806      	bhi.n	801853e <__ssvfiscanf_r+0xee>
 8018530:	2b57      	cmp	r3, #87	; 0x57
 8018532:	d810      	bhi.n	8018556 <__ssvfiscanf_r+0x106>
 8018534:	2b25      	cmp	r3, #37	; 0x25
 8018536:	d0c5      	beq.n	80184c4 <__ssvfiscanf_r+0x74>
 8018538:	d856      	bhi.n	80185e8 <__ssvfiscanf_r+0x198>
 801853a:	2b00      	cmp	r3, #0
 801853c:	d064      	beq.n	8018608 <__ssvfiscanf_r+0x1b8>
 801853e:	2303      	movs	r3, #3
 8018540:	9347      	str	r3, [sp, #284]	; 0x11c
 8018542:	230a      	movs	r3, #10
 8018544:	9342      	str	r3, [sp, #264]	; 0x108
 8018546:	e075      	b.n	8018634 <__ssvfiscanf_r+0x1e4>
 8018548:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801854a:	4655      	mov	r5, sl
 801854c:	fb02 1103 	mla	r1, r2, r3, r1
 8018550:	3930      	subs	r1, #48	; 0x30
 8018552:	9143      	str	r1, [sp, #268]	; 0x10c
 8018554:	e7d4      	b.n	8018500 <__ssvfiscanf_r+0xb0>
 8018556:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 801855a:	2a20      	cmp	r2, #32
 801855c:	d8ef      	bhi.n	801853e <__ssvfiscanf_r+0xee>
 801855e:	a101      	add	r1, pc, #4	; (adr r1, 8018564 <__ssvfiscanf_r+0x114>)
 8018560:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8018564:	08018617 	.word	0x08018617
 8018568:	0801853f 	.word	0x0801853f
 801856c:	0801853f 	.word	0x0801853f
 8018570:	08018675 	.word	0x08018675
 8018574:	0801853f 	.word	0x0801853f
 8018578:	0801853f 	.word	0x0801853f
 801857c:	0801853f 	.word	0x0801853f
 8018580:	0801853f 	.word	0x0801853f
 8018584:	0801853f 	.word	0x0801853f
 8018588:	0801853f 	.word	0x0801853f
 801858c:	0801853f 	.word	0x0801853f
 8018590:	0801868b 	.word	0x0801868b
 8018594:	08018671 	.word	0x08018671
 8018598:	080185ef 	.word	0x080185ef
 801859c:	080185ef 	.word	0x080185ef
 80185a0:	080185ef 	.word	0x080185ef
 80185a4:	0801853f 	.word	0x0801853f
 80185a8:	0801862d 	.word	0x0801862d
 80185ac:	0801853f 	.word	0x0801853f
 80185b0:	0801853f 	.word	0x0801853f
 80185b4:	0801853f 	.word	0x0801853f
 80185b8:	0801853f 	.word	0x0801853f
 80185bc:	0801869b 	.word	0x0801869b
 80185c0:	08018669 	.word	0x08018669
 80185c4:	0801860f 	.word	0x0801860f
 80185c8:	0801853f 	.word	0x0801853f
 80185cc:	0801853f 	.word	0x0801853f
 80185d0:	08018697 	.word	0x08018697
 80185d4:	0801853f 	.word	0x0801853f
 80185d8:	08018671 	.word	0x08018671
 80185dc:	0801853f 	.word	0x0801853f
 80185e0:	0801853f 	.word	0x0801853f
 80185e4:	08018617 	.word	0x08018617
 80185e8:	3b45      	subs	r3, #69	; 0x45
 80185ea:	2b02      	cmp	r3, #2
 80185ec:	d8a7      	bhi.n	801853e <__ssvfiscanf_r+0xee>
 80185ee:	2305      	movs	r3, #5
 80185f0:	e01f      	b.n	8018632 <__ssvfiscanf_r+0x1e2>
 80185f2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80185f4:	4621      	mov	r1, r4
 80185f6:	4630      	mov	r0, r6
 80185f8:	4798      	blx	r3
 80185fa:	2800      	cmp	r0, #0
 80185fc:	f43f af67 	beq.w	80184ce <__ssvfiscanf_r+0x7e>
 8018600:	9844      	ldr	r0, [sp, #272]	; 0x110
 8018602:	2800      	cmp	r0, #0
 8018604:	f040 808d 	bne.w	8018722 <__ssvfiscanf_r+0x2d2>
 8018608:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801860c:	e08f      	b.n	801872e <__ssvfiscanf_r+0x2de>
 801860e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8018610:	f042 0220 	orr.w	r2, r2, #32
 8018614:	9241      	str	r2, [sp, #260]	; 0x104
 8018616:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8018618:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801861c:	9241      	str	r2, [sp, #260]	; 0x104
 801861e:	2210      	movs	r2, #16
 8018620:	2b6f      	cmp	r3, #111	; 0x6f
 8018622:	9242      	str	r2, [sp, #264]	; 0x108
 8018624:	bf34      	ite	cc
 8018626:	2303      	movcc	r3, #3
 8018628:	2304      	movcs	r3, #4
 801862a:	e002      	b.n	8018632 <__ssvfiscanf_r+0x1e2>
 801862c:	2300      	movs	r3, #0
 801862e:	9342      	str	r3, [sp, #264]	; 0x108
 8018630:	2303      	movs	r3, #3
 8018632:	9347      	str	r3, [sp, #284]	; 0x11c
 8018634:	6863      	ldr	r3, [r4, #4]
 8018636:	2b00      	cmp	r3, #0
 8018638:	dd3e      	ble.n	80186b8 <__ssvfiscanf_r+0x268>
 801863a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801863c:	0659      	lsls	r1, r3, #25
 801863e:	d404      	bmi.n	801864a <__ssvfiscanf_r+0x1fa>
 8018640:	6823      	ldr	r3, [r4, #0]
 8018642:	781a      	ldrb	r2, [r3, #0]
 8018644:	5cba      	ldrb	r2, [r7, r2]
 8018646:	0712      	lsls	r2, r2, #28
 8018648:	d43d      	bmi.n	80186c6 <__ssvfiscanf_r+0x276>
 801864a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801864c:	2b02      	cmp	r3, #2
 801864e:	dc4c      	bgt.n	80186ea <__ssvfiscanf_r+0x29a>
 8018650:	466b      	mov	r3, sp
 8018652:	4622      	mov	r2, r4
 8018654:	a941      	add	r1, sp, #260	; 0x104
 8018656:	4630      	mov	r0, r6
 8018658:	f000 f9c8 	bl	80189ec <_scanf_chars>
 801865c:	2801      	cmp	r0, #1
 801865e:	d06a      	beq.n	8018736 <__ssvfiscanf_r+0x2e6>
 8018660:	2802      	cmp	r0, #2
 8018662:	f47f af1b 	bne.w	801849c <__ssvfiscanf_r+0x4c>
 8018666:	e7cb      	b.n	8018600 <__ssvfiscanf_r+0x1b0>
 8018668:	2308      	movs	r3, #8
 801866a:	9342      	str	r3, [sp, #264]	; 0x108
 801866c:	2304      	movs	r3, #4
 801866e:	e7e0      	b.n	8018632 <__ssvfiscanf_r+0x1e2>
 8018670:	220a      	movs	r2, #10
 8018672:	e7d5      	b.n	8018620 <__ssvfiscanf_r+0x1d0>
 8018674:	4629      	mov	r1, r5
 8018676:	4640      	mov	r0, r8
 8018678:	f000 fb04 	bl	8018c84 <__sccl>
 801867c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801867e:	4605      	mov	r5, r0
 8018680:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018684:	9341      	str	r3, [sp, #260]	; 0x104
 8018686:	2301      	movs	r3, #1
 8018688:	e7d3      	b.n	8018632 <__ssvfiscanf_r+0x1e2>
 801868a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801868c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018690:	9341      	str	r3, [sp, #260]	; 0x104
 8018692:	2300      	movs	r3, #0
 8018694:	e7cd      	b.n	8018632 <__ssvfiscanf_r+0x1e2>
 8018696:	2302      	movs	r3, #2
 8018698:	e7cb      	b.n	8018632 <__ssvfiscanf_r+0x1e2>
 801869a:	9841      	ldr	r0, [sp, #260]	; 0x104
 801869c:	06c3      	lsls	r3, r0, #27
 801869e:	f53f aefd 	bmi.w	801849c <__ssvfiscanf_r+0x4c>
 80186a2:	9b00      	ldr	r3, [sp, #0]
 80186a4:	07c0      	lsls	r0, r0, #31
 80186a6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80186a8:	f103 0104 	add.w	r1, r3, #4
 80186ac:	9100      	str	r1, [sp, #0]
 80186ae:	681b      	ldr	r3, [r3, #0]
 80186b0:	bf4c      	ite	mi
 80186b2:	801a      	strhmi	r2, [r3, #0]
 80186b4:	601a      	strpl	r2, [r3, #0]
 80186b6:	e6f1      	b.n	801849c <__ssvfiscanf_r+0x4c>
 80186b8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80186ba:	4621      	mov	r1, r4
 80186bc:	4630      	mov	r0, r6
 80186be:	4798      	blx	r3
 80186c0:	2800      	cmp	r0, #0
 80186c2:	d0ba      	beq.n	801863a <__ssvfiscanf_r+0x1ea>
 80186c4:	e79c      	b.n	8018600 <__ssvfiscanf_r+0x1b0>
 80186c6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80186c8:	3201      	adds	r2, #1
 80186ca:	9245      	str	r2, [sp, #276]	; 0x114
 80186cc:	6862      	ldr	r2, [r4, #4]
 80186ce:	3a01      	subs	r2, #1
 80186d0:	2a00      	cmp	r2, #0
 80186d2:	6062      	str	r2, [r4, #4]
 80186d4:	dd02      	ble.n	80186dc <__ssvfiscanf_r+0x28c>
 80186d6:	3301      	adds	r3, #1
 80186d8:	6023      	str	r3, [r4, #0]
 80186da:	e7b1      	b.n	8018640 <__ssvfiscanf_r+0x1f0>
 80186dc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80186de:	4621      	mov	r1, r4
 80186e0:	4630      	mov	r0, r6
 80186e2:	4798      	blx	r3
 80186e4:	2800      	cmp	r0, #0
 80186e6:	d0ab      	beq.n	8018640 <__ssvfiscanf_r+0x1f0>
 80186e8:	e78a      	b.n	8018600 <__ssvfiscanf_r+0x1b0>
 80186ea:	2b04      	cmp	r3, #4
 80186ec:	dc0e      	bgt.n	801870c <__ssvfiscanf_r+0x2bc>
 80186ee:	466b      	mov	r3, sp
 80186f0:	4622      	mov	r2, r4
 80186f2:	a941      	add	r1, sp, #260	; 0x104
 80186f4:	4630      	mov	r0, r6
 80186f6:	f000 f9d3 	bl	8018aa0 <_scanf_i>
 80186fa:	e7af      	b.n	801865c <__ssvfiscanf_r+0x20c>
 80186fc:	0801ce81 	.word	0x0801ce81
 8018700:	0801839d 	.word	0x0801839d
 8018704:	08018417 	.word	0x08018417
 8018708:	0801d074 	.word	0x0801d074
 801870c:	4b0b      	ldr	r3, [pc, #44]	; (801873c <__ssvfiscanf_r+0x2ec>)
 801870e:	2b00      	cmp	r3, #0
 8018710:	f43f aec4 	beq.w	801849c <__ssvfiscanf_r+0x4c>
 8018714:	466b      	mov	r3, sp
 8018716:	4622      	mov	r2, r4
 8018718:	a941      	add	r1, sp, #260	; 0x104
 801871a:	4630      	mov	r0, r6
 801871c:	f7fc fdb2 	bl	8015284 <_scanf_float>
 8018720:	e79c      	b.n	801865c <__ssvfiscanf_r+0x20c>
 8018722:	89a3      	ldrh	r3, [r4, #12]
 8018724:	f013 0f40 	tst.w	r3, #64	; 0x40
 8018728:	bf18      	it	ne
 801872a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 801872e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8018732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018736:	9844      	ldr	r0, [sp, #272]	; 0x110
 8018738:	e7f9      	b.n	801872e <__ssvfiscanf_r+0x2de>
 801873a:	bf00      	nop
 801873c:	08015285 	.word	0x08015285

08018740 <__sfputc_r>:
 8018740:	6893      	ldr	r3, [r2, #8]
 8018742:	3b01      	subs	r3, #1
 8018744:	2b00      	cmp	r3, #0
 8018746:	6093      	str	r3, [r2, #8]
 8018748:	b410      	push	{r4}
 801874a:	da08      	bge.n	801875e <__sfputc_r+0x1e>
 801874c:	6994      	ldr	r4, [r2, #24]
 801874e:	42a3      	cmp	r3, r4
 8018750:	db01      	blt.n	8018756 <__sfputc_r+0x16>
 8018752:	290a      	cmp	r1, #10
 8018754:	d103      	bne.n	801875e <__sfputc_r+0x1e>
 8018756:	f85d 4b04 	ldr.w	r4, [sp], #4
 801875a:	f001 b90d 	b.w	8019978 <__swbuf_r>
 801875e:	6813      	ldr	r3, [r2, #0]
 8018760:	1c58      	adds	r0, r3, #1
 8018762:	6010      	str	r0, [r2, #0]
 8018764:	4608      	mov	r0, r1
 8018766:	7019      	strb	r1, [r3, #0]
 8018768:	f85d 4b04 	ldr.w	r4, [sp], #4
 801876c:	4770      	bx	lr

0801876e <__sfputs_r>:
 801876e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018770:	4606      	mov	r6, r0
 8018772:	460f      	mov	r7, r1
 8018774:	4614      	mov	r4, r2
 8018776:	18d5      	adds	r5, r2, r3
 8018778:	42ac      	cmp	r4, r5
 801877a:	d101      	bne.n	8018780 <__sfputs_r+0x12>
 801877c:	2000      	movs	r0, #0
 801877e:	e007      	b.n	8018790 <__sfputs_r+0x22>
 8018780:	463a      	mov	r2, r7
 8018782:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018786:	4630      	mov	r0, r6
 8018788:	f7ff ffda 	bl	8018740 <__sfputc_r>
 801878c:	1c43      	adds	r3, r0, #1
 801878e:	d1f3      	bne.n	8018778 <__sfputs_r+0xa>
 8018790:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018794 <_vfiprintf_r>:
 8018794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018798:	460d      	mov	r5, r1
 801879a:	b09d      	sub	sp, #116	; 0x74
 801879c:	4614      	mov	r4, r2
 801879e:	4698      	mov	r8, r3
 80187a0:	4606      	mov	r6, r0
 80187a2:	b118      	cbz	r0, 80187ac <_vfiprintf_r+0x18>
 80187a4:	6a03      	ldr	r3, [r0, #32]
 80187a6:	b90b      	cbnz	r3, 80187ac <_vfiprintf_r+0x18>
 80187a8:	f7fd f990 	bl	8015acc <__sinit>
 80187ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80187ae:	07d9      	lsls	r1, r3, #31
 80187b0:	d405      	bmi.n	80187be <_vfiprintf_r+0x2a>
 80187b2:	89ab      	ldrh	r3, [r5, #12]
 80187b4:	059a      	lsls	r2, r3, #22
 80187b6:	d402      	bmi.n	80187be <_vfiprintf_r+0x2a>
 80187b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80187ba:	f7fe fa3e 	bl	8016c3a <__retarget_lock_acquire_recursive>
 80187be:	89ab      	ldrh	r3, [r5, #12]
 80187c0:	071b      	lsls	r3, r3, #28
 80187c2:	d501      	bpl.n	80187c8 <_vfiprintf_r+0x34>
 80187c4:	692b      	ldr	r3, [r5, #16]
 80187c6:	b99b      	cbnz	r3, 80187f0 <_vfiprintf_r+0x5c>
 80187c8:	4629      	mov	r1, r5
 80187ca:	4630      	mov	r0, r6
 80187cc:	f001 f912 	bl	80199f4 <__swsetup_r>
 80187d0:	b170      	cbz	r0, 80187f0 <_vfiprintf_r+0x5c>
 80187d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80187d4:	07dc      	lsls	r4, r3, #31
 80187d6:	d504      	bpl.n	80187e2 <_vfiprintf_r+0x4e>
 80187d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80187dc:	b01d      	add	sp, #116	; 0x74
 80187de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80187e2:	89ab      	ldrh	r3, [r5, #12]
 80187e4:	0598      	lsls	r0, r3, #22
 80187e6:	d4f7      	bmi.n	80187d8 <_vfiprintf_r+0x44>
 80187e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80187ea:	f7fe fa27 	bl	8016c3c <__retarget_lock_release_recursive>
 80187ee:	e7f3      	b.n	80187d8 <_vfiprintf_r+0x44>
 80187f0:	2300      	movs	r3, #0
 80187f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80187f6:	f04f 0901 	mov.w	r9, #1
 80187fa:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 80189b4 <_vfiprintf_r+0x220>
 80187fe:	9309      	str	r3, [sp, #36]	; 0x24
 8018800:	2320      	movs	r3, #32
 8018802:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018806:	2330      	movs	r3, #48	; 0x30
 8018808:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801880c:	4623      	mov	r3, r4
 801880e:	469a      	mov	sl, r3
 8018810:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018814:	b10a      	cbz	r2, 801881a <_vfiprintf_r+0x86>
 8018816:	2a25      	cmp	r2, #37	; 0x25
 8018818:	d1f9      	bne.n	801880e <_vfiprintf_r+0x7a>
 801881a:	ebba 0b04 	subs.w	fp, sl, r4
 801881e:	d00b      	beq.n	8018838 <_vfiprintf_r+0xa4>
 8018820:	465b      	mov	r3, fp
 8018822:	4622      	mov	r2, r4
 8018824:	4629      	mov	r1, r5
 8018826:	4630      	mov	r0, r6
 8018828:	f7ff ffa1 	bl	801876e <__sfputs_r>
 801882c:	3001      	adds	r0, #1
 801882e:	f000 80a9 	beq.w	8018984 <_vfiprintf_r+0x1f0>
 8018832:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018834:	445a      	add	r2, fp
 8018836:	9209      	str	r2, [sp, #36]	; 0x24
 8018838:	f89a 3000 	ldrb.w	r3, [sl]
 801883c:	2b00      	cmp	r3, #0
 801883e:	f000 80a1 	beq.w	8018984 <_vfiprintf_r+0x1f0>
 8018842:	2300      	movs	r3, #0
 8018844:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018848:	f10a 0a01 	add.w	sl, sl, #1
 801884c:	9304      	str	r3, [sp, #16]
 801884e:	9307      	str	r3, [sp, #28]
 8018850:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018854:	931a      	str	r3, [sp, #104]	; 0x68
 8018856:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801885a:	4654      	mov	r4, sl
 801885c:	2205      	movs	r2, #5
 801885e:	4855      	ldr	r0, [pc, #340]	; (80189b4 <_vfiprintf_r+0x220>)
 8018860:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018864:	f7fe f9eb 	bl	8016c3e <memchr>
 8018868:	9a04      	ldr	r2, [sp, #16]
 801886a:	b9d8      	cbnz	r0, 80188a4 <_vfiprintf_r+0x110>
 801886c:	06d1      	lsls	r1, r2, #27
 801886e:	bf44      	itt	mi
 8018870:	2320      	movmi	r3, #32
 8018872:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018876:	0713      	lsls	r3, r2, #28
 8018878:	bf44      	itt	mi
 801887a:	232b      	movmi	r3, #43	; 0x2b
 801887c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018880:	f89a 3000 	ldrb.w	r3, [sl]
 8018884:	2b2a      	cmp	r3, #42	; 0x2a
 8018886:	d015      	beq.n	80188b4 <_vfiprintf_r+0x120>
 8018888:	9a07      	ldr	r2, [sp, #28]
 801888a:	4654      	mov	r4, sl
 801888c:	2000      	movs	r0, #0
 801888e:	f04f 0c0a 	mov.w	ip, #10
 8018892:	4621      	mov	r1, r4
 8018894:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018898:	3b30      	subs	r3, #48	; 0x30
 801889a:	2b09      	cmp	r3, #9
 801889c:	d94d      	bls.n	801893a <_vfiprintf_r+0x1a6>
 801889e:	b1b0      	cbz	r0, 80188ce <_vfiprintf_r+0x13a>
 80188a0:	9207      	str	r2, [sp, #28]
 80188a2:	e014      	b.n	80188ce <_vfiprintf_r+0x13a>
 80188a4:	eba0 0308 	sub.w	r3, r0, r8
 80188a8:	46a2      	mov	sl, r4
 80188aa:	fa09 f303 	lsl.w	r3, r9, r3
 80188ae:	4313      	orrs	r3, r2
 80188b0:	9304      	str	r3, [sp, #16]
 80188b2:	e7d2      	b.n	801885a <_vfiprintf_r+0xc6>
 80188b4:	9b03      	ldr	r3, [sp, #12]
 80188b6:	1d19      	adds	r1, r3, #4
 80188b8:	681b      	ldr	r3, [r3, #0]
 80188ba:	2b00      	cmp	r3, #0
 80188bc:	9103      	str	r1, [sp, #12]
 80188be:	bfbb      	ittet	lt
 80188c0:	425b      	neglt	r3, r3
 80188c2:	f042 0202 	orrlt.w	r2, r2, #2
 80188c6:	9307      	strge	r3, [sp, #28]
 80188c8:	9307      	strlt	r3, [sp, #28]
 80188ca:	bfb8      	it	lt
 80188cc:	9204      	strlt	r2, [sp, #16]
 80188ce:	7823      	ldrb	r3, [r4, #0]
 80188d0:	2b2e      	cmp	r3, #46	; 0x2e
 80188d2:	d10c      	bne.n	80188ee <_vfiprintf_r+0x15a>
 80188d4:	7863      	ldrb	r3, [r4, #1]
 80188d6:	2b2a      	cmp	r3, #42	; 0x2a
 80188d8:	d134      	bne.n	8018944 <_vfiprintf_r+0x1b0>
 80188da:	9b03      	ldr	r3, [sp, #12]
 80188dc:	3402      	adds	r4, #2
 80188de:	1d1a      	adds	r2, r3, #4
 80188e0:	681b      	ldr	r3, [r3, #0]
 80188e2:	2b00      	cmp	r3, #0
 80188e4:	9203      	str	r2, [sp, #12]
 80188e6:	bfb8      	it	lt
 80188e8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80188ec:	9305      	str	r3, [sp, #20]
 80188ee:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80189c4 <_vfiprintf_r+0x230>
 80188f2:	2203      	movs	r2, #3
 80188f4:	7821      	ldrb	r1, [r4, #0]
 80188f6:	4650      	mov	r0, sl
 80188f8:	f7fe f9a1 	bl	8016c3e <memchr>
 80188fc:	b138      	cbz	r0, 801890e <_vfiprintf_r+0x17a>
 80188fe:	eba0 000a 	sub.w	r0, r0, sl
 8018902:	2240      	movs	r2, #64	; 0x40
 8018904:	9b04      	ldr	r3, [sp, #16]
 8018906:	3401      	adds	r4, #1
 8018908:	4082      	lsls	r2, r0
 801890a:	4313      	orrs	r3, r2
 801890c:	9304      	str	r3, [sp, #16]
 801890e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018912:	2206      	movs	r2, #6
 8018914:	4828      	ldr	r0, [pc, #160]	; (80189b8 <_vfiprintf_r+0x224>)
 8018916:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801891a:	f7fe f990 	bl	8016c3e <memchr>
 801891e:	2800      	cmp	r0, #0
 8018920:	d03f      	beq.n	80189a2 <_vfiprintf_r+0x20e>
 8018922:	4b26      	ldr	r3, [pc, #152]	; (80189bc <_vfiprintf_r+0x228>)
 8018924:	bb1b      	cbnz	r3, 801896e <_vfiprintf_r+0x1da>
 8018926:	9b03      	ldr	r3, [sp, #12]
 8018928:	3307      	adds	r3, #7
 801892a:	f023 0307 	bic.w	r3, r3, #7
 801892e:	3308      	adds	r3, #8
 8018930:	9303      	str	r3, [sp, #12]
 8018932:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018934:	443b      	add	r3, r7
 8018936:	9309      	str	r3, [sp, #36]	; 0x24
 8018938:	e768      	b.n	801880c <_vfiprintf_r+0x78>
 801893a:	fb0c 3202 	mla	r2, ip, r2, r3
 801893e:	460c      	mov	r4, r1
 8018940:	2001      	movs	r0, #1
 8018942:	e7a6      	b.n	8018892 <_vfiprintf_r+0xfe>
 8018944:	2300      	movs	r3, #0
 8018946:	3401      	adds	r4, #1
 8018948:	f04f 0c0a 	mov.w	ip, #10
 801894c:	4619      	mov	r1, r3
 801894e:	9305      	str	r3, [sp, #20]
 8018950:	4620      	mov	r0, r4
 8018952:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018956:	3a30      	subs	r2, #48	; 0x30
 8018958:	2a09      	cmp	r2, #9
 801895a:	d903      	bls.n	8018964 <_vfiprintf_r+0x1d0>
 801895c:	2b00      	cmp	r3, #0
 801895e:	d0c6      	beq.n	80188ee <_vfiprintf_r+0x15a>
 8018960:	9105      	str	r1, [sp, #20]
 8018962:	e7c4      	b.n	80188ee <_vfiprintf_r+0x15a>
 8018964:	fb0c 2101 	mla	r1, ip, r1, r2
 8018968:	4604      	mov	r4, r0
 801896a:	2301      	movs	r3, #1
 801896c:	e7f0      	b.n	8018950 <_vfiprintf_r+0x1bc>
 801896e:	ab03      	add	r3, sp, #12
 8018970:	462a      	mov	r2, r5
 8018972:	a904      	add	r1, sp, #16
 8018974:	4630      	mov	r0, r6
 8018976:	9300      	str	r3, [sp, #0]
 8018978:	4b11      	ldr	r3, [pc, #68]	; (80189c0 <_vfiprintf_r+0x22c>)
 801897a:	f7fc f80b 	bl	8014994 <_printf_float>
 801897e:	4607      	mov	r7, r0
 8018980:	1c78      	adds	r0, r7, #1
 8018982:	d1d6      	bne.n	8018932 <_vfiprintf_r+0x19e>
 8018984:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018986:	07d9      	lsls	r1, r3, #31
 8018988:	d405      	bmi.n	8018996 <_vfiprintf_r+0x202>
 801898a:	89ab      	ldrh	r3, [r5, #12]
 801898c:	059a      	lsls	r2, r3, #22
 801898e:	d402      	bmi.n	8018996 <_vfiprintf_r+0x202>
 8018990:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018992:	f7fe f953 	bl	8016c3c <__retarget_lock_release_recursive>
 8018996:	89ab      	ldrh	r3, [r5, #12]
 8018998:	065b      	lsls	r3, r3, #25
 801899a:	f53f af1d 	bmi.w	80187d8 <_vfiprintf_r+0x44>
 801899e:	9809      	ldr	r0, [sp, #36]	; 0x24
 80189a0:	e71c      	b.n	80187dc <_vfiprintf_r+0x48>
 80189a2:	ab03      	add	r3, sp, #12
 80189a4:	462a      	mov	r2, r5
 80189a6:	a904      	add	r1, sp, #16
 80189a8:	4630      	mov	r0, r6
 80189aa:	9300      	str	r3, [sp, #0]
 80189ac:	4b04      	ldr	r3, [pc, #16]	; (80189c0 <_vfiprintf_r+0x22c>)
 80189ae:	f7fc fb49 	bl	8015044 <_printf_i>
 80189b2:	e7e4      	b.n	801897e <_vfiprintf_r+0x1ea>
 80189b4:	0801d06e 	.word	0x0801d06e
 80189b8:	0801d078 	.word	0x0801d078
 80189bc:	08014995 	.word	0x08014995
 80189c0:	0801876f 	.word	0x0801876f
 80189c4:	0801d074 	.word	0x0801d074

080189c8 <__ascii_mbtowc>:
 80189c8:	b082      	sub	sp, #8
 80189ca:	b901      	cbnz	r1, 80189ce <__ascii_mbtowc+0x6>
 80189cc:	a901      	add	r1, sp, #4
 80189ce:	b142      	cbz	r2, 80189e2 <__ascii_mbtowc+0x1a>
 80189d0:	b14b      	cbz	r3, 80189e6 <__ascii_mbtowc+0x1e>
 80189d2:	7813      	ldrb	r3, [r2, #0]
 80189d4:	600b      	str	r3, [r1, #0]
 80189d6:	7812      	ldrb	r2, [r2, #0]
 80189d8:	1e10      	subs	r0, r2, #0
 80189da:	bf18      	it	ne
 80189dc:	2001      	movne	r0, #1
 80189de:	b002      	add	sp, #8
 80189e0:	4770      	bx	lr
 80189e2:	4610      	mov	r0, r2
 80189e4:	e7fb      	b.n	80189de <__ascii_mbtowc+0x16>
 80189e6:	f06f 0001 	mvn.w	r0, #1
 80189ea:	e7f8      	b.n	80189de <__ascii_mbtowc+0x16>

080189ec <_scanf_chars>:
 80189ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80189f0:	4615      	mov	r5, r2
 80189f2:	688a      	ldr	r2, [r1, #8]
 80189f4:	4680      	mov	r8, r0
 80189f6:	460c      	mov	r4, r1
 80189f8:	b932      	cbnz	r2, 8018a08 <_scanf_chars+0x1c>
 80189fa:	698a      	ldr	r2, [r1, #24]
 80189fc:	2a00      	cmp	r2, #0
 80189fe:	bf0c      	ite	eq
 8018a00:	2201      	moveq	r2, #1
 8018a02:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 8018a06:	608a      	str	r2, [r1, #8]
 8018a08:	6822      	ldr	r2, [r4, #0]
 8018a0a:	2700      	movs	r7, #0
 8018a0c:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8018a9c <_scanf_chars+0xb0>
 8018a10:	06d1      	lsls	r1, r2, #27
 8018a12:	bf5f      	itttt	pl
 8018a14:	681a      	ldrpl	r2, [r3, #0]
 8018a16:	1d11      	addpl	r1, r2, #4
 8018a18:	6019      	strpl	r1, [r3, #0]
 8018a1a:	6816      	ldrpl	r6, [r2, #0]
 8018a1c:	69a0      	ldr	r0, [r4, #24]
 8018a1e:	b188      	cbz	r0, 8018a44 <_scanf_chars+0x58>
 8018a20:	2801      	cmp	r0, #1
 8018a22:	d107      	bne.n	8018a34 <_scanf_chars+0x48>
 8018a24:	682a      	ldr	r2, [r5, #0]
 8018a26:	7811      	ldrb	r1, [r2, #0]
 8018a28:	6962      	ldr	r2, [r4, #20]
 8018a2a:	5c52      	ldrb	r2, [r2, r1]
 8018a2c:	b952      	cbnz	r2, 8018a44 <_scanf_chars+0x58>
 8018a2e:	2f00      	cmp	r7, #0
 8018a30:	d031      	beq.n	8018a96 <_scanf_chars+0xaa>
 8018a32:	e022      	b.n	8018a7a <_scanf_chars+0x8e>
 8018a34:	2802      	cmp	r0, #2
 8018a36:	d120      	bne.n	8018a7a <_scanf_chars+0x8e>
 8018a38:	682b      	ldr	r3, [r5, #0]
 8018a3a:	781b      	ldrb	r3, [r3, #0]
 8018a3c:	f819 3003 	ldrb.w	r3, [r9, r3]
 8018a40:	071b      	lsls	r3, r3, #28
 8018a42:	d41a      	bmi.n	8018a7a <_scanf_chars+0x8e>
 8018a44:	6823      	ldr	r3, [r4, #0]
 8018a46:	3701      	adds	r7, #1
 8018a48:	06da      	lsls	r2, r3, #27
 8018a4a:	bf5e      	ittt	pl
 8018a4c:	682b      	ldrpl	r3, [r5, #0]
 8018a4e:	781b      	ldrbpl	r3, [r3, #0]
 8018a50:	f806 3b01 	strbpl.w	r3, [r6], #1
 8018a54:	682a      	ldr	r2, [r5, #0]
 8018a56:	686b      	ldr	r3, [r5, #4]
 8018a58:	3201      	adds	r2, #1
 8018a5a:	3b01      	subs	r3, #1
 8018a5c:	602a      	str	r2, [r5, #0]
 8018a5e:	68a2      	ldr	r2, [r4, #8]
 8018a60:	606b      	str	r3, [r5, #4]
 8018a62:	3a01      	subs	r2, #1
 8018a64:	60a2      	str	r2, [r4, #8]
 8018a66:	b142      	cbz	r2, 8018a7a <_scanf_chars+0x8e>
 8018a68:	2b00      	cmp	r3, #0
 8018a6a:	dcd7      	bgt.n	8018a1c <_scanf_chars+0x30>
 8018a6c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8018a70:	4629      	mov	r1, r5
 8018a72:	4640      	mov	r0, r8
 8018a74:	4798      	blx	r3
 8018a76:	2800      	cmp	r0, #0
 8018a78:	d0d0      	beq.n	8018a1c <_scanf_chars+0x30>
 8018a7a:	6823      	ldr	r3, [r4, #0]
 8018a7c:	f013 0310 	ands.w	r3, r3, #16
 8018a80:	d105      	bne.n	8018a8e <_scanf_chars+0xa2>
 8018a82:	68e2      	ldr	r2, [r4, #12]
 8018a84:	3201      	adds	r2, #1
 8018a86:	60e2      	str	r2, [r4, #12]
 8018a88:	69a2      	ldr	r2, [r4, #24]
 8018a8a:	b102      	cbz	r2, 8018a8e <_scanf_chars+0xa2>
 8018a8c:	7033      	strb	r3, [r6, #0]
 8018a8e:	6923      	ldr	r3, [r4, #16]
 8018a90:	2000      	movs	r0, #0
 8018a92:	443b      	add	r3, r7
 8018a94:	6123      	str	r3, [r4, #16]
 8018a96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018a9a:	bf00      	nop
 8018a9c:	0801ce81 	.word	0x0801ce81

08018aa0 <_scanf_i>:
 8018aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018aa4:	4698      	mov	r8, r3
 8018aa6:	b087      	sub	sp, #28
 8018aa8:	4b72      	ldr	r3, [pc, #456]	; (8018c74 <_scanf_i+0x1d4>)
 8018aaa:	460c      	mov	r4, r1
 8018aac:	4682      	mov	sl, r0
 8018aae:	4616      	mov	r6, r2
 8018ab0:	4627      	mov	r7, r4
 8018ab2:	f04f 0b00 	mov.w	fp, #0
 8018ab6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8018aba:	ab03      	add	r3, sp, #12
 8018abc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8018ac0:	4b6d      	ldr	r3, [pc, #436]	; (8018c78 <_scanf_i+0x1d8>)
 8018ac2:	69a1      	ldr	r1, [r4, #24]
 8018ac4:	4a6d      	ldr	r2, [pc, #436]	; (8018c7c <_scanf_i+0x1dc>)
 8018ac6:	2903      	cmp	r1, #3
 8018ac8:	bf18      	it	ne
 8018aca:	461a      	movne	r2, r3
 8018acc:	68a3      	ldr	r3, [r4, #8]
 8018ace:	9201      	str	r2, [sp, #4]
 8018ad0:	1e5a      	subs	r2, r3, #1
 8018ad2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8018ad6:	bf89      	itett	hi
 8018ad8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8018adc:	f04f 0900 	movls.w	r9, #0
 8018ae0:	eb03 0905 	addhi.w	r9, r3, r5
 8018ae4:	f240 135d 	movwhi	r3, #349	; 0x15d
 8018ae8:	bf88      	it	hi
 8018aea:	60a3      	strhi	r3, [r4, #8]
 8018aec:	f857 3b1c 	ldr.w	r3, [r7], #28
 8018af0:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8018af4:	463d      	mov	r5, r7
 8018af6:	6023      	str	r3, [r4, #0]
 8018af8:	6831      	ldr	r1, [r6, #0]
 8018afa:	ab03      	add	r3, sp, #12
 8018afc:	2202      	movs	r2, #2
 8018afe:	7809      	ldrb	r1, [r1, #0]
 8018b00:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8018b04:	f7fe f89b 	bl	8016c3e <memchr>
 8018b08:	b328      	cbz	r0, 8018b56 <_scanf_i+0xb6>
 8018b0a:	f1bb 0f01 	cmp.w	fp, #1
 8018b0e:	d159      	bne.n	8018bc4 <_scanf_i+0x124>
 8018b10:	6862      	ldr	r2, [r4, #4]
 8018b12:	b92a      	cbnz	r2, 8018b20 <_scanf_i+0x80>
 8018b14:	6822      	ldr	r2, [r4, #0]
 8018b16:	2308      	movs	r3, #8
 8018b18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8018b1c:	6063      	str	r3, [r4, #4]
 8018b1e:	6022      	str	r2, [r4, #0]
 8018b20:	6822      	ldr	r2, [r4, #0]
 8018b22:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8018b26:	6022      	str	r2, [r4, #0]
 8018b28:	68a2      	ldr	r2, [r4, #8]
 8018b2a:	1e51      	subs	r1, r2, #1
 8018b2c:	60a1      	str	r1, [r4, #8]
 8018b2e:	b192      	cbz	r2, 8018b56 <_scanf_i+0xb6>
 8018b30:	6832      	ldr	r2, [r6, #0]
 8018b32:	1c51      	adds	r1, r2, #1
 8018b34:	6031      	str	r1, [r6, #0]
 8018b36:	7812      	ldrb	r2, [r2, #0]
 8018b38:	f805 2b01 	strb.w	r2, [r5], #1
 8018b3c:	6872      	ldr	r2, [r6, #4]
 8018b3e:	3a01      	subs	r2, #1
 8018b40:	2a00      	cmp	r2, #0
 8018b42:	6072      	str	r2, [r6, #4]
 8018b44:	dc07      	bgt.n	8018b56 <_scanf_i+0xb6>
 8018b46:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8018b4a:	4631      	mov	r1, r6
 8018b4c:	4650      	mov	r0, sl
 8018b4e:	4790      	blx	r2
 8018b50:	2800      	cmp	r0, #0
 8018b52:	f040 8085 	bne.w	8018c60 <_scanf_i+0x1c0>
 8018b56:	f10b 0b01 	add.w	fp, fp, #1
 8018b5a:	f1bb 0f03 	cmp.w	fp, #3
 8018b5e:	d1cb      	bne.n	8018af8 <_scanf_i+0x58>
 8018b60:	6863      	ldr	r3, [r4, #4]
 8018b62:	b90b      	cbnz	r3, 8018b68 <_scanf_i+0xc8>
 8018b64:	230a      	movs	r3, #10
 8018b66:	6063      	str	r3, [r4, #4]
 8018b68:	6863      	ldr	r3, [r4, #4]
 8018b6a:	f04f 0b00 	mov.w	fp, #0
 8018b6e:	4944      	ldr	r1, [pc, #272]	; (8018c80 <_scanf_i+0x1e0>)
 8018b70:	6960      	ldr	r0, [r4, #20]
 8018b72:	1ac9      	subs	r1, r1, r3
 8018b74:	f000 f886 	bl	8018c84 <__sccl>
 8018b78:	68a3      	ldr	r3, [r4, #8]
 8018b7a:	6822      	ldr	r2, [r4, #0]
 8018b7c:	2b00      	cmp	r3, #0
 8018b7e:	d03d      	beq.n	8018bfc <_scanf_i+0x15c>
 8018b80:	6831      	ldr	r1, [r6, #0]
 8018b82:	6960      	ldr	r0, [r4, #20]
 8018b84:	f891 c000 	ldrb.w	ip, [r1]
 8018b88:	f810 000c 	ldrb.w	r0, [r0, ip]
 8018b8c:	2800      	cmp	r0, #0
 8018b8e:	d035      	beq.n	8018bfc <_scanf_i+0x15c>
 8018b90:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8018b94:	d124      	bne.n	8018be0 <_scanf_i+0x140>
 8018b96:	0510      	lsls	r0, r2, #20
 8018b98:	d522      	bpl.n	8018be0 <_scanf_i+0x140>
 8018b9a:	f10b 0b01 	add.w	fp, fp, #1
 8018b9e:	f1b9 0f00 	cmp.w	r9, #0
 8018ba2:	d003      	beq.n	8018bac <_scanf_i+0x10c>
 8018ba4:	3301      	adds	r3, #1
 8018ba6:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8018baa:	60a3      	str	r3, [r4, #8]
 8018bac:	6873      	ldr	r3, [r6, #4]
 8018bae:	3b01      	subs	r3, #1
 8018bb0:	2b00      	cmp	r3, #0
 8018bb2:	6073      	str	r3, [r6, #4]
 8018bb4:	dd1b      	ble.n	8018bee <_scanf_i+0x14e>
 8018bb6:	6833      	ldr	r3, [r6, #0]
 8018bb8:	3301      	adds	r3, #1
 8018bba:	6033      	str	r3, [r6, #0]
 8018bbc:	68a3      	ldr	r3, [r4, #8]
 8018bbe:	3b01      	subs	r3, #1
 8018bc0:	60a3      	str	r3, [r4, #8]
 8018bc2:	e7d9      	b.n	8018b78 <_scanf_i+0xd8>
 8018bc4:	f1bb 0f02 	cmp.w	fp, #2
 8018bc8:	d1ae      	bne.n	8018b28 <_scanf_i+0x88>
 8018bca:	6822      	ldr	r2, [r4, #0]
 8018bcc:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8018bd0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8018bd4:	d1bf      	bne.n	8018b56 <_scanf_i+0xb6>
 8018bd6:	2310      	movs	r3, #16
 8018bd8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8018bdc:	6063      	str	r3, [r4, #4]
 8018bde:	e7a2      	b.n	8018b26 <_scanf_i+0x86>
 8018be0:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8018be4:	6022      	str	r2, [r4, #0]
 8018be6:	780b      	ldrb	r3, [r1, #0]
 8018be8:	f805 3b01 	strb.w	r3, [r5], #1
 8018bec:	e7de      	b.n	8018bac <_scanf_i+0x10c>
 8018bee:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8018bf2:	4631      	mov	r1, r6
 8018bf4:	4650      	mov	r0, sl
 8018bf6:	4798      	blx	r3
 8018bf8:	2800      	cmp	r0, #0
 8018bfa:	d0df      	beq.n	8018bbc <_scanf_i+0x11c>
 8018bfc:	6823      	ldr	r3, [r4, #0]
 8018bfe:	05d9      	lsls	r1, r3, #23
 8018c00:	d50d      	bpl.n	8018c1e <_scanf_i+0x17e>
 8018c02:	42bd      	cmp	r5, r7
 8018c04:	d909      	bls.n	8018c1a <_scanf_i+0x17a>
 8018c06:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8018c0a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8018c0e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8018c12:	4632      	mov	r2, r6
 8018c14:	464d      	mov	r5, r9
 8018c16:	4650      	mov	r0, sl
 8018c18:	4798      	blx	r3
 8018c1a:	42bd      	cmp	r5, r7
 8018c1c:	d028      	beq.n	8018c70 <_scanf_i+0x1d0>
 8018c1e:	6822      	ldr	r2, [r4, #0]
 8018c20:	f012 0210 	ands.w	r2, r2, #16
 8018c24:	d113      	bne.n	8018c4e <_scanf_i+0x1ae>
 8018c26:	702a      	strb	r2, [r5, #0]
 8018c28:	4639      	mov	r1, r7
 8018c2a:	6863      	ldr	r3, [r4, #4]
 8018c2c:	4650      	mov	r0, sl
 8018c2e:	9e01      	ldr	r6, [sp, #4]
 8018c30:	47b0      	blx	r6
 8018c32:	f8d8 3000 	ldr.w	r3, [r8]
 8018c36:	6821      	ldr	r1, [r4, #0]
 8018c38:	1d1a      	adds	r2, r3, #4
 8018c3a:	f011 0f20 	tst.w	r1, #32
 8018c3e:	f8c8 2000 	str.w	r2, [r8]
 8018c42:	681b      	ldr	r3, [r3, #0]
 8018c44:	d00f      	beq.n	8018c66 <_scanf_i+0x1c6>
 8018c46:	6018      	str	r0, [r3, #0]
 8018c48:	68e3      	ldr	r3, [r4, #12]
 8018c4a:	3301      	adds	r3, #1
 8018c4c:	60e3      	str	r3, [r4, #12]
 8018c4e:	1bed      	subs	r5, r5, r7
 8018c50:	6923      	ldr	r3, [r4, #16]
 8018c52:	2000      	movs	r0, #0
 8018c54:	445d      	add	r5, fp
 8018c56:	442b      	add	r3, r5
 8018c58:	6123      	str	r3, [r4, #16]
 8018c5a:	b007      	add	sp, #28
 8018c5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018c60:	f04f 0b00 	mov.w	fp, #0
 8018c64:	e7ca      	b.n	8018bfc <_scanf_i+0x15c>
 8018c66:	07ca      	lsls	r2, r1, #31
 8018c68:	bf4c      	ite	mi
 8018c6a:	8018      	strhmi	r0, [r3, #0]
 8018c6c:	6018      	strpl	r0, [r3, #0]
 8018c6e:	e7eb      	b.n	8018c48 <_scanf_i+0x1a8>
 8018c70:	2001      	movs	r0, #1
 8018c72:	e7f2      	b.n	8018c5a <_scanf_i+0x1ba>
 8018c74:	0801b52c 	.word	0x0801b52c
 8018c78:	08019975 	.word	0x08019975
 8018c7c:	08016831 	.word	0x08016831
 8018c80:	0801d08f 	.word	0x0801d08f

08018c84 <__sccl>:
 8018c84:	b570      	push	{r4, r5, r6, lr}
 8018c86:	780b      	ldrb	r3, [r1, #0]
 8018c88:	4604      	mov	r4, r0
 8018c8a:	3801      	subs	r0, #1
 8018c8c:	2b5e      	cmp	r3, #94	; 0x5e
 8018c8e:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8018c92:	bf13      	iteet	ne
 8018c94:	1c4a      	addne	r2, r1, #1
 8018c96:	1c8a      	addeq	r2, r1, #2
 8018c98:	784b      	ldrbeq	r3, [r1, #1]
 8018c9a:	2100      	movne	r1, #0
 8018c9c:	bf08      	it	eq
 8018c9e:	2101      	moveq	r1, #1
 8018ca0:	f800 1f01 	strb.w	r1, [r0, #1]!
 8018ca4:	42a8      	cmp	r0, r5
 8018ca6:	d1fb      	bne.n	8018ca0 <__sccl+0x1c>
 8018ca8:	b90b      	cbnz	r3, 8018cae <__sccl+0x2a>
 8018caa:	1e50      	subs	r0, r2, #1
 8018cac:	bd70      	pop	{r4, r5, r6, pc}
 8018cae:	f081 0101 	eor.w	r1, r1, #1
 8018cb2:	4610      	mov	r0, r2
 8018cb4:	54e1      	strb	r1, [r4, r3]
 8018cb6:	4602      	mov	r2, r0
 8018cb8:	f812 5b01 	ldrb.w	r5, [r2], #1
 8018cbc:	2d2d      	cmp	r5, #45	; 0x2d
 8018cbe:	d005      	beq.n	8018ccc <__sccl+0x48>
 8018cc0:	2d5d      	cmp	r5, #93	; 0x5d
 8018cc2:	d016      	beq.n	8018cf2 <__sccl+0x6e>
 8018cc4:	2d00      	cmp	r5, #0
 8018cc6:	d0f1      	beq.n	8018cac <__sccl+0x28>
 8018cc8:	462b      	mov	r3, r5
 8018cca:	e7f2      	b.n	8018cb2 <__sccl+0x2e>
 8018ccc:	7846      	ldrb	r6, [r0, #1]
 8018cce:	2e5d      	cmp	r6, #93	; 0x5d
 8018cd0:	d0fa      	beq.n	8018cc8 <__sccl+0x44>
 8018cd2:	42b3      	cmp	r3, r6
 8018cd4:	dcf8      	bgt.n	8018cc8 <__sccl+0x44>
 8018cd6:	3002      	adds	r0, #2
 8018cd8:	461a      	mov	r2, r3
 8018cda:	3201      	adds	r2, #1
 8018cdc:	4296      	cmp	r6, r2
 8018cde:	54a1      	strb	r1, [r4, r2]
 8018ce0:	dcfb      	bgt.n	8018cda <__sccl+0x56>
 8018ce2:	1af2      	subs	r2, r6, r3
 8018ce4:	1c5d      	adds	r5, r3, #1
 8018ce6:	3a01      	subs	r2, #1
 8018ce8:	42b3      	cmp	r3, r6
 8018cea:	bfa8      	it	ge
 8018cec:	2200      	movge	r2, #0
 8018cee:	18ab      	adds	r3, r5, r2
 8018cf0:	e7e1      	b.n	8018cb6 <__sccl+0x32>
 8018cf2:	4610      	mov	r0, r2
 8018cf4:	e7da      	b.n	8018cac <__sccl+0x28>
	...

08018cf8 <__sflush_r>:
 8018cf8:	898a      	ldrh	r2, [r1, #12]
 8018cfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018cfe:	4605      	mov	r5, r0
 8018d00:	0710      	lsls	r0, r2, #28
 8018d02:	460c      	mov	r4, r1
 8018d04:	d458      	bmi.n	8018db8 <__sflush_r+0xc0>
 8018d06:	684b      	ldr	r3, [r1, #4]
 8018d08:	2b00      	cmp	r3, #0
 8018d0a:	dc05      	bgt.n	8018d18 <__sflush_r+0x20>
 8018d0c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8018d0e:	2b00      	cmp	r3, #0
 8018d10:	dc02      	bgt.n	8018d18 <__sflush_r+0x20>
 8018d12:	2000      	movs	r0, #0
 8018d14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018d18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018d1a:	2e00      	cmp	r6, #0
 8018d1c:	d0f9      	beq.n	8018d12 <__sflush_r+0x1a>
 8018d1e:	2300      	movs	r3, #0
 8018d20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8018d24:	682f      	ldr	r7, [r5, #0]
 8018d26:	6a21      	ldr	r1, [r4, #32]
 8018d28:	602b      	str	r3, [r5, #0]
 8018d2a:	d032      	beq.n	8018d92 <__sflush_r+0x9a>
 8018d2c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8018d2e:	89a3      	ldrh	r3, [r4, #12]
 8018d30:	075a      	lsls	r2, r3, #29
 8018d32:	d505      	bpl.n	8018d40 <__sflush_r+0x48>
 8018d34:	6863      	ldr	r3, [r4, #4]
 8018d36:	1ac0      	subs	r0, r0, r3
 8018d38:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018d3a:	b10b      	cbz	r3, 8018d40 <__sflush_r+0x48>
 8018d3c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8018d3e:	1ac0      	subs	r0, r0, r3
 8018d40:	2300      	movs	r3, #0
 8018d42:	4602      	mov	r2, r0
 8018d44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018d46:	4628      	mov	r0, r5
 8018d48:	6a21      	ldr	r1, [r4, #32]
 8018d4a:	47b0      	blx	r6
 8018d4c:	1c43      	adds	r3, r0, #1
 8018d4e:	89a3      	ldrh	r3, [r4, #12]
 8018d50:	d106      	bne.n	8018d60 <__sflush_r+0x68>
 8018d52:	6829      	ldr	r1, [r5, #0]
 8018d54:	291d      	cmp	r1, #29
 8018d56:	d82b      	bhi.n	8018db0 <__sflush_r+0xb8>
 8018d58:	4a28      	ldr	r2, [pc, #160]	; (8018dfc <__sflush_r+0x104>)
 8018d5a:	410a      	asrs	r2, r1
 8018d5c:	07d6      	lsls	r6, r2, #31
 8018d5e:	d427      	bmi.n	8018db0 <__sflush_r+0xb8>
 8018d60:	2200      	movs	r2, #0
 8018d62:	04d9      	lsls	r1, r3, #19
 8018d64:	6062      	str	r2, [r4, #4]
 8018d66:	6922      	ldr	r2, [r4, #16]
 8018d68:	6022      	str	r2, [r4, #0]
 8018d6a:	d504      	bpl.n	8018d76 <__sflush_r+0x7e>
 8018d6c:	1c42      	adds	r2, r0, #1
 8018d6e:	d101      	bne.n	8018d74 <__sflush_r+0x7c>
 8018d70:	682b      	ldr	r3, [r5, #0]
 8018d72:	b903      	cbnz	r3, 8018d76 <__sflush_r+0x7e>
 8018d74:	6560      	str	r0, [r4, #84]	; 0x54
 8018d76:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018d78:	602f      	str	r7, [r5, #0]
 8018d7a:	2900      	cmp	r1, #0
 8018d7c:	d0c9      	beq.n	8018d12 <__sflush_r+0x1a>
 8018d7e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018d82:	4299      	cmp	r1, r3
 8018d84:	d002      	beq.n	8018d8c <__sflush_r+0x94>
 8018d86:	4628      	mov	r0, r5
 8018d88:	f7fe fe0e 	bl	80179a8 <_free_r>
 8018d8c:	2000      	movs	r0, #0
 8018d8e:	6360      	str	r0, [r4, #52]	; 0x34
 8018d90:	e7c0      	b.n	8018d14 <__sflush_r+0x1c>
 8018d92:	2301      	movs	r3, #1
 8018d94:	4628      	mov	r0, r5
 8018d96:	47b0      	blx	r6
 8018d98:	1c41      	adds	r1, r0, #1
 8018d9a:	d1c8      	bne.n	8018d2e <__sflush_r+0x36>
 8018d9c:	682b      	ldr	r3, [r5, #0]
 8018d9e:	2b00      	cmp	r3, #0
 8018da0:	d0c5      	beq.n	8018d2e <__sflush_r+0x36>
 8018da2:	2b1d      	cmp	r3, #29
 8018da4:	d001      	beq.n	8018daa <__sflush_r+0xb2>
 8018da6:	2b16      	cmp	r3, #22
 8018da8:	d101      	bne.n	8018dae <__sflush_r+0xb6>
 8018daa:	602f      	str	r7, [r5, #0]
 8018dac:	e7b1      	b.n	8018d12 <__sflush_r+0x1a>
 8018dae:	89a3      	ldrh	r3, [r4, #12]
 8018db0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018db4:	81a3      	strh	r3, [r4, #12]
 8018db6:	e7ad      	b.n	8018d14 <__sflush_r+0x1c>
 8018db8:	690f      	ldr	r7, [r1, #16]
 8018dba:	2f00      	cmp	r7, #0
 8018dbc:	d0a9      	beq.n	8018d12 <__sflush_r+0x1a>
 8018dbe:	0793      	lsls	r3, r2, #30
 8018dc0:	680e      	ldr	r6, [r1, #0]
 8018dc2:	600f      	str	r7, [r1, #0]
 8018dc4:	bf0c      	ite	eq
 8018dc6:	694b      	ldreq	r3, [r1, #20]
 8018dc8:	2300      	movne	r3, #0
 8018dca:	eba6 0807 	sub.w	r8, r6, r7
 8018dce:	608b      	str	r3, [r1, #8]
 8018dd0:	f1b8 0f00 	cmp.w	r8, #0
 8018dd4:	dd9d      	ble.n	8018d12 <__sflush_r+0x1a>
 8018dd6:	4643      	mov	r3, r8
 8018dd8:	463a      	mov	r2, r7
 8018dda:	6a21      	ldr	r1, [r4, #32]
 8018ddc:	4628      	mov	r0, r5
 8018dde:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8018de0:	47b0      	blx	r6
 8018de2:	2800      	cmp	r0, #0
 8018de4:	dc06      	bgt.n	8018df4 <__sflush_r+0xfc>
 8018de6:	89a3      	ldrh	r3, [r4, #12]
 8018de8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018dec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018df0:	81a3      	strh	r3, [r4, #12]
 8018df2:	e78f      	b.n	8018d14 <__sflush_r+0x1c>
 8018df4:	4407      	add	r7, r0
 8018df6:	eba8 0800 	sub.w	r8, r8, r0
 8018dfa:	e7e9      	b.n	8018dd0 <__sflush_r+0xd8>
 8018dfc:	dfbffffe 	.word	0xdfbffffe

08018e00 <_fflush_r>:
 8018e00:	b538      	push	{r3, r4, r5, lr}
 8018e02:	690b      	ldr	r3, [r1, #16]
 8018e04:	4605      	mov	r5, r0
 8018e06:	460c      	mov	r4, r1
 8018e08:	b913      	cbnz	r3, 8018e10 <_fflush_r+0x10>
 8018e0a:	2500      	movs	r5, #0
 8018e0c:	4628      	mov	r0, r5
 8018e0e:	bd38      	pop	{r3, r4, r5, pc}
 8018e10:	b118      	cbz	r0, 8018e1a <_fflush_r+0x1a>
 8018e12:	6a03      	ldr	r3, [r0, #32]
 8018e14:	b90b      	cbnz	r3, 8018e1a <_fflush_r+0x1a>
 8018e16:	f7fc fe59 	bl	8015acc <__sinit>
 8018e1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018e1e:	2b00      	cmp	r3, #0
 8018e20:	d0f3      	beq.n	8018e0a <_fflush_r+0xa>
 8018e22:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8018e24:	07d0      	lsls	r0, r2, #31
 8018e26:	d404      	bmi.n	8018e32 <_fflush_r+0x32>
 8018e28:	0599      	lsls	r1, r3, #22
 8018e2a:	d402      	bmi.n	8018e32 <_fflush_r+0x32>
 8018e2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018e2e:	f7fd ff04 	bl	8016c3a <__retarget_lock_acquire_recursive>
 8018e32:	4628      	mov	r0, r5
 8018e34:	4621      	mov	r1, r4
 8018e36:	f7ff ff5f 	bl	8018cf8 <__sflush_r>
 8018e3a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018e3c:	4605      	mov	r5, r0
 8018e3e:	07da      	lsls	r2, r3, #31
 8018e40:	d4e4      	bmi.n	8018e0c <_fflush_r+0xc>
 8018e42:	89a3      	ldrh	r3, [r4, #12]
 8018e44:	059b      	lsls	r3, r3, #22
 8018e46:	d4e1      	bmi.n	8018e0c <_fflush_r+0xc>
 8018e48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018e4a:	f7fd fef7 	bl	8016c3c <__retarget_lock_release_recursive>
 8018e4e:	e7dd      	b.n	8018e0c <_fflush_r+0xc>

08018e50 <_Balloc>:
 8018e50:	b570      	push	{r4, r5, r6, lr}
 8018e52:	69c6      	ldr	r6, [r0, #28]
 8018e54:	4604      	mov	r4, r0
 8018e56:	460d      	mov	r5, r1
 8018e58:	b976      	cbnz	r6, 8018e78 <_Balloc+0x28>
 8018e5a:	2010      	movs	r0, #16
 8018e5c:	f7fb ffd0 	bl	8014e00 <malloc>
 8018e60:	4602      	mov	r2, r0
 8018e62:	61e0      	str	r0, [r4, #28]
 8018e64:	b920      	cbnz	r0, 8018e70 <_Balloc+0x20>
 8018e66:	4b18      	ldr	r3, [pc, #96]	; (8018ec8 <_Balloc+0x78>)
 8018e68:	216b      	movs	r1, #107	; 0x6b
 8018e6a:	4818      	ldr	r0, [pc, #96]	; (8018ecc <_Balloc+0x7c>)
 8018e6c:	f000 fe5c 	bl	8019b28 <__assert_func>
 8018e70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018e74:	6006      	str	r6, [r0, #0]
 8018e76:	60c6      	str	r6, [r0, #12]
 8018e78:	69e6      	ldr	r6, [r4, #28]
 8018e7a:	68f3      	ldr	r3, [r6, #12]
 8018e7c:	b183      	cbz	r3, 8018ea0 <_Balloc+0x50>
 8018e7e:	69e3      	ldr	r3, [r4, #28]
 8018e80:	68db      	ldr	r3, [r3, #12]
 8018e82:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8018e86:	b9b8      	cbnz	r0, 8018eb8 <_Balloc+0x68>
 8018e88:	2101      	movs	r1, #1
 8018e8a:	4620      	mov	r0, r4
 8018e8c:	fa01 f605 	lsl.w	r6, r1, r5
 8018e90:	1d72      	adds	r2, r6, #5
 8018e92:	0092      	lsls	r2, r2, #2
 8018e94:	f7fb fcc8 	bl	8014828 <_calloc_r>
 8018e98:	b160      	cbz	r0, 8018eb4 <_Balloc+0x64>
 8018e9a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8018e9e:	e00e      	b.n	8018ebe <_Balloc+0x6e>
 8018ea0:	2221      	movs	r2, #33	; 0x21
 8018ea2:	2104      	movs	r1, #4
 8018ea4:	4620      	mov	r0, r4
 8018ea6:	f7fb fcbf 	bl	8014828 <_calloc_r>
 8018eaa:	69e3      	ldr	r3, [r4, #28]
 8018eac:	60f0      	str	r0, [r6, #12]
 8018eae:	68db      	ldr	r3, [r3, #12]
 8018eb0:	2b00      	cmp	r3, #0
 8018eb2:	d1e4      	bne.n	8018e7e <_Balloc+0x2e>
 8018eb4:	2000      	movs	r0, #0
 8018eb6:	bd70      	pop	{r4, r5, r6, pc}
 8018eb8:	6802      	ldr	r2, [r0, #0]
 8018eba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8018ebe:	2300      	movs	r3, #0
 8018ec0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018ec4:	e7f7      	b.n	8018eb6 <_Balloc+0x66>
 8018ec6:	bf00      	nop
 8018ec8:	0801cf8e 	.word	0x0801cf8e
 8018ecc:	0801d09a 	.word	0x0801d09a

08018ed0 <_Bfree>:
 8018ed0:	b570      	push	{r4, r5, r6, lr}
 8018ed2:	69c6      	ldr	r6, [r0, #28]
 8018ed4:	4605      	mov	r5, r0
 8018ed6:	460c      	mov	r4, r1
 8018ed8:	b976      	cbnz	r6, 8018ef8 <_Bfree+0x28>
 8018eda:	2010      	movs	r0, #16
 8018edc:	f7fb ff90 	bl	8014e00 <malloc>
 8018ee0:	4602      	mov	r2, r0
 8018ee2:	61e8      	str	r0, [r5, #28]
 8018ee4:	b920      	cbnz	r0, 8018ef0 <_Bfree+0x20>
 8018ee6:	4b09      	ldr	r3, [pc, #36]	; (8018f0c <_Bfree+0x3c>)
 8018ee8:	218f      	movs	r1, #143	; 0x8f
 8018eea:	4809      	ldr	r0, [pc, #36]	; (8018f10 <_Bfree+0x40>)
 8018eec:	f000 fe1c 	bl	8019b28 <__assert_func>
 8018ef0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018ef4:	6006      	str	r6, [r0, #0]
 8018ef6:	60c6      	str	r6, [r0, #12]
 8018ef8:	b13c      	cbz	r4, 8018f0a <_Bfree+0x3a>
 8018efa:	69eb      	ldr	r3, [r5, #28]
 8018efc:	6862      	ldr	r2, [r4, #4]
 8018efe:	68db      	ldr	r3, [r3, #12]
 8018f00:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8018f04:	6021      	str	r1, [r4, #0]
 8018f06:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8018f0a:	bd70      	pop	{r4, r5, r6, pc}
 8018f0c:	0801cf8e 	.word	0x0801cf8e
 8018f10:	0801d09a 	.word	0x0801d09a

08018f14 <__multadd>:
 8018f14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018f18:	f101 0c14 	add.w	ip, r1, #20
 8018f1c:	4607      	mov	r7, r0
 8018f1e:	460c      	mov	r4, r1
 8018f20:	461e      	mov	r6, r3
 8018f22:	690d      	ldr	r5, [r1, #16]
 8018f24:	2000      	movs	r0, #0
 8018f26:	f8dc 3000 	ldr.w	r3, [ip]
 8018f2a:	3001      	adds	r0, #1
 8018f2c:	b299      	uxth	r1, r3
 8018f2e:	4285      	cmp	r5, r0
 8018f30:	fb02 6101 	mla	r1, r2, r1, r6
 8018f34:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8018f38:	ea4f 4311 	mov.w	r3, r1, lsr #16
 8018f3c:	b289      	uxth	r1, r1
 8018f3e:	fb02 3306 	mla	r3, r2, r6, r3
 8018f42:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8018f46:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8018f4a:	f84c 1b04 	str.w	r1, [ip], #4
 8018f4e:	dcea      	bgt.n	8018f26 <__multadd+0x12>
 8018f50:	b30e      	cbz	r6, 8018f96 <__multadd+0x82>
 8018f52:	68a3      	ldr	r3, [r4, #8]
 8018f54:	42ab      	cmp	r3, r5
 8018f56:	dc19      	bgt.n	8018f8c <__multadd+0x78>
 8018f58:	6861      	ldr	r1, [r4, #4]
 8018f5a:	4638      	mov	r0, r7
 8018f5c:	3101      	adds	r1, #1
 8018f5e:	f7ff ff77 	bl	8018e50 <_Balloc>
 8018f62:	4680      	mov	r8, r0
 8018f64:	b928      	cbnz	r0, 8018f72 <__multadd+0x5e>
 8018f66:	4602      	mov	r2, r0
 8018f68:	4b0c      	ldr	r3, [pc, #48]	; (8018f9c <__multadd+0x88>)
 8018f6a:	21ba      	movs	r1, #186	; 0xba
 8018f6c:	480c      	ldr	r0, [pc, #48]	; (8018fa0 <__multadd+0x8c>)
 8018f6e:	f000 fddb 	bl	8019b28 <__assert_func>
 8018f72:	6922      	ldr	r2, [r4, #16]
 8018f74:	f104 010c 	add.w	r1, r4, #12
 8018f78:	300c      	adds	r0, #12
 8018f7a:	3202      	adds	r2, #2
 8018f7c:	0092      	lsls	r2, r2, #2
 8018f7e:	f7fd fe6c 	bl	8016c5a <memcpy>
 8018f82:	4621      	mov	r1, r4
 8018f84:	4644      	mov	r4, r8
 8018f86:	4638      	mov	r0, r7
 8018f88:	f7ff ffa2 	bl	8018ed0 <_Bfree>
 8018f8c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8018f90:	3501      	adds	r5, #1
 8018f92:	615e      	str	r6, [r3, #20]
 8018f94:	6125      	str	r5, [r4, #16]
 8018f96:	4620      	mov	r0, r4
 8018f98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018f9c:	0801cffd 	.word	0x0801cffd
 8018fa0:	0801d09a 	.word	0x0801d09a

08018fa4 <__s2b>:
 8018fa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018fa8:	4615      	mov	r5, r2
 8018faa:	461f      	mov	r7, r3
 8018fac:	2209      	movs	r2, #9
 8018fae:	3308      	adds	r3, #8
 8018fb0:	460c      	mov	r4, r1
 8018fb2:	4606      	mov	r6, r0
 8018fb4:	2100      	movs	r1, #0
 8018fb6:	fb93 f3f2 	sdiv	r3, r3, r2
 8018fba:	2201      	movs	r2, #1
 8018fbc:	429a      	cmp	r2, r3
 8018fbe:	db09      	blt.n	8018fd4 <__s2b+0x30>
 8018fc0:	4630      	mov	r0, r6
 8018fc2:	f7ff ff45 	bl	8018e50 <_Balloc>
 8018fc6:	b940      	cbnz	r0, 8018fda <__s2b+0x36>
 8018fc8:	4602      	mov	r2, r0
 8018fca:	4b19      	ldr	r3, [pc, #100]	; (8019030 <__s2b+0x8c>)
 8018fcc:	21d3      	movs	r1, #211	; 0xd3
 8018fce:	4819      	ldr	r0, [pc, #100]	; (8019034 <__s2b+0x90>)
 8018fd0:	f000 fdaa 	bl	8019b28 <__assert_func>
 8018fd4:	0052      	lsls	r2, r2, #1
 8018fd6:	3101      	adds	r1, #1
 8018fd8:	e7f0      	b.n	8018fbc <__s2b+0x18>
 8018fda:	9b08      	ldr	r3, [sp, #32]
 8018fdc:	2d09      	cmp	r5, #9
 8018fde:	6143      	str	r3, [r0, #20]
 8018fe0:	f04f 0301 	mov.w	r3, #1
 8018fe4:	6103      	str	r3, [r0, #16]
 8018fe6:	dd16      	ble.n	8019016 <__s2b+0x72>
 8018fe8:	f104 0909 	add.w	r9, r4, #9
 8018fec:	442c      	add	r4, r5
 8018fee:	46c8      	mov	r8, r9
 8018ff0:	f818 3b01 	ldrb.w	r3, [r8], #1
 8018ff4:	4601      	mov	r1, r0
 8018ff6:	220a      	movs	r2, #10
 8018ff8:	4630      	mov	r0, r6
 8018ffa:	3b30      	subs	r3, #48	; 0x30
 8018ffc:	f7ff ff8a 	bl	8018f14 <__multadd>
 8019000:	45a0      	cmp	r8, r4
 8019002:	d1f5      	bne.n	8018ff0 <__s2b+0x4c>
 8019004:	f1a5 0408 	sub.w	r4, r5, #8
 8019008:	444c      	add	r4, r9
 801900a:	1b2d      	subs	r5, r5, r4
 801900c:	1963      	adds	r3, r4, r5
 801900e:	42bb      	cmp	r3, r7
 8019010:	db04      	blt.n	801901c <__s2b+0x78>
 8019012:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019016:	340a      	adds	r4, #10
 8019018:	2509      	movs	r5, #9
 801901a:	e7f6      	b.n	801900a <__s2b+0x66>
 801901c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8019020:	4601      	mov	r1, r0
 8019022:	220a      	movs	r2, #10
 8019024:	4630      	mov	r0, r6
 8019026:	3b30      	subs	r3, #48	; 0x30
 8019028:	f7ff ff74 	bl	8018f14 <__multadd>
 801902c:	e7ee      	b.n	801900c <__s2b+0x68>
 801902e:	bf00      	nop
 8019030:	0801cffd 	.word	0x0801cffd
 8019034:	0801d09a 	.word	0x0801d09a

08019038 <__hi0bits>:
 8019038:	0c03      	lsrs	r3, r0, #16
 801903a:	041b      	lsls	r3, r3, #16
 801903c:	b9d3      	cbnz	r3, 8019074 <__hi0bits+0x3c>
 801903e:	0400      	lsls	r0, r0, #16
 8019040:	2310      	movs	r3, #16
 8019042:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8019046:	bf04      	itt	eq
 8019048:	0200      	lsleq	r0, r0, #8
 801904a:	3308      	addeq	r3, #8
 801904c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8019050:	bf04      	itt	eq
 8019052:	0100      	lsleq	r0, r0, #4
 8019054:	3304      	addeq	r3, #4
 8019056:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801905a:	bf04      	itt	eq
 801905c:	0080      	lsleq	r0, r0, #2
 801905e:	3302      	addeq	r3, #2
 8019060:	2800      	cmp	r0, #0
 8019062:	db05      	blt.n	8019070 <__hi0bits+0x38>
 8019064:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8019068:	f103 0301 	add.w	r3, r3, #1
 801906c:	bf08      	it	eq
 801906e:	2320      	moveq	r3, #32
 8019070:	4618      	mov	r0, r3
 8019072:	4770      	bx	lr
 8019074:	2300      	movs	r3, #0
 8019076:	e7e4      	b.n	8019042 <__hi0bits+0xa>

08019078 <__lo0bits>:
 8019078:	6803      	ldr	r3, [r0, #0]
 801907a:	f013 0207 	ands.w	r2, r3, #7
 801907e:	d00c      	beq.n	801909a <__lo0bits+0x22>
 8019080:	07d9      	lsls	r1, r3, #31
 8019082:	d422      	bmi.n	80190ca <__lo0bits+0x52>
 8019084:	079a      	lsls	r2, r3, #30
 8019086:	bf47      	ittee	mi
 8019088:	085b      	lsrmi	r3, r3, #1
 801908a:	2201      	movmi	r2, #1
 801908c:	089b      	lsrpl	r3, r3, #2
 801908e:	2202      	movpl	r2, #2
 8019090:	bf4c      	ite	mi
 8019092:	6003      	strmi	r3, [r0, #0]
 8019094:	6003      	strpl	r3, [r0, #0]
 8019096:	4610      	mov	r0, r2
 8019098:	4770      	bx	lr
 801909a:	b299      	uxth	r1, r3
 801909c:	b909      	cbnz	r1, 80190a2 <__lo0bits+0x2a>
 801909e:	0c1b      	lsrs	r3, r3, #16
 80190a0:	2210      	movs	r2, #16
 80190a2:	b2d9      	uxtb	r1, r3
 80190a4:	b909      	cbnz	r1, 80190aa <__lo0bits+0x32>
 80190a6:	3208      	adds	r2, #8
 80190a8:	0a1b      	lsrs	r3, r3, #8
 80190aa:	0719      	lsls	r1, r3, #28
 80190ac:	bf04      	itt	eq
 80190ae:	091b      	lsreq	r3, r3, #4
 80190b0:	3204      	addeq	r2, #4
 80190b2:	0799      	lsls	r1, r3, #30
 80190b4:	bf04      	itt	eq
 80190b6:	089b      	lsreq	r3, r3, #2
 80190b8:	3202      	addeq	r2, #2
 80190ba:	07d9      	lsls	r1, r3, #31
 80190bc:	d403      	bmi.n	80190c6 <__lo0bits+0x4e>
 80190be:	085b      	lsrs	r3, r3, #1
 80190c0:	f102 0201 	add.w	r2, r2, #1
 80190c4:	d003      	beq.n	80190ce <__lo0bits+0x56>
 80190c6:	6003      	str	r3, [r0, #0]
 80190c8:	e7e5      	b.n	8019096 <__lo0bits+0x1e>
 80190ca:	2200      	movs	r2, #0
 80190cc:	e7e3      	b.n	8019096 <__lo0bits+0x1e>
 80190ce:	2220      	movs	r2, #32
 80190d0:	e7e1      	b.n	8019096 <__lo0bits+0x1e>
	...

080190d4 <__i2b>:
 80190d4:	b510      	push	{r4, lr}
 80190d6:	460c      	mov	r4, r1
 80190d8:	2101      	movs	r1, #1
 80190da:	f7ff feb9 	bl	8018e50 <_Balloc>
 80190de:	4602      	mov	r2, r0
 80190e0:	b928      	cbnz	r0, 80190ee <__i2b+0x1a>
 80190e2:	4b05      	ldr	r3, [pc, #20]	; (80190f8 <__i2b+0x24>)
 80190e4:	f240 1145 	movw	r1, #325	; 0x145
 80190e8:	4804      	ldr	r0, [pc, #16]	; (80190fc <__i2b+0x28>)
 80190ea:	f000 fd1d 	bl	8019b28 <__assert_func>
 80190ee:	2301      	movs	r3, #1
 80190f0:	6144      	str	r4, [r0, #20]
 80190f2:	6103      	str	r3, [r0, #16]
 80190f4:	bd10      	pop	{r4, pc}
 80190f6:	bf00      	nop
 80190f8:	0801cffd 	.word	0x0801cffd
 80190fc:	0801d09a 	.word	0x0801d09a

08019100 <__multiply>:
 8019100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019104:	4691      	mov	r9, r2
 8019106:	690a      	ldr	r2, [r1, #16]
 8019108:	460c      	mov	r4, r1
 801910a:	b085      	sub	sp, #20
 801910c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8019110:	429a      	cmp	r2, r3
 8019112:	bfbe      	ittt	lt
 8019114:	460b      	movlt	r3, r1
 8019116:	464c      	movlt	r4, r9
 8019118:	4699      	movlt	r9, r3
 801911a:	6927      	ldr	r7, [r4, #16]
 801911c:	68a3      	ldr	r3, [r4, #8]
 801911e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8019122:	6861      	ldr	r1, [r4, #4]
 8019124:	eb07 060a 	add.w	r6, r7, sl
 8019128:	42b3      	cmp	r3, r6
 801912a:	bfb8      	it	lt
 801912c:	3101      	addlt	r1, #1
 801912e:	f7ff fe8f 	bl	8018e50 <_Balloc>
 8019132:	b930      	cbnz	r0, 8019142 <__multiply+0x42>
 8019134:	4602      	mov	r2, r0
 8019136:	4b45      	ldr	r3, [pc, #276]	; (801924c <__multiply+0x14c>)
 8019138:	f44f 71b1 	mov.w	r1, #354	; 0x162
 801913c:	4844      	ldr	r0, [pc, #272]	; (8019250 <__multiply+0x150>)
 801913e:	f000 fcf3 	bl	8019b28 <__assert_func>
 8019142:	f100 0514 	add.w	r5, r0, #20
 8019146:	2200      	movs	r2, #0
 8019148:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801914c:	462b      	mov	r3, r5
 801914e:	4543      	cmp	r3, r8
 8019150:	d321      	bcc.n	8019196 <__multiply+0x96>
 8019152:	f104 0314 	add.w	r3, r4, #20
 8019156:	f104 0115 	add.w	r1, r4, #21
 801915a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801915e:	f109 0314 	add.w	r3, r9, #20
 8019162:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8019166:	9202      	str	r2, [sp, #8]
 8019168:	1b3a      	subs	r2, r7, r4
 801916a:	3a15      	subs	r2, #21
 801916c:	f022 0203 	bic.w	r2, r2, #3
 8019170:	3204      	adds	r2, #4
 8019172:	428f      	cmp	r7, r1
 8019174:	bf38      	it	cc
 8019176:	2204      	movcc	r2, #4
 8019178:	9201      	str	r2, [sp, #4]
 801917a:	9a02      	ldr	r2, [sp, #8]
 801917c:	9303      	str	r3, [sp, #12]
 801917e:	429a      	cmp	r2, r3
 8019180:	d80c      	bhi.n	801919c <__multiply+0x9c>
 8019182:	2e00      	cmp	r6, #0
 8019184:	dd03      	ble.n	801918e <__multiply+0x8e>
 8019186:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801918a:	2b00      	cmp	r3, #0
 801918c:	d05b      	beq.n	8019246 <__multiply+0x146>
 801918e:	6106      	str	r6, [r0, #16]
 8019190:	b005      	add	sp, #20
 8019192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019196:	f843 2b04 	str.w	r2, [r3], #4
 801919a:	e7d8      	b.n	801914e <__multiply+0x4e>
 801919c:	f8b3 a000 	ldrh.w	sl, [r3]
 80191a0:	f1ba 0f00 	cmp.w	sl, #0
 80191a4:	d024      	beq.n	80191f0 <__multiply+0xf0>
 80191a6:	f104 0e14 	add.w	lr, r4, #20
 80191aa:	46a9      	mov	r9, r5
 80191ac:	f04f 0c00 	mov.w	ip, #0
 80191b0:	f85e 2b04 	ldr.w	r2, [lr], #4
 80191b4:	f8d9 1000 	ldr.w	r1, [r9]
 80191b8:	fa1f fb82 	uxth.w	fp, r2
 80191bc:	4577      	cmp	r7, lr
 80191be:	b289      	uxth	r1, r1
 80191c0:	fb0a 110b 	mla	r1, sl, fp, r1
 80191c4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80191c8:	f8d9 2000 	ldr.w	r2, [r9]
 80191cc:	4461      	add	r1, ip
 80191ce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80191d2:	fb0a c20b 	mla	r2, sl, fp, ip
 80191d6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80191da:	b289      	uxth	r1, r1
 80191dc:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80191e0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80191e4:	f849 1b04 	str.w	r1, [r9], #4
 80191e8:	d8e2      	bhi.n	80191b0 <__multiply+0xb0>
 80191ea:	9a01      	ldr	r2, [sp, #4]
 80191ec:	f845 c002 	str.w	ip, [r5, r2]
 80191f0:	9a03      	ldr	r2, [sp, #12]
 80191f2:	3304      	adds	r3, #4
 80191f4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80191f8:	f1b9 0f00 	cmp.w	r9, #0
 80191fc:	d021      	beq.n	8019242 <__multiply+0x142>
 80191fe:	6829      	ldr	r1, [r5, #0]
 8019200:	f104 0c14 	add.w	ip, r4, #20
 8019204:	46ae      	mov	lr, r5
 8019206:	f04f 0a00 	mov.w	sl, #0
 801920a:	f8bc b000 	ldrh.w	fp, [ip]
 801920e:	b289      	uxth	r1, r1
 8019210:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8019214:	fb09 220b 	mla	r2, r9, fp, r2
 8019218:	4452      	add	r2, sl
 801921a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801921e:	f84e 1b04 	str.w	r1, [lr], #4
 8019222:	f85c 1b04 	ldr.w	r1, [ip], #4
 8019226:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801922a:	f8be 1000 	ldrh.w	r1, [lr]
 801922e:	4567      	cmp	r7, ip
 8019230:	fb09 110a 	mla	r1, r9, sl, r1
 8019234:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8019238:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801923c:	d8e5      	bhi.n	801920a <__multiply+0x10a>
 801923e:	9a01      	ldr	r2, [sp, #4]
 8019240:	50a9      	str	r1, [r5, r2]
 8019242:	3504      	adds	r5, #4
 8019244:	e799      	b.n	801917a <__multiply+0x7a>
 8019246:	3e01      	subs	r6, #1
 8019248:	e79b      	b.n	8019182 <__multiply+0x82>
 801924a:	bf00      	nop
 801924c:	0801cffd 	.word	0x0801cffd
 8019250:	0801d09a 	.word	0x0801d09a

08019254 <__pow5mult>:
 8019254:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019258:	4615      	mov	r5, r2
 801925a:	f012 0203 	ands.w	r2, r2, #3
 801925e:	4606      	mov	r6, r0
 8019260:	460f      	mov	r7, r1
 8019262:	d007      	beq.n	8019274 <__pow5mult+0x20>
 8019264:	3a01      	subs	r2, #1
 8019266:	4c25      	ldr	r4, [pc, #148]	; (80192fc <__pow5mult+0xa8>)
 8019268:	2300      	movs	r3, #0
 801926a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801926e:	f7ff fe51 	bl	8018f14 <__multadd>
 8019272:	4607      	mov	r7, r0
 8019274:	10ad      	asrs	r5, r5, #2
 8019276:	d03d      	beq.n	80192f4 <__pow5mult+0xa0>
 8019278:	69f4      	ldr	r4, [r6, #28]
 801927a:	b97c      	cbnz	r4, 801929c <__pow5mult+0x48>
 801927c:	2010      	movs	r0, #16
 801927e:	f7fb fdbf 	bl	8014e00 <malloc>
 8019282:	4602      	mov	r2, r0
 8019284:	61f0      	str	r0, [r6, #28]
 8019286:	b928      	cbnz	r0, 8019294 <__pow5mult+0x40>
 8019288:	4b1d      	ldr	r3, [pc, #116]	; (8019300 <__pow5mult+0xac>)
 801928a:	f240 11b3 	movw	r1, #435	; 0x1b3
 801928e:	481d      	ldr	r0, [pc, #116]	; (8019304 <__pow5mult+0xb0>)
 8019290:	f000 fc4a 	bl	8019b28 <__assert_func>
 8019294:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8019298:	6004      	str	r4, [r0, #0]
 801929a:	60c4      	str	r4, [r0, #12]
 801929c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80192a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80192a4:	b94c      	cbnz	r4, 80192ba <__pow5mult+0x66>
 80192a6:	f240 2171 	movw	r1, #625	; 0x271
 80192aa:	4630      	mov	r0, r6
 80192ac:	f7ff ff12 	bl	80190d4 <__i2b>
 80192b0:	2300      	movs	r3, #0
 80192b2:	4604      	mov	r4, r0
 80192b4:	f8c8 0008 	str.w	r0, [r8, #8]
 80192b8:	6003      	str	r3, [r0, #0]
 80192ba:	f04f 0900 	mov.w	r9, #0
 80192be:	07eb      	lsls	r3, r5, #31
 80192c0:	d50a      	bpl.n	80192d8 <__pow5mult+0x84>
 80192c2:	4639      	mov	r1, r7
 80192c4:	4622      	mov	r2, r4
 80192c6:	4630      	mov	r0, r6
 80192c8:	f7ff ff1a 	bl	8019100 <__multiply>
 80192cc:	4680      	mov	r8, r0
 80192ce:	4639      	mov	r1, r7
 80192d0:	4630      	mov	r0, r6
 80192d2:	4647      	mov	r7, r8
 80192d4:	f7ff fdfc 	bl	8018ed0 <_Bfree>
 80192d8:	106d      	asrs	r5, r5, #1
 80192da:	d00b      	beq.n	80192f4 <__pow5mult+0xa0>
 80192dc:	6820      	ldr	r0, [r4, #0]
 80192de:	b938      	cbnz	r0, 80192f0 <__pow5mult+0x9c>
 80192e0:	4622      	mov	r2, r4
 80192e2:	4621      	mov	r1, r4
 80192e4:	4630      	mov	r0, r6
 80192e6:	f7ff ff0b 	bl	8019100 <__multiply>
 80192ea:	6020      	str	r0, [r4, #0]
 80192ec:	f8c0 9000 	str.w	r9, [r0]
 80192f0:	4604      	mov	r4, r0
 80192f2:	e7e4      	b.n	80192be <__pow5mult+0x6a>
 80192f4:	4638      	mov	r0, r7
 80192f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80192fa:	bf00      	nop
 80192fc:	0801d1e8 	.word	0x0801d1e8
 8019300:	0801cf8e 	.word	0x0801cf8e
 8019304:	0801d09a 	.word	0x0801d09a

08019308 <__lshift>:
 8019308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801930c:	460c      	mov	r4, r1
 801930e:	4607      	mov	r7, r0
 8019310:	4691      	mov	r9, r2
 8019312:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8019316:	6923      	ldr	r3, [r4, #16]
 8019318:	6849      	ldr	r1, [r1, #4]
 801931a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801931e:	68a3      	ldr	r3, [r4, #8]
 8019320:	f108 0601 	add.w	r6, r8, #1
 8019324:	42b3      	cmp	r3, r6
 8019326:	db0b      	blt.n	8019340 <__lshift+0x38>
 8019328:	4638      	mov	r0, r7
 801932a:	f7ff fd91 	bl	8018e50 <_Balloc>
 801932e:	4605      	mov	r5, r0
 8019330:	b948      	cbnz	r0, 8019346 <__lshift+0x3e>
 8019332:	4602      	mov	r2, r0
 8019334:	4b28      	ldr	r3, [pc, #160]	; (80193d8 <__lshift+0xd0>)
 8019336:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 801933a:	4828      	ldr	r0, [pc, #160]	; (80193dc <__lshift+0xd4>)
 801933c:	f000 fbf4 	bl	8019b28 <__assert_func>
 8019340:	3101      	adds	r1, #1
 8019342:	005b      	lsls	r3, r3, #1
 8019344:	e7ee      	b.n	8019324 <__lshift+0x1c>
 8019346:	2300      	movs	r3, #0
 8019348:	f100 0114 	add.w	r1, r0, #20
 801934c:	f100 0210 	add.w	r2, r0, #16
 8019350:	4618      	mov	r0, r3
 8019352:	4553      	cmp	r3, sl
 8019354:	db33      	blt.n	80193be <__lshift+0xb6>
 8019356:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801935a:	f104 0314 	add.w	r3, r4, #20
 801935e:	6920      	ldr	r0, [r4, #16]
 8019360:	f019 091f 	ands.w	r9, r9, #31
 8019364:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8019368:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801936c:	d02b      	beq.n	80193c6 <__lshift+0xbe>
 801936e:	f1c9 0e20 	rsb	lr, r9, #32
 8019372:	468a      	mov	sl, r1
 8019374:	2200      	movs	r2, #0
 8019376:	6818      	ldr	r0, [r3, #0]
 8019378:	fa00 f009 	lsl.w	r0, r0, r9
 801937c:	4310      	orrs	r0, r2
 801937e:	f84a 0b04 	str.w	r0, [sl], #4
 8019382:	f853 2b04 	ldr.w	r2, [r3], #4
 8019386:	459c      	cmp	ip, r3
 8019388:	fa22 f20e 	lsr.w	r2, r2, lr
 801938c:	d8f3      	bhi.n	8019376 <__lshift+0x6e>
 801938e:	ebac 0304 	sub.w	r3, ip, r4
 8019392:	f104 0015 	add.w	r0, r4, #21
 8019396:	3b15      	subs	r3, #21
 8019398:	f023 0303 	bic.w	r3, r3, #3
 801939c:	3304      	adds	r3, #4
 801939e:	4584      	cmp	ip, r0
 80193a0:	bf38      	it	cc
 80193a2:	2304      	movcc	r3, #4
 80193a4:	50ca      	str	r2, [r1, r3]
 80193a6:	b10a      	cbz	r2, 80193ac <__lshift+0xa4>
 80193a8:	f108 0602 	add.w	r6, r8, #2
 80193ac:	3e01      	subs	r6, #1
 80193ae:	4638      	mov	r0, r7
 80193b0:	4621      	mov	r1, r4
 80193b2:	612e      	str	r6, [r5, #16]
 80193b4:	f7ff fd8c 	bl	8018ed0 <_Bfree>
 80193b8:	4628      	mov	r0, r5
 80193ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80193be:	3301      	adds	r3, #1
 80193c0:	f842 0f04 	str.w	r0, [r2, #4]!
 80193c4:	e7c5      	b.n	8019352 <__lshift+0x4a>
 80193c6:	3904      	subs	r1, #4
 80193c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80193cc:	459c      	cmp	ip, r3
 80193ce:	f841 2f04 	str.w	r2, [r1, #4]!
 80193d2:	d8f9      	bhi.n	80193c8 <__lshift+0xc0>
 80193d4:	e7ea      	b.n	80193ac <__lshift+0xa4>
 80193d6:	bf00      	nop
 80193d8:	0801cffd 	.word	0x0801cffd
 80193dc:	0801d09a 	.word	0x0801d09a

080193e0 <__mcmp>:
 80193e0:	6902      	ldr	r2, [r0, #16]
 80193e2:	b530      	push	{r4, r5, lr}
 80193e4:	690c      	ldr	r4, [r1, #16]
 80193e6:	1b12      	subs	r2, r2, r4
 80193e8:	d10e      	bne.n	8019408 <__mcmp+0x28>
 80193ea:	f100 0314 	add.w	r3, r0, #20
 80193ee:	3114      	adds	r1, #20
 80193f0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80193f4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80193f8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80193fc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8019400:	42a5      	cmp	r5, r4
 8019402:	d003      	beq.n	801940c <__mcmp+0x2c>
 8019404:	d305      	bcc.n	8019412 <__mcmp+0x32>
 8019406:	2201      	movs	r2, #1
 8019408:	4610      	mov	r0, r2
 801940a:	bd30      	pop	{r4, r5, pc}
 801940c:	4283      	cmp	r3, r0
 801940e:	d3f3      	bcc.n	80193f8 <__mcmp+0x18>
 8019410:	e7fa      	b.n	8019408 <__mcmp+0x28>
 8019412:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019416:	e7f7      	b.n	8019408 <__mcmp+0x28>

08019418 <__mdiff>:
 8019418:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801941c:	460c      	mov	r4, r1
 801941e:	4606      	mov	r6, r0
 8019420:	4611      	mov	r1, r2
 8019422:	4692      	mov	sl, r2
 8019424:	4620      	mov	r0, r4
 8019426:	f7ff ffdb 	bl	80193e0 <__mcmp>
 801942a:	1e05      	subs	r5, r0, #0
 801942c:	d110      	bne.n	8019450 <__mdiff+0x38>
 801942e:	4629      	mov	r1, r5
 8019430:	4630      	mov	r0, r6
 8019432:	f7ff fd0d 	bl	8018e50 <_Balloc>
 8019436:	b930      	cbnz	r0, 8019446 <__mdiff+0x2e>
 8019438:	4b3d      	ldr	r3, [pc, #244]	; (8019530 <__mdiff+0x118>)
 801943a:	4602      	mov	r2, r0
 801943c:	f240 2137 	movw	r1, #567	; 0x237
 8019440:	483c      	ldr	r0, [pc, #240]	; (8019534 <__mdiff+0x11c>)
 8019442:	f000 fb71 	bl	8019b28 <__assert_func>
 8019446:	2301      	movs	r3, #1
 8019448:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801944c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019450:	bfa4      	itt	ge
 8019452:	4653      	movge	r3, sl
 8019454:	46a2      	movge	sl, r4
 8019456:	4630      	mov	r0, r6
 8019458:	bfa8      	it	ge
 801945a:	2500      	movge	r5, #0
 801945c:	f8da 1004 	ldr.w	r1, [sl, #4]
 8019460:	bfac      	ite	ge
 8019462:	461c      	movge	r4, r3
 8019464:	2501      	movlt	r5, #1
 8019466:	f7ff fcf3 	bl	8018e50 <_Balloc>
 801946a:	b920      	cbnz	r0, 8019476 <__mdiff+0x5e>
 801946c:	4b30      	ldr	r3, [pc, #192]	; (8019530 <__mdiff+0x118>)
 801946e:	4602      	mov	r2, r0
 8019470:	f240 2145 	movw	r1, #581	; 0x245
 8019474:	e7e4      	b.n	8019440 <__mdiff+0x28>
 8019476:	f8da 7010 	ldr.w	r7, [sl, #16]
 801947a:	f104 0914 	add.w	r9, r4, #20
 801947e:	6926      	ldr	r6, [r4, #16]
 8019480:	f100 0814 	add.w	r8, r0, #20
 8019484:	60c5      	str	r5, [r0, #12]
 8019486:	f10a 0514 	add.w	r5, sl, #20
 801948a:	f10a 0210 	add.w	r2, sl, #16
 801948e:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8019492:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8019496:	46c2      	mov	sl, r8
 8019498:	f04f 0c00 	mov.w	ip, #0
 801949c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80194a0:	f859 3b04 	ldr.w	r3, [r9], #4
 80194a4:	fa1f f18b 	uxth.w	r1, fp
 80194a8:	454e      	cmp	r6, r9
 80194aa:	4461      	add	r1, ip
 80194ac:	fa1f fc83 	uxth.w	ip, r3
 80194b0:	ea4f 4313 	mov.w	r3, r3, lsr #16
 80194b4:	eba1 010c 	sub.w	r1, r1, ip
 80194b8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80194bc:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80194c0:	b289      	uxth	r1, r1
 80194c2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80194c6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80194ca:	f84a 1b04 	str.w	r1, [sl], #4
 80194ce:	d8e5      	bhi.n	801949c <__mdiff+0x84>
 80194d0:	1b33      	subs	r3, r6, r4
 80194d2:	3415      	adds	r4, #21
 80194d4:	3b15      	subs	r3, #21
 80194d6:	f023 0303 	bic.w	r3, r3, #3
 80194da:	3304      	adds	r3, #4
 80194dc:	42a6      	cmp	r6, r4
 80194de:	bf38      	it	cc
 80194e0:	2304      	movcc	r3, #4
 80194e2:	441d      	add	r5, r3
 80194e4:	4443      	add	r3, r8
 80194e6:	462c      	mov	r4, r5
 80194e8:	461e      	mov	r6, r3
 80194ea:	4574      	cmp	r4, lr
 80194ec:	d30e      	bcc.n	801950c <__mdiff+0xf4>
 80194ee:	f10e 0203 	add.w	r2, lr, #3
 80194f2:	1b52      	subs	r2, r2, r5
 80194f4:	3d03      	subs	r5, #3
 80194f6:	f022 0203 	bic.w	r2, r2, #3
 80194fa:	45ae      	cmp	lr, r5
 80194fc:	bf38      	it	cc
 80194fe:	2200      	movcc	r2, #0
 8019500:	4413      	add	r3, r2
 8019502:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8019506:	b18a      	cbz	r2, 801952c <__mdiff+0x114>
 8019508:	6107      	str	r7, [r0, #16]
 801950a:	e79f      	b.n	801944c <__mdiff+0x34>
 801950c:	f854 8b04 	ldr.w	r8, [r4], #4
 8019510:	fa1f f288 	uxth.w	r2, r8
 8019514:	4462      	add	r2, ip
 8019516:	1411      	asrs	r1, r2, #16
 8019518:	b292      	uxth	r2, r2
 801951a:	eb01 4118 	add.w	r1, r1, r8, lsr #16
 801951e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8019522:	ea4f 4c21 	mov.w	ip, r1, asr #16
 8019526:	f846 2b04 	str.w	r2, [r6], #4
 801952a:	e7de      	b.n	80194ea <__mdiff+0xd2>
 801952c:	3f01      	subs	r7, #1
 801952e:	e7e8      	b.n	8019502 <__mdiff+0xea>
 8019530:	0801cffd 	.word	0x0801cffd
 8019534:	0801d09a 	.word	0x0801d09a

08019538 <__ulp>:
 8019538:	b082      	sub	sp, #8
 801953a:	4b11      	ldr	r3, [pc, #68]	; (8019580 <__ulp+0x48>)
 801953c:	ed8d 0b00 	vstr	d0, [sp]
 8019540:	9a01      	ldr	r2, [sp, #4]
 8019542:	4013      	ands	r3, r2
 8019544:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8019548:	2b00      	cmp	r3, #0
 801954a:	dc08      	bgt.n	801955e <__ulp+0x26>
 801954c:	425b      	negs	r3, r3
 801954e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8019552:	ea4f 5223 	mov.w	r2, r3, asr #20
 8019556:	da04      	bge.n	8019562 <__ulp+0x2a>
 8019558:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801955c:	4113      	asrs	r3, r2
 801955e:	2200      	movs	r2, #0
 8019560:	e008      	b.n	8019574 <__ulp+0x3c>
 8019562:	f1a2 0314 	sub.w	r3, r2, #20
 8019566:	2b1e      	cmp	r3, #30
 8019568:	bfd6      	itet	le
 801956a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 801956e:	2201      	movgt	r2, #1
 8019570:	40da      	lsrle	r2, r3
 8019572:	2300      	movs	r3, #0
 8019574:	4619      	mov	r1, r3
 8019576:	4610      	mov	r0, r2
 8019578:	ec41 0b10 	vmov	d0, r0, r1
 801957c:	b002      	add	sp, #8
 801957e:	4770      	bx	lr
 8019580:	7ff00000 	.word	0x7ff00000

08019584 <__b2d>:
 8019584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019588:	6906      	ldr	r6, [r0, #16]
 801958a:	f100 0814 	add.w	r8, r0, #20
 801958e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8019592:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8019596:	1f37      	subs	r7, r6, #4
 8019598:	4610      	mov	r0, r2
 801959a:	f7ff fd4d 	bl	8019038 <__hi0bits>
 801959e:	f1c0 0320 	rsb	r3, r0, #32
 80195a2:	280a      	cmp	r0, #10
 80195a4:	600b      	str	r3, [r1, #0]
 80195a6:	491d      	ldr	r1, [pc, #116]	; (801961c <__b2d+0x98>)
 80195a8:	dc16      	bgt.n	80195d8 <__b2d+0x54>
 80195aa:	f1c0 0c0b 	rsb	ip, r0, #11
 80195ae:	45b8      	cmp	r8, r7
 80195b0:	f100 0015 	add.w	r0, r0, #21
 80195b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80195b8:	fa02 f000 	lsl.w	r0, r2, r0
 80195bc:	ea43 0501 	orr.w	r5, r3, r1
 80195c0:	bf34      	ite	cc
 80195c2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80195c6:	2300      	movcs	r3, #0
 80195c8:	fa23 f30c 	lsr.w	r3, r3, ip
 80195cc:	4303      	orrs	r3, r0
 80195ce:	461c      	mov	r4, r3
 80195d0:	ec45 4b10 	vmov	d0, r4, r5
 80195d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80195d8:	45b8      	cmp	r8, r7
 80195da:	bf3a      	itte	cc
 80195dc:	f1a6 0708 	subcc.w	r7, r6, #8
 80195e0:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80195e4:	2300      	movcs	r3, #0
 80195e6:	380b      	subs	r0, #11
 80195e8:	d014      	beq.n	8019614 <__b2d+0x90>
 80195ea:	f1c0 0120 	rsb	r1, r0, #32
 80195ee:	4082      	lsls	r2, r0
 80195f0:	4547      	cmp	r7, r8
 80195f2:	fa23 f401 	lsr.w	r4, r3, r1
 80195f6:	fa03 f300 	lsl.w	r3, r3, r0
 80195fa:	ea42 0204 	orr.w	r2, r2, r4
 80195fe:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8019602:	bf8c      	ite	hi
 8019604:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8019608:	2200      	movls	r2, #0
 801960a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801960e:	40ca      	lsrs	r2, r1
 8019610:	4313      	orrs	r3, r2
 8019612:	e7dc      	b.n	80195ce <__b2d+0x4a>
 8019614:	ea42 0501 	orr.w	r5, r2, r1
 8019618:	e7d9      	b.n	80195ce <__b2d+0x4a>
 801961a:	bf00      	nop
 801961c:	3ff00000 	.word	0x3ff00000

08019620 <__d2b>:
 8019620:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8019624:	460f      	mov	r7, r1
 8019626:	2101      	movs	r1, #1
 8019628:	4616      	mov	r6, r2
 801962a:	ec59 8b10 	vmov	r8, r9, d0
 801962e:	f7ff fc0f 	bl	8018e50 <_Balloc>
 8019632:	4604      	mov	r4, r0
 8019634:	b930      	cbnz	r0, 8019644 <__d2b+0x24>
 8019636:	4602      	mov	r2, r0
 8019638:	4b24      	ldr	r3, [pc, #144]	; (80196cc <__d2b+0xac>)
 801963a:	f240 310f 	movw	r1, #783	; 0x30f
 801963e:	4824      	ldr	r0, [pc, #144]	; (80196d0 <__d2b+0xb0>)
 8019640:	f000 fa72 	bl	8019b28 <__assert_func>
 8019644:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8019648:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801964c:	bb2d      	cbnz	r5, 801969a <__d2b+0x7a>
 801964e:	9301      	str	r3, [sp, #4]
 8019650:	f1b8 0300 	subs.w	r3, r8, #0
 8019654:	d026      	beq.n	80196a4 <__d2b+0x84>
 8019656:	4668      	mov	r0, sp
 8019658:	9300      	str	r3, [sp, #0]
 801965a:	f7ff fd0d 	bl	8019078 <__lo0bits>
 801965e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8019662:	b1e8      	cbz	r0, 80196a0 <__d2b+0x80>
 8019664:	f1c0 0320 	rsb	r3, r0, #32
 8019668:	fa02 f303 	lsl.w	r3, r2, r3
 801966c:	40c2      	lsrs	r2, r0
 801966e:	430b      	orrs	r3, r1
 8019670:	9201      	str	r2, [sp, #4]
 8019672:	6163      	str	r3, [r4, #20]
 8019674:	9b01      	ldr	r3, [sp, #4]
 8019676:	2b00      	cmp	r3, #0
 8019678:	61a3      	str	r3, [r4, #24]
 801967a:	bf14      	ite	ne
 801967c:	2202      	movne	r2, #2
 801967e:	2201      	moveq	r2, #1
 8019680:	6122      	str	r2, [r4, #16]
 8019682:	b1bd      	cbz	r5, 80196b4 <__d2b+0x94>
 8019684:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8019688:	4405      	add	r5, r0
 801968a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801968e:	603d      	str	r5, [r7, #0]
 8019690:	6030      	str	r0, [r6, #0]
 8019692:	4620      	mov	r0, r4
 8019694:	b003      	add	sp, #12
 8019696:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801969a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801969e:	e7d6      	b.n	801964e <__d2b+0x2e>
 80196a0:	6161      	str	r1, [r4, #20]
 80196a2:	e7e7      	b.n	8019674 <__d2b+0x54>
 80196a4:	a801      	add	r0, sp, #4
 80196a6:	f7ff fce7 	bl	8019078 <__lo0bits>
 80196aa:	9b01      	ldr	r3, [sp, #4]
 80196ac:	3020      	adds	r0, #32
 80196ae:	2201      	movs	r2, #1
 80196b0:	6163      	str	r3, [r4, #20]
 80196b2:	e7e5      	b.n	8019680 <__d2b+0x60>
 80196b4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80196b8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80196bc:	6038      	str	r0, [r7, #0]
 80196be:	6918      	ldr	r0, [r3, #16]
 80196c0:	f7ff fcba 	bl	8019038 <__hi0bits>
 80196c4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80196c8:	e7e2      	b.n	8019690 <__d2b+0x70>
 80196ca:	bf00      	nop
 80196cc:	0801cffd 	.word	0x0801cffd
 80196d0:	0801d09a 	.word	0x0801d09a

080196d4 <__ratio>:
 80196d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80196d8:	4688      	mov	r8, r1
 80196da:	4681      	mov	r9, r0
 80196dc:	4669      	mov	r1, sp
 80196de:	f7ff ff51 	bl	8019584 <__b2d>
 80196e2:	a901      	add	r1, sp, #4
 80196e4:	4640      	mov	r0, r8
 80196e6:	ec55 4b10 	vmov	r4, r5, d0
 80196ea:	f7ff ff4b 	bl	8019584 <__b2d>
 80196ee:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80196f2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80196f6:	462f      	mov	r7, r5
 80196f8:	eba3 0c02 	sub.w	ip, r3, r2
 80196fc:	e9dd 3200 	ldrd	r3, r2, [sp]
 8019700:	ec51 0b10 	vmov	r0, r1, d0
 8019704:	1a9b      	subs	r3, r3, r2
 8019706:	468b      	mov	fp, r1
 8019708:	4620      	mov	r0, r4
 801970a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801970e:	2b00      	cmp	r3, #0
 8019710:	bfd5      	itete	le
 8019712:	460a      	movle	r2, r1
 8019714:	462a      	movgt	r2, r5
 8019716:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801971a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801971e:	bfd8      	it	le
 8019720:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8019724:	ee10 2a10 	vmov	r2, s0
 8019728:	4639      	mov	r1, r7
 801972a:	465b      	mov	r3, fp
 801972c:	f7e7 f89c 	bl	8000868 <__aeabi_ddiv>
 8019730:	ec41 0b10 	vmov	d0, r0, r1
 8019734:	b003      	add	sp, #12
 8019736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801973a <__copybits>:
 801973a:	3901      	subs	r1, #1
 801973c:	f102 0314 	add.w	r3, r2, #20
 8019740:	1149      	asrs	r1, r1, #5
 8019742:	b570      	push	{r4, r5, r6, lr}
 8019744:	3101      	adds	r1, #1
 8019746:	6914      	ldr	r4, [r2, #16]
 8019748:	1f05      	subs	r5, r0, #4
 801974a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801974e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8019752:	42a3      	cmp	r3, r4
 8019754:	d30c      	bcc.n	8019770 <__copybits+0x36>
 8019756:	1aa3      	subs	r3, r4, r2
 8019758:	3211      	adds	r2, #17
 801975a:	3b11      	subs	r3, #17
 801975c:	f023 0303 	bic.w	r3, r3, #3
 8019760:	42a2      	cmp	r2, r4
 8019762:	bf88      	it	hi
 8019764:	2300      	movhi	r3, #0
 8019766:	4418      	add	r0, r3
 8019768:	2300      	movs	r3, #0
 801976a:	4288      	cmp	r0, r1
 801976c:	d305      	bcc.n	801977a <__copybits+0x40>
 801976e:	bd70      	pop	{r4, r5, r6, pc}
 8019770:	f853 6b04 	ldr.w	r6, [r3], #4
 8019774:	f845 6f04 	str.w	r6, [r5, #4]!
 8019778:	e7eb      	b.n	8019752 <__copybits+0x18>
 801977a:	f840 3b04 	str.w	r3, [r0], #4
 801977e:	e7f4      	b.n	801976a <__copybits+0x30>

08019780 <__any_on>:
 8019780:	f100 0214 	add.w	r2, r0, #20
 8019784:	114b      	asrs	r3, r1, #5
 8019786:	6900      	ldr	r0, [r0, #16]
 8019788:	4298      	cmp	r0, r3
 801978a:	b510      	push	{r4, lr}
 801978c:	db11      	blt.n	80197b2 <__any_on+0x32>
 801978e:	dd0a      	ble.n	80197a6 <__any_on+0x26>
 8019790:	f011 011f 	ands.w	r1, r1, #31
 8019794:	d007      	beq.n	80197a6 <__any_on+0x26>
 8019796:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801979a:	fa24 f001 	lsr.w	r0, r4, r1
 801979e:	fa00 f101 	lsl.w	r1, r0, r1
 80197a2:	428c      	cmp	r4, r1
 80197a4:	d10b      	bne.n	80197be <__any_on+0x3e>
 80197a6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80197aa:	4293      	cmp	r3, r2
 80197ac:	d803      	bhi.n	80197b6 <__any_on+0x36>
 80197ae:	2000      	movs	r0, #0
 80197b0:	bd10      	pop	{r4, pc}
 80197b2:	4603      	mov	r3, r0
 80197b4:	e7f7      	b.n	80197a6 <__any_on+0x26>
 80197b6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80197ba:	2900      	cmp	r1, #0
 80197bc:	d0f5      	beq.n	80197aa <__any_on+0x2a>
 80197be:	2001      	movs	r0, #1
 80197c0:	e7f6      	b.n	80197b0 <__any_on+0x30>

080197c2 <__submore>:
 80197c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80197c6:	460c      	mov	r4, r1
 80197c8:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80197ca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80197ce:	4299      	cmp	r1, r3
 80197d0:	d11a      	bne.n	8019808 <__submore+0x46>
 80197d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80197d6:	f7fb fb43 	bl	8014e60 <_malloc_r>
 80197da:	b918      	cbnz	r0, 80197e4 <__submore+0x22>
 80197dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80197e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80197e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80197e8:	6360      	str	r0, [r4, #52]	; 0x34
 80197ea:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80197ee:	63a3      	str	r3, [r4, #56]	; 0x38
 80197f0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80197f4:	7083      	strb	r3, [r0, #2]
 80197f6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80197fa:	7043      	strb	r3, [r0, #1]
 80197fc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8019800:	7003      	strb	r3, [r0, #0]
 8019802:	6020      	str	r0, [r4, #0]
 8019804:	2000      	movs	r0, #0
 8019806:	e7eb      	b.n	80197e0 <__submore+0x1e>
 8019808:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801980a:	0077      	lsls	r7, r6, #1
 801980c:	463a      	mov	r2, r7
 801980e:	f000 f80f 	bl	8019830 <_realloc_r>
 8019812:	4605      	mov	r5, r0
 8019814:	2800      	cmp	r0, #0
 8019816:	d0e1      	beq.n	80197dc <__submore+0x1a>
 8019818:	eb00 0806 	add.w	r8, r0, r6
 801981c:	4601      	mov	r1, r0
 801981e:	4632      	mov	r2, r6
 8019820:	4640      	mov	r0, r8
 8019822:	f7fd fa1a 	bl	8016c5a <memcpy>
 8019826:	f8c4 8000 	str.w	r8, [r4]
 801982a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801982e:	e7e9      	b.n	8019804 <__submore+0x42>

08019830 <_realloc_r>:
 8019830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019834:	4680      	mov	r8, r0
 8019836:	4614      	mov	r4, r2
 8019838:	460e      	mov	r6, r1
 801983a:	b921      	cbnz	r1, 8019846 <_realloc_r+0x16>
 801983c:	4611      	mov	r1, r2
 801983e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019842:	f7fb bb0d 	b.w	8014e60 <_malloc_r>
 8019846:	b92a      	cbnz	r2, 8019854 <_realloc_r+0x24>
 8019848:	4625      	mov	r5, r4
 801984a:	f7fe f8ad 	bl	80179a8 <_free_r>
 801984e:	4628      	mov	r0, r5
 8019850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019854:	f000 f986 	bl	8019b64 <_malloc_usable_size_r>
 8019858:	4284      	cmp	r4, r0
 801985a:	4607      	mov	r7, r0
 801985c:	d802      	bhi.n	8019864 <_realloc_r+0x34>
 801985e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8019862:	d812      	bhi.n	801988a <_realloc_r+0x5a>
 8019864:	4621      	mov	r1, r4
 8019866:	4640      	mov	r0, r8
 8019868:	f7fb fafa 	bl	8014e60 <_malloc_r>
 801986c:	4605      	mov	r5, r0
 801986e:	2800      	cmp	r0, #0
 8019870:	d0ed      	beq.n	801984e <_realloc_r+0x1e>
 8019872:	42bc      	cmp	r4, r7
 8019874:	4622      	mov	r2, r4
 8019876:	4631      	mov	r1, r6
 8019878:	bf28      	it	cs
 801987a:	463a      	movcs	r2, r7
 801987c:	f7fd f9ed 	bl	8016c5a <memcpy>
 8019880:	4631      	mov	r1, r6
 8019882:	4640      	mov	r0, r8
 8019884:	f7fe f890 	bl	80179a8 <_free_r>
 8019888:	e7e1      	b.n	801984e <_realloc_r+0x1e>
 801988a:	4635      	mov	r5, r6
 801988c:	e7df      	b.n	801984e <_realloc_r+0x1e>
	...

08019890 <_strtoul_l.constprop.0>:
 8019890:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019894:	4686      	mov	lr, r0
 8019896:	460d      	mov	r5, r1
 8019898:	4f35      	ldr	r7, [pc, #212]	; (8019970 <_strtoul_l.constprop.0+0xe0>)
 801989a:	4628      	mov	r0, r5
 801989c:	f815 4b01 	ldrb.w	r4, [r5], #1
 80198a0:	5d3e      	ldrb	r6, [r7, r4]
 80198a2:	f016 0608 	ands.w	r6, r6, #8
 80198a6:	d1f8      	bne.n	801989a <_strtoul_l.constprop.0+0xa>
 80198a8:	2c2d      	cmp	r4, #45	; 0x2d
 80198aa:	d130      	bne.n	801990e <_strtoul_l.constprop.0+0x7e>
 80198ac:	782c      	ldrb	r4, [r5, #0]
 80198ae:	2601      	movs	r6, #1
 80198b0:	1c85      	adds	r5, r0, #2
 80198b2:	2b00      	cmp	r3, #0
 80198b4:	d057      	beq.n	8019966 <_strtoul_l.constprop.0+0xd6>
 80198b6:	2b10      	cmp	r3, #16
 80198b8:	d109      	bne.n	80198ce <_strtoul_l.constprop.0+0x3e>
 80198ba:	2c30      	cmp	r4, #48	; 0x30
 80198bc:	d107      	bne.n	80198ce <_strtoul_l.constprop.0+0x3e>
 80198be:	7828      	ldrb	r0, [r5, #0]
 80198c0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80198c4:	2858      	cmp	r0, #88	; 0x58
 80198c6:	d149      	bne.n	801995c <_strtoul_l.constprop.0+0xcc>
 80198c8:	786c      	ldrb	r4, [r5, #1]
 80198ca:	2310      	movs	r3, #16
 80198cc:	3502      	adds	r5, #2
 80198ce:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80198d2:	2700      	movs	r7, #0
 80198d4:	fbb8 f8f3 	udiv	r8, r8, r3
 80198d8:	fb03 f908 	mul.w	r9, r3, r8
 80198dc:	4638      	mov	r0, r7
 80198de:	ea6f 0909 	mvn.w	r9, r9
 80198e2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80198e6:	f1bc 0f09 	cmp.w	ip, #9
 80198ea:	d815      	bhi.n	8019918 <_strtoul_l.constprop.0+0x88>
 80198ec:	4664      	mov	r4, ip
 80198ee:	42a3      	cmp	r3, r4
 80198f0:	dd23      	ble.n	801993a <_strtoul_l.constprop.0+0xaa>
 80198f2:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 80198f6:	d007      	beq.n	8019908 <_strtoul_l.constprop.0+0x78>
 80198f8:	4580      	cmp	r8, r0
 80198fa:	d31b      	bcc.n	8019934 <_strtoul_l.constprop.0+0xa4>
 80198fc:	d101      	bne.n	8019902 <_strtoul_l.constprop.0+0x72>
 80198fe:	45a1      	cmp	r9, r4
 8019900:	db18      	blt.n	8019934 <_strtoul_l.constprop.0+0xa4>
 8019902:	fb00 4003 	mla	r0, r0, r3, r4
 8019906:	2701      	movs	r7, #1
 8019908:	f815 4b01 	ldrb.w	r4, [r5], #1
 801990c:	e7e9      	b.n	80198e2 <_strtoul_l.constprop.0+0x52>
 801990e:	2c2b      	cmp	r4, #43	; 0x2b
 8019910:	bf04      	itt	eq
 8019912:	782c      	ldrbeq	r4, [r5, #0]
 8019914:	1c85      	addeq	r5, r0, #2
 8019916:	e7cc      	b.n	80198b2 <_strtoul_l.constprop.0+0x22>
 8019918:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801991c:	f1bc 0f19 	cmp.w	ip, #25
 8019920:	d801      	bhi.n	8019926 <_strtoul_l.constprop.0+0x96>
 8019922:	3c37      	subs	r4, #55	; 0x37
 8019924:	e7e3      	b.n	80198ee <_strtoul_l.constprop.0+0x5e>
 8019926:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801992a:	f1bc 0f19 	cmp.w	ip, #25
 801992e:	d804      	bhi.n	801993a <_strtoul_l.constprop.0+0xaa>
 8019930:	3c57      	subs	r4, #87	; 0x57
 8019932:	e7dc      	b.n	80198ee <_strtoul_l.constprop.0+0x5e>
 8019934:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8019938:	e7e6      	b.n	8019908 <_strtoul_l.constprop.0+0x78>
 801993a:	1c7b      	adds	r3, r7, #1
 801993c:	d106      	bne.n	801994c <_strtoul_l.constprop.0+0xbc>
 801993e:	2322      	movs	r3, #34	; 0x22
 8019940:	4638      	mov	r0, r7
 8019942:	f8ce 3000 	str.w	r3, [lr]
 8019946:	b932      	cbnz	r2, 8019956 <_strtoul_l.constprop.0+0xc6>
 8019948:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801994c:	b106      	cbz	r6, 8019950 <_strtoul_l.constprop.0+0xc0>
 801994e:	4240      	negs	r0, r0
 8019950:	2a00      	cmp	r2, #0
 8019952:	d0f9      	beq.n	8019948 <_strtoul_l.constprop.0+0xb8>
 8019954:	b107      	cbz	r7, 8019958 <_strtoul_l.constprop.0+0xc8>
 8019956:	1e69      	subs	r1, r5, #1
 8019958:	6011      	str	r1, [r2, #0]
 801995a:	e7f5      	b.n	8019948 <_strtoul_l.constprop.0+0xb8>
 801995c:	2430      	movs	r4, #48	; 0x30
 801995e:	2b00      	cmp	r3, #0
 8019960:	d1b5      	bne.n	80198ce <_strtoul_l.constprop.0+0x3e>
 8019962:	2308      	movs	r3, #8
 8019964:	e7b3      	b.n	80198ce <_strtoul_l.constprop.0+0x3e>
 8019966:	2c30      	cmp	r4, #48	; 0x30
 8019968:	d0a9      	beq.n	80198be <_strtoul_l.constprop.0+0x2e>
 801996a:	230a      	movs	r3, #10
 801996c:	e7af      	b.n	80198ce <_strtoul_l.constprop.0+0x3e>
 801996e:	bf00      	nop
 8019970:	0801ce81 	.word	0x0801ce81

08019974 <_strtoul_r>:
 8019974:	f7ff bf8c 	b.w	8019890 <_strtoul_l.constprop.0>

08019978 <__swbuf_r>:
 8019978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801997a:	460e      	mov	r6, r1
 801997c:	4614      	mov	r4, r2
 801997e:	4605      	mov	r5, r0
 8019980:	b118      	cbz	r0, 801998a <__swbuf_r+0x12>
 8019982:	6a03      	ldr	r3, [r0, #32]
 8019984:	b90b      	cbnz	r3, 801998a <__swbuf_r+0x12>
 8019986:	f7fc f8a1 	bl	8015acc <__sinit>
 801998a:	69a3      	ldr	r3, [r4, #24]
 801998c:	60a3      	str	r3, [r4, #8]
 801998e:	89a3      	ldrh	r3, [r4, #12]
 8019990:	071a      	lsls	r2, r3, #28
 8019992:	d525      	bpl.n	80199e0 <__swbuf_r+0x68>
 8019994:	6923      	ldr	r3, [r4, #16]
 8019996:	b31b      	cbz	r3, 80199e0 <__swbuf_r+0x68>
 8019998:	6823      	ldr	r3, [r4, #0]
 801999a:	b2f6      	uxtb	r6, r6
 801999c:	6922      	ldr	r2, [r4, #16]
 801999e:	4637      	mov	r7, r6
 80199a0:	1a98      	subs	r0, r3, r2
 80199a2:	6963      	ldr	r3, [r4, #20]
 80199a4:	4283      	cmp	r3, r0
 80199a6:	dc04      	bgt.n	80199b2 <__swbuf_r+0x3a>
 80199a8:	4621      	mov	r1, r4
 80199aa:	4628      	mov	r0, r5
 80199ac:	f7ff fa28 	bl	8018e00 <_fflush_r>
 80199b0:	b9e0      	cbnz	r0, 80199ec <__swbuf_r+0x74>
 80199b2:	68a3      	ldr	r3, [r4, #8]
 80199b4:	3b01      	subs	r3, #1
 80199b6:	60a3      	str	r3, [r4, #8]
 80199b8:	6823      	ldr	r3, [r4, #0]
 80199ba:	1c5a      	adds	r2, r3, #1
 80199bc:	6022      	str	r2, [r4, #0]
 80199be:	701e      	strb	r6, [r3, #0]
 80199c0:	1c43      	adds	r3, r0, #1
 80199c2:	6962      	ldr	r2, [r4, #20]
 80199c4:	429a      	cmp	r2, r3
 80199c6:	d004      	beq.n	80199d2 <__swbuf_r+0x5a>
 80199c8:	89a3      	ldrh	r3, [r4, #12]
 80199ca:	07db      	lsls	r3, r3, #31
 80199cc:	d506      	bpl.n	80199dc <__swbuf_r+0x64>
 80199ce:	2e0a      	cmp	r6, #10
 80199d0:	d104      	bne.n	80199dc <__swbuf_r+0x64>
 80199d2:	4621      	mov	r1, r4
 80199d4:	4628      	mov	r0, r5
 80199d6:	f7ff fa13 	bl	8018e00 <_fflush_r>
 80199da:	b938      	cbnz	r0, 80199ec <__swbuf_r+0x74>
 80199dc:	4638      	mov	r0, r7
 80199de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80199e0:	4621      	mov	r1, r4
 80199e2:	4628      	mov	r0, r5
 80199e4:	f000 f806 	bl	80199f4 <__swsetup_r>
 80199e8:	2800      	cmp	r0, #0
 80199ea:	d0d5      	beq.n	8019998 <__swbuf_r+0x20>
 80199ec:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80199f0:	e7f4      	b.n	80199dc <__swbuf_r+0x64>
	...

080199f4 <__swsetup_r>:
 80199f4:	b538      	push	{r3, r4, r5, lr}
 80199f6:	4b2a      	ldr	r3, [pc, #168]	; (8019aa0 <__swsetup_r+0xac>)
 80199f8:	4605      	mov	r5, r0
 80199fa:	460c      	mov	r4, r1
 80199fc:	6818      	ldr	r0, [r3, #0]
 80199fe:	b118      	cbz	r0, 8019a08 <__swsetup_r+0x14>
 8019a00:	6a03      	ldr	r3, [r0, #32]
 8019a02:	b90b      	cbnz	r3, 8019a08 <__swsetup_r+0x14>
 8019a04:	f7fc f862 	bl	8015acc <__sinit>
 8019a08:	89a3      	ldrh	r3, [r4, #12]
 8019a0a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019a0e:	0718      	lsls	r0, r3, #28
 8019a10:	d422      	bmi.n	8019a58 <__swsetup_r+0x64>
 8019a12:	06d9      	lsls	r1, r3, #27
 8019a14:	d407      	bmi.n	8019a26 <__swsetup_r+0x32>
 8019a16:	2309      	movs	r3, #9
 8019a18:	602b      	str	r3, [r5, #0]
 8019a1a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8019a1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019a22:	81a3      	strh	r3, [r4, #12]
 8019a24:	e034      	b.n	8019a90 <__swsetup_r+0x9c>
 8019a26:	0758      	lsls	r0, r3, #29
 8019a28:	d512      	bpl.n	8019a50 <__swsetup_r+0x5c>
 8019a2a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019a2c:	b141      	cbz	r1, 8019a40 <__swsetup_r+0x4c>
 8019a2e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019a32:	4299      	cmp	r1, r3
 8019a34:	d002      	beq.n	8019a3c <__swsetup_r+0x48>
 8019a36:	4628      	mov	r0, r5
 8019a38:	f7fd ffb6 	bl	80179a8 <_free_r>
 8019a3c:	2300      	movs	r3, #0
 8019a3e:	6363      	str	r3, [r4, #52]	; 0x34
 8019a40:	89a3      	ldrh	r3, [r4, #12]
 8019a42:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8019a46:	81a3      	strh	r3, [r4, #12]
 8019a48:	2300      	movs	r3, #0
 8019a4a:	6063      	str	r3, [r4, #4]
 8019a4c:	6923      	ldr	r3, [r4, #16]
 8019a4e:	6023      	str	r3, [r4, #0]
 8019a50:	89a3      	ldrh	r3, [r4, #12]
 8019a52:	f043 0308 	orr.w	r3, r3, #8
 8019a56:	81a3      	strh	r3, [r4, #12]
 8019a58:	6923      	ldr	r3, [r4, #16]
 8019a5a:	b94b      	cbnz	r3, 8019a70 <__swsetup_r+0x7c>
 8019a5c:	89a3      	ldrh	r3, [r4, #12]
 8019a5e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8019a62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019a66:	d003      	beq.n	8019a70 <__swsetup_r+0x7c>
 8019a68:	4621      	mov	r1, r4
 8019a6a:	4628      	mov	r0, r5
 8019a6c:	f7fc ff25 	bl	80168ba <__smakebuf_r>
 8019a70:	89a0      	ldrh	r0, [r4, #12]
 8019a72:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019a76:	f010 0301 	ands.w	r3, r0, #1
 8019a7a:	d00a      	beq.n	8019a92 <__swsetup_r+0x9e>
 8019a7c:	2300      	movs	r3, #0
 8019a7e:	60a3      	str	r3, [r4, #8]
 8019a80:	6963      	ldr	r3, [r4, #20]
 8019a82:	425b      	negs	r3, r3
 8019a84:	61a3      	str	r3, [r4, #24]
 8019a86:	6923      	ldr	r3, [r4, #16]
 8019a88:	b943      	cbnz	r3, 8019a9c <__swsetup_r+0xa8>
 8019a8a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8019a8e:	d1c4      	bne.n	8019a1a <__swsetup_r+0x26>
 8019a90:	bd38      	pop	{r3, r4, r5, pc}
 8019a92:	0781      	lsls	r1, r0, #30
 8019a94:	bf58      	it	pl
 8019a96:	6963      	ldrpl	r3, [r4, #20]
 8019a98:	60a3      	str	r3, [r4, #8]
 8019a9a:	e7f4      	b.n	8019a86 <__swsetup_r+0x92>
 8019a9c:	2000      	movs	r0, #0
 8019a9e:	e7f7      	b.n	8019a90 <__swsetup_r+0x9c>
 8019aa0:	200002c4 	.word	0x200002c4

08019aa4 <__ascii_wctomb>:
 8019aa4:	b149      	cbz	r1, 8019aba <__ascii_wctomb+0x16>
 8019aa6:	2aff      	cmp	r2, #255	; 0xff
 8019aa8:	bf8d      	iteet	hi
 8019aaa:	238a      	movhi	r3, #138	; 0x8a
 8019aac:	2001      	movls	r0, #1
 8019aae:	700a      	strbls	r2, [r1, #0]
 8019ab0:	6003      	strhi	r3, [r0, #0]
 8019ab2:	bf88      	it	hi
 8019ab4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8019ab8:	4770      	bx	lr
 8019aba:	4608      	mov	r0, r1
 8019abc:	4770      	bx	lr

08019abe <_putc_r>:
 8019abe:	b570      	push	{r4, r5, r6, lr}
 8019ac0:	460d      	mov	r5, r1
 8019ac2:	4614      	mov	r4, r2
 8019ac4:	4606      	mov	r6, r0
 8019ac6:	b118      	cbz	r0, 8019ad0 <_putc_r+0x12>
 8019ac8:	6a03      	ldr	r3, [r0, #32]
 8019aca:	b90b      	cbnz	r3, 8019ad0 <_putc_r+0x12>
 8019acc:	f7fb fffe 	bl	8015acc <__sinit>
 8019ad0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019ad2:	07d8      	lsls	r0, r3, #31
 8019ad4:	d405      	bmi.n	8019ae2 <_putc_r+0x24>
 8019ad6:	89a3      	ldrh	r3, [r4, #12]
 8019ad8:	0599      	lsls	r1, r3, #22
 8019ada:	d402      	bmi.n	8019ae2 <_putc_r+0x24>
 8019adc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019ade:	f7fd f8ac 	bl	8016c3a <__retarget_lock_acquire_recursive>
 8019ae2:	68a3      	ldr	r3, [r4, #8]
 8019ae4:	3b01      	subs	r3, #1
 8019ae6:	2b00      	cmp	r3, #0
 8019ae8:	60a3      	str	r3, [r4, #8]
 8019aea:	da05      	bge.n	8019af8 <_putc_r+0x3a>
 8019aec:	69a2      	ldr	r2, [r4, #24]
 8019aee:	4293      	cmp	r3, r2
 8019af0:	db12      	blt.n	8019b18 <_putc_r+0x5a>
 8019af2:	b2eb      	uxtb	r3, r5
 8019af4:	2b0a      	cmp	r3, #10
 8019af6:	d00f      	beq.n	8019b18 <_putc_r+0x5a>
 8019af8:	6823      	ldr	r3, [r4, #0]
 8019afa:	1c5a      	adds	r2, r3, #1
 8019afc:	6022      	str	r2, [r4, #0]
 8019afe:	701d      	strb	r5, [r3, #0]
 8019b00:	b2ed      	uxtb	r5, r5
 8019b02:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019b04:	07da      	lsls	r2, r3, #31
 8019b06:	d405      	bmi.n	8019b14 <_putc_r+0x56>
 8019b08:	89a3      	ldrh	r3, [r4, #12]
 8019b0a:	059b      	lsls	r3, r3, #22
 8019b0c:	d402      	bmi.n	8019b14 <_putc_r+0x56>
 8019b0e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019b10:	f7fd f894 	bl	8016c3c <__retarget_lock_release_recursive>
 8019b14:	4628      	mov	r0, r5
 8019b16:	bd70      	pop	{r4, r5, r6, pc}
 8019b18:	4629      	mov	r1, r5
 8019b1a:	4622      	mov	r2, r4
 8019b1c:	4630      	mov	r0, r6
 8019b1e:	f7ff ff2b 	bl	8019978 <__swbuf_r>
 8019b22:	4605      	mov	r5, r0
 8019b24:	e7ed      	b.n	8019b02 <_putc_r+0x44>
	...

08019b28 <__assert_func>:
 8019b28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019b2a:	4614      	mov	r4, r2
 8019b2c:	461a      	mov	r2, r3
 8019b2e:	4b09      	ldr	r3, [pc, #36]	; (8019b54 <__assert_func+0x2c>)
 8019b30:	4605      	mov	r5, r0
 8019b32:	681b      	ldr	r3, [r3, #0]
 8019b34:	68d8      	ldr	r0, [r3, #12]
 8019b36:	b14c      	cbz	r4, 8019b4c <__assert_func+0x24>
 8019b38:	4b07      	ldr	r3, [pc, #28]	; (8019b58 <__assert_func+0x30>)
 8019b3a:	9100      	str	r1, [sp, #0]
 8019b3c:	4907      	ldr	r1, [pc, #28]	; (8019b5c <__assert_func+0x34>)
 8019b3e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019b42:	462b      	mov	r3, r5
 8019b44:	f000 f816 	bl	8019b74 <fiprintf>
 8019b48:	f000 f826 	bl	8019b98 <abort>
 8019b4c:	4b04      	ldr	r3, [pc, #16]	; (8019b60 <__assert_func+0x38>)
 8019b4e:	461c      	mov	r4, r3
 8019b50:	e7f3      	b.n	8019b3a <__assert_func+0x12>
 8019b52:	bf00      	nop
 8019b54:	200002c4 	.word	0x200002c4
 8019b58:	0801d1f4 	.word	0x0801d1f4
 8019b5c:	0801d201 	.word	0x0801d201
 8019b60:	0801d22f 	.word	0x0801d22f

08019b64 <_malloc_usable_size_r>:
 8019b64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019b68:	1f18      	subs	r0, r3, #4
 8019b6a:	2b00      	cmp	r3, #0
 8019b6c:	bfbc      	itt	lt
 8019b6e:	580b      	ldrlt	r3, [r1, r0]
 8019b70:	18c0      	addlt	r0, r0, r3
 8019b72:	4770      	bx	lr

08019b74 <fiprintf>:
 8019b74:	b40e      	push	{r1, r2, r3}
 8019b76:	b503      	push	{r0, r1, lr}
 8019b78:	ab03      	add	r3, sp, #12
 8019b7a:	4601      	mov	r1, r0
 8019b7c:	4805      	ldr	r0, [pc, #20]	; (8019b94 <fiprintf+0x20>)
 8019b7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8019b82:	6800      	ldr	r0, [r0, #0]
 8019b84:	9301      	str	r3, [sp, #4]
 8019b86:	f7fe fe05 	bl	8018794 <_vfiprintf_r>
 8019b8a:	b002      	add	sp, #8
 8019b8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8019b90:	b003      	add	sp, #12
 8019b92:	4770      	bx	lr
 8019b94:	200002c4 	.word	0x200002c4

08019b98 <abort>:
 8019b98:	2006      	movs	r0, #6
 8019b9a:	b508      	push	{r3, lr}
 8019b9c:	f000 f82c 	bl	8019bf8 <raise>
 8019ba0:	2001      	movs	r0, #1
 8019ba2:	f7e7 fcdf 	bl	8001564 <_exit>

08019ba6 <_raise_r>:
 8019ba6:	291f      	cmp	r1, #31
 8019ba8:	b538      	push	{r3, r4, r5, lr}
 8019baa:	4604      	mov	r4, r0
 8019bac:	460d      	mov	r5, r1
 8019bae:	d904      	bls.n	8019bba <_raise_r+0x14>
 8019bb0:	2316      	movs	r3, #22
 8019bb2:	6003      	str	r3, [r0, #0]
 8019bb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019bb8:	bd38      	pop	{r3, r4, r5, pc}
 8019bba:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8019bbc:	b112      	cbz	r2, 8019bc4 <_raise_r+0x1e>
 8019bbe:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8019bc2:	b94b      	cbnz	r3, 8019bd8 <_raise_r+0x32>
 8019bc4:	4620      	mov	r0, r4
 8019bc6:	f000 f831 	bl	8019c2c <_getpid_r>
 8019bca:	462a      	mov	r2, r5
 8019bcc:	4601      	mov	r1, r0
 8019bce:	4620      	mov	r0, r4
 8019bd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019bd4:	f000 b818 	b.w	8019c08 <_kill_r>
 8019bd8:	2b01      	cmp	r3, #1
 8019bda:	d00a      	beq.n	8019bf2 <_raise_r+0x4c>
 8019bdc:	1c59      	adds	r1, r3, #1
 8019bde:	d103      	bne.n	8019be8 <_raise_r+0x42>
 8019be0:	2316      	movs	r3, #22
 8019be2:	6003      	str	r3, [r0, #0]
 8019be4:	2001      	movs	r0, #1
 8019be6:	e7e7      	b.n	8019bb8 <_raise_r+0x12>
 8019be8:	2400      	movs	r4, #0
 8019bea:	4628      	mov	r0, r5
 8019bec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8019bf0:	4798      	blx	r3
 8019bf2:	2000      	movs	r0, #0
 8019bf4:	e7e0      	b.n	8019bb8 <_raise_r+0x12>
	...

08019bf8 <raise>:
 8019bf8:	4b02      	ldr	r3, [pc, #8]	; (8019c04 <raise+0xc>)
 8019bfa:	4601      	mov	r1, r0
 8019bfc:	6818      	ldr	r0, [r3, #0]
 8019bfe:	f7ff bfd2 	b.w	8019ba6 <_raise_r>
 8019c02:	bf00      	nop
 8019c04:	200002c4 	.word	0x200002c4

08019c08 <_kill_r>:
 8019c08:	b538      	push	{r3, r4, r5, lr}
 8019c0a:	2300      	movs	r3, #0
 8019c0c:	4d06      	ldr	r5, [pc, #24]	; (8019c28 <_kill_r+0x20>)
 8019c0e:	4604      	mov	r4, r0
 8019c10:	4608      	mov	r0, r1
 8019c12:	4611      	mov	r1, r2
 8019c14:	602b      	str	r3, [r5, #0]
 8019c16:	f7e7 fc95 	bl	8001544 <_kill>
 8019c1a:	1c43      	adds	r3, r0, #1
 8019c1c:	d102      	bne.n	8019c24 <_kill_r+0x1c>
 8019c1e:	682b      	ldr	r3, [r5, #0]
 8019c20:	b103      	cbz	r3, 8019c24 <_kill_r+0x1c>
 8019c22:	6023      	str	r3, [r4, #0]
 8019c24:	bd38      	pop	{r3, r4, r5, pc}
 8019c26:	bf00      	nop
 8019c28:	2000348c 	.word	0x2000348c

08019c2c <_getpid_r>:
 8019c2c:	f7e7 bc82 	b.w	8001534 <_getpid>

08019c30 <_init>:
 8019c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019c32:	bf00      	nop
 8019c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019c36:	bc08      	pop	{r3}
 8019c38:	469e      	mov	lr, r3
 8019c3a:	4770      	bx	lr

08019c3c <_fini>:
 8019c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019c3e:	bf00      	nop
 8019c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019c42:	bc08      	pop	{r3}
 8019c44:	469e      	mov	lr, r3
 8019c46:	4770      	bx	lr
